Implementation smell,Namespace,Class,File,Method,Description
Long Method,CodeReason.Reports.Barcode,BarcodeC128,D:\research\architectureSmells\repos\jogibear9988_CodeReason.Reports\CodeReason.Reports.Barcode\BarcodeC128.cs,GenerateCodeSequence,The method has 108 lines of code.
Complex Method,CodeReason.Reports.Barcode,BarcodeC128,D:\research\architectureSmells\repos\jogibear9988_CodeReason.Reports\CodeReason.Reports.Barcode\BarcodeC128.cs,DrawCharByIndex,Cyclomatic complexity of the method is 8
Complex Method,CodeReason.Reports.Barcode,BarcodeC128,D:\research\architectureSmells\repos\jogibear9988_CodeReason.Reports\CodeReason.Reports.Barcode\BarcodeC128.cs,GenerateCodeSequence,Cyclomatic complexity of the method is 19
Complex Method,CodeReason.Reports.Barcode,BarcodeC128,D:\research\architectureSmells\repos\jogibear9988_CodeReason.Reports\CodeReason.Reports.Barcode\BarcodeC128.cs,RedrawAll,Cyclomatic complexity of the method is 17
Long Parameter List,CodeReason.Reports.Barcode,BarcodeC128,D:\research\architectureSmells\repos\jogibear9988_CodeReason.Reports\CodeReason.Reports.Barcode\BarcodeC128.cs,DrawCharByIndex,The method has 5 parameters. Parameters: canvas' left' top' height' charIndex
Long Statement,CodeReason.Reports.Barcode,BarcodeC128,D:\research\architectureSmells\repos\jogibear9988_CodeReason.Reports\CodeReason.Reports.Barcode\BarcodeC128.cs,GenerateCodeSequence,The length of the statement  "                if (charIndex < 0) throw new ArgumentOutOfRangeException("code"' "The barcode value contains an unsupported character \"" + code[i] + "\""); " is 140.
Long Statement,CodeReason.Reports.Barcode,BarcodeC128,D:\research\architectureSmells\repos\jogibear9988_CodeReason.Reports\CodeReason.Reports.Barcode\BarcodeC128.cs,RedrawAll,The length of the statement  "                labelScale = (decimal)rectClient.Width / (decimal)barcodeWidth * (decimal)barcodeDataWidth / (decimal)labelText.DesiredSize.Width; " is 130.
Magic Number,CodeReason.Reports.Barcode,BarcodeC128,D:\research\architectureSmells\repos\jogibear9988_CodeReason.Reports\CodeReason.Reports.Barcode\BarcodeC128.cs,GenerateKeysA,The following statement contains a magic number: _keysA[i] = (char)(32 + i);
Magic Number,CodeReason.Reports.Barcode,BarcodeC128,D:\research\architectureSmells\repos\jogibear9988_CodeReason.Reports\CodeReason.Reports.Barcode\BarcodeC128.cs,GenerateKeysA,The following statement contains a magic number: i < 64
Magic Number,CodeReason.Reports.Barcode,BarcodeC128,D:\research\architectureSmells\repos\jogibear9988_CodeReason.Reports\CodeReason.Reports.Barcode\BarcodeC128.cs,GenerateKeysA,The following statement contains a magic number: i < 96
Magic Number,CodeReason.Reports.Barcode,BarcodeC128,D:\research\architectureSmells\repos\jogibear9988_CodeReason.Reports\CodeReason.Reports.Barcode\BarcodeC128.cs,GenerateKeysB,The following statement contains a magic number: _keysB[i] = (char)(32 + i);
Magic Number,CodeReason.Reports.Barcode,BarcodeC128,D:\research\architectureSmells\repos\jogibear9988_CodeReason.Reports\CodeReason.Reports.Barcode\BarcodeC128.cs,GenerateKeysB,The following statement contains a magic number: i < 96
Magic Number,CodeReason.Reports.Barcode,BarcodeC128,D:\research\architectureSmells\repos\jogibear9988_CodeReason.Reports\CodeReason.Reports.Barcode\BarcodeC128.cs,GenerateKeysC,The following statement contains a magic number: i < 100
Magic Number,CodeReason.Reports.Barcode,BarcodeC128,D:\research\architectureSmells\repos\jogibear9988_CodeReason.Reports\CodeReason.Reports.Barcode\BarcodeC128.cs,DrawCharByIndex,The following statement contains a magic number: switch (sequence[i])                  {                      case '0':                          lineWidth = 1d;                          break;                      case '1':                          lineWidth = 2d;                          break;                      case '2':                          lineWidth = 3d;                          break;                      case '3':                          lineWidth = 4d;                          break;                  }
Magic Number,CodeReason.Reports.Barcode,BarcodeC128,D:\research\architectureSmells\repos\jogibear9988_CodeReason.Reports\CodeReason.Reports.Barcode\BarcodeC128.cs,DrawCharByIndex,The following statement contains a magic number: switch (sequence[i])                  {                      case '0':                          lineWidth = 1d;                          break;                      case '1':                          lineWidth = 2d;                          break;                      case '2':                          lineWidth = 3d;                          break;                      case '3':                          lineWidth = 4d;                          break;                  }
Magic Number,CodeReason.Reports.Barcode,BarcodeC128,D:\research\architectureSmells\repos\jogibear9988_CodeReason.Reports\CodeReason.Reports.Barcode\BarcodeC128.cs,DrawCharByIndex,The following statement contains a magic number: switch (sequence[i])                  {                      case '0':                          lineWidth = 1d;                          break;                      case '1':                          lineWidth = 2d;                          break;                      case '2':                          lineWidth = 3d;                          break;                      case '3':                          lineWidth = 4d;                          break;                  }
Magic Number,CodeReason.Reports.Barcode,BarcodeC128,D:\research\architectureSmells\repos\jogibear9988_CodeReason.Reports\CodeReason.Reports.Barcode\BarcodeC128.cs,DrawCharByIndex,The following statement contains a magic number: (i % 2) == 0
Magic Number,CodeReason.Reports.Barcode,BarcodeC128,D:\research\architectureSmells\repos\jogibear9988_CodeReason.Reports\CodeReason.Reports.Barcode\BarcodeC128.cs,GenerateCodeSequence,The following statement contains a magic number: switch (_barcodeSubType)              {                  case Code128SubType.A:                      res.Add(103);  // Start A                      break;                  case Code128SubType.B:                      res.Add(104);  // Start B                      break;                  case Code128SubType.BC:                      if ((code.Length >= 2) && (Char.IsDigit(code[0])) && (Char.IsDigit(code[1])))                      {                          res.Add(105); // Start C                      }                      else                      {                          isB = true;                          res.Add(104); // Start B                      }                      break;                  case Code128SubType.C:                      res.Add(105);  // Start C                      break;              }
Magic Number,CodeReason.Reports.Barcode,BarcodeC128,D:\research\architectureSmells\repos\jogibear9988_CodeReason.Reports\CodeReason.Reports.Barcode\BarcodeC128.cs,GenerateCodeSequence,The following statement contains a magic number: switch (_barcodeSubType)              {                  case Code128SubType.A:                      res.Add(103);  // Start A                      break;                  case Code128SubType.B:                      res.Add(104);  // Start B                      break;                  case Code128SubType.BC:                      if ((code.Length >= 2) && (Char.IsDigit(code[0])) && (Char.IsDigit(code[1])))                      {                          res.Add(105); // Start C                      }                      else                      {                          isB = true;                          res.Add(104); // Start B                      }                      break;                  case Code128SubType.C:                      res.Add(105);  // Start C                      break;              }
Magic Number,CodeReason.Reports.Barcode,BarcodeC128,D:\research\architectureSmells\repos\jogibear9988_CodeReason.Reports\CodeReason.Reports.Barcode\BarcodeC128.cs,GenerateCodeSequence,The following statement contains a magic number: switch (_barcodeSubType)              {                  case Code128SubType.A:                      res.Add(103);  // Start A                      break;                  case Code128SubType.B:                      res.Add(104);  // Start B                      break;                  case Code128SubType.BC:                      if ((code.Length >= 2) && (Char.IsDigit(code[0])) && (Char.IsDigit(code[1])))                      {                          res.Add(105); // Start C                      }                      else                      {                          isB = true;                          res.Add(104); // Start B                      }                      break;                  case Code128SubType.C:                      res.Add(105);  // Start C                      break;              }
Magic Number,CodeReason.Reports.Barcode,BarcodeC128,D:\research\architectureSmells\repos\jogibear9988_CodeReason.Reports\CodeReason.Reports.Barcode\BarcodeC128.cs,GenerateCodeSequence,The following statement contains a magic number: switch (_barcodeSubType)              {                  case Code128SubType.A:                      res.Add(103);  // Start A                      break;                  case Code128SubType.B:                      res.Add(104);  // Start B                      break;                  case Code128SubType.BC:                      if ((code.Length >= 2) && (Char.IsDigit(code[0])) && (Char.IsDigit(code[1])))                      {                          res.Add(105); // Start C                      }                      else                      {                          isB = true;                          res.Add(104); // Start B                      }                      break;                  case Code128SubType.C:                      res.Add(105);  // Start C                      break;              }
Magic Number,CodeReason.Reports.Barcode,BarcodeC128,D:\research\architectureSmells\repos\jogibear9988_CodeReason.Reports\CodeReason.Reports.Barcode\BarcodeC128.cs,GenerateCodeSequence,The following statement contains a magic number: switch (_barcodeSubType)              {                  case Code128SubType.A:                      res.Add(103);  // Start A                      break;                  case Code128SubType.B:                      res.Add(104);  // Start B                      break;                  case Code128SubType.BC:                      if ((code.Length >= 2) && (Char.IsDigit(code[0])) && (Char.IsDigit(code[1])))                      {                          res.Add(105); // Start C                      }                      else                      {                          isB = true;                          res.Add(104); // Start B                      }                      break;                  case Code128SubType.C:                      res.Add(105);  // Start C                      break;              }
Magic Number,CodeReason.Reports.Barcode,BarcodeC128,D:\research\architectureSmells\repos\jogibear9988_CodeReason.Reports\CodeReason.Reports.Barcode\BarcodeC128.cs,GenerateCodeSequence,The following statement contains a magic number: switch (_barcodeSubType)              {                  case Code128SubType.A:                      res.Add(103);  // Start A                      break;                  case Code128SubType.B:                      res.Add(104);  // Start B                      break;                  case Code128SubType.BC:                      if ((code.Length >= 2) && (Char.IsDigit(code[0])) && (Char.IsDigit(code[1])))                      {                          res.Add(105); // Start C                      }                      else                      {                          isB = true;                          res.Add(104); // Start B                      }                      break;                  case Code128SubType.C:                      res.Add(105);  // Start C                      break;              }
Magic Number,CodeReason.Reports.Barcode,BarcodeC128,D:\research\architectureSmells\repos\jogibear9988_CodeReason.Reports\CodeReason.Reports.Barcode\BarcodeC128.cs,GenerateCodeSequence,The following statement contains a magic number: switch (_barcodeSubType)                  {                      case Code128SubType.A:                          charIndex = IndexOfCharArray(_keysA' code[i]);                          charInfo.Add(new BarcodeCharInfo(i' -1' code[i].ToString()));                          break;                      case Code128SubType.B:                          charIndex = IndexOfCharArray(_keysB' code[i]);                          charInfo.Add(new BarcodeCharInfo(i' -1' code[i].ToString()));                          break;                      case Code128SubType.BC:                          if (isB)                          {                              if ((i <= code.Length - 2) && (Char.IsDigit(code[i])) && (Char.IsDigit(code[i + 1])))                              {                                  isB = false;                                  res.Add(99); // Code C                                  charInfo.Add(new BarcodeCharInfo(i' -1' ""));                                    partC += code[i];                                  if (partC.Length == 2)                                  {                                      charIndex = IndexOfStringArray(_keysC' partC);                                      charInfo.Add(new BarcodeCharInfo(i' -1' partC));                                      partC = "";                                  }                                  else continue;                              }                              else                              {                                  charIndex = IndexOfCharArray(_keysB' code[i]);                                  charInfo.Add(new BarcodeCharInfo(i' -1' code[i].ToString()));                              }                          }                          else                          {                              if (partC.Length <= 0)                              {                                  if ((i >= code.Length - 1) || (!Char.IsDigit(code[i])) || (!Char.IsDigit(code[i + 1])))                                  {                                      isB = true;                                      res.Add(100); // Code B                                      charInfo.Add(new BarcodeCharInfo(i' -1' ""));                                        charIndex = IndexOfCharArray(_keysB' code[i]);                                      charInfo.Add(new BarcodeCharInfo(i' -1' code[i].ToString()));                                      break;                                  }                              }                                partC += code[i];                              if (partC.Length == 2)                              {                                  charIndex = IndexOfStringArray(_keysC' partC);                                  charInfo.Add(new BarcodeCharInfo(i' -1' partC));                                  partC = "";                              }                              else continue;                          }                          break;                      case Code128SubType.C:                          partC += code[i];                          if (partC.Length == 2)                          {                              charIndex = IndexOfStringArray(_keysC' partC);                              charInfo.Add(new BarcodeCharInfo(i' -1' partC));                              partC = "";                          }                          else continue;                          break;                  }
Magic Number,CodeReason.Reports.Barcode,BarcodeC128,D:\research\architectureSmells\repos\jogibear9988_CodeReason.Reports\CodeReason.Reports.Barcode\BarcodeC128.cs,GenerateCodeSequence,The following statement contains a magic number: switch (_barcodeSubType)                  {                      case Code128SubType.A:                          charIndex = IndexOfCharArray(_keysA' code[i]);                          charInfo.Add(new BarcodeCharInfo(i' -1' code[i].ToString()));                          break;                      case Code128SubType.B:                          charIndex = IndexOfCharArray(_keysB' code[i]);                          charInfo.Add(new BarcodeCharInfo(i' -1' code[i].ToString()));                          break;                      case Code128SubType.BC:                          if (isB)                          {                              if ((i <= code.Length - 2) && (Char.IsDigit(code[i])) && (Char.IsDigit(code[i + 1])))                              {                                  isB = false;                                  res.Add(99); // Code C                                  charInfo.Add(new BarcodeCharInfo(i' -1' ""));                                    partC += code[i];                                  if (partC.Length == 2)                                  {                                      charIndex = IndexOfStringArray(_keysC' partC);                                      charInfo.Add(new BarcodeCharInfo(i' -1' partC));                                      partC = "";                                  }                                  else continue;                              }                              else                              {                                  charIndex = IndexOfCharArray(_keysB' code[i]);                                  charInfo.Add(new BarcodeCharInfo(i' -1' code[i].ToString()));                              }                          }                          else                          {                              if (partC.Length <= 0)                              {                                  if ((i >= code.Length - 1) || (!Char.IsDigit(code[i])) || (!Char.IsDigit(code[i + 1])))                                  {                                      isB = true;                                      res.Add(100); // Code B                                      charInfo.Add(new BarcodeCharInfo(i' -1' ""));                                        charIndex = IndexOfCharArray(_keysB' code[i]);                                      charInfo.Add(new BarcodeCharInfo(i' -1' code[i].ToString()));                                      break;                                  }                              }                                partC += code[i];                              if (partC.Length == 2)                              {                                  charIndex = IndexOfStringArray(_keysC' partC);                                  charInfo.Add(new BarcodeCharInfo(i' -1' partC));                                  partC = "";                              }                              else continue;                          }                          break;                      case Code128SubType.C:                          partC += code[i];                          if (partC.Length == 2)                          {                              charIndex = IndexOfStringArray(_keysC' partC);                              charInfo.Add(new BarcodeCharInfo(i' -1' partC));                              partC = "";                          }                          else continue;                          break;                  }
Magic Number,CodeReason.Reports.Barcode,BarcodeC128,D:\research\architectureSmells\repos\jogibear9988_CodeReason.Reports\CodeReason.Reports.Barcode\BarcodeC128.cs,GenerateCodeSequence,The following statement contains a magic number: switch (_barcodeSubType)                  {                      case Code128SubType.A:                          charIndex = IndexOfCharArray(_keysA' code[i]);                          charInfo.Add(new BarcodeCharInfo(i' -1' code[i].ToString()));                          break;                      case Code128SubType.B:                          charIndex = IndexOfCharArray(_keysB' code[i]);                          charInfo.Add(new BarcodeCharInfo(i' -1' code[i].ToString()));                          break;                      case Code128SubType.BC:                          if (isB)                          {                              if ((i <= code.Length - 2) && (Char.IsDigit(code[i])) && (Char.IsDigit(code[i + 1])))                              {                                  isB = false;                                  res.Add(99); // Code C                                  charInfo.Add(new BarcodeCharInfo(i' -1' ""));                                    partC += code[i];                                  if (partC.Length == 2)                                  {                                      charIndex = IndexOfStringArray(_keysC' partC);                                      charInfo.Add(new BarcodeCharInfo(i' -1' partC));                                      partC = "";                                  }                                  else continue;                              }                              else                              {                                  charIndex = IndexOfCharArray(_keysB' code[i]);                                  charInfo.Add(new BarcodeCharInfo(i' -1' code[i].ToString()));                              }                          }                          else                          {                              if (partC.Length <= 0)                              {                                  if ((i >= code.Length - 1) || (!Char.IsDigit(code[i])) || (!Char.IsDigit(code[i + 1])))                                  {                                      isB = true;                                      res.Add(100); // Code B                                      charInfo.Add(new BarcodeCharInfo(i' -1' ""));                                        charIndex = IndexOfCharArray(_keysB' code[i]);                                      charInfo.Add(new BarcodeCharInfo(i' -1' code[i].ToString()));                                      break;                                  }                              }                                partC += code[i];                              if (partC.Length == 2)                              {                                  charIndex = IndexOfStringArray(_keysC' partC);                                  charInfo.Add(new BarcodeCharInfo(i' -1' partC));                                  partC = "";                              }                              else continue;                          }                          break;                      case Code128SubType.C:                          partC += code[i];                          if (partC.Length == 2)                          {                              charIndex = IndexOfStringArray(_keysC' partC);                              charInfo.Add(new BarcodeCharInfo(i' -1' partC));                              partC = "";                          }                          else continue;                          break;                  }
Magic Number,CodeReason.Reports.Barcode,BarcodeC128,D:\research\architectureSmells\repos\jogibear9988_CodeReason.Reports\CodeReason.Reports.Barcode\BarcodeC128.cs,GenerateCodeSequence,The following statement contains a magic number: switch (_barcodeSubType)                  {                      case Code128SubType.A:                          charIndex = IndexOfCharArray(_keysA' code[i]);                          charInfo.Add(new BarcodeCharInfo(i' -1' code[i].ToString()));                          break;                      case Code128SubType.B:                          charIndex = IndexOfCharArray(_keysB' code[i]);                          charInfo.Add(new BarcodeCharInfo(i' -1' code[i].ToString()));                          break;                      case Code128SubType.BC:                          if (isB)                          {                              if ((i <= code.Length - 2) && (Char.IsDigit(code[i])) && (Char.IsDigit(code[i + 1])))                              {                                  isB = false;                                  res.Add(99); // Code C                                  charInfo.Add(new BarcodeCharInfo(i' -1' ""));                                    partC += code[i];                                  if (partC.Length == 2)                                  {                                      charIndex = IndexOfStringArray(_keysC' partC);                                      charInfo.Add(new BarcodeCharInfo(i' -1' partC));                                      partC = "";                                  }                                  else continue;                              }                              else                              {                                  charIndex = IndexOfCharArray(_keysB' code[i]);                                  charInfo.Add(new BarcodeCharInfo(i' -1' code[i].ToString()));                              }                          }                          else                          {                              if (partC.Length <= 0)                              {                                  if ((i >= code.Length - 1) || (!Char.IsDigit(code[i])) || (!Char.IsDigit(code[i + 1])))                                  {                                      isB = true;                                      res.Add(100); // Code B                                      charInfo.Add(new BarcodeCharInfo(i' -1' ""));                                        charIndex = IndexOfCharArray(_keysB' code[i]);                                      charInfo.Add(new BarcodeCharInfo(i' -1' code[i].ToString()));                                      break;                                  }                              }                                partC += code[i];                              if (partC.Length == 2)                              {                                  charIndex = IndexOfStringArray(_keysC' partC);                                  charInfo.Add(new BarcodeCharInfo(i' -1' partC));                                  partC = "";                              }                              else continue;                          }                          break;                      case Code128SubType.C:                          partC += code[i];                          if (partC.Length == 2)                          {                              charIndex = IndexOfStringArray(_keysC' partC);                              charInfo.Add(new BarcodeCharInfo(i' -1' partC));                              partC = "";                          }                          else continue;                          break;                  }
Magic Number,CodeReason.Reports.Barcode,BarcodeC128,D:\research\architectureSmells\repos\jogibear9988_CodeReason.Reports\CodeReason.Reports.Barcode\BarcodeC128.cs,GenerateCodeSequence,The following statement contains a magic number: switch (_barcodeSubType)                  {                      case Code128SubType.A:                          charIndex = IndexOfCharArray(_keysA' code[i]);                          charInfo.Add(new BarcodeCharInfo(i' -1' code[i].ToString()));                          break;                      case Code128SubType.B:                          charIndex = IndexOfCharArray(_keysB' code[i]);                          charInfo.Add(new BarcodeCharInfo(i' -1' code[i].ToString()));                          break;                      case Code128SubType.BC:                          if (isB)                          {                              if ((i <= code.Length - 2) && (Char.IsDigit(code[i])) && (Char.IsDigit(code[i + 1])))                              {                                  isB = false;                                  res.Add(99); // Code C                                  charInfo.Add(new BarcodeCharInfo(i' -1' ""));                                    partC += code[i];                                  if (partC.Length == 2)                                  {                                      charIndex = IndexOfStringArray(_keysC' partC);                                      charInfo.Add(new BarcodeCharInfo(i' -1' partC));                                      partC = "";                                  }                                  else continue;                              }                              else                              {                                  charIndex = IndexOfCharArray(_keysB' code[i]);                                  charInfo.Add(new BarcodeCharInfo(i' -1' code[i].ToString()));                              }                          }                          else                          {                              if (partC.Length <= 0)                              {                                  if ((i >= code.Length - 1) || (!Char.IsDigit(code[i])) || (!Char.IsDigit(code[i + 1])))                                  {                                      isB = true;                                      res.Add(100); // Code B                                      charInfo.Add(new BarcodeCharInfo(i' -1' ""));                                        charIndex = IndexOfCharArray(_keysB' code[i]);                                      charInfo.Add(new BarcodeCharInfo(i' -1' code[i].ToString()));                                      break;                                  }                              }                                partC += code[i];                              if (partC.Length == 2)                              {                                  charIndex = IndexOfStringArray(_keysC' partC);                                  charInfo.Add(new BarcodeCharInfo(i' -1' partC));                                  partC = "";                              }                              else continue;                          }                          break;                      case Code128SubType.C:                          partC += code[i];                          if (partC.Length == 2)                          {                              charIndex = IndexOfStringArray(_keysC' partC);                              charInfo.Add(new BarcodeCharInfo(i' -1' partC));                              partC = "";                          }                          else continue;                          break;                  }
Magic Number,CodeReason.Reports.Barcode,BarcodeC128,D:\research\architectureSmells\repos\jogibear9988_CodeReason.Reports\CodeReason.Reports.Barcode\BarcodeC128.cs,GenerateCodeSequence,The following statement contains a magic number: switch (_barcodeSubType)                  {                      case Code128SubType.A:                          charIndex = IndexOfCharArray(_keysA' code[i]);                          charInfo.Add(new BarcodeCharInfo(i' -1' code[i].ToString()));                          break;                      case Code128SubType.B:                          charIndex = IndexOfCharArray(_keysB' code[i]);                          charInfo.Add(new BarcodeCharInfo(i' -1' code[i].ToString()));                          break;                      case Code128SubType.BC:                          if (isB)                          {                              if ((i <= code.Length - 2) && (Char.IsDigit(code[i])) && (Char.IsDigit(code[i + 1])))                              {                                  isB = false;                                  res.Add(99); // Code C                                  charInfo.Add(new BarcodeCharInfo(i' -1' ""));                                    partC += code[i];                                  if (partC.Length == 2)                                  {                                      charIndex = IndexOfStringArray(_keysC' partC);                                      charInfo.Add(new BarcodeCharInfo(i' -1' partC));                                      partC = "";                                  }                                  else continue;                              }                              else                              {                                  charIndex = IndexOfCharArray(_keysB' code[i]);                                  charInfo.Add(new BarcodeCharInfo(i' -1' code[i].ToString()));                              }                          }                          else                          {                              if (partC.Length <= 0)                              {                                  if ((i >= code.Length - 1) || (!Char.IsDigit(code[i])) || (!Char.IsDigit(code[i + 1])))                                  {                                      isB = true;                                      res.Add(100); // Code B                                      charInfo.Add(new BarcodeCharInfo(i' -1' ""));                                        charIndex = IndexOfCharArray(_keysB' code[i]);                                      charInfo.Add(new BarcodeCharInfo(i' -1' code[i].ToString()));                                      break;                                  }                              }                                partC += code[i];                              if (partC.Length == 2)                              {                                  charIndex = IndexOfStringArray(_keysC' partC);                                  charInfo.Add(new BarcodeCharInfo(i' -1' partC));                                  partC = "";                              }                              else continue;                          }                          break;                      case Code128SubType.C:                          partC += code[i];                          if (partC.Length == 2)                          {                              charIndex = IndexOfStringArray(_keysC' partC);                              charInfo.Add(new BarcodeCharInfo(i' -1' partC));                              partC = "";                          }                          else continue;                          break;                  }
Magic Number,CodeReason.Reports.Barcode,BarcodeC128,D:\research\architectureSmells\repos\jogibear9988_CodeReason.Reports\CodeReason.Reports.Barcode\BarcodeC128.cs,RedrawAll,The following statement contains a magic number: left += DrawCharByIndex(null' left' 0' 1' (checkSum % 103));
Magic Number,CodeReason.Reports.Barcode,BarcodeC128,D:\research\architectureSmells\repos\jogibear9988_CodeReason.Reports\CodeReason.Reports.Barcode\BarcodeC128.cs,RedrawAll,The following statement contains a magic number: left += DrawCharByIndex(null' left' 0' 1' 106);
Magic Number,CodeReason.Reports.Barcode,BarcodeC128,D:\research\architectureSmells\repos\jogibear9988_CodeReason.Reports\CodeReason.Reports.Barcode\BarcodeC128.cs,RedrawAll,The following statement contains a magic number: labelText.Padding = new Thickness(0.25);
Magic Number,CodeReason.Reports.Barcode,BarcodeC128,D:\research\architectureSmells\repos\jogibear9988_CodeReason.Reports\CodeReason.Reports.Barcode\BarcodeC128.cs,RedrawAll,The following statement contains a magic number: lineHeight = (rectClient.Height - (double)labelScale * th / 2) / rectClient.Height;
Magic Number,CodeReason.Reports.Barcode,BarcodeC128,D:\research\architectureSmells\repos\jogibear9988_CodeReason.Reports\CodeReason.Reports.Barcode\BarcodeC128.cs,RedrawAll,The following statement contains a magic number: left += DrawCharByIndex(canvas' left' 0' 1' (checkSum % 103));
Magic Number,CodeReason.Reports.Barcode,BarcodeC128,D:\research\architectureSmells\repos\jogibear9988_CodeReason.Reports\CodeReason.Reports.Barcode\BarcodeC128.cs,RedrawAll,The following statement contains a magic number: left += DrawCharByIndex(canvas' left' 0' 1' 106);
Magic Number,CodeReason.Reports.Barcode,BarcodeC128,D:\research\architectureSmells\repos\jogibear9988_CodeReason.Reports\CodeReason.Reports.Barcode\BarcodeC128.cs,RedrawAll,The following statement contains a magic number: tg.Children.Add(new ScaleTransform(rectClient.Width / left' rectClient.Height - textHeight / 2));
Magic Number,CodeReason.Reports.Barcode,BarcodeZenFramework,D:\research\architectureSmells\repos\jogibear9988_CodeReason.Reports\CodeReason.Reports.Barcode\BarcodeZenFramework.cs,RedrawAll,The following statement contains a magic number: var img = DrawObject.Draw(Value.ToString()' 30);
Missing Default,CodeReason.Reports.Barcode,BarcodeC128,D:\research\architectureSmells\repos\jogibear9988_CodeReason.Reports\CodeReason.Reports.Barcode\BarcodeC128.cs,DrawCharByIndex,The following switch statement is missing a default case: switch (sequence[i])                  {                      case '0':                          lineWidth = 1d;                          break;                      case '1':                          lineWidth = 2d;                          break;                      case '2':                          lineWidth = 3d;                          break;                      case '3':                          lineWidth = 4d;                          break;                  }
Missing Default,CodeReason.Reports.Barcode,BarcodeC128,D:\research\architectureSmells\repos\jogibear9988_CodeReason.Reports\CodeReason.Reports.Barcode\BarcodeC128.cs,GenerateCodeSequence,The following switch statement is missing a default case: switch (_barcodeSubType)              {                  case Code128SubType.A:                      res.Add(103);  // Start A                      break;                  case Code128SubType.B:                      res.Add(104);  // Start B                      break;                  case Code128SubType.BC:                      if ((code.Length >= 2) && (Char.IsDigit(code[0])) && (Char.IsDigit(code[1])))                      {                          res.Add(105); // Start C                      }                      else                      {                          isB = true;                          res.Add(104); // Start B                      }                      break;                  case Code128SubType.C:                      res.Add(105);  // Start C                      break;              }
Missing Default,CodeReason.Reports.Barcode,BarcodeC128,D:\research\architectureSmells\repos\jogibear9988_CodeReason.Reports\CodeReason.Reports.Barcode\BarcodeC128.cs,GenerateCodeSequence,The following switch statement is missing a default case: switch (_barcodeSubType)                  {                      case Code128SubType.A:                          charIndex = IndexOfCharArray(_keysA' code[i]);                          charInfo.Add(new BarcodeCharInfo(i' -1' code[i].ToString()));                          break;                      case Code128SubType.B:                          charIndex = IndexOfCharArray(_keysB' code[i]);                          charInfo.Add(new BarcodeCharInfo(i' -1' code[i].ToString()));                          break;                      case Code128SubType.BC:                          if (isB)                          {                              if ((i <= code.Length - 2) && (Char.IsDigit(code[i])) && (Char.IsDigit(code[i + 1])))                              {                                  isB = false;                                  res.Add(99); // Code C                                  charInfo.Add(new BarcodeCharInfo(i' -1' ""));                                    partC += code[i];                                  if (partC.Length == 2)                                  {                                      charIndex = IndexOfStringArray(_keysC' partC);                                      charInfo.Add(new BarcodeCharInfo(i' -1' partC));                                      partC = "";                                  }                                  else continue;                              }                              else                              {                                  charIndex = IndexOfCharArray(_keysB' code[i]);                                  charInfo.Add(new BarcodeCharInfo(i' -1' code[i].ToString()));                              }                          }                          else                          {                              if (partC.Length <= 0)                              {                                  if ((i >= code.Length - 1) || (!Char.IsDigit(code[i])) || (!Char.IsDigit(code[i + 1])))                                  {                                      isB = true;                                      res.Add(100); // Code B                                      charInfo.Add(new BarcodeCharInfo(i' -1' ""));                                        charIndex = IndexOfCharArray(_keysB' code[i]);                                      charInfo.Add(new BarcodeCharInfo(i' -1' code[i].ToString()));                                      break;                                  }                              }                                partC += code[i];                              if (partC.Length == 2)                              {                                  charIndex = IndexOfStringArray(_keysC' partC);                                  charInfo.Add(new BarcodeCharInfo(i' -1' partC));                                  partC = "";                              }                              else continue;                          }                          break;                      case Code128SubType.C:                          partC += code[i];                          if (partC.Length == 2)                          {                              charIndex = IndexOfStringArray(_keysC' partC);                              charInfo.Add(new BarcodeCharInfo(i' -1' partC));                              partC = "";                          }                          else continue;                          break;                  }
