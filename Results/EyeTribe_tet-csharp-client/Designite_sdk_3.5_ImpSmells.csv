Implementation smell,Namespace,Class,File,Method,Description
Long Method,EyeTribe.ClientSdk,GazeManagerCore,C:\repos\EyeTribe_tet-csharp-client\sdk\GazeManagerCore.cs,HandleApiResponse,The method has 264 lines of code.
Complex Method,EyeTribe.ClientSdk,IncomingStreamHandler,C:\repos\EyeTribe_tet-csharp-client\sdk\GazeApiManager.cs,Work,Cyclomatic complexity of the method is 11
Long Parameter List,EyeTribe.ClientSdk,GazeApiManager,C:\repos\EyeTribe_tet-csharp-client\sdk\GazeApiManager.cs,RequestScreenSwitch,The method has 5 parameters. Parameters: screenIndex' screenResW' screenResH' screenPsyW' screenPsyH
Long Parameter List,EyeTribe.ClientSdk,IncomingStreamHandler,C:\repos\EyeTribe_tet-csharp-client\sdk\GazeApiManager.cs,IncomingStreamHandler,The method has 5 parameters. Parameters: _socket' _responseListener' _connectionListener' _onGoingRequests' _networkLayer
Long Parameter List,EyeTribe.ClientSdk,OutgoingStreamHandler,C:\repos\EyeTribe_tet-csharp-client\sdk\GazeApiManager.cs,OutgoingStreamHandler,The method has 5 parameters. Parameters: socket' queue' requests' connectionListener' networkLayer
Long Parameter List,EyeTribe.ClientSdk,GazeManagerCore,C:\repos\EyeTribe_tet-csharp-client\sdk\GazeManagerCore.cs,Activate,The method has 5 parameters. Parameters: apiVersion' mode' hostname' portnumber' listener
Long Parameter List,EyeTribe.ClientSdk,GazeManagerCore,C:\repos\EyeTribe_tet-csharp-client\sdk\GazeManagerCore.cs,ActivateAsync,The method has 5 parameters. Parameters: apiVersion' hostname' portnumber' timeout' retries
Long Parameter List,EyeTribe.ClientSdk,GazeManagerCore,C:\repos\EyeTribe_tet-csharp-client\sdk\GazeManagerCore.cs,SwitchScreen,The method has 5 parameters. Parameters: screenIndex' screenResW' screenResH' screenPsyW' screenPsyH
Long Parameter List,EyeTribe.ClientSdk,GazeManagerCore,C:\repos\EyeTribe_tet-csharp-client\sdk\GazeManagerCore.cs,SwitchScreenAsync,The method has 5 parameters. Parameters: screenIndex' screenResW' screenResH' screenPsyW' screenPsyH
Long Parameter List,EyeTribe.ClientSdk,IScreenStateListener,C:\repos\EyeTribe_tet-csharp-client\sdk\GazeManagerCore.cs,OnScreenStatesChanged,The method has 5 parameters. Parameters: screenIndex' screenResolutionWidth' screenResolutionHeight' screenPhysicalWidth' screenPhysicalHeight
Long Parameter List,EyeTribe.ClientSdk.Utils,CalibUtils,C:\repos\EyeTribe_tet-csharp-client\sdk\Utils\CalibUtils.cs,InitCalibrationPoints,The method has 5 parameters. Parameters: rows' columns' width' height' shuffle
Long Parameter List,EyeTribe.ClientSdk.Utils,CalibUtils,C:\repos\EyeTribe_tet-csharp-client\sdk\Utils\CalibUtils.cs,InitCalibrationPoints,The method has 5 parameters. Parameters: rows' columns' width' height' shuffle
Long Parameter List,EyeTribe.ClientSdk.Utils,CalibUtils,C:\repos\EyeTribe_tet-csharp-client\sdk\Utils\CalibUtils.cs,InitCalibrationPoints,The method has 6 parameters. Parameters: rows' columns' width' height' paddingHors' paddingVert
Long Parameter List,EyeTribe.ClientSdk.Utils,CalibUtils,C:\repos\EyeTribe_tet-csharp-client\sdk\Utils\CalibUtils.cs,InitCalibrationPoints,The method has 7 parameters. Parameters: rows' columns' width' height' paddingHors' paddingVert' shuffle
Long Parameter List,EyeTribe.ClientSdk.Utils,CalibUtils,C:\repos\EyeTribe_tet-csharp-client\sdk\Utils\CalibUtils.cs,InitCalibrationPoints,The method has 6 parameters. Parameters: rows' columns' width' height' paddingHors' paddingVert
Long Parameter List,EyeTribe.ClientSdk.Utils,CalibUtils,C:\repos\EyeTribe_tet-csharp-client\sdk\Utils\CalibUtils.cs,InitCalibrationPoints,The method has 7 parameters. Parameters: rows' columns' width' height' paddingHors' paddingVert' shuffle
Long Parameter List,EyeTribe.ClientSdk.Utils,GazeUtils,C:\repos\EyeTribe_tet-csharp-client\sdk\Utils\GazeUtils.cs,ClampGazeToRect,The method has 5 parameters. Parameters: gaze' dimX' dimY' dimWidth' dimHeight
Long Parameter List,EyeTribe.ClientSdk.Utils,GazeUtils,C:\repos\EyeTribe_tet-csharp-client\sdk\Utils\GazeUtils.cs,ClampGazeToRect,The method has 7 parameters. Parameters: gaze' dimX' dimY' dimWidth' dimHeight' clampHorsMargin' clampVertMargin
Long Identifier,EyeTribe.ClientSdk,OutgoingStreamHandler,C:\repos\EyeTribe_tet-csharp-client\sdk\GazeApiManager.cs,,The length of the parameter NUM_WRITE_ATTEMPTS_BEFORE_FAIL is 30.
Long Identifier,EyeTribe.ClientSdk,Protocol,C:\repos\EyeTribe_tet-csharp-client\sdk\Protocol.cs,,The length of the parameter TRACKER_SCREEN_RESOLUTION_WIDTH is 31.
Long Identifier,EyeTribe.ClientSdk,Protocol,C:\repos\EyeTribe_tet-csharp-client\sdk\Protocol.cs,,The length of the parameter TRACKER_SCREEN_RESOLUTION_HEIGHT is 32.
Long Identifier,EyeTribe.ClientSdk,Protocol,C:\repos\EyeTribe_tet-csharp-client\sdk\Protocol.cs,,The length of the parameter TRACKER_SCREEN_PHYSICAL_HEIGHT is 30.
Long Identifier,EyeTribe.ClientSdk,Protocol,C:\repos\EyeTribe_tet-csharp-client\sdk\Protocol.cs,,The length of the parameter CALIBRATION_REQUEST_POINTSTART is 30.
Long Identifier,EyeTribe.ClientSdk,Protocol,C:\repos\EyeTribe_tet-csharp-client\sdk\Protocol.cs,,The length of the parameter CALIBRESULT_AVERAGE_ERROR_DEGREES is 33.
Long Identifier,EyeTribe.ClientSdk,Protocol,C:\repos\EyeTribe_tet-csharp-client\sdk\Protocol.cs,,The length of the parameter CALIBRESULT_AVERAGE_ERROR_LEFT_DEGREES is 38.
Long Identifier,EyeTribe.ClientSdk,Protocol,C:\repos\EyeTribe_tet-csharp-client\sdk\Protocol.cs,,The length of the parameter CALIBRESULT_AVERAGE_ERROR_RIGHT_DEGREES is 39.
Long Identifier,EyeTribe.ClientSdk,Protocol,C:\repos\EyeTribe_tet-csharp-client\sdk\Protocol.cs,,The length of the parameter CALIBRESULT_CALIBRATION_POINTS is 30.
Long Identifier,EyeTribe.ClientSdk,Protocol,C:\repos\EyeTribe_tet-csharp-client\sdk\Protocol.cs,,The length of the parameter CALIBRESULT_MEAN_ESTIMATED_COORDINATES is 38.
Long Identifier,EyeTribe.ClientSdk,Protocol,C:\repos\EyeTribe_tet-csharp-client\sdk\Protocol.cs,,The length of the parameter CALIBRESULT_ACCURACIES_DEGREES is 30.
Long Identifier,EyeTribe.ClientSdk,Protocol,C:\repos\EyeTribe_tet-csharp-client\sdk\Protocol.cs,,The length of the parameter CALIBRESULT_ACCURACY_AVERAGE_DEGREES is 36.
Long Identifier,EyeTribe.ClientSdk,Protocol,C:\repos\EyeTribe_tet-csharp-client\sdk\Protocol.cs,,The length of the parameter CALIBRESULT_ACCURACY_LEFT_DEGREES is 33.
Long Identifier,EyeTribe.ClientSdk,Protocol,C:\repos\EyeTribe_tet-csharp-client\sdk\Protocol.cs,,The length of the parameter CALIBRESULT_ACCURACY_RIGHT_DEGREES is 34.
Long Identifier,EyeTribe.ClientSdk,Protocol,C:\repos\EyeTribe_tet-csharp-client\sdk\Protocol.cs,,The length of the parameter CALIBRESULT_MEAN_ERRORS_PIXELS is 30.
Long Identifier,EyeTribe.ClientSdk,Protocol,C:\repos\EyeTribe_tet-csharp-client\sdk\Protocol.cs,,The length of the parameter CALIBRESULT_MEAN_ERROR_AVERAGE_PIXELS is 37.
Long Identifier,EyeTribe.ClientSdk,Protocol,C:\repos\EyeTribe_tet-csharp-client\sdk\Protocol.cs,,The length of the parameter CALIBRESULT_MEAN_ERROR_LEFT_PIXELS is 34.
Long Identifier,EyeTribe.ClientSdk,Protocol,C:\repos\EyeTribe_tet-csharp-client\sdk\Protocol.cs,,The length of the parameter CALIBRESULT_MEAN_ERROR_RIGHT_PIXELS is 35.
Long Identifier,EyeTribe.ClientSdk,Protocol,C:\repos\EyeTribe_tet-csharp-client\sdk\Protocol.cs,,The length of the parameter CALIBRESULT_STANDARD_DEVIATION_PIXELS is 37.
Long Identifier,EyeTribe.ClientSdk,Protocol,C:\repos\EyeTribe_tet-csharp-client\sdk\Protocol.cs,,The length of the parameter CALIBRESULT_STANDARD_DEVIATION_AVERAGE_PIXELS is 45.
Long Identifier,EyeTribe.ClientSdk,Protocol,C:\repos\EyeTribe_tet-csharp-client\sdk\Protocol.cs,,The length of the parameter CALIBRESULT_STANDARD_DEVIATION_LEFT_PIXELS is 42.
Long Identifier,EyeTribe.ClientSdk,Protocol,C:\repos\EyeTribe_tet-csharp-client\sdk\Protocol.cs,,The length of the parameter CALIBRESULT_STANDARD_DEVIATION_RIGHT_PIXELS is 43.
Long Statement,EyeTribe.ClientSdk,GazeApiManager,C:\repos\EyeTribe_tet-csharp-client\sdk\GazeApiManager.cs,Connect,The length of the statement  "                        _IncomingStreamHandler = new IncomingStreamHandler(_Socket' _ResponseListener' _ConnectionListener' _OngoingRequests' this); " is 124.
Long Statement,EyeTribe.ClientSdk,GazeApiManager,C:\repos\EyeTribe_tet-csharp-client\sdk\GazeApiManager.cs,Connect,The length of the statement  "                        _OutgoingStreamHandler = new OutgoingStreamHandler(_Socket' _RequestQueue' _OngoingRequests' _ConnectionListener' this); " is 120.
Long Statement,EyeTribe.ClientSdk,IncomingStreamHandler,C:\repos\EyeTribe_tet-csharp-client\sdk\GazeApiManager.cs,IsSocketConnected,The length of the statement  "            return !((null != _Socket && _Socket.Client.Poll(1000' SelectMode.SelectRead) && (_Socket.Client.Available == 0)) || !_Socket.Client.Connected); " is 144.
Long Statement,EyeTribe.ClientSdk,GazeManagerCore,C:\repos\EyeTribe_tet-csharp-client\sdk\GazeManagerCore.cs,HandleApiResponse,The length of the statement  "                                        ThreadPool.QueueUserWorkItem(new WaitCallback(HandleOnCalibrationStateChanged)' new Object[] { listener' IsCalibrating' IsCalibrated }); " is 136.
Long Statement,EyeTribe.ClientSdk,GazeManagerCore,C:\repos\EyeTribe_tet-csharp-client\sdk\GazeManagerCore.cs,HandleApiResponse,The length of the statement  "                                            ThreadPool.QueueUserWorkItem(new WaitCallback(HandleOnCalibrationChanged)' new Object[] { listener' IsCalibrated' LastCalibrationResult }); " is 139.
Long Statement,EyeTribe.ClientSdk,GazeManagerCore,C:\repos\EyeTribe_tet-csharp-client\sdk\GazeManagerCore.cs,HandleApiResponse,The length of the statement  "                                            ThreadPool.QueueUserWorkItem(new WaitCallback(HandleOnScreenStatesChanged)' new Object[] { listener' ScreenIndex' ScreenResolutionWidth' ScreenResolutionHeight' ScreenPhysicalWidth' ScreenPhysicalHeight }); " is 206.
Long Statement,EyeTribe.ClientSdk,GazeManagerCore,C:\repos\EyeTribe_tet-csharp-client\sdk\GazeManagerCore.cs,HandleApiResponse,The length of the statement  "                                            ThreadPool.QueueUserWorkItem(new WaitCallback(HandleOnCalibrationStateChanged)' new Object[] { listener' IsCalibrating' IsCalibrated }); " is 136.
Long Statement,EyeTribe.ClientSdk,GazeManagerCore,C:\repos\EyeTribe_tet-csharp-client\sdk\GazeManagerCore.cs,HandleApiResponse,The length of the statement  "                                            Console.WriteLine("Exception while calling ICalibrationProcessHandler.OnCalibrationStarted() on listener " + _CalibrationProcessListener + ": " + e.StackTrace); " is 160.
Long Statement,EyeTribe.ClientSdk,GazeManagerCore,C:\repos\EyeTribe_tet-csharp-client\sdk\GazeManagerCore.cs,HandleApiResponse,The length of the statement  "                                                Console.WriteLine("Exception while calling ICalibrationProcessHandler.OnCalibrationProgress() on listener " + _CalibrationProcessListener + ": " + e.StackTrace); " is 161.
Long Statement,EyeTribe.ClientSdk,GazeManagerCore,C:\repos\EyeTribe_tet-csharp-client\sdk\GazeManagerCore.cs,HandleApiResponse,The length of the statement  "                                                //Notify calibration listener that all calibration points have been sampled and the analysis of the calirbation results has begun  " is 129.
Long Statement,EyeTribe.ClientSdk,GazeManagerCore,C:\repos\EyeTribe_tet-csharp-client\sdk\GazeManagerCore.cs,HandleApiResponse,The length of the statement  "                                                    Console.WriteLine("Exception while calling ICalibrationProcessHandler.OnCalibrationProcessing() on listener " + _CalibrationProcessListener + ": " + e.StackTrace); " is 163.
Long Statement,EyeTribe.ClientSdk,GazeManagerCore,C:\repos\EyeTribe_tet-csharp-client\sdk\GazeManagerCore.cs,HandleApiResponse,The length of the statement  "                                        SampledCalibrationPoints -= cper.Values.CalibrationResult.Calibpoints.Where(cp => cp.State == CalibrationPoint.STATE_RESAMPLE " is 125.
Long Statement,EyeTribe.ClientSdk,GazeManagerCore,C:\repos\EyeTribe_tet-csharp-client\sdk\GazeManagerCore.cs,HandleApiResponse,The length of the statement  "                                                ThreadPool.QueueUserWorkItem(new WaitCallback(HandleOnCalibrationChanged)' new Object[] { listener' IsCalibrated' LastCalibrationResult }); " is 139.
Long Statement,EyeTribe.ClientSdk,GazeManagerCore,C:\repos\EyeTribe_tet-csharp-client\sdk\GazeManagerCore.cs,HandleApiResponse,The length of the statement  "                                                Console.WriteLine("Exception while calling ICalibrationProcessHandler.OnCalibrationResult() on listener " + _CalibrationProcessListener + ": " + e.StackTrace); " is 159.
Long Statement,EyeTribe.ClientSdk,GazeManagerCore,C:\repos\EyeTribe_tet-csharp-client\sdk\GazeManagerCore.cs,HandleApiResponse,The length of the statement  "                                            ThreadPool.QueueUserWorkItem(new WaitCallback(HandleOnCalibrationStateChanged)' new Object[] { listener' IsCalibrating' IsCalibrated }); " is 136.
Long Statement,EyeTribe.ClientSdk,GazeManagerCore,C:\repos\EyeTribe_tet-csharp-client\sdk\GazeManagerCore.cs,HandleApiResponse,The length of the statement  "                                            ThreadPool.QueueUserWorkItem(new WaitCallback(HandleOnCalibrationStateChanged)' new Object[] { listener' IsCalibrating' IsCalibrated }); " is 136.
Long Statement,EyeTribe.ClientSdk,GazeManagerCore,C:\repos\EyeTribe_tet-csharp-client\sdk\GazeManagerCore.cs,HandleOnGazeFrame,The length of the statement  "                Console.WriteLine("Exception while calling IGazeListener.OnGazeUpdate() on listener " + listener + ": " + e.StackTrace); " is 120.
Long Statement,EyeTribe.ClientSdk,GazeManagerCore,C:\repos\EyeTribe_tet-csharp-client\sdk\GazeManagerCore.cs,HandleOnTrackerStateChanged,The length of the statement  "                Console.WriteLine("Exception while calling ITrackerStateListener.OnTrackerStateChanged() on listener " + listener + ": " + e.StackTrace); " is 137.
Long Statement,EyeTribe.ClientSdk,GazeManagerCore,C:\repos\EyeTribe_tet-csharp-client\sdk\GazeManagerCore.cs,HandleOnCalibrationChanged,The length of the statement  "                Console.WriteLine("Exception while calling ICalibrationResultListener.OnCalibrationChanged() on listener " + listener + ": " + e.StackTrace); " is 141.
Long Statement,EyeTribe.ClientSdk,GazeManagerCore,C:\repos\EyeTribe_tet-csharp-client\sdk\GazeManagerCore.cs,HandleOnScreenStatesChanged,The length of the statement  "                listener.OnScreenStatesChanged(screenIndex' screenResolutionWidth' screenResolutionHeight' (float)screenPhysicalWidth' (float)screenPhysicalHeight); " is 148.
Long Statement,EyeTribe.ClientSdk,GazeManagerCore,C:\repos\EyeTribe_tet-csharp-client\sdk\GazeManagerCore.cs,HandleOnScreenStatesChanged,The length of the statement  "                Console.WriteLine("Exception while calling ITrackerStateListener.OnScreenStatesChanged() on listener " + listener + ": " + e.StackTrace); " is 137.
Long Statement,EyeTribe.ClientSdk,GazeManagerCore,C:\repos\EyeTribe_tet-csharp-client\sdk\GazeManagerCore.cs,HandleOnConnectionStateChanged,The length of the statement  "                Console.WriteLine("Exception while calling IConnectionStateListener.OnConnectionStateChanged() on listener " + listener + ": " + e.StackTrace); " is 143.
Long Statement,EyeTribe.ClientSdk,GazeManagerCore,C:\repos\EyeTribe_tet-csharp-client\sdk\GazeManagerCore.cs,HandleOnCalibrationStateChanged,The length of the statement  "                Console.WriteLine("Exception while calling ICalibrationStateListener.OnCalibrationStateChanged() on listener " + listener + ": " + e.StackTrace); " is 145.
Long Statement,EyeTribe.ClientSdk,GazeManagerCore,C:\repos\EyeTribe_tet-csharp-client\sdk\GazeManagerCore.cs,ActivateAsync,The length of the statement  "            return ActivateAsync(ApiVersion.VERSION_1_0' GazeApiManager.DEFAULT_SERVER_HOST' GazeApiManager.DEFAULT_SERVER_PORT' timeout' retries); " is 135.
Long Statement,EyeTribe.ClientSdk.Utils,CalibUtils,C:\repos\EyeTribe_tet-csharp-client\sdk\Utils\CalibUtils.cs,InitCalibrationPoints,The length of the statement  "            return InitCalibrationPoints(rows' columns' (int)Math.Round(width)' (int)Math.Round(height)' (int)Math.Round(paddingHors)' (int)Math.Round(paddingVert)' true); " is 159.
Long Statement,EyeTribe.ClientSdk.Utils,CalibUtils,C:\repos\EyeTribe_tet-csharp-client\sdk\Utils\CalibUtils.cs,InitCalibrationPoints,The length of the statement  "            return InitCalibrationPoints(rows' columns' (int)Math.Round(width)' (int)Math.Round(height)' (int)Math.Round(paddingHors)' (int)Math.Round(paddingVert)' shuffle); " is 162.
Empty Catch Block,EyeTribe.ClientSdk,OutgoingStreamHandler,C:\repos\EyeTribe_tet-csharp-client\sdk\GazeApiManager.cs,Work,The method has an empty catch block.
Empty Catch Block,EyeTribe.ClientSdk,GazeManagerCore,C:\repos\EyeTribe_tet-csharp-client\sdk\GazeManagerCore.cs,HandleApiResponse,The method has an empty catch block.
Empty Catch Block,EyeTribe.ClientSdk,GazeManagerCore,C:\repos\EyeTribe_tet-csharp-client\sdk\GazeManagerCore.cs,SwitchScreenAsync,The method has an empty catch block.
Empty Catch Block,EyeTribe.ClientSdk,GazeManagerCore,C:\repos\EyeTribe_tet-csharp-client\sdk\GazeManagerCore.cs,CalibrationStartAsync,The method has an empty catch block.
Empty Catch Block,EyeTribe.ClientSdk,GazeManagerCore,C:\repos\EyeTribe_tet-csharp-client\sdk\GazeManagerCore.cs,CalibrationAbortAsync,The method has an empty catch block.
Magic Number,EyeTribe.ClientSdk,PriorityBlockingQueue<T>,C:\repos\EyeTribe_tet-csharp-client\sdk\Collections.cs,Enqueue,The following statement contains a magic number: lock (_Lock)              {                  if (_Stopped)                  {                      Monitor.PulseAll(_Lock);                      return;                  }                    _List.Add(item);                  int ci = _List.Count - 1;                  while (ci > 0)                  {                      int pi = (ci - 1) / 2;                      if (_List[ci].CompareTo(_List[pi]) >= 0)                          break;                      T tmp = _List[ci]; _List[ci] = _List[pi]; _List[pi] = tmp;                      ci = pi;                  }                    if (_List.Count >= 1)                      Monitor.PulseAll(_Lock);              }
Magic Number,EyeTribe.ClientSdk,PriorityBlockingQueue<T>,C:\repos\EyeTribe_tet-csharp-client\sdk\Collections.cs,Dequeue,The following statement contains a magic number: lock (_Lock)              {                  while (_List.Count == 0)                  {                      if (_Stopped)                      {                          Monitor.PulseAll(_Lock);                          return default(T);                      }                      Monitor.Wait(_Lock);                  }                    int li = _List.Count - 1;                  T frontItem = _List[0];                  _List[0] = _List[li];                  _List.RemoveAt(li);                    --li;                  int pi = 0;                  while (true)                  {                      int ci = pi * 2 + 1;                      if (ci > li) break;                      int rc = ci + 1;                      if (rc <= li && _List[rc].CompareTo(_List[ci]) < 0)                          ci = rc;                      if (_List[pi].CompareTo(_List[ci]) <= 0) break;                      T tmp = _List[pi]; _List[pi] = _List[ci]; _List[ci] = tmp;                      pi = ci;                  }                  return frontItem;              }
Magic Number,EyeTribe.ClientSdk,IncomingStreamHandler,C:\repos\EyeTribe_tet-csharp-client\sdk\GazeApiManager.cs,IsSocketConnected,The following statement contains a magic number: return !((null != _Socket && _Socket.Client.Poll(1000' SelectMode.SelectRead) && (_Socket.Client.Available == 0)) || !_Socket.Client.Connected);
Magic Number,EyeTribe.ClientSdk,GazeManagerCore,C:\repos\EyeTribe_tet-csharp-client\sdk\GazeManagerCore.cs,HandleOnCalibrationChanged,The following statement contains a magic number: try              {                  Object[] objs = (Object[])stateInfo;                  listener = (ICalibrationResultListener)objs[0];                  Boolean isCalibrated = Convert.ToBoolean(objs[1]);                  CalibrationResult lastResult = (CalibrationResult)objs[2];                  listener.OnCalibrationChanged(isCalibrated' lastResult);              }              catch (Exception e)              {                  Console.WriteLine("Exception while calling ICalibrationResultListener.OnCalibrationChanged() on listener " + listener + ": " + e.StackTrace);              }
Magic Number,EyeTribe.ClientSdk,GazeManagerCore,C:\repos\EyeTribe_tet-csharp-client\sdk\GazeManagerCore.cs,HandleOnScreenStatesChanged,The following statement contains a magic number: try              {                  Object[] objs = (Object[])stateInfo;                  listener = (IScreenStateListener)objs[0];                  Int32 screenIndex = Convert.ToInt32(objs[1]);                  Int32 screenResolutionWidth = Convert.ToInt32(objs[2]);                  Int32 screenResolutionHeight = Convert.ToInt32(objs[3]);                  Double screenPhysicalWidth = Convert.ToDouble(objs[4]);                  Double screenPhysicalHeight = Convert.ToDouble(objs[5]);                  listener.OnScreenStatesChanged(screenIndex' screenResolutionWidth' screenResolutionHeight' (float)screenPhysicalWidth' (float)screenPhysicalHeight);              }              catch (Exception e)              {                  Console.WriteLine("Exception while calling ITrackerStateListener.OnScreenStatesChanged() on listener " + listener + ": " + e.StackTrace);              }
Magic Number,EyeTribe.ClientSdk,GazeManagerCore,C:\repos\EyeTribe_tet-csharp-client\sdk\GazeManagerCore.cs,HandleOnScreenStatesChanged,The following statement contains a magic number: try              {                  Object[] objs = (Object[])stateInfo;                  listener = (IScreenStateListener)objs[0];                  Int32 screenIndex = Convert.ToInt32(objs[1]);                  Int32 screenResolutionWidth = Convert.ToInt32(objs[2]);                  Int32 screenResolutionHeight = Convert.ToInt32(objs[3]);                  Double screenPhysicalWidth = Convert.ToDouble(objs[4]);                  Double screenPhysicalHeight = Convert.ToDouble(objs[5]);                  listener.OnScreenStatesChanged(screenIndex' screenResolutionWidth' screenResolutionHeight' (float)screenPhysicalWidth' (float)screenPhysicalHeight);              }              catch (Exception e)              {                  Console.WriteLine("Exception while calling ITrackerStateListener.OnScreenStatesChanged() on listener " + listener + ": " + e.StackTrace);              }
Magic Number,EyeTribe.ClientSdk,GazeManagerCore,C:\repos\EyeTribe_tet-csharp-client\sdk\GazeManagerCore.cs,HandleOnScreenStatesChanged,The following statement contains a magic number: try              {                  Object[] objs = (Object[])stateInfo;                  listener = (IScreenStateListener)objs[0];                  Int32 screenIndex = Convert.ToInt32(objs[1]);                  Int32 screenResolutionWidth = Convert.ToInt32(objs[2]);                  Int32 screenResolutionHeight = Convert.ToInt32(objs[3]);                  Double screenPhysicalWidth = Convert.ToDouble(objs[4]);                  Double screenPhysicalHeight = Convert.ToDouble(objs[5]);                  listener.OnScreenStatesChanged(screenIndex' screenResolutionWidth' screenResolutionHeight' (float)screenPhysicalWidth' (float)screenPhysicalHeight);              }              catch (Exception e)              {                  Console.WriteLine("Exception while calling ITrackerStateListener.OnScreenStatesChanged() on listener " + listener + ": " + e.StackTrace);              }
Magic Number,EyeTribe.ClientSdk,GazeManagerCore,C:\repos\EyeTribe_tet-csharp-client\sdk\GazeManagerCore.cs,HandleOnScreenStatesChanged,The following statement contains a magic number: try              {                  Object[] objs = (Object[])stateInfo;                  listener = (IScreenStateListener)objs[0];                  Int32 screenIndex = Convert.ToInt32(objs[1]);                  Int32 screenResolutionWidth = Convert.ToInt32(objs[2]);                  Int32 screenResolutionHeight = Convert.ToInt32(objs[3]);                  Double screenPhysicalWidth = Convert.ToDouble(objs[4]);                  Double screenPhysicalHeight = Convert.ToDouble(objs[5]);                  listener.OnScreenStatesChanged(screenIndex' screenResolutionWidth' screenResolutionHeight' (float)screenPhysicalWidth' (float)screenPhysicalHeight);              }              catch (Exception e)              {                  Console.WriteLine("Exception while calling ITrackerStateListener.OnScreenStatesChanged() on listener " + listener + ": " + e.StackTrace);              }
Magic Number,EyeTribe.ClientSdk,GazeManagerCore,C:\repos\EyeTribe_tet-csharp-client\sdk\GazeManagerCore.cs,HandleOnCalibrationStateChanged,The following statement contains a magic number: try              {                  Object[] objs = (Object[])stateInfo;                  listener = (ICalibrationStateListener)objs[0];                  Boolean isCalibrating = (Boolean)objs[1];                  Boolean isCalibrated = (Boolean)objs[2];                  listener.OnCalibrationStateChanged(isCalibrating' isCalibrated);              }              catch (Exception e)              {                  Console.WriteLine("Exception while calling ICalibrationStateListener.OnCalibrationStateChanged() on listener " + listener + ": " + e.StackTrace);              }
Magic Number,EyeTribe.ClientSdk.Data,Accuracy,C:\repos\EyeTribe_tet-csharp-client\sdk\Data\Accuracy.cs,GetHashCode,The following statement contains a magic number: int hash = 7;
Magic Number,EyeTribe.ClientSdk.Data,Accuracy,C:\repos\EyeTribe_tet-csharp-client\sdk\Data\Accuracy.cs,GetHashCode,The following statement contains a magic number: hash = hash * 29 + Average.GetHashCode();
Magic Number,EyeTribe.ClientSdk.Data,Accuracy,C:\repos\EyeTribe_tet-csharp-client\sdk\Data\Accuracy.cs,GetHashCode,The following statement contains a magic number: hash = hash * 29 + Left.GetHashCode();
Magic Number,EyeTribe.ClientSdk.Data,Accuracy,C:\repos\EyeTribe_tet-csharp-client\sdk\Data\Accuracy.cs,GetHashCode,The following statement contains a magic number: hash = hash * 29 + Right.GetHashCode();
Magic Number,EyeTribe.ClientSdk.Data,CalibrationPoint,C:\repos\EyeTribe_tet-csharp-client\sdk\Data\CalibrationPoint.cs,GetHashCode,The following statement contains a magic number: int hash = 157;
Magic Number,EyeTribe.ClientSdk.Data,CalibrationPoint,C:\repos\EyeTribe_tet-csharp-client\sdk\Data\CalibrationPoint.cs,GetHashCode,The following statement contains a magic number: hash = hash * 953 + State.GetHashCode();
Magic Number,EyeTribe.ClientSdk.Data,CalibrationPoint,C:\repos\EyeTribe_tet-csharp-client\sdk\Data\CalibrationPoint.cs,GetHashCode,The following statement contains a magic number: hash = hash * 953 + Coordinates.GetHashCode();
Magic Number,EyeTribe.ClientSdk.Data,CalibrationPoint,C:\repos\EyeTribe_tet-csharp-client\sdk\Data\CalibrationPoint.cs,GetHashCode,The following statement contains a magic number: hash = hash * 953 + MeanEstimatedCoords.GetHashCode();
Magic Number,EyeTribe.ClientSdk.Data,CalibrationPoint,C:\repos\EyeTribe_tet-csharp-client\sdk\Data\CalibrationPoint.cs,GetHashCode,The following statement contains a magic number: hash = hash * 953 + Accuracy.GetHashCode();
Magic Number,EyeTribe.ClientSdk.Data,CalibrationPoint,C:\repos\EyeTribe_tet-csharp-client\sdk\Data\CalibrationPoint.cs,GetHashCode,The following statement contains a magic number: hash = hash * 953 + MeanError.GetHashCode();
Magic Number,EyeTribe.ClientSdk.Data,CalibrationPoint,C:\repos\EyeTribe_tet-csharp-client\sdk\Data\CalibrationPoint.cs,GetHashCode,The following statement contains a magic number: hash = hash * 953 + StandardDeviation.GetHashCode();
Magic Number,EyeTribe.ClientSdk.Data,CalibrationResult,C:\repos\EyeTribe_tet-csharp-client\sdk\Data\CalibrationResult.cs,GetHashCode,The following statement contains a magic number: int hash = 347;
Magic Number,EyeTribe.ClientSdk.Data,CalibrationResult,C:\repos\EyeTribe_tet-csharp-client\sdk\Data\CalibrationResult.cs,GetHashCode,The following statement contains a magic number: hash = hash * 199 + Result.GetHashCode();
Magic Number,EyeTribe.ClientSdk.Data,CalibrationResult,C:\repos\EyeTribe_tet-csharp-client\sdk\Data\CalibrationResult.cs,GetHashCode,The following statement contains a magic number: hash = hash * 199 + AverageErrorDegree.GetHashCode();
Magic Number,EyeTribe.ClientSdk.Data,CalibrationResult,C:\repos\EyeTribe_tet-csharp-client\sdk\Data\CalibrationResult.cs,GetHashCode,The following statement contains a magic number: hash = hash * 199 + AverageErrorDegreeLeft.GetHashCode();
Magic Number,EyeTribe.ClientSdk.Data,CalibrationResult,C:\repos\EyeTribe_tet-csharp-client\sdk\Data\CalibrationResult.cs,GetHashCode,The following statement contains a magic number: hash = hash * 199 + AverageErrorDegreeRight.GetHashCode();
Magic Number,EyeTribe.ClientSdk.Data,CalibrationResult,C:\repos\EyeTribe_tet-csharp-client\sdk\Data\CalibrationResult.cs,GetHashCode,The following statement contains a magic number: foreach (CalibrationPoint cp in Calibpoints)                  hc = hc * 199 + cp.GetHashCode();
Magic Number,EyeTribe.ClientSdk.Data,Eye,C:\repos\EyeTribe_tet-csharp-client\sdk\Data\Eye.cs,GetHashCode,The following statement contains a magic number: int hash = 337;
Magic Number,EyeTribe.ClientSdk.Data,Eye,C:\repos\EyeTribe_tet-csharp-client\sdk\Data\Eye.cs,GetHashCode,The following statement contains a magic number: hash = hash * 797 + RawCoordinates.GetHashCode();
Magic Number,EyeTribe.ClientSdk.Data,Eye,C:\repos\EyeTribe_tet-csharp-client\sdk\Data\Eye.cs,GetHashCode,The following statement contains a magic number: hash = hash * 797 + SmoothedCoordinates.GetHashCode();
Magic Number,EyeTribe.ClientSdk.Data,Eye,C:\repos\EyeTribe_tet-csharp-client\sdk\Data\Eye.cs,GetHashCode,The following statement contains a magic number: hash = hash * 797 + PupilCenterCoordinates.GetHashCode();
Magic Number,EyeTribe.ClientSdk.Data,Eye,C:\repos\EyeTribe_tet-csharp-client\sdk\Data\Eye.cs,GetHashCode,The following statement contains a magic number: hash = hash * 797 + PupilSize.GetHashCode();
Magic Number,EyeTribe.ClientSdk.Data,GazeData,C:\repos\EyeTribe_tet-csharp-client\sdk\Data\GazeData.cs,GetHashCode,The following statement contains a magic number: int hash = 2039;
Magic Number,EyeTribe.ClientSdk.Data,GazeData,C:\repos\EyeTribe_tet-csharp-client\sdk\Data\GazeData.cs,GetHashCode,The following statement contains a magic number: hash = hash * 1553 + RawCoordinates.GetHashCode();
Magic Number,EyeTribe.ClientSdk.Data,GazeData,C:\repos\EyeTribe_tet-csharp-client\sdk\Data\GazeData.cs,GetHashCode,The following statement contains a magic number: hash = hash * 1553 + SmoothedCoordinates.GetHashCode();
Magic Number,EyeTribe.ClientSdk.Data,GazeData,C:\repos\EyeTribe_tet-csharp-client\sdk\Data\GazeData.cs,GetHashCode,The following statement contains a magic number: hash = hash * 1553 + LeftEye.GetHashCode();
Magic Number,EyeTribe.ClientSdk.Data,GazeData,C:\repos\EyeTribe_tet-csharp-client\sdk\Data\GazeData.cs,GetHashCode,The following statement contains a magic number: hash = hash * 1553 + RightEye.GetHashCode();
Magic Number,EyeTribe.ClientSdk.Data,GazeData,C:\repos\EyeTribe_tet-csharp-client\sdk\Data\GazeData.cs,GetHashCode,The following statement contains a magic number: hash = hash * 1553 + State.GetHashCode();
Magic Number,EyeTribe.ClientSdk.Data,GazeData,C:\repos\EyeTribe_tet-csharp-client\sdk\Data\GazeData.cs,GetHashCode,The following statement contains a magic number: hash = hash * 1553 + IsFixated.GetHashCode();
Magic Number,EyeTribe.ClientSdk.Data,MeanError,C:\repos\EyeTribe_tet-csharp-client\sdk\Data\MeanError.cs,GetHashCode,The following statement contains a magic number: int hash = 3;
Magic Number,EyeTribe.ClientSdk.Data,MeanError,C:\repos\EyeTribe_tet-csharp-client\sdk\Data\MeanError.cs,GetHashCode,The following statement contains a magic number: hash = hash * 37 + Average.GetHashCode();
Magic Number,EyeTribe.ClientSdk.Data,MeanError,C:\repos\EyeTribe_tet-csharp-client\sdk\Data\MeanError.cs,GetHashCode,The following statement contains a magic number: hash = hash * 37 + Left.GetHashCode();
Magic Number,EyeTribe.ClientSdk.Data,MeanError,C:\repos\EyeTribe_tet-csharp-client\sdk\Data\MeanError.cs,GetHashCode,The following statement contains a magic number: hash = hash * 37 + Right.GetHashCode();
Magic Number,EyeTribe.ClientSdk.Data,Point2D,C:\repos\EyeTribe_tet-csharp-client\sdk\Data\Point2D.cs,GetHashCode,The following statement contains a magic number: int hash = 571;
Magic Number,EyeTribe.ClientSdk.Data,Point2D,C:\repos\EyeTribe_tet-csharp-client\sdk\Data\Point2D.cs,GetHashCode,The following statement contains a magic number: hash = hash * 2777 + X.GetHashCode();
Magic Number,EyeTribe.ClientSdk.Data,Point2D,C:\repos\EyeTribe_tet-csharp-client\sdk\Data\Point2D.cs,GetHashCode,The following statement contains a magic number: hash = hash * 2777 + Y.GetHashCode();
Magic Number,EyeTribe.ClientSdk.Data,Point2D,C:\repos\EyeTribe_tet-csharp-client\sdk\Data\Point2D.cs,Average,The following statement contains a magic number: return (x + y) / 2;
Magic Number,EyeTribe.ClientSdk.Data,Point3D,C:\repos\EyeTribe_tet-csharp-client\sdk\Data\Point3D.cs,GetHashCode,The following statement contains a magic number: int hash = 571;
Magic Number,EyeTribe.ClientSdk.Data,Point3D,C:\repos\EyeTribe_tet-csharp-client\sdk\Data\Point3D.cs,GetHashCode,The following statement contains a magic number: hash = hash * 2777 + X.GetHashCode();
Magic Number,EyeTribe.ClientSdk.Data,Point3D,C:\repos\EyeTribe_tet-csharp-client\sdk\Data\Point3D.cs,GetHashCode,The following statement contains a magic number: hash = hash * 2777 + Y.GetHashCode();
Magic Number,EyeTribe.ClientSdk.Data,Point3D,C:\repos\EyeTribe_tet-csharp-client\sdk\Data\Point3D.cs,GetHashCode,The following statement contains a magic number: hash = hash * 2777 + Z.GetHashCode();
Magic Number,EyeTribe.ClientSdk.Data,Point3D,C:\repos\EyeTribe_tet-csharp-client\sdk\Data\Point3D.cs,Average,The following statement contains a magic number: return (x + y + z) / 3;
Magic Number,EyeTribe.ClientSdk.Data,StandardDeviation,C:\repos\EyeTribe_tet-csharp-client\sdk\Data\StandardDeviation.cs,GetHashCode,The following statement contains a magic number: int hash = 3;
Magic Number,EyeTribe.ClientSdk.Data,StandardDeviation,C:\repos\EyeTribe_tet-csharp-client\sdk\Data\StandardDeviation.cs,GetHashCode,The following statement contains a magic number: hash = hash * 19 + Average.GetHashCode();
Magic Number,EyeTribe.ClientSdk.Data,StandardDeviation,C:\repos\EyeTribe_tet-csharp-client\sdk\Data\StandardDeviation.cs,GetHashCode,The following statement contains a magic number: hash = hash * 19 + Left.GetHashCode();
Magic Number,EyeTribe.ClientSdk.Data,StandardDeviation,C:\repos\EyeTribe_tet-csharp-client\sdk\Data\StandardDeviation.cs,GetHashCode,The following statement contains a magic number: hash = hash * 19 + Right.GetHashCode();
Magic Number,EyeTribe.ClientSdk.Request,CalibrationStartRequestValues,C:\repos\EyeTribe_tet-csharp-client\sdk\Request\CalibrationStartRequest.cs,CalibrationStartRequestValues,The following statement contains a magic number: PointCount = 9;
Magic Number,EyeTribe.ClientSdk.Request,RequestBase<T>,C:\repos\EyeTribe_tet-csharp-client\sdk\Request\RequestBase.cs,GetHashCode,The following statement contains a magic number: int hash = 283;
Magic Number,EyeTribe.ClientSdk.Request,RequestBase<T>,C:\repos\EyeTribe_tet-csharp-client\sdk\Request\RequestBase.cs,GetHashCode,The following statement contains a magic number: hash = hash * 547 + Category.GetHashCode();
Magic Number,EyeTribe.ClientSdk.Request,RequestBase<T>,C:\repos\EyeTribe_tet-csharp-client\sdk\Request\RequestBase.cs,GetHashCode,The following statement contains a magic number: hash = hash * 547 + Request.GetHashCode();
Magic Number,EyeTribe.ClientSdk.Request,RequestBase<T>,C:\repos\EyeTribe_tet-csharp-client\sdk\Request\RequestBase.cs,GetHashCode,The following statement contains a magic number: hash = hash * 547 + Id.GetHashCode();
Magic Number,EyeTribe.ClientSdk.Utils,CalibUtils,C:\repos\EyeTribe_tet-csharp-client\sdk\Utils\CalibUtils.cs,GetCalibRating,The following statement contains a magic number: if (cq.Equals(CalibQuality.PERFECT))              {                  return 4;              }              else if (cq.Equals(CalibQuality.GOOD))              {                  return 3;              }              else if (cq.Equals(CalibQuality.MODERATE))              {                  return 2;              }              else if (cq.Equals(CalibQuality.POOR))              {                  return 1;              }
Magic Number,EyeTribe.ClientSdk.Utils,CalibUtils,C:\repos\EyeTribe_tet-csharp-client\sdk\Utils\CalibUtils.cs,GetCalibRating,The following statement contains a magic number: if (cq.Equals(CalibQuality.PERFECT))              {                  return 4;              }              else if (cq.Equals(CalibQuality.GOOD))              {                  return 3;              }              else if (cq.Equals(CalibQuality.MODERATE))              {                  return 2;              }              else if (cq.Equals(CalibQuality.POOR))              {                  return 1;              }
Magic Number,EyeTribe.ClientSdk.Utils,CalibUtils,C:\repos\EyeTribe_tet-csharp-client\sdk\Utils\CalibUtils.cs,GetCalibRating,The following statement contains a magic number: if (cq.Equals(CalibQuality.PERFECT))              {                  return 4;              }              else if (cq.Equals(CalibQuality.GOOD))              {                  return 3;              }              else if (cq.Equals(CalibQuality.MODERATE))              {                  return 2;              }              else if (cq.Equals(CalibQuality.POOR))              {                  return 1;              }
Magic Number,EyeTribe.ClientSdk.Utils,GazeUtils,C:\repos\EyeTribe_tet-csharp-client\sdk\Utils\GazeUtils.cs,GetEyesCenterNormalized,The following statement contains a magic number: if (null != leftEye && null != rightEye)              {                  eyeCenter = new Point2D(                          (leftEye.PupilCenterCoordinates.X + rightEye.PupilCenterCoordinates.X) / 2'                          (leftEye.PupilCenterCoordinates.Y + rightEye.PupilCenterCoordinates.Y) / 2                          );              }              else if (null != leftEye)              {                  eyeCenter = leftEye.PupilCenterCoordinates;              }              else if (null != rightEye)              {                  eyeCenter = rightEye.PupilCenterCoordinates;              }
Magic Number,EyeTribe.ClientSdk.Utils,GazeUtils,C:\repos\EyeTribe_tet-csharp-client\sdk\Utils\GazeUtils.cs,GetEyesCenterNormalized,The following statement contains a magic number: if (null != leftEye && null != rightEye)              {                  eyeCenter = new Point2D(                          (leftEye.PupilCenterCoordinates.X + rightEye.PupilCenterCoordinates.X) / 2'                          (leftEye.PupilCenterCoordinates.Y + rightEye.PupilCenterCoordinates.Y) / 2                          );              }              else if (null != leftEye)              {                  eyeCenter = leftEye.PupilCenterCoordinates;              }              else if (null != rightEye)              {                  eyeCenter = rightEye.PupilCenterCoordinates;              }
Magic Number,EyeTribe.ClientSdk.Utils,GazeUtils,C:\repos\EyeTribe_tet-csharp-client\sdk\Utils\GazeUtils.cs,GetDistancePoint2D,The following statement contains a magic number: return Math.Sqrt(Math.Pow(a.X - b.X' 2) + Math.Pow(a.Y - b.Y' 2));
Magic Number,EyeTribe.ClientSdk.Utils,GazeUtils,C:\repos\EyeTribe_tet-csharp-client\sdk\Utils\GazeUtils.cs,GetDistancePoint2D,The following statement contains a magic number: return Math.Sqrt(Math.Pow(a.X - b.X' 2) + Math.Pow(a.Y - b.Y' 2));
Missing Default,EyeTribe.ClientSdk,GazeManagerCore,C:\repos\EyeTribe_tet-csharp-client\sdk\GazeManagerCore.cs,HandleApiResponse,The following switch statement is missing a default case: switch (response.Request)                              {                                  case Protocol.CALIBRATION_REQUEST_START:                                        if (!IsCalibrating)                                      {                                          IsCalibrating = true;                                            // Calibration state changed' notify state listeners                                          foreach (ICalibrationStateListener listener in CalibrationStateListeners)                                          {                                              ThreadPool.QueueUserWorkItem(new WaitCallback(HandleOnCalibrationStateChanged)' new Object[] { listener' IsCalibrating' IsCalibrated });                                          }                                      }                                        //Notify calibration process listener that a new process was successfully started                                      if (null != _CalibrationProcessListener)                                          try                                          {                                              _CalibrationProcessListener.OnCalibrationStarted();                                          }                                          catch (Exception e)                                          {                                              Console.WriteLine("Exception while calling ICalibrationProcessHandler.OnCalibrationStarted() on listener " + _CalibrationProcessListener + ": " + e.StackTrace);                                          }                                        break;                                    case Protocol.CALIBRATION_REQUEST_POINTSTART:                                      break;                                    case Protocol.CALIBRATION_REQUEST_POINTEND:                                        CalibrationPointEndResponse cper = (CalibrationPointEndResponse)response;                                        if (cper == null || cper.Values.CalibrationResult == null)                                      {                                          ++SampledCalibrationPoints;                                            if (null != _CalibrationProcessListener)                                          {                                              //Notify calibration listener that a new calibration point has been sampled                                              try                                              {                                                  _CalibrationProcessListener.OnCalibrationProgress(SampledCalibrationPoints / TotalCalibrationPoints);                                              }                                              catch (Exception e)                                              {                                                  Console.WriteLine("Exception while calling ICalibrationProcessHandler.OnCalibrationProgress() on listener " + _CalibrationProcessListener + ": " + e.StackTrace);                                              }                                                if (SampledCalibrationPoints == TotalCalibrationPoints)                                                  //Notify calibration listener that all calibration points have been sampled and the analysis of the calirbation results has begun                                                   try                                                  {                                                      _CalibrationProcessListener.OnCalibrationProcessing();                                                  }                                                  catch (Exception e)                                                  {                                                      Console.WriteLine("Exception while calling ICalibrationProcessHandler.OnCalibrationProcessing() on listener " + _CalibrationProcessListener + ": " + e.StackTrace);                                                  }                                          }                                      }                                      else                                      {                                          IsCalibrated = cper.Values.CalibrationResult.Result;                                          IsCalibrating = !cper.Values.CalibrationResult.Result;                                            // Evaluate resample points' we decrement according to number of points needing resampling                                          SampledCalibrationPoints -= cper.Values.CalibrationResult.Calibpoints.Where(cp => cp.State == CalibrationPoint.STATE_RESAMPLE                                              || cp.State == CalibrationPoint.STATE_NO_DATA).Count();                                            // Notify calibration result listeners if calibration changed                                          if (null == LastCalibrationResult || !LastCalibrationResult.Equals(cper.Values.CalibrationResult))                                          {                                              LastCalibrationResult = cper.Values.CalibrationResult;                                                foreach (ICalibrationResultListener listener in CalibrationResultListeners)                                              {                                                  ThreadPool.QueueUserWorkItem(new WaitCallback(HandleOnCalibrationChanged)' new Object[] { listener' IsCalibrated' LastCalibrationResult });                                              }                                          }                                            if (null != _CalibrationProcessListener)                                          {                                              // Notify calibration listener that calibration results are ready for evaluation                                              try                                              {                                                  _CalibrationProcessListener.OnCalibrationResult(cper.Values.CalibrationResult);                                              }                                              catch (Exception e)                                              {                                                  Console.WriteLine("Exception while calling ICalibrationProcessHandler.OnCalibrationResult() on listener " + _CalibrationProcessListener + ": " + e.StackTrace);                                              }                                          }                                      }                                        break;                                    case Protocol.CALIBRATION_REQUEST_ABORT:                                        if (IsCalibrating)                                      {                                          IsCalibrating = false;                                            // Calibration state changed' notify state listeners                                          foreach (ICalibrationStateListener listener in CalibrationStateListeners)                                          {                                              ThreadPool.QueueUserWorkItem(new WaitCallback(HandleOnCalibrationStateChanged)' new Object[] { listener' IsCalibrating' IsCalibrated });                                          }                                      }                                        break;                                    case Protocol.CALIBRATION_REQUEST_CLEAR:                                        if (IsCalibrated || IsCalibrating)                                      {                                          IsCalibrated = false;                                          IsCalibrating = false;                                            // Calibration state changed' notify state listeners                                          foreach (ICalibrationStateListener listener in CalibrationStateListeners)                                          {                                              ThreadPool.QueueUserWorkItem(new WaitCallback(HandleOnCalibrationStateChanged)' new Object[] { listener' IsCalibrating' IsCalibrated });                                          }                                      }                                        LastCalibrationResult = null;                                      break;                              }
