Implementation smell,Namespace,Class,File,Method,Description
Long Method,StrumpyShaderEditor,InstructionCounter,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\GraphEditor\InstructionCounter.cs,CountInstructions,The method has 109 lines of code.
Long Method,StrumpyShaderEditor,NodeEditor,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\GraphEditor\NodeEditor.cs,Update,The method has 137 lines of code.
Long Method,StrumpyShaderEditor,NodeEditor,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\GraphEditor\NodeEditor.cs,OnGUI,The method has 135 lines of code.
Long Method,StrumpyShaderEditor,NodeEditor,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\GraphEditor\NodeEditor.cs,HandleEvents,The method has 136 lines of code.
Long Method,StrumpyShaderEditor,NodeEditor,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\GraphEditor\NodeEditor.cs,DrawSettings,The method has 137 lines of code.
Long Method,StrumpyShaderEditor,Node,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\Graph\Nodes\Node.cs,Draw,The method has 152 lines of code.
Long Method,StrumpyShaderEditor,ShaderInputs,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\Graph\Properties\ShaderInputs.cs,Draw,The method has 125 lines of code.
Complex Method,StrumpyShaderEditor,InstructionCounter,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\GraphEditor\InstructionCounter.cs,CountInstructions,Cyclomatic complexity of the method is 26
Complex Method,StrumpyShaderEditor,NodeEditor,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\GraphEditor\NodeEditor.cs,Update,Cyclomatic complexity of the method is 30
Complex Method,StrumpyShaderEditor,NodeEditor,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\GraphEditor\NodeEditor.cs,OnGUI,Cyclomatic complexity of the method is 24
Complex Method,StrumpyShaderEditor,NodeEditor,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\GraphEditor\NodeEditor.cs,FileMenuSelect,Cyclomatic complexity of the method is 15
Complex Method,StrumpyShaderEditor,NodeEditor,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\GraphEditor\NodeEditor.cs,DrawOptions,Cyclomatic complexity of the method is 16
Complex Method,StrumpyShaderEditor,NodeEditor,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\GraphEditor\NodeEditor.cs,HandleEvents,Cyclomatic complexity of the method is 40
Complex Method,StrumpyShaderEditor,NodeEditor,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\GraphEditor\NodeEditor.cs,DrawSettings,Cyclomatic complexity of the method is 35
Complex Method,StrumpyShaderEditor,NodeEditor,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\GraphEditor\NodeEditor.cs,LeftMouseDown,Cyclomatic complexity of the method is 8
Complex Method,StrumpyShaderEditor,NodeEditor,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\GraphEditor\NodeEditor.cs,RightMouseDown,Cyclomatic complexity of the method is 8
Complex Method,StrumpyShaderEditor,NodeEditor,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\GraphEditor\NodeEditor.cs,DrawIOLines,Cyclomatic complexity of the method is 8
Complex Method,StrumpyShaderEditor,NodeEditor,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\GraphEditor\NodeEditor.cs,PasteNodes,Cyclomatic complexity of the method is 8
Complex Method,StrumpyShaderEditor,PreviewWindowInternal,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\GraphEditor\PreviewWindowInternal.cs,UpdateMaterial,Cyclomatic complexity of the method is 9
Complex Method,StrumpyShaderEditor,PreviewWindowInternal,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\GraphEditor\PreviewWindowInternal.cs,OnGUI,Cyclomatic complexity of the method is 15
Complex Method,StrumpyShaderEditor,ShaderGraph,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\Graph\Graphs\ShaderGraph.cs,UpdateErrorState,Cyclomatic complexity of the method is 9
Complex Method,StrumpyShaderEditor,InputTypeExtensions,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\Graph\Nodes\InputNodes\InputNodeInterfaces\IFieldInput.cs,ShaderTypeString,Cyclomatic complexity of the method is 9
Complex Method,StrumpyShaderEditor,PropertyExtensions,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\Graph\Nodes\InputNodes\InputNodeInterfaces\IPropertyInput.cs,PropertyTypeString,Cyclomatic complexity of the method is 9
Complex Method,StrumpyShaderEditor,Node,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\Graph\Nodes\Node.cs,Draw,Cyclomatic complexity of the method is 21
Complex Method,StrumpyShaderEditor,ShaderInputs,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\Graph\Properties\ShaderInputs.cs,Draw,Cyclomatic complexity of the method is 13
Complex Method,StrumpyShaderEditor,ShaderSettings,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\Graph\Settings\ShaderSettings.cs,Draw,Cyclomatic complexity of the method is 10
Complex Method,StrumpyShaderEditor,TypeExtensions,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\Graph\Types\TypeEnum.cs,ShaderString,Cyclomatic complexity of the method is 8
Long Parameter List,StrumpyShaderEditor,PreviewRenderer,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\GraphEditor\PreviewRenderer.cs,Render,The method has 9 parameters.
Long Parameter List,StrumpyShaderEditor,NodeMetaData,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\Graph\Nodes\NodeMetaData.cs,NodeMetaData,The method has 5 parameters.
Long Identifier,StrumpyShaderEditor,SubGraph,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\Graph\Graphs\SubGraph.cs,UpdateErrorState,The length of the parameter graphContainsCircularReferences is 31.
Long Statement,StrumpyShaderEditor,PopupMenu,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\CustomGUI\PopupMenu.cs,Show,The length of the statement  "		if ((item.Category == "Vertex" && graphType != SubGraphType.Vertex) || item.Category == "Lighting" && graphType != SubGraphType.SimpleLighting) { " is 145.
Long Statement,StrumpyShaderEditor,EditorExtensions,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\GraphEditor\EditorExtensions.cs,DrawMeshOnly,The length of the statement  "	typeof(Handles).InvokeMember ("SetCameraOnlyDrawMesh"' BindingFlags.InvokeMethod | BindingFlags.Static | BindingFlags.NonPublic' null' null' new object[] { " is 155.
Long Statement,StrumpyShaderEditor,NodeEditor,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\GraphEditor\NodeEditor.cs,Update,The length of the statement  "		var path = _quickSaving ? _lastGraphPath : EditorUtility.SaveFilePanel ("Save shader graph to file..."' _graphsDir' "shader.sgraph"' "sgraph"); " is 143.
Long Statement,StrumpyShaderEditor,NodeEditor,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\GraphEditor\NodeEditor.cs,Update,The length of the statement  "		var path = string.IsNullOrEmpty (_overrideLoadPath) ? EditorUtility.OpenFilePanel ("Load shader graph..."' loadDir' "sgraph") : _overrideLoadPath; " is 146.
Long Statement,StrumpyShaderEditor,NodeEditor,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\GraphEditor\NodeEditor.cs,Update,The length of the statement  "			var path = _quickExport ? _lastExportPath : EditorUtility.SaveFilePanel ("Export shader to file..."' Application.dataPath' "shader.shader"' "shader"); " is 150.
Long Statement,StrumpyShaderEditor,NodeEditor,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\GraphEditor\NodeEditor.cs,DrawOptions,The length of the statement  "						new [] { OptionsSelection.File.ToString()' OptionsSelection.Comments.ToString()' OptionsSelection.Graphs.ToString() 'OptionsSelection.Preview.ToString() } );" is 157.
Long Statement,StrumpyShaderEditor,NodeEditor,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\GraphEditor\NodeEditor.cs,HandleEvents,The length of the statement  "		if (Event.current.commandName == "Copy" || Event.current.commandName == "Paste" || Event.current.commandName == "Duplicate" || Event.current.commandName == "SelectAll") { " is 170.
Long Statement,StrumpyShaderEditor,NodeEditor,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\GraphEditor\NodeEditor.cs,UpdateIOChannels,The length of the statement  "		if (SelectedInputChannel.NodeIdentifier != SelectedOutputChannel.NodeIdentifier && inputChannel.ChannelType == outputChannel.ChannelType) { " is 139.
Long Statement,StrumpyShaderEditor,NodeEditor,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\GraphEditor\NodeEditor.cs,DrawSettings,The length of the statement  "	_optionsScrollPosition = GUILayout.BeginScrollView (_optionsScrollPosition' GUILayout.Width (_detailsBox.width)' GUILayout.Height (_detailsBox.height - 30)); " is 157.
Long Statement,StrumpyShaderEditor,NodeEditor,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\GraphEditor\NodeEditor.cs,RightMouseDown,The length of the statement  "				var distance = HandleUtility.DistancePointBezier (_currentMousePosition' new Vector3 (startPos.x' startPos.y' 0.0f)' new Vector3 (endPos.x' endPos.y' 0.0f)' new Vector3 (startPos.x + distanceBetweenNodes / 3.0f' startPos.y' 0.0f)' new Vector3 (endPos.x - distanceBetweenNodes / 3.0f' endPos.y' 0.0f)); " is 301.
Long Statement,StrumpyShaderEditor,NodeEditor,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\GraphEditor\NodeEditor.cs,DrawIOLines,The length of the statement  "				if (channelBounds.xMin > viewArea.xMax || channelBounds.xMax < viewArea.xMin || channelBounds.yMin > viewArea.yMax || channelBounds.yMax < viewArea.yMin) { " is 155.
Long Statement,StrumpyShaderEditor,NodeEditor,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\GraphEditor\NodeEditor.cs,DrawIOLines,The length of the statement  "				Handles.DrawBezier (new Vector3 (startPos.x' startPos.y)' new Vector3 (endPos.x' endPos.y)' new Vector3 (startPos.x + distanceBetweenNodes / 3.0f' startPos.y)' new Vector3 (endPos.x - distanceBetweenNodes / 3.0f' endPos.y)' Color.black' _bezierTexture' 1.25f); " is 260.
Long Statement,StrumpyShaderEditor,NodeEditor,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\GraphEditor\NodeEditor.cs,DrawIOLines,The length of the statement  "			var channelPosition = NodeDrawer.GetAbsoluteInputChannelPosition (_selectedGraph.CurrentSubGraph.GetNode (SelectedInputChannel.NodeIdentifier)' SelectedInputChannel.ChannelId); " is 176.
Long Statement,StrumpyShaderEditor,NodeEditor,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\GraphEditor\NodeEditor.cs,DrawIOLines,The length of the statement  "			var channelPosition = NodeDrawer.GetAbsoluteOutputChannelPosition (_selectedGraph.CurrentSubGraph.GetNode (SelectedOutputChannel.NodeIdentifier)' SelectedOutputChannel.ChannelId); " is 179.
Long Statement,StrumpyShaderEditor,NodeEditor,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\GraphEditor\NodeEditor.cs,DrawIOLines,The length of the statement  "		Handles.DrawBezier (new Vector3 (startPos.x' startPos.y)' new Vector3 (endPos.x' endPos.y)' new Vector3 (startPos.x + distanceBetweenNodes / 3.0f' startPos.y)' new Vector3 (endPos.x - distanceBetweenNodes / 3.0f' endPos.y)' Color.black' _bezierTexture' 1.25f); " is 260.
Long Statement,StrumpyShaderEditor,PreviewRenderer,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\GraphEditor\PreviewRenderer.cs,Render,The length of the statement  "	_internalRenderUtilityType.InvokeMember ("SetCustomLighting"' BindingFlags.InvokeMethod | BindingFlags.Instance | BindingFlags.Public | BindingFlags.Static' null' null' new object[] { " is 183.
Long Statement,StrumpyShaderEditor,PreviewRenderer,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\GraphEditor\PreviewRenderer.cs,Render,The length of the statement  "	_internalRenderUtilityType.InvokeMember ("RemoveCustomLighting"' BindingFlags.InvokeMethod | BindingFlags.Instance | BindingFlags.Public | BindingFlags.Static' null' null' null); " is 178.
Long Statement,StrumpyShaderEditor,PreviewWindowInternal,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\GraphEditor\PreviewWindowInternal.cs,UpdatePreviewTexture,The length of the statement  "	_previewTexture = RenderTexture.GetTemporary ((int)position.width' (int)position.height - 40' 24' RenderTextureFormat.ARGB32); " is 126.
Long Statement,StrumpyShaderEditor,PreviewWindowInternal,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\GraphEditor\PreviewWindowInternal.cs,Update,The length of the statement  "	_previewCamera.transform.rotation = Quaternion.Euler (_cameraRotation.y' 0.0f' 0f) * Quaternion.Euler (0.0f' _cameraRotation.x' 0.0f); " is 134.
Long Statement,StrumpyShaderEditor,PreviewWindowInternal,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\GraphEditor\PreviewWindowInternal.cs,Update,The length of the statement  "		_renderer.Render (_previewMesh' Vector3.zero' Quaternion.identity' _previewCamera' _previewLights' new Color (0.1f' 0.1f' 0.1f' 0f)' PreviewMaterial' _previewTexture' _drawBackground); " is 184.
Long Statement,StrumpyShaderEditor,ShaderGraph,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\Graph\Graphs\ShaderGraph.cs,IsGraphValid,The length of the statement  "	return AllSubGraphs ().All (x => x.IsSubGraphValid ()) && shaderInputs.InputsValid () && shaderSettings.SettingsValid (); " is 121.
Long Statement,StrumpyShaderEditor,ShaderGraph,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\Graph\Graphs\ShaderGraph.cs,GetShader,The length of the statement  "	shaderTemplate = shaderTemplate.Replace ("${ShaderName}"' isPreviewShader ? "ShaderEditor/EditorShaderCache" : shaderSettings.ShaderName); " is 138.
Long Statement,StrumpyShaderEditor,ShaderGraph,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\Graph\Graphs\ShaderGraph.cs,GetShader,The length of the statement  "	properties += (isPreviewShader && needsCosTimeNode) ? "_EditorCosTime(\"_EditorCosTime\"'Vector) = (0.0'0.0'0.0'0.0)\n" : ""; " is 125.
Long Statement,StrumpyShaderEditor,ShaderGraph,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\Graph\Graphs\ShaderGraph.cs,GetShader,The length of the statement  "	properties += (isPreviewShader && needsSinTimeNode) ? "_EditorSinTime(\"_EditorSinTime\"'Vector) = (0.0'0.0'0.0'0.0)\n" : ""; " is 125.
Long Statement,StrumpyShaderEditor,SubGraph,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\Graph\Graphs\SubGraph.cs,Draw,The length of the statement  "		if (drawWindow.Contains (topLeft) || drawWindow.Contains (topRight) || drawWindow.Contains (bottomLeft) || drawWindow.Contains (bottomRight)) { " is 143.
Long Statement,StrumpyShaderEditor,SubGraph,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\Graph\Graphs\SubGraph.cs,IsNodeValid,The length of the statement  "		where fieldInputNode.GetFieldName () == validatingInputNode.GetFieldName () && fieldInputNode.GetFieldType () != validatingInputNode.GetFieldType () " is 148.
Long Statement,StrumpyShaderEditor,FloatConstNode,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\Graph\Nodes\Constants\FloatConstNode.cs,GetExpression,The length of the statement  "	return "float4( " + _floatValue.Value + "'" + _floatValue.Value + "'" + _floatValue.Value + "'" + _floatValue.Value + " )"; " is 123.
Long Statement,StrumpyShaderEditor,MergeNode,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\Graph\Nodes\Functions\MergeNode.cs,DrawProperties,The length of the statement  "	_xChannel.Value = GUILayout.SelectionGrid (_xChannel.Value' _xChannel.GridValues.ToArray ()' _xChannel.GuiRowElementsNum); " is 122.
Long Statement,StrumpyShaderEditor,MergeNode,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\Graph\Nodes\Functions\MergeNode.cs,DrawProperties,The length of the statement  "	_yChannel.Value = GUILayout.SelectionGrid (_yChannel.Value' _yChannel.GridValues.ToArray ()' _yChannel.GuiRowElementsNum); " is 122.
Long Statement,StrumpyShaderEditor,MergeNode,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\Graph\Nodes\Functions\MergeNode.cs,DrawProperties,The length of the statement  "	_zChannel.Value = GUILayout.SelectionGrid (_zChannel.Value' _zChannel.GridValues.ToArray ()' _zChannel.GuiRowElementsNum); " is 122.
Long Statement,StrumpyShaderEditor,MergeNode,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\Graph\Nodes\Functions\MergeNode.cs,DrawProperties,The length of the statement  "	_wChannel.Value = GUILayout.SelectionGrid (_wChannel.Value' _wChannel.GridValues.ToArray ()' _wChannel.GuiRowElementsNum); " is 122.
Long Statement,StrumpyShaderEditor,ParallaxNode,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\Graph\Nodes\Functions\ParallaxNode.cs,GetUsage,The length of the statement  "	result += " ParallaxOffset( " + arg2.QueryResult + ".x' " + arg3.QueryResult + ".x' " + arg1.QueryResult + ".xyz).xyxy"; " is 120.
Long Statement,StrumpyShaderEditor,SplatNode,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\Graph\Nodes\Functions\SplatNode.cs,DrawProperties,The length of the statement  "	_splatSelection.Value = GUILayout.SelectionGrid (_splatSelection.Value' _splatSelection.GridValues.ToArray ()' _splatSelection.GuiRowElementsNum); " is 146.
Long Statement,StrumpyShaderEditor,SplitNode,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\Graph\Nodes\Functions\SplitNode.cs,GetExpression,The length of the statement  "		return "float4( " + UniqueNodeIdentifier + ".x' " + UniqueNodeIdentifier + ".x' " + UniqueNodeIdentifier + ".x' " + UniqueNodeIdentifier + ".x)"; " is 145.
Long Statement,StrumpyShaderEditor,SplitNode,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\Graph\Nodes\Functions\SplitNode.cs,GetExpression,The length of the statement  "		return "float4( " + UniqueNodeIdentifier + ".y' " + UniqueNodeIdentifier + ".y' " + UniqueNodeIdentifier + ".y' " + UniqueNodeIdentifier + ".y)"; " is 145.
Long Statement,StrumpyShaderEditor,SplitNode,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\Graph\Nodes\Functions\SplitNode.cs,GetExpression,The length of the statement  "		return "float4( " + UniqueNodeIdentifier + ".z' " + UniqueNodeIdentifier + ".z' " + UniqueNodeIdentifier + ".z' " + UniqueNodeIdentifier + ".z)"; " is 145.
Long Statement,StrumpyShaderEditor,SplitNode,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\Graph\Nodes\Functions\SplitNode.cs,GetExpression,The length of the statement  "	return "float4( " + UniqueNodeIdentifier + ".w' " + UniqueNodeIdentifier + ".w' " + UniqueNodeIdentifier + ".w' " + UniqueNodeIdentifier + ".w)"; " is 145.
Long Statement,StrumpyShaderEditor,SwizzleNode,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\Graph\Nodes\Functions\SwizzleNode.cs,GetUsage,The length of the statement  "	result += "float4(" + channelName + "." + _xChannel.Selected + "' " + channelName + "." + _yChannel.Selected + "' " + channelName + "." + _zChannel.Selected + "' " + channelName + "." + _wChannel.Selected + ");\n"; " is 214.
Long Statement,StrumpyShaderEditor,SwizzleNode,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\Graph\Nodes\Functions\SwizzleNode.cs,DrawProperties,The length of the statement  "	_xChannel.Value = GUILayout.SelectionGrid (_xChannel.Value' _xChannel.GridValues.ToArray ()' _xChannel.GuiRowElementsNum); " is 122.
Long Statement,StrumpyShaderEditor,SwizzleNode,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\Graph\Nodes\Functions\SwizzleNode.cs,DrawProperties,The length of the statement  "	_yChannel.Value = GUILayout.SelectionGrid (_yChannel.Value' _yChannel.GridValues.ToArray ()' _yChannel.GuiRowElementsNum); " is 122.
Long Statement,StrumpyShaderEditor,SwizzleNode,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\Graph\Nodes\Functions\SwizzleNode.cs,DrawProperties,The length of the statement  "	_zChannel.Value = GUILayout.SelectionGrid (_zChannel.Value' _zChannel.GridValues.ToArray ()' _zChannel.GuiRowElementsNum); " is 122.
Long Statement,StrumpyShaderEditor,SwizzleNode,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\Graph\Nodes\Functions\SwizzleNode.cs,DrawProperties,The length of the statement  "	_wChannel.Value = GUILayout.SelectionGrid (_wChannel.Value' _wChannel.GridValues.ToArray ()' _wChannel.GuiRowElementsNum); " is 122.
Long Statement,StrumpyShaderEditor,UVPanNode,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\Graph\Nodes\Functions\UVPanNode.cs,GetUsage,The length of the statement  "	result += (_xPan ? (uvInput.QueryResult + ".x" + " + " + timeInput.QueryResult + "." + _inputAddChannel.Selected) : uvInput.QueryResult + ".x") + "'"; " is 150.
Long Statement,StrumpyShaderEditor,UVPanNode,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\Graph\Nodes\Functions\UVPanNode.cs,GetUsage,The length of the statement  "	result += (_yPan ? (uvInput.QueryResult + ".y" + " + " + timeInput.QueryResult + "." + _inputAddChannel.Selected) : uvInput.QueryResult + ".y") + "'"; " is 150.
Long Statement,StrumpyShaderEditor,UVPanNode,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\Graph\Nodes\Functions\UVPanNode.cs,GetUsage,The length of the statement  "	result += (_zPan ? (uvInput.QueryResult + ".z" + " + " + timeInput.QueryResult + "." + _inputAddChannel.Selected) : uvInput.QueryResult + ".z") + "'"; " is 150.
Long Statement,StrumpyShaderEditor,UVPanNode,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\Graph\Nodes\Functions\UVPanNode.cs,GetUsage,The length of the statement  "	result += (_wPan ? (uvInput.QueryResult + ".w" + " + " + timeInput.QueryResult + "." + _inputAddChannel.Selected) : uvInput.QueryResult + ".w") + ");\n"; " is 153.
Long Statement,StrumpyShaderEditor,UVPanNode,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\Graph\Nodes\Functions\UVPanNode.cs,DrawProperties,The length of the statement  "	_inputAddChannel.Value = GUILayout.SelectionGrid (_inputAddChannel.Value' _inputAddChannel.GridValues.ToArray ()' _inputAddChannel.GuiRowElementsNum); " is 150.
Long Statement,StrumpyShaderEditor,InputStructExtensions,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\Graph\Nodes\InputNodes\InputNodeInterfaces\IStructInput.cs,GenerateInputUsageString,The length of the statement  "	return "float4( IN." + structInput.GetStructFieldName () + ".x' " + "IN." + structInput.GetStructFieldName () + ".y'" + "IN." + structInput.GetStructFieldName () + ".z'" + "1.0 )"; " is 180.
Long Statement,StrumpyShaderEditor,InputNode,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\Graph\Nodes\InputNodes\PropertyInputNodes\InputNode.cs,DrawProperties,The length of the statement  "	_inputId.Value = EditorGUILayout.IntPopup ("Input Property"' _inputId.Value' propertyNames.ToArray ()' propertyValues.ToArray ()); " is 130.
Long Statement,StrumpyShaderEditor,RangeNode,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\Graph\Nodes\InputNodes\PropertyInputNodes\RangeNode.cs,GetOutputChannels,The length of the statement  "		_value.DisplayName = "[" + rangeProperty.Range.Min.ToString ("G2") + "'" + rangeProperty.Range.Max.ToString ("G2") + "]"; " is 121.
Long Statement,StrumpyShaderEditor,Sampler2DNode,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\Graph\Nodes\InputNodes\PropertyInputNodes\Sampler2DNode.cs,GetStructFieldDefinition,The length of the statement  "	return IsOutputChannelConnected (1) ? GetStructFieldType ().ShaderTypeString () + " " + GetStructFieldName () + ";\n" : ""; " is 123.
Long Statement,StrumpyShaderEditor,SimpleWorldReflectionNode,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\Graph\Nodes\InputNodes\SimpleWorldReflectionNode.cs,GetStructVertexShaderString,The length of the statement  "	return "o." + GetStructFieldName () + " = -reflect( normalize(WorldSpaceViewDir(v.vertex))' normalize(mul((float3x3)_Object2World' SCALED_NORMAL)));\n"; " is 152.
Long Statement,StrumpyShaderEditor,Node,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\Graph\Nodes\Node.cs,IsOutputChannelConnected,The length of the statement  "			if (inChannel.IncomingConnection != null && inChannel.IncomingConnection.NodeIdentifier == UniqueNodeIdentifier && inChannel.IncomingConnection.ChannelId == channelId) { " is 169.
Long Statement,StrumpyShaderEditor,Node,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\Graph\Nodes\Node.cs,Draw,The length of the statement  "		var absoluteIOVisualPos = new Rect (currentDrawPosition.x - (nodeIoDrawSize.x * 0.5f)' currentDrawPosition.y + nodeIoDrawSize.y / 2 + 2' nodeIoDrawSize.x' nodeIoDrawSize.y); " is 173.
Long Statement,StrumpyShaderEditor,Node,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\Graph\Nodes\Node.cs,Draw,The length of the statement  "		var absoluteIODrawPos = new Rect (currentDrawPosition.x - (nodeIoSize.x * 0.5f)' currentDrawPosition.y + 2' nodeIoSize.x' nodeIoSize.y); " is 136.
Long Statement,StrumpyShaderEditor,Node,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\Graph\Nodes\Node.cs,Draw,The length of the statement  "		var labelDrawPos = new Rect (currentDrawPosition.x + (nodeIoSize.x * 0.5f)' currentDrawPosition.y' drawPosOffset.width / 2f' nodeDrawHeightPerChannel); " is 151.
Long Statement,StrumpyShaderEditor,Node,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\Graph\Nodes\Node.cs,Draw,The length of the statement  "		var absoluteIOVisualPos = new Rect (drawPosOffset.xMax - (nodeIoSize.x * 0.5f) + 3' currentDrawPosition.y + nodeIoDrawSize.y / 2 + 2' nodeIoDrawSize.x' nodeIoDrawSize.y); " is 170.
Long Statement,StrumpyShaderEditor,Node,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\Graph\Nodes\Node.cs,Draw,The length of the statement  "		var absoluteIODrawPos = new Rect (drawPosOffset.xMax - (nodeIoSize.x * 0.5f)' currentDrawPosition.y + 2' nodeIoSize.x' nodeIoSize.y); " is 133.
Long Statement,StrumpyShaderEditor,Node,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\Graph\Nodes\Node.cs,Draw,The length of the statement  "		var labelDrawPos = new Rect (currentDrawPosition.x' currentDrawPosition.y' (drawPosOffset.width / 2f) - (nodeIoSize.x * 0.5f)' nodeDrawHeightPerChannel); " is 153.
Long Statement,StrumpyShaderEditor,DotNode,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\Graph\Nodes\Operations\DotNode.cs,DrawProperties,The length of the statement  "	_channels.Value = GUILayout.SelectionGrid (_channels.Value' _channels.GridValues.ToArray ()' _channels.GuiRowElementsNum); " is 122.
Long Statement,StrumpyShaderEditor,ReferenceCrossNode,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\Graph\Nodes\Operations\ReferenceCrossNode.cs,GetFunctionDefinition,The length of the statement  "	function += "float3 " + FunctionName + "(" + _vector1.ChannelType.ShaderString () + " arg1'" + _vector2.ChannelType.ShaderString () + " arg2 )\n"; " is 146.
Long Statement,StrumpyShaderEditor,ColorProperty,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\Graph\Properties\ColorProperty.cs,GetPropertyDefinition,The length of the statement  "	result += "(\"" + PropertyDescription + "\"' " + GetPropertyType ().PropertyTypeString () + ") = (" + _color.R + "'" + _color.G + "'" + _color.B + "'" + _color.A + ")\n"; " is 170.
Long Statement,StrumpyShaderEditor,Float4Property,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\Graph\Properties\Float4Property.cs,GetPropertyDefinition,The length of the statement  "	result += "(\"" + PropertyDescription + "\"' " + GetPropertyType ().PropertyTypeString () + ") = (" + _value.X + "'" + _value.Y + "'" + _value.Z + "'" + _value.W + ")\n"; " is 170.
Long Statement,StrumpyShaderEditor,FloatProperty,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\Graph\Properties\FloatProperty.cs,GetPropertyDefinition,The length of the statement  "	result += "(\"" + PropertyDescription + "\"' " + GetPropertyType ().PropertyTypeString () + ") = " + _value.Value + "\n"; " is 121.
Long Statement,StrumpyShaderEditor,RangeProperty,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\Graph\Properties\RangeProperty.cs,GetPropertyDefinition,The length of the statement  "	result += "(\"" + PropertyDescription + "\"' " + GetPropertyType ().PropertyTypeString () + "(" + _value.Min + "'" + _value.Max + ") ) = " + _value.Value + "\n"; " is 161.
Long Statement,StrumpyShaderEditor,Texture2DProperty,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\Graph\Properties\Texture2DProperty.cs,GetPropertyDefinition,The length of the statement  "	result += "(\"" + PropertyDescription + "\"' " + GetPropertyType ().PropertyTypeString () + ") = \"" + _defaultTexture.ToString ().ToLower () + "\" {}\n"; " is 154.
Long Statement,StrumpyShaderEditor,TextureCubeProperty,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\Graph\Properties\TextureCubeProperty.cs,GetPropertyDefinition,The length of the statement  "	result += "(\"" + PropertyDescription + "\"' " + GetPropertyType ().PropertyTypeString () + ") = \"" + _defaultTexture.ToString ().ToLower () + "\" {}\n"; " is 154.
Long Statement,StrumpyShaderEditor,ShaderSettings,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\Graph\Settings\ShaderSettings.cs,GetRenderQueue,The length of the statement  "	return val == 0 ? _queue.ToString () : val > 0 ? _queue.ToString () + "+" + val.ToString () : _queue.ToString () + val.ToString (); " is 131.
Long Statement,StrumpyShaderEditor,ShaderSettings,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\Graph\Settings\ShaderSettings.cs,Draw,The length of the statement  "	var shaderNameContent = new GUIContent ("Shader Name"' "Name for shader. Includes the hierarchy listing' that is' MyShaders/Shader will be in a folder called \"MyShaders\" in the shader selection dropdown. Also used when referring to fallback shaders."); " is 254.
Long Statement,StrumpyShaderEditor,ShaderSettings,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\Graph\Settings\ShaderSettings.cs,Draw,The length of the statement  "	var shaderFallbackContent = new GUIContent ("Shader Fallback"' "Fallback shader to use in case this shader can not be used."); " is 126.
Long Statement,StrumpyShaderEditor,ShaderSettings,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\Graph\Settings\ShaderSettings.cs,Draw,The length of the statement  "	var targetContent = new GUIContent ("Shader Model"' "Requires more recent hardware to use the shader' but allows for more instructions' texture reads' and more input information."); " is 181.
Long Statement,StrumpyShaderEditor,ShaderSettings,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\Graph\Settings\ShaderSettings.cs,Draw,The length of the statement  "		var renderTypeContent = new GUIContent ("Render Type"' "This is the rendertype tag inserted into the shader. Can be used for shader replace"); " is 142.
Long Statement,StrumpyShaderEditor,ShaderSettings,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\Graph\Settings\ShaderSettings.cs,Draw,The length of the statement  "		var offContent = new GUIContent ("Queue Offset"' "Offset for drawing. Used to ensure some things draw before or after others' it specifically is an offset from the given queue- That is to say' you won't have a transparent object draw before an opaque object (or similar) due to this offset."); " is 293.
Long Statement,StrumpyShaderEditor,ShaderSettings,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\Graph\Settings\ShaderSettings.cs,Draw,The length of the statement  "		var zWriteContent = new GUIContent ("Write Depth"' "Depth is considered when testing other objects. Disable for certain effects' like letting other things draw over yourself' or for speed on most overlays."); " is 208.
Long Statement,StrumpyShaderEditor,ShaderSettings,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\Graph\Settings\ShaderSettings.cs,Draw,The length of the statement  "		_dualForward = GUILayout.Toggle (_dualForward' new GUIContent ("Forward Dual Lightmaps"' "Use dual lightmaps in the forward rendering path")); " is 142.
Long Statement,StrumpyShaderEditor,ShaderSettings,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\Graph\Settings\ShaderSettings.cs,Draw,The length of the statement  "		_fullForwardShadows = GUILayout.Toggle (_fullForwardShadows' new GUIContent ("Forward Full Shadows"' "Support all shadow types in Forward rendering path.")); " is 157.
Long Statement,StrumpyShaderEditor,ShaderSettings,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\Graph\Settings\ShaderSettings.cs,Draw,The length of the statement  "		_softVegetation = GUILayout.Toggle (_softVegetation' new GUIContent ("Soft Vegetation"' "Makes the surface shader only be rendered when Soft Vegetation is on.")); " is 162.
Long Statement,StrumpyShaderEditor,ShaderSettings,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\Graph\Settings\ShaderSettings.cs,Draw,The length of the statement  "		_noAmbient = GUILayout.Toggle (_noAmbient' new GUIContent ("No Ambient"' "Do not apply any ambient lighting or spherical harmonics lights.")); " is 142.
Long Statement,StrumpyShaderEditor,ShaderSettings,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\Graph\Settings\ShaderSettings.cs,Draw,The length of the statement  "		_noLightmap = GUILayout.Toggle (_noLightmap' new GUIContent ("No Lightmaps"' "Disables lightmap support in this shader (makes a shader smaller).")); " is 148.
Long Statement,StrumpyShaderEditor,ShaderSettings,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\Graph\Settings\ShaderSettings.cs,Draw,The length of the statement  "		_addShadow = GUILayout.Toggle (_addShadow' new GUIContent ("Advanced Shadow Pass"' "Performs vertex transformations and clipping for the shadow pass' you need to use this if shadows do not display properly.")); " is 210.
Long Statement,StrumpyShaderEditor,ShaderSettings,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\Graph\Settings\ShaderSettings.cs,Draw,The length of the statement  "		_ignoreProjectors = GUILayout.Toggle (_ignoreProjectors' new GUIContent ("Ignore Projectors"' "Ignores projector components' should be used if your doing custom vertex transformations or most transparency")); " is 208.
Long Statement,StrumpyShaderEditor,ShaderSettings,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\Graph\Settings\ShaderSettings.cs,Draw,The length of the statement  "		_approxview = GUILayout.Toggle (_approxview' new GUIContent ("Approximate View"' "Computes normalized view direction per-vertex instead of per-pixel' for shaders that need it. This is faster' but view direction is not entirely correct when camera gets close to surface.")); " is 273.
Long Statement,StrumpyShaderEditor,ShaderSettings,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\Graph\Settings\ShaderSettings.cs,Draw,The length of the statement  "		_halfasview = GUILayout.Toggle (_halfasview' new GUIContent ("Half As View"' "Pass half-direction vector into the lighting function instead of view-direction. Half-direction will be computed and normalized per vertex. This is faster' but not entirely correct.")); " is 263.
Long Statement,StrumpyShaderEditor,ShaderSettings,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\Graph\Settings\ShaderSettings.cs,Draw,The length of the statement  "		_noForwardAdd = GUILayout.Toggle (_noForwardAdd' new GUIContent ("Disable Forward Add"' "Disables Forward rendering additive pass. This makes the shader support one full directional light' with all other lights computed per-vertex/SH. Makes shaders smaller as well.")); " is 269.
Complex Conditional,StrumpyShaderEditor,PopupMenu,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\CustomGUI\PopupMenu.cs,Show,The conditional expression  "(item.Category == "Vertex" && graphType != SubGraphType.Vertex) || item.Category == "Lighting" && graphType != SubGraphType.SimpleLighting"  is complex.
Complex Conditional,StrumpyShaderEditor,NodeEditor,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\GraphEditor\NodeEditor.cs,HandleEvents,The conditional expression  "Event.current.commandName == "Copy" || Event.current.commandName == "Paste" || Event.current.commandName == "Duplicate" || Event.current.commandName == "SelectAll""  is complex.
Complex Conditional,StrumpyShaderEditor,NodeEditor,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\GraphEditor\NodeEditor.cs,DrawIOLines,The conditional expression  "channelBounds.xMin > viewArea.xMax || channelBounds.xMax < viewArea.xMin || channelBounds.yMin > viewArea.yMax || channelBounds.yMax < viewArea.yMin"  is complex.
Complex Conditional,StrumpyShaderEditor,SubGraph,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\Graph\Graphs\SubGraph.cs,Draw,The conditional expression  "drawWindow.Contains (topLeft) || drawWindow.Contains (topRight) || drawWindow.Contains (bottomLeft) || drawWindow.Contains (bottomRight)"  is complex.
Virtual Method Call from Constructor,StrumpyShaderEditor,ShaderProperty,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\Graph\Properties\ShaderProperty.cs,ShaderProperty,The constructor "ShaderProperty" calls a virtual method "Initialize".
Magic Number,StrumpyShaderEditor,InstructionCounter,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\GraphEditor\InstructionCounter.cs,CountInstructions,The following statement contains a magic number: try {  	var api = ParseAPI.NA;  	var stage = ParseStage.NA;  	bool hitFive = false;  	// Shoddy catch for the ALU-5 program  	using (StreamReader sr = new StreamReader (filePath)) {  		String line;  		while ((line = sr.ReadLine ()) != null) {  			// Set parse stages  			if (line.Contains ("Program \"vp\""))  				stage = ParseStage.Vertex;  			if (line.Contains ("Program \"fp\""))  				stage = ParseStage.Fragment;  			if (line.Contains ("opengl"))  				api = ParseAPI.GL;  			if (line.Contains ("d3d9"))  				api = ParseAPI.D3D;  			// Parse for the ALU Counts  			if (line.Contains ("ALU:")) {  				string subLine = line;  				subLine = subLine.Substring (subLine.IndexOf ("to ") + 3);  				//Debug.Log(subLine);  				int ALUFound;  				bool canParse = int.TryParse (subLine.Split (new char[2] {  					" " [0]'  					"'" [0]  				}) [0]' out ALUFound);  				if (!canParse)  					ALUFound = -1;  				// Shoddy catch for the 5ALU intermediary program  				if (ALUFound == 5)  					if (hitFive == true)  						ALUFound = -1;  				switch (stage) {  				case ParseStage.Vertex: {  					switch (api) {  					case ParseAPI.GL: {  						GL_V_ALU = Mathf.Max (ALUFound' GL_V_ALU);  						break;  					}  					case ParseAPI.D3D: {  						D3D_V_ALU = Mathf.Max (ALUFound' D3D_V_ALU);  						break;  					}  					}  					break;  				}  				case ParseStage.Fragment: {  					switch (api) {  					case ParseAPI.GL: {  						GL_ALU = Mathf.Max (ALUFound' GL_ALU);  						break;  					}  					case ParseAPI.D3D: {  						D3D_ALU = Mathf.Max (ALUFound' D3D_ALU);  						break;  					}  					}  					break;  				}  				}  			}  			// Parse for TEX Counts  			if (line.Contains ("' TEX:")) {  				string subLine = line;  				subLine = subLine.Substring (subLine.IndexOf ("TEX:"));  				// Cut out the preliminary ALU listing  				subLine = subLine.Substring (subLine.IndexOf ("to ") + 3);  				// Grab the second value  				subLine = subLine.Split (" " [0]) [0];  				// Cut anything that snuck in after  				//Debug.Log("Tex Count - " + subLine);  				int TEXFound;  				int.TryParse (subLine' out TEXFound);  				switch (api) {  				case ParseAPI.GL: {  					GL_TEX = Mathf.Max (TEXFound' GL_TEX);  					break;  				}  				case ParseAPI.D3D: {  					D3D_TEX = Mathf.Max (TEXFound' D3D_TEX);  					break;  				}  				}  			}  		}  	}  }  catch (Exception e) {  	Debug.Log ("Shader parsing error " + e);  }  
Magic Number,StrumpyShaderEditor,InstructionCounter,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\GraphEditor\InstructionCounter.cs,CountInstructions,The following statement contains a magic number: try {  	var api = ParseAPI.NA;  	var stage = ParseStage.NA;  	bool hitFive = false;  	// Shoddy catch for the ALU-5 program  	using (StreamReader sr = new StreamReader (filePath)) {  		String line;  		while ((line = sr.ReadLine ()) != null) {  			// Set parse stages  			if (line.Contains ("Program \"vp\""))  				stage = ParseStage.Vertex;  			if (line.Contains ("Program \"fp\""))  				stage = ParseStage.Fragment;  			if (line.Contains ("opengl"))  				api = ParseAPI.GL;  			if (line.Contains ("d3d9"))  				api = ParseAPI.D3D;  			// Parse for the ALU Counts  			if (line.Contains ("ALU:")) {  				string subLine = line;  				subLine = subLine.Substring (subLine.IndexOf ("to ") + 3);  				//Debug.Log(subLine);  				int ALUFound;  				bool canParse = int.TryParse (subLine.Split (new char[2] {  					" " [0]'  					"'" [0]  				}) [0]' out ALUFound);  				if (!canParse)  					ALUFound = -1;  				// Shoddy catch for the 5ALU intermediary program  				if (ALUFound == 5)  					if (hitFive == true)  						ALUFound = -1;  				switch (stage) {  				case ParseStage.Vertex: {  					switch (api) {  					case ParseAPI.GL: {  						GL_V_ALU = Mathf.Max (ALUFound' GL_V_ALU);  						break;  					}  					case ParseAPI.D3D: {  						D3D_V_ALU = Mathf.Max (ALUFound' D3D_V_ALU);  						break;  					}  					}  					break;  				}  				case ParseStage.Fragment: {  					switch (api) {  					case ParseAPI.GL: {  						GL_ALU = Mathf.Max (ALUFound' GL_ALU);  						break;  					}  					case ParseAPI.D3D: {  						D3D_ALU = Mathf.Max (ALUFound' D3D_ALU);  						break;  					}  					}  					break;  				}  				}  			}  			// Parse for TEX Counts  			if (line.Contains ("' TEX:")) {  				string subLine = line;  				subLine = subLine.Substring (subLine.IndexOf ("TEX:"));  				// Cut out the preliminary ALU listing  				subLine = subLine.Substring (subLine.IndexOf ("to ") + 3);  				// Grab the second value  				subLine = subLine.Split (" " [0]) [0];  				// Cut anything that snuck in after  				//Debug.Log("Tex Count - " + subLine);  				int TEXFound;  				int.TryParse (subLine' out TEXFound);  				switch (api) {  				case ParseAPI.GL: {  					GL_TEX = Mathf.Max (TEXFound' GL_TEX);  					break;  				}  				case ParseAPI.D3D: {  					D3D_TEX = Mathf.Max (TEXFound' D3D_TEX);  					break;  				}  				}  			}  		}  	}  }  catch (Exception e) {  	Debug.Log ("Shader parsing error " + e);  }  
Magic Number,StrumpyShaderEditor,InstructionCounter,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\GraphEditor\InstructionCounter.cs,CountInstructions,The following statement contains a magic number: try {  	var api = ParseAPI.NA;  	var stage = ParseStage.NA;  	bool hitFive = false;  	// Shoddy catch for the ALU-5 program  	using (StreamReader sr = new StreamReader (filePath)) {  		String line;  		while ((line = sr.ReadLine ()) != null) {  			// Set parse stages  			if (line.Contains ("Program \"vp\""))  				stage = ParseStage.Vertex;  			if (line.Contains ("Program \"fp\""))  				stage = ParseStage.Fragment;  			if (line.Contains ("opengl"))  				api = ParseAPI.GL;  			if (line.Contains ("d3d9"))  				api = ParseAPI.D3D;  			// Parse for the ALU Counts  			if (line.Contains ("ALU:")) {  				string subLine = line;  				subLine = subLine.Substring (subLine.IndexOf ("to ") + 3);  				//Debug.Log(subLine);  				int ALUFound;  				bool canParse = int.TryParse (subLine.Split (new char[2] {  					" " [0]'  					"'" [0]  				}) [0]' out ALUFound);  				if (!canParse)  					ALUFound = -1;  				// Shoddy catch for the 5ALU intermediary program  				if (ALUFound == 5)  					if (hitFive == true)  						ALUFound = -1;  				switch (stage) {  				case ParseStage.Vertex: {  					switch (api) {  					case ParseAPI.GL: {  						GL_V_ALU = Mathf.Max (ALUFound' GL_V_ALU);  						break;  					}  					case ParseAPI.D3D: {  						D3D_V_ALU = Mathf.Max (ALUFound' D3D_V_ALU);  						break;  					}  					}  					break;  				}  				case ParseStage.Fragment: {  					switch (api) {  					case ParseAPI.GL: {  						GL_ALU = Mathf.Max (ALUFound' GL_ALU);  						break;  					}  					case ParseAPI.D3D: {  						D3D_ALU = Mathf.Max (ALUFound' D3D_ALU);  						break;  					}  					}  					break;  				}  				}  			}  			// Parse for TEX Counts  			if (line.Contains ("' TEX:")) {  				string subLine = line;  				subLine = subLine.Substring (subLine.IndexOf ("TEX:"));  				// Cut out the preliminary ALU listing  				subLine = subLine.Substring (subLine.IndexOf ("to ") + 3);  				// Grab the second value  				subLine = subLine.Split (" " [0]) [0];  				// Cut anything that snuck in after  				//Debug.Log("Tex Count - " + subLine);  				int TEXFound;  				int.TryParse (subLine' out TEXFound);  				switch (api) {  				case ParseAPI.GL: {  					GL_TEX = Mathf.Max (TEXFound' GL_TEX);  					break;  				}  				case ParseAPI.D3D: {  					D3D_TEX = Mathf.Max (TEXFound' D3D_TEX);  					break;  				}  				}  			}  		}  	}  }  catch (Exception e) {  	Debug.Log ("Shader parsing error " + e);  }  
Magic Number,StrumpyShaderEditor,InstructionCounter,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\GraphEditor\InstructionCounter.cs,CountInstructions,The following statement contains a magic number: try {  	var api = ParseAPI.NA;  	var stage = ParseStage.NA;  	bool hitFive = false;  	// Shoddy catch for the ALU-5 program  	using (StreamReader sr = new StreamReader (filePath)) {  		String line;  		while ((line = sr.ReadLine ()) != null) {  			// Set parse stages  			if (line.Contains ("Program \"vp\""))  				stage = ParseStage.Vertex;  			if (line.Contains ("Program \"fp\""))  				stage = ParseStage.Fragment;  			if (line.Contains ("opengl"))  				api = ParseAPI.GL;  			if (line.Contains ("d3d9"))  				api = ParseAPI.D3D;  			// Parse for the ALU Counts  			if (line.Contains ("ALU:")) {  				string subLine = line;  				subLine = subLine.Substring (subLine.IndexOf ("to ") + 3);  				//Debug.Log(subLine);  				int ALUFound;  				bool canParse = int.TryParse (subLine.Split (new char[2] {  					" " [0]'  					"'" [0]  				}) [0]' out ALUFound);  				if (!canParse)  					ALUFound = -1;  				// Shoddy catch for the 5ALU intermediary program  				if (ALUFound == 5)  					if (hitFive == true)  						ALUFound = -1;  				switch (stage) {  				case ParseStage.Vertex: {  					switch (api) {  					case ParseAPI.GL: {  						GL_V_ALU = Mathf.Max (ALUFound' GL_V_ALU);  						break;  					}  					case ParseAPI.D3D: {  						D3D_V_ALU = Mathf.Max (ALUFound' D3D_V_ALU);  						break;  					}  					}  					break;  				}  				case ParseStage.Fragment: {  					switch (api) {  					case ParseAPI.GL: {  						GL_ALU = Mathf.Max (ALUFound' GL_ALU);  						break;  					}  					case ParseAPI.D3D: {  						D3D_ALU = Mathf.Max (ALUFound' D3D_ALU);  						break;  					}  					}  					break;  				}  				}  			}  			// Parse for TEX Counts  			if (line.Contains ("' TEX:")) {  				string subLine = line;  				subLine = subLine.Substring (subLine.IndexOf ("TEX:"));  				// Cut out the preliminary ALU listing  				subLine = subLine.Substring (subLine.IndexOf ("to ") + 3);  				// Grab the second value  				subLine = subLine.Split (" " [0]) [0];  				// Cut anything that snuck in after  				//Debug.Log("Tex Count - " + subLine);  				int TEXFound;  				int.TryParse (subLine' out TEXFound);  				switch (api) {  				case ParseAPI.GL: {  					GL_TEX = Mathf.Max (TEXFound' GL_TEX);  					break;  				}  				case ParseAPI.D3D: {  					D3D_TEX = Mathf.Max (TEXFound' D3D_TEX);  					break;  				}  				}  			}  		}  	}  }  catch (Exception e) {  	Debug.Log ("Shader parsing error " + e);  }  
Magic Number,StrumpyShaderEditor,InstructionCounter,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\GraphEditor\InstructionCounter.cs,CountInstructions,The following statement contains a magic number: using (StreamReader sr = new StreamReader (filePath)) {  	String line;  	while ((line = sr.ReadLine ()) != null) {  		// Set parse stages  		if (line.Contains ("Program \"vp\""))  			stage = ParseStage.Vertex;  		if (line.Contains ("Program \"fp\""))  			stage = ParseStage.Fragment;  		if (line.Contains ("opengl"))  			api = ParseAPI.GL;  		if (line.Contains ("d3d9"))  			api = ParseAPI.D3D;  		// Parse for the ALU Counts  		if (line.Contains ("ALU:")) {  			string subLine = line;  			subLine = subLine.Substring (subLine.IndexOf ("to ") + 3);  			//Debug.Log(subLine);  			int ALUFound;  			bool canParse = int.TryParse (subLine.Split (new char[2] {  				" " [0]'  				"'" [0]  			}) [0]' out ALUFound);  			if (!canParse)  				ALUFound = -1;  			// Shoddy catch for the 5ALU intermediary program  			if (ALUFound == 5)  				if (hitFive == true)  					ALUFound = -1;  			switch (stage) {  			case ParseStage.Vertex: {  				switch (api) {  				case ParseAPI.GL: {  					GL_V_ALU = Mathf.Max (ALUFound' GL_V_ALU);  					break;  				}  				case ParseAPI.D3D: {  					D3D_V_ALU = Mathf.Max (ALUFound' D3D_V_ALU);  					break;  				}  				}  				break;  			}  			case ParseStage.Fragment: {  				switch (api) {  				case ParseAPI.GL: {  					GL_ALU = Mathf.Max (ALUFound' GL_ALU);  					break;  				}  				case ParseAPI.D3D: {  					D3D_ALU = Mathf.Max (ALUFound' D3D_ALU);  					break;  				}  				}  				break;  			}  			}  		}  		// Parse for TEX Counts  		if (line.Contains ("' TEX:")) {  			string subLine = line;  			subLine = subLine.Substring (subLine.IndexOf ("TEX:"));  			// Cut out the preliminary ALU listing  			subLine = subLine.Substring (subLine.IndexOf ("to ") + 3);  			// Grab the second value  			subLine = subLine.Split (" " [0]) [0];  			// Cut anything that snuck in after  			//Debug.Log("Tex Count - " + subLine);  			int TEXFound;  			int.TryParse (subLine' out TEXFound);  			switch (api) {  			case ParseAPI.GL: {  				GL_TEX = Mathf.Max (TEXFound' GL_TEX);  				break;  			}  			case ParseAPI.D3D: {  				D3D_TEX = Mathf.Max (TEXFound' D3D_TEX);  				break;  			}  			}  		}  	}  }  
Magic Number,StrumpyShaderEditor,InstructionCounter,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\GraphEditor\InstructionCounter.cs,CountInstructions,The following statement contains a magic number: using (StreamReader sr = new StreamReader (filePath)) {  	String line;  	while ((line = sr.ReadLine ()) != null) {  		// Set parse stages  		if (line.Contains ("Program \"vp\""))  			stage = ParseStage.Vertex;  		if (line.Contains ("Program \"fp\""))  			stage = ParseStage.Fragment;  		if (line.Contains ("opengl"))  			api = ParseAPI.GL;  		if (line.Contains ("d3d9"))  			api = ParseAPI.D3D;  		// Parse for the ALU Counts  		if (line.Contains ("ALU:")) {  			string subLine = line;  			subLine = subLine.Substring (subLine.IndexOf ("to ") + 3);  			//Debug.Log(subLine);  			int ALUFound;  			bool canParse = int.TryParse (subLine.Split (new char[2] {  				" " [0]'  				"'" [0]  			}) [0]' out ALUFound);  			if (!canParse)  				ALUFound = -1;  			// Shoddy catch for the 5ALU intermediary program  			if (ALUFound == 5)  				if (hitFive == true)  					ALUFound = -1;  			switch (stage) {  			case ParseStage.Vertex: {  				switch (api) {  				case ParseAPI.GL: {  					GL_V_ALU = Mathf.Max (ALUFound' GL_V_ALU);  					break;  				}  				case ParseAPI.D3D: {  					D3D_V_ALU = Mathf.Max (ALUFound' D3D_V_ALU);  					break;  				}  				}  				break;  			}  			case ParseStage.Fragment: {  				switch (api) {  				case ParseAPI.GL: {  					GL_ALU = Mathf.Max (ALUFound' GL_ALU);  					break;  				}  				case ParseAPI.D3D: {  					D3D_ALU = Mathf.Max (ALUFound' D3D_ALU);  					break;  				}  				}  				break;  			}  			}  		}  		// Parse for TEX Counts  		if (line.Contains ("' TEX:")) {  			string subLine = line;  			subLine = subLine.Substring (subLine.IndexOf ("TEX:"));  			// Cut out the preliminary ALU listing  			subLine = subLine.Substring (subLine.IndexOf ("to ") + 3);  			// Grab the second value  			subLine = subLine.Split (" " [0]) [0];  			// Cut anything that snuck in after  			//Debug.Log("Tex Count - " + subLine);  			int TEXFound;  			int.TryParse (subLine' out TEXFound);  			switch (api) {  			case ParseAPI.GL: {  				GL_TEX = Mathf.Max (TEXFound' GL_TEX);  				break;  			}  			case ParseAPI.D3D: {  				D3D_TEX = Mathf.Max (TEXFound' D3D_TEX);  				break;  			}  			}  		}  	}  }  
Magic Number,StrumpyShaderEditor,InstructionCounter,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\GraphEditor\InstructionCounter.cs,CountInstructions,The following statement contains a magic number: using (StreamReader sr = new StreamReader (filePath)) {  	String line;  	while ((line = sr.ReadLine ()) != null) {  		// Set parse stages  		if (line.Contains ("Program \"vp\""))  			stage = ParseStage.Vertex;  		if (line.Contains ("Program \"fp\""))  			stage = ParseStage.Fragment;  		if (line.Contains ("opengl"))  			api = ParseAPI.GL;  		if (line.Contains ("d3d9"))  			api = ParseAPI.D3D;  		// Parse for the ALU Counts  		if (line.Contains ("ALU:")) {  			string subLine = line;  			subLine = subLine.Substring (subLine.IndexOf ("to ") + 3);  			//Debug.Log(subLine);  			int ALUFound;  			bool canParse = int.TryParse (subLine.Split (new char[2] {  				" " [0]'  				"'" [0]  			}) [0]' out ALUFound);  			if (!canParse)  				ALUFound = -1;  			// Shoddy catch for the 5ALU intermediary program  			if (ALUFound == 5)  				if (hitFive == true)  					ALUFound = -1;  			switch (stage) {  			case ParseStage.Vertex: {  				switch (api) {  				case ParseAPI.GL: {  					GL_V_ALU = Mathf.Max (ALUFound' GL_V_ALU);  					break;  				}  				case ParseAPI.D3D: {  					D3D_V_ALU = Mathf.Max (ALUFound' D3D_V_ALU);  					break;  				}  				}  				break;  			}  			case ParseStage.Fragment: {  				switch (api) {  				case ParseAPI.GL: {  					GL_ALU = Mathf.Max (ALUFound' GL_ALU);  					break;  				}  				case ParseAPI.D3D: {  					D3D_ALU = Mathf.Max (ALUFound' D3D_ALU);  					break;  				}  				}  				break;  			}  			}  		}  		// Parse for TEX Counts  		if (line.Contains ("' TEX:")) {  			string subLine = line;  			subLine = subLine.Substring (subLine.IndexOf ("TEX:"));  			// Cut out the preliminary ALU listing  			subLine = subLine.Substring (subLine.IndexOf ("to ") + 3);  			// Grab the second value  			subLine = subLine.Split (" " [0]) [0];  			// Cut anything that snuck in after  			//Debug.Log("Tex Count - " + subLine);  			int TEXFound;  			int.TryParse (subLine' out TEXFound);  			switch (api) {  			case ParseAPI.GL: {  				GL_TEX = Mathf.Max (TEXFound' GL_TEX);  				break;  			}  			case ParseAPI.D3D: {  				D3D_TEX = Mathf.Max (TEXFound' D3D_TEX);  				break;  			}  			}  		}  	}  }  
Magic Number,StrumpyShaderEditor,InstructionCounter,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\GraphEditor\InstructionCounter.cs,CountInstructions,The following statement contains a magic number: using (StreamReader sr = new StreamReader (filePath)) {  	String line;  	while ((line = sr.ReadLine ()) != null) {  		// Set parse stages  		if (line.Contains ("Program \"vp\""))  			stage = ParseStage.Vertex;  		if (line.Contains ("Program \"fp\""))  			stage = ParseStage.Fragment;  		if (line.Contains ("opengl"))  			api = ParseAPI.GL;  		if (line.Contains ("d3d9"))  			api = ParseAPI.D3D;  		// Parse for the ALU Counts  		if (line.Contains ("ALU:")) {  			string subLine = line;  			subLine = subLine.Substring (subLine.IndexOf ("to ") + 3);  			//Debug.Log(subLine);  			int ALUFound;  			bool canParse = int.TryParse (subLine.Split (new char[2] {  				" " [0]'  				"'" [0]  			}) [0]' out ALUFound);  			if (!canParse)  				ALUFound = -1;  			// Shoddy catch for the 5ALU intermediary program  			if (ALUFound == 5)  				if (hitFive == true)  					ALUFound = -1;  			switch (stage) {  			case ParseStage.Vertex: {  				switch (api) {  				case ParseAPI.GL: {  					GL_V_ALU = Mathf.Max (ALUFound' GL_V_ALU);  					break;  				}  				case ParseAPI.D3D: {  					D3D_V_ALU = Mathf.Max (ALUFound' D3D_V_ALU);  					break;  				}  				}  				break;  			}  			case ParseStage.Fragment: {  				switch (api) {  				case ParseAPI.GL: {  					GL_ALU = Mathf.Max (ALUFound' GL_ALU);  					break;  				}  				case ParseAPI.D3D: {  					D3D_ALU = Mathf.Max (ALUFound' D3D_ALU);  					break;  				}  				}  				break;  			}  			}  		}  		// Parse for TEX Counts  		if (line.Contains ("' TEX:")) {  			string subLine = line;  			subLine = subLine.Substring (subLine.IndexOf ("TEX:"));  			// Cut out the preliminary ALU listing  			subLine = subLine.Substring (subLine.IndexOf ("to ") + 3);  			// Grab the second value  			subLine = subLine.Split (" " [0]) [0];  			// Cut anything that snuck in after  			//Debug.Log("Tex Count - " + subLine);  			int TEXFound;  			int.TryParse (subLine' out TEXFound);  			switch (api) {  			case ParseAPI.GL: {  				GL_TEX = Mathf.Max (TEXFound' GL_TEX);  				break;  			}  			case ParseAPI.D3D: {  				D3D_TEX = Mathf.Max (TEXFound' D3D_TEX);  				break;  			}  			}  		}  	}  }  
Magic Number,StrumpyShaderEditor,InstructionCounter,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\GraphEditor\InstructionCounter.cs,CountInstructions,The following statement contains a magic number: while ((line = sr.ReadLine ()) != null) {  	// Set parse stages  	if (line.Contains ("Program \"vp\""))  		stage = ParseStage.Vertex;  	if (line.Contains ("Program \"fp\""))  		stage = ParseStage.Fragment;  	if (line.Contains ("opengl"))  		api = ParseAPI.GL;  	if (line.Contains ("d3d9"))  		api = ParseAPI.D3D;  	// Parse for the ALU Counts  	if (line.Contains ("ALU:")) {  		string subLine = line;  		subLine = subLine.Substring (subLine.IndexOf ("to ") + 3);  		//Debug.Log(subLine);  		int ALUFound;  		bool canParse = int.TryParse (subLine.Split (new char[2] {  			" " [0]'  			"'" [0]  		}) [0]' out ALUFound);  		if (!canParse)  			ALUFound = -1;  		// Shoddy catch for the 5ALU intermediary program  		if (ALUFound == 5)  			if (hitFive == true)  				ALUFound = -1;  		switch (stage) {  		case ParseStage.Vertex: {  			switch (api) {  			case ParseAPI.GL: {  				GL_V_ALU = Mathf.Max (ALUFound' GL_V_ALU);  				break;  			}  			case ParseAPI.D3D: {  				D3D_V_ALU = Mathf.Max (ALUFound' D3D_V_ALU);  				break;  			}  			}  			break;  		}  		case ParseStage.Fragment: {  			switch (api) {  			case ParseAPI.GL: {  				GL_ALU = Mathf.Max (ALUFound' GL_ALU);  				break;  			}  			case ParseAPI.D3D: {  				D3D_ALU = Mathf.Max (ALUFound' D3D_ALU);  				break;  			}  			}  			break;  		}  		}  	}  	// Parse for TEX Counts  	if (line.Contains ("' TEX:")) {  		string subLine = line;  		subLine = subLine.Substring (subLine.IndexOf ("TEX:"));  		// Cut out the preliminary ALU listing  		subLine = subLine.Substring (subLine.IndexOf ("to ") + 3);  		// Grab the second value  		subLine = subLine.Split (" " [0]) [0];  		// Cut anything that snuck in after  		//Debug.Log("Tex Count - " + subLine);  		int TEXFound;  		int.TryParse (subLine' out TEXFound);  		switch (api) {  		case ParseAPI.GL: {  			GL_TEX = Mathf.Max (TEXFound' GL_TEX);  			break;  		}  		case ParseAPI.D3D: {  			D3D_TEX = Mathf.Max (TEXFound' D3D_TEX);  			break;  		}  		}  	}  }  
Magic Number,StrumpyShaderEditor,InstructionCounter,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\GraphEditor\InstructionCounter.cs,CountInstructions,The following statement contains a magic number: while ((line = sr.ReadLine ()) != null) {  	// Set parse stages  	if (line.Contains ("Program \"vp\""))  		stage = ParseStage.Vertex;  	if (line.Contains ("Program \"fp\""))  		stage = ParseStage.Fragment;  	if (line.Contains ("opengl"))  		api = ParseAPI.GL;  	if (line.Contains ("d3d9"))  		api = ParseAPI.D3D;  	// Parse for the ALU Counts  	if (line.Contains ("ALU:")) {  		string subLine = line;  		subLine = subLine.Substring (subLine.IndexOf ("to ") + 3);  		//Debug.Log(subLine);  		int ALUFound;  		bool canParse = int.TryParse (subLine.Split (new char[2] {  			" " [0]'  			"'" [0]  		}) [0]' out ALUFound);  		if (!canParse)  			ALUFound = -1;  		// Shoddy catch for the 5ALU intermediary program  		if (ALUFound == 5)  			if (hitFive == true)  				ALUFound = -1;  		switch (stage) {  		case ParseStage.Vertex: {  			switch (api) {  			case ParseAPI.GL: {  				GL_V_ALU = Mathf.Max (ALUFound' GL_V_ALU);  				break;  			}  			case ParseAPI.D3D: {  				D3D_V_ALU = Mathf.Max (ALUFound' D3D_V_ALU);  				break;  			}  			}  			break;  		}  		case ParseStage.Fragment: {  			switch (api) {  			case ParseAPI.GL: {  				GL_ALU = Mathf.Max (ALUFound' GL_ALU);  				break;  			}  			case ParseAPI.D3D: {  				D3D_ALU = Mathf.Max (ALUFound' D3D_ALU);  				break;  			}  			}  			break;  		}  		}  	}  	// Parse for TEX Counts  	if (line.Contains ("' TEX:")) {  		string subLine = line;  		subLine = subLine.Substring (subLine.IndexOf ("TEX:"));  		// Cut out the preliminary ALU listing  		subLine = subLine.Substring (subLine.IndexOf ("to ") + 3);  		// Grab the second value  		subLine = subLine.Split (" " [0]) [0];  		// Cut anything that snuck in after  		//Debug.Log("Tex Count - " + subLine);  		int TEXFound;  		int.TryParse (subLine' out TEXFound);  		switch (api) {  		case ParseAPI.GL: {  			GL_TEX = Mathf.Max (TEXFound' GL_TEX);  			break;  		}  		case ParseAPI.D3D: {  			D3D_TEX = Mathf.Max (TEXFound' D3D_TEX);  			break;  		}  		}  	}  }  
Magic Number,StrumpyShaderEditor,InstructionCounter,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\GraphEditor\InstructionCounter.cs,CountInstructions,The following statement contains a magic number: while ((line = sr.ReadLine ()) != null) {  	// Set parse stages  	if (line.Contains ("Program \"vp\""))  		stage = ParseStage.Vertex;  	if (line.Contains ("Program \"fp\""))  		stage = ParseStage.Fragment;  	if (line.Contains ("opengl"))  		api = ParseAPI.GL;  	if (line.Contains ("d3d9"))  		api = ParseAPI.D3D;  	// Parse for the ALU Counts  	if (line.Contains ("ALU:")) {  		string subLine = line;  		subLine = subLine.Substring (subLine.IndexOf ("to ") + 3);  		//Debug.Log(subLine);  		int ALUFound;  		bool canParse = int.TryParse (subLine.Split (new char[2] {  			" " [0]'  			"'" [0]  		}) [0]' out ALUFound);  		if (!canParse)  			ALUFound = -1;  		// Shoddy catch for the 5ALU intermediary program  		if (ALUFound == 5)  			if (hitFive == true)  				ALUFound = -1;  		switch (stage) {  		case ParseStage.Vertex: {  			switch (api) {  			case ParseAPI.GL: {  				GL_V_ALU = Mathf.Max (ALUFound' GL_V_ALU);  				break;  			}  			case ParseAPI.D3D: {  				D3D_V_ALU = Mathf.Max (ALUFound' D3D_V_ALU);  				break;  			}  			}  			break;  		}  		case ParseStage.Fragment: {  			switch (api) {  			case ParseAPI.GL: {  				GL_ALU = Mathf.Max (ALUFound' GL_ALU);  				break;  			}  			case ParseAPI.D3D: {  				D3D_ALU = Mathf.Max (ALUFound' D3D_ALU);  				break;  			}  			}  			break;  		}  		}  	}  	// Parse for TEX Counts  	if (line.Contains ("' TEX:")) {  		string subLine = line;  		subLine = subLine.Substring (subLine.IndexOf ("TEX:"));  		// Cut out the preliminary ALU listing  		subLine = subLine.Substring (subLine.IndexOf ("to ") + 3);  		// Grab the second value  		subLine = subLine.Split (" " [0]) [0];  		// Cut anything that snuck in after  		//Debug.Log("Tex Count - " + subLine);  		int TEXFound;  		int.TryParse (subLine' out TEXFound);  		switch (api) {  		case ParseAPI.GL: {  			GL_TEX = Mathf.Max (TEXFound' GL_TEX);  			break;  		}  		case ParseAPI.D3D: {  			D3D_TEX = Mathf.Max (TEXFound' D3D_TEX);  			break;  		}  		}  	}  }  
Magic Number,StrumpyShaderEditor,InstructionCounter,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\GraphEditor\InstructionCounter.cs,CountInstructions,The following statement contains a magic number: while ((line = sr.ReadLine ()) != null) {  	// Set parse stages  	if (line.Contains ("Program \"vp\""))  		stage = ParseStage.Vertex;  	if (line.Contains ("Program \"fp\""))  		stage = ParseStage.Fragment;  	if (line.Contains ("opengl"))  		api = ParseAPI.GL;  	if (line.Contains ("d3d9"))  		api = ParseAPI.D3D;  	// Parse for the ALU Counts  	if (line.Contains ("ALU:")) {  		string subLine = line;  		subLine = subLine.Substring (subLine.IndexOf ("to ") + 3);  		//Debug.Log(subLine);  		int ALUFound;  		bool canParse = int.TryParse (subLine.Split (new char[2] {  			" " [0]'  			"'" [0]  		}) [0]' out ALUFound);  		if (!canParse)  			ALUFound = -1;  		// Shoddy catch for the 5ALU intermediary program  		if (ALUFound == 5)  			if (hitFive == true)  				ALUFound = -1;  		switch (stage) {  		case ParseStage.Vertex: {  			switch (api) {  			case ParseAPI.GL: {  				GL_V_ALU = Mathf.Max (ALUFound' GL_V_ALU);  				break;  			}  			case ParseAPI.D3D: {  				D3D_V_ALU = Mathf.Max (ALUFound' D3D_V_ALU);  				break;  			}  			}  			break;  		}  		case ParseStage.Fragment: {  			switch (api) {  			case ParseAPI.GL: {  				GL_ALU = Mathf.Max (ALUFound' GL_ALU);  				break;  			}  			case ParseAPI.D3D: {  				D3D_ALU = Mathf.Max (ALUFound' D3D_ALU);  				break;  			}  			}  			break;  		}  		}  	}  	// Parse for TEX Counts  	if (line.Contains ("' TEX:")) {  		string subLine = line;  		subLine = subLine.Substring (subLine.IndexOf ("TEX:"));  		// Cut out the preliminary ALU listing  		subLine = subLine.Substring (subLine.IndexOf ("to ") + 3);  		// Grab the second value  		subLine = subLine.Split (" " [0]) [0];  		// Cut anything that snuck in after  		//Debug.Log("Tex Count - " + subLine);  		int TEXFound;  		int.TryParse (subLine' out TEXFound);  		switch (api) {  		case ParseAPI.GL: {  			GL_TEX = Mathf.Max (TEXFound' GL_TEX);  			break;  		}  		case ParseAPI.D3D: {  			D3D_TEX = Mathf.Max (TEXFound' D3D_TEX);  			break;  		}  		}  	}  }  
Magic Number,StrumpyShaderEditor,InstructionCounter,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\GraphEditor\InstructionCounter.cs,CountInstructions,The following statement contains a magic number: if (line.Contains ("ALU:")) {  	string subLine = line;  	subLine = subLine.Substring (subLine.IndexOf ("to ") + 3);  	//Debug.Log(subLine);  	int ALUFound;  	bool canParse = int.TryParse (subLine.Split (new char[2] {  		" " [0]'  		"'" [0]  	}) [0]' out ALUFound);  	if (!canParse)  		ALUFound = -1;  	// Shoddy catch for the 5ALU intermediary program  	if (ALUFound == 5)  		if (hitFive == true)  			ALUFound = -1;  	switch (stage) {  	case ParseStage.Vertex: {  		switch (api) {  		case ParseAPI.GL: {  			GL_V_ALU = Mathf.Max (ALUFound' GL_V_ALU);  			break;  		}  		case ParseAPI.D3D: {  			D3D_V_ALU = Mathf.Max (ALUFound' D3D_V_ALU);  			break;  		}  		}  		break;  	}  	case ParseStage.Fragment: {  		switch (api) {  		case ParseAPI.GL: {  			GL_ALU = Mathf.Max (ALUFound' GL_ALU);  			break;  		}  		case ParseAPI.D3D: {  			D3D_ALU = Mathf.Max (ALUFound' D3D_ALU);  			break;  		}  		}  		break;  	}  	}  }  
Magic Number,StrumpyShaderEditor,InstructionCounter,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\GraphEditor\InstructionCounter.cs,CountInstructions,The following statement contains a magic number: if (line.Contains ("ALU:")) {  	string subLine = line;  	subLine = subLine.Substring (subLine.IndexOf ("to ") + 3);  	//Debug.Log(subLine);  	int ALUFound;  	bool canParse = int.TryParse (subLine.Split (new char[2] {  		" " [0]'  		"'" [0]  	}) [0]' out ALUFound);  	if (!canParse)  		ALUFound = -1;  	// Shoddy catch for the 5ALU intermediary program  	if (ALUFound == 5)  		if (hitFive == true)  			ALUFound = -1;  	switch (stage) {  	case ParseStage.Vertex: {  		switch (api) {  		case ParseAPI.GL: {  			GL_V_ALU = Mathf.Max (ALUFound' GL_V_ALU);  			break;  		}  		case ParseAPI.D3D: {  			D3D_V_ALU = Mathf.Max (ALUFound' D3D_V_ALU);  			break;  		}  		}  		break;  	}  	case ParseStage.Fragment: {  		switch (api) {  		case ParseAPI.GL: {  			GL_ALU = Mathf.Max (ALUFound' GL_ALU);  			break;  		}  		case ParseAPI.D3D: {  			D3D_ALU = Mathf.Max (ALUFound' D3D_ALU);  			break;  		}  		}  		break;  	}  	}  }  
Magic Number,StrumpyShaderEditor,InstructionCounter,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\GraphEditor\InstructionCounter.cs,CountInstructions,The following statement contains a magic number: if (line.Contains ("ALU:")) {  	string subLine = line;  	subLine = subLine.Substring (subLine.IndexOf ("to ") + 3);  	//Debug.Log(subLine);  	int ALUFound;  	bool canParse = int.TryParse (subLine.Split (new char[2] {  		" " [0]'  		"'" [0]  	}) [0]' out ALUFound);  	if (!canParse)  		ALUFound = -1;  	// Shoddy catch for the 5ALU intermediary program  	if (ALUFound == 5)  		if (hitFive == true)  			ALUFound = -1;  	switch (stage) {  	case ParseStage.Vertex: {  		switch (api) {  		case ParseAPI.GL: {  			GL_V_ALU = Mathf.Max (ALUFound' GL_V_ALU);  			break;  		}  		case ParseAPI.D3D: {  			D3D_V_ALU = Mathf.Max (ALUFound' D3D_V_ALU);  			break;  		}  		}  		break;  	}  	case ParseStage.Fragment: {  		switch (api) {  		case ParseAPI.GL: {  			GL_ALU = Mathf.Max (ALUFound' GL_ALU);  			break;  		}  		case ParseAPI.D3D: {  			D3D_ALU = Mathf.Max (ALUFound' D3D_ALU);  			break;  		}  		}  		break;  	}  	}  }  
Magic Number,StrumpyShaderEditor,InstructionCounter,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\GraphEditor\InstructionCounter.cs,CountInstructions,The following statement contains a magic number: subLine = subLine.Substring (subLine.IndexOf ("to ") + 3);  
Magic Number,StrumpyShaderEditor,InstructionCounter,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\GraphEditor\InstructionCounter.cs,CountInstructions,The following statement contains a magic number: if (ALUFound == 5)  	if (hitFive == true)  		ALUFound = -1;  
Magic Number,StrumpyShaderEditor,InstructionCounter,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\GraphEditor\InstructionCounter.cs,CountInstructions,The following statement contains a magic number: if (line.Contains ("' TEX:")) {  	string subLine = line;  	subLine = subLine.Substring (subLine.IndexOf ("TEX:"));  	// Cut out the preliminary ALU listing  	subLine = subLine.Substring (subLine.IndexOf ("to ") + 3);  	// Grab the second value  	subLine = subLine.Split (" " [0]) [0];  	// Cut anything that snuck in after  	//Debug.Log("Tex Count - " + subLine);  	int TEXFound;  	int.TryParse (subLine' out TEXFound);  	switch (api) {  	case ParseAPI.GL: {  		GL_TEX = Mathf.Max (TEXFound' GL_TEX);  		break;  	}  	case ParseAPI.D3D: {  		D3D_TEX = Mathf.Max (TEXFound' D3D_TEX);  		break;  	}  	}  }  
Magic Number,StrumpyShaderEditor,InstructionCounter,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\GraphEditor\InstructionCounter.cs,CountInstructions,The following statement contains a magic number: subLine = subLine.Substring (subLine.IndexOf ("to ") + 3);  
Magic Number,StrumpyShaderEditor,NodeDrawer,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\GraphEditor\NodeDrawer.cs,GetAbsoluteInputChannelPosition,The following statement contains a magic number: result += new Vector2 (inputChannel.Position.width / 2' inputChannel.Position.height / 2);  
Magic Number,StrumpyShaderEditor,NodeDrawer,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\GraphEditor\NodeDrawer.cs,GetAbsoluteInputChannelPosition,The following statement contains a magic number: result += new Vector2 (inputChannel.Position.width / 2' inputChannel.Position.height / 2);  
Magic Number,StrumpyShaderEditor,NodeDrawer,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\GraphEditor\NodeDrawer.cs,GetAbsoluteOutputChannelPosition,The following statement contains a magic number: result += new Vector2 (outputChannel.Position.width / 2' outputChannel.Position.height / 2);  
Magic Number,StrumpyShaderEditor,NodeDrawer,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\GraphEditor\NodeDrawer.cs,GetAbsoluteOutputChannelPosition,The following statement contains a magic number: result += new Vector2 (outputChannel.Position.width / 2' outputChannel.Position.height / 2);  
Magic Number,StrumpyShaderEditor,NodeEditor,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\GraphEditor\NodeEditor.cs,OnGUI,The following statement contains a magic number: GUI.Label (new Rect (5' 0' 95' 45)' new GUIContent (_instructionCountDetails' _instructionCountTooltip));  
Magic Number,StrumpyShaderEditor,NodeEditor,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\GraphEditor\NodeEditor.cs,OnGUI,The following statement contains a magic number: GUI.Label (new Rect (5' 0' 95' 45)' new GUIContent (_instructionCountDetails' _instructionCountTooltip));  
Magic Number,StrumpyShaderEditor,NodeEditor,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\GraphEditor\NodeEditor.cs,OnGUI,The following statement contains a magic number: GUI.Label (new Rect (5' 0' 95' 45)' new GUIContent (_instructionCountDetails' _instructionCountTooltip));  
Magic Number,StrumpyShaderEditor,NodeEditor,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\GraphEditor\NodeEditor.cs,OnGUI,The following statement contains a magic number: _drawArea = new Rect (0' 0' Screen.width - 300' Screen.height - 23);  
Magic Number,StrumpyShaderEditor,NodeEditor,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\GraphEditor\NodeEditor.cs,OnGUI,The following statement contains a magic number: _drawArea = new Rect (0' 0' Screen.width - 300' Screen.height - 23);  
Magic Number,StrumpyShaderEditor,NodeEditor,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\GraphEditor\NodeEditor.cs,OnGUI,The following statement contains a magic number: _detailsBox = new Rect (Screen.width - 300' 0' 300' Screen.height - 40);  
Magic Number,StrumpyShaderEditor,NodeEditor,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\GraphEditor\NodeEditor.cs,OnGUI,The following statement contains a magic number: _detailsBox = new Rect (Screen.width - 300' 0' 300' Screen.height - 40);  
Magic Number,StrumpyShaderEditor,NodeEditor,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\GraphEditor\NodeEditor.cs,OnGUI,The following statement contains a magic number: _detailsBox = new Rect (Screen.width - 300' 0' 300' Screen.height - 40);  
Magic Number,StrumpyShaderEditor,NodeEditor,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\GraphEditor\NodeEditor.cs,OnGUI,The following statement contains a magic number: _optionsBox = new Rect (Screen.width - 300' Screen.height - 40' 300' 25);  
Magic Number,StrumpyShaderEditor,NodeEditor,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\GraphEditor\NodeEditor.cs,OnGUI,The following statement contains a magic number: _optionsBox = new Rect (Screen.width - 300' Screen.height - 40' 300' 25);  
Magic Number,StrumpyShaderEditor,NodeEditor,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\GraphEditor\NodeEditor.cs,OnGUI,The following statement contains a magic number: _optionsBox = new Rect (Screen.width - 300' Screen.height - 40' 300' 25);  
Magic Number,StrumpyShaderEditor,NodeEditor,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\GraphEditor\NodeEditor.cs,OnGUI,The following statement contains a magic number: _optionsBox = new Rect (Screen.width - 300' Screen.height - 40' 300' 25);  
Magic Number,StrumpyShaderEditor,NodeEditor,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\GraphEditor\NodeEditor.cs,OnGUI,The following statement contains a magic number: EditorGUI.Toggle (new Rect (-100' -100' 1' 1)' false);  
Magic Number,StrumpyShaderEditor,NodeEditor,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\GraphEditor\NodeEditor.cs,OnGUI,The following statement contains a magic number: EditorGUI.Toggle (new Rect (-100' -100' 1' 1)' false);  
Magic Number,StrumpyShaderEditor,NodeEditor,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\GraphEditor\NodeEditor.cs,OnGUI,The following statement contains a magic number: GUI.skin.label.fontSize = 30;  
Magic Number,StrumpyShaderEditor,NodeEditor,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\GraphEditor\NodeEditor.cs,OnGUI,The following statement contains a magic number: GUILayout.Space (10);  
Magic Number,StrumpyShaderEditor,NodeEditor,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\GraphEditor\NodeEditor.cs,HandleEvents,The following statement contains a magic number: switch (Event.current.type) {  case EventType.DragUpdated:  case EventType.DragPerform: {  	if (position.Contains (_currentMousePosition)) {  		var path = DragAndDrop.paths [0];  		if (path.EndsWith ("sgraph")) {  			DragAndDrop.visualMode = DragAndDropVisualMode.Copy;  			if (Event.current.type == EventType.dragPerform) {  				_shouldLoadGraph = true;  				_overrideLoadPath = path;  				_lastGraphPath = path;  				_markDirtyOnLoad = true;  			}  			Event.current.Use ();  		}  	}  	break;  }  case EventType.MouseDown: {  	if (Event.current.button == 0) {  		if (LeftMouseDown ()) {  			Event.current.Use ();  			return;  		}  	}  	break;  }  case EventType.ContextClick: {  	if (RightMouseDown ()) {  		Event.current.Use ();  		return;  	}  	break;  }  //Handle drag  case EventType.MouseDrag: {  	_currentMousePosition.x = Event.current.mousePosition.x;  	_currentMousePosition.y = Event.current.mousePosition.y;  	//If Left click drag...  	if (Event.current.button == 0) {  		if (LeftMouseDragged ()) {  			Event.current.Use ();  		}  	}  	if (Event.current.button == 2) {  		_middleMouseDrag = true;  		_selectedGraph.CurrentSubGraph.DrawOffset += Event.current.delta;  		Event.current.Use ();  	}  	break;  }  case EventType.MouseUp: {  	//Mouse button released' unmark hot  	_selectedGraph.UnmarkSelectedHot ();  	if (_focusChanged) {  		_focusChangedUpdate = true;  		_focusChanged = false;  	}  	//Selection box  	if (_doingSelectBox) {  		_doingSelectBox = false;  		if (_selectedGraph.Select (GetSelectionArea ()' Event.current.modifiers == EventModifiers.Shift)) {  			NextSelectedNode = _selectedGraph.FirstSelected;  			_updateSelection = true;  			MarkDirty ();  		}  		Event.current.Use ();  	}  	if (_movingNodes) {  		_movingNodes = false;  		MarkDirty ();  		Event.current.Use ();  	}  	if (_middleMouseDrag) {  		_middleMouseDrag = false;  		MarkDirty ();  		Event.current.Use ();  	}  	break;  }  case EventType.Layout: {  	if (_nextGraph != null && _nextGraph != _selectedGraph) {  		_selectedGraph = _nextGraph;  		if (_markDirtyOnLoad) {  			MarkDirty ();  			_markDirtyOnLoad = false;  		}  		_selectedNode = null;  	}  	if (_selectedGraph.CurrentSubGraphType != _currentSubGraphType) {  		_selectedGraph.CurrentSubGraphType = _currentSubGraphType;  		_selectedGraph.Deselect ();  		MarkDirty ();  		_selectedNode = null;  	}  	if (_updateSelection) {  		_focusChanged = true;  		_selectedNode = NextSelectedNode;  		_updateSelection = false;  	}  	break;  }  case EventType.ValidateCommand: {  	if (Event.current.commandName == "Copy" || Event.current.commandName == "Paste" || Event.current.commandName == "Duplicate" || Event.current.commandName == "SelectAll") {  		Event.current.Use ();  	}  	break;  }  case EventType.ExecuteCommand: {  	if (Event.current.commandName == "Copy") {  		CopySelectedNodes ();  		Event.current.Use ();  	}  	if (Event.current.commandName == "Paste") {  		PasteNodes ();  		Event.current.Use ();  	}  	if (Event.current.commandName == "Duplicate") {  		CopySelectedNodes ();  		PasteNodes ();  		MarkDirty ();  		Event.current.Use ();  	}  	if (Event.current.commandName == "SelectAll") {  		_selectedGraph.SelectAll ();  		NextSelectedNode = _selectedGraph.FirstSelected;  		_updateSelection = true;  		MarkDirty ();  		Event.current.Use ();  	}  	break;  }  }  
Magic Number,StrumpyShaderEditor,NodeEditor,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\GraphEditor\NodeEditor.cs,HandleEvents,The following statement contains a magic number: if (Event.current.button == 2) {  	_middleMouseDrag = true;  	_selectedGraph.CurrentSubGraph.DrawOffset += Event.current.delta;  	Event.current.Use ();  }  
Magic Number,StrumpyShaderEditor,NodeEditor,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\GraphEditor\NodeEditor.cs,DrawSettings,The following statement contains a magic number: GUILayout.BeginArea (new Rect (_detailsBox.x + 5' _detailsBox.y + 5' _detailsBox.width - 10' 25));  
Magic Number,StrumpyShaderEditor,NodeEditor,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\GraphEditor\NodeEditor.cs,DrawSettings,The following statement contains a magic number: GUILayout.BeginArea (new Rect (_detailsBox.x + 5' _detailsBox.y + 5' _detailsBox.width - 10' 25));  
Magic Number,StrumpyShaderEditor,NodeEditor,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\GraphEditor\NodeEditor.cs,DrawSettings,The following statement contains a magic number: GUILayout.BeginArea (new Rect (_detailsBox.x + 5' _detailsBox.y + 5' _detailsBox.width - 10' 25));  
Magic Number,StrumpyShaderEditor,NodeEditor,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\GraphEditor\NodeEditor.cs,DrawSettings,The following statement contains a magic number: GUILayout.BeginArea (new Rect (_detailsBox.x + 5' _detailsBox.y + 5' _detailsBox.width - 10' 25));  
Magic Number,StrumpyShaderEditor,NodeEditor,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\GraphEditor\NodeEditor.cs,DrawSettings,The following statement contains a magic number: if (GUILayout.Button (setContent [2]' settings))  	_currentSettings = SelectedSettings.Settings;  
Magic Number,StrumpyShaderEditor,NodeEditor,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\GraphEditor\NodeEditor.cs,DrawSettings,The following statement contains a magic number: if (GUILayout.Button (setContent [3]' nodes))  	_currentSettings = SelectedSettings.Nodes;  
Magic Number,StrumpyShaderEditor,NodeEditor,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\GraphEditor\NodeEditor.cs,DrawSettings,The following statement contains a magic number: GUILayout.BeginArea (new Rect (_detailsBox.x' _detailsBox.y + 25' _detailsBox.width' _detailsBox.height - 30));  
Magic Number,StrumpyShaderEditor,NodeEditor,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\GraphEditor\NodeEditor.cs,DrawSettings,The following statement contains a magic number: GUILayout.BeginArea (new Rect (_detailsBox.x' _detailsBox.y + 25' _detailsBox.width' _detailsBox.height - 30));  
Magic Number,StrumpyShaderEditor,NodeEditor,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\GraphEditor\NodeEditor.cs,DrawSettings,The following statement contains a magic number: _optionsScrollPosition = GUILayout.BeginScrollView (_optionsScrollPosition' GUILayout.Width (_detailsBox.width)' GUILayout.Height (_detailsBox.height - 30));  
Magic Number,StrumpyShaderEditor,PreviewRenderer,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\GraphEditor\PreviewRenderer.cs,Render,The following statement contains a magic number: if (material.HasProperty ("_EditorTime")) {  	var vTime = new Vector4 (time / 20' time' time * 2' time * 3);  	material.SetVector ("_EditorTime"' vTime);  }  
Magic Number,StrumpyShaderEditor,PreviewRenderer,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\GraphEditor\PreviewRenderer.cs,Render,The following statement contains a magic number: if (material.HasProperty ("_EditorTime")) {  	var vTime = new Vector4 (time / 20' time' time * 2' time * 3);  	material.SetVector ("_EditorTime"' vTime);  }  
Magic Number,StrumpyShaderEditor,PreviewRenderer,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\GraphEditor\PreviewRenderer.cs,Render,The following statement contains a magic number: if (material.HasProperty ("_EditorTime")) {  	var vTime = new Vector4 (time / 20' time' time * 2' time * 3);  	material.SetVector ("_EditorTime"' vTime);  }  
Magic Number,StrumpyShaderEditor,PreviewWindowInternal,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\GraphEditor\PreviewWindowInternal.cs,Initialize,The following statement contains a magic number: for (var i = 0; i < 2; i++) {  	var l = EditorUtility.CreateGameObjectWithHideFlags ("PreRenderLight"' HideFlags.HideAndDontSave' new[] {  		typeof(Light)  	}).GetComponent<Light> ();  	l.type = LightType.Directional;  	l.intensity = 0.5f;  	l.enabled = false;  	lights.Add (l);  }  
Magic Number,StrumpyShaderEditor,PreviewWindowInternal,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\GraphEditor\PreviewWindowInternal.cs,UpdatePreviewTexture,The following statement contains a magic number: _previewTexture = RenderTexture.GetTemporary ((int)position.width' (int)position.height - 40' 24' RenderTextureFormat.ARGB32);  
Magic Number,StrumpyShaderEditor,PreviewWindowInternal,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\GraphEditor\PreviewWindowInternal.cs,UpdatePreviewTexture,The following statement contains a magic number: _previewTexture = RenderTexture.GetTemporary ((int)position.width' (int)position.height - 40' 24' RenderTextureFormat.ARGB32);  
Magic Number,StrumpyShaderEditor,PreviewWindowInternal,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\GraphEditor\PreviewWindowInternal.cs,OnGUI,The following statement contains a magic number: if (_parent.ShaderNeedsUpdate ()) {  	GUILayout.BeginArea (new Rect (0' 0' (int)position.width' (int)position.height - 40));  	GUILayout.BeginHorizontal ();  	var oColor = GUI.color;  	// Cache old content color  	GUI.color = Color.red;  	// Make the warning red  	var oldFontSize = GUI.skin.label.fontSize;  	GUI.skin.label.fontSize = 20;  	GUILayout.FlexibleSpace ();  	// Flexible space (ensures buttohns don't move)  	GUILayout.Label ("Shader Needs Updating");  	// Draw the warning  	GUILayout.FlexibleSpace ();  	GUI.skin.label.fontSize = oldFontSize;  	GUILayout.EndHorizontal ();  	GUILayout.EndArea ();  	GUI.color = oColor;  	// Revert the color  }  
Magic Number,StrumpyShaderEditor,PreviewWindowInternal,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\GraphEditor\PreviewWindowInternal.cs,OnGUI,The following statement contains a magic number: if (_parent.ShaderNeedsUpdate ()) {  	GUILayout.BeginArea (new Rect (0' 0' (int)position.width' (int)position.height - 40));  	GUILayout.BeginHorizontal ();  	var oColor = GUI.color;  	// Cache old content color  	GUI.color = Color.red;  	// Make the warning red  	var oldFontSize = GUI.skin.label.fontSize;  	GUI.skin.label.fontSize = 20;  	GUILayout.FlexibleSpace ();  	// Flexible space (ensures buttohns don't move)  	GUILayout.Label ("Shader Needs Updating");  	// Draw the warning  	GUILayout.FlexibleSpace ();  	GUI.skin.label.fontSize = oldFontSize;  	GUILayout.EndHorizontal ();  	GUILayout.EndArea ();  	GUI.color = oColor;  	// Revert the color  }  
Magic Number,StrumpyShaderEditor,PreviewWindowInternal,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\GraphEditor\PreviewWindowInternal.cs,OnGUI,The following statement contains a magic number: GUILayout.BeginArea (new Rect (0' 0' (int)position.width' (int)position.height - 40));  
Magic Number,StrumpyShaderEditor,PreviewWindowInternal,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\GraphEditor\PreviewWindowInternal.cs,OnGUI,The following statement contains a magic number: GUI.skin.label.fontSize = 20;  
Magic Number,StrumpyShaderEditor,PreviewWindowInternal,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\GraphEditor\PreviewWindowInternal.cs,Update,The following statement contains a magic number: if (DateTime.Now > _lastRenderTime + new TimeSpan (0' 0' 0' 0' 33)) {  	if (position.width != _previewTexture.width || position.height != _previewTexture.height) {  		UpdatePreviewTexture ();  	}  	_lastRenderTime = DateTime.Now;  	UpdateMaterial ();  	_renderer.Render (_previewMesh' Vector3.zero' Quaternion.identity' _previewCamera' _previewLights' new Color (0.1f' 0.1f' 0.1f' 0f)' PreviewMaterial' _previewTexture' _drawBackground);  	Repaint ();  }  
Magic Number,StrumpyShaderEditor,PreviewWindowInternal,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\GraphEditor\PreviewWindowInternal.cs,ClampAngle,The following statement contains a magic number: while (angle < -360)  	angle += 360;  
Magic Number,StrumpyShaderEditor,PreviewWindowInternal,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\GraphEditor\PreviewWindowInternal.cs,ClampAngle,The following statement contains a magic number: while (angle < -360)  	angle += 360;  
Magic Number,StrumpyShaderEditor,PreviewWindowInternal,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\GraphEditor\PreviewWindowInternal.cs,ClampAngle,The following statement contains a magic number: angle += 360;  
Magic Number,StrumpyShaderEditor,PreviewWindowInternal,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\GraphEditor\PreviewWindowInternal.cs,ClampAngle,The following statement contains a magic number: while (angle > 360)  	angle -= 360;  
Magic Number,StrumpyShaderEditor,PreviewWindowInternal,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\GraphEditor\PreviewWindowInternal.cs,ClampAngle,The following statement contains a magic number: while (angle > 360)  	angle -= 360;  
Magic Number,StrumpyShaderEditor,PreviewWindowInternal,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\GraphEditor\PreviewWindowInternal.cs,ClampAngle,The following statement contains a magic number: angle -= 360;  
Magic Number,StrumpyShaderEditor,SubGraph,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\Graph\Graphs\SubGraph.cs,Initialize,The following statement contains a magic number: if (updateDrawPos) {  	var desiredPosition = Vector2.zero;  	desiredPosition.x = 10;  	desiredPosition.y = screenDimensions.height / 4;  	DrawOffset = desiredPosition - masterPos;  }  
Magic Number,StrumpyShaderEditor,SubGraph,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\Graph\Graphs\SubGraph.cs,Initialize,The following statement contains a magic number: if (updateDrawPos) {  	var desiredPosition = Vector2.zero;  	desiredPosition.x = 10;  	desiredPosition.y = screenDimensions.height / 4;  	DrawOffset = desiredPosition - masterPos;  }  
Magic Number,StrumpyShaderEditor,SubGraph,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\Graph\Graphs\SubGraph.cs,Initialize,The following statement contains a magic number: desiredPosition.x = 10;  
Magic Number,StrumpyShaderEditor,SubGraph,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\Graph\Graphs\SubGraph.cs,Initialize,The following statement contains a magic number: desiredPosition.y = screenDimensions.height / 4;  
Magic Number,StrumpyShaderEditor,FunctionThreeInput,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\Graph\Nodes\Functions\FunctionThreeInput.cs,Initialize,The following statement contains a magic number: _arg3 = _arg3 ?? new Float4InputChannel (2' "Arg3"' Vector4.zero);  
Magic Number,StrumpyShaderEditor,MergeNode,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\Graph\Nodes\Functions\MergeNode.cs,Initialize,The following statement contains a magic number: _xChannel = _xChannel ?? new EditorGroup (0' new[] {  	"x"'  	"y"'  	"z"'  	"w"  }' 4);  
Magic Number,StrumpyShaderEditor,MergeNode,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\Graph\Nodes\Functions\MergeNode.cs,Initialize,The following statement contains a magic number: _yChannel = _yChannel ?? new EditorGroup (1' new[] {  	"x"'  	"y"'  	"z"'  	"w"  }' 4);  
Magic Number,StrumpyShaderEditor,MergeNode,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\Graph\Nodes\Functions\MergeNode.cs,Initialize,The following statement contains a magic number: _zChannel = _zChannel ?? new EditorGroup (2' new[] {  	"x"'  	"y"'  	"z"'  	"w"  }' 4);  
Magic Number,StrumpyShaderEditor,MergeNode,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\Graph\Nodes\Functions\MergeNode.cs,Initialize,The following statement contains a magic number: _zChannel = _zChannel ?? new EditorGroup (2' new[] {  	"x"'  	"y"'  	"z"'  	"w"  }' 4);  
Magic Number,StrumpyShaderEditor,MergeNode,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\Graph\Nodes\Functions\MergeNode.cs,Initialize,The following statement contains a magic number: _wChannel = _wChannel ?? new EditorGroup (3' new[] {  	"x"'  	"y"'  	"z"'  	"w"  }' 4);  
Magic Number,StrumpyShaderEditor,MergeNode,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\Graph\Nodes\Functions\MergeNode.cs,Initialize,The following statement contains a magic number: _wChannel = _wChannel ?? new EditorGroup (3' new[] {  	"x"'  	"y"'  	"z"'  	"w"  }' 4);  
Magic Number,StrumpyShaderEditor,MergeNode,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\Graph\Nodes\Functions\MergeNode.cs,Initialize,The following statement contains a magic number: _v3 = _v3 ?? new Float4InputChannel (2' "Z"' Vector4.zero);  
Magic Number,StrumpyShaderEditor,MergeNode,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\Graph\Nodes\Functions\MergeNode.cs,Initialize,The following statement contains a magic number: _v4 = _v4 ?? new Float4InputChannel (3' "W"' Vector4.zero);  
Magic Number,StrumpyShaderEditor,ParallaxNode,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\Graph\Nodes\Functions\ParallaxNode.cs,Initialize,The following statement contains a magic number: _bias = _bias ?? new Float4InputChannel (2' "Bias"' new Vector4 (0.0f' 0.0f' 0.0f' 0.0f));  
Magic Number,StrumpyShaderEditor,SplatNode,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\Graph\Nodes\Functions\SplatNode.cs,Initialize,The following statement contains a magic number: _splatSelection = _splatSelection ?? new EditorGroup (0' new[] {  	"x"'  	"y"'  	"z"'  	"w"  }' 4);  
Magic Number,StrumpyShaderEditor,SplitNode,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\Graph\Nodes\Functions\SplitNode.cs,Initialize,The following statement contains a magic number: _z = _z ?? new Float4OutputChannel (2' "Z");  
Magic Number,StrumpyShaderEditor,SplitNode,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\Graph\Nodes\Functions\SplitNode.cs,Initialize,The following statement contains a magic number: _w = _w ?? new Float4OutputChannel (3' "W");  
Magic Number,StrumpyShaderEditor,SplitNode,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\Graph\Nodes\Functions\SplitNode.cs,GetExpression,The following statement contains a magic number: if (channelId == 2)  	return "float4( " + UniqueNodeIdentifier + ".z' " + UniqueNodeIdentifier + ".z' " + UniqueNodeIdentifier + ".z' " + UniqueNodeIdentifier + ".z)";  
Magic Number,StrumpyShaderEditor,SwizzleNode,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\Graph\Nodes\Functions\SwizzleNode.cs,Initialize,The following statement contains a magic number: _xChannel = _xChannel ?? new EditorGroup (0' new[] {  	"x"'  	"y"'  	"z"'  	"w"  }' 4);  
Magic Number,StrumpyShaderEditor,SwizzleNode,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\Graph\Nodes\Functions\SwizzleNode.cs,Initialize,The following statement contains a magic number: _yChannel = _yChannel ?? new EditorGroup (1' new[] {  	"x"'  	"y"'  	"z"'  	"w"  }' 4);  
Magic Number,StrumpyShaderEditor,SwizzleNode,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\Graph\Nodes\Functions\SwizzleNode.cs,Initialize,The following statement contains a magic number: _zChannel = _zChannel ?? new EditorGroup (2' new[] {  	"x"'  	"y"'  	"z"'  	"w"  }' 4);  
Magic Number,StrumpyShaderEditor,SwizzleNode,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\Graph\Nodes\Functions\SwizzleNode.cs,Initialize,The following statement contains a magic number: _zChannel = _zChannel ?? new EditorGroup (2' new[] {  	"x"'  	"y"'  	"z"'  	"w"  }' 4);  
Magic Number,StrumpyShaderEditor,SwizzleNode,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\Graph\Nodes\Functions\SwizzleNode.cs,Initialize,The following statement contains a magic number: _wChannel = _wChannel ?? new EditorGroup (3' new[] {  	"x"'  	"y"'  	"z"'  	"w"  }' 4);  
Magic Number,StrumpyShaderEditor,SwizzleNode,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\Graph\Nodes\Functions\SwizzleNode.cs,Initialize,The following statement contains a magic number: _wChannel = _wChannel ?? new EditorGroup (3' new[] {  	"x"'  	"y"'  	"z"'  	"w"  }' 4);  
Magic Number,StrumpyShaderEditor,UVPanNode,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\Graph\Nodes\Functions\UVPanNode.cs,Initialize,The following statement contains a magic number: _inputAddChannel = _inputAddChannel ?? new EditorGroup (0' new[] {  	"x"'  	"y"'  	"z"'  	"w"  }' 4);  
Magic Number,StrumpyShaderEditor,ShaderMasterNode,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\Graph\Nodes\GraphMasterNodes\ShaderMasterNode.cs,Initialize,The following statement contains a magic number: _emission = _emission ?? new Float4InputChannel (2' "Emission"' Vector4.zero);  
Magic Number,StrumpyShaderEditor,ShaderMasterNode,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\Graph\Nodes\GraphMasterNodes\ShaderMasterNode.cs,Initialize,The following statement contains a magic number: _specular = _specular ?? new Float4InputChannel (3' "Specular"' Vector4.zero);  
Magic Number,StrumpyShaderEditor,ShaderMasterNode,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\Graph\Nodes\GraphMasterNodes\ShaderMasterNode.cs,Initialize,The following statement contains a magic number: _gloss = _gloss ?? new Float4InputChannel (4' "Gloss"' Vector4.zero);  
Magic Number,StrumpyShaderEditor,ShaderMasterNode,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\Graph\Nodes\GraphMasterNodes\ShaderMasterNode.cs,Initialize,The following statement contains a magic number: _alpha = _alpha ?? new Float4InputChannel (5' "Alpha"' Vector4.one);  
Magic Number,StrumpyShaderEditor,ShaderMasterNode,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\Graph\Nodes\GraphMasterNodes\ShaderMasterNode.cs,Initialize,The following statement contains a magic number: _clip = _clip ?? new Float4InputChannel (6' "Clip"' Vector4.one);  
Magic Number,StrumpyShaderEditor,ShaderMasterNode,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\Graph\Nodes\GraphMasterNodes\ShaderMasterNode.cs,Initialize,The following statement contains a magic number: _custom = _custom ?? new Float4InputChannel (7' "Custom"' Vector4.zero);  
Magic Number,StrumpyShaderEditor,VertexOutputMasterNode,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\Graph\Nodes\GraphMasterNodes\VertexOutputMasterNode.cs,Initialize,The following statement contains a magic number: _normal = _normal ?? new Float4InputChannel (2' "Normal"' Vector4.zero);  
Magic Number,StrumpyShaderEditor,VertexOutputMasterNode,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\Graph\Nodes\GraphMasterNodes\VertexOutputMasterNode.cs,Initialize,The following statement contains a magic number: _tangent = _tangent ?? new Float4InputChannel (3' "Tangent"' Vector4.zero);  
Magic Number,StrumpyShaderEditor,InputNode,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\Graph\Nodes\InputNodes\PropertyInputNodes\InputNode.cs,DrawProperties,The following statement contains a magic number: if (ReferencedProperty () == null) {  	GUILayout.Label ("Add new input?");  	GUILayout.BeginHorizontal ();  	_newInputName = GUILayout.TextField (_newInputName' GUILayout.Width (200));  	GUILayout.FlexibleSpace ();  	if (GUILayout.Button ("Add"' GUILayout.Width (75))) {  		if (!string.IsNullOrEmpty (_newInputName)) {  			var prop = NewPropertyInstance ();  			prop.PropertyName = _newInputName;  			_inputId = Owner.AddProperty (prop);  		}  		else {  			EditorUtility.DisplayDialog ("No Name specified"' "You must specify an input name."' "Ok");  		}  	}  	GUILayout.EndHorizontal ();  }  
Magic Number,StrumpyShaderEditor,InputNode,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\Graph\Nodes\InputNodes\PropertyInputNodes\InputNode.cs,DrawProperties,The following statement contains a magic number: if (ReferencedProperty () == null) {  	GUILayout.Label ("Add new input?");  	GUILayout.BeginHorizontal ();  	_newInputName = GUILayout.TextField (_newInputName' GUILayout.Width (200));  	GUILayout.FlexibleSpace ();  	if (GUILayout.Button ("Add"' GUILayout.Width (75))) {  		if (!string.IsNullOrEmpty (_newInputName)) {  			var prop = NewPropertyInstance ();  			prop.PropertyName = _newInputName;  			_inputId = Owner.AddProperty (prop);  		}  		else {  			EditorUtility.DisplayDialog ("No Name specified"' "You must specify an input name."' "Ok");  		}  	}  	GUILayout.EndHorizontal ();  }  
Magic Number,StrumpyShaderEditor,InputNode,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\Graph\Nodes\InputNodes\PropertyInputNodes\InputNode.cs,DrawProperties,The following statement contains a magic number: _newInputName = GUILayout.TextField (_newInputName' GUILayout.Width (200));  
Magic Number,StrumpyShaderEditor,InputNode,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\Graph\Nodes\InputNodes\PropertyInputNodes\InputNode.cs,DrawProperties,The following statement contains a magic number: if (GUILayout.Button ("Add"' GUILayout.Width (75))) {  	if (!string.IsNullOrEmpty (_newInputName)) {  		var prop = NewPropertyInstance ();  		prop.PropertyName = _newInputName;  		_inputId = Owner.AddProperty (prop);  	}  	else {  		EditorUtility.DisplayDialog ("No Name specified"' "You must specify an input name."' "Ok");  	}  }  
Magic Number,StrumpyShaderEditor,Node,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\Graph\Nodes\Node.cs,Node,The following statement contains a magic number: Position = new EditorRect (10' 40' 30' 30);  
Magic Number,StrumpyShaderEditor,Node,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\Graph\Nodes\Node.cs,Node,The following statement contains a magic number: Position = new EditorRect (10' 40' 30' 30);  
Magic Number,StrumpyShaderEditor,Node,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\Graph\Nodes\Node.cs,Node,The following statement contains a magic number: Position = new EditorRect (10' 40' 30' 30);  
Magic Number,StrumpyShaderEditor,Node,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\Graph\Nodes\Node.cs,Node,The following statement contains a magic number: Position = new EditorRect (10' 40' 30' 30);  
Magic Number,StrumpyShaderEditor,Node,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\Graph\Nodes\Node.cs,Draw,The following statement contains a magic number: foreach (var channel in GetOutputChannels ()) {  	var absoluteIOVisualPos = new Rect (currentDrawPosition.x - (nodeIoDrawSize.x * 0.5f)' currentDrawPosition.y + nodeIoDrawSize.y / 2 + 2' nodeIoDrawSize.x' nodeIoDrawSize.y);  	var absoluteIODrawPos = new Rect (currentDrawPosition.x - (nodeIoSize.x * 0.5f)' currentDrawPosition.y + 2' nodeIoSize.x' nodeIoSize.y);  	GUI.Box (absoluteIOVisualPos' ""' GUI.skin.box);  	if (GUI.Button (absoluteIODrawPos' ""' GUIStyle.none)) {  		editor.SelectedOutputChannel = new OutputChannelReference (UniqueNodeIdentifier' channel.ChannelId);  	}  	var relativeIODrawPos = absoluteIODrawPos;  	relativeIODrawPos.x -= drawPosOffset.x;  	relativeIODrawPos.y -= drawPosOffset.y;  	channel.Position = relativeIODrawPos;  	var labelDrawPos = new Rect (currentDrawPosition.x + (nodeIoSize.x * 0.5f)' currentDrawPosition.y' drawPosOffset.width / 2f' nodeDrawHeightPerChannel);  	GUI.Label (labelDrawPos' channel.DisplayName);  	currentDrawPosition.y += nodeDrawHeightPerChannel;  }  
Magic Number,StrumpyShaderEditor,Node,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\Graph\Nodes\Node.cs,Draw,The following statement contains a magic number: foreach (var channel in GetOutputChannels ()) {  	var absoluteIOVisualPos = new Rect (currentDrawPosition.x - (nodeIoDrawSize.x * 0.5f)' currentDrawPosition.y + nodeIoDrawSize.y / 2 + 2' nodeIoDrawSize.x' nodeIoDrawSize.y);  	var absoluteIODrawPos = new Rect (currentDrawPosition.x - (nodeIoSize.x * 0.5f)' currentDrawPosition.y + 2' nodeIoSize.x' nodeIoSize.y);  	GUI.Box (absoluteIOVisualPos' ""' GUI.skin.box);  	if (GUI.Button (absoluteIODrawPos' ""' GUIStyle.none)) {  		editor.SelectedOutputChannel = new OutputChannelReference (UniqueNodeIdentifier' channel.ChannelId);  	}  	var relativeIODrawPos = absoluteIODrawPos;  	relativeIODrawPos.x -= drawPosOffset.x;  	relativeIODrawPos.y -= drawPosOffset.y;  	channel.Position = relativeIODrawPos;  	var labelDrawPos = new Rect (currentDrawPosition.x + (nodeIoSize.x * 0.5f)' currentDrawPosition.y' drawPosOffset.width / 2f' nodeDrawHeightPerChannel);  	GUI.Label (labelDrawPos' channel.DisplayName);  	currentDrawPosition.y += nodeDrawHeightPerChannel;  }  
Magic Number,StrumpyShaderEditor,Node,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\Graph\Nodes\Node.cs,Draw,The following statement contains a magic number: foreach (var channel in GetOutputChannels ()) {  	var absoluteIOVisualPos = new Rect (currentDrawPosition.x - (nodeIoDrawSize.x * 0.5f)' currentDrawPosition.y + nodeIoDrawSize.y / 2 + 2' nodeIoDrawSize.x' nodeIoDrawSize.y);  	var absoluteIODrawPos = new Rect (currentDrawPosition.x - (nodeIoSize.x * 0.5f)' currentDrawPosition.y + 2' nodeIoSize.x' nodeIoSize.y);  	GUI.Box (absoluteIOVisualPos' ""' GUI.skin.box);  	if (GUI.Button (absoluteIODrawPos' ""' GUIStyle.none)) {  		editor.SelectedOutputChannel = new OutputChannelReference (UniqueNodeIdentifier' channel.ChannelId);  	}  	var relativeIODrawPos = absoluteIODrawPos;  	relativeIODrawPos.x -= drawPosOffset.x;  	relativeIODrawPos.y -= drawPosOffset.y;  	channel.Position = relativeIODrawPos;  	var labelDrawPos = new Rect (currentDrawPosition.x + (nodeIoSize.x * 0.5f)' currentDrawPosition.y' drawPosOffset.width / 2f' nodeDrawHeightPerChannel);  	GUI.Label (labelDrawPos' channel.DisplayName);  	currentDrawPosition.y += nodeDrawHeightPerChannel;  }  
Magic Number,StrumpyShaderEditor,Node,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\Graph\Nodes\Node.cs,Draw,The following statement contains a magic number: foreach (var channel in GetInputChannels ()) {  	var absoluteIOVisualPos = new Rect (drawPosOffset.xMax - (nodeIoSize.x * 0.5f) + 3' currentDrawPosition.y + nodeIoDrawSize.y / 2 + 2' nodeIoDrawSize.x' nodeIoDrawSize.y);  	var absoluteIODrawPos = new Rect (drawPosOffset.xMax - (nodeIoSize.x * 0.5f)' currentDrawPosition.y + 2' nodeIoSize.x' nodeIoSize.y);  	GUI.Box (absoluteIOVisualPos' ""' GUI.skin.box);  	if (GUI.Button (absoluteIODrawPos' ""' GUIStyle.none)) {  		editor.SelectedInputChannel = new InputChannelReference (UniqueNodeIdentifier' channel.ChannelId);  	}  	var relativeIODrawPos = absoluteIODrawPos;  	relativeIODrawPos.x -= drawPosOffset.x;  	relativeIODrawPos.y -= drawPosOffset.y;  	channel.Position = relativeIODrawPos;  	var labelDrawPos = new Rect (currentDrawPosition.x' currentDrawPosition.y' (drawPosOffset.width / 2f) - (nodeIoSize.x * 0.5f)' nodeDrawHeightPerChannel);  	GUI.Label (labelDrawPos' channel.DisplayName);  	currentDrawPosition.y += nodeDrawHeightPerChannel;  }  
Magic Number,StrumpyShaderEditor,Node,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\Graph\Nodes\Node.cs,Draw,The following statement contains a magic number: foreach (var channel in GetInputChannels ()) {  	var absoluteIOVisualPos = new Rect (drawPosOffset.xMax - (nodeIoSize.x * 0.5f) + 3' currentDrawPosition.y + nodeIoDrawSize.y / 2 + 2' nodeIoDrawSize.x' nodeIoDrawSize.y);  	var absoluteIODrawPos = new Rect (drawPosOffset.xMax - (nodeIoSize.x * 0.5f)' currentDrawPosition.y + 2' nodeIoSize.x' nodeIoSize.y);  	GUI.Box (absoluteIOVisualPos' ""' GUI.skin.box);  	if (GUI.Button (absoluteIODrawPos' ""' GUIStyle.none)) {  		editor.SelectedInputChannel = new InputChannelReference (UniqueNodeIdentifier' channel.ChannelId);  	}  	var relativeIODrawPos = absoluteIODrawPos;  	relativeIODrawPos.x -= drawPosOffset.x;  	relativeIODrawPos.y -= drawPosOffset.y;  	channel.Position = relativeIODrawPos;  	var labelDrawPos = new Rect (currentDrawPosition.x' currentDrawPosition.y' (drawPosOffset.width / 2f) - (nodeIoSize.x * 0.5f)' nodeDrawHeightPerChannel);  	GUI.Label (labelDrawPos' channel.DisplayName);  	currentDrawPosition.y += nodeDrawHeightPerChannel;  }  
Magic Number,StrumpyShaderEditor,Node,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\Graph\Nodes\Node.cs,Draw,The following statement contains a magic number: foreach (var channel in GetInputChannels ()) {  	var absoluteIOVisualPos = new Rect (drawPosOffset.xMax - (nodeIoSize.x * 0.5f) + 3' currentDrawPosition.y + nodeIoDrawSize.y / 2 + 2' nodeIoDrawSize.x' nodeIoDrawSize.y);  	var absoluteIODrawPos = new Rect (drawPosOffset.xMax - (nodeIoSize.x * 0.5f)' currentDrawPosition.y + 2' nodeIoSize.x' nodeIoSize.y);  	GUI.Box (absoluteIOVisualPos' ""' GUI.skin.box);  	if (GUI.Button (absoluteIODrawPos' ""' GUIStyle.none)) {  		editor.SelectedInputChannel = new InputChannelReference (UniqueNodeIdentifier' channel.ChannelId);  	}  	var relativeIODrawPos = absoluteIODrawPos;  	relativeIODrawPos.x -= drawPosOffset.x;  	relativeIODrawPos.y -= drawPosOffset.y;  	channel.Position = relativeIODrawPos;  	var labelDrawPos = new Rect (currentDrawPosition.x' currentDrawPosition.y' (drawPosOffset.width / 2f) - (nodeIoSize.x * 0.5f)' nodeDrawHeightPerChannel);  	GUI.Label (labelDrawPos' channel.DisplayName);  	currentDrawPosition.y += nodeDrawHeightPerChannel;  }  
Magic Number,StrumpyShaderEditor,Node,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\Graph\Nodes\Node.cs,Draw,The following statement contains a magic number: foreach (var channel in GetInputChannels ()) {  	var absoluteIOVisualPos = new Rect (drawPosOffset.xMax - (nodeIoSize.x * 0.5f) + 3' currentDrawPosition.y + nodeIoDrawSize.y / 2 + 2' nodeIoDrawSize.x' nodeIoDrawSize.y);  	var absoluteIODrawPos = new Rect (drawPosOffset.xMax - (nodeIoSize.x * 0.5f)' currentDrawPosition.y + 2' nodeIoSize.x' nodeIoSize.y);  	GUI.Box (absoluteIOVisualPos' ""' GUI.skin.box);  	if (GUI.Button (absoluteIODrawPos' ""' GUIStyle.none)) {  		editor.SelectedInputChannel = new InputChannelReference (UniqueNodeIdentifier' channel.ChannelId);  	}  	var relativeIODrawPos = absoluteIODrawPos;  	relativeIODrawPos.x -= drawPosOffset.x;  	relativeIODrawPos.y -= drawPosOffset.y;  	channel.Position = relativeIODrawPos;  	var labelDrawPos = new Rect (currentDrawPosition.x' currentDrawPosition.y' (drawPosOffset.width / 2f) - (nodeIoSize.x * 0.5f)' nodeDrawHeightPerChannel);  	GUI.Label (labelDrawPos' channel.DisplayName);  	currentDrawPosition.y += nodeDrawHeightPerChannel;  }  
Magic Number,StrumpyShaderEditor,DotNode,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\Graph\Nodes\Operations\DotNode.cs,Initialize,The following statement contains a magic number: _channels = _channels ?? new EditorGroup (1' new[] {  	"xy"'  	"xyz"'  	"xyzw"  }' 3);  
Magic Number,StrumpyShaderEditor,ColorProperty,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\Graph\Properties\ColorProperty.cs,Draw,The following statement contains a magic number: GUILayout.Label ("Color:"' GUILayout.Width (63));  
Magic Number,StrumpyShaderEditor,ShaderInputs,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\Graph\Properties\ShaderInputs.cs,Draw,The following statement contains a magic number: foreach (var property in _shaderProperties) {  	GUILayout.BeginVertical ();  	GUILayout.BeginHorizontal ();  	var oldColor = GUI.color;  	if (_shaderProperties.Where (x => x.PropertyName == property.PropertyName).Count () > 1 || !property.IsValid ()) {  		GUI.color = Color.red;  	}  	property.Expanded = EditorGUILayout.Foldout (property.Expanded' property.GetPropertyType ().PropertyTypeString ());  	property.PropertyName = GUILayout.TextField (property.PropertyName' new[] {  		GUILayout.Width (130)  	});  	GUI.color = oldColor;  	GUILayout.FlexibleSpace ();  	if (GUILayout.Button (_upIcon' GUILayout.Width (21)' GUILayout.Height (21))) {  		moveUpItem = property;  	}  	if (GUILayout.Button (_downIcon' GUILayout.Width (21)' GUILayout.Height (21))) {  		moveDownItem = property;  	}  	if (GUILayout.Button (_removeIcon' GUILayout.Width (21)' GUILayout.Height (21))) {  		deleteItem = property;  	}  	GUILayout.EndHorizontal ();  	if (property.Expanded) {  		GUILayout.Space (3);  		GUILayout.BeginHorizontal ();  		GUILayout.Label ("Description"' new[] {  			GUILayout.Width (69)  		});  		property.PropertyDescriptionDisplay = GUILayout.TextField (property.PropertyDescriptionDisplay);  		GUILayout.EndHorizontal ();  		GUILayout.BeginHorizontal ();  		GUILayout.Space (10);  		property.Draw ();  		GUILayout.EndHorizontal ();  	}  	GUILayout.EndVertical ();  	GUILayout.Space (10);  }  
Magic Number,StrumpyShaderEditor,ShaderInputs,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\Graph\Properties\ShaderInputs.cs,Draw,The following statement contains a magic number: foreach (var property in _shaderProperties) {  	GUILayout.BeginVertical ();  	GUILayout.BeginHorizontal ();  	var oldColor = GUI.color;  	if (_shaderProperties.Where (x => x.PropertyName == property.PropertyName).Count () > 1 || !property.IsValid ()) {  		GUI.color = Color.red;  	}  	property.Expanded = EditorGUILayout.Foldout (property.Expanded' property.GetPropertyType ().PropertyTypeString ());  	property.PropertyName = GUILayout.TextField (property.PropertyName' new[] {  		GUILayout.Width (130)  	});  	GUI.color = oldColor;  	GUILayout.FlexibleSpace ();  	if (GUILayout.Button (_upIcon' GUILayout.Width (21)' GUILayout.Height (21))) {  		moveUpItem = property;  	}  	if (GUILayout.Button (_downIcon' GUILayout.Width (21)' GUILayout.Height (21))) {  		moveDownItem = property;  	}  	if (GUILayout.Button (_removeIcon' GUILayout.Width (21)' GUILayout.Height (21))) {  		deleteItem = property;  	}  	GUILayout.EndHorizontal ();  	if (property.Expanded) {  		GUILayout.Space (3);  		GUILayout.BeginHorizontal ();  		GUILayout.Label ("Description"' new[] {  			GUILayout.Width (69)  		});  		property.PropertyDescriptionDisplay = GUILayout.TextField (property.PropertyDescriptionDisplay);  		GUILayout.EndHorizontal ();  		GUILayout.BeginHorizontal ();  		GUILayout.Space (10);  		property.Draw ();  		GUILayout.EndHorizontal ();  	}  	GUILayout.EndVertical ();  	GUILayout.Space (10);  }  
Magic Number,StrumpyShaderEditor,ShaderInputs,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\Graph\Properties\ShaderInputs.cs,Draw,The following statement contains a magic number: foreach (var property in _shaderProperties) {  	GUILayout.BeginVertical ();  	GUILayout.BeginHorizontal ();  	var oldColor = GUI.color;  	if (_shaderProperties.Where (x => x.PropertyName == property.PropertyName).Count () > 1 || !property.IsValid ()) {  		GUI.color = Color.red;  	}  	property.Expanded = EditorGUILayout.Foldout (property.Expanded' property.GetPropertyType ().PropertyTypeString ());  	property.PropertyName = GUILayout.TextField (property.PropertyName' new[] {  		GUILayout.Width (130)  	});  	GUI.color = oldColor;  	GUILayout.FlexibleSpace ();  	if (GUILayout.Button (_upIcon' GUILayout.Width (21)' GUILayout.Height (21))) {  		moveUpItem = property;  	}  	if (GUILayout.Button (_downIcon' GUILayout.Width (21)' GUILayout.Height (21))) {  		moveDownItem = property;  	}  	if (GUILayout.Button (_removeIcon' GUILayout.Width (21)' GUILayout.Height (21))) {  		deleteItem = property;  	}  	GUILayout.EndHorizontal ();  	if (property.Expanded) {  		GUILayout.Space (3);  		GUILayout.BeginHorizontal ();  		GUILayout.Label ("Description"' new[] {  			GUILayout.Width (69)  		});  		property.PropertyDescriptionDisplay = GUILayout.TextField (property.PropertyDescriptionDisplay);  		GUILayout.EndHorizontal ();  		GUILayout.BeginHorizontal ();  		GUILayout.Space (10);  		property.Draw ();  		GUILayout.EndHorizontal ();  	}  	GUILayout.EndVertical ();  	GUILayout.Space (10);  }  
Magic Number,StrumpyShaderEditor,ShaderInputs,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\Graph\Properties\ShaderInputs.cs,Draw,The following statement contains a magic number: foreach (var property in _shaderProperties) {  	GUILayout.BeginVertical ();  	GUILayout.BeginHorizontal ();  	var oldColor = GUI.color;  	if (_shaderProperties.Where (x => x.PropertyName == property.PropertyName).Count () > 1 || !property.IsValid ()) {  		GUI.color = Color.red;  	}  	property.Expanded = EditorGUILayout.Foldout (property.Expanded' property.GetPropertyType ().PropertyTypeString ());  	property.PropertyName = GUILayout.TextField (property.PropertyName' new[] {  		GUILayout.Width (130)  	});  	GUI.color = oldColor;  	GUILayout.FlexibleSpace ();  	if (GUILayout.Button (_upIcon' GUILayout.Width (21)' GUILayout.Height (21))) {  		moveUpItem = property;  	}  	if (GUILayout.Button (_downIcon' GUILayout.Width (21)' GUILayout.Height (21))) {  		moveDownItem = property;  	}  	if (GUILayout.Button (_removeIcon' GUILayout.Width (21)' GUILayout.Height (21))) {  		deleteItem = property;  	}  	GUILayout.EndHorizontal ();  	if (property.Expanded) {  		GUILayout.Space (3);  		GUILayout.BeginHorizontal ();  		GUILayout.Label ("Description"' new[] {  			GUILayout.Width (69)  		});  		property.PropertyDescriptionDisplay = GUILayout.TextField (property.PropertyDescriptionDisplay);  		GUILayout.EndHorizontal ();  		GUILayout.BeginHorizontal ();  		GUILayout.Space (10);  		property.Draw ();  		GUILayout.EndHorizontal ();  	}  	GUILayout.EndVertical ();  	GUILayout.Space (10);  }  
Magic Number,StrumpyShaderEditor,ShaderInputs,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\Graph\Properties\ShaderInputs.cs,Draw,The following statement contains a magic number: foreach (var property in _shaderProperties) {  	GUILayout.BeginVertical ();  	GUILayout.BeginHorizontal ();  	var oldColor = GUI.color;  	if (_shaderProperties.Where (x => x.PropertyName == property.PropertyName).Count () > 1 || !property.IsValid ()) {  		GUI.color = Color.red;  	}  	property.Expanded = EditorGUILayout.Foldout (property.Expanded' property.GetPropertyType ().PropertyTypeString ());  	property.PropertyName = GUILayout.TextField (property.PropertyName' new[] {  		GUILayout.Width (130)  	});  	GUI.color = oldColor;  	GUILayout.FlexibleSpace ();  	if (GUILayout.Button (_upIcon' GUILayout.Width (21)' GUILayout.Height (21))) {  		moveUpItem = property;  	}  	if (GUILayout.Button (_downIcon' GUILayout.Width (21)' GUILayout.Height (21))) {  		moveDownItem = property;  	}  	if (GUILayout.Button (_removeIcon' GUILayout.Width (21)' GUILayout.Height (21))) {  		deleteItem = property;  	}  	GUILayout.EndHorizontal ();  	if (property.Expanded) {  		GUILayout.Space (3);  		GUILayout.BeginHorizontal ();  		GUILayout.Label ("Description"' new[] {  			GUILayout.Width (69)  		});  		property.PropertyDescriptionDisplay = GUILayout.TextField (property.PropertyDescriptionDisplay);  		GUILayout.EndHorizontal ();  		GUILayout.BeginHorizontal ();  		GUILayout.Space (10);  		property.Draw ();  		GUILayout.EndHorizontal ();  	}  	GUILayout.EndVertical ();  	GUILayout.Space (10);  }  
Magic Number,StrumpyShaderEditor,ShaderInputs,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\Graph\Properties\ShaderInputs.cs,Draw,The following statement contains a magic number: foreach (var property in _shaderProperties) {  	GUILayout.BeginVertical ();  	GUILayout.BeginHorizontal ();  	var oldColor = GUI.color;  	if (_shaderProperties.Where (x => x.PropertyName == property.PropertyName).Count () > 1 || !property.IsValid ()) {  		GUI.color = Color.red;  	}  	property.Expanded = EditorGUILayout.Foldout (property.Expanded' property.GetPropertyType ().PropertyTypeString ());  	property.PropertyName = GUILayout.TextField (property.PropertyName' new[] {  		GUILayout.Width (130)  	});  	GUI.color = oldColor;  	GUILayout.FlexibleSpace ();  	if (GUILayout.Button (_upIcon' GUILayout.Width (21)' GUILayout.Height (21))) {  		moveUpItem = property;  	}  	if (GUILayout.Button (_downIcon' GUILayout.Width (21)' GUILayout.Height (21))) {  		moveDownItem = property;  	}  	if (GUILayout.Button (_removeIcon' GUILayout.Width (21)' GUILayout.Height (21))) {  		deleteItem = property;  	}  	GUILayout.EndHorizontal ();  	if (property.Expanded) {  		GUILayout.Space (3);  		GUILayout.BeginHorizontal ();  		GUILayout.Label ("Description"' new[] {  			GUILayout.Width (69)  		});  		property.PropertyDescriptionDisplay = GUILayout.TextField (property.PropertyDescriptionDisplay);  		GUILayout.EndHorizontal ();  		GUILayout.BeginHorizontal ();  		GUILayout.Space (10);  		property.Draw ();  		GUILayout.EndHorizontal ();  	}  	GUILayout.EndVertical ();  	GUILayout.Space (10);  }  
Magic Number,StrumpyShaderEditor,ShaderInputs,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\Graph\Properties\ShaderInputs.cs,Draw,The following statement contains a magic number: foreach (var property in _shaderProperties) {  	GUILayout.BeginVertical ();  	GUILayout.BeginHorizontal ();  	var oldColor = GUI.color;  	if (_shaderProperties.Where (x => x.PropertyName == property.PropertyName).Count () > 1 || !property.IsValid ()) {  		GUI.color = Color.red;  	}  	property.Expanded = EditorGUILayout.Foldout (property.Expanded' property.GetPropertyType ().PropertyTypeString ());  	property.PropertyName = GUILayout.TextField (property.PropertyName' new[] {  		GUILayout.Width (130)  	});  	GUI.color = oldColor;  	GUILayout.FlexibleSpace ();  	if (GUILayout.Button (_upIcon' GUILayout.Width (21)' GUILayout.Height (21))) {  		moveUpItem = property;  	}  	if (GUILayout.Button (_downIcon' GUILayout.Width (21)' GUILayout.Height (21))) {  		moveDownItem = property;  	}  	if (GUILayout.Button (_removeIcon' GUILayout.Width (21)' GUILayout.Height (21))) {  		deleteItem = property;  	}  	GUILayout.EndHorizontal ();  	if (property.Expanded) {  		GUILayout.Space (3);  		GUILayout.BeginHorizontal ();  		GUILayout.Label ("Description"' new[] {  			GUILayout.Width (69)  		});  		property.PropertyDescriptionDisplay = GUILayout.TextField (property.PropertyDescriptionDisplay);  		GUILayout.EndHorizontal ();  		GUILayout.BeginHorizontal ();  		GUILayout.Space (10);  		property.Draw ();  		GUILayout.EndHorizontal ();  	}  	GUILayout.EndVertical ();  	GUILayout.Space (10);  }  
Magic Number,StrumpyShaderEditor,ShaderInputs,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\Graph\Properties\ShaderInputs.cs,Draw,The following statement contains a magic number: foreach (var property in _shaderProperties) {  	GUILayout.BeginVertical ();  	GUILayout.BeginHorizontal ();  	var oldColor = GUI.color;  	if (_shaderProperties.Where (x => x.PropertyName == property.PropertyName).Count () > 1 || !property.IsValid ()) {  		GUI.color = Color.red;  	}  	property.Expanded = EditorGUILayout.Foldout (property.Expanded' property.GetPropertyType ().PropertyTypeString ());  	property.PropertyName = GUILayout.TextField (property.PropertyName' new[] {  		GUILayout.Width (130)  	});  	GUI.color = oldColor;  	GUILayout.FlexibleSpace ();  	if (GUILayout.Button (_upIcon' GUILayout.Width (21)' GUILayout.Height (21))) {  		moveUpItem = property;  	}  	if (GUILayout.Button (_downIcon' GUILayout.Width (21)' GUILayout.Height (21))) {  		moveDownItem = property;  	}  	if (GUILayout.Button (_removeIcon' GUILayout.Width (21)' GUILayout.Height (21))) {  		deleteItem = property;  	}  	GUILayout.EndHorizontal ();  	if (property.Expanded) {  		GUILayout.Space (3);  		GUILayout.BeginHorizontal ();  		GUILayout.Label ("Description"' new[] {  			GUILayout.Width (69)  		});  		property.PropertyDescriptionDisplay = GUILayout.TextField (property.PropertyDescriptionDisplay);  		GUILayout.EndHorizontal ();  		GUILayout.BeginHorizontal ();  		GUILayout.Space (10);  		property.Draw ();  		GUILayout.EndHorizontal ();  	}  	GUILayout.EndVertical ();  	GUILayout.Space (10);  }  
Magic Number,StrumpyShaderEditor,ShaderInputs,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\Graph\Properties\ShaderInputs.cs,Draw,The following statement contains a magic number: foreach (var property in _shaderProperties) {  	GUILayout.BeginVertical ();  	GUILayout.BeginHorizontal ();  	var oldColor = GUI.color;  	if (_shaderProperties.Where (x => x.PropertyName == property.PropertyName).Count () > 1 || !property.IsValid ()) {  		GUI.color = Color.red;  	}  	property.Expanded = EditorGUILayout.Foldout (property.Expanded' property.GetPropertyType ().PropertyTypeString ());  	property.PropertyName = GUILayout.TextField (property.PropertyName' new[] {  		GUILayout.Width (130)  	});  	GUI.color = oldColor;  	GUILayout.FlexibleSpace ();  	if (GUILayout.Button (_upIcon' GUILayout.Width (21)' GUILayout.Height (21))) {  		moveUpItem = property;  	}  	if (GUILayout.Button (_downIcon' GUILayout.Width (21)' GUILayout.Height (21))) {  		moveDownItem = property;  	}  	if (GUILayout.Button (_removeIcon' GUILayout.Width (21)' GUILayout.Height (21))) {  		deleteItem = property;  	}  	GUILayout.EndHorizontal ();  	if (property.Expanded) {  		GUILayout.Space (3);  		GUILayout.BeginHorizontal ();  		GUILayout.Label ("Description"' new[] {  			GUILayout.Width (69)  		});  		property.PropertyDescriptionDisplay = GUILayout.TextField (property.PropertyDescriptionDisplay);  		GUILayout.EndHorizontal ();  		GUILayout.BeginHorizontal ();  		GUILayout.Space (10);  		property.Draw ();  		GUILayout.EndHorizontal ();  	}  	GUILayout.EndVertical ();  	GUILayout.Space (10);  }  
Magic Number,StrumpyShaderEditor,ShaderInputs,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\Graph\Properties\ShaderInputs.cs,Draw,The following statement contains a magic number: foreach (var property in _shaderProperties) {  	GUILayout.BeginVertical ();  	GUILayout.BeginHorizontal ();  	var oldColor = GUI.color;  	if (_shaderProperties.Where (x => x.PropertyName == property.PropertyName).Count () > 1 || !property.IsValid ()) {  		GUI.color = Color.red;  	}  	property.Expanded = EditorGUILayout.Foldout (property.Expanded' property.GetPropertyType ().PropertyTypeString ());  	property.PropertyName = GUILayout.TextField (property.PropertyName' new[] {  		GUILayout.Width (130)  	});  	GUI.color = oldColor;  	GUILayout.FlexibleSpace ();  	if (GUILayout.Button (_upIcon' GUILayout.Width (21)' GUILayout.Height (21))) {  		moveUpItem = property;  	}  	if (GUILayout.Button (_downIcon' GUILayout.Width (21)' GUILayout.Height (21))) {  		moveDownItem = property;  	}  	if (GUILayout.Button (_removeIcon' GUILayout.Width (21)' GUILayout.Height (21))) {  		deleteItem = property;  	}  	GUILayout.EndHorizontal ();  	if (property.Expanded) {  		GUILayout.Space (3);  		GUILayout.BeginHorizontal ();  		GUILayout.Label ("Description"' new[] {  			GUILayout.Width (69)  		});  		property.PropertyDescriptionDisplay = GUILayout.TextField (property.PropertyDescriptionDisplay);  		GUILayout.EndHorizontal ();  		GUILayout.BeginHorizontal ();  		GUILayout.Space (10);  		property.Draw ();  		GUILayout.EndHorizontal ();  	}  	GUILayout.EndVertical ();  	GUILayout.Space (10);  }  
Magic Number,StrumpyShaderEditor,ShaderInputs,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\Graph\Properties\ShaderInputs.cs,Draw,The following statement contains a magic number: foreach (var property in _shaderProperties) {  	GUILayout.BeginVertical ();  	GUILayout.BeginHorizontal ();  	var oldColor = GUI.color;  	if (_shaderProperties.Where (x => x.PropertyName == property.PropertyName).Count () > 1 || !property.IsValid ()) {  		GUI.color = Color.red;  	}  	property.Expanded = EditorGUILayout.Foldout (property.Expanded' property.GetPropertyType ().PropertyTypeString ());  	property.PropertyName = GUILayout.TextField (property.PropertyName' new[] {  		GUILayout.Width (130)  	});  	GUI.color = oldColor;  	GUILayout.FlexibleSpace ();  	if (GUILayout.Button (_upIcon' GUILayout.Width (21)' GUILayout.Height (21))) {  		moveUpItem = property;  	}  	if (GUILayout.Button (_downIcon' GUILayout.Width (21)' GUILayout.Height (21))) {  		moveDownItem = property;  	}  	if (GUILayout.Button (_removeIcon' GUILayout.Width (21)' GUILayout.Height (21))) {  		deleteItem = property;  	}  	GUILayout.EndHorizontal ();  	if (property.Expanded) {  		GUILayout.Space (3);  		GUILayout.BeginHorizontal ();  		GUILayout.Label ("Description"' new[] {  			GUILayout.Width (69)  		});  		property.PropertyDescriptionDisplay = GUILayout.TextField (property.PropertyDescriptionDisplay);  		GUILayout.EndHorizontal ();  		GUILayout.BeginHorizontal ();  		GUILayout.Space (10);  		property.Draw ();  		GUILayout.EndHorizontal ();  	}  	GUILayout.EndVertical ();  	GUILayout.Space (10);  }  
Magic Number,StrumpyShaderEditor,ShaderInputs,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\Graph\Properties\ShaderInputs.cs,Draw,The following statement contains a magic number: property.PropertyName = GUILayout.TextField (property.PropertyName' new[] {  	GUILayout.Width (130)  });  
Magic Number,StrumpyShaderEditor,ShaderInputs,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\Graph\Properties\ShaderInputs.cs,Draw,The following statement contains a magic number: if (GUILayout.Button (_upIcon' GUILayout.Width (21)' GUILayout.Height (21))) {  	moveUpItem = property;  }  
Magic Number,StrumpyShaderEditor,ShaderInputs,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\Graph\Properties\ShaderInputs.cs,Draw,The following statement contains a magic number: if (GUILayout.Button (_upIcon' GUILayout.Width (21)' GUILayout.Height (21))) {  	moveUpItem = property;  }  
Magic Number,StrumpyShaderEditor,ShaderInputs,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\Graph\Properties\ShaderInputs.cs,Draw,The following statement contains a magic number: if (GUILayout.Button (_downIcon' GUILayout.Width (21)' GUILayout.Height (21))) {  	moveDownItem = property;  }  
Magic Number,StrumpyShaderEditor,ShaderInputs,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\Graph\Properties\ShaderInputs.cs,Draw,The following statement contains a magic number: if (GUILayout.Button (_downIcon' GUILayout.Width (21)' GUILayout.Height (21))) {  	moveDownItem = property;  }  
Magic Number,StrumpyShaderEditor,ShaderInputs,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\Graph\Properties\ShaderInputs.cs,Draw,The following statement contains a magic number: if (GUILayout.Button (_removeIcon' GUILayout.Width (21)' GUILayout.Height (21))) {  	deleteItem = property;  }  
Magic Number,StrumpyShaderEditor,ShaderInputs,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\Graph\Properties\ShaderInputs.cs,Draw,The following statement contains a magic number: if (GUILayout.Button (_removeIcon' GUILayout.Width (21)' GUILayout.Height (21))) {  	deleteItem = property;  }  
Magic Number,StrumpyShaderEditor,ShaderInputs,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\Graph\Properties\ShaderInputs.cs,Draw,The following statement contains a magic number: if (property.Expanded) {  	GUILayout.Space (3);  	GUILayout.BeginHorizontal ();  	GUILayout.Label ("Description"' new[] {  		GUILayout.Width (69)  	});  	property.PropertyDescriptionDisplay = GUILayout.TextField (property.PropertyDescriptionDisplay);  	GUILayout.EndHorizontal ();  	GUILayout.BeginHorizontal ();  	GUILayout.Space (10);  	property.Draw ();  	GUILayout.EndHorizontal ();  }  
Magic Number,StrumpyShaderEditor,ShaderInputs,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\Graph\Properties\ShaderInputs.cs,Draw,The following statement contains a magic number: if (property.Expanded) {  	GUILayout.Space (3);  	GUILayout.BeginHorizontal ();  	GUILayout.Label ("Description"' new[] {  		GUILayout.Width (69)  	});  	property.PropertyDescriptionDisplay = GUILayout.TextField (property.PropertyDescriptionDisplay);  	GUILayout.EndHorizontal ();  	GUILayout.BeginHorizontal ();  	GUILayout.Space (10);  	property.Draw ();  	GUILayout.EndHorizontal ();  }  
Magic Number,StrumpyShaderEditor,ShaderInputs,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\Graph\Properties\ShaderInputs.cs,Draw,The following statement contains a magic number: if (property.Expanded) {  	GUILayout.Space (3);  	GUILayout.BeginHorizontal ();  	GUILayout.Label ("Description"' new[] {  		GUILayout.Width (69)  	});  	property.PropertyDescriptionDisplay = GUILayout.TextField (property.PropertyDescriptionDisplay);  	GUILayout.EndHorizontal ();  	GUILayout.BeginHorizontal ();  	GUILayout.Space (10);  	property.Draw ();  	GUILayout.EndHorizontal ();  }  
Magic Number,StrumpyShaderEditor,ShaderInputs,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\Graph\Properties\ShaderInputs.cs,Draw,The following statement contains a magic number: GUILayout.Space (3);  
Magic Number,StrumpyShaderEditor,ShaderInputs,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\Graph\Properties\ShaderInputs.cs,Draw,The following statement contains a magic number: GUILayout.Label ("Description"' new[] {  	GUILayout.Width (69)  });  
Magic Number,StrumpyShaderEditor,ShaderInputs,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\Graph\Properties\ShaderInputs.cs,Draw,The following statement contains a magic number: GUILayout.Space (10);  
Magic Number,StrumpyShaderEditor,ShaderInputs,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\Graph\Properties\ShaderInputs.cs,Draw,The following statement contains a magic number: GUILayout.Space (10);  
Magic Number,StrumpyShaderEditor,ShaderProperty,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\Graph\Properties\ShaderProperty.cs,Initialize,The following statement contains a magic number: if (_propertyDescription.Length > 30) {  	_propertyDescription = _propertyDescription.Substring (0' 30);  }  
Magic Number,StrumpyShaderEditor,ShaderProperty,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\Graph\Properties\ShaderProperty.cs,Initialize,The following statement contains a magic number: if (_propertyDescription.Length > 30) {  	_propertyDescription = _propertyDescription.Substring (0' 30);  }  
Magic Number,StrumpyShaderEditor,ShaderProperty,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\Graph\Properties\ShaderProperty.cs,Initialize,The following statement contains a magic number: _propertyDescription = _propertyDescription.Substring (0' 30);  
Magic Number,StrumpyShaderEditor,Texture2DProperty,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\Graph\Properties\Texture2DProperty.cs,Draw,The following statement contains a magic number: _previewTexture = (Texture2D)EditorGUILayout.ObjectField (_previewTexture' typeof(Texture2D)' new[] {  	GUILayout.Width (60)'  	GUILayout.Height (60)  });  
Magic Number,StrumpyShaderEditor,Texture2DProperty,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\Graph\Properties\Texture2DProperty.cs,Draw,The following statement contains a magic number: _previewTexture = (Texture2D)EditorGUILayout.ObjectField (_previewTexture' typeof(Texture2D)' new[] {  	GUILayout.Width (60)'  	GUILayout.Height (60)  });  
Magic Number,StrumpyShaderEditor,TextureCubeProperty,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\Graph\Properties\TextureCubeProperty.cs,Draw,The following statement contains a magic number: previewTexture = (Cubemap)EditorGUILayout.ObjectField (previewTexture' typeof(Cubemap)' new[] {  	GUILayout.Width (60)'  	GUILayout.Height (60)  });  
Magic Number,StrumpyShaderEditor,TextureCubeProperty,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\Graph\Properties\TextureCubeProperty.cs,Draw,The following statement contains a magic number: previewTexture = (Cubemap)EditorGUILayout.ObjectField (previewTexture' typeof(Cubemap)' new[] {  	GUILayout.Width (60)'  	GUILayout.Height (60)  });  
Magic Number,StrumpyShaderEditor,ShaderSettings,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\Graph\Settings\ShaderSettings.cs,Initialize,The following statement contains a magic number: _lod = _lod ?? 100;  
Magic Number,StrumpyShaderEditor,ShaderSettings,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\Graph\Settings\ShaderSettings.cs,Draw,The following statement contains a magic number: GUILayout.Space (8);  
Magic Number,StrumpyShaderEditor,ShaderSettings,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\Graph\Settings\ShaderSettings.cs,Draw,The following statement contains a magic number: if (_showQueueSettings) {  	var renderTypeContent = new GUIContent ("Render Type"' "This is the rendertype tag inserted into the shader. Can be used for shader replace");  	_renderType = (RenderType)EditorGUILayout.EnumPopup (renderTypeContent' _renderType);  	if (_renderType == RenderType.Custom)  		_renderTypeCustom.Value = EditorGUILayout.TextField ("Custom Type"' _renderTypeCustom.Value);  	var queueContent = new GUIContent ("Render Queue"' "The render queue that this material will be put in");  	_queue = (Queue)EditorGUILayout.EnumPopup (queueContent' _queue);  	var offContent = new GUIContent ("Queue Offset"' "Offset for drawing. Used to ensure some things draw before or after others' it specifically is an offset from the given queue- That is to say' you won't have a transparent object draw before an opaque object (or similar) due to this offset.");  	_queueAdjust = EditorGUILayout.IntSlider (offContent' _queueAdjust.Value' -100' 100);  }  
Magic Number,StrumpyShaderEditor,ShaderSettings,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\Graph\Settings\ShaderSettings.cs,Draw,The following statement contains a magic number: if (_showQueueSettings) {  	var renderTypeContent = new GUIContent ("Render Type"' "This is the rendertype tag inserted into the shader. Can be used for shader replace");  	_renderType = (RenderType)EditorGUILayout.EnumPopup (renderTypeContent' _renderType);  	if (_renderType == RenderType.Custom)  		_renderTypeCustom.Value = EditorGUILayout.TextField ("Custom Type"' _renderTypeCustom.Value);  	var queueContent = new GUIContent ("Render Queue"' "The render queue that this material will be put in");  	_queue = (Queue)EditorGUILayout.EnumPopup (queueContent' _queue);  	var offContent = new GUIContent ("Queue Offset"' "Offset for drawing. Used to ensure some things draw before or after others' it specifically is an offset from the given queue- That is to say' you won't have a transparent object draw before an opaque object (or similar) due to this offset.");  	_queueAdjust = EditorGUILayout.IntSlider (offContent' _queueAdjust.Value' -100' 100);  }  
Magic Number,StrumpyShaderEditor,ShaderSettings,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\Graph\Settings\ShaderSettings.cs,Draw,The following statement contains a magic number: _queueAdjust = EditorGUILayout.IntSlider (offContent' _queueAdjust.Value' -100' 100);  
Magic Number,StrumpyShaderEditor,ShaderSettings,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\Graph\Settings\ShaderSettings.cs,Draw,The following statement contains a magic number: _queueAdjust = EditorGUILayout.IntSlider (offContent' _queueAdjust.Value' -100' 100);  
Magic Number,StrumpyShaderEditor,ShaderSettings,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\Graph\Settings\ShaderSettings.cs,Draw,The following statement contains a magic number: GUILayout.Space (8);  
Magic Number,StrumpyShaderEditor,ShaderSettings,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\Graph\Settings\ShaderSettings.cs,Draw,The following statement contains a magic number: if (_showCullingAndDepthSettings) {  	var zWriteContent = new GUIContent ("Write Depth"' "Depth is considered when testing other objects. Disable for certain effects' like letting other things draw over yourself' or for speed on most overlays.");  	_zWrite = (ZWrite)EditorGUILayout.EnumPopup (zWriteContent' _zWrite);  	var cullModeContent = new GUIContent ("CullMode"' "Select back / forward to clip backwards facing polygons");  	_cullMode = (CullMode)EditorGUILayout.EnumPopup (cullModeContent' _cullMode);  	var zTestContent = new GUIContent ("ZTest"' "Select Z-Test Value");  	_zTest = (ZTest)EditorGUILayout.EnumPopup (zTestContent' _zTest);  	var enableLODContent = new GUIContent ("Enable LOD"' "Enable Shader LOD scaling");  	_enableLOD = EditorGUILayout.BeginToggleGroup (enableLODContent' _enableLOD);  	_lod = EditorGUILayout.IntSlider ("LOD"' _lod' 0' 1000);  	EditorGUILayout.EndToggleGroup ();  }  
Magic Number,StrumpyShaderEditor,ShaderSettings,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\Graph\Settings\ShaderSettings.cs,Draw,The following statement contains a magic number: _lod = EditorGUILayout.IntSlider ("LOD"' _lod' 0' 1000);  
Magic Number,StrumpyShaderEditor,ShaderSettings,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\Graph\Settings\ShaderSettings.cs,Draw,The following statement contains a magic number: GUILayout.Space (8);  
Magic Number,StrumpyShaderEditor,ShaderSettings,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\Graph\Settings\ShaderSettings.cs,Draw,The following statement contains a magic number: GUILayout.Space (8);  
Magic Number,StrumpyShaderEditor,ShaderSettings,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\Graph\Settings\ShaderSettings.cs,Draw,The following statement contains a magic number: GUILayout.Space (8);  
Missing Default,StrumpyShaderEditor,InstructionCounter,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\GraphEditor\InstructionCounter.cs,CountInstructions,The following switch statement is missing a default case: switch (stage) {  case ParseStage.Vertex: {  	switch (api) {  	case ParseAPI.GL: {  		GL_V_ALU = Mathf.Max (ALUFound' GL_V_ALU);  		break;  	}  	case ParseAPI.D3D: {  		D3D_V_ALU = Mathf.Max (ALUFound' D3D_V_ALU);  		break;  	}  	}  	break;  }  case ParseStage.Fragment: {  	switch (api) {  	case ParseAPI.GL: {  		GL_ALU = Mathf.Max (ALUFound' GL_ALU);  		break;  	}  	case ParseAPI.D3D: {  		D3D_ALU = Mathf.Max (ALUFound' D3D_ALU);  		break;  	}  	}  	break;  }  }  
Missing Default,StrumpyShaderEditor,InstructionCounter,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\GraphEditor\InstructionCounter.cs,CountInstructions,The following switch statement is missing a default case: switch (api) {  case ParseAPI.GL: {  	GL_V_ALU = Mathf.Max (ALUFound' GL_V_ALU);  	break;  }  case ParseAPI.D3D: {  	D3D_V_ALU = Mathf.Max (ALUFound' D3D_V_ALU);  	break;  }  }  
Missing Default,StrumpyShaderEditor,InstructionCounter,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\GraphEditor\InstructionCounter.cs,CountInstructions,The following switch statement is missing a default case: switch (api) {  case ParseAPI.GL: {  	GL_ALU = Mathf.Max (ALUFound' GL_ALU);  	break;  }  case ParseAPI.D3D: {  	D3D_ALU = Mathf.Max (ALUFound' D3D_ALU);  	break;  }  }  
Missing Default,StrumpyShaderEditor,InstructionCounter,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\GraphEditor\InstructionCounter.cs,CountInstructions,The following switch statement is missing a default case: switch (api) {  case ParseAPI.GL: {  	GL_TEX = Mathf.Max (TEXFound' GL_TEX);  	break;  }  case ParseAPI.D3D: {  	D3D_TEX = Mathf.Max (TEXFound' D3D_TEX);  	break;  }  }  
Missing Default,StrumpyShaderEditor,NodeEditor,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\GraphEditor\NodeEditor.cs,OnGUI,The following switch statement is missing a default case: switch (node.CurrentState) {  case (NodeState.Valid):  	GUI.color = Color.white;  	break;  case (NodeState.NotConnected):  	GUI.color = new Color (0.8f' 0.8f' 1f);  	break;  case (NodeState.CircularReferenceInGraph):  	GUI.color = new Color (0.8f' 0.8f' 0f);  	break;  case (NodeState.Error):  	GUI.color = Color.red;  	break;  }  
Missing Default,StrumpyShaderEditor,NodeEditor,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\GraphEditor\NodeEditor.cs,FileMenuSelect,The following switch statement is missing a default case: switch (option) {  case FileMenuOptions.NewGraph: {  	if (EditorUtility.DisplayDialog ("New Graph"' "Old graph will be lost' are you sure?"' "Confirm"' "Cancel")) {  		_nextGraph = new ShaderGraph ();  		_nextGraph.Initialize (new Rect (0' 0' Screen.width' Screen.height)' true);  		_graphNeedsUpdate = true;  		_lastGraphPath = "";  		_lastExportPath = "";  		_undoChain = new GraphHistory (_serializableTypes);  		_markDirtyOnLoad = true;  	}  	break;  }  case FileMenuOptions.ExportGraph:  case FileMenuOptions.ExportAsGraph: {  	_shouldExportShader = true;  	if (!String.IsNullOrEmpty (_lastExportPath) && option == FileMenuOptions.ExportGraph) {  		_quickExport = true;  	}  	if (!String.IsNullOrEmpty (_lastGraphPath)) {  		_shouldSaveGraph = true;  		_quickSaving = true;  	}  	break;  }  case FileMenuOptions.SaveGraph:  case FileMenuOptions.SaveAsGraph: {  	_shouldSaveGraph = true;  	if (!String.IsNullOrEmpty (_lastGraphPath) && option == FileMenuOptions.SaveGraph) {  		_quickSaving = true;  	}  	break;  }  case FileMenuOptions.LoadGraph: {  	_shouldLoadGraph = true;  	break;  }  }  
Missing Default,StrumpyShaderEditor,NodeEditor,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\GraphEditor\NodeEditor.cs,DrawOptions,The following switch statement is missing a default case: switch (selectedOption) {  case OptionsSelection.File: {  	var menu = new GenericMenu ();  	menu.AddItem (new GUIContent ("New Graph...")' false' FileMenuSelect' FileMenuOptions.NewGraph);  	menu.AddItem (new GUIContent ("Load...")' false' FileMenuSelect' FileMenuOptions.LoadGraph);  	if (String.IsNullOrEmpty (_lastGraphPath)) {  		menu.AddDisabledItem (new GUIContent ("Save"));  	}  	else {  		menu.AddItem (new GUIContent ("Save")' false' FileMenuSelect' FileMenuOptions.SaveGraph);  	}  	menu.AddItem (new GUIContent ("Save As...")' false' FileMenuSelect' FileMenuOptions.SaveAsGraph);  	if (String.IsNullOrEmpty (_lastExportPath)) {  		menu.AddDisabledItem (new GUIContent ("Export"));  	}  	else {  		menu.AddItem (new GUIContent ("Export")' false' FileMenuSelect' FileMenuOptions.ExportGraph);  	}  	menu.AddItem (new GUIContent ("Export As...")' false' FileMenuSelect' FileMenuOptions.ExportAsGraph);  	menu.ShowAsContext ();  	break;  }  case OptionsSelection.Graphs: {  	var menu = new GenericMenu ();  	menu.AddItem (new GUIContent ("Pixel")' false' SubGraphSelect' SubGraphType.Pixel);  	menu.AddItem (new GUIContent ("Vertex")' false' SubGraphSelect' SubGraphType.Vertex);  	menu.AddItem (new GUIContent ("Lighting")' false' SubGraphSelect' SubGraphType.SimpleLighting);  	menu.ShowAsContext ();  	break;  }  case OptionsSelection.Comments: {  	_showComments = !_showComments;  	break;  }  case OptionsSelection.Preview: {  	_shouldOpenPreviewWindow = true;  	break;  }  }  
Missing Default,StrumpyShaderEditor,NodeEditor,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\GraphEditor\NodeEditor.cs,HandleEvents,The following switch statement is missing a default case: switch (Event.current.type) {  case EventType.DragUpdated:  case EventType.DragPerform: {  	if (position.Contains (_currentMousePosition)) {  		var path = DragAndDrop.paths [0];  		if (path.EndsWith ("sgraph")) {  			DragAndDrop.visualMode = DragAndDropVisualMode.Copy;  			if (Event.current.type == EventType.dragPerform) {  				_shouldLoadGraph = true;  				_overrideLoadPath = path;  				_lastGraphPath = path;  				_markDirtyOnLoad = true;  			}  			Event.current.Use ();  		}  	}  	break;  }  case EventType.MouseDown: {  	if (Event.current.button == 0) {  		if (LeftMouseDown ()) {  			Event.current.Use ();  			return;  		}  	}  	break;  }  case EventType.ContextClick: {  	if (RightMouseDown ()) {  		Event.current.Use ();  		return;  	}  	break;  }  //Handle drag  case EventType.MouseDrag: {  	_currentMousePosition.x = Event.current.mousePosition.x;  	_currentMousePosition.y = Event.current.mousePosition.y;  	//If Left click drag...  	if (Event.current.button == 0) {  		if (LeftMouseDragged ()) {  			Event.current.Use ();  		}  	}  	if (Event.current.button == 2) {  		_middleMouseDrag = true;  		_selectedGraph.CurrentSubGraph.DrawOffset += Event.current.delta;  		Event.current.Use ();  	}  	break;  }  case EventType.MouseUp: {  	//Mouse button released' unmark hot  	_selectedGraph.UnmarkSelectedHot ();  	if (_focusChanged) {  		_focusChangedUpdate = true;  		_focusChanged = false;  	}  	//Selection box  	if (_doingSelectBox) {  		_doingSelectBox = false;  		if (_selectedGraph.Select (GetSelectionArea ()' Event.current.modifiers == EventModifiers.Shift)) {  			NextSelectedNode = _selectedGraph.FirstSelected;  			_updateSelection = true;  			MarkDirty ();  		}  		Event.current.Use ();  	}  	if (_movingNodes) {  		_movingNodes = false;  		MarkDirty ();  		Event.current.Use ();  	}  	if (_middleMouseDrag) {  		_middleMouseDrag = false;  		MarkDirty ();  		Event.current.Use ();  	}  	break;  }  case EventType.Layout: {  	if (_nextGraph != null && _nextGraph != _selectedGraph) {  		_selectedGraph = _nextGraph;  		if (_markDirtyOnLoad) {  			MarkDirty ();  			_markDirtyOnLoad = false;  		}  		_selectedNode = null;  	}  	if (_selectedGraph.CurrentSubGraphType != _currentSubGraphType) {  		_selectedGraph.CurrentSubGraphType = _currentSubGraphType;  		_selectedGraph.Deselect ();  		MarkDirty ();  		_selectedNode = null;  	}  	if (_updateSelection) {  		_focusChanged = true;  		_selectedNode = NextSelectedNode;  		_updateSelection = false;  	}  	break;  }  case EventType.ValidateCommand: {  	if (Event.current.commandName == "Copy" || Event.current.commandName == "Paste" || Event.current.commandName == "Duplicate" || Event.current.commandName == "SelectAll") {  		Event.current.Use ();  	}  	break;  }  case EventType.ExecuteCommand: {  	if (Event.current.commandName == "Copy") {  		CopySelectedNodes ();  		Event.current.Use ();  	}  	if (Event.current.commandName == "Paste") {  		PasteNodes ();  		Event.current.Use ();  	}  	if (Event.current.commandName == "Duplicate") {  		CopySelectedNodes ();  		PasteNodes ();  		MarkDirty ();  		Event.current.Use ();  	}  	if (Event.current.commandName == "SelectAll") {  		_selectedGraph.SelectAll ();  		NextSelectedNode = _selectedGraph.FirstSelected;  		_updateSelection = true;  		MarkDirty ();  		Event.current.Use ();  	}  	break;  }  }  
Missing Default,StrumpyShaderEditor,NodeEditor,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\GraphEditor\NodeEditor.cs,DrawSettings,The following switch statement is missing a default case: switch (_currentSettings) {  case SelectedSettings.Node:  	node = GUI.skin.buttonLeftOn ();  	break;  case SelectedSettings.Inputs:  	inputs = GUI.skin.buttonMidOn ();  	break;  case SelectedSettings.Settings:  	settings = GUI.skin.buttonMidOn ();  	break;  case SelectedSettings.Nodes:  	nodes = GUI.skin.buttonRightOn ();  	break;  }  
Missing Default,StrumpyShaderEditor,NodeEditor,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\GraphEditor\NodeEditor.cs,DrawSettings,The following switch statement is missing a default case: switch (_currentSettings) {  case SelectedSettings.Node:  	if (_selectedNode != null) {  		GUI.changed = false;  		_selectedNode.DrawProperties ();  		_selectedNode.DrawCommentField ();  		// Texel - Good place to remind users of errors aswell' now that we have more space.  		var errors = _selectedNode.ErrorMessages.Aggregate (""' (current' error) => current + (error + "\n"));  		if (errors != "")  			errors = "ERROR: " + errors;  		var oldColor = GUI.color;  		GUI.color = Color.red;  		GUILayout.Label (new GUIContent (errors' "Better fix this."));  		GUI.color = oldColor;  		//Potential change to node name ect... need to force update of error states  		if (GUI.changed) {  			//Do not do full mark dirty on simple GUI change  			_selectedGraph.MarkDirty ();  		}  		GUILayout.FlexibleSpace ();  	}  	else {  		GUILayout.Label ("Select a node to edit");  	}  	break;  case SelectedSettings.Inputs:  	_selectedGraph.DrawInput ();  	break;  case SelectedSettings.Settings:  	_selectedGraph.DrawSettings ();  	break;  case SelectedSettings.Nodes:  	_popupMenu.GuiPaneDraw (new Vector2 (_detailsBox.x' _detailsBox.y));  	break;  }  
Missing Default,StrumpyShaderEditor,PreviewWindowInternal,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\GraphEditor\PreviewWindowInternal.cs,OnGUI,The following switch statement is missing a default case: switch (Event.current.type) {  case EventType.MouseDown:  	if (drawPos.Contains (Event.current.mousePosition)) {  		GUIUtility.hotControl = dragControl;  	}  	break;  case EventType.MouseDrag:  	if (GUIUtility.hotControl == dragControl) {  		_cameraRotation -= Event.current.delta;  	}  	break;  case EventType.MouseUp:  	if (GUIUtility.hotControl == dragControl) {  		GUIUtility.hotControl = 0;  	}  	break;  }  
Missing Default,StrumpyShaderEditor,Node,C:\repos\stramit_SSE\ShaderEditor\Assets\StrumpyShaderEditor\Editor\Graph\Nodes\Node.cs,Draw,The following switch statement is missing a default case: switch (CurrentState) {  case (NodeState.Valid):  	GUI.color = Color.white;  	break;  case (NodeState.NotConnected):  	GUI.color = new Color (0.8f' 0.8f' 1f);  	break;  case (NodeState.CircularReferenceInGraph):  	GUI.color = new Color (0.8f' 0.8f' 0f);  	break;  case (NodeState.Error): {  	GUI.color = Color.red;  	//GUILayout.BeginArea(new Rect(drawPos.x' drawPos.yMax' 300' 200));  	foreach (var error in ErrorMessages) {  		var content = new GUIContent (error);  		float wMin' wMax;  		GUI.skin.box.CalcMinMaxWidth (content' out wMin' out wMax);  		var height = GUI.skin.box.CalcHeight (content' wMax);  		GUI.Box (new Rect (drawPosOffset.x' drawPosOffset.yMax + boxOffset' wMax' height)' content);  		boxOffset += height;  	}  	break;  }  }  
