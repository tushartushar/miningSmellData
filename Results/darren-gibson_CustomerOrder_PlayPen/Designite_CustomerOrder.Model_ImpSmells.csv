Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,CustomerOrder.Model.Command,ProductAddCommand,C:\repos\darren-gibson_CustomerOrder_PlayPen\CustomerOrder.Model\Command\ProductAddCommand.cs,ProductAddCommand,The method has 5 parameters.
Long Parameter List,CustomerOrder.Model.Order,CustomerOrder,C:\repos\darren-gibson_CustomerOrder_PlayPen\CustomerOrder.Model\Order\CustomerOrder.cs,CustomerOrder,The method has 5 parameters.
Long Parameter List,CustomerOrder.Model.Order,ProductAddTrigger,C:\repos\darren-gibson_CustomerOrder_PlayPen\CustomerOrder.Model\Order\ProductAddTrigger.cs,ProductAddTrigger,The method has 5 parameters.
Long Statement,CustomerOrder.Model.Order,CustomerOrder,C:\repos\darren-gibson_CustomerOrder_PlayPen\CustomerOrder.Model\Order\CustomerOrder.cs,ProductAdd,The length of the statement  "	ITrigger<ProductAdded> trigger = new ProductAddTrigger (_events' productIdentifier' requiredQuantity' RepriceOrder' OnProductAdded); " is 132.
Long Statement,CustomerOrder.Model.Order,CustomerOrderStateMachine,C:\repos\darren-gibson_CustomerOrder_PlayPen\CustomerOrder.Model\Order\CustomerOrderStateMachine.cs,EnsureCanTrigger,The length of the statement  "		throw new InvalidOperationException (string.Format ("Currently in State {0}' cannot Fire {1}"' State' command.TriggerType)); " is 124.
Magic Number,CustomerOrder.Model.Command,CommandRunner,C:\repos\darren-gibson_CustomerOrder_PlayPen\CustomerOrder.Model\Command\CommandRunner.cs,DequeuAndExecuteCommands,The following statement contains a magic number: while (Status == CommandRunnerStatus.Started) {  	ICommand command;  	if ((command = _queue.TryDequeue (100)) != null) {  		var result = RunCommandAndReturnResultOrException (command);  		// TODO: The command could complete successfully and the result may never get saved - needs to be fixed.  		_repository.Save (command' result);  		OnCommandComplete (command);  	}  }  
Magic Number,CustomerOrder.Model.Command,CommandRunner,C:\repos\darren-gibson_CustomerOrder_PlayPen\CustomerOrder.Model\Command\CommandRunner.cs,DequeuAndExecuteCommands,The following statement contains a magic number: if ((command = _queue.TryDequeue (100)) != null) {  	var result = RunCommandAndReturnResultOrException (command);  	// TODO: The command could complete successfully and the result may never get saved - needs to be fixed.  	_repository.Save (command' result);  	OnCommandComplete (command);  }  
Magic Number,CustomerOrder.Model,Money,C:\repos\darren-gibson_CustomerOrder_PlayPen\CustomerOrder.Model\Money.cs,GetHashCode,The following statement contains a magic number: unchecked {  	return ((int)_currency * 397) ^ _amount.GetHashCode ();  }  
Magic Number,CustomerOrder.Model,Money,C:\repos\darren-gibson_CustomerOrder_PlayPen\CustomerOrder.Model\Money.cs,GetHashCode,The following statement contains a magic number: return ((int)_currency * 397) ^ _amount.GetHashCode ();  
Magic Number,CustomerOrder.Model,Tender,C:\repos\darren-gibson_CustomerOrder_PlayPen\CustomerOrder.Model\Tender.cs,GetHashCode,The following statement contains a magic number: unchecked {  	return (_tenderType.GetHashCode () * 397) ^ _amount.GetHashCode ();  }  
Magic Number,CustomerOrder.Model,Tender,C:\repos\darren-gibson_CustomerOrder_PlayPen\CustomerOrder.Model\Tender.cs,GetHashCode,The following statement contains a magic number: return (_tenderType.GetHashCode () * 397) ^ _amount.GetHashCode ();  
Magic Number,CustomerOrder.Model,Quantity,C:\repos\darren-gibson_CustomerOrder_PlayPen\CustomerOrder.Model\Quantity.cs,GetHashCode,The following statement contains a magic number: unchecked {  	return (_amount.GetHashCode () * 397) ^ (int)_unitOfMeasure;  }  
Magic Number,CustomerOrder.Model,Quantity,C:\repos\darren-gibson_CustomerOrder_PlayPen\CustomerOrder.Model\Quantity.cs,GetHashCode,The following statement contains a magic number: return (_amount.GetHashCode () * 397) ^ (int)_unitOfMeasure;  
