Implementation smell,Namespace,Class,File,Method,Description
Long Method,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,GetBaseEggMoves,The method has 105 lines of code.
Long Method,PKHeX.Core,FormVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\FormVerifier.cs,VerifyForm,The method has 147 lines of code.
Long Method,PKHeX.Core,PK3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PK3.cs,ConvertToPK4,The method has 113 lines of code.
Long Method,PKHeX.Core,PK5,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PK5.cs,ConvertToPK6,The method has 166 lines of code.
Long Method,PKHeX.Core,PK7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PK7.cs,ConvertToPK8,The method has 124 lines of code.
Long Method,PKHeX.Core,G4PKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Shared\G4PKM.cs,ConvertTo,The method has 175 lines of code.
Long Method,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsGen6,The method has 116 lines of code.
Complex Method,PKHeX.Core,BatchEditing,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\Bulk\BatchEditing.cs,SetSuggestedPKMProperty,Cyclomatic complexity of the method is 13
Complex Method,PKHeX.Core,BatchEditing,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\Bulk\BatchEditing.cs,SetComplexProperty,Cyclomatic complexity of the method is 11
Complex Method,PKHeX.Core,Extensions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\Saves\Slots\Extensions.cs,IsFromTrainer,Cyclomatic complexity of the method is 9
Complex Method,PKHeX.Core,Extensions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\Saves\Slots\Extensions.cs,SanitizeGeoLocationData,Cyclomatic complexity of the method is 11
Complex Method,PKHeX.Core,ShowdownSet,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\ShowdownSet.cs,ParseLines,Cyclomatic complexity of the method is 9
Complex Method,PKHeX.Core,ShowdownSet,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\ShowdownSet.cs,ParseEntry,Cyclomatic complexity of the method is 10
Complex Method,PKHeX.Core,ShowdownSet,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\ShowdownSet.cs,ConvertFormToShowdown,Cyclomatic complexity of the method is 11
Complex Method,PKHeX.Core,ShowdownSet,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\ShowdownSet.cs,ConvertFormFromShowdown,Cyclomatic complexity of the method is 14
Complex Method,PKHeX.Core,GameDataSource,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameDataSource.cs,GetLocationList,Cyclomatic complexity of the method is 24
Complex Method,PKHeX.Core,GameStrings,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameStrings.cs,GetLocationName,Cyclomatic complexity of the method is 8
Complex Method,PKHeX.Core,GameStrings,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameStrings.cs,GetLocationNames,Cyclomatic complexity of the method is 9
Complex Method,PKHeX.Core,GameUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameUtil.cs,GetMetLocationVersionGroup,Cyclomatic complexity of the method is 19
Complex Method,PKHeX.Core,GameUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameUtil.cs,GetGeneration,Cyclomatic complexity of the method is 9
Complex Method,PKHeX.Core,GameUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameUtil.cs,GetMaxSpeciesID,Cyclomatic complexity of the method is 12
Complex Method,PKHeX.Core,GameUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameUtil.cs,Contains,Cyclomatic complexity of the method is 33
Complex Method,PKHeX.Core,LegalityAnalysis,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Analysis.cs,GetLegalityReport,Cyclomatic complexity of the method is 8
Complex Method,PKHeX.Core,LegalityAnalysis,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Analysis.cs,GetVerboseLegalityReport,Cyclomatic complexity of the method is 15
Complex Method,PKHeX.Core,EncounterArea4DPPt,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterArea4DPPt.cs,GetArea4DPPt,Cyclomatic complexity of the method is 20
Complex Method,PKHeX.Core,EncounterArea4HGSS,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterArea4HGSS.cs,GetArea4HGSS,Cyclomatic complexity of the method is 13
Complex Method,PKHeX.Core,EncounterArea6XY,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterArea6XY.cs,GetFilteredSlots,Cyclomatic complexity of the method is 8
Complex Method,PKHeX.Core,EncounterArea7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterArea7.cs,GetFilteredSlots,Cyclomatic complexity of the method is 13
Complex Method,PKHeX.Core,EncounterArea7g,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterArea7g.cs,GetFilteredSlots,Cyclomatic complexity of the method is 9
Complex Method,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,GetBaseEggMoves,Cyclomatic complexity of the method is 32
Complex Method,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,GetDebutGeneration,Cyclomatic complexity of the method is 9
Complex Method,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,IsEvolvedFormChange,Cyclomatic complexity of the method is 8
Complex Method,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,IsEvolutionValidWithMove,Cyclomatic complexity of the method is 8
Complex Method,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,GetValidMoves,Cyclomatic complexity of the method is 11
Complex Method,PKHeX.Core,EncounterUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\EncounterUtil.cs,MarkEncountersStaticMagnetPullPermutation,Cyclomatic complexity of the method is 9
Complex Method,PKHeX.Core,EncounterSlot,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\EncounterSlot.cs,SetFormatSpecificData,Cyclomatic complexity of the method is 11
Complex Method,PKHeX.Core,EncounterStatic,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\EncounterStatic.cs,ConvertToPKM,Cyclomatic complexity of the method is 11
Complex Method,PKHeX.Core,EncounterStatic,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\EncounterStatic.cs,IsMatch,Cyclomatic complexity of the method is 11
Complex Method,PKHeX.Core,EncounterStatic,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\EncounterStatic.cs,IsMatchEggLocation,Cyclomatic complexity of the method is 24
Complex Method,PKHeX.Core,EncounterTrade,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\EncounterTrade.cs,ApplyDetails,Cyclomatic complexity of the method is 10
Complex Method,PKHeX.Core,EncounterTrade,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\EncounterTrade.cs,IsMatch,Cyclomatic complexity of the method is 13
Complex Method,PKHeX.Core,EncounterTrade,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\EncounterTrade.cs,IsMatchVC2,Cyclomatic complexity of the method is 8
Complex Method,PKHeX.Core,EncounterTrade,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\EncounterTrade.cs,IsValidTradeOT12,Cyclomatic complexity of the method is 9
Complex Method,PKHeX.Core,EncounterEggGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Generator\EncounterEggGenerator.cs,GenerateEggs,Cyclomatic complexity of the method is 9
Complex Method,PKHeX.Core,EncounterGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Generator\EncounterGenerator.cs,GetEncounters3,Cyclomatic complexity of the method is 12
Complex Method,PKHeX.Core,EncounterGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Generator\EncounterGenerator.cs,GenerateRawEncounters12,Cyclomatic complexity of the method is 15
Complex Method,PKHeX.Core,EncounterGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Generator\EncounterGenerator.cs,GenerateRawEncounters,Cyclomatic complexity of the method is 14
Complex Method,PKHeX.Core,EncounterGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Generator\EncounterGenerator.cs,GenerateRawEncounters4,Cyclomatic complexity of the method is 19
Complex Method,PKHeX.Core,EncounterGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Generator\EncounterGenerator.cs,GenerateRawEncounters3,Cyclomatic complexity of the method is 17
Complex Method,PKHeX.Core,EncounterSlotGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Generator\EncounterSlotGenerator.cs,GetEncounterTable,Cyclomatic complexity of the method is 32
Complex Method,PKHeX.Core,EncounterStaticGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Generator\EncounterStaticGenerator.cs,GetEncounterStaticTable,Cyclomatic complexity of the method is 31
Complex Method,PKHeX.Core,EncounterSuggestion,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Information\EncounterSuggestion.cs,GetSuggestedEggMetLocation,Cyclomatic complexity of the method is 9
Complex Method,PKHeX.Core,EncounterSuggestion,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Information\EncounterSuggestion.cs,GetSuggestedTransferLocation,Cyclomatic complexity of the method is 8
Complex Method,PKHeX.Core,EncounterVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\EncounterVerifier.cs,VerifyEncounterEgg,Cyclomatic complexity of the method is 9
Complex Method,PKHeX.Core,EncounterVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\EncounterVerifier.cs,VerifyEncounterStatic,Cyclomatic complexity of the method is 11
Complex Method,PKHeX.Core,VerifyCurrentMoves,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\VerifyCurrentMoves.cs,ParseMovesForEncounters,Cyclomatic complexity of the method is 8
Complex Method,PKHeX.Core,VerifyCurrentMoves,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\VerifyCurrentMoves.cs,ParseMoves,Cyclomatic complexity of the method is 11
Complex Method,PKHeX.Core,VerifyCurrentMoves,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\VerifyCurrentMoves.cs,ParseMovesByGeneration,Cyclomatic complexity of the method is 18
Complex Method,PKHeX.Core,VerifyCurrentMoves,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\VerifyCurrentMoves.cs,ParseEggMoves,Cyclomatic complexity of the method is 11
Complex Method,PKHeX.Core,VerifyCurrentMoves,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\VerifyCurrentMoves.cs,ParseEggMovesRemaining,Cyclomatic complexity of the method is 11
Complex Method,PKHeX.Core,VerifyCurrentMoves,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\VerifyCurrentMoves.cs,ParseShedinjaEvolveMoves,Cyclomatic complexity of the method is 13
Complex Method,PKHeX.Core,VerifyCurrentMoves,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\VerifyCurrentMoves.cs,ParseEvolutionLevelupMove,Cyclomatic complexity of the method is 10
Complex Method,PKHeX.Core,VerifyCurrentMoves,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\VerifyCurrentMoves.cs,VerifyPreRelearnEggBase,Cyclomatic complexity of the method is 15
Complex Method,PKHeX.Core,EvolutionChain,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Evolutions\EvolutionChain.cs,GetChainAll,Cyclomatic complexity of the method is 22
Complex Method,PKHeX.Core,EvolutionChain,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Evolutions\EvolutionChain.cs,GetEvolutionChain,Cyclomatic complexity of the method is 8
Complex Method,PKHeX.Core,EvolutionLineage,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Evolutions\EvolutionLineage.cs,GetExplicitLineage,Cyclomatic complexity of the method is 8
Complex Method,PKHeX.Core,EvolutionLineage,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Evolutions\EvolutionLineage.cs,UpdateMinValues,Cyclomatic complexity of the method is 8
Complex Method,PKHeX.Core,EvolutionMethod,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Evolutions\EvolutionMethod.cs,Valid,Cyclomatic complexity of the method is 15
Complex Method,PKHeX.Core,MoveEgg,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveEgg.cs,GetEggMoves,Cyclomatic complexity of the method is 8
Complex Method,PKHeX.Core,MoveLevelUp,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveLevelUp.cs,GetIsLevelUpMove,Cyclomatic complexity of the method is 10
Complex Method,PKHeX.Core,MoveLevelUp,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveLevelUp.cs,GetIsLevelUp7,Cyclomatic complexity of the method is 9
Complex Method,PKHeX.Core,MoveLevelUp,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveLevelUp.cs,AddMovesLevelUp7,Cyclomatic complexity of the method is 9
Complex Method,PKHeX.Core,MoveTechnicalMachine,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveTechnicalMachine.cs,GetIsMachineMove,Cyclomatic complexity of the method is 11
Complex Method,PKHeX.Core,MoveTechnicalMachine,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveTechnicalMachine.cs,GetIsMachine6,Cyclomatic complexity of the method is 9
Complex Method,PKHeX.Core,MoveTechnicalMachine,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveTechnicalMachine.cs,GetIsMachine7,Cyclomatic complexity of the method is 13
Complex Method,PKHeX.Core,MoveTechnicalMachine,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveTechnicalMachine.cs,GetIsMachine8,Cyclomatic complexity of the method is 10
Complex Method,PKHeX.Core,MoveTechnicalMachine,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveTechnicalMachine.cs,GetTMHM,Cyclomatic complexity of the method is 10
Complex Method,PKHeX.Core,MoveTutor,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveTutor.cs,GetIsTutor3,Cyclomatic complexity of the method is 8
Complex Method,PKHeX.Core,MoveTutor,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveTutor.cs,GetTutorMoves,Cyclomatic complexity of the method is 8
Complex Method,PKHeX.Core,FrameFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\Frame\FrameFinder.cs,FilterNatureSync,Cyclomatic complexity of the method is 11
Complex Method,PKHeX.Core,FrameFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\Frame\FrameFinder.cs,IsValidPokeBlockNature,Cyclomatic complexity of the method is 12
Complex Method,PKHeX.Core,SlotRange,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\Frame\SlotRange.cs,GetCanEncounter,Cyclomatic complexity of the method is 11
Complex Method,PKHeX.Core,TeamLockResult,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\Locks\TeamLockResult.cs,GetAllLocks,Cyclomatic complexity of the method is 9
Complex Method,PKHeX.Core,MethodFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\MethodFinder.cs,Analyze,Cyclomatic complexity of the method is 12
Complex Method,PKHeX.Core,MethodFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\MethodFinder.cs,GetLCRNGMatch,Cyclomatic complexity of the method is 10
Complex Method,PKHeX.Core,MethodFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\MethodFinder.cs,GetLCRNGUnownMatch,Cyclomatic complexity of the method is 10
Complex Method,PKHeX.Core,MethodFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\MethodFinder.cs,GetXDRNGMatch,Cyclomatic complexity of the method is 8
Complex Method,PKHeX.Core,MethodFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\MethodFinder.cs,GetChannelMatch,Cyclomatic complexity of the method is 8
Complex Method,PKHeX.Core,MethodFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\MethodFinder.cs,GetCuteCharmMatch,Cyclomatic complexity of the method is 8
Complex Method,PKHeX.Core,MethodFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\MethodFinder.cs,GetBACDMatch,Cyclomatic complexity of the method is 11
Complex Method,PKHeX.Core,MethodFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\MethodFinder.cs,IsCompatible3,Cyclomatic complexity of the method is 9
Complex Method,PKHeX.Core,MethodFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\MethodFinder.cs,IsCompatible4,Cyclomatic complexity of the method is 11
Complex Method,PKHeX.Core,MethodFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\MethodFinder.cs,GetCuteCharmGenderSpecies,Cyclomatic complexity of the method is 8
Complex Method,PKHeX.Core,PIDGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\PIDGenerator.cs,GetGeneratorMethod,Cyclomatic complexity of the method is 11
Complex Method,PKHeX.Core,AbilityVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\AbilityVerifier.cs,VerifyFixedAbility,Cyclomatic complexity of the method is 10
Complex Method,PKHeX.Core,AbilityVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\AbilityVerifier.cs,VerifyAbilityMG,Cyclomatic complexity of the method is 8
Complex Method,PKHeX.Core,BallVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\BallVerifier.cs,VerifyBallEggGen6,Cyclomatic complexity of the method is 22
Complex Method,PKHeX.Core,BallVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\BallVerifier.cs,VerifyBallEggGen7,Cyclomatic complexity of the method is 23
Complex Method,PKHeX.Core,BallVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\BallVerifier.cs,VerifyBallEggGen8,Cyclomatic complexity of the method is 26
Complex Method,PKHeX.Core,EffortValueVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\EffortValueVerifier.cs,Verify,Cyclomatic complexity of the method is 13
Complex Method,PKHeX.Core,FormVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\FormVerifier.cs,VerifyForm,Cyclomatic complexity of the method is 42
Complex Method,PKHeX.Core,HyperTrainingVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\HyperTrainingVerifier.cs,Verify,Cyclomatic complexity of the method is 8
Complex Method,PKHeX.Core,LevelVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\LevelVerifier.cs,Verify,Cyclomatic complexity of the method is 11
Complex Method,PKHeX.Core,MedalVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\MedalVerifier.cs,VerifyMedalsRegular,Cyclomatic complexity of the method is 14
Complex Method,PKHeX.Core,MemoryVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\MemoryVerifier.cs,VerifyHistory,Cyclomatic complexity of the method is 37
Complex Method,PKHeX.Core,MemoryVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\MemoryVerifier.cs,VerifyCommonMemory,Cyclomatic complexity of the method is 9
Complex Method,PKHeX.Core,MemoryVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\MemoryVerifier.cs,VerifyOTMemory,Cyclomatic complexity of the method is 14
Complex Method,PKHeX.Core,MemoryVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\MemoryVerifier.cs,VerifyHTMemory,Cyclomatic complexity of the method is 15
Complex Method,PKHeX.Core,MiscVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\MiscVerifier.cs,Verify,Cyclomatic complexity of the method is 9
Complex Method,PKHeX.Core,MiscVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\MiscVerifier.cs,VerifyMiscFatefulEncounter,Cyclomatic complexity of the method is 9
Complex Method,PKHeX.Core,MiscVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\MiscVerifier.cs,VerifySWSHStats,Cyclomatic complexity of the method is 9
Complex Method,PKHeX.Core,NHarmoniaVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\NHarmoniaVerifier.cs,Verify,Cyclomatic complexity of the method is 8
Complex Method,PKHeX.Core,NicknameVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\NicknameVerifier.cs,Verify,Cyclomatic complexity of the method is 13
Complex Method,PKHeX.Core,NicknameVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\NicknameVerifier.cs,VerifyNicknameEgg,Cyclomatic complexity of the method is 8
Complex Method,PKHeX.Core,PIDVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\PIDVerifier.cs,VerifyShiny,Cyclomatic complexity of the method is 12
Complex Method,PKHeX.Core,RibbonVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\Ribbons\RibbonVerifier.cs,GetInvalidRibbons,Cyclomatic complexity of the method is 26
Complex Method,PKHeX.Core,RibbonVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\Ribbons\RibbonVerifier.cs,GetInvalidRibbons6Any,Cyclomatic complexity of the method is 9
Complex Method,PKHeX.Core,RibbonVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\Ribbons\RibbonVerifier.cs,GetInvalidRibbons6Untraded,Cyclomatic complexity of the method is 11
Complex Method,PKHeX.Core,TrainerNameVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\TrainerNameVerifier.cs,Verify,Cyclomatic complexity of the method is 16
Complex Method,PKHeX.Core,TransferVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\TransferVerifier.cs,VerifyVCEncounter,Cyclomatic complexity of the method is 12
Complex Method,PKHeX.Core,MysteryGift,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\MysteryGifts\MysteryGift.cs,GetMysteryGift,Cyclomatic complexity of the method is 12
Complex Method,PKHeX.Core,MysteryGift,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\MysteryGifts\MysteryGift.cs,GetMysteryGift,Cyclomatic complexity of the method is 10
Complex Method,PKHeX.Core,PCD,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\MysteryGifts\PCD.cs,IsMatchExact,Cyclomatic complexity of the method is 20
Complex Method,PKHeX.Core,PGF,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\MysteryGifts\PGF.cs,IsMatchExact,Cyclomatic complexity of the method is 23
Complex Method,PKHeX.Core,WB7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\MysteryGifts\WB7.cs,IsMatchExact,Cyclomatic complexity of the method is 24
Complex Method,PKHeX.Core,WC3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\MysteryGifts\WC3.cs,IsMatchExact,Cyclomatic complexity of the method is 20
Complex Method,PKHeX.Core,WC6,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\MysteryGifts\WC6.cs,IsMatchExact,Cyclomatic complexity of the method is 27
Complex Method,PKHeX.Core,WC7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\MysteryGifts\WC7.cs,IsMatchExact,Cyclomatic complexity of the method is 27
Complex Method,PKHeX.Core,WC8,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\MysteryGifts\WC8.cs,ConvertToPKM,Cyclomatic complexity of the method is 8
Complex Method,PKHeX.Core,WC8,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\MysteryGifts\WC8.cs,IsMatchExact,Cyclomatic complexity of the method is 27
Complex Method,PKHeX.Core,PersonalTable,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PersonalInfo\PersonalTable.cs,GetConstructor,Cyclomatic complexity of the method is 11
Complex Method,PKHeX.Core,PersonalTable,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PersonalInfo\PersonalTable.cs,GetEntrySize,Cyclomatic complexity of the method is 11
Complex Method,PKHeX.Core,PK1,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PK1.cs,ConvertToPK7,Cyclomatic complexity of the method is 8
Complex Method,PKHeX.Core,PK2,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PK2.cs,ConvertToPK7,Cyclomatic complexity of the method is 9
Complex Method,PKHeX.Core,PK5,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PK5.cs,ConvertToPK6,Cyclomatic complexity of the method is 18
Complex Method,PKHeX.Core,PKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PKM.cs,InhabitedGeneration,Cyclomatic complexity of the method is 8
Complex Method,PKHeX.Core,QRPKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Shared\QRPKM.cs,GetHeader,Cyclomatic complexity of the method is 8
Complex Method,PKHeX.Core,StringConverter2KOR,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Strings\StringConverter2KOR.cs,SetString2KOR,Cyclomatic complexity of the method is 11
Complex Method,PKHeX.Core,StringConverter3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Strings\StringConverter3.cs,SetString3,Cyclomatic complexity of the method is 8
Complex Method,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormList,Cyclomatic complexity of the method is 10
Complex Method,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsGen4,Cyclomatic complexity of the method is 8
Complex Method,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsGen5,Cyclomatic complexity of the method is 13
Complex Method,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsGen6,Cyclomatic complexity of the method is 12
Complex Method,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsGen7,Cyclomatic complexity of the method is 9
Complex Method,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsGen8,Cyclomatic complexity of the method is 10
Complex Method,PKHeX.Core,Language,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\Language.cs,GetSafeLanguage,Cyclomatic complexity of the method is 8
Complex Method,PKHeX.Core,Language,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\Language.cs,GetLanguage2CharName,Cyclomatic complexity of the method is 8
Complex Method,PKHeX.Core,PKMConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\PKMConverter.cs,GetPKMDataFormat,Cyclomatic complexity of the method is 15
Complex Method,PKHeX.Core,PKMConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\PKMConverter.cs,GetPKMfromBytes,Cyclomatic complexity of the method is 10
Complex Method,PKHeX.Core,PKMConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\PKMConverter.cs,IsPK6FormatReallyPK7,Cyclomatic complexity of the method is 15
Complex Method,PKHeX.Core,PKMConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\PKMConverter.cs,IntermediaryConvert,Cyclomatic complexity of the method is 18
Complex Method,PKHeX.Core,PKMConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\PKMConverter.cs,IsPKMCompatibleWithModifications,Cyclomatic complexity of the method is 8
Complex Method,PKHeX.Core,PKX,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\PKX.cs,GetRandomPID,Cyclomatic complexity of the method is 9
Complex Method,PKHeX.Core,PKX,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\PKX.cs,CheckEncrypted,Cyclomatic complexity of the method is 12
Complex Method,PKHeX.Core,XK3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\XK3.cs,IsOriginXD,Cyclomatic complexity of the method is 17
Complex Method,PKHeX.Core,MemeCrypto,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\MemeCrypto\MemeCrypto.cs,VerifyMemePOKE,Cyclomatic complexity of the method is 8
Complex Method,PKHeX.Core,SAV2,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV2.cs,GetFinalData,Cyclomatic complexity of the method is 13
Complex Method,PKHeX.Core,SAV3GCMemoryCard,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV3GCMemoryCard.cs,GetMemoryCardState,Cyclomatic complexity of the method is 17
Complex Method,PKHeX.Core,SAV4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV4.cs,MatchMysteryGifts,Cyclomatic complexity of the method is 8
Complex Method,PKHeX.Core,SAV4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV4.cs,SetDex,Cyclomatic complexity of the method is 14
Complex Method,PKHeX.Core,SAV4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV4.cs,SetForms,Cyclomatic complexity of the method is 10
Complex Method,PKHeX.Core,SaveFile,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SaveFile.cs,ClearBoxes,Cyclomatic complexity of the method is 8
Complex Method,PKHeX.Core,InventoryPouchGB,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Inventory\InventoryPouchGB.cs,GetPouch,Cyclomatic complexity of the method is 8
Complex Method,PKHeX.Core,InventoryPouchGB,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Inventory\InventoryPouchGB.cs,SetPouch,Cyclomatic complexity of the method is 8
Complex Method,PKHeX.Core,Zukan7b,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\PokeDex\Zukan7b.cs,SetSizeData,Cyclomatic complexity of the method is 10
Complex Method,PKHeX.Core,SaveExtensions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\SaveExtensions.cs,GetSaveFileErrata,Cyclomatic complexity of the method is 12
Complex Method,PKHeX.Core,SaveUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\SaveUtil.cs,GetSAVType,Cyclomatic complexity of the method is 18
Complex Method,PKHeX.Core,SaveUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\SaveUtil.cs,GetVariantSAVInternal,Cyclomatic complexity of the method is 24
Complex Method,PKHeX.Core,SaveUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\SaveUtil.cs,GetBlankSAV,Cyclomatic complexity of the method is 23
Complex Method,PKHeX.Core,SaveUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\SaveUtil.cs,CheckHeaderFooter,Cyclomatic complexity of the method is 12
Complex Method,PKHeX.Core,FileUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Util\FileUtil.cs,GetSupportedFile,Cyclomatic complexity of the method is 8
Complex Method,PKHeX,GBRestrictions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\GBRestrictions.cs,IsMoveCountRequired3,Cyclomatic complexity of the method is 8
Complex Method,PKHeX,GBRestrictions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\GBRestrictions.cs,GetRequiredMoveCountDecrement,Cyclomatic complexity of the method is 15
Complex Method,PKHeX,GBRestrictions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\GBRestrictions.cs,IsTradedKadabraG1,Cyclomatic complexity of the method is 9
Long Parameter List,PKHeX.Core,ISpriteBuilder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\ISpriteBuilder.cs,GetSprite,The method has 9 parameters. Parameters: species' form' gender' heldItem' isEgg' isShiny' generation' isBoxBGRed' isAltShiny
Long Parameter List,PKHeX.Core,ISpriteBuilder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\ISpriteBuilder.cs,GetSprite,The method has 8 parameters. Parameters: baseSprite' species' heldItem' isEgg' isShiny' generation' isBoxBGRed' isAltShiny
Long Parameter List,PKHeX.Core,GameDataSource,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameDataSource.cs,GetItemDataSource,The method has 5 parameters. Parameters: game' generation' MaxItemID' allowed' HaX
Long Parameter List,PKHeX.Core,GameInfo,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameInfo.cs,GetLocationName,The method has 5 parameters. Parameters: eggmet' locval' format' generation' version
Long Parameter List,PKHeX.Core,GameStrings,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameStrings.cs,GetLocationName,The method has 5 parameters. Parameters: eggmet' locval' format' generation' version
Long Parameter List,PKHeX.Core,EncounterArea1,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterArea1.cs,ReadSlots1FishingYellow,The method has 5 parameters. Parameters: data' ofs' count' t' rate
Long Parameter List,PKHeX.Core,EncounterArea2,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterArea2.cs,GetSlots2GrassWater,The method has 5 parameters. Parameters: data' ofs' t' slotSets' slotCount
Long Parameter List,PKHeX.Core,EncounterArea2,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterArea2.cs,GetAreas2,The method has 5 parameters. Parameters: data' ofs' t' slotSets' slotCount
Long Parameter List,PKHeX.Core,EncounterArea3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterArea3.cs,ReadInSlots,The method has 5 parameters. Parameters: data' ofs' numslots' t' slots
Long Parameter List,PKHeX.Core,EncounterArea4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterArea4.cs,GetSlots4GrassSlotReplace,The method has 6 parameters. Parameters: data' ofs' slotSize' ReplacedSlots' slotnums' t
Long Parameter List,PKHeX.Core,EncounterAreaGB,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterAreaGB.cs,ReadSlots1,The method has 5 parameters. Parameters: data' ofs' count' t' rate
Long Parameter List,PKHeX.Core,BulkAnalysis,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\BulkAnalysis.cs,AddLine,The method has 5 parameters. Parameters: first' second' msg' i' s
Long Parameter List,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,GetValidMovesAllGens,The method has 9 parameters. Parameters: pkm' evoChains' minLvLG1' minLvLG2' LVL' Tutor' Machine' MoveReminder' RemoveTransferHM
Long Parameter List,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,GetValidMoves,The method has 7 parameters. Parameters: pkm' evoChains' LVL' Tutor' Machine' MoveReminder' RemoveTransferHM
Long Parameter List,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,GetValidMoves,The method has 10 parameters. Parameters: pkm' evoChain' generation' minLvLG1' minLvLG2' LVL' Tutor' Machine' MoveReminder' RemoveTransferHM
Long Parameter List,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,GetValidRelearn,The method has 5 parameters. Parameters: pkm' species' form' inheritlvlmoves' version
Long Parameter List,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,GetBaseEggMoves,The method has 5 parameters. Parameters: pkm' species' form' gameSource' lvl
Long Parameter List,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,GetValidPostEvolutionMoves,The method has 5 parameters. Parameters: pkm' species' evoChain' generation' Version
Long Parameter List,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,GetExclusivePreEvolutionMoves,The method has 5 parameters. Parameters: pkm' Species' evoChain' generation' Version
Long Parameter List,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,GetValidMoves,The method has 11 parameters. Parameters: pkm' Version' vs' minLvLG1' minLvLG2' LVL' Relearn' Tutor' Machine' MoveReminder' RemoveTransferHM
Long Parameter List,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,GetValidMoves,The method has 12 parameters. Parameters: pkm' Version' vs' generation' minLvLG1' minLvLG2' LVL' Relearn' Tutor' Machine' MoveReminder' RemoveTransferHM
Long Parameter List,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,GetEvoMoves,The method has 14 parameters. Parameters: pkm' Version' vs' generation' minLvLG1' minLvLG2' LVL' Tutor' Machine' MoveReminder' RemoveTransferHM' moveTutor' i' evo
Long Parameter List,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,GetMoves,The method has 14 parameters. Parameters: pkm' species' minlvlG1' minlvlG2' lvl' form' moveTutor' Version' LVL' specialTutors' Machine' MoveReminder' RemoveTransferHM' generation
Long Parameter List,PKHeX.Core,Encounters4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters4.cs,MarkEncounterTypeData,The method has 5 parameters. Parameters: D_Slots' P_Slots' Pt_Slots' HG_Slots' SS_Slots
Long Parameter List,PKHeX.Core,EncounterTrade8,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\EncounterTrade8.cs,EncounterTrade8,The method has 6 parameters. Parameters: species' level' m' a' f' i
Long Parameter List,PKHeX.Core,EncounterSlotGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Generator\EncounterSlotGenerator.cs,IsDeferred4,The method has 5 parameters. Parameters: slot' currentSpecies' pkm' IsSafariBall' IsSportBall
Long Parameter List,PKHeX.Core,EncounterSlotGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Generator\EncounterSlotGenerator.cs,IsDeferred,The method has 6 parameters. Parameters: slot' currentSpecies' pkm' IsSafariBall' IsSportBall' IsHidden
Long Parameter List,PKHeX.Core,VerifyCurrentMoves,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\VerifyCurrentMoves.cs,ParseMovesByGeneration,The method has 6 parameters. Parameters: pkm' res' gen' info' learnInfo' last
Long Parameter List,PKHeX.Core,VerifyCurrentMoves,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\VerifyCurrentMoves.cs,ParseMovesByGeneration,The method has 5 parameters. Parameters: pkm' res' gen' info' learnInfo
Long Parameter List,PKHeX.Core,VerifyCurrentMoves,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\VerifyCurrentMoves.cs,ParseMovesByGeneration12,The method has 6 parameters. Parameters: pkm' res' moves' gen' info' learnInfo
Long Parameter List,PKHeX.Core,VerifyCurrentMoves,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\VerifyCurrentMoves.cs,GetHMCompatibility,The method has 6 parameters. Parameters: pkm' res' gen' moves' HMLearned' KnowDefogWhirlpool
Long Parameter List,PKHeX.Core,VerifyCurrentMoves,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\VerifyCurrentMoves.cs,FlagIncompatibleTransferHMs45,The method has 5 parameters. Parameters: res' moves' gen' HMLearned' KnowDefogWhirlpool
Long Parameter List,PKHeX.Core,VerifyCurrentMoves,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\VerifyCurrentMoves.cs,UpdateGen1LevelUpMoves,The method has 5 parameters. Parameters: pkm' EncounterMoves' defaultLvlG1' generation' info
Long Parameter List,PKHeX.Core,VerifyCurrentMoves,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\VerifyCurrentMoves.cs,UpdateGen2LevelUpMoves,The method has 5 parameters. Parameters: pkm' EncounterMoves' defaultLvlG2' generation' info
Long Parameter List,PKHeX.Core,VerifyRelearnMoves,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\VerifyRelearnMoves.cs,FlagInvalidInheritedMoves,The method has 5 parameters. Parameters: result' required' RelearnMoves' inheritMoves' splitMoves
Long Parameter List,PKHeX.Core,EvolutionChain,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Evolutions\EvolutionChain.cs,GetValidPreEvolutions,The method has 5 parameters. Parameters: pkm' maxspeciesorigin' lvl' minLevel' skipChecks
Long Parameter List,PKHeX.Core,EvolutionLineage,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Evolutions\EvolutionLineage.cs,GetExplicitLineage,The method has 5 parameters. Parameters: pkm' maxLevel' skipChecks' maxSpeciesOrigin' minLevel
Long Parameter List,PKHeX.Core,EvolutionTree,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Evolutions\EvolutionTree.cs,CreateLeaf,The method has 5 parameters. Parameters: lineage' evo' species' form' index
Long Parameter List,PKHeX.Core,EvolutionTree,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Evolutions\EvolutionTree.cs,GetValidPreEvolutions,The method has 5 parameters. Parameters: pkm' maxLevel' maxSpeciesOrigin' skipChecks' minLevel
Long Parameter List,PKHeX.Core,MemoryVariableSet,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Memories.cs,MemoryVariableSet,The method has 5 parameters. Parameters: handler' m' v' i' f
Long Parameter List,PKHeX.Core,LearnLookup,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\LearnLookup.cs,AddMoves,The method has 5 parameters. Parameters: moves' species' form' max' min
Long Parameter List,PKHeX.Core,LearnLookup,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\LearnLookup.cs,AddMoves1,The method has 5 parameters. Parameters: moves' species' form' max' min
Long Parameter List,PKHeX.Core,LearnLookup,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\LearnLookup.cs,GetIsLevelUpMin,The method has 5 parameters. Parameters: species' move' max' min' form
Long Parameter List,PKHeX.Core,LearnLookup,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\LearnLookup.cs,GetIsLevelUpG1,The method has 5 parameters. Parameters: species' form' move' max' min
Long Parameter List,PKHeX.Core,MoveEgg,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveEgg.cs,GetRelearnLVLMoves,The method has 5 parameters. Parameters: pkm' species' lvl' formnum' version
Long Parameter List,PKHeX.Core,MoveLevelUp,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveLevelUp.cs,GetIsLevelUpMove,The method has 9 parameters. Parameters: pkm' species' form' lvl' generation' move' minlvlG1' minlvlG2' version
Long Parameter List,PKHeX.Core,MoveLevelUp,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveLevelUp.cs,GetIsLevelUp1,The method has 6 parameters. Parameters: species' move' max' form' min' ver
Long Parameter List,PKHeX.Core,MoveLevelUp,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveLevelUp.cs,GetIsLevelUp2,The method has 7 parameters. Parameters: species' move' max' form' min' korean' ver
Long Parameter List,PKHeX.Core,MoveLevelUp,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveLevelUp.cs,GetIsLevelUp3,The method has 5 parameters. Parameters: species' move' lvl' form' ver
Long Parameter List,PKHeX.Core,MoveLevelUp,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveLevelUp.cs,GetIsLevelUp4,The method has 5 parameters. Parameters: species' move' lvl' form' ver
Long Parameter List,PKHeX.Core,MoveLevelUp,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveLevelUp.cs,GetIsLevelUp5,The method has 5 parameters. Parameters: species' move' lvl' form' ver
Long Parameter List,PKHeX.Core,MoveLevelUp,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveLevelUp.cs,GetIsLevelUp6,The method has 5 parameters. Parameters: species' move' lvl' form' ver
Long Parameter List,PKHeX.Core,MoveLevelUp,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveLevelUp.cs,GetIsLevelUp8,The method has 5 parameters. Parameters: species' move' lvl' form' ver
Long Parameter List,PKHeX.Core,MoveLevelUp,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveLevelUp.cs,GetMovesLevelUp,The method has 9 parameters. Parameters: pkm' species' minlvlG1' minlvlG2' lvl' form' version' MoveReminder' Generation
Long Parameter List,PKHeX.Core,MoveLevelUp,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveLevelUp.cs,GetMovesLevelUp1,The method has 5 parameters. Parameters: species' form' max' min' ver
Long Parameter List,PKHeX.Core,MoveLevelUp,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveLevelUp.cs,GetMovesLevelUp2,The method has 7 parameters. Parameters: species' form' max' min' korean' removeNewGSCMoves' ver
Long Parameter List,PKHeX.Core,MoveLevelUp,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveLevelUp.cs,GetMovesLevelUp7,The method has 5 parameters. Parameters: species' form' max' MoveReminder' ver
Long Parameter List,PKHeX.Core,MoveLevelUp,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveLevelUp.cs,AddMovesLevelUp1,The method has 6 parameters. Parameters: moves' ver' species' form' max' min
Long Parameter List,PKHeX.Core,MoveLevelUp,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveLevelUp.cs,AddMovesLevelUp2,The method has 7 parameters. Parameters: moves' ver' species' form' max' min' korean
Long Parameter List,PKHeX.Core,MoveLevelUp,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveLevelUp.cs,AddMovesLevelUp3,The method has 5 parameters. Parameters: moves' ver' species' max' form
Long Parameter List,PKHeX.Core,MoveLevelUp,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveLevelUp.cs,AddMovesLevelUp4,The method has 5 parameters. Parameters: moves' ver' species' max' form
Long Parameter List,PKHeX.Core,MoveLevelUp,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveLevelUp.cs,AddMovesLevelUp5,The method has 5 parameters. Parameters: moves' ver' species' max' form
Long Parameter List,PKHeX.Core,MoveLevelUp,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveLevelUp.cs,AddMovesLevelUp6,The method has 5 parameters. Parameters: moves' ver' species' max' form
Long Parameter List,PKHeX.Core,MoveLevelUp,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveLevelUp.cs,AddMovesLevelUp7,The method has 6 parameters. Parameters: moves' ver' species' max' form' MoveReminder
Long Parameter List,PKHeX.Core,MoveLevelUp,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveLevelUp.cs,AddMovesLevelUp8,The method has 5 parameters. Parameters: moves' ver' species' max' form
Long Parameter List,PKHeX.Core,MoveTechnicalMachine,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveTechnicalMachine.cs,GetIsMachineMove,The method has 8 parameters. Parameters: pkm' species' form' generation' move' ver' RemoveTransfer' allowBit
Long Parameter List,PKHeX.Core,MoveTechnicalMachine,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveTechnicalMachine.cs,GetIsMachine4,The method has 5 parameters. Parameters: species' move' format' RemoveTransfer' form
Long Parameter List,PKHeX.Core,MoveTechnicalMachine,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveTechnicalMachine.cs,GetIsMachine8,The method has 6 parameters. Parameters: pkm' species' move' form' ver' allowBit
Long Parameter List,PKHeX.Core,MoveTechnicalMachine,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveTechnicalMachine.cs,GetTMHM,The method has 6 parameters. Parameters: pkm' species' form' generation' ver' RemoveTransfer
Long Parameter List,PKHeX.Core,MoveTechnicalMachine,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveTechnicalMachine.cs,AddMachine4,The method has 5 parameters. Parameters: r' species' format' RemoveTransfer' form
Long Parameter List,PKHeX.Core,MoveTechnicalMachine,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveTechnicalMachine.cs,AddMachine8,The method has 5 parameters. Parameters: r' species' form' pkm' ver
Long Parameter List,PKHeX.Core,MoveTutor,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveTutor.cs,GetIsTutorMove,The method has 6 parameters. Parameters: pkm' species' form' generation' move' specialTutors
Long Parameter List,PKHeX.Core,MoveTutor,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveTutor.cs,GetIsTutor5,The method has 5 parameters. Parameters: pkm' species' form' specialTutors' move
Long Parameter List,PKHeX.Core,MoveTutor,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveTutor.cs,GetIsTutor6,The method has 5 parameters. Parameters: pkm' species' form' specialTutors' move
Long Parameter List,PKHeX.Core,MoveTutor,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveTutor.cs,GetIsTutor7,The method has 5 parameters. Parameters: pkm' species' form' specialTutors' move
Long Parameter List,PKHeX.Core,MoveTutor,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveTutor.cs,GetIsTutor8,The method has 5 parameters. Parameters: pkm' species' form' specialTutors' move
Long Parameter List,PKHeX.Core,MoveTutor,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveTutor.cs,GetTutorMoves,The method has 5 parameters. Parameters: pkm' species' form' specialTutors' generation
Long Parameter List,PKHeX.Core,MoveTutor,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveTutor.cs,AddMovesTutor5,The method has 5 parameters. Parameters: moves' species' form' pkm' specialTutors
Long Parameter List,PKHeX.Core,MoveTutor,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveTutor.cs,AddMovesTutor6,The method has 5 parameters. Parameters: moves' species' form' pkm' specialTutors
Long Parameter List,PKHeX.Core,MoveTutor,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveTutor.cs,AddMovesTutor7,The method has 5 parameters. Parameters: moves' species' form' pkm' specialTutors
Long Parameter List,PKHeX.Core,MoveTutor,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveTutor.cs,AddMovesTutor8,The method has 5 parameters. Parameters: moves' species' form' pkm' specialTutors
Long Parameter List,PKHeX.Core,FrameGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\Frame\FrameGenerator.cs,GetFrame,The method has 5 parameters. Parameters: seed' lead' esv' lvl' origin
Long Parameter List,PKHeX.Core,LockFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\Locks\LockFinder.cs,IsColoStarterValid,The method has 7 parameters. Parameters: species' seed' TID' SID' pkPID' IV1' IV2
Long Parameter List,PKHeX.Core,MethodFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\MethodFinder.cs,GetChannelMatch,The method has 5 parameters. Parameters: top' bot' IVs' pidiv' pk
Long Parameter List,PKHeX.Core,MethodFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\MethodFinder.cs,GetColoStarterMatch,The method has 5 parameters. Parameters: pk' top' bot' IVs' pidiv
Long Parameter List,PKHeX.Core,MethodFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\MethodFinder.cs,IsBACD_U_S,The method has 5 parameters. Parameters: idxor' pid' low' A' type
Long Parameter List,PKHeX.Core,MethodFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\MethodFinder.cs,IsBACD_U_AX,The method has 5 parameters. Parameters: idxor' pid' low' A' type
Long Parameter List,PKHeX.Core,PIDGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\PIDGenerator.cs,SetRandomPokeSpotPID,The method has 5 parameters. Parameters: pk' nature' gender' ability' slot
Long Parameter List,PKHeX.Core,PIDGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\PIDGenerator.cs,GetPokeWalkerPID,The method has 5 parameters. Parameters: TID' SID' nature' gender' gr
Long Parameter List,PKHeX.Core,PIDGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\PIDGenerator.cs,SetRandomWildPID,The method has 6 parameters. Parameters: pk' gen' nature' ability' gender' specific
Long Parameter List,PKHeX.Core,PIDGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\PIDGenerator.cs,SetRandomWildPID4,The method has 5 parameters. Parameters: pk' nature' ability' gender' specific
Long Parameter List,PKHeX.Core,PIDGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\PIDGenerator.cs,SetRandomWildPID5,The method has 5 parameters. Parameters: pk' nature' ability' gender' specific
Long Parameter List,PKHeX.Core,RNG,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\RNG.cs,SetFlagData,The method has 5 parameters. Parameters: i' mult' add' f' v
Long Parameter List,PKHeX.Core,CheckMoveResult,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Structures\CheckMoveResult.cs,CheckMoveResult,The method has 5 parameters. Parameters: m' g' s' c' i
Long Parameter List,PKHeX.Core,AbilityVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\AbilityVerifier.cs,VerifyFixedAbility,The method has 5 parameters. Parameters: data' abilities' state' EncounterAbility' abilval
Long Parameter List,PKHeX.Core,MemoryVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\MemoryVerifier.cs,VerifyOTMemoryIs,The method has 5 parameters. Parameters: data' m' i' t' f
Long Parameter List,PKHeX.Core,PersonalTable,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PersonalInfo\PersonalTable.cs,GetPersonalEntryList,The method has 5 parameters. Parameters: AltForms' species' MaxSpecies' baseForm' formVal
Long Parameter List,PKHeX.Core,BK4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\BK4.cs,Trade,The method has 7 parameters. Parameters: SAV_Trainer' SAV_TID' SAV_SID' SAV_GENDER' Day' Month' Year
Long Parameter List,PKHeX.Core,PB7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PB7.cs,GetStat,The method has 5 parameters. Parameters: baseStat' iv' level' nature' statIndex
Long Parameter List,PKHeX.Core,PK4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PK4.cs,Trade,The method has 7 parameters. Parameters: SAV_Trainer' SAV_TID' SAV_SID' SAV_GENDER' Day' Month' Year
Long Parameter List,PKHeX.Core,PK5,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PK5.cs,Trade,The method has 7 parameters. Parameters: SAV_Trainer' SAV_TID' SAV_SID' SAV_GENDER' Day' Month' Year
Long Parameter List,PKHeX.Core,StringConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Strings\StringConverter.cs,GetString,The method has 6 parameters. Parameters: data' generation' jp' bigendian' count' offset
Long Parameter List,PKHeX.Core,StringConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Strings\StringConverter.cs,SetString,The method has 8 parameters. Parameters: value' generation' jp' bigendian' maxLength' language' padTo' padWith
Long Parameter List,PKHeX.Core,StringConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Strings\StringConverter.cs,SetString7,The method has 6 parameters. Parameters: value' maxLength' language' padTo' padWith' chinese
Long Parameter List,PKHeX.Core,StringConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Strings\StringConverter.cs,SetString7b,The method has 6 parameters. Parameters: value' maxLength' language' padTo' padWith' chinese
Long Parameter List,PKHeX.Core,StringConverter12,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Strings\StringConverter12.cs,SetString1,The method has 5 parameters. Parameters: value' maxLength' jp' padTo' padWith
Long Parameter List,PKHeX.Core,StringConverter3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Strings\StringConverter3.cs,SetString3,The method has 5 parameters. Parameters: value' maxLength' jp' padTo' padWith
Long Parameter List,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormList,The method has 5 parameters. Parameters: species' types' forms' genders' generation
Long Parameter List,PKHeX.Core,PKX,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\PKX.cs,GetRandomPID,The method has 6 parameters. Parameters: species' cg' origin' nature' form' OLDPID
Long Parameter List,PKHeX.Core,MemeCrypto,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\MemeCrypto\MemeCrypto.cs,VerifyMemeData,The method has 5 parameters. Parameters: input' output' offset' length' keyIndex
Long Parameter List,PKHeX.Core,SAV3GCMemoryCard,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV3GCMemoryCard.cs,GetChecksum,The method has 5 parameters. Parameters: block' offset' length' csum' inv_csum
Long Parameter List,PKHeX.Core,SaveFile,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SaveFile.cs,SetSlotFormatParty,The method has 5 parameters. Parameters: pkm' data' offset' trade' dex
Long Parameter List,PKHeX.Core,SaveFile,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SaveFile.cs,SetPartySlot,The method has 5 parameters. Parameters: pkm' data' offset' trade' dex
Long Parameter List,PKHeX.Core,SaveFile,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SaveFile.cs,SetSlotFormatStored,The method has 5 parameters. Parameters: pkm' data' offset' trade' dex
Long Parameter List,PKHeX.Core,SaveFile,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SaveFile.cs,SetBoxSlot,The method has 5 parameters. Parameters: pkm' data' offset' trade' dex
Long Parameter List,PKHeX.Core,SaveFile,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SaveFile.cs,SetBoxSlotAtIndex,The method has 5 parameters. Parameters: pkm' box' slot' trade' dex
Long Parameter List,PKHeX.Core,InventoryPouch,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Inventory\InventoryPouch.cs,InventoryPouch,The method has 5 parameters. Parameters: type' legal' maxcount' offset' size
Long Parameter List,PKHeX.Core,InventoryPouch,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Inventory\InventoryPouch.cs,IsValidItemAndCount,The method has 5 parameters. Parameters: SAV' itemindex' HasNew' HaX' itemcnt
Long Parameter List,PKHeX.Core,InventoryPouch3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Inventory\InventoryPouch3.cs,InventoryPouch3,The method has 5 parameters. Parameters: type' legal' maxcount' offset' size
Long Parameter List,PKHeX.Core,InventoryPouch3GC,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Inventory\InventoryPouch3GC.cs,InventoryPouch3GC,The method has 5 parameters. Parameters: type' legal' maxcount' offset' size
Long Parameter List,PKHeX.Core,InventoryPouch7b,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Inventory\InventoryPouch7b.cs,InventoryPouch7b,The method has 5 parameters. Parameters: type' legal' maxcount' offset' size
Long Parameter List,PKHeX.Core,InventoryPouch8,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Inventory\InventoryPouch8.cs,InventoryPouch8,The method has 5 parameters. Parameters: type' legal' maxcount' offset' size
Long Parameter List,PKHeX.Core,InventoryPouchGB,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Inventory\InventoryPouchGB.cs,InventoryPouchGB,The method has 5 parameters. Parameters: type' legal' maxcount' offset' size
Long Parameter List,PKHeX.Core,Zukan,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\PokeDex\Zukan.cs,SetAllDexSeenFlags,The method has 5 parameters. Parameters: baseBit' altform' gender' isShiny' value
Long Parameter List,PKHeX.Core,Zukan,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\PokeDex\Zukan.cs,SetDex,The method has 6 parameters. Parameters: species' bit' form' gender' shiny' lang
Long Parameter List,PKHeX.Core,Zukan,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\PokeDex\Zukan.cs,SetDexFlags,The method has 5 parameters. Parameters: baseBit' formBit' gender' shiny' value
Long Parameter List,PKHeX.Core,Zukan5,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\PokeDex\Zukan5.cs,SetAllDexSeenFlags,The method has 5 parameters. Parameters: baseBit' altform' gender' isShiny' value
Long Parameter List,PKHeX.Core,Zukan6,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\PokeDex\Zukan6.cs,SetAllDexSeenFlags,The method has 5 parameters. Parameters: baseBit' altform' gender' isShiny' value
Long Parameter List,PKHeX.Core,Zukan7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\PokeDex\Zukan7.cs,SetAllDexSeenFlags,The method has 5 parameters. Parameters: baseBit' altform' gender' isShiny' value
Long Parameter List,PKHeX.Core,Zukan7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\PokeDex\Zukan7.cs,SanitizeFormsToIterate,The method has 5 parameters. Parameters: species' formStart' formEnd' formIn' USUM
Long Parameter List,PKHeX.Core,Zukan7b,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\PokeDex\Zukan7b.cs,SetDex,The method has 6 parameters. Parameters: species' bit' form' gender' shiny' lang
Long Parameter List,PKHeX.Core,Zukan7b,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\PokeDex\Zukan7b.cs,GetSizeData,The method has 5 parameters. Parameters: group' species' form' height' weight
Long Parameter List,PKHeX.Core,Zukan7b,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\PokeDex\Zukan7b.cs,SetSizeData,The method has 5 parameters. Parameters: group' species' form' height' weight
Long Parameter List,PKHeX.Core,Zukan8,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\PokeDex\Zukan8.cs,SeenAll,The method has 5 parameters. Parameters: species' bitIndex' value' pi' shinyToo
Long Parameter List,PKHeX.Core,BoxUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\BoxUtil.cs,LoadBoxes,The method has 8 parameters. Parameters: SAV' path' result' boxStart' boxClear' overwrite' noSetb' all
Long Parameter List,PKHeX.Core,BoxUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\BoxUtil.cs,LoadBoxes,The method has 7 parameters. Parameters: SAV' filepaths' result' boxStart' boxClear' overwrite' noSetb
Long Parameter List,PKHeX.Core,BoxUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\BoxUtil.cs,LoadBoxes,The method has 7 parameters. Parameters: SAV' encounters' result' boxStart' boxClear' overwrite' noSetb
Long Parameter List,PKHeX.Core,BoxUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\BoxUtil.cs,LoadBoxes,The method has 7 parameters. Parameters: SAV' pks' result' boxStart' boxClear' overwrite' noSetb
Long Parameter List,PKHeX.Core,GCSaveUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\GCSaveUtil.cs,Decrypt,The method has 5 parameters. Parameters: input' start' end' keys' output
Long Parameter List,PKHeX.Core,GCSaveUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\GCSaveUtil.cs,Encrypt,The method has 5 parameters. Parameters: input' start' end' keys' output
Long Parameter List,PKHeX.Core,SaveExtensions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\SaveExtensions.cs,ImportPKMs,The method has 5 parameters. Parameters: sav' compat' overwrite' boxStart' noSetb
Long Parameter List,PKHeX,GBRestrictions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\GBRestrictions.cs,GetIncompatibleEvolutionMoves,The method has 6 parameters. Parameters: pkm' moves' tmhm' previousspecies' incompatible_previous' incompatible_current
Long Identifier,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,,The length of the parameter TransferSpeciesDefaultAbility_1 is 31.
Long Identifier,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,,The length of the parameter FutureEvolutionsGen1_Gen2LevelUp is 32.
Long Identifier,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,,The length of the parameter TransferSpeciesDefaultAbility_2 is 31.
Long Identifier,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,,The length of the parameter FutureEvolutionsGen3_LevelUpGen4 is 32.
Long Identifier,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,,The length of the parameter SpecialTutors_Compatibility_FRLG is 32.
Long Identifier,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,,The length of the parameter SpecialTutors_Compatibility_XD_Exclusive is 40.
Long Identifier,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,,The length of the parameter PastGenAlolanNativesUncapturable is 32.
Long Identifier,PKHeX.Core,Encounters3Shadow,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters3Shadow.cs,,The length of the parameter XMarowakManectricSalamenceSeen is 30.
Long Identifier,PKHeX.Core,Encounters3Shadow,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters3Shadow.cs,,The length of the parameter XLaprasManectricSalamenceMarowakSeen is 36.
Long Identifier,PKHeX.Core,Encounters3Shadow,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters3Shadow.cs,,The length of the parameter XTaurosRhydonMoltresExeggutorSeen is 33.
Long Identifier,PKHeX.Core,Encounters3Shadow,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters3Shadow.cs,,The length of the parameter XArticunoRhydonMoltresTaurosSeen is 32.
Long Identifier,PKHeX.Core,Encounters3Shadow,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters3Shadow.cs,,The length of the parameter XArticunoRhydonMoltresExeggutorSeen is 35.
Long Identifier,PKHeX.Core,Encounters3Shadow,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters3Shadow.cs,,The length of the parameter XArticunoRhydonMoltresExeggutorTaurosSeen is 41.
Long Identifier,PKHeX.Core,Encounters3Shadow,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters3Shadow.cs,,The length of the parameter XZapdosRhydonMoltresTaurosSeen is 30.
Long Identifier,PKHeX.Core,Encounters3Shadow,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters3Shadow.cs,,The length of the parameter XZapdosRhydonMoltresArticunoSeen is 32.
Long Identifier,PKHeX.Core,Encounters3Shadow,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters3Shadow.cs,,The length of the parameter XZapdosRhydonMoltresExeggutorSeen is 33.
Long Identifier,PKHeX.Core,Encounters3Shadow,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters3Shadow.cs,,The length of the parameter XZapdosRhydonMoltresTaurosArticunoSeen is 38.
Long Identifier,PKHeX.Core,Encounters3Shadow,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters3Shadow.cs,,The length of the parameter XZapdosRhydonMoltresExeggutorTaurosSeen is 39.
Long Identifier,PKHeX.Core,Encounters3Shadow,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters3Shadow.cs,,The length of the parameter XZapdosRhydonMoltresExeggutorArticunoSeen is 41.
Long Identifier,PKHeX.Core,Encounters3Shadow,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters3Shadow.cs,,The length of the parameter XZapdosRhydonMoltresExeggutorTaurosArticunoSeen is 47.
Long Identifier,PKHeX.Core,Encounters4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters4.cs,,The length of the parameter DPPt_MixInteriorExteriorLocations is 33.
Long Identifier,PKHeX.Core,Encounters4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters4.cs,,The length of the parameter DPPt_MtCoronetExteriorEncounters is 32.
Long Identifier,PKHeX.Core,Encounters4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters4.cs,,The length of the parameter HGSS_SurfingHeadbutt_Locations is 30.
Long Identifier,PKHeX.Core,Encounters4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters4.cs,,The length of the parameter HGSS_MtSilverCaveExteriorEncounters is 35.
Long Identifier,PKHeX.Core,Encounters4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters4.cs,,The length of the parameter HGSS_MixInteriorExteriorLocations is 33.
Long Identifier,PKHeX.Core,Encounters4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters4.cs,,The length of the parameter Roaming_MetLocation_DPPt_Grass is 30.
Long Identifier,PKHeX.Core,Encounters4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters4.cs,,The length of the parameter Roaming_MetLocation_HGSS_Johto_Grass is 36.
Long Identifier,PKHeX.Core,Encounters4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters4.cs,,The length of the parameter Roaming_MetLocation_HGSS_Johto_Surf is 35.
Long Identifier,PKHeX.Core,Encounters4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters4.cs,,The length of the parameter Encounter_HGSS_JohtoRoam_Grass is 30.
Long Identifier,PKHeX.Core,Encounters4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters4.cs,,The length of the parameter Roaming_MetLocation_HGSS_Kanto_Grass is 36.
Long Identifier,PKHeX.Core,Encounters4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters4.cs,,The length of the parameter Roaming_MetLocation_HGSS_Kanto_Surf is 35.
Long Identifier,PKHeX.Core,Encounters4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters4.cs,,The length of the parameter Encounter_HGSS_KantoRoam_Grass is 30.
Long Identifier,PKHeX.Core,Encounters5,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters5.cs,,The length of the parameter SlotsB2W2_HiddenGrottoEncounterSlots is 36.
Long Identifier,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,,The length of the parameter HasFormeValuesNotIndicatedByPersonal is 36.
Long Identifier,PKHeX,GBRestrictions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\GBRestrictions.cs,,The length of the parameter Species_NotAvailable_CatchRate is 30.
Long Statement,PKHeX.Core,BatchEditing,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\Bulk\BatchEditing.cs,GetPropArray,The length of the statement  "            var all = p.Aggregate(new HashSet<string>(p[0])' (h' e) => { h.IntersectWith(e); return h; }).OrderBy(a => a).ToArray(); " is 120.
Long Statement,PKHeX.Core,BatchEditing,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\Bulk\BatchEditing.cs,SetByteArrayProperty,The length of the statement  "            static byte[] string2arr(string str) => str.Substring(CONST_BYTES.Length).Split(''').Select(z => Convert.ToByte(z.Trim()' 16)).ToArray(); " is 137.
Long Statement,PKHeX.Core,BatchEditing,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\Bulk\BatchEditing.cs,SetComplexProperty,The length of the statement  "            static DateTime parseDate(string val) => DateTime.ParseExact(val' "yyyyMMdd"' CultureInfo.InvariantCulture' DateTimeStyles.None); " is 129.
Long Statement,PKHeX.Core,BatchEditing,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\Bulk\BatchEditing.cs,SetComplexProperty,The length of the statement  "            else if ((cmd.PropertyName == nameof(PKM.Ability) || cmd.PropertyName == nameof(PKM.AbilityNumber)) && cmd.PropertyValue.StartsWith("$")) " is 137.
Long Statement,PKHeX.Core,BatchEditing,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\Bulk\BatchEditing.cs,SetComplexProperty,The length of the statement  "            else if (cmd.PropertyName == nameof(PKM.IsNicknamed) && string.Equals(cmd.PropertyValue' "false"' StringComparison.OrdinalIgnoreCase)) " is 134.
Long Statement,PKHeX.Core,EventBlockDiff,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\Saves\Editors\EventWork\EventWorkDiff.cs,SanityCheckSaveInfo,The length of the statement  "            { Message = string.Format(MsgSaveDifferentTypes' $"S1: {s1.GetType().Name}"' $"S2: {s2.GetType().Name}"); return false; } " is 121.
Long Statement,PKHeX.Core,ShowdownSet,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\ShowdownSet.cs,ParseItemStr,The length of the statement  "                var items = (string[])Strings.GetItemStrings(format); // ireadonlylist->string[] must be possible for the provided strings " is 122.
Long Statement,PKHeX.Core,FilteredGameDataSource,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\FilteredGameDataSource.cs,GetFilteredSpecies,The length of the statement  "                    .Where(s => s.Value <= (int)Core.Species.Mew || s.Value == (int)Core.Species.Meltan || s.Value == (int)Core.Species.Melmetal)' " is 126.
Long Statement,PKHeX.Core,GameDataSource,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameDataSource.cs,CreateGen3CXD,The length of the statement  "            return Util.GetCBList(s.metCXD_00000' Enumerable.Range(0' s.metCXD_00000.Length).ToArray()).Where(c => c.Text.Length > 0).ToList(); " is 131.
Long Statement,PKHeX.Core,GameDataSource,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameDataSource.cs,GetLocationList,The length of the statement  "                        return MetGen3.OrderByDescending(loc => loc.Value <= 87 || (loc.Value >= 196 && loc.Value <= 212)).ToList(); // Trainer Hill " is 124.
Long Statement,PKHeX.Core,GameDataSource,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameDataSource.cs,GetLocationList,The length of the statement  "                        return MetGen4.Take(4).Concat(MetGen4.Skip(4).OrderByDescending(loc => loc.Value > 125 && loc.Value < 234)).ToList(); // Celadon Dept. " is 134.
Long Statement,PKHeX.Core,GameDataSource,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameDataSource.cs,GetLocationList,The length of the statement  "                    return MetGen6.Take(3).Concat(MetGen6.Skip(3).OrderByDescending(loc => loc.Value > 168 && loc.Value <= 354)).ToList(); // Secret Base " is 133.
Long Statement,PKHeX.Core,GameDataSource,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameDataSource.cs,GetLocationList,The length of the statement  "                    return MetGen7.Take(3).Concat(MetGen7.Skip(3).OrderByDescending(loc => loc.Value < 234)).ToList(); // Dividing Peak Tunnel " is 122.
Long Statement,PKHeX.Core,GameDataSource,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameDataSource.cs,GetLocationList,The length of the statement  "                    return MetGen7GG.Take(3).Concat(MetGen7GG.Skip(3).OrderByDescending(loc => loc.Value <= 54)).ToList(); // Pokémon League " is 120.
Long Statement,PKHeX.Core,GameStrings,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameStrings.cs,Sanitize,The length of the statement  "            abilitylist[0] = itemlist[0] = movelist[0] = metXY_00000[0] = metBW2_00000[0] = metHGSS_00000[0] = metCXD_00000[0] = puffs[0] = none; " is 133.
Long Statement,PKHeX.Core,GameStrings,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameStrings.cs,SanitizeMetG7SM,The length of the statement  "                if (i > 0 && !string.IsNullOrWhiteSpace(metSM_00000_good[i]) && metSM_00000_good.Take(i - 1).Contains(metSM_00000_good[i])) " is 123.
Long Statement,PKHeX.Core,LegalityAnalysis,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Analysis.cs,ParsePK1,The length of the statement  "                pkm.TradebackStatus = TradebackType.WasTradeback; // Example: GSC Pokemon with only possible encounters in RBY' like the legendary birds " is 136.
Long Statement,PKHeX.Core,LegalityAnalysis,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Analysis.cs,GetVerboseLegalityReport,The length of the statement  "            var outputLines = Parse.Where(chk => chk?.Valid == true && chk.Comment != L_AValid).OrderBy(chk => chk.Judgement); // Fishy sorted to top " is 137.
Long Statement,PKHeX.Core,LegalityAnalysis,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Analysis.cs,GetSuggestedMoves,The length of the statement  "            return Legal.GetValidMoves(pkm' evos' Tutor: tutor' Machine: tm' MoveReminder: reminder).Skip(1).ToArray(); // skip move 0 " is 122.
Long Statement,PKHeX.Core,EncounterArea1,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterArea1.cs,ReadSlots1FishingYellow,The length of the statement  "            int[] dexbytelist = { 0x47' 0x6E' 0x18' 0x9B' 0x17' 0x4E' 0x8A' 0x5C' 0x5D' 0x9D' 0x9E' 0x1B' 0x85' 0x16' 0x58' 0x59' }; " is 120.
Long Statement,PKHeX.Core,EncounterArea4DPPt,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterArea4DPPt.cs,GetArea4DPPt,The length of the statement  "                var regular = new List<List<EncounterSlot>> { GrassSlots.Where(z => z.SlotNumber == 6 || z.SlotNumber == 7).ToList() }; // every other slot is in the product " is 157.
Long Statement,PKHeX.Core,EncounterArea4DPPt,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterArea4DPPt.cs,GetArea4DPPt,The length of the statement  "                if (ruby.Count != 0) pair3.Add(ruby); if (sapphire.Count != 0) pair3.Add(sapphire); if (emerald.Count != 0) pair3.Add(emerald); " is 127.
Long Statement,PKHeX.Core,EncounterArea4HGSS,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterArea4HGSS.cs,GetArea4HGSS,The length of the statement  "                //Grass slots with species = 0 are added too' it is needed for the swarm encounters' it will be deleted after swarms are added " is 126.
Long Statement,PKHeX.Core,EncounterArea4HGSS,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterArea4HGSS.cs,GetArea4HGSS,The length of the statement  "                // Swarm slots do not displace electric/steel types' with exception of SoulSilver Mawile (which doesn't displace) -- handle separately " is 134.
Long Statement,PKHeX.Core,EncounterArea4HGSS,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterArea4HGSS.cs,GetArea4HGSS,The length of the statement  "                    var regular = time.Where(z => !Legal.Slot4_Sound.Contains(z.SlotNumber)).ToList(); // every other slot is in the product " is 120.
Long Statement,PKHeX.Core,EncounterArea6AO,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterArea6AO.cs,GetMatchFromEvoLevel,The length of the statement  "            var slots = Slots.Where(slot => vs.Any(evo => evo.Species == slot.Species && evo.Level >= (slot.LevelMin - FluteBoostMax))); " is 124.
Long Statement,PKHeX.Core,EncounterArea6AO,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterArea6AO.cs,GetMatchFromEvoLevel,The length of the statement  "            // note: it's probably possible to determine a reduced DexNav boost based on the flawless IV count (no flawless = not chained) " is 126.
Long Statement,PKHeX.Core,EncounterArea6AO,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterArea6AO.cs,GetMatchFromEvoLevel,The length of the statement  "            // if someone wants to implement that logic to have the below method return a calculated max DexNavBoost' send a pull request :) " is 128.
Long Statement,PKHeX.Core,EncounterArea6AO,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterArea6AO.cs,GetMatchFromEvoLevel,The length of the statement  "            static int getMaxLevelBoost(EncounterSlot s) => s.Type != SlotType.Rock_Smash ? DexNavBoost : FluteBoostMax; // DexNav encounters most likely " is 141.
Long Statement,PKHeX.Core,EncounterArea7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterArea7.cs,GetFilteredSlots,The length of the statement  "            bool ShouldMatchSlotForm() => Legal.WildForms.Contains(species) || Legal.AlolanOriginForms.Contains(species) || FormConverter.IsTotemForm(species' form); " is 153.
Long Statement,PKHeX.Core,EncounterArea7b,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterArea7b.cs,GetMatchFromEvoLevel,The length of the statement  "            var slots = Slots.Where(slot => vs.Any(evo => evo.Species == slot.Species && evo.Level >= (slot.LevelMin - CatchComboBonus))); " is 126.
Long Statement,PKHeX.Core,EncounterArea8,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterArea8.cs,GetMatchFromEvoLevel,The length of the statement  "                    var boost = Slots.Where(slot => vs.Any(evo => evo.Species == slot.Species && evo.Form == slot.Form && evo.Level >= boostTo)); " is 125.
Long Statement,PKHeX.Core,EncounterArea8,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterArea8.cs,GetMatchFromEvoLevel,The length of the statement  "            var slots = Slots.Where(slot => vs.Any(evo => evo.Species == slot.Species && evo.Form == slot.Form && evo.Level >= slot.LevelMin)); " is 131.
Long Statement,PKHeX.Core,EncounterAreaGB,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterAreaGB.cs,GetMatchingSlots,The length of the statement  "            return GetFilteredSlots(pkm' encounterSlots' Gen1Version' RBDragonair).OrderBy(slot => slot.LevelMin); // prefer lowest levels " is 126.
Long Statement,PKHeX.Core,EncounterAreaGB,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterAreaGB.cs,GetMatchFromEvoLevel,The length of the statement  "            if (pkm.Format >= 7 || !(pkm is PK2 pk2 && pk2.CaughtData != 0)) // transferred to Gen7+' or does not have Crystal met data " is 123.
Long Statement,PKHeX.Core,BulkAnalysis,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\BulkAnalysis.cs,CheckDuplicateOwnedGifts,The length of the statement  "                AddLine(tidGroup[0][0].pkm' tidGroup[0][1].pkm' $"Receipt of the same egg mystery gifts detected: {dupe.Key}"' Encounter); " is 122.
Long Statement,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,GetValidMovesAllGens,The length of the statement  "                    Moves[i] = GetValidMoves(pkm' evoChains[i]' i' minLvLG1' minLvLG2' LVL' Tutor' Machine' MoveReminder' RemoveTransferHM).ToList(); " is 129.
Long Statement,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,GetValidMoves,The length of the statement  "            return GetValidMoves(pkm' version' evoChains' minLvLG1: 1' minLvLG2: 1' LVL: LVL' Relearn: false' Tutor: Tutor' Machine: Machine' MoveReminder: MoveReminder' RemoveTransferHM: RemoveTransferHM); " is 194.
Long Statement,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,GetValidMoves,The length of the statement  "            return GetValidMoves(pkm' version' evoChain' generation' minLvLG1: minLvLG1' minLvLG2: minLvLG2' LVL: LVL' Relearn: false' Tutor: Tutor' Machine: Machine' MoveReminder: MoveReminder' RemoveTransferHM: RemoveTransferHM); " is 219.
Long Statement,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,GetValidPostEvolutionMoves,The length of the statement  "                var moves = GetMoves(pkm' evo.Species' 1' 1' evo.Level' evo.Form' moveTutor: true' Version: Version' LVL: true' specialTutors: true' Machine: true' MoveReminder: true' RemoveTransferHM: false' generation: generation); " is 217.
Long Statement,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,GetExclusivePreEvolutionMoves,The length of the statement  "                var moves = GetMoves(pkm' evo.Species' 1' 1' evo.Level' evo.Form' moveTutor: true' Version: Version' LVL: true' specialTutors: true' Machine: true' MoveReminder: true' RemoveTransferHM: false' generation: generation); " is 217.
Long Statement,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,IsEvolutionValidWithMove,The length of the statement  "            if (!SpeciesEvolutionWithMove.Contains(pkm.Species) || pkm.Format <= 3 || (BabyEvolutionWithMove.Contains(pkm.Species) && gen <= 3)) " is 132.
Long Statement,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,IsEvolutionValidWithMove,The length of the statement  "            // Sylveon: always one level after met level' for gen 4 and 5 eevees in gen 6 games minimum for evolution is one level after transfer to generation 5 " is 149.
Long Statement,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,GetCanLearnMachineMove,The length of the statement  "            return GetValidMoves(pkm' version' EvolutionChain.GetValidPreEvolutions(pkm)' generation' Machine: true).Contains(move); " is 120.
Long Statement,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,GetCanRelearnMove,The length of the statement  "            return GetValidMoves(pkm' version' EvolutionChain.GetValidPreEvolutions(pkm)' generation' LVL: true' Relearn: true).Contains(move); " is 131.
Long Statement,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,GetCanKnowMove,The length of the statement  "            return GetValidMoves(pkm' version' EvolutionChain.GetValidPreEvolutions(pkm)' generation' LVL: true' Relearn: true' Tutor: true' Machine: true).Contains(move); " is 159.
Long Statement,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,GetMaxLevelGeneration,The length of the statement  "            if (pkm.Gen3 && pkm.Format > 4 && pkm.Met_Level == pkm.CurrentLevel && FutureEvolutionsGen3_LevelUpGen4.Contains(pkm.Species)) " is 126.
Long Statement,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,GetValidMoves,The length of the statement  "                    r.AddRange(GetValidMoves(pkm' Version' vs[gen]' gen' minLvLG1: minLvLG1' minLvLG2: minLvLG2' LVL: LVL' Relearn: false' Tutor: Tutor' Machine: Machine' MoveReminder: MoveReminder' RemoveTransferHM: RemoveTransferHM)); " is 216.
Long Statement,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,GetValidMoves,The length of the statement  "                // In gen 3 deoxys has different forms depending on the current game' in the PersonalInfo there is no alternate form info " is 121.
Long Statement,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,GetValidMoves,The length of the statement  "                    r.AddRange(GetMoves(pkm' species' minLvLG1' minLvLG2' vs[0].Level' i' Tutor' Version' LVL' Tutor' Machine' MoveReminder' RemoveTransferHM' generation)); " is 152.
Long Statement,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,GetValidMoves,The length of the statement  "                var moves = GetEvoMoves(pkm' Version' vs' generation' minLvLG1' minLvLG2' LVL' Tutor' Machine' MoveReminder' RemoveTransferHM' moveTutor' i' evo); " is 146.
Long Statement,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,GetEvoMoves,The length of the statement  "            return GetMoves(pkm' evo.Species' minlvlevo1' minlvlevo2' maxLevel' evo.Form' Tutor' Version' LVL' moveTutor' Machine' MoveReminder' RemoveTransferHM' generation); " is 163.
Long Statement,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,GetMoves,The length of the statement  "                r.AddRange(MoveLevelUp.GetMovesLevelUp(pkm' species' minlvlG1' minlvlG2' lvl' form' Version' MoveReminder' generation)); " is 120.
Long Statement,PKHeX.Core,Encounters4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters4.cs,MarkEncounterTypeData,The length of the statement  "            MarkDPPtEncounterTypeSlots_MultipleTypes(D_Slots' MtCoronet' EncounterType.Cave_HallOfOrigin' DPPt_MtCoronetExteriorEncounters); " is 128.
Long Statement,PKHeX.Core,Encounters4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters4.cs,MarkEncounterTypeData,The length of the statement  "            MarkDPPtEncounterTypeSlots_MultipleTypes(P_Slots' MtCoronet' EncounterType.Cave_HallOfOrigin' DPPt_MtCoronetExteriorEncounters); " is 128.
Long Statement,PKHeX.Core,Encounters4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters4.cs,MarkEncounterTypeData,The length of the statement  "            MarkDPPtEncounterTypeSlots_MultipleTypes(Pt_Slots' MtCoronet' EncounterType.Cave_HallOfOrigin' DPPt_MtCoronetExteriorEncounters); " is 129.
Long Statement,PKHeX.Core,Encounters4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters4.cs,MarkEncounterTypeData,The length of the statement  "            MarkHGSSEncounterTypeSlots_MultipleTypes(HG_Slots' MtSilver' EncounterType.Cave_HallOfOrigin' HGSS_MtSilverCaveExteriorEncounters); " is 131.
Long Statement,PKHeX.Core,Encounters4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters4.cs,MarkEncounterTypeData,The length of the statement  "            MarkHGSSEncounterTypeSlots_MultipleTypes(SS_Slots' MtSilver' EncounterType.Cave_HallOfOrigin' HGSS_MtSilverCaveExteriorEncounters); " is 131.
Long Statement,PKHeX.Core,Encounters4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters4.cs,MarkG4SwarmSlots,The length of the statement  "            // for fishing replace one or several random slots from encounters data' but all slots have the same level' it's ok to only replace the first " is 141.
Long Statement,PKHeX.Core,Encounters4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters4.cs,GetEncounterTypeBySlotHGSS,The length of the statement  "                    // not sure on if "None" should always be allowed' but this is so uncommon it shouldn't matter (gen7 doesn't keep this value anyway). " is 133.
Long Statement,PKHeX.Core,EncountersWC3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\EncountersWC3.cs,GetIngameCXDData,The length of the statement  "            var langs = new[]{LanguageID.Japanese' LanguageID.English' LanguageID.French' LanguageID.Italian' LanguageID.German' LanguageID.Spanish}; " is 137.
Long Statement,PKHeX.Core,EncountersWC3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\EncountersWC3.cs,GetIngameCXDData,The length of the statement  "            var m = new[] {string.Empty' "バトルやま"' "MATTLE"' "MT BATAILL"' "MONTE LOTT"' "DUELLBERG﻿"' string.Empty' "ERNESTO"}; // truncated on ck3->pk3 transfer " is 149.
Long Statement,PKHeX.Core,EncountersWC3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\EncountersWC3.cs,GetIngameCXDData,The length of the statement  "                    new WC3 { Species = 239' Level = 20' Language = l' Location = 164' TID = 41400' SID = -1' OT_Gender = 0' OT_Name = h[l]' Version = GameVersion.XD'   CardTitle = $"Trade Togepi ({id})"'     Method = PIDType.CXD' Moves = new[] { 008' 007' 009' 238 }' Fateful = true }' // Elekid @ Snagem Hideout " is 293.
Long Statement,PKHeX.Core,EncountersWC3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\EncountersWC3.cs,GetIngameCXDData,The length of the statement  "                    new WC3 { Species = 307' Level = 20' Language = l' Location = 116' TID = 37149' SID = -1' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.XD'   CardTitle = $"Trade Trapinch ({id})"'   Method = PIDType.CXD' Moves = new[] { 223' 093' 247' 197 }' Fateful = true }' // Meditite @ Pyrite Town " is 292.
Long Statement,PKHeX.Core,EncountersWC3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\EncountersWC3.cs,GetIngameCXDData,The length of the statement  "                    new WC3 { Species = 213' Level = 20' Language = l' Location = 116' TID = 37149' SID = -1' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.XD'   CardTitle = $"Trade Surskit ({id})"'    Method = PIDType.CXD' Moves = new[] { 092' 164' 188' 277 }' Fateful = true }' // Shuckle @ Pyrite Town " is 291.
Long Statement,PKHeX.Core,EncountersWC3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\EncountersWC3.cs,GetIngameCXDData,The length of the statement  "                    new WC3 { Species = 246' Level = 20' Language = l' Location = 116' TID = 37149' SID = -1' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.XD'   CardTitle = $"Trade Wooper ({id})"'     Method = PIDType.CXD' Moves = new[] { 201' 349' 044' 200 }' Fateful = true }' // Larvitar @ Pyrite Town " is 292.
Long Statement,PKHeX.Core,EncountersWC3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\EncountersWC3.cs,GetIngameCXDData,The length of the statement  "                    new WC3 { Species = 311' Level = 13' Language = l' Location = 254' TID = 37149' SID =  0' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.COLO' CardTitle = $"Special Gift ({id})"'     Method = PIDType.CXD' Moves = new[] { 045' 086' 098' 270 }' Shiny = Shiny.Never }' // Plusle @ Ingame Trade " is 296.
Long Statement,PKHeX.Core,EncountersWC3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\EncountersWC3.cs,GetIngameCXDData,The length of the statement  "                    new WC3 { Species = 250' Level = 70' Language = l' Location = 255' TID = 10048' SID =  0' OT_Gender = 0' OT_Name = m[l]' Version = GameVersion.S'    CardTitle = $"Mt. Battle Ho-Oh ({id})"' Method = PIDType.CXD' Moves = new[] { 105' 126' 241' 129 }' Shiny = Shiny.Never }' // Ho-oh @ Mt. Battle " is 293.
Long Statement,PKHeX.Core,EncounterUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\EncounterUtil.cs,MarkEncounterTradeStrings,The length of the statement  "            string[] getNames(int i' IEnumerable<string[]> names) => names.Select(z => z.Length > i ? z[i] : string.Empty).ToArray(); " is 121.
Long Statement,PKHeX.Core,EncounterStatic,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\EncounterStatic.cs,IsMatch,The length of the statement  "            if (EggLocation == Locations.Daycare5 && Relearn.Length == 0 && pkm.RelearnMoves.Any(z => z != 0)) // gen7 eevee edge case " is 122.
Long Statement,PKHeX.Core,EncounterStatic,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\EncounterStatic.cs,IsMatchDeferred,The length of the statement  "            if (Ability == 4 && pkm.AbilityNumber != 4) // BW/2 Jellicent collision with wild surf slot' resolved by duplicating the encounter with any abil " is 144.
Long Statement,PKHeX.Core,EncounterTrade,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\EncounterTrade.cs,UpdateEdgeCase,The length of the statement  "                case 3 when Species == (int)Core.Species.Jynx && pkm.Version == (int) GameVersion.LG && pkm.Language == (int) LanguageID.Italian: " is 129.
Long Statement,PKHeX.Core,EncounterTrade,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\EncounterTrade.cs,IsMatchVC1,The length of the statement  "            // Even if the in game trade uses the tables with source pokemon allowing generation 2 games' the traded pokemon could be a non-tradeback pokemon " is 145.
Long Statement,PKHeX.Core,EncounterFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Generator\EncounterFinder.cs,FindVerifiedEncounter,The length of the statement  "            if (!info.FrameMatches && info.EncounterMatch is EncounterSlot && pkm.Version != (int)GameVersion.CXD) // if false' all valid RNG frame matches have already been consumed " is 170.
Long Statement,PKHeX.Core,EncounterFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Generator\EncounterFinder.cs,FindVerifiedEncounter,The length of the statement  "                info.Parse.Add(new CheckResult(ParseSettings.RNGFrameNotFound' LEncConditionBadRNGFrame' CheckIdentifier.PID)); // todo for further confirmation " is 144.
Long Statement,PKHeX.Core,EncounterSlotGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Generator\EncounterSlotGenerator.cs,GetValidWildEncounters,The length of the statement  "            return s.DeferByBoolean(slot => slot.IsDeferred(species' pkm' IsSafariBall' IsSportBall' IsHidden)); // non-deferred first " is 122.
Long Statement,PKHeX.Core,EncounterSlotGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Generator\EncounterSlotGenerator.cs,IsHiddenAbilitySlot,The length of the statement  "            return slot.Permissions.DexNav || slot.Type == SlotType.FriendSafari || slot.Type == SlotType.Horde || slot.Type == SlotType.SOS; " is 129.
Long Statement,PKHeX.Core,ValidEncounterMoves,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Information\ValidEncounterMoves.cs,AddEdgeCaseMoves,The length of the statement  "                case EncounterStatic8N r when pkm.Met_Location == Encounters8Nest.SharedNest && !EncounterStatic8N.IsHighestLevelTier(pkm.Met_Level): " is 133.
Long Statement,PKHeX.Core,EncounterVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\EncounterVerifier.cs,VerifyWildEncounterCrystalHeadbutt,The length of the statement  "                TreeEncounterAvailable.InvalidTree => new CheckResult(Severity.Invalid' LG2InvalidTileTreeID' CheckIdentifier.Encounter)' " is 121.
Long Statement,PKHeX.Core,EncounterVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\EncounterVerifier.cs,VerifyEncounterEgg3Native,The length of the statement  "                if (Legal.ValidMet_FRLG.Contains(pkm.Met_Location) || Legal.ValidMet_E.Contains(pkm.Met_Location) || Legal.ValidMet_RS.Contains(pkm.Met_Location)) " is 146.
Long Statement,PKHeX.Core,EncounterVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\EncounterVerifier.cs,VerifyEncounterStatic,The length of the statement  "                    if (pkm.Species == (int)Species.Mew && s.Location == 201 && pkm.Language != (int)LanguageID.Japanese) // Non-JP Mew (Old Sea Map) " is 129.
Long Statement,PKHeX.Core,EncounterVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\EncounterVerifier.cs,VerifyEncounterStatic,The length of the statement  "                    if (s.Location == 193 && s is EncounterStaticTyped t && t.TypeEncounter == EncounterType.Surfing_Fishing) // Roaming pokemon surfing in Johto Route 45 " is 150.
Long Statement,PKHeX.Core,EncounterVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\EncounterVerifier.cs,VerifyEncounterEvent,The length of the statement  "                        return new CheckResult(Severity.Invalid' string.Format(L_XMatches0_1' MatchedGift.CardHeader' $"-- {LEncGiftVersionNotDistributed}")' CheckIdentifier.Encounter); " is 161.
Long Statement,PKHeX.Core,EncounterVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\EncounterVerifier.cs,VerifyEncounterEvent,The length of the statement  "            // Strict matching already performed by EncounterGenerator. May be worth moving some checks here to better flag invalid gifts. " is 126.
Long Statement,PKHeX.Core,EncounterVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\EncounterVerifier.cs,VerifyEncounterEvent,The length of the statement  "            return new CheckResult(Severity.Valid' string.Format(L_XMatches0_1' MatchedGift.CardHeader' string.Empty)' CheckIdentifier.Encounter); " is 134.
Long Statement,PKHeX.Core,EvolutionVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\EvolutionVerifier.cs,IsValidEvolution,The length of the statement  "            // If current species evolved with a move evolution and encounter species is not current species check if the evolution by move is valid " is 136.
Long Statement,PKHeX.Core,EvolutionVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\EvolutionVerifier.cs,IsValidEvolution,The length of the statement  "            // Only the evolution by move is checked' if there is another evolution before the evolution by move is covered in IsEvolutionValid " is 131.
Long Statement,PKHeX.Core,MysteryGiftVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\MysteryGiftVerifier.cs,VerifyGift,The length of the statement  "                return new CheckResult(Severity.Invalid' string.Format(LOTLanguage' lang.GetSuggestedLanguage()' pk.Language)' CheckIdentifier.GameOrigin); " is 139.
Long Statement,PKHeX.Core,MysteryGiftVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\MysteryGiftVerifier.cs,VerifyGift,The length of the statement  "            if (region != 0 && !region.HasFlagFast((MysteryGiftRestriction)((int)MysteryGiftRestriction.RegionBase << pk.ConsoleRegion))) " is 125.
Long Statement,PKHeX.Core,VerifyCurrentMoves,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\VerifyCurrentMoves.cs,ParseMovesWasEggPreRelearn,The length of the statement  "            // that means genderless species and male only species (except Nidoran-M and Volbeat; they breed with Nidoran-F and Illumise) could not have level up moves as an egg " is 165.
Long Statement,PKHeX.Core,VerifyCurrentMoves,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\VerifyCurrentMoves.cs,ParseMovesWasEggPreRelearn,The length of the statement  "                ? Legal.GetExclusivePreEvolutionMoves(pkm' info.EncounterMatch.Species' info.EvoChainsAllGens[2]' 2' e.Version).Where(m => m > Legal.MaxMoveID_1).ToArray() " is 155.
Long Statement,PKHeX.Core,VerifyCurrentMoves,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\VerifyCurrentMoves.cs,ParseMovesPre3DS,The length of the statement  "            if (info.Generation <= 2 && info.EncounterMatch is IGeneration g && (g.Generation == 1 || (g.Generation == 2 && !ParseSettings.AllowGen2MoveReminder(pkm)))) // fixed encounter moves without relearning " is 200.
Long Statement,PKHeX.Core,VerifyCurrentMoves,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\VerifyCurrentMoves.cs,ParseMovesGenGB,The length of the statement  "            var games = info.EncounterMatch is IGeneration g && g.Generation == 1 ? GBRestrictions.GetGen1Versions(info) : GBRestrictions.GetGen2Versions(info' pkm.Korean); " is 160.
Long Statement,PKHeX.Core,VerifyCurrentMoves,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\VerifyCurrentMoves.cs,ParseMovesByGeneration,The length of the statement  "                        res[m] = new CheckMoveResult(Initial' gen' Valid' native ? LMoveSourceDefault : string.Format(LMoveFDefault_0' gen)' Move); " is 123.
Long Statement,PKHeX.Core,VerifyCurrentMoves,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\VerifyCurrentMoves.cs,ParseMovesByGeneration,The length of the statement  "                    res[m] = new CheckMoveResult(LevelUp' gen' Valid' native ? LMoveSourceLevelUp : string.Format(LMoveFLevelUp_0' gen)' Move); " is 123.
Long Statement,PKHeX.Core,VerifyCurrentMoves,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\VerifyCurrentMoves.cs,ParseMovesByGeneration,The length of the statement  "                    res[m] = new CheckMoveResult(Shared' gen' Valid' native ? LMoveSourceShared : string.Format(LMoveSourceSharedF' gen)' Move); " is 124.
Long Statement,PKHeX.Core,VerifyCurrentMoves,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\VerifyCurrentMoves.cs,ParseEggMovesInherited,The length of the statement  "            // Check higher-level moves after all the moves but just before egg moves to differentiate it from normal level up moves " is 120.
Long Statement,PKHeX.Core,VerifyCurrentMoves,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\VerifyCurrentMoves.cs,ParseEggMoves,The length of the statement  "            // Check egg moves after all the generations and all the moves' every move that can't be learned in another source should have preference " is 137.
Long Statement,PKHeX.Core,VerifyCurrentMoves,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\VerifyCurrentMoves.cs,ParseEggMoves,The length of the statement  "            // the moves that can only be learned from egg moves should in the future check if the move combinations can be breed in gens 2 to 5 " is 132.
Long Statement,PKHeX.Core,VerifyCurrentMoves,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\VerifyCurrentMoves.cs,ParseEggMovesRemaining,The length of the statement  "                var IncompatibleEggMoves = RegularEggMovesLearned.Except(learnInfo.EventEggMoves).Union(learnInfo.EventEggMoves.Except(RegularEggMovesLearned)).ToList(); " is 153.
Long Statement,PKHeX.Core,VerifyCurrentMoves,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\VerifyCurrentMoves.cs,ParseEggMovesRemaining,The length of the statement  "                        res[m] = new CheckMoveResult(res[m]' Invalid' pkm.WasGiftEgg ? LMoveEggInvalidEventLevelUpGift : LMoveEggInvalidEventLevelUp' Move); " is 132.
Long Statement,PKHeX.Core,VerifyCurrentMoves,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\VerifyCurrentMoves.cs,GetIncompatibleRBYMoves,The length of the statement  "            // Check moves that are learned at the same level in Red/Blue and Yellow' these are illegal because there is no Move Reminder in Gen1. " is 134.
Long Statement,PKHeX.Core,VerifyCurrentMoves,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\VerifyCurrentMoves.cs,ParseShedinjaEvolveMoves,The length of the statement  "                    res[m] = new CheckMoveResult(res[m]' Invalid' string.Format(LMoveEvoFHigher' SpeciesStrings[290]' SpeciesStrings[291])' Move); " is 126.
Long Statement,PKHeX.Core,VerifyCurrentMoves,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\VerifyCurrentMoves.cs,ParseEvolutionLevelupMove,The length of the statement  "            // Ignore if there is an invalid move or an empty move' this validation is only for 4 non-empty moves that are all valid' but invalid as a 4 combination " is 152.
Long Statement,PKHeX.Core,VerifyCurrentMoves,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\VerifyCurrentMoves.cs,ParseEvolutionLevelupMove,The length of the statement  "            if (!res.All(r => r?.Valid ?? false) || moves.Any(m => m == 0) || (Legal.BabyEvolutionWithMove.Contains(pkm.Species) && info.Generation <= 3)) " is 142.
Long Statement,PKHeX.Core,VerifyCurrentMoves,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\VerifyCurrentMoves.cs,ParseEvolutionLevelupMove,The length of the statement  "                    // Add every fairy moves without cheking if eevee learn it or not' pokemon moves are determined legal before this function " is 122.
Long Statement,PKHeX.Core,VerifyCurrentMoves,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\VerifyCurrentMoves.cs,ParseEvolutionLevelupMove,The length of the statement  "                res[m] = new CheckMoveResult(res[m]' Invalid' string.Format(LMoveEvoFCombination_0' SpeciesStrings[pkm.Species])' Move); " is 120.
Long Statement,PKHeX.Core,VerifyCurrentMoves,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\VerifyCurrentMoves.cs,GetHMCompatibility,The length of the statement  "            // Check if pokemon knows HM moves from generation 3 and 4 but are not valid yet' that means it cant learn the HMs in future generations " is 136.
Long Statement,PKHeX.Core,VerifyCurrentMoves,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\VerifyCurrentMoves.cs,VerifyPreRelearnEggBase,The length of the statement  "                    res[i] = new CheckMoveResult(EggMove' gen' AllowInheritedSeverity' infoset.AllowInherited ? LMoveEggInherited : LMoveEggInvalidEvent' Move); " is 140.
Long Statement,PKHeX.Core,VerifyCurrentMoves,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\VerifyCurrentMoves.cs,VerifyPreRelearnEggBase,The length of the statement  "                    res[i] = new CheckMoveResult(InheritLevelUp' gen' AllowInheritedSeverity' infoset.AllowInherited ? LMoveEggLevelUp : LMoveEggInvalidEventLevelUp' Move); " is 152.
Long Statement,PKHeX.Core,VerifyCurrentMoves,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\VerifyCurrentMoves.cs,VerifyPreRelearnEggBase,The length of the statement  "                    res[i] = new CheckMoveResult(TMHM' gen' AllowInheritedSeverity' infoset.AllowInherited ? LMoveEggTMHM : LMoveEggInvalidEventTMHM' Move); " is 136.
Long Statement,PKHeX.Core,VerifyCurrentMoves,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\VerifyCurrentMoves.cs,VerifyPreRelearnEggBase,The length of the statement  "                    res[i] = new CheckMoveResult(Tutor' gen' AllowInheritedSeverity' infoset.AllowInherited ? LMoveEggInheritedTutor : LMoveEggInvalidEventTutor' Move); " is 148.
Long Statement,PKHeX.Core,VerifyCurrentMoves,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\VerifyCurrentMoves.cs,UpdateGen1LevelUpMoves,The length of the statement  "            EncounterMoves.LevelUpMoves[1] = Legal.GetValidMoves(pkm' info.EvoChainsAllGens[1]' generation: 1' minLvLG1: lvlG1' LVL: true' Tutor: false' Machine: false' MoveReminder: false).ToList(); " is 187.
Long Statement,PKHeX.Core,VerifyCurrentMoves,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\VerifyCurrentMoves.cs,UpdateGen2LevelUpMoves,The length of the statement  "            EncounterMoves.LevelUpMoves[2] = Legal.GetValidMoves(pkm' info.EvoChainsAllGens[2]' generation: 2' minLvLG2: defaultLvlG2' LVL: true' Tutor: false' Machine: false' MoveReminder: false).ToList(); " is 194.
Long Statement,PKHeX.Core,VerifyRelearnMoves,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\VerifyRelearnMoves.cs,VerifyRelearnEggBase,The length of the statement  "            // that means genderless species and male only species except Nidoran and Volbeat (they breed with female nidoran and illumise) could not have level up moves as an egg " is 167.
Long Statement,PKHeX.Core,VerifyRelearnMoves,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\VerifyRelearnMoves.cs,VerifyRelearnEggBase,The length of the statement  "            // If the pkm is capable of split-species breeding and any inherited move is from the other split scenario' flag accordingly. " is 125.
Long Statement,PKHeX.Core,EvolutionChain,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Evolutions\EvolutionChain.cs,GetChainAll,The length of the statement  "                    // Met location was lost at this point but it also means the pokemon existed in generations 1 to 4 with maximum level equals to met level " is 137.
Long Statement,PKHeX.Core,EvolutionChain,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Evolutions\EvolutionChain.cs,GetChainAll,The length of the statement  "                // If the pokemon origin is illegal (e.g. Gen3 Infernape) the list will be emptied -- species lineage did not exist at any evolution stage. " is 139.
Long Statement,PKHeX.Core,EvolutionChain,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Evolutions\EvolutionChain.cs,GetChainAll,The length of the statement  "                        // The same condition for Gen2 evolution of Gen1 pokemon' level of the pokemon in Gen1 games would be CurrentLevel -1 one level below Gen2 level " is 144.
Long Statement,PKHeX.Core,EvolutionChain,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Evolutions\EvolutionChain.cs,GetChainAll,The length of the statement  "                    // For example a gen3 Charizard in format 7 with current level 36 and met level 36' thus could never be Charmander / Charmeleon in Gen5+. " is 137.
Long Statement,PKHeX.Core,EvolutionChain,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Evolutions\EvolutionChain.cs,GetEvolutionChain,The length of the statement  "            // maxspec is used to remove future geneneration evolutions' to gather evolution chain of a pokemon in previous generations " is 123.
Long Statement,PKHeX.Core,EvolutionChain,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Evolutions\EvolutionChain.cs,GetEvolutionChain,The length of the statement  "            // For example a FireRed Charizard with a current level (in XY) is 50 but Met Level is 20; it couldn't be a Charizard in Gen3 and Gen4 games " is 140.
Long Statement,PKHeX.Core,EvolutionChain,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Evolutions\EvolutionChain.cs,GetValidPreEvolutions,The length of the statement  "            return et.GetValidPreEvolutions(pkm' maxLevel: lvl' maxSpeciesOrigin: maxspeciesorigin' skipChecks: skipChecks' minLevel: minLevel); " is 132.
Long Statement,PKHeX.Core,EvolutionLineage,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Evolutions\EvolutionLineage.cs,UpdateMinValues,The length of the statement  "                    first.MinLevel = 2; // Raichu from Pikachu would have a minimum level of 1; accounting for Pichu (level up required) results in a minimum level of 2 " is 148.
Long Statement,PKHeX.Core,EvolutionLineage,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Evolutions\EvolutionLineage.cs,UpdateMinValues,The length of the statement  "                            first.MinLevel = evo.Level; // Pokemon like Nidoqueen who evolve with an evolution stone' minimum level is prior evolution minimum level " is 136.
Long Statement,PKHeX.Core,MemoryVariableSet,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Memories.cs,Read,The length of the statement  "                0 => new MemoryVariableSet(LegalityCheckStrings.L_XOT' pkm.OT_Memory' pkm.OT_TextVar' pkm.OT_Intensity' pkm.OT_Feeling)' // OT " is 126.
Long Statement,PKHeX.Core,MemoryVariableSet,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Memories.cs,Read,The length of the statement  "                1 => new MemoryVariableSet(LegalityCheckStrings.L_XOT' pkm.HT_Memory' pkm.HT_TextVar' pkm.HT_Intensity' pkm.HT_Feeling)' // HT " is 126.
Long Statement,PKHeX.Core,MoveEgg,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveEgg.cs,GetEggMoves,The length of the statement  "            if (!pkm.InhabitedGeneration(gen' species) || (pkm.PersonalInfo.Gender == 255 && !FixedGenderFromBiGender.Contains(species))) " is 125.
Long Statement,PKHeX.Core,MoveEgg,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveEgg.cs,GetRelearnLVLMoves,The length of the statement  "            int[] getMoves(IReadOnlyList<Learnset> moves' PersonalTable table) => moves[table.GetFormeIndex(species' formnum)].GetMoves(lvl); " is 129.
Long Statement,PKHeX.Core,MoveTutor,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveTutor.cs,AddMovesTutor3,The length of the statement  "            moves.AddRange(SpecialTutors_XD_Exclusive.Where((_' i) => SpecialTutors_Compatibility_XD_Exclusive[i].Any(e => e == species))); " is 127.
Long Statement,PKHeX.Core,MethodFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\MethodFinder.cs,IsCompatible4,The length of the statement  "                    return pkm.IsShiny && IsDPPt && sl.TypeEncounter == EncounterType.TallGrass && !Encounters4.SafariZoneLocation_4.Contains(sl.Location); " is 135.
Long Statement,PKHeX.Core,PIDGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\PIDGenerator.cs,GetPokeWalkerPID,The length of the statement  "            uint pid = (uint)((TID ^ SID) >> 8 ^ 0xFF) << 24; // the most significant byte of the PID is chosen so the Pokémon can never be shiny. " is 134.
Long Statement,PKHeX.Core,AbilityVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\AbilityVerifier.cs,VerifyAbilityMG,The length of the statement  "                return (pkm.Format >= 6 ? (pkm.AbilityNumber == 1) : (pkm.AbilityNumber < 4)) ? VALID : GetInvalid(LAbilityMismatchGift); " is 121.
Long Statement,PKHeX.Core,BallVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\BallVerifier.cs,VerifyBall,The length of the statement  "            if (pkm.Ball == (int)Heavy && Legal.AlolanCaptureNoHeavyBall.Contains(EncounterMatch.Species) && !EncounterMatch.EggEncounter && pkm.SM) " is 136.
Long Statement,PKHeX.Core,BallVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\BallVerifier.cs,VerifyBallEggGen7,The length of the statement  "                if (pkm.AbilityNumber == 4 && Legal.Ban_NoHidden7Apricorn.Contains(species | pkm.AltForm << 11)) // lineage is 3->2->origin " is 123.
Long Statement,PKHeX.Core,BallVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\BallVerifier.cs,VerifyBallEggGen7,The length of the statement  "                if ((species > 731 && species <= 785) || (Legal.AlolanCaptureOffspring.Contains(species) && !Legal.PastGenAlolanNativesUncapturable.Contains(species))) " is 151.
Long Statement,PKHeX.Core,BallVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\BallVerifier.cs,VerifyBallEggGen8,The length of the statement  "                if (pkm.AbilityNumber == 4 && Legal.Ban_NoHidden7Apricorn.Contains(species | pkm.AltForm << 11)) // lineage is 3->2->origin " is 123.
Long Statement,PKHeX.Core,BallVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\BallVerifier.cs,VerifyBallEggGen8,The length of the statement  "                if ((species > 731 && species <= 785) || (Legal.AlolanCaptureOffspring.Contains(species) && !Legal.PastGenAlolanNativesUncapturable.Contains(species))) " is 151.
Long Statement,PKHeX.Core,EffortValueVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\EffortValueVerifier.cs,Verify,The length of the statement  "            // In Generations I and II' when a Pokémon is taken out of the Day Care' its experience will lower to the minimum value for its current level. " is 142.
Long Statement,PKHeX.Core,EffortValueVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\EffortValueVerifier.cs,VerifyAwakenedValues,The length of the statement  "            if (EncounterMatch is EncounterSlot s && s.Type == SlotType.GoPark && Enumerable.Range(0' 6).Select(awakened.GetAV).Any(z => z < 2)) " is 132.
Long Statement,PKHeX.Core,FormVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\FormVerifier.cs,VerifyForm,The length of the statement  "            if (!PersonalInfo.IsFormeWithinRange(pkm.AltForm) && !FormConverter.IsValidOutOfBoundsForme(pkm.Species' pkm.AltForm' Info.Generation)) " is 135.
Long Statement,PKHeX.Core,FormVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\FormVerifier.cs,VerifyForm,The length of the statement  "                        Info.Moves[noSword ? 0 : index] = new CheckMoveResult(Info.Moves[noSword ? 0 : index]' Severity.Invalid' LMoveKeldeoMismatch' CheckIdentifier.Move); " is 148.
Long Statement,PKHeX.Core,FormVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\FormVerifier.cs,VerifyForm,The length of the statement  "                if (pkm.Species == 25 || Legal.AlolanOriginForms.Contains(pkm.Species) || Legal.AlolanVariantEvolutions12.Contains(data.EncounterOriginal.Species)) " is 147.
Long Statement,PKHeX.Core,FormVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\FormVerifier.cs,VerifyForm,The length of the statement  "                if (pkm.Species == 25 || Legal.GalarOriginForms.Contains(pkm.Species) || Legal.GalarVariantFormEvolutions.Contains(data.EncounterOriginal.Species)) " is 147.
Long Statement,PKHeX.Core,IndividualValueVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\IndividualValueVerifier.cs,AllIVsEqual,The length of the statement  "            return (pkm.IV_ATK == hpiv) && (pkm.IV_DEF == hpiv) && (pkm.IV_SPA == hpiv) && (pkm.IV_SPD == hpiv) && (pkm.IV_SPE == hpiv); " is 124.
Long Statement,PKHeX.Core,LevelVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\LevelVerifier.cs,Verify,The length of the statement  "            else if (!EncounterMatch.IsWithinRange(pkm) && lvl != 100 && pkm.EXP == Experience.GetEXP(lvl' pkm.PersonalInfo.EXPGrowth)) " is 123.
Long Statement,PKHeX.Core,LevelVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\LevelVerifier.cs,VerifyG1,The length of the statement  "            // Machoke' Graveler' Haunter and Kadabra captured in the second phase evolution' excluding in-game trades' are already checked " is 127.
Long Statement,PKHeX.Core,LevelVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\LevelVerifier.cs,VerifyG1,The length of the statement  "            if (pkm.Format <= 2 && !(EncounterMatch is EncounterTrade) && EncounterMatch.Species == pkm.Species && GBRestrictions.Trade_Evolution1.Contains(EncounterMatch.Species)) " is 168.
Long Statement,PKHeX.Core,LevelVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\LevelVerifier.cs,VerifyG1TradeEvo,The length of the statement  "            var mustevolve = pkm.TradebackStatus == TradebackType.WasTradeback || (pkm.Format == 1 && !ParseSettings.IsFromActiveTrainer(pkm)) || GBRestrictions.IsTradedKadabraG1(pkm); " is 172.
Long Statement,PKHeX.Core,MemoryVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\MemoryVerifier.cs,VerifyHistory,The length of the statement  "            else if (EncounterMatch is WC7 wc7 && wc7.OT_Name.Length > 0 && wc7.TID != 18075) // Ash Pikachu QR Gift doesn't set Current Handler " is 132.
Long Statement,PKHeX.Core,MemoryVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\MemoryVerifier.cs,VerifyHistory,The length of the statement  "                if (EncounterMatch.Species != pkm.Species && VerifyHistoryUntradedEvolution(pkm' Info.EvoChainsAllGens' out CheckResult chk2)) " is 126.
Long Statement,PKHeX.Core,MemoryVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\MemoryVerifier.cs,VerifyHistory7,The length of the statement  "                if (EncounterMatch.Species != pkm.Species && VerifyHistoryUntradedEvolution(pkm' Info.EvoChainsAllGens' out CheckResult chk2)) " is 126.
Long Statement,PKHeX.Core,MemoryVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\MemoryVerifier.cs,VerifyCommonMemory,The length of the statement  "            if (matchingMoveMemory != -1 && pkm.Species != 235 && !Legal.GetCanLearnMachineMove(pkm' Memories.MoveSpecificMemories[1][matchingMoveMemory]' 6)) " is 146.
Long Statement,PKHeX.Core,MemoryVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\MemoryVerifier.cs,VerifyCommonMemory,The length of the statement  "                case 21 when !Legal.GetCanLearnMachineMove(new PK6 {Species = memory.Variable' EXP = Experience.GetEXP(100' PersonalTable.XY.GetFormeIndex(memory.Variable' 0))}' 19' 6): " is 169.
Long Statement,PKHeX.Core,MemoryVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\MemoryVerifier.cs,VerifyCommonMemory,The length of the statement  "                  return GetInvalid(string.Format(LMemoryIndexIntensityMin' memory.Handler' Memories.GetMinimumIntensity(memory.MemoryID))); " is 122.
Long Statement,PKHeX.Core,MiscVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\MiscVerifier.cs,VerifyMiscG1CatchRate,The length of the statement  "                    return GetValid(LG1CatchRateMatchPrevious); // Encounters detected by the catch rate' cant be invalid if match this encounters " is 126.
Long Statement,PKHeX.Core,MiscVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\MiscVerifier.cs,VerifyMiscG1CatchRate,The length of the statement  "                if ((pk1.Species == 149 && catch_rate == PersonalTable.Y[149].CatchRate) || (GBRestrictions.Species_NotAvailable_CatchRate.Contains(pk1.Species) && catch_rate == PersonalTable.RB[pk1.Species].CatchRate)) " is 203.
Long Statement,PKHeX.Core,MiscVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\MiscVerifier.cs,VerifyMiscEggCommon,The length of the statement  "            if (pkm.Move1_PP != pkm.GetMovePP(pkm.Move1' 0) || pkm.Move2_PP != pkm.GetMovePP(pkm.Move2' 0) || pkm.Move3_PP != pkm.GetMovePP(pkm.Move3' 0) || pkm.Move4_PP != pkm.GetMovePP(pkm.Move4' 0)) " is 189.
Long Statement,PKHeX.Core,NicknameVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\NicknameVerifier.cs,VerifyUnNicknamedEncounter,The length of the statement  "                    var severe = pkm.Format >= 8 || (data.EncounterOriginal.EggEncounter && pkm.WasTradedEgg && nickname.Length <= Legal.GetMaxLengthNickname(data.Info.Generation' English)) " is 169.
Long Statement,PKHeX.Core,RibbonVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\Ribbons\RibbonVerifier.cs,GetIncorrectRibbons,The length of the statement  "                result.Add(string.Format(LRibbonFMissing_0' string.Join("' "' missingRibbons.Select(z => z.Replace("Ribbon"' string.Empty))))); " is 127.
Long Statement,PKHeX.Core,RibbonVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\Ribbons\RibbonVerifier.cs,GetIncorrectRibbons,The length of the statement  "                result.Add(string.Format(LRibbonFInvalid_0' string.Join("' "' invalidRibbons.Select(z => z.Replace("Ribbon"' string.Empty))))); " is 127.
Long Statement,PKHeX.Core,RibbonVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\Ribbons\RibbonVerifier.cs,GetInvalidRibbons,The length of the statement  "                var iter4 = (gen == 3 || gen == 4) && IsAllowedInContest4(pkm.Species) ? getMissingContestRibbons(c4' c4n) : GetInvalidRibbonsNone(c4' c4n); " is 140.
Long Statement,PKHeX.Core,RibbonVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\Ribbons\RibbonVerifier.cs,GetInvalidRibbons6Any,The length of the statement  "            // Each contest victory requires a contest participation; each participation gives 20 OT affection (not current trainer). " is 121.
Long Statement,PKHeX.Core,TrainerNameVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\TrainerNameVerifier.cs,VerifyOTG1,The length of the statement  "            if (data.EncounterOriginal is EncounterStatic s && (s.Version == GameVersion.Stadium || s.Version == GameVersion.Stadium2)) " is 123.
Long Statement,PKHeX.Core,TransferVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\TransferVerifier.cs,VerifyVCEncounter,The length of the statement  "            if (encounter is EncounterStatic v && (GameVersion.GBCartEraOnly.Contains(v.Version) || v.Version == GameVersion.VCEvents)) " is 123.
Long Statement,PKHeX.Core,PGF,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\MysteryGifts\PGF.cs,ConvertToPKM,The length of the statement  "                pk.OT_Gender = (OTGender == 3 ? SAV.Gender : OTGender) & 1; // some events have variable gender based on receiving SaveFile " is 123.
Long Statement,PKHeX.Core,WB7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\MysteryGifts\WB7.cs,ConvertToPKM,The length of the statement  "            pk.Nickname = pk.IsNicknamed ? GetNickname(pk.Language) : SpeciesName.GetSpeciesNameGeneration(Species' pk.Language' Format); " is 125.
Long Statement,PKHeX.Core,WC3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\MysteryGifts\WC3.cs,ConvertToPKM,The length of the statement  "            pk.Nickname = SpeciesName.GetSpeciesNameGeneration(Species' pk.Language' 3); // will be set to Egg nickname if appropriate by PK3 setter " is 136.
Long Statement,PKHeX.Core,PK1,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PK1.cs,SetSpeciesValues,The length of the statement  "            if (TradebackStatus != TradebackType.WasTradeback && !Legal.IsCatchRateHeldItem(Catch_Rate) && !(value == 25 && Catch_Rate == 0xA3)) // Light Ball Pikachu " is 154.
Long Statement,PKHeX.Core,PK6,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PK6.cs,TradeHT,The length of the statement  "            // Make a memory if no memory already exists. Pretty terrible way of doing this but I'd rather not overwrite existing memories. " is 127.
Long Statement,PKHeX.Core,PKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PKM.cs,TransferPropertiesWithReflection,The length of the statement  "            var DestinationProperties = ReflectUtil.GetAllPropertyInfoPublic(dst_t).Where(z => z.SetMethod != null).Select(z => z.Name); " is 124.
Long Statement,PKHeX.Core,StringConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Strings\StringConverter.cs,GetString,The length of the statement  "                return generation == 3 ? StringConverter3.GetBEString3(data' offset' count) : StringConverter4.GetBEString4(data' offset' count); " is 129.
Long Statement,PKHeX.Core,StringConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Strings\StringConverter.cs,SetString,The length of the statement  "                return generation == 3 ? StringConverter3.SetBEString3(value' maxLength' padTo' padWith) : StringConverter4.SetBEString4(value' maxLength' padTo' padWith); " is 155.
Long Statement,PKHeX.Core,StringConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Strings\StringConverter.cs,ConvertString2BinG7_zh,The length of the statement  "            IsCHT |= cht && !inputstr.Any(chr => G7_CHT.ContainsKey(chr) ^ G7_CHS.ContainsKey(chr)); // CHS and CHT have the same display name " is 130.
Long Statement,PKHeX.Core,PKMConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\PKMConverter.cs,GetPKMDataFormat,The length of the statement  "                    if ((BitConverter.ToUInt16(data' 0x4) == 0) && (BitConverter.ToUInt16(data' 0x80) >= 0x3333 || data[0x5F] >= 0x10) && BitConverter.ToUInt16(data' 0x46) == 0) // PK5 " is 164.
Long Statement,PKHeX.Core,SAV3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV3.cs,GetDaycareRNGSeed,The length of the statement  "                return BitConverter.ToUInt32(Data' GetDaycareSlotOffset(0' 2)).ToString("X8"); // after the 2 slots' before the step counter " is 124.
Long Statement,PKHeX.Core,SAV3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV3.cs,GetDaycareRNGSeed,The length of the statement  "            return BitConverter.ToUInt16(Data' GetDaycareEXPOffset(2)).ToString("X4"); // after the 2nd slot EXP' before the step counter " is 125.
Long Statement,PKHeX.Core,SAV4Ranch,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Storage\SAV4Ranch.cs,SetChecksums,The length of the statement  "            BigEndian.GetBytes(FinalCount).CopyTo(Data' FinalCountOffset); // ensure the final data is written if the user screws stuff up " is 126.
Long Statement,PKHeX.Core,QR7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen7\QR7.cs,GenerateQRData,The length of the statement  "            BitConverter.GetBytes(num_copies).CopyTo(data' 0x10); // No need to check max num_copies' payload parser handles it on-console. " is 127.
Long Statement,PKHeX.Core,InventoryPouch,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Inventory\InventoryPouch.cs,IsValidItemAndCount,The length of the statement  "                if (itemindex == 797 && itemcnt >= 2) // Edge case when for some reason the item count for Z-Ring was 2 in an unedited save and set 1 after using PKHeX " is 151.
Long Statement,PKHeX.Core,Mail2,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Mail\Mail2.cs,SetMessage,The length of the statement  "                StringConverter12.SetString1(line1' 0x10' false' 0x10' (ushort)(Data.Skip(0x11).Take(0x10).All(v => v == 0x50) ? 0x50 : 0x7F)).CopyTo(Data' 0); " is 143.
Long Statement,PKHeX.Core,Zukan7b,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\PokeDex\Zukan7b.cs,SetSizeData,The length of the statement  "                if (Math.Round(pkm.HeightAbsolute) < Math.Round(calcHeight) || BitConverter.ToUInt32(SAV.Data' ofs) == 0x007F00FE) // unset " is 123.
Long Statement,PKHeX.Core,Zukan7b,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\PokeDex\Zukan7b.cs,SetSizeData,The length of the statement  "                if (Math.Round(pkm.HeightAbsolute) > Math.Round(calcHeight) || BitConverter.ToUInt32(SAV.Data' ofs) == 0x007F00FE) // unset " is 123.
Long Statement,PKHeX.Core,Zukan7b,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\PokeDex\Zukan7b.cs,SetSizeData,The length of the statement  "                if (Math.Round(pkm.WeightAbsolute) < Math.Round(calcWeight) || BitConverter.ToUInt32(SAV.Data' ofs) == 0x007F00FE) // unset " is 123.
Long Statement,PKHeX.Core,Zukan7b,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\PokeDex\Zukan7b.cs,SetSizeData,The length of the statement  "                if (Math.Round(pkm.WeightAbsolute) > Math.Round(calcWeight) || BitConverter.ToUInt32(SAV.Data' ofs) == 0x007F00FE) // unset " is 123.
Long Statement,PKHeX.Core,Records,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Records.cs,GetOffset,The length of the statement  "                return baseOfs + (LargeRecordCount * sizeof(int)) + ((recordID - LargeRecordCount) * sizeof(ushort)); // first 100 are 4bytes' so bias the difference " is 149.
Long Statement,PKHeX.Core,SaveExtensions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\SaveExtensions.cs,GetSaveFileErrata,The length of the statement  "            if (!sav.Personal[pkm.Species].IsFormeWithinRange(pkm.AltForm) && !FormConverter.IsValidOutOfBoundsForme(pkm.Species' pkm.AltForm' pkm.GenNumber)) " is 146.
Long Statement,PKHeX.Core,SaveExtensions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\SaveExtensions.cs,GetSaveFileErrata,The length of the statement  "                errata.Add(string.Format(LegalityCheckStrings.LFormInvalidRange' Math.Max(0' sav.Personal[pkm.Species].FormeCount - 1)' pkm.AltForm)); " is 134.
Long Statement,PKHeX.Core,SaveExtensions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\SaveExtensions.cs,GetSaveFileErrata,The length of the statement  "                errata.Add($"{MsgIndexMoveRange} {string.Join("' "' pkm.Moves.Where(m => m > strings.Move.Count).Select(m => m.ToString()))}"); " is 127.
Long Statement,PKHeX.Core,SaveExtensions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\SaveExtensions.cs,GetSaveFileErrata,The length of the statement  "                errata.Add($"{MsgIndexMoveGame} {string.Join("' "' pkm.Moves.Where(m => m > sav.MaxMoveID).Select(m => strings.Move[m]))}"); " is 124.
Long Statement,PKHeX.Core,SaveUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\SaveUtil.cs,GetSavesFromFolder,The length of the statement  "                result = new[] { MsgFileLoadFailAuto + Environment.NewLine + folderPath' MsgFileLoadFailAutoAdvise + Environment.NewLine + MsgFileLoadFailAutoCause }; " is 150.
Long Statement,PKHeX.Core,SaveUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\SaveUtil.cs,CheckHeaderFooter,The length of the statement  "            static bool IsGameMatchHeader(IEnumerable<string> headers' byte[] data) => headers.Contains(Encoding.ASCII.GetString(data' 0' 4)); " is 130.
Long Statement,PKHeX.Core,Util,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Util\DataUtil.cs,GetStringResource,The length of the statement  "                bool Match(string x) => x.StartsWith("PKHeX.Core.Resources.text.") && x.EndsWith($"{name}.txt"' StringComparison.OrdinalIgnoreCase); " is 132.
Long Statement,PKHeX.Core,Util,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Util\DataUtil.cs,IsDateValid,The length of the statement  "            return !(year <= 0 || year > DateTime.MaxValue.Year || month < 1 || month > 12 || day < 1 || day > DateTime.DaysInMonth(year' month)); " is 134.
Long Statement,PKHeX.Core,Util,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Util\DataUtil.cs,IsDateValid,The length of the statement  "            return year < int.MaxValue && month < int.MaxValue && day < int.MaxValue && IsDateValid((int)year' (int)month' (int)day); " is 121.
Long Statement,PKHeX.Core,NetUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Util\NetUtil.cs,GetStreamFromURL,The length of the statement  "            httpWebRequest.UserAgent = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML' like Gecko) Chrome/60.0.3112.113 Safari/537.36"; " is 145.
Long Statement,PKHeX.Core,ReflectUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Util\ReflectUtil.cs,ConvertValue,The length of the statement  "                return DateTime.TryParseExact(value.ToString()' "yyyyMMdd"' CultureInfo.InvariantCulture' DateTimeStyles.None' out DateTime dateValue) " is 134.
Long Statement,PKHeX,GBRestrictions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\GBRestrictions.cs,GetExclusiveMovesG1,The length of the statement  "            // Return from two species the exclusive moves that only one could learn and also the current pokemon have it in its current moveset " is 132.
Long Statement,PKHeX,GBRestrictions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\GBRestrictions.cs,GetIncompatibleEvolutionMoves,The length of the statement  "                case (int)Species.Exeggutor when moves.Contains(23) && moves.Any(m => G1Exeggcute_IncompatibleMoves.Contains(moves[m])): " is 120.
Long Statement,PKHeX,GBRestrictions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\GBRestrictions.cs,GetRequiredMoveCount,The length of the statement  "            required += moves.Count(m => m != 0 && union.All(t => t != m) && (tmhm[1].Any(t => t == m) || tutor[1].Any(t => t == m))); " is 122.
Long Statement,PKHeX,GBRestrictions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\GBRestrictions.cs,GetRequiredMoveSlotsRegular,The length of the statement  "            // Caterpie and Metapod evolution lines have different count of possible slots available if captured in different evolutionary phases " is 133.
Long Statement,PKHeX,GBRestrictions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\GBRestrictions.cs,GetRequiredMoveCountSpecial,The length of the statement  "            // Species with few mandatory slots' species with stone evolutions that could evolve at lower level and do not learn any more moves " is 131.
Long Statement,PKHeX,GBRestrictions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\GBRestrictions.cs,GetCatchRateMatchesPreEvolution,The length of the statement  "            // For species catch rate' discard any species that has no valid encounters and a different catch rate than their pre-evolutions " is 128.
Long Statement,PKHeX,GBRestrictions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\GBRestrictions.cs,GetCatchRateMatchesPreEvolution,The length of the statement  "            bool IsCatchRateRBY(IEnumerable<int> ds) => ds.Any(s => catch_rate == PersonalTable.RB[s].CatchRate || (s != 149 && catch_rate == PersonalTable.Y[s].CatchRate)); " is 161.
Long Statement,PKHeX,GBRestrictions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\GBRestrictions.cs,GetTradebackStatusRBY,The length of the statement  "            // Detect tradeback status by comparing the catch rate(Gen1)/held item(Gen2) to the species in the pkm's evolution chain. " is 121.
Complex Conditional,PKHeX.Core,LegalityAnalysis,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Analysis.cs,LegalityAnalysis,The conditional expression  "!Valid && pkm.FatefulEncounter && Info.Relearn.Any(chk => !chk.Valid) && EncounterMatch is EncounterInvalid"  is complex.
Complex Conditional,PKHeX.Core,EncounterArea6XY,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterArea6XY.cs,GetValidFriendSafari,The conditional expression  "!pkm.XY || pkm.Met_Location != 148 || pkm.Met_Level != 30 || pkm.Egg_Location != 0"  is complex.
Complex Conditional,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,IsEvolutionValidWithMove,The conditional expression  "!SpeciesEvolutionWithMove.Contains(pkm.Species) || pkm.Format <= 3 || (BabyEvolutionWithMove.Contains(pkm.Species) && gen <= 3)"  is complex.
Complex Conditional,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,IsEvolutionValidWithMove,The conditional expression  "info.EncounterMatch.EggEncounter && !pkm.WasGiftEgg && !pkm.WasEventEgg && allowegg"  is complex.
Complex Conditional,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,IsEvolutionValidWithMove,The conditional expression  "pkm.HasOriginalMetLocation || (pkm.Format == 4 && pkm.Gen3) || pkm.VC || pkm.Species == 700"  is complex.
Complex Conditional,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,GetMaxLevelGeneration,The conditional expression  "pkm.Gen3 && pkm.Format > 4 && pkm.Met_Level == pkm.CurrentLevel && FutureEvolutionsGen3_LevelUpGen4.Contains(pkm.Species)"  is complex.
Complex Conditional,PKHeX.Core,EncounterStatic,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\EncounterStatic.cs,IsMatch,The conditional expression  "Generation > 3 && pkm.Format > 3 && pkm.WasEgg != EggEncounter && pkm.Egg_Location == 0 && !pkm.IsEgg"  is complex.
Complex Conditional,PKHeX.Core,EncounterStatic,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\EncounterStatic.cs,IsMatchGender,The conditional expression  "Species == (int) Core.Species.Azurill && Generation == 4 && Location == 233 && pkm.Gender == 0"  is complex.
Complex Conditional,PKHeX.Core,EncounterEggGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Generator\EncounterEggGenerator.cs,GenerateEggs,The conditional expression  "gen > 5 && (pkm.WasTradedEgg || all) && HasOtherGamePair(ver)"  is complex.
Complex Conditional,PKHeX.Core,EncounterEggGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Generator\EncounterEggGenerator.cs,GenerateEggs,The conditional expression  "gen > 5 && (pkm.WasTradedEgg || all) && HasOtherGamePair(ver)"  is complex.
Complex Conditional,PKHeX.Core,EncounterGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Generator\EncounterGenerator.cs,GenerateFilteredEncounters12,The conditional expression  "gen == 1 && (pkm.Korean || (obj is EncounterTrade t && !IsEncounterTrade1Valid(pkm' t)))"  is complex.
Complex Conditional,PKHeX.Core,EncounterGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Generator\EncounterGenerator.cs,GenerateFilteredEncounters12,The conditional expression  "gen == 2 && ((pkm.Korean && (((IVersion)obj).Version == GameVersion.C)) || kadabra)"  is complex.
Complex Conditional,PKHeX.Core,EvolutionVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\EvolutionVerifier.cs,IsValidEvolution,The conditional expression  "info.EncounterMatch.EggEncounter && species == 350 && pkm.Format >= 5 && !pkm.IsUntraded"  is complex.
Complex Conditional,PKHeX.Core,VerifyCurrentMoves,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\VerifyCurrentMoves.cs,ParseMovesPre3DS,The conditional expression  "info.Generation <= 2 && info.EncounterMatch is IGeneration g && (g.Generation == 1 || (g.Generation == 2 && !ParseSettings.AllowGen2MoveReminder(pkm)))"  is complex.
Complex Conditional,PKHeX.Core,VerifyCurrentMoves,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\VerifyCurrentMoves.cs,ParseMovesByGeneration,The conditional expression  "gen == 2 && !native && move > Legal.MaxMoveID_1 && pkm.VC1"  is complex.
Complex Conditional,PKHeX.Core,VerifyCurrentMoves,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\VerifyCurrentMoves.cs,ParseEvolutionLevelupMove,The conditional expression  "!res.All(r => r?.Valid ?? false) || moves.Any(m => m == 0) || (Legal.BabyEvolutionWithMove.Contains(pkm.Species) && info.Generation <= 3)"  is complex.
Complex Conditional,PKHeX.Core,EvolutionChain,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Evolutions\EvolutionChain.cs,GetChainAll,The conditional expression  "g <= 4 && 2 < pkm.Format && g < pkm.Format && !pkm.HasOriginalMetLocation && lvl > pkm.Met_Level"  is complex.
Complex Conditional,PKHeX.Core,EvolutionChain,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Evolutions\EvolutionChain.cs,GetChainAll,The conditional expression  "g > 2 && !pkm.HasOriginalMetLocation && g >= pkGen && noxfrDecremented"  is complex.
Complex Conditional,PKHeX.Core,EvolutionChain,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Evolutions\EvolutionChain.cs,GetValidPreEvolutions,The conditional expression  "pkm.Species == (int)Species.Shedinja && lvl >= 20 && (!pkm.HasOriginalMetLocation || pkm.Met_Level + 1 <= lvl)"  is complex.
Complex Conditional,PKHeX.Core,EvolutionChain,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Evolutions\EvolutionChain.cs,GetValidPreEvolutions,The conditional expression  "maxspeciesorigin == -1 && pkm.InhabitedGeneration(2) && pkm.Format <= 2 && pkm.GenNumber == 1"  is complex.
Complex Conditional,PKHeX.Core,EvolutionMethod,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Evolutions\EvolutionMethod.cs,Valid,The conditional expression  "!skipChecks && Banlist.Count > 0 && Banlist.Contains((GameVersion)pkm.Version) && pkm.IsUntraded"  is complex.
Complex Conditional,PKHeX.Core,MoveTutor,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveTutor.cs,AddMovesTutor1,The conditional expression  "ParseSettings.AllowGBCartEra && format < 3 && (species == 25 || species == 26)"  is complex.
Complex Conditional,PKHeX.Core,MethodFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\MethodFinder.cs,GetLCRNGRoamerMatch,The conditional expression  "IVs[2] != 0 || IVs[3] != 0 || IVs[4] != 0 || IVs[5] != 0 || IVs[1] > 7"  is complex.
Complex Conditional,PKHeX.Core,BallVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\BallVerifier.cs,VerifyBall,The conditional expression  "pkm.Ball == (int)Heavy && Legal.AlolanCaptureNoHeavyBall.Contains(EncounterMatch.Species) && !EncounterMatch.EggEncounter && pkm.SM"  is complex.
Complex Conditional,PKHeX.Core,BallVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\BallVerifier.cs,VerifyBallEggGen7,The conditional expression  "(species > 731 && species <= 785) || (Legal.AlolanCaptureOffspring.Contains(species) && !Legal.PastGenAlolanNativesUncapturable.Contains(species))"  is complex.
Complex Conditional,PKHeX.Core,BallVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\BallVerifier.cs,VerifyBallEggGen8,The conditional expression  "(species > 731 && species <= 785) || (Legal.AlolanCaptureOffspring.Contains(species) && !Legal.PastGenAlolanNativesUncapturable.Contains(species))"  is complex.
Complex Conditional,PKHeX.Core,GenderVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\GenderVerifier.cs,Verify,The conditional expression  "(pi.OnlyFemale && pkm.Gender != 1) || (pi.OnlyMale && pkm.Gender != 0)"  is complex.
Complex Conditional,PKHeX.Core,LanguageVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\LanguageVerifier.cs,Verify,The conditional expression  "pkm.Format == 4 && pkm.Gen4 && !IsValidG4Korean(currentLanguage)                  && !(data.EncounterMatch is EncounterTrade x && (x.Species == 25 || x.Species == 129))"  is complex.
Complex Conditional,PKHeX.Core,LevelVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\LevelVerifier.cs,VerifyG1,The conditional expression  "pkm.Format <= 2 && !(EncounterMatch is EncounterTrade) && EncounterMatch.Species == pkm.Species && GBRestrictions.Trade_Evolution1.Contains(EncounterMatch.Species)"  is complex.
Complex Conditional,PKHeX.Core,MemoryVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\MemoryVerifier.cs,VerifyHistory,The conditional expression  "pkm.OT_Affection != 0 && (pkm.AO || !pkm.IsUntraded) && IsInvalidContestAffection(pkm)"  is complex.
Complex Conditional,PKHeX.Core,MemoryVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\MemoryVerifier.cs,VerifyHistory7,The conditional expression  "(2 >= Info.Generation || Info.Generation >= 7) && pkm is IContestStats s && s.HasContestStats()"  is complex.
Complex Conditional,PKHeX.Core,MiscVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\MiscVerifier.cs,VerifyMiscG1CatchRate,The conditional expression  "(pk1.Species == 149 && catch_rate == PersonalTable.Y[149].CatchRate) || (GBRestrictions.Species_NotAvailable_CatchRate.Contains(pk1.Species) && catch_rate == PersonalTable.RB[pk1.Species].CatchRate)"  is complex.
Complex Conditional,PKHeX.Core,MiscVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\MiscVerifier.cs,VerifyMiscEggCommon,The conditional expression  "pkm.Move1_PPUps > 0 || pkm.Move2_PPUps > 0 || pkm.Move3_PPUps > 0 || pkm.Move4_PPUps > 0"  is complex.
Complex Conditional,PKHeX.Core,MiscVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\MiscVerifier.cs,VerifyMiscEggCommon,The conditional expression  "pkm.Move1_PP != pkm.GetMovePP(pkm.Move1' 0) || pkm.Move2_PP != pkm.GetMovePP(pkm.Move2' 0) || pkm.Move3_PP != pkm.GetMovePP(pkm.Move3' 0) || pkm.Move4_PP != pkm.GetMovePP(pkm.Move4' 0)"  is complex.
Complex Conditional,PKHeX.Core,PIDVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\PIDVerifier.cs,Verify,The conditional expression  "(Info.Generation >= 6 || (Info.Generation < 3 && pkm.Format >= 7)) && pkm.PID == pkm.EncryptionConstant"  is complex.
Complex Conditional,PKHeX.Core,RibbonVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\Ribbons\RibbonVerifier.cs,GetInvalidRibbons4Any,The conditional expression  "s4.RibbonFootprint && ((pkm.Format < 6 && gen == 5) || (gen >= 5 && pkm.CurrentLevel - pkm.Met_Level < 30))"  is complex.
Complex Conditional,PKHeX.Core,TrainerNameVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\TrainerNameVerifier.cs,VerifyOTG1,The conditional expression  "pkm.OT_Gender == 1 && ((pkm.Format == 2 && pkm.Met_Location == 0) || (pkm.Format > 2 && pkm.VC1))"  is complex.
Complex Conditional,PKHeX.Core,WC7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\MysteryGifts\WC7.cs,IsMatchExact,The conditional expression  "Species == 744 && Form == 1 && pkm.Species == 745 && pkm.AltForm == 2"  is complex.
Complex Conditional,PKHeX.Core,BK4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\BK4.cs,Trade,The conditional expression  "IsEgg && !(SAV_Trainer == OT_Name && SAV_TID == TID && SAV_SID == SID && SAV_GENDER == OT_Gender)"  is complex.
Complex Conditional,PKHeX.Core,PB7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PB7.cs,TradeOT,The conditional expression  "!(tr.OT == OT_Name && tr.TID == TID && tr.SID == SID && tr.Gender == OT_Gender)"  is complex.
Complex Conditional,PKHeX.Core,PK1,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PK1.cs,SetSpeciesValues,The conditional expression  "TradebackStatus != TradebackType.WasTradeback && !Legal.IsCatchRateHeldItem(Catch_Rate) && !(value == 25 && Catch_Rate == 0xA3)"  is complex.
Complex Conditional,PKHeX.Core,PK4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PK4.cs,Trade,The conditional expression  "IsEgg && !(SAV_Trainer == OT_Name && SAV_TID == TID && SAV_SID == SID && SAV_GENDER == OT_Gender)"  is complex.
Complex Conditional,PKHeX.Core,PK5,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PK5.cs,Trade,The conditional expression  "IsEgg && !(SAV_Trainer == OT_Name && SAV_TID == TID && SAV_SID == SID && SAV_GENDER == OT_Gender)"  is complex.
Complex Conditional,PKHeX.Core,PK6,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PK6.cs,TradeOT,The conditional expression  "!(tr.OT == OT_Name && tr.TID == TID && tr.SID == SID && tr.Gender == OT_Gender)"  is complex.
Complex Conditional,PKHeX.Core,PK6,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PK6.cs,TradeHT,The conditional expression  "tr.OT != HT_Name || tr.Gender != HT_Gender || (Geo1_Country == 0 && Geo1_Region == 0 && !IsUntradedEvent6)"  is complex.
Complex Conditional,PKHeX.Core,PK7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PK7.cs,TradeOT,The conditional expression  "!(tr.OT == OT_Name && tr.TID == TID && tr.SID == SID && tr.Gender == OT_Gender)"  is complex.
Complex Conditional,PKHeX.Core,PK7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PK7.cs,TradeHT,The conditional expression  "tr.OT != HT_Name || tr.Gender != HT_Gender || (Geo1_Country == 0 && Geo1_Region == 0 && !IsUntradedEvent6)"  is complex.
Complex Conditional,PKHeX.Core,PK8,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PK8.cs,Trade,The conditional expression  "(tr.OT != OT_Name) || (tr.TID != TID) || (tr.SID != SID) || (tr.Gender != OT_Gender)"  is complex.
Complex Conditional,PKHeX.Core,PK8,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PK8.cs,TradeOT,The conditional expression  "!(tr.OT == OT_Name && tr.TID == TID && tr.SID == SID && tr.Gender == OT_Gender)"  is complex.
Complex Conditional,PKHeX.Core,PKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PKM.cs,SetShiny,The conditional expression  "Format >= 6 && (Gen3 || Gen4 || Gen5)"  is complex.
Complex Conditional,PKHeX.Core,PKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PKM.cs,SetPIDGender,The conditional expression  "Format >= 6 && (Gen3 || Gen4 || Gen5)"  is complex.
Complex Conditional,PKHeX.Core,PKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PKM.cs,SetPIDNature,The conditional expression  "Format >= 6 && (Gen3 || Gen4 || Gen5)"  is complex.
Complex Conditional,PKHeX.Core,PKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PKM.cs,SetPIDUnown3,The conditional expression  "Format >= 6 && (Gen3 || Gen4 || Gen5)"  is complex.
Complex Conditional,PKHeX.Core,G6PKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Shared\G6PKM.cs,Trade,The conditional expression  "(tr.OT != OT_Name) || (tr.TID != TID) || (tr.SID != SID) || (tr.Gender != OT_Gender)"  is complex.
Complex Conditional,PKHeX.Core,PKMConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\PKMConverter.cs,GetPKMDataFormat,The conditional expression  "(BitConverter.ToUInt16(data' 0x4) == 0) && (BitConverter.ToUInt16(data' 0x80) >= 0x3333 || data[0x5F] >= 0x10) && BitConverter.ToUInt16(data' 0x46) == 0"  is complex.
Complex Conditional,PKHeX,GBRestrictions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\GBRestrictions.cs,GetRequiredMoveSlotsRegular,The conditional expression  "(species == (int)Species.Kakuna || species == (int)Species.Beedrill) && (catch_rate == 45 || catch_rate == 120)"  is complex.
Virtual Method Call from Constructor,PKHeX.Core,PKMSummary,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\PKM\PKMSummary.cs,PKMSummary,The constructor "PKMSummary" calls a virtual method "GetStats".
Virtual Method Call from Constructor,PKHeX.Core,EventBlockDiff,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\Saves\Editors\EventWork\EventWorkDiff.cs,EventBlockDiff,The constructor "EventBlockDiff" calls a virtual method "Diff".
Virtual Method Call from Constructor,PKHeX.Core,EventBlockDiff,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\Saves\Editors\EventWork\EventWorkDiff.cs,EventBlockDiff,The constructor "EventBlockDiff" calls a virtual method "Diff".
Virtual Method Call from Constructor,PKHeX.Core,BK4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\BK4.cs,BK4,The constructor "BK4" calls a virtual method "RefreshChecksum".
Magic Number,PKHeX.Core,BallRandomizer,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\BallRandomizer.cs,GetBallListFromColor,The following statement contains a magic number: var pi = pkm.Format >= 3 ? pkm.PersonalInfo : PersonalTable.USUM.GetFormeEntry(pkm.Species' 0);
Magic Number,PKHeX.Core,BallRandomizer,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\BallRandomizer.cs,GetCircularOnce,The following statement contains a magic number: currentIndex = items.Length - 2;
Magic Number,PKHeX.Core,BatchEditing,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\Bulk\BatchEditing.cs,GetPropArray,The following statement contains a magic number: var p1 = new string[Types.Length + 2][];
Magic Number,PKHeX.Core,BatchEditing,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\Bulk\BatchEditing.cs,SetSuggestedPKMProperty,The following statement contains a magic number: switch (name)              {                  // pb7 only                  case nameof(PB7.Stat_CP) when pk is PB7 pb7:                      pb7.ResetCP();                      return ModifyResult.Modified;                  case nameof(PB7.HeightAbsolute) when pk is PB7 pb7:                      pb7.HeightAbsolute = pb7.CalcHeightAbsolute;                      return ModifyResult.Modified;                  case nameof(PB7.WeightAbsolute) when pk is PB7 pb7:                      pb7.WeightAbsolute = pb7.CalcWeightAbsolute;                      return ModifyResult.Modified;                    case nameof(PKM.Nature) when pk.Format >= 8:                      pk.Nature = pk.StatNature;                      return ModifyResult.Modified;                  case nameof(PKM.StatNature) when pk.Format >= 8:                      pk.StatNature = pk.Nature;                      return ModifyResult.Modified;                  case nameof(PKM.Stats):                      pk.ResetPartyStats();                      return ModifyResult.Modified;                  case nameof(IHyperTrain.HyperTrainFlags):                      pk.SetSuggestedHyperTrainingData();                      return ModifyResult.Modified;                  case nameof(PKM.RelearnMoves):                      if (pk.Format >= 8)                      {                          pk.ClearRecordFlags();                          pk.SetRecordFlags(pk.Moves);                      }                      pk.SetRelearnMoves(info.SuggestedRelearn);                      return ModifyResult.Modified;                  case nameof(PKM.Met_Location):                      var encounter = info.SuggestedEncounter;                      if (encounter == null)                          return ModifyResult.Error;                        int level = encounter.Level;                      int location = encounter.Location;                      int minlvl = Legal.GetLowestLevel(pk' encounter.LevelMin);                        pk.Met_Level = level;                      pk.Met_Location = location;                      pk.CurrentLevel = Math.Max(minlvl' level);                        return ModifyResult.Modified;                    case nameof(PKM.Moves):                      return SetMoves(pk' pk.GetMoveSet(la: info.Legality));                    default:                      return ModifyResult.Error;              }
Magic Number,PKHeX.Core,BatchEditing,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\Bulk\BatchEditing.cs,SetSuggestedPKMProperty,The following statement contains a magic number: switch (name)              {                  // pb7 only                  case nameof(PB7.Stat_CP) when pk is PB7 pb7:                      pb7.ResetCP();                      return ModifyResult.Modified;                  case nameof(PB7.HeightAbsolute) when pk is PB7 pb7:                      pb7.HeightAbsolute = pb7.CalcHeightAbsolute;                      return ModifyResult.Modified;                  case nameof(PB7.WeightAbsolute) when pk is PB7 pb7:                      pb7.WeightAbsolute = pb7.CalcWeightAbsolute;                      return ModifyResult.Modified;                    case nameof(PKM.Nature) when pk.Format >= 8:                      pk.Nature = pk.StatNature;                      return ModifyResult.Modified;                  case nameof(PKM.StatNature) when pk.Format >= 8:                      pk.StatNature = pk.Nature;                      return ModifyResult.Modified;                  case nameof(PKM.Stats):                      pk.ResetPartyStats();                      return ModifyResult.Modified;                  case nameof(IHyperTrain.HyperTrainFlags):                      pk.SetSuggestedHyperTrainingData();                      return ModifyResult.Modified;                  case nameof(PKM.RelearnMoves):                      if (pk.Format >= 8)                      {                          pk.ClearRecordFlags();                          pk.SetRecordFlags(pk.Moves);                      }                      pk.SetRelearnMoves(info.SuggestedRelearn);                      return ModifyResult.Modified;                  case nameof(PKM.Met_Location):                      var encounter = info.SuggestedEncounter;                      if (encounter == null)                          return ModifyResult.Error;                        int level = encounter.Level;                      int location = encounter.Location;                      int minlvl = Legal.GetLowestLevel(pk' encounter.LevelMin);                        pk.Met_Level = level;                      pk.Met_Location = location;                      pk.CurrentLevel = Math.Max(minlvl' level);                        return ModifyResult.Modified;                    case nameof(PKM.Moves):                      return SetMoves(pk' pk.GetMoveSet(la: info.Legality));                    default:                      return ModifyResult.Error;              }
Magic Number,PKHeX.Core,BatchEditing,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\Bulk\BatchEditing.cs,SetSuggestedPKMProperty,The following statement contains a magic number: switch (name)              {                  // pb7 only                  case nameof(PB7.Stat_CP) when pk is PB7 pb7:                      pb7.ResetCP();                      return ModifyResult.Modified;                  case nameof(PB7.HeightAbsolute) when pk is PB7 pb7:                      pb7.HeightAbsolute = pb7.CalcHeightAbsolute;                      return ModifyResult.Modified;                  case nameof(PB7.WeightAbsolute) when pk is PB7 pb7:                      pb7.WeightAbsolute = pb7.CalcWeightAbsolute;                      return ModifyResult.Modified;                    case nameof(PKM.Nature) when pk.Format >= 8:                      pk.Nature = pk.StatNature;                      return ModifyResult.Modified;                  case nameof(PKM.StatNature) when pk.Format >= 8:                      pk.StatNature = pk.Nature;                      return ModifyResult.Modified;                  case nameof(PKM.Stats):                      pk.ResetPartyStats();                      return ModifyResult.Modified;                  case nameof(IHyperTrain.HyperTrainFlags):                      pk.SetSuggestedHyperTrainingData();                      return ModifyResult.Modified;                  case nameof(PKM.RelearnMoves):                      if (pk.Format >= 8)                      {                          pk.ClearRecordFlags();                          pk.SetRecordFlags(pk.Moves);                      }                      pk.SetRelearnMoves(info.SuggestedRelearn);                      return ModifyResult.Modified;                  case nameof(PKM.Met_Location):                      var encounter = info.SuggestedEncounter;                      if (encounter == null)                          return ModifyResult.Error;                        int level = encounter.Level;                      int location = encounter.Location;                      int minlvl = Legal.GetLowestLevel(pk' encounter.LevelMin);                        pk.Met_Level = level;                      pk.Met_Location = location;                      pk.CurrentLevel = Math.Max(minlvl' level);                        return ModifyResult.Modified;                    case nameof(PKM.Moves):                      return SetMoves(pk' pk.GetMoveSet(la: info.Legality));                    default:                      return ModifyResult.Error;              }
Magic Number,PKHeX.Core,BatchEditing,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\Bulk\BatchEditing.cs,SetByteArrayProperty,The following statement contains a magic number: static byte[] string2arr(string str) => str.Substring(CONST_BYTES.Length).Split(''').Select(z => Convert.ToByte(z.Trim()' 16)).ToArray();
Magic Number,PKHeX.Core,StringInstruction,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\Bulk\StringInstruction.cs,GetFilters,The following statement contains a magic number: return from line in raw                  let eval = line[0] == Require                  let split = line.Substring(1).Split(SplitInstruction)                  where split.Length == 2 && !string.IsNullOrWhiteSpace(split[0])                  select new StringInstruction(split[0]' split[1]) { Evaluator = eval };
Magic Number,PKHeX.Core,StringInstruction,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\Bulk\StringInstruction.cs,GetInstructions,The following statement contains a magic number: return from line in raw                  select line.Split(SplitInstruction) into split                  where split.Length == 2                  select new StringInstruction(split[0]' split[1]);
Magic Number,PKHeX.Core,CommonEdits,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\CommonEdits.cs,SetAltForm,The following statement contains a magic number: switch (pk.Format)              {                  case 2:                      while (pk.AltForm != form)                          pk.SetRandomIVs();                      break;                  case 3:                      pk.SetPIDUnown3(form);                      break;                  default:                      pk.AltForm = form;                      break;              }
Magic Number,PKHeX.Core,CommonEdits,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\CommonEdits.cs,SetAltForm,The following statement contains a magic number: switch (pk.Format)              {                  case 2:                      while (pk.AltForm != form)                          pk.SetRandomIVs();                      break;                  case 3:                      pk.SetPIDUnown3(form);                      break;                  default:                      pk.AltForm = form;                      break;              }
Magic Number,PKHeX.Core,CommonEdits,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\CommonEdits.cs,SetAbilityIndex,The following statement contains a magic number: pk is PK5 pk5 && abilIndex == 2
Magic Number,PKHeX.Core,CommonEdits,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\CommonEdits.cs,SetRandomEC,The following statement contains a magic number: 2 < gen && gen < 6
Magic Number,PKHeX.Core,CommonEdits,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\CommonEdits.cs,SetRandomEC,The following statement contains a magic number: 2 < gen && gen < 6
Magic Number,PKHeX.Core,CommonEdits,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\CommonEdits.cs,SetShiny,The following statement contains a magic number: pk.Format <= 7
Magic Number,PKHeX.Core,CommonEdits,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\CommonEdits.cs,SetNature,The following statement contains a magic number: pk.Format >= 8
Magic Number,PKHeX.Core,CommonEdits,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\CommonEdits.cs,SetMaximumPPUps,The following statement contains a magic number: pk.Move3_PPUps = GetPPUpCount(Moves[2]);
Magic Number,PKHeX.Core,CommonEdits,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\CommonEdits.cs,SetMaximumPPUps,The following statement contains a magic number: pk.Move4_PPUps = GetPPUpCount(Moves[3]);
Magic Number,PKHeX.Core,CommonEdits,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\CommonEdits.cs,SetMaximumPPUps,The following statement contains a magic number: static int GetPPUpCount(int moveID) => moveID > 0 ? 3 : 0;
Magic Number,PKHeX.Core,CommonEdits,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\CommonEdits.cs,SetMoves,The following statement contains a magic number: Array.Resize(ref Moves' 4);
Magic Number,PKHeX.Core,CommonEdits,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\CommonEdits.cs,SetMoves,The following statement contains a magic number: Moves.Length != 4
Magic Number,PKHeX.Core,CommonEdits,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\CommonEdits.cs,SetMaximumPPCurrent,The following statement contains a magic number: pk.Move3_PP = Moves.Length <= 2 ? 0 : pk.GetMovePP(Moves[2]' pk.Move3_PPUps);
Magic Number,PKHeX.Core,CommonEdits,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\CommonEdits.cs,SetMaximumPPCurrent,The following statement contains a magic number: pk.Move3_PP = Moves.Length <= 2 ? 0 : pk.GetMovePP(Moves[2]' pk.Move3_PPUps);
Magic Number,PKHeX.Core,CommonEdits,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\CommonEdits.cs,SetMaximumPPCurrent,The following statement contains a magic number: pk.Move4_PP = Moves.Length <= 3 ? 0 : pk.GetMovePP(Moves[3]' pk.Move4_PPUps);
Magic Number,PKHeX.Core,CommonEdits,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\CommonEdits.cs,SetMaximumPPCurrent,The following statement contains a magic number: pk.Move4_PP = Moves.Length <= 3 ? 0 : pk.GetMovePP(Moves[3]' pk.Move4_PPUps);
Magic Number,PKHeX.Core,CommonEdits,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\CommonEdits.cs,SetGender,The following statement contains a magic number: gender = Math.Min(2' Math.Max(0' gender));
Magic Number,PKHeX.Core,CommonEdits,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\CommonEdits.cs,SetGender,The following statement contains a magic number: pk.Format <= 2
Magic Number,PKHeX.Core,CommonEdits,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\CommonEdits.cs,GetSaneGender,The following statement contains a magic number: switch (gt)              {                  case 255: return 2; // Genderless                  case 254: return 1; // Female-Only                  case 0: return 0; // Male-Only              }
Magic Number,PKHeX.Core,CommonEdits,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\CommonEdits.cs,GetSaneGender,The following statement contains a magic number: switch (gt)              {                  case 255: return 2; // Genderless                  case 254: return 1; // Female-Only                  case 0: return 0; // Male-Only              }
Magic Number,PKHeX.Core,CommonEdits,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\CommonEdits.cs,GetSaneGender,The following statement contains a magic number: switch (gt)              {                  case 255: return 2; // Genderless                  case 254: return 1; // Female-Only                  case 0: return 0; // Male-Only              }
Magic Number,PKHeX.Core,CommonEdits,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\CommonEdits.cs,ApplySetDetails,The following statement contains a magic number: i < 6
Magic Number,PKHeX.Core,CommonEdits,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\CommonEdits.cs,SetMarkings,The following statement contains a magic number: pk.Format <= 3
Magic Number,PKHeX.Core,CommonEdits,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\CommonEdits.cs,SetMarkings,The following statement contains a magic number: pk.Format <= 3
Magic Number,PKHeX.Core,CommonEdits,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\CommonEdits.cs,FlagHighLow,The following statement contains a magic number: pk.Format < 7
Magic Number,PKHeX.Core,CommonEdits,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\CommonEdits.cs,FlagHighLow,The following statement contains a magic number: static int GetSimpleMarking(int val' int _) => val == 31 ? 1 : 0;
Magic Number,PKHeX.Core,CommonEdits,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\CommonEdits.cs,FlagHighLow,The following statement contains a magic number: val == 31 || val == 1
Magic Number,PKHeX.Core,CommonEdits,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\CommonEdits.cs,FlagHighLow,The following statement contains a magic number: return 2;
Magic Number,PKHeX.Core,CommonEdits,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\CommonEdits.cs,FlagHighLow,The following statement contains a magic number: val == 30 || val == 0
Magic Number,PKHeX.Core,CommonEdits,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\CommonEdits.cs,SetEV,The following statement contains a magic number: switch (index)              {                  case 0: pk.EV_HP = value; break;                  case 1: pk.EV_ATK = value; break;                  case 2: pk.EV_DEF = value; break;                  case 3: pk.EV_SPE = value; break;                  case 4: pk.EV_SPA = value; break;                  case 5: pk.EV_SPD = value; break;                  default:                      throw new ArgumentOutOfRangeException(nameof(index));              }
Magic Number,PKHeX.Core,CommonEdits,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\CommonEdits.cs,SetEV,The following statement contains a magic number: switch (index)              {                  case 0: pk.EV_HP = value; break;                  case 1: pk.EV_ATK = value; break;                  case 2: pk.EV_DEF = value; break;                  case 3: pk.EV_SPE = value; break;                  case 4: pk.EV_SPA = value; break;                  case 5: pk.EV_SPD = value; break;                  default:                      throw new ArgumentOutOfRangeException(nameof(index));              }
Magic Number,PKHeX.Core,CommonEdits,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\CommonEdits.cs,SetEV,The following statement contains a magic number: switch (index)              {                  case 0: pk.EV_HP = value; break;                  case 1: pk.EV_ATK = value; break;                  case 2: pk.EV_DEF = value; break;                  case 3: pk.EV_SPE = value; break;                  case 4: pk.EV_SPA = value; break;                  case 5: pk.EV_SPD = value; break;                  default:                      throw new ArgumentOutOfRangeException(nameof(index));              }
Magic Number,PKHeX.Core,CommonEdits,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\CommonEdits.cs,SetEV,The following statement contains a magic number: switch (index)              {                  case 0: pk.EV_HP = value; break;                  case 1: pk.EV_ATK = value; break;                  case 2: pk.EV_DEF = value; break;                  case 3: pk.EV_SPE = value; break;                  case 4: pk.EV_SPA = value; break;                  case 5: pk.EV_SPD = value; break;                  default:                      throw new ArgumentOutOfRangeException(nameof(index));              }
Magic Number,PKHeX.Core,CommonEdits,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\CommonEdits.cs,SetIV,The following statement contains a magic number: switch (index)              {                  case 0: pk.IV_HP = value; break;                  case 1: pk.IV_ATK = value; break;                  case 2: pk.IV_DEF = value; break;                  case 3: pk.IV_SPE = value; break;                  case 4: pk.IV_SPA = value; break;                  case 5: pk.IV_SPD = value; break;                  default:                      throw new ArgumentOutOfRangeException(nameof(index));              }
Magic Number,PKHeX.Core,CommonEdits,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\CommonEdits.cs,SetIV,The following statement contains a magic number: switch (index)              {                  case 0: pk.IV_HP = value; break;                  case 1: pk.IV_ATK = value; break;                  case 2: pk.IV_DEF = value; break;                  case 3: pk.IV_SPE = value; break;                  case 4: pk.IV_SPA = value; break;                  case 5: pk.IV_SPD = value; break;                  default:                      throw new ArgumentOutOfRangeException(nameof(index));              }
Magic Number,PKHeX.Core,CommonEdits,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\CommonEdits.cs,SetIV,The following statement contains a magic number: switch (index)              {                  case 0: pk.IV_HP = value; break;                  case 1: pk.IV_ATK = value; break;                  case 2: pk.IV_DEF = value; break;                  case 3: pk.IV_SPE = value; break;                  case 4: pk.IV_SPA = value; break;                  case 5: pk.IV_SPD = value; break;                  default:                      throw new ArgumentOutOfRangeException(nameof(index));              }
Magic Number,PKHeX.Core,CommonEdits,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\CommonEdits.cs,SetIV,The following statement contains a magic number: switch (index)              {                  case 0: pk.IV_HP = value; break;                  case 1: pk.IV_ATK = value; break;                  case 2: pk.IV_DEF = value; break;                  case 3: pk.IV_SPE = value; break;                  case 4: pk.IV_SPA = value; break;                  case 5: pk.IV_SPD = value; break;                  default:                      throw new ArgumentOutOfRangeException(nameof(index));              }
Magic Number,PKHeX.Core,CommonEdits,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\CommonEdits.cs,GetMaximumEV,The following statement contains a magic number: pk.Format < 3
Magic Number,PKHeX.Core,CommonEdits,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\CommonEdits.cs,GetMaximumEV,The following statement contains a magic number: int remaining = 510 - sum;
Magic Number,PKHeX.Core,CommonEdits,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\CommonEdits.cs,GetMaximumEV,The following statement contains a magic number: return Math.Min(Math.Max(remaining' 0)' 252);
Magic Number,PKHeX.Core,CommonEdits,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\CommonEdits.cs,SetRecordFlags,The following statement contains a magic number: var index = Array.FindIndex(Legal.TMHM_SWSH' 100' z => z == m);
Magic Number,PKHeX.Core,CommonEdits,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\CommonEdits.cs,SetRecordFlags,The following statement contains a magic number: index < 100
Magic Number,PKHeX.Core,CommonEdits,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\CommonEdits.cs,SetRecordFlags,The following statement contains a magic number: pk8.SetMoveRecordFlag(index - 100' true);
Magic Number,PKHeX.Core,CommonEdits,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\CommonEdits.cs,SetRecordFlags,The following statement contains a magic number: pk8.SetMoveRecordFlag(i - 100' true);
Magic Number,PKHeX.Core,CommonEdits,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\CommonEdits.cs,MaximizeLevel,The following statement contains a magic number: pkm.CurrentLevel = 100;
Magic Number,PKHeX.Core,CommonEdits,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\CommonEdits.cs,GetMoveSet,The following statement contains a magic number: const int count = 4;
Magic Number,PKHeX.Core,CommonEdits,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\CommonEdits.cs,ToggleMarking,The following statement contains a magic number: switch (pk.Format)              {                  case 3:                  case 4:                  case 5:                  case 6: // on/off                      markings[index] ^= 1; // toggle                      pk.Markings = markings;                      break;                  case 7: // 0 (none) | 1 (blue) | 2 (pink)                  case 8:                      markings[index] = (markings[index] + 1) % 3; // cycle 0->1->2->0...                      pk.Markings = markings;                      break;              }
Magic Number,PKHeX.Core,CommonEdits,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\CommonEdits.cs,ToggleMarking,The following statement contains a magic number: switch (pk.Format)              {                  case 3:                  case 4:                  case 5:                  case 6: // on/off                      markings[index] ^= 1; // toggle                      pk.Markings = markings;                      break;                  case 7: // 0 (none) | 1 (blue) | 2 (pink)                  case 8:                      markings[index] = (markings[index] + 1) % 3; // cycle 0->1->2->0...                      pk.Markings = markings;                      break;              }
Magic Number,PKHeX.Core,CommonEdits,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\CommonEdits.cs,ToggleMarking,The following statement contains a magic number: switch (pk.Format)              {                  case 3:                  case 4:                  case 5:                  case 6: // on/off                      markings[index] ^= 1; // toggle                      pk.Markings = markings;                      break;                  case 7: // 0 (none) | 1 (blue) | 2 (pink)                  case 8:                      markings[index] = (markings[index] + 1) % 3; // cycle 0->1->2->0...                      pk.Markings = markings;                      break;              }
Magic Number,PKHeX.Core,CommonEdits,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\CommonEdits.cs,ToggleMarking,The following statement contains a magic number: switch (pk.Format)              {                  case 3:                  case 4:                  case 5:                  case 6: // on/off                      markings[index] ^= 1; // toggle                      pk.Markings = markings;                      break;                  case 7: // 0 (none) | 1 (blue) | 2 (pink)                  case 8:                      markings[index] = (markings[index] + 1) % 3; // cycle 0->1->2->0...                      pk.Markings = markings;                      break;              }
Magic Number,PKHeX.Core,CommonEdits,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\CommonEdits.cs,ToggleMarking,The following statement contains a magic number: switch (pk.Format)              {                  case 3:                  case 4:                  case 5:                  case 6: // on/off                      markings[index] ^= 1; // toggle                      pk.Markings = markings;                      break;                  case 7: // 0 (none) | 1 (blue) | 2 (pink)                  case 8:                      markings[index] = (markings[index] + 1) % 3; // cycle 0->1->2->0...                      pk.Markings = markings;                      break;              }
Magic Number,PKHeX.Core,CommonEdits,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\CommonEdits.cs,ToggleMarking,The following statement contains a magic number: switch (pk.Format)              {                  case 3:                  case 4:                  case 5:                  case 6: // on/off                      markings[index] ^= 1; // toggle                      pk.Markings = markings;                      break;                  case 7: // 0 (none) | 1 (blue) | 2 (pink)                  case 8:                      markings[index] = (markings[index] + 1) % 3; // cycle 0->1->2->0...                      pk.Markings = markings;                      break;              }
Magic Number,PKHeX.Core,CommonEdits,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\CommonEdits.cs,ToggleMarking,The following statement contains a magic number: switch (pk.Format)              {                  case 3:                  case 4:                  case 5:                  case 6: // on/off                      markings[index] ^= 1; // toggle                      pk.Markings = markings;                      break;                  case 7: // 0 (none) | 1 (blue) | 2 (pink)                  case 8:                      markings[index] = (markings[index] + 1) % 3; // cycle 0->1->2->0...                      pk.Markings = markings;                      break;              }
Magic Number,PKHeX.Core,CommonEdits,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\CommonEdits.cs,SetHatchMemory6,The following statement contains a magic number: pk.OT_Memory = 2;
Magic Number,PKHeX.Core,CommonEdits,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\CommonEdits.cs,SetHatchMemory6,The following statement contains a magic number: pk.OT_TextVar = pk.XY ? 43 : 27;
Magic Number,PKHeX.Core,CommonEdits,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\CommonEdits.cs,SetHatchMemory6,The following statement contains a magic number: pk.OT_TextVar = pk.XY ? 43 : 27;
Magic Number,PKHeX.Core,CommonEdits,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\CommonEdits.cs,SetRandomMemory6,The following statement contains a magic number: pk.OT_Memory = 63;
Magic Number,PKHeX.Core,CommonEdits,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\CommonEdits.cs,SetRandomMemory6,The following statement contains a magic number: pk.OT_Intensity = 6;
Magic Number,PKHeX.Core,CommonEdits,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\CommonEdits.cs,GetLocationString,The following statement contains a magic number: pk.Format < 2
Magic Number,PKHeX.Core,HiddenPower,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\HiddenPower.cs,GetType,The following statement contains a magic number: format <= 2
Magic Number,PKHeX.Core,HiddenPower,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\HiddenPower.cs,GetType,The following statement contains a magic number: i < 6
Magic Number,PKHeX.Core,HiddenPower,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\HiddenPower.cs,GetTypeGB,The following statement contains a magic number: var IV_DEF = IVs[2];
Magic Number,PKHeX.Core,HiddenPower,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\HiddenPower.cs,GetTypeGB,The following statement contains a magic number: return ((IV_ATK & 3) << 2) | (IV_DEF & 3);
Magic Number,PKHeX.Core,HiddenPower,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\HiddenPower.cs,GetTypeGB,The following statement contains a magic number: return ((IV_ATK & 3) << 2) | (IV_DEF & 3);
Magic Number,PKHeX.Core,HiddenPower,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\HiddenPower.cs,GetTypeGB,The following statement contains a magic number: return ((IV_ATK & 3) << 2) | (IV_DEF & 3);
Magic Number,PKHeX.Core,HiddenPower,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\HiddenPower.cs,SetIVsForType,The following statement contains a magic number: IVs[1] = (IVs[1] & ~3) | (hpVal >> 2);
Magic Number,PKHeX.Core,HiddenPower,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\HiddenPower.cs,SetIVsForType,The following statement contains a magic number: IVs[1] = (IVs[1] & ~3) | (hpVal >> 2);
Magic Number,PKHeX.Core,HiddenPower,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\HiddenPower.cs,SetIVsForType,The following statement contains a magic number: IVs[2] = (IVs[2] & ~3) | (hpVal  & 3);
Magic Number,PKHeX.Core,HiddenPower,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\HiddenPower.cs,SetIVsForType,The following statement contains a magic number: IVs[2] = (IVs[2] & ~3) | (hpVal  & 3);
Magic Number,PKHeX.Core,HiddenPower,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\HiddenPower.cs,SetIVsForType,The following statement contains a magic number: IVs[2] = (IVs[2] & ~3) | (hpVal  & 3);
Magic Number,PKHeX.Core,HiddenPower,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\HiddenPower.cs,SetIVsForType,The following statement contains a magic number: IVs[2] = (IVs[2] & ~3) | (hpVal  & 3);
Magic Number,PKHeX.Core,HiddenPower,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\HiddenPower.cs,SetIVsForType,The following statement contains a magic number: format <= 2
Magic Number,PKHeX.Core,HiddenPower,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\HiddenPower.cs,SetIVsForType,The following statement contains a magic number: IVs.All(z => z == 31)
Magic Number,PKHeX.Core,HiddenPower,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\HiddenPower.cs,GetSuggestedHiddenPowerIVs,The following statement contains a magic number: var flawless = IVs.Select((v' i) => v == 31 ? i : -1).Where(v => v != -1).ToArray();
Magic Number,PKHeX.Core,HiddenPower,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\HiddenPower.cs,GetSuggestedHiddenPowerIVs,The following statement contains a magic number: int ct = ivs.Count(z => z == 31);
Magic Number,PKHeX.Core,HiddenPower,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\HiddenPower.cs,SetIVs,The following statement contains a magic number: ivs[1] = (ivs[1] & ~3) | (type >> 2);
Magic Number,PKHeX.Core,HiddenPower,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\HiddenPower.cs,SetIVs,The following statement contains a magic number: ivs[1] = (ivs[1] & ~3) | (type >> 2);
Magic Number,PKHeX.Core,HiddenPower,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\HiddenPower.cs,SetIVs,The following statement contains a magic number: ivs[2] = (ivs[2] & ~3) | (type & 3);
Magic Number,PKHeX.Core,HiddenPower,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\HiddenPower.cs,SetIVs,The following statement contains a magic number: ivs[2] = (ivs[2] & ~3) | (type & 3);
Magic Number,PKHeX.Core,HiddenPower,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\HiddenPower.cs,SetIVs,The following statement contains a magic number: ivs[2] = (ivs[2] & ~3) | (type & 3);
Magic Number,PKHeX.Core,HiddenPower,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\HiddenPower.cs,SetIVs,The following statement contains a magic number: ivs[2] = (ivs[2] & ~3) | (type & 3);
Magic Number,PKHeX.Core,HiddenPower,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\HiddenPower.cs,SetIVs,The following statement contains a magic number: format <= 2
Magic Number,PKHeX.Core,HiddenPower,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\HiddenPower.cs,SetIVs,The following statement contains a magic number: i < 6
Magic Number,PKHeX.Core,EditPKMUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\PKM\EditPKMUtil.cs,GetSuggestionMessage,The following statement contains a magic number: pkm.Format >= 3
Magic Number,PKHeX.Core,EditPKMUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\PKM\EditPKMUtil.cs,TemplateFields,The following statement contains a magic number: pk.Move1_PP = 40;
Magic Number,PKHeX.Core,EditPKMUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\PKM\EditPKMUtil.cs,TemplateFields,The following statement contains a magic number: pk.Ball = 4;
Magic Number,PKHeX.Core,RibbonApplicator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\RibbonApplicator.cs,SetRibbonValue,The following statement contains a magic number: switch (rib)              {                  case nameof(PK7.RibbonCountMemoryBattle):                      ReflectUtil.SetValue(pk' rib' value * (pk.Gen4 ? 6 : 8));                      break;                  case nameof(PK7.RibbonCountMemoryContest):                      ReflectUtil.SetValue(pk' rib' value * (pk.Gen4 ? 20 : 40));                      break;                  default:                      ReflectUtil.SetValue(pk' rib' value != 0);                      break;              }
Magic Number,PKHeX.Core,RibbonApplicator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\RibbonApplicator.cs,SetRibbonValue,The following statement contains a magic number: switch (rib)              {                  case nameof(PK7.RibbonCountMemoryBattle):                      ReflectUtil.SetValue(pk' rib' value * (pk.Gen4 ? 6 : 8));                      break;                  case nameof(PK7.RibbonCountMemoryContest):                      ReflectUtil.SetValue(pk' rib' value * (pk.Gen4 ? 20 : 40));                      break;                  default:                      ReflectUtil.SetValue(pk' rib' value != 0);                      break;              }
Magic Number,PKHeX.Core,RibbonApplicator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\RibbonApplicator.cs,SetRibbonValue,The following statement contains a magic number: switch (rib)              {                  case nameof(PK7.RibbonCountMemoryBattle):                      ReflectUtil.SetValue(pk' rib' value * (pk.Gen4 ? 6 : 8));                      break;                  case nameof(PK7.RibbonCountMemoryContest):                      ReflectUtil.SetValue(pk' rib' value * (pk.Gen4 ? 20 : 40));                      break;                  default:                      ReflectUtil.SetValue(pk' rib' value != 0);                      break;              }
Magic Number,PKHeX.Core,RibbonApplicator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\RibbonApplicator.cs,SetRibbonValue,The following statement contains a magic number: switch (rib)              {                  case nameof(PK7.RibbonCountMemoryBattle):                      ReflectUtil.SetValue(pk' rib' value * (pk.Gen4 ? 6 : 8));                      break;                  case nameof(PK7.RibbonCountMemoryContest):                      ReflectUtil.SetValue(pk' rib' value * (pk.Gen4 ? 20 : 40));                      break;                  default:                      ReflectUtil.SetValue(pk' rib' value != 0);                      break;              }
Magic Number,PKHeX.Core,EventWork<T>,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\Saves\Editors\EventWork\EventWork.cs,EventWork,The following statement contains a magic number: pieces.Count < 3
Magic Number,PKHeX.Core,EventWork<T>,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\Saves\Editors\EventWork\EventWork.cs,EventWork,The following statement contains a magic number: var items = pieces[2]                  .Split(''')                  .Select(z => z.Split(':'))                  .Where(z => z.Length == 2);
Magic Number,PKHeX.Core,EventWork<T>,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\Saves\Editors\EventWork\EventWork.cs,EventWork,The following statement contains a magic number: var items = pieces[2]                  .Split(''')                  .Select(z => z.Split(':'))                  .Where(z => z.Length == 2);
Magic Number,PKHeX.Core,EventBlockDiff,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\Saves\Editors\EventWork\EventWorkDiff.cs,SanityCheckFiles,The following statement contains a magic number: Message = string.Format(MsgSaveNumberInvalid' 2);
Magic Number,PKHeX.Core,EventBlockDiff,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\Saves\Editors\EventWork\EventWorkDiff.cs,SanityCheckFiles,The following statement contains a magic number: Message = string.Format(MsgSaveNumberInvalid' 2);
Magic Number,PKHeX.Core,EventWorkUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\Saves\Editors\EventWork\EventWorkUtil.cs,GetVars,The following statement contains a magic number: split.Length < 2 || split[0].Length < 2
Magic Number,PKHeX.Core,EventWorkUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\Saves\Editors\EventWork\EventWorkUtil.cs,GetVars,The following statement contains a magic number: split.Length < 2 || split[0].Length < 2
Magic Number,PKHeX.Core,SplitEventEditor<T>,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\Saves\Editors\EventWork\SplitEventEditor.cs,SplitEventEditor,The following statement contains a magic number: var worklines = work.Where(z => !string.IsNullOrWhiteSpace(z) && z.Length > 5);
Magic Number,PKHeX.Core,SplitEventEditor<T>,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\Saves\Editors\EventWork\SplitEventEditor.cs,SplitEventEditor,The following statement contains a magic number: var flaglines = flag.Where(z => !string.IsNullOrWhiteSpace(z) && z.Length > 5);
Magic Number,PKHeX.Core,Extensions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\Saves\Slots\Extensions.cs,GetExtraSlots2,The following statement contains a magic number: return new List<SlotInfoMisc>              {                  new SlotInfoMisc(sav.Data' 0' sav.GetDaycareSlotOffset(0' 2)) {Type = StorageSlotType.Daycare } // egg              };
Magic Number,PKHeX.Core,Extensions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\Saves\Slots\Extensions.cs,GetExtraSlots3,The following statement contains a magic number: return new List<SlotInfoMisc>              {                  new SlotInfoMisc(sav.Data' 0' sav.GetBlockOffset(4) + 0xE18) {Type = StorageSlotType.Daycare }              };
Magic Number,PKHeX.Core,Extensions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\Saves\Slots\Extensions.cs,GetExtraSlots5,The following statement contains a magic number: return new List<SlotInfoMisc>              {                  new SlotInfoMisc(sav.Data' 0' sav.GTS) {Type = StorageSlotType.GTS}'                  new SlotInfoMisc(sav.Data' 0' sav.Fused) {Type = StorageSlotType.Fused}'                    new SlotInfoMisc(sav.Data' 0' sav.GetBattleBoxSlot(0)) {Type = StorageSlotType.BattleBox}'                  new SlotInfoMisc(sav.Data' 1' sav.GetBattleBoxSlot(1)) {Type = StorageSlotType.BattleBox}'                  new SlotInfoMisc(sav.Data' 2' sav.GetBattleBoxSlot(2)) {Type = StorageSlotType.BattleBox}'                  new SlotInfoMisc(sav.Data' 3' sav.GetBattleBoxSlot(3)) {Type = StorageSlotType.BattleBox}'                  new SlotInfoMisc(sav.Data' 4' sav.GetBattleBoxSlot(4)) {Type = StorageSlotType.BattleBox}'                  new SlotInfoMisc(sav.Data' 5' sav.GetBattleBoxSlot(5)) {Type = StorageSlotType.BattleBox}'              };
Magic Number,PKHeX.Core,Extensions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\Saves\Slots\Extensions.cs,GetExtraSlots5,The following statement contains a magic number: return new List<SlotInfoMisc>              {                  new SlotInfoMisc(sav.Data' 0' sav.GTS) {Type = StorageSlotType.GTS}'                  new SlotInfoMisc(sav.Data' 0' sav.Fused) {Type = StorageSlotType.Fused}'                    new SlotInfoMisc(sav.Data' 0' sav.GetBattleBoxSlot(0)) {Type = StorageSlotType.BattleBox}'                  new SlotInfoMisc(sav.Data' 1' sav.GetBattleBoxSlot(1)) {Type = StorageSlotType.BattleBox}'                  new SlotInfoMisc(sav.Data' 2' sav.GetBattleBoxSlot(2)) {Type = StorageSlotType.BattleBox}'                  new SlotInfoMisc(sav.Data' 3' sav.GetBattleBoxSlot(3)) {Type = StorageSlotType.BattleBox}'                  new SlotInfoMisc(sav.Data' 4' sav.GetBattleBoxSlot(4)) {Type = StorageSlotType.BattleBox}'                  new SlotInfoMisc(sav.Data' 5' sav.GetBattleBoxSlot(5)) {Type = StorageSlotType.BattleBox}'              };
Magic Number,PKHeX.Core,Extensions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\Saves\Slots\Extensions.cs,GetExtraSlots5,The following statement contains a magic number: return new List<SlotInfoMisc>              {                  new SlotInfoMisc(sav.Data' 0' sav.GTS) {Type = StorageSlotType.GTS}'                  new SlotInfoMisc(sav.Data' 0' sav.Fused) {Type = StorageSlotType.Fused}'                    new SlotInfoMisc(sav.Data' 0' sav.GetBattleBoxSlot(0)) {Type = StorageSlotType.BattleBox}'                  new SlotInfoMisc(sav.Data' 1' sav.GetBattleBoxSlot(1)) {Type = StorageSlotType.BattleBox}'                  new SlotInfoMisc(sav.Data' 2' sav.GetBattleBoxSlot(2)) {Type = StorageSlotType.BattleBox}'                  new SlotInfoMisc(sav.Data' 3' sav.GetBattleBoxSlot(3)) {Type = StorageSlotType.BattleBox}'                  new SlotInfoMisc(sav.Data' 4' sav.GetBattleBoxSlot(4)) {Type = StorageSlotType.BattleBox}'                  new SlotInfoMisc(sav.Data' 5' sav.GetBattleBoxSlot(5)) {Type = StorageSlotType.BattleBox}'              };
Magic Number,PKHeX.Core,Extensions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\Saves\Slots\Extensions.cs,GetExtraSlots5,The following statement contains a magic number: return new List<SlotInfoMisc>              {                  new SlotInfoMisc(sav.Data' 0' sav.GTS) {Type = StorageSlotType.GTS}'                  new SlotInfoMisc(sav.Data' 0' sav.Fused) {Type = StorageSlotType.Fused}'                    new SlotInfoMisc(sav.Data' 0' sav.GetBattleBoxSlot(0)) {Type = StorageSlotType.BattleBox}'                  new SlotInfoMisc(sav.Data' 1' sav.GetBattleBoxSlot(1)) {Type = StorageSlotType.BattleBox}'                  new SlotInfoMisc(sav.Data' 2' sav.GetBattleBoxSlot(2)) {Type = StorageSlotType.BattleBox}'                  new SlotInfoMisc(sav.Data' 3' sav.GetBattleBoxSlot(3)) {Type = StorageSlotType.BattleBox}'                  new SlotInfoMisc(sav.Data' 4' sav.GetBattleBoxSlot(4)) {Type = StorageSlotType.BattleBox}'                  new SlotInfoMisc(sav.Data' 5' sav.GetBattleBoxSlot(5)) {Type = StorageSlotType.BattleBox}'              };
Magic Number,PKHeX.Core,Extensions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\Saves\Slots\Extensions.cs,GetExtraSlots5,The following statement contains a magic number: return new List<SlotInfoMisc>              {                  new SlotInfoMisc(sav.Data' 0' sav.GTS) {Type = StorageSlotType.GTS}'                  new SlotInfoMisc(sav.Data' 0' sav.Fused) {Type = StorageSlotType.Fused}'                    new SlotInfoMisc(sav.Data' 0' sav.GetBattleBoxSlot(0)) {Type = StorageSlotType.BattleBox}'                  new SlotInfoMisc(sav.Data' 1' sav.GetBattleBoxSlot(1)) {Type = StorageSlotType.BattleBox}'                  new SlotInfoMisc(sav.Data' 2' sav.GetBattleBoxSlot(2)) {Type = StorageSlotType.BattleBox}'                  new SlotInfoMisc(sav.Data' 3' sav.GetBattleBoxSlot(3)) {Type = StorageSlotType.BattleBox}'                  new SlotInfoMisc(sav.Data' 4' sav.GetBattleBoxSlot(4)) {Type = StorageSlotType.BattleBox}'                  new SlotInfoMisc(sav.Data' 5' sav.GetBattleBoxSlot(5)) {Type = StorageSlotType.BattleBox}'              };
Magic Number,PKHeX.Core,Extensions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\Saves\Slots\Extensions.cs,GetExtraSlots5,The following statement contains a magic number: return new List<SlotInfoMisc>              {                  new SlotInfoMisc(sav.Data' 0' sav.GTS) {Type = StorageSlotType.GTS}'                  new SlotInfoMisc(sav.Data' 0' sav.Fused) {Type = StorageSlotType.Fused}'                    new SlotInfoMisc(sav.Data' 0' sav.GetBattleBoxSlot(0)) {Type = StorageSlotType.BattleBox}'                  new SlotInfoMisc(sav.Data' 1' sav.GetBattleBoxSlot(1)) {Type = StorageSlotType.BattleBox}'                  new SlotInfoMisc(sav.Data' 2' sav.GetBattleBoxSlot(2)) {Type = StorageSlotType.BattleBox}'                  new SlotInfoMisc(sav.Data' 3' sav.GetBattleBoxSlot(3)) {Type = StorageSlotType.BattleBox}'                  new SlotInfoMisc(sav.Data' 4' sav.GetBattleBoxSlot(4)) {Type = StorageSlotType.BattleBox}'                  new SlotInfoMisc(sav.Data' 5' sav.GetBattleBoxSlot(5)) {Type = StorageSlotType.BattleBox}'              };
Magic Number,PKHeX.Core,Extensions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\Saves\Slots\Extensions.cs,GetExtraSlots5,The following statement contains a magic number: return new List<SlotInfoMisc>              {                  new SlotInfoMisc(sav.Data' 0' sav.GTS) {Type = StorageSlotType.GTS}'                  new SlotInfoMisc(sav.Data' 0' sav.Fused) {Type = StorageSlotType.Fused}'                    new SlotInfoMisc(sav.Data' 0' sav.GetBattleBoxSlot(0)) {Type = StorageSlotType.BattleBox}'                  new SlotInfoMisc(sav.Data' 1' sav.GetBattleBoxSlot(1)) {Type = StorageSlotType.BattleBox}'                  new SlotInfoMisc(sav.Data' 2' sav.GetBattleBoxSlot(2)) {Type = StorageSlotType.BattleBox}'                  new SlotInfoMisc(sav.Data' 3' sav.GetBattleBoxSlot(3)) {Type = StorageSlotType.BattleBox}'                  new SlotInfoMisc(sav.Data' 4' sav.GetBattleBoxSlot(4)) {Type = StorageSlotType.BattleBox}'                  new SlotInfoMisc(sav.Data' 5' sav.GetBattleBoxSlot(5)) {Type = StorageSlotType.BattleBox}'              };
Magic Number,PKHeX.Core,Extensions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\Saves\Slots\Extensions.cs,GetExtraSlots5,The following statement contains a magic number: return new List<SlotInfoMisc>              {                  new SlotInfoMisc(sav.Data' 0' sav.GTS) {Type = StorageSlotType.GTS}'                  new SlotInfoMisc(sav.Data' 0' sav.Fused) {Type = StorageSlotType.Fused}'                    new SlotInfoMisc(sav.Data' 0' sav.GetBattleBoxSlot(0)) {Type = StorageSlotType.BattleBox}'                  new SlotInfoMisc(sav.Data' 1' sav.GetBattleBoxSlot(1)) {Type = StorageSlotType.BattleBox}'                  new SlotInfoMisc(sav.Data' 2' sav.GetBattleBoxSlot(2)) {Type = StorageSlotType.BattleBox}'                  new SlotInfoMisc(sav.Data' 3' sav.GetBattleBoxSlot(3)) {Type = StorageSlotType.BattleBox}'                  new SlotInfoMisc(sav.Data' 4' sav.GetBattleBoxSlot(4)) {Type = StorageSlotType.BattleBox}'                  new SlotInfoMisc(sav.Data' 5' sav.GetBattleBoxSlot(5)) {Type = StorageSlotType.BattleBox}'              };
Magic Number,PKHeX.Core,Extensions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\Saves\Slots\Extensions.cs,GetExtraSlots6XY,The following statement contains a magic number: return new List<SlotInfoMisc>              {                  new SlotInfoMisc(sav.Data' 0' sav.GTS) {Type = StorageSlotType.GTS}'                  new SlotInfoMisc(sav.Data' 0' sav.Fused) {Type = StorageSlotType.Fused}'                  new SlotInfoMisc(sav.Data' 0' sav.SUBE) {Type = StorageSlotType.Misc}'                    new SlotInfoMisc(sav.Data' 0' sav.GetBattleBoxSlot(0)) {Type = StorageSlotType.BattleBox}'                  new SlotInfoMisc(sav.Data' 1' sav.GetBattleBoxSlot(1)) {Type = StorageSlotType.BattleBox}'                  new SlotInfoMisc(sav.Data' 2' sav.GetBattleBoxSlot(2)) {Type = StorageSlotType.BattleBox}'                  new SlotInfoMisc(sav.Data' 3' sav.GetBattleBoxSlot(3)) {Type = StorageSlotType.BattleBox}'                  new SlotInfoMisc(sav.Data' 4' sav.GetBattleBoxSlot(4)) {Type = StorageSlotType.BattleBox}'                  new SlotInfoMisc(sav.Data' 5' sav.GetBattleBoxSlot(5)) {Type = StorageSlotType.BattleBox}'              };
Magic Number,PKHeX.Core,Extensions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\Saves\Slots\Extensions.cs,GetExtraSlots6XY,The following statement contains a magic number: return new List<SlotInfoMisc>              {                  new SlotInfoMisc(sav.Data' 0' sav.GTS) {Type = StorageSlotType.GTS}'                  new SlotInfoMisc(sav.Data' 0' sav.Fused) {Type = StorageSlotType.Fused}'                  new SlotInfoMisc(sav.Data' 0' sav.SUBE) {Type = StorageSlotType.Misc}'                    new SlotInfoMisc(sav.Data' 0' sav.GetBattleBoxSlot(0)) {Type = StorageSlotType.BattleBox}'                  new SlotInfoMisc(sav.Data' 1' sav.GetBattleBoxSlot(1)) {Type = StorageSlotType.BattleBox}'                  new SlotInfoMisc(sav.Data' 2' sav.GetBattleBoxSlot(2)) {Type = StorageSlotType.BattleBox}'                  new SlotInfoMisc(sav.Data' 3' sav.GetBattleBoxSlot(3)) {Type = StorageSlotType.BattleBox}'                  new SlotInfoMisc(sav.Data' 4' sav.GetBattleBoxSlot(4)) {Type = StorageSlotType.BattleBox}'                  new SlotInfoMisc(sav.Data' 5' sav.GetBattleBoxSlot(5)) {Type = StorageSlotType.BattleBox}'              };
Magic Number,PKHeX.Core,Extensions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\Saves\Slots\Extensions.cs,GetExtraSlots6XY,The following statement contains a magic number: return new List<SlotInfoMisc>              {                  new SlotInfoMisc(sav.Data' 0' sav.GTS) {Type = StorageSlotType.GTS}'                  new SlotInfoMisc(sav.Data' 0' sav.Fused) {Type = StorageSlotType.Fused}'                  new SlotInfoMisc(sav.Data' 0' sav.SUBE) {Type = StorageSlotType.Misc}'                    new SlotInfoMisc(sav.Data' 0' sav.GetBattleBoxSlot(0)) {Type = StorageSlotType.BattleBox}'                  new SlotInfoMisc(sav.Data' 1' sav.GetBattleBoxSlot(1)) {Type = StorageSlotType.BattleBox}'                  new SlotInfoMisc(sav.Data' 2' sav.GetBattleBoxSlot(2)) {Type = StorageSlotType.BattleBox}'                  new SlotInfoMisc(sav.Data' 3' sav.GetBattleBoxSlot(3)) {Type = StorageSlotType.BattleBox}'                  new SlotInfoMisc(sav.Data' 4' sav.GetBattleBoxSlot(4)) {Type = StorageSlotType.BattleBox}'                  new SlotInfoMisc(sav.Data' 5' sav.GetBattleBoxSlot(5)) {Type = StorageSlotType.BattleBox}'              };
Magic Number,PKHeX.Core,Extensions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\Saves\Slots\Extensions.cs,GetExtraSlots6XY,The following statement contains a magic number: return new List<SlotInfoMisc>              {                  new SlotInfoMisc(sav.Data' 0' sav.GTS) {Type = StorageSlotType.GTS}'                  new SlotInfoMisc(sav.Data' 0' sav.Fused) {Type = StorageSlotType.Fused}'                  new SlotInfoMisc(sav.Data' 0' sav.SUBE) {Type = StorageSlotType.Misc}'                    new SlotInfoMisc(sav.Data' 0' sav.GetBattleBoxSlot(0)) {Type = StorageSlotType.BattleBox}'                  new SlotInfoMisc(sav.Data' 1' sav.GetBattleBoxSlot(1)) {Type = StorageSlotType.BattleBox}'                  new SlotInfoMisc(sav.Data' 2' sav.GetBattleBoxSlot(2)) {Type = StorageSlotType.BattleBox}'                  new SlotInfoMisc(sav.Data' 3' sav.GetBattleBoxSlot(3)) {Type = StorageSlotType.BattleBox}'                  new SlotInfoMisc(sav.Data' 4' sav.GetBattleBoxSlot(4)) {Type = StorageSlotType.BattleBox}'                  new SlotInfoMisc(sav.Data' 5' sav.GetBattleBoxSlot(5)) {Type = StorageSlotType.BattleBox}'              };
Magic Number,PKHeX.Core,Extensions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\Saves\Slots\Extensions.cs,GetExtraSlots6XY,The following statement contains a magic number: return new List<SlotInfoMisc>              {                  new SlotInfoMisc(sav.Data' 0' sav.GTS) {Type = StorageSlotType.GTS}'                  new SlotInfoMisc(sav.Data' 0' sav.Fused) {Type = StorageSlotType.Fused}'                  new SlotInfoMisc(sav.Data' 0' sav.SUBE) {Type = StorageSlotType.Misc}'                    new SlotInfoMisc(sav.Data' 0' sav.GetBattleBoxSlot(0)) {Type = StorageSlotType.BattleBox}'                  new SlotInfoMisc(sav.Data' 1' sav.GetBattleBoxSlot(1)) {Type = StorageSlotType.BattleBox}'                  new SlotInfoMisc(sav.Data' 2' sav.GetBattleBoxSlot(2)) {Type = StorageSlotType.BattleBox}'                  new SlotInfoMisc(sav.Data' 3' sav.GetBattleBoxSlot(3)) {Type = StorageSlotType.BattleBox}'                  new SlotInfoMisc(sav.Data' 4' sav.GetBattleBoxSlot(4)) {Type = StorageSlotType.BattleBox}'                  new SlotInfoMisc(sav.Data' 5' sav.GetBattleBoxSlot(5)) {Type = StorageSlotType.BattleBox}'              };
Magic Number,PKHeX.Core,Extensions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\Saves\Slots\Extensions.cs,GetExtraSlots6XY,The following statement contains a magic number: return new List<SlotInfoMisc>              {                  new SlotInfoMisc(sav.Data' 0' sav.GTS) {Type = StorageSlotType.GTS}'                  new SlotInfoMisc(sav.Data' 0' sav.Fused) {Type = StorageSlotType.Fused}'                  new SlotInfoMisc(sav.Data' 0' sav.SUBE) {Type = StorageSlotType.Misc}'                    new SlotInfoMisc(sav.Data' 0' sav.GetBattleBoxSlot(0)) {Type = StorageSlotType.BattleBox}'                  new SlotInfoMisc(sav.Data' 1' sav.GetBattleBoxSlot(1)) {Type = StorageSlotType.BattleBox}'                  new SlotInfoMisc(sav.Data' 2' sav.GetBattleBoxSlot(2)) {Type = StorageSlotType.BattleBox}'                  new SlotInfoMisc(sav.Data' 3' sav.GetBattleBoxSlot(3)) {Type = StorageSlotType.BattleBox}'                  new SlotInfoMisc(sav.Data' 4' sav.GetBattleBoxSlot(4)) {Type = StorageSlotType.BattleBox}'                  new SlotInfoMisc(sav.Data' 5' sav.GetBattleBoxSlot(5)) {Type = StorageSlotType.BattleBox}'              };
Magic Number,PKHeX.Core,Extensions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\Saves\Slots\Extensions.cs,GetExtraSlots6XY,The following statement contains a magic number: return new List<SlotInfoMisc>              {                  new SlotInfoMisc(sav.Data' 0' sav.GTS) {Type = StorageSlotType.GTS}'                  new SlotInfoMisc(sav.Data' 0' sav.Fused) {Type = StorageSlotType.Fused}'                  new SlotInfoMisc(sav.Data' 0' sav.SUBE) {Type = StorageSlotType.Misc}'                    new SlotInfoMisc(sav.Data' 0' sav.GetBattleBoxSlot(0)) {Type = StorageSlotType.BattleBox}'                  new SlotInfoMisc(sav.Data' 1' sav.GetBattleBoxSlot(1)) {Type = StorageSlotType.BattleBox}'                  new SlotInfoMisc(sav.Data' 2' sav.GetBattleBoxSlot(2)) {Type = StorageSlotType.BattleBox}'                  new SlotInfoMisc(sav.Data' 3' sav.GetBattleBoxSlot(3)) {Type = StorageSlotType.BattleBox}'                  new SlotInfoMisc(sav.Data' 4' sav.GetBattleBoxSlot(4)) {Type = StorageSlotType.BattleBox}'                  new SlotInfoMisc(sav.Data' 5' sav.GetBattleBoxSlot(5)) {Type = StorageSlotType.BattleBox}'              };
Magic Number,PKHeX.Core,Extensions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\Saves\Slots\Extensions.cs,GetExtraSlots6XY,The following statement contains a magic number: return new List<SlotInfoMisc>              {                  new SlotInfoMisc(sav.Data' 0' sav.GTS) {Type = StorageSlotType.GTS}'                  new SlotInfoMisc(sav.Data' 0' sav.Fused) {Type = StorageSlotType.Fused}'                  new SlotInfoMisc(sav.Data' 0' sav.SUBE) {Type = StorageSlotType.Misc}'                    new SlotInfoMisc(sav.Data' 0' sav.GetBattleBoxSlot(0)) {Type = StorageSlotType.BattleBox}'                  new SlotInfoMisc(sav.Data' 1' sav.GetBattleBoxSlot(1)) {Type = StorageSlotType.BattleBox}'                  new SlotInfoMisc(sav.Data' 2' sav.GetBattleBoxSlot(2)) {Type = StorageSlotType.BattleBox}'                  new SlotInfoMisc(sav.Data' 3' sav.GetBattleBoxSlot(3)) {Type = StorageSlotType.BattleBox}'                  new SlotInfoMisc(sav.Data' 4' sav.GetBattleBoxSlot(4)) {Type = StorageSlotType.BattleBox}'                  new SlotInfoMisc(sav.Data' 5' sav.GetBattleBoxSlot(5)) {Type = StorageSlotType.BattleBox}'              };
Magic Number,PKHeX.Core,Extensions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\Saves\Slots\Extensions.cs,GetExtraSlots6AO,The following statement contains a magic number: return new List<SlotInfoMisc>              {                  new SlotInfoMisc(sav.Data' 0' sav.GTS) {Type = StorageSlotType.GTS}'                  new SlotInfoMisc(sav.Data' 0' sav.Fused) {Type = StorageSlotType.Fused}'                    new SlotInfoMisc(sav.Data' 0' sav.GetBattleBoxSlot(0)) {Type = StorageSlotType.BattleBox}'                  new SlotInfoMisc(sav.Data' 1' sav.GetBattleBoxSlot(1)) {Type = StorageSlotType.BattleBox}'                  new SlotInfoMisc(sav.Data' 2' sav.GetBattleBoxSlot(2)) {Type = StorageSlotType.BattleBox}'                  new SlotInfoMisc(sav.Data' 3' sav.GetBattleBoxSlot(3)) {Type = StorageSlotType.BattleBox}'                  new SlotInfoMisc(sav.Data' 4' sav.GetBattleBoxSlot(4)) {Type = StorageSlotType.BattleBox}'                  new SlotInfoMisc(sav.Data' 5' sav.GetBattleBoxSlot(5)) {Type = StorageSlotType.BattleBox}'              };
Magic Number,PKHeX.Core,Extensions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\Saves\Slots\Extensions.cs,GetExtraSlots6AO,The following statement contains a magic number: return new List<SlotInfoMisc>              {                  new SlotInfoMisc(sav.Data' 0' sav.GTS) {Type = StorageSlotType.GTS}'                  new SlotInfoMisc(sav.Data' 0' sav.Fused) {Type = StorageSlotType.Fused}'                    new SlotInfoMisc(sav.Data' 0' sav.GetBattleBoxSlot(0)) {Type = StorageSlotType.BattleBox}'                  new SlotInfoMisc(sav.Data' 1' sav.GetBattleBoxSlot(1)) {Type = StorageSlotType.BattleBox}'                  new SlotInfoMisc(sav.Data' 2' sav.GetBattleBoxSlot(2)) {Type = StorageSlotType.BattleBox}'                  new SlotInfoMisc(sav.Data' 3' sav.GetBattleBoxSlot(3)) {Type = StorageSlotType.BattleBox}'                  new SlotInfoMisc(sav.Data' 4' sav.GetBattleBoxSlot(4)) {Type = StorageSlotType.BattleBox}'                  new SlotInfoMisc(sav.Data' 5' sav.GetBattleBoxSlot(5)) {Type = StorageSlotType.BattleBox}'              };
Magic Number,PKHeX.Core,Extensions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\Saves\Slots\Extensions.cs,GetExtraSlots6AO,The following statement contains a magic number: return new List<SlotInfoMisc>              {                  new SlotInfoMisc(sav.Data' 0' sav.GTS) {Type = StorageSlotType.GTS}'                  new SlotInfoMisc(sav.Data' 0' sav.Fused) {Type = StorageSlotType.Fused}'                    new SlotInfoMisc(sav.Data' 0' sav.GetBattleBoxSlot(0)) {Type = StorageSlotType.BattleBox}'                  new SlotInfoMisc(sav.Data' 1' sav.GetBattleBoxSlot(1)) {Type = StorageSlotType.BattleBox}'                  new SlotInfoMisc(sav.Data' 2' sav.GetBattleBoxSlot(2)) {Type = StorageSlotType.BattleBox}'                  new SlotInfoMisc(sav.Data' 3' sav.GetBattleBoxSlot(3)) {Type = StorageSlotType.BattleBox}'                  new SlotInfoMisc(sav.Data' 4' sav.GetBattleBoxSlot(4)) {Type = StorageSlotType.BattleBox}'                  new SlotInfoMisc(sav.Data' 5' sav.GetBattleBoxSlot(5)) {Type = StorageSlotType.BattleBox}'              };
Magic Number,PKHeX.Core,Extensions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\Saves\Slots\Extensions.cs,GetExtraSlots6AO,The following statement contains a magic number: return new List<SlotInfoMisc>              {                  new SlotInfoMisc(sav.Data' 0' sav.GTS) {Type = StorageSlotType.GTS}'                  new SlotInfoMisc(sav.Data' 0' sav.Fused) {Type = StorageSlotType.Fused}'                    new SlotInfoMisc(sav.Data' 0' sav.GetBattleBoxSlot(0)) {Type = StorageSlotType.BattleBox}'                  new SlotInfoMisc(sav.Data' 1' sav.GetBattleBoxSlot(1)) {Type = StorageSlotType.BattleBox}'                  new SlotInfoMisc(sav.Data' 2' sav.GetBattleBoxSlot(2)) {Type = StorageSlotType.BattleBox}'                  new SlotInfoMisc(sav.Data' 3' sav.GetBattleBoxSlot(3)) {Type = StorageSlotType.BattleBox}'                  new SlotInfoMisc(sav.Data' 4' sav.GetBattleBoxSlot(4)) {Type = StorageSlotType.BattleBox}'                  new SlotInfoMisc(sav.Data' 5' sav.GetBattleBoxSlot(5)) {Type = StorageSlotType.BattleBox}'              };
Magic Number,PKHeX.Core,Extensions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\Saves\Slots\Extensions.cs,GetExtraSlots6AO,The following statement contains a magic number: return new List<SlotInfoMisc>              {                  new SlotInfoMisc(sav.Data' 0' sav.GTS) {Type = StorageSlotType.GTS}'                  new SlotInfoMisc(sav.Data' 0' sav.Fused) {Type = StorageSlotType.Fused}'                    new SlotInfoMisc(sav.Data' 0' sav.GetBattleBoxSlot(0)) {Type = StorageSlotType.BattleBox}'                  new SlotInfoMisc(sav.Data' 1' sav.GetBattleBoxSlot(1)) {Type = StorageSlotType.BattleBox}'                  new SlotInfoMisc(sav.Data' 2' sav.GetBattleBoxSlot(2)) {Type = StorageSlotType.BattleBox}'                  new SlotInfoMisc(sav.Data' 3' sav.GetBattleBoxSlot(3)) {Type = StorageSlotType.BattleBox}'                  new SlotInfoMisc(sav.Data' 4' sav.GetBattleBoxSlot(4)) {Type = StorageSlotType.BattleBox}'                  new SlotInfoMisc(sav.Data' 5' sav.GetBattleBoxSlot(5)) {Type = StorageSlotType.BattleBox}'              };
Magic Number,PKHeX.Core,Extensions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\Saves\Slots\Extensions.cs,GetExtraSlots6AO,The following statement contains a magic number: return new List<SlotInfoMisc>              {                  new SlotInfoMisc(sav.Data' 0' sav.GTS) {Type = StorageSlotType.GTS}'                  new SlotInfoMisc(sav.Data' 0' sav.Fused) {Type = StorageSlotType.Fused}'                    new SlotInfoMisc(sav.Data' 0' sav.GetBattleBoxSlot(0)) {Type = StorageSlotType.BattleBox}'                  new SlotInfoMisc(sav.Data' 1' sav.GetBattleBoxSlot(1)) {Type = StorageSlotType.BattleBox}'                  new SlotInfoMisc(sav.Data' 2' sav.GetBattleBoxSlot(2)) {Type = StorageSlotType.BattleBox}'                  new SlotInfoMisc(sav.Data' 3' sav.GetBattleBoxSlot(3)) {Type = StorageSlotType.BattleBox}'                  new SlotInfoMisc(sav.Data' 4' sav.GetBattleBoxSlot(4)) {Type = StorageSlotType.BattleBox}'                  new SlotInfoMisc(sav.Data' 5' sav.GetBattleBoxSlot(5)) {Type = StorageSlotType.BattleBox}'              };
Magic Number,PKHeX.Core,Extensions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\Saves\Slots\Extensions.cs,GetExtraSlots6AO,The following statement contains a magic number: return new List<SlotInfoMisc>              {                  new SlotInfoMisc(sav.Data' 0' sav.GTS) {Type = StorageSlotType.GTS}'                  new SlotInfoMisc(sav.Data' 0' sav.Fused) {Type = StorageSlotType.Fused}'                    new SlotInfoMisc(sav.Data' 0' sav.GetBattleBoxSlot(0)) {Type = StorageSlotType.BattleBox}'                  new SlotInfoMisc(sav.Data' 1' sav.GetBattleBoxSlot(1)) {Type = StorageSlotType.BattleBox}'                  new SlotInfoMisc(sav.Data' 2' sav.GetBattleBoxSlot(2)) {Type = StorageSlotType.BattleBox}'                  new SlotInfoMisc(sav.Data' 3' sav.GetBattleBoxSlot(3)) {Type = StorageSlotType.BattleBox}'                  new SlotInfoMisc(sav.Data' 4' sav.GetBattleBoxSlot(4)) {Type = StorageSlotType.BattleBox}'                  new SlotInfoMisc(sav.Data' 5' sav.GetBattleBoxSlot(5)) {Type = StorageSlotType.BattleBox}'              };
Magic Number,PKHeX.Core,Extensions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\Saves\Slots\Extensions.cs,GetExtraSlots6AO,The following statement contains a magic number: return new List<SlotInfoMisc>              {                  new SlotInfoMisc(sav.Data' 0' sav.GTS) {Type = StorageSlotType.GTS}'                  new SlotInfoMisc(sav.Data' 0' sav.Fused) {Type = StorageSlotType.Fused}'                    new SlotInfoMisc(sav.Data' 0' sav.GetBattleBoxSlot(0)) {Type = StorageSlotType.BattleBox}'                  new SlotInfoMisc(sav.Data' 1' sav.GetBattleBoxSlot(1)) {Type = StorageSlotType.BattleBox}'                  new SlotInfoMisc(sav.Data' 2' sav.GetBattleBoxSlot(2)) {Type = StorageSlotType.BattleBox}'                  new SlotInfoMisc(sav.Data' 3' sav.GetBattleBoxSlot(3)) {Type = StorageSlotType.BattleBox}'                  new SlotInfoMisc(sav.Data' 4' sav.GetBattleBoxSlot(4)) {Type = StorageSlotType.BattleBox}'                  new SlotInfoMisc(sav.Data' 5' sav.GetBattleBoxSlot(5)) {Type = StorageSlotType.BattleBox}'              };
Magic Number,PKHeX.Core,Extensions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\Saves\Slots\Extensions.cs,GetExtraSlots7,The following statement contains a magic number: var list = new List<SlotInfoMisc>              {                  new SlotInfoMisc(sav.Data' 0' sav.AllBlocks[07].Offset) {Type = StorageSlotType.GTS}'                  new SlotInfoMisc(sav.Data' 0' sav.GetFusedSlotOffset(0)) {Type = StorageSlotType.Fused}              };
Magic Number,PKHeX.Core,Extensions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\Saves\Slots\Extensions.cs,GetExtraSlots7,The following statement contains a magic number: list.AddRange(new[]                 {                      new SlotInfoMisc(sav.Data' 1' sav.GetFusedSlotOffset(1)) {Type = StorageSlotType.Fused}'                      new SlotInfoMisc(sav.Data' 2' sav.GetFusedSlotOffset(2)) {Type = StorageSlotType.Fused}'                  });
Magic Number,PKHeX.Core,Extensions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\Saves\Slots\Extensions.cs,GetExtraSlots7,The following statement contains a magic number: list.AddRange(new[]                 {                      new SlotInfoMisc(sav.Data' 1' sav.GetFusedSlotOffset(1)) {Type = StorageSlotType.Fused}'                      new SlotInfoMisc(sav.Data' 2' sav.GetFusedSlotOffset(2)) {Type = StorageSlotType.Fused}'                  });
Magic Number,PKHeX.Core,Extensions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\Saves\Slots\Extensions.cs,GetMoveTypeGeneration,The following statement contains a magic number: generation <= 2
Magic Number,PKHeX.Core,Extensions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\Saves\Slots\Extensions.cs,GetMoveTypeFromG12,The following statement contains a magic number: type -= 10;
Magic Number,PKHeX.Core,Extensions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\Saves\Slots\Extensions.cs,ApplyToPKM,The following statement contains a magic number: pk.SID = pk.Format < 3 || pk.VC ? 0 : info.SID;
Magic Number,PKHeX.Core,Extensions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\Saves\Slots\Extensions.cs,ApplyToPKM,The following statement contains a magic number: pk.Format >= 8 || pk is PB7
Magic Number,PKHeX.Core,Extensions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\Saves\Slots\Extensions.cs,ApplyHandlingTrainerInfo,The following statement contains a magic number: pk.Format == 6
Magic Number,PKHeX.Core,Extensions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\Saves\Slots\Extensions.cs,IsFromTrainer,The following statement contains a magic number: pk.Format <= 2
Magic Number,PKHeX.Core,Extensions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\Saves\Slots\Extensions.cs,IsFromTrainer,The following statement contains a magic number: pk.Format == 3
Magic Number,PKHeX.Core,Extensions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\Saves\Slots\Extensions.cs,SetAV,The following statement contains a magic number: switch (index)              {                  case 0: pk.AV_HP = value; break;                  case 1: pk.AV_ATK = value; break;                  case 2: pk.AV_DEF = value; break;                  case 3: pk.AV_SPE = value; break;                  case 4: pk.AV_SPA = value; break;                  case 5: pk.AV_SPD = value; break;                  default:                      throw new ArgumentOutOfRangeException(nameof(index));              }
Magic Number,PKHeX.Core,Extensions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\Saves\Slots\Extensions.cs,SetAV,The following statement contains a magic number: switch (index)              {                  case 0: pk.AV_HP = value; break;                  case 1: pk.AV_ATK = value; break;                  case 2: pk.AV_DEF = value; break;                  case 3: pk.AV_SPE = value; break;                  case 4: pk.AV_SPA = value; break;                  case 5: pk.AV_SPD = value; break;                  default:                      throw new ArgumentOutOfRangeException(nameof(index));              }
Magic Number,PKHeX.Core,Extensions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\Saves\Slots\Extensions.cs,SetAV,The following statement contains a magic number: switch (index)              {                  case 0: pk.AV_HP = value; break;                  case 1: pk.AV_ATK = value; break;                  case 2: pk.AV_DEF = value; break;                  case 3: pk.AV_SPE = value; break;                  case 4: pk.AV_SPA = value; break;                  case 5: pk.AV_SPD = value; break;                  default:                      throw new ArgumentOutOfRangeException(nameof(index));              }
Magic Number,PKHeX.Core,Extensions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\Saves\Slots\Extensions.cs,SetAV,The following statement contains a magic number: switch (index)              {                  case 0: pk.AV_HP = value; break;                  case 1: pk.AV_ATK = value; break;                  case 2: pk.AV_DEF = value; break;                  case 3: pk.AV_SPE = value; break;                  case 4: pk.AV_SPA = value; break;                  case 5: pk.AV_SPD = value; break;                  default:                      throw new ArgumentOutOfRangeException(nameof(index));              }
Magic Number,PKHeX.Core,Extensions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\Saves\Slots\Extensions.cs,GetAV,The following statement contains a magic number: return index switch              {                  0 => pk.AV_HP'                  1 => pk.AV_ATK'                  2 => pk.AV_DEF'                  3 => pk.AV_SPE'                  4 => pk.AV_SPA'                  5 => pk.AV_SPD'                  _ => throw new ArgumentOutOfRangeException(nameof(index))              };
Magic Number,PKHeX.Core,Extensions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\Saves\Slots\Extensions.cs,GetAV,The following statement contains a magic number: return index switch              {                  0 => pk.AV_HP'                  1 => pk.AV_ATK'                  2 => pk.AV_DEF'                  3 => pk.AV_SPE'                  4 => pk.AV_SPA'                  5 => pk.AV_SPD'                  _ => throw new ArgumentOutOfRangeException(nameof(index))              };
Magic Number,PKHeX.Core,Extensions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\Saves\Slots\Extensions.cs,GetAV,The following statement contains a magic number: return index switch              {                  0 => pk.AV_HP'                  1 => pk.AV_ATK'                  2 => pk.AV_DEF'                  3 => pk.AV_SPE'                  4 => pk.AV_SPA'                  5 => pk.AV_SPD'                  _ => throw new ArgumentOutOfRangeException(nameof(index))              };
Magic Number,PKHeX.Core,Extensions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\Saves\Slots\Extensions.cs,GetAV,The following statement contains a magic number: return index switch              {                  0 => pk.AV_HP'                  1 => pk.AV_ATK'                  2 => pk.AV_DEF'                  3 => pk.AV_SPE'                  4 => pk.AV_SPA'                  5 => pk.AV_SPD'                  _ => throw new ArgumentOutOfRangeException(nameof(index))              };
Magic Number,PKHeX.Core,Extensions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\Saves\Slots\Extensions.cs,SetSuggestedAwakenedValues,The following statement contains a magic number: a.SetAV(i' 200);
Magic Number,PKHeX.Core,Extensions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\Saves\Slots\Extensions.cs,SetSuggestedAwakenedValues,The following statement contains a magic number: pk.GetIV(i) > 2
Magic Number,PKHeX.Core,Extensions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\Saves\Slots\Extensions.cs,SetSuggestedAwakenedValues,The following statement contains a magic number: i < 6
Magic Number,PKHeX.Core,Extensions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\Saves\Slots\Extensions.cs,SetContestStats,The following statement contains a magic number: stats?.Length != 6
Magic Number,PKHeX.Core,Extensions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\Saves\Slots\Extensions.cs,SetContestStats,The following statement contains a magic number: dest.CNT_Cute   = stats[2];
Magic Number,PKHeX.Core,Extensions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\Saves\Slots\Extensions.cs,SetContestStats,The following statement contains a magic number: dest.CNT_Smart  = stats[3];
Magic Number,PKHeX.Core,Extensions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\Saves\Slots\Extensions.cs,SetContestStats,The following statement contains a magic number: dest.CNT_Tough  = stats[4];
Magic Number,PKHeX.Core,Extensions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\Saves\Slots\Extensions.cs,SetContestStats,The following statement contains a magic number: dest.CNT_Sheen  = stats[5];
Magic Number,PKHeX.Core,Extensions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\Saves\Slots\Extensions.cs,HyperTrainInvert,The following statement contains a magic number: return index switch              {                  0 => (t.HT_HP ^= true)'                  1 => (t.HT_ATK ^= true)'                  2 => (t.HT_DEF ^= true)'                  3 => (t.HT_SPE ^= true)'                  4 => (t.HT_SPA ^= true)'                  5 => (t.HT_SPD ^= true)'                  _ => false              };
Magic Number,PKHeX.Core,Extensions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\Saves\Slots\Extensions.cs,HyperTrainInvert,The following statement contains a magic number: return index switch              {                  0 => (t.HT_HP ^= true)'                  1 => (t.HT_ATK ^= true)'                  2 => (t.HT_DEF ^= true)'                  3 => (t.HT_SPE ^= true)'                  4 => (t.HT_SPA ^= true)'                  5 => (t.HT_SPD ^= true)'                  _ => false              };
Magic Number,PKHeX.Core,Extensions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\Saves\Slots\Extensions.cs,HyperTrainInvert,The following statement contains a magic number: return index switch              {                  0 => (t.HT_HP ^= true)'                  1 => (t.HT_ATK ^= true)'                  2 => (t.HT_DEF ^= true)'                  3 => (t.HT_SPE ^= true)'                  4 => (t.HT_SPA ^= true)'                  5 => (t.HT_SPD ^= true)'                  _ => false              };
Magic Number,PKHeX.Core,Extensions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\Saves\Slots\Extensions.cs,HyperTrainInvert,The following statement contains a magic number: return index switch              {                  0 => (t.HT_HP ^= true)'                  1 => (t.HT_ATK ^= true)'                  2 => (t.HT_DEF ^= true)'                  3 => (t.HT_SPE ^= true)'                  4 => (t.HT_SPA ^= true)'                  5 => (t.HT_SPD ^= true)'                  _ => false              };
Magic Number,PKHeX.Core,Extensions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\Saves\Slots\Extensions.cs,IsHyperTrained,The following statement contains a magic number: return index switch              {                  0 => t.HT_HP'                  1 => t.HT_ATK'                  2 => t.HT_DEF'                  3 => t.HT_SPE'                  4 => t.HT_SPA'                  5 => t.HT_SPD'                  _ => throw new ArgumentOutOfRangeException(nameof(index))              };
Magic Number,PKHeX.Core,Extensions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\Saves\Slots\Extensions.cs,IsHyperTrained,The following statement contains a magic number: return index switch              {                  0 => t.HT_HP'                  1 => t.HT_ATK'                  2 => t.HT_DEF'                  3 => t.HT_SPE'                  4 => t.HT_SPA'                  5 => t.HT_SPD'                  _ => throw new ArgumentOutOfRangeException(nameof(index))              };
Magic Number,PKHeX.Core,Extensions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\Saves\Slots\Extensions.cs,IsHyperTrained,The following statement contains a magic number: return index switch              {                  0 => t.HT_HP'                  1 => t.HT_ATK'                  2 => t.HT_DEF'                  3 => t.HT_SPE'                  4 => t.HT_SPA'                  5 => t.HT_SPD'                  _ => throw new ArgumentOutOfRangeException(nameof(index))              };
Magic Number,PKHeX.Core,Extensions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\Saves\Slots\Extensions.cs,IsHyperTrained,The following statement contains a magic number: return index switch              {                  0 => t.HT_HP'                  1 => t.HT_ATK'                  2 => t.HT_DEF'                  3 => t.HT_SPE'                  4 => t.HT_SPA'                  5 => t.HT_SPD'                  _ => throw new ArgumentOutOfRangeException(nameof(index))              };
Magic Number,PKHeX.Core,Extensions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\Saves\Slots\Extensions.cs,GetHT,The following statement contains a magic number: return index switch              {                  0 => pk.HT_HP'                  1 => pk.HT_ATK'                  2 => pk.HT_DEF'                  3 => pk.HT_SPE'                  4 => pk.HT_SPA'                  5 => pk.HT_SPD'                  _ => throw new ArgumentOutOfRangeException(nameof(index))              };
Magic Number,PKHeX.Core,Extensions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\Saves\Slots\Extensions.cs,GetHT,The following statement contains a magic number: return index switch              {                  0 => pk.HT_HP'                  1 => pk.HT_ATK'                  2 => pk.HT_DEF'                  3 => pk.HT_SPE'                  4 => pk.HT_SPA'                  5 => pk.HT_SPD'                  _ => throw new ArgumentOutOfRangeException(nameof(index))              };
Magic Number,PKHeX.Core,Extensions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\Saves\Slots\Extensions.cs,GetHT,The following statement contains a magic number: return index switch              {                  0 => pk.HT_HP'                  1 => pk.HT_ATK'                  2 => pk.HT_DEF'                  3 => pk.HT_SPE'                  4 => pk.HT_SPA'                  5 => pk.HT_SPD'                  _ => throw new ArgumentOutOfRangeException(nameof(index))              };
Magic Number,PKHeX.Core,Extensions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\Saves\Slots\Extensions.cs,GetHT,The following statement contains a magic number: return index switch              {                  0 => pk.HT_HP'                  1 => pk.HT_ATK'                  2 => pk.HT_DEF'                  3 => pk.HT_SPE'                  4 => pk.HT_SPA'                  5 => pk.HT_SPD'                  _ => throw new ArgumentOutOfRangeException(nameof(index))              };
Magic Number,PKHeX.Core,Extensions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\Saves\Slots\Extensions.cs,SetSuggestedHyperTrainingData,The following statement contains a magic number: pkm.CurrentLevel < 100
Magic Number,PKHeX.Core,Extensions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\Saves\Slots\Extensions.cs,SetSuggestedHyperTrainingData,The following statement contains a magic number: t.HT_HP = IVs[0] != 31;
Magic Number,PKHeX.Core,Extensions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\Saves\Slots\Extensions.cs,SetSuggestedHyperTrainingData,The following statement contains a magic number: t.HT_ATK = IVs[1] != 31 && IVs[1] > 2;
Magic Number,PKHeX.Core,Extensions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\Saves\Slots\Extensions.cs,SetSuggestedHyperTrainingData,The following statement contains a magic number: t.HT_ATK = IVs[1] != 31 && IVs[1] > 2;
Magic Number,PKHeX.Core,Extensions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\Saves\Slots\Extensions.cs,SetSuggestedHyperTrainingData,The following statement contains a magic number: t.HT_DEF = IVs[2] != 31;
Magic Number,PKHeX.Core,Extensions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\Saves\Slots\Extensions.cs,SetSuggestedHyperTrainingData,The following statement contains a magic number: t.HT_DEF = IVs[2] != 31;
Magic Number,PKHeX.Core,Extensions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\Saves\Slots\Extensions.cs,SetSuggestedHyperTrainingData,The following statement contains a magic number: t.HT_SPE = IVs[3] != 31 && IVs[3] > 2;
Magic Number,PKHeX.Core,Extensions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\Saves\Slots\Extensions.cs,SetSuggestedHyperTrainingData,The following statement contains a magic number: t.HT_SPE = IVs[3] != 31 && IVs[3] > 2;
Magic Number,PKHeX.Core,Extensions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\Saves\Slots\Extensions.cs,SetSuggestedHyperTrainingData,The following statement contains a magic number: t.HT_SPE = IVs[3] != 31 && IVs[3] > 2;
Magic Number,PKHeX.Core,Extensions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\Saves\Slots\Extensions.cs,SetSuggestedHyperTrainingData,The following statement contains a magic number: t.HT_SPE = IVs[3] != 31 && IVs[3] > 2;
Magic Number,PKHeX.Core,Extensions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\Saves\Slots\Extensions.cs,SetSuggestedHyperTrainingData,The following statement contains a magic number: t.HT_SPA = IVs[4] != 31;
Magic Number,PKHeX.Core,Extensions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\Saves\Slots\Extensions.cs,SetSuggestedHyperTrainingData,The following statement contains a magic number: t.HT_SPA = IVs[4] != 31;
Magic Number,PKHeX.Core,Extensions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\Saves\Slots\Extensions.cs,SetSuggestedHyperTrainingData,The following statement contains a magic number: t.HT_SPD = IVs[5] != 31;
Magic Number,PKHeX.Core,Extensions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\Saves\Slots\Extensions.cs,SetSuggestedHyperTrainingData,The following statement contains a magic number: t.HT_SPD = IVs[5] != 31;
Magic Number,PKHeX.Core,Extensions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\Saves\Slots\Extensions.cs,GetTrainerIDFormat,The following statement contains a magic number: return 4;
Magic Number,PKHeX.Core,Extensions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\Saves\Slots\Extensions.cs,GetTrainerIDFormat,The following statement contains a magic number: (format < 3 && p.Format >= 7) || format <= 0
Magic Number,PKHeX.Core,Extensions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\Saves\Slots\Extensions.cs,GetTrainerIDFormat,The following statement contains a magic number: (format < 3 && p.Format >= 7) || format <= 0
Magic Number,PKHeX.Core,ShowdownSet,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\ShowdownSet.cs,LoadLines,The following statement contains a magic number: lines = lines.Where(z => z.Length > 2);
Magic Number,PKHeX.Core,ShowdownSet,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\ShowdownSet.cs,LocalizedText,The following statement contains a magic number: lang += lang >= 5 ? 2 : 1;
Magic Number,PKHeX.Core,ShowdownSet,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\ShowdownSet.cs,LocalizedText,The following statement contains a magic number: lang += lang >= 5 ? 2 : 1;
Magic Number,PKHeX.Core,ShowdownSet,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\ShowdownSet.cs,GetSetLines,The following statement contains a magic number: var ivs = GetStringStats(IVsSpeedLast' Format < 3 ? 15 : 31);
Magic Number,PKHeX.Core,ShowdownSet,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\ShowdownSet.cs,GetSetLines,The following statement contains a magic number: var ivs = GetStringStats(IVsSpeedLast' Format < 3 ? 15 : 31);
Magic Number,PKHeX.Core,ShowdownSet,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\ShowdownSet.cs,GetSetLines,The following statement contains a magic number: var ivs = GetStringStats(IVsSpeedLast' Format < 3 ? 15 : 31);
Magic Number,PKHeX.Core,ShowdownSet,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\ShowdownSet.cs,GetSetLines,The following statement contains a magic number: Level != 100
Magic Number,PKHeX.Core,ShowdownSet,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\ShowdownSet.cs,GetStringMoves,The following statement contains a magic number: move == 237
Magic Number,PKHeX.Core,ShowdownSet,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\ShowdownSet.cs,ShowdownSet,The following statement contains a magic number: Gender = genders[pkm.Gender < 2 ? pkm.Gender : 2];
Magic Number,PKHeX.Core,ShowdownSet,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\ShowdownSet.cs,ShowdownSet,The following statement contains a magic number: Gender = genders[pkm.Gender < 2 ? pkm.Gender : 2];
Magic Number,PKHeX.Core,ShowdownSet,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\ShowdownSet.cs,ParseItemStr,The following statement contains a magic number: tryGetItem(3)
Magic Number,PKHeX.Core,ShowdownSet,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\ShowdownSet.cs,ParseItemStr,The following statement contains a magic number: tryGetItem(2)
Magic Number,PKHeX.Core,ShowdownSet,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\ShowdownSet.cs,ParseFirstLineNoItem,The following statement contains a magic number: string last3 = line.Substring(line.Length - 3);
Magic Number,PKHeX.Core,ShowdownSet,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\ShowdownSet.cs,ParseFirstLineNoItem,The following statement contains a magic number: line = line.Substring(0' line.Length - 3);
Magic Number,PKHeX.Core,ShowdownSet,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\ShowdownSet.cs,ParseLineMove,The following statement contains a magic number: const int hiddenPower = 237;
Magic Number,PKHeX.Core,ShowdownSet,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\ShowdownSet.cs,ParseLineMove,The following statement contains a magic number: string moveString = line.Substring(line[1] == ' ' ? 2 : 1).Trim();
Magic Number,PKHeX.Core,ShowdownSet,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\ShowdownSet.cs,ParseLineMove,The following statement contains a magic number: moveString.Length <= 13
Magic Number,PKHeX.Core,ShowdownSet,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\ShowdownSet.cs,ParseLineMove,The following statement contains a magic number: string type = moveString.Substring(13);
Magic Number,PKHeX.Core,ShowdownSet,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\ShowdownSet.cs,ParseLineMove,The following statement contains a magic number: IVs.Any(z => z != 31)
Magic Number,PKHeX.Core,ShowdownSet,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\ShowdownSet.cs,ParseLineEVs,The following statement contains a magic number: int pos = i * 2;
Magic Number,PKHeX.Core,ShowdownSet,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\ShowdownSet.cs,ParseLineEVs,The following statement contains a magic number: i < list.Length / 2
Magic Number,PKHeX.Core,ShowdownSet,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\ShowdownSet.cs,ParseLineIVs,The following statement contains a magic number: int pos = i * 2;
Magic Number,PKHeX.Core,ShowdownSet,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\ShowdownSet.cs,ParseLineIVs,The following statement contains a magic number: i < list.Length / 2
Magic Number,PKHeX.Core,ShowdownSet,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\ShowdownSet.cs,ConvertFormFromShowdown,The following statement contains a magic number: switch (spec)              {                  case (int)Core.Species.Basculin when form == "Blue-Striped":                      return "Blue";                  case (int)Core.Species.Greninja when ability == 210:                      return "Ash"; // Battle Bond                  case (int)Core.Species.Vivillon when form == "Pokeball":                      return "Poké Ball";                    // Zygarde                  case (int)Core.Species.Zygarde when form.Length == 0:                      return ability == 211 ? "50%-C" : "50%";                  case (int)Core.Species.Zygarde when form == "Complete":                      return form;                  case (int)Core.Species.Zygarde when ability == 211:                      return "-C"; // Power Construct                    case (int)Core.Species.Rockruff when ability == 020: // Rockruff-1                      return "Dusk";                    // Minior                  case (int)Core.Species.Minior when form.Length != 0 && form != Minior:                      return $"C-{form}";                    // Necrozma                  case (int)Core.Species.Necrozma when form == "Dusk-Mane":                      return "Dusk";                  case (int)Core.Species.Necrozma when form == "Dawn-Wings":                      return "Dawn";                                        // Toxtricity                  case (int)Core.Species.Toxtricity when form == "Low-Key":                      return "Low Key";                    default:                      if (Legal.Totem_USUM.Contains(spec) && form.EndsWith("Totem"))                          return "Large";                      return form;              }
Magic Number,PKHeX.Core,ShowdownSet,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\ShowdownSet.cs,ConvertFormFromShowdown,The following statement contains a magic number: switch (spec)              {                  case (int)Core.Species.Basculin when form == "Blue-Striped":                      return "Blue";                  case (int)Core.Species.Greninja when ability == 210:                      return "Ash"; // Battle Bond                  case (int)Core.Species.Vivillon when form == "Pokeball":                      return "Poké Ball";                    // Zygarde                  case (int)Core.Species.Zygarde when form.Length == 0:                      return ability == 211 ? "50%-C" : "50%";                  case (int)Core.Species.Zygarde when form == "Complete":                      return form;                  case (int)Core.Species.Zygarde when ability == 211:                      return "-C"; // Power Construct                    case (int)Core.Species.Rockruff when ability == 020: // Rockruff-1                      return "Dusk";                    // Minior                  case (int)Core.Species.Minior when form.Length != 0 && form != Minior:                      return $"C-{form}";                    // Necrozma                  case (int)Core.Species.Necrozma when form == "Dusk-Mane":                      return "Dusk";                  case (int)Core.Species.Necrozma when form == "Dawn-Wings":                      return "Dawn";                                        // Toxtricity                  case (int)Core.Species.Toxtricity when form == "Low-Key":                      return "Low Key";                    default:                      if (Legal.Totem_USUM.Contains(spec) && form.EndsWith("Totem"))                          return "Large";                      return form;              }
Magic Number,PKHeX.Core,ShowdownSet,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\ShowdownSet.cs,ConvertFormFromShowdown,The following statement contains a magic number: switch (spec)              {                  case (int)Core.Species.Basculin when form == "Blue-Striped":                      return "Blue";                  case (int)Core.Species.Greninja when ability == 210:                      return "Ash"; // Battle Bond                  case (int)Core.Species.Vivillon when form == "Pokeball":                      return "Poké Ball";                    // Zygarde                  case (int)Core.Species.Zygarde when form.Length == 0:                      return ability == 211 ? "50%-C" : "50%";                  case (int)Core.Species.Zygarde when form == "Complete":                      return form;                  case (int)Core.Species.Zygarde when ability == 211:                      return "-C"; // Power Construct                    case (int)Core.Species.Rockruff when ability == 020: // Rockruff-1                      return "Dusk";                    // Minior                  case (int)Core.Species.Minior when form.Length != 0 && form != Minior:                      return $"C-{form}";                    // Necrozma                  case (int)Core.Species.Necrozma when form == "Dusk-Mane":                      return "Dusk";                  case (int)Core.Species.Necrozma when form == "Dawn-Wings":                      return "Dawn";                                        // Toxtricity                  case (int)Core.Species.Toxtricity when form == "Low-Key":                      return "Low Key";                    default:                      if (Legal.Totem_USUM.Contains(spec) && form.EndsWith("Totem"))                          return "Large";                      return form;              }
Magic Number,PKHeX.Core,ShowdownSet,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\ShowdownSet.cs,ConvertFormFromShowdown,The following statement contains a magic number: switch (spec)              {                  case (int)Core.Species.Basculin when form == "Blue-Striped":                      return "Blue";                  case (int)Core.Species.Greninja when ability == 210:                      return "Ash"; // Battle Bond                  case (int)Core.Species.Vivillon when form == "Pokeball":                      return "Poké Ball";                    // Zygarde                  case (int)Core.Species.Zygarde when form.Length == 0:                      return ability == 211 ? "50%-C" : "50%";                  case (int)Core.Species.Zygarde when form == "Complete":                      return form;                  case (int)Core.Species.Zygarde when ability == 211:                      return "-C"; // Power Construct                    case (int)Core.Species.Rockruff when ability == 020: // Rockruff-1                      return "Dusk";                    // Minior                  case (int)Core.Species.Minior when form.Length != 0 && form != Minior:                      return $"C-{form}";                    // Necrozma                  case (int)Core.Species.Necrozma when form == "Dusk-Mane":                      return "Dusk";                  case (int)Core.Species.Necrozma when form == "Dawn-Wings":                      return "Dawn";                                        // Toxtricity                  case (int)Core.Species.Toxtricity when form == "Low-Key":                      return "Low Key";                    default:                      if (Legal.Totem_USUM.Contains(spec) && form.EndsWith("Totem"))                          return "Large";                      return form;              }
Magic Number,PKHeX.Core,ShowdownSet,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\ShowdownSet.cs,GetShowdownSets,The following statement contains a magic number: var setLines = new List<string>(8);
Magic Number,PKHeX.Core,ShowdownSet,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\ShowdownSet.cs,GetLocalizedPreviewText,The following statement contains a magic number: pk.Format <= 2
Magic Number,PKHeX.Core,WurmpleUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\WurmpleUtil.cs,GetWurmpleEvoVal,The following statement contains a magic number: var evoVal = EC >> 16;
Magic Number,PKHeX.Core,WurmpleUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\WurmpleUtil.cs,GetWurmpleEvoVal,The following statement contains a magic number: return evoVal % 10 / 5;
Magic Number,PKHeX.Core,WurmpleUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\WurmpleUtil.cs,GetWurmpleEvoVal,The following statement contains a magic number: return evoVal % 10 / 5;
Magic Number,PKHeX.Core,WurmpleUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\WurmpleUtil.cs,GetWurmpleEvoGroup,The following statement contains a magic number: (wIndex & 3) != wIndex
Magic Number,PKHeX.Core,FilteredGameDataSource,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\FilteredGameDataSource.cs,GetAbilityList,The following statement contains a magic number: var count = format == 3 && (abils[1] == 0 || abils[1] == abils[0]) ? 1 : abils.Length;
Magic Number,PKHeX.Core,GameDataSource,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameDataSource.cs,CreateGen3,The following statement contains a magic number: var met_list = Util.GetCBList(s.metRSEFRLG_00000' Enumerable.Range(0' 213).ToArray());
Magic Number,PKHeX.Core,GameDataSource,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameDataSource.cs,CreateGen3,The following statement contains a magic number: Util.AddCBWithOffset(met_list' s.metRSEFRLG_00000' 00000' 253' 254' 255);
Magic Number,PKHeX.Core,GameDataSource,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameDataSource.cs,CreateGen3,The following statement contains a magic number: Util.AddCBWithOffset(met_list' s.metRSEFRLG_00000' 00000' 253' 254' 255);
Magic Number,PKHeX.Core,GameDataSource,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameDataSource.cs,CreateGen3,The following statement contains a magic number: Util.AddCBWithOffset(met_list' s.metRSEFRLG_00000' 00000' 253' 254' 255);
Magic Number,PKHeX.Core,GameDataSource,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameDataSource.cs,CreateGen4,The following statement contains a magic number: Util.AddCBWithOffset(met_list' s.metHGSS_02000' 2000' Locations.Daycare4);
Magic Number,PKHeX.Core,GameDataSource,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameDataSource.cs,CreateGen4,The following statement contains a magic number: Util.AddCBWithOffset(met_list' s.metHGSS_02000' 2000' Locations.LinkTrade4);
Magic Number,PKHeX.Core,GameDataSource,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameDataSource.cs,CreateGen4,The following statement contains a magic number: Util.AddCBWithOffset(met_list' s.metHGSS_03000' 3000' Locations.Ranger4);
Magic Number,PKHeX.Core,GameDataSource,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameDataSource.cs,CreateGen4,The following statement contains a magic number: Util.AddCBWithOffset(met_list' s.metHGSS_02000' 2000' Legal.Met_HGSS_2);
Magic Number,PKHeX.Core,GameDataSource,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameDataSource.cs,CreateGen4,The following statement contains a magic number: Util.AddCBWithOffset(met_list' s.metHGSS_03000' 3000' Legal.Met_HGSS_3);
Magic Number,PKHeX.Core,GameDataSource,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameDataSource.cs,CreateGen5,The following statement contains a magic number: Util.AddCBWithOffset(met_list' s.metBW2_60000' 60001' Locations.Daycare5);
Magic Number,PKHeX.Core,GameDataSource,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameDataSource.cs,CreateGen5,The following statement contains a magic number: Util.AddCBWithOffset(met_list' s.metBW2_30000' 30001' Locations.LinkTrade5);
Magic Number,PKHeX.Core,GameDataSource,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameDataSource.cs,CreateGen5,The following statement contains a magic number: Util.AddCBWithOffset(met_list' s.metBW2_30000' 30001' Legal.Met_BW2_3);
Magic Number,PKHeX.Core,GameDataSource,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameDataSource.cs,CreateGen5,The following statement contains a magic number: Util.AddCBWithOffset(met_list' s.metBW2_40000' 40001' Legal.Met_BW2_4);
Magic Number,PKHeX.Core,GameDataSource,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameDataSource.cs,CreateGen5,The following statement contains a magic number: Util.AddCBWithOffset(met_list' s.metBW2_60000' 60001' Legal.Met_BW2_6);
Magic Number,PKHeX.Core,GameDataSource,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameDataSource.cs,CreateGen6,The following statement contains a magic number: Util.AddCBWithOffset(met_list' s.metXY_60000' 60001' Locations.Daycare5);
Magic Number,PKHeX.Core,GameDataSource,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameDataSource.cs,CreateGen6,The following statement contains a magic number: Util.AddCBWithOffset(met_list' s.metXY_30000' 30001' Locations.LinkTrade6);
Magic Number,PKHeX.Core,GameDataSource,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameDataSource.cs,CreateGen6,The following statement contains a magic number: Util.AddCBWithOffset(met_list' s.metXY_30000' 30001' Legal.Met_XY_3);
Magic Number,PKHeX.Core,GameDataSource,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameDataSource.cs,CreateGen6,The following statement contains a magic number: Util.AddCBWithOffset(met_list' s.metXY_40000' 40001' Legal.Met_XY_4);
Magic Number,PKHeX.Core,GameDataSource,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameDataSource.cs,CreateGen6,The following statement contains a magic number: Util.AddCBWithOffset(met_list' s.metXY_60000' 60001' Legal.Met_XY_6);
Magic Number,PKHeX.Core,GameDataSource,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameDataSource.cs,CreateGen7,The following statement contains a magic number: Util.AddCBWithOffset(met_list' s.metSM_60000' 60001' Locations.Daycare5);
Magic Number,PKHeX.Core,GameDataSource,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameDataSource.cs,CreateGen7,The following statement contains a magic number: Util.AddCBWithOffset(met_list' s.metSM_30000' 30001' Locations.LinkTrade6);
Magic Number,PKHeX.Core,GameDataSource,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameDataSource.cs,CreateGen7,The following statement contains a magic number: Util.AddCBWithOffset(met_list' s.metSM_30000' 30001' Legal.Met_SM_3);
Magic Number,PKHeX.Core,GameDataSource,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameDataSource.cs,CreateGen7,The following statement contains a magic number: Util.AddCBWithOffset(met_list' s.metSM_40000' 40001' Legal.Met_SM_4);
Magic Number,PKHeX.Core,GameDataSource,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameDataSource.cs,CreateGen7,The following statement contains a magic number: Util.AddCBWithOffset(met_list' s.metSM_60000' 60001' Legal.Met_SM_6);
Magic Number,PKHeX.Core,GameDataSource,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameDataSource.cs,CreateGen7GG,The following statement contains a magic number: Util.AddCBWithOffset(met_list' s.metGG_60000' 60001' 60002);
Magic Number,PKHeX.Core,GameDataSource,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameDataSource.cs,CreateGen7GG,The following statement contains a magic number: Util.AddCBWithOffset(met_list' s.metGG_60000' 60001' 60002);
Magic Number,PKHeX.Core,GameDataSource,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameDataSource.cs,CreateGen7GG,The following statement contains a magic number: Util.AddCBWithOffset(met_list' s.metGG_30000' 30001' Locations.LinkTrade6);
Magic Number,PKHeX.Core,GameDataSource,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameDataSource.cs,CreateGen7GG,The following statement contains a magic number: Util.AddCBWithOffset(met_list' s.metGG_30000' 30001' Legal.Met_GG_3);
Magic Number,PKHeX.Core,GameDataSource,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameDataSource.cs,CreateGen7GG,The following statement contains a magic number: Util.AddCBWithOffset(met_list' s.metGG_40000' 40001' Legal.Met_GG_4);
Magic Number,PKHeX.Core,GameDataSource,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameDataSource.cs,CreateGen7GG,The following statement contains a magic number: Util.AddCBWithOffset(met_list' s.metGG_60000' 60001' Legal.Met_GG_6);
Magic Number,PKHeX.Core,GameDataSource,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameDataSource.cs,CreateGen8,The following statement contains a magic number: Util.AddCBWithOffset(met_list' s.metSWSH_60000' 60001' 60002);
Magic Number,PKHeX.Core,GameDataSource,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameDataSource.cs,CreateGen8,The following statement contains a magic number: Util.AddCBWithOffset(met_list' s.metSWSH_60000' 60001' 60002);
Magic Number,PKHeX.Core,GameDataSource,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameDataSource.cs,CreateGen8,The following statement contains a magic number: Util.AddCBWithOffset(met_list' s.metSWSH_30000' 30001' Locations.LinkTrade6);
Magic Number,PKHeX.Core,GameDataSource,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameDataSource.cs,CreateGen8,The following statement contains a magic number: Util.AddCBWithOffset(met_list' s.metSWSH_30000' 30001' Legal.Met_SWSH_3);
Magic Number,PKHeX.Core,GameDataSource,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameDataSource.cs,CreateGen8,The following statement contains a magic number: Util.AddCBWithOffset(met_list' s.metSWSH_40000' 40001' Legal.Met_SWSH_4);
Magic Number,PKHeX.Core,GameDataSource,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameDataSource.cs,CreateGen8,The following statement contains a magic number: Util.AddCBWithOffset(met_list' s.metSWSH_60000' 60001' Legal.Met_SWSH_6);
Magic Number,PKHeX.Core,GameDataSource,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameDataSource.cs,GetLocationList,The following statement contains a magic number: currentGen == 2
Magic Number,PKHeX.Core,GameDataSource,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameDataSource.cs,GetLocationList,The following statement contains a magic number: egg && version < GameVersion.W && currentGen >= 5
Magic Number,PKHeX.Core,GameDataSource,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameDataSource.cs,GetLocationList,The following statement contains a magic number: switch (version)              {                  case GameVersion.CXD:                      if (currentGen == 3)                          return MetGen3CXD;                      break;                    case GameVersion.R:                  case GameVersion.S:                      if (currentGen == 3)                          return MetGen3.OrderByDescending(loc => loc.Value <= 87).ToList(); // Ferry                      break;                  case GameVersion.E:                      if (currentGen == 3)                          return MetGen3.OrderByDescending(loc => loc.Value <= 87 || (loc.Value >= 196 && loc.Value <= 212)).ToList(); // Trainer Hill                      break;                  case GameVersion.FR:                  case GameVersion.LG:                      if (currentGen == 3)                          return MetGen3.OrderByDescending(loc => loc.Value > 87 && loc.Value < 197).ToList(); // Celadon Dept.                      break;                    case GameVersion.D:                  case GameVersion.P:                      if (currentGen == 4 || (currentGen >= 5 && egg))                          return MetGen4.Take(4).Concat(MetGen4.Skip(4).OrderByDescending(loc => loc.Value <= 111)).ToList(); // Battle Park                      break;                    case GameVersion.Pt:                      if (currentGen == 4 || (currentGen >= 5 && egg))                          return MetGen4.Take(4).Concat(MetGen4.Skip(4).OrderByDescending(loc => loc.Value <= 125)).ToList(); // Rock Peak Ruins                      break;                    case GameVersion.HG:                  case GameVersion.SS:                      if (currentGen == 4 || (currentGen >= 5 && egg))                          return MetGen4.Take(4).Concat(MetGen4.Skip(4).OrderByDescending(loc => loc.Value > 125 && loc.Value < 234)).ToList(); // Celadon Dept.                      break;                    case GameVersion.B:                  case GameVersion.W:                      return MetGen5;                    case GameVersion.B2:                  case GameVersion.W2:                      return MetGen5.Take(3).Concat(MetGen5.Skip(3).OrderByDescending(loc => loc.Value <= 116)).ToList(); // Abyssal Ruins                    case GameVersion.X:                  case GameVersion.Y:                      return MetGen6.Take(3).Concat(MetGen6.Skip(3).OrderByDescending(loc => loc.Value <= 168)).ToList(); // Unknown Dungeon                    case GameVersion.OR:                  case GameVersion.AS:                      return MetGen6.Take(3).Concat(MetGen6.Skip(3).OrderByDescending(loc => loc.Value > 168 && loc.Value <= 354)).ToList(); // Secret Base                    case GameVersion.SN:                  case GameVersion.MN:                      return MetGen7.Take(3).Concat(MetGen7.Skip(3).OrderByDescending(loc => loc.Value < 200)).ToList(); // Outer Cape                    case GameVersion.US:                  case GameVersion.UM:                    case GameVersion.RD:                  case GameVersion.BU:                  case GameVersion.GN:                  case GameVersion.YW:                    case GameVersion.GD:                  case GameVersion.SV:                  case GameVersion.C:                      return MetGen7.Take(3).Concat(MetGen7.Skip(3).OrderByDescending(loc => loc.Value < 234)).ToList(); // Dividing Peak Tunnel                    case GameVersion.GP:                  case GameVersion.GE:                  case GameVersion.GO:                      return MetGen7GG.Take(3).Concat(MetGen7GG.Skip(3).OrderByDescending(loc => loc.Value <= 54)).ToList(); // Pokémon League                    case GameVersion.SW:                  case GameVersion.SH:                      return MetGen8.Take(3).Concat(MetGen8.Skip(3).OrderByDescending(loc => loc.Value < 400)).ToList(); // todo              }
Magic Number,PKHeX.Core,GameDataSource,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameDataSource.cs,GetLocationList,The following statement contains a magic number: switch (version)              {                  case GameVersion.CXD:                      if (currentGen == 3)                          return MetGen3CXD;                      break;                    case GameVersion.R:                  case GameVersion.S:                      if (currentGen == 3)                          return MetGen3.OrderByDescending(loc => loc.Value <= 87).ToList(); // Ferry                      break;                  case GameVersion.E:                      if (currentGen == 3)                          return MetGen3.OrderByDescending(loc => loc.Value <= 87 || (loc.Value >= 196 && loc.Value <= 212)).ToList(); // Trainer Hill                      break;                  case GameVersion.FR:                  case GameVersion.LG:                      if (currentGen == 3)                          return MetGen3.OrderByDescending(loc => loc.Value > 87 && loc.Value < 197).ToList(); // Celadon Dept.                      break;                    case GameVersion.D:                  case GameVersion.P:                      if (currentGen == 4 || (currentGen >= 5 && egg))                          return MetGen4.Take(4).Concat(MetGen4.Skip(4).OrderByDescending(loc => loc.Value <= 111)).ToList(); // Battle Park                      break;                    case GameVersion.Pt:                      if (currentGen == 4 || (currentGen >= 5 && egg))                          return MetGen4.Take(4).Concat(MetGen4.Skip(4).OrderByDescending(loc => loc.Value <= 125)).ToList(); // Rock Peak Ruins                      break;                    case GameVersion.HG:                  case GameVersion.SS:                      if (currentGen == 4 || (currentGen >= 5 && egg))                          return MetGen4.Take(4).Concat(MetGen4.Skip(4).OrderByDescending(loc => loc.Value > 125 && loc.Value < 234)).ToList(); // Celadon Dept.                      break;                    case GameVersion.B:                  case GameVersion.W:                      return MetGen5;                    case GameVersion.B2:                  case GameVersion.W2:                      return MetGen5.Take(3).Concat(MetGen5.Skip(3).OrderByDescending(loc => loc.Value <= 116)).ToList(); // Abyssal Ruins                    case GameVersion.X:                  case GameVersion.Y:                      return MetGen6.Take(3).Concat(MetGen6.Skip(3).OrderByDescending(loc => loc.Value <= 168)).ToList(); // Unknown Dungeon                    case GameVersion.OR:                  case GameVersion.AS:                      return MetGen6.Take(3).Concat(MetGen6.Skip(3).OrderByDescending(loc => loc.Value > 168 && loc.Value <= 354)).ToList(); // Secret Base                    case GameVersion.SN:                  case GameVersion.MN:                      return MetGen7.Take(3).Concat(MetGen7.Skip(3).OrderByDescending(loc => loc.Value < 200)).ToList(); // Outer Cape                    case GameVersion.US:                  case GameVersion.UM:                    case GameVersion.RD:                  case GameVersion.BU:                  case GameVersion.GN:                  case GameVersion.YW:                    case GameVersion.GD:                  case GameVersion.SV:                  case GameVersion.C:                      return MetGen7.Take(3).Concat(MetGen7.Skip(3).OrderByDescending(loc => loc.Value < 234)).ToList(); // Dividing Peak Tunnel                    case GameVersion.GP:                  case GameVersion.GE:                  case GameVersion.GO:                      return MetGen7GG.Take(3).Concat(MetGen7GG.Skip(3).OrderByDescending(loc => loc.Value <= 54)).ToList(); // Pokémon League                    case GameVersion.SW:                  case GameVersion.SH:                      return MetGen8.Take(3).Concat(MetGen8.Skip(3).OrderByDescending(loc => loc.Value < 400)).ToList(); // todo              }
Magic Number,PKHeX.Core,GameDataSource,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameDataSource.cs,GetLocationList,The following statement contains a magic number: switch (version)              {                  case GameVersion.CXD:                      if (currentGen == 3)                          return MetGen3CXD;                      break;                    case GameVersion.R:                  case GameVersion.S:                      if (currentGen == 3)                          return MetGen3.OrderByDescending(loc => loc.Value <= 87).ToList(); // Ferry                      break;                  case GameVersion.E:                      if (currentGen == 3)                          return MetGen3.OrderByDescending(loc => loc.Value <= 87 || (loc.Value >= 196 && loc.Value <= 212)).ToList(); // Trainer Hill                      break;                  case GameVersion.FR:                  case GameVersion.LG:                      if (currentGen == 3)                          return MetGen3.OrderByDescending(loc => loc.Value > 87 && loc.Value < 197).ToList(); // Celadon Dept.                      break;                    case GameVersion.D:                  case GameVersion.P:                      if (currentGen == 4 || (currentGen >= 5 && egg))                          return MetGen4.Take(4).Concat(MetGen4.Skip(4).OrderByDescending(loc => loc.Value <= 111)).ToList(); // Battle Park                      break;                    case GameVersion.Pt:                      if (currentGen == 4 || (currentGen >= 5 && egg))                          return MetGen4.Take(4).Concat(MetGen4.Skip(4).OrderByDescending(loc => loc.Value <= 125)).ToList(); // Rock Peak Ruins                      break;                    case GameVersion.HG:                  case GameVersion.SS:                      if (currentGen == 4 || (currentGen >= 5 && egg))                          return MetGen4.Take(4).Concat(MetGen4.Skip(4).OrderByDescending(loc => loc.Value > 125 && loc.Value < 234)).ToList(); // Celadon Dept.                      break;                    case GameVersion.B:                  case GameVersion.W:                      return MetGen5;                    case GameVersion.B2:                  case GameVersion.W2:                      return MetGen5.Take(3).Concat(MetGen5.Skip(3).OrderByDescending(loc => loc.Value <= 116)).ToList(); // Abyssal Ruins                    case GameVersion.X:                  case GameVersion.Y:                      return MetGen6.Take(3).Concat(MetGen6.Skip(3).OrderByDescending(loc => loc.Value <= 168)).ToList(); // Unknown Dungeon                    case GameVersion.OR:                  case GameVersion.AS:                      return MetGen6.Take(3).Concat(MetGen6.Skip(3).OrderByDescending(loc => loc.Value > 168 && loc.Value <= 354)).ToList(); // Secret Base                    case GameVersion.SN:                  case GameVersion.MN:                      return MetGen7.Take(3).Concat(MetGen7.Skip(3).OrderByDescending(loc => loc.Value < 200)).ToList(); // Outer Cape                    case GameVersion.US:                  case GameVersion.UM:                    case GameVersion.RD:                  case GameVersion.BU:                  case GameVersion.GN:                  case GameVersion.YW:                    case GameVersion.GD:                  case GameVersion.SV:                  case GameVersion.C:                      return MetGen7.Take(3).Concat(MetGen7.Skip(3).OrderByDescending(loc => loc.Value < 234)).ToList(); // Dividing Peak Tunnel                    case GameVersion.GP:                  case GameVersion.GE:                  case GameVersion.GO:                      return MetGen7GG.Take(3).Concat(MetGen7GG.Skip(3).OrderByDescending(loc => loc.Value <= 54)).ToList(); // Pokémon League                    case GameVersion.SW:                  case GameVersion.SH:                      return MetGen8.Take(3).Concat(MetGen8.Skip(3).OrderByDescending(loc => loc.Value < 400)).ToList(); // todo              }
Magic Number,PKHeX.Core,GameDataSource,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameDataSource.cs,GetLocationList,The following statement contains a magic number: switch (version)              {                  case GameVersion.CXD:                      if (currentGen == 3)                          return MetGen3CXD;                      break;                    case GameVersion.R:                  case GameVersion.S:                      if (currentGen == 3)                          return MetGen3.OrderByDescending(loc => loc.Value <= 87).ToList(); // Ferry                      break;                  case GameVersion.E:                      if (currentGen == 3)                          return MetGen3.OrderByDescending(loc => loc.Value <= 87 || (loc.Value >= 196 && loc.Value <= 212)).ToList(); // Trainer Hill                      break;                  case GameVersion.FR:                  case GameVersion.LG:                      if (currentGen == 3)                          return MetGen3.OrderByDescending(loc => loc.Value > 87 && loc.Value < 197).ToList(); // Celadon Dept.                      break;                    case GameVersion.D:                  case GameVersion.P:                      if (currentGen == 4 || (currentGen >= 5 && egg))                          return MetGen4.Take(4).Concat(MetGen4.Skip(4).OrderByDescending(loc => loc.Value <= 111)).ToList(); // Battle Park                      break;                    case GameVersion.Pt:                      if (currentGen == 4 || (currentGen >= 5 && egg))                          return MetGen4.Take(4).Concat(MetGen4.Skip(4).OrderByDescending(loc => loc.Value <= 125)).ToList(); // Rock Peak Ruins                      break;                    case GameVersion.HG:                  case GameVersion.SS:                      if (currentGen == 4 || (currentGen >= 5 && egg))                          return MetGen4.Take(4).Concat(MetGen4.Skip(4).OrderByDescending(loc => loc.Value > 125 && loc.Value < 234)).ToList(); // Celadon Dept.                      break;                    case GameVersion.B:                  case GameVersion.W:                      return MetGen5;                    case GameVersion.B2:                  case GameVersion.W2:                      return MetGen5.Take(3).Concat(MetGen5.Skip(3).OrderByDescending(loc => loc.Value <= 116)).ToList(); // Abyssal Ruins                    case GameVersion.X:                  case GameVersion.Y:                      return MetGen6.Take(3).Concat(MetGen6.Skip(3).OrderByDescending(loc => loc.Value <= 168)).ToList(); // Unknown Dungeon                    case GameVersion.OR:                  case GameVersion.AS:                      return MetGen6.Take(3).Concat(MetGen6.Skip(3).OrderByDescending(loc => loc.Value > 168 && loc.Value <= 354)).ToList(); // Secret Base                    case GameVersion.SN:                  case GameVersion.MN:                      return MetGen7.Take(3).Concat(MetGen7.Skip(3).OrderByDescending(loc => loc.Value < 200)).ToList(); // Outer Cape                    case GameVersion.US:                  case GameVersion.UM:                    case GameVersion.RD:                  case GameVersion.BU:                  case GameVersion.GN:                  case GameVersion.YW:                    case GameVersion.GD:                  case GameVersion.SV:                  case GameVersion.C:                      return MetGen7.Take(3).Concat(MetGen7.Skip(3).OrderByDescending(loc => loc.Value < 234)).ToList(); // Dividing Peak Tunnel                    case GameVersion.GP:                  case GameVersion.GE:                  case GameVersion.GO:                      return MetGen7GG.Take(3).Concat(MetGen7GG.Skip(3).OrderByDescending(loc => loc.Value <= 54)).ToList(); // Pokémon League                    case GameVersion.SW:                  case GameVersion.SH:                      return MetGen8.Take(3).Concat(MetGen8.Skip(3).OrderByDescending(loc => loc.Value < 400)).ToList(); // todo              }
Magic Number,PKHeX.Core,GameDataSource,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameDataSource.cs,GetLocationList,The following statement contains a magic number: switch (version)              {                  case GameVersion.CXD:                      if (currentGen == 3)                          return MetGen3CXD;                      break;                    case GameVersion.R:                  case GameVersion.S:                      if (currentGen == 3)                          return MetGen3.OrderByDescending(loc => loc.Value <= 87).ToList(); // Ferry                      break;                  case GameVersion.E:                      if (currentGen == 3)                          return MetGen3.OrderByDescending(loc => loc.Value <= 87 || (loc.Value >= 196 && loc.Value <= 212)).ToList(); // Trainer Hill                      break;                  case GameVersion.FR:                  case GameVersion.LG:                      if (currentGen == 3)                          return MetGen3.OrderByDescending(loc => loc.Value > 87 && loc.Value < 197).ToList(); // Celadon Dept.                      break;                    case GameVersion.D:                  case GameVersion.P:                      if (currentGen == 4 || (currentGen >= 5 && egg))                          return MetGen4.Take(4).Concat(MetGen4.Skip(4).OrderByDescending(loc => loc.Value <= 111)).ToList(); // Battle Park                      break;                    case GameVersion.Pt:                      if (currentGen == 4 || (currentGen >= 5 && egg))                          return MetGen4.Take(4).Concat(MetGen4.Skip(4).OrderByDescending(loc => loc.Value <= 125)).ToList(); // Rock Peak Ruins                      break;                    case GameVersion.HG:                  case GameVersion.SS:                      if (currentGen == 4 || (currentGen >= 5 && egg))                          return MetGen4.Take(4).Concat(MetGen4.Skip(4).OrderByDescending(loc => loc.Value > 125 && loc.Value < 234)).ToList(); // Celadon Dept.                      break;                    case GameVersion.B:                  case GameVersion.W:                      return MetGen5;                    case GameVersion.B2:                  case GameVersion.W2:                      return MetGen5.Take(3).Concat(MetGen5.Skip(3).OrderByDescending(loc => loc.Value <= 116)).ToList(); // Abyssal Ruins                    case GameVersion.X:                  case GameVersion.Y:                      return MetGen6.Take(3).Concat(MetGen6.Skip(3).OrderByDescending(loc => loc.Value <= 168)).ToList(); // Unknown Dungeon                    case GameVersion.OR:                  case GameVersion.AS:                      return MetGen6.Take(3).Concat(MetGen6.Skip(3).OrderByDescending(loc => loc.Value > 168 && loc.Value <= 354)).ToList(); // Secret Base                    case GameVersion.SN:                  case GameVersion.MN:                      return MetGen7.Take(3).Concat(MetGen7.Skip(3).OrderByDescending(loc => loc.Value < 200)).ToList(); // Outer Cape                    case GameVersion.US:                  case GameVersion.UM:                    case GameVersion.RD:                  case GameVersion.BU:                  case GameVersion.GN:                  case GameVersion.YW:                    case GameVersion.GD:                  case GameVersion.SV:                  case GameVersion.C:                      return MetGen7.Take(3).Concat(MetGen7.Skip(3).OrderByDescending(loc => loc.Value < 234)).ToList(); // Dividing Peak Tunnel                    case GameVersion.GP:                  case GameVersion.GE:                  case GameVersion.GO:                      return MetGen7GG.Take(3).Concat(MetGen7GG.Skip(3).OrderByDescending(loc => loc.Value <= 54)).ToList(); // Pokémon League                    case GameVersion.SW:                  case GameVersion.SH:                      return MetGen8.Take(3).Concat(MetGen8.Skip(3).OrderByDescending(loc => loc.Value < 400)).ToList(); // todo              }
Magic Number,PKHeX.Core,GameDataSource,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameDataSource.cs,GetLocationList,The following statement contains a magic number: switch (version)              {                  case GameVersion.CXD:                      if (currentGen == 3)                          return MetGen3CXD;                      break;                    case GameVersion.R:                  case GameVersion.S:                      if (currentGen == 3)                          return MetGen3.OrderByDescending(loc => loc.Value <= 87).ToList(); // Ferry                      break;                  case GameVersion.E:                      if (currentGen == 3)                          return MetGen3.OrderByDescending(loc => loc.Value <= 87 || (loc.Value >= 196 && loc.Value <= 212)).ToList(); // Trainer Hill                      break;                  case GameVersion.FR:                  case GameVersion.LG:                      if (currentGen == 3)                          return MetGen3.OrderByDescending(loc => loc.Value > 87 && loc.Value < 197).ToList(); // Celadon Dept.                      break;                    case GameVersion.D:                  case GameVersion.P:                      if (currentGen == 4 || (currentGen >= 5 && egg))                          return MetGen4.Take(4).Concat(MetGen4.Skip(4).OrderByDescending(loc => loc.Value <= 111)).ToList(); // Battle Park                      break;                    case GameVersion.Pt:                      if (currentGen == 4 || (currentGen >= 5 && egg))                          return MetGen4.Take(4).Concat(MetGen4.Skip(4).OrderByDescending(loc => loc.Value <= 125)).ToList(); // Rock Peak Ruins                      break;                    case GameVersion.HG:                  case GameVersion.SS:                      if (currentGen == 4 || (currentGen >= 5 && egg))                          return MetGen4.Take(4).Concat(MetGen4.Skip(4).OrderByDescending(loc => loc.Value > 125 && loc.Value < 234)).ToList(); // Celadon Dept.                      break;                    case GameVersion.B:                  case GameVersion.W:                      return MetGen5;                    case GameVersion.B2:                  case GameVersion.W2:                      return MetGen5.Take(3).Concat(MetGen5.Skip(3).OrderByDescending(loc => loc.Value <= 116)).ToList(); // Abyssal Ruins                    case GameVersion.X:                  case GameVersion.Y:                      return MetGen6.Take(3).Concat(MetGen6.Skip(3).OrderByDescending(loc => loc.Value <= 168)).ToList(); // Unknown Dungeon                    case GameVersion.OR:                  case GameVersion.AS:                      return MetGen6.Take(3).Concat(MetGen6.Skip(3).OrderByDescending(loc => loc.Value > 168 && loc.Value <= 354)).ToList(); // Secret Base                    case GameVersion.SN:                  case GameVersion.MN:                      return MetGen7.Take(3).Concat(MetGen7.Skip(3).OrderByDescending(loc => loc.Value < 200)).ToList(); // Outer Cape                    case GameVersion.US:                  case GameVersion.UM:                    case GameVersion.RD:                  case GameVersion.BU:                  case GameVersion.GN:                  case GameVersion.YW:                    case GameVersion.GD:                  case GameVersion.SV:                  case GameVersion.C:                      return MetGen7.Take(3).Concat(MetGen7.Skip(3).OrderByDescending(loc => loc.Value < 234)).ToList(); // Dividing Peak Tunnel                    case GameVersion.GP:                  case GameVersion.GE:                  case GameVersion.GO:                      return MetGen7GG.Take(3).Concat(MetGen7GG.Skip(3).OrderByDescending(loc => loc.Value <= 54)).ToList(); // Pokémon League                    case GameVersion.SW:                  case GameVersion.SH:                      return MetGen8.Take(3).Concat(MetGen8.Skip(3).OrderByDescending(loc => loc.Value < 400)).ToList(); // todo              }
Magic Number,PKHeX.Core,GameDataSource,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameDataSource.cs,GetLocationList,The following statement contains a magic number: switch (version)              {                  case GameVersion.CXD:                      if (currentGen == 3)                          return MetGen3CXD;                      break;                    case GameVersion.R:                  case GameVersion.S:                      if (currentGen == 3)                          return MetGen3.OrderByDescending(loc => loc.Value <= 87).ToList(); // Ferry                      break;                  case GameVersion.E:                      if (currentGen == 3)                          return MetGen3.OrderByDescending(loc => loc.Value <= 87 || (loc.Value >= 196 && loc.Value <= 212)).ToList(); // Trainer Hill                      break;                  case GameVersion.FR:                  case GameVersion.LG:                      if (currentGen == 3)                          return MetGen3.OrderByDescending(loc => loc.Value > 87 && loc.Value < 197).ToList(); // Celadon Dept.                      break;                    case GameVersion.D:                  case GameVersion.P:                      if (currentGen == 4 || (currentGen >= 5 && egg))                          return MetGen4.Take(4).Concat(MetGen4.Skip(4).OrderByDescending(loc => loc.Value <= 111)).ToList(); // Battle Park                      break;                    case GameVersion.Pt:                      if (currentGen == 4 || (currentGen >= 5 && egg))                          return MetGen4.Take(4).Concat(MetGen4.Skip(4).OrderByDescending(loc => loc.Value <= 125)).ToList(); // Rock Peak Ruins                      break;                    case GameVersion.HG:                  case GameVersion.SS:                      if (currentGen == 4 || (currentGen >= 5 && egg))                          return MetGen4.Take(4).Concat(MetGen4.Skip(4).OrderByDescending(loc => loc.Value > 125 && loc.Value < 234)).ToList(); // Celadon Dept.                      break;                    case GameVersion.B:                  case GameVersion.W:                      return MetGen5;                    case GameVersion.B2:                  case GameVersion.W2:                      return MetGen5.Take(3).Concat(MetGen5.Skip(3).OrderByDescending(loc => loc.Value <= 116)).ToList(); // Abyssal Ruins                    case GameVersion.X:                  case GameVersion.Y:                      return MetGen6.Take(3).Concat(MetGen6.Skip(3).OrderByDescending(loc => loc.Value <= 168)).ToList(); // Unknown Dungeon                    case GameVersion.OR:                  case GameVersion.AS:                      return MetGen6.Take(3).Concat(MetGen6.Skip(3).OrderByDescending(loc => loc.Value > 168 && loc.Value <= 354)).ToList(); // Secret Base                    case GameVersion.SN:                  case GameVersion.MN:                      return MetGen7.Take(3).Concat(MetGen7.Skip(3).OrderByDescending(loc => loc.Value < 200)).ToList(); // Outer Cape                    case GameVersion.US:                  case GameVersion.UM:                    case GameVersion.RD:                  case GameVersion.BU:                  case GameVersion.GN:                  case GameVersion.YW:                    case GameVersion.GD:                  case GameVersion.SV:                  case GameVersion.C:                      return MetGen7.Take(3).Concat(MetGen7.Skip(3).OrderByDescending(loc => loc.Value < 234)).ToList(); // Dividing Peak Tunnel                    case GameVersion.GP:                  case GameVersion.GE:                  case GameVersion.GO:                      return MetGen7GG.Take(3).Concat(MetGen7GG.Skip(3).OrderByDescending(loc => loc.Value <= 54)).ToList(); // Pokémon League                    case GameVersion.SW:                  case GameVersion.SH:                      return MetGen8.Take(3).Concat(MetGen8.Skip(3).OrderByDescending(loc => loc.Value < 400)).ToList(); // todo              }
Magic Number,PKHeX.Core,GameDataSource,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameDataSource.cs,GetLocationList,The following statement contains a magic number: switch (version)              {                  case GameVersion.CXD:                      if (currentGen == 3)                          return MetGen3CXD;                      break;                    case GameVersion.R:                  case GameVersion.S:                      if (currentGen == 3)                          return MetGen3.OrderByDescending(loc => loc.Value <= 87).ToList(); // Ferry                      break;                  case GameVersion.E:                      if (currentGen == 3)                          return MetGen3.OrderByDescending(loc => loc.Value <= 87 || (loc.Value >= 196 && loc.Value <= 212)).ToList(); // Trainer Hill                      break;                  case GameVersion.FR:                  case GameVersion.LG:                      if (currentGen == 3)                          return MetGen3.OrderByDescending(loc => loc.Value > 87 && loc.Value < 197).ToList(); // Celadon Dept.                      break;                    case GameVersion.D:                  case GameVersion.P:                      if (currentGen == 4 || (currentGen >= 5 && egg))                          return MetGen4.Take(4).Concat(MetGen4.Skip(4).OrderByDescending(loc => loc.Value <= 111)).ToList(); // Battle Park                      break;                    case GameVersion.Pt:                      if (currentGen == 4 || (currentGen >= 5 && egg))                          return MetGen4.Take(4).Concat(MetGen4.Skip(4).OrderByDescending(loc => loc.Value <= 125)).ToList(); // Rock Peak Ruins                      break;                    case GameVersion.HG:                  case GameVersion.SS:                      if (currentGen == 4 || (currentGen >= 5 && egg))                          return MetGen4.Take(4).Concat(MetGen4.Skip(4).OrderByDescending(loc => loc.Value > 125 && loc.Value < 234)).ToList(); // Celadon Dept.                      break;                    case GameVersion.B:                  case GameVersion.W:                      return MetGen5;                    case GameVersion.B2:                  case GameVersion.W2:                      return MetGen5.Take(3).Concat(MetGen5.Skip(3).OrderByDescending(loc => loc.Value <= 116)).ToList(); // Abyssal Ruins                    case GameVersion.X:                  case GameVersion.Y:                      return MetGen6.Take(3).Concat(MetGen6.Skip(3).OrderByDescending(loc => loc.Value <= 168)).ToList(); // Unknown Dungeon                    case GameVersion.OR:                  case GameVersion.AS:                      return MetGen6.Take(3).Concat(MetGen6.Skip(3).OrderByDescending(loc => loc.Value > 168 && loc.Value <= 354)).ToList(); // Secret Base                    case GameVersion.SN:                  case GameVersion.MN:                      return MetGen7.Take(3).Concat(MetGen7.Skip(3).OrderByDescending(loc => loc.Value < 200)).ToList(); // Outer Cape                    case GameVersion.US:                  case GameVersion.UM:                    case GameVersion.RD:                  case GameVersion.BU:                  case GameVersion.GN:                  case GameVersion.YW:                    case GameVersion.GD:                  case GameVersion.SV:                  case GameVersion.C:                      return MetGen7.Take(3).Concat(MetGen7.Skip(3).OrderByDescending(loc => loc.Value < 234)).ToList(); // Dividing Peak Tunnel                    case GameVersion.GP:                  case GameVersion.GE:                  case GameVersion.GO:                      return MetGen7GG.Take(3).Concat(MetGen7GG.Skip(3).OrderByDescending(loc => loc.Value <= 54)).ToList(); // Pokémon League                    case GameVersion.SW:                  case GameVersion.SH:                      return MetGen8.Take(3).Concat(MetGen8.Skip(3).OrderByDescending(loc => loc.Value < 400)).ToList(); // todo              }
Magic Number,PKHeX.Core,GameDataSource,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameDataSource.cs,GetLocationList,The following statement contains a magic number: switch (version)              {                  case GameVersion.CXD:                      if (currentGen == 3)                          return MetGen3CXD;                      break;                    case GameVersion.R:                  case GameVersion.S:                      if (currentGen == 3)                          return MetGen3.OrderByDescending(loc => loc.Value <= 87).ToList(); // Ferry                      break;                  case GameVersion.E:                      if (currentGen == 3)                          return MetGen3.OrderByDescending(loc => loc.Value <= 87 || (loc.Value >= 196 && loc.Value <= 212)).ToList(); // Trainer Hill                      break;                  case GameVersion.FR:                  case GameVersion.LG:                      if (currentGen == 3)                          return MetGen3.OrderByDescending(loc => loc.Value > 87 && loc.Value < 197).ToList(); // Celadon Dept.                      break;                    case GameVersion.D:                  case GameVersion.P:                      if (currentGen == 4 || (currentGen >= 5 && egg))                          return MetGen4.Take(4).Concat(MetGen4.Skip(4).OrderByDescending(loc => loc.Value <= 111)).ToList(); // Battle Park                      break;                    case GameVersion.Pt:                      if (currentGen == 4 || (currentGen >= 5 && egg))                          return MetGen4.Take(4).Concat(MetGen4.Skip(4).OrderByDescending(loc => loc.Value <= 125)).ToList(); // Rock Peak Ruins                      break;                    case GameVersion.HG:                  case GameVersion.SS:                      if (currentGen == 4 || (currentGen >= 5 && egg))                          return MetGen4.Take(4).Concat(MetGen4.Skip(4).OrderByDescending(loc => loc.Value > 125 && loc.Value < 234)).ToList(); // Celadon Dept.                      break;                    case GameVersion.B:                  case GameVersion.W:                      return MetGen5;                    case GameVersion.B2:                  case GameVersion.W2:                      return MetGen5.Take(3).Concat(MetGen5.Skip(3).OrderByDescending(loc => loc.Value <= 116)).ToList(); // Abyssal Ruins                    case GameVersion.X:                  case GameVersion.Y:                      return MetGen6.Take(3).Concat(MetGen6.Skip(3).OrderByDescending(loc => loc.Value <= 168)).ToList(); // Unknown Dungeon                    case GameVersion.OR:                  case GameVersion.AS:                      return MetGen6.Take(3).Concat(MetGen6.Skip(3).OrderByDescending(loc => loc.Value > 168 && loc.Value <= 354)).ToList(); // Secret Base                    case GameVersion.SN:                  case GameVersion.MN:                      return MetGen7.Take(3).Concat(MetGen7.Skip(3).OrderByDescending(loc => loc.Value < 200)).ToList(); // Outer Cape                    case GameVersion.US:                  case GameVersion.UM:                    case GameVersion.RD:                  case GameVersion.BU:                  case GameVersion.GN:                  case GameVersion.YW:                    case GameVersion.GD:                  case GameVersion.SV:                  case GameVersion.C:                      return MetGen7.Take(3).Concat(MetGen7.Skip(3).OrderByDescending(loc => loc.Value < 234)).ToList(); // Dividing Peak Tunnel                    case GameVersion.GP:                  case GameVersion.GE:                  case GameVersion.GO:                      return MetGen7GG.Take(3).Concat(MetGen7GG.Skip(3).OrderByDescending(loc => loc.Value <= 54)).ToList(); // Pokémon League                    case GameVersion.SW:                  case GameVersion.SH:                      return MetGen8.Take(3).Concat(MetGen8.Skip(3).OrderByDescending(loc => loc.Value < 400)).ToList(); // todo              }
Magic Number,PKHeX.Core,GameDataSource,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameDataSource.cs,GetLocationList,The following statement contains a magic number: switch (version)              {                  case GameVersion.CXD:                      if (currentGen == 3)                          return MetGen3CXD;                      break;                    case GameVersion.R:                  case GameVersion.S:                      if (currentGen == 3)                          return MetGen3.OrderByDescending(loc => loc.Value <= 87).ToList(); // Ferry                      break;                  case GameVersion.E:                      if (currentGen == 3)                          return MetGen3.OrderByDescending(loc => loc.Value <= 87 || (loc.Value >= 196 && loc.Value <= 212)).ToList(); // Trainer Hill                      break;                  case GameVersion.FR:                  case GameVersion.LG:                      if (currentGen == 3)                          return MetGen3.OrderByDescending(loc => loc.Value > 87 && loc.Value < 197).ToList(); // Celadon Dept.                      break;                    case GameVersion.D:                  case GameVersion.P:                      if (currentGen == 4 || (currentGen >= 5 && egg))                          return MetGen4.Take(4).Concat(MetGen4.Skip(4).OrderByDescending(loc => loc.Value <= 111)).ToList(); // Battle Park                      break;                    case GameVersion.Pt:                      if (currentGen == 4 || (currentGen >= 5 && egg))                          return MetGen4.Take(4).Concat(MetGen4.Skip(4).OrderByDescending(loc => loc.Value <= 125)).ToList(); // Rock Peak Ruins                      break;                    case GameVersion.HG:                  case GameVersion.SS:                      if (currentGen == 4 || (currentGen >= 5 && egg))                          return MetGen4.Take(4).Concat(MetGen4.Skip(4).OrderByDescending(loc => loc.Value > 125 && loc.Value < 234)).ToList(); // Celadon Dept.                      break;                    case GameVersion.B:                  case GameVersion.W:                      return MetGen5;                    case GameVersion.B2:                  case GameVersion.W2:                      return MetGen5.Take(3).Concat(MetGen5.Skip(3).OrderByDescending(loc => loc.Value <= 116)).ToList(); // Abyssal Ruins                    case GameVersion.X:                  case GameVersion.Y:                      return MetGen6.Take(3).Concat(MetGen6.Skip(3).OrderByDescending(loc => loc.Value <= 168)).ToList(); // Unknown Dungeon                    case GameVersion.OR:                  case GameVersion.AS:                      return MetGen6.Take(3).Concat(MetGen6.Skip(3).OrderByDescending(loc => loc.Value > 168 && loc.Value <= 354)).ToList(); // Secret Base                    case GameVersion.SN:                  case GameVersion.MN:                      return MetGen7.Take(3).Concat(MetGen7.Skip(3).OrderByDescending(loc => loc.Value < 200)).ToList(); // Outer Cape                    case GameVersion.US:                  case GameVersion.UM:                    case GameVersion.RD:                  case GameVersion.BU:                  case GameVersion.GN:                  case GameVersion.YW:                    case GameVersion.GD:                  case GameVersion.SV:                  case GameVersion.C:                      return MetGen7.Take(3).Concat(MetGen7.Skip(3).OrderByDescending(loc => loc.Value < 234)).ToList(); // Dividing Peak Tunnel                    case GameVersion.GP:                  case GameVersion.GE:                  case GameVersion.GO:                      return MetGen7GG.Take(3).Concat(MetGen7GG.Skip(3).OrderByDescending(loc => loc.Value <= 54)).ToList(); // Pokémon League                    case GameVersion.SW:                  case GameVersion.SH:                      return MetGen8.Take(3).Concat(MetGen8.Skip(3).OrderByDescending(loc => loc.Value < 400)).ToList(); // todo              }
Magic Number,PKHeX.Core,GameDataSource,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameDataSource.cs,GetLocationList,The following statement contains a magic number: switch (version)              {                  case GameVersion.CXD:                      if (currentGen == 3)                          return MetGen3CXD;                      break;                    case GameVersion.R:                  case GameVersion.S:                      if (currentGen == 3)                          return MetGen3.OrderByDescending(loc => loc.Value <= 87).ToList(); // Ferry                      break;                  case GameVersion.E:                      if (currentGen == 3)                          return MetGen3.OrderByDescending(loc => loc.Value <= 87 || (loc.Value >= 196 && loc.Value <= 212)).ToList(); // Trainer Hill                      break;                  case GameVersion.FR:                  case GameVersion.LG:                      if (currentGen == 3)                          return MetGen3.OrderByDescending(loc => loc.Value > 87 && loc.Value < 197).ToList(); // Celadon Dept.                      break;                    case GameVersion.D:                  case GameVersion.P:                      if (currentGen == 4 || (currentGen >= 5 && egg))                          return MetGen4.Take(4).Concat(MetGen4.Skip(4).OrderByDescending(loc => loc.Value <= 111)).ToList(); // Battle Park                      break;                    case GameVersion.Pt:                      if (currentGen == 4 || (currentGen >= 5 && egg))                          return MetGen4.Take(4).Concat(MetGen4.Skip(4).OrderByDescending(loc => loc.Value <= 125)).ToList(); // Rock Peak Ruins                      break;                    case GameVersion.HG:                  case GameVersion.SS:                      if (currentGen == 4 || (currentGen >= 5 && egg))                          return MetGen4.Take(4).Concat(MetGen4.Skip(4).OrderByDescending(loc => loc.Value > 125 && loc.Value < 234)).ToList(); // Celadon Dept.                      break;                    case GameVersion.B:                  case GameVersion.W:                      return MetGen5;                    case GameVersion.B2:                  case GameVersion.W2:                      return MetGen5.Take(3).Concat(MetGen5.Skip(3).OrderByDescending(loc => loc.Value <= 116)).ToList(); // Abyssal Ruins                    case GameVersion.X:                  case GameVersion.Y:                      return MetGen6.Take(3).Concat(MetGen6.Skip(3).OrderByDescending(loc => loc.Value <= 168)).ToList(); // Unknown Dungeon                    case GameVersion.OR:                  case GameVersion.AS:                      return MetGen6.Take(3).Concat(MetGen6.Skip(3).OrderByDescending(loc => loc.Value > 168 && loc.Value <= 354)).ToList(); // Secret Base                    case GameVersion.SN:                  case GameVersion.MN:                      return MetGen7.Take(3).Concat(MetGen7.Skip(3).OrderByDescending(loc => loc.Value < 200)).ToList(); // Outer Cape                    case GameVersion.US:                  case GameVersion.UM:                    case GameVersion.RD:                  case GameVersion.BU:                  case GameVersion.GN:                  case GameVersion.YW:                    case GameVersion.GD:                  case GameVersion.SV:                  case GameVersion.C:                      return MetGen7.Take(3).Concat(MetGen7.Skip(3).OrderByDescending(loc => loc.Value < 234)).ToList(); // Dividing Peak Tunnel                    case GameVersion.GP:                  case GameVersion.GE:                  case GameVersion.GO:                      return MetGen7GG.Take(3).Concat(MetGen7GG.Skip(3).OrderByDescending(loc => loc.Value <= 54)).ToList(); // Pokémon League                    case GameVersion.SW:                  case GameVersion.SH:                      return MetGen8.Take(3).Concat(MetGen8.Skip(3).OrderByDescending(loc => loc.Value < 400)).ToList(); // todo              }
Magic Number,PKHeX.Core,GameDataSource,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameDataSource.cs,GetLocationList,The following statement contains a magic number: switch (version)              {                  case GameVersion.CXD:                      if (currentGen == 3)                          return MetGen3CXD;                      break;                    case GameVersion.R:                  case GameVersion.S:                      if (currentGen == 3)                          return MetGen3.OrderByDescending(loc => loc.Value <= 87).ToList(); // Ferry                      break;                  case GameVersion.E:                      if (currentGen == 3)                          return MetGen3.OrderByDescending(loc => loc.Value <= 87 || (loc.Value >= 196 && loc.Value <= 212)).ToList(); // Trainer Hill                      break;                  case GameVersion.FR:                  case GameVersion.LG:                      if (currentGen == 3)                          return MetGen3.OrderByDescending(loc => loc.Value > 87 && loc.Value < 197).ToList(); // Celadon Dept.                      break;                    case GameVersion.D:                  case GameVersion.P:                      if (currentGen == 4 || (currentGen >= 5 && egg))                          return MetGen4.Take(4).Concat(MetGen4.Skip(4).OrderByDescending(loc => loc.Value <= 111)).ToList(); // Battle Park                      break;                    case GameVersion.Pt:                      if (currentGen == 4 || (currentGen >= 5 && egg))                          return MetGen4.Take(4).Concat(MetGen4.Skip(4).OrderByDescending(loc => loc.Value <= 125)).ToList(); // Rock Peak Ruins                      break;                    case GameVersion.HG:                  case GameVersion.SS:                      if (currentGen == 4 || (currentGen >= 5 && egg))                          return MetGen4.Take(4).Concat(MetGen4.Skip(4).OrderByDescending(loc => loc.Value > 125 && loc.Value < 234)).ToList(); // Celadon Dept.                      break;                    case GameVersion.B:                  case GameVersion.W:                      return MetGen5;                    case GameVersion.B2:                  case GameVersion.W2:                      return MetGen5.Take(3).Concat(MetGen5.Skip(3).OrderByDescending(loc => loc.Value <= 116)).ToList(); // Abyssal Ruins                    case GameVersion.X:                  case GameVersion.Y:                      return MetGen6.Take(3).Concat(MetGen6.Skip(3).OrderByDescending(loc => loc.Value <= 168)).ToList(); // Unknown Dungeon                    case GameVersion.OR:                  case GameVersion.AS:                      return MetGen6.Take(3).Concat(MetGen6.Skip(3).OrderByDescending(loc => loc.Value > 168 && loc.Value <= 354)).ToList(); // Secret Base                    case GameVersion.SN:                  case GameVersion.MN:                      return MetGen7.Take(3).Concat(MetGen7.Skip(3).OrderByDescending(loc => loc.Value < 200)).ToList(); // Outer Cape                    case GameVersion.US:                  case GameVersion.UM:                    case GameVersion.RD:                  case GameVersion.BU:                  case GameVersion.GN:                  case GameVersion.YW:                    case GameVersion.GD:                  case GameVersion.SV:                  case GameVersion.C:                      return MetGen7.Take(3).Concat(MetGen7.Skip(3).OrderByDescending(loc => loc.Value < 234)).ToList(); // Dividing Peak Tunnel                    case GameVersion.GP:                  case GameVersion.GE:                  case GameVersion.GO:                      return MetGen7GG.Take(3).Concat(MetGen7GG.Skip(3).OrderByDescending(loc => loc.Value <= 54)).ToList(); // Pokémon League                    case GameVersion.SW:                  case GameVersion.SH:                      return MetGen8.Take(3).Concat(MetGen8.Skip(3).OrderByDescending(loc => loc.Value < 400)).ToList(); // todo              }
Magic Number,PKHeX.Core,GameDataSource,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameDataSource.cs,GetLocationList,The following statement contains a magic number: switch (version)              {                  case GameVersion.CXD:                      if (currentGen == 3)                          return MetGen3CXD;                      break;                    case GameVersion.R:                  case GameVersion.S:                      if (currentGen == 3)                          return MetGen3.OrderByDescending(loc => loc.Value <= 87).ToList(); // Ferry                      break;                  case GameVersion.E:                      if (currentGen == 3)                          return MetGen3.OrderByDescending(loc => loc.Value <= 87 || (loc.Value >= 196 && loc.Value <= 212)).ToList(); // Trainer Hill                      break;                  case GameVersion.FR:                  case GameVersion.LG:                      if (currentGen == 3)                          return MetGen3.OrderByDescending(loc => loc.Value > 87 && loc.Value < 197).ToList(); // Celadon Dept.                      break;                    case GameVersion.D:                  case GameVersion.P:                      if (currentGen == 4 || (currentGen >= 5 && egg))                          return MetGen4.Take(4).Concat(MetGen4.Skip(4).OrderByDescending(loc => loc.Value <= 111)).ToList(); // Battle Park                      break;                    case GameVersion.Pt:                      if (currentGen == 4 || (currentGen >= 5 && egg))                          return MetGen4.Take(4).Concat(MetGen4.Skip(4).OrderByDescending(loc => loc.Value <= 125)).ToList(); // Rock Peak Ruins                      break;                    case GameVersion.HG:                  case GameVersion.SS:                      if (currentGen == 4 || (currentGen >= 5 && egg))                          return MetGen4.Take(4).Concat(MetGen4.Skip(4).OrderByDescending(loc => loc.Value > 125 && loc.Value < 234)).ToList(); // Celadon Dept.                      break;                    case GameVersion.B:                  case GameVersion.W:                      return MetGen5;                    case GameVersion.B2:                  case GameVersion.W2:                      return MetGen5.Take(3).Concat(MetGen5.Skip(3).OrderByDescending(loc => loc.Value <= 116)).ToList(); // Abyssal Ruins                    case GameVersion.X:                  case GameVersion.Y:                      return MetGen6.Take(3).Concat(MetGen6.Skip(3).OrderByDescending(loc => loc.Value <= 168)).ToList(); // Unknown Dungeon                    case GameVersion.OR:                  case GameVersion.AS:                      return MetGen6.Take(3).Concat(MetGen6.Skip(3).OrderByDescending(loc => loc.Value > 168 && loc.Value <= 354)).ToList(); // Secret Base                    case GameVersion.SN:                  case GameVersion.MN:                      return MetGen7.Take(3).Concat(MetGen7.Skip(3).OrderByDescending(loc => loc.Value < 200)).ToList(); // Outer Cape                    case GameVersion.US:                  case GameVersion.UM:                    case GameVersion.RD:                  case GameVersion.BU:                  case GameVersion.GN:                  case GameVersion.YW:                    case GameVersion.GD:                  case GameVersion.SV:                  case GameVersion.C:                      return MetGen7.Take(3).Concat(MetGen7.Skip(3).OrderByDescending(loc => loc.Value < 234)).ToList(); // Dividing Peak Tunnel                    case GameVersion.GP:                  case GameVersion.GE:                  case GameVersion.GO:                      return MetGen7GG.Take(3).Concat(MetGen7GG.Skip(3).OrderByDescending(loc => loc.Value <= 54)).ToList(); // Pokémon League                    case GameVersion.SW:                  case GameVersion.SH:                      return MetGen8.Take(3).Concat(MetGen8.Skip(3).OrderByDescending(loc => loc.Value < 400)).ToList(); // todo              }
Magic Number,PKHeX.Core,GameDataSource,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameDataSource.cs,GetLocationList,The following statement contains a magic number: switch (version)              {                  case GameVersion.CXD:                      if (currentGen == 3)                          return MetGen3CXD;                      break;                    case GameVersion.R:                  case GameVersion.S:                      if (currentGen == 3)                          return MetGen3.OrderByDescending(loc => loc.Value <= 87).ToList(); // Ferry                      break;                  case GameVersion.E:                      if (currentGen == 3)                          return MetGen3.OrderByDescending(loc => loc.Value <= 87 || (loc.Value >= 196 && loc.Value <= 212)).ToList(); // Trainer Hill                      break;                  case GameVersion.FR:                  case GameVersion.LG:                      if (currentGen == 3)                          return MetGen3.OrderByDescending(loc => loc.Value > 87 && loc.Value < 197).ToList(); // Celadon Dept.                      break;                    case GameVersion.D:                  case GameVersion.P:                      if (currentGen == 4 || (currentGen >= 5 && egg))                          return MetGen4.Take(4).Concat(MetGen4.Skip(4).OrderByDescending(loc => loc.Value <= 111)).ToList(); // Battle Park                      break;                    case GameVersion.Pt:                      if (currentGen == 4 || (currentGen >= 5 && egg))                          return MetGen4.Take(4).Concat(MetGen4.Skip(4).OrderByDescending(loc => loc.Value <= 125)).ToList(); // Rock Peak Ruins                      break;                    case GameVersion.HG:                  case GameVersion.SS:                      if (currentGen == 4 || (currentGen >= 5 && egg))                          return MetGen4.Take(4).Concat(MetGen4.Skip(4).OrderByDescending(loc => loc.Value > 125 && loc.Value < 234)).ToList(); // Celadon Dept.                      break;                    case GameVersion.B:                  case GameVersion.W:                      return MetGen5;                    case GameVersion.B2:                  case GameVersion.W2:                      return MetGen5.Take(3).Concat(MetGen5.Skip(3).OrderByDescending(loc => loc.Value <= 116)).ToList(); // Abyssal Ruins                    case GameVersion.X:                  case GameVersion.Y:                      return MetGen6.Take(3).Concat(MetGen6.Skip(3).OrderByDescending(loc => loc.Value <= 168)).ToList(); // Unknown Dungeon                    case GameVersion.OR:                  case GameVersion.AS:                      return MetGen6.Take(3).Concat(MetGen6.Skip(3).OrderByDescending(loc => loc.Value > 168 && loc.Value <= 354)).ToList(); // Secret Base                    case GameVersion.SN:                  case GameVersion.MN:                      return MetGen7.Take(3).Concat(MetGen7.Skip(3).OrderByDescending(loc => loc.Value < 200)).ToList(); // Outer Cape                    case GameVersion.US:                  case GameVersion.UM:                    case GameVersion.RD:                  case GameVersion.BU:                  case GameVersion.GN:                  case GameVersion.YW:                    case GameVersion.GD:                  case GameVersion.SV:                  case GameVersion.C:                      return MetGen7.Take(3).Concat(MetGen7.Skip(3).OrderByDescending(loc => loc.Value < 234)).ToList(); // Dividing Peak Tunnel                    case GameVersion.GP:                  case GameVersion.GE:                  case GameVersion.GO:                      return MetGen7GG.Take(3).Concat(MetGen7GG.Skip(3).OrderByDescending(loc => loc.Value <= 54)).ToList(); // Pokémon League                    case GameVersion.SW:                  case GameVersion.SH:                      return MetGen8.Take(3).Concat(MetGen8.Skip(3).OrderByDescending(loc => loc.Value < 400)).ToList(); // todo              }
Magic Number,PKHeX.Core,GameDataSource,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameDataSource.cs,GetLocationList,The following statement contains a magic number: switch (version)              {                  case GameVersion.CXD:                      if (currentGen == 3)                          return MetGen3CXD;                      break;                    case GameVersion.R:                  case GameVersion.S:                      if (currentGen == 3)                          return MetGen3.OrderByDescending(loc => loc.Value <= 87).ToList(); // Ferry                      break;                  case GameVersion.E:                      if (currentGen == 3)                          return MetGen3.OrderByDescending(loc => loc.Value <= 87 || (loc.Value >= 196 && loc.Value <= 212)).ToList(); // Trainer Hill                      break;                  case GameVersion.FR:                  case GameVersion.LG:                      if (currentGen == 3)                          return MetGen3.OrderByDescending(loc => loc.Value > 87 && loc.Value < 197).ToList(); // Celadon Dept.                      break;                    case GameVersion.D:                  case GameVersion.P:                      if (currentGen == 4 || (currentGen >= 5 && egg))                          return MetGen4.Take(4).Concat(MetGen4.Skip(4).OrderByDescending(loc => loc.Value <= 111)).ToList(); // Battle Park                      break;                    case GameVersion.Pt:                      if (currentGen == 4 || (currentGen >= 5 && egg))                          return MetGen4.Take(4).Concat(MetGen4.Skip(4).OrderByDescending(loc => loc.Value <= 125)).ToList(); // Rock Peak Ruins                      break;                    case GameVersion.HG:                  case GameVersion.SS:                      if (currentGen == 4 || (currentGen >= 5 && egg))                          return MetGen4.Take(4).Concat(MetGen4.Skip(4).OrderByDescending(loc => loc.Value > 125 && loc.Value < 234)).ToList(); // Celadon Dept.                      break;                    case GameVersion.B:                  case GameVersion.W:                      return MetGen5;                    case GameVersion.B2:                  case GameVersion.W2:                      return MetGen5.Take(3).Concat(MetGen5.Skip(3).OrderByDescending(loc => loc.Value <= 116)).ToList(); // Abyssal Ruins                    case GameVersion.X:                  case GameVersion.Y:                      return MetGen6.Take(3).Concat(MetGen6.Skip(3).OrderByDescending(loc => loc.Value <= 168)).ToList(); // Unknown Dungeon                    case GameVersion.OR:                  case GameVersion.AS:                      return MetGen6.Take(3).Concat(MetGen6.Skip(3).OrderByDescending(loc => loc.Value > 168 && loc.Value <= 354)).ToList(); // Secret Base                    case GameVersion.SN:                  case GameVersion.MN:                      return MetGen7.Take(3).Concat(MetGen7.Skip(3).OrderByDescending(loc => loc.Value < 200)).ToList(); // Outer Cape                    case GameVersion.US:                  case GameVersion.UM:                    case GameVersion.RD:                  case GameVersion.BU:                  case GameVersion.GN:                  case GameVersion.YW:                    case GameVersion.GD:                  case GameVersion.SV:                  case GameVersion.C:                      return MetGen7.Take(3).Concat(MetGen7.Skip(3).OrderByDescending(loc => loc.Value < 234)).ToList(); // Dividing Peak Tunnel                    case GameVersion.GP:                  case GameVersion.GE:                  case GameVersion.GO:                      return MetGen7GG.Take(3).Concat(MetGen7GG.Skip(3).OrderByDescending(loc => loc.Value <= 54)).ToList(); // Pokémon League                    case GameVersion.SW:                  case GameVersion.SH:                      return MetGen8.Take(3).Concat(MetGen8.Skip(3).OrderByDescending(loc => loc.Value < 400)).ToList(); // todo              }
Magic Number,PKHeX.Core,GameDataSource,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameDataSource.cs,GetLocationList,The following statement contains a magic number: switch (version)              {                  case GameVersion.CXD:                      if (currentGen == 3)                          return MetGen3CXD;                      break;                    case GameVersion.R:                  case GameVersion.S:                      if (currentGen == 3)                          return MetGen3.OrderByDescending(loc => loc.Value <= 87).ToList(); // Ferry                      break;                  case GameVersion.E:                      if (currentGen == 3)                          return MetGen3.OrderByDescending(loc => loc.Value <= 87 || (loc.Value >= 196 && loc.Value <= 212)).ToList(); // Trainer Hill                      break;                  case GameVersion.FR:                  case GameVersion.LG:                      if (currentGen == 3)                          return MetGen3.OrderByDescending(loc => loc.Value > 87 && loc.Value < 197).ToList(); // Celadon Dept.                      break;                    case GameVersion.D:                  case GameVersion.P:                      if (currentGen == 4 || (currentGen >= 5 && egg))                          return MetGen4.Take(4).Concat(MetGen4.Skip(4).OrderByDescending(loc => loc.Value <= 111)).ToList(); // Battle Park                      break;                    case GameVersion.Pt:                      if (currentGen == 4 || (currentGen >= 5 && egg))                          return MetGen4.Take(4).Concat(MetGen4.Skip(4).OrderByDescending(loc => loc.Value <= 125)).ToList(); // Rock Peak Ruins                      break;                    case GameVersion.HG:                  case GameVersion.SS:                      if (currentGen == 4 || (currentGen >= 5 && egg))                          return MetGen4.Take(4).Concat(MetGen4.Skip(4).OrderByDescending(loc => loc.Value > 125 && loc.Value < 234)).ToList(); // Celadon Dept.                      break;                    case GameVersion.B:                  case GameVersion.W:                      return MetGen5;                    case GameVersion.B2:                  case GameVersion.W2:                      return MetGen5.Take(3).Concat(MetGen5.Skip(3).OrderByDescending(loc => loc.Value <= 116)).ToList(); // Abyssal Ruins                    case GameVersion.X:                  case GameVersion.Y:                      return MetGen6.Take(3).Concat(MetGen6.Skip(3).OrderByDescending(loc => loc.Value <= 168)).ToList(); // Unknown Dungeon                    case GameVersion.OR:                  case GameVersion.AS:                      return MetGen6.Take(3).Concat(MetGen6.Skip(3).OrderByDescending(loc => loc.Value > 168 && loc.Value <= 354)).ToList(); // Secret Base                    case GameVersion.SN:                  case GameVersion.MN:                      return MetGen7.Take(3).Concat(MetGen7.Skip(3).OrderByDescending(loc => loc.Value < 200)).ToList(); // Outer Cape                    case GameVersion.US:                  case GameVersion.UM:                    case GameVersion.RD:                  case GameVersion.BU:                  case GameVersion.GN:                  case GameVersion.YW:                    case GameVersion.GD:                  case GameVersion.SV:                  case GameVersion.C:                      return MetGen7.Take(3).Concat(MetGen7.Skip(3).OrderByDescending(loc => loc.Value < 234)).ToList(); // Dividing Peak Tunnel                    case GameVersion.GP:                  case GameVersion.GE:                  case GameVersion.GO:                      return MetGen7GG.Take(3).Concat(MetGen7GG.Skip(3).OrderByDescending(loc => loc.Value <= 54)).ToList(); // Pokémon League                    case GameVersion.SW:                  case GameVersion.SH:                      return MetGen8.Take(3).Concat(MetGen8.Skip(3).OrderByDescending(loc => loc.Value < 400)).ToList(); // todo              }
Magic Number,PKHeX.Core,GameDataSource,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameDataSource.cs,GetLocationList,The following statement contains a magic number: switch (version)              {                  case GameVersion.CXD:                      if (currentGen == 3)                          return MetGen3CXD;                      break;                    case GameVersion.R:                  case GameVersion.S:                      if (currentGen == 3)                          return MetGen3.OrderByDescending(loc => loc.Value <= 87).ToList(); // Ferry                      break;                  case GameVersion.E:                      if (currentGen == 3)                          return MetGen3.OrderByDescending(loc => loc.Value <= 87 || (loc.Value >= 196 && loc.Value <= 212)).ToList(); // Trainer Hill                      break;                  case GameVersion.FR:                  case GameVersion.LG:                      if (currentGen == 3)                          return MetGen3.OrderByDescending(loc => loc.Value > 87 && loc.Value < 197).ToList(); // Celadon Dept.                      break;                    case GameVersion.D:                  case GameVersion.P:                      if (currentGen == 4 || (currentGen >= 5 && egg))                          return MetGen4.Take(4).Concat(MetGen4.Skip(4).OrderByDescending(loc => loc.Value <= 111)).ToList(); // Battle Park                      break;                    case GameVersion.Pt:                      if (currentGen == 4 || (currentGen >= 5 && egg))                          return MetGen4.Take(4).Concat(MetGen4.Skip(4).OrderByDescending(loc => loc.Value <= 125)).ToList(); // Rock Peak Ruins                      break;                    case GameVersion.HG:                  case GameVersion.SS:                      if (currentGen == 4 || (currentGen >= 5 && egg))                          return MetGen4.Take(4).Concat(MetGen4.Skip(4).OrderByDescending(loc => loc.Value > 125 && loc.Value < 234)).ToList(); // Celadon Dept.                      break;                    case GameVersion.B:                  case GameVersion.W:                      return MetGen5;                    case GameVersion.B2:                  case GameVersion.W2:                      return MetGen5.Take(3).Concat(MetGen5.Skip(3).OrderByDescending(loc => loc.Value <= 116)).ToList(); // Abyssal Ruins                    case GameVersion.X:                  case GameVersion.Y:                      return MetGen6.Take(3).Concat(MetGen6.Skip(3).OrderByDescending(loc => loc.Value <= 168)).ToList(); // Unknown Dungeon                    case GameVersion.OR:                  case GameVersion.AS:                      return MetGen6.Take(3).Concat(MetGen6.Skip(3).OrderByDescending(loc => loc.Value > 168 && loc.Value <= 354)).ToList(); // Secret Base                    case GameVersion.SN:                  case GameVersion.MN:                      return MetGen7.Take(3).Concat(MetGen7.Skip(3).OrderByDescending(loc => loc.Value < 200)).ToList(); // Outer Cape                    case GameVersion.US:                  case GameVersion.UM:                    case GameVersion.RD:                  case GameVersion.BU:                  case GameVersion.GN:                  case GameVersion.YW:                    case GameVersion.GD:                  case GameVersion.SV:                  case GameVersion.C:                      return MetGen7.Take(3).Concat(MetGen7.Skip(3).OrderByDescending(loc => loc.Value < 234)).ToList(); // Dividing Peak Tunnel                    case GameVersion.GP:                  case GameVersion.GE:                  case GameVersion.GO:                      return MetGen7GG.Take(3).Concat(MetGen7GG.Skip(3).OrderByDescending(loc => loc.Value <= 54)).ToList(); // Pokémon League                    case GameVersion.SW:                  case GameVersion.SH:                      return MetGen8.Take(3).Concat(MetGen8.Skip(3).OrderByDescending(loc => loc.Value < 400)).ToList(); // todo              }
Magic Number,PKHeX.Core,GameDataSource,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameDataSource.cs,GetLocationList,The following statement contains a magic number: switch (version)              {                  case GameVersion.CXD:                      if (currentGen == 3)                          return MetGen3CXD;                      break;                    case GameVersion.R:                  case GameVersion.S:                      if (currentGen == 3)                          return MetGen3.OrderByDescending(loc => loc.Value <= 87).ToList(); // Ferry                      break;                  case GameVersion.E:                      if (currentGen == 3)                          return MetGen3.OrderByDescending(loc => loc.Value <= 87 || (loc.Value >= 196 && loc.Value <= 212)).ToList(); // Trainer Hill                      break;                  case GameVersion.FR:                  case GameVersion.LG:                      if (currentGen == 3)                          return MetGen3.OrderByDescending(loc => loc.Value > 87 && loc.Value < 197).ToList(); // Celadon Dept.                      break;                    case GameVersion.D:                  case GameVersion.P:                      if (currentGen == 4 || (currentGen >= 5 && egg))                          return MetGen4.Take(4).Concat(MetGen4.Skip(4).OrderByDescending(loc => loc.Value <= 111)).ToList(); // Battle Park                      break;                    case GameVersion.Pt:                      if (currentGen == 4 || (currentGen >= 5 && egg))                          return MetGen4.Take(4).Concat(MetGen4.Skip(4).OrderByDescending(loc => loc.Value <= 125)).ToList(); // Rock Peak Ruins                      break;                    case GameVersion.HG:                  case GameVersion.SS:                      if (currentGen == 4 || (currentGen >= 5 && egg))                          return MetGen4.Take(4).Concat(MetGen4.Skip(4).OrderByDescending(loc => loc.Value > 125 && loc.Value < 234)).ToList(); // Celadon Dept.                      break;                    case GameVersion.B:                  case GameVersion.W:                      return MetGen5;                    case GameVersion.B2:                  case GameVersion.W2:                      return MetGen5.Take(3).Concat(MetGen5.Skip(3).OrderByDescending(loc => loc.Value <= 116)).ToList(); // Abyssal Ruins                    case GameVersion.X:                  case GameVersion.Y:                      return MetGen6.Take(3).Concat(MetGen6.Skip(3).OrderByDescending(loc => loc.Value <= 168)).ToList(); // Unknown Dungeon                    case GameVersion.OR:                  case GameVersion.AS:                      return MetGen6.Take(3).Concat(MetGen6.Skip(3).OrderByDescending(loc => loc.Value > 168 && loc.Value <= 354)).ToList(); // Secret Base                    case GameVersion.SN:                  case GameVersion.MN:                      return MetGen7.Take(3).Concat(MetGen7.Skip(3).OrderByDescending(loc => loc.Value < 200)).ToList(); // Outer Cape                    case GameVersion.US:                  case GameVersion.UM:                    case GameVersion.RD:                  case GameVersion.BU:                  case GameVersion.GN:                  case GameVersion.YW:                    case GameVersion.GD:                  case GameVersion.SV:                  case GameVersion.C:                      return MetGen7.Take(3).Concat(MetGen7.Skip(3).OrderByDescending(loc => loc.Value < 234)).ToList(); // Dividing Peak Tunnel                    case GameVersion.GP:                  case GameVersion.GE:                  case GameVersion.GO:                      return MetGen7GG.Take(3).Concat(MetGen7GG.Skip(3).OrderByDescending(loc => loc.Value <= 54)).ToList(); // Pokémon League                    case GameVersion.SW:                  case GameVersion.SH:                      return MetGen8.Take(3).Concat(MetGen8.Skip(3).OrderByDescending(loc => loc.Value < 400)).ToList(); // todo              }
Magic Number,PKHeX.Core,GameDataSource,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameDataSource.cs,GetLocationList,The following statement contains a magic number: switch (version)              {                  case GameVersion.CXD:                      if (currentGen == 3)                          return MetGen3CXD;                      break;                    case GameVersion.R:                  case GameVersion.S:                      if (currentGen == 3)                          return MetGen3.OrderByDescending(loc => loc.Value <= 87).ToList(); // Ferry                      break;                  case GameVersion.E:                      if (currentGen == 3)                          return MetGen3.OrderByDescending(loc => loc.Value <= 87 || (loc.Value >= 196 && loc.Value <= 212)).ToList(); // Trainer Hill                      break;                  case GameVersion.FR:                  case GameVersion.LG:                      if (currentGen == 3)                          return MetGen3.OrderByDescending(loc => loc.Value > 87 && loc.Value < 197).ToList(); // Celadon Dept.                      break;                    case GameVersion.D:                  case GameVersion.P:                      if (currentGen == 4 || (currentGen >= 5 && egg))                          return MetGen4.Take(4).Concat(MetGen4.Skip(4).OrderByDescending(loc => loc.Value <= 111)).ToList(); // Battle Park                      break;                    case GameVersion.Pt:                      if (currentGen == 4 || (currentGen >= 5 && egg))                          return MetGen4.Take(4).Concat(MetGen4.Skip(4).OrderByDescending(loc => loc.Value <= 125)).ToList(); // Rock Peak Ruins                      break;                    case GameVersion.HG:                  case GameVersion.SS:                      if (currentGen == 4 || (currentGen >= 5 && egg))                          return MetGen4.Take(4).Concat(MetGen4.Skip(4).OrderByDescending(loc => loc.Value > 125 && loc.Value < 234)).ToList(); // Celadon Dept.                      break;                    case GameVersion.B:                  case GameVersion.W:                      return MetGen5;                    case GameVersion.B2:                  case GameVersion.W2:                      return MetGen5.Take(3).Concat(MetGen5.Skip(3).OrderByDescending(loc => loc.Value <= 116)).ToList(); // Abyssal Ruins                    case GameVersion.X:                  case GameVersion.Y:                      return MetGen6.Take(3).Concat(MetGen6.Skip(3).OrderByDescending(loc => loc.Value <= 168)).ToList(); // Unknown Dungeon                    case GameVersion.OR:                  case GameVersion.AS:                      return MetGen6.Take(3).Concat(MetGen6.Skip(3).OrderByDescending(loc => loc.Value > 168 && loc.Value <= 354)).ToList(); // Secret Base                    case GameVersion.SN:                  case GameVersion.MN:                      return MetGen7.Take(3).Concat(MetGen7.Skip(3).OrderByDescending(loc => loc.Value < 200)).ToList(); // Outer Cape                    case GameVersion.US:                  case GameVersion.UM:                    case GameVersion.RD:                  case GameVersion.BU:                  case GameVersion.GN:                  case GameVersion.YW:                    case GameVersion.GD:                  case GameVersion.SV:                  case GameVersion.C:                      return MetGen7.Take(3).Concat(MetGen7.Skip(3).OrderByDescending(loc => loc.Value < 234)).ToList(); // Dividing Peak Tunnel                    case GameVersion.GP:                  case GameVersion.GE:                  case GameVersion.GO:                      return MetGen7GG.Take(3).Concat(MetGen7GG.Skip(3).OrderByDescending(loc => loc.Value <= 54)).ToList(); // Pokémon League                    case GameVersion.SW:                  case GameVersion.SH:                      return MetGen8.Take(3).Concat(MetGen8.Skip(3).OrderByDescending(loc => loc.Value < 400)).ToList(); // todo              }
Magic Number,PKHeX.Core,GameDataSource,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameDataSource.cs,GetLocationList,The following statement contains a magic number: switch (version)              {                  case GameVersion.CXD:                      if (currentGen == 3)                          return MetGen3CXD;                      break;                    case GameVersion.R:                  case GameVersion.S:                      if (currentGen == 3)                          return MetGen3.OrderByDescending(loc => loc.Value <= 87).ToList(); // Ferry                      break;                  case GameVersion.E:                      if (currentGen == 3)                          return MetGen3.OrderByDescending(loc => loc.Value <= 87 || (loc.Value >= 196 && loc.Value <= 212)).ToList(); // Trainer Hill                      break;                  case GameVersion.FR:                  case GameVersion.LG:                      if (currentGen == 3)                          return MetGen3.OrderByDescending(loc => loc.Value > 87 && loc.Value < 197).ToList(); // Celadon Dept.                      break;                    case GameVersion.D:                  case GameVersion.P:                      if (currentGen == 4 || (currentGen >= 5 && egg))                          return MetGen4.Take(4).Concat(MetGen4.Skip(4).OrderByDescending(loc => loc.Value <= 111)).ToList(); // Battle Park                      break;                    case GameVersion.Pt:                      if (currentGen == 4 || (currentGen >= 5 && egg))                          return MetGen4.Take(4).Concat(MetGen4.Skip(4).OrderByDescending(loc => loc.Value <= 125)).ToList(); // Rock Peak Ruins                      break;                    case GameVersion.HG:                  case GameVersion.SS:                      if (currentGen == 4 || (currentGen >= 5 && egg))                          return MetGen4.Take(4).Concat(MetGen4.Skip(4).OrderByDescending(loc => loc.Value > 125 && loc.Value < 234)).ToList(); // Celadon Dept.                      break;                    case GameVersion.B:                  case GameVersion.W:                      return MetGen5;                    case GameVersion.B2:                  case GameVersion.W2:                      return MetGen5.Take(3).Concat(MetGen5.Skip(3).OrderByDescending(loc => loc.Value <= 116)).ToList(); // Abyssal Ruins                    case GameVersion.X:                  case GameVersion.Y:                      return MetGen6.Take(3).Concat(MetGen6.Skip(3).OrderByDescending(loc => loc.Value <= 168)).ToList(); // Unknown Dungeon                    case GameVersion.OR:                  case GameVersion.AS:                      return MetGen6.Take(3).Concat(MetGen6.Skip(3).OrderByDescending(loc => loc.Value > 168 && loc.Value <= 354)).ToList(); // Secret Base                    case GameVersion.SN:                  case GameVersion.MN:                      return MetGen7.Take(3).Concat(MetGen7.Skip(3).OrderByDescending(loc => loc.Value < 200)).ToList(); // Outer Cape                    case GameVersion.US:                  case GameVersion.UM:                    case GameVersion.RD:                  case GameVersion.BU:                  case GameVersion.GN:                  case GameVersion.YW:                    case GameVersion.GD:                  case GameVersion.SV:                  case GameVersion.C:                      return MetGen7.Take(3).Concat(MetGen7.Skip(3).OrderByDescending(loc => loc.Value < 234)).ToList(); // Dividing Peak Tunnel                    case GameVersion.GP:                  case GameVersion.GE:                  case GameVersion.GO:                      return MetGen7GG.Take(3).Concat(MetGen7GG.Skip(3).OrderByDescending(loc => loc.Value <= 54)).ToList(); // Pokémon League                    case GameVersion.SW:                  case GameVersion.SH:                      return MetGen8.Take(3).Concat(MetGen8.Skip(3).OrderByDescending(loc => loc.Value < 400)).ToList(); // todo              }
Magic Number,PKHeX.Core,GameDataSource,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameDataSource.cs,GetLocationList,The following statement contains a magic number: switch (version)              {                  case GameVersion.CXD:                      if (currentGen == 3)                          return MetGen3CXD;                      break;                    case GameVersion.R:                  case GameVersion.S:                      if (currentGen == 3)                          return MetGen3.OrderByDescending(loc => loc.Value <= 87).ToList(); // Ferry                      break;                  case GameVersion.E:                      if (currentGen == 3)                          return MetGen3.OrderByDescending(loc => loc.Value <= 87 || (loc.Value >= 196 && loc.Value <= 212)).ToList(); // Trainer Hill                      break;                  case GameVersion.FR:                  case GameVersion.LG:                      if (currentGen == 3)                          return MetGen3.OrderByDescending(loc => loc.Value > 87 && loc.Value < 197).ToList(); // Celadon Dept.                      break;                    case GameVersion.D:                  case GameVersion.P:                      if (currentGen == 4 || (currentGen >= 5 && egg))                          return MetGen4.Take(4).Concat(MetGen4.Skip(4).OrderByDescending(loc => loc.Value <= 111)).ToList(); // Battle Park                      break;                    case GameVersion.Pt:                      if (currentGen == 4 || (currentGen >= 5 && egg))                          return MetGen4.Take(4).Concat(MetGen4.Skip(4).OrderByDescending(loc => loc.Value <= 125)).ToList(); // Rock Peak Ruins                      break;                    case GameVersion.HG:                  case GameVersion.SS:                      if (currentGen == 4 || (currentGen >= 5 && egg))                          return MetGen4.Take(4).Concat(MetGen4.Skip(4).OrderByDescending(loc => loc.Value > 125 && loc.Value < 234)).ToList(); // Celadon Dept.                      break;                    case GameVersion.B:                  case GameVersion.W:                      return MetGen5;                    case GameVersion.B2:                  case GameVersion.W2:                      return MetGen5.Take(3).Concat(MetGen5.Skip(3).OrderByDescending(loc => loc.Value <= 116)).ToList(); // Abyssal Ruins                    case GameVersion.X:                  case GameVersion.Y:                      return MetGen6.Take(3).Concat(MetGen6.Skip(3).OrderByDescending(loc => loc.Value <= 168)).ToList(); // Unknown Dungeon                    case GameVersion.OR:                  case GameVersion.AS:                      return MetGen6.Take(3).Concat(MetGen6.Skip(3).OrderByDescending(loc => loc.Value > 168 && loc.Value <= 354)).ToList(); // Secret Base                    case GameVersion.SN:                  case GameVersion.MN:                      return MetGen7.Take(3).Concat(MetGen7.Skip(3).OrderByDescending(loc => loc.Value < 200)).ToList(); // Outer Cape                    case GameVersion.US:                  case GameVersion.UM:                    case GameVersion.RD:                  case GameVersion.BU:                  case GameVersion.GN:                  case GameVersion.YW:                    case GameVersion.GD:                  case GameVersion.SV:                  case GameVersion.C:                      return MetGen7.Take(3).Concat(MetGen7.Skip(3).OrderByDescending(loc => loc.Value < 234)).ToList(); // Dividing Peak Tunnel                    case GameVersion.GP:                  case GameVersion.GE:                  case GameVersion.GO:                      return MetGen7GG.Take(3).Concat(MetGen7GG.Skip(3).OrderByDescending(loc => loc.Value <= 54)).ToList(); // Pokémon League                    case GameVersion.SW:                  case GameVersion.SH:                      return MetGen8.Take(3).Concat(MetGen8.Skip(3).OrderByDescending(loc => loc.Value < 400)).ToList(); // todo              }
Magic Number,PKHeX.Core,GameDataSource,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameDataSource.cs,GetLocationList,The following statement contains a magic number: switch (version)              {                  case GameVersion.CXD:                      if (currentGen == 3)                          return MetGen3CXD;                      break;                    case GameVersion.R:                  case GameVersion.S:                      if (currentGen == 3)                          return MetGen3.OrderByDescending(loc => loc.Value <= 87).ToList(); // Ferry                      break;                  case GameVersion.E:                      if (currentGen == 3)                          return MetGen3.OrderByDescending(loc => loc.Value <= 87 || (loc.Value >= 196 && loc.Value <= 212)).ToList(); // Trainer Hill                      break;                  case GameVersion.FR:                  case GameVersion.LG:                      if (currentGen == 3)                          return MetGen3.OrderByDescending(loc => loc.Value > 87 && loc.Value < 197).ToList(); // Celadon Dept.                      break;                    case GameVersion.D:                  case GameVersion.P:                      if (currentGen == 4 || (currentGen >= 5 && egg))                          return MetGen4.Take(4).Concat(MetGen4.Skip(4).OrderByDescending(loc => loc.Value <= 111)).ToList(); // Battle Park                      break;                    case GameVersion.Pt:                      if (currentGen == 4 || (currentGen >= 5 && egg))                          return MetGen4.Take(4).Concat(MetGen4.Skip(4).OrderByDescending(loc => loc.Value <= 125)).ToList(); // Rock Peak Ruins                      break;                    case GameVersion.HG:                  case GameVersion.SS:                      if (currentGen == 4 || (currentGen >= 5 && egg))                          return MetGen4.Take(4).Concat(MetGen4.Skip(4).OrderByDescending(loc => loc.Value > 125 && loc.Value < 234)).ToList(); // Celadon Dept.                      break;                    case GameVersion.B:                  case GameVersion.W:                      return MetGen5;                    case GameVersion.B2:                  case GameVersion.W2:                      return MetGen5.Take(3).Concat(MetGen5.Skip(3).OrderByDescending(loc => loc.Value <= 116)).ToList(); // Abyssal Ruins                    case GameVersion.X:                  case GameVersion.Y:                      return MetGen6.Take(3).Concat(MetGen6.Skip(3).OrderByDescending(loc => loc.Value <= 168)).ToList(); // Unknown Dungeon                    case GameVersion.OR:                  case GameVersion.AS:                      return MetGen6.Take(3).Concat(MetGen6.Skip(3).OrderByDescending(loc => loc.Value > 168 && loc.Value <= 354)).ToList(); // Secret Base                    case GameVersion.SN:                  case GameVersion.MN:                      return MetGen7.Take(3).Concat(MetGen7.Skip(3).OrderByDescending(loc => loc.Value < 200)).ToList(); // Outer Cape                    case GameVersion.US:                  case GameVersion.UM:                    case GameVersion.RD:                  case GameVersion.BU:                  case GameVersion.GN:                  case GameVersion.YW:                    case GameVersion.GD:                  case GameVersion.SV:                  case GameVersion.C:                      return MetGen7.Take(3).Concat(MetGen7.Skip(3).OrderByDescending(loc => loc.Value < 234)).ToList(); // Dividing Peak Tunnel                    case GameVersion.GP:                  case GameVersion.GE:                  case GameVersion.GO:                      return MetGen7GG.Take(3).Concat(MetGen7GG.Skip(3).OrderByDescending(loc => loc.Value <= 54)).ToList(); // Pokémon League                    case GameVersion.SW:                  case GameVersion.SH:                      return MetGen8.Take(3).Concat(MetGen8.Skip(3).OrderByDescending(loc => loc.Value < 400)).ToList(); // todo              }
Magic Number,PKHeX.Core,GameDataSource,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameDataSource.cs,GetLocationList,The following statement contains a magic number: switch (version)              {                  case GameVersion.CXD:                      if (currentGen == 3)                          return MetGen3CXD;                      break;                    case GameVersion.R:                  case GameVersion.S:                      if (currentGen == 3)                          return MetGen3.OrderByDescending(loc => loc.Value <= 87).ToList(); // Ferry                      break;                  case GameVersion.E:                      if (currentGen == 3)                          return MetGen3.OrderByDescending(loc => loc.Value <= 87 || (loc.Value >= 196 && loc.Value <= 212)).ToList(); // Trainer Hill                      break;                  case GameVersion.FR:                  case GameVersion.LG:                      if (currentGen == 3)                          return MetGen3.OrderByDescending(loc => loc.Value > 87 && loc.Value < 197).ToList(); // Celadon Dept.                      break;                    case GameVersion.D:                  case GameVersion.P:                      if (currentGen == 4 || (currentGen >= 5 && egg))                          return MetGen4.Take(4).Concat(MetGen4.Skip(4).OrderByDescending(loc => loc.Value <= 111)).ToList(); // Battle Park                      break;                    case GameVersion.Pt:                      if (currentGen == 4 || (currentGen >= 5 && egg))                          return MetGen4.Take(4).Concat(MetGen4.Skip(4).OrderByDescending(loc => loc.Value <= 125)).ToList(); // Rock Peak Ruins                      break;                    case GameVersion.HG:                  case GameVersion.SS:                      if (currentGen == 4 || (currentGen >= 5 && egg))                          return MetGen4.Take(4).Concat(MetGen4.Skip(4).OrderByDescending(loc => loc.Value > 125 && loc.Value < 234)).ToList(); // Celadon Dept.                      break;                    case GameVersion.B:                  case GameVersion.W:                      return MetGen5;                    case GameVersion.B2:                  case GameVersion.W2:                      return MetGen5.Take(3).Concat(MetGen5.Skip(3).OrderByDescending(loc => loc.Value <= 116)).ToList(); // Abyssal Ruins                    case GameVersion.X:                  case GameVersion.Y:                      return MetGen6.Take(3).Concat(MetGen6.Skip(3).OrderByDescending(loc => loc.Value <= 168)).ToList(); // Unknown Dungeon                    case GameVersion.OR:                  case GameVersion.AS:                      return MetGen6.Take(3).Concat(MetGen6.Skip(3).OrderByDescending(loc => loc.Value > 168 && loc.Value <= 354)).ToList(); // Secret Base                    case GameVersion.SN:                  case GameVersion.MN:                      return MetGen7.Take(3).Concat(MetGen7.Skip(3).OrderByDescending(loc => loc.Value < 200)).ToList(); // Outer Cape                    case GameVersion.US:                  case GameVersion.UM:                    case GameVersion.RD:                  case GameVersion.BU:                  case GameVersion.GN:                  case GameVersion.YW:                    case GameVersion.GD:                  case GameVersion.SV:                  case GameVersion.C:                      return MetGen7.Take(3).Concat(MetGen7.Skip(3).OrderByDescending(loc => loc.Value < 234)).ToList(); // Dividing Peak Tunnel                    case GameVersion.GP:                  case GameVersion.GE:                  case GameVersion.GO:                      return MetGen7GG.Take(3).Concat(MetGen7GG.Skip(3).OrderByDescending(loc => loc.Value <= 54)).ToList(); // Pokémon League                    case GameVersion.SW:                  case GameVersion.SH:                      return MetGen8.Take(3).Concat(MetGen8.Skip(3).OrderByDescending(loc => loc.Value < 400)).ToList(); // todo              }
Magic Number,PKHeX.Core,GameDataSource,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameDataSource.cs,GetLocationList,The following statement contains a magic number: switch (version)              {                  case GameVersion.CXD:                      if (currentGen == 3)                          return MetGen3CXD;                      break;                    case GameVersion.R:                  case GameVersion.S:                      if (currentGen == 3)                          return MetGen3.OrderByDescending(loc => loc.Value <= 87).ToList(); // Ferry                      break;                  case GameVersion.E:                      if (currentGen == 3)                          return MetGen3.OrderByDescending(loc => loc.Value <= 87 || (loc.Value >= 196 && loc.Value <= 212)).ToList(); // Trainer Hill                      break;                  case GameVersion.FR:                  case GameVersion.LG:                      if (currentGen == 3)                          return MetGen3.OrderByDescending(loc => loc.Value > 87 && loc.Value < 197).ToList(); // Celadon Dept.                      break;                    case GameVersion.D:                  case GameVersion.P:                      if (currentGen == 4 || (currentGen >= 5 && egg))                          return MetGen4.Take(4).Concat(MetGen4.Skip(4).OrderByDescending(loc => loc.Value <= 111)).ToList(); // Battle Park                      break;                    case GameVersion.Pt:                      if (currentGen == 4 || (currentGen >= 5 && egg))                          return MetGen4.Take(4).Concat(MetGen4.Skip(4).OrderByDescending(loc => loc.Value <= 125)).ToList(); // Rock Peak Ruins                      break;                    case GameVersion.HG:                  case GameVersion.SS:                      if (currentGen == 4 || (currentGen >= 5 && egg))                          return MetGen4.Take(4).Concat(MetGen4.Skip(4).OrderByDescending(loc => loc.Value > 125 && loc.Value < 234)).ToList(); // Celadon Dept.                      break;                    case GameVersion.B:                  case GameVersion.W:                      return MetGen5;                    case GameVersion.B2:                  case GameVersion.W2:                      return MetGen5.Take(3).Concat(MetGen5.Skip(3).OrderByDescending(loc => loc.Value <= 116)).ToList(); // Abyssal Ruins                    case GameVersion.X:                  case GameVersion.Y:                      return MetGen6.Take(3).Concat(MetGen6.Skip(3).OrderByDescending(loc => loc.Value <= 168)).ToList(); // Unknown Dungeon                    case GameVersion.OR:                  case GameVersion.AS:                      return MetGen6.Take(3).Concat(MetGen6.Skip(3).OrderByDescending(loc => loc.Value > 168 && loc.Value <= 354)).ToList(); // Secret Base                    case GameVersion.SN:                  case GameVersion.MN:                      return MetGen7.Take(3).Concat(MetGen7.Skip(3).OrderByDescending(loc => loc.Value < 200)).ToList(); // Outer Cape                    case GameVersion.US:                  case GameVersion.UM:                    case GameVersion.RD:                  case GameVersion.BU:                  case GameVersion.GN:                  case GameVersion.YW:                    case GameVersion.GD:                  case GameVersion.SV:                  case GameVersion.C:                      return MetGen7.Take(3).Concat(MetGen7.Skip(3).OrderByDescending(loc => loc.Value < 234)).ToList(); // Dividing Peak Tunnel                    case GameVersion.GP:                  case GameVersion.GE:                  case GameVersion.GO:                      return MetGen7GG.Take(3).Concat(MetGen7GG.Skip(3).OrderByDescending(loc => loc.Value <= 54)).ToList(); // Pokémon League                    case GameVersion.SW:                  case GameVersion.SH:                      return MetGen8.Take(3).Concat(MetGen8.Skip(3).OrderByDescending(loc => loc.Value < 400)).ToList(); // todo              }
Magic Number,PKHeX.Core,GameDataSource,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameDataSource.cs,GetLocationList,The following statement contains a magic number: switch (version)              {                  case GameVersion.CXD:                      if (currentGen == 3)                          return MetGen3CXD;                      break;                    case GameVersion.R:                  case GameVersion.S:                      if (currentGen == 3)                          return MetGen3.OrderByDescending(loc => loc.Value <= 87).ToList(); // Ferry                      break;                  case GameVersion.E:                      if (currentGen == 3)                          return MetGen3.OrderByDescending(loc => loc.Value <= 87 || (loc.Value >= 196 && loc.Value <= 212)).ToList(); // Trainer Hill                      break;                  case GameVersion.FR:                  case GameVersion.LG:                      if (currentGen == 3)                          return MetGen3.OrderByDescending(loc => loc.Value > 87 && loc.Value < 197).ToList(); // Celadon Dept.                      break;                    case GameVersion.D:                  case GameVersion.P:                      if (currentGen == 4 || (currentGen >= 5 && egg))                          return MetGen4.Take(4).Concat(MetGen4.Skip(4).OrderByDescending(loc => loc.Value <= 111)).ToList(); // Battle Park                      break;                    case GameVersion.Pt:                      if (currentGen == 4 || (currentGen >= 5 && egg))                          return MetGen4.Take(4).Concat(MetGen4.Skip(4).OrderByDescending(loc => loc.Value <= 125)).ToList(); // Rock Peak Ruins                      break;                    case GameVersion.HG:                  case GameVersion.SS:                      if (currentGen == 4 || (currentGen >= 5 && egg))                          return MetGen4.Take(4).Concat(MetGen4.Skip(4).OrderByDescending(loc => loc.Value > 125 && loc.Value < 234)).ToList(); // Celadon Dept.                      break;                    case GameVersion.B:                  case GameVersion.W:                      return MetGen5;                    case GameVersion.B2:                  case GameVersion.W2:                      return MetGen5.Take(3).Concat(MetGen5.Skip(3).OrderByDescending(loc => loc.Value <= 116)).ToList(); // Abyssal Ruins                    case GameVersion.X:                  case GameVersion.Y:                      return MetGen6.Take(3).Concat(MetGen6.Skip(3).OrderByDescending(loc => loc.Value <= 168)).ToList(); // Unknown Dungeon                    case GameVersion.OR:                  case GameVersion.AS:                      return MetGen6.Take(3).Concat(MetGen6.Skip(3).OrderByDescending(loc => loc.Value > 168 && loc.Value <= 354)).ToList(); // Secret Base                    case GameVersion.SN:                  case GameVersion.MN:                      return MetGen7.Take(3).Concat(MetGen7.Skip(3).OrderByDescending(loc => loc.Value < 200)).ToList(); // Outer Cape                    case GameVersion.US:                  case GameVersion.UM:                    case GameVersion.RD:                  case GameVersion.BU:                  case GameVersion.GN:                  case GameVersion.YW:                    case GameVersion.GD:                  case GameVersion.SV:                  case GameVersion.C:                      return MetGen7.Take(3).Concat(MetGen7.Skip(3).OrderByDescending(loc => loc.Value < 234)).ToList(); // Dividing Peak Tunnel                    case GameVersion.GP:                  case GameVersion.GE:                  case GameVersion.GO:                      return MetGen7GG.Take(3).Concat(MetGen7GG.Skip(3).OrderByDescending(loc => loc.Value <= 54)).ToList(); // Pokémon League                    case GameVersion.SW:                  case GameVersion.SH:                      return MetGen8.Take(3).Concat(MetGen8.Skip(3).OrderByDescending(loc => loc.Value < 400)).ToList(); // todo              }
Magic Number,PKHeX.Core,GameDataSource,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameDataSource.cs,GetLocationList,The following statement contains a magic number: switch (version)              {                  case GameVersion.CXD:                      if (currentGen == 3)                          return MetGen3CXD;                      break;                    case GameVersion.R:                  case GameVersion.S:                      if (currentGen == 3)                          return MetGen3.OrderByDescending(loc => loc.Value <= 87).ToList(); // Ferry                      break;                  case GameVersion.E:                      if (currentGen == 3)                          return MetGen3.OrderByDescending(loc => loc.Value <= 87 || (loc.Value >= 196 && loc.Value <= 212)).ToList(); // Trainer Hill                      break;                  case GameVersion.FR:                  case GameVersion.LG:                      if (currentGen == 3)                          return MetGen3.OrderByDescending(loc => loc.Value > 87 && loc.Value < 197).ToList(); // Celadon Dept.                      break;                    case GameVersion.D:                  case GameVersion.P:                      if (currentGen == 4 || (currentGen >= 5 && egg))                          return MetGen4.Take(4).Concat(MetGen4.Skip(4).OrderByDescending(loc => loc.Value <= 111)).ToList(); // Battle Park                      break;                    case GameVersion.Pt:                      if (currentGen == 4 || (currentGen >= 5 && egg))                          return MetGen4.Take(4).Concat(MetGen4.Skip(4).OrderByDescending(loc => loc.Value <= 125)).ToList(); // Rock Peak Ruins                      break;                    case GameVersion.HG:                  case GameVersion.SS:                      if (currentGen == 4 || (currentGen >= 5 && egg))                          return MetGen4.Take(4).Concat(MetGen4.Skip(4).OrderByDescending(loc => loc.Value > 125 && loc.Value < 234)).ToList(); // Celadon Dept.                      break;                    case GameVersion.B:                  case GameVersion.W:                      return MetGen5;                    case GameVersion.B2:                  case GameVersion.W2:                      return MetGen5.Take(3).Concat(MetGen5.Skip(3).OrderByDescending(loc => loc.Value <= 116)).ToList(); // Abyssal Ruins                    case GameVersion.X:                  case GameVersion.Y:                      return MetGen6.Take(3).Concat(MetGen6.Skip(3).OrderByDescending(loc => loc.Value <= 168)).ToList(); // Unknown Dungeon                    case GameVersion.OR:                  case GameVersion.AS:                      return MetGen6.Take(3).Concat(MetGen6.Skip(3).OrderByDescending(loc => loc.Value > 168 && loc.Value <= 354)).ToList(); // Secret Base                    case GameVersion.SN:                  case GameVersion.MN:                      return MetGen7.Take(3).Concat(MetGen7.Skip(3).OrderByDescending(loc => loc.Value < 200)).ToList(); // Outer Cape                    case GameVersion.US:                  case GameVersion.UM:                    case GameVersion.RD:                  case GameVersion.BU:                  case GameVersion.GN:                  case GameVersion.YW:                    case GameVersion.GD:                  case GameVersion.SV:                  case GameVersion.C:                      return MetGen7.Take(3).Concat(MetGen7.Skip(3).OrderByDescending(loc => loc.Value < 234)).ToList(); // Dividing Peak Tunnel                    case GameVersion.GP:                  case GameVersion.GE:                  case GameVersion.GO:                      return MetGen7GG.Take(3).Concat(MetGen7GG.Skip(3).OrderByDescending(loc => loc.Value <= 54)).ToList(); // Pokémon League                    case GameVersion.SW:                  case GameVersion.SH:                      return MetGen8.Take(3).Concat(MetGen8.Skip(3).OrderByDescending(loc => loc.Value < 400)).ToList(); // todo              }
Magic Number,PKHeX.Core,GameDataSource,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameDataSource.cs,GetLocationList,The following statement contains a magic number: switch (version)              {                  case GameVersion.CXD:                      if (currentGen == 3)                          return MetGen3CXD;                      break;                    case GameVersion.R:                  case GameVersion.S:                      if (currentGen == 3)                          return MetGen3.OrderByDescending(loc => loc.Value <= 87).ToList(); // Ferry                      break;                  case GameVersion.E:                      if (currentGen == 3)                          return MetGen3.OrderByDescending(loc => loc.Value <= 87 || (loc.Value >= 196 && loc.Value <= 212)).ToList(); // Trainer Hill                      break;                  case GameVersion.FR:                  case GameVersion.LG:                      if (currentGen == 3)                          return MetGen3.OrderByDescending(loc => loc.Value > 87 && loc.Value < 197).ToList(); // Celadon Dept.                      break;                    case GameVersion.D:                  case GameVersion.P:                      if (currentGen == 4 || (currentGen >= 5 && egg))                          return MetGen4.Take(4).Concat(MetGen4.Skip(4).OrderByDescending(loc => loc.Value <= 111)).ToList(); // Battle Park                      break;                    case GameVersion.Pt:                      if (currentGen == 4 || (currentGen >= 5 && egg))                          return MetGen4.Take(4).Concat(MetGen4.Skip(4).OrderByDescending(loc => loc.Value <= 125)).ToList(); // Rock Peak Ruins                      break;                    case GameVersion.HG:                  case GameVersion.SS:                      if (currentGen == 4 || (currentGen >= 5 && egg))                          return MetGen4.Take(4).Concat(MetGen4.Skip(4).OrderByDescending(loc => loc.Value > 125 && loc.Value < 234)).ToList(); // Celadon Dept.                      break;                    case GameVersion.B:                  case GameVersion.W:                      return MetGen5;                    case GameVersion.B2:                  case GameVersion.W2:                      return MetGen5.Take(3).Concat(MetGen5.Skip(3).OrderByDescending(loc => loc.Value <= 116)).ToList(); // Abyssal Ruins                    case GameVersion.X:                  case GameVersion.Y:                      return MetGen6.Take(3).Concat(MetGen6.Skip(3).OrderByDescending(loc => loc.Value <= 168)).ToList(); // Unknown Dungeon                    case GameVersion.OR:                  case GameVersion.AS:                      return MetGen6.Take(3).Concat(MetGen6.Skip(3).OrderByDescending(loc => loc.Value > 168 && loc.Value <= 354)).ToList(); // Secret Base                    case GameVersion.SN:                  case GameVersion.MN:                      return MetGen7.Take(3).Concat(MetGen7.Skip(3).OrderByDescending(loc => loc.Value < 200)).ToList(); // Outer Cape                    case GameVersion.US:                  case GameVersion.UM:                    case GameVersion.RD:                  case GameVersion.BU:                  case GameVersion.GN:                  case GameVersion.YW:                    case GameVersion.GD:                  case GameVersion.SV:                  case GameVersion.C:                      return MetGen7.Take(3).Concat(MetGen7.Skip(3).OrderByDescending(loc => loc.Value < 234)).ToList(); // Dividing Peak Tunnel                    case GameVersion.GP:                  case GameVersion.GE:                  case GameVersion.GO:                      return MetGen7GG.Take(3).Concat(MetGen7GG.Skip(3).OrderByDescending(loc => loc.Value <= 54)).ToList(); // Pokémon League                    case GameVersion.SW:                  case GameVersion.SH:                      return MetGen8.Take(3).Concat(MetGen8.Skip(3).OrderByDescending(loc => loc.Value < 400)).ToList(); // todo              }
Magic Number,PKHeX.Core,GameDataSource,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameDataSource.cs,GetLocationList,The following statement contains a magic number: switch (version)              {                  case GameVersion.CXD:                      if (currentGen == 3)                          return MetGen3CXD;                      break;                    case GameVersion.R:                  case GameVersion.S:                      if (currentGen == 3)                          return MetGen3.OrderByDescending(loc => loc.Value <= 87).ToList(); // Ferry                      break;                  case GameVersion.E:                      if (currentGen == 3)                          return MetGen3.OrderByDescending(loc => loc.Value <= 87 || (loc.Value >= 196 && loc.Value <= 212)).ToList(); // Trainer Hill                      break;                  case GameVersion.FR:                  case GameVersion.LG:                      if (currentGen == 3)                          return MetGen3.OrderByDescending(loc => loc.Value > 87 && loc.Value < 197).ToList(); // Celadon Dept.                      break;                    case GameVersion.D:                  case GameVersion.P:                      if (currentGen == 4 || (currentGen >= 5 && egg))                          return MetGen4.Take(4).Concat(MetGen4.Skip(4).OrderByDescending(loc => loc.Value <= 111)).ToList(); // Battle Park                      break;                    case GameVersion.Pt:                      if (currentGen == 4 || (currentGen >= 5 && egg))                          return MetGen4.Take(4).Concat(MetGen4.Skip(4).OrderByDescending(loc => loc.Value <= 125)).ToList(); // Rock Peak Ruins                      break;                    case GameVersion.HG:                  case GameVersion.SS:                      if (currentGen == 4 || (currentGen >= 5 && egg))                          return MetGen4.Take(4).Concat(MetGen4.Skip(4).OrderByDescending(loc => loc.Value > 125 && loc.Value < 234)).ToList(); // Celadon Dept.                      break;                    case GameVersion.B:                  case GameVersion.W:                      return MetGen5;                    case GameVersion.B2:                  case GameVersion.W2:                      return MetGen5.Take(3).Concat(MetGen5.Skip(3).OrderByDescending(loc => loc.Value <= 116)).ToList(); // Abyssal Ruins                    case GameVersion.X:                  case GameVersion.Y:                      return MetGen6.Take(3).Concat(MetGen6.Skip(3).OrderByDescending(loc => loc.Value <= 168)).ToList(); // Unknown Dungeon                    case GameVersion.OR:                  case GameVersion.AS:                      return MetGen6.Take(3).Concat(MetGen6.Skip(3).OrderByDescending(loc => loc.Value > 168 && loc.Value <= 354)).ToList(); // Secret Base                    case GameVersion.SN:                  case GameVersion.MN:                      return MetGen7.Take(3).Concat(MetGen7.Skip(3).OrderByDescending(loc => loc.Value < 200)).ToList(); // Outer Cape                    case GameVersion.US:                  case GameVersion.UM:                    case GameVersion.RD:                  case GameVersion.BU:                  case GameVersion.GN:                  case GameVersion.YW:                    case GameVersion.GD:                  case GameVersion.SV:                  case GameVersion.C:                      return MetGen7.Take(3).Concat(MetGen7.Skip(3).OrderByDescending(loc => loc.Value < 234)).ToList(); // Dividing Peak Tunnel                    case GameVersion.GP:                  case GameVersion.GE:                  case GameVersion.GO:                      return MetGen7GG.Take(3).Concat(MetGen7GG.Skip(3).OrderByDescending(loc => loc.Value <= 54)).ToList(); // Pokémon League                    case GameVersion.SW:                  case GameVersion.SH:                      return MetGen8.Take(3).Concat(MetGen8.Skip(3).OrderByDescending(loc => loc.Value < 400)).ToList(); // todo              }
Magic Number,PKHeX.Core,GameDataSource,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameDataSource.cs,GetLocationList,The following statement contains a magic number: switch (version)              {                  case GameVersion.CXD:                      if (currentGen == 3)                          return MetGen3CXD;                      break;                    case GameVersion.R:                  case GameVersion.S:                      if (currentGen == 3)                          return MetGen3.OrderByDescending(loc => loc.Value <= 87).ToList(); // Ferry                      break;                  case GameVersion.E:                      if (currentGen == 3)                          return MetGen3.OrderByDescending(loc => loc.Value <= 87 || (loc.Value >= 196 && loc.Value <= 212)).ToList(); // Trainer Hill                      break;                  case GameVersion.FR:                  case GameVersion.LG:                      if (currentGen == 3)                          return MetGen3.OrderByDescending(loc => loc.Value > 87 && loc.Value < 197).ToList(); // Celadon Dept.                      break;                    case GameVersion.D:                  case GameVersion.P:                      if (currentGen == 4 || (currentGen >= 5 && egg))                          return MetGen4.Take(4).Concat(MetGen4.Skip(4).OrderByDescending(loc => loc.Value <= 111)).ToList(); // Battle Park                      break;                    case GameVersion.Pt:                      if (currentGen == 4 || (currentGen >= 5 && egg))                          return MetGen4.Take(4).Concat(MetGen4.Skip(4).OrderByDescending(loc => loc.Value <= 125)).ToList(); // Rock Peak Ruins                      break;                    case GameVersion.HG:                  case GameVersion.SS:                      if (currentGen == 4 || (currentGen >= 5 && egg))                          return MetGen4.Take(4).Concat(MetGen4.Skip(4).OrderByDescending(loc => loc.Value > 125 && loc.Value < 234)).ToList(); // Celadon Dept.                      break;                    case GameVersion.B:                  case GameVersion.W:                      return MetGen5;                    case GameVersion.B2:                  case GameVersion.W2:                      return MetGen5.Take(3).Concat(MetGen5.Skip(3).OrderByDescending(loc => loc.Value <= 116)).ToList(); // Abyssal Ruins                    case GameVersion.X:                  case GameVersion.Y:                      return MetGen6.Take(3).Concat(MetGen6.Skip(3).OrderByDescending(loc => loc.Value <= 168)).ToList(); // Unknown Dungeon                    case GameVersion.OR:                  case GameVersion.AS:                      return MetGen6.Take(3).Concat(MetGen6.Skip(3).OrderByDescending(loc => loc.Value > 168 && loc.Value <= 354)).ToList(); // Secret Base                    case GameVersion.SN:                  case GameVersion.MN:                      return MetGen7.Take(3).Concat(MetGen7.Skip(3).OrderByDescending(loc => loc.Value < 200)).ToList(); // Outer Cape                    case GameVersion.US:                  case GameVersion.UM:                    case GameVersion.RD:                  case GameVersion.BU:                  case GameVersion.GN:                  case GameVersion.YW:                    case GameVersion.GD:                  case GameVersion.SV:                  case GameVersion.C:                      return MetGen7.Take(3).Concat(MetGen7.Skip(3).OrderByDescending(loc => loc.Value < 234)).ToList(); // Dividing Peak Tunnel                    case GameVersion.GP:                  case GameVersion.GE:                  case GameVersion.GO:                      return MetGen7GG.Take(3).Concat(MetGen7GG.Skip(3).OrderByDescending(loc => loc.Value <= 54)).ToList(); // Pokémon League                    case GameVersion.SW:                  case GameVersion.SH:                      return MetGen8.Take(3).Concat(MetGen8.Skip(3).OrderByDescending(loc => loc.Value < 400)).ToList(); // todo              }
Magic Number,PKHeX.Core,GameDataSource,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameDataSource.cs,GetLocationList,The following statement contains a magic number: switch (version)              {                  case GameVersion.CXD:                      if (currentGen == 3)                          return MetGen3CXD;                      break;                    case GameVersion.R:                  case GameVersion.S:                      if (currentGen == 3)                          return MetGen3.OrderByDescending(loc => loc.Value <= 87).ToList(); // Ferry                      break;                  case GameVersion.E:                      if (currentGen == 3)                          return MetGen3.OrderByDescending(loc => loc.Value <= 87 || (loc.Value >= 196 && loc.Value <= 212)).ToList(); // Trainer Hill                      break;                  case GameVersion.FR:                  case GameVersion.LG:                      if (currentGen == 3)                          return MetGen3.OrderByDescending(loc => loc.Value > 87 && loc.Value < 197).ToList(); // Celadon Dept.                      break;                    case GameVersion.D:                  case GameVersion.P:                      if (currentGen == 4 || (currentGen >= 5 && egg))                          return MetGen4.Take(4).Concat(MetGen4.Skip(4).OrderByDescending(loc => loc.Value <= 111)).ToList(); // Battle Park                      break;                    case GameVersion.Pt:                      if (currentGen == 4 || (currentGen >= 5 && egg))                          return MetGen4.Take(4).Concat(MetGen4.Skip(4).OrderByDescending(loc => loc.Value <= 125)).ToList(); // Rock Peak Ruins                      break;                    case GameVersion.HG:                  case GameVersion.SS:                      if (currentGen == 4 || (currentGen >= 5 && egg))                          return MetGen4.Take(4).Concat(MetGen4.Skip(4).OrderByDescending(loc => loc.Value > 125 && loc.Value < 234)).ToList(); // Celadon Dept.                      break;                    case GameVersion.B:                  case GameVersion.W:                      return MetGen5;                    case GameVersion.B2:                  case GameVersion.W2:                      return MetGen5.Take(3).Concat(MetGen5.Skip(3).OrderByDescending(loc => loc.Value <= 116)).ToList(); // Abyssal Ruins                    case GameVersion.X:                  case GameVersion.Y:                      return MetGen6.Take(3).Concat(MetGen6.Skip(3).OrderByDescending(loc => loc.Value <= 168)).ToList(); // Unknown Dungeon                    case GameVersion.OR:                  case GameVersion.AS:                      return MetGen6.Take(3).Concat(MetGen6.Skip(3).OrderByDescending(loc => loc.Value > 168 && loc.Value <= 354)).ToList(); // Secret Base                    case GameVersion.SN:                  case GameVersion.MN:                      return MetGen7.Take(3).Concat(MetGen7.Skip(3).OrderByDescending(loc => loc.Value < 200)).ToList(); // Outer Cape                    case GameVersion.US:                  case GameVersion.UM:                    case GameVersion.RD:                  case GameVersion.BU:                  case GameVersion.GN:                  case GameVersion.YW:                    case GameVersion.GD:                  case GameVersion.SV:                  case GameVersion.C:                      return MetGen7.Take(3).Concat(MetGen7.Skip(3).OrderByDescending(loc => loc.Value < 234)).ToList(); // Dividing Peak Tunnel                    case GameVersion.GP:                  case GameVersion.GE:                  case GameVersion.GO:                      return MetGen7GG.Take(3).Concat(MetGen7GG.Skip(3).OrderByDescending(loc => loc.Value <= 54)).ToList(); // Pokémon League                    case GameVersion.SW:                  case GameVersion.SH:                      return MetGen8.Take(3).Concat(MetGen8.Skip(3).OrderByDescending(loc => loc.Value < 400)).ToList(); // todo              }
Magic Number,PKHeX.Core,GameDataSource,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameDataSource.cs,GetLocationList,The following statement contains a magic number: switch (version)              {                  case GameVersion.CXD:                      if (currentGen == 3)                          return MetGen3CXD;                      break;                    case GameVersion.R:                  case GameVersion.S:                      if (currentGen == 3)                          return MetGen3.OrderByDescending(loc => loc.Value <= 87).ToList(); // Ferry                      break;                  case GameVersion.E:                      if (currentGen == 3)                          return MetGen3.OrderByDescending(loc => loc.Value <= 87 || (loc.Value >= 196 && loc.Value <= 212)).ToList(); // Trainer Hill                      break;                  case GameVersion.FR:                  case GameVersion.LG:                      if (currentGen == 3)                          return MetGen3.OrderByDescending(loc => loc.Value > 87 && loc.Value < 197).ToList(); // Celadon Dept.                      break;                    case GameVersion.D:                  case GameVersion.P:                      if (currentGen == 4 || (currentGen >= 5 && egg))                          return MetGen4.Take(4).Concat(MetGen4.Skip(4).OrderByDescending(loc => loc.Value <= 111)).ToList(); // Battle Park                      break;                    case GameVersion.Pt:                      if (currentGen == 4 || (currentGen >= 5 && egg))                          return MetGen4.Take(4).Concat(MetGen4.Skip(4).OrderByDescending(loc => loc.Value <= 125)).ToList(); // Rock Peak Ruins                      break;                    case GameVersion.HG:                  case GameVersion.SS:                      if (currentGen == 4 || (currentGen >= 5 && egg))                          return MetGen4.Take(4).Concat(MetGen4.Skip(4).OrderByDescending(loc => loc.Value > 125 && loc.Value < 234)).ToList(); // Celadon Dept.                      break;                    case GameVersion.B:                  case GameVersion.W:                      return MetGen5;                    case GameVersion.B2:                  case GameVersion.W2:                      return MetGen5.Take(3).Concat(MetGen5.Skip(3).OrderByDescending(loc => loc.Value <= 116)).ToList(); // Abyssal Ruins                    case GameVersion.X:                  case GameVersion.Y:                      return MetGen6.Take(3).Concat(MetGen6.Skip(3).OrderByDescending(loc => loc.Value <= 168)).ToList(); // Unknown Dungeon                    case GameVersion.OR:                  case GameVersion.AS:                      return MetGen6.Take(3).Concat(MetGen6.Skip(3).OrderByDescending(loc => loc.Value > 168 && loc.Value <= 354)).ToList(); // Secret Base                    case GameVersion.SN:                  case GameVersion.MN:                      return MetGen7.Take(3).Concat(MetGen7.Skip(3).OrderByDescending(loc => loc.Value < 200)).ToList(); // Outer Cape                    case GameVersion.US:                  case GameVersion.UM:                    case GameVersion.RD:                  case GameVersion.BU:                  case GameVersion.GN:                  case GameVersion.YW:                    case GameVersion.GD:                  case GameVersion.SV:                  case GameVersion.C:                      return MetGen7.Take(3).Concat(MetGen7.Skip(3).OrderByDescending(loc => loc.Value < 234)).ToList(); // Dividing Peak Tunnel                    case GameVersion.GP:                  case GameVersion.GE:                  case GameVersion.GO:                      return MetGen7GG.Take(3).Concat(MetGen7GG.Skip(3).OrderByDescending(loc => loc.Value <= 54)).ToList(); // Pokémon League                    case GameVersion.SW:                  case GameVersion.SH:                      return MetGen8.Take(3).Concat(MetGen8.Skip(3).OrderByDescending(loc => loc.Value < 400)).ToList(); // todo              }
Magic Number,PKHeX.Core,GameDataSource,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameDataSource.cs,GetLocationList,The following statement contains a magic number: switch (version)              {                  case GameVersion.CXD:                      if (currentGen == 3)                          return MetGen3CXD;                      break;                    case GameVersion.R:                  case GameVersion.S:                      if (currentGen == 3)                          return MetGen3.OrderByDescending(loc => loc.Value <= 87).ToList(); // Ferry                      break;                  case GameVersion.E:                      if (currentGen == 3)                          return MetGen3.OrderByDescending(loc => loc.Value <= 87 || (loc.Value >= 196 && loc.Value <= 212)).ToList(); // Trainer Hill                      break;                  case GameVersion.FR:                  case GameVersion.LG:                      if (currentGen == 3)                          return MetGen3.OrderByDescending(loc => loc.Value > 87 && loc.Value < 197).ToList(); // Celadon Dept.                      break;                    case GameVersion.D:                  case GameVersion.P:                      if (currentGen == 4 || (currentGen >= 5 && egg))                          return MetGen4.Take(4).Concat(MetGen4.Skip(4).OrderByDescending(loc => loc.Value <= 111)).ToList(); // Battle Park                      break;                    case GameVersion.Pt:                      if (currentGen == 4 || (currentGen >= 5 && egg))                          return MetGen4.Take(4).Concat(MetGen4.Skip(4).OrderByDescending(loc => loc.Value <= 125)).ToList(); // Rock Peak Ruins                      break;                    case GameVersion.HG:                  case GameVersion.SS:                      if (currentGen == 4 || (currentGen >= 5 && egg))                          return MetGen4.Take(4).Concat(MetGen4.Skip(4).OrderByDescending(loc => loc.Value > 125 && loc.Value < 234)).ToList(); // Celadon Dept.                      break;                    case GameVersion.B:                  case GameVersion.W:                      return MetGen5;                    case GameVersion.B2:                  case GameVersion.W2:                      return MetGen5.Take(3).Concat(MetGen5.Skip(3).OrderByDescending(loc => loc.Value <= 116)).ToList(); // Abyssal Ruins                    case GameVersion.X:                  case GameVersion.Y:                      return MetGen6.Take(3).Concat(MetGen6.Skip(3).OrderByDescending(loc => loc.Value <= 168)).ToList(); // Unknown Dungeon                    case GameVersion.OR:                  case GameVersion.AS:                      return MetGen6.Take(3).Concat(MetGen6.Skip(3).OrderByDescending(loc => loc.Value > 168 && loc.Value <= 354)).ToList(); // Secret Base                    case GameVersion.SN:                  case GameVersion.MN:                      return MetGen7.Take(3).Concat(MetGen7.Skip(3).OrderByDescending(loc => loc.Value < 200)).ToList(); // Outer Cape                    case GameVersion.US:                  case GameVersion.UM:                    case GameVersion.RD:                  case GameVersion.BU:                  case GameVersion.GN:                  case GameVersion.YW:                    case GameVersion.GD:                  case GameVersion.SV:                  case GameVersion.C:                      return MetGen7.Take(3).Concat(MetGen7.Skip(3).OrderByDescending(loc => loc.Value < 234)).ToList(); // Dividing Peak Tunnel                    case GameVersion.GP:                  case GameVersion.GE:                  case GameVersion.GO:                      return MetGen7GG.Take(3).Concat(MetGen7GG.Skip(3).OrderByDescending(loc => loc.Value <= 54)).ToList(); // Pokémon League                    case GameVersion.SW:                  case GameVersion.SH:                      return MetGen8.Take(3).Concat(MetGen8.Skip(3).OrderByDescending(loc => loc.Value < 400)).ToList(); // todo              }
Magic Number,PKHeX.Core,GameDataSource,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameDataSource.cs,GetLocationList,The following statement contains a magic number: switch (version)              {                  case GameVersion.CXD:                      if (currentGen == 3)                          return MetGen3CXD;                      break;                    case GameVersion.R:                  case GameVersion.S:                      if (currentGen == 3)                          return MetGen3.OrderByDescending(loc => loc.Value <= 87).ToList(); // Ferry                      break;                  case GameVersion.E:                      if (currentGen == 3)                          return MetGen3.OrderByDescending(loc => loc.Value <= 87 || (loc.Value >= 196 && loc.Value <= 212)).ToList(); // Trainer Hill                      break;                  case GameVersion.FR:                  case GameVersion.LG:                      if (currentGen == 3)                          return MetGen3.OrderByDescending(loc => loc.Value > 87 && loc.Value < 197).ToList(); // Celadon Dept.                      break;                    case GameVersion.D:                  case GameVersion.P:                      if (currentGen == 4 || (currentGen >= 5 && egg))                          return MetGen4.Take(4).Concat(MetGen4.Skip(4).OrderByDescending(loc => loc.Value <= 111)).ToList(); // Battle Park                      break;                    case GameVersion.Pt:                      if (currentGen == 4 || (currentGen >= 5 && egg))                          return MetGen4.Take(4).Concat(MetGen4.Skip(4).OrderByDescending(loc => loc.Value <= 125)).ToList(); // Rock Peak Ruins                      break;                    case GameVersion.HG:                  case GameVersion.SS:                      if (currentGen == 4 || (currentGen >= 5 && egg))                          return MetGen4.Take(4).Concat(MetGen4.Skip(4).OrderByDescending(loc => loc.Value > 125 && loc.Value < 234)).ToList(); // Celadon Dept.                      break;                    case GameVersion.B:                  case GameVersion.W:                      return MetGen5;                    case GameVersion.B2:                  case GameVersion.W2:                      return MetGen5.Take(3).Concat(MetGen5.Skip(3).OrderByDescending(loc => loc.Value <= 116)).ToList(); // Abyssal Ruins                    case GameVersion.X:                  case GameVersion.Y:                      return MetGen6.Take(3).Concat(MetGen6.Skip(3).OrderByDescending(loc => loc.Value <= 168)).ToList(); // Unknown Dungeon                    case GameVersion.OR:                  case GameVersion.AS:                      return MetGen6.Take(3).Concat(MetGen6.Skip(3).OrderByDescending(loc => loc.Value > 168 && loc.Value <= 354)).ToList(); // Secret Base                    case GameVersion.SN:                  case GameVersion.MN:                      return MetGen7.Take(3).Concat(MetGen7.Skip(3).OrderByDescending(loc => loc.Value < 200)).ToList(); // Outer Cape                    case GameVersion.US:                  case GameVersion.UM:                    case GameVersion.RD:                  case GameVersion.BU:                  case GameVersion.GN:                  case GameVersion.YW:                    case GameVersion.GD:                  case GameVersion.SV:                  case GameVersion.C:                      return MetGen7.Take(3).Concat(MetGen7.Skip(3).OrderByDescending(loc => loc.Value < 234)).ToList(); // Dividing Peak Tunnel                    case GameVersion.GP:                  case GameVersion.GE:                  case GameVersion.GO:                      return MetGen7GG.Take(3).Concat(MetGen7GG.Skip(3).OrderByDescending(loc => loc.Value <= 54)).ToList(); // Pokémon League                    case GameVersion.SW:                  case GameVersion.SH:                      return MetGen8.Take(3).Concat(MetGen8.Skip(3).OrderByDescending(loc => loc.Value < 400)).ToList(); // todo              }
Magic Number,PKHeX.Core,GameDataSource,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameDataSource.cs,GetLocationList,The following statement contains a magic number: switch (version)              {                  case GameVersion.CXD:                      if (currentGen == 3)                          return MetGen3CXD;                      break;                    case GameVersion.R:                  case GameVersion.S:                      if (currentGen == 3)                          return MetGen3.OrderByDescending(loc => loc.Value <= 87).ToList(); // Ferry                      break;                  case GameVersion.E:                      if (currentGen == 3)                          return MetGen3.OrderByDescending(loc => loc.Value <= 87 || (loc.Value >= 196 && loc.Value <= 212)).ToList(); // Trainer Hill                      break;                  case GameVersion.FR:                  case GameVersion.LG:                      if (currentGen == 3)                          return MetGen3.OrderByDescending(loc => loc.Value > 87 && loc.Value < 197).ToList(); // Celadon Dept.                      break;                    case GameVersion.D:                  case GameVersion.P:                      if (currentGen == 4 || (currentGen >= 5 && egg))                          return MetGen4.Take(4).Concat(MetGen4.Skip(4).OrderByDescending(loc => loc.Value <= 111)).ToList(); // Battle Park                      break;                    case GameVersion.Pt:                      if (currentGen == 4 || (currentGen >= 5 && egg))                          return MetGen4.Take(4).Concat(MetGen4.Skip(4).OrderByDescending(loc => loc.Value <= 125)).ToList(); // Rock Peak Ruins                      break;                    case GameVersion.HG:                  case GameVersion.SS:                      if (currentGen == 4 || (currentGen >= 5 && egg))                          return MetGen4.Take(4).Concat(MetGen4.Skip(4).OrderByDescending(loc => loc.Value > 125 && loc.Value < 234)).ToList(); // Celadon Dept.                      break;                    case GameVersion.B:                  case GameVersion.W:                      return MetGen5;                    case GameVersion.B2:                  case GameVersion.W2:                      return MetGen5.Take(3).Concat(MetGen5.Skip(3).OrderByDescending(loc => loc.Value <= 116)).ToList(); // Abyssal Ruins                    case GameVersion.X:                  case GameVersion.Y:                      return MetGen6.Take(3).Concat(MetGen6.Skip(3).OrderByDescending(loc => loc.Value <= 168)).ToList(); // Unknown Dungeon                    case GameVersion.OR:                  case GameVersion.AS:                      return MetGen6.Take(3).Concat(MetGen6.Skip(3).OrderByDescending(loc => loc.Value > 168 && loc.Value <= 354)).ToList(); // Secret Base                    case GameVersion.SN:                  case GameVersion.MN:                      return MetGen7.Take(3).Concat(MetGen7.Skip(3).OrderByDescending(loc => loc.Value < 200)).ToList(); // Outer Cape                    case GameVersion.US:                  case GameVersion.UM:                    case GameVersion.RD:                  case GameVersion.BU:                  case GameVersion.GN:                  case GameVersion.YW:                    case GameVersion.GD:                  case GameVersion.SV:                  case GameVersion.C:                      return MetGen7.Take(3).Concat(MetGen7.Skip(3).OrderByDescending(loc => loc.Value < 234)).ToList(); // Dividing Peak Tunnel                    case GameVersion.GP:                  case GameVersion.GE:                  case GameVersion.GO:                      return MetGen7GG.Take(3).Concat(MetGen7GG.Skip(3).OrderByDescending(loc => loc.Value <= 54)).ToList(); // Pokémon League                    case GameVersion.SW:                  case GameVersion.SH:                      return MetGen8.Take(3).Concat(MetGen8.Skip(3).OrderByDescending(loc => loc.Value < 400)).ToList(); // todo              }
Magic Number,PKHeX.Core,GameDataSource,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameDataSource.cs,GetLocationList,The following statement contains a magic number: switch (version)              {                  case GameVersion.CXD:                      if (currentGen == 3)                          return MetGen3CXD;                      break;                    case GameVersion.R:                  case GameVersion.S:                      if (currentGen == 3)                          return MetGen3.OrderByDescending(loc => loc.Value <= 87).ToList(); // Ferry                      break;                  case GameVersion.E:                      if (currentGen == 3)                          return MetGen3.OrderByDescending(loc => loc.Value <= 87 || (loc.Value >= 196 && loc.Value <= 212)).ToList(); // Trainer Hill                      break;                  case GameVersion.FR:                  case GameVersion.LG:                      if (currentGen == 3)                          return MetGen3.OrderByDescending(loc => loc.Value > 87 && loc.Value < 197).ToList(); // Celadon Dept.                      break;                    case GameVersion.D:                  case GameVersion.P:                      if (currentGen == 4 || (currentGen >= 5 && egg))                          return MetGen4.Take(4).Concat(MetGen4.Skip(4).OrderByDescending(loc => loc.Value <= 111)).ToList(); // Battle Park                      break;                    case GameVersion.Pt:                      if (currentGen == 4 || (currentGen >= 5 && egg))                          return MetGen4.Take(4).Concat(MetGen4.Skip(4).OrderByDescending(loc => loc.Value <= 125)).ToList(); // Rock Peak Ruins                      break;                    case GameVersion.HG:                  case GameVersion.SS:                      if (currentGen == 4 || (currentGen >= 5 && egg))                          return MetGen4.Take(4).Concat(MetGen4.Skip(4).OrderByDescending(loc => loc.Value > 125 && loc.Value < 234)).ToList(); // Celadon Dept.                      break;                    case GameVersion.B:                  case GameVersion.W:                      return MetGen5;                    case GameVersion.B2:                  case GameVersion.W2:                      return MetGen5.Take(3).Concat(MetGen5.Skip(3).OrderByDescending(loc => loc.Value <= 116)).ToList(); // Abyssal Ruins                    case GameVersion.X:                  case GameVersion.Y:                      return MetGen6.Take(3).Concat(MetGen6.Skip(3).OrderByDescending(loc => loc.Value <= 168)).ToList(); // Unknown Dungeon                    case GameVersion.OR:                  case GameVersion.AS:                      return MetGen6.Take(3).Concat(MetGen6.Skip(3).OrderByDescending(loc => loc.Value > 168 && loc.Value <= 354)).ToList(); // Secret Base                    case GameVersion.SN:                  case GameVersion.MN:                      return MetGen7.Take(3).Concat(MetGen7.Skip(3).OrderByDescending(loc => loc.Value < 200)).ToList(); // Outer Cape                    case GameVersion.US:                  case GameVersion.UM:                    case GameVersion.RD:                  case GameVersion.BU:                  case GameVersion.GN:                  case GameVersion.YW:                    case GameVersion.GD:                  case GameVersion.SV:                  case GameVersion.C:                      return MetGen7.Take(3).Concat(MetGen7.Skip(3).OrderByDescending(loc => loc.Value < 234)).ToList(); // Dividing Peak Tunnel                    case GameVersion.GP:                  case GameVersion.GE:                  case GameVersion.GO:                      return MetGen7GG.Take(3).Concat(MetGen7GG.Skip(3).OrderByDescending(loc => loc.Value <= 54)).ToList(); // Pokémon League                    case GameVersion.SW:                  case GameVersion.SH:                      return MetGen8.Take(3).Concat(MetGen8.Skip(3).OrderByDescending(loc => loc.Value < 400)).ToList(); // todo              }
Magic Number,PKHeX.Core,GameDataSource,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameDataSource.cs,GetLocationList,The following statement contains a magic number: switch (version)              {                  case GameVersion.CXD:                      if (currentGen == 3)                          return MetGen3CXD;                      break;                    case GameVersion.R:                  case GameVersion.S:                      if (currentGen == 3)                          return MetGen3.OrderByDescending(loc => loc.Value <= 87).ToList(); // Ferry                      break;                  case GameVersion.E:                      if (currentGen == 3)                          return MetGen3.OrderByDescending(loc => loc.Value <= 87 || (loc.Value >= 196 && loc.Value <= 212)).ToList(); // Trainer Hill                      break;                  case GameVersion.FR:                  case GameVersion.LG:                      if (currentGen == 3)                          return MetGen3.OrderByDescending(loc => loc.Value > 87 && loc.Value < 197).ToList(); // Celadon Dept.                      break;                    case GameVersion.D:                  case GameVersion.P:                      if (currentGen == 4 || (currentGen >= 5 && egg))                          return MetGen4.Take(4).Concat(MetGen4.Skip(4).OrderByDescending(loc => loc.Value <= 111)).ToList(); // Battle Park                      break;                    case GameVersion.Pt:                      if (currentGen == 4 || (currentGen >= 5 && egg))                          return MetGen4.Take(4).Concat(MetGen4.Skip(4).OrderByDescending(loc => loc.Value <= 125)).ToList(); // Rock Peak Ruins                      break;                    case GameVersion.HG:                  case GameVersion.SS:                      if (currentGen == 4 || (currentGen >= 5 && egg))                          return MetGen4.Take(4).Concat(MetGen4.Skip(4).OrderByDescending(loc => loc.Value > 125 && loc.Value < 234)).ToList(); // Celadon Dept.                      break;                    case GameVersion.B:                  case GameVersion.W:                      return MetGen5;                    case GameVersion.B2:                  case GameVersion.W2:                      return MetGen5.Take(3).Concat(MetGen5.Skip(3).OrderByDescending(loc => loc.Value <= 116)).ToList(); // Abyssal Ruins                    case GameVersion.X:                  case GameVersion.Y:                      return MetGen6.Take(3).Concat(MetGen6.Skip(3).OrderByDescending(loc => loc.Value <= 168)).ToList(); // Unknown Dungeon                    case GameVersion.OR:                  case GameVersion.AS:                      return MetGen6.Take(3).Concat(MetGen6.Skip(3).OrderByDescending(loc => loc.Value > 168 && loc.Value <= 354)).ToList(); // Secret Base                    case GameVersion.SN:                  case GameVersion.MN:                      return MetGen7.Take(3).Concat(MetGen7.Skip(3).OrderByDescending(loc => loc.Value < 200)).ToList(); // Outer Cape                    case GameVersion.US:                  case GameVersion.UM:                    case GameVersion.RD:                  case GameVersion.BU:                  case GameVersion.GN:                  case GameVersion.YW:                    case GameVersion.GD:                  case GameVersion.SV:                  case GameVersion.C:                      return MetGen7.Take(3).Concat(MetGen7.Skip(3).OrderByDescending(loc => loc.Value < 234)).ToList(); // Dividing Peak Tunnel                    case GameVersion.GP:                  case GameVersion.GE:                  case GameVersion.GO:                      return MetGen7GG.Take(3).Concat(MetGen7GG.Skip(3).OrderByDescending(loc => loc.Value <= 54)).ToList(); // Pokémon League                    case GameVersion.SW:                  case GameVersion.SH:                      return MetGen8.Take(3).Concat(MetGen8.Skip(3).OrderByDescending(loc => loc.Value < 400)).ToList(); // todo              }
Magic Number,PKHeX.Core,GameDataSource,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameDataSource.cs,GetLocationList,The following statement contains a magic number: switch (version)              {                  case GameVersion.CXD:                      if (currentGen == 3)                          return MetGen3CXD;                      break;                    case GameVersion.R:                  case GameVersion.S:                      if (currentGen == 3)                          return MetGen3.OrderByDescending(loc => loc.Value <= 87).ToList(); // Ferry                      break;                  case GameVersion.E:                      if (currentGen == 3)                          return MetGen3.OrderByDescending(loc => loc.Value <= 87 || (loc.Value >= 196 && loc.Value <= 212)).ToList(); // Trainer Hill                      break;                  case GameVersion.FR:                  case GameVersion.LG:                      if (currentGen == 3)                          return MetGen3.OrderByDescending(loc => loc.Value > 87 && loc.Value < 197).ToList(); // Celadon Dept.                      break;                    case GameVersion.D:                  case GameVersion.P:                      if (currentGen == 4 || (currentGen >= 5 && egg))                          return MetGen4.Take(4).Concat(MetGen4.Skip(4).OrderByDescending(loc => loc.Value <= 111)).ToList(); // Battle Park                      break;                    case GameVersion.Pt:                      if (currentGen == 4 || (currentGen >= 5 && egg))                          return MetGen4.Take(4).Concat(MetGen4.Skip(4).OrderByDescending(loc => loc.Value <= 125)).ToList(); // Rock Peak Ruins                      break;                    case GameVersion.HG:                  case GameVersion.SS:                      if (currentGen == 4 || (currentGen >= 5 && egg))                          return MetGen4.Take(4).Concat(MetGen4.Skip(4).OrderByDescending(loc => loc.Value > 125 && loc.Value < 234)).ToList(); // Celadon Dept.                      break;                    case GameVersion.B:                  case GameVersion.W:                      return MetGen5;                    case GameVersion.B2:                  case GameVersion.W2:                      return MetGen5.Take(3).Concat(MetGen5.Skip(3).OrderByDescending(loc => loc.Value <= 116)).ToList(); // Abyssal Ruins                    case GameVersion.X:                  case GameVersion.Y:                      return MetGen6.Take(3).Concat(MetGen6.Skip(3).OrderByDescending(loc => loc.Value <= 168)).ToList(); // Unknown Dungeon                    case GameVersion.OR:                  case GameVersion.AS:                      return MetGen6.Take(3).Concat(MetGen6.Skip(3).OrderByDescending(loc => loc.Value > 168 && loc.Value <= 354)).ToList(); // Secret Base                    case GameVersion.SN:                  case GameVersion.MN:                      return MetGen7.Take(3).Concat(MetGen7.Skip(3).OrderByDescending(loc => loc.Value < 200)).ToList(); // Outer Cape                    case GameVersion.US:                  case GameVersion.UM:                    case GameVersion.RD:                  case GameVersion.BU:                  case GameVersion.GN:                  case GameVersion.YW:                    case GameVersion.GD:                  case GameVersion.SV:                  case GameVersion.C:                      return MetGen7.Take(3).Concat(MetGen7.Skip(3).OrderByDescending(loc => loc.Value < 234)).ToList(); // Dividing Peak Tunnel                    case GameVersion.GP:                  case GameVersion.GE:                  case GameVersion.GO:                      return MetGen7GG.Take(3).Concat(MetGen7GG.Skip(3).OrderByDescending(loc => loc.Value <= 54)).ToList(); // Pokémon League                    case GameVersion.SW:                  case GameVersion.SH:                      return MetGen8.Take(3).Concat(MetGen8.Skip(3).OrderByDescending(loc => loc.Value < 400)).ToList(); // todo              }
Magic Number,PKHeX.Core,GameDataSource,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameDataSource.cs,GetLocationList,The following statement contains a magic number: switch (version)              {                  case GameVersion.CXD:                      if (currentGen == 3)                          return MetGen3CXD;                      break;                    case GameVersion.R:                  case GameVersion.S:                      if (currentGen == 3)                          return MetGen3.OrderByDescending(loc => loc.Value <= 87).ToList(); // Ferry                      break;                  case GameVersion.E:                      if (currentGen == 3)                          return MetGen3.OrderByDescending(loc => loc.Value <= 87 || (loc.Value >= 196 && loc.Value <= 212)).ToList(); // Trainer Hill                      break;                  case GameVersion.FR:                  case GameVersion.LG:                      if (currentGen == 3)                          return MetGen3.OrderByDescending(loc => loc.Value > 87 && loc.Value < 197).ToList(); // Celadon Dept.                      break;                    case GameVersion.D:                  case GameVersion.P:                      if (currentGen == 4 || (currentGen >= 5 && egg))                          return MetGen4.Take(4).Concat(MetGen4.Skip(4).OrderByDescending(loc => loc.Value <= 111)).ToList(); // Battle Park                      break;                    case GameVersion.Pt:                      if (currentGen == 4 || (currentGen >= 5 && egg))                          return MetGen4.Take(4).Concat(MetGen4.Skip(4).OrderByDescending(loc => loc.Value <= 125)).ToList(); // Rock Peak Ruins                      break;                    case GameVersion.HG:                  case GameVersion.SS:                      if (currentGen == 4 || (currentGen >= 5 && egg))                          return MetGen4.Take(4).Concat(MetGen4.Skip(4).OrderByDescending(loc => loc.Value > 125 && loc.Value < 234)).ToList(); // Celadon Dept.                      break;                    case GameVersion.B:                  case GameVersion.W:                      return MetGen5;                    case GameVersion.B2:                  case GameVersion.W2:                      return MetGen5.Take(3).Concat(MetGen5.Skip(3).OrderByDescending(loc => loc.Value <= 116)).ToList(); // Abyssal Ruins                    case GameVersion.X:                  case GameVersion.Y:                      return MetGen6.Take(3).Concat(MetGen6.Skip(3).OrderByDescending(loc => loc.Value <= 168)).ToList(); // Unknown Dungeon                    case GameVersion.OR:                  case GameVersion.AS:                      return MetGen6.Take(3).Concat(MetGen6.Skip(3).OrderByDescending(loc => loc.Value > 168 && loc.Value <= 354)).ToList(); // Secret Base                    case GameVersion.SN:                  case GameVersion.MN:                      return MetGen7.Take(3).Concat(MetGen7.Skip(3).OrderByDescending(loc => loc.Value < 200)).ToList(); // Outer Cape                    case GameVersion.US:                  case GameVersion.UM:                    case GameVersion.RD:                  case GameVersion.BU:                  case GameVersion.GN:                  case GameVersion.YW:                    case GameVersion.GD:                  case GameVersion.SV:                  case GameVersion.C:                      return MetGen7.Take(3).Concat(MetGen7.Skip(3).OrderByDescending(loc => loc.Value < 234)).ToList(); // Dividing Peak Tunnel                    case GameVersion.GP:                  case GameVersion.GE:                  case GameVersion.GO:                      return MetGen7GG.Take(3).Concat(MetGen7GG.Skip(3).OrderByDescending(loc => loc.Value <= 54)).ToList(); // Pokémon League                    case GameVersion.SW:                  case GameVersion.SH:                      return MetGen8.Take(3).Concat(MetGen8.Skip(3).OrderByDescending(loc => loc.Value < 400)).ToList(); // todo              }
Magic Number,PKHeX.Core,GameDataSource,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameDataSource.cs,GetLocationList,The following statement contains a magic number: switch (version)              {                  case GameVersion.CXD:                      if (currentGen == 3)                          return MetGen3CXD;                      break;                    case GameVersion.R:                  case GameVersion.S:                      if (currentGen == 3)                          return MetGen3.OrderByDescending(loc => loc.Value <= 87).ToList(); // Ferry                      break;                  case GameVersion.E:                      if (currentGen == 3)                          return MetGen3.OrderByDescending(loc => loc.Value <= 87 || (loc.Value >= 196 && loc.Value <= 212)).ToList(); // Trainer Hill                      break;                  case GameVersion.FR:                  case GameVersion.LG:                      if (currentGen == 3)                          return MetGen3.OrderByDescending(loc => loc.Value > 87 && loc.Value < 197).ToList(); // Celadon Dept.                      break;                    case GameVersion.D:                  case GameVersion.P:                      if (currentGen == 4 || (currentGen >= 5 && egg))                          return MetGen4.Take(4).Concat(MetGen4.Skip(4).OrderByDescending(loc => loc.Value <= 111)).ToList(); // Battle Park                      break;                    case GameVersion.Pt:                      if (currentGen == 4 || (currentGen >= 5 && egg))                          return MetGen4.Take(4).Concat(MetGen4.Skip(4).OrderByDescending(loc => loc.Value <= 125)).ToList(); // Rock Peak Ruins                      break;                    case GameVersion.HG:                  case GameVersion.SS:                      if (currentGen == 4 || (currentGen >= 5 && egg))                          return MetGen4.Take(4).Concat(MetGen4.Skip(4).OrderByDescending(loc => loc.Value > 125 && loc.Value < 234)).ToList(); // Celadon Dept.                      break;                    case GameVersion.B:                  case GameVersion.W:                      return MetGen5;                    case GameVersion.B2:                  case GameVersion.W2:                      return MetGen5.Take(3).Concat(MetGen5.Skip(3).OrderByDescending(loc => loc.Value <= 116)).ToList(); // Abyssal Ruins                    case GameVersion.X:                  case GameVersion.Y:                      return MetGen6.Take(3).Concat(MetGen6.Skip(3).OrderByDescending(loc => loc.Value <= 168)).ToList(); // Unknown Dungeon                    case GameVersion.OR:                  case GameVersion.AS:                      return MetGen6.Take(3).Concat(MetGen6.Skip(3).OrderByDescending(loc => loc.Value > 168 && loc.Value <= 354)).ToList(); // Secret Base                    case GameVersion.SN:                  case GameVersion.MN:                      return MetGen7.Take(3).Concat(MetGen7.Skip(3).OrderByDescending(loc => loc.Value < 200)).ToList(); // Outer Cape                    case GameVersion.US:                  case GameVersion.UM:                    case GameVersion.RD:                  case GameVersion.BU:                  case GameVersion.GN:                  case GameVersion.YW:                    case GameVersion.GD:                  case GameVersion.SV:                  case GameVersion.C:                      return MetGen7.Take(3).Concat(MetGen7.Skip(3).OrderByDescending(loc => loc.Value < 234)).ToList(); // Dividing Peak Tunnel                    case GameVersion.GP:                  case GameVersion.GE:                  case GameVersion.GO:                      return MetGen7GG.Take(3).Concat(MetGen7GG.Skip(3).OrderByDescending(loc => loc.Value <= 54)).ToList(); // Pokémon League                    case GameVersion.SW:                  case GameVersion.SH:                      return MetGen8.Take(3).Concat(MetGen8.Skip(3).OrderByDescending(loc => loc.Value < 400)).ToList(); // todo              }
Magic Number,PKHeX.Core,GameDataSource,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameDataSource.cs,GetLocationList,The following statement contains a magic number: switch (version)              {                  case GameVersion.CXD:                      if (currentGen == 3)                          return MetGen3CXD;                      break;                    case GameVersion.R:                  case GameVersion.S:                      if (currentGen == 3)                          return MetGen3.OrderByDescending(loc => loc.Value <= 87).ToList(); // Ferry                      break;                  case GameVersion.E:                      if (currentGen == 3)                          return MetGen3.OrderByDescending(loc => loc.Value <= 87 || (loc.Value >= 196 && loc.Value <= 212)).ToList(); // Trainer Hill                      break;                  case GameVersion.FR:                  case GameVersion.LG:                      if (currentGen == 3)                          return MetGen3.OrderByDescending(loc => loc.Value > 87 && loc.Value < 197).ToList(); // Celadon Dept.                      break;                    case GameVersion.D:                  case GameVersion.P:                      if (currentGen == 4 || (currentGen >= 5 && egg))                          return MetGen4.Take(4).Concat(MetGen4.Skip(4).OrderByDescending(loc => loc.Value <= 111)).ToList(); // Battle Park                      break;                    case GameVersion.Pt:                      if (currentGen == 4 || (currentGen >= 5 && egg))                          return MetGen4.Take(4).Concat(MetGen4.Skip(4).OrderByDescending(loc => loc.Value <= 125)).ToList(); // Rock Peak Ruins                      break;                    case GameVersion.HG:                  case GameVersion.SS:                      if (currentGen == 4 || (currentGen >= 5 && egg))                          return MetGen4.Take(4).Concat(MetGen4.Skip(4).OrderByDescending(loc => loc.Value > 125 && loc.Value < 234)).ToList(); // Celadon Dept.                      break;                    case GameVersion.B:                  case GameVersion.W:                      return MetGen5;                    case GameVersion.B2:                  case GameVersion.W2:                      return MetGen5.Take(3).Concat(MetGen5.Skip(3).OrderByDescending(loc => loc.Value <= 116)).ToList(); // Abyssal Ruins                    case GameVersion.X:                  case GameVersion.Y:                      return MetGen6.Take(3).Concat(MetGen6.Skip(3).OrderByDescending(loc => loc.Value <= 168)).ToList(); // Unknown Dungeon                    case GameVersion.OR:                  case GameVersion.AS:                      return MetGen6.Take(3).Concat(MetGen6.Skip(3).OrderByDescending(loc => loc.Value > 168 && loc.Value <= 354)).ToList(); // Secret Base                    case GameVersion.SN:                  case GameVersion.MN:                      return MetGen7.Take(3).Concat(MetGen7.Skip(3).OrderByDescending(loc => loc.Value < 200)).ToList(); // Outer Cape                    case GameVersion.US:                  case GameVersion.UM:                    case GameVersion.RD:                  case GameVersion.BU:                  case GameVersion.GN:                  case GameVersion.YW:                    case GameVersion.GD:                  case GameVersion.SV:                  case GameVersion.C:                      return MetGen7.Take(3).Concat(MetGen7.Skip(3).OrderByDescending(loc => loc.Value < 234)).ToList(); // Dividing Peak Tunnel                    case GameVersion.GP:                  case GameVersion.GE:                  case GameVersion.GO:                      return MetGen7GG.Take(3).Concat(MetGen7GG.Skip(3).OrderByDescending(loc => loc.Value <= 54)).ToList(); // Pokémon League                    case GameVersion.SW:                  case GameVersion.SH:                      return MetGen8.Take(3).Concat(MetGen8.Skip(3).OrderByDescending(loc => loc.Value < 400)).ToList(); // todo              }
Magic Number,PKHeX.Core,GameDataSource,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameDataSource.cs,GetLocationList,The following statement contains a magic number: switch (version)              {                  case GameVersion.CXD:                      if (currentGen == 3)                          return MetGen3CXD;                      break;                    case GameVersion.R:                  case GameVersion.S:                      if (currentGen == 3)                          return MetGen3.OrderByDescending(loc => loc.Value <= 87).ToList(); // Ferry                      break;                  case GameVersion.E:                      if (currentGen == 3)                          return MetGen3.OrderByDescending(loc => loc.Value <= 87 || (loc.Value >= 196 && loc.Value <= 212)).ToList(); // Trainer Hill                      break;                  case GameVersion.FR:                  case GameVersion.LG:                      if (currentGen == 3)                          return MetGen3.OrderByDescending(loc => loc.Value > 87 && loc.Value < 197).ToList(); // Celadon Dept.                      break;                    case GameVersion.D:                  case GameVersion.P:                      if (currentGen == 4 || (currentGen >= 5 && egg))                          return MetGen4.Take(4).Concat(MetGen4.Skip(4).OrderByDescending(loc => loc.Value <= 111)).ToList(); // Battle Park                      break;                    case GameVersion.Pt:                      if (currentGen == 4 || (currentGen >= 5 && egg))                          return MetGen4.Take(4).Concat(MetGen4.Skip(4).OrderByDescending(loc => loc.Value <= 125)).ToList(); // Rock Peak Ruins                      break;                    case GameVersion.HG:                  case GameVersion.SS:                      if (currentGen == 4 || (currentGen >= 5 && egg))                          return MetGen4.Take(4).Concat(MetGen4.Skip(4).OrderByDescending(loc => loc.Value > 125 && loc.Value < 234)).ToList(); // Celadon Dept.                      break;                    case GameVersion.B:                  case GameVersion.W:                      return MetGen5;                    case GameVersion.B2:                  case GameVersion.W2:                      return MetGen5.Take(3).Concat(MetGen5.Skip(3).OrderByDescending(loc => loc.Value <= 116)).ToList(); // Abyssal Ruins                    case GameVersion.X:                  case GameVersion.Y:                      return MetGen6.Take(3).Concat(MetGen6.Skip(3).OrderByDescending(loc => loc.Value <= 168)).ToList(); // Unknown Dungeon                    case GameVersion.OR:                  case GameVersion.AS:                      return MetGen6.Take(3).Concat(MetGen6.Skip(3).OrderByDescending(loc => loc.Value > 168 && loc.Value <= 354)).ToList(); // Secret Base                    case GameVersion.SN:                  case GameVersion.MN:                      return MetGen7.Take(3).Concat(MetGen7.Skip(3).OrderByDescending(loc => loc.Value < 200)).ToList(); // Outer Cape                    case GameVersion.US:                  case GameVersion.UM:                    case GameVersion.RD:                  case GameVersion.BU:                  case GameVersion.GN:                  case GameVersion.YW:                    case GameVersion.GD:                  case GameVersion.SV:                  case GameVersion.C:                      return MetGen7.Take(3).Concat(MetGen7.Skip(3).OrderByDescending(loc => loc.Value < 234)).ToList(); // Dividing Peak Tunnel                    case GameVersion.GP:                  case GameVersion.GE:                  case GameVersion.GO:                      return MetGen7GG.Take(3).Concat(MetGen7GG.Skip(3).OrderByDescending(loc => loc.Value <= 54)).ToList(); // Pokémon League                    case GameVersion.SW:                  case GameVersion.SH:                      return MetGen8.Take(3).Concat(MetGen8.Skip(3).OrderByDescending(loc => loc.Value < 400)).ToList(); // todo              }
Magic Number,PKHeX.Core,GameDataSource,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameDataSource.cs,GetLocationList,The following statement contains a magic number: switch (version)              {                  case GameVersion.CXD:                      if (currentGen == 3)                          return MetGen3CXD;                      break;                    case GameVersion.R:                  case GameVersion.S:                      if (currentGen == 3)                          return MetGen3.OrderByDescending(loc => loc.Value <= 87).ToList(); // Ferry                      break;                  case GameVersion.E:                      if (currentGen == 3)                          return MetGen3.OrderByDescending(loc => loc.Value <= 87 || (loc.Value >= 196 && loc.Value <= 212)).ToList(); // Trainer Hill                      break;                  case GameVersion.FR:                  case GameVersion.LG:                      if (currentGen == 3)                          return MetGen3.OrderByDescending(loc => loc.Value > 87 && loc.Value < 197).ToList(); // Celadon Dept.                      break;                    case GameVersion.D:                  case GameVersion.P:                      if (currentGen == 4 || (currentGen >= 5 && egg))                          return MetGen4.Take(4).Concat(MetGen4.Skip(4).OrderByDescending(loc => loc.Value <= 111)).ToList(); // Battle Park                      break;                    case GameVersion.Pt:                      if (currentGen == 4 || (currentGen >= 5 && egg))                          return MetGen4.Take(4).Concat(MetGen4.Skip(4).OrderByDescending(loc => loc.Value <= 125)).ToList(); // Rock Peak Ruins                      break;                    case GameVersion.HG:                  case GameVersion.SS:                      if (currentGen == 4 || (currentGen >= 5 && egg))                          return MetGen4.Take(4).Concat(MetGen4.Skip(4).OrderByDescending(loc => loc.Value > 125 && loc.Value < 234)).ToList(); // Celadon Dept.                      break;                    case GameVersion.B:                  case GameVersion.W:                      return MetGen5;                    case GameVersion.B2:                  case GameVersion.W2:                      return MetGen5.Take(3).Concat(MetGen5.Skip(3).OrderByDescending(loc => loc.Value <= 116)).ToList(); // Abyssal Ruins                    case GameVersion.X:                  case GameVersion.Y:                      return MetGen6.Take(3).Concat(MetGen6.Skip(3).OrderByDescending(loc => loc.Value <= 168)).ToList(); // Unknown Dungeon                    case GameVersion.OR:                  case GameVersion.AS:                      return MetGen6.Take(3).Concat(MetGen6.Skip(3).OrderByDescending(loc => loc.Value > 168 && loc.Value <= 354)).ToList(); // Secret Base                    case GameVersion.SN:                  case GameVersion.MN:                      return MetGen7.Take(3).Concat(MetGen7.Skip(3).OrderByDescending(loc => loc.Value < 200)).ToList(); // Outer Cape                    case GameVersion.US:                  case GameVersion.UM:                    case GameVersion.RD:                  case GameVersion.BU:                  case GameVersion.GN:                  case GameVersion.YW:                    case GameVersion.GD:                  case GameVersion.SV:                  case GameVersion.C:                      return MetGen7.Take(3).Concat(MetGen7.Skip(3).OrderByDescending(loc => loc.Value < 234)).ToList(); // Dividing Peak Tunnel                    case GameVersion.GP:                  case GameVersion.GE:                  case GameVersion.GO:                      return MetGen7GG.Take(3).Concat(MetGen7GG.Skip(3).OrderByDescending(loc => loc.Value <= 54)).ToList(); // Pokémon League                    case GameVersion.SW:                  case GameVersion.SH:                      return MetGen8.Take(3).Concat(MetGen8.Skip(3).OrderByDescending(loc => loc.Value < 400)).ToList(); // todo              }
Magic Number,PKHeX.Core,GameDataSource,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameDataSource.cs,GetLocationList,The following statement contains a magic number: switch (version)              {                  case GameVersion.CXD:                      if (currentGen == 3)                          return MetGen3CXD;                      break;                    case GameVersion.R:                  case GameVersion.S:                      if (currentGen == 3)                          return MetGen3.OrderByDescending(loc => loc.Value <= 87).ToList(); // Ferry                      break;                  case GameVersion.E:                      if (currentGen == 3)                          return MetGen3.OrderByDescending(loc => loc.Value <= 87 || (loc.Value >= 196 && loc.Value <= 212)).ToList(); // Trainer Hill                      break;                  case GameVersion.FR:                  case GameVersion.LG:                      if (currentGen == 3)                          return MetGen3.OrderByDescending(loc => loc.Value > 87 && loc.Value < 197).ToList(); // Celadon Dept.                      break;                    case GameVersion.D:                  case GameVersion.P:                      if (currentGen == 4 || (currentGen >= 5 && egg))                          return MetGen4.Take(4).Concat(MetGen4.Skip(4).OrderByDescending(loc => loc.Value <= 111)).ToList(); // Battle Park                      break;                    case GameVersion.Pt:                      if (currentGen == 4 || (currentGen >= 5 && egg))                          return MetGen4.Take(4).Concat(MetGen4.Skip(4).OrderByDescending(loc => loc.Value <= 125)).ToList(); // Rock Peak Ruins                      break;                    case GameVersion.HG:                  case GameVersion.SS:                      if (currentGen == 4 || (currentGen >= 5 && egg))                          return MetGen4.Take(4).Concat(MetGen4.Skip(4).OrderByDescending(loc => loc.Value > 125 && loc.Value < 234)).ToList(); // Celadon Dept.                      break;                    case GameVersion.B:                  case GameVersion.W:                      return MetGen5;                    case GameVersion.B2:                  case GameVersion.W2:                      return MetGen5.Take(3).Concat(MetGen5.Skip(3).OrderByDescending(loc => loc.Value <= 116)).ToList(); // Abyssal Ruins                    case GameVersion.X:                  case GameVersion.Y:                      return MetGen6.Take(3).Concat(MetGen6.Skip(3).OrderByDescending(loc => loc.Value <= 168)).ToList(); // Unknown Dungeon                    case GameVersion.OR:                  case GameVersion.AS:                      return MetGen6.Take(3).Concat(MetGen6.Skip(3).OrderByDescending(loc => loc.Value > 168 && loc.Value <= 354)).ToList(); // Secret Base                    case GameVersion.SN:                  case GameVersion.MN:                      return MetGen7.Take(3).Concat(MetGen7.Skip(3).OrderByDescending(loc => loc.Value < 200)).ToList(); // Outer Cape                    case GameVersion.US:                  case GameVersion.UM:                    case GameVersion.RD:                  case GameVersion.BU:                  case GameVersion.GN:                  case GameVersion.YW:                    case GameVersion.GD:                  case GameVersion.SV:                  case GameVersion.C:                      return MetGen7.Take(3).Concat(MetGen7.Skip(3).OrderByDescending(loc => loc.Value < 234)).ToList(); // Dividing Peak Tunnel                    case GameVersion.GP:                  case GameVersion.GE:                  case GameVersion.GO:                      return MetGen7GG.Take(3).Concat(MetGen7GG.Skip(3).OrderByDescending(loc => loc.Value <= 54)).ToList(); // Pokémon League                    case GameVersion.SW:                  case GameVersion.SH:                      return MetGen8.Take(3).Concat(MetGen8.Skip(3).OrderByDescending(loc => loc.Value < 400)).ToList(); // todo              }
Magic Number,PKHeX.Core,GameDataSource,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameDataSource.cs,GetLocationList,The following statement contains a magic number: switch (version)              {                  case GameVersion.CXD:                      if (currentGen == 3)                          return MetGen3CXD;                      break;                    case GameVersion.R:                  case GameVersion.S:                      if (currentGen == 3)                          return MetGen3.OrderByDescending(loc => loc.Value <= 87).ToList(); // Ferry                      break;                  case GameVersion.E:                      if (currentGen == 3)                          return MetGen3.OrderByDescending(loc => loc.Value <= 87 || (loc.Value >= 196 && loc.Value <= 212)).ToList(); // Trainer Hill                      break;                  case GameVersion.FR:                  case GameVersion.LG:                      if (currentGen == 3)                          return MetGen3.OrderByDescending(loc => loc.Value > 87 && loc.Value < 197).ToList(); // Celadon Dept.                      break;                    case GameVersion.D:                  case GameVersion.P:                      if (currentGen == 4 || (currentGen >= 5 && egg))                          return MetGen4.Take(4).Concat(MetGen4.Skip(4).OrderByDescending(loc => loc.Value <= 111)).ToList(); // Battle Park                      break;                    case GameVersion.Pt:                      if (currentGen == 4 || (currentGen >= 5 && egg))                          return MetGen4.Take(4).Concat(MetGen4.Skip(4).OrderByDescending(loc => loc.Value <= 125)).ToList(); // Rock Peak Ruins                      break;                    case GameVersion.HG:                  case GameVersion.SS:                      if (currentGen == 4 || (currentGen >= 5 && egg))                          return MetGen4.Take(4).Concat(MetGen4.Skip(4).OrderByDescending(loc => loc.Value > 125 && loc.Value < 234)).ToList(); // Celadon Dept.                      break;                    case GameVersion.B:                  case GameVersion.W:                      return MetGen5;                    case GameVersion.B2:                  case GameVersion.W2:                      return MetGen5.Take(3).Concat(MetGen5.Skip(3).OrderByDescending(loc => loc.Value <= 116)).ToList(); // Abyssal Ruins                    case GameVersion.X:                  case GameVersion.Y:                      return MetGen6.Take(3).Concat(MetGen6.Skip(3).OrderByDescending(loc => loc.Value <= 168)).ToList(); // Unknown Dungeon                    case GameVersion.OR:                  case GameVersion.AS:                      return MetGen6.Take(3).Concat(MetGen6.Skip(3).OrderByDescending(loc => loc.Value > 168 && loc.Value <= 354)).ToList(); // Secret Base                    case GameVersion.SN:                  case GameVersion.MN:                      return MetGen7.Take(3).Concat(MetGen7.Skip(3).OrderByDescending(loc => loc.Value < 200)).ToList(); // Outer Cape                    case GameVersion.US:                  case GameVersion.UM:                    case GameVersion.RD:                  case GameVersion.BU:                  case GameVersion.GN:                  case GameVersion.YW:                    case GameVersion.GD:                  case GameVersion.SV:                  case GameVersion.C:                      return MetGen7.Take(3).Concat(MetGen7.Skip(3).OrderByDescending(loc => loc.Value < 234)).ToList(); // Dividing Peak Tunnel                    case GameVersion.GP:                  case GameVersion.GE:                  case GameVersion.GO:                      return MetGen7GG.Take(3).Concat(MetGen7GG.Skip(3).OrderByDescending(loc => loc.Value <= 54)).ToList(); // Pokémon League                    case GameVersion.SW:                  case GameVersion.SH:                      return MetGen8.Take(3).Concat(MetGen8.Skip(3).OrderByDescending(loc => loc.Value < 400)).ToList(); // todo              }
Magic Number,PKHeX.Core,GameDataSource,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameDataSource.cs,GetLocationList,The following statement contains a magic number: switch (version)              {                  case GameVersion.CXD:                      if (currentGen == 3)                          return MetGen3CXD;                      break;                    case GameVersion.R:                  case GameVersion.S:                      if (currentGen == 3)                          return MetGen3.OrderByDescending(loc => loc.Value <= 87).ToList(); // Ferry                      break;                  case GameVersion.E:                      if (currentGen == 3)                          return MetGen3.OrderByDescending(loc => loc.Value <= 87 || (loc.Value >= 196 && loc.Value <= 212)).ToList(); // Trainer Hill                      break;                  case GameVersion.FR:                  case GameVersion.LG:                      if (currentGen == 3)                          return MetGen3.OrderByDescending(loc => loc.Value > 87 && loc.Value < 197).ToList(); // Celadon Dept.                      break;                    case GameVersion.D:                  case GameVersion.P:                      if (currentGen == 4 || (currentGen >= 5 && egg))                          return MetGen4.Take(4).Concat(MetGen4.Skip(4).OrderByDescending(loc => loc.Value <= 111)).ToList(); // Battle Park                      break;                    case GameVersion.Pt:                      if (currentGen == 4 || (currentGen >= 5 && egg))                          return MetGen4.Take(4).Concat(MetGen4.Skip(4).OrderByDescending(loc => loc.Value <= 125)).ToList(); // Rock Peak Ruins                      break;                    case GameVersion.HG:                  case GameVersion.SS:                      if (currentGen == 4 || (currentGen >= 5 && egg))                          return MetGen4.Take(4).Concat(MetGen4.Skip(4).OrderByDescending(loc => loc.Value > 125 && loc.Value < 234)).ToList(); // Celadon Dept.                      break;                    case GameVersion.B:                  case GameVersion.W:                      return MetGen5;                    case GameVersion.B2:                  case GameVersion.W2:                      return MetGen5.Take(3).Concat(MetGen5.Skip(3).OrderByDescending(loc => loc.Value <= 116)).ToList(); // Abyssal Ruins                    case GameVersion.X:                  case GameVersion.Y:                      return MetGen6.Take(3).Concat(MetGen6.Skip(3).OrderByDescending(loc => loc.Value <= 168)).ToList(); // Unknown Dungeon                    case GameVersion.OR:                  case GameVersion.AS:                      return MetGen6.Take(3).Concat(MetGen6.Skip(3).OrderByDescending(loc => loc.Value > 168 && loc.Value <= 354)).ToList(); // Secret Base                    case GameVersion.SN:                  case GameVersion.MN:                      return MetGen7.Take(3).Concat(MetGen7.Skip(3).OrderByDescending(loc => loc.Value < 200)).ToList(); // Outer Cape                    case GameVersion.US:                  case GameVersion.UM:                    case GameVersion.RD:                  case GameVersion.BU:                  case GameVersion.GN:                  case GameVersion.YW:                    case GameVersion.GD:                  case GameVersion.SV:                  case GameVersion.C:                      return MetGen7.Take(3).Concat(MetGen7.Skip(3).OrderByDescending(loc => loc.Value < 234)).ToList(); // Dividing Peak Tunnel                    case GameVersion.GP:                  case GameVersion.GE:                  case GameVersion.GO:                      return MetGen7GG.Take(3).Concat(MetGen7GG.Skip(3).OrderByDescending(loc => loc.Value <= 54)).ToList(); // Pokémon League                    case GameVersion.SW:                  case GameVersion.SH:                      return MetGen8.Take(3).Concat(MetGen8.Skip(3).OrderByDescending(loc => loc.Value < 400)).ToList(); // todo              }
Magic Number,PKHeX.Core,GameDataSource,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameDataSource.cs,GetLocationList,The following statement contains a magic number: switch (version)              {                  case GameVersion.CXD:                      if (currentGen == 3)                          return MetGen3CXD;                      break;                    case GameVersion.R:                  case GameVersion.S:                      if (currentGen == 3)                          return MetGen3.OrderByDescending(loc => loc.Value <= 87).ToList(); // Ferry                      break;                  case GameVersion.E:                      if (currentGen == 3)                          return MetGen3.OrderByDescending(loc => loc.Value <= 87 || (loc.Value >= 196 && loc.Value <= 212)).ToList(); // Trainer Hill                      break;                  case GameVersion.FR:                  case GameVersion.LG:                      if (currentGen == 3)                          return MetGen3.OrderByDescending(loc => loc.Value > 87 && loc.Value < 197).ToList(); // Celadon Dept.                      break;                    case GameVersion.D:                  case GameVersion.P:                      if (currentGen == 4 || (currentGen >= 5 && egg))                          return MetGen4.Take(4).Concat(MetGen4.Skip(4).OrderByDescending(loc => loc.Value <= 111)).ToList(); // Battle Park                      break;                    case GameVersion.Pt:                      if (currentGen == 4 || (currentGen >= 5 && egg))                          return MetGen4.Take(4).Concat(MetGen4.Skip(4).OrderByDescending(loc => loc.Value <= 125)).ToList(); // Rock Peak Ruins                      break;                    case GameVersion.HG:                  case GameVersion.SS:                      if (currentGen == 4 || (currentGen >= 5 && egg))                          return MetGen4.Take(4).Concat(MetGen4.Skip(4).OrderByDescending(loc => loc.Value > 125 && loc.Value < 234)).ToList(); // Celadon Dept.                      break;                    case GameVersion.B:                  case GameVersion.W:                      return MetGen5;                    case GameVersion.B2:                  case GameVersion.W2:                      return MetGen5.Take(3).Concat(MetGen5.Skip(3).OrderByDescending(loc => loc.Value <= 116)).ToList(); // Abyssal Ruins                    case GameVersion.X:                  case GameVersion.Y:                      return MetGen6.Take(3).Concat(MetGen6.Skip(3).OrderByDescending(loc => loc.Value <= 168)).ToList(); // Unknown Dungeon                    case GameVersion.OR:                  case GameVersion.AS:                      return MetGen6.Take(3).Concat(MetGen6.Skip(3).OrderByDescending(loc => loc.Value > 168 && loc.Value <= 354)).ToList(); // Secret Base                    case GameVersion.SN:                  case GameVersion.MN:                      return MetGen7.Take(3).Concat(MetGen7.Skip(3).OrderByDescending(loc => loc.Value < 200)).ToList(); // Outer Cape                    case GameVersion.US:                  case GameVersion.UM:                    case GameVersion.RD:                  case GameVersion.BU:                  case GameVersion.GN:                  case GameVersion.YW:                    case GameVersion.GD:                  case GameVersion.SV:                  case GameVersion.C:                      return MetGen7.Take(3).Concat(MetGen7.Skip(3).OrderByDescending(loc => loc.Value < 234)).ToList(); // Dividing Peak Tunnel                    case GameVersion.GP:                  case GameVersion.GE:                  case GameVersion.GO:                      return MetGen7GG.Take(3).Concat(MetGen7GG.Skip(3).OrderByDescending(loc => loc.Value <= 54)).ToList(); // Pokémon League                    case GameVersion.SW:                  case GameVersion.SH:                      return MetGen8.Take(3).Concat(MetGen8.Skip(3).OrderByDescending(loc => loc.Value < 400)).ToList(); // todo              }
Magic Number,PKHeX.Core,GameDataSource,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameDataSource.cs,GetLocationList,The following statement contains a magic number: switch (version)              {                  case GameVersion.CXD:                      if (currentGen == 3)                          return MetGen3CXD;                      break;                    case GameVersion.R:                  case GameVersion.S:                      if (currentGen == 3)                          return MetGen3.OrderByDescending(loc => loc.Value <= 87).ToList(); // Ferry                      break;                  case GameVersion.E:                      if (currentGen == 3)                          return MetGen3.OrderByDescending(loc => loc.Value <= 87 || (loc.Value >= 196 && loc.Value <= 212)).ToList(); // Trainer Hill                      break;                  case GameVersion.FR:                  case GameVersion.LG:                      if (currentGen == 3)                          return MetGen3.OrderByDescending(loc => loc.Value > 87 && loc.Value < 197).ToList(); // Celadon Dept.                      break;                    case GameVersion.D:                  case GameVersion.P:                      if (currentGen == 4 || (currentGen >= 5 && egg))                          return MetGen4.Take(4).Concat(MetGen4.Skip(4).OrderByDescending(loc => loc.Value <= 111)).ToList(); // Battle Park                      break;                    case GameVersion.Pt:                      if (currentGen == 4 || (currentGen >= 5 && egg))                          return MetGen4.Take(4).Concat(MetGen4.Skip(4).OrderByDescending(loc => loc.Value <= 125)).ToList(); // Rock Peak Ruins                      break;                    case GameVersion.HG:                  case GameVersion.SS:                      if (currentGen == 4 || (currentGen >= 5 && egg))                          return MetGen4.Take(4).Concat(MetGen4.Skip(4).OrderByDescending(loc => loc.Value > 125 && loc.Value < 234)).ToList(); // Celadon Dept.                      break;                    case GameVersion.B:                  case GameVersion.W:                      return MetGen5;                    case GameVersion.B2:                  case GameVersion.W2:                      return MetGen5.Take(3).Concat(MetGen5.Skip(3).OrderByDescending(loc => loc.Value <= 116)).ToList(); // Abyssal Ruins                    case GameVersion.X:                  case GameVersion.Y:                      return MetGen6.Take(3).Concat(MetGen6.Skip(3).OrderByDescending(loc => loc.Value <= 168)).ToList(); // Unknown Dungeon                    case GameVersion.OR:                  case GameVersion.AS:                      return MetGen6.Take(3).Concat(MetGen6.Skip(3).OrderByDescending(loc => loc.Value > 168 && loc.Value <= 354)).ToList(); // Secret Base                    case GameVersion.SN:                  case GameVersion.MN:                      return MetGen7.Take(3).Concat(MetGen7.Skip(3).OrderByDescending(loc => loc.Value < 200)).ToList(); // Outer Cape                    case GameVersion.US:                  case GameVersion.UM:                    case GameVersion.RD:                  case GameVersion.BU:                  case GameVersion.GN:                  case GameVersion.YW:                    case GameVersion.GD:                  case GameVersion.SV:                  case GameVersion.C:                      return MetGen7.Take(3).Concat(MetGen7.Skip(3).OrderByDescending(loc => loc.Value < 234)).ToList(); // Dividing Peak Tunnel                    case GameVersion.GP:                  case GameVersion.GE:                  case GameVersion.GO:                      return MetGen7GG.Take(3).Concat(MetGen7GG.Skip(3).OrderByDescending(loc => loc.Value <= 54)).ToList(); // Pokémon League                    case GameVersion.SW:                  case GameVersion.SH:                      return MetGen8.Take(3).Concat(MetGen8.Skip(3).OrderByDescending(loc => loc.Value < 400)).ToList(); // todo              }
Magic Number,PKHeX.Core,GameDataSource,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameDataSource.cs,GetLocationList,The following statement contains a magic number: switch (version)              {                  case GameVersion.CXD:                      if (currentGen == 3)                          return MetGen3CXD;                      break;                    case GameVersion.R:                  case GameVersion.S:                      if (currentGen == 3)                          return MetGen3.OrderByDescending(loc => loc.Value <= 87).ToList(); // Ferry                      break;                  case GameVersion.E:                      if (currentGen == 3)                          return MetGen3.OrderByDescending(loc => loc.Value <= 87 || (loc.Value >= 196 && loc.Value <= 212)).ToList(); // Trainer Hill                      break;                  case GameVersion.FR:                  case GameVersion.LG:                      if (currentGen == 3)                          return MetGen3.OrderByDescending(loc => loc.Value > 87 && loc.Value < 197).ToList(); // Celadon Dept.                      break;                    case GameVersion.D:                  case GameVersion.P:                      if (currentGen == 4 || (currentGen >= 5 && egg))                          return MetGen4.Take(4).Concat(MetGen4.Skip(4).OrderByDescending(loc => loc.Value <= 111)).ToList(); // Battle Park                      break;                    case GameVersion.Pt:                      if (currentGen == 4 || (currentGen >= 5 && egg))                          return MetGen4.Take(4).Concat(MetGen4.Skip(4).OrderByDescending(loc => loc.Value <= 125)).ToList(); // Rock Peak Ruins                      break;                    case GameVersion.HG:                  case GameVersion.SS:                      if (currentGen == 4 || (currentGen >= 5 && egg))                          return MetGen4.Take(4).Concat(MetGen4.Skip(4).OrderByDescending(loc => loc.Value > 125 && loc.Value < 234)).ToList(); // Celadon Dept.                      break;                    case GameVersion.B:                  case GameVersion.W:                      return MetGen5;                    case GameVersion.B2:                  case GameVersion.W2:                      return MetGen5.Take(3).Concat(MetGen5.Skip(3).OrderByDescending(loc => loc.Value <= 116)).ToList(); // Abyssal Ruins                    case GameVersion.X:                  case GameVersion.Y:                      return MetGen6.Take(3).Concat(MetGen6.Skip(3).OrderByDescending(loc => loc.Value <= 168)).ToList(); // Unknown Dungeon                    case GameVersion.OR:                  case GameVersion.AS:                      return MetGen6.Take(3).Concat(MetGen6.Skip(3).OrderByDescending(loc => loc.Value > 168 && loc.Value <= 354)).ToList(); // Secret Base                    case GameVersion.SN:                  case GameVersion.MN:                      return MetGen7.Take(3).Concat(MetGen7.Skip(3).OrderByDescending(loc => loc.Value < 200)).ToList(); // Outer Cape                    case GameVersion.US:                  case GameVersion.UM:                    case GameVersion.RD:                  case GameVersion.BU:                  case GameVersion.GN:                  case GameVersion.YW:                    case GameVersion.GD:                  case GameVersion.SV:                  case GameVersion.C:                      return MetGen7.Take(3).Concat(MetGen7.Skip(3).OrderByDescending(loc => loc.Value < 234)).ToList(); // Dividing Peak Tunnel                    case GameVersion.GP:                  case GameVersion.GE:                  case GameVersion.GO:                      return MetGen7GG.Take(3).Concat(MetGen7GG.Skip(3).OrderByDescending(loc => loc.Value <= 54)).ToList(); // Pokémon League                    case GameVersion.SW:                  case GameVersion.SH:                      return MetGen8.Take(3).Concat(MetGen8.Skip(3).OrderByDescending(loc => loc.Value < 400)).ToList(); // todo              }
Magic Number,PKHeX.Core,GameDataSource,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameDataSource.cs,GetLocationListModified,The following statement contains a magic number: return MetGen4.Where(loc => loc.Value == Locations.Transfer3) // Pal Park to front                      .Concat(MetGen4.Take(4))                      .Concat(MetGen4.Skip(4).Where(loc => loc.Value != Locations.Transfer3)).ToList();
Magic Number,PKHeX.Core,GameDataSource,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameDataSource.cs,GetLocationListModified,The following statement contains a magic number: return MetGen4.Where(loc => loc.Value == Locations.Transfer3) // Pal Park to front                      .Concat(MetGen4.Take(4))                      .Concat(MetGen4.Skip(4).Where(loc => loc.Value != Locations.Transfer3)).ToList();
Magic Number,PKHeX.Core,GameDataSource,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameDataSource.cs,GetLocationListModified,The following statement contains a magic number: version <= GameVersion.CXD && currentGen == 4
Magic Number,PKHeX.Core,GameDataSource,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameDataSource.cs,GetLocationListModified,The following statement contains a magic number: return MetGen5.Where(loc => loc.Value == Locations.Transfer4)                      .Concat(MetGen5.Take(3))                      .Concat(MetGen5.Skip(3).Where(loc => loc.Value != Locations.Transfer4)).ToList();
Magic Number,PKHeX.Core,GameDataSource,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameDataSource.cs,GetLocationListModified,The following statement contains a magic number: return MetGen5.Where(loc => loc.Value == Locations.Transfer4)                      .Concat(MetGen5.Take(3))                      .Concat(MetGen5.Skip(3).Where(loc => loc.Value != Locations.Transfer4)).ToList();
Magic Number,PKHeX.Core,GameDataSource,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameDataSource.cs,GetLocationListModified,The following statement contains a magic number: version < GameVersion.X && currentGen >= 5
Magic Number,PKHeX.Core,GameDataSource,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameDataSource.cs,LanguageDataSource,The following statement contains a magic number: gen == 3
Magic Number,PKHeX.Core,GameLanguage,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameLanguage.cs,GetTransporterName,The following statement contains a magic number: index = 2;
Magic Number,PKHeX.Core,GameStrings,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameStrings.cs,GameStrings,The following statement contains a magic number: Array.Resize(ref g3coloitems' 500 + tmp.Length);
Magic Number,PKHeX.Core,GameStrings,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameStrings.cs,GameStrings,The following statement contains a magic number: Array.Resize(ref g3xditems' 500 + tmp2.Length);
Magic Number,PKHeX.Core,GameStrings,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameStrings.cs,GameStrings,The following statement contains a magic number: movelist[i] += $" ({ps[i % 2]})";
Magic Number,PKHeX.Core,GameStrings,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameStrings.cs,GameStrings,The following statement contains a magic number: i < 658
Magic Number,PKHeX.Core,GameStrings,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameStrings.cs,GameStrings,The following statement contains a magic number: Get("mail4").CopyTo(g4items' 137);
Magic Number,PKHeX.Core,GameStrings,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameStrings.cs,SanitizeItemNames,The following statement contains a magic number: var HM06 = itemlist[425];
Magic Number,PKHeX.Core,GameStrings,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameStrings.cs,SanitizeItemNames,The following statement contains a magic number: itemlist[426] = $"{HM0}7 (G4)";
Magic Number,PKHeX.Core,GameStrings,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameStrings.cs,SanitizeItemNames,The following statement contains a magic number: itemlist[427] = $"{HM0}8 (G4)";
Magic Number,PKHeX.Core,GameStrings,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameStrings.cs,SanitizeItemNames,The following statement contains a magic number: itemlist[456] += " (HG/SS)";
Magic Number,PKHeX.Core,GameStrings,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameStrings.cs,SanitizeItemNames,The following statement contains a magic number: itemlist[736] += " (OR/AS)";
Magic Number,PKHeX.Core,GameStrings,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameStrings.cs,SanitizeItemNames,The following statement contains a magic number: itemlist[463] += " (DPPt)";
Magic Number,PKHeX.Core,GameStrings,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameStrings.cs,SanitizeItemNames,The following statement contains a magic number: itemlist[734] += " (OR/AS)";
Magic Number,PKHeX.Core,GameStrings,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameStrings.cs,SanitizeItemNames,The following statement contains a magic number: itemlist[476] += " (HG/SS)";
Magic Number,PKHeX.Core,GameStrings,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameStrings.cs,SanitizeItemNames,The following statement contains a magic number: itemlist[723] += " (OR/AS)";
Magic Number,PKHeX.Core,GameStrings,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameStrings.cs,SanitizeItemNames,The following statement contains a magic number: itemlist[621] += " (M)";
Magic Number,PKHeX.Core,GameStrings,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameStrings.cs,SanitizeItemNames,The following statement contains a magic number: itemlist[626] += " (F)";
Magic Number,PKHeX.Core,GameStrings,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameStrings.cs,SanitizeItemNames,The following statement contains a magic number: itemlist[629] += " (2)";
Magic Number,PKHeX.Core,GameStrings,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameStrings.cs,SanitizeItemNames,The following statement contains a magic number: itemlist[637] += " (2)";
Magic Number,PKHeX.Core,GameStrings,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameStrings.cs,SanitizeItemNames,The following statement contains a magic number: itemlist[707] += " (2)";
Magic Number,PKHeX.Core,GameStrings,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameStrings.cs,SanitizeItemNames,The following statement contains a magic number: itemlist[713] += " (2)";
Magic Number,PKHeX.Core,GameStrings,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameStrings.cs,SanitizeItemNames,The following statement contains a magic number: itemlist[714] += " (2)";
Magic Number,PKHeX.Core,GameStrings,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameStrings.cs,SanitizeItemNames,The following statement contains a magic number: itemlist[729] += " (1)";
Magic Number,PKHeX.Core,GameStrings,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameStrings.cs,SanitizeItemNames,The following statement contains a magic number: itemlist[740] += " (2)";
Magic Number,PKHeX.Core,GameStrings,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameStrings.cs,SanitizeItemNames,The following statement contains a magic number: itemlist[751] += " (2)";
Magic Number,PKHeX.Core,GameStrings,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameStrings.cs,SanitizeItemNames,The following statement contains a magic number: itemlist[771] += " (3)";
Magic Number,PKHeX.Core,GameStrings,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameStrings.cs,SanitizeItemNames,The following statement contains a magic number: itemlist[772] += " (4)";
Magic Number,PKHeX.Core,GameStrings,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameStrings.cs,SanitizeItemNames,The following statement contains a magic number: itemlist[842] += " (SM)";
Magic Number,PKHeX.Core,GameStrings,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameStrings.cs,SanitizeItemNames,The following statement contains a magic number: itemlist[945] += " (2)";
Magic Number,PKHeX.Core,GameStrings,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameStrings.cs,SanitizeItemNames,The following statement contains a magic number: itemlist[946] += " (2)";
Magic Number,PKHeX.Core,GameStrings,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameStrings.cs,SanitizeItemNames,The following statement contains a magic number: itemlist[873] += " (GP/GE)";
Magic Number,PKHeX.Core,GameStrings,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameStrings.cs,SanitizeItemNames,The following statement contains a magic number: itemlist[459] += " (HG/SS)";
Magic Number,PKHeX.Core,GameStrings,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameStrings.cs,SanitizeItemNames,The following statement contains a magic number: itemlist[467] += " (Pt)";
Magic Number,PKHeX.Core,GameStrings,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameStrings.cs,SanitizeItemNames,The following statement contains a magic number: itemlist[475] += " (HG/SS)";
Magic Number,PKHeX.Core,GameStrings,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameStrings.cs,SanitizeItemNames,The following statement contains a magic number: itemlist[894] += " (GP)";
Magic Number,PKHeX.Core,GameStrings,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameStrings.cs,SanitizeItemNames,The following statement contains a magic number: itemlist[895] += " (GE)";
Magic Number,PKHeX.Core,GameStrings,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameStrings.cs,SanitizeItemNames,The following statement contains a magic number: itemlist[878] += " (GP/GE)";
Magic Number,PKHeX.Core,GameStrings,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameStrings.cs,SanitizeItemNames,The following statement contains a magic number: itemlist[479] += " (HG/SS)";
Magic Number,PKHeX.Core,GameStrings,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameStrings.cs,SanitizeItemNames,The following statement contains a magic number: itemlist[0121] += " (1)";
Magic Number,PKHeX.Core,GameStrings,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameStrings.cs,SanitizeItemNames,The following statement contains a magic number: itemlist[1075] += " (2)";
Magic Number,PKHeX.Core,GameStrings,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameStrings.cs,SanitizeItemNames,The following statement contains a magic number: itemlist[1080] += " (SW/SH)";
Magic Number,PKHeX.Core,GameStrings,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameStrings.cs,SanitizeItemNames,The following statement contains a magic number: itemlist[1081] += " (1)";
Magic Number,PKHeX.Core,GameStrings,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameStrings.cs,SanitizeItemNames,The following statement contains a magic number: itemlist[1266] += " (2)";
Magic Number,PKHeX.Core,GameStrings,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameStrings.cs,SanitizeItemNames,The following statement contains a magic number: g3coloitems[500 + i] += $" ({i - 11:00})";
Magic Number,PKHeX.Core,GameStrings,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameStrings.cs,SanitizeItemNames,The following statement contains a magic number: g3coloitems[500 + i] += $" ({i - 11:00})";
Magic Number,PKHeX.Core,GameStrings,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameStrings.cs,SanitizeItemNames,The following statement contains a magic number: i <= 29
Magic Number,PKHeX.Core,GameStrings,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameStrings.cs,SanitizeItemNames,The following statement contains a magic number: g3coloitems[500 + 10] += " (COLO)";
Magic Number,PKHeX.Core,GameStrings,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameStrings.cs,SanitizeItemNames,The following statement contains a magic number: g3coloitems[500 + 10] += " (COLO)";
Magic Number,PKHeX.Core,GameStrings,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameStrings.cs,SanitizeMetLocations,The following statement contains a magic number: i < 34
Magic Number,PKHeX.Core,GameStrings,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameStrings.cs,SanitizeMetLocations,The following statement contains a magic number: metXY_40000[34] += " (-)";
Magic Number,PKHeX.Core,GameStrings,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameStrings.cs,SanitizeMetLocations,The following statement contains a magic number: metSM_40000[37] += " (-)";
Magic Number,PKHeX.Core,GameStrings,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameStrings.cs,SanitizeMetLocations,The following statement contains a magic number: metGG_40000[26] += " (-)";
Magic Number,PKHeX.Core,GameStrings,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameStrings.cs,SanitizeMetLocations,The following statement contains a magic number: metBW2_40000[70] += " (-)";
Magic Number,PKHeX.Core,GameStrings,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameStrings.cs,SanitizeMetG4HGSS,The following statement contains a magic number: metHGSS_00000[054] += " (DP/Pt)";
Magic Number,PKHeX.Core,GameStrings,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameStrings.cs,SanitizeMetG4HGSS,The following statement contains a magic number: metHGSS_00000[221] += " (HG/SS)";
Magic Number,PKHeX.Core,GameStrings,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameStrings.cs,SanitizeMetG4HGSS,The following statement contains a magic number: metHGSS_00000[104] += " (DP/Pt)";
Magic Number,PKHeX.Core,GameStrings,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameStrings.cs,SanitizeMetG4HGSS,The following statement contains a magic number: metHGSS_00000[212] += " (HG/SS)";
Magic Number,PKHeX.Core,GameStrings,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameStrings.cs,SanitizeMetG4HGSS,The following statement contains a magic number: metHGSS_02000[2] += $" ({EggName})";
Magic Number,PKHeX.Core,GameStrings,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameStrings.cs,SanitizeMetG5BW,The following statement contains a magic number: metBW2_00000[36] = $"{metBW2_00000[84]}/{metBW2_00000[36]}";
Magic Number,PKHeX.Core,GameStrings,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameStrings.cs,SanitizeMetG5BW,The following statement contains a magic number: metBW2_00000[36] = $"{metBW2_00000[84]}/{metBW2_00000[36]}";
Magic Number,PKHeX.Core,GameStrings,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameStrings.cs,SanitizeMetG5BW,The following statement contains a magic number: metBW2_00000[36] = $"{metBW2_00000[84]}/{metBW2_00000[36]}";
Magic Number,PKHeX.Core,GameStrings,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameStrings.cs,SanitizeMetG5BW,The following statement contains a magic number: metBW2_00000[40] += "(B/W)";
Magic Number,PKHeX.Core,GameStrings,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameStrings.cs,SanitizeMetG5BW,The following statement contains a magic number: metBW2_00000[134] += "(B2/W2)";
Magic Number,PKHeX.Core,GameStrings,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameStrings.cs,SanitizeMetG5BW,The following statement contains a magic number: i < 106
Magic Number,PKHeX.Core,GameStrings,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameStrings.cs,SanitizeMetG5BW,The following statement contains a magic number: metBW2_00000[2] += " (2)";
Magic Number,PKHeX.Core,GameStrings,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameStrings.cs,SanitizeMetG5BW,The following statement contains a magic number: metBW2_00000[2] == metBW2_40000[2 - 1]
Magic Number,PKHeX.Core,GameStrings,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameStrings.cs,SanitizeMetG5BW,The following statement contains a magic number: metBW2_00000[2] == metBW2_40000[2 - 1]
Magic Number,PKHeX.Core,GameStrings,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameStrings.cs,SanitizeMetG5BW,The following statement contains a magic number: metBW2_40000[i] += $" ({i - 96})";
Magic Number,PKHeX.Core,GameStrings,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameStrings.cs,SanitizeMetG5BW,The following statement contains a magic number: i < 108
Magic Number,PKHeX.Core,GameStrings,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameStrings.cs,SanitizeMetG5BW,The following statement contains a magic number: metBW2_30000[2 - 1] += $" ({NPC})";
Magic Number,PKHeX.Core,GameStrings,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameStrings.cs,SanitizeMetG5BW,The following statement contains a magic number: metBW2_30000[3 - 1] += $" ({EggName})";
Magic Number,PKHeX.Core,GameStrings,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameStrings.cs,SanitizeMetG5BW,The following statement contains a magic number: metBW2_30000[10 - 1] = $"{specieslist[251]} ({specieslist[570]} 1)";
Magic Number,PKHeX.Core,GameStrings,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameStrings.cs,SanitizeMetG5BW,The following statement contains a magic number: metBW2_30000[10 - 1] = $"{specieslist[251]} ({specieslist[570]} 1)";
Magic Number,PKHeX.Core,GameStrings,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameStrings.cs,SanitizeMetG5BW,The following statement contains a magic number: metBW2_30000[10 - 1] = $"{specieslist[251]} ({specieslist[570]} 1)";
Magic Number,PKHeX.Core,GameStrings,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameStrings.cs,SanitizeMetG5BW,The following statement contains a magic number: metBW2_30000[11 - 1] = $"{specieslist[251]} ({specieslist[570]} 2)";
Magic Number,PKHeX.Core,GameStrings,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameStrings.cs,SanitizeMetG5BW,The following statement contains a magic number: metBW2_30000[11 - 1] = $"{specieslist[251]} ({specieslist[570]} 2)";
Magic Number,PKHeX.Core,GameStrings,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameStrings.cs,SanitizeMetG5BW,The following statement contains a magic number: metBW2_30000[11 - 1] = $"{specieslist[251]} ({specieslist[570]} 2)";
Magic Number,PKHeX.Core,GameStrings,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameStrings.cs,SanitizeMetG5BW,The following statement contains a magic number: metBW2_30000[12 - 1] = $"{specieslist[571]} (1)";
Magic Number,PKHeX.Core,GameStrings,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameStrings.cs,SanitizeMetG5BW,The following statement contains a magic number: metBW2_30000[12 - 1] = $"{specieslist[571]} (1)";
Magic Number,PKHeX.Core,GameStrings,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameStrings.cs,SanitizeMetG5BW,The following statement contains a magic number: metBW2_30000[13 - 1] = $"{specieslist[571]} (2)";
Magic Number,PKHeX.Core,GameStrings,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameStrings.cs,SanitizeMetG5BW,The following statement contains a magic number: metBW2_30000[13 - 1] = $"{specieslist[571]} (2)";
Magic Number,PKHeX.Core,GameStrings,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameStrings.cs,SanitizeMetG5BW,The following statement contains a magic number: metBW2_60000[3 - 1] += $" ({EggName})";
Magic Number,PKHeX.Core,GameStrings,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameStrings.cs,SanitizeMetG6XY,The following statement contains a magic number: metXY_00000[104] += " (X/Y)";
Magic Number,PKHeX.Core,GameStrings,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameStrings.cs,SanitizeMetG6XY,The following statement contains a magic number: metXY_00000[106] += " (X/Y)";
Magic Number,PKHeX.Core,GameStrings,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameStrings.cs,SanitizeMetG6XY,The following statement contains a magic number: metXY_00000[202] += " (OR/AS)";
Magic Number,PKHeX.Core,GameStrings,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameStrings.cs,SanitizeMetG6XY,The following statement contains a magic number: metXY_00000[298] += " (OR/AS)";
Magic Number,PKHeX.Core,GameStrings,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameStrings.cs,SanitizeMetG6XY,The following statement contains a magic number: metXY_40000[i] += $" ({i - 61})";
Magic Number,PKHeX.Core,GameStrings,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameStrings.cs,SanitizeMetG6XY,The following statement contains a magic number: i < 69
Magic Number,PKHeX.Core,GameStrings,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameStrings.cs,SanitizeMetG7SM,The following statement contains a magic number: Array.Copy(metSM_00000' 194' metSM_00000_good' 194' 4);
Magic Number,PKHeX.Core,GameStrings,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameStrings.cs,SanitizeMetG7SM,The following statement contains a magic number: Array.Copy(metSM_00000' 194' metSM_00000_good' 194' 4);
Magic Number,PKHeX.Core,GameStrings,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameStrings.cs,SanitizeMetG7SM,The following statement contains a magic number: Array.Copy(metSM_00000' 194' metSM_00000_good' 194' 4);
Magic Number,PKHeX.Core,GameStrings,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameStrings.cs,SanitizeMetG7SM,The following statement contains a magic number: i <= 5
Magic Number,PKHeX.Core,GameStrings,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameStrings.cs,SanitizeMetG7SM,The following statement contains a magic number: i < 65
Magic Number,PKHeX.Core,GameStrings,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameStrings.cs,SanitizeMetG7SM,The following statement contains a magic number: i < 54
Magic Number,PKHeX.Core,GameStrings,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameStrings.cs,SanitizeMetG8SWSH,The following statement contains a magic number: i <= 155
Magic Number,PKHeX.Core,GameStrings,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameStrings.cs,SanitizeMetG8SWSH,The following statement contains a magic number: i <= 5
Magic Number,PKHeX.Core,GameStrings,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameStrings.cs,SanitizeMetG8SWSH,The following statement contains a magic number: metSWSH_30000[18] += " (?)";
Magic Number,PKHeX.Core,GameStrings,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameStrings.cs,SanitizeMetG8SWSH,The following statement contains a magic number: i < 60
Magic Number,PKHeX.Core,GameStrings,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameStrings.cs,SanitizeMetG8SWSH,The following statement contains a magic number: metSWSH_40000[29] += " (-)";
Magic Number,PKHeX.Core,GameStrings,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameStrings.cs,SanitizeMetG8SWSH,The following statement contains a magic number: metSWSH_40000[52] += " (-)";
Magic Number,PKHeX.Core,GameStrings,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameStrings.cs,GetItemStrings,The following statement contains a magic number: return generation switch              {                  0 => Array.Empty<string>()'                  1 => g1items'                  2 => g2items'                  3 => GetItemStrings3(game)'                  4 => g4items' // mail names changed 4->5                  _ => itemlist              };
Magic Number,PKHeX.Core,GameStrings,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameStrings.cs,GetItemStrings,The following statement contains a magic number: return generation switch              {                  0 => Array.Empty<string>()'                  1 => g1items'                  2 => g2items'                  3 => GetItemStrings3(game)'                  4 => g4items' // mail names changed 4->5                  _ => itemlist              };
Magic Number,PKHeX.Core,GameStrings,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameStrings.cs,GetItemStrings,The following statement contains a magic number: return generation switch              {                  0 => Array.Empty<string>()'                  1 => g1items'                  2 => g2items'                  3 => GetItemStrings3(game)'                  4 => g4items' // mail names changed 4->5                  _ => itemlist              };
Magic Number,PKHeX.Core,GameStrings,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameStrings.cs,GetItemStrings3,The following statement contains a magic number: switch (game)              {                  case GameVersion.COLO:                      return g3coloitems;                  case GameVersion.XD:                      return g3xditems;                  default:                      if (Legal.EReaderBerryIsEnigma)                          return g3items;                        var g3itemsEBerry = (string[])g3items.Clone();                      g3itemsEBerry[175] = Legal.EReaderBerryDisplayName;                      return g3itemsEBerry;              }
Magic Number,PKHeX.Core,GameStrings,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameStrings.cs,GetLocationName,The following statement contains a magic number: gen = 2;
Magic Number,PKHeX.Core,GameStrings,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameStrings.cs,GetLocationName,The following statement contains a magic number: format == 2
Magic Number,PKHeX.Core,GameStrings,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameStrings.cs,GetLocationNames,The following statement contains a magic number: switch (gen)              {                  case 2: return metGSC_00000;                  case 3:                      return version == GameVersion.CXD ? metCXD_00000 : metRSEFRLG_00000;                  case 4: return GetLocationNames4(bankID);                  case 5: return GetLocationNames5(bankID);                  case 6: return GetLocationNames6(bankID);                  case 7:                      if (GameVersion.GG.Contains(version))                          return GetLocationNames7GG(bankID);                      return GetLocationNames7(bankID);                  case 8:                      return GetLocationNames8(bankID);                  default:                      return Array.Empty<string>();              }
Magic Number,PKHeX.Core,GameStrings,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameStrings.cs,GetLocationNames,The following statement contains a magic number: switch (gen)              {                  case 2: return metGSC_00000;                  case 3:                      return version == GameVersion.CXD ? metCXD_00000 : metRSEFRLG_00000;                  case 4: return GetLocationNames4(bankID);                  case 5: return GetLocationNames5(bankID);                  case 6: return GetLocationNames6(bankID);                  case 7:                      if (GameVersion.GG.Contains(version))                          return GetLocationNames7GG(bankID);                      return GetLocationNames7(bankID);                  case 8:                      return GetLocationNames8(bankID);                  default:                      return Array.Empty<string>();              }
Magic Number,PKHeX.Core,GameStrings,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameStrings.cs,GetLocationNames,The following statement contains a magic number: switch (gen)              {                  case 2: return metGSC_00000;                  case 3:                      return version == GameVersion.CXD ? metCXD_00000 : metRSEFRLG_00000;                  case 4: return GetLocationNames4(bankID);                  case 5: return GetLocationNames5(bankID);                  case 6: return GetLocationNames6(bankID);                  case 7:                      if (GameVersion.GG.Contains(version))                          return GetLocationNames7GG(bankID);                      return GetLocationNames7(bankID);                  case 8:                      return GetLocationNames8(bankID);                  default:                      return Array.Empty<string>();              }
Magic Number,PKHeX.Core,GameStrings,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameStrings.cs,GetLocationNames,The following statement contains a magic number: switch (gen)              {                  case 2: return metGSC_00000;                  case 3:                      return version == GameVersion.CXD ? metCXD_00000 : metRSEFRLG_00000;                  case 4: return GetLocationNames4(bankID);                  case 5: return GetLocationNames5(bankID);                  case 6: return GetLocationNames6(bankID);                  case 7:                      if (GameVersion.GG.Contains(version))                          return GetLocationNames7GG(bankID);                      return GetLocationNames7(bankID);                  case 8:                      return GetLocationNames8(bankID);                  default:                      return Array.Empty<string>();              }
Magic Number,PKHeX.Core,GameStrings,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameStrings.cs,GetLocationNames,The following statement contains a magic number: switch (gen)              {                  case 2: return metGSC_00000;                  case 3:                      return version == GameVersion.CXD ? metCXD_00000 : metRSEFRLG_00000;                  case 4: return GetLocationNames4(bankID);                  case 5: return GetLocationNames5(bankID);                  case 6: return GetLocationNames6(bankID);                  case 7:                      if (GameVersion.GG.Contains(version))                          return GetLocationNames7GG(bankID);                      return GetLocationNames7(bankID);                  case 8:                      return GetLocationNames8(bankID);                  default:                      return Array.Empty<string>();              }
Magic Number,PKHeX.Core,GameStrings,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameStrings.cs,GetLocationNames,The following statement contains a magic number: switch (gen)              {                  case 2: return metGSC_00000;                  case 3:                      return version == GameVersion.CXD ? metCXD_00000 : metRSEFRLG_00000;                  case 4: return GetLocationNames4(bankID);                  case 5: return GetLocationNames5(bankID);                  case 6: return GetLocationNames6(bankID);                  case 7:                      if (GameVersion.GG.Contains(version))                          return GetLocationNames7GG(bankID);                      return GetLocationNames7(bankID);                  case 8:                      return GetLocationNames8(bankID);                  default:                      return Array.Empty<string>();              }
Magic Number,PKHeX.Core,GameStrings,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameStrings.cs,GetLocationNames,The following statement contains a magic number: switch (gen)              {                  case 2: return metGSC_00000;                  case 3:                      return version == GameVersion.CXD ? metCXD_00000 : metRSEFRLG_00000;                  case 4: return GetLocationNames4(bankID);                  case 5: return GetLocationNames5(bankID);                  case 6: return GetLocationNames6(bankID);                  case 7:                      if (GameVersion.GG.Contains(version))                          return GetLocationNames7GG(bankID);                      return GetLocationNames7(bankID);                  case 8:                      return GetLocationNames8(bankID);                  default:                      return Array.Empty<string>();              }
Magic Number,PKHeX.Core,GameStrings,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameStrings.cs,GetLocationNames4,The following statement contains a magic number: return bankID switch              {                  0 => metHGSS_00000'                  2 => metHGSS_02000'                  3 => metHGSS_03000'                  _ => Array.Empty<string>()              };
Magic Number,PKHeX.Core,GameStrings,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameStrings.cs,GetLocationNames4,The following statement contains a magic number: return bankID switch              {                  0 => metHGSS_00000'                  2 => metHGSS_02000'                  3 => metHGSS_03000'                  _ => Array.Empty<string>()              };
Magic Number,PKHeX.Core,GameStrings,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameStrings.cs,GetLocationNames5,The following statement contains a magic number: return bankID switch              {                  0 => metBW2_00000'                  3 => metBW2_30000'                  4 => metBW2_40000'                  6 => metBW2_60000'                  _ => Array.Empty<string>()              };
Magic Number,PKHeX.Core,GameStrings,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameStrings.cs,GetLocationNames5,The following statement contains a magic number: return bankID switch              {                  0 => metBW2_00000'                  3 => metBW2_30000'                  4 => metBW2_40000'                  6 => metBW2_60000'                  _ => Array.Empty<string>()              };
Magic Number,PKHeX.Core,GameStrings,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameStrings.cs,GetLocationNames5,The following statement contains a magic number: return bankID switch              {                  0 => metBW2_00000'                  3 => metBW2_30000'                  4 => metBW2_40000'                  6 => metBW2_60000'                  _ => Array.Empty<string>()              };
Magic Number,PKHeX.Core,GameStrings,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameStrings.cs,GetLocationNames6,The following statement contains a magic number: return bankID switch              {                  0 => metXY_00000'                  3 => metXY_30000'                  4 => metXY_40000'                  6 => metXY_60000'                  _ => Array.Empty<string>()              };
Magic Number,PKHeX.Core,GameStrings,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameStrings.cs,GetLocationNames6,The following statement contains a magic number: return bankID switch              {                  0 => metXY_00000'                  3 => metXY_30000'                  4 => metXY_40000'                  6 => metXY_60000'                  _ => Array.Empty<string>()              };
Magic Number,PKHeX.Core,GameStrings,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameStrings.cs,GetLocationNames6,The following statement contains a magic number: return bankID switch              {                  0 => metXY_00000'                  3 => metXY_30000'                  4 => metXY_40000'                  6 => metXY_60000'                  _ => Array.Empty<string>()              };
Magic Number,PKHeX.Core,GameStrings,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameStrings.cs,GetLocationNames7,The following statement contains a magic number: return bankID switch              {                  0 => metSM_00000'                  3 => metSM_30000'                  4 => metSM_40000'                  6 => metSM_60000'                  _ => Array.Empty<string>()              };
Magic Number,PKHeX.Core,GameStrings,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameStrings.cs,GetLocationNames7,The following statement contains a magic number: return bankID switch              {                  0 => metSM_00000'                  3 => metSM_30000'                  4 => metSM_40000'                  6 => metSM_60000'                  _ => Array.Empty<string>()              };
Magic Number,PKHeX.Core,GameStrings,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameStrings.cs,GetLocationNames7,The following statement contains a magic number: return bankID switch              {                  0 => metSM_00000'                  3 => metSM_30000'                  4 => metSM_40000'                  6 => metSM_60000'                  _ => Array.Empty<string>()              };
Magic Number,PKHeX.Core,GameStrings,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameStrings.cs,GetLocationNames7GG,The following statement contains a magic number: return bankID switch              {                  0 => metGG_00000'                  3 => metGG_30000'                  4 => metGG_40000'                  6 => metGG_60000'                  _ => Array.Empty<string>()              };
Magic Number,PKHeX.Core,GameStrings,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameStrings.cs,GetLocationNames7GG,The following statement contains a magic number: return bankID switch              {                  0 => metGG_00000'                  3 => metGG_30000'                  4 => metGG_40000'                  6 => metGG_60000'                  _ => Array.Empty<string>()              };
Magic Number,PKHeX.Core,GameStrings,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameStrings.cs,GetLocationNames7GG,The following statement contains a magic number: return bankID switch              {                  0 => metGG_00000'                  3 => metGG_30000'                  4 => metGG_40000'                  6 => metGG_60000'                  _ => Array.Empty<string>()              };
Magic Number,PKHeX.Core,GameStrings,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameStrings.cs,GetLocationNames8,The following statement contains a magic number: return bankID switch              {                  0 => metSWSH_00000'                  3 => metSWSH_30000'                  4 => metSWSH_40000'                  6 => metSWSH_60000'                  _ => Array.Empty<string>()              };
Magic Number,PKHeX.Core,GameStrings,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameStrings.cs,GetLocationNames8,The following statement contains a magic number: return bankID switch              {                  0 => metSWSH_00000'                  3 => metSWSH_30000'                  4 => metSWSH_40000'                  6 => metSWSH_60000'                  _ => Array.Empty<string>()              };
Magic Number,PKHeX.Core,GameStrings,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameStrings.cs,GetLocationNames8,The following statement contains a magic number: return bankID switch              {                  0 => metSWSH_00000'                  3 => metSWSH_30000'                  4 => metSWSH_40000'                  6 => metSWSH_60000'                  _ => Array.Empty<string>()              };
Magic Number,PKHeX.Core,MemoryStrings,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\MemoryStrings.cs,GetItems,The following statement contains a magic number: var permit = format < 8 ? Legal.HeldItem_AO : Legal.HeldItem_AO.Concat(Legal.HeldItems_SWSH).Distinct();
Magic Number,PKHeX.Core,MemoryStrings,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\MemoryStrings.cs,GetMemories,The following statement contains a magic number: int memorycount = s.memories.Length - 38;
Magic Number,PKHeX.Core,MemoryStrings,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\MemoryStrings.cs,GetMemories,The following statement contains a magic number: mems[i] = s.memories[38 + i];
Magic Number,PKHeX.Core,GameUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameUtil.cs,GetVersion,The following statement contains a magic number: return generation switch              {                  1 => RBY'                  2 => C'                  3 => E'                  4 => SS'                  5 => W2'                  6 => AS'                  7 => UM'                  8 => SH'                  _ => Invalid              };
Magic Number,PKHeX.Core,GameUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameUtil.cs,GetVersion,The following statement contains a magic number: return generation switch              {                  1 => RBY'                  2 => C'                  3 => E'                  4 => SS'                  5 => W2'                  6 => AS'                  7 => UM'                  8 => SH'                  _ => Invalid              };
Magic Number,PKHeX.Core,GameUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameUtil.cs,GetVersion,The following statement contains a magic number: return generation switch              {                  1 => RBY'                  2 => C'                  3 => E'                  4 => SS'                  5 => W2'                  6 => AS'                  7 => UM'                  8 => SH'                  _ => Invalid              };
Magic Number,PKHeX.Core,GameUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameUtil.cs,GetVersion,The following statement contains a magic number: return generation switch              {                  1 => RBY'                  2 => C'                  3 => E'                  4 => SS'                  5 => W2'                  6 => AS'                  7 => UM'                  8 => SH'                  _ => Invalid              };
Magic Number,PKHeX.Core,GameUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameUtil.cs,GetVersion,The following statement contains a magic number: return generation switch              {                  1 => RBY'                  2 => C'                  3 => E'                  4 => SS'                  5 => W2'                  6 => AS'                  7 => UM'                  8 => SH'                  _ => Invalid              };
Magic Number,PKHeX.Core,GameUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameUtil.cs,GetVersion,The following statement contains a magic number: return generation switch              {                  1 => RBY'                  2 => C'                  3 => E'                  4 => SS'                  5 => W2'                  6 => AS'                  7 => UM'                  8 => SH'                  _ => Invalid              };
Magic Number,PKHeX.Core,GameUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameUtil.cs,GetVersion,The following statement contains a magic number: return generation switch              {                  1 => RBY'                  2 => C'                  3 => E'                  4 => SS'                  5 => W2'                  6 => AS'                  7 => UM'                  8 => SH'                  _ => Invalid              };
Magic Number,PKHeX.Core,GameUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameUtil.cs,GetGeneration,The following statement contains a magic number: return 2;
Magic Number,PKHeX.Core,GameUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameUtil.cs,GetGeneration,The following statement contains a magic number: return 3;
Magic Number,PKHeX.Core,GameUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameUtil.cs,GetGeneration,The following statement contains a magic number: return 4;
Magic Number,PKHeX.Core,GameUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameUtil.cs,GetGeneration,The following statement contains a magic number: return 5;
Magic Number,PKHeX.Core,GameUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameUtil.cs,GetGeneration,The following statement contains a magic number: return 6;
Magic Number,PKHeX.Core,GameUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameUtil.cs,GetGeneration,The following statement contains a magic number: return 7;
Magic Number,PKHeX.Core,GameUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameUtil.cs,GetGeneration,The following statement contains a magic number: return 8;
Magic Number,PKHeX.Core,GameUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameUtil.cs,GetVersionsWithinRange,The following statement contains a magic number: obj.MaxGameID == Legal.MaxGameID_7 && generation == 7
Magic Number,PKHeX.Core,LegalityAnalysis,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Analysis.cs,LegalityAnalysis,The following statement contains a magic number: pkm.Format <= 2
Magic Number,PKHeX.Core,LegalityAnalysis,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Analysis.cs,GetParseMethod,The following statement contains a magic number: pkm.Format <= 2
Magic Number,PKHeX.Core,LegalityAnalysis,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Analysis.cs,GetParseMethod,The following statement contains a magic number: return gen switch              {                  3 => ParsePK3'                  4 => ParsePK4'                  5 => ParsePK5'                  6 => ParsePK6'                    1 => ParsePK7'                  2 => ParsePK7'                  7 => ParsePK7'                    8 => (Action)ParsePK8'                    _ => throw new Exception()              };
Magic Number,PKHeX.Core,LegalityAnalysis,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Analysis.cs,GetParseMethod,The following statement contains a magic number: return gen switch              {                  3 => ParsePK3'                  4 => ParsePK4'                  5 => ParsePK5'                  6 => ParsePK6'                    1 => ParsePK7'                  2 => ParsePK7'                  7 => ParsePK7'                    8 => (Action)ParsePK8'                    _ => throw new Exception()              };
Magic Number,PKHeX.Core,LegalityAnalysis,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Analysis.cs,GetParseMethod,The following statement contains a magic number: return gen switch              {                  3 => ParsePK3'                  4 => ParsePK4'                  5 => ParsePK5'                  6 => ParsePK6'                    1 => ParsePK7'                  2 => ParsePK7'                  7 => ParsePK7'                    8 => (Action)ParsePK8'                    _ => throw new Exception()              };
Magic Number,PKHeX.Core,LegalityAnalysis,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Analysis.cs,GetParseMethod,The following statement contains a magic number: return gen switch              {                  3 => ParsePK3'                  4 => ParsePK4'                  5 => ParsePK5'                  6 => ParsePK6'                    1 => ParsePK7'                  2 => ParsePK7'                  7 => ParsePK7'                    8 => (Action)ParsePK8'                    _ => throw new Exception()              };
Magic Number,PKHeX.Core,LegalityAnalysis,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Analysis.cs,GetParseMethod,The following statement contains a magic number: return gen switch              {                  3 => ParsePK3'                  4 => ParsePK4'                  5 => ParsePK5'                  6 => ParsePK6'                    1 => ParsePK7'                  2 => ParsePK7'                  7 => ParsePK7'                    8 => (Action)ParsePK8'                    _ => throw new Exception()              };
Magic Number,PKHeX.Core,LegalityAnalysis,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Analysis.cs,GetParseMethod,The following statement contains a magic number: return gen switch              {                  3 => ParsePK3'                  4 => ParsePK4'                  5 => ParsePK5'                  6 => ParsePK6'                    1 => ParsePK7'                  2 => ParsePK7'                  7 => ParsePK7'                    8 => (Action)ParsePK8'                    _ => throw new Exception()              };
Magic Number,PKHeX.Core,LegalityAnalysis,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Analysis.cs,GetParseMethod,The following statement contains a magic number: return gen switch              {                  3 => ParsePK3'                  4 => ParsePK4'                  5 => ParsePK5'                  6 => ParsePK6'                    1 => ParsePK7'                  2 => ParsePK7'                  7 => ParsePK7'                    8 => (Action)ParsePK8'                    _ => throw new Exception()              };
Magic Number,PKHeX.Core,LegalityAnalysis,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Analysis.cs,ParsePK1,The following statement contains a magic number: pkm.Format == 2
Magic Number,PKHeX.Core,LegalityAnalysis,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Analysis.cs,ParsePK3,The following statement contains a magic number: pkm.Format > 3
Magic Number,PKHeX.Core,LegalityAnalysis,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Analysis.cs,ParsePK3,The following statement contains a magic number: pkm.Format >= 8
Magic Number,PKHeX.Core,LegalityAnalysis,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Analysis.cs,ParsePK4,The following statement contains a magic number: pkm.Format > 4
Magic Number,PKHeX.Core,LegalityAnalysis,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Analysis.cs,ParsePK4,The following statement contains a magic number: pkm.Format >= 8
Magic Number,PKHeX.Core,LegalityAnalysis,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Analysis.cs,ParsePK5,The following statement contains a magic number: pkm.Format >= 8
Magic Number,PKHeX.Core,LegalityAnalysis,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Analysis.cs,ParsePK6,The following statement contains a magic number: pkm.Format >= 8
Magic Number,PKHeX.Core,LegalityAnalysis,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Analysis.cs,ParsePK7,The following statement contains a magic number: pkm.Format >= 8
Magic Number,PKHeX.Core,LegalityAnalysis,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Analysis.cs,UpdateChecks,The following statement contains a magic number: pkm.Format <= 6 && pkm.Format >= 4
Magic Number,PKHeX.Core,LegalityAnalysis,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Analysis.cs,UpdateChecks,The following statement contains a magic number: pkm.Format <= 6 && pkm.Format >= 4
Magic Number,PKHeX.Core,LegalityAnalysis,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Analysis.cs,UpdateChecks,The following statement contains a magic number: pkm.Format < 6
Magic Number,PKHeX.Core,LegalityAnalysis,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Analysis.cs,UpdateChecks,The following statement contains a magic number: pkm.Format < 7
Magic Number,PKHeX.Core,LegalityAnalysis,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Analysis.cs,GetLegalityReport,The following statement contains a magic number: i < 4
Magic Number,PKHeX.Core,LegalityAnalysis,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Analysis.cs,GetLegalityReport,The following statement contains a magic number: i < 4
Magic Number,PKHeX.Core,LegalityAnalysis,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Analysis.cs,GetLegalityReport,The following statement contains a magic number: pkm.Format >= 6
Magic Number,PKHeX.Core,LegalityAnalysis,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Analysis.cs,GetVerboseLegalityReport,The following statement contains a magic number: i < 4
Magic Number,PKHeX.Core,LegalityAnalysis,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Analysis.cs,GetVerboseLegalityReport,The following statement contains a magic number: i < 4
Magic Number,PKHeX.Core,LegalityAnalysis,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Analysis.cs,GetVerboseLegalityReport,The following statement contains a magic number: pkm.Format >= 6
Magic Number,PKHeX.Core,LegalityAnalysis,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Analysis.cs,GetSuggestedRelearn,The following statement contains a magic number: return new int[4];
Magic Number,PKHeX.Core,LegalityAnalysis,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Analysis.cs,GetSuggestedRelearn,The following statement contains a magic number: Info?.RelearnBase == null || Info.Generation < 6
Magic Number,PKHeX.Core,LegalityAnalysis,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Analysis.cs,GetSuggestedRelearn,The following statement contains a magic number: int[] moves = new int[4];
Magic Number,PKHeX.Core,LegalityAnalysis,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Analysis.cs,GetSuggestedRelearn,The following statement contains a magic number: int start = Math.Max(0' window.Count - 4);
Magic Number,PKHeX.Core,LegalityAnalysis,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Analysis.cs,GetSuggestedRelearn,The following statement contains a magic number: int count = Math.Min(4' window.Count);
Magic Number,PKHeX.Core,LegalityAnalysis,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Analysis.cs,GetSuggestedMoves,The following statement contains a magic number: return new int[4];
Magic Number,PKHeX.Core,LegalityAnalysis,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Analysis.cs,GetSuggestedMoves,The following statement contains a magic number: pkm.IsEgg && pkm.Format <= 5
Magic Number,PKHeX.Core,LegalityAnalysis,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Analysis.cs,GetSuggestedMoves,The following statement contains a magic number: var lvl = pkm.Format >= 7 ? pkm.Met_Level : pkm.CurrentLevel;
Magic Number,PKHeX.Core,LegalityAnalysis,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Analysis.cs,GetSuggestedMoves,The following statement contains a magic number: Info.Generation <= 2
Magic Number,PKHeX.Core,EncounterArea,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterArea.cs,GetSimpleEncounterArea,The following statement contains a magic number: var count = species.Length * (lvls.Length / 2);
Magic Number,PKHeX.Core,EncounterArea1,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterArea1.cs,ReadSlots1FishingYellow,The following statement contains a magic number: int[] specieslist = { 060' 061' 072' 073' 090' 098' 099' 116' 117' 118' 119' 120' 129' 130' 147' 148' };
Magic Number,PKHeX.Core,EncounterArea1,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterArea1.cs,ReadSlots1FishingYellow,The following statement contains a magic number: int[] specieslist = { 060' 061' 072' 073' 090' 098' 099' 116' 117' 118' 119' 120' 129' 130' 147' 148' };
Magic Number,PKHeX.Core,EncounterArea1,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterArea1.cs,ReadSlots1FishingYellow,The following statement contains a magic number: int[] specieslist = { 060' 061' 072' 073' 090' 098' 099' 116' 117' 118' 119' 120' 129' 130' 147' 148' };
Magic Number,PKHeX.Core,EncounterArea1,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterArea1.cs,ReadSlots1FishingYellow,The following statement contains a magic number: int[] specieslist = { 060' 061' 072' 073' 090' 098' 099' 116' 117' 118' 119' 120' 129' 130' 147' 148' };
Magic Number,PKHeX.Core,EncounterArea1,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterArea1.cs,ReadSlots1FishingYellow,The following statement contains a magic number: int[] specieslist = { 060' 061' 072' 073' 090' 098' 099' 116' 117' 118' 119' 120' 129' 130' 147' 148' };
Magic Number,PKHeX.Core,EncounterArea1,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterArea1.cs,ReadSlots1FishingYellow,The following statement contains a magic number: int[] specieslist = { 060' 061' 072' 073' 090' 098' 099' 116' 117' 118' 119' 120' 129' 130' 147' 148' };
Magic Number,PKHeX.Core,EncounterArea1,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterArea1.cs,ReadSlots1FishingYellow,The following statement contains a magic number: int[] specieslist = { 060' 061' 072' 073' 090' 098' 099' 116' 117' 118' 119' 120' 129' 130' 147' 148' };
Magic Number,PKHeX.Core,EncounterArea1,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterArea1.cs,ReadSlots1FishingYellow,The following statement contains a magic number: int[] specieslist = { 060' 061' 072' 073' 090' 098' 099' 116' 117' 118' 119' 120' 129' 130' 147' 148' };
Magic Number,PKHeX.Core,EncounterArea1,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterArea1.cs,ReadSlots1FishingYellow,The following statement contains a magic number: int[] specieslist = { 060' 061' 072' 073' 090' 098' 099' 116' 117' 118' 119' 120' 129' 130' 147' 148' };
Magic Number,PKHeX.Core,EncounterArea1,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterArea1.cs,ReadSlots1FishingYellow,The following statement contains a magic number: int[] specieslist = { 060' 061' 072' 073' 090' 098' 099' 116' 117' 118' 119' 120' 129' 130' 147' 148' };
Magic Number,PKHeX.Core,EncounterArea1,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterArea1.cs,ReadSlots1FishingYellow,The following statement contains a magic number: int[] specieslist = { 060' 061' 072' 073' 090' 098' 099' 116' 117' 118' 119' 120' 129' 130' 147' 148' };
Magic Number,PKHeX.Core,EncounterArea1,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterArea1.cs,ReadSlots1FishingYellow,The following statement contains a magic number: int[] specieslist = { 060' 061' 072' 073' 090' 098' 099' 116' 117' 118' 119' 120' 129' 130' 147' 148' };
Magic Number,PKHeX.Core,EncounterArea1,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterArea1.cs,ReadSlots1FishingYellow,The following statement contains a magic number: int[] specieslist = { 060' 061' 072' 073' 090' 098' 099' 116' 117' 118' 119' 120' 129' 130' 147' 148' };
Magic Number,PKHeX.Core,EncounterArea1,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterArea1.cs,ReadSlots1FishingYellow,The following statement contains a magic number: int[] specieslist = { 060' 061' 072' 073' 090' 098' 099' 116' 117' 118' 119' 120' 129' 130' 147' 148' };
Magic Number,PKHeX.Core,EncounterArea1,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterArea1.cs,ReadSlots1FishingYellow,The following statement contains a magic number: int[] specieslist = { 060' 061' 072' 073' 090' 098' 099' 116' 117' 118' 119' 120' 129' 130' 147' 148' };
Magic Number,PKHeX.Core,EncounterArea1,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterArea1.cs,ReadSlots1FishingYellow,The following statement contains a magic number: int[] specieslist = { 060' 061' 072' 073' 090' 098' 099' 116' 117' 118' 119' 120' 129' 130' 147' 148' };
Magic Number,PKHeX.Core,EncounterArea1,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterArea1.cs,ReadSlots1FishingYellow,The following statement contains a magic number: int lvl = Array.IndexOf(Levelbytelist' data[ofs++]) * 5;
Magic Number,PKHeX.Core,EncounterArea1,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterArea1.cs,GetArray1GrassWater,The following statement contains a magic number: var ptr = new int[255];
Magic Number,PKHeX.Core,EncounterArea1,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterArea1.cs,GetArray1GrassWater,The following statement contains a magic number: ptr[i] = BitConverter.ToInt16(data' i * 2);
Magic Number,PKHeX.Core,EncounterArea1,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterArea1.cs,GetArray1FishingYellow,The following statement contains a magic number: const int size = 9;
Magic Number,PKHeX.Core,EncounterArea1,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterArea1.cs,GetArray1FishingYellow,The following statement contains a magic number: areas[i] = new EncounterArea1                  {                      Location = data[(i * size) + 0]'                      Slots = ReadSlots1FishingYellow(data' ref ofs' 4' SlotType.Super_Rod' -1)                  };
Magic Number,PKHeX.Core,EncounterArea1,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterArea1.cs,GetArray1Fishing,The following statement contains a magic number: var ptr = new int[255];
Magic Number,PKHeX.Core,EncounterArea1,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterArea1.cs,GetArray1Fishing,The following statement contains a magic number: var map = new int[255];
Magic Number,PKHeX.Core,EncounterArea1,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterArea1.cs,GetArray1Fishing,The following statement contains a magic number: map[i] = data[(i * 3) + 0];
Magic Number,PKHeX.Core,EncounterArea1,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterArea1.cs,GetArray1Fishing,The following statement contains a magic number: ptr[i] = BitConverter.ToInt16(data' (i * 3) + 1);
Magic Number,PKHeX.Core,EncounterArea1,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterArea1.cs,GetSlots1GrassWater,The following statement contains a magic number: return rate == 0 ? Enumerable.Empty<EncounterSlot1>() : ReadSlots1(data' ref ofs' 10' t' rate);
Magic Number,PKHeX.Core,EncounterArea2,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterArea2.cs,GetArray2GrassWater,The following statement contains a magic number: areas.AddRange(GetAreas2(data' ref ofs' SlotType.Grass' 3' 7));
Magic Number,PKHeX.Core,EncounterArea2,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterArea2.cs,GetArray2GrassWater,The following statement contains a magic number: areas.AddRange(GetAreas2(data' ref ofs' SlotType.Grass' 3' 7));
Magic Number,PKHeX.Core,EncounterArea2,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterArea2.cs,GetArray2GrassWater,The following statement contains a magic number: areas.AddRange(GetAreas2(data' ref ofs' SlotType.Surf' 1' 3));
Magic Number,PKHeX.Core,EncounterArea2,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterArea2.cs,GetArray2GrassWater,The following statement contains a magic number: areas.AddRange(GetAreas2(data' ref ofs' SlotType.Grass' 3' 7));
Magic Number,PKHeX.Core,EncounterArea2,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterArea2.cs,GetArray2GrassWater,The following statement contains a magic number: areas.AddRange(GetAreas2(data' ref ofs' SlotType.Grass' 3' 7));
Magic Number,PKHeX.Core,EncounterArea2,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterArea2.cs,GetArray2GrassWater,The following statement contains a magic number: areas.AddRange(GetAreas2(data' ref ofs' SlotType.Surf' 1' 3));
Magic Number,PKHeX.Core,EncounterArea2,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterArea2.cs,GetArray2GrassWater,The following statement contains a magic number: areas.AddRange(GetAreas2(data' ref ofs' SlotType.Swarm' 3' 7));
Magic Number,PKHeX.Core,EncounterArea2,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterArea2.cs,GetArray2GrassWater,The following statement contains a magic number: areas.AddRange(GetAreas2(data' ref ofs' SlotType.Swarm' 3' 7));
Magic Number,PKHeX.Core,EncounterArea2,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterArea2.cs,GetArray2GrassWater,The following statement contains a magic number: areas.AddRange(GetAreas2(data' ref ofs' SlotType.Special' 1' 3));
Magic Number,PKHeX.Core,EncounterArea2,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterArea2.cs,GetArray2Fishing,The following statement contains a magic number: areas.Add(new EncounterArea2 { Location = 0x2E' Slots = f[3].Slots });
Magic Number,PKHeX.Core,EncounterArea2,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterArea2.cs,GetSlots2Fishing,The following statement contains a magic number: const int size = 3;
Magic Number,PKHeX.Core,EncounterArea2,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterArea2.cs,GetSlots2Headbutt,The following statement contains a magic number: int tableCount = t == SlotType.Headbutt ? 2 : 1;
Magic Number,PKHeX.Core,EncounterArea2,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterArea2.cs,GetSlots2Headbutt,The following statement contains a magic number: slottype = tableCount == 2 ? SlotType.Headbutt_Special : SlotType.Headbutt;
Magic Number,PKHeX.Core,EncounterArea2,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterArea2.cs,GetAreas2,The following statement contains a magic number: var location = data[ofs++] << 8 | data[ofs++];
Magic Number,PKHeX.Core,EncounterArea2,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterArea2.cs,GetAreas2Fishing,The following statement contains a magic number: areas.Add(new EncounterArea2                  {                      Slots = GetSlots2Fishing(data' ref ofs' types[0])                          .Concat(GetSlots2Fishing(data' ref ofs' types[1]))                          .Concat(GetSlots2Fishing(data' ref ofs' types[2])).ToArray()                  });
Magic Number,PKHeX.Core,EncounterArea2,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterArea2.cs,GetAreas2Fishing,The following statement contains a magic number: int index = slot.LevelMin * 2;
Magic Number,PKHeX.Core,EncounterArea2,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterArea2.cs,GetAreas2Fishing,The following statement contains a magic number: j < 2
Magic Number,PKHeX.Core,EncounterArea2,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterArea2.cs,GetAreas2Headbutt,The following statement contains a magic number: head.Add(new EncounterArea2                  {                      Location = (data[ofs++] << 8) | data[ofs++]'                      //Slots = null' // later                  });
Magic Number,PKHeX.Core,EncounterArea2,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterArea2.cs,GetAreas2Headbutt,The following statement contains a magic number: rock.Add(new EncounterArea2                  {                      Location = (data[ofs++] << 8) | data[ofs++]'                      //Slots = null' // later                  });
Magic Number,PKHeX.Core,EncounterArea2,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterArea2.cs,GetAreas2Headbutt,The following statement contains a magic number: int[] ptr = new int[data.Length == 0x109 ? 6 : 9];
Magic Number,PKHeX.Core,EncounterArea2,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterArea2.cs,GetAreas2Headbutt,The following statement contains a magic number: int[] ptr = new int[data.Length == 0x109 ? 6 : 9];
Magic Number,PKHeX.Core,EncounterArea2,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterArea2.cs,GetAreas2Headbutt,The following statement contains a magic number: ptr[i] = data[ofs++] | (data[ofs++] << 8);
Magic Number,PKHeX.Core,EncounterArea3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterArea3.cs,GetSlots3,The following statement contains a magic number: ofs += 2 + (numslots * 4);
Magic Number,PKHeX.Core,EncounterArea3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterArea3.cs,GetSlots3,The following statement contains a magic number: ofs += 2 + (numslots * 4);
Magic Number,PKHeX.Core,EncounterArea3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterArea3.cs,ReadInSlots,The following statement contains a magic number: int o = ofs + (i * 4);
Magic Number,PKHeX.Core,EncounterArea3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterArea3.cs,ReadInSlots,The following statement contains a magic number: int species = BitConverter.ToInt16(data' o + 4);
Magic Number,PKHeX.Core,EncounterArea3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterArea3.cs,ReadInSlots,The following statement contains a magic number: slots.Add(new EncounterSlot                  {                      LevelMin = data[o + 2]'                      LevelMax = data[o + 3]'                      Species = species'                      SlotNumber = i'                      Type = t                  });
Magic Number,PKHeX.Core,EncounterArea3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterArea3.cs,ReadInSlots,The following statement contains a magic number: slots.Add(new EncounterSlot                  {                      LevelMin = data[o + 2]'                      LevelMax = data[o + 3]'                      Species = species'                      SlotNumber = i'                      Type = t                  });
Magic Number,PKHeX.Core,EncounterArea3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterArea3.cs,GetSlots3Fishing,The following statement contains a magic number: ofs += 2 + (numslots * 4);
Magic Number,PKHeX.Core,EncounterArea3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterArea3.cs,GetSlots3Fishing,The following statement contains a magic number: ofs += 2 + (numslots * 4);
Magic Number,PKHeX.Core,EncounterArea3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterArea3.cs,ReadFishingSlots,The following statement contains a magic number: int Species = BitConverter.ToInt16(data' ofs + 4 + (i * 4));
Magic Number,PKHeX.Core,EncounterArea3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterArea3.cs,ReadFishingSlots,The following statement contains a magic number: int Species = BitConverter.ToInt16(data' ofs + 4 + (i * 4));
Magic Number,PKHeX.Core,EncounterArea3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterArea3.cs,ReadFishingSlots,The following statement contains a magic number: var slot = new EncounterSlot                  {                      LevelMin = data[ofs + 2 + (i * 4)]'                      LevelMax = data[ofs + 3 + (i * 4)]'                      Species = Species'                  };
Magic Number,PKHeX.Core,EncounterArea3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterArea3.cs,ReadFishingSlots,The following statement contains a magic number: var slot = new EncounterSlot                  {                      LevelMin = data[ofs + 2 + (i * 4)]'                      LevelMax = data[ofs + 3 + (i * 4)]'                      Species = Species'                  };
Magic Number,PKHeX.Core,EncounterArea3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterArea3.cs,ReadFishingSlots,The following statement contains a magic number: var slot = new EncounterSlot                  {                      LevelMin = data[ofs + 2 + (i * 4)]'                      LevelMax = data[ofs + 3 + (i * 4)]'                      Species = Species'                  };
Magic Number,PKHeX.Core,EncounterArea3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterArea3.cs,ReadFishingSlots,The following statement contains a magic number: var slot = new EncounterSlot                  {                      LevelMin = data[ofs + 2 + (i * 4)]'                      LevelMax = data[ofs + 3 + (i * 4)]'                      Species = Species'                  };
Magic Number,PKHeX.Core,EncounterArea3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterArea3.cs,ReadFishingSlots,The following statement contains a magic number: i < 2
Magic Number,PKHeX.Core,EncounterArea3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterArea3.cs,GetArea3,The following statement contains a magic number: var HaveSurfSlots = data[2] == 1;
Magic Number,PKHeX.Core,EncounterArea3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterArea3.cs,GetArea3,The following statement contains a magic number: var HaveRockSmashSlots = data[3] == 1;
Magic Number,PKHeX.Core,EncounterArea3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterArea3.cs,GetArea3,The following statement contains a magic number: var HaveFishingSlots = data[4] == 1;
Magic Number,PKHeX.Core,EncounterArea3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterArea3.cs,GetArea3,The following statement contains a magic number: int offset = 5;
Magic Number,PKHeX.Core,EncounterArea3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterArea3.cs,GetArea3,The following statement contains a magic number: slots.AddRange(GetSlots3(data' ref offset' 12' SlotType.Grass));
Magic Number,PKHeX.Core,EncounterArea3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterArea3.cs,GetArea3,The following statement contains a magic number: slots.AddRange(GetSlots3(data' ref offset' 5' SlotType.Surf));
Magic Number,PKHeX.Core,EncounterArea3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterArea3.cs,GetArea3,The following statement contains a magic number: slots.AddRange(GetSlots3(data' ref offset' 5' SlotType.Rock_Smash));
Magic Number,PKHeX.Core,EncounterArea3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterArea3.cs,GetArea3,The following statement contains a magic number: slots.AddRange(GetSlots3Fishing(data' ref offset' 10));
Magic Number,PKHeX.Core,EncounterArea3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterArea3.cs,GetMatchFromEvoLevel,The following statement contains a magic number: pkm.Format != 3
Magic Number,PKHeX.Core,EncounterArea32,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterArea32.cs,LoadSlots,The following statement contains a magic number: var count = (areaData.Length - 2) / 4;
Magic Number,PKHeX.Core,EncounterArea32,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterArea32.cs,LoadSlots,The following statement contains a magic number: var count = (areaData.Length - 2) / 4;
Magic Number,PKHeX.Core,EncounterArea32,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterArea32.cs,LoadSlots,The following statement contains a magic number: int ofs = 2 + (i * 4);
Magic Number,PKHeX.Core,EncounterArea32,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterArea32.cs,LoadSlots,The following statement contains a magic number: int ofs = 2 + (i * 4);
Magic Number,PKHeX.Core,EncounterArea32,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterArea32.cs,LoadSlots,The following statement contains a magic number: Slots[i] = new EncounterSlot                  {                      Species = SpecForm & 0x7FF'                      Form = SpecForm >> 11'                      LevelMin = areaData[ofs + 2]'                      LevelMax = areaData[ofs + 3]'                  };
Magic Number,PKHeX.Core,EncounterArea32,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterArea32.cs,LoadSlots,The following statement contains a magic number: Slots[i] = new EncounterSlot                  {                      Species = SpecForm & 0x7FF'                      Form = SpecForm >> 11'                      LevelMin = areaData[ofs + 2]'                      LevelMax = areaData[ofs + 3]'                  };
Magic Number,PKHeX.Core,EncounterArea32,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterArea32.cs,LoadSlots,The following statement contains a magic number: Slots[i] = new EncounterSlot                  {                      Species = SpecForm & 0x7FF'                      Form = SpecForm >> 11'                      LevelMin = areaData[ofs + 2]'                      LevelMax = areaData[ofs + 3]'                  };
Magic Number,PKHeX.Core,EncounterArea4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterArea4.cs,GetSlots4GrassSlotReplace,The following statement contains a magic number: int species = BitConverter.ToUInt16(data' ofs + (i / (4 / slotSize) * slotSize));
Magic Number,PKHeX.Core,EncounterArea4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterArea4.cs,GetMatchFromEvoLevel,The following statement contains a magic number: pkm.Format != 4
Magic Number,PKHeX.Core,EncounterArea4DPPt,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterArea4DPPt.cs,GetSlots4GrassDPPt,The following statement contains a magic number: int o = ofs + (i * 8);
Magic Number,PKHeX.Core,EncounterArea4DPPt,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterArea4DPPt.cs,GetSlots4GrassDPPt,The following statement contains a magic number: int species = BitConverter.ToInt32(data' o + 4);
Magic Number,PKHeX.Core,EncounterArea4DPPt,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterArea4DPPt.cs,GetSlots4WaterFishingDPPt,The following statement contains a magic number: int Species = BitConverter.ToInt32(data' ofs + 4 + (i * 8));
Magic Number,PKHeX.Core,EncounterArea4DPPt,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterArea4DPPt.cs,GetSlots4WaterFishingDPPt,The following statement contains a magic number: int Species = BitConverter.ToInt32(data' ofs + 4 + (i * 8));
Magic Number,PKHeX.Core,EncounterArea4DPPt,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterArea4DPPt.cs,GetSlots4WaterFishingDPPt,The following statement contains a magic number: slots.Add(new EncounterSlot                  {                      LevelMax = data[ofs + 0 + (i * 8)]'                      LevelMin = data[ofs + 1 + (i * 8)]'                      Species = Species'                      SlotNumber = i'                      Type = t                  });
Magic Number,PKHeX.Core,EncounterArea4DPPt,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterArea4DPPt.cs,GetSlots4WaterFishingDPPt,The following statement contains a magic number: slots.Add(new EncounterSlot                  {                      LevelMax = data[ofs + 0 + (i * 8)]'                      LevelMin = data[ofs + 1 + (i * 8)]'                      Species = Species'                      SlotNumber = i'                      Type = t                  });
Magic Number,PKHeX.Core,EncounterArea4DPPt,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterArea4DPPt.cs,GetArea4DPPt,The following statement contains a magic number: EncounterSlot[] GrassSlots = GetSlots4GrassDPPt(data' 0x06' 12' SlotType.Grass);
Magic Number,PKHeX.Core,EncounterArea4DPPt,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterArea4DPPt.cs,GetArea4DPPt,The following statement contains a magic number: var swarm = GetSlots4GrassSlotReplace(data' 0x66' 4' GrassSlots' Legal.Slot4_Swarm' SlotType.Swarm);
Magic Number,PKHeX.Core,EncounterArea4DPPt,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterArea4DPPt.cs,GetArea4DPPt,The following statement contains a magic number: var morning = GetSlots4GrassSlotReplace(data' 0x6E' 4' GrassSlots' Legal.Slot4_Time);
Magic Number,PKHeX.Core,EncounterArea4DPPt,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterArea4DPPt.cs,GetArea4DPPt,The following statement contains a magic number: var night = GetSlots4GrassSlotReplace(data' 0x76' 4' GrassSlots' Legal.Slot4_Time);
Magic Number,PKHeX.Core,EncounterArea4DPPt,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterArea4DPPt.cs,GetArea4DPPt,The following statement contains a magic number: var radar = GetSlots4GrassSlotReplace(data' 0x7E' 4' GrassSlots' Legal.Slot4_Radar' SlotType.Pokeradar);
Magic Number,PKHeX.Core,EncounterArea4DPPt,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterArea4DPPt.cs,GetArea4DPPt,The following statement contains a magic number: var ruby = GetSlots4GrassSlotReplace(data' 0xA6' 4' GrassSlots' Legal.Slot4_Dual);
Magic Number,PKHeX.Core,EncounterArea4DPPt,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterArea4DPPt.cs,GetArea4DPPt,The following statement contains a magic number: var sapphire = GetSlots4GrassSlotReplace(data' 0xAE' 4' GrassSlots' Legal.Slot4_Dual);
Magic Number,PKHeX.Core,EncounterArea4DPPt,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterArea4DPPt.cs,GetArea4DPPt,The following statement contains a magic number: var emerald = GetSlots4GrassSlotReplace(data' 0xB6' 4' GrassSlots' Legal.Slot4_Dual);
Magic Number,PKHeX.Core,EncounterArea4DPPt,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterArea4DPPt.cs,GetArea4DPPt,The following statement contains a magic number: var firered = GetSlots4GrassSlotReplace(data' 0xBE' 4' GrassSlots' Legal.Slot4_Dual);
Magic Number,PKHeX.Core,EncounterArea4DPPt,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterArea4DPPt.cs,GetArea4DPPt,The following statement contains a magic number: var leafgreen = GetSlots4GrassSlotReplace(data' 0xC6' 4' GrassSlots' Legal.Slot4_Dual);
Magic Number,PKHeX.Core,EncounterArea4DPPt,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterArea4DPPt.cs,GetArea4DPPt,The following statement contains a magic number: var regular = new List<List<EncounterSlot>> { GrassSlots.Where(z => z.SlotNumber == 6 || z.SlotNumber == 7).ToList() };
Magic Number,PKHeX.Core,EncounterArea4DPPt,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterArea4DPPt.cs,GetArea4DPPt,The following statement contains a magic number: var regular = new List<List<EncounterSlot>> { GrassSlots.Where(z => z.SlotNumber == 6 || z.SlotNumber == 7).ToList() };
Magic Number,PKHeX.Core,EncounterArea4DPPt,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterArea4DPPt.cs,GetArea4DPPt,The following statement contains a magic number: location == 68
Magic Number,PKHeX.Core,EncounterArea4DPPt,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterArea4DPPt.cs,GetArea4DPPt,The following statement contains a magic number: Slots.AddRange(GetSlots4WaterFishingDPPt(data' 0xD2' 5' SlotType.Surf));
Magic Number,PKHeX.Core,EncounterArea4DPPt,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterArea4DPPt.cs,GetArea4DPPt,The following statement contains a magic number: Slots.AddRange(GetSlots4WaterFishingDPPt(data' 0x12A' 5' SlotType.Old_Rod));
Magic Number,PKHeX.Core,EncounterArea4DPPt,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterArea4DPPt.cs,GetArea4DPPt,The following statement contains a magic number: Slots.AddRange(GetSlots4WaterFishingDPPt(data' 0x156' 5' SlotType.Good_Rod));
Magic Number,PKHeX.Core,EncounterArea4DPPt,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterArea4DPPt.cs,GetArea4DPPt,The following statement contains a magic number: Slots.AddRange(GetSlots4WaterFishingDPPt(data' 0x182' 5' SlotType.Super_Rod));
Magic Number,PKHeX.Core,EncounterArea4HGSS,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterArea4HGSS.cs,GetSlots4GrassHGSS,The following statement contains a magic number: var slots = new EncounterSlot[numslots * 3];
Magic Number,PKHeX.Core,EncounterArea4HGSS,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterArea4HGSS.cs,GetSlots4GrassHGSS,The following statement contains a magic number: int species = BitConverter.ToUInt16(data' ofs + numslots + (i * 2));
Magic Number,PKHeX.Core,EncounterArea4HGSS,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterArea4HGSS.cs,GetSlots4GrassHGSS,The following statement contains a magic number: slots[numslots + i].Species = BitConverter.ToUInt16(data' ofs + (numslots * 3) + (i * 2));
Magic Number,PKHeX.Core,EncounterArea4HGSS,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterArea4HGSS.cs,GetSlots4GrassHGSS,The following statement contains a magic number: slots[numslots + i].Species = BitConverter.ToUInt16(data' ofs + (numslots * 3) + (i * 2));
Magic Number,PKHeX.Core,EncounterArea4HGSS,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterArea4HGSS.cs,GetSlots4GrassHGSS,The following statement contains a magic number: slots[(numslots * 2) + i] = slots[i].Clone();
Magic Number,PKHeX.Core,EncounterArea4HGSS,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterArea4HGSS.cs,GetSlots4GrassHGSS,The following statement contains a magic number: slots[(numslots * 2) + i].Species = BitConverter.ToUInt16(data' ofs + (numslots * 5) + (i * 2));
Magic Number,PKHeX.Core,EncounterArea4HGSS,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterArea4HGSS.cs,GetSlots4GrassHGSS,The following statement contains a magic number: slots[(numslots * 2) + i].Species = BitConverter.ToUInt16(data' ofs + (numslots * 5) + (i * 2));
Magic Number,PKHeX.Core,EncounterArea4HGSS,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterArea4HGSS.cs,GetSlots4GrassHGSS,The following statement contains a magic number: slots[(numslots * 2) + i].Species = BitConverter.ToUInt16(data' ofs + (numslots * 5) + (i * 2));
Magic Number,PKHeX.Core,EncounterArea4HGSS,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterArea4HGSS.cs,GetSlots4GrassHGSS,The following statement contains a magic number: slots[(numslots * 2) + i].Type = t;
Magic Number,PKHeX.Core,EncounterArea4HGSS,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterArea4HGSS.cs,GetSlots4WaterFishingHGSS,The following statement contains a magic number: int Species = BitConverter.ToInt16(data' ofs + 2 + (i * 4));
Magic Number,PKHeX.Core,EncounterArea4HGSS,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterArea4HGSS.cs,GetSlots4WaterFishingHGSS,The following statement contains a magic number: int Species = BitConverter.ToInt16(data' ofs + 2 + (i * 4));
Magic Number,PKHeX.Core,EncounterArea4HGSS,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterArea4HGSS.cs,GetSlots4WaterFishingHGSS,The following statement contains a magic number: slots.Add(new EncounterSlot                  {                      LevelMin = data[ofs + 0 + (i * 4)]'                      LevelMax = data[ofs + 1 + (i * 4)]'                      Species = Species'                      SlotNumber = i'                      Type = t                  });
Magic Number,PKHeX.Core,EncounterArea4HGSS,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterArea4HGSS.cs,GetSlots4WaterFishingHGSS,The following statement contains a magic number: slots.Add(new EncounterSlot                  {                      LevelMin = data[ofs + 0 + (i * 4)]'                      LevelMax = data[ofs + 1 + (i * 4)]'                      Species = Species'                      SlotNumber = i'                      Type = t                  });
Magic Number,PKHeX.Core,EncounterArea4HGSS,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterArea4HGSS.cs,GetArea4HGSS,The following statement contains a magic number: var GrassSlots = GetSlots4GrassHGSS(data' 0x0A' 12' SlotType.Grass);
Magic Number,PKHeX.Core,EncounterArea4HGSS,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterArea4HGSS.cs,GetArea4HGSS,The following statement contains a magic number: var hoenn = GetSlots4GrassSlotReplace(data' 0x5E' 2' GrassSlots' Legal.Slot4_Sound);
Magic Number,PKHeX.Core,EncounterArea4HGSS,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterArea4HGSS.cs,GetArea4HGSS,The following statement contains a magic number: var sinnoh = GetSlots4GrassSlotReplace(data' 0x62' 2' GrassSlots' Legal.Slot4_Sound);
Magic Number,PKHeX.Core,EncounterArea4HGSS,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterArea4HGSS.cs,GetArea4HGSS,The following statement contains a magic number: var grass1 = GrassSlots.Take(12).ToList();
Magic Number,PKHeX.Core,EncounterArea4HGSS,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterArea4HGSS.cs,GetArea4HGSS,The following statement contains a magic number: var grass2 = GrassSlots.Skip(12).Take(12).ToList();
Magic Number,PKHeX.Core,EncounterArea4HGSS,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterArea4HGSS.cs,GetArea4HGSS,The following statement contains a magic number: var grass2 = GrassSlots.Skip(12).Take(12).ToList();
Magic Number,PKHeX.Core,EncounterArea4HGSS,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterArea4HGSS.cs,GetArea4HGSS,The following statement contains a magic number: var grass3 = GrassSlots.Skip(24).ToList();
Magic Number,PKHeX.Core,EncounterArea4HGSS,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterArea4HGSS.cs,GetArea4HGSS,The following statement contains a magic number: Slots.AddRange(GetSlots4WaterFishingHGSS(data' 0x66' 5' SlotType.Surf));
Magic Number,PKHeX.Core,EncounterArea4HGSS,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterArea4HGSS.cs,GetArea4HGSS,The following statement contains a magic number: Slots.AddRange(GetSlots4WaterFishingHGSS(data' 0x7A' 2' SlotType.Rock_Smash));
Magic Number,PKHeX.Core,EncounterArea4HGSS,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterArea4HGSS.cs,GetArea4HGSS,The following statement contains a magic number: Slots.AddRange(GetSlots4WaterFishingHGSS(data' 0x82' 5' SlotType.Old_Rod));
Magic Number,PKHeX.Core,EncounterArea4HGSS,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterArea4HGSS.cs,GetArea4HGSS,The following statement contains a magic number: Slots.AddRange(GetSlots4WaterFishingHGSS(data' 0x96' 5' SlotType.Good_Rod));
Magic Number,PKHeX.Core,EncounterArea4HGSS,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterArea4HGSS.cs,GetArea4HGSS,The following statement contains a magic number: Slots.AddRange(GetSlots4WaterFishingHGSS(data' 0xAA' 5' SlotType.Super_Rod));
Magic Number,PKHeX.Core,EncounterArea4HGSS,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterArea4HGSS.cs,GetArea4HGSS,The following statement contains a magic number: data[0xC2] == 120
Magic Number,PKHeX.Core,EncounterArea4HGSS,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterArea4HGSS.cs,GetArea4HeadbuttHGSS,The following statement contains a magic number: data.Length < 78
Magic Number,PKHeX.Core,EncounterArea4HGSS,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterArea4HGSS.cs,GetArea4HeadbuttHGSS,The following statement contains a magic number: int Species = BitConverter.ToInt16(data' 6 + (i * 4));
Magic Number,PKHeX.Core,EncounterArea4HGSS,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterArea4HGSS.cs,GetArea4HeadbuttHGSS,The following statement contains a magic number: int Species = BitConverter.ToInt16(data' 6 + (i * 4));
Magic Number,PKHeX.Core,EncounterArea4HGSS,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterArea4HGSS.cs,GetArea4HeadbuttHGSS,The following statement contains a magic number: Slots.Add(new EncounterSlot                  {                      Species = Species'                      LevelMin = data[8 + (i * 4)]'                      LevelMax = data[9 + (i * 4)]'                      Type = i <= 11 ? SlotType.Headbutt : SlotType.Headbutt_Special                  });
Magic Number,PKHeX.Core,EncounterArea4HGSS,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterArea4HGSS.cs,GetArea4HeadbuttHGSS,The following statement contains a magic number: Slots.Add(new EncounterSlot                  {                      Species = Species'                      LevelMin = data[8 + (i * 4)]'                      LevelMax = data[9 + (i * 4)]'                      Type = i <= 11 ? SlotType.Headbutt : SlotType.Headbutt_Special                  });
Magic Number,PKHeX.Core,EncounterArea4HGSS,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterArea4HGSS.cs,GetArea4HeadbuttHGSS,The following statement contains a magic number: Slots.Add(new EncounterSlot                  {                      Species = Species'                      LevelMin = data[8 + (i * 4)]'                      LevelMax = data[9 + (i * 4)]'                      Type = i <= 11 ? SlotType.Headbutt : SlotType.Headbutt_Special                  });
Magic Number,PKHeX.Core,EncounterArea4HGSS,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterArea4HGSS.cs,GetArea4HeadbuttHGSS,The following statement contains a magic number: Slots.Add(new EncounterSlot                  {                      Species = Species'                      LevelMin = data[8 + (i * 4)]'                      LevelMax = data[9 + (i * 4)]'                      Type = i <= 11 ? SlotType.Headbutt : SlotType.Headbutt_Special                  });
Magic Number,PKHeX.Core,EncounterArea4HGSS,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterArea4HGSS.cs,GetArea4HeadbuttHGSS,The following statement contains a magic number: Slots.Add(new EncounterSlot                  {                      Species = Species'                      LevelMin = data[8 + (i * 4)]'                      LevelMax = data[9 + (i * 4)]'                      Type = i <= 11 ? SlotType.Headbutt : SlotType.Headbutt_Special                  });
Magic Number,PKHeX.Core,EncounterArea4HGSS,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterArea4HGSS.cs,GetArea4HeadbuttHGSS,The following statement contains a magic number: i < 18
Magic Number,PKHeX.Core,EncounterArea6AO,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterArea6AO.cs,GetFilteredSlots,The following statement contains a magic number: bool nav = s.Permissions.AllowDexNav && (pkm.RelearnMove1 != 0 || pkm.AbilityNumber == 4);
Magic Number,PKHeX.Core,EncounterArea6XY,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterArea6XY.cs,GetValidFriendSafari,The following statement contains a magic number: !pkm.XY || pkm.Met_Location != 148 || pkm.Met_Level != 30 || pkm.Egg_Location != 0
Magic Number,PKHeX.Core,EncounterArea6XY,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterArea6XY.cs,GetValidFriendSafari,The following statement contains a magic number: !pkm.XY || pkm.Met_Location != 148 || pkm.Met_Level != 30 || pkm.Egg_Location != 0
Magic Number,PKHeX.Core,EncounterArea6XY,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterArea6XY.cs,GetValidFriendSafari,The following statement contains a magic number: var vs = EvolutionChain.GetValidPreEvolutions(pkm).Where(d => d.Level >= 30);
Magic Number,PKHeX.Core,EncounterArea7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterArea7.cs,GetFilteredSlots,The following statement contains a magic number: switch (species)              {                  case 744 when form == 1: // Rockruff Event                  case 745 when form == 2: // Lycanroc Event                      yield break;              }
Magic Number,PKHeX.Core,EncounterArea7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterArea7.cs,GetFilteredSlots,The following statement contains a magic number: switch (species)              {                  case 744 when form == 1: // Rockruff Event                  case 745 when form == 2: // Lycanroc Event                      yield break;              }
Magic Number,PKHeX.Core,EncounterArea7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterArea7.cs,GetFilteredSlots,The following statement contains a magic number: switch (species)              {                  case 744 when form == 1: // Rockruff Event                  case 745 when form == 2: // Lycanroc Event                      yield break;              }
Magic Number,PKHeX.Core,EncounterArea8,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterArea8.cs,GetMatchFromEvoLevel,The following statement contains a magic number: const int boostTo = 60;
Magic Number,PKHeX.Core,EncounterAreaSH,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterArea8.cs,LoadSlots,The following statement contains a magic number: int ofs = 2;
Magic Number,PKHeX.Core,EncounterAreaSH,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterArea8.cs,LoadSlots,The following statement contains a magic number: var min = areaData[ofs + 2];
Magic Number,PKHeX.Core,EncounterAreaSH,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterArea8.cs,LoadSlots,The following statement contains a magic number: var max = areaData[ofs + 3];
Magic Number,PKHeX.Core,EncounterAreaSH,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterArea8.cs,LoadSlots,The following statement contains a magic number: var count = areaData[ofs + 4];
Magic Number,PKHeX.Core,EncounterAreaSH,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterArea8.cs,LoadSlots,The following statement contains a magic number: ofs += 6;
Magic Number,PKHeX.Core,EncounterSlot8,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterArea8.cs,EncounterSlot8,The following statement contains a magic number: Form = specForm >> 11;
Magic Number,PKHeX.Core,EncounterAreaGB,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterAreaGB.cs,ReadSlots1,The following statement contains a magic number: slots[i] = new EncounterSlot1                  {                      LevelMax = t == SlotType.Surf ? lvl + 4 : lvl'                      LevelMin = lvl'                      Species = spec'                      Type = t'                      Rate = rate'                      SlotNumber = i'                  };
Magic Number,PKHeX.Core,EncounterAreaGB,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterAreaGB.cs,FilterGBSlotsCatchRate,The following statement contains a magic number: switch (pkm.Species)              {                  // Pikachu                  case (int)Species.Pikachu when rate == 163:                  case (int)Species.Raichu when rate == 163:                      return false; // Yellow Pikachu is not a wild encounter                    // Kadabra (YW)                  case (int)Species.Kadabra when rate == 96:                  case (int)Species.Alakazam when rate == 96:                      vs = vs.Where(s => s.Species == (int)Species.Kadabra).ToArray();                      Gen1Version = GameVersion.YW;                      return true;                    // Kadabra (RB)                  case (int)Species.Kadabra when rate == 100:                  case (int)Species.Alakazam when rate == 100:                      vs = vs.Where(s => s.Species == (int)Species.Kadabra).ToArray();                      Gen1Version = GameVersion.RB;                      return true;                    // Dragonair (YW)                  case (int)Species.Dragonair when rate == 27:                  case (int)Species.Dragonite when rate == 27:                      vs = vs.Where(s => s.Species == (int)Species.Dragonair).ToArray(); // Yellow Dragonair' ignore Dratini encounters                      Gen1Version = GameVersion.YW;                      return true;                    // Dragonair (RB)                  case (int)Species.Dragonair:                  case (int)Species.Dragonite:                      // Red blue dragonair have the same catch rate as dratini' it could also be a dratini from any game                      vs = vs.Where(s => rate == PersonalTable.RB[s.Species].CatchRate).ToArray();                      RBDragonair = true;                      return true;                    default:                      vs = vs.Where(s => rate == PersonalTable.RB[s.Species].CatchRate).ToArray();                      return true;              }
Magic Number,PKHeX.Core,EncounterAreaGB,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterAreaGB.cs,FilterGBSlotsCatchRate,The following statement contains a magic number: switch (pkm.Species)              {                  // Pikachu                  case (int)Species.Pikachu when rate == 163:                  case (int)Species.Raichu when rate == 163:                      return false; // Yellow Pikachu is not a wild encounter                    // Kadabra (YW)                  case (int)Species.Kadabra when rate == 96:                  case (int)Species.Alakazam when rate == 96:                      vs = vs.Where(s => s.Species == (int)Species.Kadabra).ToArray();                      Gen1Version = GameVersion.YW;                      return true;                    // Kadabra (RB)                  case (int)Species.Kadabra when rate == 100:                  case (int)Species.Alakazam when rate == 100:                      vs = vs.Where(s => s.Species == (int)Species.Kadabra).ToArray();                      Gen1Version = GameVersion.RB;                      return true;                    // Dragonair (YW)                  case (int)Species.Dragonair when rate == 27:                  case (int)Species.Dragonite when rate == 27:                      vs = vs.Where(s => s.Species == (int)Species.Dragonair).ToArray(); // Yellow Dragonair' ignore Dratini encounters                      Gen1Version = GameVersion.YW;                      return true;                    // Dragonair (RB)                  case (int)Species.Dragonair:                  case (int)Species.Dragonite:                      // Red blue dragonair have the same catch rate as dratini' it could also be a dratini from any game                      vs = vs.Where(s => rate == PersonalTable.RB[s.Species].CatchRate).ToArray();                      RBDragonair = true;                      return true;                    default:                      vs = vs.Where(s => rate == PersonalTable.RB[s.Species].CatchRate).ToArray();                      return true;              }
Magic Number,PKHeX.Core,EncounterAreaGB,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterAreaGB.cs,FilterGBSlotsCatchRate,The following statement contains a magic number: switch (pkm.Species)              {                  // Pikachu                  case (int)Species.Pikachu when rate == 163:                  case (int)Species.Raichu when rate == 163:                      return false; // Yellow Pikachu is not a wild encounter                    // Kadabra (YW)                  case (int)Species.Kadabra when rate == 96:                  case (int)Species.Alakazam when rate == 96:                      vs = vs.Where(s => s.Species == (int)Species.Kadabra).ToArray();                      Gen1Version = GameVersion.YW;                      return true;                    // Kadabra (RB)                  case (int)Species.Kadabra when rate == 100:                  case (int)Species.Alakazam when rate == 100:                      vs = vs.Where(s => s.Species == (int)Species.Kadabra).ToArray();                      Gen1Version = GameVersion.RB;                      return true;                    // Dragonair (YW)                  case (int)Species.Dragonair when rate == 27:                  case (int)Species.Dragonite when rate == 27:                      vs = vs.Where(s => s.Species == (int)Species.Dragonair).ToArray(); // Yellow Dragonair' ignore Dratini encounters                      Gen1Version = GameVersion.YW;                      return true;                    // Dragonair (RB)                  case (int)Species.Dragonair:                  case (int)Species.Dragonite:                      // Red blue dragonair have the same catch rate as dratini' it could also be a dratini from any game                      vs = vs.Where(s => rate == PersonalTable.RB[s.Species].CatchRate).ToArray();                      RBDragonair = true;                      return true;                    default:                      vs = vs.Where(s => rate == PersonalTable.RB[s.Species].CatchRate).ToArray();                      return true;              }
Magic Number,PKHeX.Core,EncounterAreaGB,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterAreaGB.cs,FilterGBSlotsCatchRate,The following statement contains a magic number: switch (pkm.Species)              {                  // Pikachu                  case (int)Species.Pikachu when rate == 163:                  case (int)Species.Raichu when rate == 163:                      return false; // Yellow Pikachu is not a wild encounter                    // Kadabra (YW)                  case (int)Species.Kadabra when rate == 96:                  case (int)Species.Alakazam when rate == 96:                      vs = vs.Where(s => s.Species == (int)Species.Kadabra).ToArray();                      Gen1Version = GameVersion.YW;                      return true;                    // Kadabra (RB)                  case (int)Species.Kadabra when rate == 100:                  case (int)Species.Alakazam when rate == 100:                      vs = vs.Where(s => s.Species == (int)Species.Kadabra).ToArray();                      Gen1Version = GameVersion.RB;                      return true;                    // Dragonair (YW)                  case (int)Species.Dragonair when rate == 27:                  case (int)Species.Dragonite when rate == 27:                      vs = vs.Where(s => s.Species == (int)Species.Dragonair).ToArray(); // Yellow Dragonair' ignore Dratini encounters                      Gen1Version = GameVersion.YW;                      return true;                    // Dragonair (RB)                  case (int)Species.Dragonair:                  case (int)Species.Dragonite:                      // Red blue dragonair have the same catch rate as dratini' it could also be a dratini from any game                      vs = vs.Where(s => rate == PersonalTable.RB[s.Species].CatchRate).ToArray();                      RBDragonair = true;                      return true;                    default:                      vs = vs.Where(s => rate == PersonalTable.RB[s.Species].CatchRate).ToArray();                      return true;              }
Magic Number,PKHeX.Core,EncounterAreaGB,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterAreaGB.cs,FilterGBSlotsCatchRate,The following statement contains a magic number: switch (pkm.Species)              {                  // Pikachu                  case (int)Species.Pikachu when rate == 163:                  case (int)Species.Raichu when rate == 163:                      return false; // Yellow Pikachu is not a wild encounter                    // Kadabra (YW)                  case (int)Species.Kadabra when rate == 96:                  case (int)Species.Alakazam when rate == 96:                      vs = vs.Where(s => s.Species == (int)Species.Kadabra).ToArray();                      Gen1Version = GameVersion.YW;                      return true;                    // Kadabra (RB)                  case (int)Species.Kadabra when rate == 100:                  case (int)Species.Alakazam when rate == 100:                      vs = vs.Where(s => s.Species == (int)Species.Kadabra).ToArray();                      Gen1Version = GameVersion.RB;                      return true;                    // Dragonair (YW)                  case (int)Species.Dragonair when rate == 27:                  case (int)Species.Dragonite when rate == 27:                      vs = vs.Where(s => s.Species == (int)Species.Dragonair).ToArray(); // Yellow Dragonair' ignore Dratini encounters                      Gen1Version = GameVersion.YW;                      return true;                    // Dragonair (RB)                  case (int)Species.Dragonair:                  case (int)Species.Dragonite:                      // Red blue dragonair have the same catch rate as dratini' it could also be a dratini from any game                      vs = vs.Where(s => rate == PersonalTable.RB[s.Species].CatchRate).ToArray();                      RBDragonair = true;                      return true;                    default:                      vs = vs.Where(s => rate == PersonalTable.RB[s.Species].CatchRate).ToArray();                      return true;              }
Magic Number,PKHeX.Core,EncounterAreaGB,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterAreaGB.cs,FilterGBSlotsCatchRate,The following statement contains a magic number: switch (pkm.Species)              {                  // Pikachu                  case (int)Species.Pikachu when rate == 163:                  case (int)Species.Raichu when rate == 163:                      return false; // Yellow Pikachu is not a wild encounter                    // Kadabra (YW)                  case (int)Species.Kadabra when rate == 96:                  case (int)Species.Alakazam when rate == 96:                      vs = vs.Where(s => s.Species == (int)Species.Kadabra).ToArray();                      Gen1Version = GameVersion.YW;                      return true;                    // Kadabra (RB)                  case (int)Species.Kadabra when rate == 100:                  case (int)Species.Alakazam when rate == 100:                      vs = vs.Where(s => s.Species == (int)Species.Kadabra).ToArray();                      Gen1Version = GameVersion.RB;                      return true;                    // Dragonair (YW)                  case (int)Species.Dragonair when rate == 27:                  case (int)Species.Dragonite when rate == 27:                      vs = vs.Where(s => s.Species == (int)Species.Dragonair).ToArray(); // Yellow Dragonair' ignore Dratini encounters                      Gen1Version = GameVersion.YW;                      return true;                    // Dragonair (RB)                  case (int)Species.Dragonair:                  case (int)Species.Dragonite:                      // Red blue dragonair have the same catch rate as dratini' it could also be a dratini from any game                      vs = vs.Where(s => rate == PersonalTable.RB[s.Species].CatchRate).ToArray();                      RBDragonair = true;                      return true;                    default:                      vs = vs.Where(s => rate == PersonalTable.RB[s.Species].CatchRate).ToArray();                      return true;              }
Magic Number,PKHeX.Core,EncounterAreaGB,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterAreaGB.cs,FilterGBSlotsCatchRate,The following statement contains a magic number: switch (pkm.Species)              {                  // Pikachu                  case (int)Species.Pikachu when rate == 163:                  case (int)Species.Raichu when rate == 163:                      return false; // Yellow Pikachu is not a wild encounter                    // Kadabra (YW)                  case (int)Species.Kadabra when rate == 96:                  case (int)Species.Alakazam when rate == 96:                      vs = vs.Where(s => s.Species == (int)Species.Kadabra).ToArray();                      Gen1Version = GameVersion.YW;                      return true;                    // Kadabra (RB)                  case (int)Species.Kadabra when rate == 100:                  case (int)Species.Alakazam when rate == 100:                      vs = vs.Where(s => s.Species == (int)Species.Kadabra).ToArray();                      Gen1Version = GameVersion.RB;                      return true;                    // Dragonair (YW)                  case (int)Species.Dragonair when rate == 27:                  case (int)Species.Dragonite when rate == 27:                      vs = vs.Where(s => s.Species == (int)Species.Dragonair).ToArray(); // Yellow Dragonair' ignore Dratini encounters                      Gen1Version = GameVersion.YW;                      return true;                    // Dragonair (RB)                  case (int)Species.Dragonair:                  case (int)Species.Dragonite:                      // Red blue dragonair have the same catch rate as dratini' it could also be a dratini from any game                      vs = vs.Where(s => rate == PersonalTable.RB[s.Species].CatchRate).ToArray();                      RBDragonair = true;                      return true;                    default:                      vs = vs.Where(s => rate == PersonalTable.RB[s.Species].CatchRate).ToArray();                      return true;              }
Magic Number,PKHeX.Core,EncounterAreaGB,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterAreaGB.cs,FilterGBSlotsCatchRate,The following statement contains a magic number: switch (pkm.Species)              {                  // Pikachu                  case (int)Species.Pikachu when rate == 163:                  case (int)Species.Raichu when rate == 163:                      return false; // Yellow Pikachu is not a wild encounter                    // Kadabra (YW)                  case (int)Species.Kadabra when rate == 96:                  case (int)Species.Alakazam when rate == 96:                      vs = vs.Where(s => s.Species == (int)Species.Kadabra).ToArray();                      Gen1Version = GameVersion.YW;                      return true;                    // Kadabra (RB)                  case (int)Species.Kadabra when rate == 100:                  case (int)Species.Alakazam when rate == 100:                      vs = vs.Where(s => s.Species == (int)Species.Kadabra).ToArray();                      Gen1Version = GameVersion.RB;                      return true;                    // Dragonair (YW)                  case (int)Species.Dragonair when rate == 27:                  case (int)Species.Dragonite when rate == 27:                      vs = vs.Where(s => s.Species == (int)Species.Dragonair).ToArray(); // Yellow Dragonair' ignore Dratini encounters                      Gen1Version = GameVersion.YW;                      return true;                    // Dragonair (RB)                  case (int)Species.Dragonair:                  case (int)Species.Dragonite:                      // Red blue dragonair have the same catch rate as dratini' it could also be a dratini from any game                      vs = vs.Where(s => rate == PersonalTable.RB[s.Species].CatchRate).ToArray();                      RBDragonair = true;                      return true;                    default:                      vs = vs.Where(s => rate == PersonalTable.RB[s.Species].CatchRate).ToArray();                      return true;              }
Magic Number,PKHeX.Core,EncounterAreaGB,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterAreaGB.cs,GetFilteredSlots,The following statement contains a magic number: switch (gen)              {                  case 1:                      if (Gen1Version != GameVersion.RBY)                          slots = slots.Where(slot => Gen1Version.Contains(slot.Version));                        // Red Blue dragonair or dratini from any gen 1 games                      if (RBDragonair)                          return slots.Where(slot => GameVersion.RB.Contains(slot.Version) || slot.Species == 147);                        return slots;                    case 2:                      if (pkm is PK2 pk2 && pk2.Met_TimeOfDay != 0)                          return slots.Where(slot => ((EncounterSlot1)slot).Time.Contains(pk2.Met_TimeOfDay));                      return slots;                    default:                      return slots;              }
Magic Number,PKHeX.Core,EncounterAreaGB,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterAreaGB.cs,GetFilteredSlots,The following statement contains a magic number: switch (gen)              {                  case 1:                      if (Gen1Version != GameVersion.RBY)                          slots = slots.Where(slot => Gen1Version.Contains(slot.Version));                        // Red Blue dragonair or dratini from any gen 1 games                      if (RBDragonair)                          return slots.Where(slot => GameVersion.RB.Contains(slot.Version) || slot.Species == 147);                        return slots;                    case 2:                      if (pkm is PK2 pk2 && pk2.Met_TimeOfDay != 0)                          return slots.Where(slot => ((EncounterSlot1)slot).Time.Contains(pk2.Met_TimeOfDay));                      return slots;                    default:                      return slots;              }
Magic Number,PKHeX.Core,EncounterAreaGB,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterAreaGB.cs,GetMatchFromEvoLevel,The following statement contains a magic number: pkm.Format >= 7 || !(pkm is PK2 pk2 && pk2.CaughtData != 0)
Magic Number,PKHeX.Core,TreeCoordinates,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\TreeCoordinates.cs,TreeCoordinates,The following statement contains a magic number: Index = ((X * Y) + X + Y) / 5 % 10;
Magic Number,PKHeX.Core,TreeCoordinates,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\TreeCoordinates.cs,TreeCoordinates,The following statement contains a magic number: Index = ((X * Y) + X + Y) / 5 % 10;
Magic Number,PKHeX.Core,TreesArea,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\TreesArea.cs,GenerateTrainersTreeIndex,The following statement contains a magic number: int[] ModerateEncounterTreeIndex = new int[5];
Magic Number,PKHeX.Core,TreesArea,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\TreesArea.cs,TreesArea,The following statement contains a magic number: var ofs = 2;
Magic Number,PKHeX.Core,BulkAnalysis,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\BulkAnalysis.cs,ScanAll,The following statement contains a magic number: Trainer.Generation <= 2
Magic Number,PKHeX.Core,BulkAnalysis,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\BulkAnalysis.cs,ScanAll,The following statement contains a magic number: Trainer.Generation >= 6
Magic Number,PKHeX.Core,BulkAnalysis,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\BulkAnalysis.cs,CheckDuplicateOwnedGifts,The following statement contains a magic number: var dupes = AllAnalysis.Where(z =>                      z.Info.Generation >= 3                      && z.EncounterOriginal is MysteryGift g                      && g.EggEncounter                      && !z.pkm.WasTradedEgg)                  .GroupBy(z => ((MysteryGift)z.EncounterOriginal).CardTitle);
Magic Number,PKHeX.Core,BulkAnalysis,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\BulkAnalysis.cs,CheckDuplicateOwnedGifts,The following statement contains a magic number: var tidGroup = dupe.GroupBy(z => z.pkm.TID | (z.pkm.SID << 16))                      .Select(z => z.ToList())                      .Where(z => z.Count >= 2).ToList();
Magic Number,PKHeX.Core,BulkAnalysis,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\BulkAnalysis.cs,CheckDuplicateOwnedGifts,The following statement contains a magic number: var tidGroup = dupe.GroupBy(z => z.pkm.TID | (z.pkm.SID << 16))                      .Select(z => z.ToList())                      .Where(z => z.Count >= 2).ToList();
Magic Number,PKHeX.Core,BulkAnalysis,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\BulkAnalysis.cs,CheckECReuse,The following statement contains a magic number: Debug.Assert(cp.Format >= 6);
Magic Number,PKHeX.Core,BulkAnalysis,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\BulkAnalysis.cs,CheckPIDReuse,The following statement contains a magic number: bool g345 = 3 <= ca.Info.Generation && ca.Info.Generation <= 5;
Magic Number,PKHeX.Core,BulkAnalysis,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\BulkAnalysis.cs,CheckPIDReuse,The following statement contains a magic number: bool g345 = 3 <= ca.Info.Generation && ca.Info.Generation <= 5;
Magic Number,PKHeX.Core,BulkAnalysis,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\BulkAnalysis.cs,CheckIDReuse,The following statement contains a magic number: var id = cp.TID + (cp.SID << 16);
Magic Number,PKHeX.Core,BulkAnalysis,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\BulkAnalysis.cs,CheckIDReuse,The following statement contains a magic number: ca.Info.Generation <= 2 && pa.Info.Generation <= 2
Magic Number,PKHeX.Core,BulkAnalysis,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\BulkAnalysis.cs,CheckIDReuse,The following statement contains a magic number: ca.Info.Generation <= 2 && pa.Info.Generation <= 2
Magic Number,PKHeX.Core,BulkAnalysis,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\BulkAnalysis.cs,VerifyECShare,The following statement contains a magic number: bool gbaNDS = 3 <= gen && gen <= 5;
Magic Number,PKHeX.Core,BulkAnalysis,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\BulkAnalysis.cs,VerifyECShare,The following statement contains a magic number: bool gbaNDS = 3 <= gen && gen <= 5;
Magic Number,PKHeX.Core,BulkAnalysis,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\BulkAnalysis.cs,VerifyPIDShare,The following statement contains a magic number: bool gbaNDS = 3 <= gen && gen <= 5;
Magic Number,PKHeX.Core,BulkAnalysis,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\BulkAnalysis.cs,VerifyPIDShare,The following statement contains a magic number: bool gbaNDS = 3 <= gen && gen <= 5;
Magic Number,PKHeX.Core,BulkAnalysis,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\BulkAnalysis.cs,VerifyIDReuse,The following statement contains a magic number: var severity = ca.Info.Generation == 4 ? Severity.Fishy : Severity.Invalid;
Magic Number,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,Legal,The following statement contains a magic number: var pi = PersonalTable.USUM[773];
Magic Number,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,Legal,The following statement contains a magic number: pi.TypeTutors[2] = false;
Magic Number,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,GetValidRelearn,The following statement contains a magic number: pkm.GenNumber < 6
Magic Number,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,GetValidRelearn,The following statement contains a magic number: pkm.Format == 6 && pkm.Species != 678
Magic Number,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,GetValidRelearn,The following statement contains a magic number: pkm.Format == 6 && pkm.Species != 678
Magic Number,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,GetValidRelearn,The following statement contains a magic number: r.AddRange(MoveEgg.GetRelearnLVLMoves(pkm' species' 100' form' version));
Magic Number,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,GetShedinjaEvolveMoves,The following statement contains a magic number: pkm.Species != 292 || lvl < 20
Magic Number,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,GetShedinjaEvolveMoves,The following statement contains a magic number: pkm.Species != 292 || lvl < 20
Magic Number,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,GetShedinjaEvolveMoves,The following statement contains a magic number: switch (generation)              {                  case 3: // Ninjask have the same learnset in every gen 3 games                      if (pkm.InhabitedGeneration(3))                          return LevelUpE[291].GetMoves(lvl' 20);                      break;                  case 4: // Ninjask have the same learnset in every gen 4 games                      if (pkm.InhabitedGeneration(4))                          return LevelUpPt[291].GetMoves(lvl' 20);                      break;              }
Magic Number,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,GetShedinjaEvolveMoves,The following statement contains a magic number: switch (generation)              {                  case 3: // Ninjask have the same learnset in every gen 3 games                      if (pkm.InhabitedGeneration(3))                          return LevelUpE[291].GetMoves(lvl' 20);                      break;                  case 4: // Ninjask have the same learnset in every gen 4 games                      if (pkm.InhabitedGeneration(4))                          return LevelUpPt[291].GetMoves(lvl' 20);                      break;              }
Magic Number,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,GetShedinjaEvolveMoves,The following statement contains a magic number: switch (generation)              {                  case 3: // Ninjask have the same learnset in every gen 3 games                      if (pkm.InhabitedGeneration(3))                          return LevelUpE[291].GetMoves(lvl' 20);                      break;                  case 4: // Ninjask have the same learnset in every gen 4 games                      if (pkm.InhabitedGeneration(4))                          return LevelUpPt[291].GetMoves(lvl' 20);                      break;              }
Magic Number,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,GetShedinjaEvolveMoves,The following statement contains a magic number: switch (generation)              {                  case 3: // Ninjask have the same learnset in every gen 3 games                      if (pkm.InhabitedGeneration(3))                          return LevelUpE[291].GetMoves(lvl' 20);                      break;                  case 4: // Ninjask have the same learnset in every gen 4 games                      if (pkm.InhabitedGeneration(4))                          return LevelUpPt[291].GetMoves(lvl' 20);                      break;              }
Magic Number,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,GetShedinjaEvolveMoves,The following statement contains a magic number: switch (generation)              {                  case 3: // Ninjask have the same learnset in every gen 3 games                      if (pkm.InhabitedGeneration(3))                          return LevelUpE[291].GetMoves(lvl' 20);                      break;                  case 4: // Ninjask have the same learnset in every gen 4 games                      if (pkm.InhabitedGeneration(4))                          return LevelUpPt[291].GetMoves(lvl' 20);                      break;              }
Magic Number,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,GetShedinjaEvolveMoves,The following statement contains a magic number: switch (generation)              {                  case 3: // Ninjask have the same learnset in every gen 3 games                      if (pkm.InhabitedGeneration(3))                          return LevelUpE[291].GetMoves(lvl' 20);                      break;                  case 4: // Ninjask have the same learnset in every gen 4 games                      if (pkm.InhabitedGeneration(4))                          return LevelUpPt[291].GetMoves(lvl' 20);                      break;              }
Magic Number,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,GetShedinjaEvolveMoves,The following statement contains a magic number: switch (generation)              {                  case 3: // Ninjask have the same learnset in every gen 3 games                      if (pkm.InhabitedGeneration(3))                          return LevelUpE[291].GetMoves(lvl' 20);                      break;                  case 4: // Ninjask have the same learnset in every gen 4 games                      if (pkm.InhabitedGeneration(4))                          return LevelUpPt[291].GetMoves(lvl' 20);                      break;              }
Magic Number,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,GetShedinjaEvolveMoves,The following statement contains a magic number: switch (generation)              {                  case 3: // Ninjask have the same learnset in every gen 3 games                      if (pkm.InhabitedGeneration(3))                          return LevelUpE[291].GetMoves(lvl' 20);                      break;                  case 4: // Ninjask have the same learnset in every gen 4 games                      if (pkm.InhabitedGeneration(4))                          return LevelUpPt[291].GetMoves(lvl' 20);                      break;              }
Magic Number,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,GetShedinjaMoveLevel,The following statement contains a magic number: var src = generation == 4 ? LevelUpPt : LevelUpE;
Magic Number,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,GetBaseEggMoves,The following statement contains a magic number: switch (gameSource)              {                  case GameVersion.GSC:                  case GameVersion.GS:                      // If checking back-transfer specimen (GSC->RBY)' remove moves that must be deleted prior to transfer                      int[] getRBYCompatibleMoves(int[] moves) => pkm.Format == 1 ? moves.Where(m => m <= MaxMoveID_1).ToArray() : moves;                      if (pkm.InhabitedGeneration(2))                          return getRBYCompatibleMoves(LevelUpGS[species].GetMoves(lvl));                      break;                  case GameVersion.C:                      if (pkm.InhabitedGeneration(2))                          return getRBYCompatibleMoves(LevelUpC[species].GetMoves(lvl));                      break;                    case GameVersion.R:                  case GameVersion.S:                  case GameVersion.RS:                      if (pkm.InhabitedGeneration(3))                          return LevelUpRS[species].GetMoves(lvl);                      break;                  case GameVersion.E:                      if (pkm.InhabitedGeneration(3))                          return LevelUpE[species].GetMoves(lvl);                      break;                  case GameVersion.FR:                  case GameVersion.LG:                  case GameVersion.FRLG:                      // only difference in FR/LG is deoxys which doesn't breed.                      if (pkm.InhabitedGeneration(3))                          return LevelUpFR[species].GetMoves(lvl);                      break;                    case GameVersion.D:                  case GameVersion.P:                  case GameVersion.DP:                      if (pkm.InhabitedGeneration(4))                          return LevelUpDP[species].GetMoves(lvl);                      break;                  case GameVersion.Pt:                      if (pkm.InhabitedGeneration(4))                          return LevelUpPt[species].GetMoves(lvl);                      break;                  case GameVersion.HG:                  case GameVersion.SS:                  case GameVersion.HGSS:                      if (pkm.InhabitedGeneration(4))                          return LevelUpHGSS[species].GetMoves(lvl);                      break;                    case GameVersion.B:                  case GameVersion.W:                  case GameVersion.BW:                      if (pkm.InhabitedGeneration(5))                          return LevelUpBW[species].GetMoves(lvl);                      break;                    case GameVersion.B2:                  case GameVersion.W2:                  case GameVersion.B2W2:                      if (pkm.InhabitedGeneration(5))                          return LevelUpB2W2[species].GetMoves(lvl);                      break;                    case GameVersion.X:                  case GameVersion.Y:                  case GameVersion.XY:                      if (pkm.InhabitedGeneration(6))                          return LevelUpXY[species].GetMoves(lvl);                      break;                    case GameVersion.AS:                  case GameVersion.OR:                  case GameVersion.ORAS:                      if (pkm.InhabitedGeneration(6))                          return LevelUpAO[species].GetMoves(lvl);                      break;                    case GameVersion.SN:                  case GameVersion.MN:                  case GameVersion.SM:                      if (species > MaxSpeciesID_7)                          break;                      if (pkm.InhabitedGeneration(7))                      {                          int index = PersonalTable.SM.GetFormeIndex(species' form);                          return LevelUpSM[index].GetMoves(lvl);                      }                      break;                    case GameVersion.US:                  case GameVersion.UM:                  case GameVersion.USUM:                      if (pkm.InhabitedGeneration(7))                      {                          int index = PersonalTable.USUM.GetFormeIndex(species' form);                          return LevelUpUSUM[index].GetMoves(lvl);                      }                      break;                    case GameVersion.SW:                  case GameVersion.SH:                  case GameVersion.SWSH:                      if (pkm.InhabitedGeneration(8))                      {                          int index = PersonalTable.SWSH.GetFormeIndex(species' form);                          return LevelUpSWSH[index].GetMoves(lvl);                      }                      break;              }
Magic Number,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,GetBaseEggMoves,The following statement contains a magic number: switch (gameSource)              {                  case GameVersion.GSC:                  case GameVersion.GS:                      // If checking back-transfer specimen (GSC->RBY)' remove moves that must be deleted prior to transfer                      int[] getRBYCompatibleMoves(int[] moves) => pkm.Format == 1 ? moves.Where(m => m <= MaxMoveID_1).ToArray() : moves;                      if (pkm.InhabitedGeneration(2))                          return getRBYCompatibleMoves(LevelUpGS[species].GetMoves(lvl));                      break;                  case GameVersion.C:                      if (pkm.InhabitedGeneration(2))                          return getRBYCompatibleMoves(LevelUpC[species].GetMoves(lvl));                      break;                    case GameVersion.R:                  case GameVersion.S:                  case GameVersion.RS:                      if (pkm.InhabitedGeneration(3))                          return LevelUpRS[species].GetMoves(lvl);                      break;                  case GameVersion.E:                      if (pkm.InhabitedGeneration(3))                          return LevelUpE[species].GetMoves(lvl);                      break;                  case GameVersion.FR:                  case GameVersion.LG:                  case GameVersion.FRLG:                      // only difference in FR/LG is deoxys which doesn't breed.                      if (pkm.InhabitedGeneration(3))                          return LevelUpFR[species].GetMoves(lvl);                      break;                    case GameVersion.D:                  case GameVersion.P:                  case GameVersion.DP:                      if (pkm.InhabitedGeneration(4))                          return LevelUpDP[species].GetMoves(lvl);                      break;                  case GameVersion.Pt:                      if (pkm.InhabitedGeneration(4))                          return LevelUpPt[species].GetMoves(lvl);                      break;                  case GameVersion.HG:                  case GameVersion.SS:                  case GameVersion.HGSS:                      if (pkm.InhabitedGeneration(4))                          return LevelUpHGSS[species].GetMoves(lvl);                      break;                    case GameVersion.B:                  case GameVersion.W:                  case GameVersion.BW:                      if (pkm.InhabitedGeneration(5))                          return LevelUpBW[species].GetMoves(lvl);                      break;                    case GameVersion.B2:                  case GameVersion.W2:                  case GameVersion.B2W2:                      if (pkm.InhabitedGeneration(5))                          return LevelUpB2W2[species].GetMoves(lvl);                      break;                    case GameVersion.X:                  case GameVersion.Y:                  case GameVersion.XY:                      if (pkm.InhabitedGeneration(6))                          return LevelUpXY[species].GetMoves(lvl);                      break;                    case GameVersion.AS:                  case GameVersion.OR:                  case GameVersion.ORAS:                      if (pkm.InhabitedGeneration(6))                          return LevelUpAO[species].GetMoves(lvl);                      break;                    case GameVersion.SN:                  case GameVersion.MN:                  case GameVersion.SM:                      if (species > MaxSpeciesID_7)                          break;                      if (pkm.InhabitedGeneration(7))                      {                          int index = PersonalTable.SM.GetFormeIndex(species' form);                          return LevelUpSM[index].GetMoves(lvl);                      }                      break;                    case GameVersion.US:                  case GameVersion.UM:                  case GameVersion.USUM:                      if (pkm.InhabitedGeneration(7))                      {                          int index = PersonalTable.USUM.GetFormeIndex(species' form);                          return LevelUpUSUM[index].GetMoves(lvl);                      }                      break;                    case GameVersion.SW:                  case GameVersion.SH:                  case GameVersion.SWSH:                      if (pkm.InhabitedGeneration(8))                      {                          int index = PersonalTable.SWSH.GetFormeIndex(species' form);                          return LevelUpSWSH[index].GetMoves(lvl);                      }                      break;              }
Magic Number,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,GetBaseEggMoves,The following statement contains a magic number: switch (gameSource)              {                  case GameVersion.GSC:                  case GameVersion.GS:                      // If checking back-transfer specimen (GSC->RBY)' remove moves that must be deleted prior to transfer                      int[] getRBYCompatibleMoves(int[] moves) => pkm.Format == 1 ? moves.Where(m => m <= MaxMoveID_1).ToArray() : moves;                      if (pkm.InhabitedGeneration(2))                          return getRBYCompatibleMoves(LevelUpGS[species].GetMoves(lvl));                      break;                  case GameVersion.C:                      if (pkm.InhabitedGeneration(2))                          return getRBYCompatibleMoves(LevelUpC[species].GetMoves(lvl));                      break;                    case GameVersion.R:                  case GameVersion.S:                  case GameVersion.RS:                      if (pkm.InhabitedGeneration(3))                          return LevelUpRS[species].GetMoves(lvl);                      break;                  case GameVersion.E:                      if (pkm.InhabitedGeneration(3))                          return LevelUpE[species].GetMoves(lvl);                      break;                  case GameVersion.FR:                  case GameVersion.LG:                  case GameVersion.FRLG:                      // only difference in FR/LG is deoxys which doesn't breed.                      if (pkm.InhabitedGeneration(3))                          return LevelUpFR[species].GetMoves(lvl);                      break;                    case GameVersion.D:                  case GameVersion.P:                  case GameVersion.DP:                      if (pkm.InhabitedGeneration(4))                          return LevelUpDP[species].GetMoves(lvl);                      break;                  case GameVersion.Pt:                      if (pkm.InhabitedGeneration(4))                          return LevelUpPt[species].GetMoves(lvl);                      break;                  case GameVersion.HG:                  case GameVersion.SS:                  case GameVersion.HGSS:                      if (pkm.InhabitedGeneration(4))                          return LevelUpHGSS[species].GetMoves(lvl);                      break;                    case GameVersion.B:                  case GameVersion.W:                  case GameVersion.BW:                      if (pkm.InhabitedGeneration(5))                          return LevelUpBW[species].GetMoves(lvl);                      break;                    case GameVersion.B2:                  case GameVersion.W2:                  case GameVersion.B2W2:                      if (pkm.InhabitedGeneration(5))                          return LevelUpB2W2[species].GetMoves(lvl);                      break;                    case GameVersion.X:                  case GameVersion.Y:                  case GameVersion.XY:                      if (pkm.InhabitedGeneration(6))                          return LevelUpXY[species].GetMoves(lvl);                      break;                    case GameVersion.AS:                  case GameVersion.OR:                  case GameVersion.ORAS:                      if (pkm.InhabitedGeneration(6))                          return LevelUpAO[species].GetMoves(lvl);                      break;                    case GameVersion.SN:                  case GameVersion.MN:                  case GameVersion.SM:                      if (species > MaxSpeciesID_7)                          break;                      if (pkm.InhabitedGeneration(7))                      {                          int index = PersonalTable.SM.GetFormeIndex(species' form);                          return LevelUpSM[index].GetMoves(lvl);                      }                      break;                    case GameVersion.US:                  case GameVersion.UM:                  case GameVersion.USUM:                      if (pkm.InhabitedGeneration(7))                      {                          int index = PersonalTable.USUM.GetFormeIndex(species' form);                          return LevelUpUSUM[index].GetMoves(lvl);                      }                      break;                    case GameVersion.SW:                  case GameVersion.SH:                  case GameVersion.SWSH:                      if (pkm.InhabitedGeneration(8))                      {                          int index = PersonalTable.SWSH.GetFormeIndex(species' form);                          return LevelUpSWSH[index].GetMoves(lvl);                      }                      break;              }
Magic Number,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,GetBaseEggMoves,The following statement contains a magic number: switch (gameSource)              {                  case GameVersion.GSC:                  case GameVersion.GS:                      // If checking back-transfer specimen (GSC->RBY)' remove moves that must be deleted prior to transfer                      int[] getRBYCompatibleMoves(int[] moves) => pkm.Format == 1 ? moves.Where(m => m <= MaxMoveID_1).ToArray() : moves;                      if (pkm.InhabitedGeneration(2))                          return getRBYCompatibleMoves(LevelUpGS[species].GetMoves(lvl));                      break;                  case GameVersion.C:                      if (pkm.InhabitedGeneration(2))                          return getRBYCompatibleMoves(LevelUpC[species].GetMoves(lvl));                      break;                    case GameVersion.R:                  case GameVersion.S:                  case GameVersion.RS:                      if (pkm.InhabitedGeneration(3))                          return LevelUpRS[species].GetMoves(lvl);                      break;                  case GameVersion.E:                      if (pkm.InhabitedGeneration(3))                          return LevelUpE[species].GetMoves(lvl);                      break;                  case GameVersion.FR:                  case GameVersion.LG:                  case GameVersion.FRLG:                      // only difference in FR/LG is deoxys which doesn't breed.                      if (pkm.InhabitedGeneration(3))                          return LevelUpFR[species].GetMoves(lvl);                      break;                    case GameVersion.D:                  case GameVersion.P:                  case GameVersion.DP:                      if (pkm.InhabitedGeneration(4))                          return LevelUpDP[species].GetMoves(lvl);                      break;                  case GameVersion.Pt:                      if (pkm.InhabitedGeneration(4))                          return LevelUpPt[species].GetMoves(lvl);                      break;                  case GameVersion.HG:                  case GameVersion.SS:                  case GameVersion.HGSS:                      if (pkm.InhabitedGeneration(4))                          return LevelUpHGSS[species].GetMoves(lvl);                      break;                    case GameVersion.B:                  case GameVersion.W:                  case GameVersion.BW:                      if (pkm.InhabitedGeneration(5))                          return LevelUpBW[species].GetMoves(lvl);                      break;                    case GameVersion.B2:                  case GameVersion.W2:                  case GameVersion.B2W2:                      if (pkm.InhabitedGeneration(5))                          return LevelUpB2W2[species].GetMoves(lvl);                      break;                    case GameVersion.X:                  case GameVersion.Y:                  case GameVersion.XY:                      if (pkm.InhabitedGeneration(6))                          return LevelUpXY[species].GetMoves(lvl);                      break;                    case GameVersion.AS:                  case GameVersion.OR:                  case GameVersion.ORAS:                      if (pkm.InhabitedGeneration(6))                          return LevelUpAO[species].GetMoves(lvl);                      break;                    case GameVersion.SN:                  case GameVersion.MN:                  case GameVersion.SM:                      if (species > MaxSpeciesID_7)                          break;                      if (pkm.InhabitedGeneration(7))                      {                          int index = PersonalTable.SM.GetFormeIndex(species' form);                          return LevelUpSM[index].GetMoves(lvl);                      }                      break;                    case GameVersion.US:                  case GameVersion.UM:                  case GameVersion.USUM:                      if (pkm.InhabitedGeneration(7))                      {                          int index = PersonalTable.USUM.GetFormeIndex(species' form);                          return LevelUpUSUM[index].GetMoves(lvl);                      }                      break;                    case GameVersion.SW:                  case GameVersion.SH:                  case GameVersion.SWSH:                      if (pkm.InhabitedGeneration(8))                      {                          int index = PersonalTable.SWSH.GetFormeIndex(species' form);                          return LevelUpSWSH[index].GetMoves(lvl);                      }                      break;              }
Magic Number,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,GetBaseEggMoves,The following statement contains a magic number: switch (gameSource)              {                  case GameVersion.GSC:                  case GameVersion.GS:                      // If checking back-transfer specimen (GSC->RBY)' remove moves that must be deleted prior to transfer                      int[] getRBYCompatibleMoves(int[] moves) => pkm.Format == 1 ? moves.Where(m => m <= MaxMoveID_1).ToArray() : moves;                      if (pkm.InhabitedGeneration(2))                          return getRBYCompatibleMoves(LevelUpGS[species].GetMoves(lvl));                      break;                  case GameVersion.C:                      if (pkm.InhabitedGeneration(2))                          return getRBYCompatibleMoves(LevelUpC[species].GetMoves(lvl));                      break;                    case GameVersion.R:                  case GameVersion.S:                  case GameVersion.RS:                      if (pkm.InhabitedGeneration(3))                          return LevelUpRS[species].GetMoves(lvl);                      break;                  case GameVersion.E:                      if (pkm.InhabitedGeneration(3))                          return LevelUpE[species].GetMoves(lvl);                      break;                  case GameVersion.FR:                  case GameVersion.LG:                  case GameVersion.FRLG:                      // only difference in FR/LG is deoxys which doesn't breed.                      if (pkm.InhabitedGeneration(3))                          return LevelUpFR[species].GetMoves(lvl);                      break;                    case GameVersion.D:                  case GameVersion.P:                  case GameVersion.DP:                      if (pkm.InhabitedGeneration(4))                          return LevelUpDP[species].GetMoves(lvl);                      break;                  case GameVersion.Pt:                      if (pkm.InhabitedGeneration(4))                          return LevelUpPt[species].GetMoves(lvl);                      break;                  case GameVersion.HG:                  case GameVersion.SS:                  case GameVersion.HGSS:                      if (pkm.InhabitedGeneration(4))                          return LevelUpHGSS[species].GetMoves(lvl);                      break;                    case GameVersion.B:                  case GameVersion.W:                  case GameVersion.BW:                      if (pkm.InhabitedGeneration(5))                          return LevelUpBW[species].GetMoves(lvl);                      break;                    case GameVersion.B2:                  case GameVersion.W2:                  case GameVersion.B2W2:                      if (pkm.InhabitedGeneration(5))                          return LevelUpB2W2[species].GetMoves(lvl);                      break;                    case GameVersion.X:                  case GameVersion.Y:                  case GameVersion.XY:                      if (pkm.InhabitedGeneration(6))                          return LevelUpXY[species].GetMoves(lvl);                      break;                    case GameVersion.AS:                  case GameVersion.OR:                  case GameVersion.ORAS:                      if (pkm.InhabitedGeneration(6))                          return LevelUpAO[species].GetMoves(lvl);                      break;                    case GameVersion.SN:                  case GameVersion.MN:                  case GameVersion.SM:                      if (species > MaxSpeciesID_7)                          break;                      if (pkm.InhabitedGeneration(7))                      {                          int index = PersonalTable.SM.GetFormeIndex(species' form);                          return LevelUpSM[index].GetMoves(lvl);                      }                      break;                    case GameVersion.US:                  case GameVersion.UM:                  case GameVersion.USUM:                      if (pkm.InhabitedGeneration(7))                      {                          int index = PersonalTable.USUM.GetFormeIndex(species' form);                          return LevelUpUSUM[index].GetMoves(lvl);                      }                      break;                    case GameVersion.SW:                  case GameVersion.SH:                  case GameVersion.SWSH:                      if (pkm.InhabitedGeneration(8))                      {                          int index = PersonalTable.SWSH.GetFormeIndex(species' form);                          return LevelUpSWSH[index].GetMoves(lvl);                      }                      break;              }
Magic Number,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,GetBaseEggMoves,The following statement contains a magic number: switch (gameSource)              {                  case GameVersion.GSC:                  case GameVersion.GS:                      // If checking back-transfer specimen (GSC->RBY)' remove moves that must be deleted prior to transfer                      int[] getRBYCompatibleMoves(int[] moves) => pkm.Format == 1 ? moves.Where(m => m <= MaxMoveID_1).ToArray() : moves;                      if (pkm.InhabitedGeneration(2))                          return getRBYCompatibleMoves(LevelUpGS[species].GetMoves(lvl));                      break;                  case GameVersion.C:                      if (pkm.InhabitedGeneration(2))                          return getRBYCompatibleMoves(LevelUpC[species].GetMoves(lvl));                      break;                    case GameVersion.R:                  case GameVersion.S:                  case GameVersion.RS:                      if (pkm.InhabitedGeneration(3))                          return LevelUpRS[species].GetMoves(lvl);                      break;                  case GameVersion.E:                      if (pkm.InhabitedGeneration(3))                          return LevelUpE[species].GetMoves(lvl);                      break;                  case GameVersion.FR:                  case GameVersion.LG:                  case GameVersion.FRLG:                      // only difference in FR/LG is deoxys which doesn't breed.                      if (pkm.InhabitedGeneration(3))                          return LevelUpFR[species].GetMoves(lvl);                      break;                    case GameVersion.D:                  case GameVersion.P:                  case GameVersion.DP:                      if (pkm.InhabitedGeneration(4))                          return LevelUpDP[species].GetMoves(lvl);                      break;                  case GameVersion.Pt:                      if (pkm.InhabitedGeneration(4))                          return LevelUpPt[species].GetMoves(lvl);                      break;                  case GameVersion.HG:                  case GameVersion.SS:                  case GameVersion.HGSS:                      if (pkm.InhabitedGeneration(4))                          return LevelUpHGSS[species].GetMoves(lvl);                      break;                    case GameVersion.B:                  case GameVersion.W:                  case GameVersion.BW:                      if (pkm.InhabitedGeneration(5))                          return LevelUpBW[species].GetMoves(lvl);                      break;                    case GameVersion.B2:                  case GameVersion.W2:                  case GameVersion.B2W2:                      if (pkm.InhabitedGeneration(5))                          return LevelUpB2W2[species].GetMoves(lvl);                      break;                    case GameVersion.X:                  case GameVersion.Y:                  case GameVersion.XY:                      if (pkm.InhabitedGeneration(6))                          return LevelUpXY[species].GetMoves(lvl);                      break;                    case GameVersion.AS:                  case GameVersion.OR:                  case GameVersion.ORAS:                      if (pkm.InhabitedGeneration(6))                          return LevelUpAO[species].GetMoves(lvl);                      break;                    case GameVersion.SN:                  case GameVersion.MN:                  case GameVersion.SM:                      if (species > MaxSpeciesID_7)                          break;                      if (pkm.InhabitedGeneration(7))                      {                          int index = PersonalTable.SM.GetFormeIndex(species' form);                          return LevelUpSM[index].GetMoves(lvl);                      }                      break;                    case GameVersion.US:                  case GameVersion.UM:                  case GameVersion.USUM:                      if (pkm.InhabitedGeneration(7))                      {                          int index = PersonalTable.USUM.GetFormeIndex(species' form);                          return LevelUpUSUM[index].GetMoves(lvl);                      }                      break;                    case GameVersion.SW:                  case GameVersion.SH:                  case GameVersion.SWSH:                      if (pkm.InhabitedGeneration(8))                      {                          int index = PersonalTable.SWSH.GetFormeIndex(species' form);                          return LevelUpSWSH[index].GetMoves(lvl);                      }                      break;              }
Magic Number,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,GetBaseEggMoves,The following statement contains a magic number: switch (gameSource)              {                  case GameVersion.GSC:                  case GameVersion.GS:                      // If checking back-transfer specimen (GSC->RBY)' remove moves that must be deleted prior to transfer                      int[] getRBYCompatibleMoves(int[] moves) => pkm.Format == 1 ? moves.Where(m => m <= MaxMoveID_1).ToArray() : moves;                      if (pkm.InhabitedGeneration(2))                          return getRBYCompatibleMoves(LevelUpGS[species].GetMoves(lvl));                      break;                  case GameVersion.C:                      if (pkm.InhabitedGeneration(2))                          return getRBYCompatibleMoves(LevelUpC[species].GetMoves(lvl));                      break;                    case GameVersion.R:                  case GameVersion.S:                  case GameVersion.RS:                      if (pkm.InhabitedGeneration(3))                          return LevelUpRS[species].GetMoves(lvl);                      break;                  case GameVersion.E:                      if (pkm.InhabitedGeneration(3))                          return LevelUpE[species].GetMoves(lvl);                      break;                  case GameVersion.FR:                  case GameVersion.LG:                  case GameVersion.FRLG:                      // only difference in FR/LG is deoxys which doesn't breed.                      if (pkm.InhabitedGeneration(3))                          return LevelUpFR[species].GetMoves(lvl);                      break;                    case GameVersion.D:                  case GameVersion.P:                  case GameVersion.DP:                      if (pkm.InhabitedGeneration(4))                          return LevelUpDP[species].GetMoves(lvl);                      break;                  case GameVersion.Pt:                      if (pkm.InhabitedGeneration(4))                          return LevelUpPt[species].GetMoves(lvl);                      break;                  case GameVersion.HG:                  case GameVersion.SS:                  case GameVersion.HGSS:                      if (pkm.InhabitedGeneration(4))                          return LevelUpHGSS[species].GetMoves(lvl);                      break;                    case GameVersion.B:                  case GameVersion.W:                  case GameVersion.BW:                      if (pkm.InhabitedGeneration(5))                          return LevelUpBW[species].GetMoves(lvl);                      break;                    case GameVersion.B2:                  case GameVersion.W2:                  case GameVersion.B2W2:                      if (pkm.InhabitedGeneration(5))                          return LevelUpB2W2[species].GetMoves(lvl);                      break;                    case GameVersion.X:                  case GameVersion.Y:                  case GameVersion.XY:                      if (pkm.InhabitedGeneration(6))                          return LevelUpXY[species].GetMoves(lvl);                      break;                    case GameVersion.AS:                  case GameVersion.OR:                  case GameVersion.ORAS:                      if (pkm.InhabitedGeneration(6))                          return LevelUpAO[species].GetMoves(lvl);                      break;                    case GameVersion.SN:                  case GameVersion.MN:                  case GameVersion.SM:                      if (species > MaxSpeciesID_7)                          break;                      if (pkm.InhabitedGeneration(7))                      {                          int index = PersonalTable.SM.GetFormeIndex(species' form);                          return LevelUpSM[index].GetMoves(lvl);                      }                      break;                    case GameVersion.US:                  case GameVersion.UM:                  case GameVersion.USUM:                      if (pkm.InhabitedGeneration(7))                      {                          int index = PersonalTable.USUM.GetFormeIndex(species' form);                          return LevelUpUSUM[index].GetMoves(lvl);                      }                      break;                    case GameVersion.SW:                  case GameVersion.SH:                  case GameVersion.SWSH:                      if (pkm.InhabitedGeneration(8))                      {                          int index = PersonalTable.SWSH.GetFormeIndex(species' form);                          return LevelUpSWSH[index].GetMoves(lvl);                      }                      break;              }
Magic Number,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,GetBaseEggMoves,The following statement contains a magic number: switch (gameSource)              {                  case GameVersion.GSC:                  case GameVersion.GS:                      // If checking back-transfer specimen (GSC->RBY)' remove moves that must be deleted prior to transfer                      int[] getRBYCompatibleMoves(int[] moves) => pkm.Format == 1 ? moves.Where(m => m <= MaxMoveID_1).ToArray() : moves;                      if (pkm.InhabitedGeneration(2))                          return getRBYCompatibleMoves(LevelUpGS[species].GetMoves(lvl));                      break;                  case GameVersion.C:                      if (pkm.InhabitedGeneration(2))                          return getRBYCompatibleMoves(LevelUpC[species].GetMoves(lvl));                      break;                    case GameVersion.R:                  case GameVersion.S:                  case GameVersion.RS:                      if (pkm.InhabitedGeneration(3))                          return LevelUpRS[species].GetMoves(lvl);                      break;                  case GameVersion.E:                      if (pkm.InhabitedGeneration(3))                          return LevelUpE[species].GetMoves(lvl);                      break;                  case GameVersion.FR:                  case GameVersion.LG:                  case GameVersion.FRLG:                      // only difference in FR/LG is deoxys which doesn't breed.                      if (pkm.InhabitedGeneration(3))                          return LevelUpFR[species].GetMoves(lvl);                      break;                    case GameVersion.D:                  case GameVersion.P:                  case GameVersion.DP:                      if (pkm.InhabitedGeneration(4))                          return LevelUpDP[species].GetMoves(lvl);                      break;                  case GameVersion.Pt:                      if (pkm.InhabitedGeneration(4))                          return LevelUpPt[species].GetMoves(lvl);                      break;                  case GameVersion.HG:                  case GameVersion.SS:                  case GameVersion.HGSS:                      if (pkm.InhabitedGeneration(4))                          return LevelUpHGSS[species].GetMoves(lvl);                      break;                    case GameVersion.B:                  case GameVersion.W:                  case GameVersion.BW:                      if (pkm.InhabitedGeneration(5))                          return LevelUpBW[species].GetMoves(lvl);                      break;                    case GameVersion.B2:                  case GameVersion.W2:                  case GameVersion.B2W2:                      if (pkm.InhabitedGeneration(5))                          return LevelUpB2W2[species].GetMoves(lvl);                      break;                    case GameVersion.X:                  case GameVersion.Y:                  case GameVersion.XY:                      if (pkm.InhabitedGeneration(6))                          return LevelUpXY[species].GetMoves(lvl);                      break;                    case GameVersion.AS:                  case GameVersion.OR:                  case GameVersion.ORAS:                      if (pkm.InhabitedGeneration(6))                          return LevelUpAO[species].GetMoves(lvl);                      break;                    case GameVersion.SN:                  case GameVersion.MN:                  case GameVersion.SM:                      if (species > MaxSpeciesID_7)                          break;                      if (pkm.InhabitedGeneration(7))                      {                          int index = PersonalTable.SM.GetFormeIndex(species' form);                          return LevelUpSM[index].GetMoves(lvl);                      }                      break;                    case GameVersion.US:                  case GameVersion.UM:                  case GameVersion.USUM:                      if (pkm.InhabitedGeneration(7))                      {                          int index = PersonalTable.USUM.GetFormeIndex(species' form);                          return LevelUpUSUM[index].GetMoves(lvl);                      }                      break;                    case GameVersion.SW:                  case GameVersion.SH:                  case GameVersion.SWSH:                      if (pkm.InhabitedGeneration(8))                      {                          int index = PersonalTable.SWSH.GetFormeIndex(species' form);                          return LevelUpSWSH[index].GetMoves(lvl);                      }                      break;              }
Magic Number,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,GetBaseEggMoves,The following statement contains a magic number: switch (gameSource)              {                  case GameVersion.GSC:                  case GameVersion.GS:                      // If checking back-transfer specimen (GSC->RBY)' remove moves that must be deleted prior to transfer                      int[] getRBYCompatibleMoves(int[] moves) => pkm.Format == 1 ? moves.Where(m => m <= MaxMoveID_1).ToArray() : moves;                      if (pkm.InhabitedGeneration(2))                          return getRBYCompatibleMoves(LevelUpGS[species].GetMoves(lvl));                      break;                  case GameVersion.C:                      if (pkm.InhabitedGeneration(2))                          return getRBYCompatibleMoves(LevelUpC[species].GetMoves(lvl));                      break;                    case GameVersion.R:                  case GameVersion.S:                  case GameVersion.RS:                      if (pkm.InhabitedGeneration(3))                          return LevelUpRS[species].GetMoves(lvl);                      break;                  case GameVersion.E:                      if (pkm.InhabitedGeneration(3))                          return LevelUpE[species].GetMoves(lvl);                      break;                  case GameVersion.FR:                  case GameVersion.LG:                  case GameVersion.FRLG:                      // only difference in FR/LG is deoxys which doesn't breed.                      if (pkm.InhabitedGeneration(3))                          return LevelUpFR[species].GetMoves(lvl);                      break;                    case GameVersion.D:                  case GameVersion.P:                  case GameVersion.DP:                      if (pkm.InhabitedGeneration(4))                          return LevelUpDP[species].GetMoves(lvl);                      break;                  case GameVersion.Pt:                      if (pkm.InhabitedGeneration(4))                          return LevelUpPt[species].GetMoves(lvl);                      break;                  case GameVersion.HG:                  case GameVersion.SS:                  case GameVersion.HGSS:                      if (pkm.InhabitedGeneration(4))                          return LevelUpHGSS[species].GetMoves(lvl);                      break;                    case GameVersion.B:                  case GameVersion.W:                  case GameVersion.BW:                      if (pkm.InhabitedGeneration(5))                          return LevelUpBW[species].GetMoves(lvl);                      break;                    case GameVersion.B2:                  case GameVersion.W2:                  case GameVersion.B2W2:                      if (pkm.InhabitedGeneration(5))                          return LevelUpB2W2[species].GetMoves(lvl);                      break;                    case GameVersion.X:                  case GameVersion.Y:                  case GameVersion.XY:                      if (pkm.InhabitedGeneration(6))                          return LevelUpXY[species].GetMoves(lvl);                      break;                    case GameVersion.AS:                  case GameVersion.OR:                  case GameVersion.ORAS:                      if (pkm.InhabitedGeneration(6))                          return LevelUpAO[species].GetMoves(lvl);                      break;                    case GameVersion.SN:                  case GameVersion.MN:                  case GameVersion.SM:                      if (species > MaxSpeciesID_7)                          break;                      if (pkm.InhabitedGeneration(7))                      {                          int index = PersonalTable.SM.GetFormeIndex(species' form);                          return LevelUpSM[index].GetMoves(lvl);                      }                      break;                    case GameVersion.US:                  case GameVersion.UM:                  case GameVersion.USUM:                      if (pkm.InhabitedGeneration(7))                      {                          int index = PersonalTable.USUM.GetFormeIndex(species' form);                          return LevelUpUSUM[index].GetMoves(lvl);                      }                      break;                    case GameVersion.SW:                  case GameVersion.SH:                  case GameVersion.SWSH:                      if (pkm.InhabitedGeneration(8))                      {                          int index = PersonalTable.SWSH.GetFormeIndex(species' form);                          return LevelUpSWSH[index].GetMoves(lvl);                      }                      break;              }
Magic Number,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,GetBaseEggMoves,The following statement contains a magic number: switch (gameSource)              {                  case GameVersion.GSC:                  case GameVersion.GS:                      // If checking back-transfer specimen (GSC->RBY)' remove moves that must be deleted prior to transfer                      int[] getRBYCompatibleMoves(int[] moves) => pkm.Format == 1 ? moves.Where(m => m <= MaxMoveID_1).ToArray() : moves;                      if (pkm.InhabitedGeneration(2))                          return getRBYCompatibleMoves(LevelUpGS[species].GetMoves(lvl));                      break;                  case GameVersion.C:                      if (pkm.InhabitedGeneration(2))                          return getRBYCompatibleMoves(LevelUpC[species].GetMoves(lvl));                      break;                    case GameVersion.R:                  case GameVersion.S:                  case GameVersion.RS:                      if (pkm.InhabitedGeneration(3))                          return LevelUpRS[species].GetMoves(lvl);                      break;                  case GameVersion.E:                      if (pkm.InhabitedGeneration(3))                          return LevelUpE[species].GetMoves(lvl);                      break;                  case GameVersion.FR:                  case GameVersion.LG:                  case GameVersion.FRLG:                      // only difference in FR/LG is deoxys which doesn't breed.                      if (pkm.InhabitedGeneration(3))                          return LevelUpFR[species].GetMoves(lvl);                      break;                    case GameVersion.D:                  case GameVersion.P:                  case GameVersion.DP:                      if (pkm.InhabitedGeneration(4))                          return LevelUpDP[species].GetMoves(lvl);                      break;                  case GameVersion.Pt:                      if (pkm.InhabitedGeneration(4))                          return LevelUpPt[species].GetMoves(lvl);                      break;                  case GameVersion.HG:                  case GameVersion.SS:                  case GameVersion.HGSS:                      if (pkm.InhabitedGeneration(4))                          return LevelUpHGSS[species].GetMoves(lvl);                      break;                    case GameVersion.B:                  case GameVersion.W:                  case GameVersion.BW:                      if (pkm.InhabitedGeneration(5))                          return LevelUpBW[species].GetMoves(lvl);                      break;                    case GameVersion.B2:                  case GameVersion.W2:                  case GameVersion.B2W2:                      if (pkm.InhabitedGeneration(5))                          return LevelUpB2W2[species].GetMoves(lvl);                      break;                    case GameVersion.X:                  case GameVersion.Y:                  case GameVersion.XY:                      if (pkm.InhabitedGeneration(6))                          return LevelUpXY[species].GetMoves(lvl);                      break;                    case GameVersion.AS:                  case GameVersion.OR:                  case GameVersion.ORAS:                      if (pkm.InhabitedGeneration(6))                          return LevelUpAO[species].GetMoves(lvl);                      break;                    case GameVersion.SN:                  case GameVersion.MN:                  case GameVersion.SM:                      if (species > MaxSpeciesID_7)                          break;                      if (pkm.InhabitedGeneration(7))                      {                          int index = PersonalTable.SM.GetFormeIndex(species' form);                          return LevelUpSM[index].GetMoves(lvl);                      }                      break;                    case GameVersion.US:                  case GameVersion.UM:                  case GameVersion.USUM:                      if (pkm.InhabitedGeneration(7))                      {                          int index = PersonalTable.USUM.GetFormeIndex(species' form);                          return LevelUpUSUM[index].GetMoves(lvl);                      }                      break;                    case GameVersion.SW:                  case GameVersion.SH:                  case GameVersion.SWSH:                      if (pkm.InhabitedGeneration(8))                      {                          int index = PersonalTable.SWSH.GetFormeIndex(species' form);                          return LevelUpSWSH[index].GetMoves(lvl);                      }                      break;              }
Magic Number,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,GetBaseEggMoves,The following statement contains a magic number: switch (gameSource)              {                  case GameVersion.GSC:                  case GameVersion.GS:                      // If checking back-transfer specimen (GSC->RBY)' remove moves that must be deleted prior to transfer                      int[] getRBYCompatibleMoves(int[] moves) => pkm.Format == 1 ? moves.Where(m => m <= MaxMoveID_1).ToArray() : moves;                      if (pkm.InhabitedGeneration(2))                          return getRBYCompatibleMoves(LevelUpGS[species].GetMoves(lvl));                      break;                  case GameVersion.C:                      if (pkm.InhabitedGeneration(2))                          return getRBYCompatibleMoves(LevelUpC[species].GetMoves(lvl));                      break;                    case GameVersion.R:                  case GameVersion.S:                  case GameVersion.RS:                      if (pkm.InhabitedGeneration(3))                          return LevelUpRS[species].GetMoves(lvl);                      break;                  case GameVersion.E:                      if (pkm.InhabitedGeneration(3))                          return LevelUpE[species].GetMoves(lvl);                      break;                  case GameVersion.FR:                  case GameVersion.LG:                  case GameVersion.FRLG:                      // only difference in FR/LG is deoxys which doesn't breed.                      if (pkm.InhabitedGeneration(3))                          return LevelUpFR[species].GetMoves(lvl);                      break;                    case GameVersion.D:                  case GameVersion.P:                  case GameVersion.DP:                      if (pkm.InhabitedGeneration(4))                          return LevelUpDP[species].GetMoves(lvl);                      break;                  case GameVersion.Pt:                      if (pkm.InhabitedGeneration(4))                          return LevelUpPt[species].GetMoves(lvl);                      break;                  case GameVersion.HG:                  case GameVersion.SS:                  case GameVersion.HGSS:                      if (pkm.InhabitedGeneration(4))                          return LevelUpHGSS[species].GetMoves(lvl);                      break;                    case GameVersion.B:                  case GameVersion.W:                  case GameVersion.BW:                      if (pkm.InhabitedGeneration(5))                          return LevelUpBW[species].GetMoves(lvl);                      break;                    case GameVersion.B2:                  case GameVersion.W2:                  case GameVersion.B2W2:                      if (pkm.InhabitedGeneration(5))                          return LevelUpB2W2[species].GetMoves(lvl);                      break;                    case GameVersion.X:                  case GameVersion.Y:                  case GameVersion.XY:                      if (pkm.InhabitedGeneration(6))                          return LevelUpXY[species].GetMoves(lvl);                      break;                    case GameVersion.AS:                  case GameVersion.OR:                  case GameVersion.ORAS:                      if (pkm.InhabitedGeneration(6))                          return LevelUpAO[species].GetMoves(lvl);                      break;                    case GameVersion.SN:                  case GameVersion.MN:                  case GameVersion.SM:                      if (species > MaxSpeciesID_7)                          break;                      if (pkm.InhabitedGeneration(7))                      {                          int index = PersonalTable.SM.GetFormeIndex(species' form);                          return LevelUpSM[index].GetMoves(lvl);                      }                      break;                    case GameVersion.US:                  case GameVersion.UM:                  case GameVersion.USUM:                      if (pkm.InhabitedGeneration(7))                      {                          int index = PersonalTable.USUM.GetFormeIndex(species' form);                          return LevelUpUSUM[index].GetMoves(lvl);                      }                      break;                    case GameVersion.SW:                  case GameVersion.SH:                  case GameVersion.SWSH:                      if (pkm.InhabitedGeneration(8))                      {                          int index = PersonalTable.SWSH.GetFormeIndex(species' form);                          return LevelUpSWSH[index].GetMoves(lvl);                      }                      break;              }
Magic Number,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,GetBaseEggMoves,The following statement contains a magic number: switch (gameSource)              {                  case GameVersion.GSC:                  case GameVersion.GS:                      // If checking back-transfer specimen (GSC->RBY)' remove moves that must be deleted prior to transfer                      int[] getRBYCompatibleMoves(int[] moves) => pkm.Format == 1 ? moves.Where(m => m <= MaxMoveID_1).ToArray() : moves;                      if (pkm.InhabitedGeneration(2))                          return getRBYCompatibleMoves(LevelUpGS[species].GetMoves(lvl));                      break;                  case GameVersion.C:                      if (pkm.InhabitedGeneration(2))                          return getRBYCompatibleMoves(LevelUpC[species].GetMoves(lvl));                      break;                    case GameVersion.R:                  case GameVersion.S:                  case GameVersion.RS:                      if (pkm.InhabitedGeneration(3))                          return LevelUpRS[species].GetMoves(lvl);                      break;                  case GameVersion.E:                      if (pkm.InhabitedGeneration(3))                          return LevelUpE[species].GetMoves(lvl);                      break;                  case GameVersion.FR:                  case GameVersion.LG:                  case GameVersion.FRLG:                      // only difference in FR/LG is deoxys which doesn't breed.                      if (pkm.InhabitedGeneration(3))                          return LevelUpFR[species].GetMoves(lvl);                      break;                    case GameVersion.D:                  case GameVersion.P:                  case GameVersion.DP:                      if (pkm.InhabitedGeneration(4))                          return LevelUpDP[species].GetMoves(lvl);                      break;                  case GameVersion.Pt:                      if (pkm.InhabitedGeneration(4))                          return LevelUpPt[species].GetMoves(lvl);                      break;                  case GameVersion.HG:                  case GameVersion.SS:                  case GameVersion.HGSS:                      if (pkm.InhabitedGeneration(4))                          return LevelUpHGSS[species].GetMoves(lvl);                      break;                    case GameVersion.B:                  case GameVersion.W:                  case GameVersion.BW:                      if (pkm.InhabitedGeneration(5))                          return LevelUpBW[species].GetMoves(lvl);                      break;                    case GameVersion.B2:                  case GameVersion.W2:                  case GameVersion.B2W2:                      if (pkm.InhabitedGeneration(5))                          return LevelUpB2W2[species].GetMoves(lvl);                      break;                    case GameVersion.X:                  case GameVersion.Y:                  case GameVersion.XY:                      if (pkm.InhabitedGeneration(6))                          return LevelUpXY[species].GetMoves(lvl);                      break;                    case GameVersion.AS:                  case GameVersion.OR:                  case GameVersion.ORAS:                      if (pkm.InhabitedGeneration(6))                          return LevelUpAO[species].GetMoves(lvl);                      break;                    case GameVersion.SN:                  case GameVersion.MN:                  case GameVersion.SM:                      if (species > MaxSpeciesID_7)                          break;                      if (pkm.InhabitedGeneration(7))                      {                          int index = PersonalTable.SM.GetFormeIndex(species' form);                          return LevelUpSM[index].GetMoves(lvl);                      }                      break;                    case GameVersion.US:                  case GameVersion.UM:                  case GameVersion.USUM:                      if (pkm.InhabitedGeneration(7))                      {                          int index = PersonalTable.USUM.GetFormeIndex(species' form);                          return LevelUpUSUM[index].GetMoves(lvl);                      }                      break;                    case GameVersion.SW:                  case GameVersion.SH:                  case GameVersion.SWSH:                      if (pkm.InhabitedGeneration(8))                      {                          int index = PersonalTable.SWSH.GetFormeIndex(species' form);                          return LevelUpSWSH[index].GetMoves(lvl);                      }                      break;              }
Magic Number,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,GetBaseEggMoves,The following statement contains a magic number: switch (gameSource)              {                  case GameVersion.GSC:                  case GameVersion.GS:                      // If checking back-transfer specimen (GSC->RBY)' remove moves that must be deleted prior to transfer                      int[] getRBYCompatibleMoves(int[] moves) => pkm.Format == 1 ? moves.Where(m => m <= MaxMoveID_1).ToArray() : moves;                      if (pkm.InhabitedGeneration(2))                          return getRBYCompatibleMoves(LevelUpGS[species].GetMoves(lvl));                      break;                  case GameVersion.C:                      if (pkm.InhabitedGeneration(2))                          return getRBYCompatibleMoves(LevelUpC[species].GetMoves(lvl));                      break;                    case GameVersion.R:                  case GameVersion.S:                  case GameVersion.RS:                      if (pkm.InhabitedGeneration(3))                          return LevelUpRS[species].GetMoves(lvl);                      break;                  case GameVersion.E:                      if (pkm.InhabitedGeneration(3))                          return LevelUpE[species].GetMoves(lvl);                      break;                  case GameVersion.FR:                  case GameVersion.LG:                  case GameVersion.FRLG:                      // only difference in FR/LG is deoxys which doesn't breed.                      if (pkm.InhabitedGeneration(3))                          return LevelUpFR[species].GetMoves(lvl);                      break;                    case GameVersion.D:                  case GameVersion.P:                  case GameVersion.DP:                      if (pkm.InhabitedGeneration(4))                          return LevelUpDP[species].GetMoves(lvl);                      break;                  case GameVersion.Pt:                      if (pkm.InhabitedGeneration(4))                          return LevelUpPt[species].GetMoves(lvl);                      break;                  case GameVersion.HG:                  case GameVersion.SS:                  case GameVersion.HGSS:                      if (pkm.InhabitedGeneration(4))                          return LevelUpHGSS[species].GetMoves(lvl);                      break;                    case GameVersion.B:                  case GameVersion.W:                  case GameVersion.BW:                      if (pkm.InhabitedGeneration(5))                          return LevelUpBW[species].GetMoves(lvl);                      break;                    case GameVersion.B2:                  case GameVersion.W2:                  case GameVersion.B2W2:                      if (pkm.InhabitedGeneration(5))                          return LevelUpB2W2[species].GetMoves(lvl);                      break;                    case GameVersion.X:                  case GameVersion.Y:                  case GameVersion.XY:                      if (pkm.InhabitedGeneration(6))                          return LevelUpXY[species].GetMoves(lvl);                      break;                    case GameVersion.AS:                  case GameVersion.OR:                  case GameVersion.ORAS:                      if (pkm.InhabitedGeneration(6))                          return LevelUpAO[species].GetMoves(lvl);                      break;                    case GameVersion.SN:                  case GameVersion.MN:                  case GameVersion.SM:                      if (species > MaxSpeciesID_7)                          break;                      if (pkm.InhabitedGeneration(7))                      {                          int index = PersonalTable.SM.GetFormeIndex(species' form);                          return LevelUpSM[index].GetMoves(lvl);                      }                      break;                    case GameVersion.US:                  case GameVersion.UM:                  case GameVersion.USUM:                      if (pkm.InhabitedGeneration(7))                      {                          int index = PersonalTable.USUM.GetFormeIndex(species' form);                          return LevelUpUSUM[index].GetMoves(lvl);                      }                      break;                    case GameVersion.SW:                  case GameVersion.SH:                  case GameVersion.SWSH:                      if (pkm.InhabitedGeneration(8))                      {                          int index = PersonalTable.SWSH.GetFormeIndex(species' form);                          return LevelUpSWSH[index].GetMoves(lvl);                      }                      break;              }
Magic Number,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,GetBaseEggMoves,The following statement contains a magic number: switch (gameSource)              {                  case GameVersion.GSC:                  case GameVersion.GS:                      // If checking back-transfer specimen (GSC->RBY)' remove moves that must be deleted prior to transfer                      int[] getRBYCompatibleMoves(int[] moves) => pkm.Format == 1 ? moves.Where(m => m <= MaxMoveID_1).ToArray() : moves;                      if (pkm.InhabitedGeneration(2))                          return getRBYCompatibleMoves(LevelUpGS[species].GetMoves(lvl));                      break;                  case GameVersion.C:                      if (pkm.InhabitedGeneration(2))                          return getRBYCompatibleMoves(LevelUpC[species].GetMoves(lvl));                      break;                    case GameVersion.R:                  case GameVersion.S:                  case GameVersion.RS:                      if (pkm.InhabitedGeneration(3))                          return LevelUpRS[species].GetMoves(lvl);                      break;                  case GameVersion.E:                      if (pkm.InhabitedGeneration(3))                          return LevelUpE[species].GetMoves(lvl);                      break;                  case GameVersion.FR:                  case GameVersion.LG:                  case GameVersion.FRLG:                      // only difference in FR/LG is deoxys which doesn't breed.                      if (pkm.InhabitedGeneration(3))                          return LevelUpFR[species].GetMoves(lvl);                      break;                    case GameVersion.D:                  case GameVersion.P:                  case GameVersion.DP:                      if (pkm.InhabitedGeneration(4))                          return LevelUpDP[species].GetMoves(lvl);                      break;                  case GameVersion.Pt:                      if (pkm.InhabitedGeneration(4))                          return LevelUpPt[species].GetMoves(lvl);                      break;                  case GameVersion.HG:                  case GameVersion.SS:                  case GameVersion.HGSS:                      if (pkm.InhabitedGeneration(4))                          return LevelUpHGSS[species].GetMoves(lvl);                      break;                    case GameVersion.B:                  case GameVersion.W:                  case GameVersion.BW:                      if (pkm.InhabitedGeneration(5))                          return LevelUpBW[species].GetMoves(lvl);                      break;                    case GameVersion.B2:                  case GameVersion.W2:                  case GameVersion.B2W2:                      if (pkm.InhabitedGeneration(5))                          return LevelUpB2W2[species].GetMoves(lvl);                      break;                    case GameVersion.X:                  case GameVersion.Y:                  case GameVersion.XY:                      if (pkm.InhabitedGeneration(6))                          return LevelUpXY[species].GetMoves(lvl);                      break;                    case GameVersion.AS:                  case GameVersion.OR:                  case GameVersion.ORAS:                      if (pkm.InhabitedGeneration(6))                          return LevelUpAO[species].GetMoves(lvl);                      break;                    case GameVersion.SN:                  case GameVersion.MN:                  case GameVersion.SM:                      if (species > MaxSpeciesID_7)                          break;                      if (pkm.InhabitedGeneration(7))                      {                          int index = PersonalTable.SM.GetFormeIndex(species' form);                          return LevelUpSM[index].GetMoves(lvl);                      }                      break;                    case GameVersion.US:                  case GameVersion.UM:                  case GameVersion.USUM:                      if (pkm.InhabitedGeneration(7))                      {                          int index = PersonalTable.USUM.GetFormeIndex(species' form);                          return LevelUpUSUM[index].GetMoves(lvl);                      }                      break;                    case GameVersion.SW:                  case GameVersion.SH:                  case GameVersion.SWSH:                      if (pkm.InhabitedGeneration(8))                      {                          int index = PersonalTable.SWSH.GetFormeIndex(species' form);                          return LevelUpSWSH[index].GetMoves(lvl);                      }                      break;              }
Magic Number,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,GetBaseEggMoves,The following statement contains a magic number: switch (gameSource)              {                  case GameVersion.GSC:                  case GameVersion.GS:                      // If checking back-transfer specimen (GSC->RBY)' remove moves that must be deleted prior to transfer                      int[] getRBYCompatibleMoves(int[] moves) => pkm.Format == 1 ? moves.Where(m => m <= MaxMoveID_1).ToArray() : moves;                      if (pkm.InhabitedGeneration(2))                          return getRBYCompatibleMoves(LevelUpGS[species].GetMoves(lvl));                      break;                  case GameVersion.C:                      if (pkm.InhabitedGeneration(2))                          return getRBYCompatibleMoves(LevelUpC[species].GetMoves(lvl));                      break;                    case GameVersion.R:                  case GameVersion.S:                  case GameVersion.RS:                      if (pkm.InhabitedGeneration(3))                          return LevelUpRS[species].GetMoves(lvl);                      break;                  case GameVersion.E:                      if (pkm.InhabitedGeneration(3))                          return LevelUpE[species].GetMoves(lvl);                      break;                  case GameVersion.FR:                  case GameVersion.LG:                  case GameVersion.FRLG:                      // only difference in FR/LG is deoxys which doesn't breed.                      if (pkm.InhabitedGeneration(3))                          return LevelUpFR[species].GetMoves(lvl);                      break;                    case GameVersion.D:                  case GameVersion.P:                  case GameVersion.DP:                      if (pkm.InhabitedGeneration(4))                          return LevelUpDP[species].GetMoves(lvl);                      break;                  case GameVersion.Pt:                      if (pkm.InhabitedGeneration(4))                          return LevelUpPt[species].GetMoves(lvl);                      break;                  case GameVersion.HG:                  case GameVersion.SS:                  case GameVersion.HGSS:                      if (pkm.InhabitedGeneration(4))                          return LevelUpHGSS[species].GetMoves(lvl);                      break;                    case GameVersion.B:                  case GameVersion.W:                  case GameVersion.BW:                      if (pkm.InhabitedGeneration(5))                          return LevelUpBW[species].GetMoves(lvl);                      break;                    case GameVersion.B2:                  case GameVersion.W2:                  case GameVersion.B2W2:                      if (pkm.InhabitedGeneration(5))                          return LevelUpB2W2[species].GetMoves(lvl);                      break;                    case GameVersion.X:                  case GameVersion.Y:                  case GameVersion.XY:                      if (pkm.InhabitedGeneration(6))                          return LevelUpXY[species].GetMoves(lvl);                      break;                    case GameVersion.AS:                  case GameVersion.OR:                  case GameVersion.ORAS:                      if (pkm.InhabitedGeneration(6))                          return LevelUpAO[species].GetMoves(lvl);                      break;                    case GameVersion.SN:                  case GameVersion.MN:                  case GameVersion.SM:                      if (species > MaxSpeciesID_7)                          break;                      if (pkm.InhabitedGeneration(7))                      {                          int index = PersonalTable.SM.GetFormeIndex(species' form);                          return LevelUpSM[index].GetMoves(lvl);                      }                      break;                    case GameVersion.US:                  case GameVersion.UM:                  case GameVersion.USUM:                      if (pkm.InhabitedGeneration(7))                      {                          int index = PersonalTable.USUM.GetFormeIndex(species' form);                          return LevelUpUSUM[index].GetMoves(lvl);                      }                      break;                    case GameVersion.SW:                  case GameVersion.SH:                  case GameVersion.SWSH:                      if (pkm.InhabitedGeneration(8))                      {                          int index = PersonalTable.SWSH.GetFormeIndex(species' form);                          return LevelUpSWSH[index].GetMoves(lvl);                      }                      break;              }
Magic Number,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,GetValidPostEvolutionMoves,The following statement contains a magic number: pkm.GenNumber >= 6
Magic Number,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,GetCanBeEgg23,The following statement contains a magic number: pkm.Format > 2 && pkm.Ball != 4
Magic Number,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,GetCanBeEgg23,The following statement contains a magic number: pkm.Format > 2 && pkm.Ball != 4
Magic Number,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,GetCanBeEgg23,The following statement contains a magic number: lvl < 5
Magic Number,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,GetCanBeEgg23,The following statement contains a magic number: pkm.Format > 3 && pkm.Met_Level < 5
Magic Number,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,GetCanBeEgg23,The following statement contains a magic number: pkm.Format > 3 && pkm.Met_Level < 5
Magic Number,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,GetCanBeEgg23,The following statement contains a magic number: pkm.Format > 3 && pkm.FatefulEncounter
Magic Number,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,GetPPTable,The following statement contains a magic number: format != 7
Magic Number,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,GetPPTable,The following statement contains a magic number: return format switch              {                  1 => MovePP_RBY'                  2 => MovePP_GSC'                  3 => MovePP_RS'                  4 => MovePP_DP'                  5 => MovePP_BW'                  6 => MovePP_XY'                  7 => MovePP_SM'                  8 => MovePP_SWSH'                  _ => Array.Empty<byte>()              };
Magic Number,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,GetPPTable,The following statement contains a magic number: return format switch              {                  1 => MovePP_RBY'                  2 => MovePP_GSC'                  3 => MovePP_RS'                  4 => MovePP_DP'                  5 => MovePP_BW'                  6 => MovePP_XY'                  7 => MovePP_SM'                  8 => MovePP_SWSH'                  _ => Array.Empty<byte>()              };
Magic Number,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,GetPPTable,The following statement contains a magic number: return format switch              {                  1 => MovePP_RBY'                  2 => MovePP_GSC'                  3 => MovePP_RS'                  4 => MovePP_DP'                  5 => MovePP_BW'                  6 => MovePP_XY'                  7 => MovePP_SM'                  8 => MovePP_SWSH'                  _ => Array.Empty<byte>()              };
Magic Number,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,GetPPTable,The following statement contains a magic number: return format switch              {                  1 => MovePP_RBY'                  2 => MovePP_GSC'                  3 => MovePP_RS'                  4 => MovePP_DP'                  5 => MovePP_BW'                  6 => MovePP_XY'                  7 => MovePP_SM'                  8 => MovePP_SWSH'                  _ => Array.Empty<byte>()              };
Magic Number,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,GetPPTable,The following statement contains a magic number: return format switch              {                  1 => MovePP_RBY'                  2 => MovePP_GSC'                  3 => MovePP_RS'                  4 => MovePP_DP'                  5 => MovePP_BW'                  6 => MovePP_XY'                  7 => MovePP_SM'                  8 => MovePP_SWSH'                  _ => Array.Empty<byte>()              };
Magic Number,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,GetPPTable,The following statement contains a magic number: return format switch              {                  1 => MovePP_RBY'                  2 => MovePP_GSC'                  3 => MovePP_RS'                  4 => MovePP_DP'                  5 => MovePP_BW'                  6 => MovePP_XY'                  7 => MovePP_SM'                  8 => MovePP_SWSH'                  _ => Array.Empty<byte>()              };
Magic Number,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,GetPPTable,The following statement contains a magic number: return format switch              {                  1 => MovePP_RBY'                  2 => MovePP_GSC'                  3 => MovePP_RS'                  4 => MovePP_DP'                  5 => MovePP_BW'                  6 => MovePP_XY'                  7 => MovePP_SM'                  8 => MovePP_SWSH'                  _ => Array.Empty<byte>()              };
Magic Number,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,GetWildBalls,The following statement contains a magic number: return pkm.GenNumber switch              {                  1 => WildPokeBalls1'                  2 => WildPokeBalls2'                  3 => WildPokeBalls3'                  4 => (pkm.HGSS ? WildPokeBalls4_HGSS : WildPokeBalls4_DPPt)'                  5 => WildPokeBalls5'                  6 => WildPokeballs6'                  7 => (pkm.GG ? WildPokeballs7b : WildPokeballs7)'                  8 => WildPokeballs8'                  _ => (ICollection<int>)Array.Empty<int>()              };
Magic Number,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,GetWildBalls,The following statement contains a magic number: return pkm.GenNumber switch              {                  1 => WildPokeBalls1'                  2 => WildPokeBalls2'                  3 => WildPokeBalls3'                  4 => (pkm.HGSS ? WildPokeBalls4_HGSS : WildPokeBalls4_DPPt)'                  5 => WildPokeBalls5'                  6 => WildPokeballs6'                  7 => (pkm.GG ? WildPokeballs7b : WildPokeballs7)'                  8 => WildPokeballs8'                  _ => (ICollection<int>)Array.Empty<int>()              };
Magic Number,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,GetWildBalls,The following statement contains a magic number: return pkm.GenNumber switch              {                  1 => WildPokeBalls1'                  2 => WildPokeBalls2'                  3 => WildPokeBalls3'                  4 => (pkm.HGSS ? WildPokeBalls4_HGSS : WildPokeBalls4_DPPt)'                  5 => WildPokeBalls5'                  6 => WildPokeballs6'                  7 => (pkm.GG ? WildPokeballs7b : WildPokeballs7)'                  8 => WildPokeballs8'                  _ => (ICollection<int>)Array.Empty<int>()              };
Magic Number,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,GetWildBalls,The following statement contains a magic number: return pkm.GenNumber switch              {                  1 => WildPokeBalls1'                  2 => WildPokeBalls2'                  3 => WildPokeBalls3'                  4 => (pkm.HGSS ? WildPokeBalls4_HGSS : WildPokeBalls4_DPPt)'                  5 => WildPokeBalls5'                  6 => WildPokeballs6'                  7 => (pkm.GG ? WildPokeballs7b : WildPokeballs7)'                  8 => WildPokeballs8'                  _ => (ICollection<int>)Array.Empty<int>()              };
Magic Number,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,GetWildBalls,The following statement contains a magic number: return pkm.GenNumber switch              {                  1 => WildPokeBalls1'                  2 => WildPokeBalls2'                  3 => WildPokeBalls3'                  4 => (pkm.HGSS ? WildPokeBalls4_HGSS : WildPokeBalls4_DPPt)'                  5 => WildPokeBalls5'                  6 => WildPokeballs6'                  7 => (pkm.GG ? WildPokeballs7b : WildPokeballs7)'                  8 => WildPokeballs8'                  _ => (ICollection<int>)Array.Empty<int>()              };
Magic Number,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,GetWildBalls,The following statement contains a magic number: return pkm.GenNumber switch              {                  1 => WildPokeBalls1'                  2 => WildPokeBalls2'                  3 => WildPokeBalls3'                  4 => (pkm.HGSS ? WildPokeBalls4_HGSS : WildPokeBalls4_DPPt)'                  5 => WildPokeBalls5'                  6 => WildPokeballs6'                  7 => (pkm.GG ? WildPokeballs7b : WildPokeballs7)'                  8 => WildPokeballs8'                  _ => (ICollection<int>)Array.Empty<int>()              };
Magic Number,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,GetWildBalls,The following statement contains a magic number: return pkm.GenNumber switch              {                  1 => WildPokeBalls1'                  2 => WildPokeBalls2'                  3 => WildPokeBalls3'                  4 => (pkm.HGSS ? WildPokeBalls4_HGSS : WildPokeBalls4_DPPt)'                  5 => WildPokeBalls5'                  6 => WildPokeballs6'                  7 => (pkm.GG ? WildPokeballs7b : WildPokeballs7)'                  8 => WildPokeballs8'                  _ => (ICollection<int>)Array.Empty<int>()              };
Magic Number,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,GetSplitBreedGeneration,The following statement contains a magic number: switch (generation)              {                  case 3: return SplitBreed_3;                    case 4:                  case 5:                  case 6:                  case 7:                  case 8:                      return SplitBreed;                    default: return Array.Empty<int>();              }
Magic Number,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,GetSplitBreedGeneration,The following statement contains a magic number: switch (generation)              {                  case 3: return SplitBreed_3;                    case 4:                  case 5:                  case 6:                  case 7:                  case 8:                      return SplitBreed;                    default: return Array.Empty<int>();              }
Magic Number,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,GetSplitBreedGeneration,The following statement contains a magic number: switch (generation)              {                  case 3: return SplitBreed_3;                    case 4:                  case 5:                  case 6:                  case 7:                  case 8:                      return SplitBreed;                    default: return Array.Empty<int>();              }
Magic Number,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,GetSplitBreedGeneration,The following statement contains a magic number: switch (generation)              {                  case 3: return SplitBreed_3;                    case 4:                  case 5:                  case 6:                  case 7:                  case 8:                      return SplitBreed;                    default: return Array.Empty<int>();              }
Magic Number,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,GetSplitBreedGeneration,The following statement contains a magic number: switch (generation)              {                  case 3: return SplitBreed_3;                    case 4:                  case 5:                  case 6:                  case 7:                  case 8:                      return SplitBreed;                    default: return Array.Empty<int>();              }
Magic Number,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,GetSplitBreedGeneration,The following statement contains a magic number: switch (generation)              {                  case 3: return SplitBreed_3;                    case 4:                  case 5:                  case 6:                  case 7:                  case 8:                      return SplitBreed;                    default: return Array.Empty<int>();              }
Magic Number,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,GetMaxSpeciesOrigin,The following statement contains a magic number: return GetMaxSpeciesOrigin(2);
Magic Number,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,GetMaxSpeciesOrigin,The following statement contains a magic number: pkm.Format == 2 || pkm.VC
Magic Number,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,GetMaxSpeciesOrigin,The following statement contains a magic number: return generation switch              {                  1 => MaxSpeciesID_1'                  2 => MaxSpeciesID_2'                  3 => MaxSpeciesID_3'                  4 => MaxSpeciesID_4'                  5 => MaxSpeciesID_5'                  6 => MaxSpeciesID_6'                  7 => MaxSpeciesID_7b'                  8 => MaxSpeciesID_8'                  _ => -1              };
Magic Number,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,GetMaxSpeciesOrigin,The following statement contains a magic number: return generation switch              {                  1 => MaxSpeciesID_1'                  2 => MaxSpeciesID_2'                  3 => MaxSpeciesID_3'                  4 => MaxSpeciesID_4'                  5 => MaxSpeciesID_5'                  6 => MaxSpeciesID_6'                  7 => MaxSpeciesID_7b'                  8 => MaxSpeciesID_8'                  _ => -1              };
Magic Number,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,GetMaxSpeciesOrigin,The following statement contains a magic number: return generation switch              {                  1 => MaxSpeciesID_1'                  2 => MaxSpeciesID_2'                  3 => MaxSpeciesID_3'                  4 => MaxSpeciesID_4'                  5 => MaxSpeciesID_5'                  6 => MaxSpeciesID_6'                  7 => MaxSpeciesID_7b'                  8 => MaxSpeciesID_8'                  _ => -1              };
Magic Number,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,GetMaxSpeciesOrigin,The following statement contains a magic number: return generation switch              {                  1 => MaxSpeciesID_1'                  2 => MaxSpeciesID_2'                  3 => MaxSpeciesID_3'                  4 => MaxSpeciesID_4'                  5 => MaxSpeciesID_5'                  6 => MaxSpeciesID_6'                  7 => MaxSpeciesID_7b'                  8 => MaxSpeciesID_8'                  _ => -1              };
Magic Number,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,GetMaxSpeciesOrigin,The following statement contains a magic number: return generation switch              {                  1 => MaxSpeciesID_1'                  2 => MaxSpeciesID_2'                  3 => MaxSpeciesID_3'                  4 => MaxSpeciesID_4'                  5 => MaxSpeciesID_5'                  6 => MaxSpeciesID_6'                  7 => MaxSpeciesID_7b'                  8 => MaxSpeciesID_8'                  _ => -1              };
Magic Number,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,GetMaxSpeciesOrigin,The following statement contains a magic number: return generation switch              {                  1 => MaxSpeciesID_1'                  2 => MaxSpeciesID_2'                  3 => MaxSpeciesID_3'                  4 => MaxSpeciesID_4'                  5 => MaxSpeciesID_5'                  6 => MaxSpeciesID_6'                  7 => MaxSpeciesID_7b'                  8 => MaxSpeciesID_8'                  _ => -1              };
Magic Number,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,GetMaxSpeciesOrigin,The following statement contains a magic number: return generation switch              {                  1 => MaxSpeciesID_1'                  2 => MaxSpeciesID_2'                  3 => MaxSpeciesID_3'                  4 => MaxSpeciesID_4'                  5 => MaxSpeciesID_5'                  6 => MaxSpeciesID_6'                  7 => MaxSpeciesID_7b'                  8 => MaxSpeciesID_8'                  _ => -1              };
Magic Number,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,GetFutureGenEvolutions,The following statement contains a magic number: return generation switch              {                  1 => FutureEvolutionsGen1'                  2 => FutureEvolutionsGen2'                  3 => FutureEvolutionsGen3'                  4 => FutureEvolutionsGen4'                  5 => FutureEvolutionsGen5'                  _ => (ICollection<int>)Array.Empty<int>()              };
Magic Number,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,GetFutureGenEvolutions,The following statement contains a magic number: return generation switch              {                  1 => FutureEvolutionsGen1'                  2 => FutureEvolutionsGen2'                  3 => FutureEvolutionsGen3'                  4 => FutureEvolutionsGen4'                  5 => FutureEvolutionsGen5'                  _ => (ICollection<int>)Array.Empty<int>()              };
Magic Number,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,GetFutureGenEvolutions,The following statement contains a magic number: return generation switch              {                  1 => FutureEvolutionsGen1'                  2 => FutureEvolutionsGen2'                  3 => FutureEvolutionsGen3'                  4 => FutureEvolutionsGen4'                  5 => FutureEvolutionsGen5'                  _ => (ICollection<int>)Array.Empty<int>()              };
Magic Number,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,GetFutureGenEvolutions,The following statement contains a magic number: return generation switch              {                  1 => FutureEvolutionsGen1'                  2 => FutureEvolutionsGen2'                  3 => FutureEvolutionsGen3'                  4 => FutureEvolutionsGen4'                  5 => FutureEvolutionsGen5'                  _ => (ICollection<int>)Array.Empty<int>()              };
Magic Number,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,GetDebutGeneration,The following statement contains a magic number: return 2;
Magic Number,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,GetDebutGeneration,The following statement contains a magic number: return 3;
Magic Number,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,GetDebutGeneration,The following statement contains a magic number: return 4;
Magic Number,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,GetDebutGeneration,The following statement contains a magic number: return 5;
Magic Number,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,GetDebutGeneration,The following statement contains a magic number: return 6;
Magic Number,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,GetDebutGeneration,The following statement contains a magic number: return 7;
Magic Number,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,GetDebutGeneration,The following statement contains a magic number: return 8;
Magic Number,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,GetMaxLanguageID,The following statement contains a magic number: return generation switch              {                  1 => (int) LanguageID.Spanish' // 1-7 except 6                  3 => (int) LanguageID.Spanish' // 1-7 except 6                  2 => (int) LanguageID.Korean'                  4 => (int) LanguageID.Korean'                  5 => (int) LanguageID.Korean'                  6 => (int) LanguageID.Korean'                  7 => (int) LanguageID.ChineseT'                  8 => (int) LanguageID.ChineseT'                  _ => -1              };
Magic Number,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,GetMaxLanguageID,The following statement contains a magic number: return generation switch              {                  1 => (int) LanguageID.Spanish' // 1-7 except 6                  3 => (int) LanguageID.Spanish' // 1-7 except 6                  2 => (int) LanguageID.Korean'                  4 => (int) LanguageID.Korean'                  5 => (int) LanguageID.Korean'                  6 => (int) LanguageID.Korean'                  7 => (int) LanguageID.ChineseT'                  8 => (int) LanguageID.ChineseT'                  _ => -1              };
Magic Number,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,GetMaxLanguageID,The following statement contains a magic number: return generation switch              {                  1 => (int) LanguageID.Spanish' // 1-7 except 6                  3 => (int) LanguageID.Spanish' // 1-7 except 6                  2 => (int) LanguageID.Korean'                  4 => (int) LanguageID.Korean'                  5 => (int) LanguageID.Korean'                  6 => (int) LanguageID.Korean'                  7 => (int) LanguageID.ChineseT'                  8 => (int) LanguageID.ChineseT'                  _ => -1              };
Magic Number,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,GetMaxLanguageID,The following statement contains a magic number: return generation switch              {                  1 => (int) LanguageID.Spanish' // 1-7 except 6                  3 => (int) LanguageID.Spanish' // 1-7 except 6                  2 => (int) LanguageID.Korean'                  4 => (int) LanguageID.Korean'                  5 => (int) LanguageID.Korean'                  6 => (int) LanguageID.Korean'                  7 => (int) LanguageID.ChineseT'                  8 => (int) LanguageID.ChineseT'                  _ => -1              };
Magic Number,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,GetMaxLanguageID,The following statement contains a magic number: return generation switch              {                  1 => (int) LanguageID.Spanish' // 1-7 except 6                  3 => (int) LanguageID.Spanish' // 1-7 except 6                  2 => (int) LanguageID.Korean'                  4 => (int) LanguageID.Korean'                  5 => (int) LanguageID.Korean'                  6 => (int) LanguageID.Korean'                  7 => (int) LanguageID.ChineseT'                  8 => (int) LanguageID.ChineseT'                  _ => -1              };
Magic Number,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,GetMaxLanguageID,The following statement contains a magic number: return generation switch              {                  1 => (int) LanguageID.Spanish' // 1-7 except 6                  3 => (int) LanguageID.Spanish' // 1-7 except 6                  2 => (int) LanguageID.Korean'                  4 => (int) LanguageID.Korean'                  5 => (int) LanguageID.Korean'                  6 => (int) LanguageID.Korean'                  7 => (int) LanguageID.ChineseT'                  8 => (int) LanguageID.ChineseT'                  _ => -1              };
Magic Number,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,GetMaxLanguageID,The following statement contains a magic number: return generation switch              {                  1 => (int) LanguageID.Spanish' // 1-7 except 6                  3 => (int) LanguageID.Spanish' // 1-7 except 6                  2 => (int) LanguageID.Korean'                  4 => (int) LanguageID.Korean'                  5 => (int) LanguageID.Korean'                  6 => (int) LanguageID.Korean'                  7 => (int) LanguageID.ChineseT'                  8 => (int) LanguageID.ChineseT'                  _ => -1              };
Magic Number,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,GetReleasedHeldItems,The following statement contains a magic number: return generation switch              {                  2 => ReleasedHeldItems_2'                  3 => ReleasedHeldItems_3'                  4 => ReleasedHeldItems_4'                  5 => ReleasedHeldItems_5'                  6 => ReleasedHeldItems_6'                  7 => ReleasedHeldItems_7'                  8 => ReleasedHeldItems_8'                  _ => Array.Empty<bool>()              };
Magic Number,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,GetReleasedHeldItems,The following statement contains a magic number: return generation switch              {                  2 => ReleasedHeldItems_2'                  3 => ReleasedHeldItems_3'                  4 => ReleasedHeldItems_4'                  5 => ReleasedHeldItems_5'                  6 => ReleasedHeldItems_6'                  7 => ReleasedHeldItems_7'                  8 => ReleasedHeldItems_8'                  _ => Array.Empty<bool>()              };
Magic Number,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,GetReleasedHeldItems,The following statement contains a magic number: return generation switch              {                  2 => ReleasedHeldItems_2'                  3 => ReleasedHeldItems_3'                  4 => ReleasedHeldItems_4'                  5 => ReleasedHeldItems_5'                  6 => ReleasedHeldItems_6'                  7 => ReleasedHeldItems_7'                  8 => ReleasedHeldItems_8'                  _ => Array.Empty<bool>()              };
Magic Number,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,GetReleasedHeldItems,The following statement contains a magic number: return generation switch              {                  2 => ReleasedHeldItems_2'                  3 => ReleasedHeldItems_3'                  4 => ReleasedHeldItems_4'                  5 => ReleasedHeldItems_5'                  6 => ReleasedHeldItems_6'                  7 => ReleasedHeldItems_7'                  8 => ReleasedHeldItems_8'                  _ => Array.Empty<bool>()              };
Magic Number,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,GetReleasedHeldItems,The following statement contains a magic number: return generation switch              {                  2 => ReleasedHeldItems_2'                  3 => ReleasedHeldItems_3'                  4 => ReleasedHeldItems_4'                  5 => ReleasedHeldItems_5'                  6 => ReleasedHeldItems_6'                  7 => ReleasedHeldItems_7'                  8 => ReleasedHeldItems_8'                  _ => Array.Empty<bool>()              };
Magic Number,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,GetReleasedHeldItems,The following statement contains a magic number: return generation switch              {                  2 => ReleasedHeldItems_2'                  3 => ReleasedHeldItems_3'                  4 => ReleasedHeldItems_4'                  5 => ReleasedHeldItems_5'                  6 => ReleasedHeldItems_6'                  7 => ReleasedHeldItems_7'                  8 => ReleasedHeldItems_8'                  _ => Array.Empty<bool>()              };
Magic Number,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,GetReleasedHeldItems,The following statement contains a magic number: return generation switch              {                  2 => ReleasedHeldItems_2'                  3 => ReleasedHeldItems_3'                  4 => ReleasedHeldItems_4'                  5 => ReleasedHeldItems_5'                  6 => ReleasedHeldItems_6'                  7 => ReleasedHeldItems_7'                  8 => ReleasedHeldItems_8'                  _ => Array.Empty<bool>()              };
Magic Number,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,IsEvolvedFormChange,The following statement contains a magic number: pkm.Format >= 7 && AlolanVariantEvolutions12.Contains(pkm.Species)
Magic Number,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,IsEvolvedFormChange,The following statement contains a magic number: pkm.Format >= 8
Magic Number,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,IsEvolvedFormChange,The following statement contains a magic number: return pkm.Species == 773;
Magic Number,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,IsEvolutionValid,The following statement contains a magic number: var poss = EvolutionChain.GetValidPreEvolutions(pkm' lvl: 100' minLevel: minLevel' skipChecks: true);
Magic Number,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,IsEvolutionValid,The following statement contains a magic number: gen >= 3 && GetSplitBreedGeneration(gen).Contains(GetBaseSpecies(pkm' poss' 1).Species)
Magic Number,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,IsEvolutionValidWithMove,The following statement contains a magic number: !SpeciesEvolutionWithMove.Contains(pkm.Species) || pkm.Format <= 3 || (BabyEvolutionWithMove.Contains(pkm.Species) && gen <= 3)
Magic Number,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,IsEvolutionValidWithMove,The following statement contains a magic number: !SpeciesEvolutionWithMove.Contains(pkm.Species) || pkm.Format <= 3 || (BabyEvolutionWithMove.Contains(pkm.Species) && gen <= 3)
Magic Number,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,IsEvolutionValidWithMove,The following statement contains a magic number: var LearnLevel = 101;
Magic Number,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,IsEvolutionValidWithMove,The following statement contains a magic number: LearnLevel = Math.Min(LearnLevel' gen <= 3 ? 6 : 2);
Magic Number,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,IsEvolutionValidWithMove,The following statement contains a magic number: LearnLevel = Math.Min(LearnLevel' gen <= 3 ? 6 : 2);
Magic Number,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,IsEvolutionValidWithMove,The following statement contains a magic number: LearnLevel = Math.Min(LearnLevel' gen <= 3 ? 6 : 2);
Magic Number,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,IsEvolutionValidWithMove,The following statement contains a magic number: pkm.HasOriginalMetLocation || (pkm.Format == 4 && pkm.Gen3) || pkm.VC || pkm.Species == 700
Magic Number,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,IsEvolutionValidWithMove,The following statement contains a magic number: pkm.HasOriginalMetLocation || (pkm.Format == 4 && pkm.Gen3) || pkm.VC || pkm.Species == 700
Magic Number,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,IsMoveInherited,The following statement contains a magic number: info.Generation >= 6
Magic Number,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,IsMoveInherited,The following statement contains a magic number: return 4 > info.Moves.Count(m => m.Source == MoveSource.EggMove || m.Source == MoveSource.InheritLevelUp);
Magic Number,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,IsFormChangeable,The following statement contains a magic number: species == 718 && pkm.InhabitedGeneration(7) && pkm.AltForm > 1
Magic Number,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,IsFormChangeable,The following statement contains a magic number: species == 718 && pkm.InhabitedGeneration(7) && pkm.AltForm > 1
Magic Number,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,GetLowestLevel,The following statement contains a magic number: startLevel = 100;
Magic Number,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,GetCanKnowMove,The following statement contains a magic number: pkm.Species == 235
Magic Number,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,GetBaseEggSpecies,The following statement contains a magic number: return GetBaseSpecies(pkm' generation: 2);
Magic Number,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,GetBaseSpecies,The following statement contains a magic number: var evos = table.GetValidPreEvolutions(pkm' maxLevel: 100' maxSpeciesOrigin: maxSpeciesOrigin' skipChecks: true);
Magic Number,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,GetMaxLevelGeneration,The following statement contains a magic number: pkm.Format <= 2
Magic Number,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,GetMaxLevelGeneration,The following statement contains a magic number: pkm.Species == 700 && generation == 5
Magic Number,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,GetMaxLevelGeneration,The following statement contains a magic number: pkm.Species == 700 && generation == 5
Magic Number,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,GetMaxLevelGeneration,The following statement contains a magic number: pkm.Gen3 && pkm.Format > 4 && pkm.Met_Level == pkm.CurrentLevel && FutureEvolutionsGen3_LevelUpGen4.Contains(pkm.Species)
Magic Number,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,GetMinLevelEncounter,The following statement contains a magic number: return 5;
Magic Number,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,GetMinLevelEncounter,The following statement contains a magic number: pkm.Format == 3 && pkm.WasEgg
Magic Number,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,GetMinLevelEncounter,The following statement contains a magic number: pkm.Format == 4 && pkm.Gen4 && pkm.WasEgg
Magic Number,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,GetValidMoves,The following statement contains a magic number: Relearn && pkm.Format >= 6
Magic Number,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,GetValidMoves,The following statement contains a magic number: formcount = 4;
Magic Number,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,GetValidMoves,The following statement contains a magic number: pkm.Format == 3 && species == 386
Magic Number,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,GetValidMoves,The following statement contains a magic number: pkm.Format == 3 && species == 386
Magic Number,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,GetValidMoves,The following statement contains a magic number: pkm.Format <= 3
Magic Number,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,GetValidMoves,The following statement contains a magic number: Relearn && generation >= 6
Magic Number,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,GetEvoMoveMinLevel2,The following statement contains a magic number: generation != 2 || ParseSettings.AllowGen2MoveReminder(pkm)
Magic Number,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,HasMetLocationUpdatedTransfer,The following statement contains a magic number: return currentGeneration >= 3;
Magic Number,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,HasMetLocationUpdatedTransfer,The following statement contains a magic number: originalGeneration < 3
Magic Number,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,HasMetLocationUpdatedTransfer,The following statement contains a magic number: originalGeneration <= 4
Magic Number,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,IsValidMissingLanguage,The following statement contains a magic number: return pkm.Format == 5 && pkm.BW;
Magic Number,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,GetGBStadiumOTID,The following statement contains a magic number: return s == GameVersion.Stadium2 ? 2000 : 1999;
Magic Number,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,GetGBStadiumOTID,The following statement contains a magic number: return s == GameVersion.Stadium2 ? 2000 : 1999;
Magic Number,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,GetGBStadiumOTID,The following statement contains a magic number: return 2000;
Magic Number,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,GetMaxLengthOT,The following statement contains a magic number: switch (lang)              {                  case LanguageID.Korean:                  case LanguageID.Japanese: return gen >= 6 ? 6 : 5;                  default: return gen >= 6 ? 12 : 7;              }
Magic Number,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,GetMaxLengthOT,The following statement contains a magic number: switch (lang)              {                  case LanguageID.Korean:                  case LanguageID.Japanese: return gen >= 6 ? 6 : 5;                  default: return gen >= 6 ? 12 : 7;              }
Magic Number,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,GetMaxLengthOT,The following statement contains a magic number: switch (lang)              {                  case LanguageID.Korean:                  case LanguageID.Japanese: return gen >= 6 ? 6 : 5;                  default: return gen >= 6 ? 12 : 7;              }
Magic Number,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,GetMaxLengthOT,The following statement contains a magic number: switch (lang)              {                  case LanguageID.Korean:                  case LanguageID.Japanese: return gen >= 6 ? 6 : 5;                  default: return gen >= 6 ? 12 : 7;              }
Magic Number,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,GetMaxLengthOT,The following statement contains a magic number: switch (lang)              {                  case LanguageID.Korean:                  case LanguageID.Japanese: return gen >= 6 ? 6 : 5;                  default: return gen >= 6 ? 12 : 7;              }
Magic Number,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,GetMaxLengthOT,The following statement contains a magic number: switch (lang)              {                  case LanguageID.Korean:                  case LanguageID.Japanese: return gen >= 6 ? 6 : 5;                  default: return gen >= 6 ? 12 : 7;              }
Magic Number,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,GetMaxLengthNickname,The following statement contains a magic number: switch (lang)              {                  case LanguageID.Korean:                  case LanguageID.Japanese: return gen >= 6 ? 6 : 5;                  default: return gen >= 6 ? 12 : 10;              }
Magic Number,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,GetMaxLengthNickname,The following statement contains a magic number: switch (lang)              {                  case LanguageID.Korean:                  case LanguageID.Japanese: return gen >= 6 ? 6 : 5;                  default: return gen >= 6 ? 12 : 10;              }
Magic Number,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,GetMaxLengthNickname,The following statement contains a magic number: switch (lang)              {                  case LanguageID.Korean:                  case LanguageID.Japanese: return gen >= 6 ? 6 : 5;                  default: return gen >= 6 ? 12 : 10;              }
Magic Number,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,GetMaxLengthNickname,The following statement contains a magic number: switch (lang)              {                  case LanguageID.Korean:                  case LanguageID.Japanese: return gen >= 6 ? 6 : 5;                  default: return gen >= 6 ? 12 : 10;              }
Magic Number,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,GetMaxLengthNickname,The following statement contains a magic number: switch (lang)              {                  case LanguageID.Korean:                  case LanguageID.Japanese: return gen >= 6 ? 6 : 5;                  default: return gen >= 6 ? 12 : 10;              }
Magic Number,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,GetMaxLengthNickname,The following statement contains a magic number: switch (lang)              {                  case LanguageID.Korean:                  case LanguageID.Japanese: return gen >= 6 ? 6 : 5;                  default: return gen >= 6 ? 12 : 10;              }
Magic Number,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,GetIsFixedIVSequenceValidSkipRand,The following statement contains a magic number: i < 6
Magic Number,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,GetIsFixedIVSequenceValidNoRand,The following statement contains a magic number: i < 6
Magic Number,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,GetTransfer45MetLocation,The following statement contains a magic number: spec == 251
Magic Number,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,GetTransfer45MetLocation,The following statement contains a magic number: 243 <= spec && spec <= 245
Magic Number,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,GetTransfer45MetLocation,The following statement contains a magic number: 243 <= spec && spec <= 245
Magic Number,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,RemoveMovesHM45,The following statement contains a magic number: i < 4
Magic Number,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,GetFavorableHMBanlist,The following statement contains a magic number: return moves.Contains(432) ? HM_HGSS : HM_DPPt;
Magic Number,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,IsConsoleRegionCountryValid,The following statement contains a magic number: return consoleRegion switch              {                  0 => (country == 1)' // Japan                  1 => ((8 <= country && country <= 52) || ExtendedAmericas.Contains(country))' // Americas                  2 => ((64 <= country && country <= 127) || ExtendedEurope.Contains(country))' // Europe                  4 => (country == 144 || country == 160)' // China                  5 => (country == 136)' // Korea                  6 => (country == 144 || country == 128)' // Taiwan                  _ => false              };
Magic Number,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,IsConsoleRegionCountryValid,The following statement contains a magic number: return consoleRegion switch              {                  0 => (country == 1)' // Japan                  1 => ((8 <= country && country <= 52) || ExtendedAmericas.Contains(country))' // Americas                  2 => ((64 <= country && country <= 127) || ExtendedEurope.Contains(country))' // Europe                  4 => (country == 144 || country == 160)' // China                  5 => (country == 136)' // Korea                  6 => (country == 144 || country == 128)' // Taiwan                  _ => false              };
Magic Number,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,IsConsoleRegionCountryValid,The following statement contains a magic number: return consoleRegion switch              {                  0 => (country == 1)' // Japan                  1 => ((8 <= country && country <= 52) || ExtendedAmericas.Contains(country))' // Americas                  2 => ((64 <= country && country <= 127) || ExtendedEurope.Contains(country))' // Europe                  4 => (country == 144 || country == 160)' // China                  5 => (country == 136)' // Korea                  6 => (country == 144 || country == 128)' // Taiwan                  _ => false              };
Magic Number,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,IsConsoleRegionCountryValid,The following statement contains a magic number: return consoleRegion switch              {                  0 => (country == 1)' // Japan                  1 => ((8 <= country && country <= 52) || ExtendedAmericas.Contains(country))' // Americas                  2 => ((64 <= country && country <= 127) || ExtendedEurope.Contains(country))' // Europe                  4 => (country == 144 || country == 160)' // China                  5 => (country == 136)' // Korea                  6 => (country == 144 || country == 128)' // Taiwan                  _ => false              };
Magic Number,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,IsConsoleRegionCountryValid,The following statement contains a magic number: return consoleRegion switch              {                  0 => (country == 1)' // Japan                  1 => ((8 <= country && country <= 52) || ExtendedAmericas.Contains(country))' // Americas                  2 => ((64 <= country && country <= 127) || ExtendedEurope.Contains(country))' // Europe                  4 => (country == 144 || country == 160)' // China                  5 => (country == 136)' // Korea                  6 => (country == 144 || country == 128)' // Taiwan                  _ => false              };
Magic Number,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,IsConsoleRegionCountryValid,The following statement contains a magic number: return consoleRegion switch              {                  0 => (country == 1)' // Japan                  1 => ((8 <= country && country <= 52) || ExtendedAmericas.Contains(country))' // Americas                  2 => ((64 <= country && country <= 127) || ExtendedEurope.Contains(country))' // Europe                  4 => (country == 144 || country == 160)' // China                  5 => (country == 136)' // Korea                  6 => (country == 144 || country == 128)' // Taiwan                  _ => false              };
Magic Number,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,IsConsoleRegionCountryValid,The following statement contains a magic number: return consoleRegion switch              {                  0 => (country == 1)' // Japan                  1 => ((8 <= country && country <= 52) || ExtendedAmericas.Contains(country))' // Americas                  2 => ((64 <= country && country <= 127) || ExtendedEurope.Contains(country))' // Europe                  4 => (country == 144 || country == 160)' // China                  5 => (country == 136)' // Korea                  6 => (country == 144 || country == 128)' // Taiwan                  _ => false              };
Magic Number,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,IsConsoleRegionCountryValid,The following statement contains a magic number: return consoleRegion switch              {                  0 => (country == 1)' // Japan                  1 => ((8 <= country && country <= 52) || ExtendedAmericas.Contains(country))' // Americas                  2 => ((64 <= country && country <= 127) || ExtendedEurope.Contains(country))' // Europe                  4 => (country == 144 || country == 160)' // China                  5 => (country == 136)' // Korea                  6 => (country == 144 || country == 128)' // Taiwan                  _ => false              };
Magic Number,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,IsConsoleRegionCountryValid,The following statement contains a magic number: return consoleRegion switch              {                  0 => (country == 1)' // Japan                  1 => ((8 <= country && country <= 52) || ExtendedAmericas.Contains(country))' // Americas                  2 => ((64 <= country && country <= 127) || ExtendedEurope.Contains(country))' // Europe                  4 => (country == 144 || country == 160)' // China                  5 => (country == 136)' // Korea                  6 => (country == 144 || country == 128)' // Taiwan                  _ => false              };
Magic Number,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,IsConsoleRegionCountryValid,The following statement contains a magic number: return consoleRegion switch              {                  0 => (country == 1)' // Japan                  1 => ((8 <= country && country <= 52) || ExtendedAmericas.Contains(country))' // Americas                  2 => ((64 <= country && country <= 127) || ExtendedEurope.Contains(country))' // Europe                  4 => (country == 144 || country == 160)' // China                  5 => (country == 136)' // Korea                  6 => (country == 144 || country == 128)' // Taiwan                  _ => false              };
Magic Number,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,IsConsoleRegionCountryValid,The following statement contains a magic number: return consoleRegion switch              {                  0 => (country == 1)' // Japan                  1 => ((8 <= country && country <= 52) || ExtendedAmericas.Contains(country))' // Americas                  2 => ((64 <= country && country <= 127) || ExtendedEurope.Contains(country))' // Europe                  4 => (country == 144 || country == 160)' // China                  5 => (country == 136)' // Korea                  6 => (country == 144 || country == 128)' // Taiwan                  _ => false              };
Magic Number,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,IsConsoleRegionCountryValid,The following statement contains a magic number: return consoleRegion switch              {                  0 => (country == 1)' // Japan                  1 => ((8 <= country && country <= 52) || ExtendedAmericas.Contains(country))' // Americas                  2 => ((64 <= country && country <= 127) || ExtendedEurope.Contains(country))' // Europe                  4 => (country == 144 || country == 160)' // China                  5 => (country == 136)' // Korea                  6 => (country == 144 || country == 128)' // Taiwan                  _ => false              };
Magic Number,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,IsConsoleRegionCountryValid,The following statement contains a magic number: return consoleRegion switch              {                  0 => (country == 1)' // Japan                  1 => ((8 <= country && country <= 52) || ExtendedAmericas.Contains(country))' // Americas                  2 => ((64 <= country && country <= 127) || ExtendedEurope.Contains(country))' // Europe                  4 => (country == 144 || country == 160)' // China                  5 => (country == 136)' // Korea                  6 => (country == 144 || country == 128)' // Taiwan                  _ => false              };
Magic Number,PKHeX.Core,Data,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Data.cs,UnpackMini,The following statement contains a magic number: fileData == null || fileData.Length < 4
Magic Number,PKHeX.Core,Data,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Data.cs,UnpackMini,The following statement contains a magic number: int count = BitConverter.ToUInt16(fileData' 2);
Magic Number,PKHeX.Core,Data,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Data.cs,UnpackMini,The following statement contains a magic number: int ctr = 4;
Magic Number,PKHeX.Core,Data,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Data.cs,UnpackMini,The following statement contains a magic number: ctr += 4;
Magic Number,PKHeX.Core,Data,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Data.cs,UnpackMini,The following statement contains a magic number: ctr += 4;
Magic Number,PKHeX.Core,Encounters2,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters2.cs,Encounters2,The following statement contains a magic number: MarkEncountersGeneration(2' SlotsGS' SlotsC' SlotsGSC);
Magic Number,PKHeX.Core,Encounters2,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters2.cs,Encounters2,The following statement contains a magic number: MarkEncountersGeneration(2' StaticGS' StaticC' StaticGSC' TradeGift_GSC);
Magic Number,PKHeX.Core,Encounters2,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters2.cs,GetGSCHeadbuttAvailability,The following statement contains a magic number: var trainerpivot = TID % 10;
Magic Number,PKHeX.Core,Encounters3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters3.cs,Encounters3,The following statement contains a magic number: MarkEncountersGeneration(3' SlotsR' SlotsS' SlotsE' SlotsFR' SlotsLG' SlotsXD);
Magic Number,PKHeX.Core,Encounters3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters3.cs,Encounters3,The following statement contains a magic number: MarkEncountersGeneration(3' StaticR' StaticS' StaticE' StaticFR' StaticLG' Encounter_CXD' TradeGift_RSE' TradeGift_FRLG);
Magic Number,PKHeX.Core,Encounters3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters3.cs,MarkG3Slots_FRLG,The following statement contains a magic number: Areas = Areas.Where(a => a.Location < 188 || a.Location > 194).GroupBy(a => a.Location).Select(a => new EncounterArea3              {                  Location = a.First().Location'                  Slots = a.SelectMany(m => m.Slots).ToArray()              }).ToArray();
Magic Number,PKHeX.Core,Encounters3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters3.cs,MarkG3Slots_FRLG,The following statement contains a magic number: Areas = Areas.Where(a => a.Location < 188 || a.Location > 194).GroupBy(a => a.Location).Select(a => new EncounterArea3              {                  Location = a.First().Location'                  Slots = a.SelectMany(m => m.Slots).ToArray()              }).ToArray();
Magic Number,PKHeX.Core,Encounters3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters3.cs,GetUnownArea,The following statement contains a magic number: return new EncounterArea3              {                  Location = location'                  Slots = SlotForms.Select((_' i) => new EncounterSlot                  {                      Species = 201' LevelMin = 25' LevelMax = 25' Type = SlotType.Grass'                      SlotNumber = i'                      Form = SlotForms[i]                  }).ToArray()              };
Magic Number,PKHeX.Core,Encounters3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters3.cs,GetUnownArea,The following statement contains a magic number: return new EncounterArea3              {                  Location = location'                  Slots = SlotForms.Select((_' i) => new EncounterSlot                  {                      Species = 201' LevelMin = 25' LevelMax = 25' Type = SlotType.Grass'                      SlotNumber = i'                      Form = SlotForms[i]                  }).ToArray()              };
Magic Number,PKHeX.Core,Encounters3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters3.cs,GetUnownArea,The following statement contains a magic number: return new EncounterArea3              {                  Location = location'                  Slots = SlotForms.Select((_' i) => new EncounterSlot                  {                      Species = 201' LevelMin = 25' LevelMax = 25' Type = SlotType.Grass'                      SlotNumber = i'                      Form = SlotForms[i]                  }).ToArray()              };
Magic Number,PKHeX.Core,Encounters4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters4.cs,Encounters4,The following statement contains a magic number: var DP_Feebas = GetFeebasArea(D_Slots[10]);
Magic Number,PKHeX.Core,Encounters4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters4.cs,Encounters4,The following statement contains a magic number: var Pt_Feebas = GetFeebasArea(Pt_Slots[10]);
Magic Number,PKHeX.Core,Encounters4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters4.cs,Encounters4,The following statement contains a magic number: MarkG4SlotsGreatMarsh(D_Slots' 52);
Magic Number,PKHeX.Core,Encounters4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters4.cs,Encounters4,The following statement contains a magic number: MarkG4SlotsGreatMarsh(P_Slots' 52);
Magic Number,PKHeX.Core,Encounters4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters4.cs,Encounters4,The following statement contains a magic number: MarkG4SlotsGreatMarsh(Pt_Slots' 52);
Magic Number,PKHeX.Core,Encounters4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters4.cs,Encounters4,The following statement contains a magic number: MarkEncountersGeneration(4' SlotsD' SlotsP' SlotsPt' SlotsHG' SlotsSS);
Magic Number,PKHeX.Core,Encounters4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters4.cs,Encounters4,The following statement contains a magic number: MarkEncountersGeneration(4' StaticD' StaticP' StaticPt' StaticHG' StaticSS' TradeGift_DPPt' TradeGift_HGSS);
Magic Number,PKHeX.Core,Encounters4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters4.cs,GetFeebasArea,The following statement contains a magic number: Debug.Assert(template.Location == 50);
Magic Number,PKHeX.Core,Encounters4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters4.cs,GetFeebasArea,The following statement contains a magic number: Debug.Assert(template.Slots.Last().Species == 340);
Magic Number,PKHeX.Core,Encounters4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters4.cs,GetFeebasArea,The following statement contains a magic number: Debug.Assert(slots[0].Species == 129);
Magic Number,PKHeX.Core,Encounters4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters4.cs,GetFeebasArea,The following statement contains a magic number: s.Species = 349;
Magic Number,PKHeX.Core,Encounters4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters4.cs,MarkEncounterTypeData,The following statement contains a magic number: MarkG4AltFormSlots(D_Slots' 422' 1' Shellos_EastSeaLocation_DP);
Magic Number,PKHeX.Core,Encounters4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters4.cs,MarkEncounterTypeData,The following statement contains a magic number: MarkG4AltFormSlots(D_Slots' 423' 1' Gastrodon_EastSeaLocation_DP);
Magic Number,PKHeX.Core,Encounters4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters4.cs,MarkEncounterTypeData,The following statement contains a magic number: MarkG4AltFormSlots(P_Slots' 422' 1' Shellos_EastSeaLocation_DP);
Magic Number,PKHeX.Core,Encounters4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters4.cs,MarkEncounterTypeData,The following statement contains a magic number: MarkG4AltFormSlots(P_Slots' 423' 1' Gastrodon_EastSeaLocation_DP);
Magic Number,PKHeX.Core,Encounters4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters4.cs,MarkEncounterTypeData,The following statement contains a magic number: MarkG4AltFormSlots(Pt_Slots' 422' 1' Shellos_EastSeaLocation_Pt);
Magic Number,PKHeX.Core,Encounters4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters4.cs,MarkEncounterTypeData,The following statement contains a magic number: MarkG4AltFormSlots(Pt_Slots' 423' 1' Gastrodon_EastSeaLocation_Pt);
Magic Number,PKHeX.Core,Encounters4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters4.cs,MarkEncounterTypeData,The following statement contains a magic number: const int Route209 = 24;
Magic Number,PKHeX.Core,Encounters4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters4.cs,MarkEncounterTypeData,The following statement contains a magic number: const int StarkMountain = 84;
Magic Number,PKHeX.Core,Encounters4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters4.cs,MarkEncounterTypeData,The following statement contains a magic number: const int MtCoronet = 50;
Magic Number,PKHeX.Core,Encounters4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters4.cs,MarkEncounterTypeData,The following statement contains a magic number: const int RuinsOfAlph = 209;
Magic Number,PKHeX.Core,Encounters4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters4.cs,MarkEncounterTypeData,The following statement contains a magic number: const int MtSilver = 219;
Magic Number,PKHeX.Core,Encounters4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters4.cs,MarkEncounterTypeData,The following statement contains a magic number: const int Cianwood = 130;
Magic Number,PKHeX.Core,Encounters4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters4.cs,MarkG4PokeWalker,The following statement contains a magic number: s.Location = 233;
Magic Number,PKHeX.Core,Encounters4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters4.cs,MarkG4SwarmSlots,The following statement contains a magic number: int slotsnum = SwarmSlot.Type == SlotType.Grass ? 2 : 1;
Magic Number,PKHeX.Core,Encounters4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters4.cs,MarkG4SwarmSlots,The following statement contains a magic number: swarmSlot.Permissions.MagnetPullCount = 2;
Magic Number,PKHeX.Core,Encounters4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters4.cs,MarkG4SwarmSlots,The following statement contains a magic number: swarmSlot.Species == 303
Magic Number,PKHeX.Core,Encounters4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters4.cs,MarkDPPtEncounterTypeSlots,The following statement contains a magic number: location == 70
Magic Number,PKHeX.Core,Encounters4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters4.cs,GetHeadbuttEncounterType,The following statement contains a magic number: Location == 195 || Location == 196
Magic Number,PKHeX.Core,Encounters4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters4.cs,GetHeadbuttEncounterType,The following statement contains a magic number: Location == 195 || Location == 196
Magic Number,PKHeX.Core,Encounters5,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters5.cs,Encounters5,The following statement contains a magic number: MarkEncountersGeneration(5' SlotsB' SlotsW' SlotsB2' SlotsW2);
Magic Number,PKHeX.Core,Encounters5,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters5.cs,Encounters5,The following statement contains a magic number: MarkEncountersGeneration(5' StaticB' StaticW' StaticB2' StaticW2' TradeGift_BW' TradeGift_B2W2);
Magic Number,PKHeX.Core,Encounters5,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters5.cs,MarkBWSwarmSlots,The following statement contains a magic number: s.LevelMin = 15;
Magic Number,PKHeX.Core,Encounters5,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters5.cs,MarkBWSwarmSlots,The following statement contains a magic number: s.LevelMax = 55;
Magic Number,PKHeX.Core,Encounters5,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters5.cs,MarkB2W2SwarmSlots,The following statement contains a magic number: s.LevelMin = 40;
Magic Number,PKHeX.Core,Encounters5,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters5.cs,MarkB2W2SwarmSlots,The following statement contains a magic number: s.LevelMax = 55;
Magic Number,PKHeX.Core,Encounters5,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters5.cs,MarkG5DreamWorld,The following statement contains a magic number: s.Location = 075;
Magic Number,PKHeX.Core,Encounters5,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters5.cs,MarkG5DreamWorld,The following statement contains a magic number: s.Ability = p.HasHiddenAbility ? 4 : 1;
Magic Number,PKHeX.Core,Encounters5,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters5.cs,MarkG5Slots,The following statement contains a magic number: i < 12
Magic Number,PKHeX.Core,Encounters5,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters5.cs,MarkG5Slots,The following statement contains a magic number: i < 12
Magic Number,PKHeX.Core,Encounters5,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters5.cs,MarkG5Slots,The following statement contains a magic number: i < 12
Magic Number,PKHeX.Core,Encounters5,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters5.cs,MarkG5Slots,The following statement contains a magic number: i < 5
Magic Number,PKHeX.Core,Encounters5,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters5.cs,MarkG5Slots,The following statement contains a magic number: i < 5
Magic Number,PKHeX.Core,Encounters5,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters5.cs,MarkG5Slots,The following statement contains a magic number: i < 5
Magic Number,PKHeX.Core,Encounters5,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters5.cs,MarkG5Slots,The following statement contains a magic number: i < 5
Magic Number,PKHeX.Core,Encounters6,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters6.cs,Encounters6,The following statement contains a magic number: MarkEncountersGeneration(6' SlotsX' SlotsY' SlotsA' SlotsO);
Magic Number,PKHeX.Core,Encounters6,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters6.cs,Encounters6,The following statement contains a magic number: MarkEncountersGeneration(6' StaticX' StaticY' StaticA' StaticO' TradeGift_XY' TradeGift_AO);
Magic Number,PKHeX.Core,Encounters6,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters6.cs,GetFriendSafariArea,The following statement contains a magic number: var area = new EncounterAreaFake { Location = 148 };
Magic Number,PKHeX.Core,Encounters6,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters6.cs,GetFriendSafariArea,The following statement contains a magic number: return new EncounterSlot                  {                      Area = area'                      Generation = 6'                      Species = d'                      LevelMin = 30'                      LevelMax = 30'                      Form = 0'                      Type = SlotType.FriendSafari'                      Version = GameVersion.XY'                  };
Magic Number,PKHeX.Core,Encounters6,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters6.cs,GetFriendSafariArea,The following statement contains a magic number: return new EncounterSlot                  {                      Area = area'                      Generation = 6'                      Species = d'                      LevelMin = 30'                      LevelMax = 30'                      Form = 0'                      Type = SlotType.FriendSafari'                      Version = GameVersion.XY'                  };
Magic Number,PKHeX.Core,Encounters6,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters6.cs,GetFriendSafariArea,The following statement contains a magic number: return new EncounterSlot                  {                      Area = area'                      Generation = 6'                      Species = d'                      LevelMin = 30'                      LevelMax = 30'                      Form = 0'                      Type = SlotType.FriendSafari'                      Version = GameVersion.XY'                  };
Magic Number,PKHeX.Core,Encounters6,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters6.cs,MarkG6AOSlots,The following statement contains a magic number: i < 37
Magic Number,PKHeX.Core,Encounters6,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters6.cs,PermuteCosplayPikachu,The following statement contains a magic number: var CosplayPikachu = new EncounterStatic              {                  Species = 25' Level = 20' Gender = 1' Ability = 4' FlawlessIVCount = 3'                  Contest = new[] { 70' 70' 70' 70' 70' 0 }' Gift = true' Shiny = Shiny.Never              };
Magic Number,PKHeX.Core,Encounters6,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters6.cs,PermuteCosplayPikachu,The following statement contains a magic number: var CosplayPikachu = new EncounterStatic              {                  Species = 25' Level = 20' Gender = 1' Ability = 4' FlawlessIVCount = 3'                  Contest = new[] { 70' 70' 70' 70' 70' 0 }' Gift = true' Shiny = Shiny.Never              };
Magic Number,PKHeX.Core,Encounters6,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters6.cs,PermuteCosplayPikachu,The following statement contains a magic number: var CosplayPikachu = new EncounterStatic              {                  Species = 25' Level = 20' Gender = 1' Ability = 4' FlawlessIVCount = 3'                  Contest = new[] { 70' 70' 70' 70' 70' 0 }' Gift = true' Shiny = Shiny.Never              };
Magic Number,PKHeX.Core,Encounters6,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters6.cs,PermuteCosplayPikachu,The following statement contains a magic number: var CosplayPikachu = new EncounterStatic              {                  Species = 25' Level = 20' Gender = 1' Ability = 4' FlawlessIVCount = 3'                  Contest = new[] { 70' 70' 70' 70' 70' 0 }' Gift = true' Shiny = Shiny.Never              };
Magic Number,PKHeX.Core,Encounters6,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters6.cs,PermuteCosplayPikachu,The following statement contains a magic number: var CosplayPikachu = new EncounterStatic              {                  Species = 25' Level = 20' Gender = 1' Ability = 4' FlawlessIVCount = 3'                  Contest = new[] { 70' 70' 70' 70' 70' 0 }' Gift = true' Shiny = Shiny.Never              };
Magic Number,PKHeX.Core,Encounters6,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters6.cs,PermuteCosplayPikachu,The following statement contains a magic number: var CosplayPikachu = new EncounterStatic              {                  Species = 25' Level = 20' Gender = 1' Ability = 4' FlawlessIVCount = 3'                  Contest = new[] { 70' 70' 70' 70' 70' 0 }' Gift = true' Shiny = Shiny.Never              };
Magic Number,PKHeX.Core,Encounters6,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters6.cs,PermuteCosplayPikachu,The following statement contains a magic number: var CosplayPikachu = new EncounterStatic              {                  Species = 25' Level = 20' Gender = 1' Ability = 4' FlawlessIVCount = 3'                  Contest = new[] { 70' 70' 70' 70' 70' 0 }' Gift = true' Shiny = Shiny.Never              };
Magic Number,PKHeX.Core,Encounters6,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters6.cs,PermuteCosplayPikachu,The following statement contains a magic number: var CosplayPikachu = new EncounterStatic              {                  Species = 25' Level = 20' Gender = 1' Ability = 4' FlawlessIVCount = 3'                  Contest = new[] { 70' 70' 70' 70' 70' 0 }' Gift = true' Shiny = Shiny.Never              };
Magic Number,PKHeX.Core,Encounters6,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters6.cs,PermuteCosplayPikachu,The following statement contains a magic number: var CosplayPikachu = new EncounterStatic              {                  Species = 25' Level = 20' Gender = 1' Ability = 4' FlawlessIVCount = 3'                  Contest = new[] { 70' 70' 70' 70' 70' 0 }' Gift = true' Shiny = Shiny.Never              };
Magic Number,PKHeX.Core,Encounters6,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters6.cs,PermuteCosplayPikachu,The following statement contains a magic number: f <= 6
Magic Number,PKHeX.Core,Encounters6,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters6.cs,PermuteCosplayPikachu,The following statement contains a magic number: new[] { 178' 180' 186' 194 }
Magic Number,PKHeX.Core,Encounters6,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters6.cs,PermuteCosplayPikachu,The following statement contains a magic number: new[] { 178' 180' 186' 194 }
Magic Number,PKHeX.Core,Encounters6,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters6.cs,PermuteCosplayPikachu,The following statement contains a magic number: new[] { 178' 180' 186' 194 }
Magic Number,PKHeX.Core,Encounters6,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters6.cs,PermuteCosplayPikachu,The following statement contains a magic number: new[] { 178' 180' 186' 194 }
Magic Number,PKHeX.Core,Encounters7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters7.cs,Encounters7,The following statement contains a magic number: int[] pelagoMin = { 1' 11' 21' 37' 49 };
Magic Number,PKHeX.Core,Encounters7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters7.cs,Encounters7,The following statement contains a magic number: int[] pelagoMin = { 1' 11' 21' 37' 49 };
Magic Number,PKHeX.Core,Encounters7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters7.cs,Encounters7,The following statement contains a magic number: int[] pelagoMin = { 1' 11' 21' 37' 49 };
Magic Number,PKHeX.Core,Encounters7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters7.cs,Encounters7,The following statement contains a magic number: int[] pelagoMin = { 1' 11' 21' 37' 49 };
Magic Number,PKHeX.Core,Encounters7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters7.cs,Encounters7,The following statement contains a magic number: MarkEncountersGeneration(7' SlotsSN' SlotsMN' SlotsUS' SlotsUM);
Magic Number,PKHeX.Core,Encounters7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters7.cs,Encounters7,The following statement contains a magic number: MarkEncountersGeneration(7' StaticSN' StaticMN' StaticUS' StaticUM' TradeGift_SM' TradeGift_USUM);
Magic Number,PKHeX.Core,Encounters7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters7.cs,InitializePelagoSM,The following statement contains a magic number: int[][] speciesSM =              {                  new[] {627/*SN*/' 021' 041' 090' 278' 731}' // 1-7                  new[] {064' 081' 092' 198' 426' 703}'       // 11-17                  new[] {060' 120' 127' 661' 709' 771}'       // 21-27                  new[] {227' 375' 707}'                      // 37-43                  new[] {123' 131' 429' 587}'                 // 49-55              };
Magic Number,PKHeX.Core,Encounters7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters7.cs,InitializePelagoSM,The following statement contains a magic number: int[][] speciesSM =              {                  new[] {627/*SN*/' 021' 041' 090' 278' 731}' // 1-7                  new[] {064' 081' 092' 198' 426' 703}'       // 11-17                  new[] {060' 120' 127' 661' 709' 771}'       // 21-27                  new[] {227' 375' 707}'                      // 37-43                  new[] {123' 131' 429' 587}'                 // 49-55              };
Magic Number,PKHeX.Core,Encounters7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters7.cs,InitializePelagoSM,The following statement contains a magic number: int[][] speciesSM =              {                  new[] {627/*SN*/' 021' 041' 090' 278' 731}' // 1-7                  new[] {064' 081' 092' 198' 426' 703}'       // 11-17                  new[] {060' 120' 127' 661' 709' 771}'       // 21-27                  new[] {227' 375' 707}'                      // 37-43                  new[] {123' 131' 429' 587}'                 // 49-55              };
Magic Number,PKHeX.Core,Encounters7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters7.cs,InitializePelagoSM,The following statement contains a magic number: int[][] speciesSM =              {                  new[] {627/*SN*/' 021' 041' 090' 278' 731}' // 1-7                  new[] {064' 081' 092' 198' 426' 703}'       // 11-17                  new[] {060' 120' 127' 661' 709' 771}'       // 21-27                  new[] {227' 375' 707}'                      // 37-43                  new[] {123' 131' 429' 587}'                 // 49-55              };
Magic Number,PKHeX.Core,Encounters7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters7.cs,InitializePelagoSM,The following statement contains a magic number: int[][] speciesSM =              {                  new[] {627/*SN*/' 021' 041' 090' 278' 731}' // 1-7                  new[] {064' 081' 092' 198' 426' 703}'       // 11-17                  new[] {060' 120' 127' 661' 709' 771}'       // 21-27                  new[] {227' 375' 707}'                      // 37-43                  new[] {123' 131' 429' 587}'                 // 49-55              };
Magic Number,PKHeX.Core,Encounters7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters7.cs,InitializePelagoSM,The following statement contains a magic number: int[][] speciesSM =              {                  new[] {627/*SN*/' 021' 041' 090' 278' 731}' // 1-7                  new[] {064' 081' 092' 198' 426' 703}'       // 11-17                  new[] {060' 120' 127' 661' 709' 771}'       // 21-27                  new[] {227' 375' 707}'                      // 37-43                  new[] {123' 131' 429' 587}'                 // 49-55              };
Magic Number,PKHeX.Core,Encounters7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters7.cs,InitializePelagoSM,The following statement contains a magic number: int[][] speciesSM =              {                  new[] {627/*SN*/' 021' 041' 090' 278' 731}' // 1-7                  new[] {064' 081' 092' 198' 426' 703}'       // 11-17                  new[] {060' 120' 127' 661' 709' 771}'       // 21-27                  new[] {227' 375' 707}'                      // 37-43                  new[] {123' 131' 429' 587}'                 // 49-55              };
Magic Number,PKHeX.Core,Encounters7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters7.cs,InitializePelagoSM,The following statement contains a magic number: int[][] speciesSM =              {                  new[] {627/*SN*/' 021' 041' 090' 278' 731}' // 1-7                  new[] {064' 081' 092' 198' 426' 703}'       // 11-17                  new[] {060' 120' 127' 661' 709' 771}'       // 21-27                  new[] {227' 375' 707}'                      // 37-43                  new[] {123' 131' 429' 587}'                 // 49-55              };
Magic Number,PKHeX.Core,Encounters7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters7.cs,InitializePelagoSM,The following statement contains a magic number: int[][] speciesSM =              {                  new[] {627/*SN*/' 021' 041' 090' 278' 731}' // 1-7                  new[] {064' 081' 092' 198' 426' 703}'       // 11-17                  new[] {060' 120' 127' 661' 709' 771}'       // 21-27                  new[] {227' 375' 707}'                      // 37-43                  new[] {123' 131' 429' 587}'                 // 49-55              };
Magic Number,PKHeX.Core,Encounters7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters7.cs,InitializePelagoSM,The following statement contains a magic number: int[][] speciesSM =              {                  new[] {627/*SN*/' 021' 041' 090' 278' 731}' // 1-7                  new[] {064' 081' 092' 198' 426' 703}'       // 11-17                  new[] {060' 120' 127' 661' 709' 771}'       // 21-27                  new[] {227' 375' 707}'                      // 37-43                  new[] {123' 131' 429' 587}'                 // 49-55              };
Magic Number,PKHeX.Core,Encounters7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters7.cs,InitializePelagoSM,The following statement contains a magic number: int[][] speciesSM =              {                  new[] {627/*SN*/' 021' 041' 090' 278' 731}' // 1-7                  new[] {064' 081' 092' 198' 426' 703}'       // 11-17                  new[] {060' 120' 127' 661' 709' 771}'       // 21-27                  new[] {227' 375' 707}'                      // 37-43                  new[] {123' 131' 429' 587}'                 // 49-55              };
Magic Number,PKHeX.Core,Encounters7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters7.cs,InitializePelagoSM,The following statement contains a magic number: int[][] speciesSM =              {                  new[] {627/*SN*/' 021' 041' 090' 278' 731}' // 1-7                  new[] {064' 081' 092' 198' 426' 703}'       // 11-17                  new[] {060' 120' 127' 661' 709' 771}'       // 21-27                  new[] {227' 375' 707}'                      // 37-43                  new[] {123' 131' 429' 587}'                 // 49-55              };
Magic Number,PKHeX.Core,Encounters7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters7.cs,InitializePelagoSM,The following statement contains a magic number: int[][] speciesSM =              {                  new[] {627/*SN*/' 021' 041' 090' 278' 731}' // 1-7                  new[] {064' 081' 092' 198' 426' 703}'       // 11-17                  new[] {060' 120' 127' 661' 709' 771}'       // 21-27                  new[] {227' 375' 707}'                      // 37-43                  new[] {123' 131' 429' 587}'                 // 49-55              };
Magic Number,PKHeX.Core,Encounters7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters7.cs,InitializePelagoSM,The following statement contains a magic number: int[][] speciesSM =              {                  new[] {627/*SN*/' 021' 041' 090' 278' 731}' // 1-7                  new[] {064' 081' 092' 198' 426' 703}'       // 11-17                  new[] {060' 120' 127' 661' 709' 771}'       // 21-27                  new[] {227' 375' 707}'                      // 37-43                  new[] {123' 131' 429' 587}'                 // 49-55              };
Magic Number,PKHeX.Core,Encounters7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters7.cs,InitializePelagoSM,The following statement contains a magic number: int[][] speciesSM =              {                  new[] {627/*SN*/' 021' 041' 090' 278' 731}' // 1-7                  new[] {064' 081' 092' 198' 426' 703}'       // 11-17                  new[] {060' 120' 127' 661' 709' 771}'       // 21-27                  new[] {227' 375' 707}'                      // 37-43                  new[] {123' 131' 429' 587}'                 // 49-55              };
Magic Number,PKHeX.Core,Encounters7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters7.cs,InitializePelagoSM,The following statement contains a magic number: int[][] speciesSM =              {                  new[] {627/*SN*/' 021' 041' 090' 278' 731}' // 1-7                  new[] {064' 081' 092' 198' 426' 703}'       // 11-17                  new[] {060' 120' 127' 661' 709' 771}'       // 21-27                  new[] {227' 375' 707}'                      // 37-43                  new[] {123' 131' 429' 587}'                 // 49-55              };
Magic Number,PKHeX.Core,Encounters7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters7.cs,InitializePelagoSM,The following statement contains a magic number: int[][] speciesSM =              {                  new[] {627/*SN*/' 021' 041' 090' 278' 731}' // 1-7                  new[] {064' 081' 092' 198' 426' 703}'       // 11-17                  new[] {060' 120' 127' 661' 709' 771}'       // 21-27                  new[] {227' 375' 707}'                      // 37-43                  new[] {123' 131' 429' 587}'                 // 49-55              };
Magic Number,PKHeX.Core,Encounters7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters7.cs,InitializePelagoSM,The following statement contains a magic number: int[][] speciesSM =              {                  new[] {627/*SN*/' 021' 041' 090' 278' 731}' // 1-7                  new[] {064' 081' 092' 198' 426' 703}'       // 11-17                  new[] {060' 120' 127' 661' 709' 771}'       // 21-27                  new[] {227' 375' 707}'                      // 37-43                  new[] {123' 131' 429' 587}'                 // 49-55              };
Magic Number,PKHeX.Core,Encounters7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters7.cs,InitializePelagoSM,The following statement contains a magic number: int[][] speciesSM =              {                  new[] {627/*SN*/' 021' 041' 090' 278' 731}' // 1-7                  new[] {064' 081' 092' 198' 426' 703}'       // 11-17                  new[] {060' 120' 127' 661' 709' 771}'       // 21-27                  new[] {227' 375' 707}'                      // 37-43                  new[] {123' 131' 429' 587}'                 // 49-55              };
Magic Number,PKHeX.Core,Encounters7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters7.cs,InitializePelagoSM,The following statement contains a magic number: int[][] speciesSM =              {                  new[] {627/*SN*/' 021' 041' 090' 278' 731}' // 1-7                  new[] {064' 081' 092' 198' 426' 703}'       // 11-17                  new[] {060' 120' 127' 661' 709' 771}'       // 21-27                  new[] {227' 375' 707}'                      // 37-43                  new[] {123' 131' 429' 587}'                 // 49-55              };
Magic Number,PKHeX.Core,Encounters7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters7.cs,InitializePelagoSM,The following statement contains a magic number: int[][] speciesSM =              {                  new[] {627/*SN*/' 021' 041' 090' 278' 731}' // 1-7                  new[] {064' 081' 092' 198' 426' 703}'       // 11-17                  new[] {060' 120' 127' 661' 709' 771}'       // 21-27                  new[] {227' 375' 707}'                      // 37-43                  new[] {123' 131' 429' 587}'                 // 49-55              };
Magic Number,PKHeX.Core,Encounters7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters7.cs,InitializePelagoSM,The following statement contains a magic number: int[][] speciesSM =              {                  new[] {627/*SN*/' 021' 041' 090' 278' 731}' // 1-7                  new[] {064' 081' 092' 198' 426' 703}'       // 11-17                  new[] {060' 120' 127' 661' 709' 771}'       // 21-27                  new[] {227' 375' 707}'                      // 37-43                  new[] {123' 131' 429' 587}'                 // 49-55              };
Magic Number,PKHeX.Core,Encounters7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters7.cs,InitializePelagoSM,The following statement contains a magic number: int[][] speciesSM =              {                  new[] {627/*SN*/' 021' 041' 090' 278' 731}' // 1-7                  new[] {064' 081' 092' 198' 426' 703}'       // 11-17                  new[] {060' 120' 127' 661' 709' 771}'       // 21-27                  new[] {227' 375' 707}'                      // 37-43                  new[] {123' 131' 429' 587}'                 // 49-55              };
Magic Number,PKHeX.Core,Encounters7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters7.cs,InitializePelagoSM,The following statement contains a magic number: int[][] speciesSM =              {                  new[] {627/*SN*/' 021' 041' 090' 278' 731}' // 1-7                  new[] {064' 081' 092' 198' 426' 703}'       // 11-17                  new[] {060' 120' 127' 661' 709' 771}'       // 21-27                  new[] {227' 375' 707}'                      // 37-43                  new[] {123' 131' 429' 587}'                 // 49-55              };
Magic Number,PKHeX.Core,Encounters7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters7.cs,InitializePelagoSM,The following statement contains a magic number: int[][] speciesSM =              {                  new[] {627/*SN*/' 021' 041' 090' 278' 731}' // 1-7                  new[] {064' 081' 092' 198' 426' 703}'       // 11-17                  new[] {060' 120' 127' 661' 709' 771}'       // 21-27                  new[] {227' 375' 707}'                      // 37-43                  new[] {123' 131' 429' 587}'                 // 49-55              };
Magic Number,PKHeX.Core,Encounters7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters7.cs,InitializePelagoSM,The following statement contains a magic number: speciesSM[0][0] = 629;
Magic Number,PKHeX.Core,Encounters7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters7.cs,InitializePelagoUltra,The following statement contains a magic number: int[][] speciesUU =              {                  new[] {731' 278' 041' 742' 086}'        // 1-7                  new[] {079' 120' 222' 122' 180' 124}'   // 11-17                  new[] {127' 177' 764' 163' 771' 701}'   // 21-27                  new[] {131' 354' 200' /* US  */ 228}'   // 37-43                  new[] {209' 667' 357' 430}'             // 49-55              };
Magic Number,PKHeX.Core,Encounters7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters7.cs,InitializePelagoUltra,The following statement contains a magic number: int[][] speciesUU =              {                  new[] {731' 278' 041' 742' 086}'        // 1-7                  new[] {079' 120' 222' 122' 180' 124}'   // 11-17                  new[] {127' 177' 764' 163' 771' 701}'   // 21-27                  new[] {131' 354' 200' /* US  */ 228}'   // 37-43                  new[] {209' 667' 357' 430}'             // 49-55              };
Magic Number,PKHeX.Core,Encounters7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters7.cs,InitializePelagoUltra,The following statement contains a magic number: int[][] speciesUU =              {                  new[] {731' 278' 041' 742' 086}'        // 1-7                  new[] {079' 120' 222' 122' 180' 124}'   // 11-17                  new[] {127' 177' 764' 163' 771' 701}'   // 21-27                  new[] {131' 354' 200' /* US  */ 228}'   // 37-43                  new[] {209' 667' 357' 430}'             // 49-55              };
Magic Number,PKHeX.Core,Encounters7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters7.cs,InitializePelagoUltra,The following statement contains a magic number: int[][] speciesUU =              {                  new[] {731' 278' 041' 742' 086}'        // 1-7                  new[] {079' 120' 222' 122' 180' 124}'   // 11-17                  new[] {127' 177' 764' 163' 771' 701}'   // 21-27                  new[] {131' 354' 200' /* US  */ 228}'   // 37-43                  new[] {209' 667' 357' 430}'             // 49-55              };
Magic Number,PKHeX.Core,Encounters7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters7.cs,InitializePelagoUltra,The following statement contains a magic number: int[][] speciesUU =              {                  new[] {731' 278' 041' 742' 086}'        // 1-7                  new[] {079' 120' 222' 122' 180' 124}'   // 11-17                  new[] {127' 177' 764' 163' 771' 701}'   // 21-27                  new[] {131' 354' 200' /* US  */ 228}'   // 37-43                  new[] {209' 667' 357' 430}'             // 49-55              };
Magic Number,PKHeX.Core,Encounters7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters7.cs,InitializePelagoUltra,The following statement contains a magic number: int[][] speciesUU =              {                  new[] {731' 278' 041' 742' 086}'        // 1-7                  new[] {079' 120' 222' 122' 180' 124}'   // 11-17                  new[] {127' 177' 764' 163' 771' 701}'   // 21-27                  new[] {131' 354' 200' /* US  */ 228}'   // 37-43                  new[] {209' 667' 357' 430}'             // 49-55              };
Magic Number,PKHeX.Core,Encounters7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters7.cs,InitializePelagoUltra,The following statement contains a magic number: int[][] speciesUU =              {                  new[] {731' 278' 041' 742' 086}'        // 1-7                  new[] {079' 120' 222' 122' 180' 124}'   // 11-17                  new[] {127' 177' 764' 163' 771' 701}'   // 21-27                  new[] {131' 354' 200' /* US  */ 228}'   // 37-43                  new[] {209' 667' 357' 430}'             // 49-55              };
Magic Number,PKHeX.Core,Encounters7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters7.cs,InitializePelagoUltra,The following statement contains a magic number: int[][] speciesUU =              {                  new[] {731' 278' 041' 742' 086}'        // 1-7                  new[] {079' 120' 222' 122' 180' 124}'   // 11-17                  new[] {127' 177' 764' 163' 771' 701}'   // 21-27                  new[] {131' 354' 200' /* US  */ 228}'   // 37-43                  new[] {209' 667' 357' 430}'             // 49-55              };
Magic Number,PKHeX.Core,Encounters7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters7.cs,InitializePelagoUltra,The following statement contains a magic number: int[][] speciesUU =              {                  new[] {731' 278' 041' 742' 086}'        // 1-7                  new[] {079' 120' 222' 122' 180' 124}'   // 11-17                  new[] {127' 177' 764' 163' 771' 701}'   // 21-27                  new[] {131' 354' 200' /* US  */ 228}'   // 37-43                  new[] {209' 667' 357' 430}'             // 49-55              };
Magic Number,PKHeX.Core,Encounters7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters7.cs,InitializePelagoUltra,The following statement contains a magic number: int[][] speciesUU =              {                  new[] {731' 278' 041' 742' 086}'        // 1-7                  new[] {079' 120' 222' 122' 180' 124}'   // 11-17                  new[] {127' 177' 764' 163' 771' 701}'   // 21-27                  new[] {131' 354' 200' /* US  */ 228}'   // 37-43                  new[] {209' 667' 357' 430}'             // 49-55              };
Magic Number,PKHeX.Core,Encounters7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters7.cs,InitializePelagoUltra,The following statement contains a magic number: int[][] speciesUU =              {                  new[] {731' 278' 041' 742' 086}'        // 1-7                  new[] {079' 120' 222' 122' 180' 124}'   // 11-17                  new[] {127' 177' 764' 163' 771' 701}'   // 21-27                  new[] {131' 354' 200' /* US  */ 228}'   // 37-43                  new[] {209' 667' 357' 430}'             // 49-55              };
Magic Number,PKHeX.Core,Encounters7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters7.cs,InitializePelagoUltra,The following statement contains a magic number: int[][] speciesUU =              {                  new[] {731' 278' 041' 742' 086}'        // 1-7                  new[] {079' 120' 222' 122' 180' 124}'   // 11-17                  new[] {127' 177' 764' 163' 771' 701}'   // 21-27                  new[] {131' 354' 200' /* US  */ 228}'   // 37-43                  new[] {209' 667' 357' 430}'             // 49-55              };
Magic Number,PKHeX.Core,Encounters7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters7.cs,InitializePelagoUltra,The following statement contains a magic number: int[][] speciesUU =              {                  new[] {731' 278' 041' 742' 086}'        // 1-7                  new[] {079' 120' 222' 122' 180' 124}'   // 11-17                  new[] {127' 177' 764' 163' 771' 701}'   // 21-27                  new[] {131' 354' 200' /* US  */ 228}'   // 37-43                  new[] {209' 667' 357' 430}'             // 49-55              };
Magic Number,PKHeX.Core,Encounters7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters7.cs,InitializePelagoUltra,The following statement contains a magic number: int[][] speciesUU =              {                  new[] {731' 278' 041' 742' 086}'        // 1-7                  new[] {079' 120' 222' 122' 180' 124}'   // 11-17                  new[] {127' 177' 764' 163' 771' 701}'   // 21-27                  new[] {131' 354' 200' /* US  */ 228}'   // 37-43                  new[] {209' 667' 357' 430}'             // 49-55              };
Magic Number,PKHeX.Core,Encounters7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters7.cs,InitializePelagoUltra,The following statement contains a magic number: int[][] speciesUU =              {                  new[] {731' 278' 041' 742' 086}'        // 1-7                  new[] {079' 120' 222' 122' 180' 124}'   // 11-17                  new[] {127' 177' 764' 163' 771' 701}'   // 21-27                  new[] {131' 354' 200' /* US  */ 228}'   // 37-43                  new[] {209' 667' 357' 430}'             // 49-55              };
Magic Number,PKHeX.Core,Encounters7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters7.cs,InitializePelagoUltra,The following statement contains a magic number: int[][] speciesUU =              {                  new[] {731' 278' 041' 742' 086}'        // 1-7                  new[] {079' 120' 222' 122' 180' 124}'   // 11-17                  new[] {127' 177' 764' 163' 771' 701}'   // 21-27                  new[] {131' 354' 200' /* US  */ 228}'   // 37-43                  new[] {209' 667' 357' 430}'             // 49-55              };
Magic Number,PKHeX.Core,Encounters7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters7.cs,InitializePelagoUltra,The following statement contains a magic number: int[][] speciesUU =              {                  new[] {731' 278' 041' 742' 086}'        // 1-7                  new[] {079' 120' 222' 122' 180' 124}'   // 11-17                  new[] {127' 177' 764' 163' 771' 701}'   // 21-27                  new[] {131' 354' 200' /* US  */ 228}'   // 37-43                  new[] {209' 667' 357' 430}'             // 49-55              };
Magic Number,PKHeX.Core,Encounters7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters7.cs,InitializePelagoUltra,The following statement contains a magic number: int[][] speciesUU =              {                  new[] {731' 278' 041' 742' 086}'        // 1-7                  new[] {079' 120' 222' 122' 180' 124}'   // 11-17                  new[] {127' 177' 764' 163' 771' 701}'   // 21-27                  new[] {131' 354' 200' /* US  */ 228}'   // 37-43                  new[] {209' 667' 357' 430}'             // 49-55              };
Magic Number,PKHeX.Core,Encounters7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters7.cs,InitializePelagoUltra,The following statement contains a magic number: int[][] speciesUU =              {                  new[] {731' 278' 041' 742' 086}'        // 1-7                  new[] {079' 120' 222' 122' 180' 124}'   // 11-17                  new[] {127' 177' 764' 163' 771' 701}'   // 21-27                  new[] {131' 354' 200' /* US  */ 228}'   // 37-43                  new[] {209' 667' 357' 430}'             // 49-55              };
Magic Number,PKHeX.Core,Encounters7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters7.cs,InitializePelagoUltra,The following statement contains a magic number: int[][] speciesUU =              {                  new[] {731' 278' 041' 742' 086}'        // 1-7                  new[] {079' 120' 222' 122' 180' 124}'   // 11-17                  new[] {127' 177' 764' 163' 771' 701}'   // 21-27                  new[] {131' 354' 200' /* US  */ 228}'   // 37-43                  new[] {209' 667' 357' 430}'             // 49-55              };
Magic Number,PKHeX.Core,Encounters7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters7.cs,InitializePelagoUltra,The following statement contains a magic number: int[][] speciesUU =              {                  new[] {731' 278' 041' 742' 086}'        // 1-7                  new[] {079' 120' 222' 122' 180' 124}'   // 11-17                  new[] {127' 177' 764' 163' 771' 701}'   // 21-27                  new[] {131' 354' 200' /* US  */ 228}'   // 37-43                  new[] {209' 667' 357' 430}'             // 49-55              };
Magic Number,PKHeX.Core,Encounters7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters7.cs,InitializePelagoUltra,The following statement contains a magic number: int[][] speciesUU =              {                  new[] {731' 278' 041' 742' 086}'        // 1-7                  new[] {079' 120' 222' 122' 180' 124}'   // 11-17                  new[] {127' 177' 764' 163' 771' 701}'   // 21-27                  new[] {131' 354' 200' /* US  */ 228}'   // 37-43                  new[] {209' 667' 357' 430}'             // 49-55              };
Magic Number,PKHeX.Core,Encounters7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters7.cs,InitializePelagoUltra,The following statement contains a magic number: int[][] speciesUU =              {                  new[] {731' 278' 041' 742' 086}'        // 1-7                  new[] {079' 120' 222' 122' 180' 124}'   // 11-17                  new[] {127' 177' 764' 163' 771' 701}'   // 21-27                  new[] {131' 354' 200' /* US  */ 228}'   // 37-43                  new[] {209' 667' 357' 430}'             // 49-55              };
Magic Number,PKHeX.Core,Encounters7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters7.cs,InitializePelagoUltra,The following statement contains a magic number: int[][] speciesUU =              {                  new[] {731' 278' 041' 742' 086}'        // 1-7                  new[] {079' 120' 222' 122' 180' 124}'   // 11-17                  new[] {127' 177' 764' 163' 771' 701}'   // 21-27                  new[] {131' 354' 200' /* US  */ 228}'   // 37-43                  new[] {209' 667' 357' 430}'             // 49-55              };
Magic Number,PKHeX.Core,Encounters7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters7.cs,InitializePelagoUltra,The following statement contains a magic number: int[][] speciesUU =              {                  new[] {731' 278' 041' 742' 086}'        // 1-7                  new[] {079' 120' 222' 122' 180' 124}'   // 11-17                  new[] {127' 177' 764' 163' 771' 701}'   // 21-27                  new[] {131' 354' 200' /* US  */ 228}'   // 37-43                  new[] {209' 667' 357' 430}'             // 49-55              };
Magic Number,PKHeX.Core,Encounters7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters7.cs,InitializePelagoUltra,The following statement contains a magic number: speciesUU[3][3] = 309;
Magic Number,PKHeX.Core,Encounters7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters7.cs,InitializePelagoUltra,The following statement contains a magic number: speciesUU[3][3] = 309;
Magic Number,PKHeX.Core,Encounters7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters7.cs,InitializePelagoUltra,The following statement contains a magic number: speciesUU[3][3] = 309;
Magic Number,PKHeX.Core,Encounters7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters7.cs,GetPelagoArea,The following statement contains a magic number: var area = new EncounterArea7              {                  Location = 30016'                  Slots = species.SelectMany((_' i) =>                      species.Take(1 + i).SelectMany(z => // grab current row & above                      z.Select(s => new EncounterSlot // get slot data for each species                      {                          Species = s'                          LevelMin = min[i]'                          LevelMax = min[i] + 6                      }                      ))).ToArray()'              };
Magic Number,PKHeX.Core,Encounters7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters7.cs,GetPelagoArea,The following statement contains a magic number: var area = new EncounterArea7              {                  Location = 30016'                  Slots = species.SelectMany((_' i) =>                      species.Take(1 + i).SelectMany(z => // grab current row & above                      z.Select(s => new EncounterSlot // get slot data for each species                      {                          Species = s'                          LevelMin = min[i]'                          LevelMax = min[i] + 6                      }                      ))).ToArray()'              };
Magic Number,PKHeX.Core,Encounters7b,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters7b.cs,Encounters7b,The following statement contains a magic number: MarkEncountersGeneration(7' SlotsGP' SlotsGE);
Magic Number,PKHeX.Core,Encounters7b,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters7b.cs,Encounters7b,The following statement contains a magic number: MarkEncountersGeneration(7' StaticGP' StaticGE' TradeGift_GG);
Magic Number,PKHeX.Core,Encounters7b,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters7b.cs,GetGoParkArea,The following statement contains a magic number: var area = new EncounterArea7g { Location = 50 };
Magic Number,PKHeX.Core,Encounters7b,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters7b.cs,GetGoParkArea,The following statement contains a magic number: return new EncounterSlot                  {                      Area = area'                      Generation = 7'                      Species = species'                      LevelMin = 1'                      LevelMax = 40'                      Form = form'                      Type = SlotType.GoPark'                      Version = GameVersion.GO'                  };
Magic Number,PKHeX.Core,Encounters7b,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters7b.cs,GetGoParkArea,The following statement contains a magic number: return new EncounterSlot                  {                      Area = area'                      Generation = 7'                      Species = species'                      LevelMin = 1'                      LevelMax = 40'                      Form = form'                      Type = SlotType.GoPark'                      Version = GameVersion.GO'                  };
Magic Number,PKHeX.Core,Encounters7b,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters7b.cs,GetGoParkArea,The following statement contains a magic number: var obtainable = Enumerable.Range(1' 150).Concat(Enumerable.Range(808' 2));
Magic Number,PKHeX.Core,Encounters7b,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters7b.cs,GetGoParkArea,The following statement contains a magic number: var obtainable = Enumerable.Range(1' 150).Concat(Enumerable.Range(808' 2));
Magic Number,PKHeX.Core,Encounters7b,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters7b.cs,GetGoParkArea,The following statement contains a magic number: var obtainable = Enumerable.Range(1' 150).Concat(Enumerable.Range(808' 2));
Magic Number,PKHeX.Core,Encounters7b,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters7b.cs,GetGoParkArea,The following statement contains a magic number: var AlolanKanto = new byte[]              {                  // Level 1+                  019' // Rattata                  020' // Raticate                  027' // Sandshrew                  028' // Sandslash                  037' // Vulpix                  038' // Ninetales                  050' // Diglett                  051' // Dugtrio                  052' // Meowth                  053' // Persian                  074' // Geodude                  075' // Graveler                  076' // Golem                  088' // Grimer                  089' // Muk                  103' // Exeggutor                    // Level 20+                  026' // Raichu                  105' // Marowak              };
Magic Number,PKHeX.Core,Encounters7b,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters7b.cs,GetGoParkArea,The following statement contains a magic number: var AlolanKanto = new byte[]              {                  // Level 1+                  019' // Rattata                  020' // Raticate                  027' // Sandshrew                  028' // Sandslash                  037' // Vulpix                  038' // Ninetales                  050' // Diglett                  051' // Dugtrio                  052' // Meowth                  053' // Persian                  074' // Geodude                  075' // Graveler                  076' // Golem                  088' // Grimer                  089' // Muk                  103' // Exeggutor                    // Level 20+                  026' // Raichu                  105' // Marowak              };
Magic Number,PKHeX.Core,Encounters7b,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters7b.cs,GetGoParkArea,The following statement contains a magic number: var AlolanKanto = new byte[]              {                  // Level 1+                  019' // Rattata                  020' // Raticate                  027' // Sandshrew                  028' // Sandslash                  037' // Vulpix                  038' // Ninetales                  050' // Diglett                  051' // Dugtrio                  052' // Meowth                  053' // Persian                  074' // Geodude                  075' // Graveler                  076' // Golem                  088' // Grimer                  089' // Muk                  103' // Exeggutor                    // Level 20+                  026' // Raichu                  105' // Marowak              };
Magic Number,PKHeX.Core,Encounters7b,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters7b.cs,GetGoParkArea,The following statement contains a magic number: var AlolanKanto = new byte[]              {                  // Level 1+                  019' // Rattata                  020' // Raticate                  027' // Sandshrew                  028' // Sandslash                  037' // Vulpix                  038' // Ninetales                  050' // Diglett                  051' // Dugtrio                  052' // Meowth                  053' // Persian                  074' // Geodude                  075' // Graveler                  076' // Golem                  088' // Grimer                  089' // Muk                  103' // Exeggutor                    // Level 20+                  026' // Raichu                  105' // Marowak              };
Magic Number,PKHeX.Core,Encounters7b,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters7b.cs,GetGoParkArea,The following statement contains a magic number: var AlolanKanto = new byte[]              {                  // Level 1+                  019' // Rattata                  020' // Raticate                  027' // Sandshrew                  028' // Sandslash                  037' // Vulpix                  038' // Ninetales                  050' // Diglett                  051' // Dugtrio                  052' // Meowth                  053' // Persian                  074' // Geodude                  075' // Graveler                  076' // Golem                  088' // Grimer                  089' // Muk                  103' // Exeggutor                    // Level 20+                  026' // Raichu                  105' // Marowak              };
Magic Number,PKHeX.Core,Encounters7b,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters7b.cs,GetGoParkArea,The following statement contains a magic number: var AlolanKanto = new byte[]              {                  // Level 1+                  019' // Rattata                  020' // Raticate                  027' // Sandshrew                  028' // Sandslash                  037' // Vulpix                  038' // Ninetales                  050' // Diglett                  051' // Dugtrio                  052' // Meowth                  053' // Persian                  074' // Geodude                  075' // Graveler                  076' // Golem                  088' // Grimer                  089' // Muk                  103' // Exeggutor                    // Level 20+                  026' // Raichu                  105' // Marowak              };
Magic Number,PKHeX.Core,Encounters7b,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters7b.cs,GetGoParkArea,The following statement contains a magic number: var AlolanKanto = new byte[]              {                  // Level 1+                  019' // Rattata                  020' // Raticate                  027' // Sandshrew                  028' // Sandslash                  037' // Vulpix                  038' // Ninetales                  050' // Diglett                  051' // Dugtrio                  052' // Meowth                  053' // Persian                  074' // Geodude                  075' // Graveler                  076' // Golem                  088' // Grimer                  089' // Muk                  103' // Exeggutor                    // Level 20+                  026' // Raichu                  105' // Marowak              };
Magic Number,PKHeX.Core,Encounters7b,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters7b.cs,GetGoParkArea,The following statement contains a magic number: var AlolanKanto = new byte[]              {                  // Level 1+                  019' // Rattata                  020' // Raticate                  027' // Sandshrew                  028' // Sandslash                  037' // Vulpix                  038' // Ninetales                  050' // Diglett                  051' // Dugtrio                  052' // Meowth                  053' // Persian                  074' // Geodude                  075' // Graveler                  076' // Golem                  088' // Grimer                  089' // Muk                  103' // Exeggutor                    // Level 20+                  026' // Raichu                  105' // Marowak              };
Magic Number,PKHeX.Core,Encounters7b,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters7b.cs,GetGoParkArea,The following statement contains a magic number: var AlolanKanto = new byte[]              {                  // Level 1+                  019' // Rattata                  020' // Raticate                  027' // Sandshrew                  028' // Sandslash                  037' // Vulpix                  038' // Ninetales                  050' // Diglett                  051' // Dugtrio                  052' // Meowth                  053' // Persian                  074' // Geodude                  075' // Graveler                  076' // Golem                  088' // Grimer                  089' // Muk                  103' // Exeggutor                    // Level 20+                  026' // Raichu                  105' // Marowak              };
Magic Number,PKHeX.Core,Encounters7b,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters7b.cs,GetGoParkArea,The following statement contains a magic number: var AlolanKanto = new byte[]              {                  // Level 1+                  019' // Rattata                  020' // Raticate                  027' // Sandshrew                  028' // Sandslash                  037' // Vulpix                  038' // Ninetales                  050' // Diglett                  051' // Dugtrio                  052' // Meowth                  053' // Persian                  074' // Geodude                  075' // Graveler                  076' // Golem                  088' // Grimer                  089' // Muk                  103' // Exeggutor                    // Level 20+                  026' // Raichu                  105' // Marowak              };
Magic Number,PKHeX.Core,Encounters7b,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters7b.cs,GetGoParkArea,The following statement contains a magic number: var AlolanKanto = new byte[]              {                  // Level 1+                  019' // Rattata                  020' // Raticate                  027' // Sandshrew                  028' // Sandslash                  037' // Vulpix                  038' // Ninetales                  050' // Diglett                  051' // Dugtrio                  052' // Meowth                  053' // Persian                  074' // Geodude                  075' // Graveler                  076' // Golem                  088' // Grimer                  089' // Muk                  103' // Exeggutor                    // Level 20+                  026' // Raichu                  105' // Marowak              };
Magic Number,PKHeX.Core,Encounters7b,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters7b.cs,GetGoParkArea,The following statement contains a magic number: var AlolanKanto = new byte[]              {                  // Level 1+                  019' // Rattata                  020' // Raticate                  027' // Sandshrew                  028' // Sandslash                  037' // Vulpix                  038' // Ninetales                  050' // Diglett                  051' // Dugtrio                  052' // Meowth                  053' // Persian                  074' // Geodude                  075' // Graveler                  076' // Golem                  088' // Grimer                  089' // Muk                  103' // Exeggutor                    // Level 20+                  026' // Raichu                  105' // Marowak              };
Magic Number,PKHeX.Core,Encounters7b,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters7b.cs,GetGoParkArea,The following statement contains a magic number: var AlolanKanto = new byte[]              {                  // Level 1+                  019' // Rattata                  020' // Raticate                  027' // Sandshrew                  028' // Sandslash                  037' // Vulpix                  038' // Ninetales                  050' // Diglett                  051' // Dugtrio                  052' // Meowth                  053' // Persian                  074' // Geodude                  075' // Graveler                  076' // Golem                  088' // Grimer                  089' // Muk                  103' // Exeggutor                    // Level 20+                  026' // Raichu                  105' // Marowak              };
Magic Number,PKHeX.Core,Encounters7b,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters7b.cs,GetGoParkArea,The following statement contains a magic number: var AlolanKanto = new byte[]              {                  // Level 1+                  019' // Rattata                  020' // Raticate                  027' // Sandshrew                  028' // Sandslash                  037' // Vulpix                  038' // Ninetales                  050' // Diglett                  051' // Dugtrio                  052' // Meowth                  053' // Persian                  074' // Geodude                  075' // Graveler                  076' // Golem                  088' // Grimer                  089' // Muk                  103' // Exeggutor                    // Level 20+                  026' // Raichu                  105' // Marowak              };
Magic Number,PKHeX.Core,Encounters7b,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters7b.cs,GetGoParkArea,The following statement contains a magic number: var AlolanKanto = new byte[]              {                  // Level 1+                  019' // Rattata                  020' // Raticate                  027' // Sandshrew                  028' // Sandslash                  037' // Vulpix                  038' // Ninetales                  050' // Diglett                  051' // Dugtrio                  052' // Meowth                  053' // Persian                  074' // Geodude                  075' // Graveler                  076' // Golem                  088' // Grimer                  089' // Muk                  103' // Exeggutor                    // Level 20+                  026' // Raichu                  105' // Marowak              };
Magic Number,PKHeX.Core,Encounters7b,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters7b.cs,GetGoParkArea,The following statement contains a magic number: var AlolanKanto = new byte[]              {                  // Level 1+                  019' // Rattata                  020' // Raticate                  027' // Sandshrew                  028' // Sandslash                  037' // Vulpix                  038' // Ninetales                  050' // Diglett                  051' // Dugtrio                  052' // Meowth                  053' // Persian                  074' // Geodude                  075' // Graveler                  076' // Golem                  088' // Grimer                  089' // Muk                  103' // Exeggutor                    // Level 20+                  026' // Raichu                  105' // Marowak              };
Magic Number,PKHeX.Core,Encounters7b,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters7b.cs,GetGoParkArea,The following statement contains a magic number: var AlolanKanto = new byte[]              {                  // Level 1+                  019' // Rattata                  020' // Raticate                  027' // Sandshrew                  028' // Sandslash                  037' // Vulpix                  038' // Ninetales                  050' // Diglett                  051' // Dugtrio                  052' // Meowth                  053' // Persian                  074' // Geodude                  075' // Graveler                  076' // Golem                  088' // Grimer                  089' // Muk                  103' // Exeggutor                    // Level 20+                  026' // Raichu                  105' // Marowak              };
Magic Number,PKHeX.Core,Encounters7b,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters7b.cs,GetGoParkArea,The following statement contains a magic number: var AlolanKanto = new byte[]              {                  // Level 1+                  019' // Rattata                  020' // Raticate                  027' // Sandshrew                  028' // Sandslash                  037' // Vulpix                  038' // Ninetales                  050' // Diglett                  051' // Dugtrio                  052' // Meowth                  053' // Persian                  074' // Geodude                  075' // Graveler                  076' // Golem                  088' // Grimer                  089' // Muk                  103' // Exeggutor                    // Level 20+                  026' // Raichu                  105' // Marowak              };
Magic Number,PKHeX.Core,Encounters7b,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters7b.cs,GetGoParkArea,The following statement contains a magic number: slots[slots.Length - 2].LevelMin = 20;
Magic Number,PKHeX.Core,Encounters7b,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters7b.cs,GetGoParkArea,The following statement contains a magic number: slots[slots.Length - 2].LevelMin = 20;
Magic Number,PKHeX.Core,Encounters7b,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters7b.cs,GetGoParkArea,The following statement contains a magic number: slots[slots.Length - 1].LevelMin = 20;
Magic Number,PKHeX.Core,Encounters7b,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters7b.cs,GetGoParkArea,The following statement contains a magic number: slots[(int)Species.Mewtwo - 1].LevelMin = 20;
Magic Number,PKHeX.Core,Encounters7b,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters7b.cs,GetGoParkArea,The following statement contains a magic number: slots[(int)Species.Articuno - 1].LevelMin = 15;
Magic Number,PKHeX.Core,Encounters7b,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters7b.cs,GetGoParkArea,The following statement contains a magic number: slots[(int)Species.Zapdos - 1].LevelMin = 15;
Magic Number,PKHeX.Core,Encounters7b,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters7b.cs,GetGoParkArea,The following statement contains a magic number: slots[(int)Species.Moltres - 1].LevelMin = 15;
Magic Number,PKHeX.Core,Encounters7b,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters7b.cs,ManuallyAddRareSpawns,The following statement contains a magic number: var extra = species                      .Select(z => new EncounterSlot                      {                          Area = table'                          Species = z'                          LevelMin = (z == 006 || z >= 144) ? 03 : first.LevelMin'                          LevelMax = (z == 006 || z >= 144) ? 56 : first.LevelMax'                      }).ToArray();
Magic Number,PKHeX.Core,Encounters7b,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters7b.cs,ManuallyAddRareSpawns,The following statement contains a magic number: var extra = species                      .Select(z => new EncounterSlot                      {                          Area = table'                          Species = z'                          LevelMin = (z == 006 || z >= 144) ? 03 : first.LevelMin'                          LevelMax = (z == 006 || z >= 144) ? 56 : first.LevelMax'                      }).ToArray();
Magic Number,PKHeX.Core,Encounters7b,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters7b.cs,ManuallyAddRareSpawns,The following statement contains a magic number: var extra = species                      .Select(z => new EncounterSlot                      {                          Area = table'                          Species = z'                          LevelMin = (z == 006 || z >= 144) ? 03 : first.LevelMin'                          LevelMax = (z == 006 || z >= 144) ? 56 : first.LevelMax'                      }).ToArray();
Magic Number,PKHeX.Core,Encounters7b,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters7b.cs,ManuallyAddRareSpawns,The following statement contains a magic number: var extra = species                      .Select(z => new EncounterSlot                      {                          Area = table'                          Species = z'                          LevelMin = (z == 006 || z >= 144) ? 03 : first.LevelMin'                          LevelMax = (z == 006 || z >= 144) ? 56 : first.LevelMax'                      }).ToArray();
Magic Number,PKHeX.Core,Encounters7b,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters7b.cs,ManuallyAddRareSpawns,The following statement contains a magic number: var extra = species                      .Select(z => new EncounterSlot                      {                          Area = table'                          Species = z'                          LevelMin = (z == 006 || z >= 144) ? 03 : first.LevelMin'                          LevelMax = (z == 006 || z >= 144) ? 56 : first.LevelMax'                      }).ToArray();
Magic Number,PKHeX.Core,Encounters7b,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters7b.cs,ManuallyAddRareSpawns,The following statement contains a magic number: var extra = species                      .Select(z => new EncounterSlot                      {                          Area = table'                          Species = z'                          LevelMin = (z == 006 || z >= 144) ? 03 : first.LevelMin'                          LevelMax = (z == 006 || z >= 144) ? 56 : first.LevelMax'                      }).ToArray();
Magic Number,PKHeX.Core,Encounters8,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters8.cs,Encounters8,The following statement contains a magic number: MarkEncountersGeneration(8' SlotsSW' SlotsSH);
Magic Number,PKHeX.Core,Encounters8,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters8.cs,Encounters8,The following statement contains a magic number: MarkEncountersGeneration(8' StaticSW' StaticSH' TradeGift_SWSH);
Magic Number,PKHeX.Core,EncountersWC3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\EncountersWC3.cs,GetIngameCXDData,The following statement contains a magic number: return new[]                  {                      new WC3 { Species = 239' Level = 20' Language = l' Location = 164' TID = 41400' SID = -1' OT_Gender = 0' OT_Name = h[l]' Version = GameVersion.XD'   CardTitle = $"Trade Togepi ({id})"'     Method = PIDType.CXD' Moves = new[] { 008' 007' 009' 238 }' Fateful = true }' // Elekid @ Snagem Hideout                      new WC3 { Species = 307' Level = 20' Language = l' Location = 116' TID = 37149' SID = -1' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.XD'   CardTitle = $"Trade Trapinch ({id})"'   Method = PIDType.CXD' Moves = new[] { 223' 093' 247' 197 }' Fateful = true }' // Meditite @ Pyrite Town                      new WC3 { Species = 213' Level = 20' Language = l' Location = 116' TID = 37149' SID = -1' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.XD'   CardTitle = $"Trade Surskit ({id})"'    Method = PIDType.CXD' Moves = new[] { 092' 164' 188' 277 }' Fateful = true }' // Shuckle @ Pyrite Town                      new WC3 { Species = 246' Level = 20' Language = l' Location = 116' TID = 37149' SID = -1' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.XD'   CardTitle = $"Trade Wooper ({id})"'     Method = PIDType.CXD' Moves = new[] { 201' 349' 044' 200 }' Fateful = true }' // Larvitar @ Pyrite Town                      new WC3 { Species = 311' Level = 13' Language = l' Location = 254' TID = 37149' SID =  0' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.COLO' CardTitle = $"Special Gift ({id})"'     Method = PIDType.CXD' Moves = new[] { 045' 086' 098' 270 }' Shiny = Shiny.Never }' // Plusle @ Ingame Trade                      new WC3 { Species = 250' Level = 70' Language = l' Location = 255' TID = 10048' SID =  0' OT_Gender = 0' OT_Name = m[l]' Version = GameVersion.S'    CardTitle = $"Mt. Battle Ho-Oh ({id})"' Method = PIDType.CXD' Moves = new[] { 105' 126' 241' 129 }' Shiny = Shiny.Never }' // Ho-oh @ Mt. Battle                  };
Magic Number,PKHeX.Core,EncountersWC3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\EncountersWC3.cs,GetIngameCXDData,The following statement contains a magic number: return new[]                  {                      new WC3 { Species = 239' Level = 20' Language = l' Location = 164' TID = 41400' SID = -1' OT_Gender = 0' OT_Name = h[l]' Version = GameVersion.XD'   CardTitle = $"Trade Togepi ({id})"'     Method = PIDType.CXD' Moves = new[] { 008' 007' 009' 238 }' Fateful = true }' // Elekid @ Snagem Hideout                      new WC3 { Species = 307' Level = 20' Language = l' Location = 116' TID = 37149' SID = -1' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.XD'   CardTitle = $"Trade Trapinch ({id})"'   Method = PIDType.CXD' Moves = new[] { 223' 093' 247' 197 }' Fateful = true }' // Meditite @ Pyrite Town                      new WC3 { Species = 213' Level = 20' Language = l' Location = 116' TID = 37149' SID = -1' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.XD'   CardTitle = $"Trade Surskit ({id})"'    Method = PIDType.CXD' Moves = new[] { 092' 164' 188' 277 }' Fateful = true }' // Shuckle @ Pyrite Town                      new WC3 { Species = 246' Level = 20' Language = l' Location = 116' TID = 37149' SID = -1' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.XD'   CardTitle = $"Trade Wooper ({id})"'     Method = PIDType.CXD' Moves = new[] { 201' 349' 044' 200 }' Fateful = true }' // Larvitar @ Pyrite Town                      new WC3 { Species = 311' Level = 13' Language = l' Location = 254' TID = 37149' SID =  0' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.COLO' CardTitle = $"Special Gift ({id})"'     Method = PIDType.CXD' Moves = new[] { 045' 086' 098' 270 }' Shiny = Shiny.Never }' // Plusle @ Ingame Trade                      new WC3 { Species = 250' Level = 70' Language = l' Location = 255' TID = 10048' SID =  0' OT_Gender = 0' OT_Name = m[l]' Version = GameVersion.S'    CardTitle = $"Mt. Battle Ho-Oh ({id})"' Method = PIDType.CXD' Moves = new[] { 105' 126' 241' 129 }' Shiny = Shiny.Never }' // Ho-oh @ Mt. Battle                  };
Magic Number,PKHeX.Core,EncountersWC3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\EncountersWC3.cs,GetIngameCXDData,The following statement contains a magic number: return new[]                  {                      new WC3 { Species = 239' Level = 20' Language = l' Location = 164' TID = 41400' SID = -1' OT_Gender = 0' OT_Name = h[l]' Version = GameVersion.XD'   CardTitle = $"Trade Togepi ({id})"'     Method = PIDType.CXD' Moves = new[] { 008' 007' 009' 238 }' Fateful = true }' // Elekid @ Snagem Hideout                      new WC3 { Species = 307' Level = 20' Language = l' Location = 116' TID = 37149' SID = -1' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.XD'   CardTitle = $"Trade Trapinch ({id})"'   Method = PIDType.CXD' Moves = new[] { 223' 093' 247' 197 }' Fateful = true }' // Meditite @ Pyrite Town                      new WC3 { Species = 213' Level = 20' Language = l' Location = 116' TID = 37149' SID = -1' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.XD'   CardTitle = $"Trade Surskit ({id})"'    Method = PIDType.CXD' Moves = new[] { 092' 164' 188' 277 }' Fateful = true }' // Shuckle @ Pyrite Town                      new WC3 { Species = 246' Level = 20' Language = l' Location = 116' TID = 37149' SID = -1' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.XD'   CardTitle = $"Trade Wooper ({id})"'     Method = PIDType.CXD' Moves = new[] { 201' 349' 044' 200 }' Fateful = true }' // Larvitar @ Pyrite Town                      new WC3 { Species = 311' Level = 13' Language = l' Location = 254' TID = 37149' SID =  0' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.COLO' CardTitle = $"Special Gift ({id})"'     Method = PIDType.CXD' Moves = new[] { 045' 086' 098' 270 }' Shiny = Shiny.Never }' // Plusle @ Ingame Trade                      new WC3 { Species = 250' Level = 70' Language = l' Location = 255' TID = 10048' SID =  0' OT_Gender = 0' OT_Name = m[l]' Version = GameVersion.S'    CardTitle = $"Mt. Battle Ho-Oh ({id})"' Method = PIDType.CXD' Moves = new[] { 105' 126' 241' 129 }' Shiny = Shiny.Never }' // Ho-oh @ Mt. Battle                  };
Magic Number,PKHeX.Core,EncountersWC3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\EncountersWC3.cs,GetIngameCXDData,The following statement contains a magic number: return new[]                  {                      new WC3 { Species = 239' Level = 20' Language = l' Location = 164' TID = 41400' SID = -1' OT_Gender = 0' OT_Name = h[l]' Version = GameVersion.XD'   CardTitle = $"Trade Togepi ({id})"'     Method = PIDType.CXD' Moves = new[] { 008' 007' 009' 238 }' Fateful = true }' // Elekid @ Snagem Hideout                      new WC3 { Species = 307' Level = 20' Language = l' Location = 116' TID = 37149' SID = -1' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.XD'   CardTitle = $"Trade Trapinch ({id})"'   Method = PIDType.CXD' Moves = new[] { 223' 093' 247' 197 }' Fateful = true }' // Meditite @ Pyrite Town                      new WC3 { Species = 213' Level = 20' Language = l' Location = 116' TID = 37149' SID = -1' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.XD'   CardTitle = $"Trade Surskit ({id})"'    Method = PIDType.CXD' Moves = new[] { 092' 164' 188' 277 }' Fateful = true }' // Shuckle @ Pyrite Town                      new WC3 { Species = 246' Level = 20' Language = l' Location = 116' TID = 37149' SID = -1' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.XD'   CardTitle = $"Trade Wooper ({id})"'     Method = PIDType.CXD' Moves = new[] { 201' 349' 044' 200 }' Fateful = true }' // Larvitar @ Pyrite Town                      new WC3 { Species = 311' Level = 13' Language = l' Location = 254' TID = 37149' SID =  0' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.COLO' CardTitle = $"Special Gift ({id})"'     Method = PIDType.CXD' Moves = new[] { 045' 086' 098' 270 }' Shiny = Shiny.Never }' // Plusle @ Ingame Trade                      new WC3 { Species = 250' Level = 70' Language = l' Location = 255' TID = 10048' SID =  0' OT_Gender = 0' OT_Name = m[l]' Version = GameVersion.S'    CardTitle = $"Mt. Battle Ho-Oh ({id})"' Method = PIDType.CXD' Moves = new[] { 105' 126' 241' 129 }' Shiny = Shiny.Never }' // Ho-oh @ Mt. Battle                  };
Magic Number,PKHeX.Core,EncountersWC3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\EncountersWC3.cs,GetIngameCXDData,The following statement contains a magic number: return new[]                  {                      new WC3 { Species = 239' Level = 20' Language = l' Location = 164' TID = 41400' SID = -1' OT_Gender = 0' OT_Name = h[l]' Version = GameVersion.XD'   CardTitle = $"Trade Togepi ({id})"'     Method = PIDType.CXD' Moves = new[] { 008' 007' 009' 238 }' Fateful = true }' // Elekid @ Snagem Hideout                      new WC3 { Species = 307' Level = 20' Language = l' Location = 116' TID = 37149' SID = -1' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.XD'   CardTitle = $"Trade Trapinch ({id})"'   Method = PIDType.CXD' Moves = new[] { 223' 093' 247' 197 }' Fateful = true }' // Meditite @ Pyrite Town                      new WC3 { Species = 213' Level = 20' Language = l' Location = 116' TID = 37149' SID = -1' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.XD'   CardTitle = $"Trade Surskit ({id})"'    Method = PIDType.CXD' Moves = new[] { 092' 164' 188' 277 }' Fateful = true }' // Shuckle @ Pyrite Town                      new WC3 { Species = 246' Level = 20' Language = l' Location = 116' TID = 37149' SID = -1' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.XD'   CardTitle = $"Trade Wooper ({id})"'     Method = PIDType.CXD' Moves = new[] { 201' 349' 044' 200 }' Fateful = true }' // Larvitar @ Pyrite Town                      new WC3 { Species = 311' Level = 13' Language = l' Location = 254' TID = 37149' SID =  0' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.COLO' CardTitle = $"Special Gift ({id})"'     Method = PIDType.CXD' Moves = new[] { 045' 086' 098' 270 }' Shiny = Shiny.Never }' // Plusle @ Ingame Trade                      new WC3 { Species = 250' Level = 70' Language = l' Location = 255' TID = 10048' SID =  0' OT_Gender = 0' OT_Name = m[l]' Version = GameVersion.S'    CardTitle = $"Mt. Battle Ho-Oh ({id})"' Method = PIDType.CXD' Moves = new[] { 105' 126' 241' 129 }' Shiny = Shiny.Never }' // Ho-oh @ Mt. Battle                  };
Magic Number,PKHeX.Core,EncountersWC3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\EncountersWC3.cs,GetIngameCXDData,The following statement contains a magic number: return new[]                  {                      new WC3 { Species = 239' Level = 20' Language = l' Location = 164' TID = 41400' SID = -1' OT_Gender = 0' OT_Name = h[l]' Version = GameVersion.XD'   CardTitle = $"Trade Togepi ({id})"'     Method = PIDType.CXD' Moves = new[] { 008' 007' 009' 238 }' Fateful = true }' // Elekid @ Snagem Hideout                      new WC3 { Species = 307' Level = 20' Language = l' Location = 116' TID = 37149' SID = -1' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.XD'   CardTitle = $"Trade Trapinch ({id})"'   Method = PIDType.CXD' Moves = new[] { 223' 093' 247' 197 }' Fateful = true }' // Meditite @ Pyrite Town                      new WC3 { Species = 213' Level = 20' Language = l' Location = 116' TID = 37149' SID = -1' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.XD'   CardTitle = $"Trade Surskit ({id})"'    Method = PIDType.CXD' Moves = new[] { 092' 164' 188' 277 }' Fateful = true }' // Shuckle @ Pyrite Town                      new WC3 { Species = 246' Level = 20' Language = l' Location = 116' TID = 37149' SID = -1' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.XD'   CardTitle = $"Trade Wooper ({id})"'     Method = PIDType.CXD' Moves = new[] { 201' 349' 044' 200 }' Fateful = true }' // Larvitar @ Pyrite Town                      new WC3 { Species = 311' Level = 13' Language = l' Location = 254' TID = 37149' SID =  0' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.COLO' CardTitle = $"Special Gift ({id})"'     Method = PIDType.CXD' Moves = new[] { 045' 086' 098' 270 }' Shiny = Shiny.Never }' // Plusle @ Ingame Trade                      new WC3 { Species = 250' Level = 70' Language = l' Location = 255' TID = 10048' SID =  0' OT_Gender = 0' OT_Name = m[l]' Version = GameVersion.S'    CardTitle = $"Mt. Battle Ho-Oh ({id})"' Method = PIDType.CXD' Moves = new[] { 105' 126' 241' 129 }' Shiny = Shiny.Never }' // Ho-oh @ Mt. Battle                  };
Magic Number,PKHeX.Core,EncountersWC3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\EncountersWC3.cs,GetIngameCXDData,The following statement contains a magic number: return new[]                  {                      new WC3 { Species = 239' Level = 20' Language = l' Location = 164' TID = 41400' SID = -1' OT_Gender = 0' OT_Name = h[l]' Version = GameVersion.XD'   CardTitle = $"Trade Togepi ({id})"'     Method = PIDType.CXD' Moves = new[] { 008' 007' 009' 238 }' Fateful = true }' // Elekid @ Snagem Hideout                      new WC3 { Species = 307' Level = 20' Language = l' Location = 116' TID = 37149' SID = -1' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.XD'   CardTitle = $"Trade Trapinch ({id})"'   Method = PIDType.CXD' Moves = new[] { 223' 093' 247' 197 }' Fateful = true }' // Meditite @ Pyrite Town                      new WC3 { Species = 213' Level = 20' Language = l' Location = 116' TID = 37149' SID = -1' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.XD'   CardTitle = $"Trade Surskit ({id})"'    Method = PIDType.CXD' Moves = new[] { 092' 164' 188' 277 }' Fateful = true }' // Shuckle @ Pyrite Town                      new WC3 { Species = 246' Level = 20' Language = l' Location = 116' TID = 37149' SID = -1' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.XD'   CardTitle = $"Trade Wooper ({id})"'     Method = PIDType.CXD' Moves = new[] { 201' 349' 044' 200 }' Fateful = true }' // Larvitar @ Pyrite Town                      new WC3 { Species = 311' Level = 13' Language = l' Location = 254' TID = 37149' SID =  0' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.COLO' CardTitle = $"Special Gift ({id})"'     Method = PIDType.CXD' Moves = new[] { 045' 086' 098' 270 }' Shiny = Shiny.Never }' // Plusle @ Ingame Trade                      new WC3 { Species = 250' Level = 70' Language = l' Location = 255' TID = 10048' SID =  0' OT_Gender = 0' OT_Name = m[l]' Version = GameVersion.S'    CardTitle = $"Mt. Battle Ho-Oh ({id})"' Method = PIDType.CXD' Moves = new[] { 105' 126' 241' 129 }' Shiny = Shiny.Never }' // Ho-oh @ Mt. Battle                  };
Magic Number,PKHeX.Core,EncountersWC3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\EncountersWC3.cs,GetIngameCXDData,The following statement contains a magic number: return new[]                  {                      new WC3 { Species = 239' Level = 20' Language = l' Location = 164' TID = 41400' SID = -1' OT_Gender = 0' OT_Name = h[l]' Version = GameVersion.XD'   CardTitle = $"Trade Togepi ({id})"'     Method = PIDType.CXD' Moves = new[] { 008' 007' 009' 238 }' Fateful = true }' // Elekid @ Snagem Hideout                      new WC3 { Species = 307' Level = 20' Language = l' Location = 116' TID = 37149' SID = -1' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.XD'   CardTitle = $"Trade Trapinch ({id})"'   Method = PIDType.CXD' Moves = new[] { 223' 093' 247' 197 }' Fateful = true }' // Meditite @ Pyrite Town                      new WC3 { Species = 213' Level = 20' Language = l' Location = 116' TID = 37149' SID = -1' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.XD'   CardTitle = $"Trade Surskit ({id})"'    Method = PIDType.CXD' Moves = new[] { 092' 164' 188' 277 }' Fateful = true }' // Shuckle @ Pyrite Town                      new WC3 { Species = 246' Level = 20' Language = l' Location = 116' TID = 37149' SID = -1' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.XD'   CardTitle = $"Trade Wooper ({id})"'     Method = PIDType.CXD' Moves = new[] { 201' 349' 044' 200 }' Fateful = true }' // Larvitar @ Pyrite Town                      new WC3 { Species = 311' Level = 13' Language = l' Location = 254' TID = 37149' SID =  0' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.COLO' CardTitle = $"Special Gift ({id})"'     Method = PIDType.CXD' Moves = new[] { 045' 086' 098' 270 }' Shiny = Shiny.Never }' // Plusle @ Ingame Trade                      new WC3 { Species = 250' Level = 70' Language = l' Location = 255' TID = 10048' SID =  0' OT_Gender = 0' OT_Name = m[l]' Version = GameVersion.S'    CardTitle = $"Mt. Battle Ho-Oh ({id})"' Method = PIDType.CXD' Moves = new[] { 105' 126' 241' 129 }' Shiny = Shiny.Never }' // Ho-oh @ Mt. Battle                  };
Magic Number,PKHeX.Core,EncountersWC3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\EncountersWC3.cs,GetIngameCXDData,The following statement contains a magic number: return new[]                  {                      new WC3 { Species = 239' Level = 20' Language = l' Location = 164' TID = 41400' SID = -1' OT_Gender = 0' OT_Name = h[l]' Version = GameVersion.XD'   CardTitle = $"Trade Togepi ({id})"'     Method = PIDType.CXD' Moves = new[] { 008' 007' 009' 238 }' Fateful = true }' // Elekid @ Snagem Hideout                      new WC3 { Species = 307' Level = 20' Language = l' Location = 116' TID = 37149' SID = -1' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.XD'   CardTitle = $"Trade Trapinch ({id})"'   Method = PIDType.CXD' Moves = new[] { 223' 093' 247' 197 }' Fateful = true }' // Meditite @ Pyrite Town                      new WC3 { Species = 213' Level = 20' Language = l' Location = 116' TID = 37149' SID = -1' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.XD'   CardTitle = $"Trade Surskit ({id})"'    Method = PIDType.CXD' Moves = new[] { 092' 164' 188' 277 }' Fateful = true }' // Shuckle @ Pyrite Town                      new WC3 { Species = 246' Level = 20' Language = l' Location = 116' TID = 37149' SID = -1' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.XD'   CardTitle = $"Trade Wooper ({id})"'     Method = PIDType.CXD' Moves = new[] { 201' 349' 044' 200 }' Fateful = true }' // Larvitar @ Pyrite Town                      new WC3 { Species = 311' Level = 13' Language = l' Location = 254' TID = 37149' SID =  0' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.COLO' CardTitle = $"Special Gift ({id})"'     Method = PIDType.CXD' Moves = new[] { 045' 086' 098' 270 }' Shiny = Shiny.Never }' // Plusle @ Ingame Trade                      new WC3 { Species = 250' Level = 70' Language = l' Location = 255' TID = 10048' SID =  0' OT_Gender = 0' OT_Name = m[l]' Version = GameVersion.S'    CardTitle = $"Mt. Battle Ho-Oh ({id})"' Method = PIDType.CXD' Moves = new[] { 105' 126' 241' 129 }' Shiny = Shiny.Never }' // Ho-oh @ Mt. Battle                  };
Magic Number,PKHeX.Core,EncountersWC3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\EncountersWC3.cs,GetIngameCXDData,The following statement contains a magic number: return new[]                  {                      new WC3 { Species = 239' Level = 20' Language = l' Location = 164' TID = 41400' SID = -1' OT_Gender = 0' OT_Name = h[l]' Version = GameVersion.XD'   CardTitle = $"Trade Togepi ({id})"'     Method = PIDType.CXD' Moves = new[] { 008' 007' 009' 238 }' Fateful = true }' // Elekid @ Snagem Hideout                      new WC3 { Species = 307' Level = 20' Language = l' Location = 116' TID = 37149' SID = -1' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.XD'   CardTitle = $"Trade Trapinch ({id})"'   Method = PIDType.CXD' Moves = new[] { 223' 093' 247' 197 }' Fateful = true }' // Meditite @ Pyrite Town                      new WC3 { Species = 213' Level = 20' Language = l' Location = 116' TID = 37149' SID = -1' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.XD'   CardTitle = $"Trade Surskit ({id})"'    Method = PIDType.CXD' Moves = new[] { 092' 164' 188' 277 }' Fateful = true }' // Shuckle @ Pyrite Town                      new WC3 { Species = 246' Level = 20' Language = l' Location = 116' TID = 37149' SID = -1' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.XD'   CardTitle = $"Trade Wooper ({id})"'     Method = PIDType.CXD' Moves = new[] { 201' 349' 044' 200 }' Fateful = true }' // Larvitar @ Pyrite Town                      new WC3 { Species = 311' Level = 13' Language = l' Location = 254' TID = 37149' SID =  0' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.COLO' CardTitle = $"Special Gift ({id})"'     Method = PIDType.CXD' Moves = new[] { 045' 086' 098' 270 }' Shiny = Shiny.Never }' // Plusle @ Ingame Trade                      new WC3 { Species = 250' Level = 70' Language = l' Location = 255' TID = 10048' SID =  0' OT_Gender = 0' OT_Name = m[l]' Version = GameVersion.S'    CardTitle = $"Mt. Battle Ho-Oh ({id})"' Method = PIDType.CXD' Moves = new[] { 105' 126' 241' 129 }' Shiny = Shiny.Never }' // Ho-oh @ Mt. Battle                  };
Magic Number,PKHeX.Core,EncountersWC3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\EncountersWC3.cs,GetIngameCXDData,The following statement contains a magic number: return new[]                  {                      new WC3 { Species = 239' Level = 20' Language = l' Location = 164' TID = 41400' SID = -1' OT_Gender = 0' OT_Name = h[l]' Version = GameVersion.XD'   CardTitle = $"Trade Togepi ({id})"'     Method = PIDType.CXD' Moves = new[] { 008' 007' 009' 238 }' Fateful = true }' // Elekid @ Snagem Hideout                      new WC3 { Species = 307' Level = 20' Language = l' Location = 116' TID = 37149' SID = -1' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.XD'   CardTitle = $"Trade Trapinch ({id})"'   Method = PIDType.CXD' Moves = new[] { 223' 093' 247' 197 }' Fateful = true }' // Meditite @ Pyrite Town                      new WC3 { Species = 213' Level = 20' Language = l' Location = 116' TID = 37149' SID = -1' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.XD'   CardTitle = $"Trade Surskit ({id})"'    Method = PIDType.CXD' Moves = new[] { 092' 164' 188' 277 }' Fateful = true }' // Shuckle @ Pyrite Town                      new WC3 { Species = 246' Level = 20' Language = l' Location = 116' TID = 37149' SID = -1' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.XD'   CardTitle = $"Trade Wooper ({id})"'     Method = PIDType.CXD' Moves = new[] { 201' 349' 044' 200 }' Fateful = true }' // Larvitar @ Pyrite Town                      new WC3 { Species = 311' Level = 13' Language = l' Location = 254' TID = 37149' SID =  0' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.COLO' CardTitle = $"Special Gift ({id})"'     Method = PIDType.CXD' Moves = new[] { 045' 086' 098' 270 }' Shiny = Shiny.Never }' // Plusle @ Ingame Trade                      new WC3 { Species = 250' Level = 70' Language = l' Location = 255' TID = 10048' SID =  0' OT_Gender = 0' OT_Name = m[l]' Version = GameVersion.S'    CardTitle = $"Mt. Battle Ho-Oh ({id})"' Method = PIDType.CXD' Moves = new[] { 105' 126' 241' 129 }' Shiny = Shiny.Never }' // Ho-oh @ Mt. Battle                  };
Magic Number,PKHeX.Core,EncountersWC3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\EncountersWC3.cs,GetIngameCXDData,The following statement contains a magic number: return new[]                  {                      new WC3 { Species = 239' Level = 20' Language = l' Location = 164' TID = 41400' SID = -1' OT_Gender = 0' OT_Name = h[l]' Version = GameVersion.XD'   CardTitle = $"Trade Togepi ({id})"'     Method = PIDType.CXD' Moves = new[] { 008' 007' 009' 238 }' Fateful = true }' // Elekid @ Snagem Hideout                      new WC3 { Species = 307' Level = 20' Language = l' Location = 116' TID = 37149' SID = -1' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.XD'   CardTitle = $"Trade Trapinch ({id})"'   Method = PIDType.CXD' Moves = new[] { 223' 093' 247' 197 }' Fateful = true }' // Meditite @ Pyrite Town                      new WC3 { Species = 213' Level = 20' Language = l' Location = 116' TID = 37149' SID = -1' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.XD'   CardTitle = $"Trade Surskit ({id})"'    Method = PIDType.CXD' Moves = new[] { 092' 164' 188' 277 }' Fateful = true }' // Shuckle @ Pyrite Town                      new WC3 { Species = 246' Level = 20' Language = l' Location = 116' TID = 37149' SID = -1' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.XD'   CardTitle = $"Trade Wooper ({id})"'     Method = PIDType.CXD' Moves = new[] { 201' 349' 044' 200 }' Fateful = true }' // Larvitar @ Pyrite Town                      new WC3 { Species = 311' Level = 13' Language = l' Location = 254' TID = 37149' SID =  0' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.COLO' CardTitle = $"Special Gift ({id})"'     Method = PIDType.CXD' Moves = new[] { 045' 086' 098' 270 }' Shiny = Shiny.Never }' // Plusle @ Ingame Trade                      new WC3 { Species = 250' Level = 70' Language = l' Location = 255' TID = 10048' SID =  0' OT_Gender = 0' OT_Name = m[l]' Version = GameVersion.S'    CardTitle = $"Mt. Battle Ho-Oh ({id})"' Method = PIDType.CXD' Moves = new[] { 105' 126' 241' 129 }' Shiny = Shiny.Never }' // Ho-oh @ Mt. Battle                  };
Magic Number,PKHeX.Core,EncountersWC3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\EncountersWC3.cs,GetIngameCXDData,The following statement contains a magic number: return new[]                  {                      new WC3 { Species = 239' Level = 20' Language = l' Location = 164' TID = 41400' SID = -1' OT_Gender = 0' OT_Name = h[l]' Version = GameVersion.XD'   CardTitle = $"Trade Togepi ({id})"'     Method = PIDType.CXD' Moves = new[] { 008' 007' 009' 238 }' Fateful = true }' // Elekid @ Snagem Hideout                      new WC3 { Species = 307' Level = 20' Language = l' Location = 116' TID = 37149' SID = -1' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.XD'   CardTitle = $"Trade Trapinch ({id})"'   Method = PIDType.CXD' Moves = new[] { 223' 093' 247' 197 }' Fateful = true }' // Meditite @ Pyrite Town                      new WC3 { Species = 213' Level = 20' Language = l' Location = 116' TID = 37149' SID = -1' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.XD'   CardTitle = $"Trade Surskit ({id})"'    Method = PIDType.CXD' Moves = new[] { 092' 164' 188' 277 }' Fateful = true }' // Shuckle @ Pyrite Town                      new WC3 { Species = 246' Level = 20' Language = l' Location = 116' TID = 37149' SID = -1' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.XD'   CardTitle = $"Trade Wooper ({id})"'     Method = PIDType.CXD' Moves = new[] { 201' 349' 044' 200 }' Fateful = true }' // Larvitar @ Pyrite Town                      new WC3 { Species = 311' Level = 13' Language = l' Location = 254' TID = 37149' SID =  0' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.COLO' CardTitle = $"Special Gift ({id})"'     Method = PIDType.CXD' Moves = new[] { 045' 086' 098' 270 }' Shiny = Shiny.Never }' // Plusle @ Ingame Trade                      new WC3 { Species = 250' Level = 70' Language = l' Location = 255' TID = 10048' SID =  0' OT_Gender = 0' OT_Name = m[l]' Version = GameVersion.S'    CardTitle = $"Mt. Battle Ho-Oh ({id})"' Method = PIDType.CXD' Moves = new[] { 105' 126' 241' 129 }' Shiny = Shiny.Never }' // Ho-oh @ Mt. Battle                  };
Magic Number,PKHeX.Core,EncountersWC3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\EncountersWC3.cs,GetIngameCXDData,The following statement contains a magic number: return new[]                  {                      new WC3 { Species = 239' Level = 20' Language = l' Location = 164' TID = 41400' SID = -1' OT_Gender = 0' OT_Name = h[l]' Version = GameVersion.XD'   CardTitle = $"Trade Togepi ({id})"'     Method = PIDType.CXD' Moves = new[] { 008' 007' 009' 238 }' Fateful = true }' // Elekid @ Snagem Hideout                      new WC3 { Species = 307' Level = 20' Language = l' Location = 116' TID = 37149' SID = -1' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.XD'   CardTitle = $"Trade Trapinch ({id})"'   Method = PIDType.CXD' Moves = new[] { 223' 093' 247' 197 }' Fateful = true }' // Meditite @ Pyrite Town                      new WC3 { Species = 213' Level = 20' Language = l' Location = 116' TID = 37149' SID = -1' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.XD'   CardTitle = $"Trade Surskit ({id})"'    Method = PIDType.CXD' Moves = new[] { 092' 164' 188' 277 }' Fateful = true }' // Shuckle @ Pyrite Town                      new WC3 { Species = 246' Level = 20' Language = l' Location = 116' TID = 37149' SID = -1' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.XD'   CardTitle = $"Trade Wooper ({id})"'     Method = PIDType.CXD' Moves = new[] { 201' 349' 044' 200 }' Fateful = true }' // Larvitar @ Pyrite Town                      new WC3 { Species = 311' Level = 13' Language = l' Location = 254' TID = 37149' SID =  0' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.COLO' CardTitle = $"Special Gift ({id})"'     Method = PIDType.CXD' Moves = new[] { 045' 086' 098' 270 }' Shiny = Shiny.Never }' // Plusle @ Ingame Trade                      new WC3 { Species = 250' Level = 70' Language = l' Location = 255' TID = 10048' SID =  0' OT_Gender = 0' OT_Name = m[l]' Version = GameVersion.S'    CardTitle = $"Mt. Battle Ho-Oh ({id})"' Method = PIDType.CXD' Moves = new[] { 105' 126' 241' 129 }' Shiny = Shiny.Never }' // Ho-oh @ Mt. Battle                  };
Magic Number,PKHeX.Core,EncountersWC3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\EncountersWC3.cs,GetIngameCXDData,The following statement contains a magic number: return new[]                  {                      new WC3 { Species = 239' Level = 20' Language = l' Location = 164' TID = 41400' SID = -1' OT_Gender = 0' OT_Name = h[l]' Version = GameVersion.XD'   CardTitle = $"Trade Togepi ({id})"'     Method = PIDType.CXD' Moves = new[] { 008' 007' 009' 238 }' Fateful = true }' // Elekid @ Snagem Hideout                      new WC3 { Species = 307' Level = 20' Language = l' Location = 116' TID = 37149' SID = -1' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.XD'   CardTitle = $"Trade Trapinch ({id})"'   Method = PIDType.CXD' Moves = new[] { 223' 093' 247' 197 }' Fateful = true }' // Meditite @ Pyrite Town                      new WC3 { Species = 213' Level = 20' Language = l' Location = 116' TID = 37149' SID = -1' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.XD'   CardTitle = $"Trade Surskit ({id})"'    Method = PIDType.CXD' Moves = new[] { 092' 164' 188' 277 }' Fateful = true }' // Shuckle @ Pyrite Town                      new WC3 { Species = 246' Level = 20' Language = l' Location = 116' TID = 37149' SID = -1' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.XD'   CardTitle = $"Trade Wooper ({id})"'     Method = PIDType.CXD' Moves = new[] { 201' 349' 044' 200 }' Fateful = true }' // Larvitar @ Pyrite Town                      new WC3 { Species = 311' Level = 13' Language = l' Location = 254' TID = 37149' SID =  0' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.COLO' CardTitle = $"Special Gift ({id})"'     Method = PIDType.CXD' Moves = new[] { 045' 086' 098' 270 }' Shiny = Shiny.Never }' // Plusle @ Ingame Trade                      new WC3 { Species = 250' Level = 70' Language = l' Location = 255' TID = 10048' SID =  0' OT_Gender = 0' OT_Name = m[l]' Version = GameVersion.S'    CardTitle = $"Mt. Battle Ho-Oh ({id})"' Method = PIDType.CXD' Moves = new[] { 105' 126' 241' 129 }' Shiny = Shiny.Never }' // Ho-oh @ Mt. Battle                  };
Magic Number,PKHeX.Core,EncountersWC3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\EncountersWC3.cs,GetIngameCXDData,The following statement contains a magic number: return new[]                  {                      new WC3 { Species = 239' Level = 20' Language = l' Location = 164' TID = 41400' SID = -1' OT_Gender = 0' OT_Name = h[l]' Version = GameVersion.XD'   CardTitle = $"Trade Togepi ({id})"'     Method = PIDType.CXD' Moves = new[] { 008' 007' 009' 238 }' Fateful = true }' // Elekid @ Snagem Hideout                      new WC3 { Species = 307' Level = 20' Language = l' Location = 116' TID = 37149' SID = -1' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.XD'   CardTitle = $"Trade Trapinch ({id})"'   Method = PIDType.CXD' Moves = new[] { 223' 093' 247' 197 }' Fateful = true }' // Meditite @ Pyrite Town                      new WC3 { Species = 213' Level = 20' Language = l' Location = 116' TID = 37149' SID = -1' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.XD'   CardTitle = $"Trade Surskit ({id})"'    Method = PIDType.CXD' Moves = new[] { 092' 164' 188' 277 }' Fateful = true }' // Shuckle @ Pyrite Town                      new WC3 { Species = 246' Level = 20' Language = l' Location = 116' TID = 37149' SID = -1' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.XD'   CardTitle = $"Trade Wooper ({id})"'     Method = PIDType.CXD' Moves = new[] { 201' 349' 044' 200 }' Fateful = true }' // Larvitar @ Pyrite Town                      new WC3 { Species = 311' Level = 13' Language = l' Location = 254' TID = 37149' SID =  0' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.COLO' CardTitle = $"Special Gift ({id})"'     Method = PIDType.CXD' Moves = new[] { 045' 086' 098' 270 }' Shiny = Shiny.Never }' // Plusle @ Ingame Trade                      new WC3 { Species = 250' Level = 70' Language = l' Location = 255' TID = 10048' SID =  0' OT_Gender = 0' OT_Name = m[l]' Version = GameVersion.S'    CardTitle = $"Mt. Battle Ho-Oh ({id})"' Method = PIDType.CXD' Moves = new[] { 105' 126' 241' 129 }' Shiny = Shiny.Never }' // Ho-oh @ Mt. Battle                  };
Magic Number,PKHeX.Core,EncountersWC3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\EncountersWC3.cs,GetIngameCXDData,The following statement contains a magic number: return new[]                  {                      new WC3 { Species = 239' Level = 20' Language = l' Location = 164' TID = 41400' SID = -1' OT_Gender = 0' OT_Name = h[l]' Version = GameVersion.XD'   CardTitle = $"Trade Togepi ({id})"'     Method = PIDType.CXD' Moves = new[] { 008' 007' 009' 238 }' Fateful = true }' // Elekid @ Snagem Hideout                      new WC3 { Species = 307' Level = 20' Language = l' Location = 116' TID = 37149' SID = -1' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.XD'   CardTitle = $"Trade Trapinch ({id})"'   Method = PIDType.CXD' Moves = new[] { 223' 093' 247' 197 }' Fateful = true }' // Meditite @ Pyrite Town                      new WC3 { Species = 213' Level = 20' Language = l' Location = 116' TID = 37149' SID = -1' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.XD'   CardTitle = $"Trade Surskit ({id})"'    Method = PIDType.CXD' Moves = new[] { 092' 164' 188' 277 }' Fateful = true }' // Shuckle @ Pyrite Town                      new WC3 { Species = 246' Level = 20' Language = l' Location = 116' TID = 37149' SID = -1' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.XD'   CardTitle = $"Trade Wooper ({id})"'     Method = PIDType.CXD' Moves = new[] { 201' 349' 044' 200 }' Fateful = true }' // Larvitar @ Pyrite Town                      new WC3 { Species = 311' Level = 13' Language = l' Location = 254' TID = 37149' SID =  0' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.COLO' CardTitle = $"Special Gift ({id})"'     Method = PIDType.CXD' Moves = new[] { 045' 086' 098' 270 }' Shiny = Shiny.Never }' // Plusle @ Ingame Trade                      new WC3 { Species = 250' Level = 70' Language = l' Location = 255' TID = 10048' SID =  0' OT_Gender = 0' OT_Name = m[l]' Version = GameVersion.S'    CardTitle = $"Mt. Battle Ho-Oh ({id})"' Method = PIDType.CXD' Moves = new[] { 105' 126' 241' 129 }' Shiny = Shiny.Never }' // Ho-oh @ Mt. Battle                  };
Magic Number,PKHeX.Core,EncountersWC3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\EncountersWC3.cs,GetIngameCXDData,The following statement contains a magic number: return new[]                  {                      new WC3 { Species = 239' Level = 20' Language = l' Location = 164' TID = 41400' SID = -1' OT_Gender = 0' OT_Name = h[l]' Version = GameVersion.XD'   CardTitle = $"Trade Togepi ({id})"'     Method = PIDType.CXD' Moves = new[] { 008' 007' 009' 238 }' Fateful = true }' // Elekid @ Snagem Hideout                      new WC3 { Species = 307' Level = 20' Language = l' Location = 116' TID = 37149' SID = -1' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.XD'   CardTitle = $"Trade Trapinch ({id})"'   Method = PIDType.CXD' Moves = new[] { 223' 093' 247' 197 }' Fateful = true }' // Meditite @ Pyrite Town                      new WC3 { Species = 213' Level = 20' Language = l' Location = 116' TID = 37149' SID = -1' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.XD'   CardTitle = $"Trade Surskit ({id})"'    Method = PIDType.CXD' Moves = new[] { 092' 164' 188' 277 }' Fateful = true }' // Shuckle @ Pyrite Town                      new WC3 { Species = 246' Level = 20' Language = l' Location = 116' TID = 37149' SID = -1' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.XD'   CardTitle = $"Trade Wooper ({id})"'     Method = PIDType.CXD' Moves = new[] { 201' 349' 044' 200 }' Fateful = true }' // Larvitar @ Pyrite Town                      new WC3 { Species = 311' Level = 13' Language = l' Location = 254' TID = 37149' SID =  0' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.COLO' CardTitle = $"Special Gift ({id})"'     Method = PIDType.CXD' Moves = new[] { 045' 086' 098' 270 }' Shiny = Shiny.Never }' // Plusle @ Ingame Trade                      new WC3 { Species = 250' Level = 70' Language = l' Location = 255' TID = 10048' SID =  0' OT_Gender = 0' OT_Name = m[l]' Version = GameVersion.S'    CardTitle = $"Mt. Battle Ho-Oh ({id})"' Method = PIDType.CXD' Moves = new[] { 105' 126' 241' 129 }' Shiny = Shiny.Never }' // Ho-oh @ Mt. Battle                  };
Magic Number,PKHeX.Core,EncountersWC3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\EncountersWC3.cs,GetIngameCXDData,The following statement contains a magic number: return new[]                  {                      new WC3 { Species = 239' Level = 20' Language = l' Location = 164' TID = 41400' SID = -1' OT_Gender = 0' OT_Name = h[l]' Version = GameVersion.XD'   CardTitle = $"Trade Togepi ({id})"'     Method = PIDType.CXD' Moves = new[] { 008' 007' 009' 238 }' Fateful = true }' // Elekid @ Snagem Hideout                      new WC3 { Species = 307' Level = 20' Language = l' Location = 116' TID = 37149' SID = -1' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.XD'   CardTitle = $"Trade Trapinch ({id})"'   Method = PIDType.CXD' Moves = new[] { 223' 093' 247' 197 }' Fateful = true }' // Meditite @ Pyrite Town                      new WC3 { Species = 213' Level = 20' Language = l' Location = 116' TID = 37149' SID = -1' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.XD'   CardTitle = $"Trade Surskit ({id})"'    Method = PIDType.CXD' Moves = new[] { 092' 164' 188' 277 }' Fateful = true }' // Shuckle @ Pyrite Town                      new WC3 { Species = 246' Level = 20' Language = l' Location = 116' TID = 37149' SID = -1' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.XD'   CardTitle = $"Trade Wooper ({id})"'     Method = PIDType.CXD' Moves = new[] { 201' 349' 044' 200 }' Fateful = true }' // Larvitar @ Pyrite Town                      new WC3 { Species = 311' Level = 13' Language = l' Location = 254' TID = 37149' SID =  0' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.COLO' CardTitle = $"Special Gift ({id})"'     Method = PIDType.CXD' Moves = new[] { 045' 086' 098' 270 }' Shiny = Shiny.Never }' // Plusle @ Ingame Trade                      new WC3 { Species = 250' Level = 70' Language = l' Location = 255' TID = 10048' SID =  0' OT_Gender = 0' OT_Name = m[l]' Version = GameVersion.S'    CardTitle = $"Mt. Battle Ho-Oh ({id})"' Method = PIDType.CXD' Moves = new[] { 105' 126' 241' 129 }' Shiny = Shiny.Never }' // Ho-oh @ Mt. Battle                  };
Magic Number,PKHeX.Core,EncountersWC3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\EncountersWC3.cs,GetIngameCXDData,The following statement contains a magic number: return new[]                  {                      new WC3 { Species = 239' Level = 20' Language = l' Location = 164' TID = 41400' SID = -1' OT_Gender = 0' OT_Name = h[l]' Version = GameVersion.XD'   CardTitle = $"Trade Togepi ({id})"'     Method = PIDType.CXD' Moves = new[] { 008' 007' 009' 238 }' Fateful = true }' // Elekid @ Snagem Hideout                      new WC3 { Species = 307' Level = 20' Language = l' Location = 116' TID = 37149' SID = -1' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.XD'   CardTitle = $"Trade Trapinch ({id})"'   Method = PIDType.CXD' Moves = new[] { 223' 093' 247' 197 }' Fateful = true }' // Meditite @ Pyrite Town                      new WC3 { Species = 213' Level = 20' Language = l' Location = 116' TID = 37149' SID = -1' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.XD'   CardTitle = $"Trade Surskit ({id})"'    Method = PIDType.CXD' Moves = new[] { 092' 164' 188' 277 }' Fateful = true }' // Shuckle @ Pyrite Town                      new WC3 { Species = 246' Level = 20' Language = l' Location = 116' TID = 37149' SID = -1' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.XD'   CardTitle = $"Trade Wooper ({id})"'     Method = PIDType.CXD' Moves = new[] { 201' 349' 044' 200 }' Fateful = true }' // Larvitar @ Pyrite Town                      new WC3 { Species = 311' Level = 13' Language = l' Location = 254' TID = 37149' SID =  0' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.COLO' CardTitle = $"Special Gift ({id})"'     Method = PIDType.CXD' Moves = new[] { 045' 086' 098' 270 }' Shiny = Shiny.Never }' // Plusle @ Ingame Trade                      new WC3 { Species = 250' Level = 70' Language = l' Location = 255' TID = 10048' SID =  0' OT_Gender = 0' OT_Name = m[l]' Version = GameVersion.S'    CardTitle = $"Mt. Battle Ho-Oh ({id})"' Method = PIDType.CXD' Moves = new[] { 105' 126' 241' 129 }' Shiny = Shiny.Never }' // Ho-oh @ Mt. Battle                  };
Magic Number,PKHeX.Core,EncountersWC3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\EncountersWC3.cs,GetIngameCXDData,The following statement contains a magic number: return new[]                  {                      new WC3 { Species = 239' Level = 20' Language = l' Location = 164' TID = 41400' SID = -1' OT_Gender = 0' OT_Name = h[l]' Version = GameVersion.XD'   CardTitle = $"Trade Togepi ({id})"'     Method = PIDType.CXD' Moves = new[] { 008' 007' 009' 238 }' Fateful = true }' // Elekid @ Snagem Hideout                      new WC3 { Species = 307' Level = 20' Language = l' Location = 116' TID = 37149' SID = -1' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.XD'   CardTitle = $"Trade Trapinch ({id})"'   Method = PIDType.CXD' Moves = new[] { 223' 093' 247' 197 }' Fateful = true }' // Meditite @ Pyrite Town                      new WC3 { Species = 213' Level = 20' Language = l' Location = 116' TID = 37149' SID = -1' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.XD'   CardTitle = $"Trade Surskit ({id})"'    Method = PIDType.CXD' Moves = new[] { 092' 164' 188' 277 }' Fateful = true }' // Shuckle @ Pyrite Town                      new WC3 { Species = 246' Level = 20' Language = l' Location = 116' TID = 37149' SID = -1' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.XD'   CardTitle = $"Trade Wooper ({id})"'     Method = PIDType.CXD' Moves = new[] { 201' 349' 044' 200 }' Fateful = true }' // Larvitar @ Pyrite Town                      new WC3 { Species = 311' Level = 13' Language = l' Location = 254' TID = 37149' SID =  0' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.COLO' CardTitle = $"Special Gift ({id})"'     Method = PIDType.CXD' Moves = new[] { 045' 086' 098' 270 }' Shiny = Shiny.Never }' // Plusle @ Ingame Trade                      new WC3 { Species = 250' Level = 70' Language = l' Location = 255' TID = 10048' SID =  0' OT_Gender = 0' OT_Name = m[l]' Version = GameVersion.S'    CardTitle = $"Mt. Battle Ho-Oh ({id})"' Method = PIDType.CXD' Moves = new[] { 105' 126' 241' 129 }' Shiny = Shiny.Never }' // Ho-oh @ Mt. Battle                  };
Magic Number,PKHeX.Core,EncountersWC3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\EncountersWC3.cs,GetIngameCXDData,The following statement contains a magic number: return new[]                  {                      new WC3 { Species = 239' Level = 20' Language = l' Location = 164' TID = 41400' SID = -1' OT_Gender = 0' OT_Name = h[l]' Version = GameVersion.XD'   CardTitle = $"Trade Togepi ({id})"'     Method = PIDType.CXD' Moves = new[] { 008' 007' 009' 238 }' Fateful = true }' // Elekid @ Snagem Hideout                      new WC3 { Species = 307' Level = 20' Language = l' Location = 116' TID = 37149' SID = -1' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.XD'   CardTitle = $"Trade Trapinch ({id})"'   Method = PIDType.CXD' Moves = new[] { 223' 093' 247' 197 }' Fateful = true }' // Meditite @ Pyrite Town                      new WC3 { Species = 213' Level = 20' Language = l' Location = 116' TID = 37149' SID = -1' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.XD'   CardTitle = $"Trade Surskit ({id})"'    Method = PIDType.CXD' Moves = new[] { 092' 164' 188' 277 }' Fateful = true }' // Shuckle @ Pyrite Town                      new WC3 { Species = 246' Level = 20' Language = l' Location = 116' TID = 37149' SID = -1' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.XD'   CardTitle = $"Trade Wooper ({id})"'     Method = PIDType.CXD' Moves = new[] { 201' 349' 044' 200 }' Fateful = true }' // Larvitar @ Pyrite Town                      new WC3 { Species = 311' Level = 13' Language = l' Location = 254' TID = 37149' SID =  0' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.COLO' CardTitle = $"Special Gift ({id})"'     Method = PIDType.CXD' Moves = new[] { 045' 086' 098' 270 }' Shiny = Shiny.Never }' // Plusle @ Ingame Trade                      new WC3 { Species = 250' Level = 70' Language = l' Location = 255' TID = 10048' SID =  0' OT_Gender = 0' OT_Name = m[l]' Version = GameVersion.S'    CardTitle = $"Mt. Battle Ho-Oh ({id})"' Method = PIDType.CXD' Moves = new[] { 105' 126' 241' 129 }' Shiny = Shiny.Never }' // Ho-oh @ Mt. Battle                  };
Magic Number,PKHeX.Core,EncountersWC3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\EncountersWC3.cs,GetIngameCXDData,The following statement contains a magic number: return new[]                  {                      new WC3 { Species = 239' Level = 20' Language = l' Location = 164' TID = 41400' SID = -1' OT_Gender = 0' OT_Name = h[l]' Version = GameVersion.XD'   CardTitle = $"Trade Togepi ({id})"'     Method = PIDType.CXD' Moves = new[] { 008' 007' 009' 238 }' Fateful = true }' // Elekid @ Snagem Hideout                      new WC3 { Species = 307' Level = 20' Language = l' Location = 116' TID = 37149' SID = -1' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.XD'   CardTitle = $"Trade Trapinch ({id})"'   Method = PIDType.CXD' Moves = new[] { 223' 093' 247' 197 }' Fateful = true }' // Meditite @ Pyrite Town                      new WC3 { Species = 213' Level = 20' Language = l' Location = 116' TID = 37149' SID = -1' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.XD'   CardTitle = $"Trade Surskit ({id})"'    Method = PIDType.CXD' Moves = new[] { 092' 164' 188' 277 }' Fateful = true }' // Shuckle @ Pyrite Town                      new WC3 { Species = 246' Level = 20' Language = l' Location = 116' TID = 37149' SID = -1' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.XD'   CardTitle = $"Trade Wooper ({id})"'     Method = PIDType.CXD' Moves = new[] { 201' 349' 044' 200 }' Fateful = true }' // Larvitar @ Pyrite Town                      new WC3 { Species = 311' Level = 13' Language = l' Location = 254' TID = 37149' SID =  0' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.COLO' CardTitle = $"Special Gift ({id})"'     Method = PIDType.CXD' Moves = new[] { 045' 086' 098' 270 }' Shiny = Shiny.Never }' // Plusle @ Ingame Trade                      new WC3 { Species = 250' Level = 70' Language = l' Location = 255' TID = 10048' SID =  0' OT_Gender = 0' OT_Name = m[l]' Version = GameVersion.S'    CardTitle = $"Mt. Battle Ho-Oh ({id})"' Method = PIDType.CXD' Moves = new[] { 105' 126' 241' 129 }' Shiny = Shiny.Never }' // Ho-oh @ Mt. Battle                  };
Magic Number,PKHeX.Core,EncountersWC3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\EncountersWC3.cs,GetIngameCXDData,The following statement contains a magic number: return new[]                  {                      new WC3 { Species = 239' Level = 20' Language = l' Location = 164' TID = 41400' SID = -1' OT_Gender = 0' OT_Name = h[l]' Version = GameVersion.XD'   CardTitle = $"Trade Togepi ({id})"'     Method = PIDType.CXD' Moves = new[] { 008' 007' 009' 238 }' Fateful = true }' // Elekid @ Snagem Hideout                      new WC3 { Species = 307' Level = 20' Language = l' Location = 116' TID = 37149' SID = -1' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.XD'   CardTitle = $"Trade Trapinch ({id})"'   Method = PIDType.CXD' Moves = new[] { 223' 093' 247' 197 }' Fateful = true }' // Meditite @ Pyrite Town                      new WC3 { Species = 213' Level = 20' Language = l' Location = 116' TID = 37149' SID = -1' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.XD'   CardTitle = $"Trade Surskit ({id})"'    Method = PIDType.CXD' Moves = new[] { 092' 164' 188' 277 }' Fateful = true }' // Shuckle @ Pyrite Town                      new WC3 { Species = 246' Level = 20' Language = l' Location = 116' TID = 37149' SID = -1' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.XD'   CardTitle = $"Trade Wooper ({id})"'     Method = PIDType.CXD' Moves = new[] { 201' 349' 044' 200 }' Fateful = true }' // Larvitar @ Pyrite Town                      new WC3 { Species = 311' Level = 13' Language = l' Location = 254' TID = 37149' SID =  0' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.COLO' CardTitle = $"Special Gift ({id})"'     Method = PIDType.CXD' Moves = new[] { 045' 086' 098' 270 }' Shiny = Shiny.Never }' // Plusle @ Ingame Trade                      new WC3 { Species = 250' Level = 70' Language = l' Location = 255' TID = 10048' SID =  0' OT_Gender = 0' OT_Name = m[l]' Version = GameVersion.S'    CardTitle = $"Mt. Battle Ho-Oh ({id})"' Method = PIDType.CXD' Moves = new[] { 105' 126' 241' 129 }' Shiny = Shiny.Never }' // Ho-oh @ Mt. Battle                  };
Magic Number,PKHeX.Core,EncountersWC3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\EncountersWC3.cs,GetIngameCXDData,The following statement contains a magic number: return new[]                  {                      new WC3 { Species = 239' Level = 20' Language = l' Location = 164' TID = 41400' SID = -1' OT_Gender = 0' OT_Name = h[l]' Version = GameVersion.XD'   CardTitle = $"Trade Togepi ({id})"'     Method = PIDType.CXD' Moves = new[] { 008' 007' 009' 238 }' Fateful = true }' // Elekid @ Snagem Hideout                      new WC3 { Species = 307' Level = 20' Language = l' Location = 116' TID = 37149' SID = -1' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.XD'   CardTitle = $"Trade Trapinch ({id})"'   Method = PIDType.CXD' Moves = new[] { 223' 093' 247' 197 }' Fateful = true }' // Meditite @ Pyrite Town                      new WC3 { Species = 213' Level = 20' Language = l' Location = 116' TID = 37149' SID = -1' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.XD'   CardTitle = $"Trade Surskit ({id})"'    Method = PIDType.CXD' Moves = new[] { 092' 164' 188' 277 }' Fateful = true }' // Shuckle @ Pyrite Town                      new WC3 { Species = 246' Level = 20' Language = l' Location = 116' TID = 37149' SID = -1' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.XD'   CardTitle = $"Trade Wooper ({id})"'     Method = PIDType.CXD' Moves = new[] { 201' 349' 044' 200 }' Fateful = true }' // Larvitar @ Pyrite Town                      new WC3 { Species = 311' Level = 13' Language = l' Location = 254' TID = 37149' SID =  0' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.COLO' CardTitle = $"Special Gift ({id})"'     Method = PIDType.CXD' Moves = new[] { 045' 086' 098' 270 }' Shiny = Shiny.Never }' // Plusle @ Ingame Trade                      new WC3 { Species = 250' Level = 70' Language = l' Location = 255' TID = 10048' SID =  0' OT_Gender = 0' OT_Name = m[l]' Version = GameVersion.S'    CardTitle = $"Mt. Battle Ho-Oh ({id})"' Method = PIDType.CXD' Moves = new[] { 105' 126' 241' 129 }' Shiny = Shiny.Never }' // Ho-oh @ Mt. Battle                  };
Magic Number,PKHeX.Core,EncountersWC3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\EncountersWC3.cs,GetIngameCXDData,The following statement contains a magic number: return new[]                  {                      new WC3 { Species = 239' Level = 20' Language = l' Location = 164' TID = 41400' SID = -1' OT_Gender = 0' OT_Name = h[l]' Version = GameVersion.XD'   CardTitle = $"Trade Togepi ({id})"'     Method = PIDType.CXD' Moves = new[] { 008' 007' 009' 238 }' Fateful = true }' // Elekid @ Snagem Hideout                      new WC3 { Species = 307' Level = 20' Language = l' Location = 116' TID = 37149' SID = -1' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.XD'   CardTitle = $"Trade Trapinch ({id})"'   Method = PIDType.CXD' Moves = new[] { 223' 093' 247' 197 }' Fateful = true }' // Meditite @ Pyrite Town                      new WC3 { Species = 213' Level = 20' Language = l' Location = 116' TID = 37149' SID = -1' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.XD'   CardTitle = $"Trade Surskit ({id})"'    Method = PIDType.CXD' Moves = new[] { 092' 164' 188' 277 }' Fateful = true }' // Shuckle @ Pyrite Town                      new WC3 { Species = 246' Level = 20' Language = l' Location = 116' TID = 37149' SID = -1' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.XD'   CardTitle = $"Trade Wooper ({id})"'     Method = PIDType.CXD' Moves = new[] { 201' 349' 044' 200 }' Fateful = true }' // Larvitar @ Pyrite Town                      new WC3 { Species = 311' Level = 13' Language = l' Location = 254' TID = 37149' SID =  0' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.COLO' CardTitle = $"Special Gift ({id})"'     Method = PIDType.CXD' Moves = new[] { 045' 086' 098' 270 }' Shiny = Shiny.Never }' // Plusle @ Ingame Trade                      new WC3 { Species = 250' Level = 70' Language = l' Location = 255' TID = 10048' SID =  0' OT_Gender = 0' OT_Name = m[l]' Version = GameVersion.S'    CardTitle = $"Mt. Battle Ho-Oh ({id})"' Method = PIDType.CXD' Moves = new[] { 105' 126' 241' 129 }' Shiny = Shiny.Never }' // Ho-oh @ Mt. Battle                  };
Magic Number,PKHeX.Core,EncountersWC3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\EncountersWC3.cs,GetIngameCXDData,The following statement contains a magic number: return new[]                  {                      new WC3 { Species = 239' Level = 20' Language = l' Location = 164' TID = 41400' SID = -1' OT_Gender = 0' OT_Name = h[l]' Version = GameVersion.XD'   CardTitle = $"Trade Togepi ({id})"'     Method = PIDType.CXD' Moves = new[] { 008' 007' 009' 238 }' Fateful = true }' // Elekid @ Snagem Hideout                      new WC3 { Species = 307' Level = 20' Language = l' Location = 116' TID = 37149' SID = -1' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.XD'   CardTitle = $"Trade Trapinch ({id})"'   Method = PIDType.CXD' Moves = new[] { 223' 093' 247' 197 }' Fateful = true }' // Meditite @ Pyrite Town                      new WC3 { Species = 213' Level = 20' Language = l' Location = 116' TID = 37149' SID = -1' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.XD'   CardTitle = $"Trade Surskit ({id})"'    Method = PIDType.CXD' Moves = new[] { 092' 164' 188' 277 }' Fateful = true }' // Shuckle @ Pyrite Town                      new WC3 { Species = 246' Level = 20' Language = l' Location = 116' TID = 37149' SID = -1' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.XD'   CardTitle = $"Trade Wooper ({id})"'     Method = PIDType.CXD' Moves = new[] { 201' 349' 044' 200 }' Fateful = true }' // Larvitar @ Pyrite Town                      new WC3 { Species = 311' Level = 13' Language = l' Location = 254' TID = 37149' SID =  0' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.COLO' CardTitle = $"Special Gift ({id})"'     Method = PIDType.CXD' Moves = new[] { 045' 086' 098' 270 }' Shiny = Shiny.Never }' // Plusle @ Ingame Trade                      new WC3 { Species = 250' Level = 70' Language = l' Location = 255' TID = 10048' SID =  0' OT_Gender = 0' OT_Name = m[l]' Version = GameVersion.S'    CardTitle = $"Mt. Battle Ho-Oh ({id})"' Method = PIDType.CXD' Moves = new[] { 105' 126' 241' 129 }' Shiny = Shiny.Never }' // Ho-oh @ Mt. Battle                  };
Magic Number,PKHeX.Core,EncountersWC3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\EncountersWC3.cs,GetIngameCXDData,The following statement contains a magic number: return new[]                  {                      new WC3 { Species = 239' Level = 20' Language = l' Location = 164' TID = 41400' SID = -1' OT_Gender = 0' OT_Name = h[l]' Version = GameVersion.XD'   CardTitle = $"Trade Togepi ({id})"'     Method = PIDType.CXD' Moves = new[] { 008' 007' 009' 238 }' Fateful = true }' // Elekid @ Snagem Hideout                      new WC3 { Species = 307' Level = 20' Language = l' Location = 116' TID = 37149' SID = -1' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.XD'   CardTitle = $"Trade Trapinch ({id})"'   Method = PIDType.CXD' Moves = new[] { 223' 093' 247' 197 }' Fateful = true }' // Meditite @ Pyrite Town                      new WC3 { Species = 213' Level = 20' Language = l' Location = 116' TID = 37149' SID = -1' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.XD'   CardTitle = $"Trade Surskit ({id})"'    Method = PIDType.CXD' Moves = new[] { 092' 164' 188' 277 }' Fateful = true }' // Shuckle @ Pyrite Town                      new WC3 { Species = 246' Level = 20' Language = l' Location = 116' TID = 37149' SID = -1' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.XD'   CardTitle = $"Trade Wooper ({id})"'     Method = PIDType.CXD' Moves = new[] { 201' 349' 044' 200 }' Fateful = true }' // Larvitar @ Pyrite Town                      new WC3 { Species = 311' Level = 13' Language = l' Location = 254' TID = 37149' SID =  0' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.COLO' CardTitle = $"Special Gift ({id})"'     Method = PIDType.CXD' Moves = new[] { 045' 086' 098' 270 }' Shiny = Shiny.Never }' // Plusle @ Ingame Trade                      new WC3 { Species = 250' Level = 70' Language = l' Location = 255' TID = 10048' SID =  0' OT_Gender = 0' OT_Name = m[l]' Version = GameVersion.S'    CardTitle = $"Mt. Battle Ho-Oh ({id})"' Method = PIDType.CXD' Moves = new[] { 105' 126' 241' 129 }' Shiny = Shiny.Never }' // Ho-oh @ Mt. Battle                  };
Magic Number,PKHeX.Core,EncountersWC3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\EncountersWC3.cs,GetIngameCXDData,The following statement contains a magic number: return new[]                  {                      new WC3 { Species = 239' Level = 20' Language = l' Location = 164' TID = 41400' SID = -1' OT_Gender = 0' OT_Name = h[l]' Version = GameVersion.XD'   CardTitle = $"Trade Togepi ({id})"'     Method = PIDType.CXD' Moves = new[] { 008' 007' 009' 238 }' Fateful = true }' // Elekid @ Snagem Hideout                      new WC3 { Species = 307' Level = 20' Language = l' Location = 116' TID = 37149' SID = -1' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.XD'   CardTitle = $"Trade Trapinch ({id})"'   Method = PIDType.CXD' Moves = new[] { 223' 093' 247' 197 }' Fateful = true }' // Meditite @ Pyrite Town                      new WC3 { Species = 213' Level = 20' Language = l' Location = 116' TID = 37149' SID = -1' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.XD'   CardTitle = $"Trade Surskit ({id})"'    Method = PIDType.CXD' Moves = new[] { 092' 164' 188' 277 }' Fateful = true }' // Shuckle @ Pyrite Town                      new WC3 { Species = 246' Level = 20' Language = l' Location = 116' TID = 37149' SID = -1' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.XD'   CardTitle = $"Trade Wooper ({id})"'     Method = PIDType.CXD' Moves = new[] { 201' 349' 044' 200 }' Fateful = true }' // Larvitar @ Pyrite Town                      new WC3 { Species = 311' Level = 13' Language = l' Location = 254' TID = 37149' SID =  0' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.COLO' CardTitle = $"Special Gift ({id})"'     Method = PIDType.CXD' Moves = new[] { 045' 086' 098' 270 }' Shiny = Shiny.Never }' // Plusle @ Ingame Trade                      new WC3 { Species = 250' Level = 70' Language = l' Location = 255' TID = 10048' SID =  0' OT_Gender = 0' OT_Name = m[l]' Version = GameVersion.S'    CardTitle = $"Mt. Battle Ho-Oh ({id})"' Method = PIDType.CXD' Moves = new[] { 105' 126' 241' 129 }' Shiny = Shiny.Never }' // Ho-oh @ Mt. Battle                  };
Magic Number,PKHeX.Core,EncountersWC3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\EncountersWC3.cs,GetIngameCXDData,The following statement contains a magic number: return new[]                  {                      new WC3 { Species = 239' Level = 20' Language = l' Location = 164' TID = 41400' SID = -1' OT_Gender = 0' OT_Name = h[l]' Version = GameVersion.XD'   CardTitle = $"Trade Togepi ({id})"'     Method = PIDType.CXD' Moves = new[] { 008' 007' 009' 238 }' Fateful = true }' // Elekid @ Snagem Hideout                      new WC3 { Species = 307' Level = 20' Language = l' Location = 116' TID = 37149' SID = -1' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.XD'   CardTitle = $"Trade Trapinch ({id})"'   Method = PIDType.CXD' Moves = new[] { 223' 093' 247' 197 }' Fateful = true }' // Meditite @ Pyrite Town                      new WC3 { Species = 213' Level = 20' Language = l' Location = 116' TID = 37149' SID = -1' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.XD'   CardTitle = $"Trade Surskit ({id})"'    Method = PIDType.CXD' Moves = new[] { 092' 164' 188' 277 }' Fateful = true }' // Shuckle @ Pyrite Town                      new WC3 { Species = 246' Level = 20' Language = l' Location = 116' TID = 37149' SID = -1' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.XD'   CardTitle = $"Trade Wooper ({id})"'     Method = PIDType.CXD' Moves = new[] { 201' 349' 044' 200 }' Fateful = true }' // Larvitar @ Pyrite Town                      new WC3 { Species = 311' Level = 13' Language = l' Location = 254' TID = 37149' SID =  0' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.COLO' CardTitle = $"Special Gift ({id})"'     Method = PIDType.CXD' Moves = new[] { 045' 086' 098' 270 }' Shiny = Shiny.Never }' // Plusle @ Ingame Trade                      new WC3 { Species = 250' Level = 70' Language = l' Location = 255' TID = 10048' SID =  0' OT_Gender = 0' OT_Name = m[l]' Version = GameVersion.S'    CardTitle = $"Mt. Battle Ho-Oh ({id})"' Method = PIDType.CXD' Moves = new[] { 105' 126' 241' 129 }' Shiny = Shiny.Never }' // Ho-oh @ Mt. Battle                  };
Magic Number,PKHeX.Core,EncountersWC3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\EncountersWC3.cs,GetIngameCXDData,The following statement contains a magic number: return new[]                  {                      new WC3 { Species = 239' Level = 20' Language = l' Location = 164' TID = 41400' SID = -1' OT_Gender = 0' OT_Name = h[l]' Version = GameVersion.XD'   CardTitle = $"Trade Togepi ({id})"'     Method = PIDType.CXD' Moves = new[] { 008' 007' 009' 238 }' Fateful = true }' // Elekid @ Snagem Hideout                      new WC3 { Species = 307' Level = 20' Language = l' Location = 116' TID = 37149' SID = -1' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.XD'   CardTitle = $"Trade Trapinch ({id})"'   Method = PIDType.CXD' Moves = new[] { 223' 093' 247' 197 }' Fateful = true }' // Meditite @ Pyrite Town                      new WC3 { Species = 213' Level = 20' Language = l' Location = 116' TID = 37149' SID = -1' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.XD'   CardTitle = $"Trade Surskit ({id})"'    Method = PIDType.CXD' Moves = new[] { 092' 164' 188' 277 }' Fateful = true }' // Shuckle @ Pyrite Town                      new WC3 { Species = 246' Level = 20' Language = l' Location = 116' TID = 37149' SID = -1' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.XD'   CardTitle = $"Trade Wooper ({id})"'     Method = PIDType.CXD' Moves = new[] { 201' 349' 044' 200 }' Fateful = true }' // Larvitar @ Pyrite Town                      new WC3 { Species = 311' Level = 13' Language = l' Location = 254' TID = 37149' SID =  0' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.COLO' CardTitle = $"Special Gift ({id})"'     Method = PIDType.CXD' Moves = new[] { 045' 086' 098' 270 }' Shiny = Shiny.Never }' // Plusle @ Ingame Trade                      new WC3 { Species = 250' Level = 70' Language = l' Location = 255' TID = 10048' SID =  0' OT_Gender = 0' OT_Name = m[l]' Version = GameVersion.S'    CardTitle = $"Mt. Battle Ho-Oh ({id})"' Method = PIDType.CXD' Moves = new[] { 105' 126' 241' 129 }' Shiny = Shiny.Never }' // Ho-oh @ Mt. Battle                  };
Magic Number,PKHeX.Core,EncountersWC3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\EncountersWC3.cs,GetIngameCXDData,The following statement contains a magic number: return new[]                  {                      new WC3 { Species = 239' Level = 20' Language = l' Location = 164' TID = 41400' SID = -1' OT_Gender = 0' OT_Name = h[l]' Version = GameVersion.XD'   CardTitle = $"Trade Togepi ({id})"'     Method = PIDType.CXD' Moves = new[] { 008' 007' 009' 238 }' Fateful = true }' // Elekid @ Snagem Hideout                      new WC3 { Species = 307' Level = 20' Language = l' Location = 116' TID = 37149' SID = -1' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.XD'   CardTitle = $"Trade Trapinch ({id})"'   Method = PIDType.CXD' Moves = new[] { 223' 093' 247' 197 }' Fateful = true }' // Meditite @ Pyrite Town                      new WC3 { Species = 213' Level = 20' Language = l' Location = 116' TID = 37149' SID = -1' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.XD'   CardTitle = $"Trade Surskit ({id})"'    Method = PIDType.CXD' Moves = new[] { 092' 164' 188' 277 }' Fateful = true }' // Shuckle @ Pyrite Town                      new WC3 { Species = 246' Level = 20' Language = l' Location = 116' TID = 37149' SID = -1' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.XD'   CardTitle = $"Trade Wooper ({id})"'     Method = PIDType.CXD' Moves = new[] { 201' 349' 044' 200 }' Fateful = true }' // Larvitar @ Pyrite Town                      new WC3 { Species = 311' Level = 13' Language = l' Location = 254' TID = 37149' SID =  0' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.COLO' CardTitle = $"Special Gift ({id})"'     Method = PIDType.CXD' Moves = new[] { 045' 086' 098' 270 }' Shiny = Shiny.Never }' // Plusle @ Ingame Trade                      new WC3 { Species = 250' Level = 70' Language = l' Location = 255' TID = 10048' SID =  0' OT_Gender = 0' OT_Name = m[l]' Version = GameVersion.S'    CardTitle = $"Mt. Battle Ho-Oh ({id})"' Method = PIDType.CXD' Moves = new[] { 105' 126' 241' 129 }' Shiny = Shiny.Never }' // Ho-oh @ Mt. Battle                  };
Magic Number,PKHeX.Core,EncountersWC3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\EncountersWC3.cs,GetIngameCXDData,The following statement contains a magic number: return new[]                  {                      new WC3 { Species = 239' Level = 20' Language = l' Location = 164' TID = 41400' SID = -1' OT_Gender = 0' OT_Name = h[l]' Version = GameVersion.XD'   CardTitle = $"Trade Togepi ({id})"'     Method = PIDType.CXD' Moves = new[] { 008' 007' 009' 238 }' Fateful = true }' // Elekid @ Snagem Hideout                      new WC3 { Species = 307' Level = 20' Language = l' Location = 116' TID = 37149' SID = -1' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.XD'   CardTitle = $"Trade Trapinch ({id})"'   Method = PIDType.CXD' Moves = new[] { 223' 093' 247' 197 }' Fateful = true }' // Meditite @ Pyrite Town                      new WC3 { Species = 213' Level = 20' Language = l' Location = 116' TID = 37149' SID = -1' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.XD'   CardTitle = $"Trade Surskit ({id})"'    Method = PIDType.CXD' Moves = new[] { 092' 164' 188' 277 }' Fateful = true }' // Shuckle @ Pyrite Town                      new WC3 { Species = 246' Level = 20' Language = l' Location = 116' TID = 37149' SID = -1' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.XD'   CardTitle = $"Trade Wooper ({id})"'     Method = PIDType.CXD' Moves = new[] { 201' 349' 044' 200 }' Fateful = true }' // Larvitar @ Pyrite Town                      new WC3 { Species = 311' Level = 13' Language = l' Location = 254' TID = 37149' SID =  0' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.COLO' CardTitle = $"Special Gift ({id})"'     Method = PIDType.CXD' Moves = new[] { 045' 086' 098' 270 }' Shiny = Shiny.Never }' // Plusle @ Ingame Trade                      new WC3 { Species = 250' Level = 70' Language = l' Location = 255' TID = 10048' SID =  0' OT_Gender = 0' OT_Name = m[l]' Version = GameVersion.S'    CardTitle = $"Mt. Battle Ho-Oh ({id})"' Method = PIDType.CXD' Moves = new[] { 105' 126' 241' 129 }' Shiny = Shiny.Never }' // Ho-oh @ Mt. Battle                  };
Magic Number,PKHeX.Core,EncountersWC3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\EncountersWC3.cs,GetIngameCXDData,The following statement contains a magic number: return new[]                  {                      new WC3 { Species = 239' Level = 20' Language = l' Location = 164' TID = 41400' SID = -1' OT_Gender = 0' OT_Name = h[l]' Version = GameVersion.XD'   CardTitle = $"Trade Togepi ({id})"'     Method = PIDType.CXD' Moves = new[] { 008' 007' 009' 238 }' Fateful = true }' // Elekid @ Snagem Hideout                      new WC3 { Species = 307' Level = 20' Language = l' Location = 116' TID = 37149' SID = -1' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.XD'   CardTitle = $"Trade Trapinch ({id})"'   Method = PIDType.CXD' Moves = new[] { 223' 093' 247' 197 }' Fateful = true }' // Meditite @ Pyrite Town                      new WC3 { Species = 213' Level = 20' Language = l' Location = 116' TID = 37149' SID = -1' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.XD'   CardTitle = $"Trade Surskit ({id})"'    Method = PIDType.CXD' Moves = new[] { 092' 164' 188' 277 }' Fateful = true }' // Shuckle @ Pyrite Town                      new WC3 { Species = 246' Level = 20' Language = l' Location = 116' TID = 37149' SID = -1' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.XD'   CardTitle = $"Trade Wooper ({id})"'     Method = PIDType.CXD' Moves = new[] { 201' 349' 044' 200 }' Fateful = true }' // Larvitar @ Pyrite Town                      new WC3 { Species = 311' Level = 13' Language = l' Location = 254' TID = 37149' SID =  0' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.COLO' CardTitle = $"Special Gift ({id})"'     Method = PIDType.CXD' Moves = new[] { 045' 086' 098' 270 }' Shiny = Shiny.Never }' // Plusle @ Ingame Trade                      new WC3 { Species = 250' Level = 70' Language = l' Location = 255' TID = 10048' SID =  0' OT_Gender = 0' OT_Name = m[l]' Version = GameVersion.S'    CardTitle = $"Mt. Battle Ho-Oh ({id})"' Method = PIDType.CXD' Moves = new[] { 105' 126' 241' 129 }' Shiny = Shiny.Never }' // Ho-oh @ Mt. Battle                  };
Magic Number,PKHeX.Core,EncountersWC3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\EncountersWC3.cs,GetIngameCXDData,The following statement contains a magic number: return new[]                  {                      new WC3 { Species = 239' Level = 20' Language = l' Location = 164' TID = 41400' SID = -1' OT_Gender = 0' OT_Name = h[l]' Version = GameVersion.XD'   CardTitle = $"Trade Togepi ({id})"'     Method = PIDType.CXD' Moves = new[] { 008' 007' 009' 238 }' Fateful = true }' // Elekid @ Snagem Hideout                      new WC3 { Species = 307' Level = 20' Language = l' Location = 116' TID = 37149' SID = -1' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.XD'   CardTitle = $"Trade Trapinch ({id})"'   Method = PIDType.CXD' Moves = new[] { 223' 093' 247' 197 }' Fateful = true }' // Meditite @ Pyrite Town                      new WC3 { Species = 213' Level = 20' Language = l' Location = 116' TID = 37149' SID = -1' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.XD'   CardTitle = $"Trade Surskit ({id})"'    Method = PIDType.CXD' Moves = new[] { 092' 164' 188' 277 }' Fateful = true }' // Shuckle @ Pyrite Town                      new WC3 { Species = 246' Level = 20' Language = l' Location = 116' TID = 37149' SID = -1' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.XD'   CardTitle = $"Trade Wooper ({id})"'     Method = PIDType.CXD' Moves = new[] { 201' 349' 044' 200 }' Fateful = true }' // Larvitar @ Pyrite Town                      new WC3 { Species = 311' Level = 13' Language = l' Location = 254' TID = 37149' SID =  0' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.COLO' CardTitle = $"Special Gift ({id})"'     Method = PIDType.CXD' Moves = new[] { 045' 086' 098' 270 }' Shiny = Shiny.Never }' // Plusle @ Ingame Trade                      new WC3 { Species = 250' Level = 70' Language = l' Location = 255' TID = 10048' SID =  0' OT_Gender = 0' OT_Name = m[l]' Version = GameVersion.S'    CardTitle = $"Mt. Battle Ho-Oh ({id})"' Method = PIDType.CXD' Moves = new[] { 105' 126' 241' 129 }' Shiny = Shiny.Never }' // Ho-oh @ Mt. Battle                  };
Magic Number,PKHeX.Core,EncountersWC3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\EncountersWC3.cs,GetIngameCXDData,The following statement contains a magic number: return new[]                  {                      new WC3 { Species = 239' Level = 20' Language = l' Location = 164' TID = 41400' SID = -1' OT_Gender = 0' OT_Name = h[l]' Version = GameVersion.XD'   CardTitle = $"Trade Togepi ({id})"'     Method = PIDType.CXD' Moves = new[] { 008' 007' 009' 238 }' Fateful = true }' // Elekid @ Snagem Hideout                      new WC3 { Species = 307' Level = 20' Language = l' Location = 116' TID = 37149' SID = -1' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.XD'   CardTitle = $"Trade Trapinch ({id})"'   Method = PIDType.CXD' Moves = new[] { 223' 093' 247' 197 }' Fateful = true }' // Meditite @ Pyrite Town                      new WC3 { Species = 213' Level = 20' Language = l' Location = 116' TID = 37149' SID = -1' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.XD'   CardTitle = $"Trade Surskit ({id})"'    Method = PIDType.CXD' Moves = new[] { 092' 164' 188' 277 }' Fateful = true }' // Shuckle @ Pyrite Town                      new WC3 { Species = 246' Level = 20' Language = l' Location = 116' TID = 37149' SID = -1' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.XD'   CardTitle = $"Trade Wooper ({id})"'     Method = PIDType.CXD' Moves = new[] { 201' 349' 044' 200 }' Fateful = true }' // Larvitar @ Pyrite Town                      new WC3 { Species = 311' Level = 13' Language = l' Location = 254' TID = 37149' SID =  0' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.COLO' CardTitle = $"Special Gift ({id})"'     Method = PIDType.CXD' Moves = new[] { 045' 086' 098' 270 }' Shiny = Shiny.Never }' // Plusle @ Ingame Trade                      new WC3 { Species = 250' Level = 70' Language = l' Location = 255' TID = 10048' SID =  0' OT_Gender = 0' OT_Name = m[l]' Version = GameVersion.S'    CardTitle = $"Mt. Battle Ho-Oh ({id})"' Method = PIDType.CXD' Moves = new[] { 105' 126' 241' 129 }' Shiny = Shiny.Never }' // Ho-oh @ Mt. Battle                  };
Magic Number,PKHeX.Core,EncountersWC3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\EncountersWC3.cs,GetIngameCXDData,The following statement contains a magic number: return new[]                  {                      new WC3 { Species = 239' Level = 20' Language = l' Location = 164' TID = 41400' SID = -1' OT_Gender = 0' OT_Name = h[l]' Version = GameVersion.XD'   CardTitle = $"Trade Togepi ({id})"'     Method = PIDType.CXD' Moves = new[] { 008' 007' 009' 238 }' Fateful = true }' // Elekid @ Snagem Hideout                      new WC3 { Species = 307' Level = 20' Language = l' Location = 116' TID = 37149' SID = -1' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.XD'   CardTitle = $"Trade Trapinch ({id})"'   Method = PIDType.CXD' Moves = new[] { 223' 093' 247' 197 }' Fateful = true }' // Meditite @ Pyrite Town                      new WC3 { Species = 213' Level = 20' Language = l' Location = 116' TID = 37149' SID = -1' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.XD'   CardTitle = $"Trade Surskit ({id})"'    Method = PIDType.CXD' Moves = new[] { 092' 164' 188' 277 }' Fateful = true }' // Shuckle @ Pyrite Town                      new WC3 { Species = 246' Level = 20' Language = l' Location = 116' TID = 37149' SID = -1' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.XD'   CardTitle = $"Trade Wooper ({id})"'     Method = PIDType.CXD' Moves = new[] { 201' 349' 044' 200 }' Fateful = true }' // Larvitar @ Pyrite Town                      new WC3 { Species = 311' Level = 13' Language = l' Location = 254' TID = 37149' SID =  0' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.COLO' CardTitle = $"Special Gift ({id})"'     Method = PIDType.CXD' Moves = new[] { 045' 086' 098' 270 }' Shiny = Shiny.Never }' // Plusle @ Ingame Trade                      new WC3 { Species = 250' Level = 70' Language = l' Location = 255' TID = 10048' SID =  0' OT_Gender = 0' OT_Name = m[l]' Version = GameVersion.S'    CardTitle = $"Mt. Battle Ho-Oh ({id})"' Method = PIDType.CXD' Moves = new[] { 105' 126' 241' 129 }' Shiny = Shiny.Never }' // Ho-oh @ Mt. Battle                  };
Magic Number,PKHeX.Core,EncountersWC3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\EncountersWC3.cs,GetIngameCXDData,The following statement contains a magic number: return new[]                  {                      new WC3 { Species = 239' Level = 20' Language = l' Location = 164' TID = 41400' SID = -1' OT_Gender = 0' OT_Name = h[l]' Version = GameVersion.XD'   CardTitle = $"Trade Togepi ({id})"'     Method = PIDType.CXD' Moves = new[] { 008' 007' 009' 238 }' Fateful = true }' // Elekid @ Snagem Hideout                      new WC3 { Species = 307' Level = 20' Language = l' Location = 116' TID = 37149' SID = -1' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.XD'   CardTitle = $"Trade Trapinch ({id})"'   Method = PIDType.CXD' Moves = new[] { 223' 093' 247' 197 }' Fateful = true }' // Meditite @ Pyrite Town                      new WC3 { Species = 213' Level = 20' Language = l' Location = 116' TID = 37149' SID = -1' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.XD'   CardTitle = $"Trade Surskit ({id})"'    Method = PIDType.CXD' Moves = new[] { 092' 164' 188' 277 }' Fateful = true }' // Shuckle @ Pyrite Town                      new WC3 { Species = 246' Level = 20' Language = l' Location = 116' TID = 37149' SID = -1' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.XD'   CardTitle = $"Trade Wooper ({id})"'     Method = PIDType.CXD' Moves = new[] { 201' 349' 044' 200 }' Fateful = true }' // Larvitar @ Pyrite Town                      new WC3 { Species = 311' Level = 13' Language = l' Location = 254' TID = 37149' SID =  0' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.COLO' CardTitle = $"Special Gift ({id})"'     Method = PIDType.CXD' Moves = new[] { 045' 086' 098' 270 }' Shiny = Shiny.Never }' // Plusle @ Ingame Trade                      new WC3 { Species = 250' Level = 70' Language = l' Location = 255' TID = 10048' SID =  0' OT_Gender = 0' OT_Name = m[l]' Version = GameVersion.S'    CardTitle = $"Mt. Battle Ho-Oh ({id})"' Method = PIDType.CXD' Moves = new[] { 105' 126' 241' 129 }' Shiny = Shiny.Never }' // Ho-oh @ Mt. Battle                  };
Magic Number,PKHeX.Core,EncountersWC3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\EncountersWC3.cs,GetIngameCXDData,The following statement contains a magic number: return new[]                  {                      new WC3 { Species = 239' Level = 20' Language = l' Location = 164' TID = 41400' SID = -1' OT_Gender = 0' OT_Name = h[l]' Version = GameVersion.XD'   CardTitle = $"Trade Togepi ({id})"'     Method = PIDType.CXD' Moves = new[] { 008' 007' 009' 238 }' Fateful = true }' // Elekid @ Snagem Hideout                      new WC3 { Species = 307' Level = 20' Language = l' Location = 116' TID = 37149' SID = -1' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.XD'   CardTitle = $"Trade Trapinch ({id})"'   Method = PIDType.CXD' Moves = new[] { 223' 093' 247' 197 }' Fateful = true }' // Meditite @ Pyrite Town                      new WC3 { Species = 213' Level = 20' Language = l' Location = 116' TID = 37149' SID = -1' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.XD'   CardTitle = $"Trade Surskit ({id})"'    Method = PIDType.CXD' Moves = new[] { 092' 164' 188' 277 }' Fateful = true }' // Shuckle @ Pyrite Town                      new WC3 { Species = 246' Level = 20' Language = l' Location = 116' TID = 37149' SID = -1' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.XD'   CardTitle = $"Trade Wooper ({id})"'     Method = PIDType.CXD' Moves = new[] { 201' 349' 044' 200 }' Fateful = true }' // Larvitar @ Pyrite Town                      new WC3 { Species = 311' Level = 13' Language = l' Location = 254' TID = 37149' SID =  0' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.COLO' CardTitle = $"Special Gift ({id})"'     Method = PIDType.CXD' Moves = new[] { 045' 086' 098' 270 }' Shiny = Shiny.Never }' // Plusle @ Ingame Trade                      new WC3 { Species = 250' Level = 70' Language = l' Location = 255' TID = 10048' SID =  0' OT_Gender = 0' OT_Name = m[l]' Version = GameVersion.S'    CardTitle = $"Mt. Battle Ho-Oh ({id})"' Method = PIDType.CXD' Moves = new[] { 105' 126' 241' 129 }' Shiny = Shiny.Never }' // Ho-oh @ Mt. Battle                  };
Magic Number,PKHeX.Core,EncountersWC3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\EncountersWC3.cs,GetIngameCXDData,The following statement contains a magic number: return new[]                  {                      new WC3 { Species = 239' Level = 20' Language = l' Location = 164' TID = 41400' SID = -1' OT_Gender = 0' OT_Name = h[l]' Version = GameVersion.XD'   CardTitle = $"Trade Togepi ({id})"'     Method = PIDType.CXD' Moves = new[] { 008' 007' 009' 238 }' Fateful = true }' // Elekid @ Snagem Hideout                      new WC3 { Species = 307' Level = 20' Language = l' Location = 116' TID = 37149' SID = -1' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.XD'   CardTitle = $"Trade Trapinch ({id})"'   Method = PIDType.CXD' Moves = new[] { 223' 093' 247' 197 }' Fateful = true }' // Meditite @ Pyrite Town                      new WC3 { Species = 213' Level = 20' Language = l' Location = 116' TID = 37149' SID = -1' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.XD'   CardTitle = $"Trade Surskit ({id})"'    Method = PIDType.CXD' Moves = new[] { 092' 164' 188' 277 }' Fateful = true }' // Shuckle @ Pyrite Town                      new WC3 { Species = 246' Level = 20' Language = l' Location = 116' TID = 37149' SID = -1' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.XD'   CardTitle = $"Trade Wooper ({id})"'     Method = PIDType.CXD' Moves = new[] { 201' 349' 044' 200 }' Fateful = true }' // Larvitar @ Pyrite Town                      new WC3 { Species = 311' Level = 13' Language = l' Location = 254' TID = 37149' SID =  0' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.COLO' CardTitle = $"Special Gift ({id})"'     Method = PIDType.CXD' Moves = new[] { 045' 086' 098' 270 }' Shiny = Shiny.Never }' // Plusle @ Ingame Trade                      new WC3 { Species = 250' Level = 70' Language = l' Location = 255' TID = 10048' SID =  0' OT_Gender = 0' OT_Name = m[l]' Version = GameVersion.S'    CardTitle = $"Mt. Battle Ho-Oh ({id})"' Method = PIDType.CXD' Moves = new[] { 105' 126' 241' 129 }' Shiny = Shiny.Never }' // Ho-oh @ Mt. Battle                  };
Magic Number,PKHeX.Core,EncountersWC3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\EncountersWC3.cs,GetIngameCXDData,The following statement contains a magic number: return new[]                  {                      new WC3 { Species = 239' Level = 20' Language = l' Location = 164' TID = 41400' SID = -1' OT_Gender = 0' OT_Name = h[l]' Version = GameVersion.XD'   CardTitle = $"Trade Togepi ({id})"'     Method = PIDType.CXD' Moves = new[] { 008' 007' 009' 238 }' Fateful = true }' // Elekid @ Snagem Hideout                      new WC3 { Species = 307' Level = 20' Language = l' Location = 116' TID = 37149' SID = -1' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.XD'   CardTitle = $"Trade Trapinch ({id})"'   Method = PIDType.CXD' Moves = new[] { 223' 093' 247' 197 }' Fateful = true }' // Meditite @ Pyrite Town                      new WC3 { Species = 213' Level = 20' Language = l' Location = 116' TID = 37149' SID = -1' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.XD'   CardTitle = $"Trade Surskit ({id})"'    Method = PIDType.CXD' Moves = new[] { 092' 164' 188' 277 }' Fateful = true }' // Shuckle @ Pyrite Town                      new WC3 { Species = 246' Level = 20' Language = l' Location = 116' TID = 37149' SID = -1' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.XD'   CardTitle = $"Trade Wooper ({id})"'     Method = PIDType.CXD' Moves = new[] { 201' 349' 044' 200 }' Fateful = true }' // Larvitar @ Pyrite Town                      new WC3 { Species = 311' Level = 13' Language = l' Location = 254' TID = 37149' SID =  0' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.COLO' CardTitle = $"Special Gift ({id})"'     Method = PIDType.CXD' Moves = new[] { 045' 086' 098' 270 }' Shiny = Shiny.Never }' // Plusle @ Ingame Trade                      new WC3 { Species = 250' Level = 70' Language = l' Location = 255' TID = 10048' SID =  0' OT_Gender = 0' OT_Name = m[l]' Version = GameVersion.S'    CardTitle = $"Mt. Battle Ho-Oh ({id})"' Method = PIDType.CXD' Moves = new[] { 105' 126' 241' 129 }' Shiny = Shiny.Never }' // Ho-oh @ Mt. Battle                  };
Magic Number,PKHeX.Core,EncountersWC3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\EncountersWC3.cs,GetIngameCXDData,The following statement contains a magic number: return new[]                  {                      new WC3 { Species = 239' Level = 20' Language = l' Location = 164' TID = 41400' SID = -1' OT_Gender = 0' OT_Name = h[l]' Version = GameVersion.XD'   CardTitle = $"Trade Togepi ({id})"'     Method = PIDType.CXD' Moves = new[] { 008' 007' 009' 238 }' Fateful = true }' // Elekid @ Snagem Hideout                      new WC3 { Species = 307' Level = 20' Language = l' Location = 116' TID = 37149' SID = -1' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.XD'   CardTitle = $"Trade Trapinch ({id})"'   Method = PIDType.CXD' Moves = new[] { 223' 093' 247' 197 }' Fateful = true }' // Meditite @ Pyrite Town                      new WC3 { Species = 213' Level = 20' Language = l' Location = 116' TID = 37149' SID = -1' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.XD'   CardTitle = $"Trade Surskit ({id})"'    Method = PIDType.CXD' Moves = new[] { 092' 164' 188' 277 }' Fateful = true }' // Shuckle @ Pyrite Town                      new WC3 { Species = 246' Level = 20' Language = l' Location = 116' TID = 37149' SID = -1' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.XD'   CardTitle = $"Trade Wooper ({id})"'     Method = PIDType.CXD' Moves = new[] { 201' 349' 044' 200 }' Fateful = true }' // Larvitar @ Pyrite Town                      new WC3 { Species = 311' Level = 13' Language = l' Location = 254' TID = 37149' SID =  0' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.COLO' CardTitle = $"Special Gift ({id})"'     Method = PIDType.CXD' Moves = new[] { 045' 086' 098' 270 }' Shiny = Shiny.Never }' // Plusle @ Ingame Trade                      new WC3 { Species = 250' Level = 70' Language = l' Location = 255' TID = 10048' SID =  0' OT_Gender = 0' OT_Name = m[l]' Version = GameVersion.S'    CardTitle = $"Mt. Battle Ho-Oh ({id})"' Method = PIDType.CXD' Moves = new[] { 105' 126' 241' 129 }' Shiny = Shiny.Never }' // Ho-oh @ Mt. Battle                  };
Magic Number,PKHeX.Core,EncountersWC3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\EncountersWC3.cs,GetIngameCXDData,The following statement contains a magic number: return new[]                  {                      new WC3 { Species = 239' Level = 20' Language = l' Location = 164' TID = 41400' SID = -1' OT_Gender = 0' OT_Name = h[l]' Version = GameVersion.XD'   CardTitle = $"Trade Togepi ({id})"'     Method = PIDType.CXD' Moves = new[] { 008' 007' 009' 238 }' Fateful = true }' // Elekid @ Snagem Hideout                      new WC3 { Species = 307' Level = 20' Language = l' Location = 116' TID = 37149' SID = -1' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.XD'   CardTitle = $"Trade Trapinch ({id})"'   Method = PIDType.CXD' Moves = new[] { 223' 093' 247' 197 }' Fateful = true }' // Meditite @ Pyrite Town                      new WC3 { Species = 213' Level = 20' Language = l' Location = 116' TID = 37149' SID = -1' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.XD'   CardTitle = $"Trade Surskit ({id})"'    Method = PIDType.CXD' Moves = new[] { 092' 164' 188' 277 }' Fateful = true }' // Shuckle @ Pyrite Town                      new WC3 { Species = 246' Level = 20' Language = l' Location = 116' TID = 37149' SID = -1' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.XD'   CardTitle = $"Trade Wooper ({id})"'     Method = PIDType.CXD' Moves = new[] { 201' 349' 044' 200 }' Fateful = true }' // Larvitar @ Pyrite Town                      new WC3 { Species = 311' Level = 13' Language = l' Location = 254' TID = 37149' SID =  0' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.COLO' CardTitle = $"Special Gift ({id})"'     Method = PIDType.CXD' Moves = new[] { 045' 086' 098' 270 }' Shiny = Shiny.Never }' // Plusle @ Ingame Trade                      new WC3 { Species = 250' Level = 70' Language = l' Location = 255' TID = 10048' SID =  0' OT_Gender = 0' OT_Name = m[l]' Version = GameVersion.S'    CardTitle = $"Mt. Battle Ho-Oh ({id})"' Method = PIDType.CXD' Moves = new[] { 105' 126' 241' 129 }' Shiny = Shiny.Never }' // Ho-oh @ Mt. Battle                  };
Magic Number,PKHeX.Core,EncountersWC3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\EncountersWC3.cs,GetIngameCXDData,The following statement contains a magic number: return new[]                  {                      new WC3 { Species = 239' Level = 20' Language = l' Location = 164' TID = 41400' SID = -1' OT_Gender = 0' OT_Name = h[l]' Version = GameVersion.XD'   CardTitle = $"Trade Togepi ({id})"'     Method = PIDType.CXD' Moves = new[] { 008' 007' 009' 238 }' Fateful = true }' // Elekid @ Snagem Hideout                      new WC3 { Species = 307' Level = 20' Language = l' Location = 116' TID = 37149' SID = -1' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.XD'   CardTitle = $"Trade Trapinch ({id})"'   Method = PIDType.CXD' Moves = new[] { 223' 093' 247' 197 }' Fateful = true }' // Meditite @ Pyrite Town                      new WC3 { Species = 213' Level = 20' Language = l' Location = 116' TID = 37149' SID = -1' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.XD'   CardTitle = $"Trade Surskit ({id})"'    Method = PIDType.CXD' Moves = new[] { 092' 164' 188' 277 }' Fateful = true }' // Shuckle @ Pyrite Town                      new WC3 { Species = 246' Level = 20' Language = l' Location = 116' TID = 37149' SID = -1' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.XD'   CardTitle = $"Trade Wooper ({id})"'     Method = PIDType.CXD' Moves = new[] { 201' 349' 044' 200 }' Fateful = true }' // Larvitar @ Pyrite Town                      new WC3 { Species = 311' Level = 13' Language = l' Location = 254' TID = 37149' SID =  0' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.COLO' CardTitle = $"Special Gift ({id})"'     Method = PIDType.CXD' Moves = new[] { 045' 086' 098' 270 }' Shiny = Shiny.Never }' // Plusle @ Ingame Trade                      new WC3 { Species = 250' Level = 70' Language = l' Location = 255' TID = 10048' SID =  0' OT_Gender = 0' OT_Name = m[l]' Version = GameVersion.S'    CardTitle = $"Mt. Battle Ho-Oh ({id})"' Method = PIDType.CXD' Moves = new[] { 105' 126' 241' 129 }' Shiny = Shiny.Never }' // Ho-oh @ Mt. Battle                  };
Magic Number,PKHeX.Core,EncountersWC3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\EncountersWC3.cs,GetIngameCXDData,The following statement contains a magic number: return new[]                  {                      new WC3 { Species = 239' Level = 20' Language = l' Location = 164' TID = 41400' SID = -1' OT_Gender = 0' OT_Name = h[l]' Version = GameVersion.XD'   CardTitle = $"Trade Togepi ({id})"'     Method = PIDType.CXD' Moves = new[] { 008' 007' 009' 238 }' Fateful = true }' // Elekid @ Snagem Hideout                      new WC3 { Species = 307' Level = 20' Language = l' Location = 116' TID = 37149' SID = -1' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.XD'   CardTitle = $"Trade Trapinch ({id})"'   Method = PIDType.CXD' Moves = new[] { 223' 093' 247' 197 }' Fateful = true }' // Meditite @ Pyrite Town                      new WC3 { Species = 213' Level = 20' Language = l' Location = 116' TID = 37149' SID = -1' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.XD'   CardTitle = $"Trade Surskit ({id})"'    Method = PIDType.CXD' Moves = new[] { 092' 164' 188' 277 }' Fateful = true }' // Shuckle @ Pyrite Town                      new WC3 { Species = 246' Level = 20' Language = l' Location = 116' TID = 37149' SID = -1' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.XD'   CardTitle = $"Trade Wooper ({id})"'     Method = PIDType.CXD' Moves = new[] { 201' 349' 044' 200 }' Fateful = true }' // Larvitar @ Pyrite Town                      new WC3 { Species = 311' Level = 13' Language = l' Location = 254' TID = 37149' SID =  0' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.COLO' CardTitle = $"Special Gift ({id})"'     Method = PIDType.CXD' Moves = new[] { 045' 086' 098' 270 }' Shiny = Shiny.Never }' // Plusle @ Ingame Trade                      new WC3 { Species = 250' Level = 70' Language = l' Location = 255' TID = 10048' SID =  0' OT_Gender = 0' OT_Name = m[l]' Version = GameVersion.S'    CardTitle = $"Mt. Battle Ho-Oh ({id})"' Method = PIDType.CXD' Moves = new[] { 105' 126' 241' 129 }' Shiny = Shiny.Never }' // Ho-oh @ Mt. Battle                  };
Magic Number,PKHeX.Core,EncountersWC3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\EncountersWC3.cs,GetIngameCXDData,The following statement contains a magic number: return new[]                  {                      new WC3 { Species = 239' Level = 20' Language = l' Location = 164' TID = 41400' SID = -1' OT_Gender = 0' OT_Name = h[l]' Version = GameVersion.XD'   CardTitle = $"Trade Togepi ({id})"'     Method = PIDType.CXD' Moves = new[] { 008' 007' 009' 238 }' Fateful = true }' // Elekid @ Snagem Hideout                      new WC3 { Species = 307' Level = 20' Language = l' Location = 116' TID = 37149' SID = -1' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.XD'   CardTitle = $"Trade Trapinch ({id})"'   Method = PIDType.CXD' Moves = new[] { 223' 093' 247' 197 }' Fateful = true }' // Meditite @ Pyrite Town                      new WC3 { Species = 213' Level = 20' Language = l' Location = 116' TID = 37149' SID = -1' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.XD'   CardTitle = $"Trade Surskit ({id})"'    Method = PIDType.CXD' Moves = new[] { 092' 164' 188' 277 }' Fateful = true }' // Shuckle @ Pyrite Town                      new WC3 { Species = 246' Level = 20' Language = l' Location = 116' TID = 37149' SID = -1' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.XD'   CardTitle = $"Trade Wooper ({id})"'     Method = PIDType.CXD' Moves = new[] { 201' 349' 044' 200 }' Fateful = true }' // Larvitar @ Pyrite Town                      new WC3 { Species = 311' Level = 13' Language = l' Location = 254' TID = 37149' SID =  0' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.COLO' CardTitle = $"Special Gift ({id})"'     Method = PIDType.CXD' Moves = new[] { 045' 086' 098' 270 }' Shiny = Shiny.Never }' // Plusle @ Ingame Trade                      new WC3 { Species = 250' Level = 70' Language = l' Location = 255' TID = 10048' SID =  0' OT_Gender = 0' OT_Name = m[l]' Version = GameVersion.S'    CardTitle = $"Mt. Battle Ho-Oh ({id})"' Method = PIDType.CXD' Moves = new[] { 105' 126' 241' 129 }' Shiny = Shiny.Never }' // Ho-oh @ Mt. Battle                  };
Magic Number,PKHeX.Core,EncountersWC3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\EncountersWC3.cs,GetIngameCXDData,The following statement contains a magic number: return new[]                  {                      new WC3 { Species = 239' Level = 20' Language = l' Location = 164' TID = 41400' SID = -1' OT_Gender = 0' OT_Name = h[l]' Version = GameVersion.XD'   CardTitle = $"Trade Togepi ({id})"'     Method = PIDType.CXD' Moves = new[] { 008' 007' 009' 238 }' Fateful = true }' // Elekid @ Snagem Hideout                      new WC3 { Species = 307' Level = 20' Language = l' Location = 116' TID = 37149' SID = -1' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.XD'   CardTitle = $"Trade Trapinch ({id})"'   Method = PIDType.CXD' Moves = new[] { 223' 093' 247' 197 }' Fateful = true }' // Meditite @ Pyrite Town                      new WC3 { Species = 213' Level = 20' Language = l' Location = 116' TID = 37149' SID = -1' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.XD'   CardTitle = $"Trade Surskit ({id})"'    Method = PIDType.CXD' Moves = new[] { 092' 164' 188' 277 }' Fateful = true }' // Shuckle @ Pyrite Town                      new WC3 { Species = 246' Level = 20' Language = l' Location = 116' TID = 37149' SID = -1' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.XD'   CardTitle = $"Trade Wooper ({id})"'     Method = PIDType.CXD' Moves = new[] { 201' 349' 044' 200 }' Fateful = true }' // Larvitar @ Pyrite Town                      new WC3 { Species = 311' Level = 13' Language = l' Location = 254' TID = 37149' SID =  0' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.COLO' CardTitle = $"Special Gift ({id})"'     Method = PIDType.CXD' Moves = new[] { 045' 086' 098' 270 }' Shiny = Shiny.Never }' // Plusle @ Ingame Trade                      new WC3 { Species = 250' Level = 70' Language = l' Location = 255' TID = 10048' SID =  0' OT_Gender = 0' OT_Name = m[l]' Version = GameVersion.S'    CardTitle = $"Mt. Battle Ho-Oh ({id})"' Method = PIDType.CXD' Moves = new[] { 105' 126' 241' 129 }' Shiny = Shiny.Never }' // Ho-oh @ Mt. Battle                  };
Magic Number,PKHeX.Core,EncountersWC3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\EncountersWC3.cs,GetIngameCXDData,The following statement contains a magic number: return new[]                  {                      new WC3 { Species = 239' Level = 20' Language = l' Location = 164' TID = 41400' SID = -1' OT_Gender = 0' OT_Name = h[l]' Version = GameVersion.XD'   CardTitle = $"Trade Togepi ({id})"'     Method = PIDType.CXD' Moves = new[] { 008' 007' 009' 238 }' Fateful = true }' // Elekid @ Snagem Hideout                      new WC3 { Species = 307' Level = 20' Language = l' Location = 116' TID = 37149' SID = -1' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.XD'   CardTitle = $"Trade Trapinch ({id})"'   Method = PIDType.CXD' Moves = new[] { 223' 093' 247' 197 }' Fateful = true }' // Meditite @ Pyrite Town                      new WC3 { Species = 213' Level = 20' Language = l' Location = 116' TID = 37149' SID = -1' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.XD'   CardTitle = $"Trade Surskit ({id})"'    Method = PIDType.CXD' Moves = new[] { 092' 164' 188' 277 }' Fateful = true }' // Shuckle @ Pyrite Town                      new WC3 { Species = 246' Level = 20' Language = l' Location = 116' TID = 37149' SID = -1' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.XD'   CardTitle = $"Trade Wooper ({id})"'     Method = PIDType.CXD' Moves = new[] { 201' 349' 044' 200 }' Fateful = true }' // Larvitar @ Pyrite Town                      new WC3 { Species = 311' Level = 13' Language = l' Location = 254' TID = 37149' SID =  0' OT_Gender = 0' OT_Name = d[l]' Version = GameVersion.COLO' CardTitle = $"Special Gift ({id})"'     Method = PIDType.CXD' Moves = new[] { 045' 086' 098' 270 }' Shiny = Shiny.Never }' // Plusle @ Ingame Trade                      new WC3 { Species = 250' Level = 70' Language = l' Location = 255' TID = 10048' SID =  0' OT_Gender = 0' OT_Name = m[l]' Version = GameVersion.S'    CardTitle = $"Mt. Battle Ho-Oh ({id})"' Method = PIDType.CXD' Moves = new[] { 105' 126' 241' 129 }' Shiny = Shiny.Never }' // Ho-oh @ Mt. Battle                  };
Magic Number,PKHeX.Core,EncounterUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\EncounterUtil.cs,DreamRadarClone,The following statement contains a magic number: yield return s.DreamRadarClone((5 * i) + 5);
Magic Number,PKHeX.Core,EncounterUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\EncounterUtil.cs,DreamRadarClone,The following statement contains a magic number: yield return s.DreamRadarClone((5 * i) + 5);
Magic Number,PKHeX.Core,EncounterUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\EncounterUtil.cs,DreamRadarClone,The following statement contains a magic number: i < 8
Magic Number,PKHeX.Core,EncounterUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\EncounterUtil.cs,DreamRadarClone,The following statement contains a magic number: result.Location = 30015;
Magic Number,PKHeX.Core,EncounterUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\EncounterUtil.cs,DreamRadarClone,The following statement contains a magic number: result.Ball = 25;
Magic Number,PKHeX.Core,EncounterUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\EncounterUtil.cs,MarkEncounterTradeStrings,The following statement contains a magic number: int half = strings[1].Length / 2;
Magic Number,PKHeX.Core,EncounterEgg,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\EncounterEgg.cs,ConvertToPKM,The following statement contains a magic number: gen = 2;
Magic Number,PKHeX.Core,EncounterEgg,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\EncounterEgg.cs,ConvertToPKM,The following statement contains a magic number: gen < 2
Magic Number,PKHeX.Core,EncounterEgg,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\EncounterEgg.cs,ConvertToPKM,The following statement contains a magic number: pk.Ball = 4;
Magic Number,PKHeX.Core,EncounterEgg,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\EncounterEgg.cs,ConvertToPKM,The following statement contains a magic number: pk.Format <= 2 && version != GameVersion.C
Magic Number,PKHeX.Core,EncounterEgg,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\EncounterEgg.cs,ConvertToPKM,The following statement contains a magic number: pk.Format < 3
Magic Number,PKHeX.Core,EncounterEgg,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\EncounterEgg.cs,ConvertToPKM,The following statement contains a magic number: pk.GenNumber >= 4
Magic Number,PKHeX.Core,EncounterEgg,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\EncounterEgg.cs,ConvertToPKM,The following statement contains a magic number: pk.Format < 6
Magic Number,PKHeX.Core,EncounterEgg,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\EncounterEgg.cs,ConvertToPKM,The following statement contains a magic number: pk.Format == 6
Magic Number,PKHeX.Core,EncounterEgg,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\EncounterEgg.cs,SetAltForm,The following statement contains a magic number: switch (Species)              {                  case (int)Core.Species.Minior:                      pk.AltForm = Util.Rand.Next(7' 14);                      break;                  case (int)Core.Species.Scatterbug:                  case (int)Core.Species.Spewpa:                  case (int)Core.Species.Vivillon:                      pk.AltForm = Legal.GetVivillonPattern((byte)SAV.Country' (byte)SAV.SubRegion);                      break;              }
Magic Number,PKHeX.Core,EncounterEgg,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\EncounterEgg.cs,SetAltForm,The following statement contains a magic number: switch (Species)              {                  case (int)Core.Species.Minior:                      pk.AltForm = Util.Rand.Next(7' 14);                      break;                  case (int)Core.Species.Scatterbug:                  case (int)Core.Species.Spewpa:                  case (int)Core.Species.Vivillon:                      pk.AltForm = Legal.GetVivillonPattern((byte)SAV.Country' (byte)SAV.SubRegion);                      break;              }
Magic Number,PKHeX.Core,EncounterEgg,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\EncounterEgg.cs,SetPINGA,The following statement contains a magic number: pk.SetRandomIVs(flawless: 3);
Magic Number,PKHeX.Core,EncounterEgg,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\EncounterEgg.cs,SetPINGA,The following statement contains a magic number: pk.Format <= 2
Magic Number,PKHeX.Core,EncounterEgg,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\EncounterEgg.cs,SetPINGA,The following statement contains a magic number: pk.Format <= 5
Magic Number,PKHeX.Core,EncounterEgg,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\EncounterEgg.cs,GetCurrentEggMoves,The following statement contains a magic number: moves.Length >= 4 || pk.Format < 6
Magic Number,PKHeX.Core,EncounterEgg,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\EncounterEgg.cs,GetCurrentEggMoves,The following statement contains a magic number: moves.Length >= 4 || pk.Format < 6
Magic Number,PKHeX.Core,EncounterSlot,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\EncounterSlot.cs,ConvertToPKM,The following statement contains a magic number: pk.Format < 6
Magic Number,PKHeX.Core,EncounterSlot,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\EncounterSlot.cs,SetFormatSpecificData,The following statement contains a magic number: pk1.Catch_Rate = 96;
Magic Number,PKHeX.Core,EncounterSlot,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\EncounterSlot.cs,SetFormatSpecificData,The following statement contains a magic number: Species == 64 && Version == GameVersion.YW
Magic Number,PKHeX.Core,EncounterSlot,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\EncounterSlot.cs,SetPINGA,The following statement contains a magic number: var ability = Util.Rand.Next(2);
Magic Number,PKHeX.Core,EncounterSlot,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\EncounterSlot.cs,SetPINGA,The following statement contains a magic number: ability = 2;
Magic Number,PKHeX.Core,EncounterSlot,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\EncounterSlot.cs,SetMetData,The following statement contains a magic number: pk.Format <= 2 && Version != GameVersion.C
Magic Number,PKHeX.Core,EncounterSlot,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\EncounterSlot.cs,SetMetData,The following statement contains a magic number: pk.Format >= 4
Magic Number,PKHeX.Core,EncounterSlot,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\EncounterSlot.cs,GetWildAltForm,The following statement contains a magic number: return Util.Rand.Next(7' 14);
Magic Number,PKHeX.Core,EncounterSlot,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\EncounterSlot.cs,GetWildAltForm,The following statement contains a magic number: return Util.Rand.Next(7' 14);
Magic Number,PKHeX.Core,EncounterSlot,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\EncounterSlot.cs,GetWildAltForm,The following statement contains a magic number: form < 30
Magic Number,PKHeX.Core,EncounterSlot,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\EncounterSlot.cs,GetWildAltForm,The following statement contains a magic number: form == 31
Magic Number,PKHeX.Core,EncounterStatic,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\EncounterStatic.cs,ConvertToPKM,The following statement contains a magic number: pk.Format < 6
Magic Number,PKHeX.Core,EncounterStatic,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\EncounterStatic.cs,GetRandomAbility,The following statement contains a magic number: return Ability switch              {                   0 => Util.Rand.Next(2)'                  -1 => Util.Rand.Next(3)'                  _ => (Ability >> 1)              };
Magic Number,PKHeX.Core,EncounterStatic,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\EncounterStatic.cs,GetRandomAbility,The following statement contains a magic number: return Ability switch              {                   0 => Util.Rand.Next(2)'                  -1 => Util.Rand.Next(3)'                  _ => (Ability >> 1)              };
Magic Number,PKHeX.Core,EncounterStatic,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\EncounterStatic.cs,SetEggMetData,The following statement contains a magic number: Generation >= 4
Magic Number,PKHeX.Core,EncounterStatic,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\EncounterStatic.cs,SetMetData,The following statement contains a magic number: pk.Format >= 4
Magic Number,PKHeX.Core,EncounterStatic,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\EncounterStatic.cs,SetMetData,The following statement contains a magic number: pk.Format > 2 || Version == GameVersion.C
Magic Number,PKHeX.Core,EncounterStatic,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\EncounterStatic.cs,SanityCheckVersion,The following statement contains a magic number: Generation != 4 || version == GameVersion.Pt
Magic Number,PKHeX.Core,EncounterStatic,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\EncounterStatic.cs,SanityCheckVersion,The following statement contains a magic number: switch (Species)              {                  case (int)Core.Species.Darkrai when Location == 079: // DP Darkrai                  case (int)Core.Species.Shaymin when Location == 063: // DP Shaymin                      version = GameVersion.Pt;                      return;              }
Magic Number,PKHeX.Core,EncounterStatic,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\EncounterStatic.cs,SanityCheckVersion,The following statement contains a magic number: switch (Species)              {                  case (int)Core.Species.Darkrai when Location == 079: // DP Darkrai                  case (int)Core.Species.Shaymin when Location == 063: // DP Shaymin                      version = GameVersion.Pt;                      return;              }
Magic Number,PKHeX.Core,EncounterStatic,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\EncounterStatic.cs,GetEdgeCaseLanguage,The following statement contains a magic number: switch (pk.Format)              {                  case 1 when Species == (int)Core.Species.Mew && Version == GameVersion.VCEvents: // VC Mew                      pk.TID = 22796;                      pk.OT_Name = Legal.GetG1OT_GFMew(lang);                      return lang;                  case 1 when Version == GameVersion.EventsGBGen1:                  case 2 when Version == GameVersion.EventsGBGen2:                  case 3 when this is EncounterStaticShadow s && s.EReader:                  case 3 when Species == (int)Core.Species.Mew:                      pk.OT_Name = "ゲーフリ";                      return (int)LanguageID.Japanese; // Old Sea Map was only distributed to Japanese games.                    default:                      return lang;              }
Magic Number,PKHeX.Core,EncounterStatic,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\EncounterStatic.cs,GetEdgeCaseLanguage,The following statement contains a magic number: switch (pk.Format)              {                  case 1 when Species == (int)Core.Species.Mew && Version == GameVersion.VCEvents: // VC Mew                      pk.TID = 22796;                      pk.OT_Name = Legal.GetG1OT_GFMew(lang);                      return lang;                  case 1 when Version == GameVersion.EventsGBGen1:                  case 2 when Version == GameVersion.EventsGBGen2:                  case 3 when this is EncounterStaticShadow s && s.EReader:                  case 3 when Species == (int)Core.Species.Mew:                      pk.OT_Name = "ゲーフリ";                      return (int)LanguageID.Japanese; // Old Sea Map was only distributed to Japanese games.                    default:                      return lang;              }
Magic Number,PKHeX.Core,EncounterStatic,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\EncounterStatic.cs,GetEdgeCaseLanguage,The following statement contains a magic number: switch (pk.Format)              {                  case 1 when Species == (int)Core.Species.Mew && Version == GameVersion.VCEvents: // VC Mew                      pk.TID = 22796;                      pk.OT_Name = Legal.GetG1OT_GFMew(lang);                      return lang;                  case 1 when Version == GameVersion.EventsGBGen1:                  case 2 when Version == GameVersion.EventsGBGen2:                  case 3 when this is EncounterStaticShadow s && s.EReader:                  case 3 when Species == (int)Core.Species.Mew:                      pk.OT_Name = "ゲーフリ";                      return (int)LanguageID.Japanese; // Old Sea Map was only distributed to Japanese games.                    default:                      return lang;              }
Magic Number,PKHeX.Core,EncounterStatic,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\EncounterStatic.cs,GetEdgeCaseLanguage,The following statement contains a magic number: switch (pk.Format)              {                  case 1 when Species == (int)Core.Species.Mew && Version == GameVersion.VCEvents: // VC Mew                      pk.TID = 22796;                      pk.OT_Name = Legal.GetG1OT_GFMew(lang);                      return lang;                  case 1 when Version == GameVersion.EventsGBGen1:                  case 2 when Version == GameVersion.EventsGBGen2:                  case 3 when this is EncounterStaticShadow s && s.EReader:                  case 3 when Species == (int)Core.Species.Mew:                      pk.OT_Name = "ゲーフリ";                      return (int)LanguageID.Japanese; // Old Sea Map was only distributed to Japanese games.                    default:                      return lang;              }
Magic Number,PKHeX.Core,EncounterStatic,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\EncounterStatic.cs,GetPIDType,The following statement contains a magic number: switch (Generation)              {                  case 3 when Roaming && Version != GameVersion.E: // Roamer IV glitch was fixed in Emerald                      return PIDType.Method_1_Roamer;                  case 4 when Shiny == Shiny.Always: // Lake of Rage Gyarados                      return PIDType.ChainShiny;                  case 4 when Species == (int)Core.Species.Pichu: // Spiky Eared Pichu                  case 4 when Location == Locations.PokeWalker4: // Pokéwalker                      return PIDType.Pokewalker;                  case 5 when Shiny == Shiny.Always:                      return PIDType.G5MGShiny;                    default: return PIDType.None;              }
Magic Number,PKHeX.Core,EncounterStatic,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\EncounterStatic.cs,GetPIDType,The following statement contains a magic number: switch (Generation)              {                  case 3 when Roaming && Version != GameVersion.E: // Roamer IV glitch was fixed in Emerald                      return PIDType.Method_1_Roamer;                  case 4 when Shiny == Shiny.Always: // Lake of Rage Gyarados                      return PIDType.ChainShiny;                  case 4 when Species == (int)Core.Species.Pichu: // Spiky Eared Pichu                  case 4 when Location == Locations.PokeWalker4: // Pokéwalker                      return PIDType.Pokewalker;                  case 5 when Shiny == Shiny.Always:                      return PIDType.G5MGShiny;                    default: return PIDType.None;              }
Magic Number,PKHeX.Core,EncounterStatic,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\EncounterStatic.cs,GetPIDType,The following statement contains a magic number: switch (Generation)              {                  case 3 when Roaming && Version != GameVersion.E: // Roamer IV glitch was fixed in Emerald                      return PIDType.Method_1_Roamer;                  case 4 when Shiny == Shiny.Always: // Lake of Rage Gyarados                      return PIDType.ChainShiny;                  case 4 when Species == (int)Core.Species.Pichu: // Spiky Eared Pichu                  case 4 when Location == Locations.PokeWalker4: // Pokéwalker                      return PIDType.Pokewalker;                  case 5 when Shiny == Shiny.Always:                      return PIDType.G5MGShiny;                    default: return PIDType.None;              }
Magic Number,PKHeX.Core,EncounterStatic,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\EncounterStatic.cs,GetPIDType,The following statement contains a magic number: switch (Generation)              {                  case 3 when Roaming && Version != GameVersion.E: // Roamer IV glitch was fixed in Emerald                      return PIDType.Method_1_Roamer;                  case 4 when Shiny == Shiny.Always: // Lake of Rage Gyarados                      return PIDType.ChainShiny;                  case 4 when Species == (int)Core.Species.Pichu: // Spiky Eared Pichu                  case 4 when Location == Locations.PokeWalker4: // Pokéwalker                      return PIDType.Pokewalker;                  case 5 when Shiny == Shiny.Always:                      return PIDType.G5MGShiny;                    default: return PIDType.None;              }
Magic Number,PKHeX.Core,EncounterStatic,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\EncounterStatic.cs,GetPIDType,The following statement contains a magic number: switch (Generation)              {                  case 3 when Roaming && Version != GameVersion.E: // Roamer IV glitch was fixed in Emerald                      return PIDType.Method_1_Roamer;                  case 4 when Shiny == Shiny.Always: // Lake of Rage Gyarados                      return PIDType.ChainShiny;                  case 4 when Species == (int)Core.Species.Pichu: // Spiky Eared Pichu                  case 4 when Location == Locations.PokeWalker4: // Pokéwalker                      return PIDType.Pokewalker;                  case 5 when Shiny == Shiny.Always:                      return PIDType.G5MGShiny;                    default: return PIDType.None;              }
Magic Number,PKHeX.Core,EncounterStatic,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\EncounterStatic.cs,IsMatch,The following statement contains a magic number: Generation > 3 && pkm.Format > 3 && pkm.WasEgg != EggEncounter && pkm.Egg_Location == 0 && !pkm.IsEgg
Magic Number,PKHeX.Core,EncounterStatic,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\EncounterStatic.cs,IsMatch,The following statement contains a magic number: Generation > 3 && pkm.Format > 3 && pkm.WasEgg != EggEncounter && pkm.Egg_Location == 0 && !pkm.IsEgg
Magic Number,PKHeX.Core,EncounterStatic,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\EncounterStatic.cs,IsMatchIVs,The following statement contains a magic number: Generation <= 2 && pkm.Format > 2
Magic Number,PKHeX.Core,EncounterStatic,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\EncounterStatic.cs,IsMatchIVs,The following statement contains a magic number: Generation <= 2 && pkm.Format > 2
Magic Number,PKHeX.Core,EncounterStatic,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\EncounterStatic.cs,IsMatchEggLocation,The following statement contains a magic number: pkm.Format == 3 && pkm.IsEgg && EggLocation != pkm.Met_Location
Magic Number,PKHeX.Core,EncounterStatic,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\EncounterStatic.cs,IsMatchEggLocation,The following statement contains a magic number: Generation == 3 && EggLocation != 0
Magic Number,PKHeX.Core,EncounterStatic,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\EncounterStatic.cs,IsMatchGender,The following statement contains a magic number: Species == (int) Core.Species.Azurill && Generation == 4 && Location == 233 && pkm.Gender == 0
Magic Number,PKHeX.Core,EncounterStatic,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\EncounterStatic.cs,IsMatchGender,The following statement contains a magic number: Species == (int) Core.Species.Azurill && Generation == 4 && Location == 233 && pkm.Gender == 0
Magic Number,PKHeX.Core,EncounterStatic,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\EncounterStatic.cs,IsMatchLevel,The following statement contains a magic number: !(pkm.Format == 3 && EggEncounter && lvl == 0)
Magic Number,PKHeX.Core,EncounterStatic,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\EncounterStatic.cs,IsMatchDeferred,The following statement contains a magic number: Ability == 4 && pkm.AbilityNumber != 4
Magic Number,PKHeX.Core,EncounterStatic,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\EncounterStatic.cs,IsMatchDeferred,The following statement contains a magic number: Ability == 4 && pkm.AbilityNumber != 4
Magic Number,PKHeX.Core,EncounterStatic8,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\EncounterStatic8.cs,IsMatchLevel,The following statement contains a magic number: return lvl == 60;
Magic Number,PKHeX.Core,EncounterStatic8N,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\EncounterStatic8N.cs,IsMatchLevel,The following statement contains a magic number: var metLevel = pkm.Met_Level - 15;
Magic Number,PKHeX.Core,EncounterStatic8N,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\EncounterStatic8N.cs,IsMatchLevel,The following statement contains a magic number: var rank = (uint)(metLevel / 10);
Magic Number,PKHeX.Core,EncounterStatic8N,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\EncounterStatic8N.cs,IsMatchLevel,The following statement contains a magic number: rank > 4
Magic Number,PKHeX.Core,EncounterStatic8N,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\EncounterStatic8N.cs,IsMatchLevel,The following statement contains a magic number: return metLevel % 10 <= 5;
Magic Number,PKHeX.Core,EncounterStatic8N,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\EncounterStatic8N.cs,IsMatchLevel,The following statement contains a magic number: return metLevel % 10 <= 5;
Magic Number,PKHeX.Core,EncounterStatic8N,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\EncounterStatic8N.cs,IsMatchLocation,The following statement contains a magic number: return loc == SharedNest || (loc <= 255 && NestLocations.Contains((byte)loc));
Magic Number,PKHeX.Core,EncounterStatic8N,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\EncounterStatic8N.cs,IsMatchDeferred,The following statement contains a magic number: Ability != A4 && pkm.AbilityNumber == 4
Magic Number,PKHeX.Core,EncounterStatic8NC,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\EncounterStatic8NC.cs,IsMatchDeferred,The following statement contains a magic number: Ability != A4 && pkm.AbilityNumber == 4
Magic Number,PKHeX.Core,EncounterStatic8ND,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\EncounterStatic8ND.cs,IsMatchDeferred,The following statement contains a magic number: Ability != A4 && pkm.AbilityNumber == 4
Magic Number,PKHeX.Core,EncounterStaticPID,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\EncounterStaticPID.cs,SetPINGA,The following statement contains a magic number: int nature = (int)(PID % 25);
Magic Number,PKHeX.Core,EncounterStaticPID,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\EncounterStaticPID.cs,SetPINGA,The following statement contains a magic number: Generation >= 5
Magic Number,PKHeX.Core,EncounterStaticN,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\EncounterStaticPID.cs,SetNPokemonData,The following statement contains a magic number: pk5.IV_HP = pk5.IV_ATK = pk5.IV_DEF = pk5.IV_SPA = pk5.IV_SPD = pk5.IV_SPE = 30;
Magic Number,PKHeX.Core,EncounterStaticN,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\EncounterStaticPID.cs,SetNPokemonData,The following statement contains a magic number: pk5.TID = 00002;
Magic Number,PKHeX.Core,EncounterTrade,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\EncounterTrade.cs,ApplyDetails,The following statement contains a magic number: level = 25;
Magic Number,PKHeX.Core,EncounterTrade,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\EncounterTrade.cs,ApplyDetails,The following statement contains a magic number: pk.Format != 2 || version == GameVersion.C
Magic Number,PKHeX.Core,EncounterTrade,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\EncounterTrade.cs,ApplyDetails,The following statement contains a magic number: pk.Format < 6
Magic Number,PKHeX.Core,EncounterTrade,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\EncounterTrade.cs,ApplyDetails,The following statement contains a magic number: pk.Format == 6
Magic Number,PKHeX.Core,EncounterTrade,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\EncounterTrade.cs,UpdateEdgeCase,The following statement contains a magic number: switch (Generation)              {                  case 3 when Species == (int)Core.Species.Jynx && pkm.Version == (int) GameVersion.LG && pkm.Language == (int) LanguageID.Italian:                      // Italian LG Jynx untranslated from English name                      pkm.OT_Name = GetOT((int)LanguageID.English);                      pkm.SetNickname(GetNickname((int)LanguageID.English));                      break;                    case 4 when Version == GameVersion.DPPt && Species == (int)Core.Species.Magikarp: // Meister Magikarp                      // Has German Language ID for all except German origin' which is English                      pkm.Language = (int)(pkm.Language == (int)LanguageID.German ? LanguageID.English : LanguageID.German);                      break;                    case 4 when Version == GameVersion.DPPt && (pkm.Version == (int)GameVersion.D || pkm.Version == (int)GameVersion.P):                      // DP English origin are Japanese lang                      pkm.Language = (int)LanguageID.Japanese;                      break;                    case 4 when Version == GameVersion.HGSS && Species == (int)Core.Species.Pikachu: // Pikachu                      // Has English Language ID for all except English origin' which is French                      pkm.Language = (int)(pkm.Language == (int)LanguageID.English ? LanguageID.French : LanguageID.English);                      break;                    case 5 when Version == GameVersion.BW && pkm.Language == (int)LanguageID.Japanese:                      // Trades for JPN games have language ID of 0' not 1.                      pkm.Language = 0;                      break;              }
Magic Number,PKHeX.Core,EncounterTrade,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\EncounterTrade.cs,UpdateEdgeCase,The following statement contains a magic number: switch (Generation)              {                  case 3 when Species == (int)Core.Species.Jynx && pkm.Version == (int) GameVersion.LG && pkm.Language == (int) LanguageID.Italian:                      // Italian LG Jynx untranslated from English name                      pkm.OT_Name = GetOT((int)LanguageID.English);                      pkm.SetNickname(GetNickname((int)LanguageID.English));                      break;                    case 4 when Version == GameVersion.DPPt && Species == (int)Core.Species.Magikarp: // Meister Magikarp                      // Has German Language ID for all except German origin' which is English                      pkm.Language = (int)(pkm.Language == (int)LanguageID.German ? LanguageID.English : LanguageID.German);                      break;                    case 4 when Version == GameVersion.DPPt && (pkm.Version == (int)GameVersion.D || pkm.Version == (int)GameVersion.P):                      // DP English origin are Japanese lang                      pkm.Language = (int)LanguageID.Japanese;                      break;                    case 4 when Version == GameVersion.HGSS && Species == (int)Core.Species.Pikachu: // Pikachu                      // Has English Language ID for all except English origin' which is French                      pkm.Language = (int)(pkm.Language == (int)LanguageID.English ? LanguageID.French : LanguageID.English);                      break;                    case 5 when Version == GameVersion.BW && pkm.Language == (int)LanguageID.Japanese:                      // Trades for JPN games have language ID of 0' not 1.                      pkm.Language = 0;                      break;              }
Magic Number,PKHeX.Core,EncounterTrade,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\EncounterTrade.cs,UpdateEdgeCase,The following statement contains a magic number: switch (Generation)              {                  case 3 when Species == (int)Core.Species.Jynx && pkm.Version == (int) GameVersion.LG && pkm.Language == (int) LanguageID.Italian:                      // Italian LG Jynx untranslated from English name                      pkm.OT_Name = GetOT((int)LanguageID.English);                      pkm.SetNickname(GetNickname((int)LanguageID.English));                      break;                    case 4 when Version == GameVersion.DPPt && Species == (int)Core.Species.Magikarp: // Meister Magikarp                      // Has German Language ID for all except German origin' which is English                      pkm.Language = (int)(pkm.Language == (int)LanguageID.German ? LanguageID.English : LanguageID.German);                      break;                    case 4 when Version == GameVersion.DPPt && (pkm.Version == (int)GameVersion.D || pkm.Version == (int)GameVersion.P):                      // DP English origin are Japanese lang                      pkm.Language = (int)LanguageID.Japanese;                      break;                    case 4 when Version == GameVersion.HGSS && Species == (int)Core.Species.Pikachu: // Pikachu                      // Has English Language ID for all except English origin' which is French                      pkm.Language = (int)(pkm.Language == (int)LanguageID.English ? LanguageID.French : LanguageID.English);                      break;                    case 5 when Version == GameVersion.BW && pkm.Language == (int)LanguageID.Japanese:                      // Trades for JPN games have language ID of 0' not 1.                      pkm.Language = 0;                      break;              }
Magic Number,PKHeX.Core,EncounterTrade,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\EncounterTrade.cs,UpdateEdgeCase,The following statement contains a magic number: switch (Generation)              {                  case 3 when Species == (int)Core.Species.Jynx && pkm.Version == (int) GameVersion.LG && pkm.Language == (int) LanguageID.Italian:                      // Italian LG Jynx untranslated from English name                      pkm.OT_Name = GetOT((int)LanguageID.English);                      pkm.SetNickname(GetNickname((int)LanguageID.English));                      break;                    case 4 when Version == GameVersion.DPPt && Species == (int)Core.Species.Magikarp: // Meister Magikarp                      // Has German Language ID for all except German origin' which is English                      pkm.Language = (int)(pkm.Language == (int)LanguageID.German ? LanguageID.English : LanguageID.German);                      break;                    case 4 when Version == GameVersion.DPPt && (pkm.Version == (int)GameVersion.D || pkm.Version == (int)GameVersion.P):                      // DP English origin are Japanese lang                      pkm.Language = (int)LanguageID.Japanese;                      break;                    case 4 when Version == GameVersion.HGSS && Species == (int)Core.Species.Pikachu: // Pikachu                      // Has English Language ID for all except English origin' which is French                      pkm.Language = (int)(pkm.Language == (int)LanguageID.English ? LanguageID.French : LanguageID.English);                      break;                    case 5 when Version == GameVersion.BW && pkm.Language == (int)LanguageID.Japanese:                      // Trades for JPN games have language ID of 0' not 1.                      pkm.Language = 0;                      break;              }
Magic Number,PKHeX.Core,EncounterTrade,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\EncounterTrade.cs,UpdateEdgeCase,The following statement contains a magic number: switch (Generation)              {                  case 3 when Species == (int)Core.Species.Jynx && pkm.Version == (int) GameVersion.LG && pkm.Language == (int) LanguageID.Italian:                      // Italian LG Jynx untranslated from English name                      pkm.OT_Name = GetOT((int)LanguageID.English);                      pkm.SetNickname(GetNickname((int)LanguageID.English));                      break;                    case 4 when Version == GameVersion.DPPt && Species == (int)Core.Species.Magikarp: // Meister Magikarp                      // Has German Language ID for all except German origin' which is English                      pkm.Language = (int)(pkm.Language == (int)LanguageID.German ? LanguageID.English : LanguageID.German);                      break;                    case 4 when Version == GameVersion.DPPt && (pkm.Version == (int)GameVersion.D || pkm.Version == (int)GameVersion.P):                      // DP English origin are Japanese lang                      pkm.Language = (int)LanguageID.Japanese;                      break;                    case 4 when Version == GameVersion.HGSS && Species == (int)Core.Species.Pikachu: // Pikachu                      // Has English Language ID for all except English origin' which is French                      pkm.Language = (int)(pkm.Language == (int)LanguageID.English ? LanguageID.French : LanguageID.English);                      break;                    case 5 when Version == GameVersion.BW && pkm.Language == (int)LanguageID.Japanese:                      // Trades for JPN games have language ID of 0' not 1.                      pkm.Language = 0;                      break;              }
Magic Number,PKHeX.Core,EncounterTrade,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\EncounterTrade.cs,IsMatchLevel,The following statement contains a magic number: pkm.Format < 5
Magic Number,PKHeX.Core,EncounterTrade,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\EncounterTrade.cs,IsMatchVC2,The following statement contains a magic number: pkm.Format <= 2
Magic Number,PKHeX.Core,EncounterTrade,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\EncounterTrade.cs,IsMatchVC2,The following statement contains a magic number: pkm.Met_Location != 0 && pkm.Format == 2 && pkm.Met_Location != 126
Magic Number,PKHeX.Core,EncounterTrade,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\EncounterTrade.cs,IsMatchVC2,The following statement contains a magic number: pkm.Met_Location != 0 && pkm.Format == 2 && pkm.Met_Location != 126
Magic Number,PKHeX.Core,EncounterTrade,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\EncounterTrade.cs,IsValidTradeOT12Gender,The following statement contains a magic number: pkm.Format <= 2
Magic Number,PKHeX.Core,EncounterTrade,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\EncounterTrade.cs,IsValidTradeOT12,The following statement contains a magic number: pkm.Format >= 7
Magic Number,PKHeX.Core,EncounterCriteria,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Generator\EncounterCriteria.cs,IsIVsCompatible,The following statement contains a magic number: !ivCanMatch(IV_DEF' IVs[2])
Magic Number,PKHeX.Core,EncounterCriteria,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Generator\EncounterCriteria.cs,IsIVsCompatible,The following statement contains a magic number: !ivCanMatch(IV_SPE' IVs[3])
Magic Number,PKHeX.Core,EncounterCriteria,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Generator\EncounterCriteria.cs,IsIVsCompatible,The following statement contains a magic number: !ivCanMatch(IV_SPA' IVs[4])
Magic Number,PKHeX.Core,EncounterCriteria,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Generator\EncounterCriteria.cs,IsIVsCompatible,The following statement contains a magic number: !ivCanMatch(IV_SPD' IVs[5])
Magic Number,PKHeX.Core,EncounterCriteria,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Generator\EncounterCriteria.cs,IsIVsCompatible,The following statement contains a magic number: spec >= 30 && gen >= 6
Magic Number,PKHeX.Core,EncounterCriteria,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Generator\EncounterCriteria.cs,IsIVsCompatible,The following statement contains a magic number: spec >= 30 && gen >= 6
Magic Number,PKHeX.Core,EncounterCriteria,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Generator\EncounterCriteria.cs,GetCriteria,The following statement contains a magic number: return new EncounterCriteria              {                  Gender = gender'                  Ability = s.Ability'                  IV_HP = s.IVs[0]'                  IV_ATK = s.IVs[1]'                  IV_DEF = s.IVs[2]'                  IV_SPE = s.IVs[3]'                  IV_SPA = s.IVs[4]'                  IV_SPD = s.IVs[5]'                  HPType = s.HiddenPowerType'                    Nature = (Nature)s.Nature'                  Shiny = s.Shiny ? Shiny.Always : Shiny.Never'              };
Magic Number,PKHeX.Core,EncounterCriteria,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Generator\EncounterCriteria.cs,GetCriteria,The following statement contains a magic number: return new EncounterCriteria              {                  Gender = gender'                  Ability = s.Ability'                  IV_HP = s.IVs[0]'                  IV_ATK = s.IVs[1]'                  IV_DEF = s.IVs[2]'                  IV_SPE = s.IVs[3]'                  IV_SPA = s.IVs[4]'                  IV_SPD = s.IVs[5]'                  HPType = s.HiddenPowerType'                    Nature = (Nature)s.Nature'                  Shiny = s.Shiny ? Shiny.Always : Shiny.Never'              };
Magic Number,PKHeX.Core,EncounterCriteria,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Generator\EncounterCriteria.cs,GetCriteria,The following statement contains a magic number: return new EncounterCriteria              {                  Gender = gender'                  Ability = s.Ability'                  IV_HP = s.IVs[0]'                  IV_ATK = s.IVs[1]'                  IV_DEF = s.IVs[2]'                  IV_SPE = s.IVs[3]'                  IV_SPA = s.IVs[4]'                  IV_SPD = s.IVs[5]'                  HPType = s.HiddenPowerType'                    Nature = (Nature)s.Nature'                  Shiny = s.Shiny ? Shiny.Always : Shiny.Never'              };
Magic Number,PKHeX.Core,EncounterCriteria,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Generator\EncounterCriteria.cs,GetCriteria,The following statement contains a magic number: return new EncounterCriteria              {                  Gender = gender'                  Ability = s.Ability'                  IV_HP = s.IVs[0]'                  IV_ATK = s.IVs[1]'                  IV_DEF = s.IVs[2]'                  IV_SPE = s.IVs[3]'                  IV_SPA = s.IVs[4]'                  IV_SPD = s.IVs[5]'                  HPType = s.HiddenPowerType'                    Nature = (Nature)s.Nature'                  Shiny = s.Shiny ? Shiny.Always : Shiny.Never'              };
Magic Number,PKHeX.Core,EncounterCriteria,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Generator\EncounterCriteria.cs,GetNature,The following statement contains a magic number: (uint)encValue < 25
Magic Number,PKHeX.Core,EncounterCriteria,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Generator\EncounterCriteria.cs,GetNature,The following statement contains a magic number: return (Nature)Util.Rand.Next(25);
Magic Number,PKHeX.Core,EncounterCriteria,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Generator\EncounterCriteria.cs,GetGender,The following statement contains a magic number: (uint)gender < 3
Magic Number,PKHeX.Core,EncounterCriteria,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Generator\EncounterCriteria.cs,GetAbility,The following statement contains a magic number: abilityType < 3
Magic Number,PKHeX.Core,EncounterCriteria,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Generator\EncounterCriteria.cs,GetAbility,The following statement contains a magic number: return 2;
Magic Number,PKHeX.Core,EncounterCriteria,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Generator\EncounterCriteria.cs,GetAbility,The following statement contains a magic number: abilityType == 4 && abils.Length > 2 && abils[2] == Ability
Magic Number,PKHeX.Core,EncounterCriteria,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Generator\EncounterCriteria.cs,GetAbility,The following statement contains a magic number: abilityType == 4 && abils.Length > 2 && abils[2] == Ability
Magic Number,PKHeX.Core,EncounterCriteria,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Generator\EncounterCriteria.cs,GetAbility,The following statement contains a magic number: abilityType == 4 && abils.Length > 2 && abils[2] == Ability
Magic Number,PKHeX.Core,EncounterEggGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Generator\EncounterEggGenerator.cs,GenerateEggs,The following statement contains a magic number: var evos = table.GetValidPreEvolutions(pkm' maxLevel: 100' maxSpeciesOrigin: maxSpeciesOrigin' skipChecks: true);
Magic Number,PKHeX.Core,EncounterEggGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Generator\EncounterEggGenerator.cs,GenerateEggs,The following statement contains a magic number: gen > 5 && (pkm.WasTradedEgg || all) && HasOtherGamePair(ver)
Magic Number,PKHeX.Core,EncounterEggGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Generator\EncounterEggGenerator.cs,GenerateEggs,The following statement contains a magic number: gen > 5 && (pkm.WasTradedEgg || all) && HasOtherGamePair(ver)
Magic Number,PKHeX.Core,EncounterEggGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Generator\EncounterEggGenerator.cs,GetOtherTradePair,The following statement contains a magic number: return (GameVersion)((int)ver ^ 2);
Magic Number,PKHeX.Core,EncounterEggGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Generator\EncounterEggGenerator.cs,GetOtherTradePair,The following statement contains a magic number: return ver + 2;
Magic Number,PKHeX.Core,EncounterEggGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Generator\EncounterEggGenerator.cs,GetOtherTradePair,The following statement contains a magic number: return ver - 2;
Magic Number,PKHeX.Core,EncounterFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Generator\EncounterFinder.cs,VerifySecondaryChecks,The following statement contains a magic number: pkm.Format >= 6
Magic Number,PKHeX.Core,EncounterGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Generator\EncounterGenerator.cs,GetEncounters,The following statement contains a magic number: switch (info.Generation)              {                  case 1:                  case 2: return GetEncounters12(pkm' info);                  case 3: return GetEncounters3(pkm' info);                  case 4: return GetEncounters4(pkm' info);                  default: return GenerateRawEncounters(pkm);              }
Magic Number,PKHeX.Core,EncounterGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Generator\EncounterGenerator.cs,GetEncounters,The following statement contains a magic number: switch (info.Generation)              {                  case 1:                  case 2: return GetEncounters12(pkm' info);                  case 3: return GetEncounters3(pkm' info);                  case 4: return GetEncounters4(pkm' info);                  default: return GenerateRawEncounters(pkm);              }
Magic Number,PKHeX.Core,EncounterGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Generator\EncounterGenerator.cs,GetEncounters,The following statement contains a magic number: switch (info.Generation)              {                  case 1:                  case 2: return GetEncounters12(pkm' info);                  case 3: return GetEncounters3(pkm' info);                  case 4: return GetEncounters4(pkm' info);                  default: return GenerateRawEncounters(pkm);              }
Magic Number,PKHeX.Core,EncounterGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Generator\EncounterGenerator.cs,GetEncounters12,The following statement contains a magic number: info.Generation = z is IGeneration g ? g.Generation : 2;
Magic Number,PKHeX.Core,EncounterGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Generator\EncounterGenerator.cs,GenerateRawEncounters12,The following statement contains a magic number: pkm.Format >= 7 && pkm.OT_Name.Length <= (pkm.Japanese || pkm.Korean ? 5 : 7)
Magic Number,PKHeX.Core,EncounterGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Generator\EncounterGenerator.cs,GenerateRawEncounters12,The following statement contains a magic number: pkm.Format >= 7 && pkm.OT_Name.Length <= (pkm.Japanese || pkm.Korean ? 5 : 7)
Magic Number,PKHeX.Core,EncounterGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Generator\EncounterGenerator.cs,GenerateRawEncounters12,The following statement contains a magic number: pkm.Format >= 7 && pkm.OT_Name.Length <= (pkm.Japanese || pkm.Korean ? 5 : 7)
Magic Number,PKHeX.Core,EncounterGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Generator\EncounterGenerator.cs,GenerateRawEncounters12,The following statement contains a magic number: switch (s.Version)                  {                      case GameVersion.Stadium:                      case GameVersion.Stadium2:                          deferred.Add(s);                          continue;                      case GameVersion.EventsGBGen2:                          if (!s.EggEncounter && !pkm.HasOriginalMetLocation)                              continue;                          if (pkm.Japanese)                              deferred.Add(s);                          continue;                      case GameVersion.C when gsc && pkm.Format == 2: // Crystal specific data needs to be present                          if (!s.EggEncounter && !pkm.HasOriginalMetLocation)                              continue;                          if (s.Species == 251 && ParseSettings.AllowGBCartEra) // no celebi' the GameVersion.EventsGBGen2 will pass thru                              continue;                          break;                  }
Magic Number,PKHeX.Core,EncounterGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Generator\EncounterGenerator.cs,GenerateRawEncounters12,The following statement contains a magic number: switch (s.Version)                  {                      case GameVersion.Stadium:                      case GameVersion.Stadium2:                          deferred.Add(s);                          continue;                      case GameVersion.EventsGBGen2:                          if (!s.EggEncounter && !pkm.HasOriginalMetLocation)                              continue;                          if (pkm.Japanese)                              deferred.Add(s);                          continue;                      case GameVersion.C when gsc && pkm.Format == 2: // Crystal specific data needs to be present                          if (!s.EggEncounter && !pkm.HasOriginalMetLocation)                              continue;                          if (s.Species == 251 && ParseSettings.AllowGBCartEra) // no celebi' the GameVersion.EventsGBGen2 will pass thru                              continue;                          break;                  }
Magic Number,PKHeX.Core,EncounterGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Generator\EncounterGenerator.cs,GenerateRawEncounters12,The following statement contains a magic number: yield return new EncounterEgg(eggspec' 0' 5) { Version = GameVersion.C };
Magic Number,PKHeX.Core,EncounterGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Generator\EncounterGenerator.cs,GenerateRawEncounters12,The following statement contains a magic number: yield return new EncounterEgg(eggspec' 0' 5) { Version = GameVersion.GS };
Magic Number,PKHeX.Core,EncounterGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Generator\EncounterGenerator.cs,GetCanBeEgg,The following statement contains a magic number: canBeEgg &= pkm.CurrentLevel >= 5;
Magic Number,PKHeX.Core,EncounterGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Generator\EncounterGenerator.cs,GetCanBeEgg,The following statement contains a magic number: pkm.Format < 3
Magic Number,PKHeX.Core,EncounterGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Generator\EncounterGenerator.cs,GenerateFilteredEncounters12,The following statement contains a magic number: bool crystal = (pkm.Format == 2 && pkm.Met_Location != 0) || (pkm.Format >= 7 && pkm.OT_Gender == 1);
Magic Number,PKHeX.Core,EncounterGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Generator\EncounterGenerator.cs,GenerateFilteredEncounters12,The following statement contains a magic number: bool crystal = (pkm.Format == 2 && pkm.Met_Location != 0) || (pkm.Format >= 7 && pkm.OT_Gender == 1);
Magic Number,PKHeX.Core,EncounterGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Generator\EncounterGenerator.cs,GenerateFilteredEncounters12,The following statement contains a magic number: bool kadabra = pkm.Species == 64 && pkm is PK1 pk1                             && (pk1.Catch_Rate == PersonalTable.RB[64].CatchRate                              || pk1.Catch_Rate == PersonalTable.Y[64].CatchRate);
Magic Number,PKHeX.Core,EncounterGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Generator\EncounterGenerator.cs,GenerateFilteredEncounters12,The following statement contains a magic number: bool kadabra = pkm.Species == 64 && pkm is PK1 pk1                             && (pk1.Catch_Rate == PersonalTable.RB[64].CatchRate                              || pk1.Catch_Rate == PersonalTable.Y[64].CatchRate);
Magic Number,PKHeX.Core,EncounterGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Generator\EncounterGenerator.cs,GenerateFilteredEncounters12,The following statement contains a magic number: bool kadabra = pkm.Species == 64 && pkm is PK1 pk1                             && (pk1.Catch_Rate == PersonalTable.RB[64].CatchRate                              || pk1.Catch_Rate == PersonalTable.Y[64].CatchRate);
Magic Number,PKHeX.Core,EncounterGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Generator\EncounterGenerator.cs,GenerateFilteredEncounters12,The following statement contains a magic number: int gen = obj is IGeneration g ? g.Generation : 2;
Magic Number,PKHeX.Core,EncounterGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Generator\EncounterGenerator.cs,GetGBEncounterPriority,The following statement contains a magic number: switch (Encounter)              {                  case EncounterTrade t:                      return t.Generation == 2 ? GBEncounterPriority.TradeEncounterG2 : GBEncounterPriority.TradeEncounterG1;                  case EncounterStatic s:                      if (s.Moves.Length != 0 && s.Moves[0] != 0 && pkm.Moves.Contains(s.Moves[0]))                          return GBEncounterPriority.SpecialEncounter;                      return GBEncounterPriority.StaticEncounter;                  case EncounterSlot _:                      return GBEncounterPriority.WildEncounter;                    default:                      return GBEncounterPriority.EggEncounter;              }
Magic Number,PKHeX.Core,EncounterGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Generator\EncounterGenerator.cs,GenerateRawEncounters4,The following statement contains a magic number: z.Gift && pkm.Ball != 4
Magic Number,PKHeX.Core,EncounterGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Generator\EncounterGenerator.cs,GenerateRawEncounters3,The following statement contains a magic number: z.Gift && pkm.Ball != 4
Magic Number,PKHeX.Core,EncounterGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Generator\EncounterGenerator.cs,GenerateRawEncounters3,The following statement contains a magic number: pkm.Version != 15
Magic Number,PKHeX.Core,EncounterGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Generator\EncounterGenerator.cs,IsEncounterTrade1Valid,The following statement contains a magic number: pkm.Format <= 2
Magic Number,PKHeX.Core,EncounterMovesetGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Generator\EncounterMovesetGenerator.cs,GenerateVersionEncounters,The following statement contains a magic number: var dl = et.GetValidPreEvolutions(pk' maxLevel: 100' skipChecks: true);
Magic Number,PKHeX.Core,EncounterMovesetGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Generator\EncounterMovesetGenerator.cs,GetNeededMoves,The following statement contains a magic number: pk.Species == 235
Magic Number,PKHeX.Core,EncounterMovesetGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Generator\EncounterMovesetGenerator.cs,GetMovesForGeneration,The following statement contains a magic number: generation >= 8
Magic Number,PKHeX.Core,EncounterMovesetGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Generator\EncounterMovesetGenerator.cs,GetEggs,The following statement contains a magic number: em = em.Concat(new[] {344});
Magic Number,PKHeX.Core,EncounterMovesetGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Generator\EncounterMovesetGenerator.cs,GetEggs,The following statement contains a magic number: Legal.LightBall.Contains(egg.Species) && needs.Contains(344)
Magic Number,PKHeX.Core,EncounterMovesetGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Generator\EncounterMovesetGenerator.cs,IsUnobtainable,The following statement contains a magic number: switch (slot.Generation)              {                  case 2:                      if ((slot.Type & SlotType.Safari) != 0) // Safari Zone is unavailable in Gen 2.                          return true;                        if ((slot.Type & SlotType.Headbutt) != 0) // Unreachable Headbutt Trees.                          return Encounters2.GetGSCHeadbuttAvailability(slot' pk.TID) != TreeEncounterAvailable.ValidTree;                      break;                  case 4:                      if (slot.Location == 193 && slot.Type == SlotType.Surf) // Johto Route 45 surfing encounter. Unreachable Water tiles.                          return true;                      break;              }
Magic Number,PKHeX.Core,EncounterMovesetGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Generator\EncounterMovesetGenerator.cs,IsUnobtainable,The following statement contains a magic number: switch (slot.Generation)              {                  case 2:                      if ((slot.Type & SlotType.Safari) != 0) // Safari Zone is unavailable in Gen 2.                          return true;                        if ((slot.Type & SlotType.Headbutt) != 0) // Unreachable Headbutt Trees.                          return Encounters2.GetGSCHeadbuttAvailability(slot' pk.TID) != TreeEncounterAvailable.ValidTree;                      break;                  case 4:                      if (slot.Location == 193 && slot.Type == SlotType.Surf) // Johto Route 45 surfing encounter. Unreachable Water tiles.                          return true;                      break;              }
Magic Number,PKHeX.Core,EncounterMovesetGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Generator\EncounterMovesetGenerator.cs,IsUnobtainable,The following statement contains a magic number: switch (slot.Generation)              {                  case 2:                      if ((slot.Type & SlotType.Safari) != 0) // Safari Zone is unavailable in Gen 2.                          return true;                        if ((slot.Type & SlotType.Headbutt) != 0) // Unreachable Headbutt Trees.                          return Encounters2.GetGSCHeadbuttAvailability(slot' pk.TID) != TreeEncounterAvailable.ValidTree;                      break;                  case 4:                      if (slot.Location == 193 && slot.Type == SlotType.Surf) // Johto Route 45 surfing encounter. Unreachable Water tiles.                          return true;                      break;              }
Magic Number,PKHeX.Core,EncounterMovesetGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Generator\EncounterMovesetGenerator.cs,IsUnobtainable,The following statement contains a magic number: switch (enc.Generation)              {                  case 4 when enc is EncounterStaticTyped t && enc.Location == 193:                      if (t.TypeEncounter == EncounterType.Surfing_Fishing) // Johto Route 45 surfing encounter. Unreachable Water tiles.                          return true; // only hits for Roamer Raikou                      break;                  case 4:                      switch (pk.Species)                      {                          case (int)Species.Darkrai when enc.Location == 079 && !pk.Pt: // DP Darkrai                              return true;                          case (int)Species.Shaymin when enc.Location == 063 && !pk.Pt: // DP Shaymin                              return true;                          case (int)Species.Arceus when enc.Location == 086: // Azure Flute Arceus                              return true;                      }                      break;              }
Magic Number,PKHeX.Core,EncounterMovesetGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Generator\EncounterMovesetGenerator.cs,IsUnobtainable,The following statement contains a magic number: switch (enc.Generation)              {                  case 4 when enc is EncounterStaticTyped t && enc.Location == 193:                      if (t.TypeEncounter == EncounterType.Surfing_Fishing) // Johto Route 45 surfing encounter. Unreachable Water tiles.                          return true; // only hits for Roamer Raikou                      break;                  case 4:                      switch (pk.Species)                      {                          case (int)Species.Darkrai when enc.Location == 079 && !pk.Pt: // DP Darkrai                              return true;                          case (int)Species.Shaymin when enc.Location == 063 && !pk.Pt: // DP Shaymin                              return true;                          case (int)Species.Arceus when enc.Location == 086: // Azure Flute Arceus                              return true;                      }                      break;              }
Magic Number,PKHeX.Core,EncounterMovesetGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Generator\EncounterMovesetGenerator.cs,IsUnobtainable,The following statement contains a magic number: switch (enc.Generation)              {                  case 4 when enc is EncounterStaticTyped t && enc.Location == 193:                      if (t.TypeEncounter == EncounterType.Surfing_Fishing) // Johto Route 45 surfing encounter. Unreachable Water tiles.                          return true; // only hits for Roamer Raikou                      break;                  case 4:                      switch (pk.Species)                      {                          case (int)Species.Darkrai when enc.Location == 079 && !pk.Pt: // DP Darkrai                              return true;                          case (int)Species.Shaymin when enc.Location == 063 && !pk.Pt: // DP Shaymin                              return true;                          case (int)Species.Arceus when enc.Location == 086: // Azure Flute Arceus                              return true;                      }                      break;              }
Magic Number,PKHeX.Core,EncounterMovesetGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Generator\EncounterMovesetGenerator.cs,IsUnobtainable,The following statement contains a magic number: switch (enc.Generation)              {                  case 4 when enc is EncounterStaticTyped t && enc.Location == 193:                      if (t.TypeEncounter == EncounterType.Surfing_Fishing) // Johto Route 45 surfing encounter. Unreachable Water tiles.                          return true; // only hits for Roamer Raikou                      break;                  case 4:                      switch (pk.Species)                      {                          case (int)Species.Darkrai when enc.Location == 079 && !pk.Pt: // DP Darkrai                              return true;                          case (int)Species.Shaymin when enc.Location == 063 && !pk.Pt: // DP Shaymin                              return true;                          case (int)Species.Arceus when enc.Location == 086: // Azure Flute Arceus                              return true;                      }                      break;              }
Magic Number,PKHeX.Core,EncounterMovesetGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Generator\EncounterMovesetGenerator.cs,IsUnobtainable,The following statement contains a magic number: switch (enc.Generation)              {                  case 4 when enc is EncounterStaticTyped t && enc.Location == 193:                      if (t.TypeEncounter == EncounterType.Surfing_Fishing) // Johto Route 45 surfing encounter. Unreachable Water tiles.                          return true; // only hits for Roamer Raikou                      break;                  case 4:                      switch (pk.Species)                      {                          case (int)Species.Darkrai when enc.Location == 079 && !pk.Pt: // DP Darkrai                              return true;                          case (int)Species.Shaymin when enc.Location == 063 && !pk.Pt: // DP Shaymin                              return true;                          case (int)Species.Arceus when enc.Location == 086: // Azure Flute Arceus                              return true;                      }                      break;              }
Magic Number,PKHeX.Core,EncounterMovesetGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Generator\EncounterMovesetGenerator.cs,IsUnobtainable,The following statement contains a magic number: switch (enc.Generation)              {                  case 4 when enc is EncounterStaticTyped t && enc.Location == 193:                      if (t.TypeEncounter == EncounterType.Surfing_Fishing) // Johto Route 45 surfing encounter. Unreachable Water tiles.                          return true; // only hits for Roamer Raikou                      break;                  case 4:                      switch (pk.Species)                      {                          case (int)Species.Darkrai when enc.Location == 079 && !pk.Pt: // DP Darkrai                              return true;                          case (int)Species.Shaymin when enc.Location == 063 && !pk.Pt: // DP Shaymin                              return true;                          case (int)Species.Arceus when enc.Location == 086: // Azure Flute Arceus                              return true;                      }                      break;              }
Magic Number,PKHeX.Core,EncounterSlotGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Generator\EncounterSlotGenerator.cs,GetValidWildEncounters,The following statement contains a magic number: bool IsHidden = pkm.AbilityNumber == 4;
Magic Number,PKHeX.Core,EncounterSlotGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Generator\EncounterSlotGenerator.cs,GetEncounterAreas,The following statement contains a magic number: bool noMet = !pkm.HasOriginalMetLocation || (pkm.Format == 2 && gameSource != GameVersion.C);
Magic Number,PKHeX.Core,EncounterSlotGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Generator\EncounterSlotGenerator.cs,GetEncounterTableGSC,The following statement contains a magic number: pkm.Format != 2
Magic Number,PKHeX.Core,EncounterSlotGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Generator\EncounterSlotGenerator.cs,GetEncounterTableGSC,The following statement contains a magic number: pkm.Species > 151 && !FutureEvolutionsGen1.Contains(pkm.Species)
Magic Number,PKHeX.Core,EncounterStaticGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Generator\EncounterStaticGenerator.cs,GetPossible,The following statement contains a magic number: int maxID = gen == 2 ? MaxSpeciesID_2 : gen == 1 ? MaxSpeciesID_1 : -1;
Magic Number,PKHeX.Core,EncounterStaticGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Generator\EncounterStaticGenerator.cs,GetRBYStaticTransfer,The following statement contains a magic number: var enc = new EncounterStatic              {                  Species = species'                  Gift = true' // Forces Poké Ball                  Ability = TransferSpeciesDefaultAbility_1.Contains(species) ? 1 : 4' // Hidden by default' else first                  Shiny = species == 151 ? Shiny.Never : Shiny.Random'                  Fateful = species == 151'                  Location = Transfer1'                  EggLocation = 0'                  Level = pkmMetLevel'                  Generation = 7'                  Version = GameVersion.RBY              };
Magic Number,PKHeX.Core,EncounterStaticGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Generator\EncounterStaticGenerator.cs,GetRBYStaticTransfer,The following statement contains a magic number: var enc = new EncounterStatic              {                  Species = species'                  Gift = true' // Forces Poké Ball                  Ability = TransferSpeciesDefaultAbility_1.Contains(species) ? 1 : 4' // Hidden by default' else first                  Shiny = species == 151 ? Shiny.Never : Shiny.Random'                  Fateful = species == 151'                  Location = Transfer1'                  EggLocation = 0'                  Level = pkmMetLevel'                  Generation = 7'                  Version = GameVersion.RBY              };
Magic Number,PKHeX.Core,EncounterStaticGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Generator\EncounterStaticGenerator.cs,GetRBYStaticTransfer,The following statement contains a magic number: var enc = new EncounterStatic              {                  Species = species'                  Gift = true' // Forces Poké Ball                  Ability = TransferSpeciesDefaultAbility_1.Contains(species) ? 1 : 4' // Hidden by default' else first                  Shiny = species == 151 ? Shiny.Never : Shiny.Random'                  Fateful = species == 151'                  Location = Transfer1'                  EggLocation = 0'                  Level = pkmMetLevel'                  Generation = 7'                  Version = GameVersion.RBY              };
Magic Number,PKHeX.Core,EncounterStaticGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Generator\EncounterStaticGenerator.cs,GetRBYStaticTransfer,The following statement contains a magic number: var enc = new EncounterStatic              {                  Species = species'                  Gift = true' // Forces Poké Ball                  Ability = TransferSpeciesDefaultAbility_1.Contains(species) ? 1 : 4' // Hidden by default' else first                  Shiny = species == 151 ? Shiny.Never : Shiny.Random'                  Fateful = species == 151'                  Location = Transfer1'                  EggLocation = 0'                  Level = pkmMetLevel'                  Generation = 7'                  Version = GameVersion.RBY              };
Magic Number,PKHeX.Core,EncounterStaticGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Generator\EncounterStaticGenerator.cs,GetRBYStaticTransfer,The following statement contains a magic number: enc.FlawlessIVCount = enc.Fateful ? 5 : 3;
Magic Number,PKHeX.Core,EncounterStaticGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Generator\EncounterStaticGenerator.cs,GetRBYStaticTransfer,The following statement contains a magic number: enc.FlawlessIVCount = enc.Fateful ? 5 : 3;
Magic Number,PKHeX.Core,EncounterStaticGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Generator\EncounterStaticGenerator.cs,GetGSStaticTransfer,The following statement contains a magic number: var enc = new EncounterStatic              {                  Species = species'                  Gift = true' // Forces Poké Ball                  Ability = TransferSpeciesDefaultAbility_2.Contains(species) ? 1 : 4' // Hidden by default' else first                  Shiny = species == 151 ? Shiny.Never : Shiny.Random'                  Fateful = species == 151 || species == 251'                  Location = Transfer2'                  EggLocation = 0'                  Level = pkmMetLevel'                  Generation = 7'                  Version = GameVersion.GSC              };
Magic Number,PKHeX.Core,EncounterStaticGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Generator\EncounterStaticGenerator.cs,GetGSStaticTransfer,The following statement contains a magic number: var enc = new EncounterStatic              {                  Species = species'                  Gift = true' // Forces Poké Ball                  Ability = TransferSpeciesDefaultAbility_2.Contains(species) ? 1 : 4' // Hidden by default' else first                  Shiny = species == 151 ? Shiny.Never : Shiny.Random'                  Fateful = species == 151 || species == 251'                  Location = Transfer2'                  EggLocation = 0'                  Level = pkmMetLevel'                  Generation = 7'                  Version = GameVersion.GSC              };
Magic Number,PKHeX.Core,EncounterStaticGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Generator\EncounterStaticGenerator.cs,GetGSStaticTransfer,The following statement contains a magic number: var enc = new EncounterStatic              {                  Species = species'                  Gift = true' // Forces Poké Ball                  Ability = TransferSpeciesDefaultAbility_2.Contains(species) ? 1 : 4' // Hidden by default' else first                  Shiny = species == 151 ? Shiny.Never : Shiny.Random'                  Fateful = species == 151 || species == 251'                  Location = Transfer2'                  EggLocation = 0'                  Level = pkmMetLevel'                  Generation = 7'                  Version = GameVersion.GSC              };
Magic Number,PKHeX.Core,EncounterStaticGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Generator\EncounterStaticGenerator.cs,GetGSStaticTransfer,The following statement contains a magic number: var enc = new EncounterStatic              {                  Species = species'                  Gift = true' // Forces Poké Ball                  Ability = TransferSpeciesDefaultAbility_2.Contains(species) ? 1 : 4' // Hidden by default' else first                  Shiny = species == 151 ? Shiny.Never : Shiny.Random'                  Fateful = species == 151 || species == 251'                  Location = Transfer2'                  EggLocation = 0'                  Level = pkmMetLevel'                  Generation = 7'                  Version = GameVersion.GSC              };
Magic Number,PKHeX.Core,EncounterStaticGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Generator\EncounterStaticGenerator.cs,GetGSStaticTransfer,The following statement contains a magic number: var enc = new EncounterStatic              {                  Species = species'                  Gift = true' // Forces Poké Ball                  Ability = TransferSpeciesDefaultAbility_2.Contains(species) ? 1 : 4' // Hidden by default' else first                  Shiny = species == 151 ? Shiny.Never : Shiny.Random'                  Fateful = species == 151 || species == 251'                  Location = Transfer2'                  EggLocation = 0'                  Level = pkmMetLevel'                  Generation = 7'                  Version = GameVersion.GSC              };
Magic Number,PKHeX.Core,EncounterStaticGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Generator\EncounterStaticGenerator.cs,GetGSStaticTransfer,The following statement contains a magic number: enc.FlawlessIVCount = enc.Fateful ? 5 : 3;
Magic Number,PKHeX.Core,EncounterStaticGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Generator\EncounterStaticGenerator.cs,GetGSStaticTransfer,The following statement contains a magic number: enc.FlawlessIVCount = enc.Fateful ? 5 : 3;
Magic Number,PKHeX.Core,EncounterStaticGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Generator\EncounterStaticGenerator.cs,GetStaticLocation,The following statement contains a magic number: switch (pkm.GenNumber)              {                  case 1:                      return GetRBYStaticTransfer(species' pkm.Met_Level);                  case 2:                      return GetGSStaticTransfer(species' pkm.Met_Level);                  default:                      var dl = EvolutionChain.GetValidPreEvolutions(pkm' lvl: 100' skipChecks: true);                      return GetPossible(pkm' dl).FirstOrDefault();              }
Magic Number,PKHeX.Core,EncounterStaticGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Generator\EncounterStaticGenerator.cs,GetStaticLocation,The following statement contains a magic number: switch (pkm.GenNumber)              {                  case 1:                      return GetRBYStaticTransfer(species' pkm.Met_Level);                  case 2:                      return GetGSStaticTransfer(species' pkm.Met_Level);                  default:                      var dl = EvolutionChain.GetValidPreEvolutions(pkm' lvl: 100' skipChecks: true);                      return GetPossible(pkm' dl).FirstOrDefault();              }
Magic Number,PKHeX.Core,EncounterStaticGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Generator\EncounterStaticGenerator.cs,IsValidCatchRatePK1,The following statement contains a magic number: catch_rate == 190
Magic Number,PKHeX.Core,EncounterStaticGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Generator\EncounterStaticGenerator.cs,IsValidCatchRatePK1,The following statement contains a magic number: catch_rate == 163 && e.Level == 5
Magic Number,PKHeX.Core,EncounterStaticGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Generator\EncounterStaticGenerator.cs,IsValidCatchRatePK1,The following statement contains a magic number: catch_rate == 163 && e.Level == 5
Magic Number,PKHeX.Core,EncounterStaticGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Generator\EncounterStaticGenerator.cs,IsValidCatchRatePK1,The following statement contains a magic number: pk1.Species == 25 || pk1.Species == 26
Magic Number,PKHeX.Core,EncounterStaticGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Generator\EncounterStaticGenerator.cs,IsValidCatchRatePK1,The following statement contains a magic number: pk1.Species == 25 || pk1.Species == 26
Magic Number,PKHeX.Core,EncounterStaticGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Generator\EncounterStaticGenerator.cs,IsValidCatchRatePK1,The following statement contains a magic number: return catch_rate == (pk1.Japanese ? 167 : 168);
Magic Number,PKHeX.Core,EncounterStaticGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Generator\EncounterStaticGenerator.cs,IsValidCatchRatePK1,The following statement contains a magic number: return catch_rate == (pk1.Japanese ? 167 : 168);
Magic Number,PKHeX.Core,EncounterStaticGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Generator\EncounterStaticGenerator.cs,IsValidCatchRatePK1,The following statement contains a magic number: e.Species == 054
Magic Number,PKHeX.Core,EncounterStaticGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Generator\EncounterStaticGenerator.cs,GetEncounterStaticTableGSC,The following statement contains a magic number: pkm.Format != 2
Magic Number,PKHeX.Core,EncounterTradeGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Generator\EncounterTradeGenerator.cs,GetPossible,The following statement contains a magic number: pkm.VC || pkm.Format <= 2
Magic Number,PKHeX.Core,EncounterTradeGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Generator\EncounterTradeGenerator.cs,GetPossibleNonVC,The following statement contains a magic number: pkm.VC || pkm.Format <= 2
Magic Number,PKHeX.Core,EncounterTradeGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Generator\EncounterTradeGenerator.cs,GetEncounterTradeTable,The following statement contains a magic number: return pkm.GenNumber switch              {                  3 => (pkm.FRLG ? Encounters3.TradeGift_FRLG : Encounters3.TradeGift_RSE)'                  4 => (pkm.HGSS ? Encounters4.TradeGift_HGSS : Encounters4.TradeGift_DPPt)'                  5 => (pkm.B2W2 ? Encounters5.TradeGift_B2W2 : Encounters5.TradeGift_BW)'                  6 => (pkm.XY ? Encounters6.TradeGift_XY : Encounters6.TradeGift_AO)'                  7 => (pkm.GG ? Encounters7b.TradeGift_GG : pkm.SM ? Encounters7.TradeGift_SM : Encounters7.TradeGift_USUM)'                  8 => Encounters8.TradeGift_SWSH'                  _ => null'              };
Magic Number,PKHeX.Core,EncounterTradeGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Generator\EncounterTradeGenerator.cs,GetEncounterTradeTable,The following statement contains a magic number: return pkm.GenNumber switch              {                  3 => (pkm.FRLG ? Encounters3.TradeGift_FRLG : Encounters3.TradeGift_RSE)'                  4 => (pkm.HGSS ? Encounters4.TradeGift_HGSS : Encounters4.TradeGift_DPPt)'                  5 => (pkm.B2W2 ? Encounters5.TradeGift_B2W2 : Encounters5.TradeGift_BW)'                  6 => (pkm.XY ? Encounters6.TradeGift_XY : Encounters6.TradeGift_AO)'                  7 => (pkm.GG ? Encounters7b.TradeGift_GG : pkm.SM ? Encounters7.TradeGift_SM : Encounters7.TradeGift_USUM)'                  8 => Encounters8.TradeGift_SWSH'                  _ => null'              };
Magic Number,PKHeX.Core,EncounterTradeGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Generator\EncounterTradeGenerator.cs,GetEncounterTradeTable,The following statement contains a magic number: return pkm.GenNumber switch              {                  3 => (pkm.FRLG ? Encounters3.TradeGift_FRLG : Encounters3.TradeGift_RSE)'                  4 => (pkm.HGSS ? Encounters4.TradeGift_HGSS : Encounters4.TradeGift_DPPt)'                  5 => (pkm.B2W2 ? Encounters5.TradeGift_B2W2 : Encounters5.TradeGift_BW)'                  6 => (pkm.XY ? Encounters6.TradeGift_XY : Encounters6.TradeGift_AO)'                  7 => (pkm.GG ? Encounters7b.TradeGift_GG : pkm.SM ? Encounters7.TradeGift_SM : Encounters7.TradeGift_USUM)'                  8 => Encounters8.TradeGift_SWSH'                  _ => null'              };
Magic Number,PKHeX.Core,EncounterTradeGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Generator\EncounterTradeGenerator.cs,GetEncounterTradeTable,The following statement contains a magic number: return pkm.GenNumber switch              {                  3 => (pkm.FRLG ? Encounters3.TradeGift_FRLG : Encounters3.TradeGift_RSE)'                  4 => (pkm.HGSS ? Encounters4.TradeGift_HGSS : Encounters4.TradeGift_DPPt)'                  5 => (pkm.B2W2 ? Encounters5.TradeGift_B2W2 : Encounters5.TradeGift_BW)'                  6 => (pkm.XY ? Encounters6.TradeGift_XY : Encounters6.TradeGift_AO)'                  7 => (pkm.GG ? Encounters7b.TradeGift_GG : pkm.SM ? Encounters7.TradeGift_SM : Encounters7.TradeGift_USUM)'                  8 => Encounters8.TradeGift_SWSH'                  _ => null'              };
Magic Number,PKHeX.Core,EncounterTradeGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Generator\EncounterTradeGenerator.cs,GetEncounterTradeTable,The following statement contains a magic number: return pkm.GenNumber switch              {                  3 => (pkm.FRLG ? Encounters3.TradeGift_FRLG : Encounters3.TradeGift_RSE)'                  4 => (pkm.HGSS ? Encounters4.TradeGift_HGSS : Encounters4.TradeGift_DPPt)'                  5 => (pkm.B2W2 ? Encounters5.TradeGift_B2W2 : Encounters5.TradeGift_BW)'                  6 => (pkm.XY ? Encounters6.TradeGift_XY : Encounters6.TradeGift_AO)'                  7 => (pkm.GG ? Encounters7b.TradeGift_GG : pkm.SM ? Encounters7.TradeGift_SM : Encounters7.TradeGift_USUM)'                  8 => Encounters8.TradeGift_SWSH'                  _ => null'              };
Magic Number,PKHeX.Core,EncounterTradeGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Generator\EncounterTradeGenerator.cs,GetEncounterTradeTable,The following statement contains a magic number: return pkm.GenNumber switch              {                  3 => (pkm.FRLG ? Encounters3.TradeGift_FRLG : Encounters3.TradeGift_RSE)'                  4 => (pkm.HGSS ? Encounters4.TradeGift_HGSS : Encounters4.TradeGift_DPPt)'                  5 => (pkm.B2W2 ? Encounters5.TradeGift_B2W2 : Encounters5.TradeGift_BW)'                  6 => (pkm.XY ? Encounters6.TradeGift_XY : Encounters6.TradeGift_AO)'                  7 => (pkm.GG ? Encounters7b.TradeGift_GG : pkm.SM ? Encounters7.TradeGift_SM : Encounters7.TradeGift_USUM)'                  8 => Encounters8.TradeGift_SWSH'                  _ => null'              };
Magic Number,PKHeX.Core,MysteryGiftGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Generator\MysteryGiftGenerator.cs,GetPossible,The following statement contains a magic number: gen == 4 && pkm.Species == (int) Species.Manaphy
Magic Number,PKHeX.Core,MysteryGiftGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Generator\MysteryGiftGenerator.cs,GetValidGifts,The following statement contains a magic number: gen == 4
Magic Number,PKHeX.Core,MysteryGiftGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Generator\MysteryGiftGenerator.cs,GetTable,The following statement contains a magic number: return generation switch              {                  3 => MGDB_G3'                  4 => MGDB_G4'                  5 => MGDB_G5'                  6 => MGDB_G6'                  7 => (pkm.GG ? (IEnumerable<MysteryGift>)MGDB_G7GG : MGDB_G7)'                  8 => MGDB_G8'                  _ => Enumerable.Empty<MysteryGift>()              };
Magic Number,PKHeX.Core,MysteryGiftGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Generator\MysteryGiftGenerator.cs,GetTable,The following statement contains a magic number: return generation switch              {                  3 => MGDB_G3'                  4 => MGDB_G4'                  5 => MGDB_G5'                  6 => MGDB_G6'                  7 => (pkm.GG ? (IEnumerable<MysteryGift>)MGDB_G7GG : MGDB_G7)'                  8 => MGDB_G8'                  _ => Enumerable.Empty<MysteryGift>()              };
Magic Number,PKHeX.Core,MysteryGiftGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Generator\MysteryGiftGenerator.cs,GetTable,The following statement contains a magic number: return generation switch              {                  3 => MGDB_G3'                  4 => MGDB_G4'                  5 => MGDB_G5'                  6 => MGDB_G6'                  7 => (pkm.GG ? (IEnumerable<MysteryGift>)MGDB_G7GG : MGDB_G7)'                  8 => MGDB_G8'                  _ => Enumerable.Empty<MysteryGift>()              };
Magic Number,PKHeX.Core,MysteryGiftGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Generator\MysteryGiftGenerator.cs,GetTable,The following statement contains a magic number: return generation switch              {                  3 => MGDB_G3'                  4 => MGDB_G4'                  5 => MGDB_G5'                  6 => MGDB_G6'                  7 => (pkm.GG ? (IEnumerable<MysteryGift>)MGDB_G7GG : MGDB_G7)'                  8 => MGDB_G8'                  _ => Enumerable.Empty<MysteryGift>()              };
Magic Number,PKHeX.Core,MysteryGiftGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Generator\MysteryGiftGenerator.cs,GetTable,The following statement contains a magic number: return generation switch              {                  3 => MGDB_G3'                  4 => MGDB_G4'                  5 => MGDB_G5'                  6 => MGDB_G6'                  7 => (pkm.GG ? (IEnumerable<MysteryGift>)MGDB_G7GG : MGDB_G7)'                  8 => MGDB_G8'                  _ => Enumerable.Empty<MysteryGift>()              };
Magic Number,PKHeX.Core,MysteryGiftGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Generator\MysteryGiftGenerator.cs,GetTable,The following statement contains a magic number: return generation switch              {                  3 => MGDB_G3'                  4 => MGDB_G4'                  5 => MGDB_G5'                  6 => MGDB_G6'                  7 => (pkm.GG ? (IEnumerable<MysteryGift>)MGDB_G7GG : MGDB_G7)'                  8 => MGDB_G8'                  _ => Enumerable.Empty<MysteryGift>()              };
Magic Number,PKHeX.Core,EnhancedSummary,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Information\EncounterLearn.cs,GetSummaries,The following statement contains a magic number: switch (item)                  {                      case EncounterSlot s:                          var type = s.Type;                          if (type == 0)                          {                              yield return new EnhancedSummary(item);                              break;                          }                          for (int i = 0; i < sizeof(SlotType) * 8; i++)                          {                              var flag = (SlotType) (1 << i);                              if ((type & flag) != 0)                                  yield return new EnhancedSummary(item' flag.ToString());                          }                            break;                        default:                          yield return new EnhancedSummary(item);                          break;                  }
Magic Number,PKHeX.Core,EncounterSuggestion,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Information\EncounterSuggestion.cs,GetSuggestedEncounterEggMetLevel,The following statement contains a magic number: !pkm.IsNative && pkm.GenNumber < 5
Magic Number,PKHeX.Core,EncounterSuggestion,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Information\EncounterSuggestion.cs,GetSuggestedEncounterEggMetLevel,The following statement contains a magic number: return pkm.Format == 2 && pkm.Met_Location != 0 ? 1 : 0;
Magic Number,PKHeX.Core,EncounterSuggestion,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Information\EncounterSuggestion.cs,GetSuggestedEncounterEggMetLevel,The following statement contains a magic number: pkm.Format < 5
Magic Number,PKHeX.Core,EncounterSuggestion,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Information\EncounterSuggestion.cs,GetSuggestedEncounterEggLocationEgg,The following statement contains a magic number: switch (pkm.GenNumber)              {                  case 1:                  case 2:                  case 3:                      return 0;                  case 4:                      return traded ? Locations.LinkTrade4 : Locations.Daycare4;                  case 5:                      return traded ? Locations.LinkTrade5 : Locations.Daycare5;                  default:                      return traded ? Locations.LinkTrade6 : Locations.Daycare5;              }
Magic Number,PKHeX.Core,EncounterSuggestion,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Information\EncounterSuggestion.cs,GetSuggestedEncounterEggLocationEgg,The following statement contains a magic number: switch (pkm.GenNumber)              {                  case 1:                  case 2:                  case 3:                      return 0;                  case 4:                      return traded ? Locations.LinkTrade4 : Locations.Daycare4;                  case 5:                      return traded ? Locations.LinkTrade5 : Locations.Daycare5;                  default:                      return traded ? Locations.LinkTrade6 : Locations.Daycare5;              }
Magic Number,PKHeX.Core,EncounterSuggestion,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Information\EncounterSuggestion.cs,GetSuggestedEncounterEggLocationEgg,The following statement contains a magic number: switch (pkm.GenNumber)              {                  case 1:                  case 2:                  case 3:                      return 0;                  case 4:                      return traded ? Locations.LinkTrade4 : Locations.Daycare4;                  case 5:                      return traded ? Locations.LinkTrade5 : Locations.Daycare5;                  default:                      return traded ? Locations.LinkTrade6 : Locations.Daycare5;              }
Magic Number,PKHeX.Core,EncounterSuggestion,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Information\EncounterSuggestion.cs,GetSuggestedEncounterEggLocationEgg,The following statement contains a magic number: switch (pkm.GenNumber)              {                  case 1:                  case 2:                  case 3:                      return 0;                  case 4:                      return traded ? Locations.LinkTrade4 : Locations.Daycare4;                  case 5:                      return traded ? Locations.LinkTrade5 : Locations.Daycare5;                  default:                      return traded ? Locations.LinkTrade6 : Locations.Daycare5;              }
Magic Number,PKHeX.Core,EncounterSuggestion,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Information\EncounterSuggestion.cs,GetSuggestedEggMetLocation,The following statement contains a magic number: switch ((GameVersion)pkm.Version)              {                  case GameVersion.R:                  case GameVersion.S:                  case GameVersion.E:                  case GameVersion.FR:                  case GameVersion.LG:                      return pkm.Format switch                      {                          3 => (pkm.FRLG ? Locations.HatchLocationFRLG : Locations.HatchLocationRSE)'                          4 => Locations.Transfer3' // Pal Park                          _ => Locations.Transfer4'                      };                    case GameVersion.D:                  case GameVersion.P:                  case GameVersion.Pt:                      return pkm.Format > 4 ? Locations.Transfer4 /* Transporter */ : Locations.HatchLocationDPPt;                  case GameVersion.HG:                  case GameVersion.SS:                      return pkm.Format > 4 ? Locations.Transfer4 /* Transporter */ : Locations.HatchLocationHGSS;                    case GameVersion.B:                  case GameVersion.W:                  case GameVersion.B2:                  case GameVersion.W2:                      return Locations.HatchLocation5;                    case GameVersion.X:                  case GameVersion.Y:                      return Locations.HatchLocation6XY;                  case GameVersion.AS:                  case GameVersion.OR:                      return Locations.HatchLocation6AO;                    case GameVersion.SN:                  case GameVersion.MN:                  case GameVersion.US:                  case GameVersion.UM:                      return Locations.HatchLocation7;                    case GameVersion.SW:                  case GameVersion.SH:                      return Locations.HatchLocation8;                    case GameVersion.GD:                  case GameVersion.SV:                  case GameVersion.C:                  case GameVersion.GSC:                  case GameVersion.RBY:                      return pkm.Format > 2 ? Legal.Transfer2 : pkm.Met_Level == 0 ? 0 : Locations.HatchLocationC;              }
Magic Number,PKHeX.Core,EncounterSuggestion,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Information\EncounterSuggestion.cs,GetSuggestedEggMetLocation,The following statement contains a magic number: switch ((GameVersion)pkm.Version)              {                  case GameVersion.R:                  case GameVersion.S:                  case GameVersion.E:                  case GameVersion.FR:                  case GameVersion.LG:                      return pkm.Format switch                      {                          3 => (pkm.FRLG ? Locations.HatchLocationFRLG : Locations.HatchLocationRSE)'                          4 => Locations.Transfer3' // Pal Park                          _ => Locations.Transfer4'                      };                    case GameVersion.D:                  case GameVersion.P:                  case GameVersion.Pt:                      return pkm.Format > 4 ? Locations.Transfer4 /* Transporter */ : Locations.HatchLocationDPPt;                  case GameVersion.HG:                  case GameVersion.SS:                      return pkm.Format > 4 ? Locations.Transfer4 /* Transporter */ : Locations.HatchLocationHGSS;                    case GameVersion.B:                  case GameVersion.W:                  case GameVersion.B2:                  case GameVersion.W2:                      return Locations.HatchLocation5;                    case GameVersion.X:                  case GameVersion.Y:                      return Locations.HatchLocation6XY;                  case GameVersion.AS:                  case GameVersion.OR:                      return Locations.HatchLocation6AO;                    case GameVersion.SN:                  case GameVersion.MN:                  case GameVersion.US:                  case GameVersion.UM:                      return Locations.HatchLocation7;                    case GameVersion.SW:                  case GameVersion.SH:                      return Locations.HatchLocation8;                    case GameVersion.GD:                  case GameVersion.SV:                  case GameVersion.C:                  case GameVersion.GSC:                  case GameVersion.RBY:                      return pkm.Format > 2 ? Legal.Transfer2 : pkm.Met_Level == 0 ? 0 : Locations.HatchLocationC;              }
Magic Number,PKHeX.Core,EncounterSuggestion,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Information\EncounterSuggestion.cs,GetSuggestedEggMetLocation,The following statement contains a magic number: switch ((GameVersion)pkm.Version)              {                  case GameVersion.R:                  case GameVersion.S:                  case GameVersion.E:                  case GameVersion.FR:                  case GameVersion.LG:                      return pkm.Format switch                      {                          3 => (pkm.FRLG ? Locations.HatchLocationFRLG : Locations.HatchLocationRSE)'                          4 => Locations.Transfer3' // Pal Park                          _ => Locations.Transfer4'                      };                    case GameVersion.D:                  case GameVersion.P:                  case GameVersion.Pt:                      return pkm.Format > 4 ? Locations.Transfer4 /* Transporter */ : Locations.HatchLocationDPPt;                  case GameVersion.HG:                  case GameVersion.SS:                      return pkm.Format > 4 ? Locations.Transfer4 /* Transporter */ : Locations.HatchLocationHGSS;                    case GameVersion.B:                  case GameVersion.W:                  case GameVersion.B2:                  case GameVersion.W2:                      return Locations.HatchLocation5;                    case GameVersion.X:                  case GameVersion.Y:                      return Locations.HatchLocation6XY;                  case GameVersion.AS:                  case GameVersion.OR:                      return Locations.HatchLocation6AO;                    case GameVersion.SN:                  case GameVersion.MN:                  case GameVersion.US:                  case GameVersion.UM:                      return Locations.HatchLocation7;                    case GameVersion.SW:                  case GameVersion.SH:                      return Locations.HatchLocation8;                    case GameVersion.GD:                  case GameVersion.SV:                  case GameVersion.C:                  case GameVersion.GSC:                  case GameVersion.RBY:                      return pkm.Format > 2 ? Legal.Transfer2 : pkm.Met_Level == 0 ? 0 : Locations.HatchLocationC;              }
Magic Number,PKHeX.Core,EncounterSuggestion,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Information\EncounterSuggestion.cs,GetSuggestedEggMetLocation,The following statement contains a magic number: switch ((GameVersion)pkm.Version)              {                  case GameVersion.R:                  case GameVersion.S:                  case GameVersion.E:                  case GameVersion.FR:                  case GameVersion.LG:                      return pkm.Format switch                      {                          3 => (pkm.FRLG ? Locations.HatchLocationFRLG : Locations.HatchLocationRSE)'                          4 => Locations.Transfer3' // Pal Park                          _ => Locations.Transfer4'                      };                    case GameVersion.D:                  case GameVersion.P:                  case GameVersion.Pt:                      return pkm.Format > 4 ? Locations.Transfer4 /* Transporter */ : Locations.HatchLocationDPPt;                  case GameVersion.HG:                  case GameVersion.SS:                      return pkm.Format > 4 ? Locations.Transfer4 /* Transporter */ : Locations.HatchLocationHGSS;                    case GameVersion.B:                  case GameVersion.W:                  case GameVersion.B2:                  case GameVersion.W2:                      return Locations.HatchLocation5;                    case GameVersion.X:                  case GameVersion.Y:                      return Locations.HatchLocation6XY;                  case GameVersion.AS:                  case GameVersion.OR:                      return Locations.HatchLocation6AO;                    case GameVersion.SN:                  case GameVersion.MN:                  case GameVersion.US:                  case GameVersion.UM:                      return Locations.HatchLocation7;                    case GameVersion.SW:                  case GameVersion.SH:                      return Locations.HatchLocation8;                    case GameVersion.GD:                  case GameVersion.SV:                  case GameVersion.C:                  case GameVersion.GSC:                  case GameVersion.RBY:                      return pkm.Format > 2 ? Legal.Transfer2 : pkm.Met_Level == 0 ? 0 : Locations.HatchLocationC;              }
Magic Number,PKHeX.Core,EncounterSuggestion,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Information\EncounterSuggestion.cs,GetSuggestedEggMetLocation,The following statement contains a magic number: switch ((GameVersion)pkm.Version)              {                  case GameVersion.R:                  case GameVersion.S:                  case GameVersion.E:                  case GameVersion.FR:                  case GameVersion.LG:                      return pkm.Format switch                      {                          3 => (pkm.FRLG ? Locations.HatchLocationFRLG : Locations.HatchLocationRSE)'                          4 => Locations.Transfer3' // Pal Park                          _ => Locations.Transfer4'                      };                    case GameVersion.D:                  case GameVersion.P:                  case GameVersion.Pt:                      return pkm.Format > 4 ? Locations.Transfer4 /* Transporter */ : Locations.HatchLocationDPPt;                  case GameVersion.HG:                  case GameVersion.SS:                      return pkm.Format > 4 ? Locations.Transfer4 /* Transporter */ : Locations.HatchLocationHGSS;                    case GameVersion.B:                  case GameVersion.W:                  case GameVersion.B2:                  case GameVersion.W2:                      return Locations.HatchLocation5;                    case GameVersion.X:                  case GameVersion.Y:                      return Locations.HatchLocation6XY;                  case GameVersion.AS:                  case GameVersion.OR:                      return Locations.HatchLocation6AO;                    case GameVersion.SN:                  case GameVersion.MN:                  case GameVersion.US:                  case GameVersion.UM:                      return Locations.HatchLocation7;                    case GameVersion.SW:                  case GameVersion.SH:                      return Locations.HatchLocation8;                    case GameVersion.GD:                  case GameVersion.SV:                  case GameVersion.C:                  case GameVersion.GSC:                  case GameVersion.RBY:                      return pkm.Format > 2 ? Legal.Transfer2 : pkm.Met_Level == 0 ? 0 : Locations.HatchLocationC;              }
Magic Number,PKHeX.Core,EncounterSuggestion,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Information\EncounterSuggestion.cs,GetSuggestedTransferLocation,The following statement contains a magic number: return 30012;
Magic Number,PKHeX.Core,EncounterSuggestion,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Information\EncounterSuggestion.cs,GetSuggestedTransferLocation,The following statement contains a magic number: pkm.Format == 4
Magic Number,PKHeX.Core,EncounterSuggestion,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Information\EncounterSuggestion.cs,GetSuggestedTransferLocation,The following statement contains a magic number: pkm.GenNumber >= 5
Magic Number,PKHeX.Core,EncounterSuggestion,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Information\EncounterSuggestion.cs,GetSuggestedTransferLocation,The following statement contains a magic number: pkm.Format >= 5
Magic Number,PKHeX.Core,ValidEncounterMoves,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Information\ValidEncounterMoves.cs,AddEdgeCaseMoves,The following statement contains a magic number: switch (encounter)              {                  case EncounterStatic8N r when pkm.Met_Location == Encounters8Nest.SharedNest && !EncounterStatic8N.IsHighestLevelTier(pkm.Met_Level):                      moves.AddRange(MoveLevelUp.GetMovesLevelUp(pkm' r.Species' -1' -1' 60' r.Form' GameVersion.SW' false' 8));                      break;              }
Magic Number,PKHeX.Core,ValidEncounterMoves,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Information\ValidEncounterMoves.cs,AddEdgeCaseMoves,The following statement contains a magic number: switch (encounter)              {                  case EncounterStatic8N r when pkm.Met_Location == Encounters8Nest.SharedNest && !EncounterStatic8N.IsHighestLevelTier(pkm.Met_Level):                      moves.AddRange(MoveLevelUp.GetMovesLevelUp(pkm' r.Species' -1' -1' 60' r.Form' GameVersion.SW' false' 8));                      break;              }
Magic Number,PKHeX.Core,LevelUpRestriction,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Information\ValidEncounterMoves.cs,LevelUpRestriction,The following statement contains a magic number: MinimumLevelGen1 = info.Generation <= 2 ? info.EncounterMatch.LevelMin + 1 : 0;
Magic Number,PKHeX.Core,EncounterVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\EncounterVerifier.cs,GetEncounterVerifierMethod,The following statement contains a magic number: switch (pkm.GenNumber)              {                  case 1:                  case 2:                      return VerifyEncounterG12;                  default:                      return VerifyEncounter;              }
Magic Number,PKHeX.Core,EncounterVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\EncounterVerifier.cs,VerifyEncounterG12,The following statement contains a magic number: info.Generation == 2
Magic Number,PKHeX.Core,EncounterVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\EncounterVerifier.cs,VerifyWildEncounterCrystal,The following statement contains a magic number: switch (encounter.Type)              {                  case SlotType.Headbutt:                  case SlotType.Headbutt_Special:                      return VerifyWildEncounterCrystalHeadbutt(pkm' encounter);                    case SlotType.Old_Rod:                  case SlotType.Good_Rod:                  case SlotType.Super_Rod:                      switch (encounter.Location)                      {                          case 19: // National Park                              return new CheckResult(Severity.Invalid' LG2InvalidTilePark' CheckIdentifier.Encounter);                          case 76: // Route 14                              return new CheckResult(Severity.Invalid' LG2InvalidTileR14' CheckIdentifier.Encounter);                      }                      break;              }
Magic Number,PKHeX.Core,EncounterVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\EncounterVerifier.cs,VerifyWildEncounterCrystal,The following statement contains a magic number: switch (encounter.Type)              {                  case SlotType.Headbutt:                  case SlotType.Headbutt_Special:                      return VerifyWildEncounterCrystalHeadbutt(pkm' encounter);                    case SlotType.Old_Rod:                  case SlotType.Good_Rod:                  case SlotType.Super_Rod:                      switch (encounter.Location)                      {                          case 19: // National Park                              return new CheckResult(Severity.Invalid' LG2InvalidTilePark' CheckIdentifier.Encounter);                          case 76: // Route 14                              return new CheckResult(Severity.Invalid' LG2InvalidTileR14' CheckIdentifier.Encounter);                      }                      break;              }
Magic Number,PKHeX.Core,EncounterVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\EncounterVerifier.cs,VerifyEncounterEgg,The following statement contains a magic number: switch (pkm.GenNumber)              {                  case 1:                  case 2: return new CheckResult(CheckIdentifier.Encounter); // valid -- no met location info                  case 3: return pkm.Format != 3 ? VerifyEncounterEgg3Transfer(pkm) : VerifyEncounterEgg3(pkm);                  case 4: return pkm.IsEgg ? VerifyUnhatchedEgg(pkm' Locations.LinkTrade4) : VerifyEncounterEgg4(pkm);                  case 5: return pkm.IsEgg ? VerifyUnhatchedEgg(pkm' Locations.LinkTrade5) : VerifyEncounterEgg5(pkm);                  case 6: return pkm.IsEgg ? VerifyUnhatchedEgg(pkm' Locations.LinkTrade6) : VerifyEncounterEgg6(pkm);                  case 7: return pkm.IsEgg ? VerifyUnhatchedEgg(pkm' Locations.LinkTrade6) : VerifyEncounterEgg7(pkm);                  case 8: return pkm.IsEgg ? VerifyUnhatchedEgg(pkm' Locations.LinkTrade6) : VerifyEncounterEgg8(pkm);                    default: // none of the above                      return new CheckResult(Severity.Invalid' LEggLocationInvalid' CheckIdentifier.Encounter);              }
Magic Number,PKHeX.Core,EncounterVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\EncounterVerifier.cs,VerifyEncounterEgg,The following statement contains a magic number: switch (pkm.GenNumber)              {                  case 1:                  case 2: return new CheckResult(CheckIdentifier.Encounter); // valid -- no met location info                  case 3: return pkm.Format != 3 ? VerifyEncounterEgg3Transfer(pkm) : VerifyEncounterEgg3(pkm);                  case 4: return pkm.IsEgg ? VerifyUnhatchedEgg(pkm' Locations.LinkTrade4) : VerifyEncounterEgg4(pkm);                  case 5: return pkm.IsEgg ? VerifyUnhatchedEgg(pkm' Locations.LinkTrade5) : VerifyEncounterEgg5(pkm);                  case 6: return pkm.IsEgg ? VerifyUnhatchedEgg(pkm' Locations.LinkTrade6) : VerifyEncounterEgg6(pkm);                  case 7: return pkm.IsEgg ? VerifyUnhatchedEgg(pkm' Locations.LinkTrade6) : VerifyEncounterEgg7(pkm);                  case 8: return pkm.IsEgg ? VerifyUnhatchedEgg(pkm' Locations.LinkTrade6) : VerifyEncounterEgg8(pkm);                    default: // none of the above                      return new CheckResult(Severity.Invalid' LEggLocationInvalid' CheckIdentifier.Encounter);              }
Magic Number,PKHeX.Core,EncounterVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\EncounterVerifier.cs,VerifyEncounterEgg,The following statement contains a magic number: switch (pkm.GenNumber)              {                  case 1:                  case 2: return new CheckResult(CheckIdentifier.Encounter); // valid -- no met location info                  case 3: return pkm.Format != 3 ? VerifyEncounterEgg3Transfer(pkm) : VerifyEncounterEgg3(pkm);                  case 4: return pkm.IsEgg ? VerifyUnhatchedEgg(pkm' Locations.LinkTrade4) : VerifyEncounterEgg4(pkm);                  case 5: return pkm.IsEgg ? VerifyUnhatchedEgg(pkm' Locations.LinkTrade5) : VerifyEncounterEgg5(pkm);                  case 6: return pkm.IsEgg ? VerifyUnhatchedEgg(pkm' Locations.LinkTrade6) : VerifyEncounterEgg6(pkm);                  case 7: return pkm.IsEgg ? VerifyUnhatchedEgg(pkm' Locations.LinkTrade6) : VerifyEncounterEgg7(pkm);                  case 8: return pkm.IsEgg ? VerifyUnhatchedEgg(pkm' Locations.LinkTrade6) : VerifyEncounterEgg8(pkm);                    default: // none of the above                      return new CheckResult(Severity.Invalid' LEggLocationInvalid' CheckIdentifier.Encounter);              }
Magic Number,PKHeX.Core,EncounterVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\EncounterVerifier.cs,VerifyEncounterEgg,The following statement contains a magic number: switch (pkm.GenNumber)              {                  case 1:                  case 2: return new CheckResult(CheckIdentifier.Encounter); // valid -- no met location info                  case 3: return pkm.Format != 3 ? VerifyEncounterEgg3Transfer(pkm) : VerifyEncounterEgg3(pkm);                  case 4: return pkm.IsEgg ? VerifyUnhatchedEgg(pkm' Locations.LinkTrade4) : VerifyEncounterEgg4(pkm);                  case 5: return pkm.IsEgg ? VerifyUnhatchedEgg(pkm' Locations.LinkTrade5) : VerifyEncounterEgg5(pkm);                  case 6: return pkm.IsEgg ? VerifyUnhatchedEgg(pkm' Locations.LinkTrade6) : VerifyEncounterEgg6(pkm);                  case 7: return pkm.IsEgg ? VerifyUnhatchedEgg(pkm' Locations.LinkTrade6) : VerifyEncounterEgg7(pkm);                  case 8: return pkm.IsEgg ? VerifyUnhatchedEgg(pkm' Locations.LinkTrade6) : VerifyEncounterEgg8(pkm);                    default: // none of the above                      return new CheckResult(Severity.Invalid' LEggLocationInvalid' CheckIdentifier.Encounter);              }
Magic Number,PKHeX.Core,EncounterVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\EncounterVerifier.cs,VerifyEncounterEgg,The following statement contains a magic number: switch (pkm.GenNumber)              {                  case 1:                  case 2: return new CheckResult(CheckIdentifier.Encounter); // valid -- no met location info                  case 3: return pkm.Format != 3 ? VerifyEncounterEgg3Transfer(pkm) : VerifyEncounterEgg3(pkm);                  case 4: return pkm.IsEgg ? VerifyUnhatchedEgg(pkm' Locations.LinkTrade4) : VerifyEncounterEgg4(pkm);                  case 5: return pkm.IsEgg ? VerifyUnhatchedEgg(pkm' Locations.LinkTrade5) : VerifyEncounterEgg5(pkm);                  case 6: return pkm.IsEgg ? VerifyUnhatchedEgg(pkm' Locations.LinkTrade6) : VerifyEncounterEgg6(pkm);                  case 7: return pkm.IsEgg ? VerifyUnhatchedEgg(pkm' Locations.LinkTrade6) : VerifyEncounterEgg7(pkm);                  case 8: return pkm.IsEgg ? VerifyUnhatchedEgg(pkm' Locations.LinkTrade6) : VerifyEncounterEgg8(pkm);                    default: // none of the above                      return new CheckResult(Severity.Invalid' LEggLocationInvalid' CheckIdentifier.Encounter);              }
Magic Number,PKHeX.Core,EncounterVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\EncounterVerifier.cs,VerifyEncounterEgg,The following statement contains a magic number: switch (pkm.GenNumber)              {                  case 1:                  case 2: return new CheckResult(CheckIdentifier.Encounter); // valid -- no met location info                  case 3: return pkm.Format != 3 ? VerifyEncounterEgg3Transfer(pkm) : VerifyEncounterEgg3(pkm);                  case 4: return pkm.IsEgg ? VerifyUnhatchedEgg(pkm' Locations.LinkTrade4) : VerifyEncounterEgg4(pkm);                  case 5: return pkm.IsEgg ? VerifyUnhatchedEgg(pkm' Locations.LinkTrade5) : VerifyEncounterEgg5(pkm);                  case 6: return pkm.IsEgg ? VerifyUnhatchedEgg(pkm' Locations.LinkTrade6) : VerifyEncounterEgg6(pkm);                  case 7: return pkm.IsEgg ? VerifyUnhatchedEgg(pkm' Locations.LinkTrade6) : VerifyEncounterEgg7(pkm);                  case 8: return pkm.IsEgg ? VerifyUnhatchedEgg(pkm' Locations.LinkTrade6) : VerifyEncounterEgg8(pkm);                    default: // none of the above                      return new CheckResult(Severity.Invalid' LEggLocationInvalid' CheckIdentifier.Encounter);              }
Magic Number,PKHeX.Core,EncounterVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\EncounterVerifier.cs,VerifyEncounterEgg,The following statement contains a magic number: switch (pkm.GenNumber)              {                  case 1:                  case 2: return new CheckResult(CheckIdentifier.Encounter); // valid -- no met location info                  case 3: return pkm.Format != 3 ? VerifyEncounterEgg3Transfer(pkm) : VerifyEncounterEgg3(pkm);                  case 4: return pkm.IsEgg ? VerifyUnhatchedEgg(pkm' Locations.LinkTrade4) : VerifyEncounterEgg4(pkm);                  case 5: return pkm.IsEgg ? VerifyUnhatchedEgg(pkm' Locations.LinkTrade5) : VerifyEncounterEgg5(pkm);                  case 6: return pkm.IsEgg ? VerifyUnhatchedEgg(pkm' Locations.LinkTrade6) : VerifyEncounterEgg6(pkm);                  case 7: return pkm.IsEgg ? VerifyUnhatchedEgg(pkm' Locations.LinkTrade6) : VerifyEncounterEgg7(pkm);                  case 8: return pkm.IsEgg ? VerifyUnhatchedEgg(pkm' Locations.LinkTrade6) : VerifyEncounterEgg8(pkm);                    default: // none of the above                      return new CheckResult(Severity.Invalid' LEggLocationInvalid' CheckIdentifier.Encounter);              }
Magic Number,PKHeX.Core,EncounterVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\EncounterVerifier.cs,VerifyEncounterEgg,The following statement contains a magic number: switch (pkm.GenNumber)              {                  case 1:                  case 2: return new CheckResult(CheckIdentifier.Encounter); // valid -- no met location info                  case 3: return pkm.Format != 3 ? VerifyEncounterEgg3Transfer(pkm) : VerifyEncounterEgg3(pkm);                  case 4: return pkm.IsEgg ? VerifyUnhatchedEgg(pkm' Locations.LinkTrade4) : VerifyEncounterEgg4(pkm);                  case 5: return pkm.IsEgg ? VerifyUnhatchedEgg(pkm' Locations.LinkTrade5) : VerifyEncounterEgg5(pkm);                  case 6: return pkm.IsEgg ? VerifyUnhatchedEgg(pkm' Locations.LinkTrade6) : VerifyEncounterEgg6(pkm);                  case 7: return pkm.IsEgg ? VerifyUnhatchedEgg(pkm' Locations.LinkTrade6) : VerifyEncounterEgg7(pkm);                  case 8: return pkm.IsEgg ? VerifyUnhatchedEgg(pkm' Locations.LinkTrade6) : VerifyEncounterEgg8(pkm);                    default: // none of the above                      return new CheckResult(Severity.Invalid' LEggLocationInvalid' CheckIdentifier.Encounter);              }
Magic Number,PKHeX.Core,EncounterVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\EncounterVerifier.cs,VerifyEncounterEgg3,The following statement contains a magic number: return pkm.Format == 3 ? VerifyEncounterEgg3Native(pkm) : VerifyEncounterEgg3Transfer(pkm);
Magic Number,PKHeX.Core,EncounterVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\EncounterVerifier.cs,VerifyEncounterEgg3Transfer,The following statement contains a magic number: pkm.Met_Level < 5
Magic Number,PKHeX.Core,EncounterVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\EncounterVerifier.cs,VerifyEncounterEgg3Transfer,The following statement contains a magic number: pkm.Format == 4 && pkm.Met_Location != Locations.Transfer3
Magic Number,PKHeX.Core,EncounterVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\EncounterVerifier.cs,VerifyEncounterEgg3Transfer,The following statement contains a magic number: pkm.Format != 4 && pkm.Met_Location != Locations.Transfer4
Magic Number,PKHeX.Core,EncounterVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\EncounterVerifier.cs,VerifyEncounterEgg4,The following statement contains a magic number: pkm.Format == 4
Magic Number,PKHeX.Core,EncounterVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\EncounterVerifier.cs,VerifyEncounterEgg6,The following statement contains a magic number: pkm.Egg_Location == 318
Magic Number,PKHeX.Core,EncounterVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\EncounterVerifier.cs,VerifyUnhatchedEgg,The following statement contains a magic number: var eggLevel = pkm.Format < 5 ? 0 : 1;
Magic Number,PKHeX.Core,EncounterVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\EncounterVerifier.cs,VerifyEncounterWild,The following statement contains a magic number: switch (pkm.GenNumber)              {                  case 4:                      if (slot.Location == 193 && slot.Type == SlotType.Surf) // surfing in Johto Route 45                          return new CheckResult(Severity.Invalid' LG4InvalidTileR45Surf' CheckIdentifier.Encounter);                      break;              }
Magic Number,PKHeX.Core,EncounterVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\EncounterVerifier.cs,VerifyEncounterWild,The following statement contains a magic number: switch (pkm.GenNumber)              {                  case 4:                      if (slot.Location == 193 && slot.Type == SlotType.Surf) // surfing in Johto Route 45                          return new CheckResult(Severity.Invalid' LG4InvalidTileR45Surf' CheckIdentifier.Encounter);                      break;              }
Magic Number,PKHeX.Core,EncounterVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\EncounterVerifier.cs,VerifyEncounterStatic,The following statement contains a magic number: switch (pkm.GenNumber)              {                  case 3:                      if (s is EncounterStaticShadow w && w.EReader && pkm.Language != (int)LanguageID.Japanese) // Non-JP E-reader Pokemon                          return new CheckResult(Severity.Invalid' LG3EReader' CheckIdentifier.Encounter);                      if (pkm.Species == (int)Species.Mew && s.Location == 201 && pkm.Language != (int)LanguageID.Japanese) // Non-JP Mew (Old Sea Map)                          return new CheckResult(Severity.Invalid' LEncUnreleasedEMewJP' CheckIdentifier.Encounter);                      break;                  case 4:                      switch (pkm.Species)                      {                          case (int)Species.Darkrai when s.Location == 079 && !pkm.Pt: // DP Darkrai                              return new CheckResult(Severity.Invalid' LEncUnreleasedPtDarkrai' CheckIdentifier.Encounter);                          case (int)Species.Shaymin when s.Location == 063 && !pkm.Pt:// DP Shaymin                              return new CheckResult(Severity.Invalid' LEncUnreleasedPtShaymin' CheckIdentifier.Encounter);                          case (int)Species.Arceus when s.Location == 086: // Azure Flute Arceus                              return new CheckResult(Severity.Invalid' LEncUnreleasedHoOArceus' CheckIdentifier.Encounter);                      }                      if (s.Location == 193 && s is EncounterStaticTyped t && t.TypeEncounter == EncounterType.Surfing_Fishing) // Roaming pokemon surfing in Johto Route 45                          return new CheckResult(Severity.Invalid' LG4InvalidTileR45Surf' CheckIdentifier.Encounter);                      break;                  case 7:                      if (s.EggLocation == Locations.Daycare5 && pkm.RelearnMoves.Any(m => m != 0)) // eevee gift egg                          return new CheckResult(Severity.Invalid' LEncStaticRelearn' CheckIdentifier.RelearnMove); // not gift egg                      break;              }
Magic Number,PKHeX.Core,EncounterVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\EncounterVerifier.cs,VerifyEncounterStatic,The following statement contains a magic number: switch (pkm.GenNumber)              {                  case 3:                      if (s is EncounterStaticShadow w && w.EReader && pkm.Language != (int)LanguageID.Japanese) // Non-JP E-reader Pokemon                          return new CheckResult(Severity.Invalid' LG3EReader' CheckIdentifier.Encounter);                      if (pkm.Species == (int)Species.Mew && s.Location == 201 && pkm.Language != (int)LanguageID.Japanese) // Non-JP Mew (Old Sea Map)                          return new CheckResult(Severity.Invalid' LEncUnreleasedEMewJP' CheckIdentifier.Encounter);                      break;                  case 4:                      switch (pkm.Species)                      {                          case (int)Species.Darkrai when s.Location == 079 && !pkm.Pt: // DP Darkrai                              return new CheckResult(Severity.Invalid' LEncUnreleasedPtDarkrai' CheckIdentifier.Encounter);                          case (int)Species.Shaymin when s.Location == 063 && !pkm.Pt:// DP Shaymin                              return new CheckResult(Severity.Invalid' LEncUnreleasedPtShaymin' CheckIdentifier.Encounter);                          case (int)Species.Arceus when s.Location == 086: // Azure Flute Arceus                              return new CheckResult(Severity.Invalid' LEncUnreleasedHoOArceus' CheckIdentifier.Encounter);                      }                      if (s.Location == 193 && s is EncounterStaticTyped t && t.TypeEncounter == EncounterType.Surfing_Fishing) // Roaming pokemon surfing in Johto Route 45                          return new CheckResult(Severity.Invalid' LG4InvalidTileR45Surf' CheckIdentifier.Encounter);                      break;                  case 7:                      if (s.EggLocation == Locations.Daycare5 && pkm.RelearnMoves.Any(m => m != 0)) // eevee gift egg                          return new CheckResult(Severity.Invalid' LEncStaticRelearn' CheckIdentifier.RelearnMove); // not gift egg                      break;              }
Magic Number,PKHeX.Core,EncounterVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\EncounterVerifier.cs,VerifyEncounterStatic,The following statement contains a magic number: switch (pkm.GenNumber)              {                  case 3:                      if (s is EncounterStaticShadow w && w.EReader && pkm.Language != (int)LanguageID.Japanese) // Non-JP E-reader Pokemon                          return new CheckResult(Severity.Invalid' LG3EReader' CheckIdentifier.Encounter);                      if (pkm.Species == (int)Species.Mew && s.Location == 201 && pkm.Language != (int)LanguageID.Japanese) // Non-JP Mew (Old Sea Map)                          return new CheckResult(Severity.Invalid' LEncUnreleasedEMewJP' CheckIdentifier.Encounter);                      break;                  case 4:                      switch (pkm.Species)                      {                          case (int)Species.Darkrai when s.Location == 079 && !pkm.Pt: // DP Darkrai                              return new CheckResult(Severity.Invalid' LEncUnreleasedPtDarkrai' CheckIdentifier.Encounter);                          case (int)Species.Shaymin when s.Location == 063 && !pkm.Pt:// DP Shaymin                              return new CheckResult(Severity.Invalid' LEncUnreleasedPtShaymin' CheckIdentifier.Encounter);                          case (int)Species.Arceus when s.Location == 086: // Azure Flute Arceus                              return new CheckResult(Severity.Invalid' LEncUnreleasedHoOArceus' CheckIdentifier.Encounter);                      }                      if (s.Location == 193 && s is EncounterStaticTyped t && t.TypeEncounter == EncounterType.Surfing_Fishing) // Roaming pokemon surfing in Johto Route 45                          return new CheckResult(Severity.Invalid' LG4InvalidTileR45Surf' CheckIdentifier.Encounter);                      break;                  case 7:                      if (s.EggLocation == Locations.Daycare5 && pkm.RelearnMoves.Any(m => m != 0)) // eevee gift egg                          return new CheckResult(Severity.Invalid' LEncStaticRelearn' CheckIdentifier.RelearnMove); // not gift egg                      break;              }
Magic Number,PKHeX.Core,EncounterVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\EncounterVerifier.cs,VerifyEncounterStatic,The following statement contains a magic number: switch (pkm.GenNumber)              {                  case 3:                      if (s is EncounterStaticShadow w && w.EReader && pkm.Language != (int)LanguageID.Japanese) // Non-JP E-reader Pokemon                          return new CheckResult(Severity.Invalid' LG3EReader' CheckIdentifier.Encounter);                      if (pkm.Species == (int)Species.Mew && s.Location == 201 && pkm.Language != (int)LanguageID.Japanese) // Non-JP Mew (Old Sea Map)                          return new CheckResult(Severity.Invalid' LEncUnreleasedEMewJP' CheckIdentifier.Encounter);                      break;                  case 4:                      switch (pkm.Species)                      {                          case (int)Species.Darkrai when s.Location == 079 && !pkm.Pt: // DP Darkrai                              return new CheckResult(Severity.Invalid' LEncUnreleasedPtDarkrai' CheckIdentifier.Encounter);                          case (int)Species.Shaymin when s.Location == 063 && !pkm.Pt:// DP Shaymin                              return new CheckResult(Severity.Invalid' LEncUnreleasedPtShaymin' CheckIdentifier.Encounter);                          case (int)Species.Arceus when s.Location == 086: // Azure Flute Arceus                              return new CheckResult(Severity.Invalid' LEncUnreleasedHoOArceus' CheckIdentifier.Encounter);                      }                      if (s.Location == 193 && s is EncounterStaticTyped t && t.TypeEncounter == EncounterType.Surfing_Fishing) // Roaming pokemon surfing in Johto Route 45                          return new CheckResult(Severity.Invalid' LG4InvalidTileR45Surf' CheckIdentifier.Encounter);                      break;                  case 7:                      if (s.EggLocation == Locations.Daycare5 && pkm.RelearnMoves.Any(m => m != 0)) // eevee gift egg                          return new CheckResult(Severity.Invalid' LEncStaticRelearn' CheckIdentifier.RelearnMove); // not gift egg                      break;              }
Magic Number,PKHeX.Core,EncounterVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\EncounterVerifier.cs,VerifyEncounterStatic,The following statement contains a magic number: switch (pkm.GenNumber)              {                  case 3:                      if (s is EncounterStaticShadow w && w.EReader && pkm.Language != (int)LanguageID.Japanese) // Non-JP E-reader Pokemon                          return new CheckResult(Severity.Invalid' LG3EReader' CheckIdentifier.Encounter);                      if (pkm.Species == (int)Species.Mew && s.Location == 201 && pkm.Language != (int)LanguageID.Japanese) // Non-JP Mew (Old Sea Map)                          return new CheckResult(Severity.Invalid' LEncUnreleasedEMewJP' CheckIdentifier.Encounter);                      break;                  case 4:                      switch (pkm.Species)                      {                          case (int)Species.Darkrai when s.Location == 079 && !pkm.Pt: // DP Darkrai                              return new CheckResult(Severity.Invalid' LEncUnreleasedPtDarkrai' CheckIdentifier.Encounter);                          case (int)Species.Shaymin when s.Location == 063 && !pkm.Pt:// DP Shaymin                              return new CheckResult(Severity.Invalid' LEncUnreleasedPtShaymin' CheckIdentifier.Encounter);                          case (int)Species.Arceus when s.Location == 086: // Azure Flute Arceus                              return new CheckResult(Severity.Invalid' LEncUnreleasedHoOArceus' CheckIdentifier.Encounter);                      }                      if (s.Location == 193 && s is EncounterStaticTyped t && t.TypeEncounter == EncounterType.Surfing_Fishing) // Roaming pokemon surfing in Johto Route 45                          return new CheckResult(Severity.Invalid' LG4InvalidTileR45Surf' CheckIdentifier.Encounter);                      break;                  case 7:                      if (s.EggLocation == Locations.Daycare5 && pkm.RelearnMoves.Any(m => m != 0)) // eevee gift egg                          return new CheckResult(Severity.Invalid' LEncStaticRelearn' CheckIdentifier.RelearnMove); // not gift egg                      break;              }
Magic Number,PKHeX.Core,EncounterVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\EncounterVerifier.cs,VerifyEncounterStatic,The following statement contains a magic number: switch (pkm.GenNumber)              {                  case 3:                      if (s is EncounterStaticShadow w && w.EReader && pkm.Language != (int)LanguageID.Japanese) // Non-JP E-reader Pokemon                          return new CheckResult(Severity.Invalid' LG3EReader' CheckIdentifier.Encounter);                      if (pkm.Species == (int)Species.Mew && s.Location == 201 && pkm.Language != (int)LanguageID.Japanese) // Non-JP Mew (Old Sea Map)                          return new CheckResult(Severity.Invalid' LEncUnreleasedEMewJP' CheckIdentifier.Encounter);                      break;                  case 4:                      switch (pkm.Species)                      {                          case (int)Species.Darkrai when s.Location == 079 && !pkm.Pt: // DP Darkrai                              return new CheckResult(Severity.Invalid' LEncUnreleasedPtDarkrai' CheckIdentifier.Encounter);                          case (int)Species.Shaymin when s.Location == 063 && !pkm.Pt:// DP Shaymin                              return new CheckResult(Severity.Invalid' LEncUnreleasedPtShaymin' CheckIdentifier.Encounter);                          case (int)Species.Arceus when s.Location == 086: // Azure Flute Arceus                              return new CheckResult(Severity.Invalid' LEncUnreleasedHoOArceus' CheckIdentifier.Encounter);                      }                      if (s.Location == 193 && s is EncounterStaticTyped t && t.TypeEncounter == EncounterType.Surfing_Fishing) // Roaming pokemon surfing in Johto Route 45                          return new CheckResult(Severity.Invalid' LG4InvalidTileR45Surf' CheckIdentifier.Encounter);                      break;                  case 7:                      if (s.EggLocation == Locations.Daycare5 && pkm.RelearnMoves.Any(m => m != 0)) // eevee gift egg                          return new CheckResult(Severity.Invalid' LEncStaticRelearn' CheckIdentifier.RelearnMove); // not gift egg                      break;              }
Magic Number,PKHeX.Core,EncounterVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\EncounterVerifier.cs,VerifyEncounterStatic,The following statement contains a magic number: switch (pkm.GenNumber)              {                  case 3:                      if (s is EncounterStaticShadow w && w.EReader && pkm.Language != (int)LanguageID.Japanese) // Non-JP E-reader Pokemon                          return new CheckResult(Severity.Invalid' LG3EReader' CheckIdentifier.Encounter);                      if (pkm.Species == (int)Species.Mew && s.Location == 201 && pkm.Language != (int)LanguageID.Japanese) // Non-JP Mew (Old Sea Map)                          return new CheckResult(Severity.Invalid' LEncUnreleasedEMewJP' CheckIdentifier.Encounter);                      break;                  case 4:                      switch (pkm.Species)                      {                          case (int)Species.Darkrai when s.Location == 079 && !pkm.Pt: // DP Darkrai                              return new CheckResult(Severity.Invalid' LEncUnreleasedPtDarkrai' CheckIdentifier.Encounter);                          case (int)Species.Shaymin when s.Location == 063 && !pkm.Pt:// DP Shaymin                              return new CheckResult(Severity.Invalid' LEncUnreleasedPtShaymin' CheckIdentifier.Encounter);                          case (int)Species.Arceus when s.Location == 086: // Azure Flute Arceus                              return new CheckResult(Severity.Invalid' LEncUnreleasedHoOArceus' CheckIdentifier.Encounter);                      }                      if (s.Location == 193 && s is EncounterStaticTyped t && t.TypeEncounter == EncounterType.Surfing_Fishing) // Roaming pokemon surfing in Johto Route 45                          return new CheckResult(Severity.Invalid' LG4InvalidTileR45Surf' CheckIdentifier.Encounter);                      break;                  case 7:                      if (s.EggLocation == Locations.Daycare5 && pkm.RelearnMoves.Any(m => m != 0)) // eevee gift egg                          return new CheckResult(Severity.Invalid' LEncStaticRelearn' CheckIdentifier.RelearnMove); // not gift egg                      break;              }
Magic Number,PKHeX.Core,EncounterVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\EncounterVerifier.cs,VerifyEncounterStatic,The following statement contains a magic number: switch (pkm.GenNumber)              {                  case 3:                      if (s is EncounterStaticShadow w && w.EReader && pkm.Language != (int)LanguageID.Japanese) // Non-JP E-reader Pokemon                          return new CheckResult(Severity.Invalid' LG3EReader' CheckIdentifier.Encounter);                      if (pkm.Species == (int)Species.Mew && s.Location == 201 && pkm.Language != (int)LanguageID.Japanese) // Non-JP Mew (Old Sea Map)                          return new CheckResult(Severity.Invalid' LEncUnreleasedEMewJP' CheckIdentifier.Encounter);                      break;                  case 4:                      switch (pkm.Species)                      {                          case (int)Species.Darkrai when s.Location == 079 && !pkm.Pt: // DP Darkrai                              return new CheckResult(Severity.Invalid' LEncUnreleasedPtDarkrai' CheckIdentifier.Encounter);                          case (int)Species.Shaymin when s.Location == 063 && !pkm.Pt:// DP Shaymin                              return new CheckResult(Severity.Invalid' LEncUnreleasedPtShaymin' CheckIdentifier.Encounter);                          case (int)Species.Arceus when s.Location == 086: // Azure Flute Arceus                              return new CheckResult(Severity.Invalid' LEncUnreleasedHoOArceus' CheckIdentifier.Encounter);                      }                      if (s.Location == 193 && s is EncounterStaticTyped t && t.TypeEncounter == EncounterType.Surfing_Fishing) // Roaming pokemon surfing in Johto Route 45                          return new CheckResult(Severity.Invalid' LG4InvalidTileR45Surf' CheckIdentifier.Encounter);                      break;                  case 7:                      if (s.EggLocation == Locations.Daycare5 && pkm.RelearnMoves.Any(m => m != 0)) // eevee gift egg                          return new CheckResult(Severity.Invalid' LEncStaticRelearn' CheckIdentifier.RelearnMove); // not gift egg                      break;              }
Magic Number,PKHeX.Core,EvolutionVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\EvolutionVerifier.cs,IsValidEvolution,The following statement contains a magic number: info.EncounterMatch.EggEncounter && species == 350 && pkm.Format >= 5 && !pkm.IsUntraded
Magic Number,PKHeX.Core,EvolutionVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\EvolutionVerifier.cs,IsValidEvolution,The following statement contains a magic number: info.EncounterMatch.EggEncounter && species == 350 && pkm.Format >= 5 && !pkm.IsUntraded
Magic Number,PKHeX.Core,EvolutionVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\EvolutionVerifier.cs,IsEvolvedChangedFormValid,The following statement contains a magic number: switch (currentForm)              {                  case 0 when Legal.GalarForm0Evolutions.TryGetValue(species' out var val):                      return originalForm == val;                  case 1 when Legal.AlolanVariantEvolutions12.Contains(species):                  case 1 when Legal.GalarVariantFormEvolutions.Contains(species):                      return originalForm == 0;                  case 2 when species == (int)Species.Darmanitan:                      return originalForm == 1;                  default:                      return false;              }
Magic Number,PKHeX.Core,MysteryGiftVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\MysteryGiftVerifier.cs,GetRestriction,The following statement contains a magic number: var restrict = BitConverter.ToInt32(data' i + 4);
Magic Number,PKHeX.Core,MysteryGiftVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\MysteryGiftVerifier.cs,VerifyGift,The following statement contains a magic number: var ver = (int)val >> 16;
Magic Number,PKHeX.Core,MysteryGiftVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\MysteryGiftVerifier.cs,CurrentOTMatchesReplaced,The following statement contains a magic number: format <= 4 && IsMatchName(pkOtName' 4)
Magic Number,PKHeX.Core,MysteryGiftVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\MysteryGiftVerifier.cs,CurrentOTMatchesReplaced,The following statement contains a magic number: format <= 4 && IsMatchName(pkOtName' 4)
Magic Number,PKHeX.Core,MysteryGiftVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\MysteryGiftVerifier.cs,CurrentOTMatchesReplaced,The following statement contains a magic number: format <= 5 && IsMatchName(pkOtName' 5)
Magic Number,PKHeX.Core,MysteryGiftVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\MysteryGiftVerifier.cs,CurrentOTMatchesReplaced,The following statement contains a magic number: format <= 5 && IsMatchName(pkOtName' 5)
Magic Number,PKHeX.Core,MysteryGiftVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\MysteryGiftVerifier.cs,CurrentOTMatchesReplaced,The following statement contains a magic number: format <= 6 && IsMatchName(pkOtName' 6)
Magic Number,PKHeX.Core,MysteryGiftVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\MysteryGiftVerifier.cs,CurrentOTMatchesReplaced,The following statement contains a magic number: format <= 6 && IsMatchName(pkOtName' 6)
Magic Number,PKHeX.Core,MysteryGiftVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\MysteryGiftVerifier.cs,CurrentOTMatchesReplaced,The following statement contains a magic number: format <= 7 && IsMatchName(pkOtName' 7)
Magic Number,PKHeX.Core,MysteryGiftVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\MysteryGiftVerifier.cs,CurrentOTMatchesReplaced,The following statement contains a magic number: format <= 7 && IsMatchName(pkOtName' 7)
Magic Number,PKHeX.Core,VerifyCurrentMoves,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\VerifyCurrentMoves.cs,ParseMovesForEncounters,The following statement contains a magic number: pkm.Species == 235
Magic Number,PKHeX.Core,VerifyCurrentMoves,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\VerifyCurrentMoves.cs,ParseMovesForEncounters,The following statement contains a magic number: defaultG2LevelMoves = info.EncounterMoves.LevelUpMoves[2];
Magic Number,PKHeX.Core,VerifyCurrentMoves,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\VerifyCurrentMoves.cs,ParseMovesForEncounters,The following statement contains a magic number: pkm.InhabitedGeneration(2)
Magic Number,PKHeX.Core,VerifyCurrentMoves,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\VerifyCurrentMoves.cs,ParseMovesForEncounters,The following statement contains a magic number: !ParseSettings.AllowGen2MoveReminder(pkm) && pkm.InhabitedGeneration(2)
Magic Number,PKHeX.Core,VerifyCurrentMoves,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\VerifyCurrentMoves.cs,ParseMovesForEncounters,The following statement contains a magic number: info.EncounterMatch is IGeneration g && g.Generation <= 2
Magic Number,PKHeX.Core,VerifyCurrentMoves,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\VerifyCurrentMoves.cs,ParseMovesForEncounters,The following statement contains a magic number: var res = info.Generation < 6                  ? ParseMovesPre3DS(pkm' Moves' info)                  : ParseMoves3DS(pkm' Moves' info);
Magic Number,PKHeX.Core,VerifyCurrentMoves,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\VerifyCurrentMoves.cs,ParseMovesForEncounters,The following statement contains a magic number: info.EncounterMoves.LevelUpMoves[2] = defaultG2LevelMoves;
Magic Number,PKHeX.Core,VerifyCurrentMoves,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\VerifyCurrentMoves.cs,ParseMovesForEncounters,The following statement contains a magic number: pkm.InhabitedGeneration(2)
Magic Number,PKHeX.Core,VerifyCurrentMoves,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\VerifyCurrentMoves.cs,ParseMovesForSmeargle,The following statement contains a magic number: levelup[pkm.Format] = new List<int>(1) {166};
Magic Number,PKHeX.Core,VerifyCurrentMoves,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\VerifyCurrentMoves.cs,ParseMovesWasEggPreRelearn,The following statement contains a magic number: int BaseLevel = AllowLevelUp ? 100 : e.LevelMin;
Magic Number,PKHeX.Core,VerifyCurrentMoves,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\VerifyCurrentMoves.cs,ParseMovesWasEggPreRelearn,The following statement contains a magic number: var TradebackPreevo = pkm.Format == 2 && info.EncounterMatch.Species > 151;
Magic Number,PKHeX.Core,VerifyCurrentMoves,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\VerifyCurrentMoves.cs,ParseMovesWasEggPreRelearn,The following statement contains a magic number: var TradebackPreevo = pkm.Format == 2 && info.EncounterMatch.Species > 151;
Magic Number,PKHeX.Core,VerifyCurrentMoves,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\VerifyCurrentMoves.cs,ParseMovesWasEggPreRelearn,The following statement contains a magic number: var NonTradebackLvlMoves = TradebackPreevo                  ? Legal.GetExclusivePreEvolutionMoves(pkm' info.EncounterMatch.Species' info.EvoChainsAllGens[2]' 2' e.Version).Where(m => m > Legal.MaxMoveID_1).ToArray()                  : Array.Empty<int>();
Magic Number,PKHeX.Core,VerifyCurrentMoves,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\VerifyCurrentMoves.cs,ParseMovesWasEggPreRelearn,The following statement contains a magic number: var NonTradebackLvlMoves = TradebackPreevo                  ? Legal.GetExclusivePreEvolutionMoves(pkm' info.EncounterMatch.Species' info.EvoChainsAllGens[2]' 2' e.Version).Where(m => m > Legal.MaxMoveID_1).ToArray()                  : Array.Empty<int>();
Magic Number,PKHeX.Core,VerifyCurrentMoves,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\VerifyCurrentMoves.cs,ParseMovesWasEggPreRelearn,The following statement contains a magic number: info.Generation < 3 && pkm.Format >= 7 && pkm.VC1
Magic Number,PKHeX.Core,VerifyCurrentMoves,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\VerifyCurrentMoves.cs,ParseMovesWasEggPreRelearn,The following statement contains a magic number: info.Generation < 3 && pkm.Format >= 7 && pkm.VC1
Magic Number,PKHeX.Core,VerifyCurrentMoves,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\VerifyCurrentMoves.cs,ParseMovesWasEggPreRelearn,The following statement contains a magic number: bool volt = (info.Generation > 3 || e.Version == GameVersion.E) && Legal.LightBall.Contains(pkm.Species);
Magic Number,PKHeX.Core,VerifyCurrentMoves,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\VerifyCurrentMoves.cs,ParseMovesWasEggPreRelearn,The following statement contains a magic number: var Special = volt && notEvent ? new[] { 344 } : Array.Empty<int>();
Magic Number,PKHeX.Core,VerifyCurrentMoves,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\VerifyCurrentMoves.cs,ParseMovesSketch,The following statement contains a magic number: var res = new CheckMoveResult[4];
Magic Number,PKHeX.Core,VerifyCurrentMoves,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\VerifyCurrentMoves.cs,ParseMovesSketch,The following statement contains a magic number: i < 4
Magic Number,PKHeX.Core,VerifyCurrentMoves,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\VerifyCurrentMoves.cs,ParseMoves3DS,The following statement contains a magic number: info.EncounterMoves.Relearn = info.Generation >= 6 ? pkm.RelearnMoves : Array.Empty<int>();
Magic Number,PKHeX.Core,VerifyCurrentMoves,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\VerifyCurrentMoves.cs,ParseMovesPre3DS,The following statement contains a magic number: info.Generation <= 2 && info.EncounterMatch is IGeneration g && (g.Generation == 1 || (g.Generation == 2 && !ParseSettings.AllowGen2MoveReminder(pkm)))
Magic Number,PKHeX.Core,VerifyCurrentMoves,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\VerifyCurrentMoves.cs,ParseMovesPre3DS,The following statement contains a magic number: info.Generation <= 2 && info.EncounterMatch is IGeneration g && (g.Generation == 1 || (g.Generation == 2 && !ParseSettings.AllowGen2MoveReminder(pkm)))
Magic Number,PKHeX.Core,VerifyCurrentMoves,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\VerifyCurrentMoves.cs,ParseMovesGenGB,The following statement contains a magic number: var res = new CheckMoveResult[4];
Magic Number,PKHeX.Core,VerifyCurrentMoves,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\VerifyCurrentMoves.cs,ParseMovesRelearn,The following statement contains a magic number: i < 4
Magic Number,PKHeX.Core,VerifyCurrentMoves,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\VerifyCurrentMoves.cs,ParseMoves,The following statement contains a magic number: var res = new CheckMoveResult[4];
Magic Number,PKHeX.Core,VerifyCurrentMoves,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\VerifyCurrentMoves.cs,ParseMoves,The following statement contains a magic number: m < 4
Magic Number,PKHeX.Core,VerifyCurrentMoves,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\VerifyCurrentMoves.cs,ParseMoves,The following statement contains a magic number: pkm.Format <= 2
Magic Number,PKHeX.Core,VerifyCurrentMoves,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\VerifyCurrentMoves.cs,ParseMoves,The following statement contains a magic number: pkm.Species == 292 && info.Generation <= 4
Magic Number,PKHeX.Core,VerifyCurrentMoves,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\VerifyCurrentMoves.cs,ParseMoves,The following statement contains a magic number: pkm.Species == 292 && info.Generation <= 4
Magic Number,PKHeX.Core,VerifyCurrentMoves,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\VerifyCurrentMoves.cs,ParseMoves,The following statement contains a magic number: m < 4
Magic Number,PKHeX.Core,VerifyCurrentMoves,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\VerifyCurrentMoves.cs,ParseMovesByGeneration,The following statement contains a magic number: switch (gen)              {                  case 1:                  case 2:                      ParseMovesByGeneration12(pkm' res' learnInfo.Source.CurrentMoves' gen' info' learnInfo);                      break;                    case 3:                  case 4:                      if (pkm.Format > gen)                          FlagIncompatibleTransferHMs45(res' learnInfo.Source.CurrentMoves' gen' HMLearned' KnowDefogWhirlpool);                      break;              }
Magic Number,PKHeX.Core,VerifyCurrentMoves,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\VerifyCurrentMoves.cs,ParseMovesByGeneration,The following statement contains a magic number: switch (gen)              {                  case 1:                  case 2:                      ParseMovesByGeneration12(pkm' res' learnInfo.Source.CurrentMoves' gen' info' learnInfo);                      break;                    case 3:                  case 4:                      if (pkm.Format > gen)                          FlagIncompatibleTransferHMs45(res' learnInfo.Source.CurrentMoves' gen' HMLearned' KnowDefogWhirlpool);                      break;              }
Magic Number,PKHeX.Core,VerifyCurrentMoves,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\VerifyCurrentMoves.cs,ParseMovesByGeneration,The following statement contains a magic number: switch (gen)              {                  case 1:                  case 2:                      ParseMovesByGeneration12(pkm' res' learnInfo.Source.CurrentMoves' gen' info' learnInfo);                      break;                    case 3:                  case 4:                      if (pkm.Format > gen)                          FlagIncompatibleTransferHMs45(res' learnInfo.Source.CurrentMoves' gen' HMLearned' KnowDefogWhirlpool);                      break;              }
Magic Number,PKHeX.Core,VerifyCurrentMoves,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\VerifyCurrentMoves.cs,ParseMovesByGeneration,The following statement contains a magic number: gen == 2 && !native && move > Legal.MaxMoveID_1 && pkm.VC1
Magic Number,PKHeX.Core,VerifyCurrentMoves,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\VerifyCurrentMoves.cs,ParseMovesByGeneration,The following statement contains a magic number: gen == 2 && learnInfo.Source.EggMoveSource.Contains(move)
Magic Number,PKHeX.Core,VerifyCurrentMoves,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\VerifyCurrentMoves.cs,ParseMovesByGeneration,The following statement contains a magic number: gen <= 2
Magic Number,PKHeX.Core,VerifyCurrentMoves,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\VerifyCurrentMoves.cs,ParseMovesByGeneration,The following statement contains a magic number: gen >= 3 || !IsCheckValid(res[m])
Magic Number,PKHeX.Core,VerifyCurrentMoves,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\VerifyCurrentMoves.cs,ParseMovesByGeneration,The following statement contains a magic number: gen == 2 && learnInfo.Source.NonTradeBackLevelUpMoves.Contains(m)
Magic Number,PKHeX.Core,VerifyCurrentMoves,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\VerifyCurrentMoves.cs,ParseMovesByGeneration,The following statement contains a magic number: m < 4
Magic Number,PKHeX.Core,VerifyCurrentMoves,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\VerifyCurrentMoves.cs,GetIsSharedEggMove,The following statement contains a magic number: gen < 8 || pkm.IsEgg
Magic Number,PKHeX.Core,VerifyCurrentMoves,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\VerifyCurrentMoves.cs,ParseEggMovesInherited,The following statement contains a magic number: m < 4
Magic Number,PKHeX.Core,VerifyCurrentMoves,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\VerifyCurrentMoves.cs,ParseEggMoves,The following statement contains a magic number: m < 4
Magic Number,PKHeX.Core,VerifyCurrentMoves,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\VerifyCurrentMoves.cs,ParseRedYellowIncompatibleMoves,The following statement contains a magic number: m < 4
Magic Number,PKHeX.Core,VerifyCurrentMoves,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\VerifyCurrentMoves.cs,GetIncompatibleRBYMoves,The following statement contains a magic number: switch (pkm.Species)              {                  // Vaporeon in Yellow learns Mist and Haze at level 42' Mist can only be learned if it leveled up in the daycare                  // Vaporeon in Red/Blue learns Acid Armor at level 42 and level 47 in Yellow                  case (int)Species.Vaporeon when pkm.CurrentLevel < 47 && moves.Contains(151):                  {                      var incompatible = new List<int>(3);                      if (moves.Contains(54))                          incompatible.Add(54);                      if (moves.Contains(114))                          incompatible.Add(114);                      if (incompatible.Count != 0)                          incompatible.Add(151);                      return incompatible;                  }                    // Flareon in Yellow learns Smog at level 42                  // Flareon in Red Blue learns Leer at level 42 and level 47 in Yellow                  case (int)Species.Flareon when pkm.CurrentLevel < 47 && moves.Contains(43) && moves.Contains(123):                      return new[] {43' 123};                    default: return Array.Empty<int>();              }
Magic Number,PKHeX.Core,VerifyCurrentMoves,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\VerifyCurrentMoves.cs,GetIncompatibleRBYMoves,The following statement contains a magic number: switch (pkm.Species)              {                  // Vaporeon in Yellow learns Mist and Haze at level 42' Mist can only be learned if it leveled up in the daycare                  // Vaporeon in Red/Blue learns Acid Armor at level 42 and level 47 in Yellow                  case (int)Species.Vaporeon when pkm.CurrentLevel < 47 && moves.Contains(151):                  {                      var incompatible = new List<int>(3);                      if (moves.Contains(54))                          incompatible.Add(54);                      if (moves.Contains(114))                          incompatible.Add(114);                      if (incompatible.Count != 0)                          incompatible.Add(151);                      return incompatible;                  }                    // Flareon in Yellow learns Smog at level 42                  // Flareon in Red Blue learns Leer at level 42 and level 47 in Yellow                  case (int)Species.Flareon when pkm.CurrentLevel < 47 && moves.Contains(43) && moves.Contains(123):                      return new[] {43' 123};                    default: return Array.Empty<int>();              }
Magic Number,PKHeX.Core,VerifyCurrentMoves,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\VerifyCurrentMoves.cs,GetIncompatibleRBYMoves,The following statement contains a magic number: switch (pkm.Species)              {                  // Vaporeon in Yellow learns Mist and Haze at level 42' Mist can only be learned if it leveled up in the daycare                  // Vaporeon in Red/Blue learns Acid Armor at level 42 and level 47 in Yellow                  case (int)Species.Vaporeon when pkm.CurrentLevel < 47 && moves.Contains(151):                  {                      var incompatible = new List<int>(3);                      if (moves.Contains(54))                          incompatible.Add(54);                      if (moves.Contains(114))                          incompatible.Add(114);                      if (incompatible.Count != 0)                          incompatible.Add(151);                      return incompatible;                  }                    // Flareon in Yellow learns Smog at level 42                  // Flareon in Red Blue learns Leer at level 42 and level 47 in Yellow                  case (int)Species.Flareon when pkm.CurrentLevel < 47 && moves.Contains(43) && moves.Contains(123):                      return new[] {43' 123};                    default: return Array.Empty<int>();              }
Magic Number,PKHeX.Core,VerifyCurrentMoves,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\VerifyCurrentMoves.cs,GetIncompatibleRBYMoves,The following statement contains a magic number: switch (pkm.Species)              {                  // Vaporeon in Yellow learns Mist and Haze at level 42' Mist can only be learned if it leveled up in the daycare                  // Vaporeon in Red/Blue learns Acid Armor at level 42 and level 47 in Yellow                  case (int)Species.Vaporeon when pkm.CurrentLevel < 47 && moves.Contains(151):                  {                      var incompatible = new List<int>(3);                      if (moves.Contains(54))                          incompatible.Add(54);                      if (moves.Contains(114))                          incompatible.Add(114);                      if (incompatible.Count != 0)                          incompatible.Add(151);                      return incompatible;                  }                    // Flareon in Yellow learns Smog at level 42                  // Flareon in Red Blue learns Leer at level 42 and level 47 in Yellow                  case (int)Species.Flareon when pkm.CurrentLevel < 47 && moves.Contains(43) && moves.Contains(123):                      return new[] {43' 123};                    default: return Array.Empty<int>();              }
Magic Number,PKHeX.Core,VerifyCurrentMoves,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\VerifyCurrentMoves.cs,GetIncompatibleRBYMoves,The following statement contains a magic number: switch (pkm.Species)              {                  // Vaporeon in Yellow learns Mist and Haze at level 42' Mist can only be learned if it leveled up in the daycare                  // Vaporeon in Red/Blue learns Acid Armor at level 42 and level 47 in Yellow                  case (int)Species.Vaporeon when pkm.CurrentLevel < 47 && moves.Contains(151):                  {                      var incompatible = new List<int>(3);                      if (moves.Contains(54))                          incompatible.Add(54);                      if (moves.Contains(114))                          incompatible.Add(114);                      if (incompatible.Count != 0)                          incompatible.Add(151);                      return incompatible;                  }                    // Flareon in Yellow learns Smog at level 42                  // Flareon in Red Blue learns Leer at level 42 and level 47 in Yellow                  case (int)Species.Flareon when pkm.CurrentLevel < 47 && moves.Contains(43) && moves.Contains(123):                      return new[] {43' 123};                    default: return Array.Empty<int>();              }
Magic Number,PKHeX.Core,VerifyCurrentMoves,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\VerifyCurrentMoves.cs,GetIncompatibleRBYMoves,The following statement contains a magic number: switch (pkm.Species)              {                  // Vaporeon in Yellow learns Mist and Haze at level 42' Mist can only be learned if it leveled up in the daycare                  // Vaporeon in Red/Blue learns Acid Armor at level 42 and level 47 in Yellow                  case (int)Species.Vaporeon when pkm.CurrentLevel < 47 && moves.Contains(151):                  {                      var incompatible = new List<int>(3);                      if (moves.Contains(54))                          incompatible.Add(54);                      if (moves.Contains(114))                          incompatible.Add(114);                      if (incompatible.Count != 0)                          incompatible.Add(151);                      return incompatible;                  }                    // Flareon in Yellow learns Smog at level 42                  // Flareon in Red Blue learns Leer at level 42 and level 47 in Yellow                  case (int)Species.Flareon when pkm.CurrentLevel < 47 && moves.Contains(43) && moves.Contains(123):                      return new[] {43' 123};                    default: return Array.Empty<int>();              }
Magic Number,PKHeX.Core,VerifyCurrentMoves,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\VerifyCurrentMoves.cs,GetIncompatibleRBYMoves,The following statement contains a magic number: switch (pkm.Species)              {                  // Vaporeon in Yellow learns Mist and Haze at level 42' Mist can only be learned if it leveled up in the daycare                  // Vaporeon in Red/Blue learns Acid Armor at level 42 and level 47 in Yellow                  case (int)Species.Vaporeon when pkm.CurrentLevel < 47 && moves.Contains(151):                  {                      var incompatible = new List<int>(3);                      if (moves.Contains(54))                          incompatible.Add(54);                      if (moves.Contains(114))                          incompatible.Add(114);                      if (incompatible.Count != 0)                          incompatible.Add(151);                      return incompatible;                  }                    // Flareon in Yellow learns Smog at level 42                  // Flareon in Red Blue learns Leer at level 42 and level 47 in Yellow                  case (int)Species.Flareon when pkm.CurrentLevel < 47 && moves.Contains(43) && moves.Contains(123):                      return new[] {43' 123};                    default: return Array.Empty<int>();              }
Magic Number,PKHeX.Core,VerifyCurrentMoves,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\VerifyCurrentMoves.cs,GetIncompatibleRBYMoves,The following statement contains a magic number: switch (pkm.Species)              {                  // Vaporeon in Yellow learns Mist and Haze at level 42' Mist can only be learned if it leveled up in the daycare                  // Vaporeon in Red/Blue learns Acid Armor at level 42 and level 47 in Yellow                  case (int)Species.Vaporeon when pkm.CurrentLevel < 47 && moves.Contains(151):                  {                      var incompatible = new List<int>(3);                      if (moves.Contains(54))                          incompatible.Add(54);                      if (moves.Contains(114))                          incompatible.Add(114);                      if (incompatible.Count != 0)                          incompatible.Add(151);                      return incompatible;                  }                    // Flareon in Yellow learns Smog at level 42                  // Flareon in Red Blue learns Leer at level 42 and level 47 in Yellow                  case (int)Species.Flareon when pkm.CurrentLevel < 47 && moves.Contains(43) && moves.Contains(123):                      return new[] {43' 123};                    default: return Array.Empty<int>();              }
Magic Number,PKHeX.Core,VerifyCurrentMoves,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\VerifyCurrentMoves.cs,GetIncompatibleRBYMoves,The following statement contains a magic number: switch (pkm.Species)              {                  // Vaporeon in Yellow learns Mist and Haze at level 42' Mist can only be learned if it leveled up in the daycare                  // Vaporeon in Red/Blue learns Acid Armor at level 42 and level 47 in Yellow                  case (int)Species.Vaporeon when pkm.CurrentLevel < 47 && moves.Contains(151):                  {                      var incompatible = new List<int>(3);                      if (moves.Contains(54))                          incompatible.Add(54);                      if (moves.Contains(114))                          incompatible.Add(114);                      if (incompatible.Count != 0)                          incompatible.Add(151);                      return incompatible;                  }                    // Flareon in Yellow learns Smog at level 42                  // Flareon in Red Blue learns Leer at level 42 and level 47 in Yellow                  case (int)Species.Flareon when pkm.CurrentLevel < 47 && moves.Contains(43) && moves.Contains(123):                      return new[] {43' 123};                    default: return Array.Empty<int>();              }
Magic Number,PKHeX.Core,VerifyCurrentMoves,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\VerifyCurrentMoves.cs,GetIncompatibleRBYMoves,The following statement contains a magic number: switch (pkm.Species)              {                  // Vaporeon in Yellow learns Mist and Haze at level 42' Mist can only be learned if it leveled up in the daycare                  // Vaporeon in Red/Blue learns Acid Armor at level 42 and level 47 in Yellow                  case (int)Species.Vaporeon when pkm.CurrentLevel < 47 && moves.Contains(151):                  {                      var incompatible = new List<int>(3);                      if (moves.Contains(54))                          incompatible.Add(54);                      if (moves.Contains(114))                          incompatible.Add(114);                      if (incompatible.Count != 0)                          incompatible.Add(151);                      return incompatible;                  }                    // Flareon in Yellow learns Smog at level 42                  // Flareon in Red Blue learns Leer at level 42 and level 47 in Yellow                  case (int)Species.Flareon when pkm.CurrentLevel < 47 && moves.Contains(43) && moves.Contains(123):                      return new[] {43' 123};                    default: return Array.Empty<int>();              }
Magic Number,PKHeX.Core,VerifyCurrentMoves,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\VerifyCurrentMoves.cs,GetIncompatibleRBYMoves,The following statement contains a magic number: switch (pkm.Species)              {                  // Vaporeon in Yellow learns Mist and Haze at level 42' Mist can only be learned if it leveled up in the daycare                  // Vaporeon in Red/Blue learns Acid Armor at level 42 and level 47 in Yellow                  case (int)Species.Vaporeon when pkm.CurrentLevel < 47 && moves.Contains(151):                  {                      var incompatible = new List<int>(3);                      if (moves.Contains(54))                          incompatible.Add(54);                      if (moves.Contains(114))                          incompatible.Add(114);                      if (incompatible.Count != 0)                          incompatible.Add(151);                      return incompatible;                  }                    // Flareon in Yellow learns Smog at level 42                  // Flareon in Red Blue learns Leer at level 42 and level 47 in Yellow                  case (int)Species.Flareon when pkm.CurrentLevel < 47 && moves.Contains(43) && moves.Contains(123):                      return new[] {43' 123};                    default: return Array.Empty<int>();              }
Magic Number,PKHeX.Core,VerifyCurrentMoves,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\VerifyCurrentMoves.cs,GetIncompatibleRBYMoves,The following statement contains a magic number: switch (pkm.Species)              {                  // Vaporeon in Yellow learns Mist and Haze at level 42' Mist can only be learned if it leveled up in the daycare                  // Vaporeon in Red/Blue learns Acid Armor at level 42 and level 47 in Yellow                  case (int)Species.Vaporeon when pkm.CurrentLevel < 47 && moves.Contains(151):                  {                      var incompatible = new List<int>(3);                      if (moves.Contains(54))                          incompatible.Add(54);                      if (moves.Contains(114))                          incompatible.Add(114);                      if (incompatible.Count != 0)                          incompatible.Add(151);                      return incompatible;                  }                    // Flareon in Yellow learns Smog at level 42                  // Flareon in Red Blue learns Leer at level 42 and level 47 in Yellow                  case (int)Species.Flareon when pkm.CurrentLevel < 47 && moves.Contains(43) && moves.Contains(123):                      return new[] {43' 123};                    default: return Array.Empty<int>();              }
Magic Number,PKHeX.Core,VerifyCurrentMoves,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\VerifyCurrentMoves.cs,GetIncompatibleRBYMoves,The following statement contains a magic number: switch (pkm.Species)              {                  // Vaporeon in Yellow learns Mist and Haze at level 42' Mist can only be learned if it leveled up in the daycare                  // Vaporeon in Red/Blue learns Acid Armor at level 42 and level 47 in Yellow                  case (int)Species.Vaporeon when pkm.CurrentLevel < 47 && moves.Contains(151):                  {                      var incompatible = new List<int>(3);                      if (moves.Contains(54))                          incompatible.Add(54);                      if (moves.Contains(114))                          incompatible.Add(114);                      if (incompatible.Count != 0)                          incompatible.Add(151);                      return incompatible;                  }                    // Flareon in Yellow learns Smog at level 42                  // Flareon in Red Blue learns Leer at level 42 and level 47 in Yellow                  case (int)Species.Flareon when pkm.CurrentLevel < 47 && moves.Contains(43) && moves.Contains(123):                      return new[] {43' 123};                    default: return Array.Empty<int>();              }
Magic Number,PKHeX.Core,VerifyCurrentMoves,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\VerifyCurrentMoves.cs,ParseEvolutionsIncompatibleMoves,The following statement contains a magic number: m < 4
Magic Number,PKHeX.Core,VerifyCurrentMoves,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\VerifyCurrentMoves.cs,ParseShedinjaEvolveMoves,The following statement contains a magic number: m < 4
Magic Number,PKHeX.Core,VerifyCurrentMoves,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\VerifyCurrentMoves.cs,ParseShedinjaEvolveMoves,The following statement contains a magic number: gen >= 3
Magic Number,PKHeX.Core,VerifyCurrentMoves,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\VerifyCurrentMoves.cs,ParseShedinjaEvolveMoves,The following statement contains a magic number: int levelJ = Legal.GetShedinjaMoveLevel(291' moves[move]' g);
Magic Number,PKHeX.Core,VerifyCurrentMoves,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\VerifyCurrentMoves.cs,ParseShedinjaEvolveMoves,The following statement contains a magic number: int levelS = Legal.GetShedinjaMoveLevel(292' moves[m]' res[m].Generation);
Magic Number,PKHeX.Core,VerifyCurrentMoves,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\VerifyCurrentMoves.cs,ParseShedinjaEvolveMoves,The following statement contains a magic number: int levelN = Legal.GetShedinjaMoveLevel(290' moves[m]' res[m].Generation);
Magic Number,PKHeX.Core,VerifyCurrentMoves,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\VerifyCurrentMoves.cs,ParseShedinjaEvolveMoves,The following statement contains a magic number: res[m] = new CheckMoveResult(res[m]' Invalid' string.Format(LMoveEvoFHigher' SpeciesStrings[290]' SpeciesStrings[291])' Move);
Magic Number,PKHeX.Core,VerifyCurrentMoves,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\VerifyCurrentMoves.cs,ParseShedinjaEvolveMoves,The following statement contains a magic number: res[m] = new CheckMoveResult(res[m]' Invalid' string.Format(LMoveEvoFHigher' SpeciesStrings[290]' SpeciesStrings[291])' Move);
Magic Number,PKHeX.Core,VerifyCurrentMoves,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\VerifyCurrentMoves.cs,ParseShedinjaEvolveMoves,The following statement contains a magic number: m < 4
Magic Number,PKHeX.Core,VerifyCurrentMoves,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\VerifyCurrentMoves.cs,ParseEvolutionLevelupMove,The following statement contains a magic number: !res.All(r => r?.Valid ?? false) || moves.Any(m => m == 0) || (Legal.BabyEvolutionWithMove.Contains(pkm.Species) && info.Generation <= 3)
Magic Number,PKHeX.Core,VerifyCurrentMoves,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\VerifyCurrentMoves.cs,ParseEvolutionLevelupMove,The following statement contains a magic number: switch (pkm.Species)              {                  case (int)Species.MrMime: // Mr. Mime (Mime Jr with Mimic)                  case (int)Species.Sudowoodo: // Sudowoodo (Bonsly with Mimic)                      ValidMoves.Add(102);                      break;                  case (int)Species.Ambipom: // Ambipom (Aipom with Double Hit)                      ValidMoves.Add(458);                      break;                  case (int)Species.Lickilicky: // Lickilicky (Lickitung with Rollout)                      ValidMoves.Add(205);                      break;                  case (int)Species.Tangrowth: // Tangrowth (Tangela with Ancient Power)                  case (int)Species.Yanmega: // Yanmega (Yanma with Ancient Power)                  case (int)Species.Mamoswine: // Mamoswine (Piloswine with Ancient Power)                      ValidMoves.Add(246);                      break;                  case (int)Species.Sylveon: // Sylveon (Eevee with Fairy Move)                      // Add every fairy moves without cheking if eevee learn it or not' pokemon moves are determined legal before this function                      ValidMoves.AddRange(Legal.FairyMoves);                      break;                  case (int)Species.Tsareena: // Tsareena (Steenee with Stomp)                      ValidMoves.Add(023);                      break;              }
Magic Number,PKHeX.Core,VerifyCurrentMoves,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\VerifyCurrentMoves.cs,ParseEvolutionLevelupMove,The following statement contains a magic number: switch (pkm.Species)              {                  case (int)Species.MrMime: // Mr. Mime (Mime Jr with Mimic)                  case (int)Species.Sudowoodo: // Sudowoodo (Bonsly with Mimic)                      ValidMoves.Add(102);                      break;                  case (int)Species.Ambipom: // Ambipom (Aipom with Double Hit)                      ValidMoves.Add(458);                      break;                  case (int)Species.Lickilicky: // Lickilicky (Lickitung with Rollout)                      ValidMoves.Add(205);                      break;                  case (int)Species.Tangrowth: // Tangrowth (Tangela with Ancient Power)                  case (int)Species.Yanmega: // Yanmega (Yanma with Ancient Power)                  case (int)Species.Mamoswine: // Mamoswine (Piloswine with Ancient Power)                      ValidMoves.Add(246);                      break;                  case (int)Species.Sylveon: // Sylveon (Eevee with Fairy Move)                      // Add every fairy moves without cheking if eevee learn it or not' pokemon moves are determined legal before this function                      ValidMoves.AddRange(Legal.FairyMoves);                      break;                  case (int)Species.Tsareena: // Tsareena (Steenee with Stomp)                      ValidMoves.Add(023);                      break;              }
Magic Number,PKHeX.Core,VerifyCurrentMoves,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\VerifyCurrentMoves.cs,ParseEvolutionLevelupMove,The following statement contains a magic number: switch (pkm.Species)              {                  case (int)Species.MrMime: // Mr. Mime (Mime Jr with Mimic)                  case (int)Species.Sudowoodo: // Sudowoodo (Bonsly with Mimic)                      ValidMoves.Add(102);                      break;                  case (int)Species.Ambipom: // Ambipom (Aipom with Double Hit)                      ValidMoves.Add(458);                      break;                  case (int)Species.Lickilicky: // Lickilicky (Lickitung with Rollout)                      ValidMoves.Add(205);                      break;                  case (int)Species.Tangrowth: // Tangrowth (Tangela with Ancient Power)                  case (int)Species.Yanmega: // Yanmega (Yanma with Ancient Power)                  case (int)Species.Mamoswine: // Mamoswine (Piloswine with Ancient Power)                      ValidMoves.Add(246);                      break;                  case (int)Species.Sylveon: // Sylveon (Eevee with Fairy Move)                      // Add every fairy moves without cheking if eevee learn it or not' pokemon moves are determined legal before this function                      ValidMoves.AddRange(Legal.FairyMoves);                      break;                  case (int)Species.Tsareena: // Tsareena (Steenee with Stomp)                      ValidMoves.Add(023);                      break;              }
Magic Number,PKHeX.Core,VerifyCurrentMoves,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\VerifyCurrentMoves.cs,ParseEvolutionLevelupMove,The following statement contains a magic number: switch (pkm.Species)              {                  case (int)Species.MrMime: // Mr. Mime (Mime Jr with Mimic)                  case (int)Species.Sudowoodo: // Sudowoodo (Bonsly with Mimic)                      ValidMoves.Add(102);                      break;                  case (int)Species.Ambipom: // Ambipom (Aipom with Double Hit)                      ValidMoves.Add(458);                      break;                  case (int)Species.Lickilicky: // Lickilicky (Lickitung with Rollout)                      ValidMoves.Add(205);                      break;                  case (int)Species.Tangrowth: // Tangrowth (Tangela with Ancient Power)                  case (int)Species.Yanmega: // Yanmega (Yanma with Ancient Power)                  case (int)Species.Mamoswine: // Mamoswine (Piloswine with Ancient Power)                      ValidMoves.Add(246);                      break;                  case (int)Species.Sylveon: // Sylveon (Eevee with Fairy Move)                      // Add every fairy moves without cheking if eevee learn it or not' pokemon moves are determined legal before this function                      ValidMoves.AddRange(Legal.FairyMoves);                      break;                  case (int)Species.Tsareena: // Tsareena (Steenee with Stomp)                      ValidMoves.Add(023);                      break;              }
Magic Number,PKHeX.Core,VerifyCurrentMoves,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\VerifyCurrentMoves.cs,ParseEvolutionLevelupMove,The following statement contains a magic number: switch (pkm.Species)              {                  case (int)Species.MrMime: // Mr. Mime (Mime Jr with Mimic)                  case (int)Species.Sudowoodo: // Sudowoodo (Bonsly with Mimic)                      ValidMoves.Add(102);                      break;                  case (int)Species.Ambipom: // Ambipom (Aipom with Double Hit)                      ValidMoves.Add(458);                      break;                  case (int)Species.Lickilicky: // Lickilicky (Lickitung with Rollout)                      ValidMoves.Add(205);                      break;                  case (int)Species.Tangrowth: // Tangrowth (Tangela with Ancient Power)                  case (int)Species.Yanmega: // Yanmega (Yanma with Ancient Power)                  case (int)Species.Mamoswine: // Mamoswine (Piloswine with Ancient Power)                      ValidMoves.Add(246);                      break;                  case (int)Species.Sylveon: // Sylveon (Eevee with Fairy Move)                      // Add every fairy moves without cheking if eevee learn it or not' pokemon moves are determined legal before this function                      ValidMoves.AddRange(Legal.FairyMoves);                      break;                  case (int)Species.Tsareena: // Tsareena (Steenee with Stomp)                      ValidMoves.Add(023);                      break;              }
Magic Number,PKHeX.Core,VerifyCurrentMoves,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\VerifyCurrentMoves.cs,ParseEvolutionLevelupMove,The following statement contains a magic number: m < 4
Magic Number,PKHeX.Core,VerifyCurrentMoves,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\VerifyCurrentMoves.cs,GetHMCompatibility,The following statement contains a magic number: HMLearned = new bool[4];
Magic Number,PKHeX.Core,VerifyCurrentMoves,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\VerifyCurrentMoves.cs,GetHMCompatibility,The following statement contains a magic number: KnowDefogWhirlpool = moves.Where((m' i) => IsDefogWhirl(m) && IsCheckInvalid(res[i])).Count() == 2;
Magic Number,PKHeX.Core,VerifyCurrentMoves,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\VerifyCurrentMoves.cs,GetHMCompatibility,The following statement contains a magic number: gen == 4 && pkm.Format > 4
Magic Number,PKHeX.Core,VerifyCurrentMoves,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\VerifyCurrentMoves.cs,GetHMCompatibility,The following statement contains a magic number: gen == 4 && pkm.Format > 4
Magic Number,PKHeX.Core,VerifyCurrentMoves,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\VerifyCurrentMoves.cs,GetHMCompatibility,The following statement contains a magic number: gen == 3 && pkm.Format > 3
Magic Number,PKHeX.Core,VerifyCurrentMoves,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\VerifyCurrentMoves.cs,GetHMCompatibility,The following statement contains a magic number: gen == 3 && pkm.Format > 3
Magic Number,PKHeX.Core,VerifyCurrentMoves,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\VerifyCurrentMoves.cs,GetHMCompatibility,The following statement contains a magic number: i < 4
Magic Number,PKHeX.Core,VerifyCurrentMoves,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\VerifyCurrentMoves.cs,FlagIncompatibleTransferHMs45,The following statement contains a magic number: i < 4
Magic Number,PKHeX.Core,VerifyCurrentMoves,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\VerifyCurrentMoves.cs,FlagIncompatibleTransferHMs45,The following statement contains a magic number: invalidCount == 2
Magic Number,PKHeX.Core,VerifyCurrentMoves,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\VerifyCurrentMoves.cs,VerifyPreRelearnEggBase,The following statement contains a magic number: CheckMoveResult[] res = new CheckMoveResult[4];
Magic Number,PKHeX.Core,VerifyCurrentMoves,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\VerifyCurrentMoves.cs,VerifyPreRelearnEggBase,The following statement contains a magic number: i < 4
Magic Number,PKHeX.Core,VerifyCurrentMoves,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\VerifyCurrentMoves.cs,GetRequiredBaseMoveCount,The following statement contains a magic number: baseCt = 4;
Magic Number,PKHeX.Core,VerifyCurrentMoves,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\VerifyCurrentMoves.cs,GetRequiredBaseMoveCount,The following statement contains a magic number: baseCt > 4
Magic Number,PKHeX.Core,VerifyCurrentMoves,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\VerifyCurrentMoves.cs,GetRequiredBaseMoveCount,The following statement contains a magic number: int reqBase = inheritCt == 4 || baseCt + inheritCt > 4 ? 4 - inheritCt : baseCt;
Magic Number,PKHeX.Core,VerifyCurrentMoves,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\VerifyCurrentMoves.cs,GetRequiredBaseMoveCount,The following statement contains a magic number: int reqBase = inheritCt == 4 || baseCt + inheritCt > 4 ? 4 - inheritCt : baseCt;
Magic Number,PKHeX.Core,VerifyCurrentMoves,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\VerifyCurrentMoves.cs,GetRequiredBaseMoveCount,The following statement contains a magic number: int reqBase = inheritCt == 4 || baseCt + inheritCt > 4 ? 4 - inheritCt : baseCt;
Magic Number,PKHeX.Core,VerifyCurrentMoves,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\VerifyCurrentMoves.cs,GetRequiredBaseMoveCount,The following statement contains a magic number: reqBase = Math.Min(4' unique);
Magic Number,PKHeX.Core,VerifyCurrentMoves,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\VerifyCurrentMoves.cs,GetRequiredBaseMoveCount,The following statement contains a magic number: Moves.Count(m => m != 0) < Math.Min(4' infoset.Base.Count)
Magic Number,PKHeX.Core,VerifyCurrentMoves,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\VerifyCurrentMoves.cs,VerifyNoEmptyDuplicates,The following statement contains a magic number: i < 4
Magic Number,PKHeX.Core,VerifyCurrentMoves,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\VerifyCurrentMoves.cs,UpdateGen1LevelUpMoves,The following statement contains a magic number: generation >= 3
Magic Number,PKHeX.Core,VerifyCurrentMoves,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\VerifyCurrentMoves.cs,UpdateGen2LevelUpMoves,The following statement contains a magic number: generation >= 3
Magic Number,PKHeX.Core,VerifyCurrentMoves,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\VerifyCurrentMoves.cs,UpdateGen2LevelUpMoves,The following statement contains a magic number: EncounterMoves.LevelUpMoves[2] = Legal.GetValidMoves(pkm' info.EvoChainsAllGens[2]' generation: 2' minLvLG2: defaultLvlG2' LVL: true' Tutor: false' Machine: false' MoveReminder: false).ToList();
Magic Number,PKHeX.Core,VerifyCurrentMoves,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\VerifyCurrentMoves.cs,UpdateGen2LevelUpMoves,The following statement contains a magic number: EncounterMoves.LevelUpMoves[2] = Legal.GetValidMoves(pkm' info.EvoChainsAllGens[2]' generation: 2' minLvLG2: defaultLvlG2' LVL: true' Tutor: false' Machine: false' MoveReminder: false).ToList();
Magic Number,PKHeX.Core,VerifyCurrentMoves,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\VerifyCurrentMoves.cs,UpdateGen2LevelUpMoves,The following statement contains a magic number: EncounterMoves.LevelUpMoves[2] = Legal.GetValidMoves(pkm' info.EvoChainsAllGens[2]' generation: 2' minLvLG2: defaultLvlG2' LVL: true' Tutor: false' Machine: false' MoveReminder: false).ToList();
Magic Number,PKHeX.Core,VerifyCurrentMoves,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\VerifyCurrentMoves.cs,GetGenMovesCheckOrder,The following statement contains a magic number: pkm.Format < 3
Magic Number,PKHeX.Core,VerifyCurrentMoves,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\VerifyCurrentMoves.cs,GetGenMovesOrderVC,The following statement contains a magic number: int[] xfer = GetGenMovesOrder(pkm.Format' 7);
Magic Number,PKHeX.Core,VerifyCurrentMoves,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\VerifyCurrentMoves.cs,GetGenMovesCheckOrderGB,The following statement contains a magic number: originalGeneration == 2
Magic Number,PKHeX.Core,VerifyRelearnMoves,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\VerifyRelearnMoves.cs,VerifyRelearn,The following statement contains a magic number: info.Generation < 6
Magic Number,PKHeX.Core,VerifyRelearnMoves,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\VerifyRelearnMoves.cs,VerifyRelearnSpecifiedMoveset,The following statement contains a magic number: CheckResult[] res = new CheckResult[4];
Magic Number,PKHeX.Core,VerifyRelearnMoves,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\VerifyRelearnMoves.cs,VerifyRelearnSpecifiedMoveset,The following statement contains a magic number: i < 4
Magic Number,PKHeX.Core,VerifyRelearnMoves,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\VerifyRelearnMoves.cs,VerifyRelearnDexNav,The following statement contains a magic number: var result = new CheckResult[4];
Magic Number,PKHeX.Core,VerifyRelearnMoves,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\VerifyRelearnMoves.cs,VerifyRelearnDexNav,The following statement contains a magic number: i < 4
Magic Number,PKHeX.Core,VerifyRelearnMoves,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\VerifyRelearnMoves.cs,VerifyRelearnNone,The following statement contains a magic number: var result = new CheckResult[4];
Magic Number,PKHeX.Core,VerifyRelearnMoves,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\VerifyRelearnMoves.cs,VerifyRelearnNone,The following statement contains a magic number: i < 4
Magic Number,PKHeX.Core,VerifyRelearnMoves,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\VerifyRelearnMoves.cs,VerifyRelearnEggBase,The following statement contains a magic number: var result = new CheckResult[4];
Magic Number,PKHeX.Core,VerifyRelearnMoves,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\VerifyRelearnMoves.cs,VerifyRelearnEggBase,The following statement contains a magic number: int baseCt = Math.Min(4' baseMoves.Length);
Magic Number,PKHeX.Core,VerifyRelearnMoves,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\VerifyRelearnMoves.cs,VerifyRelearnEggBase,The following statement contains a magic number: inheritMoves.Add(344);
Magic Number,PKHeX.Core,VerifyRelearnMoves,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\VerifyRelearnMoves.cs,FlagInvalidInheritedMoves,The following statement contains a magic number: i < 4
Magic Number,PKHeX.Core,VerifyRelearnMoves,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\VerifyRelearnMoves.cs,FlagSplitbreedMoves,The following statement contains a magic number: i < 4
Magic Number,PKHeX.Core,VerifyRelearnMoves,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\VerifyRelearnMoves.cs,GetRequiredBaseMoves,The following statement contains a magic number: int reqBase = inheritCt == 4 || baseCt + inheritCt > 4 ? 4 - inheritCt : baseCt;
Magic Number,PKHeX.Core,VerifyRelearnMoves,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\VerifyRelearnMoves.cs,GetRequiredBaseMoves,The following statement contains a magic number: int reqBase = inheritCt == 4 || baseCt + inheritCt > 4 ? 4 - inheritCt : baseCt;
Magic Number,PKHeX.Core,VerifyRelearnMoves,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\VerifyRelearnMoves.cs,GetRequiredBaseMoves,The following statement contains a magic number: int reqBase = inheritCt == 4 || baseCt + inheritCt > 4 ? 4 - inheritCt : baseCt;
Magic Number,PKHeX.Core,VerifyRelearnMoves,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\VerifyRelearnMoves.cs,GetRequiredBaseMoves,The following statement contains a magic number: reqBase = Math.Min(4' unique);
Magic Number,PKHeX.Core,VerifyRelearnMoves,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\VerifyRelearnMoves.cs,GetRequiredBaseMoves,The following statement contains a magic number: RelearnMoves.Count(m => m != 0) < Math.Min(4' baseMoves.Count)
Magic Number,PKHeX.Core,EncounterTimeExtension,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Enums\EncounterTime.cs,RandomValidTime,The following statement contains a magic number: int val = Util.Rand.Next(1' 4);
Magic Number,PKHeX.Core,EncounterTimeExtension,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Enums\EncounterTime.cs,RandomValidTime,The following statement contains a magic number: val = Util.Rand.Next(1' 4);
Magic Number,PKHeX.Core,EncounterTypeExtension,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Enums\EncounterType.cs,GetIndex,The following statement contains a magic number: i < 8 * sizeof(EncounterType)
Magic Number,PKHeX.Core,EvolutionChain,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Evolutions\EvolutionChain.cs,GetChainSingle,The following statement contains a magic number: var chain = GetChainBase(Math.Max(2' pkm.Format));
Magic Number,PKHeX.Core,EvolutionChain,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Evolutions\EvolutionChain.cs,GetChainAll,The following statement contains a magic number: int maxgen = pkm is PK1 && !pkm.Gen1_NotTradeback ? 2 : pkm.Format;
Magic Number,PKHeX.Core,EvolutionChain,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Evolutions\EvolutionChain.cs,GetChainAll,The following statement contains a magic number: pkGen == 1 && pkm.Gen1_NotTradeback && g == 2
Magic Number,PKHeX.Core,EvolutionChain,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Evolutions\EvolutionChain.cs,GetChainAll,The following statement contains a magic number: pkGen <= 2 && 3 <= g && g <= 6
Magic Number,PKHeX.Core,EvolutionChain,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Evolutions\EvolutionChain.cs,GetChainAll,The following statement contains a magic number: pkGen <= 2 && 3 <= g && g <= 6
Magic Number,PKHeX.Core,EvolutionChain,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Evolutions\EvolutionChain.cs,GetChainAll,The following statement contains a magic number: pkGen <= 2 && 3 <= g && g <= 6
Magic Number,PKHeX.Core,EvolutionChain,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Evolutions\EvolutionChain.cs,GetChainAll,The following statement contains a magic number: g <= 4 && 2 < pkm.Format && g < pkm.Format && !pkm.HasOriginalMetLocation && lvl > pkm.Met_Level
Magic Number,PKHeX.Core,EvolutionChain,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Evolutions\EvolutionChain.cs,GetChainAll,The following statement contains a magic number: g <= 4 && 2 < pkm.Format && g < pkm.Format && !pkm.HasOriginalMetLocation && lvl > pkm.Met_Level
Magic Number,PKHeX.Core,EvolutionChain,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Evolutions\EvolutionChain.cs,GetChainAll,The following statement contains a magic number: int maxspeciesgen = g == 2 && pkm.VC1 ? MaxSpeciesID_1 : GetMaxSpeciesOrigin(g);
Magic Number,PKHeX.Core,EvolutionChain,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Evolutions\EvolutionChain.cs,GetChainAll,The following statement contains a magic number: g <= 2 && pkm.VC1
Magic Number,PKHeX.Core,EvolutionChain,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Evolutions\EvolutionChain.cs,GetChainAll,The following statement contains a magic number: g == 3 && pkm.Format > 4 && lvl == maxLevel
Magic Number,PKHeX.Core,EvolutionChain,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Evolutions\EvolutionChain.cs,GetChainAll,The following statement contains a magic number: g == 3 && pkm.Format > 4 && lvl == maxLevel
Magic Number,PKHeX.Core,EvolutionChain,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Evolutions\EvolutionChain.cs,GetChainAll,The following statement contains a magic number: g < 7 && pkm.Format >= 7 && mostEvolved.Form > 0
Magic Number,PKHeX.Core,EvolutionChain,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Evolutions\EvolutionChain.cs,GetChainAll,The following statement contains a magic number: g < 7 && pkm.Format >= 7 && mostEvolved.Form > 0
Magic Number,PKHeX.Core,EvolutionChain,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Evolutions\EvolutionChain.cs,GetChainAll,The following statement contains a magic number: noxfrDecremented = g > (pkGen != 3 ? 4 : 5);
Magic Number,PKHeX.Core,EvolutionChain,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Evolutions\EvolutionChain.cs,GetChainAll,The following statement contains a magic number: noxfrDecremented = g > (pkGen != 3 ? 4 : 5);
Magic Number,PKHeX.Core,EvolutionChain,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Evolutions\EvolutionChain.cs,GetChainAll,The following statement contains a magic number: noxfrDecremented = g > (pkGen != 3 ? 4 : 5);
Magic Number,PKHeX.Core,EvolutionChain,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Evolutions\EvolutionChain.cs,GetChainAll,The following statement contains a magic number: g > 2 && !pkm.HasOriginalMetLocation && g >= pkGen && noxfrDecremented
Magic Number,PKHeX.Core,EvolutionChain,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Evolutions\EvolutionChain.cs,TrimVC1Transfer,The following statement contains a magic number: GensEvoChains[7].All(z => z.Species > MaxSpeciesID_1)
Magic Number,PKHeX.Core,EvolutionChain,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Evolutions\EvolutionChain.cs,CheckLastEncounterRemoval,The following statement contains a magic number: first.MinLevel == 2
Magic Number,PKHeX.Core,EvolutionChain,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Evolutions\EvolutionChain.cs,GetValidPreEvolutions,The following statement contains a magic number: return new List<EvoCriteria>(2)                  {                      new EvoCriteria { Species = (int)Species.Shedinja' Level = lvl' MinLevel = 20' Form = 0 }'                      new EvoCriteria { Species = (int)Species.Nincada' Level = lvl' MinLevel = 1' Form = 0 }                  };
Magic Number,PKHeX.Core,EvolutionChain,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Evolutions\EvolutionChain.cs,GetValidPreEvolutions,The following statement contains a magic number: return new List<EvoCriteria>(2)                  {                      new EvoCriteria { Species = (int)Species.Shedinja' Level = lvl' MinLevel = 20' Form = 0 }'                      new EvoCriteria { Species = (int)Species.Nincada' Level = lvl' MinLevel = 1' Form = 0 }                  };
Magic Number,PKHeX.Core,EvolutionChain,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Evolutions\EvolutionChain.cs,GetValidPreEvolutions,The following statement contains a magic number: pkm.Species == (int)Species.Shedinja && lvl >= 20 && (!pkm.HasOriginalMetLocation || pkm.Met_Level + 1 <= lvl)
Magic Number,PKHeX.Core,EvolutionChain,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Evolutions\EvolutionChain.cs,GetValidPreEvolutions,The following statement contains a magic number: maxspeciesorigin == -1 && pkm.InhabitedGeneration(2) && pkm.Format <= 2 && pkm.GenNumber == 1
Magic Number,PKHeX.Core,EvolutionChain,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Evolutions\EvolutionChain.cs,GetValidPreEvolutions,The following statement contains a magic number: maxspeciesorigin == -1 && pkm.InhabitedGeneration(2) && pkm.Format <= 2 && pkm.GenNumber == 1
Magic Number,PKHeX.Core,EvolutionChain,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Evolutions\EvolutionChain.cs,GetValidPreEvolutions,The following statement contains a magic number: int tree = pkm.Format <= 2 ? 2 : pkm.Format;
Magic Number,PKHeX.Core,EvolutionChain,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Evolutions\EvolutionChain.cs,GetValidPreEvolutions,The following statement contains a magic number: int tree = pkm.Format <= 2 ? 2 : pkm.Format;
Magic Number,PKHeX.Core,EvolutionChain,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Evolutions\EvolutionChain.cs,GetMinLevelGeneration,The following statement contains a magic number: return 2;
Magic Number,PKHeX.Core,EvolutionChain,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Evolutions\EvolutionChain.cs,GetMinLevelGeneration,The following statement contains a magic number: pkm.Format <= 2
Magic Number,PKHeX.Core,EvolutionChain,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Evolutions\EvolutionChain.cs,GetMinLevelGeneration,The following statement contains a magic number: return 2;
Magic Number,PKHeX.Core,EvolutionChain,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Evolutions\EvolutionChain.cs,GetMinLevelGeneration,The following statement contains a magic number: origin <= 3
Magic Number,PKHeX.Core,EvolutionLineage,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Evolutions\EvolutionLineage.cs,GetExplicitLineage,The following statement contains a magic number: var dl = new List<EvoCriteria>(3) { first };
Magic Number,PKHeX.Core,EvolutionLineage,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Evolutions\EvolutionLineage.cs,UpdateMinValues,The following statement contains a magic number: last.MinLevel = 2;
Magic Number,PKHeX.Core,EvolutionLineage,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Evolutions\EvolutionLineage.cs,UpdateMinValues,The following statement contains a magic number: first.MinLevel = 2;
Magic Number,PKHeX.Core,EvolutionMethod,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Evolutions\EvolutionMethod.cs,Valid,The following statement contains a magic number: switch ((EvolutionType)Method)              {                  case UseItem:                  case UseItemWormhole:                  case Crit3:                  case HPDownBy49:                  case SpinType:                      return true;                  case UseItemMale:                      return pkm.Gender == 0;                  case UseItemFemale:                      return pkm.Gender == 1;                    case Trade:                  case TradeHeldItem:                  case TradeSpecies:                      return !pkm.IsUntraded || skipChecks;                    case LevelUpNatureAmped when GetAmpLowKeyResult(pkm.Nature) != pkm.AltForm && !skipChecks:                  case LevelUpNatureLowKey when GetAmpLowKeyResult(pkm.Nature) != pkm.AltForm && !skipChecks:                      return false;                    // Special Level Up Cases -- return false if invalid                  case LevelUpBeauty when !(pkm is IContestStats s) || s.CNT_Beauty < Argument:                      return skipChecks;                  case LevelUpMale when pkm.Gender != 0:                      return false;                  case LevelUpFemale when pkm.Gender != 1:                      return false;                  case LevelUpFormFemale1 when pkm.Gender != 1 || pkm.AltForm != 1:                      return false;                    case LevelUpVersion when ((pkm.Version & 1) != (Argument & 1) && pkm.IsUntraded) || skipChecks:                  case LevelUpVersionDay when ((pkm.Version & 1) != (Argument & 1) && pkm.IsUntraded) || skipChecks:                  case LevelUpVersionNight when ((pkm.Version & 1) != (Argument & 1) && pkm.IsUntraded) || skipChecks:                      return skipChecks; // Version checks come in pairs' check for any pair match                    // Level Up (any); the above Level Up (with condition) cases will reach here if they were valid                  default:                      if (Level == 0 && lvl < 2)                          return false;                      if (lvl < Level)                          return false;                        RequiresLevelUp = true;                      if (skipChecks)                          return lvl >= Level;                        // Check Met Level for extra validity                      return HasMetLevelIncreased(pkm' lvl);              }
Magic Number,PKHeX.Core,EvolutionMethod,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Evolutions\EvolutionMethod.cs,HasMetLevelIncreased,The following statement contains a magic number: switch (origin)              {                  case 1: // No met data in RBY                  case 2: // No met data in GS' Crystal met data can be reset                      return true;                  case 3:                  case 4:                      if (pkm.Format > origin) // Pal Park / PokeTransfer updates Met Level                          return true;                      return pkm.Met_Level < lvl;                    case 5: // Bank keeps current level                  case 6:                  case 7:                  case 8:                      return lvl >= Level && (!pkm.IsNative || pkm.Met_Level < lvl);                    default: return false;              }
Magic Number,PKHeX.Core,EvolutionMethod,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Evolutions\EvolutionMethod.cs,HasMetLevelIncreased,The following statement contains a magic number: switch (origin)              {                  case 1: // No met data in RBY                  case 2: // No met data in GS' Crystal met data can be reset                      return true;                  case 3:                  case 4:                      if (pkm.Format > origin) // Pal Park / PokeTransfer updates Met Level                          return true;                      return pkm.Met_Level < lvl;                    case 5: // Bank keeps current level                  case 6:                  case 7:                  case 8:                      return lvl >= Level && (!pkm.IsNative || pkm.Met_Level < lvl);                    default: return false;              }
Magic Number,PKHeX.Core,EvolutionMethod,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Evolutions\EvolutionMethod.cs,HasMetLevelIncreased,The following statement contains a magic number: switch (origin)              {                  case 1: // No met data in RBY                  case 2: // No met data in GS' Crystal met data can be reset                      return true;                  case 3:                  case 4:                      if (pkm.Format > origin) // Pal Park / PokeTransfer updates Met Level                          return true;                      return pkm.Met_Level < lvl;                    case 5: // Bank keeps current level                  case 6:                  case 7:                  case 8:                      return lvl >= Level && (!pkm.IsNative || pkm.Met_Level < lvl);                    default: return false;              }
Magic Number,PKHeX.Core,EvolutionMethod,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Evolutions\EvolutionMethod.cs,HasMetLevelIncreased,The following statement contains a magic number: switch (origin)              {                  case 1: // No met data in RBY                  case 2: // No met data in GS' Crystal met data can be reset                      return true;                  case 3:                  case 4:                      if (pkm.Format > origin) // Pal Park / PokeTransfer updates Met Level                          return true;                      return pkm.Met_Level < lvl;                    case 5: // Bank keeps current level                  case 6:                  case 7:                  case 8:                      return lvl >= Level && (!pkm.IsNative || pkm.Met_Level < lvl);                    default: return false;              }
Magic Number,PKHeX.Core,EvolutionMethod,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Evolutions\EvolutionMethod.cs,HasMetLevelIncreased,The following statement contains a magic number: switch (origin)              {                  case 1: // No met data in RBY                  case 2: // No met data in GS' Crystal met data can be reset                      return true;                  case 3:                  case 4:                      if (pkm.Format > origin) // Pal Park / PokeTransfer updates Met Level                          return true;                      return pkm.Met_Level < lvl;                    case 5: // Bank keeps current level                  case 6:                  case 7:                  case 8:                      return lvl >= Level && (!pkm.IsNative || pkm.Met_Level < lvl);                    default: return false;              }
Magic Number,PKHeX.Core,EvolutionMethod,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Evolutions\EvolutionMethod.cs,HasMetLevelIncreased,The following statement contains a magic number: switch (origin)              {                  case 1: // No met data in RBY                  case 2: // No met data in GS' Crystal met data can be reset                      return true;                  case 3:                  case 4:                      if (pkm.Format > origin) // Pal Park / PokeTransfer updates Met Level                          return true;                      return pkm.Met_Level < lvl;                    case 5: // Bank keeps current level                  case 6:                  case 7:                  case 8:                      return lvl >= Level && (!pkm.IsNative || pkm.Met_Level < lvl);                    default: return false;              }
Magic Number,PKHeX.Core,EvolutionMethod,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Evolutions\EvolutionMethod.cs,HasMetLevelIncreased,The following statement contains a magic number: switch (origin)              {                  case 1: // No met data in RBY                  case 2: // No met data in GS' Crystal met data can be reset                      return true;                  case 3:                  case 4:                      if (pkm.Format > origin) // Pal Park / PokeTransfer updates Met Level                          return true;                      return pkm.Met_Level < lvl;                    case 5: // Bank keeps current level                  case 6:                  case 7:                  case 8:                      return lvl >= Level && (!pkm.IsNative || pkm.Met_Level < lvl);                    default: return false;              }
Magic Number,PKHeX.Core,EvolutionMethod,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Evolutions\EvolutionMethod.cs,GetAmpLowKeyResult,The following statement contains a magic number: (uint)(n - 1) > 22
Magic Number,PKHeX.Core,EvolutionSet1,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Evolutions\EvolutionSets\EvolutionSet1.cs,GetMethod,The following statement contains a magic number: int arg = data[offset + 2];
Magic Number,PKHeX.Core,EvolutionSet1,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Evolutions\EvolutionSets\EvolutionSet1.cs,GetArray,The following statement contains a magic number: const int bpe = 3;
Magic Number,PKHeX.Core,EvolutionSet3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Evolutions\EvolutionSets\EvolutionSet3.cs,GetMethod,The following statement contains a magic number: int arg =  BitConverter.ToUInt16(data' offset + 2);
Magic Number,PKHeX.Core,EvolutionSet3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Evolutions\EvolutionSets\EvolutionSet3.cs,GetMethod,The following statement contains a magic number: int species = SpeciesConverter.GetG4Species(BitConverter.ToUInt16(data' offset + 4));
Magic Number,PKHeX.Core,EvolutionSet3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Evolutions\EvolutionSets\EvolutionSet3.cs,GetMethod,The following statement contains a magic number: switch (method)              {                  case 1: /* Friendship*/                  case 2: /* Friendship day*/                  case 3: /* Friendship night*/                  case 5: /* Trade   */                  case 6: /* Trade while holding */                      return new EvolutionMethod { Method = method' Species = species' Argument = arg };                  case 4: /* Level Up */                      return new EvolutionMethod { Method = 4' Species = species' Level = arg' Argument = arg };                  case 7: /* Use item */                  case 15: /* Beauty evolution*/                      return new EvolutionMethod { Method = method + 1' Species = species' Argument = arg };                  case 8: /* Tyrogue -> Hitmonchan */                  case 9: /* Tyrogue -> Hitmonlee */                  case 10: /* Tyrogue -> Hitmontop*/                  case 11: /* Wurmple -> Silcoon evolution */                  case 12: /* Wurmple -> Cascoon evolution */                  case 13: /* Nincada -> Ninjask evolution */                  case 14: /* Shedinja spawn in Nincada -> Ninjask evolution */                      return new EvolutionMethod { Method = method + 1' Species = species' Level = arg' Argument = arg };                    default:                      throw new ArgumentException(nameof(method));              }
Magic Number,PKHeX.Core,EvolutionSet3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Evolutions\EvolutionSets\EvolutionSet3.cs,GetMethod,The following statement contains a magic number: switch (method)              {                  case 1: /* Friendship*/                  case 2: /* Friendship day*/                  case 3: /* Friendship night*/                  case 5: /* Trade   */                  case 6: /* Trade while holding */                      return new EvolutionMethod { Method = method' Species = species' Argument = arg };                  case 4: /* Level Up */                      return new EvolutionMethod { Method = 4' Species = species' Level = arg' Argument = arg };                  case 7: /* Use item */                  case 15: /* Beauty evolution*/                      return new EvolutionMethod { Method = method + 1' Species = species' Argument = arg };                  case 8: /* Tyrogue -> Hitmonchan */                  case 9: /* Tyrogue -> Hitmonlee */                  case 10: /* Tyrogue -> Hitmontop*/                  case 11: /* Wurmple -> Silcoon evolution */                  case 12: /* Wurmple -> Cascoon evolution */                  case 13: /* Nincada -> Ninjask evolution */                  case 14: /* Shedinja spawn in Nincada -> Ninjask evolution */                      return new EvolutionMethod { Method = method + 1' Species = species' Level = arg' Argument = arg };                    default:                      throw new ArgumentException(nameof(method));              }
Magic Number,PKHeX.Core,EvolutionSet3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Evolutions\EvolutionSets\EvolutionSet3.cs,GetMethod,The following statement contains a magic number: switch (method)              {                  case 1: /* Friendship*/                  case 2: /* Friendship day*/                  case 3: /* Friendship night*/                  case 5: /* Trade   */                  case 6: /* Trade while holding */                      return new EvolutionMethod { Method = method' Species = species' Argument = arg };                  case 4: /* Level Up */                      return new EvolutionMethod { Method = 4' Species = species' Level = arg' Argument = arg };                  case 7: /* Use item */                  case 15: /* Beauty evolution*/                      return new EvolutionMethod { Method = method + 1' Species = species' Argument = arg };                  case 8: /* Tyrogue -> Hitmonchan */                  case 9: /* Tyrogue -> Hitmonlee */                  case 10: /* Tyrogue -> Hitmontop*/                  case 11: /* Wurmple -> Silcoon evolution */                  case 12: /* Wurmple -> Cascoon evolution */                  case 13: /* Nincada -> Ninjask evolution */                  case 14: /* Shedinja spawn in Nincada -> Ninjask evolution */                      return new EvolutionMethod { Method = method + 1' Species = species' Level = arg' Argument = arg };                    default:                      throw new ArgumentException(nameof(method));              }
Magic Number,PKHeX.Core,EvolutionSet3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Evolutions\EvolutionSets\EvolutionSet3.cs,GetMethod,The following statement contains a magic number: switch (method)              {                  case 1: /* Friendship*/                  case 2: /* Friendship day*/                  case 3: /* Friendship night*/                  case 5: /* Trade   */                  case 6: /* Trade while holding */                      return new EvolutionMethod { Method = method' Species = species' Argument = arg };                  case 4: /* Level Up */                      return new EvolutionMethod { Method = 4' Species = species' Level = arg' Argument = arg };                  case 7: /* Use item */                  case 15: /* Beauty evolution*/                      return new EvolutionMethod { Method = method + 1' Species = species' Argument = arg };                  case 8: /* Tyrogue -> Hitmonchan */                  case 9: /* Tyrogue -> Hitmonlee */                  case 10: /* Tyrogue -> Hitmontop*/                  case 11: /* Wurmple -> Silcoon evolution */                  case 12: /* Wurmple -> Cascoon evolution */                  case 13: /* Nincada -> Ninjask evolution */                  case 14: /* Shedinja spawn in Nincada -> Ninjask evolution */                      return new EvolutionMethod { Method = method + 1' Species = species' Level = arg' Argument = arg };                    default:                      throw new ArgumentException(nameof(method));              }
Magic Number,PKHeX.Core,EvolutionSet3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Evolutions\EvolutionSets\EvolutionSet3.cs,GetMethod,The following statement contains a magic number: switch (method)              {                  case 1: /* Friendship*/                  case 2: /* Friendship day*/                  case 3: /* Friendship night*/                  case 5: /* Trade   */                  case 6: /* Trade while holding */                      return new EvolutionMethod { Method = method' Species = species' Argument = arg };                  case 4: /* Level Up */                      return new EvolutionMethod { Method = 4' Species = species' Level = arg' Argument = arg };                  case 7: /* Use item */                  case 15: /* Beauty evolution*/                      return new EvolutionMethod { Method = method + 1' Species = species' Argument = arg };                  case 8: /* Tyrogue -> Hitmonchan */                  case 9: /* Tyrogue -> Hitmonlee */                  case 10: /* Tyrogue -> Hitmontop*/                  case 11: /* Wurmple -> Silcoon evolution */                  case 12: /* Wurmple -> Cascoon evolution */                  case 13: /* Nincada -> Ninjask evolution */                  case 14: /* Shedinja spawn in Nincada -> Ninjask evolution */                      return new EvolutionMethod { Method = method + 1' Species = species' Level = arg' Argument = arg };                    default:                      throw new ArgumentException(nameof(method));              }
Magic Number,PKHeX.Core,EvolutionSet3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Evolutions\EvolutionSets\EvolutionSet3.cs,GetMethod,The following statement contains a magic number: switch (method)              {                  case 1: /* Friendship*/                  case 2: /* Friendship day*/                  case 3: /* Friendship night*/                  case 5: /* Trade   */                  case 6: /* Trade while holding */                      return new EvolutionMethod { Method = method' Species = species' Argument = arg };                  case 4: /* Level Up */                      return new EvolutionMethod { Method = 4' Species = species' Level = arg' Argument = arg };                  case 7: /* Use item */                  case 15: /* Beauty evolution*/                      return new EvolutionMethod { Method = method + 1' Species = species' Argument = arg };                  case 8: /* Tyrogue -> Hitmonchan */                  case 9: /* Tyrogue -> Hitmonlee */                  case 10: /* Tyrogue -> Hitmontop*/                  case 11: /* Wurmple -> Silcoon evolution */                  case 12: /* Wurmple -> Cascoon evolution */                  case 13: /* Nincada -> Ninjask evolution */                  case 14: /* Shedinja spawn in Nincada -> Ninjask evolution */                      return new EvolutionMethod { Method = method + 1' Species = species' Level = arg' Argument = arg };                    default:                      throw new ArgumentException(nameof(method));              }
Magic Number,PKHeX.Core,EvolutionSet3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Evolutions\EvolutionSets\EvolutionSet3.cs,GetMethod,The following statement contains a magic number: switch (method)              {                  case 1: /* Friendship*/                  case 2: /* Friendship day*/                  case 3: /* Friendship night*/                  case 5: /* Trade   */                  case 6: /* Trade while holding */                      return new EvolutionMethod { Method = method' Species = species' Argument = arg };                  case 4: /* Level Up */                      return new EvolutionMethod { Method = 4' Species = species' Level = arg' Argument = arg };                  case 7: /* Use item */                  case 15: /* Beauty evolution*/                      return new EvolutionMethod { Method = method + 1' Species = species' Argument = arg };                  case 8: /* Tyrogue -> Hitmonchan */                  case 9: /* Tyrogue -> Hitmonlee */                  case 10: /* Tyrogue -> Hitmontop*/                  case 11: /* Wurmple -> Silcoon evolution */                  case 12: /* Wurmple -> Cascoon evolution */                  case 13: /* Nincada -> Ninjask evolution */                  case 14: /* Shedinja spawn in Nincada -> Ninjask evolution */                      return new EvolutionMethod { Method = method + 1' Species = species' Level = arg' Argument = arg };                    default:                      throw new ArgumentException(nameof(method));              }
Magic Number,PKHeX.Core,EvolutionSet3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Evolutions\EvolutionSets\EvolutionSet3.cs,GetMethod,The following statement contains a magic number: switch (method)              {                  case 1: /* Friendship*/                  case 2: /* Friendship day*/                  case 3: /* Friendship night*/                  case 5: /* Trade   */                  case 6: /* Trade while holding */                      return new EvolutionMethod { Method = method' Species = species' Argument = arg };                  case 4: /* Level Up */                      return new EvolutionMethod { Method = 4' Species = species' Level = arg' Argument = arg };                  case 7: /* Use item */                  case 15: /* Beauty evolution*/                      return new EvolutionMethod { Method = method + 1' Species = species' Argument = arg };                  case 8: /* Tyrogue -> Hitmonchan */                  case 9: /* Tyrogue -> Hitmonlee */                  case 10: /* Tyrogue -> Hitmontop*/                  case 11: /* Wurmple -> Silcoon evolution */                  case 12: /* Wurmple -> Cascoon evolution */                  case 13: /* Nincada -> Ninjask evolution */                  case 14: /* Shedinja spawn in Nincada -> Ninjask evolution */                      return new EvolutionMethod { Method = method + 1' Species = species' Level = arg' Argument = arg };                    default:                      throw new ArgumentException(nameof(method));              }
Magic Number,PKHeX.Core,EvolutionSet3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Evolutions\EvolutionSets\EvolutionSet3.cs,GetMethod,The following statement contains a magic number: switch (method)              {                  case 1: /* Friendship*/                  case 2: /* Friendship day*/                  case 3: /* Friendship night*/                  case 5: /* Trade   */                  case 6: /* Trade while holding */                      return new EvolutionMethod { Method = method' Species = species' Argument = arg };                  case 4: /* Level Up */                      return new EvolutionMethod { Method = 4' Species = species' Level = arg' Argument = arg };                  case 7: /* Use item */                  case 15: /* Beauty evolution*/                      return new EvolutionMethod { Method = method + 1' Species = species' Argument = arg };                  case 8: /* Tyrogue -> Hitmonchan */                  case 9: /* Tyrogue -> Hitmonlee */                  case 10: /* Tyrogue -> Hitmontop*/                  case 11: /* Wurmple -> Silcoon evolution */                  case 12: /* Wurmple -> Cascoon evolution */                  case 13: /* Nincada -> Ninjask evolution */                  case 14: /* Shedinja spawn in Nincada -> Ninjask evolution */                      return new EvolutionMethod { Method = method + 1' Species = species' Level = arg' Argument = arg };                    default:                      throw new ArgumentException(nameof(method));              }
Magic Number,PKHeX.Core,EvolutionSet3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Evolutions\EvolutionSets\EvolutionSet3.cs,GetMethod,The following statement contains a magic number: switch (method)              {                  case 1: /* Friendship*/                  case 2: /* Friendship day*/                  case 3: /* Friendship night*/                  case 5: /* Trade   */                  case 6: /* Trade while holding */                      return new EvolutionMethod { Method = method' Species = species' Argument = arg };                  case 4: /* Level Up */                      return new EvolutionMethod { Method = 4' Species = species' Level = arg' Argument = arg };                  case 7: /* Use item */                  case 15: /* Beauty evolution*/                      return new EvolutionMethod { Method = method + 1' Species = species' Argument = arg };                  case 8: /* Tyrogue -> Hitmonchan */                  case 9: /* Tyrogue -> Hitmonlee */                  case 10: /* Tyrogue -> Hitmontop*/                  case 11: /* Wurmple -> Silcoon evolution */                  case 12: /* Wurmple -> Cascoon evolution */                  case 13: /* Nincada -> Ninjask evolution */                  case 14: /* Shedinja spawn in Nincada -> Ninjask evolution */                      return new EvolutionMethod { Method = method + 1' Species = species' Level = arg' Argument = arg };                    default:                      throw new ArgumentException(nameof(method));              }
Magic Number,PKHeX.Core,EvolutionSet3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Evolutions\EvolutionSets\EvolutionSet3.cs,GetMethod,The following statement contains a magic number: switch (method)              {                  case 1: /* Friendship*/                  case 2: /* Friendship day*/                  case 3: /* Friendship night*/                  case 5: /* Trade   */                  case 6: /* Trade while holding */                      return new EvolutionMethod { Method = method' Species = species' Argument = arg };                  case 4: /* Level Up */                      return new EvolutionMethod { Method = 4' Species = species' Level = arg' Argument = arg };                  case 7: /* Use item */                  case 15: /* Beauty evolution*/                      return new EvolutionMethod { Method = method + 1' Species = species' Argument = arg };                  case 8: /* Tyrogue -> Hitmonchan */                  case 9: /* Tyrogue -> Hitmonlee */                  case 10: /* Tyrogue -> Hitmontop*/                  case 11: /* Wurmple -> Silcoon evolution */                  case 12: /* Wurmple -> Cascoon evolution */                  case 13: /* Nincada -> Ninjask evolution */                  case 14: /* Shedinja spawn in Nincada -> Ninjask evolution */                      return new EvolutionMethod { Method = method + 1' Species = species' Level = arg' Argument = arg };                    default:                      throw new ArgumentException(nameof(method));              }
Magic Number,PKHeX.Core,EvolutionSet3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Evolutions\EvolutionSets\EvolutionSet3.cs,GetMethod,The following statement contains a magic number: switch (method)              {                  case 1: /* Friendship*/                  case 2: /* Friendship day*/                  case 3: /* Friendship night*/                  case 5: /* Trade   */                  case 6: /* Trade while holding */                      return new EvolutionMethod { Method = method' Species = species' Argument = arg };                  case 4: /* Level Up */                      return new EvolutionMethod { Method = 4' Species = species' Level = arg' Argument = arg };                  case 7: /* Use item */                  case 15: /* Beauty evolution*/                      return new EvolutionMethod { Method = method + 1' Species = species' Argument = arg };                  case 8: /* Tyrogue -> Hitmonchan */                  case 9: /* Tyrogue -> Hitmonlee */                  case 10: /* Tyrogue -> Hitmontop*/                  case 11: /* Wurmple -> Silcoon evolution */                  case 12: /* Wurmple -> Cascoon evolution */                  case 13: /* Nincada -> Ninjask evolution */                  case 14: /* Shedinja spawn in Nincada -> Ninjask evolution */                      return new EvolutionMethod { Method = method + 1' Species = species' Level = arg' Argument = arg };                    default:                      throw new ArgumentException(nameof(method));              }
Magic Number,PKHeX.Core,EvolutionSet3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Evolutions\EvolutionSets\EvolutionSet3.cs,GetMethod,The following statement contains a magic number: switch (method)              {                  case 1: /* Friendship*/                  case 2: /* Friendship day*/                  case 3: /* Friendship night*/                  case 5: /* Trade   */                  case 6: /* Trade while holding */                      return new EvolutionMethod { Method = method' Species = species' Argument = arg };                  case 4: /* Level Up */                      return new EvolutionMethod { Method = 4' Species = species' Level = arg' Argument = arg };                  case 7: /* Use item */                  case 15: /* Beauty evolution*/                      return new EvolutionMethod { Method = method + 1' Species = species' Argument = arg };                  case 8: /* Tyrogue -> Hitmonchan */                  case 9: /* Tyrogue -> Hitmonlee */                  case 10: /* Tyrogue -> Hitmontop*/                  case 11: /* Wurmple -> Silcoon evolution */                  case 12: /* Wurmple -> Cascoon evolution */                  case 13: /* Nincada -> Ninjask evolution */                  case 14: /* Shedinja spawn in Nincada -> Ninjask evolution */                      return new EvolutionMethod { Method = method + 1' Species = species' Level = arg' Argument = arg };                    default:                      throw new ArgumentException(nameof(method));              }
Magic Number,PKHeX.Core,EvolutionSet3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Evolutions\EvolutionSets\EvolutionSet3.cs,GetMethod,The following statement contains a magic number: switch (method)              {                  case 1: /* Friendship*/                  case 2: /* Friendship day*/                  case 3: /* Friendship night*/                  case 5: /* Trade   */                  case 6: /* Trade while holding */                      return new EvolutionMethod { Method = method' Species = species' Argument = arg };                  case 4: /* Level Up */                      return new EvolutionMethod { Method = 4' Species = species' Level = arg' Argument = arg };                  case 7: /* Use item */                  case 15: /* Beauty evolution*/                      return new EvolutionMethod { Method = method + 1' Species = species' Argument = arg };                  case 8: /* Tyrogue -> Hitmonchan */                  case 9: /* Tyrogue -> Hitmonlee */                  case 10: /* Tyrogue -> Hitmontop*/                  case 11: /* Wurmple -> Silcoon evolution */                  case 12: /* Wurmple -> Cascoon evolution */                  case 13: /* Nincada -> Ninjask evolution */                  case 14: /* Shedinja spawn in Nincada -> Ninjask evolution */                      return new EvolutionMethod { Method = method + 1' Species = species' Level = arg' Argument = arg };                    default:                      throw new ArgumentException(nameof(method));              }
Magic Number,PKHeX.Core,EvolutionSet3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Evolutions\EvolutionSets\EvolutionSet3.cs,GetMethod,The following statement contains a magic number: switch (method)              {                  case 1: /* Friendship*/                  case 2: /* Friendship day*/                  case 3: /* Friendship night*/                  case 5: /* Trade   */                  case 6: /* Trade while holding */                      return new EvolutionMethod { Method = method' Species = species' Argument = arg };                  case 4: /* Level Up */                      return new EvolutionMethod { Method = 4' Species = species' Level = arg' Argument = arg };                  case 7: /* Use item */                  case 15: /* Beauty evolution*/                      return new EvolutionMethod { Method = method + 1' Species = species' Argument = arg };                  case 8: /* Tyrogue -> Hitmonchan */                  case 9: /* Tyrogue -> Hitmonlee */                  case 10: /* Tyrogue -> Hitmontop*/                  case 11: /* Wurmple -> Silcoon evolution */                  case 12: /* Wurmple -> Cascoon evolution */                  case 13: /* Nincada -> Ninjask evolution */                  case 14: /* Shedinja spawn in Nincada -> Ninjask evolution */                      return new EvolutionMethod { Method = method + 1' Species = species' Level = arg' Argument = arg };                    default:                      throw new ArgumentException(nameof(method));              }
Magic Number,PKHeX.Core,EvolutionSet3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Evolutions\EvolutionSets\EvolutionSet3.cs,GetArray,The following statement contains a magic number: const int maxCount = 5;
Magic Number,PKHeX.Core,EvolutionSet3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Evolutions\EvolutionSets\EvolutionSet3.cs,GetArray,The following statement contains a magic number: const int size = 8;
Magic Number,PKHeX.Core,EvolutionSet4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Evolutions\EvolutionSets\EvolutionSet4.cs,GetMethod,The following statement contains a magic number: int arg = BitConverter.ToUInt16(data' offset + 2);
Magic Number,PKHeX.Core,EvolutionSet4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Evolutions\EvolutionSets\EvolutionSet4.cs,GetMethod,The following statement contains a magic number: int species = BitConverter.ToUInt16(data' offset + 4);
Magic Number,PKHeX.Core,EvolutionSet4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Evolutions\EvolutionSets\EvolutionSet4.cs,GetMethod,The following statement contains a magic number: method > 6
Magic Number,PKHeX.Core,EvolutionSet4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Evolutions\EvolutionSets\EvolutionSet4.cs,GetArray,The following statement contains a magic number: const int bpe = 6;
Magic Number,PKHeX.Core,EvolutionSet4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Evolutions\EvolutionSets\EvolutionSet4.cs,GetArray,The following statement contains a magic number: const int entries = 7;
Magic Number,PKHeX.Core,EvolutionSet4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Evolutions\EvolutionSets\EvolutionSet4.cs,GetArray,The following statement contains a magic number: const int size = (entries * bpe) + 2;
Magic Number,PKHeX.Core,EvolutionSet5,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Evolutions\EvolutionSets\EvolutionSet5.cs,GetMethod,The following statement contains a magic number: int arg = BitConverter.ToUInt16(data' offset + 2);
Magic Number,PKHeX.Core,EvolutionSet5,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Evolutions\EvolutionSets\EvolutionSet5.cs,GetMethod,The following statement contains a magic number: int species = BitConverter.ToUInt16(data' offset + 4);
Magic Number,PKHeX.Core,EvolutionSet5,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Evolutions\EvolutionSets\EvolutionSet5.cs,GetArray,The following statement contains a magic number: const int bpe = 6;
Magic Number,PKHeX.Core,EvolutionSet5,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Evolutions\EvolutionSets\EvolutionSet5.cs,GetArray,The following statement contains a magic number: const int entries = 7;
Magic Number,PKHeX.Core,EvolutionSet6,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Evolutions\EvolutionSets\EvolutionSet6.cs,GetMethods,The following statement contains a magic number: var evo = new EvolutionMethod                  {                      Method = BitConverter.ToUInt16(data' i + 0)'                      Argument = BitConverter.ToUInt16(data' i + 2)'                      Species = BitConverter.ToUInt16(data' i + 4)'                        // Copy                      Level = BitConverter.ToUInt16(data' i + 2)'                  };
Magic Number,PKHeX.Core,EvolutionSet6,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Evolutions\EvolutionSets\EvolutionSet6.cs,GetMethods,The following statement contains a magic number: var evo = new EvolutionMethod                  {                      Method = BitConverter.ToUInt16(data' i + 0)'                      Argument = BitConverter.ToUInt16(data' i + 2)'                      Species = BitConverter.ToUInt16(data' i + 4)'                        // Copy                      Level = BitConverter.ToUInt16(data' i + 2)'                  };
Magic Number,PKHeX.Core,EvolutionSet6,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Evolutions\EvolutionSets\EvolutionSet6.cs,GetMethods,The following statement contains a magic number: var evo = new EvolutionMethod                  {                      Method = BitConverter.ToUInt16(data' i + 0)'                      Argument = BitConverter.ToUInt16(data' i + 2)'                      Species = BitConverter.ToUInt16(data' i + 4)'                        // Copy                      Level = BitConverter.ToUInt16(data' i + 2)'                  };
Magic Number,PKHeX.Core,EvolutionSet7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Evolutions\EvolutionSets\EvolutionSet7.cs,GetMethods,The following statement contains a magic number: evos[i / SIZE] = new EvolutionMethod                  {                      Method = BitConverter.ToUInt16(data' i + 0)'                      Argument = BitConverter.ToUInt16(data' i + 2)'                      Species = BitConverter.ToUInt16(data' i + 4)'                      Form = (sbyte)data[i + 6]'                      Level = data[i + 7]'                  };
Magic Number,PKHeX.Core,EvolutionSet7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Evolutions\EvolutionSets\EvolutionSet7.cs,GetMethods,The following statement contains a magic number: evos[i / SIZE] = new EvolutionMethod                  {                      Method = BitConverter.ToUInt16(data' i + 0)'                      Argument = BitConverter.ToUInt16(data' i + 2)'                      Species = BitConverter.ToUInt16(data' i + 4)'                      Form = (sbyte)data[i + 6]'                      Level = data[i + 7]'                  };
Magic Number,PKHeX.Core,EvolutionSet7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Evolutions\EvolutionSets\EvolutionSet7.cs,GetMethods,The following statement contains a magic number: evos[i / SIZE] = new EvolutionMethod                  {                      Method = BitConverter.ToUInt16(data' i + 0)'                      Argument = BitConverter.ToUInt16(data' i + 2)'                      Species = BitConverter.ToUInt16(data' i + 4)'                      Form = (sbyte)data[i + 6]'                      Level = data[i + 7]'                  };
Magic Number,PKHeX.Core,EvolutionSet7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Evolutions\EvolutionSets\EvolutionSet7.cs,GetMethods,The following statement contains a magic number: evos[i / SIZE] = new EvolutionMethod                  {                      Method = BitConverter.ToUInt16(data' i + 0)'                      Argument = BitConverter.ToUInt16(data' i + 2)'                      Species = BitConverter.ToUInt16(data' i + 4)'                      Form = (sbyte)data[i + 6]'                      Level = data[i + 7]'                  };
Magic Number,PKHeX.Core,EvolutionTree,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Evolutions\EvolutionTree.cs,GetEvolutionTree,The following statement contains a magic number: return generation switch              {                  1 => Evolves1'                  2 => Evolves2'                  3 => Evolves3'                  4 => Evolves4'                  5 => Evolves5'                  6 => Evolves6'                  7 => Evolves7'                  _ => Evolves8              };
Magic Number,PKHeX.Core,EvolutionTree,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Evolutions\EvolutionTree.cs,GetEvolutionTree,The following statement contains a magic number: return generation switch              {                  1 => Evolves1'                  2 => Evolves2'                  3 => Evolves3'                  4 => Evolves4'                  5 => Evolves5'                  6 => Evolves6'                  7 => Evolves7'                  _ => Evolves8              };
Magic Number,PKHeX.Core,EvolutionTree,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Evolutions\EvolutionTree.cs,GetEvolutionTree,The following statement contains a magic number: return generation switch              {                  1 => Evolves1'                  2 => Evolves2'                  3 => Evolves3'                  4 => Evolves4'                  5 => Evolves5'                  6 => Evolves6'                  7 => Evolves7'                  _ => Evolves8              };
Magic Number,PKHeX.Core,EvolutionTree,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Evolutions\EvolutionTree.cs,GetEvolutionTree,The following statement contains a magic number: return generation switch              {                  1 => Evolves1'                  2 => Evolves2'                  3 => Evolves3'                  4 => Evolves4'                  5 => Evolves5'                  6 => Evolves6'                  7 => Evolves7'                  _ => Evolves8              };
Magic Number,PKHeX.Core,EvolutionTree,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Evolutions\EvolutionTree.cs,GetEvolutionTree,The following statement contains a magic number: return generation switch              {                  1 => Evolves1'                  2 => Evolves2'                  3 => Evolves3'                  4 => Evolves4'                  5 => Evolves5'                  6 => Evolves6'                  7 => Evolves7'                  _ => Evolves8              };
Magic Number,PKHeX.Core,EvolutionTree,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Evolutions\EvolutionTree.cs,GetEvolutionTree,The following statement contains a magic number: return generation switch              {                  1 => Evolves1'                  2 => Evolves2'                  3 => Evolves3'                  4 => Evolves4'                  5 => Evolves5'                  6 => Evolves6'                  7 => Evolves7'                  _ => Evolves8              };
Magic Number,PKHeX.Core,EvolutionTree,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Evolutions\EvolutionTree.cs,GetEvolutionTree,The following statement contains a magic number: return generation switch              {                  1 => Evolves1'                  2 => Evolves2'                  3 => Evolves3'                  4 => Evolves4'                  5 => Evolves5'                  6 => Evolves6'                  7 => (pkm.GG ? Evolves7b : Evolves7)'                  _ => Evolves8              };
Magic Number,PKHeX.Core,EvolutionTree,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Evolutions\EvolutionTree.cs,GetEvolutionTree,The following statement contains a magic number: return generation switch              {                  1 => Evolves1'                  2 => Evolves2'                  3 => Evolves3'                  4 => Evolves4'                  5 => Evolves5'                  6 => Evolves6'                  7 => (pkm.GG ? Evolves7b : Evolves7)'                  _ => Evolves8              };
Magic Number,PKHeX.Core,EvolutionTree,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Evolutions\EvolutionTree.cs,GetEvolutionTree,The following statement contains a magic number: return generation switch              {                  1 => Evolves1'                  2 => Evolves2'                  3 => Evolves3'                  4 => Evolves4'                  5 => Evolves5'                  6 => Evolves6'                  7 => (pkm.GG ? Evolves7b : Evolves7)'                  _ => Evolves8              };
Magic Number,PKHeX.Core,EvolutionTree,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Evolutions\EvolutionTree.cs,GetEvolutionTree,The following statement contains a magic number: return generation switch              {                  1 => Evolves1'                  2 => Evolves2'                  3 => Evolves3'                  4 => Evolves4'                  5 => Evolves5'                  6 => Evolves6'                  7 => (pkm.GG ? Evolves7b : Evolves7)'                  _ => Evolves8              };
Magic Number,PKHeX.Core,EvolutionTree,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Evolutions\EvolutionTree.cs,GetEvolutionTree,The following statement contains a magic number: return generation switch              {                  1 => Evolves1'                  2 => Evolves2'                  3 => Evolves3'                  4 => Evolves4'                  5 => Evolves5'                  6 => Evolves6'                  7 => (pkm.GG ? Evolves7b : Evolves7)'                  _ => Evolves8              };
Magic Number,PKHeX.Core,EvolutionTree,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Evolutions\EvolutionTree.cs,GetEvolutionTree,The following statement contains a magic number: return generation switch              {                  1 => Evolves1'                  2 => Evolves2'                  3 => Evolves3'                  4 => Evolves4'                  5 => Evolves5'                  6 => Evolves6'                  7 => (pkm.GG ? Evolves7b : Evolves7)'                  _ => Evolves8              };
Magic Number,PKHeX.Core,EvolutionTree,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Evolutions\EvolutionTree.cs,CreateTree,The following statement contains a magic number: Game.GetGeneration() <= 6
Magic Number,PKHeX.Core,EvolutionTree,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Evolutions\EvolutionTree.cs,FixEvoTreeSM,The following statement contains a magic number: UnpackForms((int)Species.Wormadam' 2);
Magic Number,PKHeX.Core,EvolutionTree,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Evolutions\EvolutionTree.cs,FixEvoTreeSM,The following statement contains a magic number: UnpackForms((int)Species.Gourgeist' 3);
Magic Number,PKHeX.Core,EvolutionTree,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Evolutions\EvolutionTree.cs,FixEvoTreeSS,The following statement contains a magic number: SpreadForms((int)Species.Silvally' 17);
Magic Number,PKHeX.Core,EvolutionTree,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Evolutions\EvolutionTree.cs,GetIndex,The following statement contains a magic number: pkm.Format < 7
Magic Number,PKHeX.Core,Learnset,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Learnset\Learnset.cs,GetMoves,The following statement contains a magic number: minLevel <= 1 && maxLevel >= 100
Magic Number,PKHeX.Core,Learnset,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Learnset\Learnset.cs,AddMoves,The following statement contains a magic number: minLevel <= 1 && maxLevel >= 100
Magic Number,PKHeX.Core,Learnset,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Learnset\Learnset.cs,GetEncounterMoves,The following statement contains a magic number: const int count = 4;
Magic Number,PKHeX.Core,Learnset,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Learnset\Learnset.cs,GetEncounterMoves,The following statement contains a magic number: ctr &= 3;
Magic Number,PKHeX.Core,Learnset,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Learnset\Learnset.cs,GetMinMoveLevel,The following statement contains a magic number: return Math.Max(end - 4' 1);
Magic Number,PKHeX.Core,LearnsetReader,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Learnset\LearnsetReader.cs,ReadLearnset8,The following statement contains a magic number: end += 2;
Magic Number,PKHeX.Core,LearnsetReader,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Learnset\LearnsetReader.cs,ReadLearnset8,The following statement contains a magic number: var Count = (end - offset) / 2;
Magic Number,PKHeX.Core,LearnsetReader,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Learnset\LearnsetReader.cs,ReadLearnset16,The following statement contains a magic number: data.Length < 4 || data.Length % 4 != 0
Magic Number,PKHeX.Core,LearnsetReader,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Learnset\LearnsetReader.cs,ReadLearnset16,The following statement contains a magic number: data.Length < 4 || data.Length % 4 != 0
Magic Number,PKHeX.Core,LearnsetReader,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Learnset\LearnsetReader.cs,ReadLearnset16,The following statement contains a magic number: var Count = (data.Length / 4) - 1;
Magic Number,PKHeX.Core,LearnsetReader,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Learnset\LearnsetReader.cs,ReadLearnset16,The following statement contains a magic number: int ofs = i * 4;
Magic Number,PKHeX.Core,LearnsetReader,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Learnset\LearnsetReader.cs,ReadLearnset16,The following statement contains a magic number: Levels[i] = BitConverter.ToInt16(data' ofs + 2);
Magic Number,PKHeX.Core,EggInfoSource,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\EggInfoSource.cs,EggInfoSource,The following statement contains a magic number: AllowInherited = notSpecial && !pkm.WasGiftEgg && pkm.Species != 489 && pkm.Species != 490;
Magic Number,PKHeX.Core,EggInfoSource,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\EggInfoSource.cs,EggInfoSource,The following statement contains a magic number: AllowInherited = notSpecial && !pkm.WasGiftEgg && pkm.Species != 489 && pkm.Species != 490;
Magic Number,PKHeX.Core,EggInfoSource,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\EggInfoSource.cs,EggInfoSource,The following statement contains a magic number: LevelUp = AllowLevelUp                  ? Legal.GetBaseEggMoves(pkm' e.Species'  e.Form' e.Version' 100).Except(Base).ToList()                  : (IReadOnlyList<int>)Array.Empty<int>();
Magic Number,PKHeX.Core,EggInfoSource,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\EggInfoSource.cs,EggInfoSource,The following statement contains a magic number: Tutor = e.Version == GameVersion.C                  ? MoveTutor.GetTutorMoves(pkm' pkm.Species' pkm.AltForm' false' 2).ToList()                  : (IReadOnlyList<int>)Array.Empty<int>();
Magic Number,PKHeX.Core,EggInfoSource,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\EggInfoSource.cs,EggInfoSource,The following statement contains a magic number: bool volt = notSpecial && (pkm.GenNumber > 3 || e.Version == GameVersion.E) && Legal.LightBall.Contains(pkm.Species);
Magic Number,PKHeX.Core,EggInfoSource,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\EggInfoSource.cs,EggInfoSource,The following statement contains a magic number: Egg.Add(344);
Magic Number,PKHeX.Core,LearnInfo,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\LearnInfo.cs,LearnInfo,The following statement contains a magic number: IsGen2Pkm = pkm.Format == 2 || pkm.VC2;
Magic Number,PKHeX.Core,LearnLookup,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\LearnLookup.cs,GetIsLevelUpG1,The following statement contains a magic number: unique.Count - i <= 4
Magic Number,PKHeX.Core,MoveEgg,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveEgg.cs,GetEggMoves,The following statement contains a magic number: int gen = pkm.Format <= 2 || pkm.VC ? 2 : pkm.GenNumber;
Magic Number,PKHeX.Core,MoveEgg,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveEgg.cs,GetEggMoves,The following statement contains a magic number: int gen = pkm.Format <= 2 || pkm.VC ? 2 : pkm.GenNumber;
Magic Number,PKHeX.Core,MoveEgg,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveEgg.cs,GetEggMoves,The following statement contains a magic number: !pkm.InhabitedGeneration(gen' species) || (pkm.PersonalInfo.Gender == 255 && !FixedGenderFromBiGender.Contains(species))
Magic Number,PKHeX.Core,MoveEgg,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveEgg.cs,GetEggMoves,The following statement contains a magic number: pkm.Version == 15 || pkm.GG
Magic Number,PKHeX.Core,MoveEgg,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveEgg.cs,GetEggMoves,The following statement contains a magic number: switch (gen)              {                  case 1:                  case 2:                      return (version == GameVersion.C ? EggMovesC : EggMovesGS)[species].Moves;                  case 3:                      return EggMovesRS[species].Moves;                  case 4:                      return version switch                      {                          GameVersion.HG => EggMovesHGSS[species].Moves'                          GameVersion.SS => EggMovesHGSS[species].Moves'                          _ => EggMovesDPPt[species].Moves                      };                  case 5:                      return EggMovesBW[species].Moves;                  case 6: // entries per species                      return version switch                      {                          GameVersion.OR => EggMovesAO[species].Moves'                          GameVersion.AS => EggMovesAO[species].Moves'                          _ => EggMovesXY[species].Moves                      };                    case 7: // entries per form if required                      return version switch                      {                          GameVersion.US => GetFormEggMoves(species' formnum' EggMovesUSUM)'                          GameVersion.UM => GetFormEggMoves(species' formnum' EggMovesUSUM)'                          _ => GetFormEggMoves(species' formnum' EggMovesSM)                      };                    case 8:                      return version switch                      {                          _ => GetFormEggMoves(species' formnum' EggMovesSWSH)                      };                    default:                      return Array.Empty<int>();              }
Magic Number,PKHeX.Core,MoveEgg,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveEgg.cs,GetEggMoves,The following statement contains a magic number: switch (gen)              {                  case 1:                  case 2:                      return (version == GameVersion.C ? EggMovesC : EggMovesGS)[species].Moves;                  case 3:                      return EggMovesRS[species].Moves;                  case 4:                      return version switch                      {                          GameVersion.HG => EggMovesHGSS[species].Moves'                          GameVersion.SS => EggMovesHGSS[species].Moves'                          _ => EggMovesDPPt[species].Moves                      };                  case 5:                      return EggMovesBW[species].Moves;                  case 6: // entries per species                      return version switch                      {                          GameVersion.OR => EggMovesAO[species].Moves'                          GameVersion.AS => EggMovesAO[species].Moves'                          _ => EggMovesXY[species].Moves                      };                    case 7: // entries per form if required                      return version switch                      {                          GameVersion.US => GetFormEggMoves(species' formnum' EggMovesUSUM)'                          GameVersion.UM => GetFormEggMoves(species' formnum' EggMovesUSUM)'                          _ => GetFormEggMoves(species' formnum' EggMovesSM)                      };                    case 8:                      return version switch                      {                          _ => GetFormEggMoves(species' formnum' EggMovesSWSH)                      };                    default:                      return Array.Empty<int>();              }
Magic Number,PKHeX.Core,MoveEgg,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveEgg.cs,GetEggMoves,The following statement contains a magic number: switch (gen)              {                  case 1:                  case 2:                      return (version == GameVersion.C ? EggMovesC : EggMovesGS)[species].Moves;                  case 3:                      return EggMovesRS[species].Moves;                  case 4:                      return version switch                      {                          GameVersion.HG => EggMovesHGSS[species].Moves'                          GameVersion.SS => EggMovesHGSS[species].Moves'                          _ => EggMovesDPPt[species].Moves                      };                  case 5:                      return EggMovesBW[species].Moves;                  case 6: // entries per species                      return version switch                      {                          GameVersion.OR => EggMovesAO[species].Moves'                          GameVersion.AS => EggMovesAO[species].Moves'                          _ => EggMovesXY[species].Moves                      };                    case 7: // entries per form if required                      return version switch                      {                          GameVersion.US => GetFormEggMoves(species' formnum' EggMovesUSUM)'                          GameVersion.UM => GetFormEggMoves(species' formnum' EggMovesUSUM)'                          _ => GetFormEggMoves(species' formnum' EggMovesSM)                      };                    case 8:                      return version switch                      {                          _ => GetFormEggMoves(species' formnum' EggMovesSWSH)                      };                    default:                      return Array.Empty<int>();              }
Magic Number,PKHeX.Core,MoveEgg,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveEgg.cs,GetEggMoves,The following statement contains a magic number: switch (gen)              {                  case 1:                  case 2:                      return (version == GameVersion.C ? EggMovesC : EggMovesGS)[species].Moves;                  case 3:                      return EggMovesRS[species].Moves;                  case 4:                      return version switch                      {                          GameVersion.HG => EggMovesHGSS[species].Moves'                          GameVersion.SS => EggMovesHGSS[species].Moves'                          _ => EggMovesDPPt[species].Moves                      };                  case 5:                      return EggMovesBW[species].Moves;                  case 6: // entries per species                      return version switch                      {                          GameVersion.OR => EggMovesAO[species].Moves'                          GameVersion.AS => EggMovesAO[species].Moves'                          _ => EggMovesXY[species].Moves                      };                    case 7: // entries per form if required                      return version switch                      {                          GameVersion.US => GetFormEggMoves(species' formnum' EggMovesUSUM)'                          GameVersion.UM => GetFormEggMoves(species' formnum' EggMovesUSUM)'                          _ => GetFormEggMoves(species' formnum' EggMovesSM)                      };                    case 8:                      return version switch                      {                          _ => GetFormEggMoves(species' formnum' EggMovesSWSH)                      };                    default:                      return Array.Empty<int>();              }
Magic Number,PKHeX.Core,MoveEgg,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveEgg.cs,GetEggMoves,The following statement contains a magic number: switch (gen)              {                  case 1:                  case 2:                      return (version == GameVersion.C ? EggMovesC : EggMovesGS)[species].Moves;                  case 3:                      return EggMovesRS[species].Moves;                  case 4:                      return version switch                      {                          GameVersion.HG => EggMovesHGSS[species].Moves'                          GameVersion.SS => EggMovesHGSS[species].Moves'                          _ => EggMovesDPPt[species].Moves                      };                  case 5:                      return EggMovesBW[species].Moves;                  case 6: // entries per species                      return version switch                      {                          GameVersion.OR => EggMovesAO[species].Moves'                          GameVersion.AS => EggMovesAO[species].Moves'                          _ => EggMovesXY[species].Moves                      };                    case 7: // entries per form if required                      return version switch                      {                          GameVersion.US => GetFormEggMoves(species' formnum' EggMovesUSUM)'                          GameVersion.UM => GetFormEggMoves(species' formnum' EggMovesUSUM)'                          _ => GetFormEggMoves(species' formnum' EggMovesSM)                      };                    case 8:                      return version switch                      {                          _ => GetFormEggMoves(species' formnum' EggMovesSWSH)                      };                    default:                      return Array.Empty<int>();              }
Magic Number,PKHeX.Core,MoveEgg,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveEgg.cs,GetEggMoves,The following statement contains a magic number: switch (gen)              {                  case 1:                  case 2:                      return (version == GameVersion.C ? EggMovesC : EggMovesGS)[species].Moves;                  case 3:                      return EggMovesRS[species].Moves;                  case 4:                      return version switch                      {                          GameVersion.HG => EggMovesHGSS[species].Moves'                          GameVersion.SS => EggMovesHGSS[species].Moves'                          _ => EggMovesDPPt[species].Moves                      };                  case 5:                      return EggMovesBW[species].Moves;                  case 6: // entries per species                      return version switch                      {                          GameVersion.OR => EggMovesAO[species].Moves'                          GameVersion.AS => EggMovesAO[species].Moves'                          _ => EggMovesXY[species].Moves                      };                    case 7: // entries per form if required                      return version switch                      {                          GameVersion.US => GetFormEggMoves(species' formnum' EggMovesUSUM)'                          GameVersion.UM => GetFormEggMoves(species' formnum' EggMovesUSUM)'                          _ => GetFormEggMoves(species' formnum' EggMovesSM)                      };                    case 8:                      return version switch                      {                          _ => GetFormEggMoves(species' formnum' EggMovesSWSH)                      };                    default:                      return Array.Empty<int>();              }
Magic Number,PKHeX.Core,MoveEgg,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveEgg.cs,GetEggMoves,The following statement contains a magic number: switch (gen)              {                  case 1:                  case 2:                      return (version == GameVersion.C ? EggMovesC : EggMovesGS)[species].Moves;                  case 3:                      return EggMovesRS[species].Moves;                  case 4:                      return version switch                      {                          GameVersion.HG => EggMovesHGSS[species].Moves'                          GameVersion.SS => EggMovesHGSS[species].Moves'                          _ => EggMovesDPPt[species].Moves                      };                  case 5:                      return EggMovesBW[species].Moves;                  case 6: // entries per species                      return version switch                      {                          GameVersion.OR => EggMovesAO[species].Moves'                          GameVersion.AS => EggMovesAO[species].Moves'                          _ => EggMovesXY[species].Moves                      };                    case 7: // entries per form if required                      return version switch                      {                          GameVersion.US => GetFormEggMoves(species' formnum' EggMovesUSUM)'                          GameVersion.UM => GetFormEggMoves(species' formnum' EggMovesUSUM)'                          _ => GetFormEggMoves(species' formnum' EggMovesSM)                      };                    case 8:                      return version switch                      {                          _ => GetFormEggMoves(species' formnum' EggMovesSWSH)                      };                    default:                      return Array.Empty<int>();              }
Magic Number,PKHeX.Core,MoveLevelUp,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveLevelUp.cs,GetIsLevelUpMove,The following statement contains a magic number: switch (generation)              {                  case 1: return GetIsLevelUp1(species' move' lvl' form' minlvlG1' version);                  case 2 when move > MaxMoveID_1 && pkm.LearnMovesNew2Disallowed(): return LearnNONE;                  case 2: return GetIsLevelUp2(species' move' lvl' form' minlvlG2' pkm.Korean' version);                    case 3: return GetIsLevelUp3(species' move' lvl' form' version);                  case 4: return GetIsLevelUp4(species' move' lvl' form' version);                  case 5: return GetIsLevelUp5(species' move' lvl' form' version);                  case 6: return GetIsLevelUp6(species' move' lvl' form' version);                  case 7: return GetIsLevelUp7(species' move' form' version); // move reminder can give any move 1-100                  case 8: return GetIsLevelUp8(species' move' lvl' form' version);              }
Magic Number,PKHeX.Core,MoveLevelUp,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveLevelUp.cs,GetIsLevelUpMove,The following statement contains a magic number: switch (generation)              {                  case 1: return GetIsLevelUp1(species' move' lvl' form' minlvlG1' version);                  case 2 when move > MaxMoveID_1 && pkm.LearnMovesNew2Disallowed(): return LearnNONE;                  case 2: return GetIsLevelUp2(species' move' lvl' form' minlvlG2' pkm.Korean' version);                    case 3: return GetIsLevelUp3(species' move' lvl' form' version);                  case 4: return GetIsLevelUp4(species' move' lvl' form' version);                  case 5: return GetIsLevelUp5(species' move' lvl' form' version);                  case 6: return GetIsLevelUp6(species' move' lvl' form' version);                  case 7: return GetIsLevelUp7(species' move' form' version); // move reminder can give any move 1-100                  case 8: return GetIsLevelUp8(species' move' lvl' form' version);              }
Magic Number,PKHeX.Core,MoveLevelUp,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveLevelUp.cs,GetIsLevelUpMove,The following statement contains a magic number: switch (generation)              {                  case 1: return GetIsLevelUp1(species' move' lvl' form' minlvlG1' version);                  case 2 when move > MaxMoveID_1 && pkm.LearnMovesNew2Disallowed(): return LearnNONE;                  case 2: return GetIsLevelUp2(species' move' lvl' form' minlvlG2' pkm.Korean' version);                    case 3: return GetIsLevelUp3(species' move' lvl' form' version);                  case 4: return GetIsLevelUp4(species' move' lvl' form' version);                  case 5: return GetIsLevelUp5(species' move' lvl' form' version);                  case 6: return GetIsLevelUp6(species' move' lvl' form' version);                  case 7: return GetIsLevelUp7(species' move' form' version); // move reminder can give any move 1-100                  case 8: return GetIsLevelUp8(species' move' lvl' form' version);              }
Magic Number,PKHeX.Core,MoveLevelUp,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveLevelUp.cs,GetIsLevelUpMove,The following statement contains a magic number: switch (generation)              {                  case 1: return GetIsLevelUp1(species' move' lvl' form' minlvlG1' version);                  case 2 when move > MaxMoveID_1 && pkm.LearnMovesNew2Disallowed(): return LearnNONE;                  case 2: return GetIsLevelUp2(species' move' lvl' form' minlvlG2' pkm.Korean' version);                    case 3: return GetIsLevelUp3(species' move' lvl' form' version);                  case 4: return GetIsLevelUp4(species' move' lvl' form' version);                  case 5: return GetIsLevelUp5(species' move' lvl' form' version);                  case 6: return GetIsLevelUp6(species' move' lvl' form' version);                  case 7: return GetIsLevelUp7(species' move' form' version); // move reminder can give any move 1-100                  case 8: return GetIsLevelUp8(species' move' lvl' form' version);              }
Magic Number,PKHeX.Core,MoveLevelUp,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveLevelUp.cs,GetIsLevelUpMove,The following statement contains a magic number: switch (generation)              {                  case 1: return GetIsLevelUp1(species' move' lvl' form' minlvlG1' version);                  case 2 when move > MaxMoveID_1 && pkm.LearnMovesNew2Disallowed(): return LearnNONE;                  case 2: return GetIsLevelUp2(species' move' lvl' form' minlvlG2' pkm.Korean' version);                    case 3: return GetIsLevelUp3(species' move' lvl' form' version);                  case 4: return GetIsLevelUp4(species' move' lvl' form' version);                  case 5: return GetIsLevelUp5(species' move' lvl' form' version);                  case 6: return GetIsLevelUp6(species' move' lvl' form' version);                  case 7: return GetIsLevelUp7(species' move' form' version); // move reminder can give any move 1-100                  case 8: return GetIsLevelUp8(species' move' lvl' form' version);              }
Magic Number,PKHeX.Core,MoveLevelUp,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveLevelUp.cs,GetIsLevelUpMove,The following statement contains a magic number: switch (generation)              {                  case 1: return GetIsLevelUp1(species' move' lvl' form' minlvlG1' version);                  case 2 when move > MaxMoveID_1 && pkm.LearnMovesNew2Disallowed(): return LearnNONE;                  case 2: return GetIsLevelUp2(species' move' lvl' form' minlvlG2' pkm.Korean' version);                    case 3: return GetIsLevelUp3(species' move' lvl' form' version);                  case 4: return GetIsLevelUp4(species' move' lvl' form' version);                  case 5: return GetIsLevelUp5(species' move' lvl' form' version);                  case 6: return GetIsLevelUp6(species' move' lvl' form' version);                  case 7: return GetIsLevelUp7(species' move' form' version); // move reminder can give any move 1-100                  case 8: return GetIsLevelUp8(species' move' lvl' form' version);              }
Magic Number,PKHeX.Core,MoveLevelUp,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveLevelUp.cs,GetIsLevelUpMove,The following statement contains a magic number: switch (generation)              {                  case 1: return GetIsLevelUp1(species' move' lvl' form' minlvlG1' version);                  case 2 when move > MaxMoveID_1 && pkm.LearnMovesNew2Disallowed(): return LearnNONE;                  case 2: return GetIsLevelUp2(species' move' lvl' form' minlvlG2' pkm.Korean' version);                    case 3: return GetIsLevelUp3(species' move' lvl' form' version);                  case 4: return GetIsLevelUp4(species' move' lvl' form' version);                  case 5: return GetIsLevelUp5(species' move' lvl' form' version);                  case 6: return GetIsLevelUp6(species' move' lvl' form' version);                  case 7: return GetIsLevelUp7(species' move' form' version); // move reminder can give any move 1-100                  case 8: return GetIsLevelUp8(species' move' lvl' form' version);              }
Magic Number,PKHeX.Core,MoveLevelUp,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveLevelUp.cs,GetIsLevelUpMove,The following statement contains a magic number: switch (generation)              {                  case 1: return GetIsLevelUp1(species' move' lvl' form' minlvlG1' version);                  case 2 when move > MaxMoveID_1 && pkm.LearnMovesNew2Disallowed(): return LearnNONE;                  case 2: return GetIsLevelUp2(species' move' lvl' form' minlvlG2' pkm.Korean' version);                    case 3: return GetIsLevelUp3(species' move' lvl' form' version);                  case 4: return GetIsLevelUp4(species' move' lvl' form' version);                  case 5: return GetIsLevelUp5(species' move' lvl' form' version);                  case 6: return GetIsLevelUp6(species' move' lvl' form' version);                  case 7: return GetIsLevelUp7(species' move' form' version); // move reminder can give any move 1-100                  case 8: return GetIsLevelUp8(species' move' lvl' form' version);              }
Magic Number,PKHeX.Core,MoveLevelUp,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveLevelUp.cs,GetIsLevelUp3,The following statement contains a magic number: species == 386
Magic Number,PKHeX.Core,MoveLevelUp,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveLevelUp.cs,GetIsLevelUp5,The following statement contains a magic number: switch (ver)              {                  case Any:                      var first = LearnBW.GetIsLevelUp(species' form' move' lvl);                      if (first.IsLevelUp && species != 646)  // Kyurem moves are same for both versions' but forme movepool not present.                          return first;                      return LearnB2W2.GetIsLevelUp(species' form' move' lvl);                  case B: case W: case BW:                      return LearnBW.GetIsLevelUp(species' form' move' lvl);                  case B2: case W2: case B2W2:                      return LearnB2W2.GetIsLevelUp(species' form' move' lvl);              }
Magic Number,PKHeX.Core,MoveLevelUp,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveLevelUp.cs,GetDeoxysGameVersion3,The following statement contains a magic number: return form switch              {                  0 => RS'                  1 => FR'                  2 => LG'                  3 => E'                  _ => Invalid              };
Magic Number,PKHeX.Core,MoveLevelUp,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveLevelUp.cs,GetDeoxysGameVersion3,The following statement contains a magic number: return form switch              {                  0 => RS'                  1 => FR'                  2 => LG'                  3 => E'                  _ => Invalid              };
Magic Number,PKHeX.Core,MoveLevelUp,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveLevelUp.cs,GetDeoxysLearn3,The following statement contains a magic number: return form switch                  {                      0 => LevelUpRS[index]' // Normal                      1 => LevelUpFR[index]' // Attack                      2 => LevelUpLG[index]' // Defense                      3 => LevelUpE[index]' // Speed                      _ => null'                  };
Magic Number,PKHeX.Core,MoveLevelUp,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveLevelUp.cs,GetDeoxysLearn3,The following statement contains a magic number: return form switch                  {                      0 => LevelUpRS[index]' // Normal                      1 => LevelUpFR[index]' // Attack                      2 => LevelUpLG[index]' // Defense                      3 => LevelUpE[index]' // Speed                      _ => null'                  };
Magic Number,PKHeX.Core,MoveLevelUp,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveLevelUp.cs,GetDeoxysLearn3,The following statement contains a magic number: gen != 3
Magic Number,PKHeX.Core,MoveLevelUp,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveLevelUp.cs,GetMovesLevelUp,The following statement contains a magic number: return Generation switch              {                  1 => GetMovesLevelUp1(species' form' lvl' minlvlG1' version)'                  2 => GetMovesLevelUp2(species' form' lvl' minlvlG2' pkm.Korean' pkm.LearnMovesNew2Disallowed()' version)'                  3 => GetMovesLevelUp3(species' form' lvl' version)'                  4 => GetMovesLevelUp4(species' form' lvl' version)'                  5 => GetMovesLevelUp5(species' form' lvl' version)'                  6 => GetMovesLevelUp6(species' form' lvl' version)'                  7 => GetMovesLevelUp7(species' form' lvl' MoveReminder' version)'                  8 => GetMovesLevelUp8(species' form' lvl' version)'                  _ => (IEnumerable<int>)Array.Empty<int>()              };
Magic Number,PKHeX.Core,MoveLevelUp,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveLevelUp.cs,GetMovesLevelUp,The following statement contains a magic number: return Generation switch              {                  1 => GetMovesLevelUp1(species' form' lvl' minlvlG1' version)'                  2 => GetMovesLevelUp2(species' form' lvl' minlvlG2' pkm.Korean' pkm.LearnMovesNew2Disallowed()' version)'                  3 => GetMovesLevelUp3(species' form' lvl' version)'                  4 => GetMovesLevelUp4(species' form' lvl' version)'                  5 => GetMovesLevelUp5(species' form' lvl' version)'                  6 => GetMovesLevelUp6(species' form' lvl' version)'                  7 => GetMovesLevelUp7(species' form' lvl' MoveReminder' version)'                  8 => GetMovesLevelUp8(species' form' lvl' version)'                  _ => (IEnumerable<int>)Array.Empty<int>()              };
Magic Number,PKHeX.Core,MoveLevelUp,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveLevelUp.cs,GetMovesLevelUp,The following statement contains a magic number: return Generation switch              {                  1 => GetMovesLevelUp1(species' form' lvl' minlvlG1' version)'                  2 => GetMovesLevelUp2(species' form' lvl' minlvlG2' pkm.Korean' pkm.LearnMovesNew2Disallowed()' version)'                  3 => GetMovesLevelUp3(species' form' lvl' version)'                  4 => GetMovesLevelUp4(species' form' lvl' version)'                  5 => GetMovesLevelUp5(species' form' lvl' version)'                  6 => GetMovesLevelUp6(species' form' lvl' version)'                  7 => GetMovesLevelUp7(species' form' lvl' MoveReminder' version)'                  8 => GetMovesLevelUp8(species' form' lvl' version)'                  _ => (IEnumerable<int>)Array.Empty<int>()              };
Magic Number,PKHeX.Core,MoveLevelUp,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveLevelUp.cs,GetMovesLevelUp,The following statement contains a magic number: return Generation switch              {                  1 => GetMovesLevelUp1(species' form' lvl' minlvlG1' version)'                  2 => GetMovesLevelUp2(species' form' lvl' minlvlG2' pkm.Korean' pkm.LearnMovesNew2Disallowed()' version)'                  3 => GetMovesLevelUp3(species' form' lvl' version)'                  4 => GetMovesLevelUp4(species' form' lvl' version)'                  5 => GetMovesLevelUp5(species' form' lvl' version)'                  6 => GetMovesLevelUp6(species' form' lvl' version)'                  7 => GetMovesLevelUp7(species' form' lvl' MoveReminder' version)'                  8 => GetMovesLevelUp8(species' form' lvl' version)'                  _ => (IEnumerable<int>)Array.Empty<int>()              };
Magic Number,PKHeX.Core,MoveLevelUp,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveLevelUp.cs,GetMovesLevelUp,The following statement contains a magic number: return Generation switch              {                  1 => GetMovesLevelUp1(species' form' lvl' minlvlG1' version)'                  2 => GetMovesLevelUp2(species' form' lvl' minlvlG2' pkm.Korean' pkm.LearnMovesNew2Disallowed()' version)'                  3 => GetMovesLevelUp3(species' form' lvl' version)'                  4 => GetMovesLevelUp4(species' form' lvl' version)'                  5 => GetMovesLevelUp5(species' form' lvl' version)'                  6 => GetMovesLevelUp6(species' form' lvl' version)'                  7 => GetMovesLevelUp7(species' form' lvl' MoveReminder' version)'                  8 => GetMovesLevelUp8(species' form' lvl' version)'                  _ => (IEnumerable<int>)Array.Empty<int>()              };
Magic Number,PKHeX.Core,MoveLevelUp,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveLevelUp.cs,GetMovesLevelUp,The following statement contains a magic number: return Generation switch              {                  1 => GetMovesLevelUp1(species' form' lvl' minlvlG1' version)'                  2 => GetMovesLevelUp2(species' form' lvl' minlvlG2' pkm.Korean' pkm.LearnMovesNew2Disallowed()' version)'                  3 => GetMovesLevelUp3(species' form' lvl' version)'                  4 => GetMovesLevelUp4(species' form' lvl' version)'                  5 => GetMovesLevelUp5(species' form' lvl' version)'                  6 => GetMovesLevelUp6(species' form' lvl' version)'                  7 => GetMovesLevelUp7(species' form' lvl' MoveReminder' version)'                  8 => GetMovesLevelUp8(species' form' lvl' version)'                  _ => (IEnumerable<int>)Array.Empty<int>()              };
Magic Number,PKHeX.Core,MoveLevelUp,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveLevelUp.cs,GetMovesLevelUp,The following statement contains a magic number: return Generation switch              {                  1 => GetMovesLevelUp1(species' form' lvl' minlvlG1' version)'                  2 => GetMovesLevelUp2(species' form' lvl' minlvlG2' pkm.Korean' pkm.LearnMovesNew2Disallowed()' version)'                  3 => GetMovesLevelUp3(species' form' lvl' version)'                  4 => GetMovesLevelUp4(species' form' lvl' version)'                  5 => GetMovesLevelUp5(species' form' lvl' version)'                  6 => GetMovesLevelUp6(species' form' lvl' version)'                  7 => GetMovesLevelUp7(species' form' lvl' MoveReminder' version)'                  8 => GetMovesLevelUp8(species' form' lvl' version)'                  _ => (IEnumerable<int>)Array.Empty<int>()              };
Magic Number,PKHeX.Core,MoveLevelUp,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveLevelUp.cs,AddMovesLevelUp3,The following statement contains a magic number: species == 386
Magic Number,PKHeX.Core,MoveLevelUp,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveLevelUp.cs,AddMovesLevelUp5,The following statement contains a magic number: switch (ver)              {                  case Any:                      if (species != 646) // Kyurem moves are same for both versions' but forme movepool not present.                          LearnBW.AddMoves(moves' species' form' max);                      return LearnB2W2.AddMoves(moves' species' form' max);                    case B: case W: case BW:                      return LearnBW.AddMoves(moves' species' form' max);                  case B2: case W2: case B2W2:                      return LearnB2W2.AddMoves(moves' species' form' max);              }
Magic Number,PKHeX.Core,MoveLevelUp,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveLevelUp.cs,AddMovesLevelUp7,The following statement contains a magic number: max = 100;
Magic Number,PKHeX.Core,MoveTechnicalMachine,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveTechnicalMachine.cs,GetIsMachineMove,The following statement contains a magic number: switch (generation)              {                  case 1: return GetIsMachine1(species' move);                  case 2:                      if (pkm.VC1 && move > Legal.MaxMoveID_1)                          return Legal.NONE;                      return GetIsMachine2(species' move);                  case 3: return GetIsMachine3(species' move' pkm.Format' RemoveTransfer);                  case 4: return GetIsMachine4(species' move' pkm.Format' RemoveTransfer' form);                  case 5: return GetIsMachine5(species' move' form);                  case 6: return GetIsMachine6(species' move' form' ver);                  case 7: return GetIsMachine7(species' move' form' ver);                  case 8: return GetIsMachine8(pkm' species' move' form' ver' allowBit);                  default:                      return Legal.NONE;              }
Magic Number,PKHeX.Core,MoveTechnicalMachine,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveTechnicalMachine.cs,GetIsMachineMove,The following statement contains a magic number: switch (generation)              {                  case 1: return GetIsMachine1(species' move);                  case 2:                      if (pkm.VC1 && move > Legal.MaxMoveID_1)                          return Legal.NONE;                      return GetIsMachine2(species' move);                  case 3: return GetIsMachine3(species' move' pkm.Format' RemoveTransfer);                  case 4: return GetIsMachine4(species' move' pkm.Format' RemoveTransfer' form);                  case 5: return GetIsMachine5(species' move' form);                  case 6: return GetIsMachine6(species' move' form' ver);                  case 7: return GetIsMachine7(species' move' form' ver);                  case 8: return GetIsMachine8(pkm' species' move' form' ver' allowBit);                  default:                      return Legal.NONE;              }
Magic Number,PKHeX.Core,MoveTechnicalMachine,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveTechnicalMachine.cs,GetIsMachineMove,The following statement contains a magic number: switch (generation)              {                  case 1: return GetIsMachine1(species' move);                  case 2:                      if (pkm.VC1 && move > Legal.MaxMoveID_1)                          return Legal.NONE;                      return GetIsMachine2(species' move);                  case 3: return GetIsMachine3(species' move' pkm.Format' RemoveTransfer);                  case 4: return GetIsMachine4(species' move' pkm.Format' RemoveTransfer' form);                  case 5: return GetIsMachine5(species' move' form);                  case 6: return GetIsMachine6(species' move' form' ver);                  case 7: return GetIsMachine7(species' move' form' ver);                  case 8: return GetIsMachine8(pkm' species' move' form' ver' allowBit);                  default:                      return Legal.NONE;              }
Magic Number,PKHeX.Core,MoveTechnicalMachine,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveTechnicalMachine.cs,GetIsMachineMove,The following statement contains a magic number: switch (generation)              {                  case 1: return GetIsMachine1(species' move);                  case 2:                      if (pkm.VC1 && move > Legal.MaxMoveID_1)                          return Legal.NONE;                      return GetIsMachine2(species' move);                  case 3: return GetIsMachine3(species' move' pkm.Format' RemoveTransfer);                  case 4: return GetIsMachine4(species' move' pkm.Format' RemoveTransfer' form);                  case 5: return GetIsMachine5(species' move' form);                  case 6: return GetIsMachine6(species' move' form' ver);                  case 7: return GetIsMachine7(species' move' form' ver);                  case 8: return GetIsMachine8(pkm' species' move' form' ver' allowBit);                  default:                      return Legal.NONE;              }
Magic Number,PKHeX.Core,MoveTechnicalMachine,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveTechnicalMachine.cs,GetIsMachineMove,The following statement contains a magic number: switch (generation)              {                  case 1: return GetIsMachine1(species' move);                  case 2:                      if (pkm.VC1 && move > Legal.MaxMoveID_1)                          return Legal.NONE;                      return GetIsMachine2(species' move);                  case 3: return GetIsMachine3(species' move' pkm.Format' RemoveTransfer);                  case 4: return GetIsMachine4(species' move' pkm.Format' RemoveTransfer' form);                  case 5: return GetIsMachine5(species' move' form);                  case 6: return GetIsMachine6(species' move' form' ver);                  case 7: return GetIsMachine7(species' move' form' ver);                  case 8: return GetIsMachine8(pkm' species' move' form' ver' allowBit);                  default:                      return Legal.NONE;              }
Magic Number,PKHeX.Core,MoveTechnicalMachine,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveTechnicalMachine.cs,GetIsMachineMove,The following statement contains a magic number: switch (generation)              {                  case 1: return GetIsMachine1(species' move);                  case 2:                      if (pkm.VC1 && move > Legal.MaxMoveID_1)                          return Legal.NONE;                      return GetIsMachine2(species' move);                  case 3: return GetIsMachine3(species' move' pkm.Format' RemoveTransfer);                  case 4: return GetIsMachine4(species' move' pkm.Format' RemoveTransfer' form);                  case 5: return GetIsMachine5(species' move' form);                  case 6: return GetIsMachine6(species' move' form' ver);                  case 7: return GetIsMachine7(species' move' form' ver);                  case 8: return GetIsMachine8(pkm' species' move' form' ver' allowBit);                  default:                      return Legal.NONE;              }
Magic Number,PKHeX.Core,MoveTechnicalMachine,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveTechnicalMachine.cs,GetIsMachineMove,The following statement contains a magic number: switch (generation)              {                  case 1: return GetIsMachine1(species' move);                  case 2:                      if (pkm.VC1 && move > Legal.MaxMoveID_1)                          return Legal.NONE;                      return GetIsMachine2(species' move);                  case 3: return GetIsMachine3(species' move' pkm.Format' RemoveTransfer);                  case 4: return GetIsMachine4(species' move' pkm.Format' RemoveTransfer' form);                  case 5: return GetIsMachine5(species' move' form);                  case 6: return GetIsMachine6(species' move' form' ver);                  case 7: return GetIsMachine7(species' move' form' ver);                  case 8: return GetIsMachine8(pkm' species' move' form' ver' allowBit);                  default:                      return Legal.NONE;              }
Magic Number,PKHeX.Core,MoveTechnicalMachine,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveTechnicalMachine.cs,GetIsMachine3,The following statement contains a magic number: !RemoveTransfer && format <= 3
Magic Number,PKHeX.Core,MoveTechnicalMachine,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveTechnicalMachine.cs,GetIsMachine3HM,The following statement contains a magic number: m == move && PersonalTable.E[species].TMHM[x + 50]
Magic Number,PKHeX.Core,MoveTechnicalMachine,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveTechnicalMachine.cs,GetIsMachine4,The following statement contains a magic number: RemoveTransfer && format > 4
Magic Number,PKHeX.Core,MoveTechnicalMachine,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveTechnicalMachine.cs,GetIsMachine4HMTransfer,The following statement contains a magic number: switch (move)              {                  case 250: // Whirlpool                      if (PersonalTable.HGSS.GetFormeEntry(species' form).TMHM[96])                          return GameVersion.HGSS;                      break;                  case 432: // Defog                      if (PersonalTable.Pt.GetFormeEntry(species' form).TMHM[96])                          return GameVersion.DPPt;                      break;              }
Magic Number,PKHeX.Core,MoveTechnicalMachine,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveTechnicalMachine.cs,GetIsMachine4HMTransfer,The following statement contains a magic number: switch (move)              {                  case 250: // Whirlpool                      if (PersonalTable.HGSS.GetFormeEntry(species' form).TMHM[96])                          return GameVersion.HGSS;                      break;                  case 432: // Defog                      if (PersonalTable.Pt.GetFormeEntry(species' form).TMHM[96])                          return GameVersion.DPPt;                      break;              }
Magic Number,PKHeX.Core,MoveTechnicalMachine,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveTechnicalMachine.cs,GetIsMachine4HMTransfer,The following statement contains a magic number: switch (move)              {                  case 250: // Whirlpool                      if (PersonalTable.HGSS.GetFormeEntry(species' form).TMHM[96])                          return GameVersion.HGSS;                      break;                  case 432: // Defog                      if (PersonalTable.Pt.GetFormeEntry(species' form).TMHM[96])                          return GameVersion.DPPt;                      break;              }
Magic Number,PKHeX.Core,MoveTechnicalMachine,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveTechnicalMachine.cs,GetIsMachine4HMTransfer,The following statement contains a magic number: switch (move)              {                  case 250: // Whirlpool                      if (PersonalTable.HGSS.GetFormeEntry(species' form).TMHM[96])                          return GameVersion.HGSS;                      break;                  case 432: // Defog                      if (PersonalTable.Pt.GetFormeEntry(species' form).TMHM[96])                          return GameVersion.DPPt;                      break;              }
Magic Number,PKHeX.Core,MoveTechnicalMachine,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveTechnicalMachine.cs,GetIsMachine8,The following statement contains a magic number: i < 100
Magic Number,PKHeX.Core,MoveTechnicalMachine,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveTechnicalMachine.cs,GetIsMachine8,The following statement contains a magic number: Legal.TMHM_SWSH[i + 100] != move
Magic Number,PKHeX.Core,MoveTechnicalMachine,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveTechnicalMachine.cs,GetIsMachine8,The following statement contains a magic number: !PersonalTable.SWSH.GetFormeEntry(species' form).TMHM[i + 100]
Magic Number,PKHeX.Core,MoveTechnicalMachine,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveTechnicalMachine.cs,GetIsMachine8,The following statement contains a magic number: i < 100
Magic Number,PKHeX.Core,MoveTechnicalMachine,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveTechnicalMachine.cs,GetTMHM,The following statement contains a magic number: switch (generation)              {                  case 1: AddMachine1(r' species); break;                  case 2: AddMachine2(r' species);                      if (pkm.Format >= 7 && pkm.VC1)                          r.RemoveAll(z => z > Legal.MaxMoveID_1);                      break;                  case 3: AddMachine3(r' species' pkm.Format' RemoveTransfer); break;                  case 4: AddMachine4(r' species' pkm.Format' RemoveTransfer' form); break;                  case 5: AddMachine5(r' species' form); break;                  case 6: AddMachine6(r' species' form' ver); break;                  case 7: AddMachine7(r' species' form' ver); break;                  case 8: AddMachine8(r' species' form' pkm' ver); break;              }
Magic Number,PKHeX.Core,MoveTechnicalMachine,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveTechnicalMachine.cs,GetTMHM,The following statement contains a magic number: switch (generation)              {                  case 1: AddMachine1(r' species); break;                  case 2: AddMachine2(r' species);                      if (pkm.Format >= 7 && pkm.VC1)                          r.RemoveAll(z => z > Legal.MaxMoveID_1);                      break;                  case 3: AddMachine3(r' species' pkm.Format' RemoveTransfer); break;                  case 4: AddMachine4(r' species' pkm.Format' RemoveTransfer' form); break;                  case 5: AddMachine5(r' species' form); break;                  case 6: AddMachine6(r' species' form' ver); break;                  case 7: AddMachine7(r' species' form' ver); break;                  case 8: AddMachine8(r' species' form' pkm' ver); break;              }
Magic Number,PKHeX.Core,MoveTechnicalMachine,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveTechnicalMachine.cs,GetTMHM,The following statement contains a magic number: switch (generation)              {                  case 1: AddMachine1(r' species); break;                  case 2: AddMachine2(r' species);                      if (pkm.Format >= 7 && pkm.VC1)                          r.RemoveAll(z => z > Legal.MaxMoveID_1);                      break;                  case 3: AddMachine3(r' species' pkm.Format' RemoveTransfer); break;                  case 4: AddMachine4(r' species' pkm.Format' RemoveTransfer' form); break;                  case 5: AddMachine5(r' species' form); break;                  case 6: AddMachine6(r' species' form' ver); break;                  case 7: AddMachine7(r' species' form' ver); break;                  case 8: AddMachine8(r' species' form' pkm' ver); break;              }
Magic Number,PKHeX.Core,MoveTechnicalMachine,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveTechnicalMachine.cs,GetTMHM,The following statement contains a magic number: switch (generation)              {                  case 1: AddMachine1(r' species); break;                  case 2: AddMachine2(r' species);                      if (pkm.Format >= 7 && pkm.VC1)                          r.RemoveAll(z => z > Legal.MaxMoveID_1);                      break;                  case 3: AddMachine3(r' species' pkm.Format' RemoveTransfer); break;                  case 4: AddMachine4(r' species' pkm.Format' RemoveTransfer' form); break;                  case 5: AddMachine5(r' species' form); break;                  case 6: AddMachine6(r' species' form' ver); break;                  case 7: AddMachine7(r' species' form' ver); break;                  case 8: AddMachine8(r' species' form' pkm' ver); break;              }
Magic Number,PKHeX.Core,MoveTechnicalMachine,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveTechnicalMachine.cs,GetTMHM,The following statement contains a magic number: switch (generation)              {                  case 1: AddMachine1(r' species); break;                  case 2: AddMachine2(r' species);                      if (pkm.Format >= 7 && pkm.VC1)                          r.RemoveAll(z => z > Legal.MaxMoveID_1);                      break;                  case 3: AddMachine3(r' species' pkm.Format' RemoveTransfer); break;                  case 4: AddMachine4(r' species' pkm.Format' RemoveTransfer' form); break;                  case 5: AddMachine5(r' species' form); break;                  case 6: AddMachine6(r' species' form' ver); break;                  case 7: AddMachine7(r' species' form' ver); break;                  case 8: AddMachine8(r' species' form' pkm' ver); break;              }
Magic Number,PKHeX.Core,MoveTechnicalMachine,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveTechnicalMachine.cs,GetTMHM,The following statement contains a magic number: switch (generation)              {                  case 1: AddMachine1(r' species); break;                  case 2: AddMachine2(r' species);                      if (pkm.Format >= 7 && pkm.VC1)                          r.RemoveAll(z => z > Legal.MaxMoveID_1);                      break;                  case 3: AddMachine3(r' species' pkm.Format' RemoveTransfer); break;                  case 4: AddMachine4(r' species' pkm.Format' RemoveTransfer' form); break;                  case 5: AddMachine5(r' species' form); break;                  case 6: AddMachine6(r' species' form' ver); break;                  case 7: AddMachine7(r' species' form' ver); break;                  case 8: AddMachine8(r' species' form' pkm' ver); break;              }
Magic Number,PKHeX.Core,MoveTechnicalMachine,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveTechnicalMachine.cs,GetTMHM,The following statement contains a magic number: switch (generation)              {                  case 1: AddMachine1(r' species); break;                  case 2: AddMachine2(r' species);                      if (pkm.Format >= 7 && pkm.VC1)                          r.RemoveAll(z => z > Legal.MaxMoveID_1);                      break;                  case 3: AddMachine3(r' species' pkm.Format' RemoveTransfer); break;                  case 4: AddMachine4(r' species' pkm.Format' RemoveTransfer' form); break;                  case 5: AddMachine5(r' species' form); break;                  case 6: AddMachine6(r' species' form' ver); break;                  case 7: AddMachine7(r' species' form' ver); break;                  case 8: AddMachine8(r' species' form' pkm' ver); break;              }
Magic Number,PKHeX.Core,MoveTechnicalMachine,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveTechnicalMachine.cs,GetTMHM,The following statement contains a magic number: switch (generation)              {                  case 1: AddMachine1(r' species); break;                  case 2: AddMachine2(r' species);                      if (pkm.Format >= 7 && pkm.VC1)                          r.RemoveAll(z => z > Legal.MaxMoveID_1);                      break;                  case 3: AddMachine3(r' species' pkm.Format' RemoveTransfer); break;                  case 4: AddMachine4(r' species' pkm.Format' RemoveTransfer' form); break;                  case 5: AddMachine5(r' species' form); break;                  case 6: AddMachine6(r' species' form' ver); break;                  case 7: AddMachine7(r' species' form' ver); break;                  case 8: AddMachine8(r' species' form' pkm' ver); break;              }
Magic Number,PKHeX.Core,MoveTechnicalMachine,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveTechnicalMachine.cs,AddMachine3,The following statement contains a magic number: r.AddRange(Legal.HM_3.Where((_' m) => pi_c.TMHM[m + 50]));
Magic Number,PKHeX.Core,MoveTechnicalMachine,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveTechnicalMachine.cs,AddMachine3,The following statement contains a magic number: !RemoveTransfer || format == 3
Magic Number,PKHeX.Core,MoveTechnicalMachine,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveTechnicalMachine.cs,AddMachine4,The following statement contains a magic number: r.Add(250);
Magic Number,PKHeX.Core,MoveTechnicalMachine,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveTechnicalMachine.cs,AddMachine4,The following statement contains a magic number: pi_hgss.TMHM[96]
Magic Number,PKHeX.Core,MoveTechnicalMachine,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveTechnicalMachine.cs,AddMachine4,The following statement contains a magic number: r.Add(432);
Magic Number,PKHeX.Core,MoveTechnicalMachine,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveTechnicalMachine.cs,AddMachine4,The following statement contains a magic number: pi_dppt.TMHM[96]
Magic Number,PKHeX.Core,MoveTechnicalMachine,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveTechnicalMachine.cs,AddMachine4,The following statement contains a magic number: RemoveTransfer && format > 4
Magic Number,PKHeX.Core,MoveTechnicalMachine,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveTechnicalMachine.cs,AddMachineSWSH,The following statement contains a magic number: i < 100
Magic Number,PKHeX.Core,MoveTechnicalMachine,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveTechnicalMachine.cs,AddMachineSWSH,The following statement contains a magic number: !tmhm[i + 100]
Magic Number,PKHeX.Core,MoveTechnicalMachine,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveTechnicalMachine.cs,AddMachineSWSH,The following statement contains a magic number: r.Add(Legal.TMHM_SWSH[i + 100]);
Magic Number,PKHeX.Core,MoveTechnicalMachine,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveTechnicalMachine.cs,AddMachineSWSH,The following statement contains a magic number: i < 100
Magic Number,PKHeX.Core,MoveTutor,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveTutor.cs,GetIsTutorMove,The following statement contains a magic number: return generation switch              {                  1 => GetIsTutor1(pkm' species' move)'                  2 => GetIsTutor2(pkm' species' move)'                  3 => GetIsTutor3(species' move)'                  4 => GetIsTutor4(species' form' move)'                  5 => GetIsTutor5(pkm' species' form' specialTutors' move)'                  6 => GetIsTutor6(pkm' species' form' specialTutors' move)'                  7 => GetIsTutor7(pkm' species' form' specialTutors' move)'                  8 => GetIsTutor8(pkm' species' form' specialTutors' move)'                  _ => NONE              };
Magic Number,PKHeX.Core,MoveTutor,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveTutor.cs,GetIsTutorMove,The following statement contains a magic number: return generation switch              {                  1 => GetIsTutor1(pkm' species' move)'                  2 => GetIsTutor2(pkm' species' move)'                  3 => GetIsTutor3(species' move)'                  4 => GetIsTutor4(species' form' move)'                  5 => GetIsTutor5(pkm' species' form' specialTutors' move)'                  6 => GetIsTutor6(pkm' species' form' specialTutors' move)'                  7 => GetIsTutor7(pkm' species' form' specialTutors' move)'                  8 => GetIsTutor8(pkm' species' form' specialTutors' move)'                  _ => NONE              };
Magic Number,PKHeX.Core,MoveTutor,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveTutor.cs,GetIsTutorMove,The following statement contains a magic number: return generation switch              {                  1 => GetIsTutor1(pkm' species' move)'                  2 => GetIsTutor2(pkm' species' move)'                  3 => GetIsTutor3(species' move)'                  4 => GetIsTutor4(species' form' move)'                  5 => GetIsTutor5(pkm' species' form' specialTutors' move)'                  6 => GetIsTutor6(pkm' species' form' specialTutors' move)'                  7 => GetIsTutor7(pkm' species' form' specialTutors' move)'                  8 => GetIsTutor8(pkm' species' form' specialTutors' move)'                  _ => NONE              };
Magic Number,PKHeX.Core,MoveTutor,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveTutor.cs,GetIsTutorMove,The following statement contains a magic number: return generation switch              {                  1 => GetIsTutor1(pkm' species' move)'                  2 => GetIsTutor2(pkm' species' move)'                  3 => GetIsTutor3(species' move)'                  4 => GetIsTutor4(species' form' move)'                  5 => GetIsTutor5(pkm' species' form' specialTutors' move)'                  6 => GetIsTutor6(pkm' species' form' specialTutors' move)'                  7 => GetIsTutor7(pkm' species' form' specialTutors' move)'                  8 => GetIsTutor8(pkm' species' form' specialTutors' move)'                  _ => NONE              };
Magic Number,PKHeX.Core,MoveTutor,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveTutor.cs,GetIsTutorMove,The following statement contains a magic number: return generation switch              {                  1 => GetIsTutor1(pkm' species' move)'                  2 => GetIsTutor2(pkm' species' move)'                  3 => GetIsTutor3(species' move)'                  4 => GetIsTutor4(species' form' move)'                  5 => GetIsTutor5(pkm' species' form' specialTutors' move)'                  6 => GetIsTutor6(pkm' species' form' specialTutors' move)'                  7 => GetIsTutor7(pkm' species' form' specialTutors' move)'                  8 => GetIsTutor8(pkm' species' form' specialTutors' move)'                  _ => NONE              };
Magic Number,PKHeX.Core,MoveTutor,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveTutor.cs,GetIsTutorMove,The following statement contains a magic number: return generation switch              {                  1 => GetIsTutor1(pkm' species' move)'                  2 => GetIsTutor2(pkm' species' move)'                  3 => GetIsTutor3(species' move)'                  4 => GetIsTutor4(species' form' move)'                  5 => GetIsTutor5(pkm' species' form' specialTutors' move)'                  6 => GetIsTutor6(pkm' species' form' specialTutors' move)'                  7 => GetIsTutor7(pkm' species' form' specialTutors' move)'                  8 => GetIsTutor8(pkm' species' form' specialTutors' move)'                  _ => NONE              };
Magic Number,PKHeX.Core,MoveTutor,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveTutor.cs,GetIsTutorMove,The following statement contains a magic number: return generation switch              {                  1 => GetIsTutor1(pkm' species' move)'                  2 => GetIsTutor2(pkm' species' move)'                  3 => GetIsTutor3(species' move)'                  4 => GetIsTutor4(species' form' move)'                  5 => GetIsTutor5(pkm' species' form' specialTutors' move)'                  6 => GetIsTutor6(pkm' species' form' specialTutors' move)'                  7 => GetIsTutor7(pkm' species' form' specialTutors' move)'                  8 => GetIsTutor8(pkm' species' form' specialTutors' move)'                  _ => NONE              };
Magic Number,PKHeX.Core,MoveTutor,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveTutor.cs,GetIsTutor1,The following statement contains a magic number: move != 57 || ParseSettings.AllowGBCartEra
Magic Number,PKHeX.Core,MoveTutor,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveTutor.cs,GetIsTutor1,The following statement contains a magic number: pkm.Format < 3 && (species == 25 || species == 26)
Magic Number,PKHeX.Core,MoveTutor,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveTutor.cs,GetIsTutor1,The following statement contains a magic number: pkm.Format < 3 && (species == 25 || species == 26)
Magic Number,PKHeX.Core,MoveTutor,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveTutor.cs,GetIsTutor1,The following statement contains a magic number: pkm.Format < 3 && (species == 25 || species == 26)
Magic Number,PKHeX.Core,MoveTutor,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveTutor.cs,GetIsTutor2,The following statement contains a magic number: return info.TMHM[57 + i] ? GameVersion.C : NONE;
Magic Number,PKHeX.Core,MoveTutor,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveTutor.cs,GetIsTutor3,The following statement contains a magic number: species == 151 && Tutor_3Mew.Contains(move)
Magic Number,PKHeX.Core,MoveTutor,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveTutor.cs,GetTutorMoves,The following statement contains a magic number: switch (generation)              {                  case 1: AddMovesTutor1(moves' species' pkm.Format); break;                  case 2: AddMovesTutor2(moves' species' pkm.Format' pkm.Korean); break;                  case 3: AddMovesTutor3(moves' species); break;                  case 4: AddMovesTutor4(moves' species' form); break;                  case 5: AddMovesTutor5(moves' species' form' pkm' specialTutors); break;                  case 6: AddMovesTutor6(moves' species' form' pkm' specialTutors); break;                  case 7: AddMovesTutor7(moves' species' form' pkm' specialTutors); break;                  case 8: AddMovesTutor8(moves' species' form' pkm' specialTutors); break;              }
Magic Number,PKHeX.Core,MoveTutor,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveTutor.cs,GetTutorMoves,The following statement contains a magic number: switch (generation)              {                  case 1: AddMovesTutor1(moves' species' pkm.Format); break;                  case 2: AddMovesTutor2(moves' species' pkm.Format' pkm.Korean); break;                  case 3: AddMovesTutor3(moves' species); break;                  case 4: AddMovesTutor4(moves' species' form); break;                  case 5: AddMovesTutor5(moves' species' form' pkm' specialTutors); break;                  case 6: AddMovesTutor6(moves' species' form' pkm' specialTutors); break;                  case 7: AddMovesTutor7(moves' species' form' pkm' specialTutors); break;                  case 8: AddMovesTutor8(moves' species' form' pkm' specialTutors); break;              }
Magic Number,PKHeX.Core,MoveTutor,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveTutor.cs,GetTutorMoves,The following statement contains a magic number: switch (generation)              {                  case 1: AddMovesTutor1(moves' species' pkm.Format); break;                  case 2: AddMovesTutor2(moves' species' pkm.Format' pkm.Korean); break;                  case 3: AddMovesTutor3(moves' species); break;                  case 4: AddMovesTutor4(moves' species' form); break;                  case 5: AddMovesTutor5(moves' species' form' pkm' specialTutors); break;                  case 6: AddMovesTutor6(moves' species' form' pkm' specialTutors); break;                  case 7: AddMovesTutor7(moves' species' form' pkm' specialTutors); break;                  case 8: AddMovesTutor8(moves' species' form' pkm' specialTutors); break;              }
Magic Number,PKHeX.Core,MoveTutor,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveTutor.cs,GetTutorMoves,The following statement contains a magic number: switch (generation)              {                  case 1: AddMovesTutor1(moves' species' pkm.Format); break;                  case 2: AddMovesTutor2(moves' species' pkm.Format' pkm.Korean); break;                  case 3: AddMovesTutor3(moves' species); break;                  case 4: AddMovesTutor4(moves' species' form); break;                  case 5: AddMovesTutor5(moves' species' form' pkm' specialTutors); break;                  case 6: AddMovesTutor6(moves' species' form' pkm' specialTutors); break;                  case 7: AddMovesTutor7(moves' species' form' pkm' specialTutors); break;                  case 8: AddMovesTutor8(moves' species' form' pkm' specialTutors); break;              }
Magic Number,PKHeX.Core,MoveTutor,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveTutor.cs,GetTutorMoves,The following statement contains a magic number: switch (generation)              {                  case 1: AddMovesTutor1(moves' species' pkm.Format); break;                  case 2: AddMovesTutor2(moves' species' pkm.Format' pkm.Korean); break;                  case 3: AddMovesTutor3(moves' species); break;                  case 4: AddMovesTutor4(moves' species' form); break;                  case 5: AddMovesTutor5(moves' species' form' pkm' specialTutors); break;                  case 6: AddMovesTutor6(moves' species' form' pkm' specialTutors); break;                  case 7: AddMovesTutor7(moves' species' form' pkm' specialTutors); break;                  case 8: AddMovesTutor8(moves' species' form' pkm' specialTutors); break;              }
Magic Number,PKHeX.Core,MoveTutor,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveTutor.cs,GetTutorMoves,The following statement contains a magic number: switch (generation)              {                  case 1: AddMovesTutor1(moves' species' pkm.Format); break;                  case 2: AddMovesTutor2(moves' species' pkm.Format' pkm.Korean); break;                  case 3: AddMovesTutor3(moves' species); break;                  case 4: AddMovesTutor4(moves' species' form); break;                  case 5: AddMovesTutor5(moves' species' form' pkm' specialTutors); break;                  case 6: AddMovesTutor6(moves' species' form' pkm' specialTutors); break;                  case 7: AddMovesTutor7(moves' species' form' pkm' specialTutors); break;                  case 8: AddMovesTutor8(moves' species' form' pkm' specialTutors); break;              }
Magic Number,PKHeX.Core,MoveTutor,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveTutor.cs,GetTutorMoves,The following statement contains a magic number: switch (generation)              {                  case 1: AddMovesTutor1(moves' species' pkm.Format); break;                  case 2: AddMovesTutor2(moves' species' pkm.Format' pkm.Korean); break;                  case 3: AddMovesTutor3(moves' species); break;                  case 4: AddMovesTutor4(moves' species' form); break;                  case 5: AddMovesTutor5(moves' species' form' pkm' specialTutors); break;                  case 6: AddMovesTutor6(moves' species' form' pkm' specialTutors); break;                  case 7: AddMovesTutor7(moves' species' form' pkm' specialTutors); break;                  case 8: AddMovesTutor8(moves' species' form' pkm' specialTutors); break;              }
Magic Number,PKHeX.Core,MoveTutor,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveTutor.cs,AddMovesTutor1,The following statement contains a magic number: moves.Add(57);
Magic Number,PKHeX.Core,MoveTutor,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveTutor.cs,AddMovesTutor1,The following statement contains a magic number: ParseSettings.AllowGBCartEra && format < 3 && (species == 25 || species == 26)
Magic Number,PKHeX.Core,MoveTutor,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveTutor.cs,AddMovesTutor1,The following statement contains a magic number: ParseSettings.AllowGBCartEra && format < 3 && (species == 25 || species == 26)
Magic Number,PKHeX.Core,MoveTutor,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveTutor.cs,AddMovesTutor1,The following statement contains a magic number: ParseSettings.AllowGBCartEra && format < 3 && (species == 25 || species == 26)
Magic Number,PKHeX.Core,MoveTutor,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveTutor.cs,AddMovesTutor2,The following statement contains a magic number: moves.AddRange(Tutors_GSC.Where((_' i) => pi.TMHM[57 + i]));
Magic Number,PKHeX.Core,MoveTutor,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveTutor.cs,AddMovesTutor3,The following statement contains a magic number: species == 151
Magic Number,PKHeX.Core,MoveTutor,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveTutor.cs,AddMovesTutor5,The following statement contains a magic number: pkm.InhabitedGeneration(5) && specialTutors
Magic Number,PKHeX.Core,MoveTutor,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveTutor.cs,AddSpecialTutorMoves,The following statement contains a magic number: switch (species)              {                  case (int)Species.Keldeo: // Keldeo                      r.Add(548); // Secret Sword                      break;                  case (int)Species.Meloetta:                      r.Add(547); // Relic Song                      break;                  case (int)Species.Pikachu when Generation == 6 && pkm.Format == 6:                      int index = pkm.AltForm - 1;                      if (index >= 0 && index < CosplayPikachuMoves.Length)                          r.Add(CosplayPikachuMoves[index]);                      break;                    case (int)Species.Pikachu when Generation == 7 && pkm.AltForm == 8:                      r.AddRange(Tutor_StarterPikachu);                      break;                  case (int)Species.Eevee when Generation == 7 && pkm.AltForm == 1:                      r.AddRange(Tutor_StarterEevee);                      break;                    case (int)Species.Pikachu when Generation == 7 && !(pkm is PB7):                  case (int)Species.Raichu  when Generation == 7 && !(pkm is PB7):                      r.Add(344); // Volt Tackle                      break;              }
Magic Number,PKHeX.Core,MoveTutor,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveTutor.cs,AddSpecialTutorMoves,The following statement contains a magic number: switch (species)              {                  case (int)Species.Keldeo: // Keldeo                      r.Add(548); // Secret Sword                      break;                  case (int)Species.Meloetta:                      r.Add(547); // Relic Song                      break;                  case (int)Species.Pikachu when Generation == 6 && pkm.Format == 6:                      int index = pkm.AltForm - 1;                      if (index >= 0 && index < CosplayPikachuMoves.Length)                          r.Add(CosplayPikachuMoves[index]);                      break;                    case (int)Species.Pikachu when Generation == 7 && pkm.AltForm == 8:                      r.AddRange(Tutor_StarterPikachu);                      break;                  case (int)Species.Eevee when Generation == 7 && pkm.AltForm == 1:                      r.AddRange(Tutor_StarterEevee);                      break;                    case (int)Species.Pikachu when Generation == 7 && !(pkm is PB7):                  case (int)Species.Raichu  when Generation == 7 && !(pkm is PB7):                      r.Add(344); // Volt Tackle                      break;              }
Magic Number,PKHeX.Core,MoveTutor,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveTutor.cs,AddSpecialTutorMoves,The following statement contains a magic number: switch (species)              {                  case (int)Species.Keldeo: // Keldeo                      r.Add(548); // Secret Sword                      break;                  case (int)Species.Meloetta:                      r.Add(547); // Relic Song                      break;                  case (int)Species.Pikachu when Generation == 6 && pkm.Format == 6:                      int index = pkm.AltForm - 1;                      if (index >= 0 && index < CosplayPikachuMoves.Length)                          r.Add(CosplayPikachuMoves[index]);                      break;                    case (int)Species.Pikachu when Generation == 7 && pkm.AltForm == 8:                      r.AddRange(Tutor_StarterPikachu);                      break;                  case (int)Species.Eevee when Generation == 7 && pkm.AltForm == 1:                      r.AddRange(Tutor_StarterEevee);                      break;                    case (int)Species.Pikachu when Generation == 7 && !(pkm is PB7):                  case (int)Species.Raichu  when Generation == 7 && !(pkm is PB7):                      r.Add(344); // Volt Tackle                      break;              }
Magic Number,PKHeX.Core,MoveTutor,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveTutor.cs,AddSpecialTutorMoves,The following statement contains a magic number: switch (species)              {                  case (int)Species.Keldeo: // Keldeo                      r.Add(548); // Secret Sword                      break;                  case (int)Species.Meloetta:                      r.Add(547); // Relic Song                      break;                  case (int)Species.Pikachu when Generation == 6 && pkm.Format == 6:                      int index = pkm.AltForm - 1;                      if (index >= 0 && index < CosplayPikachuMoves.Length)                          r.Add(CosplayPikachuMoves[index]);                      break;                    case (int)Species.Pikachu when Generation == 7 && pkm.AltForm == 8:                      r.AddRange(Tutor_StarterPikachu);                      break;                  case (int)Species.Eevee when Generation == 7 && pkm.AltForm == 1:                      r.AddRange(Tutor_StarterEevee);                      break;                    case (int)Species.Pikachu when Generation == 7 && !(pkm is PB7):                  case (int)Species.Raichu  when Generation == 7 && !(pkm is PB7):                      r.Add(344); // Volt Tackle                      break;              }
Magic Number,PKHeX.Core,MoveTutor,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveTutor.cs,AddSpecialTutorMoves,The following statement contains a magic number: switch (species)              {                  case (int)Species.Keldeo: // Keldeo                      r.Add(548); // Secret Sword                      break;                  case (int)Species.Meloetta:                      r.Add(547); // Relic Song                      break;                  case (int)Species.Pikachu when Generation == 6 && pkm.Format == 6:                      int index = pkm.AltForm - 1;                      if (index >= 0 && index < CosplayPikachuMoves.Length)                          r.Add(CosplayPikachuMoves[index]);                      break;                    case (int)Species.Pikachu when Generation == 7 && pkm.AltForm == 8:                      r.AddRange(Tutor_StarterPikachu);                      break;                  case (int)Species.Eevee when Generation == 7 && pkm.AltForm == 1:                      r.AddRange(Tutor_StarterEevee);                      break;                    case (int)Species.Pikachu when Generation == 7 && !(pkm is PB7):                  case (int)Species.Raichu  when Generation == 7 && !(pkm is PB7):                      r.Add(344); // Volt Tackle                      break;              }
Magic Number,PKHeX.Core,MoveTutor,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveTutor.cs,AddSpecialTutorMoves,The following statement contains a magic number: switch (species)              {                  case (int)Species.Keldeo: // Keldeo                      r.Add(548); // Secret Sword                      break;                  case (int)Species.Meloetta:                      r.Add(547); // Relic Song                      break;                  case (int)Species.Pikachu when Generation == 6 && pkm.Format == 6:                      int index = pkm.AltForm - 1;                      if (index >= 0 && index < CosplayPikachuMoves.Length)                          r.Add(CosplayPikachuMoves[index]);                      break;                    case (int)Species.Pikachu when Generation == 7 && pkm.AltForm == 8:                      r.AddRange(Tutor_StarterPikachu);                      break;                  case (int)Species.Eevee when Generation == 7 && pkm.AltForm == 1:                      r.AddRange(Tutor_StarterEevee);                      break;                    case (int)Species.Pikachu when Generation == 7 && !(pkm is PB7):                  case (int)Species.Raichu  when Generation == 7 && !(pkm is PB7):                      r.Add(344); // Volt Tackle                      break;              }
Magic Number,PKHeX.Core,MoveTutor,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveTutor.cs,AddSpecialTutorMoves,The following statement contains a magic number: switch (species)              {                  case (int)Species.Keldeo: // Keldeo                      r.Add(548); // Secret Sword                      break;                  case (int)Species.Meloetta:                      r.Add(547); // Relic Song                      break;                  case (int)Species.Pikachu when Generation == 6 && pkm.Format == 6:                      int index = pkm.AltForm - 1;                      if (index >= 0 && index < CosplayPikachuMoves.Length)                          r.Add(CosplayPikachuMoves[index]);                      break;                    case (int)Species.Pikachu when Generation == 7 && pkm.AltForm == 8:                      r.AddRange(Tutor_StarterPikachu);                      break;                  case (int)Species.Eevee when Generation == 7 && pkm.AltForm == 1:                      r.AddRange(Tutor_StarterEevee);                      break;                    case (int)Species.Pikachu when Generation == 7 && !(pkm is PB7):                  case (int)Species.Raichu  when Generation == 7 && !(pkm is PB7):                      r.Add(344); // Volt Tackle                      break;              }
Magic Number,PKHeX.Core,MoveTutor,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveTutor.cs,AddSpecialTutorMoves,The following statement contains a magic number: switch (species)              {                  case (int)Species.Keldeo: // Keldeo                      r.Add(548); // Secret Sword                      break;                  case (int)Species.Meloetta:                      r.Add(547); // Relic Song                      break;                  case (int)Species.Pikachu when Generation == 6 && pkm.Format == 6:                      int index = pkm.AltForm - 1;                      if (index >= 0 && index < CosplayPikachuMoves.Length)                          r.Add(CosplayPikachuMoves[index]);                      break;                    case (int)Species.Pikachu when Generation == 7 && pkm.AltForm == 8:                      r.AddRange(Tutor_StarterPikachu);                      break;                  case (int)Species.Eevee when Generation == 7 && pkm.AltForm == 1:                      r.AddRange(Tutor_StarterEevee);                      break;                    case (int)Species.Pikachu when Generation == 7 && !(pkm is PB7):                  case (int)Species.Raichu  when Generation == 7 && !(pkm is PB7):                      r.Add(344); // Volt Tackle                      break;              }
Magic Number,PKHeX.Core,MoveTutor,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveTutor.cs,AddSpecialTutorMoves,The following statement contains a magic number: switch (species)              {                  case (int)Species.Keldeo: // Keldeo                      r.Add(548); // Secret Sword                      break;                  case (int)Species.Meloetta:                      r.Add(547); // Relic Song                      break;                  case (int)Species.Pikachu when Generation == 6 && pkm.Format == 6:                      int index = pkm.AltForm - 1;                      if (index >= 0 && index < CosplayPikachuMoves.Length)                          r.Add(CosplayPikachuMoves[index]);                      break;                    case (int)Species.Pikachu when Generation == 7 && pkm.AltForm == 8:                      r.AddRange(Tutor_StarterPikachu);                      break;                  case (int)Species.Eevee when Generation == 7 && pkm.AltForm == 1:                      r.AddRange(Tutor_StarterEevee);                      break;                    case (int)Species.Pikachu when Generation == 7 && !(pkm is PB7):                  case (int)Species.Raichu  when Generation == 7 && !(pkm is PB7):                      r.Add(344); // Volt Tackle                      break;              }
Magic Number,PKHeX.Core,MoveTutor,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveTutor.cs,AddSpecialTutorMoves,The following statement contains a magic number: switch (species)              {                  case (int)Species.Keldeo: // Keldeo                      r.Add(548); // Secret Sword                      break;                  case (int)Species.Meloetta:                      r.Add(547); // Relic Song                      break;                  case (int)Species.Pikachu when Generation == 6 && pkm.Format == 6:                      int index = pkm.AltForm - 1;                      if (index >= 0 && index < CosplayPikachuMoves.Length)                          r.Add(CosplayPikachuMoves[index]);                      break;                    case (int)Species.Pikachu when Generation == 7 && pkm.AltForm == 8:                      r.AddRange(Tutor_StarterPikachu);                      break;                  case (int)Species.Eevee when Generation == 7 && pkm.AltForm == 1:                      r.AddRange(Tutor_StarterEevee);                      break;                    case (int)Species.Pikachu when Generation == 7 && !(pkm is PB7):                  case (int)Species.Raichu  when Generation == 7 && !(pkm is PB7):                      r.Add(344); // Volt Tackle                      break;              }
Magic Number,PKHeX.Core,MoveTutor,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveTutor.cs,AddSpecialFormChangeMoves,The following statement contains a magic number: switch (species)              {                  case (int)Species.Rotom when Generation >= 4: // rotom                      r.Add(RotomMoves[pkm.AltForm]);                      break;                  case (int)Species.Zygarde when Generation == 7: // zygarde                      r.AddRange(ZygardeMoves);                      break;                  case (int)Species.Necrozma when pkm.AltForm == 1: // Sun Necrozma                      r.Add(713);                      break;                  case (int)Species.Necrozma when pkm.AltForm == 2: // Moon Necrozma                      r.Add(714);                      break;              }
Magic Number,PKHeX.Core,MoveTutor,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveTutor.cs,AddSpecialFormChangeMoves,The following statement contains a magic number: switch (species)              {                  case (int)Species.Rotom when Generation >= 4: // rotom                      r.Add(RotomMoves[pkm.AltForm]);                      break;                  case (int)Species.Zygarde when Generation == 7: // zygarde                      r.AddRange(ZygardeMoves);                      break;                  case (int)Species.Necrozma when pkm.AltForm == 1: // Sun Necrozma                      r.Add(713);                      break;                  case (int)Species.Necrozma when pkm.AltForm == 2: // Moon Necrozma                      r.Add(714);                      break;              }
Magic Number,PKHeX.Core,MoveTutor,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveTutor.cs,AddSpecialFormChangeMoves,The following statement contains a magic number: switch (species)              {                  case (int)Species.Rotom when Generation >= 4: // rotom                      r.Add(RotomMoves[pkm.AltForm]);                      break;                  case (int)Species.Zygarde when Generation == 7: // zygarde                      r.AddRange(ZygardeMoves);                      break;                  case (int)Species.Necrozma when pkm.AltForm == 1: // Sun Necrozma                      r.Add(713);                      break;                  case (int)Species.Necrozma when pkm.AltForm == 2: // Moon Necrozma                      r.Add(714);                      break;              }
Magic Number,PKHeX.Core,MoveTutor,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveTutor.cs,AddSpecialFormChangeMoves,The following statement contains a magic number: switch (species)              {                  case (int)Species.Rotom when Generation >= 4: // rotom                      r.Add(RotomMoves[pkm.AltForm]);                      break;                  case (int)Species.Zygarde when Generation == 7: // zygarde                      r.AddRange(ZygardeMoves);                      break;                  case (int)Species.Necrozma when pkm.AltForm == 1: // Sun Necrozma                      r.Add(713);                      break;                  case (int)Species.Necrozma when pkm.AltForm == 2: // Moon Necrozma                      r.Add(714);                      break;              }
Magic Number,PKHeX.Core,MoveTutor,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveTutor.cs,AddSpecialFormChangeMoves,The following statement contains a magic number: switch (species)              {                  case (int)Species.Rotom when Generation >= 4: // rotom                      r.Add(RotomMoves[pkm.AltForm]);                      break;                  case (int)Species.Zygarde when Generation == 7: // zygarde                      r.AddRange(ZygardeMoves);                      break;                  case (int)Species.Necrozma when pkm.AltForm == 1: // Sun Necrozma                      r.Add(713);                      break;                  case (int)Species.Necrozma when pkm.AltForm == 2: // Moon Necrozma                      r.Add(714);                      break;              }
Magic Number,PKHeX.Core,Frame,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\Frame\Frame.cs,IsSlotCompatibile,The following statement contains a magic number: bool encounterable = SlotRange.GetIsEncounterable(slot' FrameType' (int)(OriginSeed >> 16)' Lead);
Magic Number,PKHeX.Core,FrameCache,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\Frame\FrameCache.cs,Add,The following statement contains a magic number: Values.Add(seed >> 16);
Magic Number,PKHeX.Core,FrameFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\Frame\FrameFinder.cs,GetFrames,The following statement contains a magic number: var info = new FrameGenerator(pk) {Nature = pk.EncryptionConstant % 25};
Magic Number,PKHeX.Core,FrameFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\Frame\FrameFinder.cs,GetFrames,The following statement contains a magic number: var seeds = pk.Species == 201 && pk.FRLG // reversed await case                  ? SeedInfo.GetSeedsUntilUnownForm(pidiv' info' pk.AltForm)                  : SeedInfo.GetSeedsUntilNature(pidiv' info);
Magic Number,PKHeX.Core,FrameFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\Frame\FrameFinder.cs,RefineFrames3,The following statement contains a magic number: var rand = prev >> 16;
Magic Number,PKHeX.Core,FrameFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\Frame\FrameFinder.cs,RefineFrames3,The following statement contains a magic number: f.RandLevel = f.Seed >> 16;
Magic Number,PKHeX.Core,FrameFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\Frame\FrameFinder.cs,GenerateLeadSpecificFrames3,The following statement contains a magic number: var p0 = prev0 >> 16;
Magic Number,PKHeX.Core,FrameFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\Frame\FrameFinder.cs,GenerateLeadSpecificFrames3,The following statement contains a magic number: var p1 = prev1 >> 16;
Magic Number,PKHeX.Core,FrameFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\Frame\FrameFinder.cs,GenerateLeadSpecificFrames3,The following statement contains a magic number: var p2 = prev2 >> 16;
Magic Number,PKHeX.Core,FrameFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\Frame\FrameFinder.cs,GenerateLeadSpecificFrames3,The following statement contains a magic number: bool cc = p0 % 3 != 0;
Magic Number,PKHeX.Core,FrameFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\Frame\FrameFinder.cs,GenerateLeadSpecificFrames3,The following statement contains a magic number: bool max = p0 % 2 == 1;
Magic Number,PKHeX.Core,FrameFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\Frame\FrameFinder.cs,GenerateLeadSpecificFrames3,The following statement contains a magic number: bool force = p2 % 2 == 0;
Magic Number,PKHeX.Core,FrameFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\Frame\FrameFinder.cs,RefineFrames4,The following statement contains a magic number: var rand = f.Seed >> 16;
Magic Number,PKHeX.Core,FrameFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\Frame\FrameFinder.cs,RefineFrames4,The following statement contains a magic number: var esv = f.OriginSeed >> 16;
Magic Number,PKHeX.Core,FrameFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\Frame\FrameFinder.cs,GenerateLeadSpecificFrames4,The following statement contains a magic number: var p0 = prev0 >> 16;
Magic Number,PKHeX.Core,FrameFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\Frame\FrameFinder.cs,GenerateLeadSpecificFrames4,The following statement contains a magic number: var p1 = prev1 >> 16;
Magic Number,PKHeX.Core,FrameFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\Frame\FrameFinder.cs,GenerateLeadSpecificFrames4,The following statement contains a magic number: var p2 = prev2 >> 16;
Magic Number,PKHeX.Core,FrameFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\Frame\FrameFinder.cs,GenerateLeadSpecificFrames4,The following statement contains a magic number: bool cc = (info.DPPt ? p0 / 0x5556 : p0 % 3) != 0;
Magic Number,PKHeX.Core,FrameFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\Frame\FrameFinder.cs,GenerateLeadSpecificFrames4,The following statement contains a magic number: bool max = (info.DPPt ? p0 >> 15 : p0 & 1) == 1;
Magic Number,PKHeX.Core,FrameFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\Frame\FrameFinder.cs,GenerateLeadSpecificFrames4,The following statement contains a magic number: var force1 = (info.DPPt ? p1 >> 15 : p1 & 1) == 1;
Magic Number,PKHeX.Core,FrameFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\Frame\FrameFinder.cs,GenerateLeadSpecificFrames4,The following statement contains a magic number: var force2 = (info.DPPt ? p2 >> 15 : p2 & 1) == 1;
Magic Number,PKHeX.Core,FrameFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\Frame\FrameFinder.cs,FilterNatureSync,The following statement contains a magic number: var rand = s >> 16;
Magic Number,PKHeX.Core,FrameFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\Frame\FrameFinder.cs,FilterNatureSync,The following statement contains a magic number: bool sync = info.AllowLeads && !seed.Charm3 && (info.DPPt ? rand >> 15 : rand & 1) == 0;
Magic Number,PKHeX.Core,FrameFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\Frame\FrameFinder.cs,FilterNatureSync,The following statement contains a magic number: bool reg = (info.DPPt ? rand / 0xA3E : rand % 25) == info.Nature;
Magic Number,PKHeX.Core,FrameFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\Frame\FrameFinder.cs,FilterNatureSync,The following statement contains a magic number: var failsync = (info.DPPt ? prev >> 31 : (prev >> 16) & 1) != 1;
Magic Number,PKHeX.Core,FrameFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\Frame\FrameFinder.cs,FilterNatureSync,The following statement contains a magic number: var failsync = (info.DPPt ? prev >> 31 : (prev >> 16) & 1) != 1;
Magic Number,PKHeX.Core,FrameFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\Frame\FrameFinder.cs,IsValidPokeBlockNature,The following statement contains a magic number: nature % 6 == 0
Magic Number,PKHeX.Core,FrameFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\Frame\FrameFinder.cs,IsValidPokeBlockNature,The following statement contains a magic number: j < 25
Magic Number,PKHeX.Core,FrameFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\Frame\FrameFinder.cs,IsValidPokeBlockNature,The following statement contains a magic number: i < 25
Magic Number,PKHeX.Core,FrameFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\Frame\FrameFinder.cs,IsValidPokeBlockNature,The following statement contains a magic number: natureOrigin >> 16 % 100 >= 80
Magic Number,PKHeX.Core,FrameFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\Frame\FrameFinder.cs,IsValidPokeBlockNature,The following statement contains a magic number: natureOrigin >> 16 % 100 >= 80
Magic Number,PKHeX.Core,FrameFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\Frame\FrameFinder.cs,IsValidPokeBlockNature,The following statement contains a magic number: natureOrigin >> 16 % 100 >= 80
Magic Number,PKHeX.Core,FrameFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\Frame\FrameFinder.cs,IsValidPokeBlockNature,The following statement contains a magic number: uint[] natures = new uint[25];
Magic Number,PKHeX.Core,FrameFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\Frame\FrameFinder.cs,IsValidPokeBlockNature,The following statement contains a magic number: i < 25
Magic Number,PKHeX.Core,FrameFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\Frame\FrameFinder.cs,IsValidPokeBlockNature,The following statement contains a magic number: (s >> 16 & 1) == 0
Magic Number,PKHeX.Core,FrameFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\Frame\FrameFinder.cs,IsValidPokeBlockNature,The following statement contains a magic number: j < 25
Magic Number,PKHeX.Core,FrameFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\Frame\FrameFinder.cs,IsValidPokeBlockNature,The following statement contains a magic number: i < 25
Magic Number,PKHeX.Core,FrameFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\Frame\FrameFinder.cs,IsValidPokeBlockNature,The following statement contains a magic number: i < 25
Magic Number,PKHeX.Core,FrameFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\Frame\FrameFinder.cs,FilterCuteCharm,The following statement contains a magic number: var rand = s >> 16;
Magic Number,PKHeX.Core,FrameFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\Frame\FrameFinder.cs,FilterCuteCharm,The following statement contains a magic number: var nature = info.DPPt ? rand / 0xA3E : rand % 25;
Magic Number,PKHeX.Core,FrameFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\Frame\FrameFinder.cs,FilterCuteCharm,The following statement contains a magic number: var proc = prev >> 16;
Magic Number,PKHeX.Core,FrameFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\Frame\FrameFinder.cs,FilterCuteCharm,The following statement contains a magic number: bool charmProc = (info.DPPt ? proc / 0x5556 : proc % 3) != 0;
Magic Number,PKHeX.Core,FrameGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\Frame\FrameGenerator.cs,FrameGenerator,The following statement contains a magic number: switch (ver)              {                  // Method H                  case GameVersion.R:                  case GameVersion.S:                  case GameVersion.FR:                  case GameVersion.LG:                  case GameVersion.E:                      DPPt = false;                      FrameType = FrameType.MethodH;                      Safari3 = pk.Ball == 5 && !pk.FRLG;                        if (ver != GameVersion.E)                          return;                        AllowLeads = true;                        // Cute Charm waits for gender too!                      var gender = pk.Gender;                      bool gendered = gender != 2;                      if (!gendered)                          return;                        var gr = pk.PersonalInfo.Gender;                      Gendered = true;                      GenderLow = GetGenderMinMax(gender' gr' false);                      GenderHigh = GetGenderMinMax(gender' gr' true);                      return;                    // Method J                  case GameVersion.D:                  case GameVersion.P:                  case GameVersion.Pt:                      DPPt = true;                      AllowLeads = true;                      FrameType = FrameType.MethodJ;                      return;                    // Method K                  case GameVersion.HG:                  case GameVersion.SS:                      DPPt = false;                      AllowLeads = true;                      FrameType = FrameType.MethodK;                      return;                  default:                      throw new ArgumentException(nameof(ver));              }
Magic Number,PKHeX.Core,FrameGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\Frame\FrameGenerator.cs,FrameGenerator,The following statement contains a magic number: switch (ver)              {                  // Method H                  case GameVersion.R:                  case GameVersion.S:                  case GameVersion.FR:                  case GameVersion.LG:                  case GameVersion.E:                      DPPt = false;                      FrameType = FrameType.MethodH;                      Safari3 = pk.Ball == 5 && !pk.FRLG;                        if (ver != GameVersion.E)                          return;                        AllowLeads = true;                        // Cute Charm waits for gender too!                      var gender = pk.Gender;                      bool gendered = gender != 2;                      if (!gendered)                          return;                        var gr = pk.PersonalInfo.Gender;                      Gendered = true;                      GenderLow = GetGenderMinMax(gender' gr' false);                      GenderHigh = GetGenderMinMax(gender' gr' true);                      return;                    // Method J                  case GameVersion.D:                  case GameVersion.P:                  case GameVersion.Pt:                      DPPt = true;                      AllowLeads = true;                      FrameType = FrameType.MethodJ;                      return;                    // Method K                  case GameVersion.HG:                  case GameVersion.SS:                      DPPt = false;                      AllowLeads = true;                      FrameType = FrameType.MethodK;                      return;                  default:                      throw new ArgumentException(nameof(ver));              }
Magic Number,PKHeX.Core,FrameGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\Frame\FrameGenerator.cs,GetGenderMinMax,The following statement contains a magic number: gender = 2;
Magic Number,PKHeX.Core,FrameGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\Frame\FrameGenerator.cs,GetGenderMinMax,The following statement contains a magic number: return gender switch              {                  0 => (max ? 255 : ratio)' // male                  1 => (max ? ratio - 1 : 0)' // female                  _ => (max ? 255 : 0)'              };
Magic Number,PKHeX.Core,FrameGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\Frame\FrameGenerator.cs,GetGenderMinMax,The following statement contains a magic number: return gender switch              {                  0 => (max ? 255 : ratio)' // male                  1 => (max ? ratio - 1 : 0)' // female                  _ => (max ? 255 : 0)'              };
Magic Number,PKHeX.Core,SeedInfo,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\Frame\SeedInfo.cs,GetSeedsUntilNature,The following statement contains a magic number: var a = s2 >> 16;
Magic Number,PKHeX.Core,SeedInfo,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\Frame\SeedInfo.cs,GetSeedsUntilNature,The following statement contains a magic number: var b = s1 >> 16;
Magic Number,PKHeX.Core,SeedInfo,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\Frame\SeedInfo.cs,GetSeedsUntilNature,The following statement contains a magic number: var pid = b << 16 | a;
Magic Number,PKHeX.Core,SeedInfo,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\Frame\SeedInfo.cs,GetSeedsUntilUnownForm,The following statement contains a magic number: var a = s2 >> 16;
Magic Number,PKHeX.Core,SeedInfo,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\Frame\SeedInfo.cs,GetSeedsUntilUnownForm,The following statement contains a magic number: var b = s1 >> 16;
Magic Number,PKHeX.Core,SeedInfo,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\Frame\SeedInfo.cs,GetSeedsUntilUnownForm,The following statement contains a magic number: var pid = a << 16 | b;
Magic Number,PKHeX.Core,SeedInfo,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\Frame\SeedInfo.cs,VerifyPIDCriteria,The following statement contains a magic number: var nval = pid % 25;
Magic Number,PKHeX.Core,SlotRange,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\Frame\SlotRange.cs,HSlot,The following statement contains a magic number: var ESV = rand % 100;
Magic Number,PKHeX.Core,SlotRange,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\Frame\SlotRange.cs,HSlot,The following statement contains a magic number: return type switch              {                  SlotType.Old_Rod =>        CalcSlot(ESV' H_OldRod)'                  SlotType.Old_Rod_Safari => CalcSlot(ESV' H_OldRod)'                  SlotType.Good_Rod =>        CalcSlot(ESV' H_GoodRod)'                  SlotType.Good_Rod_Safari => CalcSlot(ESV' H_GoodRod)'                  SlotType.Super_Rod =>        CalcSlot(ESV' H_SuperRod)'                  SlotType.Super_Rod_Safari => CalcSlot(ESV' H_SuperRod)'                  SlotType.Rock_Smash =>        CalcSlot(ESV' H_Surf)'                  SlotType.Rock_Smash_Safari => CalcSlot(ESV' H_Surf)'                  SlotType.Surf =>        CalcSlot(ESV' H_Surf)'                  SlotType.Surf_Safari => CalcSlot(ESV' H_Surf)'                  SlotType.Swarm => (ESV < 50 ? 0 : -1)'                  _ => CalcSlot(ESV' H_Regular)              };
Magic Number,PKHeX.Core,SlotRange,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\Frame\SlotRange.cs,KSlot,The following statement contains a magic number: var ESV = rand % 100;
Magic Number,PKHeX.Core,SlotRange,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\Frame\SlotRange.cs,JSlot,The following statement contains a magic number: uint ESV = rand / 656;
Magic Number,PKHeX.Core,SlotRange,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\Frame\SlotRange.cs,GetCanEncounter,The following statement contains a magic number: int proc = frameType == FrameType.MethodJ ? rand / 656 : rand % 100;
Magic Number,PKHeX.Core,SlotRange,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\Frame\SlotRange.cs,GetCanEncounter,The following statement contains a magic number: int proc = frameType == FrameType.MethodJ ? rand / 656 : rand % 100;
Magic Number,PKHeX.Core,SlotRange,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\Frame\SlotRange.cs,GetCanEncounter,The following statement contains a magic number: return proc < 60;
Magic Number,PKHeX.Core,SlotRange,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\Frame\SlotRange.cs,GetCanEncounter,The following statement contains a magic number: proc < 25
Magic Number,PKHeX.Core,SlotRange,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\Frame\SlotRange.cs,GetCanEncounter,The following statement contains a magic number: proc < 50
Magic Number,PKHeX.Core,LockFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\Locks\LockFinder.cs,IsXDStarterValid,The following statement contains a magic number: var SIDf = RNG.XDRNG.Reverse(seed' 2);
Magic Number,PKHeX.Core,LockFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\Locks\LockFinder.cs,IsXDStarterValid,The following statement contains a magic number: return SIDf >> 16 == SID && TIDf >> 16 == TID;
Magic Number,PKHeX.Core,LockFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\Locks\LockFinder.cs,IsXDStarterValid,The following statement contains a magic number: return SIDf >> 16 == SID && TIDf >> 16 == TID;
Magic Number,PKHeX.Core,LockFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\Locks\LockFinder.cs,IsColoStarterValid,The following statement contains a magic number: int rev = 2;
Magic Number,PKHeX.Core,LockFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\Locks\LockFinder.cs,IsColoStarterValid,The following statement contains a magic number: rev += 7;
Magic Number,PKHeX.Core,LockFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\Locks\LockFinder.cs,IsColoStarterValid,The following statement contains a magic number: species == 196
Magic Number,PKHeX.Core,LockFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\Locks\LockFinder.cs,IsColoStarterValid,The following statement contains a magic number: ctr > 32
Magic Number,PKHeX.Core,LockFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\Locks\LockFinder.cs,IsColoStarterValid,The following statement contains a magic number: (temp = rng.Prev(SIDf)) >> 16 != TID || SIDf >> 16 != SID
Magic Number,PKHeX.Core,LockFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\Locks\LockFinder.cs,IsColoStarterValid,The following statement contains a magic number: (temp = rng.Prev(SIDf)) >> 16 != TID || SIDf >> 16 != SID
Magic Number,PKHeX.Core,LockFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\Locks\LockFinder.cs,IsColoStarterValid,The following statement contains a magic number: species == 196
Magic Number,PKHeX.Core,LockFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\Locks\LockFinder.cs,IsColoStarterValid,The following statement contains a magic number: seed = rng.Reverse(SIDf' 2);
Magic Number,PKHeX.Core,LockFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\Locks\LockFinder.cs,GenerateValidColoStarterPID,The following statement contains a magic number: uSeed = rng.Advance(uSeed' 2);
Magic Number,PKHeX.Core,LockFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\Locks\LockFinder.cs,GenerateValidColoStarterPID,The following statement contains a magic number: var IV1 = (uSeed >> 16) & 0x7FFF;
Magic Number,PKHeX.Core,LockFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\Locks\LockFinder.cs,GenerateValidColoStarterPID,The following statement contains a magic number: var IV2 = (uSeed >> 16) & 0x7FFF;
Magic Number,PKHeX.Core,LockFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\Locks\LockFinder.cs,GenerateValidColoStarterPID,The following statement contains a magic number: uSeed = rng.Advance(uSeed' 2);
Magic Number,PKHeX.Core,LockFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\Locks\LockFinder.cs,GenerateStarterPID,The following statement contains a magic number: PID = (uSeed & 0xFFFF0000) | (next >> 16);
Magic Number,PKHeX.Core,NPCLock,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\Locks\NPCLock.cs,NPCLock,The following statement contains a magic number: Nature = 25;
Magic Number,PKHeX.Core,NPCLock,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\Locks\NPCLock.cs,MatchesLock,The following statement contains a magic number: Gender != 2 && Gender != ((PID & 0xFF) < Ratio ? 1 : 0)
Magic Number,PKHeX.Core,NPCLock,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\Locks\NPCLock.cs,MatchesLock,The following statement contains a magic number: Nature != PID % 25
Magic Number,PKHeX.Core,TeamLockResult,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\Locks\TeamLockResult.cs,TeamLockResult,The following statement contains a magic number: Cache = new FrameCache(RNG.XDRNG.Reverse(originSeed' 2)' RNG.XDRNG.Prev);
Magic Number,PKHeX.Core,TeamLockResult,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\Locks\TeamLockResult.cs,GetSingleLock,The following statement contains a magic number: uint pid = Cache[ctr + 1] << 16 | Cache[ctr];
Magic Number,PKHeX.Core,TeamLockResult,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\Locks\TeamLockResult.cs,GetSingleLock,The following statement contains a magic number: yield return new SeedFrame(pid' ctr + (current.Seen ? 5 : 7));
Magic Number,PKHeX.Core,TeamLockResult,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\Locks\TeamLockResult.cs,GetSingleLock,The following statement contains a magic number: yield return new SeedFrame(pid' ctr + (current.Seen ? 5 : 7));
Magic Number,PKHeX.Core,TeamLockResult,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\Locks\TeamLockResult.cs,GetAllLocks,The following statement contains a magic number: int p7 = ctr - 7;
Magic Number,PKHeX.Core,TeamLockResult,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\Locks\TeamLockResult.cs,GetAllLocks,The following statement contains a magic number: uint cid = upper << 16 | lower;
Magic Number,PKHeX.Core,TeamLockResult,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\Locks\TeamLockResult.cs,GetAllLocks,The following statement contains a magic number: var sv = (upper ^ lower) >> 3;
Magic Number,PKHeX.Core,TeamLockResult,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\Locks\TeamLockResult.cs,GetAllLocks,The following statement contains a magic number: uint pid = Cache[ctr + 1] << 16 | Cache[ctr];
Magic Number,PKHeX.Core,TeamLockResult,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\Locks\TeamLockResult.cs,GetAllLocks,The following statement contains a magic number: yield return new SeedFrame(pid' ctr + (current.Seen ? 5 : 7));
Magic Number,PKHeX.Core,TeamLockResult,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\Locks\TeamLockResult.cs,GetAllLocks,The following statement contains a magic number: yield return new SeedFrame(pid' ctr + (current.Seen ? 5 : 7));
Magic Number,PKHeX.Core,TeamLockResult,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\Locks\TeamLockResult.cs,GetAllLocks,The following statement contains a magic number: ctr += 2;
Magic Number,PKHeX.Core,TeamLockResult,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\Locks\TeamLockResult.cs,VerifyNPC,The following statement contains a magic number: var CPUSV = (TID ^ SID) >> 3;
Magic Number,PKHeX.Core,TeamLockResult,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\Locks\TeamLockResult.cs,VerifyNPC,The following statement contains a magic number: var psv = ((pid & 0xFFFF) ^ (pid >> 16)) >> 3;
Magic Number,PKHeX.Core,TeamLockResult,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\Locks\TeamLockResult.cs,VerifyNPC,The following statement contains a magic number: var psv = ((pid & 0xFFFF) ^ (pid >> 16)) >> 3;
Magic Number,PKHeX.Core,TeamLockResult,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\Locks\TeamLockResult.cs,VerifyNPC,The following statement contains a magic number: OriginFrame = ctr + 2;
Magic Number,PKHeX.Core,MethodFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\MethodFinder.cs,Analyze,The following statement contains a magic number: pk.Format < 3
Magic Number,PKHeX.Core,MethodFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\MethodFinder.cs,Analyze,The following statement contains a magic number: var top = pid >> 16;
Magic Number,PKHeX.Core,MethodFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\MethodFinder.cs,Analyze,The following statement contains a magic number: var IVs = new uint[6];
Magic Number,PKHeX.Core,MethodFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\MethodFinder.cs,Analyze,The following statement contains a magic number: i < 6
Magic Number,PKHeX.Core,MethodFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\MethodFinder.cs,Analyze,The following statement contains a magic number: pk.Species == 201 && GetLCRNGUnownMatch(top' bot' IVs' out pidiv)
Magic Number,PKHeX.Core,MethodFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\MethodFinder.cs,GetLCRNGMatch,The following statement contains a magic number: var iv2 = GetIVChunk(IVs' 3);
Magic Number,PKHeX.Core,MethodFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\MethodFinder.cs,GetLCRNGMatch,The following statement contains a magic number: var B = RNG.LCRNG.Advance(seed' 2);
Magic Number,PKHeX.Core,MethodFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\MethodFinder.cs,GetLCRNGMatch,The following statement contains a magic number: var ivC = C >> 16 & 0x7FFF;
Magic Number,PKHeX.Core,MethodFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\MethodFinder.cs,GetLCRNGMatch,The following statement contains a magic number: var ivD = D >> 16 & 0x7FFF;
Magic Number,PKHeX.Core,MethodFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\MethodFinder.cs,GetLCRNGMatch,The following statement contains a magic number: var ivE = E >> 16 & 0x7FFF;
Magic Number,PKHeX.Core,MethodFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\MethodFinder.cs,GetLCRNGMatch,The following statement contains a magic number: var C = RNG.LCRNG.Advance(seed' 3);
Magic Number,PKHeX.Core,MethodFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\MethodFinder.cs,GetLCRNGMatch,The following statement contains a magic number: var ivD = D >> 16 & 0x7FFF;
Magic Number,PKHeX.Core,MethodFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\MethodFinder.cs,GetLCRNGMatch,The following statement contains a magic number: var ivE = E >> 16 & 0x7FFF;
Magic Number,PKHeX.Core,MethodFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\MethodFinder.cs,GetLCRNGUnownMatch,The following statement contains a magic number: var iv2 = GetIVChunk(IVs' 3);
Magic Number,PKHeX.Core,MethodFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\MethodFinder.cs,GetLCRNGUnownMatch,The following statement contains a magic number: var B = RNG.LCRNG.Advance(seed' 2);
Magic Number,PKHeX.Core,MethodFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\MethodFinder.cs,GetLCRNGUnownMatch,The following statement contains a magic number: var ivC = C >> 16 & 0x7FFF;
Magic Number,PKHeX.Core,MethodFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\MethodFinder.cs,GetLCRNGUnownMatch,The following statement contains a magic number: var ivD = D >> 16 & 0x7FFF;
Magic Number,PKHeX.Core,MethodFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\MethodFinder.cs,GetLCRNGUnownMatch,The following statement contains a magic number: var ivE = E >> 16 & 0x7FFF;
Magic Number,PKHeX.Core,MethodFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\MethodFinder.cs,GetLCRNGUnownMatch,The following statement contains a magic number: var C = RNG.LCRNG.Advance(seed' 3);
Magic Number,PKHeX.Core,MethodFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\MethodFinder.cs,GetLCRNGUnownMatch,The following statement contains a magic number: var ivD = D >> 16 & 0x7FFF;
Magic Number,PKHeX.Core,MethodFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\MethodFinder.cs,GetLCRNGUnownMatch,The following statement contains a magic number: var ivE = E >> 16 & 0x7FFF;
Magic Number,PKHeX.Core,MethodFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\MethodFinder.cs,GetLCRNGRoamerMatch,The following statement contains a magic number: IVs[2] != 0 || IVs[3] != 0 || IVs[4] != 0 || IVs[5] != 0 || IVs[1] > 7
Magic Number,PKHeX.Core,MethodFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\MethodFinder.cs,GetLCRNGRoamerMatch,The following statement contains a magic number: IVs[2] != 0 || IVs[3] != 0 || IVs[4] != 0 || IVs[5] != 0 || IVs[1] > 7
Magic Number,PKHeX.Core,MethodFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\MethodFinder.cs,GetLCRNGRoamerMatch,The following statement contains a magic number: IVs[2] != 0 || IVs[3] != 0 || IVs[4] != 0 || IVs[5] != 0 || IVs[1] > 7
Magic Number,PKHeX.Core,MethodFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\MethodFinder.cs,GetLCRNGRoamerMatch,The following statement contains a magic number: IVs[2] != 0 || IVs[3] != 0 || IVs[4] != 0 || IVs[5] != 0 || IVs[1] > 7
Magic Number,PKHeX.Core,MethodFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\MethodFinder.cs,GetLCRNGRoamerMatch,The following statement contains a magic number: IVs[2] != 0 || IVs[3] != 0 || IVs[4] != 0 || IVs[5] != 0 || IVs[1] > 7
Magic Number,PKHeX.Core,MethodFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\MethodFinder.cs,GetLCRNGRoamerMatch,The following statement contains a magic number: var ivC = RNG.LCRNG.Advance(seed' 3) >> 16 & 0x00FF;
Magic Number,PKHeX.Core,MethodFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\MethodFinder.cs,GetLCRNGRoamerMatch,The following statement contains a magic number: var ivC = RNG.LCRNG.Advance(seed' 3) >> 16 & 0x00FF;
Magic Number,PKHeX.Core,MethodFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\MethodFinder.cs,GetXDRNGMatch,The following statement contains a magic number: var hi = A >> 16;
Magic Number,PKHeX.Core,MethodFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\MethodFinder.cs,GetXDRNGMatch,The following statement contains a magic number: var lo = B >> 16;
Magic Number,PKHeX.Core,MethodFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\MethodFinder.cs,GetXDRNGMatch,The following statement contains a magic number: var tsv1 = (int)((hi ^ lo) >> 3);
Magic Number,PKHeX.Core,MethodFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\MethodFinder.cs,GetXDRNGMatch,The following statement contains a magic number: hi = A >> 16;
Magic Number,PKHeX.Core,MethodFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\MethodFinder.cs,GetXDRNGMatch,The following statement contains a magic number: lo = B >> 16;
Magic Number,PKHeX.Core,MethodFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\MethodFinder.cs,GetXDRNGMatch,The following statement contains a magic number: var anti = (int)(hi ^ lo) >> 3;
Magic Number,PKHeX.Core,MethodFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\MethodFinder.cs,GetChannelMatch,The following statement contains a magic number: (undo > 7 ? 0 : 1) != (bot ^ pk.SID ^ 40122)
Magic Number,PKHeX.Core,MethodFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\MethodFinder.cs,GetChannelMatch,The following statement contains a magic number: (undo > 7 ? 0 : 1) != (bot ^ pk.SID ^ 40122)
Magic Number,PKHeX.Core,MethodFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\MethodFinder.cs,GetChannelMatch,The following statement contains a magic number: var C = RNG.XDRNG.Advance(seed' 3);
Magic Number,PKHeX.Core,MethodFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\MethodFinder.cs,GetChannelMatch,The following statement contains a magic number: (D >> 31) + 1 != ver
Magic Number,PKHeX.Core,MethodFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\MethodFinder.cs,GetChannelMatch,The following statement contains a magic number: E >> 31 != pk.OT_Gender
Magic Number,PKHeX.Core,MethodFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\MethodFinder.cs,GetChannelMatch,The following statement contains a magic number: seed >> 16 != pk.SID
Magic Number,PKHeX.Core,MethodFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\MethodFinder.cs,GetMG4Match,The following statement contains a magic number: var mg4 = GetSeedsFromPID(RNG.LCRNG' mg4Rev >> 16' mg4Rev & 0xFFFF);
Magic Number,PKHeX.Core,MethodFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\MethodFinder.cs,GetMG4Match,The following statement contains a magic number: var B = RNG.LCRNG.Advance(seed' 2);
Magic Number,PKHeX.Core,MethodFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\MethodFinder.cs,GetMG4Match,The following statement contains a magic number: !IVsMatch(C >> 16' D >> 16' IVs)
Magic Number,PKHeX.Core,MethodFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\MethodFinder.cs,GetMG4Match,The following statement contains a magic number: !IVsMatch(C >> 16' D >> 16' IVs)
Magic Number,PKHeX.Core,MethodFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\MethodFinder.cs,GetG5MGShinyMatch,The following statement contains a magic number: var av = (pid >> 16) & 1;
Magic Number,PKHeX.Core,MethodFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\MethodFinder.cs,GetCuteCharmMatch,The following statement contains a magic number: switch (genderValue)              {                  case 2: break; // can't cute charm a genderless pkm                  case 0: // male                      var gr = getRatio();                      if (254 <= gr) // no modification for PID                          break;                      var rate = 25*((gr / 25) + 1); // buffered                      var nature = pid % 25;                      if (nature + rate != pid)                          break;                        pidiv = new PIDIV {NoSeed = true' RNG = RNGType.LCRNG' Type = PIDType.CuteCharm};                      return true;                  case 1: // female                      if (pid >= 25)                          break; // nope' this isn't a valid nature                      if (254 <= getRatio()) // no modification for PID                          break;                        pidiv = new PIDIV {NoSeed = true' RNG = RNGType.LCRNG' Type = PIDType.CuteCharm};                      return true;              }
Magic Number,PKHeX.Core,MethodFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\MethodFinder.cs,GetCuteCharmMatch,The following statement contains a magic number: switch (genderValue)              {                  case 2: break; // can't cute charm a genderless pkm                  case 0: // male                      var gr = getRatio();                      if (254 <= gr) // no modification for PID                          break;                      var rate = 25*((gr / 25) + 1); // buffered                      var nature = pid % 25;                      if (nature + rate != pid)                          break;                        pidiv = new PIDIV {NoSeed = true' RNG = RNGType.LCRNG' Type = PIDType.CuteCharm};                      return true;                  case 1: // female                      if (pid >= 25)                          break; // nope' this isn't a valid nature                      if (254 <= getRatio()) // no modification for PID                          break;                        pidiv = new PIDIV {NoSeed = true' RNG = RNGType.LCRNG' Type = PIDType.CuteCharm};                      return true;              }
Magic Number,PKHeX.Core,MethodFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\MethodFinder.cs,GetCuteCharmMatch,The following statement contains a magic number: switch (genderValue)              {                  case 2: break; // can't cute charm a genderless pkm                  case 0: // male                      var gr = getRatio();                      if (254 <= gr) // no modification for PID                          break;                      var rate = 25*((gr / 25) + 1); // buffered                      var nature = pid % 25;                      if (nature + rate != pid)                          break;                        pidiv = new PIDIV {NoSeed = true' RNG = RNGType.LCRNG' Type = PIDType.CuteCharm};                      return true;                  case 1: // female                      if (pid >= 25)                          break; // nope' this isn't a valid nature                      if (254 <= getRatio()) // no modification for PID                          break;                        pidiv = new PIDIV {NoSeed = true' RNG = RNGType.LCRNG' Type = PIDType.CuteCharm};                      return true;              }
Magic Number,PKHeX.Core,MethodFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\MethodFinder.cs,GetCuteCharmMatch,The following statement contains a magic number: switch (genderValue)              {                  case 2: break; // can't cute charm a genderless pkm                  case 0: // male                      var gr = getRatio();                      if (254 <= gr) // no modification for PID                          break;                      var rate = 25*((gr / 25) + 1); // buffered                      var nature = pid % 25;                      if (nature + rate != pid)                          break;                        pidiv = new PIDIV {NoSeed = true' RNG = RNGType.LCRNG' Type = PIDType.CuteCharm};                      return true;                  case 1: // female                      if (pid >= 25)                          break; // nope' this isn't a valid nature                      if (254 <= getRatio()) // no modification for PID                          break;                        pidiv = new PIDIV {NoSeed = true' RNG = RNGType.LCRNG' Type = PIDType.CuteCharm};                      return true;              }
Magic Number,PKHeX.Core,MethodFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\MethodFinder.cs,GetCuteCharmMatch,The following statement contains a magic number: switch (genderValue)              {                  case 2: break; // can't cute charm a genderless pkm                  case 0: // male                      var gr = getRatio();                      if (254 <= gr) // no modification for PID                          break;                      var rate = 25*((gr / 25) + 1); // buffered                      var nature = pid % 25;                      if (nature + rate != pid)                          break;                        pidiv = new PIDIV {NoSeed = true' RNG = RNGType.LCRNG' Type = PIDType.CuteCharm};                      return true;                  case 1: // female                      if (pid >= 25)                          break; // nope' this isn't a valid nature                      if (254 <= getRatio()) // no modification for PID                          break;                        pidiv = new PIDIV {NoSeed = true' RNG = RNGType.LCRNG' Type = PIDType.CuteCharm};                      return true;              }
Magic Number,PKHeX.Core,MethodFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\MethodFinder.cs,GetCuteCharmMatch,The following statement contains a magic number: switch (genderValue)              {                  case 2: break; // can't cute charm a genderless pkm                  case 0: // male                      var gr = getRatio();                      if (254 <= gr) // no modification for PID                          break;                      var rate = 25*((gr / 25) + 1); // buffered                      var nature = pid % 25;                      if (nature + rate != pid)                          break;                        pidiv = new PIDIV {NoSeed = true' RNG = RNGType.LCRNG' Type = PIDType.CuteCharm};                      return true;                  case 1: // female                      if (pid >= 25)                          break; // nope' this isn't a valid nature                      if (254 <= getRatio()) // no modification for PID                          break;                        pidiv = new PIDIV {NoSeed = true' RNG = RNGType.LCRNG' Type = PIDType.CuteCharm};                      return true;              }
Magic Number,PKHeX.Core,MethodFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\MethodFinder.cs,GetCuteCharmMatch,The following statement contains a magic number: switch (genderValue)              {                  case 2: break; // can't cute charm a genderless pkm                  case 0: // male                      var gr = getRatio();                      if (254 <= gr) // no modification for PID                          break;                      var rate = 25*((gr / 25) + 1); // buffered                      var nature = pid % 25;                      if (nature + rate != pid)                          break;                        pidiv = new PIDIV {NoSeed = true' RNG = RNGType.LCRNG' Type = PIDType.CuteCharm};                      return true;                  case 1: // female                      if (pid >= 25)                          break; // nope' this isn't a valid nature                      if (254 <= getRatio()) // no modification for PID                          break;                        pidiv = new PIDIV {NoSeed = true' RNG = RNGType.LCRNG' Type = PIDType.CuteCharm};                      return true;              }
Magic Number,PKHeX.Core,MethodFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\MethodFinder.cs,GetChainShinyMatch,The following statement contains a magic number: var top = GetIVChunk(IVs' 3);
Magic Number,PKHeX.Core,MethodFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\MethodFinder.cs,GetChainShinyMatch,The following statement contains a magic number: int i = 15;
Magic Number,PKHeX.Core,MethodFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\MethodFinder.cs,GetChainShinyMatch,The following statement contains a magic number: var bit = s >> 16 & 1;
Magic Number,PKHeX.Core,MethodFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\MethodFinder.cs,GetChainShinyMatch,The following statement contains a magic number: i != 2
Magic Number,PKHeX.Core,MethodFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\MethodFinder.cs,GetChainShinyMatch,The following statement contains a magic number: (upper >> 16 & 7) != (pid >> 16 & 7)
Magic Number,PKHeX.Core,MethodFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\MethodFinder.cs,GetChainShinyMatch,The following statement contains a magic number: (upper >> 16 & 7) != (pid >> 16 & 7)
Magic Number,PKHeX.Core,MethodFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\MethodFinder.cs,GetChainShinyMatch,The following statement contains a magic number: (upper >> 16 & 7) != (pid >> 16 & 7)
Magic Number,PKHeX.Core,MethodFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\MethodFinder.cs,GetChainShinyMatch,The following statement contains a magic number: (upper >> 16 & 7) != (pid >> 16 & 7)
Magic Number,PKHeX.Core,MethodFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\MethodFinder.cs,GetChainShinyMatch,The following statement contains a magic number: (lower >> 16 & 7) != (pid & 7)
Magic Number,PKHeX.Core,MethodFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\MethodFinder.cs,GetChainShinyMatch,The following statement contains a magic number: (lower >> 16 & 7) != (pid & 7)
Magic Number,PKHeX.Core,MethodFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\MethodFinder.cs,GetChainShinyMatch,The following statement contains a magic number: (lower >> 16 & 7) != (pid & 7)
Magic Number,PKHeX.Core,MethodFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\MethodFinder.cs,GetChainShinyMatch,The following statement contains a magic number: var upid = (((pid & 0xFFFF) ^ pk.TID ^ pk.SID) & 0xFFF8) | ((upper >> 16) & 0x7);
Magic Number,PKHeX.Core,MethodFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\MethodFinder.cs,GetChainShinyMatch,The following statement contains a magic number: upid != pid >> 16
Magic Number,PKHeX.Core,MethodFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\MethodFinder.cs,GetChainShinyMatch,The following statement contains a magic number: s = RNG.LCRNG.Reverse(lower' 2);
Magic Number,PKHeX.Core,MethodFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\MethodFinder.cs,GetBACDMatch,The following statement contains a magic number: var top = GetIVChunk(IVs' 3);
Magic Number,PKHeX.Core,MethodFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\MethodFinder.cs,GetBACDMatch,The following statement contains a magic number: var low = B >> 16;
Magic Number,PKHeX.Core,MethodFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\MethodFinder.cs,GetBACDMatch,The following statement contains a magic number: bool isShiny = (idxor ^ PID >> 16 ^ (PID & 0xFFFF)) < 8;
Magic Number,PKHeX.Core,MethodFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\MethodFinder.cs,GetBACDMatch,The following statement contains a magic number: bool isShiny = (idxor ^ PID >> 16 ^ (PID & 0xFFFF)) < 8;
Magic Number,PKHeX.Core,MethodFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\MethodFinder.cs,GetBACDMatch,The following statement contains a magic number: i < 3
Magic Number,PKHeX.Core,MethodFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\MethodFinder.cs,GetPokewalkerMatch,The following statement contains a magic number: var nature = oldpid % 25;
Magic Number,PKHeX.Core,MethodFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\MethodFinder.cs,GetPokewalkerMatch,The following statement contains a magic number: nature == 24
Magic Number,PKHeX.Core,MethodFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\MethodFinder.cs,GetColoStarterMatch,The following statement contains a magic number: pk.Version != 15 || (pk.Species != 196 && pk.Species != 197)
Magic Number,PKHeX.Core,MethodFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\MethodFinder.cs,GetColoStarterMatch,The following statement contains a magic number: pk.Version != 15 || (pk.Species != 196 && pk.Species != 197)
Magic Number,PKHeX.Core,MethodFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\MethodFinder.cs,GetColoStarterMatch,The following statement contains a magic number: pk.Version != 15 || (pk.Species != 196 && pk.Species != 197)
Magic Number,PKHeX.Core,MethodFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\MethodFinder.cs,GetColoStarterMatch,The following statement contains a magic number: var iv2 = GetIVChunk(IVs' 3);
Magic Number,PKHeX.Core,MethodFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\MethodFinder.cs,IsBACD_U_S,The following statement contains a magic number: uint PID = (X & 0xFFFF0000) | (idxor ^ X >> 16);
Magic Number,PKHeX.Core,MethodFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\MethodFinder.cs,IsBACD_U_AX,The following statement contains a magic number: uint rnd = A >> 16;
Magic Number,PKHeX.Core,MethodFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\MethodFinder.cs,IsBACD_U_AX,The following statement contains a magic number: rnd < 8
Magic Number,PKHeX.Core,MethodFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\MethodFinder.cs,IsBACD_U_AX,The following statement contains a magic number: uint PID = ((rnd ^ idxor ^ low) << 16) | low;
Magic Number,PKHeX.Core,MethodFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\MethodFinder.cs,GetSeedsFromPID,The following statement contains a magic number: Debug.Assert(a >> 16 == 0);
Magic Number,PKHeX.Core,MethodFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\MethodFinder.cs,GetSeedsFromPID,The following statement contains a magic number: Debug.Assert(b >> 16 == 0);
Magic Number,PKHeX.Core,MethodFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\MethodFinder.cs,GetSeedsFromPID,The following statement contains a magic number: uint second = a << 16;
Magic Number,PKHeX.Core,MethodFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\MethodFinder.cs,GetSeedsFromPID,The following statement contains a magic number: uint first = b << 16;
Magic Number,PKHeX.Core,MethodFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\MethodFinder.cs,GetSeedsFromPIDSkip,The following statement contains a magic number: Debug.Assert(a >> 16 == 0);
Magic Number,PKHeX.Core,MethodFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\MethodFinder.cs,GetSeedsFromPIDSkip,The following statement contains a magic number: Debug.Assert(b >> 16 == 0);
Magic Number,PKHeX.Core,MethodFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\MethodFinder.cs,GetSeedsFromPIDSkip,The following statement contains a magic number: uint third = a << 16;
Magic Number,PKHeX.Core,MethodFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\MethodFinder.cs,GetSeedsFromPIDSkip,The following statement contains a magic number: uint first = b << 16;
Magic Number,PKHeX.Core,MethodFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\MethodFinder.cs,GetSeedsFromIVs,The following statement contains a magic number: Debug.Assert(a >> 15 == 0);
Magic Number,PKHeX.Core,MethodFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\MethodFinder.cs,GetSeedsFromIVs,The following statement contains a magic number: Debug.Assert(b >> 15 == 0);
Magic Number,PKHeX.Core,MethodFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\MethodFinder.cs,GetSeedsFromIVs,The following statement contains a magic number: uint second = a << 16;
Magic Number,PKHeX.Core,MethodFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\MethodFinder.cs,GetSeedsFromIVs,The following statement contains a magic number: uint first = b << 16;
Magic Number,PKHeX.Core,MethodFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\MethodFinder.cs,GetSeedsFromIVsSkip,The following statement contains a magic number: Debug.Assert(rand1 >> 15 == 0);
Magic Number,PKHeX.Core,MethodFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\MethodFinder.cs,GetSeedsFromIVsSkip,The following statement contains a magic number: Debug.Assert(rand3 >> 15 == 0);
Magic Number,PKHeX.Core,MethodFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\MethodFinder.cs,GetSeedsFromIVsSkip,The following statement contains a magic number: rand1 <<= 16;
Magic Number,PKHeX.Core,MethodFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\MethodFinder.cs,GetSeedsFromIVsSkip,The following statement contains a magic number: rand3 <<= 16;
Magic Number,PKHeX.Core,MethodFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\MethodFinder.cs,GetSeedsFromPIDEuclid,The following statement contains a magic number: return method.RecoverLower16BitsEuclid16(rand1 << 16' rand2 << 16);
Magic Number,PKHeX.Core,MethodFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\MethodFinder.cs,GetSeedsFromPIDEuclid,The following statement contains a magic number: return method.RecoverLower16BitsEuclid16(rand1 << 16' rand2 << 16);
Magic Number,PKHeX.Core,MethodFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\MethodFinder.cs,GetSeedsFromIVsEuclid,The following statement contains a magic number: return method.RecoverLower16BitsEuclid15(rand1 << 16' rand2 << 16);
Magic Number,PKHeX.Core,MethodFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\MethodFinder.cs,GetSeedsFromIVsEuclid,The following statement contains a magic number: return method.RecoverLower16BitsEuclid15(rand1 << 16' rand2 << 16);
Magic Number,PKHeX.Core,MethodFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\MethodFinder.cs,IVsMatch,The following statement contains a magic number: IVs[0] != (r1 & 31)
Magic Number,PKHeX.Core,MethodFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\MethodFinder.cs,IVsMatch,The following statement contains a magic number: IVs[1] != (r1 >> 5 & 31)
Magic Number,PKHeX.Core,MethodFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\MethodFinder.cs,IVsMatch,The following statement contains a magic number: IVs[1] != (r1 >> 5 & 31)
Magic Number,PKHeX.Core,MethodFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\MethodFinder.cs,IVsMatch,The following statement contains a magic number: IVs[2] != (r1 >> 10 & 31)
Magic Number,PKHeX.Core,MethodFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\MethodFinder.cs,IVsMatch,The following statement contains a magic number: IVs[2] != (r1 >> 10 & 31)
Magic Number,PKHeX.Core,MethodFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\MethodFinder.cs,IVsMatch,The following statement contains a magic number: IVs[2] != (r1 >> 10 & 31)
Magic Number,PKHeX.Core,MethodFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\MethodFinder.cs,IVsMatch,The following statement contains a magic number: IVs[3] != (r2 & 31)
Magic Number,PKHeX.Core,MethodFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\MethodFinder.cs,IVsMatch,The following statement contains a magic number: IVs[3] != (r2 & 31)
Magic Number,PKHeX.Core,MethodFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\MethodFinder.cs,IVsMatch,The following statement contains a magic number: IVs[4] != (r2 >> 5 & 31)
Magic Number,PKHeX.Core,MethodFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\MethodFinder.cs,IVsMatch,The following statement contains a magic number: IVs[4] != (r2 >> 5 & 31)
Magic Number,PKHeX.Core,MethodFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\MethodFinder.cs,IVsMatch,The following statement contains a magic number: IVs[4] != (r2 >> 5 & 31)
Magic Number,PKHeX.Core,MethodFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\MethodFinder.cs,IVsMatch,The following statement contains a magic number: IVs[5] != (r2 >> 10 & 31)
Magic Number,PKHeX.Core,MethodFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\MethodFinder.cs,IVsMatch,The following statement contains a magic number: IVs[5] != (r2 >> 10 & 31)
Magic Number,PKHeX.Core,MethodFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\MethodFinder.cs,IVsMatch,The following statement contains a magic number: IVs[5] != (r2 >> 10 & 31)
Magic Number,PKHeX.Core,MethodFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\MethodFinder.cs,GetIVs,The following statement contains a magic number: return new[]              {                  r1 & 31'                  r1 >> 5 & 31'                  r1 >> 10 & 31'                  r2 & 31'                  r2 >> 5 & 31'                  r2 >> 10 & 31'              };
Magic Number,PKHeX.Core,MethodFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\MethodFinder.cs,GetIVs,The following statement contains a magic number: return new[]              {                  r1 & 31'                  r1 >> 5 & 31'                  r1 >> 10 & 31'                  r2 & 31'                  r2 >> 5 & 31'                  r2 >> 10 & 31'              };
Magic Number,PKHeX.Core,MethodFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\MethodFinder.cs,GetIVs,The following statement contains a magic number: return new[]              {                  r1 & 31'                  r1 >> 5 & 31'                  r1 >> 10 & 31'                  r2 & 31'                  r2 >> 5 & 31'                  r2 >> 10 & 31'              };
Magic Number,PKHeX.Core,MethodFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\MethodFinder.cs,GetIVs,The following statement contains a magic number: return new[]              {                  r1 & 31'                  r1 >> 5 & 31'                  r1 >> 10 & 31'                  r2 & 31'                  r2 >> 5 & 31'                  r2 >> 10 & 31'              };
Magic Number,PKHeX.Core,MethodFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\MethodFinder.cs,GetIVs,The following statement contains a magic number: return new[]              {                  r1 & 31'                  r1 >> 5 & 31'                  r1 >> 10 & 31'                  r2 & 31'                  r2 >> 5 & 31'                  r2 >> 10 & 31'              };
Magic Number,PKHeX.Core,MethodFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\MethodFinder.cs,GetIVs,The following statement contains a magic number: return new[]              {                  r1 & 31'                  r1 >> 5 & 31'                  r1 >> 10 & 31'                  r2 & 31'                  r2 >> 5 & 31'                  r2 >> 10 & 31'              };
Magic Number,PKHeX.Core,MethodFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\MethodFinder.cs,GetIVs,The following statement contains a magic number: return new[]              {                  r1 & 31'                  r1 >> 5 & 31'                  r1 >> 10 & 31'                  r2 & 31'                  r2 >> 5 & 31'                  r2 >> 10 & 31'              };
Magic Number,PKHeX.Core,MethodFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\MethodFinder.cs,GetIVs,The following statement contains a magic number: return new[]              {                  r1 & 31'                  r1 >> 5 & 31'                  r1 >> 10 & 31'                  r2 & 31'                  r2 >> 5 & 31'                  r2 >> 10 & 31'              };
Magic Number,PKHeX.Core,MethodFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\MethodFinder.cs,GetIVs,The following statement contains a magic number: return new[]              {                  r1 & 31'                  r1 >> 5 & 31'                  r1 >> 10 & 31'                  r2 & 31'                  r2 >> 5 & 31'                  r2 >> 10 & 31'              };
Magic Number,PKHeX.Core,MethodFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\MethodFinder.cs,GetIVs,The following statement contains a magic number: return new[]              {                  r1 & 31'                  r1 >> 5 & 31'                  r1 >> 10 & 31'                  r2 & 31'                  r2 >> 5 & 31'                  r2 >> 10 & 31'              };
Magic Number,PKHeX.Core,MethodFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\MethodFinder.cs,GetIVsInt32,The following statement contains a magic number: return new[]              {                  (int)r1 & 31'                  (int)r1 >> 5 & 31'                  (int)r1 >> 10 & 31'                  (int)r2 & 31'                  (int)r2 >> 5 & 31'                  (int)r2 >> 10 & 31'              };
Magic Number,PKHeX.Core,MethodFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\MethodFinder.cs,GetIVsInt32,The following statement contains a magic number: return new[]              {                  (int)r1 & 31'                  (int)r1 >> 5 & 31'                  (int)r1 >> 10 & 31'                  (int)r2 & 31'                  (int)r2 >> 5 & 31'                  (int)r2 >> 10 & 31'              };
Magic Number,PKHeX.Core,MethodFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\MethodFinder.cs,GetIVsInt32,The following statement contains a magic number: return new[]              {                  (int)r1 & 31'                  (int)r1 >> 5 & 31'                  (int)r1 >> 10 & 31'                  (int)r2 & 31'                  (int)r2 >> 5 & 31'                  (int)r2 >> 10 & 31'              };
Magic Number,PKHeX.Core,MethodFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\MethodFinder.cs,GetIVsInt32,The following statement contains a magic number: return new[]              {                  (int)r1 & 31'                  (int)r1 >> 5 & 31'                  (int)r1 >> 10 & 31'                  (int)r2 & 31'                  (int)r2 >> 5 & 31'                  (int)r2 >> 10 & 31'              };
Magic Number,PKHeX.Core,MethodFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\MethodFinder.cs,GetIVsInt32,The following statement contains a magic number: return new[]              {                  (int)r1 & 31'                  (int)r1 >> 5 & 31'                  (int)r1 >> 10 & 31'                  (int)r2 & 31'                  (int)r2 >> 5 & 31'                  (int)r2 >> 10 & 31'              };
Magic Number,PKHeX.Core,MethodFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\MethodFinder.cs,GetIVsInt32,The following statement contains a magic number: return new[]              {                  (int)r1 & 31'                  (int)r1 >> 5 & 31'                  (int)r1 >> 10 & 31'                  (int)r2 & 31'                  (int)r2 >> 5 & 31'                  (int)r2 >> 10 & 31'              };
Magic Number,PKHeX.Core,MethodFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\MethodFinder.cs,GetIVsInt32,The following statement contains a magic number: return new[]              {                  (int)r1 & 31'                  (int)r1 >> 5 & 31'                  (int)r1 >> 10 & 31'                  (int)r2 & 31'                  (int)r2 >> 5 & 31'                  (int)r2 >> 10 & 31'              };
Magic Number,PKHeX.Core,MethodFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\MethodFinder.cs,GetIVsInt32,The following statement contains a magic number: return new[]              {                  (int)r1 & 31'                  (int)r1 >> 5 & 31'                  (int)r1 >> 10 & 31'                  (int)r2 & 31'                  (int)r2 >> 5 & 31'                  (int)r2 >> 10 & 31'              };
Magic Number,PKHeX.Core,MethodFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\MethodFinder.cs,GetIVsInt32,The following statement contains a magic number: return new[]              {                  (int)r1 & 31'                  (int)r1 >> 5 & 31'                  (int)r1 >> 10 & 31'                  (int)r2 & 31'                  (int)r2 >> 5 & 31'                  (int)r2 >> 10 & 31'              };
Magic Number,PKHeX.Core,MethodFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\MethodFinder.cs,GetIVsInt32,The following statement contains a magic number: return new[]              {                  (int)r1 & 31'                  (int)r1 >> 5 & 31'                  (int)r1 >> 10 & 31'                  (int)r2 & 31'                  (int)r2 >> 5 & 31'                  (int)r2 >> 10 & 31'              };
Magic Number,PKHeX.Core,MethodFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\MethodFinder.cs,GetIVChunk,The following statement contains a magic number: val |= IVs[i+start] << (5*i);
Magic Number,PKHeX.Core,MethodFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\MethodFinder.cs,GetIVChunk,The following statement contains a magic number: i < 3
Magic Number,PKHeX.Core,MethodFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\MethodFinder.cs,GetColoEReaderMatches,The following statement contains a magic number: var top = PID >> 16;
Magic Number,PKHeX.Core,MethodFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\MethodFinder.cs,GetColoEReaderMatches,The following statement contains a magic number: var C = RNG.XDRNG.Advance(A' 7);
Magic Number,PKHeX.Core,MethodFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\MethodFinder.cs,GetPokeSpotSeeds,The following statement contains a magic number: var top = pid >> 16;
Magic Number,PKHeX.Core,MethodFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\MethodFinder.cs,IsPokeSpotActivation,The following statement contains a magic number: var esv = (seed >> 16) % 100;
Magic Number,PKHeX.Core,MethodFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\MethodFinder.cs,IsPokeSpotActivation,The following statement contains a magic number: var esv = (seed >> 16) % 100;
Magic Number,PKHeX.Core,MethodFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\MethodFinder.cs,IsPokeSpotActivation,The following statement contains a magic number: (s >> 16) % 100 < 10
Magic Number,PKHeX.Core,MethodFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\MethodFinder.cs,IsPokeSpotActivation,The following statement contains a magic number: (s >> 16) % 100 < 10
Magic Number,PKHeX.Core,MethodFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\MethodFinder.cs,IsPokeSpotActivation,The following statement contains a magic number: (s >> 16) % 100 < 10
Magic Number,PKHeX.Core,MethodFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\MethodFinder.cs,IsPokeSpotActivation,The following statement contains a magic number: (s >> 16) % 3 != 0
Magic Number,PKHeX.Core,MethodFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\MethodFinder.cs,IsPokeSpotActivation,The following statement contains a magic number: (s >> 16) % 3 != 0
Magic Number,PKHeX.Core,MethodFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\MethodFinder.cs,IsPokeSpotActivation,The following statement contains a magic number: (s >> 16) % 3 != 0
Magic Number,PKHeX.Core,MethodFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\MethodFinder.cs,IsPokeSpotActivation,The following statement contains a magic number: (s >> 16) % 3 != 0
Magic Number,PKHeX.Core,MethodFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\MethodFinder.cs,IsPokeSpotSlotValid,The following statement contains a magic number: return slot switch              {                  0 when esv < 50 => true'                  1 when 50 <= esv && esv < 85 => true'                  2 when 85 <= esv => true'                  _ => false              };
Magic Number,PKHeX.Core,MethodFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\MethodFinder.cs,IsPokeSpotSlotValid,The following statement contains a magic number: return slot switch              {                  0 when esv < 50 => true'                  1 when 50 <= esv && esv < 85 => true'                  2 when 85 <= esv => true'                  _ => false              };
Magic Number,PKHeX.Core,MethodFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\MethodFinder.cs,IsPokeSpotSlotValid,The following statement contains a magic number: return slot switch              {                  0 when esv < 50 => true'                  1 when 50 <= esv && esv < 85 => true'                  2 when 85 <= esv => true'                  _ => false              };
Magic Number,PKHeX.Core,MethodFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\MethodFinder.cs,IsPokeSpotSlotValid,The following statement contains a magic number: return slot switch              {                  0 when esv < 50 => true'                  1 when 50 <= esv && esv < 85 => true'                  2 when 85 <= esv => true'                  _ => false              };
Magic Number,PKHeX.Core,MethodFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\MethodFinder.cs,IsPokeSpotSlotValid,The following statement contains a magic number: return slot switch              {                  0 when esv < 50 => true'                  1 when 50 <= esv && esv < 85 => true'                  2 when 85 <= esv => true'                  _ => false              };
Magic Number,PKHeX.Core,MethodFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\MethodFinder.cs,IsCompatible3,The following statement contains a magic number: switch (encounter)              {                  case WC3 g:                      if (val == g.Method)                          return true;                      // forced shiny eggs' when hatched' can lose their detectable correlation.                      return g.IsEgg && !pkm.IsEgg && val == PIDType.None && (g.Method == PIDType.BACD_R_S || g.Method == PIDType.BACD_U_S);                  case EncounterStatic s:                      switch (pkm.Version)                      {                          case (int)GameVersion.CXD: return val == PIDType.CXD || val == PIDType.CXD_ColoStarter || val == PIDType.CXDAnti;                          case (int)GameVersion.E: return val == PIDType.Method_1; // no roamer glitch                            case (int)GameVersion.FR:                          case (int)GameVersion.LG:                              return s.Roaming ? val.IsRoamerPIDIV(pkm) : val == PIDType.Method_1; // roamer glitch                          default: // RS' roamer glitch && RSBox s/w emulation => method 4 available                              return s.Roaming ? val.IsRoamerPIDIV(pkm) : MethodH14.Contains(val);                      }                  case EncounterSlot w:                      if (pkm.Version == 15)                          return val == PIDType.PokeSpot;                      return (w.Species == 201 ? MethodH_Unown : MethodH).Contains(val);                  default:                      return val == PIDType.None;              }
Magic Number,PKHeX.Core,MethodFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\MethodFinder.cs,IsCompatible3,The following statement contains a magic number: switch (encounter)              {                  case WC3 g:                      if (val == g.Method)                          return true;                      // forced shiny eggs' when hatched' can lose their detectable correlation.                      return g.IsEgg && !pkm.IsEgg && val == PIDType.None && (g.Method == PIDType.BACD_R_S || g.Method == PIDType.BACD_U_S);                  case EncounterStatic s:                      switch (pkm.Version)                      {                          case (int)GameVersion.CXD: return val == PIDType.CXD || val == PIDType.CXD_ColoStarter || val == PIDType.CXDAnti;                          case (int)GameVersion.E: return val == PIDType.Method_1; // no roamer glitch                            case (int)GameVersion.FR:                          case (int)GameVersion.LG:                              return s.Roaming ? val.IsRoamerPIDIV(pkm) : val == PIDType.Method_1; // roamer glitch                          default: // RS' roamer glitch && RSBox s/w emulation => method 4 available                              return s.Roaming ? val.IsRoamerPIDIV(pkm) : MethodH14.Contains(val);                      }                  case EncounterSlot w:                      if (pkm.Version == 15)                          return val == PIDType.PokeSpot;                      return (w.Species == 201 ? MethodH_Unown : MethodH).Contains(val);                  default:                      return val == PIDType.None;              }
Magic Number,PKHeX.Core,MethodFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\MethodFinder.cs,IsRoamerPIDIV,The following statement contains a magic number: return !(pkm.IV_DEF != 0 || pkm.IV_SPE != 0 || pkm.IV_SPA != 0 || pkm.IV_SPD != 0 || pkm.IV_ATK > 7);
Magic Number,PKHeX.Core,MethodFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\MethodFinder.cs,IsG4ManaphyPIDValid,The following statement contains a magic number: return (pkm.TID ^ pkm.SID ^ (shinyPID & 0xFFFF) ^ (shinyPID >> 16)) < 8;
Magic Number,PKHeX.Core,MethodFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\MethodFinder.cs,IsG4ManaphyPIDValid,The following statement contains a magic number: return (pkm.TID ^ pkm.SID ^ (shinyPID & 0xFFFF) ^ (shinyPID >> 16)) < 8;
Magic Number,PKHeX.Core,PIDGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\PIDGenerator.cs,SetValuesFromSeedLCRNG,The following statement contains a magic number: pk.PID = (A & 0xFFFF0000) | B >> 16;
Magic Number,PKHeX.Core,PIDGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\PIDGenerator.cs,SetValuesFromSeedLCRNG,The following statement contains a magic number: var IVs = MethodFinder.GetIVsInt32(C >> 16' D >> 16);
Magic Number,PKHeX.Core,PIDGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\PIDGenerator.cs,SetValuesFromSeedLCRNG,The following statement contains a magic number: var IVs = MethodFinder.GetIVsInt32(C >> 16' D >> 16);
Magic Number,PKHeX.Core,PIDGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\PIDGenerator.cs,SetValuesFromSeedLCRNG,The following statement contains a magic number: IVs[1] &= 7;
Magic Number,PKHeX.Core,PIDGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\PIDGenerator.cs,SetValuesFromSeedLCRNG,The following statement contains a magic number: i < 6
Magic Number,PKHeX.Core,PIDGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\PIDGenerator.cs,SetValuesFromSeedBACD,The following statement contains a magic number: uint PID = (X & 0xFFFF0000) | ((uint)pk.SID ^ (uint)pk.TID ^ X >> 16);
Magic Number,PKHeX.Core,PIDGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\PIDGenerator.cs,SetValuesFromSeedBACD,The following statement contains a magic number: PID |= B >> 16 & 0x7;
Magic Number,PKHeX.Core,PIDGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\PIDGenerator.cs,SetValuesFromSeedBACD,The following statement contains a magic number: pk.IVs = MethodFinder.GetIVsInt32(C >> 16' D >> 16);
Magic Number,PKHeX.Core,PIDGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\PIDGenerator.cs,SetValuesFromSeedBACD,The following statement contains a magic number: pk.IVs = MethodFinder.GetIVsInt32(C >> 16' D >> 16);
Magic Number,PKHeX.Core,PIDGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\PIDGenerator.cs,SetValuesFromSeedXDRNG,The following statement contains a magic number: switch (pk.Species)              {                  case (int)Species.Umbreon: // Colo Umbreon                  case (int)Species.Eevee: // XD Eevee                      pk.TID = (int)((seed = rng.Next(seed)) >> 16);                      pk.SID = (int)((seed = rng.Next(seed)) >> 16);                      seed = rng.Advance(seed' 2); // PID calls consumed                      break;                  case (int)Species.Espeon: // Colo Espeon                      pk.TID = (int)((seed = rng.Next(seed)) >> 16);                      pk.SID = (int)((seed = rng.Next(seed)) >> 16);                      seed = rng.Advance(seed' 9); // PID calls consumed' skip over Umbreon                      break;              }
Magic Number,PKHeX.Core,PIDGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\PIDGenerator.cs,SetValuesFromSeedXDRNG,The following statement contains a magic number: switch (pk.Species)              {                  case (int)Species.Umbreon: // Colo Umbreon                  case (int)Species.Eevee: // XD Eevee                      pk.TID = (int)((seed = rng.Next(seed)) >> 16);                      pk.SID = (int)((seed = rng.Next(seed)) >> 16);                      seed = rng.Advance(seed' 2); // PID calls consumed                      break;                  case (int)Species.Espeon: // Colo Espeon                      pk.TID = (int)((seed = rng.Next(seed)) >> 16);                      pk.SID = (int)((seed = rng.Next(seed)) >> 16);                      seed = rng.Advance(seed' 9); // PID calls consumed' skip over Umbreon                      break;              }
Magic Number,PKHeX.Core,PIDGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\PIDGenerator.cs,SetValuesFromSeedXDRNG,The following statement contains a magic number: switch (pk.Species)              {                  case (int)Species.Umbreon: // Colo Umbreon                  case (int)Species.Eevee: // XD Eevee                      pk.TID = (int)((seed = rng.Next(seed)) >> 16);                      pk.SID = (int)((seed = rng.Next(seed)) >> 16);                      seed = rng.Advance(seed' 2); // PID calls consumed                      break;                  case (int)Species.Espeon: // Colo Espeon                      pk.TID = (int)((seed = rng.Next(seed)) >> 16);                      pk.SID = (int)((seed = rng.Next(seed)) >> 16);                      seed = rng.Advance(seed' 9); // PID calls consumed' skip over Umbreon                      break;              }
Magic Number,PKHeX.Core,PIDGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\PIDGenerator.cs,SetValuesFromSeedXDRNG,The following statement contains a magic number: switch (pk.Species)              {                  case (int)Species.Umbreon: // Colo Umbreon                  case (int)Species.Eevee: // XD Eevee                      pk.TID = (int)((seed = rng.Next(seed)) >> 16);                      pk.SID = (int)((seed = rng.Next(seed)) >> 16);                      seed = rng.Advance(seed' 2); // PID calls consumed                      break;                  case (int)Species.Espeon: // Colo Espeon                      pk.TID = (int)((seed = rng.Next(seed)) >> 16);                      pk.SID = (int)((seed = rng.Next(seed)) >> 16);                      seed = rng.Advance(seed' 9); // PID calls consumed' skip over Umbreon                      break;              }
Magic Number,PKHeX.Core,PIDGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\PIDGenerator.cs,SetValuesFromSeedXDRNG,The following statement contains a magic number: switch (pk.Species)              {                  case (int)Species.Umbreon: // Colo Umbreon                  case (int)Species.Eevee: // XD Eevee                      pk.TID = (int)((seed = rng.Next(seed)) >> 16);                      pk.SID = (int)((seed = rng.Next(seed)) >> 16);                      seed = rng.Advance(seed' 2); // PID calls consumed                      break;                  case (int)Species.Espeon: // Colo Espeon                      pk.TID = (int)((seed = rng.Next(seed)) >> 16);                      pk.SID = (int)((seed = rng.Next(seed)) >> 16);                      seed = rng.Advance(seed' 9); // PID calls consumed' skip over Umbreon                      break;              }
Magic Number,PKHeX.Core,PIDGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\PIDGenerator.cs,SetValuesFromSeedXDRNG,The following statement contains a magic number: switch (pk.Species)              {                  case (int)Species.Umbreon: // Colo Umbreon                  case (int)Species.Eevee: // XD Eevee                      pk.TID = (int)((seed = rng.Next(seed)) >> 16);                      pk.SID = (int)((seed = rng.Next(seed)) >> 16);                      seed = rng.Advance(seed' 2); // PID calls consumed                      break;                  case (int)Species.Espeon: // Colo Espeon                      pk.TID = (int)((seed = rng.Next(seed)) >> 16);                      pk.SID = (int)((seed = rng.Next(seed)) >> 16);                      seed = rng.Advance(seed' 9); // PID calls consumed' skip over Umbreon                      break;              }
Magic Number,PKHeX.Core,PIDGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\PIDGenerator.cs,SetValuesFromSeedXDRNG,The following statement contains a magic number: pk.PID = (D & 0xFFFF0000) | E >> 16;
Magic Number,PKHeX.Core,PIDGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\PIDGenerator.cs,SetValuesFromSeedXDRNG,The following statement contains a magic number: pk.IVs = MethodFinder.GetIVsInt32(A >> 16' B >> 16);
Magic Number,PKHeX.Core,PIDGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\PIDGenerator.cs,SetValuesFromSeedXDRNG,The following statement contains a magic number: pk.IVs = MethodFinder.GetIVsInt32(A >> 16' B >> 16);
Magic Number,PKHeX.Core,PIDGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\PIDGenerator.cs,SetValuesFromSeedChannel,The following statement contains a magic number: const int TID = 40122;
Magic Number,PKHeX.Core,PIDGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\PIDGenerator.cs,SetValuesFromSeedChannel,The following statement contains a magic number: var SID = (int)(O >> 16);
Magic Number,PKHeX.Core,PIDGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\PIDGenerator.cs,SetValuesFromSeedChannel,The following statement contains a magic number: var pid1 = A >> 16;
Magic Number,PKHeX.Core,PIDGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\PIDGenerator.cs,SetValuesFromSeedChannel,The following statement contains a magic number: var pid2 = B >> 16;
Magic Number,PKHeX.Core,PIDGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\PIDGenerator.cs,SetValuesFromSeedChannel,The following statement contains a magic number: var pid = pid1 << 16 | pid2;
Magic Number,PKHeX.Core,PIDGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\PIDGenerator.cs,SetValuesFromSeedChannel,The following statement contains a magic number: (pid2 > 7 ? 0 : 1) != (pid1 ^ SID ^ TID)
Magic Number,PKHeX.Core,PIDGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\PIDGenerator.cs,SetValuesFromSeedChannel,The following statement contains a magic number: pk.HeldItem = (int)(C >> 31) + 169;
Magic Number,PKHeX.Core,PIDGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\PIDGenerator.cs,SetValuesFromSeedChannel,The following statement contains a magic number: pk.HeldItem = (int)(C >> 31) + 169;
Magic Number,PKHeX.Core,PIDGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\PIDGenerator.cs,SetValuesFromSeedChannel,The following statement contains a magic number: pk.Version = (int)(D >> 31) + 1;
Magic Number,PKHeX.Core,PIDGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\PIDGenerator.cs,SetValuesFromSeedChannel,The following statement contains a magic number: pk.OT_Gender = (int)(E >> 31);
Magic Number,PKHeX.Core,PIDGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\PIDGenerator.cs,GetGeneratorMethod,The following statement contains a magic number: switch (t)              {                  case PIDType.Channel:                      return SetValuesFromSeedChannel;                  case PIDType.CXD:                      return SetValuesFromSeedXDRNG;                    case PIDType.Method_1:                  case PIDType.Method_2:                  case PIDType.Method_3:                  case PIDType.Method_4:                  case PIDType.Method_1_Unown:                  case PIDType.Method_2_Unown:                  case PIDType.Method_3_Unown:                  case PIDType.Method_4_Unown:                  case PIDType.Method_1_Roamer:                      return (pk' seed) => SetValuesFromSeedLCRNG(pk' t' seed);                    case PIDType.BACD_R:                  case PIDType.BACD_R_A:                  case PIDType.BACD_R_S:                      return (pk' seed) => SetValuesFromSeedBACD(pk' t' seed & 0xFFFF);                  case PIDType.BACD_U:                  case PIDType.BACD_U_A:                  case PIDType.BACD_U_S:                      return (pk' seed) => SetValuesFromSeedBACD(pk' t' seed);                    case PIDType.PokeSpot:                      return SetRandomPIDIV;                    case PIDType.G5MGShiny:                      return SetValuesFromSeedMG5Shiny;                    case PIDType.Pokewalker:                      return (pk' seed) => pk.PID = GetPokeWalkerPID(pk.TID' pk.SID' seed%24' pk.Gender' pk.PersonalInfo.Gender);                    // others: unimplemented                  case PIDType.CuteCharm:                      break;                  case PIDType.ChainShiny:                      return SetRandomChainShinyPID;                  case PIDType.G4MGAntiShiny:                      break;              }
Magic Number,PKHeX.Core,PIDGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\PIDGenerator.cs,SetRandomChainShinyPID,The following statement contains a magic number: uint Next() => (seed = RNG.LCRNG.Next(seed)) >> 16;
Magic Number,PKHeX.Core,PIDGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\PIDGenerator.cs,SetRandomChainShinyPID,The following statement contains a magic number: uint lower = Next() & 7;
Magic Number,PKHeX.Core,PIDGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\PIDGenerator.cs,SetRandomChainShinyPID,The following statement contains a magic number: uint upper = Next() & 7;
Magic Number,PKHeX.Core,PIDGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\PIDGenerator.cs,SetRandomChainShinyPID,The following statement contains a magic number: lower |= (Next() & 1) << (3 + i);
Magic Number,PKHeX.Core,PIDGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\PIDGenerator.cs,SetRandomChainShinyPID,The following statement contains a magic number: i < 13
Magic Number,PKHeX.Core,PIDGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\PIDGenerator.cs,SetRandomChainShinyPID,The following statement contains a magic number: pk.PID = upper << 16 | lower;
Magic Number,PKHeX.Core,PIDGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\PIDGenerator.cs,SetRandomPokeSpotPID,The following statement contains a magic number: pk.PID = (D & 0xFFFF0000) | E >> 16;
Magic Number,PKHeX.Core,PIDGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\PIDGenerator.cs,GetMG5ShinyPID,The following statement contains a magic number: uint PID = (uint)((TID ^ SID ^ gval) << 16 | gval);
Magic Number,PKHeX.Core,PIDGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\PIDGenerator.cs,GetMG5ShinyPID,The following statement contains a magic number: (PID & 0x10000) != av << 16
Magic Number,PKHeX.Core,PIDGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\PIDGenerator.cs,GetPokeWalkerPID,The following statement contains a magic number: nature >= 24
Magic Number,PKHeX.Core,PIDGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\PIDGenerator.cs,GetPokeWalkerPID,The following statement contains a magic number: uint pid = (uint)((TID ^ SID) >> 8 ^ 0xFF) << 24;
Magic Number,PKHeX.Core,PIDGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\PIDGenerator.cs,GetPokeWalkerPID,The following statement contains a magic number: uint pid = (uint)((TID ^ SID) >> 8 ^ 0xFF) << 24;
Magic Number,PKHeX.Core,PIDGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\PIDGenerator.cs,GetPokeWalkerPID,The following statement contains a magic number: pid += nature - (pid % 25);
Magic Number,PKHeX.Core,PIDGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\PIDGenerator.cs,GetPokeWalkerPID,The following statement contains a magic number: pid += (uint)((((gr - (pid & 0xFF)) / 25) + 1) * 25);
Magic Number,PKHeX.Core,PIDGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\PIDGenerator.cs,GetPokeWalkerPID,The following statement contains a magic number: pid += (uint)((((gr - (pid & 0xFF)) / 25) + 1) * 25);
Magic Number,PKHeX.Core,PIDGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\PIDGenerator.cs,GetPokeWalkerPID,The following statement contains a magic number: pid += 25;
Magic Number,PKHeX.Core,PIDGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\PIDGenerator.cs,SetValuesFromSeedMG5Shiny,The following statement contains a magic number: var gv = seed >> 24;
Magic Number,PKHeX.Core,PIDGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\PIDGenerator.cs,SetRandomWildPID,The following statement contains a magic number: switch (gen)              {                  case 3:                  case 4:                      SetRandomWildPID4(pk' nature' ability' gender' specific);                      break;                  case 5:                      SetRandomWildPID5(pk' nature' ability' gender' specific);                      break;                  default:                      SetRandomWildPID(pk' nature' ability' gender);                      break;              }
Magic Number,PKHeX.Core,PIDGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\PIDGenerator.cs,SetRandomWildPID,The following statement contains a magic number: switch (gen)              {                  case 3:                  case 4:                      SetRandomWildPID4(pk' nature' ability' gender' specific);                      break;                  case 5:                      SetRandomWildPID5(pk' nature' ability' gender' specific);                      break;                  default:                      SetRandomWildPID(pk' nature' ability' gender);                      break;              }
Magic Number,PKHeX.Core,PIDGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\PIDGenerator.cs,SetRandomWildPID,The following statement contains a magic number: switch (gen)              {                  case 3:                  case 4:                      SetRandomWildPID4(pk' nature' ability' gender' specific);                      break;                  case 5:                      SetRandomWildPID5(pk' nature' ability' gender' specific);                      break;                  default:                      SetRandomWildPID(pk' nature' ability' gender);                      break;              }
Magic Number,PKHeX.Core,PIDGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\PIDGenerator.cs,GetPIDType,The following statement contains a magic number: pk.Version == 15
Magic Number,PKHeX.Core,PIDGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\PIDGenerator.cs,GetPIDType,The following statement contains a magic number: return PIDType.Method_1_Unown + Util.Rand.Next(3);
Magic Number,PKHeX.Core,PIDGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\PIDGenerator.cs,GetPIDType,The following statement contains a magic number: pk.Gen3 && pk.Species == 201
Magic Number,PKHeX.Core,PIDGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\PIDGenerator.cs,SetRandomWildPID5,The following statement contains a magic number: ability == 2
Magic Number,PKHeX.Core,PIDGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\PIDGenerator.cs,SetRandomWildPID5,The following statement contains a magic number: ((seed >> 16) & 1) != ability
Magic Number,PKHeX.Core,PIDGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\PIDGenerator.cs,SetRandomIVs,The following statement contains a magic number: pk.IVs = new[]              {                  Util.Rand.Next(32)'                  Util.Rand.Next(32)'                  Util.Rand.Next(32)'                  Util.Rand.Next(32)'                  Util.Rand.Next(32)'                  Util.Rand.Next(32)'              };
Magic Number,PKHeX.Core,PIDGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\PIDGenerator.cs,SetRandomIVs,The following statement contains a magic number: pk.IVs = new[]              {                  Util.Rand.Next(32)'                  Util.Rand.Next(32)'                  Util.Rand.Next(32)'                  Util.Rand.Next(32)'                  Util.Rand.Next(32)'                  Util.Rand.Next(32)'              };
Magic Number,PKHeX.Core,PIDGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\PIDGenerator.cs,SetRandomIVs,The following statement contains a magic number: pk.IVs = new[]              {                  Util.Rand.Next(32)'                  Util.Rand.Next(32)'                  Util.Rand.Next(32)'                  Util.Rand.Next(32)'                  Util.Rand.Next(32)'                  Util.Rand.Next(32)'              };
Magic Number,PKHeX.Core,PIDGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\PIDGenerator.cs,SetRandomIVs,The following statement contains a magic number: pk.IVs = new[]              {                  Util.Rand.Next(32)'                  Util.Rand.Next(32)'                  Util.Rand.Next(32)'                  Util.Rand.Next(32)'                  Util.Rand.Next(32)'                  Util.Rand.Next(32)'              };
Magic Number,PKHeX.Core,PIDGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\PIDGenerator.cs,SetRandomIVs,The following statement contains a magic number: pk.IVs = new[]              {                  Util.Rand.Next(32)'                  Util.Rand.Next(32)'                  Util.Rand.Next(32)'                  Util.Rand.Next(32)'                  Util.Rand.Next(32)'                  Util.Rand.Next(32)'              };
Magic Number,PKHeX.Core,PIDGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\PIDGenerator.cs,SetRandomIVs,The following statement contains a magic number: pk.IVs = new[]              {                  Util.Rand.Next(32)'                  Util.Rand.Next(32)'                  Util.Rand.Next(32)'                  Util.Rand.Next(32)'                  Util.Rand.Next(32)'                  Util.Rand.Next(32)'              };
Magic Number,PKHeX.Core,RNG,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\RNG.cs,RNG,The following statement contains a magic number: k2 = Mult << 8;
Magic Number,PKHeX.Core,RNG,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\RNG.cs,RNG,The following statement contains a magic number: k2s = k0g << 8;
Magic Number,PKHeX.Core,RNG,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\RNG.cs,SetFlagData,The following statement contains a magic number: ushort val = (ushort) (right >> 16);
Magic Number,PKHeX.Core,RNG,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\RNG.cs,GetSequentialIVsUInt32,The following statement contains a magic number: uint[] ivs = new uint[6];
Magic Number,PKHeX.Core,RNG,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\RNG.cs,GetSequentialIVsUInt32,The following statement contains a magic number: ivs[i] = seed >> 27;
Magic Number,PKHeX.Core,RNG,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\RNG.cs,GetSequentialIVsUInt32,The following statement contains a magic number: i < 6
Magic Number,PKHeX.Core,RNG,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\RNG.cs,GetSequentialIVsInt32,The following statement contains a magic number: int[] ivs = new int[6];
Magic Number,PKHeX.Core,RNG,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\RNG.cs,GetSequentialIVsInt32,The following statement contains a magic number: ivs[i] = (int)(seed >> 27);
Magic Number,PKHeX.Core,RNG,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\RNG.cs,GetSequentialIVsInt32,The following statement contains a magic number: i < 6
Magic Number,PKHeX.Core,RNG,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\RNG.cs,RecoverLower16Bits,The following statement contains a magic number: ushort val = (ushort)(k3 >> 16);
Magic Number,PKHeX.Core,RNG,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\RNG.cs,RecoverLower16Bits,The following statement contains a magic number: yield return Prev(first | i << 8 | low8[val]);
Magic Number,PKHeX.Core,RNG,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\RNG.cs,RecoverLower16Bits,The following statement contains a magic number: i <= 255
Magic Number,PKHeX.Core,RNG,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\RNG.cs,RecoverLower16BitsGap,The following statement contains a magic number: ushort val = (ushort)(k3 >> 16);
Magic Number,PKHeX.Core,RNG,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\RNG.cs,RecoverLower16BitsGap,The following statement contains a magic number: yield return Prev(first | i << 8 | g_low8[val]);
Magic Number,PKHeX.Core,RNG,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\RNG.cs,RecoverLower16BitsGap,The following statement contains a magic number: i <= 255
Magic Number,PKHeX.Core,RNG,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\RNG.cs,RecoverLower16BitsEuclid16,The following statement contains a magic number: const int bitshift = 32;
Magic Number,PKHeX.Core,RNG,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\RNG.cs,RecoverLower16BitsEuclid15,The following statement contains a magic number: const int bitshift = 31;
Magic Number,PKHeX.Core,RNG,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\RNG.cs,GetPossibleSeedsEuclid,The following statement contains a magic number: remainder >> 16 == 0
Magic Number,PKHeX.Core,EggMoves2,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Structures\EggMoves.cs,GetArray,The following statement contains a magic number: int baseOffset = (data[1] << 8 | data[0]) - (count * 2);
Magic Number,PKHeX.Core,EggMoves2,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Structures\EggMoves.cs,GetArray,The following statement contains a magic number: int baseOffset = (data[1] << 8 | data[0]) - (count * 2);
Magic Number,PKHeX.Core,EggMoves2,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Structures\EggMoves.cs,GetArray,The following statement contains a magic number: var ofs = (i - 1) * 2;
Magic Number,PKHeX.Core,EggMoves2,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Structures\EggMoves.cs,GetArray,The following statement contains a magic number: ptrs[i] = (data[ofs + 1] << 8 | data[ofs]) - baseOffset;
Magic Number,PKHeX.Core,EggMoves6,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Structures\EggMoves.cs,Get,The following statement contains a magic number: data.Length < 2 || data.Length % 2 != 0
Magic Number,PKHeX.Core,EggMoves6,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Structures\EggMoves.cs,Get,The following statement contains a magic number: data.Length < 2 || data.Length % 2 != 0
Magic Number,PKHeX.Core,EggMoves6,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Structures\EggMoves.cs,Get,The following statement contains a magic number: moves[i] = BitConverter.ToInt16(data' 2 + (i * 2));
Magic Number,PKHeX.Core,EggMoves6,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Structures\EggMoves.cs,Get,The following statement contains a magic number: moves[i] = BitConverter.ToInt16(data' 2 + (i * 2));
Magic Number,PKHeX.Core,EggMoves7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Structures\EggMoves.cs,Get,The following statement contains a magic number: data.Length < 2 || data.Length % 2 != 0
Magic Number,PKHeX.Core,EggMoves7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Structures\EggMoves.cs,Get,The following statement contains a magic number: data.Length < 2 || data.Length % 2 != 0
Magic Number,PKHeX.Core,EggMoves7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Structures\EggMoves.cs,Get,The following statement contains a magic number: int count = BitConverter.ToInt16(data' 2);
Magic Number,PKHeX.Core,EggMoves7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Structures\EggMoves.cs,Get,The following statement contains a magic number: moves[i] = BitConverter.ToInt16(data' 4 + (i * 2));
Magic Number,PKHeX.Core,EggMoves7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Structures\EggMoves.cs,Get,The following statement contains a magic number: moves[i] = BitConverter.ToInt16(data' 4 + (i * 2));
Magic Number,PKHeX.Core,SimpleTrainerInfo,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Structures\SimpleTrainerInfo.cs,SimpleTrainerInfo,The following statement contains a magic number: GameVersion.GG.Contains(game) || game.GetGeneration() >= 8
Magic Number,PKHeX.Core,Locations,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Tables\Locations.cs,TradedEggLocationNPC,The following statement contains a magic number: return gen switch              {                  1 => LinkTrade2NPC'                  2 => LinkTrade2NPC'                  3 => LinkTrade3NPC'                  4 => LinkTrade4NPC'                  5 => LinkTrade5NPC'                  _ => LinkTrade6NPC              };
Magic Number,PKHeX.Core,Locations,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Tables\Locations.cs,TradedEggLocationNPC,The following statement contains a magic number: return gen switch              {                  1 => LinkTrade2NPC'                  2 => LinkTrade2NPC'                  3 => LinkTrade3NPC'                  4 => LinkTrade4NPC'                  5 => LinkTrade5NPC'                  _ => LinkTrade6NPC              };
Magic Number,PKHeX.Core,Locations,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Tables\Locations.cs,TradedEggLocationNPC,The following statement contains a magic number: return gen switch              {                  1 => LinkTrade2NPC'                  2 => LinkTrade2NPC'                  3 => LinkTrade3NPC'                  4 => LinkTrade4NPC'                  5 => LinkTrade5NPC'                  _ => LinkTrade6NPC              };
Magic Number,PKHeX.Core,Locations,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Tables\Locations.cs,TradedEggLocationNPC,The following statement contains a magic number: return gen switch              {                  1 => LinkTrade2NPC'                  2 => LinkTrade2NPC'                  3 => LinkTrade3NPC'                  4 => LinkTrade4NPC'                  5 => LinkTrade5NPC'                  _ => LinkTrade6NPC              };
Magic Number,PKHeX.Core,Locations,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Tables\Locations.cs,TradedEggLocation,The following statement contains a magic number: return gen switch              {                  4 => LinkTrade4'                  5 => LinkTrade5'                  _ => LinkTrade6              };
Magic Number,PKHeX.Core,Locations,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Tables\Locations.cs,TradedEggLocation,The following statement contains a magic number: return gen switch              {                  4 => LinkTrade4'                  5 => LinkTrade5'                  _ => LinkTrade6              };
Magic Number,PKHeX.Core,MystryMew,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Tables\MystryMew.cs,GetSeedIndex,The following statement contains a magic number: seed = RNG.LCRNG.Reverse(seed' 5);
Magic Number,PKHeX.Core,MystryMew,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Tables\MystryMew.cs,GetSeedIndex,The following statement contains a magic number: i < 5
Magic Number,PKHeX.Core,AbilityVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\AbilityVerifier.cs,VerifyAbility,The following statement contains a magic number: data.EncounterMatch is MysteryGift g && g.Format >= 4
Magic Number,PKHeX.Core,AbilityVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\AbilityVerifier.cs,VerifyAbility,The following statement contains a magic number: pkm.Format < 6
Magic Number,PKHeX.Core,AbilityVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\AbilityVerifier.cs,VerifyAbility,The following statement contains a magic number: (data.pkm.AbilityNumber == 4) != (eabil == 4)
Magic Number,PKHeX.Core,AbilityVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\AbilityVerifier.cs,VerifyAbility,The following statement contains a magic number: (data.pkm.AbilityNumber == 4) != (eabil == 4)
Magic Number,PKHeX.Core,AbilityVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\AbilityVerifier.cs,VerifyAbility,The following statement contains a magic number: return gen switch              {                  5 => VerifyAbility5(data' abilities)'                  6 => VerifyAbility6(data)'                  7 => VerifyAbility7(data)'                  8 => VerifyAbility8(data)'                  _ => CheckMatch(data.pkm' abilities' gen' AbilityState.CanMismatch)              };
Magic Number,PKHeX.Core,AbilityVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\AbilityVerifier.cs,VerifyAbility,The following statement contains a magic number: return gen switch              {                  5 => VerifyAbility5(data' abilities)'                  6 => VerifyAbility6(data)'                  7 => VerifyAbility7(data)'                  8 => VerifyAbility8(data)'                  _ => CheckMatch(data.pkm' abilities' gen' AbilityState.CanMismatch)              };
Magic Number,PKHeX.Core,AbilityVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\AbilityVerifier.cs,VerifyAbility,The following statement contains a magic number: return gen switch              {                  5 => VerifyAbility5(data' abilities)'                  6 => VerifyAbility6(data)'                  7 => VerifyAbility7(data)'                  8 => VerifyAbility8(data)'                  _ => CheckMatch(data.pkm' abilities' gen' AbilityState.CanMismatch)              };
Magic Number,PKHeX.Core,AbilityVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\AbilityVerifier.cs,VerifyAbility,The following statement contains a magic number: return gen switch              {                  5 => VerifyAbility5(data' abilities)'                  6 => VerifyAbility6(data)'                  7 => VerifyAbility7(data)'                  8 => VerifyAbility8(data)'                  _ => CheckMatch(data.pkm' abilities' gen' AbilityState.CanMismatch)              };
Magic Number,PKHeX.Core,AbilityVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\AbilityVerifier.cs,VerifyAbility345,The following statement contains a magic number: 3 <= pkm.Format && pkm.Format <= 5 && abilities[0] != abilities[1]
Magic Number,PKHeX.Core,AbilityVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\AbilityVerifier.cs,VerifyAbility345,The following statement contains a magic number: 3 <= pkm.Format && pkm.Format <= 5 && abilities[0] != abilities[1]
Magic Number,PKHeX.Core,AbilityVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\AbilityVerifier.cs,VerifyAbility345,The following statement contains a magic number: (data.pkm.AbilityNumber == 4) != (eabil == 4)
Magic Number,PKHeX.Core,AbilityVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\AbilityVerifier.cs,VerifyAbility345,The following statement contains a magic number: (data.pkm.AbilityNumber == 4) != (eabil == 4)
Magic Number,PKHeX.Core,AbilityVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\AbilityVerifier.cs,VerifyAbility345,The following statement contains a magic number: gen == 5
Magic Number,PKHeX.Core,AbilityVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\AbilityVerifier.cs,VerifyFixedAbility,The following statement contains a magic number: data.Info.EncounterMatch is IGeneration g && g.Generation >= 6
Magic Number,PKHeX.Core,AbilityVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\AbilityVerifier.cs,VerifyFixedAbility,The following statement contains a magic number: (pkm.AbilityNumber == 4) != (EncounterAbility == 4)
Magic Number,PKHeX.Core,AbilityVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\AbilityVerifier.cs,VerifyFixedAbility,The following statement contains a magic number: (pkm.AbilityNumber == 4) != (EncounterAbility == 4)
Magic Number,PKHeX.Core,AbilityVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\AbilityVerifier.cs,VerifyAbilityPreCapsule,The following statement contains a magic number: pkm.Version == (int)GameVersion.CXD && pkm.Format == 3
Magic Number,PKHeX.Core,AbilityVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\AbilityVerifier.cs,VerifyAbilityPreCapsule,The following statement contains a magic number: pkm.Format == 3 || !pkm.InhabitedGeneration(3)
Magic Number,PKHeX.Core,AbilityVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\AbilityVerifier.cs,VerifyAbilityPreCapsule,The following statement contains a magic number: pkm.Format == 3 || !pkm.InhabitedGeneration(3)
Magic Number,PKHeX.Core,AbilityVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\AbilityVerifier.cs,VerifyAbilityPreCapsule,The following statement contains a magic number: data.Info.EvoChainsAllGens[3].Count == 0
Magic Number,PKHeX.Core,AbilityVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\AbilityVerifier.cs,VerifyAbilityPreCapsule,The following statement contains a magic number: return VerifyAbilityGen3Transfer(data' abilities' data.Info.EvoChainsAllGens[3][0].Species);
Magic Number,PKHeX.Core,AbilityVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\AbilityVerifier.cs,VerifyAbilityGen3Transfer,The following statement contains a magic number: bool evolved45 = chain[4].Count > 1 || (pkm.Format == 5 && chain[5].Count > 1);
Magic Number,PKHeX.Core,AbilityVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\AbilityVerifier.cs,VerifyAbilityGen3Transfer,The following statement contains a magic number: bool evolved45 = chain[4].Count > 1 || (pkm.Format == 5 && chain[5].Count > 1);
Magic Number,PKHeX.Core,AbilityVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\AbilityVerifier.cs,VerifyAbilityGen3Transfer,The following statement contains a magic number: bool evolved45 = chain[4].Count > 1 || (pkm.Format == 5 && chain[5].Count > 1);
Magic Number,PKHeX.Core,AbilityVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\AbilityVerifier.cs,VerifyAbilityMG,The following statement contains a magic number: return (pkm.Format >= 6 ? (pkm.AbilityNumber == 1) : (pkm.AbilityNumber < 4)) ? VALID : GetInvalid(LAbilityMismatchGift);
Magic Number,PKHeX.Core,AbilityVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\AbilityVerifier.cs,VerifyAbilityMG,The following statement contains a magic number: return (pkm.Format >= 6 ? (pkm.AbilityNumber == 1) : (pkm.AbilityNumber < 4)) ? VALID : GetInvalid(LAbilityMismatchGift);
Magic Number,PKHeX.Core,AbilityVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\AbilityVerifier.cs,VerifyAbilityMG,The following statement contains a magic number: cardtype == 4
Magic Number,PKHeX.Core,AbilityVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\AbilityVerifier.cs,VerifyAbilityMG,The following statement contains a magic number: return abilNumber == 4 ? GetInvalid(LAbilityMismatchGift) : VALID;
Magic Number,PKHeX.Core,AbilityVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\AbilityVerifier.cs,VerifyAbilityMG,The following statement contains a magic number: cardtype == 3
Magic Number,PKHeX.Core,AbilityVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\AbilityVerifier.cs,VerifyAbilityMG,The following statement contains a magic number: abilNumber == 4 || cardtype == 2
Magic Number,PKHeX.Core,AbilityVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\AbilityVerifier.cs,VerifyAbilityMG,The following statement contains a magic number: abilNumber == 4 || cardtype == 2
Magic Number,PKHeX.Core,AbilityVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\AbilityVerifier.cs,VerifyAbilityMG,The following statement contains a magic number: pkm.Format >= 6 && abilities[0] != abilities[1]
Magic Number,PKHeX.Core,AbilityVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\AbilityVerifier.cs,VerifyAbilityMG,The following statement contains a magic number: return GetInvalid(pkm.Format < 6 ? LAbilityMismatchPID : LAbilityMismatchFlag);
Magic Number,PKHeX.Core,AbilityVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\AbilityVerifier.cs,VerifyAbilityPCD,The following statement contains a magic number: return CheckMatch(pkm' abilities' 4' AbilityState.MustMatch);
Magic Number,PKHeX.Core,AbilityVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\AbilityVerifier.cs,VerifyAbilityPCD,The following statement contains a magic number: pkm.AbilityNumber < 4
Magic Number,PKHeX.Core,AbilityVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\AbilityVerifier.cs,VerifyAbilityPCD,The following statement contains a magic number: pkm.Format >= 6
Magic Number,PKHeX.Core,AbilityVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\AbilityVerifier.cs,VerifyAbilityPCD,The following statement contains a magic number: return CheckMatch(pkm' abilities' 4' AbilityState.MustMatch);
Magic Number,PKHeX.Core,AbilityVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\AbilityVerifier.cs,VerifyAbility5,The following statement contains a magic number: switch (data.EncounterMatch)              {                  case EncounterSlot w:                      // Hidden Abilities for Wild Encounters are only available at a Hidden Grotto                      bool grotto = w.Type == SlotType.HiddenGrotto;                      if (pkm.AbilityNumber == 4 ^ grotto)                          return GetInvalid(grotto ? LAbilityMismatchGrotto : LAbilityHiddenFail);                      break;                    case EncounterEgg e when pkm.AbilityNumber == 4:                      // Hidden Abilities for some are unbreedable or unreleased                      if (Legal.Ban_BreedHidden5.Contains(e.Species))                          return GetInvalid(LAbilityHiddenUnavailable);                      break;              }
Magic Number,PKHeX.Core,AbilityVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\AbilityVerifier.cs,VerifyAbility5,The following statement contains a magic number: switch (data.EncounterMatch)              {                  case EncounterSlot w:                      // Hidden Abilities for Wild Encounters are only available at a Hidden Grotto                      bool grotto = w.Type == SlotType.HiddenGrotto;                      if (pkm.AbilityNumber == 4 ^ grotto)                          return GetInvalid(grotto ? LAbilityMismatchGrotto : LAbilityHiddenFail);                      break;                    case EncounterEgg e when pkm.AbilityNumber == 4:                      // Hidden Abilities for some are unbreedable or unreleased                      if (Legal.Ban_BreedHidden5.Contains(e.Species))                          return GetInvalid(LAbilityHiddenUnavailable);                      break;              }
Magic Number,PKHeX.Core,AbilityVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\AbilityVerifier.cs,VerifyAbility5,The following statement contains a magic number: var state = pkm.Format == 5 ? AbilityState.MustMatch : AbilityState.CanMismatch;
Magic Number,PKHeX.Core,AbilityVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\AbilityVerifier.cs,VerifyAbility5,The following statement contains a magic number: return CheckMatch(data.pkm' abilities' 5' state);
Magic Number,PKHeX.Core,AbilityVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\AbilityVerifier.cs,VerifyAbility6,The following statement contains a magic number: pkm.AbilityNumber != 4
Magic Number,PKHeX.Core,AbilityVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\AbilityVerifier.cs,VerifyAbility7,The following statement contains a magic number: EncounterMatch is EncounterSlot slot && pkm.AbilityNumber == 4
Magic Number,PKHeX.Core,AbilityVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\AbilityVerifier.cs,VerifyAbility7,The following statement contains a magic number: Legal.Ban_NoHidden7.Contains(pkm.SpecForm) && pkm.AbilityNumber == 4
Magic Number,PKHeX.Core,AbilityVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\AbilityVerifier.cs,VerifyAbility8,The following statement contains a magic number: EncounterMatch is EncounterSlot && pkm.AbilityNumber == 4
Magic Number,PKHeX.Core,AbilityVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\AbilityVerifier.cs,VerifyAbility8,The following statement contains a magic number: Legal.Ban_NoHidden8.Contains(pkm.SpecForm) && pkm.AbilityNumber == 4
Magic Number,PKHeX.Core,AbilityVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\AbilityVerifier.cs,CheckMatch,The following statement contains a magic number: 3 <= gen && gen <= 4 && pkm.AbilityNumber == 4
Magic Number,PKHeX.Core,AbilityVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\AbilityVerifier.cs,CheckMatch,The following statement contains a magic number: 3 <= gen && gen <= 4 && pkm.AbilityNumber == 4
Magic Number,PKHeX.Core,AbilityVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\AbilityVerifier.cs,CheckMatch,The following statement contains a magic number: 3 <= gen && gen <= 4 && pkm.AbilityNumber == 4
Magic Number,PKHeX.Core,AbilityVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\AbilityVerifier.cs,CheckMatch,The following statement contains a magic number: return GetInvalid(pkm.Format < 6 ? LAbilityMismatchPID : LAbilityMismatchFlag);
Magic Number,PKHeX.Core,AbilityVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\AbilityVerifier.cs,IsAbilityCapsuleModified,The following statement contains a magic number: pkm.Format < 6
Magic Number,PKHeX.Core,AbilityVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\AbilityVerifier.cs,IsAbilityCapsuleModified,The following statement contains a magic number: pkm.AbilityNumber == 4
Magic Number,PKHeX.Core,AbilityVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\AbilityVerifier.cs,IsAbilityCapsuleModified,The following statement contains a magic number: EncounterAbility == 4
Magic Number,PKHeX.Core,BallVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\BallVerifier.cs,Verify,The following statement contains a magic number: data.pkm.Format <= 2
Magic Number,PKHeX.Core,BallVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\BallVerifier.cs,VerifyBall,The following statement contains a magic number: pkm.Species == 292 && Info.Generation > 3
Magic Number,PKHeX.Core,BallVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\BallVerifier.cs,VerifyBall,The following statement contains a magic number: pkm.Species == 292 && Info.Generation > 3
Magic Number,PKHeX.Core,BallVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\BallVerifier.cs,VerifyBallMysteryGift,The following statement contains a magic number: g.Generation == 4 && g.Species == 490 && g.Ball == 0
Magic Number,PKHeX.Core,BallVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\BallVerifier.cs,VerifyBallMysteryGift,The following statement contains a magic number: g.Generation == 4 && g.Species == 490 && g.Ball == 0
Magic Number,PKHeX.Core,BallVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\BallVerifier.cs,VerifyBallStatic,The following statement contains a magic number: s.Location == 75 && s.Generation == 5
Magic Number,PKHeX.Core,BallVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\BallVerifier.cs,VerifyBallStatic,The following statement contains a magic number: s.Location == 75 && s.Generation == 5
Magic Number,PKHeX.Core,BallVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\BallVerifier.cs,VerifyBallWild,The following statement contains a magic number: w.Location == 30016 && w.Generation == 7
Magic Number,PKHeX.Core,BallVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\BallVerifier.cs,VerifyBallWild,The following statement contains a magic number: w.Location == 30016 && w.Generation == 7
Magic Number,PKHeX.Core,BallVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\BallVerifier.cs,VerifyBallWild,The following statement contains a magic number: 3 <= Info.Generation && Info.Generation <= 4 && w.Type.IsSafariType()
Magic Number,PKHeX.Core,BallVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\BallVerifier.cs,VerifyBallWild,The following statement contains a magic number: 3 <= Info.Generation && Info.Generation <= 4 && w.Type.IsSafariType()
Magic Number,PKHeX.Core,BallVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\BallVerifier.cs,VerifyBallWild,The following statement contains a magic number: Info.Generation == 4 && w.Type == SlotType.BugContest
Magic Number,PKHeX.Core,BallVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\BallVerifier.cs,VerifyBallEgg,The following statement contains a magic number: data.Info.Generation < 6
Magic Number,PKHeX.Core,BallVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\BallVerifier.cs,VerifyBallInherited,The following statement contains a magic number: return data.Info.Generation switch              {                  6 => VerifyBallEggGen6(data)' // Gen6 Inheritance Rules                  7 => VerifyBallEggGen7(data)' // Gen7 Inheritance Rules                  8 => VerifyBallEggGen8(data)'                  _ => NONE              };
Magic Number,PKHeX.Core,BallVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\BallVerifier.cs,VerifyBallInherited,The following statement contains a magic number: return data.Info.Generation switch              {                  6 => VerifyBallEggGen6(data)' // Gen6 Inheritance Rules                  7 => VerifyBallEggGen7(data)' // Gen7 Inheritance Rules                  8 => VerifyBallEggGen8(data)'                  _ => NONE              };
Magic Number,PKHeX.Core,BallVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\BallVerifier.cs,VerifyBallInherited,The following statement contains a magic number: return data.Info.Generation switch              {                  6 => VerifyBallEggGen6(data)' // Gen6 Inheritance Rules                  7 => VerifyBallEggGen7(data)' // Gen7 Inheritance Rules                  8 => VerifyBallEggGen8(data)'                  _ => NONE              };
Magic Number,PKHeX.Core,BallVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\BallVerifier.cs,VerifyBallEggGen6,The following statement contains a magic number: pkm.Gender == 2 || Legal.BreedMaleOnly.Contains(species)
Magic Number,PKHeX.Core,BallVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\BallVerifier.cs,VerifyBallEggGen6,The following statement contains a magic number: pkm.AbilityNumber == 4
Magic Number,PKHeX.Core,BallVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\BallVerifier.cs,VerifyBallEggGen6,The following statement contains a magic number: pkm.AbilityNumber == 4
Magic Number,PKHeX.Core,BallVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\BallVerifier.cs,VerifyBallEggGen6,The following statement contains a magic number: pkm.AbilityNumber == 4
Magic Number,PKHeX.Core,BallVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\BallVerifier.cs,VerifyBallEggGen6,The following statement contains a magic number: pkm.AbilityNumber == 4 && Legal.Ban_DreamHidden.Contains(species)
Magic Number,PKHeX.Core,BallVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\BallVerifier.cs,VerifyBallEggGen6,The following statement contains a magic number: pkm.AbilityNumber == 4 && Legal.Ban_Gen3BallHidden.Contains(pkm.SpecForm)
Magic Number,PKHeX.Core,BallVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\BallVerifier.cs,VerifyBallEggGen6,The following statement contains a magic number: species > 650 && species != 700
Magic Number,PKHeX.Core,BallVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\BallVerifier.cs,VerifyBallEggGen6,The following statement contains a magic number: species > 650 && species != 700
Magic Number,PKHeX.Core,BallVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\BallVerifier.cs,VerifyBallEggGen7,The following statement contains a magic number: 722 <= species && species <= 730
Magic Number,PKHeX.Core,BallVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\BallVerifier.cs,VerifyBallEggGen7,The following statement contains a magic number: 722 <= species && species <= 730
Magic Number,PKHeX.Core,BallVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\BallVerifier.cs,VerifyBallEggGen7,The following statement contains a magic number: pkm.AbilityNumber == 4 && Legal.Ban_SafariBallHidden_7.Contains(species)
Magic Number,PKHeX.Core,BallVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\BallVerifier.cs,VerifyBallEggGen7,The following statement contains a magic number: pkm.AbilityNumber == 4 && Legal.Ban_NoHidden7Apricorn.Contains(species | pkm.AltForm << 11)
Magic Number,PKHeX.Core,BallVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\BallVerifier.cs,VerifyBallEggGen7,The following statement contains a magic number: pkm.AbilityNumber == 4 && Legal.Ban_NoHidden7Apricorn.Contains(species | pkm.AltForm << 11)
Magic Number,PKHeX.Core,BallVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\BallVerifier.cs,VerifyBallEggGen7,The following statement contains a magic number: pkm.AbilityNumber == 4 && (species == 313 || species == 314)
Magic Number,PKHeX.Core,BallVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\BallVerifier.cs,VerifyBallEggGen7,The following statement contains a magic number: pkm.AbilityNumber == 4 && (species == 313 || species == 314)
Magic Number,PKHeX.Core,BallVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\BallVerifier.cs,VerifyBallEggGen7,The following statement contains a magic number: pkm.AbilityNumber == 4 && (species == 313 || species == 314)
Magic Number,PKHeX.Core,BallVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\BallVerifier.cs,VerifyBallEggGen7,The following statement contains a magic number: species == 669 && pkm.AltForm == 3 && pkm.AbilityNumber == 4
Magic Number,PKHeX.Core,BallVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\BallVerifier.cs,VerifyBallEggGen7,The following statement contains a magic number: species == 669 && pkm.AltForm == 3 && pkm.AbilityNumber == 4
Magic Number,PKHeX.Core,BallVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\BallVerifier.cs,VerifyBallEggGen7,The following statement contains a magic number: species == 669 && pkm.AltForm == 3 && pkm.AbilityNumber == 4
Magic Number,PKHeX.Core,BallVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\BallVerifier.cs,VerifyBallEggGen7,The following statement contains a magic number: (species > 731 && species <= 785) || (Legal.AlolanCaptureOffspring.Contains(species) && !Legal.PastGenAlolanNativesUncapturable.Contains(species))
Magic Number,PKHeX.Core,BallVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\BallVerifier.cs,VerifyBallEggGen7,The following statement contains a magic number: (species > 731 && species <= 785) || (Legal.AlolanCaptureOffspring.Contains(species) && !Legal.PastGenAlolanNativesUncapturable.Contains(species))
Magic Number,PKHeX.Core,BallVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\BallVerifier.cs,VerifyBallEggGen7,The following statement contains a magic number: species > 721
Magic Number,PKHeX.Core,BallVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\BallVerifier.cs,VerifyBallEggGen8,The following statement contains a magic number: 810 <= species && species <= 818
Magic Number,PKHeX.Core,BallVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\BallVerifier.cs,VerifyBallEggGen8,The following statement contains a magic number: 810 <= species && species <= 818
Magic Number,PKHeX.Core,BallVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\BallVerifier.cs,VerifyBallEggGen8,The following statement contains a magic number: pkm.AbilityNumber == 4 && Legal.Ban_SafariBallHidden_7.Contains(species)
Magic Number,PKHeX.Core,BallVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\BallVerifier.cs,VerifyBallEggGen8,The following statement contains a magic number: pkm.AbilityNumber == 4 && Legal.Ban_NoHidden7Apricorn.Contains(species | pkm.AltForm << 11)
Magic Number,PKHeX.Core,BallVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\BallVerifier.cs,VerifyBallEggGen8,The following statement contains a magic number: pkm.AbilityNumber == 4 && Legal.Ban_NoHidden7Apricorn.Contains(species | pkm.AltForm << 11)
Magic Number,PKHeX.Core,BallVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\BallVerifier.cs,VerifyBallEggGen8,The following statement contains a magic number: pkm.AbilityNumber == 4 && (species == 313 || species == 314)
Magic Number,PKHeX.Core,BallVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\BallVerifier.cs,VerifyBallEggGen8,The following statement contains a magic number: pkm.AbilityNumber == 4 && (species == 313 || species == 314)
Magic Number,PKHeX.Core,BallVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\BallVerifier.cs,VerifyBallEggGen8,The following statement contains a magic number: pkm.AbilityNumber == 4 && (species == 313 || species == 314)
Magic Number,PKHeX.Core,BallVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\BallVerifier.cs,VerifyBallEggGen8,The following statement contains a magic number: species == 669 && pkm.AltForm == 3 && pkm.AbilityNumber == 4
Magic Number,PKHeX.Core,BallVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\BallVerifier.cs,VerifyBallEggGen8,The following statement contains a magic number: species == 669 && pkm.AltForm == 3 && pkm.AbilityNumber == 4
Magic Number,PKHeX.Core,BallVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\BallVerifier.cs,VerifyBallEggGen8,The following statement contains a magic number: species == 669 && pkm.AltForm == 3 && pkm.AbilityNumber == 4
Magic Number,PKHeX.Core,BallVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\BallVerifier.cs,VerifyBallEggGen8,The following statement contains a magic number: (species > 731 && species <= 785) || (Legal.AlolanCaptureOffspring.Contains(species) && !Legal.PastGenAlolanNativesUncapturable.Contains(species))
Magic Number,PKHeX.Core,BallVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\BallVerifier.cs,VerifyBallEggGen8,The following statement contains a magic number: (species > 731 && species <= 785) || (Legal.AlolanCaptureOffspring.Contains(species) && !Legal.PastGenAlolanNativesUncapturable.Contains(species))
Magic Number,PKHeX.Core,BallVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\BallVerifier.cs,VerifyBallEggGen8,The following statement contains a magic number: species > 721
Magic Number,PKHeX.Core,BallVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\BallVerifier.cs,IsGalarCapture,The following statement contains a magic number: 810 <= species && species <= 818
Magic Number,PKHeX.Core,BallVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\BallVerifier.cs,IsGalarCapture,The following statement contains a magic number: 810 <= species && species <= 818
Magic Number,PKHeX.Core,BallVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\BallVerifier.cs,IsGalarCapture,The following statement contains a magic number: 880 <= species && species <= 883
Magic Number,PKHeX.Core,BallVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\BallVerifier.cs,IsGalarCapture,The following statement contains a magic number: 880 <= species && species <= 883
Magic Number,PKHeX.Core,ConsoleRegionVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\ConsoleRegionVerifier.cs,VerifyConsoleRegion,The following statement contains a magic number: consoleRegion >= 7
Magic Number,PKHeX.Core,ConsoleRegionVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\ConsoleRegionVerifier.cs,VerifyConsoleRegion,The following statement contains a magic number: gen >= 8 || pkm.GG
Magic Number,PKHeX.Core,EffortValueVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\EffortValueVerifier.cs,Verify,The following statement contains a magic number: format < 3
Magic Number,PKHeX.Core,EffortValueVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\EffortValueVerifier.cs,Verify,The following statement contains a magic number: sum > 510
Magic Number,PKHeX.Core,EffortValueVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\EffortValueVerifier.cs,Verify,The following statement contains a magic number: format >= 6 && evs.Any(ev => ev > 252)
Magic Number,PKHeX.Core,EffortValueVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\EffortValueVerifier.cs,Verify,The following statement contains a magic number: format >= 6 && evs.Any(ev => ev > 252)
Magic Number,PKHeX.Core,EffortValueVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\EffortValueVerifier.cs,Verify,The following statement contains a magic number: const int vitaMax = 100;
Magic Number,PKHeX.Core,EffortValueVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\EffortValueVerifier.cs,Verify,The following statement contains a magic number: EncounterMatch.LevelMin == 100
Magic Number,PKHeX.Core,EffortValueVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\EffortValueVerifier.cs,Verify,The following statement contains a magic number: format < 5
Magic Number,PKHeX.Core,EffortValueVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\EffortValueVerifier.cs,VerifyAwakenedValues,The following statement contains a magic number: data.AddLine(GetInvalid(string.Format(LAwakenedShouldBeValue' 2)));
Magic Number,PKHeX.Core,EffortValueVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\EffortValueVerifier.cs,VerifyAwakenedValues,The following statement contains a magic number: EncounterMatch is EncounterSlot s && s.Type == SlotType.GoPark && Enumerable.Range(0' 6).Select(awakened.GetAV).Any(z => z < 2)
Magic Number,PKHeX.Core,EffortValueVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\EffortValueVerifier.cs,VerifyAwakenedValues,The following statement contains a magic number: EncounterMatch is EncounterSlot s && s.Type == SlotType.GoPark && Enumerable.Range(0' 6).Select(awakened.GetAV).Any(z => z < 2)
Magic Number,PKHeX.Core,FormVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\FormVerifier.cs,Verify,The following statement contains a magic number: pkm.Format < 4
Magic Number,PKHeX.Core,FormVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\FormVerifier.cs,VerifyForm,The following statement contains a magic number: switch (pkm.Species)              {                  case (int)Species.Pikachu when Info.Generation == 6: // Cosplay                      bool isStatic = EncounterMatch is EncounterStatic;                      if (isStatic != (pkm.AltForm != 0))                          return GetInvalid(isStatic ? LFormPikachuCosplayInvalid : LFormPikachuCosplay);                      break;                    case (int)Species.Pikachu when Info.Generation == 7: // Cap                      bool IsValidPikachuCap()                      {                          return EncounterMatch switch                          {                              WC7 wc7 => (wc7.Form == pkm.AltForm)'                              EncounterStatic s => (s.Form == pkm.AltForm)'                              _ => (pkm.AltForm == 0)                          };                      }                        if (!IsValidPikachuCap())                      {                          bool gift = EncounterMatch is WC7 g && g.Form != pkm.AltForm;                          var msg = gift ? LFormPikachuEventInvalid : LFormInvalidGame;                          return GetInvalid(msg);                      }                      break;                  case (int)Species.Unown when Info.Generation == 2 && pkm.AltForm >= 26:                      return GetInvalid(string.Format(LFormInvalidRange' "Z"' pkm.AltForm == 26 ? "!" : "?"));                  case (int)Species.Giratina when pkm.AltForm == 1 ^ pkm.HeldItem == 112: // Giratina' Origin form only with Griseous Orb                      return GetInvalid(LFormItemInvalid);                    case (int)Species.Arceus:                      {                          int form = GetArceusFormFromHeldItem(pkm.HeldItem' pkm.Format);                          return form != pkm.AltForm ? GetInvalid(LFormItemInvalid) : GetValid(LFormItem);                      }                  case (int)Species.Keldeo:                  {                      if (pkm.Gen5) // can mismatch in gen5 via BW tutor and transfer up                          break;                      int index = Array.IndexOf(pkm.Moves' 548); // Secret Sword                      bool noSword = index < 0;                      if (pkm.AltForm == 0 ^ noSword) // mismatch                          Info.Moves[noSword ? 0 : index] = new CheckMoveResult(Info.Moves[noSword ? 0 : index]' Severity.Invalid' LMoveKeldeoMismatch' CheckIdentifier.Move);                      break;                  }                  case (int)Species.Genesect:                      {                          int form = GetGenesectFormFromHeldItem(pkm.HeldItem);                          return form != pkm.AltForm ? GetInvalid(LFormItemInvalid) : GetValid(LFormItem);                      }                  case (int)Species.Greninja:                      if (pkm.AltForm > 1) // Ash Battle Bond active                          return GetInvalid(LFormBattle);                      if (pkm.AltForm != 0 && !(EncounterMatch is MysteryGift)) // Formes are not breedable' MysteryGift already checked                          return GetInvalid(string.Format(LFormInvalidRange' 0' pkm.AltForm));                      break;                    case (int)Species.Scatterbug:                  case (int)Species.Spewpa:                      if (pkm.AltForm > 17) // Fancy & Pokéball                          return GetInvalid(LFormVivillonEventPre);                      if (!Legal.CheckVivillonPattern(pkm.AltForm' (byte)pkm.Country' (byte)pkm.Region))                          data.AddLine(Get(LFormVivillonInvalid' Severity.Fishy));                      break;                  case (int)Species.Vivillon:                      if (pkm.AltForm > 17) // Fancy & Pokéball                      {                          if (!(EncounterMatch is MysteryGift))                              return GetInvalid(LFormVivillonInvalid);                          return GetValid(LFormVivillon);                      }                      if (!Legal.CheckVivillonPattern(pkm.AltForm' (byte)pkm.Country' (byte)pkm.Region))                          data.AddLine(Get(LFormVivillonInvalid' Severity.Fishy));                      break;                    case (int)Species.Floette when pkm.AltForm == 5: // Floette Eternal Flower -- Never Released                      if (!(EncounterMatch is MysteryGift))                          return GetInvalid(LFormEternalInvalid);                      return GetValid(LFormEternal);                  case (int)Species.Meowstic when pkm.AltForm != pkm.Gender:                      return GetInvalid(LGenderInvalidNone);                    case (int)Species.Silvally:                      {                          int form = GetSilvallyFormFromHeldItem(pkm.HeldItem);                          return form != pkm.AltForm ? GetInvalid(LFormItemInvalid) : GetValid(LFormItem);                      }                    case (int)Species.Lillipup when Info.EncounterMatch.EggEncounter && pkm.AltForm == 1 && pkm.SM:                  case (int)Species.Lycanroc when Info.EncounterMatch.EggEncounter && pkm.AltForm == 2 && pkm.SM:                      return GetInvalid(LFormInvalidGame);                    // Impossible Egg forms                  case (int)Species.Rotom when pkm.IsEgg && pkm.AltForm != 0:                  case (int)Species.Furfrou when pkm.IsEgg && pkm.AltForm != 0:                      return GetInvalid(LEggSpecies);                    // Party Only Forms                  case (int)Species.Shaymin:                  case (int)Species.Furfrou:                  case (int)Species.Hoopa:                      if (pkm.AltForm != 0 && pkm.Box > -1 && pkm.Format <= 6) // has form but stored in box                          return GetInvalid(LFormParty);                      break;                    // Battle only Forms with other legal forms allowed                  case (int)Species.Zygarde when pkm.AltForm >= 4: // Zygarde Complete                  case (int)Species.Minior when pkm.AltForm < 7: // Minior Shield                  case (int)Species.Necrozma when pkm.AltForm == 3: // Ultra Necrozma                      return GetInvalid(LFormBattle);                  case (int)Species.Necrozma when pkm.AltForm < 3: // Necrozma Fused forms & default                  case (int)Species.Mimikyu when pkm.AltForm == 2: // Totem disguise Mimikyu                      return VALID;              }
Magic Number,PKHeX.Core,FormVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\FormVerifier.cs,VerifyForm,The following statement contains a magic number: switch (pkm.Species)              {                  case (int)Species.Pikachu when Info.Generation == 6: // Cosplay                      bool isStatic = EncounterMatch is EncounterStatic;                      if (isStatic != (pkm.AltForm != 0))                          return GetInvalid(isStatic ? LFormPikachuCosplayInvalid : LFormPikachuCosplay);                      break;                    case (int)Species.Pikachu when Info.Generation == 7: // Cap                      bool IsValidPikachuCap()                      {                          return EncounterMatch switch                          {                              WC7 wc7 => (wc7.Form == pkm.AltForm)'                              EncounterStatic s => (s.Form == pkm.AltForm)'                              _ => (pkm.AltForm == 0)                          };                      }                        if (!IsValidPikachuCap())                      {                          bool gift = EncounterMatch is WC7 g && g.Form != pkm.AltForm;                          var msg = gift ? LFormPikachuEventInvalid : LFormInvalidGame;                          return GetInvalid(msg);                      }                      break;                  case (int)Species.Unown when Info.Generation == 2 && pkm.AltForm >= 26:                      return GetInvalid(string.Format(LFormInvalidRange' "Z"' pkm.AltForm == 26 ? "!" : "?"));                  case (int)Species.Giratina when pkm.AltForm == 1 ^ pkm.HeldItem == 112: // Giratina' Origin form only with Griseous Orb                      return GetInvalid(LFormItemInvalid);                    case (int)Species.Arceus:                      {                          int form = GetArceusFormFromHeldItem(pkm.HeldItem' pkm.Format);                          return form != pkm.AltForm ? GetInvalid(LFormItemInvalid) : GetValid(LFormItem);                      }                  case (int)Species.Keldeo:                  {                      if (pkm.Gen5) // can mismatch in gen5 via BW tutor and transfer up                          break;                      int index = Array.IndexOf(pkm.Moves' 548); // Secret Sword                      bool noSword = index < 0;                      if (pkm.AltForm == 0 ^ noSword) // mismatch                          Info.Moves[noSword ? 0 : index] = new CheckMoveResult(Info.Moves[noSword ? 0 : index]' Severity.Invalid' LMoveKeldeoMismatch' CheckIdentifier.Move);                      break;                  }                  case (int)Species.Genesect:                      {                          int form = GetGenesectFormFromHeldItem(pkm.HeldItem);                          return form != pkm.AltForm ? GetInvalid(LFormItemInvalid) : GetValid(LFormItem);                      }                  case (int)Species.Greninja:                      if (pkm.AltForm > 1) // Ash Battle Bond active                          return GetInvalid(LFormBattle);                      if (pkm.AltForm != 0 && !(EncounterMatch is MysteryGift)) // Formes are not breedable' MysteryGift already checked                          return GetInvalid(string.Format(LFormInvalidRange' 0' pkm.AltForm));                      break;                    case (int)Species.Scatterbug:                  case (int)Species.Spewpa:                      if (pkm.AltForm > 17) // Fancy & Pokéball                          return GetInvalid(LFormVivillonEventPre);                      if (!Legal.CheckVivillonPattern(pkm.AltForm' (byte)pkm.Country' (byte)pkm.Region))                          data.AddLine(Get(LFormVivillonInvalid' Severity.Fishy));                      break;                  case (int)Species.Vivillon:                      if (pkm.AltForm > 17) // Fancy & Pokéball                      {                          if (!(EncounterMatch is MysteryGift))                              return GetInvalid(LFormVivillonInvalid);                          return GetValid(LFormVivillon);                      }                      if (!Legal.CheckVivillonPattern(pkm.AltForm' (byte)pkm.Country' (byte)pkm.Region))                          data.AddLine(Get(LFormVivillonInvalid' Severity.Fishy));                      break;                    case (int)Species.Floette when pkm.AltForm == 5: // Floette Eternal Flower -- Never Released                      if (!(EncounterMatch is MysteryGift))                          return GetInvalid(LFormEternalInvalid);                      return GetValid(LFormEternal);                  case (int)Species.Meowstic when pkm.AltForm != pkm.Gender:                      return GetInvalid(LGenderInvalidNone);                    case (int)Species.Silvally:                      {                          int form = GetSilvallyFormFromHeldItem(pkm.HeldItem);                          return form != pkm.AltForm ? GetInvalid(LFormItemInvalid) : GetValid(LFormItem);                      }                    case (int)Species.Lillipup when Info.EncounterMatch.EggEncounter && pkm.AltForm == 1 && pkm.SM:                  case (int)Species.Lycanroc when Info.EncounterMatch.EggEncounter && pkm.AltForm == 2 && pkm.SM:                      return GetInvalid(LFormInvalidGame);                    // Impossible Egg forms                  case (int)Species.Rotom when pkm.IsEgg && pkm.AltForm != 0:                  case (int)Species.Furfrou when pkm.IsEgg && pkm.AltForm != 0:                      return GetInvalid(LEggSpecies);                    // Party Only Forms                  case (int)Species.Shaymin:                  case (int)Species.Furfrou:                  case (int)Species.Hoopa:                      if (pkm.AltForm != 0 && pkm.Box > -1 && pkm.Format <= 6) // has form but stored in box                          return GetInvalid(LFormParty);                      break;                    // Battle only Forms with other legal forms allowed                  case (int)Species.Zygarde when pkm.AltForm >= 4: // Zygarde Complete                  case (int)Species.Minior when pkm.AltForm < 7: // Minior Shield                  case (int)Species.Necrozma when pkm.AltForm == 3: // Ultra Necrozma                      return GetInvalid(LFormBattle);                  case (int)Species.Necrozma when pkm.AltForm < 3: // Necrozma Fused forms & default                  case (int)Species.Mimikyu when pkm.AltForm == 2: // Totem disguise Mimikyu                      return VALID;              }
Magic Number,PKHeX.Core,FormVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\FormVerifier.cs,VerifyForm,The following statement contains a magic number: switch (pkm.Species)              {                  case (int)Species.Pikachu when Info.Generation == 6: // Cosplay                      bool isStatic = EncounterMatch is EncounterStatic;                      if (isStatic != (pkm.AltForm != 0))                          return GetInvalid(isStatic ? LFormPikachuCosplayInvalid : LFormPikachuCosplay);                      break;                    case (int)Species.Pikachu when Info.Generation == 7: // Cap                      bool IsValidPikachuCap()                      {                          return EncounterMatch switch                          {                              WC7 wc7 => (wc7.Form == pkm.AltForm)'                              EncounterStatic s => (s.Form == pkm.AltForm)'                              _ => (pkm.AltForm == 0)                          };                      }                        if (!IsValidPikachuCap())                      {                          bool gift = EncounterMatch is WC7 g && g.Form != pkm.AltForm;                          var msg = gift ? LFormPikachuEventInvalid : LFormInvalidGame;                          return GetInvalid(msg);                      }                      break;                  case (int)Species.Unown when Info.Generation == 2 && pkm.AltForm >= 26:                      return GetInvalid(string.Format(LFormInvalidRange' "Z"' pkm.AltForm == 26 ? "!" : "?"));                  case (int)Species.Giratina when pkm.AltForm == 1 ^ pkm.HeldItem == 112: // Giratina' Origin form only with Griseous Orb                      return GetInvalid(LFormItemInvalid);                    case (int)Species.Arceus:                      {                          int form = GetArceusFormFromHeldItem(pkm.HeldItem' pkm.Format);                          return form != pkm.AltForm ? GetInvalid(LFormItemInvalid) : GetValid(LFormItem);                      }                  case (int)Species.Keldeo:                  {                      if (pkm.Gen5) // can mismatch in gen5 via BW tutor and transfer up                          break;                      int index = Array.IndexOf(pkm.Moves' 548); // Secret Sword                      bool noSword = index < 0;                      if (pkm.AltForm == 0 ^ noSword) // mismatch                          Info.Moves[noSword ? 0 : index] = new CheckMoveResult(Info.Moves[noSword ? 0 : index]' Severity.Invalid' LMoveKeldeoMismatch' CheckIdentifier.Move);                      break;                  }                  case (int)Species.Genesect:                      {                          int form = GetGenesectFormFromHeldItem(pkm.HeldItem);                          return form != pkm.AltForm ? GetInvalid(LFormItemInvalid) : GetValid(LFormItem);                      }                  case (int)Species.Greninja:                      if (pkm.AltForm > 1) // Ash Battle Bond active                          return GetInvalid(LFormBattle);                      if (pkm.AltForm != 0 && !(EncounterMatch is MysteryGift)) // Formes are not breedable' MysteryGift already checked                          return GetInvalid(string.Format(LFormInvalidRange' 0' pkm.AltForm));                      break;                    case (int)Species.Scatterbug:                  case (int)Species.Spewpa:                      if (pkm.AltForm > 17) // Fancy & Pokéball                          return GetInvalid(LFormVivillonEventPre);                      if (!Legal.CheckVivillonPattern(pkm.AltForm' (byte)pkm.Country' (byte)pkm.Region))                          data.AddLine(Get(LFormVivillonInvalid' Severity.Fishy));                      break;                  case (int)Species.Vivillon:                      if (pkm.AltForm > 17) // Fancy & Pokéball                      {                          if (!(EncounterMatch is MysteryGift))                              return GetInvalid(LFormVivillonInvalid);                          return GetValid(LFormVivillon);                      }                      if (!Legal.CheckVivillonPattern(pkm.AltForm' (byte)pkm.Country' (byte)pkm.Region))                          data.AddLine(Get(LFormVivillonInvalid' Severity.Fishy));                      break;                    case (int)Species.Floette when pkm.AltForm == 5: // Floette Eternal Flower -- Never Released                      if (!(EncounterMatch is MysteryGift))                          return GetInvalid(LFormEternalInvalid);                      return GetValid(LFormEternal);                  case (int)Species.Meowstic when pkm.AltForm != pkm.Gender:                      return GetInvalid(LGenderInvalidNone);                    case (int)Species.Silvally:                      {                          int form = GetSilvallyFormFromHeldItem(pkm.HeldItem);                          return form != pkm.AltForm ? GetInvalid(LFormItemInvalid) : GetValid(LFormItem);                      }                    case (int)Species.Lillipup when Info.EncounterMatch.EggEncounter && pkm.AltForm == 1 && pkm.SM:                  case (int)Species.Lycanroc when Info.EncounterMatch.EggEncounter && pkm.AltForm == 2 && pkm.SM:                      return GetInvalid(LFormInvalidGame);                    // Impossible Egg forms                  case (int)Species.Rotom when pkm.IsEgg && pkm.AltForm != 0:                  case (int)Species.Furfrou when pkm.IsEgg && pkm.AltForm != 0:                      return GetInvalid(LEggSpecies);                    // Party Only Forms                  case (int)Species.Shaymin:                  case (int)Species.Furfrou:                  case (int)Species.Hoopa:                      if (pkm.AltForm != 0 && pkm.Box > -1 && pkm.Format <= 6) // has form but stored in box                          return GetInvalid(LFormParty);                      break;                    // Battle only Forms with other legal forms allowed                  case (int)Species.Zygarde when pkm.AltForm >= 4: // Zygarde Complete                  case (int)Species.Minior when pkm.AltForm < 7: // Minior Shield                  case (int)Species.Necrozma when pkm.AltForm == 3: // Ultra Necrozma                      return GetInvalid(LFormBattle);                  case (int)Species.Necrozma when pkm.AltForm < 3: // Necrozma Fused forms & default                  case (int)Species.Mimikyu when pkm.AltForm == 2: // Totem disguise Mimikyu                      return VALID;              }
Magic Number,PKHeX.Core,FormVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\FormVerifier.cs,VerifyForm,The following statement contains a magic number: switch (pkm.Species)              {                  case (int)Species.Pikachu when Info.Generation == 6: // Cosplay                      bool isStatic = EncounterMatch is EncounterStatic;                      if (isStatic != (pkm.AltForm != 0))                          return GetInvalid(isStatic ? LFormPikachuCosplayInvalid : LFormPikachuCosplay);                      break;                    case (int)Species.Pikachu when Info.Generation == 7: // Cap                      bool IsValidPikachuCap()                      {                          return EncounterMatch switch                          {                              WC7 wc7 => (wc7.Form == pkm.AltForm)'                              EncounterStatic s => (s.Form == pkm.AltForm)'                              _ => (pkm.AltForm == 0)                          };                      }                        if (!IsValidPikachuCap())                      {                          bool gift = EncounterMatch is WC7 g && g.Form != pkm.AltForm;                          var msg = gift ? LFormPikachuEventInvalid : LFormInvalidGame;                          return GetInvalid(msg);                      }                      break;                  case (int)Species.Unown when Info.Generation == 2 && pkm.AltForm >= 26:                      return GetInvalid(string.Format(LFormInvalidRange' "Z"' pkm.AltForm == 26 ? "!" : "?"));                  case (int)Species.Giratina when pkm.AltForm == 1 ^ pkm.HeldItem == 112: // Giratina' Origin form only with Griseous Orb                      return GetInvalid(LFormItemInvalid);                    case (int)Species.Arceus:                      {                          int form = GetArceusFormFromHeldItem(pkm.HeldItem' pkm.Format);                          return form != pkm.AltForm ? GetInvalid(LFormItemInvalid) : GetValid(LFormItem);                      }                  case (int)Species.Keldeo:                  {                      if (pkm.Gen5) // can mismatch in gen5 via BW tutor and transfer up                          break;                      int index = Array.IndexOf(pkm.Moves' 548); // Secret Sword                      bool noSword = index < 0;                      if (pkm.AltForm == 0 ^ noSword) // mismatch                          Info.Moves[noSword ? 0 : index] = new CheckMoveResult(Info.Moves[noSword ? 0 : index]' Severity.Invalid' LMoveKeldeoMismatch' CheckIdentifier.Move);                      break;                  }                  case (int)Species.Genesect:                      {                          int form = GetGenesectFormFromHeldItem(pkm.HeldItem);                          return form != pkm.AltForm ? GetInvalid(LFormItemInvalid) : GetValid(LFormItem);                      }                  case (int)Species.Greninja:                      if (pkm.AltForm > 1) // Ash Battle Bond active                          return GetInvalid(LFormBattle);                      if (pkm.AltForm != 0 && !(EncounterMatch is MysteryGift)) // Formes are not breedable' MysteryGift already checked                          return GetInvalid(string.Format(LFormInvalidRange' 0' pkm.AltForm));                      break;                    case (int)Species.Scatterbug:                  case (int)Species.Spewpa:                      if (pkm.AltForm > 17) // Fancy & Pokéball                          return GetInvalid(LFormVivillonEventPre);                      if (!Legal.CheckVivillonPattern(pkm.AltForm' (byte)pkm.Country' (byte)pkm.Region))                          data.AddLine(Get(LFormVivillonInvalid' Severity.Fishy));                      break;                  case (int)Species.Vivillon:                      if (pkm.AltForm > 17) // Fancy & Pokéball                      {                          if (!(EncounterMatch is MysteryGift))                              return GetInvalid(LFormVivillonInvalid);                          return GetValid(LFormVivillon);                      }                      if (!Legal.CheckVivillonPattern(pkm.AltForm' (byte)pkm.Country' (byte)pkm.Region))                          data.AddLine(Get(LFormVivillonInvalid' Severity.Fishy));                      break;                    case (int)Species.Floette when pkm.AltForm == 5: // Floette Eternal Flower -- Never Released                      if (!(EncounterMatch is MysteryGift))                          return GetInvalid(LFormEternalInvalid);                      return GetValid(LFormEternal);                  case (int)Species.Meowstic when pkm.AltForm != pkm.Gender:                      return GetInvalid(LGenderInvalidNone);                    case (int)Species.Silvally:                      {                          int form = GetSilvallyFormFromHeldItem(pkm.HeldItem);                          return form != pkm.AltForm ? GetInvalid(LFormItemInvalid) : GetValid(LFormItem);                      }                    case (int)Species.Lillipup when Info.EncounterMatch.EggEncounter && pkm.AltForm == 1 && pkm.SM:                  case (int)Species.Lycanroc when Info.EncounterMatch.EggEncounter && pkm.AltForm == 2 && pkm.SM:                      return GetInvalid(LFormInvalidGame);                    // Impossible Egg forms                  case (int)Species.Rotom when pkm.IsEgg && pkm.AltForm != 0:                  case (int)Species.Furfrou when pkm.IsEgg && pkm.AltForm != 0:                      return GetInvalid(LEggSpecies);                    // Party Only Forms                  case (int)Species.Shaymin:                  case (int)Species.Furfrou:                  case (int)Species.Hoopa:                      if (pkm.AltForm != 0 && pkm.Box > -1 && pkm.Format <= 6) // has form but stored in box                          return GetInvalid(LFormParty);                      break;                    // Battle only Forms with other legal forms allowed                  case (int)Species.Zygarde when pkm.AltForm >= 4: // Zygarde Complete                  case (int)Species.Minior when pkm.AltForm < 7: // Minior Shield                  case (int)Species.Necrozma when pkm.AltForm == 3: // Ultra Necrozma                      return GetInvalid(LFormBattle);                  case (int)Species.Necrozma when pkm.AltForm < 3: // Necrozma Fused forms & default                  case (int)Species.Mimikyu when pkm.AltForm == 2: // Totem disguise Mimikyu                      return VALID;              }
Magic Number,PKHeX.Core,FormVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\FormVerifier.cs,VerifyForm,The following statement contains a magic number: switch (pkm.Species)              {                  case (int)Species.Pikachu when Info.Generation == 6: // Cosplay                      bool isStatic = EncounterMatch is EncounterStatic;                      if (isStatic != (pkm.AltForm != 0))                          return GetInvalid(isStatic ? LFormPikachuCosplayInvalid : LFormPikachuCosplay);                      break;                    case (int)Species.Pikachu when Info.Generation == 7: // Cap                      bool IsValidPikachuCap()                      {                          return EncounterMatch switch                          {                              WC7 wc7 => (wc7.Form == pkm.AltForm)'                              EncounterStatic s => (s.Form == pkm.AltForm)'                              _ => (pkm.AltForm == 0)                          };                      }                        if (!IsValidPikachuCap())                      {                          bool gift = EncounterMatch is WC7 g && g.Form != pkm.AltForm;                          var msg = gift ? LFormPikachuEventInvalid : LFormInvalidGame;                          return GetInvalid(msg);                      }                      break;                  case (int)Species.Unown when Info.Generation == 2 && pkm.AltForm >= 26:                      return GetInvalid(string.Format(LFormInvalidRange' "Z"' pkm.AltForm == 26 ? "!" : "?"));                  case (int)Species.Giratina when pkm.AltForm == 1 ^ pkm.HeldItem == 112: // Giratina' Origin form only with Griseous Orb                      return GetInvalid(LFormItemInvalid);                    case (int)Species.Arceus:                      {                          int form = GetArceusFormFromHeldItem(pkm.HeldItem' pkm.Format);                          return form != pkm.AltForm ? GetInvalid(LFormItemInvalid) : GetValid(LFormItem);                      }                  case (int)Species.Keldeo:                  {                      if (pkm.Gen5) // can mismatch in gen5 via BW tutor and transfer up                          break;                      int index = Array.IndexOf(pkm.Moves' 548); // Secret Sword                      bool noSword = index < 0;                      if (pkm.AltForm == 0 ^ noSword) // mismatch                          Info.Moves[noSword ? 0 : index] = new CheckMoveResult(Info.Moves[noSword ? 0 : index]' Severity.Invalid' LMoveKeldeoMismatch' CheckIdentifier.Move);                      break;                  }                  case (int)Species.Genesect:                      {                          int form = GetGenesectFormFromHeldItem(pkm.HeldItem);                          return form != pkm.AltForm ? GetInvalid(LFormItemInvalid) : GetValid(LFormItem);                      }                  case (int)Species.Greninja:                      if (pkm.AltForm > 1) // Ash Battle Bond active                          return GetInvalid(LFormBattle);                      if (pkm.AltForm != 0 && !(EncounterMatch is MysteryGift)) // Formes are not breedable' MysteryGift already checked                          return GetInvalid(string.Format(LFormInvalidRange' 0' pkm.AltForm));                      break;                    case (int)Species.Scatterbug:                  case (int)Species.Spewpa:                      if (pkm.AltForm > 17) // Fancy & Pokéball                          return GetInvalid(LFormVivillonEventPre);                      if (!Legal.CheckVivillonPattern(pkm.AltForm' (byte)pkm.Country' (byte)pkm.Region))                          data.AddLine(Get(LFormVivillonInvalid' Severity.Fishy));                      break;                  case (int)Species.Vivillon:                      if (pkm.AltForm > 17) // Fancy & Pokéball                      {                          if (!(EncounterMatch is MysteryGift))                              return GetInvalid(LFormVivillonInvalid);                          return GetValid(LFormVivillon);                      }                      if (!Legal.CheckVivillonPattern(pkm.AltForm' (byte)pkm.Country' (byte)pkm.Region))                          data.AddLine(Get(LFormVivillonInvalid' Severity.Fishy));                      break;                    case (int)Species.Floette when pkm.AltForm == 5: // Floette Eternal Flower -- Never Released                      if (!(EncounterMatch is MysteryGift))                          return GetInvalid(LFormEternalInvalid);                      return GetValid(LFormEternal);                  case (int)Species.Meowstic when pkm.AltForm != pkm.Gender:                      return GetInvalid(LGenderInvalidNone);                    case (int)Species.Silvally:                      {                          int form = GetSilvallyFormFromHeldItem(pkm.HeldItem);                          return form != pkm.AltForm ? GetInvalid(LFormItemInvalid) : GetValid(LFormItem);                      }                    case (int)Species.Lillipup when Info.EncounterMatch.EggEncounter && pkm.AltForm == 1 && pkm.SM:                  case (int)Species.Lycanroc when Info.EncounterMatch.EggEncounter && pkm.AltForm == 2 && pkm.SM:                      return GetInvalid(LFormInvalidGame);                    // Impossible Egg forms                  case (int)Species.Rotom when pkm.IsEgg && pkm.AltForm != 0:                  case (int)Species.Furfrou when pkm.IsEgg && pkm.AltForm != 0:                      return GetInvalid(LEggSpecies);                    // Party Only Forms                  case (int)Species.Shaymin:                  case (int)Species.Furfrou:                  case (int)Species.Hoopa:                      if (pkm.AltForm != 0 && pkm.Box > -1 && pkm.Format <= 6) // has form but stored in box                          return GetInvalid(LFormParty);                      break;                    // Battle only Forms with other legal forms allowed                  case (int)Species.Zygarde when pkm.AltForm >= 4: // Zygarde Complete                  case (int)Species.Minior when pkm.AltForm < 7: // Minior Shield                  case (int)Species.Necrozma when pkm.AltForm == 3: // Ultra Necrozma                      return GetInvalid(LFormBattle);                  case (int)Species.Necrozma when pkm.AltForm < 3: // Necrozma Fused forms & default                  case (int)Species.Mimikyu when pkm.AltForm == 2: // Totem disguise Mimikyu                      return VALID;              }
Magic Number,PKHeX.Core,FormVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\FormVerifier.cs,VerifyForm,The following statement contains a magic number: switch (pkm.Species)              {                  case (int)Species.Pikachu when Info.Generation == 6: // Cosplay                      bool isStatic = EncounterMatch is EncounterStatic;                      if (isStatic != (pkm.AltForm != 0))                          return GetInvalid(isStatic ? LFormPikachuCosplayInvalid : LFormPikachuCosplay);                      break;                    case (int)Species.Pikachu when Info.Generation == 7: // Cap                      bool IsValidPikachuCap()                      {                          return EncounterMatch switch                          {                              WC7 wc7 => (wc7.Form == pkm.AltForm)'                              EncounterStatic s => (s.Form == pkm.AltForm)'                              _ => (pkm.AltForm == 0)                          };                      }                        if (!IsValidPikachuCap())                      {                          bool gift = EncounterMatch is WC7 g && g.Form != pkm.AltForm;                          var msg = gift ? LFormPikachuEventInvalid : LFormInvalidGame;                          return GetInvalid(msg);                      }                      break;                  case (int)Species.Unown when Info.Generation == 2 && pkm.AltForm >= 26:                      return GetInvalid(string.Format(LFormInvalidRange' "Z"' pkm.AltForm == 26 ? "!" : "?"));                  case (int)Species.Giratina when pkm.AltForm == 1 ^ pkm.HeldItem == 112: // Giratina' Origin form only with Griseous Orb                      return GetInvalid(LFormItemInvalid);                    case (int)Species.Arceus:                      {                          int form = GetArceusFormFromHeldItem(pkm.HeldItem' pkm.Format);                          return form != pkm.AltForm ? GetInvalid(LFormItemInvalid) : GetValid(LFormItem);                      }                  case (int)Species.Keldeo:                  {                      if (pkm.Gen5) // can mismatch in gen5 via BW tutor and transfer up                          break;                      int index = Array.IndexOf(pkm.Moves' 548); // Secret Sword                      bool noSword = index < 0;                      if (pkm.AltForm == 0 ^ noSword) // mismatch                          Info.Moves[noSword ? 0 : index] = new CheckMoveResult(Info.Moves[noSword ? 0 : index]' Severity.Invalid' LMoveKeldeoMismatch' CheckIdentifier.Move);                      break;                  }                  case (int)Species.Genesect:                      {                          int form = GetGenesectFormFromHeldItem(pkm.HeldItem);                          return form != pkm.AltForm ? GetInvalid(LFormItemInvalid) : GetValid(LFormItem);                      }                  case (int)Species.Greninja:                      if (pkm.AltForm > 1) // Ash Battle Bond active                          return GetInvalid(LFormBattle);                      if (pkm.AltForm != 0 && !(EncounterMatch is MysteryGift)) // Formes are not breedable' MysteryGift already checked                          return GetInvalid(string.Format(LFormInvalidRange' 0' pkm.AltForm));                      break;                    case (int)Species.Scatterbug:                  case (int)Species.Spewpa:                      if (pkm.AltForm > 17) // Fancy & Pokéball                          return GetInvalid(LFormVivillonEventPre);                      if (!Legal.CheckVivillonPattern(pkm.AltForm' (byte)pkm.Country' (byte)pkm.Region))                          data.AddLine(Get(LFormVivillonInvalid' Severity.Fishy));                      break;                  case (int)Species.Vivillon:                      if (pkm.AltForm > 17) // Fancy & Pokéball                      {                          if (!(EncounterMatch is MysteryGift))                              return GetInvalid(LFormVivillonInvalid);                          return GetValid(LFormVivillon);                      }                      if (!Legal.CheckVivillonPattern(pkm.AltForm' (byte)pkm.Country' (byte)pkm.Region))                          data.AddLine(Get(LFormVivillonInvalid' Severity.Fishy));                      break;                    case (int)Species.Floette when pkm.AltForm == 5: // Floette Eternal Flower -- Never Released                      if (!(EncounterMatch is MysteryGift))                          return GetInvalid(LFormEternalInvalid);                      return GetValid(LFormEternal);                  case (int)Species.Meowstic when pkm.AltForm != pkm.Gender:                      return GetInvalid(LGenderInvalidNone);                    case (int)Species.Silvally:                      {                          int form = GetSilvallyFormFromHeldItem(pkm.HeldItem);                          return form != pkm.AltForm ? GetInvalid(LFormItemInvalid) : GetValid(LFormItem);                      }                    case (int)Species.Lillipup when Info.EncounterMatch.EggEncounter && pkm.AltForm == 1 && pkm.SM:                  case (int)Species.Lycanroc when Info.EncounterMatch.EggEncounter && pkm.AltForm == 2 && pkm.SM:                      return GetInvalid(LFormInvalidGame);                    // Impossible Egg forms                  case (int)Species.Rotom when pkm.IsEgg && pkm.AltForm != 0:                  case (int)Species.Furfrou when pkm.IsEgg && pkm.AltForm != 0:                      return GetInvalid(LEggSpecies);                    // Party Only Forms                  case (int)Species.Shaymin:                  case (int)Species.Furfrou:                  case (int)Species.Hoopa:                      if (pkm.AltForm != 0 && pkm.Box > -1 && pkm.Format <= 6) // has form but stored in box                          return GetInvalid(LFormParty);                      break;                    // Battle only Forms with other legal forms allowed                  case (int)Species.Zygarde when pkm.AltForm >= 4: // Zygarde Complete                  case (int)Species.Minior when pkm.AltForm < 7: // Minior Shield                  case (int)Species.Necrozma when pkm.AltForm == 3: // Ultra Necrozma                      return GetInvalid(LFormBattle);                  case (int)Species.Necrozma when pkm.AltForm < 3: // Necrozma Fused forms & default                  case (int)Species.Mimikyu when pkm.AltForm == 2: // Totem disguise Mimikyu                      return VALID;              }
Magic Number,PKHeX.Core,FormVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\FormVerifier.cs,VerifyForm,The following statement contains a magic number: switch (pkm.Species)              {                  case (int)Species.Pikachu when Info.Generation == 6: // Cosplay                      bool isStatic = EncounterMatch is EncounterStatic;                      if (isStatic != (pkm.AltForm != 0))                          return GetInvalid(isStatic ? LFormPikachuCosplayInvalid : LFormPikachuCosplay);                      break;                    case (int)Species.Pikachu when Info.Generation == 7: // Cap                      bool IsValidPikachuCap()                      {                          return EncounterMatch switch                          {                              WC7 wc7 => (wc7.Form == pkm.AltForm)'                              EncounterStatic s => (s.Form == pkm.AltForm)'                              _ => (pkm.AltForm == 0)                          };                      }                        if (!IsValidPikachuCap())                      {                          bool gift = EncounterMatch is WC7 g && g.Form != pkm.AltForm;                          var msg = gift ? LFormPikachuEventInvalid : LFormInvalidGame;                          return GetInvalid(msg);                      }                      break;                  case (int)Species.Unown when Info.Generation == 2 && pkm.AltForm >= 26:                      return GetInvalid(string.Format(LFormInvalidRange' "Z"' pkm.AltForm == 26 ? "!" : "?"));                  case (int)Species.Giratina when pkm.AltForm == 1 ^ pkm.HeldItem == 112: // Giratina' Origin form only with Griseous Orb                      return GetInvalid(LFormItemInvalid);                    case (int)Species.Arceus:                      {                          int form = GetArceusFormFromHeldItem(pkm.HeldItem' pkm.Format);                          return form != pkm.AltForm ? GetInvalid(LFormItemInvalid) : GetValid(LFormItem);                      }                  case (int)Species.Keldeo:                  {                      if (pkm.Gen5) // can mismatch in gen5 via BW tutor and transfer up                          break;                      int index = Array.IndexOf(pkm.Moves' 548); // Secret Sword                      bool noSword = index < 0;                      if (pkm.AltForm == 0 ^ noSword) // mismatch                          Info.Moves[noSword ? 0 : index] = new CheckMoveResult(Info.Moves[noSword ? 0 : index]' Severity.Invalid' LMoveKeldeoMismatch' CheckIdentifier.Move);                      break;                  }                  case (int)Species.Genesect:                      {                          int form = GetGenesectFormFromHeldItem(pkm.HeldItem);                          return form != pkm.AltForm ? GetInvalid(LFormItemInvalid) : GetValid(LFormItem);                      }                  case (int)Species.Greninja:                      if (pkm.AltForm > 1) // Ash Battle Bond active                          return GetInvalid(LFormBattle);                      if (pkm.AltForm != 0 && !(EncounterMatch is MysteryGift)) // Formes are not breedable' MysteryGift already checked                          return GetInvalid(string.Format(LFormInvalidRange' 0' pkm.AltForm));                      break;                    case (int)Species.Scatterbug:                  case (int)Species.Spewpa:                      if (pkm.AltForm > 17) // Fancy & Pokéball                          return GetInvalid(LFormVivillonEventPre);                      if (!Legal.CheckVivillonPattern(pkm.AltForm' (byte)pkm.Country' (byte)pkm.Region))                          data.AddLine(Get(LFormVivillonInvalid' Severity.Fishy));                      break;                  case (int)Species.Vivillon:                      if (pkm.AltForm > 17) // Fancy & Pokéball                      {                          if (!(EncounterMatch is MysteryGift))                              return GetInvalid(LFormVivillonInvalid);                          return GetValid(LFormVivillon);                      }                      if (!Legal.CheckVivillonPattern(pkm.AltForm' (byte)pkm.Country' (byte)pkm.Region))                          data.AddLine(Get(LFormVivillonInvalid' Severity.Fishy));                      break;                    case (int)Species.Floette when pkm.AltForm == 5: // Floette Eternal Flower -- Never Released                      if (!(EncounterMatch is MysteryGift))                          return GetInvalid(LFormEternalInvalid);                      return GetValid(LFormEternal);                  case (int)Species.Meowstic when pkm.AltForm != pkm.Gender:                      return GetInvalid(LGenderInvalidNone);                    case (int)Species.Silvally:                      {                          int form = GetSilvallyFormFromHeldItem(pkm.HeldItem);                          return form != pkm.AltForm ? GetInvalid(LFormItemInvalid) : GetValid(LFormItem);                      }                    case (int)Species.Lillipup when Info.EncounterMatch.EggEncounter && pkm.AltForm == 1 && pkm.SM:                  case (int)Species.Lycanroc when Info.EncounterMatch.EggEncounter && pkm.AltForm == 2 && pkm.SM:                      return GetInvalid(LFormInvalidGame);                    // Impossible Egg forms                  case (int)Species.Rotom when pkm.IsEgg && pkm.AltForm != 0:                  case (int)Species.Furfrou when pkm.IsEgg && pkm.AltForm != 0:                      return GetInvalid(LEggSpecies);                    // Party Only Forms                  case (int)Species.Shaymin:                  case (int)Species.Furfrou:                  case (int)Species.Hoopa:                      if (pkm.AltForm != 0 && pkm.Box > -1 && pkm.Format <= 6) // has form but stored in box                          return GetInvalid(LFormParty);                      break;                    // Battle only Forms with other legal forms allowed                  case (int)Species.Zygarde when pkm.AltForm >= 4: // Zygarde Complete                  case (int)Species.Minior when pkm.AltForm < 7: // Minior Shield                  case (int)Species.Necrozma when pkm.AltForm == 3: // Ultra Necrozma                      return GetInvalid(LFormBattle);                  case (int)Species.Necrozma when pkm.AltForm < 3: // Necrozma Fused forms & default                  case (int)Species.Mimikyu when pkm.AltForm == 2: // Totem disguise Mimikyu                      return VALID;              }
Magic Number,PKHeX.Core,FormVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\FormVerifier.cs,VerifyForm,The following statement contains a magic number: switch (pkm.Species)              {                  case (int)Species.Pikachu when Info.Generation == 6: // Cosplay                      bool isStatic = EncounterMatch is EncounterStatic;                      if (isStatic != (pkm.AltForm != 0))                          return GetInvalid(isStatic ? LFormPikachuCosplayInvalid : LFormPikachuCosplay);                      break;                    case (int)Species.Pikachu when Info.Generation == 7: // Cap                      bool IsValidPikachuCap()                      {                          return EncounterMatch switch                          {                              WC7 wc7 => (wc7.Form == pkm.AltForm)'                              EncounterStatic s => (s.Form == pkm.AltForm)'                              _ => (pkm.AltForm == 0)                          };                      }                        if (!IsValidPikachuCap())                      {                          bool gift = EncounterMatch is WC7 g && g.Form != pkm.AltForm;                          var msg = gift ? LFormPikachuEventInvalid : LFormInvalidGame;                          return GetInvalid(msg);                      }                      break;                  case (int)Species.Unown when Info.Generation == 2 && pkm.AltForm >= 26:                      return GetInvalid(string.Format(LFormInvalidRange' "Z"' pkm.AltForm == 26 ? "!" : "?"));                  case (int)Species.Giratina when pkm.AltForm == 1 ^ pkm.HeldItem == 112: // Giratina' Origin form only with Griseous Orb                      return GetInvalid(LFormItemInvalid);                    case (int)Species.Arceus:                      {                          int form = GetArceusFormFromHeldItem(pkm.HeldItem' pkm.Format);                          return form != pkm.AltForm ? GetInvalid(LFormItemInvalid) : GetValid(LFormItem);                      }                  case (int)Species.Keldeo:                  {                      if (pkm.Gen5) // can mismatch in gen5 via BW tutor and transfer up                          break;                      int index = Array.IndexOf(pkm.Moves' 548); // Secret Sword                      bool noSword = index < 0;                      if (pkm.AltForm == 0 ^ noSword) // mismatch                          Info.Moves[noSword ? 0 : index] = new CheckMoveResult(Info.Moves[noSword ? 0 : index]' Severity.Invalid' LMoveKeldeoMismatch' CheckIdentifier.Move);                      break;                  }                  case (int)Species.Genesect:                      {                          int form = GetGenesectFormFromHeldItem(pkm.HeldItem);                          return form != pkm.AltForm ? GetInvalid(LFormItemInvalid) : GetValid(LFormItem);                      }                  case (int)Species.Greninja:                      if (pkm.AltForm > 1) // Ash Battle Bond active                          return GetInvalid(LFormBattle);                      if (pkm.AltForm != 0 && !(EncounterMatch is MysteryGift)) // Formes are not breedable' MysteryGift already checked                          return GetInvalid(string.Format(LFormInvalidRange' 0' pkm.AltForm));                      break;                    case (int)Species.Scatterbug:                  case (int)Species.Spewpa:                      if (pkm.AltForm > 17) // Fancy & Pokéball                          return GetInvalid(LFormVivillonEventPre);                      if (!Legal.CheckVivillonPattern(pkm.AltForm' (byte)pkm.Country' (byte)pkm.Region))                          data.AddLine(Get(LFormVivillonInvalid' Severity.Fishy));                      break;                  case (int)Species.Vivillon:                      if (pkm.AltForm > 17) // Fancy & Pokéball                      {                          if (!(EncounterMatch is MysteryGift))                              return GetInvalid(LFormVivillonInvalid);                          return GetValid(LFormVivillon);                      }                      if (!Legal.CheckVivillonPattern(pkm.AltForm' (byte)pkm.Country' (byte)pkm.Region))                          data.AddLine(Get(LFormVivillonInvalid' Severity.Fishy));                      break;                    case (int)Species.Floette when pkm.AltForm == 5: // Floette Eternal Flower -- Never Released                      if (!(EncounterMatch is MysteryGift))                          return GetInvalid(LFormEternalInvalid);                      return GetValid(LFormEternal);                  case (int)Species.Meowstic when pkm.AltForm != pkm.Gender:                      return GetInvalid(LGenderInvalidNone);                    case (int)Species.Silvally:                      {                          int form = GetSilvallyFormFromHeldItem(pkm.HeldItem);                          return form != pkm.AltForm ? GetInvalid(LFormItemInvalid) : GetValid(LFormItem);                      }                    case (int)Species.Lillipup when Info.EncounterMatch.EggEncounter && pkm.AltForm == 1 && pkm.SM:                  case (int)Species.Lycanroc when Info.EncounterMatch.EggEncounter && pkm.AltForm == 2 && pkm.SM:                      return GetInvalid(LFormInvalidGame);                    // Impossible Egg forms                  case (int)Species.Rotom when pkm.IsEgg && pkm.AltForm != 0:                  case (int)Species.Furfrou when pkm.IsEgg && pkm.AltForm != 0:                      return GetInvalid(LEggSpecies);                    // Party Only Forms                  case (int)Species.Shaymin:                  case (int)Species.Furfrou:                  case (int)Species.Hoopa:                      if (pkm.AltForm != 0 && pkm.Box > -1 && pkm.Format <= 6) // has form but stored in box                          return GetInvalid(LFormParty);                      break;                    // Battle only Forms with other legal forms allowed                  case (int)Species.Zygarde when pkm.AltForm >= 4: // Zygarde Complete                  case (int)Species.Minior when pkm.AltForm < 7: // Minior Shield                  case (int)Species.Necrozma when pkm.AltForm == 3: // Ultra Necrozma                      return GetInvalid(LFormBattle);                  case (int)Species.Necrozma when pkm.AltForm < 3: // Necrozma Fused forms & default                  case (int)Species.Mimikyu when pkm.AltForm == 2: // Totem disguise Mimikyu                      return VALID;              }
Magic Number,PKHeX.Core,FormVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\FormVerifier.cs,VerifyForm,The following statement contains a magic number: switch (pkm.Species)              {                  case (int)Species.Pikachu when Info.Generation == 6: // Cosplay                      bool isStatic = EncounterMatch is EncounterStatic;                      if (isStatic != (pkm.AltForm != 0))                          return GetInvalid(isStatic ? LFormPikachuCosplayInvalid : LFormPikachuCosplay);                      break;                    case (int)Species.Pikachu when Info.Generation == 7: // Cap                      bool IsValidPikachuCap()                      {                          return EncounterMatch switch                          {                              WC7 wc7 => (wc7.Form == pkm.AltForm)'                              EncounterStatic s => (s.Form == pkm.AltForm)'                              _ => (pkm.AltForm == 0)                          };                      }                        if (!IsValidPikachuCap())                      {                          bool gift = EncounterMatch is WC7 g && g.Form != pkm.AltForm;                          var msg = gift ? LFormPikachuEventInvalid : LFormInvalidGame;                          return GetInvalid(msg);                      }                      break;                  case (int)Species.Unown when Info.Generation == 2 && pkm.AltForm >= 26:                      return GetInvalid(string.Format(LFormInvalidRange' "Z"' pkm.AltForm == 26 ? "!" : "?"));                  case (int)Species.Giratina when pkm.AltForm == 1 ^ pkm.HeldItem == 112: // Giratina' Origin form only with Griseous Orb                      return GetInvalid(LFormItemInvalid);                    case (int)Species.Arceus:                      {                          int form = GetArceusFormFromHeldItem(pkm.HeldItem' pkm.Format);                          return form != pkm.AltForm ? GetInvalid(LFormItemInvalid) : GetValid(LFormItem);                      }                  case (int)Species.Keldeo:                  {                      if (pkm.Gen5) // can mismatch in gen5 via BW tutor and transfer up                          break;                      int index = Array.IndexOf(pkm.Moves' 548); // Secret Sword                      bool noSword = index < 0;                      if (pkm.AltForm == 0 ^ noSword) // mismatch                          Info.Moves[noSword ? 0 : index] = new CheckMoveResult(Info.Moves[noSword ? 0 : index]' Severity.Invalid' LMoveKeldeoMismatch' CheckIdentifier.Move);                      break;                  }                  case (int)Species.Genesect:                      {                          int form = GetGenesectFormFromHeldItem(pkm.HeldItem);                          return form != pkm.AltForm ? GetInvalid(LFormItemInvalid) : GetValid(LFormItem);                      }                  case (int)Species.Greninja:                      if (pkm.AltForm > 1) // Ash Battle Bond active                          return GetInvalid(LFormBattle);                      if (pkm.AltForm != 0 && !(EncounterMatch is MysteryGift)) // Formes are not breedable' MysteryGift already checked                          return GetInvalid(string.Format(LFormInvalidRange' 0' pkm.AltForm));                      break;                    case (int)Species.Scatterbug:                  case (int)Species.Spewpa:                      if (pkm.AltForm > 17) // Fancy & Pokéball                          return GetInvalid(LFormVivillonEventPre);                      if (!Legal.CheckVivillonPattern(pkm.AltForm' (byte)pkm.Country' (byte)pkm.Region))                          data.AddLine(Get(LFormVivillonInvalid' Severity.Fishy));                      break;                  case (int)Species.Vivillon:                      if (pkm.AltForm > 17) // Fancy & Pokéball                      {                          if (!(EncounterMatch is MysteryGift))                              return GetInvalid(LFormVivillonInvalid);                          return GetValid(LFormVivillon);                      }                      if (!Legal.CheckVivillonPattern(pkm.AltForm' (byte)pkm.Country' (byte)pkm.Region))                          data.AddLine(Get(LFormVivillonInvalid' Severity.Fishy));                      break;                    case (int)Species.Floette when pkm.AltForm == 5: // Floette Eternal Flower -- Never Released                      if (!(EncounterMatch is MysteryGift))                          return GetInvalid(LFormEternalInvalid);                      return GetValid(LFormEternal);                  case (int)Species.Meowstic when pkm.AltForm != pkm.Gender:                      return GetInvalid(LGenderInvalidNone);                    case (int)Species.Silvally:                      {                          int form = GetSilvallyFormFromHeldItem(pkm.HeldItem);                          return form != pkm.AltForm ? GetInvalid(LFormItemInvalid) : GetValid(LFormItem);                      }                    case (int)Species.Lillipup when Info.EncounterMatch.EggEncounter && pkm.AltForm == 1 && pkm.SM:                  case (int)Species.Lycanroc when Info.EncounterMatch.EggEncounter && pkm.AltForm == 2 && pkm.SM:                      return GetInvalid(LFormInvalidGame);                    // Impossible Egg forms                  case (int)Species.Rotom when pkm.IsEgg && pkm.AltForm != 0:                  case (int)Species.Furfrou when pkm.IsEgg && pkm.AltForm != 0:                      return GetInvalid(LEggSpecies);                    // Party Only Forms                  case (int)Species.Shaymin:                  case (int)Species.Furfrou:                  case (int)Species.Hoopa:                      if (pkm.AltForm != 0 && pkm.Box > -1 && pkm.Format <= 6) // has form but stored in box                          return GetInvalid(LFormParty);                      break;                    // Battle only Forms with other legal forms allowed                  case (int)Species.Zygarde when pkm.AltForm >= 4: // Zygarde Complete                  case (int)Species.Minior when pkm.AltForm < 7: // Minior Shield                  case (int)Species.Necrozma when pkm.AltForm == 3: // Ultra Necrozma                      return GetInvalid(LFormBattle);                  case (int)Species.Necrozma when pkm.AltForm < 3: // Necrozma Fused forms & default                  case (int)Species.Mimikyu when pkm.AltForm == 2: // Totem disguise Mimikyu                      return VALID;              }
Magic Number,PKHeX.Core,FormVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\FormVerifier.cs,VerifyForm,The following statement contains a magic number: switch (pkm.Species)              {                  case (int)Species.Pikachu when Info.Generation == 6: // Cosplay                      bool isStatic = EncounterMatch is EncounterStatic;                      if (isStatic != (pkm.AltForm != 0))                          return GetInvalid(isStatic ? LFormPikachuCosplayInvalid : LFormPikachuCosplay);                      break;                    case (int)Species.Pikachu when Info.Generation == 7: // Cap                      bool IsValidPikachuCap()                      {                          return EncounterMatch switch                          {                              WC7 wc7 => (wc7.Form == pkm.AltForm)'                              EncounterStatic s => (s.Form == pkm.AltForm)'                              _ => (pkm.AltForm == 0)                          };                      }                        if (!IsValidPikachuCap())                      {                          bool gift = EncounterMatch is WC7 g && g.Form != pkm.AltForm;                          var msg = gift ? LFormPikachuEventInvalid : LFormInvalidGame;                          return GetInvalid(msg);                      }                      break;                  case (int)Species.Unown when Info.Generation == 2 && pkm.AltForm >= 26:                      return GetInvalid(string.Format(LFormInvalidRange' "Z"' pkm.AltForm == 26 ? "!" : "?"));                  case (int)Species.Giratina when pkm.AltForm == 1 ^ pkm.HeldItem == 112: // Giratina' Origin form only with Griseous Orb                      return GetInvalid(LFormItemInvalid);                    case (int)Species.Arceus:                      {                          int form = GetArceusFormFromHeldItem(pkm.HeldItem' pkm.Format);                          return form != pkm.AltForm ? GetInvalid(LFormItemInvalid) : GetValid(LFormItem);                      }                  case (int)Species.Keldeo:                  {                      if (pkm.Gen5) // can mismatch in gen5 via BW tutor and transfer up                          break;                      int index = Array.IndexOf(pkm.Moves' 548); // Secret Sword                      bool noSword = index < 0;                      if (pkm.AltForm == 0 ^ noSword) // mismatch                          Info.Moves[noSword ? 0 : index] = new CheckMoveResult(Info.Moves[noSword ? 0 : index]' Severity.Invalid' LMoveKeldeoMismatch' CheckIdentifier.Move);                      break;                  }                  case (int)Species.Genesect:                      {                          int form = GetGenesectFormFromHeldItem(pkm.HeldItem);                          return form != pkm.AltForm ? GetInvalid(LFormItemInvalid) : GetValid(LFormItem);                      }                  case (int)Species.Greninja:                      if (pkm.AltForm > 1) // Ash Battle Bond active                          return GetInvalid(LFormBattle);                      if (pkm.AltForm != 0 && !(EncounterMatch is MysteryGift)) // Formes are not breedable' MysteryGift already checked                          return GetInvalid(string.Format(LFormInvalidRange' 0' pkm.AltForm));                      break;                    case (int)Species.Scatterbug:                  case (int)Species.Spewpa:                      if (pkm.AltForm > 17) // Fancy & Pokéball                          return GetInvalid(LFormVivillonEventPre);                      if (!Legal.CheckVivillonPattern(pkm.AltForm' (byte)pkm.Country' (byte)pkm.Region))                          data.AddLine(Get(LFormVivillonInvalid' Severity.Fishy));                      break;                  case (int)Species.Vivillon:                      if (pkm.AltForm > 17) // Fancy & Pokéball                      {                          if (!(EncounterMatch is MysteryGift))                              return GetInvalid(LFormVivillonInvalid);                          return GetValid(LFormVivillon);                      }                      if (!Legal.CheckVivillonPattern(pkm.AltForm' (byte)pkm.Country' (byte)pkm.Region))                          data.AddLine(Get(LFormVivillonInvalid' Severity.Fishy));                      break;                    case (int)Species.Floette when pkm.AltForm == 5: // Floette Eternal Flower -- Never Released                      if (!(EncounterMatch is MysteryGift))                          return GetInvalid(LFormEternalInvalid);                      return GetValid(LFormEternal);                  case (int)Species.Meowstic when pkm.AltForm != pkm.Gender:                      return GetInvalid(LGenderInvalidNone);                    case (int)Species.Silvally:                      {                          int form = GetSilvallyFormFromHeldItem(pkm.HeldItem);                          return form != pkm.AltForm ? GetInvalid(LFormItemInvalid) : GetValid(LFormItem);                      }                    case (int)Species.Lillipup when Info.EncounterMatch.EggEncounter && pkm.AltForm == 1 && pkm.SM:                  case (int)Species.Lycanroc when Info.EncounterMatch.EggEncounter && pkm.AltForm == 2 && pkm.SM:                      return GetInvalid(LFormInvalidGame);                    // Impossible Egg forms                  case (int)Species.Rotom when pkm.IsEgg && pkm.AltForm != 0:                  case (int)Species.Furfrou when pkm.IsEgg && pkm.AltForm != 0:                      return GetInvalid(LEggSpecies);                    // Party Only Forms                  case (int)Species.Shaymin:                  case (int)Species.Furfrou:                  case (int)Species.Hoopa:                      if (pkm.AltForm != 0 && pkm.Box > -1 && pkm.Format <= 6) // has form but stored in box                          return GetInvalid(LFormParty);                      break;                    // Battle only Forms with other legal forms allowed                  case (int)Species.Zygarde when pkm.AltForm >= 4: // Zygarde Complete                  case (int)Species.Minior when pkm.AltForm < 7: // Minior Shield                  case (int)Species.Necrozma when pkm.AltForm == 3: // Ultra Necrozma                      return GetInvalid(LFormBattle);                  case (int)Species.Necrozma when pkm.AltForm < 3: // Necrozma Fused forms & default                  case (int)Species.Mimikyu when pkm.AltForm == 2: // Totem disguise Mimikyu                      return VALID;              }
Magic Number,PKHeX.Core,FormVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\FormVerifier.cs,VerifyForm,The following statement contains a magic number: switch (pkm.Species)              {                  case (int)Species.Pikachu when Info.Generation == 6: // Cosplay                      bool isStatic = EncounterMatch is EncounterStatic;                      if (isStatic != (pkm.AltForm != 0))                          return GetInvalid(isStatic ? LFormPikachuCosplayInvalid : LFormPikachuCosplay);                      break;                    case (int)Species.Pikachu when Info.Generation == 7: // Cap                      bool IsValidPikachuCap()                      {                          return EncounterMatch switch                          {                              WC7 wc7 => (wc7.Form == pkm.AltForm)'                              EncounterStatic s => (s.Form == pkm.AltForm)'                              _ => (pkm.AltForm == 0)                          };                      }                        if (!IsValidPikachuCap())                      {                          bool gift = EncounterMatch is WC7 g && g.Form != pkm.AltForm;                          var msg = gift ? LFormPikachuEventInvalid : LFormInvalidGame;                          return GetInvalid(msg);                      }                      break;                  case (int)Species.Unown when Info.Generation == 2 && pkm.AltForm >= 26:                      return GetInvalid(string.Format(LFormInvalidRange' "Z"' pkm.AltForm == 26 ? "!" : "?"));                  case (int)Species.Giratina when pkm.AltForm == 1 ^ pkm.HeldItem == 112: // Giratina' Origin form only with Griseous Orb                      return GetInvalid(LFormItemInvalid);                    case (int)Species.Arceus:                      {                          int form = GetArceusFormFromHeldItem(pkm.HeldItem' pkm.Format);                          return form != pkm.AltForm ? GetInvalid(LFormItemInvalid) : GetValid(LFormItem);                      }                  case (int)Species.Keldeo:                  {                      if (pkm.Gen5) // can mismatch in gen5 via BW tutor and transfer up                          break;                      int index = Array.IndexOf(pkm.Moves' 548); // Secret Sword                      bool noSword = index < 0;                      if (pkm.AltForm == 0 ^ noSword) // mismatch                          Info.Moves[noSword ? 0 : index] = new CheckMoveResult(Info.Moves[noSword ? 0 : index]' Severity.Invalid' LMoveKeldeoMismatch' CheckIdentifier.Move);                      break;                  }                  case (int)Species.Genesect:                      {                          int form = GetGenesectFormFromHeldItem(pkm.HeldItem);                          return form != pkm.AltForm ? GetInvalid(LFormItemInvalid) : GetValid(LFormItem);                      }                  case (int)Species.Greninja:                      if (pkm.AltForm > 1) // Ash Battle Bond active                          return GetInvalid(LFormBattle);                      if (pkm.AltForm != 0 && !(EncounterMatch is MysteryGift)) // Formes are not breedable' MysteryGift already checked                          return GetInvalid(string.Format(LFormInvalidRange' 0' pkm.AltForm));                      break;                    case (int)Species.Scatterbug:                  case (int)Species.Spewpa:                      if (pkm.AltForm > 17) // Fancy & Pokéball                          return GetInvalid(LFormVivillonEventPre);                      if (!Legal.CheckVivillonPattern(pkm.AltForm' (byte)pkm.Country' (byte)pkm.Region))                          data.AddLine(Get(LFormVivillonInvalid' Severity.Fishy));                      break;                  case (int)Species.Vivillon:                      if (pkm.AltForm > 17) // Fancy & Pokéball                      {                          if (!(EncounterMatch is MysteryGift))                              return GetInvalid(LFormVivillonInvalid);                          return GetValid(LFormVivillon);                      }                      if (!Legal.CheckVivillonPattern(pkm.AltForm' (byte)pkm.Country' (byte)pkm.Region))                          data.AddLine(Get(LFormVivillonInvalid' Severity.Fishy));                      break;                    case (int)Species.Floette when pkm.AltForm == 5: // Floette Eternal Flower -- Never Released                      if (!(EncounterMatch is MysteryGift))                          return GetInvalid(LFormEternalInvalid);                      return GetValid(LFormEternal);                  case (int)Species.Meowstic when pkm.AltForm != pkm.Gender:                      return GetInvalid(LGenderInvalidNone);                    case (int)Species.Silvally:                      {                          int form = GetSilvallyFormFromHeldItem(pkm.HeldItem);                          return form != pkm.AltForm ? GetInvalid(LFormItemInvalid) : GetValid(LFormItem);                      }                    case (int)Species.Lillipup when Info.EncounterMatch.EggEncounter && pkm.AltForm == 1 && pkm.SM:                  case (int)Species.Lycanroc when Info.EncounterMatch.EggEncounter && pkm.AltForm == 2 && pkm.SM:                      return GetInvalid(LFormInvalidGame);                    // Impossible Egg forms                  case (int)Species.Rotom when pkm.IsEgg && pkm.AltForm != 0:                  case (int)Species.Furfrou when pkm.IsEgg && pkm.AltForm != 0:                      return GetInvalid(LEggSpecies);                    // Party Only Forms                  case (int)Species.Shaymin:                  case (int)Species.Furfrou:                  case (int)Species.Hoopa:                      if (pkm.AltForm != 0 && pkm.Box > -1 && pkm.Format <= 6) // has form but stored in box                          return GetInvalid(LFormParty);                      break;                    // Battle only Forms with other legal forms allowed                  case (int)Species.Zygarde when pkm.AltForm >= 4: // Zygarde Complete                  case (int)Species.Minior when pkm.AltForm < 7: // Minior Shield                  case (int)Species.Necrozma when pkm.AltForm == 3: // Ultra Necrozma                      return GetInvalid(LFormBattle);                  case (int)Species.Necrozma when pkm.AltForm < 3: // Necrozma Fused forms & default                  case (int)Species.Mimikyu when pkm.AltForm == 2: // Totem disguise Mimikyu                      return VALID;              }
Magic Number,PKHeX.Core,FormVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\FormVerifier.cs,VerifyForm,The following statement contains a magic number: switch (pkm.Species)              {                  case (int)Species.Pikachu when Info.Generation == 6: // Cosplay                      bool isStatic = EncounterMatch is EncounterStatic;                      if (isStatic != (pkm.AltForm != 0))                          return GetInvalid(isStatic ? LFormPikachuCosplayInvalid : LFormPikachuCosplay);                      break;                    case (int)Species.Pikachu when Info.Generation == 7: // Cap                      bool IsValidPikachuCap()                      {                          return EncounterMatch switch                          {                              WC7 wc7 => (wc7.Form == pkm.AltForm)'                              EncounterStatic s => (s.Form == pkm.AltForm)'                              _ => (pkm.AltForm == 0)                          };                      }                        if (!IsValidPikachuCap())                      {                          bool gift = EncounterMatch is WC7 g && g.Form != pkm.AltForm;                          var msg = gift ? LFormPikachuEventInvalid : LFormInvalidGame;                          return GetInvalid(msg);                      }                      break;                  case (int)Species.Unown when Info.Generation == 2 && pkm.AltForm >= 26:                      return GetInvalid(string.Format(LFormInvalidRange' "Z"' pkm.AltForm == 26 ? "!" : "?"));                  case (int)Species.Giratina when pkm.AltForm == 1 ^ pkm.HeldItem == 112: // Giratina' Origin form only with Griseous Orb                      return GetInvalid(LFormItemInvalid);                    case (int)Species.Arceus:                      {                          int form = GetArceusFormFromHeldItem(pkm.HeldItem' pkm.Format);                          return form != pkm.AltForm ? GetInvalid(LFormItemInvalid) : GetValid(LFormItem);                      }                  case (int)Species.Keldeo:                  {                      if (pkm.Gen5) // can mismatch in gen5 via BW tutor and transfer up                          break;                      int index = Array.IndexOf(pkm.Moves' 548); // Secret Sword                      bool noSword = index < 0;                      if (pkm.AltForm == 0 ^ noSword) // mismatch                          Info.Moves[noSword ? 0 : index] = new CheckMoveResult(Info.Moves[noSword ? 0 : index]' Severity.Invalid' LMoveKeldeoMismatch' CheckIdentifier.Move);                      break;                  }                  case (int)Species.Genesect:                      {                          int form = GetGenesectFormFromHeldItem(pkm.HeldItem);                          return form != pkm.AltForm ? GetInvalid(LFormItemInvalid) : GetValid(LFormItem);                      }                  case (int)Species.Greninja:                      if (pkm.AltForm > 1) // Ash Battle Bond active                          return GetInvalid(LFormBattle);                      if (pkm.AltForm != 0 && !(EncounterMatch is MysteryGift)) // Formes are not breedable' MysteryGift already checked                          return GetInvalid(string.Format(LFormInvalidRange' 0' pkm.AltForm));                      break;                    case (int)Species.Scatterbug:                  case (int)Species.Spewpa:                      if (pkm.AltForm > 17) // Fancy & Pokéball                          return GetInvalid(LFormVivillonEventPre);                      if (!Legal.CheckVivillonPattern(pkm.AltForm' (byte)pkm.Country' (byte)pkm.Region))                          data.AddLine(Get(LFormVivillonInvalid' Severity.Fishy));                      break;                  case (int)Species.Vivillon:                      if (pkm.AltForm > 17) // Fancy & Pokéball                      {                          if (!(EncounterMatch is MysteryGift))                              return GetInvalid(LFormVivillonInvalid);                          return GetValid(LFormVivillon);                      }                      if (!Legal.CheckVivillonPattern(pkm.AltForm' (byte)pkm.Country' (byte)pkm.Region))                          data.AddLine(Get(LFormVivillonInvalid' Severity.Fishy));                      break;                    case (int)Species.Floette when pkm.AltForm == 5: // Floette Eternal Flower -- Never Released                      if (!(EncounterMatch is MysteryGift))                          return GetInvalid(LFormEternalInvalid);                      return GetValid(LFormEternal);                  case (int)Species.Meowstic when pkm.AltForm != pkm.Gender:                      return GetInvalid(LGenderInvalidNone);                    case (int)Species.Silvally:                      {                          int form = GetSilvallyFormFromHeldItem(pkm.HeldItem);                          return form != pkm.AltForm ? GetInvalid(LFormItemInvalid) : GetValid(LFormItem);                      }                    case (int)Species.Lillipup when Info.EncounterMatch.EggEncounter && pkm.AltForm == 1 && pkm.SM:                  case (int)Species.Lycanroc when Info.EncounterMatch.EggEncounter && pkm.AltForm == 2 && pkm.SM:                      return GetInvalid(LFormInvalidGame);                    // Impossible Egg forms                  case (int)Species.Rotom when pkm.IsEgg && pkm.AltForm != 0:                  case (int)Species.Furfrou when pkm.IsEgg && pkm.AltForm != 0:                      return GetInvalid(LEggSpecies);                    // Party Only Forms                  case (int)Species.Shaymin:                  case (int)Species.Furfrou:                  case (int)Species.Hoopa:                      if (pkm.AltForm != 0 && pkm.Box > -1 && pkm.Format <= 6) // has form but stored in box                          return GetInvalid(LFormParty);                      break;                    // Battle only Forms with other legal forms allowed                  case (int)Species.Zygarde when pkm.AltForm >= 4: // Zygarde Complete                  case (int)Species.Minior when pkm.AltForm < 7: // Minior Shield                  case (int)Species.Necrozma when pkm.AltForm == 3: // Ultra Necrozma                      return GetInvalid(LFormBattle);                  case (int)Species.Necrozma when pkm.AltForm < 3: // Necrozma Fused forms & default                  case (int)Species.Mimikyu when pkm.AltForm == 2: // Totem disguise Mimikyu                      return VALID;              }
Magic Number,PKHeX.Core,FormVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\FormVerifier.cs,VerifyForm,The following statement contains a magic number: switch (pkm.Species)              {                  case (int)Species.Pikachu when Info.Generation == 6: // Cosplay                      bool isStatic = EncounterMatch is EncounterStatic;                      if (isStatic != (pkm.AltForm != 0))                          return GetInvalid(isStatic ? LFormPikachuCosplayInvalid : LFormPikachuCosplay);                      break;                    case (int)Species.Pikachu when Info.Generation == 7: // Cap                      bool IsValidPikachuCap()                      {                          return EncounterMatch switch                          {                              WC7 wc7 => (wc7.Form == pkm.AltForm)'                              EncounterStatic s => (s.Form == pkm.AltForm)'                              _ => (pkm.AltForm == 0)                          };                      }                        if (!IsValidPikachuCap())                      {                          bool gift = EncounterMatch is WC7 g && g.Form != pkm.AltForm;                          var msg = gift ? LFormPikachuEventInvalid : LFormInvalidGame;                          return GetInvalid(msg);                      }                      break;                  case (int)Species.Unown when Info.Generation == 2 && pkm.AltForm >= 26:                      return GetInvalid(string.Format(LFormInvalidRange' "Z"' pkm.AltForm == 26 ? "!" : "?"));                  case (int)Species.Giratina when pkm.AltForm == 1 ^ pkm.HeldItem == 112: // Giratina' Origin form only with Griseous Orb                      return GetInvalid(LFormItemInvalid);                    case (int)Species.Arceus:                      {                          int form = GetArceusFormFromHeldItem(pkm.HeldItem' pkm.Format);                          return form != pkm.AltForm ? GetInvalid(LFormItemInvalid) : GetValid(LFormItem);                      }                  case (int)Species.Keldeo:                  {                      if (pkm.Gen5) // can mismatch in gen5 via BW tutor and transfer up                          break;                      int index = Array.IndexOf(pkm.Moves' 548); // Secret Sword                      bool noSword = index < 0;                      if (pkm.AltForm == 0 ^ noSword) // mismatch                          Info.Moves[noSword ? 0 : index] = new CheckMoveResult(Info.Moves[noSword ? 0 : index]' Severity.Invalid' LMoveKeldeoMismatch' CheckIdentifier.Move);                      break;                  }                  case (int)Species.Genesect:                      {                          int form = GetGenesectFormFromHeldItem(pkm.HeldItem);                          return form != pkm.AltForm ? GetInvalid(LFormItemInvalid) : GetValid(LFormItem);                      }                  case (int)Species.Greninja:                      if (pkm.AltForm > 1) // Ash Battle Bond active                          return GetInvalid(LFormBattle);                      if (pkm.AltForm != 0 && !(EncounterMatch is MysteryGift)) // Formes are not breedable' MysteryGift already checked                          return GetInvalid(string.Format(LFormInvalidRange' 0' pkm.AltForm));                      break;                    case (int)Species.Scatterbug:                  case (int)Species.Spewpa:                      if (pkm.AltForm > 17) // Fancy & Pokéball                          return GetInvalid(LFormVivillonEventPre);                      if (!Legal.CheckVivillonPattern(pkm.AltForm' (byte)pkm.Country' (byte)pkm.Region))                          data.AddLine(Get(LFormVivillonInvalid' Severity.Fishy));                      break;                  case (int)Species.Vivillon:                      if (pkm.AltForm > 17) // Fancy & Pokéball                      {                          if (!(EncounterMatch is MysteryGift))                              return GetInvalid(LFormVivillonInvalid);                          return GetValid(LFormVivillon);                      }                      if (!Legal.CheckVivillonPattern(pkm.AltForm' (byte)pkm.Country' (byte)pkm.Region))                          data.AddLine(Get(LFormVivillonInvalid' Severity.Fishy));                      break;                    case (int)Species.Floette when pkm.AltForm == 5: // Floette Eternal Flower -- Never Released                      if (!(EncounterMatch is MysteryGift))                          return GetInvalid(LFormEternalInvalid);                      return GetValid(LFormEternal);                  case (int)Species.Meowstic when pkm.AltForm != pkm.Gender:                      return GetInvalid(LGenderInvalidNone);                    case (int)Species.Silvally:                      {                          int form = GetSilvallyFormFromHeldItem(pkm.HeldItem);                          return form != pkm.AltForm ? GetInvalid(LFormItemInvalid) : GetValid(LFormItem);                      }                    case (int)Species.Lillipup when Info.EncounterMatch.EggEncounter && pkm.AltForm == 1 && pkm.SM:                  case (int)Species.Lycanroc when Info.EncounterMatch.EggEncounter && pkm.AltForm == 2 && pkm.SM:                      return GetInvalid(LFormInvalidGame);                    // Impossible Egg forms                  case (int)Species.Rotom when pkm.IsEgg && pkm.AltForm != 0:                  case (int)Species.Furfrou when pkm.IsEgg && pkm.AltForm != 0:                      return GetInvalid(LEggSpecies);                    // Party Only Forms                  case (int)Species.Shaymin:                  case (int)Species.Furfrou:                  case (int)Species.Hoopa:                      if (pkm.AltForm != 0 && pkm.Box > -1 && pkm.Format <= 6) // has form but stored in box                          return GetInvalid(LFormParty);                      break;                    // Battle only Forms with other legal forms allowed                  case (int)Species.Zygarde when pkm.AltForm >= 4: // Zygarde Complete                  case (int)Species.Minior when pkm.AltForm < 7: // Minior Shield                  case (int)Species.Necrozma when pkm.AltForm == 3: // Ultra Necrozma                      return GetInvalid(LFormBattle);                  case (int)Species.Necrozma when pkm.AltForm < 3: // Necrozma Fused forms & default                  case (int)Species.Mimikyu when pkm.AltForm == 2: // Totem disguise Mimikyu                      return VALID;              }
Magic Number,PKHeX.Core,FormVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\FormVerifier.cs,VerifyForm,The following statement contains a magic number: switch (pkm.Species)              {                  case (int)Species.Pikachu when Info.Generation == 6: // Cosplay                      bool isStatic = EncounterMatch is EncounterStatic;                      if (isStatic != (pkm.AltForm != 0))                          return GetInvalid(isStatic ? LFormPikachuCosplayInvalid : LFormPikachuCosplay);                      break;                    case (int)Species.Pikachu when Info.Generation == 7: // Cap                      bool IsValidPikachuCap()                      {                          return EncounterMatch switch                          {                              WC7 wc7 => (wc7.Form == pkm.AltForm)'                              EncounterStatic s => (s.Form == pkm.AltForm)'                              _ => (pkm.AltForm == 0)                          };                      }                        if (!IsValidPikachuCap())                      {                          bool gift = EncounterMatch is WC7 g && g.Form != pkm.AltForm;                          var msg = gift ? LFormPikachuEventInvalid : LFormInvalidGame;                          return GetInvalid(msg);                      }                      break;                  case (int)Species.Unown when Info.Generation == 2 && pkm.AltForm >= 26:                      return GetInvalid(string.Format(LFormInvalidRange' "Z"' pkm.AltForm == 26 ? "!" : "?"));                  case (int)Species.Giratina when pkm.AltForm == 1 ^ pkm.HeldItem == 112: // Giratina' Origin form only with Griseous Orb                      return GetInvalid(LFormItemInvalid);                    case (int)Species.Arceus:                      {                          int form = GetArceusFormFromHeldItem(pkm.HeldItem' pkm.Format);                          return form != pkm.AltForm ? GetInvalid(LFormItemInvalid) : GetValid(LFormItem);                      }                  case (int)Species.Keldeo:                  {                      if (pkm.Gen5) // can mismatch in gen5 via BW tutor and transfer up                          break;                      int index = Array.IndexOf(pkm.Moves' 548); // Secret Sword                      bool noSword = index < 0;                      if (pkm.AltForm == 0 ^ noSword) // mismatch                          Info.Moves[noSword ? 0 : index] = new CheckMoveResult(Info.Moves[noSword ? 0 : index]' Severity.Invalid' LMoveKeldeoMismatch' CheckIdentifier.Move);                      break;                  }                  case (int)Species.Genesect:                      {                          int form = GetGenesectFormFromHeldItem(pkm.HeldItem);                          return form != pkm.AltForm ? GetInvalid(LFormItemInvalid) : GetValid(LFormItem);                      }                  case (int)Species.Greninja:                      if (pkm.AltForm > 1) // Ash Battle Bond active                          return GetInvalid(LFormBattle);                      if (pkm.AltForm != 0 && !(EncounterMatch is MysteryGift)) // Formes are not breedable' MysteryGift already checked                          return GetInvalid(string.Format(LFormInvalidRange' 0' pkm.AltForm));                      break;                    case (int)Species.Scatterbug:                  case (int)Species.Spewpa:                      if (pkm.AltForm > 17) // Fancy & Pokéball                          return GetInvalid(LFormVivillonEventPre);                      if (!Legal.CheckVivillonPattern(pkm.AltForm' (byte)pkm.Country' (byte)pkm.Region))                          data.AddLine(Get(LFormVivillonInvalid' Severity.Fishy));                      break;                  case (int)Species.Vivillon:                      if (pkm.AltForm > 17) // Fancy & Pokéball                      {                          if (!(EncounterMatch is MysteryGift))                              return GetInvalid(LFormVivillonInvalid);                          return GetValid(LFormVivillon);                      }                      if (!Legal.CheckVivillonPattern(pkm.AltForm' (byte)pkm.Country' (byte)pkm.Region))                          data.AddLine(Get(LFormVivillonInvalid' Severity.Fishy));                      break;                    case (int)Species.Floette when pkm.AltForm == 5: // Floette Eternal Flower -- Never Released                      if (!(EncounterMatch is MysteryGift))                          return GetInvalid(LFormEternalInvalid);                      return GetValid(LFormEternal);                  case (int)Species.Meowstic when pkm.AltForm != pkm.Gender:                      return GetInvalid(LGenderInvalidNone);                    case (int)Species.Silvally:                      {                          int form = GetSilvallyFormFromHeldItem(pkm.HeldItem);                          return form != pkm.AltForm ? GetInvalid(LFormItemInvalid) : GetValid(LFormItem);                      }                    case (int)Species.Lillipup when Info.EncounterMatch.EggEncounter && pkm.AltForm == 1 && pkm.SM:                  case (int)Species.Lycanroc when Info.EncounterMatch.EggEncounter && pkm.AltForm == 2 && pkm.SM:                      return GetInvalid(LFormInvalidGame);                    // Impossible Egg forms                  case (int)Species.Rotom when pkm.IsEgg && pkm.AltForm != 0:                  case (int)Species.Furfrou when pkm.IsEgg && pkm.AltForm != 0:                      return GetInvalid(LEggSpecies);                    // Party Only Forms                  case (int)Species.Shaymin:                  case (int)Species.Furfrou:                  case (int)Species.Hoopa:                      if (pkm.AltForm != 0 && pkm.Box > -1 && pkm.Format <= 6) // has form but stored in box                          return GetInvalid(LFormParty);                      break;                    // Battle only Forms with other legal forms allowed                  case (int)Species.Zygarde when pkm.AltForm >= 4: // Zygarde Complete                  case (int)Species.Minior when pkm.AltForm < 7: // Minior Shield                  case (int)Species.Necrozma when pkm.AltForm == 3: // Ultra Necrozma                      return GetInvalid(LFormBattle);                  case (int)Species.Necrozma when pkm.AltForm < 3: // Necrozma Fused forms & default                  case (int)Species.Mimikyu when pkm.AltForm == 2: // Totem disguise Mimikyu                      return VALID;              }
Magic Number,PKHeX.Core,FormVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\FormVerifier.cs,VerifyForm,The following statement contains a magic number: switch (pkm.Species)              {                  case (int)Species.Pikachu when Info.Generation == 6: // Cosplay                      bool isStatic = EncounterMatch is EncounterStatic;                      if (isStatic != (pkm.AltForm != 0))                          return GetInvalid(isStatic ? LFormPikachuCosplayInvalid : LFormPikachuCosplay);                      break;                    case (int)Species.Pikachu when Info.Generation == 7: // Cap                      bool IsValidPikachuCap()                      {                          return EncounterMatch switch                          {                              WC7 wc7 => (wc7.Form == pkm.AltForm)'                              EncounterStatic s => (s.Form == pkm.AltForm)'                              _ => (pkm.AltForm == 0)                          };                      }                        if (!IsValidPikachuCap())                      {                          bool gift = EncounterMatch is WC7 g && g.Form != pkm.AltForm;                          var msg = gift ? LFormPikachuEventInvalid : LFormInvalidGame;                          return GetInvalid(msg);                      }                      break;                  case (int)Species.Unown when Info.Generation == 2 && pkm.AltForm >= 26:                      return GetInvalid(string.Format(LFormInvalidRange' "Z"' pkm.AltForm == 26 ? "!" : "?"));                  case (int)Species.Giratina when pkm.AltForm == 1 ^ pkm.HeldItem == 112: // Giratina' Origin form only with Griseous Orb                      return GetInvalid(LFormItemInvalid);                    case (int)Species.Arceus:                      {                          int form = GetArceusFormFromHeldItem(pkm.HeldItem' pkm.Format);                          return form != pkm.AltForm ? GetInvalid(LFormItemInvalid) : GetValid(LFormItem);                      }                  case (int)Species.Keldeo:                  {                      if (pkm.Gen5) // can mismatch in gen5 via BW tutor and transfer up                          break;                      int index = Array.IndexOf(pkm.Moves' 548); // Secret Sword                      bool noSword = index < 0;                      if (pkm.AltForm == 0 ^ noSword) // mismatch                          Info.Moves[noSword ? 0 : index] = new CheckMoveResult(Info.Moves[noSword ? 0 : index]' Severity.Invalid' LMoveKeldeoMismatch' CheckIdentifier.Move);                      break;                  }                  case (int)Species.Genesect:                      {                          int form = GetGenesectFormFromHeldItem(pkm.HeldItem);                          return form != pkm.AltForm ? GetInvalid(LFormItemInvalid) : GetValid(LFormItem);                      }                  case (int)Species.Greninja:                      if (pkm.AltForm > 1) // Ash Battle Bond active                          return GetInvalid(LFormBattle);                      if (pkm.AltForm != 0 && !(EncounterMatch is MysteryGift)) // Formes are not breedable' MysteryGift already checked                          return GetInvalid(string.Format(LFormInvalidRange' 0' pkm.AltForm));                      break;                    case (int)Species.Scatterbug:                  case (int)Species.Spewpa:                      if (pkm.AltForm > 17) // Fancy & Pokéball                          return GetInvalid(LFormVivillonEventPre);                      if (!Legal.CheckVivillonPattern(pkm.AltForm' (byte)pkm.Country' (byte)pkm.Region))                          data.AddLine(Get(LFormVivillonInvalid' Severity.Fishy));                      break;                  case (int)Species.Vivillon:                      if (pkm.AltForm > 17) // Fancy & Pokéball                      {                          if (!(EncounterMatch is MysteryGift))                              return GetInvalid(LFormVivillonInvalid);                          return GetValid(LFormVivillon);                      }                      if (!Legal.CheckVivillonPattern(pkm.AltForm' (byte)pkm.Country' (byte)pkm.Region))                          data.AddLine(Get(LFormVivillonInvalid' Severity.Fishy));                      break;                    case (int)Species.Floette when pkm.AltForm == 5: // Floette Eternal Flower -- Never Released                      if (!(EncounterMatch is MysteryGift))                          return GetInvalid(LFormEternalInvalid);                      return GetValid(LFormEternal);                  case (int)Species.Meowstic when pkm.AltForm != pkm.Gender:                      return GetInvalid(LGenderInvalidNone);                    case (int)Species.Silvally:                      {                          int form = GetSilvallyFormFromHeldItem(pkm.HeldItem);                          return form != pkm.AltForm ? GetInvalid(LFormItemInvalid) : GetValid(LFormItem);                      }                    case (int)Species.Lillipup when Info.EncounterMatch.EggEncounter && pkm.AltForm == 1 && pkm.SM:                  case (int)Species.Lycanroc when Info.EncounterMatch.EggEncounter && pkm.AltForm == 2 && pkm.SM:                      return GetInvalid(LFormInvalidGame);                    // Impossible Egg forms                  case (int)Species.Rotom when pkm.IsEgg && pkm.AltForm != 0:                  case (int)Species.Furfrou when pkm.IsEgg && pkm.AltForm != 0:                      return GetInvalid(LEggSpecies);                    // Party Only Forms                  case (int)Species.Shaymin:                  case (int)Species.Furfrou:                  case (int)Species.Hoopa:                      if (pkm.AltForm != 0 && pkm.Box > -1 && pkm.Format <= 6) // has form but stored in box                          return GetInvalid(LFormParty);                      break;                    // Battle only Forms with other legal forms allowed                  case (int)Species.Zygarde when pkm.AltForm >= 4: // Zygarde Complete                  case (int)Species.Minior when pkm.AltForm < 7: // Minior Shield                  case (int)Species.Necrozma when pkm.AltForm == 3: // Ultra Necrozma                      return GetInvalid(LFormBattle);                  case (int)Species.Necrozma when pkm.AltForm < 3: // Necrozma Fused forms & default                  case (int)Species.Mimikyu when pkm.AltForm == 2: // Totem disguise Mimikyu                      return VALID;              }
Magic Number,PKHeX.Core,FormVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\FormVerifier.cs,VerifyForm,The following statement contains a magic number: switch (pkm.Species)              {                  case (int)Species.Pikachu when Info.Generation == 6: // Cosplay                      bool isStatic = EncounterMatch is EncounterStatic;                      if (isStatic != (pkm.AltForm != 0))                          return GetInvalid(isStatic ? LFormPikachuCosplayInvalid : LFormPikachuCosplay);                      break;                    case (int)Species.Pikachu when Info.Generation == 7: // Cap                      bool IsValidPikachuCap()                      {                          return EncounterMatch switch                          {                              WC7 wc7 => (wc7.Form == pkm.AltForm)'                              EncounterStatic s => (s.Form == pkm.AltForm)'                              _ => (pkm.AltForm == 0)                          };                      }                        if (!IsValidPikachuCap())                      {                          bool gift = EncounterMatch is WC7 g && g.Form != pkm.AltForm;                          var msg = gift ? LFormPikachuEventInvalid : LFormInvalidGame;                          return GetInvalid(msg);                      }                      break;                  case (int)Species.Unown when Info.Generation == 2 && pkm.AltForm >= 26:                      return GetInvalid(string.Format(LFormInvalidRange' "Z"' pkm.AltForm == 26 ? "!" : "?"));                  case (int)Species.Giratina when pkm.AltForm == 1 ^ pkm.HeldItem == 112: // Giratina' Origin form only with Griseous Orb                      return GetInvalid(LFormItemInvalid);                    case (int)Species.Arceus:                      {                          int form = GetArceusFormFromHeldItem(pkm.HeldItem' pkm.Format);                          return form != pkm.AltForm ? GetInvalid(LFormItemInvalid) : GetValid(LFormItem);                      }                  case (int)Species.Keldeo:                  {                      if (pkm.Gen5) // can mismatch in gen5 via BW tutor and transfer up                          break;                      int index = Array.IndexOf(pkm.Moves' 548); // Secret Sword                      bool noSword = index < 0;                      if (pkm.AltForm == 0 ^ noSword) // mismatch                          Info.Moves[noSword ? 0 : index] = new CheckMoveResult(Info.Moves[noSword ? 0 : index]' Severity.Invalid' LMoveKeldeoMismatch' CheckIdentifier.Move);                      break;                  }                  case (int)Species.Genesect:                      {                          int form = GetGenesectFormFromHeldItem(pkm.HeldItem);                          return form != pkm.AltForm ? GetInvalid(LFormItemInvalid) : GetValid(LFormItem);                      }                  case (int)Species.Greninja:                      if (pkm.AltForm > 1) // Ash Battle Bond active                          return GetInvalid(LFormBattle);                      if (pkm.AltForm != 0 && !(EncounterMatch is MysteryGift)) // Formes are not breedable' MysteryGift already checked                          return GetInvalid(string.Format(LFormInvalidRange' 0' pkm.AltForm));                      break;                    case (int)Species.Scatterbug:                  case (int)Species.Spewpa:                      if (pkm.AltForm > 17) // Fancy & Pokéball                          return GetInvalid(LFormVivillonEventPre);                      if (!Legal.CheckVivillonPattern(pkm.AltForm' (byte)pkm.Country' (byte)pkm.Region))                          data.AddLine(Get(LFormVivillonInvalid' Severity.Fishy));                      break;                  case (int)Species.Vivillon:                      if (pkm.AltForm > 17) // Fancy & Pokéball                      {                          if (!(EncounterMatch is MysteryGift))                              return GetInvalid(LFormVivillonInvalid);                          return GetValid(LFormVivillon);                      }                      if (!Legal.CheckVivillonPattern(pkm.AltForm' (byte)pkm.Country' (byte)pkm.Region))                          data.AddLine(Get(LFormVivillonInvalid' Severity.Fishy));                      break;                    case (int)Species.Floette when pkm.AltForm == 5: // Floette Eternal Flower -- Never Released                      if (!(EncounterMatch is MysteryGift))                          return GetInvalid(LFormEternalInvalid);                      return GetValid(LFormEternal);                  case (int)Species.Meowstic when pkm.AltForm != pkm.Gender:                      return GetInvalid(LGenderInvalidNone);                    case (int)Species.Silvally:                      {                          int form = GetSilvallyFormFromHeldItem(pkm.HeldItem);                          return form != pkm.AltForm ? GetInvalid(LFormItemInvalid) : GetValid(LFormItem);                      }                    case (int)Species.Lillipup when Info.EncounterMatch.EggEncounter && pkm.AltForm == 1 && pkm.SM:                  case (int)Species.Lycanroc when Info.EncounterMatch.EggEncounter && pkm.AltForm == 2 && pkm.SM:                      return GetInvalid(LFormInvalidGame);                    // Impossible Egg forms                  case (int)Species.Rotom when pkm.IsEgg && pkm.AltForm != 0:                  case (int)Species.Furfrou when pkm.IsEgg && pkm.AltForm != 0:                      return GetInvalid(LEggSpecies);                    // Party Only Forms                  case (int)Species.Shaymin:                  case (int)Species.Furfrou:                  case (int)Species.Hoopa:                      if (pkm.AltForm != 0 && pkm.Box > -1 && pkm.Format <= 6) // has form but stored in box                          return GetInvalid(LFormParty);                      break;                    // Battle only Forms with other legal forms allowed                  case (int)Species.Zygarde when pkm.AltForm >= 4: // Zygarde Complete                  case (int)Species.Minior when pkm.AltForm < 7: // Minior Shield                  case (int)Species.Necrozma when pkm.AltForm == 3: // Ultra Necrozma                      return GetInvalid(LFormBattle);                  case (int)Species.Necrozma when pkm.AltForm < 3: // Necrozma Fused forms & default                  case (int)Species.Mimikyu when pkm.AltForm == 2: // Totem disguise Mimikyu                      return VALID;              }
Magic Number,PKHeX.Core,FormVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\FormVerifier.cs,VerifyForm,The following statement contains a magic number: switch (pkm.Species)              {                  case (int)Species.Pikachu when Info.Generation == 6: // Cosplay                      bool isStatic = EncounterMatch is EncounterStatic;                      if (isStatic != (pkm.AltForm != 0))                          return GetInvalid(isStatic ? LFormPikachuCosplayInvalid : LFormPikachuCosplay);                      break;                    case (int)Species.Pikachu when Info.Generation == 7: // Cap                      bool IsValidPikachuCap()                      {                          return EncounterMatch switch                          {                              WC7 wc7 => (wc7.Form == pkm.AltForm)'                              EncounterStatic s => (s.Form == pkm.AltForm)'                              _ => (pkm.AltForm == 0)                          };                      }                        if (!IsValidPikachuCap())                      {                          bool gift = EncounterMatch is WC7 g && g.Form != pkm.AltForm;                          var msg = gift ? LFormPikachuEventInvalid : LFormInvalidGame;                          return GetInvalid(msg);                      }                      break;                  case (int)Species.Unown when Info.Generation == 2 && pkm.AltForm >= 26:                      return GetInvalid(string.Format(LFormInvalidRange' "Z"' pkm.AltForm == 26 ? "!" : "?"));                  case (int)Species.Giratina when pkm.AltForm == 1 ^ pkm.HeldItem == 112: // Giratina' Origin form only with Griseous Orb                      return GetInvalid(LFormItemInvalid);                    case (int)Species.Arceus:                      {                          int form = GetArceusFormFromHeldItem(pkm.HeldItem' pkm.Format);                          return form != pkm.AltForm ? GetInvalid(LFormItemInvalid) : GetValid(LFormItem);                      }                  case (int)Species.Keldeo:                  {                      if (pkm.Gen5) // can mismatch in gen5 via BW tutor and transfer up                          break;                      int index = Array.IndexOf(pkm.Moves' 548); // Secret Sword                      bool noSword = index < 0;                      if (pkm.AltForm == 0 ^ noSword) // mismatch                          Info.Moves[noSword ? 0 : index] = new CheckMoveResult(Info.Moves[noSword ? 0 : index]' Severity.Invalid' LMoveKeldeoMismatch' CheckIdentifier.Move);                      break;                  }                  case (int)Species.Genesect:                      {                          int form = GetGenesectFormFromHeldItem(pkm.HeldItem);                          return form != pkm.AltForm ? GetInvalid(LFormItemInvalid) : GetValid(LFormItem);                      }                  case (int)Species.Greninja:                      if (pkm.AltForm > 1) // Ash Battle Bond active                          return GetInvalid(LFormBattle);                      if (pkm.AltForm != 0 && !(EncounterMatch is MysteryGift)) // Formes are not breedable' MysteryGift already checked                          return GetInvalid(string.Format(LFormInvalidRange' 0' pkm.AltForm));                      break;                    case (int)Species.Scatterbug:                  case (int)Species.Spewpa:                      if (pkm.AltForm > 17) // Fancy & Pokéball                          return GetInvalid(LFormVivillonEventPre);                      if (!Legal.CheckVivillonPattern(pkm.AltForm' (byte)pkm.Country' (byte)pkm.Region))                          data.AddLine(Get(LFormVivillonInvalid' Severity.Fishy));                      break;                  case (int)Species.Vivillon:                      if (pkm.AltForm > 17) // Fancy & Pokéball                      {                          if (!(EncounterMatch is MysteryGift))                              return GetInvalid(LFormVivillonInvalid);                          return GetValid(LFormVivillon);                      }                      if (!Legal.CheckVivillonPattern(pkm.AltForm' (byte)pkm.Country' (byte)pkm.Region))                          data.AddLine(Get(LFormVivillonInvalid' Severity.Fishy));                      break;                    case (int)Species.Floette when pkm.AltForm == 5: // Floette Eternal Flower -- Never Released                      if (!(EncounterMatch is MysteryGift))                          return GetInvalid(LFormEternalInvalid);                      return GetValid(LFormEternal);                  case (int)Species.Meowstic when pkm.AltForm != pkm.Gender:                      return GetInvalid(LGenderInvalidNone);                    case (int)Species.Silvally:                      {                          int form = GetSilvallyFormFromHeldItem(pkm.HeldItem);                          return form != pkm.AltForm ? GetInvalid(LFormItemInvalid) : GetValid(LFormItem);                      }                    case (int)Species.Lillipup when Info.EncounterMatch.EggEncounter && pkm.AltForm == 1 && pkm.SM:                  case (int)Species.Lycanroc when Info.EncounterMatch.EggEncounter && pkm.AltForm == 2 && pkm.SM:                      return GetInvalid(LFormInvalidGame);                    // Impossible Egg forms                  case (int)Species.Rotom when pkm.IsEgg && pkm.AltForm != 0:                  case (int)Species.Furfrou when pkm.IsEgg && pkm.AltForm != 0:                      return GetInvalid(LEggSpecies);                    // Party Only Forms                  case (int)Species.Shaymin:                  case (int)Species.Furfrou:                  case (int)Species.Hoopa:                      if (pkm.AltForm != 0 && pkm.Box > -1 && pkm.Format <= 6) // has form but stored in box                          return GetInvalid(LFormParty);                      break;                    // Battle only Forms with other legal forms allowed                  case (int)Species.Zygarde when pkm.AltForm >= 4: // Zygarde Complete                  case (int)Species.Minior when pkm.AltForm < 7: // Minior Shield                  case (int)Species.Necrozma when pkm.AltForm == 3: // Ultra Necrozma                      return GetInvalid(LFormBattle);                  case (int)Species.Necrozma when pkm.AltForm < 3: // Necrozma Fused forms & default                  case (int)Species.Mimikyu when pkm.AltForm == 2: // Totem disguise Mimikyu                      return VALID;              }
Magic Number,PKHeX.Core,FormVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\FormVerifier.cs,VerifyForm,The following statement contains a magic number: pkm.Species == 25 || Legal.AlolanOriginForms.Contains(pkm.Species) || Legal.AlolanVariantEvolutions12.Contains(data.EncounterOriginal.Species)
Magic Number,PKHeX.Core,FormVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\FormVerifier.cs,VerifyForm,The following statement contains a magic number: pkm.Format >= 7 && Info.Generation < 7 && pkm.AltForm != 0
Magic Number,PKHeX.Core,FormVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\FormVerifier.cs,VerifyForm,The following statement contains a magic number: pkm.Format >= 7 && Info.Generation < 7 && pkm.AltForm != 0
Magic Number,PKHeX.Core,FormVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\FormVerifier.cs,VerifyForm,The following statement contains a magic number: pkm.Species == 25 || Legal.GalarOriginForms.Contains(pkm.Species) || Legal.GalarVariantFormEvolutions.Contains(data.EncounterOriginal.Species)
Magic Number,PKHeX.Core,FormVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\FormVerifier.cs,VerifyForm,The following statement contains a magic number: pkm.Format >= 8 && Info.Generation < 8 && pkm.AltForm != 0
Magic Number,PKHeX.Core,FormVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\FormVerifier.cs,VerifyForm,The following statement contains a magic number: pkm.Format >= 8 && Info.Generation < 8 && pkm.AltForm != 0
Magic Number,PKHeX.Core,FormVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\FormVerifier.cs,VerifyForm,The following statement contains a magic number: pkm.Species == (int) Species.Darmanitan && pkm.AltForm == 2 && pkm.Format >= 8
Magic Number,PKHeX.Core,FormVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\FormVerifier.cs,VerifyForm,The following statement contains a magic number: pkm.Species == (int) Species.Darmanitan && pkm.AltForm == 2 && pkm.Format >= 8
Magic Number,PKHeX.Core,FormVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\FormVerifier.cs,GetArceusFormFromHeldItem,The following statement contains a magic number: 777 <= item && item <= 793
Magic Number,PKHeX.Core,FormVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\FormVerifier.cs,GetArceusFormFromHeldItem,The following statement contains a magic number: 777 <= item && item <= 793
Magic Number,PKHeX.Core,FormVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\FormVerifier.cs,GetArceusFormFromHeldItem,The following statement contains a magic number: (298 <= item && item <= 313) || item == 644
Magic Number,PKHeX.Core,FormVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\FormVerifier.cs,GetArceusFormFromHeldItem,The following statement contains a magic number: (298 <= item && item <= 313) || item == 644
Magic Number,PKHeX.Core,FormVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\FormVerifier.cs,GetArceusFormFromHeldItem,The following statement contains a magic number: (298 <= item && item <= 313) || item == 644
Magic Number,PKHeX.Core,FormVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\FormVerifier.cs,GetArceusFormFromHeldItem,The following statement contains a magic number: format == 4 && form >= 9
Magic Number,PKHeX.Core,FormVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\FormVerifier.cs,GetArceusFormFromHeldItem,The following statement contains a magic number: format == 4 && form >= 9
Magic Number,PKHeX.Core,FormVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\FormVerifier.cs,GetSilvallyFormFromHeldItem,The following statement contains a magic number: return item - 903;
Magic Number,PKHeX.Core,FormVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\FormVerifier.cs,GetSilvallyFormFromHeldItem,The following statement contains a magic number: (904 <= item && item <= 920) || item == 644
Magic Number,PKHeX.Core,FormVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\FormVerifier.cs,GetSilvallyFormFromHeldItem,The following statement contains a magic number: (904 <= item && item <= 920) || item == 644
Magic Number,PKHeX.Core,FormVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\FormVerifier.cs,GetSilvallyFormFromHeldItem,The following statement contains a magic number: (904 <= item && item <= 920) || item == 644
Magic Number,PKHeX.Core,FormVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\FormVerifier.cs,GetGenesectFormFromHeldItem,The following statement contains a magic number: return item - 115;
Magic Number,PKHeX.Core,FormVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\FormVerifier.cs,GetGenesectFormFromHeldItem,The following statement contains a magic number: 116 <= item && item <= 119
Magic Number,PKHeX.Core,FormVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\FormVerifier.cs,GetGenesectFormFromHeldItem,The following statement contains a magic number: 116 <= item && item <= 119
Magic Number,PKHeX.Core,FormVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\FormVerifier.cs,VerifyFormFriendSafari,The following statement contains a magic number: switch (pkm.Species)              {                  case (int)Species.Floette when !SafariFloette.Contains(pkm.AltForm): // Floette                  case (int)Species.Florges when !SafariFloette.Contains(pkm.AltForm): // Florges                      data.AddLine(GetInvalid(LFormSafariFlorgesColor));                      break;                  case 710 when pkm.AltForm != 0: // Pumpkaboo                  case (int)Species.Gourgeist when pkm.AltForm != 0: // Average                      data.AddLine(GetInvalid(LFormSafariPumpkabooAverage));                      break;                  case (int)Species.Gastrodon when pkm.AltForm != 0: // West                      data.AddLine(GetInvalid(LFormSafariFlorgesColor));                      break;                  case (int)Species.Sawsbuck when pkm.AltForm != 0: // Sawsbuck                      data.AddLine(GetInvalid(LFormSafariSawsbuckSpring));                      break;              }
Magic Number,PKHeX.Core,GenderVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\GenderVerifier.cs,Verify,The following statement contains a magic number: bool ignore = pkm.Format == 4 && pkm.Species == 292 && pkm.Met_Level != pkm.CurrentLevel;
Magic Number,PKHeX.Core,GenderVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\GenderVerifier.cs,Verify,The following statement contains a magic number: bool ignore = pkm.Format == 4 && pkm.Species == 292 && pkm.Met_Level != pkm.CurrentLevel;
Magic Number,PKHeX.Core,GenderVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\GenderVerifier.cs,Verify,The following statement contains a magic number: pi.Genderless != (pkm.Gender == 2)
Magic Number,PKHeX.Core,GenderVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\GenderVerifier.cs,Verify,The following statement contains a magic number: gen != 5
Magic Number,PKHeX.Core,GenderVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\GenderVerifier.cs,Verify,The following statement contains a magic number: 3 <= gen && gen <= 5
Magic Number,PKHeX.Core,GenderVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\GenderVerifier.cs,Verify,The following statement contains a magic number: 3 <= gen && gen <= 5
Magic Number,PKHeX.Core,GenderVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\GenderVerifier.cs,VerifyNaturePID,The following statement contains a magic number: var result = pkm.EncryptionConstant % 25 == pkm.Nature                  ? GetValid(LPIDNatureMatch' CheckIdentifier.Nature)                  : GetInvalid(LPIDNatureMismatch' CheckIdentifier.Nature);
Magic Number,PKHeX.Core,GenderVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\GenderVerifier.cs,IsValidFixedGenderFromBiGender,The following statement contains a magic number: current == 2
Magic Number,PKHeX.Core,GenderVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\GenderVerifier.cs,IsValidGenderMismatch,The following statement contains a magic number: switch (pkm.Species)              {                  case (int)Species.Shedinja when pkm.Format == 4: // Shedinja evolution gender glitch' should match original Gender                      return pkm.Gender == PKX.GetGenderFromPIDAndRatio(pkm.EncryptionConstant' 0x7F); // 50M-50F                    case (int)Species.Marill    when pkm.Format >= 6:                  case (int)Species.Azumarill when pkm.Format >= 6: // evolved from azurill after transferring to keep gender                      return pkm.Gender == 1 && (pkm.EncryptionConstant & 0xFF) > 0x3F;                    default: return false;              }
Magic Number,PKHeX.Core,GenderVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\GenderVerifier.cs,IsValidGenderMismatch,The following statement contains a magic number: switch (pkm.Species)              {                  case (int)Species.Shedinja when pkm.Format == 4: // Shedinja evolution gender glitch' should match original Gender                      return pkm.Gender == PKX.GetGenderFromPIDAndRatio(pkm.EncryptionConstant' 0x7F); // 50M-50F                    case (int)Species.Marill    when pkm.Format >= 6:                  case (int)Species.Azumarill when pkm.Format >= 6: // evolved from azurill after transferring to keep gender                      return pkm.Gender == 1 && (pkm.EncryptionConstant & 0xFF) > 0x3F;                    default: return false;              }
Magic Number,PKHeX.Core,GenderVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\GenderVerifier.cs,IsValidGenderMismatch,The following statement contains a magic number: switch (pkm.Species)              {                  case (int)Species.Shedinja when pkm.Format == 4: // Shedinja evolution gender glitch' should match original Gender                      return pkm.Gender == PKX.GetGenderFromPIDAndRatio(pkm.EncryptionConstant' 0x7F); // 50M-50F                    case (int)Species.Marill    when pkm.Format >= 6:                  case (int)Species.Azumarill when pkm.Format >= 6: // evolved from azurill after transferring to keep gender                      return pkm.Gender == 1 && (pkm.EncryptionConstant & 0xFF) > 0x3F;                    default: return false;              }
Magic Number,PKHeX.Core,HyperTrainingVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\HyperTrainingVerifier.cs,Verify,The following statement contains a magic number: pkm.CurrentLevel != 100
Magic Number,PKHeX.Core,HyperTrainingVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\HyperTrainingVerifier.cs,Verify,The following statement contains a magic number: pkm.IVTotal == max * 6
Magic Number,PKHeX.Core,HyperTrainingVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\HyperTrainingVerifier.cs,Verify,The following statement contains a magic number: i < 6
Magic Number,PKHeX.Core,IndividualValueVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\IndividualValueVerifier.cs,VerifyIVsMystery,The following statement contains a magic number: var ivflag = Array.Find(IVs' iv => (byte)(iv - 0xFC) < 3);
Magic Number,PKHeX.Core,IndividualValueVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\IndividualValueVerifier.cs,VerifyIVsSlot,The following statement contains a magic number: switch (w.Generation)              {                  case 6: VerifyIVsGen6(data' w); break;                  case 7: VerifyIVsGen7(data); break;                  case 8: VerifyIVsGen8(data); break;              }
Magic Number,PKHeX.Core,IndividualValueVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\IndividualValueVerifier.cs,VerifyIVsSlot,The following statement contains a magic number: switch (w.Generation)              {                  case 6: VerifyIVsGen6(data' w); break;                  case 7: VerifyIVsGen7(data); break;                  case 8: VerifyIVsGen8(data); break;              }
Magic Number,PKHeX.Core,IndividualValueVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\IndividualValueVerifier.cs,VerifyIVsSlot,The following statement contains a magic number: switch (w.Generation)              {                  case 6: VerifyIVsGen6(data' w); break;                  case 7: VerifyIVsGen7(data); break;                  case 8: VerifyIVsGen8(data); break;              }
Magic Number,PKHeX.Core,IndividualValueVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\IndividualValueVerifier.cs,VerifyIVsGen6,The following statement contains a magic number: VerifyIVsFlawless(data' 3);
Magic Number,PKHeX.Core,IndividualValueVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\IndividualValueVerifier.cs,VerifyIVsGen6,The following statement contains a magic number: pkm.XY && PersonalTable.XY[data.EncounterMatch.Species].IsEggGroup(15)
Magic Number,PKHeX.Core,IndividualValueVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\IndividualValueVerifier.cs,IsGoIVSetValid,The following statement contains a magic number: (pkm.GetIV(1) & 1) != 1 || pkm.GetIV(1) != pkm.GetIV(4)
Magic Number,PKHeX.Core,IndividualValueVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\IndividualValueVerifier.cs,IsGoIVSetValid,The following statement contains a magic number: (pkm.GetIV(2) & 1) != 1 || pkm.GetIV(2) != pkm.GetIV(5)
Magic Number,PKHeX.Core,IndividualValueVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\IndividualValueVerifier.cs,IsGoIVSetValid,The following statement contains a magic number: (pkm.GetIV(2) & 1) != 1 || pkm.GetIV(2) != pkm.GetIV(5)
Magic Number,PKHeX.Core,IndividualValueVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\IndividualValueVerifier.cs,IsGoIVSetValid,The following statement contains a magic number: (pkm.GetIV(2) & 1) != 1 || pkm.GetIV(2) != pkm.GetIV(5)
Magic Number,PKHeX.Core,ItemVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\ItemVerifier.cs,Verify,The following statement contains a magic number: pkm.Format == 3 && pkm.HeldItem == 175
Magic Number,PKHeX.Core,ItemVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\ItemVerifier.cs,Verify,The following statement contains a magic number: pkm.Format == 3 && pkm.HeldItem == 175
Magic Number,PKHeX.Core,LanguageVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\LanguageVerifier.cs,Verify,The following statement contains a magic number: pkm.Format == 4 && pkm.Gen4 && !IsValidG4Korean(currentLanguage)                  && !(data.EncounterMatch is EncounterTrade x && (x.Species == 25 || x.Species == 129))
Magic Number,PKHeX.Core,LanguageVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\LanguageVerifier.cs,Verify,The following statement contains a magic number: pkm.Format == 4 && pkm.Gen4 && !IsValidG4Korean(currentLanguage)                  && !(data.EncounterMatch is EncounterTrade x && (x.Species == 25 || x.Species == 129))
Magic Number,PKHeX.Core,LanguageVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\LanguageVerifier.cs,Verify,The following statement contains a magic number: pkm.Format == 4 && pkm.Gen4 && !IsValidG4Korean(currentLanguage)                  && !(data.EncounterMatch is EncounterTrade x && (x.Species == 25 || x.Species == 129))
Magic Number,PKHeX.Core,LanguageVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\LanguageVerifier.cs,Verify,The following statement contains a magic number: originalGeneration <= 2 && pkm.Korean && !GameVersion.GS.Contains((GameVersion)pkm.Version)
Magic Number,PKHeX.Core,LevelVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\LevelVerifier.cs,Verify,The following statement contains a magic number: var reqEXP = EncounterMatch is EncounterStatic s && s.Version == GameVersion.C                      ? 125 // Gen2 Dizzy Punch gifts always have 125 EXP' even if it's more than the Lv5 exp required.                      : Experience.GetEXP(elvl' pkm.PersonalInfo.EXPGrowth);
Magic Number,PKHeX.Core,LevelVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\LevelVerifier.cs,VerifyG1,The following statement contains a magic number: pkm.Format <= 2 && !(EncounterMatch is EncounterTrade) && EncounterMatch.Species == pkm.Species && GBRestrictions.Trade_Evolution1.Contains(EncounterMatch.Species)
Magic Number,PKHeX.Core,LevelVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\LevelVerifier.cs,VerifyG1TradeEvo,The following statement contains a magic number: ParseSettings.ActiveTrainer.Generation >= 3
Magic Number,PKHeX.Core,MedalVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\MedalVerifier.cs,VerifyMedalsRegular,The following statement contains a magic number: (value & 3) != 0
Magic Number,PKHeX.Core,MedalVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\MedalVerifier.cs,VerifyMedalsRegular,The following statement contains a magic number: Info.Generation >= 7 || Info.Generation <= 2
Magic Number,PKHeX.Core,MedalVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\MedalVerifier.cs,VerifyMedalsRegular,The following statement contains a magic number: Info.Generation >= 7 || Info.Generation <= 2
Magic Number,PKHeX.Core,MedalVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\MedalVerifier.cs,VerifyMedalsRegular,The following statement contains a magic number: pkm.Format >= 7
Magic Number,PKHeX.Core,MedalVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\MedalVerifier.cs,VerifyMedalsRegular,The following statement contains a magic number: TrainCount == 30 ^ train.SecretSuperTrainingComplete
Magic Number,PKHeX.Core,MemoryVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\MemoryVerifier.cs,Verify,The following statement contains a magic number: data.pkm.Format < 6
Magic Number,PKHeX.Core,MemoryVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\MemoryVerifier.cs,VerifyHistory,The following statement contains a magic number: (pkm.OT_Affection != 0 && Info.Generation <= 2) || IsInvalidContestAffection(pkm)
Magic Number,PKHeX.Core,MemoryVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\MemoryVerifier.cs,VerifyHistory,The following statement contains a magic number: Info.Generation < 6
Magic Number,PKHeX.Core,MemoryVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\MemoryVerifier.cs,VerifyHistory,The following statement contains a magic number: pkm.Format >= 7
Magic Number,PKHeX.Core,MemoryVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\MemoryVerifier.cs,VerifyHistory7,The following statement contains a magic number: (2 >= Info.Generation || Info.Generation >= 7) && pkm is IContestStats s && s.HasContestStats()
Magic Number,PKHeX.Core,MemoryVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\MemoryVerifier.cs,VerifyHistory7,The following statement contains a magic number: (2 >= Info.Generation || Info.Generation >= 7) && pkm is IContestStats s && s.HasContestStats()
Magic Number,PKHeX.Core,MemoryVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\MemoryVerifier.cs,VerifyHistoryUntradedEvolution,The following statement contains a magic number: pkm is IContestStats s && s.CNT_Beauty < 170
Magic Number,PKHeX.Core,MemoryVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\MemoryVerifier.cs,VerifyHistoryUntradedEvolution,The following statement contains a magic number: pkm.Species == 350
Magic Number,PKHeX.Core,MemoryVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\MemoryVerifier.cs,VerifyCommonMemory,The following statement contains a magic number: matchingMoveMemory != -1 && pkm.Species != 235 && !Legal.GetCanLearnMachineMove(pkm' Memories.MoveSpecificMemories[1][matchingMoveMemory]' 6)
Magic Number,PKHeX.Core,MemoryVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\MemoryVerifier.cs,VerifyCommonMemory,The following statement contains a magic number: matchingMoveMemory != -1 && pkm.Species != 235 && !Legal.GetCanLearnMachineMove(pkm' Memories.MoveSpecificMemories[1][matchingMoveMemory]' 6)
Magic Number,PKHeX.Core,MemoryVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\MemoryVerifier.cs,VerifyCommonMemory,The following statement contains a magic number: switch (memory.MemoryID)              {                  case 6 when !Memories.LocationsWithPKCenter.Contains(memory.Variable):                      return GetInvalid(string.Format(LMemoryArgBadPokecenter' memory.Handler));                    // {0} saw {2} carrying {1} on its back. {4} that {3}.                  case 21 when !Legal.GetCanLearnMachineMove(new PK6 {Species = memory.Variable' EXP = Experience.GetEXP(100' PersonalTable.XY.GetFormeIndex(memory.Variable' 0))}' 19' 6):                      return GetInvalid(string.Format(LMemoryArgBadMove' memory.Handler));                    case 16 when memory.Variable == 0 && !GetIsMoveKnowable(pkm' handler' memory.Variable):                  case 48 when memory.Variable == 0 && !GetIsMoveKnowable(pkm' handler' memory.Variable):                      return GetInvalid(string.Format(LMemoryArgBadMove' memory.Handler));                    // {0} was able to remember {2} at {1}'s instruction. {4} that {3}.                  case 49 when memory.Variable == 0 && !GetIsMoveLearnable(pkm' handler' memory.Variable):                      return GetInvalid(string.Format(LMemoryArgBadMove' memory.Handler));              }
Magic Number,PKHeX.Core,MemoryVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\MemoryVerifier.cs,VerifyCommonMemory,The following statement contains a magic number: switch (memory.MemoryID)              {                  case 6 when !Memories.LocationsWithPKCenter.Contains(memory.Variable):                      return GetInvalid(string.Format(LMemoryArgBadPokecenter' memory.Handler));                    // {0} saw {2} carrying {1} on its back. {4} that {3}.                  case 21 when !Legal.GetCanLearnMachineMove(new PK6 {Species = memory.Variable' EXP = Experience.GetEXP(100' PersonalTable.XY.GetFormeIndex(memory.Variable' 0))}' 19' 6):                      return GetInvalid(string.Format(LMemoryArgBadMove' memory.Handler));                    case 16 when memory.Variable == 0 && !GetIsMoveKnowable(pkm' handler' memory.Variable):                  case 48 when memory.Variable == 0 && !GetIsMoveKnowable(pkm' handler' memory.Variable):                      return GetInvalid(string.Format(LMemoryArgBadMove' memory.Handler));                    // {0} was able to remember {2} at {1}'s instruction. {4} that {3}.                  case 49 when memory.Variable == 0 && !GetIsMoveLearnable(pkm' handler' memory.Variable):                      return GetInvalid(string.Format(LMemoryArgBadMove' memory.Handler));              }
Magic Number,PKHeX.Core,MemoryVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\MemoryVerifier.cs,VerifyCommonMemory,The following statement contains a magic number: switch (memory.MemoryID)              {                  case 6 when !Memories.LocationsWithPKCenter.Contains(memory.Variable):                      return GetInvalid(string.Format(LMemoryArgBadPokecenter' memory.Handler));                    // {0} saw {2} carrying {1} on its back. {4} that {3}.                  case 21 when !Legal.GetCanLearnMachineMove(new PK6 {Species = memory.Variable' EXP = Experience.GetEXP(100' PersonalTable.XY.GetFormeIndex(memory.Variable' 0))}' 19' 6):                      return GetInvalid(string.Format(LMemoryArgBadMove' memory.Handler));                    case 16 when memory.Variable == 0 && !GetIsMoveKnowable(pkm' handler' memory.Variable):                  case 48 when memory.Variable == 0 && !GetIsMoveKnowable(pkm' handler' memory.Variable):                      return GetInvalid(string.Format(LMemoryArgBadMove' memory.Handler));                    // {0} was able to remember {2} at {1}'s instruction. {4} that {3}.                  case 49 when memory.Variable == 0 && !GetIsMoveLearnable(pkm' handler' memory.Variable):                      return GetInvalid(string.Format(LMemoryArgBadMove' memory.Handler));              }
Magic Number,PKHeX.Core,MemoryVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\MemoryVerifier.cs,VerifyCommonMemory,The following statement contains a magic number: switch (memory.MemoryID)              {                  case 6 when !Memories.LocationsWithPKCenter.Contains(memory.Variable):                      return GetInvalid(string.Format(LMemoryArgBadPokecenter' memory.Handler));                    // {0} saw {2} carrying {1} on its back. {4} that {3}.                  case 21 when !Legal.GetCanLearnMachineMove(new PK6 {Species = memory.Variable' EXP = Experience.GetEXP(100' PersonalTable.XY.GetFormeIndex(memory.Variable' 0))}' 19' 6):                      return GetInvalid(string.Format(LMemoryArgBadMove' memory.Handler));                    case 16 when memory.Variable == 0 && !GetIsMoveKnowable(pkm' handler' memory.Variable):                  case 48 when memory.Variable == 0 && !GetIsMoveKnowable(pkm' handler' memory.Variable):                      return GetInvalid(string.Format(LMemoryArgBadMove' memory.Handler));                    // {0} was able to remember {2} at {1}'s instruction. {4} that {3}.                  case 49 when memory.Variable == 0 && !GetIsMoveLearnable(pkm' handler' memory.Variable):                      return GetInvalid(string.Format(LMemoryArgBadMove' memory.Handler));              }
Magic Number,PKHeX.Core,MemoryVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\MemoryVerifier.cs,VerifyCommonMemory,The following statement contains a magic number: switch (memory.MemoryID)              {                  case 6 when !Memories.LocationsWithPKCenter.Contains(memory.Variable):                      return GetInvalid(string.Format(LMemoryArgBadPokecenter' memory.Handler));                    // {0} saw {2} carrying {1} on its back. {4} that {3}.                  case 21 when !Legal.GetCanLearnMachineMove(new PK6 {Species = memory.Variable' EXP = Experience.GetEXP(100' PersonalTable.XY.GetFormeIndex(memory.Variable' 0))}' 19' 6):                      return GetInvalid(string.Format(LMemoryArgBadMove' memory.Handler));                    case 16 when memory.Variable == 0 && !GetIsMoveKnowable(pkm' handler' memory.Variable):                  case 48 when memory.Variable == 0 && !GetIsMoveKnowable(pkm' handler' memory.Variable):                      return GetInvalid(string.Format(LMemoryArgBadMove' memory.Handler));                    // {0} was able to remember {2} at {1}'s instruction. {4} that {3}.                  case 49 when memory.Variable == 0 && !GetIsMoveLearnable(pkm' handler' memory.Variable):                      return GetInvalid(string.Format(LMemoryArgBadMove' memory.Handler));              }
Magic Number,PKHeX.Core,MemoryVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\MemoryVerifier.cs,VerifyCommonMemory,The following statement contains a magic number: switch (memory.MemoryID)              {                  case 6 when !Memories.LocationsWithPKCenter.Contains(memory.Variable):                      return GetInvalid(string.Format(LMemoryArgBadPokecenter' memory.Handler));                    // {0} saw {2} carrying {1} on its back. {4} that {3}.                  case 21 when !Legal.GetCanLearnMachineMove(new PK6 {Species = memory.Variable' EXP = Experience.GetEXP(100' PersonalTable.XY.GetFormeIndex(memory.Variable' 0))}' 19' 6):                      return GetInvalid(string.Format(LMemoryArgBadMove' memory.Handler));                    case 16 when memory.Variable == 0 && !GetIsMoveKnowable(pkm' handler' memory.Variable):                  case 48 when memory.Variable == 0 && !GetIsMoveKnowable(pkm' handler' memory.Variable):                      return GetInvalid(string.Format(LMemoryArgBadMove' memory.Handler));                    // {0} was able to remember {2} at {1}'s instruction. {4} that {3}.                  case 49 when memory.Variable == 0 && !GetIsMoveLearnable(pkm' handler' memory.Variable):                      return GetInvalid(string.Format(LMemoryArgBadMove' memory.Handler));              }
Magic Number,PKHeX.Core,MemoryVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\MemoryVerifier.cs,VerifyCommonMemory,The following statement contains a magic number: switch (memory.MemoryID)              {                  case 6 when !Memories.LocationsWithPKCenter.Contains(memory.Variable):                      return GetInvalid(string.Format(LMemoryArgBadPokecenter' memory.Handler));                    // {0} saw {2} carrying {1} on its back. {4} that {3}.                  case 21 when !Legal.GetCanLearnMachineMove(new PK6 {Species = memory.Variable' EXP = Experience.GetEXP(100' PersonalTable.XY.GetFormeIndex(memory.Variable' 0))}' 19' 6):                      return GetInvalid(string.Format(LMemoryArgBadMove' memory.Handler));                    case 16 when memory.Variable == 0 && !GetIsMoveKnowable(pkm' handler' memory.Variable):                  case 48 when memory.Variable == 0 && !GetIsMoveKnowable(pkm' handler' memory.Variable):                      return GetInvalid(string.Format(LMemoryArgBadMove' memory.Handler));                    // {0} was able to remember {2} at {1}'s instruction. {4} that {3}.                  case 49 when memory.Variable == 0 && !GetIsMoveLearnable(pkm' handler' memory.Variable):                      return GetInvalid(string.Format(LMemoryArgBadMove' memory.Handler));              }
Magic Number,PKHeX.Core,MemoryVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\MemoryVerifier.cs,VerifyCommonMemory,The following statement contains a magic number: switch (memory.MemoryID)              {                  case 6 when !Memories.LocationsWithPKCenter.Contains(memory.Variable):                      return GetInvalid(string.Format(LMemoryArgBadPokecenter' memory.Handler));                    // {0} saw {2} carrying {1} on its back. {4} that {3}.                  case 21 when !Legal.GetCanLearnMachineMove(new PK6 {Species = memory.Variable' EXP = Experience.GetEXP(100' PersonalTable.XY.GetFormeIndex(memory.Variable' 0))}' 19' 6):                      return GetInvalid(string.Format(LMemoryArgBadMove' memory.Handler));                    case 16 when memory.Variable == 0 && !GetIsMoveKnowable(pkm' handler' memory.Variable):                  case 48 when memory.Variable == 0 && !GetIsMoveKnowable(pkm' handler' memory.Variable):                      return GetInvalid(string.Format(LMemoryArgBadMove' memory.Handler));                    // {0} was able to remember {2} at {1}'s instruction. {4} that {3}.                  case 49 when memory.Variable == 0 && !GetIsMoveLearnable(pkm' handler' memory.Variable):                      return GetInvalid(string.Format(LMemoryArgBadMove' memory.Handler));              }
Magic Number,PKHeX.Core,MemoryVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\MemoryVerifier.cs,VerifyCommonMemory,The following statement contains a magic number: memory.MemoryID != 4 && !Memories.CanHaveFeeling(memory.MemoryID' memory.Feeling)
Magic Number,PKHeX.Core,MemoryVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\MemoryVerifier.cs,VerifyOTMemory,The following statement contains a magic number: Info.Generation < 6 || pkm.IsEgg
Magic Number,PKHeX.Core,MemoryVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\MemoryVerifier.cs,VerifyOTMemory,The following statement contains a magic number: switch (data.EncounterMatch)              {                  case WC6 g when !g.IsEgg && g.OTGender != 3:                      VerifyOTMemoryIs(data' g.OT_Memory' g.OT_Intensity' g.OT_TextVar' g.OT_Feeling);                      return;                  case WC7 g when !g.IsEgg && g.OTGender != 3:                      VerifyOTMemoryIs(data' g.OT_Memory' g.OT_Intensity' g.OT_TextVar' g.OT_Feeling);                      return;                  case WC8 g when !g.IsEgg && g.OTGender != 3:                      VerifyOTMemoryIs(data' g.OT_Memory' g.OT_Intensity' g.OT_TextVar' g.OT_Feeling);                      return;                    case IMemoryOT t when !(t is MysteryGift):                      VerifyOTMemoryIs(data' t.OT_Memory' t.OT_Intensity' t.OT_TextVar' t.OT_Feeling);                      return;              }
Magic Number,PKHeX.Core,MemoryVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\MemoryVerifier.cs,VerifyOTMemory,The following statement contains a magic number: switch (data.EncounterMatch)              {                  case WC6 g when !g.IsEgg && g.OTGender != 3:                      VerifyOTMemoryIs(data' g.OT_Memory' g.OT_Intensity' g.OT_TextVar' g.OT_Feeling);                      return;                  case WC7 g when !g.IsEgg && g.OTGender != 3:                      VerifyOTMemoryIs(data' g.OT_Memory' g.OT_Intensity' g.OT_TextVar' g.OT_Feeling);                      return;                  case WC8 g when !g.IsEgg && g.OTGender != 3:                      VerifyOTMemoryIs(data' g.OT_Memory' g.OT_Intensity' g.OT_TextVar' g.OT_Feeling);                      return;                    case IMemoryOT t when !(t is MysteryGift):                      VerifyOTMemoryIs(data' t.OT_Memory' t.OT_Intensity' t.OT_TextVar' t.OT_Feeling);                      return;              }
Magic Number,PKHeX.Core,MemoryVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\MemoryVerifier.cs,VerifyOTMemory,The following statement contains a magic number: switch (data.EncounterMatch)              {                  case WC6 g when !g.IsEgg && g.OTGender != 3:                      VerifyOTMemoryIs(data' g.OT_Memory' g.OT_Intensity' g.OT_TextVar' g.OT_Feeling);                      return;                  case WC7 g when !g.IsEgg && g.OTGender != 3:                      VerifyOTMemoryIs(data' g.OT_Memory' g.OT_Intensity' g.OT_TextVar' g.OT_Feeling);                      return;                  case WC8 g when !g.IsEgg && g.OTGender != 3:                      VerifyOTMemoryIs(data' g.OT_Memory' g.OT_Intensity' g.OT_TextVar' g.OT_Feeling);                      return;                    case IMemoryOT t when !(t is MysteryGift):                      VerifyOTMemoryIs(data' t.OT_Memory' t.OT_Intensity' t.OT_TextVar' t.OT_Feeling);                      return;              }
Magic Number,PKHeX.Core,MemoryVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\MemoryVerifier.cs,VerifyOTMemory,The following statement contains a magic number: switch (pkm.OT_Memory)              {                  case 2: // {0} hatched from an Egg and saw {1} for the first time at... {2}. {4} that {3}.                      if (pkm.Egg_Location == 0)                          data.AddLine(Severity.Invalid' string.Format(LMemoryArgBadHatch' L_XOT)' CheckIdentifier.Memory);                      break;                    case 4 when pkm.Gen6: // {0} became {1}’s friend when it arrived via Link Trade at... {2}. {4} that {3}.                      data.AddLine(Severity.Invalid' string.Format(LMemoryArgBadOTEgg' L_XOT)' CheckIdentifier.Memory);                      return;                    case 6: // {0} went to the Pokémon Center in {2} with {1} and had its tired body healed there. {4} that {3}.                      int matchingOriginGame = Array.IndexOf(Memories.LocationsWithPKCenter' pkm.OT_TextVar);                      if (matchingOriginGame != -1)                      {                          var gameID = Memories.GetGameVersionForPokeCenterIndex(matchingOriginGame);                          if (!gameID.Contains((GameVersion)pkm.Version))                              data.AddLine(Severity.Invalid' string.Format(LMemoryArgBadLocation' L_XOT)' CheckIdentifier.Memory);                      }                      data.AddLine(VerifyCommonMemory(pkm' 0));                      return;                    case 14:                      if (!GetCanBeCaptured(pkm.OT_TextVar' Info.Generation' (GameVersion)pkm.Version))                          data.AddLine(Severity.Invalid' string.Format(LMemoryArgBadSpecies' L_XOT)' CheckIdentifier.Memory);                      else                          data.AddLine(Severity.Valid' string.Format(LMemoryArgSpecies' L_XOT)' CheckIdentifier.Memory);                      return;              }
Magic Number,PKHeX.Core,MemoryVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\MemoryVerifier.cs,VerifyOTMemory,The following statement contains a magic number: switch (pkm.OT_Memory)              {                  case 2: // {0} hatched from an Egg and saw {1} for the first time at... {2}. {4} that {3}.                      if (pkm.Egg_Location == 0)                          data.AddLine(Severity.Invalid' string.Format(LMemoryArgBadHatch' L_XOT)' CheckIdentifier.Memory);                      break;                    case 4 when pkm.Gen6: // {0} became {1}’s friend when it arrived via Link Trade at... {2}. {4} that {3}.                      data.AddLine(Severity.Invalid' string.Format(LMemoryArgBadOTEgg' L_XOT)' CheckIdentifier.Memory);                      return;                    case 6: // {0} went to the Pokémon Center in {2} with {1} and had its tired body healed there. {4} that {3}.                      int matchingOriginGame = Array.IndexOf(Memories.LocationsWithPKCenter' pkm.OT_TextVar);                      if (matchingOriginGame != -1)                      {                          var gameID = Memories.GetGameVersionForPokeCenterIndex(matchingOriginGame);                          if (!gameID.Contains((GameVersion)pkm.Version))                              data.AddLine(Severity.Invalid' string.Format(LMemoryArgBadLocation' L_XOT)' CheckIdentifier.Memory);                      }                      data.AddLine(VerifyCommonMemory(pkm' 0));                      return;                    case 14:                      if (!GetCanBeCaptured(pkm.OT_TextVar' Info.Generation' (GameVersion)pkm.Version))                          data.AddLine(Severity.Invalid' string.Format(LMemoryArgBadSpecies' L_XOT)' CheckIdentifier.Memory);                      else                          data.AddLine(Severity.Valid' string.Format(LMemoryArgSpecies' L_XOT)' CheckIdentifier.Memory);                      return;              }
Magic Number,PKHeX.Core,MemoryVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\MemoryVerifier.cs,VerifyOTMemory,The following statement contains a magic number: switch (pkm.OT_Memory)              {                  case 2: // {0} hatched from an Egg and saw {1} for the first time at... {2}. {4} that {3}.                      if (pkm.Egg_Location == 0)                          data.AddLine(Severity.Invalid' string.Format(LMemoryArgBadHatch' L_XOT)' CheckIdentifier.Memory);                      break;                    case 4 when pkm.Gen6: // {0} became {1}’s friend when it arrived via Link Trade at... {2}. {4} that {3}.                      data.AddLine(Severity.Invalid' string.Format(LMemoryArgBadOTEgg' L_XOT)' CheckIdentifier.Memory);                      return;                    case 6: // {0} went to the Pokémon Center in {2} with {1} and had its tired body healed there. {4} that {3}.                      int matchingOriginGame = Array.IndexOf(Memories.LocationsWithPKCenter' pkm.OT_TextVar);                      if (matchingOriginGame != -1)                      {                          var gameID = Memories.GetGameVersionForPokeCenterIndex(matchingOriginGame);                          if (!gameID.Contains((GameVersion)pkm.Version))                              data.AddLine(Severity.Invalid' string.Format(LMemoryArgBadLocation' L_XOT)' CheckIdentifier.Memory);                      }                      data.AddLine(VerifyCommonMemory(pkm' 0));                      return;                    case 14:                      if (!GetCanBeCaptured(pkm.OT_TextVar' Info.Generation' (GameVersion)pkm.Version))                          data.AddLine(Severity.Invalid' string.Format(LMemoryArgBadSpecies' L_XOT)' CheckIdentifier.Memory);                      else                          data.AddLine(Severity.Valid' string.Format(LMemoryArgSpecies' L_XOT)' CheckIdentifier.Memory);                      return;              }
Magic Number,PKHeX.Core,MemoryVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\MemoryVerifier.cs,VerifyOTMemory,The following statement contains a magic number: switch (pkm.OT_Memory)              {                  case 2: // {0} hatched from an Egg and saw {1} for the first time at... {2}. {4} that {3}.                      if (pkm.Egg_Location == 0)                          data.AddLine(Severity.Invalid' string.Format(LMemoryArgBadHatch' L_XOT)' CheckIdentifier.Memory);                      break;                    case 4 when pkm.Gen6: // {0} became {1}’s friend when it arrived via Link Trade at... {2}. {4} that {3}.                      data.AddLine(Severity.Invalid' string.Format(LMemoryArgBadOTEgg' L_XOT)' CheckIdentifier.Memory);                      return;                    case 6: // {0} went to the Pokémon Center in {2} with {1} and had its tired body healed there. {4} that {3}.                      int matchingOriginGame = Array.IndexOf(Memories.LocationsWithPKCenter' pkm.OT_TextVar);                      if (matchingOriginGame != -1)                      {                          var gameID = Memories.GetGameVersionForPokeCenterIndex(matchingOriginGame);                          if (!gameID.Contains((GameVersion)pkm.Version))                              data.AddLine(Severity.Invalid' string.Format(LMemoryArgBadLocation' L_XOT)' CheckIdentifier.Memory);                      }                      data.AddLine(VerifyCommonMemory(pkm' 0));                      return;                    case 14:                      if (!GetCanBeCaptured(pkm.OT_TextVar' Info.Generation' (GameVersion)pkm.Version))                          data.AddLine(Severity.Invalid' string.Format(LMemoryArgBadSpecies' L_XOT)' CheckIdentifier.Memory);                      else                          data.AddLine(Severity.Valid' string.Format(LMemoryArgSpecies' L_XOT)' CheckIdentifier.Memory);                      return;              }
Magic Number,PKHeX.Core,MemoryVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\MemoryVerifier.cs,VerifyHTMemory,The following statement contains a magic number: pkm.Format < 6
Magic Number,PKHeX.Core,MemoryVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\MemoryVerifier.cs,VerifyHTMemory,The following statement contains a magic number: 3 <= gen && gen < 7 && pkm.CurrentHandler == 1
Magic Number,PKHeX.Core,MemoryVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\MemoryVerifier.cs,VerifyHTMemory,The following statement contains a magic number: 3 <= gen && gen < 7 && pkm.CurrentHandler == 1
Magic Number,PKHeX.Core,MemoryVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\MemoryVerifier.cs,VerifyHTMemory,The following statement contains a magic number: pkm.HT_Memory != 4
Magic Number,PKHeX.Core,MemoryVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\MemoryVerifier.cs,VerifyHTMemory,The following statement contains a magic number: pkm.HT_Feeling > 10
Magic Number,PKHeX.Core,MemoryVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\MemoryVerifier.cs,VerifyHTMemory,The following statement contains a magic number: pkm.Format == 7
Magic Number,PKHeX.Core,MemoryVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\MemoryVerifier.cs,VerifyHTMemory,The following statement contains a magic number: switch (pkm.HT_Memory)              {                  case 0:                      if (string.IsNullOrEmpty(pkm.HT_Name))                          return;                      data.AddLine(Severity.Invalid' LMemoryMissingHT' CheckIdentifier.Memory); return;                  case 1: // {0} met {1} at... {2}. {1} threw a Poké Ball at it' and they started to travel together. {4} that {3}.                      data.AddLine(Severity.Invalid' string.Format(LMemoryArgBadCatch' L_XHT)' CheckIdentifier.Memory); return;                    case 2: // {0} hatched from an Egg and saw {1} for the first time at... {2}. {4} that {3}.                      data.AddLine(Severity.Invalid' string.Format(LMemoryArgBadHatch' L_XHT)' CheckIdentifier.Memory); return;                    case 14:                      if (GetCanBeCaptured(pkm.HT_TextVar' 6))                          data.AddLine(Severity.Valid' string.Format(LMemoryArgSpecies' L_XHT)' CheckIdentifier.Memory);                      else                          data.AddLine(Severity.Invalid' string.Format(LMemoryArgBadSpecies' L_XHT)' CheckIdentifier.Memory);                      return;              }
Magic Number,PKHeX.Core,MemoryVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\MemoryVerifier.cs,VerifyHTMemory,The following statement contains a magic number: switch (pkm.HT_Memory)              {                  case 0:                      if (string.IsNullOrEmpty(pkm.HT_Name))                          return;                      data.AddLine(Severity.Invalid' LMemoryMissingHT' CheckIdentifier.Memory); return;                  case 1: // {0} met {1} at... {2}. {1} threw a Poké Ball at it' and they started to travel together. {4} that {3}.                      data.AddLine(Severity.Invalid' string.Format(LMemoryArgBadCatch' L_XHT)' CheckIdentifier.Memory); return;                    case 2: // {0} hatched from an Egg and saw {1} for the first time at... {2}. {4} that {3}.                      data.AddLine(Severity.Invalid' string.Format(LMemoryArgBadHatch' L_XHT)' CheckIdentifier.Memory); return;                    case 14:                      if (GetCanBeCaptured(pkm.HT_TextVar' 6))                          data.AddLine(Severity.Valid' string.Format(LMemoryArgSpecies' L_XHT)' CheckIdentifier.Memory);                      else                          data.AddLine(Severity.Invalid' string.Format(LMemoryArgBadSpecies' L_XHT)' CheckIdentifier.Memory);                      return;              }
Magic Number,PKHeX.Core,MemoryVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\MemoryVerifier.cs,VerifyHTMemory,The following statement contains a magic number: switch (pkm.HT_Memory)              {                  case 0:                      if (string.IsNullOrEmpty(pkm.HT_Name))                          return;                      data.AddLine(Severity.Invalid' LMemoryMissingHT' CheckIdentifier.Memory); return;                  case 1: // {0} met {1} at... {2}. {1} threw a Poké Ball at it' and they started to travel together. {4} that {3}.                      data.AddLine(Severity.Invalid' string.Format(LMemoryArgBadCatch' L_XHT)' CheckIdentifier.Memory); return;                    case 2: // {0} hatched from an Egg and saw {1} for the first time at... {2}. {4} that {3}.                      data.AddLine(Severity.Invalid' string.Format(LMemoryArgBadHatch' L_XHT)' CheckIdentifier.Memory); return;                    case 14:                      if (GetCanBeCaptured(pkm.HT_TextVar' 6))                          data.AddLine(Severity.Valid' string.Format(LMemoryArgSpecies' L_XHT)' CheckIdentifier.Memory);                      else                          data.AddLine(Severity.Invalid' string.Format(LMemoryArgBadSpecies' L_XHT)' CheckIdentifier.Memory);                      return;              }
Magic Number,PKHeX.Core,MemoryVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\MemoryVerifier.cs,GetIsUntradedByEncounterMemories,The following statement contains a magic number: generation < 6
Magic Number,PKHeX.Core,MemoryVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\MemoryVerifier.cs,GetIsUntradedByEncounterMemories,The following statement contains a magic number: return gift.OTGender == 3 && untraded;
Magic Number,PKHeX.Core,MemoryVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\MemoryVerifier.cs,GetCanBeCaptured,The following statement contains a magic number: switch (gen)              {                  // Capture Memory only obtainable via Gen 6.                  case 6:                      switch (version)                      {                          case GameVersion.Any:                              return Legal.FriendSafari.Contains(species)                                     || GetCanBeCaptured(species' SlotsX' StaticX)                                     || GetCanBeCaptured(species' SlotsY' StaticY)                                     || GetCanBeCaptured(species' SlotsA' StaticA)                                     || GetCanBeCaptured(species' SlotsO' StaticO);                          case GameVersion.X:                              return Legal.FriendSafari.Contains(species)                                     || GetCanBeCaptured(species' SlotsX' StaticX);                          case GameVersion.Y:                              return Legal.FriendSafari.Contains(species)                                     || GetCanBeCaptured(species' SlotsY' StaticY);                            case GameVersion.AS:                              return GetCanBeCaptured(species' SlotsA' StaticA);                          case GameVersion.OR:                              return GetCanBeCaptured(species' SlotsO' StaticO);                      }                      break;                    case 8:                  {                      switch (version)                      {                          case GameVersion.SW:                              return GetCanBeCaptured(species' SlotsSW' StaticSW);                          case GameVersion.SH:                              return GetCanBeCaptured(species' SlotsSH' StaticSH);                      }                      break;                  }              }
Magic Number,PKHeX.Core,MemoryVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\MemoryVerifier.cs,GetCanBeCaptured,The following statement contains a magic number: switch (gen)              {                  // Capture Memory only obtainable via Gen 6.                  case 6:                      switch (version)                      {                          case GameVersion.Any:                              return Legal.FriendSafari.Contains(species)                                     || GetCanBeCaptured(species' SlotsX' StaticX)                                     || GetCanBeCaptured(species' SlotsY' StaticY)                                     || GetCanBeCaptured(species' SlotsA' StaticA)                                     || GetCanBeCaptured(species' SlotsO' StaticO);                          case GameVersion.X:                              return Legal.FriendSafari.Contains(species)                                     || GetCanBeCaptured(species' SlotsX' StaticX);                          case GameVersion.Y:                              return Legal.FriendSafari.Contains(species)                                     || GetCanBeCaptured(species' SlotsY' StaticY);                            case GameVersion.AS:                              return GetCanBeCaptured(species' SlotsA' StaticA);                          case GameVersion.OR:                              return GetCanBeCaptured(species' SlotsO' StaticO);                      }                      break;                    case 8:                  {                      switch (version)                      {                          case GameVersion.SW:                              return GetCanBeCaptured(species' SlotsSW' StaticSW);                          case GameVersion.SH:                              return GetCanBeCaptured(species' SlotsSH' StaticSH);                      }                      break;                  }              }
Magic Number,PKHeX.Core,MiscVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\MiscVerifier.cs,Verify,The following statement contains a magic number: pkm is PK7 pk7 && pk7.ResortEventStatus >= 20
Magic Number,PKHeX.Core,MiscVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\MiscVerifier.cs,VerifyMiscG1CatchRate,The following statement contains a magic number: (pk1.Species == 149 && catch_rate == PersonalTable.Y[149].CatchRate) || (GBRestrictions.Species_NotAvailable_CatchRate.Contains(pk1.Species) && catch_rate == PersonalTable.RB[pk1.Species].CatchRate)
Magic Number,PKHeX.Core,MiscVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\MiscVerifier.cs,VerifyMiscG1CatchRate,The following statement contains a magic number: (pk1.Species == 149 && catch_rate == PersonalTable.Y[149].CatchRate) || (GBRestrictions.Species_NotAvailable_CatchRate.Contains(pk1.Species) && catch_rate == PersonalTable.RB[pk1.Species].CatchRate)
Magic Number,PKHeX.Core,MiscVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\MiscVerifier.cs,VerifyMiscFatefulEncounter,The following statement contains a magic number: switch (EncounterMatch)              {                  case WC3 w when w.Fateful:                      if (w.IsEgg)                      {                          // Eggs hatched in RS clear the obedience flag!                          if (pkm.Format != 3)                              return; // possible hatched in either game' don't bother checking                          if (pkm.Met_Location <= 087) // hatched in RS                              break; // ensure fateful is not active                          // else' ensure fateful is active (via below)                      }                      VerifyFatefulIngameActive(data);                      VerifyWC3Shiny(data' w);                      return;                  case WC3 w:                      if (w.Version == GameVersion.XD)                          return; // Can have either state                      VerifyWC3Shiny(data' w);                      break;                  case MysteryGift g when g.Format != 3: // WC3                      VerifyReceivability(data' g);                      VerifyFatefulMysteryGift(data' g);                      return;                  case EncounterStatic s when s.Fateful: // ingame fateful                  case EncounterSlot x when x.Version == GameVersion.XD: // ingame pokespot                  case EncounterTrade t when t.Fateful:                      VerifyFatefulIngameActive(data);                      return;              }
Magic Number,PKHeX.Core,MiscVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\MiscVerifier.cs,VerifyMiscFatefulEncounter,The following statement contains a magic number: switch (EncounterMatch)              {                  case WC3 w when w.Fateful:                      if (w.IsEgg)                      {                          // Eggs hatched in RS clear the obedience flag!                          if (pkm.Format != 3)                              return; // possible hatched in either game' don't bother checking                          if (pkm.Met_Location <= 087) // hatched in RS                              break; // ensure fateful is not active                          // else' ensure fateful is active (via below)                      }                      VerifyFatefulIngameActive(data);                      VerifyWC3Shiny(data' w);                      return;                  case WC3 w:                      if (w.Version == GameVersion.XD)                          return; // Can have either state                      VerifyWC3Shiny(data' w);                      break;                  case MysteryGift g when g.Format != 3: // WC3                      VerifyReceivability(data' g);                      VerifyFatefulMysteryGift(data' g);                      return;                  case EncounterStatic s when s.Fateful: // ingame fateful                  case EncounterSlot x when x.Version == GameVersion.XD: // ingame pokespot                  case EncounterTrade t when t.Fateful:                      VerifyFatefulIngameActive(data);                      return;              }
Magic Number,PKHeX.Core,MiscVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\MiscVerifier.cs,VerifyMiscFatefulEncounter,The following statement contains a magic number: switch (EncounterMatch)              {                  case WC3 w when w.Fateful:                      if (w.IsEgg)                      {                          // Eggs hatched in RS clear the obedience flag!                          if (pkm.Format != 3)                              return; // possible hatched in either game' don't bother checking                          if (pkm.Met_Location <= 087) // hatched in RS                              break; // ensure fateful is not active                          // else' ensure fateful is active (via below)                      }                      VerifyFatefulIngameActive(data);                      VerifyWC3Shiny(data' w);                      return;                  case WC3 w:                      if (w.Version == GameVersion.XD)                          return; // Can have either state                      VerifyWC3Shiny(data' w);                      break;                  case MysteryGift g when g.Format != 3: // WC3                      VerifyReceivability(data' g);                      VerifyFatefulMysteryGift(data' g);                      return;                  case EncounterStatic s when s.Fateful: // ingame fateful                  case EncounterSlot x when x.Version == GameVersion.XD: // ingame pokespot                  case EncounterTrade t when t.Fateful:                      VerifyFatefulIngameActive(data);                      return;              }
Magic Number,PKHeX.Core,MiscVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\MiscVerifier.cs,VerifyMiscEggCommon,The following statement contains a magic number: pkm.Format >= 6 && EncounterMatch is EncounterEgg && !pkm.Moves.SequenceEqual(pkm.RelearnMoves)
Magic Number,PKHeX.Core,MiscVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\MiscVerifier.cs,VerifyVersionEvolution,The following statement contains a magic number: pkm.Format < 7 || data.EncounterMatch.Species == pkm.Species
Magic Number,PKHeX.Core,MiscVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\MiscVerifier.cs,IsCloseEnough,The following statement contains a magic number: return Math.Abs(ia - ib) <= 7;
Magic Number,PKHeX.Core,MiscVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\MiscVerifier.cs,VerifySWSHStats,The following statement contains a magic number: pk8.IsEgg || pk8.DynamaxLevel > 10 || pk8.Species >= (int)Species.Zacian
Magic Number,PKHeX.Core,MiscVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\MiscVerifier.cs,VerifySWSHStats,The following statement contains a magic number: data.AddLine(GetInvalid(string.Format(LMoveSourceTR' LegalityAnalysis.MoveStrings[Legal.TMHM_SWSH[i + 100]])));
Magic Number,PKHeX.Core,MiscVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\MiscVerifier.cs,VerifySWSHStats,The following statement contains a magic number: !(pi ??= pk8.PersonalInfo).TMHM[i + 100]
Magic Number,PKHeX.Core,MiscVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\MiscVerifier.cs,VerifySWSHStats,The following statement contains a magic number: i < 100
Magic Number,PKHeX.Core,NHarmoniaVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\NHarmoniaVerifier.cs,Verify,The following statement contains a magic number: pkm.IVTotal != 30*6
Magic Number,PKHeX.Core,NHarmoniaVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\NHarmoniaVerifier.cs,Verify,The following statement contains a magic number: pkm.IVTotal != 30*6
Magic Number,PKHeX.Core,NHarmoniaVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\NHarmoniaVerifier.cs,VerifyNsPKMOTValid,The following statement contains a magic number: pkm.TID != 00002 || pkm.SID != 00000
Magic Number,PKHeX.Core,NicknameVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\NicknameVerifier.cs,Verify,The following statement contains a magic number: pkm.Format <= 7
Magic Number,PKHeX.Core,NicknameVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\NicknameVerifier.cs,VerifyUnNicknamedEncounter,The following statement contains a magic number: pkm.Format <= 7 && StringConverter.HasEastAsianScriptCharacters(nickname) && !(pkm is PB7)
Magic Number,PKHeX.Core,NicknameVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\NicknameVerifier.cs,VerifyUnNicknamedEncounter,The following statement contains a magic number: var severe = pkm.Format >= 8 || (data.EncounterOriginal.EggEncounter && pkm.WasTradedEgg && nickname.Length <= Legal.GetMaxLengthNickname(data.Info.Generation' English))                              ? Severity.Fishy                              : Severity.Invalid;
Magic Number,PKHeX.Core,NicknameVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\NicknameVerifier.cs,IsNicknameValid,The following statement contains a magic number: return !SpeciesName.IsNicknamedAnyLanguage(pkm.Species' nickname' 4);
Magic Number,PKHeX.Core,NicknameVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\NicknameVerifier.cs,IsNicknameValid,The following statement contains a magic number: return SpeciesName.GetSpeciesNameGeneration(pkm.Species' pkm.Language' 4) == nickname;
Magic Number,PKHeX.Core,NicknameVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\NicknameVerifier.cs,IsNicknameValid,The following statement contains a magic number: pkm.Format == 5 && !pkm.IsNative
Magic Number,PKHeX.Core,NicknameVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\NicknameVerifier.cs,VerifyNicknameEgg,The following statement contains a magic number: switch (pkm.Format)              {                  case 4:                      if (pkm.IsNicknamed) // gen4 doesn't use the nickname flag for eggs                          data.AddLine(GetInvalid(LNickFlagEggNo' CheckIdentifier.Egg));                      break;                  case 7:                      if (EncounterMatch is EncounterStatic ^ !pkm.IsNicknamed) // gen7 doesn't use for ingame gifts                          data.AddLine(GetInvalid(pkm.IsNicknamed ? LNickFlagEggNo : LNickFlagEggYes' CheckIdentifier.Egg));                      break;                  default:                      if (!pkm.IsNicknamed)                          data.AddLine(GetInvalid(LNickFlagEggYes' CheckIdentifier.Egg));                      break;              }
Magic Number,PKHeX.Core,NicknameVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\NicknameVerifier.cs,VerifyNicknameEgg,The following statement contains a magic number: switch (pkm.Format)              {                  case 4:                      if (pkm.IsNicknamed) // gen4 doesn't use the nickname flag for eggs                          data.AddLine(GetInvalid(LNickFlagEggNo' CheckIdentifier.Egg));                      break;                  case 7:                      if (EncounterMatch is EncounterStatic ^ !pkm.IsNicknamed) // gen7 doesn't use for ingame gifts                          data.AddLine(GetInvalid(pkm.IsNicknamed ? LNickFlagEggNo : LNickFlagEggYes' CheckIdentifier.Egg));                      break;                  default:                      if (!pkm.IsNicknamed)                          data.AddLine(GetInvalid(LNickFlagEggYes' CheckIdentifier.Egg));                      break;              }
Magic Number,PKHeX.Core,NicknameVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\NicknameVerifier.cs,VerifyNicknameEgg,The following statement contains a magic number: pkm.Format == 2 && pkm.IsEgg && !SpeciesName.IsNicknamedAnyLanguage(0' pkm.Nickname' 2)
Magic Number,PKHeX.Core,NicknameVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\NicknameVerifier.cs,VerifyNicknameEgg,The following statement contains a magic number: pkm.Format == 2 && pkm.IsEgg && !SpeciesName.IsNicknamedAnyLanguage(0' pkm.Nickname' 2)
Magic Number,PKHeX.Core,NicknameVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\NicknameVerifier.cs,VerifyNicknameTrade,The following statement contains a magic number: switch (data.Info.Generation)              {                  case 1:                  case 2: VerifyTrade12(data' t); return;                  case 3: VerifyTrade3(data' t); return;                  case 4: VerifyTrade4(data' t); return;                  case 5: VerifyTrade5(data' t); return;                  case 6:                  case 7:                  case 8:                      VerifyTrade(data' t' data.pkm.Language); return;              }
Magic Number,PKHeX.Core,NicknameVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\NicknameVerifier.cs,VerifyNicknameTrade,The following statement contains a magic number: switch (data.Info.Generation)              {                  case 1:                  case 2: VerifyTrade12(data' t); return;                  case 3: VerifyTrade3(data' t); return;                  case 4: VerifyTrade4(data' t); return;                  case 5: VerifyTrade5(data' t); return;                  case 6:                  case 7:                  case 8:                      VerifyTrade(data' t' data.pkm.Language); return;              }
Magic Number,PKHeX.Core,NicknameVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\NicknameVerifier.cs,VerifyNicknameTrade,The following statement contains a magic number: switch (data.Info.Generation)              {                  case 1:                  case 2: VerifyTrade12(data' t); return;                  case 3: VerifyTrade3(data' t); return;                  case 4: VerifyTrade4(data' t); return;                  case 5: VerifyTrade5(data' t); return;                  case 6:                  case 7:                  case 8:                      VerifyTrade(data' t' data.pkm.Language); return;              }
Magic Number,PKHeX.Core,NicknameVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\NicknameVerifier.cs,VerifyNicknameTrade,The following statement contains a magic number: switch (data.Info.Generation)              {                  case 1:                  case 2: VerifyTrade12(data' t); return;                  case 3: VerifyTrade3(data' t); return;                  case 4: VerifyTrade4(data' t); return;                  case 5: VerifyTrade5(data' t); return;                  case 6:                  case 7:                  case 8:                      VerifyTrade(data' t' data.pkm.Language); return;              }
Magic Number,PKHeX.Core,NicknameVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\NicknameVerifier.cs,VerifyNicknameTrade,The following statement contains a magic number: switch (data.Info.Generation)              {                  case 1:                  case 2: VerifyTrade12(data' t); return;                  case 3: VerifyTrade3(data' t); return;                  case 4: VerifyTrade4(data' t); return;                  case 5: VerifyTrade5(data' t); return;                  case 6:                  case 7:                  case 8:                      VerifyTrade(data' t' data.pkm.Language); return;              }
Magic Number,PKHeX.Core,NicknameVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\NicknameVerifier.cs,VerifyNicknameTrade,The following statement contains a magic number: switch (data.Info.Generation)              {                  case 1:                  case 2: VerifyTrade12(data' t); return;                  case 3: VerifyTrade3(data' t); return;                  case 4: VerifyTrade4(data' t); return;                  case 5: VerifyTrade5(data' t); return;                  case 6:                  case 7:                  case 8:                      VerifyTrade(data' t' data.pkm.Language); return;              }
Magic Number,PKHeX.Core,NicknameVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\NicknameVerifier.cs,VerifyNicknameTrade,The following statement contains a magic number: switch (data.Info.Generation)              {                  case 1:                  case 2: VerifyTrade12(data' t); return;                  case 3: VerifyTrade3(data' t); return;                  case 4: VerifyTrade4(data' t); return;                  case 5: VerifyTrade5(data' t); return;                  case 6:                  case 7:                  case 8:                      VerifyTrade(data' t' data.pkm.Language); return;              }
Magic Number,PKHeX.Core,NicknameVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\NicknameVerifier.cs,VerifyG1NicknameWithinBounds,The following statement contains a magic number: str.Length > 10
Magic Number,PKHeX.Core,NicknameVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\NicknameVerifier.cs,VerifyTrade3,The following statement contains a magic number: t.Species == 124
Magic Number,PKHeX.Core,NicknameVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\NicknameVerifier.cs,VerifyTrade4,The following statement contains a magic number: pkm.TID == 1000
Magic Number,PKHeX.Core,NicknameVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\NicknameVerifier.cs,VerifyTrade4,The following statement contains a magic number: switch (t.Species)              {                  case (int)Species.Pikachu: // HGSS Pikachu                      lang = DetectTradeLanguageG4SurgePikachu(pkm' t' lang);                      // flag korean on gen4 saves since the pkm.Language is German                      FlagKoreanIncompatibleSameGenTrade(data' pkm' lang);                      break;                  case (int)Species.Magikarp: // DPPt Magikarp                      lang = DetectTradeLanguageG4MeisterMagikarp(pkm' t' lang);                      // flag korean on gen4 saves since the pkm.Language is German                      FlagKoreanIncompatibleSameGenTrade(data' pkm' lang);                      break;                    default:                      if (lang == 1 && (pkm.Version == (int)GameVersion.D || pkm.Version == (int)GameVersion.P))                      {                          // DP English origin are Japanese lang                          if (pkm.OT_Name != t.GetOT(1)) // not japanese                              lang = 2; // English                      }                      break;              }
Magic Number,PKHeX.Core,NicknameVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\NicknameVerifier.cs,FlagKoreanIncompatibleSameGenTrade,The following statement contains a magic number: pkm.Format != 4 || lang != (int)Korean
Magic Number,PKHeX.Core,NicknameVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\NicknameVerifier.cs,DetectTradeLanguageG4SurgePikachu,The following statement contains a magic number: lang == 2
Magic Number,PKHeX.Core,NicknameVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\NicknameVerifier.cs,VerifyTrade5,The following statement contains a magic number: pkm.Format == 5 && lang == (int)Japanese
Magic Number,PKHeX.Core,NicknameVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\NicknameVerifier.cs,CheckTradeOTOnly,The following statement contains a magic number: pkm.IsNicknamed && pkm.Format < 8
Magic Number,PKHeX.Core,ParseSettings,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\ParseSettings.cs,InitFromSaveFileData,The following statement contains a magic number: sav.Generation >= 3
Magic Number,PKHeX.Core,PIDVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\PIDVerifier.cs,Verify,The following statement contains a magic number: pkm.Format >= 6
Magic Number,PKHeX.Core,PIDVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\PIDVerifier.cs,Verify,The following statement contains a magic number: EncounterMatch.Species == 265
Magic Number,PKHeX.Core,PIDVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\PIDVerifier.cs,Verify,The following statement contains a magic number: pkm.Nature >= 25
Magic Number,PKHeX.Core,PIDVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\PIDVerifier.cs,Verify,The following statement contains a magic number: (Info.Generation >= 6 || (Info.Generation < 3 && pkm.Format >= 7)) && pkm.PID == pkm.EncryptionConstant
Magic Number,PKHeX.Core,PIDVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\PIDVerifier.cs,Verify,The following statement contains a magic number: (Info.Generation >= 6 || (Info.Generation < 3 && pkm.Format >= 7)) && pkm.PID == pkm.EncryptionConstant
Magic Number,PKHeX.Core,PIDVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\PIDVerifier.cs,Verify,The following statement contains a magic number: (Info.Generation >= 6 || (Info.Generation < 3 && pkm.Format >= 7)) && pkm.PID == pkm.EncryptionConstant
Magic Number,PKHeX.Core,PIDVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\PIDVerifier.cs,VerifyShiny,The following statement contains a magic number: switch (data.EncounterMatch)              {                  case EncounterStatic s:                      if (!s.Shiny.IsValid(pkm))                          data.AddLine(GetInvalid(LEncStaticPIDShiny' CheckIdentifier.Shiny));                        // gen5 correlation                      if (Info.Generation != 5)                          break;                      if (s.Location == 75) // Entree Forest                          break;                      if (s.Gift || s.Roaming || s.Ability != 4)                          break;                      if (s is EncounterStaticN p && p.NSparkle)                          break;                      VerifyG5PID_IDCorrelation(data);                      break;                    case EncounterSlot w:                      if (pkm.IsShiny && w.Type == SlotType.HiddenGrotto)                          data.AddLine(GetInvalid(LG5PIDShinyGrotto' CheckIdentifier.Shiny));                      if (Info.Generation == 5 && w.Type != SlotType.HiddenGrotto)                          VerifyG5PID_IDCorrelation(data);                      break;                    case PCD d: // fixed PID                      if (d.Gift.PK.PID != 1 && pkm.EncryptionConstant != d.Gift.PK.PID)                          data.AddLine(GetInvalid(LEncGiftPIDMismatch' CheckIdentifier.Shiny));                      break;                    case WC7 wc7 when wc7.IsAshGreninjaWC7(pkm) && pkm.IsShiny:                          data.AddLine(GetInvalid(LEncGiftShinyMismatch' CheckIdentifier.Shiny));                      break;              }
Magic Number,PKHeX.Core,PIDVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\PIDVerifier.cs,VerifyShiny,The following statement contains a magic number: switch (data.EncounterMatch)              {                  case EncounterStatic s:                      if (!s.Shiny.IsValid(pkm))                          data.AddLine(GetInvalid(LEncStaticPIDShiny' CheckIdentifier.Shiny));                        // gen5 correlation                      if (Info.Generation != 5)                          break;                      if (s.Location == 75) // Entree Forest                          break;                      if (s.Gift || s.Roaming || s.Ability != 4)                          break;                      if (s is EncounterStaticN p && p.NSparkle)                          break;                      VerifyG5PID_IDCorrelation(data);                      break;                    case EncounterSlot w:                      if (pkm.IsShiny && w.Type == SlotType.HiddenGrotto)                          data.AddLine(GetInvalid(LG5PIDShinyGrotto' CheckIdentifier.Shiny));                      if (Info.Generation == 5 && w.Type != SlotType.HiddenGrotto)                          VerifyG5PID_IDCorrelation(data);                      break;                    case PCD d: // fixed PID                      if (d.Gift.PK.PID != 1 && pkm.EncryptionConstant != d.Gift.PK.PID)                          data.AddLine(GetInvalid(LEncGiftPIDMismatch' CheckIdentifier.Shiny));                      break;                    case WC7 wc7 when wc7.IsAshGreninjaWC7(pkm) && pkm.IsShiny:                          data.AddLine(GetInvalid(LEncGiftShinyMismatch' CheckIdentifier.Shiny));                      break;              }
Magic Number,PKHeX.Core,PIDVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\PIDVerifier.cs,VerifyShiny,The following statement contains a magic number: switch (data.EncounterMatch)              {                  case EncounterStatic s:                      if (!s.Shiny.IsValid(pkm))                          data.AddLine(GetInvalid(LEncStaticPIDShiny' CheckIdentifier.Shiny));                        // gen5 correlation                      if (Info.Generation != 5)                          break;                      if (s.Location == 75) // Entree Forest                          break;                      if (s.Gift || s.Roaming || s.Ability != 4)                          break;                      if (s is EncounterStaticN p && p.NSparkle)                          break;                      VerifyG5PID_IDCorrelation(data);                      break;                    case EncounterSlot w:                      if (pkm.IsShiny && w.Type == SlotType.HiddenGrotto)                          data.AddLine(GetInvalid(LG5PIDShinyGrotto' CheckIdentifier.Shiny));                      if (Info.Generation == 5 && w.Type != SlotType.HiddenGrotto)                          VerifyG5PID_IDCorrelation(data);                      break;                    case PCD d: // fixed PID                      if (d.Gift.PK.PID != 1 && pkm.EncryptionConstant != d.Gift.PK.PID)                          data.AddLine(GetInvalid(LEncGiftPIDMismatch' CheckIdentifier.Shiny));                      break;                    case WC7 wc7 when wc7.IsAshGreninjaWC7(pkm) && pkm.IsShiny:                          data.AddLine(GetInvalid(LEncGiftShinyMismatch' CheckIdentifier.Shiny));                      break;              }
Magic Number,PKHeX.Core,PIDVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\PIDVerifier.cs,VerifyShiny,The following statement contains a magic number: switch (data.EncounterMatch)              {                  case EncounterStatic s:                      if (!s.Shiny.IsValid(pkm))                          data.AddLine(GetInvalid(LEncStaticPIDShiny' CheckIdentifier.Shiny));                        // gen5 correlation                      if (Info.Generation != 5)                          break;                      if (s.Location == 75) // Entree Forest                          break;                      if (s.Gift || s.Roaming || s.Ability != 4)                          break;                      if (s is EncounterStaticN p && p.NSparkle)                          break;                      VerifyG5PID_IDCorrelation(data);                      break;                    case EncounterSlot w:                      if (pkm.IsShiny && w.Type == SlotType.HiddenGrotto)                          data.AddLine(GetInvalid(LG5PIDShinyGrotto' CheckIdentifier.Shiny));                      if (Info.Generation == 5 && w.Type != SlotType.HiddenGrotto)                          VerifyG5PID_IDCorrelation(data);                      break;                    case PCD d: // fixed PID                      if (d.Gift.PK.PID != 1 && pkm.EncryptionConstant != d.Gift.PK.PID)                          data.AddLine(GetInvalid(LEncGiftPIDMismatch' CheckIdentifier.Shiny));                      break;                    case WC7 wc7 when wc7.IsAshGreninjaWC7(pkm) && pkm.IsShiny:                          data.AddLine(GetInvalid(LEncGiftShinyMismatch' CheckIdentifier.Shiny));                      break;              }
Magic Number,PKHeX.Core,PIDVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\PIDVerifier.cs,VerifyG5PID_IDCorrelation,The following statement contains a magic number: var result = (pid & 1) ^ (pid >> 31) ^ (pkm.TID & 1) ^ (pkm.SID & 1);
Magic Number,PKHeX.Core,PIDVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\PIDVerifier.cs,VerifyECPIDWurmple,The following statement contains a magic number: var spec = evoVal == 0 ? LegalityAnalysis.SpeciesStrings[267] : LegalityAnalysis.SpeciesStrings[269];
Magic Number,PKHeX.Core,PIDVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\PIDVerifier.cs,VerifyECPIDWurmple,The following statement contains a magic number: var spec = evoVal == 0 ? LegalityAnalysis.SpeciesStrings[267] : LegalityAnalysis.SpeciesStrings[269];
Magic Number,PKHeX.Core,PIDVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\PIDVerifier.cs,VerifyECPIDWurmple,The following statement contains a magic number: pkm.Species == 265
Magic Number,PKHeX.Core,PIDVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\PIDVerifier.cs,VerifyEC,The following statement contains a magic number: 3 <= Info.Generation && Info.Generation <= 5
Magic Number,PKHeX.Core,PIDVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\PIDVerifier.cs,VerifyEC,The following statement contains a magic number: 3 <= Info.Generation && Info.Generation <= 5
Magic Number,PKHeX.Core,PIDVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\PIDVerifier.cs,VerifyTransferEC,The following statement contains a magic number: bool xorPID = ((pkm.TID ^ pkm.SID ^ (int)(pkm.PID & 0xFFFF) ^ (int)(pkm.PID >> 16)) & ~0x7) == 8;
Magic Number,PKHeX.Core,PIDVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\PIDVerifier.cs,VerifyTransferEC,The following statement contains a magic number: bool xorPID = ((pkm.TID ^ pkm.SID ^ (int)(pkm.PID & 0xFFFF) ^ (int)(pkm.PID >> 16)) & ~0x7) == 8;
Magic Number,PKHeX.Core,RibbonStrings,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\Ribbons\RibbonStrings.cs,ResetDictionary,The following statement contains a magic number: split.Length != 2
Magic Number,PKHeX.Core,RibbonVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\Ribbons\RibbonVerifier.cs,Verify,The following statement contains a magic number: int gen = Info.Generation < 3 ? 7 : Info.Generation;
Magic Number,PKHeX.Core,RibbonVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\Ribbons\RibbonVerifier.cs,Verify,The following statement contains a magic number: int gen = Info.Generation < 3 ? 7 : Info.Generation;
Magic Number,PKHeX.Core,RibbonVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\Ribbons\RibbonVerifier.cs,GetInvalidRibbons,The following statement contains a magic number: artist = o3.RibbonCounts().Any(z => z == 4);
Magic Number,PKHeX.Core,RibbonVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\Ribbons\RibbonVerifier.cs,GetInvalidRibbons,The following statement contains a magic number: gen != 3 || !IsAllowedBattleFrontier(pkm.Species)
Magic Number,PKHeX.Core,RibbonVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\Ribbons\RibbonVerifier.cs,GetInvalidRibbons,The following statement contains a magic number: !IsAllowedBattleFrontier(pkm.Species' pkm.AltForm' 4)
Magic Number,PKHeX.Core,RibbonVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\Ribbons\RibbonVerifier.cs,GetInvalidRibbons,The following statement contains a magic number: var iter3 = gen == 3 ? getMissingContestRibbons(c3' c3n) : GetInvalidRibbonsNone(c3' c3n);
Magic Number,PKHeX.Core,RibbonVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\Ribbons\RibbonVerifier.cs,GetInvalidRibbons,The following statement contains a magic number: var iter4 = (gen == 3 || gen == 4) && IsAllowedInContest4(pkm.Species) ? getMissingContestRibbons(c4' c4n) : GetInvalidRibbonsNone(c4' c4n);
Magic Number,PKHeX.Core,RibbonVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\Ribbons\RibbonVerifier.cs,GetInvalidRibbons,The following statement contains a magic number: var iter4 = (gen == 3 || gen == 4) && IsAllowedInContest4(pkm.Species) ? getMissingContestRibbons(c4' c4n) : GetInvalidRibbonsNone(c4' c4n);
Magic Number,PKHeX.Core,RibbonVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\Ribbons\RibbonVerifier.cs,GetInvalidRibbons,The following statement contains a magic number: artist |= c3[3 | i << 2];
Magic Number,PKHeX.Core,RibbonVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\Ribbons\RibbonVerifier.cs,GetInvalidRibbons,The following statement contains a magic number: artist |= c3[3 | i << 2];
Magic Number,PKHeX.Core,RibbonVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\Ribbons\RibbonVerifier.cs,GetInvalidRibbons,The following statement contains a magic number: i < 5
Magic Number,PKHeX.Core,RibbonVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\Ribbons\RibbonVerifier.cs,GetInvalidRibbons,The following statement contains a magic number: bool inhabited4 = 3 <= gen && gen <= 4;
Magic Number,PKHeX.Core,RibbonVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\Ribbons\RibbonVerifier.cs,GetInvalidRibbons,The following statement contains a magic number: bool inhabited4 = 3 <= gen && gen <= 4;
Magic Number,PKHeX.Core,RibbonVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\Ribbons\RibbonVerifier.cs,GetInvalidRibbons,The following statement contains a magic number: artist = s6.RibbonCountMemoryContest >= 4;
Magic Number,PKHeX.Core,RibbonVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\Ribbons\RibbonVerifier.cs,GetInvalidRibbons,The following statement contains a magic number: bool inhabited6 = 3 <= gen && gen <= 6;
Magic Number,PKHeX.Core,RibbonVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\Ribbons\RibbonVerifier.cs,GetInvalidRibbons,The following statement contains a magic number: bool inhabited6 = 3 <= gen && gen <= 6;
Magic Number,PKHeX.Core,RibbonVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\Ribbons\RibbonVerifier.cs,GetInvalidRibbons,The following statement contains a magic number: s6.RibbonBestFriends && pkm.OT_Affection < 255 && pkm.IsUntraded
Magic Number,PKHeX.Core,RibbonVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\Ribbons\RibbonVerifier.cs,GetInvalidRibbons,The following statement contains a magic number: bool inhabited7 = gen <= 7;
Magic Number,PKHeX.Core,RibbonVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\Ribbons\RibbonVerifier.cs,GetInvalidRibbons,The following statement contains a magic number: s3.RibbonChampionG3Hoenn && gen != 3
Magic Number,PKHeX.Core,RibbonVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\Ribbons\RibbonVerifier.cs,GetInvalidRibbons,The following statement contains a magic number: s3.RibbonArtist && (gen != 3 || !artist)
Magic Number,PKHeX.Core,RibbonVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\Ribbons\RibbonVerifier.cs,GetInvalidRibbons,The following statement contains a magic number: s3.RibbonEffort && gen == 5 && pkm.Format == 5
Magic Number,PKHeX.Core,RibbonVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\Ribbons\RibbonVerifier.cs,GetInvalidRibbons,The following statement contains a magic number: s3.RibbonEffort && gen == 5 && pkm.Format == 5
Magic Number,PKHeX.Core,RibbonVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\Ribbons\RibbonVerifier.cs,GetInvalidRibbons4Any,The following statement contains a magic number: s4.RibbonFootprint && ((pkm.Format < 6 && gen == 5) || (gen >= 5 && pkm.CurrentLevel - pkm.Met_Level < 30))
Magic Number,PKHeX.Core,RibbonVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\Ribbons\RibbonVerifier.cs,GetInvalidRibbons4Any,The following statement contains a magic number: s4.RibbonFootprint && ((pkm.Format < 6 && gen == 5) || (gen >= 5 && pkm.CurrentLevel - pkm.Met_Level < 30))
Magic Number,PKHeX.Core,RibbonVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\Ribbons\RibbonVerifier.cs,GetInvalidRibbons4Any,The following statement contains a magic number: s4.RibbonFootprint && ((pkm.Format < 6 && gen == 5) || (gen >= 5 && pkm.CurrentLevel - pkm.Met_Level < 30))
Magic Number,PKHeX.Core,RibbonVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\Ribbons\RibbonVerifier.cs,GetInvalidRibbons4Any,The following statement contains a magic number: s4.RibbonFootprint && ((pkm.Format < 6 && gen == 5) || (gen >= 5 && pkm.CurrentLevel - pkm.Met_Level < 30))
Magic Number,PKHeX.Core,RibbonVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\Ribbons\RibbonVerifier.cs,GetInvalidRibbons4Any,The following statement contains a magic number: bool gen34 = gen == 3 || gen == 4;
Magic Number,PKHeX.Core,RibbonVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\Ribbons\RibbonVerifier.cs,GetInvalidRibbons4Any,The following statement contains a magic number: bool gen34 = gen == 3 || gen == 4;
Magic Number,PKHeX.Core,RibbonVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\Ribbons\RibbonVerifier.cs,GetInvalidRibbons4Any,The following statement contains a magic number: bool not6 = pkm.Format < 6 || gen > 6 || gen < 3;
Magic Number,PKHeX.Core,RibbonVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\Ribbons\RibbonVerifier.cs,GetInvalidRibbons4Any,The following statement contains a magic number: bool not6 = pkm.Format < 6 || gen > 6 || gen < 3;
Magic Number,PKHeX.Core,RibbonVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\Ribbons\RibbonVerifier.cs,GetInvalidRibbons4Any,The following statement contains a magic number: bool not6 = pkm.Format < 6 || gen > 6 || gen < 3;
Magic Number,PKHeX.Core,RibbonVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\Ribbons\RibbonVerifier.cs,GetInvalidRibbons6Any,The following statement contains a magic number: var present = contMemory.Where((_' i) => contest[i] && affect < 20 * ++contCount);
Magic Number,PKHeX.Core,RibbonVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\Ribbons\RibbonVerifier.cs,GetInvalidRibbons6Any,The following statement contains a magic number: const int mem_Chatelaine = 30;
Magic Number,PKHeX.Core,RibbonVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\Ribbons\RibbonVerifier.cs,GetInvalidRibbons6Memory,The following statement contains a magic number: switch (gen)              {                  case 3:                      contest = IsAllowedInContest4(pkm.Species) ? 40 : 20;                      battle = IsAllowedBattleFrontier(pkm.Species) ? 8 : 0;                      break;                  case 4:                      contest = IsAllowedInContest4(pkm.Species) ? 20 : 0;                      battle = IsAllowedBattleFrontier(pkm.Species) ? 6 : 0;                      break;              }
Magic Number,PKHeX.Core,RibbonVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\Ribbons\RibbonVerifier.cs,GetInvalidRibbons6Memory,The following statement contains a magic number: switch (gen)              {                  case 3:                      contest = IsAllowedInContest4(pkm.Species) ? 40 : 20;                      battle = IsAllowedBattleFrontier(pkm.Species) ? 8 : 0;                      break;                  case 4:                      contest = IsAllowedInContest4(pkm.Species) ? 20 : 0;                      battle = IsAllowedBattleFrontier(pkm.Species) ? 6 : 0;                      break;              }
Magic Number,PKHeX.Core,RibbonVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\Ribbons\RibbonVerifier.cs,GetInvalidRibbons6Memory,The following statement contains a magic number: switch (gen)              {                  case 3:                      contest = IsAllowedInContest4(pkm.Species) ? 40 : 20;                      battle = IsAllowedBattleFrontier(pkm.Species) ? 8 : 0;                      break;                  case 4:                      contest = IsAllowedInContest4(pkm.Species) ? 20 : 0;                      battle = IsAllowedBattleFrontier(pkm.Species) ? 6 : 0;                      break;              }
Magic Number,PKHeX.Core,RibbonVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\Ribbons\RibbonVerifier.cs,GetInvalidRibbons6Memory,The following statement contains a magic number: switch (gen)              {                  case 3:                      contest = IsAllowedInContest4(pkm.Species) ? 40 : 20;                      battle = IsAllowedBattleFrontier(pkm.Species) ? 8 : 0;                      break;                  case 4:                      contest = IsAllowedInContest4(pkm.Species) ? 20 : 0;                      battle = IsAllowedBattleFrontier(pkm.Species) ? 6 : 0;                      break;              }
Magic Number,PKHeX.Core,RibbonVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\Ribbons\RibbonVerifier.cs,GetInvalidRibbons6Memory,The following statement contains a magic number: switch (gen)              {                  case 3:                      contest = IsAllowedInContest4(pkm.Species) ? 40 : 20;                      battle = IsAllowedBattleFrontier(pkm.Species) ? 8 : 0;                      break;                  case 4:                      contest = IsAllowedInContest4(pkm.Species) ? 20 : 0;                      battle = IsAllowedBattleFrontier(pkm.Species) ? 6 : 0;                      break;              }
Magic Number,PKHeX.Core,RibbonVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\Ribbons\RibbonVerifier.cs,GetInvalidRibbons6Memory,The following statement contains a magic number: switch (gen)              {                  case 3:                      contest = IsAllowedInContest4(pkm.Species) ? 40 : 20;                      battle = IsAllowedBattleFrontier(pkm.Species) ? 8 : 0;                      break;                  case 4:                      contest = IsAllowedInContest4(pkm.Species) ? 20 : 0;                      battle = IsAllowedBattleFrontier(pkm.Species) ? 6 : 0;                      break;              }
Magic Number,PKHeX.Core,RibbonVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\Ribbons\RibbonVerifier.cs,GetInvalidRibbons6Memory,The following statement contains a magic number: switch (gen)              {                  case 3:                      contest = IsAllowedInContest4(pkm.Species) ? 40 : 20;                      battle = IsAllowedBattleFrontier(pkm.Species) ? 8 : 0;                      break;                  case 4:                      contest = IsAllowedInContest4(pkm.Species) ? 20 : 0;                      battle = IsAllowedBattleFrontier(pkm.Species) ? 6 : 0;                      break;              }
Magic Number,PKHeX.Core,RibbonVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\Ribbons\RibbonVerifier.cs,GetInvalidRibbons6Traded,The following statement contains a magic number: const int req = 12;
Magic Number,PKHeX.Core,RibbonVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\Ribbons\RibbonVerifier.cs,GetInvalidRibbons6Traded,The following statement contains a magic number: s6.RibbonTraining && pkm.Format <= 7
Magic Number,PKHeX.Core,RibbonVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\Ribbons\RibbonVerifier.cs,GetInvalidRibbons6Traded,The following statement contains a magic number: const int mem_Champion = 27;
Magic Number,PKHeX.Core,RibbonVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\Ribbons\RibbonVerifier.cs,GetInvalidRibbonsEvent1,The following statement contains a magic number: pkm.Version == 15 && encounterContent is EncounterStaticShadow s
Magic Number,PKHeX.Core,RibbonVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\Ribbons\RibbonVerifier.cs,IsAllowedBattleFrontier,The following statement contains a magic number: gen == 4 && species == 172 && form == 1
Magic Number,PKHeX.Core,RibbonVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\Ribbons\RibbonVerifier.cs,IsAllowedBattleFrontier,The following statement contains a magic number: gen == 4 && species == 172 && form == 1
Magic Number,PKHeX.Core,TrainerNameVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\TrainerNameVerifier.cs,IsEdgeCaseLength,The following statement contains a magic number: bool eggEdge = pkm.IsEgg ? pkm.IsTradedEgg || pkm.Format == 3 : pkm.WasTradedEgg;
Magic Number,PKHeX.Core,TrainerNameVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\TrainerNameVerifier.cs,VerifyOTG1,The following statement contains a magic number: !OTMatch || pkm.TID != 22796
Magic Number,PKHeX.Core,TrainerNameVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\TrainerNameVerifier.cs,VerifyOTG1,The following statement contains a magic number: pkm.Species == 151
Magic Number,PKHeX.Core,TrainerNameVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\TrainerNameVerifier.cs,VerifyOTG1,The following statement contains a magic number: pkm.OT_Gender == 1 && ((pkm.Format == 2 && pkm.Met_Location == 0) || (pkm.Format > 2 && pkm.VC1))
Magic Number,PKHeX.Core,TrainerNameVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\TrainerNameVerifier.cs,VerifyOTG1,The following statement contains a magic number: pkm.OT_Gender == 1 && ((pkm.Format == 2 && pkm.Met_Location == 0) || (pkm.Format > 2 && pkm.VC1))
Magic Number,PKHeX.Core,TrainerNameVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\TrainerNameVerifier.cs,VerifyG1OTWithinBounds,The following statement contains a magic number: str.Length > 7 && !(data.EncounterOriginal is EncounterTrade)
Magic Number,PKHeX.Core,TrainerNameVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\TrainerNameVerifier.cs,ContainsTooManyNumbers,The following statement contains a magic number: originalGeneration <= 3
Magic Number,PKHeX.Core,TrainerNameVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\TrainerNameVerifier.cs,ContainsTooManyNumbers,The following statement contains a magic number: int max = originalGeneration < 6 ? 4 : 5;
Magic Number,PKHeX.Core,TrainerNameVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\TrainerNameVerifier.cs,ContainsTooManyNumbers,The following statement contains a magic number: int max = originalGeneration < 6 ? 4 : 5;
Magic Number,PKHeX.Core,TrainerNameVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\TrainerNameVerifier.cs,ContainsTooManyNumbers,The following statement contains a magic number: int max = originalGeneration < 6 ? 4 : 5;
Magic Number,PKHeX.Core,TransferVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\TransferVerifier.cs,VerifyTransferVCNatureEXP,The following statement contains a magic number: met == 100
Magic Number,PKHeX.Core,TransferVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\TransferVerifier.cs,VerifyTransferVCNatureEXP,The following statement contains a magic number: met <= 2
Magic Number,PKHeX.Core,TransferVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\TransferVerifier.cs,VerifyVCNature,The following statement contains a magic number: return growth switch              {                  0 => // MediumFast -- Can't be Brave' Adamant' Naughty' Bold' Docile' or Relaxed                  (nature < (int) Nature.Brave || nature > (int) Nature.Relaxed)'                  4 => // Fast -- Can't be Gentle' Sassy' Careful' Quirky' Hardy' Lonely' Brave' Adamant' Naughty' or Bold                  (nature < (int) Nature.Gentle && nature > (int) Nature.Bold)'                  5 => // Slow -- Can't be Impish or Lax                  (nature != (int) Nature.Impish && nature != (int) Nature.Lax)'                  _ => true              };
Magic Number,PKHeX.Core,TransferVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\TransferVerifier.cs,VerifyVCNature,The following statement contains a magic number: return growth switch              {                  0 => // MediumFast -- Can't be Brave' Adamant' Naughty' Bold' Docile' or Relaxed                  (nature < (int) Nature.Brave || nature > (int) Nature.Relaxed)'                  4 => // Fast -- Can't be Gentle' Sassy' Careful' Quirky' Hardy' Lonely' Brave' Adamant' Naughty' or Bold                  (nature < (int) Nature.Gentle && nature > (int) Nature.Bold)'                  5 => // Slow -- Can't be Impish or Lax                  (nature != (int) Nature.Impish && nature != (int) Nature.Lax)'                  _ => true              };
Magic Number,PKHeX.Core,TransferVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\TransferVerifier.cs,VerifyTransferLegalityG3,The following statement contains a magic number: pkm.Format == 4
Magic Number,PKHeX.Core,TransferVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\TransferVerifier.cs,VerifyVCEncounter,The following statement contains a magic number: exceptions |= v.Version == GameVersion.VCEvents && encounter.Species == 151 && pkm.TID == 22796;
Magic Number,PKHeX.Core,TransferVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\TransferVerifier.cs,VerifyVCEncounter,The following statement contains a magic number: exceptions |= v.Version == GameVersion.VCEvents && encounter.Species == 151 && pkm.TID == 22796;
Magic Number,PKHeX.Core,TransferVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\TransferVerifier.cs,VerifyVCEncounter,The following statement contains a magic number: FlagIncompatibleTransferMove(pkm' Moves' 146' 2);
Magic Number,PKHeX.Core,TransferVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\TransferVerifier.cs,VerifyVCEncounter,The following statement contains a magic number: FlagIncompatibleTransferMove(pkm' Moves' 146' 2);
Magic Number,PKHeX.Core,TransferVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\TransferVerifier.cs,VerifyVCEncounter,The following statement contains a magic number: encounter is EncounterStatic s && s.Version == GameVersion.C && s.EggLocation == 256
Magic Number,PKHeX.Core,TransferVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\TransferVerifier.cs,VerifyVCEncounter,The following statement contains a magic number: pkm.PersonalInfo.Gender == 31 && pkm.IsShiny
Magic Number,PKHeX.Core,DataMysteryGift,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\MysteryGifts\MysteryGift.cs,GetHashCode,The following statement contains a magic number: int hash = 17;
Magic Number,PKHeX.Core,DataMysteryGift,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\MysteryGifts\MysteryGift.cs,GetHashCode,The following statement contains a magic number: hash = (hash * 31) + b;
Magic Number,PKHeX.Core,MysteryGift,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\MysteryGifts\MysteryGift.cs,GetMysteryGift,The following statement contains a magic number: switch (data.Length)              {                  case WC6Full.Size:                      // Check WC7 size collision                      if (data[0x205] == 0) // 3 * 0x46 for gen6' now only 2.                          return new WC7Full(data).Gift;                      return new WC6Full(data).Gift;                  case WC6.Size:                      // Check year for WC7 size collision                      if (BitConverter.ToUInt32(data' 0x4C) / 10000 < 2000)                          return new WC7(data);                      return new WC6(data);                  case WR7.Size: return new WR7(data);                  case WC8.Size: return new WC8(data);                    case PGF.Size: return new PGF(data);                  case PGT.Size: return new PGT(data);                  case PCD.Size: return new PCD(data);                  default: return null;              }
Magic Number,PKHeX.Core,MysteryGift,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\MysteryGifts\MysteryGift.cs,GetMysteryGift,The following statement contains a magic number: switch (data.Length)              {                  case WC6Full.Size:                      // Check WC7 size collision                      if (data[0x205] == 0) // 3 * 0x46 for gen6' now only 2.                          return new WC7Full(data).Gift;                      return new WC6Full(data).Gift;                  case WC6.Size:                      // Check year for WC7 size collision                      if (BitConverter.ToUInt32(data' 0x4C) / 10000 < 2000)                          return new WC7(data);                      return new WC6(data);                  case WR7.Size: return new WR7(data);                  case WC8.Size: return new WC8(data);                    case PGF.Size: return new PGF(data);                  case PGT.Size: return new PGT(data);                  case PCD.Size: return new PCD(data);                  default: return null;              }
Magic Number,PKHeX.Core,MysteryUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\MysteryGifts\MysteryUtil.cs,AddLinesPKM,The following statement contains a magic number: var id = gift.Format < 7 ? $"{gift.TID:D5}/{gift.SID:D5}" : $"[{gift.TrainerSID7:D4}]{gift.TrainerID7:D6}";
Magic Number,PKHeX.Core,MysteryUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\MysteryGifts\MysteryUtil.cs,IsCardCompatible,The following statement contains a magic number: g is WC6 && g.CardID == 2048 && g.ItemID == 726
Magic Number,PKHeX.Core,MysteryUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\MysteryGifts\MysteryUtil.cs,IsCardCompatible,The following statement contains a magic number: g is WC6 && g.CardID == 2048 && g.ItemID == 726
Magic Number,PKHeX.Core,PCD,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\MysteryGifts\PCD.cs,GiftEquals,The following statement contains a magic number: g.Length != c.Length || g.Length < 3
Magic Number,PKHeX.Core,PCD,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\MysteryGifts\PCD.cs,GiftEquals,The following statement contains a magic number: i < 2
Magic Number,PKHeX.Core,PCD,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\MysteryGifts\PCD.cs,IsMatchExact,The following statement contains a magic number: pkm.Format != 4
Magic Number,PKHeX.Core,PCD,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\MysteryGifts\PCD.cs,IsMatchExact,The following statement contains a magic number: wc.OT_Gender < 3 && wc.OT_Gender != pkm.OT_Gender
Magic Number,PKHeX.Core,PCD,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\MysteryGifts\PCD.cs,IsMatchExact,The following statement contains a magic number: wc.Gender != 3 && wc.Gender != pkm.Gender
Magic Number,PKHeX.Core,PGF,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\MysteryGifts\PGF.cs,ConvertToPKM,The following statement contains a magic number: int currentLevel = Level > 0 ? Level : Util.Rand.Next(100) + 1;
Magic Number,PKHeX.Core,PGF,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\MysteryGifts\PGF.cs,ConvertToPKM,The following statement contains a magic number: PK5 pk = new PK5              {                  Species = Species'                  HeldItem = HeldItem'                  Met_Level = currentLevel'                  Nature = Nature != -1 ? Nature : Util.Rand.Next(25)'                  AltForm = Form'                  Version = OriginGame == 0 ? SAV.Game : OriginGame'                  Language = Language == 0 ? SAV.Language : Language'                  Ball = Ball'                  Move1 = Move1'                  Move2 = Move2'                  Move3 = Move3'                  Move4 = Move4'                  Met_Location = MetLocation'                  MetDate = Date'                  Egg_Location = EggLocation'                  CNT_Cool = CNT_Cool'                  CNT_Beauty = CNT_Beauty'                  CNT_Cute = CNT_Cute'                  CNT_Smart = CNT_Smart'                  CNT_Tough = CNT_Tough'                  CNT_Sheen = CNT_Sheen'                    EXP = Experience.GetEXP(currentLevel' pi.EXPGrowth)'                    // Ribbons                  RibbonCountry = RibbonCountry'                  RibbonNational = RibbonNational'                  RibbonEarth = RibbonEarth'                  RibbonWorld = RibbonWorld'                  RibbonClassic = RibbonClassic'                  RibbonPremier = RibbonPremier'                  RibbonEvent = RibbonEvent'                  RibbonBirthday = RibbonBirthday'                    RibbonSpecial = RibbonSpecial'                  RibbonSouvenir = RibbonSouvenir'                  RibbonWishing = RibbonWishing'                  RibbonChampionBattle = RibbonChampionBattle'                  RibbonChampionRegional = RibbonChampionRegional'                  RibbonChampionNational = RibbonChampionNational'                  RibbonChampionWorld = RibbonChampionWorld'                    FatefulEncounter = true'              };
Magic Number,PKHeX.Core,PGF,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\MysteryGifts\PGF.cs,ConvertToPKM,The following statement contains a magic number: pk.Version = (int)GameVersion.W + Util.Rand.Next(4);
Magic Number,PKHeX.Core,PGF,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\MysteryGifts\PGF.cs,ConvertToPKM,The following statement contains a magic number: SAV.Generation > 5 && OriginGame == 0
Magic Number,PKHeX.Core,PGF,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\MysteryGifts\PGF.cs,SetPINGA,The following statement contains a magic number: pk.Gender = pi.Gender == 255 ? 2 : Gender != 2 ? Gender : criteria.GetGender(-1' pi);
Magic Number,PKHeX.Core,PGF,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\MysteryGifts\PGF.cs,SetPINGA,The following statement contains a magic number: pk.Gender = pi.Gender == 255 ? 2 : Gender != 2 ? Gender : criteria.GetGender(-1' pi);
Magic Number,PKHeX.Core,PGF,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\MysteryGifts\PGF.cs,SetPINGA,The following statement contains a magic number: pk.Gender = pi.Gender == 255 ? 2 : Gender != 2 ? Gender : criteria.GetGender(-1' pi);
Magic Number,PKHeX.Core,PGF,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\MysteryGifts\PGF.cs,GetAbilityIndex,The following statement contains a magic number: switch (AbilityType)              {                  case 00: // 0 - 0                  case 01: // 1 - 1                  case 02: // 2 - H                      return AbilityType;                  case 03: // 0/1                  case 04: // 0/1/H                      return criteria.GetAbility(AbilityType' pi); // 3 or 2                  default:                      throw new ArgumentException(nameof(AbilityType));              }
Magic Number,PKHeX.Core,PGF,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\MysteryGifts\PGF.cs,GetAbilityIndex,The following statement contains a magic number: switch (AbilityType)              {                  case 00: // 0 - 0                  case 01: // 1 - 1                  case 02: // 2 - H                      return AbilityType;                  case 03: // 0/1                  case 04: // 0/1/H                      return criteria.GetAbility(AbilityType' pi); // 3 or 2                  default:                      throw new ArgumentException(nameof(AbilityType));              }
Magic Number,PKHeX.Core,PGF,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\MysteryGifts\PGF.cs,GetAbilityIndex,The following statement contains a magic number: switch (AbilityType)              {                  case 00: // 0 - 0                  case 01: // 1 - 1                  case 02: // 2 - H                      return AbilityType;                  case 03: // 0/1                  case 04: // 0/1/H                      return criteria.GetAbility(AbilityType' pi); // 3 or 2                  default:                      throw new ArgumentException(nameof(AbilityType));              }
Magic Number,PKHeX.Core,PGF,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\MysteryGifts\PGF.cs,SetPID,The following statement contains a magic number: PIDType == 2
Magic Number,PKHeX.Core,PGF,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\MysteryGifts\PGF.cs,SetIVs,The following statement contains a magic number: int[] finalIVs = new int[6];
Magic Number,PKHeX.Core,PGF,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\MysteryGifts\PGF.cs,IsMatchExact,The following statement contains a magic number: OTGender < 3 && OTGender != pkm.OT_Gender
Magic Number,PKHeX.Core,PGF,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\MysteryGifts\PGF.cs,IsMatchExact,The following statement contains a magic number: PIDType == 2 && !pkm.IsShiny
Magic Number,PKHeX.Core,PGF,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\MysteryGifts\PGF.cs,IsMatchExact,The following statement contains a magic number: Gender != 2 && Gender != pkm.Gender
Magic Number,PKHeX.Core,PGT,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\MysteryGifts\PGT.cs,VerifyPKEncryption,The following statement contains a magic number: !IsPokémon || BitConverter.ToUInt32(Data' 0x64 + 8) != 0
Magic Number,PKHeX.Core,PGT,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\MysteryGifts\PGT.cs,EncryptPK,The following statement contains a magic number: Array.Copy(Data' 8' ekdata' 0' ekdata.Length);
Magic Number,PKHeX.Core,PGT,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\MysteryGifts\PGT.cs,EncryptPK,The following statement contains a magic number: ekdata.CopyTo(Data' 8);
Magic Number,PKHeX.Core,PGT,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\MysteryGifts\PGT.cs,SetMetData,The following statement contains a magic number: pk4.Met_Location = pk4.Egg_Location + 3000;
Magic Number,PKHeX.Core,PGT,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\MysteryGifts\PGT.cs,SetDefaultManaphyEggDetails,The following statement contains a magic number: pk4.Species = 490;
Magic Number,PKHeX.Core,PGT,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\MysteryGifts\PGT.cs,SetDefaultManaphyEggDetails,The following statement contains a magic number: pk4.Gender = 2;
Magic Number,PKHeX.Core,PGT,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\MysteryGifts\PGT.cs,SetDefaultManaphyEggDetails,The following statement contains a magic number: pk4.Move1 = 294;
Magic Number,PKHeX.Core,PGT,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\MysteryGifts\PGT.cs,SetDefaultManaphyEggDetails,The following statement contains a magic number: pk4.Move2 = 145;
Magic Number,PKHeX.Core,PGT,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\MysteryGifts\PGT.cs,SetDefaultManaphyEggDetails,The following statement contains a magic number: pk4.Move3 = 346;
Magic Number,PKHeX.Core,PGT,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\MysteryGifts\PGT.cs,SetDefaultManaphyEggDetails,The following statement contains a magic number: pk4.Ball = 4;
Magic Number,PKHeX.Core,PGT,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\MysteryGifts\PGT.cs,SetDefaultManaphyEggDetails,The following statement contains a magic number: pk4.Version = 10;
Magic Number,PKHeX.Core,PGT,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\MysteryGifts\PGT.cs,SetPINGA,The following statement contains a magic number: uint iv1 = ((seed = RNG.LCRNG.Next(seed)) >> 16) & 0x7FFF;
Magic Number,PKHeX.Core,PGT,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\MysteryGifts\PGT.cs,SetPINGA,The following statement contains a magic number: uint iv2 = ((RNG.LCRNG.Next(seed)) >> 16) & 0x7FFF;
Magic Number,PKHeX.Core,PGT,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\MysteryGifts\PGT.cs,SetPINGA,The following statement contains a magic number: pk4.IV32 = iv1 | iv2 << 15;
Magic Number,PKHeX.Core,PGT,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\MysteryGifts\PGT.cs,GeneratePID,The following statement contains a magic number: uint pid1 = (seed = RNG.LCRNG.Next(seed)) >> 16;
Magic Number,PKHeX.Core,WB7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\MysteryGifts\WB7.cs,GetLanguageIndex,The following statement contains a magic number: return lang < LanguageID.UNUSED_6 ? language - 1 : language - 2;
Magic Number,PKHeX.Core,WB7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\MysteryGifts\WB7.cs,ConvertToPKM,The following statement contains a magic number: int currentLevel = Level > 0 ? Level : Util.Rand.Next(100) + 1;
Magic Number,PKHeX.Core,WB7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\MysteryGifts\WB7.cs,ConvertToPKM,The following statement contains a magic number: var pk = new PB7              {                  Species = Species'                  HeldItem = HeldItem'                  TID = TID'                  SID = SID'                  Met_Level = metLevel'                  AltForm = Form'                  EncryptionConstant = EncryptionConstant != 0 ? EncryptionConstant : Util.Rand32()'                  Version = OriginGame != 0 ? OriginGame : SAV.Game'                  Language = SAV.Language'                  Ball = Ball'                  Country = SAV.Country'                  Region = SAV.SubRegion'                  ConsoleRegion = SAV.ConsoleRegion'                  Move1 = Move1'                  Move2 = Move2'                  Move3 = Move3'                  Move4 = Move4'                  RelearnMove1 = RelearnMove1'                  RelearnMove2 = RelearnMove2'                  RelearnMove3 = RelearnMove3'                  RelearnMove4 = RelearnMove4'                  Met_Location = MetLocation'                  Egg_Location = EggLocation'                  AV_HP = AV_HP'                  AV_ATK = AV_ATK'                  AV_DEF = AV_DEF'                  AV_SPE = AV_SPE'                  AV_SPA = AV_SPA'                  AV_SPD = AV_SPD'                    OT_Name = OT.Length > 0 ? OT : SAV.OT'                  OT_Gender = OTGender != 3 ? OTGender % 2 : SAV.Gender'                  HT_Name = OT_Name.Length > 0 ? SAV.OT : string.Empty'                  HT_Gender = OT_Name.Length > 0 ? SAV.Gender : 0'                  CurrentHandler = OT_Name.Length > 0 ? 1 : 0'                    EXP = Experience.GetEXP(currentLevel' pi.EXPGrowth)'                    OT_Friendship = pi.BaseFriendship'                  FatefulEncounter = true'              };
Magic Number,PKHeX.Core,WB7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\MysteryGifts\WB7.cs,ConvertToPKM,The following statement contains a magic number: var pk = new PB7              {                  Species = Species'                  HeldItem = HeldItem'                  TID = TID'                  SID = SID'                  Met_Level = metLevel'                  AltForm = Form'                  EncryptionConstant = EncryptionConstant != 0 ? EncryptionConstant : Util.Rand32()'                  Version = OriginGame != 0 ? OriginGame : SAV.Game'                  Language = SAV.Language'                  Ball = Ball'                  Country = SAV.Country'                  Region = SAV.SubRegion'                  ConsoleRegion = SAV.ConsoleRegion'                  Move1 = Move1'                  Move2 = Move2'                  Move3 = Move3'                  Move4 = Move4'                  RelearnMove1 = RelearnMove1'                  RelearnMove2 = RelearnMove2'                  RelearnMove3 = RelearnMove3'                  RelearnMove4 = RelearnMove4'                  Met_Location = MetLocation'                  Egg_Location = EggLocation'                  AV_HP = AV_HP'                  AV_ATK = AV_ATK'                  AV_DEF = AV_DEF'                  AV_SPE = AV_SPE'                  AV_SPA = AV_SPA'                  AV_SPD = AV_SPD'                    OT_Name = OT.Length > 0 ? OT : SAV.OT'                  OT_Gender = OTGender != 3 ? OTGender % 2 : SAV.Gender'                  HT_Name = OT_Name.Length > 0 ? SAV.OT : string.Empty'                  HT_Gender = OT_Name.Length > 0 ? SAV.Gender : 0'                  CurrentHandler = OT_Name.Length > 0 ? 1 : 0'                    EXP = Experience.GetEXP(currentLevel' pi.EXPGrowth)'                    OT_Friendship = pi.BaseFriendship'                  FatefulEncounter = true'              };
Magic Number,PKHeX.Core,WB7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\MysteryGifts\WB7.cs,ConvertToPKM,The following statement contains a magic number: pk.Version = (int)GameVersion.GP + Util.Rand.Next(2);
Magic Number,PKHeX.Core,WB7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\MysteryGifts\WB7.cs,ConvertToPKM,The following statement contains a magic number: OTGender == 3
Magic Number,PKHeX.Core,WB7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\MysteryGifts\WB7.cs,GetAbilityIndex,The following statement contains a magic number: switch (AbilityType)              {                  case 00: // 0 - 0                  case 01: // 1 - 1                  case 02: // 2 - H                      return AbilityType;                  case 03: // 0/1                  case 04: // 0/1/H                      return criteria.GetAbility(AbilityType' pi); // 3 or 2                  default:                      throw new ArgumentException(nameof(AbilityType));              }
Magic Number,PKHeX.Core,WB7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\MysteryGifts\WB7.cs,GetAbilityIndex,The following statement contains a magic number: switch (AbilityType)              {                  case 00: // 0 - 0                  case 01: // 1 - 1                  case 02: // 2 - H                      return AbilityType;                  case 03: // 0/1                  case 04: // 0/1/H                      return criteria.GetAbility(AbilityType' pi); // 3 or 2                  default:                      throw new ArgumentException(nameof(AbilityType));              }
Magic Number,PKHeX.Core,WB7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\MysteryGifts\WB7.cs,GetAbilityIndex,The following statement contains a magic number: switch (AbilityType)              {                  case 00: // 0 - 0                  case 01: // 1 - 1                  case 02: // 2 - H                      return AbilityType;                  case 03: // 0/1                  case 04: // 0/1/H                      return criteria.GetAbility(AbilityType' pi); // 3 or 2                  default:                      throw new ArgumentException(nameof(AbilityType));              }
Magic Number,PKHeX.Core,WB7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\MysteryGifts\WB7.cs,SetPID,The following statement contains a magic number: switch (PIDType)              {                  case Shiny.FixedValue: // Specified                      pk.PID = PID;                      break;                  case Shiny.Random: // Random                      pk.PID = Util.Rand32();                      break;                  case Shiny.Always: // Random Shiny                      pk.PID = Util.Rand32();                      pk.PID = (uint)(((pk.TID ^ pk.SID ^ (pk.PID & 0xFFFF)) << 16) | (pk.PID & 0xFFFF));                      break;                  case Shiny.Never: // Random Nonshiny                      pk.PID = Util.Rand32();                      if (pk.IsShiny) pk.PID ^= 0x10000000;                      break;              }
Magic Number,PKHeX.Core,WB7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\MysteryGifts\WB7.cs,SetIVs,The following statement contains a magic number: int[] finalIVs = new int[6];
Magic Number,PKHeX.Core,WB7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\MysteryGifts\WB7.cs,SetIVs,The following statement contains a magic number: var ivflag = Array.Find(IVs' iv => (byte)(iv - 0xFC) < 3);
Magic Number,PKHeX.Core,WB7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\MysteryGifts\WB7.cs,SetIVs,The following statement contains a magic number: finalIVs[i] = IVs[i] > 31 ? Util.Rand.Next(pk.MaxIV + 1) : IVs[i];
Magic Number,PKHeX.Core,WB7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\MysteryGifts\WB7.cs,SetIVs,The following statement contains a magic number: i < 6
Magic Number,PKHeX.Core,WB7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\MysteryGifts\WB7.cs,IsMatchExact,The following statement contains a magic number: OTGender != 3
Magic Number,PKHeX.Core,WB7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\MysteryGifts\WB7.cs,IsMatchExact,The following statement contains a magic number: OTGender < 3 && OTGender != pkm.OT_Gender
Magic Number,PKHeX.Core,WB7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\MysteryGifts\WB7.cs,IsMatchExact,The following statement contains a magic number: Gender != 3 && Gender != pkm.Gender
Magic Number,PKHeX.Core,WC3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\MysteryGifts\WC3.cs,ConvertToPKM,The following statement contains a magic number: PK3 pk = new PK3              {                  Species = Species'                  Met_Level = Met_Level'                  Met_Location = Location'                  Ball = 4'                    // Ribbons                  RibbonCountry = RibbonCountry'                  RibbonNational = RibbonNational'                  RibbonEarth = RibbonEarth'                  RibbonChampionBattle = RibbonChampionBattle'                  RibbonChampionRegional = RibbonChampionRegional'                  RibbonChampionNational = RibbonChampionNational'                    FatefulEncounter = Fateful'                  Version = GetVersion(SAV)'              };
Magic Number,PKHeX.Core,WC3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\MysteryGifts\WC3.cs,ConvertToPKM,The following statement contains a magic number: bool hatchedEgg = IsEgg && SAV.Generation != 3;
Magic Number,PKHeX.Core,WC3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\MysteryGifts\WC3.cs,ConvertToPKM,The following statement contains a magic number: pk.Nickname = SpeciesName.GetSpeciesNameGeneration(Species' pk.Language' 3);
Magic Number,PKHeX.Core,WC3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\MysteryGifts\WC3.cs,SetForceHatchDetails,The following statement contains a magic number: pk.Met_Location = pk.FRLG ? 146 /* Four Island */ : 32;
Magic Number,PKHeX.Core,WC3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\MysteryGifts\WC3.cs,SetForceHatchDetails,The following statement contains a magic number: pk.Met_Location = pk.FRLG ? 146 /* Four Island */ : 32;
Magic Number,PKHeX.Core,WC3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\MysteryGifts\WC3.cs,GetVersion,The following statement contains a magic number: bool gen3 = SAV.Game <= 15 && GameVersion.Gen3.Contains((GameVersion)SAV.Game);
Magic Number,PKHeX.Core,WC3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\MysteryGifts\WC3.cs,SetMoves,The following statement contains a magic number: Array.Resize(ref moves' 4);
Magic Number,PKHeX.Core,WC3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\MysteryGifts\WC3.cs,SetMoves,The following statement contains a magic number: Moves.Length != 4
Magic Number,PKHeX.Core,WC3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\MysteryGifts\WC3.cs,GetRandomVersion,The following statement contains a magic number: int rand = Util.Rand.Next(2);
Magic Number,PKHeX.Core,WC3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\MysteryGifts\WC3.cs,IsMatchExact,The following statement contains a magic number: OT_Gender < 3 && OT_Gender != pkm.OT_Gender
Magic Number,PKHeX.Core,WC3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\MysteryGifts\WC3.cs,IsMatchExact,The following statement contains a magic number: wcOT.Length > 7
Magic Number,PKHeX.Core,WC3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\MysteryGifts\WC3.cs,GetIsValidOTMattleHoOh,The following statement contains a magic number: ck3 && ot.Length == 10
Magic Number,PKHeX.Core,WC3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\MysteryGifts\WC3.cs,GetIsValidOTMattleHoOh,The following statement contains a magic number: return ot.Length == 7 && wc.StartsWith(ot);
Magic Number,PKHeX.Core,WC6,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\MysteryGifts\WC6.cs,ConvertToPKM,The following statement contains a magic number: int currentLevel = Level > 0 ? Level : Util.Rand.Next(100) + 1;
Magic Number,PKHeX.Core,WC6,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\MysteryGifts\WC6.cs,ConvertToPKM,The following statement contains a magic number: PK6 pk = new PK6              {                  Species = Species'                  HeldItem = HeldItem'                  TID = TID'                  SID = SID'                  Met_Level = currentLevel'                  AltForm = Form'                  EncryptionConstant = EncryptionConstant != 0 ? EncryptionConstant : Util.Rand32()'                  Version = OriginGame != 0 ? OriginGame : SAV.Game'                  Language = Language != 0 ? Language : SAV.Language'                  Ball = Ball'                  Country = SAV.Country'                  Region = SAV.SubRegion'                  ConsoleRegion = SAV.ConsoleRegion'                  Move1 = Move1' Move2 = Move2' Move3 = Move3' Move4 = Move4'                  RelearnMove1 = RelearnMove1' RelearnMove2 = RelearnMove2'                  RelearnMove3 = RelearnMove3' RelearnMove4 = RelearnMove4'                  Met_Location = MetLocation'                  Egg_Location = EggLocation'                  CNT_Cool = CNT_Cool'                  CNT_Beauty = CNT_Beauty'                  CNT_Cute = CNT_Cute'                  CNT_Smart = CNT_Smart'                  CNT_Tough = CNT_Tough'                  CNT_Sheen = CNT_Sheen'                    OT_Name = OT_Name.Length > 0 ? OT_Name : SAV.OT'                  OT_Gender = OTGender != 3 ? OTGender % 2 : SAV.Gender'                  HT_Name = OT_Name.Length > 0 ? SAV.OT : string.Empty'                  HT_Gender = OT_Name.Length > 0 ? SAV.Gender : 0'                  CurrentHandler = OT_Name.Length > 0 ? 1 : 0'                    EXP = Experience.GetEXP(Level' pi.EXPGrowth)'                    // Ribbons                  RibbonCountry = RibbonCountry'                  RibbonNational = RibbonNational'                    RibbonEarth = RibbonEarth'                  RibbonWorld = RibbonWorld'                  RibbonClassic = RibbonClassic'                  RibbonPremier = RibbonPremier'                  RibbonEvent = RibbonEvent'                  RibbonBirthday = RibbonBirthday'                  RibbonSpecial = RibbonSpecial'                  RibbonSouvenir = RibbonSouvenir'                    RibbonWishing = RibbonWishing'                  RibbonChampionBattle = RibbonChampionBattle'                  RibbonChampionRegional = RibbonChampionRegional'                  RibbonChampionNational = RibbonChampionNational'                  RibbonChampionWorld = RibbonChampionWorld'                    OT_Friendship = pi.BaseFriendship'                  OT_Intensity = OT_Intensity'                  OT_Memory = OT_Memory'                  OT_TextVar = OT_TextVar'                  OT_Feeling = OT_Feeling'                  FatefulEncounter = MetLocation != 30011' // Link gifts do not set fateful encounter                    EVs = EVs'              };
Magic Number,PKHeX.Core,WC6,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\MysteryGifts\WC6.cs,ConvertToPKM,The following statement contains a magic number: PK6 pk = new PK6              {                  Species = Species'                  HeldItem = HeldItem'                  TID = TID'                  SID = SID'                  Met_Level = currentLevel'                  AltForm = Form'                  EncryptionConstant = EncryptionConstant != 0 ? EncryptionConstant : Util.Rand32()'                  Version = OriginGame != 0 ? OriginGame : SAV.Game'                  Language = Language != 0 ? Language : SAV.Language'                  Ball = Ball'                  Country = SAV.Country'                  Region = SAV.SubRegion'                  ConsoleRegion = SAV.ConsoleRegion'                  Move1 = Move1' Move2 = Move2' Move3 = Move3' Move4 = Move4'                  RelearnMove1 = RelearnMove1' RelearnMove2 = RelearnMove2'                  RelearnMove3 = RelearnMove3' RelearnMove4 = RelearnMove4'                  Met_Location = MetLocation'                  Egg_Location = EggLocation'                  CNT_Cool = CNT_Cool'                  CNT_Beauty = CNT_Beauty'                  CNT_Cute = CNT_Cute'                  CNT_Smart = CNT_Smart'                  CNT_Tough = CNT_Tough'                  CNT_Sheen = CNT_Sheen'                    OT_Name = OT_Name.Length > 0 ? OT_Name : SAV.OT'                  OT_Gender = OTGender != 3 ? OTGender % 2 : SAV.Gender'                  HT_Name = OT_Name.Length > 0 ? SAV.OT : string.Empty'                  HT_Gender = OT_Name.Length > 0 ? SAV.Gender : 0'                  CurrentHandler = OT_Name.Length > 0 ? 1 : 0'                    EXP = Experience.GetEXP(Level' pi.EXPGrowth)'                    // Ribbons                  RibbonCountry = RibbonCountry'                  RibbonNational = RibbonNational'                    RibbonEarth = RibbonEarth'                  RibbonWorld = RibbonWorld'                  RibbonClassic = RibbonClassic'                  RibbonPremier = RibbonPremier'                  RibbonEvent = RibbonEvent'                  RibbonBirthday = RibbonBirthday'                  RibbonSpecial = RibbonSpecial'                  RibbonSouvenir = RibbonSouvenir'                    RibbonWishing = RibbonWishing'                  RibbonChampionBattle = RibbonChampionBattle'                  RibbonChampionRegional = RibbonChampionRegional'                  RibbonChampionNational = RibbonChampionNational'                  RibbonChampionWorld = RibbonChampionWorld'                    OT_Friendship = pi.BaseFriendship'                  OT_Intensity = OT_Intensity'                  OT_Memory = OT_Memory'                  OT_TextVar = OT_TextVar'                  OT_Feeling = OT_Feeling'                  FatefulEncounter = MetLocation != 30011' // Link gifts do not set fateful encounter                    EVs = EVs'              };
Magic Number,PKHeX.Core,WC6,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\MysteryGifts\WC6.cs,ConvertToPKM,The following statement contains a magic number: PK6 pk = new PK6              {                  Species = Species'                  HeldItem = HeldItem'                  TID = TID'                  SID = SID'                  Met_Level = currentLevel'                  AltForm = Form'                  EncryptionConstant = EncryptionConstant != 0 ? EncryptionConstant : Util.Rand32()'                  Version = OriginGame != 0 ? OriginGame : SAV.Game'                  Language = Language != 0 ? Language : SAV.Language'                  Ball = Ball'                  Country = SAV.Country'                  Region = SAV.SubRegion'                  ConsoleRegion = SAV.ConsoleRegion'                  Move1 = Move1' Move2 = Move2' Move3 = Move3' Move4 = Move4'                  RelearnMove1 = RelearnMove1' RelearnMove2 = RelearnMove2'                  RelearnMove3 = RelearnMove3' RelearnMove4 = RelearnMove4'                  Met_Location = MetLocation'                  Egg_Location = EggLocation'                  CNT_Cool = CNT_Cool'                  CNT_Beauty = CNT_Beauty'                  CNT_Cute = CNT_Cute'                  CNT_Smart = CNT_Smart'                  CNT_Tough = CNT_Tough'                  CNT_Sheen = CNT_Sheen'                    OT_Name = OT_Name.Length > 0 ? OT_Name : SAV.OT'                  OT_Gender = OTGender != 3 ? OTGender % 2 : SAV.Gender'                  HT_Name = OT_Name.Length > 0 ? SAV.OT : string.Empty'                  HT_Gender = OT_Name.Length > 0 ? SAV.Gender : 0'                  CurrentHandler = OT_Name.Length > 0 ? 1 : 0'                    EXP = Experience.GetEXP(Level' pi.EXPGrowth)'                    // Ribbons                  RibbonCountry = RibbonCountry'                  RibbonNational = RibbonNational'                    RibbonEarth = RibbonEarth'                  RibbonWorld = RibbonWorld'                  RibbonClassic = RibbonClassic'                  RibbonPremier = RibbonPremier'                  RibbonEvent = RibbonEvent'                  RibbonBirthday = RibbonBirthday'                  RibbonSpecial = RibbonSpecial'                  RibbonSouvenir = RibbonSouvenir'                    RibbonWishing = RibbonWishing'                  RibbonChampionBattle = RibbonChampionBattle'                  RibbonChampionRegional = RibbonChampionRegional'                  RibbonChampionNational = RibbonChampionNational'                  RibbonChampionWorld = RibbonChampionWorld'                    OT_Friendship = pi.BaseFriendship'                  OT_Intensity = OT_Intensity'                  OT_Memory = OT_Memory'                  OT_TextVar = OT_TextVar'                  OT_Feeling = OT_Feeling'                  FatefulEncounter = MetLocation != 30011' // Link gifts do not set fateful encounter                    EVs = EVs'              };
Magic Number,PKHeX.Core,WC6,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\MysteryGifts\WC6.cs,ConvertToPKM,The following statement contains a magic number: pk.Version = (int)GameVersion.X + Util.Rand.Next(4);
Magic Number,PKHeX.Core,WC6,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\MysteryGifts\WC6.cs,ConvertToPKM,The following statement contains a magic number: pk.OT_Memory = 3;
Magic Number,PKHeX.Core,WC6,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\MysteryGifts\WC6.cs,ConvertToPKM,The following statement contains a magic number: pk.OT_TextVar = 9;
Magic Number,PKHeX.Core,WC6,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\MysteryGifts\WC6.cs,ConvertToPKM,The following statement contains a magic number: pk.OT_Feeling = Memories.GetRandomFeeling(pk.OT_Memory' 10);
Magic Number,PKHeX.Core,WC6,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\MysteryGifts\WC6.cs,GetAbilityIndex,The following statement contains a magic number: switch (AbilityType)              {                  case 00: // 0 - 0                  case 01: // 1 - 1                  case 02: // 2 - H                      return AbilityType;                  case 03: // 0/1                  case 04: // 0/1/H                      return criteria.GetAbility(AbilityType' pi); // 3 or 2                  default:                      throw new ArgumentException(nameof(AbilityType));              }
Magic Number,PKHeX.Core,WC6,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\MysteryGifts\WC6.cs,GetAbilityIndex,The following statement contains a magic number: switch (AbilityType)              {                  case 00: // 0 - 0                  case 01: // 1 - 1                  case 02: // 2 - H                      return AbilityType;                  case 03: // 0/1                  case 04: // 0/1/H                      return criteria.GetAbility(AbilityType' pi); // 3 or 2                  default:                      throw new ArgumentException(nameof(AbilityType));              }
Magic Number,PKHeX.Core,WC6,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\MysteryGifts\WC6.cs,GetAbilityIndex,The following statement contains a magic number: switch (AbilityType)              {                  case 00: // 0 - 0                  case 01: // 1 - 1                  case 02: // 2 - H                      return AbilityType;                  case 03: // 0/1                  case 04: // 0/1/H                      return criteria.GetAbility(AbilityType' pi); // 3 or 2                  default:                      throw new ArgumentException(nameof(AbilityType));              }
Magic Number,PKHeX.Core,WC6,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\MysteryGifts\WC6.cs,SetPID,The following statement contains a magic number: switch (PIDType)              {                  case Shiny.FixedValue: // Specified                      pk.PID = PID;                      break;                  case Shiny.Random: // Random                      pk.PID = Util.Rand32();                      break;                  case Shiny.Always: // Random Shiny                      pk.PID = Util.Rand32();                      pk.PID = (uint)(((pk.TID ^ pk.SID ^ (pk.PID & 0xFFFF)) << 16) | (pk.PID & 0xFFFF));                      break;                  case Shiny.Never: // Random Nonshiny                      pk.PID = Util.Rand32();                      if (pk.IsShiny) pk.PID ^= 0x10000000;                      break;              }
Magic Number,PKHeX.Core,WC6,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\MysteryGifts\WC6.cs,SetIVs,The following statement contains a magic number: int[] finalIVs = new int[6];
Magic Number,PKHeX.Core,WC6,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\MysteryGifts\WC6.cs,SetIVs,The following statement contains a magic number: var ivflag = Array.Find(IVs' iv => (byte)(iv - 0xFC) < 3);
Magic Number,PKHeX.Core,WC6,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\MysteryGifts\WC6.cs,SetIVs,The following statement contains a magic number: finalIVs[i] = IVs[i] > 31 ? Util.Rand.Next(pk.MaxIV + 1) : IVs[i];
Magic Number,PKHeX.Core,WC6,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\MysteryGifts\WC6.cs,SetIVs,The following statement contains a magic number: i < 6
Magic Number,PKHeX.Core,WC6,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\MysteryGifts\WC6.cs,IsMatchExact,The following statement contains a magic number: OTGender != 3
Magic Number,PKHeX.Core,WC6,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\MysteryGifts\WC6.cs,IsMatchExact,The following statement contains a magic number: OTGender < 3 && OTGender != pkm.OT_Gender
Magic Number,PKHeX.Core,WC6,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\MysteryGifts\WC6.cs,IsMatchExact,The following statement contains a magic number: Gender != 3 && Gender != pkm.Gender
Magic Number,PKHeX.Core,WC6,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\MysteryGifts\WC6.cs,IsMatchDeferred,The following statement contains a magic number: switch (CardID)              {                  case 0525 when IV_HP == 0xFE: // Diancie was distributed with no IV enforcement & 3IVs                  case 0504 when RibbonClassic != ((IRibbonSetEvent4)pkm).RibbonClassic: // magmar with/without classic                      return true;              }
Magic Number,PKHeX.Core,WC6,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\MysteryGifts\WC6.cs,IsMatchDeferred,The following statement contains a magic number: switch (CardID)              {                  case 0525 when IV_HP == 0xFE: // Diancie was distributed with no IV enforcement & 3IVs                  case 0504 when RibbonClassic != ((IRibbonSetEvent4)pkm).RibbonClassic: // magmar with/without classic                      return true;              }
Magic Number,PKHeX.Core,WC7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\MysteryGifts\WC7.cs,ConvertToPKM,The following statement contains a magic number: int currentLevel = Level > 0 ? Level : Util.Rand.Next(100) + 1;
Magic Number,PKHeX.Core,WC7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\MysteryGifts\WC7.cs,ConvertToPKM,The following statement contains a magic number: PK7 pk = new PK7              {                  Species = Species'                  HeldItem = HeldItem'                  TID = TID'                  SID = SID'                  Met_Level = metLevel'                  AltForm = Form'                  EncryptionConstant = EncryptionConstant != 0 ? EncryptionConstant : Util.Rand32()'                  Version = OriginGame != 0 ? OriginGame : SAV.Game'                  Language = Language != 0 ? Language : SAV.Language'                  Ball = Ball'                  Country = SAV.Country'                  Region = SAV.SubRegion'                  ConsoleRegion = SAV.ConsoleRegion'                  Move1 = Move1' Move2 = Move2' Move3 = Move3' Move4 = Move4'                  RelearnMove1 = RelearnMove1' RelearnMove2 = RelearnMove2'                  RelearnMove3 = RelearnMove3' RelearnMove4 = RelearnMove4'                  Met_Location = MetLocation'                  Egg_Location = EggLocation'                  CNT_Cool = CNT_Cool'                  CNT_Beauty = CNT_Beauty'                  CNT_Cute = CNT_Cute'                  CNT_Smart = CNT_Smart'                  CNT_Tough = CNT_Tough'                  CNT_Sheen = CNT_Sheen'                    OT_Name = OT_Name.Length > 0 ? OT_Name : SAV.OT'                  OT_Gender = OTGender != 3 ? OTGender % 2 : SAV.Gender'                  HT_Name = OT_Name.Length > 0 ? SAV.OT : string.Empty'                  HT_Gender = OT_Name.Length > 0 ? SAV.Gender : 0'                  CurrentHandler = OT_Name.Length > 0 ? 1 : 0'                    EXP = Experience.GetEXP(currentLevel' pi.EXPGrowth)'                    // Ribbons                  RibbonCountry = RibbonCountry'                  RibbonNational = RibbonNational'                    RibbonEarth = RibbonEarth'                  RibbonWorld = RibbonWorld'                  RibbonClassic = RibbonClassic'                  RibbonPremier = RibbonPremier'                  RibbonEvent = RibbonEvent'                  RibbonBirthday = RibbonBirthday'                  RibbonSpecial = RibbonSpecial'                  RibbonSouvenir = RibbonSouvenir'                    RibbonWishing = RibbonWishing'                  RibbonChampionBattle = RibbonChampionBattle'                  RibbonChampionRegional = RibbonChampionRegional'                  RibbonChampionNational = RibbonChampionNational'                  RibbonChampionWorld = RibbonChampionWorld'                    OT_Friendship = pi.BaseFriendship'                  OT_Intensity = OT_Intensity'                  OT_Memory = OT_Memory'                  OT_TextVar = OT_TextVar'                  OT_Feeling = OT_Feeling'                  FatefulEncounter = true'                    EVs = EVs'              };
Magic Number,PKHeX.Core,WC7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\MysteryGifts\WC7.cs,ConvertToPKM,The following statement contains a magic number: PK7 pk = new PK7              {                  Species = Species'                  HeldItem = HeldItem'                  TID = TID'                  SID = SID'                  Met_Level = metLevel'                  AltForm = Form'                  EncryptionConstant = EncryptionConstant != 0 ? EncryptionConstant : Util.Rand32()'                  Version = OriginGame != 0 ? OriginGame : SAV.Game'                  Language = Language != 0 ? Language : SAV.Language'                  Ball = Ball'                  Country = SAV.Country'                  Region = SAV.SubRegion'                  ConsoleRegion = SAV.ConsoleRegion'                  Move1 = Move1' Move2 = Move2' Move3 = Move3' Move4 = Move4'                  RelearnMove1 = RelearnMove1' RelearnMove2 = RelearnMove2'                  RelearnMove3 = RelearnMove3' RelearnMove4 = RelearnMove4'                  Met_Location = MetLocation'                  Egg_Location = EggLocation'                  CNT_Cool = CNT_Cool'                  CNT_Beauty = CNT_Beauty'                  CNT_Cute = CNT_Cute'                  CNT_Smart = CNT_Smart'                  CNT_Tough = CNT_Tough'                  CNT_Sheen = CNT_Sheen'                    OT_Name = OT_Name.Length > 0 ? OT_Name : SAV.OT'                  OT_Gender = OTGender != 3 ? OTGender % 2 : SAV.Gender'                  HT_Name = OT_Name.Length > 0 ? SAV.OT : string.Empty'                  HT_Gender = OT_Name.Length > 0 ? SAV.Gender : 0'                  CurrentHandler = OT_Name.Length > 0 ? 1 : 0'                    EXP = Experience.GetEXP(currentLevel' pi.EXPGrowth)'                    // Ribbons                  RibbonCountry = RibbonCountry'                  RibbonNational = RibbonNational'                    RibbonEarth = RibbonEarth'                  RibbonWorld = RibbonWorld'                  RibbonClassic = RibbonClassic'                  RibbonPremier = RibbonPremier'                  RibbonEvent = RibbonEvent'                  RibbonBirthday = RibbonBirthday'                  RibbonSpecial = RibbonSpecial'                  RibbonSouvenir = RibbonSouvenir'                    RibbonWishing = RibbonWishing'                  RibbonChampionBattle = RibbonChampionBattle'                  RibbonChampionRegional = RibbonChampionRegional'                  RibbonChampionNational = RibbonChampionNational'                  RibbonChampionWorld = RibbonChampionWorld'                    OT_Friendship = pi.BaseFriendship'                  OT_Intensity = OT_Intensity'                  OT_Memory = OT_Memory'                  OT_TextVar = OT_TextVar'                  OT_Feeling = OT_Feeling'                  FatefulEncounter = true'                    EVs = EVs'              };
Magic Number,PKHeX.Core,WC7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\MysteryGifts\WC7.cs,ConvertToPKM,The following statement contains a magic number: pk.Version = (int)GameVersion.SN + Util.Rand.Next(4);
Magic Number,PKHeX.Core,WC7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\MysteryGifts\WC7.cs,ConvertToPKM,The following statement contains a magic number: OTGender == 3
Magic Number,PKHeX.Core,WC7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\MysteryGifts\WC7.cs,GetAbilityIndex,The following statement contains a magic number: switch (AbilityType)              {                  case 00: // 0 - 0                  case 01: // 1 - 1                  case 02: // 2 - H                      return AbilityType;                  case 03: // 0/1                  case 04: // 0/1/H                      return criteria.GetAbility(AbilityType' pi); // 3 or 2                  default:                      throw new ArgumentException(nameof(AbilityType));              }
Magic Number,PKHeX.Core,WC7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\MysteryGifts\WC7.cs,GetAbilityIndex,The following statement contains a magic number: switch (AbilityType)              {                  case 00: // 0 - 0                  case 01: // 1 - 1                  case 02: // 2 - H                      return AbilityType;                  case 03: // 0/1                  case 04: // 0/1/H                      return criteria.GetAbility(AbilityType' pi); // 3 or 2                  default:                      throw new ArgumentException(nameof(AbilityType));              }
Magic Number,PKHeX.Core,WC7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\MysteryGifts\WC7.cs,GetAbilityIndex,The following statement contains a magic number: switch (AbilityType)              {                  case 00: // 0 - 0                  case 01: // 1 - 1                  case 02: // 2 - H                      return AbilityType;                  case 03: // 0/1                  case 04: // 0/1/H                      return criteria.GetAbility(AbilityType' pi); // 3 or 2                  default:                      throw new ArgumentException(nameof(AbilityType));              }
Magic Number,PKHeX.Core,WC7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\MysteryGifts\WC7.cs,SetPID,The following statement contains a magic number: switch (PIDType)              {                  case Shiny.FixedValue: // Specified                      pk.PID = PID;                      break;                  case Shiny.Random: // Random                      pk.PID = Util.Rand32();                      break;                  case Shiny.Always: // Random Shiny                      pk.PID = Util.Rand32();                      pk.PID = (uint)(((pk.TID ^ pk.SID ^ (pk.PID & 0xFFFF)) << 16) | (pk.PID & 0xFFFF));                      break;                  case Shiny.Never: // Random Nonshiny                      pk.PID = Util.Rand32();                      if (pk.IsShiny) pk.PID ^= 0x10000000;                      break;              }
Magic Number,PKHeX.Core,WC7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\MysteryGifts\WC7.cs,SetIVs,The following statement contains a magic number: int[] finalIVs = new int[6];
Magic Number,PKHeX.Core,WC7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\MysteryGifts\WC7.cs,SetIVs,The following statement contains a magic number: var ivflag = Array.Find(IVs' iv => (byte)(iv - 0xFC) < 3);
Magic Number,PKHeX.Core,WC7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\MysteryGifts\WC7.cs,SetIVs,The following statement contains a magic number: finalIVs[i] = IVs[i] > 31 ? Util.Rand.Next(pk.MaxIV + 1) : IVs[i];
Magic Number,PKHeX.Core,WC7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\MysteryGifts\WC7.cs,SetIVs,The following statement contains a magic number: i < 6
Magic Number,PKHeX.Core,WC7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\MysteryGifts\WC7.cs,IsAshGreninjaWC7,The following statement contains a magic number: return CardID == 2046 && (pkm.SID << 16 | pkm.TID) == 0x79F57B49;
Magic Number,PKHeX.Core,WC7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\MysteryGifts\WC7.cs,IsAshGreninjaWC7,The following statement contains a magic number: return CardID == 2046 && (pkm.SID << 16 | pkm.TID) == 0x79F57B49;
Magic Number,PKHeX.Core,WC7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\MysteryGifts\WC7.cs,IsMatchExact,The following statement contains a magic number: OTGender != 3
Magic Number,PKHeX.Core,WC7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\MysteryGifts\WC7.cs,IsMatchExact,The following statement contains a magic number: Species == 744 && Form == 1 && pkm.Species == 745 && pkm.AltForm == 2
Magic Number,PKHeX.Core,WC7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\MysteryGifts\WC7.cs,IsMatchExact,The following statement contains a magic number: Species == 744 && Form == 1 && pkm.Species == 745 && pkm.AltForm == 2
Magic Number,PKHeX.Core,WC7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\MysteryGifts\WC7.cs,IsMatchExact,The following statement contains a magic number: Species == 744 && Form == 1 && pkm.Species == 745 && pkm.AltForm == 2
Magic Number,PKHeX.Core,WC7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\MysteryGifts\WC7.cs,IsMatchExact,The following statement contains a magic number: OTGender < 3 && OTGender != pkm.OT_Gender
Magic Number,PKHeX.Core,WC7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\MysteryGifts\WC7.cs,IsMatchExact,The following statement contains a magic number: Gender != 3 && Gender != pkm.Gender
Magic Number,PKHeX.Core,WC7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\MysteryGifts\WC7.cs,IsMatchExact,The following statement contains a magic number: CardID == 2046
Magic Number,PKHeX.Core,WC8,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\MysteryGifts\WC8.cs,GetLanguageIndex,The following statement contains a magic number: return lang < LanguageID.UNUSED_6 ? language - 1 : language - 2;
Magic Number,PKHeX.Core,WC8,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\MysteryGifts\WC8.cs,ConvertToPKM,The following statement contains a magic number: int currentLevel = Level > 0 ? Level : Util.Rand.Next(100) + 1;
Magic Number,PKHeX.Core,WC8,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\MysteryGifts\WC8.cs,ConvertToPKM,The following statement contains a magic number: var pk = new PK8              {                  EncryptionConstant = EncryptionConstant != 0 ? EncryptionConstant : Util.Rand32()'                  TID = TID'                  SID = SID'                  Species = Species'                  AltForm = Form'                  CurrentLevel = currentLevel'                  Ball = Ball != 0 ? Ball : 4' // Default is Pokeball                  Met_Level = metLevel'                  HeldItem = HeldItem'                    EXP = Experience.GetEXP(currentLevel' pi.EXPGrowth)'                    Move1 = Move1'                  Move2 = Move2'                  Move3 = Move3'                  Move4 = Move4'                  RelearnMove1 = RelearnMove1'                  RelearnMove2 = RelearnMove2'                  RelearnMove3 = RelearnMove3'                  RelearnMove4 = RelearnMove4'                    Version = OriginGame != 0 ? OriginGame : SAV.Game'                    OT_Name = OT.Length > 0 ? OT : SAV.OT'                  OT_Gender = OTGender < 2 ? OTGender : SAV.Gender'                  HT_Name = GetHasOT(Language) ? SAV.OT : string.Empty'                  HT_Gender = GetHasOT(Language) ? SAV.Gender : 0'                  HT_Language = GetHasOT(Language) ? SAV.Language : 0'                  CurrentHandler = GetHasOT(Language) ? 1 : 0'                  OT_Friendship = pi.BaseFriendship'                    OT_Intensity = OT_Intensity'                  OT_Memory = OT_Memory'                  OT_TextVar = OT_TextVar'                  OT_Feeling = OT_Feeling'                  FatefulEncounter = true'                    EVs = EVs'                    CanGigantamax = CanGigantamax'                  DynamaxLevel = DynamaxLevel'                    Met_Location = MetLocation'                  Egg_Location = EggLocation'              };
Magic Number,PKHeX.Core,WC8,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\MysteryGifts\WC8.cs,ConvertToPKM,The following statement contains a magic number: var pk = new PK8              {                  EncryptionConstant = EncryptionConstant != 0 ? EncryptionConstant : Util.Rand32()'                  TID = TID'                  SID = SID'                  Species = Species'                  AltForm = Form'                  CurrentLevel = currentLevel'                  Ball = Ball != 0 ? Ball : 4' // Default is Pokeball                  Met_Level = metLevel'                  HeldItem = HeldItem'                    EXP = Experience.GetEXP(currentLevel' pi.EXPGrowth)'                    Move1 = Move1'                  Move2 = Move2'                  Move3 = Move3'                  Move4 = Move4'                  RelearnMove1 = RelearnMove1'                  RelearnMove2 = RelearnMove2'                  RelearnMove3 = RelearnMove3'                  RelearnMove4 = RelearnMove4'                    Version = OriginGame != 0 ? OriginGame : SAV.Game'                    OT_Name = OT.Length > 0 ? OT : SAV.OT'                  OT_Gender = OTGender < 2 ? OTGender : SAV.Gender'                  HT_Name = GetHasOT(Language) ? SAV.OT : string.Empty'                  HT_Gender = GetHasOT(Language) ? SAV.Gender : 0'                  HT_Language = GetHasOT(Language) ? SAV.Language : 0'                  CurrentHandler = GetHasOT(Language) ? 1 : 0'                  OT_Friendship = pi.BaseFriendship'                    OT_Intensity = OT_Intensity'                  OT_Memory = OT_Memory'                  OT_TextVar = OT_TextVar'                  OT_Feeling = OT_Feeling'                  FatefulEncounter = true'                    EVs = EVs'                    CanGigantamax = CanGigantamax'                  DynamaxLevel = DynamaxLevel'                    Met_Location = MetLocation'                  Egg_Location = EggLocation'              };
Magic Number,PKHeX.Core,WC8,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\MysteryGifts\WC8.cs,ConvertToPKM,The following statement contains a magic number: pk.Version = (int)GameVersion.SW + Util.Rand.Next(2);
Magic Number,PKHeX.Core,WC8,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\MysteryGifts\WC8.cs,ConvertToPKM,The following statement contains a magic number: OTGender >= 2
Magic Number,PKHeX.Core,WC8,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\MysteryGifts\WC8.cs,ConvertToPKM,The following statement contains a magic number: pk.Species == 678
Magic Number,PKHeX.Core,WC8,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\MysteryGifts\WC8.cs,GetAbilityIndex,The following statement contains a magic number: switch (AbilityType)              {                  case 00: // 0 - 0                  case 01: // 1 - 1                  case 02: // 2 - H                      return AbilityType;                  case 03: // 0/1                  case 04: // 0/1/H                      return criteria.GetAbility(AbilityType' pi); // 3 or 2                  default:                      throw new ArgumentException(nameof(AbilityType));              }
Magic Number,PKHeX.Core,WC8,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\MysteryGifts\WC8.cs,GetAbilityIndex,The following statement contains a magic number: switch (AbilityType)              {                  case 00: // 0 - 0                  case 01: // 1 - 1                  case 02: // 2 - H                      return AbilityType;                  case 03: // 0/1                  case 04: // 0/1/H                      return criteria.GetAbility(AbilityType' pi); // 3 or 2                  default:                      throw new ArgumentException(nameof(AbilityType));              }
Magic Number,PKHeX.Core,WC8,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\MysteryGifts\WC8.cs,GetAbilityIndex,The following statement contains a magic number: switch (AbilityType)              {                  case 00: // 0 - 0                  case 01: // 1 - 1                  case 02: // 2 - H                      return AbilityType;                  case 03: // 0/1                  case 04: // 0/1/H                      return criteria.GetAbility(AbilityType' pi); // 3 or 2                  default:                      throw new ArgumentException(nameof(AbilityType));              }
Magic Number,PKHeX.Core,WC8,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\MysteryGifts\WC8.cs,GetFixedPID,The following statement contains a magic number: val == 4
Magic Number,PKHeX.Core,WC8,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\MysteryGifts\WC8.cs,GetFixedPID,The following statement contains a magic number: return (uint)((pid & 0xFFFF) | ((SAV.SID ^ SAV.TID ^ (pid & 0xFFFF) ^ (val == 2 ? 1 : 0)) << 16));
Magic Number,PKHeX.Core,WC8,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\MysteryGifts\WC8.cs,GetFixedPID,The following statement contains a magic number: return (uint)((pid & 0xFFFF) | ((SAV.SID ^ SAV.TID ^ (pid & 0xFFFF) ^ (val == 2 ? 1 : 0)) << 16));
Magic Number,PKHeX.Core,WC8,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\MysteryGifts\WC8.cs,SetPID,The following statement contains a magic number: switch (PIDType)              {                  case Shiny.FixedValue: // Specified                      pk.PID = GetFixedPID(SAV);                      break;                  case Shiny.Random: // Random                      pk.PID = Util.Rand32();                      break;                  case Shiny.AlwaysStar: // Random Shiny                      pk.PID = Util.Rand32();                      pk.PID = (uint)(((pk.TID ^ pk.SID ^ (pk.PID & 0xFFFF)) << 16) | (pk.PID & 0xFFFF)) ^ 1;                      break;                  case Shiny.AlwaysSquare: // Random Shiny                      pk.PID = Util.Rand32();                      pk.PID = (uint)(((pk.TID ^ pk.SID ^ (pk.PID & 0xFFFF)) << 16) | (pk.PID & 0xFFFF)) ^ 0;                      break;                  case Shiny.Never: // Random Nonshiny                      pk.PID = Util.Rand32();                      if (pk.IsShiny) pk.PID ^= 0x10000000;                      break;              }
Magic Number,PKHeX.Core,WC8,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\MysteryGifts\WC8.cs,SetPID,The following statement contains a magic number: switch (PIDType)              {                  case Shiny.FixedValue: // Specified                      pk.PID = GetFixedPID(SAV);                      break;                  case Shiny.Random: // Random                      pk.PID = Util.Rand32();                      break;                  case Shiny.AlwaysStar: // Random Shiny                      pk.PID = Util.Rand32();                      pk.PID = (uint)(((pk.TID ^ pk.SID ^ (pk.PID & 0xFFFF)) << 16) | (pk.PID & 0xFFFF)) ^ 1;                      break;                  case Shiny.AlwaysSquare: // Random Shiny                      pk.PID = Util.Rand32();                      pk.PID = (uint)(((pk.TID ^ pk.SID ^ (pk.PID & 0xFFFF)) << 16) | (pk.PID & 0xFFFF)) ^ 0;                      break;                  case Shiny.Never: // Random Nonshiny                      pk.PID = Util.Rand32();                      if (pk.IsShiny) pk.PID ^= 0x10000000;                      break;              }
Magic Number,PKHeX.Core,WC8,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\MysteryGifts\WC8.cs,SetIVs,The following statement contains a magic number: int[] finalIVs = new int[6];
Magic Number,PKHeX.Core,WC8,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\MysteryGifts\WC8.cs,SetIVs,The following statement contains a magic number: var ivflag = Array.Find(IVs' iv => (byte)(iv - 0xFC) < 3);
Magic Number,PKHeX.Core,WC8,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\MysteryGifts\WC8.cs,SetIVs,The following statement contains a magic number: finalIVs[i] = IVs[i] > 31 ? Util.Rand.Next(pk.MaxIV + 1) : IVs[i];
Magic Number,PKHeX.Core,WC8,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\MysteryGifts\WC8.cs,SetIVs,The following statement contains a magic number: i < 6
Magic Number,PKHeX.Core,WC8,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\MysteryGifts\WC8.cs,IsMatchExact,The following statement contains a magic number: OTGender < 2
Magic Number,PKHeX.Core,WC8,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\MysteryGifts\WC8.cs,IsMatchExact,The following statement contains a magic number: Ball == 0 && pkm.Ball != 4
Magic Number,PKHeX.Core,WC8,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\MysteryGifts\WC8.cs,IsMatchExact,The following statement contains a magic number: OTGender < 2 && OTGender != pkm.OT_Gender
Magic Number,PKHeX.Core,WC8,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\MysteryGifts\WC8.cs,IsMatchExact,The following statement contains a magic number: Gender != 3 && Gender != pkm.Gender
Magic Number,PKHeX.Core,PersonalInfo,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PersonalInfo\PersonalInfo.cs,GetBits,The following statement contains a magic number: bool[] result = new bool[length << 3];
Magic Number,PKHeX.Core,PersonalInfo,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PersonalInfo\PersonalInfo.cs,GetBits,The following statement contains a magic number: result[i] = (data[start + (i >> 3)] >> (i & 7) & 0x1) == 1;
Magic Number,PKHeX.Core,PersonalInfo,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PersonalInfo\PersonalInfo.cs,GetBits,The following statement contains a magic number: result[i] = (data[start + (i >> 3)] >> (i & 7) & 0x1) == 1;
Magic Number,PKHeX.Core,PersonalInfo,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PersonalInfo\PersonalInfo.cs,SetBits,The following statement contains a magic number: byte[] data = new byte[bits.Length>>3];
Magic Number,PKHeX.Core,PersonalInfo,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PersonalInfo\PersonalInfo.cs,SetBits,The following statement contains a magic number: data[i>>3] |= (byte)(bits[i] ? 1 << (i&0x7) : 0);
Magic Number,PKHeX.Core,PersonalInfo,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PersonalInfo\PersonalInfo.cs,RandomGender,The following statement contains a magic number: return fix >= 0 ? fix : Util.Rand.Next(2);
Magic Number,PKHeX.Core,PersonalInfoB2W2,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PersonalInfo\PersonalInfoB2W2.cs,Write,The following statement contains a magic number: SetBits(SpecialTutors[2]).CopyTo(Data' 0x44);
Magic Number,PKHeX.Core,PersonalInfoB2W2,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PersonalInfo\PersonalInfoB2W2.cs,Write,The following statement contains a magic number: SetBits(SpecialTutors[3]).CopyTo(Data' 0x48);
Magic Number,PKHeX.Core,PersonalInfoGG,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PersonalInfo\PersonalInfoGG.cs,PersonalInfoGG,The following statement contains a magic number: TMHM = GetBits(Data' 0x28' 8);
Magic Number,PKHeX.Core,PersonalInfoORAS,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PersonalInfo\PersonalInfoORAS.cs,Write,The following statement contains a magic number: SetBits(SpecialTutors[2]).CopyTo(Data' 0x48);
Magic Number,PKHeX.Core,PersonalInfoORAS,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PersonalInfo\PersonalInfoORAS.cs,Write,The following statement contains a magic number: SetBits(SpecialTutors[3]).CopyTo(Data' 0x4C);
Magic Number,PKHeX.Core,PersonalInfoSWSH,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PersonalInfo\PersonalInfoSWSH.cs,PersonalInfoSWSH,The following statement contains a magic number: TMHM = new bool[200];
Magic Number,PKHeX.Core,PersonalInfoSWSH,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PersonalInfo\PersonalInfoSWSH.cs,PersonalInfoSWSH,The following statement contains a magic number: TMHM[i]       = FlagUtil.GetFlag(Data' 0x28 + (i >> 3)' i);
Magic Number,PKHeX.Core,PersonalInfoSWSH,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PersonalInfo\PersonalInfoSWSH.cs,PersonalInfoSWSH,The following statement contains a magic number: TMHM[i + 100] = FlagUtil.GetFlag(Data' 0x3C + (i >> 3)' i);
Magic Number,PKHeX.Core,PersonalInfoSWSH,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PersonalInfo\PersonalInfoSWSH.cs,PersonalInfoSWSH,The following statement contains a magic number: TMHM[i + 100] = FlagUtil.GetFlag(Data' 0x3C + (i >> 3)' i);
Magic Number,PKHeX.Core,PersonalInfoSWSH,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PersonalInfo\PersonalInfoSWSH.cs,PersonalInfoSWSH,The following statement contains a magic number: i < 100
Magic Number,PKHeX.Core,PersonalInfoSWSH,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PersonalInfo\PersonalInfoSWSH.cs,PersonalInfoSWSH,The following statement contains a magic number: var typeTutors = new bool[8];
Magic Number,PKHeX.Core,PersonalInfoSWSH,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PersonalInfo\PersonalInfoSWSH.cs,Write,The following statement contains a magic number: FlagUtil.SetFlag(Data' 0x28 + (i >> 3)' i' TMHM[i]);
Magic Number,PKHeX.Core,PersonalInfoSWSH,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PersonalInfo\PersonalInfoSWSH.cs,Write,The following statement contains a magic number: FlagUtil.SetFlag(Data' 0x3C + (i >> 3)' i' TMHM[i + 100]);
Magic Number,PKHeX.Core,PersonalInfoSWSH,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PersonalInfo\PersonalInfoSWSH.cs,Write,The following statement contains a magic number: FlagUtil.SetFlag(Data' 0x3C + (i >> 3)' i' TMHM[i + 100]);
Magic Number,PKHeX.Core,PersonalInfoSWSH,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PersonalInfo\PersonalInfoSWSH.cs,Write,The following statement contains a magic number: i < 100
Magic Number,PKHeX.Core,PersonalTable,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PersonalInfo\PersonalTable.cs,FixPersonalTableG1,The following statement contains a magic number: Y[25].CatchRate = 163;
Magic Number,PKHeX.Core,PersonalTable,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PersonalInfo\PersonalTable.cs,FixPersonalTableG1,The following statement contains a magic number: Y[25].CatchRate = 163;
Magic Number,PKHeX.Core,PersonalTable,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PersonalInfo\PersonalTable.cs,FixPersonalTableG1,The following statement contains a magic number: Y[64].CatchRate = 96;
Magic Number,PKHeX.Core,PersonalTable,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PersonalInfo\PersonalTable.cs,FixPersonalTableG1,The following statement contains a magic number: Y[64].CatchRate = 96;
Magic Number,PKHeX.Core,PersonalTable,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PersonalInfo\PersonalTable.cs,CopyDexitGenders,The following statement contains a magic number: i <= 807
Magic Number,PKHeX.Core,BK4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\BK4.cs,BK4,The following statement contains a magic number: uint sv = ((PID & 0x3E000) >> 0xD) % 24;
Magic Number,PKHeX.Core,BK4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\BK4.cs,Encrypt,The following statement contains a magic number: return PKX.ShuffleArray(Data' PKX.blockPositionInvert[((PID & 0x3E000) >> 0xD)%24]' PKX.SIZE_4BLOCK);
Magic Number,PKHeX.Core,PB7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PB7.cs,PB7,The following statement contains a magic number: PKX.CheckEncrypted(ref data' 7);
Magic Number,PKHeX.Core,PB7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PB7.cs,CalculateStatsBeluga,The following statement contains a magic number: int scalar = (int)(((friend / 255.0f / 10.0f) + 1.0f) * 100.0f);
Magic Number,PKHeX.Core,PB7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PB7.cs,CalculateStatsBeluga,The following statement contains a magic number: int scalar = (int)(((friend / 255.0f / 10.0f) + 1.0f) * 100.0f);
Magic Number,PKHeX.Core,PB7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PB7.cs,CalculateStatsBeluga,The following statement contains a magic number: int scalar = (int)(((friend / 255.0f / 10.0f) + 1.0f) * 100.0f);
Magic Number,PKHeX.Core,PB7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PB7.cs,CalculateStatsBeluga,The following statement contains a magic number: ushort[] stats =              {                  (ushort)(AV_HP  + GetStat(p.HP'  HT_HP  ? 31 : IV_HP'  level) + 10 + level)'                  (ushort)(AV_ATK + (scalar * GetStat(p.ATK' HT_ATK ? 31 : IV_ATK' level' nature' 0) / 100))'                  (ushort)(AV_DEF + (scalar * GetStat(p.DEF' HT_DEF ? 31 : IV_DEF' level' nature' 1) / 100))'                  (ushort)(AV_SPE + (scalar * GetStat(p.SPE' HT_SPE ? 31 : IV_SPE' level' nature' 4) / 100))'                  (ushort)(AV_SPA + (scalar * GetStat(p.SPA' HT_SPA ? 31 : IV_SPA' level' nature' 2) / 100))'                  (ushort)(AV_SPD + (scalar * GetStat(p.SPD' HT_SPD ? 31 : IV_SPD' level' nature' 3) / 100))'              };
Magic Number,PKHeX.Core,PB7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PB7.cs,CalculateStatsBeluga,The following statement contains a magic number: ushort[] stats =              {                  (ushort)(AV_HP  + GetStat(p.HP'  HT_HP  ? 31 : IV_HP'  level) + 10 + level)'                  (ushort)(AV_ATK + (scalar * GetStat(p.ATK' HT_ATK ? 31 : IV_ATK' level' nature' 0) / 100))'                  (ushort)(AV_DEF + (scalar * GetStat(p.DEF' HT_DEF ? 31 : IV_DEF' level' nature' 1) / 100))'                  (ushort)(AV_SPE + (scalar * GetStat(p.SPE' HT_SPE ? 31 : IV_SPE' level' nature' 4) / 100))'                  (ushort)(AV_SPA + (scalar * GetStat(p.SPA' HT_SPA ? 31 : IV_SPA' level' nature' 2) / 100))'                  (ushort)(AV_SPD + (scalar * GetStat(p.SPD' HT_SPD ? 31 : IV_SPD' level' nature' 3) / 100))'              };
Magic Number,PKHeX.Core,PB7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PB7.cs,CalculateStatsBeluga,The following statement contains a magic number: ushort[] stats =              {                  (ushort)(AV_HP  + GetStat(p.HP'  HT_HP  ? 31 : IV_HP'  level) + 10 + level)'                  (ushort)(AV_ATK + (scalar * GetStat(p.ATK' HT_ATK ? 31 : IV_ATK' level' nature' 0) / 100))'                  (ushort)(AV_DEF + (scalar * GetStat(p.DEF' HT_DEF ? 31 : IV_DEF' level' nature' 1) / 100))'                  (ushort)(AV_SPE + (scalar * GetStat(p.SPE' HT_SPE ? 31 : IV_SPE' level' nature' 4) / 100))'                  (ushort)(AV_SPA + (scalar * GetStat(p.SPA' HT_SPA ? 31 : IV_SPA' level' nature' 2) / 100))'                  (ushort)(AV_SPD + (scalar * GetStat(p.SPD' HT_SPD ? 31 : IV_SPD' level' nature' 3) / 100))'              };
Magic Number,PKHeX.Core,PB7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PB7.cs,CalculateStatsBeluga,The following statement contains a magic number: ushort[] stats =              {                  (ushort)(AV_HP  + GetStat(p.HP'  HT_HP  ? 31 : IV_HP'  level) + 10 + level)'                  (ushort)(AV_ATK + (scalar * GetStat(p.ATK' HT_ATK ? 31 : IV_ATK' level' nature' 0) / 100))'                  (ushort)(AV_DEF + (scalar * GetStat(p.DEF' HT_DEF ? 31 : IV_DEF' level' nature' 1) / 100))'                  (ushort)(AV_SPE + (scalar * GetStat(p.SPE' HT_SPE ? 31 : IV_SPE' level' nature' 4) / 100))'                  (ushort)(AV_SPA + (scalar * GetStat(p.SPA' HT_SPA ? 31 : IV_SPA' level' nature' 2) / 100))'                  (ushort)(AV_SPD + (scalar * GetStat(p.SPD' HT_SPD ? 31 : IV_SPD' level' nature' 3) / 100))'              };
Magic Number,PKHeX.Core,PB7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PB7.cs,CalculateStatsBeluga,The following statement contains a magic number: ushort[] stats =              {                  (ushort)(AV_HP  + GetStat(p.HP'  HT_HP  ? 31 : IV_HP'  level) + 10 + level)'                  (ushort)(AV_ATK + (scalar * GetStat(p.ATK' HT_ATK ? 31 : IV_ATK' level' nature' 0) / 100))'                  (ushort)(AV_DEF + (scalar * GetStat(p.DEF' HT_DEF ? 31 : IV_DEF' level' nature' 1) / 100))'                  (ushort)(AV_SPE + (scalar * GetStat(p.SPE' HT_SPE ? 31 : IV_SPE' level' nature' 4) / 100))'                  (ushort)(AV_SPA + (scalar * GetStat(p.SPA' HT_SPA ? 31 : IV_SPA' level' nature' 2) / 100))'                  (ushort)(AV_SPD + (scalar * GetStat(p.SPD' HT_SPD ? 31 : IV_SPD' level' nature' 3) / 100))'              };
Magic Number,PKHeX.Core,PB7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PB7.cs,CalculateStatsBeluga,The following statement contains a magic number: ushort[] stats =              {                  (ushort)(AV_HP  + GetStat(p.HP'  HT_HP  ? 31 : IV_HP'  level) + 10 + level)'                  (ushort)(AV_ATK + (scalar * GetStat(p.ATK' HT_ATK ? 31 : IV_ATK' level' nature' 0) / 100))'                  (ushort)(AV_DEF + (scalar * GetStat(p.DEF' HT_DEF ? 31 : IV_DEF' level' nature' 1) / 100))'                  (ushort)(AV_SPE + (scalar * GetStat(p.SPE' HT_SPE ? 31 : IV_SPE' level' nature' 4) / 100))'                  (ushort)(AV_SPA + (scalar * GetStat(p.SPA' HT_SPA ? 31 : IV_SPA' level' nature' 2) / 100))'                  (ushort)(AV_SPD + (scalar * GetStat(p.SPD' HT_SPD ? 31 : IV_SPD' level' nature' 3) / 100))'              };
Magic Number,PKHeX.Core,PB7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PB7.cs,CalculateStatsBeluga,The following statement contains a magic number: ushort[] stats =              {                  (ushort)(AV_HP  + GetStat(p.HP'  HT_HP  ? 31 : IV_HP'  level) + 10 + level)'                  (ushort)(AV_ATK + (scalar * GetStat(p.ATK' HT_ATK ? 31 : IV_ATK' level' nature' 0) / 100))'                  (ushort)(AV_DEF + (scalar * GetStat(p.DEF' HT_DEF ? 31 : IV_DEF' level' nature' 1) / 100))'                  (ushort)(AV_SPE + (scalar * GetStat(p.SPE' HT_SPE ? 31 : IV_SPE' level' nature' 4) / 100))'                  (ushort)(AV_SPA + (scalar * GetStat(p.SPA' HT_SPA ? 31 : IV_SPA' level' nature' 2) / 100))'                  (ushort)(AV_SPD + (scalar * GetStat(p.SPD' HT_SPD ? 31 : IV_SPD' level' nature' 3) / 100))'              };
Magic Number,PKHeX.Core,PB7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PB7.cs,CalculateStatsBeluga,The following statement contains a magic number: ushort[] stats =              {                  (ushort)(AV_HP  + GetStat(p.HP'  HT_HP  ? 31 : IV_HP'  level) + 10 + level)'                  (ushort)(AV_ATK + (scalar * GetStat(p.ATK' HT_ATK ? 31 : IV_ATK' level' nature' 0) / 100))'                  (ushort)(AV_DEF + (scalar * GetStat(p.DEF' HT_DEF ? 31 : IV_DEF' level' nature' 1) / 100))'                  (ushort)(AV_SPE + (scalar * GetStat(p.SPE' HT_SPE ? 31 : IV_SPE' level' nature' 4) / 100))'                  (ushort)(AV_SPA + (scalar * GetStat(p.SPA' HT_SPA ? 31 : IV_SPA' level' nature' 2) / 100))'                  (ushort)(AV_SPD + (scalar * GetStat(p.SPD' HT_SPD ? 31 : IV_SPD' level' nature' 3) / 100))'              };
Magic Number,PKHeX.Core,PB7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PB7.cs,CalculateStatsBeluga,The following statement contains a magic number: ushort[] stats =              {                  (ushort)(AV_HP  + GetStat(p.HP'  HT_HP  ? 31 : IV_HP'  level) + 10 + level)'                  (ushort)(AV_ATK + (scalar * GetStat(p.ATK' HT_ATK ? 31 : IV_ATK' level' nature' 0) / 100))'                  (ushort)(AV_DEF + (scalar * GetStat(p.DEF' HT_DEF ? 31 : IV_DEF' level' nature' 1) / 100))'                  (ushort)(AV_SPE + (scalar * GetStat(p.SPE' HT_SPE ? 31 : IV_SPE' level' nature' 4) / 100))'                  (ushort)(AV_SPA + (scalar * GetStat(p.SPA' HT_SPA ? 31 : IV_SPA' level' nature' 2) / 100))'                  (ushort)(AV_SPD + (scalar * GetStat(p.SPD' HT_SPD ? 31 : IV_SPD' level' nature' 3) / 100))'              };
Magic Number,PKHeX.Core,PB7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PB7.cs,CalculateStatsBeluga,The following statement contains a magic number: ushort[] stats =              {                  (ushort)(AV_HP  + GetStat(p.HP'  HT_HP  ? 31 : IV_HP'  level) + 10 + level)'                  (ushort)(AV_ATK + (scalar * GetStat(p.ATK' HT_ATK ? 31 : IV_ATK' level' nature' 0) / 100))'                  (ushort)(AV_DEF + (scalar * GetStat(p.DEF' HT_DEF ? 31 : IV_DEF' level' nature' 1) / 100))'                  (ushort)(AV_SPE + (scalar * GetStat(p.SPE' HT_SPE ? 31 : IV_SPE' level' nature' 4) / 100))'                  (ushort)(AV_SPA + (scalar * GetStat(p.SPA' HT_SPA ? 31 : IV_SPA' level' nature' 2) / 100))'                  (ushort)(AV_SPD + (scalar * GetStat(p.SPD' HT_SPD ? 31 : IV_SPD' level' nature' 3) / 100))'              };
Magic Number,PKHeX.Core,PB7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PB7.cs,CalculateStatsBeluga,The following statement contains a magic number: ushort[] stats =              {                  (ushort)(AV_HP  + GetStat(p.HP'  HT_HP  ? 31 : IV_HP'  level) + 10 + level)'                  (ushort)(AV_ATK + (scalar * GetStat(p.ATK' HT_ATK ? 31 : IV_ATK' level' nature' 0) / 100))'                  (ushort)(AV_DEF + (scalar * GetStat(p.DEF' HT_DEF ? 31 : IV_DEF' level' nature' 1) / 100))'                  (ushort)(AV_SPE + (scalar * GetStat(p.SPE' HT_SPE ? 31 : IV_SPE' level' nature' 4) / 100))'                  (ushort)(AV_SPA + (scalar * GetStat(p.SPA' HT_SPA ? 31 : IV_SPA' level' nature' 2) / 100))'                  (ushort)(AV_SPD + (scalar * GetStat(p.SPD' HT_SPD ? 31 : IV_SPD' level' nature' 3) / 100))'              };
Magic Number,PKHeX.Core,PB7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PB7.cs,CalculateStatsBeluga,The following statement contains a magic number: ushort[] stats =              {                  (ushort)(AV_HP  + GetStat(p.HP'  HT_HP  ? 31 : IV_HP'  level) + 10 + level)'                  (ushort)(AV_ATK + (scalar * GetStat(p.ATK' HT_ATK ? 31 : IV_ATK' level' nature' 0) / 100))'                  (ushort)(AV_DEF + (scalar * GetStat(p.DEF' HT_DEF ? 31 : IV_DEF' level' nature' 1) / 100))'                  (ushort)(AV_SPE + (scalar * GetStat(p.SPE' HT_SPE ? 31 : IV_SPE' level' nature' 4) / 100))'                  (ushort)(AV_SPA + (scalar * GetStat(p.SPA' HT_SPA ? 31 : IV_SPA' level' nature' 2) / 100))'                  (ushort)(AV_SPD + (scalar * GetStat(p.SPD' HT_SPD ? 31 : IV_SPD' level' nature' 3) / 100))'              };
Magic Number,PKHeX.Core,PB7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PB7.cs,CalculateStatsBeluga,The following statement contains a magic number: ushort[] stats =              {                  (ushort)(AV_HP  + GetStat(p.HP'  HT_HP  ? 31 : IV_HP'  level) + 10 + level)'                  (ushort)(AV_ATK + (scalar * GetStat(p.ATK' HT_ATK ? 31 : IV_ATK' level' nature' 0) / 100))'                  (ushort)(AV_DEF + (scalar * GetStat(p.DEF' HT_DEF ? 31 : IV_DEF' level' nature' 1) / 100))'                  (ushort)(AV_SPE + (scalar * GetStat(p.SPE' HT_SPE ? 31 : IV_SPE' level' nature' 4) / 100))'                  (ushort)(AV_SPA + (scalar * GetStat(p.SPA' HT_SPA ? 31 : IV_SPA' level' nature' 2) / 100))'                  (ushort)(AV_SPD + (scalar * GetStat(p.SPD' HT_SPD ? 31 : IV_SPD' level' nature' 3) / 100))'              };
Magic Number,PKHeX.Core,PB7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PB7.cs,CalculateStatsBeluga,The following statement contains a magic number: ushort[] stats =              {                  (ushort)(AV_HP  + GetStat(p.HP'  HT_HP  ? 31 : IV_HP'  level) + 10 + level)'                  (ushort)(AV_ATK + (scalar * GetStat(p.ATK' HT_ATK ? 31 : IV_ATK' level' nature' 0) / 100))'                  (ushort)(AV_DEF + (scalar * GetStat(p.DEF' HT_DEF ? 31 : IV_DEF' level' nature' 1) / 100))'                  (ushort)(AV_SPE + (scalar * GetStat(p.SPE' HT_SPE ? 31 : IV_SPE' level' nature' 4) / 100))'                  (ushort)(AV_SPA + (scalar * GetStat(p.SPA' HT_SPA ? 31 : IV_SPA' level' nature' 2) / 100))'                  (ushort)(AV_SPD + (scalar * GetStat(p.SPD' HT_SPD ? 31 : IV_SPD' level' nature' 3) / 100))'              };
Magic Number,PKHeX.Core,PB7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PB7.cs,CalculateStatsBeluga,The following statement contains a magic number: ushort[] stats =              {                  (ushort)(AV_HP  + GetStat(p.HP'  HT_HP  ? 31 : IV_HP'  level) + 10 + level)'                  (ushort)(AV_ATK + (scalar * GetStat(p.ATK' HT_ATK ? 31 : IV_ATK' level' nature' 0) / 100))'                  (ushort)(AV_DEF + (scalar * GetStat(p.DEF' HT_DEF ? 31 : IV_DEF' level' nature' 1) / 100))'                  (ushort)(AV_SPE + (scalar * GetStat(p.SPE' HT_SPE ? 31 : IV_SPE' level' nature' 4) / 100))'                  (ushort)(AV_SPA + (scalar * GetStat(p.SPA' HT_SPA ? 31 : IV_SPA' level' nature' 2) / 100))'                  (ushort)(AV_SPD + (scalar * GetStat(p.SPD' HT_SPD ? 31 : IV_SPD' level' nature' 3) / 100))'              };
Magic Number,PKHeX.Core,PB7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PB7.cs,CalculateStatsBeluga,The following statement contains a magic number: Species == 292
Magic Number,PKHeX.Core,PB7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PB7.cs,GetStat,The following statement contains a magic number: int initial = GetStat(baseStat' iv' level) + 5;
Magic Number,PKHeX.Core,PB7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PB7.cs,AmplifyStat,The following statement contains a magic number: return GetNatureAmp(nature' index) switch              {                   1 => (110 * initial / 100)' // 110%                  -1 => (90 * initial / 100)' // 90%                  _ => initial              };
Magic Number,PKHeX.Core,PB7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PB7.cs,AmplifyStat,The following statement contains a magic number: return GetNatureAmp(nature' index) switch              {                   1 => (110 * initial / 100)' // 110%                  -1 => (90 * initial / 100)' // 90%                  _ => initial              };
Magic Number,PKHeX.Core,PB7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PB7.cs,AmplifyStat,The following statement contains a magic number: return GetNatureAmp(nature' index) switch              {                   1 => (110 * initial / 100)' // 110%                  -1 => (90 * initial / 100)' // 90%                  _ => initial              };
Magic Number,PKHeX.Core,PB7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PB7.cs,AmplifyStat,The following statement contains a magic number: return GetNatureAmp(nature' index) switch              {                   1 => (110 * initial / 100)' // 110%                  -1 => (90 * initial / 100)' // 90%                  _ => initial              };
Magic Number,PKHeX.Core,PB7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PB7.cs,GetNatureAmp,The following statement contains a magic number: (uint)nature >= 25
Magic Number,PKHeX.Core,PB7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PB7.cs,GetNatureAmp,The following statement contains a magic number: return NatureAmpTable[(5 * nature) + index];
Magic Number,PKHeX.Core,PB7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PB7.cs,ResetHeight,The following statement contains a magic number: Math.Abs(current - updated) > 0.0001f
Magic Number,PKHeX.Core,PB7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PB7.cs,ResetWeight,The following statement contains a magic number: Math.Abs(current - updated) > 0.0001f
Magic Number,PKHeX.Core,PB7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PB7.cs,GetHeightRatio,The following statement contains a magic number: float result = (byte)heightScalar / 255f;
Magic Number,PKHeX.Core,PB7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PB7.cs,GetHeightRatio,The following statement contains a magic number: result *= 0.8f;
Magic Number,PKHeX.Core,PB7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PB7.cs,GetHeightRatio,The following statement contains a magic number: result += 0.6f;
Magic Number,PKHeX.Core,PB7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PB7.cs,GetWeightRatio,The following statement contains a magic number: float result = (byte)weightScalar / 255f;
Magic Number,PKHeX.Core,PB7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PB7.cs,GetWeightRatio,The following statement contains a magic number: result *= 0.4f;
Magic Number,PKHeX.Core,PB7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PB7.cs,GetWeightRatio,The following statement contains a magic number: result += 0.8f;
Magic Number,PKHeX.Core,PB7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PB7.cs,GetHeightScalar,The following statement contains a magic number: float biasH = avgHeight * -0.6f;
Magic Number,PKHeX.Core,PB7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PB7.cs,GetHeightScalar,The following statement contains a magic number: float biasL = avgHeight * 0.8f;
Magic Number,PKHeX.Core,PB7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PB7.cs,GetHeightScalar,The following statement contains a magic number: result *= 255f;
Magic Number,PKHeX.Core,PB7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PB7.cs,GetHeightScalar,The following statement contains a magic number: int unsigned = value & ~(value >> 31);
Magic Number,PKHeX.Core,PB7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PB7.cs,GetHeightScalar,The following statement contains a magic number: return (byte)Math.Min(255' unsigned);
Magic Number,PKHeX.Core,PB7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PB7.cs,GetWeightScalar,The following statement contains a magic number: float top = avgWeight * -0.8f;
Magic Number,PKHeX.Core,PB7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PB7.cs,GetWeightScalar,The following statement contains a magic number: float bot = avgWeight * 0.4f;
Magic Number,PKHeX.Core,PB7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PB7.cs,GetWeightScalar,The following statement contains a magic number: result *= 255f;
Magic Number,PKHeX.Core,PB7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PB7.cs,GetWeightScalar,The following statement contains a magic number: int unsigned = value & ~(value >> 31);
Magic Number,PKHeX.Core,PB7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PB7.cs,GetWeightScalar,The following statement contains a magic number: return (byte)Math.Min(255' unsigned);
Magic Number,PKHeX.Core,PK1,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PK1.cs,SetSpeciesValues,The following statement contains a magic number: TradebackStatus != TradebackType.WasTradeback && !Legal.IsCatchRateHeldItem(Catch_Rate) && !(value == 25 && Catch_Rate == 0xA3)
Magic Number,PKHeX.Core,PK1,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PK1.cs,ConvertToPK7,The following statement contains a magic number: var pk7 = new PK7              {                  EncryptionConstant = Util.Rand32()'                  Species = Species'                  TID = TID'                  CurrentLevel = CurrentLevel'                  EXP = EXP'                  Met_Level = CurrentLevel'                  Nature = Experience.GetNatureVC(EXP)'                  PID = Util.Rand32()'                  Ball = 4'                  MetDate = DateTime.Now'                  Version = (int)GameVersion.RD' // Default to red                  Move1 = Move1'                  Move2 = Move2'                  Move3 = Move3'                  Move4 = Move4'                  Move1_PPUps = Move1_PPUps'                  Move2_PPUps = Move2_PPUps'                  Move3_PPUps = Move3_PPUps'                  Move4_PPUps = Move4_PPUps'                  Move1_PP = Move1_PP'                  Move2_PP = Move2_PP'                  Move3_PP = Move3_PP'                  Move4_PP = Move4_PP'                  Met_Location = Legal.Transfer1' // "Kanto region"' hardcoded.                  Gender = Gender'                  OT_Name = StringConverter12.GetG1ConvertedString(otname' Japanese)'                  IsNicknamed = false'                    Country = PKMConverter.Country'                  Region = PKMConverter.Region'                  ConsoleRegion = PKMConverter.ConsoleRegion'                  CurrentHandler = 1'                  HT_Name = PKMConverter.OT_Name'                  HT_Gender = PKMConverter.OT_Gender'                  Geo1_Country = PKMConverter.Country'                  Geo1_Region = PKMConverter.Region              };
Magic Number,PKHeX.Core,PK1,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PK1.cs,ConvertToPK7,The following statement contains a magic number: var new_ivs = new int[6];
Magic Number,PKHeX.Core,PK1,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PK1.cs,ConvertToPK7,The following statement contains a magic number: int flawless = Species == 151 ? 5 : 3;
Magic Number,PKHeX.Core,PK1,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PK1.cs,ConvertToPK7,The following statement contains a magic number: int flawless = Species == 151 ? 5 : 3;
Magic Number,PKHeX.Core,PK1,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PK1.cs,ConvertToPK7,The following statement contains a magic number: int flawless = Species == 151 ? 5 : 3;
Magic Number,PKHeX.Core,PK1,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PK1.cs,ConvertToPK7,The following statement contains a magic number: new_ivs[i] = 31;
Magic Number,PKHeX.Core,PK1,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PK1.cs,ConvertToPK7,The following statement contains a magic number: int abil = 2;
Magic Number,PKHeX.Core,PK1,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PK1.cs,ConvertToPK7,The following statement contains a magic number: Species == 151
Magic Number,PKHeX.Core,PK2,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PK2.cs,ConvertToPK7,The following statement contains a magic number: var pk7 = new PK7              {                  EncryptionConstant = Util.Rand32()'                  Species = Species'                  TID = TID'                  CurrentLevel = CurrentLevel'                  EXP = EXP'                  Met_Level = CurrentLevel'                  Nature = Experience.GetNatureVC(EXP)'                  PID = Util.Rand32()'                  Ball = 4'                  MetDate = DateTime.Now'                  Version = HasOriginalMetLocation ? (int)GameVersion.C : (int)GameVersion.SV'                  Move1 = Move1'                  Move2 = Move2'                  Move3 = Move3'                  Move4 = Move4'                  Move1_PPUps = Move1_PPUps'                  Move2_PPUps = Move2_PPUps'                  Move3_PPUps = Move3_PPUps'                  Move4_PPUps = Move4_PPUps'                  Move1_PP = Move1_PP'                  Move2_PP = Move2_PP'                  Move3_PP = Move3_PP'                  Move4_PP = Move4_PP'                  Met_Location = Legal.Transfer2' // "Johto region"' hardcoded.                  Gender = Gender'                  IsNicknamed = false'                  AltForm = AltForm'                    Country = PKMConverter.Country'                  Region = PKMConverter.Region'                  ConsoleRegion = PKMConverter.ConsoleRegion'                  CurrentHandler = 1'                  HT_Name = PKMConverter.OT_Name'                  HT_Gender = PKMConverter.OT_Gender'                  Geo1_Country = PKMConverter.Country'                  Geo1_Region = PKMConverter.Region              };
Magic Number,PKHeX.Core,PK2,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PK2.cs,ConvertToPK7,The following statement contains a magic number: var special = Species == 151 || Species == 251;
Magic Number,PKHeX.Core,PK2,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PK2.cs,ConvertToPK7,The following statement contains a magic number: var special = Species == 151 || Species == 251;
Magic Number,PKHeX.Core,PK2,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PK2.cs,ConvertToPK7,The following statement contains a magic number: var new_ivs = new int[6];
Magic Number,PKHeX.Core,PK2,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PK2.cs,ConvertToPK7,The following statement contains a magic number: int flawless = special ? 5 : 3;
Magic Number,PKHeX.Core,PK2,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PK2.cs,ConvertToPK7,The following statement contains a magic number: int flawless = special ? 5 : 3;
Magic Number,PKHeX.Core,PK2,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PK2.cs,ConvertToPK7,The following statement contains a magic number: new_ivs[i] = 31;
Magic Number,PKHeX.Core,PK2,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PK2.cs,ConvertToPK7,The following statement contains a magic number: int abil = 2;
Magic Number,PKHeX.Core,PK2,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PK2.cs,ConvertToPK7,The following statement contains a magic number: var index = Array.IndexOf(moves' 146);
Magic Number,PKHeX.Core,PK3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PK3.cs,ConvertToPK4,The following statement contains a magic number: PK4 pk4 = new PK4 // Convert away!              {                  PID = PID'                  Species = Species'                  TID = TID'                  SID = SID'                  EXP = IsEgg ? Experience.GetEXP(5' PersonalInfo.EXPGrowth) : EXP'                  Gender = PKX.GetGenderFromPID(Species' PID)'                  AltForm = AltForm'                  // IsEgg = false' -- already false                  OT_Friendship = 70'                  Markings = Markings'                  Language = Language'                  EV_HP = EV_HP'                  EV_ATK = EV_ATK'                  EV_DEF = EV_DEF'                  EV_SPA = EV_SPA'                  EV_SPD = EV_SPD'                  EV_SPE = EV_SPE'                  CNT_Cool = CNT_Cool'                  CNT_Beauty = CNT_Beauty'                  CNT_Cute = CNT_Cute'                  CNT_Smart = CNT_Smart'                  CNT_Tough = CNT_Tough'                  CNT_Sheen = CNT_Sheen'                  Move1 = Move1'                  Move2 = Move2'                  Move3 = Move3'                  Move4 = Move4'                  Move1_PPUps = Move1_PPUps'                  Move2_PPUps = Move2_PPUps'                  Move3_PPUps = Move3_PPUps'                  Move4_PPUps = Move4_PPUps'                  IV_HP = IV_HP'                  IV_ATK = IV_ATK'                  IV_DEF = IV_DEF'                  IV_SPA = IV_SPA'                  IV_SPD = IV_SPD'                  IV_SPE = IV_SPE'                  Ability = Ability'                  Version = Version'                  Ball = Ball'                  PKRS_Strain = PKRS_Strain'                  PKRS_Days = PKRS_Days'                  OT_Gender = OT_Gender'                  MetDate = DateTime.Now'                  Met_Level = CurrentLevel'                  Met_Location = Locations.Transfer3' // Pal Park                    RibbonChampionG3Hoenn = RibbonChampionG3Hoenn'                  RibbonWinning = RibbonWinning'                  RibbonVictory = RibbonVictory'                  RibbonArtist = RibbonArtist'                  RibbonEffort = RibbonEffort'                  RibbonChampionBattle = RibbonChampionBattle'                  RibbonChampionRegional = RibbonChampionRegional'                  RibbonChampionNational = RibbonChampionNational'                  RibbonCountry = RibbonCountry'                  RibbonNational = RibbonNational'                  RibbonEarth = RibbonEarth'                  RibbonWorld = RibbonWorld'                    // byte -> bool contest ribbons                  RibbonG3Cool         = RibbonCountG3Cool > 0'                  RibbonG3CoolSuper    = RibbonCountG3Cool > 1'                  RibbonG3CoolHyper    = RibbonCountG3Cool > 2'                  RibbonG3CoolMaster   = RibbonCountG3Cool > 3'                    RibbonG3Beauty       = RibbonCountG3Beauty > 0'                  RibbonG3BeautySuper  = RibbonCountG3Beauty > 1'                  RibbonG3BeautyHyper  = RibbonCountG3Beauty > 2'                  RibbonG3BeautyMaster = RibbonCountG3Beauty > 3'                    RibbonG3Cute         = RibbonCountG3Cute > 0'                  RibbonG3CuteSuper    = RibbonCountG3Cute > 1'                  RibbonG3CuteHyper    = RibbonCountG3Cute > 2'                  RibbonG3CuteMaster   = RibbonCountG3Cute > 3'                    RibbonG3Smart        = RibbonCountG3Smart > 0'                  RibbonG3SmartSuper   = RibbonCountG3Smart > 1'                  RibbonG3SmartHyper   = RibbonCountG3Smart > 2'                  RibbonG3SmartMaster  = RibbonCountG3Smart > 3'                    RibbonG3Tough        = RibbonCountG3Tough > 0'                  RibbonG3ToughSuper   = RibbonCountG3Tough > 1'                  RibbonG3ToughHyper   = RibbonCountG3Tough > 2'                  RibbonG3ToughMaster  = RibbonCountG3Tough > 3'                    FatefulEncounter = FatefulEncounter'              };
Magic Number,PKHeX.Core,PK3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PK3.cs,ConvertToPK4,The following statement contains a magic number: PK4 pk4 = new PK4 // Convert away!              {                  PID = PID'                  Species = Species'                  TID = TID'                  SID = SID'                  EXP = IsEgg ? Experience.GetEXP(5' PersonalInfo.EXPGrowth) : EXP'                  Gender = PKX.GetGenderFromPID(Species' PID)'                  AltForm = AltForm'                  // IsEgg = false' -- already false                  OT_Friendship = 70'                  Markings = Markings'                  Language = Language'                  EV_HP = EV_HP'                  EV_ATK = EV_ATK'                  EV_DEF = EV_DEF'                  EV_SPA = EV_SPA'                  EV_SPD = EV_SPD'                  EV_SPE = EV_SPE'                  CNT_Cool = CNT_Cool'                  CNT_Beauty = CNT_Beauty'                  CNT_Cute = CNT_Cute'                  CNT_Smart = CNT_Smart'                  CNT_Tough = CNT_Tough'                  CNT_Sheen = CNT_Sheen'                  Move1 = Move1'                  Move2 = Move2'                  Move3 = Move3'                  Move4 = Move4'                  Move1_PPUps = Move1_PPUps'                  Move2_PPUps = Move2_PPUps'                  Move3_PPUps = Move3_PPUps'                  Move4_PPUps = Move4_PPUps'                  IV_HP = IV_HP'                  IV_ATK = IV_ATK'                  IV_DEF = IV_DEF'                  IV_SPA = IV_SPA'                  IV_SPD = IV_SPD'                  IV_SPE = IV_SPE'                  Ability = Ability'                  Version = Version'                  Ball = Ball'                  PKRS_Strain = PKRS_Strain'                  PKRS_Days = PKRS_Days'                  OT_Gender = OT_Gender'                  MetDate = DateTime.Now'                  Met_Level = CurrentLevel'                  Met_Location = Locations.Transfer3' // Pal Park                    RibbonChampionG3Hoenn = RibbonChampionG3Hoenn'                  RibbonWinning = RibbonWinning'                  RibbonVictory = RibbonVictory'                  RibbonArtist = RibbonArtist'                  RibbonEffort = RibbonEffort'                  RibbonChampionBattle = RibbonChampionBattle'                  RibbonChampionRegional = RibbonChampionRegional'                  RibbonChampionNational = RibbonChampionNational'                  RibbonCountry = RibbonCountry'                  RibbonNational = RibbonNational'                  RibbonEarth = RibbonEarth'                  RibbonWorld = RibbonWorld'                    // byte -> bool contest ribbons                  RibbonG3Cool         = RibbonCountG3Cool > 0'                  RibbonG3CoolSuper    = RibbonCountG3Cool > 1'                  RibbonG3CoolHyper    = RibbonCountG3Cool > 2'                  RibbonG3CoolMaster   = RibbonCountG3Cool > 3'                    RibbonG3Beauty       = RibbonCountG3Beauty > 0'                  RibbonG3BeautySuper  = RibbonCountG3Beauty > 1'                  RibbonG3BeautyHyper  = RibbonCountG3Beauty > 2'                  RibbonG3BeautyMaster = RibbonCountG3Beauty > 3'                    RibbonG3Cute         = RibbonCountG3Cute > 0'                  RibbonG3CuteSuper    = RibbonCountG3Cute > 1'                  RibbonG3CuteHyper    = RibbonCountG3Cute > 2'                  RibbonG3CuteMaster   = RibbonCountG3Cute > 3'                    RibbonG3Smart        = RibbonCountG3Smart > 0'                  RibbonG3SmartSuper   = RibbonCountG3Smart > 1'                  RibbonG3SmartHyper   = RibbonCountG3Smart > 2'                  RibbonG3SmartMaster  = RibbonCountG3Smart > 3'                    RibbonG3Tough        = RibbonCountG3Tough > 0'                  RibbonG3ToughSuper   = RibbonCountG3Tough > 1'                  RibbonG3ToughHyper   = RibbonCountG3Tough > 2'                  RibbonG3ToughMaster  = RibbonCountG3Tough > 3'                    FatefulEncounter = FatefulEncounter'              };
Magic Number,PKHeX.Core,PK3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PK3.cs,ConvertToPK4,The following statement contains a magic number: PK4 pk4 = new PK4 // Convert away!              {                  PID = PID'                  Species = Species'                  TID = TID'                  SID = SID'                  EXP = IsEgg ? Experience.GetEXP(5' PersonalInfo.EXPGrowth) : EXP'                  Gender = PKX.GetGenderFromPID(Species' PID)'                  AltForm = AltForm'                  // IsEgg = false' -- already false                  OT_Friendship = 70'                  Markings = Markings'                  Language = Language'                  EV_HP = EV_HP'                  EV_ATK = EV_ATK'                  EV_DEF = EV_DEF'                  EV_SPA = EV_SPA'                  EV_SPD = EV_SPD'                  EV_SPE = EV_SPE'                  CNT_Cool = CNT_Cool'                  CNT_Beauty = CNT_Beauty'                  CNT_Cute = CNT_Cute'                  CNT_Smart = CNT_Smart'                  CNT_Tough = CNT_Tough'                  CNT_Sheen = CNT_Sheen'                  Move1 = Move1'                  Move2 = Move2'                  Move3 = Move3'                  Move4 = Move4'                  Move1_PPUps = Move1_PPUps'                  Move2_PPUps = Move2_PPUps'                  Move3_PPUps = Move3_PPUps'                  Move4_PPUps = Move4_PPUps'                  IV_HP = IV_HP'                  IV_ATK = IV_ATK'                  IV_DEF = IV_DEF'                  IV_SPA = IV_SPA'                  IV_SPD = IV_SPD'                  IV_SPE = IV_SPE'                  Ability = Ability'                  Version = Version'                  Ball = Ball'                  PKRS_Strain = PKRS_Strain'                  PKRS_Days = PKRS_Days'                  OT_Gender = OT_Gender'                  MetDate = DateTime.Now'                  Met_Level = CurrentLevel'                  Met_Location = Locations.Transfer3' // Pal Park                    RibbonChampionG3Hoenn = RibbonChampionG3Hoenn'                  RibbonWinning = RibbonWinning'                  RibbonVictory = RibbonVictory'                  RibbonArtist = RibbonArtist'                  RibbonEffort = RibbonEffort'                  RibbonChampionBattle = RibbonChampionBattle'                  RibbonChampionRegional = RibbonChampionRegional'                  RibbonChampionNational = RibbonChampionNational'                  RibbonCountry = RibbonCountry'                  RibbonNational = RibbonNational'                  RibbonEarth = RibbonEarth'                  RibbonWorld = RibbonWorld'                    // byte -> bool contest ribbons                  RibbonG3Cool         = RibbonCountG3Cool > 0'                  RibbonG3CoolSuper    = RibbonCountG3Cool > 1'                  RibbonG3CoolHyper    = RibbonCountG3Cool > 2'                  RibbonG3CoolMaster   = RibbonCountG3Cool > 3'                    RibbonG3Beauty       = RibbonCountG3Beauty > 0'                  RibbonG3BeautySuper  = RibbonCountG3Beauty > 1'                  RibbonG3BeautyHyper  = RibbonCountG3Beauty > 2'                  RibbonG3BeautyMaster = RibbonCountG3Beauty > 3'                    RibbonG3Cute         = RibbonCountG3Cute > 0'                  RibbonG3CuteSuper    = RibbonCountG3Cute > 1'                  RibbonG3CuteHyper    = RibbonCountG3Cute > 2'                  RibbonG3CuteMaster   = RibbonCountG3Cute > 3'                    RibbonG3Smart        = RibbonCountG3Smart > 0'                  RibbonG3SmartSuper   = RibbonCountG3Smart > 1'                  RibbonG3SmartHyper   = RibbonCountG3Smart > 2'                  RibbonG3SmartMaster  = RibbonCountG3Smart > 3'                    RibbonG3Tough        = RibbonCountG3Tough > 0'                  RibbonG3ToughSuper   = RibbonCountG3Tough > 1'                  RibbonG3ToughHyper   = RibbonCountG3Tough > 2'                  RibbonG3ToughMaster  = RibbonCountG3Tough > 3'                    FatefulEncounter = FatefulEncounter'              };
Magic Number,PKHeX.Core,PK3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PK3.cs,ConvertToPK4,The following statement contains a magic number: PK4 pk4 = new PK4 // Convert away!              {                  PID = PID'                  Species = Species'                  TID = TID'                  SID = SID'                  EXP = IsEgg ? Experience.GetEXP(5' PersonalInfo.EXPGrowth) : EXP'                  Gender = PKX.GetGenderFromPID(Species' PID)'                  AltForm = AltForm'                  // IsEgg = false' -- already false                  OT_Friendship = 70'                  Markings = Markings'                  Language = Language'                  EV_HP = EV_HP'                  EV_ATK = EV_ATK'                  EV_DEF = EV_DEF'                  EV_SPA = EV_SPA'                  EV_SPD = EV_SPD'                  EV_SPE = EV_SPE'                  CNT_Cool = CNT_Cool'                  CNT_Beauty = CNT_Beauty'                  CNT_Cute = CNT_Cute'                  CNT_Smart = CNT_Smart'                  CNT_Tough = CNT_Tough'                  CNT_Sheen = CNT_Sheen'                  Move1 = Move1'                  Move2 = Move2'                  Move3 = Move3'                  Move4 = Move4'                  Move1_PPUps = Move1_PPUps'                  Move2_PPUps = Move2_PPUps'                  Move3_PPUps = Move3_PPUps'                  Move4_PPUps = Move4_PPUps'                  IV_HP = IV_HP'                  IV_ATK = IV_ATK'                  IV_DEF = IV_DEF'                  IV_SPA = IV_SPA'                  IV_SPD = IV_SPD'                  IV_SPE = IV_SPE'                  Ability = Ability'                  Version = Version'                  Ball = Ball'                  PKRS_Strain = PKRS_Strain'                  PKRS_Days = PKRS_Days'                  OT_Gender = OT_Gender'                  MetDate = DateTime.Now'                  Met_Level = CurrentLevel'                  Met_Location = Locations.Transfer3' // Pal Park                    RibbonChampionG3Hoenn = RibbonChampionG3Hoenn'                  RibbonWinning = RibbonWinning'                  RibbonVictory = RibbonVictory'                  RibbonArtist = RibbonArtist'                  RibbonEffort = RibbonEffort'                  RibbonChampionBattle = RibbonChampionBattle'                  RibbonChampionRegional = RibbonChampionRegional'                  RibbonChampionNational = RibbonChampionNational'                  RibbonCountry = RibbonCountry'                  RibbonNational = RibbonNational'                  RibbonEarth = RibbonEarth'                  RibbonWorld = RibbonWorld'                    // byte -> bool contest ribbons                  RibbonG3Cool         = RibbonCountG3Cool > 0'                  RibbonG3CoolSuper    = RibbonCountG3Cool > 1'                  RibbonG3CoolHyper    = RibbonCountG3Cool > 2'                  RibbonG3CoolMaster   = RibbonCountG3Cool > 3'                    RibbonG3Beauty       = RibbonCountG3Beauty > 0'                  RibbonG3BeautySuper  = RibbonCountG3Beauty > 1'                  RibbonG3BeautyHyper  = RibbonCountG3Beauty > 2'                  RibbonG3BeautyMaster = RibbonCountG3Beauty > 3'                    RibbonG3Cute         = RibbonCountG3Cute > 0'                  RibbonG3CuteSuper    = RibbonCountG3Cute > 1'                  RibbonG3CuteHyper    = RibbonCountG3Cute > 2'                  RibbonG3CuteMaster   = RibbonCountG3Cute > 3'                    RibbonG3Smart        = RibbonCountG3Smart > 0'                  RibbonG3SmartSuper   = RibbonCountG3Smart > 1'                  RibbonG3SmartHyper   = RibbonCountG3Smart > 2'                  RibbonG3SmartMaster  = RibbonCountG3Smart > 3'                    RibbonG3Tough        = RibbonCountG3Tough > 0'                  RibbonG3ToughSuper   = RibbonCountG3Tough > 1'                  RibbonG3ToughHyper   = RibbonCountG3Tough > 2'                  RibbonG3ToughMaster  = RibbonCountG3Tough > 3'                    FatefulEncounter = FatefulEncounter'              };
Magic Number,PKHeX.Core,PK3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PK3.cs,ConvertToPK4,The following statement contains a magic number: PK4 pk4 = new PK4 // Convert away!              {                  PID = PID'                  Species = Species'                  TID = TID'                  SID = SID'                  EXP = IsEgg ? Experience.GetEXP(5' PersonalInfo.EXPGrowth) : EXP'                  Gender = PKX.GetGenderFromPID(Species' PID)'                  AltForm = AltForm'                  // IsEgg = false' -- already false                  OT_Friendship = 70'                  Markings = Markings'                  Language = Language'                  EV_HP = EV_HP'                  EV_ATK = EV_ATK'                  EV_DEF = EV_DEF'                  EV_SPA = EV_SPA'                  EV_SPD = EV_SPD'                  EV_SPE = EV_SPE'                  CNT_Cool = CNT_Cool'                  CNT_Beauty = CNT_Beauty'                  CNT_Cute = CNT_Cute'                  CNT_Smart = CNT_Smart'                  CNT_Tough = CNT_Tough'                  CNT_Sheen = CNT_Sheen'                  Move1 = Move1'                  Move2 = Move2'                  Move3 = Move3'                  Move4 = Move4'                  Move1_PPUps = Move1_PPUps'                  Move2_PPUps = Move2_PPUps'                  Move3_PPUps = Move3_PPUps'                  Move4_PPUps = Move4_PPUps'                  IV_HP = IV_HP'                  IV_ATK = IV_ATK'                  IV_DEF = IV_DEF'                  IV_SPA = IV_SPA'                  IV_SPD = IV_SPD'                  IV_SPE = IV_SPE'                  Ability = Ability'                  Version = Version'                  Ball = Ball'                  PKRS_Strain = PKRS_Strain'                  PKRS_Days = PKRS_Days'                  OT_Gender = OT_Gender'                  MetDate = DateTime.Now'                  Met_Level = CurrentLevel'                  Met_Location = Locations.Transfer3' // Pal Park                    RibbonChampionG3Hoenn = RibbonChampionG3Hoenn'                  RibbonWinning = RibbonWinning'                  RibbonVictory = RibbonVictory'                  RibbonArtist = RibbonArtist'                  RibbonEffort = RibbonEffort'                  RibbonChampionBattle = RibbonChampionBattle'                  RibbonChampionRegional = RibbonChampionRegional'                  RibbonChampionNational = RibbonChampionNational'                  RibbonCountry = RibbonCountry'                  RibbonNational = RibbonNational'                  RibbonEarth = RibbonEarth'                  RibbonWorld = RibbonWorld'                    // byte -> bool contest ribbons                  RibbonG3Cool         = RibbonCountG3Cool > 0'                  RibbonG3CoolSuper    = RibbonCountG3Cool > 1'                  RibbonG3CoolHyper    = RibbonCountG3Cool > 2'                  RibbonG3CoolMaster   = RibbonCountG3Cool > 3'                    RibbonG3Beauty       = RibbonCountG3Beauty > 0'                  RibbonG3BeautySuper  = RibbonCountG3Beauty > 1'                  RibbonG3BeautyHyper  = RibbonCountG3Beauty > 2'                  RibbonG3BeautyMaster = RibbonCountG3Beauty > 3'                    RibbonG3Cute         = RibbonCountG3Cute > 0'                  RibbonG3CuteSuper    = RibbonCountG3Cute > 1'                  RibbonG3CuteHyper    = RibbonCountG3Cute > 2'                  RibbonG3CuteMaster   = RibbonCountG3Cute > 3'                    RibbonG3Smart        = RibbonCountG3Smart > 0'                  RibbonG3SmartSuper   = RibbonCountG3Smart > 1'                  RibbonG3SmartHyper   = RibbonCountG3Smart > 2'                  RibbonG3SmartMaster  = RibbonCountG3Smart > 3'                    RibbonG3Tough        = RibbonCountG3Tough > 0'                  RibbonG3ToughSuper   = RibbonCountG3Tough > 1'                  RibbonG3ToughHyper   = RibbonCountG3Tough > 2'                  RibbonG3ToughMaster  = RibbonCountG3Tough > 3'                    FatefulEncounter = FatefulEncounter'              };
Magic Number,PKHeX.Core,PK3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PK3.cs,ConvertToPK4,The following statement contains a magic number: PK4 pk4 = new PK4 // Convert away!              {                  PID = PID'                  Species = Species'                  TID = TID'                  SID = SID'                  EXP = IsEgg ? Experience.GetEXP(5' PersonalInfo.EXPGrowth) : EXP'                  Gender = PKX.GetGenderFromPID(Species' PID)'                  AltForm = AltForm'                  // IsEgg = false' -- already false                  OT_Friendship = 70'                  Markings = Markings'                  Language = Language'                  EV_HP = EV_HP'                  EV_ATK = EV_ATK'                  EV_DEF = EV_DEF'                  EV_SPA = EV_SPA'                  EV_SPD = EV_SPD'                  EV_SPE = EV_SPE'                  CNT_Cool = CNT_Cool'                  CNT_Beauty = CNT_Beauty'                  CNT_Cute = CNT_Cute'                  CNT_Smart = CNT_Smart'                  CNT_Tough = CNT_Tough'                  CNT_Sheen = CNT_Sheen'                  Move1 = Move1'                  Move2 = Move2'                  Move3 = Move3'                  Move4 = Move4'                  Move1_PPUps = Move1_PPUps'                  Move2_PPUps = Move2_PPUps'                  Move3_PPUps = Move3_PPUps'                  Move4_PPUps = Move4_PPUps'                  IV_HP = IV_HP'                  IV_ATK = IV_ATK'                  IV_DEF = IV_DEF'                  IV_SPA = IV_SPA'                  IV_SPD = IV_SPD'                  IV_SPE = IV_SPE'                  Ability = Ability'                  Version = Version'                  Ball = Ball'                  PKRS_Strain = PKRS_Strain'                  PKRS_Days = PKRS_Days'                  OT_Gender = OT_Gender'                  MetDate = DateTime.Now'                  Met_Level = CurrentLevel'                  Met_Location = Locations.Transfer3' // Pal Park                    RibbonChampionG3Hoenn = RibbonChampionG3Hoenn'                  RibbonWinning = RibbonWinning'                  RibbonVictory = RibbonVictory'                  RibbonArtist = RibbonArtist'                  RibbonEffort = RibbonEffort'                  RibbonChampionBattle = RibbonChampionBattle'                  RibbonChampionRegional = RibbonChampionRegional'                  RibbonChampionNational = RibbonChampionNational'                  RibbonCountry = RibbonCountry'                  RibbonNational = RibbonNational'                  RibbonEarth = RibbonEarth'                  RibbonWorld = RibbonWorld'                    // byte -> bool contest ribbons                  RibbonG3Cool         = RibbonCountG3Cool > 0'                  RibbonG3CoolSuper    = RibbonCountG3Cool > 1'                  RibbonG3CoolHyper    = RibbonCountG3Cool > 2'                  RibbonG3CoolMaster   = RibbonCountG3Cool > 3'                    RibbonG3Beauty       = RibbonCountG3Beauty > 0'                  RibbonG3BeautySuper  = RibbonCountG3Beauty > 1'                  RibbonG3BeautyHyper  = RibbonCountG3Beauty > 2'                  RibbonG3BeautyMaster = RibbonCountG3Beauty > 3'                    RibbonG3Cute         = RibbonCountG3Cute > 0'                  RibbonG3CuteSuper    = RibbonCountG3Cute > 1'                  RibbonG3CuteHyper    = RibbonCountG3Cute > 2'                  RibbonG3CuteMaster   = RibbonCountG3Cute > 3'                    RibbonG3Smart        = RibbonCountG3Smart > 0'                  RibbonG3SmartSuper   = RibbonCountG3Smart > 1'                  RibbonG3SmartHyper   = RibbonCountG3Smart > 2'                  RibbonG3SmartMaster  = RibbonCountG3Smart > 3'                    RibbonG3Tough        = RibbonCountG3Tough > 0'                  RibbonG3ToughSuper   = RibbonCountG3Tough > 1'                  RibbonG3ToughHyper   = RibbonCountG3Tough > 2'                  RibbonG3ToughMaster  = RibbonCountG3Tough > 3'                    FatefulEncounter = FatefulEncounter'              };
Magic Number,PKHeX.Core,PK3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PK3.cs,ConvertToPK4,The following statement contains a magic number: PK4 pk4 = new PK4 // Convert away!              {                  PID = PID'                  Species = Species'                  TID = TID'                  SID = SID'                  EXP = IsEgg ? Experience.GetEXP(5' PersonalInfo.EXPGrowth) : EXP'                  Gender = PKX.GetGenderFromPID(Species' PID)'                  AltForm = AltForm'                  // IsEgg = false' -- already false                  OT_Friendship = 70'                  Markings = Markings'                  Language = Language'                  EV_HP = EV_HP'                  EV_ATK = EV_ATK'                  EV_DEF = EV_DEF'                  EV_SPA = EV_SPA'                  EV_SPD = EV_SPD'                  EV_SPE = EV_SPE'                  CNT_Cool = CNT_Cool'                  CNT_Beauty = CNT_Beauty'                  CNT_Cute = CNT_Cute'                  CNT_Smart = CNT_Smart'                  CNT_Tough = CNT_Tough'                  CNT_Sheen = CNT_Sheen'                  Move1 = Move1'                  Move2 = Move2'                  Move3 = Move3'                  Move4 = Move4'                  Move1_PPUps = Move1_PPUps'                  Move2_PPUps = Move2_PPUps'                  Move3_PPUps = Move3_PPUps'                  Move4_PPUps = Move4_PPUps'                  IV_HP = IV_HP'                  IV_ATK = IV_ATK'                  IV_DEF = IV_DEF'                  IV_SPA = IV_SPA'                  IV_SPD = IV_SPD'                  IV_SPE = IV_SPE'                  Ability = Ability'                  Version = Version'                  Ball = Ball'                  PKRS_Strain = PKRS_Strain'                  PKRS_Days = PKRS_Days'                  OT_Gender = OT_Gender'                  MetDate = DateTime.Now'                  Met_Level = CurrentLevel'                  Met_Location = Locations.Transfer3' // Pal Park                    RibbonChampionG3Hoenn = RibbonChampionG3Hoenn'                  RibbonWinning = RibbonWinning'                  RibbonVictory = RibbonVictory'                  RibbonArtist = RibbonArtist'                  RibbonEffort = RibbonEffort'                  RibbonChampionBattle = RibbonChampionBattle'                  RibbonChampionRegional = RibbonChampionRegional'                  RibbonChampionNational = RibbonChampionNational'                  RibbonCountry = RibbonCountry'                  RibbonNational = RibbonNational'                  RibbonEarth = RibbonEarth'                  RibbonWorld = RibbonWorld'                    // byte -> bool contest ribbons                  RibbonG3Cool         = RibbonCountG3Cool > 0'                  RibbonG3CoolSuper    = RibbonCountG3Cool > 1'                  RibbonG3CoolHyper    = RibbonCountG3Cool > 2'                  RibbonG3CoolMaster   = RibbonCountG3Cool > 3'                    RibbonG3Beauty       = RibbonCountG3Beauty > 0'                  RibbonG3BeautySuper  = RibbonCountG3Beauty > 1'                  RibbonG3BeautyHyper  = RibbonCountG3Beauty > 2'                  RibbonG3BeautyMaster = RibbonCountG3Beauty > 3'                    RibbonG3Cute         = RibbonCountG3Cute > 0'                  RibbonG3CuteSuper    = RibbonCountG3Cute > 1'                  RibbonG3CuteHyper    = RibbonCountG3Cute > 2'                  RibbonG3CuteMaster   = RibbonCountG3Cute > 3'                    RibbonG3Smart        = RibbonCountG3Smart > 0'                  RibbonG3SmartSuper   = RibbonCountG3Smart > 1'                  RibbonG3SmartHyper   = RibbonCountG3Smart > 2'                  RibbonG3SmartMaster  = RibbonCountG3Smart > 3'                    RibbonG3Tough        = RibbonCountG3Tough > 0'                  RibbonG3ToughSuper   = RibbonCountG3Tough > 1'                  RibbonG3ToughHyper   = RibbonCountG3Tough > 2'                  RibbonG3ToughMaster  = RibbonCountG3Tough > 3'                    FatefulEncounter = FatefulEncounter'              };
Magic Number,PKHeX.Core,PK3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PK3.cs,ConvertToPK4,The following statement contains a magic number: PK4 pk4 = new PK4 // Convert away!              {                  PID = PID'                  Species = Species'                  TID = TID'                  SID = SID'                  EXP = IsEgg ? Experience.GetEXP(5' PersonalInfo.EXPGrowth) : EXP'                  Gender = PKX.GetGenderFromPID(Species' PID)'                  AltForm = AltForm'                  // IsEgg = false' -- already false                  OT_Friendship = 70'                  Markings = Markings'                  Language = Language'                  EV_HP = EV_HP'                  EV_ATK = EV_ATK'                  EV_DEF = EV_DEF'                  EV_SPA = EV_SPA'                  EV_SPD = EV_SPD'                  EV_SPE = EV_SPE'                  CNT_Cool = CNT_Cool'                  CNT_Beauty = CNT_Beauty'                  CNT_Cute = CNT_Cute'                  CNT_Smart = CNT_Smart'                  CNT_Tough = CNT_Tough'                  CNT_Sheen = CNT_Sheen'                  Move1 = Move1'                  Move2 = Move2'                  Move3 = Move3'                  Move4 = Move4'                  Move1_PPUps = Move1_PPUps'                  Move2_PPUps = Move2_PPUps'                  Move3_PPUps = Move3_PPUps'                  Move4_PPUps = Move4_PPUps'                  IV_HP = IV_HP'                  IV_ATK = IV_ATK'                  IV_DEF = IV_DEF'                  IV_SPA = IV_SPA'                  IV_SPD = IV_SPD'                  IV_SPE = IV_SPE'                  Ability = Ability'                  Version = Version'                  Ball = Ball'                  PKRS_Strain = PKRS_Strain'                  PKRS_Days = PKRS_Days'                  OT_Gender = OT_Gender'                  MetDate = DateTime.Now'                  Met_Level = CurrentLevel'                  Met_Location = Locations.Transfer3' // Pal Park                    RibbonChampionG3Hoenn = RibbonChampionG3Hoenn'                  RibbonWinning = RibbonWinning'                  RibbonVictory = RibbonVictory'                  RibbonArtist = RibbonArtist'                  RibbonEffort = RibbonEffort'                  RibbonChampionBattle = RibbonChampionBattle'                  RibbonChampionRegional = RibbonChampionRegional'                  RibbonChampionNational = RibbonChampionNational'                  RibbonCountry = RibbonCountry'                  RibbonNational = RibbonNational'                  RibbonEarth = RibbonEarth'                  RibbonWorld = RibbonWorld'                    // byte -> bool contest ribbons                  RibbonG3Cool         = RibbonCountG3Cool > 0'                  RibbonG3CoolSuper    = RibbonCountG3Cool > 1'                  RibbonG3CoolHyper    = RibbonCountG3Cool > 2'                  RibbonG3CoolMaster   = RibbonCountG3Cool > 3'                    RibbonG3Beauty       = RibbonCountG3Beauty > 0'                  RibbonG3BeautySuper  = RibbonCountG3Beauty > 1'                  RibbonG3BeautyHyper  = RibbonCountG3Beauty > 2'                  RibbonG3BeautyMaster = RibbonCountG3Beauty > 3'                    RibbonG3Cute         = RibbonCountG3Cute > 0'                  RibbonG3CuteSuper    = RibbonCountG3Cute > 1'                  RibbonG3CuteHyper    = RibbonCountG3Cute > 2'                  RibbonG3CuteMaster   = RibbonCountG3Cute > 3'                    RibbonG3Smart        = RibbonCountG3Smart > 0'                  RibbonG3SmartSuper   = RibbonCountG3Smart > 1'                  RibbonG3SmartHyper   = RibbonCountG3Smart > 2'                  RibbonG3SmartMaster  = RibbonCountG3Smart > 3'                    RibbonG3Tough        = RibbonCountG3Tough > 0'                  RibbonG3ToughSuper   = RibbonCountG3Tough > 1'                  RibbonG3ToughHyper   = RibbonCountG3Tough > 2'                  RibbonG3ToughMaster  = RibbonCountG3Tough > 3'                    FatefulEncounter = FatefulEncounter'              };
Magic Number,PKHeX.Core,PK3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PK3.cs,ConvertToPK4,The following statement contains a magic number: PK4 pk4 = new PK4 // Convert away!              {                  PID = PID'                  Species = Species'                  TID = TID'                  SID = SID'                  EXP = IsEgg ? Experience.GetEXP(5' PersonalInfo.EXPGrowth) : EXP'                  Gender = PKX.GetGenderFromPID(Species' PID)'                  AltForm = AltForm'                  // IsEgg = false' -- already false                  OT_Friendship = 70'                  Markings = Markings'                  Language = Language'                  EV_HP = EV_HP'                  EV_ATK = EV_ATK'                  EV_DEF = EV_DEF'                  EV_SPA = EV_SPA'                  EV_SPD = EV_SPD'                  EV_SPE = EV_SPE'                  CNT_Cool = CNT_Cool'                  CNT_Beauty = CNT_Beauty'                  CNT_Cute = CNT_Cute'                  CNT_Smart = CNT_Smart'                  CNT_Tough = CNT_Tough'                  CNT_Sheen = CNT_Sheen'                  Move1 = Move1'                  Move2 = Move2'                  Move3 = Move3'                  Move4 = Move4'                  Move1_PPUps = Move1_PPUps'                  Move2_PPUps = Move2_PPUps'                  Move3_PPUps = Move3_PPUps'                  Move4_PPUps = Move4_PPUps'                  IV_HP = IV_HP'                  IV_ATK = IV_ATK'                  IV_DEF = IV_DEF'                  IV_SPA = IV_SPA'                  IV_SPD = IV_SPD'                  IV_SPE = IV_SPE'                  Ability = Ability'                  Version = Version'                  Ball = Ball'                  PKRS_Strain = PKRS_Strain'                  PKRS_Days = PKRS_Days'                  OT_Gender = OT_Gender'                  MetDate = DateTime.Now'                  Met_Level = CurrentLevel'                  Met_Location = Locations.Transfer3' // Pal Park                    RibbonChampionG3Hoenn = RibbonChampionG3Hoenn'                  RibbonWinning = RibbonWinning'                  RibbonVictory = RibbonVictory'                  RibbonArtist = RibbonArtist'                  RibbonEffort = RibbonEffort'                  RibbonChampionBattle = RibbonChampionBattle'                  RibbonChampionRegional = RibbonChampionRegional'                  RibbonChampionNational = RibbonChampionNational'                  RibbonCountry = RibbonCountry'                  RibbonNational = RibbonNational'                  RibbonEarth = RibbonEarth'                  RibbonWorld = RibbonWorld'                    // byte -> bool contest ribbons                  RibbonG3Cool         = RibbonCountG3Cool > 0'                  RibbonG3CoolSuper    = RibbonCountG3Cool > 1'                  RibbonG3CoolHyper    = RibbonCountG3Cool > 2'                  RibbonG3CoolMaster   = RibbonCountG3Cool > 3'                    RibbonG3Beauty       = RibbonCountG3Beauty > 0'                  RibbonG3BeautySuper  = RibbonCountG3Beauty > 1'                  RibbonG3BeautyHyper  = RibbonCountG3Beauty > 2'                  RibbonG3BeautyMaster = RibbonCountG3Beauty > 3'                    RibbonG3Cute         = RibbonCountG3Cute > 0'                  RibbonG3CuteSuper    = RibbonCountG3Cute > 1'                  RibbonG3CuteHyper    = RibbonCountG3Cute > 2'                  RibbonG3CuteMaster   = RibbonCountG3Cute > 3'                    RibbonG3Smart        = RibbonCountG3Smart > 0'                  RibbonG3SmartSuper   = RibbonCountG3Smart > 1'                  RibbonG3SmartHyper   = RibbonCountG3Smart > 2'                  RibbonG3SmartMaster  = RibbonCountG3Smart > 3'                    RibbonG3Tough        = RibbonCountG3Tough > 0'                  RibbonG3ToughSuper   = RibbonCountG3Tough > 1'                  RibbonG3ToughHyper   = RibbonCountG3Tough > 2'                  RibbonG3ToughMaster  = RibbonCountG3Tough > 3'                    FatefulEncounter = FatefulEncounter'              };
Magic Number,PKHeX.Core,PK3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PK3.cs,ConvertToPK4,The following statement contains a magic number: PK4 pk4 = new PK4 // Convert away!              {                  PID = PID'                  Species = Species'                  TID = TID'                  SID = SID'                  EXP = IsEgg ? Experience.GetEXP(5' PersonalInfo.EXPGrowth) : EXP'                  Gender = PKX.GetGenderFromPID(Species' PID)'                  AltForm = AltForm'                  // IsEgg = false' -- already false                  OT_Friendship = 70'                  Markings = Markings'                  Language = Language'                  EV_HP = EV_HP'                  EV_ATK = EV_ATK'                  EV_DEF = EV_DEF'                  EV_SPA = EV_SPA'                  EV_SPD = EV_SPD'                  EV_SPE = EV_SPE'                  CNT_Cool = CNT_Cool'                  CNT_Beauty = CNT_Beauty'                  CNT_Cute = CNT_Cute'                  CNT_Smart = CNT_Smart'                  CNT_Tough = CNT_Tough'                  CNT_Sheen = CNT_Sheen'                  Move1 = Move1'                  Move2 = Move2'                  Move3 = Move3'                  Move4 = Move4'                  Move1_PPUps = Move1_PPUps'                  Move2_PPUps = Move2_PPUps'                  Move3_PPUps = Move3_PPUps'                  Move4_PPUps = Move4_PPUps'                  IV_HP = IV_HP'                  IV_ATK = IV_ATK'                  IV_DEF = IV_DEF'                  IV_SPA = IV_SPA'                  IV_SPD = IV_SPD'                  IV_SPE = IV_SPE'                  Ability = Ability'                  Version = Version'                  Ball = Ball'                  PKRS_Strain = PKRS_Strain'                  PKRS_Days = PKRS_Days'                  OT_Gender = OT_Gender'                  MetDate = DateTime.Now'                  Met_Level = CurrentLevel'                  Met_Location = Locations.Transfer3' // Pal Park                    RibbonChampionG3Hoenn = RibbonChampionG3Hoenn'                  RibbonWinning = RibbonWinning'                  RibbonVictory = RibbonVictory'                  RibbonArtist = RibbonArtist'                  RibbonEffort = RibbonEffort'                  RibbonChampionBattle = RibbonChampionBattle'                  RibbonChampionRegional = RibbonChampionRegional'                  RibbonChampionNational = RibbonChampionNational'                  RibbonCountry = RibbonCountry'                  RibbonNational = RibbonNational'                  RibbonEarth = RibbonEarth'                  RibbonWorld = RibbonWorld'                    // byte -> bool contest ribbons                  RibbonG3Cool         = RibbonCountG3Cool > 0'                  RibbonG3CoolSuper    = RibbonCountG3Cool > 1'                  RibbonG3CoolHyper    = RibbonCountG3Cool > 2'                  RibbonG3CoolMaster   = RibbonCountG3Cool > 3'                    RibbonG3Beauty       = RibbonCountG3Beauty > 0'                  RibbonG3BeautySuper  = RibbonCountG3Beauty > 1'                  RibbonG3BeautyHyper  = RibbonCountG3Beauty > 2'                  RibbonG3BeautyMaster = RibbonCountG3Beauty > 3'                    RibbonG3Cute         = RibbonCountG3Cute > 0'                  RibbonG3CuteSuper    = RibbonCountG3Cute > 1'                  RibbonG3CuteHyper    = RibbonCountG3Cute > 2'                  RibbonG3CuteMaster   = RibbonCountG3Cute > 3'                    RibbonG3Smart        = RibbonCountG3Smart > 0'                  RibbonG3SmartSuper   = RibbonCountG3Smart > 1'                  RibbonG3SmartHyper   = RibbonCountG3Smart > 2'                  RibbonG3SmartMaster  = RibbonCountG3Smart > 3'                    RibbonG3Tough        = RibbonCountG3Tough > 0'                  RibbonG3ToughSuper   = RibbonCountG3Tough > 1'                  RibbonG3ToughHyper   = RibbonCountG3Tough > 2'                  RibbonG3ToughMaster  = RibbonCountG3Tough > 3'                    FatefulEncounter = FatefulEncounter'              };
Magic Number,PKHeX.Core,PK3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PK3.cs,ConvertToPK4,The following statement contains a magic number: PK4 pk4 = new PK4 // Convert away!              {                  PID = PID'                  Species = Species'                  TID = TID'                  SID = SID'                  EXP = IsEgg ? Experience.GetEXP(5' PersonalInfo.EXPGrowth) : EXP'                  Gender = PKX.GetGenderFromPID(Species' PID)'                  AltForm = AltForm'                  // IsEgg = false' -- already false                  OT_Friendship = 70'                  Markings = Markings'                  Language = Language'                  EV_HP = EV_HP'                  EV_ATK = EV_ATK'                  EV_DEF = EV_DEF'                  EV_SPA = EV_SPA'                  EV_SPD = EV_SPD'                  EV_SPE = EV_SPE'                  CNT_Cool = CNT_Cool'                  CNT_Beauty = CNT_Beauty'                  CNT_Cute = CNT_Cute'                  CNT_Smart = CNT_Smart'                  CNT_Tough = CNT_Tough'                  CNT_Sheen = CNT_Sheen'                  Move1 = Move1'                  Move2 = Move2'                  Move3 = Move3'                  Move4 = Move4'                  Move1_PPUps = Move1_PPUps'                  Move2_PPUps = Move2_PPUps'                  Move3_PPUps = Move3_PPUps'                  Move4_PPUps = Move4_PPUps'                  IV_HP = IV_HP'                  IV_ATK = IV_ATK'                  IV_DEF = IV_DEF'                  IV_SPA = IV_SPA'                  IV_SPD = IV_SPD'                  IV_SPE = IV_SPE'                  Ability = Ability'                  Version = Version'                  Ball = Ball'                  PKRS_Strain = PKRS_Strain'                  PKRS_Days = PKRS_Days'                  OT_Gender = OT_Gender'                  MetDate = DateTime.Now'                  Met_Level = CurrentLevel'                  Met_Location = Locations.Transfer3' // Pal Park                    RibbonChampionG3Hoenn = RibbonChampionG3Hoenn'                  RibbonWinning = RibbonWinning'                  RibbonVictory = RibbonVictory'                  RibbonArtist = RibbonArtist'                  RibbonEffort = RibbonEffort'                  RibbonChampionBattle = RibbonChampionBattle'                  RibbonChampionRegional = RibbonChampionRegional'                  RibbonChampionNational = RibbonChampionNational'                  RibbonCountry = RibbonCountry'                  RibbonNational = RibbonNational'                  RibbonEarth = RibbonEarth'                  RibbonWorld = RibbonWorld'                    // byte -> bool contest ribbons                  RibbonG3Cool         = RibbonCountG3Cool > 0'                  RibbonG3CoolSuper    = RibbonCountG3Cool > 1'                  RibbonG3CoolHyper    = RibbonCountG3Cool > 2'                  RibbonG3CoolMaster   = RibbonCountG3Cool > 3'                    RibbonG3Beauty       = RibbonCountG3Beauty > 0'                  RibbonG3BeautySuper  = RibbonCountG3Beauty > 1'                  RibbonG3BeautyHyper  = RibbonCountG3Beauty > 2'                  RibbonG3BeautyMaster = RibbonCountG3Beauty > 3'                    RibbonG3Cute         = RibbonCountG3Cute > 0'                  RibbonG3CuteSuper    = RibbonCountG3Cute > 1'                  RibbonG3CuteHyper    = RibbonCountG3Cute > 2'                  RibbonG3CuteMaster   = RibbonCountG3Cute > 3'                    RibbonG3Smart        = RibbonCountG3Smart > 0'                  RibbonG3SmartSuper   = RibbonCountG3Smart > 1'                  RibbonG3SmartHyper   = RibbonCountG3Smart > 2'                  RibbonG3SmartMaster  = RibbonCountG3Smart > 3'                    RibbonG3Tough        = RibbonCountG3Tough > 0'                  RibbonG3ToughSuper   = RibbonCountG3Tough > 1'                  RibbonG3ToughHyper   = RibbonCountG3Tough > 2'                  RibbonG3ToughMaster  = RibbonCountG3Tough > 3'                    FatefulEncounter = FatefulEncounter'              };
Magic Number,PKHeX.Core,PK3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PK3.cs,ConvertToPK4,The following statement contains a magic number: PK4 pk4 = new PK4 // Convert away!              {                  PID = PID'                  Species = Species'                  TID = TID'                  SID = SID'                  EXP = IsEgg ? Experience.GetEXP(5' PersonalInfo.EXPGrowth) : EXP'                  Gender = PKX.GetGenderFromPID(Species' PID)'                  AltForm = AltForm'                  // IsEgg = false' -- already false                  OT_Friendship = 70'                  Markings = Markings'                  Language = Language'                  EV_HP = EV_HP'                  EV_ATK = EV_ATK'                  EV_DEF = EV_DEF'                  EV_SPA = EV_SPA'                  EV_SPD = EV_SPD'                  EV_SPE = EV_SPE'                  CNT_Cool = CNT_Cool'                  CNT_Beauty = CNT_Beauty'                  CNT_Cute = CNT_Cute'                  CNT_Smart = CNT_Smart'                  CNT_Tough = CNT_Tough'                  CNT_Sheen = CNT_Sheen'                  Move1 = Move1'                  Move2 = Move2'                  Move3 = Move3'                  Move4 = Move4'                  Move1_PPUps = Move1_PPUps'                  Move2_PPUps = Move2_PPUps'                  Move3_PPUps = Move3_PPUps'                  Move4_PPUps = Move4_PPUps'                  IV_HP = IV_HP'                  IV_ATK = IV_ATK'                  IV_DEF = IV_DEF'                  IV_SPA = IV_SPA'                  IV_SPD = IV_SPD'                  IV_SPE = IV_SPE'                  Ability = Ability'                  Version = Version'                  Ball = Ball'                  PKRS_Strain = PKRS_Strain'                  PKRS_Days = PKRS_Days'                  OT_Gender = OT_Gender'                  MetDate = DateTime.Now'                  Met_Level = CurrentLevel'                  Met_Location = Locations.Transfer3' // Pal Park                    RibbonChampionG3Hoenn = RibbonChampionG3Hoenn'                  RibbonWinning = RibbonWinning'                  RibbonVictory = RibbonVictory'                  RibbonArtist = RibbonArtist'                  RibbonEffort = RibbonEffort'                  RibbonChampionBattle = RibbonChampionBattle'                  RibbonChampionRegional = RibbonChampionRegional'                  RibbonChampionNational = RibbonChampionNational'                  RibbonCountry = RibbonCountry'                  RibbonNational = RibbonNational'                  RibbonEarth = RibbonEarth'                  RibbonWorld = RibbonWorld'                    // byte -> bool contest ribbons                  RibbonG3Cool         = RibbonCountG3Cool > 0'                  RibbonG3CoolSuper    = RibbonCountG3Cool > 1'                  RibbonG3CoolHyper    = RibbonCountG3Cool > 2'                  RibbonG3CoolMaster   = RibbonCountG3Cool > 3'                    RibbonG3Beauty       = RibbonCountG3Beauty > 0'                  RibbonG3BeautySuper  = RibbonCountG3Beauty > 1'                  RibbonG3BeautyHyper  = RibbonCountG3Beauty > 2'                  RibbonG3BeautyMaster = RibbonCountG3Beauty > 3'                    RibbonG3Cute         = RibbonCountG3Cute > 0'                  RibbonG3CuteSuper    = RibbonCountG3Cute > 1'                  RibbonG3CuteHyper    = RibbonCountG3Cute > 2'                  RibbonG3CuteMaster   = RibbonCountG3Cute > 3'                    RibbonG3Smart        = RibbonCountG3Smart > 0'                  RibbonG3SmartSuper   = RibbonCountG3Smart > 1'                  RibbonG3SmartHyper   = RibbonCountG3Smart > 2'                  RibbonG3SmartMaster  = RibbonCountG3Smart > 3'                    RibbonG3Tough        = RibbonCountG3Tough > 0'                  RibbonG3ToughSuper   = RibbonCountG3Tough > 1'                  RibbonG3ToughHyper   = RibbonCountG3Tough > 2'                  RibbonG3ToughMaster  = RibbonCountG3Tough > 3'                    FatefulEncounter = FatefulEncounter'              };
Magic Number,PKHeX.Core,PK3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PK3.cs,ConvertToPK4,The following statement contains a magic number: trash[pk4.Language].CopyTo(pk4.Data' 0x48 + 4);
Magic Number,PKHeX.Core,PK3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PK3.cs,ConvertToPK4,The following statement contains a magic number: pk4.Nickname = IsEgg ? SpeciesName.GetSpeciesNameGeneration(pk4.Species' pk4.Language' 4) : Nickname;
Magic Number,PKHeX.Core,PK3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PK3.cs,ConvertToPK4,The following statement contains a magic number: i < 4
Magic Number,PKHeX.Core,PK4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PK4.cs,ConvertToBK4,The following statement contains a magic number: AltForm != 0 && !PersonalTable.DP[Species].HasFormes && Species != 201
Magic Number,PKHeX.Core,PK4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PK4.cs,ConvertToPK5,The following statement contains a magic number: PK5 pk5 = new PK5(Data) // Convert away!              {                  OT_Friendship = 70'                  // Apply new met date                  MetDate = moment              };
Magic Number,PKHeX.Core,PK4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PK4.cs,ConvertToPK5,The following statement contains a magic number: pk5.Species == 493
Magic Number,PKHeX.Core,PK5,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PK5.cs,ConvertToPK6,The following statement contains a magic number: abilval = 2;
Magic Number,PKHeX.Core,PK5,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PK5.cs,ConvertToPK6,The following statement contains a magic number: abilval >= 0 && abilities[abilval] == abilities[2] && HiddenAbility
Magic Number,PKHeX.Core,PK5,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PK5.cs,ConvertToPK6,The following statement contains a magic number: pk6.EV_HP = EV_HP > 252 ? 252 : EV_HP;
Magic Number,PKHeX.Core,PK5,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PK5.cs,ConvertToPK6,The following statement contains a magic number: pk6.EV_HP = EV_HP > 252 ? 252 : EV_HP;
Magic Number,PKHeX.Core,PK5,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PK5.cs,ConvertToPK6,The following statement contains a magic number: pk6.EV_ATK = EV_ATK > 252 ? 252 : EV_ATK;
Magic Number,PKHeX.Core,PK5,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PK5.cs,ConvertToPK6,The following statement contains a magic number: pk6.EV_ATK = EV_ATK > 252 ? 252 : EV_ATK;
Magic Number,PKHeX.Core,PK5,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PK5.cs,ConvertToPK6,The following statement contains a magic number: pk6.EV_DEF = EV_DEF > 252 ? 252 : EV_DEF;
Magic Number,PKHeX.Core,PK5,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PK5.cs,ConvertToPK6,The following statement contains a magic number: pk6.EV_DEF = EV_DEF > 252 ? 252 : EV_DEF;
Magic Number,PKHeX.Core,PK5,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PK5.cs,ConvertToPK6,The following statement contains a magic number: pk6.EV_SPA = EV_SPA > 252 ? 252 : EV_SPA;
Magic Number,PKHeX.Core,PK5,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PK5.cs,ConvertToPK6,The following statement contains a magic number: pk6.EV_SPA = EV_SPA > 252 ? 252 : EV_SPA;
Magic Number,PKHeX.Core,PK5,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PK5.cs,ConvertToPK6,The following statement contains a magic number: pk6.EV_SPD = EV_SPD > 252 ? 252 : EV_SPD;
Magic Number,PKHeX.Core,PK5,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PK5.cs,ConvertToPK6,The following statement contains a magic number: pk6.EV_SPD = EV_SPD > 252 ? 252 : EV_SPD;
Magic Number,PKHeX.Core,PK5,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PK5.cs,ConvertToPK6,The following statement contains a magic number: pk6.EV_SPE = EV_SPE > 252 ? 252 : EV_SPE;
Magic Number,PKHeX.Core,PK5,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PK5.cs,ConvertToPK6,The following statement contains a magic number: pk6.EV_SPE = EV_SPE > 252 ? 252 : EV_SPE;
Magic Number,PKHeX.Core,PK5,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PK5.cs,ConvertToPK6,The following statement contains a magic number: i < 8
Magic Number,PKHeX.Core,PK5,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PK5.cs,ConvertToPK6,The following statement contains a magic number: i < 4
Magic Number,PKHeX.Core,PK5,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PK5.cs,ConvertToPK6,The following statement contains a magic number: i < 7
Magic Number,PKHeX.Core,PK5,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PK5.cs,ConvertToPK6,The following statement contains a magic number: pk6.HT_Memory = 4;
Magic Number,PKHeX.Core,PK6,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PK6.cs,SuperTrainingMedalCount,The following statement contains a magic number: value >>= 2;
Magic Number,PKHeX.Core,PK6,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PK6.cs,FixMemories,The following statement contains a magic number: HT_Name = string.Empty.PadRight(11' '\0');
Magic Number,PKHeX.Core,PK6,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PK6.cs,ConvertToPK7,The following statement contains a magic number: switch (AbilityNumber)              {                  case 1:                  case 2:                  case 4: // Valid Ability Numbers                      int index = AbilityNumber >> 1;                      if (PersonalInfo.Abilities[index] == Ability) // correct pair                          pk7.Ability = pk7.PersonalInfo.Abilities[index];                      break;              }
Magic Number,PKHeX.Core,PK6,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PK6.cs,ConvertToPK7,The following statement contains a magic number: switch (AbilityNumber)              {                  case 1:                  case 2:                  case 4: // Valid Ability Numbers                      int index = AbilityNumber >> 1;                      if (PersonalInfo.Abilities[index] == Ability) // correct pair                          pk7.Ability = pk7.PersonalInfo.Abilities[index];                      break;              }
Magic Number,PKHeX.Core,PK7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PK7.cs,SuperTrainingMedalCount,The following statement contains a magic number: value >>= 2;
Magic Number,PKHeX.Core,PK7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PK7.cs,FixMemories,The following statement contains a magic number: HT_Name = string.Empty.PadRight(11' '\0');
Magic Number,PKHeX.Core,PK7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PK7.cs,FixMemories,The following statement contains a magic number: GenNumber < 6
Magic Number,PKHeX.Core,PK7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PK7.cs,FixMemories,The following statement contains a magic number: GenNumber < 7
Magic Number,PKHeX.Core,PK8,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PK8.cs,GetFromArrayA1,The following statement contains a magic number: (uint)index >= 4
Magic Number,PKHeX.Core,PK8,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PK8.cs,SetFromArrayA1,The following statement contains a magic number: (uint)index >= 4
Magic Number,PKHeX.Core,PK8,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PK8.cs,GetFromArrayA2,The following statement contains a magic number: (uint)index >= 6
Magic Number,PKHeX.Core,PK8,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PK8.cs,SetFromArrayA2,The following statement contains a magic number: (uint)index >= 6
Magic Number,PKHeX.Core,PK8,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PK8.cs,GetFromArrayB1,The following statement contains a magic number: (uint)index >= 3
Magic Number,PKHeX.Core,PK8,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PK8.cs,SetFromArrayB1,The following statement contains a magic number: (uint)index >= 3
Magic Number,PKHeX.Core,PK8,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PK8.cs,GetFromArrayB2,The following statement contains a magic number: (uint)index >= 14
Magic Number,PKHeX.Core,PK8,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PK8.cs,SetFromArrayB2,The following statement contains a magic number: (uint)index >= 14
Magic Number,PKHeX.Core,PK8,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PK8.cs,GetFromArrayC1,The following statement contains a magic number: (uint)index >= 14
Magic Number,PKHeX.Core,PK8,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PK8.cs,SetFromArrayC1,The following statement contains a magic number: (uint)index >= 14
Magic Number,PKHeX.Core,PK8,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PK8.cs,GetFromArrayC2,The following statement contains a magic number: (uint)index >= 15
Magic Number,PKHeX.Core,PK8,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PK8.cs,SetFromArrayC2,The following statement contains a magic number: (uint)index >= 15
Magic Number,PKHeX.Core,PK8,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PK8.cs,GetMoveRecordFlag,The following statement contains a magic number: (uint) index > 112
Magic Number,PKHeX.Core,PK8,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PK8.cs,GetMoveRecordFlag,The following statement contains a magic number: int ofs = index >> 3;
Magic Number,PKHeX.Core,PK8,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PK8.cs,GetMoveRecordFlag,The following statement contains a magic number: return FlagUtil.GetFlag(Data' 0x127 + ofs' index & 7);
Magic Number,PKHeX.Core,PK8,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PK8.cs,SetMoveRecordFlag,The following statement contains a magic number: (uint)index > 112
Magic Number,PKHeX.Core,PK8,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PK8.cs,SetMoveRecordFlag,The following statement contains a magic number: int ofs = index >> 3;
Magic Number,PKHeX.Core,PK8,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PK8.cs,SetMoveRecordFlag,The following statement contains a magic number: FlagUtil.SetFlag(Data' 0x127 + ofs' index & 7' value);
Magic Number,PKHeX.Core,PK8,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PK8.cs,GetFromArrayD1,The following statement contains a magic number: (uint)index >= 19
Magic Number,PKHeX.Core,PK8,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PK8.cs,SetFromArrayD1,The following statement contains a magic number: (uint)index >= 19
Magic Number,PKHeX.Core,PK8,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PK8.cs,FixMemories,The following statement contains a magic number: HT_Name = string.Empty.PadRight(11' '\0');
Magic Number,PKHeX.Core,PK8,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PK8.cs,FixMemories,The following statement contains a magic number: GenNumber < 6
Magic Number,PKHeX.Core,PK8,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PK8.cs,FixMemories,The following statement contains a magic number: GenNumber < 8
Magic Number,PKHeX.Core,PK8,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PK8.cs,GetRibbonByte,The following statement contains a magic number: (uint)index >= 128
Magic Number,PKHeX.Core,PK8,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PK8.cs,GetRibbonByte,The following statement contains a magic number: return 0x34 + (index >> 3);
Magic Number,PKHeX.Core,PK8,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PK8.cs,GetRibbonByte,The following statement contains a magic number: index < 64
Magic Number,PKHeX.Core,PK8,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PK8.cs,GetRibbonByte,The following statement contains a magic number: index -= 64;
Magic Number,PKHeX.Core,PK8,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PK8.cs,GetRibbonByte,The following statement contains a magic number: return 0x40 + (index >> 3);
Magic Number,PKHeX.Core,PKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PKM.cs,CalculateChecksum,The following statement contains a magic number: switch (Format)              {                  case 3:                      for (int i = 32; i < SIZE_STORED; i += 2)                          chk += BitConverter.ToUInt16(Data' i);                      return chk;                  default: // 4+                      for (int i = 8; i < SIZE_STORED; i += 2)                          chk += BitConverter.ToUInt16(Data' i);                      return chk;              }
Magic Number,PKHeX.Core,PKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PKM.cs,CalculateChecksum,The following statement contains a magic number: switch (Format)              {                  case 3:                      for (int i = 32; i < SIZE_STORED; i += 2)                          chk += BitConverter.ToUInt16(Data' i);                      return chk;                  default: // 4+                      for (int i = 8; i < SIZE_STORED; i += 2)                          chk += BitConverter.ToUInt16(Data' i);                      return chk;              }
Magic Number,PKHeX.Core,PKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PKM.cs,CalculateChecksum,The following statement contains a magic number: switch (Format)              {                  case 3:                      for (int i = 32; i < SIZE_STORED; i += 2)                          chk += BitConverter.ToUInt16(Data' i);                      return chk;                  default: // 4+                      for (int i = 8; i < SIZE_STORED; i += 2)                          chk += BitConverter.ToUInt16(Data' i);                      return chk;              }
Magic Number,PKHeX.Core,PKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PKM.cs,CalculateChecksum,The following statement contains a magic number: switch (Format)              {                  case 3:                      for (int i = 32; i < SIZE_STORED; i += 2)                          chk += BitConverter.ToUInt16(Data' i);                      return chk;                  default: // 4+                      for (int i = 8; i < SIZE_STORED; i += 2)                          chk += BitConverter.ToUInt16(Data' i);                      return chk;              }
Magic Number,PKHeX.Core,PKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PKM.cs,CalculateChecksum,The following statement contains a magic number: switch (Format)              {                  case 3:                      for (int i = 32; i < SIZE_STORED; i += 2)                          chk += BitConverter.ToUInt16(Data' i);                      return chk;                  default: // 4+                      for (int i = 8; i < SIZE_STORED; i += 2)                          chk += BitConverter.ToUInt16(Data' i);                      return chk;              }
Magic Number,PKHeX.Core,PKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PKM.cs,SetID7,The following statement contains a magic number: SID = oid >> 16;
Magic Number,PKHeX.Core,PKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PKM.cs,SetRelearnMoves,The following statement contains a magic number: RelearnMove3 = value.Count > 2 ? value[2] : 0;
Magic Number,PKHeX.Core,PKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PKM.cs,SetRelearnMoves,The following statement contains a magic number: RelearnMove3 = value.Count > 2 ? value[2] : 0;
Magic Number,PKHeX.Core,PKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PKM.cs,SetRelearnMoves,The following statement contains a magic number: RelearnMove4 = value.Count > 3 ? value[3] : 0;
Magic Number,PKHeX.Core,PKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PKM.cs,SetRelearnMoves,The following statement contains a magic number: RelearnMove4 = value.Count > 3 ? value[3] : 0;
Magic Number,PKHeX.Core,PKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PKM.cs,InhabitedGeneration,The following statement contains a magic number: Format == 2 && Generation == 1 && !Gen2_NotTradeback
Magic Number,PKHeX.Core,PKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PKM.cs,InhabitedGeneration,The following statement contains a magic number: Format == 1 && Generation == 2 && !Gen1_NotTradeback
Magic Number,PKHeX.Core,PKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PKM.cs,InhabitedGeneration,The following statement contains a magic number: return Generation switch              {                  1 => (Format == 1 || VC)' // species compat checked via sanity above                  2 => (Format == 2 || VC)'                  3 => Gen3'                  4 => (3 <= gen && gen <= 4)'                  5 => (3 <= gen && gen <= 5)'                  6 => (3 <= gen && gen <= 6)'                  7 => ((3 <= gen && gen <= 7) || VC)'                  8 => ((3 <= gen && gen <= 8) || VC)'                  _ => false              };
Magic Number,PKHeX.Core,PKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PKM.cs,InhabitedGeneration,The following statement contains a magic number: return Generation switch              {                  1 => (Format == 1 || VC)' // species compat checked via sanity above                  2 => (Format == 2 || VC)'                  3 => Gen3'                  4 => (3 <= gen && gen <= 4)'                  5 => (3 <= gen && gen <= 5)'                  6 => (3 <= gen && gen <= 6)'                  7 => ((3 <= gen && gen <= 7) || VC)'                  8 => ((3 <= gen && gen <= 8) || VC)'                  _ => false              };
Magic Number,PKHeX.Core,PKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PKM.cs,InhabitedGeneration,The following statement contains a magic number: return Generation switch              {                  1 => (Format == 1 || VC)' // species compat checked via sanity above                  2 => (Format == 2 || VC)'                  3 => Gen3'                  4 => (3 <= gen && gen <= 4)'                  5 => (3 <= gen && gen <= 5)'                  6 => (3 <= gen && gen <= 6)'                  7 => ((3 <= gen && gen <= 7) || VC)'                  8 => ((3 <= gen && gen <= 8) || VC)'                  _ => false              };
Magic Number,PKHeX.Core,PKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PKM.cs,InhabitedGeneration,The following statement contains a magic number: return Generation switch              {                  1 => (Format == 1 || VC)' // species compat checked via sanity above                  2 => (Format == 2 || VC)'                  3 => Gen3'                  4 => (3 <= gen && gen <= 4)'                  5 => (3 <= gen && gen <= 5)'                  6 => (3 <= gen && gen <= 6)'                  7 => ((3 <= gen && gen <= 7) || VC)'                  8 => ((3 <= gen && gen <= 8) || VC)'                  _ => false              };
Magic Number,PKHeX.Core,PKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PKM.cs,InhabitedGeneration,The following statement contains a magic number: return Generation switch              {                  1 => (Format == 1 || VC)' // species compat checked via sanity above                  2 => (Format == 2 || VC)'                  3 => Gen3'                  4 => (3 <= gen && gen <= 4)'                  5 => (3 <= gen && gen <= 5)'                  6 => (3 <= gen && gen <= 6)'                  7 => ((3 <= gen && gen <= 7) || VC)'                  8 => ((3 <= gen && gen <= 8) || VC)'                  _ => false              };
Magic Number,PKHeX.Core,PKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PKM.cs,InhabitedGeneration,The following statement contains a magic number: return Generation switch              {                  1 => (Format == 1 || VC)' // species compat checked via sanity above                  2 => (Format == 2 || VC)'                  3 => Gen3'                  4 => (3 <= gen && gen <= 4)'                  5 => (3 <= gen && gen <= 5)'                  6 => (3 <= gen && gen <= 6)'                  7 => ((3 <= gen && gen <= 7) || VC)'                  8 => ((3 <= gen && gen <= 8) || VC)'                  _ => false              };
Magic Number,PKHeX.Core,PKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PKM.cs,InhabitedGeneration,The following statement contains a magic number: return Generation switch              {                  1 => (Format == 1 || VC)' // species compat checked via sanity above                  2 => (Format == 2 || VC)'                  3 => Gen3'                  4 => (3 <= gen && gen <= 4)'                  5 => (3 <= gen && gen <= 5)'                  6 => (3 <= gen && gen <= 6)'                  7 => ((3 <= gen && gen <= 7) || VC)'                  8 => ((3 <= gen && gen <= 8) || VC)'                  _ => false              };
Magic Number,PKHeX.Core,PKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PKM.cs,InhabitedGeneration,The following statement contains a magic number: return Generation switch              {                  1 => (Format == 1 || VC)' // species compat checked via sanity above                  2 => (Format == 2 || VC)'                  3 => Gen3'                  4 => (3 <= gen && gen <= 4)'                  5 => (3 <= gen && gen <= 5)'                  6 => (3 <= gen && gen <= 6)'                  7 => ((3 <= gen && gen <= 7) || VC)'                  8 => ((3 <= gen && gen <= 8) || VC)'                  _ => false              };
Magic Number,PKHeX.Core,PKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PKM.cs,InhabitedGeneration,The following statement contains a magic number: return Generation switch              {                  1 => (Format == 1 || VC)' // species compat checked via sanity above                  2 => (Format == 2 || VC)'                  3 => Gen3'                  4 => (3 <= gen && gen <= 4)'                  5 => (3 <= gen && gen <= 5)'                  6 => (3 <= gen && gen <= 6)'                  7 => ((3 <= gen && gen <= 7) || VC)'                  8 => ((3 <= gen && gen <= 8) || VC)'                  _ => false              };
Magic Number,PKHeX.Core,PKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PKM.cs,InhabitedGeneration,The following statement contains a magic number: return Generation switch              {                  1 => (Format == 1 || VC)' // species compat checked via sanity above                  2 => (Format == 2 || VC)'                  3 => Gen3'                  4 => (3 <= gen && gen <= 4)'                  5 => (3 <= gen && gen <= 5)'                  6 => (3 <= gen && gen <= 6)'                  7 => ((3 <= gen && gen <= 7) || VC)'                  8 => ((3 <= gen && gen <= 8) || VC)'                  _ => false              };
Magic Number,PKHeX.Core,PKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PKM.cs,InhabitedGeneration,The following statement contains a magic number: return Generation switch              {                  1 => (Format == 1 || VC)' // species compat checked via sanity above                  2 => (Format == 2 || VC)'                  3 => Gen3'                  4 => (3 <= gen && gen <= 4)'                  5 => (3 <= gen && gen <= 5)'                  6 => (3 <= gen && gen <= 6)'                  7 => ((3 <= gen && gen <= 7) || VC)'                  8 => ((3 <= gen && gen <= 8) || VC)'                  _ => false              };
Magic Number,PKHeX.Core,PKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PKM.cs,InhabitedGeneration,The following statement contains a magic number: return Generation switch              {                  1 => (Format == 1 || VC)' // species compat checked via sanity above                  2 => (Format == 2 || VC)'                  3 => Gen3'                  4 => (3 <= gen && gen <= 4)'                  5 => (3 <= gen && gen <= 5)'                  6 => (3 <= gen && gen <= 6)'                  7 => ((3 <= gen && gen <= 7) || VC)'                  8 => ((3 <= gen && gen <= 8) || VC)'                  _ => false              };
Magic Number,PKHeX.Core,PKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PKM.cs,InhabitedGeneration,The following statement contains a magic number: return Generation switch              {                  1 => (Format == 1 || VC)' // species compat checked via sanity above                  2 => (Format == 2 || VC)'                  3 => Gen3'                  4 => (3 <= gen && gen <= 4)'                  5 => (3 <= gen && gen <= 5)'                  6 => (3 <= gen && gen <= 6)'                  7 => ((3 <= gen && gen <= 7) || VC)'                  8 => ((3 <= gen && gen <= 8) || VC)'                  _ => false              };
Magic Number,PKHeX.Core,PKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PKM.cs,InhabitedGeneration,The following statement contains a magic number: return Generation switch              {                  1 => (Format == 1 || VC)' // species compat checked via sanity above                  2 => (Format == 2 || VC)'                  3 => Gen3'                  4 => (3 <= gen && gen <= 4)'                  5 => (3 <= gen && gen <= 5)'                  6 => (3 <= gen && gen <= 6)'                  7 => ((3 <= gen && gen <= 7) || VC)'                  8 => ((3 <= gen && gen <= 8) || VC)'                  _ => false              };
Magic Number,PKHeX.Core,PKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PKM.cs,InhabitedGeneration,The following statement contains a magic number: return Generation switch              {                  1 => (Format == 1 || VC)' // species compat checked via sanity above                  2 => (Format == 2 || VC)'                  3 => Gen3'                  4 => (3 <= gen && gen <= 4)'                  5 => (3 <= gen && gen <= 5)'                  6 => (3 <= gen && gen <= 6)'                  7 => ((3 <= gen && gen <= 7) || VC)'                  8 => ((3 <= gen && gen <= 8) || VC)'                  _ => false              };
Magic Number,PKHeX.Core,PKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PKM.cs,InhabitedGeneration,The following statement contains a magic number: return Generation switch              {                  1 => (Format == 1 || VC)' // species compat checked via sanity above                  2 => (Format == 2 || VC)'                  3 => Gen3'                  4 => (3 <= gen && gen <= 4)'                  5 => (3 <= gen && gen <= 5)'                  6 => (3 <= gen && gen <= 6)'                  7 => ((3 <= gen && gen <= 7) || VC)'                  8 => ((3 <= gen && gen <= 8) || VC)'                  _ => false              };
Magic Number,PKHeX.Core,PKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PKM.cs,InhabitedGeneration,The following statement contains a magic number: return Generation switch              {                  1 => (Format == 1 || VC)' // species compat checked via sanity above                  2 => (Format == 2 || VC)'                  3 => Gen3'                  4 => (3 <= gen && gen <= 4)'                  5 => (3 <= gen && gen <= 5)'                  6 => (3 <= gen && gen <= 6)'                  7 => ((3 <= gen && gen <= 7) || VC)'                  8 => ((3 <= gen && gen <= 8) || VC)'                  _ => false              };
Magic Number,PKHeX.Core,PKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PKM.cs,InhabitedGeneration,The following statement contains a magic number: return Generation switch              {                  1 => (Format == 1 || VC)' // species compat checked via sanity above                  2 => (Format == 2 || VC)'                  3 => Gen3'                  4 => (3 <= gen && gen <= 4)'                  5 => (3 <= gen && gen <= 5)'                  6 => (3 <= gen && gen <= 6)'                  7 => ((3 <= gen && gen <= 7) || VC)'                  8 => ((3 <= gen && gen <= 8) || VC)'                  _ => false              };
Magic Number,PKHeX.Core,PKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PKM.cs,IsGenderValid,The following statement contains a magic number: return gender == 2;
Magic Number,PKHeX.Core,PKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PKM.cs,IsGenderValid,The following statement contains a magic number: gv == 255
Magic Number,PKHeX.Core,PKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PKM.cs,IsGenderValid,The following statement contains a magic number: gv == 254
Magic Number,PKHeX.Core,PKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PKM.cs,IsGenderValid,The following statement contains a magic number: gen <= 2 || gen >= 6
Magic Number,PKHeX.Core,PKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PKM.cs,IsGenderValid,The following statement contains a magic number: gen <= 2 || gen >= 6
Magic Number,PKHeX.Core,PKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PKM.cs,RefreshAbility,The following statement contains a magic number: pk5.HiddenAbility = n == 2;
Magic Number,PKHeX.Core,PKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PKM.cs,GetStats,The following statement contains a magic number: ushort[] stats = new ushort[6];
Magic Number,PKHeX.Core,PKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PKM.cs,GetStats,The following statement contains a magic number: stats[0] = (ushort)(p.HP == 1 ? 1 : (((t.HT_HP ? 31 : IV_HP) + (2 * p.HP) + (EV_HP / 4) + 100) * level / 100) + 10);
Magic Number,PKHeX.Core,PKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PKM.cs,GetStats,The following statement contains a magic number: stats[0] = (ushort)(p.HP == 1 ? 1 : (((t.HT_HP ? 31 : IV_HP) + (2 * p.HP) + (EV_HP / 4) + 100) * level / 100) + 10);
Magic Number,PKHeX.Core,PKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PKM.cs,GetStats,The following statement contains a magic number: stats[0] = (ushort)(p.HP == 1 ? 1 : (((t.HT_HP ? 31 : IV_HP) + (2 * p.HP) + (EV_HP / 4) + 100) * level / 100) + 10);
Magic Number,PKHeX.Core,PKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PKM.cs,GetStats,The following statement contains a magic number: stats[0] = (ushort)(p.HP == 1 ? 1 : (((t.HT_HP ? 31 : IV_HP) + (2 * p.HP) + (EV_HP / 4) + 100) * level / 100) + 10);
Magic Number,PKHeX.Core,PKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PKM.cs,GetStats,The following statement contains a magic number: stats[0] = (ushort)(p.HP == 1 ? 1 : (((t.HT_HP ? 31 : IV_HP) + (2 * p.HP) + (EV_HP / 4) + 100) * level / 100) + 10);
Magic Number,PKHeX.Core,PKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PKM.cs,GetStats,The following statement contains a magic number: stats[0] = (ushort)(p.HP == 1 ? 1 : (((t.HT_HP ? 31 : IV_HP) + (2 * p.HP) + (EV_HP / 4) + 100) * level / 100) + 10);
Magic Number,PKHeX.Core,PKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PKM.cs,GetStats,The following statement contains a magic number: stats[1] = (ushort)((((t.HT_ATK ? 31 : IV_ATK) + (2 * p.ATK) + (EV_ATK / 4)) * level / 100) + 5);
Magic Number,PKHeX.Core,PKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PKM.cs,GetStats,The following statement contains a magic number: stats[1] = (ushort)((((t.HT_ATK ? 31 : IV_ATK) + (2 * p.ATK) + (EV_ATK / 4)) * level / 100) + 5);
Magic Number,PKHeX.Core,PKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PKM.cs,GetStats,The following statement contains a magic number: stats[1] = (ushort)((((t.HT_ATK ? 31 : IV_ATK) + (2 * p.ATK) + (EV_ATK / 4)) * level / 100) + 5);
Magic Number,PKHeX.Core,PKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PKM.cs,GetStats,The following statement contains a magic number: stats[1] = (ushort)((((t.HT_ATK ? 31 : IV_ATK) + (2 * p.ATK) + (EV_ATK / 4)) * level / 100) + 5);
Magic Number,PKHeX.Core,PKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PKM.cs,GetStats,The following statement contains a magic number: stats[1] = (ushort)((((t.HT_ATK ? 31 : IV_ATK) + (2 * p.ATK) + (EV_ATK / 4)) * level / 100) + 5);
Magic Number,PKHeX.Core,PKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PKM.cs,GetStats,The following statement contains a magic number: stats[2] = (ushort)((((t.HT_DEF ? 31 : IV_DEF) + (2 * p.DEF) + (EV_DEF / 4)) * level / 100) + 5);
Magic Number,PKHeX.Core,PKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PKM.cs,GetStats,The following statement contains a magic number: stats[2] = (ushort)((((t.HT_DEF ? 31 : IV_DEF) + (2 * p.DEF) + (EV_DEF / 4)) * level / 100) + 5);
Magic Number,PKHeX.Core,PKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PKM.cs,GetStats,The following statement contains a magic number: stats[2] = (ushort)((((t.HT_DEF ? 31 : IV_DEF) + (2 * p.DEF) + (EV_DEF / 4)) * level / 100) + 5);
Magic Number,PKHeX.Core,PKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PKM.cs,GetStats,The following statement contains a magic number: stats[2] = (ushort)((((t.HT_DEF ? 31 : IV_DEF) + (2 * p.DEF) + (EV_DEF / 4)) * level / 100) + 5);
Magic Number,PKHeX.Core,PKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PKM.cs,GetStats,The following statement contains a magic number: stats[2] = (ushort)((((t.HT_DEF ? 31 : IV_DEF) + (2 * p.DEF) + (EV_DEF / 4)) * level / 100) + 5);
Magic Number,PKHeX.Core,PKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PKM.cs,GetStats,The following statement contains a magic number: stats[2] = (ushort)((((t.HT_DEF ? 31 : IV_DEF) + (2 * p.DEF) + (EV_DEF / 4)) * level / 100) + 5);
Magic Number,PKHeX.Core,PKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PKM.cs,GetStats,The following statement contains a magic number: stats[4] = (ushort)((((t.HT_SPA ? 31 : IV_SPA) + (2 * p.SPA) + (EV_SPA / 4)) * level / 100) + 5);
Magic Number,PKHeX.Core,PKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PKM.cs,GetStats,The following statement contains a magic number: stats[4] = (ushort)((((t.HT_SPA ? 31 : IV_SPA) + (2 * p.SPA) + (EV_SPA / 4)) * level / 100) + 5);
Magic Number,PKHeX.Core,PKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PKM.cs,GetStats,The following statement contains a magic number: stats[4] = (ushort)((((t.HT_SPA ? 31 : IV_SPA) + (2 * p.SPA) + (EV_SPA / 4)) * level / 100) + 5);
Magic Number,PKHeX.Core,PKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PKM.cs,GetStats,The following statement contains a magic number: stats[4] = (ushort)((((t.HT_SPA ? 31 : IV_SPA) + (2 * p.SPA) + (EV_SPA / 4)) * level / 100) + 5);
Magic Number,PKHeX.Core,PKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PKM.cs,GetStats,The following statement contains a magic number: stats[4] = (ushort)((((t.HT_SPA ? 31 : IV_SPA) + (2 * p.SPA) + (EV_SPA / 4)) * level / 100) + 5);
Magic Number,PKHeX.Core,PKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PKM.cs,GetStats,The following statement contains a magic number: stats[4] = (ushort)((((t.HT_SPA ? 31 : IV_SPA) + (2 * p.SPA) + (EV_SPA / 4)) * level / 100) + 5);
Magic Number,PKHeX.Core,PKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PKM.cs,GetStats,The following statement contains a magic number: stats[5] = (ushort)((((t.HT_SPD ? 31 : IV_SPD) + (2 * p.SPD) + (EV_SPD / 4)) * level / 100) + 5);
Magic Number,PKHeX.Core,PKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PKM.cs,GetStats,The following statement contains a magic number: stats[5] = (ushort)((((t.HT_SPD ? 31 : IV_SPD) + (2 * p.SPD) + (EV_SPD / 4)) * level / 100) + 5);
Magic Number,PKHeX.Core,PKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PKM.cs,GetStats,The following statement contains a magic number: stats[5] = (ushort)((((t.HT_SPD ? 31 : IV_SPD) + (2 * p.SPD) + (EV_SPD / 4)) * level / 100) + 5);
Magic Number,PKHeX.Core,PKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PKM.cs,GetStats,The following statement contains a magic number: stats[5] = (ushort)((((t.HT_SPD ? 31 : IV_SPD) + (2 * p.SPD) + (EV_SPD / 4)) * level / 100) + 5);
Magic Number,PKHeX.Core,PKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PKM.cs,GetStats,The following statement contains a magic number: stats[5] = (ushort)((((t.HT_SPD ? 31 : IV_SPD) + (2 * p.SPD) + (EV_SPD / 4)) * level / 100) + 5);
Magic Number,PKHeX.Core,PKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PKM.cs,GetStats,The following statement contains a magic number: stats[5] = (ushort)((((t.HT_SPD ? 31 : IV_SPD) + (2 * p.SPD) + (EV_SPD / 4)) * level / 100) + 5);
Magic Number,PKHeX.Core,PKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PKM.cs,GetStats,The following statement contains a magic number: stats[3] = (ushort)((((t.HT_SPE ? 31 : IV_SPE) + (2 * p.SPE) + (EV_SPE / 4)) * level / 100) + 5);
Magic Number,PKHeX.Core,PKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PKM.cs,GetStats,The following statement contains a magic number: stats[3] = (ushort)((((t.HT_SPE ? 31 : IV_SPE) + (2 * p.SPE) + (EV_SPE / 4)) * level / 100) + 5);
Magic Number,PKHeX.Core,PKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PKM.cs,GetStats,The following statement contains a magic number: stats[3] = (ushort)((((t.HT_SPE ? 31 : IV_SPE) + (2 * p.SPE) + (EV_SPE / 4)) * level / 100) + 5);
Magic Number,PKHeX.Core,PKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PKM.cs,GetStats,The following statement contains a magic number: stats[3] = (ushort)((((t.HT_SPE ? 31 : IV_SPE) + (2 * p.SPE) + (EV_SPE / 4)) * level / 100) + 5);
Magic Number,PKHeX.Core,PKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PKM.cs,GetStats,The following statement contains a magic number: stats[3] = (ushort)((((t.HT_SPE ? 31 : IV_SPE) + (2 * p.SPE) + (EV_SPE / 4)) * level / 100) + 5);
Magic Number,PKHeX.Core,PKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PKM.cs,GetStats,The following statement contains a magic number: stats[3] = (ushort)((((t.HT_SPE ? 31 : IV_SPE) + (2 * p.SPE) + (EV_SPE / 4)) * level / 100) + 5);
Magic Number,PKHeX.Core,PKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PKM.cs,GetStats,The following statement contains a magic number: ushort[] stats = new ushort[6];
Magic Number,PKHeX.Core,PKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PKM.cs,GetStats,The following statement contains a magic number: stats[0] = (ushort)(p.HP == 1 ? 1 : ((IV_HP + (2 * p.HP) + (EV_HP / 4) + 100) * level / 100) + 10);
Magic Number,PKHeX.Core,PKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PKM.cs,GetStats,The following statement contains a magic number: stats[0] = (ushort)(p.HP == 1 ? 1 : ((IV_HP + (2 * p.HP) + (EV_HP / 4) + 100) * level / 100) + 10);
Magic Number,PKHeX.Core,PKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PKM.cs,GetStats,The following statement contains a magic number: stats[0] = (ushort)(p.HP == 1 ? 1 : ((IV_HP + (2 * p.HP) + (EV_HP / 4) + 100) * level / 100) + 10);
Magic Number,PKHeX.Core,PKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PKM.cs,GetStats,The following statement contains a magic number: stats[0] = (ushort)(p.HP == 1 ? 1 : ((IV_HP + (2 * p.HP) + (EV_HP / 4) + 100) * level / 100) + 10);
Magic Number,PKHeX.Core,PKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PKM.cs,GetStats,The following statement contains a magic number: stats[0] = (ushort)(p.HP == 1 ? 1 : ((IV_HP + (2 * p.HP) + (EV_HP / 4) + 100) * level / 100) + 10);
Magic Number,PKHeX.Core,PKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PKM.cs,GetStats,The following statement contains a magic number: stats[1] = (ushort)(((IV_ATK + (2 * p.ATK) + (EV_ATK / 4)) * level / 100) + 5);
Magic Number,PKHeX.Core,PKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PKM.cs,GetStats,The following statement contains a magic number: stats[1] = (ushort)(((IV_ATK + (2 * p.ATK) + (EV_ATK / 4)) * level / 100) + 5);
Magic Number,PKHeX.Core,PKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PKM.cs,GetStats,The following statement contains a magic number: stats[1] = (ushort)(((IV_ATK + (2 * p.ATK) + (EV_ATK / 4)) * level / 100) + 5);
Magic Number,PKHeX.Core,PKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PKM.cs,GetStats,The following statement contains a magic number: stats[1] = (ushort)(((IV_ATK + (2 * p.ATK) + (EV_ATK / 4)) * level / 100) + 5);
Magic Number,PKHeX.Core,PKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PKM.cs,GetStats,The following statement contains a magic number: stats[2] = (ushort)(((IV_DEF + (2 * p.DEF) + (EV_DEF / 4)) * level / 100) + 5);
Magic Number,PKHeX.Core,PKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PKM.cs,GetStats,The following statement contains a magic number: stats[2] = (ushort)(((IV_DEF + (2 * p.DEF) + (EV_DEF / 4)) * level / 100) + 5);
Magic Number,PKHeX.Core,PKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PKM.cs,GetStats,The following statement contains a magic number: stats[2] = (ushort)(((IV_DEF + (2 * p.DEF) + (EV_DEF / 4)) * level / 100) + 5);
Magic Number,PKHeX.Core,PKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PKM.cs,GetStats,The following statement contains a magic number: stats[2] = (ushort)(((IV_DEF + (2 * p.DEF) + (EV_DEF / 4)) * level / 100) + 5);
Magic Number,PKHeX.Core,PKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PKM.cs,GetStats,The following statement contains a magic number: stats[2] = (ushort)(((IV_DEF + (2 * p.DEF) + (EV_DEF / 4)) * level / 100) + 5);
Magic Number,PKHeX.Core,PKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PKM.cs,GetStats,The following statement contains a magic number: stats[4] = (ushort)(((IV_SPA + (2 * p.SPA) + (EV_SPA / 4)) * level / 100) + 5);
Magic Number,PKHeX.Core,PKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PKM.cs,GetStats,The following statement contains a magic number: stats[4] = (ushort)(((IV_SPA + (2 * p.SPA) + (EV_SPA / 4)) * level / 100) + 5);
Magic Number,PKHeX.Core,PKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PKM.cs,GetStats,The following statement contains a magic number: stats[4] = (ushort)(((IV_SPA + (2 * p.SPA) + (EV_SPA / 4)) * level / 100) + 5);
Magic Number,PKHeX.Core,PKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PKM.cs,GetStats,The following statement contains a magic number: stats[4] = (ushort)(((IV_SPA + (2 * p.SPA) + (EV_SPA / 4)) * level / 100) + 5);
Magic Number,PKHeX.Core,PKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PKM.cs,GetStats,The following statement contains a magic number: stats[4] = (ushort)(((IV_SPA + (2 * p.SPA) + (EV_SPA / 4)) * level / 100) + 5);
Magic Number,PKHeX.Core,PKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PKM.cs,GetStats,The following statement contains a magic number: stats[5] = (ushort)(((IV_SPD + (2 * p.SPD) + (EV_SPD / 4)) * level / 100) + 5);
Magic Number,PKHeX.Core,PKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PKM.cs,GetStats,The following statement contains a magic number: stats[5] = (ushort)(((IV_SPD + (2 * p.SPD) + (EV_SPD / 4)) * level / 100) + 5);
Magic Number,PKHeX.Core,PKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PKM.cs,GetStats,The following statement contains a magic number: stats[5] = (ushort)(((IV_SPD + (2 * p.SPD) + (EV_SPD / 4)) * level / 100) + 5);
Magic Number,PKHeX.Core,PKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PKM.cs,GetStats,The following statement contains a magic number: stats[5] = (ushort)(((IV_SPD + (2 * p.SPD) + (EV_SPD / 4)) * level / 100) + 5);
Magic Number,PKHeX.Core,PKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PKM.cs,GetStats,The following statement contains a magic number: stats[5] = (ushort)(((IV_SPD + (2 * p.SPD) + (EV_SPD / 4)) * level / 100) + 5);
Magic Number,PKHeX.Core,PKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PKM.cs,GetStats,The following statement contains a magic number: stats[3] = (ushort)(((IV_SPE + (2 * p.SPE) + (EV_SPE / 4)) * level / 100) + 5);
Magic Number,PKHeX.Core,PKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PKM.cs,GetStats,The following statement contains a magic number: stats[3] = (ushort)(((IV_SPE + (2 * p.SPE) + (EV_SPE / 4)) * level / 100) + 5);
Magic Number,PKHeX.Core,PKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PKM.cs,GetStats,The following statement contains a magic number: stats[3] = (ushort)(((IV_SPE + (2 * p.SPE) + (EV_SPE / 4)) * level / 100) + 5);
Magic Number,PKHeX.Core,PKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PKM.cs,GetStats,The following statement contains a magic number: stats[3] = (ushort)(((IV_SPE + (2 * p.SPE) + (EV_SPE / 4)) * level / 100) + 5);
Magic Number,PKHeX.Core,PKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PKM.cs,GetStats,The following statement contains a magic number: stats[3] = (ushort)(((IV_SPE + (2 * p.SPE) + (EV_SPE / 4)) * level / 100) + 5);
Magic Number,PKHeX.Core,PKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PKM.cs,SetStats,The following statement contains a magic number: Stat_DEF = stats[2];
Magic Number,PKHeX.Core,PKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PKM.cs,SetStats,The following statement contains a magic number: Stat_SPE = stats[3];
Magic Number,PKHeX.Core,PKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PKM.cs,SetStats,The following statement contains a magic number: Stat_SPA = stats[4];
Magic Number,PKHeX.Core,PKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PKM.cs,SetStats,The following statement contains a magic number: Stat_SPD = stats[5];
Magic Number,PKHeX.Core,PKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PKM.cs,SetLinkTradeEgg,The following statement contains a magic number: Met_Year = y - 2000;
Magic Number,PKHeX.Core,PKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PKM.cs,SetShiny,The following statement contains a magic number: Format >= 6 && (Gen3 || Gen4 || Gen5)
Magic Number,PKHeX.Core,PKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PKM.cs,SetShinySID,The following statement contains a magic number: var xor = TID ^ (PID >> 16) ^ (PID & 0xFFFF);
Magic Number,PKHeX.Core,PKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PKM.cs,SetShinySID,The following statement contains a magic number: SID = (int)(xor & 0xFFF8) | Util.Rand.Next(8);
Magic Number,PKHeX.Core,PKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PKM.cs,SetPIDGender,The following statement contains a magic number: Format >= 6 && (Gen3 || Gen4 || Gen5)
Magic Number,PKHeX.Core,PKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PKM.cs,SetPIDNature,The following statement contains a magic number: Format >= 6 && (Gen3 || Gen4 || Gen5)
Magic Number,PKHeX.Core,PKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PKM.cs,SetPIDUnown3,The following statement contains a magic number: Format >= 6 && (Gen3 || Gen4 || Gen5)
Magic Number,PKHeX.Core,PKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PKM.cs,SetRandomIVs,The following statement contains a magic number: Version == (int)GameVersion.GO && flawless != 6
Magic Number,PKHeX.Core,PKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PKM.cs,SetRandomIVs,The following statement contains a magic number: int[] ivs = new int[6];
Magic Number,PKHeX.Core,PKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PKM.cs,SetRandomIVs,The following statement contains a magic number: i < 6
Magic Number,PKHeX.Core,PKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PKM.cs,SetRandomIVsGO,The following statement contains a magic number: int[] ivs = new int[6];
Magic Number,PKHeX.Core,PKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PKM.cs,SetRandomIVsGO,The following statement contains a magic number: ivs[0] = (Util.Rand.Next(16) << 1) | 1;
Magic Number,PKHeX.Core,PKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PKM.cs,SetRandomIVsGO,The following statement contains a magic number: ivs[1] = ivs[4] = (Util.Rand.Next(16) << 1) | 1;
Magic Number,PKHeX.Core,PKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PKM.cs,SetRandomIVsGO,The following statement contains a magic number: ivs[1] = ivs[4] = (Util.Rand.Next(16) << 1) | 1;
Magic Number,PKHeX.Core,PKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PKM.cs,SetRandomIVsGO,The following statement contains a magic number: ivs[2] = ivs[5] = (Util.Rand.Next(16) << 1) | 1;
Magic Number,PKHeX.Core,PKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PKM.cs,SetRandomIVsGO,The following statement contains a magic number: ivs[2] = ivs[5] = (Util.Rand.Next(16) << 1) | 1;
Magic Number,PKHeX.Core,PKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PKM.cs,SetRandomIVsGO,The following statement contains a magic number: ivs[2] = ivs[5] = (Util.Rand.Next(16) << 1) | 1;
Magic Number,PKHeX.Core,PKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PKM.cs,SetRandomIVsGO,The following statement contains a magic number: ivs[3] = Util.Rand.Next(MaxIV + 1);
Magic Number,PKHeX.Core,PKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PKM.cs,SetRandomIVs,The following statement contains a magic number: int[] ivs = new int[6];
Magic Number,PKHeX.Core,PKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PKM.cs,SetRandomIVs,The following statement contains a magic number: i < 6
Magic Number,PKHeX.Core,PKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PKM.cs,GetFlawlessIVCount,The following statement contains a magic number: return 3;
Magic Number,PKHeX.Core,PKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PKM.cs,GetFlawlessIVCount,The following statement contains a magic number: GenNumber >= 6 && (Legal.Legends.Contains(Species) || Legal.SubLegends.Contains(Species))
Magic Number,PKHeX.Core,PKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PKM.cs,GetFlawlessIVCount,The following statement contains a magic number: return 2;
Magic Number,PKHeX.Core,PKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PKM.cs,GetFlawlessIVCount,The following statement contains a magic number: Met_Location == 148 && Met_Level == 30
Magic Number,PKHeX.Core,PKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PKM.cs,GetFlawlessIVCount,The following statement contains a magic number: Met_Location == 148 && Met_Level == 30
Magic Number,PKHeX.Core,PKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PKM.cs,GetFlawlessIVCount,The following statement contains a magic number: return 3;
Magic Number,PKHeX.Core,PKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PKM.cs,GetFlawlessIVCount,The following statement contains a magic number: PersonalInfo.EggGroup1 == 15
Magic Number,PKHeX.Core,PKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PKM.cs,GetFlawlessIVCount,The following statement contains a magic number: return Species == 151 || Species == 251 ? 5 : 3;
Magic Number,PKHeX.Core,PKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PKM.cs,GetFlawlessIVCount,The following statement contains a magic number: return Species == 151 || Species == 251 ? 5 : 3;
Magic Number,PKHeX.Core,PKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PKM.cs,GetFlawlessIVCount,The following statement contains a magic number: return Species == 151 || Species == 251 ? 5 : 3;
Magic Number,PKHeX.Core,PKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PKM.cs,GetFlawlessIVCount,The following statement contains a magic number: return Species == 151 || Species == 251 ? 5 : 3;
Magic Number,PKHeX.Core,PKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PKM.cs,ClearInvalidMoves,The following statement contains a magic number: invalid == 4
Magic Number,PKHeX.Core,PKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PKM.cs,GetEV,The following statement contains a magic number: return index switch              {                  0 => EV_HP'                  1 => EV_ATK'                  2 => EV_DEF'                  3 => EV_SPE'                  4 => EV_SPA'                  5 => EV_SPD'                  _ => throw new ArgumentOutOfRangeException(nameof(index))              };
Magic Number,PKHeX.Core,PKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PKM.cs,GetEV,The following statement contains a magic number: return index switch              {                  0 => EV_HP'                  1 => EV_ATK'                  2 => EV_DEF'                  3 => EV_SPE'                  4 => EV_SPA'                  5 => EV_SPD'                  _ => throw new ArgumentOutOfRangeException(nameof(index))              };
Magic Number,PKHeX.Core,PKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PKM.cs,GetEV,The following statement contains a magic number: return index switch              {                  0 => EV_HP'                  1 => EV_ATK'                  2 => EV_DEF'                  3 => EV_SPE'                  4 => EV_SPA'                  5 => EV_SPD'                  _ => throw new ArgumentOutOfRangeException(nameof(index))              };
Magic Number,PKHeX.Core,PKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PKM.cs,GetEV,The following statement contains a magic number: return index switch              {                  0 => EV_HP'                  1 => EV_ATK'                  2 => EV_DEF'                  3 => EV_SPE'                  4 => EV_SPA'                  5 => EV_SPD'                  _ => throw new ArgumentOutOfRangeException(nameof(index))              };
Magic Number,PKHeX.Core,PKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PKM.cs,GetIV,The following statement contains a magic number: return index switch              {                  0 => IV_HP'                  1 => IV_ATK'                  2 => IV_DEF'                  3 => IV_SPE'                  4 => IV_SPA'                  5 => IV_SPD'                  _ => throw new ArgumentOutOfRangeException(nameof(index))              };
Magic Number,PKHeX.Core,PKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PKM.cs,GetIV,The following statement contains a magic number: return index switch              {                  0 => IV_HP'                  1 => IV_ATK'                  2 => IV_DEF'                  3 => IV_SPE'                  4 => IV_SPA'                  5 => IV_SPD'                  _ => throw new ArgumentOutOfRangeException(nameof(index))              };
Magic Number,PKHeX.Core,PKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PKM.cs,GetIV,The following statement contains a magic number: return index switch              {                  0 => IV_HP'                  1 => IV_ATK'                  2 => IV_DEF'                  3 => IV_SPE'                  4 => IV_SPA'                  5 => IV_SPD'                  _ => throw new ArgumentOutOfRangeException(nameof(index))              };
Magic Number,PKHeX.Core,PKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PKM.cs,GetIV,The following statement contains a magic number: return index switch              {                  0 => IV_HP'                  1 => IV_ATK'                  2 => IV_DEF'                  3 => IV_SPE'                  4 => IV_SPA'                  5 => IV_SPD'                  _ => throw new ArgumentOutOfRangeException(nameof(index))              };
Magic Number,PKHeX.Core,G3PKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Shared\G3PKM.cs,ConvertTo,The following statement contains a magic number: ck3.Purification = -100;
Magic Number,PKHeX.Core,G4PKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Shared\G4PKM.cs,ConvertTo,The following statement contains a magic number: pk.Data[0x48 + (2 * i)] = Data[0x48 + (2 * i) + 1];
Magic Number,PKHeX.Core,G4PKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Shared\G4PKM.cs,ConvertTo,The following statement contains a magic number: pk.Data[0x48 + (2 * i)] = Data[0x48 + (2 * i) + 1];
Magic Number,PKHeX.Core,G4PKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Shared\G4PKM.cs,ConvertTo,The following statement contains a magic number: pk.Data[0x48 + (2 * i) + 1] = Data[0x48 + (2 * i)];
Magic Number,PKHeX.Core,G4PKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Shared\G4PKM.cs,ConvertTo,The following statement contains a magic number: pk.Data[0x48 + (2 * i) + 1] = Data[0x48 + (2 * i)];
Magic Number,PKHeX.Core,G4PKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Shared\G4PKM.cs,ConvertTo,The following statement contains a magic number: i < 11
Magic Number,PKHeX.Core,G4PKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Shared\G4PKM.cs,ConvertTo,The following statement contains a magic number: pk.Data[0x68 + (2 * i)] = Data[0x68 + (2 * i) + 1];
Magic Number,PKHeX.Core,G4PKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Shared\G4PKM.cs,ConvertTo,The following statement contains a magic number: pk.Data[0x68 + (2 * i)] = Data[0x68 + (2 * i) + 1];
Magic Number,PKHeX.Core,G4PKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Shared\G4PKM.cs,ConvertTo,The following statement contains a magic number: pk.Data[0x68 + (2 * i) + 1] = Data[0x68 + (2 * i)];
Magic Number,PKHeX.Core,G4PKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Shared\G4PKM.cs,ConvertTo,The following statement contains a magic number: pk.Data[0x68 + (2 * i) + 1] = Data[0x68 + (2 * i)];
Magic Number,PKHeX.Core,G4PKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Shared\G4PKM.cs,ConvertTo,The following statement contains a magic number: i < 8
Magic Number,PKHeX.Core,G6PKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Shared\G6PKM.cs,TradeMemory,The following statement contains a magic number: HT_Memory = 4;
Magic Number,PKHeX.Core,G6PKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Shared\G6PKM.cs,TradeMemory,The following statement contains a magic number: HT_TextVar = Bank ? 0 : 9;
Magic Number,PKHeX.Core,G6PKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Shared\G6PKM.cs,TradeMemory,The following statement contains a magic number: HT_Feeling = Memories.GetRandomFeeling(HT_Memory' Bank ? 10 : 20);
Magic Number,PKHeX.Core,G6PKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Shared\G6PKM.cs,TradeMemory,The following statement contains a magic number: HT_Feeling = Memories.GetRandomFeeling(HT_Memory' Bank ? 10 : 20);
Magic Number,PKHeX.Core,GBPKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Shared\GBPKM.cs,TransferLanguage,The following statement contains a magic number: var expect = SpeciesName.GetSpeciesNameGeneration(Species' destLanguage' 2);
Magic Number,PKHeX.Core,GBPKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Shared\GBPKM.cs,GetStats,The following statement contains a magic number: stats[0] += (ushort)(5 + lv);
Magic Number,PKHeX.Core,GBPKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Shared\GBPKM.cs,GetStat,The following statement contains a magic number: EV = (ushort)Math.Min(255' Math.Sqrt(EV) + 1) >> 2;
Magic Number,PKHeX.Core,GBPKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Shared\GBPKM.cs,GetStat,The following statement contains a magic number: EV = (ushort)Math.Min(255' Math.Sqrt(EV) + 1) >> 2;
Magic Number,PKHeX.Core,GBPKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Shared\GBPKM.cs,GetStat,The following statement contains a magic number: return (ushort)((((2 * (BV + IV)) + EV) * LV / 100) + 5);
Magic Number,PKHeX.Core,GBPKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Shared\GBPKM.cs,GetStat,The following statement contains a magic number: return (ushort)((((2 * (BV + IV)) + EV) * LV / 100) + 5);
Magic Number,PKHeX.Core,GBPKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Shared\GBPKM.cs,GetStat,The following statement contains a magic number: return (ushort)((((2 * (BV + IV)) + EV) * LV / 100) + 5);
Magic Number,PKHeX.Core,GBPKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Shared\GBPKM.cs,GetMovePP,The following statement contains a magic number: return pp + (ppup * Math.Min(7' pp / 5));
Magic Number,PKHeX.Core,GBPKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Shared\GBPKM.cs,GetMovePP,The following statement contains a magic number: return pp + (ppup * Math.Min(7' pp / 5));
Magic Number,PKHeX.Core,GBPKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Shared\GBPKM.cs,SetShiny,The following statement contains a magic number: IV_ATK |= 2;
Magic Number,PKHeX.Core,GBPKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Shared\GBPKM.cs,SetShiny,The following statement contains a magic number: IV_DEF = 10;
Magic Number,PKHeX.Core,GBPKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Shared\GBPKM.cs,SetShiny,The following statement contains a magic number: IV_SPE = 10;
Magic Number,PKHeX.Core,GBPKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Shared\GBPKM.cs,SetShiny,The following statement contains a magic number: IV_SPA = 10;
Magic Number,PKHeX.Core,PokeListGB<T>,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Shared\PokeListGB.cs,PokeListGB,The following statement contains a magic number: var dataSize = 2 + (Capacity * (Entry_Size + 1 + (2 * StringLength)));
Magic Number,PKHeX.Core,PokeListGB<T>,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Shared\PokeListGB.cs,PokeListGB,The following statement contains a magic number: var dataSize = 2 + (Capacity * (Entry_Size + 1 + (2 * StringLength)));
Magic Number,PKHeX.Core,PokeListGB<T>,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Shared\PokeListGB.cs,GetEmptyList,The following statement contains a magic number: var strings = Enumerable.Repeat((byte) 0x50' GetStringLength(jp) * 2 * capacity);
Magic Number,PKHeX.Core,PokeListGB<T>,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Shared\PokeListGB.cs,GetDataSize,The following statement contains a magic number: var entryLength = 1 + entrySize + (2 * GetStringLength(jp));
Magic Number,PKHeX.Core,PokeListGB<T>,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Shared\PokeListGB.cs,GetDataSize,The following statement contains a magic number: return 2 + ((byte)c * entryLength);
Magic Number,PKHeX.Core,PokeListGB<T>,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Shared\PokeListGB.cs,Read,The following statement contains a magic number: int base_ofs = 2 + Capacity;
Magic Number,PKHeX.Core,PokeListGB<T>,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Shared\PokeListGB.cs,Write,The following statement contains a magic number: int base_ofs = 2 + Capacity;
Magic Number,PKHeX.Core,QRPKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Shared\QRPKM.cs,GetHeader,The following statement contains a magic number: pkm.Format >= 3 && (uint)pkm.Ability < s.Ability.Count
Magic Number,PKHeX.Core,QRPKM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Shared\QRPKM.cs,GetHeader,The following statement contains a magic number: pkm.Format >= 3 && (uint)pkm.Nature < s.Natures.Count
Magic Number,PKHeX.Core,StringConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Strings\StringConverter.cs,GetString,The following statement contains a magic number: return generation == 3 ? StringConverter3.GetBEString3(data' offset' count) : StringConverter4.GetBEString4(data' offset' count);
Magic Number,PKHeX.Core,StringConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Strings\StringConverter.cs,GetString,The following statement contains a magic number: switch (generation)              {                  case 1:                  case 2: return StringConverter12.GetString1(data' offset' count' jp);                  case 3: return StringConverter3.GetString3(data' offset' count' jp);                  case 4: return StringConverter4.GetString4(data' offset' count);                  case 5: return GetString5(data' offset' count);                  case 6: return GetString6(data' offset' count);                  default: return GetString7(data' offset' count);              }
Magic Number,PKHeX.Core,StringConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Strings\StringConverter.cs,GetString,The following statement contains a magic number: switch (generation)              {                  case 1:                  case 2: return StringConverter12.GetString1(data' offset' count' jp);                  case 3: return StringConverter3.GetString3(data' offset' count' jp);                  case 4: return StringConverter4.GetString4(data' offset' count);                  case 5: return GetString5(data' offset' count);                  case 6: return GetString6(data' offset' count);                  default: return GetString7(data' offset' count);              }
Magic Number,PKHeX.Core,StringConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Strings\StringConverter.cs,GetString,The following statement contains a magic number: switch (generation)              {                  case 1:                  case 2: return StringConverter12.GetString1(data' offset' count' jp);                  case 3: return StringConverter3.GetString3(data' offset' count' jp);                  case 4: return StringConverter4.GetString4(data' offset' count);                  case 5: return GetString5(data' offset' count);                  case 6: return GetString6(data' offset' count);                  default: return GetString7(data' offset' count);              }
Magic Number,PKHeX.Core,StringConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Strings\StringConverter.cs,GetString,The following statement contains a magic number: switch (generation)              {                  case 1:                  case 2: return StringConverter12.GetString1(data' offset' count' jp);                  case 3: return StringConverter3.GetString3(data' offset' count' jp);                  case 4: return StringConverter4.GetString4(data' offset' count);                  case 5: return GetString5(data' offset' count);                  case 6: return GetString6(data' offset' count);                  default: return GetString7(data' offset' count);              }
Magic Number,PKHeX.Core,StringConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Strings\StringConverter.cs,GetString,The following statement contains a magic number: switch (generation)              {                  case 1:                  case 2: return StringConverter12.GetString1(data' offset' count' jp);                  case 3: return StringConverter3.GetString3(data' offset' count' jp);                  case 4: return StringConverter4.GetString4(data' offset' count);                  case 5: return GetString5(data' offset' count);                  case 6: return GetString6(data' offset' count);                  default: return GetString7(data' offset' count);              }
Magic Number,PKHeX.Core,StringConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Strings\StringConverter.cs,SetString,The following statement contains a magic number: return generation == 3 ? StringConverter3.SetBEString3(value' maxLength' padTo' padWith) : StringConverter4.SetBEString4(value' maxLength' padTo' padWith);
Magic Number,PKHeX.Core,StringConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Strings\StringConverter.cs,SetString,The following statement contains a magic number: switch (generation)              {                  case 1:                  case 2: return StringConverter12.SetString1(value' maxLength' jp' padTo' padWith);                  case 3: return StringConverter3.SetString3(value' maxLength' jp' padTo' padWith);                  case 4: return StringConverter4.SetString4(value' maxLength' padTo' padWith);                  case 5: return SetString5(value' maxLength' padTo' padWith);                  case 6: return SetString6(value' maxLength' padTo' padWith);                  default: return SetString7(value' maxLength' language' padTo' padWith);              }
Magic Number,PKHeX.Core,StringConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Strings\StringConverter.cs,SetString,The following statement contains a magic number: switch (generation)              {                  case 1:                  case 2: return StringConverter12.SetString1(value' maxLength' jp' padTo' padWith);                  case 3: return StringConverter3.SetString3(value' maxLength' jp' padTo' padWith);                  case 4: return StringConverter4.SetString4(value' maxLength' padTo' padWith);                  case 5: return SetString5(value' maxLength' padTo' padWith);                  case 6: return SetString6(value' maxLength' padTo' padWith);                  default: return SetString7(value' maxLength' language' padTo' padWith);              }
Magic Number,PKHeX.Core,StringConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Strings\StringConverter.cs,SetString,The following statement contains a magic number: switch (generation)              {                  case 1:                  case 2: return StringConverter12.SetString1(value' maxLength' jp' padTo' padWith);                  case 3: return StringConverter3.SetString3(value' maxLength' jp' padTo' padWith);                  case 4: return StringConverter4.SetString4(value' maxLength' padTo' padWith);                  case 5: return SetString5(value' maxLength' padTo' padWith);                  case 6: return SetString6(value' maxLength' padTo' padWith);                  default: return SetString7(value' maxLength' language' padTo' padWith);              }
Magic Number,PKHeX.Core,StringConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Strings\StringConverter.cs,SetString,The following statement contains a magic number: switch (generation)              {                  case 1:                  case 2: return StringConverter12.SetString1(value' maxLength' jp' padTo' padWith);                  case 3: return StringConverter3.SetString3(value' maxLength' jp' padTo' padWith);                  case 4: return StringConverter4.SetString4(value' maxLength' padTo' padWith);                  case 5: return SetString5(value' maxLength' padTo' padWith);                  case 6: return SetString6(value' maxLength' padTo' padWith);                  default: return SetString7(value' maxLength' language' padTo' padWith);              }
Magic Number,PKHeX.Core,StringConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Strings\StringConverter.cs,SetString,The following statement contains a magic number: switch (generation)              {                  case 1:                  case 2: return StringConverter12.SetString1(value' maxLength' jp' padTo' padWith);                  case 3: return StringConverter3.SetString3(value' maxLength' jp' padTo' padWith);                  case 4: return StringConverter4.SetString4(value' maxLength' padTo' padWith);                  case 5: return SetString5(value' maxLength' padTo' padWith);                  case 6: return SetString6(value' maxLength' padTo' padWith);                  default: return SetString7(value' maxLength' language' padTo' padWith);              }
Magic Number,PKHeX.Core,StringConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Strings\StringConverter.cs,SetString5,The following statement contains a magic number: string temp = UnSanitizeString(value' 5)                  .PadRight(value.Length + 1' (char)0xFFFF) // Null Terminator                  .PadRight(padTo' (char)padWith);
Magic Number,PKHeX.Core,StringConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Strings\StringConverter.cs,SetString6,The following statement contains a magic number: string temp = UnSanitizeString(value' 6)                  .PadRight(value.Length + 1' '\0') // Null Terminator                  .PadRight(padTo' (char)padWith);
Magic Number,PKHeX.Core,StringConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Strings\StringConverter.cs,SetString7,The following statement contains a magic number: value = value.Substring(0' 12);
Magic Number,PKHeX.Core,StringConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Strings\StringConverter.cs,SetString7,The following statement contains a magic number: string temp = UnSanitizeString(value' 7)                  .PadRight(value.Length + 1' '\0') // Null Terminator                  .PadRight(padTo' (char)padWith);
Magic Number,PKHeX.Core,StringConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Strings\StringConverter.cs,SetString7b,The following statement contains a magic number: value = value.Substring(0' 12);
Magic Number,PKHeX.Core,StringConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Strings\StringConverter.cs,ConvertString2BinG7_zh,The following statement contains a magic number: bool cht = lang == 10;
Magic Number,PKHeX.Core,StringConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Strings\StringConverter.cs,UnSanitizeString,The following statement contains a magic number: generation >= 6
Magic Number,PKHeX.Core,StringConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Strings\StringConverter.cs,UnSanitizeString,The following statement contains a magic number: generation <= 5
Magic Number,PKHeX.Core,StringConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Strings\StringConverter.cs,UnSanitizeString,The following statement contains a magic number: bool fullwidth = langcontext.Select(c => c >> 12) // select the group the char belongs to                  .Any(c => c != 0 /* Latin */ && c != 0xE /* Special Symbols */);
Magic Number,PKHeX.Core,StringConverter4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Strings\StringConverter4.cs,SetString4,The following statement contains a magic number: var temp = StringConverter.UnSanitizeString(value' 4) // Replace Special Characters and add Terminator                  .PadRight(value.Length + 1' (char)0xFFFF) // Null Terminator                  .PadRight(padTo' (char)padWith);
Magic Number,PKHeX.Core,StringConverter4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Strings\StringConverter4.cs,SetString4,The following statement contains a magic number: var strdata = new byte[temp.Length * 2];
Magic Number,PKHeX.Core,StringConverter4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Strings\StringConverter4.cs,SetString4,The following statement contains a magic number: BitConverter.GetBytes(val).CopyTo(strdata' i * 2);
Magic Number,PKHeX.Core,StringConverter4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Strings\StringConverter4.cs,SetBEString4,The following statement contains a magic number: var temp = StringConverter.UnSanitizeString(value' 4) // Replace Special Characters and add Terminator                  .PadRight(value.Length + 1' (char)0xFFFF) // Null Terminator                  .PadRight(padTo' (char)padWith);
Magic Number,PKHeX.Core,StringConverter4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Strings\StringConverter4.cs,SetBEString4,The following statement contains a magic number: var strdata = new byte[temp.Length * 2];
Magic Number,PKHeX.Core,StringConverter4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Strings\StringConverter4.cs,SetBEString4,The following statement contains a magic number: BigEndian.GetBytes(val).CopyTo(strdata' i * 2);
Magic Number,PKHeX.Core,Experience,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\Experience.cs,GetLevel,The following statement contains a magic number: return 100;
Magic Number,PKHeX.Core,Experience,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\Experience.cs,GetLevel,The following statement contains a magic number: exp >= ExpTable[99' growth]
Magic Number,PKHeX.Core,Experience,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\Experience.cs,GetEXP,The following statement contains a magic number: level = 100;
Magic Number,PKHeX.Core,Experience,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\Experience.cs,GetEXP,The following statement contains a magic number: level > 100
Magic Number,PKHeX.Core,Experience,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\Experience.cs,GetEXPToLevelUp,The following statement contains a magic number: level >= 100
Magic Number,PKHeX.Core,Experience,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\Experience.cs,GetEXPToLevelUpPercentage,The following statement contains a magic number: level >= 100
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormList,The following statement contains a magic number: generation < 8 && IsFormListSingleMega(species)
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormList,The following statement contains a magic number: generation == 7 && Legal.Totem_USUM.Contains(species)
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,IsTotemForm,The following statement contains a magic number: generation != 7
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,IsTotemForm,The following statement contains a magic number: return form == 2 || form == 3;
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,IsTotemForm,The following statement contains a magic number: return form == 2 || form == 3;
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,IsTotemForm,The following statement contains a magic number: return form == 2;
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetTotemBaseForm,The following statement contains a magic number: return form - 2;
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,IsValidOutOfBoundsForme,The following statement contains a magic number: switch ((Species)species)              {                  case Unown:                      return form < (generation == 2 ? 26 : 28); // A-Z : A-Z?!                  case Mothim: // Burmy base form is kept                      return form < 3;                  case Scatterbug:                  case Spewpa: // Vivillon Pre-evolutions                      return form < 18;                  default:                      return false;              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,IsValidOutOfBoundsForme,The following statement contains a magic number: switch ((Species)species)              {                  case Unown:                      return form < (generation == 2 ? 26 : 28); // A-Z : A-Z?!                  case Mothim: // Burmy base form is kept                      return form < 3;                  case Scatterbug:                  case Spewpa: // Vivillon Pre-evolutions                      return form < 18;                  default:                      return false;              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,IsValidOutOfBoundsForme,The following statement contains a magic number: switch ((Species)species)              {                  case Unown:                      return form < (generation == 2 ? 26 : 28); // A-Z : A-Z?!                  case Mothim: // Burmy base form is kept                      return form < 3;                  case Scatterbug:                  case Spewpa: // Vivillon Pre-evolutions                      return form < 18;                  default:                      return false;              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,IsValidOutOfBoundsForme,The following statement contains a magic number: switch ((Species)species)              {                  case Unown:                      return form < (generation == 2 ? 26 : 28); // A-Z : A-Z?!                  case Mothim: // Burmy base form is kept                      return form < 3;                  case Scatterbug:                  case Spewpa: // Vivillon Pre-evolutions                      return form < 18;                  default:                      return false;              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,IsValidOutOfBoundsForme,The following statement contains a magic number: switch ((Species)species)              {                  case Unown:                      return form < (generation == 2 ? 26 : 28); // A-Z : A-Z?!                  case Mothim: // Burmy base form is kept                      return form < 3;                  case Scatterbug:                  case Spewpa: // Vivillon Pre-evolutions                      return form < 18;                  default:                      return false;              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsGen1,The following statement contains a magic number: switch ((Species)species)              {                  case Charizard when generation < 8:                  case Mewtwo when generation < 8:                      return GetMegaXY(types' forms);                    case Eevee when IsGG():                      return new[]                      {                          types[000]' // Normal                          Starter'                      };                    case Pikachu:                      return GetFormsPikachu(generation' types' forms);                    case Weezing when generation >= 8:                  case Ponyta when generation >= 8:                  case Rapidash when generation >= 8:                  case MrMime when generation >= 8:                  case Farfetchd when generation >= 8:                      return GetFormsGalar(types' forms);                    default:                      return GetFormsAlolan(generation' types' forms' species);              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsGen1,The following statement contains a magic number: switch ((Species)species)              {                  case Charizard when generation < 8:                  case Mewtwo when generation < 8:                      return GetMegaXY(types' forms);                    case Eevee when IsGG():                      return new[]                      {                          types[000]' // Normal                          Starter'                      };                    case Pikachu:                      return GetFormsPikachu(generation' types' forms);                    case Weezing when generation >= 8:                  case Ponyta when generation >= 8:                  case Rapidash when generation >= 8:                  case MrMime when generation >= 8:                  case Farfetchd when generation >= 8:                      return GetFormsGalar(types' forms);                    default:                      return GetFormsAlolan(generation' types' forms' species);              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsGen1,The following statement contains a magic number: switch ((Species)species)              {                  case Charizard when generation < 8:                  case Mewtwo when generation < 8:                      return GetMegaXY(types' forms);                    case Eevee when IsGG():                      return new[]                      {                          types[000]' // Normal                          Starter'                      };                    case Pikachu:                      return GetFormsPikachu(generation' types' forms);                    case Weezing when generation >= 8:                  case Ponyta when generation >= 8:                  case Rapidash when generation >= 8:                  case MrMime when generation >= 8:                  case Farfetchd when generation >= 8:                      return GetFormsGalar(types' forms);                    default:                      return GetFormsAlolan(generation' types' forms' species);              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsGen1,The following statement contains a magic number: switch ((Species)species)              {                  case Charizard when generation < 8:                  case Mewtwo when generation < 8:                      return GetMegaXY(types' forms);                    case Eevee when IsGG():                      return new[]                      {                          types[000]' // Normal                          Starter'                      };                    case Pikachu:                      return GetFormsPikachu(generation' types' forms);                    case Weezing when generation >= 8:                  case Ponyta when generation >= 8:                  case Rapidash when generation >= 8:                  case MrMime when generation >= 8:                  case Farfetchd when generation >= 8:                      return GetFormsGalar(types' forms);                    default:                      return GetFormsAlolan(generation' types' forms' species);              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsGen1,The following statement contains a magic number: switch ((Species)species)              {                  case Charizard when generation < 8:                  case Mewtwo when generation < 8:                      return GetMegaXY(types' forms);                    case Eevee when IsGG():                      return new[]                      {                          types[000]' // Normal                          Starter'                      };                    case Pikachu:                      return GetFormsPikachu(generation' types' forms);                    case Weezing when generation >= 8:                  case Ponyta when generation >= 8:                  case Rapidash when generation >= 8:                  case MrMime when generation >= 8:                  case Farfetchd when generation >= 8:                      return GetFormsGalar(types' forms);                    default:                      return GetFormsAlolan(generation' types' forms' species);              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsGen1,The following statement contains a magic number: switch ((Species)species)              {                  case Charizard when generation < 8:                  case Mewtwo when generation < 8:                      return GetMegaXY(types' forms);                    case Eevee when IsGG():                      return new[]                      {                          types[000]' // Normal                          Starter'                      };                    case Pikachu:                      return GetFormsPikachu(generation' types' forms);                    case Weezing when generation >= 8:                  case Ponyta when generation >= 8:                  case Rapidash when generation >= 8:                  case MrMime when generation >= 8:                  case Farfetchd when generation >= 8:                      return GetFormsGalar(types' forms);                    default:                      return GetFormsAlolan(generation' types' forms' species);              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsGen1,The following statement contains a magic number: switch ((Species)species)              {                  case Charizard when generation < 8:                  case Mewtwo when generation < 8:                      return GetMegaXY(types' forms);                    case Eevee when IsGG():                      return new[]                      {                          types[000]' // Normal                          Starter'                      };                    case Pikachu:                      return GetFormsPikachu(generation' types' forms);                    case Weezing when generation >= 8:                  case Ponyta when generation >= 8:                  case Rapidash when generation >= 8:                  case MrMime when generation >= 8:                  case Farfetchd when generation >= 8:                      return GetFormsGalar(types' forms);                    default:                      return GetFormsAlolan(generation' types' forms' species);              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsGen2,The following statement contains a magic number: return species switch              {                  (int)Pichu when generation == 4 => GetFormsPichu(types' forms)'                  (int)Unown => GetFormsUnown(generation)'                  (int)Corsola when generation >= 8 => GetFormsGalar(types' forms)'                  _ => EMPTY              };
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsGen2,The following statement contains a magic number: return species switch              {                  (int)Pichu when generation == 4 => GetFormsPichu(types' forms)'                  (int)Unown => GetFormsUnown(generation)'                  (int)Corsola when generation >= 8 => GetFormsGalar(types' forms)'                  _ => EMPTY              };
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsGen3,The following statement contains a magic number: switch ((Species)species)              {                  default:                      return EMPTY;                    case Zigzagoon when generation >= 8:                  case Linoone when generation >= 8:                      return GetFormsGalar(types' forms);                    case Castform: // Casftorm                      return new[]                      {                          types[000]' // Normal                          forms[889]' // Sunny                          forms[890]' // Rainy                          forms[891]' // Snowy                      };                  case Kyogre: // Kyogre                  case Groudon: // Groudon                      return new[]                      {                          types[000]' // Normal                          forms[899]' // Primal                      };                  case Deoxys: // Deoxys                      return new[]                      {                          types[000]' // Normal                          forms[902]' // Attack                          forms[903]' // Defense                          forms[904]' // Speed                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsGen3,The following statement contains a magic number: switch ((Species)species)              {                  default:                      return EMPTY;                    case Zigzagoon when generation >= 8:                  case Linoone when generation >= 8:                      return GetFormsGalar(types' forms);                    case Castform: // Casftorm                      return new[]                      {                          types[000]' // Normal                          forms[889]' // Sunny                          forms[890]' // Rainy                          forms[891]' // Snowy                      };                  case Kyogre: // Kyogre                  case Groudon: // Groudon                      return new[]                      {                          types[000]' // Normal                          forms[899]' // Primal                      };                  case Deoxys: // Deoxys                      return new[]                      {                          types[000]' // Normal                          forms[902]' // Attack                          forms[903]' // Defense                          forms[904]' // Speed                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsGen3,The following statement contains a magic number: switch ((Species)species)              {                  default:                      return EMPTY;                    case Zigzagoon when generation >= 8:                  case Linoone when generation >= 8:                      return GetFormsGalar(types' forms);                    case Castform: // Casftorm                      return new[]                      {                          types[000]' // Normal                          forms[889]' // Sunny                          forms[890]' // Rainy                          forms[891]' // Snowy                      };                  case Kyogre: // Kyogre                  case Groudon: // Groudon                      return new[]                      {                          types[000]' // Normal                          forms[899]' // Primal                      };                  case Deoxys: // Deoxys                      return new[]                      {                          types[000]' // Normal                          forms[902]' // Attack                          forms[903]' // Defense                          forms[904]' // Speed                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsGen3,The following statement contains a magic number: switch ((Species)species)              {                  default:                      return EMPTY;                    case Zigzagoon when generation >= 8:                  case Linoone when generation >= 8:                      return GetFormsGalar(types' forms);                    case Castform: // Casftorm                      return new[]                      {                          types[000]' // Normal                          forms[889]' // Sunny                          forms[890]' // Rainy                          forms[891]' // Snowy                      };                  case Kyogre: // Kyogre                  case Groudon: // Groudon                      return new[]                      {                          types[000]' // Normal                          forms[899]' // Primal                      };                  case Deoxys: // Deoxys                      return new[]                      {                          types[000]' // Normal                          forms[902]' // Attack                          forms[903]' // Defense                          forms[904]' // Speed                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsGen3,The following statement contains a magic number: switch ((Species)species)              {                  default:                      return EMPTY;                    case Zigzagoon when generation >= 8:                  case Linoone when generation >= 8:                      return GetFormsGalar(types' forms);                    case Castform: // Casftorm                      return new[]                      {                          types[000]' // Normal                          forms[889]' // Sunny                          forms[890]' // Rainy                          forms[891]' // Snowy                      };                  case Kyogre: // Kyogre                  case Groudon: // Groudon                      return new[]                      {                          types[000]' // Normal                          forms[899]' // Primal                      };                  case Deoxys: // Deoxys                      return new[]                      {                          types[000]' // Normal                          forms[902]' // Attack                          forms[903]' // Defense                          forms[904]' // Speed                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsGen3,The following statement contains a magic number: switch ((Species)species)              {                  default:                      return EMPTY;                    case Zigzagoon when generation >= 8:                  case Linoone when generation >= 8:                      return GetFormsGalar(types' forms);                    case Castform: // Casftorm                      return new[]                      {                          types[000]' // Normal                          forms[889]' // Sunny                          forms[890]' // Rainy                          forms[891]' // Snowy                      };                  case Kyogre: // Kyogre                  case Groudon: // Groudon                      return new[]                      {                          types[000]' // Normal                          forms[899]' // Primal                      };                  case Deoxys: // Deoxys                      return new[]                      {                          types[000]' // Normal                          forms[902]' // Attack                          forms[903]' // Defense                          forms[904]' // Speed                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsGen3,The following statement contains a magic number: switch ((Species)species)              {                  default:                      return EMPTY;                    case Zigzagoon when generation >= 8:                  case Linoone when generation >= 8:                      return GetFormsGalar(types' forms);                    case Castform: // Casftorm                      return new[]                      {                          types[000]' // Normal                          forms[889]' // Sunny                          forms[890]' // Rainy                          forms[891]' // Snowy                      };                  case Kyogre: // Kyogre                  case Groudon: // Groudon                      return new[]                      {                          types[000]' // Normal                          forms[899]' // Primal                      };                  case Deoxys: // Deoxys                      return new[]                      {                          types[000]' // Normal                          forms[902]' // Attack                          forms[903]' // Defense                          forms[904]' // Speed                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsGen3,The following statement contains a magic number: switch ((Species)species)              {                  default:                      return EMPTY;                    case Zigzagoon when generation >= 8:                  case Linoone when generation >= 8:                      return GetFormsGalar(types' forms);                    case Castform: // Casftorm                      return new[]                      {                          types[000]' // Normal                          forms[889]' // Sunny                          forms[890]' // Rainy                          forms[891]' // Snowy                      };                  case Kyogre: // Kyogre                  case Groudon: // Groudon                      return new[]                      {                          types[000]' // Normal                          forms[899]' // Primal                      };                  case Deoxys: // Deoxys                      return new[]                      {                          types[000]' // Normal                          forms[902]' // Attack                          forms[903]' // Defense                          forms[904]' // Speed                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsGen3,The following statement contains a magic number: switch ((Species)species)              {                  default:                      return EMPTY;                    case Zigzagoon when generation >= 8:                  case Linoone when generation >= 8:                      return GetFormsGalar(types' forms);                    case Castform: // Casftorm                      return new[]                      {                          types[000]' // Normal                          forms[889]' // Sunny                          forms[890]' // Rainy                          forms[891]' // Snowy                      };                  case Kyogre: // Kyogre                  case Groudon: // Groudon                      return new[]                      {                          types[000]' // Normal                          forms[899]' // Primal                      };                  case Deoxys: // Deoxys                      return new[]                      {                          types[000]' // Normal                          forms[902]' // Attack                          forms[903]' // Defense                          forms[904]' // Speed                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsGen4,The following statement contains a magic number: switch ((Species)species)              {                  default:                      return EMPTY;                    case Burmy:                  case Wormadam:                  case Mothim:                      return new[]                      {                          forms[412]' // Plant                          forms[905]' // Sandy                          forms[906]' // Trash                      };                    case Cherrim:                      return new[]                      {                          forms[421]' // Overcast                          forms[909]' // Sunshine                      };                    case Shellos:                  case Gastrodon:                      return new[]                      {                          forms[422]' // West                          forms[911]' // East                      };                    case Rotom:                      return new[]                      {                          types[000]' // Normal                          forms[917]' // Heat                          forms[918]' // Wash                          forms[919]' // Frost                          forms[920]' // Fan                          forms[921]' // Mow                      };                    case Giratina:                      return new[]                      {                          forms[487]' // Altered                          forms[922]' // Origin                      };                    case Shaymin:                      return new[]                      {                          forms[492]' // Land                          forms[923]' // Sky                      };                    case Arceus:                  case Silvally:                      return GetFormsArceus(generation' types);              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsGen4,The following statement contains a magic number: switch ((Species)species)              {                  default:                      return EMPTY;                    case Burmy:                  case Wormadam:                  case Mothim:                      return new[]                      {                          forms[412]' // Plant                          forms[905]' // Sandy                          forms[906]' // Trash                      };                    case Cherrim:                      return new[]                      {                          forms[421]' // Overcast                          forms[909]' // Sunshine                      };                    case Shellos:                  case Gastrodon:                      return new[]                      {                          forms[422]' // West                          forms[911]' // East                      };                    case Rotom:                      return new[]                      {                          types[000]' // Normal                          forms[917]' // Heat                          forms[918]' // Wash                          forms[919]' // Frost                          forms[920]' // Fan                          forms[921]' // Mow                      };                    case Giratina:                      return new[]                      {                          forms[487]' // Altered                          forms[922]' // Origin                      };                    case Shaymin:                      return new[]                      {                          forms[492]' // Land                          forms[923]' // Sky                      };                    case Arceus:                  case Silvally:                      return GetFormsArceus(generation' types);              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsGen4,The following statement contains a magic number: switch ((Species)species)              {                  default:                      return EMPTY;                    case Burmy:                  case Wormadam:                  case Mothim:                      return new[]                      {                          forms[412]' // Plant                          forms[905]' // Sandy                          forms[906]' // Trash                      };                    case Cherrim:                      return new[]                      {                          forms[421]' // Overcast                          forms[909]' // Sunshine                      };                    case Shellos:                  case Gastrodon:                      return new[]                      {                          forms[422]' // West                          forms[911]' // East                      };                    case Rotom:                      return new[]                      {                          types[000]' // Normal                          forms[917]' // Heat                          forms[918]' // Wash                          forms[919]' // Frost                          forms[920]' // Fan                          forms[921]' // Mow                      };                    case Giratina:                      return new[]                      {                          forms[487]' // Altered                          forms[922]' // Origin                      };                    case Shaymin:                      return new[]                      {                          forms[492]' // Land                          forms[923]' // Sky                      };                    case Arceus:                  case Silvally:                      return GetFormsArceus(generation' types);              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsGen4,The following statement contains a magic number: switch ((Species)species)              {                  default:                      return EMPTY;                    case Burmy:                  case Wormadam:                  case Mothim:                      return new[]                      {                          forms[412]' // Plant                          forms[905]' // Sandy                          forms[906]' // Trash                      };                    case Cherrim:                      return new[]                      {                          forms[421]' // Overcast                          forms[909]' // Sunshine                      };                    case Shellos:                  case Gastrodon:                      return new[]                      {                          forms[422]' // West                          forms[911]' // East                      };                    case Rotom:                      return new[]                      {                          types[000]' // Normal                          forms[917]' // Heat                          forms[918]' // Wash                          forms[919]' // Frost                          forms[920]' // Fan                          forms[921]' // Mow                      };                    case Giratina:                      return new[]                      {                          forms[487]' // Altered                          forms[922]' // Origin                      };                    case Shaymin:                      return new[]                      {                          forms[492]' // Land                          forms[923]' // Sky                      };                    case Arceus:                  case Silvally:                      return GetFormsArceus(generation' types);              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsGen4,The following statement contains a magic number: switch ((Species)species)              {                  default:                      return EMPTY;                    case Burmy:                  case Wormadam:                  case Mothim:                      return new[]                      {                          forms[412]' // Plant                          forms[905]' // Sandy                          forms[906]' // Trash                      };                    case Cherrim:                      return new[]                      {                          forms[421]' // Overcast                          forms[909]' // Sunshine                      };                    case Shellos:                  case Gastrodon:                      return new[]                      {                          forms[422]' // West                          forms[911]' // East                      };                    case Rotom:                      return new[]                      {                          types[000]' // Normal                          forms[917]' // Heat                          forms[918]' // Wash                          forms[919]' // Frost                          forms[920]' // Fan                          forms[921]' // Mow                      };                    case Giratina:                      return new[]                      {                          forms[487]' // Altered                          forms[922]' // Origin                      };                    case Shaymin:                      return new[]                      {                          forms[492]' // Land                          forms[923]' // Sky                      };                    case Arceus:                  case Silvally:                      return GetFormsArceus(generation' types);              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsGen4,The following statement contains a magic number: switch ((Species)species)              {                  default:                      return EMPTY;                    case Burmy:                  case Wormadam:                  case Mothim:                      return new[]                      {                          forms[412]' // Plant                          forms[905]' // Sandy                          forms[906]' // Trash                      };                    case Cherrim:                      return new[]                      {                          forms[421]' // Overcast                          forms[909]' // Sunshine                      };                    case Shellos:                  case Gastrodon:                      return new[]                      {                          forms[422]' // West                          forms[911]' // East                      };                    case Rotom:                      return new[]                      {                          types[000]' // Normal                          forms[917]' // Heat                          forms[918]' // Wash                          forms[919]' // Frost                          forms[920]' // Fan                          forms[921]' // Mow                      };                    case Giratina:                      return new[]                      {                          forms[487]' // Altered                          forms[922]' // Origin                      };                    case Shaymin:                      return new[]                      {                          forms[492]' // Land                          forms[923]' // Sky                      };                    case Arceus:                  case Silvally:                      return GetFormsArceus(generation' types);              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsGen4,The following statement contains a magic number: switch ((Species)species)              {                  default:                      return EMPTY;                    case Burmy:                  case Wormadam:                  case Mothim:                      return new[]                      {                          forms[412]' // Plant                          forms[905]' // Sandy                          forms[906]' // Trash                      };                    case Cherrim:                      return new[]                      {                          forms[421]' // Overcast                          forms[909]' // Sunshine                      };                    case Shellos:                  case Gastrodon:                      return new[]                      {                          forms[422]' // West                          forms[911]' // East                      };                    case Rotom:                      return new[]                      {                          types[000]' // Normal                          forms[917]' // Heat                          forms[918]' // Wash                          forms[919]' // Frost                          forms[920]' // Fan                          forms[921]' // Mow                      };                    case Giratina:                      return new[]                      {                          forms[487]' // Altered                          forms[922]' // Origin                      };                    case Shaymin:                      return new[]                      {                          forms[492]' // Land                          forms[923]' // Sky                      };                    case Arceus:                  case Silvally:                      return GetFormsArceus(generation' types);              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsGen4,The following statement contains a magic number: switch ((Species)species)              {                  default:                      return EMPTY;                    case Burmy:                  case Wormadam:                  case Mothim:                      return new[]                      {                          forms[412]' // Plant                          forms[905]' // Sandy                          forms[906]' // Trash                      };                    case Cherrim:                      return new[]                      {                          forms[421]' // Overcast                          forms[909]' // Sunshine                      };                    case Shellos:                  case Gastrodon:                      return new[]                      {                          forms[422]' // West                          forms[911]' // East                      };                    case Rotom:                      return new[]                      {                          types[000]' // Normal                          forms[917]' // Heat                          forms[918]' // Wash                          forms[919]' // Frost                          forms[920]' // Fan                          forms[921]' // Mow                      };                    case Giratina:                      return new[]                      {                          forms[487]' // Altered                          forms[922]' // Origin                      };                    case Shaymin:                      return new[]                      {                          forms[492]' // Land                          forms[923]' // Sky                      };                    case Arceus:                  case Silvally:                      return GetFormsArceus(generation' types);              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsGen4,The following statement contains a magic number: switch ((Species)species)              {                  default:                      return EMPTY;                    case Burmy:                  case Wormadam:                  case Mothim:                      return new[]                      {                          forms[412]' // Plant                          forms[905]' // Sandy                          forms[906]' // Trash                      };                    case Cherrim:                      return new[]                      {                          forms[421]' // Overcast                          forms[909]' // Sunshine                      };                    case Shellos:                  case Gastrodon:                      return new[]                      {                          forms[422]' // West                          forms[911]' // East                      };                    case Rotom:                      return new[]                      {                          types[000]' // Normal                          forms[917]' // Heat                          forms[918]' // Wash                          forms[919]' // Frost                          forms[920]' // Fan                          forms[921]' // Mow                      };                    case Giratina:                      return new[]                      {                          forms[487]' // Altered                          forms[922]' // Origin                      };                    case Shaymin:                      return new[]                      {                          forms[492]' // Land                          forms[923]' // Sky                      };                    case Arceus:                  case Silvally:                      return GetFormsArceus(generation' types);              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsGen4,The following statement contains a magic number: switch ((Species)species)              {                  default:                      return EMPTY;                    case Burmy:                  case Wormadam:                  case Mothim:                      return new[]                      {                          forms[412]' // Plant                          forms[905]' // Sandy                          forms[906]' // Trash                      };                    case Cherrim:                      return new[]                      {                          forms[421]' // Overcast                          forms[909]' // Sunshine                      };                    case Shellos:                  case Gastrodon:                      return new[]                      {                          forms[422]' // West                          forms[911]' // East                      };                    case Rotom:                      return new[]                      {                          types[000]' // Normal                          forms[917]' // Heat                          forms[918]' // Wash                          forms[919]' // Frost                          forms[920]' // Fan                          forms[921]' // Mow                      };                    case Giratina:                      return new[]                      {                          forms[487]' // Altered                          forms[922]' // Origin                      };                    case Shaymin:                      return new[]                      {                          forms[492]' // Land                          forms[923]' // Sky                      };                    case Arceus:                  case Silvally:                      return GetFormsArceus(generation' types);              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsGen4,The following statement contains a magic number: switch ((Species)species)              {                  default:                      return EMPTY;                    case Burmy:                  case Wormadam:                  case Mothim:                      return new[]                      {                          forms[412]' // Plant                          forms[905]' // Sandy                          forms[906]' // Trash                      };                    case Cherrim:                      return new[]                      {                          forms[421]' // Overcast                          forms[909]' // Sunshine                      };                    case Shellos:                  case Gastrodon:                      return new[]                      {                          forms[422]' // West                          forms[911]' // East                      };                    case Rotom:                      return new[]                      {                          types[000]' // Normal                          forms[917]' // Heat                          forms[918]' // Wash                          forms[919]' // Frost                          forms[920]' // Fan                          forms[921]' // Mow                      };                    case Giratina:                      return new[]                      {                          forms[487]' // Altered                          forms[922]' // Origin                      };                    case Shaymin:                      return new[]                      {                          forms[492]' // Land                          forms[923]' // Sky                      };                    case Arceus:                  case Silvally:                      return GetFormsArceus(generation' types);              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsGen4,The following statement contains a magic number: switch ((Species)species)              {                  default:                      return EMPTY;                    case Burmy:                  case Wormadam:                  case Mothim:                      return new[]                      {                          forms[412]' // Plant                          forms[905]' // Sandy                          forms[906]' // Trash                      };                    case Cherrim:                      return new[]                      {                          forms[421]' // Overcast                          forms[909]' // Sunshine                      };                    case Shellos:                  case Gastrodon:                      return new[]                      {                          forms[422]' // West                          forms[911]' // East                      };                    case Rotom:                      return new[]                      {                          types[000]' // Normal                          forms[917]' // Heat                          forms[918]' // Wash                          forms[919]' // Frost                          forms[920]' // Fan                          forms[921]' // Mow                      };                    case Giratina:                      return new[]                      {                          forms[487]' // Altered                          forms[922]' // Origin                      };                    case Shaymin:                      return new[]                      {                          forms[492]' // Land                          forms[923]' // Sky                      };                    case Arceus:                  case Silvally:                      return GetFormsArceus(generation' types);              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsGen4,The following statement contains a magic number: switch ((Species)species)              {                  default:                      return EMPTY;                    case Burmy:                  case Wormadam:                  case Mothim:                      return new[]                      {                          forms[412]' // Plant                          forms[905]' // Sandy                          forms[906]' // Trash                      };                    case Cherrim:                      return new[]                      {                          forms[421]' // Overcast                          forms[909]' // Sunshine                      };                    case Shellos:                  case Gastrodon:                      return new[]                      {                          forms[422]' // West                          forms[911]' // East                      };                    case Rotom:                      return new[]                      {                          types[000]' // Normal                          forms[917]' // Heat                          forms[918]' // Wash                          forms[919]' // Frost                          forms[920]' // Fan                          forms[921]' // Mow                      };                    case Giratina:                      return new[]                      {                          forms[487]' // Altered                          forms[922]' // Origin                      };                    case Shaymin:                      return new[]                      {                          forms[492]' // Land                          forms[923]' // Sky                      };                    case Arceus:                  case Silvally:                      return GetFormsArceus(generation' types);              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsGen4,The following statement contains a magic number: switch ((Species)species)              {                  default:                      return EMPTY;                    case Burmy:                  case Wormadam:                  case Mothim:                      return new[]                      {                          forms[412]' // Plant                          forms[905]' // Sandy                          forms[906]' // Trash                      };                    case Cherrim:                      return new[]                      {                          forms[421]' // Overcast                          forms[909]' // Sunshine                      };                    case Shellos:                  case Gastrodon:                      return new[]                      {                          forms[422]' // West                          forms[911]' // East                      };                    case Rotom:                      return new[]                      {                          types[000]' // Normal                          forms[917]' // Heat                          forms[918]' // Wash                          forms[919]' // Frost                          forms[920]' // Fan                          forms[921]' // Mow                      };                    case Giratina:                      return new[]                      {                          forms[487]' // Altered                          forms[922]' // Origin                      };                    case Shaymin:                      return new[]                      {                          forms[492]' // Land                          forms[923]' // Sky                      };                    case Arceus:                  case Silvally:                      return GetFormsArceus(generation' types);              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsGen4,The following statement contains a magic number: switch ((Species)species)              {                  default:                      return EMPTY;                    case Burmy:                  case Wormadam:                  case Mothim:                      return new[]                      {                          forms[412]' // Plant                          forms[905]' // Sandy                          forms[906]' // Trash                      };                    case Cherrim:                      return new[]                      {                          forms[421]' // Overcast                          forms[909]' // Sunshine                      };                    case Shellos:                  case Gastrodon:                      return new[]                      {                          forms[422]' // West                          forms[911]' // East                      };                    case Rotom:                      return new[]                      {                          types[000]' // Normal                          forms[917]' // Heat                          forms[918]' // Wash                          forms[919]' // Frost                          forms[920]' // Fan                          forms[921]' // Mow                      };                    case Giratina:                      return new[]                      {                          forms[487]' // Altered                          forms[922]' // Origin                      };                    case Shaymin:                      return new[]                      {                          forms[492]' // Land                          forms[923]' // Sky                      };                    case Arceus:                  case Silvally:                      return GetFormsArceus(generation' types);              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsGen4,The following statement contains a magic number: switch ((Species)species)              {                  default:                      return EMPTY;                    case Burmy:                  case Wormadam:                  case Mothim:                      return new[]                      {                          forms[412]' // Plant                          forms[905]' // Sandy                          forms[906]' // Trash                      };                    case Cherrim:                      return new[]                      {                          forms[421]' // Overcast                          forms[909]' // Sunshine                      };                    case Shellos:                  case Gastrodon:                      return new[]                      {                          forms[422]' // West                          forms[911]' // East                      };                    case Rotom:                      return new[]                      {                          types[000]' // Normal                          forms[917]' // Heat                          forms[918]' // Wash                          forms[919]' // Frost                          forms[920]' // Fan                          forms[921]' // Mow                      };                    case Giratina:                      return new[]                      {                          forms[487]' // Altered                          forms[922]' // Origin                      };                    case Shaymin:                      return new[]                      {                          forms[492]' // Land                          forms[923]' // Sky                      };                    case Arceus:                  case Silvally:                      return GetFormsArceus(generation' types);              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsGen5,The following statement contains a magic number: switch ((Species)species)              {                  default:                      return EMPTY;                    case Basculin:                      return new[]                      {                          forms[550]' // Red                          forms[942]' // Blue                      };                    case Darumaka when generation >= 8:                      return GetFormsGalar(types' forms);                    case Darmanitan:                  {                      if (generation <= 7)                      {                          return new[]                          {                              forms[555]' // Standard                              forms[943]' // Zen                          };                      }                      return new[]                      {                          types[0] + " " + forms[555]' // Standard                          types[0] + " " + forms[943]' // Zen                          forms[Galarian] + " " + forms[555]' // Standard                          forms[Galarian] + " " + forms[943]' // Zen                      };                  }                    case Yamask when generation >= 8:                      return GetFormsGalar(types' forms);                    case Deerling:                  case Sawsbuck:                      return new[]                      {                          forms[585]' // Spring                          forms[947]' // Summer                          forms[948]' // Autumn                          forms[949]' // Winter                      };                    case Stunfisk when generation >= 8:                      return GetFormsGalar(types' forms);                    case Tornadus:                  case Thundurus:                  case Landorus:                      return new[]                      {                          forms[641]' // Incarnate                          forms[952]' // Therian                      };                    case Kyurem:                      return new[]                      {                          types[000]' // Normal                          forms[953]' // White                          forms[954]' // Black                      };                    case Keldeo:                      return new[]                      {                          forms[647]' // Ordinary                          forms[955]' // Resolute                      };                    case Meloetta:                      return new[]                      {                          forms[648]' // Aria                          forms[956]' // Pirouette                      };                    case Genesect:                      return new[]                      {                          types[000]' // Normal                          types[010]' // Douse (Water)                          types[012]' // Shock (Electric)                          types[009]' // Burn (Fire)                          types[014]' // Chill (Ice)                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsGen5,The following statement contains a magic number: switch ((Species)species)              {                  default:                      return EMPTY;                    case Basculin:                      return new[]                      {                          forms[550]' // Red                          forms[942]' // Blue                      };                    case Darumaka when generation >= 8:                      return GetFormsGalar(types' forms);                    case Darmanitan:                  {                      if (generation <= 7)                      {                          return new[]                          {                              forms[555]' // Standard                              forms[943]' // Zen                          };                      }                      return new[]                      {                          types[0] + " " + forms[555]' // Standard                          types[0] + " " + forms[943]' // Zen                          forms[Galarian] + " " + forms[555]' // Standard                          forms[Galarian] + " " + forms[943]' // Zen                      };                  }                    case Yamask when generation >= 8:                      return GetFormsGalar(types' forms);                    case Deerling:                  case Sawsbuck:                      return new[]                      {                          forms[585]' // Spring                          forms[947]' // Summer                          forms[948]' // Autumn                          forms[949]' // Winter                      };                    case Stunfisk when generation >= 8:                      return GetFormsGalar(types' forms);                    case Tornadus:                  case Thundurus:                  case Landorus:                      return new[]                      {                          forms[641]' // Incarnate                          forms[952]' // Therian                      };                    case Kyurem:                      return new[]                      {                          types[000]' // Normal                          forms[953]' // White                          forms[954]' // Black                      };                    case Keldeo:                      return new[]                      {                          forms[647]' // Ordinary                          forms[955]' // Resolute                      };                    case Meloetta:                      return new[]                      {                          forms[648]' // Aria                          forms[956]' // Pirouette                      };                    case Genesect:                      return new[]                      {                          types[000]' // Normal                          types[010]' // Douse (Water)                          types[012]' // Shock (Electric)                          types[009]' // Burn (Fire)                          types[014]' // Chill (Ice)                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsGen5,The following statement contains a magic number: switch ((Species)species)              {                  default:                      return EMPTY;                    case Basculin:                      return new[]                      {                          forms[550]' // Red                          forms[942]' // Blue                      };                    case Darumaka when generation >= 8:                      return GetFormsGalar(types' forms);                    case Darmanitan:                  {                      if (generation <= 7)                      {                          return new[]                          {                              forms[555]' // Standard                              forms[943]' // Zen                          };                      }                      return new[]                      {                          types[0] + " " + forms[555]' // Standard                          types[0] + " " + forms[943]' // Zen                          forms[Galarian] + " " + forms[555]' // Standard                          forms[Galarian] + " " + forms[943]' // Zen                      };                  }                    case Yamask when generation >= 8:                      return GetFormsGalar(types' forms);                    case Deerling:                  case Sawsbuck:                      return new[]                      {                          forms[585]' // Spring                          forms[947]' // Summer                          forms[948]' // Autumn                          forms[949]' // Winter                      };                    case Stunfisk when generation >= 8:                      return GetFormsGalar(types' forms);                    case Tornadus:                  case Thundurus:                  case Landorus:                      return new[]                      {                          forms[641]' // Incarnate                          forms[952]' // Therian                      };                    case Kyurem:                      return new[]                      {                          types[000]' // Normal                          forms[953]' // White                          forms[954]' // Black                      };                    case Keldeo:                      return new[]                      {                          forms[647]' // Ordinary                          forms[955]' // Resolute                      };                    case Meloetta:                      return new[]                      {                          forms[648]' // Aria                          forms[956]' // Pirouette                      };                    case Genesect:                      return new[]                      {                          types[000]' // Normal                          types[010]' // Douse (Water)                          types[012]' // Shock (Electric)                          types[009]' // Burn (Fire)                          types[014]' // Chill (Ice)                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsGen5,The following statement contains a magic number: switch ((Species)species)              {                  default:                      return EMPTY;                    case Basculin:                      return new[]                      {                          forms[550]' // Red                          forms[942]' // Blue                      };                    case Darumaka when generation >= 8:                      return GetFormsGalar(types' forms);                    case Darmanitan:                  {                      if (generation <= 7)                      {                          return new[]                          {                              forms[555]' // Standard                              forms[943]' // Zen                          };                      }                      return new[]                      {                          types[0] + " " + forms[555]' // Standard                          types[0] + " " + forms[943]' // Zen                          forms[Galarian] + " " + forms[555]' // Standard                          forms[Galarian] + " " + forms[943]' // Zen                      };                  }                    case Yamask when generation >= 8:                      return GetFormsGalar(types' forms);                    case Deerling:                  case Sawsbuck:                      return new[]                      {                          forms[585]' // Spring                          forms[947]' // Summer                          forms[948]' // Autumn                          forms[949]' // Winter                      };                    case Stunfisk when generation >= 8:                      return GetFormsGalar(types' forms);                    case Tornadus:                  case Thundurus:                  case Landorus:                      return new[]                      {                          forms[641]' // Incarnate                          forms[952]' // Therian                      };                    case Kyurem:                      return new[]                      {                          types[000]' // Normal                          forms[953]' // White                          forms[954]' // Black                      };                    case Keldeo:                      return new[]                      {                          forms[647]' // Ordinary                          forms[955]' // Resolute                      };                    case Meloetta:                      return new[]                      {                          forms[648]' // Aria                          forms[956]' // Pirouette                      };                    case Genesect:                      return new[]                      {                          types[000]' // Normal                          types[010]' // Douse (Water)                          types[012]' // Shock (Electric)                          types[009]' // Burn (Fire)                          types[014]' // Chill (Ice)                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsGen5,The following statement contains a magic number: switch ((Species)species)              {                  default:                      return EMPTY;                    case Basculin:                      return new[]                      {                          forms[550]' // Red                          forms[942]' // Blue                      };                    case Darumaka when generation >= 8:                      return GetFormsGalar(types' forms);                    case Darmanitan:                  {                      if (generation <= 7)                      {                          return new[]                          {                              forms[555]' // Standard                              forms[943]' // Zen                          };                      }                      return new[]                      {                          types[0] + " " + forms[555]' // Standard                          types[0] + " " + forms[943]' // Zen                          forms[Galarian] + " " + forms[555]' // Standard                          forms[Galarian] + " " + forms[943]' // Zen                      };                  }                    case Yamask when generation >= 8:                      return GetFormsGalar(types' forms);                    case Deerling:                  case Sawsbuck:                      return new[]                      {                          forms[585]' // Spring                          forms[947]' // Summer                          forms[948]' // Autumn                          forms[949]' // Winter                      };                    case Stunfisk when generation >= 8:                      return GetFormsGalar(types' forms);                    case Tornadus:                  case Thundurus:                  case Landorus:                      return new[]                      {                          forms[641]' // Incarnate                          forms[952]' // Therian                      };                    case Kyurem:                      return new[]                      {                          types[000]' // Normal                          forms[953]' // White                          forms[954]' // Black                      };                    case Keldeo:                      return new[]                      {                          forms[647]' // Ordinary                          forms[955]' // Resolute                      };                    case Meloetta:                      return new[]                      {                          forms[648]' // Aria                          forms[956]' // Pirouette                      };                    case Genesect:                      return new[]                      {                          types[000]' // Normal                          types[010]' // Douse (Water)                          types[012]' // Shock (Electric)                          types[009]' // Burn (Fire)                          types[014]' // Chill (Ice)                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsGen5,The following statement contains a magic number: switch ((Species)species)              {                  default:                      return EMPTY;                    case Basculin:                      return new[]                      {                          forms[550]' // Red                          forms[942]' // Blue                      };                    case Darumaka when generation >= 8:                      return GetFormsGalar(types' forms);                    case Darmanitan:                  {                      if (generation <= 7)                      {                          return new[]                          {                              forms[555]' // Standard                              forms[943]' // Zen                          };                      }                      return new[]                      {                          types[0] + " " + forms[555]' // Standard                          types[0] + " " + forms[943]' // Zen                          forms[Galarian] + " " + forms[555]' // Standard                          forms[Galarian] + " " + forms[943]' // Zen                      };                  }                    case Yamask when generation >= 8:                      return GetFormsGalar(types' forms);                    case Deerling:                  case Sawsbuck:                      return new[]                      {                          forms[585]' // Spring                          forms[947]' // Summer                          forms[948]' // Autumn                          forms[949]' // Winter                      };                    case Stunfisk when generation >= 8:                      return GetFormsGalar(types' forms);                    case Tornadus:                  case Thundurus:                  case Landorus:                      return new[]                      {                          forms[641]' // Incarnate                          forms[952]' // Therian                      };                    case Kyurem:                      return new[]                      {                          types[000]' // Normal                          forms[953]' // White                          forms[954]' // Black                      };                    case Keldeo:                      return new[]                      {                          forms[647]' // Ordinary                          forms[955]' // Resolute                      };                    case Meloetta:                      return new[]                      {                          forms[648]' // Aria                          forms[956]' // Pirouette                      };                    case Genesect:                      return new[]                      {                          types[000]' // Normal                          types[010]' // Douse (Water)                          types[012]' // Shock (Electric)                          types[009]' // Burn (Fire)                          types[014]' // Chill (Ice)                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsGen5,The following statement contains a magic number: switch ((Species)species)              {                  default:                      return EMPTY;                    case Basculin:                      return new[]                      {                          forms[550]' // Red                          forms[942]' // Blue                      };                    case Darumaka when generation >= 8:                      return GetFormsGalar(types' forms);                    case Darmanitan:                  {                      if (generation <= 7)                      {                          return new[]                          {                              forms[555]' // Standard                              forms[943]' // Zen                          };                      }                      return new[]                      {                          types[0] + " " + forms[555]' // Standard                          types[0] + " " + forms[943]' // Zen                          forms[Galarian] + " " + forms[555]' // Standard                          forms[Galarian] + " " + forms[943]' // Zen                      };                  }                    case Yamask when generation >= 8:                      return GetFormsGalar(types' forms);                    case Deerling:                  case Sawsbuck:                      return new[]                      {                          forms[585]' // Spring                          forms[947]' // Summer                          forms[948]' // Autumn                          forms[949]' // Winter                      };                    case Stunfisk when generation >= 8:                      return GetFormsGalar(types' forms);                    case Tornadus:                  case Thundurus:                  case Landorus:                      return new[]                      {                          forms[641]' // Incarnate                          forms[952]' // Therian                      };                    case Kyurem:                      return new[]                      {                          types[000]' // Normal                          forms[953]' // White                          forms[954]' // Black                      };                    case Keldeo:                      return new[]                      {                          forms[647]' // Ordinary                          forms[955]' // Resolute                      };                    case Meloetta:                      return new[]                      {                          forms[648]' // Aria                          forms[956]' // Pirouette                      };                    case Genesect:                      return new[]                      {                          types[000]' // Normal                          types[010]' // Douse (Water)                          types[012]' // Shock (Electric)                          types[009]' // Burn (Fire)                          types[014]' // Chill (Ice)                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsGen5,The following statement contains a magic number: switch ((Species)species)              {                  default:                      return EMPTY;                    case Basculin:                      return new[]                      {                          forms[550]' // Red                          forms[942]' // Blue                      };                    case Darumaka when generation >= 8:                      return GetFormsGalar(types' forms);                    case Darmanitan:                  {                      if (generation <= 7)                      {                          return new[]                          {                              forms[555]' // Standard                              forms[943]' // Zen                          };                      }                      return new[]                      {                          types[0] + " " + forms[555]' // Standard                          types[0] + " " + forms[943]' // Zen                          forms[Galarian] + " " + forms[555]' // Standard                          forms[Galarian] + " " + forms[943]' // Zen                      };                  }                    case Yamask when generation >= 8:                      return GetFormsGalar(types' forms);                    case Deerling:                  case Sawsbuck:                      return new[]                      {                          forms[585]' // Spring                          forms[947]' // Summer                          forms[948]' // Autumn                          forms[949]' // Winter                      };                    case Stunfisk when generation >= 8:                      return GetFormsGalar(types' forms);                    case Tornadus:                  case Thundurus:                  case Landorus:                      return new[]                      {                          forms[641]' // Incarnate                          forms[952]' // Therian                      };                    case Kyurem:                      return new[]                      {                          types[000]' // Normal                          forms[953]' // White                          forms[954]' // Black                      };                    case Keldeo:                      return new[]                      {                          forms[647]' // Ordinary                          forms[955]' // Resolute                      };                    case Meloetta:                      return new[]                      {                          forms[648]' // Aria                          forms[956]' // Pirouette                      };                    case Genesect:                      return new[]                      {                          types[000]' // Normal                          types[010]' // Douse (Water)                          types[012]' // Shock (Electric)                          types[009]' // Burn (Fire)                          types[014]' // Chill (Ice)                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsGen5,The following statement contains a magic number: switch ((Species)species)              {                  default:                      return EMPTY;                    case Basculin:                      return new[]                      {                          forms[550]' // Red                          forms[942]' // Blue                      };                    case Darumaka when generation >= 8:                      return GetFormsGalar(types' forms);                    case Darmanitan:                  {                      if (generation <= 7)                      {                          return new[]                          {                              forms[555]' // Standard                              forms[943]' // Zen                          };                      }                      return new[]                      {                          types[0] + " " + forms[555]' // Standard                          types[0] + " " + forms[943]' // Zen                          forms[Galarian] + " " + forms[555]' // Standard                          forms[Galarian] + " " + forms[943]' // Zen                      };                  }                    case Yamask when generation >= 8:                      return GetFormsGalar(types' forms);                    case Deerling:                  case Sawsbuck:                      return new[]                      {                          forms[585]' // Spring                          forms[947]' // Summer                          forms[948]' // Autumn                          forms[949]' // Winter                      };                    case Stunfisk when generation >= 8:                      return GetFormsGalar(types' forms);                    case Tornadus:                  case Thundurus:                  case Landorus:                      return new[]                      {                          forms[641]' // Incarnate                          forms[952]' // Therian                      };                    case Kyurem:                      return new[]                      {                          types[000]' // Normal                          forms[953]' // White                          forms[954]' // Black                      };                    case Keldeo:                      return new[]                      {                          forms[647]' // Ordinary                          forms[955]' // Resolute                      };                    case Meloetta:                      return new[]                      {                          forms[648]' // Aria                          forms[956]' // Pirouette                      };                    case Genesect:                      return new[]                      {                          types[000]' // Normal                          types[010]' // Douse (Water)                          types[012]' // Shock (Electric)                          types[009]' // Burn (Fire)                          types[014]' // Chill (Ice)                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsGen5,The following statement contains a magic number: switch ((Species)species)              {                  default:                      return EMPTY;                    case Basculin:                      return new[]                      {                          forms[550]' // Red                          forms[942]' // Blue                      };                    case Darumaka when generation >= 8:                      return GetFormsGalar(types' forms);                    case Darmanitan:                  {                      if (generation <= 7)                      {                          return new[]                          {                              forms[555]' // Standard                              forms[943]' // Zen                          };                      }                      return new[]                      {                          types[0] + " " + forms[555]' // Standard                          types[0] + " " + forms[943]' // Zen                          forms[Galarian] + " " + forms[555]' // Standard                          forms[Galarian] + " " + forms[943]' // Zen                      };                  }                    case Yamask when generation >= 8:                      return GetFormsGalar(types' forms);                    case Deerling:                  case Sawsbuck:                      return new[]                      {                          forms[585]' // Spring                          forms[947]' // Summer                          forms[948]' // Autumn                          forms[949]' // Winter                      };                    case Stunfisk when generation >= 8:                      return GetFormsGalar(types' forms);                    case Tornadus:                  case Thundurus:                  case Landorus:                      return new[]                      {                          forms[641]' // Incarnate                          forms[952]' // Therian                      };                    case Kyurem:                      return new[]                      {                          types[000]' // Normal                          forms[953]' // White                          forms[954]' // Black                      };                    case Keldeo:                      return new[]                      {                          forms[647]' // Ordinary                          forms[955]' // Resolute                      };                    case Meloetta:                      return new[]                      {                          forms[648]' // Aria                          forms[956]' // Pirouette                      };                    case Genesect:                      return new[]                      {                          types[000]' // Normal                          types[010]' // Douse (Water)                          types[012]' // Shock (Electric)                          types[009]' // Burn (Fire)                          types[014]' // Chill (Ice)                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsGen5,The following statement contains a magic number: switch ((Species)species)              {                  default:                      return EMPTY;                    case Basculin:                      return new[]                      {                          forms[550]' // Red                          forms[942]' // Blue                      };                    case Darumaka when generation >= 8:                      return GetFormsGalar(types' forms);                    case Darmanitan:                  {                      if (generation <= 7)                      {                          return new[]                          {                              forms[555]' // Standard                              forms[943]' // Zen                          };                      }                      return new[]                      {                          types[0] + " " + forms[555]' // Standard                          types[0] + " " + forms[943]' // Zen                          forms[Galarian] + " " + forms[555]' // Standard                          forms[Galarian] + " " + forms[943]' // Zen                      };                  }                    case Yamask when generation >= 8:                      return GetFormsGalar(types' forms);                    case Deerling:                  case Sawsbuck:                      return new[]                      {                          forms[585]' // Spring                          forms[947]' // Summer                          forms[948]' // Autumn                          forms[949]' // Winter                      };                    case Stunfisk when generation >= 8:                      return GetFormsGalar(types' forms);                    case Tornadus:                  case Thundurus:                  case Landorus:                      return new[]                      {                          forms[641]' // Incarnate                          forms[952]' // Therian                      };                    case Kyurem:                      return new[]                      {                          types[000]' // Normal                          forms[953]' // White                          forms[954]' // Black                      };                    case Keldeo:                      return new[]                      {                          forms[647]' // Ordinary                          forms[955]' // Resolute                      };                    case Meloetta:                      return new[]                      {                          forms[648]' // Aria                          forms[956]' // Pirouette                      };                    case Genesect:                      return new[]                      {                          types[000]' // Normal                          types[010]' // Douse (Water)                          types[012]' // Shock (Electric)                          types[009]' // Burn (Fire)                          types[014]' // Chill (Ice)                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsGen5,The following statement contains a magic number: switch ((Species)species)              {                  default:                      return EMPTY;                    case Basculin:                      return new[]                      {                          forms[550]' // Red                          forms[942]' // Blue                      };                    case Darumaka when generation >= 8:                      return GetFormsGalar(types' forms);                    case Darmanitan:                  {                      if (generation <= 7)                      {                          return new[]                          {                              forms[555]' // Standard                              forms[943]' // Zen                          };                      }                      return new[]                      {                          types[0] + " " + forms[555]' // Standard                          types[0] + " " + forms[943]' // Zen                          forms[Galarian] + " " + forms[555]' // Standard                          forms[Galarian] + " " + forms[943]' // Zen                      };                  }                    case Yamask when generation >= 8:                      return GetFormsGalar(types' forms);                    case Deerling:                  case Sawsbuck:                      return new[]                      {                          forms[585]' // Spring                          forms[947]' // Summer                          forms[948]' // Autumn                          forms[949]' // Winter                      };                    case Stunfisk when generation >= 8:                      return GetFormsGalar(types' forms);                    case Tornadus:                  case Thundurus:                  case Landorus:                      return new[]                      {                          forms[641]' // Incarnate                          forms[952]' // Therian                      };                    case Kyurem:                      return new[]                      {                          types[000]' // Normal                          forms[953]' // White                          forms[954]' // Black                      };                    case Keldeo:                      return new[]                      {                          forms[647]' // Ordinary                          forms[955]' // Resolute                      };                    case Meloetta:                      return new[]                      {                          forms[648]' // Aria                          forms[956]' // Pirouette                      };                    case Genesect:                      return new[]                      {                          types[000]' // Normal                          types[010]' // Douse (Water)                          types[012]' // Shock (Electric)                          types[009]' // Burn (Fire)                          types[014]' // Chill (Ice)                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsGen5,The following statement contains a magic number: switch ((Species)species)              {                  default:                      return EMPTY;                    case Basculin:                      return new[]                      {                          forms[550]' // Red                          forms[942]' // Blue                      };                    case Darumaka when generation >= 8:                      return GetFormsGalar(types' forms);                    case Darmanitan:                  {                      if (generation <= 7)                      {                          return new[]                          {                              forms[555]' // Standard                              forms[943]' // Zen                          };                      }                      return new[]                      {                          types[0] + " " + forms[555]' // Standard                          types[0] + " " + forms[943]' // Zen                          forms[Galarian] + " " + forms[555]' // Standard                          forms[Galarian] + " " + forms[943]' // Zen                      };                  }                    case Yamask when generation >= 8:                      return GetFormsGalar(types' forms);                    case Deerling:                  case Sawsbuck:                      return new[]                      {                          forms[585]' // Spring                          forms[947]' // Summer                          forms[948]' // Autumn                          forms[949]' // Winter                      };                    case Stunfisk when generation >= 8:                      return GetFormsGalar(types' forms);                    case Tornadus:                  case Thundurus:                  case Landorus:                      return new[]                      {                          forms[641]' // Incarnate                          forms[952]' // Therian                      };                    case Kyurem:                      return new[]                      {                          types[000]' // Normal                          forms[953]' // White                          forms[954]' // Black                      };                    case Keldeo:                      return new[]                      {                          forms[647]' // Ordinary                          forms[955]' // Resolute                      };                    case Meloetta:                      return new[]                      {                          forms[648]' // Aria                          forms[956]' // Pirouette                      };                    case Genesect:                      return new[]                      {                          types[000]' // Normal                          types[010]' // Douse (Water)                          types[012]' // Shock (Electric)                          types[009]' // Burn (Fire)                          types[014]' // Chill (Ice)                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsGen5,The following statement contains a magic number: switch ((Species)species)              {                  default:                      return EMPTY;                    case Basculin:                      return new[]                      {                          forms[550]' // Red                          forms[942]' // Blue                      };                    case Darumaka when generation >= 8:                      return GetFormsGalar(types' forms);                    case Darmanitan:                  {                      if (generation <= 7)                      {                          return new[]                          {                              forms[555]' // Standard                              forms[943]' // Zen                          };                      }                      return new[]                      {                          types[0] + " " + forms[555]' // Standard                          types[0] + " " + forms[943]' // Zen                          forms[Galarian] + " " + forms[555]' // Standard                          forms[Galarian] + " " + forms[943]' // Zen                      };                  }                    case Yamask when generation >= 8:                      return GetFormsGalar(types' forms);                    case Deerling:                  case Sawsbuck:                      return new[]                      {                          forms[585]' // Spring                          forms[947]' // Summer                          forms[948]' // Autumn                          forms[949]' // Winter                      };                    case Stunfisk when generation >= 8:                      return GetFormsGalar(types' forms);                    case Tornadus:                  case Thundurus:                  case Landorus:                      return new[]                      {                          forms[641]' // Incarnate                          forms[952]' // Therian                      };                    case Kyurem:                      return new[]                      {                          types[000]' // Normal                          forms[953]' // White                          forms[954]' // Black                      };                    case Keldeo:                      return new[]                      {                          forms[647]' // Ordinary                          forms[955]' // Resolute                      };                    case Meloetta:                      return new[]                      {                          forms[648]' // Aria                          forms[956]' // Pirouette                      };                    case Genesect:                      return new[]                      {                          types[000]' // Normal                          types[010]' // Douse (Water)                          types[012]' // Shock (Electric)                          types[009]' // Burn (Fire)                          types[014]' // Chill (Ice)                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsGen5,The following statement contains a magic number: switch ((Species)species)              {                  default:                      return EMPTY;                    case Basculin:                      return new[]                      {                          forms[550]' // Red                          forms[942]' // Blue                      };                    case Darumaka when generation >= 8:                      return GetFormsGalar(types' forms);                    case Darmanitan:                  {                      if (generation <= 7)                      {                          return new[]                          {                              forms[555]' // Standard                              forms[943]' // Zen                          };                      }                      return new[]                      {                          types[0] + " " + forms[555]' // Standard                          types[0] + " " + forms[943]' // Zen                          forms[Galarian] + " " + forms[555]' // Standard                          forms[Galarian] + " " + forms[943]' // Zen                      };                  }                    case Yamask when generation >= 8:                      return GetFormsGalar(types' forms);                    case Deerling:                  case Sawsbuck:                      return new[]                      {                          forms[585]' // Spring                          forms[947]' // Summer                          forms[948]' // Autumn                          forms[949]' // Winter                      };                    case Stunfisk when generation >= 8:                      return GetFormsGalar(types' forms);                    case Tornadus:                  case Thundurus:                  case Landorus:                      return new[]                      {                          forms[641]' // Incarnate                          forms[952]' // Therian                      };                    case Kyurem:                      return new[]                      {                          types[000]' // Normal                          forms[953]' // White                          forms[954]' // Black                      };                    case Keldeo:                      return new[]                      {                          forms[647]' // Ordinary                          forms[955]' // Resolute                      };                    case Meloetta:                      return new[]                      {                          forms[648]' // Aria                          forms[956]' // Pirouette                      };                    case Genesect:                      return new[]                      {                          types[000]' // Normal                          types[010]' // Douse (Water)                          types[012]' // Shock (Electric)                          types[009]' // Burn (Fire)                          types[014]' // Chill (Ice)                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsGen5,The following statement contains a magic number: switch ((Species)species)              {                  default:                      return EMPTY;                    case Basculin:                      return new[]                      {                          forms[550]' // Red                          forms[942]' // Blue                      };                    case Darumaka when generation >= 8:                      return GetFormsGalar(types' forms);                    case Darmanitan:                  {                      if (generation <= 7)                      {                          return new[]                          {                              forms[555]' // Standard                              forms[943]' // Zen                          };                      }                      return new[]                      {                          types[0] + " " + forms[555]' // Standard                          types[0] + " " + forms[943]' // Zen                          forms[Galarian] + " " + forms[555]' // Standard                          forms[Galarian] + " " + forms[943]' // Zen                      };                  }                    case Yamask when generation >= 8:                      return GetFormsGalar(types' forms);                    case Deerling:                  case Sawsbuck:                      return new[]                      {                          forms[585]' // Spring                          forms[947]' // Summer                          forms[948]' // Autumn                          forms[949]' // Winter                      };                    case Stunfisk when generation >= 8:                      return GetFormsGalar(types' forms);                    case Tornadus:                  case Thundurus:                  case Landorus:                      return new[]                      {                          forms[641]' // Incarnate                          forms[952]' // Therian                      };                    case Kyurem:                      return new[]                      {                          types[000]' // Normal                          forms[953]' // White                          forms[954]' // Black                      };                    case Keldeo:                      return new[]                      {                          forms[647]' // Ordinary                          forms[955]' // Resolute                      };                    case Meloetta:                      return new[]                      {                          forms[648]' // Aria                          forms[956]' // Pirouette                      };                    case Genesect:                      return new[]                      {                          types[000]' // Normal                          types[010]' // Douse (Water)                          types[012]' // Shock (Electric)                          types[009]' // Burn (Fire)                          types[014]' // Chill (Ice)                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsGen5,The following statement contains a magic number: switch ((Species)species)              {                  default:                      return EMPTY;                    case Basculin:                      return new[]                      {                          forms[550]' // Red                          forms[942]' // Blue                      };                    case Darumaka when generation >= 8:                      return GetFormsGalar(types' forms);                    case Darmanitan:                  {                      if (generation <= 7)                      {                          return new[]                          {                              forms[555]' // Standard                              forms[943]' // Zen                          };                      }                      return new[]                      {                          types[0] + " " + forms[555]' // Standard                          types[0] + " " + forms[943]' // Zen                          forms[Galarian] + " " + forms[555]' // Standard                          forms[Galarian] + " " + forms[943]' // Zen                      };                  }                    case Yamask when generation >= 8:                      return GetFormsGalar(types' forms);                    case Deerling:                  case Sawsbuck:                      return new[]                      {                          forms[585]' // Spring                          forms[947]' // Summer                          forms[948]' // Autumn                          forms[949]' // Winter                      };                    case Stunfisk when generation >= 8:                      return GetFormsGalar(types' forms);                    case Tornadus:                  case Thundurus:                  case Landorus:                      return new[]                      {                          forms[641]' // Incarnate                          forms[952]' // Therian                      };                    case Kyurem:                      return new[]                      {                          types[000]' // Normal                          forms[953]' // White                          forms[954]' // Black                      };                    case Keldeo:                      return new[]                      {                          forms[647]' // Ordinary                          forms[955]' // Resolute                      };                    case Meloetta:                      return new[]                      {                          forms[648]' // Aria                          forms[956]' // Pirouette                      };                    case Genesect:                      return new[]                      {                          types[000]' // Normal                          types[010]' // Douse (Water)                          types[012]' // Shock (Electric)                          types[009]' // Burn (Fire)                          types[014]' // Chill (Ice)                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsGen5,The following statement contains a magic number: switch ((Species)species)              {                  default:                      return EMPTY;                    case Basculin:                      return new[]                      {                          forms[550]' // Red                          forms[942]' // Blue                      };                    case Darumaka when generation >= 8:                      return GetFormsGalar(types' forms);                    case Darmanitan:                  {                      if (generation <= 7)                      {                          return new[]                          {                              forms[555]' // Standard                              forms[943]' // Zen                          };                      }                      return new[]                      {                          types[0] + " " + forms[555]' // Standard                          types[0] + " " + forms[943]' // Zen                          forms[Galarian] + " " + forms[555]' // Standard                          forms[Galarian] + " " + forms[943]' // Zen                      };                  }                    case Yamask when generation >= 8:                      return GetFormsGalar(types' forms);                    case Deerling:                  case Sawsbuck:                      return new[]                      {                          forms[585]' // Spring                          forms[947]' // Summer                          forms[948]' // Autumn                          forms[949]' // Winter                      };                    case Stunfisk when generation >= 8:                      return GetFormsGalar(types' forms);                    case Tornadus:                  case Thundurus:                  case Landorus:                      return new[]                      {                          forms[641]' // Incarnate                          forms[952]' // Therian                      };                    case Kyurem:                      return new[]                      {                          types[000]' // Normal                          forms[953]' // White                          forms[954]' // Black                      };                    case Keldeo:                      return new[]                      {                          forms[647]' // Ordinary                          forms[955]' // Resolute                      };                    case Meloetta:                      return new[]                      {                          forms[648]' // Aria                          forms[956]' // Pirouette                      };                    case Genesect:                      return new[]                      {                          types[000]' // Normal                          types[010]' // Douse (Water)                          types[012]' // Shock (Electric)                          types[009]' // Burn (Fire)                          types[014]' // Chill (Ice)                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsGen5,The following statement contains a magic number: switch ((Species)species)              {                  default:                      return EMPTY;                    case Basculin:                      return new[]                      {                          forms[550]' // Red                          forms[942]' // Blue                      };                    case Darumaka when generation >= 8:                      return GetFormsGalar(types' forms);                    case Darmanitan:                  {                      if (generation <= 7)                      {                          return new[]                          {                              forms[555]' // Standard                              forms[943]' // Zen                          };                      }                      return new[]                      {                          types[0] + " " + forms[555]' // Standard                          types[0] + " " + forms[943]' // Zen                          forms[Galarian] + " " + forms[555]' // Standard                          forms[Galarian] + " " + forms[943]' // Zen                      };                  }                    case Yamask when generation >= 8:                      return GetFormsGalar(types' forms);                    case Deerling:                  case Sawsbuck:                      return new[]                      {                          forms[585]' // Spring                          forms[947]' // Summer                          forms[948]' // Autumn                          forms[949]' // Winter                      };                    case Stunfisk when generation >= 8:                      return GetFormsGalar(types' forms);                    case Tornadus:                  case Thundurus:                  case Landorus:                      return new[]                      {                          forms[641]' // Incarnate                          forms[952]' // Therian                      };                    case Kyurem:                      return new[]                      {                          types[000]' // Normal                          forms[953]' // White                          forms[954]' // Black                      };                    case Keldeo:                      return new[]                      {                          forms[647]' // Ordinary                          forms[955]' // Resolute                      };                    case Meloetta:                      return new[]                      {                          forms[648]' // Aria                          forms[956]' // Pirouette                      };                    case Genesect:                      return new[]                      {                          types[000]' // Normal                          types[010]' // Douse (Water)                          types[012]' // Shock (Electric)                          types[009]' // Burn (Fire)                          types[014]' // Chill (Ice)                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsGen5,The following statement contains a magic number: switch ((Species)species)              {                  default:                      return EMPTY;                    case Basculin:                      return new[]                      {                          forms[550]' // Red                          forms[942]' // Blue                      };                    case Darumaka when generation >= 8:                      return GetFormsGalar(types' forms);                    case Darmanitan:                  {                      if (generation <= 7)                      {                          return new[]                          {                              forms[555]' // Standard                              forms[943]' // Zen                          };                      }                      return new[]                      {                          types[0] + " " + forms[555]' // Standard                          types[0] + " " + forms[943]' // Zen                          forms[Galarian] + " " + forms[555]' // Standard                          forms[Galarian] + " " + forms[943]' // Zen                      };                  }                    case Yamask when generation >= 8:                      return GetFormsGalar(types' forms);                    case Deerling:                  case Sawsbuck:                      return new[]                      {                          forms[585]' // Spring                          forms[947]' // Summer                          forms[948]' // Autumn                          forms[949]' // Winter                      };                    case Stunfisk when generation >= 8:                      return GetFormsGalar(types' forms);                    case Tornadus:                  case Thundurus:                  case Landorus:                      return new[]                      {                          forms[641]' // Incarnate                          forms[952]' // Therian                      };                    case Kyurem:                      return new[]                      {                          types[000]' // Normal                          forms[953]' // White                          forms[954]' // Black                      };                    case Keldeo:                      return new[]                      {                          forms[647]' // Ordinary                          forms[955]' // Resolute                      };                    case Meloetta:                      return new[]                      {                          forms[648]' // Aria                          forms[956]' // Pirouette                      };                    case Genesect:                      return new[]                      {                          types[000]' // Normal                          types[010]' // Douse (Water)                          types[012]' // Shock (Electric)                          types[009]' // Burn (Fire)                          types[014]' // Chill (Ice)                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsGen5,The following statement contains a magic number: switch ((Species)species)              {                  default:                      return EMPTY;                    case Basculin:                      return new[]                      {                          forms[550]' // Red                          forms[942]' // Blue                      };                    case Darumaka when generation >= 8:                      return GetFormsGalar(types' forms);                    case Darmanitan:                  {                      if (generation <= 7)                      {                          return new[]                          {                              forms[555]' // Standard                              forms[943]' // Zen                          };                      }                      return new[]                      {                          types[0] + " " + forms[555]' // Standard                          types[0] + " " + forms[943]' // Zen                          forms[Galarian] + " " + forms[555]' // Standard                          forms[Galarian] + " " + forms[943]' // Zen                      };                  }                    case Yamask when generation >= 8:                      return GetFormsGalar(types' forms);                    case Deerling:                  case Sawsbuck:                      return new[]                      {                          forms[585]' // Spring                          forms[947]' // Summer                          forms[948]' // Autumn                          forms[949]' // Winter                      };                    case Stunfisk when generation >= 8:                      return GetFormsGalar(types' forms);                    case Tornadus:                  case Thundurus:                  case Landorus:                      return new[]                      {                          forms[641]' // Incarnate                          forms[952]' // Therian                      };                    case Kyurem:                      return new[]                      {                          types[000]' // Normal                          forms[953]' // White                          forms[954]' // Black                      };                    case Keldeo:                      return new[]                      {                          forms[647]' // Ordinary                          forms[955]' // Resolute                      };                    case Meloetta:                      return new[]                      {                          forms[648]' // Aria                          forms[956]' // Pirouette                      };                    case Genesect:                      return new[]                      {                          types[000]' // Normal                          types[010]' // Douse (Water)                          types[012]' // Shock (Electric)                          types[009]' // Burn (Fire)                          types[014]' // Chill (Ice)                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsGen5,The following statement contains a magic number: switch ((Species)species)              {                  default:                      return EMPTY;                    case Basculin:                      return new[]                      {                          forms[550]' // Red                          forms[942]' // Blue                      };                    case Darumaka when generation >= 8:                      return GetFormsGalar(types' forms);                    case Darmanitan:                  {                      if (generation <= 7)                      {                          return new[]                          {                              forms[555]' // Standard                              forms[943]' // Zen                          };                      }                      return new[]                      {                          types[0] + " " + forms[555]' // Standard                          types[0] + " " + forms[943]' // Zen                          forms[Galarian] + " " + forms[555]' // Standard                          forms[Galarian] + " " + forms[943]' // Zen                      };                  }                    case Yamask when generation >= 8:                      return GetFormsGalar(types' forms);                    case Deerling:                  case Sawsbuck:                      return new[]                      {                          forms[585]' // Spring                          forms[947]' // Summer                          forms[948]' // Autumn                          forms[949]' // Winter                      };                    case Stunfisk when generation >= 8:                      return GetFormsGalar(types' forms);                    case Tornadus:                  case Thundurus:                  case Landorus:                      return new[]                      {                          forms[641]' // Incarnate                          forms[952]' // Therian                      };                    case Kyurem:                      return new[]                      {                          types[000]' // Normal                          forms[953]' // White                          forms[954]' // Black                      };                    case Keldeo:                      return new[]                      {                          forms[647]' // Ordinary                          forms[955]' // Resolute                      };                    case Meloetta:                      return new[]                      {                          forms[648]' // Aria                          forms[956]' // Pirouette                      };                    case Genesect:                      return new[]                      {                          types[000]' // Normal                          types[010]' // Douse (Water)                          types[012]' // Shock (Electric)                          types[009]' // Burn (Fire)                          types[014]' // Chill (Ice)                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsGen5,The following statement contains a magic number: switch ((Species)species)              {                  default:                      return EMPTY;                    case Basculin:                      return new[]                      {                          forms[550]' // Red                          forms[942]' // Blue                      };                    case Darumaka when generation >= 8:                      return GetFormsGalar(types' forms);                    case Darmanitan:                  {                      if (generation <= 7)                      {                          return new[]                          {                              forms[555]' // Standard                              forms[943]' // Zen                          };                      }                      return new[]                      {                          types[0] + " " + forms[555]' // Standard                          types[0] + " " + forms[943]' // Zen                          forms[Galarian] + " " + forms[555]' // Standard                          forms[Galarian] + " " + forms[943]' // Zen                      };                  }                    case Yamask when generation >= 8:                      return GetFormsGalar(types' forms);                    case Deerling:                  case Sawsbuck:                      return new[]                      {                          forms[585]' // Spring                          forms[947]' // Summer                          forms[948]' // Autumn                          forms[949]' // Winter                      };                    case Stunfisk when generation >= 8:                      return GetFormsGalar(types' forms);                    case Tornadus:                  case Thundurus:                  case Landorus:                      return new[]                      {                          forms[641]' // Incarnate                          forms[952]' // Therian                      };                    case Kyurem:                      return new[]                      {                          types[000]' // Normal                          forms[953]' // White                          forms[954]' // Black                      };                    case Keldeo:                      return new[]                      {                          forms[647]' // Ordinary                          forms[955]' // Resolute                      };                    case Meloetta:                      return new[]                      {                          forms[648]' // Aria                          forms[956]' // Pirouette                      };                    case Genesect:                      return new[]                      {                          types[000]' // Normal                          types[010]' // Douse (Water)                          types[012]' // Shock (Electric)                          types[009]' // Burn (Fire)                          types[014]' // Chill (Ice)                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsGen5,The following statement contains a magic number: switch ((Species)species)              {                  default:                      return EMPTY;                    case Basculin:                      return new[]                      {                          forms[550]' // Red                          forms[942]' // Blue                      };                    case Darumaka when generation >= 8:                      return GetFormsGalar(types' forms);                    case Darmanitan:                  {                      if (generation <= 7)                      {                          return new[]                          {                              forms[555]' // Standard                              forms[943]' // Zen                          };                      }                      return new[]                      {                          types[0] + " " + forms[555]' // Standard                          types[0] + " " + forms[943]' // Zen                          forms[Galarian] + " " + forms[555]' // Standard                          forms[Galarian] + " " + forms[943]' // Zen                      };                  }                    case Yamask when generation >= 8:                      return GetFormsGalar(types' forms);                    case Deerling:                  case Sawsbuck:                      return new[]                      {                          forms[585]' // Spring                          forms[947]' // Summer                          forms[948]' // Autumn                          forms[949]' // Winter                      };                    case Stunfisk when generation >= 8:                      return GetFormsGalar(types' forms);                    case Tornadus:                  case Thundurus:                  case Landorus:                      return new[]                      {                          forms[641]' // Incarnate                          forms[952]' // Therian                      };                    case Kyurem:                      return new[]                      {                          types[000]' // Normal                          forms[953]' // White                          forms[954]' // Black                      };                    case Keldeo:                      return new[]                      {                          forms[647]' // Ordinary                          forms[955]' // Resolute                      };                    case Meloetta:                      return new[]                      {                          forms[648]' // Aria                          forms[956]' // Pirouette                      };                    case Genesect:                      return new[]                      {                          types[000]' // Normal                          types[010]' // Douse (Water)                          types[012]' // Shock (Electric)                          types[009]' // Burn (Fire)                          types[014]' // Chill (Ice)                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsGen5,The following statement contains a magic number: switch ((Species)species)              {                  default:                      return EMPTY;                    case Basculin:                      return new[]                      {                          forms[550]' // Red                          forms[942]' // Blue                      };                    case Darumaka when generation >= 8:                      return GetFormsGalar(types' forms);                    case Darmanitan:                  {                      if (generation <= 7)                      {                          return new[]                          {                              forms[555]' // Standard                              forms[943]' // Zen                          };                      }                      return new[]                      {                          types[0] + " " + forms[555]' // Standard                          types[0] + " " + forms[943]' // Zen                          forms[Galarian] + " " + forms[555]' // Standard                          forms[Galarian] + " " + forms[943]' // Zen                      };                  }                    case Yamask when generation >= 8:                      return GetFormsGalar(types' forms);                    case Deerling:                  case Sawsbuck:                      return new[]                      {                          forms[585]' // Spring                          forms[947]' // Summer                          forms[948]' // Autumn                          forms[949]' // Winter                      };                    case Stunfisk when generation >= 8:                      return GetFormsGalar(types' forms);                    case Tornadus:                  case Thundurus:                  case Landorus:                      return new[]                      {                          forms[641]' // Incarnate                          forms[952]' // Therian                      };                    case Kyurem:                      return new[]                      {                          types[000]' // Normal                          forms[953]' // White                          forms[954]' // Black                      };                    case Keldeo:                      return new[]                      {                          forms[647]' // Ordinary                          forms[955]' // Resolute                      };                    case Meloetta:                      return new[]                      {                          forms[648]' // Aria                          forms[956]' // Pirouette                      };                    case Genesect:                      return new[]                      {                          types[000]' // Normal                          types[010]' // Douse (Water)                          types[012]' // Shock (Electric)                          types[009]' // Burn (Fire)                          types[014]' // Chill (Ice)                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsGen5,The following statement contains a magic number: switch ((Species)species)              {                  default:                      return EMPTY;                    case Basculin:                      return new[]                      {                          forms[550]' // Red                          forms[942]' // Blue                      };                    case Darumaka when generation >= 8:                      return GetFormsGalar(types' forms);                    case Darmanitan:                  {                      if (generation <= 7)                      {                          return new[]                          {                              forms[555]' // Standard                              forms[943]' // Zen                          };                      }                      return new[]                      {                          types[0] + " " + forms[555]' // Standard                          types[0] + " " + forms[943]' // Zen                          forms[Galarian] + " " + forms[555]' // Standard                          forms[Galarian] + " " + forms[943]' // Zen                      };                  }                    case Yamask when generation >= 8:                      return GetFormsGalar(types' forms);                    case Deerling:                  case Sawsbuck:                      return new[]                      {                          forms[585]' // Spring                          forms[947]' // Summer                          forms[948]' // Autumn                          forms[949]' // Winter                      };                    case Stunfisk when generation >= 8:                      return GetFormsGalar(types' forms);                    case Tornadus:                  case Thundurus:                  case Landorus:                      return new[]                      {                          forms[641]' // Incarnate                          forms[952]' // Therian                      };                    case Kyurem:                      return new[]                      {                          types[000]' // Normal                          forms[953]' // White                          forms[954]' // Black                      };                    case Keldeo:                      return new[]                      {                          forms[647]' // Ordinary                          forms[955]' // Resolute                      };                    case Meloetta:                      return new[]                      {                          forms[648]' // Aria                          forms[956]' // Pirouette                      };                    case Genesect:                      return new[]                      {                          types[000]' // Normal                          types[010]' // Douse (Water)                          types[012]' // Shock (Electric)                          types[009]' // Burn (Fire)                          types[014]' // Chill (Ice)                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsGen5,The following statement contains a magic number: switch ((Species)species)              {                  default:                      return EMPTY;                    case Basculin:                      return new[]                      {                          forms[550]' // Red                          forms[942]' // Blue                      };                    case Darumaka when generation >= 8:                      return GetFormsGalar(types' forms);                    case Darmanitan:                  {                      if (generation <= 7)                      {                          return new[]                          {                              forms[555]' // Standard                              forms[943]' // Zen                          };                      }                      return new[]                      {                          types[0] + " " + forms[555]' // Standard                          types[0] + " " + forms[943]' // Zen                          forms[Galarian] + " " + forms[555]' // Standard                          forms[Galarian] + " " + forms[943]' // Zen                      };                  }                    case Yamask when generation >= 8:                      return GetFormsGalar(types' forms);                    case Deerling:                  case Sawsbuck:                      return new[]                      {                          forms[585]' // Spring                          forms[947]' // Summer                          forms[948]' // Autumn                          forms[949]' // Winter                      };                    case Stunfisk when generation >= 8:                      return GetFormsGalar(types' forms);                    case Tornadus:                  case Thundurus:                  case Landorus:                      return new[]                      {                          forms[641]' // Incarnate                          forms[952]' // Therian                      };                    case Kyurem:                      return new[]                      {                          types[000]' // Normal                          forms[953]' // White                          forms[954]' // Black                      };                    case Keldeo:                      return new[]                      {                          forms[647]' // Ordinary                          forms[955]' // Resolute                      };                    case Meloetta:                      return new[]                      {                          forms[648]' // Aria                          forms[956]' // Pirouette                      };                    case Genesect:                      return new[]                      {                          types[000]' // Normal                          types[010]' // Douse (Water)                          types[012]' // Shock (Electric)                          types[009]' // Burn (Fire)                          types[014]' // Chill (Ice)                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsGen5,The following statement contains a magic number: switch ((Species)species)              {                  default:                      return EMPTY;                    case Basculin:                      return new[]                      {                          forms[550]' // Red                          forms[942]' // Blue                      };                    case Darumaka when generation >= 8:                      return GetFormsGalar(types' forms);                    case Darmanitan:                  {                      if (generation <= 7)                      {                          return new[]                          {                              forms[555]' // Standard                              forms[943]' // Zen                          };                      }                      return new[]                      {                          types[0] + " " + forms[555]' // Standard                          types[0] + " " + forms[943]' // Zen                          forms[Galarian] + " " + forms[555]' // Standard                          forms[Galarian] + " " + forms[943]' // Zen                      };                  }                    case Yamask when generation >= 8:                      return GetFormsGalar(types' forms);                    case Deerling:                  case Sawsbuck:                      return new[]                      {                          forms[585]' // Spring                          forms[947]' // Summer                          forms[948]' // Autumn                          forms[949]' // Winter                      };                    case Stunfisk when generation >= 8:                      return GetFormsGalar(types' forms);                    case Tornadus:                  case Thundurus:                  case Landorus:                      return new[]                      {                          forms[641]' // Incarnate                          forms[952]' // Therian                      };                    case Kyurem:                      return new[]                      {                          types[000]' // Normal                          forms[953]' // White                          forms[954]' // Black                      };                    case Keldeo:                      return new[]                      {                          forms[647]' // Ordinary                          forms[955]' // Resolute                      };                    case Meloetta:                      return new[]                      {                          forms[648]' // Aria                          forms[956]' // Pirouette                      };                    case Genesect:                      return new[]                      {                          types[000]' // Normal                          types[010]' // Douse (Water)                          types[012]' // Shock (Electric)                          types[009]' // Burn (Fire)                          types[014]' // Chill (Ice)                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsGen6,The following statement contains a magic number: switch ((Species)species)              {                  default:                      return EMPTY;                    case Greninja:                      return new[]                      {                          types[000]' // Normal                          forms[962]' // "Ash"'                          forms[1012]' // "Bonded" - Active                      };                    case Scatterbug:                  case Spewpa:                  case Vivillon:                      return new[]                      {                          forms[666]' // Icy Snow                          forms[963]' // Polar                          forms[964]' // Tundra                          forms[965]' // Continental                          forms[966]' // Garden                          forms[967]' // Elegant                          forms[968]' // Meadow                          forms[969]' // Modern                          forms[970]' // Marine                          forms[971]' // Archipelago                          forms[972]' // High-Plains                          forms[973]' // Sandstorm                          forms[974]' // River                          forms[975]' // Monsoon                          forms[976]' // Savannah                          forms[977]' // Sun                          forms[978]' // Ocean                          forms[979]' // Jungle                          forms[980]' // Fancy                          forms[981]' // Poké Ball                      };                    case Flabébé:                  case Florges:                      return new[]                      {                          forms[669]' // Red                          forms[986]' // Yellow                          forms[987]' // Orange                          forms[988]' // Blue                          forms[989]' // White                      };                    case Floette:                      return new[]                      {                          forms[669]' // Red                          forms[986]' // Yellow                          forms[987]' // Orange                          forms[988]' // Blue                          forms[989]' // White                          forms[990]' // Eternal                      };                    case Furfrou:                      return new[]                      {                          forms[676]' // Natural                          forms[995]' // Heart                          forms[996]' // Star                          forms[997]' // Diamond                          forms[998]' // Deputante                          forms[999]' // Matron                          forms[1000]' // Dandy                          forms[1001]' // La Reine                          forms[1002]' // Kabuki                          forms[1003]' // Pharaoh                      };                    case Meowstic:                      return new[]                      {                          genders[000]' // Male                          genders[001]' // Female                      };                    case Aegislash:                      return new[]                      {                          forms[681]' // Shield                          forms[1005]' // Blade                      };                    case Pumpkaboo:                  case Gourgeist:                      return new[]                      {                          forms[710]' // Average                          forms[1006]' // Small                          forms[1007]' // Large                          forms[1008]' // Super                      };                    case Xerneas:                      return new[]                      {                          forms[716]' // Neutral                          forms[1012]' // Active                      };                    case Hoopa:                      return new[]                      {                          forms[720]' // Confined                          forms[1018]' // Unbound                      };                    case Zygarde:                      return new[]                      {                          forms[718]' // 50% (Aura Break)                          forms[1013]' // 10% (Aura Break)                          forms[1014] + "-C"' // 10% Cell (Power Construct)                          forms[1015] + "-C"' // 50% Cell (Power Construct)                          forms[1016]' // 100% Cell (Power Construct)                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsGen6,The following statement contains a magic number: switch ((Species)species)              {                  default:                      return EMPTY;                    case Greninja:                      return new[]                      {                          types[000]' // Normal                          forms[962]' // "Ash"'                          forms[1012]' // "Bonded" - Active                      };                    case Scatterbug:                  case Spewpa:                  case Vivillon:                      return new[]                      {                          forms[666]' // Icy Snow                          forms[963]' // Polar                          forms[964]' // Tundra                          forms[965]' // Continental                          forms[966]' // Garden                          forms[967]' // Elegant                          forms[968]' // Meadow                          forms[969]' // Modern                          forms[970]' // Marine                          forms[971]' // Archipelago                          forms[972]' // High-Plains                          forms[973]' // Sandstorm                          forms[974]' // River                          forms[975]' // Monsoon                          forms[976]' // Savannah                          forms[977]' // Sun                          forms[978]' // Ocean                          forms[979]' // Jungle                          forms[980]' // Fancy                          forms[981]' // Poké Ball                      };                    case Flabébé:                  case Florges:                      return new[]                      {                          forms[669]' // Red                          forms[986]' // Yellow                          forms[987]' // Orange                          forms[988]' // Blue                          forms[989]' // White                      };                    case Floette:                      return new[]                      {                          forms[669]' // Red                          forms[986]' // Yellow                          forms[987]' // Orange                          forms[988]' // Blue                          forms[989]' // White                          forms[990]' // Eternal                      };                    case Furfrou:                      return new[]                      {                          forms[676]' // Natural                          forms[995]' // Heart                          forms[996]' // Star                          forms[997]' // Diamond                          forms[998]' // Deputante                          forms[999]' // Matron                          forms[1000]' // Dandy                          forms[1001]' // La Reine                          forms[1002]' // Kabuki                          forms[1003]' // Pharaoh                      };                    case Meowstic:                      return new[]                      {                          genders[000]' // Male                          genders[001]' // Female                      };                    case Aegislash:                      return new[]                      {                          forms[681]' // Shield                          forms[1005]' // Blade                      };                    case Pumpkaboo:                  case Gourgeist:                      return new[]                      {                          forms[710]' // Average                          forms[1006]' // Small                          forms[1007]' // Large                          forms[1008]' // Super                      };                    case Xerneas:                      return new[]                      {                          forms[716]' // Neutral                          forms[1012]' // Active                      };                    case Hoopa:                      return new[]                      {                          forms[720]' // Confined                          forms[1018]' // Unbound                      };                    case Zygarde:                      return new[]                      {                          forms[718]' // 50% (Aura Break)                          forms[1013]' // 10% (Aura Break)                          forms[1014] + "-C"' // 10% Cell (Power Construct)                          forms[1015] + "-C"' // 50% Cell (Power Construct)                          forms[1016]' // 100% Cell (Power Construct)                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsGen6,The following statement contains a magic number: switch ((Species)species)              {                  default:                      return EMPTY;                    case Greninja:                      return new[]                      {                          types[000]' // Normal                          forms[962]' // "Ash"'                          forms[1012]' // "Bonded" - Active                      };                    case Scatterbug:                  case Spewpa:                  case Vivillon:                      return new[]                      {                          forms[666]' // Icy Snow                          forms[963]' // Polar                          forms[964]' // Tundra                          forms[965]' // Continental                          forms[966]' // Garden                          forms[967]' // Elegant                          forms[968]' // Meadow                          forms[969]' // Modern                          forms[970]' // Marine                          forms[971]' // Archipelago                          forms[972]' // High-Plains                          forms[973]' // Sandstorm                          forms[974]' // River                          forms[975]' // Monsoon                          forms[976]' // Savannah                          forms[977]' // Sun                          forms[978]' // Ocean                          forms[979]' // Jungle                          forms[980]' // Fancy                          forms[981]' // Poké Ball                      };                    case Flabébé:                  case Florges:                      return new[]                      {                          forms[669]' // Red                          forms[986]' // Yellow                          forms[987]' // Orange                          forms[988]' // Blue                          forms[989]' // White                      };                    case Floette:                      return new[]                      {                          forms[669]' // Red                          forms[986]' // Yellow                          forms[987]' // Orange                          forms[988]' // Blue                          forms[989]' // White                          forms[990]' // Eternal                      };                    case Furfrou:                      return new[]                      {                          forms[676]' // Natural                          forms[995]' // Heart                          forms[996]' // Star                          forms[997]' // Diamond                          forms[998]' // Deputante                          forms[999]' // Matron                          forms[1000]' // Dandy                          forms[1001]' // La Reine                          forms[1002]' // Kabuki                          forms[1003]' // Pharaoh                      };                    case Meowstic:                      return new[]                      {                          genders[000]' // Male                          genders[001]' // Female                      };                    case Aegislash:                      return new[]                      {                          forms[681]' // Shield                          forms[1005]' // Blade                      };                    case Pumpkaboo:                  case Gourgeist:                      return new[]                      {                          forms[710]' // Average                          forms[1006]' // Small                          forms[1007]' // Large                          forms[1008]' // Super                      };                    case Xerneas:                      return new[]                      {                          forms[716]' // Neutral                          forms[1012]' // Active                      };                    case Hoopa:                      return new[]                      {                          forms[720]' // Confined                          forms[1018]' // Unbound                      };                    case Zygarde:                      return new[]                      {                          forms[718]' // 50% (Aura Break)                          forms[1013]' // 10% (Aura Break)                          forms[1014] + "-C"' // 10% Cell (Power Construct)                          forms[1015] + "-C"' // 50% Cell (Power Construct)                          forms[1016]' // 100% Cell (Power Construct)                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsGen6,The following statement contains a magic number: switch ((Species)species)              {                  default:                      return EMPTY;                    case Greninja:                      return new[]                      {                          types[000]' // Normal                          forms[962]' // "Ash"'                          forms[1012]' // "Bonded" - Active                      };                    case Scatterbug:                  case Spewpa:                  case Vivillon:                      return new[]                      {                          forms[666]' // Icy Snow                          forms[963]' // Polar                          forms[964]' // Tundra                          forms[965]' // Continental                          forms[966]' // Garden                          forms[967]' // Elegant                          forms[968]' // Meadow                          forms[969]' // Modern                          forms[970]' // Marine                          forms[971]' // Archipelago                          forms[972]' // High-Plains                          forms[973]' // Sandstorm                          forms[974]' // River                          forms[975]' // Monsoon                          forms[976]' // Savannah                          forms[977]' // Sun                          forms[978]' // Ocean                          forms[979]' // Jungle                          forms[980]' // Fancy                          forms[981]' // Poké Ball                      };                    case Flabébé:                  case Florges:                      return new[]                      {                          forms[669]' // Red                          forms[986]' // Yellow                          forms[987]' // Orange                          forms[988]' // Blue                          forms[989]' // White                      };                    case Floette:                      return new[]                      {                          forms[669]' // Red                          forms[986]' // Yellow                          forms[987]' // Orange                          forms[988]' // Blue                          forms[989]' // White                          forms[990]' // Eternal                      };                    case Furfrou:                      return new[]                      {                          forms[676]' // Natural                          forms[995]' // Heart                          forms[996]' // Star                          forms[997]' // Diamond                          forms[998]' // Deputante                          forms[999]' // Matron                          forms[1000]' // Dandy                          forms[1001]' // La Reine                          forms[1002]' // Kabuki                          forms[1003]' // Pharaoh                      };                    case Meowstic:                      return new[]                      {                          genders[000]' // Male                          genders[001]' // Female                      };                    case Aegislash:                      return new[]                      {                          forms[681]' // Shield                          forms[1005]' // Blade                      };                    case Pumpkaboo:                  case Gourgeist:                      return new[]                      {                          forms[710]' // Average                          forms[1006]' // Small                          forms[1007]' // Large                          forms[1008]' // Super                      };                    case Xerneas:                      return new[]                      {                          forms[716]' // Neutral                          forms[1012]' // Active                      };                    case Hoopa:                      return new[]                      {                          forms[720]' // Confined                          forms[1018]' // Unbound                      };                    case Zygarde:                      return new[]                      {                          forms[718]' // 50% (Aura Break)                          forms[1013]' // 10% (Aura Break)                          forms[1014] + "-C"' // 10% Cell (Power Construct)                          forms[1015] + "-C"' // 50% Cell (Power Construct)                          forms[1016]' // 100% Cell (Power Construct)                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsGen6,The following statement contains a magic number: switch ((Species)species)              {                  default:                      return EMPTY;                    case Greninja:                      return new[]                      {                          types[000]' // Normal                          forms[962]' // "Ash"'                          forms[1012]' // "Bonded" - Active                      };                    case Scatterbug:                  case Spewpa:                  case Vivillon:                      return new[]                      {                          forms[666]' // Icy Snow                          forms[963]' // Polar                          forms[964]' // Tundra                          forms[965]' // Continental                          forms[966]' // Garden                          forms[967]' // Elegant                          forms[968]' // Meadow                          forms[969]' // Modern                          forms[970]' // Marine                          forms[971]' // Archipelago                          forms[972]' // High-Plains                          forms[973]' // Sandstorm                          forms[974]' // River                          forms[975]' // Monsoon                          forms[976]' // Savannah                          forms[977]' // Sun                          forms[978]' // Ocean                          forms[979]' // Jungle                          forms[980]' // Fancy                          forms[981]' // Poké Ball                      };                    case Flabébé:                  case Florges:                      return new[]                      {                          forms[669]' // Red                          forms[986]' // Yellow                          forms[987]' // Orange                          forms[988]' // Blue                          forms[989]' // White                      };                    case Floette:                      return new[]                      {                          forms[669]' // Red                          forms[986]' // Yellow                          forms[987]' // Orange                          forms[988]' // Blue                          forms[989]' // White                          forms[990]' // Eternal                      };                    case Furfrou:                      return new[]                      {                          forms[676]' // Natural                          forms[995]' // Heart                          forms[996]' // Star                          forms[997]' // Diamond                          forms[998]' // Deputante                          forms[999]' // Matron                          forms[1000]' // Dandy                          forms[1001]' // La Reine                          forms[1002]' // Kabuki                          forms[1003]' // Pharaoh                      };                    case Meowstic:                      return new[]                      {                          genders[000]' // Male                          genders[001]' // Female                      };                    case Aegislash:                      return new[]                      {                          forms[681]' // Shield                          forms[1005]' // Blade                      };                    case Pumpkaboo:                  case Gourgeist:                      return new[]                      {                          forms[710]' // Average                          forms[1006]' // Small                          forms[1007]' // Large                          forms[1008]' // Super                      };                    case Xerneas:                      return new[]                      {                          forms[716]' // Neutral                          forms[1012]' // Active                      };                    case Hoopa:                      return new[]                      {                          forms[720]' // Confined                          forms[1018]' // Unbound                      };                    case Zygarde:                      return new[]                      {                          forms[718]' // 50% (Aura Break)                          forms[1013]' // 10% (Aura Break)                          forms[1014] + "-C"' // 10% Cell (Power Construct)                          forms[1015] + "-C"' // 50% Cell (Power Construct)                          forms[1016]' // 100% Cell (Power Construct)                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsGen6,The following statement contains a magic number: switch ((Species)species)              {                  default:                      return EMPTY;                    case Greninja:                      return new[]                      {                          types[000]' // Normal                          forms[962]' // "Ash"'                          forms[1012]' // "Bonded" - Active                      };                    case Scatterbug:                  case Spewpa:                  case Vivillon:                      return new[]                      {                          forms[666]' // Icy Snow                          forms[963]' // Polar                          forms[964]' // Tundra                          forms[965]' // Continental                          forms[966]' // Garden                          forms[967]' // Elegant                          forms[968]' // Meadow                          forms[969]' // Modern                          forms[970]' // Marine                          forms[971]' // Archipelago                          forms[972]' // High-Plains                          forms[973]' // Sandstorm                          forms[974]' // River                          forms[975]' // Monsoon                          forms[976]' // Savannah                          forms[977]' // Sun                          forms[978]' // Ocean                          forms[979]' // Jungle                          forms[980]' // Fancy                          forms[981]' // Poké Ball                      };                    case Flabébé:                  case Florges:                      return new[]                      {                          forms[669]' // Red                          forms[986]' // Yellow                          forms[987]' // Orange                          forms[988]' // Blue                          forms[989]' // White                      };                    case Floette:                      return new[]                      {                          forms[669]' // Red                          forms[986]' // Yellow                          forms[987]' // Orange                          forms[988]' // Blue                          forms[989]' // White                          forms[990]' // Eternal                      };                    case Furfrou:                      return new[]                      {                          forms[676]' // Natural                          forms[995]' // Heart                          forms[996]' // Star                          forms[997]' // Diamond                          forms[998]' // Deputante                          forms[999]' // Matron                          forms[1000]' // Dandy                          forms[1001]' // La Reine                          forms[1002]' // Kabuki                          forms[1003]' // Pharaoh                      };                    case Meowstic:                      return new[]                      {                          genders[000]' // Male                          genders[001]' // Female                      };                    case Aegislash:                      return new[]                      {                          forms[681]' // Shield                          forms[1005]' // Blade                      };                    case Pumpkaboo:                  case Gourgeist:                      return new[]                      {                          forms[710]' // Average                          forms[1006]' // Small                          forms[1007]' // Large                          forms[1008]' // Super                      };                    case Xerneas:                      return new[]                      {                          forms[716]' // Neutral                          forms[1012]' // Active                      };                    case Hoopa:                      return new[]                      {                          forms[720]' // Confined                          forms[1018]' // Unbound                      };                    case Zygarde:                      return new[]                      {                          forms[718]' // 50% (Aura Break)                          forms[1013]' // 10% (Aura Break)                          forms[1014] + "-C"' // 10% Cell (Power Construct)                          forms[1015] + "-C"' // 50% Cell (Power Construct)                          forms[1016]' // 100% Cell (Power Construct)                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsGen6,The following statement contains a magic number: switch ((Species)species)              {                  default:                      return EMPTY;                    case Greninja:                      return new[]                      {                          types[000]' // Normal                          forms[962]' // "Ash"'                          forms[1012]' // "Bonded" - Active                      };                    case Scatterbug:                  case Spewpa:                  case Vivillon:                      return new[]                      {                          forms[666]' // Icy Snow                          forms[963]' // Polar                          forms[964]' // Tundra                          forms[965]' // Continental                          forms[966]' // Garden                          forms[967]' // Elegant                          forms[968]' // Meadow                          forms[969]' // Modern                          forms[970]' // Marine                          forms[971]' // Archipelago                          forms[972]' // High-Plains                          forms[973]' // Sandstorm                          forms[974]' // River                          forms[975]' // Monsoon                          forms[976]' // Savannah                          forms[977]' // Sun                          forms[978]' // Ocean                          forms[979]' // Jungle                          forms[980]' // Fancy                          forms[981]' // Poké Ball                      };                    case Flabébé:                  case Florges:                      return new[]                      {                          forms[669]' // Red                          forms[986]' // Yellow                          forms[987]' // Orange                          forms[988]' // Blue                          forms[989]' // White                      };                    case Floette:                      return new[]                      {                          forms[669]' // Red                          forms[986]' // Yellow                          forms[987]' // Orange                          forms[988]' // Blue                          forms[989]' // White                          forms[990]' // Eternal                      };                    case Furfrou:                      return new[]                      {                          forms[676]' // Natural                          forms[995]' // Heart                          forms[996]' // Star                          forms[997]' // Diamond                          forms[998]' // Deputante                          forms[999]' // Matron                          forms[1000]' // Dandy                          forms[1001]' // La Reine                          forms[1002]' // Kabuki                          forms[1003]' // Pharaoh                      };                    case Meowstic:                      return new[]                      {                          genders[000]' // Male                          genders[001]' // Female                      };                    case Aegislash:                      return new[]                      {                          forms[681]' // Shield                          forms[1005]' // Blade                      };                    case Pumpkaboo:                  case Gourgeist:                      return new[]                      {                          forms[710]' // Average                          forms[1006]' // Small                          forms[1007]' // Large                          forms[1008]' // Super                      };                    case Xerneas:                      return new[]                      {                          forms[716]' // Neutral                          forms[1012]' // Active                      };                    case Hoopa:                      return new[]                      {                          forms[720]' // Confined                          forms[1018]' // Unbound                      };                    case Zygarde:                      return new[]                      {                          forms[718]' // 50% (Aura Break)                          forms[1013]' // 10% (Aura Break)                          forms[1014] + "-C"' // 10% Cell (Power Construct)                          forms[1015] + "-C"' // 50% Cell (Power Construct)                          forms[1016]' // 100% Cell (Power Construct)                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsGen6,The following statement contains a magic number: switch ((Species)species)              {                  default:                      return EMPTY;                    case Greninja:                      return new[]                      {                          types[000]' // Normal                          forms[962]' // "Ash"'                          forms[1012]' // "Bonded" - Active                      };                    case Scatterbug:                  case Spewpa:                  case Vivillon:                      return new[]                      {                          forms[666]' // Icy Snow                          forms[963]' // Polar                          forms[964]' // Tundra                          forms[965]' // Continental                          forms[966]' // Garden                          forms[967]' // Elegant                          forms[968]' // Meadow                          forms[969]' // Modern                          forms[970]' // Marine                          forms[971]' // Archipelago                          forms[972]' // High-Plains                          forms[973]' // Sandstorm                          forms[974]' // River                          forms[975]' // Monsoon                          forms[976]' // Savannah                          forms[977]' // Sun                          forms[978]' // Ocean                          forms[979]' // Jungle                          forms[980]' // Fancy                          forms[981]' // Poké Ball                      };                    case Flabébé:                  case Florges:                      return new[]                      {                          forms[669]' // Red                          forms[986]' // Yellow                          forms[987]' // Orange                          forms[988]' // Blue                          forms[989]' // White                      };                    case Floette:                      return new[]                      {                          forms[669]' // Red                          forms[986]' // Yellow                          forms[987]' // Orange                          forms[988]' // Blue                          forms[989]' // White                          forms[990]' // Eternal                      };                    case Furfrou:                      return new[]                      {                          forms[676]' // Natural                          forms[995]' // Heart                          forms[996]' // Star                          forms[997]' // Diamond                          forms[998]' // Deputante                          forms[999]' // Matron                          forms[1000]' // Dandy                          forms[1001]' // La Reine                          forms[1002]' // Kabuki                          forms[1003]' // Pharaoh                      };                    case Meowstic:                      return new[]                      {                          genders[000]' // Male                          genders[001]' // Female                      };                    case Aegislash:                      return new[]                      {                          forms[681]' // Shield                          forms[1005]' // Blade                      };                    case Pumpkaboo:                  case Gourgeist:                      return new[]                      {                          forms[710]' // Average                          forms[1006]' // Small                          forms[1007]' // Large                          forms[1008]' // Super                      };                    case Xerneas:                      return new[]                      {                          forms[716]' // Neutral                          forms[1012]' // Active                      };                    case Hoopa:                      return new[]                      {                          forms[720]' // Confined                          forms[1018]' // Unbound                      };                    case Zygarde:                      return new[]                      {                          forms[718]' // 50% (Aura Break)                          forms[1013]' // 10% (Aura Break)                          forms[1014] + "-C"' // 10% Cell (Power Construct)                          forms[1015] + "-C"' // 50% Cell (Power Construct)                          forms[1016]' // 100% Cell (Power Construct)                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsGen6,The following statement contains a magic number: switch ((Species)species)              {                  default:                      return EMPTY;                    case Greninja:                      return new[]                      {                          types[000]' // Normal                          forms[962]' // "Ash"'                          forms[1012]' // "Bonded" - Active                      };                    case Scatterbug:                  case Spewpa:                  case Vivillon:                      return new[]                      {                          forms[666]' // Icy Snow                          forms[963]' // Polar                          forms[964]' // Tundra                          forms[965]' // Continental                          forms[966]' // Garden                          forms[967]' // Elegant                          forms[968]' // Meadow                          forms[969]' // Modern                          forms[970]' // Marine                          forms[971]' // Archipelago                          forms[972]' // High-Plains                          forms[973]' // Sandstorm                          forms[974]' // River                          forms[975]' // Monsoon                          forms[976]' // Savannah                          forms[977]' // Sun                          forms[978]' // Ocean                          forms[979]' // Jungle                          forms[980]' // Fancy                          forms[981]' // Poké Ball                      };                    case Flabébé:                  case Florges:                      return new[]                      {                          forms[669]' // Red                          forms[986]' // Yellow                          forms[987]' // Orange                          forms[988]' // Blue                          forms[989]' // White                      };                    case Floette:                      return new[]                      {                          forms[669]' // Red                          forms[986]' // Yellow                          forms[987]' // Orange                          forms[988]' // Blue                          forms[989]' // White                          forms[990]' // Eternal                      };                    case Furfrou:                      return new[]                      {                          forms[676]' // Natural                          forms[995]' // Heart                          forms[996]' // Star                          forms[997]' // Diamond                          forms[998]' // Deputante                          forms[999]' // Matron                          forms[1000]' // Dandy                          forms[1001]' // La Reine                          forms[1002]' // Kabuki                          forms[1003]' // Pharaoh                      };                    case Meowstic:                      return new[]                      {                          genders[000]' // Male                          genders[001]' // Female                      };                    case Aegislash:                      return new[]                      {                          forms[681]' // Shield                          forms[1005]' // Blade                      };                    case Pumpkaboo:                  case Gourgeist:                      return new[]                      {                          forms[710]' // Average                          forms[1006]' // Small                          forms[1007]' // Large                          forms[1008]' // Super                      };                    case Xerneas:                      return new[]                      {                          forms[716]' // Neutral                          forms[1012]' // Active                      };                    case Hoopa:                      return new[]                      {                          forms[720]' // Confined                          forms[1018]' // Unbound                      };                    case Zygarde:                      return new[]                      {                          forms[718]' // 50% (Aura Break)                          forms[1013]' // 10% (Aura Break)                          forms[1014] + "-C"' // 10% Cell (Power Construct)                          forms[1015] + "-C"' // 50% Cell (Power Construct)                          forms[1016]' // 100% Cell (Power Construct)                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsGen6,The following statement contains a magic number: switch ((Species)species)              {                  default:                      return EMPTY;                    case Greninja:                      return new[]                      {                          types[000]' // Normal                          forms[962]' // "Ash"'                          forms[1012]' // "Bonded" - Active                      };                    case Scatterbug:                  case Spewpa:                  case Vivillon:                      return new[]                      {                          forms[666]' // Icy Snow                          forms[963]' // Polar                          forms[964]' // Tundra                          forms[965]' // Continental                          forms[966]' // Garden                          forms[967]' // Elegant                          forms[968]' // Meadow                          forms[969]' // Modern                          forms[970]' // Marine                          forms[971]' // Archipelago                          forms[972]' // High-Plains                          forms[973]' // Sandstorm                          forms[974]' // River                          forms[975]' // Monsoon                          forms[976]' // Savannah                          forms[977]' // Sun                          forms[978]' // Ocean                          forms[979]' // Jungle                          forms[980]' // Fancy                          forms[981]' // Poké Ball                      };                    case Flabébé:                  case Florges:                      return new[]                      {                          forms[669]' // Red                          forms[986]' // Yellow                          forms[987]' // Orange                          forms[988]' // Blue                          forms[989]' // White                      };                    case Floette:                      return new[]                      {                          forms[669]' // Red                          forms[986]' // Yellow                          forms[987]' // Orange                          forms[988]' // Blue                          forms[989]' // White                          forms[990]' // Eternal                      };                    case Furfrou:                      return new[]                      {                          forms[676]' // Natural                          forms[995]' // Heart                          forms[996]' // Star                          forms[997]' // Diamond                          forms[998]' // Deputante                          forms[999]' // Matron                          forms[1000]' // Dandy                          forms[1001]' // La Reine                          forms[1002]' // Kabuki                          forms[1003]' // Pharaoh                      };                    case Meowstic:                      return new[]                      {                          genders[000]' // Male                          genders[001]' // Female                      };                    case Aegislash:                      return new[]                      {                          forms[681]' // Shield                          forms[1005]' // Blade                      };                    case Pumpkaboo:                  case Gourgeist:                      return new[]                      {                          forms[710]' // Average                          forms[1006]' // Small                          forms[1007]' // Large                          forms[1008]' // Super                      };                    case Xerneas:                      return new[]                      {                          forms[716]' // Neutral                          forms[1012]' // Active                      };                    case Hoopa:                      return new[]                      {                          forms[720]' // Confined                          forms[1018]' // Unbound                      };                    case Zygarde:                      return new[]                      {                          forms[718]' // 50% (Aura Break)                          forms[1013]' // 10% (Aura Break)                          forms[1014] + "-C"' // 10% Cell (Power Construct)                          forms[1015] + "-C"' // 50% Cell (Power Construct)                          forms[1016]' // 100% Cell (Power Construct)                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsGen6,The following statement contains a magic number: switch ((Species)species)              {                  default:                      return EMPTY;                    case Greninja:                      return new[]                      {                          types[000]' // Normal                          forms[962]' // "Ash"'                          forms[1012]' // "Bonded" - Active                      };                    case Scatterbug:                  case Spewpa:                  case Vivillon:                      return new[]                      {                          forms[666]' // Icy Snow                          forms[963]' // Polar                          forms[964]' // Tundra                          forms[965]' // Continental                          forms[966]' // Garden                          forms[967]' // Elegant                          forms[968]' // Meadow                          forms[969]' // Modern                          forms[970]' // Marine                          forms[971]' // Archipelago                          forms[972]' // High-Plains                          forms[973]' // Sandstorm                          forms[974]' // River                          forms[975]' // Monsoon                          forms[976]' // Savannah                          forms[977]' // Sun                          forms[978]' // Ocean                          forms[979]' // Jungle                          forms[980]' // Fancy                          forms[981]' // Poké Ball                      };                    case Flabébé:                  case Florges:                      return new[]                      {                          forms[669]' // Red                          forms[986]' // Yellow                          forms[987]' // Orange                          forms[988]' // Blue                          forms[989]' // White                      };                    case Floette:                      return new[]                      {                          forms[669]' // Red                          forms[986]' // Yellow                          forms[987]' // Orange                          forms[988]' // Blue                          forms[989]' // White                          forms[990]' // Eternal                      };                    case Furfrou:                      return new[]                      {                          forms[676]' // Natural                          forms[995]' // Heart                          forms[996]' // Star                          forms[997]' // Diamond                          forms[998]' // Deputante                          forms[999]' // Matron                          forms[1000]' // Dandy                          forms[1001]' // La Reine                          forms[1002]' // Kabuki                          forms[1003]' // Pharaoh                      };                    case Meowstic:                      return new[]                      {                          genders[000]' // Male                          genders[001]' // Female                      };                    case Aegislash:                      return new[]                      {                          forms[681]' // Shield                          forms[1005]' // Blade                      };                    case Pumpkaboo:                  case Gourgeist:                      return new[]                      {                          forms[710]' // Average                          forms[1006]' // Small                          forms[1007]' // Large                          forms[1008]' // Super                      };                    case Xerneas:                      return new[]                      {                          forms[716]' // Neutral                          forms[1012]' // Active                      };                    case Hoopa:                      return new[]                      {                          forms[720]' // Confined                          forms[1018]' // Unbound                      };                    case Zygarde:                      return new[]                      {                          forms[718]' // 50% (Aura Break)                          forms[1013]' // 10% (Aura Break)                          forms[1014] + "-C"' // 10% Cell (Power Construct)                          forms[1015] + "-C"' // 50% Cell (Power Construct)                          forms[1016]' // 100% Cell (Power Construct)                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsGen6,The following statement contains a magic number: switch ((Species)species)              {                  default:                      return EMPTY;                    case Greninja:                      return new[]                      {                          types[000]' // Normal                          forms[962]' // "Ash"'                          forms[1012]' // "Bonded" - Active                      };                    case Scatterbug:                  case Spewpa:                  case Vivillon:                      return new[]                      {                          forms[666]' // Icy Snow                          forms[963]' // Polar                          forms[964]' // Tundra                          forms[965]' // Continental                          forms[966]' // Garden                          forms[967]' // Elegant                          forms[968]' // Meadow                          forms[969]' // Modern                          forms[970]' // Marine                          forms[971]' // Archipelago                          forms[972]' // High-Plains                          forms[973]' // Sandstorm                          forms[974]' // River                          forms[975]' // Monsoon                          forms[976]' // Savannah                          forms[977]' // Sun                          forms[978]' // Ocean                          forms[979]' // Jungle                          forms[980]' // Fancy                          forms[981]' // Poké Ball                      };                    case Flabébé:                  case Florges:                      return new[]                      {                          forms[669]' // Red                          forms[986]' // Yellow                          forms[987]' // Orange                          forms[988]' // Blue                          forms[989]' // White                      };                    case Floette:                      return new[]                      {                          forms[669]' // Red                          forms[986]' // Yellow                          forms[987]' // Orange                          forms[988]' // Blue                          forms[989]' // White                          forms[990]' // Eternal                      };                    case Furfrou:                      return new[]                      {                          forms[676]' // Natural                          forms[995]' // Heart                          forms[996]' // Star                          forms[997]' // Diamond                          forms[998]' // Deputante                          forms[999]' // Matron                          forms[1000]' // Dandy                          forms[1001]' // La Reine                          forms[1002]' // Kabuki                          forms[1003]' // Pharaoh                      };                    case Meowstic:                      return new[]                      {                          genders[000]' // Male                          genders[001]' // Female                      };                    case Aegislash:                      return new[]                      {                          forms[681]' // Shield                          forms[1005]' // Blade                      };                    case Pumpkaboo:                  case Gourgeist:                      return new[]                      {                          forms[710]' // Average                          forms[1006]' // Small                          forms[1007]' // Large                          forms[1008]' // Super                      };                    case Xerneas:                      return new[]                      {                          forms[716]' // Neutral                          forms[1012]' // Active                      };                    case Hoopa:                      return new[]                      {                          forms[720]' // Confined                          forms[1018]' // Unbound                      };                    case Zygarde:                      return new[]                      {                          forms[718]' // 50% (Aura Break)                          forms[1013]' // 10% (Aura Break)                          forms[1014] + "-C"' // 10% Cell (Power Construct)                          forms[1015] + "-C"' // 50% Cell (Power Construct)                          forms[1016]' // 100% Cell (Power Construct)                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsGen6,The following statement contains a magic number: switch ((Species)species)              {                  default:                      return EMPTY;                    case Greninja:                      return new[]                      {                          types[000]' // Normal                          forms[962]' // "Ash"'                          forms[1012]' // "Bonded" - Active                      };                    case Scatterbug:                  case Spewpa:                  case Vivillon:                      return new[]                      {                          forms[666]' // Icy Snow                          forms[963]' // Polar                          forms[964]' // Tundra                          forms[965]' // Continental                          forms[966]' // Garden                          forms[967]' // Elegant                          forms[968]' // Meadow                          forms[969]' // Modern                          forms[970]' // Marine                          forms[971]' // Archipelago                          forms[972]' // High-Plains                          forms[973]' // Sandstorm                          forms[974]' // River                          forms[975]' // Monsoon                          forms[976]' // Savannah                          forms[977]' // Sun                          forms[978]' // Ocean                          forms[979]' // Jungle                          forms[980]' // Fancy                          forms[981]' // Poké Ball                      };                    case Flabébé:                  case Florges:                      return new[]                      {                          forms[669]' // Red                          forms[986]' // Yellow                          forms[987]' // Orange                          forms[988]' // Blue                          forms[989]' // White                      };                    case Floette:                      return new[]                      {                          forms[669]' // Red                          forms[986]' // Yellow                          forms[987]' // Orange                          forms[988]' // Blue                          forms[989]' // White                          forms[990]' // Eternal                      };                    case Furfrou:                      return new[]                      {                          forms[676]' // Natural                          forms[995]' // Heart                          forms[996]' // Star                          forms[997]' // Diamond                          forms[998]' // Deputante                          forms[999]' // Matron                          forms[1000]' // Dandy                          forms[1001]' // La Reine                          forms[1002]' // Kabuki                          forms[1003]' // Pharaoh                      };                    case Meowstic:                      return new[]                      {                          genders[000]' // Male                          genders[001]' // Female                      };                    case Aegislash:                      return new[]                      {                          forms[681]' // Shield                          forms[1005]' // Blade                      };                    case Pumpkaboo:                  case Gourgeist:                      return new[]                      {                          forms[710]' // Average                          forms[1006]' // Small                          forms[1007]' // Large                          forms[1008]' // Super                      };                    case Xerneas:                      return new[]                      {                          forms[716]' // Neutral                          forms[1012]' // Active                      };                    case Hoopa:                      return new[]                      {                          forms[720]' // Confined                          forms[1018]' // Unbound                      };                    case Zygarde:                      return new[]                      {                          forms[718]' // 50% (Aura Break)                          forms[1013]' // 10% (Aura Break)                          forms[1014] + "-C"' // 10% Cell (Power Construct)                          forms[1015] + "-C"' // 50% Cell (Power Construct)                          forms[1016]' // 100% Cell (Power Construct)                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsGen6,The following statement contains a magic number: switch ((Species)species)              {                  default:                      return EMPTY;                    case Greninja:                      return new[]                      {                          types[000]' // Normal                          forms[962]' // "Ash"'                          forms[1012]' // "Bonded" - Active                      };                    case Scatterbug:                  case Spewpa:                  case Vivillon:                      return new[]                      {                          forms[666]' // Icy Snow                          forms[963]' // Polar                          forms[964]' // Tundra                          forms[965]' // Continental                          forms[966]' // Garden                          forms[967]' // Elegant                          forms[968]' // Meadow                          forms[969]' // Modern                          forms[970]' // Marine                          forms[971]' // Archipelago                          forms[972]' // High-Plains                          forms[973]' // Sandstorm                          forms[974]' // River                          forms[975]' // Monsoon                          forms[976]' // Savannah                          forms[977]' // Sun                          forms[978]' // Ocean                          forms[979]' // Jungle                          forms[980]' // Fancy                          forms[981]' // Poké Ball                      };                    case Flabébé:                  case Florges:                      return new[]                      {                          forms[669]' // Red                          forms[986]' // Yellow                          forms[987]' // Orange                          forms[988]' // Blue                          forms[989]' // White                      };                    case Floette:                      return new[]                      {                          forms[669]' // Red                          forms[986]' // Yellow                          forms[987]' // Orange                          forms[988]' // Blue                          forms[989]' // White                          forms[990]' // Eternal                      };                    case Furfrou:                      return new[]                      {                          forms[676]' // Natural                          forms[995]' // Heart                          forms[996]' // Star                          forms[997]' // Diamond                          forms[998]' // Deputante                          forms[999]' // Matron                          forms[1000]' // Dandy                          forms[1001]' // La Reine                          forms[1002]' // Kabuki                          forms[1003]' // Pharaoh                      };                    case Meowstic:                      return new[]                      {                          genders[000]' // Male                          genders[001]' // Female                      };                    case Aegislash:                      return new[]                      {                          forms[681]' // Shield                          forms[1005]' // Blade                      };                    case Pumpkaboo:                  case Gourgeist:                      return new[]                      {                          forms[710]' // Average                          forms[1006]' // Small                          forms[1007]' // Large                          forms[1008]' // Super                      };                    case Xerneas:                      return new[]                      {                          forms[716]' // Neutral                          forms[1012]' // Active                      };                    case Hoopa:                      return new[]                      {                          forms[720]' // Confined                          forms[1018]' // Unbound                      };                    case Zygarde:                      return new[]                      {                          forms[718]' // 50% (Aura Break)                          forms[1013]' // 10% (Aura Break)                          forms[1014] + "-C"' // 10% Cell (Power Construct)                          forms[1015] + "-C"' // 50% Cell (Power Construct)                          forms[1016]' // 100% Cell (Power Construct)                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsGen6,The following statement contains a magic number: switch ((Species)species)              {                  default:                      return EMPTY;                    case Greninja:                      return new[]                      {                          types[000]' // Normal                          forms[962]' // "Ash"'                          forms[1012]' // "Bonded" - Active                      };                    case Scatterbug:                  case Spewpa:                  case Vivillon:                      return new[]                      {                          forms[666]' // Icy Snow                          forms[963]' // Polar                          forms[964]' // Tundra                          forms[965]' // Continental                          forms[966]' // Garden                          forms[967]' // Elegant                          forms[968]' // Meadow                          forms[969]' // Modern                          forms[970]' // Marine                          forms[971]' // Archipelago                          forms[972]' // High-Plains                          forms[973]' // Sandstorm                          forms[974]' // River                          forms[975]' // Monsoon                          forms[976]' // Savannah                          forms[977]' // Sun                          forms[978]' // Ocean                          forms[979]' // Jungle                          forms[980]' // Fancy                          forms[981]' // Poké Ball                      };                    case Flabébé:                  case Florges:                      return new[]                      {                          forms[669]' // Red                          forms[986]' // Yellow                          forms[987]' // Orange                          forms[988]' // Blue                          forms[989]' // White                      };                    case Floette:                      return new[]                      {                          forms[669]' // Red                          forms[986]' // Yellow                          forms[987]' // Orange                          forms[988]' // Blue                          forms[989]' // White                          forms[990]' // Eternal                      };                    case Furfrou:                      return new[]                      {                          forms[676]' // Natural                          forms[995]' // Heart                          forms[996]' // Star                          forms[997]' // Diamond                          forms[998]' // Deputante                          forms[999]' // Matron                          forms[1000]' // Dandy                          forms[1001]' // La Reine                          forms[1002]' // Kabuki                          forms[1003]' // Pharaoh                      };                    case Meowstic:                      return new[]                      {                          genders[000]' // Male                          genders[001]' // Female                      };                    case Aegislash:                      return new[]                      {                          forms[681]' // Shield                          forms[1005]' // Blade                      };                    case Pumpkaboo:                  case Gourgeist:                      return new[]                      {                          forms[710]' // Average                          forms[1006]' // Small                          forms[1007]' // Large                          forms[1008]' // Super                      };                    case Xerneas:                      return new[]                      {                          forms[716]' // Neutral                          forms[1012]' // Active                      };                    case Hoopa:                      return new[]                      {                          forms[720]' // Confined                          forms[1018]' // Unbound                      };                    case Zygarde:                      return new[]                      {                          forms[718]' // 50% (Aura Break)                          forms[1013]' // 10% (Aura Break)                          forms[1014] + "-C"' // 10% Cell (Power Construct)                          forms[1015] + "-C"' // 50% Cell (Power Construct)                          forms[1016]' // 100% Cell (Power Construct)                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsGen6,The following statement contains a magic number: switch ((Species)species)              {                  default:                      return EMPTY;                    case Greninja:                      return new[]                      {                          types[000]' // Normal                          forms[962]' // "Ash"'                          forms[1012]' // "Bonded" - Active                      };                    case Scatterbug:                  case Spewpa:                  case Vivillon:                      return new[]                      {                          forms[666]' // Icy Snow                          forms[963]' // Polar                          forms[964]' // Tundra                          forms[965]' // Continental                          forms[966]' // Garden                          forms[967]' // Elegant                          forms[968]' // Meadow                          forms[969]' // Modern                          forms[970]' // Marine                          forms[971]' // Archipelago                          forms[972]' // High-Plains                          forms[973]' // Sandstorm                          forms[974]' // River                          forms[975]' // Monsoon                          forms[976]' // Savannah                          forms[977]' // Sun                          forms[978]' // Ocean                          forms[979]' // Jungle                          forms[980]' // Fancy                          forms[981]' // Poké Ball                      };                    case Flabébé:                  case Florges:                      return new[]                      {                          forms[669]' // Red                          forms[986]' // Yellow                          forms[987]' // Orange                          forms[988]' // Blue                          forms[989]' // White                      };                    case Floette:                      return new[]                      {                          forms[669]' // Red                          forms[986]' // Yellow                          forms[987]' // Orange                          forms[988]' // Blue                          forms[989]' // White                          forms[990]' // Eternal                      };                    case Furfrou:                      return new[]                      {                          forms[676]' // Natural                          forms[995]' // Heart                          forms[996]' // Star                          forms[997]' // Diamond                          forms[998]' // Deputante                          forms[999]' // Matron                          forms[1000]' // Dandy                          forms[1001]' // La Reine                          forms[1002]' // Kabuki                          forms[1003]' // Pharaoh                      };                    case Meowstic:                      return new[]                      {                          genders[000]' // Male                          genders[001]' // Female                      };                    case Aegislash:                      return new[]                      {                          forms[681]' // Shield                          forms[1005]' // Blade                      };                    case Pumpkaboo:                  case Gourgeist:                      return new[]                      {                          forms[710]' // Average                          forms[1006]' // Small                          forms[1007]' // Large                          forms[1008]' // Super                      };                    case Xerneas:                      return new[]                      {                          forms[716]' // Neutral                          forms[1012]' // Active                      };                    case Hoopa:                      return new[]                      {                          forms[720]' // Confined                          forms[1018]' // Unbound                      };                    case Zygarde:                      return new[]                      {                          forms[718]' // 50% (Aura Break)                          forms[1013]' // 10% (Aura Break)                          forms[1014] + "-C"' // 10% Cell (Power Construct)                          forms[1015] + "-C"' // 50% Cell (Power Construct)                          forms[1016]' // 100% Cell (Power Construct)                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsGen6,The following statement contains a magic number: switch ((Species)species)              {                  default:                      return EMPTY;                    case Greninja:                      return new[]                      {                          types[000]' // Normal                          forms[962]' // "Ash"'                          forms[1012]' // "Bonded" - Active                      };                    case Scatterbug:                  case Spewpa:                  case Vivillon:                      return new[]                      {                          forms[666]' // Icy Snow                          forms[963]' // Polar                          forms[964]' // Tundra                          forms[965]' // Continental                          forms[966]' // Garden                          forms[967]' // Elegant                          forms[968]' // Meadow                          forms[969]' // Modern                          forms[970]' // Marine                          forms[971]' // Archipelago                          forms[972]' // High-Plains                          forms[973]' // Sandstorm                          forms[974]' // River                          forms[975]' // Monsoon                          forms[976]' // Savannah                          forms[977]' // Sun                          forms[978]' // Ocean                          forms[979]' // Jungle                          forms[980]' // Fancy                          forms[981]' // Poké Ball                      };                    case Flabébé:                  case Florges:                      return new[]                      {                          forms[669]' // Red                          forms[986]' // Yellow                          forms[987]' // Orange                          forms[988]' // Blue                          forms[989]' // White                      };                    case Floette:                      return new[]                      {                          forms[669]' // Red                          forms[986]' // Yellow                          forms[987]' // Orange                          forms[988]' // Blue                          forms[989]' // White                          forms[990]' // Eternal                      };                    case Furfrou:                      return new[]                      {                          forms[676]' // Natural                          forms[995]' // Heart                          forms[996]' // Star                          forms[997]' // Diamond                          forms[998]' // Deputante                          forms[999]' // Matron                          forms[1000]' // Dandy                          forms[1001]' // La Reine                          forms[1002]' // Kabuki                          forms[1003]' // Pharaoh                      };                    case Meowstic:                      return new[]                      {                          genders[000]' // Male                          genders[001]' // Female                      };                    case Aegislash:                      return new[]                      {                          forms[681]' // Shield                          forms[1005]' // Blade                      };                    case Pumpkaboo:                  case Gourgeist:                      return new[]                      {                          forms[710]' // Average                          forms[1006]' // Small                          forms[1007]' // Large                          forms[1008]' // Super                      };                    case Xerneas:                      return new[]                      {                          forms[716]' // Neutral                          forms[1012]' // Active                      };                    case Hoopa:                      return new[]                      {                          forms[720]' // Confined                          forms[1018]' // Unbound                      };                    case Zygarde:                      return new[]                      {                          forms[718]' // 50% (Aura Break)                          forms[1013]' // 10% (Aura Break)                          forms[1014] + "-C"' // 10% Cell (Power Construct)                          forms[1015] + "-C"' // 50% Cell (Power Construct)                          forms[1016]' // 100% Cell (Power Construct)                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsGen6,The following statement contains a magic number: switch ((Species)species)              {                  default:                      return EMPTY;                    case Greninja:                      return new[]                      {                          types[000]' // Normal                          forms[962]' // "Ash"'                          forms[1012]' // "Bonded" - Active                      };                    case Scatterbug:                  case Spewpa:                  case Vivillon:                      return new[]                      {                          forms[666]' // Icy Snow                          forms[963]' // Polar                          forms[964]' // Tundra                          forms[965]' // Continental                          forms[966]' // Garden                          forms[967]' // Elegant                          forms[968]' // Meadow                          forms[969]' // Modern                          forms[970]' // Marine                          forms[971]' // Archipelago                          forms[972]' // High-Plains                          forms[973]' // Sandstorm                          forms[974]' // River                          forms[975]' // Monsoon                          forms[976]' // Savannah                          forms[977]' // Sun                          forms[978]' // Ocean                          forms[979]' // Jungle                          forms[980]' // Fancy                          forms[981]' // Poké Ball                      };                    case Flabébé:                  case Florges:                      return new[]                      {                          forms[669]' // Red                          forms[986]' // Yellow                          forms[987]' // Orange                          forms[988]' // Blue                          forms[989]' // White                      };                    case Floette:                      return new[]                      {                          forms[669]' // Red                          forms[986]' // Yellow                          forms[987]' // Orange                          forms[988]' // Blue                          forms[989]' // White                          forms[990]' // Eternal                      };                    case Furfrou:                      return new[]                      {                          forms[676]' // Natural                          forms[995]' // Heart                          forms[996]' // Star                          forms[997]' // Diamond                          forms[998]' // Deputante                          forms[999]' // Matron                          forms[1000]' // Dandy                          forms[1001]' // La Reine                          forms[1002]' // Kabuki                          forms[1003]' // Pharaoh                      };                    case Meowstic:                      return new[]                      {                          genders[000]' // Male                          genders[001]' // Female                      };                    case Aegislash:                      return new[]                      {                          forms[681]' // Shield                          forms[1005]' // Blade                      };                    case Pumpkaboo:                  case Gourgeist:                      return new[]                      {                          forms[710]' // Average                          forms[1006]' // Small                          forms[1007]' // Large                          forms[1008]' // Super                      };                    case Xerneas:                      return new[]                      {                          forms[716]' // Neutral                          forms[1012]' // Active                      };                    case Hoopa:                      return new[]                      {                          forms[720]' // Confined                          forms[1018]' // Unbound                      };                    case Zygarde:                      return new[]                      {                          forms[718]' // 50% (Aura Break)                          forms[1013]' // 10% (Aura Break)                          forms[1014] + "-C"' // 10% Cell (Power Construct)                          forms[1015] + "-C"' // 50% Cell (Power Construct)                          forms[1016]' // 100% Cell (Power Construct)                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsGen6,The following statement contains a magic number: switch ((Species)species)              {                  default:                      return EMPTY;                    case Greninja:                      return new[]                      {                          types[000]' // Normal                          forms[962]' // "Ash"'                          forms[1012]' // "Bonded" - Active                      };                    case Scatterbug:                  case Spewpa:                  case Vivillon:                      return new[]                      {                          forms[666]' // Icy Snow                          forms[963]' // Polar                          forms[964]' // Tundra                          forms[965]' // Continental                          forms[966]' // Garden                          forms[967]' // Elegant                          forms[968]' // Meadow                          forms[969]' // Modern                          forms[970]' // Marine                          forms[971]' // Archipelago                          forms[972]' // High-Plains                          forms[973]' // Sandstorm                          forms[974]' // River                          forms[975]' // Monsoon                          forms[976]' // Savannah                          forms[977]' // Sun                          forms[978]' // Ocean                          forms[979]' // Jungle                          forms[980]' // Fancy                          forms[981]' // Poké Ball                      };                    case Flabébé:                  case Florges:                      return new[]                      {                          forms[669]' // Red                          forms[986]' // Yellow                          forms[987]' // Orange                          forms[988]' // Blue                          forms[989]' // White                      };                    case Floette:                      return new[]                      {                          forms[669]' // Red                          forms[986]' // Yellow                          forms[987]' // Orange                          forms[988]' // Blue                          forms[989]' // White                          forms[990]' // Eternal                      };                    case Furfrou:                      return new[]                      {                          forms[676]' // Natural                          forms[995]' // Heart                          forms[996]' // Star                          forms[997]' // Diamond                          forms[998]' // Deputante                          forms[999]' // Matron                          forms[1000]' // Dandy                          forms[1001]' // La Reine                          forms[1002]' // Kabuki                          forms[1003]' // Pharaoh                      };                    case Meowstic:                      return new[]                      {                          genders[000]' // Male                          genders[001]' // Female                      };                    case Aegislash:                      return new[]                      {                          forms[681]' // Shield                          forms[1005]' // Blade                      };                    case Pumpkaboo:                  case Gourgeist:                      return new[]                      {                          forms[710]' // Average                          forms[1006]' // Small                          forms[1007]' // Large                          forms[1008]' // Super                      };                    case Xerneas:                      return new[]                      {                          forms[716]' // Neutral                          forms[1012]' // Active                      };                    case Hoopa:                      return new[]                      {                          forms[720]' // Confined                          forms[1018]' // Unbound                      };                    case Zygarde:                      return new[]                      {                          forms[718]' // 50% (Aura Break)                          forms[1013]' // 10% (Aura Break)                          forms[1014] + "-C"' // 10% Cell (Power Construct)                          forms[1015] + "-C"' // 50% Cell (Power Construct)                          forms[1016]' // 100% Cell (Power Construct)                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsGen6,The following statement contains a magic number: switch ((Species)species)              {                  default:                      return EMPTY;                    case Greninja:                      return new[]                      {                          types[000]' // Normal                          forms[962]' // "Ash"'                          forms[1012]' // "Bonded" - Active                      };                    case Scatterbug:                  case Spewpa:                  case Vivillon:                      return new[]                      {                          forms[666]' // Icy Snow                          forms[963]' // Polar                          forms[964]' // Tundra                          forms[965]' // Continental                          forms[966]' // Garden                          forms[967]' // Elegant                          forms[968]' // Meadow                          forms[969]' // Modern                          forms[970]' // Marine                          forms[971]' // Archipelago                          forms[972]' // High-Plains                          forms[973]' // Sandstorm                          forms[974]' // River                          forms[975]' // Monsoon                          forms[976]' // Savannah                          forms[977]' // Sun                          forms[978]' // Ocean                          forms[979]' // Jungle                          forms[980]' // Fancy                          forms[981]' // Poké Ball                      };                    case Flabébé:                  case Florges:                      return new[]                      {                          forms[669]' // Red                          forms[986]' // Yellow                          forms[987]' // Orange                          forms[988]' // Blue                          forms[989]' // White                      };                    case Floette:                      return new[]                      {                          forms[669]' // Red                          forms[986]' // Yellow                          forms[987]' // Orange                          forms[988]' // Blue                          forms[989]' // White                          forms[990]' // Eternal                      };                    case Furfrou:                      return new[]                      {                          forms[676]' // Natural                          forms[995]' // Heart                          forms[996]' // Star                          forms[997]' // Diamond                          forms[998]' // Deputante                          forms[999]' // Matron                          forms[1000]' // Dandy                          forms[1001]' // La Reine                          forms[1002]' // Kabuki                          forms[1003]' // Pharaoh                      };                    case Meowstic:                      return new[]                      {                          genders[000]' // Male                          genders[001]' // Female                      };                    case Aegislash:                      return new[]                      {                          forms[681]' // Shield                          forms[1005]' // Blade                      };                    case Pumpkaboo:                  case Gourgeist:                      return new[]                      {                          forms[710]' // Average                          forms[1006]' // Small                          forms[1007]' // Large                          forms[1008]' // Super                      };                    case Xerneas:                      return new[]                      {                          forms[716]' // Neutral                          forms[1012]' // Active                      };                    case Hoopa:                      return new[]                      {                          forms[720]' // Confined                          forms[1018]' // Unbound                      };                    case Zygarde:                      return new[]                      {                          forms[718]' // 50% (Aura Break)                          forms[1013]' // 10% (Aura Break)                          forms[1014] + "-C"' // 10% Cell (Power Construct)                          forms[1015] + "-C"' // 50% Cell (Power Construct)                          forms[1016]' // 100% Cell (Power Construct)                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsGen6,The following statement contains a magic number: switch ((Species)species)              {                  default:                      return EMPTY;                    case Greninja:                      return new[]                      {                          types[000]' // Normal                          forms[962]' // "Ash"'                          forms[1012]' // "Bonded" - Active                      };                    case Scatterbug:                  case Spewpa:                  case Vivillon:                      return new[]                      {                          forms[666]' // Icy Snow                          forms[963]' // Polar                          forms[964]' // Tundra                          forms[965]' // Continental                          forms[966]' // Garden                          forms[967]' // Elegant                          forms[968]' // Meadow                          forms[969]' // Modern                          forms[970]' // Marine                          forms[971]' // Archipelago                          forms[972]' // High-Plains                          forms[973]' // Sandstorm                          forms[974]' // River                          forms[975]' // Monsoon                          forms[976]' // Savannah                          forms[977]' // Sun                          forms[978]' // Ocean                          forms[979]' // Jungle                          forms[980]' // Fancy                          forms[981]' // Poké Ball                      };                    case Flabébé:                  case Florges:                      return new[]                      {                          forms[669]' // Red                          forms[986]' // Yellow                          forms[987]' // Orange                          forms[988]' // Blue                          forms[989]' // White                      };                    case Floette:                      return new[]                      {                          forms[669]' // Red                          forms[986]' // Yellow                          forms[987]' // Orange                          forms[988]' // Blue                          forms[989]' // White                          forms[990]' // Eternal                      };                    case Furfrou:                      return new[]                      {                          forms[676]' // Natural                          forms[995]' // Heart                          forms[996]' // Star                          forms[997]' // Diamond                          forms[998]' // Deputante                          forms[999]' // Matron                          forms[1000]' // Dandy                          forms[1001]' // La Reine                          forms[1002]' // Kabuki                          forms[1003]' // Pharaoh                      };                    case Meowstic:                      return new[]                      {                          genders[000]' // Male                          genders[001]' // Female                      };                    case Aegislash:                      return new[]                      {                          forms[681]' // Shield                          forms[1005]' // Blade                      };                    case Pumpkaboo:                  case Gourgeist:                      return new[]                      {                          forms[710]' // Average                          forms[1006]' // Small                          forms[1007]' // Large                          forms[1008]' // Super                      };                    case Xerneas:                      return new[]                      {                          forms[716]' // Neutral                          forms[1012]' // Active                      };                    case Hoopa:                      return new[]                      {                          forms[720]' // Confined                          forms[1018]' // Unbound                      };                    case Zygarde:                      return new[]                      {                          forms[718]' // 50% (Aura Break)                          forms[1013]' // 10% (Aura Break)                          forms[1014] + "-C"' // 10% Cell (Power Construct)                          forms[1015] + "-C"' // 50% Cell (Power Construct)                          forms[1016]' // 100% Cell (Power Construct)                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsGen6,The following statement contains a magic number: switch ((Species)species)              {                  default:                      return EMPTY;                    case Greninja:                      return new[]                      {                          types[000]' // Normal                          forms[962]' // "Ash"'                          forms[1012]' // "Bonded" - Active                      };                    case Scatterbug:                  case Spewpa:                  case Vivillon:                      return new[]                      {                          forms[666]' // Icy Snow                          forms[963]' // Polar                          forms[964]' // Tundra                          forms[965]' // Continental                          forms[966]' // Garden                          forms[967]' // Elegant                          forms[968]' // Meadow                          forms[969]' // Modern                          forms[970]' // Marine                          forms[971]' // Archipelago                          forms[972]' // High-Plains                          forms[973]' // Sandstorm                          forms[974]' // River                          forms[975]' // Monsoon                          forms[976]' // Savannah                          forms[977]' // Sun                          forms[978]' // Ocean                          forms[979]' // Jungle                          forms[980]' // Fancy                          forms[981]' // Poké Ball                      };                    case Flabébé:                  case Florges:                      return new[]                      {                          forms[669]' // Red                          forms[986]' // Yellow                          forms[987]' // Orange                          forms[988]' // Blue                          forms[989]' // White                      };                    case Floette:                      return new[]                      {                          forms[669]' // Red                          forms[986]' // Yellow                          forms[987]' // Orange                          forms[988]' // Blue                          forms[989]' // White                          forms[990]' // Eternal                      };                    case Furfrou:                      return new[]                      {                          forms[676]' // Natural                          forms[995]' // Heart                          forms[996]' // Star                          forms[997]' // Diamond                          forms[998]' // Deputante                          forms[999]' // Matron                          forms[1000]' // Dandy                          forms[1001]' // La Reine                          forms[1002]' // Kabuki                          forms[1003]' // Pharaoh                      };                    case Meowstic:                      return new[]                      {                          genders[000]' // Male                          genders[001]' // Female                      };                    case Aegislash:                      return new[]                      {                          forms[681]' // Shield                          forms[1005]' // Blade                      };                    case Pumpkaboo:                  case Gourgeist:                      return new[]                      {                          forms[710]' // Average                          forms[1006]' // Small                          forms[1007]' // Large                          forms[1008]' // Super                      };                    case Xerneas:                      return new[]                      {                          forms[716]' // Neutral                          forms[1012]' // Active                      };                    case Hoopa:                      return new[]                      {                          forms[720]' // Confined                          forms[1018]' // Unbound                      };                    case Zygarde:                      return new[]                      {                          forms[718]' // 50% (Aura Break)                          forms[1013]' // 10% (Aura Break)                          forms[1014] + "-C"' // 10% Cell (Power Construct)                          forms[1015] + "-C"' // 50% Cell (Power Construct)                          forms[1016]' // 100% Cell (Power Construct)                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsGen6,The following statement contains a magic number: switch ((Species)species)              {                  default:                      return EMPTY;                    case Greninja:                      return new[]                      {                          types[000]' // Normal                          forms[962]' // "Ash"'                          forms[1012]' // "Bonded" - Active                      };                    case Scatterbug:                  case Spewpa:                  case Vivillon:                      return new[]                      {                          forms[666]' // Icy Snow                          forms[963]' // Polar                          forms[964]' // Tundra                          forms[965]' // Continental                          forms[966]' // Garden                          forms[967]' // Elegant                          forms[968]' // Meadow                          forms[969]' // Modern                          forms[970]' // Marine                          forms[971]' // Archipelago                          forms[972]' // High-Plains                          forms[973]' // Sandstorm                          forms[974]' // River                          forms[975]' // Monsoon                          forms[976]' // Savannah                          forms[977]' // Sun                          forms[978]' // Ocean                          forms[979]' // Jungle                          forms[980]' // Fancy                          forms[981]' // Poké Ball                      };                    case Flabébé:                  case Florges:                      return new[]                      {                          forms[669]' // Red                          forms[986]' // Yellow                          forms[987]' // Orange                          forms[988]' // Blue                          forms[989]' // White                      };                    case Floette:                      return new[]                      {                          forms[669]' // Red                          forms[986]' // Yellow                          forms[987]' // Orange                          forms[988]' // Blue                          forms[989]' // White                          forms[990]' // Eternal                      };                    case Furfrou:                      return new[]                      {                          forms[676]' // Natural                          forms[995]' // Heart                          forms[996]' // Star                          forms[997]' // Diamond                          forms[998]' // Deputante                          forms[999]' // Matron                          forms[1000]' // Dandy                          forms[1001]' // La Reine                          forms[1002]' // Kabuki                          forms[1003]' // Pharaoh                      };                    case Meowstic:                      return new[]                      {                          genders[000]' // Male                          genders[001]' // Female                      };                    case Aegislash:                      return new[]                      {                          forms[681]' // Shield                          forms[1005]' // Blade                      };                    case Pumpkaboo:                  case Gourgeist:                      return new[]                      {                          forms[710]' // Average                          forms[1006]' // Small                          forms[1007]' // Large                          forms[1008]' // Super                      };                    case Xerneas:                      return new[]                      {                          forms[716]' // Neutral                          forms[1012]' // Active                      };                    case Hoopa:                      return new[]                      {                          forms[720]' // Confined                          forms[1018]' // Unbound                      };                    case Zygarde:                      return new[]                      {                          forms[718]' // 50% (Aura Break)                          forms[1013]' // 10% (Aura Break)                          forms[1014] + "-C"' // 10% Cell (Power Construct)                          forms[1015] + "-C"' // 50% Cell (Power Construct)                          forms[1016]' // 100% Cell (Power Construct)                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsGen6,The following statement contains a magic number: switch ((Species)species)              {                  default:                      return EMPTY;                    case Greninja:                      return new[]                      {                          types[000]' // Normal                          forms[962]' // "Ash"'                          forms[1012]' // "Bonded" - Active                      };                    case Scatterbug:                  case Spewpa:                  case Vivillon:                      return new[]                      {                          forms[666]' // Icy Snow                          forms[963]' // Polar                          forms[964]' // Tundra                          forms[965]' // Continental                          forms[966]' // Garden                          forms[967]' // Elegant                          forms[968]' // Meadow                          forms[969]' // Modern                          forms[970]' // Marine                          forms[971]' // Archipelago                          forms[972]' // High-Plains                          forms[973]' // Sandstorm                          forms[974]' // River                          forms[975]' // Monsoon                          forms[976]' // Savannah                          forms[977]' // Sun                          forms[978]' // Ocean                          forms[979]' // Jungle                          forms[980]' // Fancy                          forms[981]' // Poké Ball                      };                    case Flabébé:                  case Florges:                      return new[]                      {                          forms[669]' // Red                          forms[986]' // Yellow                          forms[987]' // Orange                          forms[988]' // Blue                          forms[989]' // White                      };                    case Floette:                      return new[]                      {                          forms[669]' // Red                          forms[986]' // Yellow                          forms[987]' // Orange                          forms[988]' // Blue                          forms[989]' // White                          forms[990]' // Eternal                      };                    case Furfrou:                      return new[]                      {                          forms[676]' // Natural                          forms[995]' // Heart                          forms[996]' // Star                          forms[997]' // Diamond                          forms[998]' // Deputante                          forms[999]' // Matron                          forms[1000]' // Dandy                          forms[1001]' // La Reine                          forms[1002]' // Kabuki                          forms[1003]' // Pharaoh                      };                    case Meowstic:                      return new[]                      {                          genders[000]' // Male                          genders[001]' // Female                      };                    case Aegislash:                      return new[]                      {                          forms[681]' // Shield                          forms[1005]' // Blade                      };                    case Pumpkaboo:                  case Gourgeist:                      return new[]                      {                          forms[710]' // Average                          forms[1006]' // Small                          forms[1007]' // Large                          forms[1008]' // Super                      };                    case Xerneas:                      return new[]                      {                          forms[716]' // Neutral                          forms[1012]' // Active                      };                    case Hoopa:                      return new[]                      {                          forms[720]' // Confined                          forms[1018]' // Unbound                      };                    case Zygarde:                      return new[]                      {                          forms[718]' // 50% (Aura Break)                          forms[1013]' // 10% (Aura Break)                          forms[1014] + "-C"' // 10% Cell (Power Construct)                          forms[1015] + "-C"' // 50% Cell (Power Construct)                          forms[1016]' // 100% Cell (Power Construct)                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsGen6,The following statement contains a magic number: switch ((Species)species)              {                  default:                      return EMPTY;                    case Greninja:                      return new[]                      {                          types[000]' // Normal                          forms[962]' // "Ash"'                          forms[1012]' // "Bonded" - Active                      };                    case Scatterbug:                  case Spewpa:                  case Vivillon:                      return new[]                      {                          forms[666]' // Icy Snow                          forms[963]' // Polar                          forms[964]' // Tundra                          forms[965]' // Continental                          forms[966]' // Garden                          forms[967]' // Elegant                          forms[968]' // Meadow                          forms[969]' // Modern                          forms[970]' // Marine                          forms[971]' // Archipelago                          forms[972]' // High-Plains                          forms[973]' // Sandstorm                          forms[974]' // River                          forms[975]' // Monsoon                          forms[976]' // Savannah                          forms[977]' // Sun                          forms[978]' // Ocean                          forms[979]' // Jungle                          forms[980]' // Fancy                          forms[981]' // Poké Ball                      };                    case Flabébé:                  case Florges:                      return new[]                      {                          forms[669]' // Red                          forms[986]' // Yellow                          forms[987]' // Orange                          forms[988]' // Blue                          forms[989]' // White                      };                    case Floette:                      return new[]                      {                          forms[669]' // Red                          forms[986]' // Yellow                          forms[987]' // Orange                          forms[988]' // Blue                          forms[989]' // White                          forms[990]' // Eternal                      };                    case Furfrou:                      return new[]                      {                          forms[676]' // Natural                          forms[995]' // Heart                          forms[996]' // Star                          forms[997]' // Diamond                          forms[998]' // Deputante                          forms[999]' // Matron                          forms[1000]' // Dandy                          forms[1001]' // La Reine                          forms[1002]' // Kabuki                          forms[1003]' // Pharaoh                      };                    case Meowstic:                      return new[]                      {                          genders[000]' // Male                          genders[001]' // Female                      };                    case Aegislash:                      return new[]                      {                          forms[681]' // Shield                          forms[1005]' // Blade                      };                    case Pumpkaboo:                  case Gourgeist:                      return new[]                      {                          forms[710]' // Average                          forms[1006]' // Small                          forms[1007]' // Large                          forms[1008]' // Super                      };                    case Xerneas:                      return new[]                      {                          forms[716]' // Neutral                          forms[1012]' // Active                      };                    case Hoopa:                      return new[]                      {                          forms[720]' // Confined                          forms[1018]' // Unbound                      };                    case Zygarde:                      return new[]                      {                          forms[718]' // 50% (Aura Break)                          forms[1013]' // 10% (Aura Break)                          forms[1014] + "-C"' // 10% Cell (Power Construct)                          forms[1015] + "-C"' // 50% Cell (Power Construct)                          forms[1016]' // 100% Cell (Power Construct)                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsGen6,The following statement contains a magic number: switch ((Species)species)              {                  default:                      return EMPTY;                    case Greninja:                      return new[]                      {                          types[000]' // Normal                          forms[962]' // "Ash"'                          forms[1012]' // "Bonded" - Active                      };                    case Scatterbug:                  case Spewpa:                  case Vivillon:                      return new[]                      {                          forms[666]' // Icy Snow                          forms[963]' // Polar                          forms[964]' // Tundra                          forms[965]' // Continental                          forms[966]' // Garden                          forms[967]' // Elegant                          forms[968]' // Meadow                          forms[969]' // Modern                          forms[970]' // Marine                          forms[971]' // Archipelago                          forms[972]' // High-Plains                          forms[973]' // Sandstorm                          forms[974]' // River                          forms[975]' // Monsoon                          forms[976]' // Savannah                          forms[977]' // Sun                          forms[978]' // Ocean                          forms[979]' // Jungle                          forms[980]' // Fancy                          forms[981]' // Poké Ball                      };                    case Flabébé:                  case Florges:                      return new[]                      {                          forms[669]' // Red                          forms[986]' // Yellow                          forms[987]' // Orange                          forms[988]' // Blue                          forms[989]' // White                      };                    case Floette:                      return new[]                      {                          forms[669]' // Red                          forms[986]' // Yellow                          forms[987]' // Orange                          forms[988]' // Blue                          forms[989]' // White                          forms[990]' // Eternal                      };                    case Furfrou:                      return new[]                      {                          forms[676]' // Natural                          forms[995]' // Heart                          forms[996]' // Star                          forms[997]' // Diamond                          forms[998]' // Deputante                          forms[999]' // Matron                          forms[1000]' // Dandy                          forms[1001]' // La Reine                          forms[1002]' // Kabuki                          forms[1003]' // Pharaoh                      };                    case Meowstic:                      return new[]                      {                          genders[000]' // Male                          genders[001]' // Female                      };                    case Aegislash:                      return new[]                      {                          forms[681]' // Shield                          forms[1005]' // Blade                      };                    case Pumpkaboo:                  case Gourgeist:                      return new[]                      {                          forms[710]' // Average                          forms[1006]' // Small                          forms[1007]' // Large                          forms[1008]' // Super                      };                    case Xerneas:                      return new[]                      {                          forms[716]' // Neutral                          forms[1012]' // Active                      };                    case Hoopa:                      return new[]                      {                          forms[720]' // Confined                          forms[1018]' // Unbound                      };                    case Zygarde:                      return new[]                      {                          forms[718]' // 50% (Aura Break)                          forms[1013]' // 10% (Aura Break)                          forms[1014] + "-C"' // 10% Cell (Power Construct)                          forms[1015] + "-C"' // 50% Cell (Power Construct)                          forms[1016]' // 100% Cell (Power Construct)                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsGen6,The following statement contains a magic number: switch ((Species)species)              {                  default:                      return EMPTY;                    case Greninja:                      return new[]                      {                          types[000]' // Normal                          forms[962]' // "Ash"'                          forms[1012]' // "Bonded" - Active                      };                    case Scatterbug:                  case Spewpa:                  case Vivillon:                      return new[]                      {                          forms[666]' // Icy Snow                          forms[963]' // Polar                          forms[964]' // Tundra                          forms[965]' // Continental                          forms[966]' // Garden                          forms[967]' // Elegant                          forms[968]' // Meadow                          forms[969]' // Modern                          forms[970]' // Marine                          forms[971]' // Archipelago                          forms[972]' // High-Plains                          forms[973]' // Sandstorm                          forms[974]' // River                          forms[975]' // Monsoon                          forms[976]' // Savannah                          forms[977]' // Sun                          forms[978]' // Ocean                          forms[979]' // Jungle                          forms[980]' // Fancy                          forms[981]' // Poké Ball                      };                    case Flabébé:                  case Florges:                      return new[]                      {                          forms[669]' // Red                          forms[986]' // Yellow                          forms[987]' // Orange                          forms[988]' // Blue                          forms[989]' // White                      };                    case Floette:                      return new[]                      {                          forms[669]' // Red                          forms[986]' // Yellow                          forms[987]' // Orange                          forms[988]' // Blue                          forms[989]' // White                          forms[990]' // Eternal                      };                    case Furfrou:                      return new[]                      {                          forms[676]' // Natural                          forms[995]' // Heart                          forms[996]' // Star                          forms[997]' // Diamond                          forms[998]' // Deputante                          forms[999]' // Matron                          forms[1000]' // Dandy                          forms[1001]' // La Reine                          forms[1002]' // Kabuki                          forms[1003]' // Pharaoh                      };                    case Meowstic:                      return new[]                      {                          genders[000]' // Male                          genders[001]' // Female                      };                    case Aegislash:                      return new[]                      {                          forms[681]' // Shield                          forms[1005]' // Blade                      };                    case Pumpkaboo:                  case Gourgeist:                      return new[]                      {                          forms[710]' // Average                          forms[1006]' // Small                          forms[1007]' // Large                          forms[1008]' // Super                      };                    case Xerneas:                      return new[]                      {                          forms[716]' // Neutral                          forms[1012]' // Active                      };                    case Hoopa:                      return new[]                      {                          forms[720]' // Confined                          forms[1018]' // Unbound                      };                    case Zygarde:                      return new[]                      {                          forms[718]' // 50% (Aura Break)                          forms[1013]' // 10% (Aura Break)                          forms[1014] + "-C"' // 10% Cell (Power Construct)                          forms[1015] + "-C"' // 50% Cell (Power Construct)                          forms[1016]' // 100% Cell (Power Construct)                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsGen6,The following statement contains a magic number: switch ((Species)species)              {                  default:                      return EMPTY;                    case Greninja:                      return new[]                      {                          types[000]' // Normal                          forms[962]' // "Ash"'                          forms[1012]' // "Bonded" - Active                      };                    case Scatterbug:                  case Spewpa:                  case Vivillon:                      return new[]                      {                          forms[666]' // Icy Snow                          forms[963]' // Polar                          forms[964]' // Tundra                          forms[965]' // Continental                          forms[966]' // Garden                          forms[967]' // Elegant                          forms[968]' // Meadow                          forms[969]' // Modern                          forms[970]' // Marine                          forms[971]' // Archipelago                          forms[972]' // High-Plains                          forms[973]' // Sandstorm                          forms[974]' // River                          forms[975]' // Monsoon                          forms[976]' // Savannah                          forms[977]' // Sun                          forms[978]' // Ocean                          forms[979]' // Jungle                          forms[980]' // Fancy                          forms[981]' // Poké Ball                      };                    case Flabébé:                  case Florges:                      return new[]                      {                          forms[669]' // Red                          forms[986]' // Yellow                          forms[987]' // Orange                          forms[988]' // Blue                          forms[989]' // White                      };                    case Floette:                      return new[]                      {                          forms[669]' // Red                          forms[986]' // Yellow                          forms[987]' // Orange                          forms[988]' // Blue                          forms[989]' // White                          forms[990]' // Eternal                      };                    case Furfrou:                      return new[]                      {                          forms[676]' // Natural                          forms[995]' // Heart                          forms[996]' // Star                          forms[997]' // Diamond                          forms[998]' // Deputante                          forms[999]' // Matron                          forms[1000]' // Dandy                          forms[1001]' // La Reine                          forms[1002]' // Kabuki                          forms[1003]' // Pharaoh                      };                    case Meowstic:                      return new[]                      {                          genders[000]' // Male                          genders[001]' // Female                      };                    case Aegislash:                      return new[]                      {                          forms[681]' // Shield                          forms[1005]' // Blade                      };                    case Pumpkaboo:                  case Gourgeist:                      return new[]                      {                          forms[710]' // Average                          forms[1006]' // Small                          forms[1007]' // Large                          forms[1008]' // Super                      };                    case Xerneas:                      return new[]                      {                          forms[716]' // Neutral                          forms[1012]' // Active                      };                    case Hoopa:                      return new[]                      {                          forms[720]' // Confined                          forms[1018]' // Unbound                      };                    case Zygarde:                      return new[]                      {                          forms[718]' // 50% (Aura Break)                          forms[1013]' // 10% (Aura Break)                          forms[1014] + "-C"' // 10% Cell (Power Construct)                          forms[1015] + "-C"' // 50% Cell (Power Construct)                          forms[1016]' // 100% Cell (Power Construct)                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsGen6,The following statement contains a magic number: switch ((Species)species)              {                  default:                      return EMPTY;                    case Greninja:                      return new[]                      {                          types[000]' // Normal                          forms[962]' // "Ash"'                          forms[1012]' // "Bonded" - Active                      };                    case Scatterbug:                  case Spewpa:                  case Vivillon:                      return new[]                      {                          forms[666]' // Icy Snow                          forms[963]' // Polar                          forms[964]' // Tundra                          forms[965]' // Continental                          forms[966]' // Garden                          forms[967]' // Elegant                          forms[968]' // Meadow                          forms[969]' // Modern                          forms[970]' // Marine                          forms[971]' // Archipelago                          forms[972]' // High-Plains                          forms[973]' // Sandstorm                          forms[974]' // River                          forms[975]' // Monsoon                          forms[976]' // Savannah                          forms[977]' // Sun                          forms[978]' // Ocean                          forms[979]' // Jungle                          forms[980]' // Fancy                          forms[981]' // Poké Ball                      };                    case Flabébé:                  case Florges:                      return new[]                      {                          forms[669]' // Red                          forms[986]' // Yellow                          forms[987]' // Orange                          forms[988]' // Blue                          forms[989]' // White                      };                    case Floette:                      return new[]                      {                          forms[669]' // Red                          forms[986]' // Yellow                          forms[987]' // Orange                          forms[988]' // Blue                          forms[989]' // White                          forms[990]' // Eternal                      };                    case Furfrou:                      return new[]                      {                          forms[676]' // Natural                          forms[995]' // Heart                          forms[996]' // Star                          forms[997]' // Diamond                          forms[998]' // Deputante                          forms[999]' // Matron                          forms[1000]' // Dandy                          forms[1001]' // La Reine                          forms[1002]' // Kabuki                          forms[1003]' // Pharaoh                      };                    case Meowstic:                      return new[]                      {                          genders[000]' // Male                          genders[001]' // Female                      };                    case Aegislash:                      return new[]                      {                          forms[681]' // Shield                          forms[1005]' // Blade                      };                    case Pumpkaboo:                  case Gourgeist:                      return new[]                      {                          forms[710]' // Average                          forms[1006]' // Small                          forms[1007]' // Large                          forms[1008]' // Super                      };                    case Xerneas:                      return new[]                      {                          forms[716]' // Neutral                          forms[1012]' // Active                      };                    case Hoopa:                      return new[]                      {                          forms[720]' // Confined                          forms[1018]' // Unbound                      };                    case Zygarde:                      return new[]                      {                          forms[718]' // 50% (Aura Break)                          forms[1013]' // 10% (Aura Break)                          forms[1014] + "-C"' // 10% Cell (Power Construct)                          forms[1015] + "-C"' // 50% Cell (Power Construct)                          forms[1016]' // 100% Cell (Power Construct)                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsGen6,The following statement contains a magic number: switch ((Species)species)              {                  default:                      return EMPTY;                    case Greninja:                      return new[]                      {                          types[000]' // Normal                          forms[962]' // "Ash"'                          forms[1012]' // "Bonded" - Active                      };                    case Scatterbug:                  case Spewpa:                  case Vivillon:                      return new[]                      {                          forms[666]' // Icy Snow                          forms[963]' // Polar                          forms[964]' // Tundra                          forms[965]' // Continental                          forms[966]' // Garden                          forms[967]' // Elegant                          forms[968]' // Meadow                          forms[969]' // Modern                          forms[970]' // Marine                          forms[971]' // Archipelago                          forms[972]' // High-Plains                          forms[973]' // Sandstorm                          forms[974]' // River                          forms[975]' // Monsoon                          forms[976]' // Savannah                          forms[977]' // Sun                          forms[978]' // Ocean                          forms[979]' // Jungle                          forms[980]' // Fancy                          forms[981]' // Poké Ball                      };                    case Flabébé:                  case Florges:                      return new[]                      {                          forms[669]' // Red                          forms[986]' // Yellow                          forms[987]' // Orange                          forms[988]' // Blue                          forms[989]' // White                      };                    case Floette:                      return new[]                      {                          forms[669]' // Red                          forms[986]' // Yellow                          forms[987]' // Orange                          forms[988]' // Blue                          forms[989]' // White                          forms[990]' // Eternal                      };                    case Furfrou:                      return new[]                      {                          forms[676]' // Natural                          forms[995]' // Heart                          forms[996]' // Star                          forms[997]' // Diamond                          forms[998]' // Deputante                          forms[999]' // Matron                          forms[1000]' // Dandy                          forms[1001]' // La Reine                          forms[1002]' // Kabuki                          forms[1003]' // Pharaoh                      };                    case Meowstic:                      return new[]                      {                          genders[000]' // Male                          genders[001]' // Female                      };                    case Aegislash:                      return new[]                      {                          forms[681]' // Shield                          forms[1005]' // Blade                      };                    case Pumpkaboo:                  case Gourgeist:                      return new[]                      {                          forms[710]' // Average                          forms[1006]' // Small                          forms[1007]' // Large                          forms[1008]' // Super                      };                    case Xerneas:                      return new[]                      {                          forms[716]' // Neutral                          forms[1012]' // Active                      };                    case Hoopa:                      return new[]                      {                          forms[720]' // Confined                          forms[1018]' // Unbound                      };                    case Zygarde:                      return new[]                      {                          forms[718]' // 50% (Aura Break)                          forms[1013]' // 10% (Aura Break)                          forms[1014] + "-C"' // 10% Cell (Power Construct)                          forms[1015] + "-C"' // 50% Cell (Power Construct)                          forms[1016]' // 100% Cell (Power Construct)                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsGen6,The following statement contains a magic number: switch ((Species)species)              {                  default:                      return EMPTY;                    case Greninja:                      return new[]                      {                          types[000]' // Normal                          forms[962]' // "Ash"'                          forms[1012]' // "Bonded" - Active                      };                    case Scatterbug:                  case Spewpa:                  case Vivillon:                      return new[]                      {                          forms[666]' // Icy Snow                          forms[963]' // Polar                          forms[964]' // Tundra                          forms[965]' // Continental                          forms[966]' // Garden                          forms[967]' // Elegant                          forms[968]' // Meadow                          forms[969]' // Modern                          forms[970]' // Marine                          forms[971]' // Archipelago                          forms[972]' // High-Plains                          forms[973]' // Sandstorm                          forms[974]' // River                          forms[975]' // Monsoon                          forms[976]' // Savannah                          forms[977]' // Sun                          forms[978]' // Ocean                          forms[979]' // Jungle                          forms[980]' // Fancy                          forms[981]' // Poké Ball                      };                    case Flabébé:                  case Florges:                      return new[]                      {                          forms[669]' // Red                          forms[986]' // Yellow                          forms[987]' // Orange                          forms[988]' // Blue                          forms[989]' // White                      };                    case Floette:                      return new[]                      {                          forms[669]' // Red                          forms[986]' // Yellow                          forms[987]' // Orange                          forms[988]' // Blue                          forms[989]' // White                          forms[990]' // Eternal                      };                    case Furfrou:                      return new[]                      {                          forms[676]' // Natural                          forms[995]' // Heart                          forms[996]' // Star                          forms[997]' // Diamond                          forms[998]' // Deputante                          forms[999]' // Matron                          forms[1000]' // Dandy                          forms[1001]' // La Reine                          forms[1002]' // Kabuki                          forms[1003]' // Pharaoh                      };                    case Meowstic:                      return new[]                      {                          genders[000]' // Male                          genders[001]' // Female                      };                    case Aegislash:                      return new[]                      {                          forms[681]' // Shield                          forms[1005]' // Blade                      };                    case Pumpkaboo:                  case Gourgeist:                      return new[]                      {                          forms[710]' // Average                          forms[1006]' // Small                          forms[1007]' // Large                          forms[1008]' // Super                      };                    case Xerneas:                      return new[]                      {                          forms[716]' // Neutral                          forms[1012]' // Active                      };                    case Hoopa:                      return new[]                      {                          forms[720]' // Confined                          forms[1018]' // Unbound                      };                    case Zygarde:                      return new[]                      {                          forms[718]' // 50% (Aura Break)                          forms[1013]' // 10% (Aura Break)                          forms[1014] + "-C"' // 10% Cell (Power Construct)                          forms[1015] + "-C"' // 50% Cell (Power Construct)                          forms[1016]' // 100% Cell (Power Construct)                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsGen6,The following statement contains a magic number: switch ((Species)species)              {                  default:                      return EMPTY;                    case Greninja:                      return new[]                      {                          types[000]' // Normal                          forms[962]' // "Ash"'                          forms[1012]' // "Bonded" - Active                      };                    case Scatterbug:                  case Spewpa:                  case Vivillon:                      return new[]                      {                          forms[666]' // Icy Snow                          forms[963]' // Polar                          forms[964]' // Tundra                          forms[965]' // Continental                          forms[966]' // Garden                          forms[967]' // Elegant                          forms[968]' // Meadow                          forms[969]' // Modern                          forms[970]' // Marine                          forms[971]' // Archipelago                          forms[972]' // High-Plains                          forms[973]' // Sandstorm                          forms[974]' // River                          forms[975]' // Monsoon                          forms[976]' // Savannah                          forms[977]' // Sun                          forms[978]' // Ocean                          forms[979]' // Jungle                          forms[980]' // Fancy                          forms[981]' // Poké Ball                      };                    case Flabébé:                  case Florges:                      return new[]                      {                          forms[669]' // Red                          forms[986]' // Yellow                          forms[987]' // Orange                          forms[988]' // Blue                          forms[989]' // White                      };                    case Floette:                      return new[]                      {                          forms[669]' // Red                          forms[986]' // Yellow                          forms[987]' // Orange                          forms[988]' // Blue                          forms[989]' // White                          forms[990]' // Eternal                      };                    case Furfrou:                      return new[]                      {                          forms[676]' // Natural                          forms[995]' // Heart                          forms[996]' // Star                          forms[997]' // Diamond                          forms[998]' // Deputante                          forms[999]' // Matron                          forms[1000]' // Dandy                          forms[1001]' // La Reine                          forms[1002]' // Kabuki                          forms[1003]' // Pharaoh                      };                    case Meowstic:                      return new[]                      {                          genders[000]' // Male                          genders[001]' // Female                      };                    case Aegislash:                      return new[]                      {                          forms[681]' // Shield                          forms[1005]' // Blade                      };                    case Pumpkaboo:                  case Gourgeist:                      return new[]                      {                          forms[710]' // Average                          forms[1006]' // Small                          forms[1007]' // Large                          forms[1008]' // Super                      };                    case Xerneas:                      return new[]                      {                          forms[716]' // Neutral                          forms[1012]' // Active                      };                    case Hoopa:                      return new[]                      {                          forms[720]' // Confined                          forms[1018]' // Unbound                      };                    case Zygarde:                      return new[]                      {                          forms[718]' // 50% (Aura Break)                          forms[1013]' // 10% (Aura Break)                          forms[1014] + "-C"' // 10% Cell (Power Construct)                          forms[1015] + "-C"' // 50% Cell (Power Construct)                          forms[1016]' // 100% Cell (Power Construct)                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsGen6,The following statement contains a magic number: switch ((Species)species)              {                  default:                      return EMPTY;                    case Greninja:                      return new[]                      {                          types[000]' // Normal                          forms[962]' // "Ash"'                          forms[1012]' // "Bonded" - Active                      };                    case Scatterbug:                  case Spewpa:                  case Vivillon:                      return new[]                      {                          forms[666]' // Icy Snow                          forms[963]' // Polar                          forms[964]' // Tundra                          forms[965]' // Continental                          forms[966]' // Garden                          forms[967]' // Elegant                          forms[968]' // Meadow                          forms[969]' // Modern                          forms[970]' // Marine                          forms[971]' // Archipelago                          forms[972]' // High-Plains                          forms[973]' // Sandstorm                          forms[974]' // River                          forms[975]' // Monsoon                          forms[976]' // Savannah                          forms[977]' // Sun                          forms[978]' // Ocean                          forms[979]' // Jungle                          forms[980]' // Fancy                          forms[981]' // Poké Ball                      };                    case Flabébé:                  case Florges:                      return new[]                      {                          forms[669]' // Red                          forms[986]' // Yellow                          forms[987]' // Orange                          forms[988]' // Blue                          forms[989]' // White                      };                    case Floette:                      return new[]                      {                          forms[669]' // Red                          forms[986]' // Yellow                          forms[987]' // Orange                          forms[988]' // Blue                          forms[989]' // White                          forms[990]' // Eternal                      };                    case Furfrou:                      return new[]                      {                          forms[676]' // Natural                          forms[995]' // Heart                          forms[996]' // Star                          forms[997]' // Diamond                          forms[998]' // Deputante                          forms[999]' // Matron                          forms[1000]' // Dandy                          forms[1001]' // La Reine                          forms[1002]' // Kabuki                          forms[1003]' // Pharaoh                      };                    case Meowstic:                      return new[]                      {                          genders[000]' // Male                          genders[001]' // Female                      };                    case Aegislash:                      return new[]                      {                          forms[681]' // Shield                          forms[1005]' // Blade                      };                    case Pumpkaboo:                  case Gourgeist:                      return new[]                      {                          forms[710]' // Average                          forms[1006]' // Small                          forms[1007]' // Large                          forms[1008]' // Super                      };                    case Xerneas:                      return new[]                      {                          forms[716]' // Neutral                          forms[1012]' // Active                      };                    case Hoopa:                      return new[]                      {                          forms[720]' // Confined                          forms[1018]' // Unbound                      };                    case Zygarde:                      return new[]                      {                          forms[718]' // 50% (Aura Break)                          forms[1013]' // 10% (Aura Break)                          forms[1014] + "-C"' // 10% Cell (Power Construct)                          forms[1015] + "-C"' // 50% Cell (Power Construct)                          forms[1016]' // 100% Cell (Power Construct)                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsGen6,The following statement contains a magic number: switch ((Species)species)              {                  default:                      return EMPTY;                    case Greninja:                      return new[]                      {                          types[000]' // Normal                          forms[962]' // "Ash"'                          forms[1012]' // "Bonded" - Active                      };                    case Scatterbug:                  case Spewpa:                  case Vivillon:                      return new[]                      {                          forms[666]' // Icy Snow                          forms[963]' // Polar                          forms[964]' // Tundra                          forms[965]' // Continental                          forms[966]' // Garden                          forms[967]' // Elegant                          forms[968]' // Meadow                          forms[969]' // Modern                          forms[970]' // Marine                          forms[971]' // Archipelago                          forms[972]' // High-Plains                          forms[973]' // Sandstorm                          forms[974]' // River                          forms[975]' // Monsoon                          forms[976]' // Savannah                          forms[977]' // Sun                          forms[978]' // Ocean                          forms[979]' // Jungle                          forms[980]' // Fancy                          forms[981]' // Poké Ball                      };                    case Flabébé:                  case Florges:                      return new[]                      {                          forms[669]' // Red                          forms[986]' // Yellow                          forms[987]' // Orange                          forms[988]' // Blue                          forms[989]' // White                      };                    case Floette:                      return new[]                      {                          forms[669]' // Red                          forms[986]' // Yellow                          forms[987]' // Orange                          forms[988]' // Blue                          forms[989]' // White                          forms[990]' // Eternal                      };                    case Furfrou:                      return new[]                      {                          forms[676]' // Natural                          forms[995]' // Heart                          forms[996]' // Star                          forms[997]' // Diamond                          forms[998]' // Deputante                          forms[999]' // Matron                          forms[1000]' // Dandy                          forms[1001]' // La Reine                          forms[1002]' // Kabuki                          forms[1003]' // Pharaoh                      };                    case Meowstic:                      return new[]                      {                          genders[000]' // Male                          genders[001]' // Female                      };                    case Aegislash:                      return new[]                      {                          forms[681]' // Shield                          forms[1005]' // Blade                      };                    case Pumpkaboo:                  case Gourgeist:                      return new[]                      {                          forms[710]' // Average                          forms[1006]' // Small                          forms[1007]' // Large                          forms[1008]' // Super                      };                    case Xerneas:                      return new[]                      {                          forms[716]' // Neutral                          forms[1012]' // Active                      };                    case Hoopa:                      return new[]                      {                          forms[720]' // Confined                          forms[1018]' // Unbound                      };                    case Zygarde:                      return new[]                      {                          forms[718]' // 50% (Aura Break)                          forms[1013]' // 10% (Aura Break)                          forms[1014] + "-C"' // 10% Cell (Power Construct)                          forms[1015] + "-C"' // 50% Cell (Power Construct)                          forms[1016]' // 100% Cell (Power Construct)                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsGen6,The following statement contains a magic number: switch ((Species)species)              {                  default:                      return EMPTY;                    case Greninja:                      return new[]                      {                          types[000]' // Normal                          forms[962]' // "Ash"'                          forms[1012]' // "Bonded" - Active                      };                    case Scatterbug:                  case Spewpa:                  case Vivillon:                      return new[]                      {                          forms[666]' // Icy Snow                          forms[963]' // Polar                          forms[964]' // Tundra                          forms[965]' // Continental                          forms[966]' // Garden                          forms[967]' // Elegant                          forms[968]' // Meadow                          forms[969]' // Modern                          forms[970]' // Marine                          forms[971]' // Archipelago                          forms[972]' // High-Plains                          forms[973]' // Sandstorm                          forms[974]' // River                          forms[975]' // Monsoon                          forms[976]' // Savannah                          forms[977]' // Sun                          forms[978]' // Ocean                          forms[979]' // Jungle                          forms[980]' // Fancy                          forms[981]' // Poké Ball                      };                    case Flabébé:                  case Florges:                      return new[]                      {                          forms[669]' // Red                          forms[986]' // Yellow                          forms[987]' // Orange                          forms[988]' // Blue                          forms[989]' // White                      };                    case Floette:                      return new[]                      {                          forms[669]' // Red                          forms[986]' // Yellow                          forms[987]' // Orange                          forms[988]' // Blue                          forms[989]' // White                          forms[990]' // Eternal                      };                    case Furfrou:                      return new[]                      {                          forms[676]' // Natural                          forms[995]' // Heart                          forms[996]' // Star                          forms[997]' // Diamond                          forms[998]' // Deputante                          forms[999]' // Matron                          forms[1000]' // Dandy                          forms[1001]' // La Reine                          forms[1002]' // Kabuki                          forms[1003]' // Pharaoh                      };                    case Meowstic:                      return new[]                      {                          genders[000]' // Male                          genders[001]' // Female                      };                    case Aegislash:                      return new[]                      {                          forms[681]' // Shield                          forms[1005]' // Blade                      };                    case Pumpkaboo:                  case Gourgeist:                      return new[]                      {                          forms[710]' // Average                          forms[1006]' // Small                          forms[1007]' // Large                          forms[1008]' // Super                      };                    case Xerneas:                      return new[]                      {                          forms[716]' // Neutral                          forms[1012]' // Active                      };                    case Hoopa:                      return new[]                      {                          forms[720]' // Confined                          forms[1018]' // Unbound                      };                    case Zygarde:                      return new[]                      {                          forms[718]' // 50% (Aura Break)                          forms[1013]' // 10% (Aura Break)                          forms[1014] + "-C"' // 10% Cell (Power Construct)                          forms[1015] + "-C"' // 50% Cell (Power Construct)                          forms[1016]' // 100% Cell (Power Construct)                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsGen6,The following statement contains a magic number: switch ((Species)species)              {                  default:                      return EMPTY;                    case Greninja:                      return new[]                      {                          types[000]' // Normal                          forms[962]' // "Ash"'                          forms[1012]' // "Bonded" - Active                      };                    case Scatterbug:                  case Spewpa:                  case Vivillon:                      return new[]                      {                          forms[666]' // Icy Snow                          forms[963]' // Polar                          forms[964]' // Tundra                          forms[965]' // Continental                          forms[966]' // Garden                          forms[967]' // Elegant                          forms[968]' // Meadow                          forms[969]' // Modern                          forms[970]' // Marine                          forms[971]' // Archipelago                          forms[972]' // High-Plains                          forms[973]' // Sandstorm                          forms[974]' // River                          forms[975]' // Monsoon                          forms[976]' // Savannah                          forms[977]' // Sun                          forms[978]' // Ocean                          forms[979]' // Jungle                          forms[980]' // Fancy                          forms[981]' // Poké Ball                      };                    case Flabébé:                  case Florges:                      return new[]                      {                          forms[669]' // Red                          forms[986]' // Yellow                          forms[987]' // Orange                          forms[988]' // Blue                          forms[989]' // White                      };                    case Floette:                      return new[]                      {                          forms[669]' // Red                          forms[986]' // Yellow                          forms[987]' // Orange                          forms[988]' // Blue                          forms[989]' // White                          forms[990]' // Eternal                      };                    case Furfrou:                      return new[]                      {                          forms[676]' // Natural                          forms[995]' // Heart                          forms[996]' // Star                          forms[997]' // Diamond                          forms[998]' // Deputante                          forms[999]' // Matron                          forms[1000]' // Dandy                          forms[1001]' // La Reine                          forms[1002]' // Kabuki                          forms[1003]' // Pharaoh                      };                    case Meowstic:                      return new[]                      {                          genders[000]' // Male                          genders[001]' // Female                      };                    case Aegislash:                      return new[]                      {                          forms[681]' // Shield                          forms[1005]' // Blade                      };                    case Pumpkaboo:                  case Gourgeist:                      return new[]                      {                          forms[710]' // Average                          forms[1006]' // Small                          forms[1007]' // Large                          forms[1008]' // Super                      };                    case Xerneas:                      return new[]                      {                          forms[716]' // Neutral                          forms[1012]' // Active                      };                    case Hoopa:                      return new[]                      {                          forms[720]' // Confined                          forms[1018]' // Unbound                      };                    case Zygarde:                      return new[]                      {                          forms[718]' // 50% (Aura Break)                          forms[1013]' // 10% (Aura Break)                          forms[1014] + "-C"' // 10% Cell (Power Construct)                          forms[1015] + "-C"' // 50% Cell (Power Construct)                          forms[1016]' // 100% Cell (Power Construct)                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsGen6,The following statement contains a magic number: switch ((Species)species)              {                  default:                      return EMPTY;                    case Greninja:                      return new[]                      {                          types[000]' // Normal                          forms[962]' // "Ash"'                          forms[1012]' // "Bonded" - Active                      };                    case Scatterbug:                  case Spewpa:                  case Vivillon:                      return new[]                      {                          forms[666]' // Icy Snow                          forms[963]' // Polar                          forms[964]' // Tundra                          forms[965]' // Continental                          forms[966]' // Garden                          forms[967]' // Elegant                          forms[968]' // Meadow                          forms[969]' // Modern                          forms[970]' // Marine                          forms[971]' // Archipelago                          forms[972]' // High-Plains                          forms[973]' // Sandstorm                          forms[974]' // River                          forms[975]' // Monsoon                          forms[976]' // Savannah                          forms[977]' // Sun                          forms[978]' // Ocean                          forms[979]' // Jungle                          forms[980]' // Fancy                          forms[981]' // Poké Ball                      };                    case Flabébé:                  case Florges:                      return new[]                      {                          forms[669]' // Red                          forms[986]' // Yellow                          forms[987]' // Orange                          forms[988]' // Blue                          forms[989]' // White                      };                    case Floette:                      return new[]                      {                          forms[669]' // Red                          forms[986]' // Yellow                          forms[987]' // Orange                          forms[988]' // Blue                          forms[989]' // White                          forms[990]' // Eternal                      };                    case Furfrou:                      return new[]                      {                          forms[676]' // Natural                          forms[995]' // Heart                          forms[996]' // Star                          forms[997]' // Diamond                          forms[998]' // Deputante                          forms[999]' // Matron                          forms[1000]' // Dandy                          forms[1001]' // La Reine                          forms[1002]' // Kabuki                          forms[1003]' // Pharaoh                      };                    case Meowstic:                      return new[]                      {                          genders[000]' // Male                          genders[001]' // Female                      };                    case Aegislash:                      return new[]                      {                          forms[681]' // Shield                          forms[1005]' // Blade                      };                    case Pumpkaboo:                  case Gourgeist:                      return new[]                      {                          forms[710]' // Average                          forms[1006]' // Small                          forms[1007]' // Large                          forms[1008]' // Super                      };                    case Xerneas:                      return new[]                      {                          forms[716]' // Neutral                          forms[1012]' // Active                      };                    case Hoopa:                      return new[]                      {                          forms[720]' // Confined                          forms[1018]' // Unbound                      };                    case Zygarde:                      return new[]                      {                          forms[718]' // 50% (Aura Break)                          forms[1013]' // 10% (Aura Break)                          forms[1014] + "-C"' // 10% Cell (Power Construct)                          forms[1015] + "-C"' // 50% Cell (Power Construct)                          forms[1016]' // 100% Cell (Power Construct)                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsGen6,The following statement contains a magic number: switch ((Species)species)              {                  default:                      return EMPTY;                    case Greninja:                      return new[]                      {                          types[000]' // Normal                          forms[962]' // "Ash"'                          forms[1012]' // "Bonded" - Active                      };                    case Scatterbug:                  case Spewpa:                  case Vivillon:                      return new[]                      {                          forms[666]' // Icy Snow                          forms[963]' // Polar                          forms[964]' // Tundra                          forms[965]' // Continental                          forms[966]' // Garden                          forms[967]' // Elegant                          forms[968]' // Meadow                          forms[969]' // Modern                          forms[970]' // Marine                          forms[971]' // Archipelago                          forms[972]' // High-Plains                          forms[973]' // Sandstorm                          forms[974]' // River                          forms[975]' // Monsoon                          forms[976]' // Savannah                          forms[977]' // Sun                          forms[978]' // Ocean                          forms[979]' // Jungle                          forms[980]' // Fancy                          forms[981]' // Poké Ball                      };                    case Flabébé:                  case Florges:                      return new[]                      {                          forms[669]' // Red                          forms[986]' // Yellow                          forms[987]' // Orange                          forms[988]' // Blue                          forms[989]' // White                      };                    case Floette:                      return new[]                      {                          forms[669]' // Red                          forms[986]' // Yellow                          forms[987]' // Orange                          forms[988]' // Blue                          forms[989]' // White                          forms[990]' // Eternal                      };                    case Furfrou:                      return new[]                      {                          forms[676]' // Natural                          forms[995]' // Heart                          forms[996]' // Star                          forms[997]' // Diamond                          forms[998]' // Deputante                          forms[999]' // Matron                          forms[1000]' // Dandy                          forms[1001]' // La Reine                          forms[1002]' // Kabuki                          forms[1003]' // Pharaoh                      };                    case Meowstic:                      return new[]                      {                          genders[000]' // Male                          genders[001]' // Female                      };                    case Aegislash:                      return new[]                      {                          forms[681]' // Shield                          forms[1005]' // Blade                      };                    case Pumpkaboo:                  case Gourgeist:                      return new[]                      {                          forms[710]' // Average                          forms[1006]' // Small                          forms[1007]' // Large                          forms[1008]' // Super                      };                    case Xerneas:                      return new[]                      {                          forms[716]' // Neutral                          forms[1012]' // Active                      };                    case Hoopa:                      return new[]                      {                          forms[720]' // Confined                          forms[1018]' // Unbound                      };                    case Zygarde:                      return new[]                      {                          forms[718]' // 50% (Aura Break)                          forms[1013]' // 10% (Aura Break)                          forms[1014] + "-C"' // 10% Cell (Power Construct)                          forms[1015] + "-C"' // 50% Cell (Power Construct)                          forms[1016]' // 100% Cell (Power Construct)                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsGen6,The following statement contains a magic number: switch ((Species)species)              {                  default:                      return EMPTY;                    case Greninja:                      return new[]                      {                          types[000]' // Normal                          forms[962]' // "Ash"'                          forms[1012]' // "Bonded" - Active                      };                    case Scatterbug:                  case Spewpa:                  case Vivillon:                      return new[]                      {                          forms[666]' // Icy Snow                          forms[963]' // Polar                          forms[964]' // Tundra                          forms[965]' // Continental                          forms[966]' // Garden                          forms[967]' // Elegant                          forms[968]' // Meadow                          forms[969]' // Modern                          forms[970]' // Marine                          forms[971]' // Archipelago                          forms[972]' // High-Plains                          forms[973]' // Sandstorm                          forms[974]' // River                          forms[975]' // Monsoon                          forms[976]' // Savannah                          forms[977]' // Sun                          forms[978]' // Ocean                          forms[979]' // Jungle                          forms[980]' // Fancy                          forms[981]' // Poké Ball                      };                    case Flabébé:                  case Florges:                      return new[]                      {                          forms[669]' // Red                          forms[986]' // Yellow                          forms[987]' // Orange                          forms[988]' // Blue                          forms[989]' // White                      };                    case Floette:                      return new[]                      {                          forms[669]' // Red                          forms[986]' // Yellow                          forms[987]' // Orange                          forms[988]' // Blue                          forms[989]' // White                          forms[990]' // Eternal                      };                    case Furfrou:                      return new[]                      {                          forms[676]' // Natural                          forms[995]' // Heart                          forms[996]' // Star                          forms[997]' // Diamond                          forms[998]' // Deputante                          forms[999]' // Matron                          forms[1000]' // Dandy                          forms[1001]' // La Reine                          forms[1002]' // Kabuki                          forms[1003]' // Pharaoh                      };                    case Meowstic:                      return new[]                      {                          genders[000]' // Male                          genders[001]' // Female                      };                    case Aegislash:                      return new[]                      {                          forms[681]' // Shield                          forms[1005]' // Blade                      };                    case Pumpkaboo:                  case Gourgeist:                      return new[]                      {                          forms[710]' // Average                          forms[1006]' // Small                          forms[1007]' // Large                          forms[1008]' // Super                      };                    case Xerneas:                      return new[]                      {                          forms[716]' // Neutral                          forms[1012]' // Active                      };                    case Hoopa:                      return new[]                      {                          forms[720]' // Confined                          forms[1018]' // Unbound                      };                    case Zygarde:                      return new[]                      {                          forms[718]' // 50% (Aura Break)                          forms[1013]' // 10% (Aura Break)                          forms[1014] + "-C"' // 10% Cell (Power Construct)                          forms[1015] + "-C"' // 50% Cell (Power Construct)                          forms[1016]' // 100% Cell (Power Construct)                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsGen6,The following statement contains a magic number: switch ((Species)species)              {                  default:                      return EMPTY;                    case Greninja:                      return new[]                      {                          types[000]' // Normal                          forms[962]' // "Ash"'                          forms[1012]' // "Bonded" - Active                      };                    case Scatterbug:                  case Spewpa:                  case Vivillon:                      return new[]                      {                          forms[666]' // Icy Snow                          forms[963]' // Polar                          forms[964]' // Tundra                          forms[965]' // Continental                          forms[966]' // Garden                          forms[967]' // Elegant                          forms[968]' // Meadow                          forms[969]' // Modern                          forms[970]' // Marine                          forms[971]' // Archipelago                          forms[972]' // High-Plains                          forms[973]' // Sandstorm                          forms[974]' // River                          forms[975]' // Monsoon                          forms[976]' // Savannah                          forms[977]' // Sun                          forms[978]' // Ocean                          forms[979]' // Jungle                          forms[980]' // Fancy                          forms[981]' // Poké Ball                      };                    case Flabébé:                  case Florges:                      return new[]                      {                          forms[669]' // Red                          forms[986]' // Yellow                          forms[987]' // Orange                          forms[988]' // Blue                          forms[989]' // White                      };                    case Floette:                      return new[]                      {                          forms[669]' // Red                          forms[986]' // Yellow                          forms[987]' // Orange                          forms[988]' // Blue                          forms[989]' // White                          forms[990]' // Eternal                      };                    case Furfrou:                      return new[]                      {                          forms[676]' // Natural                          forms[995]' // Heart                          forms[996]' // Star                          forms[997]' // Diamond                          forms[998]' // Deputante                          forms[999]' // Matron                          forms[1000]' // Dandy                          forms[1001]' // La Reine                          forms[1002]' // Kabuki                          forms[1003]' // Pharaoh                      };                    case Meowstic:                      return new[]                      {                          genders[000]' // Male                          genders[001]' // Female                      };                    case Aegislash:                      return new[]                      {                          forms[681]' // Shield                          forms[1005]' // Blade                      };                    case Pumpkaboo:                  case Gourgeist:                      return new[]                      {                          forms[710]' // Average                          forms[1006]' // Small                          forms[1007]' // Large                          forms[1008]' // Super                      };                    case Xerneas:                      return new[]                      {                          forms[716]' // Neutral                          forms[1012]' // Active                      };                    case Hoopa:                      return new[]                      {                          forms[720]' // Confined                          forms[1018]' // Unbound                      };                    case Zygarde:                      return new[]                      {                          forms[718]' // 50% (Aura Break)                          forms[1013]' // 10% (Aura Break)                          forms[1014] + "-C"' // 10% Cell (Power Construct)                          forms[1015] + "-C"' // 50% Cell (Power Construct)                          forms[1016]' // 100% Cell (Power Construct)                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsGen6,The following statement contains a magic number: switch ((Species)species)              {                  default:                      return EMPTY;                    case Greninja:                      return new[]                      {                          types[000]' // Normal                          forms[962]' // "Ash"'                          forms[1012]' // "Bonded" - Active                      };                    case Scatterbug:                  case Spewpa:                  case Vivillon:                      return new[]                      {                          forms[666]' // Icy Snow                          forms[963]' // Polar                          forms[964]' // Tundra                          forms[965]' // Continental                          forms[966]' // Garden                          forms[967]' // Elegant                          forms[968]' // Meadow                          forms[969]' // Modern                          forms[970]' // Marine                          forms[971]' // Archipelago                          forms[972]' // High-Plains                          forms[973]' // Sandstorm                          forms[974]' // River                          forms[975]' // Monsoon                          forms[976]' // Savannah                          forms[977]' // Sun                          forms[978]' // Ocean                          forms[979]' // Jungle                          forms[980]' // Fancy                          forms[981]' // Poké Ball                      };                    case Flabébé:                  case Florges:                      return new[]                      {                          forms[669]' // Red                          forms[986]' // Yellow                          forms[987]' // Orange                          forms[988]' // Blue                          forms[989]' // White                      };                    case Floette:                      return new[]                      {                          forms[669]' // Red                          forms[986]' // Yellow                          forms[987]' // Orange                          forms[988]' // Blue                          forms[989]' // White                          forms[990]' // Eternal                      };                    case Furfrou:                      return new[]                      {                          forms[676]' // Natural                          forms[995]' // Heart                          forms[996]' // Star                          forms[997]' // Diamond                          forms[998]' // Deputante                          forms[999]' // Matron                          forms[1000]' // Dandy                          forms[1001]' // La Reine                          forms[1002]' // Kabuki                          forms[1003]' // Pharaoh                      };                    case Meowstic:                      return new[]                      {                          genders[000]' // Male                          genders[001]' // Female                      };                    case Aegislash:                      return new[]                      {                          forms[681]' // Shield                          forms[1005]' // Blade                      };                    case Pumpkaboo:                  case Gourgeist:                      return new[]                      {                          forms[710]' // Average                          forms[1006]' // Small                          forms[1007]' // Large                          forms[1008]' // Super                      };                    case Xerneas:                      return new[]                      {                          forms[716]' // Neutral                          forms[1012]' // Active                      };                    case Hoopa:                      return new[]                      {                          forms[720]' // Confined                          forms[1018]' // Unbound                      };                    case Zygarde:                      return new[]                      {                          forms[718]' // 50% (Aura Break)                          forms[1013]' // 10% (Aura Break)                          forms[1014] + "-C"' // 10% Cell (Power Construct)                          forms[1015] + "-C"' // 50% Cell (Power Construct)                          forms[1016]' // 100% Cell (Power Construct)                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsGen6,The following statement contains a magic number: switch ((Species)species)              {                  default:                      return EMPTY;                    case Greninja:                      return new[]                      {                          types[000]' // Normal                          forms[962]' // "Ash"'                          forms[1012]' // "Bonded" - Active                      };                    case Scatterbug:                  case Spewpa:                  case Vivillon:                      return new[]                      {                          forms[666]' // Icy Snow                          forms[963]' // Polar                          forms[964]' // Tundra                          forms[965]' // Continental                          forms[966]' // Garden                          forms[967]' // Elegant                          forms[968]' // Meadow                          forms[969]' // Modern                          forms[970]' // Marine                          forms[971]' // Archipelago                          forms[972]' // High-Plains                          forms[973]' // Sandstorm                          forms[974]' // River                          forms[975]' // Monsoon                          forms[976]' // Savannah                          forms[977]' // Sun                          forms[978]' // Ocean                          forms[979]' // Jungle                          forms[980]' // Fancy                          forms[981]' // Poké Ball                      };                    case Flabébé:                  case Florges:                      return new[]                      {                          forms[669]' // Red                          forms[986]' // Yellow                          forms[987]' // Orange                          forms[988]' // Blue                          forms[989]' // White                      };                    case Floette:                      return new[]                      {                          forms[669]' // Red                          forms[986]' // Yellow                          forms[987]' // Orange                          forms[988]' // Blue                          forms[989]' // White                          forms[990]' // Eternal                      };                    case Furfrou:                      return new[]                      {                          forms[676]' // Natural                          forms[995]' // Heart                          forms[996]' // Star                          forms[997]' // Diamond                          forms[998]' // Deputante                          forms[999]' // Matron                          forms[1000]' // Dandy                          forms[1001]' // La Reine                          forms[1002]' // Kabuki                          forms[1003]' // Pharaoh                      };                    case Meowstic:                      return new[]                      {                          genders[000]' // Male                          genders[001]' // Female                      };                    case Aegislash:                      return new[]                      {                          forms[681]' // Shield                          forms[1005]' // Blade                      };                    case Pumpkaboo:                  case Gourgeist:                      return new[]                      {                          forms[710]' // Average                          forms[1006]' // Small                          forms[1007]' // Large                          forms[1008]' // Super                      };                    case Xerneas:                      return new[]                      {                          forms[716]' // Neutral                          forms[1012]' // Active                      };                    case Hoopa:                      return new[]                      {                          forms[720]' // Confined                          forms[1018]' // Unbound                      };                    case Zygarde:                      return new[]                      {                          forms[718]' // 50% (Aura Break)                          forms[1013]' // 10% (Aura Break)                          forms[1014] + "-C"' // 10% Cell (Power Construct)                          forms[1015] + "-C"' // 50% Cell (Power Construct)                          forms[1016]' // 100% Cell (Power Construct)                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsGen6,The following statement contains a magic number: switch ((Species)species)              {                  default:                      return EMPTY;                    case Greninja:                      return new[]                      {                          types[000]' // Normal                          forms[962]' // "Ash"'                          forms[1012]' // "Bonded" - Active                      };                    case Scatterbug:                  case Spewpa:                  case Vivillon:                      return new[]                      {                          forms[666]' // Icy Snow                          forms[963]' // Polar                          forms[964]' // Tundra                          forms[965]' // Continental                          forms[966]' // Garden                          forms[967]' // Elegant                          forms[968]' // Meadow                          forms[969]' // Modern                          forms[970]' // Marine                          forms[971]' // Archipelago                          forms[972]' // High-Plains                          forms[973]' // Sandstorm                          forms[974]' // River                          forms[975]' // Monsoon                          forms[976]' // Savannah                          forms[977]' // Sun                          forms[978]' // Ocean                          forms[979]' // Jungle                          forms[980]' // Fancy                          forms[981]' // Poké Ball                      };                    case Flabébé:                  case Florges:                      return new[]                      {                          forms[669]' // Red                          forms[986]' // Yellow                          forms[987]' // Orange                          forms[988]' // Blue                          forms[989]' // White                      };                    case Floette:                      return new[]                      {                          forms[669]' // Red                          forms[986]' // Yellow                          forms[987]' // Orange                          forms[988]' // Blue                          forms[989]' // White                          forms[990]' // Eternal                      };                    case Furfrou:                      return new[]                      {                          forms[676]' // Natural                          forms[995]' // Heart                          forms[996]' // Star                          forms[997]' // Diamond                          forms[998]' // Deputante                          forms[999]' // Matron                          forms[1000]' // Dandy                          forms[1001]' // La Reine                          forms[1002]' // Kabuki                          forms[1003]' // Pharaoh                      };                    case Meowstic:                      return new[]                      {                          genders[000]' // Male                          genders[001]' // Female                      };                    case Aegislash:                      return new[]                      {                          forms[681]' // Shield                          forms[1005]' // Blade                      };                    case Pumpkaboo:                  case Gourgeist:                      return new[]                      {                          forms[710]' // Average                          forms[1006]' // Small                          forms[1007]' // Large                          forms[1008]' // Super                      };                    case Xerneas:                      return new[]                      {                          forms[716]' // Neutral                          forms[1012]' // Active                      };                    case Hoopa:                      return new[]                      {                          forms[720]' // Confined                          forms[1018]' // Unbound                      };                    case Zygarde:                      return new[]                      {                          forms[718]' // 50% (Aura Break)                          forms[1013]' // 10% (Aura Break)                          forms[1014] + "-C"' // 10% Cell (Power Construct)                          forms[1015] + "-C"' // 50% Cell (Power Construct)                          forms[1016]' // 100% Cell (Power Construct)                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsGen6,The following statement contains a magic number: switch ((Species)species)              {                  default:                      return EMPTY;                    case Greninja:                      return new[]                      {                          types[000]' // Normal                          forms[962]' // "Ash"'                          forms[1012]' // "Bonded" - Active                      };                    case Scatterbug:                  case Spewpa:                  case Vivillon:                      return new[]                      {                          forms[666]' // Icy Snow                          forms[963]' // Polar                          forms[964]' // Tundra                          forms[965]' // Continental                          forms[966]' // Garden                          forms[967]' // Elegant                          forms[968]' // Meadow                          forms[969]' // Modern                          forms[970]' // Marine                          forms[971]' // Archipelago                          forms[972]' // High-Plains                          forms[973]' // Sandstorm                          forms[974]' // River                          forms[975]' // Monsoon                          forms[976]' // Savannah                          forms[977]' // Sun                          forms[978]' // Ocean                          forms[979]' // Jungle                          forms[980]' // Fancy                          forms[981]' // Poké Ball                      };                    case Flabébé:                  case Florges:                      return new[]                      {                          forms[669]' // Red                          forms[986]' // Yellow                          forms[987]' // Orange                          forms[988]' // Blue                          forms[989]' // White                      };                    case Floette:                      return new[]                      {                          forms[669]' // Red                          forms[986]' // Yellow                          forms[987]' // Orange                          forms[988]' // Blue                          forms[989]' // White                          forms[990]' // Eternal                      };                    case Furfrou:                      return new[]                      {                          forms[676]' // Natural                          forms[995]' // Heart                          forms[996]' // Star                          forms[997]' // Diamond                          forms[998]' // Deputante                          forms[999]' // Matron                          forms[1000]' // Dandy                          forms[1001]' // La Reine                          forms[1002]' // Kabuki                          forms[1003]' // Pharaoh                      };                    case Meowstic:                      return new[]                      {                          genders[000]' // Male                          genders[001]' // Female                      };                    case Aegislash:                      return new[]                      {                          forms[681]' // Shield                          forms[1005]' // Blade                      };                    case Pumpkaboo:                  case Gourgeist:                      return new[]                      {                          forms[710]' // Average                          forms[1006]' // Small                          forms[1007]' // Large                          forms[1008]' // Super                      };                    case Xerneas:                      return new[]                      {                          forms[716]' // Neutral                          forms[1012]' // Active                      };                    case Hoopa:                      return new[]                      {                          forms[720]' // Confined                          forms[1018]' // Unbound                      };                    case Zygarde:                      return new[]                      {                          forms[718]' // 50% (Aura Break)                          forms[1013]' // 10% (Aura Break)                          forms[1014] + "-C"' // 10% Cell (Power Construct)                          forms[1015] + "-C"' // 50% Cell (Power Construct)                          forms[1016]' // 100% Cell (Power Construct)                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsGen6,The following statement contains a magic number: switch ((Species)species)              {                  default:                      return EMPTY;                    case Greninja:                      return new[]                      {                          types[000]' // Normal                          forms[962]' // "Ash"'                          forms[1012]' // "Bonded" - Active                      };                    case Scatterbug:                  case Spewpa:                  case Vivillon:                      return new[]                      {                          forms[666]' // Icy Snow                          forms[963]' // Polar                          forms[964]' // Tundra                          forms[965]' // Continental                          forms[966]' // Garden                          forms[967]' // Elegant                          forms[968]' // Meadow                          forms[969]' // Modern                          forms[970]' // Marine                          forms[971]' // Archipelago                          forms[972]' // High-Plains                          forms[973]' // Sandstorm                          forms[974]' // River                          forms[975]' // Monsoon                          forms[976]' // Savannah                          forms[977]' // Sun                          forms[978]' // Ocean                          forms[979]' // Jungle                          forms[980]' // Fancy                          forms[981]' // Poké Ball                      };                    case Flabébé:                  case Florges:                      return new[]                      {                          forms[669]' // Red                          forms[986]' // Yellow                          forms[987]' // Orange                          forms[988]' // Blue                          forms[989]' // White                      };                    case Floette:                      return new[]                      {                          forms[669]' // Red                          forms[986]' // Yellow                          forms[987]' // Orange                          forms[988]' // Blue                          forms[989]' // White                          forms[990]' // Eternal                      };                    case Furfrou:                      return new[]                      {                          forms[676]' // Natural                          forms[995]' // Heart                          forms[996]' // Star                          forms[997]' // Diamond                          forms[998]' // Deputante                          forms[999]' // Matron                          forms[1000]' // Dandy                          forms[1001]' // La Reine                          forms[1002]' // Kabuki                          forms[1003]' // Pharaoh                      };                    case Meowstic:                      return new[]                      {                          genders[000]' // Male                          genders[001]' // Female                      };                    case Aegislash:                      return new[]                      {                          forms[681]' // Shield                          forms[1005]' // Blade                      };                    case Pumpkaboo:                  case Gourgeist:                      return new[]                      {                          forms[710]' // Average                          forms[1006]' // Small                          forms[1007]' // Large                          forms[1008]' // Super                      };                    case Xerneas:                      return new[]                      {                          forms[716]' // Neutral                          forms[1012]' // Active                      };                    case Hoopa:                      return new[]                      {                          forms[720]' // Confined                          forms[1018]' // Unbound                      };                    case Zygarde:                      return new[]                      {                          forms[718]' // 50% (Aura Break)                          forms[1013]' // 10% (Aura Break)                          forms[1014] + "-C"' // 10% Cell (Power Construct)                          forms[1015] + "-C"' // 50% Cell (Power Construct)                          forms[1016]' // 100% Cell (Power Construct)                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsGen6,The following statement contains a magic number: switch ((Species)species)              {                  default:                      return EMPTY;                    case Greninja:                      return new[]                      {                          types[000]' // Normal                          forms[962]' // "Ash"'                          forms[1012]' // "Bonded" - Active                      };                    case Scatterbug:                  case Spewpa:                  case Vivillon:                      return new[]                      {                          forms[666]' // Icy Snow                          forms[963]' // Polar                          forms[964]' // Tundra                          forms[965]' // Continental                          forms[966]' // Garden                          forms[967]' // Elegant                          forms[968]' // Meadow                          forms[969]' // Modern                          forms[970]' // Marine                          forms[971]' // Archipelago                          forms[972]' // High-Plains                          forms[973]' // Sandstorm                          forms[974]' // River                          forms[975]' // Monsoon                          forms[976]' // Savannah                          forms[977]' // Sun                          forms[978]' // Ocean                          forms[979]' // Jungle                          forms[980]' // Fancy                          forms[981]' // Poké Ball                      };                    case Flabébé:                  case Florges:                      return new[]                      {                          forms[669]' // Red                          forms[986]' // Yellow                          forms[987]' // Orange                          forms[988]' // Blue                          forms[989]' // White                      };                    case Floette:                      return new[]                      {                          forms[669]' // Red                          forms[986]' // Yellow                          forms[987]' // Orange                          forms[988]' // Blue                          forms[989]' // White                          forms[990]' // Eternal                      };                    case Furfrou:                      return new[]                      {                          forms[676]' // Natural                          forms[995]' // Heart                          forms[996]' // Star                          forms[997]' // Diamond                          forms[998]' // Deputante                          forms[999]' // Matron                          forms[1000]' // Dandy                          forms[1001]' // La Reine                          forms[1002]' // Kabuki                          forms[1003]' // Pharaoh                      };                    case Meowstic:                      return new[]                      {                          genders[000]' // Male                          genders[001]' // Female                      };                    case Aegislash:                      return new[]                      {                          forms[681]' // Shield                          forms[1005]' // Blade                      };                    case Pumpkaboo:                  case Gourgeist:                      return new[]                      {                          forms[710]' // Average                          forms[1006]' // Small                          forms[1007]' // Large                          forms[1008]' // Super                      };                    case Xerneas:                      return new[]                      {                          forms[716]' // Neutral                          forms[1012]' // Active                      };                    case Hoopa:                      return new[]                      {                          forms[720]' // Confined                          forms[1018]' // Unbound                      };                    case Zygarde:                      return new[]                      {                          forms[718]' // 50% (Aura Break)                          forms[1013]' // 10% (Aura Break)                          forms[1014] + "-C"' // 10% Cell (Power Construct)                          forms[1015] + "-C"' // 50% Cell (Power Construct)                          forms[1016]' // 100% Cell (Power Construct)                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsGen6,The following statement contains a magic number: switch ((Species)species)              {                  default:                      return EMPTY;                    case Greninja:                      return new[]                      {                          types[000]' // Normal                          forms[962]' // "Ash"'                          forms[1012]' // "Bonded" - Active                      };                    case Scatterbug:                  case Spewpa:                  case Vivillon:                      return new[]                      {                          forms[666]' // Icy Snow                          forms[963]' // Polar                          forms[964]' // Tundra                          forms[965]' // Continental                          forms[966]' // Garden                          forms[967]' // Elegant                          forms[968]' // Meadow                          forms[969]' // Modern                          forms[970]' // Marine                          forms[971]' // Archipelago                          forms[972]' // High-Plains                          forms[973]' // Sandstorm                          forms[974]' // River                          forms[975]' // Monsoon                          forms[976]' // Savannah                          forms[977]' // Sun                          forms[978]' // Ocean                          forms[979]' // Jungle                          forms[980]' // Fancy                          forms[981]' // Poké Ball                      };                    case Flabébé:                  case Florges:                      return new[]                      {                          forms[669]' // Red                          forms[986]' // Yellow                          forms[987]' // Orange                          forms[988]' // Blue                          forms[989]' // White                      };                    case Floette:                      return new[]                      {                          forms[669]' // Red                          forms[986]' // Yellow                          forms[987]' // Orange                          forms[988]' // Blue                          forms[989]' // White                          forms[990]' // Eternal                      };                    case Furfrou:                      return new[]                      {                          forms[676]' // Natural                          forms[995]' // Heart                          forms[996]' // Star                          forms[997]' // Diamond                          forms[998]' // Deputante                          forms[999]' // Matron                          forms[1000]' // Dandy                          forms[1001]' // La Reine                          forms[1002]' // Kabuki                          forms[1003]' // Pharaoh                      };                    case Meowstic:                      return new[]                      {                          genders[000]' // Male                          genders[001]' // Female                      };                    case Aegislash:                      return new[]                      {                          forms[681]' // Shield                          forms[1005]' // Blade                      };                    case Pumpkaboo:                  case Gourgeist:                      return new[]                      {                          forms[710]' // Average                          forms[1006]' // Small                          forms[1007]' // Large                          forms[1008]' // Super                      };                    case Xerneas:                      return new[]                      {                          forms[716]' // Neutral                          forms[1012]' // Active                      };                    case Hoopa:                      return new[]                      {                          forms[720]' // Confined                          forms[1018]' // Unbound                      };                    case Zygarde:                      return new[]                      {                          forms[718]' // 50% (Aura Break)                          forms[1013]' // 10% (Aura Break)                          forms[1014] + "-C"' // 10% Cell (Power Construct)                          forms[1015] + "-C"' // 50% Cell (Power Construct)                          forms[1016]' // 100% Cell (Power Construct)                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsGen6,The following statement contains a magic number: switch ((Species)species)              {                  default:                      return EMPTY;                    case Greninja:                      return new[]                      {                          types[000]' // Normal                          forms[962]' // "Ash"'                          forms[1012]' // "Bonded" - Active                      };                    case Scatterbug:                  case Spewpa:                  case Vivillon:                      return new[]                      {                          forms[666]' // Icy Snow                          forms[963]' // Polar                          forms[964]' // Tundra                          forms[965]' // Continental                          forms[966]' // Garden                          forms[967]' // Elegant                          forms[968]' // Meadow                          forms[969]' // Modern                          forms[970]' // Marine                          forms[971]' // Archipelago                          forms[972]' // High-Plains                          forms[973]' // Sandstorm                          forms[974]' // River                          forms[975]' // Monsoon                          forms[976]' // Savannah                          forms[977]' // Sun                          forms[978]' // Ocean                          forms[979]' // Jungle                          forms[980]' // Fancy                          forms[981]' // Poké Ball                      };                    case Flabébé:                  case Florges:                      return new[]                      {                          forms[669]' // Red                          forms[986]' // Yellow                          forms[987]' // Orange                          forms[988]' // Blue                          forms[989]' // White                      };                    case Floette:                      return new[]                      {                          forms[669]' // Red                          forms[986]' // Yellow                          forms[987]' // Orange                          forms[988]' // Blue                          forms[989]' // White                          forms[990]' // Eternal                      };                    case Furfrou:                      return new[]                      {                          forms[676]' // Natural                          forms[995]' // Heart                          forms[996]' // Star                          forms[997]' // Diamond                          forms[998]' // Deputante                          forms[999]' // Matron                          forms[1000]' // Dandy                          forms[1001]' // La Reine                          forms[1002]' // Kabuki                          forms[1003]' // Pharaoh                      };                    case Meowstic:                      return new[]                      {                          genders[000]' // Male                          genders[001]' // Female                      };                    case Aegislash:                      return new[]                      {                          forms[681]' // Shield                          forms[1005]' // Blade                      };                    case Pumpkaboo:                  case Gourgeist:                      return new[]                      {                          forms[710]' // Average                          forms[1006]' // Small                          forms[1007]' // Large                          forms[1008]' // Super                      };                    case Xerneas:                      return new[]                      {                          forms[716]' // Neutral                          forms[1012]' // Active                      };                    case Hoopa:                      return new[]                      {                          forms[720]' // Confined                          forms[1018]' // Unbound                      };                    case Zygarde:                      return new[]                      {                          forms[718]' // 50% (Aura Break)                          forms[1013]' // 10% (Aura Break)                          forms[1014] + "-C"' // 10% Cell (Power Construct)                          forms[1015] + "-C"' // 50% Cell (Power Construct)                          forms[1016]' // 100% Cell (Power Construct)                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsGen6,The following statement contains a magic number: switch ((Species)species)              {                  default:                      return EMPTY;                    case Greninja:                      return new[]                      {                          types[000]' // Normal                          forms[962]' // "Ash"'                          forms[1012]' // "Bonded" - Active                      };                    case Scatterbug:                  case Spewpa:                  case Vivillon:                      return new[]                      {                          forms[666]' // Icy Snow                          forms[963]' // Polar                          forms[964]' // Tundra                          forms[965]' // Continental                          forms[966]' // Garden                          forms[967]' // Elegant                          forms[968]' // Meadow                          forms[969]' // Modern                          forms[970]' // Marine                          forms[971]' // Archipelago                          forms[972]' // High-Plains                          forms[973]' // Sandstorm                          forms[974]' // River                          forms[975]' // Monsoon                          forms[976]' // Savannah                          forms[977]' // Sun                          forms[978]' // Ocean                          forms[979]' // Jungle                          forms[980]' // Fancy                          forms[981]' // Poké Ball                      };                    case Flabébé:                  case Florges:                      return new[]                      {                          forms[669]' // Red                          forms[986]' // Yellow                          forms[987]' // Orange                          forms[988]' // Blue                          forms[989]' // White                      };                    case Floette:                      return new[]                      {                          forms[669]' // Red                          forms[986]' // Yellow                          forms[987]' // Orange                          forms[988]' // Blue                          forms[989]' // White                          forms[990]' // Eternal                      };                    case Furfrou:                      return new[]                      {                          forms[676]' // Natural                          forms[995]' // Heart                          forms[996]' // Star                          forms[997]' // Diamond                          forms[998]' // Deputante                          forms[999]' // Matron                          forms[1000]' // Dandy                          forms[1001]' // La Reine                          forms[1002]' // Kabuki                          forms[1003]' // Pharaoh                      };                    case Meowstic:                      return new[]                      {                          genders[000]' // Male                          genders[001]' // Female                      };                    case Aegislash:                      return new[]                      {                          forms[681]' // Shield                          forms[1005]' // Blade                      };                    case Pumpkaboo:                  case Gourgeist:                      return new[]                      {                          forms[710]' // Average                          forms[1006]' // Small                          forms[1007]' // Large                          forms[1008]' // Super                      };                    case Xerneas:                      return new[]                      {                          forms[716]' // Neutral                          forms[1012]' // Active                      };                    case Hoopa:                      return new[]                      {                          forms[720]' // Confined                          forms[1018]' // Unbound                      };                    case Zygarde:                      return new[]                      {                          forms[718]' // 50% (Aura Break)                          forms[1013]' // 10% (Aura Break)                          forms[1014] + "-C"' // 10% Cell (Power Construct)                          forms[1015] + "-C"' // 50% Cell (Power Construct)                          forms[1016]' // 100% Cell (Power Construct)                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsGen6,The following statement contains a magic number: switch ((Species)species)              {                  default:                      return EMPTY;                    case Greninja:                      return new[]                      {                          types[000]' // Normal                          forms[962]' // "Ash"'                          forms[1012]' // "Bonded" - Active                      };                    case Scatterbug:                  case Spewpa:                  case Vivillon:                      return new[]                      {                          forms[666]' // Icy Snow                          forms[963]' // Polar                          forms[964]' // Tundra                          forms[965]' // Continental                          forms[966]' // Garden                          forms[967]' // Elegant                          forms[968]' // Meadow                          forms[969]' // Modern                          forms[970]' // Marine                          forms[971]' // Archipelago                          forms[972]' // High-Plains                          forms[973]' // Sandstorm                          forms[974]' // River                          forms[975]' // Monsoon                          forms[976]' // Savannah                          forms[977]' // Sun                          forms[978]' // Ocean                          forms[979]' // Jungle                          forms[980]' // Fancy                          forms[981]' // Poké Ball                      };                    case Flabébé:                  case Florges:                      return new[]                      {                          forms[669]' // Red                          forms[986]' // Yellow                          forms[987]' // Orange                          forms[988]' // Blue                          forms[989]' // White                      };                    case Floette:                      return new[]                      {                          forms[669]' // Red                          forms[986]' // Yellow                          forms[987]' // Orange                          forms[988]' // Blue                          forms[989]' // White                          forms[990]' // Eternal                      };                    case Furfrou:                      return new[]                      {                          forms[676]' // Natural                          forms[995]' // Heart                          forms[996]' // Star                          forms[997]' // Diamond                          forms[998]' // Deputante                          forms[999]' // Matron                          forms[1000]' // Dandy                          forms[1001]' // La Reine                          forms[1002]' // Kabuki                          forms[1003]' // Pharaoh                      };                    case Meowstic:                      return new[]                      {                          genders[000]' // Male                          genders[001]' // Female                      };                    case Aegislash:                      return new[]                      {                          forms[681]' // Shield                          forms[1005]' // Blade                      };                    case Pumpkaboo:                  case Gourgeist:                      return new[]                      {                          forms[710]' // Average                          forms[1006]' // Small                          forms[1007]' // Large                          forms[1008]' // Super                      };                    case Xerneas:                      return new[]                      {                          forms[716]' // Neutral                          forms[1012]' // Active                      };                    case Hoopa:                      return new[]                      {                          forms[720]' // Confined                          forms[1018]' // Unbound                      };                    case Zygarde:                      return new[]                      {                          forms[718]' // 50% (Aura Break)                          forms[1013]' // 10% (Aura Break)                          forms[1014] + "-C"' // 10% Cell (Power Construct)                          forms[1015] + "-C"' // 50% Cell (Power Construct)                          forms[1016]' // 100% Cell (Power Construct)                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsGen6,The following statement contains a magic number: switch ((Species)species)              {                  default:                      return EMPTY;                    case Greninja:                      return new[]                      {                          types[000]' // Normal                          forms[962]' // "Ash"'                          forms[1012]' // "Bonded" - Active                      };                    case Scatterbug:                  case Spewpa:                  case Vivillon:                      return new[]                      {                          forms[666]' // Icy Snow                          forms[963]' // Polar                          forms[964]' // Tundra                          forms[965]' // Continental                          forms[966]' // Garden                          forms[967]' // Elegant                          forms[968]' // Meadow                          forms[969]' // Modern                          forms[970]' // Marine                          forms[971]' // Archipelago                          forms[972]' // High-Plains                          forms[973]' // Sandstorm                          forms[974]' // River                          forms[975]' // Monsoon                          forms[976]' // Savannah                          forms[977]' // Sun                          forms[978]' // Ocean                          forms[979]' // Jungle                          forms[980]' // Fancy                          forms[981]' // Poké Ball                      };                    case Flabébé:                  case Florges:                      return new[]                      {                          forms[669]' // Red                          forms[986]' // Yellow                          forms[987]' // Orange                          forms[988]' // Blue                          forms[989]' // White                      };                    case Floette:                      return new[]                      {                          forms[669]' // Red                          forms[986]' // Yellow                          forms[987]' // Orange                          forms[988]' // Blue                          forms[989]' // White                          forms[990]' // Eternal                      };                    case Furfrou:                      return new[]                      {                          forms[676]' // Natural                          forms[995]' // Heart                          forms[996]' // Star                          forms[997]' // Diamond                          forms[998]' // Deputante                          forms[999]' // Matron                          forms[1000]' // Dandy                          forms[1001]' // La Reine                          forms[1002]' // Kabuki                          forms[1003]' // Pharaoh                      };                    case Meowstic:                      return new[]                      {                          genders[000]' // Male                          genders[001]' // Female                      };                    case Aegislash:                      return new[]                      {                          forms[681]' // Shield                          forms[1005]' // Blade                      };                    case Pumpkaboo:                  case Gourgeist:                      return new[]                      {                          forms[710]' // Average                          forms[1006]' // Small                          forms[1007]' // Large                          forms[1008]' // Super                      };                    case Xerneas:                      return new[]                      {                          forms[716]' // Neutral                          forms[1012]' // Active                      };                    case Hoopa:                      return new[]                      {                          forms[720]' // Confined                          forms[1018]' // Unbound                      };                    case Zygarde:                      return new[]                      {                          forms[718]' // 50% (Aura Break)                          forms[1013]' // 10% (Aura Break)                          forms[1014] + "-C"' // 10% Cell (Power Construct)                          forms[1015] + "-C"' // 50% Cell (Power Construct)                          forms[1016]' // 100% Cell (Power Construct)                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsGen6,The following statement contains a magic number: switch ((Species)species)              {                  default:                      return EMPTY;                    case Greninja:                      return new[]                      {                          types[000]' // Normal                          forms[962]' // "Ash"'                          forms[1012]' // "Bonded" - Active                      };                    case Scatterbug:                  case Spewpa:                  case Vivillon:                      return new[]                      {                          forms[666]' // Icy Snow                          forms[963]' // Polar                          forms[964]' // Tundra                          forms[965]' // Continental                          forms[966]' // Garden                          forms[967]' // Elegant                          forms[968]' // Meadow                          forms[969]' // Modern                          forms[970]' // Marine                          forms[971]' // Archipelago                          forms[972]' // High-Plains                          forms[973]' // Sandstorm                          forms[974]' // River                          forms[975]' // Monsoon                          forms[976]' // Savannah                          forms[977]' // Sun                          forms[978]' // Ocean                          forms[979]' // Jungle                          forms[980]' // Fancy                          forms[981]' // Poké Ball                      };                    case Flabébé:                  case Florges:                      return new[]                      {                          forms[669]' // Red                          forms[986]' // Yellow                          forms[987]' // Orange                          forms[988]' // Blue                          forms[989]' // White                      };                    case Floette:                      return new[]                      {                          forms[669]' // Red                          forms[986]' // Yellow                          forms[987]' // Orange                          forms[988]' // Blue                          forms[989]' // White                          forms[990]' // Eternal                      };                    case Furfrou:                      return new[]                      {                          forms[676]' // Natural                          forms[995]' // Heart                          forms[996]' // Star                          forms[997]' // Diamond                          forms[998]' // Deputante                          forms[999]' // Matron                          forms[1000]' // Dandy                          forms[1001]' // La Reine                          forms[1002]' // Kabuki                          forms[1003]' // Pharaoh                      };                    case Meowstic:                      return new[]                      {                          genders[000]' // Male                          genders[001]' // Female                      };                    case Aegislash:                      return new[]                      {                          forms[681]' // Shield                          forms[1005]' // Blade                      };                    case Pumpkaboo:                  case Gourgeist:                      return new[]                      {                          forms[710]' // Average                          forms[1006]' // Small                          forms[1007]' // Large                          forms[1008]' // Super                      };                    case Xerneas:                      return new[]                      {                          forms[716]' // Neutral                          forms[1012]' // Active                      };                    case Hoopa:                      return new[]                      {                          forms[720]' // Confined                          forms[1018]' // Unbound                      };                    case Zygarde:                      return new[]                      {                          forms[718]' // 50% (Aura Break)                          forms[1013]' // 10% (Aura Break)                          forms[1014] + "-C"' // 10% Cell (Power Construct)                          forms[1015] + "-C"' // 50% Cell (Power Construct)                          forms[1016]' // 100% Cell (Power Construct)                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsGen6,The following statement contains a magic number: switch ((Species)species)              {                  default:                      return EMPTY;                    case Greninja:                      return new[]                      {                          types[000]' // Normal                          forms[962]' // "Ash"'                          forms[1012]' // "Bonded" - Active                      };                    case Scatterbug:                  case Spewpa:                  case Vivillon:                      return new[]                      {                          forms[666]' // Icy Snow                          forms[963]' // Polar                          forms[964]' // Tundra                          forms[965]' // Continental                          forms[966]' // Garden                          forms[967]' // Elegant                          forms[968]' // Meadow                          forms[969]' // Modern                          forms[970]' // Marine                          forms[971]' // Archipelago                          forms[972]' // High-Plains                          forms[973]' // Sandstorm                          forms[974]' // River                          forms[975]' // Monsoon                          forms[976]' // Savannah                          forms[977]' // Sun                          forms[978]' // Ocean                          forms[979]' // Jungle                          forms[980]' // Fancy                          forms[981]' // Poké Ball                      };                    case Flabébé:                  case Florges:                      return new[]                      {                          forms[669]' // Red                          forms[986]' // Yellow                          forms[987]' // Orange                          forms[988]' // Blue                          forms[989]' // White                      };                    case Floette:                      return new[]                      {                          forms[669]' // Red                          forms[986]' // Yellow                          forms[987]' // Orange                          forms[988]' // Blue                          forms[989]' // White                          forms[990]' // Eternal                      };                    case Furfrou:                      return new[]                      {                          forms[676]' // Natural                          forms[995]' // Heart                          forms[996]' // Star                          forms[997]' // Diamond                          forms[998]' // Deputante                          forms[999]' // Matron                          forms[1000]' // Dandy                          forms[1001]' // La Reine                          forms[1002]' // Kabuki                          forms[1003]' // Pharaoh                      };                    case Meowstic:                      return new[]                      {                          genders[000]' // Male                          genders[001]' // Female                      };                    case Aegislash:                      return new[]                      {                          forms[681]' // Shield                          forms[1005]' // Blade                      };                    case Pumpkaboo:                  case Gourgeist:                      return new[]                      {                          forms[710]' // Average                          forms[1006]' // Small                          forms[1007]' // Large                          forms[1008]' // Super                      };                    case Xerneas:                      return new[]                      {                          forms[716]' // Neutral                          forms[1012]' // Active                      };                    case Hoopa:                      return new[]                      {                          forms[720]' // Confined                          forms[1018]' // Unbound                      };                    case Zygarde:                      return new[]                      {                          forms[718]' // 50% (Aura Break)                          forms[1013]' // 10% (Aura Break)                          forms[1014] + "-C"' // 10% Cell (Power Construct)                          forms[1015] + "-C"' // 50% Cell (Power Construct)                          forms[1016]' // 100% Cell (Power Construct)                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsGen6,The following statement contains a magic number: switch ((Species)species)              {                  default:                      return EMPTY;                    case Greninja:                      return new[]                      {                          types[000]' // Normal                          forms[962]' // "Ash"'                          forms[1012]' // "Bonded" - Active                      };                    case Scatterbug:                  case Spewpa:                  case Vivillon:                      return new[]                      {                          forms[666]' // Icy Snow                          forms[963]' // Polar                          forms[964]' // Tundra                          forms[965]' // Continental                          forms[966]' // Garden                          forms[967]' // Elegant                          forms[968]' // Meadow                          forms[969]' // Modern                          forms[970]' // Marine                          forms[971]' // Archipelago                          forms[972]' // High-Plains                          forms[973]' // Sandstorm                          forms[974]' // River                          forms[975]' // Monsoon                          forms[976]' // Savannah                          forms[977]' // Sun                          forms[978]' // Ocean                          forms[979]' // Jungle                          forms[980]' // Fancy                          forms[981]' // Poké Ball                      };                    case Flabébé:                  case Florges:                      return new[]                      {                          forms[669]' // Red                          forms[986]' // Yellow                          forms[987]' // Orange                          forms[988]' // Blue                          forms[989]' // White                      };                    case Floette:                      return new[]                      {                          forms[669]' // Red                          forms[986]' // Yellow                          forms[987]' // Orange                          forms[988]' // Blue                          forms[989]' // White                          forms[990]' // Eternal                      };                    case Furfrou:                      return new[]                      {                          forms[676]' // Natural                          forms[995]' // Heart                          forms[996]' // Star                          forms[997]' // Diamond                          forms[998]' // Deputante                          forms[999]' // Matron                          forms[1000]' // Dandy                          forms[1001]' // La Reine                          forms[1002]' // Kabuki                          forms[1003]' // Pharaoh                      };                    case Meowstic:                      return new[]                      {                          genders[000]' // Male                          genders[001]' // Female                      };                    case Aegislash:                      return new[]                      {                          forms[681]' // Shield                          forms[1005]' // Blade                      };                    case Pumpkaboo:                  case Gourgeist:                      return new[]                      {                          forms[710]' // Average                          forms[1006]' // Small                          forms[1007]' // Large                          forms[1008]' // Super                      };                    case Xerneas:                      return new[]                      {                          forms[716]' // Neutral                          forms[1012]' // Active                      };                    case Hoopa:                      return new[]                      {                          forms[720]' // Confined                          forms[1018]' // Unbound                      };                    case Zygarde:                      return new[]                      {                          forms[718]' // 50% (Aura Break)                          forms[1013]' // 10% (Aura Break)                          forms[1014] + "-C"' // 10% Cell (Power Construct)                          forms[1015] + "-C"' // 50% Cell (Power Construct)                          forms[1016]' // 100% Cell (Power Construct)                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsGen6,The following statement contains a magic number: switch ((Species)species)              {                  default:                      return EMPTY;                    case Greninja:                      return new[]                      {                          types[000]' // Normal                          forms[962]' // "Ash"'                          forms[1012]' // "Bonded" - Active                      };                    case Scatterbug:                  case Spewpa:                  case Vivillon:                      return new[]                      {                          forms[666]' // Icy Snow                          forms[963]' // Polar                          forms[964]' // Tundra                          forms[965]' // Continental                          forms[966]' // Garden                          forms[967]' // Elegant                          forms[968]' // Meadow                          forms[969]' // Modern                          forms[970]' // Marine                          forms[971]' // Archipelago                          forms[972]' // High-Plains                          forms[973]' // Sandstorm                          forms[974]' // River                          forms[975]' // Monsoon                          forms[976]' // Savannah                          forms[977]' // Sun                          forms[978]' // Ocean                          forms[979]' // Jungle                          forms[980]' // Fancy                          forms[981]' // Poké Ball                      };                    case Flabébé:                  case Florges:                      return new[]                      {                          forms[669]' // Red                          forms[986]' // Yellow                          forms[987]' // Orange                          forms[988]' // Blue                          forms[989]' // White                      };                    case Floette:                      return new[]                      {                          forms[669]' // Red                          forms[986]' // Yellow                          forms[987]' // Orange                          forms[988]' // Blue                          forms[989]' // White                          forms[990]' // Eternal                      };                    case Furfrou:                      return new[]                      {                          forms[676]' // Natural                          forms[995]' // Heart                          forms[996]' // Star                          forms[997]' // Diamond                          forms[998]' // Deputante                          forms[999]' // Matron                          forms[1000]' // Dandy                          forms[1001]' // La Reine                          forms[1002]' // Kabuki                          forms[1003]' // Pharaoh                      };                    case Meowstic:                      return new[]                      {                          genders[000]' // Male                          genders[001]' // Female                      };                    case Aegislash:                      return new[]                      {                          forms[681]' // Shield                          forms[1005]' // Blade                      };                    case Pumpkaboo:                  case Gourgeist:                      return new[]                      {                          forms[710]' // Average                          forms[1006]' // Small                          forms[1007]' // Large                          forms[1008]' // Super                      };                    case Xerneas:                      return new[]                      {                          forms[716]' // Neutral                          forms[1012]' // Active                      };                    case Hoopa:                      return new[]                      {                          forms[720]' // Confined                          forms[1018]' // Unbound                      };                    case Zygarde:                      return new[]                      {                          forms[718]' // 50% (Aura Break)                          forms[1013]' // 10% (Aura Break)                          forms[1014] + "-C"' // 10% Cell (Power Construct)                          forms[1015] + "-C"' // 50% Cell (Power Construct)                          forms[1016]' // 100% Cell (Power Construct)                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsGen6,The following statement contains a magic number: switch ((Species)species)              {                  default:                      return EMPTY;                    case Greninja:                      return new[]                      {                          types[000]' // Normal                          forms[962]' // "Ash"'                          forms[1012]' // "Bonded" - Active                      };                    case Scatterbug:                  case Spewpa:                  case Vivillon:                      return new[]                      {                          forms[666]' // Icy Snow                          forms[963]' // Polar                          forms[964]' // Tundra                          forms[965]' // Continental                          forms[966]' // Garden                          forms[967]' // Elegant                          forms[968]' // Meadow                          forms[969]' // Modern                          forms[970]' // Marine                          forms[971]' // Archipelago                          forms[972]' // High-Plains                          forms[973]' // Sandstorm                          forms[974]' // River                          forms[975]' // Monsoon                          forms[976]' // Savannah                          forms[977]' // Sun                          forms[978]' // Ocean                          forms[979]' // Jungle                          forms[980]' // Fancy                          forms[981]' // Poké Ball                      };                    case Flabébé:                  case Florges:                      return new[]                      {                          forms[669]' // Red                          forms[986]' // Yellow                          forms[987]' // Orange                          forms[988]' // Blue                          forms[989]' // White                      };                    case Floette:                      return new[]                      {                          forms[669]' // Red                          forms[986]' // Yellow                          forms[987]' // Orange                          forms[988]' // Blue                          forms[989]' // White                          forms[990]' // Eternal                      };                    case Furfrou:                      return new[]                      {                          forms[676]' // Natural                          forms[995]' // Heart                          forms[996]' // Star                          forms[997]' // Diamond                          forms[998]' // Deputante                          forms[999]' // Matron                          forms[1000]' // Dandy                          forms[1001]' // La Reine                          forms[1002]' // Kabuki                          forms[1003]' // Pharaoh                      };                    case Meowstic:                      return new[]                      {                          genders[000]' // Male                          genders[001]' // Female                      };                    case Aegislash:                      return new[]                      {                          forms[681]' // Shield                          forms[1005]' // Blade                      };                    case Pumpkaboo:                  case Gourgeist:                      return new[]                      {                          forms[710]' // Average                          forms[1006]' // Small                          forms[1007]' // Large                          forms[1008]' // Super                      };                    case Xerneas:                      return new[]                      {                          forms[716]' // Neutral                          forms[1012]' // Active                      };                    case Hoopa:                      return new[]                      {                          forms[720]' // Confined                          forms[1018]' // Unbound                      };                    case Zygarde:                      return new[]                      {                          forms[718]' // 50% (Aura Break)                          forms[1013]' // 10% (Aura Break)                          forms[1014] + "-C"' // 10% Cell (Power Construct)                          forms[1015] + "-C"' // 50% Cell (Power Construct)                          forms[1016]' // 100% Cell (Power Construct)                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsGen6,The following statement contains a magic number: switch ((Species)species)              {                  default:                      return EMPTY;                    case Greninja:                      return new[]                      {                          types[000]' // Normal                          forms[962]' // "Ash"'                          forms[1012]' // "Bonded" - Active                      };                    case Scatterbug:                  case Spewpa:                  case Vivillon:                      return new[]                      {                          forms[666]' // Icy Snow                          forms[963]' // Polar                          forms[964]' // Tundra                          forms[965]' // Continental                          forms[966]' // Garden                          forms[967]' // Elegant                          forms[968]' // Meadow                          forms[969]' // Modern                          forms[970]' // Marine                          forms[971]' // Archipelago                          forms[972]' // High-Plains                          forms[973]' // Sandstorm                          forms[974]' // River                          forms[975]' // Monsoon                          forms[976]' // Savannah                          forms[977]' // Sun                          forms[978]' // Ocean                          forms[979]' // Jungle                          forms[980]' // Fancy                          forms[981]' // Poké Ball                      };                    case Flabébé:                  case Florges:                      return new[]                      {                          forms[669]' // Red                          forms[986]' // Yellow                          forms[987]' // Orange                          forms[988]' // Blue                          forms[989]' // White                      };                    case Floette:                      return new[]                      {                          forms[669]' // Red                          forms[986]' // Yellow                          forms[987]' // Orange                          forms[988]' // Blue                          forms[989]' // White                          forms[990]' // Eternal                      };                    case Furfrou:                      return new[]                      {                          forms[676]' // Natural                          forms[995]' // Heart                          forms[996]' // Star                          forms[997]' // Diamond                          forms[998]' // Deputante                          forms[999]' // Matron                          forms[1000]' // Dandy                          forms[1001]' // La Reine                          forms[1002]' // Kabuki                          forms[1003]' // Pharaoh                      };                    case Meowstic:                      return new[]                      {                          genders[000]' // Male                          genders[001]' // Female                      };                    case Aegislash:                      return new[]                      {                          forms[681]' // Shield                          forms[1005]' // Blade                      };                    case Pumpkaboo:                  case Gourgeist:                      return new[]                      {                          forms[710]' // Average                          forms[1006]' // Small                          forms[1007]' // Large                          forms[1008]' // Super                      };                    case Xerneas:                      return new[]                      {                          forms[716]' // Neutral                          forms[1012]' // Active                      };                    case Hoopa:                      return new[]                      {                          forms[720]' // Confined                          forms[1018]' // Unbound                      };                    case Zygarde:                      return new[]                      {                          forms[718]' // 50% (Aura Break)                          forms[1013]' // 10% (Aura Break)                          forms[1014] + "-C"' // 10% Cell (Power Construct)                          forms[1015] + "-C"' // 50% Cell (Power Construct)                          forms[1016]' // 100% Cell (Power Construct)                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsGen6,The following statement contains a magic number: switch ((Species)species)              {                  default:                      return EMPTY;                    case Greninja:                      return new[]                      {                          types[000]' // Normal                          forms[962]' // "Ash"'                          forms[1012]' // "Bonded" - Active                      };                    case Scatterbug:                  case Spewpa:                  case Vivillon:                      return new[]                      {                          forms[666]' // Icy Snow                          forms[963]' // Polar                          forms[964]' // Tundra                          forms[965]' // Continental                          forms[966]' // Garden                          forms[967]' // Elegant                          forms[968]' // Meadow                          forms[969]' // Modern                          forms[970]' // Marine                          forms[971]' // Archipelago                          forms[972]' // High-Plains                          forms[973]' // Sandstorm                          forms[974]' // River                          forms[975]' // Monsoon                          forms[976]' // Savannah                          forms[977]' // Sun                          forms[978]' // Ocean                          forms[979]' // Jungle                          forms[980]' // Fancy                          forms[981]' // Poké Ball                      };                    case Flabébé:                  case Florges:                      return new[]                      {                          forms[669]' // Red                          forms[986]' // Yellow                          forms[987]' // Orange                          forms[988]' // Blue                          forms[989]' // White                      };                    case Floette:                      return new[]                      {                          forms[669]' // Red                          forms[986]' // Yellow                          forms[987]' // Orange                          forms[988]' // Blue                          forms[989]' // White                          forms[990]' // Eternal                      };                    case Furfrou:                      return new[]                      {                          forms[676]' // Natural                          forms[995]' // Heart                          forms[996]' // Star                          forms[997]' // Diamond                          forms[998]' // Deputante                          forms[999]' // Matron                          forms[1000]' // Dandy                          forms[1001]' // La Reine                          forms[1002]' // Kabuki                          forms[1003]' // Pharaoh                      };                    case Meowstic:                      return new[]                      {                          genders[000]' // Male                          genders[001]' // Female                      };                    case Aegislash:                      return new[]                      {                          forms[681]' // Shield                          forms[1005]' // Blade                      };                    case Pumpkaboo:                  case Gourgeist:                      return new[]                      {                          forms[710]' // Average                          forms[1006]' // Small                          forms[1007]' // Large                          forms[1008]' // Super                      };                    case Xerneas:                      return new[]                      {                          forms[716]' // Neutral                          forms[1012]' // Active                      };                    case Hoopa:                      return new[]                      {                          forms[720]' // Confined                          forms[1018]' // Unbound                      };                    case Zygarde:                      return new[]                      {                          forms[718]' // 50% (Aura Break)                          forms[1013]' // 10% (Aura Break)                          forms[1014] + "-C"' // 10% Cell (Power Construct)                          forms[1015] + "-C"' // 50% Cell (Power Construct)                          forms[1016]' // 100% Cell (Power Construct)                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsGen7,The following statement contains a magic number: switch ((Species)species)              {                  default:                      return EMPTY;                    case Oricorio:                      return new[]                      {                          forms[741]' // "RED" - Baile                          forms[1021]' // "YLW" - Pom-Pom                          forms[1022]' // "PNK" - Pa'u                          forms[1023]' // "BLU" - Sensu                      };                    case Rockruff:                      return new[]                      {                          types[0]' // Normal                          forms[1064]' // Dusk                      };                  case Lycanroc:                      return new[]                      {                          forms[745]' // Midday                          forms[1024]' // Midnight                          forms[1064]' // Dusk                      };                    case Wishiwashi:                      return new[]                      {                          forms[746]'                          forms[1025]' // School                      };                    case Silvally:                      return GetFormsArceus(7' types);                    case Minior:                      return new[]                      {                          forms[774]' // "R-Meteor"' // Meteor Red                          forms[1045]' // "O-Meteor"' // Meteor Orange                          forms[1046]' // "Y-Meteor"' // Meteor Yellow                          forms[1047]' // "G-Meteor"' // Meteor Green                          forms[1048]' // "B-Meteor"' // Meteor Blue                          forms[1049]' // "I-Meteor"' // Meteor Indigo                          forms[1050]' // "V-Meteor"' // Meteor Violet                          forms[1051]' // "R-Core"' // Core Red                          forms[1052]' // "O-Core"' // Core Orange                          forms[1053]' // "Y-Core"' // Core Yellow                          forms[1054]' // "G-Core"' // Core Green                          forms[1055]' // "B-Core"' // Core Blue                          forms[1056]' // "I-Core"' // Core Indigo                          forms[1057]' // "V-Core"' // Core Violet                      };                    case Necrozma:                      return new[]                      {                          types[000]' // Normal                          forms[1065]' // Dusk Mane                          forms[1066]' // Dawn Wings                          forms[1067]' // Ultra Necrozma                      };                    case Magearna:                      return new[]                      {                          types[000]'                          forms[1062]' // Original                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsGen7,The following statement contains a magic number: switch ((Species)species)              {                  default:                      return EMPTY;                    case Oricorio:                      return new[]                      {                          forms[741]' // "RED" - Baile                          forms[1021]' // "YLW" - Pom-Pom                          forms[1022]' // "PNK" - Pa'u                          forms[1023]' // "BLU" - Sensu                      };                    case Rockruff:                      return new[]                      {                          types[0]' // Normal                          forms[1064]' // Dusk                      };                  case Lycanroc:                      return new[]                      {                          forms[745]' // Midday                          forms[1024]' // Midnight                          forms[1064]' // Dusk                      };                    case Wishiwashi:                      return new[]                      {                          forms[746]'                          forms[1025]' // School                      };                    case Silvally:                      return GetFormsArceus(7' types);                    case Minior:                      return new[]                      {                          forms[774]' // "R-Meteor"' // Meteor Red                          forms[1045]' // "O-Meteor"' // Meteor Orange                          forms[1046]' // "Y-Meteor"' // Meteor Yellow                          forms[1047]' // "G-Meteor"' // Meteor Green                          forms[1048]' // "B-Meteor"' // Meteor Blue                          forms[1049]' // "I-Meteor"' // Meteor Indigo                          forms[1050]' // "V-Meteor"' // Meteor Violet                          forms[1051]' // "R-Core"' // Core Red                          forms[1052]' // "O-Core"' // Core Orange                          forms[1053]' // "Y-Core"' // Core Yellow                          forms[1054]' // "G-Core"' // Core Green                          forms[1055]' // "B-Core"' // Core Blue                          forms[1056]' // "I-Core"' // Core Indigo                          forms[1057]' // "V-Core"' // Core Violet                      };                    case Necrozma:                      return new[]                      {                          types[000]' // Normal                          forms[1065]' // Dusk Mane                          forms[1066]' // Dawn Wings                          forms[1067]' // Ultra Necrozma                      };                    case Magearna:                      return new[]                      {                          types[000]'                          forms[1062]' // Original                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsGen7,The following statement contains a magic number: switch ((Species)species)              {                  default:                      return EMPTY;                    case Oricorio:                      return new[]                      {                          forms[741]' // "RED" - Baile                          forms[1021]' // "YLW" - Pom-Pom                          forms[1022]' // "PNK" - Pa'u                          forms[1023]' // "BLU" - Sensu                      };                    case Rockruff:                      return new[]                      {                          types[0]' // Normal                          forms[1064]' // Dusk                      };                  case Lycanroc:                      return new[]                      {                          forms[745]' // Midday                          forms[1024]' // Midnight                          forms[1064]' // Dusk                      };                    case Wishiwashi:                      return new[]                      {                          forms[746]'                          forms[1025]' // School                      };                    case Silvally:                      return GetFormsArceus(7' types);                    case Minior:                      return new[]                      {                          forms[774]' // "R-Meteor"' // Meteor Red                          forms[1045]' // "O-Meteor"' // Meteor Orange                          forms[1046]' // "Y-Meteor"' // Meteor Yellow                          forms[1047]' // "G-Meteor"' // Meteor Green                          forms[1048]' // "B-Meteor"' // Meteor Blue                          forms[1049]' // "I-Meteor"' // Meteor Indigo                          forms[1050]' // "V-Meteor"' // Meteor Violet                          forms[1051]' // "R-Core"' // Core Red                          forms[1052]' // "O-Core"' // Core Orange                          forms[1053]' // "Y-Core"' // Core Yellow                          forms[1054]' // "G-Core"' // Core Green                          forms[1055]' // "B-Core"' // Core Blue                          forms[1056]' // "I-Core"' // Core Indigo                          forms[1057]' // "V-Core"' // Core Violet                      };                    case Necrozma:                      return new[]                      {                          types[000]' // Normal                          forms[1065]' // Dusk Mane                          forms[1066]' // Dawn Wings                          forms[1067]' // Ultra Necrozma                      };                    case Magearna:                      return new[]                      {                          types[000]'                          forms[1062]' // Original                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsGen7,The following statement contains a magic number: switch ((Species)species)              {                  default:                      return EMPTY;                    case Oricorio:                      return new[]                      {                          forms[741]' // "RED" - Baile                          forms[1021]' // "YLW" - Pom-Pom                          forms[1022]' // "PNK" - Pa'u                          forms[1023]' // "BLU" - Sensu                      };                    case Rockruff:                      return new[]                      {                          types[0]' // Normal                          forms[1064]' // Dusk                      };                  case Lycanroc:                      return new[]                      {                          forms[745]' // Midday                          forms[1024]' // Midnight                          forms[1064]' // Dusk                      };                    case Wishiwashi:                      return new[]                      {                          forms[746]'                          forms[1025]' // School                      };                    case Silvally:                      return GetFormsArceus(7' types);                    case Minior:                      return new[]                      {                          forms[774]' // "R-Meteor"' // Meteor Red                          forms[1045]' // "O-Meteor"' // Meteor Orange                          forms[1046]' // "Y-Meteor"' // Meteor Yellow                          forms[1047]' // "G-Meteor"' // Meteor Green                          forms[1048]' // "B-Meteor"' // Meteor Blue                          forms[1049]' // "I-Meteor"' // Meteor Indigo                          forms[1050]' // "V-Meteor"' // Meteor Violet                          forms[1051]' // "R-Core"' // Core Red                          forms[1052]' // "O-Core"' // Core Orange                          forms[1053]' // "Y-Core"' // Core Yellow                          forms[1054]' // "G-Core"' // Core Green                          forms[1055]' // "B-Core"' // Core Blue                          forms[1056]' // "I-Core"' // Core Indigo                          forms[1057]' // "V-Core"' // Core Violet                      };                    case Necrozma:                      return new[]                      {                          types[000]' // Normal                          forms[1065]' // Dusk Mane                          forms[1066]' // Dawn Wings                          forms[1067]' // Ultra Necrozma                      };                    case Magearna:                      return new[]                      {                          types[000]'                          forms[1062]' // Original                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsGen7,The following statement contains a magic number: switch ((Species)species)              {                  default:                      return EMPTY;                    case Oricorio:                      return new[]                      {                          forms[741]' // "RED" - Baile                          forms[1021]' // "YLW" - Pom-Pom                          forms[1022]' // "PNK" - Pa'u                          forms[1023]' // "BLU" - Sensu                      };                    case Rockruff:                      return new[]                      {                          types[0]' // Normal                          forms[1064]' // Dusk                      };                  case Lycanroc:                      return new[]                      {                          forms[745]' // Midday                          forms[1024]' // Midnight                          forms[1064]' // Dusk                      };                    case Wishiwashi:                      return new[]                      {                          forms[746]'                          forms[1025]' // School                      };                    case Silvally:                      return GetFormsArceus(7' types);                    case Minior:                      return new[]                      {                          forms[774]' // "R-Meteor"' // Meteor Red                          forms[1045]' // "O-Meteor"' // Meteor Orange                          forms[1046]' // "Y-Meteor"' // Meteor Yellow                          forms[1047]' // "G-Meteor"' // Meteor Green                          forms[1048]' // "B-Meteor"' // Meteor Blue                          forms[1049]' // "I-Meteor"' // Meteor Indigo                          forms[1050]' // "V-Meteor"' // Meteor Violet                          forms[1051]' // "R-Core"' // Core Red                          forms[1052]' // "O-Core"' // Core Orange                          forms[1053]' // "Y-Core"' // Core Yellow                          forms[1054]' // "G-Core"' // Core Green                          forms[1055]' // "B-Core"' // Core Blue                          forms[1056]' // "I-Core"' // Core Indigo                          forms[1057]' // "V-Core"' // Core Violet                      };                    case Necrozma:                      return new[]                      {                          types[000]' // Normal                          forms[1065]' // Dusk Mane                          forms[1066]' // Dawn Wings                          forms[1067]' // Ultra Necrozma                      };                    case Magearna:                      return new[]                      {                          types[000]'                          forms[1062]' // Original                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsGen7,The following statement contains a magic number: switch ((Species)species)              {                  default:                      return EMPTY;                    case Oricorio:                      return new[]                      {                          forms[741]' // "RED" - Baile                          forms[1021]' // "YLW" - Pom-Pom                          forms[1022]' // "PNK" - Pa'u                          forms[1023]' // "BLU" - Sensu                      };                    case Rockruff:                      return new[]                      {                          types[0]' // Normal                          forms[1064]' // Dusk                      };                  case Lycanroc:                      return new[]                      {                          forms[745]' // Midday                          forms[1024]' // Midnight                          forms[1064]' // Dusk                      };                    case Wishiwashi:                      return new[]                      {                          forms[746]'                          forms[1025]' // School                      };                    case Silvally:                      return GetFormsArceus(7' types);                    case Minior:                      return new[]                      {                          forms[774]' // "R-Meteor"' // Meteor Red                          forms[1045]' // "O-Meteor"' // Meteor Orange                          forms[1046]' // "Y-Meteor"' // Meteor Yellow                          forms[1047]' // "G-Meteor"' // Meteor Green                          forms[1048]' // "B-Meteor"' // Meteor Blue                          forms[1049]' // "I-Meteor"' // Meteor Indigo                          forms[1050]' // "V-Meteor"' // Meteor Violet                          forms[1051]' // "R-Core"' // Core Red                          forms[1052]' // "O-Core"' // Core Orange                          forms[1053]' // "Y-Core"' // Core Yellow                          forms[1054]' // "G-Core"' // Core Green                          forms[1055]' // "B-Core"' // Core Blue                          forms[1056]' // "I-Core"' // Core Indigo                          forms[1057]' // "V-Core"' // Core Violet                      };                    case Necrozma:                      return new[]                      {                          types[000]' // Normal                          forms[1065]' // Dusk Mane                          forms[1066]' // Dawn Wings                          forms[1067]' // Ultra Necrozma                      };                    case Magearna:                      return new[]                      {                          types[000]'                          forms[1062]' // Original                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsGen7,The following statement contains a magic number: switch ((Species)species)              {                  default:                      return EMPTY;                    case Oricorio:                      return new[]                      {                          forms[741]' // "RED" - Baile                          forms[1021]' // "YLW" - Pom-Pom                          forms[1022]' // "PNK" - Pa'u                          forms[1023]' // "BLU" - Sensu                      };                    case Rockruff:                      return new[]                      {                          types[0]' // Normal                          forms[1064]' // Dusk                      };                  case Lycanroc:                      return new[]                      {                          forms[745]' // Midday                          forms[1024]' // Midnight                          forms[1064]' // Dusk                      };                    case Wishiwashi:                      return new[]                      {                          forms[746]'                          forms[1025]' // School                      };                    case Silvally:                      return GetFormsArceus(7' types);                    case Minior:                      return new[]                      {                          forms[774]' // "R-Meteor"' // Meteor Red                          forms[1045]' // "O-Meteor"' // Meteor Orange                          forms[1046]' // "Y-Meteor"' // Meteor Yellow                          forms[1047]' // "G-Meteor"' // Meteor Green                          forms[1048]' // "B-Meteor"' // Meteor Blue                          forms[1049]' // "I-Meteor"' // Meteor Indigo                          forms[1050]' // "V-Meteor"' // Meteor Violet                          forms[1051]' // "R-Core"' // Core Red                          forms[1052]' // "O-Core"' // Core Orange                          forms[1053]' // "Y-Core"' // Core Yellow                          forms[1054]' // "G-Core"' // Core Green                          forms[1055]' // "B-Core"' // Core Blue                          forms[1056]' // "I-Core"' // Core Indigo                          forms[1057]' // "V-Core"' // Core Violet                      };                    case Necrozma:                      return new[]                      {                          types[000]' // Normal                          forms[1065]' // Dusk Mane                          forms[1066]' // Dawn Wings                          forms[1067]' // Ultra Necrozma                      };                    case Magearna:                      return new[]                      {                          types[000]'                          forms[1062]' // Original                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsGen7,The following statement contains a magic number: switch ((Species)species)              {                  default:                      return EMPTY;                    case Oricorio:                      return new[]                      {                          forms[741]' // "RED" - Baile                          forms[1021]' // "YLW" - Pom-Pom                          forms[1022]' // "PNK" - Pa'u                          forms[1023]' // "BLU" - Sensu                      };                    case Rockruff:                      return new[]                      {                          types[0]' // Normal                          forms[1064]' // Dusk                      };                  case Lycanroc:                      return new[]                      {                          forms[745]' // Midday                          forms[1024]' // Midnight                          forms[1064]' // Dusk                      };                    case Wishiwashi:                      return new[]                      {                          forms[746]'                          forms[1025]' // School                      };                    case Silvally:                      return GetFormsArceus(7' types);                    case Minior:                      return new[]                      {                          forms[774]' // "R-Meteor"' // Meteor Red                          forms[1045]' // "O-Meteor"' // Meteor Orange                          forms[1046]' // "Y-Meteor"' // Meteor Yellow                          forms[1047]' // "G-Meteor"' // Meteor Green                          forms[1048]' // "B-Meteor"' // Meteor Blue                          forms[1049]' // "I-Meteor"' // Meteor Indigo                          forms[1050]' // "V-Meteor"' // Meteor Violet                          forms[1051]' // "R-Core"' // Core Red                          forms[1052]' // "O-Core"' // Core Orange                          forms[1053]' // "Y-Core"' // Core Yellow                          forms[1054]' // "G-Core"' // Core Green                          forms[1055]' // "B-Core"' // Core Blue                          forms[1056]' // "I-Core"' // Core Indigo                          forms[1057]' // "V-Core"' // Core Violet                      };                    case Necrozma:                      return new[]                      {                          types[000]' // Normal                          forms[1065]' // Dusk Mane                          forms[1066]' // Dawn Wings                          forms[1067]' // Ultra Necrozma                      };                    case Magearna:                      return new[]                      {                          types[000]'                          forms[1062]' // Original                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsGen7,The following statement contains a magic number: switch ((Species)species)              {                  default:                      return EMPTY;                    case Oricorio:                      return new[]                      {                          forms[741]' // "RED" - Baile                          forms[1021]' // "YLW" - Pom-Pom                          forms[1022]' // "PNK" - Pa'u                          forms[1023]' // "BLU" - Sensu                      };                    case Rockruff:                      return new[]                      {                          types[0]' // Normal                          forms[1064]' // Dusk                      };                  case Lycanroc:                      return new[]                      {                          forms[745]' // Midday                          forms[1024]' // Midnight                          forms[1064]' // Dusk                      };                    case Wishiwashi:                      return new[]                      {                          forms[746]'                          forms[1025]' // School                      };                    case Silvally:                      return GetFormsArceus(7' types);                    case Minior:                      return new[]                      {                          forms[774]' // "R-Meteor"' // Meteor Red                          forms[1045]' // "O-Meteor"' // Meteor Orange                          forms[1046]' // "Y-Meteor"' // Meteor Yellow                          forms[1047]' // "G-Meteor"' // Meteor Green                          forms[1048]' // "B-Meteor"' // Meteor Blue                          forms[1049]' // "I-Meteor"' // Meteor Indigo                          forms[1050]' // "V-Meteor"' // Meteor Violet                          forms[1051]' // "R-Core"' // Core Red                          forms[1052]' // "O-Core"' // Core Orange                          forms[1053]' // "Y-Core"' // Core Yellow                          forms[1054]' // "G-Core"' // Core Green                          forms[1055]' // "B-Core"' // Core Blue                          forms[1056]' // "I-Core"' // Core Indigo                          forms[1057]' // "V-Core"' // Core Violet                      };                    case Necrozma:                      return new[]                      {                          types[000]' // Normal                          forms[1065]' // Dusk Mane                          forms[1066]' // Dawn Wings                          forms[1067]' // Ultra Necrozma                      };                    case Magearna:                      return new[]                      {                          types[000]'                          forms[1062]' // Original                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsGen7,The following statement contains a magic number: switch ((Species)species)              {                  default:                      return EMPTY;                    case Oricorio:                      return new[]                      {                          forms[741]' // "RED" - Baile                          forms[1021]' // "YLW" - Pom-Pom                          forms[1022]' // "PNK" - Pa'u                          forms[1023]' // "BLU" - Sensu                      };                    case Rockruff:                      return new[]                      {                          types[0]' // Normal                          forms[1064]' // Dusk                      };                  case Lycanroc:                      return new[]                      {                          forms[745]' // Midday                          forms[1024]' // Midnight                          forms[1064]' // Dusk                      };                    case Wishiwashi:                      return new[]                      {                          forms[746]'                          forms[1025]' // School                      };                    case Silvally:                      return GetFormsArceus(7' types);                    case Minior:                      return new[]                      {                          forms[774]' // "R-Meteor"' // Meteor Red                          forms[1045]' // "O-Meteor"' // Meteor Orange                          forms[1046]' // "Y-Meteor"' // Meteor Yellow                          forms[1047]' // "G-Meteor"' // Meteor Green                          forms[1048]' // "B-Meteor"' // Meteor Blue                          forms[1049]' // "I-Meteor"' // Meteor Indigo                          forms[1050]' // "V-Meteor"' // Meteor Violet                          forms[1051]' // "R-Core"' // Core Red                          forms[1052]' // "O-Core"' // Core Orange                          forms[1053]' // "Y-Core"' // Core Yellow                          forms[1054]' // "G-Core"' // Core Green                          forms[1055]' // "B-Core"' // Core Blue                          forms[1056]' // "I-Core"' // Core Indigo                          forms[1057]' // "V-Core"' // Core Violet                      };                    case Necrozma:                      return new[]                      {                          types[000]' // Normal                          forms[1065]' // Dusk Mane                          forms[1066]' // Dawn Wings                          forms[1067]' // Ultra Necrozma                      };                    case Magearna:                      return new[]                      {                          types[000]'                          forms[1062]' // Original                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsGen7,The following statement contains a magic number: switch ((Species)species)              {                  default:                      return EMPTY;                    case Oricorio:                      return new[]                      {                          forms[741]' // "RED" - Baile                          forms[1021]' // "YLW" - Pom-Pom                          forms[1022]' // "PNK" - Pa'u                          forms[1023]' // "BLU" - Sensu                      };                    case Rockruff:                      return new[]                      {                          types[0]' // Normal                          forms[1064]' // Dusk                      };                  case Lycanroc:                      return new[]                      {                          forms[745]' // Midday                          forms[1024]' // Midnight                          forms[1064]' // Dusk                      };                    case Wishiwashi:                      return new[]                      {                          forms[746]'                          forms[1025]' // School                      };                    case Silvally:                      return GetFormsArceus(7' types);                    case Minior:                      return new[]                      {                          forms[774]' // "R-Meteor"' // Meteor Red                          forms[1045]' // "O-Meteor"' // Meteor Orange                          forms[1046]' // "Y-Meteor"' // Meteor Yellow                          forms[1047]' // "G-Meteor"' // Meteor Green                          forms[1048]' // "B-Meteor"' // Meteor Blue                          forms[1049]' // "I-Meteor"' // Meteor Indigo                          forms[1050]' // "V-Meteor"' // Meteor Violet                          forms[1051]' // "R-Core"' // Core Red                          forms[1052]' // "O-Core"' // Core Orange                          forms[1053]' // "Y-Core"' // Core Yellow                          forms[1054]' // "G-Core"' // Core Green                          forms[1055]' // "B-Core"' // Core Blue                          forms[1056]' // "I-Core"' // Core Indigo                          forms[1057]' // "V-Core"' // Core Violet                      };                    case Necrozma:                      return new[]                      {                          types[000]' // Normal                          forms[1065]' // Dusk Mane                          forms[1066]' // Dawn Wings                          forms[1067]' // Ultra Necrozma                      };                    case Magearna:                      return new[]                      {                          types[000]'                          forms[1062]' // Original                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsGen7,The following statement contains a magic number: switch ((Species)species)              {                  default:                      return EMPTY;                    case Oricorio:                      return new[]                      {                          forms[741]' // "RED" - Baile                          forms[1021]' // "YLW" - Pom-Pom                          forms[1022]' // "PNK" - Pa'u                          forms[1023]' // "BLU" - Sensu                      };                    case Rockruff:                      return new[]                      {                          types[0]' // Normal                          forms[1064]' // Dusk                      };                  case Lycanroc:                      return new[]                      {                          forms[745]' // Midday                          forms[1024]' // Midnight                          forms[1064]' // Dusk                      };                    case Wishiwashi:                      return new[]                      {                          forms[746]'                          forms[1025]' // School                      };                    case Silvally:                      return GetFormsArceus(7' types);                    case Minior:                      return new[]                      {                          forms[774]' // "R-Meteor"' // Meteor Red                          forms[1045]' // "O-Meteor"' // Meteor Orange                          forms[1046]' // "Y-Meteor"' // Meteor Yellow                          forms[1047]' // "G-Meteor"' // Meteor Green                          forms[1048]' // "B-Meteor"' // Meteor Blue                          forms[1049]' // "I-Meteor"' // Meteor Indigo                          forms[1050]' // "V-Meteor"' // Meteor Violet                          forms[1051]' // "R-Core"' // Core Red                          forms[1052]' // "O-Core"' // Core Orange                          forms[1053]' // "Y-Core"' // Core Yellow                          forms[1054]' // "G-Core"' // Core Green                          forms[1055]' // "B-Core"' // Core Blue                          forms[1056]' // "I-Core"' // Core Indigo                          forms[1057]' // "V-Core"' // Core Violet                      };                    case Necrozma:                      return new[]                      {                          types[000]' // Normal                          forms[1065]' // Dusk Mane                          forms[1066]' // Dawn Wings                          forms[1067]' // Ultra Necrozma                      };                    case Magearna:                      return new[]                      {                          types[000]'                          forms[1062]' // Original                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsGen7,The following statement contains a magic number: switch ((Species)species)              {                  default:                      return EMPTY;                    case Oricorio:                      return new[]                      {                          forms[741]' // "RED" - Baile                          forms[1021]' // "YLW" - Pom-Pom                          forms[1022]' // "PNK" - Pa'u                          forms[1023]' // "BLU" - Sensu                      };                    case Rockruff:                      return new[]                      {                          types[0]' // Normal                          forms[1064]' // Dusk                      };                  case Lycanroc:                      return new[]                      {                          forms[745]' // Midday                          forms[1024]' // Midnight                          forms[1064]' // Dusk                      };                    case Wishiwashi:                      return new[]                      {                          forms[746]'                          forms[1025]' // School                      };                    case Silvally:                      return GetFormsArceus(7' types);                    case Minior:                      return new[]                      {                          forms[774]' // "R-Meteor"' // Meteor Red                          forms[1045]' // "O-Meteor"' // Meteor Orange                          forms[1046]' // "Y-Meteor"' // Meteor Yellow                          forms[1047]' // "G-Meteor"' // Meteor Green                          forms[1048]' // "B-Meteor"' // Meteor Blue                          forms[1049]' // "I-Meteor"' // Meteor Indigo                          forms[1050]' // "V-Meteor"' // Meteor Violet                          forms[1051]' // "R-Core"' // Core Red                          forms[1052]' // "O-Core"' // Core Orange                          forms[1053]' // "Y-Core"' // Core Yellow                          forms[1054]' // "G-Core"' // Core Green                          forms[1055]' // "B-Core"' // Core Blue                          forms[1056]' // "I-Core"' // Core Indigo                          forms[1057]' // "V-Core"' // Core Violet                      };                    case Necrozma:                      return new[]                      {                          types[000]' // Normal                          forms[1065]' // Dusk Mane                          forms[1066]' // Dawn Wings                          forms[1067]' // Ultra Necrozma                      };                    case Magearna:                      return new[]                      {                          types[000]'                          forms[1062]' // Original                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsGen7,The following statement contains a magic number: switch ((Species)species)              {                  default:                      return EMPTY;                    case Oricorio:                      return new[]                      {                          forms[741]' // "RED" - Baile                          forms[1021]' // "YLW" - Pom-Pom                          forms[1022]' // "PNK" - Pa'u                          forms[1023]' // "BLU" - Sensu                      };                    case Rockruff:                      return new[]                      {                          types[0]' // Normal                          forms[1064]' // Dusk                      };                  case Lycanroc:                      return new[]                      {                          forms[745]' // Midday                          forms[1024]' // Midnight                          forms[1064]' // Dusk                      };                    case Wishiwashi:                      return new[]                      {                          forms[746]'                          forms[1025]' // School                      };                    case Silvally:                      return GetFormsArceus(7' types);                    case Minior:                      return new[]                      {                          forms[774]' // "R-Meteor"' // Meteor Red                          forms[1045]' // "O-Meteor"' // Meteor Orange                          forms[1046]' // "Y-Meteor"' // Meteor Yellow                          forms[1047]' // "G-Meteor"' // Meteor Green                          forms[1048]' // "B-Meteor"' // Meteor Blue                          forms[1049]' // "I-Meteor"' // Meteor Indigo                          forms[1050]' // "V-Meteor"' // Meteor Violet                          forms[1051]' // "R-Core"' // Core Red                          forms[1052]' // "O-Core"' // Core Orange                          forms[1053]' // "Y-Core"' // Core Yellow                          forms[1054]' // "G-Core"' // Core Green                          forms[1055]' // "B-Core"' // Core Blue                          forms[1056]' // "I-Core"' // Core Indigo                          forms[1057]' // "V-Core"' // Core Violet                      };                    case Necrozma:                      return new[]                      {                          types[000]' // Normal                          forms[1065]' // Dusk Mane                          forms[1066]' // Dawn Wings                          forms[1067]' // Ultra Necrozma                      };                    case Magearna:                      return new[]                      {                          types[000]'                          forms[1062]' // Original                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsGen7,The following statement contains a magic number: switch ((Species)species)              {                  default:                      return EMPTY;                    case Oricorio:                      return new[]                      {                          forms[741]' // "RED" - Baile                          forms[1021]' // "YLW" - Pom-Pom                          forms[1022]' // "PNK" - Pa'u                          forms[1023]' // "BLU" - Sensu                      };                    case Rockruff:                      return new[]                      {                          types[0]' // Normal                          forms[1064]' // Dusk                      };                  case Lycanroc:                      return new[]                      {                          forms[745]' // Midday                          forms[1024]' // Midnight                          forms[1064]' // Dusk                      };                    case Wishiwashi:                      return new[]                      {                          forms[746]'                          forms[1025]' // School                      };                    case Silvally:                      return GetFormsArceus(7' types);                    case Minior:                      return new[]                      {                          forms[774]' // "R-Meteor"' // Meteor Red                          forms[1045]' // "O-Meteor"' // Meteor Orange                          forms[1046]' // "Y-Meteor"' // Meteor Yellow                          forms[1047]' // "G-Meteor"' // Meteor Green                          forms[1048]' // "B-Meteor"' // Meteor Blue                          forms[1049]' // "I-Meteor"' // Meteor Indigo                          forms[1050]' // "V-Meteor"' // Meteor Violet                          forms[1051]' // "R-Core"' // Core Red                          forms[1052]' // "O-Core"' // Core Orange                          forms[1053]' // "Y-Core"' // Core Yellow                          forms[1054]' // "G-Core"' // Core Green                          forms[1055]' // "B-Core"' // Core Blue                          forms[1056]' // "I-Core"' // Core Indigo                          forms[1057]' // "V-Core"' // Core Violet                      };                    case Necrozma:                      return new[]                      {                          types[000]' // Normal                          forms[1065]' // Dusk Mane                          forms[1066]' // Dawn Wings                          forms[1067]' // Ultra Necrozma                      };                    case Magearna:                      return new[]                      {                          types[000]'                          forms[1062]' // Original                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsGen7,The following statement contains a magic number: switch ((Species)species)              {                  default:                      return EMPTY;                    case Oricorio:                      return new[]                      {                          forms[741]' // "RED" - Baile                          forms[1021]' // "YLW" - Pom-Pom                          forms[1022]' // "PNK" - Pa'u                          forms[1023]' // "BLU" - Sensu                      };                    case Rockruff:                      return new[]                      {                          types[0]' // Normal                          forms[1064]' // Dusk                      };                  case Lycanroc:                      return new[]                      {                          forms[745]' // Midday                          forms[1024]' // Midnight                          forms[1064]' // Dusk                      };                    case Wishiwashi:                      return new[]                      {                          forms[746]'                          forms[1025]' // School                      };                    case Silvally:                      return GetFormsArceus(7' types);                    case Minior:                      return new[]                      {                          forms[774]' // "R-Meteor"' // Meteor Red                          forms[1045]' // "O-Meteor"' // Meteor Orange                          forms[1046]' // "Y-Meteor"' // Meteor Yellow                          forms[1047]' // "G-Meteor"' // Meteor Green                          forms[1048]' // "B-Meteor"' // Meteor Blue                          forms[1049]' // "I-Meteor"' // Meteor Indigo                          forms[1050]' // "V-Meteor"' // Meteor Violet                          forms[1051]' // "R-Core"' // Core Red                          forms[1052]' // "O-Core"' // Core Orange                          forms[1053]' // "Y-Core"' // Core Yellow                          forms[1054]' // "G-Core"' // Core Green                          forms[1055]' // "B-Core"' // Core Blue                          forms[1056]' // "I-Core"' // Core Indigo                          forms[1057]' // "V-Core"' // Core Violet                      };                    case Necrozma:                      return new[]                      {                          types[000]' // Normal                          forms[1065]' // Dusk Mane                          forms[1066]' // Dawn Wings                          forms[1067]' // Ultra Necrozma                      };                    case Magearna:                      return new[]                      {                          types[000]'                          forms[1062]' // Original                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsGen7,The following statement contains a magic number: switch ((Species)species)              {                  default:                      return EMPTY;                    case Oricorio:                      return new[]                      {                          forms[741]' // "RED" - Baile                          forms[1021]' // "YLW" - Pom-Pom                          forms[1022]' // "PNK" - Pa'u                          forms[1023]' // "BLU" - Sensu                      };                    case Rockruff:                      return new[]                      {                          types[0]' // Normal                          forms[1064]' // Dusk                      };                  case Lycanroc:                      return new[]                      {                          forms[745]' // Midday                          forms[1024]' // Midnight                          forms[1064]' // Dusk                      };                    case Wishiwashi:                      return new[]                      {                          forms[746]'                          forms[1025]' // School                      };                    case Silvally:                      return GetFormsArceus(7' types);                    case Minior:                      return new[]                      {                          forms[774]' // "R-Meteor"' // Meteor Red                          forms[1045]' // "O-Meteor"' // Meteor Orange                          forms[1046]' // "Y-Meteor"' // Meteor Yellow                          forms[1047]' // "G-Meteor"' // Meteor Green                          forms[1048]' // "B-Meteor"' // Meteor Blue                          forms[1049]' // "I-Meteor"' // Meteor Indigo                          forms[1050]' // "V-Meteor"' // Meteor Violet                          forms[1051]' // "R-Core"' // Core Red                          forms[1052]' // "O-Core"' // Core Orange                          forms[1053]' // "Y-Core"' // Core Yellow                          forms[1054]' // "G-Core"' // Core Green                          forms[1055]' // "B-Core"' // Core Blue                          forms[1056]' // "I-Core"' // Core Indigo                          forms[1057]' // "V-Core"' // Core Violet                      };                    case Necrozma:                      return new[]                      {                          types[000]' // Normal                          forms[1065]' // Dusk Mane                          forms[1066]' // Dawn Wings                          forms[1067]' // Ultra Necrozma                      };                    case Magearna:                      return new[]                      {                          types[000]'                          forms[1062]' // Original                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsGen7,The following statement contains a magic number: switch ((Species)species)              {                  default:                      return EMPTY;                    case Oricorio:                      return new[]                      {                          forms[741]' // "RED" - Baile                          forms[1021]' // "YLW" - Pom-Pom                          forms[1022]' // "PNK" - Pa'u                          forms[1023]' // "BLU" - Sensu                      };                    case Rockruff:                      return new[]                      {                          types[0]' // Normal                          forms[1064]' // Dusk                      };                  case Lycanroc:                      return new[]                      {                          forms[745]' // Midday                          forms[1024]' // Midnight                          forms[1064]' // Dusk                      };                    case Wishiwashi:                      return new[]                      {                          forms[746]'                          forms[1025]' // School                      };                    case Silvally:                      return GetFormsArceus(7' types);                    case Minior:                      return new[]                      {                          forms[774]' // "R-Meteor"' // Meteor Red                          forms[1045]' // "O-Meteor"' // Meteor Orange                          forms[1046]' // "Y-Meteor"' // Meteor Yellow                          forms[1047]' // "G-Meteor"' // Meteor Green                          forms[1048]' // "B-Meteor"' // Meteor Blue                          forms[1049]' // "I-Meteor"' // Meteor Indigo                          forms[1050]' // "V-Meteor"' // Meteor Violet                          forms[1051]' // "R-Core"' // Core Red                          forms[1052]' // "O-Core"' // Core Orange                          forms[1053]' // "Y-Core"' // Core Yellow                          forms[1054]' // "G-Core"' // Core Green                          forms[1055]' // "B-Core"' // Core Blue                          forms[1056]' // "I-Core"' // Core Indigo                          forms[1057]' // "V-Core"' // Core Violet                      };                    case Necrozma:                      return new[]                      {                          types[000]' // Normal                          forms[1065]' // Dusk Mane                          forms[1066]' // Dawn Wings                          forms[1067]' // Ultra Necrozma                      };                    case Magearna:                      return new[]                      {                          types[000]'                          forms[1062]' // Original                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsGen7,The following statement contains a magic number: switch ((Species)species)              {                  default:                      return EMPTY;                    case Oricorio:                      return new[]                      {                          forms[741]' // "RED" - Baile                          forms[1021]' // "YLW" - Pom-Pom                          forms[1022]' // "PNK" - Pa'u                          forms[1023]' // "BLU" - Sensu                      };                    case Rockruff:                      return new[]                      {                          types[0]' // Normal                          forms[1064]' // Dusk                      };                  case Lycanroc:                      return new[]                      {                          forms[745]' // Midday                          forms[1024]' // Midnight                          forms[1064]' // Dusk                      };                    case Wishiwashi:                      return new[]                      {                          forms[746]'                          forms[1025]' // School                      };                    case Silvally:                      return GetFormsArceus(7' types);                    case Minior:                      return new[]                      {                          forms[774]' // "R-Meteor"' // Meteor Red                          forms[1045]' // "O-Meteor"' // Meteor Orange                          forms[1046]' // "Y-Meteor"' // Meteor Yellow                          forms[1047]' // "G-Meteor"' // Meteor Green                          forms[1048]' // "B-Meteor"' // Meteor Blue                          forms[1049]' // "I-Meteor"' // Meteor Indigo                          forms[1050]' // "V-Meteor"' // Meteor Violet                          forms[1051]' // "R-Core"' // Core Red                          forms[1052]' // "O-Core"' // Core Orange                          forms[1053]' // "Y-Core"' // Core Yellow                          forms[1054]' // "G-Core"' // Core Green                          forms[1055]' // "B-Core"' // Core Blue                          forms[1056]' // "I-Core"' // Core Indigo                          forms[1057]' // "V-Core"' // Core Violet                      };                    case Necrozma:                      return new[]                      {                          types[000]' // Normal                          forms[1065]' // Dusk Mane                          forms[1066]' // Dawn Wings                          forms[1067]' // Ultra Necrozma                      };                    case Magearna:                      return new[]                      {                          types[000]'                          forms[1062]' // Original                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsGen7,The following statement contains a magic number: switch ((Species)species)              {                  default:                      return EMPTY;                    case Oricorio:                      return new[]                      {                          forms[741]' // "RED" - Baile                          forms[1021]' // "YLW" - Pom-Pom                          forms[1022]' // "PNK" - Pa'u                          forms[1023]' // "BLU" - Sensu                      };                    case Rockruff:                      return new[]                      {                          types[0]' // Normal                          forms[1064]' // Dusk                      };                  case Lycanroc:                      return new[]                      {                          forms[745]' // Midday                          forms[1024]' // Midnight                          forms[1064]' // Dusk                      };                    case Wishiwashi:                      return new[]                      {                          forms[746]'                          forms[1025]' // School                      };                    case Silvally:                      return GetFormsArceus(7' types);                    case Minior:                      return new[]                      {                          forms[774]' // "R-Meteor"' // Meteor Red                          forms[1045]' // "O-Meteor"' // Meteor Orange                          forms[1046]' // "Y-Meteor"' // Meteor Yellow                          forms[1047]' // "G-Meteor"' // Meteor Green                          forms[1048]' // "B-Meteor"' // Meteor Blue                          forms[1049]' // "I-Meteor"' // Meteor Indigo                          forms[1050]' // "V-Meteor"' // Meteor Violet                          forms[1051]' // "R-Core"' // Core Red                          forms[1052]' // "O-Core"' // Core Orange                          forms[1053]' // "Y-Core"' // Core Yellow                          forms[1054]' // "G-Core"' // Core Green                          forms[1055]' // "B-Core"' // Core Blue                          forms[1056]' // "I-Core"' // Core Indigo                          forms[1057]' // "V-Core"' // Core Violet                      };                    case Necrozma:                      return new[]                      {                          types[000]' // Normal                          forms[1065]' // Dusk Mane                          forms[1066]' // Dawn Wings                          forms[1067]' // Ultra Necrozma                      };                    case Magearna:                      return new[]                      {                          types[000]'                          forms[1062]' // Original                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsGen7,The following statement contains a magic number: switch ((Species)species)              {                  default:                      return EMPTY;                    case Oricorio:                      return new[]                      {                          forms[741]' // "RED" - Baile                          forms[1021]' // "YLW" - Pom-Pom                          forms[1022]' // "PNK" - Pa'u                          forms[1023]' // "BLU" - Sensu                      };                    case Rockruff:                      return new[]                      {                          types[0]' // Normal                          forms[1064]' // Dusk                      };                  case Lycanroc:                      return new[]                      {                          forms[745]' // Midday                          forms[1024]' // Midnight                          forms[1064]' // Dusk                      };                    case Wishiwashi:                      return new[]                      {                          forms[746]'                          forms[1025]' // School                      };                    case Silvally:                      return GetFormsArceus(7' types);                    case Minior:                      return new[]                      {                          forms[774]' // "R-Meteor"' // Meteor Red                          forms[1045]' // "O-Meteor"' // Meteor Orange                          forms[1046]' // "Y-Meteor"' // Meteor Yellow                          forms[1047]' // "G-Meteor"' // Meteor Green                          forms[1048]' // "B-Meteor"' // Meteor Blue                          forms[1049]' // "I-Meteor"' // Meteor Indigo                          forms[1050]' // "V-Meteor"' // Meteor Violet                          forms[1051]' // "R-Core"' // Core Red                          forms[1052]' // "O-Core"' // Core Orange                          forms[1053]' // "Y-Core"' // Core Yellow                          forms[1054]' // "G-Core"' // Core Green                          forms[1055]' // "B-Core"' // Core Blue                          forms[1056]' // "I-Core"' // Core Indigo                          forms[1057]' // "V-Core"' // Core Violet                      };                    case Necrozma:                      return new[]                      {                          types[000]' // Normal                          forms[1065]' // Dusk Mane                          forms[1066]' // Dawn Wings                          forms[1067]' // Ultra Necrozma                      };                    case Magearna:                      return new[]                      {                          types[000]'                          forms[1062]' // Original                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsGen7,The following statement contains a magic number: switch ((Species)species)              {                  default:                      return EMPTY;                    case Oricorio:                      return new[]                      {                          forms[741]' // "RED" - Baile                          forms[1021]' // "YLW" - Pom-Pom                          forms[1022]' // "PNK" - Pa'u                          forms[1023]' // "BLU" - Sensu                      };                    case Rockruff:                      return new[]                      {                          types[0]' // Normal                          forms[1064]' // Dusk                      };                  case Lycanroc:                      return new[]                      {                          forms[745]' // Midday                          forms[1024]' // Midnight                          forms[1064]' // Dusk                      };                    case Wishiwashi:                      return new[]                      {                          forms[746]'                          forms[1025]' // School                      };                    case Silvally:                      return GetFormsArceus(7' types);                    case Minior:                      return new[]                      {                          forms[774]' // "R-Meteor"' // Meteor Red                          forms[1045]' // "O-Meteor"' // Meteor Orange                          forms[1046]' // "Y-Meteor"' // Meteor Yellow                          forms[1047]' // "G-Meteor"' // Meteor Green                          forms[1048]' // "B-Meteor"' // Meteor Blue                          forms[1049]' // "I-Meteor"' // Meteor Indigo                          forms[1050]' // "V-Meteor"' // Meteor Violet                          forms[1051]' // "R-Core"' // Core Red                          forms[1052]' // "O-Core"' // Core Orange                          forms[1053]' // "Y-Core"' // Core Yellow                          forms[1054]' // "G-Core"' // Core Green                          forms[1055]' // "B-Core"' // Core Blue                          forms[1056]' // "I-Core"' // Core Indigo                          forms[1057]' // "V-Core"' // Core Violet                      };                    case Necrozma:                      return new[]                      {                          types[000]' // Normal                          forms[1065]' // Dusk Mane                          forms[1066]' // Dawn Wings                          forms[1067]' // Ultra Necrozma                      };                    case Magearna:                      return new[]                      {                          types[000]'                          forms[1062]' // Original                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsGen7,The following statement contains a magic number: switch ((Species)species)              {                  default:                      return EMPTY;                    case Oricorio:                      return new[]                      {                          forms[741]' // "RED" - Baile                          forms[1021]' // "YLW" - Pom-Pom                          forms[1022]' // "PNK" - Pa'u                          forms[1023]' // "BLU" - Sensu                      };                    case Rockruff:                      return new[]                      {                          types[0]' // Normal                          forms[1064]' // Dusk                      };                  case Lycanroc:                      return new[]                      {                          forms[745]' // Midday                          forms[1024]' // Midnight                          forms[1064]' // Dusk                      };                    case Wishiwashi:                      return new[]                      {                          forms[746]'                          forms[1025]' // School                      };                    case Silvally:                      return GetFormsArceus(7' types);                    case Minior:                      return new[]                      {                          forms[774]' // "R-Meteor"' // Meteor Red                          forms[1045]' // "O-Meteor"' // Meteor Orange                          forms[1046]' // "Y-Meteor"' // Meteor Yellow                          forms[1047]' // "G-Meteor"' // Meteor Green                          forms[1048]' // "B-Meteor"' // Meteor Blue                          forms[1049]' // "I-Meteor"' // Meteor Indigo                          forms[1050]' // "V-Meteor"' // Meteor Violet                          forms[1051]' // "R-Core"' // Core Red                          forms[1052]' // "O-Core"' // Core Orange                          forms[1053]' // "Y-Core"' // Core Yellow                          forms[1054]' // "G-Core"' // Core Green                          forms[1055]' // "B-Core"' // Core Blue                          forms[1056]' // "I-Core"' // Core Indigo                          forms[1057]' // "V-Core"' // Core Violet                      };                    case Necrozma:                      return new[]                      {                          types[000]' // Normal                          forms[1065]' // Dusk Mane                          forms[1066]' // Dawn Wings                          forms[1067]' // Ultra Necrozma                      };                    case Magearna:                      return new[]                      {                          types[000]'                          forms[1062]' // Original                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsGen7,The following statement contains a magic number: switch ((Species)species)              {                  default:                      return EMPTY;                    case Oricorio:                      return new[]                      {                          forms[741]' // "RED" - Baile                          forms[1021]' // "YLW" - Pom-Pom                          forms[1022]' // "PNK" - Pa'u                          forms[1023]' // "BLU" - Sensu                      };                    case Rockruff:                      return new[]                      {                          types[0]' // Normal                          forms[1064]' // Dusk                      };                  case Lycanroc:                      return new[]                      {                          forms[745]' // Midday                          forms[1024]' // Midnight                          forms[1064]' // Dusk                      };                    case Wishiwashi:                      return new[]                      {                          forms[746]'                          forms[1025]' // School                      };                    case Silvally:                      return GetFormsArceus(7' types);                    case Minior:                      return new[]                      {                          forms[774]' // "R-Meteor"' // Meteor Red                          forms[1045]' // "O-Meteor"' // Meteor Orange                          forms[1046]' // "Y-Meteor"' // Meteor Yellow                          forms[1047]' // "G-Meteor"' // Meteor Green                          forms[1048]' // "B-Meteor"' // Meteor Blue                          forms[1049]' // "I-Meteor"' // Meteor Indigo                          forms[1050]' // "V-Meteor"' // Meteor Violet                          forms[1051]' // "R-Core"' // Core Red                          forms[1052]' // "O-Core"' // Core Orange                          forms[1053]' // "Y-Core"' // Core Yellow                          forms[1054]' // "G-Core"' // Core Green                          forms[1055]' // "B-Core"' // Core Blue                          forms[1056]' // "I-Core"' // Core Indigo                          forms[1057]' // "V-Core"' // Core Violet                      };                    case Necrozma:                      return new[]                      {                          types[000]' // Normal                          forms[1065]' // Dusk Mane                          forms[1066]' // Dawn Wings                          forms[1067]' // Ultra Necrozma                      };                    case Magearna:                      return new[]                      {                          types[000]'                          forms[1062]' // Original                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsGen7,The following statement contains a magic number: switch ((Species)species)              {                  default:                      return EMPTY;                    case Oricorio:                      return new[]                      {                          forms[741]' // "RED" - Baile                          forms[1021]' // "YLW" - Pom-Pom                          forms[1022]' // "PNK" - Pa'u                          forms[1023]' // "BLU" - Sensu                      };                    case Rockruff:                      return new[]                      {                          types[0]' // Normal                          forms[1064]' // Dusk                      };                  case Lycanroc:                      return new[]                      {                          forms[745]' // Midday                          forms[1024]' // Midnight                          forms[1064]' // Dusk                      };                    case Wishiwashi:                      return new[]                      {                          forms[746]'                          forms[1025]' // School                      };                    case Silvally:                      return GetFormsArceus(7' types);                    case Minior:                      return new[]                      {                          forms[774]' // "R-Meteor"' // Meteor Red                          forms[1045]' // "O-Meteor"' // Meteor Orange                          forms[1046]' // "Y-Meteor"' // Meteor Yellow                          forms[1047]' // "G-Meteor"' // Meteor Green                          forms[1048]' // "B-Meteor"' // Meteor Blue                          forms[1049]' // "I-Meteor"' // Meteor Indigo                          forms[1050]' // "V-Meteor"' // Meteor Violet                          forms[1051]' // "R-Core"' // Core Red                          forms[1052]' // "O-Core"' // Core Orange                          forms[1053]' // "Y-Core"' // Core Yellow                          forms[1054]' // "G-Core"' // Core Green                          forms[1055]' // "B-Core"' // Core Blue                          forms[1056]' // "I-Core"' // Core Indigo                          forms[1057]' // "V-Core"' // Core Violet                      };                    case Necrozma:                      return new[]                      {                          types[000]' // Normal                          forms[1065]' // Dusk Mane                          forms[1066]' // Dawn Wings                          forms[1067]' // Ultra Necrozma                      };                    case Magearna:                      return new[]                      {                          types[000]'                          forms[1062]' // Original                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsGen7,The following statement contains a magic number: switch ((Species)species)              {                  default:                      return EMPTY;                    case Oricorio:                      return new[]                      {                          forms[741]' // "RED" - Baile                          forms[1021]' // "YLW" - Pom-Pom                          forms[1022]' // "PNK" - Pa'u                          forms[1023]' // "BLU" - Sensu                      };                    case Rockruff:                      return new[]                      {                          types[0]' // Normal                          forms[1064]' // Dusk                      };                  case Lycanroc:                      return new[]                      {                          forms[745]' // Midday                          forms[1024]' // Midnight                          forms[1064]' // Dusk                      };                    case Wishiwashi:                      return new[]                      {                          forms[746]'                          forms[1025]' // School                      };                    case Silvally:                      return GetFormsArceus(7' types);                    case Minior:                      return new[]                      {                          forms[774]' // "R-Meteor"' // Meteor Red                          forms[1045]' // "O-Meteor"' // Meteor Orange                          forms[1046]' // "Y-Meteor"' // Meteor Yellow                          forms[1047]' // "G-Meteor"' // Meteor Green                          forms[1048]' // "B-Meteor"' // Meteor Blue                          forms[1049]' // "I-Meteor"' // Meteor Indigo                          forms[1050]' // "V-Meteor"' // Meteor Violet                          forms[1051]' // "R-Core"' // Core Red                          forms[1052]' // "O-Core"' // Core Orange                          forms[1053]' // "Y-Core"' // Core Yellow                          forms[1054]' // "G-Core"' // Core Green                          forms[1055]' // "B-Core"' // Core Blue                          forms[1056]' // "I-Core"' // Core Indigo                          forms[1057]' // "V-Core"' // Core Violet                      };                    case Necrozma:                      return new[]                      {                          types[000]' // Normal                          forms[1065]' // Dusk Mane                          forms[1066]' // Dawn Wings                          forms[1067]' // Ultra Necrozma                      };                    case Magearna:                      return new[]                      {                          types[000]'                          forms[1062]' // Original                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsGen7,The following statement contains a magic number: switch ((Species)species)              {                  default:                      return EMPTY;                    case Oricorio:                      return new[]                      {                          forms[741]' // "RED" - Baile                          forms[1021]' // "YLW" - Pom-Pom                          forms[1022]' // "PNK" - Pa'u                          forms[1023]' // "BLU" - Sensu                      };                    case Rockruff:                      return new[]                      {                          types[0]' // Normal                          forms[1064]' // Dusk                      };                  case Lycanroc:                      return new[]                      {                          forms[745]' // Midday                          forms[1024]' // Midnight                          forms[1064]' // Dusk                      };                    case Wishiwashi:                      return new[]                      {                          forms[746]'                          forms[1025]' // School                      };                    case Silvally:                      return GetFormsArceus(7' types);                    case Minior:                      return new[]                      {                          forms[774]' // "R-Meteor"' // Meteor Red                          forms[1045]' // "O-Meteor"' // Meteor Orange                          forms[1046]' // "Y-Meteor"' // Meteor Yellow                          forms[1047]' // "G-Meteor"' // Meteor Green                          forms[1048]' // "B-Meteor"' // Meteor Blue                          forms[1049]' // "I-Meteor"' // Meteor Indigo                          forms[1050]' // "V-Meteor"' // Meteor Violet                          forms[1051]' // "R-Core"' // Core Red                          forms[1052]' // "O-Core"' // Core Orange                          forms[1053]' // "Y-Core"' // Core Yellow                          forms[1054]' // "G-Core"' // Core Green                          forms[1055]' // "B-Core"' // Core Blue                          forms[1056]' // "I-Core"' // Core Indigo                          forms[1057]' // "V-Core"' // Core Violet                      };                    case Necrozma:                      return new[]                      {                          types[000]' // Normal                          forms[1065]' // Dusk Mane                          forms[1066]' // Dawn Wings                          forms[1067]' // Ultra Necrozma                      };                    case Magearna:                      return new[]                      {                          types[000]'                          forms[1062]' // Original                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsGen7,The following statement contains a magic number: switch ((Species)species)              {                  default:                      return EMPTY;                    case Oricorio:                      return new[]                      {                          forms[741]' // "RED" - Baile                          forms[1021]' // "YLW" - Pom-Pom                          forms[1022]' // "PNK" - Pa'u                          forms[1023]' // "BLU" - Sensu                      };                    case Rockruff:                      return new[]                      {                          types[0]' // Normal                          forms[1064]' // Dusk                      };                  case Lycanroc:                      return new[]                      {                          forms[745]' // Midday                          forms[1024]' // Midnight                          forms[1064]' // Dusk                      };                    case Wishiwashi:                      return new[]                      {                          forms[746]'                          forms[1025]' // School                      };                    case Silvally:                      return GetFormsArceus(7' types);                    case Minior:                      return new[]                      {                          forms[774]' // "R-Meteor"' // Meteor Red                          forms[1045]' // "O-Meteor"' // Meteor Orange                          forms[1046]' // "Y-Meteor"' // Meteor Yellow                          forms[1047]' // "G-Meteor"' // Meteor Green                          forms[1048]' // "B-Meteor"' // Meteor Blue                          forms[1049]' // "I-Meteor"' // Meteor Indigo                          forms[1050]' // "V-Meteor"' // Meteor Violet                          forms[1051]' // "R-Core"' // Core Red                          forms[1052]' // "O-Core"' // Core Orange                          forms[1053]' // "Y-Core"' // Core Yellow                          forms[1054]' // "G-Core"' // Core Green                          forms[1055]' // "B-Core"' // Core Blue                          forms[1056]' // "I-Core"' // Core Indigo                          forms[1057]' // "V-Core"' // Core Violet                      };                    case Necrozma:                      return new[]                      {                          types[000]' // Normal                          forms[1065]' // Dusk Mane                          forms[1066]' // Dawn Wings                          forms[1067]' // Ultra Necrozma                      };                    case Magearna:                      return new[]                      {                          types[000]'                          forms[1062]' // Original                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsGen7,The following statement contains a magic number: switch ((Species)species)              {                  default:                      return EMPTY;                    case Oricorio:                      return new[]                      {                          forms[741]' // "RED" - Baile                          forms[1021]' // "YLW" - Pom-Pom                          forms[1022]' // "PNK" - Pa'u                          forms[1023]' // "BLU" - Sensu                      };                    case Rockruff:                      return new[]                      {                          types[0]' // Normal                          forms[1064]' // Dusk                      };                  case Lycanroc:                      return new[]                      {                          forms[745]' // Midday                          forms[1024]' // Midnight                          forms[1064]' // Dusk                      };                    case Wishiwashi:                      return new[]                      {                          forms[746]'                          forms[1025]' // School                      };                    case Silvally:                      return GetFormsArceus(7' types);                    case Minior:                      return new[]                      {                          forms[774]' // "R-Meteor"' // Meteor Red                          forms[1045]' // "O-Meteor"' // Meteor Orange                          forms[1046]' // "Y-Meteor"' // Meteor Yellow                          forms[1047]' // "G-Meteor"' // Meteor Green                          forms[1048]' // "B-Meteor"' // Meteor Blue                          forms[1049]' // "I-Meteor"' // Meteor Indigo                          forms[1050]' // "V-Meteor"' // Meteor Violet                          forms[1051]' // "R-Core"' // Core Red                          forms[1052]' // "O-Core"' // Core Orange                          forms[1053]' // "Y-Core"' // Core Yellow                          forms[1054]' // "G-Core"' // Core Green                          forms[1055]' // "B-Core"' // Core Blue                          forms[1056]' // "I-Core"' // Core Indigo                          forms[1057]' // "V-Core"' // Core Violet                      };                    case Necrozma:                      return new[]                      {                          types[000]' // Normal                          forms[1065]' // Dusk Mane                          forms[1066]' // Dawn Wings                          forms[1067]' // Ultra Necrozma                      };                    case Magearna:                      return new[]                      {                          types[000]'                          forms[1062]' // Original                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsAlolan,The following statement contains a magic number: generation < 7
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsAlolan,The following statement contains a magic number: switch ((Species)species)              {                  default:                      return EMPTY;                    case Meowth when generation >= 8:                      return new[]                      {                          types[000]'                          forms[810]' // Alolan                          forms[Galarian]' // Alolan                      };                    case Rattata:                  case Raichu:                  case Sandshrew:                  case Sandslash:                  case Vulpix:                  case Ninetales:                  case Diglett:                  case Dugtrio:                  case Meowth:                  case Persian:                  case Geodude:                  case Graveler:                  case Golem:                  case Grimer:                  case Muk:                  case Exeggutor:                      return new[]                      {                          types[000]'                          forms[810] // Alolan                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsAlolan,The following statement contains a magic number: switch ((Species)species)              {                  default:                      return EMPTY;                    case Meowth when generation >= 8:                      return new[]                      {                          types[000]'                          forms[810]' // Alolan                          forms[Galarian]' // Alolan                      };                    case Rattata:                  case Raichu:                  case Sandshrew:                  case Sandslash:                  case Vulpix:                  case Ninetales:                  case Diglett:                  case Dugtrio:                  case Meowth:                  case Persian:                  case Geodude:                  case Graveler:                  case Golem:                  case Grimer:                  case Muk:                  case Exeggutor:                      return new[]                      {                          types[000]'                          forms[810] // Alolan                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsAlolan,The following statement contains a magic number: switch ((Species)species)              {                  default:                      return EMPTY;                    case Meowth when generation >= 8:                      return new[]                      {                          types[000]'                          forms[810]' // Alolan                          forms[Galarian]' // Alolan                      };                    case Rattata:                  case Raichu:                  case Sandshrew:                  case Sandslash:                  case Vulpix:                  case Ninetales:                  case Diglett:                  case Dugtrio:                  case Meowth:                  case Persian:                  case Geodude:                  case Graveler:                  case Golem:                  case Grimer:                  case Muk:                  case Exeggutor:                      return new[]                      {                          types[000]'                          forms[810] // Alolan                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsPikachu,The following statement contains a magic number: switch (generation)              {                  default:                      return EMPTY;                    case 6:                      return new[]                      {                          types[000]' // Normal                          forms[729]' // Rockstar                          forms[730]' // Belle                          forms[731]' // Pop                          forms[732]' // PhD                          forms[733]' // Libre                          forms[734]' // Cosplay                      };                    case 7 when IsGG():                      return new[]                      {                          types[000]' // Normal                          forms[813]' // Original                          forms[814]' // Hoenn                          forms[815]' // Sinnoh                          forms[816]' // Unova                          forms[817]' // Kalos                          forms[818]' // Alola                          forms[1063]' // Partner                          Starter'                      };                    case 7:                  case 8:                      return new[]                      {                          types[000]' // Normal                          forms[813]' // Original                          forms[814]' // Hoenn                          forms[815]' // Sinnoh                          forms[816]' // Unova                          forms[817]' // Kalos                          forms[818]' // Alola                          forms[1063]' // Partner                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsPikachu,The following statement contains a magic number: switch (generation)              {                  default:                      return EMPTY;                    case 6:                      return new[]                      {                          types[000]' // Normal                          forms[729]' // Rockstar                          forms[730]' // Belle                          forms[731]' // Pop                          forms[732]' // PhD                          forms[733]' // Libre                          forms[734]' // Cosplay                      };                    case 7 when IsGG():                      return new[]                      {                          types[000]' // Normal                          forms[813]' // Original                          forms[814]' // Hoenn                          forms[815]' // Sinnoh                          forms[816]' // Unova                          forms[817]' // Kalos                          forms[818]' // Alola                          forms[1063]' // Partner                          Starter'                      };                    case 7:                  case 8:                      return new[]                      {                          types[000]' // Normal                          forms[813]' // Original                          forms[814]' // Hoenn                          forms[815]' // Sinnoh                          forms[816]' // Unova                          forms[817]' // Kalos                          forms[818]' // Alola                          forms[1063]' // Partner                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsPikachu,The following statement contains a magic number: switch (generation)              {                  default:                      return EMPTY;                    case 6:                      return new[]                      {                          types[000]' // Normal                          forms[729]' // Rockstar                          forms[730]' // Belle                          forms[731]' // Pop                          forms[732]' // PhD                          forms[733]' // Libre                          forms[734]' // Cosplay                      };                    case 7 when IsGG():                      return new[]                      {                          types[000]' // Normal                          forms[813]' // Original                          forms[814]' // Hoenn                          forms[815]' // Sinnoh                          forms[816]' // Unova                          forms[817]' // Kalos                          forms[818]' // Alola                          forms[1063]' // Partner                          Starter'                      };                    case 7:                  case 8:                      return new[]                      {                          types[000]' // Normal                          forms[813]' // Original                          forms[814]' // Hoenn                          forms[815]' // Sinnoh                          forms[816]' // Unova                          forms[817]' // Kalos                          forms[818]' // Alola                          forms[1063]' // Partner                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsPikachu,The following statement contains a magic number: switch (generation)              {                  default:                      return EMPTY;                    case 6:                      return new[]                      {                          types[000]' // Normal                          forms[729]' // Rockstar                          forms[730]' // Belle                          forms[731]' // Pop                          forms[732]' // PhD                          forms[733]' // Libre                          forms[734]' // Cosplay                      };                    case 7 when IsGG():                      return new[]                      {                          types[000]' // Normal                          forms[813]' // Original                          forms[814]' // Hoenn                          forms[815]' // Sinnoh                          forms[816]' // Unova                          forms[817]' // Kalos                          forms[818]' // Alola                          forms[1063]' // Partner                          Starter'                      };                    case 7:                  case 8:                      return new[]                      {                          types[000]' // Normal                          forms[813]' // Original                          forms[814]' // Hoenn                          forms[815]' // Sinnoh                          forms[816]' // Unova                          forms[817]' // Kalos                          forms[818]' // Alola                          forms[1063]' // Partner                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsPikachu,The following statement contains a magic number: switch (generation)              {                  default:                      return EMPTY;                    case 6:                      return new[]                      {                          types[000]' // Normal                          forms[729]' // Rockstar                          forms[730]' // Belle                          forms[731]' // Pop                          forms[732]' // PhD                          forms[733]' // Libre                          forms[734]' // Cosplay                      };                    case 7 when IsGG():                      return new[]                      {                          types[000]' // Normal                          forms[813]' // Original                          forms[814]' // Hoenn                          forms[815]' // Sinnoh                          forms[816]' // Unova                          forms[817]' // Kalos                          forms[818]' // Alola                          forms[1063]' // Partner                          Starter'                      };                    case 7:                  case 8:                      return new[]                      {                          types[000]' // Normal                          forms[813]' // Original                          forms[814]' // Hoenn                          forms[815]' // Sinnoh                          forms[816]' // Unova                          forms[817]' // Kalos                          forms[818]' // Alola                          forms[1063]' // Partner                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsPikachu,The following statement contains a magic number: switch (generation)              {                  default:                      return EMPTY;                    case 6:                      return new[]                      {                          types[000]' // Normal                          forms[729]' // Rockstar                          forms[730]' // Belle                          forms[731]' // Pop                          forms[732]' // PhD                          forms[733]' // Libre                          forms[734]' // Cosplay                      };                    case 7 when IsGG():                      return new[]                      {                          types[000]' // Normal                          forms[813]' // Original                          forms[814]' // Hoenn                          forms[815]' // Sinnoh                          forms[816]' // Unova                          forms[817]' // Kalos                          forms[818]' // Alola                          forms[1063]' // Partner                          Starter'                      };                    case 7:                  case 8:                      return new[]                      {                          types[000]' // Normal                          forms[813]' // Original                          forms[814]' // Hoenn                          forms[815]' // Sinnoh                          forms[816]' // Unova                          forms[817]' // Kalos                          forms[818]' // Alola                          forms[1063]' // Partner                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsPikachu,The following statement contains a magic number: switch (generation)              {                  default:                      return EMPTY;                    case 6:                      return new[]                      {                          types[000]' // Normal                          forms[729]' // Rockstar                          forms[730]' // Belle                          forms[731]' // Pop                          forms[732]' // PhD                          forms[733]' // Libre                          forms[734]' // Cosplay                      };                    case 7 when IsGG():                      return new[]                      {                          types[000]' // Normal                          forms[813]' // Original                          forms[814]' // Hoenn                          forms[815]' // Sinnoh                          forms[816]' // Unova                          forms[817]' // Kalos                          forms[818]' // Alola                          forms[1063]' // Partner                          Starter'                      };                    case 7:                  case 8:                      return new[]                      {                          types[000]' // Normal                          forms[813]' // Original                          forms[814]' // Hoenn                          forms[815]' // Sinnoh                          forms[816]' // Unova                          forms[817]' // Kalos                          forms[818]' // Alola                          forms[1063]' // Partner                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsPikachu,The following statement contains a magic number: switch (generation)              {                  default:                      return EMPTY;                    case 6:                      return new[]                      {                          types[000]' // Normal                          forms[729]' // Rockstar                          forms[730]' // Belle                          forms[731]' // Pop                          forms[732]' // PhD                          forms[733]' // Libre                          forms[734]' // Cosplay                      };                    case 7 when IsGG():                      return new[]                      {                          types[000]' // Normal                          forms[813]' // Original                          forms[814]' // Hoenn                          forms[815]' // Sinnoh                          forms[816]' // Unova                          forms[817]' // Kalos                          forms[818]' // Alola                          forms[1063]' // Partner                          Starter'                      };                    case 7:                  case 8:                      return new[]                      {                          types[000]' // Normal                          forms[813]' // Original                          forms[814]' // Hoenn                          forms[815]' // Sinnoh                          forms[816]' // Unova                          forms[817]' // Kalos                          forms[818]' // Alola                          forms[1063]' // Partner                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsPikachu,The following statement contains a magic number: switch (generation)              {                  default:                      return EMPTY;                    case 6:                      return new[]                      {                          types[000]' // Normal                          forms[729]' // Rockstar                          forms[730]' // Belle                          forms[731]' // Pop                          forms[732]' // PhD                          forms[733]' // Libre                          forms[734]' // Cosplay                      };                    case 7 when IsGG():                      return new[]                      {                          types[000]' // Normal                          forms[813]' // Original                          forms[814]' // Hoenn                          forms[815]' // Sinnoh                          forms[816]' // Unova                          forms[817]' // Kalos                          forms[818]' // Alola                          forms[1063]' // Partner                          Starter'                      };                    case 7:                  case 8:                      return new[]                      {                          types[000]' // Normal                          forms[813]' // Original                          forms[814]' // Hoenn                          forms[815]' // Sinnoh                          forms[816]' // Unova                          forms[817]' // Kalos                          forms[818]' // Alola                          forms[1063]' // Partner                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsPikachu,The following statement contains a magic number: switch (generation)              {                  default:                      return EMPTY;                    case 6:                      return new[]                      {                          types[000]' // Normal                          forms[729]' // Rockstar                          forms[730]' // Belle                          forms[731]' // Pop                          forms[732]' // PhD                          forms[733]' // Libre                          forms[734]' // Cosplay                      };                    case 7 when IsGG():                      return new[]                      {                          types[000]' // Normal                          forms[813]' // Original                          forms[814]' // Hoenn                          forms[815]' // Sinnoh                          forms[816]' // Unova                          forms[817]' // Kalos                          forms[818]' // Alola                          forms[1063]' // Partner                          Starter'                      };                    case 7:                  case 8:                      return new[]                      {                          types[000]' // Normal                          forms[813]' // Original                          forms[814]' // Hoenn                          forms[815]' // Sinnoh                          forms[816]' // Unova                          forms[817]' // Kalos                          forms[818]' // Alola                          forms[1063]' // Partner                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsPikachu,The following statement contains a magic number: switch (generation)              {                  default:                      return EMPTY;                    case 6:                      return new[]                      {                          types[000]' // Normal                          forms[729]' // Rockstar                          forms[730]' // Belle                          forms[731]' // Pop                          forms[732]' // PhD                          forms[733]' // Libre                          forms[734]' // Cosplay                      };                    case 7 when IsGG():                      return new[]                      {                          types[000]' // Normal                          forms[813]' // Original                          forms[814]' // Hoenn                          forms[815]' // Sinnoh                          forms[816]' // Unova                          forms[817]' // Kalos                          forms[818]' // Alola                          forms[1063]' // Partner                          Starter'                      };                    case 7:                  case 8:                      return new[]                      {                          types[000]' // Normal                          forms[813]' // Original                          forms[814]' // Hoenn                          forms[815]' // Sinnoh                          forms[816]' // Unova                          forms[817]' // Kalos                          forms[818]' // Alola                          forms[1063]' // Partner                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsPikachu,The following statement contains a magic number: switch (generation)              {                  default:                      return EMPTY;                    case 6:                      return new[]                      {                          types[000]' // Normal                          forms[729]' // Rockstar                          forms[730]' // Belle                          forms[731]' // Pop                          forms[732]' // PhD                          forms[733]' // Libre                          forms[734]' // Cosplay                      };                    case 7 when IsGG():                      return new[]                      {                          types[000]' // Normal                          forms[813]' // Original                          forms[814]' // Hoenn                          forms[815]' // Sinnoh                          forms[816]' // Unova                          forms[817]' // Kalos                          forms[818]' // Alola                          forms[1063]' // Partner                          Starter'                      };                    case 7:                  case 8:                      return new[]                      {                          types[000]' // Normal                          forms[813]' // Original                          forms[814]' // Hoenn                          forms[815]' // Sinnoh                          forms[816]' // Unova                          forms[817]' // Kalos                          forms[818]' // Alola                          forms[1063]' // Partner                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsPikachu,The following statement contains a magic number: switch (generation)              {                  default:                      return EMPTY;                    case 6:                      return new[]                      {                          types[000]' // Normal                          forms[729]' // Rockstar                          forms[730]' // Belle                          forms[731]' // Pop                          forms[732]' // PhD                          forms[733]' // Libre                          forms[734]' // Cosplay                      };                    case 7 when IsGG():                      return new[]                      {                          types[000]' // Normal                          forms[813]' // Original                          forms[814]' // Hoenn                          forms[815]' // Sinnoh                          forms[816]' // Unova                          forms[817]' // Kalos                          forms[818]' // Alola                          forms[1063]' // Partner                          Starter'                      };                    case 7:                  case 8:                      return new[]                      {                          types[000]' // Normal                          forms[813]' // Original                          forms[814]' // Hoenn                          forms[815]' // Sinnoh                          forms[816]' // Unova                          forms[817]' // Kalos                          forms[818]' // Alola                          forms[1063]' // Partner                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsPikachu,The following statement contains a magic number: switch (generation)              {                  default:                      return EMPTY;                    case 6:                      return new[]                      {                          types[000]' // Normal                          forms[729]' // Rockstar                          forms[730]' // Belle                          forms[731]' // Pop                          forms[732]' // PhD                          forms[733]' // Libre                          forms[734]' // Cosplay                      };                    case 7 when IsGG():                      return new[]                      {                          types[000]' // Normal                          forms[813]' // Original                          forms[814]' // Hoenn                          forms[815]' // Sinnoh                          forms[816]' // Unova                          forms[817]' // Kalos                          forms[818]' // Alola                          forms[1063]' // Partner                          Starter'                      };                    case 7:                  case 8:                      return new[]                      {                          types[000]' // Normal                          forms[813]' // Original                          forms[814]' // Hoenn                          forms[815]' // Sinnoh                          forms[816]' // Unova                          forms[817]' // Kalos                          forms[818]' // Alola                          forms[1063]' // Partner                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsPikachu,The following statement contains a magic number: switch (generation)              {                  default:                      return EMPTY;                    case 6:                      return new[]                      {                          types[000]' // Normal                          forms[729]' // Rockstar                          forms[730]' // Belle                          forms[731]' // Pop                          forms[732]' // PhD                          forms[733]' // Libre                          forms[734]' // Cosplay                      };                    case 7 when IsGG():                      return new[]                      {                          types[000]' // Normal                          forms[813]' // Original                          forms[814]' // Hoenn                          forms[815]' // Sinnoh                          forms[816]' // Unova                          forms[817]' // Kalos                          forms[818]' // Alola                          forms[1063]' // Partner                          Starter'                      };                    case 7:                  case 8:                      return new[]                      {                          types[000]' // Normal                          forms[813]' // Original                          forms[814]' // Hoenn                          forms[815]' // Sinnoh                          forms[816]' // Unova                          forms[817]' // Kalos                          forms[818]' // Alola                          forms[1063]' // Partner                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsPikachu,The following statement contains a magic number: switch (generation)              {                  default:                      return EMPTY;                    case 6:                      return new[]                      {                          types[000]' // Normal                          forms[729]' // Rockstar                          forms[730]' // Belle                          forms[731]' // Pop                          forms[732]' // PhD                          forms[733]' // Libre                          forms[734]' // Cosplay                      };                    case 7 when IsGG():                      return new[]                      {                          types[000]' // Normal                          forms[813]' // Original                          forms[814]' // Hoenn                          forms[815]' // Sinnoh                          forms[816]' // Unova                          forms[817]' // Kalos                          forms[818]' // Alola                          forms[1063]' // Partner                          Starter'                      };                    case 7:                  case 8:                      return new[]                      {                          types[000]' // Normal                          forms[813]' // Original                          forms[814]' // Hoenn                          forms[815]' // Sinnoh                          forms[816]' // Unova                          forms[817]' // Kalos                          forms[818]' // Alola                          forms[1063]' // Partner                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsPikachu,The following statement contains a magic number: switch (generation)              {                  default:                      return EMPTY;                    case 6:                      return new[]                      {                          types[000]' // Normal                          forms[729]' // Rockstar                          forms[730]' // Belle                          forms[731]' // Pop                          forms[732]' // PhD                          forms[733]' // Libre                          forms[734]' // Cosplay                      };                    case 7 when IsGG():                      return new[]                      {                          types[000]' // Normal                          forms[813]' // Original                          forms[814]' // Hoenn                          forms[815]' // Sinnoh                          forms[816]' // Unova                          forms[817]' // Kalos                          forms[818]' // Alola                          forms[1063]' // Partner                          Starter'                      };                    case 7:                  case 8:                      return new[]                      {                          types[000]' // Normal                          forms[813]' // Original                          forms[814]' // Hoenn                          forms[815]' // Sinnoh                          forms[816]' // Unova                          forms[817]' // Kalos                          forms[818]' // Alola                          forms[1063]' // Partner                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsPikachu,The following statement contains a magic number: switch (generation)              {                  default:                      return EMPTY;                    case 6:                      return new[]                      {                          types[000]' // Normal                          forms[729]' // Rockstar                          forms[730]' // Belle                          forms[731]' // Pop                          forms[732]' // PhD                          forms[733]' // Libre                          forms[734]' // Cosplay                      };                    case 7 when IsGG():                      return new[]                      {                          types[000]' // Normal                          forms[813]' // Original                          forms[814]' // Hoenn                          forms[815]' // Sinnoh                          forms[816]' // Unova                          forms[817]' // Kalos                          forms[818]' // Alola                          forms[1063]' // Partner                          Starter'                      };                    case 7:                  case 8:                      return new[]                      {                          types[000]' // Normal                          forms[813]' // Original                          forms[814]' // Hoenn                          forms[815]' // Sinnoh                          forms[816]' // Unova                          forms[817]' // Kalos                          forms[818]' // Alola                          forms[1063]' // Partner                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsPikachu,The following statement contains a magic number: switch (generation)              {                  default:                      return EMPTY;                    case 6:                      return new[]                      {                          types[000]' // Normal                          forms[729]' // Rockstar                          forms[730]' // Belle                          forms[731]' // Pop                          forms[732]' // PhD                          forms[733]' // Libre                          forms[734]' // Cosplay                      };                    case 7 when IsGG():                      return new[]                      {                          types[000]' // Normal                          forms[813]' // Original                          forms[814]' // Hoenn                          forms[815]' // Sinnoh                          forms[816]' // Unova                          forms[817]' // Kalos                          forms[818]' // Alola                          forms[1063]' // Partner                          Starter'                      };                    case 7:                  case 8:                      return new[]                      {                          types[000]' // Normal                          forms[813]' // Original                          forms[814]' // Hoenn                          forms[815]' // Sinnoh                          forms[816]' // Unova                          forms[817]' // Kalos                          forms[818]' // Alola                          forms[1063]' // Partner                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsPikachu,The following statement contains a magic number: switch (generation)              {                  default:                      return EMPTY;                    case 6:                      return new[]                      {                          types[000]' // Normal                          forms[729]' // Rockstar                          forms[730]' // Belle                          forms[731]' // Pop                          forms[732]' // PhD                          forms[733]' // Libre                          forms[734]' // Cosplay                      };                    case 7 when IsGG():                      return new[]                      {                          types[000]' // Normal                          forms[813]' // Original                          forms[814]' // Hoenn                          forms[815]' // Sinnoh                          forms[816]' // Unova                          forms[817]' // Kalos                          forms[818]' // Alola                          forms[1063]' // Partner                          Starter'                      };                    case 7:                  case 8:                      return new[]                      {                          types[000]' // Normal                          forms[813]' // Original                          forms[814]' // Hoenn                          forms[815]' // Sinnoh                          forms[816]' // Unova                          forms[817]' // Kalos                          forms[818]' // Alola                          forms[1063]' // Partner                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsPikachu,The following statement contains a magic number: switch (generation)              {                  default:                      return EMPTY;                    case 6:                      return new[]                      {                          types[000]' // Normal                          forms[729]' // Rockstar                          forms[730]' // Belle                          forms[731]' // Pop                          forms[732]' // PhD                          forms[733]' // Libre                          forms[734]' // Cosplay                      };                    case 7 when IsGG():                      return new[]                      {                          types[000]' // Normal                          forms[813]' // Original                          forms[814]' // Hoenn                          forms[815]' // Sinnoh                          forms[816]' // Unova                          forms[817]' // Kalos                          forms[818]' // Alola                          forms[1063]' // Partner                          Starter'                      };                    case 7:                  case 8:                      return new[]                      {                          types[000]' // Normal                          forms[813]' // Original                          forms[814]' // Hoenn                          forms[815]' // Sinnoh                          forms[816]' // Unova                          forms[817]' // Kalos                          forms[818]' // Alola                          forms[1063]' // Partner                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsPikachu,The following statement contains a magic number: switch (generation)              {                  default:                      return EMPTY;                    case 6:                      return new[]                      {                          types[000]' // Normal                          forms[729]' // Rockstar                          forms[730]' // Belle                          forms[731]' // Pop                          forms[732]' // PhD                          forms[733]' // Libre                          forms[734]' // Cosplay                      };                    case 7 when IsGG():                      return new[]                      {                          types[000]' // Normal                          forms[813]' // Original                          forms[814]' // Hoenn                          forms[815]' // Sinnoh                          forms[816]' // Unova                          forms[817]' // Kalos                          forms[818]' // Alola                          forms[1063]' // Partner                          Starter'                      };                    case 7:                  case 8:                      return new[]                      {                          types[000]' // Normal                          forms[813]' // Original                          forms[814]' // Hoenn                          forms[815]' // Sinnoh                          forms[816]' // Unova                          forms[817]' // Kalos                          forms[818]' // Alola                          forms[1063]' // Partner                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsPikachu,The following statement contains a magic number: switch (generation)              {                  default:                      return EMPTY;                    case 6:                      return new[]                      {                          types[000]' // Normal                          forms[729]' // Rockstar                          forms[730]' // Belle                          forms[731]' // Pop                          forms[732]' // PhD                          forms[733]' // Libre                          forms[734]' // Cosplay                      };                    case 7 when IsGG():                      return new[]                      {                          types[000]' // Normal                          forms[813]' // Original                          forms[814]' // Hoenn                          forms[815]' // Sinnoh                          forms[816]' // Unova                          forms[817]' // Kalos                          forms[818]' // Alola                          forms[1063]' // Partner                          Starter'                      };                    case 7:                  case 8:                      return new[]                      {                          types[000]' // Normal                          forms[813]' // Original                          forms[814]' // Hoenn                          forms[815]' // Sinnoh                          forms[816]' // Unova                          forms[817]' // Kalos                          forms[818]' // Alola                          forms[1063]' // Partner                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsPikachu,The following statement contains a magic number: switch (generation)              {                  default:                      return EMPTY;                    case 6:                      return new[]                      {                          types[000]' // Normal                          forms[729]' // Rockstar                          forms[730]' // Belle                          forms[731]' // Pop                          forms[732]' // PhD                          forms[733]' // Libre                          forms[734]' // Cosplay                      };                    case 7 when IsGG():                      return new[]                      {                          types[000]' // Normal                          forms[813]' // Original                          forms[814]' // Hoenn                          forms[815]' // Sinnoh                          forms[816]' // Unova                          forms[817]' // Kalos                          forms[818]' // Alola                          forms[1063]' // Partner                          Starter'                      };                    case 7:                  case 8:                      return new[]                      {                          types[000]' // Normal                          forms[813]' // Original                          forms[814]' // Hoenn                          forms[815]' // Sinnoh                          forms[816]' // Unova                          forms[817]' // Kalos                          forms[818]' // Alola                          forms[1063]' // Partner                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsArceus,The following statement contains a magic number: switch (generation)              {                  case 4:                      return new[]                      {                          types[00]' // Normal                          types[01]' // Fighting                          types[02]' // Flying                          types[03]' // Poison                          types[04]' // etc                          types[05]'                          types[06]'                          types[07]'                          types[08]'                          "???"' // ???-type arceus                          types[09]'                          types[10]'                          types[11]'                          types[12]'                          types[13]'                          types[14]'                          types[15]'                          types[16] // No Fairy Type                      };                  case 5:                      return new[]                      {                          types[00]' // Normal                          types[01]' // Fighting                          types[02]' // Flying                          types[03]' // Poison                          types[04]' // etc                          types[05]'                          types[06]'                          types[07]'                          types[08]'                          types[09]'                          types[10]'                          types[11]'                          types[12]'                          types[13]'                          types[14]'                          types[15]'                          types[16] // No Fairy type                      };                  default:                      return new[]                      {                          types[00]' // Normal                          types[01]' // Fighting                          types[02]' // Flying                          types[03]' // Poison                          types[04]' // etc                          types[05]'                          types[06]'                          types[07]'                          types[08]'                          types[09]'                          types[10]'                          types[11]'                          types[12]'                          types[13]'                          types[14]'                          types[15]'                          types[16]'                          types[17]'                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsArceus,The following statement contains a magic number: switch (generation)              {                  case 4:                      return new[]                      {                          types[00]' // Normal                          types[01]' // Fighting                          types[02]' // Flying                          types[03]' // Poison                          types[04]' // etc                          types[05]'                          types[06]'                          types[07]'                          types[08]'                          "???"' // ???-type arceus                          types[09]'                          types[10]'                          types[11]'                          types[12]'                          types[13]'                          types[14]'                          types[15]'                          types[16] // No Fairy Type                      };                  case 5:                      return new[]                      {                          types[00]' // Normal                          types[01]' // Fighting                          types[02]' // Flying                          types[03]' // Poison                          types[04]' // etc                          types[05]'                          types[06]'                          types[07]'                          types[08]'                          types[09]'                          types[10]'                          types[11]'                          types[12]'                          types[13]'                          types[14]'                          types[15]'                          types[16] // No Fairy type                      };                  default:                      return new[]                      {                          types[00]' // Normal                          types[01]' // Fighting                          types[02]' // Flying                          types[03]' // Poison                          types[04]' // etc                          types[05]'                          types[06]'                          types[07]'                          types[08]'                          types[09]'                          types[10]'                          types[11]'                          types[12]'                          types[13]'                          types[14]'                          types[15]'                          types[16]'                          types[17]'                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsArceus,The following statement contains a magic number: switch (generation)              {                  case 4:                      return new[]                      {                          types[00]' // Normal                          types[01]' // Fighting                          types[02]' // Flying                          types[03]' // Poison                          types[04]' // etc                          types[05]'                          types[06]'                          types[07]'                          types[08]'                          "???"' // ???-type arceus                          types[09]'                          types[10]'                          types[11]'                          types[12]'                          types[13]'                          types[14]'                          types[15]'                          types[16] // No Fairy Type                      };                  case 5:                      return new[]                      {                          types[00]' // Normal                          types[01]' // Fighting                          types[02]' // Flying                          types[03]' // Poison                          types[04]' // etc                          types[05]'                          types[06]'                          types[07]'                          types[08]'                          types[09]'                          types[10]'                          types[11]'                          types[12]'                          types[13]'                          types[14]'                          types[15]'                          types[16] // No Fairy type                      };                  default:                      return new[]                      {                          types[00]' // Normal                          types[01]' // Fighting                          types[02]' // Flying                          types[03]' // Poison                          types[04]' // etc                          types[05]'                          types[06]'                          types[07]'                          types[08]'                          types[09]'                          types[10]'                          types[11]'                          types[12]'                          types[13]'                          types[14]'                          types[15]'                          types[16]'                          types[17]'                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsArceus,The following statement contains a magic number: switch (generation)              {                  case 4:                      return new[]                      {                          types[00]' // Normal                          types[01]' // Fighting                          types[02]' // Flying                          types[03]' // Poison                          types[04]' // etc                          types[05]'                          types[06]'                          types[07]'                          types[08]'                          "???"' // ???-type arceus                          types[09]'                          types[10]'                          types[11]'                          types[12]'                          types[13]'                          types[14]'                          types[15]'                          types[16] // No Fairy Type                      };                  case 5:                      return new[]                      {                          types[00]' // Normal                          types[01]' // Fighting                          types[02]' // Flying                          types[03]' // Poison                          types[04]' // etc                          types[05]'                          types[06]'                          types[07]'                          types[08]'                          types[09]'                          types[10]'                          types[11]'                          types[12]'                          types[13]'                          types[14]'                          types[15]'                          types[16] // No Fairy type                      };                  default:                      return new[]                      {                          types[00]' // Normal                          types[01]' // Fighting                          types[02]' // Flying                          types[03]' // Poison                          types[04]' // etc                          types[05]'                          types[06]'                          types[07]'                          types[08]'                          types[09]'                          types[10]'                          types[11]'                          types[12]'                          types[13]'                          types[14]'                          types[15]'                          types[16]'                          types[17]'                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsArceus,The following statement contains a magic number: switch (generation)              {                  case 4:                      return new[]                      {                          types[00]' // Normal                          types[01]' // Fighting                          types[02]' // Flying                          types[03]' // Poison                          types[04]' // etc                          types[05]'                          types[06]'                          types[07]'                          types[08]'                          "???"' // ???-type arceus                          types[09]'                          types[10]'                          types[11]'                          types[12]'                          types[13]'                          types[14]'                          types[15]'                          types[16] // No Fairy Type                      };                  case 5:                      return new[]                      {                          types[00]' // Normal                          types[01]' // Fighting                          types[02]' // Flying                          types[03]' // Poison                          types[04]' // etc                          types[05]'                          types[06]'                          types[07]'                          types[08]'                          types[09]'                          types[10]'                          types[11]'                          types[12]'                          types[13]'                          types[14]'                          types[15]'                          types[16] // No Fairy type                      };                  default:                      return new[]                      {                          types[00]' // Normal                          types[01]' // Fighting                          types[02]' // Flying                          types[03]' // Poison                          types[04]' // etc                          types[05]'                          types[06]'                          types[07]'                          types[08]'                          types[09]'                          types[10]'                          types[11]'                          types[12]'                          types[13]'                          types[14]'                          types[15]'                          types[16]'                          types[17]'                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsArceus,The following statement contains a magic number: switch (generation)              {                  case 4:                      return new[]                      {                          types[00]' // Normal                          types[01]' // Fighting                          types[02]' // Flying                          types[03]' // Poison                          types[04]' // etc                          types[05]'                          types[06]'                          types[07]'                          types[08]'                          "???"' // ???-type arceus                          types[09]'                          types[10]'                          types[11]'                          types[12]'                          types[13]'                          types[14]'                          types[15]'                          types[16] // No Fairy Type                      };                  case 5:                      return new[]                      {                          types[00]' // Normal                          types[01]' // Fighting                          types[02]' // Flying                          types[03]' // Poison                          types[04]' // etc                          types[05]'                          types[06]'                          types[07]'                          types[08]'                          types[09]'                          types[10]'                          types[11]'                          types[12]'                          types[13]'                          types[14]'                          types[15]'                          types[16] // No Fairy type                      };                  default:                      return new[]                      {                          types[00]' // Normal                          types[01]' // Fighting                          types[02]' // Flying                          types[03]' // Poison                          types[04]' // etc                          types[05]'                          types[06]'                          types[07]'                          types[08]'                          types[09]'                          types[10]'                          types[11]'                          types[12]'                          types[13]'                          types[14]'                          types[15]'                          types[16]'                          types[17]'                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsArceus,The following statement contains a magic number: switch (generation)              {                  case 4:                      return new[]                      {                          types[00]' // Normal                          types[01]' // Fighting                          types[02]' // Flying                          types[03]' // Poison                          types[04]' // etc                          types[05]'                          types[06]'                          types[07]'                          types[08]'                          "???"' // ???-type arceus                          types[09]'                          types[10]'                          types[11]'                          types[12]'                          types[13]'                          types[14]'                          types[15]'                          types[16] // No Fairy Type                      };                  case 5:                      return new[]                      {                          types[00]' // Normal                          types[01]' // Fighting                          types[02]' // Flying                          types[03]' // Poison                          types[04]' // etc                          types[05]'                          types[06]'                          types[07]'                          types[08]'                          types[09]'                          types[10]'                          types[11]'                          types[12]'                          types[13]'                          types[14]'                          types[15]'                          types[16] // No Fairy type                      };                  default:                      return new[]                      {                          types[00]' // Normal                          types[01]' // Fighting                          types[02]' // Flying                          types[03]' // Poison                          types[04]' // etc                          types[05]'                          types[06]'                          types[07]'                          types[08]'                          types[09]'                          types[10]'                          types[11]'                          types[12]'                          types[13]'                          types[14]'                          types[15]'                          types[16]'                          types[17]'                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsArceus,The following statement contains a magic number: switch (generation)              {                  case 4:                      return new[]                      {                          types[00]' // Normal                          types[01]' // Fighting                          types[02]' // Flying                          types[03]' // Poison                          types[04]' // etc                          types[05]'                          types[06]'                          types[07]'                          types[08]'                          "???"' // ???-type arceus                          types[09]'                          types[10]'                          types[11]'                          types[12]'                          types[13]'                          types[14]'                          types[15]'                          types[16] // No Fairy Type                      };                  case 5:                      return new[]                      {                          types[00]' // Normal                          types[01]' // Fighting                          types[02]' // Flying                          types[03]' // Poison                          types[04]' // etc                          types[05]'                          types[06]'                          types[07]'                          types[08]'                          types[09]'                          types[10]'                          types[11]'                          types[12]'                          types[13]'                          types[14]'                          types[15]'                          types[16] // No Fairy type                      };                  default:                      return new[]                      {                          types[00]' // Normal                          types[01]' // Fighting                          types[02]' // Flying                          types[03]' // Poison                          types[04]' // etc                          types[05]'                          types[06]'                          types[07]'                          types[08]'                          types[09]'                          types[10]'                          types[11]'                          types[12]'                          types[13]'                          types[14]'                          types[15]'                          types[16]'                          types[17]'                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsArceus,The following statement contains a magic number: switch (generation)              {                  case 4:                      return new[]                      {                          types[00]' // Normal                          types[01]' // Fighting                          types[02]' // Flying                          types[03]' // Poison                          types[04]' // etc                          types[05]'                          types[06]'                          types[07]'                          types[08]'                          "???"' // ???-type arceus                          types[09]'                          types[10]'                          types[11]'                          types[12]'                          types[13]'                          types[14]'                          types[15]'                          types[16] // No Fairy Type                      };                  case 5:                      return new[]                      {                          types[00]' // Normal                          types[01]' // Fighting                          types[02]' // Flying                          types[03]' // Poison                          types[04]' // etc                          types[05]'                          types[06]'                          types[07]'                          types[08]'                          types[09]'                          types[10]'                          types[11]'                          types[12]'                          types[13]'                          types[14]'                          types[15]'                          types[16] // No Fairy type                      };                  default:                      return new[]                      {                          types[00]' // Normal                          types[01]' // Fighting                          types[02]' // Flying                          types[03]' // Poison                          types[04]' // etc                          types[05]'                          types[06]'                          types[07]'                          types[08]'                          types[09]'                          types[10]'                          types[11]'                          types[12]'                          types[13]'                          types[14]'                          types[15]'                          types[16]'                          types[17]'                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsArceus,The following statement contains a magic number: switch (generation)              {                  case 4:                      return new[]                      {                          types[00]' // Normal                          types[01]' // Fighting                          types[02]' // Flying                          types[03]' // Poison                          types[04]' // etc                          types[05]'                          types[06]'                          types[07]'                          types[08]'                          "???"' // ???-type arceus                          types[09]'                          types[10]'                          types[11]'                          types[12]'                          types[13]'                          types[14]'                          types[15]'                          types[16] // No Fairy Type                      };                  case 5:                      return new[]                      {                          types[00]' // Normal                          types[01]' // Fighting                          types[02]' // Flying                          types[03]' // Poison                          types[04]' // etc                          types[05]'                          types[06]'                          types[07]'                          types[08]'                          types[09]'                          types[10]'                          types[11]'                          types[12]'                          types[13]'                          types[14]'                          types[15]'                          types[16] // No Fairy type                      };                  default:                      return new[]                      {                          types[00]' // Normal                          types[01]' // Fighting                          types[02]' // Flying                          types[03]' // Poison                          types[04]' // etc                          types[05]'                          types[06]'                          types[07]'                          types[08]'                          types[09]'                          types[10]'                          types[11]'                          types[12]'                          types[13]'                          types[14]'                          types[15]'                          types[16]'                          types[17]'                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsArceus,The following statement contains a magic number: switch (generation)              {                  case 4:                      return new[]                      {                          types[00]' // Normal                          types[01]' // Fighting                          types[02]' // Flying                          types[03]' // Poison                          types[04]' // etc                          types[05]'                          types[06]'                          types[07]'                          types[08]'                          "???"' // ???-type arceus                          types[09]'                          types[10]'                          types[11]'                          types[12]'                          types[13]'                          types[14]'                          types[15]'                          types[16] // No Fairy Type                      };                  case 5:                      return new[]                      {                          types[00]' // Normal                          types[01]' // Fighting                          types[02]' // Flying                          types[03]' // Poison                          types[04]' // etc                          types[05]'                          types[06]'                          types[07]'                          types[08]'                          types[09]'                          types[10]'                          types[11]'                          types[12]'                          types[13]'                          types[14]'                          types[15]'                          types[16] // No Fairy type                      };                  default:                      return new[]                      {                          types[00]' // Normal                          types[01]' // Fighting                          types[02]' // Flying                          types[03]' // Poison                          types[04]' // etc                          types[05]'                          types[06]'                          types[07]'                          types[08]'                          types[09]'                          types[10]'                          types[11]'                          types[12]'                          types[13]'                          types[14]'                          types[15]'                          types[16]'                          types[17]'                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsArceus,The following statement contains a magic number: switch (generation)              {                  case 4:                      return new[]                      {                          types[00]' // Normal                          types[01]' // Fighting                          types[02]' // Flying                          types[03]' // Poison                          types[04]' // etc                          types[05]'                          types[06]'                          types[07]'                          types[08]'                          "???"' // ???-type arceus                          types[09]'                          types[10]'                          types[11]'                          types[12]'                          types[13]'                          types[14]'                          types[15]'                          types[16] // No Fairy Type                      };                  case 5:                      return new[]                      {                          types[00]' // Normal                          types[01]' // Fighting                          types[02]' // Flying                          types[03]' // Poison                          types[04]' // etc                          types[05]'                          types[06]'                          types[07]'                          types[08]'                          types[09]'                          types[10]'                          types[11]'                          types[12]'                          types[13]'                          types[14]'                          types[15]'                          types[16] // No Fairy type                      };                  default:                      return new[]                      {                          types[00]' // Normal                          types[01]' // Fighting                          types[02]' // Flying                          types[03]' // Poison                          types[04]' // etc                          types[05]'                          types[06]'                          types[07]'                          types[08]'                          types[09]'                          types[10]'                          types[11]'                          types[12]'                          types[13]'                          types[14]'                          types[15]'                          types[16]'                          types[17]'                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsArceus,The following statement contains a magic number: switch (generation)              {                  case 4:                      return new[]                      {                          types[00]' // Normal                          types[01]' // Fighting                          types[02]' // Flying                          types[03]' // Poison                          types[04]' // etc                          types[05]'                          types[06]'                          types[07]'                          types[08]'                          "???"' // ???-type arceus                          types[09]'                          types[10]'                          types[11]'                          types[12]'                          types[13]'                          types[14]'                          types[15]'                          types[16] // No Fairy Type                      };                  case 5:                      return new[]                      {                          types[00]' // Normal                          types[01]' // Fighting                          types[02]' // Flying                          types[03]' // Poison                          types[04]' // etc                          types[05]'                          types[06]'                          types[07]'                          types[08]'                          types[09]'                          types[10]'                          types[11]'                          types[12]'                          types[13]'                          types[14]'                          types[15]'                          types[16] // No Fairy type                      };                  default:                      return new[]                      {                          types[00]' // Normal                          types[01]' // Fighting                          types[02]' // Flying                          types[03]' // Poison                          types[04]' // etc                          types[05]'                          types[06]'                          types[07]'                          types[08]'                          types[09]'                          types[10]'                          types[11]'                          types[12]'                          types[13]'                          types[14]'                          types[15]'                          types[16]'                          types[17]'                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsArceus,The following statement contains a magic number: switch (generation)              {                  case 4:                      return new[]                      {                          types[00]' // Normal                          types[01]' // Fighting                          types[02]' // Flying                          types[03]' // Poison                          types[04]' // etc                          types[05]'                          types[06]'                          types[07]'                          types[08]'                          "???"' // ???-type arceus                          types[09]'                          types[10]'                          types[11]'                          types[12]'                          types[13]'                          types[14]'                          types[15]'                          types[16] // No Fairy Type                      };                  case 5:                      return new[]                      {                          types[00]' // Normal                          types[01]' // Fighting                          types[02]' // Flying                          types[03]' // Poison                          types[04]' // etc                          types[05]'                          types[06]'                          types[07]'                          types[08]'                          types[09]'                          types[10]'                          types[11]'                          types[12]'                          types[13]'                          types[14]'                          types[15]'                          types[16] // No Fairy type                      };                  default:                      return new[]                      {                          types[00]' // Normal                          types[01]' // Fighting                          types[02]' // Flying                          types[03]' // Poison                          types[04]' // etc                          types[05]'                          types[06]'                          types[07]'                          types[08]'                          types[09]'                          types[10]'                          types[11]'                          types[12]'                          types[13]'                          types[14]'                          types[15]'                          types[16]'                          types[17]'                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsArceus,The following statement contains a magic number: switch (generation)              {                  case 4:                      return new[]                      {                          types[00]' // Normal                          types[01]' // Fighting                          types[02]' // Flying                          types[03]' // Poison                          types[04]' // etc                          types[05]'                          types[06]'                          types[07]'                          types[08]'                          "???"' // ???-type arceus                          types[09]'                          types[10]'                          types[11]'                          types[12]'                          types[13]'                          types[14]'                          types[15]'                          types[16] // No Fairy Type                      };                  case 5:                      return new[]                      {                          types[00]' // Normal                          types[01]' // Fighting                          types[02]' // Flying                          types[03]' // Poison                          types[04]' // etc                          types[05]'                          types[06]'                          types[07]'                          types[08]'                          types[09]'                          types[10]'                          types[11]'                          types[12]'                          types[13]'                          types[14]'                          types[15]'                          types[16] // No Fairy type                      };                  default:                      return new[]                      {                          types[00]' // Normal                          types[01]' // Fighting                          types[02]' // Flying                          types[03]' // Poison                          types[04]' // etc                          types[05]'                          types[06]'                          types[07]'                          types[08]'                          types[09]'                          types[10]'                          types[11]'                          types[12]'                          types[13]'                          types[14]'                          types[15]'                          types[16]'                          types[17]'                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsArceus,The following statement contains a magic number: switch (generation)              {                  case 4:                      return new[]                      {                          types[00]' // Normal                          types[01]' // Fighting                          types[02]' // Flying                          types[03]' // Poison                          types[04]' // etc                          types[05]'                          types[06]'                          types[07]'                          types[08]'                          "???"' // ???-type arceus                          types[09]'                          types[10]'                          types[11]'                          types[12]'                          types[13]'                          types[14]'                          types[15]'                          types[16] // No Fairy Type                      };                  case 5:                      return new[]                      {                          types[00]' // Normal                          types[01]' // Fighting                          types[02]' // Flying                          types[03]' // Poison                          types[04]' // etc                          types[05]'                          types[06]'                          types[07]'                          types[08]'                          types[09]'                          types[10]'                          types[11]'                          types[12]'                          types[13]'                          types[14]'                          types[15]'                          types[16] // No Fairy type                      };                  default:                      return new[]                      {                          types[00]' // Normal                          types[01]' // Fighting                          types[02]' // Flying                          types[03]' // Poison                          types[04]' // etc                          types[05]'                          types[06]'                          types[07]'                          types[08]'                          types[09]'                          types[10]'                          types[11]'                          types[12]'                          types[13]'                          types[14]'                          types[15]'                          types[16]'                          types[17]'                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsArceus,The following statement contains a magic number: switch (generation)              {                  case 4:                      return new[]                      {                          types[00]' // Normal                          types[01]' // Fighting                          types[02]' // Flying                          types[03]' // Poison                          types[04]' // etc                          types[05]'                          types[06]'                          types[07]'                          types[08]'                          "???"' // ???-type arceus                          types[09]'                          types[10]'                          types[11]'                          types[12]'                          types[13]'                          types[14]'                          types[15]'                          types[16] // No Fairy Type                      };                  case 5:                      return new[]                      {                          types[00]' // Normal                          types[01]' // Fighting                          types[02]' // Flying                          types[03]' // Poison                          types[04]' // etc                          types[05]'                          types[06]'                          types[07]'                          types[08]'                          types[09]'                          types[10]'                          types[11]'                          types[12]'                          types[13]'                          types[14]'                          types[15]'                          types[16] // No Fairy type                      };                  default:                      return new[]                      {                          types[00]' // Normal                          types[01]' // Fighting                          types[02]' // Flying                          types[03]' // Poison                          types[04]' // etc                          types[05]'                          types[06]'                          types[07]'                          types[08]'                          types[09]'                          types[10]'                          types[11]'                          types[12]'                          types[13]'                          types[14]'                          types[15]'                          types[16]'                          types[17]'                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsArceus,The following statement contains a magic number: switch (generation)              {                  case 4:                      return new[]                      {                          types[00]' // Normal                          types[01]' // Fighting                          types[02]' // Flying                          types[03]' // Poison                          types[04]' // etc                          types[05]'                          types[06]'                          types[07]'                          types[08]'                          "???"' // ???-type arceus                          types[09]'                          types[10]'                          types[11]'                          types[12]'                          types[13]'                          types[14]'                          types[15]'                          types[16] // No Fairy Type                      };                  case 5:                      return new[]                      {                          types[00]' // Normal                          types[01]' // Fighting                          types[02]' // Flying                          types[03]' // Poison                          types[04]' // etc                          types[05]'                          types[06]'                          types[07]'                          types[08]'                          types[09]'                          types[10]'                          types[11]'                          types[12]'                          types[13]'                          types[14]'                          types[15]'                          types[16] // No Fairy type                      };                  default:                      return new[]                      {                          types[00]' // Normal                          types[01]' // Fighting                          types[02]' // Flying                          types[03]' // Poison                          types[04]' // etc                          types[05]'                          types[06]'                          types[07]'                          types[08]'                          types[09]'                          types[10]'                          types[11]'                          types[12]'                          types[13]'                          types[14]'                          types[15]'                          types[16]'                          types[17]'                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsArceus,The following statement contains a magic number: switch (generation)              {                  case 4:                      return new[]                      {                          types[00]' // Normal                          types[01]' // Fighting                          types[02]' // Flying                          types[03]' // Poison                          types[04]' // etc                          types[05]'                          types[06]'                          types[07]'                          types[08]'                          "???"' // ???-type arceus                          types[09]'                          types[10]'                          types[11]'                          types[12]'                          types[13]'                          types[14]'                          types[15]'                          types[16] // No Fairy Type                      };                  case 5:                      return new[]                      {                          types[00]' // Normal                          types[01]' // Fighting                          types[02]' // Flying                          types[03]' // Poison                          types[04]' // etc                          types[05]'                          types[06]'                          types[07]'                          types[08]'                          types[09]'                          types[10]'                          types[11]'                          types[12]'                          types[13]'                          types[14]'                          types[15]'                          types[16] // No Fairy type                      };                  default:                      return new[]                      {                          types[00]' // Normal                          types[01]' // Fighting                          types[02]' // Flying                          types[03]' // Poison                          types[04]' // etc                          types[05]'                          types[06]'                          types[07]'                          types[08]'                          types[09]'                          types[10]'                          types[11]'                          types[12]'                          types[13]'                          types[14]'                          types[15]'                          types[16]'                          types[17]'                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsArceus,The following statement contains a magic number: switch (generation)              {                  case 4:                      return new[]                      {                          types[00]' // Normal                          types[01]' // Fighting                          types[02]' // Flying                          types[03]' // Poison                          types[04]' // etc                          types[05]'                          types[06]'                          types[07]'                          types[08]'                          "???"' // ???-type arceus                          types[09]'                          types[10]'                          types[11]'                          types[12]'                          types[13]'                          types[14]'                          types[15]'                          types[16] // No Fairy Type                      };                  case 5:                      return new[]                      {                          types[00]' // Normal                          types[01]' // Fighting                          types[02]' // Flying                          types[03]' // Poison                          types[04]' // etc                          types[05]'                          types[06]'                          types[07]'                          types[08]'                          types[09]'                          types[10]'                          types[11]'                          types[12]'                          types[13]'                          types[14]'                          types[15]'                          types[16] // No Fairy type                      };                  default:                      return new[]                      {                          types[00]' // Normal                          types[01]' // Fighting                          types[02]' // Flying                          types[03]' // Poison                          types[04]' // etc                          types[05]'                          types[06]'                          types[07]'                          types[08]'                          types[09]'                          types[10]'                          types[11]'                          types[12]'                          types[13]'                          types[14]'                          types[15]'                          types[16]'                          types[17]'                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsArceus,The following statement contains a magic number: switch (generation)              {                  case 4:                      return new[]                      {                          types[00]' // Normal                          types[01]' // Fighting                          types[02]' // Flying                          types[03]' // Poison                          types[04]' // etc                          types[05]'                          types[06]'                          types[07]'                          types[08]'                          "???"' // ???-type arceus                          types[09]'                          types[10]'                          types[11]'                          types[12]'                          types[13]'                          types[14]'                          types[15]'                          types[16] // No Fairy Type                      };                  case 5:                      return new[]                      {                          types[00]' // Normal                          types[01]' // Fighting                          types[02]' // Flying                          types[03]' // Poison                          types[04]' // etc                          types[05]'                          types[06]'                          types[07]'                          types[08]'                          types[09]'                          types[10]'                          types[11]'                          types[12]'                          types[13]'                          types[14]'                          types[15]'                          types[16] // No Fairy type                      };                  default:                      return new[]                      {                          types[00]' // Normal                          types[01]' // Fighting                          types[02]' // Flying                          types[03]' // Poison                          types[04]' // etc                          types[05]'                          types[06]'                          types[07]'                          types[08]'                          types[09]'                          types[10]'                          types[11]'                          types[12]'                          types[13]'                          types[14]'                          types[15]'                          types[16]'                          types[17]'                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsArceus,The following statement contains a magic number: switch (generation)              {                  case 4:                      return new[]                      {                          types[00]' // Normal                          types[01]' // Fighting                          types[02]' // Flying                          types[03]' // Poison                          types[04]' // etc                          types[05]'                          types[06]'                          types[07]'                          types[08]'                          "???"' // ???-type arceus                          types[09]'                          types[10]'                          types[11]'                          types[12]'                          types[13]'                          types[14]'                          types[15]'                          types[16] // No Fairy Type                      };                  case 5:                      return new[]                      {                          types[00]' // Normal                          types[01]' // Fighting                          types[02]' // Flying                          types[03]' // Poison                          types[04]' // etc                          types[05]'                          types[06]'                          types[07]'                          types[08]'                          types[09]'                          types[10]'                          types[11]'                          types[12]'                          types[13]'                          types[14]'                          types[15]'                          types[16] // No Fairy type                      };                  default:                      return new[]                      {                          types[00]' // Normal                          types[01]' // Fighting                          types[02]' // Flying                          types[03]' // Poison                          types[04]' // etc                          types[05]'                          types[06]'                          types[07]'                          types[08]'                          types[09]'                          types[10]'                          types[11]'                          types[12]'                          types[13]'                          types[14]'                          types[15]'                          types[16]'                          types[17]'                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsArceus,The following statement contains a magic number: switch (generation)              {                  case 4:                      return new[]                      {                          types[00]' // Normal                          types[01]' // Fighting                          types[02]' // Flying                          types[03]' // Poison                          types[04]' // etc                          types[05]'                          types[06]'                          types[07]'                          types[08]'                          "???"' // ???-type arceus                          types[09]'                          types[10]'                          types[11]'                          types[12]'                          types[13]'                          types[14]'                          types[15]'                          types[16] // No Fairy Type                      };                  case 5:                      return new[]                      {                          types[00]' // Normal                          types[01]' // Fighting                          types[02]' // Flying                          types[03]' // Poison                          types[04]' // etc                          types[05]'                          types[06]'                          types[07]'                          types[08]'                          types[09]'                          types[10]'                          types[11]'                          types[12]'                          types[13]'                          types[14]'                          types[15]'                          types[16] // No Fairy type                      };                  default:                      return new[]                      {                          types[00]' // Normal                          types[01]' // Fighting                          types[02]' // Flying                          types[03]' // Poison                          types[04]' // etc                          types[05]'                          types[06]'                          types[07]'                          types[08]'                          types[09]'                          types[10]'                          types[11]'                          types[12]'                          types[13]'                          types[14]'                          types[15]'                          types[16]'                          types[17]'                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsArceus,The following statement contains a magic number: switch (generation)              {                  case 4:                      return new[]                      {                          types[00]' // Normal                          types[01]' // Fighting                          types[02]' // Flying                          types[03]' // Poison                          types[04]' // etc                          types[05]'                          types[06]'                          types[07]'                          types[08]'                          "???"' // ???-type arceus                          types[09]'                          types[10]'                          types[11]'                          types[12]'                          types[13]'                          types[14]'                          types[15]'                          types[16] // No Fairy Type                      };                  case 5:                      return new[]                      {                          types[00]' // Normal                          types[01]' // Fighting                          types[02]' // Flying                          types[03]' // Poison                          types[04]' // etc                          types[05]'                          types[06]'                          types[07]'                          types[08]'                          types[09]'                          types[10]'                          types[11]'                          types[12]'                          types[13]'                          types[14]'                          types[15]'                          types[16] // No Fairy type                      };                  default:                      return new[]                      {                          types[00]' // Normal                          types[01]' // Fighting                          types[02]' // Flying                          types[03]' // Poison                          types[04]' // etc                          types[05]'                          types[06]'                          types[07]'                          types[08]'                          types[09]'                          types[10]'                          types[11]'                          types[12]'                          types[13]'                          types[14]'                          types[15]'                          types[16]'                          types[17]'                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsArceus,The following statement contains a magic number: switch (generation)              {                  case 4:                      return new[]                      {                          types[00]' // Normal                          types[01]' // Fighting                          types[02]' // Flying                          types[03]' // Poison                          types[04]' // etc                          types[05]'                          types[06]'                          types[07]'                          types[08]'                          "???"' // ???-type arceus                          types[09]'                          types[10]'                          types[11]'                          types[12]'                          types[13]'                          types[14]'                          types[15]'                          types[16] // No Fairy Type                      };                  case 5:                      return new[]                      {                          types[00]' // Normal                          types[01]' // Fighting                          types[02]' // Flying                          types[03]' // Poison                          types[04]' // etc                          types[05]'                          types[06]'                          types[07]'                          types[08]'                          types[09]'                          types[10]'                          types[11]'                          types[12]'                          types[13]'                          types[14]'                          types[15]'                          types[16] // No Fairy type                      };                  default:                      return new[]                      {                          types[00]' // Normal                          types[01]' // Fighting                          types[02]' // Flying                          types[03]' // Poison                          types[04]' // etc                          types[05]'                          types[06]'                          types[07]'                          types[08]'                          types[09]'                          types[10]'                          types[11]'                          types[12]'                          types[13]'                          types[14]'                          types[15]'                          types[16]'                          types[17]'                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsArceus,The following statement contains a magic number: switch (generation)              {                  case 4:                      return new[]                      {                          types[00]' // Normal                          types[01]' // Fighting                          types[02]' // Flying                          types[03]' // Poison                          types[04]' // etc                          types[05]'                          types[06]'                          types[07]'                          types[08]'                          "???"' // ???-type arceus                          types[09]'                          types[10]'                          types[11]'                          types[12]'                          types[13]'                          types[14]'                          types[15]'                          types[16] // No Fairy Type                      };                  case 5:                      return new[]                      {                          types[00]' // Normal                          types[01]' // Fighting                          types[02]' // Flying                          types[03]' // Poison                          types[04]' // etc                          types[05]'                          types[06]'                          types[07]'                          types[08]'                          types[09]'                          types[10]'                          types[11]'                          types[12]'                          types[13]'                          types[14]'                          types[15]'                          types[16] // No Fairy type                      };                  default:                      return new[]                      {                          types[00]' // Normal                          types[01]' // Fighting                          types[02]' // Flying                          types[03]' // Poison                          types[04]' // etc                          types[05]'                          types[06]'                          types[07]'                          types[08]'                          types[09]'                          types[10]'                          types[11]'                          types[12]'                          types[13]'                          types[14]'                          types[15]'                          types[16]'                          types[17]'                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsArceus,The following statement contains a magic number: switch (generation)              {                  case 4:                      return new[]                      {                          types[00]' // Normal                          types[01]' // Fighting                          types[02]' // Flying                          types[03]' // Poison                          types[04]' // etc                          types[05]'                          types[06]'                          types[07]'                          types[08]'                          "???"' // ???-type arceus                          types[09]'                          types[10]'                          types[11]'                          types[12]'                          types[13]'                          types[14]'                          types[15]'                          types[16] // No Fairy Type                      };                  case 5:                      return new[]                      {                          types[00]' // Normal                          types[01]' // Fighting                          types[02]' // Flying                          types[03]' // Poison                          types[04]' // etc                          types[05]'                          types[06]'                          types[07]'                          types[08]'                          types[09]'                          types[10]'                          types[11]'                          types[12]'                          types[13]'                          types[14]'                          types[15]'                          types[16] // No Fairy type                      };                  default:                      return new[]                      {                          types[00]' // Normal                          types[01]' // Fighting                          types[02]' // Flying                          types[03]' // Poison                          types[04]' // etc                          types[05]'                          types[06]'                          types[07]'                          types[08]'                          types[09]'                          types[10]'                          types[11]'                          types[12]'                          types[13]'                          types[14]'                          types[15]'                          types[16]'                          types[17]'                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsArceus,The following statement contains a magic number: switch (generation)              {                  case 4:                      return new[]                      {                          types[00]' // Normal                          types[01]' // Fighting                          types[02]' // Flying                          types[03]' // Poison                          types[04]' // etc                          types[05]'                          types[06]'                          types[07]'                          types[08]'                          "???"' // ???-type arceus                          types[09]'                          types[10]'                          types[11]'                          types[12]'                          types[13]'                          types[14]'                          types[15]'                          types[16] // No Fairy Type                      };                  case 5:                      return new[]                      {                          types[00]' // Normal                          types[01]' // Fighting                          types[02]' // Flying                          types[03]' // Poison                          types[04]' // etc                          types[05]'                          types[06]'                          types[07]'                          types[08]'                          types[09]'                          types[10]'                          types[11]'                          types[12]'                          types[13]'                          types[14]'                          types[15]'                          types[16] // No Fairy type                      };                  default:                      return new[]                      {                          types[00]' // Normal                          types[01]' // Fighting                          types[02]' // Flying                          types[03]' // Poison                          types[04]' // etc                          types[05]'                          types[06]'                          types[07]'                          types[08]'                          types[09]'                          types[10]'                          types[11]'                          types[12]'                          types[13]'                          types[14]'                          types[15]'                          types[16]'                          types[17]'                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsArceus,The following statement contains a magic number: switch (generation)              {                  case 4:                      return new[]                      {                          types[00]' // Normal                          types[01]' // Fighting                          types[02]' // Flying                          types[03]' // Poison                          types[04]' // etc                          types[05]'                          types[06]'                          types[07]'                          types[08]'                          "???"' // ???-type arceus                          types[09]'                          types[10]'                          types[11]'                          types[12]'                          types[13]'                          types[14]'                          types[15]'                          types[16] // No Fairy Type                      };                  case 5:                      return new[]                      {                          types[00]' // Normal                          types[01]' // Fighting                          types[02]' // Flying                          types[03]' // Poison                          types[04]' // etc                          types[05]'                          types[06]'                          types[07]'                          types[08]'                          types[09]'                          types[10]'                          types[11]'                          types[12]'                          types[13]'                          types[14]'                          types[15]'                          types[16] // No Fairy type                      };                  default:                      return new[]                      {                          types[00]' // Normal                          types[01]' // Fighting                          types[02]' // Flying                          types[03]' // Poison                          types[04]' // etc                          types[05]'                          types[06]'                          types[07]'                          types[08]'                          types[09]'                          types[10]'                          types[11]'                          types[12]'                          types[13]'                          types[14]'                          types[15]'                          types[16]'                          types[17]'                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsArceus,The following statement contains a magic number: switch (generation)              {                  case 4:                      return new[]                      {                          types[00]' // Normal                          types[01]' // Fighting                          types[02]' // Flying                          types[03]' // Poison                          types[04]' // etc                          types[05]'                          types[06]'                          types[07]'                          types[08]'                          "???"' // ???-type arceus                          types[09]'                          types[10]'                          types[11]'                          types[12]'                          types[13]'                          types[14]'                          types[15]'                          types[16] // No Fairy Type                      };                  case 5:                      return new[]                      {                          types[00]' // Normal                          types[01]' // Fighting                          types[02]' // Flying                          types[03]' // Poison                          types[04]' // etc                          types[05]'                          types[06]'                          types[07]'                          types[08]'                          types[09]'                          types[10]'                          types[11]'                          types[12]'                          types[13]'                          types[14]'                          types[15]'                          types[16] // No Fairy type                      };                  default:                      return new[]                      {                          types[00]' // Normal                          types[01]' // Fighting                          types[02]' // Flying                          types[03]' // Poison                          types[04]' // etc                          types[05]'                          types[06]'                          types[07]'                          types[08]'                          types[09]'                          types[10]'                          types[11]'                          types[12]'                          types[13]'                          types[14]'                          types[15]'                          types[16]'                          types[17]'                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsArceus,The following statement contains a magic number: switch (generation)              {                  case 4:                      return new[]                      {                          types[00]' // Normal                          types[01]' // Fighting                          types[02]' // Flying                          types[03]' // Poison                          types[04]' // etc                          types[05]'                          types[06]'                          types[07]'                          types[08]'                          "???"' // ???-type arceus                          types[09]'                          types[10]'                          types[11]'                          types[12]'                          types[13]'                          types[14]'                          types[15]'                          types[16] // No Fairy Type                      };                  case 5:                      return new[]                      {                          types[00]' // Normal                          types[01]' // Fighting                          types[02]' // Flying                          types[03]' // Poison                          types[04]' // etc                          types[05]'                          types[06]'                          types[07]'                          types[08]'                          types[09]'                          types[10]'                          types[11]'                          types[12]'                          types[13]'                          types[14]'                          types[15]'                          types[16] // No Fairy type                      };                  default:                      return new[]                      {                          types[00]' // Normal                          types[01]' // Fighting                          types[02]' // Flying                          types[03]' // Poison                          types[04]' // etc                          types[05]'                          types[06]'                          types[07]'                          types[08]'                          types[09]'                          types[10]'                          types[11]'                          types[12]'                          types[13]'                          types[14]'                          types[15]'                          types[16]'                          types[17]'                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsArceus,The following statement contains a magic number: switch (generation)              {                  case 4:                      return new[]                      {                          types[00]' // Normal                          types[01]' // Fighting                          types[02]' // Flying                          types[03]' // Poison                          types[04]' // etc                          types[05]'                          types[06]'                          types[07]'                          types[08]'                          "???"' // ???-type arceus                          types[09]'                          types[10]'                          types[11]'                          types[12]'                          types[13]'                          types[14]'                          types[15]'                          types[16] // No Fairy Type                      };                  case 5:                      return new[]                      {                          types[00]' // Normal                          types[01]' // Fighting                          types[02]' // Flying                          types[03]' // Poison                          types[04]' // etc                          types[05]'                          types[06]'                          types[07]'                          types[08]'                          types[09]'                          types[10]'                          types[11]'                          types[12]'                          types[13]'                          types[14]'                          types[15]'                          types[16] // No Fairy type                      };                  default:                      return new[]                      {                          types[00]' // Normal                          types[01]' // Fighting                          types[02]' // Flying                          types[03]' // Poison                          types[04]' // etc                          types[05]'                          types[06]'                          types[07]'                          types[08]'                          types[09]'                          types[10]'                          types[11]'                          types[12]'                          types[13]'                          types[14]'                          types[15]'                          types[16]'                          types[17]'                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsArceus,The following statement contains a magic number: switch (generation)              {                  case 4:                      return new[]                      {                          types[00]' // Normal                          types[01]' // Fighting                          types[02]' // Flying                          types[03]' // Poison                          types[04]' // etc                          types[05]'                          types[06]'                          types[07]'                          types[08]'                          "???"' // ???-type arceus                          types[09]'                          types[10]'                          types[11]'                          types[12]'                          types[13]'                          types[14]'                          types[15]'                          types[16] // No Fairy Type                      };                  case 5:                      return new[]                      {                          types[00]' // Normal                          types[01]' // Fighting                          types[02]' // Flying                          types[03]' // Poison                          types[04]' // etc                          types[05]'                          types[06]'                          types[07]'                          types[08]'                          types[09]'                          types[10]'                          types[11]'                          types[12]'                          types[13]'                          types[14]'                          types[15]'                          types[16] // No Fairy type                      };                  default:                      return new[]                      {                          types[00]' // Normal                          types[01]' // Fighting                          types[02]' // Flying                          types[03]' // Poison                          types[04]' // etc                          types[05]'                          types[06]'                          types[07]'                          types[08]'                          types[09]'                          types[10]'                          types[11]'                          types[12]'                          types[13]'                          types[14]'                          types[15]'                          types[16]'                          types[17]'                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsArceus,The following statement contains a magic number: switch (generation)              {                  case 4:                      return new[]                      {                          types[00]' // Normal                          types[01]' // Fighting                          types[02]' // Flying                          types[03]' // Poison                          types[04]' // etc                          types[05]'                          types[06]'                          types[07]'                          types[08]'                          "???"' // ???-type arceus                          types[09]'                          types[10]'                          types[11]'                          types[12]'                          types[13]'                          types[14]'                          types[15]'                          types[16] // No Fairy Type                      };                  case 5:                      return new[]                      {                          types[00]' // Normal                          types[01]' // Fighting                          types[02]' // Flying                          types[03]' // Poison                          types[04]' // etc                          types[05]'                          types[06]'                          types[07]'                          types[08]'                          types[09]'                          types[10]'                          types[11]'                          types[12]'                          types[13]'                          types[14]'                          types[15]'                          types[16] // No Fairy type                      };                  default:                      return new[]                      {                          types[00]' // Normal                          types[01]' // Fighting                          types[02]' // Flying                          types[03]' // Poison                          types[04]' // etc                          types[05]'                          types[06]'                          types[07]'                          types[08]'                          types[09]'                          types[10]'                          types[11]'                          types[12]'                          types[13]'                          types[14]'                          types[15]'                          types[16]'                          types[17]'                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsArceus,The following statement contains a magic number: switch (generation)              {                  case 4:                      return new[]                      {                          types[00]' // Normal                          types[01]' // Fighting                          types[02]' // Flying                          types[03]' // Poison                          types[04]' // etc                          types[05]'                          types[06]'                          types[07]'                          types[08]'                          "???"' // ???-type arceus                          types[09]'                          types[10]'                          types[11]'                          types[12]'                          types[13]'                          types[14]'                          types[15]'                          types[16] // No Fairy Type                      };                  case 5:                      return new[]                      {                          types[00]' // Normal                          types[01]' // Fighting                          types[02]' // Flying                          types[03]' // Poison                          types[04]' // etc                          types[05]'                          types[06]'                          types[07]'                          types[08]'                          types[09]'                          types[10]'                          types[11]'                          types[12]'                          types[13]'                          types[14]'                          types[15]'                          types[16] // No Fairy type                      };                  default:                      return new[]                      {                          types[00]' // Normal                          types[01]' // Fighting                          types[02]' // Flying                          types[03]' // Poison                          types[04]' // etc                          types[05]'                          types[06]'                          types[07]'                          types[08]'                          types[09]'                          types[10]'                          types[11]'                          types[12]'                          types[13]'                          types[14]'                          types[15]'                          types[16]'                          types[17]'                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsArceus,The following statement contains a magic number: switch (generation)              {                  case 4:                      return new[]                      {                          types[00]' // Normal                          types[01]' // Fighting                          types[02]' // Flying                          types[03]' // Poison                          types[04]' // etc                          types[05]'                          types[06]'                          types[07]'                          types[08]'                          "???"' // ???-type arceus                          types[09]'                          types[10]'                          types[11]'                          types[12]'                          types[13]'                          types[14]'                          types[15]'                          types[16] // No Fairy Type                      };                  case 5:                      return new[]                      {                          types[00]' // Normal                          types[01]' // Fighting                          types[02]' // Flying                          types[03]' // Poison                          types[04]' // etc                          types[05]'                          types[06]'                          types[07]'                          types[08]'                          types[09]'                          types[10]'                          types[11]'                          types[12]'                          types[13]'                          types[14]'                          types[15]'                          types[16] // No Fairy type                      };                  default:                      return new[]                      {                          types[00]' // Normal                          types[01]' // Fighting                          types[02]' // Flying                          types[03]' // Poison                          types[04]' // etc                          types[05]'                          types[06]'                          types[07]'                          types[08]'                          types[09]'                          types[10]'                          types[11]'                          types[12]'                          types[13]'                          types[14]'                          types[15]'                          types[16]'                          types[17]'                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsArceus,The following statement contains a magic number: switch (generation)              {                  case 4:                      return new[]                      {                          types[00]' // Normal                          types[01]' // Fighting                          types[02]' // Flying                          types[03]' // Poison                          types[04]' // etc                          types[05]'                          types[06]'                          types[07]'                          types[08]'                          "???"' // ???-type arceus                          types[09]'                          types[10]'                          types[11]'                          types[12]'                          types[13]'                          types[14]'                          types[15]'                          types[16] // No Fairy Type                      };                  case 5:                      return new[]                      {                          types[00]' // Normal                          types[01]' // Fighting                          types[02]' // Flying                          types[03]' // Poison                          types[04]' // etc                          types[05]'                          types[06]'                          types[07]'                          types[08]'                          types[09]'                          types[10]'                          types[11]'                          types[12]'                          types[13]'                          types[14]'                          types[15]'                          types[16] // No Fairy type                      };                  default:                      return new[]                      {                          types[00]' // Normal                          types[01]' // Fighting                          types[02]' // Flying                          types[03]' // Poison                          types[04]' // etc                          types[05]'                          types[06]'                          types[07]'                          types[08]'                          types[09]'                          types[10]'                          types[11]'                          types[12]'                          types[13]'                          types[14]'                          types[15]'                          types[16]'                          types[17]'                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsArceus,The following statement contains a magic number: switch (generation)              {                  case 4:                      return new[]                      {                          types[00]' // Normal                          types[01]' // Fighting                          types[02]' // Flying                          types[03]' // Poison                          types[04]' // etc                          types[05]'                          types[06]'                          types[07]'                          types[08]'                          "???"' // ???-type arceus                          types[09]'                          types[10]'                          types[11]'                          types[12]'                          types[13]'                          types[14]'                          types[15]'                          types[16] // No Fairy Type                      };                  case 5:                      return new[]                      {                          types[00]' // Normal                          types[01]' // Fighting                          types[02]' // Flying                          types[03]' // Poison                          types[04]' // etc                          types[05]'                          types[06]'                          types[07]'                          types[08]'                          types[09]'                          types[10]'                          types[11]'                          types[12]'                          types[13]'                          types[14]'                          types[15]'                          types[16] // No Fairy type                      };                  default:                      return new[]                      {                          types[00]' // Normal                          types[01]' // Fighting                          types[02]' // Flying                          types[03]' // Poison                          types[04]' // etc                          types[05]'                          types[06]'                          types[07]'                          types[08]'                          types[09]'                          types[10]'                          types[11]'                          types[12]'                          types[13]'                          types[14]'                          types[15]'                          types[16]'                          types[17]'                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsArceus,The following statement contains a magic number: switch (generation)              {                  case 4:                      return new[]                      {                          types[00]' // Normal                          types[01]' // Fighting                          types[02]' // Flying                          types[03]' // Poison                          types[04]' // etc                          types[05]'                          types[06]'                          types[07]'                          types[08]'                          "???"' // ???-type arceus                          types[09]'                          types[10]'                          types[11]'                          types[12]'                          types[13]'                          types[14]'                          types[15]'                          types[16] // No Fairy Type                      };                  case 5:                      return new[]                      {                          types[00]' // Normal                          types[01]' // Fighting                          types[02]' // Flying                          types[03]' // Poison                          types[04]' // etc                          types[05]'                          types[06]'                          types[07]'                          types[08]'                          types[09]'                          types[10]'                          types[11]'                          types[12]'                          types[13]'                          types[14]'                          types[15]'                          types[16] // No Fairy type                      };                  default:                      return new[]                      {                          types[00]' // Normal                          types[01]' // Fighting                          types[02]' // Flying                          types[03]' // Poison                          types[04]' // etc                          types[05]'                          types[06]'                          types[07]'                          types[08]'                          types[09]'                          types[10]'                          types[11]'                          types[12]'                          types[13]'                          types[14]'                          types[15]'                          types[16]'                          types[17]'                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsArceus,The following statement contains a magic number: switch (generation)              {                  case 4:                      return new[]                      {                          types[00]' // Normal                          types[01]' // Fighting                          types[02]' // Flying                          types[03]' // Poison                          types[04]' // etc                          types[05]'                          types[06]'                          types[07]'                          types[08]'                          "???"' // ???-type arceus                          types[09]'                          types[10]'                          types[11]'                          types[12]'                          types[13]'                          types[14]'                          types[15]'                          types[16] // No Fairy Type                      };                  case 5:                      return new[]                      {                          types[00]' // Normal                          types[01]' // Fighting                          types[02]' // Flying                          types[03]' // Poison                          types[04]' // etc                          types[05]'                          types[06]'                          types[07]'                          types[08]'                          types[09]'                          types[10]'                          types[11]'                          types[12]'                          types[13]'                          types[14]'                          types[15]'                          types[16] // No Fairy type                      };                  default:                      return new[]                      {                          types[00]' // Normal                          types[01]' // Fighting                          types[02]' // Flying                          types[03]' // Poison                          types[04]' // etc                          types[05]'                          types[06]'                          types[07]'                          types[08]'                          types[09]'                          types[10]'                          types[11]'                          types[12]'                          types[13]'                          types[14]'                          types[15]'                          types[16]'                          types[17]'                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsArceus,The following statement contains a magic number: switch (generation)              {                  case 4:                      return new[]                      {                          types[00]' // Normal                          types[01]' // Fighting                          types[02]' // Flying                          types[03]' // Poison                          types[04]' // etc                          types[05]'                          types[06]'                          types[07]'                          types[08]'                          "???"' // ???-type arceus                          types[09]'                          types[10]'                          types[11]'                          types[12]'                          types[13]'                          types[14]'                          types[15]'                          types[16] // No Fairy Type                      };                  case 5:                      return new[]                      {                          types[00]' // Normal                          types[01]' // Fighting                          types[02]' // Flying                          types[03]' // Poison                          types[04]' // etc                          types[05]'                          types[06]'                          types[07]'                          types[08]'                          types[09]'                          types[10]'                          types[11]'                          types[12]'                          types[13]'                          types[14]'                          types[15]'                          types[16] // No Fairy type                      };                  default:                      return new[]                      {                          types[00]' // Normal                          types[01]' // Fighting                          types[02]' // Flying                          types[03]' // Poison                          types[04]' // etc                          types[05]'                          types[06]'                          types[07]'                          types[08]'                          types[09]'                          types[10]'                          types[11]'                          types[12]'                          types[13]'                          types[14]'                          types[15]'                          types[16]'                          types[17]'                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsArceus,The following statement contains a magic number: switch (generation)              {                  case 4:                      return new[]                      {                          types[00]' // Normal                          types[01]' // Fighting                          types[02]' // Flying                          types[03]' // Poison                          types[04]' // etc                          types[05]'                          types[06]'                          types[07]'                          types[08]'                          "???"' // ???-type arceus                          types[09]'                          types[10]'                          types[11]'                          types[12]'                          types[13]'                          types[14]'                          types[15]'                          types[16] // No Fairy Type                      };                  case 5:                      return new[]                      {                          types[00]' // Normal                          types[01]' // Fighting                          types[02]' // Flying                          types[03]' // Poison                          types[04]' // etc                          types[05]'                          types[06]'                          types[07]'                          types[08]'                          types[09]'                          types[10]'                          types[11]'                          types[12]'                          types[13]'                          types[14]'                          types[15]'                          types[16] // No Fairy type                      };                  default:                      return new[]                      {                          types[00]' // Normal                          types[01]' // Fighting                          types[02]' // Flying                          types[03]' // Poison                          types[04]' // etc                          types[05]'                          types[06]'                          types[07]'                          types[08]'                          types[09]'                          types[10]'                          types[11]'                          types[12]'                          types[13]'                          types[14]'                          types[15]'                          types[16]'                          types[17]'                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsArceus,The following statement contains a magic number: switch (generation)              {                  case 4:                      return new[]                      {                          types[00]' // Normal                          types[01]' // Fighting                          types[02]' // Flying                          types[03]' // Poison                          types[04]' // etc                          types[05]'                          types[06]'                          types[07]'                          types[08]'                          "???"' // ???-type arceus                          types[09]'                          types[10]'                          types[11]'                          types[12]'                          types[13]'                          types[14]'                          types[15]'                          types[16] // No Fairy Type                      };                  case 5:                      return new[]                      {                          types[00]' // Normal                          types[01]' // Fighting                          types[02]' // Flying                          types[03]' // Poison                          types[04]' // etc                          types[05]'                          types[06]'                          types[07]'                          types[08]'                          types[09]'                          types[10]'                          types[11]'                          types[12]'                          types[13]'                          types[14]'                          types[15]'                          types[16] // No Fairy type                      };                  default:                      return new[]                      {                          types[00]' // Normal                          types[01]' // Fighting                          types[02]' // Flying                          types[03]' // Poison                          types[04]' // etc                          types[05]'                          types[06]'                          types[07]'                          types[08]'                          types[09]'                          types[10]'                          types[11]'                          types[12]'                          types[13]'                          types[14]'                          types[15]'                          types[16]'                          types[17]'                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsArceus,The following statement contains a magic number: switch (generation)              {                  case 4:                      return new[]                      {                          types[00]' // Normal                          types[01]' // Fighting                          types[02]' // Flying                          types[03]' // Poison                          types[04]' // etc                          types[05]'                          types[06]'                          types[07]'                          types[08]'                          "???"' // ???-type arceus                          types[09]'                          types[10]'                          types[11]'                          types[12]'                          types[13]'                          types[14]'                          types[15]'                          types[16] // No Fairy Type                      };                  case 5:                      return new[]                      {                          types[00]' // Normal                          types[01]' // Fighting                          types[02]' // Flying                          types[03]' // Poison                          types[04]' // etc                          types[05]'                          types[06]'                          types[07]'                          types[08]'                          types[09]'                          types[10]'                          types[11]'                          types[12]'                          types[13]'                          types[14]'                          types[15]'                          types[16] // No Fairy type                      };                  default:                      return new[]                      {                          types[00]' // Normal                          types[01]' // Fighting                          types[02]' // Flying                          types[03]' // Poison                          types[04]' // etc                          types[05]'                          types[06]'                          types[07]'                          types[08]'                          types[09]'                          types[10]'                          types[11]'                          types[12]'                          types[13]'                          types[14]'                          types[15]'                          types[16]'                          types[17]'                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsArceus,The following statement contains a magic number: switch (generation)              {                  case 4:                      return new[]                      {                          types[00]' // Normal                          types[01]' // Fighting                          types[02]' // Flying                          types[03]' // Poison                          types[04]' // etc                          types[05]'                          types[06]'                          types[07]'                          types[08]'                          "???"' // ???-type arceus                          types[09]'                          types[10]'                          types[11]'                          types[12]'                          types[13]'                          types[14]'                          types[15]'                          types[16] // No Fairy Type                      };                  case 5:                      return new[]                      {                          types[00]' // Normal                          types[01]' // Fighting                          types[02]' // Flying                          types[03]' // Poison                          types[04]' // etc                          types[05]'                          types[06]'                          types[07]'                          types[08]'                          types[09]'                          types[10]'                          types[11]'                          types[12]'                          types[13]'                          types[14]'                          types[15]'                          types[16] // No Fairy type                      };                  default:                      return new[]                      {                          types[00]' // Normal                          types[01]' // Fighting                          types[02]' // Flying                          types[03]' // Poison                          types[04]' // etc                          types[05]'                          types[06]'                          types[07]'                          types[08]'                          types[09]'                          types[10]'                          types[11]'                          types[12]'                          types[13]'                          types[14]'                          types[15]'                          types[16]'                          types[17]'                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsArceus,The following statement contains a magic number: switch (generation)              {                  case 4:                      return new[]                      {                          types[00]' // Normal                          types[01]' // Fighting                          types[02]' // Flying                          types[03]' // Poison                          types[04]' // etc                          types[05]'                          types[06]'                          types[07]'                          types[08]'                          "???"' // ???-type arceus                          types[09]'                          types[10]'                          types[11]'                          types[12]'                          types[13]'                          types[14]'                          types[15]'                          types[16] // No Fairy Type                      };                  case 5:                      return new[]                      {                          types[00]' // Normal                          types[01]' // Fighting                          types[02]' // Flying                          types[03]' // Poison                          types[04]' // etc                          types[05]'                          types[06]'                          types[07]'                          types[08]'                          types[09]'                          types[10]'                          types[11]'                          types[12]'                          types[13]'                          types[14]'                          types[15]'                          types[16] // No Fairy type                      };                  default:                      return new[]                      {                          types[00]' // Normal                          types[01]' // Fighting                          types[02]' // Flying                          types[03]' // Poison                          types[04]' // etc                          types[05]'                          types[06]'                          types[07]'                          types[08]'                          types[09]'                          types[10]'                          types[11]'                          types[12]'                          types[13]'                          types[14]'                          types[15]'                          types[16]'                          types[17]'                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsArceus,The following statement contains a magic number: switch (generation)              {                  case 4:                      return new[]                      {                          types[00]' // Normal                          types[01]' // Fighting                          types[02]' // Flying                          types[03]' // Poison                          types[04]' // etc                          types[05]'                          types[06]'                          types[07]'                          types[08]'                          "???"' // ???-type arceus                          types[09]'                          types[10]'                          types[11]'                          types[12]'                          types[13]'                          types[14]'                          types[15]'                          types[16] // No Fairy Type                      };                  case 5:                      return new[]                      {                          types[00]' // Normal                          types[01]' // Fighting                          types[02]' // Flying                          types[03]' // Poison                          types[04]' // etc                          types[05]'                          types[06]'                          types[07]'                          types[08]'                          types[09]'                          types[10]'                          types[11]'                          types[12]'                          types[13]'                          types[14]'                          types[15]'                          types[16] // No Fairy type                      };                  default:                      return new[]                      {                          types[00]' // Normal                          types[01]' // Fighting                          types[02]' // Flying                          types[03]' // Poison                          types[04]' // etc                          types[05]'                          types[06]'                          types[07]'                          types[08]'                          types[09]'                          types[10]'                          types[11]'                          types[12]'                          types[13]'                          types[14]'                          types[15]'                          types[16]'                          types[17]'                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsArceus,The following statement contains a magic number: switch (generation)              {                  case 4:                      return new[]                      {                          types[00]' // Normal                          types[01]' // Fighting                          types[02]' // Flying                          types[03]' // Poison                          types[04]' // etc                          types[05]'                          types[06]'                          types[07]'                          types[08]'                          "???"' // ???-type arceus                          types[09]'                          types[10]'                          types[11]'                          types[12]'                          types[13]'                          types[14]'                          types[15]'                          types[16] // No Fairy Type                      };                  case 5:                      return new[]                      {                          types[00]' // Normal                          types[01]' // Fighting                          types[02]' // Flying                          types[03]' // Poison                          types[04]' // etc                          types[05]'                          types[06]'                          types[07]'                          types[08]'                          types[09]'                          types[10]'                          types[11]'                          types[12]'                          types[13]'                          types[14]'                          types[15]'                          types[16] // No Fairy type                      };                  default:                      return new[]                      {                          types[00]' // Normal                          types[01]' // Fighting                          types[02]' // Flying                          types[03]' // Poison                          types[04]' // etc                          types[05]'                          types[06]'                          types[07]'                          types[08]'                          types[09]'                          types[10]'                          types[11]'                          types[12]'                          types[13]'                          types[14]'                          types[15]'                          types[16]'                          types[17]'                      };              }
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsTotem,The following statement contains a magic number: return new[]                  {                      forms[778]' // Disguised                      forms[1058]' // Busted                      forms[1007]' // Large                      "*" + forms[1058]' // Busted                  };
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsTotem,The following statement contains a magic number: return new[]                  {                      forms[778]' // Disguised                      forms[1058]' // Busted                      forms[1007]' // Large                      "*" + forms[1058]' // Busted                  };
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsTotem,The following statement contains a magic number: return new[]                  {                      forms[778]' // Disguised                      forms[1058]' // Busted                      forms[1007]' // Large                      "*" + forms[1058]' // Busted                  };
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsTotem,The following statement contains a magic number: return new[]                  {                      forms[778]' // Disguised                      forms[1058]' // Busted                      forms[1007]' // Large                      "*" + forms[1058]' // Busted                  };
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsTotem,The following statement contains a magic number: return new[]                  {                      types[0]' // Normal                      forms[810]' // Alolan                      forms[1007]' // Large                  };
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsTotem,The following statement contains a magic number: return new[]                  {                      types[0]' // Normal                      forms[810]' // Alolan                      forms[1007]' // Large                  };
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsTotem,The following statement contains a magic number: return new[]              {                  types[0]' // Normal                  forms[1007]' // Large              };
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormsUnown,The following statement contains a magic number: return generation switch              {                  2 => new[]                  {                      "A"' "B"' "C"' "D"' "E"'                      "F"' "G"' "H"' "I"' "J"'                      "K"' "L"' "M"' "N"' "O"'                      "P"' "Q"' "R"' "S"' "T"'                      "U"' "V"' "W"' "X"' "Y"'                      "Z"'                      // "!"' "?"' not in Gen II                  }'                  _ => new[]                  {                      "A"' "B"' "C"' "D"' "E"'                      "F"' "G"' "H"' "I"' "J"'                      "K"' "L"' "M"' "N"' "O"'                      "P"' "Q"' "R"' "S"' "T"'                      "U"' "V"' "W"' "X"' "Y"'                      "Z"'                      "!"' "?"'                  }              };
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,HasFormSelection,The following statement contains a magic number: format <= 3 && species != (int)Unown
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetMegaSingle,The following statement contains a magic number: return new[]              {                  types[000]' // Normal                  forms[804]' // Mega              };
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetMegaXY,The following statement contains a magic number: return new[]              {                  types[000]' // Normal                  forms[805]' // Mega X                  forms[806]' // Mega Y              };
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetMegaXY,The following statement contains a magic number: return new[]              {                  types[000]' // Normal                  forms[805]' // Mega X                  forms[806]' // Mega Y              };
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetAlcremieFormList,The following statement contains a magic number: var result = new string[63];
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetAlcremieFormList,The following statement contains a magic number: result[0 * 7] = forms[(int) Alcremie];
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetAlcremieFormList,The following statement contains a magic number: result[1 * 7] = forms[RubyCream];
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetAlcremieFormList,The following statement contains a magic number: result[2 * 7] = forms[MatchaCream];
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetAlcremieFormList,The following statement contains a magic number: result[2 * 7] = forms[MatchaCream];
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetAlcremieFormList,The following statement contains a magic number: result[3 * 7] = forms[MintCream];
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetAlcremieFormList,The following statement contains a magic number: result[3 * 7] = forms[MintCream];
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetAlcremieFormList,The following statement contains a magic number: result[4 * 7] = forms[LemonCream];
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetAlcremieFormList,The following statement contains a magic number: result[4 * 7] = forms[LemonCream];
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetAlcremieFormList,The following statement contains a magic number: result[5 * 7] = forms[SaltedCream];
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetAlcremieFormList,The following statement contains a magic number: result[5 * 7] = forms[SaltedCream];
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetAlcremieFormList,The following statement contains a magic number: result[6 * 7] = forms[RubySwirl];
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetAlcremieFormList,The following statement contains a magic number: result[6 * 7] = forms[RubySwirl];
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetAlcremieFormList,The following statement contains a magic number: result[7 * 7] = forms[CaramelSwirl];
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetAlcremieFormList,The following statement contains a magic number: result[7 * 7] = forms[CaramelSwirl];
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetAlcremieFormList,The following statement contains a magic number: result[8 * 7] = forms[RainbowSwirl];
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetAlcremieFormList,The following statement contains a magic number: result[8 * 7] = forms[RainbowSwirl];
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetAlcremieFormList,The following statement contains a magic number: const int deco = 7;
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetAlcremieFormList,The following statement contains a magic number: const int fc = 9;
Magic Number,PKHeX.Core,FormConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\FormConverter.cs,GetFormArgumentStrings,The following statement contains a magic number: generation < 8
Magic Number,PKHeX.Core,ItemConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\ItemConverter.cs,GetFormatHeldItemID,The following statement contains a magic number: return srcFormat == 2 ? GetG4Item((byte)item) : GetG4Item((ushort)item);
Magic Number,PKHeX.Core,ItemConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\ItemConverter.cs,GetFormatHeldItemID,The following statement contains a magic number: destFormat > 3
Magic Number,PKHeX.Core,ItemConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\ItemConverter.cs,GetFormatHeldItemID,The following statement contains a magic number: destFormat != srcFormat && srcFormat <= 3
Magic Number,PKHeX.Core,ItemConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\ItemConverter.cs,GetFormatHeldItemID,The following statement contains a magic number: return destFormat switch              {                  1 => 0'                  2 => (byte) item'                  3 => GetG3Item((ushort) item)'                  _ => item              };
Magic Number,PKHeX.Core,ItemConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\ItemConverter.cs,GetFormatHeldItemID,The following statement contains a magic number: return destFormat switch              {                  1 => 0'                  2 => (byte) item'                  3 => GetG3Item((ushort) item)'                  _ => item              };
Magic Number,PKHeX.Core,ItemConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\ItemConverter.cs,IsItemHM,The following statement contains a magic number: return generation switch              {                  1 => (196 <= item && item <= 200)' // HMs                  2 => (item >= 243)' // HMs                  3 => (339 <= item && item <= 346)'                  _ => ((420 <= item && item <= 427) || item == 737)              };
Magic Number,PKHeX.Core,ItemConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\ItemConverter.cs,IsItemHM,The following statement contains a magic number: return generation switch              {                  1 => (196 <= item && item <= 200)' // HMs                  2 => (item >= 243)' // HMs                  3 => (339 <= item && item <= 346)'                  _ => ((420 <= item && item <= 427) || item == 737)              };
Magic Number,PKHeX.Core,ItemConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\ItemConverter.cs,IsItemHM,The following statement contains a magic number: return generation switch              {                  1 => (196 <= item && item <= 200)' // HMs                  2 => (item >= 243)' // HMs                  3 => (339 <= item && item <= 346)'                  _ => ((420 <= item && item <= 427) || item == 737)              };
Magic Number,PKHeX.Core,ItemConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\ItemConverter.cs,IsItemHM,The following statement contains a magic number: return generation switch              {                  1 => (196 <= item && item <= 200)' // HMs                  2 => (item >= 243)' // HMs                  3 => (339 <= item && item <= 346)'                  _ => ((420 <= item && item <= 427) || item == 737)              };
Magic Number,PKHeX.Core,ItemConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\ItemConverter.cs,IsItemHM,The following statement contains a magic number: return generation switch              {                  1 => (196 <= item && item <= 200)' // HMs                  2 => (item >= 243)' // HMs                  3 => (339 <= item && item <= 346)'                  _ => ((420 <= item && item <= 427) || item == 737)              };
Magic Number,PKHeX.Core,ItemConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\ItemConverter.cs,IsItemHM,The following statement contains a magic number: return generation switch              {                  1 => (196 <= item && item <= 200)' // HMs                  2 => (item >= 243)' // HMs                  3 => (339 <= item && item <= 346)'                  _ => ((420 <= item && item <= 427) || item == 737)              };
Magic Number,PKHeX.Core,ItemConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\ItemConverter.cs,IsItemHM,The following statement contains a magic number: return generation switch              {                  1 => (196 <= item && item <= 200)' // HMs                  2 => (item >= 243)' // HMs                  3 => (339 <= item && item <= 346)'                  _ => ((420 <= item && item <= 427) || item == 737)              };
Magic Number,PKHeX.Core,ItemConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\ItemConverter.cs,IsItemHM,The following statement contains a magic number: return generation switch              {                  1 => (196 <= item && item <= 200)' // HMs                  2 => (item >= 243)' // HMs                  3 => (339 <= item && item <= 346)'                  _ => ((420 <= item && item <= 427) || item == 737)              };
Magic Number,PKHeX.Core,ItemConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\ItemConverter.cs,IsItemHM,The following statement contains a magic number: return generation switch              {                  1 => (196 <= item && item <= 200)' // HMs                  2 => (item >= 243)' // HMs                  3 => (339 <= item && item <= 346)'                  _ => ((420 <= item && item <= 427) || item == 737)              };
Magic Number,PKHeX.Core,ItemConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\ItemConverter.cs,IsItemHM,The following statement contains a magic number: return generation switch              {                  1 => (196 <= item && item <= 200)' // HMs                  2 => (item >= 243)' // HMs                  3 => (339 <= item && item <= 346)'                  _ => ((420 <= item && item <= 427) || item == 737)              };
Magic Number,PKHeX.Core,Language,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\Language.cs,GetAvailableGameLanguages,The following statement contains a magic number: generation < 3
Magic Number,PKHeX.Core,Language,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\Language.cs,GetAvailableGameLanguages,The following statement contains a magic number: generation < 4
Magic Number,PKHeX.Core,Language,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\Language.cs,GetAvailableGameLanguages,The following statement contains a magic number: generation < 7
Magic Number,PKHeX.Core,Language,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\Language.cs,GetSafeLanguage,The following statement contains a magic number: switch (generation)              {                  case 1:                  case 2:                      if (Languages_GB.Contains((int)prefer) && (prefer != LanguageID.Korean || game == GameVersion.C))                          return prefer;                      return LanguageID.English;                  case 3:                      if (Languages_3.Contains((int)prefer))                          return prefer;                      return LanguageID.English;                  case 4:                  case 5:                  case 6:                      if (Languages_46.Contains((int)prefer))                          return prefer;                      return LanguageID.English;                  default:                      if (Languages_7.Contains((int)prefer))                          return prefer;                      return LanguageID.English;              }
Magic Number,PKHeX.Core,Language,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\Language.cs,GetSafeLanguage,The following statement contains a magic number: switch (generation)              {                  case 1:                  case 2:                      if (Languages_GB.Contains((int)prefer) && (prefer != LanguageID.Korean || game == GameVersion.C))                          return prefer;                      return LanguageID.English;                  case 3:                      if (Languages_3.Contains((int)prefer))                          return prefer;                      return LanguageID.English;                  case 4:                  case 5:                  case 6:                      if (Languages_46.Contains((int)prefer))                          return prefer;                      return LanguageID.English;                  default:                      if (Languages_7.Contains((int)prefer))                          return prefer;                      return LanguageID.English;              }
Magic Number,PKHeX.Core,Language,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\Language.cs,GetSafeLanguage,The following statement contains a magic number: switch (generation)              {                  case 1:                  case 2:                      if (Languages_GB.Contains((int)prefer) && (prefer != LanguageID.Korean || game == GameVersion.C))                          return prefer;                      return LanguageID.English;                  case 3:                      if (Languages_3.Contains((int)prefer))                          return prefer;                      return LanguageID.English;                  case 4:                  case 5:                  case 6:                      if (Languages_46.Contains((int)prefer))                          return prefer;                      return LanguageID.English;                  default:                      if (Languages_7.Contains((int)prefer))                          return prefer;                      return LanguageID.English;              }
Magic Number,PKHeX.Core,Language,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\Language.cs,GetSafeLanguage,The following statement contains a magic number: switch (generation)              {                  case 1:                  case 2:                      if (Languages_GB.Contains((int)prefer) && (prefer != LanguageID.Korean || game == GameVersion.C))                          return prefer;                      return LanguageID.English;                  case 3:                      if (Languages_3.Contains((int)prefer))                          return prefer;                      return LanguageID.English;                  case 4:                  case 5:                  case 6:                      if (Languages_46.Contains((int)prefer))                          return prefer;                      return LanguageID.English;                  default:                      if (Languages_7.Contains((int)prefer))                          return prefer;                      return LanguageID.English;              }
Magic Number,PKHeX.Core,Language,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\Language.cs,GetSafeLanguage,The following statement contains a magic number: switch (generation)              {                  case 1:                  case 2:                      if (Languages_GB.Contains((int)prefer) && (prefer != LanguageID.Korean || game == GameVersion.C))                          return prefer;                      return LanguageID.English;                  case 3:                      if (Languages_3.Contains((int)prefer))                          return prefer;                      return LanguageID.English;                  case 4:                  case 5:                  case 6:                      if (Languages_46.Contains((int)prefer))                          return prefer;                      return LanguageID.English;                  default:                      if (Languages_7.Contains((int)prefer))                          return prefer;                      return LanguageID.English;              }
Magic Number,PKHeX.Core,Language,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\Language.cs,GetMainLangIDfromGC,The following statement contains a magic number: value <= 2 || value > 7
Magic Number,PKHeX.Core,Language,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\Language.cs,GetMainLangIDfromGC,The following statement contains a magic number: value <= 2 || value > 7
Magic Number,PKHeX.Core,Language,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\Language.cs,GetGCLangIDfromMain,The following statement contains a magic number: value <= 2 || value > 7
Magic Number,PKHeX.Core,Language,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\Language.cs,GetGCLangIDfromMain,The following statement contains a magic number: value <= 2 || value > 7
Magic Number,PKHeX.Core,PKMConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\PKMConverter.cs,GetPKMDataFormat,The following statement contains a magic number: switch (data.Length)              {                  case PKX.SIZE_1JLIST:                  case PKX.SIZE_1ULIST:                      return 1;                  case PKX.SIZE_2ULIST:                  case PKX.SIZE_2JLIST:                      return 2;                  case PKX.SIZE_3PARTY:                  case PKX.SIZE_3STORED:                  case PKX.SIZE_3CSTORED:                  case PKX.SIZE_3XSTORED:                      return 3;                  case PKX.SIZE_4PARTY:                  case PKX.SIZE_4STORED:                  case PKX.SIZE_5PARTY:                      if ((BitConverter.ToUInt16(data' 0x4) == 0) && (BitConverter.ToUInt16(data' 0x80) >= 0x3333 || data[0x5F] >= 0x10) && BitConverter.ToUInt16(data' 0x46) == 0) // PK5                          return 5;                      return 4;                  case PKX.SIZE_6STORED:                      return 6;                  case PKX.SIZE_6PARTY: // collision with PGT' same size.                      if (BitConverter.ToUInt16(data' 0x4) != 0) // Bad Sanity?                          return -1;                      if (BitConverter.ToUInt32(data' 0x06) == PKX.GetCHK(data))                          return 6;                      if (BitConverter.ToUInt16(data' 0x58) != 0) // Encrypted?                      {                          for (int i = data.Length - 0x10; i < data.Length; i++) // 0x10 of 00's at the end != PK6                          {                              if (data[i] != 0)                                  return 6;                          }                            return -1;                      }                      return 6;                  case PKX.SIZE_8PARTY:                  case PKX.SIZE_8STORED:                      return 8;                    default:                      return -1;              }
Magic Number,PKHeX.Core,PKMConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\PKMConverter.cs,GetPKMDataFormat,The following statement contains a magic number: switch (data.Length)              {                  case PKX.SIZE_1JLIST:                  case PKX.SIZE_1ULIST:                      return 1;                  case PKX.SIZE_2ULIST:                  case PKX.SIZE_2JLIST:                      return 2;                  case PKX.SIZE_3PARTY:                  case PKX.SIZE_3STORED:                  case PKX.SIZE_3CSTORED:                  case PKX.SIZE_3XSTORED:                      return 3;                  case PKX.SIZE_4PARTY:                  case PKX.SIZE_4STORED:                  case PKX.SIZE_5PARTY:                      if ((BitConverter.ToUInt16(data' 0x4) == 0) && (BitConverter.ToUInt16(data' 0x80) >= 0x3333 || data[0x5F] >= 0x10) && BitConverter.ToUInt16(data' 0x46) == 0) // PK5                          return 5;                      return 4;                  case PKX.SIZE_6STORED:                      return 6;                  case PKX.SIZE_6PARTY: // collision with PGT' same size.                      if (BitConverter.ToUInt16(data' 0x4) != 0) // Bad Sanity?                          return -1;                      if (BitConverter.ToUInt32(data' 0x06) == PKX.GetCHK(data))                          return 6;                      if (BitConverter.ToUInt16(data' 0x58) != 0) // Encrypted?                      {                          for (int i = data.Length - 0x10; i < data.Length; i++) // 0x10 of 00's at the end != PK6                          {                              if (data[i] != 0)                                  return 6;                          }                            return -1;                      }                      return 6;                  case PKX.SIZE_8PARTY:                  case PKX.SIZE_8STORED:                      return 8;                    default:                      return -1;              }
Magic Number,PKHeX.Core,PKMConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\PKMConverter.cs,GetPKMDataFormat,The following statement contains a magic number: switch (data.Length)              {                  case PKX.SIZE_1JLIST:                  case PKX.SIZE_1ULIST:                      return 1;                  case PKX.SIZE_2ULIST:                  case PKX.SIZE_2JLIST:                      return 2;                  case PKX.SIZE_3PARTY:                  case PKX.SIZE_3STORED:                  case PKX.SIZE_3CSTORED:                  case PKX.SIZE_3XSTORED:                      return 3;                  case PKX.SIZE_4PARTY:                  case PKX.SIZE_4STORED:                  case PKX.SIZE_5PARTY:                      if ((BitConverter.ToUInt16(data' 0x4) == 0) && (BitConverter.ToUInt16(data' 0x80) >= 0x3333 || data[0x5F] >= 0x10) && BitConverter.ToUInt16(data' 0x46) == 0) // PK5                          return 5;                      return 4;                  case PKX.SIZE_6STORED:                      return 6;                  case PKX.SIZE_6PARTY: // collision with PGT' same size.                      if (BitConverter.ToUInt16(data' 0x4) != 0) // Bad Sanity?                          return -1;                      if (BitConverter.ToUInt32(data' 0x06) == PKX.GetCHK(data))                          return 6;                      if (BitConverter.ToUInt16(data' 0x58) != 0) // Encrypted?                      {                          for (int i = data.Length - 0x10; i < data.Length; i++) // 0x10 of 00's at the end != PK6                          {                              if (data[i] != 0)                                  return 6;                          }                            return -1;                      }                      return 6;                  case PKX.SIZE_8PARTY:                  case PKX.SIZE_8STORED:                      return 8;                    default:                      return -1;              }
Magic Number,PKHeX.Core,PKMConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\PKMConverter.cs,GetPKMDataFormat,The following statement contains a magic number: switch (data.Length)              {                  case PKX.SIZE_1JLIST:                  case PKX.SIZE_1ULIST:                      return 1;                  case PKX.SIZE_2ULIST:                  case PKX.SIZE_2JLIST:                      return 2;                  case PKX.SIZE_3PARTY:                  case PKX.SIZE_3STORED:                  case PKX.SIZE_3CSTORED:                  case PKX.SIZE_3XSTORED:                      return 3;                  case PKX.SIZE_4PARTY:                  case PKX.SIZE_4STORED:                  case PKX.SIZE_5PARTY:                      if ((BitConverter.ToUInt16(data' 0x4) == 0) && (BitConverter.ToUInt16(data' 0x80) >= 0x3333 || data[0x5F] >= 0x10) && BitConverter.ToUInt16(data' 0x46) == 0) // PK5                          return 5;                      return 4;                  case PKX.SIZE_6STORED:                      return 6;                  case PKX.SIZE_6PARTY: // collision with PGT' same size.                      if (BitConverter.ToUInt16(data' 0x4) != 0) // Bad Sanity?                          return -1;                      if (BitConverter.ToUInt32(data' 0x06) == PKX.GetCHK(data))                          return 6;                      if (BitConverter.ToUInt16(data' 0x58) != 0) // Encrypted?                      {                          for (int i = data.Length - 0x10; i < data.Length; i++) // 0x10 of 00's at the end != PK6                          {                              if (data[i] != 0)                                  return 6;                          }                            return -1;                      }                      return 6;                  case PKX.SIZE_8PARTY:                  case PKX.SIZE_8STORED:                      return 8;                    default:                      return -1;              }
Magic Number,PKHeX.Core,PKMConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\PKMConverter.cs,GetPKMDataFormat,The following statement contains a magic number: switch (data.Length)              {                  case PKX.SIZE_1JLIST:                  case PKX.SIZE_1ULIST:                      return 1;                  case PKX.SIZE_2ULIST:                  case PKX.SIZE_2JLIST:                      return 2;                  case PKX.SIZE_3PARTY:                  case PKX.SIZE_3STORED:                  case PKX.SIZE_3CSTORED:                  case PKX.SIZE_3XSTORED:                      return 3;                  case PKX.SIZE_4PARTY:                  case PKX.SIZE_4STORED:                  case PKX.SIZE_5PARTY:                      if ((BitConverter.ToUInt16(data' 0x4) == 0) && (BitConverter.ToUInt16(data' 0x80) >= 0x3333 || data[0x5F] >= 0x10) && BitConverter.ToUInt16(data' 0x46) == 0) // PK5                          return 5;                      return 4;                  case PKX.SIZE_6STORED:                      return 6;                  case PKX.SIZE_6PARTY: // collision with PGT' same size.                      if (BitConverter.ToUInt16(data' 0x4) != 0) // Bad Sanity?                          return -1;                      if (BitConverter.ToUInt32(data' 0x06) == PKX.GetCHK(data))                          return 6;                      if (BitConverter.ToUInt16(data' 0x58) != 0) // Encrypted?                      {                          for (int i = data.Length - 0x10; i < data.Length; i++) // 0x10 of 00's at the end != PK6                          {                              if (data[i] != 0)                                  return 6;                          }                            return -1;                      }                      return 6;                  case PKX.SIZE_8PARTY:                  case PKX.SIZE_8STORED:                      return 8;                    default:                      return -1;              }
Magic Number,PKHeX.Core,PKMConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\PKMConverter.cs,GetPKMDataFormat,The following statement contains a magic number: switch (data.Length)              {                  case PKX.SIZE_1JLIST:                  case PKX.SIZE_1ULIST:                      return 1;                  case PKX.SIZE_2ULIST:                  case PKX.SIZE_2JLIST:                      return 2;                  case PKX.SIZE_3PARTY:                  case PKX.SIZE_3STORED:                  case PKX.SIZE_3CSTORED:                  case PKX.SIZE_3XSTORED:                      return 3;                  case PKX.SIZE_4PARTY:                  case PKX.SIZE_4STORED:                  case PKX.SIZE_5PARTY:                      if ((BitConverter.ToUInt16(data' 0x4) == 0) && (BitConverter.ToUInt16(data' 0x80) >= 0x3333 || data[0x5F] >= 0x10) && BitConverter.ToUInt16(data' 0x46) == 0) // PK5                          return 5;                      return 4;                  case PKX.SIZE_6STORED:                      return 6;                  case PKX.SIZE_6PARTY: // collision with PGT' same size.                      if (BitConverter.ToUInt16(data' 0x4) != 0) // Bad Sanity?                          return -1;                      if (BitConverter.ToUInt32(data' 0x06) == PKX.GetCHK(data))                          return 6;                      if (BitConverter.ToUInt16(data' 0x58) != 0) // Encrypted?                      {                          for (int i = data.Length - 0x10; i < data.Length; i++) // 0x10 of 00's at the end != PK6                          {                              if (data[i] != 0)                                  return 6;                          }                            return -1;                      }                      return 6;                  case PKX.SIZE_8PARTY:                  case PKX.SIZE_8STORED:                      return 8;                    default:                      return -1;              }
Magic Number,PKHeX.Core,PKMConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\PKMConverter.cs,GetPKMDataFormat,The following statement contains a magic number: switch (data.Length)              {                  case PKX.SIZE_1JLIST:                  case PKX.SIZE_1ULIST:                      return 1;                  case PKX.SIZE_2ULIST:                  case PKX.SIZE_2JLIST:                      return 2;                  case PKX.SIZE_3PARTY:                  case PKX.SIZE_3STORED:                  case PKX.SIZE_3CSTORED:                  case PKX.SIZE_3XSTORED:                      return 3;                  case PKX.SIZE_4PARTY:                  case PKX.SIZE_4STORED:                  case PKX.SIZE_5PARTY:                      if ((BitConverter.ToUInt16(data' 0x4) == 0) && (BitConverter.ToUInt16(data' 0x80) >= 0x3333 || data[0x5F] >= 0x10) && BitConverter.ToUInt16(data' 0x46) == 0) // PK5                          return 5;                      return 4;                  case PKX.SIZE_6STORED:                      return 6;                  case PKX.SIZE_6PARTY: // collision with PGT' same size.                      if (BitConverter.ToUInt16(data' 0x4) != 0) // Bad Sanity?                          return -1;                      if (BitConverter.ToUInt32(data' 0x06) == PKX.GetCHK(data))                          return 6;                      if (BitConverter.ToUInt16(data' 0x58) != 0) // Encrypted?                      {                          for (int i = data.Length - 0x10; i < data.Length; i++) // 0x10 of 00's at the end != PK6                          {                              if (data[i] != 0)                                  return 6;                          }                            return -1;                      }                      return 6;                  case PKX.SIZE_8PARTY:                  case PKX.SIZE_8STORED:                      return 8;                    default:                      return -1;              }
Magic Number,PKHeX.Core,PKMConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\PKMConverter.cs,GetPKMDataFormat,The following statement contains a magic number: switch (data.Length)              {                  case PKX.SIZE_1JLIST:                  case PKX.SIZE_1ULIST:                      return 1;                  case PKX.SIZE_2ULIST:                  case PKX.SIZE_2JLIST:                      return 2;                  case PKX.SIZE_3PARTY:                  case PKX.SIZE_3STORED:                  case PKX.SIZE_3CSTORED:                  case PKX.SIZE_3XSTORED:                      return 3;                  case PKX.SIZE_4PARTY:                  case PKX.SIZE_4STORED:                  case PKX.SIZE_5PARTY:                      if ((BitConverter.ToUInt16(data' 0x4) == 0) && (BitConverter.ToUInt16(data' 0x80) >= 0x3333 || data[0x5F] >= 0x10) && BitConverter.ToUInt16(data' 0x46) == 0) // PK5                          return 5;                      return 4;                  case PKX.SIZE_6STORED:                      return 6;                  case PKX.SIZE_6PARTY: // collision with PGT' same size.                      if (BitConverter.ToUInt16(data' 0x4) != 0) // Bad Sanity?                          return -1;                      if (BitConverter.ToUInt32(data' 0x06) == PKX.GetCHK(data))                          return 6;                      if (BitConverter.ToUInt16(data' 0x58) != 0) // Encrypted?                      {                          for (int i = data.Length - 0x10; i < data.Length; i++) // 0x10 of 00's at the end != PK6                          {                              if (data[i] != 0)                                  return 6;                          }                            return -1;                      }                      return 6;                  case PKX.SIZE_8PARTY:                  case PKX.SIZE_8STORED:                      return 8;                    default:                      return -1;              }
Magic Number,PKHeX.Core,PKMConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\PKMConverter.cs,GetPKMDataFormat,The following statement contains a magic number: switch (data.Length)              {                  case PKX.SIZE_1JLIST:                  case PKX.SIZE_1ULIST:                      return 1;                  case PKX.SIZE_2ULIST:                  case PKX.SIZE_2JLIST:                      return 2;                  case PKX.SIZE_3PARTY:                  case PKX.SIZE_3STORED:                  case PKX.SIZE_3CSTORED:                  case PKX.SIZE_3XSTORED:                      return 3;                  case PKX.SIZE_4PARTY:                  case PKX.SIZE_4STORED:                  case PKX.SIZE_5PARTY:                      if ((BitConverter.ToUInt16(data' 0x4) == 0) && (BitConverter.ToUInt16(data' 0x80) >= 0x3333 || data[0x5F] >= 0x10) && BitConverter.ToUInt16(data' 0x46) == 0) // PK5                          return 5;                      return 4;                  case PKX.SIZE_6STORED:                      return 6;                  case PKX.SIZE_6PARTY: // collision with PGT' same size.                      if (BitConverter.ToUInt16(data' 0x4) != 0) // Bad Sanity?                          return -1;                      if (BitConverter.ToUInt32(data' 0x06) == PKX.GetCHK(data))                          return 6;                      if (BitConverter.ToUInt16(data' 0x58) != 0) // Encrypted?                      {                          for (int i = data.Length - 0x10; i < data.Length; i++) // 0x10 of 00's at the end != PK6                          {                              if (data[i] != 0)                                  return 6;                          }                            return -1;                      }                      return 6;                  case PKX.SIZE_8PARTY:                  case PKX.SIZE_8STORED:                      return 8;                    default:                      return -1;              }
Magic Number,PKHeX.Core,PKMConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\PKMConverter.cs,GetPKMfromBytes,The following statement contains a magic number: switch (format)              {                  case 1:                      var PL1 = new PokeList1(data);                      return PL1[0];                  case 2:                      var PL2 = new PokeList2(data);                      return PL2[0];                  case 3:                      return data.Length switch                      {                          PKX.SIZE_3CSTORED => new CK3(data)'                          PKX.SIZE_3XSTORED => new XK3(data)'                          _ => (PKM)new PK3(data)                      };                  case 4:                      var pk = new PK4(data);                      if (!pk.Valid || pk.Sanity != 0)                      {                          var bk = new BK4(data);                          if (bk.Valid)                              return bk;                      }                      return pk;                  case 5:                      return new PK5(data);                  case 6:                      var pkx = new PK6(data);                      return CheckPKMFormat7(pkx' prefer);                  case 8:                      return new PK8(data);                  default:                      return null;              }
Magic Number,PKHeX.Core,PKMConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\PKMConverter.cs,GetPKMfromBytes,The following statement contains a magic number: switch (format)              {                  case 1:                      var PL1 = new PokeList1(data);                      return PL1[0];                  case 2:                      var PL2 = new PokeList2(data);                      return PL2[0];                  case 3:                      return data.Length switch                      {                          PKX.SIZE_3CSTORED => new CK3(data)'                          PKX.SIZE_3XSTORED => new XK3(data)'                          _ => (PKM)new PK3(data)                      };                  case 4:                      var pk = new PK4(data);                      if (!pk.Valid || pk.Sanity != 0)                      {                          var bk = new BK4(data);                          if (bk.Valid)                              return bk;                      }                      return pk;                  case 5:                      return new PK5(data);                  case 6:                      var pkx = new PK6(data);                      return CheckPKMFormat7(pkx' prefer);                  case 8:                      return new PK8(data);                  default:                      return null;              }
Magic Number,PKHeX.Core,PKMConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\PKMConverter.cs,GetPKMfromBytes,The following statement contains a magic number: switch (format)              {                  case 1:                      var PL1 = new PokeList1(data);                      return PL1[0];                  case 2:                      var PL2 = new PokeList2(data);                      return PL2[0];                  case 3:                      return data.Length switch                      {                          PKX.SIZE_3CSTORED => new CK3(data)'                          PKX.SIZE_3XSTORED => new XK3(data)'                          _ => (PKM)new PK3(data)                      };                  case 4:                      var pk = new PK4(data);                      if (!pk.Valid || pk.Sanity != 0)                      {                          var bk = new BK4(data);                          if (bk.Valid)                              return bk;                      }                      return pk;                  case 5:                      return new PK5(data);                  case 6:                      var pkx = new PK6(data);                      return CheckPKMFormat7(pkx' prefer);                  case 8:                      return new PK8(data);                  default:                      return null;              }
Magic Number,PKHeX.Core,PKMConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\PKMConverter.cs,GetPKMfromBytes,The following statement contains a magic number: switch (format)              {                  case 1:                      var PL1 = new PokeList1(data);                      return PL1[0];                  case 2:                      var PL2 = new PokeList2(data);                      return PL2[0];                  case 3:                      return data.Length switch                      {                          PKX.SIZE_3CSTORED => new CK3(data)'                          PKX.SIZE_3XSTORED => new XK3(data)'                          _ => (PKM)new PK3(data)                      };                  case 4:                      var pk = new PK4(data);                      if (!pk.Valid || pk.Sanity != 0)                      {                          var bk = new BK4(data);                          if (bk.Valid)                              return bk;                      }                      return pk;                  case 5:                      return new PK5(data);                  case 6:                      var pkx = new PK6(data);                      return CheckPKMFormat7(pkx' prefer);                  case 8:                      return new PK8(data);                  default:                      return null;              }
Magic Number,PKHeX.Core,PKMConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\PKMConverter.cs,GetPKMfromBytes,The following statement contains a magic number: switch (format)              {                  case 1:                      var PL1 = new PokeList1(data);                      return PL1[0];                  case 2:                      var PL2 = new PokeList2(data);                      return PL2[0];                  case 3:                      return data.Length switch                      {                          PKX.SIZE_3CSTORED => new CK3(data)'                          PKX.SIZE_3XSTORED => new XK3(data)'                          _ => (PKM)new PK3(data)                      };                  case 4:                      var pk = new PK4(data);                      if (!pk.Valid || pk.Sanity != 0)                      {                          var bk = new BK4(data);                          if (bk.Valid)                              return bk;                      }                      return pk;                  case 5:                      return new PK5(data);                  case 6:                      var pkx = new PK6(data);                      return CheckPKMFormat7(pkx' prefer);                  case 8:                      return new PK8(data);                  default:                      return null;              }
Magic Number,PKHeX.Core,PKMConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\PKMConverter.cs,GetPKMfromBytes,The following statement contains a magic number: switch (format)              {                  case 1:                      var PL1 = new PokeList1(data);                      return PL1[0];                  case 2:                      var PL2 = new PokeList2(data);                      return PL2[0];                  case 3:                      return data.Length switch                      {                          PKX.SIZE_3CSTORED => new CK3(data)'                          PKX.SIZE_3XSTORED => new XK3(data)'                          _ => (PKM)new PK3(data)                      };                  case 4:                      var pk = new PK4(data);                      if (!pk.Valid || pk.Sanity != 0)                      {                          var bk = new BK4(data);                          if (bk.Valid)                              return bk;                      }                      return pk;                  case 5:                      return new PK5(data);                  case 6:                      var pkx = new PK6(data);                      return CheckPKMFormat7(pkx' prefer);                  case 8:                      return new PK8(data);                  default:                      return null;              }
Magic Number,PKHeX.Core,PKMConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\PKMConverter.cs,IsPK6FormatReallyPK7,The following statement contains a magic number: pk.CurrentLevel < 100
Magic Number,PKHeX.Core,PKMConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\PKMConverter.cs,IsPK6FormatReallyPK7,The following statement contains a magic number: et > 24
Magic Number,PKHeX.Core,PKMConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\PKMConverter.cs,IsPK6FormatReallyPK7,The following statement contains a magic number: (mb >> (i << 1) & 3) == 3
Magic Number,PKHeX.Core,PKMConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\PKMConverter.cs,IsPK6FormatReallyPK7,The following statement contains a magic number: (mb >> (i << 1) & 3) == 3
Magic Number,PKHeX.Core,PKMConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\PKMConverter.cs,IsPK6FormatReallyPK7,The following statement contains a magic number: i < 6
Magic Number,PKHeX.Core,PKMConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\PKMConverter.cs,IsPK6FormatReallyPK7,The following statement contains a magic number: pk.Data[0x2A] > 20
Magic Number,PKHeX.Core,PKMConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\PKMConverter.cs,IsPK6FormatReallyPK7,The following statement contains a magic number: return preferredFormat > 6;
Magic Number,PKHeX.Core,PKMConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\PKMConverter.cs,IsConvertibleToFormat,The following statement contains a magic number: pk.Format >= 3 && pk.Format > format
Magic Number,PKHeX.Core,PKMConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\PKMConverter.cs,IsConvertibleToFormat,The following statement contains a magic number: pk.Format <= 2 && format > 2 && format < 7
Magic Number,PKHeX.Core,PKMConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\PKMConverter.cs,IsConvertibleToFormat,The following statement contains a magic number: pk.Format <= 2 && format > 2 && format < 7
Magic Number,PKHeX.Core,PKMConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\PKMConverter.cs,IsConvertibleToFormat,The following statement contains a magic number: pk.Format <= 2 && format > 2 && format < 7
Magic Number,PKHeX.Core,PKMConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\PKMConverter.cs,IntermediaryConvert,The following statement contains a magic number: switch (pk)              {                  // Non-sequential                  case PK1 pk1 when toFormat > 2: return pk1.ConvertToPK7();                  case PK2 pk2 when toFormat > 2: return pk2.ConvertToPK7();                  case PK3 pk3 when PKMType == typeof(CK3): return pk3.ConvertToCK3();                  case PK3 pk3 when PKMType == typeof(XK3): return pk3.ConvertToXK3();                  case PK4 pk4 when PKMType == typeof(BK4): return pk4.ConvertToBK4();                    // Invalid                  case PK2 pk2 when pk.Species > Legal.MaxSpeciesID_1:                      var lang = pk2.Japanese ? (int)LanguageID.Japanese : (int)LanguageID.English;                      var name = SpeciesName.GetSpeciesName(pk2.Species' lang);                      comment = string.Format(MsgPKMConvertFailFormat' name' PKMType.Name);                      return null;                    // Sequential                  case PK1 pk1: return pk1.ConvertToPK2();                  case PK2 pk2: return pk2.ConvertToPK1();                  case CK3 ck3: return ck3.ConvertToPK3();                  case XK3 xk3: return xk3.ConvertToPK3();                  case PK3 pk3: return pk3.ConvertToPK4();                  case BK4 bk4: return bk4.ConvertToPK4();                  case PK4 pk4: return pk4.ConvertToPK5();                  case PK5 pk5: return pk5.ConvertToPK6();                  case PK6 pk6: return pk6.ConvertToPK7();                  case PK7 pk7: return pk7.ConvertToPK8();                  case PB7 pb7: return pb7.ConvertToPK8();                    // None                  default:                      comment = MsgPKMConvertFailNoMethod;                      return null;              }
Magic Number,PKHeX.Core,PKMConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\PKMConverter.cs,IntermediaryConvert,The following statement contains a magic number: switch (pk)              {                  // Non-sequential                  case PK1 pk1 when toFormat > 2: return pk1.ConvertToPK7();                  case PK2 pk2 when toFormat > 2: return pk2.ConvertToPK7();                  case PK3 pk3 when PKMType == typeof(CK3): return pk3.ConvertToCK3();                  case PK3 pk3 when PKMType == typeof(XK3): return pk3.ConvertToXK3();                  case PK4 pk4 when PKMType == typeof(BK4): return pk4.ConvertToBK4();                    // Invalid                  case PK2 pk2 when pk.Species > Legal.MaxSpeciesID_1:                      var lang = pk2.Japanese ? (int)LanguageID.Japanese : (int)LanguageID.English;                      var name = SpeciesName.GetSpeciesName(pk2.Species' lang);                      comment = string.Format(MsgPKMConvertFailFormat' name' PKMType.Name);                      return null;                    // Sequential                  case PK1 pk1: return pk1.ConvertToPK2();                  case PK2 pk2: return pk2.ConvertToPK1();                  case CK3 ck3: return ck3.ConvertToPK3();                  case XK3 xk3: return xk3.ConvertToPK3();                  case PK3 pk3: return pk3.ConvertToPK4();                  case BK4 bk4: return bk4.ConvertToPK4();                  case PK4 pk4: return pk4.ConvertToPK5();                  case PK5 pk5: return pk5.ConvertToPK6();                  case PK6 pk6: return pk6.ConvertToPK7();                  case PK7 pk7: return pk7.ConvertToPK8();                  case PB7 pb7: return pb7.ConvertToPK8();                    // None                  default:                      comment = MsgPKMConvertFailNoMethod;                      return null;              }
Magic Number,PKHeX.Core,PKMConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\PKMConverter.cs,IsNotTransferable,The following statement contains a magic number: switch (pk.Species)              {                  default:                      comment = string.Empty;                      return false;                    case 025 when pk.AltForm != 0 && pk.Gen6: // Cosplay Pikachu                  case 172 when pk.AltForm != 0 && pk.Gen4: // Spiky Eared Pichu                  case 025 when pk.AltForm == 8 && pk.GG: // Buddy Pikachu                  case 133 when pk.AltForm == 1 && pk.GG: // Buddy Eevee                      comment = MsgPKMConvertFailForme;                      return true;              }
Magic Number,PKHeX.Core,PKMConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\PKMConverter.cs,IsNotTransferable,The following statement contains a magic number: switch (pk.Species)              {                  default:                      comment = string.Empty;                      return false;                    case 025 when pk.AltForm != 0 && pk.Gen6: // Cosplay Pikachu                  case 172 when pk.AltForm != 0 && pk.Gen4: // Spiky Eared Pichu                  case 025 when pk.AltForm == 8 && pk.GG: // Buddy Pikachu                  case 133 when pk.AltForm == 1 && pk.GG: // Buddy Eevee                      comment = MsgPKMConvertFailForme;                      return true;              }
Magic Number,PKHeX.Core,PKMConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\PKMConverter.cs,IsNotTransferable,The following statement contains a magic number: switch (pk.Species)              {                  default:                      comment = string.Empty;                      return false;                    case 025 when pk.AltForm != 0 && pk.Gen6: // Cosplay Pikachu                  case 172 when pk.AltForm != 0 && pk.Gen4: // Spiky Eared Pichu                  case 025 when pk.AltForm == 8 && pk.GG: // Buddy Pikachu                  case 133 when pk.AltForm == 1 && pk.GG: // Buddy Eevee                      comment = MsgPKMConvertFailForme;                      return true;              }
Magic Number,PKHeX.Core,PKMConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\PKMConverter.cs,IsNotTransferable,The following statement contains a magic number: switch (pk.Species)              {                  default:                      comment = string.Empty;                      return false;                    case 025 when pk.AltForm != 0 && pk.Gen6: // Cosplay Pikachu                  case 172 when pk.AltForm != 0 && pk.Gen4: // Spiky Eared Pichu                  case 025 when pk.AltForm == 8 && pk.GG: // Buddy Pikachu                  case 133 when pk.AltForm == 1 && pk.GG: // Buddy Eevee                      comment = MsgPKMConvertFailForme;                      return true;              }
Magic Number,PKHeX.Core,PKMConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\PKMConverter.cs,IsNotTransferable,The following statement contains a magic number: switch (pk.Species)              {                  default:                      comment = string.Empty;                      return false;                    case 025 when pk.AltForm != 0 && pk.Gen6: // Cosplay Pikachu                  case 172 when pk.AltForm != 0 && pk.Gen4: // Spiky Eared Pichu                  case 025 when pk.AltForm == 8 && pk.GG: // Buddy Pikachu                  case 133 when pk.AltForm == 1 && pk.GG: // Buddy Eevee                      comment = MsgPKMConvertFailForme;                      return true;              }
Magic Number,PKHeX.Core,PKMConverter,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\PKMConverter.cs,GetBlank,The following statement contains a magic number: gen == 7 && GameVersion.GG.Contains(ver)
Magic Number,PKHeX.Core,PKMSorting,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\PKMSorting.cs,IsOriginalHandler,The following statement contains a magic number: pk.Format >= 6
Magic Number,PKHeX.Core,PKMSorting,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\PKMSorting.cs,GetFriendshipDelta,The following statement contains a magic number: return 255;
Magic Number,PKHeX.Core,PKMSorting,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\PKMSorting.cs,GetFriendshipDelta,The following statement contains a magic number: currentFriendship == 255
Magic Number,PKHeX.Core,PKX,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\PKX.cs,GetRandomEVs,The following statement contains a magic number: var evs = new int[6];
Magic Number,PKHeX.Core,PKX,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\PKX.cs,GetRandomEVs,The following statement contains a magic number: int max = 510;
Magic Number,PKHeX.Core,PKX,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\PKX.cs,GetRandomEVs,The following statement contains a magic number: int randomEV() => (byte)Math.Min(Util.Rand.Next(Math.Min(300' max))' 252);
Magic Number,PKHeX.Core,PKX,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\PKX.cs,GetRandomEVs,The following statement contains a magic number: int randomEV() => (byte)Math.Min(Util.Rand.Next(Math.Min(300' max))' 252);
Magic Number,PKHeX.Core,PKX,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\PKX.cs,GetRandomEVs,The following statement contains a magic number: evs[5] = max;
Magic Number,PKHeX.Core,PKX,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\PKX.cs,GetRandomEVs,The following statement contains a magic number: generation > 2
Magic Number,PKHeX.Core,PKX,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\PKX.cs,GetGenderFromString,The following statement contains a magic number: return 2;
Magic Number,PKHeX.Core,PKX,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\PKX.cs,GetGenderFromString,The following statement contains a magic number: switch (s[0])              {                  case '♂': case 'M': return 0;                  case '♀': case 'F': return 1;                  default: return 2;              }
Magic Number,PKHeX.Core,PKX,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\PKX.cs,GetNatureModification,The following statement contains a magic number: incr = (nature / 5) + 1;
Magic Number,PKHeX.Core,PKX,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\PKX.cs,GetNatureModification,The following statement contains a magic number: decr = (nature % 5) + 1;
Magic Number,PKHeX.Core,PKX,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\PKX.cs,GetNatureModification,The following statement contains a magic number: return incr == decr || nature >= 25;
Magic Number,PKHeX.Core,PKX,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\PKX.cs,ModifyStatsForNature,The following statement contains a magic number: stats[incr] *= 11;
Magic Number,PKHeX.Core,PKX,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\PKX.cs,ModifyStatsForNature,The following statement contains a magic number: stats[incr] /= 10;
Magic Number,PKHeX.Core,PKX,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\PKX.cs,ModifyStatsForNature,The following statement contains a magic number: stats[decr] *= 9;
Magic Number,PKHeX.Core,PKX,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\PKX.cs,ModifyStatsForNature,The following statement contains a magic number: stats[decr] /= 10;
Magic Number,PKHeX.Core,PKX,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\PKX.cs,ShuffleArray,The following statement contains a magic number: uint index = sv*4;
Magic Number,PKHeX.Core,PKX,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\PKX.cs,ShuffleArray,The following statement contains a magic number: Array.Copy(data' 8 + (blockSize * ofs)' sdata' 8 + (blockSize * block)' blockSize);
Magic Number,PKHeX.Core,PKX,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\PKX.cs,ShuffleArray,The following statement contains a magic number: Array.Copy(data' 8 + (blockSize * ofs)' sdata' 8 + (blockSize * block)' blockSize);
Magic Number,PKHeX.Core,PKX,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\PKX.cs,ShuffleArray,The following statement contains a magic number: block < 4
Magic Number,PKHeX.Core,PKX,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\PKX.cs,DecryptArray8,The following statement contains a magic number: uint sv = pv >> 13 & 31;
Magic Number,PKHeX.Core,PKX,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\PKX.cs,DecryptArray8,The following statement contains a magic number: uint sv = pv >> 13 & 31;
Magic Number,PKHeX.Core,PKX,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\PKX.cs,EncryptArray8,The following statement contains a magic number: uint sv = pv >> 13 & 31;
Magic Number,PKHeX.Core,PKX,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\PKX.cs,EncryptArray8,The following statement contains a magic number: uint sv = pv >> 13 & 31;
Magic Number,PKHeX.Core,PKX,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\PKX.cs,DecryptArray6,The following statement contains a magic number: uint sv = pv >> 13 & 31;
Magic Number,PKHeX.Core,PKX,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\PKX.cs,DecryptArray6,The following statement contains a magic number: uint sv = pv >> 13 & 31;
Magic Number,PKHeX.Core,PKX,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\PKX.cs,EncryptArray6,The following statement contains a magic number: uint sv = pv >> 13 & 31;
Magic Number,PKHeX.Core,PKX,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\PKX.cs,EncryptArray6,The following statement contains a magic number: uint sv = pv >> 13 & 31;
Magic Number,PKHeX.Core,PKX,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\PKX.cs,DecryptArray45,The following statement contains a magic number: uint chk = BitConverter.ToUInt16(ekm' 6);
Magic Number,PKHeX.Core,PKX,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\PKX.cs,DecryptArray45,The following statement contains a magic number: uint sv = pv >> 13 & 31;
Magic Number,PKHeX.Core,PKX,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\PKX.cs,DecryptArray45,The following statement contains a magic number: uint sv = pv >> 13 & 31;
Magic Number,PKHeX.Core,PKX,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\PKX.cs,EncryptArray45,The following statement contains a magic number: uint chk = BitConverter.ToUInt16(pkm' 6);
Magic Number,PKHeX.Core,PKX,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\PKX.cs,EncryptArray45,The following statement contains a magic number: uint sv = pv >> 13 & 31;
Magic Number,PKHeX.Core,PKX,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\PKX.cs,EncryptArray45,The following statement contains a magic number: uint sv = pv >> 13 & 31;
Magic Number,PKHeX.Core,PKX,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\PKX.cs,CryptPKM,The following statement contains a magic number: const int start = 8;
Magic Number,PKHeX.Core,PKX,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\PKX.cs,CryptPKM,The following statement contains a magic number: int end = (4 * blockSize) + start;
Magic Number,PKHeX.Core,PKX,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\PKX.cs,CryptPKM,The following statement contains a magic number: CryptArray(data' pv' 8' end);
Magic Number,PKHeX.Core,PKX,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\PKX.cs,CryptPKM45,The following statement contains a magic number: const int start = 8;
Magic Number,PKHeX.Core,PKX,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\PKX.cs,CryptPKM45,The following statement contains a magic number: int end = (4 * blockSize) + start;
Magic Number,PKHeX.Core,PKX,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\PKX.cs,CryptArray,The following statement contains a magic number: i += 2;
Magic Number,PKHeX.Core,PKX,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\PKX.cs,CryptArray,The following statement contains a magic number: i += 2;
Magic Number,PKHeX.Core,PKX,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\PKX.cs,Crypt,The following statement contains a magic number: data[i] ^= (byte)(seed >> 16);
Magic Number,PKHeX.Core,PKX,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\PKX.cs,Crypt,The following statement contains a magic number: data[i + 1] ^= (byte)(seed >> 24);
Magic Number,PKHeX.Core,PKX,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\PKX.cs,GetRandomPID,The following statement contains a magic number: origin >= 24
Magic Number,PKHeX.Core,PKX,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\PKX.cs,GetRandomPID,The following statement contains a magic number: bool g3unown = origin <= 5 && species == 201;
Magic Number,PKHeX.Core,PKX,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\PKX.cs,GetRandomPID,The following statement contains a magic number: bool g3unown = origin <= 5 && species == 201;
Magic Number,PKHeX.Core,PKX,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\PKX.cs,GetRandomPID,The following statement contains a magic number: origin <= 15 && pid%25 != nature
Magic Number,PKHeX.Core,PKX,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\PKX.cs,GetRandomPID,The following statement contains a magic number: origin <= 15 && pid%25 != nature
Magic Number,PKHeX.Core,PKX,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\PKX.cs,GetRandomPID,The following statement contains a magic number: gt == 255 || gt == 254 || gt == 0
Magic Number,PKHeX.Core,PKX,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\PKX.cs,GetRandomPID,The following statement contains a magic number: gt == 255 || gt == 254 || gt == 0
Magic Number,PKHeX.Core,PKX,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\PKX.cs,GetUnownForm,The following statement contains a magic number: var val = (pid & 0x3000000) >> 18 | (pid & 0x30000) >> 12 | (pid & 0x300) >> 6 | (pid & 0x3);
Magic Number,PKHeX.Core,PKX,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\PKX.cs,GetUnownForm,The following statement contains a magic number: var val = (pid & 0x3000000) >> 18 | (pid & 0x30000) >> 12 | (pid & 0x300) >> 6 | (pid & 0x3);
Magic Number,PKHeX.Core,PKX,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\PKX.cs,GetUnownForm,The following statement contains a magic number: var val = (pid & 0x3000000) >> 18 | (pid & 0x30000) >> 12 | (pid & 0x300) >> 6 | (pid & 0x3);
Magic Number,PKHeX.Core,PKX,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\PKX.cs,GetUnownForm,The following statement contains a magic number: return (int)(val % 28);
Magic Number,PKHeX.Core,PKX,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\PKX.cs,GetGenderFromPIDAndRatio,The following statement contains a magic number: return gr switch              {                  255 => 2'                  254 => 1'                  0 => 0'                  _ => ((PID & 0xFF) < gr ? 1 : 0)              };
Magic Number,PKHeX.Core,PKX,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\PKX.cs,GetGenderFromPIDAndRatio,The following statement contains a magic number: return gr switch              {                  255 => 2'                  254 => 1'                  0 => 0'                  _ => ((PID & 0xFF) < gr ? 1 : 0)              };
Magic Number,PKHeX.Core,PKX,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\PKX.cs,GetGenderFromPIDAndRatio,The following statement contains a magic number: return gr switch              {                  255 => 2'                  254 => 1'                  0 => 0'                  _ => ((PID & 0xFF) < gr ? 1 : 0)              };
Magic Number,PKHeX.Core,PKX,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\PKX.cs,DecryptArray3,The following statement contains a magic number: uint OID = BitConverter.ToUInt32(ekm' 4);
Magic Number,PKHeX.Core,PKX,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\PKX.cs,DecryptArray3,The following statement contains a magic number: ekm[i] ^= xorkey[i & 3];
Magic Number,PKHeX.Core,PKX,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\PKX.cs,DecryptArray3,The following statement contains a magic number: i < 80
Magic Number,PKHeX.Core,PKX,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\PKX.cs,DecryptArray3,The following statement contains a magic number: return ShuffleArray3(ekm' PID%24);
Magic Number,PKHeX.Core,PKX,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\PKX.cs,ShuffleArray3,The following statement contains a magic number: uint index = sv * 4;
Magic Number,PKHeX.Core,PKX,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\PKX.cs,ShuffleArray3,The following statement contains a magic number: Array.Copy(data' 32 + (12 * ofs)' sdata' 32 + (12 * block)' 12);
Magic Number,PKHeX.Core,PKX,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\PKX.cs,ShuffleArray3,The following statement contains a magic number: Array.Copy(data' 32 + (12 * ofs)' sdata' 32 + (12 * block)' 12);
Magic Number,PKHeX.Core,PKX,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\PKX.cs,ShuffleArray3,The following statement contains a magic number: Array.Copy(data' 32 + (12 * ofs)' sdata' 32 + (12 * block)' 12);
Magic Number,PKHeX.Core,PKX,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\PKX.cs,ShuffleArray3,The following statement contains a magic number: Array.Copy(data' 32 + (12 * ofs)' sdata' 32 + (12 * block)' 12);
Magic Number,PKHeX.Core,PKX,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\PKX.cs,ShuffleArray3,The following statement contains a magic number: Array.Copy(data' 32 + (12 * ofs)' sdata' 32 + (12 * block)' 12);
Magic Number,PKHeX.Core,PKX,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\PKX.cs,ShuffleArray3,The following statement contains a magic number: block < 4
Magic Number,PKHeX.Core,PKX,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\PKX.cs,EncryptArray3,The following statement contains a magic number: uint OID = BitConverter.ToUInt32(pkm' 4);
Magic Number,PKHeX.Core,PKX,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\PKX.cs,EncryptArray3,The following statement contains a magic number: byte[] ekm = ShuffleArray3(pkm' blockPositionInvert[PID%24]);
Magic Number,PKHeX.Core,PKX,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\PKX.cs,EncryptArray3,The following statement contains a magic number: ekm[i] ^= xorkey[i & 3];
Magic Number,PKHeX.Core,PKX,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\PKX.cs,CheckEncrypted,The following statement contains a magic number: switch (format)              {                  case 1:                  case 2: // no encryption                      return;                  case 3:                      if (pkm.Length > SIZE_3PARTY) // C/XD                          return; // no encryption                      ushort chk = GetCHK3(pkm);                      if (chk != BitConverter.ToUInt16(pkm' 0x1C))                          pkm = DecryptArray3(pkm);                      return;                  case 4:                  case 5:                      if (BitConverter.ToUInt16(pkm' 4) != 0) // BK4                          return;                      if (BitConverter.ToUInt32(pkm' 0x64) != 0)                          pkm = DecryptArray45(pkm);                      return;                  case 6:                  case 7:                      if (BitConverter.ToUInt16(pkm' 0xC8) != 0 && BitConverter.ToUInt16(pkm' 0x58) != 0)                          pkm = DecryptArray6(pkm);                      return;                  case 8:                      if (BitConverter.ToUInt16(pkm' 0x70) != 0 && BitConverter.ToUInt16(pkm' 0xC0) != 0)                          pkm = DecryptArray8(pkm);                      return;                  default:                      throw new ArgumentOutOfRangeException(nameof(format));              }
Magic Number,PKHeX.Core,PKX,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\PKX.cs,CheckEncrypted,The following statement contains a magic number: switch (format)              {                  case 1:                  case 2: // no encryption                      return;                  case 3:                      if (pkm.Length > SIZE_3PARTY) // C/XD                          return; // no encryption                      ushort chk = GetCHK3(pkm);                      if (chk != BitConverter.ToUInt16(pkm' 0x1C))                          pkm = DecryptArray3(pkm);                      return;                  case 4:                  case 5:                      if (BitConverter.ToUInt16(pkm' 4) != 0) // BK4                          return;                      if (BitConverter.ToUInt32(pkm' 0x64) != 0)                          pkm = DecryptArray45(pkm);                      return;                  case 6:                  case 7:                      if (BitConverter.ToUInt16(pkm' 0xC8) != 0 && BitConverter.ToUInt16(pkm' 0x58) != 0)                          pkm = DecryptArray6(pkm);                      return;                  case 8:                      if (BitConverter.ToUInt16(pkm' 0x70) != 0 && BitConverter.ToUInt16(pkm' 0xC0) != 0)                          pkm = DecryptArray8(pkm);                      return;                  default:                      throw new ArgumentOutOfRangeException(nameof(format));              }
Magic Number,PKHeX.Core,PKX,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\PKX.cs,CheckEncrypted,The following statement contains a magic number: switch (format)              {                  case 1:                  case 2: // no encryption                      return;                  case 3:                      if (pkm.Length > SIZE_3PARTY) // C/XD                          return; // no encryption                      ushort chk = GetCHK3(pkm);                      if (chk != BitConverter.ToUInt16(pkm' 0x1C))                          pkm = DecryptArray3(pkm);                      return;                  case 4:                  case 5:                      if (BitConverter.ToUInt16(pkm' 4) != 0) // BK4                          return;                      if (BitConverter.ToUInt32(pkm' 0x64) != 0)                          pkm = DecryptArray45(pkm);                      return;                  case 6:                  case 7:                      if (BitConverter.ToUInt16(pkm' 0xC8) != 0 && BitConverter.ToUInt16(pkm' 0x58) != 0)                          pkm = DecryptArray6(pkm);                      return;                  case 8:                      if (BitConverter.ToUInt16(pkm' 0x70) != 0 && BitConverter.ToUInt16(pkm' 0xC0) != 0)                          pkm = DecryptArray8(pkm);                      return;                  default:                      throw new ArgumentOutOfRangeException(nameof(format));              }
Magic Number,PKHeX.Core,PKX,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\PKX.cs,CheckEncrypted,The following statement contains a magic number: switch (format)              {                  case 1:                  case 2: // no encryption                      return;                  case 3:                      if (pkm.Length > SIZE_3PARTY) // C/XD                          return; // no encryption                      ushort chk = GetCHK3(pkm);                      if (chk != BitConverter.ToUInt16(pkm' 0x1C))                          pkm = DecryptArray3(pkm);                      return;                  case 4:                  case 5:                      if (BitConverter.ToUInt16(pkm' 4) != 0) // BK4                          return;                      if (BitConverter.ToUInt32(pkm' 0x64) != 0)                          pkm = DecryptArray45(pkm);                      return;                  case 6:                  case 7:                      if (BitConverter.ToUInt16(pkm' 0xC8) != 0 && BitConverter.ToUInt16(pkm' 0x58) != 0)                          pkm = DecryptArray6(pkm);                      return;                  case 8:                      if (BitConverter.ToUInt16(pkm' 0x70) != 0 && BitConverter.ToUInt16(pkm' 0xC0) != 0)                          pkm = DecryptArray8(pkm);                      return;                  default:                      throw new ArgumentOutOfRangeException(nameof(format));              }
Magic Number,PKHeX.Core,PKX,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\PKX.cs,CheckEncrypted,The following statement contains a magic number: switch (format)              {                  case 1:                  case 2: // no encryption                      return;                  case 3:                      if (pkm.Length > SIZE_3PARTY) // C/XD                          return; // no encryption                      ushort chk = GetCHK3(pkm);                      if (chk != BitConverter.ToUInt16(pkm' 0x1C))                          pkm = DecryptArray3(pkm);                      return;                  case 4:                  case 5:                      if (BitConverter.ToUInt16(pkm' 4) != 0) // BK4                          return;                      if (BitConverter.ToUInt32(pkm' 0x64) != 0)                          pkm = DecryptArray45(pkm);                      return;                  case 6:                  case 7:                      if (BitConverter.ToUInt16(pkm' 0xC8) != 0 && BitConverter.ToUInt16(pkm' 0x58) != 0)                          pkm = DecryptArray6(pkm);                      return;                  case 8:                      if (BitConverter.ToUInt16(pkm' 0x70) != 0 && BitConverter.ToUInt16(pkm' 0xC0) != 0)                          pkm = DecryptArray8(pkm);                      return;                  default:                      throw new ArgumentOutOfRangeException(nameof(format));              }
Magic Number,PKHeX.Core,PKX,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\PKX.cs,CheckEncrypted,The following statement contains a magic number: switch (format)              {                  case 1:                  case 2: // no encryption                      return;                  case 3:                      if (pkm.Length > SIZE_3PARTY) // C/XD                          return; // no encryption                      ushort chk = GetCHK3(pkm);                      if (chk != BitConverter.ToUInt16(pkm' 0x1C))                          pkm = DecryptArray3(pkm);                      return;                  case 4:                  case 5:                      if (BitConverter.ToUInt16(pkm' 4) != 0) // BK4                          return;                      if (BitConverter.ToUInt32(pkm' 0x64) != 0)                          pkm = DecryptArray45(pkm);                      return;                  case 6:                  case 7:                      if (BitConverter.ToUInt16(pkm' 0xC8) != 0 && BitConverter.ToUInt16(pkm' 0x58) != 0)                          pkm = DecryptArray6(pkm);                      return;                  case 8:                      if (BitConverter.ToUInt16(pkm' 0x70) != 0 && BitConverter.ToUInt16(pkm' 0xC0) != 0)                          pkm = DecryptArray8(pkm);                      return;                  default:                      throw new ArgumentOutOfRangeException(nameof(format));              }
Magic Number,PKHeX.Core,PKX,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\PKX.cs,CheckEncrypted,The following statement contains a magic number: switch (format)              {                  case 1:                  case 2: // no encryption                      return;                  case 3:                      if (pkm.Length > SIZE_3PARTY) // C/XD                          return; // no encryption                      ushort chk = GetCHK3(pkm);                      if (chk != BitConverter.ToUInt16(pkm' 0x1C))                          pkm = DecryptArray3(pkm);                      return;                  case 4:                  case 5:                      if (BitConverter.ToUInt16(pkm' 4) != 0) // BK4                          return;                      if (BitConverter.ToUInt32(pkm' 0x64) != 0)                          pkm = DecryptArray45(pkm);                      return;                  case 6:                  case 7:                      if (BitConverter.ToUInt16(pkm' 0xC8) != 0 && BitConverter.ToUInt16(pkm' 0x58) != 0)                          pkm = DecryptArray6(pkm);                      return;                  case 8:                      if (BitConverter.ToUInt16(pkm' 0x70) != 0 && BitConverter.ToUInt16(pkm' 0xC0) != 0)                          pkm = DecryptArray8(pkm);                      return;                  default:                      throw new ArgumentOutOfRangeException(nameof(format));              }
Magic Number,PKHeX.Core,PKX,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\PKX.cs,CheckEncrypted,The following statement contains a magic number: switch (format)              {                  case 1:                  case 2: // no encryption                      return;                  case 3:                      if (pkm.Length > SIZE_3PARTY) // C/XD                          return; // no encryption                      ushort chk = GetCHK3(pkm);                      if (chk != BitConverter.ToUInt16(pkm' 0x1C))                          pkm = DecryptArray3(pkm);                      return;                  case 4:                  case 5:                      if (BitConverter.ToUInt16(pkm' 4) != 0) // BK4                          return;                      if (BitConverter.ToUInt32(pkm' 0x64) != 0)                          pkm = DecryptArray45(pkm);                      return;                  case 6:                  case 7:                      if (BitConverter.ToUInt16(pkm' 0xC8) != 0 && BitConverter.ToUInt16(pkm' 0x58) != 0)                          pkm = DecryptArray6(pkm);                      return;                  case 8:                      if (BitConverter.ToUInt16(pkm' 0x70) != 0 && BitConverter.ToUInt16(pkm' 0xC0) != 0)                          pkm = DecryptArray8(pkm);                      return;                  default:                      throw new ArgumentOutOfRangeException(nameof(format));              }
Magic Number,PKHeX.Core,PKX,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\PKX.cs,GetPKMExtensions,The following statement contains a magic number: int min = maxGeneration <= 2 || maxGeneration >= 7 ? 1 : 3;
Magic Number,PKHeX.Core,PKX,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\PKX.cs,GetPKMExtensions,The following statement contains a magic number: int min = maxGeneration <= 2 || maxGeneration >= 7 ? 1 : 3;
Magic Number,PKHeX.Core,PKX,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\PKX.cs,GetPKMExtensions,The following statement contains a magic number: int min = maxGeneration <= 2 || maxGeneration >= 7 ? 1 : 3;
Magic Number,PKHeX.Core,PKX,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\PKX.cs,GetPKMExtensions,The following statement contains a magic number: maxGeneration >= 3
Magic Number,PKHeX.Core,PKX,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\PKX.cs,GetPKMExtensions,The following statement contains a magic number: maxGeneration >= 4
Magic Number,PKHeX.Core,PKX,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\PKX.cs,GetPKMExtensions,The following statement contains a magic number: maxGeneration >= 7
Magic Number,PKHeX.Core,PKX,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\PKX.cs,GetPKMFormatFromExtension,The following statement contains a magic number: return last == 'x' ? 6 : prefer;
Magic Number,PKHeX.Core,PKX,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\PKX.cs,IsPKMPresent,The following statement contains a magic number: ushort species = BitConverter.ToUInt16(data' offset + 8);
Magic Number,PKHeX.Core,PKX,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\PKX.cs,GetFuncIsPKMPresent,The following statement contains a magic number: blank.Format >= 4
Magic Number,PKHeX.Core,PKX,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\PKX.cs,GetFuncIsPKMPresent,The following statement contains a magic number: blank.Format <= 2
Magic Number,PKHeX.Core,PKX,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\PKX.cs,ReorderSpeedLast,The following statement contains a magic number: var spe = value[3];
Magic Number,PKHeX.Core,PKX,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\PKX.cs,ReorderSpeedLast,The following statement contains a magic number: value[3] = value[4];
Magic Number,PKHeX.Core,PKX,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\PKX.cs,ReorderSpeedLast,The following statement contains a magic number: value[3] = value[4];
Magic Number,PKHeX.Core,PKX,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\PKX.cs,ReorderSpeedLast,The following statement contains a magic number: value[4] = value[5];
Magic Number,PKHeX.Core,PKX,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\PKX.cs,ReorderSpeedLast,The following statement contains a magic number: value[4] = value[5];
Magic Number,PKHeX.Core,PKX,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\PKX.cs,ReorderSpeedLast,The following statement contains a magic number: value[5] = spe;
Magic Number,PKHeX.Core,QRMessageUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\QRMessageUtil.cs,DecodeMessagePKM,The following statement contains a magic number: message.Length < 32
Magic Number,PKHeX.Core,SpeciesName,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\SpeciesName.cs,GetSpeciesNameGeneration,The following statement contains a magic number: generation >= 5
Magic Number,PKHeX.Core,SpeciesName,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\SpeciesName.cs,GetSpeciesNameGeneration,The following statement contains a magic number: generation == 3 && species == 0
Magic Number,PKHeX.Core,SpeciesName,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\SpeciesName.cs,GetSpeciesNameGeneration,The following statement contains a magic number: generation == 2 && lang == (int)LanguageID.Korean
Magic Number,PKHeX.Core,SpeciesName,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\SpeciesName.cs,GetSpeciesNameGeneration,The following statement contains a magic number: generation < 5 && (generation != 4 || species != 0)
Magic Number,PKHeX.Core,SpeciesName,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\SpeciesName.cs,GetSpeciesNameGeneration,The following statement contains a magic number: generation < 5 && (generation != 4 || species != 0)
Magic Number,PKHeX.Core,SpeciesName,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\SpeciesName.cs,GetSpeciesNameGeneration,The following statement contains a magic number: generation < 3
Magic Number,PKHeX.Core,SpeciesName,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Util\SpeciesName.cs,IsNicknamedAnyLanguage,The following statement contains a magic number: species == 083 && string.Equals(nick' "Farfetch'd"' StringComparison.OrdinalIgnoreCase)
Magic Number,PKHeX.Core,XK3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\XK3.cs,ConvertToPK3,The following statement contains a magic number: Version == 15
Magic Number,PKHeX.Core,XK3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\XK3.cs,IsOriginXD,The following statement contains a magic number: switch (species)              {                  case 296: // Makuhita    30 Colo 18 XD                  case 297:                      return metLevel != 30;                  case 175: // Togepi      20 Colo 25 XD' also 20 as Togetic in Colo                  case 176:                      return metLevel != 20;                  case 179: // Mareep      37 Colo 17 XD                  case 180: // Flaafy      30 Colo                  case 181:                      return metLevel != 37 && metLevel != 30;                  case 219: // Magcargo    30 Colo 38 XD (Slugma in Colo)                      return metLevel != 30;                  case 195: // Quagsire    30 Colo // ** Wooper XD                      return metLevel != 30;                  case 334: // Altaria     33 Colo // 36 XD (Swablu in Colo)                      return metLevel != 33;                  case 167: // Ledian      40 Colo // 10 Ledyba XD                      return metLevel != 40;                  case 207: // Gligar      43 Colo // ** Gligar XD                      return metLevel != 43;                  case 221: // Piloswine   43 Colo // 22 Swinub XD                      return metLevel != 43;                  case 205: // Forretress  43 Colo // 20 Pineco XD                      return metLevel != 43;                  case 168: // Ariados     43 Colo // 14 Spinarak XD                      return metLevel != 43;                  case 229: // Houndoom    48 Colo // 17 Houndour XD                      return metLevel != 48;                  case 217: // Ursaring    45 Colo // 11 Teddiursa XD                      return metLevel != 45;                  case 212: // Scizor      50 Colo // 40 Scyther XD                      return metLevel != 50;                  case 196: // Espeon                      return metLevel != 25;                  case 197: // Umbreon                      return metLevel != 26;                        // Gifts                  case 213: // Shuckle                  case 239: case 240: // Elekid                  case 246: case 247: case 248: // Larvitar                  case 307: case 308: // Meditite                      return metLevel == 20;              }
Magic Number,PKHeX.Core,XK3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\XK3.cs,IsOriginXD,The following statement contains a magic number: switch (species)              {                  case 296: // Makuhita    30 Colo 18 XD                  case 297:                      return metLevel != 30;                  case 175: // Togepi      20 Colo 25 XD' also 20 as Togetic in Colo                  case 176:                      return metLevel != 20;                  case 179: // Mareep      37 Colo 17 XD                  case 180: // Flaafy      30 Colo                  case 181:                      return metLevel != 37 && metLevel != 30;                  case 219: // Magcargo    30 Colo 38 XD (Slugma in Colo)                      return metLevel != 30;                  case 195: // Quagsire    30 Colo // ** Wooper XD                      return metLevel != 30;                  case 334: // Altaria     33 Colo // 36 XD (Swablu in Colo)                      return metLevel != 33;                  case 167: // Ledian      40 Colo // 10 Ledyba XD                      return metLevel != 40;                  case 207: // Gligar      43 Colo // ** Gligar XD                      return metLevel != 43;                  case 221: // Piloswine   43 Colo // 22 Swinub XD                      return metLevel != 43;                  case 205: // Forretress  43 Colo // 20 Pineco XD                      return metLevel != 43;                  case 168: // Ariados     43 Colo // 14 Spinarak XD                      return metLevel != 43;                  case 229: // Houndoom    48 Colo // 17 Houndour XD                      return metLevel != 48;                  case 217: // Ursaring    45 Colo // 11 Teddiursa XD                      return metLevel != 45;                  case 212: // Scizor      50 Colo // 40 Scyther XD                      return metLevel != 50;                  case 196: // Espeon                      return metLevel != 25;                  case 197: // Umbreon                      return metLevel != 26;                        // Gifts                  case 213: // Shuckle                  case 239: case 240: // Elekid                  case 246: case 247: case 248: // Larvitar                  case 307: case 308: // Meditite                      return metLevel == 20;              }
Magic Number,PKHeX.Core,XK3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\XK3.cs,IsOriginXD,The following statement contains a magic number: switch (species)              {                  case 296: // Makuhita    30 Colo 18 XD                  case 297:                      return metLevel != 30;                  case 175: // Togepi      20 Colo 25 XD' also 20 as Togetic in Colo                  case 176:                      return metLevel != 20;                  case 179: // Mareep      37 Colo 17 XD                  case 180: // Flaafy      30 Colo                  case 181:                      return metLevel != 37 && metLevel != 30;                  case 219: // Magcargo    30 Colo 38 XD (Slugma in Colo)                      return metLevel != 30;                  case 195: // Quagsire    30 Colo // ** Wooper XD                      return metLevel != 30;                  case 334: // Altaria     33 Colo // 36 XD (Swablu in Colo)                      return metLevel != 33;                  case 167: // Ledian      40 Colo // 10 Ledyba XD                      return metLevel != 40;                  case 207: // Gligar      43 Colo // ** Gligar XD                      return metLevel != 43;                  case 221: // Piloswine   43 Colo // 22 Swinub XD                      return metLevel != 43;                  case 205: // Forretress  43 Colo // 20 Pineco XD                      return metLevel != 43;                  case 168: // Ariados     43 Colo // 14 Spinarak XD                      return metLevel != 43;                  case 229: // Houndoom    48 Colo // 17 Houndour XD                      return metLevel != 48;                  case 217: // Ursaring    45 Colo // 11 Teddiursa XD                      return metLevel != 45;                  case 212: // Scizor      50 Colo // 40 Scyther XD                      return metLevel != 50;                  case 196: // Espeon                      return metLevel != 25;                  case 197: // Umbreon                      return metLevel != 26;                        // Gifts                  case 213: // Shuckle                  case 239: case 240: // Elekid                  case 246: case 247: case 248: // Larvitar                  case 307: case 308: // Meditite                      return metLevel == 20;              }
Magic Number,PKHeX.Core,XK3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\XK3.cs,IsOriginXD,The following statement contains a magic number: switch (species)              {                  case 296: // Makuhita    30 Colo 18 XD                  case 297:                      return metLevel != 30;                  case 175: // Togepi      20 Colo 25 XD' also 20 as Togetic in Colo                  case 176:                      return metLevel != 20;                  case 179: // Mareep      37 Colo 17 XD                  case 180: // Flaafy      30 Colo                  case 181:                      return metLevel != 37 && metLevel != 30;                  case 219: // Magcargo    30 Colo 38 XD (Slugma in Colo)                      return metLevel != 30;                  case 195: // Quagsire    30 Colo // ** Wooper XD                      return metLevel != 30;                  case 334: // Altaria     33 Colo // 36 XD (Swablu in Colo)                      return metLevel != 33;                  case 167: // Ledian      40 Colo // 10 Ledyba XD                      return metLevel != 40;                  case 207: // Gligar      43 Colo // ** Gligar XD                      return metLevel != 43;                  case 221: // Piloswine   43 Colo // 22 Swinub XD                      return metLevel != 43;                  case 205: // Forretress  43 Colo // 20 Pineco XD                      return metLevel != 43;                  case 168: // Ariados     43 Colo // 14 Spinarak XD                      return metLevel != 43;                  case 229: // Houndoom    48 Colo // 17 Houndour XD                      return metLevel != 48;                  case 217: // Ursaring    45 Colo // 11 Teddiursa XD                      return metLevel != 45;                  case 212: // Scizor      50 Colo // 40 Scyther XD                      return metLevel != 50;                  case 196: // Espeon                      return metLevel != 25;                  case 197: // Umbreon                      return metLevel != 26;                        // Gifts                  case 213: // Shuckle                  case 239: case 240: // Elekid                  case 246: case 247: case 248: // Larvitar                  case 307: case 308: // Meditite                      return metLevel == 20;              }
Magic Number,PKHeX.Core,XK3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\XK3.cs,IsOriginXD,The following statement contains a magic number: switch (species)              {                  case 296: // Makuhita    30 Colo 18 XD                  case 297:                      return metLevel != 30;                  case 175: // Togepi      20 Colo 25 XD' also 20 as Togetic in Colo                  case 176:                      return metLevel != 20;                  case 179: // Mareep      37 Colo 17 XD                  case 180: // Flaafy      30 Colo                  case 181:                      return metLevel != 37 && metLevel != 30;                  case 219: // Magcargo    30 Colo 38 XD (Slugma in Colo)                      return metLevel != 30;                  case 195: // Quagsire    30 Colo // ** Wooper XD                      return metLevel != 30;                  case 334: // Altaria     33 Colo // 36 XD (Swablu in Colo)                      return metLevel != 33;                  case 167: // Ledian      40 Colo // 10 Ledyba XD                      return metLevel != 40;                  case 207: // Gligar      43 Colo // ** Gligar XD                      return metLevel != 43;                  case 221: // Piloswine   43 Colo // 22 Swinub XD                      return metLevel != 43;                  case 205: // Forretress  43 Colo // 20 Pineco XD                      return metLevel != 43;                  case 168: // Ariados     43 Colo // 14 Spinarak XD                      return metLevel != 43;                  case 229: // Houndoom    48 Colo // 17 Houndour XD                      return metLevel != 48;                  case 217: // Ursaring    45 Colo // 11 Teddiursa XD                      return metLevel != 45;                  case 212: // Scizor      50 Colo // 40 Scyther XD                      return metLevel != 50;                  case 196: // Espeon                      return metLevel != 25;                  case 197: // Umbreon                      return metLevel != 26;                        // Gifts                  case 213: // Shuckle                  case 239: case 240: // Elekid                  case 246: case 247: case 248: // Larvitar                  case 307: case 308: // Meditite                      return metLevel == 20;              }
Magic Number,PKHeX.Core,XK3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\XK3.cs,IsOriginXD,The following statement contains a magic number: switch (species)              {                  case 296: // Makuhita    30 Colo 18 XD                  case 297:                      return metLevel != 30;                  case 175: // Togepi      20 Colo 25 XD' also 20 as Togetic in Colo                  case 176:                      return metLevel != 20;                  case 179: // Mareep      37 Colo 17 XD                  case 180: // Flaafy      30 Colo                  case 181:                      return metLevel != 37 && metLevel != 30;                  case 219: // Magcargo    30 Colo 38 XD (Slugma in Colo)                      return metLevel != 30;                  case 195: // Quagsire    30 Colo // ** Wooper XD                      return metLevel != 30;                  case 334: // Altaria     33 Colo // 36 XD (Swablu in Colo)                      return metLevel != 33;                  case 167: // Ledian      40 Colo // 10 Ledyba XD                      return metLevel != 40;                  case 207: // Gligar      43 Colo // ** Gligar XD                      return metLevel != 43;                  case 221: // Piloswine   43 Colo // 22 Swinub XD                      return metLevel != 43;                  case 205: // Forretress  43 Colo // 20 Pineco XD                      return metLevel != 43;                  case 168: // Ariados     43 Colo // 14 Spinarak XD                      return metLevel != 43;                  case 229: // Houndoom    48 Colo // 17 Houndour XD                      return metLevel != 48;                  case 217: // Ursaring    45 Colo // 11 Teddiursa XD                      return metLevel != 45;                  case 212: // Scizor      50 Colo // 40 Scyther XD                      return metLevel != 50;                  case 196: // Espeon                      return metLevel != 25;                  case 197: // Umbreon                      return metLevel != 26;                        // Gifts                  case 213: // Shuckle                  case 239: case 240: // Elekid                  case 246: case 247: case 248: // Larvitar                  case 307: case 308: // Meditite                      return metLevel == 20;              }
Magic Number,PKHeX.Core,XK3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\XK3.cs,IsOriginXD,The following statement contains a magic number: switch (species)              {                  case 296: // Makuhita    30 Colo 18 XD                  case 297:                      return metLevel != 30;                  case 175: // Togepi      20 Colo 25 XD' also 20 as Togetic in Colo                  case 176:                      return metLevel != 20;                  case 179: // Mareep      37 Colo 17 XD                  case 180: // Flaafy      30 Colo                  case 181:                      return metLevel != 37 && metLevel != 30;                  case 219: // Magcargo    30 Colo 38 XD (Slugma in Colo)                      return metLevel != 30;                  case 195: // Quagsire    30 Colo // ** Wooper XD                      return metLevel != 30;                  case 334: // Altaria     33 Colo // 36 XD (Swablu in Colo)                      return metLevel != 33;                  case 167: // Ledian      40 Colo // 10 Ledyba XD                      return metLevel != 40;                  case 207: // Gligar      43 Colo // ** Gligar XD                      return metLevel != 43;                  case 221: // Piloswine   43 Colo // 22 Swinub XD                      return metLevel != 43;                  case 205: // Forretress  43 Colo // 20 Pineco XD                      return metLevel != 43;                  case 168: // Ariados     43 Colo // 14 Spinarak XD                      return metLevel != 43;                  case 229: // Houndoom    48 Colo // 17 Houndour XD                      return metLevel != 48;                  case 217: // Ursaring    45 Colo // 11 Teddiursa XD                      return metLevel != 45;                  case 212: // Scizor      50 Colo // 40 Scyther XD                      return metLevel != 50;                  case 196: // Espeon                      return metLevel != 25;                  case 197: // Umbreon                      return metLevel != 26;                        // Gifts                  case 213: // Shuckle                  case 239: case 240: // Elekid                  case 246: case 247: case 248: // Larvitar                  case 307: case 308: // Meditite                      return metLevel == 20;              }
Magic Number,PKHeX.Core,XK3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\XK3.cs,IsOriginXD,The following statement contains a magic number: switch (species)              {                  case 296: // Makuhita    30 Colo 18 XD                  case 297:                      return metLevel != 30;                  case 175: // Togepi      20 Colo 25 XD' also 20 as Togetic in Colo                  case 176:                      return metLevel != 20;                  case 179: // Mareep      37 Colo 17 XD                  case 180: // Flaafy      30 Colo                  case 181:                      return metLevel != 37 && metLevel != 30;                  case 219: // Magcargo    30 Colo 38 XD (Slugma in Colo)                      return metLevel != 30;                  case 195: // Quagsire    30 Colo // ** Wooper XD                      return metLevel != 30;                  case 334: // Altaria     33 Colo // 36 XD (Swablu in Colo)                      return metLevel != 33;                  case 167: // Ledian      40 Colo // 10 Ledyba XD                      return metLevel != 40;                  case 207: // Gligar      43 Colo // ** Gligar XD                      return metLevel != 43;                  case 221: // Piloswine   43 Colo // 22 Swinub XD                      return metLevel != 43;                  case 205: // Forretress  43 Colo // 20 Pineco XD                      return metLevel != 43;                  case 168: // Ariados     43 Colo // 14 Spinarak XD                      return metLevel != 43;                  case 229: // Houndoom    48 Colo // 17 Houndour XD                      return metLevel != 48;                  case 217: // Ursaring    45 Colo // 11 Teddiursa XD                      return metLevel != 45;                  case 212: // Scizor      50 Colo // 40 Scyther XD                      return metLevel != 50;                  case 196: // Espeon                      return metLevel != 25;                  case 197: // Umbreon                      return metLevel != 26;                        // Gifts                  case 213: // Shuckle                  case 239: case 240: // Elekid                  case 246: case 247: case 248: // Larvitar                  case 307: case 308: // Meditite                      return metLevel == 20;              }
Magic Number,PKHeX.Core,XK3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\XK3.cs,IsOriginXD,The following statement contains a magic number: switch (species)              {                  case 296: // Makuhita    30 Colo 18 XD                  case 297:                      return metLevel != 30;                  case 175: // Togepi      20 Colo 25 XD' also 20 as Togetic in Colo                  case 176:                      return metLevel != 20;                  case 179: // Mareep      37 Colo 17 XD                  case 180: // Flaafy      30 Colo                  case 181:                      return metLevel != 37 && metLevel != 30;                  case 219: // Magcargo    30 Colo 38 XD (Slugma in Colo)                      return metLevel != 30;                  case 195: // Quagsire    30 Colo // ** Wooper XD                      return metLevel != 30;                  case 334: // Altaria     33 Colo // 36 XD (Swablu in Colo)                      return metLevel != 33;                  case 167: // Ledian      40 Colo // 10 Ledyba XD                      return metLevel != 40;                  case 207: // Gligar      43 Colo // ** Gligar XD                      return metLevel != 43;                  case 221: // Piloswine   43 Colo // 22 Swinub XD                      return metLevel != 43;                  case 205: // Forretress  43 Colo // 20 Pineco XD                      return metLevel != 43;                  case 168: // Ariados     43 Colo // 14 Spinarak XD                      return metLevel != 43;                  case 229: // Houndoom    48 Colo // 17 Houndour XD                      return metLevel != 48;                  case 217: // Ursaring    45 Colo // 11 Teddiursa XD                      return metLevel != 45;                  case 212: // Scizor      50 Colo // 40 Scyther XD                      return metLevel != 50;                  case 196: // Espeon                      return metLevel != 25;                  case 197: // Umbreon                      return metLevel != 26;                        // Gifts                  case 213: // Shuckle                  case 239: case 240: // Elekid                  case 246: case 247: case 248: // Larvitar                  case 307: case 308: // Meditite                      return metLevel == 20;              }
Magic Number,PKHeX.Core,XK3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\XK3.cs,IsOriginXD,The following statement contains a magic number: switch (species)              {                  case 296: // Makuhita    30 Colo 18 XD                  case 297:                      return metLevel != 30;                  case 175: // Togepi      20 Colo 25 XD' also 20 as Togetic in Colo                  case 176:                      return metLevel != 20;                  case 179: // Mareep      37 Colo 17 XD                  case 180: // Flaafy      30 Colo                  case 181:                      return metLevel != 37 && metLevel != 30;                  case 219: // Magcargo    30 Colo 38 XD (Slugma in Colo)                      return metLevel != 30;                  case 195: // Quagsire    30 Colo // ** Wooper XD                      return metLevel != 30;                  case 334: // Altaria     33 Colo // 36 XD (Swablu in Colo)                      return metLevel != 33;                  case 167: // Ledian      40 Colo // 10 Ledyba XD                      return metLevel != 40;                  case 207: // Gligar      43 Colo // ** Gligar XD                      return metLevel != 43;                  case 221: // Piloswine   43 Colo // 22 Swinub XD                      return metLevel != 43;                  case 205: // Forretress  43 Colo // 20 Pineco XD                      return metLevel != 43;                  case 168: // Ariados     43 Colo // 14 Spinarak XD                      return metLevel != 43;                  case 229: // Houndoom    48 Colo // 17 Houndour XD                      return metLevel != 48;                  case 217: // Ursaring    45 Colo // 11 Teddiursa XD                      return metLevel != 45;                  case 212: // Scizor      50 Colo // 40 Scyther XD                      return metLevel != 50;                  case 196: // Espeon                      return metLevel != 25;                  case 197: // Umbreon                      return metLevel != 26;                        // Gifts                  case 213: // Shuckle                  case 239: case 240: // Elekid                  case 246: case 247: case 248: // Larvitar                  case 307: case 308: // Meditite                      return metLevel == 20;              }
Magic Number,PKHeX.Core,XK3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\XK3.cs,IsOriginXD,The following statement contains a magic number: switch (species)              {                  case 296: // Makuhita    30 Colo 18 XD                  case 297:                      return metLevel != 30;                  case 175: // Togepi      20 Colo 25 XD' also 20 as Togetic in Colo                  case 176:                      return metLevel != 20;                  case 179: // Mareep      37 Colo 17 XD                  case 180: // Flaafy      30 Colo                  case 181:                      return metLevel != 37 && metLevel != 30;                  case 219: // Magcargo    30 Colo 38 XD (Slugma in Colo)                      return metLevel != 30;                  case 195: // Quagsire    30 Colo // ** Wooper XD                      return metLevel != 30;                  case 334: // Altaria     33 Colo // 36 XD (Swablu in Colo)                      return metLevel != 33;                  case 167: // Ledian      40 Colo // 10 Ledyba XD                      return metLevel != 40;                  case 207: // Gligar      43 Colo // ** Gligar XD                      return metLevel != 43;                  case 221: // Piloswine   43 Colo // 22 Swinub XD                      return metLevel != 43;                  case 205: // Forretress  43 Colo // 20 Pineco XD                      return metLevel != 43;                  case 168: // Ariados     43 Colo // 14 Spinarak XD                      return metLevel != 43;                  case 229: // Houndoom    48 Colo // 17 Houndour XD                      return metLevel != 48;                  case 217: // Ursaring    45 Colo // 11 Teddiursa XD                      return metLevel != 45;                  case 212: // Scizor      50 Colo // 40 Scyther XD                      return metLevel != 50;                  case 196: // Espeon                      return metLevel != 25;                  case 197: // Umbreon                      return metLevel != 26;                        // Gifts                  case 213: // Shuckle                  case 239: case 240: // Elekid                  case 246: case 247: case 248: // Larvitar                  case 307: case 308: // Meditite                      return metLevel == 20;              }
Magic Number,PKHeX.Core,XK3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\XK3.cs,IsOriginXD,The following statement contains a magic number: switch (species)              {                  case 296: // Makuhita    30 Colo 18 XD                  case 297:                      return metLevel != 30;                  case 175: // Togepi      20 Colo 25 XD' also 20 as Togetic in Colo                  case 176:                      return metLevel != 20;                  case 179: // Mareep      37 Colo 17 XD                  case 180: // Flaafy      30 Colo                  case 181:                      return metLevel != 37 && metLevel != 30;                  case 219: // Magcargo    30 Colo 38 XD (Slugma in Colo)                      return metLevel != 30;                  case 195: // Quagsire    30 Colo // ** Wooper XD                      return metLevel != 30;                  case 334: // Altaria     33 Colo // 36 XD (Swablu in Colo)                      return metLevel != 33;                  case 167: // Ledian      40 Colo // 10 Ledyba XD                      return metLevel != 40;                  case 207: // Gligar      43 Colo // ** Gligar XD                      return metLevel != 43;                  case 221: // Piloswine   43 Colo // 22 Swinub XD                      return metLevel != 43;                  case 205: // Forretress  43 Colo // 20 Pineco XD                      return metLevel != 43;                  case 168: // Ariados     43 Colo // 14 Spinarak XD                      return metLevel != 43;                  case 229: // Houndoom    48 Colo // 17 Houndour XD                      return metLevel != 48;                  case 217: // Ursaring    45 Colo // 11 Teddiursa XD                      return metLevel != 45;                  case 212: // Scizor      50 Colo // 40 Scyther XD                      return metLevel != 50;                  case 196: // Espeon                      return metLevel != 25;                  case 197: // Umbreon                      return metLevel != 26;                        // Gifts                  case 213: // Shuckle                  case 239: case 240: // Elekid                  case 246: case 247: case 248: // Larvitar                  case 307: case 308: // Meditite                      return metLevel == 20;              }
Magic Number,PKHeX.Core,XK3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\XK3.cs,IsOriginXD,The following statement contains a magic number: switch (species)              {                  case 296: // Makuhita    30 Colo 18 XD                  case 297:                      return metLevel != 30;                  case 175: // Togepi      20 Colo 25 XD' also 20 as Togetic in Colo                  case 176:                      return metLevel != 20;                  case 179: // Mareep      37 Colo 17 XD                  case 180: // Flaafy      30 Colo                  case 181:                      return metLevel != 37 && metLevel != 30;                  case 219: // Magcargo    30 Colo 38 XD (Slugma in Colo)                      return metLevel != 30;                  case 195: // Quagsire    30 Colo // ** Wooper XD                      return metLevel != 30;                  case 334: // Altaria     33 Colo // 36 XD (Swablu in Colo)                      return metLevel != 33;                  case 167: // Ledian      40 Colo // 10 Ledyba XD                      return metLevel != 40;                  case 207: // Gligar      43 Colo // ** Gligar XD                      return metLevel != 43;                  case 221: // Piloswine   43 Colo // 22 Swinub XD                      return metLevel != 43;                  case 205: // Forretress  43 Colo // 20 Pineco XD                      return metLevel != 43;                  case 168: // Ariados     43 Colo // 14 Spinarak XD                      return metLevel != 43;                  case 229: // Houndoom    48 Colo // 17 Houndour XD                      return metLevel != 48;                  case 217: // Ursaring    45 Colo // 11 Teddiursa XD                      return metLevel != 45;                  case 212: // Scizor      50 Colo // 40 Scyther XD                      return metLevel != 50;                  case 196: // Espeon                      return metLevel != 25;                  case 197: // Umbreon                      return metLevel != 26;                        // Gifts                  case 213: // Shuckle                  case 239: case 240: // Elekid                  case 246: case 247: case 248: // Larvitar                  case 307: case 308: // Meditite                      return metLevel == 20;              }
Magic Number,PKHeX.Core,XK3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\XK3.cs,IsOriginXD,The following statement contains a magic number: switch (species)              {                  case 296: // Makuhita    30 Colo 18 XD                  case 297:                      return metLevel != 30;                  case 175: // Togepi      20 Colo 25 XD' also 20 as Togetic in Colo                  case 176:                      return metLevel != 20;                  case 179: // Mareep      37 Colo 17 XD                  case 180: // Flaafy      30 Colo                  case 181:                      return metLevel != 37 && metLevel != 30;                  case 219: // Magcargo    30 Colo 38 XD (Slugma in Colo)                      return metLevel != 30;                  case 195: // Quagsire    30 Colo // ** Wooper XD                      return metLevel != 30;                  case 334: // Altaria     33 Colo // 36 XD (Swablu in Colo)                      return metLevel != 33;                  case 167: // Ledian      40 Colo // 10 Ledyba XD                      return metLevel != 40;                  case 207: // Gligar      43 Colo // ** Gligar XD                      return metLevel != 43;                  case 221: // Piloswine   43 Colo // 22 Swinub XD                      return metLevel != 43;                  case 205: // Forretress  43 Colo // 20 Pineco XD                      return metLevel != 43;                  case 168: // Ariados     43 Colo // 14 Spinarak XD                      return metLevel != 43;                  case 229: // Houndoom    48 Colo // 17 Houndour XD                      return metLevel != 48;                  case 217: // Ursaring    45 Colo // 11 Teddiursa XD                      return metLevel != 45;                  case 212: // Scizor      50 Colo // 40 Scyther XD                      return metLevel != 50;                  case 196: // Espeon                      return metLevel != 25;                  case 197: // Umbreon                      return metLevel != 26;                        // Gifts                  case 213: // Shuckle                  case 239: case 240: // Elekid                  case 246: case 247: case 248: // Larvitar                  case 307: case 308: // Meditite                      return metLevel == 20;              }
Magic Number,PKHeX.Core,XK3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\XK3.cs,IsOriginXD,The following statement contains a magic number: switch (species)              {                  case 296: // Makuhita    30 Colo 18 XD                  case 297:                      return metLevel != 30;                  case 175: // Togepi      20 Colo 25 XD' also 20 as Togetic in Colo                  case 176:                      return metLevel != 20;                  case 179: // Mareep      37 Colo 17 XD                  case 180: // Flaafy      30 Colo                  case 181:                      return metLevel != 37 && metLevel != 30;                  case 219: // Magcargo    30 Colo 38 XD (Slugma in Colo)                      return metLevel != 30;                  case 195: // Quagsire    30 Colo // ** Wooper XD                      return metLevel != 30;                  case 334: // Altaria     33 Colo // 36 XD (Swablu in Colo)                      return metLevel != 33;                  case 167: // Ledian      40 Colo // 10 Ledyba XD                      return metLevel != 40;                  case 207: // Gligar      43 Colo // ** Gligar XD                      return metLevel != 43;                  case 221: // Piloswine   43 Colo // 22 Swinub XD                      return metLevel != 43;                  case 205: // Forretress  43 Colo // 20 Pineco XD                      return metLevel != 43;                  case 168: // Ariados     43 Colo // 14 Spinarak XD                      return metLevel != 43;                  case 229: // Houndoom    48 Colo // 17 Houndour XD                      return metLevel != 48;                  case 217: // Ursaring    45 Colo // 11 Teddiursa XD                      return metLevel != 45;                  case 212: // Scizor      50 Colo // 40 Scyther XD                      return metLevel != 50;                  case 196: // Espeon                      return metLevel != 25;                  case 197: // Umbreon                      return metLevel != 26;                        // Gifts                  case 213: // Shuckle                  case 239: case 240: // Elekid                  case 246: case 247: case 248: // Larvitar                  case 307: case 308: // Meditite                      return metLevel == 20;              }
Magic Number,PKHeX.Core,XK3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\XK3.cs,IsOriginXD,The following statement contains a magic number: switch (species)              {                  case 296: // Makuhita    30 Colo 18 XD                  case 297:                      return metLevel != 30;                  case 175: // Togepi      20 Colo 25 XD' also 20 as Togetic in Colo                  case 176:                      return metLevel != 20;                  case 179: // Mareep      37 Colo 17 XD                  case 180: // Flaafy      30 Colo                  case 181:                      return metLevel != 37 && metLevel != 30;                  case 219: // Magcargo    30 Colo 38 XD (Slugma in Colo)                      return metLevel != 30;                  case 195: // Quagsire    30 Colo // ** Wooper XD                      return metLevel != 30;                  case 334: // Altaria     33 Colo // 36 XD (Swablu in Colo)                      return metLevel != 33;                  case 167: // Ledian      40 Colo // 10 Ledyba XD                      return metLevel != 40;                  case 207: // Gligar      43 Colo // ** Gligar XD                      return metLevel != 43;                  case 221: // Piloswine   43 Colo // 22 Swinub XD                      return metLevel != 43;                  case 205: // Forretress  43 Colo // 20 Pineco XD                      return metLevel != 43;                  case 168: // Ariados     43 Colo // 14 Spinarak XD                      return metLevel != 43;                  case 229: // Houndoom    48 Colo // 17 Houndour XD                      return metLevel != 48;                  case 217: // Ursaring    45 Colo // 11 Teddiursa XD                      return metLevel != 45;                  case 212: // Scizor      50 Colo // 40 Scyther XD                      return metLevel != 50;                  case 196: // Espeon                      return metLevel != 25;                  case 197: // Umbreon                      return metLevel != 26;                        // Gifts                  case 213: // Shuckle                  case 239: case 240: // Elekid                  case 246: case 247: case 248: // Larvitar                  case 307: case 308: // Meditite                      return metLevel == 20;              }
Magic Number,PKHeX.Core,XK3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\XK3.cs,IsOriginXD,The following statement contains a magic number: switch (species)              {                  case 296: // Makuhita    30 Colo 18 XD                  case 297:                      return metLevel != 30;                  case 175: // Togepi      20 Colo 25 XD' also 20 as Togetic in Colo                  case 176:                      return metLevel != 20;                  case 179: // Mareep      37 Colo 17 XD                  case 180: // Flaafy      30 Colo                  case 181:                      return metLevel != 37 && metLevel != 30;                  case 219: // Magcargo    30 Colo 38 XD (Slugma in Colo)                      return metLevel != 30;                  case 195: // Quagsire    30 Colo // ** Wooper XD                      return metLevel != 30;                  case 334: // Altaria     33 Colo // 36 XD (Swablu in Colo)                      return metLevel != 33;                  case 167: // Ledian      40 Colo // 10 Ledyba XD                      return metLevel != 40;                  case 207: // Gligar      43 Colo // ** Gligar XD                      return metLevel != 43;                  case 221: // Piloswine   43 Colo // 22 Swinub XD                      return metLevel != 43;                  case 205: // Forretress  43 Colo // 20 Pineco XD                      return metLevel != 43;                  case 168: // Ariados     43 Colo // 14 Spinarak XD                      return metLevel != 43;                  case 229: // Houndoom    48 Colo // 17 Houndour XD                      return metLevel != 48;                  case 217: // Ursaring    45 Colo // 11 Teddiursa XD                      return metLevel != 45;                  case 212: // Scizor      50 Colo // 40 Scyther XD                      return metLevel != 50;                  case 196: // Espeon                      return metLevel != 25;                  case 197: // Umbreon                      return metLevel != 26;                        // Gifts                  case 213: // Shuckle                  case 239: case 240: // Elekid                  case 246: case 247: case 248: // Larvitar                  case 307: case 308: // Meditite                      return metLevel == 20;              }
Magic Number,PKHeX.Core,XK3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\XK3.cs,IsOriginXD,The following statement contains a magic number: switch (species)              {                  case 296: // Makuhita    30 Colo 18 XD                  case 297:                      return metLevel != 30;                  case 175: // Togepi      20 Colo 25 XD' also 20 as Togetic in Colo                  case 176:                      return metLevel != 20;                  case 179: // Mareep      37 Colo 17 XD                  case 180: // Flaafy      30 Colo                  case 181:                      return metLevel != 37 && metLevel != 30;                  case 219: // Magcargo    30 Colo 38 XD (Slugma in Colo)                      return metLevel != 30;                  case 195: // Quagsire    30 Colo // ** Wooper XD                      return metLevel != 30;                  case 334: // Altaria     33 Colo // 36 XD (Swablu in Colo)                      return metLevel != 33;                  case 167: // Ledian      40 Colo // 10 Ledyba XD                      return metLevel != 40;                  case 207: // Gligar      43 Colo // ** Gligar XD                      return metLevel != 43;                  case 221: // Piloswine   43 Colo // 22 Swinub XD                      return metLevel != 43;                  case 205: // Forretress  43 Colo // 20 Pineco XD                      return metLevel != 43;                  case 168: // Ariados     43 Colo // 14 Spinarak XD                      return metLevel != 43;                  case 229: // Houndoom    48 Colo // 17 Houndour XD                      return metLevel != 48;                  case 217: // Ursaring    45 Colo // 11 Teddiursa XD                      return metLevel != 45;                  case 212: // Scizor      50 Colo // 40 Scyther XD                      return metLevel != 50;                  case 196: // Espeon                      return metLevel != 25;                  case 197: // Umbreon                      return metLevel != 26;                        // Gifts                  case 213: // Shuckle                  case 239: case 240: // Elekid                  case 246: case 247: case 248: // Larvitar                  case 307: case 308: // Meditite                      return metLevel == 20;              }
Magic Number,PKHeX.Core,XK3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\XK3.cs,IsOriginXD,The following statement contains a magic number: switch (species)              {                  case 296: // Makuhita    30 Colo 18 XD                  case 297:                      return metLevel != 30;                  case 175: // Togepi      20 Colo 25 XD' also 20 as Togetic in Colo                  case 176:                      return metLevel != 20;                  case 179: // Mareep      37 Colo 17 XD                  case 180: // Flaafy      30 Colo                  case 181:                      return metLevel != 37 && metLevel != 30;                  case 219: // Magcargo    30 Colo 38 XD (Slugma in Colo)                      return metLevel != 30;                  case 195: // Quagsire    30 Colo // ** Wooper XD                      return metLevel != 30;                  case 334: // Altaria     33 Colo // 36 XD (Swablu in Colo)                      return metLevel != 33;                  case 167: // Ledian      40 Colo // 10 Ledyba XD                      return metLevel != 40;                  case 207: // Gligar      43 Colo // ** Gligar XD                      return metLevel != 43;                  case 221: // Piloswine   43 Colo // 22 Swinub XD                      return metLevel != 43;                  case 205: // Forretress  43 Colo // 20 Pineco XD                      return metLevel != 43;                  case 168: // Ariados     43 Colo // 14 Spinarak XD                      return metLevel != 43;                  case 229: // Houndoom    48 Colo // 17 Houndour XD                      return metLevel != 48;                  case 217: // Ursaring    45 Colo // 11 Teddiursa XD                      return metLevel != 45;                  case 212: // Scizor      50 Colo // 40 Scyther XD                      return metLevel != 50;                  case 196: // Espeon                      return metLevel != 25;                  case 197: // Umbreon                      return metLevel != 26;                        // Gifts                  case 213: // Shuckle                  case 239: case 240: // Elekid                  case 246: case 247: case 248: // Larvitar                  case 307: case 308: // Meditite                      return metLevel == 20;              }
Magic Number,PKHeX.Core,XK3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\XK3.cs,IsOriginXD,The following statement contains a magic number: switch (species)              {                  case 296: // Makuhita    30 Colo 18 XD                  case 297:                      return metLevel != 30;                  case 175: // Togepi      20 Colo 25 XD' also 20 as Togetic in Colo                  case 176:                      return metLevel != 20;                  case 179: // Mareep      37 Colo 17 XD                  case 180: // Flaafy      30 Colo                  case 181:                      return metLevel != 37 && metLevel != 30;                  case 219: // Magcargo    30 Colo 38 XD (Slugma in Colo)                      return metLevel != 30;                  case 195: // Quagsire    30 Colo // ** Wooper XD                      return metLevel != 30;                  case 334: // Altaria     33 Colo // 36 XD (Swablu in Colo)                      return metLevel != 33;                  case 167: // Ledian      40 Colo // 10 Ledyba XD                      return metLevel != 40;                  case 207: // Gligar      43 Colo // ** Gligar XD                      return metLevel != 43;                  case 221: // Piloswine   43 Colo // 22 Swinub XD                      return metLevel != 43;                  case 205: // Forretress  43 Colo // 20 Pineco XD                      return metLevel != 43;                  case 168: // Ariados     43 Colo // 14 Spinarak XD                      return metLevel != 43;                  case 229: // Houndoom    48 Colo // 17 Houndour XD                      return metLevel != 48;                  case 217: // Ursaring    45 Colo // 11 Teddiursa XD                      return metLevel != 45;                  case 212: // Scizor      50 Colo // 40 Scyther XD                      return metLevel != 50;                  case 196: // Espeon                      return metLevel != 25;                  case 197: // Umbreon                      return metLevel != 26;                        // Gifts                  case 213: // Shuckle                  case 239: case 240: // Elekid                  case 246: case 247: case 248: // Larvitar                  case 307: case 308: // Meditite                      return metLevel == 20;              }
Magic Number,PKHeX.Core,XK3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\XK3.cs,IsOriginXD,The following statement contains a magic number: switch (species)              {                  case 296: // Makuhita    30 Colo 18 XD                  case 297:                      return metLevel != 30;                  case 175: // Togepi      20 Colo 25 XD' also 20 as Togetic in Colo                  case 176:                      return metLevel != 20;                  case 179: // Mareep      37 Colo 17 XD                  case 180: // Flaafy      30 Colo                  case 181:                      return metLevel != 37 && metLevel != 30;                  case 219: // Magcargo    30 Colo 38 XD (Slugma in Colo)                      return metLevel != 30;                  case 195: // Quagsire    30 Colo // ** Wooper XD                      return metLevel != 30;                  case 334: // Altaria     33 Colo // 36 XD (Swablu in Colo)                      return metLevel != 33;                  case 167: // Ledian      40 Colo // 10 Ledyba XD                      return metLevel != 40;                  case 207: // Gligar      43 Colo // ** Gligar XD                      return metLevel != 43;                  case 221: // Piloswine   43 Colo // 22 Swinub XD                      return metLevel != 43;                  case 205: // Forretress  43 Colo // 20 Pineco XD                      return metLevel != 43;                  case 168: // Ariados     43 Colo // 14 Spinarak XD                      return metLevel != 43;                  case 229: // Houndoom    48 Colo // 17 Houndour XD                      return metLevel != 48;                  case 217: // Ursaring    45 Colo // 11 Teddiursa XD                      return metLevel != 45;                  case 212: // Scizor      50 Colo // 40 Scyther XD                      return metLevel != 50;                  case 196: // Espeon                      return metLevel != 25;                  case 197: // Umbreon                      return metLevel != 26;                        // Gifts                  case 213: // Shuckle                  case 239: case 240: // Elekid                  case 246: case 247: case 248: // Larvitar                  case 307: case 308: // Meditite                      return metLevel == 20;              }
Magic Number,PKHeX.Core,XK3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\XK3.cs,IsOriginXD,The following statement contains a magic number: switch (species)              {                  case 296: // Makuhita    30 Colo 18 XD                  case 297:                      return metLevel != 30;                  case 175: // Togepi      20 Colo 25 XD' also 20 as Togetic in Colo                  case 176:                      return metLevel != 20;                  case 179: // Mareep      37 Colo 17 XD                  case 180: // Flaafy      30 Colo                  case 181:                      return metLevel != 37 && metLevel != 30;                  case 219: // Magcargo    30 Colo 38 XD (Slugma in Colo)                      return metLevel != 30;                  case 195: // Quagsire    30 Colo // ** Wooper XD                      return metLevel != 30;                  case 334: // Altaria     33 Colo // 36 XD (Swablu in Colo)                      return metLevel != 33;                  case 167: // Ledian      40 Colo // 10 Ledyba XD                      return metLevel != 40;                  case 207: // Gligar      43 Colo // ** Gligar XD                      return metLevel != 43;                  case 221: // Piloswine   43 Colo // 22 Swinub XD                      return metLevel != 43;                  case 205: // Forretress  43 Colo // 20 Pineco XD                      return metLevel != 43;                  case 168: // Ariados     43 Colo // 14 Spinarak XD                      return metLevel != 43;                  case 229: // Houndoom    48 Colo // 17 Houndour XD                      return metLevel != 48;                  case 217: // Ursaring    45 Colo // 11 Teddiursa XD                      return metLevel != 45;                  case 212: // Scizor      50 Colo // 40 Scyther XD                      return metLevel != 50;                  case 196: // Espeon                      return metLevel != 25;                  case 197: // Umbreon                      return metLevel != 26;                        // Gifts                  case 213: // Shuckle                  case 239: case 240: // Elekid                  case 246: case 247: case 248: // Larvitar                  case 307: case 308: // Meditite                      return metLevel == 20;              }
Magic Number,PKHeX.Core,XK3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\XK3.cs,IsOriginXD,The following statement contains a magic number: switch (species)              {                  case 296: // Makuhita    30 Colo 18 XD                  case 297:                      return metLevel != 30;                  case 175: // Togepi      20 Colo 25 XD' also 20 as Togetic in Colo                  case 176:                      return metLevel != 20;                  case 179: // Mareep      37 Colo 17 XD                  case 180: // Flaafy      30 Colo                  case 181:                      return metLevel != 37 && metLevel != 30;                  case 219: // Magcargo    30 Colo 38 XD (Slugma in Colo)                      return metLevel != 30;                  case 195: // Quagsire    30 Colo // ** Wooper XD                      return metLevel != 30;                  case 334: // Altaria     33 Colo // 36 XD (Swablu in Colo)                      return metLevel != 33;                  case 167: // Ledian      40 Colo // 10 Ledyba XD                      return metLevel != 40;                  case 207: // Gligar      43 Colo // ** Gligar XD                      return metLevel != 43;                  case 221: // Piloswine   43 Colo // 22 Swinub XD                      return metLevel != 43;                  case 205: // Forretress  43 Colo // 20 Pineco XD                      return metLevel != 43;                  case 168: // Ariados     43 Colo // 14 Spinarak XD                      return metLevel != 43;                  case 229: // Houndoom    48 Colo // 17 Houndour XD                      return metLevel != 48;                  case 217: // Ursaring    45 Colo // 11 Teddiursa XD                      return metLevel != 45;                  case 212: // Scizor      50 Colo // 40 Scyther XD                      return metLevel != 50;                  case 196: // Espeon                      return metLevel != 25;                  case 197: // Umbreon                      return metLevel != 26;                        // Gifts                  case 213: // Shuckle                  case 239: case 240: // Elekid                  case 246: case 247: case 248: // Larvitar                  case 307: case 308: // Meditite                      return metLevel == 20;              }
Magic Number,PKHeX.Core,XK3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\XK3.cs,IsOriginXD,The following statement contains a magic number: switch (species)              {                  case 296: // Makuhita    30 Colo 18 XD                  case 297:                      return metLevel != 30;                  case 175: // Togepi      20 Colo 25 XD' also 20 as Togetic in Colo                  case 176:                      return metLevel != 20;                  case 179: // Mareep      37 Colo 17 XD                  case 180: // Flaafy      30 Colo                  case 181:                      return metLevel != 37 && metLevel != 30;                  case 219: // Magcargo    30 Colo 38 XD (Slugma in Colo)                      return metLevel != 30;                  case 195: // Quagsire    30 Colo // ** Wooper XD                      return metLevel != 30;                  case 334: // Altaria     33 Colo // 36 XD (Swablu in Colo)                      return metLevel != 33;                  case 167: // Ledian      40 Colo // 10 Ledyba XD                      return metLevel != 40;                  case 207: // Gligar      43 Colo // ** Gligar XD                      return metLevel != 43;                  case 221: // Piloswine   43 Colo // 22 Swinub XD                      return metLevel != 43;                  case 205: // Forretress  43 Colo // 20 Pineco XD                      return metLevel != 43;                  case 168: // Ariados     43 Colo // 14 Spinarak XD                      return metLevel != 43;                  case 229: // Houndoom    48 Colo // 17 Houndour XD                      return metLevel != 48;                  case 217: // Ursaring    45 Colo // 11 Teddiursa XD                      return metLevel != 45;                  case 212: // Scizor      50 Colo // 40 Scyther XD                      return metLevel != 50;                  case 196: // Espeon                      return metLevel != 25;                  case 197: // Umbreon                      return metLevel != 26;                        // Gifts                  case 213: // Shuckle                  case 239: case 240: // Elekid                  case 246: case 247: case 248: // Larvitar                  case 307: case 308: // Meditite                      return metLevel == 20;              }
Magic Number,PKHeX.Core,XK3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\XK3.cs,IsOriginXD,The following statement contains a magic number: switch (species)              {                  case 296: // Makuhita    30 Colo 18 XD                  case 297:                      return metLevel != 30;                  case 175: // Togepi      20 Colo 25 XD' also 20 as Togetic in Colo                  case 176:                      return metLevel != 20;                  case 179: // Mareep      37 Colo 17 XD                  case 180: // Flaafy      30 Colo                  case 181:                      return metLevel != 37 && metLevel != 30;                  case 219: // Magcargo    30 Colo 38 XD (Slugma in Colo)                      return metLevel != 30;                  case 195: // Quagsire    30 Colo // ** Wooper XD                      return metLevel != 30;                  case 334: // Altaria     33 Colo // 36 XD (Swablu in Colo)                      return metLevel != 33;                  case 167: // Ledian      40 Colo // 10 Ledyba XD                      return metLevel != 40;                  case 207: // Gligar      43 Colo // ** Gligar XD                      return metLevel != 43;                  case 221: // Piloswine   43 Colo // 22 Swinub XD                      return metLevel != 43;                  case 205: // Forretress  43 Colo // 20 Pineco XD                      return metLevel != 43;                  case 168: // Ariados     43 Colo // 14 Spinarak XD                      return metLevel != 43;                  case 229: // Houndoom    48 Colo // 17 Houndour XD                      return metLevel != 48;                  case 217: // Ursaring    45 Colo // 11 Teddiursa XD                      return metLevel != 45;                  case 212: // Scizor      50 Colo // 40 Scyther XD                      return metLevel != 50;                  case 196: // Espeon                      return metLevel != 25;                  case 197: // Umbreon                      return metLevel != 26;                        // Gifts                  case 213: // Shuckle                  case 239: case 240: // Elekid                  case 246: case 247: case 248: // Larvitar                  case 307: case 308: // Meditite                      return metLevel == 20;              }
Magic Number,PKHeX.Core,XK3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\XK3.cs,IsOriginXD,The following statement contains a magic number: switch (species)              {                  case 296: // Makuhita    30 Colo 18 XD                  case 297:                      return metLevel != 30;                  case 175: // Togepi      20 Colo 25 XD' also 20 as Togetic in Colo                  case 176:                      return metLevel != 20;                  case 179: // Mareep      37 Colo 17 XD                  case 180: // Flaafy      30 Colo                  case 181:                      return metLevel != 37 && metLevel != 30;                  case 219: // Magcargo    30 Colo 38 XD (Slugma in Colo)                      return metLevel != 30;                  case 195: // Quagsire    30 Colo // ** Wooper XD                      return metLevel != 30;                  case 334: // Altaria     33 Colo // 36 XD (Swablu in Colo)                      return metLevel != 33;                  case 167: // Ledian      40 Colo // 10 Ledyba XD                      return metLevel != 40;                  case 207: // Gligar      43 Colo // ** Gligar XD                      return metLevel != 43;                  case 221: // Piloswine   43 Colo // 22 Swinub XD                      return metLevel != 43;                  case 205: // Forretress  43 Colo // 20 Pineco XD                      return metLevel != 43;                  case 168: // Ariados     43 Colo // 14 Spinarak XD                      return metLevel != 43;                  case 229: // Houndoom    48 Colo // 17 Houndour XD                      return metLevel != 48;                  case 217: // Ursaring    45 Colo // 11 Teddiursa XD                      return metLevel != 45;                  case 212: // Scizor      50 Colo // 40 Scyther XD                      return metLevel != 50;                  case 196: // Espeon                      return metLevel != 25;                  case 197: // Umbreon                      return metLevel != 26;                        // Gifts                  case 213: // Shuckle                  case 239: case 240: // Elekid                  case 246: case 247: case 248: // Larvitar                  case 307: case 308: // Meditite                      return metLevel == 20;              }
Magic Number,PKHeX.Core,XK3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\XK3.cs,IsOriginXD,The following statement contains a magic number: switch (species)              {                  case 296: // Makuhita    30 Colo 18 XD                  case 297:                      return metLevel != 30;                  case 175: // Togepi      20 Colo 25 XD' also 20 as Togetic in Colo                  case 176:                      return metLevel != 20;                  case 179: // Mareep      37 Colo 17 XD                  case 180: // Flaafy      30 Colo                  case 181:                      return metLevel != 37 && metLevel != 30;                  case 219: // Magcargo    30 Colo 38 XD (Slugma in Colo)                      return metLevel != 30;                  case 195: // Quagsire    30 Colo // ** Wooper XD                      return metLevel != 30;                  case 334: // Altaria     33 Colo // 36 XD (Swablu in Colo)                      return metLevel != 33;                  case 167: // Ledian      40 Colo // 10 Ledyba XD                      return metLevel != 40;                  case 207: // Gligar      43 Colo // ** Gligar XD                      return metLevel != 43;                  case 221: // Piloswine   43 Colo // 22 Swinub XD                      return metLevel != 43;                  case 205: // Forretress  43 Colo // 20 Pineco XD                      return metLevel != 43;                  case 168: // Ariados     43 Colo // 14 Spinarak XD                      return metLevel != 43;                  case 229: // Houndoom    48 Colo // 17 Houndour XD                      return metLevel != 48;                  case 217: // Ursaring    45 Colo // 11 Teddiursa XD                      return metLevel != 45;                  case 212: // Scizor      50 Colo // 40 Scyther XD                      return metLevel != 50;                  case 196: // Espeon                      return metLevel != 25;                  case 197: // Umbreon                      return metLevel != 26;                        // Gifts                  case 213: // Shuckle                  case 239: case 240: // Elekid                  case 246: case 247: case 248: // Larvitar                  case 307: case 308: // Meditite                      return metLevel == 20;              }
Magic Number,PKHeX.Core,XK3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\XK3.cs,IsOriginXD,The following statement contains a magic number: switch (species)              {                  case 296: // Makuhita    30 Colo 18 XD                  case 297:                      return metLevel != 30;                  case 175: // Togepi      20 Colo 25 XD' also 20 as Togetic in Colo                  case 176:                      return metLevel != 20;                  case 179: // Mareep      37 Colo 17 XD                  case 180: // Flaafy      30 Colo                  case 181:                      return metLevel != 37 && metLevel != 30;                  case 219: // Magcargo    30 Colo 38 XD (Slugma in Colo)                      return metLevel != 30;                  case 195: // Quagsire    30 Colo // ** Wooper XD                      return metLevel != 30;                  case 334: // Altaria     33 Colo // 36 XD (Swablu in Colo)                      return metLevel != 33;                  case 167: // Ledian      40 Colo // 10 Ledyba XD                      return metLevel != 40;                  case 207: // Gligar      43 Colo // ** Gligar XD                      return metLevel != 43;                  case 221: // Piloswine   43 Colo // 22 Swinub XD                      return metLevel != 43;                  case 205: // Forretress  43 Colo // 20 Pineco XD                      return metLevel != 43;                  case 168: // Ariados     43 Colo // 14 Spinarak XD                      return metLevel != 43;                  case 229: // Houndoom    48 Colo // 17 Houndour XD                      return metLevel != 48;                  case 217: // Ursaring    45 Colo // 11 Teddiursa XD                      return metLevel != 45;                  case 212: // Scizor      50 Colo // 40 Scyther XD                      return metLevel != 50;                  case 196: // Espeon                      return metLevel != 25;                  case 197: // Umbreon                      return metLevel != 26;                        // Gifts                  case 213: // Shuckle                  case 239: case 240: // Elekid                  case 246: case 247: case 248: // Larvitar                  case 307: case 308: // Meditite                      return metLevel == 20;              }
Magic Number,PKHeX.Core,XK3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\XK3.cs,IsOriginXD,The following statement contains a magic number: switch (species)              {                  case 296: // Makuhita    30 Colo 18 XD                  case 297:                      return metLevel != 30;                  case 175: // Togepi      20 Colo 25 XD' also 20 as Togetic in Colo                  case 176:                      return metLevel != 20;                  case 179: // Mareep      37 Colo 17 XD                  case 180: // Flaafy      30 Colo                  case 181:                      return metLevel != 37 && metLevel != 30;                  case 219: // Magcargo    30 Colo 38 XD (Slugma in Colo)                      return metLevel != 30;                  case 195: // Quagsire    30 Colo // ** Wooper XD                      return metLevel != 30;                  case 334: // Altaria     33 Colo // 36 XD (Swablu in Colo)                      return metLevel != 33;                  case 167: // Ledian      40 Colo // 10 Ledyba XD                      return metLevel != 40;                  case 207: // Gligar      43 Colo // ** Gligar XD                      return metLevel != 43;                  case 221: // Piloswine   43 Colo // 22 Swinub XD                      return metLevel != 43;                  case 205: // Forretress  43 Colo // 20 Pineco XD                      return metLevel != 43;                  case 168: // Ariados     43 Colo // 14 Spinarak XD                      return metLevel != 43;                  case 229: // Houndoom    48 Colo // 17 Houndour XD                      return metLevel != 48;                  case 217: // Ursaring    45 Colo // 11 Teddiursa XD                      return metLevel != 45;                  case 212: // Scizor      50 Colo // 40 Scyther XD                      return metLevel != 50;                  case 196: // Espeon                      return metLevel != 25;                  case 197: // Umbreon                      return metLevel != 26;                        // Gifts                  case 213: // Shuckle                  case 239: case 240: // Elekid                  case 246: case 247: case 248: // Larvitar                  case 307: case 308: // Meditite                      return metLevel == 20;              }
Magic Number,PKHeX.Core,XK3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\XK3.cs,IsOriginXD,The following statement contains a magic number: switch (species)              {                  case 296: // Makuhita    30 Colo 18 XD                  case 297:                      return metLevel != 30;                  case 175: // Togepi      20 Colo 25 XD' also 20 as Togetic in Colo                  case 176:                      return metLevel != 20;                  case 179: // Mareep      37 Colo 17 XD                  case 180: // Flaafy      30 Colo                  case 181:                      return metLevel != 37 && metLevel != 30;                  case 219: // Magcargo    30 Colo 38 XD (Slugma in Colo)                      return metLevel != 30;                  case 195: // Quagsire    30 Colo // ** Wooper XD                      return metLevel != 30;                  case 334: // Altaria     33 Colo // 36 XD (Swablu in Colo)                      return metLevel != 33;                  case 167: // Ledian      40 Colo // 10 Ledyba XD                      return metLevel != 40;                  case 207: // Gligar      43 Colo // ** Gligar XD                      return metLevel != 43;                  case 221: // Piloswine   43 Colo // 22 Swinub XD                      return metLevel != 43;                  case 205: // Forretress  43 Colo // 20 Pineco XD                      return metLevel != 43;                  case 168: // Ariados     43 Colo // 14 Spinarak XD                      return metLevel != 43;                  case 229: // Houndoom    48 Colo // 17 Houndour XD                      return metLevel != 48;                  case 217: // Ursaring    45 Colo // 11 Teddiursa XD                      return metLevel != 45;                  case 212: // Scizor      50 Colo // 40 Scyther XD                      return metLevel != 50;                  case 196: // Espeon                      return metLevel != 25;                  case 197: // Umbreon                      return metLevel != 26;                        // Gifts                  case 213: // Shuckle                  case 239: case 240: // Elekid                  case 246: case 247: case 248: // Larvitar                  case 307: case 308: // Meditite                      return metLevel == 20;              }
Magic Number,PKHeX.Core,XK3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\XK3.cs,IsOriginXD,The following statement contains a magic number: switch (species)              {                  case 296: // Makuhita    30 Colo 18 XD                  case 297:                      return metLevel != 30;                  case 175: // Togepi      20 Colo 25 XD' also 20 as Togetic in Colo                  case 176:                      return metLevel != 20;                  case 179: // Mareep      37 Colo 17 XD                  case 180: // Flaafy      30 Colo                  case 181:                      return metLevel != 37 && metLevel != 30;                  case 219: // Magcargo    30 Colo 38 XD (Slugma in Colo)                      return metLevel != 30;                  case 195: // Quagsire    30 Colo // ** Wooper XD                      return metLevel != 30;                  case 334: // Altaria     33 Colo // 36 XD (Swablu in Colo)                      return metLevel != 33;                  case 167: // Ledian      40 Colo // 10 Ledyba XD                      return metLevel != 40;                  case 207: // Gligar      43 Colo // ** Gligar XD                      return metLevel != 43;                  case 221: // Piloswine   43 Colo // 22 Swinub XD                      return metLevel != 43;                  case 205: // Forretress  43 Colo // 20 Pineco XD                      return metLevel != 43;                  case 168: // Ariados     43 Colo // 14 Spinarak XD                      return metLevel != 43;                  case 229: // Houndoom    48 Colo // 17 Houndour XD                      return metLevel != 48;                  case 217: // Ursaring    45 Colo // 11 Teddiursa XD                      return metLevel != 45;                  case 212: // Scizor      50 Colo // 40 Scyther XD                      return metLevel != 50;                  case 196: // Espeon                      return metLevel != 25;                  case 197: // Umbreon                      return metLevel != 26;                        // Gifts                  case 213: // Shuckle                  case 239: case 240: // Elekid                  case 246: case 247: case 248: // Larvitar                  case 307: case 308: // Meditite                      return metLevel == 20;              }
Magic Number,PKHeX.Core,XK3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\XK3.cs,IsOriginXD,The following statement contains a magic number: switch (species)              {                  case 296: // Makuhita    30 Colo 18 XD                  case 297:                      return metLevel != 30;                  case 175: // Togepi      20 Colo 25 XD' also 20 as Togetic in Colo                  case 176:                      return metLevel != 20;                  case 179: // Mareep      37 Colo 17 XD                  case 180: // Flaafy      30 Colo                  case 181:                      return metLevel != 37 && metLevel != 30;                  case 219: // Magcargo    30 Colo 38 XD (Slugma in Colo)                      return metLevel != 30;                  case 195: // Quagsire    30 Colo // ** Wooper XD                      return metLevel != 30;                  case 334: // Altaria     33 Colo // 36 XD (Swablu in Colo)                      return metLevel != 33;                  case 167: // Ledian      40 Colo // 10 Ledyba XD                      return metLevel != 40;                  case 207: // Gligar      43 Colo // ** Gligar XD                      return metLevel != 43;                  case 221: // Piloswine   43 Colo // 22 Swinub XD                      return metLevel != 43;                  case 205: // Forretress  43 Colo // 20 Pineco XD                      return metLevel != 43;                  case 168: // Ariados     43 Colo // 14 Spinarak XD                      return metLevel != 43;                  case 229: // Houndoom    48 Colo // 17 Houndour XD                      return metLevel != 48;                  case 217: // Ursaring    45 Colo // 11 Teddiursa XD                      return metLevel != 45;                  case 212: // Scizor      50 Colo // 40 Scyther XD                      return metLevel != 50;                  case 196: // Espeon                      return metLevel != 25;                  case 197: // Umbreon                      return metLevel != 26;                        // Gifts                  case 213: // Shuckle                  case 239: case 240: // Elekid                  case 246: case 247: case 248: // Larvitar                  case 307: case 308: // Meditite                      return metLevel == 20;              }
Magic Number,PKHeX.Core,XK3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\XK3.cs,IsOriginXD,The following statement contains a magic number: switch (species)              {                  case 296: // Makuhita    30 Colo 18 XD                  case 297:                      return metLevel != 30;                  case 175: // Togepi      20 Colo 25 XD' also 20 as Togetic in Colo                  case 176:                      return metLevel != 20;                  case 179: // Mareep      37 Colo 17 XD                  case 180: // Flaafy      30 Colo                  case 181:                      return metLevel != 37 && metLevel != 30;                  case 219: // Magcargo    30 Colo 38 XD (Slugma in Colo)                      return metLevel != 30;                  case 195: // Quagsire    30 Colo // ** Wooper XD                      return metLevel != 30;                  case 334: // Altaria     33 Colo // 36 XD (Swablu in Colo)                      return metLevel != 33;                  case 167: // Ledian      40 Colo // 10 Ledyba XD                      return metLevel != 40;                  case 207: // Gligar      43 Colo // ** Gligar XD                      return metLevel != 43;                  case 221: // Piloswine   43 Colo // 22 Swinub XD                      return metLevel != 43;                  case 205: // Forretress  43 Colo // 20 Pineco XD                      return metLevel != 43;                  case 168: // Ariados     43 Colo // 14 Spinarak XD                      return metLevel != 43;                  case 229: // Houndoom    48 Colo // 17 Houndour XD                      return metLevel != 48;                  case 217: // Ursaring    45 Colo // 11 Teddiursa XD                      return metLevel != 45;                  case 212: // Scizor      50 Colo // 40 Scyther XD                      return metLevel != 50;                  case 196: // Espeon                      return metLevel != 25;                  case 197: // Umbreon                      return metLevel != 26;                        // Gifts                  case 213: // Shuckle                  case 239: case 240: // Elekid                  case 246: case 247: case 248: // Larvitar                  case 307: case 308: // Meditite                      return metLevel == 20;              }
Magic Number,PKHeX.Core,XK3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\XK3.cs,IsOriginXD,The following statement contains a magic number: switch (species)              {                  case 296: // Makuhita    30 Colo 18 XD                  case 297:                      return metLevel != 30;                  case 175: // Togepi      20 Colo 25 XD' also 20 as Togetic in Colo                  case 176:                      return metLevel != 20;                  case 179: // Mareep      37 Colo 17 XD                  case 180: // Flaafy      30 Colo                  case 181:                      return metLevel != 37 && metLevel != 30;                  case 219: // Magcargo    30 Colo 38 XD (Slugma in Colo)                      return metLevel != 30;                  case 195: // Quagsire    30 Colo // ** Wooper XD                      return metLevel != 30;                  case 334: // Altaria     33 Colo // 36 XD (Swablu in Colo)                      return metLevel != 33;                  case 167: // Ledian      40 Colo // 10 Ledyba XD                      return metLevel != 40;                  case 207: // Gligar      43 Colo // ** Gligar XD                      return metLevel != 43;                  case 221: // Piloswine   43 Colo // 22 Swinub XD                      return metLevel != 43;                  case 205: // Forretress  43 Colo // 20 Pineco XD                      return metLevel != 43;                  case 168: // Ariados     43 Colo // 14 Spinarak XD                      return metLevel != 43;                  case 229: // Houndoom    48 Colo // 17 Houndour XD                      return metLevel != 48;                  case 217: // Ursaring    45 Colo // 11 Teddiursa XD                      return metLevel != 45;                  case 212: // Scizor      50 Colo // 40 Scyther XD                      return metLevel != 50;                  case 196: // Espeon                      return metLevel != 25;                  case 197: // Umbreon                      return metLevel != 26;                        // Gifts                  case 213: // Shuckle                  case 239: case 240: // Elekid                  case 246: case 247: case 248: // Larvitar                  case 307: case 308: // Meditite                      return metLevel == 20;              }
Magic Number,PKHeX.Core,XK3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\XK3.cs,IsOriginXD,The following statement contains a magic number: switch (species)              {                  case 296: // Makuhita    30 Colo 18 XD                  case 297:                      return metLevel != 30;                  case 175: // Togepi      20 Colo 25 XD' also 20 as Togetic in Colo                  case 176:                      return metLevel != 20;                  case 179: // Mareep      37 Colo 17 XD                  case 180: // Flaafy      30 Colo                  case 181:                      return metLevel != 37 && metLevel != 30;                  case 219: // Magcargo    30 Colo 38 XD (Slugma in Colo)                      return metLevel != 30;                  case 195: // Quagsire    30 Colo // ** Wooper XD                      return metLevel != 30;                  case 334: // Altaria     33 Colo // 36 XD (Swablu in Colo)                      return metLevel != 33;                  case 167: // Ledian      40 Colo // 10 Ledyba XD                      return metLevel != 40;                  case 207: // Gligar      43 Colo // ** Gligar XD                      return metLevel != 43;                  case 221: // Piloswine   43 Colo // 22 Swinub XD                      return metLevel != 43;                  case 205: // Forretress  43 Colo // 20 Pineco XD                      return metLevel != 43;                  case 168: // Ariados     43 Colo // 14 Spinarak XD                      return metLevel != 43;                  case 229: // Houndoom    48 Colo // 17 Houndour XD                      return metLevel != 48;                  case 217: // Ursaring    45 Colo // 11 Teddiursa XD                      return metLevel != 45;                  case 212: // Scizor      50 Colo // 40 Scyther XD                      return metLevel != 50;                  case 196: // Espeon                      return metLevel != 25;                  case 197: // Umbreon                      return metLevel != 26;                        // Gifts                  case 213: // Shuckle                  case 239: case 240: // Elekid                  case 246: case 247: case 248: // Larvitar                  case 307: case 308: // Meditite                      return metLevel == 20;              }
Magic Number,PKHeX.Core,XK3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\XK3.cs,IsOriginXD,The following statement contains a magic number: switch (species)              {                  case 296: // Makuhita    30 Colo 18 XD                  case 297:                      return metLevel != 30;                  case 175: // Togepi      20 Colo 25 XD' also 20 as Togetic in Colo                  case 176:                      return metLevel != 20;                  case 179: // Mareep      37 Colo 17 XD                  case 180: // Flaafy      30 Colo                  case 181:                      return metLevel != 37 && metLevel != 30;                  case 219: // Magcargo    30 Colo 38 XD (Slugma in Colo)                      return metLevel != 30;                  case 195: // Quagsire    30 Colo // ** Wooper XD                      return metLevel != 30;                  case 334: // Altaria     33 Colo // 36 XD (Swablu in Colo)                      return metLevel != 33;                  case 167: // Ledian      40 Colo // 10 Ledyba XD                      return metLevel != 40;                  case 207: // Gligar      43 Colo // ** Gligar XD                      return metLevel != 43;                  case 221: // Piloswine   43 Colo // 22 Swinub XD                      return metLevel != 43;                  case 205: // Forretress  43 Colo // 20 Pineco XD                      return metLevel != 43;                  case 168: // Ariados     43 Colo // 14 Spinarak XD                      return metLevel != 43;                  case 229: // Houndoom    48 Colo // 17 Houndour XD                      return metLevel != 48;                  case 217: // Ursaring    45 Colo // 11 Teddiursa XD                      return metLevel != 45;                  case 212: // Scizor      50 Colo // 40 Scyther XD                      return metLevel != 50;                  case 196: // Espeon                      return metLevel != 25;                  case 197: // Umbreon                      return metLevel != 26;                        // Gifts                  case 213: // Shuckle                  case 239: case 240: // Elekid                  case 246: case 247: case 248: // Larvitar                  case 307: case 308: // Meditite                      return metLevel == 20;              }
Magic Number,PKHeX.Core,XK3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\XK3.cs,IsOriginXD,The following statement contains a magic number: switch (species)              {                  case 296: // Makuhita    30 Colo 18 XD                  case 297:                      return metLevel != 30;                  case 175: // Togepi      20 Colo 25 XD' also 20 as Togetic in Colo                  case 176:                      return metLevel != 20;                  case 179: // Mareep      37 Colo 17 XD                  case 180: // Flaafy      30 Colo                  case 181:                      return metLevel != 37 && metLevel != 30;                  case 219: // Magcargo    30 Colo 38 XD (Slugma in Colo)                      return metLevel != 30;                  case 195: // Quagsire    30 Colo // ** Wooper XD                      return metLevel != 30;                  case 334: // Altaria     33 Colo // 36 XD (Swablu in Colo)                      return metLevel != 33;                  case 167: // Ledian      40 Colo // 10 Ledyba XD                      return metLevel != 40;                  case 207: // Gligar      43 Colo // ** Gligar XD                      return metLevel != 43;                  case 221: // Piloswine   43 Colo // 22 Swinub XD                      return metLevel != 43;                  case 205: // Forretress  43 Colo // 20 Pineco XD                      return metLevel != 43;                  case 168: // Ariados     43 Colo // 14 Spinarak XD                      return metLevel != 43;                  case 229: // Houndoom    48 Colo // 17 Houndour XD                      return metLevel != 48;                  case 217: // Ursaring    45 Colo // 11 Teddiursa XD                      return metLevel != 45;                  case 212: // Scizor      50 Colo // 40 Scyther XD                      return metLevel != 50;                  case 196: // Espeon                      return metLevel != 25;                  case 197: // Umbreon                      return metLevel != 26;                        // Gifts                  case 213: // Shuckle                  case 239: case 240: // Elekid                  case 246: case 247: case 248: // Larvitar                  case 307: case 308: // Meditite                      return metLevel == 20;              }
Magic Number,PKHeX.Core,XK3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\XK3.cs,IsOriginXD,The following statement contains a magic number: switch (species)              {                  case 296: // Makuhita    30 Colo 18 XD                  case 297:                      return metLevel != 30;                  case 175: // Togepi      20 Colo 25 XD' also 20 as Togetic in Colo                  case 176:                      return metLevel != 20;                  case 179: // Mareep      37 Colo 17 XD                  case 180: // Flaafy      30 Colo                  case 181:                      return metLevel != 37 && metLevel != 30;                  case 219: // Magcargo    30 Colo 38 XD (Slugma in Colo)                      return metLevel != 30;                  case 195: // Quagsire    30 Colo // ** Wooper XD                      return metLevel != 30;                  case 334: // Altaria     33 Colo // 36 XD (Swablu in Colo)                      return metLevel != 33;                  case 167: // Ledian      40 Colo // 10 Ledyba XD                      return metLevel != 40;                  case 207: // Gligar      43 Colo // ** Gligar XD                      return metLevel != 43;                  case 221: // Piloswine   43 Colo // 22 Swinub XD                      return metLevel != 43;                  case 205: // Forretress  43 Colo // 20 Pineco XD                      return metLevel != 43;                  case 168: // Ariados     43 Colo // 14 Spinarak XD                      return metLevel != 43;                  case 229: // Houndoom    48 Colo // 17 Houndour XD                      return metLevel != 48;                  case 217: // Ursaring    45 Colo // 11 Teddiursa XD                      return metLevel != 45;                  case 212: // Scizor      50 Colo // 40 Scyther XD                      return metLevel != 50;                  case 196: // Espeon                      return metLevel != 25;                  case 197: // Umbreon                      return metLevel != 26;                        // Gifts                  case 213: // Shuckle                  case 239: case 240: // Elekid                  case 246: case 247: case 248: // Larvitar                  case 307: case 308: // Meditite                      return metLevel == 20;              }
Magic Number,PKHeX.Core,XK3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\XK3.cs,IsOriginXD,The following statement contains a magic number: switch (species)              {                  case 296: // Makuhita    30 Colo 18 XD                  case 297:                      return metLevel != 30;                  case 175: // Togepi      20 Colo 25 XD' also 20 as Togetic in Colo                  case 176:                      return metLevel != 20;                  case 179: // Mareep      37 Colo 17 XD                  case 180: // Flaafy      30 Colo                  case 181:                      return metLevel != 37 && metLevel != 30;                  case 219: // Magcargo    30 Colo 38 XD (Slugma in Colo)                      return metLevel != 30;                  case 195: // Quagsire    30 Colo // ** Wooper XD                      return metLevel != 30;                  case 334: // Altaria     33 Colo // 36 XD (Swablu in Colo)                      return metLevel != 33;                  case 167: // Ledian      40 Colo // 10 Ledyba XD                      return metLevel != 40;                  case 207: // Gligar      43 Colo // ** Gligar XD                      return metLevel != 43;                  case 221: // Piloswine   43 Colo // 22 Swinub XD                      return metLevel != 43;                  case 205: // Forretress  43 Colo // 20 Pineco XD                      return metLevel != 43;                  case 168: // Ariados     43 Colo // 14 Spinarak XD                      return metLevel != 43;                  case 229: // Houndoom    48 Colo // 17 Houndour XD                      return metLevel != 48;                  case 217: // Ursaring    45 Colo // 11 Teddiursa XD                      return metLevel != 45;                  case 212: // Scizor      50 Colo // 40 Scyther XD                      return metLevel != 50;                  case 196: // Espeon                      return metLevel != 25;                  case 197: // Umbreon                      return metLevel != 26;                        // Gifts                  case 213: // Shuckle                  case 239: case 240: // Elekid                  case 246: case 247: case 248: // Larvitar                  case 307: case 308: // Meditite                      return metLevel == 20;              }
Magic Number,PKHeX.Core,XK3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\XK3.cs,IsOriginXD,The following statement contains a magic number: switch (species)              {                  case 296: // Makuhita    30 Colo 18 XD                  case 297:                      return metLevel != 30;                  case 175: // Togepi      20 Colo 25 XD' also 20 as Togetic in Colo                  case 176:                      return metLevel != 20;                  case 179: // Mareep      37 Colo 17 XD                  case 180: // Flaafy      30 Colo                  case 181:                      return metLevel != 37 && metLevel != 30;                  case 219: // Magcargo    30 Colo 38 XD (Slugma in Colo)                      return metLevel != 30;                  case 195: // Quagsire    30 Colo // ** Wooper XD                      return metLevel != 30;                  case 334: // Altaria     33 Colo // 36 XD (Swablu in Colo)                      return metLevel != 33;                  case 167: // Ledian      40 Colo // 10 Ledyba XD                      return metLevel != 40;                  case 207: // Gligar      43 Colo // ** Gligar XD                      return metLevel != 43;                  case 221: // Piloswine   43 Colo // 22 Swinub XD                      return metLevel != 43;                  case 205: // Forretress  43 Colo // 20 Pineco XD                      return metLevel != 43;                  case 168: // Ariados     43 Colo // 14 Spinarak XD                      return metLevel != 43;                  case 229: // Houndoom    48 Colo // 17 Houndour XD                      return metLevel != 48;                  case 217: // Ursaring    45 Colo // 11 Teddiursa XD                      return metLevel != 45;                  case 212: // Scizor      50 Colo // 40 Scyther XD                      return metLevel != 50;                  case 196: // Espeon                      return metLevel != 25;                  case 197: // Umbreon                      return metLevel != 26;                        // Gifts                  case 213: // Shuckle                  case 239: case 240: // Elekid                  case 246: case 247: case 248: // Larvitar                  case 307: case 308: // Meditite                      return metLevel == 20;              }
Magic Number,PKHeX.Core,XK3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\XK3.cs,IsOriginXD,The following statement contains a magic number: switch (species)              {                  case 296: // Makuhita    30 Colo 18 XD                  case 297:                      return metLevel != 30;                  case 175: // Togepi      20 Colo 25 XD' also 20 as Togetic in Colo                  case 176:                      return metLevel != 20;                  case 179: // Mareep      37 Colo 17 XD                  case 180: // Flaafy      30 Colo                  case 181:                      return metLevel != 37 && metLevel != 30;                  case 219: // Magcargo    30 Colo 38 XD (Slugma in Colo)                      return metLevel != 30;                  case 195: // Quagsire    30 Colo // ** Wooper XD                      return metLevel != 30;                  case 334: // Altaria     33 Colo // 36 XD (Swablu in Colo)                      return metLevel != 33;                  case 167: // Ledian      40 Colo // 10 Ledyba XD                      return metLevel != 40;                  case 207: // Gligar      43 Colo // ** Gligar XD                      return metLevel != 43;                  case 221: // Piloswine   43 Colo // 22 Swinub XD                      return metLevel != 43;                  case 205: // Forretress  43 Colo // 20 Pineco XD                      return metLevel != 43;                  case 168: // Ariados     43 Colo // 14 Spinarak XD                      return metLevel != 43;                  case 229: // Houndoom    48 Colo // 17 Houndour XD                      return metLevel != 48;                  case 217: // Ursaring    45 Colo // 11 Teddiursa XD                      return metLevel != 45;                  case 212: // Scizor      50 Colo // 40 Scyther XD                      return metLevel != 50;                  case 196: // Espeon                      return metLevel != 25;                  case 197: // Umbreon                      return metLevel != 26;                        // Gifts                  case 213: // Shuckle                  case 239: case 240: // Elekid                  case 246: case 247: case 248: // Larvitar                  case 307: case 308: // Meditite                      return metLevel == 20;              }
Magic Number,PKHeX.Core,XK3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\XK3.cs,IsOriginXD,The following statement contains a magic number: switch (species)              {                  case 296: // Makuhita    30 Colo 18 XD                  case 297:                      return metLevel != 30;                  case 175: // Togepi      20 Colo 25 XD' also 20 as Togetic in Colo                  case 176:                      return metLevel != 20;                  case 179: // Mareep      37 Colo 17 XD                  case 180: // Flaafy      30 Colo                  case 181:                      return metLevel != 37 && metLevel != 30;                  case 219: // Magcargo    30 Colo 38 XD (Slugma in Colo)                      return metLevel != 30;                  case 195: // Quagsire    30 Colo // ** Wooper XD                      return metLevel != 30;                  case 334: // Altaria     33 Colo // 36 XD (Swablu in Colo)                      return metLevel != 33;                  case 167: // Ledian      40 Colo // 10 Ledyba XD                      return metLevel != 40;                  case 207: // Gligar      43 Colo // ** Gligar XD                      return metLevel != 43;                  case 221: // Piloswine   43 Colo // 22 Swinub XD                      return metLevel != 43;                  case 205: // Forretress  43 Colo // 20 Pineco XD                      return metLevel != 43;                  case 168: // Ariados     43 Colo // 14 Spinarak XD                      return metLevel != 43;                  case 229: // Houndoom    48 Colo // 17 Houndour XD                      return metLevel != 48;                  case 217: // Ursaring    45 Colo // 11 Teddiursa XD                      return metLevel != 45;                  case 212: // Scizor      50 Colo // 40 Scyther XD                      return metLevel != 50;                  case 196: // Espeon                      return metLevel != 25;                  case 197: // Umbreon                      return metLevel != 26;                        // Gifts                  case 213: // Shuckle                  case 239: case 240: // Elekid                  case 246: case 247: case 248: // Larvitar                  case 307: case 308: // Meditite                      return metLevel == 20;              }
Magic Number,PKHeX.Core,XK3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\XK3.cs,IsOriginXD,The following statement contains a magic number: switch (species)              {                  case 296: // Makuhita    30 Colo 18 XD                  case 297:                      return metLevel != 30;                  case 175: // Togepi      20 Colo 25 XD' also 20 as Togetic in Colo                  case 176:                      return metLevel != 20;                  case 179: // Mareep      37 Colo 17 XD                  case 180: // Flaafy      30 Colo                  case 181:                      return metLevel != 37 && metLevel != 30;                  case 219: // Magcargo    30 Colo 38 XD (Slugma in Colo)                      return metLevel != 30;                  case 195: // Quagsire    30 Colo // ** Wooper XD                      return metLevel != 30;                  case 334: // Altaria     33 Colo // 36 XD (Swablu in Colo)                      return metLevel != 33;                  case 167: // Ledian      40 Colo // 10 Ledyba XD                      return metLevel != 40;                  case 207: // Gligar      43 Colo // ** Gligar XD                      return metLevel != 43;                  case 221: // Piloswine   43 Colo // 22 Swinub XD                      return metLevel != 43;                  case 205: // Forretress  43 Colo // 20 Pineco XD                      return metLevel != 43;                  case 168: // Ariados     43 Colo // 14 Spinarak XD                      return metLevel != 43;                  case 229: // Houndoom    48 Colo // 17 Houndour XD                      return metLevel != 48;                  case 217: // Ursaring    45 Colo // 11 Teddiursa XD                      return metLevel != 45;                  case 212: // Scizor      50 Colo // 40 Scyther XD                      return metLevel != 50;                  case 196: // Espeon                      return metLevel != 25;                  case 197: // Umbreon                      return metLevel != 26;                        // Gifts                  case 213: // Shuckle                  case 239: case 240: // Elekid                  case 246: case 247: case 248: // Larvitar                  case 307: case 308: // Meditite                      return metLevel == 20;              }
Magic Number,PKHeX.Core,XK3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\XK3.cs,IsOriginXD,The following statement contains a magic number: switch (species)              {                  case 296: // Makuhita    30 Colo 18 XD                  case 297:                      return metLevel != 30;                  case 175: // Togepi      20 Colo 25 XD' also 20 as Togetic in Colo                  case 176:                      return metLevel != 20;                  case 179: // Mareep      37 Colo 17 XD                  case 180: // Flaafy      30 Colo                  case 181:                      return metLevel != 37 && metLevel != 30;                  case 219: // Magcargo    30 Colo 38 XD (Slugma in Colo)                      return metLevel != 30;                  case 195: // Quagsire    30 Colo // ** Wooper XD                      return metLevel != 30;                  case 334: // Altaria     33 Colo // 36 XD (Swablu in Colo)                      return metLevel != 33;                  case 167: // Ledian      40 Colo // 10 Ledyba XD                      return metLevel != 40;                  case 207: // Gligar      43 Colo // ** Gligar XD                      return metLevel != 43;                  case 221: // Piloswine   43 Colo // 22 Swinub XD                      return metLevel != 43;                  case 205: // Forretress  43 Colo // 20 Pineco XD                      return metLevel != 43;                  case 168: // Ariados     43 Colo // 14 Spinarak XD                      return metLevel != 43;                  case 229: // Houndoom    48 Colo // 17 Houndour XD                      return metLevel != 48;                  case 217: // Ursaring    45 Colo // 11 Teddiursa XD                      return metLevel != 45;                  case 212: // Scizor      50 Colo // 40 Scyther XD                      return metLevel != 50;                  case 196: // Espeon                      return metLevel != 25;                  case 197: // Umbreon                      return metLevel != 26;                        // Gifts                  case 213: // Shuckle                  case 239: case 240: // Elekid                  case 246: case 247: case 248: // Larvitar                  case 307: case 308: // Meditite                      return metLevel == 20;              }
Magic Number,PKHeX.Core,XK3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\XK3.cs,IsOriginXD,The following statement contains a magic number: switch (species)              {                  case 296: // Makuhita    30 Colo 18 XD                  case 297:                      return metLevel != 30;                  case 175: // Togepi      20 Colo 25 XD' also 20 as Togetic in Colo                  case 176:                      return metLevel != 20;                  case 179: // Mareep      37 Colo 17 XD                  case 180: // Flaafy      30 Colo                  case 181:                      return metLevel != 37 && metLevel != 30;                  case 219: // Magcargo    30 Colo 38 XD (Slugma in Colo)                      return metLevel != 30;                  case 195: // Quagsire    30 Colo // ** Wooper XD                      return metLevel != 30;                  case 334: // Altaria     33 Colo // 36 XD (Swablu in Colo)                      return metLevel != 33;                  case 167: // Ledian      40 Colo // 10 Ledyba XD                      return metLevel != 40;                  case 207: // Gligar      43 Colo // ** Gligar XD                      return metLevel != 43;                  case 221: // Piloswine   43 Colo // 22 Swinub XD                      return metLevel != 43;                  case 205: // Forretress  43 Colo // 20 Pineco XD                      return metLevel != 43;                  case 168: // Ariados     43 Colo // 14 Spinarak XD                      return metLevel != 43;                  case 229: // Houndoom    48 Colo // 17 Houndour XD                      return metLevel != 48;                  case 217: // Ursaring    45 Colo // 11 Teddiursa XD                      return metLevel != 45;                  case 212: // Scizor      50 Colo // 40 Scyther XD                      return metLevel != 50;                  case 196: // Espeon                      return metLevel != 25;                  case 197: // Umbreon                      return metLevel != 26;                        // Gifts                  case 213: // Shuckle                  case 239: case 240: // Elekid                  case 246: case 247: case 248: // Larvitar                  case 307: case 308: // Meditite                      return metLevel == 20;              }
Magic Number,PKHeX.Core,XK3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\XK3.cs,IsOriginXD,The following statement contains a magic number: switch (species)              {                  case 296: // Makuhita    30 Colo 18 XD                  case 297:                      return metLevel != 30;                  case 175: // Togepi      20 Colo 25 XD' also 20 as Togetic in Colo                  case 176:                      return metLevel != 20;                  case 179: // Mareep      37 Colo 17 XD                  case 180: // Flaafy      30 Colo                  case 181:                      return metLevel != 37 && metLevel != 30;                  case 219: // Magcargo    30 Colo 38 XD (Slugma in Colo)                      return metLevel != 30;                  case 195: // Quagsire    30 Colo // ** Wooper XD                      return metLevel != 30;                  case 334: // Altaria     33 Colo // 36 XD (Swablu in Colo)                      return metLevel != 33;                  case 167: // Ledian      40 Colo // 10 Ledyba XD                      return metLevel != 40;                  case 207: // Gligar      43 Colo // ** Gligar XD                      return metLevel != 43;                  case 221: // Piloswine   43 Colo // 22 Swinub XD                      return metLevel != 43;                  case 205: // Forretress  43 Colo // 20 Pineco XD                      return metLevel != 43;                  case 168: // Ariados     43 Colo // 14 Spinarak XD                      return metLevel != 43;                  case 229: // Houndoom    48 Colo // 17 Houndour XD                      return metLevel != 48;                  case 217: // Ursaring    45 Colo // 11 Teddiursa XD                      return metLevel != 45;                  case 212: // Scizor      50 Colo // 40 Scyther XD                      return metLevel != 50;                  case 196: // Espeon                      return metLevel != 25;                  case 197: // Umbreon                      return metLevel != 26;                        // Gifts                  case 213: // Shuckle                  case 239: case 240: // Elekid                  case 246: case 247: case 248: // Larvitar                  case 307: case 308: // Meditite                      return metLevel == 20;              }
Magic Number,PKHeX.Core,SaveBlockAccessor7SM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Access\SaveBlockAccessor7SM.cs,SaveBlockAccessor7SM,The following statement contains a magic number: MyStatus = new MyStatus7(sav' bi[03].Offset);
Magic Number,PKHeX.Core,SaveBlockAccessor7SM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Access\SaveBlockAccessor7SM.cs,SaveBlockAccessor7SM,The following statement contains a magic number: Zukan = new Zukan7(sav' bi[06].Offset' 0x550);
Magic Number,PKHeX.Core,SaveBlockAccessor7SM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Access\SaveBlockAccessor7SM.cs,SaveBlockAccessor7SM,The following statement contains a magic number: Misc = new Misc7(sav' bi[09].Offset);
Magic Number,PKHeX.Core,SaveBlockAccessor7SM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Access\SaveBlockAccessor7SM.cs,SaveBlockAccessor7SM,The following statement contains a magic number: FieldMenu = new FieldMenu7(sav' bi[10].Offset);
Magic Number,PKHeX.Core,SaveBlockAccessor7SM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Access\SaveBlockAccessor7SM.cs,SaveBlockAccessor7SM,The following statement contains a magic number: Config = new ConfigSave7(sav' bi[11].Offset);
Magic Number,PKHeX.Core,SaveBlockAccessor7SM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Access\SaveBlockAccessor7SM.cs,SaveBlockAccessor7SM,The following statement contains a magic number: GameTime = new GameTime7(sav' bi[12].Offset);
Magic Number,PKHeX.Core,SaveBlockAccessor7SM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Access\SaveBlockAccessor7SM.cs,SaveBlockAccessor7SM,The following statement contains a magic number: BoxLayout = new BoxLayout7(sav' bi[13].Offset);
Magic Number,PKHeX.Core,SaveBlockAccessor7SM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Access\SaveBlockAccessor7SM.cs,SaveBlockAccessor7SM,The following statement contains a magic number: ResortSave = new ResortSave7(sav' bi[15].Offset);
Magic Number,PKHeX.Core,SaveBlockAccessor7SM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Access\SaveBlockAccessor7SM.cs,SaveBlockAccessor7SM,The following statement contains a magic number: Played = new PlayTime6(sav' bi[16].Offset);
Magic Number,PKHeX.Core,SaveBlockAccessor7SM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Access\SaveBlockAccessor7SM.cs,SaveBlockAccessor7SM,The following statement contains a magic number: Overworld = new FieldMoveModelSave7(sav' bi[17].Offset);
Magic Number,PKHeX.Core,SaveBlockAccessor7SM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Access\SaveBlockAccessor7SM.cs,SaveBlockAccessor7SM,The following statement contains a magic number: Fashion = new FashionBlock7(sav' bi[18].Offset);
Magic Number,PKHeX.Core,SaveBlockAccessor7SM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Access\SaveBlockAccessor7SM.cs,SaveBlockAccessor7SM,The following statement contains a magic number: Festa = new JoinFesta7(sav' bi[21].Offset);
Magic Number,PKHeX.Core,SaveBlockAccessor7SM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Access\SaveBlockAccessor7SM.cs,SaveBlockAccessor7SM,The following statement contains a magic number: PokeFinder = new PokeFinder7(sav' bi[26].Offset);
Magic Number,PKHeX.Core,SaveBlockAccessor7SM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Access\SaveBlockAccessor7SM.cs,SaveBlockAccessor7SM,The following statement contains a magic number: MysteryGift = new MysteryBlock7(sav' bi[27].Offset);
Magic Number,PKHeX.Core,SaveBlockAccessor7SM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Access\SaveBlockAccessor7SM.cs,SaveBlockAccessor7SM,The following statement contains a magic number: Records = new RecordBlock6(sav' bi[28].Offset);
Magic Number,PKHeX.Core,SaveBlockAccessor7SM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Access\SaveBlockAccessor7SM.cs,SaveBlockAccessor7SM,The following statement contains a magic number: BattleTree = new BattleTree7(sav' bi[32].Offset);
Magic Number,PKHeX.Core,SaveBlockAccessor7SM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Access\SaveBlockAccessor7SM.cs,SaveBlockAccessor7SM,The following statement contains a magic number: Daycare = new Daycare7(sav' bi[33].Offset);
Magic Number,PKHeX.Core,SaveBlockAccessor7USUM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Access\SaveBlockAccessor7USUM.cs,SaveBlockAccessor7USUM,The following statement contains a magic number: MyStatus = new MyStatus7(sav' bi[03].Offset);
Magic Number,PKHeX.Core,SaveBlockAccessor7USUM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Access\SaveBlockAccessor7USUM.cs,SaveBlockAccessor7USUM,The following statement contains a magic number: Zukan = new Zukan7(sav' bi[06].Offset' 0x550);
Magic Number,PKHeX.Core,SaveBlockAccessor7USUM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Access\SaveBlockAccessor7USUM.cs,SaveBlockAccessor7USUM,The following statement contains a magic number: Misc = new Misc7(sav' bi[09].Offset);
Magic Number,PKHeX.Core,SaveBlockAccessor7USUM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Access\SaveBlockAccessor7USUM.cs,SaveBlockAccessor7USUM,The following statement contains a magic number: FieldMenu = new FieldMenu7(sav' bi[10].Offset);
Magic Number,PKHeX.Core,SaveBlockAccessor7USUM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Access\SaveBlockAccessor7USUM.cs,SaveBlockAccessor7USUM,The following statement contains a magic number: Config = new ConfigSave7(sav' bi[11].Offset);
Magic Number,PKHeX.Core,SaveBlockAccessor7USUM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Access\SaveBlockAccessor7USUM.cs,SaveBlockAccessor7USUM,The following statement contains a magic number: GameTime = new GameTime7(sav' bi[12].Offset);
Magic Number,PKHeX.Core,SaveBlockAccessor7USUM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Access\SaveBlockAccessor7USUM.cs,SaveBlockAccessor7USUM,The following statement contains a magic number: BoxLayout = new BoxLayout7(sav' bi[13].Offset);
Magic Number,PKHeX.Core,SaveBlockAccessor7USUM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Access\SaveBlockAccessor7USUM.cs,SaveBlockAccessor7USUM,The following statement contains a magic number: ResortSave = new ResortSave7(sav' bi[15].Offset);
Magic Number,PKHeX.Core,SaveBlockAccessor7USUM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Access\SaveBlockAccessor7USUM.cs,SaveBlockAccessor7USUM,The following statement contains a magic number: Played = new PlayTime6(sav' bi[16].Offset);
Magic Number,PKHeX.Core,SaveBlockAccessor7USUM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Access\SaveBlockAccessor7USUM.cs,SaveBlockAccessor7USUM,The following statement contains a magic number: Overworld = new FieldMoveModelSave7(sav' bi[17].Offset);
Magic Number,PKHeX.Core,SaveBlockAccessor7USUM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Access\SaveBlockAccessor7USUM.cs,SaveBlockAccessor7USUM,The following statement contains a magic number: Fashion = new FashionBlock7(sav' bi[18].Offset);
Magic Number,PKHeX.Core,SaveBlockAccessor7USUM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Access\SaveBlockAccessor7USUM.cs,SaveBlockAccessor7USUM,The following statement contains a magic number: Festa = new JoinFesta7(sav' bi[21].Offset);
Magic Number,PKHeX.Core,SaveBlockAccessor7USUM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Access\SaveBlockAccessor7USUM.cs,SaveBlockAccessor7USUM,The following statement contains a magic number: PokeFinder = new PokeFinder7(sav' bi[26].Offset);
Magic Number,PKHeX.Core,SaveBlockAccessor7USUM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Access\SaveBlockAccessor7USUM.cs,SaveBlockAccessor7USUM,The following statement contains a magic number: MysteryGift = new MysteryBlock7(sav' bi[27].Offset);
Magic Number,PKHeX.Core,SaveBlockAccessor7USUM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Access\SaveBlockAccessor7USUM.cs,SaveBlockAccessor7USUM,The following statement contains a magic number: Records = new RecordBlock6(sav' bi[28].Offset);
Magic Number,PKHeX.Core,SaveBlockAccessor7USUM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Access\SaveBlockAccessor7USUM.cs,SaveBlockAccessor7USUM,The following statement contains a magic number: BattleTree = new BattleTree7(sav' bi[32].Offset);
Magic Number,PKHeX.Core,SaveBlockAccessor7USUM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Access\SaveBlockAccessor7USUM.cs,SaveBlockAccessor7USUM,The following statement contains a magic number: Daycare = new Daycare7(sav' bi[33].Offset);
Magic Number,PKHeX.Core,BlockInfoBEEFUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Blocks\BlockInfo3DS.cs,DumpComputedBlockInfo,The following statement contains a magic number: int ofs = blockInfoOffset + (i * 8);
Magic Number,PKHeX.Core,BlockInfoBEEFUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Blocks\BlockInfo3DS.cs,DumpComputedBlockInfo,The following statement contains a magic number: var ID = BitConverter.ToUInt16(data' ofs + 4);
Magic Number,PKHeX.Core,BlockInfoRSBOX,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Blocks\BlockInfoRSBOX.cs,BlockInfoRSBOX,The following statement contains a magic number: ID = BigEndian.ToUInt32(data' Offset + 4);
Magic Number,PKHeX.Core,BlockInfoRSBOX,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Blocks\BlockInfoRSBOX.cs,BlockInfoRSBOX,The following statement contains a magic number: SaveCount = BigEndian.ToUInt32(data' Offset + 8);
Magic Number,PKHeX.Core,BlockInfoRSBOX,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Blocks\BlockInfoRSBOX.cs,SetChecksum,The following statement contains a magic number: data[Offset + 0] = (byte)(chk >> 24);
Magic Number,PKHeX.Core,BlockInfoRSBOX,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Blocks\BlockInfoRSBOX.cs,SetChecksum,The following statement contains a magic number: data[Offset + 1] = (byte)(chk >> 16);
Magic Number,PKHeX.Core,BlockInfoRSBOX,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Blocks\BlockInfoRSBOX.cs,SetChecksum,The following statement contains a magic number: data[Offset + 2] = (byte)(chk >> 8);
Magic Number,PKHeX.Core,BlockInfoRSBOX,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Blocks\BlockInfoRSBOX.cs,SetChecksum,The following statement contains a magic number: data[Offset + 2] = (byte)(chk >> 8);
Magic Number,PKHeX.Core,BlockInfoRSBOX,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Blocks\BlockInfoRSBOX.cs,SetChecksum,The following statement contains a magic number: data[Offset + 3] = (byte)(chk >> 0);
Magic Number,PKHeX.Core,BlockInfoRSBOX,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Blocks\BlockInfoRSBOX.cs,GetChecksum,The following statement contains a magic number: int start = Offset + 4;
Magic Number,PKHeX.Core,BlockInfoRSBOX,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Blocks\BlockInfoRSBOX.cs,GetChecksum,The following statement contains a magic number: int end = start + Length - 4;
Magic Number,PKHeX.Core,BlockInfoRSBOX,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Blocks\BlockInfoRSBOX.cs,GetChecksum,The following statement contains a magic number: return (uint)(chk << 16 | (ushort)(0xF004 - chk));
Magic Number,PKHeX.Core,MemeCrypto,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\MemeCrypto\MemeCrypto.cs,VerifyMemePOKE,The following statement contains a magic number: var memeLen = input.Length - 8;
Magic Number,PKHeX.Core,MemeCrypto,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\MemeCrypto\MemeCrypto.cs,VerifyMemePOKE,The following statement contains a magic number: var keyIndex = BitConverter.ToInt32(input' i + 4);
Magic Number,PKHeX.Core,MemeCrypto,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\MemeCrypto\MemeCrypto.cs,VerifyMemePOKE,The following statement contains a magic number: new[] { memeLen' memeLen - 2 }
Magic Number,PKHeX.Core,MemeCrypto,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\MemeCrypto\MemeCrypto.cs,SignMemeData,The following statement contains a magic number: Array.Copy(sha1.ComputeHash(input' 0' input.Length - 8)' 0' output' output.Length - 8' 8);
Magic Number,PKHeX.Core,MemeCrypto,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\MemeCrypto\MemeCrypto.cs,SignMemeData,The following statement contains a magic number: Array.Copy(sha1.ComputeHash(input' 0' input.Length - 8)' 0' output' output.Length - 8' 8);
Magic Number,PKHeX.Core,MemeCrypto,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\MemeCrypto\MemeCrypto.cs,SignMemeData,The following statement contains a magic number: Array.Copy(sha1.ComputeHash(input' 0' input.Length - 8)' 0' output' output.Length - 8' 8);
Magic Number,PKHeX.Core,MemeKey,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\MemeCrypto\MemeKey.cs,MemeKey,The following statement contains a magic number: Array.Copy(DER' 0x7B' _E' 0' 3);
Magic Number,PKHeX.Core,MemeKey,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\MemeCrypto\MemeKey.cs,AesDecrypt,The following statement contains a magic number: subkey[ofs + 0] = (byte)((2 * b1) + (b2 >> 7));
Magic Number,PKHeX.Core,MemeKey,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\MemeCrypto\MemeKey.cs,AesDecrypt,The following statement contains a magic number: subkey[ofs + 0] = (byte)((2 * b1) + (b2 >> 7));
Magic Number,PKHeX.Core,MemeKey,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\MemeCrypto\MemeKey.cs,AesDecrypt,The following statement contains a magic number: subkey[ofs + 1] = (byte)(2 * b2);
Magic Number,PKHeX.Core,MemeKey,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\MemeCrypto\MemeKey.cs,AesDecrypt,The following statement contains a magic number: subkey[ofs + 1] += (byte)(temp[ofs + 2] >> 7);
Magic Number,PKHeX.Core,MemeKey,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\MemeCrypto\MemeKey.cs,AesDecrypt,The following statement contains a magic number: subkey[ofs + 1] += (byte)(temp[ofs + 2] >> 7);
Magic Number,PKHeX.Core,MemeKey,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\MemeCrypto\MemeKey.cs,AesDecrypt,The following statement contains a magic number: ofs + 2 < temp.Length
Magic Number,PKHeX.Core,MemeKey,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\MemeCrypto\MemeKey.cs,AesEncrypt,The following statement contains a magic number: subkey[ofs + 0] = (byte)((2 * b1) + (b2 >> 7));
Magic Number,PKHeX.Core,MemeKey,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\MemeCrypto\MemeKey.cs,AesEncrypt,The following statement contains a magic number: subkey[ofs + 0] = (byte)((2 * b1) + (b2 >> 7));
Magic Number,PKHeX.Core,MemeKey,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\MemeCrypto\MemeKey.cs,AesEncrypt,The following statement contains a magic number: subkey[ofs + 1] = (byte)(2 * b2);
Magic Number,PKHeX.Core,MemeKey,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\MemeCrypto\MemeKey.cs,AesEncrypt,The following statement contains a magic number: subkey[ofs + 1] += (byte)(temp[ofs + 2] >> 7);
Magic Number,PKHeX.Core,MemeKey,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\MemeCrypto\MemeKey.cs,AesEncrypt,The following statement contains a magic number: subkey[ofs + 1] += (byte)(temp[ofs + 2] >> 7);
Magic Number,PKHeX.Core,MemeKey,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\MemeCrypto\MemeKey.cs,AesEncrypt,The following statement contains a magic number: ofs + 2 < temp.Length
Magic Number,PKHeX.Core,StringExtentions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\MemeCrypto\MemeKey.cs,ToByteArray,The following statement contains a magic number: return Enumerable                  .Range(0' toTransform.Length / 2)                  .Select(i => Convert.ToByte(toTransform.Substring(i * 2' 2)' 16))                  .ToArray();
Magic Number,PKHeX.Core,StringExtentions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\MemeCrypto\MemeKey.cs,ToByteArray,The following statement contains a magic number: return Enumerable                  .Range(0' toTransform.Length / 2)                  .Select(i => Convert.ToByte(toTransform.Substring(i * 2' 2)' 16))                  .ToArray();
Magic Number,PKHeX.Core,StringExtentions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\MemeCrypto\MemeKey.cs,ToByteArray,The following statement contains a magic number: return Enumerable                  .Range(0' toTransform.Length / 2)                  .Select(i => Convert.ToByte(toTransform.Substring(i * 2' 2)' 16))                  .ToArray();
Magic Number,PKHeX.Core,StringExtentions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\MemeCrypto\MemeKey.cs,ToByteArray,The following statement contains a magic number: return Enumerable                  .Range(0' toTransform.Length / 2)                  .Select(i => Convert.ToByte(toTransform.Substring(i * 2' 2)' 16))                  .ToArray();
Magic Number,PKHeX.Core,SCBlock,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\MemeCrypto\SwishCrypto.cs,GetArrayEntrySize,The following statement contains a magic number: switch (type)              {                  case SCBlockType.Common3:                  case SCBlockType.Single1:                  case SCBlockType.Single5:                      return 1;                  case SCBlockType.Single2:                  case SCBlockType.Single6:                      return 2;                  case SCBlockType.Single3:                  case SCBlockType.Single7:                  case SCBlockType.Single9:                      return 4;                  case SCBlockType.Single4:                  case SCBlockType.Single8:                  case SCBlockType.Single10:                      return 8;                    default:                      throw new ArgumentException(nameof(type));              }
Magic Number,PKHeX.Core,SCBlock,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\MemeCrypto\SwishCrypto.cs,GetArrayEntrySize,The following statement contains a magic number: switch (type)              {                  case SCBlockType.Common3:                  case SCBlockType.Single1:                  case SCBlockType.Single5:                      return 1;                  case SCBlockType.Single2:                  case SCBlockType.Single6:                      return 2;                  case SCBlockType.Single3:                  case SCBlockType.Single7:                  case SCBlockType.Single9:                      return 4;                  case SCBlockType.Single4:                  case SCBlockType.Single8:                  case SCBlockType.Single10:                      return 8;                    default:                      throw new ArgumentException(nameof(type));              }
Magic Number,PKHeX.Core,SCBlock,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\MemeCrypto\SwishCrypto.cs,GetArrayEntrySize,The following statement contains a magic number: switch (type)              {                  case SCBlockType.Common3:                  case SCBlockType.Single1:                  case SCBlockType.Single5:                      return 1;                  case SCBlockType.Single2:                  case SCBlockType.Single6:                      return 2;                  case SCBlockType.Single3:                  case SCBlockType.Single7:                  case SCBlockType.Single9:                      return 4;                  case SCBlockType.Single4:                  case SCBlockType.Single8:                  case SCBlockType.Single10:                      return 8;                    default:                      throw new ArgumentException(nameof(type));              }
Magic Number,PKHeX.Core,SCBlock,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\MemeCrypto\SwishCrypto.cs,XorshiftAdvance,The following statement contains a magic number: key ^= (key << 2);
Magic Number,PKHeX.Core,SCBlock,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\MemeCrypto\SwishCrypto.cs,XorshiftAdvance,The following statement contains a magic number: key ^= (key >> 15);
Magic Number,PKHeX.Core,SCBlock,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\MemeCrypto\SwishCrypto.cs,XorshiftAdvance,The following statement contains a magic number: key ^= (key << 13);
Magic Number,PKHeX.Core,SCBlock,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\MemeCrypto\SwishCrypto.cs,PopCount,The following statement contains a magic number: key = (key & m2) + ((key >> 2) & m2);
Magic Number,PKHeX.Core,SCBlock,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\MemeCrypto\SwishCrypto.cs,PopCount,The following statement contains a magic number: key = (key + (key >> 4)) & m4;
Magic Number,PKHeX.Core,SCBlock,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\MemeCrypto\SwishCrypto.cs,PopCount,The following statement contains a magic number: return (uint)((key * h01) >> 56);
Magic Number,PKHeX.Core,SCBlock,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\MemeCrypto\SwishCrypto.cs,GetKeyStream,The following statement contains a magic number: ofs += 4;
Magic Number,PKHeX.Core,SCBlock,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\MemeCrypto\SwishCrypto.cs,GetKeyStream,The following statement contains a magic number: ofs + 4 < start
Magic Number,PKHeX.Core,SCBlock,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\MemeCrypto\SwishCrypto.cs,GetKeyStream,The following statement contains a magic number: int cur_size = Math.Min(size' 4 - (start - ofs));
Magic Number,PKHeX.Core,SCBlock,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\MemeCrypto\SwishCrypto.cs,GetKeyStream,The following statement contains a magic number: int cur_size = Math.Min(size - out_ofs' 4);
Magic Number,PKHeX.Core,SCBlock,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\MemeCrypto\SwishCrypto.cs,GetEncryptedDataSize,The following statement contains a magic number: const int size = 4 + 1;
Magic Number,PKHeX.Core,SCBlock,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\MemeCrypto\SwishCrypto.cs,GetEncryptedDataSize,The following statement contains a magic number: switch (Type)              {                  case SCBlockType.Common1:                  case SCBlockType.Common2:                  case SCBlockType.Common3:                      return size;                  case SCBlockType.Data:                      return size + 4 + Data.Length;                  case SCBlockType.Array:                      return size + 5 + Data.Length;                  case SCBlockType.Single1:                  case SCBlockType.Single2:                  case SCBlockType.Single3:                  case SCBlockType.Single4:                  case SCBlockType.Single5:                  case SCBlockType.Single6:                  case SCBlockType.Single7:                  case SCBlockType.Single8:                  case SCBlockType.Single9:                  case SCBlockType.Single10:                      return size + Data.Length;                  default:                      throw new ArgumentException(nameof(Type));              }
Magic Number,PKHeX.Core,SCBlock,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\MemeCrypto\SwishCrypto.cs,GetEncryptedDataSize,The following statement contains a magic number: switch (Type)              {                  case SCBlockType.Common1:                  case SCBlockType.Common2:                  case SCBlockType.Common3:                      return size;                  case SCBlockType.Data:                      return size + 4 + Data.Length;                  case SCBlockType.Array:                      return size + 5 + Data.Length;                  case SCBlockType.Single1:                  case SCBlockType.Single2:                  case SCBlockType.Single3:                  case SCBlockType.Single4:                  case SCBlockType.Single5:                  case SCBlockType.Single6:                  case SCBlockType.Single7:                  case SCBlockType.Single8:                  case SCBlockType.Single9:                  case SCBlockType.Single10:                      return size + Data.Length;                  default:                      throw new ArgumentException(nameof(Type));              }
Magic Number,PKHeX.Core,SCBlock,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\MemeCrypto\SwishCrypto.cs,GetEncryptedData,The following statement contains a magic number: result[4] = (byte)Type;
Magic Number,PKHeX.Core,SCBlock,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\MemeCrypto\SwishCrypto.cs,GetEncryptedData,The following statement contains a magic number: var out_ofs = 5;
Magic Number,PKHeX.Core,SCBlock,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\MemeCrypto\SwishCrypto.cs,GetEncryptedData,The following statement contains a magic number: out_ofs += 4;
Magic Number,PKHeX.Core,SCBlock,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\MemeCrypto\SwishCrypto.cs,GetEncryptedData,The following statement contains a magic number: CryptBytes(result' 4' 0' result.Length - 4).CopyTo(result' 4);
Magic Number,PKHeX.Core,SCBlock,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\MemeCrypto\SwishCrypto.cs,GetEncryptedData,The following statement contains a magic number: CryptBytes(result' 4' 0' result.Length - 4).CopyTo(result' 4);
Magic Number,PKHeX.Core,SCBlock,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\MemeCrypto\SwishCrypto.cs,GetEncryptedData,The following statement contains a magic number: CryptBytes(result' 4' 0' result.Length - 4).CopyTo(result' 4);
Magic Number,PKHeX.Core,SCBlock,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\MemeCrypto\SwishCrypto.cs,ReadFromOffset,The following statement contains a magic number: offset += 4;
Magic Number,PKHeX.Core,SCBlock,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\MemeCrypto\SwishCrypto.cs,ReadFromOffset,The following statement contains a magic number: switch (block.Type)              {                  case SCBlockType.Common1:                  case SCBlockType.Common2:                  case SCBlockType.Common3:                      // Block types A' B' Common are empty' and have no extra data.                      offset++;                      break;                    case SCBlockType.Data:                      var num_bytes = BitConverter.ToInt32(block.CryptBytes(data' offset' 1' 4)' 0);                      block.Data = block.CryptBytes(data' offset' 5' num_bytes);                      offset += 5 + num_bytes;                      break;                    case SCBlockType.Array:                      var num_entries = BitConverter.ToInt32(block.CryptBytes(data' offset' 1' 4)' 0);                      block.SubType = (SCBlockType)block.CryptBytes(data' offset' 5' 1)[0];                      switch (block.SubType)                      {                          case SCBlockType.Common3:                              // This is an array of booleans.                              block.Data = block.CryptBytes(data' offset' 6' num_entries);                              offset += 6 + num_entries;                              Debug.Assert(block.Data.All(entry => entry <= 1));                              break;                            case SCBlockType.Single1:                          case SCBlockType.Single2:                          case SCBlockType.Single3:                          case SCBlockType.Single4:                          case SCBlockType.Single5:                          case SCBlockType.Single6:                          case SCBlockType.Single7:                          case SCBlockType.Single8:                          case SCBlockType.Single9:                          case SCBlockType.Single10:                              var entry_size = GetArrayEntrySize(block.SubType);                              block.Data = block.CryptBytes(data' offset' 6' num_entries * entry_size);                              offset += 6 + (num_entries * entry_size);                              break;                            default:                              throw new ArgumentException(nameof(block.SubType));                      }                      break;                    case SCBlockType.Single1:                  case SCBlockType.Single2:                  case SCBlockType.Single3:                  case SCBlockType.Single4:                  case SCBlockType.Single5:                  case SCBlockType.Single6:                  case SCBlockType.Single7:                  case SCBlockType.Single8:                  case SCBlockType.Single9:                  case SCBlockType.Single10:                      {                          var entry_size = GetArrayEntrySize(block.Type);                          block.Data = block.CryptBytes(data' offset' 1' entry_size);                          offset += 1 + entry_size;                          break;                      }                  default:                      throw new ArgumentException(nameof(block.Type));              }
Magic Number,PKHeX.Core,SCBlock,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\MemeCrypto\SwishCrypto.cs,ReadFromOffset,The following statement contains a magic number: switch (block.Type)              {                  case SCBlockType.Common1:                  case SCBlockType.Common2:                  case SCBlockType.Common3:                      // Block types A' B' Common are empty' and have no extra data.                      offset++;                      break;                    case SCBlockType.Data:                      var num_bytes = BitConverter.ToInt32(block.CryptBytes(data' offset' 1' 4)' 0);                      block.Data = block.CryptBytes(data' offset' 5' num_bytes);                      offset += 5 + num_bytes;                      break;                    case SCBlockType.Array:                      var num_entries = BitConverter.ToInt32(block.CryptBytes(data' offset' 1' 4)' 0);                      block.SubType = (SCBlockType)block.CryptBytes(data' offset' 5' 1)[0];                      switch (block.SubType)                      {                          case SCBlockType.Common3:                              // This is an array of booleans.                              block.Data = block.CryptBytes(data' offset' 6' num_entries);                              offset += 6 + num_entries;                              Debug.Assert(block.Data.All(entry => entry <= 1));                              break;                            case SCBlockType.Single1:                          case SCBlockType.Single2:                          case SCBlockType.Single3:                          case SCBlockType.Single4:                          case SCBlockType.Single5:                          case SCBlockType.Single6:                          case SCBlockType.Single7:                          case SCBlockType.Single8:                          case SCBlockType.Single9:                          case SCBlockType.Single10:                              var entry_size = GetArrayEntrySize(block.SubType);                              block.Data = block.CryptBytes(data' offset' 6' num_entries * entry_size);                              offset += 6 + (num_entries * entry_size);                              break;                            default:                              throw new ArgumentException(nameof(block.SubType));                      }                      break;                    case SCBlockType.Single1:                  case SCBlockType.Single2:                  case SCBlockType.Single3:                  case SCBlockType.Single4:                  case SCBlockType.Single5:                  case SCBlockType.Single6:                  case SCBlockType.Single7:                  case SCBlockType.Single8:                  case SCBlockType.Single9:                  case SCBlockType.Single10:                      {                          var entry_size = GetArrayEntrySize(block.Type);                          block.Data = block.CryptBytes(data' offset' 1' entry_size);                          offset += 1 + entry_size;                          break;                      }                  default:                      throw new ArgumentException(nameof(block.Type));              }
Magic Number,PKHeX.Core,SCBlock,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\MemeCrypto\SwishCrypto.cs,ReadFromOffset,The following statement contains a magic number: switch (block.Type)              {                  case SCBlockType.Common1:                  case SCBlockType.Common2:                  case SCBlockType.Common3:                      // Block types A' B' Common are empty' and have no extra data.                      offset++;                      break;                    case SCBlockType.Data:                      var num_bytes = BitConverter.ToInt32(block.CryptBytes(data' offset' 1' 4)' 0);                      block.Data = block.CryptBytes(data' offset' 5' num_bytes);                      offset += 5 + num_bytes;                      break;                    case SCBlockType.Array:                      var num_entries = BitConverter.ToInt32(block.CryptBytes(data' offset' 1' 4)' 0);                      block.SubType = (SCBlockType)block.CryptBytes(data' offset' 5' 1)[0];                      switch (block.SubType)                      {                          case SCBlockType.Common3:                              // This is an array of booleans.                              block.Data = block.CryptBytes(data' offset' 6' num_entries);                              offset += 6 + num_entries;                              Debug.Assert(block.Data.All(entry => entry <= 1));                              break;                            case SCBlockType.Single1:                          case SCBlockType.Single2:                          case SCBlockType.Single3:                          case SCBlockType.Single4:                          case SCBlockType.Single5:                          case SCBlockType.Single6:                          case SCBlockType.Single7:                          case SCBlockType.Single8:                          case SCBlockType.Single9:                          case SCBlockType.Single10:                              var entry_size = GetArrayEntrySize(block.SubType);                              block.Data = block.CryptBytes(data' offset' 6' num_entries * entry_size);                              offset += 6 + (num_entries * entry_size);                              break;                            default:                              throw new ArgumentException(nameof(block.SubType));                      }                      break;                    case SCBlockType.Single1:                  case SCBlockType.Single2:                  case SCBlockType.Single3:                  case SCBlockType.Single4:                  case SCBlockType.Single5:                  case SCBlockType.Single6:                  case SCBlockType.Single7:                  case SCBlockType.Single8:                  case SCBlockType.Single9:                  case SCBlockType.Single10:                      {                          var entry_size = GetArrayEntrySize(block.Type);                          block.Data = block.CryptBytes(data' offset' 1' entry_size);                          offset += 1 + entry_size;                          break;                      }                  default:                      throw new ArgumentException(nameof(block.Type));              }
Magic Number,PKHeX.Core,SCBlock,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\MemeCrypto\SwishCrypto.cs,ReadFromOffset,The following statement contains a magic number: switch (block.Type)              {                  case SCBlockType.Common1:                  case SCBlockType.Common2:                  case SCBlockType.Common3:                      // Block types A' B' Common are empty' and have no extra data.                      offset++;                      break;                    case SCBlockType.Data:                      var num_bytes = BitConverter.ToInt32(block.CryptBytes(data' offset' 1' 4)' 0);                      block.Data = block.CryptBytes(data' offset' 5' num_bytes);                      offset += 5 + num_bytes;                      break;                    case SCBlockType.Array:                      var num_entries = BitConverter.ToInt32(block.CryptBytes(data' offset' 1' 4)' 0);                      block.SubType = (SCBlockType)block.CryptBytes(data' offset' 5' 1)[0];                      switch (block.SubType)                      {                          case SCBlockType.Common3:                              // This is an array of booleans.                              block.Data = block.CryptBytes(data' offset' 6' num_entries);                              offset += 6 + num_entries;                              Debug.Assert(block.Data.All(entry => entry <= 1));                              break;                            case SCBlockType.Single1:                          case SCBlockType.Single2:                          case SCBlockType.Single3:                          case SCBlockType.Single4:                          case SCBlockType.Single5:                          case SCBlockType.Single6:                          case SCBlockType.Single7:                          case SCBlockType.Single8:                          case SCBlockType.Single9:                          case SCBlockType.Single10:                              var entry_size = GetArrayEntrySize(block.SubType);                              block.Data = block.CryptBytes(data' offset' 6' num_entries * entry_size);                              offset += 6 + (num_entries * entry_size);                              break;                            default:                              throw new ArgumentException(nameof(block.SubType));                      }                      break;                    case SCBlockType.Single1:                  case SCBlockType.Single2:                  case SCBlockType.Single3:                  case SCBlockType.Single4:                  case SCBlockType.Single5:                  case SCBlockType.Single6:                  case SCBlockType.Single7:                  case SCBlockType.Single8:                  case SCBlockType.Single9:                  case SCBlockType.Single10:                      {                          var entry_size = GetArrayEntrySize(block.Type);                          block.Data = block.CryptBytes(data' offset' 1' entry_size);                          offset += 1 + entry_size;                          break;                      }                  default:                      throw new ArgumentException(nameof(block.Type));              }
Magic Number,PKHeX.Core,SCBlock,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\MemeCrypto\SwishCrypto.cs,ReadFromOffset,The following statement contains a magic number: switch (block.Type)              {                  case SCBlockType.Common1:                  case SCBlockType.Common2:                  case SCBlockType.Common3:                      // Block types A' B' Common are empty' and have no extra data.                      offset++;                      break;                    case SCBlockType.Data:                      var num_bytes = BitConverter.ToInt32(block.CryptBytes(data' offset' 1' 4)' 0);                      block.Data = block.CryptBytes(data' offset' 5' num_bytes);                      offset += 5 + num_bytes;                      break;                    case SCBlockType.Array:                      var num_entries = BitConverter.ToInt32(block.CryptBytes(data' offset' 1' 4)' 0);                      block.SubType = (SCBlockType)block.CryptBytes(data' offset' 5' 1)[0];                      switch (block.SubType)                      {                          case SCBlockType.Common3:                              // This is an array of booleans.                              block.Data = block.CryptBytes(data' offset' 6' num_entries);                              offset += 6 + num_entries;                              Debug.Assert(block.Data.All(entry => entry <= 1));                              break;                            case SCBlockType.Single1:                          case SCBlockType.Single2:                          case SCBlockType.Single3:                          case SCBlockType.Single4:                          case SCBlockType.Single5:                          case SCBlockType.Single6:                          case SCBlockType.Single7:                          case SCBlockType.Single8:                          case SCBlockType.Single9:                          case SCBlockType.Single10:                              var entry_size = GetArrayEntrySize(block.SubType);                              block.Data = block.CryptBytes(data' offset' 6' num_entries * entry_size);                              offset += 6 + (num_entries * entry_size);                              break;                            default:                              throw new ArgumentException(nameof(block.SubType));                      }                      break;                    case SCBlockType.Single1:                  case SCBlockType.Single2:                  case SCBlockType.Single3:                  case SCBlockType.Single4:                  case SCBlockType.Single5:                  case SCBlockType.Single6:                  case SCBlockType.Single7:                  case SCBlockType.Single8:                  case SCBlockType.Single9:                  case SCBlockType.Single10:                      {                          var entry_size = GetArrayEntrySize(block.Type);                          block.Data = block.CryptBytes(data' offset' 1' entry_size);                          offset += 1 + entry_size;                          break;                      }                  default:                      throw new ArgumentException(nameof(block.Type));              }
Magic Number,PKHeX.Core,SCBlock,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\MemeCrypto\SwishCrypto.cs,ReadFromOffset,The following statement contains a magic number: switch (block.Type)              {                  case SCBlockType.Common1:                  case SCBlockType.Common2:                  case SCBlockType.Common3:                      // Block types A' B' Common are empty' and have no extra data.                      offset++;                      break;                    case SCBlockType.Data:                      var num_bytes = BitConverter.ToInt32(block.CryptBytes(data' offset' 1' 4)' 0);                      block.Data = block.CryptBytes(data' offset' 5' num_bytes);                      offset += 5 + num_bytes;                      break;                    case SCBlockType.Array:                      var num_entries = BitConverter.ToInt32(block.CryptBytes(data' offset' 1' 4)' 0);                      block.SubType = (SCBlockType)block.CryptBytes(data' offset' 5' 1)[0];                      switch (block.SubType)                      {                          case SCBlockType.Common3:                              // This is an array of booleans.                              block.Data = block.CryptBytes(data' offset' 6' num_entries);                              offset += 6 + num_entries;                              Debug.Assert(block.Data.All(entry => entry <= 1));                              break;                            case SCBlockType.Single1:                          case SCBlockType.Single2:                          case SCBlockType.Single3:                          case SCBlockType.Single4:                          case SCBlockType.Single5:                          case SCBlockType.Single6:                          case SCBlockType.Single7:                          case SCBlockType.Single8:                          case SCBlockType.Single9:                          case SCBlockType.Single10:                              var entry_size = GetArrayEntrySize(block.SubType);                              block.Data = block.CryptBytes(data' offset' 6' num_entries * entry_size);                              offset += 6 + (num_entries * entry_size);                              break;                            default:                              throw new ArgumentException(nameof(block.SubType));                      }                      break;                    case SCBlockType.Single1:                  case SCBlockType.Single2:                  case SCBlockType.Single3:                  case SCBlockType.Single4:                  case SCBlockType.Single5:                  case SCBlockType.Single6:                  case SCBlockType.Single7:                  case SCBlockType.Single8:                  case SCBlockType.Single9:                  case SCBlockType.Single10:                      {                          var entry_size = GetArrayEntrySize(block.Type);                          block.Data = block.CryptBytes(data' offset' 1' entry_size);                          offset += 1 + entry_size;                          break;                      }                  default:                      throw new ArgumentException(nameof(block.Type));              }
Magic Number,PKHeX.Core,SCBlock,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\MemeCrypto\SwishCrypto.cs,ReadFromOffset,The following statement contains a magic number: switch (block.Type)              {                  case SCBlockType.Common1:                  case SCBlockType.Common2:                  case SCBlockType.Common3:                      // Block types A' B' Common are empty' and have no extra data.                      offset++;                      break;                    case SCBlockType.Data:                      var num_bytes = BitConverter.ToInt32(block.CryptBytes(data' offset' 1' 4)' 0);                      block.Data = block.CryptBytes(data' offset' 5' num_bytes);                      offset += 5 + num_bytes;                      break;                    case SCBlockType.Array:                      var num_entries = BitConverter.ToInt32(block.CryptBytes(data' offset' 1' 4)' 0);                      block.SubType = (SCBlockType)block.CryptBytes(data' offset' 5' 1)[0];                      switch (block.SubType)                      {                          case SCBlockType.Common3:                              // This is an array of booleans.                              block.Data = block.CryptBytes(data' offset' 6' num_entries);                              offset += 6 + num_entries;                              Debug.Assert(block.Data.All(entry => entry <= 1));                              break;                            case SCBlockType.Single1:                          case SCBlockType.Single2:                          case SCBlockType.Single3:                          case SCBlockType.Single4:                          case SCBlockType.Single5:                          case SCBlockType.Single6:                          case SCBlockType.Single7:                          case SCBlockType.Single8:                          case SCBlockType.Single9:                          case SCBlockType.Single10:                              var entry_size = GetArrayEntrySize(block.SubType);                              block.Data = block.CryptBytes(data' offset' 6' num_entries * entry_size);                              offset += 6 + (num_entries * entry_size);                              break;                            default:                              throw new ArgumentException(nameof(block.SubType));                      }                      break;                    case SCBlockType.Single1:                  case SCBlockType.Single2:                  case SCBlockType.Single3:                  case SCBlockType.Single4:                  case SCBlockType.Single5:                  case SCBlockType.Single6:                  case SCBlockType.Single7:                  case SCBlockType.Single8:                  case SCBlockType.Single9:                  case SCBlockType.Single10:                      {                          var entry_size = GetArrayEntrySize(block.Type);                          block.Data = block.CryptBytes(data' offset' 1' entry_size);                          offset += 1 + entry_size;                          break;                      }                  default:                      throw new ArgumentException(nameof(block.Type));              }
Magic Number,PKHeX.Core,SCBlock,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\MemeCrypto\SwishCrypto.cs,ReadFromOffset,The following statement contains a magic number: switch (block.Type)              {                  case SCBlockType.Common1:                  case SCBlockType.Common2:                  case SCBlockType.Common3:                      // Block types A' B' Common are empty' and have no extra data.                      offset++;                      break;                    case SCBlockType.Data:                      var num_bytes = BitConverter.ToInt32(block.CryptBytes(data' offset' 1' 4)' 0);                      block.Data = block.CryptBytes(data' offset' 5' num_bytes);                      offset += 5 + num_bytes;                      break;                    case SCBlockType.Array:                      var num_entries = BitConverter.ToInt32(block.CryptBytes(data' offset' 1' 4)' 0);                      block.SubType = (SCBlockType)block.CryptBytes(data' offset' 5' 1)[0];                      switch (block.SubType)                      {                          case SCBlockType.Common3:                              // This is an array of booleans.                              block.Data = block.CryptBytes(data' offset' 6' num_entries);                              offset += 6 + num_entries;                              Debug.Assert(block.Data.All(entry => entry <= 1));                              break;                            case SCBlockType.Single1:                          case SCBlockType.Single2:                          case SCBlockType.Single3:                          case SCBlockType.Single4:                          case SCBlockType.Single5:                          case SCBlockType.Single6:                          case SCBlockType.Single7:                          case SCBlockType.Single8:                          case SCBlockType.Single9:                          case SCBlockType.Single10:                              var entry_size = GetArrayEntrySize(block.SubType);                              block.Data = block.CryptBytes(data' offset' 6' num_entries * entry_size);                              offset += 6 + (num_entries * entry_size);                              break;                            default:                              throw new ArgumentException(nameof(block.SubType));                      }                      break;                    case SCBlockType.Single1:                  case SCBlockType.Single2:                  case SCBlockType.Single3:                  case SCBlockType.Single4:                  case SCBlockType.Single5:                  case SCBlockType.Single6:                  case SCBlockType.Single7:                  case SCBlockType.Single8:                  case SCBlockType.Single9:                  case SCBlockType.Single10:                      {                          var entry_size = GetArrayEntrySize(block.Type);                          block.Data = block.CryptBytes(data' offset' 1' entry_size);                          offset += 1 + entry_size;                          break;                      }                  default:                      throw new ArgumentException(nameof(block.Type));              }
Magic Number,PKHeX.Core,SCBlock,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\MemeCrypto\SwishCrypto.cs,ReadFromOffset,The following statement contains a magic number: switch (block.Type)              {                  case SCBlockType.Common1:                  case SCBlockType.Common2:                  case SCBlockType.Common3:                      // Block types A' B' Common are empty' and have no extra data.                      offset++;                      break;                    case SCBlockType.Data:                      var num_bytes = BitConverter.ToInt32(block.CryptBytes(data' offset' 1' 4)' 0);                      block.Data = block.CryptBytes(data' offset' 5' num_bytes);                      offset += 5 + num_bytes;                      break;                    case SCBlockType.Array:                      var num_entries = BitConverter.ToInt32(block.CryptBytes(data' offset' 1' 4)' 0);                      block.SubType = (SCBlockType)block.CryptBytes(data' offset' 5' 1)[0];                      switch (block.SubType)                      {                          case SCBlockType.Common3:                              // This is an array of booleans.                              block.Data = block.CryptBytes(data' offset' 6' num_entries);                              offset += 6 + num_entries;                              Debug.Assert(block.Data.All(entry => entry <= 1));                              break;                            case SCBlockType.Single1:                          case SCBlockType.Single2:                          case SCBlockType.Single3:                          case SCBlockType.Single4:                          case SCBlockType.Single5:                          case SCBlockType.Single6:                          case SCBlockType.Single7:                          case SCBlockType.Single8:                          case SCBlockType.Single9:                          case SCBlockType.Single10:                              var entry_size = GetArrayEntrySize(block.SubType);                              block.Data = block.CryptBytes(data' offset' 6' num_entries * entry_size);                              offset += 6 + (num_entries * entry_size);                              break;                            default:                              throw new ArgumentException(nameof(block.SubType));                      }                      break;                    case SCBlockType.Single1:                  case SCBlockType.Single2:                  case SCBlockType.Single3:                  case SCBlockType.Single4:                  case SCBlockType.Single5:                  case SCBlockType.Single6:                  case SCBlockType.Single7:                  case SCBlockType.Single8:                  case SCBlockType.Single9:                  case SCBlockType.Single10:                      {                          var entry_size = GetArrayEntrySize(block.Type);                          block.Data = block.CryptBytes(data' offset' 1' entry_size);                          offset += 1 + entry_size;                          break;                      }                  default:                      throw new ArgumentException(nameof(block.Type));              }
Magic Number,PKHeX.Core,SAV1,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV1.cs,Initialize,The following statement contains a magic number: Array.Copy(rawDC' 1' TempDaycare' 2 + 1 + PKX.SIZE_1PARTY + StringLength' StringLength);
Magic Number,PKHeX.Core,SAV1,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV1.cs,Initialize,The following statement contains a magic number: Array.Copy(rawDC' 1 + StringLength' TempDaycare' 2 + 1 + PKX.SIZE_1PARTY' StringLength);
Magic Number,PKHeX.Core,SAV1,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV1.cs,Initialize,The following statement contains a magic number: Array.Copy(rawDC' 1 + (2 * StringLength)' TempDaycare' 2 + 1' PKX.SIZE_1STORED);
Magic Number,PKHeX.Core,SAV1,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV1.cs,Initialize,The following statement contains a magic number: Array.Copy(rawDC' 1 + (2 * StringLength)' TempDaycare' 2 + 1' PKX.SIZE_1STORED);
Magic Number,PKHeX.Core,SAV1,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV1.cs,Initialize,The following statement contains a magic number: daycareList.Write().CopyTo(Data' GetPartyOffset(7));
Magic Number,PKHeX.Core,SAV1,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV1.cs,Initialize,The following statement contains a magic number: DaycareOffset = GetPartyOffset(7);
Magic Number,PKHeX.Core,SAV1,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV1.cs,GetFinalData,The following statement contains a magic number: i < 6
Magic Number,PKHeX.Core,SAV1,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV1.cs,GetFinalData,The following statement contains a magic number: byte[] dc = new byte[1 + (2 * StringLength) + PKX.SIZE_1STORED];
Magic Number,PKHeX.Core,SAV1,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV1.cs,GetFinalData,The following statement contains a magic number: Array.Copy(rawDC' 2 + 1 + PKX.SIZE_1PARTY + StringLength' dc' 1' StringLength);
Magic Number,PKHeX.Core,SAV1,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV1.cs,GetFinalData,The following statement contains a magic number: Array.Copy(rawDC' 2 + 1 + PKX.SIZE_1PARTY' dc' 1 + StringLength' StringLength);
Magic Number,PKHeX.Core,SAV1,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV1.cs,GetFinalData,The following statement contains a magic number: Array.Copy(rawDC' 2 + 1' dc' 1 + (2 * StringLength)' PKX.SIZE_1STORED);
Magic Number,PKHeX.Core,SAV1,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV1.cs,GetFinalData,The following statement contains a magic number: Array.Copy(rawDC' 2 + 1' dc' 1 + (2 * StringLength)' PKX.SIZE_1STORED);
Magic Number,PKHeX.Core,SAV1,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV1.cs,GetBoxRawDataOffset,The following statement contains a magic number: i < BoxCount / 2
Magic Number,PKHeX.Core,SAV1,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV1.cs,GetBoxRawDataOffset,The following statement contains a magic number: return 0x6000 + ((i - (BoxCount / 2)) * SIZE_STOREDBOX);
Magic Number,PKHeX.Core,SAV1,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV1.cs,GetDexFlag,The following statement contains a magic number: int ofs = bit >> 3;
Magic Number,PKHeX.Core,SAV1,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV1.cs,GetDexFlag,The following statement contains a magic number: return GetFlag(region + ofs' bit & 7);
Magic Number,PKHeX.Core,SAV1,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV1.cs,SetDexFlag,The following statement contains a magic number: int ofs = bit >> 3;
Magic Number,PKHeX.Core,SAV1,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV1.cs,SetDexFlag,The following statement contains a magic number: SetFlag(region + ofs' bit & 7' value);
Magic Number,PKHeX.Core,SAV2,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV2.cs,Initialize,The following statement contains a magic number: int splitAtIndex = (Japanese ? 6 : 7);
Magic Number,PKHeX.Core,SAV2,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV2.cs,Initialize,The following statement contains a magic number: int splitAtIndex = (Japanese ? 6 : 7);
Magic Number,PKHeX.Core,SAV2,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV2.cs,Initialize,The following statement contains a magic number: offset += (StringLength * 2) + 0x20;
Magic Number,PKHeX.Core,SAV2,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV2.cs,Initialize,The following statement contains a magic number: offset += (StringLength * 2) + PKX.SIZE_2STORED;
Magic Number,PKHeX.Core,SAV2,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV2.cs,Initialize,The following statement contains a magic number: daycare1.Write().CopyTo(Data' GetPartyOffset(7 + (0 * 2)));
Magic Number,PKHeX.Core,SAV2,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV2.cs,Initialize,The following statement contains a magic number: daycare1.Write().CopyTo(Data' GetPartyOffset(7 + (0 * 2)));
Magic Number,PKHeX.Core,SAV2,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV2.cs,Initialize,The following statement contains a magic number: daycare2.Write().CopyTo(Data' GetPartyOffset(7 + (1 * 2)));
Magic Number,PKHeX.Core,SAV2,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV2.cs,Initialize,The following statement contains a magic number: daycare2.Write().CopyTo(Data' GetPartyOffset(7 + (1 * 2)));
Magic Number,PKHeX.Core,SAV2,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV2.cs,Initialize,The following statement contains a magic number: daycare3.Write().CopyTo(Data' GetPartyOffset(7 + (2 * 2)));
Magic Number,PKHeX.Core,SAV2,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV2.cs,Initialize,The following statement contains a magic number: daycare3.Write().CopyTo(Data' GetPartyOffset(7 + (2 * 2)));
Magic Number,PKHeX.Core,SAV2,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV2.cs,Initialize,The following statement contains a magic number: daycare3.Write().CopyTo(Data' GetPartyOffset(7 + (2 * 2)));
Magic Number,PKHeX.Core,SAV2,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV2.cs,GetBoxRawDataOffset,The following statement contains a magic number: return 0x4000 + (i * (SIZE_STOREDBOX + 2));
Magic Number,PKHeX.Core,SAV2,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV2.cs,GetBoxRawDataOffset,The following statement contains a magic number: return 0x6000 + ((i - splitAtIndex) * (SIZE_STOREDBOX + 2));
Magic Number,PKHeX.Core,SAV2,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV2.cs,GetFinalData,The following statement contains a magic number: int splitAtIndex = (Japanese ? 6 : 7);
Magic Number,PKHeX.Core,SAV2,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV2.cs,GetFinalData,The following statement contains a magic number: int splitAtIndex = (Japanese ? 6 : 7);
Magic Number,PKHeX.Core,SAV2,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV2.cs,GetFinalData,The following statement contains a magic number: i < 6
Magic Number,PKHeX.Core,SAV2,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV2.cs,GetBoxName,The following statement contains a magic number: int len = Korean ? 17 : 9;
Magic Number,PKHeX.Core,SAV2,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV2.cs,GetBoxName,The following statement contains a magic number: int len = Korean ? 17 : 9;
Magic Number,PKHeX.Core,SAV2,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV2.cs,SetBoxName,The following statement contains a magic number: int len = Korean ? 17 : 9;
Magic Number,PKHeX.Core,SAV2,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV2.cs,SetBoxName,The following statement contains a magic number: int len = Korean ? 17 : 9;
Magic Number,PKHeX.Core,SAV2,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV2.cs,SetUnownFormFlags,The following statement contains a magic number: i <= 26
Magic Number,PKHeX.Core,SAV2,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV2.cs,SetCaught,The following statement contains a magic number: caught && species == 201
Magic Number,PKHeX.Core,SAV2,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV2.cs,GetDexFlag,The following statement contains a magic number: int ofs = bit >> 3;
Magic Number,PKHeX.Core,SAV2,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV2.cs,GetDexFlag,The following statement contains a magic number: return GetFlag(region + ofs' bit & 7);
Magic Number,PKHeX.Core,SAV2,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV2.cs,SetDexFlag,The following statement contains a magic number: int ofs = bit >> 3;
Magic Number,PKHeX.Core,SAV2,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV2.cs,SetDexFlag,The following statement contains a magic number: SetFlag(region + ofs' bit & 7' value);
Magic Number,PKHeX.Core,SAV2,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV2.cs,GetResetKey,The following statement contains a magic number: var val = (TID >> 8) + (TID & 0xFF) + ((Money >> 16) & 0xFF) + ((Money >> 8) & 0xFF) + (Money & 0xFF);
Magic Number,PKHeX.Core,SAV2,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV2.cs,GetResetKey,The following statement contains a magic number: var val = (TID >> 8) + (TID & 0xFF) + ((Money >> 16) & 0xFF) + ((Money >> 8) & 0xFF) + (Money & 0xFF);
Magic Number,PKHeX.Core,SAV2,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV2.cs,GetResetKey,The following statement contains a magic number: var val = (TID >> 8) + (TID & 0xFF) + ((Money >> 16) & 0xFF) + ((Money >> 8) & 0xFF) + (Money & 0xFF);
Magic Number,PKHeX.Core,SAV2,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV2.cs,GetResetKey,The following statement contains a magic number: var ot = Data.Skip(Offsets.Trainer1 + 2).TakeWhile((z' i) => i < 5 && z != 0x50);
Magic Number,PKHeX.Core,SAV2,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV2.cs,GetResetKey,The following statement contains a magic number: var ot = Data.Skip(Offsets.Trainer1 + 2).TakeWhile((z' i) => i < 5 && z != 0x50);
Magic Number,PKHeX.Core,SAV2,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV2.cs,UnlockAllDecorations,The following statement contains a magic number: i <= 721
Magic Number,PKHeX.Core,SAV3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV3.cs,GetLargeBlockOffset,The following statement contains a magic number: chunk <= 4
Magic Number,PKHeX.Core,SAV3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV3.cs,GetLargeBlockOffset,The following statement contains a magic number: i <= 4
Magic Number,PKHeX.Core,SAV3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV3.cs,SAV3,The following statement contains a magic number: SeenFlagOffsets = Version switch              {                  GameVersion.RS => new[] { PokeDex + 0x44' BlockOfs[1] + 0x938' BlockOfs[4] + 0xC0C }'                  GameVersion.E => new[] { PokeDex + 0x44' BlockOfs[1] + 0x988' BlockOfs[4] + 0xCA4 }'                  _ => new[] { PokeDex + 0x44' BlockOfs[1] + 0x5F8' BlockOfs[4] + 0xB98 }              };
Magic Number,PKHeX.Core,SAV3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV3.cs,SAV3,The following statement contains a magic number: SeenFlagOffsets = Version switch              {                  GameVersion.RS => new[] { PokeDex + 0x44' BlockOfs[1] + 0x938' BlockOfs[4] + 0xC0C }'                  GameVersion.E => new[] { PokeDex + 0x44' BlockOfs[1] + 0x988' BlockOfs[4] + 0xCA4 }'                  _ => new[] { PokeDex + 0x44' BlockOfs[1] + 0x5F8' BlockOfs[4] + 0xB98 }              };
Magic Number,PKHeX.Core,SAV3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV3.cs,SAV3,The following statement contains a magic number: SeenFlagOffsets = Version switch              {                  GameVersion.RS => new[] { PokeDex + 0x44' BlockOfs[1] + 0x938' BlockOfs[4] + 0xC0C }'                  GameVersion.E => new[] { PokeDex + 0x44' BlockOfs[1] + 0x988' BlockOfs[4] + 0xCA4 }'                  _ => new[] { PokeDex + 0x44' BlockOfs[1] + 0x5F8' BlockOfs[4] + 0xB98 }              };
Magic Number,PKHeX.Core,SAV3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV3.cs,Initialize,The following statement contains a magic number: Array.Copy(Data' (blockIndex * SIZE_BLOCK) + ABO' Data' Box + ((i - 5) * 0xF80)' chunkLength[i]);
Magic Number,PKHeX.Core,SAV3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV3.cs,Initialize,The following statement contains a magic number: switch (Version)              {                  case GameVersion.RS:                      OFS_PCItem = BlockOfs[1] + 0x0498;                      OFS_PouchHeldItem = BlockOfs[1] + 0x0560;                      OFS_PouchKeyItem = BlockOfs[1] + 0x05B0;                      OFS_PouchBalls = BlockOfs[1] + 0x0600;                      OFS_PouchTMHM = BlockOfs[1] + 0x0640;                      OFS_PouchBerry = BlockOfs[1] + 0x0740;                      EventFlag = BlockOfs[2] + 0x2A0;                      EventConst = EventFlag + (EventFlagMax / 8);                      DaycareOffset = BlockOfs[4] + 0x11C;                      break;                  case GameVersion.E:                      OFS_PCItem = BlockOfs[1] + 0x0498;                      OFS_PouchHeldItem = BlockOfs[1] + 0x0560;                      OFS_PouchKeyItem = BlockOfs[1] + 0x05D8;                      OFS_PouchBalls = BlockOfs[1] + 0x0650;                      OFS_PouchTMHM = BlockOfs[1] + 0x0690;                      OFS_PouchBerry = BlockOfs[1] + 0x0790;                      EventFlag = BlockOfs[2] + 0x2F0;                      EventConst = EventFlag + (EventFlagMax / 8);                      DaycareOffset = BlockOfs[4] + 0x1B0;                      break;                  case GameVersion.FRLG:                      OFS_PCItem = BlockOfs[1] + 0x0298;                      OFS_PouchHeldItem = BlockOfs[1] + 0x0310;                      OFS_PouchKeyItem = BlockOfs[1] + 0x03B8;                      OFS_PouchBalls = BlockOfs[1] + 0x0430;                      OFS_PouchTMHM = BlockOfs[1] + 0x0464;                      OFS_PouchBerry = BlockOfs[1] + 0x054C;                      EventFlag = BlockOfs[1] + 0xEE0;                      EventConst = BlockOfs[2] + 0x80;                      DaycareOffset = BlockOfs[4] + 0x100;                      break;                  default:                      throw new ArgumentException(nameof(Version));              }
Magic Number,PKHeX.Core,SAV3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV3.cs,Initialize,The following statement contains a magic number: switch (Version)              {                  case GameVersion.RS:                      OFS_PCItem = BlockOfs[1] + 0x0498;                      OFS_PouchHeldItem = BlockOfs[1] + 0x0560;                      OFS_PouchKeyItem = BlockOfs[1] + 0x05B0;                      OFS_PouchBalls = BlockOfs[1] + 0x0600;                      OFS_PouchTMHM = BlockOfs[1] + 0x0640;                      OFS_PouchBerry = BlockOfs[1] + 0x0740;                      EventFlag = BlockOfs[2] + 0x2A0;                      EventConst = EventFlag + (EventFlagMax / 8);                      DaycareOffset = BlockOfs[4] + 0x11C;                      break;                  case GameVersion.E:                      OFS_PCItem = BlockOfs[1] + 0x0498;                      OFS_PouchHeldItem = BlockOfs[1] + 0x0560;                      OFS_PouchKeyItem = BlockOfs[1] + 0x05D8;                      OFS_PouchBalls = BlockOfs[1] + 0x0650;                      OFS_PouchTMHM = BlockOfs[1] + 0x0690;                      OFS_PouchBerry = BlockOfs[1] + 0x0790;                      EventFlag = BlockOfs[2] + 0x2F0;                      EventConst = EventFlag + (EventFlagMax / 8);                      DaycareOffset = BlockOfs[4] + 0x1B0;                      break;                  case GameVersion.FRLG:                      OFS_PCItem = BlockOfs[1] + 0x0298;                      OFS_PouchHeldItem = BlockOfs[1] + 0x0310;                      OFS_PouchKeyItem = BlockOfs[1] + 0x03B8;                      OFS_PouchBalls = BlockOfs[1] + 0x0430;                      OFS_PouchTMHM = BlockOfs[1] + 0x0464;                      OFS_PouchBerry = BlockOfs[1] + 0x054C;                      EventFlag = BlockOfs[1] + 0xEE0;                      EventConst = BlockOfs[2] + 0x80;                      DaycareOffset = BlockOfs[4] + 0x100;                      break;                  default:                      throw new ArgumentException(nameof(Version));              }
Magic Number,PKHeX.Core,SAV3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV3.cs,Initialize,The following statement contains a magic number: switch (Version)              {                  case GameVersion.RS:                      OFS_PCItem = BlockOfs[1] + 0x0498;                      OFS_PouchHeldItem = BlockOfs[1] + 0x0560;                      OFS_PouchKeyItem = BlockOfs[1] + 0x05B0;                      OFS_PouchBalls = BlockOfs[1] + 0x0600;                      OFS_PouchTMHM = BlockOfs[1] + 0x0640;                      OFS_PouchBerry = BlockOfs[1] + 0x0740;                      EventFlag = BlockOfs[2] + 0x2A0;                      EventConst = EventFlag + (EventFlagMax / 8);                      DaycareOffset = BlockOfs[4] + 0x11C;                      break;                  case GameVersion.E:                      OFS_PCItem = BlockOfs[1] + 0x0498;                      OFS_PouchHeldItem = BlockOfs[1] + 0x0560;                      OFS_PouchKeyItem = BlockOfs[1] + 0x05D8;                      OFS_PouchBalls = BlockOfs[1] + 0x0650;                      OFS_PouchTMHM = BlockOfs[1] + 0x0690;                      OFS_PouchBerry = BlockOfs[1] + 0x0790;                      EventFlag = BlockOfs[2] + 0x2F0;                      EventConst = EventFlag + (EventFlagMax / 8);                      DaycareOffset = BlockOfs[4] + 0x1B0;                      break;                  case GameVersion.FRLG:                      OFS_PCItem = BlockOfs[1] + 0x0298;                      OFS_PouchHeldItem = BlockOfs[1] + 0x0310;                      OFS_PouchKeyItem = BlockOfs[1] + 0x03B8;                      OFS_PouchBalls = BlockOfs[1] + 0x0430;                      OFS_PouchTMHM = BlockOfs[1] + 0x0464;                      OFS_PouchBerry = BlockOfs[1] + 0x054C;                      EventFlag = BlockOfs[1] + 0xEE0;                      EventConst = BlockOfs[2] + 0x80;                      DaycareOffset = BlockOfs[4] + 0x100;                      break;                  default:                      throw new ArgumentException(nameof(Version));              }
Magic Number,PKHeX.Core,SAV3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV3.cs,Initialize,The following statement contains a magic number: switch (Version)              {                  case GameVersion.RS:                      OFS_PCItem = BlockOfs[1] + 0x0498;                      OFS_PouchHeldItem = BlockOfs[1] + 0x0560;                      OFS_PouchKeyItem = BlockOfs[1] + 0x05B0;                      OFS_PouchBalls = BlockOfs[1] + 0x0600;                      OFS_PouchTMHM = BlockOfs[1] + 0x0640;                      OFS_PouchBerry = BlockOfs[1] + 0x0740;                      EventFlag = BlockOfs[2] + 0x2A0;                      EventConst = EventFlag + (EventFlagMax / 8);                      DaycareOffset = BlockOfs[4] + 0x11C;                      break;                  case GameVersion.E:                      OFS_PCItem = BlockOfs[1] + 0x0498;                      OFS_PouchHeldItem = BlockOfs[1] + 0x0560;                      OFS_PouchKeyItem = BlockOfs[1] + 0x05D8;                      OFS_PouchBalls = BlockOfs[1] + 0x0650;                      OFS_PouchTMHM = BlockOfs[1] + 0x0690;                      OFS_PouchBerry = BlockOfs[1] + 0x0790;                      EventFlag = BlockOfs[2] + 0x2F0;                      EventConst = EventFlag + (EventFlagMax / 8);                      DaycareOffset = BlockOfs[4] + 0x1B0;                      break;                  case GameVersion.FRLG:                      OFS_PCItem = BlockOfs[1] + 0x0298;                      OFS_PouchHeldItem = BlockOfs[1] + 0x0310;                      OFS_PouchKeyItem = BlockOfs[1] + 0x03B8;                      OFS_PouchBalls = BlockOfs[1] + 0x0430;                      OFS_PouchTMHM = BlockOfs[1] + 0x0464;                      OFS_PouchBerry = BlockOfs[1] + 0x054C;                      EventFlag = BlockOfs[1] + 0xEE0;                      EventConst = BlockOfs[2] + 0x80;                      DaycareOffset = BlockOfs[4] + 0x100;                      break;                  default:                      throw new ArgumentException(nameof(Version));              }
Magic Number,PKHeX.Core,SAV3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV3.cs,Initialize,The following statement contains a magic number: switch (Version)              {                  case GameVersion.RS:                      OFS_PCItem = BlockOfs[1] + 0x0498;                      OFS_PouchHeldItem = BlockOfs[1] + 0x0560;                      OFS_PouchKeyItem = BlockOfs[1] + 0x05B0;                      OFS_PouchBalls = BlockOfs[1] + 0x0600;                      OFS_PouchTMHM = BlockOfs[1] + 0x0640;                      OFS_PouchBerry = BlockOfs[1] + 0x0740;                      EventFlag = BlockOfs[2] + 0x2A0;                      EventConst = EventFlag + (EventFlagMax / 8);                      DaycareOffset = BlockOfs[4] + 0x11C;                      break;                  case GameVersion.E:                      OFS_PCItem = BlockOfs[1] + 0x0498;                      OFS_PouchHeldItem = BlockOfs[1] + 0x0560;                      OFS_PouchKeyItem = BlockOfs[1] + 0x05D8;                      OFS_PouchBalls = BlockOfs[1] + 0x0650;                      OFS_PouchTMHM = BlockOfs[1] + 0x0690;                      OFS_PouchBerry = BlockOfs[1] + 0x0790;                      EventFlag = BlockOfs[2] + 0x2F0;                      EventConst = EventFlag + (EventFlagMax / 8);                      DaycareOffset = BlockOfs[4] + 0x1B0;                      break;                  case GameVersion.FRLG:                      OFS_PCItem = BlockOfs[1] + 0x0298;                      OFS_PouchHeldItem = BlockOfs[1] + 0x0310;                      OFS_PouchKeyItem = BlockOfs[1] + 0x03B8;                      OFS_PouchBalls = BlockOfs[1] + 0x0430;                      OFS_PouchTMHM = BlockOfs[1] + 0x0464;                      OFS_PouchBerry = BlockOfs[1] + 0x054C;                      EventFlag = BlockOfs[1] + 0xEE0;                      EventConst = BlockOfs[2] + 0x80;                      DaycareOffset = BlockOfs[4] + 0x100;                      break;                  default:                      throw new ArgumentException(nameof(Version));              }
Magic Number,PKHeX.Core,SAV3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV3.cs,Initialize,The following statement contains a magic number: switch (Version)              {                  case GameVersion.RS:                      OFS_PCItem = BlockOfs[1] + 0x0498;                      OFS_PouchHeldItem = BlockOfs[1] + 0x0560;                      OFS_PouchKeyItem = BlockOfs[1] + 0x05B0;                      OFS_PouchBalls = BlockOfs[1] + 0x0600;                      OFS_PouchTMHM = BlockOfs[1] + 0x0640;                      OFS_PouchBerry = BlockOfs[1] + 0x0740;                      EventFlag = BlockOfs[2] + 0x2A0;                      EventConst = EventFlag + (EventFlagMax / 8);                      DaycareOffset = BlockOfs[4] + 0x11C;                      break;                  case GameVersion.E:                      OFS_PCItem = BlockOfs[1] + 0x0498;                      OFS_PouchHeldItem = BlockOfs[1] + 0x0560;                      OFS_PouchKeyItem = BlockOfs[1] + 0x05D8;                      OFS_PouchBalls = BlockOfs[1] + 0x0650;                      OFS_PouchTMHM = BlockOfs[1] + 0x0690;                      OFS_PouchBerry = BlockOfs[1] + 0x0790;                      EventFlag = BlockOfs[2] + 0x2F0;                      EventConst = EventFlag + (EventFlagMax / 8);                      DaycareOffset = BlockOfs[4] + 0x1B0;                      break;                  case GameVersion.FRLG:                      OFS_PCItem = BlockOfs[1] + 0x0298;                      OFS_PouchHeldItem = BlockOfs[1] + 0x0310;                      OFS_PouchKeyItem = BlockOfs[1] + 0x03B8;                      OFS_PouchBalls = BlockOfs[1] + 0x0430;                      OFS_PouchTMHM = BlockOfs[1] + 0x0464;                      OFS_PouchBerry = BlockOfs[1] + 0x054C;                      EventFlag = BlockOfs[1] + 0xEE0;                      EventConst = BlockOfs[2] + 0x80;                      DaycareOffset = BlockOfs[4] + 0x100;                      break;                  default:                      throw new ArgumentException(nameof(Version));              }
Magic Number,PKHeX.Core,SAV3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV3.cs,Initialize,The following statement contains a magic number: switch (Version)              {                  case GameVersion.RS:                      OFS_PCItem = BlockOfs[1] + 0x0498;                      OFS_PouchHeldItem = BlockOfs[1] + 0x0560;                      OFS_PouchKeyItem = BlockOfs[1] + 0x05B0;                      OFS_PouchBalls = BlockOfs[1] + 0x0600;                      OFS_PouchTMHM = BlockOfs[1] + 0x0640;                      OFS_PouchBerry = BlockOfs[1] + 0x0740;                      EventFlag = BlockOfs[2] + 0x2A0;                      EventConst = EventFlag + (EventFlagMax / 8);                      DaycareOffset = BlockOfs[4] + 0x11C;                      break;                  case GameVersion.E:                      OFS_PCItem = BlockOfs[1] + 0x0498;                      OFS_PouchHeldItem = BlockOfs[1] + 0x0560;                      OFS_PouchKeyItem = BlockOfs[1] + 0x05D8;                      OFS_PouchBalls = BlockOfs[1] + 0x0650;                      OFS_PouchTMHM = BlockOfs[1] + 0x0690;                      OFS_PouchBerry = BlockOfs[1] + 0x0790;                      EventFlag = BlockOfs[2] + 0x2F0;                      EventConst = EventFlag + (EventFlagMax / 8);                      DaycareOffset = BlockOfs[4] + 0x1B0;                      break;                  case GameVersion.FRLG:                      OFS_PCItem = BlockOfs[1] + 0x0298;                      OFS_PouchHeldItem = BlockOfs[1] + 0x0310;                      OFS_PouchKeyItem = BlockOfs[1] + 0x03B8;                      OFS_PouchBalls = BlockOfs[1] + 0x0430;                      OFS_PouchTMHM = BlockOfs[1] + 0x0464;                      OFS_PouchBerry = BlockOfs[1] + 0x054C;                      EventFlag = BlockOfs[1] + 0xEE0;                      EventConst = BlockOfs[2] + 0x80;                      DaycareOffset = BlockOfs[4] + 0x100;                      break;                  default:                      throw new ArgumentException(nameof(Version));              }
Magic Number,PKHeX.Core,SAV3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV3.cs,Initialize,The following statement contains a magic number: switch (Version)              {                  case GameVersion.RS:                      OFS_PCItem = BlockOfs[1] + 0x0498;                      OFS_PouchHeldItem = BlockOfs[1] + 0x0560;                      OFS_PouchKeyItem = BlockOfs[1] + 0x05B0;                      OFS_PouchBalls = BlockOfs[1] + 0x0600;                      OFS_PouchTMHM = BlockOfs[1] + 0x0640;                      OFS_PouchBerry = BlockOfs[1] + 0x0740;                      EventFlag = BlockOfs[2] + 0x2A0;                      EventConst = EventFlag + (EventFlagMax / 8);                      DaycareOffset = BlockOfs[4] + 0x11C;                      break;                  case GameVersion.E:                      OFS_PCItem = BlockOfs[1] + 0x0498;                      OFS_PouchHeldItem = BlockOfs[1] + 0x0560;                      OFS_PouchKeyItem = BlockOfs[1] + 0x05D8;                      OFS_PouchBalls = BlockOfs[1] + 0x0650;                      OFS_PouchTMHM = BlockOfs[1] + 0x0690;                      OFS_PouchBerry = BlockOfs[1] + 0x0790;                      EventFlag = BlockOfs[2] + 0x2F0;                      EventConst = EventFlag + (EventFlagMax / 8);                      DaycareOffset = BlockOfs[4] + 0x1B0;                      break;                  case GameVersion.FRLG:                      OFS_PCItem = BlockOfs[1] + 0x0298;                      OFS_PouchHeldItem = BlockOfs[1] + 0x0310;                      OFS_PouchKeyItem = BlockOfs[1] + 0x03B8;                      OFS_PouchBalls = BlockOfs[1] + 0x0430;                      OFS_PouchTMHM = BlockOfs[1] + 0x0464;                      OFS_PouchBerry = BlockOfs[1] + 0x054C;                      EventFlag = BlockOfs[1] + 0xEE0;                      EventConst = BlockOfs[2] + 0x80;                      DaycareOffset = BlockOfs[4] + 0x100;                      break;                  default:                      throw new ArgumentException(nameof(Version));              }
Magic Number,PKHeX.Core,SAV3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV3.cs,GetFinalData,The following statement contains a magic number: Array.Copy(Data' Box + ((i - 5) * 0xF80)' Data' (blockIndex * SIZE_BLOCK) + ABO' chunkLength[i]);
Magic Number,PKHeX.Core,SAV3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV3.cs,GetEventFlag,The following statement contains a magic number: start = BlockOfs[2];
Magic Number,PKHeX.Core,SAV3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV3.cs,GetEventFlag,The following statement contains a magic number: return GetFlag(start + (flagNumber >> 3)' flagNumber & 7);
Magic Number,PKHeX.Core,SAV3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV3.cs,GetEventFlag,The following statement contains a magic number: return GetFlag(start + (flagNumber >> 3)' flagNumber & 7);
Magic Number,PKHeX.Core,SAV3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV3.cs,SetEventFlag,The following statement contains a magic number: start = BlockOfs[2];
Magic Number,PKHeX.Core,SAV3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV3.cs,SetEventFlag,The following statement contains a magic number: SetFlag(start + (flagNumber >> 3)' flagNumber & 7' value);
Magic Number,PKHeX.Core,SAV3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV3.cs,SetEventFlag,The following statement contains a magic number: SetFlag(start + (flagNumber >> 3)' flagNumber & 7' value);
Magic Number,PKHeX.Core,SAV3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV3.cs,GetDaycareEXPOffset,The following statement contains a magic number: return GetDaycareSlotOffset(0' 2) + (2 * 0x38) + (4 * slot);
Magic Number,PKHeX.Core,SAV3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV3.cs,GetDaycareEXPOffset,The following statement contains a magic number: return GetDaycareSlotOffset(0' 2) + (2 * 0x38) + (4 * slot);
Magic Number,PKHeX.Core,SAV3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV3.cs,GetDaycareEXPOffset,The following statement contains a magic number: return GetDaycareSlotOffset(0' 2) + (2 * 0x38) + (4 * slot);
Magic Number,PKHeX.Core,SAV3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV3.cs,GetDaycareEXPOffset,The following statement contains a magic number: return GetDaycareSlotOffset(0' slot + 1) - 4;
Magic Number,PKHeX.Core,SAV3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV3.cs,GetDaycareRNGSeed,The following statement contains a magic number: return BitConverter.ToUInt32(Data' GetDaycareSlotOffset(0' 2)).ToString("X8");
Magic Number,PKHeX.Core,SAV3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV3.cs,GetDaycareRNGSeed,The following statement contains a magic number: return BitConverter.ToUInt16(Data' GetDaycareEXPOffset(2)).ToString("X4");
Magic Number,PKHeX.Core,SAV3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV3.cs,SetDaycareRNGSeed,The following statement contains a magic number: BitConverter.GetBytes(val).CopyTo(Data' GetDaycareSlotOffset(0' 2));
Magic Number,PKHeX.Core,SAV3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV3.cs,SetDaycareRNGSeed,The following statement contains a magic number: BitConverter.GetBytes(val).CopyTo(Data' GetDaycareEXPOffset(2));
Magic Number,PKHeX.Core,SAV3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV3.cs,GetBoxOffset,The following statement contains a magic number: return Box + 4 + (SIZE_STORED * box * 30);
Magic Number,PKHeX.Core,SAV3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV3.cs,GetBoxOffset,The following statement contains a magic number: return Box + 4 + (SIZE_STORED * box * 30);
Magic Number,PKHeX.Core,SAV3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV3.cs,GetBoxName,The following statement contains a magic number: return StringConverter3.GetString3(Data' offset + (box * 9)' 9' Japanese);
Magic Number,PKHeX.Core,SAV3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV3.cs,GetBoxName,The following statement contains a magic number: return StringConverter3.GetString3(Data' offset + (box * 9)' 9' Japanese);
Magic Number,PKHeX.Core,SAV3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV3.cs,SetBoxName,The following statement contains a magic number: SetString(value' 8).CopyTo(Data' offset + (box * 9));
Magic Number,PKHeX.Core,SAV3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV3.cs,SetBoxName,The following statement contains a magic number: SetString(value' 8).CopyTo(Data' offset + (box * 9));
Magic Number,PKHeX.Core,SAV3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV3.cs,GetCaught,The following statement contains a magic number: int ofs = bit >> 3;
Magic Number,PKHeX.Core,SAV3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV3.cs,GetCaught,The following statement contains a magic number: return GetFlag(caughtOffset + ofs' bit & 7);
Magic Number,PKHeX.Core,SAV3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV3.cs,SetCaught,The following statement contains a magic number: int ofs = bit >> 3;
Magic Number,PKHeX.Core,SAV3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV3.cs,SetCaught,The following statement contains a magic number: SetFlag(caughtOffset + ofs' bit & 7' caught);
Magic Number,PKHeX.Core,SAV3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV3.cs,GetSeen,The following statement contains a magic number: int ofs = bit >> 3;
Magic Number,PKHeX.Core,SAV3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV3.cs,GetSeen,The following statement contains a magic number: return GetFlag(seenOffset + ofs' bit & 7);
Magic Number,PKHeX.Core,SAV3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV3.cs,SetSeen,The following statement contains a magic number: int ofs = bit >> 3;
Magic Number,PKHeX.Core,SAV3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV3.cs,SetSeen,The following statement contains a magic number: SetFlag(o + ofs' bit & 7' seen);
Magic Number,PKHeX.Core,SAV3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV3.cs,LoadEReaderBerryData,The following statement contains a magic number: byte[] data = GetData(BlockOfs[4] + OFFSET_EBERRY' SIZE_EBERRY - 4);
Magic Number,PKHeX.Core,SAV3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV3.cs,LoadEReaderBerryData,The following statement contains a magic number: byte[] data = GetData(BlockOfs[4] + OFFSET_EBERRY' SIZE_EBERRY - 4);
Magic Number,PKHeX.Core,SAV3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV3.cs,LoadEReaderBerryData,The following statement contains a magic number: i < 8
Magic Number,PKHeX.Core,SAV3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV3.cs,GetMailBlockOffset,The following statement contains a magic number: block = 3;
Magic Number,PKHeX.Core,SAV3Colosseum,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV3Colosseum.cs,Initialize,The following statement contains a magic number: i < 6
Magic Number,PKHeX.Core,SAV3Colosseum,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV3Colosseum.cs,InitializeData,The following statement contains a magic number: int SaveCounter = BigEndian.ToInt32(Data' slotOffset + 4);
Magic Number,PKHeX.Core,SAV3Colosseum,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV3Colosseum.cs,InitializeData,The following statement contains a magic number: byte[] digest = new byte[20];
Magic Number,PKHeX.Core,SAV3Colosseum,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV3Colosseum.cs,InitializeData,The following statement contains a magic number: Array.Copy(slot' SLOT_SIZE - 20' digest' 0' digest.Length);
Magic Number,PKHeX.Core,SAV3Colosseum,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV3Colosseum.cs,GetInnerData,The following statement contains a magic number: byte[] digest = Data.Slice(Data.Length - 20' 20);
Magic Number,PKHeX.Core,SAV3Colosseum,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV3Colosseum.cs,GetInnerData,The following statement contains a magic number: byte[] digest = Data.Slice(Data.Length - 20' 20);
Magic Number,PKHeX.Core,SAV3Colosseum,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV3Colosseum.cs,EncryptColosseum,The following statement contains a magic number: i < 20
Magic Number,PKHeX.Core,SAV3Colosseum,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV3Colosseum.cs,EncryptColosseum,The following statement contains a magic number: j < 20
Magic Number,PKHeX.Core,SAV3Colosseum,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV3Colosseum.cs,EncryptColosseum,The following statement contains a magic number: k = sha1.ComputeHash(d' i' 20);
Magic Number,PKHeX.Core,SAV3Colosseum,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV3Colosseum.cs,DecryptColosseum,The following statement contains a magic number: i < 20
Magic Number,PKHeX.Core,SAV3Colosseum,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV3Colosseum.cs,DecryptColosseum,The following statement contains a magic number: byte[] key = sha1.ComputeHash(d' i' 20);
Magic Number,PKHeX.Core,SAV3Colosseum,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV3Colosseum.cs,DecryptColosseum,The following statement contains a magic number: j < 20
Magic Number,PKHeX.Core,SAV3Colosseum,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV3Colosseum.cs,DecryptColosseum,The following statement contains a magic number: Array.Copy(key' k' 20);
Magic Number,PKHeX.Core,SAV3Colosseum,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV3Colosseum.cs,SetChecksums,The following statement contains a magic number: BitConverter.GetBytes(0).CopyTo(Data' 12);
Magic Number,PKHeX.Core,SAV3Colosseum,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV3Colosseum.cs,SetChecksums,The following statement contains a magic number: Array.Copy(checksum' 0' Data' Data.Length - 20' 20);
Magic Number,PKHeX.Core,SAV3Colosseum,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV3Colosseum.cs,SetChecksums,The following statement contains a magic number: Array.Copy(checksum' 0' Data' Data.Length - 20' 20);
Magic Number,PKHeX.Core,SAV3Colosseum,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV3Colosseum.cs,SetChecksums,The following statement contains a magic number: byte[] H = new byte[8];
Magic Number,PKHeX.Core,SAV3Colosseum,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV3Colosseum.cs,SetChecksums,The following statement contains a magic number: Array.Copy(checksum' 0' H' 0' 8);
Magic Number,PKHeX.Core,SAV3Colosseum,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV3Colosseum.cs,SetChecksums,The following statement contains a magic number: byte[] D = new byte[8];
Magic Number,PKHeX.Core,SAV3Colosseum,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV3Colosseum.cs,SetChecksums,The following statement contains a magic number: Array.Copy(Data' 0x18' D' 0' 8);
Magic Number,PKHeX.Core,SAV3Colosseum,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV3Colosseum.cs,SetChecksums,The following statement contains a magic number: i < 8
Magic Number,PKHeX.Core,SAV3Colosseum,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV3Colosseum.cs,SetChecksums,The following statement contains a magic number: newHC -= BigEndian.ToInt32(D' 4);
Magic Number,PKHeX.Core,SAV3Colosseum,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV3Colosseum.cs,SetChecksums,The following statement contains a magic number: BigEndian.GetBytes(newHC).CopyTo(Data' 12);
Magic Number,PKHeX.Core,SAV3Colosseum,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV3Colosseum.cs,GetBoxOffset,The following statement contains a magic number: return Box + (((30 * SIZE_STORED) + 0x14)*box) + 0x14;
Magic Number,PKHeX.Core,SAV3Colosseum,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV3Colosseum.cs,GetBoxName,The following statement contains a magic number: return GetString(Box + (0x24A4 * box)' 16);
Magic Number,PKHeX.Core,SAV3Colosseum,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV3Colosseum.cs,SetBoxName,The following statement contains a magic number: SetString(value' 8).CopyTo(Data' Box + (0x24A4 * box));
Magic Number,PKHeX.Core,SAV3Colosseum,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV3Colosseum.cs,SetPKM,The following statement contains a magic number: pk.CurrentRegion = 2;
Magic Number,PKHeX.Core,SAV3Colosseum,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV3Colosseum.cs,SetPKM,The following statement contains a magic number: pk.OriginalRegion = 2;
Magic Number,PKHeX.Core,SAV3Colosseum,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV3Colosseum.cs,GetDaycareSlotOffset,The following statement contains a magic number: return DaycareOffset + 8;
Magic Number,PKHeX.Core,SAV3GCMemoryCard,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV3GCMemoryCard.cs,GetChecksum,The following statement contains a magic number: var val = BigEndian.ToUInt16(Data' ofs + (i * 2));
Magic Number,PKHeX.Core,SAV3GCMemoryCard,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV3GCMemoryCard.cs,VerifyChecksums,The following statement contains a magic number: GetChecksum(BlockAlloc_Block' 4' 0xFFE' out csum' out csum_inv);
Magic Number,PKHeX.Core,SAV3GCMemoryCard,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV3GCMemoryCard.cs,VerifyChecksums,The following statement contains a magic number: GetChecksum(BlockAllocBackup_Block' 4' 0xFFE' out csum' out csum_inv);
Magic Number,PKHeX.Core,SAV3GCMemoryCard,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV3GCMemoryCard.cs,GetMemoryCardState,The following statement contains a magic number: string Empty_DEntry = EncodingType.GetString(RawEmpty_DEntry' 0' 4);
Magic Number,PKHeX.Core,SAV3GCMemoryCard,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV3GCMemoryCard.cs,GetMemoryCardState,The following statement contains a magic number: string GameCode = EncodingType.GetString(Data' offset' 4);
Magic Number,PKHeX.Core,SAV3GCMemoryCard,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV3GCMemoryCard.cs,GCISaveGameName,The following statement contains a magic number: string GameCode = EncodingType.GetString(Data' offset' 4);
Magic Number,PKHeX.Core,SAV3GCMemoryCard,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV3GCMemoryCard.cs,GCISaveGameName,The following statement contains a magic number: string Makercode = EncodingType.GetString(Data' offset + 0x04' 2);
Magic Number,PKHeX.Core,SAV3RSBox,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV3RSBox.cs,ReadBlocks,The following statement contains a magic number: var blocks = new BlockInfoRSBOX[2 * BLOCK_COUNT];
Magic Number,PKHeX.Core,SAV3RSBox,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV3RSBox.cs,GetBoxWallpaperOffset,The following statement contains a magic number: int offset = Box + 0x1ED19 + (box / 2);
Magic Number,PKHeX.Core,SAV3RSBox,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV3RSBox.cs,GetBoxName,The following statement contains a magic number: int lo = (30 *(box%2)) + 1;
Magic Number,PKHeX.Core,SAV3RSBox,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV3RSBox.cs,GetBoxName,The following statement contains a magic number: int lo = (30 *(box%2)) + 1;
Magic Number,PKHeX.Core,SAV3RSBox,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV3RSBox.cs,GetBoxName,The following statement contains a magic number: int hi = 30*((box % 2) + 1);
Magic Number,PKHeX.Core,SAV3RSBox,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV3RSBox.cs,GetBoxName,The following statement contains a magic number: int hi = 30*((box % 2) + 1);
Magic Number,PKHeX.Core,SAV3RSBox,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV3RSBox.cs,GetBoxName,The following statement contains a magic number: box /= 2;
Magic Number,PKHeX.Core,SAV3RSBox,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV3RSBox.cs,GetBoxName,The following statement contains a magic number: int offset = Box + 0x1EC38 + (9 * box);
Magic Number,PKHeX.Core,SAV3RSBox,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV3RSBox.cs,GetBoxName,The following statement contains a magic number: boxName += GetString(offset' 9);
Magic Number,PKHeX.Core,SAV3RSBox,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV3RSBox.cs,SetBoxName,The following statement contains a magic number: int offset = Box + 0x1EC38 + (9 * box);
Magic Number,PKHeX.Core,SAV3RSBox,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV3RSBox.cs,SetBoxName,The following statement contains a magic number: byte[] data = value == $"BOX {box + 1}" ? new byte[9] : SetString(value' 8);
Magic Number,PKHeX.Core,SAV3RSBox,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV3RSBox.cs,SetBoxName,The following statement contains a magic number: byte[] data = value == $"BOX {box + 1}" ? new byte[9] : SetString(value' 8);
Magic Number,PKHeX.Core,SAV3RSBox,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV3RSBox.cs,WriteBoxSlot,The following statement contains a magic number: BitConverter.GetBytes((ushort)pkm.SID).CopyTo(data' offset + PKX.SIZE_3STORED + 2);
Magic Number,PKHeX.Core,SAV3XD,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV3XD.cs,InitializeData,The following statement contains a magic number: int SaveCounter = BigEndian.ToInt32(Data' slotOffset + 4);
Magic Number,PKHeX.Core,SAV3XD,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV3XD.cs,InitializeData,The following statement contains a magic number: ushort[] keys = new ushort[4];
Magic Number,PKHeX.Core,SAV3XD,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV3XD.cs,InitializeData,The following statement contains a magic number: keys[i] = BigEndian.ToUInt16(slot' 8 + (i * 2));
Magic Number,PKHeX.Core,SAV3XD,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV3XD.cs,InitializeData,The following statement contains a magic number: keys[i] = BigEndian.ToUInt16(slot' 8 + (i * 2));
Magic Number,PKHeX.Core,SAV3XD,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV3XD.cs,InitializeData,The following statement contains a magic number: ushort[] subLength = new ushort[16];
Magic Number,PKHeX.Core,SAV3XD,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV3XD.cs,InitializeData,The following statement contains a magic number: subLength[i] = BigEndian.ToUInt16(Data' 0x20 + (2 * i));
Magic Number,PKHeX.Core,SAV3XD,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV3XD.cs,InitializeData,The following statement contains a magic number: subOffsets[i] = BigEndian.ToUInt16(Data' 0x40 + (4 * i)) | BigEndian.ToUInt16(Data' 0x40 + (4 * i) + 2) << 16;
Magic Number,PKHeX.Core,SAV3XD,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV3XD.cs,InitializeData,The following statement contains a magic number: subOffsets[i] = BigEndian.ToUInt16(Data' 0x40 + (4 * i)) | BigEndian.ToUInt16(Data' 0x40 + (4 * i) + 2) << 16;
Magic Number,PKHeX.Core,SAV3XD,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV3XD.cs,InitializeData,The following statement contains a magic number: subOffsets[i] = BigEndian.ToUInt16(Data' 0x40 + (4 * i)) | BigEndian.ToUInt16(Data' 0x40 + (4 * i) + 2) << 16;
Magic Number,PKHeX.Core,SAV3XD,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV3XD.cs,InitializeData,The following statement contains a magic number: subOffsets[i] = BigEndian.ToUInt16(Data' 0x40 + (4 * i)) | BigEndian.ToUInt16(Data' 0x40 + (4 * i) + 2) << 16;
Magic Number,PKHeX.Core,SAV3XD,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV3XD.cs,InitializeData,The following statement contains a magic number: i < 16
Magic Number,PKHeX.Core,SAV3XD,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV3XD.cs,InitializeData,The following statement contains a magic number: Box = subOffsets[2] + 0xA8;
Magic Number,PKHeX.Core,SAV3XD,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV3XD.cs,InitializeData,The following statement contains a magic number: DaycareOffset = subOffsets[4] + 0xA8;
Magic Number,PKHeX.Core,SAV3XD,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV3XD.cs,InitializeData,The following statement contains a magic number: Memo = subOffsets[5] + 0xA8;
Magic Number,PKHeX.Core,SAV3XD,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV3XD.cs,InitializeData,The following statement contains a magic number: Shadow = subOffsets[7] + 0xA8;
Magic Number,PKHeX.Core,SAV3XD,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV3XD.cs,InitializeData,The following statement contains a magic number: info = new ShadowInfoTableXD(Data.Slice(Shadow' subLength[7]));
Magic Number,PKHeX.Core,SAV3XD,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV3XD.cs,Initialize,The following statement contains a magic number: i < 6
Magic Number,PKHeX.Core,SAV3XD,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV3XD.cs,GetInnerData,The following statement contains a magic number: ushort[] keys = new ushort[4];
Magic Number,PKHeX.Core,SAV3XD,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV3XD.cs,GetInnerData,The following statement contains a magic number: keys[i] = BigEndian.ToUInt16(Data' 8 + (i * 2));
Magic Number,PKHeX.Core,SAV3XD,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV3XD.cs,GetInnerData,The following statement contains a magic number: keys[i] = BigEndian.ToUInt16(Data' 8 + (i * 2));
Magic Number,PKHeX.Core,SAV3XD,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV3XD.cs,SetChecksums,The following statement contains a magic number: i < 8
Magic Number,PKHeX.Core,SAV3XD,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV3XD.cs,SetChecksums,The following statement contains a magic number: new byte[16].CopyTo(data' 0x10);
Magic Number,PKHeX.Core,SAV3XD,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV3XD.cs,SetChecksums,The following statement contains a magic number: uint[] checksum = new uint[4];
Magic Number,PKHeX.Core,SAV3XD,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV3XD.cs,SetChecksums,The following statement contains a magic number: int dt = 8;
Magic Number,PKHeX.Core,SAV3XD,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV3XD.cs,SetChecksums,The following statement contains a magic number: i < 4
Magic Number,PKHeX.Core,SAV3XD,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV3XD.cs,SetChecksums,The following statement contains a magic number: ushort[] newchks = new ushort[8];
Magic Number,PKHeX.Core,SAV3XD,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV3XD.cs,SetChecksums,The following statement contains a magic number: newchks[i*2] = (ushort)(checksum[i] >> 16);
Magic Number,PKHeX.Core,SAV3XD,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV3XD.cs,SetChecksums,The following statement contains a magic number: newchks[i*2] = (ushort)(checksum[i] >> 16);
Magic Number,PKHeX.Core,SAV3XD,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV3XD.cs,SetChecksums,The following statement contains a magic number: newchks[(i * 2) + 1] = (ushort)checksum[i];
Magic Number,PKHeX.Core,SAV3XD,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV3XD.cs,SetChecksums,The following statement contains a magic number: i < 4
Magic Number,PKHeX.Core,SAV3XD,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV3XD.cs,SetChecksums,The following statement contains a magic number: BigEndian.GetBytes(newchks[i]).CopyTo(data' 0x10 + (2 * i));
Magic Number,PKHeX.Core,SAV3XD,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV3XD.cs,SetBoxName,The following statement contains a magic number: value = value.Substring(0' 8);
Magic Number,PKHeX.Core,SAV3XD,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV3XD.cs,SetBoxName,The following statement contains a magic number: value.Length > 8
Magic Number,PKHeX.Core,SAV3XD,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV3XD.cs,SetBoxName,The following statement contains a magic number: SetString(value' 8).CopyTo(Data' GetBoxInfoOffset(box));
Magic Number,PKHeX.Core,SAV3XD,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV3XD.cs,SetPKM,The following statement contains a magic number: pk.CurrentRegion = 2;
Magic Number,PKHeX.Core,SAV3XD,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV3XD.cs,SetPKM,The following statement contains a magic number: pk.OriginalRegion = 2;
Magic Number,PKHeX.Core,SAV3XD,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV3XD.cs,GetDaycareSlotOffset,The following statement contains a magic number: return DaycareOffset + 8;
Magic Number,PKHeX.Core,SAV4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV4.cs,SetChecksums,The following statement contains a magic number: BitConverter.GetBytes(CalcBlockChecksum(General)).CopyTo(General' General.Length - 2);
Magic Number,PKHeX.Core,SAV4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV4.cs,SetChecksums,The following statement contains a magic number: BitConverter.GetBytes(CalcBlockChecksum(Storage)).CopyTo(Storage' Storage.Length - 2);
Magic Number,PKHeX.Core,SAV4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV4.cs,GetActiveGeneralBlock,The following statement contains a magic number: Data.IsRangeAll((byte)0' start' 10) || Data.IsRangeAll((byte)0xFF' start' 10)
Magic Number,PKHeX.Core,SAV4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV4.cs,GetActiveGeneralBlock,The following statement contains a magic number: Data.IsRangeAll((byte)0' start' 10) || Data.IsRangeAll((byte)0xFF' start' 10)
Magic Number,PKHeX.Core,SAV4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV4.cs,GetActiveGeneralBlock,The following statement contains a magic number: Data.IsRangeAll((byte)0' start' 10) || Data.IsRangeAll((byte)0xFF' start' 10)
Magic Number,PKHeX.Core,SAV4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV4.cs,GetActiveGeneralBlock,The following statement contains a magic number: Data.IsRangeAll((byte)0' start' 10) || Data.IsRangeAll((byte)0xFF' start' 10)
Magic Number,PKHeX.Core,SAV4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV4.cs,GetActiveStorageBlock,The following statement contains a magic number: Data.IsRangeAll((byte)0' start' 10) || Data.IsRangeAll((byte)0xFF' start' 10)
Magic Number,PKHeX.Core,SAV4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV4.cs,GetActiveStorageBlock,The following statement contains a magic number: Data.IsRangeAll((byte)0' start' 10) || Data.IsRangeAll((byte)0xFF' start' 10)
Magic Number,PKHeX.Core,SAV4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV4.cs,GetActiveStorageBlock,The following statement contains a magic number: Data.IsRangeAll((byte)0' start' 10) || Data.IsRangeAll((byte)0xFF' start' 10)
Magic Number,PKHeX.Core,SAV4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV4.cs,GetActiveStorageBlock,The following statement contains a magic number: Data.IsRangeAll((byte)0' start' 10) || Data.IsRangeAll((byte)0xFF' start' 10)
Magic Number,PKHeX.Core,SAV4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV4.cs,GetDaycareEXP,The following statement contains a magic number: int ofs = DaycareOffset + ((slot+1)*SIZE_PARTY) - 4;
Magic Number,PKHeX.Core,SAV4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV4.cs,SetDaycareEXP,The following statement contains a magic number: int ofs = DaycareOffset + ((slot+1)*SIZE_PARTY) - 4;
Magic Number,PKHeX.Core,SAV4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV4.cs,IsMysteryGiftAvailable,The following statement contains a magic number: i < 8
Magic Number,PKHeX.Core,SAV4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV4.cs,IsMysteryGiftAvailable,The following statement contains a magic number: i < 11
Magic Number,PKHeX.Core,SAV4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV4.cs,MatchMysteryGifts,The following statement contains a magic number: int[] cardMatch = new int[8];
Magic Number,PKHeX.Core,SAV4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV4.cs,MatchMysteryGifts,The following statement contains a magic number: cardMatch[i] = pgt.Slot = 3;
Magic Number,PKHeX.Core,SAV4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV4.cs,MatchMysteryGifts,The following statement contains a magic number: !(value[8 + j] is PCD pcd)
Magic Number,PKHeX.Core,SAV4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV4.cs,MatchMysteryGifts,The following statement contains a magic number: j < 3
Magic Number,PKHeX.Core,SAV4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV4.cs,MatchMysteryGifts,The following statement contains a magic number: i < 8
Magic Number,PKHeX.Core,SAV4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV4.cs,SetDex,The following statement contains a magic number: byte mask = (byte)(1 << (bit & 7));
Magic Number,PKHeX.Core,SAV4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV4.cs,SetDex,The following statement contains a magic number: int ofs = PokeDex + (bit >> 3) + 0x4;
Magic Number,PKHeX.Core,SAV4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV4.cs,SetDex,The following statement contains a magic number: switch (gr)                  {                      case 255: // Genderless                      case 0: // Male Only                          General[ofs + (brSize * 2)] &= (byte)~mask; // unset                          General[ofs + (brSize * 3)] &= (byte)~mask; // unset                          break;                      case 254: // Female Only                          General[ofs + (brSize * 2)] |= mask;                          General[ofs + (brSize * 3)] |= mask;                          break;                      default: // Male or Female                          bool m = (General[ofs + (brSize * 2)] & mask) != 0;                          bool f = (General[ofs + (brSize * 3)] & mask) != 0;                          if (m || f) // bit already set?                              break;                          int gender = pkm.Gender & 1;                          General[ofs + (brSize * 2)] &= (byte)~mask; // unset                          General[ofs + (brSize * 3)] &= (byte)~mask; // unset                          gender ^= 1; // Set OTHER gender seen bit so it appears second                          General[ofs + (brSize * (2 + gender))] |= mask;                          break;                  }
Magic Number,PKHeX.Core,SAV4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV4.cs,SetDex,The following statement contains a magic number: switch (gr)                  {                      case 255: // Genderless                      case 0: // Male Only                          General[ofs + (brSize * 2)] &= (byte)~mask; // unset                          General[ofs + (brSize * 3)] &= (byte)~mask; // unset                          break;                      case 254: // Female Only                          General[ofs + (brSize * 2)] |= mask;                          General[ofs + (brSize * 3)] |= mask;                          break;                      default: // Male or Female                          bool m = (General[ofs + (brSize * 2)] & mask) != 0;                          bool f = (General[ofs + (brSize * 3)] & mask) != 0;                          if (m || f) // bit already set?                              break;                          int gender = pkm.Gender & 1;                          General[ofs + (brSize * 2)] &= (byte)~mask; // unset                          General[ofs + (brSize * 3)] &= (byte)~mask; // unset                          gender ^= 1; // Set OTHER gender seen bit so it appears second                          General[ofs + (brSize * (2 + gender))] |= mask;                          break;                  }
Magic Number,PKHeX.Core,SAV4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV4.cs,SetDex,The following statement contains a magic number: switch (gr)                  {                      case 255: // Genderless                      case 0: // Male Only                          General[ofs + (brSize * 2)] &= (byte)~mask; // unset                          General[ofs + (brSize * 3)] &= (byte)~mask; // unset                          break;                      case 254: // Female Only                          General[ofs + (brSize * 2)] |= mask;                          General[ofs + (brSize * 3)] |= mask;                          break;                      default: // Male or Female                          bool m = (General[ofs + (brSize * 2)] & mask) != 0;                          bool f = (General[ofs + (brSize * 3)] & mask) != 0;                          if (m || f) // bit already set?                              break;                          int gender = pkm.Gender & 1;                          General[ofs + (brSize * 2)] &= (byte)~mask; // unset                          General[ofs + (brSize * 3)] &= (byte)~mask; // unset                          gender ^= 1; // Set OTHER gender seen bit so it appears second                          General[ofs + (brSize * (2 + gender))] |= mask;                          break;                  }
Magic Number,PKHeX.Core,SAV4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV4.cs,SetDex,The following statement contains a magic number: switch (gr)                  {                      case 255: // Genderless                      case 0: // Male Only                          General[ofs + (brSize * 2)] &= (byte)~mask; // unset                          General[ofs + (brSize * 3)] &= (byte)~mask; // unset                          break;                      case 254: // Female Only                          General[ofs + (brSize * 2)] |= mask;                          General[ofs + (brSize * 3)] |= mask;                          break;                      default: // Male or Female                          bool m = (General[ofs + (brSize * 2)] & mask) != 0;                          bool f = (General[ofs + (brSize * 3)] & mask) != 0;                          if (m || f) // bit already set?                              break;                          int gender = pkm.Gender & 1;                          General[ofs + (brSize * 2)] &= (byte)~mask; // unset                          General[ofs + (brSize * 3)] &= (byte)~mask; // unset                          gender ^= 1; // Set OTHER gender seen bit so it appears second                          General[ofs + (brSize * (2 + gender))] |= mask;                          break;                  }
Magic Number,PKHeX.Core,SAV4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV4.cs,SetDex,The following statement contains a magic number: switch (gr)                  {                      case 255: // Genderless                      case 0: // Male Only                          General[ofs + (brSize * 2)] &= (byte)~mask; // unset                          General[ofs + (brSize * 3)] &= (byte)~mask; // unset                          break;                      case 254: // Female Only                          General[ofs + (brSize * 2)] |= mask;                          General[ofs + (brSize * 3)] |= mask;                          break;                      default: // Male or Female                          bool m = (General[ofs + (brSize * 2)] & mask) != 0;                          bool f = (General[ofs + (brSize * 3)] & mask) != 0;                          if (m || f) // bit already set?                              break;                          int gender = pkm.Gender & 1;                          General[ofs + (brSize * 2)] &= (byte)~mask; // unset                          General[ofs + (brSize * 3)] &= (byte)~mask; // unset                          gender ^= 1; // Set OTHER gender seen bit so it appears second                          General[ofs + (brSize * (2 + gender))] |= mask;                          break;                  }
Magic Number,PKHeX.Core,SAV4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV4.cs,SetDex,The following statement contains a magic number: switch (gr)                  {                      case 255: // Genderless                      case 0: // Male Only                          General[ofs + (brSize * 2)] &= (byte)~mask; // unset                          General[ofs + (brSize * 3)] &= (byte)~mask; // unset                          break;                      case 254: // Female Only                          General[ofs + (brSize * 2)] |= mask;                          General[ofs + (brSize * 3)] |= mask;                          break;                      default: // Male or Female                          bool m = (General[ofs + (brSize * 2)] & mask) != 0;                          bool f = (General[ofs + (brSize * 3)] & mask) != 0;                          if (m || f) // bit already set?                              break;                          int gender = pkm.Gender & 1;                          General[ofs + (brSize * 2)] &= (byte)~mask; // unset                          General[ofs + (brSize * 3)] &= (byte)~mask; // unset                          gender ^= 1; // Set OTHER gender seen bit so it appears second                          General[ofs + (brSize * (2 + gender))] |= mask;                          break;                  }
Magic Number,PKHeX.Core,SAV4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV4.cs,SetDex,The following statement contains a magic number: switch (gr)                  {                      case 255: // Genderless                      case 0: // Male Only                          General[ofs + (brSize * 2)] &= (byte)~mask; // unset                          General[ofs + (brSize * 3)] &= (byte)~mask; // unset                          break;                      case 254: // Female Only                          General[ofs + (brSize * 2)] |= mask;                          General[ofs + (brSize * 3)] |= mask;                          break;                      default: // Male or Female                          bool m = (General[ofs + (brSize * 2)] & mask) != 0;                          bool f = (General[ofs + (brSize * 3)] & mask) != 0;                          if (m || f) // bit already set?                              break;                          int gender = pkm.Gender & 1;                          General[ofs + (brSize * 2)] &= (byte)~mask; // unset                          General[ofs + (brSize * 3)] &= (byte)~mask; // unset                          gender ^= 1; // Set OTHER gender seen bit so it appears second                          General[ofs + (brSize * (2 + gender))] |= mask;                          break;                  }
Magic Number,PKHeX.Core,SAV4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV4.cs,SetDex,The following statement contains a magic number: switch (gr)                  {                      case 255: // Genderless                      case 0: // Male Only                          General[ofs + (brSize * 2)] &= (byte)~mask; // unset                          General[ofs + (brSize * 3)] &= (byte)~mask; // unset                          break;                      case 254: // Female Only                          General[ofs + (brSize * 2)] |= mask;                          General[ofs + (brSize * 3)] |= mask;                          break;                      default: // Male or Female                          bool m = (General[ofs + (brSize * 2)] & mask) != 0;                          bool f = (General[ofs + (brSize * 3)] & mask) != 0;                          if (m || f) // bit already set?                              break;                          int gender = pkm.Gender & 1;                          General[ofs + (brSize * 2)] &= (byte)~mask; // unset                          General[ofs + (brSize * 3)] &= (byte)~mask; // unset                          gender ^= 1; // Set OTHER gender seen bit so it appears second                          General[ofs + (brSize * (2 + gender))] |= mask;                          break;                  }
Magic Number,PKHeX.Core,SAV4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV4.cs,SetDex,The following statement contains a magic number: switch (gr)                  {                      case 255: // Genderless                      case 0: // Male Only                          General[ofs + (brSize * 2)] &= (byte)~mask; // unset                          General[ofs + (brSize * 3)] &= (byte)~mask; // unset                          break;                      case 254: // Female Only                          General[ofs + (brSize * 2)] |= mask;                          General[ofs + (brSize * 3)] |= mask;                          break;                      default: // Male or Female                          bool m = (General[ofs + (brSize * 2)] & mask) != 0;                          bool f = (General[ofs + (brSize * 3)] & mask) != 0;                          if (m || f) // bit already set?                              break;                          int gender = pkm.Gender & 1;                          General[ofs + (brSize * 2)] &= (byte)~mask; // unset                          General[ofs + (brSize * 3)] &= (byte)~mask; // unset                          gender ^= 1; // Set OTHER gender seen bit so it appears second                          General[ofs + (brSize * (2 + gender))] |= mask;                          break;                  }
Magic Number,PKHeX.Core,SAV4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV4.cs,SetDex,The following statement contains a magic number: switch (gr)                  {                      case 255: // Genderless                      case 0: // Male Only                          General[ofs + (brSize * 2)] &= (byte)~mask; // unset                          General[ofs + (brSize * 3)] &= (byte)~mask; // unset                          break;                      case 254: // Female Only                          General[ofs + (brSize * 2)] |= mask;                          General[ofs + (brSize * 3)] |= mask;                          break;                      default: // Male or Female                          bool m = (General[ofs + (brSize * 2)] & mask) != 0;                          bool f = (General[ofs + (brSize * 3)] & mask) != 0;                          if (m || f) // bit already set?                              break;                          int gender = pkm.Gender & 1;                          General[ofs + (brSize * 2)] &= (byte)~mask; // unset                          General[ofs + (brSize * 3)] &= (byte)~mask; // unset                          gender ^= 1; // Set OTHER gender seen bit so it appears second                          General[ofs + (brSize * (2 + gender))] |= mask;                          break;                  }
Magic Number,PKHeX.Core,SAV4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV4.cs,SetDex,The following statement contains a magic number: switch (gr)                  {                      case 255: // Genderless                      case 0: // Male Only                          General[ofs + (brSize * 2)] &= (byte)~mask; // unset                          General[ofs + (brSize * 3)] &= (byte)~mask; // unset                          break;                      case 254: // Female Only                          General[ofs + (brSize * 2)] |= mask;                          General[ofs + (brSize * 3)] |= mask;                          break;                      default: // Male or Female                          bool m = (General[ofs + (brSize * 2)] & mask) != 0;                          bool f = (General[ofs + (brSize * 3)] & mask) != 0;                          if (m || f) // bit already set?                              break;                          int gender = pkm.Gender & 1;                          General[ofs + (brSize * 2)] &= (byte)~mask; // unset                          General[ofs + (brSize * 3)] &= (byte)~mask; // unset                          gender ^= 1; // Set OTHER gender seen bit so it appears second                          General[ofs + (brSize * (2 + gender))] |= mask;                          break;                  }
Magic Number,PKHeX.Core,SAV4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV4.cs,SetDex,The following statement contains a magic number: int FormOffset1 = PokeDex + 4 + (brSize * 4) + 4;
Magic Number,PKHeX.Core,SAV4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV4.cs,SetDex,The following statement contains a magic number: int FormOffset1 = PokeDex + 4 + (brSize * 4) + 4;
Magic Number,PKHeX.Core,SAV4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV4.cs,SetDex,The following statement contains a magic number: int FormOffset1 = PokeDex + 4 + (brSize * 4) + 4;
Magic Number,PKHeX.Core,SAV4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV4.cs,SetDex,The following statement contains a magic number: byte val = General[FormOffset1 + 4 + i];
Magic Number,PKHeX.Core,SAV4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV4.cs,SetDex,The following statement contains a magic number: General[FormOffset1 + 4 + i] = (byte)pkm.AltForm;
Magic Number,PKHeX.Core,SAV4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV4.cs,SetDex,The following statement contains a magic number: pkm.Species == 201
Magic Number,PKHeX.Core,SAV4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV4.cs,GetGen4LanguageBitIndex,The following statement contains a magic number: switch (lang) // invert ITA/GER              {                  case 3: return 4;                  case 4: return 3;              }
Magic Number,PKHeX.Core,SAV4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV4.cs,GetGen4LanguageBitIndex,The following statement contains a magic number: switch (lang) // invert ITA/GER              {                  case 3: return 4;                  case 4: return 3;              }
Magic Number,PKHeX.Core,SAV4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV4.cs,GetGen4LanguageBitIndex,The following statement contains a magic number: switch (lang) // invert ITA/GER              {                  case 3: return 4;                  case 4: return 3;              }
Magic Number,PKHeX.Core,SAV4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV4.cs,GetGen4LanguageBitIndex,The following statement contains a magic number: switch (lang) // invert ITA/GER              {                  case 3: return 4;                  case 4: return 3;              }
Magic Number,PKHeX.Core,SAV4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV4.cs,GetGen4LanguageBitIndex,The following statement contains a magic number: lang > 5
Magic Number,PKHeX.Core,SAV4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV4.cs,GetCaught,The following statement contains a magic number: int bd = bit >> 3;
Magic Number,PKHeX.Core,SAV4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV4.cs,GetCaught,The following statement contains a magic number: int bm = bit & 7;
Magic Number,PKHeX.Core,SAV4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV4.cs,GetSeen,The following statement contains a magic number: int bd = bit >> 3;
Magic Number,PKHeX.Core,SAV4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV4.cs,GetSeen,The following statement contains a magic number: int bm = bit & 7;
Magic Number,PKHeX.Core,SAV4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV4.cs,GetForms,The following statement contains a magic number: uint val = (uint) (General[PokeDex + 0x4 + (1 * brSize) - 1] | General[PokeDex + 0x4 + (2 * brSize) - 1] << 8);
Magic Number,PKHeX.Core,SAV4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV4.cs,GetForms,The following statement contains a magic number: uint val = (uint) (General[PokeDex + 0x4 + (1 * brSize) - 1] | General[PokeDex + 0x4 + (2 * brSize) - 1] << 8);
Magic Number,PKHeX.Core,SAV4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV4.cs,GetForms,The following statement contains a magic number: return GetDexFormValues(val' 4' 4);
Magic Number,PKHeX.Core,SAV4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV4.cs,GetForms,The following statement contains a magic number: return GetDexFormValues(val' 4' 4);
Magic Number,PKHeX.Core,SAV4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV4.cs,GetForms,The following statement contains a magic number: species == 386
Magic Number,PKHeX.Core,SAV4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV4.cs,GetForms,The following statement contains a magic number: int FormOffset1 = PokeDex + 4 + (4 * brSize) + 4;
Magic Number,PKHeX.Core,SAV4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV4.cs,GetForms,The following statement contains a magic number: int FormOffset1 = PokeDex + 4 + (4 * brSize) + 4;
Magic Number,PKHeX.Core,SAV4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV4.cs,GetForms,The following statement contains a magic number: int FormOffset1 = PokeDex + 4 + (4 * brSize) + 4;
Magic Number,PKHeX.Core,SAV4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV4.cs,GetForms,The following statement contains a magic number: switch (species)              {                  case (int)Species.Shellos: // Shellos                      return GetDexFormValues(General[FormOffset1 + 0]' 1' 2);                  case (int)Species.Gastrodon: // Gastrodon                      return GetDexFormValues(General[FormOffset1 + 1]' 1' 2);                  case (int)Species.Burmy: // Burmy                      return GetDexFormValues(General[FormOffset1 + 2]' 2' 3);                  case (int)Species.Wormadam: // Wormadam                      return GetDexFormValues(General[FormOffset1 + 3]' 2' 3);                  case (int)Species.Unown: // Unown                      return General.Slice(FormOffset1 + 4' 0x1C).Select(i => (int)i).ToArray();              }
Magic Number,PKHeX.Core,SAV4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV4.cs,GetForms,The following statement contains a magic number: switch (species)              {                  case (int)Species.Shellos: // Shellos                      return GetDexFormValues(General[FormOffset1 + 0]' 1' 2);                  case (int)Species.Gastrodon: // Gastrodon                      return GetDexFormValues(General[FormOffset1 + 1]' 1' 2);                  case (int)Species.Burmy: // Burmy                      return GetDexFormValues(General[FormOffset1 + 2]' 2' 3);                  case (int)Species.Wormadam: // Wormadam                      return GetDexFormValues(General[FormOffset1 + 3]' 2' 3);                  case (int)Species.Unown: // Unown                      return General.Slice(FormOffset1 + 4' 0x1C).Select(i => (int)i).ToArray();              }
Magic Number,PKHeX.Core,SAV4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV4.cs,GetForms,The following statement contains a magic number: switch (species)              {                  case (int)Species.Shellos: // Shellos                      return GetDexFormValues(General[FormOffset1 + 0]' 1' 2);                  case (int)Species.Gastrodon: // Gastrodon                      return GetDexFormValues(General[FormOffset1 + 1]' 1' 2);                  case (int)Species.Burmy: // Burmy                      return GetDexFormValues(General[FormOffset1 + 2]' 2' 3);                  case (int)Species.Wormadam: // Wormadam                      return GetDexFormValues(General[FormOffset1 + 3]' 2' 3);                  case (int)Species.Unown: // Unown                      return General.Slice(FormOffset1 + 4' 0x1C).Select(i => (int)i).ToArray();              }
Magic Number,PKHeX.Core,SAV4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV4.cs,GetForms,The following statement contains a magic number: switch (species)              {                  case (int)Species.Shellos: // Shellos                      return GetDexFormValues(General[FormOffset1 + 0]' 1' 2);                  case (int)Species.Gastrodon: // Gastrodon                      return GetDexFormValues(General[FormOffset1 + 1]' 1' 2);                  case (int)Species.Burmy: // Burmy                      return GetDexFormValues(General[FormOffset1 + 2]' 2' 3);                  case (int)Species.Wormadam: // Wormadam                      return GetDexFormValues(General[FormOffset1 + 3]' 2' 3);                  case (int)Species.Unown: // Unown                      return General.Slice(FormOffset1 + 4' 0x1C).Select(i => (int)i).ToArray();              }
Magic Number,PKHeX.Core,SAV4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV4.cs,GetForms,The following statement contains a magic number: switch (species)              {                  case (int)Species.Shellos: // Shellos                      return GetDexFormValues(General[FormOffset1 + 0]' 1' 2);                  case (int)Species.Gastrodon: // Gastrodon                      return GetDexFormValues(General[FormOffset1 + 1]' 1' 2);                  case (int)Species.Burmy: // Burmy                      return GetDexFormValues(General[FormOffset1 + 2]' 2' 3);                  case (int)Species.Wormadam: // Wormadam                      return GetDexFormValues(General[FormOffset1 + 3]' 2' 3);                  case (int)Species.Unown: // Unown                      return General.Slice(FormOffset1 + 4' 0x1C).Select(i => (int)i).ToArray();              }
Magic Number,PKHeX.Core,SAV4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV4.cs,GetForms,The following statement contains a magic number: switch (species)              {                  case (int)Species.Shellos: // Shellos                      return GetDexFormValues(General[FormOffset1 + 0]' 1' 2);                  case (int)Species.Gastrodon: // Gastrodon                      return GetDexFormValues(General[FormOffset1 + 1]' 1' 2);                  case (int)Species.Burmy: // Burmy                      return GetDexFormValues(General[FormOffset1 + 2]' 2' 3);                  case (int)Species.Wormadam: // Wormadam                      return GetDexFormValues(General[FormOffset1 + 3]' 2' 3);                  case (int)Species.Unown: // Unown                      return General.Slice(FormOffset1 + 4' 0x1C).Select(i => (int)i).ToArray();              }
Magic Number,PKHeX.Core,SAV4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV4.cs,GetForms,The following statement contains a magic number: switch (species)              {                  case (int)Species.Shellos: // Shellos                      return GetDexFormValues(General[FormOffset1 + 0]' 1' 2);                  case (int)Species.Gastrodon: // Gastrodon                      return GetDexFormValues(General[FormOffset1 + 1]' 1' 2);                  case (int)Species.Burmy: // Burmy                      return GetDexFormValues(General[FormOffset1 + 2]' 2' 3);                  case (int)Species.Wormadam: // Wormadam                      return GetDexFormValues(General[FormOffset1 + 3]' 2' 3);                  case (int)Species.Unown: // Unown                      return General.Slice(FormOffset1 + 4' 0x1C).Select(i => (int)i).ToArray();              }
Magic Number,PKHeX.Core,SAV4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV4.cs,GetForms,The following statement contains a magic number: switch (species)              {                  case (int)Species.Shellos: // Shellos                      return GetDexFormValues(General[FormOffset1 + 0]' 1' 2);                  case (int)Species.Gastrodon: // Gastrodon                      return GetDexFormValues(General[FormOffset1 + 1]' 1' 2);                  case (int)Species.Burmy: // Burmy                      return GetDexFormValues(General[FormOffset1 + 2]' 2' 3);                  case (int)Species.Wormadam: // Wormadam                      return GetDexFormValues(General[FormOffset1 + 3]' 2' 3);                  case (int)Species.Unown: // Unown                      return General.Slice(FormOffset1 + 4' 0x1C).Select(i => (int)i).ToArray();              }
Magic Number,PKHeX.Core,SAV4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV4.cs,GetForms,The following statement contains a magic number: switch (species)              {                  case (int)Species.Shellos: // Shellos                      return GetDexFormValues(General[FormOffset1 + 0]' 1' 2);                  case (int)Species.Gastrodon: // Gastrodon                      return GetDexFormValues(General[FormOffset1 + 1]' 1' 2);                  case (int)Species.Burmy: // Burmy                      return GetDexFormValues(General[FormOffset1 + 2]' 2' 3);                  case (int)Species.Wormadam: // Wormadam                      return GetDexFormValues(General[FormOffset1 + 3]' 2' 3);                  case (int)Species.Unown: // Unown                      return General.Slice(FormOffset1 + 4' 0x1C).Select(i => (int)i).ToArray();              }
Magic Number,PKHeX.Core,SAV4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV4.cs,GetForms,The following statement contains a magic number: return species switch              {                  (int)Species.Rotom => GetDexFormValues(BitConverter.ToUInt32(General' FormOffset2)' 3' 6)'                  (int)Species.Shaymin => GetDexFormValues(General[FormOffset2 + 4]' 1' 2)'                  (int)Species.Giratina => GetDexFormValues(General[FormOffset2 + 5]' 1' 2)'                  (int)Species.Pichu when HGSS => GetDexFormValues(General[FormOffset2 + 6]' 2' 3)'                  _ => Array.Empty<int>()              };
Magic Number,PKHeX.Core,SAV4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV4.cs,GetForms,The following statement contains a magic number: return species switch              {                  (int)Species.Rotom => GetDexFormValues(BitConverter.ToUInt32(General' FormOffset2)' 3' 6)'                  (int)Species.Shaymin => GetDexFormValues(General[FormOffset2 + 4]' 1' 2)'                  (int)Species.Giratina => GetDexFormValues(General[FormOffset2 + 5]' 1' 2)'                  (int)Species.Pichu when HGSS => GetDexFormValues(General[FormOffset2 + 6]' 2' 3)'                  _ => Array.Empty<int>()              };
Magic Number,PKHeX.Core,SAV4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV4.cs,GetForms,The following statement contains a magic number: return species switch              {                  (int)Species.Rotom => GetDexFormValues(BitConverter.ToUInt32(General' FormOffset2)' 3' 6)'                  (int)Species.Shaymin => GetDexFormValues(General[FormOffset2 + 4]' 1' 2)'                  (int)Species.Giratina => GetDexFormValues(General[FormOffset2 + 5]' 1' 2)'                  (int)Species.Pichu when HGSS => GetDexFormValues(General[FormOffset2 + 6]' 2' 3)'                  _ => Array.Empty<int>()              };
Magic Number,PKHeX.Core,SAV4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV4.cs,GetForms,The following statement contains a magic number: return species switch              {                  (int)Species.Rotom => GetDexFormValues(BitConverter.ToUInt32(General' FormOffset2)' 3' 6)'                  (int)Species.Shaymin => GetDexFormValues(General[FormOffset2 + 4]' 1' 2)'                  (int)Species.Giratina => GetDexFormValues(General[FormOffset2 + 5]' 1' 2)'                  (int)Species.Pichu when HGSS => GetDexFormValues(General[FormOffset2 + 6]' 2' 3)'                  _ => Array.Empty<int>()              };
Magic Number,PKHeX.Core,SAV4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV4.cs,GetForms,The following statement contains a magic number: return species switch              {                  (int)Species.Rotom => GetDexFormValues(BitConverter.ToUInt32(General' FormOffset2)' 3' 6)'                  (int)Species.Shaymin => GetDexFormValues(General[FormOffset2 + 4]' 1' 2)'                  (int)Species.Giratina => GetDexFormValues(General[FormOffset2 + 5]' 1' 2)'                  (int)Species.Pichu when HGSS => GetDexFormValues(General[FormOffset2 + 6]' 2' 3)'                  _ => Array.Empty<int>()              };
Magic Number,PKHeX.Core,SAV4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV4.cs,GetForms,The following statement contains a magic number: return species switch              {                  (int)Species.Rotom => GetDexFormValues(BitConverter.ToUInt32(General' FormOffset2)' 3' 6)'                  (int)Species.Shaymin => GetDexFormValues(General[FormOffset2 + 4]' 1' 2)'                  (int)Species.Giratina => GetDexFormValues(General[FormOffset2 + 5]' 1' 2)'                  (int)Species.Pichu when HGSS => GetDexFormValues(General[FormOffset2 + 6]' 2' 3)'                  _ => Array.Empty<int>()              };
Magic Number,PKHeX.Core,SAV4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV4.cs,GetForms,The following statement contains a magic number: return species switch              {                  (int)Species.Rotom => GetDexFormValues(BitConverter.ToUInt32(General' FormOffset2)' 3' 6)'                  (int)Species.Shaymin => GetDexFormValues(General[FormOffset2 + 4]' 1' 2)'                  (int)Species.Giratina => GetDexFormValues(General[FormOffset2 + 5]' 1' 2)'                  (int)Species.Pichu when HGSS => GetDexFormValues(General[FormOffset2 + 6]' 2' 3)'                  _ => Array.Empty<int>()              };
Magic Number,PKHeX.Core,SAV4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV4.cs,GetForms,The following statement contains a magic number: return species switch              {                  (int)Species.Rotom => GetDexFormValues(BitConverter.ToUInt32(General' FormOffset2)' 3' 6)'                  (int)Species.Shaymin => GetDexFormValues(General[FormOffset2 + 4]' 1' 2)'                  (int)Species.Giratina => GetDexFormValues(General[FormOffset2 + 5]' 1' 2)'                  (int)Species.Pichu when HGSS => GetDexFormValues(General[FormOffset2 + 6]' 2' 3)'                  _ => Array.Empty<int>()              };
Magic Number,PKHeX.Core,SAV4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV4.cs,GetForms,The following statement contains a magic number: return species switch              {                  (int)Species.Rotom => GetDexFormValues(BitConverter.ToUInt32(General' FormOffset2)' 3' 6)'                  (int)Species.Shaymin => GetDexFormValues(General[FormOffset2 + 4]' 1' 2)'                  (int)Species.Giratina => GetDexFormValues(General[FormOffset2 + 5]' 1' 2)'                  (int)Species.Pichu when HGSS => GetDexFormValues(General[FormOffset2 + 6]' 2' 3)'                  _ => Array.Empty<int>()              };
Magic Number,PKHeX.Core,SAV4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV4.cs,SetForms,The following statement contains a magic number: switch (spec)              {                  case (int)Species.Deoxys: // Deoxys                      uint newval = SetDexFormValues(forms' 4' 4);                      General[PokeDex + 0x4 + (1 * brSize) - 1] = (byte) (newval & 0xFF);                      General[PokeDex + 0x4 + (2 * brSize) - 1] = (byte) ((newval >> 8) & 0xFF);                      break;              }
Magic Number,PKHeX.Core,SAV4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV4.cs,SetForms,The following statement contains a magic number: switch (spec)              {                  case (int)Species.Deoxys: // Deoxys                      uint newval = SetDexFormValues(forms' 4' 4);                      General[PokeDex + 0x4 + (1 * brSize) - 1] = (byte) (newval & 0xFF);                      General[PokeDex + 0x4 + (2 * brSize) - 1] = (byte) ((newval >> 8) & 0xFF);                      break;              }
Magic Number,PKHeX.Core,SAV4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV4.cs,SetForms,The following statement contains a magic number: switch (spec)              {                  case (int)Species.Deoxys: // Deoxys                      uint newval = SetDexFormValues(forms' 4' 4);                      General[PokeDex + 0x4 + (1 * brSize) - 1] = (byte) (newval & 0xFF);                      General[PokeDex + 0x4 + (2 * brSize) - 1] = (byte) ((newval >> 8) & 0xFF);                      break;              }
Magic Number,PKHeX.Core,SAV4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV4.cs,SetForms,The following statement contains a magic number: switch (spec)              {                  case (int)Species.Deoxys: // Deoxys                      uint newval = SetDexFormValues(forms' 4' 4);                      General[PokeDex + 0x4 + (1 * brSize) - 1] = (byte) (newval & 0xFF);                      General[PokeDex + 0x4 + (2 * brSize) - 1] = (byte) ((newval >> 8) & 0xFF);                      break;              }
Magic Number,PKHeX.Core,SAV4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV4.cs,SetForms,The following statement contains a magic number: int FormOffset1 = PokeDex + 4 + (4 * brSize) + 4;
Magic Number,PKHeX.Core,SAV4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV4.cs,SetForms,The following statement contains a magic number: int FormOffset1 = PokeDex + 4 + (4 * brSize) + 4;
Magic Number,PKHeX.Core,SAV4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV4.cs,SetForms,The following statement contains a magic number: int FormOffset1 = PokeDex + 4 + (4 * brSize) + 4;
Magic Number,PKHeX.Core,SAV4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV4.cs,SetForms,The following statement contains a magic number: switch (spec)              {                  case (int)Species.Shellos: // Shellos                      General[FormOffset1 + 0] = (byte)SetDexFormValues(forms' 1' 2);                      return;                  case (int)Species.Gastrodon: // Gastrodon                      General[FormOffset1 + 1] = (byte)SetDexFormValues(forms' 1' 2);                      return;                  case (int)Species.Burmy: // Burmy                      General[FormOffset1 + 2] = (byte)SetDexFormValues(forms' 2' 3);                      return;                  case (int)Species.Wormadam: // Wormadam                      General[FormOffset1 + 3] = (byte)SetDexFormValues(forms' 2' 3);                      return;                  case (int)Species.Unown: // Unown                      int ofs = FormOffset1 + 4;                      int len = forms.Length;                      Array.Resize(ref forms' 0x1C);                      for (int i = len; i < forms.Length; i++)                          forms[i] = 0xFF;                      Array.Copy(forms.Select(b => (byte)b).ToArray()' 0' General' ofs' forms.Length);                      return;              }
Magic Number,PKHeX.Core,SAV4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV4.cs,SetForms,The following statement contains a magic number: switch (spec)              {                  case (int)Species.Shellos: // Shellos                      General[FormOffset1 + 0] = (byte)SetDexFormValues(forms' 1' 2);                      return;                  case (int)Species.Gastrodon: // Gastrodon                      General[FormOffset1 + 1] = (byte)SetDexFormValues(forms' 1' 2);                      return;                  case (int)Species.Burmy: // Burmy                      General[FormOffset1 + 2] = (byte)SetDexFormValues(forms' 2' 3);                      return;                  case (int)Species.Wormadam: // Wormadam                      General[FormOffset1 + 3] = (byte)SetDexFormValues(forms' 2' 3);                      return;                  case (int)Species.Unown: // Unown                      int ofs = FormOffset1 + 4;                      int len = forms.Length;                      Array.Resize(ref forms' 0x1C);                      for (int i = len; i < forms.Length; i++)                          forms[i] = 0xFF;                      Array.Copy(forms.Select(b => (byte)b).ToArray()' 0' General' ofs' forms.Length);                      return;              }
Magic Number,PKHeX.Core,SAV4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV4.cs,SetForms,The following statement contains a magic number: switch (spec)              {                  case (int)Species.Shellos: // Shellos                      General[FormOffset1 + 0] = (byte)SetDexFormValues(forms' 1' 2);                      return;                  case (int)Species.Gastrodon: // Gastrodon                      General[FormOffset1 + 1] = (byte)SetDexFormValues(forms' 1' 2);                      return;                  case (int)Species.Burmy: // Burmy                      General[FormOffset1 + 2] = (byte)SetDexFormValues(forms' 2' 3);                      return;                  case (int)Species.Wormadam: // Wormadam                      General[FormOffset1 + 3] = (byte)SetDexFormValues(forms' 2' 3);                      return;                  case (int)Species.Unown: // Unown                      int ofs = FormOffset1 + 4;                      int len = forms.Length;                      Array.Resize(ref forms' 0x1C);                      for (int i = len; i < forms.Length; i++)                          forms[i] = 0xFF;                      Array.Copy(forms.Select(b => (byte)b).ToArray()' 0' General' ofs' forms.Length);                      return;              }
Magic Number,PKHeX.Core,SAV4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV4.cs,SetForms,The following statement contains a magic number: switch (spec)              {                  case (int)Species.Shellos: // Shellos                      General[FormOffset1 + 0] = (byte)SetDexFormValues(forms' 1' 2);                      return;                  case (int)Species.Gastrodon: // Gastrodon                      General[FormOffset1 + 1] = (byte)SetDexFormValues(forms' 1' 2);                      return;                  case (int)Species.Burmy: // Burmy                      General[FormOffset1 + 2] = (byte)SetDexFormValues(forms' 2' 3);                      return;                  case (int)Species.Wormadam: // Wormadam                      General[FormOffset1 + 3] = (byte)SetDexFormValues(forms' 2' 3);                      return;                  case (int)Species.Unown: // Unown                      int ofs = FormOffset1 + 4;                      int len = forms.Length;                      Array.Resize(ref forms' 0x1C);                      for (int i = len; i < forms.Length; i++)                          forms[i] = 0xFF;                      Array.Copy(forms.Select(b => (byte)b).ToArray()' 0' General' ofs' forms.Length);                      return;              }
Magic Number,PKHeX.Core,SAV4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV4.cs,SetForms,The following statement contains a magic number: switch (spec)              {                  case (int)Species.Shellos: // Shellos                      General[FormOffset1 + 0] = (byte)SetDexFormValues(forms' 1' 2);                      return;                  case (int)Species.Gastrodon: // Gastrodon                      General[FormOffset1 + 1] = (byte)SetDexFormValues(forms' 1' 2);                      return;                  case (int)Species.Burmy: // Burmy                      General[FormOffset1 + 2] = (byte)SetDexFormValues(forms' 2' 3);                      return;                  case (int)Species.Wormadam: // Wormadam                      General[FormOffset1 + 3] = (byte)SetDexFormValues(forms' 2' 3);                      return;                  case (int)Species.Unown: // Unown                      int ofs = FormOffset1 + 4;                      int len = forms.Length;                      Array.Resize(ref forms' 0x1C);                      for (int i = len; i < forms.Length; i++)                          forms[i] = 0xFF;                      Array.Copy(forms.Select(b => (byte)b).ToArray()' 0' General' ofs' forms.Length);                      return;              }
Magic Number,PKHeX.Core,SAV4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV4.cs,SetForms,The following statement contains a magic number: switch (spec)              {                  case (int)Species.Shellos: // Shellos                      General[FormOffset1 + 0] = (byte)SetDexFormValues(forms' 1' 2);                      return;                  case (int)Species.Gastrodon: // Gastrodon                      General[FormOffset1 + 1] = (byte)SetDexFormValues(forms' 1' 2);                      return;                  case (int)Species.Burmy: // Burmy                      General[FormOffset1 + 2] = (byte)SetDexFormValues(forms' 2' 3);                      return;                  case (int)Species.Wormadam: // Wormadam                      General[FormOffset1 + 3] = (byte)SetDexFormValues(forms' 2' 3);                      return;                  case (int)Species.Unown: // Unown                      int ofs = FormOffset1 + 4;                      int len = forms.Length;                      Array.Resize(ref forms' 0x1C);                      for (int i = len; i < forms.Length; i++)                          forms[i] = 0xFF;                      Array.Copy(forms.Select(b => (byte)b).ToArray()' 0' General' ofs' forms.Length);                      return;              }
Magic Number,PKHeX.Core,SAV4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV4.cs,SetForms,The following statement contains a magic number: switch (spec)              {                  case (int)Species.Shellos: // Shellos                      General[FormOffset1 + 0] = (byte)SetDexFormValues(forms' 1' 2);                      return;                  case (int)Species.Gastrodon: // Gastrodon                      General[FormOffset1 + 1] = (byte)SetDexFormValues(forms' 1' 2);                      return;                  case (int)Species.Burmy: // Burmy                      General[FormOffset1 + 2] = (byte)SetDexFormValues(forms' 2' 3);                      return;                  case (int)Species.Wormadam: // Wormadam                      General[FormOffset1 + 3] = (byte)SetDexFormValues(forms' 2' 3);                      return;                  case (int)Species.Unown: // Unown                      int ofs = FormOffset1 + 4;                      int len = forms.Length;                      Array.Resize(ref forms' 0x1C);                      for (int i = len; i < forms.Length; i++)                          forms[i] = 0xFF;                      Array.Copy(forms.Select(b => (byte)b).ToArray()' 0' General' ofs' forms.Length);                      return;              }
Magic Number,PKHeX.Core,SAV4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV4.cs,SetForms,The following statement contains a magic number: switch (spec)              {                  case (int)Species.Shellos: // Shellos                      General[FormOffset1 + 0] = (byte)SetDexFormValues(forms' 1' 2);                      return;                  case (int)Species.Gastrodon: // Gastrodon                      General[FormOffset1 + 1] = (byte)SetDexFormValues(forms' 1' 2);                      return;                  case (int)Species.Burmy: // Burmy                      General[FormOffset1 + 2] = (byte)SetDexFormValues(forms' 2' 3);                      return;                  case (int)Species.Wormadam: // Wormadam                      General[FormOffset1 + 3] = (byte)SetDexFormValues(forms' 2' 3);                      return;                  case (int)Species.Unown: // Unown                      int ofs = FormOffset1 + 4;                      int len = forms.Length;                      Array.Resize(ref forms' 0x1C);                      for (int i = len; i < forms.Length; i++)                          forms[i] = 0xFF;                      Array.Copy(forms.Select(b => (byte)b).ToArray()' 0' General' ofs' forms.Length);                      return;              }
Magic Number,PKHeX.Core,SAV4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV4.cs,SetForms,The following statement contains a magic number: switch (spec)              {                  case (int)Species.Shellos: // Shellos                      General[FormOffset1 + 0] = (byte)SetDexFormValues(forms' 1' 2);                      return;                  case (int)Species.Gastrodon: // Gastrodon                      General[FormOffset1 + 1] = (byte)SetDexFormValues(forms' 1' 2);                      return;                  case (int)Species.Burmy: // Burmy                      General[FormOffset1 + 2] = (byte)SetDexFormValues(forms' 2' 3);                      return;                  case (int)Species.Wormadam: // Wormadam                      General[FormOffset1 + 3] = (byte)SetDexFormValues(forms' 2' 3);                      return;                  case (int)Species.Unown: // Unown                      int ofs = FormOffset1 + 4;                      int len = forms.Length;                      Array.Resize(ref forms' 0x1C);                      for (int i = len; i < forms.Length; i++)                          forms[i] = 0xFF;                      Array.Copy(forms.Select(b => (byte)b).ToArray()' 0' General' ofs' forms.Length);                      return;              }
Magic Number,PKHeX.Core,SAV4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV4.cs,SetForms,The following statement contains a magic number: switch (spec)              {                  case (int)Species.Rotom: // Rotom                      BitConverter.GetBytes(SetDexFormValues(forms' 3' 6)).CopyTo(General' FormOffset2);                      return;                  case (int)Species.Shaymin: // Shaymin                      General[FormOffset2 + 4] = (byte)SetDexFormValues(forms' 1' 2);                      return;                  case (int)Species.Giratina: // Giratina                      General[FormOffset2 + 5] = (byte)SetDexFormValues(forms' 1' 2);                      return;                  case (int)Species.Pichu when HGSS: // Pichu                      General[FormOffset2 + 6] = (byte)SetDexFormValues(forms' 2' 3);                      return;              }
Magic Number,PKHeX.Core,SAV4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV4.cs,SetForms,The following statement contains a magic number: switch (spec)              {                  case (int)Species.Rotom: // Rotom                      BitConverter.GetBytes(SetDexFormValues(forms' 3' 6)).CopyTo(General' FormOffset2);                      return;                  case (int)Species.Shaymin: // Shaymin                      General[FormOffset2 + 4] = (byte)SetDexFormValues(forms' 1' 2);                      return;                  case (int)Species.Giratina: // Giratina                      General[FormOffset2 + 5] = (byte)SetDexFormValues(forms' 1' 2);                      return;                  case (int)Species.Pichu when HGSS: // Pichu                      General[FormOffset2 + 6] = (byte)SetDexFormValues(forms' 2' 3);                      return;              }
Magic Number,PKHeX.Core,SAV4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV4.cs,SetForms,The following statement contains a magic number: switch (spec)              {                  case (int)Species.Rotom: // Rotom                      BitConverter.GetBytes(SetDexFormValues(forms' 3' 6)).CopyTo(General' FormOffset2);                      return;                  case (int)Species.Shaymin: // Shaymin                      General[FormOffset2 + 4] = (byte)SetDexFormValues(forms' 1' 2);                      return;                  case (int)Species.Giratina: // Giratina                      General[FormOffset2 + 5] = (byte)SetDexFormValues(forms' 1' 2);                      return;                  case (int)Species.Pichu when HGSS: // Pichu                      General[FormOffset2 + 6] = (byte)SetDexFormValues(forms' 2' 3);                      return;              }
Magic Number,PKHeX.Core,SAV4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV4.cs,SetForms,The following statement contains a magic number: switch (spec)              {                  case (int)Species.Rotom: // Rotom                      BitConverter.GetBytes(SetDexFormValues(forms' 3' 6)).CopyTo(General' FormOffset2);                      return;                  case (int)Species.Shaymin: // Shaymin                      General[FormOffset2 + 4] = (byte)SetDexFormValues(forms' 1' 2);                      return;                  case (int)Species.Giratina: // Giratina                      General[FormOffset2 + 5] = (byte)SetDexFormValues(forms' 1' 2);                      return;                  case (int)Species.Pichu when HGSS: // Pichu                      General[FormOffset2 + 6] = (byte)SetDexFormValues(forms' 2' 3);                      return;              }
Magic Number,PKHeX.Core,SAV4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV4.cs,SetForms,The following statement contains a magic number: switch (spec)              {                  case (int)Species.Rotom: // Rotom                      BitConverter.GetBytes(SetDexFormValues(forms' 3' 6)).CopyTo(General' FormOffset2);                      return;                  case (int)Species.Shaymin: // Shaymin                      General[FormOffset2 + 4] = (byte)SetDexFormValues(forms' 1' 2);                      return;                  case (int)Species.Giratina: // Giratina                      General[FormOffset2 + 5] = (byte)SetDexFormValues(forms' 1' 2);                      return;                  case (int)Species.Pichu when HGSS: // Pichu                      General[FormOffset2 + 6] = (byte)SetDexFormValues(forms' 2' 3);                      return;              }
Magic Number,PKHeX.Core,SAV4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV4.cs,SetForms,The following statement contains a magic number: switch (spec)              {                  case (int)Species.Rotom: // Rotom                      BitConverter.GetBytes(SetDexFormValues(forms' 3' 6)).CopyTo(General' FormOffset2);                      return;                  case (int)Species.Shaymin: // Shaymin                      General[FormOffset2 + 4] = (byte)SetDexFormValues(forms' 1' 2);                      return;                  case (int)Species.Giratina: // Giratina                      General[FormOffset2 + 5] = (byte)SetDexFormValues(forms' 1' 2);                      return;                  case (int)Species.Pichu when HGSS: // Pichu                      General[FormOffset2 + 6] = (byte)SetDexFormValues(forms' 2' 3);                      return;              }
Magic Number,PKHeX.Core,SAV4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV4.cs,SetForms,The following statement contains a magic number: switch (spec)              {                  case (int)Species.Rotom: // Rotom                      BitConverter.GetBytes(SetDexFormValues(forms' 3' 6)).CopyTo(General' FormOffset2);                      return;                  case (int)Species.Shaymin: // Shaymin                      General[FormOffset2 + 4] = (byte)SetDexFormValues(forms' 1' 2);                      return;                  case (int)Species.Giratina: // Giratina                      General[FormOffset2 + 5] = (byte)SetDexFormValues(forms' 1' 2);                      return;                  case (int)Species.Pichu when HGSS: // Pichu                      General[FormOffset2 + 6] = (byte)SetDexFormValues(forms' 2' 3);                      return;              }
Magic Number,PKHeX.Core,SAV4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV4.cs,SetForms,The following statement contains a magic number: switch (spec)              {                  case (int)Species.Rotom: // Rotom                      BitConverter.GetBytes(SetDexFormValues(forms' 3' 6)).CopyTo(General' FormOffset2);                      return;                  case (int)Species.Shaymin: // Shaymin                      General[FormOffset2 + 4] = (byte)SetDexFormValues(forms' 1' 2);                      return;                  case (int)Species.Giratina: // Giratina                      General[FormOffset2 + 5] = (byte)SetDexFormValues(forms' 1' 2);                      return;                  case (int)Species.Pichu when HGSS: // Pichu                      General[FormOffset2 + 6] = (byte)SetDexFormValues(forms' 2' 3);                      return;              }
Magic Number,PKHeX.Core,SAV4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV4.cs,SetForms,The following statement contains a magic number: switch (spec)              {                  case (int)Species.Rotom: // Rotom                      BitConverter.GetBytes(SetDexFormValues(forms' 3' 6)).CopyTo(General' FormOffset2);                      return;                  case (int)Species.Shaymin: // Shaymin                      General[FormOffset2 + 4] = (byte)SetDexFormValues(forms' 1' 2);                      return;                  case (int)Species.Giratina: // Giratina                      General[FormOffset2 + 5] = (byte)SetDexFormValues(forms' 1' 2);                      return;                  case (int)Species.Pichu when HGSS: // Pichu                      General[FormOffset2 + 6] = (byte)SetDexFormValues(forms' 2' 3);                      return;              }
Magic Number,PKHeX.Core,SAV4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV4.cs,GetDexFormValues,The following statement contains a magic number: int n1 = 0xFF >> (8 - BitsPerForm);
Magic Number,PKHeX.Core,SAV4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV4.cs,SetDexFormValues,The following statement contains a magic number: int n1 = 0xFF >> (8 - BitsPerForm);
Magic Number,PKHeX.Core,SAV4BR,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV4BR.cs,SetChecksums,The following statement contains a magic number: SetChecksum(Data' 0' 0x100' 8);
Magic Number,PKHeX.Core,SAV4BR,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV4BR.cs,SetOTName,The following statement contains a magic number: name = name.Substring(0' 7);
Magic Number,PKHeX.Core,SAV4BR,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV4BR.cs,SetOTName,The following statement contains a magic number: name.Length > 7
Magic Number,PKHeX.Core,SAV4BR,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV4BR.cs,SetOTName,The following statement contains a magic number: var bytes = Encoding.BigEndianUnicode.GetBytes(name.PadRight(8' '\0'));
Magic Number,PKHeX.Core,SAV4BR,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV4BR.cs,SetBoxName,The following statement contains a magic number: var data = Encoding.BigEndianUnicode.GetBytes(value.PadLeft(BoxNameLength / 2' '\0'));
Magic Number,PKHeX.Core,SAV4BR,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV4BR.cs,DecryptPBRSaveData,The following statement contains a magic number: Array.Copy(input' i' output' i' 8);
Magic Number,PKHeX.Core,SAV4BR,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV4BR.cs,DecryptPBRSaveData,The following statement contains a magic number: GCSaveUtil.Decrypt(input' i + 8' i + 0x1C0000' keys' output);
Magic Number,PKHeX.Core,SAV4BR,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV4BR.cs,EncryptPBRSaveData,The following statement contains a magic number: Array.Copy(input' i' output' i' 8);
Magic Number,PKHeX.Core,SAV4BR,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV4BR.cs,EncryptPBRSaveData,The following statement contains a magic number: GCSaveUtil.Encrypt(input' i + 8' i + 0x1C0000' keys' output);
Magic Number,PKHeX.Core,SAV4BR,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV4BR.cs,GetKeys,The following statement contains a magic number: ushort[] keys = new ushort[4];
Magic Number,PKHeX.Core,SAV4BR,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV4BR.cs,GetKeys,The following statement contains a magic number: keys[i] = BigEndian.ToUInt16(input' ofs + (i * 2));
Magic Number,PKHeX.Core,SAV4BR,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV4BR.cs,VerifyChecksum,The following statement contains a magic number: uint[] storedChecksums = new uint[16];
Magic Number,PKHeX.Core,SAV4BR,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV4BR.cs,VerifyChecksum,The following statement contains a magic number: storedChecksums[i] = BigEndian.ToUInt32(input' checksum_offset + (i * 4));
Magic Number,PKHeX.Core,SAV4BR,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV4BR.cs,VerifyChecksum,The following statement contains a magic number: BitConverter.GetBytes(0u).CopyTo(input' checksum_offset + (i * 4));
Magic Number,PKHeX.Core,SAV4BR,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV4BR.cs,VerifyChecksum,The following statement contains a magic number: uint[] checksums = new uint[16];
Magic Number,PKHeX.Core,SAV4BR,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV4BR.cs,VerifyChecksum,The following statement contains a magic number: j < 16
Magic Number,PKHeX.Core,SAV4BR,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV4BR.cs,VerifyChecksum,The following statement contains a magic number: BigEndian.GetBytes(storedChecksums[i]).CopyTo(input' checksum_offset + (i * 4));
Magic Number,PKHeX.Core,SAV4BR,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV4BR.cs,SetChecksum,The following statement contains a magic number: uint[] storedChecksums = new uint[16];
Magic Number,PKHeX.Core,SAV4BR,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV4BR.cs,SetChecksum,The following statement contains a magic number: storedChecksums[i] = BigEndian.ToUInt32(input' checksum_offset + (i * 4));
Magic Number,PKHeX.Core,SAV4BR,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV4BR.cs,SetChecksum,The following statement contains a magic number: BitConverter.GetBytes(0u).CopyTo(input' checksum_offset + (i * 4));
Magic Number,PKHeX.Core,SAV4BR,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV4BR.cs,SetChecksum,The following statement contains a magic number: uint[] checksums = new uint[16];
Magic Number,PKHeX.Core,SAV4BR,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV4BR.cs,SetChecksum,The following statement contains a magic number: j < 16
Magic Number,PKHeX.Core,SAV4BR,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV4BR.cs,SetChecksum,The following statement contains a magic number: BigEndian.GetBytes(checksums[i]).CopyTo(input' checksum_offset + (i * 4));
Magic Number,PKHeX.Core,SAV4DP,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV4DP.cs,GetSAVOffsets,The following statement contains a magic number: Box = 4;
Magic Number,PKHeX.Core,SAV4DP,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV4DP.cs,GetBoxWallpaper,The following statement contains a magic number: (uint)box >= 18
Magic Number,PKHeX.Core,SAV4DP,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV4DP.cs,SetBoxWallpaper,The following statement contains a magic number: (uint)box >= 18
Magic Number,PKHeX.Core,SAV4HGSS,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV4HGSS.cs,SetBoxName,The following statement contains a magic number: const int maxlen = 8;
Magic Number,PKHeX.Core,SAV4Pt,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV4Pt.cs,GetSAVOffsets,The following statement contains a magic number: Box = 4;
Magic Number,PKHeX.Core,SAV4Pt,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV4Pt.cs,GetBoxWallpaper,The following statement contains a magic number: (uint)box > 18
Magic Number,PKHeX.Core,SAV4Pt,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV4Pt.cs,SetBoxWallpaper,The following statement contains a magic number: (uint)box >= 18
Magic Number,PKHeX.Core,SAV4Sinnoh,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV4Sinnoh.cs,SetBoxName,The following statement contains a magic number: const int maxlen = 8;
Magic Number,PKHeX.Core,SAV4Sinnoh,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV4Sinnoh.cs,GetPoketchAppUnlocked,The following statement contains a magic number: return General[PoketchStart + 3 + (int) index] != 0;
Magic Number,PKHeX.Core,SAV4Sinnoh,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV4Sinnoh.cs,SetPoketchAppUnlocked,The following statement contains a magic number: General[PoketchStart + 3 + (int)index] = (byte)b;
Magic Number,PKHeX.Core,SAV4Sinnoh,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV4Sinnoh.cs,GetHoneyTree,The following statement contains a magic number: (uint)index > 21
Magic Number,PKHeX.Core,SAV4Sinnoh,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV4Sinnoh.cs,SetHoneyTree,The following statement contains a magic number: index <= 21
Magic Number,PKHeX.Core,SAV6,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV6.cs,SetBoxName,The following statement contains a magic number: var data = SetString(value' LongStringLength / 2' LongStringLength / 2);
Magic Number,PKHeX.Core,SAV6,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV6.cs,SetBoxName,The following statement contains a magic number: var data = SetString(value' LongStringLength / 2' LongStringLength / 2);
Magic Number,PKHeX.Core,SAV6,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV6.cs,SetPKM,The following statement contains a magic number: pk6.Moves.Contains(216)
Magic Number,PKHeX.Core,SAV6,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV6.cs,AddCountAcquired,The following statement contains a magic number: Records.AddRecord(pkm.WasEgg ? 009 : 007);
Magic Number,PKHeX.Core,SAV6,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV6.cs,AddCountAcquired,The following statement contains a magic number: Records.AddRecord(pkm.WasEgg ? 009 : 007);
Magic Number,PKHeX.Core,SAV6,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV6.cs,AddCountAcquired,The following statement contains a magic number: Records.AddRecord(012);
Magic Number,PKHeX.Core,SAV6,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV6.cs,AddCountAcquired,The following statement contains a magic number: Records.AddRecord(005);
Magic Number,PKHeX.Core,SAV6,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV6.cs,GetFormArgument,The following statement contains a magic number: return pkm.Species switch              {                  (int)Species.Furfrou => 5u' // Furfrou                  (int)Species.Hoopa => 3u' // Hoopa                  _ => 0u              };
Magic Number,PKHeX.Core,SAV6,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV6.cs,GetFormArgument,The following statement contains a magic number: return pkm.Species switch              {                  (int)Species.Furfrou => 5u' // Furfrou                  (int)Species.Hoopa => 3u' // Hoopa                  _ => 0u              };
Magic Number,PKHeX.Core,SAV6AO,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV6AO.cs,GetDaycareSlotOffset,The following statement contains a magic number: return ofs + 8 + (slot * (SIZE_STORED + 8));
Magic Number,PKHeX.Core,SAV6AO,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV6AO.cs,GetDaycareSlotOffset,The following statement contains a magic number: return ofs + 8 + (slot * (SIZE_STORED + 8));
Magic Number,PKHeX.Core,SAV6AO,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV6AO.cs,GetDaycareEXP,The following statement contains a magic number: return BitConverter.ToUInt32(Data' ofs + ((SIZE_STORED + 8) * slot) + 4);
Magic Number,PKHeX.Core,SAV6AO,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV6AO.cs,GetDaycareEXP,The following statement contains a magic number: return BitConverter.ToUInt32(Data' ofs + ((SIZE_STORED + 8) * slot) + 4);
Magic Number,PKHeX.Core,SAV6AO,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV6AO.cs,IsDaycareOccupied,The following statement contains a magic number: return Data[ofs + ((SIZE_STORED + 8) * slot)] == 1;
Magic Number,PKHeX.Core,SAV6AO,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV6AO.cs,GetDaycareRNGSeed,The following statement contains a magic number: var data = Data.Skip(ofs + 0x1E8).Take(DaycareSeedSize / 2).Reverse().ToArray();
Magic Number,PKHeX.Core,SAV6AO,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV6AO.cs,SetDaycareEXP,The following statement contains a magic number: BitConverter.GetBytes(EXP).CopyTo(Data' ofs + ((SIZE_STORED + 8) * slot) + 4);
Magic Number,PKHeX.Core,SAV6AO,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV6AO.cs,SetDaycareEXP,The following statement contains a magic number: BitConverter.GetBytes(EXP).CopyTo(Data' ofs + ((SIZE_STORED + 8) * slot) + 4);
Magic Number,PKHeX.Core,SAV6AO,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV6AO.cs,SetDaycareOccupied,The following statement contains a magic number: Data[ofs + ((SIZE_STORED + 8) * slot)] = (byte)(occupied ? 1 : 0);
Magic Number,PKHeX.Core,SAV6XY,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV6XY.cs,GetDaycareRNGSeed,The following statement contains a magic number: var data = Data.Skip(ofs + 0x1E8).Take(DaycareSeedSize / 2).Reverse().ToArray();
Magic Number,PKHeX.Core,SAV6XY,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV6XY.cs,UnlockAllFriendSafariSlots,The following statement contains a magic number: i < 101
Magic Number,PKHeX.Core,SAV7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV7.cs,SetPKM,The following statement contains a magic number: pk7.Moves.Contains(216)
Magic Number,PKHeX.Core,SAV7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV7.cs,AddCountAcquired,The following statement contains a magic number: Records.AddRecord(pkm.WasEgg ? 008 : 006);
Magic Number,PKHeX.Core,SAV7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV7.cs,AddCountAcquired,The following statement contains a magic number: Records.AddRecord(pkm.WasEgg ? 008 : 006);
Magic Number,PKHeX.Core,SAV7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV7.cs,AddCountAcquired,The following statement contains a magic number: Records.AddRecord(011);
Magic Number,PKHeX.Core,SAV7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV7.cs,AddCountAcquired,The following statement contains a magic number: Records.AddRecord(004);
Magic Number,PKHeX.Core,SAV7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV7.cs,GetFormArgument,The following statement contains a magic number: return pkm.Species switch              {                  (int)Species.Furfrou => 5u' // Furfrou                  (int)Species.Hoopa => 3u' // Hoopa                  _ => 0u              };
Magic Number,PKHeX.Core,SAV7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV7.cs,GetFormArgument,The following statement contains a magic number: return pkm.Species switch              {                  (int)Species.Furfrou => 5u' // Furfrou                  (int)Species.Hoopa => 3u' // Hoopa                  _ => 0u              };
Magic Number,PKHeX.Core,SAV7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV7.cs,GetSlotFlags,The following statement contains a magic number: team /= 6;
Magic Number,PKHeX.Core,SAV7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV7.cs,GetFusedSlotOffset,The following statement contains a magic number: return AllBlocks[08].Offset + (PKX.SIZE_6PARTY * slot);
Magic Number,PKHeX.Core,SAV7b,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV7b.cs,SetPKM,The following statement contains a magic number: pk.Moves.Contains(216)
Magic Number,PKHeX.Core,SAV7b,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV7b.cs,GetSlotFlags,The following statement contains a magic number: Blocks.Storage.PokeListInfo[6] == index
Magic Number,PKHeX.Core,SAV7b,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV7b.cs,GetSlotFlags,The following statement contains a magic number: (uint) position < 6
Magic Number,PKHeX.Core,SAV7SM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV7SM.cs,Initialize,The following statement contains a magic number: Party = Blocks.BlockInfo[04].Offset;
Magic Number,PKHeX.Core,SAV7SM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV7SM.cs,Initialize,The following statement contains a magic number: EventConst = Blocks.BlockInfo[05].Offset;
Magic Number,PKHeX.Core,SAV7SM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV7SM.cs,Initialize,The following statement contains a magic number: PokeDex = Blocks.BlockInfo[06].Offset;
Magic Number,PKHeX.Core,SAV7SM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV7SM.cs,Initialize,The following statement contains a magic number: EventFlag = EventConst + (EventConstMax * 2);
Magic Number,PKHeX.Core,SAV7SM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV7SM.cs,Initialize,The following statement contains a magic number: HoF = EventFlag + (EventFlagMax / 8);
Magic Number,PKHeX.Core,SAV7SM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV7SM.cs,Initialize,The following statement contains a magic number: Box = Blocks.BlockInfo[14].Offset;
Magic Number,PKHeX.Core,SAV7SM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV7SM.cs,UpdateMagearnaConstant,The following statement contains a magic number: var flag = GetEventFlag(3100);
Magic Number,PKHeX.Core,SAV7SM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV7SM.cs,UpdateMagearnaConstant,The following statement contains a magic number: SetData(BitConverter.GetBytes(value)' Blocks.BlockInfo[35].Offset + 0x168);
Magic Number,PKHeX.Core,SAV7USUM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV7USUM.cs,Initialize,The following statement contains a magic number: Party = Blocks.BlockInfo[04].Offset;
Magic Number,PKHeX.Core,SAV7USUM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV7USUM.cs,Initialize,The following statement contains a magic number: EventConst = Blocks.BlockInfo[05].Offset;
Magic Number,PKHeX.Core,SAV7USUM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV7USUM.cs,Initialize,The following statement contains a magic number: PokeDex = Blocks.BlockInfo[06].Offset;
Magic Number,PKHeX.Core,SAV7USUM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV7USUM.cs,Initialize,The following statement contains a magic number: EventFlag = EventConst + (EventConstMax * 2);
Magic Number,PKHeX.Core,SAV7USUM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV7USUM.cs,Initialize,The following statement contains a magic number: HoF = EventFlag + (EventFlagMax / 8);
Magic Number,PKHeX.Core,SAV7USUM,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV7USUM.cs,Initialize,The following statement contains a magic number: Box = Blocks.BlockInfo[14].Offset;
Magic Number,PKHeX.Core,SAV8SWSH,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV8SWSH.cs,GetFormArgument,The following statement contains a magic number: return pkm.FormArgument & 7;
Magic Number,PKHeX.Core,SAV8SWSH,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV8SWSH.cs,GetFormArgument,The following statement contains a magic number: return pkm.Species switch              {                  (int)Species.Furfrou => 5u' // Furfrou                  (int)Species.Hoopa => 3u' // Hoopa                  _ => 0u              };
Magic Number,PKHeX.Core,SAV8SWSH,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV8SWSH.cs,GetFormArgument,The following statement contains a magic number: return pkm.Species switch              {                  (int)Species.Furfrou => 5u' // Furfrou                  (int)Species.Hoopa => 3u' // Hoopa                  _ => 0u              };
Magic Number,PKHeX.Core,SaveFile,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SaveFile.cs,GetEventFlag,The following statement contains a magic number: return GetFlag(EventFlag + (flagNumber >> 3)' flagNumber & 7);
Magic Number,PKHeX.Core,SaveFile,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SaveFile.cs,GetEventFlag,The following statement contains a magic number: return GetFlag(EventFlag + (flagNumber >> 3)' flagNumber & 7);
Magic Number,PKHeX.Core,SaveFile,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SaveFile.cs,SetEventFlag,The following statement contains a magic number: SetFlag(EventFlag + (flagNumber >> 3)' flagNumber & 7' value);
Magic Number,PKHeX.Core,SaveFile,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SaveFile.cs,SetEventFlag,The following statement contains a magic number: SetFlag(EventFlag + (flagNumber >> 3)' flagNumber & 7' value);
Magic Number,PKHeX.Core,SaveFile,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SaveFile.cs,SetID7,The following statement contains a magic number: SID = oid >> 16;
Magic Number,PKHeX.Core,Bank7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Storage\Bank7.cs,GetGroupName,The following statement contains a magic number: (uint)group > 10
Magic Number,PKHeX.Core,Bank7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Storage\Bank7.cs,GetGroupName,The following statement contains a magic number: int offset = 0x8 + (GroupNameSpacing * group) + 2;
Magic Number,PKHeX.Core,Bank7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Storage\Bank7.cs,GetGroupName,The following statement contains a magic number: return GetString(offset' GroupNameSize / 2);
Magic Number,PKHeX.Core,SAV4Ranch,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Storage\SAV4Ranch.cs,SAV4Ranch,The following statement contains a magic number: var pkCountOffset = BigEndian.ToInt32(Data' 0x34) + 4;
Magic Number,PKHeX.Core,SAV4Ranch,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Storage\SAV4Ranch.cs,SAV4Ranch,The following statement contains a magic number: Box = pkCountOffset + 4;
Magic Number,PKHeX.Core,SAV4Ranch,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Storage\SAV4Ranch.cs,SetChecksums,The following statement contains a magic number: var goodlen = (FinalCountOffset + 4);
Magic Number,PKHeX.Core,SAV4Ranch,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Storage\SAV4Ranch.cs,SetChecksums,The following statement contains a magic number: var result = hash.ComputeHash(Data' 20' Data.Length - 20);
Magic Number,PKHeX.Core,SAV4Ranch,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Storage\SAV4Ranch.cs,SetChecksums,The following statement contains a magic number: var result = hash.ComputeHash(Data' 20' Data.Length - 20);
Magic Number,PKHeX.Core,StorageSlotFlagExtensions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Storage\StorageSlotFlag.cs,IsBattleTeam,The following statement contains a magic number: return 2;
Magic Number,PKHeX.Core,StorageSlotFlagExtensions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Storage\StorageSlotFlag.cs,IsBattleTeam,The following statement contains a magic number: return 3;
Magic Number,PKHeX.Core,StorageSlotFlagExtensions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Storage\StorageSlotFlag.cs,IsBattleTeam,The following statement contains a magic number: return 4;
Magic Number,PKHeX.Core,StorageSlotFlagExtensions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Storage\StorageSlotFlag.cs,IsBattleTeam,The following statement contains a magic number: return 5;
Magic Number,PKHeX.Core,StorageSlotFlagExtensions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Storage\StorageSlotFlag.cs,IsParty,The following statement contains a magic number: return 2;
Magic Number,PKHeX.Core,StorageSlotFlagExtensions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Storage\StorageSlotFlag.cs,IsParty,The following statement contains a magic number: return 3;
Magic Number,PKHeX.Core,StorageSlotFlagExtensions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Storage\StorageSlotFlag.cs,IsParty,The following statement contains a magic number: return 4;
Magic Number,PKHeX.Core,StorageSlotFlagExtensions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Storage\StorageSlotFlag.cs,IsParty,The following statement contains a magic number: return 5;
Magic Number,PKHeX.Core,BVRequestUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Battle Videos\BVRequestUtil.cs,GetSMBattleVideoURL,The following statement contains a magic number: Debug.Assert(code.Length == 16);
Magic Number,PKHeX.Core,BVRequestUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Battle Videos\BVRequestUtil.cs,StrToU64,The following statement contains a magic number: var chk = Pull(0' 4) >> 4;
Magic Number,PKHeX.Core,BVRequestUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Battle Videos\BVRequestUtil.cs,StrToU64,The following statement contains a magic number: var chk = Pull(0' 4) >> 4;
Magic Number,PKHeX.Core,BVRequestUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Battle Videos\BVRequestUtil.cs,StrToU64,The following statement contains a magic number: var result = Pull(4' input.Length);
Magic Number,PKHeX.Core,BVRequestUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Battle Videos\BVRequestUtil.cs,StrToU64,The following statement contains a magic number: val <<= 5;
Magic Number,PKHeX.Core,BVRequestUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Battle Videos\BVRequestUtil.cs,U64ToStr,The following statement contains a magic number: var buff = new char[16];
Magic Number,PKHeX.Core,BVRequestUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Battle Videos\BVRequestUtil.cs,U64ToStr,The following statement contains a magic number: int ctr = 15;
Magic Number,PKHeX.Core,BVRequestUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Battle Videos\BVRequestUtil.cs,U64ToStr,The following statement contains a magic number: Push(input' 12);
Magic Number,PKHeX.Core,BVRequestUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Battle Videos\BVRequestUtil.cs,U64ToStr,The following statement contains a magic number: Push(chk << 4' 4);
Magic Number,PKHeX.Core,BVRequestUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Battle Videos\BVRequestUtil.cs,U64ToStr,The following statement contains a magic number: Push(chk << 4' 4);
Magic Number,PKHeX.Core,BVRequestUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Battle Videos\BVRequestUtil.cs,U64ToStr,The following statement contains a magic number: return !insertDash ? string.Concat(buff) : GetStringWithDashesEvery(buff' 4);
Magic Number,PKHeX.Core,BVRequestUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Battle Videos\BVRequestUtil.cs,U64ToStr,The following statement contains a magic number: v >>= 5;
Magic Number,PKHeX.Core,BVRequestUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Battle Videos\BVRequestUtil.cs,GetStringWithDashesEvery,The following statement contains a magic number: i % spacer == 3 && ctr < buff2.Length
Magic Number,PKHeX.Core,BVRequestUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Battle Videos\BVRequestUtil.cs,Set5BitToChar,The following statement contains a magic number: var shift = c > 9 ? '7' : '0';
Magic Number,PKHeX.Core,TurnActionInstruction,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Battle Videos\TurnActionCode.cs,TurnActionInstruction,The following statement contains a magic number: PlayerID = Op >> 5;
Magic Number,PKHeX.Core,TurnActionInstruction,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Battle Videos\TurnActionCode.cs,TurnActionInstruction,The following statement contains a magic number: Bit = (Op >> 4) & 1;
Magic Number,PKHeX.Core,TurnStartInstruction,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Battle Videos\TurnStartInstruction.cs,TurnStartInstruction,The following statement contains a magic number: TurnCode = (TurnStartCode)(Op >> 4);
Magic Number,PKHeX.Core,G1OverworldSpawner,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen12\G1OverworldSpawner.cs,G1OverworldSpawner,The following statement contains a magic number: FlagKabuto.SpawnFlag += 2;
Magic Number,PKHeX.Core,G1OverworldSpawner,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen12\G1OverworldSpawner.cs,G1OverworldSpawner,The following statement contains a magic number: FlagOmanyte.SpawnFlag += 2;
Magic Number,PKHeX.Core,SAV2Offsets,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen12\SAV2Offsets.cs,SAV2Offsets,The following statement contains a magic number: Daycare = PokedexSeen + 0x1F + 28 + 1;
Magic Number,PKHeX.Core,HallFame3Entry,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen3\HallFame3.cs,GetEntries,The following statement contains a magic number: byte[] data = new byte[SAV3.SIZE_BLOCK_USED * 2];
Magic Number,PKHeX.Core,PokeBlock3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen3\PokeBlock3.cs,Maximize,The following statement contains a magic number: Spicy = Dry = Sweet = Bitter = Sour = Feel = 255;
Magic Number,PKHeX.Core,Record3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen3\Record3.cs,GetRecordOffset,The following statement contains a magic number: var offset = baseOffset + (4 * record);
Magic Number,PKHeX.Core,Roamer3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen3\Roamer3.cs,Roamer3,The following statement contains a magic number: Offset = sav.GetBlockOffset(4);
Magic Number,PKHeX.Core,Roamer3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen3\Roamer3.cs,IsShiny,The following statement contains a magic number: var val = (ushort)(SAV.SID ^ SAV.TID ^ (pid >> 16) ^ pid);
Magic Number,PKHeX.Core,Roamer3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen3\Roamer3.cs,IsShiny,The following statement contains a magic number: return val < 8;
Magic Number,PKHeX.Core,SecretBase3Team,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen3\SecretBase3Team.cs,SecretBase3Team,The following statement contains a magic number: Team = new SecretBase3PKM[6];
Magic Number,PKHeX.Core,SecretBase3Team,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen3\SecretBase3Team.cs,GetPKM,The following statement contains a magic number: return new SecretBase3PKM              {                  PID = BitConverter.ToUInt32(Data' GetOffsetPID(i))'                  Species = BitConverter.ToUInt16(Data' GetOffsetSpecies(i))'                  HeldItem = BitConverter.ToUInt16(Data' GetOffsetItem(i))'                  Move1 = BitConverter.ToUInt16(Data' GetOffsetMove(i' 0))'                  Move2 = BitConverter.ToUInt16(Data' GetOffsetMove(i' 1))'                  Move3 = BitConverter.ToUInt16(Data' GetOffsetMove(i' 2))'                  Move4 = BitConverter.ToUInt16(Data' GetOffsetMove(i' 3))'                  Level = Data[O_Level + i]'                  EVAll = Data[O_EV + i]'              };
Magic Number,PKHeX.Core,SecretBase3Team,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen3\SecretBase3Team.cs,GetPKM,The following statement contains a magic number: return new SecretBase3PKM              {                  PID = BitConverter.ToUInt32(Data' GetOffsetPID(i))'                  Species = BitConverter.ToUInt16(Data' GetOffsetSpecies(i))'                  HeldItem = BitConverter.ToUInt16(Data' GetOffsetItem(i))'                  Move1 = BitConverter.ToUInt16(Data' GetOffsetMove(i' 0))'                  Move2 = BitConverter.ToUInt16(Data' GetOffsetMove(i' 1))'                  Move3 = BitConverter.ToUInt16(Data' GetOffsetMove(i' 2))'                  Move4 = BitConverter.ToUInt16(Data' GetOffsetMove(i' 3))'                  Level = Data[O_Level + i]'                  EVAll = Data[O_EV + i]'              };
Magic Number,PKHeX.Core,SecretBase3Team,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen3\SecretBase3Team.cs,SetPKM,The following statement contains a magic number: BitConverter.GetBytes((ushort)pk.Move3).CopyTo(Data' GetOffsetMove(i' 2));
Magic Number,PKHeX.Core,SecretBase3Team,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen3\SecretBase3Team.cs,SetPKM,The following statement contains a magic number: BitConverter.GetBytes((ushort)pk.Move4).CopyTo(Data' GetOffsetMove(i' 3));
Magic Number,PKHeX.Core,StrategyMemo,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen3\StrategyMemo.cs,StrategyMemo,The following statement contains a magic number: _unk = input.Slice(offset + 2' 2);
Magic Number,PKHeX.Core,StrategyMemo,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen3\StrategyMemo.cs,StrategyMemo,The following statement contains a magic number: _unk = input.Slice(offset + 2' 2);
Magic Number,PKHeX.Core,StrategyMemo,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen3\StrategyMemo.cs,Read,The following statement contains a magic number: var ofs = 4 + offset + (SIZE_ENTRY * index);
Magic Number,PKHeX.Core,Poffin4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen4\Poffin4.cs,SetStat,The following statement contains a magic number: (uint) stat > 5
Magic Number,PKHeX.Core,Poffin4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen4\Poffin4.cs,GetStat,The following statement contains a magic number: (uint)stat > 5
Magic Number,PKHeX.Core,BoxLayout5,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen5\BoxLayout5.cs,SetBoxName,The following statement contains a magic number: value.Length > 0x26 / 2
Magic Number,PKHeX.Core,CGearBackground,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen5\CGearBackground.cs,CGearBackground,The following statement contains a magic number: ColorPalette[i] = GetRGB555_16(BitConverter.ToUInt16(ColorData' i * 2));
Magic Number,PKHeX.Core,CGearBackground,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen5\CGearBackground.cs,Write,The following statement contains a magic number: BitConverter.GetBytes(GetRGB555(ColorPalette[i])).CopyTo(data' 0x1FE0 + (i * 2));
Magic Number,PKHeX.Core,CGearBackground,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen5\CGearBackground.cs,CGBtoPSK,The following statement contains a magic number: psk[i + 1] = (byte)(val >> 8);
Magic Number,PKHeX.Core,CGearBackground,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen5\CGearBackground.cs,GetPSKValue,The following statement contains a magic number: return tile + (15 * (tile / 17)) + 0xA0A0 + rot;
Magic Number,PKHeX.Core,CGearBackground,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen5\CGearBackground.cs,GetPSKValue,The following statement contains a magic number: return tile + (15 * (tile / 17)) + 0xA0A0 + rot;
Magic Number,PKHeX.Core,CGearBackground,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen5\CGearBackground.cs,PSKtoCGB,The following statement contains a magic number: byte rot = (byte)(index >> 8);
Magic Number,PKHeX.Core,CGearBackground,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen5\CGearBackground.cs,ValToIndex,The following statement contains a magic number: return ((val % 0x20) + (17 * (((val & 0x3FF) - 0xA0) / 0x20))) | (val & 0x5C00);
Magic Number,PKHeX.Core,CGearBackground,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen5\CGearBackground.cs,GetRGB555_32,The following statement contains a magic number: var R = (val >> 0 >> 3) & 0x1F;
Magic Number,PKHeX.Core,CGearBackground,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen5\CGearBackground.cs,GetRGB555_32,The following statement contains a magic number: var G = (val >> 8 >> 3) & 0x1F;
Magic Number,PKHeX.Core,CGearBackground,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen5\CGearBackground.cs,GetRGB555_32,The following statement contains a magic number: var G = (val >> 8 >> 3) & 0x1F;
Magic Number,PKHeX.Core,CGearBackground,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen5\CGearBackground.cs,GetRGB555_32,The following statement contains a magic number: var B = (val >> 16 >> 3) & 0x1F;
Magic Number,PKHeX.Core,CGearBackground,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen5\CGearBackground.cs,GetRGB555_32,The following statement contains a magic number: var B = (val >> 16 >> 3) & 0x1F;
Magic Number,PKHeX.Core,CGearBackground,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen5\CGearBackground.cs,GetRGB555_32,The following statement contains a magic number: return 0xFF << 24 | R << 16 | G << 8 | B;
Magic Number,PKHeX.Core,CGearBackground,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen5\CGearBackground.cs,GetRGB555_32,The following statement contains a magic number: return 0xFF << 24 | R << 16 | G << 8 | B;
Magic Number,PKHeX.Core,CGearBackground,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen5\CGearBackground.cs,GetRGB555_32,The following statement contains a magic number: return 0xFF << 24 | R << 16 | G << 8 | B;
Magic Number,PKHeX.Core,CGearBackground,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen5\CGearBackground.cs,GetRGB555_16,The following statement contains a magic number: int G = (val >> 5) & 0x1F;
Magic Number,PKHeX.Core,CGearBackground,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen5\CGearBackground.cs,GetRGB555_16,The following statement contains a magic number: int B = (val >> 10) & 0x1F;
Magic Number,PKHeX.Core,CGearBackground,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen5\CGearBackground.cs,GetRGB555_16,The following statement contains a magic number: return 0xFF << 24 | R << 16 | G << 8 | B;
Magic Number,PKHeX.Core,CGearBackground,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen5\CGearBackground.cs,GetRGB555_16,The following statement contains a magic number: return 0xFF << 24 | R << 16 | G << 8 | B;
Magic Number,PKHeX.Core,CGearBackground,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen5\CGearBackground.cs,GetRGB555_16,The following statement contains a magic number: return 0xFF << 24 | R << 16 | G << 8 | B;
Magic Number,PKHeX.Core,CGearBackground,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen5\CGearBackground.cs,GetRGB555,The following statement contains a magic number: var R = (byte)(v >> 16);
Magic Number,PKHeX.Core,CGearBackground,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen5\CGearBackground.cs,GetRGB555,The following statement contains a magic number: var G = (byte)(v >> 8);
Magic Number,PKHeX.Core,CGearBackground,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen5\CGearBackground.cs,GetRGB555,The following statement contains a magic number: val |= Convert8to5(G) << 5;
Magic Number,PKHeX.Core,CGearBackground,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen5\CGearBackground.cs,GetRGB555,The following statement contains a magic number: val |= Convert8to5(B) << 10;
Magic Number,PKHeX.Core,CGearBackground,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen5\CGearBackground.cs,GetTiles,The following statement contains a magic number: int x = (i * 8) % Width;
Magic Number,PKHeX.Core,CGearBackground,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen5\CGearBackground.cs,GetTiles,The following statement contains a magic number: int y = 8 * ((i * 8) / Width);
Magic Number,PKHeX.Core,CGearBackground,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen5\CGearBackground.cs,GetTiles,The following statement contains a magic number: int y = 8 * ((i * 8) / Width);
Magic Number,PKHeX.Core,CGearBackground,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen5\CGearBackground.cs,GetTiles,The following statement contains a magic number: t.ColorChoices[(ix % 8) + (iy * 8)] = Array.IndexOf(Palette' c);
Magic Number,PKHeX.Core,CGearBackground,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen5\CGearBackground.cs,GetTiles,The following statement contains a magic number: t.ColorChoices[(ix % 8) + (iy * 8)] = Array.IndexOf(Palette' c);
Magic Number,PKHeX.Core,CGearBackground,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen5\CGearBackground.cs,GetTiles,The following statement contains a magic number: iy < 8
Magic Number,PKHeX.Core,CGearBackground,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen5\CGearBackground.cs,GetTiles,The following statement contains a magic number: ix < 8
Magic Number,PKHeX.Core,CGearBackground,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen5\CGearBackground.cs,GetTileList,The following statement contains a magic number: tm = new TileMap(new byte[2 * Width * Height / 64]);
Magic Number,PKHeX.Core,CGearBackground,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen5\CGearBackground.cs,GetTileList,The following statement contains a magic number: tm = new TileMap(new byte[2 * Width * Height / 64]);
Magic Number,PKHeX.Core,CGearBackground,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen5\CGearBackground.cs,GetImageData,The following statement contains a magic number: byte[] data = new byte[4 * Width * Height];
Magic Number,PKHeX.Core,CGearBackground,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen5\CGearBackground.cs,GetImageData,The following statement contains a magic number: int x = (i * 8) % Width;
Magic Number,PKHeX.Core,CGearBackground,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen5\CGearBackground.cs,GetImageData,The following statement contains a magic number: int y = 8 * ((i * 8) / Width);
Magic Number,PKHeX.Core,CGearBackground,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen5\CGearBackground.cs,GetImageData,The following statement contains a magic number: int y = 8 * ((i * 8) / Width);
Magic Number,PKHeX.Core,CGearBackground,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen5\CGearBackground.cs,GetImageData,The following statement contains a magic number: int src = iy * (4 * 8);
Magic Number,PKHeX.Core,CGearBackground,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen5\CGearBackground.cs,GetImageData,The following statement contains a magic number: int src = iy * (4 * 8);
Magic Number,PKHeX.Core,CGearBackground,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen5\CGearBackground.cs,GetImageData,The following statement contains a magic number: int dest = (((y+iy) * Width) + x) * 4;
Magic Number,PKHeX.Core,CGearBackground,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen5\CGearBackground.cs,GetImageData,The following statement contains a magic number: Array.Copy(tileData' src' data' dest' 4*8);
Magic Number,PKHeX.Core,CGearBackground,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen5\CGearBackground.cs,GetImageData,The following statement contains a magic number: Array.Copy(tileData' src' data' dest' 4*8);
Magic Number,PKHeX.Core,CGearBackground,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen5\CGearBackground.cs,GetImageData,The following statement contains a magic number: iy < 8
Magic Number,PKHeX.Core,Tile,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen5\CGearBackground.cs,Tile,The following statement contains a magic number: var ofs = i * 2;
Magic Number,PKHeX.Core,Tile,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen5\CGearBackground.cs,Tile,The following statement contains a magic number: ColorChoices[ofs + 1] = data[i] >> 4;
Magic Number,PKHeX.Core,Tile,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen5\CGearBackground.cs,GetTileData,The following statement contains a magic number: byte[] data = new byte[pixels * 4];
Magic Number,PKHeX.Core,Tile,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen5\CGearBackground.cs,GetTileData,The following statement contains a magic number: var o = 4 * i;
Magic Number,PKHeX.Core,Tile,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen5\CGearBackground.cs,GetTileData,The following statement contains a magic number: data[o + 1] = (byte)(val >> 8 & 0xFF);
Magic Number,PKHeX.Core,Tile,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen5\CGearBackground.cs,GetTileData,The following statement contains a magic number: data[o + 2] = (byte)(val >> 16 & 0xFF);
Magic Number,PKHeX.Core,Tile,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen5\CGearBackground.cs,GetTileData,The following statement contains a magic number: data[o + 2] = (byte)(val >> 16 & 0xFF);
Magic Number,PKHeX.Core,Tile,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen5\CGearBackground.cs,GetTileData,The following statement contains a magic number: data[o + 3] = (byte)(val >> 24 & 0xFF);
Magic Number,PKHeX.Core,Tile,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen5\CGearBackground.cs,GetTileData,The following statement contains a magic number: data[o + 3] = (byte)(val >> 24 & 0xFF);
Magic Number,PKHeX.Core,Tile,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen5\CGearBackground.cs,Write,The following statement contains a magic number: var ofs = i * 2;
Magic Number,PKHeX.Core,Tile,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen5\CGearBackground.cs,Write,The following statement contains a magic number: data[i] |= (byte)((ColorChoices[ofs + 1] & 0xF) << 4);
Magic Number,PKHeX.Core,Tile,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen5\CGearBackground.cs,Rotate,The following statement contains a magic number: (rotFlip & 4) > 0
Magic Number,PKHeX.Core,Tile,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen5\CGearBackground.cs,Rotate,The following statement contains a magic number: (rotFlip & 8) > 0
Magic Number,PKHeX.Core,Tile,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen5\CGearBackground.cs,FlipX,The following statement contains a magic number: var o = 4 * i;
Magic Number,PKHeX.Core,Tile,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen5\CGearBackground.cs,FlipX,The following statement contains a magic number: result[dest + 2] = data[o + 2];
Magic Number,PKHeX.Core,Tile,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen5\CGearBackground.cs,FlipX,The following statement contains a magic number: result[dest + 2] = data[o + 2];
Magic Number,PKHeX.Core,Tile,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen5\CGearBackground.cs,FlipX,The following statement contains a magic number: result[dest + 3] = data[o + 3];
Magic Number,PKHeX.Core,Tile,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen5\CGearBackground.cs,FlipX,The following statement contains a magic number: result[dest + 3] = data[o + 3];
Magic Number,PKHeX.Core,Tile,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen5\CGearBackground.cs,FlipY,The following statement contains a magic number: var o = 4 * i;
Magic Number,PKHeX.Core,Tile,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen5\CGearBackground.cs,FlipY,The following statement contains a magic number: result[dest + 2] = data[o + 2];
Magic Number,PKHeX.Core,Tile,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen5\CGearBackground.cs,FlipY,The following statement contains a magic number: result[dest + 2] = data[o + 2];
Magic Number,PKHeX.Core,Tile,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen5\CGearBackground.cs,FlipY,The following statement contains a magic number: result[dest + 3] = data[o + 3];
Magic Number,PKHeX.Core,Tile,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen5\CGearBackground.cs,FlipY,The following statement contains a magic number: result[dest + 3] = data[o + 3];
Magic Number,PKHeX.Core,Tile,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen5\CGearBackground.cs,GetRotationValue,The following statement contains a magic number: return 4;
Magic Number,PKHeX.Core,Tile,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen5\CGearBackground.cs,GetRotationValue,The following statement contains a magic number: return 8;
Magic Number,PKHeX.Core,Tile,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen5\CGearBackground.cs,GetRotationValue,The following statement contains a magic number: return 12;
Magic Number,PKHeX.Core,Tile,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen5\CGearBackground.cs,IsMirrorX,The following statement contains a magic number: ColorChoices[(7 - (i & 7)) + (8 * (i / 8))] != tileColors[i]
Magic Number,PKHeX.Core,Tile,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen5\CGearBackground.cs,IsMirrorX,The following statement contains a magic number: ColorChoices[(7 - (i & 7)) + (8 * (i / 8))] != tileColors[i]
Magic Number,PKHeX.Core,Tile,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen5\CGearBackground.cs,IsMirrorX,The following statement contains a magic number: ColorChoices[(7 - (i & 7)) + (8 * (i / 8))] != tileColors[i]
Magic Number,PKHeX.Core,Tile,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen5\CGearBackground.cs,IsMirrorX,The following statement contains a magic number: ColorChoices[(7 - (i & 7)) + (8 * (i / 8))] != tileColors[i]
Magic Number,PKHeX.Core,Tile,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen5\CGearBackground.cs,IsMirrorX,The following statement contains a magic number: i < 64
Magic Number,PKHeX.Core,Tile,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen5\CGearBackground.cs,IsMirrorY,The following statement contains a magic number: ColorChoices[64 - (8 * (1 + (i / 8))) + (i & 7)] != tileColors[i]
Magic Number,PKHeX.Core,Tile,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen5\CGearBackground.cs,IsMirrorY,The following statement contains a magic number: ColorChoices[64 - (8 * (1 + (i / 8))) + (i & 7)] != tileColors[i]
Magic Number,PKHeX.Core,Tile,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen5\CGearBackground.cs,IsMirrorY,The following statement contains a magic number: ColorChoices[64 - (8 * (1 + (i / 8))) + (i & 7)] != tileColors[i]
Magic Number,PKHeX.Core,Tile,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen5\CGearBackground.cs,IsMirrorY,The following statement contains a magic number: ColorChoices[64 - (8 * (1 + (i / 8))) + (i & 7)] != tileColors[i]
Magic Number,PKHeX.Core,Tile,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen5\CGearBackground.cs,IsMirrorY,The following statement contains a magic number: i < 64
Magic Number,PKHeX.Core,Tile,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen5\CGearBackground.cs,IsMirrorXY,The following statement contains a magic number: ColorChoices[63 - i] != tileColors[i]
Magic Number,PKHeX.Core,Tile,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen5\CGearBackground.cs,IsMirrorXY,The following statement contains a magic number: i < 64
Magic Number,PKHeX.Core,TileMap,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen5\CGearBackground.cs,TileMap,The following statement contains a magic number: TileChoices = new int[data.Length / 2];
Magic Number,PKHeX.Core,TileMap,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen5\CGearBackground.cs,TileMap,The following statement contains a magic number: Rotations = new int[data.Length / 2];
Magic Number,PKHeX.Core,TileMap,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen5\CGearBackground.cs,TileMap,The following statement contains a magic number: TileChoices[i / 2] = data[i];
Magic Number,PKHeX.Core,TileMap,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen5\CGearBackground.cs,TileMap,The following statement contains a magic number: Rotations[i / 2] = data[i + 1];
Magic Number,PKHeX.Core,TileMap,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen5\CGearBackground.cs,Write,The following statement contains a magic number: byte[] data = new byte[TileChoices.Length * 2];
Magic Number,PKHeX.Core,TileMap,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen5\CGearBackground.cs,Write,The following statement contains a magic number: data[i] = (byte)TileChoices[i / 2];
Magic Number,PKHeX.Core,TileMap,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen5\CGearBackground.cs,Write,The following statement contains a magic number: data[i + 1] = (byte)Rotations[i / 2];
Magic Number,PKHeX.Core,EntreeForest,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen5\EntreeForest.cs,GetSlotArea,The following statement contains a magic number: const int slots9 = 3 * Count9;
Magic Number,PKHeX.Core,EntreeForest,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen5\EntreeForest.cs,GetSlotArea,The following statement contains a magic number: const int slots18 = 3 * Count18;
Magic Number,PKHeX.Core,EntreeForest,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen5\EntreeForest.cs,GetSlotArea,The following statement contains a magic number: area >= 8
Magic Number,PKHeX.Core,EntreeForest,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen5\EntreeForest.cs,GetSlotPosition,The following statement contains a magic number: return index switch              {                  0 => EntreeForestArea.Center'                  1 => EntreeForestArea.Left'                  2 => EntreeForestArea.Right'                  _ => throw new ArgumentOutOfRangeException()              };
Magic Number,PKHeX.Core,MysteryBlock5,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen5\MysteryBlock5.cs,GetAlbum,The following statement contains a magic number: Info.Flags[i] = (wcData[i / 8] >> i % 8 & 0x1) == 1;
Magic Number,PKHeX.Core,MysteryBlock5,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen5\MysteryBlock5.cs,GetAlbum,The following statement contains a magic number: Info.Flags[i] = (wcData[i / 8] >> i % 8 & 0x1) == 1;
Magic Number,PKHeX.Core,MysteryBlock5,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen5\MysteryBlock5.cs,SetAlbum,The following statement contains a magic number: wcData[i / 8] |= (byte) (1 << (i & 7));
Magic Number,PKHeX.Core,MysteryBlock5,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen5\MysteryBlock5.cs,SetAlbum,The following statement contains a magic number: wcData[i / 8] |= (byte) (1 << (i & 7));
Magic Number,PKHeX.Core,PWTBlock5,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen5\PWTBlock5.cs,GetPWTRecord,The following statement contains a magic number: int ofs = Offset + 0x5C + ((int)id * 2);
Magic Number,PKHeX.Core,PWTBlock5,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen5\PWTBlock5.cs,SetPWTRecord,The following statement contains a magic number: int ofs = Offset + 0x5C + ((int)id * 2);
Magic Number,PKHeX.Core,MysteryBlock6,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen6\MysteryBlock6.cs,SetGift,The following statement contains a magic number: wc6.CardID == 2048 && wc6.ItemID == 726
Magic Number,PKHeX.Core,MysteryBlock6,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen6\MysteryBlock6.cs,SetGift,The following statement contains a magic number: wc6.CardID == 2048 && wc6.ItemID == 726
Magic Number,PKHeX.Core,PSS6,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen6\PSS6.cs,GetPSSParse,The following statement contains a magic number: ReadTrainers(result' data' offset' 100);
Magic Number,PKHeX.Core,PSS6,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen6\PSS6.cs,GetPSSParse,The following statement contains a magic number: g < 3
Magic Number,PKHeX.Core,PSS6,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen6\PSS6.cs,ReadTrainer,The following statement contains a magic number: string otname = Util.TrimFromZero(Encoding.Unicode.GetString(Data' ofs + 8' 0x1A));
Magic Number,PKHeX.Core,Puff6,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen6\Puff6.cs,Reset,The following statement contains a magic number: Data[Offset + 1] = 2;
Magic Number,PKHeX.Core,Puff6,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen6\Puff6.cs,Reset,The following statement contains a magic number: Data[Offset + 2] = 3;
Magic Number,PKHeX.Core,Puff6,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen6\Puff6.cs,Reset,The following statement contains a magic number: Data[Offset + 2] = 3;
Magic Number,PKHeX.Core,Puff6,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen6\Puff6.cs,Reset,The following statement contains a magic number: Data[Offset + 3] = 4;
Magic Number,PKHeX.Core,Puff6,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen6\Puff6.cs,Reset,The following statement contains a magic number: Data[Offset + 3] = 4;
Magic Number,PKHeX.Core,Puff6,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen6\Puff6.cs,Reset,The following statement contains a magic number: Data[Offset + 4] = 5;
Magic Number,PKHeX.Core,Puff6,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen6\Puff6.cs,Reset,The following statement contains a magic number: Data[Offset + 4] = 5;
Magic Number,PKHeX.Core,Puff6,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen6\Puff6.cs,Reset,The following statement contains a magic number: PuffCount = 5;
Magic Number,PKHeX.Core,Puff6,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen6\Puff6.cs,MaxCheat,The following statement contains a magic number: Data[Offset + i] = (byte)(21 + Util.Rand.Next(2));
Magic Number,PKHeX.Core,Puff6,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen6\Puff6.cs,MaxCheat,The following statement contains a magic number: Data[Offset + i] = (byte)(21 + Util.Rand.Next(2));
Magic Number,PKHeX.Core,RecordBlock6,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen6\RecordBlock6.cs,GetRecord,The following statement contains a magic number: recordID < 100
Magic Number,PKHeX.Core,RecordBlock6,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen6\RecordBlock6.cs,GetRecord,The following statement contains a magic number: recordID < 200
Magic Number,PKHeX.Core,RecordBlock6,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen6\RecordBlock6.cs,SetRecord,The following statement contains a magic number: recordID < 100
Magic Number,PKHeX.Core,MaisonBlock,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen6\SuperTrainBlock.cs,GetMaisonStat,The following statement contains a magic number: return BitConverter.ToUInt16(Data' Offset + 0x1C0 + (2 * index));
Magic Number,PKHeX.Core,MaisonBlock,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen6\SuperTrainBlock.cs,SetMaisonStat,The following statement contains a magic number: BitConverter.GetBytes(value).CopyTo(Data' Offset + 0x1C0 + (2 * index));
Magic Number,PKHeX.Core,SuperTrainBlock,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen6\SuperTrainBlock.cs,GetIsDistributionUnlocked,The following statement contains a magic number: return SAV.GetFlag(Offset + 6' index);
Magic Number,PKHeX.Core,SuperTrainBlock,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen6\SuperTrainBlock.cs,SetIsDistributionUnlocked,The following statement contains a magic number: SAV.SetFlag(Offset + 6' index' value);
Magic Number,PKHeX.Core,SuperTrainBlock,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen6\SuperTrainBlock.cs,GetTime1,The following statement contains a magic number: return BitConverter.ToSingle(Data' Offset + 0x08 + (4 * index));
Magic Number,PKHeX.Core,SuperTrainBlock,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen6\SuperTrainBlock.cs,SetTime1,The following statement contains a magic number: BitConverter.GetBytes(value).CopyTo(Data' Offset + 0x08 + (4 * index));
Magic Number,PKHeX.Core,SuperTrainBlock,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen6\SuperTrainBlock.cs,GetTime2,The following statement contains a magic number: return BitConverter.ToSingle(Data' Offset + 0xC8 + (4 * index));
Magic Number,PKHeX.Core,SuperTrainBlock,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen6\SuperTrainBlock.cs,SetTime2,The following statement contains a magic number: BitConverter.GetBytes(value).CopyTo(Data' Offset + 0xC8 + (4 * index));
Magic Number,PKHeX.Core,SuperTrainBlock,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen6\SuperTrainBlock.cs,GetHolder1,The following statement contains a magic number: return new SuperTrainingSpeciesRecord(Data' Offset + 0x188 + (4 * index));
Magic Number,PKHeX.Core,SuperTrainBlock,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen6\SuperTrainBlock.cs,GetHolder2,The following statement contains a magic number: return new SuperTrainingSpeciesRecord(Data' Offset + 0x248 + (4 * index));
Magic Number,PKHeX.Core,TrainerFashion6,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen6\TrainerFashion6.cs,TrainerFashion6,The following statement contains a magic number: data1 = BitConverter.ToUInt32(data' 4 + offset);
Magic Number,PKHeX.Core,TrainerFashion6,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen6\TrainerFashion6.cs,TrainerFashion6,The following statement contains a magic number: data2 = BitConverter.ToUInt32(data' 8 + offset);
Magic Number,PKHeX.Core,TrainerFashion6,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen6\TrainerFashion6.cs,TrainerFashion6,The following statement contains a magic number: data3 = BitConverter.ToUInt32(data' 12 + offset);
Magic Number,PKHeX.Core,TrainerFashion6,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen6\TrainerFashion6.cs,Write,The following statement contains a magic number: BitConverter.GetBytes(data1).CopyTo(data' 4 + offset);
Magic Number,PKHeX.Core,TrainerFashion6,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen6\TrainerFashion6.cs,Write,The following statement contains a magic number: BitConverter.GetBytes(data2).CopyTo(data' 8 + offset);
Magic Number,PKHeX.Core,TrainerFashion6,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen6\TrainerFashion6.cs,Write,The following statement contains a magic number: BitConverter.GetBytes(data3).CopyTo(data' 12 + offset);
Magic Number,PKHeX.Core,BattleTree7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen7\BattleTree7.cs,GetTreeStreak,The following statement contains a magic number: battletype > 3
Magic Number,PKHeX.Core,BattleTree7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen7\BattleTree7.cs,SetTreeStreak,The following statement contains a magic number: battletype > 3
Magic Number,PKHeX.Core,BattleTree7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen7\BattleTree7.cs,GetStreakOffset,The following statement contains a magic number: int offset = 8 * battletype;
Magic Number,PKHeX.Core,BattleTree7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen7\BattleTree7.cs,GetStreakOffset,The following statement contains a magic number: offset += 2;
Magic Number,PKHeX.Core,BattleTree7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen7\BattleTree7.cs,GetStreakOffset,The following statement contains a magic number: offset += 4;
Magic Number,PKHeX.Core,BoxLayout7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen7\BoxLayout7.cs,LoadBattleTeams,The following statement contains a magic number: short val = BitConverter.ToInt16(Data' Offset + BattleBoxFlags + (i * 2));
Magic Number,PKHeX.Core,BoxLayout7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen7\BoxLayout7.cs,LoadBattleTeams,The following statement contains a magic number: int box = val >> 8;
Magic Number,PKHeX.Core,BoxLayout7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen7\BoxLayout7.cs,LoadBattleTeams,The following statement contains a magic number: i < TeamCount * 6
Magic Number,PKHeX.Core,BoxLayout7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen7\BoxLayout7.cs,SaveBattleTeams,The following statement contains a magic number: BitConverter.GetBytes((short)index).CopyTo(Data' Offset + BattleBoxFlags + (i * 2));
Magic Number,PKHeX.Core,BoxLayout7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen7\BoxLayout7.cs,SaveBattleTeams,The following statement contains a magic number: int val = (box << 8) | slot;
Magic Number,PKHeX.Core,BoxLayout7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen7\BoxLayout7.cs,SaveBattleTeams,The following statement contains a magic number: BitConverter.GetBytes((short)val).CopyTo(Data' Offset + BattleBoxFlags + (i * 2));
Magic Number,PKHeX.Core,BoxLayout7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen7\BoxLayout7.cs,SaveBattleTeams,The following statement contains a magic number: i < TeamCount * 6
Magic Number,PKHeX.Core,EventWork7b,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen7\EventWork7b.cs,GetFlag,The following statement contains a magic number: var offset = Offset + FlagStart + (index >> 3);
Magic Number,PKHeX.Core,EventWork7b,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen7\EventWork7b.cs,GetFlag,The following statement contains a magic number: return (current & (1 << (index & 7))) != 0;
Magic Number,PKHeX.Core,EventWork7b,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen7\EventWork7b.cs,SetFlag,The following statement contains a magic number: var offset = Offset + FlagStart + (index >> 3);
Magic Number,PKHeX.Core,EventWork7b,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen7\EventWork7b.cs,SetFlag,The following statement contains a magic number: var bit = 1 << (index & 7);
Magic Number,PKHeX.Core,FashionBlock7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen7\FashionBlock7.cs,Reset,The following statement contains a magic number: SAV.Data[Offset + ofs] = 3;
Magic Number,PKHeX.Core,FashionItem7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen7\FashionBlock7.cs,FashionItem7,The following statement contains a magic number: IsNew = (b & 2) != 0;
Magic Number,PKHeX.Core,GP1,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen7\GP1.cs,ConvertToPB7,The following statement contains a magic number: var pk = new PB7              {                  Version = (int) GameVersion.GO'                  Species = Species'                  AltForm = AltForm'                  Met_Location = 50' // Go complex                  Met_Year = Year - 2000'                  Met_Month = Month'                  Met_Day = Day'                  CurrentLevel = Level'                  Met_Level = Level'                  TID = sav.TID'                  SID = sav.SID'                  OT_Name = sav.OT'                  Ball = 4'                  Language = sav.Language'                  PID = Util.Rand32()'              };
Magic Number,PKHeX.Core,GP1,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen7\GP1.cs,ConvertToPB7,The following statement contains a magic number: var pk = new PB7              {                  Version = (int) GameVersion.GO'                  Species = Species'                  AltForm = AltForm'                  Met_Location = 50' // Go complex                  Met_Year = Year - 2000'                  Met_Month = Month'                  Met_Day = Day'                  CurrentLevel = Level'                  Met_Level = Level'                  TID = sav.TID'                  SID = sav.SID'                  OT_Name = sav.OT'                  Ball = 4'                  Language = sav.Language'                  PID = Util.Rand32()'              };
Magic Number,PKHeX.Core,GP1,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen7\GP1.cs,ConvertToPB7,The following statement contains a magic number: var pk = new PB7              {                  Version = (int) GameVersion.GO'                  Species = Species'                  AltForm = AltForm'                  Met_Location = 50' // Go complex                  Met_Year = Year - 2000'                  Met_Month = Month'                  Met_Day = Day'                  CurrentLevel = Level'                  Met_Level = Level'                  TID = sav.TID'                  SID = sav.SID'                  OT_Name = sav.OT'                  Ball = 4'                  Language = sav.Language'                  PID = Util.Rand32()'              };
Magic Number,PKHeX.Core,GP1,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen7\GP1.cs,ConvertToPB7,The following statement contains a magic number: pk.IV_DEF = pk.IV_SPD = (IV3 * 2) + 1;
Magic Number,PKHeX.Core,GP1,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen7\GP1.cs,ConvertToPB7,The following statement contains a magic number: pk.IV_ATK = pk.IV_SPA = (IV2 * 2) + 1;
Magic Number,PKHeX.Core,GP1,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen7\GP1.cs,ConvertToPB7,The following statement contains a magic number: pk.IV_HP = (IV1 * 2) + 1;
Magic Number,PKHeX.Core,GP1,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen7\GP1.cs,ConvertToPB7,The following statement contains a magic number: pk.IV_SPE = Util.Rand.Next(32);
Magic Number,PKHeX.Core,GP1,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen7\GP1.cs,ConvertToPB7,The following statement contains a magic number: const int av = 3;
Magic Number,PKHeX.Core,GP1,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen7\GP1.cs,ConvertToPB7,The following statement contains a magic number: pk.AwakeningSetAllTo(2);
Magic Number,PKHeX.Core,Misc7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen7\Misc7.cs,GetSurfScore,The following statement contains a magic number: (uint)recordID >= 4
Magic Number,PKHeX.Core,Misc7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen7\Misc7.cs,GetSurfScore,The following statement contains a magic number: return BitConverter.ToInt32(Data' Offset + 0x138 + (4 * recordID));
Magic Number,PKHeX.Core,Misc7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen7\Misc7.cs,SetSurfScore,The following statement contains a magic number: (uint)recordID >= 4
Magic Number,PKHeX.Core,Misc7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen7\Misc7.cs,SetSurfScore,The following statement contains a magic number: SAV.SetData(BitConverter.GetBytes(score)' Offset + 0x138 + (4 * recordID));
Magic Number,PKHeX.Core,PokeListHeader,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen7\PokeListHeader.cs,PokeListHeader,The following statement contains a magic number: PartyCount = PokeListInfo.Take(6).Count(z => z < MAX_SLOTS);
Magic Number,PKHeX.Core,PokeListHeader,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen7\PokeListHeader.cs,ClearPartySlot,The following statement contains a magic number: slot >= 6 || PartyCount <= 1
Magic Number,PKHeX.Core,PokeListHeader,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen7\PokeListHeader.cs,LoadPointerData,The following statement contains a magic number: var list = new int[7];
Magic Number,PKHeX.Core,PokeListHeader,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen7\PokeListHeader.cs,LoadPointerData,The following statement contains a magic number: list[i] = BitConverter.ToUInt16(Data' Offset + (i * 2));
Magic Number,PKHeX.Core,PokeListHeader,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen7\PokeListHeader.cs,SetPointerData,The following statement contains a magic number: BitConverter.GetBytes((ushort)vals[i]).CopyTo(Data' Offset + (i * 2));
Magic Number,PKHeX.Core,PokeListHeader,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen7\PokeListHeader.cs,GetPartyOffset,The following statement contains a magic number: (uint)slot >= 6
Magic Number,PKHeX.Core,PokeListHeader,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen7\PokeListHeader.cs,CompressStorage,The following statement contains a magic number: var arr = PokeListInfo.Take(7).ToArray();
Magic Number,PKHeX.Core,PokeListHeader,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen7\PokeListHeader.cs,CompressStorage,The following statement contains a magic number: var spec = SAV.Version == GameVersion.GP ? 25 : 133;
Magic Number,PKHeX.Core,PokeListHeader,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen7\PokeListHeader.cs,CompressStorage,The following statement contains a magic number: var spec = SAV.Version == GameVersion.GP ? 25 : 133;
Magic Number,PKHeX.Core,PokeListHeader,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen7\PokeListHeader.cs,CompressStorage,The following statement contains a magic number: arr[6] = index;
Magic Number,PKHeX.Core,QR7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen7\QR7.cs,GenerateQRData,The following statement contains a magic number: box = 31;
Magic Number,PKHeX.Core,QR7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen7\QR7.cs,GenerateQRData,The following statement contains a magic number: box > 31
Magic Number,PKHeX.Core,QR7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen7\QR7.cs,GenerateQRData,The following statement contains a magic number: slot = 29;
Magic Number,PKHeX.Core,QR7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen7\QR7.cs,GenerateQRData,The following statement contains a magic number: slot > 29
Magic Number,PKHeX.Core,ResortSave7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen7\ResortSave7.cs,GetPokebeanCount,The following statement contains a magic number: (uint)bean_id > 14
Magic Number,PKHeX.Core,ResortSave7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen7\ResortSave7.cs,SetPokebeanCount,The following statement contains a magic number: (uint)bean_id > 14
Magic Number,PKHeX.Core,ResortSave7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen7\ResortSave7.cs,SetPokebeanCount,The following statement contains a magic number: count = 255;
Magic Number,PKHeX.Core,ResortSave7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen7\ResortSave7.cs,SetPokebeanCount,The following statement contains a magic number: count > 255
Magic Number,PKHeX.Core,WB7Records,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen7\WB7Records.cs,GetFlagOffset,The following statement contains a magic number: return FlagStart + (flag / 8);
Magic Number,PKHeX.Core,WB7Records,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen7\WB7Records.cs,GetFlag,The following statement contains a magic number: var mask = 1 << (flag & 7);
Magic Number,PKHeX.Core,WB7Records,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen7\WB7Records.cs,SetFlag,The following statement contains a magic number: var mask = 1 << (flag & 7);
Magic Number,PKHeX.Core,WormholeInfoReader,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen7\WormholeInfoReader.cs,WormholeSlotToPokemon,The following statement contains a magic number: return mapid switch              {                  256 => WormholeSlotsRed[slot]'                  257 => WormholeSlotsGreen[slot]'                  258 => WormholeSlotsYellow[slot]'                  259 => WormholeSlotsBlue[slot]'                  _ => -1              };
Magic Number,PKHeX.Core,WormholeInfoReader,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen7\WormholeInfoReader.cs,WormholeSlotToPokemon,The following statement contains a magic number: return mapid switch              {                  256 => WormholeSlotsRed[slot]'                  257 => WormholeSlotsGreen[slot]'                  258 => WormholeSlotsYellow[slot]'                  259 => WormholeSlotsBlue[slot]'                  _ => -1              };
Magic Number,PKHeX.Core,WormholeInfoReader,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen7\WormholeInfoReader.cs,WormholeSlotToPokemon,The following statement contains a magic number: return mapid switch              {                  256 => WormholeSlotsRed[slot]'                  257 => WormholeSlotsGreen[slot]'                  258 => WormholeSlotsYellow[slot]'                  259 => WormholeSlotsBlue[slot]'                  _ => -1              };
Magic Number,PKHeX.Core,WormholeInfoReader,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen7\WormholeInfoReader.cs,WormholeSlotToPokemon,The following statement contains a magic number: return mapid switch              {                  256 => WormholeSlotsRed[slot]'                  257 => WormholeSlotsGreen[slot]'                  258 => WormholeSlotsYellow[slot]'                  259 => WormholeSlotsBlue[slot]'                  _ => -1              };
Magic Number,PKHeX.Core,Daycare8,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen8\Daycare8.cs,GetDaycare1SlotOccupied,The following statement contains a magic number: (uint) slot >= 2
Magic Number,PKHeX.Core,Daycare8,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen8\Daycare8.cs,GetDaycare2SlotOccupied,The following statement contains a magic number: (uint)slot >= 2
Magic Number,PKHeX.Core,Daycare8,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen8\Daycare8.cs,GetDaycare1StructOffset,The following statement contains a magic number: (uint)slot >= 2
Magic Number,PKHeX.Core,Daycare8,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen8\Daycare8.cs,GetDaycare2StructOffset,The following statement contains a magic number: (uint)slot >= 2
Magic Number,PKHeX.Core,EventWork8,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen8\EventWork8.cs,GetFlag,The following statement contains a magic number: var offset = Offset + FlagStart + (index >> 3);
Magic Number,PKHeX.Core,EventWork8,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen8\EventWork8.cs,GetFlag,The following statement contains a magic number: return (current & (1 << (index & 7))) != 0;
Magic Number,PKHeX.Core,EventWork8,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen8\EventWork8.cs,SetFlag,The following statement contains a magic number: var offset = Offset + FlagStart + (index >> 3);
Magic Number,PKHeX.Core,EventWork8,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen8\EventWork8.cs,SetFlag,The following statement contains a magic number: var bit = 1 << (index & 7);
Magic Number,PKHeX.Core,Fused8,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Gen8\Fused8.cs,GetFusedSlotOffset,The following statement contains a magic number: (uint)slot >= 3
Magic Number,PKHeX.Core,InventoryPouch,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Inventory\InventoryPouch.cs,IsValidItemAndCount,The following statement contains a magic number: SAV.Generation <= 2 && itemcnt > byte.MaxValue
Magic Number,PKHeX.Core,InventoryPouch,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Inventory\InventoryPouch.cs,IsValidItemAndCount,The following statement contains a magic number: HaX && SAV.Generation != 7
Magic Number,PKHeX.Core,InventoryPouch,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Inventory\InventoryPouch.cs,IsValidItemAndCount,The following statement contains a magic number: itemcnt = 2;
Magic Number,PKHeX.Core,InventoryPouch,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Inventory\InventoryPouch.cs,IsValidItemAndCount,The following statement contains a magic number: itemindex == 797 && itemcnt >= 2
Magic Number,PKHeX.Core,InventoryPouch,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Inventory\InventoryPouch.cs,IsValidItemAndCount,The following statement contains a magic number: itemindex == 797 && itemcnt >= 2
Magic Number,PKHeX.Core,InventoryPouch3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Inventory\InventoryPouch3.cs,GetPouch,The following statement contains a magic number: items[i] = new InventoryItem                  {                      Index = BitConverter.ToUInt16(Data' Offset + (i* 4))'                      Count = BitConverter.ToUInt16(Data' Offset + (i* 4) + 2) ^ (ushort) SecurityKey                  };
Magic Number,PKHeX.Core,InventoryPouch3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Inventory\InventoryPouch3.cs,GetPouch,The following statement contains a magic number: items[i] = new InventoryItem                  {                      Index = BitConverter.ToUInt16(Data' Offset + (i* 4))'                      Count = BitConverter.ToUInt16(Data' Offset + (i* 4) + 2) ^ (ushort) SecurityKey                  };
Magic Number,PKHeX.Core,InventoryPouch3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Inventory\InventoryPouch3.cs,GetPouch,The following statement contains a magic number: items[i] = new InventoryItem                  {                      Index = BitConverter.ToUInt16(Data' Offset + (i* 4))'                      Count = BitConverter.ToUInt16(Data' Offset + (i* 4) + 2) ^ (ushort) SecurityKey                  };
Magic Number,PKHeX.Core,InventoryPouch3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Inventory\InventoryPouch3.cs,SetPouch,The following statement contains a magic number: BitConverter.GetBytes((ushort) Items[i].Index).CopyTo(Data' Offset + (i* 4));
Magic Number,PKHeX.Core,InventoryPouch3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Inventory\InventoryPouch3.cs,SetPouch,The following statement contains a magic number: BitConverter.GetBytes((ushort)((ushort) Items[i].Count ^ (ushort) SecurityKey)).CopyTo(Data' Offset + (i* 4) + 2);
Magic Number,PKHeX.Core,InventoryPouch3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Inventory\InventoryPouch3.cs,SetPouch,The following statement contains a magic number: BitConverter.GetBytes((ushort)((ushort) Items[i].Count ^ (ushort) SecurityKey)).CopyTo(Data' Offset + (i* 4) + 2);
Magic Number,PKHeX.Core,InventoryPouch3GC,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Inventory\InventoryPouch3GC.cs,GetPouch,The following statement contains a magic number: items[i] = new InventoryItem                  {                      Index = BigEndian.ToUInt16(Data' Offset + (i * 4))'                      Count = BigEndian.ToUInt16(Data' Offset + (i * 4) + 2)                  };
Magic Number,PKHeX.Core,InventoryPouch3GC,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Inventory\InventoryPouch3GC.cs,GetPouch,The following statement contains a magic number: items[i] = new InventoryItem                  {                      Index = BigEndian.ToUInt16(Data' Offset + (i * 4))'                      Count = BigEndian.ToUInt16(Data' Offset + (i * 4) + 2)                  };
Magic Number,PKHeX.Core,InventoryPouch3GC,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Inventory\InventoryPouch3GC.cs,GetPouch,The following statement contains a magic number: items[i] = new InventoryItem                  {                      Index = BigEndian.ToUInt16(Data' Offset + (i * 4))'                      Count = BigEndian.ToUInt16(Data' Offset + (i * 4) + 2)                  };
Magic Number,PKHeX.Core,InventoryPouch3GC,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Inventory\InventoryPouch3GC.cs,SetPouch,The following statement contains a magic number: BigEndian.GetBytes((ushort)Items[i].Index).CopyTo(Data' Offset + (i * 4));
Magic Number,PKHeX.Core,InventoryPouch3GC,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Inventory\InventoryPouch3GC.cs,SetPouch,The following statement contains a magic number: BigEndian.GetBytes((ushort)Items[i].Count).CopyTo(Data' Offset + (i * 4) + 2);
Magic Number,PKHeX.Core,InventoryPouch3GC,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Inventory\InventoryPouch3GC.cs,SetPouch,The following statement contains a magic number: BigEndian.GetBytes((ushort)Items[i].Count).CopyTo(Data' Offset + (i * 4) + 2);
Magic Number,PKHeX.Core,InventoryPouch4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Inventory\InventoryPouch4.cs,GetPouch,The following statement contains a magic number: items[i] = new InventoryItem                  {                      Index = BitConverter.ToUInt16(Data' Offset + (i * 4))'                      Count = BitConverter.ToUInt16(Data' Offset + (i * 4) + 2)                  };
Magic Number,PKHeX.Core,InventoryPouch4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Inventory\InventoryPouch4.cs,GetPouch,The following statement contains a magic number: items[i] = new InventoryItem                  {                      Index = BitConverter.ToUInt16(Data' Offset + (i * 4))'                      Count = BitConverter.ToUInt16(Data' Offset + (i * 4) + 2)                  };
Magic Number,PKHeX.Core,InventoryPouch4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Inventory\InventoryPouch4.cs,GetPouch,The following statement contains a magic number: items[i] = new InventoryItem                  {                      Index = BitConverter.ToUInt16(Data' Offset + (i * 4))'                      Count = BitConverter.ToUInt16(Data' Offset + (i * 4) + 2)                  };
Magic Number,PKHeX.Core,InventoryPouch4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Inventory\InventoryPouch4.cs,SetPouch,The following statement contains a magic number: BitConverter.GetBytes((ushort)Items[i].Index).CopyTo(Data' Offset + (i * 4));
Magic Number,PKHeX.Core,InventoryPouch4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Inventory\InventoryPouch4.cs,SetPouch,The following statement contains a magic number: BitConverter.GetBytes((ushort)Items[i].Count).CopyTo(Data' Offset + (i * 4) + 2);
Magic Number,PKHeX.Core,InventoryPouch4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Inventory\InventoryPouch4.cs,SetPouch,The following statement contains a magic number: BitConverter.GetBytes((ushort)Items[i].Count).CopyTo(Data' Offset + (i * 4) + 2);
Magic Number,PKHeX.Core,InventoryPouch7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Inventory\InventoryPouch7.cs,GetPouch,The following statement contains a magic number: uint val = BitConverter.ToUInt32(Data' Offset + (i * 4));
Magic Number,PKHeX.Core,InventoryPouch7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Inventory\InventoryPouch7.cs,GetPouch,The following statement contains a magic number: items[i] = new InventoryItem                  {                      Index = (int)(val & 0x3FF)'                      Count = (int)(val >> 10 & 0x3FF)'                      New = (val & 0x40000000) != 0' // 30th bit is "NEW"                      FreeSpace = (val >> 20 & 0x3FF) != 0' // "FREE SPACE" sortIndex                  };
Magic Number,PKHeX.Core,InventoryPouch7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Inventory\InventoryPouch7.cs,GetPouch,The following statement contains a magic number: items[i] = new InventoryItem                  {                      Index = (int)(val & 0x3FF)'                      Count = (int)(val >> 10 & 0x3FF)'                      New = (val & 0x40000000) != 0' // 30th bit is "NEW"                      FreeSpace = (val >> 20 & 0x3FF) != 0' // "FREE SPACE" sortIndex                  };
Magic Number,PKHeX.Core,InventoryPouch7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Inventory\InventoryPouch7.cs,SetPouch,The following statement contains a magic number: val |= (uint)(Items[i].Count & 0x3FF) << 10;
Magic Number,PKHeX.Core,InventoryPouch7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Inventory\InventoryPouch7.cs,SetPouch,The following statement contains a magic number: BitConverter.GetBytes(val).CopyTo(Data' Offset + (i * 4));
Magic Number,PKHeX.Core,InventoryPouch7b,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Inventory\InventoryPouch7b.cs,GetPouch,The following statement contains a magic number: uint val = BitConverter.ToUInt32(Data' Offset + (i * 4));
Magic Number,PKHeX.Core,InventoryPouch7b,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Inventory\InventoryPouch7b.cs,SetPouch,The following statement contains a magic number: BitConverter.GetBytes(val).CopyTo(Data' Offset + (i * 4));
Magic Number,PKHeX.Core,InventoryPouch7b,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Inventory\InventoryPouch7b.cs,GetItem,The following statement contains a magic number: return new InventoryItem              {                  Index = (int)(val & 0x7FF)'                  Count = (int)(val >> 15 & 0x3FF)' // clamp to sane values                  New = (val & 0x40000000) != 0' // 30th bit is "NEW"              };
Magic Number,PKHeX.Core,InventoryPouch7b,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Inventory\InventoryPouch7b.cs,SetItem,The following statement contains a magic number: val |= (uint)(item.Count & 0x3FF) << 15;
Magic Number,PKHeX.Core,InventoryPouch7b,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Inventory\InventoryPouch7b.cs,GetSuggestedCount,The following statement contains a magic number: switch (t)              {                  // mixed regular battle items & mega stones                  case InventoryType.BattleItems when item > 100:                  // mixed regular items & key items                  case InventoryType.Items when Legal.Pouch_Regular_GG_Key.Contains((ushort)item):                      return Math.Min(1' requestVal);                    default:                      return requestVal;              }
Magic Number,PKHeX.Core,InventoryPouch8,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Inventory\InventoryPouch8.cs,GetPouch,The following statement contains a magic number: uint val = BitConverter.ToUInt32(Data' Offset + (i * 4));
Magic Number,PKHeX.Core,InventoryPouch8,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Inventory\InventoryPouch8.cs,SetPouch,The following statement contains a magic number: BitConverter.GetBytes(val).CopyTo(Data' Offset + (i * 4));
Magic Number,PKHeX.Core,InventoryPouch8,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Inventory\InventoryPouch8.cs,GetItem,The following statement contains a magic number: return new InventoryItem              {                  Index = (int)(val & 0x7FF)'                  Count = (int)(val >> 15 & 0x3FF)' // clamp to sane values                  New = (val & 0x40000000) != 0' // 30th bit is "NEW"              };
Magic Number,PKHeX.Core,InventoryPouch8,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Inventory\InventoryPouch8.cs,SetItem,The following statement contains a magic number: val |= (uint)(item.Count & 0x3FF) << 15;
Magic Number,PKHeX.Core,InventoryPouchGB,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Inventory\InventoryPouchGB.cs,SetPouch,The following statement contains a magic number: switch (Type)              {                  case InventoryType.TMHMs:                      foreach (InventoryItem t in Items)                      {                          int index = Array.FindIndex(LegalItems' it => t.Index == it);                          if (index < 0) // enforce correct pouch                              continue;                          Data[Offset + index] = (byte)t.Count;                      }                      break;                  case InventoryType.KeyItems:                      for (int i = 0; i < Items.Length; i++)                      {                          Data[Offset + i + 1] = (byte)Items[i].Index;                      }                      Data[Offset] = (byte)Count;                      Data[Offset + 1 + Count] = 0xFF;                      break;                  default:                      for (int i = 0; i < Items.Length; i++)                      {                          Data[Offset + (i * 2) + 1] = (byte)Items[i].Index;                          Data[Offset + (i * 2) + 2] = (byte)Items[i].Count;                      }                      Data[Offset] = (byte)Count;                      Data[Offset + 1 + (2 * Count)] = 0xFF;                      break;              }
Magic Number,PKHeX.Core,InventoryPouchGB,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Inventory\InventoryPouchGB.cs,SetPouch,The following statement contains a magic number: switch (Type)              {                  case InventoryType.TMHMs:                      foreach (InventoryItem t in Items)                      {                          int index = Array.FindIndex(LegalItems' it => t.Index == it);                          if (index < 0) // enforce correct pouch                              continue;                          Data[Offset + index] = (byte)t.Count;                      }                      break;                  case InventoryType.KeyItems:                      for (int i = 0; i < Items.Length; i++)                      {                          Data[Offset + i + 1] = (byte)Items[i].Index;                      }                      Data[Offset] = (byte)Count;                      Data[Offset + 1 + Count] = 0xFF;                      break;                  default:                      for (int i = 0; i < Items.Length; i++)                      {                          Data[Offset + (i * 2) + 1] = (byte)Items[i].Index;                          Data[Offset + (i * 2) + 2] = (byte)Items[i].Count;                      }                      Data[Offset] = (byte)Count;                      Data[Offset + 1 + (2 * Count)] = 0xFF;                      break;              }
Magic Number,PKHeX.Core,InventoryPouchGB,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Inventory\InventoryPouchGB.cs,SetPouch,The following statement contains a magic number: switch (Type)              {                  case InventoryType.TMHMs:                      foreach (InventoryItem t in Items)                      {                          int index = Array.FindIndex(LegalItems' it => t.Index == it);                          if (index < 0) // enforce correct pouch                              continue;                          Data[Offset + index] = (byte)t.Count;                      }                      break;                  case InventoryType.KeyItems:                      for (int i = 0; i < Items.Length; i++)                      {                          Data[Offset + i + 1] = (byte)Items[i].Index;                      }                      Data[Offset] = (byte)Count;                      Data[Offset + 1 + Count] = 0xFF;                      break;                  default:                      for (int i = 0; i < Items.Length; i++)                      {                          Data[Offset + (i * 2) + 1] = (byte)Items[i].Index;                          Data[Offset + (i * 2) + 2] = (byte)Items[i].Count;                      }                      Data[Offset] = (byte)Count;                      Data[Offset + 1 + (2 * Count)] = 0xFF;                      break;              }
Magic Number,PKHeX.Core,InventoryPouchGB,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Inventory\InventoryPouchGB.cs,SetPouch,The following statement contains a magic number: switch (Type)              {                  case InventoryType.TMHMs:                      foreach (InventoryItem t in Items)                      {                          int index = Array.FindIndex(LegalItems' it => t.Index == it);                          if (index < 0) // enforce correct pouch                              continue;                          Data[Offset + index] = (byte)t.Count;                      }                      break;                  case InventoryType.KeyItems:                      for (int i = 0; i < Items.Length; i++)                      {                          Data[Offset + i + 1] = (byte)Items[i].Index;                      }                      Data[Offset] = (byte)Count;                      Data[Offset + 1 + Count] = 0xFF;                      break;                  default:                      for (int i = 0; i < Items.Length; i++)                      {                          Data[Offset + (i * 2) + 1] = (byte)Items[i].Index;                          Data[Offset + (i * 2) + 2] = (byte)Items[i].Count;                      }                      Data[Offset] = (byte)Count;                      Data[Offset + 1 + (2 * Count)] = 0xFF;                      break;              }
Magic Number,PKHeX.Core,Mail2,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Mail\Mail2.cs,GetMailOffset,The following statement contains a magic number: return index < 6 ? (index * 0x2F) + 0x600 : ((index - 6) * 0x2F) + 0x835;
Magic Number,PKHeX.Core,Mail2,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Mail\Mail2.cs,GetMailOffset,The following statement contains a magic number: return index < 6 ? (index * 0x2F) + 0x600 : ((index - 6) * 0x2F) + 0x835;
Magic Number,PKHeX.Core,Mail3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Mail\Mail3.cs,ResetData,The following statement contains a magic number: x < 3
Magic Number,PKHeX.Core,Mail3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Mail\Mail3.cs,ResetData,The following statement contains a magic number: y < 3
Magic Number,PKHeX.Core,Mail4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Mail\Mail4.cs,ResetData,The following statement contains a magic number: i < 3
Magic Number,PKHeX.Core,Mail4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Mail\Mail4.cs,ResetData,The following statement contains a magic number: x < 4
Magic Number,PKHeX.Core,Mail4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Mail\Mail4.cs,ResetData,The following statement contains a magic number: y < 3
Magic Number,PKHeX.Core,Mail5,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Mail\Mail5.cs,ResetData,The following statement contains a magic number: i < 3
Magic Number,PKHeX.Core,Mail5,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Mail\Mail5.cs,ResetData,The following statement contains a magic number: x < 4
Magic Number,PKHeX.Core,Mail5,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Mail\Mail5.cs,ResetData,The following statement contains a magic number: y < 3
Magic Number,PKHeX.Core,FestaFacility,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Misc\FestaFacility.cs,GetMessage,The following statement contains a magic number: return index switch              {                  0 => MessageMeet'                  1 => MessagePart'                  2 => MessageMoved'                  3 => MessageDisappointed'                  _ => 0              };
Magic Number,PKHeX.Core,FestaFacility,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Misc\FestaFacility.cs,GetMessage,The following statement contains a magic number: return index switch              {                  0 => MessageMeet'                  1 => MessagePart'                  2 => MessageMoved'                  3 => MessageDisappointed'                  _ => 0              };
Magic Number,PKHeX.Core,FestaFacility,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Misc\FestaFacility.cs,SetMessage,The following statement contains a magic number: switch (index)              {                  case 0: MessageMeet = value; break;                  case 1: MessagePart = value; break;                  case 2: MessageMoved = value; break;                  case 3: MessageDisappointed = value; break;                  default: return;              }
Magic Number,PKHeX.Core,FestaFacility,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Misc\FestaFacility.cs,SetMessage,The following statement contains a magic number: switch (index)              {                  case 0: MessageMeet = value; break;                  case 1: MessagePart = value; break;                  case 2: MessageMoved = value; break;                  case 3: MessageDisappointed = value; break;                  default: return;              }
Magic Number,PKHeX.Core,OPower6,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\OPower\OPower6.cs,ToggleFlags,The following statement contains a magic number: int lvl = allEvents ? m.BaseCount : (m.BaseCount != 1 ? 3 : 0);
Magic Number,PKHeX.Core,Zukan,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\PokeDex\Zukan.cs,GetSeen,The following statement contains a magic number: i < 4
Magic Number,PKHeX.Core,Zukan,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\PokeDex\Zukan.cs,SetSeen,The following statement contains a magic number: i < 4
Magic Number,PKHeX.Core,Zukan,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\PokeDex\Zukan.cs,ClearSeen,The following statement contains a magic number: i < 4
Magic Number,PKHeX.Core,Zukan,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\PokeDex\Zukan.cs,GetIsSpeciesFormAnyDisplayed,The following statement contains a magic number: i < 4
Magic Number,PKHeX.Core,Zukan,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\PokeDex\Zukan.cs,GetIsSpeciesFormAnyDisplayed,The following statement contains a magic number: i < 4
Magic Number,PKHeX.Core,Zukan5,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\PokeDex\Zukan5.cs,GetDexLangFlag,The following statement contains a magic number: lang > 5
Magic Number,PKHeX.Core,Zukan5,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\PokeDex\Zukan5.cs,GetDexLangFlag,The following statement contains a magic number: (uint)lang > 5
Magic Number,PKHeX.Core,Zukan5,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\PokeDex\Zukan5.cs,SetAllDexFlagsLanguage,The following statement contains a magic number: bit < 493
Magic Number,PKHeX.Core,Zukan5,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\PokeDex\Zukan5.cs,GetIsSpeciesAnyDisplayed,The following statement contains a magic number: i < 4
Magic Number,PKHeX.Core,Zukan5,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\PokeDex\Zukan5.cs,SetFormFlags,The following statement contains a magic number: SetFormFlag(bit' 2 + shiny' value);
Magic Number,PKHeX.Core,Zukan5,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\PokeDex\Zukan5.cs,GetIsFormDisplayed,The following statement contains a magic number: GetFormFlag(index' 2)
Magic Number,PKHeX.Core,Zukan5,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\PokeDex\Zukan5.cs,GetIsFormDisplayed,The following statement contains a magic number: GetFormFlag(index' 3)
Magic Number,PKHeX.Core,Zukan6,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\PokeDex\Zukan6.cs,GetDexLangFlag,The following statement contains a magic number: lang > 5
Magic Number,PKHeX.Core,Zukan6,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\PokeDex\Zukan6.cs,GetDexLangFlag,The following statement contains a magic number: (uint)lang > 5
Magic Number,PKHeX.Core,Zukan6,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\PokeDex\Zukan6.cs,SetAllDexFlagsLanguage,The following statement contains a magic number: lbit < DexLangFlagByteCount << 3
Magic Number,PKHeX.Core,Zukan6,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\PokeDex\Zukan6.cs,SetFormFlags,The following statement contains a magic number: SetFormFlag(bit' 2 + shiny' value);
Magic Number,PKHeX.Core,Zukan6,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\PokeDex\Zukan6.cs,GetIsFormDisplayed,The following statement contains a magic number: GetFormFlag(index' 2)
Magic Number,PKHeX.Core,Zukan6,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\PokeDex\Zukan6.cs,GetIsFormDisplayed,The following statement contains a magic number: GetFormFlag(index' 3)
Magic Number,PKHeX.Core,Zukan6AO,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\PokeDex\Zukan6.cs,GetEncounterCount,The following statement contains a magic number: var ofs = PokeDex + 0x686 + (index * 2);
Magic Number,PKHeX.Core,Zukan6AO,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\PokeDex\Zukan6.cs,SetEncounterCount,The following statement contains a magic number: var ofs = PokeDex + 0x686 + (index * 2);
Magic Number,PKHeX.Core,Zukan7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\PokeDex\Zukan7.cs,SetAllDexSeenFlags,The following statement contains a magic number: species == 351
Magic Number,PKHeX.Core,Zukan7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\PokeDex\Zukan7.cs,SanitizeFormsToIterate,The following statement contains a magic number: switch (species)              {                  case 351: // Castform                      formStart = 0;                      formEnd = 3;                      return true;                    case 421: // Cherrim                  case 555: // Darmanitan                  case 648: // Meloetta                  case 746: // Wishiwashi                  case 778: // Mimikyu                  // Alolans                  case 020: // Raticate                  case 105: // Marowak                      formStart = 0;                      formEnd = 1;                      return true;                    case 735: // Gumshoos                  case 758: // Salazzle                  case 754: // Lurantis                  case 738: // Vikavolt                  case 784: // Kommo-o                  case 752: // Araquanid                  case 777: // Togedemaru                  case 743: // Ribombee                  case 744: // Rockruff                      break;                    case 774 when formIn <= 6: // Minior                      break; // don't give meteor forms except the first                    case 718 when formIn > 1:                      break;                  default:                      int count = USUM ? DexFormUtil.GetDexFormCountUSUM(species) : DexFormUtil.GetDexFormCountSM(species);                      formStart = formEnd = 0;                      return count < formIn;              }
Magic Number,PKHeX.Core,Zukan7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\PokeDex\Zukan7.cs,SanitizeFormsToIterate,The following statement contains a magic number: switch (species)              {                  case 351: // Castform                      formStart = 0;                      formEnd = 3;                      return true;                    case 421: // Cherrim                  case 555: // Darmanitan                  case 648: // Meloetta                  case 746: // Wishiwashi                  case 778: // Mimikyu                  // Alolans                  case 020: // Raticate                  case 105: // Marowak                      formStart = 0;                      formEnd = 1;                      return true;                    case 735: // Gumshoos                  case 758: // Salazzle                  case 754: // Lurantis                  case 738: // Vikavolt                  case 784: // Kommo-o                  case 752: // Araquanid                  case 777: // Togedemaru                  case 743: // Ribombee                  case 744: // Rockruff                      break;                    case 774 when formIn <= 6: // Minior                      break; // don't give meteor forms except the first                    case 718 when formIn > 1:                      break;                  default:                      int count = USUM ? DexFormUtil.GetDexFormCountUSUM(species) : DexFormUtil.GetDexFormCountSM(species);                      formStart = formEnd = 0;                      return count < formIn;              }
Magic Number,PKHeX.Core,Zukan7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\PokeDex\Zukan7.cs,SanitizeFormsToIterate,The following statement contains a magic number: switch (species)              {                  case 351: // Castform                      formStart = 0;                      formEnd = 3;                      return true;                    case 421: // Cherrim                  case 555: // Darmanitan                  case 648: // Meloetta                  case 746: // Wishiwashi                  case 778: // Mimikyu                  // Alolans                  case 020: // Raticate                  case 105: // Marowak                      formStart = 0;                      formEnd = 1;                      return true;                    case 735: // Gumshoos                  case 758: // Salazzle                  case 754: // Lurantis                  case 738: // Vikavolt                  case 784: // Kommo-o                  case 752: // Araquanid                  case 777: // Togedemaru                  case 743: // Ribombee                  case 744: // Rockruff                      break;                    case 774 when formIn <= 6: // Minior                      break; // don't give meteor forms except the first                    case 718 when formIn > 1:                      break;                  default:                      int count = USUM ? DexFormUtil.GetDexFormCountUSUM(species) : DexFormUtil.GetDexFormCountSM(species);                      formStart = formEnd = 0;                      return count < formIn;              }
Magic Number,PKHeX.Core,Zukan7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\PokeDex\Zukan7.cs,SanitizeFormsToIterate,The following statement contains a magic number: switch (species)              {                  case 351: // Castform                      formStart = 0;                      formEnd = 3;                      return true;                    case 421: // Cherrim                  case 555: // Darmanitan                  case 648: // Meloetta                  case 746: // Wishiwashi                  case 778: // Mimikyu                  // Alolans                  case 020: // Raticate                  case 105: // Marowak                      formStart = 0;                      formEnd = 1;                      return true;                    case 735: // Gumshoos                  case 758: // Salazzle                  case 754: // Lurantis                  case 738: // Vikavolt                  case 784: // Kommo-o                  case 752: // Araquanid                  case 777: // Togedemaru                  case 743: // Ribombee                  case 744: // Rockruff                      break;                    case 774 when formIn <= 6: // Minior                      break; // don't give meteor forms except the first                    case 718 when formIn > 1:                      break;                  default:                      int count = USUM ? DexFormUtil.GetDexFormCountUSUM(species) : DexFormUtil.GetDexFormCountSM(species);                      formStart = formEnd = 0;                      return count < formIn;              }
Magic Number,PKHeX.Core,Zukan7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\PokeDex\Zukan7.cs,SanitizeFormsToIterate,The following statement contains a magic number: switch (species)              {                  case 351: // Castform                      formStart = 0;                      formEnd = 3;                      return true;                    case 421: // Cherrim                  case 555: // Darmanitan                  case 648: // Meloetta                  case 746: // Wishiwashi                  case 778: // Mimikyu                  // Alolans                  case 020: // Raticate                  case 105: // Marowak                      formStart = 0;                      formEnd = 1;                      return true;                    case 735: // Gumshoos                  case 758: // Salazzle                  case 754: // Lurantis                  case 738: // Vikavolt                  case 784: // Kommo-o                  case 752: // Araquanid                  case 777: // Togedemaru                  case 743: // Ribombee                  case 744: // Rockruff                      break;                    case 774 when formIn <= 6: // Minior                      break; // don't give meteor forms except the first                    case 718 when formIn > 1:                      break;                  default:                      int count = USUM ? DexFormUtil.GetDexFormCountUSUM(species) : DexFormUtil.GetDexFormCountSM(species);                      formStart = formEnd = 0;                      return count < formIn;              }
Magic Number,PKHeX.Core,Zukan7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\PokeDex\Zukan7.cs,SanitizeFormsToIterate,The following statement contains a magic number: switch (species)              {                  case 351: // Castform                      formStart = 0;                      formEnd = 3;                      return true;                    case 421: // Cherrim                  case 555: // Darmanitan                  case 648: // Meloetta                  case 746: // Wishiwashi                  case 778: // Mimikyu                  // Alolans                  case 020: // Raticate                  case 105: // Marowak                      formStart = 0;                      formEnd = 1;                      return true;                    case 735: // Gumshoos                  case 758: // Salazzle                  case 754: // Lurantis                  case 738: // Vikavolt                  case 784: // Kommo-o                  case 752: // Araquanid                  case 777: // Togedemaru                  case 743: // Ribombee                  case 744: // Rockruff                      break;                    case 774 when formIn <= 6: // Minior                      break; // don't give meteor forms except the first                    case 718 when formIn > 1:                      break;                  default:                      int count = USUM ? DexFormUtil.GetDexFormCountUSUM(species) : DexFormUtil.GetDexFormCountSM(species);                      formStart = formEnd = 0;                      return count < formIn;              }
Magic Number,PKHeX.Core,Zukan7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\PokeDex\Zukan7.cs,SanitizeFormsToIterate,The following statement contains a magic number: switch (species)              {                  case 351: // Castform                      formStart = 0;                      formEnd = 3;                      return true;                    case 421: // Cherrim                  case 555: // Darmanitan                  case 648: // Meloetta                  case 746: // Wishiwashi                  case 778: // Mimikyu                  // Alolans                  case 020: // Raticate                  case 105: // Marowak                      formStart = 0;                      formEnd = 1;                      return true;                    case 735: // Gumshoos                  case 758: // Salazzle                  case 754: // Lurantis                  case 738: // Vikavolt                  case 784: // Kommo-o                  case 752: // Araquanid                  case 777: // Togedemaru                  case 743: // Ribombee                  case 744: // Rockruff                      break;                    case 774 when formIn <= 6: // Minior                      break; // don't give meteor forms except the first                    case 718 when formIn > 1:                      break;                  default:                      int count = USUM ? DexFormUtil.GetDexFormCountUSUM(species) : DexFormUtil.GetDexFormCountSM(species);                      formStart = formEnd = 0;                      return count < formIn;              }
Magic Number,PKHeX.Core,Zukan7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\PokeDex\Zukan7.cs,SanitizeFormsToIterate,The following statement contains a magic number: switch (species)              {                  case 351: // Castform                      formStart = 0;                      formEnd = 3;                      return true;                    case 421: // Cherrim                  case 555: // Darmanitan                  case 648: // Meloetta                  case 746: // Wishiwashi                  case 778: // Mimikyu                  // Alolans                  case 020: // Raticate                  case 105: // Marowak                      formStart = 0;                      formEnd = 1;                      return true;                    case 735: // Gumshoos                  case 758: // Salazzle                  case 754: // Lurantis                  case 738: // Vikavolt                  case 784: // Kommo-o                  case 752: // Araquanid                  case 777: // Togedemaru                  case 743: // Ribombee                  case 744: // Rockruff                      break;                    case 774 when formIn <= 6: // Minior                      break; // don't give meteor forms except the first                    case 718 when formIn > 1:                      break;                  default:                      int count = USUM ? DexFormUtil.GetDexFormCountUSUM(species) : DexFormUtil.GetDexFormCountSM(species);                      formStart = formEnd = 0;                      return count < formIn;              }
Magic Number,PKHeX.Core,Zukan7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\PokeDex\Zukan7.cs,SanitizeFormsToIterate,The following statement contains a magic number: switch (species)              {                  case 351: // Castform                      formStart = 0;                      formEnd = 3;                      return true;                    case 421: // Cherrim                  case 555: // Darmanitan                  case 648: // Meloetta                  case 746: // Wishiwashi                  case 778: // Mimikyu                  // Alolans                  case 020: // Raticate                  case 105: // Marowak                      formStart = 0;                      formEnd = 1;                      return true;                    case 735: // Gumshoos                  case 758: // Salazzle                  case 754: // Lurantis                  case 738: // Vikavolt                  case 784: // Kommo-o                  case 752: // Araquanid                  case 777: // Togedemaru                  case 743: // Ribombee                  case 744: // Rockruff                      break;                    case 774 when formIn <= 6: // Minior                      break; // don't give meteor forms except the first                    case 718 when formIn > 1:                      break;                  default:                      int count = USUM ? DexFormUtil.GetDexFormCountUSUM(species) : DexFormUtil.GetDexFormCountSM(species);                      formStart = formEnd = 0;                      return count < formIn;              }
Magic Number,PKHeX.Core,Zukan7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\PokeDex\Zukan7.cs,SanitizeFormsToIterate,The following statement contains a magic number: switch (species)              {                  case 351: // Castform                      formStart = 0;                      formEnd = 3;                      return true;                    case 421: // Cherrim                  case 555: // Darmanitan                  case 648: // Meloetta                  case 746: // Wishiwashi                  case 778: // Mimikyu                  // Alolans                  case 020: // Raticate                  case 105: // Marowak                      formStart = 0;                      formEnd = 1;                      return true;                    case 735: // Gumshoos                  case 758: // Salazzle                  case 754: // Lurantis                  case 738: // Vikavolt                  case 784: // Kommo-o                  case 752: // Araquanid                  case 777: // Togedemaru                  case 743: // Ribombee                  case 744: // Rockruff                      break;                    case 774 when formIn <= 6: // Minior                      break; // don't give meteor forms except the first                    case 718 when formIn > 1:                      break;                  default:                      int count = USUM ? DexFormUtil.GetDexFormCountUSUM(species) : DexFormUtil.GetDexFormCountSM(species);                      formStart = formEnd = 0;                      return count < formIn;              }
Magic Number,PKHeX.Core,Zukan7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\PokeDex\Zukan7.cs,SanitizeFormsToIterate,The following statement contains a magic number: switch (species)              {                  case 351: // Castform                      formStart = 0;                      formEnd = 3;                      return true;                    case 421: // Cherrim                  case 555: // Darmanitan                  case 648: // Meloetta                  case 746: // Wishiwashi                  case 778: // Mimikyu                  // Alolans                  case 020: // Raticate                  case 105: // Marowak                      formStart = 0;                      formEnd = 1;                      return true;                    case 735: // Gumshoos                  case 758: // Salazzle                  case 754: // Lurantis                  case 738: // Vikavolt                  case 784: // Kommo-o                  case 752: // Araquanid                  case 777: // Togedemaru                  case 743: // Ribombee                  case 744: // Rockruff                      break;                    case 774 when formIn <= 6: // Minior                      break; // don't give meteor forms except the first                    case 718 when formIn > 1:                      break;                  default:                      int count = USUM ? DexFormUtil.GetDexFormCountUSUM(species) : DexFormUtil.GetDexFormCountSM(species);                      formStart = formEnd = 0;                      return count < formIn;              }
Magic Number,PKHeX.Core,Zukan7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\PokeDex\Zukan7.cs,SanitizeFormsToIterate,The following statement contains a magic number: switch (species)              {                  case 351: // Castform                      formStart = 0;                      formEnd = 3;                      return true;                    case 421: // Cherrim                  case 555: // Darmanitan                  case 648: // Meloetta                  case 746: // Wishiwashi                  case 778: // Mimikyu                  // Alolans                  case 020: // Raticate                  case 105: // Marowak                      formStart = 0;                      formEnd = 1;                      return true;                    case 735: // Gumshoos                  case 758: // Salazzle                  case 754: // Lurantis                  case 738: // Vikavolt                  case 784: // Kommo-o                  case 752: // Araquanid                  case 777: // Togedemaru                  case 743: // Ribombee                  case 744: // Rockruff                      break;                    case 774 when formIn <= 6: // Minior                      break; // don't give meteor forms except the first                    case 718 when formIn > 1:                      break;                  default:                      int count = USUM ? DexFormUtil.GetDexFormCountUSUM(species) : DexFormUtil.GetDexFormCountSM(species);                      formStart = formEnd = 0;                      return count < formIn;              }
Magic Number,PKHeX.Core,Zukan7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\PokeDex\Zukan7.cs,SanitizeFormsToIterate,The following statement contains a magic number: switch (species)              {                  case 351: // Castform                      formStart = 0;                      formEnd = 3;                      return true;                    case 421: // Cherrim                  case 555: // Darmanitan                  case 648: // Meloetta                  case 746: // Wishiwashi                  case 778: // Mimikyu                  // Alolans                  case 020: // Raticate                  case 105: // Marowak                      formStart = 0;                      formEnd = 1;                      return true;                    case 735: // Gumshoos                  case 758: // Salazzle                  case 754: // Lurantis                  case 738: // Vikavolt                  case 784: // Kommo-o                  case 752: // Araquanid                  case 777: // Togedemaru                  case 743: // Ribombee                  case 744: // Rockruff                      break;                    case 774 when formIn <= 6: // Minior                      break; // don't give meteor forms except the first                    case 718 when formIn > 1:                      break;                  default:                      int count = USUM ? DexFormUtil.GetDexFormCountUSUM(species) : DexFormUtil.GetDexFormCountSM(species);                      formStart = formEnd = 0;                      return count < formIn;              }
Magic Number,PKHeX.Core,Zukan7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\PokeDex\Zukan7.cs,SanitizeFormsToIterate,The following statement contains a magic number: switch (species)              {                  case 351: // Castform                      formStart = 0;                      formEnd = 3;                      return true;                    case 421: // Cherrim                  case 555: // Darmanitan                  case 648: // Meloetta                  case 746: // Wishiwashi                  case 778: // Mimikyu                  // Alolans                  case 020: // Raticate                  case 105: // Marowak                      formStart = 0;                      formEnd = 1;                      return true;                    case 735: // Gumshoos                  case 758: // Salazzle                  case 754: // Lurantis                  case 738: // Vikavolt                  case 784: // Kommo-o                  case 752: // Araquanid                  case 777: // Togedemaru                  case 743: // Ribombee                  case 744: // Rockruff                      break;                    case 774 when formIn <= 6: // Minior                      break; // don't give meteor forms except the first                    case 718 when formIn > 1:                      break;                  default:                      int count = USUM ? DexFormUtil.GetDexFormCountUSUM(species) : DexFormUtil.GetDexFormCountSM(species);                      formStart = formEnd = 0;                      return count < formIn;              }
Magic Number,PKHeX.Core,Zukan7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\PokeDex\Zukan7.cs,SanitizeFormsToIterate,The following statement contains a magic number: switch (species)              {                  case 351: // Castform                      formStart = 0;                      formEnd = 3;                      return true;                    case 421: // Cherrim                  case 555: // Darmanitan                  case 648: // Meloetta                  case 746: // Wishiwashi                  case 778: // Mimikyu                  // Alolans                  case 020: // Raticate                  case 105: // Marowak                      formStart = 0;                      formEnd = 1;                      return true;                    case 735: // Gumshoos                  case 758: // Salazzle                  case 754: // Lurantis                  case 738: // Vikavolt                  case 784: // Kommo-o                  case 752: // Araquanid                  case 777: // Togedemaru                  case 743: // Ribombee                  case 744: // Rockruff                      break;                    case 774 when formIn <= 6: // Minior                      break; // don't give meteor forms except the first                    case 718 when formIn > 1:                      break;                  default:                      int count = USUM ? DexFormUtil.GetDexFormCountUSUM(species) : DexFormUtil.GetDexFormCountSM(species);                      formStart = formEnd = 0;                      return count < formIn;              }
Magic Number,PKHeX.Core,Zukan7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\PokeDex\Zukan7.cs,SanitizeFormsToIterate,The following statement contains a magic number: switch (species)              {                  case 351: // Castform                      formStart = 0;                      formEnd = 3;                      return true;                    case 421: // Cherrim                  case 555: // Darmanitan                  case 648: // Meloetta                  case 746: // Wishiwashi                  case 778: // Mimikyu                  // Alolans                  case 020: // Raticate                  case 105: // Marowak                      formStart = 0;                      formEnd = 1;                      return true;                    case 735: // Gumshoos                  case 758: // Salazzle                  case 754: // Lurantis                  case 738: // Vikavolt                  case 784: // Kommo-o                  case 752: // Araquanid                  case 777: // Togedemaru                  case 743: // Ribombee                  case 744: // Rockruff                      break;                    case 774 when formIn <= 6: // Minior                      break; // don't give meteor forms except the first                    case 718 when formIn > 1:                      break;                  default:                      int count = USUM ? DexFormUtil.GetDexFormCountUSUM(species) : DexFormUtil.GetDexFormCountSM(species);                      formStart = formEnd = 0;                      return count < formIn;              }
Magic Number,PKHeX.Core,Zukan7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\PokeDex\Zukan7.cs,SanitizeFormsToIterate,The following statement contains a magic number: switch (species)              {                  case 351: // Castform                      formStart = 0;                      formEnd = 3;                      return true;                    case 421: // Cherrim                  case 555: // Darmanitan                  case 648: // Meloetta                  case 746: // Wishiwashi                  case 778: // Mimikyu                  // Alolans                  case 020: // Raticate                  case 105: // Marowak                      formStart = 0;                      formEnd = 1;                      return true;                    case 735: // Gumshoos                  case 758: // Salazzle                  case 754: // Lurantis                  case 738: // Vikavolt                  case 784: // Kommo-o                  case 752: // Araquanid                  case 777: // Togedemaru                  case 743: // Ribombee                  case 744: // Rockruff                      break;                    case 774 when formIn <= 6: // Minior                      break; // don't give meteor forms except the first                    case 718 when formIn > 1:                      break;                  default:                      int count = USUM ? DexFormUtil.GetDexFormCountUSUM(species) : DexFormUtil.GetDexFormCountSM(species);                      formStart = formEnd = 0;                      return count < formIn;              }
Magic Number,PKHeX.Core,Zukan7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\PokeDex\Zukan7.cs,SanitizeFormsToIterate,The following statement contains a magic number: switch (species)              {                  case 351: // Castform                      formStart = 0;                      formEnd = 3;                      return true;                    case 421: // Cherrim                  case 555: // Darmanitan                  case 648: // Meloetta                  case 746: // Wishiwashi                  case 778: // Mimikyu                  // Alolans                  case 020: // Raticate                  case 105: // Marowak                      formStart = 0;                      formEnd = 1;                      return true;                    case 735: // Gumshoos                  case 758: // Salazzle                  case 754: // Lurantis                  case 738: // Vikavolt                  case 784: // Kommo-o                  case 752: // Araquanid                  case 777: // Togedemaru                  case 743: // Ribombee                  case 744: // Rockruff                      break;                    case 774 when formIn <= 6: // Minior                      break; // don't give meteor forms except the first                    case 718 when formIn > 1:                      break;                  default:                      int count = USUM ? DexFormUtil.GetDexFormCountUSUM(species) : DexFormUtil.GetDexFormCountSM(species);                      formStart = formEnd = 0;                      return count < formIn;              }
Magic Number,PKHeX.Core,Zukan7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\PokeDex\Zukan7.cs,SanitizeFormsToIterate,The following statement contains a magic number: switch (species)              {                  case 351: // Castform                      formStart = 0;                      formEnd = 3;                      return true;                    case 421: // Cherrim                  case 555: // Darmanitan                  case 648: // Meloetta                  case 746: // Wishiwashi                  case 778: // Mimikyu                  // Alolans                  case 020: // Raticate                  case 105: // Marowak                      formStart = 0;                      formEnd = 1;                      return true;                    case 735: // Gumshoos                  case 758: // Salazzle                  case 754: // Lurantis                  case 738: // Vikavolt                  case 784: // Kommo-o                  case 752: // Araquanid                  case 777: // Togedemaru                  case 743: // Ribombee                  case 744: // Rockruff                      break;                    case 774 when formIn <= 6: // Minior                      break; // don't give meteor forms except the first                    case 718 when formIn > 1:                      break;                  default:                      int count = USUM ? DexFormUtil.GetDexFormCountUSUM(species) : DexFormUtil.GetDexFormCountSM(species);                      formStart = formEnd = 0;                      return count < formIn;              }
Magic Number,PKHeX.Core,Zukan7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\PokeDex\Zukan7.cs,SanitizeFormsToIterate,The following statement contains a magic number: switch (species)              {                  case 351: // Castform                      formStart = 0;                      formEnd = 3;                      return true;                    case 421: // Cherrim                  case 555: // Darmanitan                  case 648: // Meloetta                  case 746: // Wishiwashi                  case 778: // Mimikyu                  // Alolans                  case 020: // Raticate                  case 105: // Marowak                      formStart = 0;                      formEnd = 1;                      return true;                    case 735: // Gumshoos                  case 758: // Salazzle                  case 754: // Lurantis                  case 738: // Vikavolt                  case 784: // Kommo-o                  case 752: // Araquanid                  case 777: // Togedemaru                  case 743: // Ribombee                  case 744: // Rockruff                      break;                    case 774 when formIn <= 6: // Minior                      break; // don't give meteor forms except the first                    case 718 when formIn > 1:                      break;                  default:                      int count = USUM ? DexFormUtil.GetDexFormCountUSUM(species) : DexFormUtil.GetDexFormCountSM(species);                      formStart = formEnd = 0;                      return count < formIn;              }
Magic Number,PKHeX.Core,Zukan7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\PokeDex\Zukan7.cs,SanitizeFormsToIterate,The following statement contains a magic number: switch (species)              {                  case 351: // Castform                      formStart = 0;                      formEnd = 3;                      return true;                    case 421: // Cherrim                  case 555: // Darmanitan                  case 648: // Meloetta                  case 746: // Wishiwashi                  case 778: // Mimikyu                  // Alolans                  case 020: // Raticate                  case 105: // Marowak                      formStart = 0;                      formEnd = 1;                      return true;                    case 735: // Gumshoos                  case 758: // Salazzle                  case 754: // Lurantis                  case 738: // Vikavolt                  case 784: // Kommo-o                  case 752: // Araquanid                  case 777: // Togedemaru                  case 743: // Ribombee                  case 744: // Rockruff                      break;                    case 774 when formIn <= 6: // Minior                      break; // don't give meteor forms except the first                    case 718 when formIn > 1:                      break;                  default:                      int count = USUM ? DexFormUtil.GetDexFormCountUSUM(species) : DexFormUtil.GetDexFormCountSM(species);                      formStart = formEnd = 0;                      return count < formIn;              }
Magic Number,PKHeX.Core,Zukan7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\PokeDex\Zukan7.cs,GetDexLangFlag,The following statement contains a magic number: lang > 10 || lang == 6 || lang <= 0
Magic Number,PKHeX.Core,Zukan7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\PokeDex\Zukan7.cs,GetDexLangFlag,The following statement contains a magic number: lang > 10 || lang == 6 || lang <= 0
Magic Number,PKHeX.Core,Zukan7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\PokeDex\Zukan7.cs,GetDexLangFlag,The following statement contains a magic number: lang >= 7
Magic Number,PKHeX.Core,Zukan7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\PokeDex\Zukan7.cs,SetSpindaDexData,The following statement contains a magic number: int shift = (pkm.Gender & 1) | (pkm.IsShiny ? 2 : 0);
Magic Number,PKHeX.Core,Zukan7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\PokeDex\Zukan7.cs,SetSpindaDexData,The following statement contains a magic number: var flag1 = (1 << (shift + 4));
Magic Number,PKHeX.Core,Zukan7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\PokeDex\Zukan7.cs,SetSpindaDexData,The following statement contains a magic number: BitConverter.GetBytes(pkm.EncryptionConstant).CopyTo(SAV.Data' PokeDex + 0x8E8 + (shift * 4));
Magic Number,PKHeX.Core,Zukan7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\PokeDex\Zukan7.cs,GetBaseSpeciesGenderValue,The following statement contains a magic number: const int meow = 678;
Magic Number,PKHeX.Core,Zukan7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\PokeDex\Zukan7.cs,GetBaseSpeciesGenderValue,The following statement contains a magic number: return index < SAV.MaxSpeciesID ? 0 : 254;
Magic Number,PKHeX.Core,Zukan7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\PokeDex\Zukan7.cs,SetAllDexFlagsLanguage,The following statement contains a magic number: lbit < DexLangFlagByteCount << 3
Magic Number,PKHeX.Core,Zukan7b,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\PokeDex\Zukan7b.cs,GetSizeData,The following statement contains a magic number: weight = BitConverter.ToUInt16(SAV.Data' ofs + 2);
Magic Number,PKHeX.Core,Zukan7b,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\PokeDex\Zukan7b.cs,SetSizeData,The following statement contains a magic number: var minWeight = BitConverter.ToUInt16(SAV.Data' ofs + 2);
Magic Number,PKHeX.Core,Zukan7b,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\PokeDex\Zukan7b.cs,SetSizeData,The following statement contains a magic number: var tree = EvolutionTree.GetEvolutionTree(pkm' 7);
Magic Number,PKHeX.Core,Zukan7b,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\PokeDex\Zukan7b.cs,SetSizeData,The following statement contains a magic number: BitConverter.GetBytes((ushort)(weight)).CopyTo(SAV.Data' ofs + 2);
Magic Number,PKHeX.Core,Zukan7b,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\PokeDex\Zukan7b.cs,TryGetSizeEntryIndex,The following statement contains a magic number: form == 0 && species <= 151
Magic Number,PKHeX.Core,Zukan7b,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\PokeDex\Zukan7b.cs,TryGetSizeEntryIndex,The following statement contains a magic number: index = SizeDexInfoTable[i + 2];
Magic Number,PKHeX.Core,Zukan7b,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\PokeDex\Zukan7b.cs,GetSaneFormsToIterate,The following statement contains a magic number: switch (species)              {                  case 020: // Raticate                  case 105: // Marowak                      formStart = 0;                      formEnd = 1;                      return true;                    default:                      int count = DexFormUtil.GetDexFormCountGG(species);                      formStart = formEnd = 0;                      return count < formIn;              }
Magic Number,PKHeX.Core,Zukan7b,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\PokeDex\Zukan7b.cs,GetSaneFormsToIterate,The following statement contains a magic number: switch (species)              {                  case 020: // Raticate                  case 105: // Marowak                      formStart = 0;                      formEnd = 1;                      return true;                    default:                      int count = DexFormUtil.GetDexFormCountGG(species);                      formStart = formEnd = 0;                      return count < formIn;              }
Magic Number,PKHeX.Core,Zukan8,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\PokeDex\Zukan8.cs,GetDexLangFlag,The following statement contains a magic number: lang > 10 || lang == 6 || lang <= 0
Magic Number,PKHeX.Core,Zukan8,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\PokeDex\Zukan8.cs,GetDexLangFlag,The following statement contains a magic number: lang > 10 || lang == 6 || lang <= 0
Magic Number,PKHeX.Core,Zukan8,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\PokeDex\Zukan8.cs,GetDexLangFlag,The following statement contains a magic number: lang >= 7
Magic Number,PKHeX.Core,Zukan8,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\PokeDex\Zukan8.cs,GetSeenRegion,The following statement contains a magic number: (uint)form > 63
Magic Number,PKHeX.Core,Zukan8,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\PokeDex\Zukan8.cs,SetSeenRegion,The following statement contains a magic number: (uint)form > 63
Magic Number,PKHeX.Core,Zukan8,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\PokeDex\Zukan8.cs,GetAltFormDisplayed,The following statement contains a magic number: return (val >> 15) & 0x1FFF;
Magic Number,PKHeX.Core,Zukan8,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\PokeDex\Zukan8.cs,SetAltFormDisplayed,The following statement contains a magic number: uint nv = (val & ~(0x1FFFu << 15)) | ((value & 0x1FFF) << 15);
Magic Number,PKHeX.Core,Zukan8,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\PokeDex\Zukan8.cs,SetAltFormDisplayed,The following statement contains a magic number: uint nv = (val & ~(0x1FFFu << 15)) | ((value & 0x1FFF) << 15);
Magic Number,PKHeX.Core,Zukan8,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\PokeDex\Zukan8.cs,GetGenderDisplayed,The following statement contains a magic number: return (val >> 29) & 3;
Magic Number,PKHeX.Core,Zukan8,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\PokeDex\Zukan8.cs,GetGenderDisplayed,The following statement contains a magic number: return (val >> 29) & 3;
Magic Number,PKHeX.Core,Zukan8,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\PokeDex\Zukan8.cs,SetGenderDisplayed,The following statement contains a magic number: uint nv = (val & ~(3u << 29)) | ((value & 3) << 29);
Magic Number,PKHeX.Core,Zukan8,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\PokeDex\Zukan8.cs,SetGenderDisplayed,The following statement contains a magic number: uint nv = (val & ~(3u << 29)) | ((value & 3) << 29);
Magic Number,PKHeX.Core,Zukan8,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\PokeDex\Zukan8.cs,SetGenderDisplayed,The following statement contains a magic number: uint nv = (val & ~(3u << 29)) | ((value & 3) << 29);
Magic Number,PKHeX.Core,Zukan8,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\PokeDex\Zukan8.cs,SetGenderDisplayed,The following statement contains a magic number: uint nv = (val & ~(3u << 29)) | ((value & 3) << 29);
Magic Number,PKHeX.Core,Zukan8,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\PokeDex\Zukan8.cs,SetDex,The following statement contains a magic number: var s = shiny ? 2 : 0;
Magic Number,PKHeX.Core,Zukan8,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\PokeDex\Zukan8.cs,SetDex,The following statement contains a magic number: form *= 7;
Magic Number,PKHeX.Core,Zukan8,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\PokeDex\Zukan8.cs,SeenAll,The following statement contains a magic number: SetSeenRegion(species' bitIndex' 2' value);
Magic Number,PKHeX.Core,Zukan8,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\PokeDex\Zukan8.cs,SeenAll,The following statement contains a magic number: SetSeenRegion(species' bitIndex' 3' value);
Magic Number,PKHeX.Core,Zukan8,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\PokeDex\Zukan8.cs,ClearGigantamaxFlags,The following statement contains a magic number: SetSeenRegion(species' 63' 0' false);
Magic Number,PKHeX.Core,Zukan8,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\PokeDex\Zukan8.cs,ClearGigantamaxFlags,The following statement contains a magic number: SetSeenRegion(species' 63' 1' false);
Magic Number,PKHeX.Core,Zukan8,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\PokeDex\Zukan8.cs,ClearGigantamaxFlags,The following statement contains a magic number: SetSeenRegion(species' 63' 2' false);
Magic Number,PKHeX.Core,Zukan8,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\PokeDex\Zukan8.cs,ClearGigantamaxFlags,The following statement contains a magic number: SetSeenRegion(species' 63' 2' false);
Magic Number,PKHeX.Core,Zukan8,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\PokeDex\Zukan8.cs,ClearGigantamaxFlags,The following statement contains a magic number: SetSeenRegion(species' 63' 3' false);
Magic Number,PKHeX.Core,Zukan8,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\PokeDex\Zukan8.cs,ClearGigantamaxFlags,The following statement contains a magic number: SetSeenRegion(species' 63' 3' false);
Magic Number,PKHeX.Core,Zukan8,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\PokeDex\Zukan8.cs,SetAllCaught,The following statement contains a magic number: i < 11
Magic Number,PKHeX.Core,Zukan8,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\PokeDex\Zukan8.cs,SetAllSeen,The following statement contains a magic number: const int deco = 7;
Magic Number,PKHeX.Core,Zukan8,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\PokeDex\Zukan8.cs,SetAllSeen,The following statement contains a magic number: const int forms = 9;
Magic Number,PKHeX.Core,Zukan8,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\PokeDex\Zukan8.cs,SetAllSeen,The following statement contains a magic number: SeenAll(species' 63' value' pi' shinyToo);
Magic Number,PKHeX.Core,Checksums,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\Checksums.cs,CRC16_CCITT,The following statement contains a magic number: x ^= (x >> 4);
Magic Number,PKHeX.Core,Checksums,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\Checksums.cs,CRC16_CCITT,The following statement contains a magic number: top = (byte)(bot ^ (x >> 3) ^ (x << 4));
Magic Number,PKHeX.Core,Checksums,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\Checksums.cs,CRC16_CCITT,The following statement contains a magic number: top = (byte)(bot ^ (x >> 3) ^ (x << 4));
Magic Number,PKHeX.Core,Checksums,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\Checksums.cs,CRC16_CCITT,The following statement contains a magic number: bot = (byte)(x ^ (x << 5));
Magic Number,PKHeX.Core,Checksums,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\Checksums.cs,CRC16_CCITT,The following statement contains a magic number: return (ushort)(top << 8 | bot);
Magic Number,PKHeX.Core,Checksums,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\Checksums.cs,CRC16,The following statement contains a magic number: chk = (ushort)(crc16[(data[i] ^ chk) & 0xFF] ^ chk >> 8);
Magic Number,PKHeX.Core,Checksums,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\Checksums.cs,CRC32,The following statement contains a magic number: return (ushort)(val + (val >> 16));
Magic Number,PKHeX.Core,DexFormUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\DexFormUtil.cs,GetDexFormIndexBW,The following statement contains a magic number: return species switch              {                  201 => 000' // 28 Unown                  386 => 028' // 4 Deoxys                  492 => 032' // 2 Shaymin                  487 => 034' // 2 Giratina                  479 => 036' // 6 Rotom                  422 => 042' // 2 Shellos                  423 => 044' // 2 Gastrodon                  412 => 046' // 3 Burmy                  413 => 049' // 3 Wormadam                  351 => 052' // 4 Castform                  421 => 056' // 2 Cherrim                  585 => 058' // 4 Deerling                  586 => 062' // 4 Sawsbuck                  648 => 066' // 2 Meloetta                  555 => 068' // 2 Darmanitan                  550 => 070' // 2 Basculin                  _ => -1              };
Magic Number,PKHeX.Core,DexFormUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\DexFormUtil.cs,GetDexFormIndexBW,The following statement contains a magic number: return species switch              {                  201 => 000' // 28 Unown                  386 => 028' // 4 Deoxys                  492 => 032' // 2 Shaymin                  487 => 034' // 2 Giratina                  479 => 036' // 6 Rotom                  422 => 042' // 2 Shellos                  423 => 044' // 2 Gastrodon                  412 => 046' // 3 Burmy                  413 => 049' // 3 Wormadam                  351 => 052' // 4 Castform                  421 => 056' // 2 Cherrim                  585 => 058' // 4 Deerling                  586 => 062' // 4 Sawsbuck                  648 => 066' // 2 Meloetta                  555 => 068' // 2 Darmanitan                  550 => 070' // 2 Basculin                  _ => -1              };
Magic Number,PKHeX.Core,DexFormUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\DexFormUtil.cs,GetDexFormIndexBW,The following statement contains a magic number: return species switch              {                  201 => 000' // 28 Unown                  386 => 028' // 4 Deoxys                  492 => 032' // 2 Shaymin                  487 => 034' // 2 Giratina                  479 => 036' // 6 Rotom                  422 => 042' // 2 Shellos                  423 => 044' // 2 Gastrodon                  412 => 046' // 3 Burmy                  413 => 049' // 3 Wormadam                  351 => 052' // 4 Castform                  421 => 056' // 2 Cherrim                  585 => 058' // 4 Deerling                  586 => 062' // 4 Sawsbuck                  648 => 066' // 2 Meloetta                  555 => 068' // 2 Darmanitan                  550 => 070' // 2 Basculin                  _ => -1              };
Magic Number,PKHeX.Core,DexFormUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\DexFormUtil.cs,GetDexFormIndexBW,The following statement contains a magic number: return species switch              {                  201 => 000' // 28 Unown                  386 => 028' // 4 Deoxys                  492 => 032' // 2 Shaymin                  487 => 034' // 2 Giratina                  479 => 036' // 6 Rotom                  422 => 042' // 2 Shellos                  423 => 044' // 2 Gastrodon                  412 => 046' // 3 Burmy                  413 => 049' // 3 Wormadam                  351 => 052' // 4 Castform                  421 => 056' // 2 Cherrim                  585 => 058' // 4 Deerling                  586 => 062' // 4 Sawsbuck                  648 => 066' // 2 Meloetta                  555 => 068' // 2 Darmanitan                  550 => 070' // 2 Basculin                  _ => -1              };
Magic Number,PKHeX.Core,DexFormUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\DexFormUtil.cs,GetDexFormIndexBW,The following statement contains a magic number: return species switch              {                  201 => 000' // 28 Unown                  386 => 028' // 4 Deoxys                  492 => 032' // 2 Shaymin                  487 => 034' // 2 Giratina                  479 => 036' // 6 Rotom                  422 => 042' // 2 Shellos                  423 => 044' // 2 Gastrodon                  412 => 046' // 3 Burmy                  413 => 049' // 3 Wormadam                  351 => 052' // 4 Castform                  421 => 056' // 2 Cherrim                  585 => 058' // 4 Deerling                  586 => 062' // 4 Sawsbuck                  648 => 066' // 2 Meloetta                  555 => 068' // 2 Darmanitan                  550 => 070' // 2 Basculin                  _ => -1              };
Magic Number,PKHeX.Core,DexFormUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\DexFormUtil.cs,GetDexFormIndexBW,The following statement contains a magic number: return species switch              {                  201 => 000' // 28 Unown                  386 => 028' // 4 Deoxys                  492 => 032' // 2 Shaymin                  487 => 034' // 2 Giratina                  479 => 036' // 6 Rotom                  422 => 042' // 2 Shellos                  423 => 044' // 2 Gastrodon                  412 => 046' // 3 Burmy                  413 => 049' // 3 Wormadam                  351 => 052' // 4 Castform                  421 => 056' // 2 Cherrim                  585 => 058' // 4 Deerling                  586 => 062' // 4 Sawsbuck                  648 => 066' // 2 Meloetta                  555 => 068' // 2 Darmanitan                  550 => 070' // 2 Basculin                  _ => -1              };
Magic Number,PKHeX.Core,DexFormUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\DexFormUtil.cs,GetDexFormIndexBW,The following statement contains a magic number: return species switch              {                  201 => 000' // 28 Unown                  386 => 028' // 4 Deoxys                  492 => 032' // 2 Shaymin                  487 => 034' // 2 Giratina                  479 => 036' // 6 Rotom                  422 => 042' // 2 Shellos                  423 => 044' // 2 Gastrodon                  412 => 046' // 3 Burmy                  413 => 049' // 3 Wormadam                  351 => 052' // 4 Castform                  421 => 056' // 2 Cherrim                  585 => 058' // 4 Deerling                  586 => 062' // 4 Sawsbuck                  648 => 066' // 2 Meloetta                  555 => 068' // 2 Darmanitan                  550 => 070' // 2 Basculin                  _ => -1              };
Magic Number,PKHeX.Core,DexFormUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\DexFormUtil.cs,GetDexFormIndexBW,The following statement contains a magic number: return species switch              {                  201 => 000' // 28 Unown                  386 => 028' // 4 Deoxys                  492 => 032' // 2 Shaymin                  487 => 034' // 2 Giratina                  479 => 036' // 6 Rotom                  422 => 042' // 2 Shellos                  423 => 044' // 2 Gastrodon                  412 => 046' // 3 Burmy                  413 => 049' // 3 Wormadam                  351 => 052' // 4 Castform                  421 => 056' // 2 Cherrim                  585 => 058' // 4 Deerling                  586 => 062' // 4 Sawsbuck                  648 => 066' // 2 Meloetta                  555 => 068' // 2 Darmanitan                  550 => 070' // 2 Basculin                  _ => -1              };
Magic Number,PKHeX.Core,DexFormUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\DexFormUtil.cs,GetDexFormIndexBW,The following statement contains a magic number: return species switch              {                  201 => 000' // 28 Unown                  386 => 028' // 4 Deoxys                  492 => 032' // 2 Shaymin                  487 => 034' // 2 Giratina                  479 => 036' // 6 Rotom                  422 => 042' // 2 Shellos                  423 => 044' // 2 Gastrodon                  412 => 046' // 3 Burmy                  413 => 049' // 3 Wormadam                  351 => 052' // 4 Castform                  421 => 056' // 2 Cherrim                  585 => 058' // 4 Deerling                  586 => 062' // 4 Sawsbuck                  648 => 066' // 2 Meloetta                  555 => 068' // 2 Darmanitan                  550 => 070' // 2 Basculin                  _ => -1              };
Magic Number,PKHeX.Core,DexFormUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\DexFormUtil.cs,GetDexFormIndexBW,The following statement contains a magic number: return species switch              {                  201 => 000' // 28 Unown                  386 => 028' // 4 Deoxys                  492 => 032' // 2 Shaymin                  487 => 034' // 2 Giratina                  479 => 036' // 6 Rotom                  422 => 042' // 2 Shellos                  423 => 044' // 2 Gastrodon                  412 => 046' // 3 Burmy                  413 => 049' // 3 Wormadam                  351 => 052' // 4 Castform                  421 => 056' // 2 Cherrim                  585 => 058' // 4 Deerling                  586 => 062' // 4 Sawsbuck                  648 => 066' // 2 Meloetta                  555 => 068' // 2 Darmanitan                  550 => 070' // 2 Basculin                  _ => -1              };
Magic Number,PKHeX.Core,DexFormUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\DexFormUtil.cs,GetDexFormIndexBW,The following statement contains a magic number: return species switch              {                  201 => 000' // 28 Unown                  386 => 028' // 4 Deoxys                  492 => 032' // 2 Shaymin                  487 => 034' // 2 Giratina                  479 => 036' // 6 Rotom                  422 => 042' // 2 Shellos                  423 => 044' // 2 Gastrodon                  412 => 046' // 3 Burmy                  413 => 049' // 3 Wormadam                  351 => 052' // 4 Castform                  421 => 056' // 2 Cherrim                  585 => 058' // 4 Deerling                  586 => 062' // 4 Sawsbuck                  648 => 066' // 2 Meloetta                  555 => 068' // 2 Darmanitan                  550 => 070' // 2 Basculin                  _ => -1              };
Magic Number,PKHeX.Core,DexFormUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\DexFormUtil.cs,GetDexFormIndexBW,The following statement contains a magic number: return species switch              {                  201 => 000' // 28 Unown                  386 => 028' // 4 Deoxys                  492 => 032' // 2 Shaymin                  487 => 034' // 2 Giratina                  479 => 036' // 6 Rotom                  422 => 042' // 2 Shellos                  423 => 044' // 2 Gastrodon                  412 => 046' // 3 Burmy                  413 => 049' // 3 Wormadam                  351 => 052' // 4 Castform                  421 => 056' // 2 Cherrim                  585 => 058' // 4 Deerling                  586 => 062' // 4 Sawsbuck                  648 => 066' // 2 Meloetta                  555 => 068' // 2 Darmanitan                  550 => 070' // 2 Basculin                  _ => -1              };
Magic Number,PKHeX.Core,DexFormUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\DexFormUtil.cs,GetDexFormIndexBW,The following statement contains a magic number: return species switch              {                  201 => 000' // 28 Unown                  386 => 028' // 4 Deoxys                  492 => 032' // 2 Shaymin                  487 => 034' // 2 Giratina                  479 => 036' // 6 Rotom                  422 => 042' // 2 Shellos                  423 => 044' // 2 Gastrodon                  412 => 046' // 3 Burmy                  413 => 049' // 3 Wormadam                  351 => 052' // 4 Castform                  421 => 056' // 2 Cherrim                  585 => 058' // 4 Deerling                  586 => 062' // 4 Sawsbuck                  648 => 066' // 2 Meloetta                  555 => 068' // 2 Darmanitan                  550 => 070' // 2 Basculin                  _ => -1              };
Magic Number,PKHeX.Core,DexFormUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\DexFormUtil.cs,GetDexFormIndexBW,The following statement contains a magic number: return species switch              {                  201 => 000' // 28 Unown                  386 => 028' // 4 Deoxys                  492 => 032' // 2 Shaymin                  487 => 034' // 2 Giratina                  479 => 036' // 6 Rotom                  422 => 042' // 2 Shellos                  423 => 044' // 2 Gastrodon                  412 => 046' // 3 Burmy                  413 => 049' // 3 Wormadam                  351 => 052' // 4 Castform                  421 => 056' // 2 Cherrim                  585 => 058' // 4 Deerling                  586 => 062' // 4 Sawsbuck                  648 => 066' // 2 Meloetta                  555 => 068' // 2 Darmanitan                  550 => 070' // 2 Basculin                  _ => -1              };
Magic Number,PKHeX.Core,DexFormUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\DexFormUtil.cs,GetDexFormIndexBW,The following statement contains a magic number: return species switch              {                  201 => 000' // 28 Unown                  386 => 028' // 4 Deoxys                  492 => 032' // 2 Shaymin                  487 => 034' // 2 Giratina                  479 => 036' // 6 Rotom                  422 => 042' // 2 Shellos                  423 => 044' // 2 Gastrodon                  412 => 046' // 3 Burmy                  413 => 049' // 3 Wormadam                  351 => 052' // 4 Castform                  421 => 056' // 2 Cherrim                  585 => 058' // 4 Deerling                  586 => 062' // 4 Sawsbuck                  648 => 066' // 2 Meloetta                  555 => 068' // 2 Darmanitan                  550 => 070' // 2 Basculin                  _ => -1              };
Magic Number,PKHeX.Core,DexFormUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\DexFormUtil.cs,GetDexFormIndexBW,The following statement contains a magic number: return species switch              {                  201 => 000' // 28 Unown                  386 => 028' // 4 Deoxys                  492 => 032' // 2 Shaymin                  487 => 034' // 2 Giratina                  479 => 036' // 6 Rotom                  422 => 042' // 2 Shellos                  423 => 044' // 2 Gastrodon                  412 => 046' // 3 Burmy                  413 => 049' // 3 Wormadam                  351 => 052' // 4 Castform                  421 => 056' // 2 Cherrim                  585 => 058' // 4 Deerling                  586 => 062' // 4 Sawsbuck                  648 => 066' // 2 Meloetta                  555 => 068' // 2 Darmanitan                  550 => 070' // 2 Basculin                  _ => -1              };
Magic Number,PKHeX.Core,DexFormUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\DexFormUtil.cs,GetDexFormIndexBW,The following statement contains a magic number: return species switch              {                  201 => 000' // 28 Unown                  386 => 028' // 4 Deoxys                  492 => 032' // 2 Shaymin                  487 => 034' // 2 Giratina                  479 => 036' // 6 Rotom                  422 => 042' // 2 Shellos                  423 => 044' // 2 Gastrodon                  412 => 046' // 3 Burmy                  413 => 049' // 3 Wormadam                  351 => 052' // 4 Castform                  421 => 056' // 2 Cherrim                  585 => 058' // 4 Deerling                  586 => 062' // 4 Sawsbuck                  648 => 066' // 2 Meloetta                  555 => 068' // 2 Darmanitan                  550 => 070' // 2 Basculin                  _ => -1              };
Magic Number,PKHeX.Core,DexFormUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\DexFormUtil.cs,GetDexFormIndexBW,The following statement contains a magic number: return species switch              {                  201 => 000' // 28 Unown                  386 => 028' // 4 Deoxys                  492 => 032' // 2 Shaymin                  487 => 034' // 2 Giratina                  479 => 036' // 6 Rotom                  422 => 042' // 2 Shellos                  423 => 044' // 2 Gastrodon                  412 => 046' // 3 Burmy                  413 => 049' // 3 Wormadam                  351 => 052' // 4 Castform                  421 => 056' // 2 Cherrim                  585 => 058' // 4 Deerling                  586 => 062' // 4 Sawsbuck                  648 => 066' // 2 Meloetta                  555 => 068' // 2 Darmanitan                  550 => 070' // 2 Basculin                  _ => -1              };
Magic Number,PKHeX.Core,DexFormUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\DexFormUtil.cs,GetDexFormIndexBW,The following statement contains a magic number: return species switch              {                  201 => 000' // 28 Unown                  386 => 028' // 4 Deoxys                  492 => 032' // 2 Shaymin                  487 => 034' // 2 Giratina                  479 => 036' // 6 Rotom                  422 => 042' // 2 Shellos                  423 => 044' // 2 Gastrodon                  412 => 046' // 3 Burmy                  413 => 049' // 3 Wormadam                  351 => 052' // 4 Castform                  421 => 056' // 2 Cherrim                  585 => 058' // 4 Deerling                  586 => 062' // 4 Sawsbuck                  648 => 066' // 2 Meloetta                  555 => 068' // 2 Darmanitan                  550 => 070' // 2 Basculin                  _ => -1              };
Magic Number,PKHeX.Core,DexFormUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\DexFormUtil.cs,GetDexFormIndexBW,The following statement contains a magic number: return species switch              {                  201 => 000' // 28 Unown                  386 => 028' // 4 Deoxys                  492 => 032' // 2 Shaymin                  487 => 034' // 2 Giratina                  479 => 036' // 6 Rotom                  422 => 042' // 2 Shellos                  423 => 044' // 2 Gastrodon                  412 => 046' // 3 Burmy                  413 => 049' // 3 Wormadam                  351 => 052' // 4 Castform                  421 => 056' // 2 Cherrim                  585 => 058' // 4 Deerling                  586 => 062' // 4 Sawsbuck                  648 => 066' // 2 Meloetta                  555 => 068' // 2 Darmanitan                  550 => 070' // 2 Basculin                  _ => -1              };
Magic Number,PKHeX.Core,DexFormUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\DexFormUtil.cs,GetDexFormIndexBW,The following statement contains a magic number: return species switch              {                  201 => 000' // 28 Unown                  386 => 028' // 4 Deoxys                  492 => 032' // 2 Shaymin                  487 => 034' // 2 Giratina                  479 => 036' // 6 Rotom                  422 => 042' // 2 Shellos                  423 => 044' // 2 Gastrodon                  412 => 046' // 3 Burmy                  413 => 049' // 3 Wormadam                  351 => 052' // 4 Castform                  421 => 056' // 2 Cherrim                  585 => 058' // 4 Deerling                  586 => 062' // 4 Sawsbuck                  648 => 066' // 2 Meloetta                  555 => 068' // 2 Darmanitan                  550 => 070' // 2 Basculin                  _ => -1              };
Magic Number,PKHeX.Core,DexFormUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\DexFormUtil.cs,GetDexFormIndexBW,The following statement contains a magic number: return species switch              {                  201 => 000' // 28 Unown                  386 => 028' // 4 Deoxys                  492 => 032' // 2 Shaymin                  487 => 034' // 2 Giratina                  479 => 036' // 6 Rotom                  422 => 042' // 2 Shellos                  423 => 044' // 2 Gastrodon                  412 => 046' // 3 Burmy                  413 => 049' // 3 Wormadam                  351 => 052' // 4 Castform                  421 => 056' // 2 Cherrim                  585 => 058' // 4 Deerling                  586 => 062' // 4 Sawsbuck                  648 => 066' // 2 Meloetta                  555 => 068' // 2 Darmanitan                  550 => 070' // 2 Basculin                  _ => -1              };
Magic Number,PKHeX.Core,DexFormUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\DexFormUtil.cs,GetDexFormIndexBW,The following statement contains a magic number: return species switch              {                  201 => 000' // 28 Unown                  386 => 028' // 4 Deoxys                  492 => 032' // 2 Shaymin                  487 => 034' // 2 Giratina                  479 => 036' // 6 Rotom                  422 => 042' // 2 Shellos                  423 => 044' // 2 Gastrodon                  412 => 046' // 3 Burmy                  413 => 049' // 3 Wormadam                  351 => 052' // 4 Castform                  421 => 056' // 2 Cherrim                  585 => 058' // 4 Deerling                  586 => 062' // 4 Sawsbuck                  648 => 066' // 2 Meloetta                  555 => 068' // 2 Darmanitan                  550 => 070' // 2 Basculin                  _ => -1              };
Magic Number,PKHeX.Core,DexFormUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\DexFormUtil.cs,GetDexFormIndexBW,The following statement contains a magic number: return species switch              {                  201 => 000' // 28 Unown                  386 => 028' // 4 Deoxys                  492 => 032' // 2 Shaymin                  487 => 034' // 2 Giratina                  479 => 036' // 6 Rotom                  422 => 042' // 2 Shellos                  423 => 044' // 2 Gastrodon                  412 => 046' // 3 Burmy                  413 => 049' // 3 Wormadam                  351 => 052' // 4 Castform                  421 => 056' // 2 Cherrim                  585 => 058' // 4 Deerling                  586 => 062' // 4 Sawsbuck                  648 => 066' // 2 Meloetta                  555 => 068' // 2 Darmanitan                  550 => 070' // 2 Basculin                  _ => -1              };
Magic Number,PKHeX.Core,DexFormUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\DexFormUtil.cs,GetDexFormIndexBW,The following statement contains a magic number: return species switch              {                  201 => 000' // 28 Unown                  386 => 028' // 4 Deoxys                  492 => 032' // 2 Shaymin                  487 => 034' // 2 Giratina                  479 => 036' // 6 Rotom                  422 => 042' // 2 Shellos                  423 => 044' // 2 Gastrodon                  412 => 046' // 3 Burmy                  413 => 049' // 3 Wormadam                  351 => 052' // 4 Castform                  421 => 056' // 2 Cherrim                  585 => 058' // 4 Deerling                  586 => 062' // 4 Sawsbuck                  648 => 066' // 2 Meloetta                  555 => 068' // 2 Darmanitan                  550 => 070' // 2 Basculin                  _ => -1              };
Magic Number,PKHeX.Core,DexFormUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\DexFormUtil.cs,GetDexFormIndexBW,The following statement contains a magic number: return species switch              {                  201 => 000' // 28 Unown                  386 => 028' // 4 Deoxys                  492 => 032' // 2 Shaymin                  487 => 034' // 2 Giratina                  479 => 036' // 6 Rotom                  422 => 042' // 2 Shellos                  423 => 044' // 2 Gastrodon                  412 => 046' // 3 Burmy                  413 => 049' // 3 Wormadam                  351 => 052' // 4 Castform                  421 => 056' // 2 Cherrim                  585 => 058' // 4 Deerling                  586 => 062' // 4 Sawsbuck                  648 => 066' // 2 Meloetta                  555 => 068' // 2 Darmanitan                  550 => 070' // 2 Basculin                  _ => -1              };
Magic Number,PKHeX.Core,DexFormUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\DexFormUtil.cs,GetDexFormIndexBW,The following statement contains a magic number: return species switch              {                  201 => 000' // 28 Unown                  386 => 028' // 4 Deoxys                  492 => 032' // 2 Shaymin                  487 => 034' // 2 Giratina                  479 => 036' // 6 Rotom                  422 => 042' // 2 Shellos                  423 => 044' // 2 Gastrodon                  412 => 046' // 3 Burmy                  413 => 049' // 3 Wormadam                  351 => 052' // 4 Castform                  421 => 056' // 2 Cherrim                  585 => 058' // 4 Deerling                  586 => 062' // 4 Sawsbuck                  648 => 066' // 2 Meloetta                  555 => 068' // 2 Darmanitan                  550 => 070' // 2 Basculin                  _ => -1              };
Magic Number,PKHeX.Core,DexFormUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\DexFormUtil.cs,GetDexFormIndexBW,The following statement contains a magic number: return species switch              {                  201 => 000' // 28 Unown                  386 => 028' // 4 Deoxys                  492 => 032' // 2 Shaymin                  487 => 034' // 2 Giratina                  479 => 036' // 6 Rotom                  422 => 042' // 2 Shellos                  423 => 044' // 2 Gastrodon                  412 => 046' // 3 Burmy                  413 => 049' // 3 Wormadam                  351 => 052' // 4 Castform                  421 => 056' // 2 Cherrim                  585 => 058' // 4 Deerling                  586 => 062' // 4 Sawsbuck                  648 => 066' // 2 Meloetta                  555 => 068' // 2 Darmanitan                  550 => 070' // 2 Basculin                  _ => -1              };
Magic Number,PKHeX.Core,DexFormUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\DexFormUtil.cs,GetDexFormIndexBW,The following statement contains a magic number: return species switch              {                  201 => 000' // 28 Unown                  386 => 028' // 4 Deoxys                  492 => 032' // 2 Shaymin                  487 => 034' // 2 Giratina                  479 => 036' // 6 Rotom                  422 => 042' // 2 Shellos                  423 => 044' // 2 Gastrodon                  412 => 046' // 3 Burmy                  413 => 049' // 3 Wormadam                  351 => 052' // 4 Castform                  421 => 056' // 2 Cherrim                  585 => 058' // 4 Deerling                  586 => 062' // 4 Sawsbuck                  648 => 066' // 2 Meloetta                  555 => 068' // 2 Darmanitan                  550 => 070' // 2 Basculin                  _ => -1              };
Magic Number,PKHeX.Core,DexFormUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\DexFormUtil.cs,GetDexFormIndexBW,The following statement contains a magic number: return species switch              {                  201 => 000' // 28 Unown                  386 => 028' // 4 Deoxys                  492 => 032' // 2 Shaymin                  487 => 034' // 2 Giratina                  479 => 036' // 6 Rotom                  422 => 042' // 2 Shellos                  423 => 044' // 2 Gastrodon                  412 => 046' // 3 Burmy                  413 => 049' // 3 Wormadam                  351 => 052' // 4 Castform                  421 => 056' // 2 Cherrim                  585 => 058' // 4 Deerling                  586 => 062' // 4 Sawsbuck                  648 => 066' // 2 Meloetta                  555 => 068' // 2 Darmanitan                  550 => 070' // 2 Basculin                  _ => -1              };
Magic Number,PKHeX.Core,DexFormUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\DexFormUtil.cs,GetDexFormIndexBW,The following statement contains a magic number: return species switch              {                  201 => 000' // 28 Unown                  386 => 028' // 4 Deoxys                  492 => 032' // 2 Shaymin                  487 => 034' // 2 Giratina                  479 => 036' // 6 Rotom                  422 => 042' // 2 Shellos                  423 => 044' // 2 Gastrodon                  412 => 046' // 3 Burmy                  413 => 049' // 3 Wormadam                  351 => 052' // 4 Castform                  421 => 056' // 2 Cherrim                  585 => 058' // 4 Deerling                  586 => 062' // 4 Sawsbuck                  648 => 066' // 2 Meloetta                  555 => 068' // 2 Darmanitan                  550 => 070' // 2 Basculin                  _ => -1              };
Magic Number,PKHeX.Core,DexFormUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\DexFormUtil.cs,GetDexFormIndexB2W2,The following statement contains a magic number: return species switch              {                  646 => 072' // 3 Kyurem                  647 => 075' // 2 Keldeo                  642 => 077' // 2 Thundurus                  641 => 079' // 2 Tornadus                  645 => 081' // 2 Landorus                  _ => GetDexFormIndexBW(species' formct)              };
Magic Number,PKHeX.Core,DexFormUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\DexFormUtil.cs,GetDexFormIndexB2W2,The following statement contains a magic number: return species switch              {                  646 => 072' // 3 Kyurem                  647 => 075' // 2 Keldeo                  642 => 077' // 2 Thundurus                  641 => 079' // 2 Tornadus                  645 => 081' // 2 Landorus                  _ => GetDexFormIndexBW(species' formct)              };
Magic Number,PKHeX.Core,DexFormUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\DexFormUtil.cs,GetDexFormIndexB2W2,The following statement contains a magic number: return species switch              {                  646 => 072' // 3 Kyurem                  647 => 075' // 2 Keldeo                  642 => 077' // 2 Thundurus                  641 => 079' // 2 Tornadus                  645 => 081' // 2 Landorus                  _ => GetDexFormIndexBW(species' formct)              };
Magic Number,PKHeX.Core,DexFormUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\DexFormUtil.cs,GetDexFormIndexB2W2,The following statement contains a magic number: return species switch              {                  646 => 072' // 3 Kyurem                  647 => 075' // 2 Keldeo                  642 => 077' // 2 Thundurus                  641 => 079' // 2 Tornadus                  645 => 081' // 2 Landorus                  _ => GetDexFormIndexBW(species' formct)              };
Magic Number,PKHeX.Core,DexFormUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\DexFormUtil.cs,GetDexFormIndexB2W2,The following statement contains a magic number: return species switch              {                  646 => 072' // 3 Kyurem                  647 => 075' // 2 Keldeo                  642 => 077' // 2 Thundurus                  641 => 079' // 2 Tornadus                  645 => 081' // 2 Landorus                  _ => GetDexFormIndexBW(species' formct)              };
Magic Number,PKHeX.Core,DexFormUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\DexFormUtil.cs,GetDexFormIndexB2W2,The following statement contains a magic number: return species switch              {                  646 => 072' // 3 Kyurem                  647 => 075' // 2 Keldeo                  642 => 077' // 2 Thundurus                  641 => 079' // 2 Tornadus                  645 => 081' // 2 Landorus                  _ => GetDexFormIndexBW(species' formct)              };
Magic Number,PKHeX.Core,DexFormUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\DexFormUtil.cs,GetDexFormIndexB2W2,The following statement contains a magic number: return species switch              {                  646 => 072' // 3 Kyurem                  647 => 075' // 2 Keldeo                  642 => 077' // 2 Thundurus                  641 => 079' // 2 Tornadus                  645 => 081' // 2 Landorus                  _ => GetDexFormIndexBW(species' formct)              };
Magic Number,PKHeX.Core,DexFormUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\DexFormUtil.cs,GetDexFormIndexB2W2,The following statement contains a magic number: return species switch              {                  646 => 072' // 3 Kyurem                  647 => 075' // 2 Keldeo                  642 => 077' // 2 Thundurus                  641 => 079' // 2 Tornadus                  645 => 081' // 2 Landorus                  _ => GetDexFormIndexBW(species' formct)              };
Magic Number,PKHeX.Core,DexFormUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\DexFormUtil.cs,GetDexFormIndexB2W2,The following statement contains a magic number: return species switch              {                  646 => 072' // 3 Kyurem                  647 => 075' // 2 Keldeo                  642 => 077' // 2 Thundurus                  641 => 079' // 2 Tornadus                  645 => 081' // 2 Landorus                  _ => GetDexFormIndexBW(species' formct)              };
Magic Number,PKHeX.Core,DexFormUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\DexFormUtil.cs,GetDexFormIndexB2W2,The following statement contains a magic number: return species switch              {                  646 => 072' // 3 Kyurem                  647 => 075' // 2 Keldeo                  642 => 077' // 2 Thundurus                  641 => 079' // 2 Tornadus                  645 => 081' // 2 Landorus                  _ => GetDexFormIndexBW(species' formct)              };
Magic Number,PKHeX.Core,DexFormUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\DexFormUtil.cs,GetDexFormIndexXY,The following statement contains a magic number: return species switch              {                  666 => 083' // 20 Vivillion                  669 => 103' // 5 Flabébé                  670 => 108' // 6 Floette                  671 => 114' // 5 Florges                  710 => 119' // 4 Pumpkaboo                  711 => 123' // 4 Gourgeist                  681 => 127' // 2 Aegislash                  716 => 129' // 2 Xerneas                  003 => 131' // 2 Venusaur                  006 => 133' // 3 Charizard                  009 => 136' // 2 Blastoise                  065 => 138' // 2 Alakazam                  094 => 140' // 2 Gengar                  115 => 142' // 2 Kangaskhan                  127 => 144' // 2 Pinsir                  130 => 146' // 2 Gyarados                  142 => 148' // 2 Aerodactyl                  150 => 150' // 3 Mewtwo                  181 => 153' // 2 Ampharos                  212 => 155' // 2 Scizor                  214 => 157' // 2 Heracros                  229 => 159' // 2 Houndoom                  248 => 161' // 2 Tyranitar                  257 => 163' // 2 Blaziken                  282 => 165' // 2 Gardevoir                  303 => 167' // 2 Mawile                  306 => 169' // 2 Aggron                  308 => 171' // 2 Medicham                  310 => 173' // 2 Manetric                  354 => 175' // 2 Banette                  359 => 177' // 2 Absol                  380 => 179' // 2 Latias                  381 => 181' // 2 Latios                  445 => 183' // 2 Garchomp                  448 => 185' // 2 Lucario                  460 => 187' // 2 Abomasnow                  _ => GetDexFormIndexB2W2(species' formct)              };
Magic Number,PKHeX.Core,DexFormUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\DexFormUtil.cs,GetDexFormIndexXY,The following statement contains a magic number: return species switch              {                  666 => 083' // 20 Vivillion                  669 => 103' // 5 Flabébé                  670 => 108' // 6 Floette                  671 => 114' // 5 Florges                  710 => 119' // 4 Pumpkaboo                  711 => 123' // 4 Gourgeist                  681 => 127' // 2 Aegislash                  716 => 129' // 2 Xerneas                  003 => 131' // 2 Venusaur                  006 => 133' // 3 Charizard                  009 => 136' // 2 Blastoise                  065 => 138' // 2 Alakazam                  094 => 140' // 2 Gengar                  115 => 142' // 2 Kangaskhan                  127 => 144' // 2 Pinsir                  130 => 146' // 2 Gyarados                  142 => 148' // 2 Aerodactyl                  150 => 150' // 3 Mewtwo                  181 => 153' // 2 Ampharos                  212 => 155' // 2 Scizor                  214 => 157' // 2 Heracros                  229 => 159' // 2 Houndoom                  248 => 161' // 2 Tyranitar                  257 => 163' // 2 Blaziken                  282 => 165' // 2 Gardevoir                  303 => 167' // 2 Mawile                  306 => 169' // 2 Aggron                  308 => 171' // 2 Medicham                  310 => 173' // 2 Manetric                  354 => 175' // 2 Banette                  359 => 177' // 2 Absol                  380 => 179' // 2 Latias                  381 => 181' // 2 Latios                  445 => 183' // 2 Garchomp                  448 => 185' // 2 Lucario                  460 => 187' // 2 Abomasnow                  _ => GetDexFormIndexB2W2(species' formct)              };
Magic Number,PKHeX.Core,DexFormUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\DexFormUtil.cs,GetDexFormIndexXY,The following statement contains a magic number: return species switch              {                  666 => 083' // 20 Vivillion                  669 => 103' // 5 Flabébé                  670 => 108' // 6 Floette                  671 => 114' // 5 Florges                  710 => 119' // 4 Pumpkaboo                  711 => 123' // 4 Gourgeist                  681 => 127' // 2 Aegislash                  716 => 129' // 2 Xerneas                  003 => 131' // 2 Venusaur                  006 => 133' // 3 Charizard                  009 => 136' // 2 Blastoise                  065 => 138' // 2 Alakazam                  094 => 140' // 2 Gengar                  115 => 142' // 2 Kangaskhan                  127 => 144' // 2 Pinsir                  130 => 146' // 2 Gyarados                  142 => 148' // 2 Aerodactyl                  150 => 150' // 3 Mewtwo                  181 => 153' // 2 Ampharos                  212 => 155' // 2 Scizor                  214 => 157' // 2 Heracros                  229 => 159' // 2 Houndoom                  248 => 161' // 2 Tyranitar                  257 => 163' // 2 Blaziken                  282 => 165' // 2 Gardevoir                  303 => 167' // 2 Mawile                  306 => 169' // 2 Aggron                  308 => 171' // 2 Medicham                  310 => 173' // 2 Manetric                  354 => 175' // 2 Banette                  359 => 177' // 2 Absol                  380 => 179' // 2 Latias                  381 => 181' // 2 Latios                  445 => 183' // 2 Garchomp                  448 => 185' // 2 Lucario                  460 => 187' // 2 Abomasnow                  _ => GetDexFormIndexB2W2(species' formct)              };
Magic Number,PKHeX.Core,DexFormUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\DexFormUtil.cs,GetDexFormIndexXY,The following statement contains a magic number: return species switch              {                  666 => 083' // 20 Vivillion                  669 => 103' // 5 Flabébé                  670 => 108' // 6 Floette                  671 => 114' // 5 Florges                  710 => 119' // 4 Pumpkaboo                  711 => 123' // 4 Gourgeist                  681 => 127' // 2 Aegislash                  716 => 129' // 2 Xerneas                  003 => 131' // 2 Venusaur                  006 => 133' // 3 Charizard                  009 => 136' // 2 Blastoise                  065 => 138' // 2 Alakazam                  094 => 140' // 2 Gengar                  115 => 142' // 2 Kangaskhan                  127 => 144' // 2 Pinsir                  130 => 146' // 2 Gyarados                  142 => 148' // 2 Aerodactyl                  150 => 150' // 3 Mewtwo                  181 => 153' // 2 Ampharos                  212 => 155' // 2 Scizor                  214 => 157' // 2 Heracros                  229 => 159' // 2 Houndoom                  248 => 161' // 2 Tyranitar                  257 => 163' // 2 Blaziken                  282 => 165' // 2 Gardevoir                  303 => 167' // 2 Mawile                  306 => 169' // 2 Aggron                  308 => 171' // 2 Medicham                  310 => 173' // 2 Manetric                  354 => 175' // 2 Banette                  359 => 177' // 2 Absol                  380 => 179' // 2 Latias                  381 => 181' // 2 Latios                  445 => 183' // 2 Garchomp                  448 => 185' // 2 Lucario                  460 => 187' // 2 Abomasnow                  _ => GetDexFormIndexB2W2(species' formct)              };
Magic Number,PKHeX.Core,DexFormUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\DexFormUtil.cs,GetDexFormIndexXY,The following statement contains a magic number: return species switch              {                  666 => 083' // 20 Vivillion                  669 => 103' // 5 Flabébé                  670 => 108' // 6 Floette                  671 => 114' // 5 Florges                  710 => 119' // 4 Pumpkaboo                  711 => 123' // 4 Gourgeist                  681 => 127' // 2 Aegislash                  716 => 129' // 2 Xerneas                  003 => 131' // 2 Venusaur                  006 => 133' // 3 Charizard                  009 => 136' // 2 Blastoise                  065 => 138' // 2 Alakazam                  094 => 140' // 2 Gengar                  115 => 142' // 2 Kangaskhan                  127 => 144' // 2 Pinsir                  130 => 146' // 2 Gyarados                  142 => 148' // 2 Aerodactyl                  150 => 150' // 3 Mewtwo                  181 => 153' // 2 Ampharos                  212 => 155' // 2 Scizor                  214 => 157' // 2 Heracros                  229 => 159' // 2 Houndoom                  248 => 161' // 2 Tyranitar                  257 => 163' // 2 Blaziken                  282 => 165' // 2 Gardevoir                  303 => 167' // 2 Mawile                  306 => 169' // 2 Aggron                  308 => 171' // 2 Medicham                  310 => 173' // 2 Manetric                  354 => 175' // 2 Banette                  359 => 177' // 2 Absol                  380 => 179' // 2 Latias                  381 => 181' // 2 Latios                  445 => 183' // 2 Garchomp                  448 => 185' // 2 Lucario                  460 => 187' // 2 Abomasnow                  _ => GetDexFormIndexB2W2(species' formct)              };
Magic Number,PKHeX.Core,DexFormUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\DexFormUtil.cs,GetDexFormIndexXY,The following statement contains a magic number: return species switch              {                  666 => 083' // 20 Vivillion                  669 => 103' // 5 Flabébé                  670 => 108' // 6 Floette                  671 => 114' // 5 Florges                  710 => 119' // 4 Pumpkaboo                  711 => 123' // 4 Gourgeist                  681 => 127' // 2 Aegislash                  716 => 129' // 2 Xerneas                  003 => 131' // 2 Venusaur                  006 => 133' // 3 Charizard                  009 => 136' // 2 Blastoise                  065 => 138' // 2 Alakazam                  094 => 140' // 2 Gengar                  115 => 142' // 2 Kangaskhan                  127 => 144' // 2 Pinsir                  130 => 146' // 2 Gyarados                  142 => 148' // 2 Aerodactyl                  150 => 150' // 3 Mewtwo                  181 => 153' // 2 Ampharos                  212 => 155' // 2 Scizor                  214 => 157' // 2 Heracros                  229 => 159' // 2 Houndoom                  248 => 161' // 2 Tyranitar                  257 => 163' // 2 Blaziken                  282 => 165' // 2 Gardevoir                  303 => 167' // 2 Mawile                  306 => 169' // 2 Aggron                  308 => 171' // 2 Medicham                  310 => 173' // 2 Manetric                  354 => 175' // 2 Banette                  359 => 177' // 2 Absol                  380 => 179' // 2 Latias                  381 => 181' // 2 Latios                  445 => 183' // 2 Garchomp                  448 => 185' // 2 Lucario                  460 => 187' // 2 Abomasnow                  _ => GetDexFormIndexB2W2(species' formct)              };
Magic Number,PKHeX.Core,DexFormUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\DexFormUtil.cs,GetDexFormIndexXY,The following statement contains a magic number: return species switch              {                  666 => 083' // 20 Vivillion                  669 => 103' // 5 Flabébé                  670 => 108' // 6 Floette                  671 => 114' // 5 Florges                  710 => 119' // 4 Pumpkaboo                  711 => 123' // 4 Gourgeist                  681 => 127' // 2 Aegislash                  716 => 129' // 2 Xerneas                  003 => 131' // 2 Venusaur                  006 => 133' // 3 Charizard                  009 => 136' // 2 Blastoise                  065 => 138' // 2 Alakazam                  094 => 140' // 2 Gengar                  115 => 142' // 2 Kangaskhan                  127 => 144' // 2 Pinsir                  130 => 146' // 2 Gyarados                  142 => 148' // 2 Aerodactyl                  150 => 150' // 3 Mewtwo                  181 => 153' // 2 Ampharos                  212 => 155' // 2 Scizor                  214 => 157' // 2 Heracros                  229 => 159' // 2 Houndoom                  248 => 161' // 2 Tyranitar                  257 => 163' // 2 Blaziken                  282 => 165' // 2 Gardevoir                  303 => 167' // 2 Mawile                  306 => 169' // 2 Aggron                  308 => 171' // 2 Medicham                  310 => 173' // 2 Manetric                  354 => 175' // 2 Banette                  359 => 177' // 2 Absol                  380 => 179' // 2 Latias                  381 => 181' // 2 Latios                  445 => 183' // 2 Garchomp                  448 => 185' // 2 Lucario                  460 => 187' // 2 Abomasnow                  _ => GetDexFormIndexB2W2(species' formct)              };
Magic Number,PKHeX.Core,DexFormUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\DexFormUtil.cs,GetDexFormIndexXY,The following statement contains a magic number: return species switch              {                  666 => 083' // 20 Vivillion                  669 => 103' // 5 Flabébé                  670 => 108' // 6 Floette                  671 => 114' // 5 Florges                  710 => 119' // 4 Pumpkaboo                  711 => 123' // 4 Gourgeist                  681 => 127' // 2 Aegislash                  716 => 129' // 2 Xerneas                  003 => 131' // 2 Venusaur                  006 => 133' // 3 Charizard                  009 => 136' // 2 Blastoise                  065 => 138' // 2 Alakazam                  094 => 140' // 2 Gengar                  115 => 142' // 2 Kangaskhan                  127 => 144' // 2 Pinsir                  130 => 146' // 2 Gyarados                  142 => 148' // 2 Aerodactyl                  150 => 150' // 3 Mewtwo                  181 => 153' // 2 Ampharos                  212 => 155' // 2 Scizor                  214 => 157' // 2 Heracros                  229 => 159' // 2 Houndoom                  248 => 161' // 2 Tyranitar                  257 => 163' // 2 Blaziken                  282 => 165' // 2 Gardevoir                  303 => 167' // 2 Mawile                  306 => 169' // 2 Aggron                  308 => 171' // 2 Medicham                  310 => 173' // 2 Manetric                  354 => 175' // 2 Banette                  359 => 177' // 2 Absol                  380 => 179' // 2 Latias                  381 => 181' // 2 Latios                  445 => 183' // 2 Garchomp                  448 => 185' // 2 Lucario                  460 => 187' // 2 Abomasnow                  _ => GetDexFormIndexB2W2(species' formct)              };
Magic Number,PKHeX.Core,DexFormUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\DexFormUtil.cs,GetDexFormIndexXY,The following statement contains a magic number: return species switch              {                  666 => 083' // 20 Vivillion                  669 => 103' // 5 Flabébé                  670 => 108' // 6 Floette                  671 => 114' // 5 Florges                  710 => 119' // 4 Pumpkaboo                  711 => 123' // 4 Gourgeist                  681 => 127' // 2 Aegislash                  716 => 129' // 2 Xerneas                  003 => 131' // 2 Venusaur                  006 => 133' // 3 Charizard                  009 => 136' // 2 Blastoise                  065 => 138' // 2 Alakazam                  094 => 140' // 2 Gengar                  115 => 142' // 2 Kangaskhan                  127 => 144' // 2 Pinsir                  130 => 146' // 2 Gyarados                  142 => 148' // 2 Aerodactyl                  150 => 150' // 3 Mewtwo                  181 => 153' // 2 Ampharos                  212 => 155' // 2 Scizor                  214 => 157' // 2 Heracros                  229 => 159' // 2 Houndoom                  248 => 161' // 2 Tyranitar                  257 => 163' // 2 Blaziken                  282 => 165' // 2 Gardevoir                  303 => 167' // 2 Mawile                  306 => 169' // 2 Aggron                  308 => 171' // 2 Medicham                  310 => 173' // 2 Manetric                  354 => 175' // 2 Banette                  359 => 177' // 2 Absol                  380 => 179' // 2 Latias                  381 => 181' // 2 Latios                  445 => 183' // 2 Garchomp                  448 => 185' // 2 Lucario                  460 => 187' // 2 Abomasnow                  _ => GetDexFormIndexB2W2(species' formct)              };
Magic Number,PKHeX.Core,DexFormUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\DexFormUtil.cs,GetDexFormIndexXY,The following statement contains a magic number: return species switch              {                  666 => 083' // 20 Vivillion                  669 => 103' // 5 Flabébé                  670 => 108' // 6 Floette                  671 => 114' // 5 Florges                  710 => 119' // 4 Pumpkaboo                  711 => 123' // 4 Gourgeist                  681 => 127' // 2 Aegislash                  716 => 129' // 2 Xerneas                  003 => 131' // 2 Venusaur                  006 => 133' // 3 Charizard                  009 => 136' // 2 Blastoise                  065 => 138' // 2 Alakazam                  094 => 140' // 2 Gengar                  115 => 142' // 2 Kangaskhan                  127 => 144' // 2 Pinsir                  130 => 146' // 2 Gyarados                  142 => 148' // 2 Aerodactyl                  150 => 150' // 3 Mewtwo                  181 => 153' // 2 Ampharos                  212 => 155' // 2 Scizor                  214 => 157' // 2 Heracros                  229 => 159' // 2 Houndoom                  248 => 161' // 2 Tyranitar                  257 => 163' // 2 Blaziken                  282 => 165' // 2 Gardevoir                  303 => 167' // 2 Mawile                  306 => 169' // 2 Aggron                  308 => 171' // 2 Medicham                  310 => 173' // 2 Manetric                  354 => 175' // 2 Banette                  359 => 177' // 2 Absol                  380 => 179' // 2 Latias                  381 => 181' // 2 Latios                  445 => 183' // 2 Garchomp                  448 => 185' // 2 Lucario                  460 => 187' // 2 Abomasnow                  _ => GetDexFormIndexB2W2(species' formct)              };
Magic Number,PKHeX.Core,DexFormUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\DexFormUtil.cs,GetDexFormIndexXY,The following statement contains a magic number: return species switch              {                  666 => 083' // 20 Vivillion                  669 => 103' // 5 Flabébé                  670 => 108' // 6 Floette                  671 => 114' // 5 Florges                  710 => 119' // 4 Pumpkaboo                  711 => 123' // 4 Gourgeist                  681 => 127' // 2 Aegislash                  716 => 129' // 2 Xerneas                  003 => 131' // 2 Venusaur                  006 => 133' // 3 Charizard                  009 => 136' // 2 Blastoise                  065 => 138' // 2 Alakazam                  094 => 140' // 2 Gengar                  115 => 142' // 2 Kangaskhan                  127 => 144' // 2 Pinsir                  130 => 146' // 2 Gyarados                  142 => 148' // 2 Aerodactyl                  150 => 150' // 3 Mewtwo                  181 => 153' // 2 Ampharos                  212 => 155' // 2 Scizor                  214 => 157' // 2 Heracros                  229 => 159' // 2 Houndoom                  248 => 161' // 2 Tyranitar                  257 => 163' // 2 Blaziken                  282 => 165' // 2 Gardevoir                  303 => 167' // 2 Mawile                  306 => 169' // 2 Aggron                  308 => 171' // 2 Medicham                  310 => 173' // 2 Manetric                  354 => 175' // 2 Banette                  359 => 177' // 2 Absol                  380 => 179' // 2 Latias                  381 => 181' // 2 Latios                  445 => 183' // 2 Garchomp                  448 => 185' // 2 Lucario                  460 => 187' // 2 Abomasnow                  _ => GetDexFormIndexB2W2(species' formct)              };
Magic Number,PKHeX.Core,DexFormUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\DexFormUtil.cs,GetDexFormIndexXY,The following statement contains a magic number: return species switch              {                  666 => 083' // 20 Vivillion                  669 => 103' // 5 Flabébé                  670 => 108' // 6 Floette                  671 => 114' // 5 Florges                  710 => 119' // 4 Pumpkaboo                  711 => 123' // 4 Gourgeist                  681 => 127' // 2 Aegislash                  716 => 129' // 2 Xerneas                  003 => 131' // 2 Venusaur                  006 => 133' // 3 Charizard                  009 => 136' // 2 Blastoise                  065 => 138' // 2 Alakazam                  094 => 140' // 2 Gengar                  115 => 142' // 2 Kangaskhan                  127 => 144' // 2 Pinsir                  130 => 146' // 2 Gyarados                  142 => 148' // 2 Aerodactyl                  150 => 150' // 3 Mewtwo                  181 => 153' // 2 Ampharos                  212 => 155' // 2 Scizor                  214 => 157' // 2 Heracros                  229 => 159' // 2 Houndoom                  248 => 161' // 2 Tyranitar                  257 => 163' // 2 Blaziken                  282 => 165' // 2 Gardevoir                  303 => 167' // 2 Mawile                  306 => 169' // 2 Aggron                  308 => 171' // 2 Medicham                  310 => 173' // 2 Manetric                  354 => 175' // 2 Banette                  359 => 177' // 2 Absol                  380 => 179' // 2 Latias                  381 => 181' // 2 Latios                  445 => 183' // 2 Garchomp                  448 => 185' // 2 Lucario                  460 => 187' // 2 Abomasnow                  _ => GetDexFormIndexB2W2(species' formct)              };
Magic Number,PKHeX.Core,DexFormUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\DexFormUtil.cs,GetDexFormIndexXY,The following statement contains a magic number: return species switch              {                  666 => 083' // 20 Vivillion                  669 => 103' // 5 Flabébé                  670 => 108' // 6 Floette                  671 => 114' // 5 Florges                  710 => 119' // 4 Pumpkaboo                  711 => 123' // 4 Gourgeist                  681 => 127' // 2 Aegislash                  716 => 129' // 2 Xerneas                  003 => 131' // 2 Venusaur                  006 => 133' // 3 Charizard                  009 => 136' // 2 Blastoise                  065 => 138' // 2 Alakazam                  094 => 140' // 2 Gengar                  115 => 142' // 2 Kangaskhan                  127 => 144' // 2 Pinsir                  130 => 146' // 2 Gyarados                  142 => 148' // 2 Aerodactyl                  150 => 150' // 3 Mewtwo                  181 => 153' // 2 Ampharos                  212 => 155' // 2 Scizor                  214 => 157' // 2 Heracros                  229 => 159' // 2 Houndoom                  248 => 161' // 2 Tyranitar                  257 => 163' // 2 Blaziken                  282 => 165' // 2 Gardevoir                  303 => 167' // 2 Mawile                  306 => 169' // 2 Aggron                  308 => 171' // 2 Medicham                  310 => 173' // 2 Manetric                  354 => 175' // 2 Banette                  359 => 177' // 2 Absol                  380 => 179' // 2 Latias                  381 => 181' // 2 Latios                  445 => 183' // 2 Garchomp                  448 => 185' // 2 Lucario                  460 => 187' // 2 Abomasnow                  _ => GetDexFormIndexB2W2(species' formct)              };
Magic Number,PKHeX.Core,DexFormUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\DexFormUtil.cs,GetDexFormIndexXY,The following statement contains a magic number: return species switch              {                  666 => 083' // 20 Vivillion                  669 => 103' // 5 Flabébé                  670 => 108' // 6 Floette                  671 => 114' // 5 Florges                  710 => 119' // 4 Pumpkaboo                  711 => 123' // 4 Gourgeist                  681 => 127' // 2 Aegislash                  716 => 129' // 2 Xerneas                  003 => 131' // 2 Venusaur                  006 => 133' // 3 Charizard                  009 => 136' // 2 Blastoise                  065 => 138' // 2 Alakazam                  094 => 140' // 2 Gengar                  115 => 142' // 2 Kangaskhan                  127 => 144' // 2 Pinsir                  130 => 146' // 2 Gyarados                  142 => 148' // 2 Aerodactyl                  150 => 150' // 3 Mewtwo                  181 => 153' // 2 Ampharos                  212 => 155' // 2 Scizor                  214 => 157' // 2 Heracros                  229 => 159' // 2 Houndoom                  248 => 161' // 2 Tyranitar                  257 => 163' // 2 Blaziken                  282 => 165' // 2 Gardevoir                  303 => 167' // 2 Mawile                  306 => 169' // 2 Aggron                  308 => 171' // 2 Medicham                  310 => 173' // 2 Manetric                  354 => 175' // 2 Banette                  359 => 177' // 2 Absol                  380 => 179' // 2 Latias                  381 => 181' // 2 Latios                  445 => 183' // 2 Garchomp                  448 => 185' // 2 Lucario                  460 => 187' // 2 Abomasnow                  _ => GetDexFormIndexB2W2(species' formct)              };
Magic Number,PKHeX.Core,DexFormUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\DexFormUtil.cs,GetDexFormIndexXY,The following statement contains a magic number: return species switch              {                  666 => 083' // 20 Vivillion                  669 => 103' // 5 Flabébé                  670 => 108' // 6 Floette                  671 => 114' // 5 Florges                  710 => 119' // 4 Pumpkaboo                  711 => 123' // 4 Gourgeist                  681 => 127' // 2 Aegislash                  716 => 129' // 2 Xerneas                  003 => 131' // 2 Venusaur                  006 => 133' // 3 Charizard                  009 => 136' // 2 Blastoise                  065 => 138' // 2 Alakazam                  094 => 140' // 2 Gengar                  115 => 142' // 2 Kangaskhan                  127 => 144' // 2 Pinsir                  130 => 146' // 2 Gyarados                  142 => 148' // 2 Aerodactyl                  150 => 150' // 3 Mewtwo                  181 => 153' // 2 Ampharos                  212 => 155' // 2 Scizor                  214 => 157' // 2 Heracros                  229 => 159' // 2 Houndoom                  248 => 161' // 2 Tyranitar                  257 => 163' // 2 Blaziken                  282 => 165' // 2 Gardevoir                  303 => 167' // 2 Mawile                  306 => 169' // 2 Aggron                  308 => 171' // 2 Medicham                  310 => 173' // 2 Manetric                  354 => 175' // 2 Banette                  359 => 177' // 2 Absol                  380 => 179' // 2 Latias                  381 => 181' // 2 Latios                  445 => 183' // 2 Garchomp                  448 => 185' // 2 Lucario                  460 => 187' // 2 Abomasnow                  _ => GetDexFormIndexB2W2(species' formct)              };
Magic Number,PKHeX.Core,DexFormUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\DexFormUtil.cs,GetDexFormIndexXY,The following statement contains a magic number: return species switch              {                  666 => 083' // 20 Vivillion                  669 => 103' // 5 Flabébé                  670 => 108' // 6 Floette                  671 => 114' // 5 Florges                  710 => 119' // 4 Pumpkaboo                  711 => 123' // 4 Gourgeist                  681 => 127' // 2 Aegislash                  716 => 129' // 2 Xerneas                  003 => 131' // 2 Venusaur                  006 => 133' // 3 Charizard                  009 => 136' // 2 Blastoise                  065 => 138' // 2 Alakazam                  094 => 140' // 2 Gengar                  115 => 142' // 2 Kangaskhan                  127 => 144' // 2 Pinsir                  130 => 146' // 2 Gyarados                  142 => 148' // 2 Aerodactyl                  150 => 150' // 3 Mewtwo                  181 => 153' // 2 Ampharos                  212 => 155' // 2 Scizor                  214 => 157' // 2 Heracros                  229 => 159' // 2 Houndoom                  248 => 161' // 2 Tyranitar                  257 => 163' // 2 Blaziken                  282 => 165' // 2 Gardevoir                  303 => 167' // 2 Mawile                  306 => 169' // 2 Aggron                  308 => 171' // 2 Medicham                  310 => 173' // 2 Manetric                  354 => 175' // 2 Banette                  359 => 177' // 2 Absol                  380 => 179' // 2 Latias                  381 => 181' // 2 Latios                  445 => 183' // 2 Garchomp                  448 => 185' // 2 Lucario                  460 => 187' // 2 Abomasnow                  _ => GetDexFormIndexB2W2(species' formct)              };
Magic Number,PKHeX.Core,DexFormUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\DexFormUtil.cs,GetDexFormIndexXY,The following statement contains a magic number: return species switch              {                  666 => 083' // 20 Vivillion                  669 => 103' // 5 Flabébé                  670 => 108' // 6 Floette                  671 => 114' // 5 Florges                  710 => 119' // 4 Pumpkaboo                  711 => 123' // 4 Gourgeist                  681 => 127' // 2 Aegislash                  716 => 129' // 2 Xerneas                  003 => 131' // 2 Venusaur                  006 => 133' // 3 Charizard                  009 => 136' // 2 Blastoise                  065 => 138' // 2 Alakazam                  094 => 140' // 2 Gengar                  115 => 142' // 2 Kangaskhan                  127 => 144' // 2 Pinsir                  130 => 146' // 2 Gyarados                  142 => 148' // 2 Aerodactyl                  150 => 150' // 3 Mewtwo                  181 => 153' // 2 Ampharos                  212 => 155' // 2 Scizor                  214 => 157' // 2 Heracros                  229 => 159' // 2 Houndoom                  248 => 161' // 2 Tyranitar                  257 => 163' // 2 Blaziken                  282 => 165' // 2 Gardevoir                  303 => 167' // 2 Mawile                  306 => 169' // 2 Aggron                  308 => 171' // 2 Medicham                  310 => 173' // 2 Manetric                  354 => 175' // 2 Banette                  359 => 177' // 2 Absol                  380 => 179' // 2 Latias                  381 => 181' // 2 Latios                  445 => 183' // 2 Garchomp                  448 => 185' // 2 Lucario                  460 => 187' // 2 Abomasnow                  _ => GetDexFormIndexB2W2(species' formct)              };
Magic Number,PKHeX.Core,DexFormUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\DexFormUtil.cs,GetDexFormIndexXY,The following statement contains a magic number: return species switch              {                  666 => 083' // 20 Vivillion                  669 => 103' // 5 Flabébé                  670 => 108' // 6 Floette                  671 => 114' // 5 Florges                  710 => 119' // 4 Pumpkaboo                  711 => 123' // 4 Gourgeist                  681 => 127' // 2 Aegislash                  716 => 129' // 2 Xerneas                  003 => 131' // 2 Venusaur                  006 => 133' // 3 Charizard                  009 => 136' // 2 Blastoise                  065 => 138' // 2 Alakazam                  094 => 140' // 2 Gengar                  115 => 142' // 2 Kangaskhan                  127 => 144' // 2 Pinsir                  130 => 146' // 2 Gyarados                  142 => 148' // 2 Aerodactyl                  150 => 150' // 3 Mewtwo                  181 => 153' // 2 Ampharos                  212 => 155' // 2 Scizor                  214 => 157' // 2 Heracros                  229 => 159' // 2 Houndoom                  248 => 161' // 2 Tyranitar                  257 => 163' // 2 Blaziken                  282 => 165' // 2 Gardevoir                  303 => 167' // 2 Mawile                  306 => 169' // 2 Aggron                  308 => 171' // 2 Medicham                  310 => 173' // 2 Manetric                  354 => 175' // 2 Banette                  359 => 177' // 2 Absol                  380 => 179' // 2 Latias                  381 => 181' // 2 Latios                  445 => 183' // 2 Garchomp                  448 => 185' // 2 Lucario                  460 => 187' // 2 Abomasnow                  _ => GetDexFormIndexB2W2(species' formct)              };
Magic Number,PKHeX.Core,DexFormUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\DexFormUtil.cs,GetDexFormIndexXY,The following statement contains a magic number: return species switch              {                  666 => 083' // 20 Vivillion                  669 => 103' // 5 Flabébé                  670 => 108' // 6 Floette                  671 => 114' // 5 Florges                  710 => 119' // 4 Pumpkaboo                  711 => 123' // 4 Gourgeist                  681 => 127' // 2 Aegislash                  716 => 129' // 2 Xerneas                  003 => 131' // 2 Venusaur                  006 => 133' // 3 Charizard                  009 => 136' // 2 Blastoise                  065 => 138' // 2 Alakazam                  094 => 140' // 2 Gengar                  115 => 142' // 2 Kangaskhan                  127 => 144' // 2 Pinsir                  130 => 146' // 2 Gyarados                  142 => 148' // 2 Aerodactyl                  150 => 150' // 3 Mewtwo                  181 => 153' // 2 Ampharos                  212 => 155' // 2 Scizor                  214 => 157' // 2 Heracros                  229 => 159' // 2 Houndoom                  248 => 161' // 2 Tyranitar                  257 => 163' // 2 Blaziken                  282 => 165' // 2 Gardevoir                  303 => 167' // 2 Mawile                  306 => 169' // 2 Aggron                  308 => 171' // 2 Medicham                  310 => 173' // 2 Manetric                  354 => 175' // 2 Banette                  359 => 177' // 2 Absol                  380 => 179' // 2 Latias                  381 => 181' // 2 Latios                  445 => 183' // 2 Garchomp                  448 => 185' // 2 Lucario                  460 => 187' // 2 Abomasnow                  _ => GetDexFormIndexB2W2(species' formct)              };
Magic Number,PKHeX.Core,DexFormUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\DexFormUtil.cs,GetDexFormIndexXY,The following statement contains a magic number: return species switch              {                  666 => 083' // 20 Vivillion                  669 => 103' // 5 Flabébé                  670 => 108' // 6 Floette                  671 => 114' // 5 Florges                  710 => 119' // 4 Pumpkaboo                  711 => 123' // 4 Gourgeist                  681 => 127' // 2 Aegislash                  716 => 129' // 2 Xerneas                  003 => 131' // 2 Venusaur                  006 => 133' // 3 Charizard                  009 => 136' // 2 Blastoise                  065 => 138' // 2 Alakazam                  094 => 140' // 2 Gengar                  115 => 142' // 2 Kangaskhan                  127 => 144' // 2 Pinsir                  130 => 146' // 2 Gyarados                  142 => 148' // 2 Aerodactyl                  150 => 150' // 3 Mewtwo                  181 => 153' // 2 Ampharos                  212 => 155' // 2 Scizor                  214 => 157' // 2 Heracros                  229 => 159' // 2 Houndoom                  248 => 161' // 2 Tyranitar                  257 => 163' // 2 Blaziken                  282 => 165' // 2 Gardevoir                  303 => 167' // 2 Mawile                  306 => 169' // 2 Aggron                  308 => 171' // 2 Medicham                  310 => 173' // 2 Manetric                  354 => 175' // 2 Banette                  359 => 177' // 2 Absol                  380 => 179' // 2 Latias                  381 => 181' // 2 Latios                  445 => 183' // 2 Garchomp                  448 => 185' // 2 Lucario                  460 => 187' // 2 Abomasnow                  _ => GetDexFormIndexB2W2(species' formct)              };
Magic Number,PKHeX.Core,DexFormUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\DexFormUtil.cs,GetDexFormIndexXY,The following statement contains a magic number: return species switch              {                  666 => 083' // 20 Vivillion                  669 => 103' // 5 Flabébé                  670 => 108' // 6 Floette                  671 => 114' // 5 Florges                  710 => 119' // 4 Pumpkaboo                  711 => 123' // 4 Gourgeist                  681 => 127' // 2 Aegislash                  716 => 129' // 2 Xerneas                  003 => 131' // 2 Venusaur                  006 => 133' // 3 Charizard                  009 => 136' // 2 Blastoise                  065 => 138' // 2 Alakazam                  094 => 140' // 2 Gengar                  115 => 142' // 2 Kangaskhan                  127 => 144' // 2 Pinsir                  130 => 146' // 2 Gyarados                  142 => 148' // 2 Aerodactyl                  150 => 150' // 3 Mewtwo                  181 => 153' // 2 Ampharos                  212 => 155' // 2 Scizor                  214 => 157' // 2 Heracros                  229 => 159' // 2 Houndoom                  248 => 161' // 2 Tyranitar                  257 => 163' // 2 Blaziken                  282 => 165' // 2 Gardevoir                  303 => 167' // 2 Mawile                  306 => 169' // 2 Aggron                  308 => 171' // 2 Medicham                  310 => 173' // 2 Manetric                  354 => 175' // 2 Banette                  359 => 177' // 2 Absol                  380 => 179' // 2 Latias                  381 => 181' // 2 Latios                  445 => 183' // 2 Garchomp                  448 => 185' // 2 Lucario                  460 => 187' // 2 Abomasnow                  _ => GetDexFormIndexB2W2(species' formct)              };
Magic Number,PKHeX.Core,DexFormUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\DexFormUtil.cs,GetDexFormIndexXY,The following statement contains a magic number: return species switch              {                  666 => 083' // 20 Vivillion                  669 => 103' // 5 Flabébé                  670 => 108' // 6 Floette                  671 => 114' // 5 Florges                  710 => 119' // 4 Pumpkaboo                  711 => 123' // 4 Gourgeist                  681 => 127' // 2 Aegislash                  716 => 129' // 2 Xerneas                  003 => 131' // 2 Venusaur                  006 => 133' // 3 Charizard                  009 => 136' // 2 Blastoise                  065 => 138' // 2 Alakazam                  094 => 140' // 2 Gengar                  115 => 142' // 2 Kangaskhan                  127 => 144' // 2 Pinsir                  130 => 146' // 2 Gyarados                  142 => 148' // 2 Aerodactyl                  150 => 150' // 3 Mewtwo                  181 => 153' // 2 Ampharos                  212 => 155' // 2 Scizor                  214 => 157' // 2 Heracros                  229 => 159' // 2 Houndoom                  248 => 161' // 2 Tyranitar                  257 => 163' // 2 Blaziken                  282 => 165' // 2 Gardevoir                  303 => 167' // 2 Mawile                  306 => 169' // 2 Aggron                  308 => 171' // 2 Medicham                  310 => 173' // 2 Manetric                  354 => 175' // 2 Banette                  359 => 177' // 2 Absol                  380 => 179' // 2 Latias                  381 => 181' // 2 Latios                  445 => 183' // 2 Garchomp                  448 => 185' // 2 Lucario                  460 => 187' // 2 Abomasnow                  _ => GetDexFormIndexB2W2(species' formct)              };
Magic Number,PKHeX.Core,DexFormUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\DexFormUtil.cs,GetDexFormIndexXY,The following statement contains a magic number: return species switch              {                  666 => 083' // 20 Vivillion                  669 => 103' // 5 Flabébé                  670 => 108' // 6 Floette                  671 => 114' // 5 Florges                  710 => 119' // 4 Pumpkaboo                  711 => 123' // 4 Gourgeist                  681 => 127' // 2 Aegislash                  716 => 129' // 2 Xerneas                  003 => 131' // 2 Venusaur                  006 => 133' // 3 Charizard                  009 => 136' // 2 Blastoise                  065 => 138' // 2 Alakazam                  094 => 140' // 2 Gengar                  115 => 142' // 2 Kangaskhan                  127 => 144' // 2 Pinsir                  130 => 146' // 2 Gyarados                  142 => 148' // 2 Aerodactyl                  150 => 150' // 3 Mewtwo                  181 => 153' // 2 Ampharos                  212 => 155' // 2 Scizor                  214 => 157' // 2 Heracros                  229 => 159' // 2 Houndoom                  248 => 161' // 2 Tyranitar                  257 => 163' // 2 Blaziken                  282 => 165' // 2 Gardevoir                  303 => 167' // 2 Mawile                  306 => 169' // 2 Aggron                  308 => 171' // 2 Medicham                  310 => 173' // 2 Manetric                  354 => 175' // 2 Banette                  359 => 177' // 2 Absol                  380 => 179' // 2 Latias                  381 => 181' // 2 Latios                  445 => 183' // 2 Garchomp                  448 => 185' // 2 Lucario                  460 => 187' // 2 Abomasnow                  _ => GetDexFormIndexB2W2(species' formct)              };
Magic Number,PKHeX.Core,DexFormUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\DexFormUtil.cs,GetDexFormIndexXY,The following statement contains a magic number: return species switch              {                  666 => 083' // 20 Vivillion                  669 => 103' // 5 Flabébé                  670 => 108' // 6 Floette                  671 => 114' // 5 Florges                  710 => 119' // 4 Pumpkaboo                  711 => 123' // 4 Gourgeist                  681 => 127' // 2 Aegislash                  716 => 129' // 2 Xerneas                  003 => 131' // 2 Venusaur                  006 => 133' // 3 Charizard                  009 => 136' // 2 Blastoise                  065 => 138' // 2 Alakazam                  094 => 140' // 2 Gengar                  115 => 142' // 2 Kangaskhan                  127 => 144' // 2 Pinsir                  130 => 146' // 2 Gyarados                  142 => 148' // 2 Aerodactyl                  150 => 150' // 3 Mewtwo                  181 => 153' // 2 Ampharos                  212 => 155' // 2 Scizor                  214 => 157' // 2 Heracros                  229 => 159' // 2 Houndoom                  248 => 161' // 2 Tyranitar                  257 => 163' // 2 Blaziken                  282 => 165' // 2 Gardevoir                  303 => 167' // 2 Mawile                  306 => 169' // 2 Aggron                  308 => 171' // 2 Medicham                  310 => 173' // 2 Manetric                  354 => 175' // 2 Banette                  359 => 177' // 2 Absol                  380 => 179' // 2 Latias                  381 => 181' // 2 Latios                  445 => 183' // 2 Garchomp                  448 => 185' // 2 Lucario                  460 => 187' // 2 Abomasnow                  _ => GetDexFormIndexB2W2(species' formct)              };
Magic Number,PKHeX.Core,DexFormUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\DexFormUtil.cs,GetDexFormIndexXY,The following statement contains a magic number: return species switch              {                  666 => 083' // 20 Vivillion                  669 => 103' // 5 Flabébé                  670 => 108' // 6 Floette                  671 => 114' // 5 Florges                  710 => 119' // 4 Pumpkaboo                  711 => 123' // 4 Gourgeist                  681 => 127' // 2 Aegislash                  716 => 129' // 2 Xerneas                  003 => 131' // 2 Venusaur                  006 => 133' // 3 Charizard                  009 => 136' // 2 Blastoise                  065 => 138' // 2 Alakazam                  094 => 140' // 2 Gengar                  115 => 142' // 2 Kangaskhan                  127 => 144' // 2 Pinsir                  130 => 146' // 2 Gyarados                  142 => 148' // 2 Aerodactyl                  150 => 150' // 3 Mewtwo                  181 => 153' // 2 Ampharos                  212 => 155' // 2 Scizor                  214 => 157' // 2 Heracros                  229 => 159' // 2 Houndoom                  248 => 161' // 2 Tyranitar                  257 => 163' // 2 Blaziken                  282 => 165' // 2 Gardevoir                  303 => 167' // 2 Mawile                  306 => 169' // 2 Aggron                  308 => 171' // 2 Medicham                  310 => 173' // 2 Manetric                  354 => 175' // 2 Banette                  359 => 177' // 2 Absol                  380 => 179' // 2 Latias                  381 => 181' // 2 Latios                  445 => 183' // 2 Garchomp                  448 => 185' // 2 Lucario                  460 => 187' // 2 Abomasnow                  _ => GetDexFormIndexB2W2(species' formct)              };
Magic Number,PKHeX.Core,DexFormUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\DexFormUtil.cs,GetDexFormIndexXY,The following statement contains a magic number: return species switch              {                  666 => 083' // 20 Vivillion                  669 => 103' // 5 Flabébé                  670 => 108' // 6 Floette                  671 => 114' // 5 Florges                  710 => 119' // 4 Pumpkaboo                  711 => 123' // 4 Gourgeist                  681 => 127' // 2 Aegislash                  716 => 129' // 2 Xerneas                  003 => 131' // 2 Venusaur                  006 => 133' // 3 Charizard                  009 => 136' // 2 Blastoise                  065 => 138' // 2 Alakazam                  094 => 140' // 2 Gengar                  115 => 142' // 2 Kangaskhan                  127 => 144' // 2 Pinsir                  130 => 146' // 2 Gyarados                  142 => 148' // 2 Aerodactyl                  150 => 150' // 3 Mewtwo                  181 => 153' // 2 Ampharos                  212 => 155' // 2 Scizor                  214 => 157' // 2 Heracros                  229 => 159' // 2 Houndoom                  248 => 161' // 2 Tyranitar                  257 => 163' // 2 Blaziken                  282 => 165' // 2 Gardevoir                  303 => 167' // 2 Mawile                  306 => 169' // 2 Aggron                  308 => 171' // 2 Medicham                  310 => 173' // 2 Manetric                  354 => 175' // 2 Banette                  359 => 177' // 2 Absol                  380 => 179' // 2 Latias                  381 => 181' // 2 Latios                  445 => 183' // 2 Garchomp                  448 => 185' // 2 Lucario                  460 => 187' // 2 Abomasnow                  _ => GetDexFormIndexB2W2(species' formct)              };
Magic Number,PKHeX.Core,DexFormUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\DexFormUtil.cs,GetDexFormIndexXY,The following statement contains a magic number: return species switch              {                  666 => 083' // 20 Vivillion                  669 => 103' // 5 Flabébé                  670 => 108' // 6 Floette                  671 => 114' // 5 Florges                  710 => 119' // 4 Pumpkaboo                  711 => 123' // 4 Gourgeist                  681 => 127' // 2 Aegislash                  716 => 129' // 2 Xerneas                  003 => 131' // 2 Venusaur                  006 => 133' // 3 Charizard                  009 => 136' // 2 Blastoise                  065 => 138' // 2 Alakazam                  094 => 140' // 2 Gengar                  115 => 142' // 2 Kangaskhan                  127 => 144' // 2 Pinsir                  130 => 146' // 2 Gyarados                  142 => 148' // 2 Aerodactyl                  150 => 150' // 3 Mewtwo                  181 => 153' // 2 Ampharos                  212 => 155' // 2 Scizor                  214 => 157' // 2 Heracros                  229 => 159' // 2 Houndoom                  248 => 161' // 2 Tyranitar                  257 => 163' // 2 Blaziken                  282 => 165' // 2 Gardevoir                  303 => 167' // 2 Mawile                  306 => 169' // 2 Aggron                  308 => 171' // 2 Medicham                  310 => 173' // 2 Manetric                  354 => 175' // 2 Banette                  359 => 177' // 2 Absol                  380 => 179' // 2 Latias                  381 => 181' // 2 Latios                  445 => 183' // 2 Garchomp                  448 => 185' // 2 Lucario                  460 => 187' // 2 Abomasnow                  _ => GetDexFormIndexB2W2(species' formct)              };
Magic Number,PKHeX.Core,DexFormUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\DexFormUtil.cs,GetDexFormIndexXY,The following statement contains a magic number: return species switch              {                  666 => 083' // 20 Vivillion                  669 => 103' // 5 Flabébé                  670 => 108' // 6 Floette                  671 => 114' // 5 Florges                  710 => 119' // 4 Pumpkaboo                  711 => 123' // 4 Gourgeist                  681 => 127' // 2 Aegislash                  716 => 129' // 2 Xerneas                  003 => 131' // 2 Venusaur                  006 => 133' // 3 Charizard                  009 => 136' // 2 Blastoise                  065 => 138' // 2 Alakazam                  094 => 140' // 2 Gengar                  115 => 142' // 2 Kangaskhan                  127 => 144' // 2 Pinsir                  130 => 146' // 2 Gyarados                  142 => 148' // 2 Aerodactyl                  150 => 150' // 3 Mewtwo                  181 => 153' // 2 Ampharos                  212 => 155' // 2 Scizor                  214 => 157' // 2 Heracros                  229 => 159' // 2 Houndoom                  248 => 161' // 2 Tyranitar                  257 => 163' // 2 Blaziken                  282 => 165' // 2 Gardevoir                  303 => 167' // 2 Mawile                  306 => 169' // 2 Aggron                  308 => 171' // 2 Medicham                  310 => 173' // 2 Manetric                  354 => 175' // 2 Banette                  359 => 177' // 2 Absol                  380 => 179' // 2 Latias                  381 => 181' // 2 Latios                  445 => 183' // 2 Garchomp                  448 => 185' // 2 Lucario                  460 => 187' // 2 Abomasnow                  _ => GetDexFormIndexB2W2(species' formct)              };
Magic Number,PKHeX.Core,DexFormUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\DexFormUtil.cs,GetDexFormIndexXY,The following statement contains a magic number: return species switch              {                  666 => 083' // 20 Vivillion                  669 => 103' // 5 Flabébé                  670 => 108' // 6 Floette                  671 => 114' // 5 Florges                  710 => 119' // 4 Pumpkaboo                  711 => 123' // 4 Gourgeist                  681 => 127' // 2 Aegislash                  716 => 129' // 2 Xerneas                  003 => 131' // 2 Venusaur                  006 => 133' // 3 Charizard                  009 => 136' // 2 Blastoise                  065 => 138' // 2 Alakazam                  094 => 140' // 2 Gengar                  115 => 142' // 2 Kangaskhan                  127 => 144' // 2 Pinsir                  130 => 146' // 2 Gyarados                  142 => 148' // 2 Aerodactyl                  150 => 150' // 3 Mewtwo                  181 => 153' // 2 Ampharos                  212 => 155' // 2 Scizor                  214 => 157' // 2 Heracros                  229 => 159' // 2 Houndoom                  248 => 161' // 2 Tyranitar                  257 => 163' // 2 Blaziken                  282 => 165' // 2 Gardevoir                  303 => 167' // 2 Mawile                  306 => 169' // 2 Aggron                  308 => 171' // 2 Medicham                  310 => 173' // 2 Manetric                  354 => 175' // 2 Banette                  359 => 177' // 2 Absol                  380 => 179' // 2 Latias                  381 => 181' // 2 Latios                  445 => 183' // 2 Garchomp                  448 => 185' // 2 Lucario                  460 => 187' // 2 Abomasnow                  _ => GetDexFormIndexB2W2(species' formct)              };
Magic Number,PKHeX.Core,DexFormUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\DexFormUtil.cs,GetDexFormIndexXY,The following statement contains a magic number: return species switch              {                  666 => 083' // 20 Vivillion                  669 => 103' // 5 Flabébé                  670 => 108' // 6 Floette                  671 => 114' // 5 Florges                  710 => 119' // 4 Pumpkaboo                  711 => 123' // 4 Gourgeist                  681 => 127' // 2 Aegislash                  716 => 129' // 2 Xerneas                  003 => 131' // 2 Venusaur                  006 => 133' // 3 Charizard                  009 => 136' // 2 Blastoise                  065 => 138' // 2 Alakazam                  094 => 140' // 2 Gengar                  115 => 142' // 2 Kangaskhan                  127 => 144' // 2 Pinsir                  130 => 146' // 2 Gyarados                  142 => 148' // 2 Aerodactyl                  150 => 150' // 3 Mewtwo                  181 => 153' // 2 Ampharos                  212 => 155' // 2 Scizor                  214 => 157' // 2 Heracros                  229 => 159' // 2 Houndoom                  248 => 161' // 2 Tyranitar                  257 => 163' // 2 Blaziken                  282 => 165' // 2 Gardevoir                  303 => 167' // 2 Mawile                  306 => 169' // 2 Aggron                  308 => 171' // 2 Medicham                  310 => 173' // 2 Manetric                  354 => 175' // 2 Banette                  359 => 177' // 2 Absol                  380 => 179' // 2 Latias                  381 => 181' // 2 Latios                  445 => 183' // 2 Garchomp                  448 => 185' // 2 Lucario                  460 => 187' // 2 Abomasnow                  _ => GetDexFormIndexB2W2(species' formct)              };
Magic Number,PKHeX.Core,DexFormUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\DexFormUtil.cs,GetDexFormIndexXY,The following statement contains a magic number: return species switch              {                  666 => 083' // 20 Vivillion                  669 => 103' // 5 Flabébé                  670 => 108' // 6 Floette                  671 => 114' // 5 Florges                  710 => 119' // 4 Pumpkaboo                  711 => 123' // 4 Gourgeist                  681 => 127' // 2 Aegislash                  716 => 129' // 2 Xerneas                  003 => 131' // 2 Venusaur                  006 => 133' // 3 Charizard                  009 => 136' // 2 Blastoise                  065 => 138' // 2 Alakazam                  094 => 140' // 2 Gengar                  115 => 142' // 2 Kangaskhan                  127 => 144' // 2 Pinsir                  130 => 146' // 2 Gyarados                  142 => 148' // 2 Aerodactyl                  150 => 150' // 3 Mewtwo                  181 => 153' // 2 Ampharos                  212 => 155' // 2 Scizor                  214 => 157' // 2 Heracros                  229 => 159' // 2 Houndoom                  248 => 161' // 2 Tyranitar                  257 => 163' // 2 Blaziken                  282 => 165' // 2 Gardevoir                  303 => 167' // 2 Mawile                  306 => 169' // 2 Aggron                  308 => 171' // 2 Medicham                  310 => 173' // 2 Manetric                  354 => 175' // 2 Banette                  359 => 177' // 2 Absol                  380 => 179' // 2 Latias                  381 => 181' // 2 Latios                  445 => 183' // 2 Garchomp                  448 => 185' // 2 Lucario                  460 => 187' // 2 Abomasnow                  _ => GetDexFormIndexB2W2(species' formct)              };
Magic Number,PKHeX.Core,DexFormUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\DexFormUtil.cs,GetDexFormIndexXY,The following statement contains a magic number: return species switch              {                  666 => 083' // 20 Vivillion                  669 => 103' // 5 Flabébé                  670 => 108' // 6 Floette                  671 => 114' // 5 Florges                  710 => 119' // 4 Pumpkaboo                  711 => 123' // 4 Gourgeist                  681 => 127' // 2 Aegislash                  716 => 129' // 2 Xerneas                  003 => 131' // 2 Venusaur                  006 => 133' // 3 Charizard                  009 => 136' // 2 Blastoise                  065 => 138' // 2 Alakazam                  094 => 140' // 2 Gengar                  115 => 142' // 2 Kangaskhan                  127 => 144' // 2 Pinsir                  130 => 146' // 2 Gyarados                  142 => 148' // 2 Aerodactyl                  150 => 150' // 3 Mewtwo                  181 => 153' // 2 Ampharos                  212 => 155' // 2 Scizor                  214 => 157' // 2 Heracros                  229 => 159' // 2 Houndoom                  248 => 161' // 2 Tyranitar                  257 => 163' // 2 Blaziken                  282 => 165' // 2 Gardevoir                  303 => 167' // 2 Mawile                  306 => 169' // 2 Aggron                  308 => 171' // 2 Medicham                  310 => 173' // 2 Manetric                  354 => 175' // 2 Banette                  359 => 177' // 2 Absol                  380 => 179' // 2 Latias                  381 => 181' // 2 Latios                  445 => 183' // 2 Garchomp                  448 => 185' // 2 Lucario                  460 => 187' // 2 Abomasnow                  _ => GetDexFormIndexB2W2(species' formct)              };
Magic Number,PKHeX.Core,DexFormUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\DexFormUtil.cs,GetDexFormIndexXY,The following statement contains a magic number: return species switch              {                  666 => 083' // 20 Vivillion                  669 => 103' // 5 Flabébé                  670 => 108' // 6 Floette                  671 => 114' // 5 Florges                  710 => 119' // 4 Pumpkaboo                  711 => 123' // 4 Gourgeist                  681 => 127' // 2 Aegislash                  716 => 129' // 2 Xerneas                  003 => 131' // 2 Venusaur                  006 => 133' // 3 Charizard                  009 => 136' // 2 Blastoise                  065 => 138' // 2 Alakazam                  094 => 140' // 2 Gengar                  115 => 142' // 2 Kangaskhan                  127 => 144' // 2 Pinsir                  130 => 146' // 2 Gyarados                  142 => 148' // 2 Aerodactyl                  150 => 150' // 3 Mewtwo                  181 => 153' // 2 Ampharos                  212 => 155' // 2 Scizor                  214 => 157' // 2 Heracros                  229 => 159' // 2 Houndoom                  248 => 161' // 2 Tyranitar                  257 => 163' // 2 Blaziken                  282 => 165' // 2 Gardevoir                  303 => 167' // 2 Mawile                  306 => 169' // 2 Aggron                  308 => 171' // 2 Medicham                  310 => 173' // 2 Manetric                  354 => 175' // 2 Banette                  359 => 177' // 2 Absol                  380 => 179' // 2 Latias                  381 => 181' // 2 Latios                  445 => 183' // 2 Garchomp                  448 => 185' // 2 Lucario                  460 => 187' // 2 Abomasnow                  _ => GetDexFormIndexB2W2(species' formct)              };
Magic Number,PKHeX.Core,DexFormUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\DexFormUtil.cs,GetDexFormIndexXY,The following statement contains a magic number: return species switch              {                  666 => 083' // 20 Vivillion                  669 => 103' // 5 Flabébé                  670 => 108' // 6 Floette                  671 => 114' // 5 Florges                  710 => 119' // 4 Pumpkaboo                  711 => 123' // 4 Gourgeist                  681 => 127' // 2 Aegislash                  716 => 129' // 2 Xerneas                  003 => 131' // 2 Venusaur                  006 => 133' // 3 Charizard                  009 => 136' // 2 Blastoise                  065 => 138' // 2 Alakazam                  094 => 140' // 2 Gengar                  115 => 142' // 2 Kangaskhan                  127 => 144' // 2 Pinsir                  130 => 146' // 2 Gyarados                  142 => 148' // 2 Aerodactyl                  150 => 150' // 3 Mewtwo                  181 => 153' // 2 Ampharos                  212 => 155' // 2 Scizor                  214 => 157' // 2 Heracros                  229 => 159' // 2 Houndoom                  248 => 161' // 2 Tyranitar                  257 => 163' // 2 Blaziken                  282 => 165' // 2 Gardevoir                  303 => 167' // 2 Mawile                  306 => 169' // 2 Aggron                  308 => 171' // 2 Medicham                  310 => 173' // 2 Manetric                  354 => 175' // 2 Banette                  359 => 177' // 2 Absol                  380 => 179' // 2 Latias                  381 => 181' // 2 Latios                  445 => 183' // 2 Garchomp                  448 => 185' // 2 Lucario                  460 => 187' // 2 Abomasnow                  _ => GetDexFormIndexB2W2(species' formct)              };
Magic Number,PKHeX.Core,DexFormUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\DexFormUtil.cs,GetDexFormIndexXY,The following statement contains a magic number: return species switch              {                  666 => 083' // 20 Vivillion                  669 => 103' // 5 Flabébé                  670 => 108' // 6 Floette                  671 => 114' // 5 Florges                  710 => 119' // 4 Pumpkaboo                  711 => 123' // 4 Gourgeist                  681 => 127' // 2 Aegislash                  716 => 129' // 2 Xerneas                  003 => 131' // 2 Venusaur                  006 => 133' // 3 Charizard                  009 => 136' // 2 Blastoise                  065 => 138' // 2 Alakazam                  094 => 140' // 2 Gengar                  115 => 142' // 2 Kangaskhan                  127 => 144' // 2 Pinsir                  130 => 146' // 2 Gyarados                  142 => 148' // 2 Aerodactyl                  150 => 150' // 3 Mewtwo                  181 => 153' // 2 Ampharos                  212 => 155' // 2 Scizor                  214 => 157' // 2 Heracros                  229 => 159' // 2 Houndoom                  248 => 161' // 2 Tyranitar                  257 => 163' // 2 Blaziken                  282 => 165' // 2 Gardevoir                  303 => 167' // 2 Mawile                  306 => 169' // 2 Aggron                  308 => 171' // 2 Medicham                  310 => 173' // 2 Manetric                  354 => 175' // 2 Banette                  359 => 177' // 2 Absol                  380 => 179' // 2 Latias                  381 => 181' // 2 Latios                  445 => 183' // 2 Garchomp                  448 => 185' // 2 Lucario                  460 => 187' // 2 Abomasnow                  _ => GetDexFormIndexB2W2(species' formct)              };
Magic Number,PKHeX.Core,DexFormUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\DexFormUtil.cs,GetDexFormIndexXY,The following statement contains a magic number: return species switch              {                  666 => 083' // 20 Vivillion                  669 => 103' // 5 Flabébé                  670 => 108' // 6 Floette                  671 => 114' // 5 Florges                  710 => 119' // 4 Pumpkaboo                  711 => 123' // 4 Gourgeist                  681 => 127' // 2 Aegislash                  716 => 129' // 2 Xerneas                  003 => 131' // 2 Venusaur                  006 => 133' // 3 Charizard                  009 => 136' // 2 Blastoise                  065 => 138' // 2 Alakazam                  094 => 140' // 2 Gengar                  115 => 142' // 2 Kangaskhan                  127 => 144' // 2 Pinsir                  130 => 146' // 2 Gyarados                  142 => 148' // 2 Aerodactyl                  150 => 150' // 3 Mewtwo                  181 => 153' // 2 Ampharos                  212 => 155' // 2 Scizor                  214 => 157' // 2 Heracros                  229 => 159' // 2 Houndoom                  248 => 161' // 2 Tyranitar                  257 => 163' // 2 Blaziken                  282 => 165' // 2 Gardevoir                  303 => 167' // 2 Mawile                  306 => 169' // 2 Aggron                  308 => 171' // 2 Medicham                  310 => 173' // 2 Manetric                  354 => 175' // 2 Banette                  359 => 177' // 2 Absol                  380 => 179' // 2 Latias                  381 => 181' // 2 Latios                  445 => 183' // 2 Garchomp                  448 => 185' // 2 Lucario                  460 => 187' // 2 Abomasnow                  _ => GetDexFormIndexB2W2(species' formct)              };
Magic Number,PKHeX.Core,DexFormUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\DexFormUtil.cs,GetDexFormIndexXY,The following statement contains a magic number: return species switch              {                  666 => 083' // 20 Vivillion                  669 => 103' // 5 Flabébé                  670 => 108' // 6 Floette                  671 => 114' // 5 Florges                  710 => 119' // 4 Pumpkaboo                  711 => 123' // 4 Gourgeist                  681 => 127' // 2 Aegislash                  716 => 129' // 2 Xerneas                  003 => 131' // 2 Venusaur                  006 => 133' // 3 Charizard                  009 => 136' // 2 Blastoise                  065 => 138' // 2 Alakazam                  094 => 140' // 2 Gengar                  115 => 142' // 2 Kangaskhan                  127 => 144' // 2 Pinsir                  130 => 146' // 2 Gyarados                  142 => 148' // 2 Aerodactyl                  150 => 150' // 3 Mewtwo                  181 => 153' // 2 Ampharos                  212 => 155' // 2 Scizor                  214 => 157' // 2 Heracros                  229 => 159' // 2 Houndoom                  248 => 161' // 2 Tyranitar                  257 => 163' // 2 Blaziken                  282 => 165' // 2 Gardevoir                  303 => 167' // 2 Mawile                  306 => 169' // 2 Aggron                  308 => 171' // 2 Medicham                  310 => 173' // 2 Manetric                  354 => 175' // 2 Banette                  359 => 177' // 2 Absol                  380 => 179' // 2 Latias                  381 => 181' // 2 Latios                  445 => 183' // 2 Garchomp                  448 => 185' // 2 Lucario                  460 => 187' // 2 Abomasnow                  _ => GetDexFormIndexB2W2(species' formct)              };
Magic Number,PKHeX.Core,DexFormUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\DexFormUtil.cs,GetDexFormIndexXY,The following statement contains a magic number: return species switch              {                  666 => 083' // 20 Vivillion                  669 => 103' // 5 Flabébé                  670 => 108' // 6 Floette                  671 => 114' // 5 Florges                  710 => 119' // 4 Pumpkaboo                  711 => 123' // 4 Gourgeist                  681 => 127' // 2 Aegislash                  716 => 129' // 2 Xerneas                  003 => 131' // 2 Venusaur                  006 => 133' // 3 Charizard                  009 => 136' // 2 Blastoise                  065 => 138' // 2 Alakazam                  094 => 140' // 2 Gengar                  115 => 142' // 2 Kangaskhan                  127 => 144' // 2 Pinsir                  130 => 146' // 2 Gyarados                  142 => 148' // 2 Aerodactyl                  150 => 150' // 3 Mewtwo                  181 => 153' // 2 Ampharos                  212 => 155' // 2 Scizor                  214 => 157' // 2 Heracros                  229 => 159' // 2 Houndoom                  248 => 161' // 2 Tyranitar                  257 => 163' // 2 Blaziken                  282 => 165' // 2 Gardevoir                  303 => 167' // 2 Mawile                  306 => 169' // 2 Aggron                  308 => 171' // 2 Medicham                  310 => 173' // 2 Manetric                  354 => 175' // 2 Banette                  359 => 177' // 2 Absol                  380 => 179' // 2 Latias                  381 => 181' // 2 Latios                  445 => 183' // 2 Garchomp                  448 => 185' // 2 Lucario                  460 => 187' // 2 Abomasnow                  _ => GetDexFormIndexB2W2(species' formct)              };
Magic Number,PKHeX.Core,DexFormUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\DexFormUtil.cs,GetDexFormIndexXY,The following statement contains a magic number: return species switch              {                  666 => 083' // 20 Vivillion                  669 => 103' // 5 Flabébé                  670 => 108' // 6 Floette                  671 => 114' // 5 Florges                  710 => 119' // 4 Pumpkaboo                  711 => 123' // 4 Gourgeist                  681 => 127' // 2 Aegislash                  716 => 129' // 2 Xerneas                  003 => 131' // 2 Venusaur                  006 => 133' // 3 Charizard                  009 => 136' // 2 Blastoise                  065 => 138' // 2 Alakazam                  094 => 140' // 2 Gengar                  115 => 142' // 2 Kangaskhan                  127 => 144' // 2 Pinsir                  130 => 146' // 2 Gyarados                  142 => 148' // 2 Aerodactyl                  150 => 150' // 3 Mewtwo                  181 => 153' // 2 Ampharos                  212 => 155' // 2 Scizor                  214 => 157' // 2 Heracros                  229 => 159' // 2 Houndoom                  248 => 161' // 2 Tyranitar                  257 => 163' // 2 Blaziken                  282 => 165' // 2 Gardevoir                  303 => 167' // 2 Mawile                  306 => 169' // 2 Aggron                  308 => 171' // 2 Medicham                  310 => 173' // 2 Manetric                  354 => 175' // 2 Banette                  359 => 177' // 2 Absol                  380 => 179' // 2 Latias                  381 => 181' // 2 Latios                  445 => 183' // 2 Garchomp                  448 => 185' // 2 Lucario                  460 => 187' // 2 Abomasnow                  _ => GetDexFormIndexB2W2(species' formct)              };
Magic Number,PKHeX.Core,DexFormUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\DexFormUtil.cs,GetDexFormIndexXY,The following statement contains a magic number: return species switch              {                  666 => 083' // 20 Vivillion                  669 => 103' // 5 Flabébé                  670 => 108' // 6 Floette                  671 => 114' // 5 Florges                  710 => 119' // 4 Pumpkaboo                  711 => 123' // 4 Gourgeist                  681 => 127' // 2 Aegislash                  716 => 129' // 2 Xerneas                  003 => 131' // 2 Venusaur                  006 => 133' // 3 Charizard                  009 => 136' // 2 Blastoise                  065 => 138' // 2 Alakazam                  094 => 140' // 2 Gengar                  115 => 142' // 2 Kangaskhan                  127 => 144' // 2 Pinsir                  130 => 146' // 2 Gyarados                  142 => 148' // 2 Aerodactyl                  150 => 150' // 3 Mewtwo                  181 => 153' // 2 Ampharos                  212 => 155' // 2 Scizor                  214 => 157' // 2 Heracros                  229 => 159' // 2 Houndoom                  248 => 161' // 2 Tyranitar                  257 => 163' // 2 Blaziken                  282 => 165' // 2 Gardevoir                  303 => 167' // 2 Mawile                  306 => 169' // 2 Aggron                  308 => 171' // 2 Medicham                  310 => 173' // 2 Manetric                  354 => 175' // 2 Banette                  359 => 177' // 2 Absol                  380 => 179' // 2 Latias                  381 => 181' // 2 Latios                  445 => 183' // 2 Garchomp                  448 => 185' // 2 Lucario                  460 => 187' // 2 Abomasnow                  _ => GetDexFormIndexB2W2(species' formct)              };
Magic Number,PKHeX.Core,DexFormUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\DexFormUtil.cs,GetDexFormIndexXY,The following statement contains a magic number: return species switch              {                  666 => 083' // 20 Vivillion                  669 => 103' // 5 Flabébé                  670 => 108' // 6 Floette                  671 => 114' // 5 Florges                  710 => 119' // 4 Pumpkaboo                  711 => 123' // 4 Gourgeist                  681 => 127' // 2 Aegislash                  716 => 129' // 2 Xerneas                  003 => 131' // 2 Venusaur                  006 => 133' // 3 Charizard                  009 => 136' // 2 Blastoise                  065 => 138' // 2 Alakazam                  094 => 140' // 2 Gengar                  115 => 142' // 2 Kangaskhan                  127 => 144' // 2 Pinsir                  130 => 146' // 2 Gyarados                  142 => 148' // 2 Aerodactyl                  150 => 150' // 3 Mewtwo                  181 => 153' // 2 Ampharos                  212 => 155' // 2 Scizor                  214 => 157' // 2 Heracros                  229 => 159' // 2 Houndoom                  248 => 161' // 2 Tyranitar                  257 => 163' // 2 Blaziken                  282 => 165' // 2 Gardevoir                  303 => 167' // 2 Mawile                  306 => 169' // 2 Aggron                  308 => 171' // 2 Medicham                  310 => 173' // 2 Manetric                  354 => 175' // 2 Banette                  359 => 177' // 2 Absol                  380 => 179' // 2 Latias                  381 => 181' // 2 Latios                  445 => 183' // 2 Garchomp                  448 => 185' // 2 Lucario                  460 => 187' // 2 Abomasnow                  _ => GetDexFormIndexB2W2(species' formct)              };
Magic Number,PKHeX.Core,DexFormUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\DexFormUtil.cs,GetDexFormIndexXY,The following statement contains a magic number: return species switch              {                  666 => 083' // 20 Vivillion                  669 => 103' // 5 Flabébé                  670 => 108' // 6 Floette                  671 => 114' // 5 Florges                  710 => 119' // 4 Pumpkaboo                  711 => 123' // 4 Gourgeist                  681 => 127' // 2 Aegislash                  716 => 129' // 2 Xerneas                  003 => 131' // 2 Venusaur                  006 => 133' // 3 Charizard                  009 => 136' // 2 Blastoise                  065 => 138' // 2 Alakazam                  094 => 140' // 2 Gengar                  115 => 142' // 2 Kangaskhan                  127 => 144' // 2 Pinsir                  130 => 146' // 2 Gyarados                  142 => 148' // 2 Aerodactyl                  150 => 150' // 3 Mewtwo                  181 => 153' // 2 Ampharos                  212 => 155' // 2 Scizor                  214 => 157' // 2 Heracros                  229 => 159' // 2 Houndoom                  248 => 161' // 2 Tyranitar                  257 => 163' // 2 Blaziken                  282 => 165' // 2 Gardevoir                  303 => 167' // 2 Mawile                  306 => 169' // 2 Aggron                  308 => 171' // 2 Medicham                  310 => 173' // 2 Manetric                  354 => 175' // 2 Banette                  359 => 177' // 2 Absol                  380 => 179' // 2 Latias                  381 => 181' // 2 Latios                  445 => 183' // 2 Garchomp                  448 => 185' // 2 Lucario                  460 => 187' // 2 Abomasnow                  _ => GetDexFormIndexB2W2(species' formct)              };
Magic Number,PKHeX.Core,DexFormUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\DexFormUtil.cs,GetDexFormIndexXY,The following statement contains a magic number: return species switch              {                  666 => 083' // 20 Vivillion                  669 => 103' // 5 Flabébé                  670 => 108' // 6 Floette                  671 => 114' // 5 Florges                  710 => 119' // 4 Pumpkaboo                  711 => 123' // 4 Gourgeist                  681 => 127' // 2 Aegislash                  716 => 129' // 2 Xerneas                  003 => 131' // 2 Venusaur                  006 => 133' // 3 Charizard                  009 => 136' // 2 Blastoise                  065 => 138' // 2 Alakazam                  094 => 140' // 2 Gengar                  115 => 142' // 2 Kangaskhan                  127 => 144' // 2 Pinsir                  130 => 146' // 2 Gyarados                  142 => 148' // 2 Aerodactyl                  150 => 150' // 3 Mewtwo                  181 => 153' // 2 Ampharos                  212 => 155' // 2 Scizor                  214 => 157' // 2 Heracros                  229 => 159' // 2 Houndoom                  248 => 161' // 2 Tyranitar                  257 => 163' // 2 Blaziken                  282 => 165' // 2 Gardevoir                  303 => 167' // 2 Mawile                  306 => 169' // 2 Aggron                  308 => 171' // 2 Medicham                  310 => 173' // 2 Manetric                  354 => 175' // 2 Banette                  359 => 177' // 2 Absol                  380 => 179' // 2 Latias                  381 => 181' // 2 Latios                  445 => 183' // 2 Garchomp                  448 => 185' // 2 Lucario                  460 => 187' // 2 Abomasnow                  _ => GetDexFormIndexB2W2(species' formct)              };
Magic Number,PKHeX.Core,DexFormUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\DexFormUtil.cs,GetDexFormIndexXY,The following statement contains a magic number: return species switch              {                  666 => 083' // 20 Vivillion                  669 => 103' // 5 Flabébé                  670 => 108' // 6 Floette                  671 => 114' // 5 Florges                  710 => 119' // 4 Pumpkaboo                  711 => 123' // 4 Gourgeist                  681 => 127' // 2 Aegislash                  716 => 129' // 2 Xerneas                  003 => 131' // 2 Venusaur                  006 => 133' // 3 Charizard                  009 => 136' // 2 Blastoise                  065 => 138' // 2 Alakazam                  094 => 140' // 2 Gengar                  115 => 142' // 2 Kangaskhan                  127 => 144' // 2 Pinsir                  130 => 146' // 2 Gyarados                  142 => 148' // 2 Aerodactyl                  150 => 150' // 3 Mewtwo                  181 => 153' // 2 Ampharos                  212 => 155' // 2 Scizor                  214 => 157' // 2 Heracros                  229 => 159' // 2 Houndoom                  248 => 161' // 2 Tyranitar                  257 => 163' // 2 Blaziken                  282 => 165' // 2 Gardevoir                  303 => 167' // 2 Mawile                  306 => 169' // 2 Aggron                  308 => 171' // 2 Medicham                  310 => 173' // 2 Manetric                  354 => 175' // 2 Banette                  359 => 177' // 2 Absol                  380 => 179' // 2 Latias                  381 => 181' // 2 Latios                  445 => 183' // 2 Garchomp                  448 => 185' // 2 Lucario                  460 => 187' // 2 Abomasnow                  _ => GetDexFormIndexB2W2(species' formct)              };
Magic Number,PKHeX.Core,DexFormUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\DexFormUtil.cs,GetDexFormIndexXY,The following statement contains a magic number: return species switch              {                  666 => 083' // 20 Vivillion                  669 => 103' // 5 Flabébé                  670 => 108' // 6 Floette                  671 => 114' // 5 Florges                  710 => 119' // 4 Pumpkaboo                  711 => 123' // 4 Gourgeist                  681 => 127' // 2 Aegislash                  716 => 129' // 2 Xerneas                  003 => 131' // 2 Venusaur                  006 => 133' // 3 Charizard                  009 => 136' // 2 Blastoise                  065 => 138' // 2 Alakazam                  094 => 140' // 2 Gengar                  115 => 142' // 2 Kangaskhan                  127 => 144' // 2 Pinsir                  130 => 146' // 2 Gyarados                  142 => 148' // 2 Aerodactyl                  150 => 150' // 3 Mewtwo                  181 => 153' // 2 Ampharos                  212 => 155' // 2 Scizor                  214 => 157' // 2 Heracros                  229 => 159' // 2 Houndoom                  248 => 161' // 2 Tyranitar                  257 => 163' // 2 Blaziken                  282 => 165' // 2 Gardevoir                  303 => 167' // 2 Mawile                  306 => 169' // 2 Aggron                  308 => 171' // 2 Medicham                  310 => 173' // 2 Manetric                  354 => 175' // 2 Banette                  359 => 177' // 2 Absol                  380 => 179' // 2 Latias                  381 => 181' // 2 Latios                  445 => 183' // 2 Garchomp                  448 => 185' // 2 Lucario                  460 => 187' // 2 Abomasnow                  _ => GetDexFormIndexB2W2(species' formct)              };
Magic Number,PKHeX.Core,DexFormUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\DexFormUtil.cs,GetDexFormIndexXY,The following statement contains a magic number: return species switch              {                  666 => 083' // 20 Vivillion                  669 => 103' // 5 Flabébé                  670 => 108' // 6 Floette                  671 => 114' // 5 Florges                  710 => 119' // 4 Pumpkaboo                  711 => 123' // 4 Gourgeist                  681 => 127' // 2 Aegislash                  716 => 129' // 2 Xerneas                  003 => 131' // 2 Venusaur                  006 => 133' // 3 Charizard                  009 => 136' // 2 Blastoise                  065 => 138' // 2 Alakazam                  094 => 140' // 2 Gengar                  115 => 142' // 2 Kangaskhan                  127 => 144' // 2 Pinsir                  130 => 146' // 2 Gyarados                  142 => 148' // 2 Aerodactyl                  150 => 150' // 3 Mewtwo                  181 => 153' // 2 Ampharos                  212 => 155' // 2 Scizor                  214 => 157' // 2 Heracros                  229 => 159' // 2 Houndoom                  248 => 161' // 2 Tyranitar                  257 => 163' // 2 Blaziken                  282 => 165' // 2 Gardevoir                  303 => 167' // 2 Mawile                  306 => 169' // 2 Aggron                  308 => 171' // 2 Medicham                  310 => 173' // 2 Manetric                  354 => 175' // 2 Banette                  359 => 177' // 2 Absol                  380 => 179' // 2 Latias                  381 => 181' // 2 Latios                  445 => 183' // 2 Garchomp                  448 => 185' // 2 Lucario                  460 => 187' // 2 Abomasnow                  _ => GetDexFormIndexB2W2(species' formct)              };
Magic Number,PKHeX.Core,DexFormUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\DexFormUtil.cs,GetDexFormIndexXY,The following statement contains a magic number: return species switch              {                  666 => 083' // 20 Vivillion                  669 => 103' // 5 Flabébé                  670 => 108' // 6 Floette                  671 => 114' // 5 Florges                  710 => 119' // 4 Pumpkaboo                  711 => 123' // 4 Gourgeist                  681 => 127' // 2 Aegislash                  716 => 129' // 2 Xerneas                  003 => 131' // 2 Venusaur                  006 => 133' // 3 Charizard                  009 => 136' // 2 Blastoise                  065 => 138' // 2 Alakazam                  094 => 140' // 2 Gengar                  115 => 142' // 2 Kangaskhan                  127 => 144' // 2 Pinsir                  130 => 146' // 2 Gyarados                  142 => 148' // 2 Aerodactyl                  150 => 150' // 3 Mewtwo                  181 => 153' // 2 Ampharos                  212 => 155' // 2 Scizor                  214 => 157' // 2 Heracros                  229 => 159' // 2 Houndoom                  248 => 161' // 2 Tyranitar                  257 => 163' // 2 Blaziken                  282 => 165' // 2 Gardevoir                  303 => 167' // 2 Mawile                  306 => 169' // 2 Aggron                  308 => 171' // 2 Medicham                  310 => 173' // 2 Manetric                  354 => 175' // 2 Banette                  359 => 177' // 2 Absol                  380 => 179' // 2 Latias                  381 => 181' // 2 Latios                  445 => 183' // 2 Garchomp                  448 => 185' // 2 Lucario                  460 => 187' // 2 Abomasnow                  _ => GetDexFormIndexB2W2(species' formct)              };
Magic Number,PKHeX.Core,DexFormUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\DexFormUtil.cs,GetDexFormIndexXY,The following statement contains a magic number: return species switch              {                  666 => 083' // 20 Vivillion                  669 => 103' // 5 Flabébé                  670 => 108' // 6 Floette                  671 => 114' // 5 Florges                  710 => 119' // 4 Pumpkaboo                  711 => 123' // 4 Gourgeist                  681 => 127' // 2 Aegislash                  716 => 129' // 2 Xerneas                  003 => 131' // 2 Venusaur                  006 => 133' // 3 Charizard                  009 => 136' // 2 Blastoise                  065 => 138' // 2 Alakazam                  094 => 140' // 2 Gengar                  115 => 142' // 2 Kangaskhan                  127 => 144' // 2 Pinsir                  130 => 146' // 2 Gyarados                  142 => 148' // 2 Aerodactyl                  150 => 150' // 3 Mewtwo                  181 => 153' // 2 Ampharos                  212 => 155' // 2 Scizor                  214 => 157' // 2 Heracros                  229 => 159' // 2 Houndoom                  248 => 161' // 2 Tyranitar                  257 => 163' // 2 Blaziken                  282 => 165' // 2 Gardevoir                  303 => 167' // 2 Mawile                  306 => 169' // 2 Aggron                  308 => 171' // 2 Medicham                  310 => 173' // 2 Manetric                  354 => 175' // 2 Banette                  359 => 177' // 2 Absol                  380 => 179' // 2 Latias                  381 => 181' // 2 Latios                  445 => 183' // 2 Garchomp                  448 => 185' // 2 Lucario                  460 => 187' // 2 Abomasnow                  _ => GetDexFormIndexB2W2(species' formct)              };
Magic Number,PKHeX.Core,DexFormUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\DexFormUtil.cs,GetDexFormIndexXY,The following statement contains a magic number: return species switch              {                  666 => 083' // 20 Vivillion                  669 => 103' // 5 Flabébé                  670 => 108' // 6 Floette                  671 => 114' // 5 Florges                  710 => 119' // 4 Pumpkaboo                  711 => 123' // 4 Gourgeist                  681 => 127' // 2 Aegislash                  716 => 129' // 2 Xerneas                  003 => 131' // 2 Venusaur                  006 => 133' // 3 Charizard                  009 => 136' // 2 Blastoise                  065 => 138' // 2 Alakazam                  094 => 140' // 2 Gengar                  115 => 142' // 2 Kangaskhan                  127 => 144' // 2 Pinsir                  130 => 146' // 2 Gyarados                  142 => 148' // 2 Aerodactyl                  150 => 150' // 3 Mewtwo                  181 => 153' // 2 Ampharos                  212 => 155' // 2 Scizor                  214 => 157' // 2 Heracros                  229 => 159' // 2 Houndoom                  248 => 161' // 2 Tyranitar                  257 => 163' // 2 Blaziken                  282 => 165' // 2 Gardevoir                  303 => 167' // 2 Mawile                  306 => 169' // 2 Aggron                  308 => 171' // 2 Medicham                  310 => 173' // 2 Manetric                  354 => 175' // 2 Banette                  359 => 177' // 2 Absol                  380 => 179' // 2 Latias                  381 => 181' // 2 Latios                  445 => 183' // 2 Garchomp                  448 => 185' // 2 Lucario                  460 => 187' // 2 Abomasnow                  _ => GetDexFormIndexB2W2(species' formct)              };
Magic Number,PKHeX.Core,DexFormUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\DexFormUtil.cs,GetDexFormIndexXY,The following statement contains a magic number: return species switch              {                  666 => 083' // 20 Vivillion                  669 => 103' // 5 Flabébé                  670 => 108' // 6 Floette                  671 => 114' // 5 Florges                  710 => 119' // 4 Pumpkaboo                  711 => 123' // 4 Gourgeist                  681 => 127' // 2 Aegislash                  716 => 129' // 2 Xerneas                  003 => 131' // 2 Venusaur                  006 => 133' // 3 Charizard                  009 => 136' // 2 Blastoise                  065 => 138' // 2 Alakazam                  094 => 140' // 2 Gengar                  115 => 142' // 2 Kangaskhan                  127 => 144' // 2 Pinsir                  130 => 146' // 2 Gyarados                  142 => 148' // 2 Aerodactyl                  150 => 150' // 3 Mewtwo                  181 => 153' // 2 Ampharos                  212 => 155' // 2 Scizor                  214 => 157' // 2 Heracros                  229 => 159' // 2 Houndoom                  248 => 161' // 2 Tyranitar                  257 => 163' // 2 Blaziken                  282 => 165' // 2 Gardevoir                  303 => 167' // 2 Mawile                  306 => 169' // 2 Aggron                  308 => 171' // 2 Medicham                  310 => 173' // 2 Manetric                  354 => 175' // 2 Banette                  359 => 177' // 2 Absol                  380 => 179' // 2 Latias                  381 => 181' // 2 Latios                  445 => 183' // 2 Garchomp                  448 => 185' // 2 Lucario                  460 => 187' // 2 Abomasnow                  _ => GetDexFormIndexB2W2(species' formct)              };
Magic Number,PKHeX.Core,DexFormUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\DexFormUtil.cs,GetDexFormIndexXY,The following statement contains a magic number: return species switch              {                  666 => 083' // 20 Vivillion                  669 => 103' // 5 Flabébé                  670 => 108' // 6 Floette                  671 => 114' // 5 Florges                  710 => 119' // 4 Pumpkaboo                  711 => 123' // 4 Gourgeist                  681 => 127' // 2 Aegislash                  716 => 129' // 2 Xerneas                  003 => 131' // 2 Venusaur                  006 => 133' // 3 Charizard                  009 => 136' // 2 Blastoise                  065 => 138' // 2 Alakazam                  094 => 140' // 2 Gengar                  115 => 142' // 2 Kangaskhan                  127 => 144' // 2 Pinsir                  130 => 146' // 2 Gyarados                  142 => 148' // 2 Aerodactyl                  150 => 150' // 3 Mewtwo                  181 => 153' // 2 Ampharos                  212 => 155' // 2 Scizor                  214 => 157' // 2 Heracros                  229 => 159' // 2 Houndoom                  248 => 161' // 2 Tyranitar                  257 => 163' // 2 Blaziken                  282 => 165' // 2 Gardevoir                  303 => 167' // 2 Mawile                  306 => 169' // 2 Aggron                  308 => 171' // 2 Medicham                  310 => 173' // 2 Manetric                  354 => 175' // 2 Banette                  359 => 177' // 2 Absol                  380 => 179' // 2 Latias                  381 => 181' // 2 Latios                  445 => 183' // 2 Garchomp                  448 => 185' // 2 Lucario                  460 => 187' // 2 Abomasnow                  _ => GetDexFormIndexB2W2(species' formct)              };
Magic Number,PKHeX.Core,DexFormUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\DexFormUtil.cs,GetDexFormIndexXY,The following statement contains a magic number: return species switch              {                  666 => 083' // 20 Vivillion                  669 => 103' // 5 Flabébé                  670 => 108' // 6 Floette                  671 => 114' // 5 Florges                  710 => 119' // 4 Pumpkaboo                  711 => 123' // 4 Gourgeist                  681 => 127' // 2 Aegislash                  716 => 129' // 2 Xerneas                  003 => 131' // 2 Venusaur                  006 => 133' // 3 Charizard                  009 => 136' // 2 Blastoise                  065 => 138' // 2 Alakazam                  094 => 140' // 2 Gengar                  115 => 142' // 2 Kangaskhan                  127 => 144' // 2 Pinsir                  130 => 146' // 2 Gyarados                  142 => 148' // 2 Aerodactyl                  150 => 150' // 3 Mewtwo                  181 => 153' // 2 Ampharos                  212 => 155' // 2 Scizor                  214 => 157' // 2 Heracros                  229 => 159' // 2 Houndoom                  248 => 161' // 2 Tyranitar                  257 => 163' // 2 Blaziken                  282 => 165' // 2 Gardevoir                  303 => 167' // 2 Mawile                  306 => 169' // 2 Aggron                  308 => 171' // 2 Medicham                  310 => 173' // 2 Manetric                  354 => 175' // 2 Banette                  359 => 177' // 2 Absol                  380 => 179' // 2 Latias                  381 => 181' // 2 Latios                  445 => 183' // 2 Garchomp                  448 => 185' // 2 Lucario                  460 => 187' // 2 Abomasnow                  _ => GetDexFormIndexB2W2(species' formct)              };
Magic Number,PKHeX.Core,DexFormUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\DexFormUtil.cs,GetDexFormIndexXY,The following statement contains a magic number: return species switch              {                  666 => 083' // 20 Vivillion                  669 => 103' // 5 Flabébé                  670 => 108' // 6 Floette                  671 => 114' // 5 Florges                  710 => 119' // 4 Pumpkaboo                  711 => 123' // 4 Gourgeist                  681 => 127' // 2 Aegislash                  716 => 129' // 2 Xerneas                  003 => 131' // 2 Venusaur                  006 => 133' // 3 Charizard                  009 => 136' // 2 Blastoise                  065 => 138' // 2 Alakazam                  094 => 140' // 2 Gengar                  115 => 142' // 2 Kangaskhan                  127 => 144' // 2 Pinsir                  130 => 146' // 2 Gyarados                  142 => 148' // 2 Aerodactyl                  150 => 150' // 3 Mewtwo                  181 => 153' // 2 Ampharos                  212 => 155' // 2 Scizor                  214 => 157' // 2 Heracros                  229 => 159' // 2 Houndoom                  248 => 161' // 2 Tyranitar                  257 => 163' // 2 Blaziken                  282 => 165' // 2 Gardevoir                  303 => 167' // 2 Mawile                  306 => 169' // 2 Aggron                  308 => 171' // 2 Medicham                  310 => 173' // 2 Manetric                  354 => 175' // 2 Banette                  359 => 177' // 2 Absol                  380 => 179' // 2 Latias                  381 => 181' // 2 Latios                  445 => 183' // 2 Garchomp                  448 => 185' // 2 Lucario                  460 => 187' // 2 Abomasnow                  _ => GetDexFormIndexB2W2(species' formct)              };
Magic Number,PKHeX.Core,DexFormUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\DexFormUtil.cs,GetDexFormIndexXY,The following statement contains a magic number: return species switch              {                  666 => 083' // 20 Vivillion                  669 => 103' // 5 Flabébé                  670 => 108' // 6 Floette                  671 => 114' // 5 Florges                  710 => 119' // 4 Pumpkaboo                  711 => 123' // 4 Gourgeist                  681 => 127' // 2 Aegislash                  716 => 129' // 2 Xerneas                  003 => 131' // 2 Venusaur                  006 => 133' // 3 Charizard                  009 => 136' // 2 Blastoise                  065 => 138' // 2 Alakazam                  094 => 140' // 2 Gengar                  115 => 142' // 2 Kangaskhan                  127 => 144' // 2 Pinsir                  130 => 146' // 2 Gyarados                  142 => 148' // 2 Aerodactyl                  150 => 150' // 3 Mewtwo                  181 => 153' // 2 Ampharos                  212 => 155' // 2 Scizor                  214 => 157' // 2 Heracros                  229 => 159' // 2 Houndoom                  248 => 161' // 2 Tyranitar                  257 => 163' // 2 Blaziken                  282 => 165' // 2 Gardevoir                  303 => 167' // 2 Mawile                  306 => 169' // 2 Aggron                  308 => 171' // 2 Medicham                  310 => 173' // 2 Manetric                  354 => 175' // 2 Banette                  359 => 177' // 2 Absol                  380 => 179' // 2 Latias                  381 => 181' // 2 Latios                  445 => 183' // 2 Garchomp                  448 => 185' // 2 Lucario                  460 => 187' // 2 Abomasnow                  _ => GetDexFormIndexB2W2(species' formct)              };
Magic Number,PKHeX.Core,DexFormUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\DexFormUtil.cs,GetDexFormIndexXY,The following statement contains a magic number: return species switch              {                  666 => 083' // 20 Vivillion                  669 => 103' // 5 Flabébé                  670 => 108' // 6 Floette                  671 => 114' // 5 Florges                  710 => 119' // 4 Pumpkaboo                  711 => 123' // 4 Gourgeist                  681 => 127' // 2 Aegislash                  716 => 129' // 2 Xerneas                  003 => 131' // 2 Venusaur                  006 => 133' // 3 Charizard                  009 => 136' // 2 Blastoise                  065 => 138' // 2 Alakazam                  094 => 140' // 2 Gengar                  115 => 142' // 2 Kangaskhan                  127 => 144' // 2 Pinsir                  130 => 146' // 2 Gyarados                  142 => 148' // 2 Aerodactyl                  150 => 150' // 3 Mewtwo                  181 => 153' // 2 Ampharos                  212 => 155' // 2 Scizor                  214 => 157' // 2 Heracros                  229 => 159' // 2 Houndoom                  248 => 161' // 2 Tyranitar                  257 => 163' // 2 Blaziken                  282 => 165' // 2 Gardevoir                  303 => 167' // 2 Mawile                  306 => 169' // 2 Aggron                  308 => 171' // 2 Medicham                  310 => 173' // 2 Manetric                  354 => 175' // 2 Banette                  359 => 177' // 2 Absol                  380 => 179' // 2 Latias                  381 => 181' // 2 Latios                  445 => 183' // 2 Garchomp                  448 => 185' // 2 Lucario                  460 => 187' // 2 Abomasnow                  _ => GetDexFormIndexB2W2(species' formct)              };
Magic Number,PKHeX.Core,DexFormUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\DexFormUtil.cs,GetDexFormIndexXY,The following statement contains a magic number: return species switch              {                  666 => 083' // 20 Vivillion                  669 => 103' // 5 Flabébé                  670 => 108' // 6 Floette                  671 => 114' // 5 Florges                  710 => 119' // 4 Pumpkaboo                  711 => 123' // 4 Gourgeist                  681 => 127' // 2 Aegislash                  716 => 129' // 2 Xerneas                  003 => 131' // 2 Venusaur                  006 => 133' // 3 Charizard                  009 => 136' // 2 Blastoise                  065 => 138' // 2 Alakazam                  094 => 140' // 2 Gengar                  115 => 142' // 2 Kangaskhan                  127 => 144' // 2 Pinsir                  130 => 146' // 2 Gyarados                  142 => 148' // 2 Aerodactyl                  150 => 150' // 3 Mewtwo                  181 => 153' // 2 Ampharos                  212 => 155' // 2 Scizor                  214 => 157' // 2 Heracros                  229 => 159' // 2 Houndoom                  248 => 161' // 2 Tyranitar                  257 => 163' // 2 Blaziken                  282 => 165' // 2 Gardevoir                  303 => 167' // 2 Mawile                  306 => 169' // 2 Aggron                  308 => 171' // 2 Medicham                  310 => 173' // 2 Manetric                  354 => 175' // 2 Banette                  359 => 177' // 2 Absol                  380 => 179' // 2 Latias                  381 => 181' // 2 Latios                  445 => 183' // 2 Garchomp                  448 => 185' // 2 Lucario                  460 => 187' // 2 Abomasnow                  _ => GetDexFormIndexB2W2(species' formct)              };
Magic Number,PKHeX.Core,DexFormUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\DexFormUtil.cs,GetDexFormIndexXY,The following statement contains a magic number: return species switch              {                  666 => 083' // 20 Vivillion                  669 => 103' // 5 Flabébé                  670 => 108' // 6 Floette                  671 => 114' // 5 Florges                  710 => 119' // 4 Pumpkaboo                  711 => 123' // 4 Gourgeist                  681 => 127' // 2 Aegislash                  716 => 129' // 2 Xerneas                  003 => 131' // 2 Venusaur                  006 => 133' // 3 Charizard                  009 => 136' // 2 Blastoise                  065 => 138' // 2 Alakazam                  094 => 140' // 2 Gengar                  115 => 142' // 2 Kangaskhan                  127 => 144' // 2 Pinsir                  130 => 146' // 2 Gyarados                  142 => 148' // 2 Aerodactyl                  150 => 150' // 3 Mewtwo                  181 => 153' // 2 Ampharos                  212 => 155' // 2 Scizor                  214 => 157' // 2 Heracros                  229 => 159' // 2 Houndoom                  248 => 161' // 2 Tyranitar                  257 => 163' // 2 Blaziken                  282 => 165' // 2 Gardevoir                  303 => 167' // 2 Mawile                  306 => 169' // 2 Aggron                  308 => 171' // 2 Medicham                  310 => 173' // 2 Manetric                  354 => 175' // 2 Banette                  359 => 177' // 2 Absol                  380 => 179' // 2 Latias                  381 => 181' // 2 Latios                  445 => 183' // 2 Garchomp                  448 => 185' // 2 Lucario                  460 => 187' // 2 Abomasnow                  _ => GetDexFormIndexB2W2(species' formct)              };
Magic Number,PKHeX.Core,DexFormUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\DexFormUtil.cs,GetDexFormIndexXY,The following statement contains a magic number: return species switch              {                  666 => 083' // 20 Vivillion                  669 => 103' // 5 Flabébé                  670 => 108' // 6 Floette                  671 => 114' // 5 Florges                  710 => 119' // 4 Pumpkaboo                  711 => 123' // 4 Gourgeist                  681 => 127' // 2 Aegislash                  716 => 129' // 2 Xerneas                  003 => 131' // 2 Venusaur                  006 => 133' // 3 Charizard                  009 => 136' // 2 Blastoise                  065 => 138' // 2 Alakazam                  094 => 140' // 2 Gengar                  115 => 142' // 2 Kangaskhan                  127 => 144' // 2 Pinsir                  130 => 146' // 2 Gyarados                  142 => 148' // 2 Aerodactyl                  150 => 150' // 3 Mewtwo                  181 => 153' // 2 Ampharos                  212 => 155' // 2 Scizor                  214 => 157' // 2 Heracros                  229 => 159' // 2 Houndoom                  248 => 161' // 2 Tyranitar                  257 => 163' // 2 Blaziken                  282 => 165' // 2 Gardevoir                  303 => 167' // 2 Mawile                  306 => 169' // 2 Aggron                  308 => 171' // 2 Medicham                  310 => 173' // 2 Manetric                  354 => 175' // 2 Banette                  359 => 177' // 2 Absol                  380 => 179' // 2 Latias                  381 => 181' // 2 Latios                  445 => 183' // 2 Garchomp                  448 => 185' // 2 Lucario                  460 => 187' // 2 Abomasnow                  _ => GetDexFormIndexB2W2(species' formct)              };
Magic Number,PKHeX.Core,DexFormUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\DexFormUtil.cs,GetDexFormIndexXY,The following statement contains a magic number: return species switch              {                  666 => 083' // 20 Vivillion                  669 => 103' // 5 Flabébé                  670 => 108' // 6 Floette                  671 => 114' // 5 Florges                  710 => 119' // 4 Pumpkaboo                  711 => 123' // 4 Gourgeist                  681 => 127' // 2 Aegislash                  716 => 129' // 2 Xerneas                  003 => 131' // 2 Venusaur                  006 => 133' // 3 Charizard                  009 => 136' // 2 Blastoise                  065 => 138' // 2 Alakazam                  094 => 140' // 2 Gengar                  115 => 142' // 2 Kangaskhan                  127 => 144' // 2 Pinsir                  130 => 146' // 2 Gyarados                  142 => 148' // 2 Aerodactyl                  150 => 150' // 3 Mewtwo                  181 => 153' // 2 Ampharos                  212 => 155' // 2 Scizor                  214 => 157' // 2 Heracros                  229 => 159' // 2 Houndoom                  248 => 161' // 2 Tyranitar                  257 => 163' // 2 Blaziken                  282 => 165' // 2 Gardevoir                  303 => 167' // 2 Mawile                  306 => 169' // 2 Aggron                  308 => 171' // 2 Medicham                  310 => 173' // 2 Manetric                  354 => 175' // 2 Banette                  359 => 177' // 2 Absol                  380 => 179' // 2 Latias                  381 => 181' // 2 Latios                  445 => 183' // 2 Garchomp                  448 => 185' // 2 Lucario                  460 => 187' // 2 Abomasnow                  _ => GetDexFormIndexB2W2(species' formct)              };
Magic Number,PKHeX.Core,DexFormUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\DexFormUtil.cs,GetDexFormIndexXY,The following statement contains a magic number: return species switch              {                  666 => 083' // 20 Vivillion                  669 => 103' // 5 Flabébé                  670 => 108' // 6 Floette                  671 => 114' // 5 Florges                  710 => 119' // 4 Pumpkaboo                  711 => 123' // 4 Gourgeist                  681 => 127' // 2 Aegislash                  716 => 129' // 2 Xerneas                  003 => 131' // 2 Venusaur                  006 => 133' // 3 Charizard                  009 => 136' // 2 Blastoise                  065 => 138' // 2 Alakazam                  094 => 140' // 2 Gengar                  115 => 142' // 2 Kangaskhan                  127 => 144' // 2 Pinsir                  130 => 146' // 2 Gyarados                  142 => 148' // 2 Aerodactyl                  150 => 150' // 3 Mewtwo                  181 => 153' // 2 Ampharos                  212 => 155' // 2 Scizor                  214 => 157' // 2 Heracros                  229 => 159' // 2 Houndoom                  248 => 161' // 2 Tyranitar                  257 => 163' // 2 Blaziken                  282 => 165' // 2 Gardevoir                  303 => 167' // 2 Mawile                  306 => 169' // 2 Aggron                  308 => 171' // 2 Medicham                  310 => 173' // 2 Manetric                  354 => 175' // 2 Banette                  359 => 177' // 2 Absol                  380 => 179' // 2 Latias                  381 => 181' // 2 Latios                  445 => 183' // 2 Garchomp                  448 => 185' // 2 Lucario                  460 => 187' // 2 Abomasnow                  _ => GetDexFormIndexB2W2(species' formct)              };
Magic Number,PKHeX.Core,DexFormUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\DexFormUtil.cs,GetDexFormIndexXY,The following statement contains a magic number: return species switch              {                  666 => 083' // 20 Vivillion                  669 => 103' // 5 Flabébé                  670 => 108' // 6 Floette                  671 => 114' // 5 Florges                  710 => 119' // 4 Pumpkaboo                  711 => 123' // 4 Gourgeist                  681 => 127' // 2 Aegislash                  716 => 129' // 2 Xerneas                  003 => 131' // 2 Venusaur                  006 => 133' // 3 Charizard                  009 => 136' // 2 Blastoise                  065 => 138' // 2 Alakazam                  094 => 140' // 2 Gengar                  115 => 142' // 2 Kangaskhan                  127 => 144' // 2 Pinsir                  130 => 146' // 2 Gyarados                  142 => 148' // 2 Aerodactyl                  150 => 150' // 3 Mewtwo                  181 => 153' // 2 Ampharos                  212 => 155' // 2 Scizor                  214 => 157' // 2 Heracros                  229 => 159' // 2 Houndoom                  248 => 161' // 2 Tyranitar                  257 => 163' // 2 Blaziken                  282 => 165' // 2 Gardevoir                  303 => 167' // 2 Mawile                  306 => 169' // 2 Aggron                  308 => 171' // 2 Medicham                  310 => 173' // 2 Manetric                  354 => 175' // 2 Banette                  359 => 177' // 2 Absol                  380 => 179' // 2 Latias                  381 => 181' // 2 Latios                  445 => 183' // 2 Garchomp                  448 => 185' // 2 Lucario                  460 => 187' // 2 Abomasnow                  _ => GetDexFormIndexB2W2(species' formct)              };
Magic Number,PKHeX.Core,DexFormUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\DexFormUtil.cs,GetDexFormIndexXY,The following statement contains a magic number: return species switch              {                  666 => 083' // 20 Vivillion                  669 => 103' // 5 Flabébé                  670 => 108' // 6 Floette                  671 => 114' // 5 Florges                  710 => 119' // 4 Pumpkaboo                  711 => 123' // 4 Gourgeist                  681 => 127' // 2 Aegislash                  716 => 129' // 2 Xerneas                  003 => 131' // 2 Venusaur                  006 => 133' // 3 Charizard                  009 => 136' // 2 Blastoise                  065 => 138' // 2 Alakazam                  094 => 140' // 2 Gengar                  115 => 142' // 2 Kangaskhan                  127 => 144' // 2 Pinsir                  130 => 146' // 2 Gyarados                  142 => 148' // 2 Aerodactyl                  150 => 150' // 3 Mewtwo                  181 => 153' // 2 Ampharos                  212 => 155' // 2 Scizor                  214 => 157' // 2 Heracros                  229 => 159' // 2 Houndoom                  248 => 161' // 2 Tyranitar                  257 => 163' // 2 Blaziken                  282 => 165' // 2 Gardevoir                  303 => 167' // 2 Mawile                  306 => 169' // 2 Aggron                  308 => 171' // 2 Medicham                  310 => 173' // 2 Manetric                  354 => 175' // 2 Banette                  359 => 177' // 2 Absol                  380 => 179' // 2 Latias                  381 => 181' // 2 Latios                  445 => 183' // 2 Garchomp                  448 => 185' // 2 Lucario                  460 => 187' // 2 Abomasnow                  _ => GetDexFormIndexB2W2(species' formct)              };
Magic Number,PKHeX.Core,DexFormUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\DexFormUtil.cs,GetDexFormIndexXY,The following statement contains a magic number: return species switch              {                  666 => 083' // 20 Vivillion                  669 => 103' // 5 Flabébé                  670 => 108' // 6 Floette                  671 => 114' // 5 Florges                  710 => 119' // 4 Pumpkaboo                  711 => 123' // 4 Gourgeist                  681 => 127' // 2 Aegislash                  716 => 129' // 2 Xerneas                  003 => 131' // 2 Venusaur                  006 => 133' // 3 Charizard                  009 => 136' // 2 Blastoise                  065 => 138' // 2 Alakazam                  094 => 140' // 2 Gengar                  115 => 142' // 2 Kangaskhan                  127 => 144' // 2 Pinsir                  130 => 146' // 2 Gyarados                  142 => 148' // 2 Aerodactyl                  150 => 150' // 3 Mewtwo                  181 => 153' // 2 Ampharos                  212 => 155' // 2 Scizor                  214 => 157' // 2 Heracros                  229 => 159' // 2 Houndoom                  248 => 161' // 2 Tyranitar                  257 => 163' // 2 Blaziken                  282 => 165' // 2 Gardevoir                  303 => 167' // 2 Mawile                  306 => 169' // 2 Aggron                  308 => 171' // 2 Medicham                  310 => 173' // 2 Manetric                  354 => 175' // 2 Banette                  359 => 177' // 2 Absol                  380 => 179' // 2 Latias                  381 => 181' // 2 Latios                  445 => 183' // 2 Garchomp                  448 => 185' // 2 Lucario                  460 => 187' // 2 Abomasnow                  _ => GetDexFormIndexB2W2(species' formct)              };
Magic Number,PKHeX.Core,DexFormUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\DexFormUtil.cs,GetDexFormIndexXY,The following statement contains a magic number: return species switch              {                  666 => 083' // 20 Vivillion                  669 => 103' // 5 Flabébé                  670 => 108' // 6 Floette                  671 => 114' // 5 Florges                  710 => 119' // 4 Pumpkaboo                  711 => 123' // 4 Gourgeist                  681 => 127' // 2 Aegislash                  716 => 129' // 2 Xerneas                  003 => 131' // 2 Venusaur                  006 => 133' // 3 Charizard                  009 => 136' // 2 Blastoise                  065 => 138' // 2 Alakazam                  094 => 140' // 2 Gengar                  115 => 142' // 2 Kangaskhan                  127 => 144' // 2 Pinsir                  130 => 146' // 2 Gyarados                  142 => 148' // 2 Aerodactyl                  150 => 150' // 3 Mewtwo                  181 => 153' // 2 Ampharos                  212 => 155' // 2 Scizor                  214 => 157' // 2 Heracros                  229 => 159' // 2 Houndoom                  248 => 161' // 2 Tyranitar                  257 => 163' // 2 Blaziken                  282 => 165' // 2 Gardevoir                  303 => 167' // 2 Mawile                  306 => 169' // 2 Aggron                  308 => 171' // 2 Medicham                  310 => 173' // 2 Manetric                  354 => 175' // 2 Banette                  359 => 177' // 2 Absol                  380 => 179' // 2 Latias                  381 => 181' // 2 Latios                  445 => 183' // 2 Garchomp                  448 => 185' // 2 Lucario                  460 => 187' // 2 Abomasnow                  _ => GetDexFormIndexB2W2(species' formct)              };
Magic Number,PKHeX.Core,DexFormUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\DexFormUtil.cs,GetDexFormIndexXY,The following statement contains a magic number: return species switch              {                  666 => 083' // 20 Vivillion                  669 => 103' // 5 Flabébé                  670 => 108' // 6 Floette                  671 => 114' // 5 Florges                  710 => 119' // 4 Pumpkaboo                  711 => 123' // 4 Gourgeist                  681 => 127' // 2 Aegislash                  716 => 129' // 2 Xerneas                  003 => 131' // 2 Venusaur                  006 => 133' // 3 Charizard                  009 => 136' // 2 Blastoise                  065 => 138' // 2 Alakazam                  094 => 140' // 2 Gengar                  115 => 142' // 2 Kangaskhan                  127 => 144' // 2 Pinsir                  130 => 146' // 2 Gyarados                  142 => 148' // 2 Aerodactyl                  150 => 150' // 3 Mewtwo                  181 => 153' // 2 Ampharos                  212 => 155' // 2 Scizor                  214 => 157' // 2 Heracros                  229 => 159' // 2 Houndoom                  248 => 161' // 2 Tyranitar                  257 => 163' // 2 Blaziken                  282 => 165' // 2 Gardevoir                  303 => 167' // 2 Mawile                  306 => 169' // 2 Aggron                  308 => 171' // 2 Medicham                  310 => 173' // 2 Manetric                  354 => 175' // 2 Banette                  359 => 177' // 2 Absol                  380 => 179' // 2 Latias                  381 => 181' // 2 Latios                  445 => 183' // 2 Garchomp                  448 => 185' // 2 Lucario                  460 => 187' // 2 Abomasnow                  _ => GetDexFormIndexB2W2(species' formct)              };
Magic Number,PKHeX.Core,DexFormUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\DexFormUtil.cs,GetDexFormIndexXY,The following statement contains a magic number: return species switch              {                  666 => 083' // 20 Vivillion                  669 => 103' // 5 Flabébé                  670 => 108' // 6 Floette                  671 => 114' // 5 Florges                  710 => 119' // 4 Pumpkaboo                  711 => 123' // 4 Gourgeist                  681 => 127' // 2 Aegislash                  716 => 129' // 2 Xerneas                  003 => 131' // 2 Venusaur                  006 => 133' // 3 Charizard                  009 => 136' // 2 Blastoise                  065 => 138' // 2 Alakazam                  094 => 140' // 2 Gengar                  115 => 142' // 2 Kangaskhan                  127 => 144' // 2 Pinsir                  130 => 146' // 2 Gyarados                  142 => 148' // 2 Aerodactyl                  150 => 150' // 3 Mewtwo                  181 => 153' // 2 Ampharos                  212 => 155' // 2 Scizor                  214 => 157' // 2 Heracros                  229 => 159' // 2 Houndoom                  248 => 161' // 2 Tyranitar                  257 => 163' // 2 Blaziken                  282 => 165' // 2 Gardevoir                  303 => 167' // 2 Mawile                  306 => 169' // 2 Aggron                  308 => 171' // 2 Medicham                  310 => 173' // 2 Manetric                  354 => 175' // 2 Banette                  359 => 177' // 2 Absol                  380 => 179' // 2 Latias                  381 => 181' // 2 Latios                  445 => 183' // 2 Garchomp                  448 => 185' // 2 Lucario                  460 => 187' // 2 Abomasnow                  _ => GetDexFormIndexB2W2(species' formct)              };
Magic Number,PKHeX.Core,DexFormUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\DexFormUtil.cs,GetDexFormIndexXY,The following statement contains a magic number: return species switch              {                  666 => 083' // 20 Vivillion                  669 => 103' // 5 Flabébé                  670 => 108' // 6 Floette                  671 => 114' // 5 Florges                  710 => 119' // 4 Pumpkaboo                  711 => 123' // 4 Gourgeist                  681 => 127' // 2 Aegislash                  716 => 129' // 2 Xerneas                  003 => 131' // 2 Venusaur                  006 => 133' // 3 Charizard                  009 => 136' // 2 Blastoise                  065 => 138' // 2 Alakazam                  094 => 140' // 2 Gengar                  115 => 142' // 2 Kangaskhan                  127 => 144' // 2 Pinsir                  130 => 146' // 2 Gyarados                  142 => 148' // 2 Aerodactyl                  150 => 150' // 3 Mewtwo                  181 => 153' // 2 Ampharos                  212 => 155' // 2 Scizor                  214 => 157' // 2 Heracros                  229 => 159' // 2 Houndoom                  248 => 161' // 2 Tyranitar                  257 => 163' // 2 Blaziken                  282 => 165' // 2 Gardevoir                  303 => 167' // 2 Mawile                  306 => 169' // 2 Aggron                  308 => 171' // 2 Medicham                  310 => 173' // 2 Manetric                  354 => 175' // 2 Banette                  359 => 177' // 2 Absol                  380 => 179' // 2 Latias                  381 => 181' // 2 Latios                  445 => 183' // 2 Garchomp                  448 => 185' // 2 Lucario                  460 => 187' // 2 Abomasnow                  _ => GetDexFormIndexB2W2(species' formct)              };
Magic Number,PKHeX.Core,DexFormUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\DexFormUtil.cs,GetDexFormIndexXY,The following statement contains a magic number: return species switch              {                  666 => 083' // 20 Vivillion                  669 => 103' // 5 Flabébé                  670 => 108' // 6 Floette                  671 => 114' // 5 Florges                  710 => 119' // 4 Pumpkaboo                  711 => 123' // 4 Gourgeist                  681 => 127' // 2 Aegislash                  716 => 129' // 2 Xerneas                  003 => 131' // 2 Venusaur                  006 => 133' // 3 Charizard                  009 => 136' // 2 Blastoise                  065 => 138' // 2 Alakazam                  094 => 140' // 2 Gengar                  115 => 142' // 2 Kangaskhan                  127 => 144' // 2 Pinsir                  130 => 146' // 2 Gyarados                  142 => 148' // 2 Aerodactyl                  150 => 150' // 3 Mewtwo                  181 => 153' // 2 Ampharos                  212 => 155' // 2 Scizor                  214 => 157' // 2 Heracros                  229 => 159' // 2 Houndoom                  248 => 161' // 2 Tyranitar                  257 => 163' // 2 Blaziken                  282 => 165' // 2 Gardevoir                  303 => 167' // 2 Mawile                  306 => 169' // 2 Aggron                  308 => 171' // 2 Medicham                  310 => 173' // 2 Manetric                  354 => 175' // 2 Banette                  359 => 177' // 2 Absol                  380 => 179' // 2 Latias                  381 => 181' // 2 Latios                  445 => 183' // 2 Garchomp                  448 => 185' // 2 Lucario                  460 => 187' // 2 Abomasnow                  _ => GetDexFormIndexB2W2(species' formct)              };
Magic Number,PKHeX.Core,DexFormUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\DexFormUtil.cs,GetDexFormIndexXY,The following statement contains a magic number: return species switch              {                  666 => 083' // 20 Vivillion                  669 => 103' // 5 Flabébé                  670 => 108' // 6 Floette                  671 => 114' // 5 Florges                  710 => 119' // 4 Pumpkaboo                  711 => 123' // 4 Gourgeist                  681 => 127' // 2 Aegislash                  716 => 129' // 2 Xerneas                  003 => 131' // 2 Venusaur                  006 => 133' // 3 Charizard                  009 => 136' // 2 Blastoise                  065 => 138' // 2 Alakazam                  094 => 140' // 2 Gengar                  115 => 142' // 2 Kangaskhan                  127 => 144' // 2 Pinsir                  130 => 146' // 2 Gyarados                  142 => 148' // 2 Aerodactyl                  150 => 150' // 3 Mewtwo                  181 => 153' // 2 Ampharos                  212 => 155' // 2 Scizor                  214 => 157' // 2 Heracros                  229 => 159' // 2 Houndoom                  248 => 161' // 2 Tyranitar                  257 => 163' // 2 Blaziken                  282 => 165' // 2 Gardevoir                  303 => 167' // 2 Mawile                  306 => 169' // 2 Aggron                  308 => 171' // 2 Medicham                  310 => 173' // 2 Manetric                  354 => 175' // 2 Banette                  359 => 177' // 2 Absol                  380 => 179' // 2 Latias                  381 => 181' // 2 Latios                  445 => 183' // 2 Garchomp                  448 => 185' // 2 Lucario                  460 => 187' // 2 Abomasnow                  _ => GetDexFormIndexB2W2(species' formct)              };
Magic Number,PKHeX.Core,DexFormUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\DexFormUtil.cs,GetDexFormIndexXY,The following statement contains a magic number: return species switch              {                  666 => 083' // 20 Vivillion                  669 => 103' // 5 Flabébé                  670 => 108' // 6 Floette                  671 => 114' // 5 Florges                  710 => 119' // 4 Pumpkaboo                  711 => 123' // 4 Gourgeist                  681 => 127' // 2 Aegislash                  716 => 129' // 2 Xerneas                  003 => 131' // 2 Venusaur                  006 => 133' // 3 Charizard                  009 => 136' // 2 Blastoise                  065 => 138' // 2 Alakazam                  094 => 140' // 2 Gengar                  115 => 142' // 2 Kangaskhan                  127 => 144' // 2 Pinsir                  130 => 146' // 2 Gyarados                  142 => 148' // 2 Aerodactyl                  150 => 150' // 3 Mewtwo                  181 => 153' // 2 Ampharos                  212 => 155' // 2 Scizor                  214 => 157' // 2 Heracros                  229 => 159' // 2 Houndoom                  248 => 161' // 2 Tyranitar                  257 => 163' // 2 Blaziken                  282 => 165' // 2 Gardevoir                  303 => 167' // 2 Mawile                  306 => 169' // 2 Aggron                  308 => 171' // 2 Medicham                  310 => 173' // 2 Manetric                  354 => 175' // 2 Banette                  359 => 177' // 2 Absol                  380 => 179' // 2 Latias                  381 => 181' // 2 Latios                  445 => 183' // 2 Garchomp                  448 => 185' // 2 Lucario                  460 => 187' // 2 Abomasnow                  _ => GetDexFormIndexB2W2(species' formct)              };
Magic Number,PKHeX.Core,DexFormUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\DexFormUtil.cs,GetDexFormIndexXY,The following statement contains a magic number: return species switch              {                  666 => 083' // 20 Vivillion                  669 => 103' // 5 Flabébé                  670 => 108' // 6 Floette                  671 => 114' // 5 Florges                  710 => 119' // 4 Pumpkaboo                  711 => 123' // 4 Gourgeist                  681 => 127' // 2 Aegislash                  716 => 129' // 2 Xerneas                  003 => 131' // 2 Venusaur                  006 => 133' // 3 Charizard                  009 => 136' // 2 Blastoise                  065 => 138' // 2 Alakazam                  094 => 140' // 2 Gengar                  115 => 142' // 2 Kangaskhan                  127 => 144' // 2 Pinsir                  130 => 146' // 2 Gyarados                  142 => 148' // 2 Aerodactyl                  150 => 150' // 3 Mewtwo                  181 => 153' // 2 Ampharos                  212 => 155' // 2 Scizor                  214 => 157' // 2 Heracros                  229 => 159' // 2 Houndoom                  248 => 161' // 2 Tyranitar                  257 => 163' // 2 Blaziken                  282 => 165' // 2 Gardevoir                  303 => 167' // 2 Mawile                  306 => 169' // 2 Aggron                  308 => 171' // 2 Medicham                  310 => 173' // 2 Manetric                  354 => 175' // 2 Banette                  359 => 177' // 2 Absol                  380 => 179' // 2 Latias                  381 => 181' // 2 Latios                  445 => 183' // 2 Garchomp                  448 => 185' // 2 Lucario                  460 => 187' // 2 Abomasnow                  _ => GetDexFormIndexB2W2(species' formct)              };
Magic Number,PKHeX.Core,DexFormUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\DexFormUtil.cs,GetDexFormIndexXY,The following statement contains a magic number: return species switch              {                  666 => 083' // 20 Vivillion                  669 => 103' // 5 Flabébé                  670 => 108' // 6 Floette                  671 => 114' // 5 Florges                  710 => 119' // 4 Pumpkaboo                  711 => 123' // 4 Gourgeist                  681 => 127' // 2 Aegislash                  716 => 129' // 2 Xerneas                  003 => 131' // 2 Venusaur                  006 => 133' // 3 Charizard                  009 => 136' // 2 Blastoise                  065 => 138' // 2 Alakazam                  094 => 140' // 2 Gengar                  115 => 142' // 2 Kangaskhan                  127 => 144' // 2 Pinsir                  130 => 146' // 2 Gyarados                  142 => 148' // 2 Aerodactyl                  150 => 150' // 3 Mewtwo                  181 => 153' // 2 Ampharos                  212 => 155' // 2 Scizor                  214 => 157' // 2 Heracros                  229 => 159' // 2 Houndoom                  248 => 161' // 2 Tyranitar                  257 => 163' // 2 Blaziken                  282 => 165' // 2 Gardevoir                  303 => 167' // 2 Mawile                  306 => 169' // 2 Aggron                  308 => 171' // 2 Medicham                  310 => 173' // 2 Manetric                  354 => 175' // 2 Banette                  359 => 177' // 2 Absol                  380 => 179' // 2 Latias                  381 => 181' // 2 Latios                  445 => 183' // 2 Garchomp                  448 => 185' // 2 Lucario                  460 => 187' // 2 Abomasnow                  _ => GetDexFormIndexB2W2(species' formct)              };
Magic Number,PKHeX.Core,DexFormUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\DexFormUtil.cs,GetDexFormIndexORAS,The following statement contains a magic number: return species switch              {                  025 => 189' // 7 Pikachu                  720 => 196' // 2 Hoopa                  015 => 198' // 2 Beedrill                  018 => 200' // 2 Pidgeot                  080 => 202' // 2 Slowbro                  208 => 204' // 2 Steelix                  254 => 206' // 2 Sceptile                  260 => 208' // 2 Swampert                  302 => 210' // 2 Sableye                  319 => 212' // 2 Sharpedo                  323 => 214' // 2 Camerupt                  334 => 216' // 2 Altaria                  362 => 218' // 2 Glalie                  373 => 220' // 2 Salamence                  376 => 222' // 2 Metagross                  384 => 224' // 2 Rayquaza                  428 => 226' // 2 Lopunny                  475 => 228' // 2 Gallade                  531 => 230' // 2 Audino                  719 => 232' // 2 Diancie                  382 => 234' // 2 Kyogre                  383 => 236' // 2 Groudon                  493 => 238' // 18 Arceus                  649 => 256' // 5 Genesect                  676 => 261' // 10 Furfrou                  _ => GetDexFormIndexXY(species' formct)              };
Magic Number,PKHeX.Core,DexFormUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\DexFormUtil.cs,GetDexFormIndexORAS,The following statement contains a magic number: return species switch              {                  025 => 189' // 7 Pikachu                  720 => 196' // 2 Hoopa                  015 => 198' // 2 Beedrill                  018 => 200' // 2 Pidgeot                  080 => 202' // 2 Slowbro                  208 => 204' // 2 Steelix                  254 => 206' // 2 Sceptile                  260 => 208' // 2 Swampert                  302 => 210' // 2 Sableye                  319 => 212' // 2 Sharpedo                  323 => 214' // 2 Camerupt                  334 => 216' // 2 Altaria                  362 => 218' // 2 Glalie                  373 => 220' // 2 Salamence                  376 => 222' // 2 Metagross                  384 => 224' // 2 Rayquaza                  428 => 226' // 2 Lopunny                  475 => 228' // 2 Gallade                  531 => 230' // 2 Audino                  719 => 232' // 2 Diancie                  382 => 234' // 2 Kyogre                  383 => 236' // 2 Groudon                  493 => 238' // 18 Arceus                  649 => 256' // 5 Genesect                  676 => 261' // 10 Furfrou                  _ => GetDexFormIndexXY(species' formct)              };
Magic Number,PKHeX.Core,DexFormUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\DexFormUtil.cs,GetDexFormIndexORAS,The following statement contains a magic number: return species switch              {                  025 => 189' // 7 Pikachu                  720 => 196' // 2 Hoopa                  015 => 198' // 2 Beedrill                  018 => 200' // 2 Pidgeot                  080 => 202' // 2 Slowbro                  208 => 204' // 2 Steelix                  254 => 206' // 2 Sceptile                  260 => 208' // 2 Swampert                  302 => 210' // 2 Sableye                  319 => 212' // 2 Sharpedo                  323 => 214' // 2 Camerupt                  334 => 216' // 2 Altaria                  362 => 218' // 2 Glalie                  373 => 220' // 2 Salamence                  376 => 222' // 2 Metagross                  384 => 224' // 2 Rayquaza                  428 => 226' // 2 Lopunny                  475 => 228' // 2 Gallade                  531 => 230' // 2 Audino                  719 => 232' // 2 Diancie                  382 => 234' // 2 Kyogre                  383 => 236' // 2 Groudon                  493 => 238' // 18 Arceus                  649 => 256' // 5 Genesect                  676 => 261' // 10 Furfrou                  _ => GetDexFormIndexXY(species' formct)              };
Magic Number,PKHeX.Core,DexFormUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\DexFormUtil.cs,GetDexFormIndexORAS,The following statement contains a magic number: return species switch              {                  025 => 189' // 7 Pikachu                  720 => 196' // 2 Hoopa                  015 => 198' // 2 Beedrill                  018 => 200' // 2 Pidgeot                  080 => 202' // 2 Slowbro                  208 => 204' // 2 Steelix                  254 => 206' // 2 Sceptile                  260 => 208' // 2 Swampert                  302 => 210' // 2 Sableye                  319 => 212' // 2 Sharpedo                  323 => 214' // 2 Camerupt                  334 => 216' // 2 Altaria                  362 => 218' // 2 Glalie                  373 => 220' // 2 Salamence                  376 => 222' // 2 Metagross                  384 => 224' // 2 Rayquaza                  428 => 226' // 2 Lopunny                  475 => 228' // 2 Gallade                  531 => 230' // 2 Audino                  719 => 232' // 2 Diancie                  382 => 234' // 2 Kyogre                  383 => 236' // 2 Groudon                  493 => 238' // 18 Arceus                  649 => 256' // 5 Genesect                  676 => 261' // 10 Furfrou                  _ => GetDexFormIndexXY(species' formct)              };
Magic Number,PKHeX.Core,DexFormUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\DexFormUtil.cs,GetDexFormIndexORAS,The following statement contains a magic number: return species switch              {                  025 => 189' // 7 Pikachu                  720 => 196' // 2 Hoopa                  015 => 198' // 2 Beedrill                  018 => 200' // 2 Pidgeot                  080 => 202' // 2 Slowbro                  208 => 204' // 2 Steelix                  254 => 206' // 2 Sceptile                  260 => 208' // 2 Swampert                  302 => 210' // 2 Sableye                  319 => 212' // 2 Sharpedo                  323 => 214' // 2 Camerupt                  334 => 216' // 2 Altaria                  362 => 218' // 2 Glalie                  373 => 220' // 2 Salamence                  376 => 222' // 2 Metagross                  384 => 224' // 2 Rayquaza                  428 => 226' // 2 Lopunny                  475 => 228' // 2 Gallade                  531 => 230' // 2 Audino                  719 => 232' // 2 Diancie                  382 => 234' // 2 Kyogre                  383 => 236' // 2 Groudon                  493 => 238' // 18 Arceus                  649 => 256' // 5 Genesect                  676 => 261' // 10 Furfrou                  _ => GetDexFormIndexXY(species' formct)              };
Magic Number,PKHeX.Core,DexFormUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\DexFormUtil.cs,GetDexFormIndexORAS,The following statement contains a magic number: return species switch              {                  025 => 189' // 7 Pikachu                  720 => 196' // 2 Hoopa                  015 => 198' // 2 Beedrill                  018 => 200' // 2 Pidgeot                  080 => 202' // 2 Slowbro                  208 => 204' // 2 Steelix                  254 => 206' // 2 Sceptile                  260 => 208' // 2 Swampert                  302 => 210' // 2 Sableye                  319 => 212' // 2 Sharpedo                  323 => 214' // 2 Camerupt                  334 => 216' // 2 Altaria                  362 => 218' // 2 Glalie                  373 => 220' // 2 Salamence                  376 => 222' // 2 Metagross                  384 => 224' // 2 Rayquaza                  428 => 226' // 2 Lopunny                  475 => 228' // 2 Gallade                  531 => 230' // 2 Audino                  719 => 232' // 2 Diancie                  382 => 234' // 2 Kyogre                  383 => 236' // 2 Groudon                  493 => 238' // 18 Arceus                  649 => 256' // 5 Genesect                  676 => 261' // 10 Furfrou                  _ => GetDexFormIndexXY(species' formct)              };
Magic Number,PKHeX.Core,DexFormUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\DexFormUtil.cs,GetDexFormIndexORAS,The following statement contains a magic number: return species switch              {                  025 => 189' // 7 Pikachu                  720 => 196' // 2 Hoopa                  015 => 198' // 2 Beedrill                  018 => 200' // 2 Pidgeot                  080 => 202' // 2 Slowbro                  208 => 204' // 2 Steelix                  254 => 206' // 2 Sceptile                  260 => 208' // 2 Swampert                  302 => 210' // 2 Sableye                  319 => 212' // 2 Sharpedo                  323 => 214' // 2 Camerupt                  334 => 216' // 2 Altaria                  362 => 218' // 2 Glalie                  373 => 220' // 2 Salamence                  376 => 222' // 2 Metagross                  384 => 224' // 2 Rayquaza                  428 => 226' // 2 Lopunny                  475 => 228' // 2 Gallade                  531 => 230' // 2 Audino                  719 => 232' // 2 Diancie                  382 => 234' // 2 Kyogre                  383 => 236' // 2 Groudon                  493 => 238' // 18 Arceus                  649 => 256' // 5 Genesect                  676 => 261' // 10 Furfrou                  _ => GetDexFormIndexXY(species' formct)              };
Magic Number,PKHeX.Core,DexFormUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\DexFormUtil.cs,GetDexFormIndexORAS,The following statement contains a magic number: return species switch              {                  025 => 189' // 7 Pikachu                  720 => 196' // 2 Hoopa                  015 => 198' // 2 Beedrill                  018 => 200' // 2 Pidgeot                  080 => 202' // 2 Slowbro                  208 => 204' // 2 Steelix                  254 => 206' // 2 Sceptile                  260 => 208' // 2 Swampert                  302 => 210' // 2 Sableye                  319 => 212' // 2 Sharpedo                  323 => 214' // 2 Camerupt                  334 => 216' // 2 Altaria                  362 => 218' // 2 Glalie                  373 => 220' // 2 Salamence                  376 => 222' // 2 Metagross                  384 => 224' // 2 Rayquaza                  428 => 226' // 2 Lopunny                  475 => 228' // 2 Gallade                  531 => 230' // 2 Audino                  719 => 232' // 2 Diancie                  382 => 234' // 2 Kyogre                  383 => 236' // 2 Groudon                  493 => 238' // 18 Arceus                  649 => 256' // 5 Genesect                  676 => 261' // 10 Furfrou                  _ => GetDexFormIndexXY(species' formct)              };
Magic Number,PKHeX.Core,DexFormUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\DexFormUtil.cs,GetDexFormIndexORAS,The following statement contains a magic number: return species switch              {                  025 => 189' // 7 Pikachu                  720 => 196' // 2 Hoopa                  015 => 198' // 2 Beedrill                  018 => 200' // 2 Pidgeot                  080 => 202' // 2 Slowbro                  208 => 204' // 2 Steelix                  254 => 206' // 2 Sceptile                  260 => 208' // 2 Swampert                  302 => 210' // 2 Sableye                  319 => 212' // 2 Sharpedo                  323 => 214' // 2 Camerupt                  334 => 216' // 2 Altaria                  362 => 218' // 2 Glalie                  373 => 220' // 2 Salamence                  376 => 222' // 2 Metagross                  384 => 224' // 2 Rayquaza                  428 => 226' // 2 Lopunny                  475 => 228' // 2 Gallade                  531 => 230' // 2 Audino                  719 => 232' // 2 Diancie                  382 => 234' // 2 Kyogre                  383 => 236' // 2 Groudon                  493 => 238' // 18 Arceus                  649 => 256' // 5 Genesect                  676 => 261' // 10 Furfrou                  _ => GetDexFormIndexXY(species' formct)              };
Magic Number,PKHeX.Core,DexFormUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\DexFormUtil.cs,GetDexFormIndexORAS,The following statement contains a magic number: return species switch              {                  025 => 189' // 7 Pikachu                  720 => 196' // 2 Hoopa                  015 => 198' // 2 Beedrill                  018 => 200' // 2 Pidgeot                  080 => 202' // 2 Slowbro                  208 => 204' // 2 Steelix                  254 => 206' // 2 Sceptile                  260 => 208' // 2 Swampert                  302 => 210' // 2 Sableye                  319 => 212' // 2 Sharpedo                  323 => 214' // 2 Camerupt                  334 => 216' // 2 Altaria                  362 => 218' // 2 Glalie                  373 => 220' // 2 Salamence                  376 => 222' // 2 Metagross                  384 => 224' // 2 Rayquaza                  428 => 226' // 2 Lopunny                  475 => 228' // 2 Gallade                  531 => 230' // 2 Audino                  719 => 232' // 2 Diancie                  382 => 234' // 2 Kyogre                  383 => 236' // 2 Groudon                  493 => 238' // 18 Arceus                  649 => 256' // 5 Genesect                  676 => 261' // 10 Furfrou                  _ => GetDexFormIndexXY(species' formct)              };
Magic Number,PKHeX.Core,DexFormUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\DexFormUtil.cs,GetDexFormIndexORAS,The following statement contains a magic number: return species switch              {                  025 => 189' // 7 Pikachu                  720 => 196' // 2 Hoopa                  015 => 198' // 2 Beedrill                  018 => 200' // 2 Pidgeot                  080 => 202' // 2 Slowbro                  208 => 204' // 2 Steelix                  254 => 206' // 2 Sceptile                  260 => 208' // 2 Swampert                  302 => 210' // 2 Sableye                  319 => 212' // 2 Sharpedo                  323 => 214' // 2 Camerupt                  334 => 216' // 2 Altaria                  362 => 218' // 2 Glalie                  373 => 220' // 2 Salamence                  376 => 222' // 2 Metagross                  384 => 224' // 2 Rayquaza                  428 => 226' // 2 Lopunny                  475 => 228' // 2 Gallade                  531 => 230' // 2 Audino                  719 => 232' // 2 Diancie                  382 => 234' // 2 Kyogre                  383 => 236' // 2 Groudon                  493 => 238' // 18 Arceus                  649 => 256' // 5 Genesect                  676 => 261' // 10 Furfrou                  _ => GetDexFormIndexXY(species' formct)              };
Magic Number,PKHeX.Core,DexFormUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\DexFormUtil.cs,GetDexFormIndexORAS,The following statement contains a magic number: return species switch              {                  025 => 189' // 7 Pikachu                  720 => 196' // 2 Hoopa                  015 => 198' // 2 Beedrill                  018 => 200' // 2 Pidgeot                  080 => 202' // 2 Slowbro                  208 => 204' // 2 Steelix                  254 => 206' // 2 Sceptile                  260 => 208' // 2 Swampert                  302 => 210' // 2 Sableye                  319 => 212' // 2 Sharpedo                  323 => 214' // 2 Camerupt                  334 => 216' // 2 Altaria                  362 => 218' // 2 Glalie                  373 => 220' // 2 Salamence                  376 => 222' // 2 Metagross                  384 => 224' // 2 Rayquaza                  428 => 226' // 2 Lopunny                  475 => 228' // 2 Gallade                  531 => 230' // 2 Audino                  719 => 232' // 2 Diancie                  382 => 234' // 2 Kyogre                  383 => 236' // 2 Groudon                  493 => 238' // 18 Arceus                  649 => 256' // 5 Genesect                  676 => 261' // 10 Furfrou                  _ => GetDexFormIndexXY(species' formct)              };
Magic Number,PKHeX.Core,DexFormUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\DexFormUtil.cs,GetDexFormIndexORAS,The following statement contains a magic number: return species switch              {                  025 => 189' // 7 Pikachu                  720 => 196' // 2 Hoopa                  015 => 198' // 2 Beedrill                  018 => 200' // 2 Pidgeot                  080 => 202' // 2 Slowbro                  208 => 204' // 2 Steelix                  254 => 206' // 2 Sceptile                  260 => 208' // 2 Swampert                  302 => 210' // 2 Sableye                  319 => 212' // 2 Sharpedo                  323 => 214' // 2 Camerupt                  334 => 216' // 2 Altaria                  362 => 218' // 2 Glalie                  373 => 220' // 2 Salamence                  376 => 222' // 2 Metagross                  384 => 224' // 2 Rayquaza                  428 => 226' // 2 Lopunny                  475 => 228' // 2 Gallade                  531 => 230' // 2 Audino                  719 => 232' // 2 Diancie                  382 => 234' // 2 Kyogre                  383 => 236' // 2 Groudon                  493 => 238' // 18 Arceus                  649 => 256' // 5 Genesect                  676 => 261' // 10 Furfrou                  _ => GetDexFormIndexXY(species' formct)              };
Magic Number,PKHeX.Core,DexFormUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\DexFormUtil.cs,GetDexFormIndexORAS,The following statement contains a magic number: return species switch              {                  025 => 189' // 7 Pikachu                  720 => 196' // 2 Hoopa                  015 => 198' // 2 Beedrill                  018 => 200' // 2 Pidgeot                  080 => 202' // 2 Slowbro                  208 => 204' // 2 Steelix                  254 => 206' // 2 Sceptile                  260 => 208' // 2 Swampert                  302 => 210' // 2 Sableye                  319 => 212' // 2 Sharpedo                  323 => 214' // 2 Camerupt                  334 => 216' // 2 Altaria                  362 => 218' // 2 Glalie                  373 => 220' // 2 Salamence                  376 => 222' // 2 Metagross                  384 => 224' // 2 Rayquaza                  428 => 226' // 2 Lopunny                  475 => 228' // 2 Gallade                  531 => 230' // 2 Audino                  719 => 232' // 2 Diancie                  382 => 234' // 2 Kyogre                  383 => 236' // 2 Groudon                  493 => 238' // 18 Arceus                  649 => 256' // 5 Genesect                  676 => 261' // 10 Furfrou                  _ => GetDexFormIndexXY(species' formct)              };
Magic Number,PKHeX.Core,DexFormUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\DexFormUtil.cs,GetDexFormIndexORAS,The following statement contains a magic number: return species switch              {                  025 => 189' // 7 Pikachu                  720 => 196' // 2 Hoopa                  015 => 198' // 2 Beedrill                  018 => 200' // 2 Pidgeot                  080 => 202' // 2 Slowbro                  208 => 204' // 2 Steelix                  254 => 206' // 2 Sceptile                  260 => 208' // 2 Swampert                  302 => 210' // 2 Sableye                  319 => 212' // 2 Sharpedo                  323 => 214' // 2 Camerupt                  334 => 216' // 2 Altaria                  362 => 218' // 2 Glalie                  373 => 220' // 2 Salamence                  376 => 222' // 2 Metagross                  384 => 224' // 2 Rayquaza                  428 => 226' // 2 Lopunny                  475 => 228' // 2 Gallade                  531 => 230' // 2 Audino                  719 => 232' // 2 Diancie                  382 => 234' // 2 Kyogre                  383 => 236' // 2 Groudon                  493 => 238' // 18 Arceus                  649 => 256' // 5 Genesect                  676 => 261' // 10 Furfrou                  _ => GetDexFormIndexXY(species' formct)              };
Magic Number,PKHeX.Core,DexFormUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\DexFormUtil.cs,GetDexFormIndexORAS,The following statement contains a magic number: return species switch              {                  025 => 189' // 7 Pikachu                  720 => 196' // 2 Hoopa                  015 => 198' // 2 Beedrill                  018 => 200' // 2 Pidgeot                  080 => 202' // 2 Slowbro                  208 => 204' // 2 Steelix                  254 => 206' // 2 Sceptile                  260 => 208' // 2 Swampert                  302 => 210' // 2 Sableye                  319 => 212' // 2 Sharpedo                  323 => 214' // 2 Camerupt                  334 => 216' // 2 Altaria                  362 => 218' // 2 Glalie                  373 => 220' // 2 Salamence                  376 => 222' // 2 Metagross                  384 => 224' // 2 Rayquaza                  428 => 226' // 2 Lopunny                  475 => 228' // 2 Gallade                  531 => 230' // 2 Audino                  719 => 232' // 2 Diancie                  382 => 234' // 2 Kyogre                  383 => 236' // 2 Groudon                  493 => 238' // 18 Arceus                  649 => 256' // 5 Genesect                  676 => 261' // 10 Furfrou                  _ => GetDexFormIndexXY(species' formct)              };
Magic Number,PKHeX.Core,DexFormUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\DexFormUtil.cs,GetDexFormIndexORAS,The following statement contains a magic number: return species switch              {                  025 => 189' // 7 Pikachu                  720 => 196' // 2 Hoopa                  015 => 198' // 2 Beedrill                  018 => 200' // 2 Pidgeot                  080 => 202' // 2 Slowbro                  208 => 204' // 2 Steelix                  254 => 206' // 2 Sceptile                  260 => 208' // 2 Swampert                  302 => 210' // 2 Sableye                  319 => 212' // 2 Sharpedo                  323 => 214' // 2 Camerupt                  334 => 216' // 2 Altaria                  362 => 218' // 2 Glalie                  373 => 220' // 2 Salamence                  376 => 222' // 2 Metagross                  384 => 224' // 2 Rayquaza                  428 => 226' // 2 Lopunny                  475 => 228' // 2 Gallade                  531 => 230' // 2 Audino                  719 => 232' // 2 Diancie                  382 => 234' // 2 Kyogre                  383 => 236' // 2 Groudon                  493 => 238' // 18 Arceus                  649 => 256' // 5 Genesect                  676 => 261' // 10 Furfrou                  _ => GetDexFormIndexXY(species' formct)              };
Magic Number,PKHeX.Core,DexFormUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\DexFormUtil.cs,GetDexFormIndexORAS,The following statement contains a magic number: return species switch              {                  025 => 189' // 7 Pikachu                  720 => 196' // 2 Hoopa                  015 => 198' // 2 Beedrill                  018 => 200' // 2 Pidgeot                  080 => 202' // 2 Slowbro                  208 => 204' // 2 Steelix                  254 => 206' // 2 Sceptile                  260 => 208' // 2 Swampert                  302 => 210' // 2 Sableye                  319 => 212' // 2 Sharpedo                  323 => 214' // 2 Camerupt                  334 => 216' // 2 Altaria                  362 => 218' // 2 Glalie                  373 => 220' // 2 Salamence                  376 => 222' // 2 Metagross                  384 => 224' // 2 Rayquaza                  428 => 226' // 2 Lopunny                  475 => 228' // 2 Gallade                  531 => 230' // 2 Audino                  719 => 232' // 2 Diancie                  382 => 234' // 2 Kyogre                  383 => 236' // 2 Groudon                  493 => 238' // 18 Arceus                  649 => 256' // 5 Genesect                  676 => 261' // 10 Furfrou                  _ => GetDexFormIndexXY(species' formct)              };
Magic Number,PKHeX.Core,DexFormUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\DexFormUtil.cs,GetDexFormIndexORAS,The following statement contains a magic number: return species switch              {                  025 => 189' // 7 Pikachu                  720 => 196' // 2 Hoopa                  015 => 198' // 2 Beedrill                  018 => 200' // 2 Pidgeot                  080 => 202' // 2 Slowbro                  208 => 204' // 2 Steelix                  254 => 206' // 2 Sceptile                  260 => 208' // 2 Swampert                  302 => 210' // 2 Sableye                  319 => 212' // 2 Sharpedo                  323 => 214' // 2 Camerupt                  334 => 216' // 2 Altaria                  362 => 218' // 2 Glalie                  373 => 220' // 2 Salamence                  376 => 222' // 2 Metagross                  384 => 224' // 2 Rayquaza                  428 => 226' // 2 Lopunny                  475 => 228' // 2 Gallade                  531 => 230' // 2 Audino                  719 => 232' // 2 Diancie                  382 => 234' // 2 Kyogre                  383 => 236' // 2 Groudon                  493 => 238' // 18 Arceus                  649 => 256' // 5 Genesect                  676 => 261' // 10 Furfrou                  _ => GetDexFormIndexXY(species' formct)              };
Magic Number,PKHeX.Core,DexFormUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\DexFormUtil.cs,GetDexFormIndexORAS,The following statement contains a magic number: return species switch              {                  025 => 189' // 7 Pikachu                  720 => 196' // 2 Hoopa                  015 => 198' // 2 Beedrill                  018 => 200' // 2 Pidgeot                  080 => 202' // 2 Slowbro                  208 => 204' // 2 Steelix                  254 => 206' // 2 Sceptile                  260 => 208' // 2 Swampert                  302 => 210' // 2 Sableye                  319 => 212' // 2 Sharpedo                  323 => 214' // 2 Camerupt                  334 => 216' // 2 Altaria                  362 => 218' // 2 Glalie                  373 => 220' // 2 Salamence                  376 => 222' // 2 Metagross                  384 => 224' // 2 Rayquaza                  428 => 226' // 2 Lopunny                  475 => 228' // 2 Gallade                  531 => 230' // 2 Audino                  719 => 232' // 2 Diancie                  382 => 234' // 2 Kyogre                  383 => 236' // 2 Groudon                  493 => 238' // 18 Arceus                  649 => 256' // 5 Genesect                  676 => 261' // 10 Furfrou                  _ => GetDexFormIndexXY(species' formct)              };
Magic Number,PKHeX.Core,DexFormUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\DexFormUtil.cs,GetDexFormIndexORAS,The following statement contains a magic number: return species switch              {                  025 => 189' // 7 Pikachu                  720 => 196' // 2 Hoopa                  015 => 198' // 2 Beedrill                  018 => 200' // 2 Pidgeot                  080 => 202' // 2 Slowbro                  208 => 204' // 2 Steelix                  254 => 206' // 2 Sceptile                  260 => 208' // 2 Swampert                  302 => 210' // 2 Sableye                  319 => 212' // 2 Sharpedo                  323 => 214' // 2 Camerupt                  334 => 216' // 2 Altaria                  362 => 218' // 2 Glalie                  373 => 220' // 2 Salamence                  376 => 222' // 2 Metagross                  384 => 224' // 2 Rayquaza                  428 => 226' // 2 Lopunny                  475 => 228' // 2 Gallade                  531 => 230' // 2 Audino                  719 => 232' // 2 Diancie                  382 => 234' // 2 Kyogre                  383 => 236' // 2 Groudon                  493 => 238' // 18 Arceus                  649 => 256' // 5 Genesect                  676 => 261' // 10 Furfrou                  _ => GetDexFormIndexXY(species' formct)              };
Magic Number,PKHeX.Core,DexFormUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\DexFormUtil.cs,GetDexFormIndexORAS,The following statement contains a magic number: return species switch              {                  025 => 189' // 7 Pikachu                  720 => 196' // 2 Hoopa                  015 => 198' // 2 Beedrill                  018 => 200' // 2 Pidgeot                  080 => 202' // 2 Slowbro                  208 => 204' // 2 Steelix                  254 => 206' // 2 Sceptile                  260 => 208' // 2 Swampert                  302 => 210' // 2 Sableye                  319 => 212' // 2 Sharpedo                  323 => 214' // 2 Camerupt                  334 => 216' // 2 Altaria                  362 => 218' // 2 Glalie                  373 => 220' // 2 Salamence                  376 => 222' // 2 Metagross                  384 => 224' // 2 Rayquaza                  428 => 226' // 2 Lopunny                  475 => 228' // 2 Gallade                  531 => 230' // 2 Audino                  719 => 232' // 2 Diancie                  382 => 234' // 2 Kyogre                  383 => 236' // 2 Groudon                  493 => 238' // 18 Arceus                  649 => 256' // 5 Genesect                  676 => 261' // 10 Furfrou                  _ => GetDexFormIndexXY(species' formct)              };
Magic Number,PKHeX.Core,DexFormUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\DexFormUtil.cs,GetDexFormIndexORAS,The following statement contains a magic number: return species switch              {                  025 => 189' // 7 Pikachu                  720 => 196' // 2 Hoopa                  015 => 198' // 2 Beedrill                  018 => 200' // 2 Pidgeot                  080 => 202' // 2 Slowbro                  208 => 204' // 2 Steelix                  254 => 206' // 2 Sceptile                  260 => 208' // 2 Swampert                  302 => 210' // 2 Sableye                  319 => 212' // 2 Sharpedo                  323 => 214' // 2 Camerupt                  334 => 216' // 2 Altaria                  362 => 218' // 2 Glalie                  373 => 220' // 2 Salamence                  376 => 222' // 2 Metagross                  384 => 224' // 2 Rayquaza                  428 => 226' // 2 Lopunny                  475 => 228' // 2 Gallade                  531 => 230' // 2 Audino                  719 => 232' // 2 Diancie                  382 => 234' // 2 Kyogre                  383 => 236' // 2 Groudon                  493 => 238' // 18 Arceus                  649 => 256' // 5 Genesect                  676 => 261' // 10 Furfrou                  _ => GetDexFormIndexXY(species' formct)              };
Magic Number,PKHeX.Core,DexFormUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\DexFormUtil.cs,GetDexFormIndexORAS,The following statement contains a magic number: return species switch              {                  025 => 189' // 7 Pikachu                  720 => 196' // 2 Hoopa                  015 => 198' // 2 Beedrill                  018 => 200' // 2 Pidgeot                  080 => 202' // 2 Slowbro                  208 => 204' // 2 Steelix                  254 => 206' // 2 Sceptile                  260 => 208' // 2 Swampert                  302 => 210' // 2 Sableye                  319 => 212' // 2 Sharpedo                  323 => 214' // 2 Camerupt                  334 => 216' // 2 Altaria                  362 => 218' // 2 Glalie                  373 => 220' // 2 Salamence                  376 => 222' // 2 Metagross                  384 => 224' // 2 Rayquaza                  428 => 226' // 2 Lopunny                  475 => 228' // 2 Gallade                  531 => 230' // 2 Audino                  719 => 232' // 2 Diancie                  382 => 234' // 2 Kyogre                  383 => 236' // 2 Groudon                  493 => 238' // 18 Arceus                  649 => 256' // 5 Genesect                  676 => 261' // 10 Furfrou                  _ => GetDexFormIndexXY(species' formct)              };
Magic Number,PKHeX.Core,DexFormUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\DexFormUtil.cs,GetDexFormIndexORAS,The following statement contains a magic number: return species switch              {                  025 => 189' // 7 Pikachu                  720 => 196' // 2 Hoopa                  015 => 198' // 2 Beedrill                  018 => 200' // 2 Pidgeot                  080 => 202' // 2 Slowbro                  208 => 204' // 2 Steelix                  254 => 206' // 2 Sceptile                  260 => 208' // 2 Swampert                  302 => 210' // 2 Sableye                  319 => 212' // 2 Sharpedo                  323 => 214' // 2 Camerupt                  334 => 216' // 2 Altaria                  362 => 218' // 2 Glalie                  373 => 220' // 2 Salamence                  376 => 222' // 2 Metagross                  384 => 224' // 2 Rayquaza                  428 => 226' // 2 Lopunny                  475 => 228' // 2 Gallade                  531 => 230' // 2 Audino                  719 => 232' // 2 Diancie                  382 => 234' // 2 Kyogre                  383 => 236' // 2 Groudon                  493 => 238' // 18 Arceus                  649 => 256' // 5 Genesect                  676 => 261' // 10 Furfrou                  _ => GetDexFormIndexXY(species' formct)              };
Magic Number,PKHeX.Core,DexFormUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\DexFormUtil.cs,GetDexFormIndexORAS,The following statement contains a magic number: return species switch              {                  025 => 189' // 7 Pikachu                  720 => 196' // 2 Hoopa                  015 => 198' // 2 Beedrill                  018 => 200' // 2 Pidgeot                  080 => 202' // 2 Slowbro                  208 => 204' // 2 Steelix                  254 => 206' // 2 Sceptile                  260 => 208' // 2 Swampert                  302 => 210' // 2 Sableye                  319 => 212' // 2 Sharpedo                  323 => 214' // 2 Camerupt                  334 => 216' // 2 Altaria                  362 => 218' // 2 Glalie                  373 => 220' // 2 Salamence                  376 => 222' // 2 Metagross                  384 => 224' // 2 Rayquaza                  428 => 226' // 2 Lopunny                  475 => 228' // 2 Gallade                  531 => 230' // 2 Audino                  719 => 232' // 2 Diancie                  382 => 234' // 2 Kyogre                  383 => 236' // 2 Groudon                  493 => 238' // 18 Arceus                  649 => 256' // 5 Genesect                  676 => 261' // 10 Furfrou                  _ => GetDexFormIndexXY(species' formct)              };
Magic Number,PKHeX.Core,DexFormUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\DexFormUtil.cs,GetDexFormIndexORAS,The following statement contains a magic number: return species switch              {                  025 => 189' // 7 Pikachu                  720 => 196' // 2 Hoopa                  015 => 198' // 2 Beedrill                  018 => 200' // 2 Pidgeot                  080 => 202' // 2 Slowbro                  208 => 204' // 2 Steelix                  254 => 206' // 2 Sceptile                  260 => 208' // 2 Swampert                  302 => 210' // 2 Sableye                  319 => 212' // 2 Sharpedo                  323 => 214' // 2 Camerupt                  334 => 216' // 2 Altaria                  362 => 218' // 2 Glalie                  373 => 220' // 2 Salamence                  376 => 222' // 2 Metagross                  384 => 224' // 2 Rayquaza                  428 => 226' // 2 Lopunny                  475 => 228' // 2 Gallade                  531 => 230' // 2 Audino                  719 => 232' // 2 Diancie                  382 => 234' // 2 Kyogre                  383 => 236' // 2 Groudon                  493 => 238' // 18 Arceus                  649 => 256' // 5 Genesect                  676 => 261' // 10 Furfrou                  _ => GetDexFormIndexXY(species' formct)              };
Magic Number,PKHeX.Core,DexFormUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\DexFormUtil.cs,GetDexFormIndexORAS,The following statement contains a magic number: return species switch              {                  025 => 189' // 7 Pikachu                  720 => 196' // 2 Hoopa                  015 => 198' // 2 Beedrill                  018 => 200' // 2 Pidgeot                  080 => 202' // 2 Slowbro                  208 => 204' // 2 Steelix                  254 => 206' // 2 Sceptile                  260 => 208' // 2 Swampert                  302 => 210' // 2 Sableye                  319 => 212' // 2 Sharpedo                  323 => 214' // 2 Camerupt                  334 => 216' // 2 Altaria                  362 => 218' // 2 Glalie                  373 => 220' // 2 Salamence                  376 => 222' // 2 Metagross                  384 => 224' // 2 Rayquaza                  428 => 226' // 2 Lopunny                  475 => 228' // 2 Gallade                  531 => 230' // 2 Audino                  719 => 232' // 2 Diancie                  382 => 234' // 2 Kyogre                  383 => 236' // 2 Groudon                  493 => 238' // 18 Arceus                  649 => 256' // 5 Genesect                  676 => 261' // 10 Furfrou                  _ => GetDexFormIndexXY(species' formct)              };
Magic Number,PKHeX.Core,DexFormUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\DexFormUtil.cs,GetDexFormIndexORAS,The following statement contains a magic number: return species switch              {                  025 => 189' // 7 Pikachu                  720 => 196' // 2 Hoopa                  015 => 198' // 2 Beedrill                  018 => 200' // 2 Pidgeot                  080 => 202' // 2 Slowbro                  208 => 204' // 2 Steelix                  254 => 206' // 2 Sceptile                  260 => 208' // 2 Swampert                  302 => 210' // 2 Sableye                  319 => 212' // 2 Sharpedo                  323 => 214' // 2 Camerupt                  334 => 216' // 2 Altaria                  362 => 218' // 2 Glalie                  373 => 220' // 2 Salamence                  376 => 222' // 2 Metagross                  384 => 224' // 2 Rayquaza                  428 => 226' // 2 Lopunny                  475 => 228' // 2 Gallade                  531 => 230' // 2 Audino                  719 => 232' // 2 Diancie                  382 => 234' // 2 Kyogre                  383 => 236' // 2 Groudon                  493 => 238' // 18 Arceus                  649 => 256' // 5 Genesect                  676 => 261' // 10 Furfrou                  _ => GetDexFormIndexXY(species' formct)              };
Magic Number,PKHeX.Core,DexFormUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\DexFormUtil.cs,GetDexFormIndexORAS,The following statement contains a magic number: return species switch              {                  025 => 189' // 7 Pikachu                  720 => 196' // 2 Hoopa                  015 => 198' // 2 Beedrill                  018 => 200' // 2 Pidgeot                  080 => 202' // 2 Slowbro                  208 => 204' // 2 Steelix                  254 => 206' // 2 Sceptile                  260 => 208' // 2 Swampert                  302 => 210' // 2 Sableye                  319 => 212' // 2 Sharpedo                  323 => 214' // 2 Camerupt                  334 => 216' // 2 Altaria                  362 => 218' // 2 Glalie                  373 => 220' // 2 Salamence                  376 => 222' // 2 Metagross                  384 => 224' // 2 Rayquaza                  428 => 226' // 2 Lopunny                  475 => 228' // 2 Gallade                  531 => 230' // 2 Audino                  719 => 232' // 2 Diancie                  382 => 234' // 2 Kyogre                  383 => 236' // 2 Groudon                  493 => 238' // 18 Arceus                  649 => 256' // 5 Genesect                  676 => 261' // 10 Furfrou                  _ => GetDexFormIndexXY(species' formct)              };
Magic Number,PKHeX.Core,DexFormUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\DexFormUtil.cs,GetDexFormIndexORAS,The following statement contains a magic number: return species switch              {                  025 => 189' // 7 Pikachu                  720 => 196' // 2 Hoopa                  015 => 198' // 2 Beedrill                  018 => 200' // 2 Pidgeot                  080 => 202' // 2 Slowbro                  208 => 204' // 2 Steelix                  254 => 206' // 2 Sceptile                  260 => 208' // 2 Swampert                  302 => 210' // 2 Sableye                  319 => 212' // 2 Sharpedo                  323 => 214' // 2 Camerupt                  334 => 216' // 2 Altaria                  362 => 218' // 2 Glalie                  373 => 220' // 2 Salamence                  376 => 222' // 2 Metagross                  384 => 224' // 2 Rayquaza                  428 => 226' // 2 Lopunny                  475 => 228' // 2 Gallade                  531 => 230' // 2 Audino                  719 => 232' // 2 Diancie                  382 => 234' // 2 Kyogre                  383 => 236' // 2 Groudon                  493 => 238' // 18 Arceus                  649 => 256' // 5 Genesect                  676 => 261' // 10 Furfrou                  _ => GetDexFormIndexXY(species' formct)              };
Magic Number,PKHeX.Core,DexFormUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\DexFormUtil.cs,GetDexFormIndexORAS,The following statement contains a magic number: return species switch              {                  025 => 189' // 7 Pikachu                  720 => 196' // 2 Hoopa                  015 => 198' // 2 Beedrill                  018 => 200' // 2 Pidgeot                  080 => 202' // 2 Slowbro                  208 => 204' // 2 Steelix                  254 => 206' // 2 Sceptile                  260 => 208' // 2 Swampert                  302 => 210' // 2 Sableye                  319 => 212' // 2 Sharpedo                  323 => 214' // 2 Camerupt                  334 => 216' // 2 Altaria                  362 => 218' // 2 Glalie                  373 => 220' // 2 Salamence                  376 => 222' // 2 Metagross                  384 => 224' // 2 Rayquaza                  428 => 226' // 2 Lopunny                  475 => 228' // 2 Gallade                  531 => 230' // 2 Audino                  719 => 232' // 2 Diancie                  382 => 234' // 2 Kyogre                  383 => 236' // 2 Groudon                  493 => 238' // 18 Arceus                  649 => 256' // 5 Genesect                  676 => 261' // 10 Furfrou                  _ => GetDexFormIndexXY(species' formct)              };
Magic Number,PKHeX.Core,DexFormUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\DexFormUtil.cs,GetDexFormIndexORAS,The following statement contains a magic number: return species switch              {                  025 => 189' // 7 Pikachu                  720 => 196' // 2 Hoopa                  015 => 198' // 2 Beedrill                  018 => 200' // 2 Pidgeot                  080 => 202' // 2 Slowbro                  208 => 204' // 2 Steelix                  254 => 206' // 2 Sceptile                  260 => 208' // 2 Swampert                  302 => 210' // 2 Sableye                  319 => 212' // 2 Sharpedo                  323 => 214' // 2 Camerupt                  334 => 216' // 2 Altaria                  362 => 218' // 2 Glalie                  373 => 220' // 2 Salamence                  376 => 222' // 2 Metagross                  384 => 224' // 2 Rayquaza                  428 => 226' // 2 Lopunny                  475 => 228' // 2 Gallade                  531 => 230' // 2 Audino                  719 => 232' // 2 Diancie                  382 => 234' // 2 Kyogre                  383 => 236' // 2 Groudon                  493 => 238' // 18 Arceus                  649 => 256' // 5 Genesect                  676 => 261' // 10 Furfrou                  _ => GetDexFormIndexXY(species' formct)              };
Magic Number,PKHeX.Core,DexFormUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\DexFormUtil.cs,GetDexFormIndexORAS,The following statement contains a magic number: return species switch              {                  025 => 189' // 7 Pikachu                  720 => 196' // 2 Hoopa                  015 => 198' // 2 Beedrill                  018 => 200' // 2 Pidgeot                  080 => 202' // 2 Slowbro                  208 => 204' // 2 Steelix                  254 => 206' // 2 Sceptile                  260 => 208' // 2 Swampert                  302 => 210' // 2 Sableye                  319 => 212' // 2 Sharpedo                  323 => 214' // 2 Camerupt                  334 => 216' // 2 Altaria                  362 => 218' // 2 Glalie                  373 => 220' // 2 Salamence                  376 => 222' // 2 Metagross                  384 => 224' // 2 Rayquaza                  428 => 226' // 2 Lopunny                  475 => 228' // 2 Gallade                  531 => 230' // 2 Audino                  719 => 232' // 2 Diancie                  382 => 234' // 2 Kyogre                  383 => 236' // 2 Groudon                  493 => 238' // 18 Arceus                  649 => 256' // 5 Genesect                  676 => 261' // 10 Furfrou                  _ => GetDexFormIndexXY(species' formct)              };
Magic Number,PKHeX.Core,DexFormUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\DexFormUtil.cs,GetDexFormIndexORAS,The following statement contains a magic number: return species switch              {                  025 => 189' // 7 Pikachu                  720 => 196' // 2 Hoopa                  015 => 198' // 2 Beedrill                  018 => 200' // 2 Pidgeot                  080 => 202' // 2 Slowbro                  208 => 204' // 2 Steelix                  254 => 206' // 2 Sceptile                  260 => 208' // 2 Swampert                  302 => 210' // 2 Sableye                  319 => 212' // 2 Sharpedo                  323 => 214' // 2 Camerupt                  334 => 216' // 2 Altaria                  362 => 218' // 2 Glalie                  373 => 220' // 2 Salamence                  376 => 222' // 2 Metagross                  384 => 224' // 2 Rayquaza                  428 => 226' // 2 Lopunny                  475 => 228' // 2 Gallade                  531 => 230' // 2 Audino                  719 => 232' // 2 Diancie                  382 => 234' // 2 Kyogre                  383 => 236' // 2 Groudon                  493 => 238' // 18 Arceus                  649 => 256' // 5 Genesect                  676 => 261' // 10 Furfrou                  _ => GetDexFormIndexXY(species' formct)              };
Magic Number,PKHeX.Core,DexFormUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\DexFormUtil.cs,GetDexFormIndexORAS,The following statement contains a magic number: return species switch              {                  025 => 189' // 7 Pikachu                  720 => 196' // 2 Hoopa                  015 => 198' // 2 Beedrill                  018 => 200' // 2 Pidgeot                  080 => 202' // 2 Slowbro                  208 => 204' // 2 Steelix                  254 => 206' // 2 Sceptile                  260 => 208' // 2 Swampert                  302 => 210' // 2 Sableye                  319 => 212' // 2 Sharpedo                  323 => 214' // 2 Camerupt                  334 => 216' // 2 Altaria                  362 => 218' // 2 Glalie                  373 => 220' // 2 Salamence                  376 => 222' // 2 Metagross                  384 => 224' // 2 Rayquaza                  428 => 226' // 2 Lopunny                  475 => 228' // 2 Gallade                  531 => 230' // 2 Audino                  719 => 232' // 2 Diancie                  382 => 234' // 2 Kyogre                  383 => 236' // 2 Groudon                  493 => 238' // 18 Arceus                  649 => 256' // 5 Genesect                  676 => 261' // 10 Furfrou                  _ => GetDexFormIndexXY(species' formct)              };
Magic Number,PKHeX.Core,DexFormUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\DexFormUtil.cs,GetDexFormIndexORAS,The following statement contains a magic number: return species switch              {                  025 => 189' // 7 Pikachu                  720 => 196' // 2 Hoopa                  015 => 198' // 2 Beedrill                  018 => 200' // 2 Pidgeot                  080 => 202' // 2 Slowbro                  208 => 204' // 2 Steelix                  254 => 206' // 2 Sceptile                  260 => 208' // 2 Swampert                  302 => 210' // 2 Sableye                  319 => 212' // 2 Sharpedo                  323 => 214' // 2 Camerupt                  334 => 216' // 2 Altaria                  362 => 218' // 2 Glalie                  373 => 220' // 2 Salamence                  376 => 222' // 2 Metagross                  384 => 224' // 2 Rayquaza                  428 => 226' // 2 Lopunny                  475 => 228' // 2 Gallade                  531 => 230' // 2 Audino                  719 => 232' // 2 Diancie                  382 => 234' // 2 Kyogre                  383 => 236' // 2 Groudon                  493 => 238' // 18 Arceus                  649 => 256' // 5 Genesect                  676 => 261' // 10 Furfrou                  _ => GetDexFormIndexXY(species' formct)              };
Magic Number,PKHeX.Core,DexFormUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\DexFormUtil.cs,GetDexFormIndexORAS,The following statement contains a magic number: return species switch              {                  025 => 189' // 7 Pikachu                  720 => 196' // 2 Hoopa                  015 => 198' // 2 Beedrill                  018 => 200' // 2 Pidgeot                  080 => 202' // 2 Slowbro                  208 => 204' // 2 Steelix                  254 => 206' // 2 Sceptile                  260 => 208' // 2 Swampert                  302 => 210' // 2 Sableye                  319 => 212' // 2 Sharpedo                  323 => 214' // 2 Camerupt                  334 => 216' // 2 Altaria                  362 => 218' // 2 Glalie                  373 => 220' // 2 Salamence                  376 => 222' // 2 Metagross                  384 => 224' // 2 Rayquaza                  428 => 226' // 2 Lopunny                  475 => 228' // 2 Gallade                  531 => 230' // 2 Audino                  719 => 232' // 2 Diancie                  382 => 234' // 2 Kyogre                  383 => 236' // 2 Groudon                  493 => 238' // 18 Arceus                  649 => 256' // 5 Genesect                  676 => 261' // 10 Furfrou                  _ => GetDexFormIndexXY(species' formct)              };
Magic Number,PKHeX.Core,DexFormUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\DexFormUtil.cs,GetDexFormIndexORAS,The following statement contains a magic number: return species switch              {                  025 => 189' // 7 Pikachu                  720 => 196' // 2 Hoopa                  015 => 198' // 2 Beedrill                  018 => 200' // 2 Pidgeot                  080 => 202' // 2 Slowbro                  208 => 204' // 2 Steelix                  254 => 206' // 2 Sceptile                  260 => 208' // 2 Swampert                  302 => 210' // 2 Sableye                  319 => 212' // 2 Sharpedo                  323 => 214' // 2 Camerupt                  334 => 216' // 2 Altaria                  362 => 218' // 2 Glalie                  373 => 220' // 2 Salamence                  376 => 222' // 2 Metagross                  384 => 224' // 2 Rayquaza                  428 => 226' // 2 Lopunny                  475 => 228' // 2 Gallade                  531 => 230' // 2 Audino                  719 => 232' // 2 Diancie                  382 => 234' // 2 Kyogre                  383 => 236' // 2 Groudon                  493 => 238' // 18 Arceus                  649 => 256' // 5 Genesect                  676 => 261' // 10 Furfrou                  _ => GetDexFormIndexXY(species' formct)              };
Magic Number,PKHeX.Core,DexFormUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\DexFormUtil.cs,GetDexFormIndexORAS,The following statement contains a magic number: return species switch              {                  025 => 189' // 7 Pikachu                  720 => 196' // 2 Hoopa                  015 => 198' // 2 Beedrill                  018 => 200' // 2 Pidgeot                  080 => 202' // 2 Slowbro                  208 => 204' // 2 Steelix                  254 => 206' // 2 Sceptile                  260 => 208' // 2 Swampert                  302 => 210' // 2 Sableye                  319 => 212' // 2 Sharpedo                  323 => 214' // 2 Camerupt                  334 => 216' // 2 Altaria                  362 => 218' // 2 Glalie                  373 => 220' // 2 Salamence                  376 => 222' // 2 Metagross                  384 => 224' // 2 Rayquaza                  428 => 226' // 2 Lopunny                  475 => 228' // 2 Gallade                  531 => 230' // 2 Audino                  719 => 232' // 2 Diancie                  382 => 234' // 2 Kyogre                  383 => 236' // 2 Groudon                  493 => 238' // 18 Arceus                  649 => 256' // 5 Genesect                  676 => 261' // 10 Furfrou                  _ => GetDexFormIndexXY(species' formct)              };
Magic Number,PKHeX.Core,DexFormUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\DexFormUtil.cs,GetDexFormIndexORAS,The following statement contains a magic number: return species switch              {                  025 => 189' // 7 Pikachu                  720 => 196' // 2 Hoopa                  015 => 198' // 2 Beedrill                  018 => 200' // 2 Pidgeot                  080 => 202' // 2 Slowbro                  208 => 204' // 2 Steelix                  254 => 206' // 2 Sceptile                  260 => 208' // 2 Swampert                  302 => 210' // 2 Sableye                  319 => 212' // 2 Sharpedo                  323 => 214' // 2 Camerupt                  334 => 216' // 2 Altaria                  362 => 218' // 2 Glalie                  373 => 220' // 2 Salamence                  376 => 222' // 2 Metagross                  384 => 224' // 2 Rayquaza                  428 => 226' // 2 Lopunny                  475 => 228' // 2 Gallade                  531 => 230' // 2 Audino                  719 => 232' // 2 Diancie                  382 => 234' // 2 Kyogre                  383 => 236' // 2 Groudon                  493 => 238' // 18 Arceus                  649 => 256' // 5 Genesect                  676 => 261' // 10 Furfrou                  _ => GetDexFormIndexXY(species' formct)              };
Magic Number,PKHeX.Core,DexFormUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\DexFormUtil.cs,GetDexFormIndexORAS,The following statement contains a magic number: return species switch              {                  025 => 189' // 7 Pikachu                  720 => 196' // 2 Hoopa                  015 => 198' // 2 Beedrill                  018 => 200' // 2 Pidgeot                  080 => 202' // 2 Slowbro                  208 => 204' // 2 Steelix                  254 => 206' // 2 Sceptile                  260 => 208' // 2 Swampert                  302 => 210' // 2 Sableye                  319 => 212' // 2 Sharpedo                  323 => 214' // 2 Camerupt                  334 => 216' // 2 Altaria                  362 => 218' // 2 Glalie                  373 => 220' // 2 Salamence                  376 => 222' // 2 Metagross                  384 => 224' // 2 Rayquaza                  428 => 226' // 2 Lopunny                  475 => 228' // 2 Gallade                  531 => 230' // 2 Audino                  719 => 232' // 2 Diancie                  382 => 234' // 2 Kyogre                  383 => 236' // 2 Groudon                  493 => 238' // 18 Arceus                  649 => 256' // 5 Genesect                  676 => 261' // 10 Furfrou                  _ => GetDexFormIndexXY(species' formct)              };
Magic Number,PKHeX.Core,DexFormUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\DexFormUtil.cs,GetDexFormIndexORAS,The following statement contains a magic number: return species switch              {                  025 => 189' // 7 Pikachu                  720 => 196' // 2 Hoopa                  015 => 198' // 2 Beedrill                  018 => 200' // 2 Pidgeot                  080 => 202' // 2 Slowbro                  208 => 204' // 2 Steelix                  254 => 206' // 2 Sceptile                  260 => 208' // 2 Swampert                  302 => 210' // 2 Sableye                  319 => 212' // 2 Sharpedo                  323 => 214' // 2 Camerupt                  334 => 216' // 2 Altaria                  362 => 218' // 2 Glalie                  373 => 220' // 2 Salamence                  376 => 222' // 2 Metagross                  384 => 224' // 2 Rayquaza                  428 => 226' // 2 Lopunny                  475 => 228' // 2 Gallade                  531 => 230' // 2 Audino                  719 => 232' // 2 Diancie                  382 => 234' // 2 Kyogre                  383 => 236' // 2 Groudon                  493 => 238' // 18 Arceus                  649 => 256' // 5 Genesect                  676 => 261' // 10 Furfrou                  _ => GetDexFormIndexXY(species' formct)              };
Magic Number,PKHeX.Core,DexFormUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\DexFormUtil.cs,GetDexFormIndexORAS,The following statement contains a magic number: return species switch              {                  025 => 189' // 7 Pikachu                  720 => 196' // 2 Hoopa                  015 => 198' // 2 Beedrill                  018 => 200' // 2 Pidgeot                  080 => 202' // 2 Slowbro                  208 => 204' // 2 Steelix                  254 => 206' // 2 Sceptile                  260 => 208' // 2 Swampert                  302 => 210' // 2 Sableye                  319 => 212' // 2 Sharpedo                  323 => 214' // 2 Camerupt                  334 => 216' // 2 Altaria                  362 => 218' // 2 Glalie                  373 => 220' // 2 Salamence                  376 => 222' // 2 Metagross                  384 => 224' // 2 Rayquaza                  428 => 226' // 2 Lopunny                  475 => 228' // 2 Gallade                  531 => 230' // 2 Audino                  719 => 232' // 2 Diancie                  382 => 234' // 2 Kyogre                  383 => 236' // 2 Groudon                  493 => 238' // 18 Arceus                  649 => 256' // 5 Genesect                  676 => 261' // 10 Furfrou                  _ => GetDexFormIndexXY(species' formct)              };
Magic Number,PKHeX.Core,DexFormUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\DexFormUtil.cs,GetDexFormIndexORAS,The following statement contains a magic number: return species switch              {                  025 => 189' // 7 Pikachu                  720 => 196' // 2 Hoopa                  015 => 198' // 2 Beedrill                  018 => 200' // 2 Pidgeot                  080 => 202' // 2 Slowbro                  208 => 204' // 2 Steelix                  254 => 206' // 2 Sceptile                  260 => 208' // 2 Swampert                  302 => 210' // 2 Sableye                  319 => 212' // 2 Sharpedo                  323 => 214' // 2 Camerupt                  334 => 216' // 2 Altaria                  362 => 218' // 2 Glalie                  373 => 220' // 2 Salamence                  376 => 222' // 2 Metagross                  384 => 224' // 2 Rayquaza                  428 => 226' // 2 Lopunny                  475 => 228' // 2 Gallade                  531 => 230' // 2 Audino                  719 => 232' // 2 Diancie                  382 => 234' // 2 Kyogre                  383 => 236' // 2 Groudon                  493 => 238' // 18 Arceus                  649 => 256' // 5 Genesect                  676 => 261' // 10 Furfrou                  _ => GetDexFormIndexXY(species' formct)              };
Magic Number,PKHeX.Core,DexFormUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\DexFormUtil.cs,GetDexFormIndexORAS,The following statement contains a magic number: return species switch              {                  025 => 189' // 7 Pikachu                  720 => 196' // 2 Hoopa                  015 => 198' // 2 Beedrill                  018 => 200' // 2 Pidgeot                  080 => 202' // 2 Slowbro                  208 => 204' // 2 Steelix                  254 => 206' // 2 Sceptile                  260 => 208' // 2 Swampert                  302 => 210' // 2 Sableye                  319 => 212' // 2 Sharpedo                  323 => 214' // 2 Camerupt                  334 => 216' // 2 Altaria                  362 => 218' // 2 Glalie                  373 => 220' // 2 Salamence                  376 => 222' // 2 Metagross                  384 => 224' // 2 Rayquaza                  428 => 226' // 2 Lopunny                  475 => 228' // 2 Gallade                  531 => 230' // 2 Audino                  719 => 232' // 2 Diancie                  382 => 234' // 2 Kyogre                  383 => 236' // 2 Groudon                  493 => 238' // 18 Arceus                  649 => 256' // 5 Genesect                  676 => 261' // 10 Furfrou                  _ => GetDexFormIndexXY(species' formct)              };
Magic Number,PKHeX.Core,DexFormUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\DexFormUtil.cs,GetDexFormIndexORAS,The following statement contains a magic number: return species switch              {                  025 => 189' // 7 Pikachu                  720 => 196' // 2 Hoopa                  015 => 198' // 2 Beedrill                  018 => 200' // 2 Pidgeot                  080 => 202' // 2 Slowbro                  208 => 204' // 2 Steelix                  254 => 206' // 2 Sceptile                  260 => 208' // 2 Swampert                  302 => 210' // 2 Sableye                  319 => 212' // 2 Sharpedo                  323 => 214' // 2 Camerupt                  334 => 216' // 2 Altaria                  362 => 218' // 2 Glalie                  373 => 220' // 2 Salamence                  376 => 222' // 2 Metagross                  384 => 224' // 2 Rayquaza                  428 => 226' // 2 Lopunny                  475 => 228' // 2 Gallade                  531 => 230' // 2 Audino                  719 => 232' // 2 Diancie                  382 => 234' // 2 Kyogre                  383 => 236' // 2 Groudon                  493 => 238' // 18 Arceus                  649 => 256' // 5 Genesect                  676 => 261' // 10 Furfrou                  _ => GetDexFormIndexXY(species' formct)              };
Magic Number,PKHeX.Core,DexFormUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\DexFormUtil.cs,GetDexFormIndexORAS,The following statement contains a magic number: return species switch              {                  025 => 189' // 7 Pikachu                  720 => 196' // 2 Hoopa                  015 => 198' // 2 Beedrill                  018 => 200' // 2 Pidgeot                  080 => 202' // 2 Slowbro                  208 => 204' // 2 Steelix                  254 => 206' // 2 Sceptile                  260 => 208' // 2 Swampert                  302 => 210' // 2 Sableye                  319 => 212' // 2 Sharpedo                  323 => 214' // 2 Camerupt                  334 => 216' // 2 Altaria                  362 => 218' // 2 Glalie                  373 => 220' // 2 Salamence                  376 => 222' // 2 Metagross                  384 => 224' // 2 Rayquaza                  428 => 226' // 2 Lopunny                  475 => 228' // 2 Gallade                  531 => 230' // 2 Audino                  719 => 232' // 2 Diancie                  382 => 234' // 2 Kyogre                  383 => 236' // 2 Groudon                  493 => 238' // 18 Arceus                  649 => 256' // 5 Genesect                  676 => 261' // 10 Furfrou                  _ => GetDexFormIndexXY(species' formct)              };
Magic Number,PKHeX.Core,DexFormUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\DexFormUtil.cs,GetDexFormIndexORAS,The following statement contains a magic number: return species switch              {                  025 => 189' // 7 Pikachu                  720 => 196' // 2 Hoopa                  015 => 198' // 2 Beedrill                  018 => 200' // 2 Pidgeot                  080 => 202' // 2 Slowbro                  208 => 204' // 2 Steelix                  254 => 206' // 2 Sceptile                  260 => 208' // 2 Swampert                  302 => 210' // 2 Sableye                  319 => 212' // 2 Sharpedo                  323 => 214' // 2 Camerupt                  334 => 216' // 2 Altaria                  362 => 218' // 2 Glalie                  373 => 220' // 2 Salamence                  376 => 222' // 2 Metagross                  384 => 224' // 2 Rayquaza                  428 => 226' // 2 Lopunny                  475 => 228' // 2 Gallade                  531 => 230' // 2 Audino                  719 => 232' // 2 Diancie                  382 => 234' // 2 Kyogre                  383 => 236' // 2 Groudon                  493 => 238' // 18 Arceus                  649 => 256' // 5 Genesect                  676 => 261' // 10 Furfrou                  _ => GetDexFormIndexXY(species' formct)              };
Magic Number,PKHeX.Core,DexFormUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\DexFormUtil.cs,GetDexFormIndexORAS,The following statement contains a magic number: return species switch              {                  025 => 189' // 7 Pikachu                  720 => 196' // 2 Hoopa                  015 => 198' // 2 Beedrill                  018 => 200' // 2 Pidgeot                  080 => 202' // 2 Slowbro                  208 => 204' // 2 Steelix                  254 => 206' // 2 Sceptile                  260 => 208' // 2 Swampert                  302 => 210' // 2 Sableye                  319 => 212' // 2 Sharpedo                  323 => 214' // 2 Camerupt                  334 => 216' // 2 Altaria                  362 => 218' // 2 Glalie                  373 => 220' // 2 Salamence                  376 => 222' // 2 Metagross                  384 => 224' // 2 Rayquaza                  428 => 226' // 2 Lopunny                  475 => 228' // 2 Gallade                  531 => 230' // 2 Audino                  719 => 232' // 2 Diancie                  382 => 234' // 2 Kyogre                  383 => 236' // 2 Groudon                  493 => 238' // 18 Arceus                  649 => 256' // 5 Genesect                  676 => 261' // 10 Furfrou                  _ => GetDexFormIndexXY(species' formct)              };
Magic Number,PKHeX.Core,GCSaveUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\GCSaveUtil.cs,Decrypt,The following statement contains a magic number: var index = ofs + (i * 2);
Magic Number,PKHeX.Core,GCSaveUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\GCSaveUtil.cs,Decrypt,The following statement contains a magic number: output[index] = (byte)(val >> 8);
Magic Number,PKHeX.Core,GCSaveUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\GCSaveUtil.cs,Encrypt,The following statement contains a magic number: var index = ofs + (i * 2);
Magic Number,PKHeX.Core,GCSaveUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\GCSaveUtil.cs,Encrypt,The following statement contains a magic number: output[index] = (byte)(val >> 8);
Magic Number,PKHeX.Core,GCSaveUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\GCSaveUtil.cs,AdvanceKeys,The following statement contains a magic number: keys[2] += 0x17;
Magic Number,PKHeX.Core,GCSaveUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\GCSaveUtil.cs,AdvanceKeys,The following statement contains a magic number: keys[3] += 0x13;
Magic Number,PKHeX.Core,GCSaveUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\GCSaveUtil.cs,AdvanceKeys,The following statement contains a magic number: var _0 = (ushort)((keys[0] >> 00 & 0xf) | (keys[1] << 4 & 0xf0) | (keys[2] << 8 & 0xf00) | (keys[3] << 12 & 0xf000));
Magic Number,PKHeX.Core,GCSaveUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\GCSaveUtil.cs,AdvanceKeys,The following statement contains a magic number: var _0 = (ushort)((keys[0] >> 00 & 0xf) | (keys[1] << 4 & 0xf0) | (keys[2] << 8 & 0xf00) | (keys[3] << 12 & 0xf000));
Magic Number,PKHeX.Core,GCSaveUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\GCSaveUtil.cs,AdvanceKeys,The following statement contains a magic number: var _0 = (ushort)((keys[0] >> 00 & 0xf) | (keys[1] << 4 & 0xf0) | (keys[2] << 8 & 0xf00) | (keys[3] << 12 & 0xf000));
Magic Number,PKHeX.Core,GCSaveUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\GCSaveUtil.cs,AdvanceKeys,The following statement contains a magic number: var _0 = (ushort)((keys[0] >> 00 & 0xf) | (keys[1] << 4 & 0xf0) | (keys[2] << 8 & 0xf00) | (keys[3] << 12 & 0xf000));
Magic Number,PKHeX.Core,GCSaveUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\GCSaveUtil.cs,AdvanceKeys,The following statement contains a magic number: var _0 = (ushort)((keys[0] >> 00 & 0xf) | (keys[1] << 4 & 0xf0) | (keys[2] << 8 & 0xf00) | (keys[3] << 12 & 0xf000));
Magic Number,PKHeX.Core,GCSaveUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\GCSaveUtil.cs,AdvanceKeys,The following statement contains a magic number: var _1 = (ushort)((keys[0] >> 04 & 0xf) | (keys[1] << 0 & 0xf0) | (keys[2] << 4 & 0xf00) | (keys[3] << 08 & 0xf000));
Magic Number,PKHeX.Core,GCSaveUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\GCSaveUtil.cs,AdvanceKeys,The following statement contains a magic number: var _1 = (ushort)((keys[0] >> 04 & 0xf) | (keys[1] << 0 & 0xf0) | (keys[2] << 4 & 0xf00) | (keys[3] << 08 & 0xf000));
Magic Number,PKHeX.Core,GCSaveUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\GCSaveUtil.cs,AdvanceKeys,The following statement contains a magic number: var _1 = (ushort)((keys[0] >> 04 & 0xf) | (keys[1] << 0 & 0xf0) | (keys[2] << 4 & 0xf00) | (keys[3] << 08 & 0xf000));
Magic Number,PKHeX.Core,GCSaveUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\GCSaveUtil.cs,AdvanceKeys,The following statement contains a magic number: var _1 = (ushort)((keys[0] >> 04 & 0xf) | (keys[1] << 0 & 0xf0) | (keys[2] << 4 & 0xf00) | (keys[3] << 08 & 0xf000));
Magic Number,PKHeX.Core,GCSaveUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\GCSaveUtil.cs,AdvanceKeys,The following statement contains a magic number: var _1 = (ushort)((keys[0] >> 04 & 0xf) | (keys[1] << 0 & 0xf0) | (keys[2] << 4 & 0xf00) | (keys[3] << 08 & 0xf000));
Magic Number,PKHeX.Core,GCSaveUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\GCSaveUtil.cs,AdvanceKeys,The following statement contains a magic number: var _2 = (ushort)((keys[0] >> 08 & 0xf) | (keys[1] >> 4 & 0xf0) | (keys[2] >> 0 & 0xf00) | (keys[3] << 04 & 0xf000));
Magic Number,PKHeX.Core,GCSaveUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\GCSaveUtil.cs,AdvanceKeys,The following statement contains a magic number: var _2 = (ushort)((keys[0] >> 08 & 0xf) | (keys[1] >> 4 & 0xf0) | (keys[2] >> 0 & 0xf00) | (keys[3] << 04 & 0xf000));
Magic Number,PKHeX.Core,GCSaveUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\GCSaveUtil.cs,AdvanceKeys,The following statement contains a magic number: var _2 = (ushort)((keys[0] >> 08 & 0xf) | (keys[1] >> 4 & 0xf0) | (keys[2] >> 0 & 0xf00) | (keys[3] << 04 & 0xf000));
Magic Number,PKHeX.Core,GCSaveUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\GCSaveUtil.cs,AdvanceKeys,The following statement contains a magic number: var _2 = (ushort)((keys[0] >> 08 & 0xf) | (keys[1] >> 4 & 0xf0) | (keys[2] >> 0 & 0xf00) | (keys[3] << 04 & 0xf000));
Magic Number,PKHeX.Core,GCSaveUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\GCSaveUtil.cs,AdvanceKeys,The following statement contains a magic number: var _2 = (ushort)((keys[0] >> 08 & 0xf) | (keys[1] >> 4 & 0xf0) | (keys[2] >> 0 & 0xf00) | (keys[3] << 04 & 0xf000));
Magic Number,PKHeX.Core,GCSaveUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\GCSaveUtil.cs,AdvanceKeys,The following statement contains a magic number: var _3 = (ushort)((keys[0] >> 12 & 0xf) | (keys[1] >> 8 & 0xf0) | (keys[2] >> 4 & 0xf00) | (keys[3] << 00 & 0xf000));
Magic Number,PKHeX.Core,GCSaveUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\GCSaveUtil.cs,AdvanceKeys,The following statement contains a magic number: var _3 = (ushort)((keys[0] >> 12 & 0xf) | (keys[1] >> 8 & 0xf0) | (keys[2] >> 4 & 0xf00) | (keys[3] << 00 & 0xf000));
Magic Number,PKHeX.Core,GCSaveUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\GCSaveUtil.cs,AdvanceKeys,The following statement contains a magic number: var _3 = (ushort)((keys[0] >> 12 & 0xf) | (keys[1] >> 8 & 0xf0) | (keys[2] >> 4 & 0xf00) | (keys[3] << 00 & 0xf000));
Magic Number,PKHeX.Core,GCSaveUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\GCSaveUtil.cs,AdvanceKeys,The following statement contains a magic number: var _3 = (ushort)((keys[0] >> 12 & 0xf) | (keys[1] >> 8 & 0xf0) | (keys[2] >> 4 & 0xf00) | (keys[3] << 00 & 0xf000));
Magic Number,PKHeX.Core,GCSaveUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\GCSaveUtil.cs,AdvanceKeys,The following statement contains a magic number: var _3 = (ushort)((keys[0] >> 12 & 0xf) | (keys[1] >> 8 & 0xf0) | (keys[2] >> 4 & 0xf00) | (keys[3] << 00 & 0xf000));
Magic Number,PKHeX.Core,GCSaveUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\GCSaveUtil.cs,AdvanceKeys,The following statement contains a magic number: keys[2] = _2;
Magic Number,PKHeX.Core,GCSaveUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\GCSaveUtil.cs,AdvanceKeys,The following statement contains a magic number: keys[3] = _3;
Magic Number,PKHeX.Core,SaveExtensions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\SaveExtensions.cs,GetCompatiblePKM,The following statement contains a magic number: pk.Format < 3 && sav.Generation < 7
Magic Number,PKHeX.Core,SaveExtensions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\SaveExtensions.cs,GetCompatiblePKM,The following statement contains a magic number: pk.Format < 3 && sav.Generation < 7
Magic Number,PKHeX.Core,SaveUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\SaveUtil.cs,GetIsG1SAVU,The following statement contains a magic number: return IsG12ListValid(data' 0x2F2C' 20) && IsG12ListValid(data' 0x30C0' 20);
Magic Number,PKHeX.Core,SaveUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\SaveUtil.cs,GetIsG1SAVU,The following statement contains a magic number: return IsG12ListValid(data' 0x2F2C' 20) && IsG12ListValid(data' 0x30C0' 20);
Magic Number,PKHeX.Core,SaveUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\SaveUtil.cs,GetIsG1SAVJ,The following statement contains a magic number: return IsG12ListValid(data' 0x2ED5' 30) && IsG12ListValid(data' 0x302D' 30);
Magic Number,PKHeX.Core,SaveUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\SaveUtil.cs,GetIsG1SAVJ,The following statement contains a magic number: return IsG12ListValid(data' 0x2ED5' 30) && IsG12ListValid(data' 0x302D' 30);
Magic Number,PKHeX.Core,SaveUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\SaveUtil.cs,GetIsG2SAVU,The following statement contains a magic number: IsG12ListValid(data' 0x288A' 20) && IsG12ListValid(data' 0x2D6C' 20)
Magic Number,PKHeX.Core,SaveUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\SaveUtil.cs,GetIsG2SAVU,The following statement contains a magic number: IsG12ListValid(data' 0x288A' 20) && IsG12ListValid(data' 0x2D6C' 20)
Magic Number,PKHeX.Core,SaveUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\SaveUtil.cs,GetIsG2SAVU,The following statement contains a magic number: IsG12ListValid(data' 0x2865' 20) && IsG12ListValid(data' 0x2D10' 20)
Magic Number,PKHeX.Core,SaveUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\SaveUtil.cs,GetIsG2SAVU,The following statement contains a magic number: IsG12ListValid(data' 0x2865' 20) && IsG12ListValid(data' 0x2D10' 20)
Magic Number,PKHeX.Core,SaveUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\SaveUtil.cs,GetIsG2SAVJ,The following statement contains a magic number: !IsG12ListValid(data' 0x2D10' 30)
Magic Number,PKHeX.Core,SaveUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\SaveUtil.cs,GetIsG2SAVJ,The following statement contains a magic number: IsG12ListValid(data' 0x283E' 30)
Magic Number,PKHeX.Core,SaveUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\SaveUtil.cs,GetIsG2SAVJ,The following statement contains a magic number: IsG12ListValid(data' 0x281A' 30)
Magic Number,PKHeX.Core,SaveUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\SaveUtil.cs,GetIsG2SAVK,The following statement contains a magic number: IsG12ListValid(data' 0x2DAE' 20) && IsG12ListValid(data' 0x28CC' 20)
Magic Number,PKHeX.Core,SaveUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\SaveUtil.cs,GetIsG2SAVK,The following statement contains a magic number: IsG12ListValid(data' 0x2DAE' 20) && IsG12ListValid(data' 0x28CC' 20)
Magic Number,PKHeX.Core,SaveUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\SaveUtil.cs,GetIsG3SAV,The following statement contains a magic number: const int blockcount = 14;
Magic Number,PKHeX.Core,SaveUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\SaveUtil.cs,GetIsG3BOXSAV,The following statement contains a magic number: ushort CHK_B = BigEndian.ToUInt16(sav' ofs + 2);
Magic Number,PKHeX.Core,SaveUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\SaveUtil.cs,GetIsG3COLOSAV,The following statement contains a magic number: i < 3
Magic Number,PKHeX.Core,SaveUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\SaveUtil.cs,GetIsG3XDSAV,The following statement contains a magic number: i < 2
Magic Number,PKHeX.Core,SaveUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\SaveUtil.cs,GetBlankSAV,The following statement contains a magic number: SAV.TID = 12345;
Magic Number,PKHeX.Core,SaveUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\SaveUtil.cs,GetBlankSAV,The following statement contains a magic number: SAV.SID = 54321;
Magic Number,PKHeX.Core,SaveUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\SaveUtil.cs,GetBlankSAV,The following statement contains a magic number: SAV.Country = 49;
Magic Number,PKHeX.Core,SaveUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\SaveUtil.cs,GetBlankSAV,The following statement contains a magic number: SAV.SubRegion = 7;
Magic Number,PKHeX.Core,SaveUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\SaveUtil.cs,CheckHeaderFooter,The following statement contains a magic number: static bool IsGameMatchHeader(IEnumerable<string> headers' byte[] data) => headers.Contains(Encoding.ASCII.GetString(data' 0' 4));
Magic Number,PKHeX.Core,ArrayUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Util\ArrayUtil.cs,GitBitFlagArray,The following statement contains a magic number: result[i] = (data[offset + (i >> 3)] >> (i & 7) & 0x1) == 1;
Magic Number,PKHeX.Core,ArrayUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Util\ArrayUtil.cs,GitBitFlagArray,The following statement contains a magic number: result[i] = (data[offset + (i >> 3)] >> (i & 7) & 0x1) == 1;
Magic Number,PKHeX.Core,ArrayUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Util\ArrayUtil.cs,SetBitFlagArray,The following statement contains a magic number: var ofs = offset + (i >> 3);
Magic Number,PKHeX.Core,ArrayUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Util\ArrayUtil.cs,SetBitFlagArray,The following statement contains a magic number: var mask = (1 << (i & 7));
Magic Number,PKHeX.Core,ArrayUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Util\ArrayUtil.cs,SetBitFlagArray,The following statement contains a magic number: byte[] data = new byte[value.Length / 8];
Magic Number,PKHeX.Core,BigEndian,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Util\BigEndian.cs,ToUInt32,The following statement contains a magic number: val |= data[offset + 0] << 24;
Magic Number,PKHeX.Core,BigEndian,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Util\BigEndian.cs,ToUInt32,The following statement contains a magic number: val |= data[offset + 1] << 16;
Magic Number,PKHeX.Core,BigEndian,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Util\BigEndian.cs,ToUInt32,The following statement contains a magic number: val |= data[offset + 2] << 8;
Magic Number,PKHeX.Core,BigEndian,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Util\BigEndian.cs,ToUInt32,The following statement contains a magic number: val |= data[offset + 2] << 8;
Magic Number,PKHeX.Core,BigEndian,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Util\BigEndian.cs,ToUInt32,The following statement contains a magic number: val |= data[offset + 3];
Magic Number,PKHeX.Core,BigEndian,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Util\BigEndian.cs,ToUInt16,The following statement contains a magic number: val |= data[offset + 0] << 8;
Magic Number,PKHeX.Core,BigEndian,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Util\BigEndian.cs,ToInt32,The following statement contains a magic number: val |= data[offset + 0] << 24;
Magic Number,PKHeX.Core,BigEndian,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Util\BigEndian.cs,ToInt32,The following statement contains a magic number: val |= data[offset + 1] << 16;
Magic Number,PKHeX.Core,BigEndian,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Util\BigEndian.cs,ToInt32,The following statement contains a magic number: val |= data[offset + 2] << 8;
Magic Number,PKHeX.Core,BigEndian,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Util\BigEndian.cs,ToInt32,The following statement contains a magic number: val |= data[offset + 2] << 8;
Magic Number,PKHeX.Core,BigEndian,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Util\BigEndian.cs,ToInt32,The following statement contains a magic number: val |= data[offset + 3];
Magic Number,PKHeX.Core,BigEndian,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Util\BigEndian.cs,ToInt16,The following statement contains a magic number: val |= data[offset + 0] << 8;
Magic Number,PKHeX.Core,BigEndian,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Util\BigEndian.cs,BCDToInt32,The following statement contains a magic number: result *= 100;
Magic Number,PKHeX.Core,BigEndian,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Util\BigEndian.cs,BCDToInt32,The following statement contains a magic number: result += 10 * (p >> 4);
Magic Number,PKHeX.Core,BigEndian,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Util\BigEndian.cs,BCDToInt32,The following statement contains a magic number: result += 10 * (p >> 4);
Magic Number,PKHeX.Core,BigEndian,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Util\BigEndian.cs,Int32ToBCD,The following statement contains a magic number: int p = input%100;
Magic Number,PKHeX.Core,BigEndian,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Util\BigEndian.cs,Int32ToBCD,The following statement contains a magic number: input /= 100;
Magic Number,PKHeX.Core,BigEndian,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Util\BigEndian.cs,Int32ToBCD,The following statement contains a magic number: result[size - i - 1] = (byte)(p/10 << 4 | p%10);
Magic Number,PKHeX.Core,BigEndian,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Util\BigEndian.cs,Int32ToBCD,The following statement contains a magic number: result[size - i - 1] = (byte)(p/10 << 4 | p%10);
Magic Number,PKHeX.Core,BigEndian,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Util\BigEndian.cs,Int32ToBCD,The following statement contains a magic number: result[size - i - 1] = (byte)(p/10 << 4 | p%10);
Magic Number,PKHeX.Core,Util,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Util\DataUtil.cs,GetVariedCBListBall,The following statement contains a magic number: const int forcedTop = 3;
Magic Number,PKHeX.Core,Util,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Util\DataUtil.cs,GetVariedCBListBall,The following statement contains a magic number: var list = new List<ComboItem>(forcedTop + stringNum.Length)              {                  new ComboItem(inStrings[4]' (int)Ball.Poke)'                  new ComboItem(inStrings[3]' (int)Ball.Great)'                  new ComboItem(inStrings[2]' (int)Ball.Ultra)'              };
Magic Number,PKHeX.Core,Util,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Util\DataUtil.cs,GetVariedCBListBall,The following statement contains a magic number: var list = new List<ComboItem>(forcedTop + stringNum.Length)              {                  new ComboItem(inStrings[4]' (int)Ball.Poke)'                  new ComboItem(inStrings[3]' (int)Ball.Great)'                  new ComboItem(inStrings[2]' (int)Ball.Ultra)'              };
Magic Number,PKHeX.Core,Util,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Util\DataUtil.cs,GetVariedCBListBall,The following statement contains a magic number: var list = new List<ComboItem>(forcedTop + stringNum.Length)              {                  new ComboItem(inStrings[4]' (int)Ball.Poke)'                  new ComboItem(inStrings[3]' (int)Ball.Great)'                  new ComboItem(inStrings[2]' (int)Ball.Ultra)'              };
Magic Number,PKHeX.Core,Util,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Util\DataUtil.cs,IsDateValid,The following statement contains a magic number: return !(year <= 0 || year > DateTime.MaxValue.Year || month < 1 || month > 12 || day < 1 || day > DateTime.DaysInMonth(year' month));
Magic Number,PKHeX.Core,Util,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Util\DataUtil.cs,Rand32,The following statement contains a magic number: return (uint)Rand.Next(1 << 30) << 2 | (uint)Rand.Next(1 << 2);
Magic Number,PKHeX.Core,Util,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Util\DataUtil.cs,Rand32,The following statement contains a magic number: return (uint)Rand.Next(1 << 30) << 2 | (uint)Rand.Next(1 << 2);
Magic Number,PKHeX.Core,Util,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Util\DataUtil.cs,Rand32,The following statement contains a magic number: return (uint)Rand.Next(1 << 30) << 2 | (uint)Rand.Next(1 << 2);
Magic Number,PKHeX.Core,Util,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Util\DataUtil.cs,ToInt32,The following statement contains a magic number: result *= 10;
Magic Number,PKHeX.Core,Util,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Util\DataUtil.cs,ToUInt32,The following statement contains a magic number: result *= 10;
Magic Number,PKHeX.Core,Util,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Util\DataUtil.cs,GetHexValue,The following statement contains a magic number: result <<= 4;
Magic Number,PKHeX.Core,Util,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Util\DataUtil.cs,GetBytesFromHexString,The following statement contains a magic number: return Enumerable.Range(0' seed.Length)                  .Where(x => x % 2 == 0)                  .Select(x => Convert.ToByte(seed.Substring(x' 2)' 16))                  .Reverse().ToArray();
Magic Number,PKHeX.Core,Util,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Util\DataUtil.cs,GetBytesFromHexString,The following statement contains a magic number: return Enumerable.Range(0' seed.Length)                  .Where(x => x % 2 == 0)                  .Select(x => Convert.ToByte(seed.Substring(x' 2)' 16))                  .Reverse().ToArray();
Magic Number,PKHeX.Core,Util,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Util\DataUtil.cs,GetBytesFromHexString,The following statement contains a magic number: return Enumerable.Range(0' seed.Length)                  .Where(x => x % 2 == 0)                  .Select(x => Convert.ToByte(seed.Substring(x' 2)' 16))                  .Reverse().ToArray();
Magic Number,PKHeX.Core,FileUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Util\FileUtil.cs,TryGetPKM,The following statement contains a magic number: var format = PKX.GetPKMFormatFromExtension(ext' sav?.Generation ?? 6);
Magic Number,PKHeX.Core,FlagUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Util\FlagUtil.cs,GetFlag,The following statement contains a magic number: bitIndex &= 7;
Magic Number,PKHeX.Core,FlagUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Util\FlagUtil.cs,SetFlag,The following statement contains a magic number: bitIndex &= 7;
Magic Number,PKHeX,GBRestrictions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\GBRestrictions.cs,GetMinLevelLearnMoveG1,The following statement contains a magic number: result[i] = MoveLevelUp.GetIsLevelUp1(species' moves[i]' 100' 0' 0).Level;
Magic Number,PKHeX,GBRestrictions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\GBRestrictions.cs,GetExclusiveMovesG1,The following statement contains a magic number: var moves1 = MoveLevelUp.GetMovesLevelUp1(species1' 0' 1' 100);
Magic Number,PKHeX,GBRestrictions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\GBRestrictions.cs,GetExclusiveMovesG1,The following statement contains a magic number: var moves2 = MoveLevelUp.GetMovesLevelUp1(species2' 0' 1' 100);
Magic Number,PKHeX,GBRestrictions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\GBRestrictions.cs,GetIncompatibleEvolutionMoves,The following statement contains a magic number: switch (pkm.Species)              {                  case (int)Species.Nidoking when moves.Contains(31) && moves.Contains(37):                      // Nidoking learns Thrash at level 23                      // Nidorino learns Fury Attack at level 36' Nidoran♂ at level 30                      // Other moves are either learned by Nidoran♂ up to level 23 or by TM                      incompatible_current = new[] { 31 };                      incompatible_previous = new[] { 37 };                      previousspecies = 33;                      return;                    case (int)Species.Exeggutor when moves.Contains(23) && moves.Any(m => G1Exeggcute_IncompatibleMoves.Contains(moves[m])):                      // Exeggutor learns stomp at level 28                      // Exeggcute learns Stun Spore at 32' PoisonPowder at 37 and Sleep Powder at 48                      incompatible_current = new[] { 23 };                      incompatible_previous = G1Exeggcute_IncompatibleMoves;                      previousspecies = 103;                      return;                    case (int)Species.Vaporeon:                  case (int)Species.Jolteon:                  case (int)Species.Flareon:                      incompatible_previous = new List<int>();                      incompatible_current = new List<int>();                      previousspecies = 133;                      var ExclusiveMoves = GetExclusiveMovesG1((int)Species.Eevee' pkm.Species' tmhm' moves);                      var EeveeLevels = GetMinLevelLearnMoveG1((int)Species.Eevee' ExclusiveMoves[0]);                      var EvoLevels = GetMaxLevelLearnMoveG1(pkm.Species' ExclusiveMoves[1]);                        for (int i = 0; i < ExclusiveMoves[0].Count; i++)                      {                          // There is a evolution move with a lower level that current eevee move                          if (EvoLevels.Any(ev => ev < EeveeLevels[i]))                              incompatible_previous.Add(ExclusiveMoves[0][i]);                      }                      for (int i = 0; i < ExclusiveMoves[1].Count; i++)                      {                          // There is a eevee move with a greather level that current evolution move                          if (EeveeLevels.Any(ev => ev > EvoLevels[i]))                              incompatible_current.Add(ExclusiveMoves[1][i]);                      }                      return;              }
Magic Number,PKHeX,GBRestrictions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\GBRestrictions.cs,GetIncompatibleEvolutionMoves,The following statement contains a magic number: switch (pkm.Species)              {                  case (int)Species.Nidoking when moves.Contains(31) && moves.Contains(37):                      // Nidoking learns Thrash at level 23                      // Nidorino learns Fury Attack at level 36' Nidoran♂ at level 30                      // Other moves are either learned by Nidoran♂ up to level 23 or by TM                      incompatible_current = new[] { 31 };                      incompatible_previous = new[] { 37 };                      previousspecies = 33;                      return;                    case (int)Species.Exeggutor when moves.Contains(23) && moves.Any(m => G1Exeggcute_IncompatibleMoves.Contains(moves[m])):                      // Exeggutor learns stomp at level 28                      // Exeggcute learns Stun Spore at 32' PoisonPowder at 37 and Sleep Powder at 48                      incompatible_current = new[] { 23 };                      incompatible_previous = G1Exeggcute_IncompatibleMoves;                      previousspecies = 103;                      return;                    case (int)Species.Vaporeon:                  case (int)Species.Jolteon:                  case (int)Species.Flareon:                      incompatible_previous = new List<int>();                      incompatible_current = new List<int>();                      previousspecies = 133;                      var ExclusiveMoves = GetExclusiveMovesG1((int)Species.Eevee' pkm.Species' tmhm' moves);                      var EeveeLevels = GetMinLevelLearnMoveG1((int)Species.Eevee' ExclusiveMoves[0]);                      var EvoLevels = GetMaxLevelLearnMoveG1(pkm.Species' ExclusiveMoves[1]);                        for (int i = 0; i < ExclusiveMoves[0].Count; i++)                      {                          // There is a evolution move with a lower level that current eevee move                          if (EvoLevels.Any(ev => ev < EeveeLevels[i]))                              incompatible_previous.Add(ExclusiveMoves[0][i]);                      }                      for (int i = 0; i < ExclusiveMoves[1].Count; i++)                      {                          // There is a eevee move with a greather level that current evolution move                          if (EeveeLevels.Any(ev => ev > EvoLevels[i]))                              incompatible_current.Add(ExclusiveMoves[1][i]);                      }                      return;              }
Magic Number,PKHeX,GBRestrictions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\GBRestrictions.cs,GetIncompatibleEvolutionMoves,The following statement contains a magic number: switch (pkm.Species)              {                  case (int)Species.Nidoking when moves.Contains(31) && moves.Contains(37):                      // Nidoking learns Thrash at level 23                      // Nidorino learns Fury Attack at level 36' Nidoran♂ at level 30                      // Other moves are either learned by Nidoran♂ up to level 23 or by TM                      incompatible_current = new[] { 31 };                      incompatible_previous = new[] { 37 };                      previousspecies = 33;                      return;                    case (int)Species.Exeggutor when moves.Contains(23) && moves.Any(m => G1Exeggcute_IncompatibleMoves.Contains(moves[m])):                      // Exeggutor learns stomp at level 28                      // Exeggcute learns Stun Spore at 32' PoisonPowder at 37 and Sleep Powder at 48                      incompatible_current = new[] { 23 };                      incompatible_previous = G1Exeggcute_IncompatibleMoves;                      previousspecies = 103;                      return;                    case (int)Species.Vaporeon:                  case (int)Species.Jolteon:                  case (int)Species.Flareon:                      incompatible_previous = new List<int>();                      incompatible_current = new List<int>();                      previousspecies = 133;                      var ExclusiveMoves = GetExclusiveMovesG1((int)Species.Eevee' pkm.Species' tmhm' moves);                      var EeveeLevels = GetMinLevelLearnMoveG1((int)Species.Eevee' ExclusiveMoves[0]);                      var EvoLevels = GetMaxLevelLearnMoveG1(pkm.Species' ExclusiveMoves[1]);                        for (int i = 0; i < ExclusiveMoves[0].Count; i++)                      {                          // There is a evolution move with a lower level that current eevee move                          if (EvoLevels.Any(ev => ev < EeveeLevels[i]))                              incompatible_previous.Add(ExclusiveMoves[0][i]);                      }                      for (int i = 0; i < ExclusiveMoves[1].Count; i++)                      {                          // There is a eevee move with a greather level that current evolution move                          if (EeveeLevels.Any(ev => ev > EvoLevels[i]))                              incompatible_current.Add(ExclusiveMoves[1][i]);                      }                      return;              }
Magic Number,PKHeX,GBRestrictions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\GBRestrictions.cs,GetIncompatibleEvolutionMoves,The following statement contains a magic number: switch (pkm.Species)              {                  case (int)Species.Nidoking when moves.Contains(31) && moves.Contains(37):                      // Nidoking learns Thrash at level 23                      // Nidorino learns Fury Attack at level 36' Nidoran♂ at level 30                      // Other moves are either learned by Nidoran♂ up to level 23 or by TM                      incompatible_current = new[] { 31 };                      incompatible_previous = new[] { 37 };                      previousspecies = 33;                      return;                    case (int)Species.Exeggutor when moves.Contains(23) && moves.Any(m => G1Exeggcute_IncompatibleMoves.Contains(moves[m])):                      // Exeggutor learns stomp at level 28                      // Exeggcute learns Stun Spore at 32' PoisonPowder at 37 and Sleep Powder at 48                      incompatible_current = new[] { 23 };                      incompatible_previous = G1Exeggcute_IncompatibleMoves;                      previousspecies = 103;                      return;                    case (int)Species.Vaporeon:                  case (int)Species.Jolteon:                  case (int)Species.Flareon:                      incompatible_previous = new List<int>();                      incompatible_current = new List<int>();                      previousspecies = 133;                      var ExclusiveMoves = GetExclusiveMovesG1((int)Species.Eevee' pkm.Species' tmhm' moves);                      var EeveeLevels = GetMinLevelLearnMoveG1((int)Species.Eevee' ExclusiveMoves[0]);                      var EvoLevels = GetMaxLevelLearnMoveG1(pkm.Species' ExclusiveMoves[1]);                        for (int i = 0; i < ExclusiveMoves[0].Count; i++)                      {                          // There is a evolution move with a lower level that current eevee move                          if (EvoLevels.Any(ev => ev < EeveeLevels[i]))                              incompatible_previous.Add(ExclusiveMoves[0][i]);                      }                      for (int i = 0; i < ExclusiveMoves[1].Count; i++)                      {                          // There is a eevee move with a greather level that current evolution move                          if (EeveeLevels.Any(ev => ev > EvoLevels[i]))                              incompatible_current.Add(ExclusiveMoves[1][i]);                      }                      return;              }
Magic Number,PKHeX,GBRestrictions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\GBRestrictions.cs,GetIncompatibleEvolutionMoves,The following statement contains a magic number: switch (pkm.Species)              {                  case (int)Species.Nidoking when moves.Contains(31) && moves.Contains(37):                      // Nidoking learns Thrash at level 23                      // Nidorino learns Fury Attack at level 36' Nidoran♂ at level 30                      // Other moves are either learned by Nidoran♂ up to level 23 or by TM                      incompatible_current = new[] { 31 };                      incompatible_previous = new[] { 37 };                      previousspecies = 33;                      return;                    case (int)Species.Exeggutor when moves.Contains(23) && moves.Any(m => G1Exeggcute_IncompatibleMoves.Contains(moves[m])):                      // Exeggutor learns stomp at level 28                      // Exeggcute learns Stun Spore at 32' PoisonPowder at 37 and Sleep Powder at 48                      incompatible_current = new[] { 23 };                      incompatible_previous = G1Exeggcute_IncompatibleMoves;                      previousspecies = 103;                      return;                    case (int)Species.Vaporeon:                  case (int)Species.Jolteon:                  case (int)Species.Flareon:                      incompatible_previous = new List<int>();                      incompatible_current = new List<int>();                      previousspecies = 133;                      var ExclusiveMoves = GetExclusiveMovesG1((int)Species.Eevee' pkm.Species' tmhm' moves);                      var EeveeLevels = GetMinLevelLearnMoveG1((int)Species.Eevee' ExclusiveMoves[0]);                      var EvoLevels = GetMaxLevelLearnMoveG1(pkm.Species' ExclusiveMoves[1]);                        for (int i = 0; i < ExclusiveMoves[0].Count; i++)                      {                          // There is a evolution move with a lower level that current eevee move                          if (EvoLevels.Any(ev => ev < EeveeLevels[i]))                              incompatible_previous.Add(ExclusiveMoves[0][i]);                      }                      for (int i = 0; i < ExclusiveMoves[1].Count; i++)                      {                          // There is a eevee move with a greather level that current evolution move                          if (EeveeLevels.Any(ev => ev > EvoLevels[i]))                              incompatible_current.Add(ExclusiveMoves[1][i]);                      }                      return;              }
Magic Number,PKHeX,GBRestrictions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\GBRestrictions.cs,GetIncompatibleEvolutionMoves,The following statement contains a magic number: switch (pkm.Species)              {                  case (int)Species.Nidoking when moves.Contains(31) && moves.Contains(37):                      // Nidoking learns Thrash at level 23                      // Nidorino learns Fury Attack at level 36' Nidoran♂ at level 30                      // Other moves are either learned by Nidoran♂ up to level 23 or by TM                      incompatible_current = new[] { 31 };                      incompatible_previous = new[] { 37 };                      previousspecies = 33;                      return;                    case (int)Species.Exeggutor when moves.Contains(23) && moves.Any(m => G1Exeggcute_IncompatibleMoves.Contains(moves[m])):                      // Exeggutor learns stomp at level 28                      // Exeggcute learns Stun Spore at 32' PoisonPowder at 37 and Sleep Powder at 48                      incompatible_current = new[] { 23 };                      incompatible_previous = G1Exeggcute_IncompatibleMoves;                      previousspecies = 103;                      return;                    case (int)Species.Vaporeon:                  case (int)Species.Jolteon:                  case (int)Species.Flareon:                      incompatible_previous = new List<int>();                      incompatible_current = new List<int>();                      previousspecies = 133;                      var ExclusiveMoves = GetExclusiveMovesG1((int)Species.Eevee' pkm.Species' tmhm' moves);                      var EeveeLevels = GetMinLevelLearnMoveG1((int)Species.Eevee' ExclusiveMoves[0]);                      var EvoLevels = GetMaxLevelLearnMoveG1(pkm.Species' ExclusiveMoves[1]);                        for (int i = 0; i < ExclusiveMoves[0].Count; i++)                      {                          // There is a evolution move with a lower level that current eevee move                          if (EvoLevels.Any(ev => ev < EeveeLevels[i]))                              incompatible_previous.Add(ExclusiveMoves[0][i]);                      }                      for (int i = 0; i < ExclusiveMoves[1].Count; i++)                      {                          // There is a eevee move with a greather level that current evolution move                          if (EeveeLevels.Any(ev => ev > EvoLevels[i]))                              incompatible_current.Add(ExclusiveMoves[1][i]);                      }                      return;              }
Magic Number,PKHeX,GBRestrictions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\GBRestrictions.cs,GetIncompatibleEvolutionMoves,The following statement contains a magic number: switch (pkm.Species)              {                  case (int)Species.Nidoking when moves.Contains(31) && moves.Contains(37):                      // Nidoking learns Thrash at level 23                      // Nidorino learns Fury Attack at level 36' Nidoran♂ at level 30                      // Other moves are either learned by Nidoran♂ up to level 23 or by TM                      incompatible_current = new[] { 31 };                      incompatible_previous = new[] { 37 };                      previousspecies = 33;                      return;                    case (int)Species.Exeggutor when moves.Contains(23) && moves.Any(m => G1Exeggcute_IncompatibleMoves.Contains(moves[m])):                      // Exeggutor learns stomp at level 28                      // Exeggcute learns Stun Spore at 32' PoisonPowder at 37 and Sleep Powder at 48                      incompatible_current = new[] { 23 };                      incompatible_previous = G1Exeggcute_IncompatibleMoves;                      previousspecies = 103;                      return;                    case (int)Species.Vaporeon:                  case (int)Species.Jolteon:                  case (int)Species.Flareon:                      incompatible_previous = new List<int>();                      incompatible_current = new List<int>();                      previousspecies = 133;                      var ExclusiveMoves = GetExclusiveMovesG1((int)Species.Eevee' pkm.Species' tmhm' moves);                      var EeveeLevels = GetMinLevelLearnMoveG1((int)Species.Eevee' ExclusiveMoves[0]);                      var EvoLevels = GetMaxLevelLearnMoveG1(pkm.Species' ExclusiveMoves[1]);                        for (int i = 0; i < ExclusiveMoves[0].Count; i++)                      {                          // There is a evolution move with a lower level that current eevee move                          if (EvoLevels.Any(ev => ev < EeveeLevels[i]))                              incompatible_previous.Add(ExclusiveMoves[0][i]);                      }                      for (int i = 0; i < ExclusiveMoves[1].Count; i++)                      {                          // There is a eevee move with a greather level that current evolution move                          if (EeveeLevels.Any(ev => ev > EvoLevels[i]))                              incompatible_current.Add(ExclusiveMoves[1][i]);                      }                      return;              }
Magic Number,PKHeX,GBRestrictions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\GBRestrictions.cs,GetIncompatibleEvolutionMoves,The following statement contains a magic number: switch (pkm.Species)              {                  case (int)Species.Nidoking when moves.Contains(31) && moves.Contains(37):                      // Nidoking learns Thrash at level 23                      // Nidorino learns Fury Attack at level 36' Nidoran♂ at level 30                      // Other moves are either learned by Nidoran♂ up to level 23 or by TM                      incompatible_current = new[] { 31 };                      incompatible_previous = new[] { 37 };                      previousspecies = 33;                      return;                    case (int)Species.Exeggutor when moves.Contains(23) && moves.Any(m => G1Exeggcute_IncompatibleMoves.Contains(moves[m])):                      // Exeggutor learns stomp at level 28                      // Exeggcute learns Stun Spore at 32' PoisonPowder at 37 and Sleep Powder at 48                      incompatible_current = new[] { 23 };                      incompatible_previous = G1Exeggcute_IncompatibleMoves;                      previousspecies = 103;                      return;                    case (int)Species.Vaporeon:                  case (int)Species.Jolteon:                  case (int)Species.Flareon:                      incompatible_previous = new List<int>();                      incompatible_current = new List<int>();                      previousspecies = 133;                      var ExclusiveMoves = GetExclusiveMovesG1((int)Species.Eevee' pkm.Species' tmhm' moves);                      var EeveeLevels = GetMinLevelLearnMoveG1((int)Species.Eevee' ExclusiveMoves[0]);                      var EvoLevels = GetMaxLevelLearnMoveG1(pkm.Species' ExclusiveMoves[1]);                        for (int i = 0; i < ExclusiveMoves[0].Count; i++)                      {                          // There is a evolution move with a lower level that current eevee move                          if (EvoLevels.Any(ev => ev < EeveeLevels[i]))                              incompatible_previous.Add(ExclusiveMoves[0][i]);                      }                      for (int i = 0; i < ExclusiveMoves[1].Count; i++)                      {                          // There is a eevee move with a greather level that current evolution move                          if (EeveeLevels.Any(ev => ev > EvoLevels[i]))                              incompatible_current.Add(ExclusiveMoves[1][i]);                      }                      return;              }
Magic Number,PKHeX,GBRestrictions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\GBRestrictions.cs,GetIncompatibleEvolutionMoves,The following statement contains a magic number: switch (pkm.Species)              {                  case (int)Species.Nidoking when moves.Contains(31) && moves.Contains(37):                      // Nidoking learns Thrash at level 23                      // Nidorino learns Fury Attack at level 36' Nidoran♂ at level 30                      // Other moves are either learned by Nidoran♂ up to level 23 or by TM                      incompatible_current = new[] { 31 };                      incompatible_previous = new[] { 37 };                      previousspecies = 33;                      return;                    case (int)Species.Exeggutor when moves.Contains(23) && moves.Any(m => G1Exeggcute_IncompatibleMoves.Contains(moves[m])):                      // Exeggutor learns stomp at level 28                      // Exeggcute learns Stun Spore at 32' PoisonPowder at 37 and Sleep Powder at 48                      incompatible_current = new[] { 23 };                      incompatible_previous = G1Exeggcute_IncompatibleMoves;                      previousspecies = 103;                      return;                    case (int)Species.Vaporeon:                  case (int)Species.Jolteon:                  case (int)Species.Flareon:                      incompatible_previous = new List<int>();                      incompatible_current = new List<int>();                      previousspecies = 133;                      var ExclusiveMoves = GetExclusiveMovesG1((int)Species.Eevee' pkm.Species' tmhm' moves);                      var EeveeLevels = GetMinLevelLearnMoveG1((int)Species.Eevee' ExclusiveMoves[0]);                      var EvoLevels = GetMaxLevelLearnMoveG1(pkm.Species' ExclusiveMoves[1]);                        for (int i = 0; i < ExclusiveMoves[0].Count; i++)                      {                          // There is a evolution move with a lower level that current eevee move                          if (EvoLevels.Any(ev => ev < EeveeLevels[i]))                              incompatible_previous.Add(ExclusiveMoves[0][i]);                      }                      for (int i = 0; i < ExclusiveMoves[1].Count; i++)                      {                          // There is a eevee move with a greather level that current evolution move                          if (EeveeLevels.Any(ev => ev > EvoLevels[i]))                              incompatible_current.Add(ExclusiveMoves[1][i]);                      }                      return;              }
Magic Number,PKHeX,GBRestrictions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\GBRestrictions.cs,GetRequiredMoveCount,The following statement contains a magic number: return 4;
Magic Number,PKHeX,GBRestrictions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\GBRestrictions.cs,GetRequiredMoveCount,The following statement contains a magic number: required >= 4
Magic Number,PKHeX,GBRestrictions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\GBRestrictions.cs,GetRequiredMoveCount,The following statement contains a magic number: return Math.Min(4' required);
Magic Number,PKHeX,GBRestrictions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\GBRestrictions.cs,GetRequiredMoveSlotsRegular,The following statement contains a magic number: (species == (int)Species.Metapod || species == (int)Species.Butterfree) && catch_rate == 120
Magic Number,PKHeX,GBRestrictions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\GBRestrictions.cs,GetRequiredMoveSlotsRegular,The following statement contains a magic number: species == (int)Species.Beedrill && catch_rate == 45
Magic Number,PKHeX,GBRestrictions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\GBRestrictions.cs,GetRequiredMoveSlotsRegular,The following statement contains a magic number: (species == (int)Species.Kakuna || species == (int)Species.Beedrill) && (catch_rate == 45 || catch_rate == 120)
Magic Number,PKHeX,GBRestrictions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\GBRestrictions.cs,GetRequiredMoveSlotsRegular,The following statement contains a magic number: (species == (int)Species.Kakuna || species == (int)Species.Beedrill) && (catch_rate == 45 || catch_rate == 120)
Magic Number,PKHeX,GBRestrictions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\GBRestrictions.cs,GetRequiredMoveSlotsRegular,The following statement contains a magic number: return IsMoveCountRequired3(species' pk.CurrentLevel' moves) ? 3 : 0;
Magic Number,PKHeX,GBRestrictions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\GBRestrictions.cs,IsMoveCountRequired3,The following statement contains a magic number: switch (species)              {                  case (int)Species.Pidgeotto: return level < 21 && !moves.Contains(018); // Pidgeotto without Whirlwind                  case (int)Species.Sandslash: return level < 27 && !moves.Contains(040); // Sandslash without Poison Sting                  case (int)Species.Parasect:  return level < 30 && !moves.Contains(147); // Parasect without Spore                  case (int)Species.Golduck:   return level < 39 && !moves.Contains(093); // Golduck without Confusion                  case (int)Species.Dewgong:   return level < 44 && !moves.Contains(156); // Dewgong without Rest                  case (int)Species.Haunter:                  case (int)Species.Gengar:    return level < 29 && !moves.Contains(095); // Haunter/Gengar without Hypnosis                  case (int)Species.Weezing:   return level < 39 && !moves.Contains(108); // Weezing without Smoke Screen                  default: return false;              }
Magic Number,PKHeX,GBRestrictions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\GBRestrictions.cs,IsMoveCountRequired3,The following statement contains a magic number: switch (species)              {                  case (int)Species.Pidgeotto: return level < 21 && !moves.Contains(018); // Pidgeotto without Whirlwind                  case (int)Species.Sandslash: return level < 27 && !moves.Contains(040); // Sandslash without Poison Sting                  case (int)Species.Parasect:  return level < 30 && !moves.Contains(147); // Parasect without Spore                  case (int)Species.Golduck:   return level < 39 && !moves.Contains(093); // Golduck without Confusion                  case (int)Species.Dewgong:   return level < 44 && !moves.Contains(156); // Dewgong without Rest                  case (int)Species.Haunter:                  case (int)Species.Gengar:    return level < 29 && !moves.Contains(095); // Haunter/Gengar without Hypnosis                  case (int)Species.Weezing:   return level < 39 && !moves.Contains(108); // Weezing without Smoke Screen                  default: return false;              }
Magic Number,PKHeX,GBRestrictions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\GBRestrictions.cs,IsMoveCountRequired3,The following statement contains a magic number: switch (species)              {                  case (int)Species.Pidgeotto: return level < 21 && !moves.Contains(018); // Pidgeotto without Whirlwind                  case (int)Species.Sandslash: return level < 27 && !moves.Contains(040); // Sandslash without Poison Sting                  case (int)Species.Parasect:  return level < 30 && !moves.Contains(147); // Parasect without Spore                  case (int)Species.Golduck:   return level < 39 && !moves.Contains(093); // Golduck without Confusion                  case (int)Species.Dewgong:   return level < 44 && !moves.Contains(156); // Dewgong without Rest                  case (int)Species.Haunter:                  case (int)Species.Gengar:    return level < 29 && !moves.Contains(095); // Haunter/Gengar without Hypnosis                  case (int)Species.Weezing:   return level < 39 && !moves.Contains(108); // Weezing without Smoke Screen                  default: return false;              }
Magic Number,PKHeX,GBRestrictions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\GBRestrictions.cs,IsMoveCountRequired3,The following statement contains a magic number: switch (species)              {                  case (int)Species.Pidgeotto: return level < 21 && !moves.Contains(018); // Pidgeotto without Whirlwind                  case (int)Species.Sandslash: return level < 27 && !moves.Contains(040); // Sandslash without Poison Sting                  case (int)Species.Parasect:  return level < 30 && !moves.Contains(147); // Parasect without Spore                  case (int)Species.Golduck:   return level < 39 && !moves.Contains(093); // Golduck without Confusion                  case (int)Species.Dewgong:   return level < 44 && !moves.Contains(156); // Dewgong without Rest                  case (int)Species.Haunter:                  case (int)Species.Gengar:    return level < 29 && !moves.Contains(095); // Haunter/Gengar without Hypnosis                  case (int)Species.Weezing:   return level < 39 && !moves.Contains(108); // Weezing without Smoke Screen                  default: return false;              }
Magic Number,PKHeX,GBRestrictions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\GBRestrictions.cs,IsMoveCountRequired3,The following statement contains a magic number: switch (species)              {                  case (int)Species.Pidgeotto: return level < 21 && !moves.Contains(018); // Pidgeotto without Whirlwind                  case (int)Species.Sandslash: return level < 27 && !moves.Contains(040); // Sandslash without Poison Sting                  case (int)Species.Parasect:  return level < 30 && !moves.Contains(147); // Parasect without Spore                  case (int)Species.Golduck:   return level < 39 && !moves.Contains(093); // Golduck without Confusion                  case (int)Species.Dewgong:   return level < 44 && !moves.Contains(156); // Dewgong without Rest                  case (int)Species.Haunter:                  case (int)Species.Gengar:    return level < 29 && !moves.Contains(095); // Haunter/Gengar without Hypnosis                  case (int)Species.Weezing:   return level < 39 && !moves.Contains(108); // Weezing without Smoke Screen                  default: return false;              }
Magic Number,PKHeX,GBRestrictions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\GBRestrictions.cs,IsMoveCountRequired3,The following statement contains a magic number: switch (species)              {                  case (int)Species.Pidgeotto: return level < 21 && !moves.Contains(018); // Pidgeotto without Whirlwind                  case (int)Species.Sandslash: return level < 27 && !moves.Contains(040); // Sandslash without Poison Sting                  case (int)Species.Parasect:  return level < 30 && !moves.Contains(147); // Parasect without Spore                  case (int)Species.Golduck:   return level < 39 && !moves.Contains(093); // Golduck without Confusion                  case (int)Species.Dewgong:   return level < 44 && !moves.Contains(156); // Dewgong without Rest                  case (int)Species.Haunter:                  case (int)Species.Gengar:    return level < 29 && !moves.Contains(095); // Haunter/Gengar without Hypnosis                  case (int)Species.Weezing:   return level < 39 && !moves.Contains(108); // Weezing without Smoke Screen                  default: return false;              }
Magic Number,PKHeX,GBRestrictions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\GBRestrictions.cs,IsMoveCountRequired3,The following statement contains a magic number: switch (species)              {                  case (int)Species.Pidgeotto: return level < 21 && !moves.Contains(018); // Pidgeotto without Whirlwind                  case (int)Species.Sandslash: return level < 27 && !moves.Contains(040); // Sandslash without Poison Sting                  case (int)Species.Parasect:  return level < 30 && !moves.Contains(147); // Parasect without Spore                  case (int)Species.Golduck:   return level < 39 && !moves.Contains(093); // Golduck without Confusion                  case (int)Species.Dewgong:   return level < 44 && !moves.Contains(156); // Dewgong without Rest                  case (int)Species.Haunter:                  case (int)Species.Gengar:    return level < 29 && !moves.Contains(095); // Haunter/Gengar without Hypnosis                  case (int)Species.Weezing:   return level < 39 && !moves.Contains(108); // Weezing without Smoke Screen                  default: return false;              }
Magic Number,PKHeX,GBRestrictions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\GBRestrictions.cs,IsMoveCountRequired3,The following statement contains a magic number: switch (species)              {                  case (int)Species.Pidgeotto: return level < 21 && !moves.Contains(018); // Pidgeotto without Whirlwind                  case (int)Species.Sandslash: return level < 27 && !moves.Contains(040); // Sandslash without Poison Sting                  case (int)Species.Parasect:  return level < 30 && !moves.Contains(147); // Parasect without Spore                  case (int)Species.Golduck:   return level < 39 && !moves.Contains(093); // Golduck without Confusion                  case (int)Species.Dewgong:   return level < 44 && !moves.Contains(156); // Dewgong without Rest                  case (int)Species.Haunter:                  case (int)Species.Gengar:    return level < 29 && !moves.Contains(095); // Haunter/Gengar without Hypnosis                  case (int)Species.Weezing:   return level < 39 && !moves.Contains(108); // Weezing without Smoke Screen                  default: return false;              }
Magic Number,PKHeX,GBRestrictions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\GBRestrictions.cs,IsMoveCountRequired3,The following statement contains a magic number: switch (species)              {                  case (int)Species.Pidgeotto: return level < 21 && !moves.Contains(018); // Pidgeotto without Whirlwind                  case (int)Species.Sandslash: return level < 27 && !moves.Contains(040); // Sandslash without Poison Sting                  case (int)Species.Parasect:  return level < 30 && !moves.Contains(147); // Parasect without Spore                  case (int)Species.Golduck:   return level < 39 && !moves.Contains(093); // Golduck without Confusion                  case (int)Species.Dewgong:   return level < 44 && !moves.Contains(156); // Dewgong without Rest                  case (int)Species.Haunter:                  case (int)Species.Gengar:    return level < 29 && !moves.Contains(095); // Haunter/Gengar without Hypnosis                  case (int)Species.Weezing:   return level < 39 && !moves.Contains(108); // Weezing without Smoke Screen                  default: return false;              }
Magic Number,PKHeX,GBRestrictions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\GBRestrictions.cs,IsMoveCountRequired3,The following statement contains a magic number: switch (species)              {                  case (int)Species.Pidgeotto: return level < 21 && !moves.Contains(018); // Pidgeotto without Whirlwind                  case (int)Species.Sandslash: return level < 27 && !moves.Contains(040); // Sandslash without Poison Sting                  case (int)Species.Parasect:  return level < 30 && !moves.Contains(147); // Parasect without Spore                  case (int)Species.Golduck:   return level < 39 && !moves.Contains(093); // Golduck without Confusion                  case (int)Species.Dewgong:   return level < 44 && !moves.Contains(156); // Dewgong without Rest                  case (int)Species.Haunter:                  case (int)Species.Gengar:    return level < 29 && !moves.Contains(095); // Haunter/Gengar without Hypnosis                  case (int)Species.Weezing:   return level < 39 && !moves.Contains(108); // Weezing without Smoke Screen                  default: return false;              }
Magic Number,PKHeX,GBRestrictions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\GBRestrictions.cs,IsMoveCountRequired3,The following statement contains a magic number: switch (species)              {                  case (int)Species.Pidgeotto: return level < 21 && !moves.Contains(018); // Pidgeotto without Whirlwind                  case (int)Species.Sandslash: return level < 27 && !moves.Contains(040); // Sandslash without Poison Sting                  case (int)Species.Parasect:  return level < 30 && !moves.Contains(147); // Parasect without Spore                  case (int)Species.Golduck:   return level < 39 && !moves.Contains(093); // Golduck without Confusion                  case (int)Species.Dewgong:   return level < 44 && !moves.Contains(156); // Dewgong without Rest                  case (int)Species.Haunter:                  case (int)Species.Gengar:    return level < 29 && !moves.Contains(095); // Haunter/Gengar without Hypnosis                  case (int)Species.Weezing:   return level < 39 && !moves.Contains(108); // Weezing without Smoke Screen                  default: return false;              }
Magic Number,PKHeX,GBRestrictions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\GBRestrictions.cs,IsMoveCountRequired3,The following statement contains a magic number: switch (species)              {                  case (int)Species.Pidgeotto: return level < 21 && !moves.Contains(018); // Pidgeotto without Whirlwind                  case (int)Species.Sandslash: return level < 27 && !moves.Contains(040); // Sandslash without Poison Sting                  case (int)Species.Parasect:  return level < 30 && !moves.Contains(147); // Parasect without Spore                  case (int)Species.Golduck:   return level < 39 && !moves.Contains(093); // Golduck without Confusion                  case (int)Species.Dewgong:   return level < 44 && !moves.Contains(156); // Dewgong without Rest                  case (int)Species.Haunter:                  case (int)Species.Gengar:    return level < 29 && !moves.Contains(095); // Haunter/Gengar without Hypnosis                  case (int)Species.Weezing:   return level < 39 && !moves.Contains(108); // Weezing without Smoke Screen                  default: return false;              }
Magic Number,PKHeX,GBRestrictions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\GBRestrictions.cs,IsMoveCountRequired3,The following statement contains a magic number: switch (species)              {                  case (int)Species.Pidgeotto: return level < 21 && !moves.Contains(018); // Pidgeotto without Whirlwind                  case (int)Species.Sandslash: return level < 27 && !moves.Contains(040); // Sandslash without Poison Sting                  case (int)Species.Parasect:  return level < 30 && !moves.Contains(147); // Parasect without Spore                  case (int)Species.Golduck:   return level < 39 && !moves.Contains(093); // Golduck without Confusion                  case (int)Species.Dewgong:   return level < 44 && !moves.Contains(156); // Dewgong without Rest                  case (int)Species.Haunter:                  case (int)Species.Gengar:    return level < 29 && !moves.Contains(095); // Haunter/Gengar without Hypnosis                  case (int)Species.Weezing:   return level < 39 && !moves.Contains(108); // Weezing without Smoke Screen                  default: return false;              }
Magic Number,PKHeX,GBRestrictions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\GBRestrictions.cs,IsMoveCountRequired3,The following statement contains a magic number: switch (species)              {                  case (int)Species.Pidgeotto: return level < 21 && !moves.Contains(018); // Pidgeotto without Whirlwind                  case (int)Species.Sandslash: return level < 27 && !moves.Contains(040); // Sandslash without Poison Sting                  case (int)Species.Parasect:  return level < 30 && !moves.Contains(147); // Parasect without Spore                  case (int)Species.Golduck:   return level < 39 && !moves.Contains(093); // Golduck without Confusion                  case (int)Species.Dewgong:   return level < 44 && !moves.Contains(156); // Dewgong without Rest                  case (int)Species.Haunter:                  case (int)Species.Gengar:    return level < 29 && !moves.Contains(095); // Haunter/Gengar without Hypnosis                  case (int)Species.Weezing:   return level < 39 && !moves.Contains(108); // Weezing without Smoke Screen                  default: return false;              }
Magic Number,PKHeX,GBRestrictions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\GBRestrictions.cs,GetRequiredMoveCountDecrement,The following statement contains a magic number: switch (pk.Species)              {                  case (int)Species.Venonat: // Venonat; ignore Venomoth (by the time Venonat evolves it will always have 4 moves)                      if (pk.CurrentLevel >= 11 && !moves.Contains(48)) // Supersonic                          usedslots--;                      if (pk.CurrentLevel >= 19 && !moves.Contains(93)) // Confusion                          usedslots--;                      break;                  case (int)Species.Kadabra:                  case (int)Species.Alakazam: // Abra & Kadabra                      int catch_rate = ((PK1)pk).Catch_Rate;                      if (catch_rate != 100)// Initial Yellow Kadabra Kinesis (move 134)                          usedslots--;                      if (catch_rate == 200 && pk.CurrentLevel < 20) // Kadabra Disable' not learned until 20 if captured as Abra (move 50)                          usedslots--;                      break;                  case (int)Species.Cubone:                  case (int)Species.Marowak: // Cubone & Marowak                      if (!moves.Contains(39)) // Initial Yellow Tail Whip                          usedslots--;                      if (!moves.Contains(125)) // Initial Yellow Bone Club                          usedslots--;                      if (pk.Species == 105 && pk.CurrentLevel < 33 && !moves.Contains(116)) // Marowak evolved without Focus Energy                          usedslots--;                      break;                  case (int)Species.Chansey:                      if (!moves.Contains(39)) // Yellow Initial Tail Whip                          usedslots--;                      if (!moves.Contains(3)) // Yellow Lvl 12 and Initial Red/Blue Double Slap                          usedslots--;                      break;                  case (int)Species.Mankey when pk.CurrentLevel >= 9 && !moves.Contains(67): // Mankey (Low Kick)                  case (int)Species.Pinsir when pk.CurrentLevel >= 21 && !moves.Contains(20): // Pinsir (Bind)                  case (int)Species.Gyarados when pk.CurrentLevel < 32: // Gyarados                      usedslots--;                      break;                  default: return usedslots;              }
Magic Number,PKHeX,GBRestrictions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\GBRestrictions.cs,GetRequiredMoveCountDecrement,The following statement contains a magic number: switch (pk.Species)              {                  case (int)Species.Venonat: // Venonat; ignore Venomoth (by the time Venonat evolves it will always have 4 moves)                      if (pk.CurrentLevel >= 11 && !moves.Contains(48)) // Supersonic                          usedslots--;                      if (pk.CurrentLevel >= 19 && !moves.Contains(93)) // Confusion                          usedslots--;                      break;                  case (int)Species.Kadabra:                  case (int)Species.Alakazam: // Abra & Kadabra                      int catch_rate = ((PK1)pk).Catch_Rate;                      if (catch_rate != 100)// Initial Yellow Kadabra Kinesis (move 134)                          usedslots--;                      if (catch_rate == 200 && pk.CurrentLevel < 20) // Kadabra Disable' not learned until 20 if captured as Abra (move 50)                          usedslots--;                      break;                  case (int)Species.Cubone:                  case (int)Species.Marowak: // Cubone & Marowak                      if (!moves.Contains(39)) // Initial Yellow Tail Whip                          usedslots--;                      if (!moves.Contains(125)) // Initial Yellow Bone Club                          usedslots--;                      if (pk.Species == 105 && pk.CurrentLevel < 33 && !moves.Contains(116)) // Marowak evolved without Focus Energy                          usedslots--;                      break;                  case (int)Species.Chansey:                      if (!moves.Contains(39)) // Yellow Initial Tail Whip                          usedslots--;                      if (!moves.Contains(3)) // Yellow Lvl 12 and Initial Red/Blue Double Slap                          usedslots--;                      break;                  case (int)Species.Mankey when pk.CurrentLevel >= 9 && !moves.Contains(67): // Mankey (Low Kick)                  case (int)Species.Pinsir when pk.CurrentLevel >= 21 && !moves.Contains(20): // Pinsir (Bind)                  case (int)Species.Gyarados when pk.CurrentLevel < 32: // Gyarados                      usedslots--;                      break;                  default: return usedslots;              }
Magic Number,PKHeX,GBRestrictions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\GBRestrictions.cs,GetRequiredMoveCountDecrement,The following statement contains a magic number: switch (pk.Species)              {                  case (int)Species.Venonat: // Venonat; ignore Venomoth (by the time Venonat evolves it will always have 4 moves)                      if (pk.CurrentLevel >= 11 && !moves.Contains(48)) // Supersonic                          usedslots--;                      if (pk.CurrentLevel >= 19 && !moves.Contains(93)) // Confusion                          usedslots--;                      break;                  case (int)Species.Kadabra:                  case (int)Species.Alakazam: // Abra & Kadabra                      int catch_rate = ((PK1)pk).Catch_Rate;                      if (catch_rate != 100)// Initial Yellow Kadabra Kinesis (move 134)                          usedslots--;                      if (catch_rate == 200 && pk.CurrentLevel < 20) // Kadabra Disable' not learned until 20 if captured as Abra (move 50)                          usedslots--;                      break;                  case (int)Species.Cubone:                  case (int)Species.Marowak: // Cubone & Marowak                      if (!moves.Contains(39)) // Initial Yellow Tail Whip                          usedslots--;                      if (!moves.Contains(125)) // Initial Yellow Bone Club                          usedslots--;                      if (pk.Species == 105 && pk.CurrentLevel < 33 && !moves.Contains(116)) // Marowak evolved without Focus Energy                          usedslots--;                      break;                  case (int)Species.Chansey:                      if (!moves.Contains(39)) // Yellow Initial Tail Whip                          usedslots--;                      if (!moves.Contains(3)) // Yellow Lvl 12 and Initial Red/Blue Double Slap                          usedslots--;                      break;                  case (int)Species.Mankey when pk.CurrentLevel >= 9 && !moves.Contains(67): // Mankey (Low Kick)                  case (int)Species.Pinsir when pk.CurrentLevel >= 21 && !moves.Contains(20): // Pinsir (Bind)                  case (int)Species.Gyarados when pk.CurrentLevel < 32: // Gyarados                      usedslots--;                      break;                  default: return usedslots;              }
Magic Number,PKHeX,GBRestrictions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\GBRestrictions.cs,GetRequiredMoveCountDecrement,The following statement contains a magic number: switch (pk.Species)              {                  case (int)Species.Venonat: // Venonat; ignore Venomoth (by the time Venonat evolves it will always have 4 moves)                      if (pk.CurrentLevel >= 11 && !moves.Contains(48)) // Supersonic                          usedslots--;                      if (pk.CurrentLevel >= 19 && !moves.Contains(93)) // Confusion                          usedslots--;                      break;                  case (int)Species.Kadabra:                  case (int)Species.Alakazam: // Abra & Kadabra                      int catch_rate = ((PK1)pk).Catch_Rate;                      if (catch_rate != 100)// Initial Yellow Kadabra Kinesis (move 134)                          usedslots--;                      if (catch_rate == 200 && pk.CurrentLevel < 20) // Kadabra Disable' not learned until 20 if captured as Abra (move 50)                          usedslots--;                      break;                  case (int)Species.Cubone:                  case (int)Species.Marowak: // Cubone & Marowak                      if (!moves.Contains(39)) // Initial Yellow Tail Whip                          usedslots--;                      if (!moves.Contains(125)) // Initial Yellow Bone Club                          usedslots--;                      if (pk.Species == 105 && pk.CurrentLevel < 33 && !moves.Contains(116)) // Marowak evolved without Focus Energy                          usedslots--;                      break;                  case (int)Species.Chansey:                      if (!moves.Contains(39)) // Yellow Initial Tail Whip                          usedslots--;                      if (!moves.Contains(3)) // Yellow Lvl 12 and Initial Red/Blue Double Slap                          usedslots--;                      break;                  case (int)Species.Mankey when pk.CurrentLevel >= 9 && !moves.Contains(67): // Mankey (Low Kick)                  case (int)Species.Pinsir when pk.CurrentLevel >= 21 && !moves.Contains(20): // Pinsir (Bind)                  case (int)Species.Gyarados when pk.CurrentLevel < 32: // Gyarados                      usedslots--;                      break;                  default: return usedslots;              }
Magic Number,PKHeX,GBRestrictions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\GBRestrictions.cs,GetRequiredMoveCountDecrement,The following statement contains a magic number: switch (pk.Species)              {                  case (int)Species.Venonat: // Venonat; ignore Venomoth (by the time Venonat evolves it will always have 4 moves)                      if (pk.CurrentLevel >= 11 && !moves.Contains(48)) // Supersonic                          usedslots--;                      if (pk.CurrentLevel >= 19 && !moves.Contains(93)) // Confusion                          usedslots--;                      break;                  case (int)Species.Kadabra:                  case (int)Species.Alakazam: // Abra & Kadabra                      int catch_rate = ((PK1)pk).Catch_Rate;                      if (catch_rate != 100)// Initial Yellow Kadabra Kinesis (move 134)                          usedslots--;                      if (catch_rate == 200 && pk.CurrentLevel < 20) // Kadabra Disable' not learned until 20 if captured as Abra (move 50)                          usedslots--;                      break;                  case (int)Species.Cubone:                  case (int)Species.Marowak: // Cubone & Marowak                      if (!moves.Contains(39)) // Initial Yellow Tail Whip                          usedslots--;                      if (!moves.Contains(125)) // Initial Yellow Bone Club                          usedslots--;                      if (pk.Species == 105 && pk.CurrentLevel < 33 && !moves.Contains(116)) // Marowak evolved without Focus Energy                          usedslots--;                      break;                  case (int)Species.Chansey:                      if (!moves.Contains(39)) // Yellow Initial Tail Whip                          usedslots--;                      if (!moves.Contains(3)) // Yellow Lvl 12 and Initial Red/Blue Double Slap                          usedslots--;                      break;                  case (int)Species.Mankey when pk.CurrentLevel >= 9 && !moves.Contains(67): // Mankey (Low Kick)                  case (int)Species.Pinsir when pk.CurrentLevel >= 21 && !moves.Contains(20): // Pinsir (Bind)                  case (int)Species.Gyarados when pk.CurrentLevel < 32: // Gyarados                      usedslots--;                      break;                  default: return usedslots;              }
Magic Number,PKHeX,GBRestrictions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\GBRestrictions.cs,GetRequiredMoveCountDecrement,The following statement contains a magic number: switch (pk.Species)              {                  case (int)Species.Venonat: // Venonat; ignore Venomoth (by the time Venonat evolves it will always have 4 moves)                      if (pk.CurrentLevel >= 11 && !moves.Contains(48)) // Supersonic                          usedslots--;                      if (pk.CurrentLevel >= 19 && !moves.Contains(93)) // Confusion                          usedslots--;                      break;                  case (int)Species.Kadabra:                  case (int)Species.Alakazam: // Abra & Kadabra                      int catch_rate = ((PK1)pk).Catch_Rate;                      if (catch_rate != 100)// Initial Yellow Kadabra Kinesis (move 134)                          usedslots--;                      if (catch_rate == 200 && pk.CurrentLevel < 20) // Kadabra Disable' not learned until 20 if captured as Abra (move 50)                          usedslots--;                      break;                  case (int)Species.Cubone:                  case (int)Species.Marowak: // Cubone & Marowak                      if (!moves.Contains(39)) // Initial Yellow Tail Whip                          usedslots--;                      if (!moves.Contains(125)) // Initial Yellow Bone Club                          usedslots--;                      if (pk.Species == 105 && pk.CurrentLevel < 33 && !moves.Contains(116)) // Marowak evolved without Focus Energy                          usedslots--;                      break;                  case (int)Species.Chansey:                      if (!moves.Contains(39)) // Yellow Initial Tail Whip                          usedslots--;                      if (!moves.Contains(3)) // Yellow Lvl 12 and Initial Red/Blue Double Slap                          usedslots--;                      break;                  case (int)Species.Mankey when pk.CurrentLevel >= 9 && !moves.Contains(67): // Mankey (Low Kick)                  case (int)Species.Pinsir when pk.CurrentLevel >= 21 && !moves.Contains(20): // Pinsir (Bind)                  case (int)Species.Gyarados when pk.CurrentLevel < 32: // Gyarados                      usedslots--;                      break;                  default: return usedslots;              }
Magic Number,PKHeX,GBRestrictions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\GBRestrictions.cs,GetRequiredMoveCountDecrement,The following statement contains a magic number: switch (pk.Species)              {                  case (int)Species.Venonat: // Venonat; ignore Venomoth (by the time Venonat evolves it will always have 4 moves)                      if (pk.CurrentLevel >= 11 && !moves.Contains(48)) // Supersonic                          usedslots--;                      if (pk.CurrentLevel >= 19 && !moves.Contains(93)) // Confusion                          usedslots--;                      break;                  case (int)Species.Kadabra:                  case (int)Species.Alakazam: // Abra & Kadabra                      int catch_rate = ((PK1)pk).Catch_Rate;                      if (catch_rate != 100)// Initial Yellow Kadabra Kinesis (move 134)                          usedslots--;                      if (catch_rate == 200 && pk.CurrentLevel < 20) // Kadabra Disable' not learned until 20 if captured as Abra (move 50)                          usedslots--;                      break;                  case (int)Species.Cubone:                  case (int)Species.Marowak: // Cubone & Marowak                      if (!moves.Contains(39)) // Initial Yellow Tail Whip                          usedslots--;                      if (!moves.Contains(125)) // Initial Yellow Bone Club                          usedslots--;                      if (pk.Species == 105 && pk.CurrentLevel < 33 && !moves.Contains(116)) // Marowak evolved without Focus Energy                          usedslots--;                      break;                  case (int)Species.Chansey:                      if (!moves.Contains(39)) // Yellow Initial Tail Whip                          usedslots--;                      if (!moves.Contains(3)) // Yellow Lvl 12 and Initial Red/Blue Double Slap                          usedslots--;                      break;                  case (int)Species.Mankey when pk.CurrentLevel >= 9 && !moves.Contains(67): // Mankey (Low Kick)                  case (int)Species.Pinsir when pk.CurrentLevel >= 21 && !moves.Contains(20): // Pinsir (Bind)                  case (int)Species.Gyarados when pk.CurrentLevel < 32: // Gyarados                      usedslots--;                      break;                  default: return usedslots;              }
Magic Number,PKHeX,GBRestrictions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\GBRestrictions.cs,GetRequiredMoveCountDecrement,The following statement contains a magic number: switch (pk.Species)              {                  case (int)Species.Venonat: // Venonat; ignore Venomoth (by the time Venonat evolves it will always have 4 moves)                      if (pk.CurrentLevel >= 11 && !moves.Contains(48)) // Supersonic                          usedslots--;                      if (pk.CurrentLevel >= 19 && !moves.Contains(93)) // Confusion                          usedslots--;                      break;                  case (int)Species.Kadabra:                  case (int)Species.Alakazam: // Abra & Kadabra                      int catch_rate = ((PK1)pk).Catch_Rate;                      if (catch_rate != 100)// Initial Yellow Kadabra Kinesis (move 134)                          usedslots--;                      if (catch_rate == 200 && pk.CurrentLevel < 20) // Kadabra Disable' not learned until 20 if captured as Abra (move 50)                          usedslots--;                      break;                  case (int)Species.Cubone:                  case (int)Species.Marowak: // Cubone & Marowak                      if (!moves.Contains(39)) // Initial Yellow Tail Whip                          usedslots--;                      if (!moves.Contains(125)) // Initial Yellow Bone Club                          usedslots--;                      if (pk.Species == 105 && pk.CurrentLevel < 33 && !moves.Contains(116)) // Marowak evolved without Focus Energy                          usedslots--;                      break;                  case (int)Species.Chansey:                      if (!moves.Contains(39)) // Yellow Initial Tail Whip                          usedslots--;                      if (!moves.Contains(3)) // Yellow Lvl 12 and Initial Red/Blue Double Slap                          usedslots--;                      break;                  case (int)Species.Mankey when pk.CurrentLevel >= 9 && !moves.Contains(67): // Mankey (Low Kick)                  case (int)Species.Pinsir when pk.CurrentLevel >= 21 && !moves.Contains(20): // Pinsir (Bind)                  case (int)Species.Gyarados when pk.CurrentLevel < 32: // Gyarados                      usedslots--;                      break;                  default: return usedslots;              }
Magic Number,PKHeX,GBRestrictions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\GBRestrictions.cs,GetRequiredMoveCountDecrement,The following statement contains a magic number: switch (pk.Species)              {                  case (int)Species.Venonat: // Venonat; ignore Venomoth (by the time Venonat evolves it will always have 4 moves)                      if (pk.CurrentLevel >= 11 && !moves.Contains(48)) // Supersonic                          usedslots--;                      if (pk.CurrentLevel >= 19 && !moves.Contains(93)) // Confusion                          usedslots--;                      break;                  case (int)Species.Kadabra:                  case (int)Species.Alakazam: // Abra & Kadabra                      int catch_rate = ((PK1)pk).Catch_Rate;                      if (catch_rate != 100)// Initial Yellow Kadabra Kinesis (move 134)                          usedslots--;                      if (catch_rate == 200 && pk.CurrentLevel < 20) // Kadabra Disable' not learned until 20 if captured as Abra (move 50)                          usedslots--;                      break;                  case (int)Species.Cubone:                  case (int)Species.Marowak: // Cubone & Marowak                      if (!moves.Contains(39)) // Initial Yellow Tail Whip                          usedslots--;                      if (!moves.Contains(125)) // Initial Yellow Bone Club                          usedslots--;                      if (pk.Species == 105 && pk.CurrentLevel < 33 && !moves.Contains(116)) // Marowak evolved without Focus Energy                          usedslots--;                      break;                  case (int)Species.Chansey:                      if (!moves.Contains(39)) // Yellow Initial Tail Whip                          usedslots--;                      if (!moves.Contains(3)) // Yellow Lvl 12 and Initial Red/Blue Double Slap                          usedslots--;                      break;                  case (int)Species.Mankey when pk.CurrentLevel >= 9 && !moves.Contains(67): // Mankey (Low Kick)                  case (int)Species.Pinsir when pk.CurrentLevel >= 21 && !moves.Contains(20): // Pinsir (Bind)                  case (int)Species.Gyarados when pk.CurrentLevel < 32: // Gyarados                      usedslots--;                      break;                  default: return usedslots;              }
Magic Number,PKHeX,GBRestrictions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\GBRestrictions.cs,GetRequiredMoveCountDecrement,The following statement contains a magic number: switch (pk.Species)              {                  case (int)Species.Venonat: // Venonat; ignore Venomoth (by the time Venonat evolves it will always have 4 moves)                      if (pk.CurrentLevel >= 11 && !moves.Contains(48)) // Supersonic                          usedslots--;                      if (pk.CurrentLevel >= 19 && !moves.Contains(93)) // Confusion                          usedslots--;                      break;                  case (int)Species.Kadabra:                  case (int)Species.Alakazam: // Abra & Kadabra                      int catch_rate = ((PK1)pk).Catch_Rate;                      if (catch_rate != 100)// Initial Yellow Kadabra Kinesis (move 134)                          usedslots--;                      if (catch_rate == 200 && pk.CurrentLevel < 20) // Kadabra Disable' not learned until 20 if captured as Abra (move 50)                          usedslots--;                      break;                  case (int)Species.Cubone:                  case (int)Species.Marowak: // Cubone & Marowak                      if (!moves.Contains(39)) // Initial Yellow Tail Whip                          usedslots--;                      if (!moves.Contains(125)) // Initial Yellow Bone Club                          usedslots--;                      if (pk.Species == 105 && pk.CurrentLevel < 33 && !moves.Contains(116)) // Marowak evolved without Focus Energy                          usedslots--;                      break;                  case (int)Species.Chansey:                      if (!moves.Contains(39)) // Yellow Initial Tail Whip                          usedslots--;                      if (!moves.Contains(3)) // Yellow Lvl 12 and Initial Red/Blue Double Slap                          usedslots--;                      break;                  case (int)Species.Mankey when pk.CurrentLevel >= 9 && !moves.Contains(67): // Mankey (Low Kick)                  case (int)Species.Pinsir when pk.CurrentLevel >= 21 && !moves.Contains(20): // Pinsir (Bind)                  case (int)Species.Gyarados when pk.CurrentLevel < 32: // Gyarados                      usedslots--;                      break;                  default: return usedslots;              }
Magic Number,PKHeX,GBRestrictions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\GBRestrictions.cs,GetRequiredMoveCountDecrement,The following statement contains a magic number: switch (pk.Species)              {                  case (int)Species.Venonat: // Venonat; ignore Venomoth (by the time Venonat evolves it will always have 4 moves)                      if (pk.CurrentLevel >= 11 && !moves.Contains(48)) // Supersonic                          usedslots--;                      if (pk.CurrentLevel >= 19 && !moves.Contains(93)) // Confusion                          usedslots--;                      break;                  case (int)Species.Kadabra:                  case (int)Species.Alakazam: // Abra & Kadabra                      int catch_rate = ((PK1)pk).Catch_Rate;                      if (catch_rate != 100)// Initial Yellow Kadabra Kinesis (move 134)                          usedslots--;                      if (catch_rate == 200 && pk.CurrentLevel < 20) // Kadabra Disable' not learned until 20 if captured as Abra (move 50)                          usedslots--;                      break;                  case (int)Species.Cubone:                  case (int)Species.Marowak: // Cubone & Marowak                      if (!moves.Contains(39)) // Initial Yellow Tail Whip                          usedslots--;                      if (!moves.Contains(125)) // Initial Yellow Bone Club                          usedslots--;                      if (pk.Species == 105 && pk.CurrentLevel < 33 && !moves.Contains(116)) // Marowak evolved without Focus Energy                          usedslots--;                      break;                  case (int)Species.Chansey:                      if (!moves.Contains(39)) // Yellow Initial Tail Whip                          usedslots--;                      if (!moves.Contains(3)) // Yellow Lvl 12 and Initial Red/Blue Double Slap                          usedslots--;                      break;                  case (int)Species.Mankey when pk.CurrentLevel >= 9 && !moves.Contains(67): // Mankey (Low Kick)                  case (int)Species.Pinsir when pk.CurrentLevel >= 21 && !moves.Contains(20): // Pinsir (Bind)                  case (int)Species.Gyarados when pk.CurrentLevel < 32: // Gyarados                      usedslots--;                      break;                  default: return usedslots;              }
Magic Number,PKHeX,GBRestrictions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\GBRestrictions.cs,GetRequiredMoveCountDecrement,The following statement contains a magic number: switch (pk.Species)              {                  case (int)Species.Venonat: // Venonat; ignore Venomoth (by the time Venonat evolves it will always have 4 moves)                      if (pk.CurrentLevel >= 11 && !moves.Contains(48)) // Supersonic                          usedslots--;                      if (pk.CurrentLevel >= 19 && !moves.Contains(93)) // Confusion                          usedslots--;                      break;                  case (int)Species.Kadabra:                  case (int)Species.Alakazam: // Abra & Kadabra                      int catch_rate = ((PK1)pk).Catch_Rate;                      if (catch_rate != 100)// Initial Yellow Kadabra Kinesis (move 134)                          usedslots--;                      if (catch_rate == 200 && pk.CurrentLevel < 20) // Kadabra Disable' not learned until 20 if captured as Abra (move 50)                          usedslots--;                      break;                  case (int)Species.Cubone:                  case (int)Species.Marowak: // Cubone & Marowak                      if (!moves.Contains(39)) // Initial Yellow Tail Whip                          usedslots--;                      if (!moves.Contains(125)) // Initial Yellow Bone Club                          usedslots--;                      if (pk.Species == 105 && pk.CurrentLevel < 33 && !moves.Contains(116)) // Marowak evolved without Focus Energy                          usedslots--;                      break;                  case (int)Species.Chansey:                      if (!moves.Contains(39)) // Yellow Initial Tail Whip                          usedslots--;                      if (!moves.Contains(3)) // Yellow Lvl 12 and Initial Red/Blue Double Slap                          usedslots--;                      break;                  case (int)Species.Mankey when pk.CurrentLevel >= 9 && !moves.Contains(67): // Mankey (Low Kick)                  case (int)Species.Pinsir when pk.CurrentLevel >= 21 && !moves.Contains(20): // Pinsir (Bind)                  case (int)Species.Gyarados when pk.CurrentLevel < 32: // Gyarados                      usedslots--;                      break;                  default: return usedslots;              }
Magic Number,PKHeX,GBRestrictions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\GBRestrictions.cs,GetRequiredMoveCountDecrement,The following statement contains a magic number: switch (pk.Species)              {                  case (int)Species.Venonat: // Venonat; ignore Venomoth (by the time Venonat evolves it will always have 4 moves)                      if (pk.CurrentLevel >= 11 && !moves.Contains(48)) // Supersonic                          usedslots--;                      if (pk.CurrentLevel >= 19 && !moves.Contains(93)) // Confusion                          usedslots--;                      break;                  case (int)Species.Kadabra:                  case (int)Species.Alakazam: // Abra & Kadabra                      int catch_rate = ((PK1)pk).Catch_Rate;                      if (catch_rate != 100)// Initial Yellow Kadabra Kinesis (move 134)                          usedslots--;                      if (catch_rate == 200 && pk.CurrentLevel < 20) // Kadabra Disable' not learned until 20 if captured as Abra (move 50)                          usedslots--;                      break;                  case (int)Species.Cubone:                  case (int)Species.Marowak: // Cubone & Marowak                      if (!moves.Contains(39)) // Initial Yellow Tail Whip                          usedslots--;                      if (!moves.Contains(125)) // Initial Yellow Bone Club                          usedslots--;                      if (pk.Species == 105 && pk.CurrentLevel < 33 && !moves.Contains(116)) // Marowak evolved without Focus Energy                          usedslots--;                      break;                  case (int)Species.Chansey:                      if (!moves.Contains(39)) // Yellow Initial Tail Whip                          usedslots--;                      if (!moves.Contains(3)) // Yellow Lvl 12 and Initial Red/Blue Double Slap                          usedslots--;                      break;                  case (int)Species.Mankey when pk.CurrentLevel >= 9 && !moves.Contains(67): // Mankey (Low Kick)                  case (int)Species.Pinsir when pk.CurrentLevel >= 21 && !moves.Contains(20): // Pinsir (Bind)                  case (int)Species.Gyarados when pk.CurrentLevel < 32: // Gyarados                      usedslots--;                      break;                  default: return usedslots;              }
Magic Number,PKHeX,GBRestrictions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\GBRestrictions.cs,GetRequiredMoveCountDecrement,The following statement contains a magic number: switch (pk.Species)              {                  case (int)Species.Venonat: // Venonat; ignore Venomoth (by the time Venonat evolves it will always have 4 moves)                      if (pk.CurrentLevel >= 11 && !moves.Contains(48)) // Supersonic                          usedslots--;                      if (pk.CurrentLevel >= 19 && !moves.Contains(93)) // Confusion                          usedslots--;                      break;                  case (int)Species.Kadabra:                  case (int)Species.Alakazam: // Abra & Kadabra                      int catch_rate = ((PK1)pk).Catch_Rate;                      if (catch_rate != 100)// Initial Yellow Kadabra Kinesis (move 134)                          usedslots--;                      if (catch_rate == 200 && pk.CurrentLevel < 20) // Kadabra Disable' not learned until 20 if captured as Abra (move 50)                          usedslots--;                      break;                  case (int)Species.Cubone:                  case (int)Species.Marowak: // Cubone & Marowak                      if (!moves.Contains(39)) // Initial Yellow Tail Whip                          usedslots--;                      if (!moves.Contains(125)) // Initial Yellow Bone Club                          usedslots--;                      if (pk.Species == 105 && pk.CurrentLevel < 33 && !moves.Contains(116)) // Marowak evolved without Focus Energy                          usedslots--;                      break;                  case (int)Species.Chansey:                      if (!moves.Contains(39)) // Yellow Initial Tail Whip                          usedslots--;                      if (!moves.Contains(3)) // Yellow Lvl 12 and Initial Red/Blue Double Slap                          usedslots--;                      break;                  case (int)Species.Mankey when pk.CurrentLevel >= 9 && !moves.Contains(67): // Mankey (Low Kick)                  case (int)Species.Pinsir when pk.CurrentLevel >= 21 && !moves.Contains(20): // Pinsir (Bind)                  case (int)Species.Gyarados when pk.CurrentLevel < 32: // Gyarados                      usedslots--;                      break;                  default: return usedslots;              }
Magic Number,PKHeX,GBRestrictions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\GBRestrictions.cs,GetRequiredMoveCountDecrement,The following statement contains a magic number: switch (pk.Species)              {                  case (int)Species.Venonat: // Venonat; ignore Venomoth (by the time Venonat evolves it will always have 4 moves)                      if (pk.CurrentLevel >= 11 && !moves.Contains(48)) // Supersonic                          usedslots--;                      if (pk.CurrentLevel >= 19 && !moves.Contains(93)) // Confusion                          usedslots--;                      break;                  case (int)Species.Kadabra:                  case (int)Species.Alakazam: // Abra & Kadabra                      int catch_rate = ((PK1)pk).Catch_Rate;                      if (catch_rate != 100)// Initial Yellow Kadabra Kinesis (move 134)                          usedslots--;                      if (catch_rate == 200 && pk.CurrentLevel < 20) // Kadabra Disable' not learned until 20 if captured as Abra (move 50)                          usedslots--;                      break;                  case (int)Species.Cubone:                  case (int)Species.Marowak: // Cubone & Marowak                      if (!moves.Contains(39)) // Initial Yellow Tail Whip                          usedslots--;                      if (!moves.Contains(125)) // Initial Yellow Bone Club                          usedslots--;                      if (pk.Species == 105 && pk.CurrentLevel < 33 && !moves.Contains(116)) // Marowak evolved without Focus Energy                          usedslots--;                      break;                  case (int)Species.Chansey:                      if (!moves.Contains(39)) // Yellow Initial Tail Whip                          usedslots--;                      if (!moves.Contains(3)) // Yellow Lvl 12 and Initial Red/Blue Double Slap                          usedslots--;                      break;                  case (int)Species.Mankey when pk.CurrentLevel >= 9 && !moves.Contains(67): // Mankey (Low Kick)                  case (int)Species.Pinsir when pk.CurrentLevel >= 21 && !moves.Contains(20): // Pinsir (Bind)                  case (int)Species.Gyarados when pk.CurrentLevel < 32: // Gyarados                      usedslots--;                      break;                  default: return usedslots;              }
Magic Number,PKHeX,GBRestrictions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\GBRestrictions.cs,GetRequiredMoveCountDecrement,The following statement contains a magic number: switch (pk.Species)              {                  case (int)Species.Venonat: // Venonat; ignore Venomoth (by the time Venonat evolves it will always have 4 moves)                      if (pk.CurrentLevel >= 11 && !moves.Contains(48)) // Supersonic                          usedslots--;                      if (pk.CurrentLevel >= 19 && !moves.Contains(93)) // Confusion                          usedslots--;                      break;                  case (int)Species.Kadabra:                  case (int)Species.Alakazam: // Abra & Kadabra                      int catch_rate = ((PK1)pk).Catch_Rate;                      if (catch_rate != 100)// Initial Yellow Kadabra Kinesis (move 134)                          usedslots--;                      if (catch_rate == 200 && pk.CurrentLevel < 20) // Kadabra Disable' not learned until 20 if captured as Abra (move 50)                          usedslots--;                      break;                  case (int)Species.Cubone:                  case (int)Species.Marowak: // Cubone & Marowak                      if (!moves.Contains(39)) // Initial Yellow Tail Whip                          usedslots--;                      if (!moves.Contains(125)) // Initial Yellow Bone Club                          usedslots--;                      if (pk.Species == 105 && pk.CurrentLevel < 33 && !moves.Contains(116)) // Marowak evolved without Focus Energy                          usedslots--;                      break;                  case (int)Species.Chansey:                      if (!moves.Contains(39)) // Yellow Initial Tail Whip                          usedslots--;                      if (!moves.Contains(3)) // Yellow Lvl 12 and Initial Red/Blue Double Slap                          usedslots--;                      break;                  case (int)Species.Mankey when pk.CurrentLevel >= 9 && !moves.Contains(67): // Mankey (Low Kick)                  case (int)Species.Pinsir when pk.CurrentLevel >= 21 && !moves.Contains(20): // Pinsir (Bind)                  case (int)Species.Gyarados when pk.CurrentLevel < 32: // Gyarados                      usedslots--;                      break;                  default: return usedslots;              }
Magic Number,PKHeX,GBRestrictions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\GBRestrictions.cs,GetRequiredMoveCountDecrement,The following statement contains a magic number: switch (pk.Species)              {                  case (int)Species.Venonat: // Venonat; ignore Venomoth (by the time Venonat evolves it will always have 4 moves)                      if (pk.CurrentLevel >= 11 && !moves.Contains(48)) // Supersonic                          usedslots--;                      if (pk.CurrentLevel >= 19 && !moves.Contains(93)) // Confusion                          usedslots--;                      break;                  case (int)Species.Kadabra:                  case (int)Species.Alakazam: // Abra & Kadabra                      int catch_rate = ((PK1)pk).Catch_Rate;                      if (catch_rate != 100)// Initial Yellow Kadabra Kinesis (move 134)                          usedslots--;                      if (catch_rate == 200 && pk.CurrentLevel < 20) // Kadabra Disable' not learned until 20 if captured as Abra (move 50)                          usedslots--;                      break;                  case (int)Species.Cubone:                  case (int)Species.Marowak: // Cubone & Marowak                      if (!moves.Contains(39)) // Initial Yellow Tail Whip                          usedslots--;                      if (!moves.Contains(125)) // Initial Yellow Bone Club                          usedslots--;                      if (pk.Species == 105 && pk.CurrentLevel < 33 && !moves.Contains(116)) // Marowak evolved without Focus Energy                          usedslots--;                      break;                  case (int)Species.Chansey:                      if (!moves.Contains(39)) // Yellow Initial Tail Whip                          usedslots--;                      if (!moves.Contains(3)) // Yellow Lvl 12 and Initial Red/Blue Double Slap                          usedslots--;                      break;                  case (int)Species.Mankey when pk.CurrentLevel >= 9 && !moves.Contains(67): // Mankey (Low Kick)                  case (int)Species.Pinsir when pk.CurrentLevel >= 21 && !moves.Contains(20): // Pinsir (Bind)                  case (int)Species.Gyarados when pk.CurrentLevel < 32: // Gyarados                      usedslots--;                      break;                  default: return usedslots;              }
Magic Number,PKHeX,GBRestrictions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\GBRestrictions.cs,GetRequiredMoveCountDecrement,The following statement contains a magic number: switch (pk.Species)              {                  case (int)Species.Venonat: // Venonat; ignore Venomoth (by the time Venonat evolves it will always have 4 moves)                      if (pk.CurrentLevel >= 11 && !moves.Contains(48)) // Supersonic                          usedslots--;                      if (pk.CurrentLevel >= 19 && !moves.Contains(93)) // Confusion                          usedslots--;                      break;                  case (int)Species.Kadabra:                  case (int)Species.Alakazam: // Abra & Kadabra                      int catch_rate = ((PK1)pk).Catch_Rate;                      if (catch_rate != 100)// Initial Yellow Kadabra Kinesis (move 134)                          usedslots--;                      if (catch_rate == 200 && pk.CurrentLevel < 20) // Kadabra Disable' not learned until 20 if captured as Abra (move 50)                          usedslots--;                      break;                  case (int)Species.Cubone:                  case (int)Species.Marowak: // Cubone & Marowak                      if (!moves.Contains(39)) // Initial Yellow Tail Whip                          usedslots--;                      if (!moves.Contains(125)) // Initial Yellow Bone Club                          usedslots--;                      if (pk.Species == 105 && pk.CurrentLevel < 33 && !moves.Contains(116)) // Marowak evolved without Focus Energy                          usedslots--;                      break;                  case (int)Species.Chansey:                      if (!moves.Contains(39)) // Yellow Initial Tail Whip                          usedslots--;                      if (!moves.Contains(3)) // Yellow Lvl 12 and Initial Red/Blue Double Slap                          usedslots--;                      break;                  case (int)Species.Mankey when pk.CurrentLevel >= 9 && !moves.Contains(67): // Mankey (Low Kick)                  case (int)Species.Pinsir when pk.CurrentLevel >= 21 && !moves.Contains(20): // Pinsir (Bind)                  case (int)Species.Gyarados when pk.CurrentLevel < 32: // Gyarados                      usedslots--;                      break;                  default: return usedslots;              }
Magic Number,PKHeX,GBRestrictions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\GBRestrictions.cs,GetRequiredMoveCountDecrement,The following statement contains a magic number: switch (pk.Species)              {                  case (int)Species.Venonat: // Venonat; ignore Venomoth (by the time Venonat evolves it will always have 4 moves)                      if (pk.CurrentLevel >= 11 && !moves.Contains(48)) // Supersonic                          usedslots--;                      if (pk.CurrentLevel >= 19 && !moves.Contains(93)) // Confusion                          usedslots--;                      break;                  case (int)Species.Kadabra:                  case (int)Species.Alakazam: // Abra & Kadabra                      int catch_rate = ((PK1)pk).Catch_Rate;                      if (catch_rate != 100)// Initial Yellow Kadabra Kinesis (move 134)                          usedslots--;                      if (catch_rate == 200 && pk.CurrentLevel < 20) // Kadabra Disable' not learned until 20 if captured as Abra (move 50)                          usedslots--;                      break;                  case (int)Species.Cubone:                  case (int)Species.Marowak: // Cubone & Marowak                      if (!moves.Contains(39)) // Initial Yellow Tail Whip                          usedslots--;                      if (!moves.Contains(125)) // Initial Yellow Bone Club                          usedslots--;                      if (pk.Species == 105 && pk.CurrentLevel < 33 && !moves.Contains(116)) // Marowak evolved without Focus Energy                          usedslots--;                      break;                  case (int)Species.Chansey:                      if (!moves.Contains(39)) // Yellow Initial Tail Whip                          usedslots--;                      if (!moves.Contains(3)) // Yellow Lvl 12 and Initial Red/Blue Double Slap                          usedslots--;                      break;                  case (int)Species.Mankey when pk.CurrentLevel >= 9 && !moves.Contains(67): // Mankey (Low Kick)                  case (int)Species.Pinsir when pk.CurrentLevel >= 21 && !moves.Contains(20): // Pinsir (Bind)                  case (int)Species.Gyarados when pk.CurrentLevel < 32: // Gyarados                      usedslots--;                      break;                  default: return usedslots;              }
Magic Number,PKHeX,GBRestrictions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\GBRestrictions.cs,GetRequiredMoveCountSpecial,The following statement contains a magic number: switch (pk.Species)              {                  case (int)Species.Exeggutor when pk.CurrentLevel >= 28: // Exeggutor                      // At level 28 learn different move if is a Exeggute or Exeggutor                      if (moves.Contains(73))                          mandatory.Add(73); // Leech Seed level 28 Exeggute                      if (moves.Contains(23))                          mandatory.Add(23); // Stomp level 28 Exeggutor                      break;                  case (int)Species.Pikachu when pk.CurrentLevel >= 33:                      mandatory.Add(97); // Pikachu always learns Agility                      break;                  case (int)Species.Tangela:                      mandatory.Add(132); // Tangela always has Constrict as Initial Move                      break;              }
Magic Number,PKHeX,GBRestrictions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\GBRestrictions.cs,GetRequiredMoveCountSpecial,The following statement contains a magic number: switch (pk.Species)              {                  case (int)Species.Exeggutor when pk.CurrentLevel >= 28: // Exeggutor                      // At level 28 learn different move if is a Exeggute or Exeggutor                      if (moves.Contains(73))                          mandatory.Add(73); // Leech Seed level 28 Exeggute                      if (moves.Contains(23))                          mandatory.Add(23); // Stomp level 28 Exeggutor                      break;                  case (int)Species.Pikachu when pk.CurrentLevel >= 33:                      mandatory.Add(97); // Pikachu always learns Agility                      break;                  case (int)Species.Tangela:                      mandatory.Add(132); // Tangela always has Constrict as Initial Move                      break;              }
Magic Number,PKHeX,GBRestrictions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\GBRestrictions.cs,GetRequiredMoveCountSpecial,The following statement contains a magic number: switch (pk.Species)              {                  case (int)Species.Exeggutor when pk.CurrentLevel >= 28: // Exeggutor                      // At level 28 learn different move if is a Exeggute or Exeggutor                      if (moves.Contains(73))                          mandatory.Add(73); // Leech Seed level 28 Exeggute                      if (moves.Contains(23))                          mandatory.Add(23); // Stomp level 28 Exeggutor                      break;                  case (int)Species.Pikachu when pk.CurrentLevel >= 33:                      mandatory.Add(97); // Pikachu always learns Agility                      break;                  case (int)Species.Tangela:                      mandatory.Add(132); // Tangela always has Constrict as Initial Move                      break;              }
Magic Number,PKHeX,GBRestrictions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\GBRestrictions.cs,GetRequiredMoveCountSpecial,The following statement contains a magic number: switch (pk.Species)              {                  case (int)Species.Exeggutor when pk.CurrentLevel >= 28: // Exeggutor                      // At level 28 learn different move if is a Exeggute or Exeggutor                      if (moves.Contains(73))                          mandatory.Add(73); // Leech Seed level 28 Exeggute                      if (moves.Contains(23))                          mandatory.Add(23); // Stomp level 28 Exeggutor                      break;                  case (int)Species.Pikachu when pk.CurrentLevel >= 33:                      mandatory.Add(97); // Pikachu always learns Agility                      break;                  case (int)Species.Tangela:                      mandatory.Add(132); // Tangela always has Constrict as Initial Move                      break;              }
Magic Number,PKHeX,GBRestrictions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\GBRestrictions.cs,GetRequiredMoveCountSpecial,The following statement contains a magic number: switch (pk.Species)              {                  case (int)Species.Exeggutor when pk.CurrentLevel >= 28: // Exeggutor                      // At level 28 learn different move if is a Exeggute or Exeggutor                      if (moves.Contains(73))                          mandatory.Add(73); // Leech Seed level 28 Exeggute                      if (moves.Contains(23))                          mandatory.Add(23); // Stomp level 28 Exeggutor                      break;                  case (int)Species.Pikachu when pk.CurrentLevel >= 33:                      mandatory.Add(97); // Pikachu always learns Agility                      break;                  case (int)Species.Tangela:                      mandatory.Add(132); // Tangela always has Constrict as Initial Move                      break;              }
Magic Number,PKHeX,GBRestrictions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\GBRestrictions.cs,GetRequiredMoveCountSpecial,The following statement contains a magic number: switch (pk.Species)              {                  case (int)Species.Exeggutor when pk.CurrentLevel >= 28: // Exeggutor                      // At level 28 learn different move if is a Exeggute or Exeggutor                      if (moves.Contains(73))                          mandatory.Add(73); // Leech Seed level 28 Exeggute                      if (moves.Contains(23))                          mandatory.Add(23); // Stomp level 28 Exeggutor                      break;                  case (int)Species.Pikachu when pk.CurrentLevel >= 33:                      mandatory.Add(97); // Pikachu always learns Agility                      break;                  case (int)Species.Tangela:                      mandatory.Add(132); // Tangela always has Constrict as Initial Move                      break;              }
Magic Number,PKHeX,GBRestrictions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\GBRestrictions.cs,GetRequiredMoveCountSpecial,The following statement contains a magic number: switch (pk.Species)              {                  case (int)Species.Exeggutor when pk.CurrentLevel >= 28: // Exeggutor                      // At level 28 learn different move if is a Exeggute or Exeggutor                      if (moves.Contains(73))                          mandatory.Add(73); // Leech Seed level 28 Exeggute                      if (moves.Contains(23))                          mandatory.Add(23); // Stomp level 28 Exeggutor                      break;                  case (int)Species.Pikachu when pk.CurrentLevel >= 33:                      mandatory.Add(97); // Pikachu always learns Agility                      break;                  case (int)Species.Tangela:                      mandatory.Add(132); // Tangela always has Constrict as Initial Move                      break;              }
Magic Number,PKHeX,GBRestrictions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\GBRestrictions.cs,GetRequiredMoveCountSpecial,The following statement contains a magic number: switch (pk.Species)              {                  case (int)Species.Exeggutor when pk.CurrentLevel >= 28: // Exeggutor                      // At level 28 learn different move if is a Exeggute or Exeggutor                      if (moves.Contains(73))                          mandatory.Add(73); // Leech Seed level 28 Exeggute                      if (moves.Contains(23))                          mandatory.Add(23); // Stomp level 28 Exeggutor                      break;                  case (int)Species.Pikachu when pk.CurrentLevel >= 33:                      mandatory.Add(97); // Pikachu always learns Agility                      break;                  case (int)Species.Tangela:                      mandatory.Add(132); // Tangela always has Constrict as Initial Move                      break;              }
Magic Number,PKHeX,GBRestrictions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\GBRestrictions.cs,GetRequiredMoveCountLevel,The following statement contains a magic number: minlevel = 32;
Magic Number,PKHeX,GBRestrictions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\GBRestrictions.cs,GetCatchRateMatchesPreEvolution,The following statement contains a magic number: bool IsCatchRateRBY(IEnumerable<int> ds) => ds.Any(s => catch_rate == PersonalTable.RB[s].CatchRate || (s != 149 && catch_rate == PersonalTable.Y[s].CatchRate));
Magic Number,PKHeX,GBRestrictions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\GBRestrictions.cs,GetCatchRateMatchesPreEvolution,The following statement contains a magic number: bool IsCatchRateTrade() => (pkm.Species == 098 || pkm.Species == 099) && catch_rate == 204;
Magic Number,PKHeX,GBRestrictions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\GBRestrictions.cs,GetCatchRateMatchesPreEvolution,The following statement contains a magic number: bool IsCatchRateTrade() => (pkm.Species == 098 || pkm.Species == 099) && catch_rate == 204;
Magic Number,PKHeX,GBRestrictions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\GBRestrictions.cs,GetCatchRateMatchesPreEvolution,The following statement contains a magic number: bool IsCatchRateTrade() => (pkm.Species == 098 || pkm.Species == 099) && catch_rate == 204;
Magic Number,PKHeX,GBRestrictions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\GBRestrictions.cs,GetTradebackStatusInitial,The following statement contains a magic number: pkm.Format == 2 || pkm.VC2
Magic Number,PKHeX,GBRestrictions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\GBRestrictions.cs,IsTradedKadabraG1,The following statement contains a magic number: moves.Contains(134)
Magic Number,PKHeX,GBRestrictions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\GBRestrictions.cs,IsTradedKadabraG1,The following statement contains a magic number: pk1.CurrentLevel < 20 && moves.Contains(50)
Magic Number,PKHeX,GBRestrictions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\GBRestrictions.cs,IsTradedKadabraG1,The following statement contains a magic number: pk1.CurrentLevel < 20 && moves.Contains(50)
Magic Number,PKHeX.Core.Searching,SearchUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Searching\SearchUtil.cs,FilterByFormat,The following statement contains a magic number: return res.Where(pk => pk.Format <= 2);
Magic Number,PKHeX.Core.Searching,SearchUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Searching\SearchUtil.cs,FilterByFormat,The following statement contains a magic number: format <= 2
Magic Number,PKHeX.Core.Searching,SearchUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Searching\SearchUtil.cs,FilterByFormat,The following statement contains a magic number: return res.Where(pk => pk.Format >= 3);
Magic Number,PKHeX.Core.Searching,SearchUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Searching\SearchUtil.cs,FilterByFormat,The following statement contains a magic number: format >= 3 && format <= 6
Magic Number,PKHeX.Core.Searching,SearchUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Searching\SearchUtil.cs,FilterByFormat,The following statement contains a magic number: format >= 3 && format <= 6
Magic Number,PKHeX.Core.Searching,SearchUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Searching\SearchUtil.cs,FilterByGeneration,The following statement contains a magic number: return generation switch              {                  1 => res.Where(pk => pk.VC || pk.Format < 3)'                  2 => res.Where(pk => pk.VC || pk.Format < 3)'                  _ => res.Where(pk => pk.GenNumber == generation)              };
Magic Number,PKHeX.Core.Searching,SearchUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Searching\SearchUtil.cs,FilterByGeneration,The following statement contains a magic number: return generation switch              {                  1 => res.Where(pk => pk.VC || pk.Format < 3)'                  2 => res.Where(pk => pk.VC || pk.Format < 3)'                  _ => res.Where(pk => pk.GenNumber == generation)              };
Magic Number,PKHeX.Core.Searching,SearchUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Searching\SearchUtil.cs,FilterByGeneration,The following statement contains a magic number: return generation switch              {                  1 => res.Where(pk => pk.VC || pk.Format < 3)'                  2 => res.Where(pk => pk.VC || pk.Format < 3)'                  _ => res.Where(pk => pk.GenNumber == generation)              };
Magic Number,PKHeX.Core.Searching,SearchUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Searching\SearchUtil.cs,FilterByLVL,The following statement contains a magic number: level > 100
Magic Number,PKHeX.Core.Searching,SearchUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Searching\SearchUtil.cs,FilterByEVs,The following statement contains a magic number: return option switch              {                  1 => res.Where(pk => pk.EVTotal == 0)' // None (0)                  2 => res.Where(pk => pk.EVTotal < 128)' // Some (127-0)                  3 => res.Where(pk => pk.EVTotal >= 128 && pk.EVTotal < 508)' // Half (128-507)                  4 => res.Where(pk => pk.EVTotal >= 508)' // Full (508+)                  _ => res              };
Magic Number,PKHeX.Core.Searching,SearchUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Searching\SearchUtil.cs,FilterByEVs,The following statement contains a magic number: return option switch              {                  1 => res.Where(pk => pk.EVTotal == 0)' // None (0)                  2 => res.Where(pk => pk.EVTotal < 128)' // Some (127-0)                  3 => res.Where(pk => pk.EVTotal >= 128 && pk.EVTotal < 508)' // Half (128-507)                  4 => res.Where(pk => pk.EVTotal >= 508)' // Full (508+)                  _ => res              };
Magic Number,PKHeX.Core.Searching,SearchUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Searching\SearchUtil.cs,FilterByEVs,The following statement contains a magic number: return option switch              {                  1 => res.Where(pk => pk.EVTotal == 0)' // None (0)                  2 => res.Where(pk => pk.EVTotal < 128)' // Some (127-0)                  3 => res.Where(pk => pk.EVTotal >= 128 && pk.EVTotal < 508)' // Half (128-507)                  4 => res.Where(pk => pk.EVTotal >= 508)' // Full (508+)                  _ => res              };
Magic Number,PKHeX.Core.Searching,SearchUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Searching\SearchUtil.cs,FilterByEVs,The following statement contains a magic number: return option switch              {                  1 => res.Where(pk => pk.EVTotal == 0)' // None (0)                  2 => res.Where(pk => pk.EVTotal < 128)' // Some (127-0)                  3 => res.Where(pk => pk.EVTotal >= 128 && pk.EVTotal < 508)' // Half (128-507)                  4 => res.Where(pk => pk.EVTotal >= 508)' // Full (508+)                  _ => res              };
Magic Number,PKHeX.Core.Searching,SearchUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Searching\SearchUtil.cs,FilterByEVs,The following statement contains a magic number: return option switch              {                  1 => res.Where(pk => pk.EVTotal == 0)' // None (0)                  2 => res.Where(pk => pk.EVTotal < 128)' // Some (127-0)                  3 => res.Where(pk => pk.EVTotal >= 128 && pk.EVTotal < 508)' // Half (128-507)                  4 => res.Where(pk => pk.EVTotal >= 508)' // Full (508+)                  _ => res              };
Magic Number,PKHeX.Core.Searching,SearchUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Searching\SearchUtil.cs,FilterByEVs,The following statement contains a magic number: return option switch              {                  1 => res.Where(pk => pk.EVTotal == 0)' // None (0)                  2 => res.Where(pk => pk.EVTotal < 128)' // Some (127-0)                  3 => res.Where(pk => pk.EVTotal >= 128 && pk.EVTotal < 508)' // Half (128-507)                  4 => res.Where(pk => pk.EVTotal >= 508)' // Full (508+)                  _ => res              };
Magic Number,PKHeX.Core.Searching,SearchUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Searching\SearchUtil.cs,FilterByEVs,The following statement contains a magic number: return option switch              {                  1 => res.Where(pk => pk.EVTotal == 0)' // None (0)                  2 => res.Where(pk => pk.EVTotal < 128)' // Some (127-0)                  3 => res.Where(pk => pk.EVTotal >= 128 && pk.EVTotal < 508)' // Half (128-507)                  4 => res.Where(pk => pk.EVTotal >= 508)' // Full (508+)                  _ => res              };
Magic Number,PKHeX.Core.Searching,SearchUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Searching\SearchUtil.cs,FilterByIVs,The following statement contains a magic number: return option switch              {                  1 => res.Where(pk => pk.IVTotal <= 90)' // <= 90                  2 => res.Where(pk => pk.IVTotal > 90 && pk.IVTotal <= 120)' // 91-120                  3 => res.Where(pk => pk.IVTotal > 120 && pk.IVTotal <= 150)' // 121-150                  4 => res.Where(pk => pk.IVTotal > 150 && pk.IVTotal < 180)' // 151-179                  5 => res.Where(pk => pk.IVTotal >= 180)' // 180+                  6 => res.Where(pk => pk.IVTotal == 186)' // == 186                  _ => res              };
Magic Number,PKHeX.Core.Searching,SearchUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Searching\SearchUtil.cs,FilterByIVs,The following statement contains a magic number: return option switch              {                  1 => res.Where(pk => pk.IVTotal <= 90)' // <= 90                  2 => res.Where(pk => pk.IVTotal > 90 && pk.IVTotal <= 120)' // 91-120                  3 => res.Where(pk => pk.IVTotal > 120 && pk.IVTotal <= 150)' // 121-150                  4 => res.Where(pk => pk.IVTotal > 150 && pk.IVTotal < 180)' // 151-179                  5 => res.Where(pk => pk.IVTotal >= 180)' // 180+                  6 => res.Where(pk => pk.IVTotal == 186)' // == 186                  _ => res              };
Magic Number,PKHeX.Core.Searching,SearchUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Searching\SearchUtil.cs,FilterByIVs,The following statement contains a magic number: return option switch              {                  1 => res.Where(pk => pk.IVTotal <= 90)' // <= 90                  2 => res.Where(pk => pk.IVTotal > 90 && pk.IVTotal <= 120)' // 91-120                  3 => res.Where(pk => pk.IVTotal > 120 && pk.IVTotal <= 150)' // 121-150                  4 => res.Where(pk => pk.IVTotal > 150 && pk.IVTotal < 180)' // 151-179                  5 => res.Where(pk => pk.IVTotal >= 180)' // 180+                  6 => res.Where(pk => pk.IVTotal == 186)' // == 186                  _ => res              };
Magic Number,PKHeX.Core.Searching,SearchUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Searching\SearchUtil.cs,FilterByIVs,The following statement contains a magic number: return option switch              {                  1 => res.Where(pk => pk.IVTotal <= 90)' // <= 90                  2 => res.Where(pk => pk.IVTotal > 90 && pk.IVTotal <= 120)' // 91-120                  3 => res.Where(pk => pk.IVTotal > 120 && pk.IVTotal <= 150)' // 121-150                  4 => res.Where(pk => pk.IVTotal > 150 && pk.IVTotal < 180)' // 151-179                  5 => res.Where(pk => pk.IVTotal >= 180)' // 180+                  6 => res.Where(pk => pk.IVTotal == 186)' // == 186                  _ => res              };
Magic Number,PKHeX.Core.Searching,SearchUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Searching\SearchUtil.cs,FilterByIVs,The following statement contains a magic number: return option switch              {                  1 => res.Where(pk => pk.IVTotal <= 90)' // <= 90                  2 => res.Where(pk => pk.IVTotal > 90 && pk.IVTotal <= 120)' // 91-120                  3 => res.Where(pk => pk.IVTotal > 120 && pk.IVTotal <= 150)' // 121-150                  4 => res.Where(pk => pk.IVTotal > 150 && pk.IVTotal < 180)' // 151-179                  5 => res.Where(pk => pk.IVTotal >= 180)' // 180+                  6 => res.Where(pk => pk.IVTotal == 186)' // == 186                  _ => res              };
Magic Number,PKHeX.Core.Searching,SearchUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Searching\SearchUtil.cs,FilterByIVs,The following statement contains a magic number: return option switch              {                  1 => res.Where(pk => pk.IVTotal <= 90)' // <= 90                  2 => res.Where(pk => pk.IVTotal > 90 && pk.IVTotal <= 120)' // 91-120                  3 => res.Where(pk => pk.IVTotal > 120 && pk.IVTotal <= 150)' // 121-150                  4 => res.Where(pk => pk.IVTotal > 150 && pk.IVTotal < 180)' // 151-179                  5 => res.Where(pk => pk.IVTotal >= 180)' // 180+                  6 => res.Where(pk => pk.IVTotal == 186)' // == 186                  _ => res              };
Magic Number,PKHeX.Core.Searching,SearchUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Searching\SearchUtil.cs,FilterByIVs,The following statement contains a magic number: return option switch              {                  1 => res.Where(pk => pk.IVTotal <= 90)' // <= 90                  2 => res.Where(pk => pk.IVTotal > 90 && pk.IVTotal <= 120)' // 91-120                  3 => res.Where(pk => pk.IVTotal > 120 && pk.IVTotal <= 150)' // 121-150                  4 => res.Where(pk => pk.IVTotal > 150 && pk.IVTotal < 180)' // 151-179                  5 => res.Where(pk => pk.IVTotal >= 180)' // 180+                  6 => res.Where(pk => pk.IVTotal == 186)' // == 186                  _ => res              };
Magic Number,PKHeX.Core.Searching,SearchUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Searching\SearchUtil.cs,FilterByIVs,The following statement contains a magic number: return option switch              {                  1 => res.Where(pk => pk.IVTotal <= 90)' // <= 90                  2 => res.Where(pk => pk.IVTotal > 90 && pk.IVTotal <= 120)' // 91-120                  3 => res.Where(pk => pk.IVTotal > 120 && pk.IVTotal <= 150)' // 121-150                  4 => res.Where(pk => pk.IVTotal > 150 && pk.IVTotal < 180)' // 151-179                  5 => res.Where(pk => pk.IVTotal >= 180)' // 180+                  6 => res.Where(pk => pk.IVTotal == 186)' // == 186                  _ => res              };
Magic Number,PKHeX.Core.Searching,SearchUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Searching\SearchUtil.cs,FilterByIVs,The following statement contains a magic number: return option switch              {                  1 => res.Where(pk => pk.IVTotal <= 90)' // <= 90                  2 => res.Where(pk => pk.IVTotal > 90 && pk.IVTotal <= 120)' // 91-120                  3 => res.Where(pk => pk.IVTotal > 120 && pk.IVTotal <= 150)' // 121-150                  4 => res.Where(pk => pk.IVTotal > 150 && pk.IVTotal < 180)' // 151-179                  5 => res.Where(pk => pk.IVTotal >= 180)' // 180+                  6 => res.Where(pk => pk.IVTotal == 186)' // == 186                  _ => res              };
Magic Number,PKHeX.Core.Searching,SearchUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Searching\SearchUtil.cs,FilterByIVs,The following statement contains a magic number: return option switch              {                  1 => res.Where(pk => pk.IVTotal <= 90)' // <= 90                  2 => res.Where(pk => pk.IVTotal > 90 && pk.IVTotal <= 120)' // 91-120                  3 => res.Where(pk => pk.IVTotal > 120 && pk.IVTotal <= 150)' // 121-150                  4 => res.Where(pk => pk.IVTotal > 150 && pk.IVTotal < 180)' // 151-179                  5 => res.Where(pk => pk.IVTotal >= 180)' // 180+                  6 => res.Where(pk => pk.IVTotal == 186)' // == 186                  _ => res              };
Magic Number,PKHeX.Core.Searching,SearchUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Searching\SearchUtil.cs,FilterByIVs,The following statement contains a magic number: return option switch              {                  1 => res.Where(pk => pk.IVTotal <= 90)' // <= 90                  2 => res.Where(pk => pk.IVTotal > 90 && pk.IVTotal <= 120)' // 91-120                  3 => res.Where(pk => pk.IVTotal > 120 && pk.IVTotal <= 150)' // 121-150                  4 => res.Where(pk => pk.IVTotal > 150 && pk.IVTotal < 180)' // 151-179                  5 => res.Where(pk => pk.IVTotal >= 180)' // 180+                  6 => res.Where(pk => pk.IVTotal == 186)' // == 186                  _ => res              };
Magic Number,PKHeX.Core.Searching,SearchUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Searching\SearchUtil.cs,FilterByIVs,The following statement contains a magic number: return option switch              {                  1 => res.Where(pk => pk.IVTotal <= 90)' // <= 90                  2 => res.Where(pk => pk.IVTotal > 90 && pk.IVTotal <= 120)' // 91-120                  3 => res.Where(pk => pk.IVTotal > 120 && pk.IVTotal <= 150)' // 121-150                  4 => res.Where(pk => pk.IVTotal > 150 && pk.IVTotal < 180)' // 151-179                  5 => res.Where(pk => pk.IVTotal >= 180)' // 180+                  6 => res.Where(pk => pk.IVTotal == 186)' // == 186                  _ => res              };
Magic Number,PKHeX.Core.Searching,SearchUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Searching\SearchUtil.cs,FilterByIVs,The following statement contains a magic number: return option switch              {                  1 => res.Where(pk => pk.IVTotal <= 90)' // <= 90                  2 => res.Where(pk => pk.IVTotal > 90 && pk.IVTotal <= 120)' // 91-120                  3 => res.Where(pk => pk.IVTotal > 120 && pk.IVTotal <= 150)' // 121-150                  4 => res.Where(pk => pk.IVTotal > 150 && pk.IVTotal < 180)' // 151-179                  5 => res.Where(pk => pk.IVTotal >= 180)' // 180+                  6 => res.Where(pk => pk.IVTotal == 186)' // == 186                  _ => res              };
Magic Number,PKHeX.Core.Searching,SearchUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Searching\SearchUtil.cs,FilterByIVs,The following statement contains a magic number: return option switch              {                  1 => res.Where(pk => pk.IVTotal <= 90)' // <= 90                  2 => res.Where(pk => pk.IVTotal > 90 && pk.IVTotal <= 120)' // 91-120                  3 => res.Where(pk => pk.IVTotal > 120 && pk.IVTotal <= 150)' // 121-150                  4 => res.Where(pk => pk.IVTotal > 150 && pk.IVTotal < 180)' // 151-179                  5 => res.Where(pk => pk.IVTotal >= 180)' // 180+                  6 => res.Where(pk => pk.IVTotal == 186)' // == 186                  _ => res              };
Magic Number,PKHeX.Core.Searching,SearchUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Searching\SearchUtil.cs,HashByDetails,The following statement contains a magic number: return pk.Format switch              {                  1 => $"{pk.Species:000}{((PK1) pk).DV16:X4}"'                  2 => $"{pk.Species:000}{((PK2) pk).DV16:X4}"'                  _ => $"{pk.Species:000}{pk.PID:X8}{string.Join(" "' pk.IVs)}{pk.AltForm:00}"              };
Magic Number,PKHeX.Core.Searching,SearchUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\Searching\SearchUtil.cs,HashByPID,The following statement contains a magic number: return pk.Format switch              {                  1 => $"{((PK1) pk).DV16:X4}"'                  2 => $"{((PK2) pk).DV16:X4}"'                  _ => $"{pk.PID:X8}"              };
Missing Default,PKHeX.Core,BatchEditing,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\Bulk\BatchEditing.cs,SetInstructionScreenedValue,The following switch statement is missing a default case: switch (i.PropertyName)              {                  case nameof(PKM.Species): i.SetScreenedValue(GameInfo.Strings.specieslist); return;                  case nameof(PKM.HeldItem): i.SetScreenedValue(GameInfo.Strings.itemlist); return;                  case nameof(PKM.Ability): i.SetScreenedValue(GameInfo.Strings.abilitylist); return;                  case nameof(PKM.Nature): i.SetScreenedValue(GameInfo.Strings.natures); return;                  case nameof(PKM.Ball): i.SetScreenedValue(GameInfo.Strings.balllist); return;                  case nameof(PKM.Move1):                  case nameof(PKM.Move2):                  case nameof(PKM.Move3):                  case nameof(PKM.Move4):                  case nameof(PKM.RelearnMove1):                  case nameof(PKM.RelearnMove2):                  case nameof(PKM.RelearnMove3):                  case nameof(PKM.RelearnMove4):                      i.SetScreenedValue(GameInfo.Strings.movelist); return;              }
Missing Default,PKHeX.Core,CommonEdits,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\CommonEdits.cs,GetSaneGender,The following switch statement is missing a default case: switch (gt)              {                  case 255: return 2; // Genderless                  case 254: return 1; // Female-Only                  case 0: return 0; // Male-Only              }
Missing Default,PKHeX.Core,CommonEdits,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\CommonEdits.cs,ToggleMarking,The following switch statement is missing a default case: switch (pk.Format)              {                  case 3:                  case 4:                  case 5:                  case 6: // on/off                      markings[index] ^= 1; // toggle                      pk.Markings = markings;                      break;                  case 7: // 0 (none) | 1 (blue) | 2 (pink)                  case 8:                      markings[index] = (markings[index] + 1) % 3; // cycle 0->1->2->0...                      pk.Markings = markings;                      break;              }
Missing Default,PKHeX.Core,EditPKMUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Editing\PKM\EditPKMUtil.cs,TemplateFields,The following switch statement is missing a default case: switch (tr)                  {                      case SAV1 s1:                          pk12.OT_Trash = s1.OT_Trash;                          break;                      case SAV2 s2:                          pk12.OT_Trash = s2.OT_Trash;                          break;                  }
Missing Default,PKHeX.Core,GameDataSource,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Game\GameStrings\GameDataSource.cs,GetLocationList,The following switch statement is missing a default case: switch (version)              {                  case GameVersion.CXD:                      if (currentGen == 3)                          return MetGen3CXD;                      break;                    case GameVersion.R:                  case GameVersion.S:                      if (currentGen == 3)                          return MetGen3.OrderByDescending(loc => loc.Value <= 87).ToList(); // Ferry                      break;                  case GameVersion.E:                      if (currentGen == 3)                          return MetGen3.OrderByDescending(loc => loc.Value <= 87 || (loc.Value >= 196 && loc.Value <= 212)).ToList(); // Trainer Hill                      break;                  case GameVersion.FR:                  case GameVersion.LG:                      if (currentGen == 3)                          return MetGen3.OrderByDescending(loc => loc.Value > 87 && loc.Value < 197).ToList(); // Celadon Dept.                      break;                    case GameVersion.D:                  case GameVersion.P:                      if (currentGen == 4 || (currentGen >= 5 && egg))                          return MetGen4.Take(4).Concat(MetGen4.Skip(4).OrderByDescending(loc => loc.Value <= 111)).ToList(); // Battle Park                      break;                    case GameVersion.Pt:                      if (currentGen == 4 || (currentGen >= 5 && egg))                          return MetGen4.Take(4).Concat(MetGen4.Skip(4).OrderByDescending(loc => loc.Value <= 125)).ToList(); // Rock Peak Ruins                      break;                    case GameVersion.HG:                  case GameVersion.SS:                      if (currentGen == 4 || (currentGen >= 5 && egg))                          return MetGen4.Take(4).Concat(MetGen4.Skip(4).OrderByDescending(loc => loc.Value > 125 && loc.Value < 234)).ToList(); // Celadon Dept.                      break;                    case GameVersion.B:                  case GameVersion.W:                      return MetGen5;                    case GameVersion.B2:                  case GameVersion.W2:                      return MetGen5.Take(3).Concat(MetGen5.Skip(3).OrderByDescending(loc => loc.Value <= 116)).ToList(); // Abyssal Ruins                    case GameVersion.X:                  case GameVersion.Y:                      return MetGen6.Take(3).Concat(MetGen6.Skip(3).OrderByDescending(loc => loc.Value <= 168)).ToList(); // Unknown Dungeon                    case GameVersion.OR:                  case GameVersion.AS:                      return MetGen6.Take(3).Concat(MetGen6.Skip(3).OrderByDescending(loc => loc.Value > 168 && loc.Value <= 354)).ToList(); // Secret Base                    case GameVersion.SN:                  case GameVersion.MN:                      return MetGen7.Take(3).Concat(MetGen7.Skip(3).OrderByDescending(loc => loc.Value < 200)).ToList(); // Outer Cape                    case GameVersion.US:                  case GameVersion.UM:                    case GameVersion.RD:                  case GameVersion.BU:                  case GameVersion.GN:                  case GameVersion.YW:                    case GameVersion.GD:                  case GameVersion.SV:                  case GameVersion.C:                      return MetGen7.Take(3).Concat(MetGen7.Skip(3).OrderByDescending(loc => loc.Value < 234)).ToList(); // Dividing Peak Tunnel                    case GameVersion.GP:                  case GameVersion.GE:                  case GameVersion.GO:                      return MetGen7GG.Take(3).Concat(MetGen7GG.Skip(3).OrderByDescending(loc => loc.Value <= 54)).ToList(); // Pokémon League                    case GameVersion.SW:                  case GameVersion.SH:                      return MetGen8.Take(3).Concat(MetGen8.Skip(3).OrderByDescending(loc => loc.Value < 400)).ToList(); // todo              }
Missing Default,PKHeX.Core,EncounterArea7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Areas\EncounterArea7.cs,GetFilteredSlots,The following switch statement is missing a default case: switch (species)              {                  case 744 when form == 1: // Rockruff Event                  case 745 when form == 2: // Lycanroc Event                      yield break;              }
Missing Default,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,GetShedinjaEvolveMoves,The following switch statement is missing a default case: switch (generation)              {                  case 3: // Ninjask have the same learnset in every gen 3 games                      if (pkm.InhabitedGeneration(3))                          return LevelUpE[291].GetMoves(lvl' 20);                      break;                  case 4: // Ninjask have the same learnset in every gen 4 games                      if (pkm.InhabitedGeneration(4))                          return LevelUpPt[291].GetMoves(lvl' 20);                      break;              }
Missing Default,PKHeX.Core,Legal,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Core.cs,GetBaseEggMoves,The following switch statement is missing a default case: switch (gameSource)              {                  case GameVersion.GSC:                  case GameVersion.GS:                      // If checking back-transfer specimen (GSC->RBY)' remove moves that must be deleted prior to transfer                      int[] getRBYCompatibleMoves(int[] moves) => pkm.Format == 1 ? moves.Where(m => m <= MaxMoveID_1).ToArray() : moves;                      if (pkm.InhabitedGeneration(2))                          return getRBYCompatibleMoves(LevelUpGS[species].GetMoves(lvl));                      break;                  case GameVersion.C:                      if (pkm.InhabitedGeneration(2))                          return getRBYCompatibleMoves(LevelUpC[species].GetMoves(lvl));                      break;                    case GameVersion.R:                  case GameVersion.S:                  case GameVersion.RS:                      if (pkm.InhabitedGeneration(3))                          return LevelUpRS[species].GetMoves(lvl);                      break;                  case GameVersion.E:                      if (pkm.InhabitedGeneration(3))                          return LevelUpE[species].GetMoves(lvl);                      break;                  case GameVersion.FR:                  case GameVersion.LG:                  case GameVersion.FRLG:                      // only difference in FR/LG is deoxys which doesn't breed.                      if (pkm.InhabitedGeneration(3))                          return LevelUpFR[species].GetMoves(lvl);                      break;                    case GameVersion.D:                  case GameVersion.P:                  case GameVersion.DP:                      if (pkm.InhabitedGeneration(4))                          return LevelUpDP[species].GetMoves(lvl);                      break;                  case GameVersion.Pt:                      if (pkm.InhabitedGeneration(4))                          return LevelUpPt[species].GetMoves(lvl);                      break;                  case GameVersion.HG:                  case GameVersion.SS:                  case GameVersion.HGSS:                      if (pkm.InhabitedGeneration(4))                          return LevelUpHGSS[species].GetMoves(lvl);                      break;                    case GameVersion.B:                  case GameVersion.W:                  case GameVersion.BW:                      if (pkm.InhabitedGeneration(5))                          return LevelUpBW[species].GetMoves(lvl);                      break;                    case GameVersion.B2:                  case GameVersion.W2:                  case GameVersion.B2W2:                      if (pkm.InhabitedGeneration(5))                          return LevelUpB2W2[species].GetMoves(lvl);                      break;                    case GameVersion.X:                  case GameVersion.Y:                  case GameVersion.XY:                      if (pkm.InhabitedGeneration(6))                          return LevelUpXY[species].GetMoves(lvl);                      break;                    case GameVersion.AS:                  case GameVersion.OR:                  case GameVersion.ORAS:                      if (pkm.InhabitedGeneration(6))                          return LevelUpAO[species].GetMoves(lvl);                      break;                    case GameVersion.SN:                  case GameVersion.MN:                  case GameVersion.SM:                      if (species > MaxSpeciesID_7)                          break;                      if (pkm.InhabitedGeneration(7))                      {                          int index = PersonalTable.SM.GetFormeIndex(species' form);                          return LevelUpSM[index].GetMoves(lvl);                      }                      break;                    case GameVersion.US:                  case GameVersion.UM:                  case GameVersion.USUM:                      if (pkm.InhabitedGeneration(7))                      {                          int index = PersonalTable.USUM.GetFormeIndex(species' form);                          return LevelUpUSUM[index].GetMoves(lvl);                      }                      break;                    case GameVersion.SW:                  case GameVersion.SH:                  case GameVersion.SWSH:                      if (pkm.InhabitedGeneration(8))                      {                          int index = PersonalTable.SWSH.GetFormeIndex(species' form);                          return LevelUpSWSH[index].GetMoves(lvl);                      }                      break;              }
Missing Default,PKHeX.Core,EncounterEvent,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\EncounterEvent.cs,RefreshMGDB,The following switch statement is missing a default case: switch (gift)                  {                      case PCD pcd: g4.Add(pcd); continue;                      case PGF pgf: g5.Add(pgf); continue;                      case WC6 wc6: g6.Add(wc6); continue;                      case WC7 wc7: g7.Add(wc7); continue;                      case WB7 wb7: b7.Add(wb7); continue;                      case WC8 wc8: g8.Add(wc8); continue;                  }
Missing Default,PKHeX.Core,Encounters4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters4.cs,GetEncounterTypeBySlotDPPt,The following switch statement is missing a default case: switch (Type)              {                  case SlotType.Pokeradar:                  case SlotType.Pokeradar_Safari:                  case SlotType.Swarm:                  case SlotType.Grass: return GrassType;                  case SlotType.Surf:                  case SlotType.Old_Rod:                  case SlotType.Good_Rod:                  case SlotType.Super_Rod:                  case SlotType.Surf_Safari:                  case SlotType.Old_Rod_Safari:                  case SlotType.Good_Rod_Safari:                  case SlotType.Super_Rod_Safari: return EncounterType.Surfing_Fishing;                  case SlotType.Grass_Safari: return EncounterType.MarshSafari;                  case SlotType.HoneyTree: return EncounterType.None;              }
Missing Default,PKHeX.Core,Encounters4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Data\Encounters4.cs,GetEncounterTypeBySlotHGSS,The following switch statement is missing a default case: switch (Type)              {                  // HGSS Safari encounters have normal water/grass encounter type' not safari encounter type                  case SlotType.Grass:                  case SlotType.Grass_Safari:                  case SlotType.BugContest: return GrassType;                    case SlotType.Surf:                  case SlotType.Old_Rod:                  case SlotType.Good_Rod:                  case SlotType.Super_Rod:                  case SlotType.Surf_Safari:                  case SlotType.Old_Rod_Safari:                  case SlotType.Good_Rod_Safari:                  case SlotType.Super_Rod_Safari: return EncounterType.Surfing_Fishing;                    case SlotType.Rock_Smash:                      if (GrassType == EncounterType.RockSmash)                          return EncounterType.RockSmash | EncounterType.Building_EnigmaStone;                      if (HeadbuttType == EncounterType.Building_EnigmaStone)                          return HeadbuttType;                      if (GrassType == EncounterType.Cave_HallOfOrigin)                          return GrassType;                      return EncounterType.None;                    case SlotType.Headbutt_Special:                  case SlotType.Headbutt: return HeadbuttType | EncounterType.None;                      // not sure on if "None" should always be allowed' but this is so uncommon it shouldn't matter (gen7 doesn't keep this value anyway).              }
Missing Default,PKHeX.Core,EncounterEgg,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\EncounterEgg.cs,SetAltForm,The following switch statement is missing a default case: switch (Species)              {                  case (int)Core.Species.Minior:                      pk.AltForm = Util.Rand.Next(7' 14);                      break;                  case (int)Core.Species.Scatterbug:                  case (int)Core.Species.Spewpa:                  case (int)Core.Species.Vivillon:                      pk.AltForm = Legal.GetVivillonPattern((byte)SAV.Country' (byte)SAV.SubRegion);                      break;              }
Missing Default,PKHeX.Core,EncounterStatic,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\EncounterStatic.cs,ConvertToPKM,The following switch statement is missing a default case: switch (pk)              {                  case PK3 pk3 when this is EncounterStaticShadow:                      pk3.RibbonNational = true;                      break;                  case PK4 pk4 when this is EncounterStaticTyped t:                      pk4.EncounterType = t.TypeEncounter.GetIndex();                      break;                  case PK6 pk6:                      pk6.SetRandomMemory6();                      break;              }
Missing Default,PKHeX.Core,EncounterStatic,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\EncounterStatic.cs,SanityCheckVersion,The following switch statement is missing a default case: switch (Species)              {                  case (int)Core.Species.Darkrai when Location == 079: // DP Darkrai                  case (int)Core.Species.Shaymin when Location == 063: // DP Shaymin                      version = GameVersion.Pt;                      return;              }
Missing Default,PKHeX.Core,EncounterTrade,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\EncounterTrade.cs,UpdateEdgeCase,The following switch statement is missing a default case: switch (Generation)              {                  case 3 when Species == (int)Core.Species.Jynx && pkm.Version == (int) GameVersion.LG && pkm.Language == (int) LanguageID.Italian:                      // Italian LG Jynx untranslated from English name                      pkm.OT_Name = GetOT((int)LanguageID.English);                      pkm.SetNickname(GetNickname((int)LanguageID.English));                      break;                    case 4 when Version == GameVersion.DPPt && Species == (int)Core.Species.Magikarp: // Meister Magikarp                      // Has German Language ID for all except German origin' which is English                      pkm.Language = (int)(pkm.Language == (int)LanguageID.German ? LanguageID.English : LanguageID.German);                      break;                    case 4 when Version == GameVersion.DPPt && (pkm.Version == (int)GameVersion.D || pkm.Version == (int)GameVersion.P):                      // DP English origin are Japanese lang                      pkm.Language = (int)LanguageID.Japanese;                      break;                    case 4 when Version == GameVersion.HGSS && Species == (int)Core.Species.Pikachu: // Pikachu                      // Has English Language ID for all except English origin' which is French                      pkm.Language = (int)(pkm.Language == (int)LanguageID.English ? LanguageID.French : LanguageID.English);                      break;                    case 5 when Version == GameVersion.BW && pkm.Language == (int)LanguageID.Japanese:                      // Trades for JPN games have language ID of 0' not 1.                      pkm.Language = 0;                      break;              }
Missing Default,PKHeX.Core,EncounterTrade,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\EncounterTrade.cs,IsValidTradeOT12,The following switch statement is missing a default case: switch (Species)                  {                      case (int)Core.Species.Voltorb:                          // Spanish FALCÁN trade loses the accented A on transfer                          if (OT == "FALCÁN")                              return false;                          if (OT == "FALC N")                              return true;                          break;                      case (int)Core.Species.Shuckle:                          // Spanish MANÍA trade loses the accented I on transfer                          if (OT == "MANÍA")                              return false;                          if (OT == "MAN A")                              return true;                          break;                  }
Missing Default,PKHeX.Core,EncounterGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Generator\EncounterGenerator.cs,GenerateRawEncounters12,The following switch statement is missing a default case: switch (s.Version)                  {                      case GameVersion.Stadium:                      case GameVersion.Stadium2:                          deferred.Add(s);                          continue;                      case GameVersion.EventsGBGen2:                          if (!s.EggEncounter && !pkm.HasOriginalMetLocation)                              continue;                          if (pkm.Japanese)                              deferred.Add(s);                          continue;                      case GameVersion.C when gsc && pkm.Format == 2: // Crystal specific data needs to be present                          if (!s.EggEncounter && !pkm.HasOriginalMetLocation)                              continue;                          if (s.Species == 251 && ParseSettings.AllowGBCartEra) // no celebi' the GameVersion.EventsGBGen2 will pass thru                              continue;                          break;                  }
Missing Default,PKHeX.Core,EncounterMovesetGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Generator\EncounterMovesetGenerator.cs,IsUnobtainable,The following switch statement is missing a default case: switch (slot.Generation)              {                  case 2:                      if ((slot.Type & SlotType.Safari) != 0) // Safari Zone is unavailable in Gen 2.                          return true;                        if ((slot.Type & SlotType.Headbutt) != 0) // Unreachable Headbutt Trees.                          return Encounters2.GetGSCHeadbuttAvailability(slot' pk.TID) != TreeEncounterAvailable.ValidTree;                      break;                  case 4:                      if (slot.Location == 193 && slot.Type == SlotType.Surf) // Johto Route 45 surfing encounter. Unreachable Water tiles.                          return true;                      break;              }
Missing Default,PKHeX.Core,EncounterMovesetGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Generator\EncounterMovesetGenerator.cs,IsUnobtainable,The following switch statement is missing a default case: switch (enc.Generation)              {                  case 4 when enc is EncounterStaticTyped t && enc.Location == 193:                      if (t.TypeEncounter == EncounterType.Surfing_Fishing) // Johto Route 45 surfing encounter. Unreachable Water tiles.                          return true; // only hits for Roamer Raikou                      break;                  case 4:                      switch (pk.Species)                      {                          case (int)Species.Darkrai when enc.Location == 079 && !pk.Pt: // DP Darkrai                              return true;                          case (int)Species.Shaymin when enc.Location == 063 && !pk.Pt: // DP Shaymin                              return true;                          case (int)Species.Arceus when enc.Location == 086: // Azure Flute Arceus                              return true;                      }                      break;              }
Missing Default,PKHeX.Core,EncounterMovesetGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Generator\EncounterMovesetGenerator.cs,IsUnobtainable,The following switch statement is missing a default case: switch (pk.Species)                      {                          case (int)Species.Darkrai when enc.Location == 079 && !pk.Pt: // DP Darkrai                              return true;                          case (int)Species.Shaymin when enc.Location == 063 && !pk.Pt: // DP Shaymin                              return true;                          case (int)Species.Arceus when enc.Location == 086: // Azure Flute Arceus                              return true;                      }
Missing Default,PKHeX.Core,EncounterSuggestion,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Information\EncounterSuggestion.cs,GetSuggestedEggMetLocation,The following switch statement is missing a default case: switch ((GameVersion)pkm.Version)              {                  case GameVersion.R:                  case GameVersion.S:                  case GameVersion.E:                  case GameVersion.FR:                  case GameVersion.LG:                      return pkm.Format switch                      {                          3 => (pkm.FRLG ? Locations.HatchLocationFRLG : Locations.HatchLocationRSE)'                          4 => Locations.Transfer3' // Pal Park                          _ => Locations.Transfer4'                      };                    case GameVersion.D:                  case GameVersion.P:                  case GameVersion.Pt:                      return pkm.Format > 4 ? Locations.Transfer4 /* Transporter */ : Locations.HatchLocationDPPt;                  case GameVersion.HG:                  case GameVersion.SS:                      return pkm.Format > 4 ? Locations.Transfer4 /* Transporter */ : Locations.HatchLocationHGSS;                    case GameVersion.B:                  case GameVersion.W:                  case GameVersion.B2:                  case GameVersion.W2:                      return Locations.HatchLocation5;                    case GameVersion.X:                  case GameVersion.Y:                      return Locations.HatchLocation6XY;                  case GameVersion.AS:                  case GameVersion.OR:                      return Locations.HatchLocation6AO;                    case GameVersion.SN:                  case GameVersion.MN:                  case GameVersion.US:                  case GameVersion.UM:                      return Locations.HatchLocation7;                    case GameVersion.SW:                  case GameVersion.SH:                      return Locations.HatchLocation8;                    case GameVersion.GD:                  case GameVersion.SV:                  case GameVersion.C:                  case GameVersion.GSC:                  case GameVersion.RBY:                      return pkm.Format > 2 ? Legal.Transfer2 : pkm.Met_Level == 0 ? 0 : Locations.HatchLocationC;              }
Missing Default,PKHeX.Core,ValidEncounterMoves,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Information\ValidEncounterMoves.cs,AddEdgeCaseMoves,The following switch statement is missing a default case: switch (encounter)              {                  case EncounterStatic8N r when pkm.Met_Location == Encounters8Nest.SharedNest && !EncounterStatic8N.IsHighestLevelTier(pkm.Met_Level):                      moves.AddRange(MoveLevelUp.GetMovesLevelUp(pkm' r.Species' -1' -1' 60' r.Form' GameVersion.SW' false' 8));                      break;              }
Missing Default,PKHeX.Core,EncounterVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\EncounterVerifier.cs,VerifyWildEncounterGen2,The following switch statement is missing a default case: switch (encounter.Type)              {                  // Fishing in the beta gen 2 Safari Zone                  case SlotType.Old_Rod_Safari:                  case SlotType.Good_Rod_Safari:                  case SlotType.Super_Rod_Safari:                      return new CheckResult(Severity.Invalid' LG2InvalidTileSafari' CheckIdentifier.Encounter);              }
Missing Default,PKHeX.Core,EncounterVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\EncounterVerifier.cs,VerifyWildEncounterCrystal,The following switch statement is missing a default case: switch (encounter.Type)              {                  case SlotType.Headbutt:                  case SlotType.Headbutt_Special:                      return VerifyWildEncounterCrystalHeadbutt(pkm' encounter);                    case SlotType.Old_Rod:                  case SlotType.Good_Rod:                  case SlotType.Super_Rod:                      switch (encounter.Location)                      {                          case 19: // National Park                              return new CheckResult(Severity.Invalid' LG2InvalidTilePark' CheckIdentifier.Encounter);                          case 76: // Route 14                              return new CheckResult(Severity.Invalid' LG2InvalidTileR14' CheckIdentifier.Encounter);                      }                      break;              }
Missing Default,PKHeX.Core,EncounterVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\EncounterVerifier.cs,VerifyWildEncounterCrystal,The following switch statement is missing a default case: switch (encounter.Location)                      {                          case 19: // National Park                              return new CheckResult(Severity.Invalid' LG2InvalidTilePark' CheckIdentifier.Encounter);                          case 76: // Route 14                              return new CheckResult(Severity.Invalid' LG2InvalidTileR14' CheckIdentifier.Encounter);                      }
Missing Default,PKHeX.Core,EncounterVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\EncounterVerifier.cs,VerifyEncounterWild,The following switch statement is missing a default case: switch (pkm.GenNumber)              {                  case 4:                      if (slot.Location == 193 && slot.Type == SlotType.Surf) // surfing in Johto Route 45                          return new CheckResult(Severity.Invalid' LG4InvalidTileR45Surf' CheckIdentifier.Encounter);                      break;              }
Missing Default,PKHeX.Core,EncounterVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\EncounterVerifier.cs,VerifyEncounterStatic,The following switch statement is missing a default case: switch (pkm.GenNumber)              {                  case 3:                      if (s is EncounterStaticShadow w && w.EReader && pkm.Language != (int)LanguageID.Japanese) // Non-JP E-reader Pokemon                          return new CheckResult(Severity.Invalid' LG3EReader' CheckIdentifier.Encounter);                      if (pkm.Species == (int)Species.Mew && s.Location == 201 && pkm.Language != (int)LanguageID.Japanese) // Non-JP Mew (Old Sea Map)                          return new CheckResult(Severity.Invalid' LEncUnreleasedEMewJP' CheckIdentifier.Encounter);                      break;                  case 4:                      switch (pkm.Species)                      {                          case (int)Species.Darkrai when s.Location == 079 && !pkm.Pt: // DP Darkrai                              return new CheckResult(Severity.Invalid' LEncUnreleasedPtDarkrai' CheckIdentifier.Encounter);                          case (int)Species.Shaymin when s.Location == 063 && !pkm.Pt:// DP Shaymin                              return new CheckResult(Severity.Invalid' LEncUnreleasedPtShaymin' CheckIdentifier.Encounter);                          case (int)Species.Arceus when s.Location == 086: // Azure Flute Arceus                              return new CheckResult(Severity.Invalid' LEncUnreleasedHoOArceus' CheckIdentifier.Encounter);                      }                      if (s.Location == 193 && s is EncounterStaticTyped t && t.TypeEncounter == EncounterType.Surfing_Fishing) // Roaming pokemon surfing in Johto Route 45                          return new CheckResult(Severity.Invalid' LG4InvalidTileR45Surf' CheckIdentifier.Encounter);                      break;                  case 7:                      if (s.EggLocation == Locations.Daycare5 && pkm.RelearnMoves.Any(m => m != 0)) // eevee gift egg                          return new CheckResult(Severity.Invalid' LEncStaticRelearn' CheckIdentifier.RelearnMove); // not gift egg                      break;              }
Missing Default,PKHeX.Core,EncounterVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\EncounterVerifier.cs,VerifyEncounterStatic,The following switch statement is missing a default case: switch (pkm.Species)                      {                          case (int)Species.Darkrai when s.Location == 079 && !pkm.Pt: // DP Darkrai                              return new CheckResult(Severity.Invalid' LEncUnreleasedPtDarkrai' CheckIdentifier.Encounter);                          case (int)Species.Shaymin when s.Location == 063 && !pkm.Pt:// DP Shaymin                              return new CheckResult(Severity.Invalid' LEncUnreleasedPtShaymin' CheckIdentifier.Encounter);                          case (int)Species.Arceus when s.Location == 086: // Azure Flute Arceus                              return new CheckResult(Severity.Invalid' LEncUnreleasedHoOArceus' CheckIdentifier.Encounter);                      }
Missing Default,PKHeX.Core,EncounterVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\EncounterVerifier.cs,VerifyEncounterEvent,The following switch statement is missing a default case: switch (MatchedGift)              {                  case PCD pcd:                      if (!pcd.CanBeReceivedBy(pkm.Version) && pcd.Gift.PK.Version == 0)                          return new CheckResult(Severity.Invalid' string.Format(L_XMatches0_1' MatchedGift.CardHeader' $"-- {LEncGiftVersionNotDistributed}")' CheckIdentifier.Encounter);                      break;              }
Missing Default,PKHeX.Core,VerifyCurrentMoves,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\VerifyCurrentMoves.cs,ParseMovesByGeneration,The following switch statement is missing a default case: switch (gen)              {                  case 1:                  case 2:                      ParseMovesByGeneration12(pkm' res' learnInfo.Source.CurrentMoves' gen' info' learnInfo);                      break;                    case 3:                  case 4:                      if (pkm.Format > gen)                          FlagIncompatibleTransferHMs45(res' learnInfo.Source.CurrentMoves' gen' HMLearned' KnowDefogWhirlpool);                      break;              }
Missing Default,PKHeX.Core,VerifyCurrentMoves,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Encounters\Verifiers\VerifyCurrentMoves.cs,ParseEvolutionLevelupMove,The following switch statement is missing a default case: switch (pkm.Species)              {                  case (int)Species.MrMime: // Mr. Mime (Mime Jr with Mimic)                  case (int)Species.Sudowoodo: // Sudowoodo (Bonsly with Mimic)                      ValidMoves.Add(102);                      break;                  case (int)Species.Ambipom: // Ambipom (Aipom with Double Hit)                      ValidMoves.Add(458);                      break;                  case (int)Species.Lickilicky: // Lickilicky (Lickitung with Rollout)                      ValidMoves.Add(205);                      break;                  case (int)Species.Tangrowth: // Tangrowth (Tangela with Ancient Power)                  case (int)Species.Yanmega: // Yanmega (Yanma with Ancient Power)                  case (int)Species.Mamoswine: // Mamoswine (Piloswine with Ancient Power)                      ValidMoves.Add(246);                      break;                  case (int)Species.Sylveon: // Sylveon (Eevee with Fairy Move)                      // Add every fairy moves without cheking if eevee learn it or not' pokemon moves are determined legal before this function                      ValidMoves.AddRange(Legal.FairyMoves);                      break;                  case (int)Species.Tsareena: // Tsareena (Steenee with Stomp)                      ValidMoves.Add(023);                      break;              }
Missing Default,PKHeX.Core,MoveEgg,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveEgg.cs,GetRelearnLVLMoves,The following switch statement is missing a default case: switch (version)              {                  case GameVersion.X:                  case GameVersion.Y:                      return getMoves(LevelUpXY' PersonalTable.XY);                  case GameVersion.AS:                  case GameVersion.OR:                      return getMoves(LevelUpAO' PersonalTable.AO);                    case GameVersion.SN:                  case GameVersion.MN:                      if (species > MaxSpeciesID_7)                          break;                      return getMoves(LevelUpSM' PersonalTable.SM);                  case GameVersion.US:                  case GameVersion.UM:                      return getMoves(LevelUpUSUM' PersonalTable.USUM);                    case GameVersion.SW:                  case GameVersion.SH:                      return getMoves(LevelUpSWSH' PersonalTable.SWSH);              }
Missing Default,PKHeX.Core,MoveLevelUp,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveLevelUp.cs,GetIsLevelUpMove,The following switch statement is missing a default case: switch (generation)              {                  case 1: return GetIsLevelUp1(species' move' lvl' form' minlvlG1' version);                  case 2 when move > MaxMoveID_1 && pkm.LearnMovesNew2Disallowed(): return LearnNONE;                  case 2: return GetIsLevelUp2(species' move' lvl' form' minlvlG2' pkm.Korean' version);                    case 3: return GetIsLevelUp3(species' move' lvl' form' version);                  case 4: return GetIsLevelUp4(species' move' lvl' form' version);                  case 5: return GetIsLevelUp5(species' move' lvl' form' version);                  case 6: return GetIsLevelUp6(species' move' lvl' form' version);                  case 7: return GetIsLevelUp7(species' move' form' version); // move reminder can give any move 1-100                  case 8: return GetIsLevelUp8(species' move' lvl' form' version);              }
Missing Default,PKHeX.Core,MoveLevelUp,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveLevelUp.cs,GetIsLevelUp1,The following switch statement is missing a default case: switch (ver)              {                  case Any: case RBY:                      var first = LearnRB.GetIsLevelUpG1(species' form' move' max' min);                      var second = LearnY.GetIsLevelUpG1(species' form' move' max' min);                      if (!first.IsLevelUp)                          return second;                      if (!second.IsLevelUp)                          return first;                      return first.Level > second.Level ? second : first;                    case RD: case BU: case GN: case RB:                      return LearnRB.GetIsLevelUpG1(species' form' move' max' min);                  case YW:                      return LearnY.GetIsLevelUpG1(species' form' move' max' min);              }
Missing Default,PKHeX.Core,MoveLevelUp,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveLevelUp.cs,GetIsLevelUp2,The following switch statement is missing a default case: switch (ver)              {                  case Any: case GSC:                      var first = LearnGS.GetIsLevelUpMin(species' move' max' min' form);                      if (first.IsLevelUp || korean)                          return first;                      return LearnC.GetIsLevelUpMin(species' move' max' min' form);                    case GD: case SV: case GS:                      return LearnGS.GetIsLevelUpMin(species' move' max' min' form);                  case C when !korean:                      return LearnC.GetIsLevelUpMin(species' move' max' min' form);              }
Missing Default,PKHeX.Core,MoveLevelUp,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveLevelUp.cs,GetIsLevelUp3,The following switch statement is missing a default case: switch (ver)              {                  case Any:                      var first = LearnRSE.GetIsLevelUp(species' form' move' lvl);                      if (first.IsLevelUp)                          return first;                      return LearnFRLG.GetIsLevelUp(species' form' move' lvl);                    case R: case S: case E: case RS: case RSE:                      return LearnRSE.GetIsLevelUp(species' form' move' lvl);                  case FR: case LG: case FRLG:                      return LearnFRLG.GetIsLevelUp(species' form' move' lvl);              }
Missing Default,PKHeX.Core,MoveLevelUp,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveLevelUp.cs,GetIsLevelUp4,The following switch statement is missing a default case: switch (ver)              {                  case Any: case DPPt:                      var first = LearnDP.GetIsLevelUp(species' form' move' lvl);                      if (first.IsLevelUp)                          return first;                      var second = LearnPt.GetIsLevelUp(species' form' move' lvl);                      if (second.IsLevelUp)                          return second;                      if (ver == DPPt) // stop here                          return LearnNONE;                      return LearnHGSS.GetIsLevelUp(species' form' move' lvl);                    case D: case P: case DP:                      return LearnDP.GetIsLevelUp(species' form' move' lvl);                  case Pt:                      return LearnPt.GetIsLevelUp(species' form' move' lvl);                  case HG: case SS: case HGSS:                      return LearnHGSS.GetIsLevelUp(species' form' move' lvl);              }
Missing Default,PKHeX.Core,MoveLevelUp,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveLevelUp.cs,GetIsLevelUp5,The following switch statement is missing a default case: switch (ver)              {                  case Any:                      var first = LearnBW.GetIsLevelUp(species' form' move' lvl);                      if (first.IsLevelUp && species != 646)  // Kyurem moves are same for both versions' but forme movepool not present.                          return first;                      return LearnB2W2.GetIsLevelUp(species' form' move' lvl);                  case B: case W: case BW:                      return LearnBW.GetIsLevelUp(species' form' move' lvl);                  case B2: case W2: case B2W2:                      return LearnB2W2.GetIsLevelUp(species' form' move' lvl);              }
Missing Default,PKHeX.Core,MoveLevelUp,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveLevelUp.cs,GetIsLevelUp6,The following switch statement is missing a default case: switch (ver)              {                  case Any:                      var first = LearnXY.GetIsLevelUp(species' form' move' lvl);                      if (first.IsLevelUp)                          return first;                      return LearnAO.GetIsLevelUp(species' form' move' lvl);                    case X: case Y: case XY:                      return LearnXY.GetIsLevelUp(species' form' move' lvl);                  case OR: case AS: case ORAS:                      return LearnAO.GetIsLevelUp(species' form' move' lvl);              }
Missing Default,PKHeX.Core,MoveLevelUp,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveLevelUp.cs,GetIsLevelUp7,The following switch statement is missing a default case: switch (ver)              {                  case GP: case GE: case GG: case GO:                      return LearnGG.GetIsLevelUp(species' form' move);                    case Any:                      if (species > MaxSpeciesID_7)                          return LearnNONE;                      var first = LearnSM.GetIsLevelUp(species' form' move);                      if (first.IsLevelUp)                          return first;                      if (species > MaxSpeciesID_7_USUM)                          return LearnNONE;                      return LearnUSUM.GetIsLevelUp(species' form' move);                    case SN: case MN: case SM:                      if (species > MaxSpeciesID_7)                          return LearnNONE;                      return LearnSM.GetIsLevelUp(species' form' move);                    case US: case UM: case USUM:                      if (species > MaxSpeciesID_7_USUM)                          return LearnNONE;                      return LearnUSUM.GetIsLevelUp(species' form' move);              }
Missing Default,PKHeX.Core,MoveLevelUp,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveLevelUp.cs,GetIsLevelUp8,The following switch statement is missing a default case: switch (ver)              {                  case Any:                  case SW: case SH:                      if (species > MaxSpeciesID_8)                          return LearnNONE;                      return LearnSWSH.GetIsLevelUp(species' form' move' lvl);              }
Missing Default,PKHeX.Core,MoveLevelUp,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveLevelUp.cs,AddMovesLevelUp1,The following switch statement is missing a default case: switch (ver)              {                  case Any: case RBY:                      LearnRB.AddMoves1(moves' species' form' max' min);                      return LearnY.AddMoves1(moves' species' form' max' min);                    case RD: case BU: case GN: case RB:                      return LearnRB.AddMoves1(moves' species' form' max' min);                  case YW:                      return LearnY.AddMoves1(moves' species' form' max' min);              }
Missing Default,PKHeX.Core,MoveLevelUp,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveLevelUp.cs,AddMovesLevelUp2,The following switch statement is missing a default case: switch (ver)              {                  case Any: case GSC:                      LearnGS.AddMoves(moves' species' form' max' min);                      if (korean)                          return moves;                      return LearnC.AddMoves(moves' species' form' max' min);                    case GD: case SV: case GS:                      return LearnGS.AddMoves(moves' species' form' max' min);                  case C when !korean:                      return LearnC.AddMoves(moves' species' form' max' min);              }
Missing Default,PKHeX.Core,MoveLevelUp,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveLevelUp.cs,AddMovesLevelUp3,The following switch statement is missing a default case: switch (ver)              {                  case Any:                      LearnRSE.AddMoves(moves' species' form' max);                      return LearnFRLG.AddMoves(moves' species' form' max);                    case R: case S: case E: case RS: case RSE:                      return LearnRSE.AddMoves(moves' species' form' max);                  case FR: case LG: case FRLG:                      return LearnFRLG.AddMoves(moves' species' form' max);              }
Missing Default,PKHeX.Core,MoveLevelUp,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveLevelUp.cs,AddMovesLevelUp4,The following switch statement is missing a default case: switch (ver)              {                  case Any: case DPPt:                      LearnDP.AddMoves(moves' species' form' max);                      LearnPt.AddMoves(moves' species' form' max);                      if (ver == DPPt) // stop here                          return moves;                      return LearnHGSS.AddMoves(moves' species' form' max);                    case D: case P: case DP:                      return LearnDP.AddMoves(moves' species' form' max);                  case Pt:                      return LearnPt.AddMoves(moves' species' form' max);                  case HG: case SS: case HGSS:                      return LearnHGSS.AddMoves(moves' species' form' max);              }
Missing Default,PKHeX.Core,MoveLevelUp,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveLevelUp.cs,AddMovesLevelUp5,The following switch statement is missing a default case: switch (ver)              {                  case Any:                      if (species != 646) // Kyurem moves are same for both versions' but forme movepool not present.                          LearnBW.AddMoves(moves' species' form' max);                      return LearnB2W2.AddMoves(moves' species' form' max);                    case B: case W: case BW:                      return LearnBW.AddMoves(moves' species' form' max);                  case B2: case W2: case B2W2:                      return LearnB2W2.AddMoves(moves' species' form' max);              }
Missing Default,PKHeX.Core,MoveLevelUp,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveLevelUp.cs,AddMovesLevelUp6,The following switch statement is missing a default case: switch (ver)              {                  case Any:                      LearnXY.AddMoves(moves' species' form' max);                      return LearnAO.AddMoves(moves' species' form' max);                    case X: case Y: case XY:                      return LearnXY.AddMoves(moves' species' form' max);                  case AS: case OR: case ORAS:                      return LearnAO.AddMoves(moves' species' form' max);              }
Missing Default,PKHeX.Core,MoveLevelUp,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveLevelUp.cs,AddMovesLevelUp7,The following switch statement is missing a default case: switch (ver)              {                  case GP: case GE: case GG: case GO:                      return LearnGG.AddMoves(moves' species' form' max);                    case Any:                      if (species > MaxSpeciesID_7_USUM)                          return moves;                      LearnUSUM.AddMoves(moves' species' form' max);                      if (species > MaxSpeciesID_7)                          return moves;                      return LearnSM.AddMoves(moves' species' form' max);                    case SN: case MN: case SM:                      if (species > MaxSpeciesID_7)                          return moves;                      return LearnSM.AddMoves(moves' species' form' max);                    case US: case UM: case USUM:                      if (species > MaxSpeciesID_7_USUM)                          return moves;                      LearnUSUM.AddMoves(moves' species' form' max);                      break;              }
Missing Default,PKHeX.Core,MoveLevelUp,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveLevelUp.cs,AddMovesLevelUp8,The following switch statement is missing a default case: switch (ver)              {                  case Any:                  case SW: case SH: case SWSH:                      if (species > MaxSpeciesID_8)                          return moves;                      return LearnSWSH.AddMoves(moves' species' form' max);              }
Missing Default,PKHeX.Core,MoveTechnicalMachine,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveTechnicalMachine.cs,GetIsMachine4HMTransfer,The following switch statement is missing a default case: switch (move)              {                  case 250: // Whirlpool                      if (PersonalTable.HGSS.GetFormeEntry(species' form).TMHM[96])                          return GameVersion.HGSS;                      break;                  case 432: // Defog                      if (PersonalTable.Pt.GetFormeEntry(species' form).TMHM[96])                          return GameVersion.DPPt;                      break;              }
Missing Default,PKHeX.Core,MoveTechnicalMachine,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveTechnicalMachine.cs,GetTMHM,The following switch statement is missing a default case: switch (generation)              {                  case 1: AddMachine1(r' species); break;                  case 2: AddMachine2(r' species);                      if (pkm.Format >= 7 && pkm.VC1)                          r.RemoveAll(z => z > Legal.MaxMoveID_1);                      break;                  case 3: AddMachine3(r' species' pkm.Format' RemoveTransfer); break;                  case 4: AddMachine4(r' species' pkm.Format' RemoveTransfer' form); break;                  case 5: AddMachine5(r' species' form); break;                  case 6: AddMachine6(r' species' form' ver); break;                  case 7: AddMachine7(r' species' form' ver); break;                  case 8: AddMachine8(r' species' form' pkm' ver); break;              }
Missing Default,PKHeX.Core,MoveTechnicalMachine,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveTechnicalMachine.cs,AddMachine6,The following switch statement is missing a default case: switch (ver)              {                  case GameVersion.Any: // Start at the top' hit every table                  case GameVersion.X:                  case GameVersion.Y:                  case GameVersion.XY:                      AddMachine6XY(r' species' form);                      if (ver == GameVersion.Any) // Fall Through                          AddMachine6AO(r' species' form);                      break;                  case GameVersion.AS:                  case GameVersion.OR:                  case GameVersion.ORAS:                      AddMachine6AO(r' species' form);                      break;              }
Missing Default,PKHeX.Core,MoveTechnicalMachine,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveTechnicalMachine.cs,AddMachine7,The following switch statement is missing a default case: switch (ver)              {                  case GameVersion.GP:                  case GameVersion.GE:                  case GameVersion.GG:                  case GameVersion.GO:                      AddMachineGG(r' species' form);                      return;                  case GameVersion.SN:                  case GameVersion.MN:                  case GameVersion.SM:                      if (species <= Legal.MaxSpeciesID_7)                          AddMachineSM(r' species' form);                      return;                  case GameVersion.Any:                  case GameVersion.US:                  case GameVersion.UM:                  case GameVersion.USUM:                      AddMachineUSUM(r' species' form);                      if (ver == GameVersion.Any) // Fall Through                          AddMachineSM(r' species' form);                      return;              }
Missing Default,PKHeX.Core,MoveTechnicalMachine,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveTechnicalMachine.cs,AddMachine8,The following switch statement is missing a default case: switch (ver)              {                  case GameVersion.Any:                  case GameVersion.SW:                  case GameVersion.SH:                  case GameVersion.SWSH:                      AddMachineSWSH(r' species' form' pkm);                      return;              }
Missing Default,PKHeX.Core,MoveTutor,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveTutor.cs,GetTutorMoves,The following switch statement is missing a default case: switch (generation)              {                  case 1: AddMovesTutor1(moves' species' pkm.Format); break;                  case 2: AddMovesTutor2(moves' species' pkm.Format' pkm.Korean); break;                  case 3: AddMovesTutor3(moves' species); break;                  case 4: AddMovesTutor4(moves' species' form); break;                  case 5: AddMovesTutor5(moves' species' form' pkm' specialTutors); break;                  case 6: AddMovesTutor6(moves' species' form' pkm' specialTutors); break;                  case 7: AddMovesTutor7(moves' species' form' pkm' specialTutors); break;                  case 8: AddMovesTutor8(moves' species' form' pkm' specialTutors); break;              }
Missing Default,PKHeX.Core,MoveTutor,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveTutor.cs,AddSpecialTutorMoves,The following switch statement is missing a default case: switch (species)              {                  case (int)Species.Keldeo: // Keldeo                      r.Add(548); // Secret Sword                      break;                  case (int)Species.Meloetta:                      r.Add(547); // Relic Song                      break;                  case (int)Species.Pikachu when Generation == 6 && pkm.Format == 6:                      int index = pkm.AltForm - 1;                      if (index >= 0 && index < CosplayPikachuMoves.Length)                          r.Add(CosplayPikachuMoves[index]);                      break;                    case (int)Species.Pikachu when Generation == 7 && pkm.AltForm == 8:                      r.AddRange(Tutor_StarterPikachu);                      break;                  case (int)Species.Eevee when Generation == 7 && pkm.AltForm == 1:                      r.AddRange(Tutor_StarterEevee);                      break;                    case (int)Species.Pikachu when Generation == 7 && !(pkm is PB7):                  case (int)Species.Raichu  when Generation == 7 && !(pkm is PB7):                      r.Add(344); // Volt Tackle                      break;              }
Missing Default,PKHeX.Core,MoveTutor,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Moves\MoveTutor.cs,AddSpecialFormChangeMoves,The following switch statement is missing a default case: switch (species)              {                  case (int)Species.Rotom when Generation >= 4: // rotom                      r.Add(RotomMoves[pkm.AltForm]);                      break;                  case (int)Species.Zygarde when Generation == 7: // zygarde                      r.AddRange(ZygardeMoves);                      break;                  case (int)Species.Necrozma when pkm.AltForm == 1: // Sun Necrozma                      r.Add(713);                      break;                  case (int)Species.Necrozma when pkm.AltForm == 2: // Moon Necrozma                      r.Add(714);                      break;              }
Missing Default,PKHeX.Core,SeedInfo,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\Frame\SeedInfo.cs,GetSeedsUntilNature,The following switch statement is missing a default case: switch (VerifyPIDCriteria(pid' info))                  {                      case LockInfo.Pass:                          yield break;                      case LockInfo.Gender:                          charm3 = true;                          break;                  }
Missing Default,PKHeX.Core,SeedInfo,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\Frame\SeedInfo.cs,GetSeedsUntilUnownForm,The following switch statement is missing a default case: switch (VerifyPIDCriteria(pid' info))                      {                          case LockInfo.Pass: // yes                              yield break;                      }
Missing Default,PKHeX.Core,MethodFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\MethodFinder.cs,GetCuteCharmMatch,The following switch statement is missing a default case: switch (genderValue)              {                  case 2: break; // can't cute charm a genderless pkm                  case 0: // male                      var gr = getRatio();                      if (254 <= gr) // no modification for PID                          break;                      var rate = 25*((gr / 25) + 1); // buffered                      var nature = pid % 25;                      if (nature + rate != pid)                          break;                        pidiv = new PIDIV {NoSeed = true' RNG = RNGType.LCRNG' Type = PIDType.CuteCharm};                      return true;                  case 1: // female                      if (pid >= 25)                          break; // nope' this isn't a valid nature                      if (254 <= getRatio()) // no modification for PID                          break;                        pidiv = new PIDIV {NoSeed = true' RNG = RNGType.LCRNG' Type = PIDType.CuteCharm};                      return true;              }
Missing Default,PKHeX.Core,MethodFinder,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\MethodFinder.cs,GetCuteCharmGenderSpecies,The following switch statement is missing a default case: switch (species)              {                  // These evolved species cannot be encountered with cute charm.                  // 100% fixed gender does not modify PID; override this with the encounter species for correct calculation.                  // We can assume the re-mapped species's [gender ratio] is what was encountered.                    case (int)Species.Wormadam: species = (int)Species.Burmy; break; // Wormadam -> Burmy                  case (int)Species.Mothim: species = (int)Species.Burmy; break; // Mothim -> Burmy                  case (int)Species.Vespiquen: species = (int)Species.Combee; break; // Vespiquen -> Combee                  case (int)Species.Gallade: species = (int)Species.Kirlia; break; // Gallade -> Kirlia/Ralts                  case (int)Species.Froslass: species = (int)Species.Snorunt; break; // Froslass -> Snorunt                    // Changed gender ratio (25% M -> 50% M) needs special treatment.                  // Double check the encounter species with IsCuteCharm4Valid afterwards.                  case (int)Species.Marill: case (int)Species.Azumarill: // Azurill & Marill/Azumarill collision                      if (IsCuteCharmAzurillMale(pid))                      {                          species = (int)Species.Azurill;                          genderValue = 0;                          return;                      }                      break;              }
Missing Default,PKHeX.Core,PIDGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\PIDGenerator.cs,SetValuesFromSeedXDRNG,The following switch statement is missing a default case: switch (pk.Species)              {                  case (int)Species.Umbreon: // Colo Umbreon                  case (int)Species.Eevee: // XD Eevee                      pk.TID = (int)((seed = rng.Next(seed)) >> 16);                      pk.SID = (int)((seed = rng.Next(seed)) >> 16);                      seed = rng.Advance(seed' 2); // PID calls consumed                      break;                  case (int)Species.Espeon: // Colo Espeon                      pk.TID = (int)((seed = rng.Next(seed)) >> 16);                      pk.SID = (int)((seed = rng.Next(seed)) >> 16);                      seed = rng.Advance(seed' 9); // PID calls consumed' skip over Umbreon                      break;              }
Missing Default,PKHeX.Core,PIDGenerator,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\RNG\PIDGenerator.cs,GetGeneratorMethod,The following switch statement is missing a default case: switch (t)              {                  case PIDType.Channel:                      return SetValuesFromSeedChannel;                  case PIDType.CXD:                      return SetValuesFromSeedXDRNG;                    case PIDType.Method_1:                  case PIDType.Method_2:                  case PIDType.Method_3:                  case PIDType.Method_4:                  case PIDType.Method_1_Unown:                  case PIDType.Method_2_Unown:                  case PIDType.Method_3_Unown:                  case PIDType.Method_4_Unown:                  case PIDType.Method_1_Roamer:                      return (pk' seed) => SetValuesFromSeedLCRNG(pk' t' seed);                    case PIDType.BACD_R:                  case PIDType.BACD_R_A:                  case PIDType.BACD_R_S:                      return (pk' seed) => SetValuesFromSeedBACD(pk' t' seed & 0xFFFF);                  case PIDType.BACD_U:                  case PIDType.BACD_U_A:                  case PIDType.BACD_U_S:                      return (pk' seed) => SetValuesFromSeedBACD(pk' t' seed);                    case PIDType.PokeSpot:                      return SetRandomPIDIV;                    case PIDType.G5MGShiny:                      return SetValuesFromSeedMG5Shiny;                    case PIDType.Pokewalker:                      return (pk' seed) => pk.PID = GetPokeWalkerPID(pk.TID' pk.SID' seed%24' pk.Gender' pk.PersonalInfo.Gender);                    // others: unimplemented                  case PIDType.CuteCharm:                      break;                  case PIDType.ChainShiny:                      return SetRandomChainShinyPID;                  case PIDType.G4MGAntiShiny:                      break;              }
Missing Default,PKHeX.Core,AbilityVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\AbilityVerifier.cs,VerifyAbility5,The following switch statement is missing a default case: switch (data.EncounterMatch)              {                  case EncounterSlot w:                      // Hidden Abilities for Wild Encounters are only available at a Hidden Grotto                      bool grotto = w.Type == SlotType.HiddenGrotto;                      if (pkm.AbilityNumber == 4 ^ grotto)                          return GetInvalid(grotto ? LAbilityMismatchGrotto : LAbilityHiddenFail);                      break;                    case EncounterEgg e when pkm.AbilityNumber == 4:                      // Hidden Abilities for some are unbreedable or unreleased                      if (Legal.Ban_BreedHidden5.Contains(e.Species))                          return GetInvalid(LAbilityHiddenUnavailable);                      break;              }
Missing Default,PKHeX.Core,BallVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\BallVerifier.cs,VerifyBall,The following switch statement is missing a default case: switch (EncounterMatch)              {                  case MysteryGift g:                      return VerifyBallMysteryGift(data' g);                  case EncounterTrade t:                      return VerifyBallEquals(data' t.Ball);                  case EncounterStatic s when s.Gift:                      return VerifyBallEquals(data' s.Ball);              }
Missing Default,PKHeX.Core,FormVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\FormVerifier.cs,VerifyForm,The following switch statement is missing a default case: switch (pkm.Species)              {                  case (int)Species.Pikachu when Info.Generation == 6: // Cosplay                      bool isStatic = EncounterMatch is EncounterStatic;                      if (isStatic != (pkm.AltForm != 0))                          return GetInvalid(isStatic ? LFormPikachuCosplayInvalid : LFormPikachuCosplay);                      break;                    case (int)Species.Pikachu when Info.Generation == 7: // Cap                      bool IsValidPikachuCap()                      {                          return EncounterMatch switch                          {                              WC7 wc7 => (wc7.Form == pkm.AltForm)'                              EncounterStatic s => (s.Form == pkm.AltForm)'                              _ => (pkm.AltForm == 0)                          };                      }                        if (!IsValidPikachuCap())                      {                          bool gift = EncounterMatch is WC7 g && g.Form != pkm.AltForm;                          var msg = gift ? LFormPikachuEventInvalid : LFormInvalidGame;                          return GetInvalid(msg);                      }                      break;                  case (int)Species.Unown when Info.Generation == 2 && pkm.AltForm >= 26:                      return GetInvalid(string.Format(LFormInvalidRange' "Z"' pkm.AltForm == 26 ? "!" : "?"));                  case (int)Species.Giratina when pkm.AltForm == 1 ^ pkm.HeldItem == 112: // Giratina' Origin form only with Griseous Orb                      return GetInvalid(LFormItemInvalid);                    case (int)Species.Arceus:                      {                          int form = GetArceusFormFromHeldItem(pkm.HeldItem' pkm.Format);                          return form != pkm.AltForm ? GetInvalid(LFormItemInvalid) : GetValid(LFormItem);                      }                  case (int)Species.Keldeo:                  {                      if (pkm.Gen5) // can mismatch in gen5 via BW tutor and transfer up                          break;                      int index = Array.IndexOf(pkm.Moves' 548); // Secret Sword                      bool noSword = index < 0;                      if (pkm.AltForm == 0 ^ noSword) // mismatch                          Info.Moves[noSword ? 0 : index] = new CheckMoveResult(Info.Moves[noSword ? 0 : index]' Severity.Invalid' LMoveKeldeoMismatch' CheckIdentifier.Move);                      break;                  }                  case (int)Species.Genesect:                      {                          int form = GetGenesectFormFromHeldItem(pkm.HeldItem);                          return form != pkm.AltForm ? GetInvalid(LFormItemInvalid) : GetValid(LFormItem);                      }                  case (int)Species.Greninja:                      if (pkm.AltForm > 1) // Ash Battle Bond active                          return GetInvalid(LFormBattle);                      if (pkm.AltForm != 0 && !(EncounterMatch is MysteryGift)) // Formes are not breedable' MysteryGift already checked                          return GetInvalid(string.Format(LFormInvalidRange' 0' pkm.AltForm));                      break;                    case (int)Species.Scatterbug:                  case (int)Species.Spewpa:                      if (pkm.AltForm > 17) // Fancy & Pokéball                          return GetInvalid(LFormVivillonEventPre);                      if (!Legal.CheckVivillonPattern(pkm.AltForm' (byte)pkm.Country' (byte)pkm.Region))                          data.AddLine(Get(LFormVivillonInvalid' Severity.Fishy));                      break;                  case (int)Species.Vivillon:                      if (pkm.AltForm > 17) // Fancy & Pokéball                      {                          if (!(EncounterMatch is MysteryGift))                              return GetInvalid(LFormVivillonInvalid);                          return GetValid(LFormVivillon);                      }                      if (!Legal.CheckVivillonPattern(pkm.AltForm' (byte)pkm.Country' (byte)pkm.Region))                          data.AddLine(Get(LFormVivillonInvalid' Severity.Fishy));                      break;                    case (int)Species.Floette when pkm.AltForm == 5: // Floette Eternal Flower -- Never Released                      if (!(EncounterMatch is MysteryGift))                          return GetInvalid(LFormEternalInvalid);                      return GetValid(LFormEternal);                  case (int)Species.Meowstic when pkm.AltForm != pkm.Gender:                      return GetInvalid(LGenderInvalidNone);                    case (int)Species.Silvally:                      {                          int form = GetSilvallyFormFromHeldItem(pkm.HeldItem);                          return form != pkm.AltForm ? GetInvalid(LFormItemInvalid) : GetValid(LFormItem);                      }                    case (int)Species.Lillipup when Info.EncounterMatch.EggEncounter && pkm.AltForm == 1 && pkm.SM:                  case (int)Species.Lycanroc when Info.EncounterMatch.EggEncounter && pkm.AltForm == 2 && pkm.SM:                      return GetInvalid(LFormInvalidGame);                    // Impossible Egg forms                  case (int)Species.Rotom when pkm.IsEgg && pkm.AltForm != 0:                  case (int)Species.Furfrou when pkm.IsEgg && pkm.AltForm != 0:                      return GetInvalid(LEggSpecies);                    // Party Only Forms                  case (int)Species.Shaymin:                  case (int)Species.Furfrou:                  case (int)Species.Hoopa:                      if (pkm.AltForm != 0 && pkm.Box > -1 && pkm.Format <= 6) // has form but stored in box                          return GetInvalid(LFormParty);                      break;                    // Battle only Forms with other legal forms allowed                  case (int)Species.Zygarde when pkm.AltForm >= 4: // Zygarde Complete                  case (int)Species.Minior when pkm.AltForm < 7: // Minior Shield                  case (int)Species.Necrozma when pkm.AltForm == 3: // Ultra Necrozma                      return GetInvalid(LFormBattle);                  case (int)Species.Necrozma when pkm.AltForm < 3: // Necrozma Fused forms & default                  case (int)Species.Mimikyu when pkm.AltForm == 2: // Totem disguise Mimikyu                      return VALID;              }
Missing Default,PKHeX.Core,FormVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\FormVerifier.cs,VerifyFormFriendSafari,The following switch statement is missing a default case: switch (pkm.Species)              {                  case (int)Species.Floette when !SafariFloette.Contains(pkm.AltForm): // Floette                  case (int)Species.Florges when !SafariFloette.Contains(pkm.AltForm): // Florges                      data.AddLine(GetInvalid(LFormSafariFlorgesColor));                      break;                  case 710 when pkm.AltForm != 0: // Pumpkaboo                  case (int)Species.Gourgeist when pkm.AltForm != 0: // Average                      data.AddLine(GetInvalid(LFormSafariPumpkabooAverage));                      break;                  case (int)Species.Gastrodon when pkm.AltForm != 0: // West                      data.AddLine(GetInvalid(LFormSafariFlorgesColor));                      break;                  case (int)Species.Sawsbuck when pkm.AltForm != 0: // Sawsbuck                      data.AddLine(GetInvalid(LFormSafariSawsbuckSpring));                      break;              }
Missing Default,PKHeX.Core,IndividualValueVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\IndividualValueVerifier.cs,Verify,The following switch statement is missing a default case: switch (data.EncounterMatch)              {                  case EncounterStatic s:                      VerifyIVsStatic(data' s);                      break;                  case EncounterSlot w:                      VerifyIVsSlot(data' w);                      break;                  case MysteryGift g:                      VerifyIVsMystery(data' g);                      break;              }
Missing Default,PKHeX.Core,IndividualValueVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\IndividualValueVerifier.cs,VerifyIVsSlot,The following switch statement is missing a default case: switch (w.Generation)              {                  case 6: VerifyIVsGen6(data' w); break;                  case 7: VerifyIVsGen7(data); break;                  case 8: VerifyIVsGen8(data); break;              }
Missing Default,PKHeX.Core,MemoryVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\MemoryVerifier.cs,VerifyCommonMemory,The following switch statement is missing a default case: switch (memory.MemoryID)              {                  case 6 when !Memories.LocationsWithPKCenter.Contains(memory.Variable):                      return GetInvalid(string.Format(LMemoryArgBadPokecenter' memory.Handler));                    // {0} saw {2} carrying {1} on its back. {4} that {3}.                  case 21 when !Legal.GetCanLearnMachineMove(new PK6 {Species = memory.Variable' EXP = Experience.GetEXP(100' PersonalTable.XY.GetFormeIndex(memory.Variable' 0))}' 19' 6):                      return GetInvalid(string.Format(LMemoryArgBadMove' memory.Handler));                    case 16 when memory.Variable == 0 && !GetIsMoveKnowable(pkm' handler' memory.Variable):                  case 48 when memory.Variable == 0 && !GetIsMoveKnowable(pkm' handler' memory.Variable):                      return GetInvalid(string.Format(LMemoryArgBadMove' memory.Handler));                    // {0} was able to remember {2} at {1}'s instruction. {4} that {3}.                  case 49 when memory.Variable == 0 && !GetIsMoveLearnable(pkm' handler' memory.Variable):                      return GetInvalid(string.Format(LMemoryArgBadMove' memory.Handler));              }
Missing Default,PKHeX.Core,MemoryVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\MemoryVerifier.cs,VerifyOTMemory,The following switch statement is missing a default case: switch (data.EncounterMatch)              {                  case WC6 g when !g.IsEgg && g.OTGender != 3:                      VerifyOTMemoryIs(data' g.OT_Memory' g.OT_Intensity' g.OT_TextVar' g.OT_Feeling);                      return;                  case WC7 g when !g.IsEgg && g.OTGender != 3:                      VerifyOTMemoryIs(data' g.OT_Memory' g.OT_Intensity' g.OT_TextVar' g.OT_Feeling);                      return;                  case WC8 g when !g.IsEgg && g.OTGender != 3:                      VerifyOTMemoryIs(data' g.OT_Memory' g.OT_Intensity' g.OT_TextVar' g.OT_Feeling);                      return;                    case IMemoryOT t when !(t is MysteryGift):                      VerifyOTMemoryIs(data' t.OT_Memory' t.OT_Intensity' t.OT_TextVar' t.OT_Feeling);                      return;              }
Missing Default,PKHeX.Core,MemoryVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\MemoryVerifier.cs,VerifyOTMemory,The following switch statement is missing a default case: switch (pkm.OT_Memory)              {                  case 2: // {0} hatched from an Egg and saw {1} for the first time at... {2}. {4} that {3}.                      if (pkm.Egg_Location == 0)                          data.AddLine(Severity.Invalid' string.Format(LMemoryArgBadHatch' L_XOT)' CheckIdentifier.Memory);                      break;                    case 4 when pkm.Gen6: // {0} became {1}’s friend when it arrived via Link Trade at... {2}. {4} that {3}.                      data.AddLine(Severity.Invalid' string.Format(LMemoryArgBadOTEgg' L_XOT)' CheckIdentifier.Memory);                      return;                    case 6: // {0} went to the Pokémon Center in {2} with {1} and had its tired body healed there. {4} that {3}.                      int matchingOriginGame = Array.IndexOf(Memories.LocationsWithPKCenter' pkm.OT_TextVar);                      if (matchingOriginGame != -1)                      {                          var gameID = Memories.GetGameVersionForPokeCenterIndex(matchingOriginGame);                          if (!gameID.Contains((GameVersion)pkm.Version))                              data.AddLine(Severity.Invalid' string.Format(LMemoryArgBadLocation' L_XOT)' CheckIdentifier.Memory);                      }                      data.AddLine(VerifyCommonMemory(pkm' 0));                      return;                    case 14:                      if (!GetCanBeCaptured(pkm.OT_TextVar' Info.Generation' (GameVersion)pkm.Version))                          data.AddLine(Severity.Invalid' string.Format(LMemoryArgBadSpecies' L_XOT)' CheckIdentifier.Memory);                      else                          data.AddLine(Severity.Valid' string.Format(LMemoryArgSpecies' L_XOT)' CheckIdentifier.Memory);                      return;              }
Missing Default,PKHeX.Core,MemoryVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\MemoryVerifier.cs,VerifyHTMemory,The following switch statement is missing a default case: switch (pkm.HT_Memory)              {                  case 0:                      if (string.IsNullOrEmpty(pkm.HT_Name))                          return;                      data.AddLine(Severity.Invalid' LMemoryMissingHT' CheckIdentifier.Memory); return;                  case 1: // {0} met {1} at... {2}. {1} threw a Poké Ball at it' and they started to travel together. {4} that {3}.                      data.AddLine(Severity.Invalid' string.Format(LMemoryArgBadCatch' L_XHT)' CheckIdentifier.Memory); return;                    case 2: // {0} hatched from an Egg and saw {1} for the first time at... {2}. {4} that {3}.                      data.AddLine(Severity.Invalid' string.Format(LMemoryArgBadHatch' L_XHT)' CheckIdentifier.Memory); return;                    case 14:                      if (GetCanBeCaptured(pkm.HT_TextVar' 6))                          data.AddLine(Severity.Valid' string.Format(LMemoryArgSpecies' L_XHT)' CheckIdentifier.Memory);                      else                          data.AddLine(Severity.Invalid' string.Format(LMemoryArgBadSpecies' L_XHT)' CheckIdentifier.Memory);                      return;              }
Missing Default,PKHeX.Core,MemoryVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\MemoryVerifier.cs,GetCanBeCaptured,The following switch statement is missing a default case: switch (gen)              {                  // Capture Memory only obtainable via Gen 6.                  case 6:                      switch (version)                      {                          case GameVersion.Any:                              return Legal.FriendSafari.Contains(species)                                     || GetCanBeCaptured(species' SlotsX' StaticX)                                     || GetCanBeCaptured(species' SlotsY' StaticY)                                     || GetCanBeCaptured(species' SlotsA' StaticA)                                     || GetCanBeCaptured(species' SlotsO' StaticO);                          case GameVersion.X:                              return Legal.FriendSafari.Contains(species)                                     || GetCanBeCaptured(species' SlotsX' StaticX);                          case GameVersion.Y:                              return Legal.FriendSafari.Contains(species)                                     || GetCanBeCaptured(species' SlotsY' StaticY);                            case GameVersion.AS:                              return GetCanBeCaptured(species' SlotsA' StaticA);                          case GameVersion.OR:                              return GetCanBeCaptured(species' SlotsO' StaticO);                      }                      break;                    case 8:                  {                      switch (version)                      {                          case GameVersion.SW:                              return GetCanBeCaptured(species' SlotsSW' StaticSW);                          case GameVersion.SH:                              return GetCanBeCaptured(species' SlotsSH' StaticSH);                      }                      break;                  }              }
Missing Default,PKHeX.Core,MemoryVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\MemoryVerifier.cs,GetCanBeCaptured,The following switch statement is missing a default case: switch (version)                      {                          case GameVersion.Any:                              return Legal.FriendSafari.Contains(species)                                     || GetCanBeCaptured(species' SlotsX' StaticX)                                     || GetCanBeCaptured(species' SlotsY' StaticY)                                     || GetCanBeCaptured(species' SlotsA' StaticA)                                     || GetCanBeCaptured(species' SlotsO' StaticO);                          case GameVersion.X:                              return Legal.FriendSafari.Contains(species)                                     || GetCanBeCaptured(species' SlotsX' StaticX);                          case GameVersion.Y:                              return Legal.FriendSafari.Contains(species)                                     || GetCanBeCaptured(species' SlotsY' StaticY);                            case GameVersion.AS:                              return GetCanBeCaptured(species' SlotsA' StaticA);                          case GameVersion.OR:                              return GetCanBeCaptured(species' SlotsO' StaticO);                      }
Missing Default,PKHeX.Core,MemoryVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\MemoryVerifier.cs,GetCanBeCaptured,The following switch statement is missing a default case: switch (version)                      {                          case GameVersion.SW:                              return GetCanBeCaptured(species' SlotsSW' StaticSW);                          case GameVersion.SH:                              return GetCanBeCaptured(species' SlotsSH' StaticSH);                      }
Missing Default,PKHeX.Core,MiscVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\MiscVerifier.cs,Verify,The following switch statement is missing a default case: switch (pkm)                  {                      case PK5 pk5 when pk5.PokeStarFame != 0 && pk5.IsEgg:                          data.AddLine(GetInvalid(LEggShinyPokeStar' Egg));                          break;                      case PK4 pk4 when pk4.ShinyLeaf != 0:                          data.AddLine(GetInvalid(LEggShinyLeaf' Egg));                          break;                      case PK4 pk4 when pk4.PokéathlonStat != 0:                          data.AddLine(GetInvalid(LEggPokeathlon' Egg));                          break;                      case PK3 _ when pkm.Language != 1:  // All Eggs are Japanese and flagged specially for localized string                          data.AddLine(GetInvalid(string.Format(LOTLanguage' LanguageID.Japanese' (LanguageID)pkm.Language)' Egg));                          break;                  }
Missing Default,PKHeX.Core,MiscVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\MiscVerifier.cs,VerifyMiscFatefulEncounter,The following switch statement is missing a default case: switch (EncounterMatch)              {                  case WC3 w when w.Fateful:                      if (w.IsEgg)                      {                          // Eggs hatched in RS clear the obedience flag!                          if (pkm.Format != 3)                              return; // possible hatched in either game' don't bother checking                          if (pkm.Met_Location <= 087) // hatched in RS                              break; // ensure fateful is not active                          // else' ensure fateful is active (via below)                      }                      VerifyFatefulIngameActive(data);                      VerifyWC3Shiny(data' w);                      return;                  case WC3 w:                      if (w.Version == GameVersion.XD)                          return; // Can have either state                      VerifyWC3Shiny(data' w);                      break;                  case MysteryGift g when g.Format != 3: // WC3                      VerifyReceivability(data' g);                      VerifyFatefulMysteryGift(data' g);                      return;                  case EncounterStatic s when s.Fateful: // ingame fateful                  case EncounterSlot x when x.Version == GameVersion.XD: // ingame pokespot                  case EncounterTrade t when t.Fateful:                      VerifyFatefulIngameActive(data);                      return;              }
Missing Default,PKHeX.Core,MiscVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\MiscVerifier.cs,VerifyReceivability,The following switch statement is missing a default case: switch (g)              {                  case WC6 wc6 when !wc6.CanBeReceivedByVersion(pkm.Version) && !pkm.WasTradedEgg:                  case WC7 wc7 when !wc7.CanBeReceivedByVersion(pkm.Version) && !pkm.WasTradedEgg:                  case WC8 wc8 when !wc8.CanBeReceivedByVersion(pkm.Version) && !pkm.WasTradedEgg:                      data.AddLine(GetInvalid(LEncGiftVersionNotDistributed' GameOrigin));                      return;                  case WC6 wc6 when wc6.RestrictLanguage != 0 && wc6.Language != wc6.RestrictLanguage:                      data.AddLine(GetInvalid(string.Format(LOTLanguage' wc6.RestrictLanguage' pkm.Language)' CheckIdentifier.Language));                      return;                  case WC7 wc7 when wc7.RestrictLanguage != 0 && wc7.Language != wc7.RestrictLanguage:                      data.AddLine(GetInvalid(string.Format(LOTLanguage' wc7.RestrictLanguage' pkm.Language)' CheckIdentifier.Language));                      return;              }
Missing Default,PKHeX.Core,MiscVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\MiscVerifier.cs,VerifyVersionEvolution,The following switch statement is missing a default case: switch (pkm.Species)              {                  case (int)Species.Lycanroc when (pkm.AltForm == 0 && Moon()) || (pkm.AltForm == 1 && Sun()):                  case (int)Species.Solgaleo when Moon():                  case (int)Species.Lunala when Sun():                      bool Sun() => (pkm.Version & 1) == 0;                      bool Moon() => (pkm.Version & 1) == 1;                      if (pkm.IsUntraded)                          data.AddLine(GetInvalid(LEvoTradeRequired' Evolution));                      break;              }
Missing Default,PKHeX.Core,NicknameVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\NicknameVerifier.cs,IsNicknameValid,The following switch statement is missing a default case: switch (EncounterMatch)              {                  case WC7 wc7 when wc7.IsAshGreninjaWC7(pkm):                      return true;                  case ILangNick loc:                      if (loc.Language != 0 && !loc.IsNicknamed && !SpeciesName.IsNicknamedAnyLanguage(pkm.Species' nickname' pkm.Format))                          return true; // fixed language without nickname' nice job event maker!                      break;              }
Missing Default,PKHeX.Core,NicknameVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\NicknameVerifier.cs,VerifyNicknameTrade,The following switch statement is missing a default case: switch (data.Info.Generation)              {                  case 1:                  case 2: VerifyTrade12(data' t); return;                  case 3: VerifyTrade3(data' t); return;                  case 4: VerifyTrade4(data' t); return;                  case 5: VerifyTrade5(data' t); return;                  case 6:                  case 7:                  case 8:                      VerifyTrade(data' t' data.pkm.Language); return;              }
Missing Default,PKHeX.Core,PIDVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\PIDVerifier.cs,VerifyShiny,The following switch statement is missing a default case: switch (data.EncounterMatch)              {                  case EncounterStatic s:                      if (!s.Shiny.IsValid(pkm))                          data.AddLine(GetInvalid(LEncStaticPIDShiny' CheckIdentifier.Shiny));                        // gen5 correlation                      if (Info.Generation != 5)                          break;                      if (s.Location == 75) // Entree Forest                          break;                      if (s.Gift || s.Roaming || s.Ability != 4)                          break;                      if (s is EncounterStaticN p && p.NSparkle)                          break;                      VerifyG5PID_IDCorrelation(data);                      break;                    case EncounterSlot w:                      if (pkm.IsShiny && w.Type == SlotType.HiddenGrotto)                          data.AddLine(GetInvalid(LG5PIDShinyGrotto' CheckIdentifier.Shiny));                      if (Info.Generation == 5 && w.Type != SlotType.HiddenGrotto)                          VerifyG5PID_IDCorrelation(data);                      break;                    case PCD d: // fixed PID                      if (d.Gift.PK.PID != 1 && pkm.EncryptionConstant != d.Gift.PK.PID)                          data.AddLine(GetInvalid(LEncGiftPIDMismatch' CheckIdentifier.Shiny));                      break;                    case WC7 wc7 when wc7.IsAshGreninjaWC7(pkm) && pkm.IsShiny:                          data.AddLine(GetInvalid(LEncGiftShinyMismatch' CheckIdentifier.Shiny));                      break;              }
Missing Default,PKHeX.Core,RibbonVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\Ribbons\RibbonVerifier.cs,GetInvalidRibbons6Memory,The following switch statement is missing a default case: switch (gen)              {                  case 3:                      contest = IsAllowedInContest4(pkm.Species) ? 40 : 20;                      battle = IsAllowedBattleFrontier(pkm.Species) ? 8 : 0;                      break;                  case 4:                      contest = IsAllowedInContest4(pkm.Species) ? 20 : 0;                      battle = IsAllowedBattleFrontier(pkm.Species) ? 6 : 0;                      break;              }
Missing Default,PKHeX.Core,TrainerNameVerifier,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\Verifiers\TrainerNameVerifier.cs,Verify,The following switch statement is missing a default case: switch (data.EncounterMatch)              {                  case EncounterTrade _:                  case MysteryGift g when !g.IsEgg:                  case EncounterStaticN s when s.NSparkle:                      return; // already verified              }
Missing Default,PKHeX.Core,MysteryGift,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\MysteryGifts\MysteryGift.cs,GetMysteryGift,The following switch statement is missing a default case: switch (data.Length)              {                  case WC8.Size when ext == ".wc8":                      return new WC8(data);                  case WB7.SizeFull when ext == ".wb7full":                  case WB7.Size when ext == ".wb7":                      return new WB7(data);                  case WC7Full.Size when ext == ".wc7full":                      return new WC7Full(data).Gift;                  case WC7.Size when ext == ".wc7":                      return new WC7(data);                  case WC6Full.Size when ext == ".wc6full":                      return new WC6Full(data).Gift;                  case WC6.Size when ext == ".wc6":                      return new WC6(data);                  case WR7.Size when ext == ".wr7":                      return new WR7(data);                  case WC8.Size when ext == ".wc8":                  case WC8.Size when ext == ".wc8full":                      return new WC8(data);                    case PGF.Size when ext == ".pgf":                      return new PGF(data);                  case PGT.Size when ext == ".pgt":                      return new PGT(data);                  case PCD.Size when ext == ".pcd" || ext == ".wc4":                      return new PCD(data);              }
Missing Default,PKHeX.Core,WB7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\MysteryGifts\WB7.cs,SetPID,The following switch statement is missing a default case: switch (PIDType)              {                  case Shiny.FixedValue: // Specified                      pk.PID = PID;                      break;                  case Shiny.Random: // Random                      pk.PID = Util.Rand32();                      break;                  case Shiny.Always: // Random Shiny                      pk.PID = Util.Rand32();                      pk.PID = (uint)(((pk.TID ^ pk.SID ^ (pk.PID & 0xFFFF)) << 16) | (pk.PID & 0xFFFF));                      break;                  case Shiny.Never: // Random Nonshiny                      pk.PID = Util.Rand32();                      if (pk.IsShiny) pk.PID ^= 0x10000000;                      break;              }
Missing Default,PKHeX.Core,WC6,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\MysteryGifts\WC6.cs,SetPID,The following switch statement is missing a default case: switch (PIDType)              {                  case Shiny.FixedValue: // Specified                      pk.PID = PID;                      break;                  case Shiny.Random: // Random                      pk.PID = Util.Rand32();                      break;                  case Shiny.Always: // Random Shiny                      pk.PID = Util.Rand32();                      pk.PID = (uint)(((pk.TID ^ pk.SID ^ (pk.PID & 0xFFFF)) << 16) | (pk.PID & 0xFFFF));                      break;                  case Shiny.Never: // Random Nonshiny                      pk.PID = Util.Rand32();                      if (pk.IsShiny) pk.PID ^= 0x10000000;                      break;              }
Missing Default,PKHeX.Core,WC6,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\MysteryGifts\WC6.cs,IsMatchDeferred,The following switch statement is missing a default case: switch (CardID)              {                  case 0525 when IV_HP == 0xFE: // Diancie was distributed with no IV enforcement & 3IVs                  case 0504 when RibbonClassic != ((IRibbonSetEvent4)pkm).RibbonClassic: // magmar with/without classic                      return true;              }
Missing Default,PKHeX.Core,WC7,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\MysteryGifts\WC7.cs,SetPID,The following switch statement is missing a default case: switch (PIDType)              {                  case Shiny.FixedValue: // Specified                      pk.PID = PID;                      break;                  case Shiny.Random: // Random                      pk.PID = Util.Rand32();                      break;                  case Shiny.Always: // Random Shiny                      pk.PID = Util.Rand32();                      pk.PID = (uint)(((pk.TID ^ pk.SID ^ (pk.PID & 0xFFFF)) << 16) | (pk.PID & 0xFFFF));                      break;                  case Shiny.Never: // Random Nonshiny                      pk.PID = Util.Rand32();                      if (pk.IsShiny) pk.PID ^= 0x10000000;                      break;              }
Missing Default,PKHeX.Core,WC8,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\MysteryGifts\WC8.cs,SetPID,The following switch statement is missing a default case: switch (PIDType)              {                  case Shiny.FixedValue: // Specified                      pk.PID = GetFixedPID(SAV);                      break;                  case Shiny.Random: // Random                      pk.PID = Util.Rand32();                      break;                  case Shiny.AlwaysStar: // Random Shiny                      pk.PID = Util.Rand32();                      pk.PID = (uint)(((pk.TID ^ pk.SID ^ (pk.PID & 0xFFFF)) << 16) | (pk.PID & 0xFFFF)) ^ 1;                      break;                  case Shiny.AlwaysSquare: // Random Shiny                      pk.PID = Util.Rand32();                      pk.PID = (uint)(((pk.TID ^ pk.SID ^ (pk.PID & 0xFFFF)) << 16) | (pk.PID & 0xFFFF)) ^ 0;                      break;                  case Shiny.Never: // Random Nonshiny                      pk.PID = Util.Rand32();                      if (pk.IsShiny) pk.PID ^= 0x10000000;                      break;              }
Missing Default,PKHeX.Core,PK6,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\PK6.cs,ConvertToPK7,The following switch statement is missing a default case: switch (AbilityNumber)              {                  case 1:                  case 2:                  case 4: // Valid Ability Numbers                      int index = AbilityNumber >> 1;                      if (PersonalInfo.Abilities[index] == Ability) // correct pair                          pk7.Ability = pk7.PersonalInfo.Abilities[index];                      break;              }
Missing Default,PKHeX.Core,XK3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\PKM\XK3.cs,IsOriginXD,The following switch statement is missing a default case: switch (species)              {                  case 296: // Makuhita    30 Colo 18 XD                  case 297:                      return metLevel != 30;                  case 175: // Togepi      20 Colo 25 XD' also 20 as Togetic in Colo                  case 176:                      return metLevel != 20;                  case 179: // Mareep      37 Colo 17 XD                  case 180: // Flaafy      30 Colo                  case 181:                      return metLevel != 37 && metLevel != 30;                  case 219: // Magcargo    30 Colo 38 XD (Slugma in Colo)                      return metLevel != 30;                  case 195: // Quagsire    30 Colo // ** Wooper XD                      return metLevel != 30;                  case 334: // Altaria     33 Colo // 36 XD (Swablu in Colo)                      return metLevel != 33;                  case 167: // Ledian      40 Colo // 10 Ledyba XD                      return metLevel != 40;                  case 207: // Gligar      43 Colo // ** Gligar XD                      return metLevel != 43;                  case 221: // Piloswine   43 Colo // 22 Swinub XD                      return metLevel != 43;                  case 205: // Forretress  43 Colo // 20 Pineco XD                      return metLevel != 43;                  case 168: // Ariados     43 Colo // 14 Spinarak XD                      return metLevel != 43;                  case 229: // Houndoom    48 Colo // 17 Houndour XD                      return metLevel != 48;                  case 217: // Ursaring    45 Colo // 11 Teddiursa XD                      return metLevel != 45;                  case 212: // Scizor      50 Colo // 40 Scyther XD                      return metLevel != 50;                  case 196: // Espeon                      return metLevel != 25;                  case 197: // Umbreon                      return metLevel != 26;                        // Gifts                  case 213: // Shuckle                  case 239: case 240: // Elekid                  case 246: case 247: case 248: // Larvitar                  case 307: case 308: // Meditite                      return metLevel == 20;              }
Missing Default,PKHeX.Core,SAV2,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV2.cs,SAV2,The following switch statement is missing a default case: switch (lang)              {                  case LanguageID.Japanese:                      Japanese = true;                      break;                  case LanguageID.Korean:                      Korean = true;                      break;                      // otherwise' both false              }
Missing Default,PKHeX.Core,SAV2,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV2.cs,GetFinalData,The following switch statement is missing a default case: switch (Version)                  {                      case GameVersion.GS: Array.Copy(Data' Offsets.Trainer1' Data' 0x7209' 0xC83); break;                      case GameVersion.C:  Array.Copy(Data' Offsets.Trainer1' Data' 0x7209' 0xADA); break;                  }
Missing Default,PKHeX.Core,SAV2,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV2.cs,GetFinalData,The following switch statement is missing a default case: switch (Version)                  {                      case GameVersion.GS:                          Array.Copy(Data' 0x2009' Data' 0x15C7' 0x222F - 0x2009);                          Array.Copy(Data' 0x222F' Data' 0x3D69' 0x23D9 - 0x222F);                          Array.Copy(Data' 0x23D9' Data' 0x0C6B' 0x2856 - 0x23D9);                          Array.Copy(Data' 0x2856' Data' 0x7E39' 0x288A - 0x2856);                          Array.Copy(Data' 0x288A' Data' 0x10E8' 0x2D69 - 0x288A);                          break;                      case GameVersion.C:                          Array.Copy(Data' 0x2009' Data' 0x1209' 0xB7A);                          break;                  }
Missing Default,PKHeX.Core,SAV3,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV3.cs,SetDex,The following switch statement is missing a default case: switch (species)              {                  case (int)Species.Unown when !GetSeen(species): // Unown                      DexPIDUnown = pkm.PID;                      break;                  case (int)Species.Spinda when !GetSeen(species): // Spinda                      DexPIDSpinda = pkm.PID;                      break;              }
Missing Default,PKHeX.Core,SAV3GCMemoryCard,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV3GCMemoryCard.cs,SelectSaveGame,The following switch statement is missing a default case: switch (Game)              {                  case GameVersion.COLO: if (HasCOLO) EntrySelected = EntryCOLO; break;                  case GameVersion.XD: if (HasXD) EntrySelected = EntryXD; break;                  case GameVersion.RSBOX: if (HasRSBOX) EntrySelected = EntryRSBOX; break;              }
Missing Default,PKHeX.Core,SAV4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV4.cs,GetGen4LanguageBitIndex,The following switch statement is missing a default case: switch (lang) // invert ITA/GER              {                  case 3: return 4;                  case 4: return 3;              }
Missing Default,PKHeX.Core,SAV4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV4.cs,GetForms,The following switch statement is missing a default case: switch (species)              {                  case (int)Species.Shellos: // Shellos                      return GetDexFormValues(General[FormOffset1 + 0]' 1' 2);                  case (int)Species.Gastrodon: // Gastrodon                      return GetDexFormValues(General[FormOffset1 + 1]' 1' 2);                  case (int)Species.Burmy: // Burmy                      return GetDexFormValues(General[FormOffset1 + 2]' 2' 3);                  case (int)Species.Wormadam: // Wormadam                      return GetDexFormValues(General[FormOffset1 + 3]' 2' 3);                  case (int)Species.Unown: // Unown                      return General.Slice(FormOffset1 + 4' 0x1C).Select(i => (int)i).ToArray();              }
Missing Default,PKHeX.Core,SAV4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV4.cs,SetForms,The following switch statement is missing a default case: switch (spec)              {                  case (int)Species.Deoxys: // Deoxys                      uint newval = SetDexFormValues(forms' 4' 4);                      General[PokeDex + 0x4 + (1 * brSize) - 1] = (byte) (newval & 0xFF);                      General[PokeDex + 0x4 + (2 * brSize) - 1] = (byte) ((newval >> 8) & 0xFF);                      break;              }
Missing Default,PKHeX.Core,SAV4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV4.cs,SetForms,The following switch statement is missing a default case: switch (spec)              {                  case (int)Species.Shellos: // Shellos                      General[FormOffset1 + 0] = (byte)SetDexFormValues(forms' 1' 2);                      return;                  case (int)Species.Gastrodon: // Gastrodon                      General[FormOffset1 + 1] = (byte)SetDexFormValues(forms' 1' 2);                      return;                  case (int)Species.Burmy: // Burmy                      General[FormOffset1 + 2] = (byte)SetDexFormValues(forms' 2' 3);                      return;                  case (int)Species.Wormadam: // Wormadam                      General[FormOffset1 + 3] = (byte)SetDexFormValues(forms' 2' 3);                      return;                  case (int)Species.Unown: // Unown                      int ofs = FormOffset1 + 4;                      int len = forms.Length;                      Array.Resize(ref forms' 0x1C);                      for (int i = len; i < forms.Length; i++)                          forms[i] = 0xFF;                      Array.Copy(forms.Select(b => (byte)b).ToArray()' 0' General' ofs' forms.Length);                      return;              }
Missing Default,PKHeX.Core,SAV4,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\SAV4.cs,SetForms,The following switch statement is missing a default case: switch (spec)              {                  case (int)Species.Rotom: // Rotom                      BitConverter.GetBytes(SetDexFormValues(forms' 3' 6)).CopyTo(General' FormOffset2);                      return;                  case (int)Species.Shaymin: // Shaymin                      General[FormOffset2 + 4] = (byte)SetDexFormValues(forms' 1' 2);                      return;                  case (int)Species.Giratina: // Giratina                      General[FormOffset2 + 5] = (byte)SetDexFormValues(forms' 1' 2);                      return;                  case (int)Species.Pichu when HGSS: // Pichu                      General[FormOffset2 + 6] = (byte)SetDexFormValues(forms' 2' 3);                      return;              }
Missing Default,PKHeX.Core,BVRequestUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Substructures\Battle Videos\BVRequestUtil.cs,Get5BitFromChar,The following switch statement is missing a default case: switch (c)              {                  case 'W': c = '0'; break;                  case 'X': c = '1'; break;                  case 'Y': c = 'I'; break;                  case 'Z': c = 'O'; break;              }
Missing Default,PKHeX.Core,BoxUtil,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Saves\Util\BoxUtil.cs,GetPossiblePKMsFromPaths,The following switch statement is missing a default case: switch (obj)                  {                      case PKM pk:                          yield return pk;                          break;                      case MysteryGift g when g.IsPokémon:                          yield return g.ConvertToPKM(sav);                          break;                      case GP1 g when g.Species != 0:                          yield return g.ConvertToPB7(sav);                          break;                  }
Missing Default,PKHeX,GBRestrictions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\GBRestrictions.cs,GetIncompatibleEvolutionMoves,The following switch statement is missing a default case: switch (pkm.Species)              {                  case (int)Species.Nidoking when moves.Contains(31) && moves.Contains(37):                      // Nidoking learns Thrash at level 23                      // Nidorino learns Fury Attack at level 36' Nidoran♂ at level 30                      // Other moves are either learned by Nidoran♂ up to level 23 or by TM                      incompatible_current = new[] { 31 };                      incompatible_previous = new[] { 37 };                      previousspecies = 33;                      return;                    case (int)Species.Exeggutor when moves.Contains(23) && moves.Any(m => G1Exeggcute_IncompatibleMoves.Contains(moves[m])):                      // Exeggutor learns stomp at level 28                      // Exeggcute learns Stun Spore at 32' PoisonPowder at 37 and Sleep Powder at 48                      incompatible_current = new[] { 23 };                      incompatible_previous = G1Exeggcute_IncompatibleMoves;                      previousspecies = 103;                      return;                    case (int)Species.Vaporeon:                  case (int)Species.Jolteon:                  case (int)Species.Flareon:                      incompatible_previous = new List<int>();                      incompatible_current = new List<int>();                      previousspecies = 133;                      var ExclusiveMoves = GetExclusiveMovesG1((int)Species.Eevee' pkm.Species' tmhm' moves);                      var EeveeLevels = GetMinLevelLearnMoveG1((int)Species.Eevee' ExclusiveMoves[0]);                      var EvoLevels = GetMaxLevelLearnMoveG1(pkm.Species' ExclusiveMoves[1]);                        for (int i = 0; i < ExclusiveMoves[0].Count; i++)                      {                          // There is a evolution move with a lower level that current eevee move                          if (EvoLevels.Any(ev => ev < EeveeLevels[i]))                              incompatible_previous.Add(ExclusiveMoves[0][i]);                      }                      for (int i = 0; i < ExclusiveMoves[1].Count; i++)                      {                          // There is a eevee move with a greather level that current evolution move                          if (EeveeLevels.Any(ev => ev > EvoLevels[i]))                              incompatible_current.Add(ExclusiveMoves[1][i]);                      }                      return;              }
Missing Default,PKHeX,GBRestrictions,D:\research\architectureSmells\repos\kwsch_PKHeX\PKHeX.Core\Legality\GBRestrictions.cs,GetRequiredMoveCountSpecial,The following switch statement is missing a default case: switch (pk.Species)              {                  case (int)Species.Exeggutor when pk.CurrentLevel >= 28: // Exeggutor                      // At level 28 learn different move if is a Exeggute or Exeggutor                      if (moves.Contains(73))                          mandatory.Add(73); // Leech Seed level 28 Exeggute                      if (moves.Contains(23))                          mandatory.Add(23); // Stomp level 28 Exeggutor                      break;                  case (int)Species.Pikachu when pk.CurrentLevel >= 33:                      mandatory.Add(97); // Pikachu always learns Agility                      break;                  case (int)Species.Tangela:                      mandatory.Add(132); // Tangela always has Constrict as Initial Move                      break;              }
