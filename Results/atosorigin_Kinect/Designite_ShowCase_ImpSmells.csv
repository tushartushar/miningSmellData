Implementation smell,Namespace,Class,File,Method,Description
Long Identifier,Kinect.ShowCase,MainWindow,C:\repos\atosorigin_Kinect\src\Demos\ShowCase\MainWindow.xaml.cs,,The length of the parameter _animatingBallOriginalPosition is 30.
Long Statement,Kinect.ShowCase,MainWindow,C:\repos\atosorigin_Kinect\src\Demos\ShowCase\MainWindow.xaml.cs,InitAnimations,The length of the statement  "                var animation = new DoubleAnimation(0' 360' new Duration(new TimeSpan(0' 0' 5))) { By = 0.5' RepeatBehavior = RepeatBehavior.Forever }; " is 135.
Long Statement,Kinect.ShowCase,MainWindow,C:\repos\atosorigin_Kinect\src\Demos\ShowCase\MainWindow.xaml.cs,Connect,The length of the statement  "            ((Kinect.ShowCase.MainWindow)(target)).MouseDown += new System.Windows.Input.MouseButtonEventHandler(this.WindowMouseDown); " is 123.
Complex Conditional,Kinect.ShowCase,Ball,C:\repos\atosorigin_Kinect\src\Demos\ShowCase\Ball.cs,Tessellate,The conditional expression  "p.Z > 0 && p.X > -.5 && p.X < .5 && p.Y > -.5 && p.Y < .5"  is complex.
Empty Catch Block,Kinect.ShowCase,MainWindow,C:\repos\atosorigin_Kinect\src\Demos\ShowCase\MainWindow.xaml.cs,Move,The method has an empty catch block.
Magic Number,Kinect.ShowCase,Ball,C:\repos\atosorigin_Kinect\src\Demos\ShowCase\Ball.cs,DegToRad,The following statement contains a magic number: return (degrees/180.0)*Math.PI;
Magic Number,Kinect.ShowCase,Ball,C:\repos\atosorigin_Kinect\src\Demos\ShowCase\Ball.cs,GetTextureCoordinate,The following statement contains a magic number: TYtoUV.Scale(1/(2*Math.PI)' -0.5);
Magic Number,Kinect.ShowCase,Ball,C:\repos\atosorigin_Kinect\src\Demos\ShowCase\Ball.cs,GetTextureCoordinate,The following statement contains a magic number: TYtoUV.Scale(1/(2*Math.PI)' -0.5);
Magic Number,Kinect.ShowCase,Ball,C:\repos\atosorigin_Kinect\src\Demos\ShowCase\Ball.cs,Tessellate,The following statement contains a magic number: int tDiv = 750;
Magic Number,Kinect.ShowCase,Ball,C:\repos\atosorigin_Kinect\src\Demos\ShowCase\Ball.cs,Tessellate,The following statement contains a magic number: int yDiv = 750;
Magic Number,Kinect.ShowCase,Ball,C:\repos\atosorigin_Kinect\src\Demos\ShowCase\Ball.cs,Tessellate,The following statement contains a magic number: double maxTheta = DegToRad(360);
Magic Number,Kinect.ShowCase,Ball,C:\repos\atosorigin_Kinect\src\Demos\ShowCase\Ball.cs,Tessellate,The following statement contains a magic number: for (int yi = 0; yi <= yDiv; yi++)              {                  double y = minY + yi*dy;                    for (int ti = 0; ti <= tDiv; ti++)                  {                      double t = ti*dt;                      Point3D p = GetPosition(t' y);                      if (p.Z > 0 && p.X > -.5 && p.X < .5 && p.Y > -.5 && p.Y < .5)                      {                          mesh.Positions.Add(p);                          mesh.Normals.Add(GetNormal(t' y));                          mesh.TextureCoordinates.Add(GetTextureCoordinate(t' y));                      }                  }              }
Magic Number,Kinect.ShowCase,Ball,C:\repos\atosorigin_Kinect\src\Demos\ShowCase\Ball.cs,Tessellate,The following statement contains a magic number: for (int yi = 0; yi <= yDiv; yi++)              {                  double y = minY + yi*dy;                    for (int ti = 0; ti <= tDiv; ti++)                  {                      double t = ti*dt;                      Point3D p = GetPosition(t' y);                      if (p.Z > 0 && p.X > -.5 && p.X < .5 && p.Y > -.5 && p.Y < .5)                      {                          mesh.Positions.Add(p);                          mesh.Normals.Add(GetNormal(t' y));                          mesh.TextureCoordinates.Add(GetTextureCoordinate(t' y));                      }                  }              }
Magic Number,Kinect.ShowCase,Ball,C:\repos\atosorigin_Kinect\src\Demos\ShowCase\Ball.cs,Tessellate,The following statement contains a magic number: for (int yi = 0; yi <= yDiv; yi++)              {                  double y = minY + yi*dy;                    for (int ti = 0; ti <= tDiv; ti++)                  {                      double t = ti*dt;                      Point3D p = GetPosition(t' y);                      if (p.Z > 0 && p.X > -.5 && p.X < .5 && p.Y > -.5 && p.Y < .5)                      {                          mesh.Positions.Add(p);                          mesh.Normals.Add(GetNormal(t' y));                          mesh.TextureCoordinates.Add(GetTextureCoordinate(t' y));                      }                  }              }
Magic Number,Kinect.ShowCase,Ball,C:\repos\atosorigin_Kinect\src\Demos\ShowCase\Ball.cs,Tessellate,The following statement contains a magic number: for (int yi = 0; yi <= yDiv; yi++)              {                  double y = minY + yi*dy;                    for (int ti = 0; ti <= tDiv; ti++)                  {                      double t = ti*dt;                      Point3D p = GetPosition(t' y);                      if (p.Z > 0 && p.X > -.5 && p.X < .5 && p.Y > -.5 && p.Y < .5)                      {                          mesh.Positions.Add(p);                          mesh.Normals.Add(GetNormal(t' y));                          mesh.TextureCoordinates.Add(GetTextureCoordinate(t' y));                      }                  }              }
Magic Number,Kinect.ShowCase,ChangeResolution,C:\repos\atosorigin_Kinect\src\Demos\ShowCase\ChangeResolution.cs,EnumDevices,The following statement contains a magic number: do              {                  result = EnumDisplayDevices(IntPtr.Zero'                      devNum' ref d' 0);                    if (result)                  {                      if ((d.StateFlags & 4) != 0)                      {                          _deviceModeNum = devNum;                          break;                      }                  }                  devNum++;              } while (result);
Magic Number,Kinect.ShowCase,DisplayDevice,C:\repos\atosorigin_Kinect\src\Demos\ShowCase\ChangeResolution.cs,DisplayDevice,The following statement contains a magic number: DeviceName = new string((char)32' 32);
Magic Number,Kinect.ShowCase,DisplayDevice,C:\repos\atosorigin_Kinect\src\Demos\ShowCase\ChangeResolution.cs,DisplayDevice,The following statement contains a magic number: DeviceName = new string((char)32' 32);
Magic Number,Kinect.ShowCase,DisplayDevice,C:\repos\atosorigin_Kinect\src\Demos\ShowCase\ChangeResolution.cs,DisplayDevice,The following statement contains a magic number: DeviceString = new string((char)32' 128);
Magic Number,Kinect.ShowCase,DisplayDevice,C:\repos\atosorigin_Kinect\src\Demos\ShowCase\ChangeResolution.cs,DisplayDevice,The following statement contains a magic number: DeviceString = new string((char)32' 128);
Magic Number,Kinect.ShowCase,DisplayDevice,C:\repos\atosorigin_Kinect\src\Demos\ShowCase\ChangeResolution.cs,DisplayDevice,The following statement contains a magic number: DeviceID = new string((char)32' 128);
Magic Number,Kinect.ShowCase,DisplayDevice,C:\repos\atosorigin_Kinect\src\Demos\ShowCase\ChangeResolution.cs,DisplayDevice,The following statement contains a magic number: DeviceID = new string((char)32' 128);
Magic Number,Kinect.ShowCase,DisplayDevice,C:\repos\atosorigin_Kinect\src\Demos\ShowCase\ChangeResolution.cs,DisplayDevice,The following statement contains a magic number: DeviceKey = new string((char)32' 128);
Magic Number,Kinect.ShowCase,DisplayDevice,C:\repos\atosorigin_Kinect\src\Demos\ShowCase\ChangeResolution.cs,DisplayDevice,The following statement contains a magic number: DeviceKey = new string((char)32' 128);
Magic Number,Kinect.ShowCase,GradientBall,C:\repos\atosorigin_Kinect\src\Demos\ShowCase\GradientBall.cs,GetTextureCoordinate,The following statement contains a magic number: TYtoUV.Scale(1/(2*Math.PI)' -0.5);
Magic Number,Kinect.ShowCase,GradientBall,C:\repos\atosorigin_Kinect\src\Demos\ShowCase\GradientBall.cs,GetTextureCoordinate,The following statement contains a magic number: TYtoUV.Scale(1/(2*Math.PI)' -0.5);
Magic Number,Kinect.ShowCase,GradientBall,C:\repos\atosorigin_Kinect\src\Demos\ShowCase\GradientBall.cs,Tessellate,The following statement contains a magic number: int tDiv = 64;
Magic Number,Kinect.ShowCase,GradientBall,C:\repos\atosorigin_Kinect\src\Demos\ShowCase\GradientBall.cs,Tessellate,The following statement contains a magic number: int yDiv = 64;
Magic Number,Kinect.ShowCase,GradientBall,C:\repos\atosorigin_Kinect\src\Demos\ShowCase\GradientBall.cs,Tessellate,The following statement contains a magic number: double maxTheta = MathHelper.ToRadians(360);
Magic Number,Kinect.ShowCase,MainWindow,C:\repos\atosorigin_Kinect\src\Demos\ShowCase\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: _changeResolution.ChangeScreenResolution(1024' 768);
Magic Number,Kinect.ShowCase,MainWindow,C:\repos\atosorigin_Kinect\src\Demos\ShowCase\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: _changeResolution.ChangeScreenResolution(1024' 768);
Magic Number,Kinect.ShowCase,MainWindow,C:\repos\atosorigin_Kinect\src\Demos\ShowCase\MainWindow.xaml.cs,InitGradientBall,The following statement contains a magic number: var p3D = new Point3D(offsetx' offsety' -8);
Magic Number,Kinect.ShowCase,MainWindow,C:\repos\atosorigin_Kinect\src\Demos\ShowCase\MainWindow.xaml.cs,InitAnimations,The following statement contains a magic number: foreach (GradientBall ball in _balls)              {                  var animation = new DoubleAnimation(0' 360' new Duration(new TimeSpan(0' 0' 5))) { By = 0.5' RepeatBehavior = RepeatBehavior.Forever };                    var vect = new Vector3D(0' 1' 0);                  var rt3D = new AxisAngleRotation3D(vect' 0);                  var transform = new RotateTransform3D(rt3D);                  ball.TransformGroup.Children.Add(transform);                  rt3D.BeginAnimation(AxisAngleRotation3D.AngleProperty' animation);              }
Magic Number,Kinect.ShowCase,MainWindow,C:\repos\atosorigin_Kinect\src\Demos\ShowCase\MainWindow.xaml.cs,InitAnimations,The following statement contains a magic number: foreach (GradientBall ball in _balls)              {                  var animation = new DoubleAnimation(0' 360' new Duration(new TimeSpan(0' 0' 5))) { By = 0.5' RepeatBehavior = RepeatBehavior.Forever };                    var vect = new Vector3D(0' 1' 0);                  var rt3D = new AxisAngleRotation3D(vect' 0);                  var transform = new RotateTransform3D(rt3D);                  ball.TransformGroup.Children.Add(transform);                  rt3D.BeginAnimation(AxisAngleRotation3D.AngleProperty' animation);              }
Magic Number,Kinect.ShowCase,MainWindow,C:\repos\atosorigin_Kinect\src\Demos\ShowCase\MainWindow.xaml.cs,InitAnimations,The following statement contains a magic number: foreach (GradientBall ball in _balls)              {                  var animation = new DoubleAnimation(0' 360' new Duration(new TimeSpan(0' 0' 5))) { By = 0.5' RepeatBehavior = RepeatBehavior.Forever };                    var vect = new Vector3D(0' 1' 0);                  var rt3D = new AxisAngleRotation3D(vect' 0);                  var transform = new RotateTransform3D(rt3D);                  ball.TransformGroup.Children.Add(transform);                  rt3D.BeginAnimation(AxisAngleRotation3D.AngleProperty' animation);              }
Magic Number,Kinect.ShowCase,MainWindow,C:\repos\atosorigin_Kinect\src\Demos\ShowCase\MainWindow.xaml.cs,Do3DAnimation,The following statement contains a magic number: Action animation = () =>              {                  var speed = new Duration(new TimeSpan(0' 0' 3));                  Point3D currentPosition = ball.Offset;                    var animationX = new DoubleAnimation(currentPosition.X' nextPosition.X' speed);                  var animationY = new DoubleAnimation(currentPosition.Y' nextPosition.Y' speed);                  var animationZ = new DoubleAnimation(currentPosition.Z' nextPosition.Z' speed);                    var tt3D = new TranslateTransform3D(currentPosition.X' currentPosition.Y' currentPosition.Z);                  ball.Transform = tt3D;                  tt3D.BeginAnimation(TranslateTransform3D.OffsetXProperty' animationX);                  tt3D.BeginAnimation(TranslateTransform3D.OffsetYProperty' animationY);                  tt3D.BeginAnimation(TranslateTransform3D.OffsetZProperty' animationZ);              };
Magic Number,Kinect.ShowCase,MainWindow,C:\repos\atosorigin_Kinect\src\Demos\ShowCase\MainWindow.xaml.cs,Move,The following statement contains a magic number: try              {                  var pos = position;                  //pos = Mouse.GetPosition(viewPort);                    //update hand                  Action setHand = () =>                  {                      Canvas.SetTop(HandImage' pos.Y);                      Canvas.SetLeft(HandImage' pos.X);                  };                  HandImage.Dispatcher.BeginInvoke(DispatcherPriority.Send' setHand);                    _mouse3DPosition.X = ((_viewPortSize.X / (viewPort.ActualWidth / pos.X)) - (_viewPortSize.X / 2)) * -1;                  _mouse3DPosition.Y = ((_viewPortSize.Y / (viewPort.ActualHeight / pos.Y)) - (_viewPortSize.Y / 2)) * -1;                    if (_movingBall == null && _centerscreenBall == null)                  {                      //Er is geen bal geanimeerd. We kunnen een nieuwe ball zoeken                      int index = MouseOnBall();                      if (index != -1)                      {                          GradientBall tempBall = _balls[index];                          Action getBallPosition = delegate { _animatingBallOriginalPosition = tempBall.Offset; };                          tempBall.Dispatcher.BeginInvoke(DispatcherPriority.Send' getBallPosition);                          _movingBallIndex = index;                          _movingBall = tempBall;                      }                  }                  else if (_movingBall != null)                  {                      Action moveBall = () =>                      {                          if (_movingBall != null)                          {                              var tt3D = new TranslateTransform3D(_mouse3DPosition.X' _mouse3DPosition.Y' -10);                              if (_movingBall != null)                                  _movingBall.Transform = tt3D;                          }                      };                        _movingBall.Dispatcher.BeginInvoke(DispatcherPriority.Send' moveBall);                        //movingBall.Transform = tt3d;                      if (WithinMargin(_mouse3DPosition.X' 0' Sensitivity))                      // && WithinMargin(mouse3dPosition.Y' 0' sensitivity * 2))                      {                          if (_movingBallIndex != -1)                          {                              int index = _movingBallIndex;                              Action del3 = () =>                              {                                  lblNaam.Content = _names[index];                                  lblNaam.Visibility = Visibility.Visible;                              };                              Action del4 = () =>                              {                                  lblWorkshop.Text = _workshops[index];                                  lblWorkshop.Visibility = Visibility.Visible;                              };                              lblNaam.Dispatcher.BeginInvoke(DispatcherPriority.Send' del3);                              lblWorkshop.Dispatcher.BeginInvoke(DispatcherPriority.Send' del4);                          }                          //The ball is on the center of the screen. Please make it bigger                          _centerscreenBall = _movingBall;                          _movingBall = null;                          _movingBallIndex = -1;                          Do3DAnimation(_centerscreenBall' _centerScreen);                      }                  }              }              catch              {                  //do nothing              }
Magic Number,Kinect.ShowCase,MainWindow,C:\repos\atosorigin_Kinect\src\Demos\ShowCase\MainWindow.xaml.cs,Move,The following statement contains a magic number: try              {                  var pos = position;                  //pos = Mouse.GetPosition(viewPort);                    //update hand                  Action setHand = () =>                  {                      Canvas.SetTop(HandImage' pos.Y);                      Canvas.SetLeft(HandImage' pos.X);                  };                  HandImage.Dispatcher.BeginInvoke(DispatcherPriority.Send' setHand);                    _mouse3DPosition.X = ((_viewPortSize.X / (viewPort.ActualWidth / pos.X)) - (_viewPortSize.X / 2)) * -1;                  _mouse3DPosition.Y = ((_viewPortSize.Y / (viewPort.ActualHeight / pos.Y)) - (_viewPortSize.Y / 2)) * -1;                    if (_movingBall == null && _centerscreenBall == null)                  {                      //Er is geen bal geanimeerd. We kunnen een nieuwe ball zoeken                      int index = MouseOnBall();                      if (index != -1)                      {                          GradientBall tempBall = _balls[index];                          Action getBallPosition = delegate { _animatingBallOriginalPosition = tempBall.Offset; };                          tempBall.Dispatcher.BeginInvoke(DispatcherPriority.Send' getBallPosition);                          _movingBallIndex = index;                          _movingBall = tempBall;                      }                  }                  else if (_movingBall != null)                  {                      Action moveBall = () =>                      {                          if (_movingBall != null)                          {                              var tt3D = new TranslateTransform3D(_mouse3DPosition.X' _mouse3DPosition.Y' -10);                              if (_movingBall != null)                                  _movingBall.Transform = tt3D;                          }                      };                        _movingBall.Dispatcher.BeginInvoke(DispatcherPriority.Send' moveBall);                        //movingBall.Transform = tt3d;                      if (WithinMargin(_mouse3DPosition.X' 0' Sensitivity))                      // && WithinMargin(mouse3dPosition.Y' 0' sensitivity * 2))                      {                          if (_movingBallIndex != -1)                          {                              int index = _movingBallIndex;                              Action del3 = () =>                              {                                  lblNaam.Content = _names[index];                                  lblNaam.Visibility = Visibility.Visible;                              };                              Action del4 = () =>                              {                                  lblWorkshop.Text = _workshops[index];                                  lblWorkshop.Visibility = Visibility.Visible;                              };                              lblNaam.Dispatcher.BeginInvoke(DispatcherPriority.Send' del3);                              lblWorkshop.Dispatcher.BeginInvoke(DispatcherPriority.Send' del4);                          }                          //The ball is on the center of the screen. Please make it bigger                          _centerscreenBall = _movingBall;                          _movingBall = null;                          _movingBallIndex = -1;                          Do3DAnimation(_centerscreenBall' _centerScreen);                      }                  }              }              catch              {                  //do nothing              }
Magic Number,Kinect.ShowCase,MainWindow,C:\repos\atosorigin_Kinect\src\Demos\ShowCase\MainWindow.xaml.cs,Move,The following statement contains a magic number: try              {                  var pos = position;                  //pos = Mouse.GetPosition(viewPort);                    //update hand                  Action setHand = () =>                  {                      Canvas.SetTop(HandImage' pos.Y);                      Canvas.SetLeft(HandImage' pos.X);                  };                  HandImage.Dispatcher.BeginInvoke(DispatcherPriority.Send' setHand);                    _mouse3DPosition.X = ((_viewPortSize.X / (viewPort.ActualWidth / pos.X)) - (_viewPortSize.X / 2)) * -1;                  _mouse3DPosition.Y = ((_viewPortSize.Y / (viewPort.ActualHeight / pos.Y)) - (_viewPortSize.Y / 2)) * -1;                    if (_movingBall == null && _centerscreenBall == null)                  {                      //Er is geen bal geanimeerd. We kunnen een nieuwe ball zoeken                      int index = MouseOnBall();                      if (index != -1)                      {                          GradientBall tempBall = _balls[index];                          Action getBallPosition = delegate { _animatingBallOriginalPosition = tempBall.Offset; };                          tempBall.Dispatcher.BeginInvoke(DispatcherPriority.Send' getBallPosition);                          _movingBallIndex = index;                          _movingBall = tempBall;                      }                  }                  else if (_movingBall != null)                  {                      Action moveBall = () =>                      {                          if (_movingBall != null)                          {                              var tt3D = new TranslateTransform3D(_mouse3DPosition.X' _mouse3DPosition.Y' -10);                              if (_movingBall != null)                                  _movingBall.Transform = tt3D;                          }                      };                        _movingBall.Dispatcher.BeginInvoke(DispatcherPriority.Send' moveBall);                        //movingBall.Transform = tt3d;                      if (WithinMargin(_mouse3DPosition.X' 0' Sensitivity))                      // && WithinMargin(mouse3dPosition.Y' 0' sensitivity * 2))                      {                          if (_movingBallIndex != -1)                          {                              int index = _movingBallIndex;                              Action del3 = () =>                              {                                  lblNaam.Content = _names[index];                                  lblNaam.Visibility = Visibility.Visible;                              };                              Action del4 = () =>                              {                                  lblWorkshop.Text = _workshops[index];                                  lblWorkshop.Visibility = Visibility.Visible;                              };                              lblNaam.Dispatcher.BeginInvoke(DispatcherPriority.Send' del3);                              lblWorkshop.Dispatcher.BeginInvoke(DispatcherPriority.Send' del4);                          }                          //The ball is on the center of the screen. Please make it bigger                          _centerscreenBall = _movingBall;                          _movingBall = null;                          _movingBallIndex = -1;                          Do3DAnimation(_centerscreenBall' _centerScreen);                      }                  }              }              catch              {                  //do nothing              }
Magic Number,Kinect.ShowCase,MainWindow,C:\repos\atosorigin_Kinect\src\Demos\ShowCase\MainWindow.xaml.cs,KinectUserUpdated,The following statement contains a magic number: var screenpoint = e.Event.HandRight.ToScreenPosition(new Size(640' 480)' _screenResolution);
Magic Number,Kinect.ShowCase,MainWindow,C:\repos\atosorigin_Kinect\src\Demos\ShowCase\MainWindow.xaml.cs,KinectUserUpdated,The following statement contains a magic number: var screenpoint = e.Event.HandRight.ToScreenPosition(new Size(640' 480)' _screenResolution);
Magic Number,Kinect.ShowCase,MainWindow,C:\repos\atosorigin_Kinect\src\Demos\ShowCase\MainWindow.xaml.cs,Window_KeyUp,The following statement contains a magic number: if (e.Key == Key.Space)              {                  this.Close();              }              else if (e.Key == Key.Up)              {                  _kinect.MotorUp(2);              }              else if (e.Key == Key.Down)              {                  _kinect.MotorDown(2);              }
Magic Number,Kinect.ShowCase,MainWindow,C:\repos\atosorigin_Kinect\src\Demos\ShowCase\MainWindow.xaml.cs,Window_KeyUp,The following statement contains a magic number: if (e.Key == Key.Space)              {                  this.Close();              }              else if (e.Key == Key.Up)              {                  _kinect.MotorUp(2);              }              else if (e.Key == Key.Down)              {                  _kinect.MotorDown(2);              }
Magic Number,Kinect.ShowCase,MainWindow,C:\repos\atosorigin_Kinect\src\Demos\ShowCase\MainWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 1 "..\..\..\MainWindow.xaml"              ((Kinect.ShowCase.MainWindow)(target)).MouseDown += new System.Windows.Input.MouseButtonEventHandler(this.WindowMouseDown);                            #line default              #line hidden                            #line 1 "..\..\..\MainWindow.xaml"              ((Kinect.ShowCase.MainWindow)(target)).Closing += new System.ComponentModel.CancelEventHandler(this.WindowClosing);                            #line default              #line hidden                            #line 1 "..\..\..\MainWindow.xaml"              ((Kinect.ShowCase.MainWindow)(target)).KeyUp += new System.Windows.Input.KeyEventHandler(this.Window_KeyUp);                            #line default              #line hidden              return;              case 2:              this.lblNaam = ((System.Windows.Controls.Label)(target));              return;              case 3:              this.lblWorkshop = ((System.Windows.Controls.TextBlock)(target));              return;              case 4:              this.canvas = ((System.Windows.Controls.Canvas)(target));              return;              case 5:              this.HandImage = ((System.Windows.Controls.Image)(target));              return;              case 6:              this.viewPort = ((System.Windows.Controls.Viewport3D)(target));              return;              case 7:              this.camera = ((System.Windows.Media.Media3D.PerspectiveCamera)(target));              return;              case 8:              this.visualModel = ((System.Windows.Media.Media3D.ModelVisual3D)(target));              return;              }
Magic Number,Kinect.ShowCase,MainWindow,C:\repos\atosorigin_Kinect\src\Demos\ShowCase\MainWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 1 "..\..\..\MainWindow.xaml"              ((Kinect.ShowCase.MainWindow)(target)).MouseDown += new System.Windows.Input.MouseButtonEventHandler(this.WindowMouseDown);                            #line default              #line hidden                            #line 1 "..\..\..\MainWindow.xaml"              ((Kinect.ShowCase.MainWindow)(target)).Closing += new System.ComponentModel.CancelEventHandler(this.WindowClosing);                            #line default              #line hidden                            #line 1 "..\..\..\MainWindow.xaml"              ((Kinect.ShowCase.MainWindow)(target)).KeyUp += new System.Windows.Input.KeyEventHandler(this.Window_KeyUp);                            #line default              #line hidden              return;              case 2:              this.lblNaam = ((System.Windows.Controls.Label)(target));              return;              case 3:              this.lblWorkshop = ((System.Windows.Controls.TextBlock)(target));              return;              case 4:              this.canvas = ((System.Windows.Controls.Canvas)(target));              return;              case 5:              this.HandImage = ((System.Windows.Controls.Image)(target));              return;              case 6:              this.viewPort = ((System.Windows.Controls.Viewport3D)(target));              return;              case 7:              this.camera = ((System.Windows.Media.Media3D.PerspectiveCamera)(target));              return;              case 8:              this.visualModel = ((System.Windows.Media.Media3D.ModelVisual3D)(target));              return;              }
Magic Number,Kinect.ShowCase,MainWindow,C:\repos\atosorigin_Kinect\src\Demos\ShowCase\MainWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 1 "..\..\..\MainWindow.xaml"              ((Kinect.ShowCase.MainWindow)(target)).MouseDown += new System.Windows.Input.MouseButtonEventHandler(this.WindowMouseDown);                            #line default              #line hidden                            #line 1 "..\..\..\MainWindow.xaml"              ((Kinect.ShowCase.MainWindow)(target)).Closing += new System.ComponentModel.CancelEventHandler(this.WindowClosing);                            #line default              #line hidden                            #line 1 "..\..\..\MainWindow.xaml"              ((Kinect.ShowCase.MainWindow)(target)).KeyUp += new System.Windows.Input.KeyEventHandler(this.Window_KeyUp);                            #line default              #line hidden              return;              case 2:              this.lblNaam = ((System.Windows.Controls.Label)(target));              return;              case 3:              this.lblWorkshop = ((System.Windows.Controls.TextBlock)(target));              return;              case 4:              this.canvas = ((System.Windows.Controls.Canvas)(target));              return;              case 5:              this.HandImage = ((System.Windows.Controls.Image)(target));              return;              case 6:              this.viewPort = ((System.Windows.Controls.Viewport3D)(target));              return;              case 7:              this.camera = ((System.Windows.Media.Media3D.PerspectiveCamera)(target));              return;              case 8:              this.visualModel = ((System.Windows.Media.Media3D.ModelVisual3D)(target));              return;              }
Magic Number,Kinect.ShowCase,MainWindow,C:\repos\atosorigin_Kinect\src\Demos\ShowCase\MainWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 1 "..\..\..\MainWindow.xaml"              ((Kinect.ShowCase.MainWindow)(target)).MouseDown += new System.Windows.Input.MouseButtonEventHandler(this.WindowMouseDown);                            #line default              #line hidden                            #line 1 "..\..\..\MainWindow.xaml"              ((Kinect.ShowCase.MainWindow)(target)).Closing += new System.ComponentModel.CancelEventHandler(this.WindowClosing);                            #line default              #line hidden                            #line 1 "..\..\..\MainWindow.xaml"              ((Kinect.ShowCase.MainWindow)(target)).KeyUp += new System.Windows.Input.KeyEventHandler(this.Window_KeyUp);                            #line default              #line hidden              return;              case 2:              this.lblNaam = ((System.Windows.Controls.Label)(target));              return;              case 3:              this.lblWorkshop = ((System.Windows.Controls.TextBlock)(target));              return;              case 4:              this.canvas = ((System.Windows.Controls.Canvas)(target));              return;              case 5:              this.HandImage = ((System.Windows.Controls.Image)(target));              return;              case 6:              this.viewPort = ((System.Windows.Controls.Viewport3D)(target));              return;              case 7:              this.camera = ((System.Windows.Media.Media3D.PerspectiveCamera)(target));              return;              case 8:              this.visualModel = ((System.Windows.Media.Media3D.ModelVisual3D)(target));              return;              }
Magic Number,Kinect.ShowCase,MainWindow,C:\repos\atosorigin_Kinect\src\Demos\ShowCase\MainWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 1 "..\..\..\MainWindow.xaml"              ((Kinect.ShowCase.MainWindow)(target)).MouseDown += new System.Windows.Input.MouseButtonEventHandler(this.WindowMouseDown);                            #line default              #line hidden                            #line 1 "..\..\..\MainWindow.xaml"              ((Kinect.ShowCase.MainWindow)(target)).Closing += new System.ComponentModel.CancelEventHandler(this.WindowClosing);                            #line default              #line hidden                            #line 1 "..\..\..\MainWindow.xaml"              ((Kinect.ShowCase.MainWindow)(target)).KeyUp += new System.Windows.Input.KeyEventHandler(this.Window_KeyUp);                            #line default              #line hidden              return;              case 2:              this.lblNaam = ((System.Windows.Controls.Label)(target));              return;              case 3:              this.lblWorkshop = ((System.Windows.Controls.TextBlock)(target));              return;              case 4:              this.canvas = ((System.Windows.Controls.Canvas)(target));              return;              case 5:              this.HandImage = ((System.Windows.Controls.Image)(target));              return;              case 6:              this.viewPort = ((System.Windows.Controls.Viewport3D)(target));              return;              case 7:              this.camera = ((System.Windows.Media.Media3D.PerspectiveCamera)(target));              return;              case 8:              this.visualModel = ((System.Windows.Media.Media3D.ModelVisual3D)(target));              return;              }
Magic Number,Kinect.ShowCase,MainWindow,C:\repos\atosorigin_Kinect\src\Demos\ShowCase\MainWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 1 "..\..\..\MainWindow.xaml"              ((Kinect.ShowCase.MainWindow)(target)).MouseDown += new System.Windows.Input.MouseButtonEventHandler(this.WindowMouseDown);                            #line default              #line hidden                            #line 1 "..\..\..\MainWindow.xaml"              ((Kinect.ShowCase.MainWindow)(target)).Closing += new System.ComponentModel.CancelEventHandler(this.WindowClosing);                            #line default              #line hidden                            #line 1 "..\..\..\MainWindow.xaml"              ((Kinect.ShowCase.MainWindow)(target)).KeyUp += new System.Windows.Input.KeyEventHandler(this.Window_KeyUp);                            #line default              #line hidden              return;              case 2:              this.lblNaam = ((System.Windows.Controls.Label)(target));              return;              case 3:              this.lblWorkshop = ((System.Windows.Controls.TextBlock)(target));              return;              case 4:              this.canvas = ((System.Windows.Controls.Canvas)(target));              return;              case 5:              this.HandImage = ((System.Windows.Controls.Image)(target));              return;              case 6:              this.viewPort = ((System.Windows.Controls.Viewport3D)(target));              return;              case 7:              this.camera = ((System.Windows.Media.Media3D.PerspectiveCamera)(target));              return;              case 8:              this.visualModel = ((System.Windows.Media.Media3D.ModelVisual3D)(target));              return;              }
Magic Number,Kinect.ShowCase,MainWindow,C:\repos\atosorigin_Kinect\src\Demos\ShowCase\MainWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 1 "..\..\..\MainWindow.xaml"              ((Kinect.ShowCase.MainWindow)(target)).MouseDown += new System.Windows.Input.MouseButtonEventHandler(this.WindowMouseDown);                            #line default              #line hidden                            #line 1 "..\..\..\MainWindow.xaml"              ((Kinect.ShowCase.MainWindow)(target)).Closing += new System.ComponentModel.CancelEventHandler(this.WindowClosing);                            #line default              #line hidden                            #line 1 "..\..\..\MainWindow.xaml"              ((Kinect.ShowCase.MainWindow)(target)).KeyUp += new System.Windows.Input.KeyEventHandler(this.Window_KeyUp);                            #line default              #line hidden              return;              case 2:              this.lblNaam = ((System.Windows.Controls.Label)(target));              return;              case 3:              this.lblWorkshop = ((System.Windows.Controls.TextBlock)(target));              return;              case 4:              this.canvas = ((System.Windows.Controls.Canvas)(target));              return;              case 5:              this.HandImage = ((System.Windows.Controls.Image)(target));              return;              case 6:              this.viewPort = ((System.Windows.Controls.Viewport3D)(target));              return;              case 7:              this.camera = ((System.Windows.Media.Media3D.PerspectiveCamera)(target));              return;              case 8:              this.visualModel = ((System.Windows.Media.Media3D.ModelVisual3D)(target));              return;              }
Missing Default,Kinect.ShowCase,MainWindow,C:\repos\atosorigin_Kinect\src\Demos\ShowCase\MainWindow.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:                            #line 1 "..\..\..\MainWindow.xaml"              ((Kinect.ShowCase.MainWindow)(target)).MouseDown += new System.Windows.Input.MouseButtonEventHandler(this.WindowMouseDown);                            #line default              #line hidden                            #line 1 "..\..\..\MainWindow.xaml"              ((Kinect.ShowCase.MainWindow)(target)).Closing += new System.ComponentModel.CancelEventHandler(this.WindowClosing);                            #line default              #line hidden                            #line 1 "..\..\..\MainWindow.xaml"              ((Kinect.ShowCase.MainWindow)(target)).KeyUp += new System.Windows.Input.KeyEventHandler(this.Window_KeyUp);                            #line default              #line hidden              return;              case 2:              this.lblNaam = ((System.Windows.Controls.Label)(target));              return;              case 3:              this.lblWorkshop = ((System.Windows.Controls.TextBlock)(target));              return;              case 4:              this.canvas = ((System.Windows.Controls.Canvas)(target));              return;              case 5:              this.HandImage = ((System.Windows.Controls.Image)(target));              return;              case 6:              this.viewPort = ((System.Windows.Controls.Viewport3D)(target));              return;              case 7:              this.camera = ((System.Windows.Media.Media3D.PerspectiveCamera)(target));              return;              case 8:              this.visualModel = ((System.Windows.Media.Media3D.ModelVisual3D)(target));              return;              }
