Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,Kinect.MouseControl,MouseSimulator,D:\research\architectureSmells\repos\atosorigin_Kinect\src\Demos\MouseControl\MouseSimulator.cs,mouse_event,The method has 5 parameters. Parameters: flags' dX' dY' buttons' extraInfo
Long Identifier,Kinect.MouseControl.ViewModels,MainViewModel,D:\research\architectureSmells\repos\atosorigin_Kinect\src\Demos\MouseControl\ViewModels\MainViewModel.cs,,The length of the parameter MouseButtonsIntervalInMilliseconds is 34.
Long Identifier,Kinect.MouseControl.ViewModels,MainViewModel,D:\research\architectureSmells\repos\atosorigin_Kinect\src\Demos\MouseControl\ViewModels\MainViewModel.cs,,The length of the parameter _righthandLeftShoulderCollision is 31.
Long Identifier,Kinect.MouseControl.ViewModels,MainViewModel,D:\research\architectureSmells\repos\atosorigin_Kinect\src\Demos\MouseControl\ViewModels\MainViewModel.cs,,The length of the parameter _lefthandRightShoulderCollision is 31.
Long Statement,Kinect.MouseControl,AtosOverlay,D:\research\architectureSmells\repos\atosorigin_Kinect\src\Demos\MouseControl\AtosOverlay.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/Kinect.MouseControl;component/atosoverlay.xaml"' System.UriKind.Relative); " is 120.
Long Statement,Kinect.MouseControl.ViewModels,MainViewModel,D:\research\architectureSmells\repos\atosorigin_Kinect\src\Demos\MouseControl\ViewModels\MainViewModel.cs,KinectUserCreated,The length of the statement  "                _lefthandRightShoulderCollision = new CollisionFilter(new Point3D(50' 50' 300)' JointID.HandLeft' JointID.ShoulderRight); " is 121.
Long Statement,Kinect.MouseControl.ViewModels,MainViewModel,D:\research\architectureSmells\repos\atosorigin_Kinect\src\Demos\MouseControl\ViewModels\MainViewModel.cs,KinectUserCreated,The length of the statement  "                _righthandLeftShoulderCollision = new CollisionFilter(new Point3D(50' 50' 300)' JointID.HandRight' JointID.ShoulderLeft); " is 121.
Long Statement,XamlGeneratedNamespace,GeneratedInternalTypeHelper,D:\research\architectureSmells\repos\atosorigin_Kinect\src\Demos\MouseControl\obj\x86\Debug\GeneratedInternalTypeHelper.g.cs,CreateInstance,The length of the statement  "            return System.Activator.CreateInstance(type' ((System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic)  " is 128.
Magic Number,Kinect.MouseControl,MouseSimulator,D:\research\architectureSmells\repos\atosorigin_Kinect\src\Demos\MouseControl\MouseSimulator.cs,MouseUp,The following statement contains a magic number: mouse_event(((int)button) * 2' 0' 0' 0' 0);
Magic Number,Kinect.MouseControl.ViewModels,MainViewModel,D:\research\architectureSmells\repos\atosorigin_Kinect\src\Demos\MouseControl\ViewModels\MainViewModel.cs,SetCommands,The following statement contains a magic number: KeyPress = new RelayCommand<KeyEventArgs>(e =>                  {                      Log.DebugFormat("Key pressed: {0}"' e.Key);                      if (e.Key == Key.Q)                      {                          CloseKinect();                          Application.Current.MainWindow.Close();                      }                      else if (e.Key == Key.C)                      {                          switch (_kinect.CameraViewType)                          {                              case Core.CameraView.Depth:                                  _kinect.CameraViewType =                                      Core.CameraView.ColoredDepth;                                  break;                              case Core.CameraView.ColoredDepth:                                  _kinect.CameraViewType = Core.CameraView.Color;                                  break;                              case Core.CameraView.Color:                                  _kinect.CameraViewType = Core.CameraView.None;                                  break;                              case Core.CameraView.None:                                  _kinect.CameraViewType = Core.CameraView.Depth;                                  break;                          }                          SetCameraView();                      }                      else if (e.Key == Key.Up)                      {                          WindowMessage = "New ElevationAngle: " + _kinect.MotorUp(2);                      }                      else if (e.Key == Key.Down)                      {                          WindowMessage = "New ElevationAngle: " + _kinect.MotorDown(2);                      }                      else if (e.Key == Key.M)                      {                          ToggleMouseControl();                      }                  });
Magic Number,Kinect.MouseControl.ViewModels,MainViewModel,D:\research\architectureSmells\repos\atosorigin_Kinect\src\Demos\MouseControl\ViewModels\MainViewModel.cs,SetCommands,The following statement contains a magic number: KeyPress = new RelayCommand<KeyEventArgs>(e =>                  {                      Log.DebugFormat("Key pressed: {0}"' e.Key);                      if (e.Key == Key.Q)                      {                          CloseKinect();                          Application.Current.MainWindow.Close();                      }                      else if (e.Key == Key.C)                      {                          switch (_kinect.CameraViewType)                          {                              case Core.CameraView.Depth:                                  _kinect.CameraViewType =                                      Core.CameraView.ColoredDepth;                                  break;                              case Core.CameraView.ColoredDepth:                                  _kinect.CameraViewType = Core.CameraView.Color;                                  break;                              case Core.CameraView.Color:                                  _kinect.CameraViewType = Core.CameraView.None;                                  break;                              case Core.CameraView.None:                                  _kinect.CameraViewType = Core.CameraView.Depth;                                  break;                          }                          SetCameraView();                      }                      else if (e.Key == Key.Up)                      {                          WindowMessage = "New ElevationAngle: " + _kinect.MotorUp(2);                      }                      else if (e.Key == Key.Down)                      {                          WindowMessage = "New ElevationAngle: " + _kinect.MotorDown(2);                      }                      else if (e.Key == Key.M)                      {                          ToggleMouseControl();                      }                  });
Magic Number,Kinect.MouseControl.ViewModels,MainViewModel,D:\research\architectureSmells\repos\atosorigin_Kinect\src\Demos\MouseControl\ViewModels\MainViewModel.cs,SetUpKinect,The following statement contains a magic number: _kinect.ChangeMaxSkeletonPositions(.6f' .6f);
Magic Number,Kinect.MouseControl.ViewModels,MainViewModel,D:\research\architectureSmells\repos\atosorigin_Kinect\src\Demos\MouseControl\ViewModels\MainViewModel.cs,SetUpKinect,The following statement contains a magic number: _kinect.ChangeMaxSkeletonPositions(.6f' .6f);
Magic Number,Kinect.MouseControl.ViewModels,MainViewModel,D:\research\architectureSmells\repos\atosorigin_Kinect\src\Demos\MouseControl\ViewModels\MainViewModel.cs,KinectUserCreated,The following statement contains a magic number: var framesFilter = new FramesFilter(15);
Magic Number,Kinect.MouseControl.ViewModels,MainViewModel,D:\research\architectureSmells\repos\atosorigin_Kinect\src\Demos\MouseControl\ViewModels\MainViewModel.cs,KinectUserCreated,The following statement contains a magic number: _lefthandRighthandCollision = new CollisionFilter(new Point3D(100' 50' 130)' JointID.HandLeft' JointID.HandRight);
Magic Number,Kinect.MouseControl.ViewModels,MainViewModel,D:\research\architectureSmells\repos\atosorigin_Kinect\src\Demos\MouseControl\ViewModels\MainViewModel.cs,KinectUserCreated,The following statement contains a magic number: _lefthandRighthandCollision = new CollisionFilter(new Point3D(100' 50' 130)' JointID.HandLeft' JointID.HandRight);
Magic Number,Kinect.MouseControl.ViewModels,MainViewModel,D:\research\architectureSmells\repos\atosorigin_Kinect\src\Demos\MouseControl\ViewModels\MainViewModel.cs,KinectUserCreated,The following statement contains a magic number: _lefthandRighthandCollision = new CollisionFilter(new Point3D(100' 50' 130)' JointID.HandLeft' JointID.HandRight);
Magic Number,Kinect.MouseControl.ViewModels,MainViewModel,D:\research\architectureSmells\repos\atosorigin_Kinect\src\Demos\MouseControl\ViewModels\MainViewModel.cs,KinectUserCreated,The following statement contains a magic number: _lefthandHeadCollision = new CollisionFilter(new Point3D(150' 30' 500)' JointID.HandLeft' JointID.Head);
Magic Number,Kinect.MouseControl.ViewModels,MainViewModel,D:\research\architectureSmells\repos\atosorigin_Kinect\src\Demos\MouseControl\ViewModels\MainViewModel.cs,KinectUserCreated,The following statement contains a magic number: _lefthandHeadCollision = new CollisionFilter(new Point3D(150' 30' 500)' JointID.HandLeft' JointID.Head);
Magic Number,Kinect.MouseControl.ViewModels,MainViewModel,D:\research\architectureSmells\repos\atosorigin_Kinect\src\Demos\MouseControl\ViewModels\MainViewModel.cs,KinectUserCreated,The following statement contains a magic number: _lefthandHeadCollision = new CollisionFilter(new Point3D(150' 30' 500)' JointID.HandLeft' JointID.Head);
Magic Number,Kinect.MouseControl.ViewModels,MainViewModel,D:\research\architectureSmells\repos\atosorigin_Kinect\src\Demos\MouseControl\ViewModels\MainViewModel.cs,KinectUserCreated,The following statement contains a magic number: _lefthandRightShoulderCollision = new CollisionFilter(new Point3D(50' 50' 300)' JointID.HandLeft' JointID.ShoulderRight);
Magic Number,Kinect.MouseControl.ViewModels,MainViewModel,D:\research\architectureSmells\repos\atosorigin_Kinect\src\Demos\MouseControl\ViewModels\MainViewModel.cs,KinectUserCreated,The following statement contains a magic number: _lefthandRightShoulderCollision = new CollisionFilter(new Point3D(50' 50' 300)' JointID.HandLeft' JointID.ShoulderRight);
Magic Number,Kinect.MouseControl.ViewModels,MainViewModel,D:\research\architectureSmells\repos\atosorigin_Kinect\src\Demos\MouseControl\ViewModels\MainViewModel.cs,KinectUserCreated,The following statement contains a magic number: _lefthandRightShoulderCollision = new CollisionFilter(new Point3D(50' 50' 300)' JointID.HandLeft' JointID.ShoulderRight);
Magic Number,Kinect.MouseControl.ViewModels,MainViewModel,D:\research\architectureSmells\repos\atosorigin_Kinect\src\Demos\MouseControl\ViewModels\MainViewModel.cs,KinectUserCreated,The following statement contains a magic number: _righthandHeadCollision = new CollisionFilter(new Point3D(125' 40' 150)' JointID.HandRight' JointID.Head);
Magic Number,Kinect.MouseControl.ViewModels,MainViewModel,D:\research\architectureSmells\repos\atosorigin_Kinect\src\Demos\MouseControl\ViewModels\MainViewModel.cs,KinectUserCreated,The following statement contains a magic number: _righthandHeadCollision = new CollisionFilter(new Point3D(125' 40' 150)' JointID.HandRight' JointID.Head);
Magic Number,Kinect.MouseControl.ViewModels,MainViewModel,D:\research\architectureSmells\repos\atosorigin_Kinect\src\Demos\MouseControl\ViewModels\MainViewModel.cs,KinectUserCreated,The following statement contains a magic number: _righthandHeadCollision = new CollisionFilter(new Point3D(125' 40' 150)' JointID.HandRight' JointID.Head);
Magic Number,Kinect.MouseControl.ViewModels,MainViewModel,D:\research\architectureSmells\repos\atosorigin_Kinect\src\Demos\MouseControl\ViewModels\MainViewModel.cs,KinectUserCreated,The following statement contains a magic number: _righthandLeftShoulderCollision = new CollisionFilter(new Point3D(50' 50' 300)' JointID.HandRight' JointID.ShoulderLeft);
Magic Number,Kinect.MouseControl.ViewModels,MainViewModel,D:\research\architectureSmells\repos\atosorigin_Kinect\src\Demos\MouseControl\ViewModels\MainViewModel.cs,KinectUserCreated,The following statement contains a magic number: _righthandLeftShoulderCollision = new CollisionFilter(new Point3D(50' 50' 300)' JointID.HandRight' JointID.ShoulderLeft);
Magic Number,Kinect.MouseControl.ViewModels,MainViewModel,D:\research\architectureSmells\repos\atosorigin_Kinect\src\Demos\MouseControl\ViewModels\MainViewModel.cs,KinectUserCreated,The following statement contains a magic number: _righthandLeftShoulderCollision = new CollisionFilter(new Point3D(50' 50' 300)' JointID.HandRight' JointID.ShoulderLeft);
Magic Number,Kinect.MouseControl.ViewModels,MainViewModel,D:\research\architectureSmells\repos\atosorigin_Kinect\src\Demos\MouseControl\ViewModels\MainViewModel.cs,KinectUserCreated,The following statement contains a magic number: _righthandRightHipCollision = new CollisionFilter(new Point3D(80' 30' 200)' JointID.HandRight' JointID.HipRight);
Magic Number,Kinect.MouseControl.ViewModels,MainViewModel,D:\research\architectureSmells\repos\atosorigin_Kinect\src\Demos\MouseControl\ViewModels\MainViewModel.cs,KinectUserCreated,The following statement contains a magic number: _righthandRightHipCollision = new CollisionFilter(new Point3D(80' 30' 200)' JointID.HandRight' JointID.HipRight);
Magic Number,Kinect.MouseControl.ViewModels,MainViewModel,D:\research\architectureSmells\repos\atosorigin_Kinect\src\Demos\MouseControl\ViewModels\MainViewModel.cs,KinectUserCreated,The following statement contains a magic number: _righthandRightHipCollision = new CollisionFilter(new Point3D(80' 30' 200)' JointID.HandRight' JointID.HipRight);
Magic Number,Kinect.MouseControl.ViewModels,MainViewModel,D:\research\architectureSmells\repos\atosorigin_Kinect\src\Demos\MouseControl\ViewModels\MainViewModel.cs,ActiveUserUpdated,The following statement contains a magic number: switch(_currentMode)                  {                      case ControlMode.MouseControl:                          point = e.Event.HandLeft.ToScreenPosition(new Size(640' 480)' _screenResolution);                          break;                      case ControlMode.AngryBirds:                          point = e.Event.Spine.ToScreenPosition(new Size(640' 480)' _screenResolution);                          break;                      default: return;                  }
Magic Number,Kinect.MouseControl.ViewModels,MainViewModel,D:\research\architectureSmells\repos\atosorigin_Kinect\src\Demos\MouseControl\ViewModels\MainViewModel.cs,ActiveUserUpdated,The following statement contains a magic number: switch(_currentMode)                  {                      case ControlMode.MouseControl:                          point = e.Event.HandLeft.ToScreenPosition(new Size(640' 480)' _screenResolution);                          break;                      case ControlMode.AngryBirds:                          point = e.Event.Spine.ToScreenPosition(new Size(640' 480)' _screenResolution);                          break;                      default: return;                  }
Magic Number,Kinect.MouseControl.ViewModels,MainViewModel,D:\research\architectureSmells\repos\atosorigin_Kinect\src\Demos\MouseControl\ViewModels\MainViewModel.cs,ActiveUserUpdated,The following statement contains a magic number: switch(_currentMode)                  {                      case ControlMode.MouseControl:                          point = e.Event.HandLeft.ToScreenPosition(new Size(640' 480)' _screenResolution);                          break;                      case ControlMode.AngryBirds:                          point = e.Event.Spine.ToScreenPosition(new Size(640' 480)' _screenResolution);                          break;                      default: return;                  }
Magic Number,Kinect.MouseControl.ViewModels,MainViewModel,D:\research\architectureSmells\repos\atosorigin_Kinect\src\Demos\MouseControl\ViewModels\MainViewModel.cs,ActiveUserUpdated,The following statement contains a magic number: switch(_currentMode)                  {                      case ControlMode.MouseControl:                          point = e.Event.HandLeft.ToScreenPosition(new Size(640' 480)' _screenResolution);                          break;                      case ControlMode.AngryBirds:                          point = e.Event.Spine.ToScreenPosition(new Size(640' 480)' _screenResolution);                          break;                      default: return;                  }
Missing Default,Kinect.MouseControl,MouseSimulator,D:\research\architectureSmells\repos\atosorigin_Kinect\src\Demos\MouseControl\MouseSimulator.cs,MouseDown,The following switch statement is missing a default case: switch (button)              {                  case System.Windows.Input.MouseButton.Left:                      MouseDown(MouseButton.Left);                      break;                  case System.Windows.Input.MouseButton.Middle:                      MouseDown(MouseButton.Middle);                      break;                  case System.Windows.Input.MouseButton.Right:                      MouseDown(MouseButton.Right);                      break;              }
Missing Default,Kinect.MouseControl,MouseSimulator,D:\research\architectureSmells\repos\atosorigin_Kinect\src\Demos\MouseControl\MouseSimulator.cs,MouseUp,The following switch statement is missing a default case: switch (button)              {                  case System.Windows.Input.MouseButton.Left:                      MouseUp(MouseButton.Left);                      break;                  case System.Windows.Input.MouseButton.Middle:                      MouseUp(MouseButton.Middle);                      break;                  case System.Windows.Input.MouseButton.Right:                      MouseUp(MouseButton.Right);                      break;              }
Missing Default,Kinect.MouseControl.ViewModels,MainViewModel,D:\research\architectureSmells\repos\atosorigin_Kinect\src\Demos\MouseControl\ViewModels\MainViewModel.cs,SetCommands,The following switch statement is missing a default case: switch (_kinect.CameraViewType)                          {                              case Core.CameraView.Depth:                                  _kinect.CameraViewType =                                      Core.CameraView.ColoredDepth;                                  break;                              case Core.CameraView.ColoredDepth:                                  _kinect.CameraViewType = Core.CameraView.Color;                                  break;                              case Core.CameraView.Color:                                  _kinect.CameraViewType = Core.CameraView.None;                                  break;                              case Core.CameraView.None:                                  _kinect.CameraViewType = Core.CameraView.Depth;                                  break;                          }
Missing Default,Kinect.MouseControl.ViewModels,MainViewModel,D:\research\architectureSmells\repos\atosorigin_Kinect\src\Demos\MouseControl\ViewModels\MainViewModel.cs,SetCameraView,The following switch statement is missing a default case: switch (_kinect.CameraViewType)                  {                      case Core.CameraView.Color:                          CameraVisibility = Visibility.Visible;                          break;                      case Core.CameraView.Depth:                          CameraVisibility = Visibility.Visible;                          break;                      case Core.CameraView.ColoredDepth:                          CameraVisibility = Visibility.Visible;                          break;                      case Core.CameraView.None:                          CameraVisibility = Visibility.Collapsed;                          break;                  }
Missing Default,Kinect.MouseControl.ViewModels,MainViewModel,D:\research\architectureSmells\repos\atosorigin_Kinect\src\Demos\MouseControl\ViewModels\MainViewModel.cs,SwitchMode,The following switch statement is missing a default case: switch (_currentMode)              {                  case ControlMode.MouseControl:                      _righthandRightHipCollision.Filtered += FireMouseUp;                      _righthandRightHipGesture.SelfTouchDetected += FireMouseDown;                      _righthandHeadGesture.SelfTouchDetected += FireMouseClick;                  break;                  case ControlMode.AngryBirds:                      _lefthandRighthandCollision.Filtered += FireMouseUp;                      _lefthandRighthandGesture.SelfTouchDetected += FireMouseDown;                      _lefthandHeadGesture.SelfTouchDetected += FireMouseClick;                  break;              }
