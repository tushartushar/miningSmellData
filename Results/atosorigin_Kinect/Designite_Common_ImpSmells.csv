Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Kinect.Common.ColorHelpers,PatternGenerator,D:\research\architectureSmells\repos\atosorigin_Kinect\src\Framework\Common\ColorHelpers\PatternGenerator.cs,NextPattern,Cyclomatic complexity of the method is 8
Long Parameter List,Kinect.Common,ClassExtensions,D:\research\architectureSmells\repos\atosorigin_Kinect\src\Framework\Common\ClassExtensions.cs,ToScreenPosition,The method has 5 parameters. Parameters: point' cameraResolution' screenResolution' startPoint' handResolution
Long Parameter List,Kinect.Common,ClassExtensions,D:\research\architectureSmells\repos\atosorigin_Kinect\src\Framework\Common\ClassExtensions.cs,ToScreenPosition,The method has 6 parameters. Parameters: point' cameraResolution' screenResolution' startPoint' handResolution' keepInBounds
Long Parameter List,Kinect.Common,MouseHook,D:\research\architectureSmells\repos\atosorigin_Kinect\src\Framework\Common\MouseHook.cs,mouse_event,The method has 5 parameters. Parameters: flags' dX' dY' buttons' extraInfo
Magic Number,Kinect.Common,ClassExtensions,D:\research\architectureSmells\repos\atosorigin_Kinect\src\Framework\Common\ClassExtensions.cs,ToScreenPosition,The following statement contains a magic number: double z = 75 - point.Z/300;
Magic Number,Kinect.Common,ClassExtensions,D:\research\architectureSmells\repos\atosorigin_Kinect\src\Framework\Common\ClassExtensions.cs,ToScreenPosition,The following statement contains a magic number: double z = 75 - point.Z/300;
Magic Number,Kinect.Common,ClassExtensions,D:\research\architectureSmells\repos\atosorigin_Kinect\src\Framework\Common\ClassExtensions.cs,ToScreenPosition,The following statement contains a magic number: z = 10;
Magic Number,Kinect.Common,ClassExtensions,D:\research\architectureSmells\repos\atosorigin_Kinect\src\Framework\Common\ClassExtensions.cs,ToScreenPosition,The following statement contains a magic number: z < 10
Magic Number,Kinect.Common,MouseHook,D:\research\architectureSmells\repos\atosorigin_Kinect\src\Framework\Common\MouseHook.cs,MouseUp,The following statement contains a magic number: mouse_event(((int) button)*2' 0' 0' 0' 0);
Magic Number,Kinect.Common.ColorHelpers,ColorGenerator,D:\research\architectureSmells\repos\atosorigin_Kinect\src\Framework\Common\ColorHelpers\ColorGenerator.cs,NextColor,The following statement contains a magic number: Color color = Color.FromRgb(                  (byte) int.Parse(colorString.Substring(0' 2)' NumberStyles.HexNumber)'                  (byte) int.Parse(colorString.Substring(2' 2)' NumberStyles.HexNumber)'                  (byte) int.Parse(colorString.Substring(4' 2)' NumberStyles.HexNumber));
Magic Number,Kinect.Common.ColorHelpers,ColorGenerator,D:\research\architectureSmells\repos\atosorigin_Kinect\src\Framework\Common\ColorHelpers\ColorGenerator.cs,NextColor,The following statement contains a magic number: Color color = Color.FromRgb(                  (byte) int.Parse(colorString.Substring(0' 2)' NumberStyles.HexNumber)'                  (byte) int.Parse(colorString.Substring(2' 2)' NumberStyles.HexNumber)'                  (byte) int.Parse(colorString.Substring(4' 2)' NumberStyles.HexNumber));
Magic Number,Kinect.Common.ColorHelpers,ColorGenerator,D:\research\architectureSmells\repos\atosorigin_Kinect\src\Framework\Common\ColorHelpers\ColorGenerator.cs,NextColor,The following statement contains a magic number: Color color = Color.FromRgb(                  (byte) int.Parse(colorString.Substring(0' 2)' NumberStyles.HexNumber)'                  (byte) int.Parse(colorString.Substring(2' 2)' NumberStyles.HexNumber)'                  (byte) int.Parse(colorString.Substring(4' 2)' NumberStyles.HexNumber));
Magic Number,Kinect.Common.ColorHelpers,ColorGenerator,D:\research\architectureSmells\repos\atosorigin_Kinect\src\Framework\Common\ColorHelpers\ColorGenerator.cs,NextColor,The following statement contains a magic number: Color color = Color.FromRgb(                  (byte) int.Parse(colorString.Substring(0' 2)' NumberStyles.HexNumber)'                  (byte) int.Parse(colorString.Substring(2' 2)' NumberStyles.HexNumber)'                  (byte) int.Parse(colorString.Substring(4' 2)' NumberStyles.HexNumber));
Magic Number,Kinect.Common.ColorHelpers,ColorGenerator,D:\research\architectureSmells\repos\atosorigin_Kinect\src\Framework\Common\ColorHelpers\ColorGenerator.cs,NextColor,The following statement contains a magic number: Color color = Color.FromRgb(                  (byte) int.Parse(colorString.Substring(0' 2)' NumberStyles.HexNumber)'                  (byte) int.Parse(colorString.Substring(2' 2)' NumberStyles.HexNumber)'                  (byte) int.Parse(colorString.Substring(4' 2)' NumberStyles.HexNumber));
Magic Number,Kinect.Common.ColorHelpers,IntensityGenerator,D:\research\architectureSmells\repos\atosorigin_Kinect\src\Framework\Common\ColorHelpers\IntensityGenerator.cs,NextIntensity,The following statement contains a magic number: _current = 255;
Magic Number,Kinect.Common.ColorHelpers,IntensityValueWalker,D:\research\architectureSmells\repos\atosorigin_Kinect\src\Framework\Common\ColorHelpers\IntensityValueWalker.cs,IntensityValueWalker,The following statement contains a magic number: Current = new IntensityValue(null' 1 << 7' 1);
Magic Number,Kinect.Common.ColorHelpers,PatternGenerator,D:\research\architectureSmells\repos\atosorigin_Kinect\src\Framework\Common\ColorHelpers\PatternGenerator.cs,NextPattern,The following statement contains a magic number: switch (index%7)              {                  case 0:                      return "{0}0000";                  case 1:                      return "00{0}00";                  case 2:                      return "0000{0}";                  case 3:                      return "{0}{0}00";                  case 4:                      return "{0}00{0}";                  case 5:                      return "00{0}{0}";                  case 6:                      return "{0}{0}{0}";                  default:                      throw new Exception("Math error");              }
Magic Number,Kinect.Common.ColorHelpers,PatternGenerator,D:\research\architectureSmells\repos\atosorigin_Kinect\src\Framework\Common\ColorHelpers\PatternGenerator.cs,NextPattern,The following statement contains a magic number: switch (index%7)              {                  case 0:                      return "{0}0000";                  case 1:                      return "00{0}00";                  case 2:                      return "0000{0}";                  case 3:                      return "{0}{0}00";                  case 4:                      return "{0}00{0}";                  case 5:                      return "00{0}{0}";                  case 6:                      return "{0}{0}{0}";                  default:                      throw new Exception("Math error");              }
Magic Number,Kinect.Common.ColorHelpers,PatternGenerator,D:\research\architectureSmells\repos\atosorigin_Kinect\src\Framework\Common\ColorHelpers\PatternGenerator.cs,NextPattern,The following statement contains a magic number: switch (index%7)              {                  case 0:                      return "{0}0000";                  case 1:                      return "00{0}00";                  case 2:                      return "0000{0}";                  case 3:                      return "{0}{0}00";                  case 4:                      return "{0}00{0}";                  case 5:                      return "00{0}{0}";                  case 6:                      return "{0}{0}{0}";                  default:                      throw new Exception("Math error");              }
Magic Number,Kinect.Common.ColorHelpers,PatternGenerator,D:\research\architectureSmells\repos\atosorigin_Kinect\src\Framework\Common\ColorHelpers\PatternGenerator.cs,NextPattern,The following statement contains a magic number: switch (index%7)              {                  case 0:                      return "{0}0000";                  case 1:                      return "00{0}00";                  case 2:                      return "0000{0}";                  case 3:                      return "{0}{0}00";                  case 4:                      return "{0}00{0}";                  case 5:                      return "00{0}{0}";                  case 6:                      return "{0}{0}{0}";                  default:                      throw new Exception("Math error");              }
Magic Number,Kinect.Common.ColorHelpers,PatternGenerator,D:\research\architectureSmells\repos\atosorigin_Kinect\src\Framework\Common\ColorHelpers\PatternGenerator.cs,NextPattern,The following statement contains a magic number: switch (index%7)              {                  case 0:                      return "{0}0000";                  case 1:                      return "00{0}00";                  case 2:                      return "0000{0}";                  case 3:                      return "{0}{0}00";                  case 4:                      return "{0}00{0}";                  case 5:                      return "00{0}{0}";                  case 6:                      return "{0}{0}{0}";                  default:                      throw new Exception("Math error");              }
Magic Number,Kinect.Common.ColorHelpers,PatternGenerator,D:\research\architectureSmells\repos\atosorigin_Kinect\src\Framework\Common\ColorHelpers\PatternGenerator.cs,NextPattern,The following statement contains a magic number: switch (index%7)              {                  case 0:                      return "{0}0000";                  case 1:                      return "00{0}00";                  case 2:                      return "0000{0}";                  case 3:                      return "{0}{0}00";                  case 4:                      return "{0}00{0}";                  case 5:                      return "00{0}{0}";                  case 6:                      return "{0}{0}{0}";                  default:                      throw new Exception("Math error");              }
Magic Number,Common.ColorHelpers,IntensityValue,D:\research\architectureSmells\repos\atosorigin_Kinect\src\Framework\Common\ColorHelpers\IntensityValue.cs,IntensityValue,The following statement contains a magic number: level > 7
Missing Default,Kinect.Common,MouseHook,D:\research\architectureSmells\repos\atosorigin_Kinect\src\Framework\Common\MouseHook.cs,MouseDown,The following switch statement is missing a default case: switch (button)              {                  case MouseButtons.Left:                      MouseDown(MouseButton.Left);                      break;                  case MouseButtons.Middle:                      MouseDown(MouseButton.Middle);                      break;                  case MouseButtons.Right:                      MouseDown(MouseButton.Right);                      break;              }
Missing Default,Kinect.Common,MouseHook,D:\research\architectureSmells\repos\atosorigin_Kinect\src\Framework\Common\MouseHook.cs,MouseUp,The following switch statement is missing a default case: switch (button)              {                  case MouseButtons.Left:                      MouseUp(MouseButton.Left);                      break;                  case MouseButtons.Middle:                      MouseUp(MouseButton.Middle);                      break;                  case MouseButtons.Right:                      MouseUp(MouseButton.Right);                      break;              }
Missing Default,Kinect.Common,MouseHook,D:\research\architectureSmells\repos\atosorigin_Kinect\src\Framework\Common\MouseHook.cs,Click,The following switch statement is missing a default case: switch (button)              {                  case MouseButtons.Left:                      Click(MouseButton.Left);                      break;                  case MouseButtons.Middle:                      Click(MouseButton.Middle);                      break;                  case MouseButtons.Right:                      Click(MouseButton.Right);                      break;              }
Missing Default,Kinect.Common,MouseHook,D:\research\architectureSmells\repos\atosorigin_Kinect\src\Framework\Common\MouseHook.cs,DoubleClick,The following switch statement is missing a default case: switch (button)              {                  case MouseButtons.Left:                      DoubleClick(MouseButton.Left);                      break;                  case MouseButtons.Middle:                      DoubleClick(MouseButton.Middle);                      break;                  case MouseButtons.Right:                      DoubleClick(MouseButton.Right);                      break;              }
