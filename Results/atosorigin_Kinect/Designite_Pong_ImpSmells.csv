Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Kinect.Pong.Models,Paddle,D:\research\architectureSmells\repos\atosorigin_Kinect\src\Demos\Pong\Models\Paddle.cs,DetermineBallToTrack,Cyclomatic complexity of the method is 11
Long Statement,XamlGeneratedNamespace,GeneratedInternalTypeHelper,D:\research\architectureSmells\repos\atosorigin_Kinect\src\Demos\Pong\obj\x86\Debug\GeneratedInternalTypeHelper.g.cs,CreateInstance,The length of the statement  "            return System.Activator.CreateInstance(type' ((System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic)  " is 128.
Complex Conditional,Kinect.Pong.Models,Ball,D:\research\architectureSmells\repos\atosorigin_Kinect\src\Demos\Pong\Models\Ball.cs,DetermineBallCollision,The conditional expression  "ball.Position.X >= minx && ball.Position.X <= maxx &&                      ball.Position.Y >= minY && ball.Position.Y <= maxY"  is complex.
Magic Number,Kinect.Pong.Models,Ball,D:\research\architectureSmells\repos\atosorigin_Kinect\src\Demos\Pong\Models\Ball.cs,Ball,The following statement contains a magic number: Position = new Point(Boundry.Width/2 - (Radius/2)' Boundry.Height/2 - (Radius/2));
Magic Number,Kinect.Pong.Models,Ball,D:\research\architectureSmells\repos\atosorigin_Kinect\src\Demos\Pong\Models\Ball.cs,Ball,The following statement contains a magic number: Position = new Point(Boundry.Width/2 - (Radius/2)' Boundry.Height/2 - (Radius/2));
Magic Number,Kinect.Pong.Models,Ball,D:\research\architectureSmells\repos\atosorigin_Kinect\src\Demos\Pong\Models\Ball.cs,Ball,The following statement contains a magic number: Position = new Point(Boundry.Width/2 - (Radius/2)' Boundry.Height/2 - (Radius/2));
Magic Number,Kinect.Pong.Models,Ball,D:\research\architectureSmells\repos\atosorigin_Kinect\src\Demos\Pong\Models\Ball.cs,Ball,The following statement contains a magic number: Position = new Point(Boundry.Width/2 - (Radius/2)' Boundry.Height/2 - (Radius/2));
Magic Number,Kinect.Pong.Models,Ball,D:\research\architectureSmells\repos\atosorigin_Kinect\src\Demos\Pong\Models\Ball.cs,Ball,The following statement contains a magic number: XVelocity = (Math.Cos(Angle*(Math.PI/180))*Speed);
Magic Number,Kinect.Pong.Models,Ball,D:\research\architectureSmells\repos\atosorigin_Kinect\src\Demos\Pong\Models\Ball.cs,Ball,The following statement contains a magic number: YVelocity = (Math.Sin(Angle*(Math.PI/180))*Speed);
Magic Number,Kinect.Pong.Models,Ball,D:\research\architectureSmells\repos\atosorigin_Kinect\src\Demos\Pong\Models\Ball.cs,Ball,The following statement contains a magic number: XVelocity = XVelocity < 0 ? XVelocity - 0.5 : XVelocity + 0.5;
Magic Number,Kinect.Pong.Models,Ball,D:\research\architectureSmells\repos\atosorigin_Kinect\src\Demos\Pong\Models\Ball.cs,Ball,The following statement contains a magic number: XVelocity = XVelocity < 0 ? XVelocity - 0.5 : XVelocity + 0.5;
Magic Number,Kinect.Pong.Models,Ball,D:\research\architectureSmells\repos\atosorigin_Kinect\src\Demos\Pong\Models\Ball.cs,Ball,The following statement contains a magic number: XVelocity > -0.5 && XVelocity < 0.5
Magic Number,Kinect.Pong.Models,Ball,D:\research\architectureSmells\repos\atosorigin_Kinect\src\Demos\Pong\Models\Ball.cs,Ball,The following statement contains a magic number: XVelocity > -0.5 && XVelocity < 0.5
Magic Number,Kinect.Pong.Models,Ball,D:\research\architectureSmells\repos\atosorigin_Kinect\src\Demos\Pong\Models\Ball.cs,Ball,The following statement contains a magic number: YVelocity = YVelocity < 0 ? YVelocity - 0.5 : YVelocity + 0.5;
Magic Number,Kinect.Pong.Models,Ball,D:\research\architectureSmells\repos\atosorigin_Kinect\src\Demos\Pong\Models\Ball.cs,Ball,The following statement contains a magic number: YVelocity = YVelocity < 0 ? YVelocity - 0.5 : YVelocity + 0.5;
Magic Number,Kinect.Pong.Models,Ball,D:\research\architectureSmells\repos\atosorigin_Kinect\src\Demos\Pong\Models\Ball.cs,Ball,The following statement contains a magic number: YVelocity > -0.5 && YVelocity < 0.5
Magic Number,Kinect.Pong.Models,Ball,D:\research\architectureSmells\repos\atosorigin_Kinect\src\Demos\Pong\Models\Ball.cs,Ball,The following statement contains a magic number: YVelocity > -0.5 && YVelocity < 0.5
Magic Number,Kinect.Pong.Models,Ball,D:\research\architectureSmells\repos\atosorigin_Kinect\src\Demos\Pong\Models\Ball.cs,DetermineBallCollision,The following statement contains a magic number: double minx = Position.X - (Radius/2);
Magic Number,Kinect.Pong.Models,Ball,D:\research\architectureSmells\repos\atosorigin_Kinect\src\Demos\Pong\Models\Ball.cs,DetermineBallCollision,The following statement contains a magic number: double maxx = Position.X + (Radius/2);
Magic Number,Kinect.Pong.Models,Ball,D:\research\architectureSmells\repos\atosorigin_Kinect\src\Demos\Pong\Models\Ball.cs,DetermineBallCollision,The following statement contains a magic number: double minY = Position.Y - (Radius/2);
Magic Number,Kinect.Pong.Models,Ball,D:\research\architectureSmells\repos\atosorigin_Kinect\src\Demos\Pong\Models\Ball.cs,DetermineBallCollision,The following statement contains a magic number: double maxY = Position.Y + (Radius/2);
Magic Number,Kinect.Pong.Models,Ball,D:\research\architectureSmells\repos\atosorigin_Kinect\src\Demos\Pong\Models\Ball.cs,DeterminePaddleCollision,The following statement contains a magic number: (paddle.Position.X + (Radius/2) + paddle.Width) > Position.X + (Radius/2) &&                          Position.Y + (Radius/2) > paddle.Position.Y + (Radius/2) &&                          Position.Y + (Radius/2) < paddle.Position.Y + (Radius/2) + paddle.Height
Magic Number,Kinect.Pong.Models,Ball,D:\research\architectureSmells\repos\atosorigin_Kinect\src\Demos\Pong\Models\Ball.cs,DeterminePaddleCollision,The following statement contains a magic number: (paddle.Position.X + (Radius/2) + paddle.Width) > Position.X + (Radius/2) &&                          Position.Y + (Radius/2) > paddle.Position.Y + (Radius/2) &&                          Position.Y + (Radius/2) < paddle.Position.Y + (Radius/2) + paddle.Height
Magic Number,Kinect.Pong.Models,Ball,D:\research\architectureSmells\repos\atosorigin_Kinect\src\Demos\Pong\Models\Ball.cs,DeterminePaddleCollision,The following statement contains a magic number: (paddle.Position.X + (Radius/2) + paddle.Width) > Position.X + (Radius/2) &&                          Position.Y + (Radius/2) > paddle.Position.Y + (Radius/2) &&                          Position.Y + (Radius/2) < paddle.Position.Y + (Radius/2) + paddle.Height
Magic Number,Kinect.Pong.Models,Ball,D:\research\architectureSmells\repos\atosorigin_Kinect\src\Demos\Pong\Models\Ball.cs,DeterminePaddleCollision,The following statement contains a magic number: (paddle.Position.X + (Radius/2) + paddle.Width) > Position.X + (Radius/2) &&                          Position.Y + (Radius/2) > paddle.Position.Y + (Radius/2) &&                          Position.Y + (Radius/2) < paddle.Position.Y + (Radius/2) + paddle.Height
Magic Number,Kinect.Pong.Models,Ball,D:\research\architectureSmells\repos\atosorigin_Kinect\src\Demos\Pong\Models\Ball.cs,DeterminePaddleCollision,The following statement contains a magic number: (paddle.Position.X + (Radius/2) + paddle.Width) > Position.X + (Radius/2) &&                          Position.Y + (Radius/2) > paddle.Position.Y + (Radius/2) &&                          Position.Y + (Radius/2) < paddle.Position.Y + (Radius/2) + paddle.Height
Magic Number,Kinect.Pong.Models,Ball,D:\research\architectureSmells\repos\atosorigin_Kinect\src\Demos\Pong\Models\Ball.cs,DeterminePaddleCollision,The following statement contains a magic number: (paddle.Position.X + (Radius/2) + paddle.Width) > Position.X + (Radius/2) &&                          Position.Y + (Radius/2) > paddle.Position.Y + (Radius/2) &&                          Position.Y + (Radius/2) < paddle.Position.Y + (Radius/2) + paddle.Height
Magic Number,Kinect.Pong.Models,Paddle,D:\research\architectureSmells\repos\atosorigin_Kinect\src\Demos\Pong\Models\Paddle.cs,Paddle,The following statement contains a magic number: _speed = 2;
Magic Number,Kinect.Pong.Models,Paddle,D:\research\architectureSmells\repos\atosorigin_Kinect\src\Demos\Pong\Models\Paddle.cs,Paddle,The following statement contains a magic number: Height = 100;
Magic Number,Kinect.Pong.Models,Paddle,D:\research\architectureSmells\repos\atosorigin_Kinect\src\Demos\Pong\Models\Paddle.cs,Paddle,The following statement contains a magic number: Width = 20;
Magic Number,Kinect.Pong.Models,Paddle,D:\research\architectureSmells\repos\atosorigin_Kinect\src\Demos\Pong\Models\Paddle.cs,PositionPaddle,The following statement contains a magic number: Position = new Point(Boundry.X + (Boundry.Width/100)' (Boundry.Height/2) - (Height/2));
Magic Number,Kinect.Pong.Models,Paddle,D:\research\architectureSmells\repos\atosorigin_Kinect\src\Demos\Pong\Models\Paddle.cs,PositionPaddle,The following statement contains a magic number: Position = new Point(Boundry.X + (Boundry.Width/100)' (Boundry.Height/2) - (Height/2));
Magic Number,Kinect.Pong.Models,Paddle,D:\research\architectureSmells\repos\atosorigin_Kinect\src\Demos\Pong\Models\Paddle.cs,PositionPaddle,The following statement contains a magic number: Position = new Point(Boundry.X + (Boundry.Width/100)' (Boundry.Height/2) - (Height/2));
Magic Number,Kinect.Pong.Models,Paddle,D:\research\architectureSmells\repos\atosorigin_Kinect\src\Demos\Pong\Models\Paddle.cs,DetermineMovement,The following statement contains a magic number: ballToTrack.Position.Y > Position.Y + Height/2
Magic Number,Kinect.Pong.Models,Paddle,D:\research\architectureSmells\repos\atosorigin_Kinect\src\Demos\Pong\Models\Paddle.cs,DetermineMovement,The following statement contains a magic number: ballToTrack.Position.Y < Position.Y + Height/2
Magic Number,Kinect.Pong.Models,PongGame,D:\research\architectureSmells\repos\atosorigin_Kinect\src\Demos\Pong\Models\PongGame.cs,AddBall,The following statement contains a magic number: var ball = new Ball(25' new Random(DateTime.Now.Millisecond).Next(360)' 2);
Magic Number,Kinect.Pong.Models,PongGame,D:\research\architectureSmells\repos\atosorigin_Kinect\src\Demos\Pong\Models\PongGame.cs,AddBall,The following statement contains a magic number: var ball = new Ball(25' new Random(DateTime.Now.Millisecond).Next(360)' 2);
Magic Number,Kinect.Pong.Models,PongGame,D:\research\architectureSmells\repos\atosorigin_Kinect\src\Demos\Pong\Models\PongGame.cs,AddBall,The following statement contains a magic number: var ball = new Ball(25' new Random(DateTime.Now.Millisecond).Next(360)' 2);
Magic Number,Kinect.Pong.ViewModels,MainViewModel,D:\research\architectureSmells\repos\atosorigin_Kinect\src\Demos\Pong\ViewModels\MainViewModel.cs,_kinect_UserCreated,The following statement contains a magic number: DispatcherHelper.CheckBeginInvokeOnUI(() =>                                                        {                                                            lock (_syncRoot)                                                            {                                                                User kuser = _kinect.GetUser(e.User.Id);                                                                if (kuser != null)                                                                {                                                                    _player = kuser;                                                                    AccelerationGesture AccelerationGesture =                                                                        _player.AddAccelerationGesture();                                                                    AccelerationGesture.AccelerationCalculated +=                                                                        AccelerationGesture_AccelerationCalculated;                                                                    if (_players.Count%2 == 0)                                                                    {                                                                        PongGame.Paddles.Add(new Paddle(                                                                                                 Paddle.Side.Right' false'                                                                                                 kuser.Id));                                                                    }                                                                    else                                                                    {                                                                        PongGame.Paddles.Add(new Paddle(Paddle.Side.Left'                                                                                                        false' kuser.Id));                                                                    }                                                                    _players.Add(_player);                                                                    if (PongGame.Paddles.Count == 2)                                                                    {                                                                        PongGame.AddBall();                                                                    }                                                                }                                                                DebugInformation = "User Created";                                                            }                                                        });
Magic Number,Kinect.Pong.ViewModels,MainViewModel,D:\research\architectureSmells\repos\atosorigin_Kinect\src\Demos\Pong\ViewModels\MainViewModel.cs,_kinect_UserCreated,The following statement contains a magic number: DispatcherHelper.CheckBeginInvokeOnUI(() =>                                                        {                                                            lock (_syncRoot)                                                            {                                                                User kuser = _kinect.GetUser(e.User.Id);                                                                if (kuser != null)                                                                {                                                                    _player = kuser;                                                                    AccelerationGesture AccelerationGesture =                                                                        _player.AddAccelerationGesture();                                                                    AccelerationGesture.AccelerationCalculated +=                                                                        AccelerationGesture_AccelerationCalculated;                                                                    if (_players.Count%2 == 0)                                                                    {                                                                        PongGame.Paddles.Add(new Paddle(                                                                                                 Paddle.Side.Right' false'                                                                                                 kuser.Id));                                                                    }                                                                    else                                                                    {                                                                        PongGame.Paddles.Add(new Paddle(Paddle.Side.Left'                                                                                                        false' kuser.Id));                                                                    }                                                                    _players.Add(_player);                                                                    if (PongGame.Paddles.Count == 2)                                                                    {                                                                        PongGame.AddBall();                                                                    }                                                                }                                                                DebugInformation = "User Created";                                                            }                                                        });
Magic Number,Kinect.Pong.ViewModels,MainViewModel,D:\research\architectureSmells\repos\atosorigin_Kinect\src\Demos\Pong\ViewModels\MainViewModel.cs,AccelerationGesture_AccelerationCalculated,The following statement contains a magic number: PongGame.Paddles.First(paddle => paddle.KinectUserID == e.UserID).SetDirection(4*e.DeltaY);
