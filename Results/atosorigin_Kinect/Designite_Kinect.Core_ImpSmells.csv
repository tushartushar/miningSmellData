Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Kinect.Core,Camera,D:\research\architectureSmells\repos\atosorigin_Kinect\src\Framework\Core\Camera.cs,ConvertDepthFrame,Cyclomatic complexity of the method is 10
Complex Method,Kinect.Core.Filters.Helper,FilterHelper,D:\research\architectureSmells\repos\atosorigin_Kinect\src\Framework\Core\Filters\Helper\FilterHelper.cs,GetPoint,Cyclomatic complexity of the method is 18
Complex Method,Kinect.Core.Filters.Helper,FilterHelper,D:\research\architectureSmells\repos\atosorigin_Kinect\src\Framework\Core\Filters\Helper\FilterHelper.cs,SetPoint,Cyclomatic complexity of the method is 18
Complex Method,Kinect.Core.Gestures,GestureFactory,D:\research\architectureSmells\repos\atosorigin_Kinect\src\Framework\Core\Gestures\GestureFactory.cs,AddSelfTouchGesture,Cyclomatic complexity of the method is 11
Complex Method,Kinect.Core.Gestures,GestureFactory,D:\research\architectureSmells\repos\atosorigin_Kinect\src\Framework\Core\Gestures\GestureFactory.cs,GetFilters,Cyclomatic complexity of the method is 9
Complex Method,Kinect.Core.Gestures,ClapGesture,D:\research\architectureSmells\repos\atosorigin_Kinect\src\Framework\Core\Gestures\ClapGesture.cs,AddPoints,Cyclomatic complexity of the method is 8
Complex Method,Kinect.Core.Gestures,ClickGesture,D:\research\architectureSmells\repos\atosorigin_Kinect\src\Framework\Core\Gestures\ClickGesture.cs,CheckLeftClick,Cyclomatic complexity of the method is 9
Complex Method,Kinect.Core.Gestures,ClickGesture,D:\research\architectureSmells\repos\atosorigin_Kinect\src\Framework\Core\Gestures\ClickGesture.cs,CheckRightClick,Cyclomatic complexity of the method is 9
Complex Method,Kinect.Core.Gestures.Helper,Calculator,D:\research\architectureSmells\repos\atosorigin_Kinect\src\Framework\Core\Gestures\Helper\Calculator.cs,CalculateAngle,Cyclomatic complexity of the method is 8
Long Statement,Kinect.Core,MyKinect,D:\research\architectureSmells\repos\atosorigin_Kinect\src\Framework\Core\MyKinect.cs,StartKinectThread,The length of the statement  "                        _context.Initialize(RuntimeOptions.UseDepthAndPlayerIndex | RuntimeOptions.UseSkeletalTracking | RuntimeOptions.UseColor);" is 122.
Long Statement,Kinect.Core,Camera,D:\research\architectureSmells\repos\atosorigin_Kinect\src\Framework\Core\Camera.cs,Context_DepthFrameReady,The length of the statement  "            BitmapSource bitmap = BitmapSource.Create(image.Width' image.Height' 96' 96' PixelFormats.Gray16' null' image.Bits' image.Width * image.BytesPerPixel); " is 151.
Long Statement,Kinect.Core.Gestures.Helper,Calculator,D:\research\architectureSmells\repos\atosorigin_Kinect\src\Framework\Core\Gestures\Helper\Calculator.cs,CalculateAngle,The length of the statement  "                    // was resY. i think 0'0 is seen as same as up... There is an error in http://www.carlosfemmer.com/post/2006/02/Calculate-Angle-between-2-points-using-C.aspx  :-) " is 162.
Magic Number,Kinect.Core,MyKinect,D:\research\architectureSmells\repos\atosorigin_Kinect\src\Framework\Core\MyKinect.cs,StartKinectThread,The following statement contains a magic number: _context.VideoStream.Open(ImageStreamType.Video' 2' ImageResolution.Resolution640x480' ImageType.Color);
Magic Number,Kinect.Core,MyKinect,D:\research\architectureSmells\repos\atosorigin_Kinect\src\Framework\Core\MyKinect.cs,StartKinectThread,The following statement contains a magic number: _context.DepthStream.Open(ImageStreamType.Depth' 2' ImageResolution.Resolution320x240' ImageType.DepthAndPlayerIndex);
Magic Number,Kinect.Core,MyKinect,D:\research\architectureSmells\repos\atosorigin_Kinect\src\Framework\Core\MyKinect.cs,StartKinectThread,The following statement contains a magic number: Thread.Sleep(10);
Magic Number,Kinect.Core,MyKinect,D:\research\architectureSmells\repos\atosorigin_Kinect\src\Framework\Core\MyKinect.cs,GetDisplayPosition,The following statement contains a magic number: var newPoint = joint.ScaleTo(640' 480' _maxSkeletonX' _maxSkeletonY);
Magic Number,Kinect.Core,MyKinect,D:\research\architectureSmells\repos\atosorigin_Kinect\src\Framework\Core\MyKinect.cs,GetDisplayPosition,The following statement contains a magic number: var newPoint = joint.ScaleTo(640' 480' _maxSkeletonX' _maxSkeletonY);
Magic Number,Kinect.Core,MyKinect,D:\research\architectureSmells\repos\atosorigin_Kinect\src\Framework\Core\MyKinect.cs,GetDisplayPosition,The following statement contains a magic number: return new Point3D(newPoint.Position.X' newPoint.Position.Y' newPoint.Position.Z * 1000);
Magic Number,Kinect.Core,Camera,D:\research\architectureSmells\repos\atosorigin_Kinect\src\Framework\Core\Camera.cs,Context_VideoFrameReady,The following statement contains a magic number: BitmapSource bitmap = BitmapSource.Create(                 image.Width' image.Height' 96' 96' PixelFormats.Bgr32' null' image.Bits' image.Width*image.BytesPerPixel);
Magic Number,Kinect.Core,Camera,D:\research\architectureSmells\repos\atosorigin_Kinect\src\Framework\Core\Camera.cs,Context_VideoFrameReady,The following statement contains a magic number: BitmapSource bitmap = BitmapSource.Create(                 image.Width' image.Height' 96' 96' PixelFormats.Bgr32' null' image.Bits' image.Width*image.BytesPerPixel);
Magic Number,Kinect.Core,Camera,D:\research\architectureSmells\repos\atosorigin_Kinect\src\Framework\Core\Camera.cs,Context_DepthFrameReady,The following statement contains a magic number: BitmapSource bitmap = BitmapSource.Create(image.Width' image.Height' 96' 96' PixelFormats.Gray16' null' image.Bits' image.Width * image.BytesPerPixel);
Magic Number,Kinect.Core,Camera,D:\research\architectureSmells\repos\atosorigin_Kinect\src\Framework\Core\Camera.cs,Context_DepthFrameReady,The following statement contains a magic number: BitmapSource bitmap = BitmapSource.Create(image.Width' image.Height' 96' 96' PixelFormats.Gray16' null' image.Bits' image.Width * image.BytesPerPixel);
Magic Number,Kinect.Core,Camera,D:\research\architectureSmells\repos\atosorigin_Kinect\src\Framework\Core\Camera.cs,CalculateFPS,The following statement contains a magic number: time > _lastFPSlog + 1000
Magic Number,Kinect.Core,Camera,D:\research\architectureSmells\repos\atosorigin_Kinect\src\Framework\Core\Camera.cs,ConvertDepthFrame,The following statement contains a magic number: int realDepth = (depthFrame16[i16 + 1] << 5) | (depthFrame16[i16] >> 3);
Magic Number,Kinect.Core,Camera,D:\research\architectureSmells\repos\atosorigin_Kinect\src\Framework\Core\Camera.cs,ConvertDepthFrame,The following statement contains a magic number: int realDepth = (depthFrame16[i16 + 1] << 5) | (depthFrame16[i16] >> 3);
Magic Number,Kinect.Core,Camera,D:\research\architectureSmells\repos\atosorigin_Kinect\src\Framework\Core\Camera.cs,ConvertDepthFrame,The following statement contains a magic number: var intensity = (byte) (255 - (255*realDepth/0x0fff));
Magic Number,Kinect.Core,Camera,D:\research\architectureSmells\repos\atosorigin_Kinect\src\Framework\Core\Camera.cs,ConvertDepthFrame,The following statement contains a magic number: var intensity = (byte) (255 - (255*realDepth/0x0fff));
Magic Number,Kinect.Core,Camera,D:\research\architectureSmells\repos\atosorigin_Kinect\src\Framework\Core\Camera.cs,ConvertDepthFrame,The following statement contains a magic number: switch (player)                 {                     case 0:                         _depthFrame32[i32 + RED_IDX] = (byte) (intensity/2);                         _depthFrame32[i32 + GREEN_IDX] = (byte) (intensity/2);                         _depthFrame32[i32 + BLUE_IDX] = (byte) (intensity/2);                         break;                     case 1:                         _depthFrame32[i32 + RED_IDX] = intensity;                         break;                     case 2:                         _depthFrame32[i32 + GREEN_IDX] = intensity;                         break;                     case 3:                         _depthFrame32[i32 + RED_IDX] = (byte) (intensity/4);                         _depthFrame32[i32 + GREEN_IDX] = intensity;                         _depthFrame32[i32 + BLUE_IDX] = intensity;                         break;                     case 4:                         _depthFrame32[i32 + RED_IDX] = intensity;                         _depthFrame32[i32 + GREEN_IDX] = intensity;                         _depthFrame32[i32 + BLUE_IDX] = (byte) (intensity/4);                         break;                     case 5:                         _depthFrame32[i32 + RED_IDX] = intensity;                         _depthFrame32[i32 + GREEN_IDX] = (byte) (intensity/4);                         _depthFrame32[i32 + BLUE_IDX] = intensity;                         break;                     case 6:                         _depthFrame32[i32 + RED_IDX] = (byte) (intensity/2);                         _depthFrame32[i32 + GREEN_IDX] = (byte) (intensity/2);                         _depthFrame32[i32 + BLUE_IDX] = intensity;                         break;                     case 7:                         _depthFrame32[i32 + RED_IDX] = (byte) (255 - intensity);                         _depthFrame32[i32 + GREEN_IDX] = (byte) (255 - intensity);                         _depthFrame32[i32 + BLUE_IDX] = (byte) (255 - intensity);                         break;                 }
Magic Number,Kinect.Core,Camera,D:\research\architectureSmells\repos\atosorigin_Kinect\src\Framework\Core\Camera.cs,ConvertDepthFrame,The following statement contains a magic number: switch (player)                 {                     case 0:                         _depthFrame32[i32 + RED_IDX] = (byte) (intensity/2);                         _depthFrame32[i32 + GREEN_IDX] = (byte) (intensity/2);                         _depthFrame32[i32 + BLUE_IDX] = (byte) (intensity/2);                         break;                     case 1:                         _depthFrame32[i32 + RED_IDX] = intensity;                         break;                     case 2:                         _depthFrame32[i32 + GREEN_IDX] = intensity;                         break;                     case 3:                         _depthFrame32[i32 + RED_IDX] = (byte) (intensity/4);                         _depthFrame32[i32 + GREEN_IDX] = intensity;                         _depthFrame32[i32 + BLUE_IDX] = intensity;                         break;                     case 4:                         _depthFrame32[i32 + RED_IDX] = intensity;                         _depthFrame32[i32 + GREEN_IDX] = intensity;                         _depthFrame32[i32 + BLUE_IDX] = (byte) (intensity/4);                         break;                     case 5:                         _depthFrame32[i32 + RED_IDX] = intensity;                         _depthFrame32[i32 + GREEN_IDX] = (byte) (intensity/4);                         _depthFrame32[i32 + BLUE_IDX] = intensity;                         break;                     case 6:                         _depthFrame32[i32 + RED_IDX] = (byte) (intensity/2);                         _depthFrame32[i32 + GREEN_IDX] = (byte) (intensity/2);                         _depthFrame32[i32 + BLUE_IDX] = intensity;                         break;                     case 7:                         _depthFrame32[i32 + RED_IDX] = (byte) (255 - intensity);                         _depthFrame32[i32 + GREEN_IDX] = (byte) (255 - intensity);                         _depthFrame32[i32 + BLUE_IDX] = (byte) (255 - intensity);                         break;                 }
Magic Number,Kinect.Core,Camera,D:\research\architectureSmells\repos\atosorigin_Kinect\src\Framework\Core\Camera.cs,ConvertDepthFrame,The following statement contains a magic number: switch (player)                 {                     case 0:                         _depthFrame32[i32 + RED_IDX] = (byte) (intensity/2);                         _depthFrame32[i32 + GREEN_IDX] = (byte) (intensity/2);                         _depthFrame32[i32 + BLUE_IDX] = (byte) (intensity/2);                         break;                     case 1:                         _depthFrame32[i32 + RED_IDX] = intensity;                         break;                     case 2:                         _depthFrame32[i32 + GREEN_IDX] = intensity;                         break;                     case 3:                         _depthFrame32[i32 + RED_IDX] = (byte) (intensity/4);                         _depthFrame32[i32 + GREEN_IDX] = intensity;                         _depthFrame32[i32 + BLUE_IDX] = intensity;                         break;                     case 4:                         _depthFrame32[i32 + RED_IDX] = intensity;                         _depthFrame32[i32 + GREEN_IDX] = intensity;                         _depthFrame32[i32 + BLUE_IDX] = (byte) (intensity/4);                         break;                     case 5:                         _depthFrame32[i32 + RED_IDX] = intensity;                         _depthFrame32[i32 + GREEN_IDX] = (byte) (intensity/4);                         _depthFrame32[i32 + BLUE_IDX] = intensity;                         break;                     case 6:                         _depthFrame32[i32 + RED_IDX] = (byte) (intensity/2);                         _depthFrame32[i32 + GREEN_IDX] = (byte) (intensity/2);                         _depthFrame32[i32 + BLUE_IDX] = intensity;                         break;                     case 7:                         _depthFrame32[i32 + RED_IDX] = (byte) (255 - intensity);                         _depthFrame32[i32 + GREEN_IDX] = (byte) (255 - intensity);                         _depthFrame32[i32 + BLUE_IDX] = (byte) (255 - intensity);                         break;                 }
Magic Number,Kinect.Core,Camera,D:\research\architectureSmells\repos\atosorigin_Kinect\src\Framework\Core\Camera.cs,ConvertDepthFrame,The following statement contains a magic number: switch (player)                 {                     case 0:                         _depthFrame32[i32 + RED_IDX] = (byte) (intensity/2);                         _depthFrame32[i32 + GREEN_IDX] = (byte) (intensity/2);                         _depthFrame32[i32 + BLUE_IDX] = (byte) (intensity/2);                         break;                     case 1:                         _depthFrame32[i32 + RED_IDX] = intensity;                         break;                     case 2:                         _depthFrame32[i32 + GREEN_IDX] = intensity;                         break;                     case 3:                         _depthFrame32[i32 + RED_IDX] = (byte) (intensity/4);                         _depthFrame32[i32 + GREEN_IDX] = intensity;                         _depthFrame32[i32 + BLUE_IDX] = intensity;                         break;                     case 4:                         _depthFrame32[i32 + RED_IDX] = intensity;                         _depthFrame32[i32 + GREEN_IDX] = intensity;                         _depthFrame32[i32 + BLUE_IDX] = (byte) (intensity/4);                         break;                     case 5:                         _depthFrame32[i32 + RED_IDX] = intensity;                         _depthFrame32[i32 + GREEN_IDX] = (byte) (intensity/4);                         _depthFrame32[i32 + BLUE_IDX] = intensity;                         break;                     case 6:                         _depthFrame32[i32 + RED_IDX] = (byte) (intensity/2);                         _depthFrame32[i32 + GREEN_IDX] = (byte) (intensity/2);                         _depthFrame32[i32 + BLUE_IDX] = intensity;                         break;                     case 7:                         _depthFrame32[i32 + RED_IDX] = (byte) (255 - intensity);                         _depthFrame32[i32 + GREEN_IDX] = (byte) (255 - intensity);                         _depthFrame32[i32 + BLUE_IDX] = (byte) (255 - intensity);                         break;                 }
Magic Number,Kinect.Core,Camera,D:\research\architectureSmells\repos\atosorigin_Kinect\src\Framework\Core\Camera.cs,ConvertDepthFrame,The following statement contains a magic number: switch (player)                 {                     case 0:                         _depthFrame32[i32 + RED_IDX] = (byte) (intensity/2);                         _depthFrame32[i32 + GREEN_IDX] = (byte) (intensity/2);                         _depthFrame32[i32 + BLUE_IDX] = (byte) (intensity/2);                         break;                     case 1:                         _depthFrame32[i32 + RED_IDX] = intensity;                         break;                     case 2:                         _depthFrame32[i32 + GREEN_IDX] = intensity;                         break;                     case 3:                         _depthFrame32[i32 + RED_IDX] = (byte) (intensity/4);                         _depthFrame32[i32 + GREEN_IDX] = intensity;                         _depthFrame32[i32 + BLUE_IDX] = intensity;                         break;                     case 4:                         _depthFrame32[i32 + RED_IDX] = intensity;                         _depthFrame32[i32 + GREEN_IDX] = intensity;                         _depthFrame32[i32 + BLUE_IDX] = (byte) (intensity/4);                         break;                     case 5:                         _depthFrame32[i32 + RED_IDX] = intensity;                         _depthFrame32[i32 + GREEN_IDX] = (byte) (intensity/4);                         _depthFrame32[i32 + BLUE_IDX] = intensity;                         break;                     case 6:                         _depthFrame32[i32 + RED_IDX] = (byte) (intensity/2);                         _depthFrame32[i32 + GREEN_IDX] = (byte) (intensity/2);                         _depthFrame32[i32 + BLUE_IDX] = intensity;                         break;                     case 7:                         _depthFrame32[i32 + RED_IDX] = (byte) (255 - intensity);                         _depthFrame32[i32 + GREEN_IDX] = (byte) (255 - intensity);                         _depthFrame32[i32 + BLUE_IDX] = (byte) (255 - intensity);                         break;                 }
Magic Number,Kinect.Core,Camera,D:\research\architectureSmells\repos\atosorigin_Kinect\src\Framework\Core\Camera.cs,ConvertDepthFrame,The following statement contains a magic number: switch (player)                 {                     case 0:                         _depthFrame32[i32 + RED_IDX] = (byte) (intensity/2);                         _depthFrame32[i32 + GREEN_IDX] = (byte) (intensity/2);                         _depthFrame32[i32 + BLUE_IDX] = (byte) (intensity/2);                         break;                     case 1:                         _depthFrame32[i32 + RED_IDX] = intensity;                         break;                     case 2:                         _depthFrame32[i32 + GREEN_IDX] = intensity;                         break;                     case 3:                         _depthFrame32[i32 + RED_IDX] = (byte) (intensity/4);                         _depthFrame32[i32 + GREEN_IDX] = intensity;                         _depthFrame32[i32 + BLUE_IDX] = intensity;                         break;                     case 4:                         _depthFrame32[i32 + RED_IDX] = intensity;                         _depthFrame32[i32 + GREEN_IDX] = intensity;                         _depthFrame32[i32 + BLUE_IDX] = (byte) (intensity/4);                         break;                     case 5:                         _depthFrame32[i32 + RED_IDX] = intensity;                         _depthFrame32[i32 + GREEN_IDX] = (byte) (intensity/4);                         _depthFrame32[i32 + BLUE_IDX] = intensity;                         break;                     case 6:                         _depthFrame32[i32 + RED_IDX] = (byte) (intensity/2);                         _depthFrame32[i32 + GREEN_IDX] = (byte) (intensity/2);                         _depthFrame32[i32 + BLUE_IDX] = intensity;                         break;                     case 7:                         _depthFrame32[i32 + RED_IDX] = (byte) (255 - intensity);                         _depthFrame32[i32 + GREEN_IDX] = (byte) (255 - intensity);                         _depthFrame32[i32 + BLUE_IDX] = (byte) (255 - intensity);                         break;                 }
Magic Number,Kinect.Core,Camera,D:\research\architectureSmells\repos\atosorigin_Kinect\src\Framework\Core\Camera.cs,ConvertDepthFrame,The following statement contains a magic number: switch (player)                 {                     case 0:                         _depthFrame32[i32 + RED_IDX] = (byte) (intensity/2);                         _depthFrame32[i32 + GREEN_IDX] = (byte) (intensity/2);                         _depthFrame32[i32 + BLUE_IDX] = (byte) (intensity/2);                         break;                     case 1:                         _depthFrame32[i32 + RED_IDX] = intensity;                         break;                     case 2:                         _depthFrame32[i32 + GREEN_IDX] = intensity;                         break;                     case 3:                         _depthFrame32[i32 + RED_IDX] = (byte) (intensity/4);                         _depthFrame32[i32 + GREEN_IDX] = intensity;                         _depthFrame32[i32 + BLUE_IDX] = intensity;                         break;                     case 4:                         _depthFrame32[i32 + RED_IDX] = intensity;                         _depthFrame32[i32 + GREEN_IDX] = intensity;                         _depthFrame32[i32 + BLUE_IDX] = (byte) (intensity/4);                         break;                     case 5:                         _depthFrame32[i32 + RED_IDX] = intensity;                         _depthFrame32[i32 + GREEN_IDX] = (byte) (intensity/4);                         _depthFrame32[i32 + BLUE_IDX] = intensity;                         break;                     case 6:                         _depthFrame32[i32 + RED_IDX] = (byte) (intensity/2);                         _depthFrame32[i32 + GREEN_IDX] = (byte) (intensity/2);                         _depthFrame32[i32 + BLUE_IDX] = intensity;                         break;                     case 7:                         _depthFrame32[i32 + RED_IDX] = (byte) (255 - intensity);                         _depthFrame32[i32 + GREEN_IDX] = (byte) (255 - intensity);                         _depthFrame32[i32 + BLUE_IDX] = (byte) (255 - intensity);                         break;                 }
Magic Number,Kinect.Core,Camera,D:\research\architectureSmells\repos\atosorigin_Kinect\src\Framework\Core\Camera.cs,ConvertDepthFrame,The following statement contains a magic number: switch (player)                 {                     case 0:                         _depthFrame32[i32 + RED_IDX] = (byte) (intensity/2);                         _depthFrame32[i32 + GREEN_IDX] = (byte) (intensity/2);                         _depthFrame32[i32 + BLUE_IDX] = (byte) (intensity/2);                         break;                     case 1:                         _depthFrame32[i32 + RED_IDX] = intensity;                         break;                     case 2:                         _depthFrame32[i32 + GREEN_IDX] = intensity;                         break;                     case 3:                         _depthFrame32[i32 + RED_IDX] = (byte) (intensity/4);                         _depthFrame32[i32 + GREEN_IDX] = intensity;                         _depthFrame32[i32 + BLUE_IDX] = intensity;                         break;                     case 4:                         _depthFrame32[i32 + RED_IDX] = intensity;                         _depthFrame32[i32 + GREEN_IDX] = intensity;                         _depthFrame32[i32 + BLUE_IDX] = (byte) (intensity/4);                         break;                     case 5:                         _depthFrame32[i32 + RED_IDX] = intensity;                         _depthFrame32[i32 + GREEN_IDX] = (byte) (intensity/4);                         _depthFrame32[i32 + BLUE_IDX] = intensity;                         break;                     case 6:                         _depthFrame32[i32 + RED_IDX] = (byte) (intensity/2);                         _depthFrame32[i32 + GREEN_IDX] = (byte) (intensity/2);                         _depthFrame32[i32 + BLUE_IDX] = intensity;                         break;                     case 7:                         _depthFrame32[i32 + RED_IDX] = (byte) (255 - intensity);                         _depthFrame32[i32 + GREEN_IDX] = (byte) (255 - intensity);                         _depthFrame32[i32 + BLUE_IDX] = (byte) (255 - intensity);                         break;                 }
Magic Number,Kinect.Core,Camera,D:\research\architectureSmells\repos\atosorigin_Kinect\src\Framework\Core\Camera.cs,ConvertDepthFrame,The following statement contains a magic number: switch (player)                 {                     case 0:                         _depthFrame32[i32 + RED_IDX] = (byte) (intensity/2);                         _depthFrame32[i32 + GREEN_IDX] = (byte) (intensity/2);                         _depthFrame32[i32 + BLUE_IDX] = (byte) (intensity/2);                         break;                     case 1:                         _depthFrame32[i32 + RED_IDX] = intensity;                         break;                     case 2:                         _depthFrame32[i32 + GREEN_IDX] = intensity;                         break;                     case 3:                         _depthFrame32[i32 + RED_IDX] = (byte) (intensity/4);                         _depthFrame32[i32 + GREEN_IDX] = intensity;                         _depthFrame32[i32 + BLUE_IDX] = intensity;                         break;                     case 4:                         _depthFrame32[i32 + RED_IDX] = intensity;                         _depthFrame32[i32 + GREEN_IDX] = intensity;                         _depthFrame32[i32 + BLUE_IDX] = (byte) (intensity/4);                         break;                     case 5:                         _depthFrame32[i32 + RED_IDX] = intensity;                         _depthFrame32[i32 + GREEN_IDX] = (byte) (intensity/4);                         _depthFrame32[i32 + BLUE_IDX] = intensity;                         break;                     case 6:                         _depthFrame32[i32 + RED_IDX] = (byte) (intensity/2);                         _depthFrame32[i32 + GREEN_IDX] = (byte) (intensity/2);                         _depthFrame32[i32 + BLUE_IDX] = intensity;                         break;                     case 7:                         _depthFrame32[i32 + RED_IDX] = (byte) (255 - intensity);                         _depthFrame32[i32 + GREEN_IDX] = (byte) (255 - intensity);                         _depthFrame32[i32 + BLUE_IDX] = (byte) (255 - intensity);                         break;                 }
Magic Number,Kinect.Core,Camera,D:\research\architectureSmells\repos\atosorigin_Kinect\src\Framework\Core\Camera.cs,ConvertDepthFrame,The following statement contains a magic number: switch (player)                 {                     case 0:                         _depthFrame32[i32 + RED_IDX] = (byte) (intensity/2);                         _depthFrame32[i32 + GREEN_IDX] = (byte) (intensity/2);                         _depthFrame32[i32 + BLUE_IDX] = (byte) (intensity/2);                         break;                     case 1:                         _depthFrame32[i32 + RED_IDX] = intensity;                         break;                     case 2:                         _depthFrame32[i32 + GREEN_IDX] = intensity;                         break;                     case 3:                         _depthFrame32[i32 + RED_IDX] = (byte) (intensity/4);                         _depthFrame32[i32 + GREEN_IDX] = intensity;                         _depthFrame32[i32 + BLUE_IDX] = intensity;                         break;                     case 4:                         _depthFrame32[i32 + RED_IDX] = intensity;                         _depthFrame32[i32 + GREEN_IDX] = intensity;                         _depthFrame32[i32 + BLUE_IDX] = (byte) (intensity/4);                         break;                     case 5:                         _depthFrame32[i32 + RED_IDX] = intensity;                         _depthFrame32[i32 + GREEN_IDX] = (byte) (intensity/4);                         _depthFrame32[i32 + BLUE_IDX] = intensity;                         break;                     case 6:                         _depthFrame32[i32 + RED_IDX] = (byte) (intensity/2);                         _depthFrame32[i32 + GREEN_IDX] = (byte) (intensity/2);                         _depthFrame32[i32 + BLUE_IDX] = intensity;                         break;                     case 7:                         _depthFrame32[i32 + RED_IDX] = (byte) (255 - intensity);                         _depthFrame32[i32 + GREEN_IDX] = (byte) (255 - intensity);                         _depthFrame32[i32 + BLUE_IDX] = (byte) (255 - intensity);                         break;                 }
Magic Number,Kinect.Core,Camera,D:\research\architectureSmells\repos\atosorigin_Kinect\src\Framework\Core\Camera.cs,ConvertDepthFrame,The following statement contains a magic number: switch (player)                 {                     case 0:                         _depthFrame32[i32 + RED_IDX] = (byte) (intensity/2);                         _depthFrame32[i32 + GREEN_IDX] = (byte) (intensity/2);                         _depthFrame32[i32 + BLUE_IDX] = (byte) (intensity/2);                         break;                     case 1:                         _depthFrame32[i32 + RED_IDX] = intensity;                         break;                     case 2:                         _depthFrame32[i32 + GREEN_IDX] = intensity;                         break;                     case 3:                         _depthFrame32[i32 + RED_IDX] = (byte) (intensity/4);                         _depthFrame32[i32 + GREEN_IDX] = intensity;                         _depthFrame32[i32 + BLUE_IDX] = intensity;                         break;                     case 4:                         _depthFrame32[i32 + RED_IDX] = intensity;                         _depthFrame32[i32 + GREEN_IDX] = intensity;                         _depthFrame32[i32 + BLUE_IDX] = (byte) (intensity/4);                         break;                     case 5:                         _depthFrame32[i32 + RED_IDX] = intensity;                         _depthFrame32[i32 + GREEN_IDX] = (byte) (intensity/4);                         _depthFrame32[i32 + BLUE_IDX] = intensity;                         break;                     case 6:                         _depthFrame32[i32 + RED_IDX] = (byte) (intensity/2);                         _depthFrame32[i32 + GREEN_IDX] = (byte) (intensity/2);                         _depthFrame32[i32 + BLUE_IDX] = intensity;                         break;                     case 7:                         _depthFrame32[i32 + RED_IDX] = (byte) (255 - intensity);                         _depthFrame32[i32 + GREEN_IDX] = (byte) (255 - intensity);                         _depthFrame32[i32 + BLUE_IDX] = (byte) (255 - intensity);                         break;                 }
Magic Number,Kinect.Core,Camera,D:\research\architectureSmells\repos\atosorigin_Kinect\src\Framework\Core\Camera.cs,ConvertDepthFrame,The following statement contains a magic number: switch (player)                 {                     case 0:                         _depthFrame32[i32 + RED_IDX] = (byte) (intensity/2);                         _depthFrame32[i32 + GREEN_IDX] = (byte) (intensity/2);                         _depthFrame32[i32 + BLUE_IDX] = (byte) (intensity/2);                         break;                     case 1:                         _depthFrame32[i32 + RED_IDX] = intensity;                         break;                     case 2:                         _depthFrame32[i32 + GREEN_IDX] = intensity;                         break;                     case 3:                         _depthFrame32[i32 + RED_IDX] = (byte) (intensity/4);                         _depthFrame32[i32 + GREEN_IDX] = intensity;                         _depthFrame32[i32 + BLUE_IDX] = intensity;                         break;                     case 4:                         _depthFrame32[i32 + RED_IDX] = intensity;                         _depthFrame32[i32 + GREEN_IDX] = intensity;                         _depthFrame32[i32 + BLUE_IDX] = (byte) (intensity/4);                         break;                     case 5:                         _depthFrame32[i32 + RED_IDX] = intensity;                         _depthFrame32[i32 + GREEN_IDX] = (byte) (intensity/4);                         _depthFrame32[i32 + BLUE_IDX] = intensity;                         break;                     case 6:                         _depthFrame32[i32 + RED_IDX] = (byte) (intensity/2);                         _depthFrame32[i32 + GREEN_IDX] = (byte) (intensity/2);                         _depthFrame32[i32 + BLUE_IDX] = intensity;                         break;                     case 7:                         _depthFrame32[i32 + RED_IDX] = (byte) (255 - intensity);                         _depthFrame32[i32 + GREEN_IDX] = (byte) (255 - intensity);                         _depthFrame32[i32 + BLUE_IDX] = (byte) (255 - intensity);                         break;                 }
Magic Number,Kinect.Core,Camera,D:\research\architectureSmells\repos\atosorigin_Kinect\src\Framework\Core\Camera.cs,ConvertDepthFrame,The following statement contains a magic number: switch (player)                 {                     case 0:                         _depthFrame32[i32 + RED_IDX] = (byte) (intensity/2);                         _depthFrame32[i32 + GREEN_IDX] = (byte) (intensity/2);                         _depthFrame32[i32 + BLUE_IDX] = (byte) (intensity/2);                         break;                     case 1:                         _depthFrame32[i32 + RED_IDX] = intensity;                         break;                     case 2:                         _depthFrame32[i32 + GREEN_IDX] = intensity;                         break;                     case 3:                         _depthFrame32[i32 + RED_IDX] = (byte) (intensity/4);                         _depthFrame32[i32 + GREEN_IDX] = intensity;                         _depthFrame32[i32 + BLUE_IDX] = intensity;                         break;                     case 4:                         _depthFrame32[i32 + RED_IDX] = intensity;                         _depthFrame32[i32 + GREEN_IDX] = intensity;                         _depthFrame32[i32 + BLUE_IDX] = (byte) (intensity/4);                         break;                     case 5:                         _depthFrame32[i32 + RED_IDX] = intensity;                         _depthFrame32[i32 + GREEN_IDX] = (byte) (intensity/4);                         _depthFrame32[i32 + BLUE_IDX] = intensity;                         break;                     case 6:                         _depthFrame32[i32 + RED_IDX] = (byte) (intensity/2);                         _depthFrame32[i32 + GREEN_IDX] = (byte) (intensity/2);                         _depthFrame32[i32 + BLUE_IDX] = intensity;                         break;                     case 7:                         _depthFrame32[i32 + RED_IDX] = (byte) (255 - intensity);                         _depthFrame32[i32 + GREEN_IDX] = (byte) (255 - intensity);                         _depthFrame32[i32 + BLUE_IDX] = (byte) (255 - intensity);                         break;                 }
Magic Number,Kinect.Core,Camera,D:\research\architectureSmells\repos\atosorigin_Kinect\src\Framework\Core\Camera.cs,ConvertDepthFrame,The following statement contains a magic number: switch (player)                 {                     case 0:                         _depthFrame32[i32 + RED_IDX] = (byte) (intensity/2);                         _depthFrame32[i32 + GREEN_IDX] = (byte) (intensity/2);                         _depthFrame32[i32 + BLUE_IDX] = (byte) (intensity/2);                         break;                     case 1:                         _depthFrame32[i32 + RED_IDX] = intensity;                         break;                     case 2:                         _depthFrame32[i32 + GREEN_IDX] = intensity;                         break;                     case 3:                         _depthFrame32[i32 + RED_IDX] = (byte) (intensity/4);                         _depthFrame32[i32 + GREEN_IDX] = intensity;                         _depthFrame32[i32 + BLUE_IDX] = intensity;                         break;                     case 4:                         _depthFrame32[i32 + RED_IDX] = intensity;                         _depthFrame32[i32 + GREEN_IDX] = intensity;                         _depthFrame32[i32 + BLUE_IDX] = (byte) (intensity/4);                         break;                     case 5:                         _depthFrame32[i32 + RED_IDX] = intensity;                         _depthFrame32[i32 + GREEN_IDX] = (byte) (intensity/4);                         _depthFrame32[i32 + BLUE_IDX] = intensity;                         break;                     case 6:                         _depthFrame32[i32 + RED_IDX] = (byte) (intensity/2);                         _depthFrame32[i32 + GREEN_IDX] = (byte) (intensity/2);                         _depthFrame32[i32 + BLUE_IDX] = intensity;                         break;                     case 7:                         _depthFrame32[i32 + RED_IDX] = (byte) (255 - intensity);                         _depthFrame32[i32 + GREEN_IDX] = (byte) (255 - intensity);                         _depthFrame32[i32 + BLUE_IDX] = (byte) (255 - intensity);                         break;                 }
Magic Number,Kinect.Core,Camera,D:\research\architectureSmells\repos\atosorigin_Kinect\src\Framework\Core\Camera.cs,ConvertDepthFrame,The following statement contains a magic number: switch (player)                 {                     case 0:                         _depthFrame32[i32 + RED_IDX] = (byte) (intensity/2);                         _depthFrame32[i32 + GREEN_IDX] = (byte) (intensity/2);                         _depthFrame32[i32 + BLUE_IDX] = (byte) (intensity/2);                         break;                     case 1:                         _depthFrame32[i32 + RED_IDX] = intensity;                         break;                     case 2:                         _depthFrame32[i32 + GREEN_IDX] = intensity;                         break;                     case 3:                         _depthFrame32[i32 + RED_IDX] = (byte) (intensity/4);                         _depthFrame32[i32 + GREEN_IDX] = intensity;                         _depthFrame32[i32 + BLUE_IDX] = intensity;                         break;                     case 4:                         _depthFrame32[i32 + RED_IDX] = intensity;                         _depthFrame32[i32 + GREEN_IDX] = intensity;                         _depthFrame32[i32 + BLUE_IDX] = (byte) (intensity/4);                         break;                     case 5:                         _depthFrame32[i32 + RED_IDX] = intensity;                         _depthFrame32[i32 + GREEN_IDX] = (byte) (intensity/4);                         _depthFrame32[i32 + BLUE_IDX] = intensity;                         break;                     case 6:                         _depthFrame32[i32 + RED_IDX] = (byte) (intensity/2);                         _depthFrame32[i32 + GREEN_IDX] = (byte) (intensity/2);                         _depthFrame32[i32 + BLUE_IDX] = intensity;                         break;                     case 7:                         _depthFrame32[i32 + RED_IDX] = (byte) (255 - intensity);                         _depthFrame32[i32 + GREEN_IDX] = (byte) (255 - intensity);                         _depthFrame32[i32 + BLUE_IDX] = (byte) (255 - intensity);                         break;                 }
Magic Number,Kinect.Core,Camera,D:\research\architectureSmells\repos\atosorigin_Kinect\src\Framework\Core\Camera.cs,ConvertDepthFrame,The following statement contains a magic number: switch (player)                 {                     case 0:                         _depthFrame32[i32 + RED_IDX] = (byte) (intensity/2);                         _depthFrame32[i32 + GREEN_IDX] = (byte) (intensity/2);                         _depthFrame32[i32 + BLUE_IDX] = (byte) (intensity/2);                         break;                     case 1:                         _depthFrame32[i32 + RED_IDX] = intensity;                         break;                     case 2:                         _depthFrame32[i32 + GREEN_IDX] = intensity;                         break;                     case 3:                         _depthFrame32[i32 + RED_IDX] = (byte) (intensity/4);                         _depthFrame32[i32 + GREEN_IDX] = intensity;                         _depthFrame32[i32 + BLUE_IDX] = intensity;                         break;                     case 4:                         _depthFrame32[i32 + RED_IDX] = intensity;                         _depthFrame32[i32 + GREEN_IDX] = intensity;                         _depthFrame32[i32 + BLUE_IDX] = (byte) (intensity/4);                         break;                     case 5:                         _depthFrame32[i32 + RED_IDX] = intensity;                         _depthFrame32[i32 + GREEN_IDX] = (byte) (intensity/4);                         _depthFrame32[i32 + BLUE_IDX] = intensity;                         break;                     case 6:                         _depthFrame32[i32 + RED_IDX] = (byte) (intensity/2);                         _depthFrame32[i32 + GREEN_IDX] = (byte) (intensity/2);                         _depthFrame32[i32 + BLUE_IDX] = intensity;                         break;                     case 7:                         _depthFrame32[i32 + RED_IDX] = (byte) (255 - intensity);                         _depthFrame32[i32 + GREEN_IDX] = (byte) (255 - intensity);                         _depthFrame32[i32 + BLUE_IDX] = (byte) (255 - intensity);                         break;                 }
Magic Number,Kinect.Core,Camera,D:\research\architectureSmells\repos\atosorigin_Kinect\src\Framework\Core\Camera.cs,ConvertDepthFrame,The following statement contains a magic number: switch (player)                 {                     case 0:                         _depthFrame32[i32 + RED_IDX] = (byte) (intensity/2);                         _depthFrame32[i32 + GREEN_IDX] = (byte) (intensity/2);                         _depthFrame32[i32 + BLUE_IDX] = (byte) (intensity/2);                         break;                     case 1:                         _depthFrame32[i32 + RED_IDX] = intensity;                         break;                     case 2:                         _depthFrame32[i32 + GREEN_IDX] = intensity;                         break;                     case 3:                         _depthFrame32[i32 + RED_IDX] = (byte) (intensity/4);                         _depthFrame32[i32 + GREEN_IDX] = intensity;                         _depthFrame32[i32 + BLUE_IDX] = intensity;                         break;                     case 4:                         _depthFrame32[i32 + RED_IDX] = intensity;                         _depthFrame32[i32 + GREEN_IDX] = intensity;                         _depthFrame32[i32 + BLUE_IDX] = (byte) (intensity/4);                         break;                     case 5:                         _depthFrame32[i32 + RED_IDX] = intensity;                         _depthFrame32[i32 + GREEN_IDX] = (byte) (intensity/4);                         _depthFrame32[i32 + BLUE_IDX] = intensity;                         break;                     case 6:                         _depthFrame32[i32 + RED_IDX] = (byte) (intensity/2);                         _depthFrame32[i32 + GREEN_IDX] = (byte) (intensity/2);                         _depthFrame32[i32 + BLUE_IDX] = intensity;                         break;                     case 7:                         _depthFrame32[i32 + RED_IDX] = (byte) (255 - intensity);                         _depthFrame32[i32 + GREEN_IDX] = (byte) (255 - intensity);                         _depthFrame32[i32 + BLUE_IDX] = (byte) (255 - intensity);                         break;                 }
Magic Number,Kinect.Core.Filters,CollisionFilter,D:\research\architectureSmells\repos\atosorigin_Kinect\src\Framework\Core\Filters\CollisionFilter.cs,CollisionFilter,The following statement contains a magic number: joints.Length < 2
Magic Number,Kinect.Core.Gestures,AccelerationGesture,D:\research\architectureSmells\repos\atosorigin_Kinect\src\Framework\Core\Gestures\AccelerationGesture.cs,Process,The following statement contains a magic number: double predictedarmlength = evt.ShoulderRight.Y - evt.HipRight.Y -                                              ((evt.HipRight.Y - evt.KneeRight.Y)/2);
Magic Number,Kinect.Core.Gestures,AccelerationGesture,D:\research\architectureSmells\repos\atosorigin_Kinect\src\Framework\Core\Gestures\AccelerationGesture.cs,Process,The following statement contains a magic number: double ratio = (maxposition - minposition)/2;
Magic Number,Kinect.Core.Gestures,GestureFactory,D:\research\architectureSmells\repos\atosorigin_Kinect\src\Framework\Core\Gestures\GestureFactory.cs,AddSemaphoreTouchGesture,The following statement contains a magic number: var fpsFilter = new FramesFilter(6);
Magic Number,Kinect.Core.Gestures,GestureFactory,D:\research\architectureSmells\repos\atosorigin_Kinect\src\Framework\Core\Gestures\GestureFactory.cs,AddAccelerationGesture,The following statement contains a magic number: var fpsFilter = new FramesFilter(6);
Magic Number,Kinect.Core.Gestures,GestureFactory,D:\research\architectureSmells\repos\atosorigin_Kinect\src\Framework\Core\Gestures\GestureFactory.cs,AddSelfTouchGesture,The following statement contains a magic number: joints.Length < 2
Magic Number,Kinect.Core.Gestures,GestureFactory,D:\research\architectureSmells\repos\atosorigin_Kinect\src\Framework\Core\Gestures\GestureFactory.cs,AddSelfTouchGesture,The following statement contains a magic number: int historyCount = 10;
Magic Number,Kinect.Core.Gestures,GestureFactory,D:\research\architectureSmells\repos\atosorigin_Kinect\src\Framework\Core\Gestures\GestureFactory.cs,GetStandardSelfTouchFilters,The following statement contains a magic number: joints.Length < 2
Magic Number,Kinect.Core.Gestures,GestureFactory,D:\research\architectureSmells\repos\atosorigin_Kinect\src\Framework\Core\Gestures\GestureFactory.cs,GetStandardSelfTouchFilters,The following statement contains a magic number: list.Add(new FramesFilter(6));
Magic Number,Kinect.Core.Gestures,ClapGesture,D:\research\architectureSmells\repos\atosorigin_Kinect\src\Framework\Core\Gestures\ClapGesture.cs,CheckForDoubleClap,The following statement contains a magic number: nrOfClaps >= 2
Magic Number,Kinect.Core.Gestures.Helper,Calculator,D:\research\architectureSmells\repos\atosorigin_Kinect\src\Framework\Core\Gestures\Helper\Calculator.cs,CalculateAngle,The following statement contains a magic number: angle = angle*180/Math.PI;
Missing Default,Kinect.Core,Camera,D:\research\architectureSmells\repos\atosorigin_Kinect\src\Framework\Core\Camera.cs,ConvertDepthFrame,The following switch statement is missing a default case: switch (player)                 {                     case 0:                         _depthFrame32[i32 + RED_IDX] = (byte) (intensity/2);                         _depthFrame32[i32 + GREEN_IDX] = (byte) (intensity/2);                         _depthFrame32[i32 + BLUE_IDX] = (byte) (intensity/2);                         break;                     case 1:                         _depthFrame32[i32 + RED_IDX] = intensity;                         break;                     case 2:                         _depthFrame32[i32 + GREEN_IDX] = intensity;                         break;                     case 3:                         _depthFrame32[i32 + RED_IDX] = (byte) (intensity/4);                         _depthFrame32[i32 + GREEN_IDX] = intensity;                         _depthFrame32[i32 + BLUE_IDX] = intensity;                         break;                     case 4:                         _depthFrame32[i32 + RED_IDX] = intensity;                         _depthFrame32[i32 + GREEN_IDX] = intensity;                         _depthFrame32[i32 + BLUE_IDX] = (byte) (intensity/4);                         break;                     case 5:                         _depthFrame32[i32 + RED_IDX] = intensity;                         _depthFrame32[i32 + GREEN_IDX] = (byte) (intensity/4);                         _depthFrame32[i32 + BLUE_IDX] = intensity;                         break;                     case 6:                         _depthFrame32[i32 + RED_IDX] = (byte) (intensity/2);                         _depthFrame32[i32 + GREEN_IDX] = (byte) (intensity/2);                         _depthFrame32[i32 + BLUE_IDX] = intensity;                         break;                     case 7:                         _depthFrame32[i32 + RED_IDX] = (byte) (255 - intensity);                         _depthFrame32[i32 + GREEN_IDX] = (byte) (255 - intensity);                         _depthFrame32[i32 + BLUE_IDX] = (byte) (255 - intensity);                         break;                 }
Missing Default,Kinect.Core.Filters.Helper,FilterHelper,D:\research\architectureSmells\repos\atosorigin_Kinect\src\Framework\Core\Filters\Helper\FilterHelper.cs,GetPoint,The following switch statement is missing a default case: switch (joint)              {                  case JointID.Head:                      return evt.Head;                  case JointID.AnkleLeft:                      return evt.AnkleLeft;                  case JointID.ElbowLeft:                      return evt.ElbowLeft;                  case JointID.FootLeft:                      return evt.FootLeft;                  case JointID.HandLeft:                      return evt.HandLeft;                  case JointID.KneeLeft:                      return evt.KneeLeft;                  case JointID.ShoulderLeft:                      return evt.ShoulderLeft;                  case JointID.HipLeft:                      return evt.HipLeft;                  case JointID.ShoulderCenter:                      return evt.ShoulderCenter;                  case JointID.AnkleRight:                      return evt.AnkleRight;                  case JointID.ElbowRight:                      return evt.ElbowRight;                  case JointID.FootRight:                      return evt.FootRight;                  case JointID.HandRight:                      return evt.HandRight;                  case JointID.KneeRight:                      return evt.KneeRight;                  case JointID.HipRight:                      return evt.HipRight;                  case JointID.ShoulderRight:                      return evt.ShoulderRight;                  case JointID.Spine:                      return evt.Spine;                  case JointID.HipCenter:                      return evt.HipCenter;              }
Missing Default,Kinect.Core.Filters.Helper,FilterHelper,D:\research\architectureSmells\repos\atosorigin_Kinect\src\Framework\Core\Filters\Helper\FilterHelper.cs,SetPoint,The following switch statement is missing a default case: switch (joint)              {                  case JointID.Head:                      user.Head = newPoint;                      break;                  case JointID.AnkleLeft:                      user.AnkleLeft = newPoint;                      break;                  case JointID.ElbowLeft:                      user.ElbowLeft = newPoint;                      break;                  case JointID.FootLeft:                      user.FootLeft = newPoint;                      break;                  case JointID.HandLeft:                      user.HandLeft = newPoint;                      break;                  case JointID.KneeLeft:                      user.KneeLeft = newPoint;                      break;                  case JointID.ShoulderLeft:                      user.ShoulderLeft = newPoint;                      break;                  case JointID.HipLeft:                      user.HipLeft = newPoint;                      break;                  case JointID.ShoulderCenter:                      user.ShoulderCenter = newPoint;                      break;                  case JointID.AnkleRight:                      user.AnkleRight = newPoint;                      break;                  case JointID.ElbowRight:                      user.ElbowRight = newPoint;                      break;                  case JointID.FootRight:                      user.FootRight = newPoint;                      break;                  case JointID.HandRight:                      user.HandRight = newPoint;                      break;                  case JointID.KneeRight:                      user.KneeRight = newPoint;                      break;                  case JointID.HipRight:                      user.HipRight = newPoint;                      break;                  case JointID.ShoulderRight:                      user.ShoulderRight = newPoint;                      break;                  case JointID.Spine:                      user.Spine = newPoint;                      break;                  case JointID.HipCenter:                      user.HipCenter = newPoint;                      break;              }
