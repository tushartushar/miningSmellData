Implementation smell,Namespace,Class,File,Method,Description
Long Method,Antmicro.Migrant.Generators,ReadMethodGenerator,D:\research\architectureSmells\repos\antmicro_Migrant\Migrant\Generators\ReadMethodGenerator.cs,GenerateReadField,The method has 112 lines of code.
Complex Method,Antmicro.Migrant,Helpers,D:\research\architectureSmells\repos\antmicro_Migrant\Migrant\Helpers.cs,GetTypeOfGenericType,Cyclomatic complexity of the method is 8
Complex Method,Antmicro.Migrant,ObjectReader,D:\research\architectureSmells\repos\antmicro_Migrant\Migrant\ObjectReader.cs,ReadObject,Cyclomatic complexity of the method is 9
Complex Method,Antmicro.Migrant,ObjectReader,D:\research\architectureSmells\repos\antmicro_Migrant\Migrant\ObjectReader.cs,ReadFullTypeDescriptor,Cyclomatic complexity of the method is 9
Complex Method,Antmicro.Migrant,ObjectWriter,D:\research\architectureSmells\repos\antmicro_Migrant\Migrant\ObjectWriter.cs,TouchAndWriteTypeIdWithFullStamp,Cyclomatic complexity of the method is 8
Complex Method,Antmicro.Migrant.Generators,ReadMethodGenerator,D:\research\architectureSmells\repos\antmicro_Migrant\Migrant\Generators\ReadMethodGenerator.cs,GenerateReadField,Cyclomatic complexity of the method is 14
Complex Method,Antmicro.Migrant.Generators,GeneratorHelper,D:\research\architectureSmells\repos\antmicro_Migrant\Migrant\Generators\GeneratorHelper.cs,PushIntegerOntoStack,Cyclomatic complexity of the method is 12
Complex Method,Antmicro.Migrant.Generators,CompletedGenerator,D:\research\architectureSmells\repos\antmicro_Migrant\Migrant\Generators\CompletedGenerator.cs,GenerateCallPostDeserializationHooks,Cyclomatic complexity of the method is 9
Complex Method,Antmicro.Migrant.VersionTolerance,TypeFullDescriptor,D:\research\architectureSmells\repos\antmicro_Migrant\Migrant\VersionTolerance\TypeFullDescriptor.cs,VerifyStructure,Cyclomatic complexity of the method is 12
Long Parameter List,Antmicro.Migrant,ObjectReader,D:\research\architectureSmells\repos\antmicro_Migrant\Migrant\ObjectReader.cs,ObjectReader,The method has 10 parameters. Parameters: stream' readMethods' objectsForSurrogates' postDeserializationCallback' treatCollectionAsUserObject' versionToleranceLevel' useBuffering' disableStamping' referencePreservation' forceStampVerification
Long Parameter List,Antmicro.Migrant,ObjectWriter,D:\research\architectureSmells\repos\antmicro_Migrant\Migrant\ObjectWriter.cs,ObjectWriter,The method has 10 parameters. Parameters: stream' writeMethods' preSerializationCallback' postSerializationCallback' surrogatesForObjects' objectsForSurrogates' treatCollectionAsUserObject' useBuffering' disableStamping' referencePreservation
Long Parameter List,Antmicro.Migrant.Customization,Settings,D:\research\architectureSmells\repos\antmicro_Migrant\Migrant\Customization\Settings.cs,Settings,The method has 10 parameters. Parameters: serializationMethod' deserializationMethod' versionTolerance' supportForISerializable' supportForIXmlSerializable' treatCollectionAsUserObject' useBuffering' disableTypeStamping' referencePreservation' forceStampVerification
Long Parameter List,Antmicro.Migrant.Customization,Settings,D:\research\architectureSmells\repos\antmicro_Migrant\Migrant\Customization\Settings.cs,With,The method has 9 parameters. Parameters: serializationMethod' deserializationMethod' versionTolerance' supportForISerializable' treatCollectionAsUserObject' useBuffering' disableTypeStamping' referencePreservation' forceStampVerification
Long Parameter List,Antmicro.Migrant.Generators,WriteMethodGenerator,D:\research\architectureSmells\repos\antmicro_Migrant\Migrant\Generators\WriteMethodGenerator.cs,GenerateArrayWriteLoop,The method has 9 parameters. Parameters: context' currentDimension' rank' indexLocals' lengthLocals' arrayLocal' currentElementVariable' arrayType' elementType
Long Parameter List,Antmicro.Migrant.Generators,WriteMethodGenerator,D:\research\architectureSmells\repos\antmicro_Migrant\Migrant\Generators\WriteMethodGenerator.cs,GenerateTryWriteObjectInline,The method has 5 parameters. Parameters: context' generatePreSerializationCallback' generatePostSerializationCallback' valueLocal' actualType
Long Parameter List,Antmicro.Migrant.Generators,WriteMethodGenerator,D:\research\architectureSmells\repos\antmicro_Migrant\Migrant\Generators\WriteMethodGenerator.cs,GenerateInvokeCallbacksAndExecute,The method has 6 parameters. Parameters: context' generatePreSerializationCallback' generatePostSerializationCallback' valueLocal' type' bodyBuilder
Long Parameter List,Antmicro.Migrant.Generators,ReadMethodGenerator,D:\research\architectureSmells\repos\antmicro_Migrant\Migrant\Generators\ReadMethodGenerator.cs,GenerateReadDelegateStaticHelper,The method has 5 parameters. Parameters: method' t' target' deserializedObjects' objectId
Long Parameter List,Antmicro.Migrant.Generators,GeneratorHelper,D:\research\architectureSmells\repos\antmicro_Migrant\Migrant\Generators\GeneratorHelper.cs,GenerateLoop,The method has 5 parameters. Parameters: context' countLocal' loopControlLocal' loopAction' reversed
Long Parameter List,Antmicro.Migrant.Generators,ReaderGenerationContext,D:\research\architectureSmells\repos\antmicro_Migrant\Migrant\Generators\ReaderGenerationContext.cs,ReaderGenerationContext,The method has 5 parameters. Parameters: generator' disableStamping' treatCollectionAsUserObject' objectIdArgument' objectReaderArgument
Long Parameter List,Antmicro.Migrant.Generators,CompletedGenerator,D:\research\architectureSmells\repos\antmicro_Migrant\Migrant\Generators\CompletedGenerator.cs,CompletedGenerator,The method has 5 parameters. Parameters: type' objectsForSurrogates' disableStamping' treatCollectionAsUserObject' callPostDeserializationCallback
Long Parameter List,Antmicro.Migrant.Generators,HandleNewReferenceMethodGenerator,D:\research\architectureSmells\repos\antmicro_Migrant\Migrant\Generators\HandleNewReferenceMethodGenerator.cs,HandleNewReferenceMethodGenerator,The method has 6 parameters. Parameters: type' objectsForSurrogates' disableStamping' treatCollectionAsUserObject' generatePreSerializationCallback' generatePostSerializationCallback
Long Parameter List,Antmicro.Migrant.Generators,DynamicWriteMethodGenerator<T>,D:\research\architectureSmells\repos\antmicro_Migrant\Migrant\Generators\DynamicWriteMethodGenerator.cs,DynamicWriteMethodGenerator,The method has 5 parameters. Parameters: type' name' disableStamping' treatCollectionAsUserObject' objectWriterArgument
Long Parameter List,Antmicro.Migrant.Generators,DynamicReadMethodGenerator<T>,D:\research\architectureSmells\repos\antmicro_Migrant\Migrant\Generators\DynamicReadMethodGenerator.cs,DynamicReadMethodGenerator,The method has 6 parameters. Parameters: type' name' disableStamping' treatCollectionAsUserObject' objectIdArgument' objectReaderArgument
Long Identifier,Antmicro.Migrant,Helpers,D:\research\architectureSmells\repos\antmicro_Migrant\Migrant\Helpers.cs,GetTypeOfGenericType,The length of the parameter hasGenericArgumentsPointingToParent is 35.
Long Identifier,Antmicro.Migrant,Helpers,D:\research\architectureSmells\repos\antmicro_Migrant\Migrant\Helpers.cs,GetTypeOfGenericType,The length of the parameter hasGenericArgumentsNotPointingToParent is 38.
Long Identifier,Antmicro.Migrant,Helpers,D:\research\architectureSmells\repos\antmicro_Migrant\Migrant\Helpers.cs,,The length of the parameter TypesWriteableByPrimitiveWriter is 31.
Long Identifier,Antmicro.Migrant,ObjectReader,D:\research\architectureSmells\repos\antmicro_Migrant\Migrant\ObjectReader.cs,ReadFullTypeDescriptor,The length of the parameter containsAnyFixedGenericArguments is 32.
Long Identifier,Antmicro.Migrant,ObjectWriter,D:\research\architectureSmells\repos\antmicro_Migrant\Migrant\ObjectWriter.cs,TouchAndWriteTypeIdWithFullStamp,The length of the parameter genericTypeDefinitionDescriptor is 31.
Long Identifier,Antmicro.Migrant,WriteMethods,D:\research\architectureSmells\repos\antmicro_Migrant\Migrant\Serializer.cs,,The length of the parameter callPostSerializationHooksMethodsProvider is 41.
Long Identifier,Antmicro.Migrant,WriteMethods,D:\research\architectureSmells\repos\antmicro_Migrant\Migrant\Serializer.cs,,The length of the parameter surrogateObjectIfNeededMethodsProvider is 38.
Long Identifier,Antmicro.Migrant,WriteMethods,D:\research\architectureSmells\repos\antmicro_Migrant\Migrant\Serializer.cs,,The length of the parameter handleNewReferenceMethodsProvider is 33.
Long Identifier,Antmicro.Migrant,ReadMethods,D:\research\architectureSmells\repos\antmicro_Migrant\Migrant\Serializer.cs,,The length of the parameter touchInlinedObjectMethodsProvider is 33.
Long Identifier,Antmicro.Migrant,CollectionMetaToken,D:\research\architectureSmells\repos\antmicro_Migrant\Migrant\CollectionMetaToken.cs,,The length of the parameter SpeciallySerializedCollections is 30.
Long Identifier,Antmicro.Migrant,CollectionMetaToken,D:\research\architectureSmells\repos\antmicro_Migrant\Migrant\CollectionMetaToken.cs,,The length of the parameter SpeciallySerializedCollectionsAQNs is 34.
Long Identifier,Antmicro.Migrant.Generators,WriteMethodGenerator,D:\research\architectureSmells\repos\antmicro_Migrant\Migrant\Generators\WriteMethodGenerator.cs,GenerateTryWriteObjectInline,The length of the parameter generatePreSerializationCallback is 32.
Long Identifier,Antmicro.Migrant.Generators,WriteMethodGenerator,D:\research\architectureSmells\repos\antmicro_Migrant\Migrant\Generators\WriteMethodGenerator.cs,GenerateTryWriteObjectInline,The length of the parameter generatePostSerializationCallback is 33.
Long Identifier,Antmicro.Migrant.Generators,WriteMethodGenerator,D:\research\architectureSmells\repos\antmicro_Migrant\Migrant\Generators\WriteMethodGenerator.cs,GenerateInvokeCallbacksAndExecute,The length of the parameter generatePreSerializationCallback is 32.
Long Identifier,Antmicro.Migrant.Generators,WriteMethodGenerator,D:\research\architectureSmells\repos\antmicro_Migrant\Migrant\Generators\WriteMethodGenerator.cs,GenerateInvokeCallbacksAndExecute,The length of the parameter generatePostSerializationCallback is 33.
Long Identifier,Antmicro.Migrant.Generators,ReaderGenerationContext,D:\research\architectureSmells\repos\antmicro_Migrant\Migrant\Generators\ReaderGenerationContext.cs,PushDeserializedObjectOntoStack,The length of the parameter pushReferenceIdOntoStackAction is 30.
Long Identifier,Antmicro.Migrant.Generators,CompletedGenerator,D:\research\architectureSmells\repos\antmicro_Migrant\Migrant\Generators\CompletedGenerator.cs,CompletedGenerator,The length of the parameter callPostDeserializationCallback is 31.
Long Identifier,Antmicro.Migrant.Generators,CompletedGenerator,D:\research\architectureSmells\repos\antmicro_Migrant\Migrant\Generators\CompletedGenerator.cs,,The length of the parameter callPostDeserializationCallback is 31.
Long Identifier,Antmicro.Migrant.Generators,HandleNewReferenceMethodGenerator,D:\research\architectureSmells\repos\antmicro_Migrant\Migrant\Generators\HandleNewReferenceMethodGenerator.cs,HandleNewReferenceMethodGenerator,The length of the parameter generatePreSerializationCallback is 32.
Long Identifier,Antmicro.Migrant.Generators,HandleNewReferenceMethodGenerator,D:\research\architectureSmells\repos\antmicro_Migrant\Migrant\Generators\HandleNewReferenceMethodGenerator.cs,HandleNewReferenceMethodGenerator,The length of the parameter generatePostSerializationCallback is 33.
Long Identifier,Antmicro.Migrant.Generators,HandleNewReferenceMethodGenerator,D:\research\architectureSmells\repos\antmicro_Migrant\Migrant\Generators\HandleNewReferenceMethodGenerator.cs,,The length of the parameter generatePreSerializationCallback is 32.
Long Identifier,Antmicro.Migrant.Generators,HandleNewReferenceMethodGenerator,D:\research\architectureSmells\repos\antmicro_Migrant\Migrant\Generators\HandleNewReferenceMethodGenerator.cs,,The length of the parameter generatePostSerializationCallback is 33.
Long Statement,Antmicro.Migrant,Helpers,D:\research\architectureSmells\repos\antmicro_Migrant\Migrant\Helpers.cs,CanBeCreatedWithDataOnly,The length of the statement  "            return actualType == typeof(string) || actualType.IsValueType || actualType.IsArray || typeof(MulticastDelegate).IsAssignableFrom(actualType); " is 142.
Long Statement,Antmicro.Migrant,Helpers,D:\research\architectureSmells\repos\antmicro_Migrant\Migrant\Helpers.cs,GetDelegateWithAttribute,The length of the statement  "            return methodsToInvoke.Select(x => (Action)Delegate.CreateDelegate(typeof(Action)' x.IsStatic ? null : o' x)).Aggregate((x' y) => (Action)Delegate.Combine(x' y)); " is 162.
Long Statement,Antmicro.Migrant,Helpers,D:\research\architectureSmells\repos\antmicro_Migrant\Migrant\Helpers.cs,GetImplicitConvertionOperatorInfo,The length of the statement  "            return typeof(TFrom).GetMethods(BindingFlags.Public | BindingFlags.Static).Single(x => x.Name == "op_Implicit" && x.GetParameters().Count() == 1 && x.GetParameters().ElementAt(0).ParameterType == typeof(TTo)); " is 209.
Long Statement,Antmicro.Migrant,ObjectReader,D:\research\architectureSmells\repos\antmicro_Migrant\Migrant\ObjectReader.cs,CloneContentUsingReflection,The length of the statement  "            foreach(var field in source.GetType().GetFields(System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance)) " is 172.
Long Statement,Antmicro.Migrant,ObjectReader,D:\research\architectureSmells\repos\antmicro_Migrant\Migrant\ObjectReader.cs,LoadAndVerifySpeciallySerializableAndVerify,The length of the statement  "                    "Stream corruption by '{0}'' incorrent magic {1} when {2} expected."' obj.GetType()' serializedLength' afterPosition - beforePosition)); " is 136.
Long Statement,Antmicro.Migrant,ObjectWriter,D:\research\architectureSmells\repos\antmicro_Migrant\Migrant\ObjectWriter.cs,CheckLegality,The length of the statement  "                throw new InvalidOperationException("Pointer or ThreadLocal or SpinLock encountered during serialization. In order to obtain detailed information including classes path that lead here' please use generated version of serializer."); " is 231.
Long Statement,Antmicro.Migrant,ObjectWriter,D:\research\architectureSmells\repos\antmicro_Migrant\Migrant\ObjectWriter.cs,CheckLegality,The length of the statement  "                throw new InvalidOperationException("Pointer or ThreadLocal or SpinLock encountered during serialization. The classes path that lead to it was: " + path); " is 154.
Long Statement,Antmicro.Migrant,ObjectWriter,D:\research\architectureSmells\repos\antmicro_Migrant\Migrant\ObjectWriter.cs,IsTypeIllegal,The length of the statement  "            return type.IsPointer || type == typeof(IntPtr) || type == typeof(Pointer) || (type.IsGenericType && type.GetGenericTypeDefinition() == typeof(ThreadLocal<>)) || type == typeof(SpinLock); " is 187.
Long Statement,Antmicro.Migrant,ObjectWriter,D:\research\architectureSmells\repos\antmicro_Migrant\Migrant\ObjectWriter.cs,TouchAndWriteTypeIdWithFullStamp,The length of the statement  "                else if(typeOfUnderlyingType == Helpers.TypeOfGenericType.ClosedGenericType || typeOfUnderlyingType == Helpers.TypeOfGenericType.FixedNestedGenericType) " is 152.
Long Statement,Antmicro.Migrant,Serializer,D:\research\architectureSmells\repos\antmicro_Migrant\Migrant\Serializer.cs,CreateWriter,The length of the statement  "                    var generator = new HandleNewReferenceMethodGenerator(t' objectsForSurrogates' settings.DisableTypeStamping' settings.TreatCollectionAsUserObject' OnPreSerialization != null' OnPostSerialization != null); " is 204.
Long Statement,Antmicro.Migrant,Serializer,D:\research\architectureSmells\repos\antmicro_Migrant\Migrant\Serializer.cs,CreateWriter,The length of the statement  "                    var generator = new SurrogateObjectIfNeededMethodGenerator(t' surrogatesForObjects' settings.DisableTypeStamping' settings.TreatCollectionAsUserObject); " is 152.
Long Statement,Antmicro.Migrant,Serializer,D:\research\architectureSmells\repos\antmicro_Migrant\Migrant\Serializer.cs,CreateWriter,The length of the statement  "                    var generator = new WriteReferenceMethodGenerator(t' settings.DisableTypeStamping' settings.TreatCollectionAsUserObject); " is 121.
Long Statement,Antmicro.Migrant,Serializer,D:\research\architectureSmells\repos\antmicro_Migrant\Migrant\Serializer.cs,CreateWriter,The length of the statement  "                writeMethods.callPostSerializationHooksMethodsProvider = new DynamicMethodProvider<CallPostSerializationHooksMethodDelegate>(t => " is 129.
Long Statement,Antmicro.Migrant,Serializer,D:\research\architectureSmells\repos\antmicro_Migrant\Migrant\Serializer.cs,CreateWriter,The length of the statement  "                    var generator = new CallPostSerializationHooksMethodGenerator(t' settings.DisableTypeStamping' settings.TreatCollectionAsUserObject); " is 133.
Long Statement,Antmicro.Migrant,Serializer,D:\research\architectureSmells\repos\antmicro_Migrant\Migrant\Serializer.cs,GetReflectionBasedWriteMethods,The length of the statement  "            writeMethods.callPostSerializationHooksMethodsProvider = new DynamicMethodProvider<CallPostSerializationHooksMethodDelegate>(t => " is 129.
Long Statement,Antmicro.Migrant,Serializer,D:\research\architectureSmells\repos\antmicro_Migrant\Migrant\Serializer.cs,CreateReader,The length of the statement  "                    var generator = new CompletedGenerator(t' objectsForSurrogates' settings.DisableTypeStamping' settings.TreatCollectionAsUserObject' OnPostDeserialization != null); " is 163.
Long Statement,Antmicro.Migrant,FieldDescriptor,D:\research\architectureSmells\repos\antmicro_Migrant\Migrant\VersionTolerance\FieldDescriptor.cs,ReadFrom,The length of the statement  "            UnderlyingFieldInfo = DeclaringType.UnderlyingType.GetField(Name' BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic);  " is 136.
Long Statement,Antmicro.Migrant,FieldDescriptor,D:\research\architectureSmells\repos\antmicro_Migrant\Migrant\VersionTolerance\FieldDescriptor.cs,Equals,The length of the statement  "                return fd.Name == Name && fd.FieldType.Equals(FieldType) && fd.IsTransient == IsTransient && fd.DeclaringType.Equals(DeclaringType); " is 132.
Long Statement,Antmicro.Migrant.Utilities,SwapList,D:\research\architectureSmells\repos\antmicro_Migrant\Migrant\Utilities\SwapList.cs,IsMatch,The length of the statement  "            if(typeOfCandidateType == Helpers.TypeOfGenericType.FixedNestedGenericType || typeOfCandidateType == Helpers.TypeOfGenericType.PartiallyFixedNestedGenericType) " is 159.
Long Statement,Antmicro.Migrant.Utilities,SwapListItem,D:\research\architectureSmells\repos\antmicro_Migrant\Migrant\Utilities\SwapList.cs,With,The length of the statement  "                return new SwapListItem(Key' value ?? Value' Creator' Id) { NextElementIndex = nextElementIndex ?? this.NextElementIndex }; " is 123.
Long Statement,Antmicro.Migrant.Generators,WriteMethodGenerator,D:\research\architectureSmells\repos\antmicro_Migrant\Migrant\Generators\WriteMethodGenerator.cs,GenerateInner,The length of the statement  "                dynamicMethod = new DynamicMethod(string.Format("WriteArray{0}_{1}"' methodNo' type.Name)' returnType' parameterTypes' true); " is 125.
Long Statement,Antmicro.Migrant.Generators,WriteMethodGenerator,D:\research\architectureSmells\repos\antmicro_Migrant\Migrant\Generators\WriteMethodGenerator.cs,GenerateInner,The length of the statement  "            GeneratorHelper.DumpToLibrary<WriteMethodDelegate>(context' c => GenerateDynamicCode((WriterGenerationContext)c' type)' type.Name); " is 131.
Long Statement,Antmicro.Migrant.Generators,WriteMethodGenerator,D:\research\architectureSmells\repos\antmicro_Migrant\Migrant\Generators\WriteMethodGenerator.cs,GenerateWriteMultidimensionalArray,The length of the statement  "            GenerateArrayWriteLoop(context' 0' rank' indexLocals' lengthLocals' arrayLocal' currentElementVariable' actualType' elementType); " is 129.
Long Statement,Antmicro.Migrant.Generators,WriteMethodGenerator,D:\research\architectureSmells\repos\antmicro_Migrant\Migrant\Generators\WriteMethodGenerator.cs,GenerateArrayWriteLoop,The length of the statement  "                    GenerateArrayWriteLoop(context' currentDimension + 1' rank' indexLocals' lengthLocals' arrayLocal' currentElementVariable' arrayType' elementType); " is 147.
Long Statement,Antmicro.Migrant.Generators,WriteMethodGenerator,D:\research\architectureSmells\repos\antmicro_Migrant\Migrant\Generators\WriteMethodGenerator.cs,GenerateWriteDelegate,The length of the statement  "                context.Generator.PushPropertyValueOntoStack<ObjectWriter' IdentifiedElementsDictionary<MethodDescriptor>>(x => x.Methods); " is 123.
Long Statement,Antmicro.Migrant.Generators,WriteMethodGenerator,D:\research\architectureSmells\repos\antmicro_Migrant\Migrant\Generators\WriteMethodGenerator.cs,GenerateTryWriteObjectInline,The length of the statement  "                GenerateInvokeCallbacksAndExecute(context' generatePreSerializationCallback' generatePostSerializationCallback' valueLocal' actualType' c => " is 140.
Long Statement,Antmicro.Migrant.Generators,ReadMethodGenerator,D:\research\architectureSmells\repos\antmicro_Migrant\Migrant\Generators\ReadMethodGenerator.cs,GenerateInner,The length of the statement  "            var context = new ReaderGenerationContext(generator' disableStamping' treatCollectionAsUserObject' OpCodes.Ldarg_2' OpCodes.Ldarg_0); " is 133.
Long Statement,Antmicro.Migrant.Generators,ReadMethodGenerator,D:\research\architectureSmells\repos\antmicro_Migrant\Migrant\Generators\ReadMethodGenerator.cs,GenerateUpdateElements,The length of the statement  "                context.Generator.GenerateCodeCall<ISpeciallySerializable' PrimitiveReader>(ObjectReader.LoadAndVerifySpeciallySerializableAndVerify); " is 134.
Long Statement,Antmicro.Migrant.Generators,ReadMethodGenerator,D:\research\architectureSmells\repos\antmicro_Migrant\Migrant\Generators\ReadMethodGenerator.cs,GenerateReadField,The length of the statement  "                context.Generator.Emit(OpCodes.Call' typeof(Enum).GetMethod("ToObject"' BindingFlags.Static | BindingFlags.Public' null' new[] { " is 128.
Long Statement,Antmicro.Migrant.Generators,ReadMethodGenerator,D:\research\architectureSmells\repos\antmicro_Migrant\Migrant\Generators\ReadMethodGenerator.cs,GenerateReadArray,The length of the statement  "            var lengthsLocal = isMultidimensional ? context.Generator.DeclareLocal(typeof(int[])) : context.Generator.DeclareLocal(typeof(int)); " is 132.
Long Statement,Antmicro.Migrant.Generators,ReadMethodGenerator,D:\research\architectureSmells\repos\antmicro_Migrant\Migrant\Generators\ReadMethodGenerator.cs,GenerateReadArray,The length of the statement  "            var positionLocal = isMultidimensional ? context.Generator.DeclareLocal(typeof(int[])) : context.Generator.DeclareLocal(typeof(int)); " is 133.
Long Statement,Antmicro.Migrant.Generators,ReadMethodGenerator,D:\research\architectureSmells\repos\antmicro_Migrant\Migrant\Generators\ReadMethodGenerator.cs,GenerateReadArray,The length of the statement  "            var loopControlLocal = context.Generator.DeclareLocal(typeof(int)); // type is int not bool to reuse array length directly " is 122.
Long Statement,Antmicro.Migrant.Generators,ReadMethodGenerator,D:\research\architectureSmells\repos\antmicro_Migrant\Migrant\Generators\ReadMethodGenerator.cs,GenerateReadArray,The length of the statement  "                context.Generator.StoreLocalValueFromStack(positionLocal); // create an array for keeping the current position of each dimension " is 128.
Long Statement,Antmicro.Migrant.Generators,ReadMethodGenerator,D:\research\architectureSmells\repos\antmicro_Migrant\Migrant\Generators\ReadMethodGenerator.cs,GenerateReadDelegate,The length of the statement  "                context.Generator.GenerateCodeCall<MethodInfo' Type' object' AutoResizingList<object>' int>(GenerateReadDelegateStaticHelper); " is 126.
Long Statement,Antmicro.Migrant.Generators,ReadMethodGenerator,D:\research\architectureSmells\repos\antmicro_Migrant\Migrant\Generators\ReadMethodGenerator.cs,GenerateReadMethod,The length of the statement  "            context.Generator.Emit(OpCodes.Call' Helpers.GetPropertyGetterInfo<ObjectReader' IdentifiedElementsList<MethodDescriptor>>(or => or.Methods)); " is 142.
Long Statement,Antmicro.Migrant.Generators,ReadMethodGenerator,D:\research\architectureSmells\repos\antmicro_Migrant\Migrant\Generators\ReadMethodGenerator.cs,GenerateReadMethod,The length of the statement  "            context.Generator.Emit(OpCodes.Call' Helpers.GetMethodInfo<IdentifiedElementsList<MethodDescriptor>' MethodDescriptor>(or => or.Read())); " is 137.
Long Statement,Antmicro.Migrant.Generators,ReadMethodGenerator,D:\research\architectureSmells\repos\antmicro_Migrant\Migrant\Generators\ReadMethodGenerator.cs,GenerateReadMethod,The length of the statement  "            context.Generator.Emit(OpCodes.Call' Helpers.GetPropertyGetterInfo<MethodDescriptor' MethodInfo>(md => md.UnderlyingMethod)); " is 125.
Long Statement,Antmicro.Migrant.Generators,GeneratorHelper,D:\research\architectureSmells\repos\antmicro_Migrant\Migrant\Generators\GeneratorHelper.cs,GenerateLoop,The length of the statement  "            context.Generator.StoreLocalValueFromStack(loopControlLocal); // initialize <<loopControl>> variable using value from stack " is 123.
Long Statement,Antmicro.Migrant.Generators,GeneratorHelper,D:\research\architectureSmells\repos\antmicro_Migrant\Migrant\Generators\GeneratorHelper.cs,PushFieldInfoOntoStack,The length of the statement  "                generator.Emit(OpCodes.Call' Helpers.GetMethodInfo<object' object>(x => FieldInfo.GetFieldFromHandle(finfo.FieldHandle' new RuntimeTypeHandle()))); " is 147.
Long Statement,Antmicro.Migrant.Generators,GeneratorHelper,D:\research\architectureSmells\repos\antmicro_Migrant\Migrant\Generators\GeneratorHelper.cs,PushFieldInfoOntoStack,The length of the statement  "                generator.Emit(OpCodes.Call' Helpers.GetMethodInfo<object' object>(x => FieldInfo.GetFieldFromHandle(finfo.FieldHandle))); " is 122.
Long Statement,Antmicro.Migrant.Generators,GeneratorHelper,D:\research\architectureSmells\repos\antmicro_Migrant\Migrant\Generators\GeneratorHelper.cs,PushTypeOntoStack,The length of the statement  "            generator.Emit(OpCodes.Call' Helpers.GetMethodInfo<RuntimeTypeHandle' Type>(o => Type.GetTypeFromHandle(o))); // loads value of <<typeToGenerate>> onto stack " is 157.
Long Statement,Antmicro.Migrant.Generators,GeneratorHelper,D:\research\architectureSmells\repos\antmicro_Migrant\Migrant\Generators\GeneratorHelper.cs,DumpToLibrary,The length of the statement  "            var method = type.DefineMethod(invokeMethod.Name' MethodAttributes.Public | MethodAttributes.Static' returnType' argumentTypes); " is 128.
Long Statement,Antmicro.Migrant.Generators,TouchInlinedObjectGenerator,D:\research\architectureSmells\repos\antmicro_Migrant\Migrant\Generators\TouchInlinedObjectGenerator.cs,InnerGenerate,The length of the statement  "                var lengthsLocal = isMultidimensional ? context.Generator.DeclareLocal(typeof(int[])) : context.Generator.DeclareLocal(typeof(int)); " is 132.
Long Statement,Antmicro.Migrant.Generators,ReaderGenerationContext,D:\research\architectureSmells\repos\antmicro_Migrant\Migrant\Generators\ReaderGenerationContext.cs,WithGenerator,The length of the statement  "            return new ReaderGenerationContext(g' DisableStamping' TreatCollectionAsUserObject' objectIdArgument' objectReaderArgument); " is 124.
Long Statement,Antmicro.Migrant.Generators,CompletedGenerator,D:\research\architectureSmells\repos\antmicro_Migrant\Migrant\Generators\CompletedGenerator.cs,GenerateCallPostDeserializationHooks,The length of the statement  "                    context.Generator.Emit(OpCodes.Call' Helpers.GetMethodInfo<object' MethodBase>(x => MethodBase.GetMethodFromHandle(new RuntimeMethodHandle()' new RuntimeTypeHandle()))); " is 169.
Long Statement,Antmicro.Migrant.Generators,CompletedGenerator,D:\research\architectureSmells\repos\antmicro_Migrant\Migrant\Generators\CompletedGenerator.cs,GenerateCallPostDeserializationHooks,The length of the statement  "                    context.Generator.Emit(OpCodes.Call' Helpers.GetMethodInfo<object' MethodBase>(x => MethodBase.GetMethodFromHandle(new RuntimeMethodHandle()))); " is 144.
Long Statement,Antmicro.Migrant.Generators,CompletedGenerator,D:\research\architectureSmells\repos\antmicro_Migrant\Migrant\Generators\CompletedGenerator.cs,GenerateCallPostDeserializationHooks,The length of the statement  "                context.Generator.Emit(OpCodes.Call' Helpers.GetMethodInfo<object' Delegate>(x => Delegate.CreateDelegate(null' null' method))); " is 128.
Long Statement,Antmicro.Migrant.Generators,CompletedGenerator,D:\research\architectureSmells\repos\antmicro_Migrant\Migrant\Generators\CompletedGenerator.cs,GenerateDesurrogate,The length of the statement  "            context.Generator.PushFieldValueOntoStack<Serializer.ReadMethods' DynamicMethodProvider<CloneMethodDelegate>>(x => x.cloneContentMehtodsProvider); " is 146.
Long Statement,Antmicro.Migrant.Generators,HandleNewReferenceMethodGenerator,D:\research\architectureSmells\repos\antmicro_Migrant\Migrant\Generators\HandleNewReferenceMethodGenerator.cs,InnerGenerate,The length of the statement  "            if(WriteMethodGenerator.GenerateTryWriteObjectInline(context' generatePreSerializationCallback' generatePostSerializationCallback' value' type)) " is 144.
Long Statement,Antmicro.Migrant.Generators,CallPostSerializationHooksMethodGenerator,D:\research\architectureSmells\repos\antmicro_Migrant\Migrant\Generators\CallPostSerializationHooksMethodGenerator.cs,InnerGenerate,The length of the statement  "                    context.Generator.Emit(OpCodes.Call' Helpers.GetMethodInfo<object' MethodBase>(x => MethodBase.GetMethodFromHandle(new RuntimeMethodHandle()' new RuntimeTypeHandle()))); " is 169.
Long Statement,Antmicro.Migrant.Generators,CallPostSerializationHooksMethodGenerator,D:\research\architectureSmells\repos\antmicro_Migrant\Migrant\Generators\CallPostSerializationHooksMethodGenerator.cs,InnerGenerate,The length of the statement  "                    context.Generator.Emit(OpCodes.Call' Helpers.GetMethodInfo<object' MethodBase>(x => MethodBase.GetMethodFromHandle(new RuntimeMethodHandle()))); " is 144.
Long Statement,Antmicro.Migrant.Generators,CallPostSerializationHooksMethodGenerator,D:\research\architectureSmells\repos\antmicro_Migrant\Migrant\Generators\CallPostSerializationHooksMethodGenerator.cs,InnerGenerate,The length of the statement  "                context.Generator.Emit(OpCodes.Call' Helpers.GetMethodInfo<object' Delegate>(x => Delegate.CreateDelegate(null' null' method))); " is 128.
Long Statement,Antmicro.Migrant.Generators,DynamicWriteMethodGenerator<T>,D:\research\architectureSmells\repos\antmicro_Migrant\Migrant\Generators\DynamicWriteMethodGenerator.cs,GenerateInner,The length of the statement  "            var context = new WriterGenerationContext(generator' disableStamping' treatCollectionAsUserObject' objectWriterArgument); " is 121.
Long Statement,Antmicro.Migrant.Generators,DynamicReadMethodGenerator<T>,D:\research\architectureSmells\repos\antmicro_Migrant\Migrant\Generators\DynamicReadMethodGenerator.cs,GenerateInner,The length of the statement  "            var context = new ReaderGenerationContext(generator' disableStamping' treatCollectionAsUserObject' objectIdArgument' objectReaderArgument); " is 139.
Long Statement,Antmicro.Migrant.VersionTolerance,StampHelpers,D:\research\architectureSmells\repos\antmicro_Migrant\Migrant\VersionTolerance\StampHelpers.cs,IsStampNeeded,The length of the statement  "            return !Helpers.IsWriteableByPrimitiveWriter(type.UnderlyingType) && (!CollectionMetaToken.IsCollection(type) || treatCollectionAsUserObject); " is 142.
Long Statement,Antmicro.Migrant.VersionTolerance,AssemblyDescriptor,D:\research\architectureSmells\repos\antmicro_Migrant\Migrant\VersionTolerance\AssemblyDescriptor.cs,CreateFullName,The length of the statement  "            FullName = string.Format("{0}' Version={1}' Culture={2}' PublicKeyToken={3}"' Name' Version' CultureName' Token.Length == 0 ? "null" : String.Join(string.Empty' Token.Select(x => string.Format("{0:x2}"' x))));  " is 209.
Long Statement,Antmicro.Migrant.VersionTolerance,ModuleDescriptor,D:\research\architectureSmells\repos\antmicro_Migrant\Migrant\VersionTolerance\ModuleDescriptor.cs,GetHashCode,The length of the statement  "                return (Name != null ? Name.GetHashCode() : 0) ^ GUID.GetHashCode() ^ (ModuleAssembly != null ? ModuleAssembly.GetHashCode() : 0); " is 130.
Long Statement,Antmicro.Migrant.VersionTolerance,MethodDescriptor,D:\research\architectureSmells\repos\antmicro_Migrant\Migrant\VersionTolerance\MethodDescriptor.cs,Read,The length of the statement  "                UnderlyingMethod = type.GetMethods(BindingFlags.Instance | BindingFlags.Static | BindingFlags.Public | BindingFlags.NonPublic).SingleOrDefault(m =>  " is 147.
Long Statement,Antmicro.Migrant.VersionTolerance,MethodDescriptor,D:\research\architectureSmells\repos\antmicro_Migrant\Migrant\VersionTolerance\MethodDescriptor.cs,Read,The length of the statement  "                UnderlyingMethod = type.GetMethod(methodName' BindingFlags.Instance | BindingFlags.Static | BindingFlags.Public | BindingFlags.NonPublic' null' types' null); " is 157.
Long Statement,Antmicro.Migrant.VersionTolerance,TypeFullDescriptor,D:\research\architectureSmells\repos\antmicro_Migrant\Migrant\VersionTolerance\TypeFullDescriptor.cs,CompareWith,The length of the statement  "                // why do we remove a field from current ones? if some field is still left after our operation' then field addition occured " is 123.
Long Statement,Antmicro.Migrant.VersionTolerance,TypeFullDescriptor,D:\research\architectureSmells\repos\antmicro_Migrant\Migrant\VersionTolerance\TypeFullDescriptor.cs,VerifyStructure,The length of the statement  "                    throw new VersionToleranceException(string.Format("The class {2} was serialized with different module version id {0}' current one is {1}."' " is 139.
Long Statement,Antmicro.Migrant.VersionTolerance,TypeFullDescriptor,D:\research\architectureSmells\repos\antmicro_Migrant\Migrant\VersionTolerance\TypeFullDescriptor.cs,VerifyStructure,The length of the statement  "                return StampHelpers.GetFieldsInSerializationOrder(UnderlyingType' true).Select(x => new FieldInfoOrEntryToOmit(x)).ToList(); " is 124.
Long Statement,Antmicro.Migrant.VersionTolerance,TypeFullDescriptor,D:\research\architectureSmells\repos\antmicro_Migrant\Migrant\VersionTolerance\TypeFullDescriptor.cs,VerifyStructure,The length of the statement  "                throw new VersionToleranceException(string.Format("Class hierarchy for {2} changed. Expected '{1}' as base class' but found '{0}'."'  " is 132.
Long Statement,Antmicro.Migrant.VersionTolerance,TypeFullDescriptor,D:\research\architectureSmells\repos\antmicro_Migrant\Migrant\VersionTolerance\TypeFullDescriptor.cs,VerifyStructure,The length of the statement  "            if(assemblyTypeDescriptor.TypeModule.ModuleAssembly.Version != TypeModule.ModuleAssembly.Version && !versionToleranceLevel.HasFlag(VersionToleranceLevel.AllowAssemblyVersionChange)) " is 181.
Long Statement,Antmicro.Migrant.VersionTolerance,TypeFullDescriptor,D:\research\architectureSmells\repos\antmicro_Migrant\Migrant\VersionTolerance\TypeFullDescriptor.cs,VerifyStructure,The length of the statement  "                throw new VersionToleranceException(string.Format("Field {0} type changed in class {1}."' cmpResult.FieldsChanged[0].Name' UnderlyingType.FullName)); " is 149.
Long Statement,Antmicro.Migrant.VersionTolerance,TypeFullDescriptor,D:\research\architectureSmells\repos\antmicro_Migrant\Migrant\VersionTolerance\TypeFullDescriptor.cs,VerifyStructure,The length of the statement  "                throw new VersionToleranceException(string.Format("Field {0} added to class {1}."' cmpResult.FieldsAdded[0].Name' UnderlyingType.FullName)); " is 140.
Long Statement,Antmicro.Migrant.VersionTolerance,TypeFullDescriptor,D:\research\architectureSmells\repos\antmicro_Migrant\Migrant\VersionTolerance\TypeFullDescriptor.cs,VerifyStructure,The length of the statement  "                throw new VersionToleranceException(string.Format("Field {0} removed from class {1}."' cmpResult.FieldsRemoved[0].Name' UnderlyingType.FullName)); " is 146.
Complex Conditional,Antmicro.Migrant.VersionTolerance,TypeFullDescriptor,D:\research\architectureSmells\repos\antmicro_Migrant\Migrant\VersionTolerance\TypeFullDescriptor.cs,VerifyStructure,The conditional expression  "!(assemblyTypeDescriptor.baseType == null && baseType == null)                  && ((assemblyTypeDescriptor.baseType == null && baseType != null) || !assemblyTypeDescriptor.baseType.Equals(baseType))                   && !versionToleranceLevel.HasFlag(VersionToleranceLevel.AllowInheritanceChainChange)"  is complex.
Magic Number,Antmicro.Migrant,PrimitiveReader,D:\research\architectureSmells\repos\antmicro_Migrant\Migrant\PrimitiveReader.cs,ReadTimeSpan,The following statement contains a magic number: return new TimeSpan(days' type' tms / 60' tms % 60);
Magic Number,Antmicro.Migrant,PrimitiveReader,D:\research\architectureSmells\repos\antmicro_Migrant\Migrant\PrimitiveReader.cs,ReadTimeSpan,The following statement contains a magic number: return new TimeSpan(days' type' tms / 60' tms % 60);
Magic Number,Antmicro.Migrant,PrimitiveReader,D:\research\architectureSmells\repos\antmicro_Migrant\Migrant\PrimitiveReader.cs,ReadGuid,The following statement contains a magic number: return new Guid(ReadBytes(16));
Magic Number,Antmicro.Migrant,PrimitiveReader,D:\research\architectureSmells\repos\antmicro_Migrant\Migrant\PrimitiveReader.cs,InnerReadInteger,The following statement contains a magic number: shift += 7;
Magic Number,Antmicro.Migrant,PrimitiveWriter,D:\research\architectureSmells\repos\antmicro_Migrant\Migrant\PrimitiveWriter.cs,Write,The following statement contains a magic number: Write((ushort)(value.Seconds + 60 * value.Minutes));
Magic Number,Antmicro.Migrant,PrimitiveWriter,D:\research\architectureSmells\repos\antmicro_Migrant\Migrant\PrimitiveWriter.cs,Write,The following statement contains a magic number: var valueToWrite = (value << 1) ^ (value >> 15);
Magic Number,Antmicro.Migrant,PrimitiveWriter,D:\research\architectureSmells\repos\antmicro_Migrant\Migrant\PrimitiveWriter.cs,Write,The following statement contains a magic number: var valueToWrite = (value << 1) ^ (value >> 31);
Magic Number,Antmicro.Migrant,PrimitiveWriter,D:\research\architectureSmells\repos\antmicro_Migrant\Migrant\PrimitiveWriter.cs,Write,The following statement contains a magic number: var valueToWrite = (value << 1) ^ (value >> 63);
Magic Number,Antmicro.Migrant,PrimitiveWriter,D:\research\architectureSmells\repos\antmicro_Migrant\Migrant\PrimitiveWriter.cs,Write,The following statement contains a magic number: InnerWriteInteger((ulong)valueToWrite' sizeof(long) + 2);
Magic Number,Antmicro.Migrant,PrimitiveWriter,D:\research\architectureSmells\repos\antmicro_Migrant\Migrant\PrimitiveWriter.cs,Write,The following statement contains a magic number: InnerWriteInteger(value' sizeof(ulong) + 2);
Magic Number,Antmicro.Migrant,PrimitiveWriter,D:\research\architectureSmells\repos\antmicro_Migrant\Migrant\PrimitiveWriter.cs,Write,The following statement contains a magic number: Write(bytes[2]);
Magic Number,Antmicro.Migrant,PrimitiveWriter,D:\research\architectureSmells\repos\antmicro_Migrant\Migrant\PrimitiveWriter.cs,Write,The following statement contains a magic number: Write(bytes[3]);
Magic Number,Antmicro.Migrant,PrimitiveWriter,D:\research\architectureSmells\repos\antmicro_Migrant\Migrant\PrimitiveWriter.cs,InnerWriteInteger,The following statement contains a magic number: valueToWrite = (byte)(value | 128);
Magic Number,Antmicro.Migrant,PrimitiveWriter,D:\research\architectureSmells\repos\antmicro_Migrant\Migrant\PrimitiveWriter.cs,InnerWriteInteger,The following statement contains a magic number: value >>= 7;
Magic Number,Antmicro.Migrant,PrimitiveWriter,D:\research\architectureSmells\repos\antmicro_Migrant\Migrant\PrimitiveWriter.cs,InnerWriteInteger,The following statement contains a magic number: value > 127
Magic Number,Antmicro.Migrant,PrimitiveWriter,D:\research\architectureSmells\repos\antmicro_Migrant\Migrant\PrimitiveWriter.cs,InnerWriteInteger,The following statement contains a magic number: valueToWrite = (byte)(value & 127);
Magic Number,Antmicro.Migrant,FieldDescriptor,D:\research\architectureSmells\repos\antmicro_Migrant\Migrant\VersionTolerance\FieldDescriptor.cs,GetHashCode,The following statement contains a magic number: var hash = 17;
Magic Number,Antmicro.Migrant,FieldDescriptor,D:\research\architectureSmells\repos\antmicro_Migrant\Migrant\VersionTolerance\FieldDescriptor.cs,GetHashCode,The following statement contains a magic number: hash = hash * 23 + (Name != null ? Name.GetHashCode() : 0);
Magic Number,Antmicro.Migrant,FieldDescriptor,D:\research\architectureSmells\repos\antmicro_Migrant\Migrant\VersionTolerance\FieldDescriptor.cs,GetHashCode,The following statement contains a magic number: hash = hash * 23 + (FieldType != null ? FieldType.GetHashCode() : 0);
Magic Number,Antmicro.Migrant,FieldDescriptor,D:\research\architectureSmells\repos\antmicro_Migrant\Migrant\VersionTolerance\FieldDescriptor.cs,GetHashCode,The following statement contains a magic number: hash = hash * 23 + IsTransient.GetHashCode();
Magic Number,Antmicro.Migrant,FieldDescriptor,D:\research\architectureSmells\repos\antmicro_Migrant\Migrant\VersionTolerance\FieldDescriptor.cs,GetHashCode,The following statement contains a magic number: hash = hash * 23 + (DeclaringType != null ? DeclaringType.GetHashCode() : 0);
Magic Number,Antmicro.Migrant,MoveFieldComparer,D:\research\architectureSmells\repos\antmicro_Migrant\Migrant\VersionTolerance\FieldDescriptor.cs,GetHashCode,The following statement contains a magic number: var hash = 17;
Magic Number,Antmicro.Migrant,MoveFieldComparer,D:\research\architectureSmells\repos\antmicro_Migrant\Migrant\VersionTolerance\FieldDescriptor.cs,GetHashCode,The following statement contains a magic number: hash = hash * 23 + (obj.Name != null ? obj.Name.GetHashCode() : 0);
Magic Number,Antmicro.Migrant,MoveFieldComparer,D:\research\architectureSmells\repos\antmicro_Migrant\Migrant\VersionTolerance\FieldDescriptor.cs,GetHashCode,The following statement contains a magic number: hash = hash * 23 + (obj.FieldType != null ? obj.FieldType.GetHashCode() : 0);
Magic Number,Antmicro.Migrant.Utilities,AutoResizingList<T>,D:\research\architectureSmells\repos\antmicro_Migrant\Migrant\Utilities\AutoResizingList.cs,ResizeTo,The following statement contains a magic number: var newData = new T[Math.Max(data.Length * 2' neededSize)];
Magic Number,Antmicro.Migrant.Utilities,Variable,D:\research\architectureSmells\repos\antmicro_Migrant\Migrant\Utilities\Variable.cs,Variable,The following statement contains a magic number: switch(argumentId)              {              case 0:                  argOpCode = OpCodes.Ldarg_0;                  break;              case 1:                  argOpCode = OpCodes.Ldarg_1;                  break;              case 2:                  argOpCode = OpCodes.Ldarg_2;                  break;              case 3:                  argOpCode = OpCodes.Ldarg_3;                  break;              default:                  throw new ArgumentOutOfRangeException();              }
Magic Number,Antmicro.Migrant.Utilities,Variable,D:\research\architectureSmells\repos\antmicro_Migrant\Migrant\Utilities\Variable.cs,Variable,The following statement contains a magic number: switch(argumentId)              {              case 0:                  argOpCode = OpCodes.Ldarg_0;                  break;              case 1:                  argOpCode = OpCodes.Ldarg_1;                  break;              case 2:                  argOpCode = OpCodes.Ldarg_2;                  break;              case 3:                  argOpCode = OpCodes.Ldarg_3;                  break;              default:                  throw new ArgumentOutOfRangeException();              }
Magic Number,Antmicro.Migrant.Generators,GeneratorHelper,D:\research\architectureSmells\repos\antmicro_Migrant\Migrant\Generators\GeneratorHelper.cs,PushLocalValueOntoStack,The following statement contains a magic number: switch(local.LocalIndex)              {              case 0:                  generator.Emit(OpCodes.Ldloc_0);                  break;              case 1:                  generator.Emit(OpCodes.Ldloc_1);                  break;              case 2:                  generator.Emit(OpCodes.Ldloc_2);                  break;              case 3:                  generator.Emit(OpCodes.Ldloc_3);                  break;              default:                  if(local.LocalIndex < 256)                  {                      generator.Emit(OpCodes.Ldloc_S' (byte)local.LocalIndex);                  }                  else                  {                      generator.Emit(OpCodes.Ldloc' local);                  }                  break;              }
Magic Number,Antmicro.Migrant.Generators,GeneratorHelper,D:\research\architectureSmells\repos\antmicro_Migrant\Migrant\Generators\GeneratorHelper.cs,PushLocalValueOntoStack,The following statement contains a magic number: switch(local.LocalIndex)              {              case 0:                  generator.Emit(OpCodes.Ldloc_0);                  break;              case 1:                  generator.Emit(OpCodes.Ldloc_1);                  break;              case 2:                  generator.Emit(OpCodes.Ldloc_2);                  break;              case 3:                  generator.Emit(OpCodes.Ldloc_3);                  break;              default:                  if(local.LocalIndex < 256)                  {                      generator.Emit(OpCodes.Ldloc_S' (byte)local.LocalIndex);                  }                  else                  {                      generator.Emit(OpCodes.Ldloc' local);                  }                  break;              }
Magic Number,Antmicro.Migrant.Generators,GeneratorHelper,D:\research\architectureSmells\repos\antmicro_Migrant\Migrant\Generators\GeneratorHelper.cs,PushLocalValueOntoStack,The following statement contains a magic number: switch(local.LocalIndex)              {              case 0:                  generator.Emit(OpCodes.Ldloc_0);                  break;              case 1:                  generator.Emit(OpCodes.Ldloc_1);                  break;              case 2:                  generator.Emit(OpCodes.Ldloc_2);                  break;              case 3:                  generator.Emit(OpCodes.Ldloc_3);                  break;              default:                  if(local.LocalIndex < 256)                  {                      generator.Emit(OpCodes.Ldloc_S' (byte)local.LocalIndex);                  }                  else                  {                      generator.Emit(OpCodes.Ldloc' local);                  }                  break;              }
Magic Number,Antmicro.Migrant.Generators,GeneratorHelper,D:\research\architectureSmells\repos\antmicro_Migrant\Migrant\Generators\GeneratorHelper.cs,PushLocalAddressOntoStack,The following statement contains a magic number: local.LocalIndex < 256
Magic Number,Antmicro.Migrant.Generators,GeneratorHelper,D:\research\architectureSmells\repos\antmicro_Migrant\Migrant\Generators\GeneratorHelper.cs,StoreLocalValueFromStack,The following statement contains a magic number: switch(local.LocalIndex)              {              case 0:                  generator.Emit(OpCodes.Stloc_0);                  break;              case 1:                  generator.Emit(OpCodes.Stloc_1);                  break;              case 2:                  generator.Emit(OpCodes.Stloc_2);                  break;              case 3:                  generator.Emit(OpCodes.Stloc_3);                  break;              default:                  if(local.LocalIndex < 256)                  {                      generator.Emit(OpCodes.Stloc_S' (byte)local.LocalIndex);                  }                  else                  {                      generator.Emit(OpCodes.Stloc' local);                  }                  break;              }
Magic Number,Antmicro.Migrant.Generators,GeneratorHelper,D:\research\architectureSmells\repos\antmicro_Migrant\Migrant\Generators\GeneratorHelper.cs,StoreLocalValueFromStack,The following statement contains a magic number: switch(local.LocalIndex)              {              case 0:                  generator.Emit(OpCodes.Stloc_0);                  break;              case 1:                  generator.Emit(OpCodes.Stloc_1);                  break;              case 2:                  generator.Emit(OpCodes.Stloc_2);                  break;              case 3:                  generator.Emit(OpCodes.Stloc_3);                  break;              default:                  if(local.LocalIndex < 256)                  {                      generator.Emit(OpCodes.Stloc_S' (byte)local.LocalIndex);                  }                  else                  {                      generator.Emit(OpCodes.Stloc' local);                  }                  break;              }
Magic Number,Antmicro.Migrant.Generators,GeneratorHelper,D:\research\architectureSmells\repos\antmicro_Migrant\Migrant\Generators\GeneratorHelper.cs,StoreLocalValueFromStack,The following statement contains a magic number: switch(local.LocalIndex)              {              case 0:                  generator.Emit(OpCodes.Stloc_0);                  break;              case 1:                  generator.Emit(OpCodes.Stloc_1);                  break;              case 2:                  generator.Emit(OpCodes.Stloc_2);                  break;              case 3:                  generator.Emit(OpCodes.Stloc_3);                  break;              default:                  if(local.LocalIndex < 256)                  {                      generator.Emit(OpCodes.Stloc_S' (byte)local.LocalIndex);                  }                  else                  {                      generator.Emit(OpCodes.Stloc' local);                  }                  break;              }
Magic Number,Antmicro.Migrant.Generators,GeneratorHelper,D:\research\architectureSmells\repos\antmicro_Migrant\Migrant\Generators\GeneratorHelper.cs,PushIntegerOntoStack,The following statement contains a magic number: switch(value)              {              case -1:                  generator.Emit(OpCodes.Ldc_I4_M1);                  break;              case 0:                  generator.Emit(OpCodes.Ldc_I4_0);                  break;              case 1:                  generator.Emit(OpCodes.Ldc_I4_1);                  break;              case 2:                  generator.Emit(OpCodes.Ldc_I4_2);                  break;              case 3:                  generator.Emit(OpCodes.Ldc_I4_3);                  break;              case 4:                  generator.Emit(OpCodes.Ldc_I4_4);                  break;              case 5:                  generator.Emit(OpCodes.Ldc_I4_5);                  break;              case 6:                  generator.Emit(OpCodes.Ldc_I4_6);                  break;              case 7:                  generator.Emit(OpCodes.Ldc_I4_7);                  break;              case 8:                  generator.Emit(OpCodes.Ldc_I4_8);                  break;              default:                  if(value > -129 && value < 128)                  {                      generator.Emit(OpCodes.Ldc_I4_S' value);                  }                  else                  {                      generator.Emit(OpCodes.Ldc_I4' value);                  }                  break;              }
Magic Number,Antmicro.Migrant.Generators,GeneratorHelper,D:\research\architectureSmells\repos\antmicro_Migrant\Migrant\Generators\GeneratorHelper.cs,PushIntegerOntoStack,The following statement contains a magic number: switch(value)              {              case -1:                  generator.Emit(OpCodes.Ldc_I4_M1);                  break;              case 0:                  generator.Emit(OpCodes.Ldc_I4_0);                  break;              case 1:                  generator.Emit(OpCodes.Ldc_I4_1);                  break;              case 2:                  generator.Emit(OpCodes.Ldc_I4_2);                  break;              case 3:                  generator.Emit(OpCodes.Ldc_I4_3);                  break;              case 4:                  generator.Emit(OpCodes.Ldc_I4_4);                  break;              case 5:                  generator.Emit(OpCodes.Ldc_I4_5);                  break;              case 6:                  generator.Emit(OpCodes.Ldc_I4_6);                  break;              case 7:                  generator.Emit(OpCodes.Ldc_I4_7);                  break;              case 8:                  generator.Emit(OpCodes.Ldc_I4_8);                  break;              default:                  if(value > -129 && value < 128)                  {                      generator.Emit(OpCodes.Ldc_I4_S' value);                  }                  else                  {                      generator.Emit(OpCodes.Ldc_I4' value);                  }                  break;              }
Magic Number,Antmicro.Migrant.Generators,GeneratorHelper,D:\research\architectureSmells\repos\antmicro_Migrant\Migrant\Generators\GeneratorHelper.cs,PushIntegerOntoStack,The following statement contains a magic number: switch(value)              {              case -1:                  generator.Emit(OpCodes.Ldc_I4_M1);                  break;              case 0:                  generator.Emit(OpCodes.Ldc_I4_0);                  break;              case 1:                  generator.Emit(OpCodes.Ldc_I4_1);                  break;              case 2:                  generator.Emit(OpCodes.Ldc_I4_2);                  break;              case 3:                  generator.Emit(OpCodes.Ldc_I4_3);                  break;              case 4:                  generator.Emit(OpCodes.Ldc_I4_4);                  break;              case 5:                  generator.Emit(OpCodes.Ldc_I4_5);                  break;              case 6:                  generator.Emit(OpCodes.Ldc_I4_6);                  break;              case 7:                  generator.Emit(OpCodes.Ldc_I4_7);                  break;              case 8:                  generator.Emit(OpCodes.Ldc_I4_8);                  break;              default:                  if(value > -129 && value < 128)                  {                      generator.Emit(OpCodes.Ldc_I4_S' value);                  }                  else                  {                      generator.Emit(OpCodes.Ldc_I4' value);                  }                  break;              }
Magic Number,Antmicro.Migrant.Generators,GeneratorHelper,D:\research\architectureSmells\repos\antmicro_Migrant\Migrant\Generators\GeneratorHelper.cs,PushIntegerOntoStack,The following statement contains a magic number: switch(value)              {              case -1:                  generator.Emit(OpCodes.Ldc_I4_M1);                  break;              case 0:                  generator.Emit(OpCodes.Ldc_I4_0);                  break;              case 1:                  generator.Emit(OpCodes.Ldc_I4_1);                  break;              case 2:                  generator.Emit(OpCodes.Ldc_I4_2);                  break;              case 3:                  generator.Emit(OpCodes.Ldc_I4_3);                  break;              case 4:                  generator.Emit(OpCodes.Ldc_I4_4);                  break;              case 5:                  generator.Emit(OpCodes.Ldc_I4_5);                  break;              case 6:                  generator.Emit(OpCodes.Ldc_I4_6);                  break;              case 7:                  generator.Emit(OpCodes.Ldc_I4_7);                  break;              case 8:                  generator.Emit(OpCodes.Ldc_I4_8);                  break;              default:                  if(value > -129 && value < 128)                  {                      generator.Emit(OpCodes.Ldc_I4_S' value);                  }                  else                  {                      generator.Emit(OpCodes.Ldc_I4' value);                  }                  break;              }
Magic Number,Antmicro.Migrant.Generators,GeneratorHelper,D:\research\architectureSmells\repos\antmicro_Migrant\Migrant\Generators\GeneratorHelper.cs,PushIntegerOntoStack,The following statement contains a magic number: switch(value)              {              case -1:                  generator.Emit(OpCodes.Ldc_I4_M1);                  break;              case 0:                  generator.Emit(OpCodes.Ldc_I4_0);                  break;              case 1:                  generator.Emit(OpCodes.Ldc_I4_1);                  break;              case 2:                  generator.Emit(OpCodes.Ldc_I4_2);                  break;              case 3:                  generator.Emit(OpCodes.Ldc_I4_3);                  break;              case 4:                  generator.Emit(OpCodes.Ldc_I4_4);                  break;              case 5:                  generator.Emit(OpCodes.Ldc_I4_5);                  break;              case 6:                  generator.Emit(OpCodes.Ldc_I4_6);                  break;              case 7:                  generator.Emit(OpCodes.Ldc_I4_7);                  break;              case 8:                  generator.Emit(OpCodes.Ldc_I4_8);                  break;              default:                  if(value > -129 && value < 128)                  {                      generator.Emit(OpCodes.Ldc_I4_S' value);                  }                  else                  {                      generator.Emit(OpCodes.Ldc_I4' value);                  }                  break;              }
Magic Number,Antmicro.Migrant.Generators,GeneratorHelper,D:\research\architectureSmells\repos\antmicro_Migrant\Migrant\Generators\GeneratorHelper.cs,PushIntegerOntoStack,The following statement contains a magic number: switch(value)              {              case -1:                  generator.Emit(OpCodes.Ldc_I4_M1);                  break;              case 0:                  generator.Emit(OpCodes.Ldc_I4_0);                  break;              case 1:                  generator.Emit(OpCodes.Ldc_I4_1);                  break;              case 2:                  generator.Emit(OpCodes.Ldc_I4_2);                  break;              case 3:                  generator.Emit(OpCodes.Ldc_I4_3);                  break;              case 4:                  generator.Emit(OpCodes.Ldc_I4_4);                  break;              case 5:                  generator.Emit(OpCodes.Ldc_I4_5);                  break;              case 6:                  generator.Emit(OpCodes.Ldc_I4_6);                  break;              case 7:                  generator.Emit(OpCodes.Ldc_I4_7);                  break;              case 8:                  generator.Emit(OpCodes.Ldc_I4_8);                  break;              default:                  if(value > -129 && value < 128)                  {                      generator.Emit(OpCodes.Ldc_I4_S' value);                  }                  else                  {                      generator.Emit(OpCodes.Ldc_I4' value);                  }                  break;              }
Magic Number,Antmicro.Migrant.Generators,GeneratorHelper,D:\research\architectureSmells\repos\antmicro_Migrant\Migrant\Generators\GeneratorHelper.cs,PushIntegerOntoStack,The following statement contains a magic number: switch(value)              {              case -1:                  generator.Emit(OpCodes.Ldc_I4_M1);                  break;              case 0:                  generator.Emit(OpCodes.Ldc_I4_0);                  break;              case 1:                  generator.Emit(OpCodes.Ldc_I4_1);                  break;              case 2:                  generator.Emit(OpCodes.Ldc_I4_2);                  break;              case 3:                  generator.Emit(OpCodes.Ldc_I4_3);                  break;              case 4:                  generator.Emit(OpCodes.Ldc_I4_4);                  break;              case 5:                  generator.Emit(OpCodes.Ldc_I4_5);                  break;              case 6:                  generator.Emit(OpCodes.Ldc_I4_6);                  break;              case 7:                  generator.Emit(OpCodes.Ldc_I4_7);                  break;              case 8:                  generator.Emit(OpCodes.Ldc_I4_8);                  break;              default:                  if(value > -129 && value < 128)                  {                      generator.Emit(OpCodes.Ldc_I4_S' value);                  }                  else                  {                      generator.Emit(OpCodes.Ldc_I4' value);                  }                  break;              }
Magic Number,Antmicro.Migrant.Generators,GeneratorHelper,D:\research\architectureSmells\repos\antmicro_Migrant\Migrant\Generators\GeneratorHelper.cs,PushIntegerOntoStack,The following statement contains a magic number: switch(value)              {              case -1:                  generator.Emit(OpCodes.Ldc_I4_M1);                  break;              case 0:                  generator.Emit(OpCodes.Ldc_I4_0);                  break;              case 1:                  generator.Emit(OpCodes.Ldc_I4_1);                  break;              case 2:                  generator.Emit(OpCodes.Ldc_I4_2);                  break;              case 3:                  generator.Emit(OpCodes.Ldc_I4_3);                  break;              case 4:                  generator.Emit(OpCodes.Ldc_I4_4);                  break;              case 5:                  generator.Emit(OpCodes.Ldc_I4_5);                  break;              case 6:                  generator.Emit(OpCodes.Ldc_I4_6);                  break;              case 7:                  generator.Emit(OpCodes.Ldc_I4_7);                  break;              case 8:                  generator.Emit(OpCodes.Ldc_I4_8);                  break;              default:                  if(value > -129 && value < 128)                  {                      generator.Emit(OpCodes.Ldc_I4_S' value);                  }                  else                  {                      generator.Emit(OpCodes.Ldc_I4' value);                  }                  break;              }
Magic Number,Antmicro.Migrant.Generators,GeneratorHelper,D:\research\architectureSmells\repos\antmicro_Migrant\Migrant\Generators\GeneratorHelper.cs,PushIntegerOntoStack,The following statement contains a magic number: switch(value)              {              case -1:                  generator.Emit(OpCodes.Ldc_I4_M1);                  break;              case 0:                  generator.Emit(OpCodes.Ldc_I4_0);                  break;              case 1:                  generator.Emit(OpCodes.Ldc_I4_1);                  break;              case 2:                  generator.Emit(OpCodes.Ldc_I4_2);                  break;              case 3:                  generator.Emit(OpCodes.Ldc_I4_3);                  break;              case 4:                  generator.Emit(OpCodes.Ldc_I4_4);                  break;              case 5:                  generator.Emit(OpCodes.Ldc_I4_5);                  break;              case 6:                  generator.Emit(OpCodes.Ldc_I4_6);                  break;              case 7:                  generator.Emit(OpCodes.Ldc_I4_7);                  break;              case 8:                  generator.Emit(OpCodes.Ldc_I4_8);                  break;              default:                  if(value > -129 && value < 128)                  {                      generator.Emit(OpCodes.Ldc_I4_S' value);                  }                  else                  {                      generator.Emit(OpCodes.Ldc_I4' value);                  }                  break;              }
Magic Number,Antmicro.Migrant.VersionTolerance,AssemblyDescriptor,D:\research\architectureSmells\repos\antmicro_Migrant\Migrant\VersionTolerance\AssemblyDescriptor.cs,Read,The following statement contains a magic number: switch(tokenLength)              {              case 0:                  Token = new byte[0];                  break;              case 8:                  Token = reader.PrimitiveReader.ReadBytes(8);                  break;              default:                  throw new ArgumentException("Wrong token length!");              }
Magic Number,Antmicro.Migrant.VersionTolerance,AssemblyDescriptor,D:\research\architectureSmells\repos\antmicro_Migrant\Migrant\VersionTolerance\AssemblyDescriptor.cs,Read,The following statement contains a magic number: switch(tokenLength)              {              case 0:                  Token = new byte[0];                  break;              case 8:                  Token = reader.PrimitiveReader.ReadBytes(8);                  break;              default:                  throw new ArgumentException("Wrong token length!");              }
Missing Default,Antmicro.Migrant,ObjectReader,D:\research\architectureSmells\repos\antmicro_Migrant\Migrant\ObjectReader.cs,ReadObjectInnerUsingReflection,The following switch statement is missing a default case: switch(GetCreationWay(actualType' objectReader.treatCollectionAsUserObject))              {              case CreationWay.Null:                  objectReader.ReadNotPrecreated(actualType' objectId);                  break;              case CreationWay.DefaultCtor:                  objectReader.UpdateElements(actualType' objectId);                  break;              case CreationWay.Uninitialized:                  objectReader.UpdateFields(actualType' objectReader.GetObjectByReferenceId(objectId));                  break;              }
Missing Default,Antmicro.Migrant,ObjectReader,D:\research\architectureSmells\repos\antmicro_Migrant\Migrant\ObjectReader.cs,CreateObjectUsingReflection,The following switch statement is missing a default case: switch(GetCreationWay(type' treatCollectionAsUserObject))              {                  case CreationWay.Null:                  break;                  case CreationWay.DefaultCtor:                  result = Activator.CreateInstance(type' true);                  break;                  case CreationWay.Uninitialized:                  result = FormatterServices.GetUninitializedObject(type);                  break;              }
Missing Default,Antmicro.Migrant,ObjectWriter,D:\research\architectureSmells\repos\antmicro_Migrant\Migrant\ObjectWriter.cs,WriteField,The following switch statement is missing a default case: switch(serializationType)              {              case SerializationType.Transient:                  break;              case SerializationType.Value:                  WriteValueType(formalType' value);                  break;              case SerializationType.Reference:                  CheckForNullOrTransientnessAndWriteDeferredReference(value' formalType);                  break;              }
Missing Default,Antmicro.Migrant,PrimitiveReader,D:\research\architectureSmells\repos\antmicro_Migrant\Migrant\PrimitiveReader.cs,ReadTimeSpan,The following switch statement is missing a default case: switch(type)              {              case Helpers.TickIndicator:                  return TimeSpan.FromTicks(ReadInt64());              }
Missing Default,Antmicro.Migrant.Generators,WriteMethodGenerator,D:\research\architectureSmells\repos\antmicro_Migrant\Migrant\Generators\WriteMethodGenerator.cs,GenerateWriteField,The following switch statement is missing a default case: switch(Helpers.GetSerializationType(formalType))              {              case SerializationType.Transient:                  // just omit it                  return;              case SerializationType.Value:                  GenerateWriteValue(context' valueLocal' formalType);                  break;              case SerializationType.Reference:                  GenerateWriteDeferredReference(context' valueLocal' formalType);                  break;              }
Missing Default,Antmicro.Migrant.Generators,ReadMethodGenerator,D:\research\architectureSmells\repos\antmicro_Migrant\Migrant\Generators\ReadMethodGenerator.cs,GenerateReadObjectInner,The following switch statement is missing a default case: switch(ObjectReader.GetCreationWay(formalType' context.TreatCollectionAsUserObject))              {              case ObjectReader.CreationWay.Null:                  GenerateReadNotPrecreated(context' formalType' objectIdLocal);                  break;              case ObjectReader.CreationWay.DefaultCtor:                  GenerateUpdateElements(context' formalType' objectIdLocal);                  break;              case ObjectReader.CreationWay.Uninitialized:                  GenerateUpdateFields(context' formalType' objectIdLocal);                  break;              }
Missing Default,Antmicro.Migrant.Generators,CreateObjectGenerator,D:\research\architectureSmells\repos\antmicro_Migrant\Migrant\Generators\CreateObjectGenerator.cs,TryFillBody,The following switch statement is missing a default case: switch(creationWay)              {                  case ObjectReader.CreationWay.DefaultCtor:                  generator.PushIntegerOntoStack(1);                  generator.Call(() => Activator.CreateInstance(type' default(bool)));                  break;                  case ObjectReader.CreationWay.Uninitialized:                  generator.Call(() => FormatterServices.GetUninitializedObject(type));                  break;              }
