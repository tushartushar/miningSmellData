Implementation smell,Namespace,Class,File,Method,Description
Long Method,Antmicro.Migrant,PrimitiveWriter,D:\newReposJune17\antmicro_Migrant\Migrant\PrimitiveWriter.cs,InnerWriteInteger,The method has 60 lines of code.
Long Method,Antmicro.Migrant.Generators,ReadMethodGenerator,D:\newReposJune17\antmicro_Migrant\Migrant\Generators\ReadMethodGenerator.cs,GenerateReadField,The method has 99 lines of code.
Long Method,Antmicro.Migrant.Generators,ReadMethodGenerator,D:\newReposJune17\antmicro_Migrant\Migrant\Generators\ReadMethodGenerator.cs,GenerateReadArray,The method has 86 lines of code.
Long Method,Antmicro.Migrant.Generators,TouchInlinedObjectGenerator,D:\newReposJune17\antmicro_Migrant\Migrant\Generators\TouchInlinedObjectGenerator.cs,InnerGenerate,The method has 70 lines of code.
Complex Method,Antmicro.Migrant,Helpers,D:\newReposJune17\antmicro_Migrant\Migrant\Helpers.cs,GetTypeOfGenericType,Cyclomatic complexity of the method is 8
Complex Method,Antmicro.Migrant,ObjectReader,D:\newReposJune17\antmicro_Migrant\Migrant\ObjectReader.cs,ReadObject,Cyclomatic complexity of the method is 10
Complex Method,Antmicro.Migrant,ObjectReader,D:\newReposJune17\antmicro_Migrant\Migrant\ObjectReader.cs,ReadObjectInnerUsingReflection,Cyclomatic complexity of the method is 9
Complex Method,Antmicro.Migrant,ObjectReader,D:\newReposJune17\antmicro_Migrant\Migrant\ObjectReader.cs,ReadField,Cyclomatic complexity of the method is 7
Complex Method,Antmicro.Migrant,ObjectReader,D:\newReposJune17\antmicro_Migrant\Migrant\ObjectReader.cs,FillCollection,Cyclomatic complexity of the method is 7
Complex Method,Antmicro.Migrant,ObjectReader,D:\newReposJune17\antmicro_Migrant\Migrant\ObjectReader.cs,ReadFullTypeDescriptor,Cyclomatic complexity of the method is 9
Complex Method,Antmicro.Migrant,ObjectReader,D:\newReposJune17\antmicro_Migrant\Migrant\ObjectReader.cs,CreateObjectUsingReflection,Cyclomatic complexity of the method is 8
Complex Method,Antmicro.Migrant,ObjectWriter,D:\newReposJune17\antmicro_Migrant\Migrant\ObjectWriter.cs,TouchAndWriteTypeIdWithFullStamp,Cyclomatic complexity of the method is 8
Complex Method,Antmicro.Migrant,ObjectWriter,D:\newReposJune17\antmicro_Migrant\Migrant\ObjectWriter.cs,WriteSpecialObject,Cyclomatic complexity of the method is 7
Complex Method,Antmicro.Migrant,ObjectWriter,D:\newReposJune17\antmicro_Migrant\Migrant\ObjectWriter.cs,WriteField,Cyclomatic complexity of the method is 8
Complex Method,Antmicro.Migrant,Serializer,D:\newReposJune17\antmicro_Migrant\Migrant\Serializer.cs,ThrowOnWrongResult,Cyclomatic complexity of the method is 12
Complex Method,Antmicro.Migrant.Utilities,Variable,D:\newReposJune17\antmicro_Migrant\Migrant\Utilities\Variable.cs,Variable,Cyclomatic complexity of the method is 15
Complex Method,Antmicro.Migrant.Generators,WriteMethodGenerator,D:\newReposJune17\antmicro_Migrant\Migrant\Generators\WriteMethodGenerator.cs,GenerateWriteField,Cyclomatic complexity of the method is 7
Complex Method,Antmicro.Migrant.Generators,ReadMethodGenerator,D:\newReposJune17\antmicro_Migrant\Migrant\Generators\ReadMethodGenerator.cs,GenerateReadObjectInner,Cyclomatic complexity of the method is 9
Complex Method,Antmicro.Migrant.Generators,ReadMethodGenerator,D:\newReposJune17\antmicro_Migrant\Migrant\Generators\ReadMethodGenerator.cs,GenerateReadField,Cyclomatic complexity of the method is 14
Complex Method,Antmicro.Migrant.Generators,ReadMethodGenerator,D:\newReposJune17\antmicro_Migrant\Migrant\Generators\ReadMethodGenerator.cs,GenerateUpdateStructFields,Cyclomatic complexity of the method is 7
Complex Method,Antmicro.Migrant.Generators,GeneratorHelper,D:\newReposJune17\antmicro_Migrant\Migrant\Generators\GeneratorHelper.cs,PushLocalValueOntoStack,Cyclomatic complexity of the method is 16
Complex Method,Antmicro.Migrant.Generators,GeneratorHelper,D:\newReposJune17\antmicro_Migrant\Migrant\Generators\GeneratorHelper.cs,StoreLocalValueFromStack,Cyclomatic complexity of the method is 16
Complex Method,Antmicro.Migrant.Generators,GeneratorHelper,D:\newReposJune17\antmicro_Migrant\Migrant\Generators\GeneratorHelper.cs,PushIntegerOntoStack,Cyclomatic complexity of the method is 34
Complex Method,Antmicro.Migrant.Generators,CreateObjectGenerator,D:\newReposJune17\antmicro_Migrant\Migrant\Generators\CreateObjectGenerator.cs,TryFillBody,Cyclomatic complexity of the method is 8
Complex Method,Antmicro.Migrant.Generators,CompletedGenerator,D:\newReposJune17\antmicro_Migrant\Migrant\Generators\CompletedGenerator.cs,GenerateCallPostDeserializationHooks,Cyclomatic complexity of the method is 9
Complex Method,Antmicro.Migrant.Generators,CallPostSerializationHooksMethodGenerator,D:\newReposJune17\antmicro_Migrant\Migrant\Generators\CallPostSerializationHooksMethodGenerator.cs,InnerGenerate,Cyclomatic complexity of the method is 7
Complex Method,Antmicro.Migrant.VersionTolerance,AssemblyDescriptor,D:\newReposJune17\antmicro_Migrant\Migrant\VersionTolerance\AssemblyDescriptor.cs,Read,Cyclomatic complexity of the method is 8
Complex Method,Antmicro.Migrant.VersionTolerance,TypeFullDescriptor,D:\newReposJune17\antmicro_Migrant\Migrant\VersionTolerance\TypeFullDescriptor.cs,VerifyStructure,Cyclomatic complexity of the method is 12
Long Parameter List,Antmicro.Migrant,Helpers,D:\newReposJune17\antmicro_Migrant\Migrant\Helpers.cs,ReadOrThrow,The method has 4 parameters.
Long Parameter List,Antmicro.Migrant,ObjectReader,D:\newReposJune17\antmicro_Migrant\Migrant\ObjectReader.cs,ObjectReader,The method has 10 parameters.
Long Parameter List,Antmicro.Migrant,ObjectReader,D:\newReposJune17\antmicro_Migrant\Migrant\ObjectReader.cs,FillArrayRowRecursive,The method has 4 parameters.
Long Parameter List,Antmicro.Migrant,ObjectWriter,D:\newReposJune17\antmicro_Migrant\Migrant\ObjectWriter.cs,ObjectWriter,The method has 10 parameters.
Long Parameter List,Antmicro.Migrant,ObjectWriter,D:\newReposJune17\antmicro_Migrant\Migrant\ObjectWriter.cs,WriteArrayRowRecursive,The method has 4 parameters.
Long Parameter List,Antmicro.Migrant.Customization,Settings,D:\newReposJune17\antmicro_Migrant\Migrant\Customization\Settings.cs,Settings,The method has 10 parameters.
Long Parameter List,Antmicro.Migrant.Customization,Settings,D:\newReposJune17\antmicro_Migrant\Migrant\Customization\Settings.cs,With,The method has 9 parameters.
Long Parameter List,Antmicro.Migrant.Generators,WriteMethodGenerator,D:\newReposJune17\antmicro_Migrant\Migrant\Generators\WriteMethodGenerator.cs,GenerateInvokeCallback,The method has 4 parameters.
Long Parameter List,Antmicro.Migrant.Generators,WriteMethodGenerator,D:\newReposJune17\antmicro_Migrant\Migrant\Generators\WriteMethodGenerator.cs,GenerateAddCallbackToInvokeList,The method has 4 parameters.
Long Parameter List,Antmicro.Migrant.Generators,WriteMethodGenerator,D:\newReposJune17\antmicro_Migrant\Migrant\Generators\WriteMethodGenerator.cs,GenerateSpecialWrite,The method has 4 parameters.
Long Parameter List,Antmicro.Migrant.Generators,WriteMethodGenerator,D:\newReposJune17\antmicro_Migrant\Migrant\Generators\WriteMethodGenerator.cs,GenerateWriteMultidimensionalArray,The method has 4 parameters.
Long Parameter List,Antmicro.Migrant.Generators,WriteMethodGenerator,D:\newReposJune17\antmicro_Migrant\Migrant\Generators\WriteMethodGenerator.cs,GenerateArrayWriteLoop,The method has 9 parameters.
Long Parameter List,Antmicro.Migrant.Generators,WriteMethodGenerator,D:\newReposJune17\antmicro_Migrant\Migrant\Generators\WriteMethodGenerator.cs,GenerateTryWriteObjectInline,The method has 5 parameters.
Long Parameter List,Antmicro.Migrant.Generators,WriteMethodGenerator,D:\newReposJune17\antmicro_Migrant\Migrant\Generators\WriteMethodGenerator.cs,GenerateInvokeCallbacksAndExecute,The method has 6 parameters.
Long Parameter List,Antmicro.Migrant.Generators,ReadMethodGenerator,D:\newReposJune17\antmicro_Migrant\Migrant\Generators\ReadMethodGenerator.cs,GenerateFillCollection,The method has 4 parameters.
Long Parameter List,Antmicro.Migrant.Generators,ReadMethodGenerator,D:\newReposJune17\antmicro_Migrant\Migrant\Generators\ReadMethodGenerator.cs,GenerateReadDelegateStaticHelper,The method has 5 parameters.
Long Parameter List,Antmicro.Migrant.Generators,GeneratorHelper,D:\newReposJune17\antmicro_Migrant\Migrant\Generators\GeneratorHelper.cs,GenerateLoop,The method has 4 parameters.
Long Parameter List,Antmicro.Migrant.Generators,GeneratorHelper,D:\newReposJune17\antmicro_Migrant\Migrant\Generators\GeneratorHelper.cs,GenerateLoop,The method has 5 parameters.
Long Parameter List,Antmicro.Migrant.Generators,CreateObjectGenerator,D:\newReposJune17\antmicro_Migrant\Migrant\Generators\CreateObjectGenerator.cs,TryFillBody,The method has 4 parameters.
Long Parameter List,Antmicro.Migrant.Generators,ReaderGenerationContext,D:\newReposJune17\antmicro_Migrant\Migrant\Generators\ReaderGenerationContext.cs,ReaderGenerationContext,The method has 5 parameters.
Long Parameter List,Antmicro.Migrant.Generators,CompletedGenerator,D:\newReposJune17\antmicro_Migrant\Migrant\Generators\CompletedGenerator.cs,CompletedGenerator,The method has 5 parameters.
Long Parameter List,Antmicro.Migrant.Generators,WriterGenerationContext,D:\newReposJune17\antmicro_Migrant\Migrant\Generators\WriterGenerationContext.cs,WriterGenerationContext,The method has 4 parameters.
Long Parameter List,Antmicro.Migrant.Generators,SurrogateObjectIfNeededMethodGenerator,D:\newReposJune17\antmicro_Migrant\Migrant\Generators\SurrogateObjectIfNeededMethodGenerator.cs,SurrogateObjectIfNeededMethodGenerator,The method has 4 parameters.
Long Parameter List,Antmicro.Migrant.Generators,HandleNewReferenceMethodGenerator,D:\newReposJune17\antmicro_Migrant\Migrant\Generators\HandleNewReferenceMethodGenerator.cs,HandleNewReferenceMethodGenerator,The method has 6 parameters.
Long Parameter List,Antmicro.Migrant.Generators,DynamicWriteMethodGenerator,D:\newReposJune17\antmicro_Migrant\Migrant\Generators\DynamicWriteMethodGenerator.cs,DynamicWriteMethodGenerator,The method has 5 parameters.
Long Parameter List,Antmicro.Migrant.Generators,DynamicReadMethodGenerator,D:\newReposJune17\antmicro_Migrant\Migrant\Generators\DynamicReadMethodGenerator.cs,DynamicReadMethodGenerator,The method has 6 parameters.
Long Identifier,Antmicro.Migrant,Helpers,D:\newReposJune17\antmicro_Migrant\Migrant\Helpers.cs,GetTypeOfGenericType,The length of the parameter hasGenericArgumentsPointingToParent is 35.
Long Identifier,Antmicro.Migrant,Helpers,D:\newReposJune17\antmicro_Migrant\Migrant\Helpers.cs,GetTypeOfGenericType,The length of the parameter hasGenericArgumentsNotPointingToParent is 38.
Long Identifier,Antmicro.Migrant,ObjectReader,D:\newReposJune17\antmicro_Migrant\Migrant\ObjectReader.cs,ReadFullTypeDescriptor,The length of the parameter containsAnyFixedGenericArguments is 32.
Long Identifier,Antmicro.Migrant,ObjectWriter,D:\newReposJune17\antmicro_Migrant\Migrant\ObjectWriter.cs,TouchAndWriteTypeIdWithFullStamp,The length of the parameter genericTypeDefinitionDescriptor is 31.
Long Identifier,Antmicro.Migrant.Generators,WriteMethodGenerator,D:\newReposJune17\antmicro_Migrant\Migrant\Generators\WriteMethodGenerator.cs,GenerateTryWriteObjectInline,The length of the parameter generatePreSerializationCallback is 32.
Long Identifier,Antmicro.Migrant.Generators,WriteMethodGenerator,D:\newReposJune17\antmicro_Migrant\Migrant\Generators\WriteMethodGenerator.cs,GenerateTryWriteObjectInline,The length of the parameter generatePostSerializationCallback is 33.
Long Identifier,Antmicro.Migrant.Generators,WriteMethodGenerator,D:\newReposJune17\antmicro_Migrant\Migrant\Generators\WriteMethodGenerator.cs,GenerateInvokeCallbacksAndExecute,The length of the parameter generatePreSerializationCallback is 32.
Long Identifier,Antmicro.Migrant.Generators,WriteMethodGenerator,D:\newReposJune17\antmicro_Migrant\Migrant\Generators\WriteMethodGenerator.cs,GenerateInvokeCallbacksAndExecute,The length of the parameter generatePostSerializationCallback is 33.
Long Identifier,Antmicro.Migrant.Generators,ReaderGenerationContext,D:\newReposJune17\antmicro_Migrant\Migrant\Generators\ReaderGenerationContext.cs,PushDeserializedObjectOntoStack,The length of the parameter pushReferenceIdOntoStackAction is 30.
Long Identifier,Antmicro.Migrant.Generators,CompletedGenerator,D:\newReposJune17\antmicro_Migrant\Migrant\Generators\CompletedGenerator.cs,CompletedGenerator,The length of the parameter callPostDeserializationCallback is 31.
Long Identifier,Antmicro.Migrant.Generators,HandleNewReferenceMethodGenerator,D:\newReposJune17\antmicro_Migrant\Migrant\Generators\HandleNewReferenceMethodGenerator.cs,HandleNewReferenceMethodGenerator,The length of the parameter generatePreSerializationCallback is 32.
Long Identifier,Antmicro.Migrant.Generators,HandleNewReferenceMethodGenerator,D:\newReposJune17\antmicro_Migrant\Migrant\Generators\HandleNewReferenceMethodGenerator.cs,HandleNewReferenceMethodGenerator,The length of the parameter generatePostSerializationCallback is 33.
Long Statement,Antmicro.Migrant,Helpers,D:\newReposJune17\antmicro_Migrant\Migrant\Helpers.cs,CanBeCreatedWithDataOnly,The length of the statement  "	return actualType == typeof(string) || actualType.IsValueType || actualType.IsArray || typeof(MulticastDelegate).IsAssignableFrom (actualType); " is 143.
Long Statement,Antmicro.Migrant,Helpers,D:\newReposJune17\antmicro_Migrant\Migrant\Helpers.cs,GetMethodsWithAttribute,The length of the statement  "	var derivedMethods = objectType.GetMethods (BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Static | BindingFlags.Instance | BindingFlags.DeclaredOnly).Where (x => x.IsDefined (attributeType' false)); " is 212.
Long Statement,Antmicro.Migrant,Helpers,D:\newReposJune17\antmicro_Migrant\Migrant\Helpers.cs,GetDelegateWithAttribute,The length of the statement  "	return methodsToInvoke.Select (x => (Action)Delegate.CreateDelegate (typeof(Action)' x.IsStatic ? null : o' x)).Aggregate ((x' y) => (Action)Delegate.Combine (x' y)); " is 166.
Long Statement,Antmicro.Migrant,Helpers,D:\newReposJune17\antmicro_Migrant\Migrant\Helpers.cs,GetAllFields,The length of the statement  "	return recursive ? t.GetFields (DefaultBindingFlags).Union (GetAllFields (t.BaseType)) : t.GetFields (DefaultBindingFlags); " is 123.
Long Statement,Antmicro.Migrant,Helpers,D:\newReposJune17\antmicro_Migrant\Migrant\Helpers.cs,GetImplicitConvertionOperatorInfo,The length of the statement  "	return typeof(TFrom).GetMethods (BindingFlags.Public | BindingFlags.Static).Single (x => x.Name == "op_Implicit" && x.GetParameters ().Count () == 1 && x.GetParameters ().ElementAt (0).ParameterType == typeof(TTo)); " is 215.
Long Statement,Antmicro.Migrant,ObjectReader,D:\newReposJune17\antmicro_Migrant\Migrant\ObjectReader.cs,ReadObject,The length of the statement  "		throw new InvalidDataException (string.Format ("Type {0} requested to be deserialized' however type {1} encountered in the stream."' typeof(T)' obj.GetType ())); " is 161.
Long Statement,Antmicro.Migrant,ObjectReader,D:\newReposJune17\antmicro_Migrant\Migrant\ObjectReader.cs,CloneContentUsingReflection,The length of the statement  "	foreach (var field in source.GetType ().GetFields (System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance)) { " is 177.
Long Statement,Antmicro.Migrant,ObjectReader,D:\newReposJune17\antmicro_Migrant\Migrant\ObjectReader.cs,FillCollection,The length of the statement  "	if (collectionType == typeof(Stack) || (collectionType.IsGenericType && collectionType.GetGenericTypeDefinition () == typeof(Stack<>))) { " is 137.
Long Statement,Antmicro.Migrant,ObjectReader,D:\newReposJune17\antmicro_Migrant\Migrant\ObjectReader.cs,LoadAndVerifySpeciallySerializableAndVerify,The length of the statement  "		throw new InvalidOperationException (string.Format ("Stream corruption by '{0}'' incorrent magic {1} when {2} expected."' obj.GetType ()' serializedLength' afterPosition - beforePosition)); " is 189.
Long Statement,Antmicro.Migrant,ObjectWriter,D:\newReposJune17\antmicro_Migrant\Migrant\ObjectWriter.cs,HandleNewReference,The length of the statement  "	var objectForSurrogatesIndex = objectsForSurrogates == null ? -1 : objectsForSurrogates.FindMatchingIndex (o.GetType ()); " is 121.
Long Statement,Antmicro.Migrant,ObjectWriter,D:\newReposJune17\antmicro_Migrant\Migrant\ObjectWriter.cs,CheckLegality,The length of the statement  "		throw new InvalidOperationException ("Pointer or ThreadLocal or SpinLock encountered during serialization. In order to obtain detailed information including classes path that lead here' please use generated version of serializer."); " is 232.
Long Statement,Antmicro.Migrant,ObjectWriter,D:\newReposJune17\antmicro_Migrant\Migrant\ObjectWriter.cs,CheckLegality,The length of the statement  "		throw new InvalidOperationException ("Pointer or ThreadLocal or SpinLock encountered during serialization. The classes path that lead to it was: " + path); " is 155.
Long Statement,Antmicro.Migrant,ObjectWriter,D:\newReposJune17\antmicro_Migrant\Migrant\ObjectWriter.cs,IsTypeIllegal,The length of the statement  "	return type.IsPointer || type == typeof(IntPtr) || type == typeof(Pointer) || (type.IsGenericType && type.GetGenericTypeDefinition () == typeof(ThreadLocal<>)) || type == typeof(SpinLock); " is 188.
Long Statement,Antmicro.Migrant,ObjectWriter,D:\newReposJune17\antmicro_Migrant\Migrant\ObjectWriter.cs,TouchAndWriteTypeIdWithFullStamp,The length of the statement  "		} else if (typeOfUnderlyingType == Helpers.TypeOfGenericType.ClosedGenericType || typeOfUnderlyingType == Helpers.TypeOfGenericType.FixedNestedGenericType) { " is 157.
Long Statement,Antmicro.Migrant,PrimitiveReader,D:\newReposJune17\antmicro_Migrant\Migrant\PrimitiveReader.cs,ReadDecimal,The length of the statement  "	return new Decimal (lo' mid' hi' (scale & DecimalSignMask) != 0' (byte)((scale & DecimalScaleMask) >> DecimalScaleShift)); " is 122.
Long Statement,Antmicro.Migrant,Serializer,D:\newReposJune17\antmicro_Migrant\Migrant\Serializer.cs,DeepClone,The length of the statement  "		throw new InvalidOperationException (string.Format ("Internal error in serializer: {0} bytes were written' but only {1} were read."' position' stream.Position)); " is 161.
Long Statement,Antmicro.Migrant,Serializer,D:\newReposJune17\antmicro_Migrant\Migrant\Serializer.cs,CreateWriter,The length of the statement  "			var generator = new HandleNewReferenceMethodGenerator (t' objectsForSurrogates' settings.DisableTypeStamping' settings.TreatCollectionAsUserObject' OnPreSerialization != null' OnPostSerialization != null); " is 205.
Long Statement,Antmicro.Migrant,Serializer,D:\newReposJune17\antmicro_Migrant\Migrant\Serializer.cs,CreateWriter,The length of the statement  "		writeMethods.surrogateObjectIfNeededMethodsProvider = new DynamicMethodProvider<SurrogateObjectIfNeededDelegate> (t => { " is 120.
Long Statement,Antmicro.Migrant,Serializer,D:\newReposJune17\antmicro_Migrant\Migrant\Serializer.cs,CreateWriter,The length of the statement  "			var generator = new SurrogateObjectIfNeededMethodGenerator (t' surrogatesForObjects' settings.DisableTypeStamping' settings.TreatCollectionAsUserObject); " is 153.
Long Statement,Antmicro.Migrant,Serializer,D:\newReposJune17\antmicro_Migrant\Migrant\Serializer.cs,CreateWriter,The length of the statement  "			var generator = new WriteReferenceMethodGenerator (t' settings.DisableTypeStamping' settings.TreatCollectionAsUserObject); " is 122.
Long Statement,Antmicro.Migrant,Serializer,D:\newReposJune17\antmicro_Migrant\Migrant\Serializer.cs,CreateWriter,The length of the statement  "		writeMethods.callPostSerializationHooksMethodsProvider = new DynamicMethodProvider<CallPostSerializationHooksMethodDelegate> (t => { " is 132.
Long Statement,Antmicro.Migrant,Serializer,D:\newReposJune17\antmicro_Migrant\Migrant\Serializer.cs,CreateWriter,The length of the statement  "			var generator = new CallPostSerializationHooksMethodGenerator (t' settings.DisableTypeStamping' settings.TreatCollectionAsUserObject); " is 134.
Long Statement,Antmicro.Migrant,Serializer,D:\newReposJune17\antmicro_Migrant\Migrant\Serializer.cs,CreateWriter,The length of the statement  "	return new ObjectWriter (stream' writeMethods' OnPreSerialization' OnPostSerialization' surrogatesForObjects' objectsForSurrogates' settings.TreatCollectionAsUserObject' settings.UseBuffering' settings.DisableTypeStamping' settings.ReferencePreservation); " is 255.
Long Statement,Antmicro.Migrant,Serializer,D:\newReposJune17\antmicro_Migrant\Migrant\Serializer.cs,GetReflectionBasedWriteMethods,The length of the statement  "	writeMethods.surrogateObjectIfNeededMethodsProvider = new DynamicMethodProvider<SurrogateObjectIfNeededDelegate> (t => { " is 120.
Long Statement,Antmicro.Migrant,Serializer,D:\newReposJune17\antmicro_Migrant\Migrant\Serializer.cs,GetReflectionBasedWriteMethods,The length of the statement  "	writeMethods.callPostSerializationHooksMethodsProvider = new DynamicMethodProvider<CallPostSerializationHooksMethodDelegate> (t => { " is 132.
Long Statement,Antmicro.Migrant,Serializer,D:\newReposJune17\antmicro_Migrant\Migrant\Serializer.cs,CreateReader,The length of the statement  "			var generator = new TouchInlinedObjectGenerator (t' settings.DisableTypeStamping' settings.TreatCollectionAsUserObject); " is 120.
Long Statement,Antmicro.Migrant,Serializer,D:\newReposJune17\antmicro_Migrant\Migrant\Serializer.cs,CreateReader,The length of the statement  "			var generator = new CompletedGenerator (t' objectsForSurrogates' settings.DisableTypeStamping' settings.TreatCollectionAsUserObject' OnPostDeserialization != null); " is 164.
Long Statement,Antmicro.Migrant,Serializer,D:\newReposJune17\antmicro_Migrant\Migrant\Serializer.cs,CreateReader,The length of the statement  "	return new ObjectReader (stream' readMethods' objectsForSurrogates' OnPostDeserialization' settings.TreatCollectionAsUserObject' settings.VersionTolerance' settings.UseBuffering' settings.DisableTypeStamping' settings.ReferencePreservation' settings.ForceStampVerification); " is 274.
Long Statement,Antmicro.Migrant,FieldDescriptor,D:\newReposJune17\antmicro_Migrant\Migrant\VersionTolerance\FieldDescriptor.cs,ReadFrom,The length of the statement  "	UnderlyingFieldInfo = DeclaringType.UnderlyingType.GetField (Name' BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic); " is 137.
Long Statement,Antmicro.Migrant,FieldDescriptor,D:\newReposJune17\antmicro_Migrant\Migrant\VersionTolerance\FieldDescriptor.cs,Equals,The length of the statement  "		return fd.Name == Name && fd.FieldType.Equals (FieldType) && fd.IsTransient == IsTransient && fd.DeclaringType.Equals (DeclaringType); " is 134.
Long Statement,Antmicro.Migrant.Utilities,SwapList,D:\newReposJune17\antmicro_Migrant\Migrant\Utilities\SwapList.cs,IsMatch,The length of the statement  "	if (typeOfCandidateType == Helpers.TypeOfGenericType.FixedNestedGenericType || typeOfCandidateType == Helpers.TypeOfGenericType.PartiallyFixedNestedGenericType) { " is 162.
Long Statement,Antmicro.Migrant.Generators,WriteMethodGenerator,D:\newReposJune17\antmicro_Migrant\Migrant\Generators\WriteMethodGenerator.cs,GenerateInner,The length of the statement  "		dynamicMethod = new DynamicMethod (string.Format ("WriteArray{0}_{1}"' methodNo' type.Name)' returnType' parameterTypes' true); " is 127.
Long Statement,Antmicro.Migrant.Generators,WriteMethodGenerator,D:\newReposJune17\antmicro_Migrant\Migrant\Generators\WriteMethodGenerator.cs,GenerateInner,The length of the statement  "	            GeneratorHelper.DumpToLibrary<WriteMethodDelegate>(context' c => GenerateDynamicCode((WriterGenerationContext)c' type)' type.Name);" is 131.
Long Statement,Antmicro.Migrant.Generators,WriteMethodGenerator,D:\newReposJune17\antmicro_Migrant\Migrant\Generators\WriteMethodGenerator.cs,GenerateDynamicCode,The length of the statement  "	var exceptionBlockNeeded = Helpers.GetMethodsWithAttribute (typeof(PostSerializationAttribute)' typeToGenerate).Any () || Helpers.GetMethodsWithAttribute (typeof(LatePostSerializationAttribute)' typeToGenerate).Any (); " is 218.
Long Statement,Antmicro.Migrant.Generators,WriteMethodGenerator,D:\newReposJune17\antmicro_Migrant\Migrant\Generators\WriteMethodGenerator.cs,GenerateWriteMultidimensionalArray,The length of the statement  "	GenerateArrayWriteLoop (context' 0' rank' indexLocals' lengthLocals' arrayLocal' currentElementVariable' actualType' elementType); " is 130.
Long Statement,Antmicro.Migrant.Generators,WriteMethodGenerator,D:\newReposJune17\antmicro_Migrant\Migrant\Generators\WriteMethodGenerator.cs,GenerateArrayWriteLoop,The length of the statement  "			GenerateArrayWriteLoop (context' currentDimension + 1' rank' indexLocals' lengthLocals' arrayLocal' currentElementVariable' arrayType' elementType); " is 148.
Long Statement,Antmicro.Migrant.Generators,WriteMethodGenerator,D:\newReposJune17\antmicro_Migrant\Migrant\Generators\WriteMethodGenerator.cs,GenerateWriteDelegate,The length of the statement  "		context.Generator.PushPropertyValueOntoStack<ObjectWriter' IdentifiedElementsDictionary<MethodDescriptor>> (x => x.Methods); " is 124.
Long Statement,Antmicro.Migrant.Generators,WriteMethodGenerator,D:\newReposJune17\antmicro_Migrant\Migrant\Generators\WriteMethodGenerator.cs,GenerateTryWriteObjectInline,The length of the statement  "		GenerateInvokeCallbacksAndExecute (context' generatePreSerializationCallback' generatePostSerializationCallback' valueLocal' actualType' c => { " is 143.
Long Statement,Antmicro.Migrant.Generators,ReadMethodGenerator,D:\newReposJune17\antmicro_Migrant\Migrant\Generators\ReadMethodGenerator.cs,GenerateInner,The length of the statement  "	var context = new ReaderGenerationContext (generator' disableStamping' treatCollectionAsUserObject' OpCodes.Ldarg_2' OpCodes.Ldarg_0); " is 134.
Long Statement,Antmicro.Migrant.Generators,ReadMethodGenerator,D:\newReposJune17\antmicro_Migrant\Migrant\Generators\ReadMethodGenerator.cs,GenerateUpdateElements,The length of the statement  "		context.Generator.GenerateCodeCall<ISpeciallySerializable' PrimitiveReader> (ObjectReader.LoadAndVerifySpeciallySerializableAndVerify); " is 135.
Long Statement,Antmicro.Migrant.Generators,ReadMethodGenerator,D:\newReposJune17\antmicro_Migrant\Migrant\Generators\ReadMethodGenerator.cs,GenerateFillCollection,The length of the statement  "	if (collectionType == typeof(Stack) || (collectionType.IsGenericType && collectionType.GetGenericTypeDefinition () == typeof(Stack<>))) { " is 137.
Long Statement,Antmicro.Migrant.Generators,ReadMethodGenerator,D:\newReposJune17\antmicro_Migrant\Migrant\Generators\ReadMethodGenerator.cs,GenerateUpdateFields,The length of the statement  "	var fields = context.DisableStamping ? ((TypeSimpleDescriptor)formalType).FieldsToDeserialize : ((TypeFullDescriptor)formalType).FieldsToDeserialize; " is 149.
Long Statement,Antmicro.Migrant.Generators,ReadMethodGenerator,D:\newReposJune17\antmicro_Migrant\Migrant\Generators\ReadMethodGenerator.cs,GenerateReadField,The length of the statement  "		context.Generator.Emit (OpCodes.Call' typeof(Enum).GetMethod ("ToObject"' BindingFlags.Static | BindingFlags.Public' null' new[] { " is 130.
Long Statement,Antmicro.Migrant.Generators,ReadMethodGenerator,D:\newReposJune17\antmicro_Migrant\Migrant\Generators\ReadMethodGenerator.cs,GenerateUpdateStructFields,The length of the statement  "	var fields = context.DisableStamping ? ((TypeSimpleDescriptor)formalType).FieldsToDeserialize : ((TypeFullDescriptor)formalType).FieldsToDeserialize; " is 149.
Long Statement,Antmicro.Migrant.Generators,ReadMethodGenerator,D:\newReposJune17\antmicro_Migrant\Migrant\Generators\ReadMethodGenerator.cs,GenerateReadArray,The length of the statement  "	var lengthsLocal = isMultidimensional ? context.Generator.DeclareLocal (typeof(int[])) : context.Generator.DeclareLocal (typeof(int)); " is 134.
Long Statement,Antmicro.Migrant.Generators,ReadMethodGenerator,D:\newReposJune17\antmicro_Migrant\Migrant\Generators\ReadMethodGenerator.cs,GenerateReadArray,The length of the statement  "	var positionLocal = isMultidimensional ? context.Generator.DeclareLocal (typeof(int[])) : context.Generator.DeclareLocal (typeof(int)); " is 135.
Long Statement,Antmicro.Migrant.Generators,ReadMethodGenerator,D:\newReposJune17\antmicro_Migrant\Migrant\Generators\ReadMethodGenerator.cs,GenerateReadDelegate,The length of the statement  "		context.Generator.GenerateCodeCall<MethodInfo' Type' object' AutoResizingList<object>' int> (GenerateReadDelegateStaticHelper); " is 127.
Long Statement,Antmicro.Migrant.Generators,ReadMethodGenerator,D:\newReposJune17\antmicro_Migrant\Migrant\Generators\ReadMethodGenerator.cs,GenerateReadMethod,The length of the statement  "	context.Generator.Emit (OpCodes.Call' Helpers.GetPropertyGetterInfo<ObjectReader' IdentifiedElementsList<MethodDescriptor>> (or => or.Methods)); " is 144.
Long Statement,Antmicro.Migrant.Generators,ReadMethodGenerator,D:\newReposJune17\antmicro_Migrant\Migrant\Generators\ReadMethodGenerator.cs,GenerateReadMethod,The length of the statement  "	context.Generator.Emit (OpCodes.Call' Helpers.GetMethodInfo<IdentifiedElementsList<MethodDescriptor>' MethodDescriptor> (or => or.Read ())); " is 140.
Long Statement,Antmicro.Migrant.Generators,ReadMethodGenerator,D:\newReposJune17\antmicro_Migrant\Migrant\Generators\ReadMethodGenerator.cs,GenerateReadMethod,The length of the statement  "	context.Generator.Emit (OpCodes.Call' Helpers.GetPropertyGetterInfo<MethodDescriptor' MethodInfo> (md => md.UnderlyingMethod)); " is 127.
Long Statement,Antmicro.Migrant.Generators,GeneratorHelper,D:\newReposJune17\antmicro_Migrant\Migrant\Generators\GeneratorHelper.cs,PushFieldInfoOntoStack,The length of the statement  "		generator.Emit (OpCodes.Call' Helpers.GetMethodInfo<object' object> (x => FieldInfo.GetFieldFromHandle (finfo.FieldHandle' new RuntimeTypeHandle ()))); " is 151.
Long Statement,Antmicro.Migrant.Generators,GeneratorHelper,D:\newReposJune17\antmicro_Migrant\Migrant\Generators\GeneratorHelper.cs,PushFieldInfoOntoStack,The length of the statement  "		generator.Emit (OpCodes.Call' Helpers.GetMethodInfo<object' object> (x => FieldInfo.GetFieldFromHandle (finfo.FieldHandle))); " is 125.
Long Statement,Antmicro.Migrant.Generators,TouchInlinedObjectGenerator,D:\newReposJune17\antmicro_Migrant\Migrant\Generators\TouchInlinedObjectGenerator.cs,InnerGenerate,The length of the statement  "		var lengthsLocal = isMultidimensional ? context.Generator.DeclareLocal (typeof(int[])) : context.Generator.DeclareLocal (typeof(int)); " is 134.
Long Statement,Antmicro.Migrant.Generators,ReaderGenerationContext,D:\newReposJune17\antmicro_Migrant\Migrant\Generators\ReaderGenerationContext.cs,WithGenerator,The length of the statement  "	return new ReaderGenerationContext (g' DisableStamping' TreatCollectionAsUserObject' objectIdArgument' objectReaderArgument); " is 125.
Long Statement,Antmicro.Migrant.Generators,CompletedGenerator,D:\newReposJune17\antmicro_Migrant\Migrant\Generators\CompletedGenerator.cs,GenerateCallPostDeserializationHooks,The length of the statement  "			context.Generator.Emit (OpCodes.Call' Helpers.GetMethodInfo<object' MethodBase> (x => MethodBase.GetMethodFromHandle (new RuntimeMethodHandle ()' new RuntimeTypeHandle ()))); " is 174.
Long Statement,Antmicro.Migrant.Generators,CompletedGenerator,D:\newReposJune17\antmicro_Migrant\Migrant\Generators\CompletedGenerator.cs,GenerateCallPostDeserializationHooks,The length of the statement  "			context.Generator.Emit (OpCodes.Call' Helpers.GetMethodInfo<object' MethodBase> (x => MethodBase.GetMethodFromHandle (new RuntimeMethodHandle ()))); " is 148.
Long Statement,Antmicro.Migrant.Generators,CompletedGenerator,D:\newReposJune17\antmicro_Migrant\Migrant\Generators\CompletedGenerator.cs,GenerateCallPostDeserializationHooks,The length of the statement  "		context.Generator.Emit (OpCodes.Call' Helpers.GetMethodInfo<object' Delegate> (x => Delegate.CreateDelegate (null' null' method))); " is 131.
Long Statement,Antmicro.Migrant.Generators,CompletedGenerator,D:\newReposJune17\antmicro_Migrant\Migrant\Generators\CompletedGenerator.cs,GenerateDesurrogate,The length of the statement  "	context.Generator.PushFieldValueOntoStack<Serializer.ReadMethods' DynamicMethodProvider<CloneMethodDelegate>> (x => x.cloneContentMehtodsProvider); " is 147.
Long Statement,Antmicro.Migrant.Generators,HandleNewReferenceMethodGenerator,D:\newReposJune17\antmicro_Migrant\Migrant\Generators\HandleNewReferenceMethodGenerator.cs,InnerGenerate,The length of the statement  "	if (WriteMethodGenerator.GenerateTryWriteObjectInline (context' generatePreSerializationCallback' generatePostSerializationCallback' value' type)) { " is 148.
Long Statement,Antmicro.Migrant.Generators,CallPostSerializationHooksMethodGenerator,D:\newReposJune17\antmicro_Migrant\Migrant\Generators\CallPostSerializationHooksMethodGenerator.cs,InnerGenerate,The length of the statement  "			context.Generator.Emit (OpCodes.Call' Helpers.GetMethodInfo<object' MethodBase> (x => MethodBase.GetMethodFromHandle (new RuntimeMethodHandle ()' new RuntimeTypeHandle ()))); " is 174.
Long Statement,Antmicro.Migrant.Generators,CallPostSerializationHooksMethodGenerator,D:\newReposJune17\antmicro_Migrant\Migrant\Generators\CallPostSerializationHooksMethodGenerator.cs,InnerGenerate,The length of the statement  "			context.Generator.Emit (OpCodes.Call' Helpers.GetMethodInfo<object' MethodBase> (x => MethodBase.GetMethodFromHandle (new RuntimeMethodHandle ()))); " is 148.
Long Statement,Antmicro.Migrant.Generators,CallPostSerializationHooksMethodGenerator,D:\newReposJune17\antmicro_Migrant\Migrant\Generators\CallPostSerializationHooksMethodGenerator.cs,InnerGenerate,The length of the statement  "		context.Generator.Emit (OpCodes.Call' Helpers.GetMethodInfo<object' Delegate> (x => Delegate.CreateDelegate (null' null' method))); " is 131.
Long Statement,Antmicro.Migrant.Generators,DynamicWriteMethodGenerator,D:\newReposJune17\antmicro_Migrant\Migrant\Generators\DynamicWriteMethodGenerator.cs,GenerateInner,The length of the statement  "	var context = new WriterGenerationContext (generator' disableStamping' treatCollectionAsUserObject' objectWriterArgument); " is 122.
Long Statement,Antmicro.Migrant.Generators,DynamicReadMethodGenerator,D:\newReposJune17\antmicro_Migrant\Migrant\Generators\DynamicReadMethodGenerator.cs,GenerateInner,The length of the statement  "	var context = new ReaderGenerationContext (generator' disableStamping' treatCollectionAsUserObject' objectIdArgument' objectReaderArgument); " is 140.
Long Statement,Antmicro.Migrant.VersionTolerance,StampHelpers,D:\newReposJune17\antmicro_Migrant\Migrant\VersionTolerance\StampHelpers.cs,IsStampNeeded,The length of the statement  "	return !Helpers.IsWriteableByPrimitiveWriter (type.UnderlyingType) && (!CollectionMetaToken.IsCollection (type) || treatCollectionAsUserObject); " is 144.
Long Statement,Antmicro.Migrant.VersionTolerance,AssemblyDescriptor,D:\newReposJune17\antmicro_Migrant\Migrant\VersionTolerance\AssemblyDescriptor.cs,CreateFullName,The length of the statement  "	FullName = string.Format ("{0}' Version={1}' Culture={2}' PublicKeyToken={3}"' Name' Version' CultureName' Token.Length == 0 ? "null" : String.Join (string.Empty' Token.Select (x => string.Format ("{0:x2}"' x)))); " is 213.
Long Statement,Antmicro.Migrant.VersionTolerance,ModuleDescriptor,D:\newReposJune17\antmicro_Migrant\Migrant\VersionTolerance\ModuleDescriptor.cs,GetHashCode,The length of the statement  "		return (Name != null ? Name.GetHashCode () : 0) ^ GUID.GetHashCode () ^ (ModuleAssembly != null ? ModuleAssembly.GetHashCode () : 0); " is 133.
Long Statement,Antmicro.Migrant.VersionTolerance,MethodDescriptor,D:\newReposJune17\antmicro_Migrant\Migrant\VersionTolerance\MethodDescriptor.cs,Read,The length of the statement  "			parameters [i] = genericType ? new TypeOrGenericTypeArgument (reader.PrimitiveReader.ReadInt32 ()) : new TypeOrGenericTypeArgument (reader.ReadType ().UnderlyingType); " is 167.
Long Statement,Antmicro.Migrant.VersionTolerance,MethodDescriptor,D:\newReposJune17\antmicro_Migrant\Migrant\VersionTolerance\MethodDescriptor.cs,Read,The length of the statement  "		UnderlyingMethod = type.GetMethods (BindingFlags.Instance | BindingFlags.Static | BindingFlags.Public | BindingFlags.NonPublic).SingleOrDefault (m => m.IsGenericMethod && m.GetGenericMethodDefinition ().Name == methodName && m.GetGenericArguments ().Length == genericArgumentsCount && CompareGenericArguments (m.GetGenericMethodDefinition ().GetParameters ()' parameters)); " is 373.
Long Statement,Antmicro.Migrant.VersionTolerance,MethodDescriptor,D:\newReposJune17\antmicro_Migrant\Migrant\VersionTolerance\MethodDescriptor.cs,Read,The length of the statement  "		UnderlyingMethod = type.GetMethod (methodName' BindingFlags.Instance | BindingFlags.Static | BindingFlags.Public | BindingFlags.NonPublic' null' types' null); " is 158.
Long Statement,Antmicro.Migrant.VersionTolerance,TypeFullDescriptor,D:\newReposJune17\antmicro_Migrant\Migrant\VersionTolerance\TypeFullDescriptor.cs,Equals,The length of the statement  "		return obj.UnderlyingType.FullName == UnderlyingType.FullName && obj.TypeModule.Equals (TypeModule' versionToleranceLevel); " is 123.
Long Statement,Antmicro.Migrant.VersionTolerance,TypeFullDescriptor,D:\newReposJune17\antmicro_Migrant\Migrant\VersionTolerance\TypeFullDescriptor.cs,CompareWith,The length of the statement  "		// why do we remove a field from current ones? if some field is still left after our operation' then field addition occured " is 123.
Long Statement,Antmicro.Migrant.VersionTolerance,TypeFullDescriptor,D:\newReposJune17\antmicro_Migrant\Migrant\VersionTolerance\TypeFullDescriptor.cs,VerifyStructure,The length of the statement  "			throw new VersionToleranceException (string.Format ("The class {2} was serialized with different module version id {0}' current one is {1}."' TypeModule.GUID' UnderlyingType.Module.ModuleVersionId' UnderlyingType.FullName)); " is 224.
Long Statement,Antmicro.Migrant.VersionTolerance,TypeFullDescriptor,D:\newReposJune17\antmicro_Migrant\Migrant\VersionTolerance\TypeFullDescriptor.cs,VerifyStructure,The length of the statement  "		return StampHelpers.GetFieldsInSerializationOrder (UnderlyingType' true).Select (x => new FieldInfoOrEntryToOmit (x)).ToList (); " is 128.
Long Statement,Antmicro.Migrant.VersionTolerance,TypeFullDescriptor,D:\newReposJune17\antmicro_Migrant\Migrant\VersionTolerance\TypeFullDescriptor.cs,VerifyStructure,The length of the statement  "	if (!(assemblyTypeDescriptor.baseType == null && baseType == null) && ((assemblyTypeDescriptor.baseType == null && baseType != null) || !assemblyTypeDescriptor.baseType.Equals (baseType)) && !versionToleranceLevel.HasFlag (VersionToleranceLevel.AllowInheritanceChainChange)) { " is 276.
Long Statement,Antmicro.Migrant.VersionTolerance,TypeFullDescriptor,D:\newReposJune17\antmicro_Migrant\Migrant\VersionTolerance\TypeFullDescriptor.cs,VerifyStructure,The length of the statement  "		throw new VersionToleranceException (string.Format ("Class hierarchy for {2} changed. Expected '{1}' as base class' but found '{0}'."' baseType != null ? baseType.UnderlyingType.FullName : "null"' assemblyTypeDescriptor.baseType != null ? assemblyTypeDescriptor.baseType.UnderlyingType.FullName : "null"' UnderlyingType.FullName)); " is 331.
Long Statement,Antmicro.Migrant.VersionTolerance,TypeFullDescriptor,D:\newReposJune17\antmicro_Migrant\Migrant\VersionTolerance\TypeFullDescriptor.cs,VerifyStructure,The length of the statement  "	if (assemblyTypeDescriptor.TypeModule.ModuleAssembly.Version != TypeModule.ModuleAssembly.Version && !versionToleranceLevel.HasFlag (VersionToleranceLevel.AllowAssemblyVersionChange)) { " is 185.
Long Statement,Antmicro.Migrant.VersionTolerance,TypeFullDescriptor,D:\newReposJune17\antmicro_Migrant\Migrant\VersionTolerance\TypeFullDescriptor.cs,VerifyStructure,The length of the statement  "		throw new VersionToleranceException (string.Format ("Assembly version changed from {0} to {1} for class {2}"' TypeModule.ModuleAssembly.Version' assemblyTypeDescriptor.TypeModule.ModuleAssembly.Version' UnderlyingType.FullName)); " is 229.
Long Statement,Antmicro.Migrant.VersionTolerance,TypeFullDescriptor,D:\newReposJune17\antmicro_Migrant\Migrant\VersionTolerance\TypeFullDescriptor.cs,VerifyStructure,The length of the statement  "		throw new VersionToleranceException (string.Format ("Field {0} type changed in class {1}."' cmpResult.FieldsChanged [0].Name' UnderlyingType.FullName)); " is 152.
Long Statement,Antmicro.Migrant.VersionTolerance,TypeFullDescriptor,D:\newReposJune17\antmicro_Migrant\Migrant\VersionTolerance\TypeFullDescriptor.cs,VerifyStructure,The length of the statement  "		throw new VersionToleranceException (string.Format ("Field {0} added to class {1}."' cmpResult.FieldsAdded [0].Name' UnderlyingType.FullName)); " is 143.
Long Statement,Antmicro.Migrant.VersionTolerance,TypeFullDescriptor,D:\newReposJune17\antmicro_Migrant\Migrant\VersionTolerance\TypeFullDescriptor.cs,VerifyStructure,The length of the statement  "		throw new VersionToleranceException (string.Format ("Field {0} removed from class {1}."' cmpResult.FieldsRemoved [0].Name' UnderlyingType.FullName)); " is 149.
Complex Conditional,Antmicro.Migrant.VersionTolerance,TypeFullDescriptor,D:\newReposJune17\antmicro_Migrant\Migrant\VersionTolerance\TypeFullDescriptor.cs,VerifyStructure,The conditional expression  "!(assemblyTypeDescriptor.baseType == null && baseType == null) && ((assemblyTypeDescriptor.baseType == null && baseType != null) || !assemblyTypeDescriptor.baseType.Equals (baseType)) && !versionToleranceLevel.HasFlag (VersionToleranceLevel.AllowInheritanceChainChange)"  is complex.
Magic Number,Antmicro.Migrant,PrimitiveReader,D:\newReposJune17\antmicro_Migrant\Migrant\PrimitiveReader.cs,ReadTimeSpan,The following statement contains a magic number: return new TimeSpan (days' type' tms / 60' tms % 60);  
Magic Number,Antmicro.Migrant,PrimitiveReader,D:\newReposJune17\antmicro_Migrant\Migrant\PrimitiveReader.cs,ReadTimeSpan,The following statement contains a magic number: return new TimeSpan (days' type' tms / 60' tms % 60);  
Magic Number,Antmicro.Migrant,PrimitiveReader,D:\newReposJune17\antmicro_Migrant\Migrant\PrimitiveReader.cs,ReadGuid,The following statement contains a magic number: return new Guid (ReadBytes (16));  
Magic Number,Antmicro.Migrant,PrimitiveReader,D:\newReposJune17\antmicro_Migrant\Migrant\PrimitiveReader.cs,InnerReadInteger,The following statement contains a magic number: do {  	next = ReadByte ();  	result |= (next & 0x7FU) << shift;  	shift += 7;  } while ((next & 128) > 0);  
Magic Number,Antmicro.Migrant,PrimitiveReader,D:\newReposJune17\antmicro_Migrant\Migrant\PrimitiveReader.cs,InnerReadInteger,The following statement contains a magic number: do {  	next = ReadByte ();  	result |= (next & 0x7FU) << shift;  	shift += 7;  } while ((next & 128) > 0);  
Magic Number,Antmicro.Migrant,PrimitiveReader,D:\newReposJune17\antmicro_Migrant\Migrant\PrimitiveReader.cs,InnerReadInteger,The following statement contains a magic number: shift += 7;  
Magic Number,Antmicro.Migrant,PrimitiveWriter,D:\newReposJune17\antmicro_Migrant\Migrant\PrimitiveWriter.cs,Write,The following statement contains a magic number: Write ((ushort)(value.Seconds + 60 * value.Minutes));  
Magic Number,Antmicro.Migrant,PrimitiveWriter,D:\newReposJune17\antmicro_Migrant\Migrant\PrimitiveWriter.cs,Write,The following statement contains a magic number: InnerWriteInteger ((ulong)valueToWrite' sizeof(long) + 2);  
Magic Number,Antmicro.Migrant,PrimitiveWriter,D:\newReposJune17\antmicro_Migrant\Migrant\PrimitiveWriter.cs,Write,The following statement contains a magic number: InnerWriteInteger (value' sizeof(ulong) + 2);  
Magic Number,Antmicro.Migrant,PrimitiveWriter,D:\newReposJune17\antmicro_Migrant\Migrant\PrimitiveWriter.cs,Write,The following statement contains a magic number: Write (bytes [2]);  
Magic Number,Antmicro.Migrant,PrimitiveWriter,D:\newReposJune17\antmicro_Migrant\Migrant\PrimitiveWriter.cs,Write,The following statement contains a magic number: Write (bytes [3]);  
Magic Number,Antmicro.Migrant,PrimitiveWriter,D:\newReposJune17\antmicro_Migrant\Migrant\PrimitiveWriter.cs,InnerWriteInteger,The following statement contains a magic number: while (value > 127) {  	valueToWrite = (byte)(value | 128);  	if (buffered) {  		buffer [currentBufferPosition++] = valueToWrite;  	} else {  		currentPosition++;  		stream.WriteByte (valueToWrite);  	}  	value >>= 7;  }  
Magic Number,Antmicro.Migrant,PrimitiveWriter,D:\newReposJune17\antmicro_Migrant\Migrant\PrimitiveWriter.cs,InnerWriteInteger,The following statement contains a magic number: while (value > 127) {  	valueToWrite = (byte)(value | 128);  	if (buffered) {  		buffer [currentBufferPosition++] = valueToWrite;  	} else {  		currentPosition++;  		stream.WriteByte (valueToWrite);  	}  	value >>= 7;  }  
Magic Number,Antmicro.Migrant,PrimitiveWriter,D:\newReposJune17\antmicro_Migrant\Migrant\PrimitiveWriter.cs,InnerWriteInteger,The following statement contains a magic number: while (value > 127) {  	valueToWrite = (byte)(value | 128);  	if (buffered) {  		buffer [currentBufferPosition++] = valueToWrite;  	} else {  		currentPosition++;  		stream.WriteByte (valueToWrite);  	}  	value >>= 7;  }  
Magic Number,Antmicro.Migrant,PrimitiveWriter,D:\newReposJune17\antmicro_Migrant\Migrant\PrimitiveWriter.cs,InnerWriteInteger,The following statement contains a magic number: valueToWrite = (byte)(value | 128);  
Magic Number,Antmicro.Migrant,PrimitiveWriter,D:\newReposJune17\antmicro_Migrant\Migrant\PrimitiveWriter.cs,InnerWriteInteger,The following statement contains a magic number: value >>= 7;  
Magic Number,Antmicro.Migrant,PrimitiveWriter,D:\newReposJune17\antmicro_Migrant\Migrant\PrimitiveWriter.cs,InnerWriteInteger,The following statement contains a magic number: valueToWrite = (byte)(value & 127);  
Magic Number,Antmicro.Migrant,FieldDescriptor,D:\newReposJune17\antmicro_Migrant\Migrant\VersionTolerance\FieldDescriptor.cs,GetHashCode,The following statement contains a magic number: hash = hash * 23 + (Name != null ? Name.GetHashCode () : 0);  
Magic Number,Antmicro.Migrant,FieldDescriptor,D:\newReposJune17\antmicro_Migrant\Migrant\VersionTolerance\FieldDescriptor.cs,GetHashCode,The following statement contains a magic number: hash = hash * 23 + (FieldType != null ? FieldType.GetHashCode () : 0);  
Magic Number,Antmicro.Migrant,FieldDescriptor,D:\newReposJune17\antmicro_Migrant\Migrant\VersionTolerance\FieldDescriptor.cs,GetHashCode,The following statement contains a magic number: hash = hash * 23 + IsTransient.GetHashCode ();  
Magic Number,Antmicro.Migrant,FieldDescriptor,D:\newReposJune17\antmicro_Migrant\Migrant\VersionTolerance\FieldDescriptor.cs,GetHashCode,The following statement contains a magic number: hash = hash * 23 + (DeclaringType != null ? DeclaringType.GetHashCode () : 0);  
Magic Number,Antmicro.Migrant.Utilities,AutoResizingList,D:\newReposJune17\antmicro_Migrant\Migrant\Utilities\AutoResizingList.cs,Insert,The following statement contains a magic number: for (var i = Count - 2; i >= index; i--) {  	data [i + 1] = data [i];  }  
Magic Number,Antmicro.Migrant.Utilities,Variable,D:\newReposJune17\antmicro_Migrant\Migrant\Utilities\Variable.cs,Variable,The following statement contains a magic number: switch (argumentId) {  case 0:  	argOpCode = OpCodes.Ldarg_0;  	break;  case 1:  	argOpCode = OpCodes.Ldarg_1;  	break;  case 2:  	argOpCode = OpCodes.Ldarg_2;  	break;  case 3:  	argOpCode = OpCodes.Ldarg_3;  	break;  default:  	throw new ArgumentOutOfRangeException ();  }  
Magic Number,Antmicro.Migrant.Utilities,Variable,D:\newReposJune17\antmicro_Migrant\Migrant\Utilities\Variable.cs,Variable,The following statement contains a magic number: switch (argumentId) {  case 0:  	argOpCode = OpCodes.Ldarg_0;  	break;  case 1:  	argOpCode = OpCodes.Ldarg_1;  	break;  case 2:  	argOpCode = OpCodes.Ldarg_2;  	break;  case 3:  	argOpCode = OpCodes.Ldarg_3;  	break;  default:  	throw new ArgumentOutOfRangeException ();  }  
Magic Number,Antmicro.Migrant.Generators,GeneratorHelper,D:\newReposJune17\antmicro_Migrant\Migrant\Generators\GeneratorHelper.cs,PushLocalValueOntoStack,The following statement contains a magic number: switch (local.LocalIndex) {  case 0:  	generator.Emit (OpCodes.Ldloc_0);  	break;  case 1:  	generator.Emit (OpCodes.Ldloc_1);  	break;  case 2:  	generator.Emit (OpCodes.Ldloc_2);  	break;  case 3:  	generator.Emit (OpCodes.Ldloc_3);  	break;  default:  	if (local.LocalIndex < 256) {  		generator.Emit (OpCodes.Ldloc_S' (byte)local.LocalIndex);  	} else {  		generator.Emit (OpCodes.Ldloc' local);  	}  	break;  }  
Magic Number,Antmicro.Migrant.Generators,GeneratorHelper,D:\newReposJune17\antmicro_Migrant\Migrant\Generators\GeneratorHelper.cs,PushLocalValueOntoStack,The following statement contains a magic number: switch (local.LocalIndex) {  case 0:  	generator.Emit (OpCodes.Ldloc_0);  	break;  case 1:  	generator.Emit (OpCodes.Ldloc_1);  	break;  case 2:  	generator.Emit (OpCodes.Ldloc_2);  	break;  case 3:  	generator.Emit (OpCodes.Ldloc_3);  	break;  default:  	if (local.LocalIndex < 256) {  		generator.Emit (OpCodes.Ldloc_S' (byte)local.LocalIndex);  	} else {  		generator.Emit (OpCodes.Ldloc' local);  	}  	break;  }  
Magic Number,Antmicro.Migrant.Generators,GeneratorHelper,D:\newReposJune17\antmicro_Migrant\Migrant\Generators\GeneratorHelper.cs,PushLocalValueOntoStack,The following statement contains a magic number: switch (local.LocalIndex) {  case 0:  	generator.Emit (OpCodes.Ldloc_0);  	break;  case 1:  	generator.Emit (OpCodes.Ldloc_1);  	break;  case 2:  	generator.Emit (OpCodes.Ldloc_2);  	break;  case 3:  	generator.Emit (OpCodes.Ldloc_3);  	break;  default:  	if (local.LocalIndex < 256) {  		generator.Emit (OpCodes.Ldloc_S' (byte)local.LocalIndex);  	} else {  		generator.Emit (OpCodes.Ldloc' local);  	}  	break;  }  
Magic Number,Antmicro.Migrant.Generators,GeneratorHelper,D:\newReposJune17\antmicro_Migrant\Migrant\Generators\GeneratorHelper.cs,PushLocalValueOntoStack,The following statement contains a magic number: if (local.LocalIndex < 256) {  	generator.Emit (OpCodes.Ldloc_S' (byte)local.LocalIndex);  } else {  	generator.Emit (OpCodes.Ldloc' local);  }  
Magic Number,Antmicro.Migrant.Generators,GeneratorHelper,D:\newReposJune17\antmicro_Migrant\Migrant\Generators\GeneratorHelper.cs,PushLocalAddressOntoStack,The following statement contains a magic number: if (local.LocalIndex < 256) {  	generator.Emit (OpCodes.Ldloca_S' (byte)local.LocalIndex);  } else {  	generator.Emit (OpCodes.Ldloca' local);  }  
Magic Number,Antmicro.Migrant.Generators,GeneratorHelper,D:\newReposJune17\antmicro_Migrant\Migrant\Generators\GeneratorHelper.cs,StoreLocalValueFromStack,The following statement contains a magic number: switch (local.LocalIndex) {  case 0:  	generator.Emit (OpCodes.Stloc_0);  	break;  case 1:  	generator.Emit (OpCodes.Stloc_1);  	break;  case 2:  	generator.Emit (OpCodes.Stloc_2);  	break;  case 3:  	generator.Emit (OpCodes.Stloc_3);  	break;  default:  	if (local.LocalIndex < 256) {  		generator.Emit (OpCodes.Stloc_S' (byte)local.LocalIndex);  	} else {  		generator.Emit (OpCodes.Stloc' local);  	}  	break;  }  
Magic Number,Antmicro.Migrant.Generators,GeneratorHelper,D:\newReposJune17\antmicro_Migrant\Migrant\Generators\GeneratorHelper.cs,StoreLocalValueFromStack,The following statement contains a magic number: switch (local.LocalIndex) {  case 0:  	generator.Emit (OpCodes.Stloc_0);  	break;  case 1:  	generator.Emit (OpCodes.Stloc_1);  	break;  case 2:  	generator.Emit (OpCodes.Stloc_2);  	break;  case 3:  	generator.Emit (OpCodes.Stloc_3);  	break;  default:  	if (local.LocalIndex < 256) {  		generator.Emit (OpCodes.Stloc_S' (byte)local.LocalIndex);  	} else {  		generator.Emit (OpCodes.Stloc' local);  	}  	break;  }  
Magic Number,Antmicro.Migrant.Generators,GeneratorHelper,D:\newReposJune17\antmicro_Migrant\Migrant\Generators\GeneratorHelper.cs,StoreLocalValueFromStack,The following statement contains a magic number: switch (local.LocalIndex) {  case 0:  	generator.Emit (OpCodes.Stloc_0);  	break;  case 1:  	generator.Emit (OpCodes.Stloc_1);  	break;  case 2:  	generator.Emit (OpCodes.Stloc_2);  	break;  case 3:  	generator.Emit (OpCodes.Stloc_3);  	break;  default:  	if (local.LocalIndex < 256) {  		generator.Emit (OpCodes.Stloc_S' (byte)local.LocalIndex);  	} else {  		generator.Emit (OpCodes.Stloc' local);  	}  	break;  }  
Magic Number,Antmicro.Migrant.Generators,GeneratorHelper,D:\newReposJune17\antmicro_Migrant\Migrant\Generators\GeneratorHelper.cs,StoreLocalValueFromStack,The following statement contains a magic number: if (local.LocalIndex < 256) {  	generator.Emit (OpCodes.Stloc_S' (byte)local.LocalIndex);  } else {  	generator.Emit (OpCodes.Stloc' local);  }  
Magic Number,Antmicro.Migrant.Generators,GeneratorHelper,D:\newReposJune17\antmicro_Migrant\Migrant\Generators\GeneratorHelper.cs,PushIntegerOntoStack,The following statement contains a magic number: switch (value) {  case -1:  	generator.Emit (OpCodes.Ldc_I4_M1);  	break;  case 0:  	generator.Emit (OpCodes.Ldc_I4_0);  	break;  case 1:  	generator.Emit (OpCodes.Ldc_I4_1);  	break;  case 2:  	generator.Emit (OpCodes.Ldc_I4_2);  	break;  case 3:  	generator.Emit (OpCodes.Ldc_I4_3);  	break;  case 4:  	generator.Emit (OpCodes.Ldc_I4_4);  	break;  case 5:  	generator.Emit (OpCodes.Ldc_I4_5);  	break;  case 6:  	generator.Emit (OpCodes.Ldc_I4_6);  	break;  case 7:  	generator.Emit (OpCodes.Ldc_I4_7);  	break;  case 8:  	generator.Emit (OpCodes.Ldc_I4_8);  	break;  default:  	if (value > -129 && value < 128) {  		generator.Emit (OpCodes.Ldc_I4_S' value);  	} else {  		generator.Emit (OpCodes.Ldc_I4' value);  	}  	break;  }  
Magic Number,Antmicro.Migrant.Generators,GeneratorHelper,D:\newReposJune17\antmicro_Migrant\Migrant\Generators\GeneratorHelper.cs,PushIntegerOntoStack,The following statement contains a magic number: switch (value) {  case -1:  	generator.Emit (OpCodes.Ldc_I4_M1);  	break;  case 0:  	generator.Emit (OpCodes.Ldc_I4_0);  	break;  case 1:  	generator.Emit (OpCodes.Ldc_I4_1);  	break;  case 2:  	generator.Emit (OpCodes.Ldc_I4_2);  	break;  case 3:  	generator.Emit (OpCodes.Ldc_I4_3);  	break;  case 4:  	generator.Emit (OpCodes.Ldc_I4_4);  	break;  case 5:  	generator.Emit (OpCodes.Ldc_I4_5);  	break;  case 6:  	generator.Emit (OpCodes.Ldc_I4_6);  	break;  case 7:  	generator.Emit (OpCodes.Ldc_I4_7);  	break;  case 8:  	generator.Emit (OpCodes.Ldc_I4_8);  	break;  default:  	if (value > -129 && value < 128) {  		generator.Emit (OpCodes.Ldc_I4_S' value);  	} else {  		generator.Emit (OpCodes.Ldc_I4' value);  	}  	break;  }  
Magic Number,Antmicro.Migrant.Generators,GeneratorHelper,D:\newReposJune17\antmicro_Migrant\Migrant\Generators\GeneratorHelper.cs,PushIntegerOntoStack,The following statement contains a magic number: switch (value) {  case -1:  	generator.Emit (OpCodes.Ldc_I4_M1);  	break;  case 0:  	generator.Emit (OpCodes.Ldc_I4_0);  	break;  case 1:  	generator.Emit (OpCodes.Ldc_I4_1);  	break;  case 2:  	generator.Emit (OpCodes.Ldc_I4_2);  	break;  case 3:  	generator.Emit (OpCodes.Ldc_I4_3);  	break;  case 4:  	generator.Emit (OpCodes.Ldc_I4_4);  	break;  case 5:  	generator.Emit (OpCodes.Ldc_I4_5);  	break;  case 6:  	generator.Emit (OpCodes.Ldc_I4_6);  	break;  case 7:  	generator.Emit (OpCodes.Ldc_I4_7);  	break;  case 8:  	generator.Emit (OpCodes.Ldc_I4_8);  	break;  default:  	if (value > -129 && value < 128) {  		generator.Emit (OpCodes.Ldc_I4_S' value);  	} else {  		generator.Emit (OpCodes.Ldc_I4' value);  	}  	break;  }  
Magic Number,Antmicro.Migrant.Generators,GeneratorHelper,D:\newReposJune17\antmicro_Migrant\Migrant\Generators\GeneratorHelper.cs,PushIntegerOntoStack,The following statement contains a magic number: switch (value) {  case -1:  	generator.Emit (OpCodes.Ldc_I4_M1);  	break;  case 0:  	generator.Emit (OpCodes.Ldc_I4_0);  	break;  case 1:  	generator.Emit (OpCodes.Ldc_I4_1);  	break;  case 2:  	generator.Emit (OpCodes.Ldc_I4_2);  	break;  case 3:  	generator.Emit (OpCodes.Ldc_I4_3);  	break;  case 4:  	generator.Emit (OpCodes.Ldc_I4_4);  	break;  case 5:  	generator.Emit (OpCodes.Ldc_I4_5);  	break;  case 6:  	generator.Emit (OpCodes.Ldc_I4_6);  	break;  case 7:  	generator.Emit (OpCodes.Ldc_I4_7);  	break;  case 8:  	generator.Emit (OpCodes.Ldc_I4_8);  	break;  default:  	if (value > -129 && value < 128) {  		generator.Emit (OpCodes.Ldc_I4_S' value);  	} else {  		generator.Emit (OpCodes.Ldc_I4' value);  	}  	break;  }  
Magic Number,Antmicro.Migrant.Generators,GeneratorHelper,D:\newReposJune17\antmicro_Migrant\Migrant\Generators\GeneratorHelper.cs,PushIntegerOntoStack,The following statement contains a magic number: switch (value) {  case -1:  	generator.Emit (OpCodes.Ldc_I4_M1);  	break;  case 0:  	generator.Emit (OpCodes.Ldc_I4_0);  	break;  case 1:  	generator.Emit (OpCodes.Ldc_I4_1);  	break;  case 2:  	generator.Emit (OpCodes.Ldc_I4_2);  	break;  case 3:  	generator.Emit (OpCodes.Ldc_I4_3);  	break;  case 4:  	generator.Emit (OpCodes.Ldc_I4_4);  	break;  case 5:  	generator.Emit (OpCodes.Ldc_I4_5);  	break;  case 6:  	generator.Emit (OpCodes.Ldc_I4_6);  	break;  case 7:  	generator.Emit (OpCodes.Ldc_I4_7);  	break;  case 8:  	generator.Emit (OpCodes.Ldc_I4_8);  	break;  default:  	if (value > -129 && value < 128) {  		generator.Emit (OpCodes.Ldc_I4_S' value);  	} else {  		generator.Emit (OpCodes.Ldc_I4' value);  	}  	break;  }  
Magic Number,Antmicro.Migrant.Generators,GeneratorHelper,D:\newReposJune17\antmicro_Migrant\Migrant\Generators\GeneratorHelper.cs,PushIntegerOntoStack,The following statement contains a magic number: switch (value) {  case -1:  	generator.Emit (OpCodes.Ldc_I4_M1);  	break;  case 0:  	generator.Emit (OpCodes.Ldc_I4_0);  	break;  case 1:  	generator.Emit (OpCodes.Ldc_I4_1);  	break;  case 2:  	generator.Emit (OpCodes.Ldc_I4_2);  	break;  case 3:  	generator.Emit (OpCodes.Ldc_I4_3);  	break;  case 4:  	generator.Emit (OpCodes.Ldc_I4_4);  	break;  case 5:  	generator.Emit (OpCodes.Ldc_I4_5);  	break;  case 6:  	generator.Emit (OpCodes.Ldc_I4_6);  	break;  case 7:  	generator.Emit (OpCodes.Ldc_I4_7);  	break;  case 8:  	generator.Emit (OpCodes.Ldc_I4_8);  	break;  default:  	if (value > -129 && value < 128) {  		generator.Emit (OpCodes.Ldc_I4_S' value);  	} else {  		generator.Emit (OpCodes.Ldc_I4' value);  	}  	break;  }  
Magic Number,Antmicro.Migrant.Generators,GeneratorHelper,D:\newReposJune17\antmicro_Migrant\Migrant\Generators\GeneratorHelper.cs,PushIntegerOntoStack,The following statement contains a magic number: switch (value) {  case -1:  	generator.Emit (OpCodes.Ldc_I4_M1);  	break;  case 0:  	generator.Emit (OpCodes.Ldc_I4_0);  	break;  case 1:  	generator.Emit (OpCodes.Ldc_I4_1);  	break;  case 2:  	generator.Emit (OpCodes.Ldc_I4_2);  	break;  case 3:  	generator.Emit (OpCodes.Ldc_I4_3);  	break;  case 4:  	generator.Emit (OpCodes.Ldc_I4_4);  	break;  case 5:  	generator.Emit (OpCodes.Ldc_I4_5);  	break;  case 6:  	generator.Emit (OpCodes.Ldc_I4_6);  	break;  case 7:  	generator.Emit (OpCodes.Ldc_I4_7);  	break;  case 8:  	generator.Emit (OpCodes.Ldc_I4_8);  	break;  default:  	if (value > -129 && value < 128) {  		generator.Emit (OpCodes.Ldc_I4_S' value);  	} else {  		generator.Emit (OpCodes.Ldc_I4' value);  	}  	break;  }  
Magic Number,Antmicro.Migrant.Generators,GeneratorHelper,D:\newReposJune17\antmicro_Migrant\Migrant\Generators\GeneratorHelper.cs,PushIntegerOntoStack,The following statement contains a magic number: switch (value) {  case -1:  	generator.Emit (OpCodes.Ldc_I4_M1);  	break;  case 0:  	generator.Emit (OpCodes.Ldc_I4_0);  	break;  case 1:  	generator.Emit (OpCodes.Ldc_I4_1);  	break;  case 2:  	generator.Emit (OpCodes.Ldc_I4_2);  	break;  case 3:  	generator.Emit (OpCodes.Ldc_I4_3);  	break;  case 4:  	generator.Emit (OpCodes.Ldc_I4_4);  	break;  case 5:  	generator.Emit (OpCodes.Ldc_I4_5);  	break;  case 6:  	generator.Emit (OpCodes.Ldc_I4_6);  	break;  case 7:  	generator.Emit (OpCodes.Ldc_I4_7);  	break;  case 8:  	generator.Emit (OpCodes.Ldc_I4_8);  	break;  default:  	if (value > -129 && value < 128) {  		generator.Emit (OpCodes.Ldc_I4_S' value);  	} else {  		generator.Emit (OpCodes.Ldc_I4' value);  	}  	break;  }  
Magic Number,Antmicro.Migrant.Generators,GeneratorHelper,D:\newReposJune17\antmicro_Migrant\Migrant\Generators\GeneratorHelper.cs,PushIntegerOntoStack,The following statement contains a magic number: switch (value) {  case -1:  	generator.Emit (OpCodes.Ldc_I4_M1);  	break;  case 0:  	generator.Emit (OpCodes.Ldc_I4_0);  	break;  case 1:  	generator.Emit (OpCodes.Ldc_I4_1);  	break;  case 2:  	generator.Emit (OpCodes.Ldc_I4_2);  	break;  case 3:  	generator.Emit (OpCodes.Ldc_I4_3);  	break;  case 4:  	generator.Emit (OpCodes.Ldc_I4_4);  	break;  case 5:  	generator.Emit (OpCodes.Ldc_I4_5);  	break;  case 6:  	generator.Emit (OpCodes.Ldc_I4_6);  	break;  case 7:  	generator.Emit (OpCodes.Ldc_I4_7);  	break;  case 8:  	generator.Emit (OpCodes.Ldc_I4_8);  	break;  default:  	if (value > -129 && value < 128) {  		generator.Emit (OpCodes.Ldc_I4_S' value);  	} else {  		generator.Emit (OpCodes.Ldc_I4' value);  	}  	break;  }  
Magic Number,Antmicro.Migrant.Generators,GeneratorHelper,D:\newReposJune17\antmicro_Migrant\Migrant\Generators\GeneratorHelper.cs,PushIntegerOntoStack,The following statement contains a magic number: if (value > -129 && value < 128) {  	generator.Emit (OpCodes.Ldc_I4_S' value);  } else {  	generator.Emit (OpCodes.Ldc_I4' value);  }  
Magic Number,Antmicro.Migrant.Generators,GeneratorHelper,D:\newReposJune17\antmicro_Migrant\Migrant\Generators\GeneratorHelper.cs,PushIntegerOntoStack,The following statement contains a magic number: if (value > -129 && value < 128) {  	generator.Emit (OpCodes.Ldc_I4_S' value);  } else {  	generator.Emit (OpCodes.Ldc_I4' value);  }  
Magic Number,Antmicro.Migrant.VersionTolerance,AssemblyDescriptor,D:\newReposJune17\antmicro_Migrant\Migrant\VersionTolerance\AssemblyDescriptor.cs,Read,The following statement contains a magic number: switch (tokenLength) {  case 0:  	Token = new byte[0];  	break;  case 8:  	Token = reader.PrimitiveReader.ReadBytes (8);  	break;  default:  	throw new ArgumentException ("Wrong token length!");  }  
Magic Number,Antmicro.Migrant.VersionTolerance,AssemblyDescriptor,D:\newReposJune17\antmicro_Migrant\Migrant\VersionTolerance\AssemblyDescriptor.cs,Read,The following statement contains a magic number: switch (tokenLength) {  case 0:  	Token = new byte[0];  	break;  case 8:  	Token = reader.PrimitiveReader.ReadBytes (8);  	break;  default:  	throw new ArgumentException ("Wrong token length!");  }  
Magic Number,Antmicro.Migrant.VersionTolerance,AssemblyDescriptor,D:\newReposJune17\antmicro_Migrant\Migrant\VersionTolerance\AssemblyDescriptor.cs,Read,The following statement contains a magic number: Token = reader.PrimitiveReader.ReadBytes (8);  
Missing Default,Antmicro.Migrant,ObjectReader,D:\newReposJune17\antmicro_Migrant\Migrant\ObjectReader.cs,ReadObjectInnerUsingReflection,The following switch statement is missing a default case: switch (GetCreationWay (actualType' objectReader.treatCollectionAsUserObject)) {  case CreationWay.Null:  	objectReader.ReadNotPrecreated (actualType' objectId);  	break;  case CreationWay.DefaultCtor:  	objectReader.UpdateElements (actualType' objectId);  	break;  case CreationWay.Uninitialized:  	objectReader.UpdateFields (actualType' objectReader.GetObjectByReferenceId (objectId));  	break;  }  
Missing Default,Antmicro.Migrant,ObjectReader,D:\newReposJune17\antmicro_Migrant\Migrant\ObjectReader.cs,CreateObjectUsingReflection,The following switch statement is missing a default case: switch (GetCreationWay (type' treatCollectionAsUserObject)) {  case CreationWay.Null:  	break;  case CreationWay.DefaultCtor:  	result = Activator.CreateInstance (type);  	break;  case CreationWay.Uninitialized:  	result = FormatterServices.GetUninitializedObject (type);  	break;  }  
Missing Default,Antmicro.Migrant,ObjectWriter,D:\newReposJune17\antmicro_Migrant\Migrant\ObjectWriter.cs,WriteField,The following switch statement is missing a default case: switch (serializationType) {  case SerializationType.Transient:  	break;  case SerializationType.Value:  	WriteValueType (formalType' value);  	break;  case SerializationType.Reference:  	CheckForNullOrTransientnessAndWriteDeferredReference (value' formalType);  	break;  }  
Missing Default,Antmicro.Migrant,PrimitiveReader,D:\newReposJune17\antmicro_Migrant\Migrant\PrimitiveReader.cs,ReadTimeSpan,The following switch statement is missing a default case: switch (type) {  case Helpers.TickIndicator:  	return TimeSpan.FromTicks (ReadInt64 ());  }  
Missing Default,Antmicro.Migrant.Generators,WriteMethodGenerator,D:\newReposJune17\antmicro_Migrant\Migrant\Generators\WriteMethodGenerator.cs,GenerateWriteField,The following switch statement is missing a default case: switch (Helpers.GetSerializationType (formalType)) {  case SerializationType.Transient:  	// just omit it  	return;  case SerializationType.Value:  	GenerateWriteValue (context' valueLocal' formalType);  	break;  case SerializationType.Reference:  	GenerateWriteDeferredReference (context' valueLocal' formalType);  	break;  }  
Missing Default,Antmicro.Migrant.Generators,ReadMethodGenerator,D:\newReposJune17\antmicro_Migrant\Migrant\Generators\ReadMethodGenerator.cs,GenerateReadObjectInner,The following switch statement is missing a default case: switch (ObjectReader.GetCreationWay (formalType' context.TreatCollectionAsUserObject)) {  case ObjectReader.CreationWay.Null:  	GenerateReadNotPrecreated (context' formalType' objectIdLocal);  	break;  case ObjectReader.CreationWay.DefaultCtor:  	GenerateUpdateElements (context' formalType' objectIdLocal);  	break;  case ObjectReader.CreationWay.Uninitialized:  	GenerateUpdateFields (context' formalType' objectIdLocal);  	break;  }  
Missing Default,Antmicro.Migrant.Generators,CreateObjectGenerator,D:\newReposJune17\antmicro_Migrant\Migrant\Generators\CreateObjectGenerator.cs,TryFillBody,The following switch statement is missing a default case: switch (creationWay) {  case ObjectReader.CreationWay.DefaultCtor:  	generator.Call (() => Activator.CreateInstance (type));  	break;  case ObjectReader.CreationWay.Uninitialized:  	generator.Call (() => FormatterServices.GetUninitializedObject (type));  	break;  }  
