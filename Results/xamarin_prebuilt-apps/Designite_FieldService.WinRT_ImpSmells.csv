Implementation smell,Namespace,Class,File,Method,Description
Long Method,SQLite,TableQuery<T>,C:\repos\xamarin_prebuilt-apps\FieldService\FieldService.WinRT\SQLite.cs,CompileExpr,The method has 159 lines of code.
Complex Method,SQLite,SQLiteConnection,C:\repos\xamarin_prebuilt-apps\FieldService\FieldService.WinRT\SQLite.cs,CreateTable,Cyclomatic complexity of the method is 9
Complex Method,SQLite,SQLiteConnection,C:\repos\xamarin_prebuilt-apps\FieldService\FieldService.WinRT\SQLite.cs,Insert,Cyclomatic complexity of the method is 8
Long Parameter List,SQLite,SQLite3,C:\repos\xamarin_prebuilt-apps\FieldService\FieldService.WinRT\SQLite.cs,Prepare2,The method has 5 parameters. Parameters: db' sql' numBytes' stmt' pzTail
Long Parameter List,SQLite,SQLite3,C:\repos\xamarin_prebuilt-apps\FieldService\FieldService.WinRT\SQLite.cs,Prepare2,The method has 5 parameters. Parameters: db' queryBytes' numBytes' stmt' pzTail
Long Parameter List,SQLite,SQLite3,C:\repos\xamarin_prebuilt-apps\FieldService\FieldService.WinRT\SQLite.cs,BindText,The method has 5 parameters. Parameters: stmt' index' val' n' free
Long Parameter List,SQLite,SQLite3,C:\repos\xamarin_prebuilt-apps\FieldService\FieldService.WinRT\SQLite.cs,BindBlob,The method has 5 parameters. Parameters: stmt' index' val' n' free
Long Statement,FieldService.Data,SampleAssignmentService,C:\repos\xamarin_prebuilt-apps\FieldService\FieldService.Shared\Data\SampleAssignmentService.cs,GetSignatureAsync,The length of the statement  "            return Database.GetConnection (cancellationToken).Table<Signature> ().Where (s => s.AssignmentId == assignment.Id).FirstOrDefaultAsync (); " is 138.
Long Statement,FieldService.Data,SampleAssignmentService,C:\repos\xamarin_prebuilt-apps\FieldService\FieldService.Shared\Data\SampleAssignmentService.cs,GetDocumentsAsync,The length of the statement  "                        new Document { Title = "Valuable Information"' Path = "Data/valuableinformation.pdf"' Type = DocumentType.Specifications }' " is 123.
Long Statement,FieldService.Data,SampleAssignmentService,C:\repos\xamarin_prebuilt-apps\FieldService\FieldService.Shared\Data\SampleAssignmentService.cs,GetAssignmentHistoryAsync,The length of the statement  "            //We are returning history with matching company names - in the real world there would be a company or customer table here " is 122.
Long Statement,FieldService.Data,SampleAssignmentService,C:\repos\xamarin_prebuilt-apps\FieldService\FieldService.Shared\Data\SampleAssignmentService.cs,GetAssignmentHistoryAsync,The length of the statement  "                    select AssignmentHistory.*' Assignment.JobNumber' Assignment.CompanyName' Assignment.ContactName' Assignment.ContactPhone' Assignment.Address' Assignment.City' Assignment.State' Assignment.Zip' Assignment.Description' Assignment.StartDate' Assignment.EndDate " is 258.
Long Statement,FieldService.Data,SampleAssignmentService,C:\repos\xamarin_prebuilt-apps\FieldService\FieldService.Shared\Data\SampleAssignmentService.cs,GetExpensePhotoAsync,The length of the statement  "            return Database.GetConnection (cancellationToken).Table<ExpensePhoto> ().Where (p => p.ExpenseId == expense.Id).FirstOrDefaultAsync (); " is 135.
Long Statement,FieldService.ViewModels,LoginViewModel,C:\repos\xamarin_prebuilt-apps\FieldService\FieldService.Shared\ViewModels\LoginViewModel.cs,Validate,The length of the statement  "            ValidateProperty (() => string.IsNullOrEmpty (username)' Catalog.GetString ("UsernameValidation"' comment: "Error message for username")); " is 138.
Long Statement,FieldService.ViewModels,LoginViewModel,C:\repos\xamarin_prebuilt-apps\FieldService\FieldService.Shared\ViewModels\LoginViewModel.cs,Validate,The length of the statement  "            ValidateProperty (() => string.IsNullOrEmpty (password)' Catalog.GetString ("PasswordValidation"' comment: "Error message for password")); " is 138.
Long Statement,SQLite,SQLiteConnection,C:\repos\xamarin_prebuilt-apps\FieldService\FieldService.WinRT\SQLite.cs,Execute,The length of the statement  "				Debug.WriteLine (string.Format ("Finished in {0} ms ({1:0.0} s total)"' _sw.ElapsedMilliseconds' _elapsedMilliseconds / 1000.0)); " is 129.
Long Statement,SQLite,SQLiteConnection,C:\repos\xamarin_prebuilt-apps\FieldService\FieldService.WinRT\SQLite.cs,ExecuteScalar,The length of the statement  "				Debug.WriteLine (string.Format ("Finished in {0} ms ({1:0.0} s total)"' _sw.ElapsedMilliseconds' _elapsedMilliseconds / 1000.0)); " is 129.
Long Statement,SQLite,SQLiteConnection,C:\repos\xamarin_prebuilt-apps\FieldService\FieldService.WinRT\SQLite.cs,DoSavePointExecute,The length of the statement  "			throw new ArgumentException ("savePoint is not valid' and should be the result of a call to SaveTransactionPoint."' "savePoint"); " is 129.
Long Statement,SQLite,SQLiteConnection,C:\repos\xamarin_prebuilt-apps\FieldService\FieldService.WinRT\SQLite.cs,Update,The length of the statement  "				if (ex.Result == SQLite3.Result.Constraint && SQLite3.ExtendedErrCode (this.Handle) == SQLite3.ExtendedResult.ConstraintNotNull) { " is 130.
Long Statement,SQLite,Orm,C:\repos\xamarin_prebuilt-apps\FieldService\FieldService.WinRT\SQLite.cs,SqlType,The length of the statement  "			if (clrType == typeof(Boolean) || clrType == typeof(Byte) || clrType == typeof(UInt16) || clrType == typeof(SByte) || clrType == typeof(Int16) || clrType == typeof(Int32)) { " is 173.
Long Statement,SQLite,PreparedSqlLiteInsertCommand,C:\repos\xamarin_prebuilt-apps\FieldService\FieldService.WinRT\SQLite.cs,ExecuteNonQuery,The length of the statement  "			} else if (r == SQLite3.Result.Constraint && SQLite3.ExtendedErrCode (Connection.Handle) == SQLite3.ExtendedResult.ConstraintNotNull) { " is 135.
Long Statement,SQLite,TableQuery<T>,C:\repos\xamarin_prebuilt-apps\FieldService\FieldService.WinRT\SQLite.cs,GenerateCommand,The length of the statement  "					var t = string.Join ("' "' _orderBys.Select (o => "\"" + o.ColumnName + "\"" + (o.Ascending ? "" : " desc")).ToArray ()); " is 121.
Long Statement,SQLite,TableQuery<T>,C:\repos\xamarin_prebuilt-apps\FieldService\FieldService.WinRT\SQLite.cs,CompileExpr,The length of the statement  "					if (val != null && val is System.Collections.IEnumerable && !(val is string) && !(val is System.Collections.Generic.IEnumerable<byte>)) { " is 137.
Long Statement,FieldService.WinRT.Views,AssignmentMapPage,C:\repos\xamarin_prebuilt-apps\FieldService\FieldService.WinRT\Views\AssignmentMapPage.xaml.cs,UpdatePosition,The length of the statement  "                var northWest = new Location(Math.Max(assignment.Latitude' location.Latitude)' Math.Min(assignment.Longitude' location.Longitude)); " is 131.
Long Statement,FieldService.WinRT.Views,AssignmentMapPage,C:\repos\xamarin_prebuilt-apps\FieldService\FieldService.WinRT\Views\AssignmentMapPage.xaml.cs,UpdatePosition,The length of the statement  "                var southEast = new Location(Math.Min(assignment.Latitude' location.Latitude)' Math.Max(assignment.Longitude' location.Longitude)); " is 131.
Long Statement,FieldService.WinRT.Views,AssignmentsPage,C:\repos\xamarin_prebuilt-apps\FieldService\FieldService.WinRT\Views\AssignmentsPage.xaml.cs,OnNavigatedTo,The length of the statement  "            //toggle button state changed isn't being called unless is checked changes' this does not call the record button by setting this property " is 137.
Long Statement,FieldService.WinRT.Views,AssignmentsPage,C:\repos\xamarin_prebuilt-apps\FieldService\FieldService.WinRT\Views\AssignmentsPage.xaml.cs,OnNavigatedTo,The length of the statement  "            //this was the only way at the moment to get the toggle button to have its recording state changed when navigating to and from this screen. " is 139.
Long Statement,FieldService.WinRT.Views,ConfirmationsPage,C:\repos\xamarin_prebuilt-apps\FieldService\FieldService.WinRT\Views\ConfirmationsPage.xaml.cs,OnItemClick,The length of the statement  "                        var dialog = new MessageDialog ("Take picture with your built in camera or select one from your photo library."' "Add Image"); " is 126.
Long Statement,FieldService.WinRT.Views,MapPage,C:\repos\xamarin_prebuilt-apps\FieldService\FieldService.WinRT\Views\MapPage.xaml.cs,OnNavigatedTo,The length of the statement  "                MapLayer.SetPosition (pin' new Location (assignmentViewModel.ActiveAssignment.Latitude' assignmentViewModel.ActiveAssignment.Longitude)); " is 137.
Complex Conditional,SQLite,Column,C:\repos\xamarin_prebuilt-apps\FieldService\FieldService.WinRT\SQLite.cs,Column,The conditional expression  "!Indices.Any()                      && !IsPK                      && ((createFlags & CreateFlags.ImplicitIndex) == CreateFlags.ImplicitIndex)                      && Name.EndsWith (Orm.ImplicitIndexSuffix' StringComparison.OrdinalIgnoreCase)"  is complex.
Complex Conditional,SQLite,Orm,C:\repos\xamarin_prebuilt-apps\FieldService\FieldService.WinRT\SQLite.cs,SqlType,The conditional expression  "clrType == typeof(Boolean) || clrType == typeof(Byte) || clrType == typeof(UInt16) || clrType == typeof(SByte) || clrType == typeof(Int16) || clrType == typeof(Int32)"  is complex.
Complex Conditional,SQLite,SQLiteCommand,C:\repos\xamarin_prebuilt-apps\FieldService\FieldService.WinRT\SQLite.cs,BindParameter,The conditional expression  "value is Byte || value is UInt16 || value is SByte || value is Int16"  is complex.
Complex Conditional,SQLite,TableQuery<T>,C:\repos\xamarin_prebuilt-apps\FieldService\FieldService.WinRT\SQLite.cs,CompileExpr,The conditional expression  "val != null && val is System.Collections.IEnumerable && !(val is string) && !(val is System.Collections.Generic.IEnumerable<byte>)"  is complex.
Virtual Method Call from Constructor,FieldService.ViewModels,ViewModelBase,C:\repos\xamarin_prebuilt-apps\FieldService\FieldService.Shared\ViewModels\ViewModelBase.cs,ViewModelBase,The constructor "ViewModelBase" calls a virtual method "Validate".
Magic Number,FieldService.ViewModels,AssignmentViewModel,C:\repos\xamarin_prebuilt-apps\FieldService\FieldService.Shared\ViewModels\AssignmentViewModel.cs,AssignmentViewModel,The following statement contains a magic number: timer = new Timer (1000);
Magic Number,SQLite,SQLiteConnection,C:\repos\xamarin_prebuilt-apps\FieldService\FieldService.WinRT\SQLite.cs,SQLiteConnection,The following statement contains a magic number: SQLite3.SetDirectory(/*temp directory type*/2' Windows.Storage.ApplicationData.Current.TemporaryFolder.Path);
Magic Number,SQLite,SQLiteConnection,C:\repos\xamarin_prebuilt-apps\FieldService\FieldService.WinRT\SQLite.cs,SQLiteConnection,The following statement contains a magic number: BusyTimeout = TimeSpan.FromSeconds (0.1);
Magic Number,SQLite,SQLiteConnection,C:\repos\xamarin_prebuilt-apps\FieldService\FieldService.WinRT\SQLite.cs,Execute,The following statement contains a magic number: if (TimeExecution) {  				_sw.Stop ();  				_elapsedMilliseconds += _sw.ElapsedMilliseconds;  				Debug.WriteLine (string.Format ("Finished in {0} ms ({1:0.0} s total)"' _sw.ElapsedMilliseconds' _elapsedMilliseconds / 1000.0));  			}
Magic Number,SQLite,SQLiteConnection,C:\repos\xamarin_prebuilt-apps\FieldService\FieldService.WinRT\SQLite.cs,ExecuteScalar,The following statement contains a magic number: if (TimeExecution) {  				_sw.Stop ();  				_elapsedMilliseconds += _sw.ElapsedMilliseconds;  				Debug.WriteLine (string.Format ("Finished in {0} ms ({1:0.0} s total)"' _sw.ElapsedMilliseconds' _elapsedMilliseconds / 1000.0));  			}
Magic Number,SQLite,SQLiteConnection,C:\repos\xamarin_prebuilt-apps\FieldService\FieldService.WinRT\SQLite.cs,DoSavePointExecute,The following statement contains a magic number: if (firstLen >= 2 && savepoint.Length > firstLen + 1) {  				int depth;  				if (Int32.TryParse (savepoint.Substring (firstLen + 1)' out depth)) {  					// TODO: Mild race here' but inescapable without locking almost everywhere.  					if (0 <= depth && depth < _transactionDepth) {  #if NETFX_CORE                          Volatile.Write (ref _transactionDepth' depth);  #elif SILVERLIGHT  						_transactionDepth = depth;  #else                          Thread.VolatileWrite (ref _transactionDepth' depth);  #endif                          Execute (cmd + savepoint);  						return;  					}  				}  			}
Magic Number,SQLite,SQLiteCommand,C:\repos\xamarin_prebuilt-apps\FieldService\FieldService.WinRT\SQLite.cs,BindParameter,The following statement contains a magic number: if (value == null) {  				SQLite3.BindNull (stmt' index);  			} else {  				if (value is Int32) {  					SQLite3.BindInt (stmt' index' (int)value);  				} else if (value is String) {  					SQLite3.BindText (stmt' index' (string)value' -1' NegativePointer);  				} else if (value is Byte || value is UInt16 || value is SByte || value is Int16) {  					SQLite3.BindInt (stmt' index' Convert.ToInt32 (value));  				} else if (value is Boolean) {  					SQLite3.BindInt (stmt' index' (bool)value ? 1 : 0);  				} else if (value is UInt32 || value is Int64) {  					SQLite3.BindInt64 (stmt' index' Convert.ToInt64 (value));  				} else if (value is Single || value is Double || value is Decimal) {  					SQLite3.BindDouble (stmt' index' Convert.ToDouble (value));  				} else if (value is TimeSpan) {  					SQLite3.BindInt64(stmt' index' ((TimeSpan)value).Ticks);  				} else if (value is DateTime) {  					if (storeDateTimeAsTicks) {  						SQLite3.BindInt64 (stmt' index' ((DateTime)value).Ticks);  					}  					else {  						SQLite3.BindText (stmt' index' ((DateTime)value).ToString ("yyyy-MM-dd HH:mm:ss")' -1' NegativePointer);  					}  				} else if (value is DateTimeOffset) {  					SQLite3.BindInt64 (stmt' index' ((DateTimeOffset)value).UtcTicks);  #if !NETFX_CORE  				} else if (value.GetType().IsEnum) {  #else  				} else if (value.GetType().GetTypeInfo().IsEnum) {  #endif  					SQLite3.BindInt (stmt' index' Convert.ToInt32 (value));                  } else if (value is byte[]){                      SQLite3.BindBlob(stmt' index' (byte[]) value' ((byte[]) value).Length' NegativePointer);                  } else if (value is Guid) {                      SQLite3.BindText(stmt' index' ((Guid)value).ToString()' 72' NegativePointer);                  } else {                      throw new NotSupportedException("Cannot store type: " + value.GetType());                  }  			}
Magic Number,SQLite,TableQuery<T>,C:\repos\xamarin_prebuilt-apps\FieldService\FieldService.WinRT\SQLite.cs,CompileExpr,The following statement contains a magic number: if (expr == null) {  				throw new NotSupportedException ("Expression is NULL");  			} else if (expr is BinaryExpression) {  				var bin = (BinaryExpression)expr;  				  				var leftr = CompileExpr (bin.Left' queryArgs);  				var rightr = CompileExpr (bin.Right' queryArgs);    				//If either side is a parameter and is null' then handle the other side specially (for "is null"/"is not null")  				string text;  				if (leftr.CommandText == "?" && leftr.Value == null)  					text = CompileNullBinaryExpression(bin' rightr);  				else if (rightr.CommandText == "?" && rightr.Value == null)  					text = CompileNullBinaryExpression(bin' leftr);  				else  					text = "(" + leftr.CommandText + " " + GetSqlName(bin) + " " + rightr.CommandText + ")";  				return new CompileResult { CommandText = text };  			} else if (expr.NodeType == ExpressionType.Call) {  				  				var call = (MethodCallExpression)expr;  				var args = new CompileResult[call.Arguments.Count];  				var obj = call.Object != null ? CompileExpr (call.Object' queryArgs) : null;  				  				for (var i = 0; i < args.Length; i++) {  					args [i] = CompileExpr (call.Arguments [i]' queryArgs);  				}  				  				var sqlCall = "";  				  				if (call.Method.Name == "Like" && args.Length == 2) {  					sqlCall = "(" + args [0].CommandText + " like " + args [1].CommandText + ")";  				}  				else if (call.Method.Name == "Contains" && args.Length == 2) {  					sqlCall = "(" + args [1].CommandText + " in " + args [0].CommandText + ")";  				}  				else if (call.Method.Name == "Contains" && args.Length == 1) {  					if (call.Object != null && call.Object.Type == typeof(string)) {  						sqlCall = "(" + obj.CommandText + " like ('%' || " + args [0].CommandText + " || '%'))";  					}  					else {  						sqlCall = "(" + args [0].CommandText + " in " + obj.CommandText + ")";  					}  				}  				else if (call.Method.Name == "StartsWith" && args.Length == 1) {  					sqlCall = "(" + obj.CommandText + " like (" + args [0].CommandText + " || '%'))";  				}  				else if (call.Method.Name == "EndsWith" && args.Length == 1) {  					sqlCall = "(" + obj.CommandText + " like ('%' || " + args [0].CommandText + "))";  				}  				else if (call.Method.Name == "Equals" && args.Length == 1) {  					sqlCall = "(" + obj.CommandText + " = (" + args[0].CommandText + "))";  				} else if (call.Method.Name == "ToLower") {  					sqlCall = "(lower(" + obj.CommandText + "))";   				} else if (call.Method.Name == "ToUpper") {  					sqlCall = "(upper(" + obj.CommandText + "))";   				} else {  					sqlCall = call.Method.Name.ToLower () + "(" + string.Join ("'"' args.Select (a => a.CommandText).ToArray ()) + ")";  				}  				return new CompileResult { CommandText = sqlCall };  				  			} else if (expr.NodeType == ExpressionType.Constant) {  				var c = (ConstantExpression)expr;  				queryArgs.Add (c.Value);  				return new CompileResult {  					CommandText = "?"'  					Value = c.Value  				};  			} else if (expr.NodeType == ExpressionType.Convert) {  				var u = (UnaryExpression)expr;  				var ty = u.Type;  				var valr = CompileExpr (u.Operand' queryArgs);  				return new CompileResult {  					CommandText = valr.CommandText'  					Value = valr.Value != null ? ConvertTo (valr.Value' ty) : null  				};  			} else if (expr.NodeType == ExpressionType.MemberAccess) {  				var mem = (MemberExpression)expr;  				  				if (mem.Expression!=null && mem.Expression.NodeType == ExpressionType.Parameter) {  					//  					// This is a column of our table' output just the column name  					// Need to translate it if that column name is mapped  					//  					var columnName = Table.FindColumnWithPropertyName (mem.Member.Name).Name;  					return new CompileResult { CommandText = "\"" + columnName + "\"" };  				} else {  					object obj = null;  					if (mem.Expression != null) {  						var r = CompileExpr (mem.Expression' queryArgs);  						if (r.Value == null) {  							throw new NotSupportedException ("Member access failed to compile expression");  						}  						if (r.CommandText == "?") {  							queryArgs.RemoveAt (queryArgs.Count - 1);  						}  						obj = r.Value;  					}  					  					//  					// Get the member value  					//  					object val = null;  					  #if !NETFX_CORE  					if (mem.Member.MemberType == MemberTypes.Property) {  #else  					if (mem.Member is PropertyInfo) {  #endif  						var m = (PropertyInfo)mem.Member;  						val = m.GetValue (obj' null);  #if !NETFX_CORE  					} else if (mem.Member.MemberType == MemberTypes.Field) {  #else  					} else if (mem.Member is FieldInfo) {  #endif  #if SILVERLIGHT  						val = Expression.Lambda (expr).Compile ().DynamicInvoke ();  #else  						var m = (FieldInfo)mem.Member;  						val = m.GetValue (obj);  #endif  					} else {  #if !NETFX_CORE  						throw new NotSupportedException ("MemberExpr: " + mem.Member.MemberType);  #else  						throw new NotSupportedException ("MemberExpr: " + mem.Member.DeclaringType);  #endif  					}  					  					//  					// Work special magic for enumerables  					//  					if (val != null && val is System.Collections.IEnumerable && !(val is string) && !(val is System.Collections.Generic.IEnumerable<byte>)) {  						var sb = new System.Text.StringBuilder();  						sb.Append("(");  						var head = "";  						foreach (var a in (System.Collections.IEnumerable)val) {  							queryArgs.Add(a);  							sb.Append(head);  							sb.Append("?");  							head = "'";  						}  						sb.Append(")");  						return new CompileResult {  							CommandText = sb.ToString()'  							Value = val  						};  					}  					else {  						queryArgs.Add (val);  						return new CompileResult {  							CommandText = "?"'  							Value = val  						};  					}  				}  			}
Magic Number,SQLite,TableQuery<T>,C:\repos\xamarin_prebuilt-apps\FieldService\FieldService.WinRT\SQLite.cs,CompileExpr,The following statement contains a magic number: if (expr == null) {  				throw new NotSupportedException ("Expression is NULL");  			} else if (expr is BinaryExpression) {  				var bin = (BinaryExpression)expr;  				  				var leftr = CompileExpr (bin.Left' queryArgs);  				var rightr = CompileExpr (bin.Right' queryArgs);    				//If either side is a parameter and is null' then handle the other side specially (for "is null"/"is not null")  				string text;  				if (leftr.CommandText == "?" && leftr.Value == null)  					text = CompileNullBinaryExpression(bin' rightr);  				else if (rightr.CommandText == "?" && rightr.Value == null)  					text = CompileNullBinaryExpression(bin' leftr);  				else  					text = "(" + leftr.CommandText + " " + GetSqlName(bin) + " " + rightr.CommandText + ")";  				return new CompileResult { CommandText = text };  			} else if (expr.NodeType == ExpressionType.Call) {  				  				var call = (MethodCallExpression)expr;  				var args = new CompileResult[call.Arguments.Count];  				var obj = call.Object != null ? CompileExpr (call.Object' queryArgs) : null;  				  				for (var i = 0; i < args.Length; i++) {  					args [i] = CompileExpr (call.Arguments [i]' queryArgs);  				}  				  				var sqlCall = "";  				  				if (call.Method.Name == "Like" && args.Length == 2) {  					sqlCall = "(" + args [0].CommandText + " like " + args [1].CommandText + ")";  				}  				else if (call.Method.Name == "Contains" && args.Length == 2) {  					sqlCall = "(" + args [1].CommandText + " in " + args [0].CommandText + ")";  				}  				else if (call.Method.Name == "Contains" && args.Length == 1) {  					if (call.Object != null && call.Object.Type == typeof(string)) {  						sqlCall = "(" + obj.CommandText + " like ('%' || " + args [0].CommandText + " || '%'))";  					}  					else {  						sqlCall = "(" + args [0].CommandText + " in " + obj.CommandText + ")";  					}  				}  				else if (call.Method.Name == "StartsWith" && args.Length == 1) {  					sqlCall = "(" + obj.CommandText + " like (" + args [0].CommandText + " || '%'))";  				}  				else if (call.Method.Name == "EndsWith" && args.Length == 1) {  					sqlCall = "(" + obj.CommandText + " like ('%' || " + args [0].CommandText + "))";  				}  				else if (call.Method.Name == "Equals" && args.Length == 1) {  					sqlCall = "(" + obj.CommandText + " = (" + args[0].CommandText + "))";  				} else if (call.Method.Name == "ToLower") {  					sqlCall = "(lower(" + obj.CommandText + "))";   				} else if (call.Method.Name == "ToUpper") {  					sqlCall = "(upper(" + obj.CommandText + "))";   				} else {  					sqlCall = call.Method.Name.ToLower () + "(" + string.Join ("'"' args.Select (a => a.CommandText).ToArray ()) + ")";  				}  				return new CompileResult { CommandText = sqlCall };  				  			} else if (expr.NodeType == ExpressionType.Constant) {  				var c = (ConstantExpression)expr;  				queryArgs.Add (c.Value);  				return new CompileResult {  					CommandText = "?"'  					Value = c.Value  				};  			} else if (expr.NodeType == ExpressionType.Convert) {  				var u = (UnaryExpression)expr;  				var ty = u.Type;  				var valr = CompileExpr (u.Operand' queryArgs);  				return new CompileResult {  					CommandText = valr.CommandText'  					Value = valr.Value != null ? ConvertTo (valr.Value' ty) : null  				};  			} else if (expr.NodeType == ExpressionType.MemberAccess) {  				var mem = (MemberExpression)expr;  				  				if (mem.Expression!=null && mem.Expression.NodeType == ExpressionType.Parameter) {  					//  					// This is a column of our table' output just the column name  					// Need to translate it if that column name is mapped  					//  					var columnName = Table.FindColumnWithPropertyName (mem.Member.Name).Name;  					return new CompileResult { CommandText = "\"" + columnName + "\"" };  				} else {  					object obj = null;  					if (mem.Expression != null) {  						var r = CompileExpr (mem.Expression' queryArgs);  						if (r.Value == null) {  							throw new NotSupportedException ("Member access failed to compile expression");  						}  						if (r.CommandText == "?") {  							queryArgs.RemoveAt (queryArgs.Count - 1);  						}  						obj = r.Value;  					}  					  					//  					// Get the member value  					//  					object val = null;  					  #if !NETFX_CORE  					if (mem.Member.MemberType == MemberTypes.Property) {  #else  					if (mem.Member is PropertyInfo) {  #endif  						var m = (PropertyInfo)mem.Member;  						val = m.GetValue (obj' null);  #if !NETFX_CORE  					} else if (mem.Member.MemberType == MemberTypes.Field) {  #else  					} else if (mem.Member is FieldInfo) {  #endif  #if SILVERLIGHT  						val = Expression.Lambda (expr).Compile ().DynamicInvoke ();  #else  						var m = (FieldInfo)mem.Member;  						val = m.GetValue (obj);  #endif  					} else {  #if !NETFX_CORE  						throw new NotSupportedException ("MemberExpr: " + mem.Member.MemberType);  #else  						throw new NotSupportedException ("MemberExpr: " + mem.Member.DeclaringType);  #endif  					}  					  					//  					// Work special magic for enumerables  					//  					if (val != null && val is System.Collections.IEnumerable && !(val is string) && !(val is System.Collections.Generic.IEnumerable<byte>)) {  						var sb = new System.Text.StringBuilder();  						sb.Append("(");  						var head = "";  						foreach (var a in (System.Collections.IEnumerable)val) {  							queryArgs.Add(a);  							sb.Append(head);  							sb.Append("?");  							head = "'";  						}  						sb.Append(")");  						return new CompileResult {  							CommandText = sb.ToString()'  							Value = val  						};  					}  					else {  						queryArgs.Add (val);  						return new CompileResult {  							CommandText = "?"'  							Value = val  						};  					}  				}  			}
Magic Number,FieldService.WinRT.Views,AssignmentMapPage,C:\repos\xamarin_prebuilt-apps\FieldService\FieldService.WinRT\Views\AssignmentMapPage.xaml.cs,OnNavigatedTo,The following statement contains a magic number: map.SetView (location' 6);
Magic Number,FieldService.WinRT.Views,AssignmentMapPage,C:\repos\xamarin_prebuilt-apps\FieldService\FieldService.WinRT\Views\AssignmentMapPage.xaml.cs,OnPinTapped,The following statement contains a magic number: map.SetView (location' TimeSpan.FromSeconds (.3));
Magic Number,FieldService.WinRT.Views,AssignmentMapPage,C:\repos\xamarin_prebuilt-apps\FieldService\FieldService.WinRT\Views\AssignmentMapPage.xaml.cs,UpdatePosition,The following statement contains a magic number: try {                  var assignment = assignmentViewModel.SelectedAssignment;                  var position = await locator.GetGeopositionAsync ();                    var location = new Location (position.Coordinate.Latitude' position.Coordinate.Longitude);                    //Set the user's pin                  const double spacing = 3;                  MapLayer.SetPosition (userPin' location);                  var northWest = new Location(Math.Max(assignment.Latitude' location.Latitude)' Math.Min(assignment.Longitude' location.Longitude));                  northWest.Longitude -= spacing;                  northWest.Latitude += spacing;                  var southEast = new Location(Math.Min(assignment.Latitude' location.Latitude)' Math.Max(assignment.Longitude' location.Longitude));                  southEast.Longitude += spacing;                  southEast.Latitude -= spacing;                  map.SetView (new LocationRect (northWest' southEast));              } catch (Exception exc) {                  System.Diagnostics.Debug.WriteLine ("Error updating position: " + exc.Message);              }
Magic Number,FieldService.WinRT.Views,LoginPage,C:\repos\xamarin_prebuilt-apps\FieldService\FieldService.WinRT\Views\LoginPage.xaml.cs,LoginPage,The following statement contains a magic number: inputPane.Showing += (sender' e) => {                  if (navigatedTo) {                      keyboardShowingFrame.Value = -e.OccludedRect.Height / 2;                      keyboardShowing.Begin ();                  }              };
Magic Number,FieldService.WinRT.Views,MapPage,C:\repos\xamarin_prebuilt-apps\FieldService\FieldService.WinRT\Views\MapPage.xaml.cs,OnPinTapped,The following statement contains a magic number: map.SetView (location' TimeSpan.FromSeconds (.3));
Magic Number,FieldService.WinRT.Views,MapPage,C:\repos\xamarin_prebuilt-apps\FieldService\FieldService.WinRT\Views\MapPage.xaml.cs,UpdatePosition,The following statement contains a magic number: try {                  var position = await locator.GetGeopositionAsync ();                  var location = new Location (position.Coordinate.Latitude' position.Coordinate.Longitude);                    //Move the map                  map.SetView (location' 6);                    //Move the user's pin                  map.Children.Add (userPin);                  MapLayer.SetPosition (userPin' location);                } catch (Exception exc) {                  System.Diagnostics.Debug.WriteLine ("Error updating position: " + exc.Message);              }
Magic Number,FieldService.WinRT.Views,MapTile,C:\repos\xamarin_prebuilt-apps\FieldService\FieldService.WinRT\Views\MapTile.xaml.cs,OnLoaded,The following statement contains a magic number: if (assignment != null) {                  pin.Visibility = Visibility.Visible;                  pin.Background = assignment.Status.GetBrushForStatus ();                    var location = new Location (assignment.Latitude' assignment.Longitude);                  MapLayer.SetPosition (pin' location);                  map.SetView (location' 10);              } else {                  pin.Visibility = Visibility.Collapsed;              }
Missing Default,SQLite,SQLiteConnection,C:\repos\xamarin_prebuilt-apps\FieldService\FieldService.WinRT\SQLite.cs,BeginTransaction,The following switch statement is missing a default case: switch (sqlExp.Result) {  						case SQLite3.Result.IOError:  						case SQLite3.Result.Full:  						case SQLite3.Result.Busy:  						case SQLite3.Result.NoMem:  						case SQLite3.Result.Interrupt:  							RollbackTo (null' true);  							break;  						}
Missing Default,SQLite,SQLiteConnection,C:\repos\xamarin_prebuilt-apps\FieldService\FieldService.WinRT\SQLite.cs,SaveTransactionPoint,The following switch statement is missing a default case: switch (sqlExp.Result) {  					case SQLite3.Result.IOError:  					case SQLite3.Result.Full:  					case SQLite3.Result.Busy:  					case SQLite3.Result.NoMem:  					case SQLite3.Result.Interrupt:  						RollbackTo (null' true);  						break;  					}
