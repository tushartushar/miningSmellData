Implementation smell,Namespace,Class,File,Method,Description
Long Method,SessionViewer,PacketReconstructor,C:\repos\woanware_SessionViewer\Source\PacketReconstructor.cs,ReassembleTcp,The method has 107 lines of code.
Long Method,SessionViewer.SessionProcessors,SmtpExtractor,C:\repos\woanware_SessionViewer\Source\Extractors\SmtpExtractor.cs,ProcessAttachmentHashes,The method has 115 lines of code.
Complex Method,SessionViewer,Db,C:\repos\woanware_SessionViewer\Source\Db.cs,CreateDatabase,Cyclomatic complexity of the method is 10
Complex Method,SessionViewer,FormMain,C:\repos\woanware_SessionViewer\Source\FormMain.cs,menuFileImport_Click,Cyclomatic complexity of the method is 28
Complex Method,SessionViewer,FormMain,C:\repos\woanware_SessionViewer\Source\FormMain.cs,CopyDataToClipboard,Cyclomatic complexity of the method is 29
Complex Method,SessionViewer,PacketReconstructor,C:\repos\woanware_SessionViewer\Source\PacketReconstructor.cs,ReassemblePacket,Cyclomatic complexity of the method is 13
Complex Method,SessionViewer,PacketReconstructor,C:\repos\woanware_SessionViewer\Source\PacketReconstructor.cs,SavePacketData,Cyclomatic complexity of the method is 9
Complex Method,SessionViewer,PacketReconstructor,C:\repos\woanware_SessionViewer\Source\PacketReconstructor.cs,ReassembleUdp,Cyclomatic complexity of the method is 8
Complex Method,SessionViewer,PacketReconstructor,C:\repos\woanware_SessionViewer\Source\PacketReconstructor.cs,ReassembleTcp,Cyclomatic complexity of the method is 23
Complex Method,SessionViewer,PacketReconstructor,C:\repos\woanware_SessionViewer\Source\PacketReconstructor.cs,CheckFragments,Cyclomatic complexity of the method is 13
Complex Method,SessionViewer,Parser,C:\repos\woanware_SessionViewer\Source\Parser.cs,DispatcherHandler,Cyclomatic complexity of the method is 9
Complex Method,SessionViewer,Parser,C:\repos\woanware_SessionViewer\Source\Parser.cs,WriteOldSessions,Cyclomatic complexity of the method is 15
Complex Method,SessionViewer,Settings,C:\repos\woanware_SessionViewer\Source\Settings.cs,Load,Cyclomatic complexity of the method is 8
Complex Method,SessionViewer,Settings,C:\repos\woanware_SessionViewer\Source\Settings.cs,Save,Cyclomatic complexity of the method is 8
Complex Method,Extractors,DownloadDetails,C:\repos\woanware_SessionViewer\Source\Extractors\FileDetails.cs,Load,Cyclomatic complexity of the method is 8
Complex Method,Extractors,MessageDetails,C:\repos\woanware_SessionViewer\Source\Extractors\MessageDetails.cs,Load,Cyclomatic complexity of the method is 9
Complex Method,Extractors,UrlDetails,C:\repos\woanware_SessionViewer\Source\Extractors\UrlDetails.cs,Load,Cyclomatic complexity of the method is 9
Complex Method,SessionViewer.SessionProcessors,HttpFileExtractor,C:\repos\woanware_SessionViewer\Source\Extractors\HttpFileExtractor.cs,PostProcess,Cyclomatic complexity of the method is 8
Complex Method,SessionViewer.SessionProcessors,HttpFileExtractor,C:\repos\woanware_SessionViewer\Source\Extractors\HttpFileExtractor.cs,ProcessFiles,Cyclomatic complexity of the method is 13
Complex Method,SessionViewer.SessionProcessors,UrlExtractor,C:\repos\woanware_SessionViewer\Source\Extractors\UrlExtractor.cs,PostProcess,Cyclomatic complexity of the method is 9
Complex Method,SessionViewer.SessionProcessors,UrlExtractor,C:\repos\woanware_SessionViewer\Source\Extractors\UrlExtractor.cs,ProcessUrls,Cyclomatic complexity of the method is 8
Complex Method,SessionViewer.SessionProcessors,SmtpExtractor,C:\repos\woanware_SessionViewer\Source\Extractors\SmtpExtractor.cs,PostProcess,Cyclomatic complexity of the method is 9
Complex Method,SessionViewer.SessionProcessors,SmtpExtractor,C:\repos\woanware_SessionViewer\Source\Extractors\SmtpExtractor.cs,ProcessAttachmentHashes,Cyclomatic complexity of the method is 21
Complex Method,SessionViewer.SessionProcessors,SmtpExtractor,C:\repos\woanware_SessionViewer\Source\Extractors\SmtpExtractor.cs,ProcessAttachment,Cyclomatic complexity of the method is 8
Complex Method,SessionViewer.SessionProcessors,SmtpExtractor,C:\repos\woanware_SessionViewer\Source\Extractors\SmtpExtractor.cs,PerformArchiveDecompression,Cyclomatic complexity of the method is 8
Complex Method,SessionViewer.SessionProcessors,SmtpExtractor,C:\repos\woanware_SessionViewer\Source\Extractors\SmtpExtractor.cs,HashFiles,Cyclomatic complexity of the method is 14
Complex Method,SessionViewer.PacketProcessors,DnsParser,C:\repos\woanware_SessionViewer\Source\PacketParsers\DnsParser.cs,Process,Cyclomatic complexity of the method is 9
Complex Method,SessionViewer.SessionParsers,HttpParser,C:\repos\woanware_SessionViewer\Source\SessionParsers\HttpParser.cs,UpdateDatabaseSession,Cyclomatic complexity of the method is 8
Complex Method,SessionViewer.SessionParsers,HttpParser,C:\repos\woanware_SessionViewer\Source\SessionParsers\HttpParser.cs,ParseLinks,Cyclomatic complexity of the method is 20
Long Parameter List,SessionViewer,PacketReconstructor,C:\repos\woanware_SessionViewer\Source\PacketReconstructor.cs,SavePacketData,The method has 7 parameters.
Long Parameter List,SessionViewer,PacketReconstructor,C:\repos\woanware_SessionViewer\Source\PacketReconstructor.cs,ReassembleUdp,The method has 8 parameters.
Long Parameter List,SessionViewer,PacketReconstructor,C:\repos\woanware_SessionViewer\Source\PacketReconstructor.cs,ReassembleTcp,The method has 11 parameters.
Long Parameter List,SessionViewer,PacketReconstructor,C:\repos\woanware_SessionViewer\Source\PacketReconstructor.cs,CheckFragments,The method has 7 parameters.
Long Parameter List,SessionViewer.SessionProcessors,SmtpExtractor,C:\repos\woanware_SessionViewer\Source\Extractors\SmtpExtractor.cs,OutputSummary,The method has 6 parameters.
Long Statement,SessionViewer,Connection,C:\repos\woanware_SessionViewer\Source\Connection.cs,Equals,The length of the statement  "	bool result = ((connection.SourceIp.Equals (SourceIp)) && (connection.SourcePort == SourcePort) && (connection.DestinationIp.Equals (DestinationIp)) && (connection.DestinationPort == DestinationPort)) || ((connection.SourceIp.Equals (DestinationIp)) && (connection.SourcePort == DestinationPort) && (connection.DestinationIp.Equals (SourceIp)) && (connection.DestinationPort == SourcePort)); " is 391.
Long Statement,SessionViewer,Connection,C:\repos\woanware_SessionViewer\Source\Connection.cs,GetHashCode,The length of the statement  "	return ((SourceIp.GetHashCode () ^ SourcePort.GetHashCode ()) as object).GetHashCode () ^ ((DestinationIp.GetHashCode () ^ DestinationPort.GetHashCode ()) as object).GetHashCode (); " is 181.
Long Statement,SessionViewer,FormMain,C:\repos\woanware_SessionViewer\Source\FormMain.cs,OnParser_Error,The length of the statement  "	IO.WriteTextToFile (message + Environment.NewLine' System.IO.Path.Combine (Misc.GetUserDataDirectory ()' "Errors.txt")' true); " is 126.
Long Statement,SessionViewer,FormMain,C:\repos\woanware_SessionViewer\Source\FormMain.cs,menuToolsOptions_Click,The length of the statement  "	using (FormOptions formOptions = new FormOptions (_settings.Threads' _settings.BufferInterval' _settings.SessionInterval)) { " is 124.
Long Statement,SessionViewer,FormImport,C:\repos\woanware_SessionViewer\Source\FormImport.cs,btnOutput_Click,The length of the statement  "		DialogResult dialogResult = MessageBox.Show (this' "A SessionViewer database already exists in the directory. Do you want to continue?"' Application.ProductName' MessageBoxButtons.YesNo' MessageBoxIcon.Question); " is 212.
Long Statement,SessionViewer,PacketReconstructor,C:\repos\woanware_SessionViewer\Source\PacketReconstructor.cs,ReassemblePacket,The length of the statement  "			ReassembleTcp ((ulong)tcp.SequenceNumber' acknowledged' length' tcp.Payload.ToMemoryStream ().ToArray ()' (ulong)tcp.Payload.Length' tcp.IsSynchronize' ip.Source.ToValue ()' ip.Destination.ToValue ()' (uint)tcp.SourcePort' (uint)tcp.DestinationPort' packet.Timestamp); " is 268.
Long Statement,SessionViewer,PacketReconstructor,C:\repos\woanware_SessionViewer\Source\PacketReconstructor.cs,ReassemblePacket,The length of the statement  "			int index = ReassembleUdp (length' udp.Payload.ToMemoryStream ().ToArray ()' (ulong)udp.Payload.Length' ip.Source.ToValue ()' ip.Destination.ToValue ()' (uint)udp.SourcePort' (uint)udp.DestinationPort' packet.Timestamp); " is 220.
Long Statement,SessionViewer,PacketReconstructor,C:\repos\woanware_SessionViewer\Source\PacketReconstructor.cs,ReassembleTcp,The length of the statement  "			/* done with the packet' see if it caused a fragment to fit */while (CheckFragments (net_src' net_dst' srcport' dstport' src_index' timestamp' acknowledgement)) " is 160.
Long Statement,SessionViewer,Parser,C:\repos\woanware_SessionViewer\Source\Parser.cs,Parse,The length of the statement  "			woanware.IO.WriteTextToFile ("Start: " + DateTime.Now.ToString () + Environment.NewLine' System.IO.Path.Combine (_outputPath' "Log.txt")' true); " is 144.
Long Statement,SessionViewer,Parser,C:\repos\woanware_SessionViewer\Source\Parser.cs,Parse,The length of the statement  "			using (PacketCommunicator packetCommunicator = selectedDevice.Open (65536' PacketDeviceOpenAttributes.Promiscuous' 1000)) { " is 123.
Long Statement,SessionViewer,Parser,C:\repos\woanware_SessionViewer\Source\Parser.cs,Parse,The length of the statement  "			woanware.IO.WriteTextToFile ("End: " + DateTime.Now.ToString () + Environment.NewLine' System.IO.Path.Combine (_outputPath' "Log.txt")' true); " is 142.
Long Statement,SessionViewer,Parser,C:\repos\woanware_SessionViewer\Source\Parser.cs,Parse,The length of the statement  "			woanware.IO.WriteTextToFile ("Packets: " + _packetCount + Environment.NewLine' System.IO.Path.Combine (_outputPath' "Log.txt")' true); " is 134.
Long Statement,SessionViewer,Parser,C:\repos\woanware_SessionViewer\Source\Parser.cs,Parse,The length of the statement  "			woanware.IO.WriteTextToFile ("TCP Sessions: " + this.sessionParser.TotalSessions + Environment.NewLine' System.IO.Path.Combine (_outputPath' "Log.txt")' true); " is 159.
Long Statement,SessionViewer,Parser,C:\repos\woanware_SessionViewer\Source\Parser.cs,DispatcherHandler,The length of the statement  "			if (Networking.IsOnIntranet (System.Net.IPAddress.Parse (ip.Source.ToString ())) == true & Networking.IsOnIntranet (System.Net.IPAddress.Parse (ip.Destination.ToString ())) == true) { " is 183.
Long Statement,SessionViewer,Program,C:\repos\woanware_SessionViewer\Source\Program.cs,OnUnhandledException,The length of the statement  "	//IO.WriteTextToFile("An unhandled exception has occurred: " + exception.ToString() + Environment.NewLine' System.IO.Path.Combine(Misc.GetUserDataDirectory()' "Errors.txt")' true); " is 180.
Long Statement,SessionViewer,Program,C:\repos\woanware_SessionViewer\Source\Program.cs,OnUnhandledException,The length of the statement  "	//Misc.WriteToEventLog(Application.ProductName' "An unhandled exception has occurred: " + exception.ToString()' EventLogEntryType.Error); " is 137.
Long Statement,SessionViewer,Program,C:\repos\woanware_SessionViewer\Source\Program.cs,OnUnhandledException,The length of the statement  "	UserInterface.DisplayErrorMessageBox ("An unhandled exception has occurred' check the Log.txt file for details: " + exception.Message); " is 135.
Long Statement,SessionViewer,Program,C:\repos\woanware_SessionViewer\Source\Program.cs,OnUnhandledException,The length of the statement  "	//IO.WriteTextToFile(exception.ToString() + Environment.NewLine' System.IO.Path.Combine(Misc.GetApplicationDirectory()' "Errors.txt")' true); " is 141.
Long Statement,SessionViewer,Program,C:\repos\woanware_SessionViewer\Source\Program.cs,OnUnhandledException,The length of the statement  "	//Misc.WriteToEventLog(Application.ProductName' "An unhandled exception has occurred: " + exception.ToString()' EventLogEntryType.Error); " is 137.
Long Statement,SessionViewer,Program,C:\repos\woanware_SessionViewer\Source\Program.cs,OnThreadException,The length of the statement  "	//IO.WriteTextToFile("An unhandled exception has occurred: " + exception.ToString() + Environment.NewLine' System.IO.Path.Combine(Misc.GetUserDataDirectory()' "Errors.txt")' true); " is 180.
Long Statement,SessionViewer,Program,C:\repos\woanware_SessionViewer\Source\Program.cs,OnThreadException,The length of the statement  "	//Misc.WriteToEventLog(Application.ProductName' "An unhandled exception has occurred: " + Environment.NewLine + Environment.NewLine + exception.ToString()' EventLogEntryType.Error); " is 181.
Long Statement,SessionViewer,Program,C:\repos\woanware_SessionViewer\Source\Program.cs,OnThreadException,The length of the statement  "	UserInterface.DisplayErrorMessageBox ("An unhandled exception has occurred' check the Errors.txt file for details: " + exception.Message); " is 138.
Long Statement,SessionViewer,Program,C:\repos\woanware_SessionViewer\Source\Program.cs,OnThreadException,The length of the statement  "	//IO.WriteTextToFile(exception.ToString() + Environment.NewLine' System.IO.Path.Combine(Misc.GetApplicationDirectory()' "Errors.txt")' true); " is 141.
Long Statement,SessionViewer,Program,C:\repos\woanware_SessionViewer\Source\Program.cs,OnThreadException,The length of the statement  "	//Misc.WriteToEventLog(Application.ProductName' "An unhandled exception has occurred: " + Environment.NewLine + Environment.NewLine + exception.ToString()' EventLogEntryType.Error); " is 181.
Long Statement,SessionViewer.SessionProcessors,HttpFileExtractor,C:\repos\woanware_SessionViewer\Source\Extractors\HttpFileExtractor.cs,PreProcess,The length of the statement  "	IO.WriteTextToFile ("\"MD5\"'\"File\"'\"Src IP\"'\"Src Port\"'\"Dst IP\"'\"Dst Port\"" + Environment.NewLine' System.IO.Path.Combine (outputDirectory' "File.Hashes.csv")' false); " is 178.
Long Statement,SessionViewer.SessionProcessors,HttpFileExtractor,C:\repos\woanware_SessionViewer\Source\Extractors\HttpFileExtractor.cs,PostProcess,The length of the statement  "	using (FileStream fileStream = new FileStream (System.IO.Path.Combine (outputDirectory' "File.Hashes.csv")' FileMode.Append' FileAccess.Write' FileShare.Read)) " is 159.
Long Statement,SessionViewer.SessionProcessors,HttpFileExtractor,C:\repos\woanware_SessionViewer\Source\Extractors\HttpFileExtractor.cs,ProcessFiles,The length of the statement  "			using (var stream = new BufferedStream (File.OpenRead (System.IO.Path.Combine (this.outputDirectory' dir' fileName))' 1200000)) { " is 129.
Long Statement,SessionViewer.SessionProcessors,UrlExtractor,C:\repos\woanware_SessionViewer\Source\Extractors\UrlExtractor.cs,PreProcess,The length of the statement  "	IO.WriteTextToFile ("\"URL\"'\"Src IP\"'\"Src Port\"'\"Dst IP\"'\"Dst Port\"" + Environment.NewLine' System.IO.Path.Combine (outputDirectory' "Urls.csv")' false); " is 162.
Long Statement,SessionViewer.SessionProcessors,UrlExtractor,C:\repos\woanware_SessionViewer\Source\Extractors\UrlExtractor.cs,PostProcess,The length of the statement  "	using (FileStream fileStream = new FileStream (System.IO.Path.Combine (outputDirectory' "Urls.csv")' FileMode.Append' FileAccess.Write' FileShare.Read)) " is 152.
Long Statement,SessionViewer.SessionProcessors,SmtpExtractor,C:\repos\woanware_SessionViewer\Source\Extractors\SmtpExtractor.cs,PreProcess,The length of the statement  "	IO.WriteTextToFile ("\"MD5\"'\"File\"'\"Src IP\"'\"Src Port\"'\"Dst IP\"'\"Dst Port\"'\"To\"'\"From\"'\"Mail From\"'\"Sender\"'\"Subject\"'\"Date\"" + Environment.NewLine' System.IO.Path.Combine (outputDirectory' "Attachment.Hashes.csv")' false); " is 246.
Long Statement,SessionViewer.SessionProcessors,SmtpExtractor,C:\repos\woanware_SessionViewer\Source\Extractors\SmtpExtractor.cs,PostProcess,The length of the statement  "	using (FileStream fileStream = new FileStream (System.IO.Path.Combine (outputDirectory' "Attachment.Hashes.csv")' FileMode.Append' FileAccess.Write' FileShare.Read)) " is 165.
Long Statement,SessionViewer.SessionProcessors,SmtpExtractor,C:\repos\woanware_SessionViewer\Source\Extractors\SmtpExtractor.cs,HashFiles,The length of the statement  "	string mailFrom = GetSmtpMailFrom (System.IO.Path.Combine (this.dataDirectory' session.Guid.Substring (0' 2)' session.Guid + ".bin")); " is 134.
Long Statement,SessionViewer.PacketProcessors,DnsParser,C:\repos\woanware_SessionViewer\Source\PacketParsers\DnsParser.cs,Process,The length of the statement  "					woanware.IO.WriteToFileStream (fileStream' "DNS Answer: " + resourceRecord.DnsType.ToString () + " " + ab.Data.ToString () + Environment.NewLine); " is 146.
Empty Catch Block,SessionViewer,PacketReconstructor,C:\repos\woanware_SessionViewer\Source\PacketReconstructor.cs,Dispose,The method has an empty catch block.
Empty Catch Block,SessionViewer,Parser,C:\repos\woanware_SessionViewer\Source\Parser.cs,CreateNewSession,The method has an empty catch block.
Empty Catch Block,SessionViewer,Parser,C:\repos\woanware_SessionViewer\Source\Parser.cs,CreateNewSession,The method has an empty catch block.
Empty Catch Block,SessionViewer,SessionWorker,C:\repos\woanware_SessionViewer\Source\SessionWorker.cs,Start,The method has an empty catch block.
Empty Catch Block,SessionViewer.SessionProcessors,HttpFileExtractor,C:\repos\woanware_SessionViewer\Source\Extractors\HttpFileExtractor.cs,Start,The method has an empty catch block.
Empty Catch Block,SessionViewer.SessionProcessors,HttpFileExtractor,C:\repos\woanware_SessionViewer\Source\Extractors\HttpFileExtractor.cs,Start,The method has an empty catch block.
Empty Catch Block,SessionViewer.SessionProcessors,HttpFileExtractor,C:\repos\woanware_SessionViewer\Source\Extractors\HttpFileExtractor.cs,Start,The method has an empty catch block.
Empty Catch Block,SessionViewer.SessionProcessors,HttpFileExtractor,C:\repos\woanware_SessionViewer\Source\Extractors\HttpFileExtractor.cs,ProcessFiles,The method has an empty catch block.
Empty Catch Block,SessionViewer.SessionProcessors,UrlExtractor,C:\repos\woanware_SessionViewer\Source\Extractors\UrlExtractor.cs,Start,The method has an empty catch block.
Empty Catch Block,SessionViewer.SessionProcessors,UrlExtractor,C:\repos\woanware_SessionViewer\Source\Extractors\UrlExtractor.cs,Start,The method has an empty catch block.
Empty Catch Block,SessionViewer.SessionProcessors,UrlExtractor,C:\repos\woanware_SessionViewer\Source\Extractors\UrlExtractor.cs,Start,The method has an empty catch block.
Empty Catch Block,SessionViewer.SessionProcessors,SmtpExtractor,C:\repos\woanware_SessionViewer\Source\Extractors\SmtpExtractor.cs,Start,The method has an empty catch block.
Empty Catch Block,SessionViewer.SessionProcessors,SmtpExtractor,C:\repos\woanware_SessionViewer\Source\Extractors\SmtpExtractor.cs,Start,The method has an empty catch block.
Empty Catch Block,SessionViewer.SessionProcessors,SmtpExtractor,C:\repos\woanware_SessionViewer\Source\Extractors\SmtpExtractor.cs,Start,The method has an empty catch block.
Empty Catch Block,SessionViewer.SessionProcessors,SmtpExtractor,C:\repos\woanware_SessionViewer\Source\Extractors\SmtpExtractor.cs,HashFiles,The method has an empty catch block.
Empty Catch Block,SessionViewer.SessionParsers,HttpParser,C:\repos\woanware_SessionViewer\Source\SessionParsers\HttpParser.cs,ParseLinks,The method has an empty catch block.
Magic Number,SessionViewer,FormMain,C:\repos\woanware_SessionViewer\Source\FormMain.cs,menuFileImport_Click,The following statement contains a magic number: using (FormImport formOpen = new FormImport ()) {  	if (formOpen.ShowDialog (this) == System.Windows.Forms.DialogResult.Cancel) {  		return;  	}  	this.dataDirectory = formOpen.DatabaseFile;  	_hourGlass = new HourGlass (this);  	SetProcessingStatus (false);  	listSession.ClearObjects ();  	_parser.IgnoreLocal = toolBtnRemoteOnly.Checked;  	_parser.BufferInterval = _settings.BufferInterval;  	_parser.SessionInterval = _settings.SessionInterval;  	_parser.ClearParsers ();  	foreach (InterfaceParser parser in this.parsers) {  		if (parser.Enabled == false) {  			continue;  		}  		_parser.SetParser (parser);  	}  	long maxSize = 0;  	switch (cboMaxSession.SelectedIndex) {  	case 0:  		// None  		break;  	case 1:  		// 1 MB  		maxSize = 1048576;  		break;  	case 2:  		// 2 MB  		maxSize = 2097152;  		break;  	case 3:  		// 3 MB  		maxSize = 3145728;  		break;  	case 4:  		// 4 MB  		maxSize = 4194304;  		break;  	case 5:  		// 5 MB  		maxSize = 5242880;  		break;  	case 6:  		// 10 MB  		maxSize = 10485760;  		break;  	case 7:  		// 15 MB  		maxSize = 15728640;  		break;  	}  	_parser.Parse (formOpen.PcapFile' formOpen.DatabaseFile' maxSize);  }  
Magic Number,SessionViewer,FormMain,C:\repos\woanware_SessionViewer\Source\FormMain.cs,menuFileImport_Click,The following statement contains a magic number: using (FormImport formOpen = new FormImport ()) {  	if (formOpen.ShowDialog (this) == System.Windows.Forms.DialogResult.Cancel) {  		return;  	}  	this.dataDirectory = formOpen.DatabaseFile;  	_hourGlass = new HourGlass (this);  	SetProcessingStatus (false);  	listSession.ClearObjects ();  	_parser.IgnoreLocal = toolBtnRemoteOnly.Checked;  	_parser.BufferInterval = _settings.BufferInterval;  	_parser.SessionInterval = _settings.SessionInterval;  	_parser.ClearParsers ();  	foreach (InterfaceParser parser in this.parsers) {  		if (parser.Enabled == false) {  			continue;  		}  		_parser.SetParser (parser);  	}  	long maxSize = 0;  	switch (cboMaxSession.SelectedIndex) {  	case 0:  		// None  		break;  	case 1:  		// 1 MB  		maxSize = 1048576;  		break;  	case 2:  		// 2 MB  		maxSize = 2097152;  		break;  	case 3:  		// 3 MB  		maxSize = 3145728;  		break;  	case 4:  		// 4 MB  		maxSize = 4194304;  		break;  	case 5:  		// 5 MB  		maxSize = 5242880;  		break;  	case 6:  		// 10 MB  		maxSize = 10485760;  		break;  	case 7:  		// 15 MB  		maxSize = 15728640;  		break;  	}  	_parser.Parse (formOpen.PcapFile' formOpen.DatabaseFile' maxSize);  }  
Magic Number,SessionViewer,FormMain,C:\repos\woanware_SessionViewer\Source\FormMain.cs,menuFileImport_Click,The following statement contains a magic number: using (FormImport formOpen = new FormImport ()) {  	if (formOpen.ShowDialog (this) == System.Windows.Forms.DialogResult.Cancel) {  		return;  	}  	this.dataDirectory = formOpen.DatabaseFile;  	_hourGlass = new HourGlass (this);  	SetProcessingStatus (false);  	listSession.ClearObjects ();  	_parser.IgnoreLocal = toolBtnRemoteOnly.Checked;  	_parser.BufferInterval = _settings.BufferInterval;  	_parser.SessionInterval = _settings.SessionInterval;  	_parser.ClearParsers ();  	foreach (InterfaceParser parser in this.parsers) {  		if (parser.Enabled == false) {  			continue;  		}  		_parser.SetParser (parser);  	}  	long maxSize = 0;  	switch (cboMaxSession.SelectedIndex) {  	case 0:  		// None  		break;  	case 1:  		// 1 MB  		maxSize = 1048576;  		break;  	case 2:  		// 2 MB  		maxSize = 2097152;  		break;  	case 3:  		// 3 MB  		maxSize = 3145728;  		break;  	case 4:  		// 4 MB  		maxSize = 4194304;  		break;  	case 5:  		// 5 MB  		maxSize = 5242880;  		break;  	case 6:  		// 10 MB  		maxSize = 10485760;  		break;  	case 7:  		// 15 MB  		maxSize = 15728640;  		break;  	}  	_parser.Parse (formOpen.PcapFile' formOpen.DatabaseFile' maxSize);  }  
Magic Number,SessionViewer,FormMain,C:\repos\woanware_SessionViewer\Source\FormMain.cs,menuFileImport_Click,The following statement contains a magic number: using (FormImport formOpen = new FormImport ()) {  	if (formOpen.ShowDialog (this) == System.Windows.Forms.DialogResult.Cancel) {  		return;  	}  	this.dataDirectory = formOpen.DatabaseFile;  	_hourGlass = new HourGlass (this);  	SetProcessingStatus (false);  	listSession.ClearObjects ();  	_parser.IgnoreLocal = toolBtnRemoteOnly.Checked;  	_parser.BufferInterval = _settings.BufferInterval;  	_parser.SessionInterval = _settings.SessionInterval;  	_parser.ClearParsers ();  	foreach (InterfaceParser parser in this.parsers) {  		if (parser.Enabled == false) {  			continue;  		}  		_parser.SetParser (parser);  	}  	long maxSize = 0;  	switch (cboMaxSession.SelectedIndex) {  	case 0:  		// None  		break;  	case 1:  		// 1 MB  		maxSize = 1048576;  		break;  	case 2:  		// 2 MB  		maxSize = 2097152;  		break;  	case 3:  		// 3 MB  		maxSize = 3145728;  		break;  	case 4:  		// 4 MB  		maxSize = 4194304;  		break;  	case 5:  		// 5 MB  		maxSize = 5242880;  		break;  	case 6:  		// 10 MB  		maxSize = 10485760;  		break;  	case 7:  		// 15 MB  		maxSize = 15728640;  		break;  	}  	_parser.Parse (formOpen.PcapFile' formOpen.DatabaseFile' maxSize);  }  
Magic Number,SessionViewer,FormMain,C:\repos\woanware_SessionViewer\Source\FormMain.cs,menuFileImport_Click,The following statement contains a magic number: using (FormImport formOpen = new FormImport ()) {  	if (formOpen.ShowDialog (this) == System.Windows.Forms.DialogResult.Cancel) {  		return;  	}  	this.dataDirectory = formOpen.DatabaseFile;  	_hourGlass = new HourGlass (this);  	SetProcessingStatus (false);  	listSession.ClearObjects ();  	_parser.IgnoreLocal = toolBtnRemoteOnly.Checked;  	_parser.BufferInterval = _settings.BufferInterval;  	_parser.SessionInterval = _settings.SessionInterval;  	_parser.ClearParsers ();  	foreach (InterfaceParser parser in this.parsers) {  		if (parser.Enabled == false) {  			continue;  		}  		_parser.SetParser (parser);  	}  	long maxSize = 0;  	switch (cboMaxSession.SelectedIndex) {  	case 0:  		// None  		break;  	case 1:  		// 1 MB  		maxSize = 1048576;  		break;  	case 2:  		// 2 MB  		maxSize = 2097152;  		break;  	case 3:  		// 3 MB  		maxSize = 3145728;  		break;  	case 4:  		// 4 MB  		maxSize = 4194304;  		break;  	case 5:  		// 5 MB  		maxSize = 5242880;  		break;  	case 6:  		// 10 MB  		maxSize = 10485760;  		break;  	case 7:  		// 15 MB  		maxSize = 15728640;  		break;  	}  	_parser.Parse (formOpen.PcapFile' formOpen.DatabaseFile' maxSize);  }  
Magic Number,SessionViewer,FormMain,C:\repos\woanware_SessionViewer\Source\FormMain.cs,menuFileImport_Click,The following statement contains a magic number: using (FormImport formOpen = new FormImport ()) {  	if (formOpen.ShowDialog (this) == System.Windows.Forms.DialogResult.Cancel) {  		return;  	}  	this.dataDirectory = formOpen.DatabaseFile;  	_hourGlass = new HourGlass (this);  	SetProcessingStatus (false);  	listSession.ClearObjects ();  	_parser.IgnoreLocal = toolBtnRemoteOnly.Checked;  	_parser.BufferInterval = _settings.BufferInterval;  	_parser.SessionInterval = _settings.SessionInterval;  	_parser.ClearParsers ();  	foreach (InterfaceParser parser in this.parsers) {  		if (parser.Enabled == false) {  			continue;  		}  		_parser.SetParser (parser);  	}  	long maxSize = 0;  	switch (cboMaxSession.SelectedIndex) {  	case 0:  		// None  		break;  	case 1:  		// 1 MB  		maxSize = 1048576;  		break;  	case 2:  		// 2 MB  		maxSize = 2097152;  		break;  	case 3:  		// 3 MB  		maxSize = 3145728;  		break;  	case 4:  		// 4 MB  		maxSize = 4194304;  		break;  	case 5:  		// 5 MB  		maxSize = 5242880;  		break;  	case 6:  		// 10 MB  		maxSize = 10485760;  		break;  	case 7:  		// 15 MB  		maxSize = 15728640;  		break;  	}  	_parser.Parse (formOpen.PcapFile' formOpen.DatabaseFile' maxSize);  }  
Magic Number,SessionViewer,FormMain,C:\repos\woanware_SessionViewer\Source\FormMain.cs,menuFileImport_Click,The following statement contains a magic number: using (FormImport formOpen = new FormImport ()) {  	if (formOpen.ShowDialog (this) == System.Windows.Forms.DialogResult.Cancel) {  		return;  	}  	this.dataDirectory = formOpen.DatabaseFile;  	_hourGlass = new HourGlass (this);  	SetProcessingStatus (false);  	listSession.ClearObjects ();  	_parser.IgnoreLocal = toolBtnRemoteOnly.Checked;  	_parser.BufferInterval = _settings.BufferInterval;  	_parser.SessionInterval = _settings.SessionInterval;  	_parser.ClearParsers ();  	foreach (InterfaceParser parser in this.parsers) {  		if (parser.Enabled == false) {  			continue;  		}  		_parser.SetParser (parser);  	}  	long maxSize = 0;  	switch (cboMaxSession.SelectedIndex) {  	case 0:  		// None  		break;  	case 1:  		// 1 MB  		maxSize = 1048576;  		break;  	case 2:  		// 2 MB  		maxSize = 2097152;  		break;  	case 3:  		// 3 MB  		maxSize = 3145728;  		break;  	case 4:  		// 4 MB  		maxSize = 4194304;  		break;  	case 5:  		// 5 MB  		maxSize = 5242880;  		break;  	case 6:  		// 10 MB  		maxSize = 10485760;  		break;  	case 7:  		// 15 MB  		maxSize = 15728640;  		break;  	}  	_parser.Parse (formOpen.PcapFile' formOpen.DatabaseFile' maxSize);  }  
Magic Number,SessionViewer,FormMain,C:\repos\woanware_SessionViewer\Source\FormMain.cs,menuFileImport_Click,The following statement contains a magic number: using (FormImport formOpen = new FormImport ()) {  	if (formOpen.ShowDialog (this) == System.Windows.Forms.DialogResult.Cancel) {  		return;  	}  	this.dataDirectory = formOpen.DatabaseFile;  	_hourGlass = new HourGlass (this);  	SetProcessingStatus (false);  	listSession.ClearObjects ();  	_parser.IgnoreLocal = toolBtnRemoteOnly.Checked;  	_parser.BufferInterval = _settings.BufferInterval;  	_parser.SessionInterval = _settings.SessionInterval;  	_parser.ClearParsers ();  	foreach (InterfaceParser parser in this.parsers) {  		if (parser.Enabled == false) {  			continue;  		}  		_parser.SetParser (parser);  	}  	long maxSize = 0;  	switch (cboMaxSession.SelectedIndex) {  	case 0:  		// None  		break;  	case 1:  		// 1 MB  		maxSize = 1048576;  		break;  	case 2:  		// 2 MB  		maxSize = 2097152;  		break;  	case 3:  		// 3 MB  		maxSize = 3145728;  		break;  	case 4:  		// 4 MB  		maxSize = 4194304;  		break;  	case 5:  		// 5 MB  		maxSize = 5242880;  		break;  	case 6:  		// 10 MB  		maxSize = 10485760;  		break;  	case 7:  		// 15 MB  		maxSize = 15728640;  		break;  	}  	_parser.Parse (formOpen.PcapFile' formOpen.DatabaseFile' maxSize);  }  
Magic Number,SessionViewer,FormMain,C:\repos\woanware_SessionViewer\Source\FormMain.cs,menuFileImport_Click,The following statement contains a magic number: using (FormImport formOpen = new FormImport ()) {  	if (formOpen.ShowDialog (this) == System.Windows.Forms.DialogResult.Cancel) {  		return;  	}  	this.dataDirectory = formOpen.DatabaseFile;  	_hourGlass = new HourGlass (this);  	SetProcessingStatus (false);  	listSession.ClearObjects ();  	_parser.IgnoreLocal = toolBtnRemoteOnly.Checked;  	_parser.BufferInterval = _settings.BufferInterval;  	_parser.SessionInterval = _settings.SessionInterval;  	_parser.ClearParsers ();  	foreach (InterfaceParser parser in this.parsers) {  		if (parser.Enabled == false) {  			continue;  		}  		_parser.SetParser (parser);  	}  	long maxSize = 0;  	switch (cboMaxSession.SelectedIndex) {  	case 0:  		// None  		break;  	case 1:  		// 1 MB  		maxSize = 1048576;  		break;  	case 2:  		// 2 MB  		maxSize = 2097152;  		break;  	case 3:  		// 3 MB  		maxSize = 3145728;  		break;  	case 4:  		// 4 MB  		maxSize = 4194304;  		break;  	case 5:  		// 5 MB  		maxSize = 5242880;  		break;  	case 6:  		// 10 MB  		maxSize = 10485760;  		break;  	case 7:  		// 15 MB  		maxSize = 15728640;  		break;  	}  	_parser.Parse (formOpen.PcapFile' formOpen.DatabaseFile' maxSize);  }  
Magic Number,SessionViewer,FormMain,C:\repos\woanware_SessionViewer\Source\FormMain.cs,menuFileImport_Click,The following statement contains a magic number: using (FormImport formOpen = new FormImport ()) {  	if (formOpen.ShowDialog (this) == System.Windows.Forms.DialogResult.Cancel) {  		return;  	}  	this.dataDirectory = formOpen.DatabaseFile;  	_hourGlass = new HourGlass (this);  	SetProcessingStatus (false);  	listSession.ClearObjects ();  	_parser.IgnoreLocal = toolBtnRemoteOnly.Checked;  	_parser.BufferInterval = _settings.BufferInterval;  	_parser.SessionInterval = _settings.SessionInterval;  	_parser.ClearParsers ();  	foreach (InterfaceParser parser in this.parsers) {  		if (parser.Enabled == false) {  			continue;  		}  		_parser.SetParser (parser);  	}  	long maxSize = 0;  	switch (cboMaxSession.SelectedIndex) {  	case 0:  		// None  		break;  	case 1:  		// 1 MB  		maxSize = 1048576;  		break;  	case 2:  		// 2 MB  		maxSize = 2097152;  		break;  	case 3:  		// 3 MB  		maxSize = 3145728;  		break;  	case 4:  		// 4 MB  		maxSize = 4194304;  		break;  	case 5:  		// 5 MB  		maxSize = 5242880;  		break;  	case 6:  		// 10 MB  		maxSize = 10485760;  		break;  	case 7:  		// 15 MB  		maxSize = 15728640;  		break;  	}  	_parser.Parse (formOpen.PcapFile' formOpen.DatabaseFile' maxSize);  }  
Magic Number,SessionViewer,FormMain,C:\repos\woanware_SessionViewer\Source\FormMain.cs,menuFileImport_Click,The following statement contains a magic number: using (FormImport formOpen = new FormImport ()) {  	if (formOpen.ShowDialog (this) == System.Windows.Forms.DialogResult.Cancel) {  		return;  	}  	this.dataDirectory = formOpen.DatabaseFile;  	_hourGlass = new HourGlass (this);  	SetProcessingStatus (false);  	listSession.ClearObjects ();  	_parser.IgnoreLocal = toolBtnRemoteOnly.Checked;  	_parser.BufferInterval = _settings.BufferInterval;  	_parser.SessionInterval = _settings.SessionInterval;  	_parser.ClearParsers ();  	foreach (InterfaceParser parser in this.parsers) {  		if (parser.Enabled == false) {  			continue;  		}  		_parser.SetParser (parser);  	}  	long maxSize = 0;  	switch (cboMaxSession.SelectedIndex) {  	case 0:  		// None  		break;  	case 1:  		// 1 MB  		maxSize = 1048576;  		break;  	case 2:  		// 2 MB  		maxSize = 2097152;  		break;  	case 3:  		// 3 MB  		maxSize = 3145728;  		break;  	case 4:  		// 4 MB  		maxSize = 4194304;  		break;  	case 5:  		// 5 MB  		maxSize = 5242880;  		break;  	case 6:  		// 10 MB  		maxSize = 10485760;  		break;  	case 7:  		// 15 MB  		maxSize = 15728640;  		break;  	}  	_parser.Parse (formOpen.PcapFile' formOpen.DatabaseFile' maxSize);  }  
Magic Number,SessionViewer,FormMain,C:\repos\woanware_SessionViewer\Source\FormMain.cs,menuFileImport_Click,The following statement contains a magic number: using (FormImport formOpen = new FormImport ()) {  	if (formOpen.ShowDialog (this) == System.Windows.Forms.DialogResult.Cancel) {  		return;  	}  	this.dataDirectory = formOpen.DatabaseFile;  	_hourGlass = new HourGlass (this);  	SetProcessingStatus (false);  	listSession.ClearObjects ();  	_parser.IgnoreLocal = toolBtnRemoteOnly.Checked;  	_parser.BufferInterval = _settings.BufferInterval;  	_parser.SessionInterval = _settings.SessionInterval;  	_parser.ClearParsers ();  	foreach (InterfaceParser parser in this.parsers) {  		if (parser.Enabled == false) {  			continue;  		}  		_parser.SetParser (parser);  	}  	long maxSize = 0;  	switch (cboMaxSession.SelectedIndex) {  	case 0:  		// None  		break;  	case 1:  		// 1 MB  		maxSize = 1048576;  		break;  	case 2:  		// 2 MB  		maxSize = 2097152;  		break;  	case 3:  		// 3 MB  		maxSize = 3145728;  		break;  	case 4:  		// 4 MB  		maxSize = 4194304;  		break;  	case 5:  		// 5 MB  		maxSize = 5242880;  		break;  	case 6:  		// 10 MB  		maxSize = 10485760;  		break;  	case 7:  		// 15 MB  		maxSize = 15728640;  		break;  	}  	_parser.Parse (formOpen.PcapFile' formOpen.DatabaseFile' maxSize);  }  
Magic Number,SessionViewer,FormMain,C:\repos\woanware_SessionViewer\Source\FormMain.cs,menuFileImport_Click,The following statement contains a magic number: using (FormImport formOpen = new FormImport ()) {  	if (formOpen.ShowDialog (this) == System.Windows.Forms.DialogResult.Cancel) {  		return;  	}  	this.dataDirectory = formOpen.DatabaseFile;  	_hourGlass = new HourGlass (this);  	SetProcessingStatus (false);  	listSession.ClearObjects ();  	_parser.IgnoreLocal = toolBtnRemoteOnly.Checked;  	_parser.BufferInterval = _settings.BufferInterval;  	_parser.SessionInterval = _settings.SessionInterval;  	_parser.ClearParsers ();  	foreach (InterfaceParser parser in this.parsers) {  		if (parser.Enabled == false) {  			continue;  		}  		_parser.SetParser (parser);  	}  	long maxSize = 0;  	switch (cboMaxSession.SelectedIndex) {  	case 0:  		// None  		break;  	case 1:  		// 1 MB  		maxSize = 1048576;  		break;  	case 2:  		// 2 MB  		maxSize = 2097152;  		break;  	case 3:  		// 3 MB  		maxSize = 3145728;  		break;  	case 4:  		// 4 MB  		maxSize = 4194304;  		break;  	case 5:  		// 5 MB  		maxSize = 5242880;  		break;  	case 6:  		// 10 MB  		maxSize = 10485760;  		break;  	case 7:  		// 15 MB  		maxSize = 15728640;  		break;  	}  	_parser.Parse (formOpen.PcapFile' formOpen.DatabaseFile' maxSize);  }  
Magic Number,SessionViewer,FormMain,C:\repos\woanware_SessionViewer\Source\FormMain.cs,menuFileImport_Click,The following statement contains a magic number: switch (cboMaxSession.SelectedIndex) {  case 0:  	// None  	break;  case 1:  	// 1 MB  	maxSize = 1048576;  	break;  case 2:  	// 2 MB  	maxSize = 2097152;  	break;  case 3:  	// 3 MB  	maxSize = 3145728;  	break;  case 4:  	// 4 MB  	maxSize = 4194304;  	break;  case 5:  	// 5 MB  	maxSize = 5242880;  	break;  case 6:  	// 10 MB  	maxSize = 10485760;  	break;  case 7:  	// 15 MB  	maxSize = 15728640;  	break;  }  
Magic Number,SessionViewer,FormMain,C:\repos\woanware_SessionViewer\Source\FormMain.cs,menuFileImport_Click,The following statement contains a magic number: switch (cboMaxSession.SelectedIndex) {  case 0:  	// None  	break;  case 1:  	// 1 MB  	maxSize = 1048576;  	break;  case 2:  	// 2 MB  	maxSize = 2097152;  	break;  case 3:  	// 3 MB  	maxSize = 3145728;  	break;  case 4:  	// 4 MB  	maxSize = 4194304;  	break;  case 5:  	// 5 MB  	maxSize = 5242880;  	break;  case 6:  	// 10 MB  	maxSize = 10485760;  	break;  case 7:  	// 15 MB  	maxSize = 15728640;  	break;  }  
Magic Number,SessionViewer,FormMain,C:\repos\woanware_SessionViewer\Source\FormMain.cs,menuFileImport_Click,The following statement contains a magic number: switch (cboMaxSession.SelectedIndex) {  case 0:  	// None  	break;  case 1:  	// 1 MB  	maxSize = 1048576;  	break;  case 2:  	// 2 MB  	maxSize = 2097152;  	break;  case 3:  	// 3 MB  	maxSize = 3145728;  	break;  case 4:  	// 4 MB  	maxSize = 4194304;  	break;  case 5:  	// 5 MB  	maxSize = 5242880;  	break;  case 6:  	// 10 MB  	maxSize = 10485760;  	break;  case 7:  	// 15 MB  	maxSize = 15728640;  	break;  }  
Magic Number,SessionViewer,FormMain,C:\repos\woanware_SessionViewer\Source\FormMain.cs,menuFileImport_Click,The following statement contains a magic number: switch (cboMaxSession.SelectedIndex) {  case 0:  	// None  	break;  case 1:  	// 1 MB  	maxSize = 1048576;  	break;  case 2:  	// 2 MB  	maxSize = 2097152;  	break;  case 3:  	// 3 MB  	maxSize = 3145728;  	break;  case 4:  	// 4 MB  	maxSize = 4194304;  	break;  case 5:  	// 5 MB  	maxSize = 5242880;  	break;  case 6:  	// 10 MB  	maxSize = 10485760;  	break;  case 7:  	// 15 MB  	maxSize = 15728640;  	break;  }  
Magic Number,SessionViewer,FormMain,C:\repos\woanware_SessionViewer\Source\FormMain.cs,menuFileImport_Click,The following statement contains a magic number: switch (cboMaxSession.SelectedIndex) {  case 0:  	// None  	break;  case 1:  	// 1 MB  	maxSize = 1048576;  	break;  case 2:  	// 2 MB  	maxSize = 2097152;  	break;  case 3:  	// 3 MB  	maxSize = 3145728;  	break;  case 4:  	// 4 MB  	maxSize = 4194304;  	break;  case 5:  	// 5 MB  	maxSize = 5242880;  	break;  case 6:  	// 10 MB  	maxSize = 10485760;  	break;  case 7:  	// 15 MB  	maxSize = 15728640;  	break;  }  
Magic Number,SessionViewer,FormMain,C:\repos\woanware_SessionViewer\Source\FormMain.cs,menuFileImport_Click,The following statement contains a magic number: switch (cboMaxSession.SelectedIndex) {  case 0:  	// None  	break;  case 1:  	// 1 MB  	maxSize = 1048576;  	break;  case 2:  	// 2 MB  	maxSize = 2097152;  	break;  case 3:  	// 3 MB  	maxSize = 3145728;  	break;  case 4:  	// 4 MB  	maxSize = 4194304;  	break;  case 5:  	// 5 MB  	maxSize = 5242880;  	break;  case 6:  	// 10 MB  	maxSize = 10485760;  	break;  case 7:  	// 15 MB  	maxSize = 15728640;  	break;  }  
Magic Number,SessionViewer,FormMain,C:\repos\woanware_SessionViewer\Source\FormMain.cs,menuFileImport_Click,The following statement contains a magic number: switch (cboMaxSession.SelectedIndex) {  case 0:  	// None  	break;  case 1:  	// 1 MB  	maxSize = 1048576;  	break;  case 2:  	// 2 MB  	maxSize = 2097152;  	break;  case 3:  	// 3 MB  	maxSize = 3145728;  	break;  case 4:  	// 4 MB  	maxSize = 4194304;  	break;  case 5:  	// 5 MB  	maxSize = 5242880;  	break;  case 6:  	// 10 MB  	maxSize = 10485760;  	break;  case 7:  	// 15 MB  	maxSize = 15728640;  	break;  }  
Magic Number,SessionViewer,FormMain,C:\repos\woanware_SessionViewer\Source\FormMain.cs,menuFileImport_Click,The following statement contains a magic number: switch (cboMaxSession.SelectedIndex) {  case 0:  	// None  	break;  case 1:  	// 1 MB  	maxSize = 1048576;  	break;  case 2:  	// 2 MB  	maxSize = 2097152;  	break;  case 3:  	// 3 MB  	maxSize = 3145728;  	break;  case 4:  	// 4 MB  	maxSize = 4194304;  	break;  case 5:  	// 5 MB  	maxSize = 5242880;  	break;  case 6:  	// 10 MB  	maxSize = 10485760;  	break;  case 7:  	// 15 MB  	maxSize = 15728640;  	break;  }  
Magic Number,SessionViewer,FormMain,C:\repos\woanware_SessionViewer\Source\FormMain.cs,menuFileImport_Click,The following statement contains a magic number: switch (cboMaxSession.SelectedIndex) {  case 0:  	// None  	break;  case 1:  	// 1 MB  	maxSize = 1048576;  	break;  case 2:  	// 2 MB  	maxSize = 2097152;  	break;  case 3:  	// 3 MB  	maxSize = 3145728;  	break;  case 4:  	// 4 MB  	maxSize = 4194304;  	break;  case 5:  	// 5 MB  	maxSize = 5242880;  	break;  case 6:  	// 10 MB  	maxSize = 10485760;  	break;  case 7:  	// 15 MB  	maxSize = 15728640;  	break;  }  
Magic Number,SessionViewer,FormMain,C:\repos\woanware_SessionViewer\Source\FormMain.cs,menuFileImport_Click,The following statement contains a magic number: switch (cboMaxSession.SelectedIndex) {  case 0:  	// None  	break;  case 1:  	// 1 MB  	maxSize = 1048576;  	break;  case 2:  	// 2 MB  	maxSize = 2097152;  	break;  case 3:  	// 3 MB  	maxSize = 3145728;  	break;  case 4:  	// 4 MB  	maxSize = 4194304;  	break;  case 5:  	// 5 MB  	maxSize = 5242880;  	break;  case 6:  	// 10 MB  	maxSize = 10485760;  	break;  case 7:  	// 15 MB  	maxSize = 15728640;  	break;  }  
Magic Number,SessionViewer,FormMain,C:\repos\woanware_SessionViewer\Source\FormMain.cs,menuFileImport_Click,The following statement contains a magic number: switch (cboMaxSession.SelectedIndex) {  case 0:  	// None  	break;  case 1:  	// 1 MB  	maxSize = 1048576;  	break;  case 2:  	// 2 MB  	maxSize = 2097152;  	break;  case 3:  	// 3 MB  	maxSize = 3145728;  	break;  case 4:  	// 4 MB  	maxSize = 4194304;  	break;  case 5:  	// 5 MB  	maxSize = 5242880;  	break;  case 6:  	// 10 MB  	maxSize = 10485760;  	break;  case 7:  	// 15 MB  	maxSize = 15728640;  	break;  }  
Magic Number,SessionViewer,FormMain,C:\repos\woanware_SessionViewer\Source\FormMain.cs,menuFileImport_Click,The following statement contains a magic number: switch (cboMaxSession.SelectedIndex) {  case 0:  	// None  	break;  case 1:  	// 1 MB  	maxSize = 1048576;  	break;  case 2:  	// 2 MB  	maxSize = 2097152;  	break;  case 3:  	// 3 MB  	maxSize = 3145728;  	break;  case 4:  	// 4 MB  	maxSize = 4194304;  	break;  case 5:  	// 5 MB  	maxSize = 5242880;  	break;  case 6:  	// 10 MB  	maxSize = 10485760;  	break;  case 7:  	// 15 MB  	maxSize = 15728640;  	break;  }  
Magic Number,SessionViewer,FormMain,C:\repos\woanware_SessionViewer\Source\FormMain.cs,menuFileImport_Click,The following statement contains a magic number: switch (cboMaxSession.SelectedIndex) {  case 0:  	// None  	break;  case 1:  	// 1 MB  	maxSize = 1048576;  	break;  case 2:  	// 2 MB  	maxSize = 2097152;  	break;  case 3:  	// 3 MB  	maxSize = 3145728;  	break;  case 4:  	// 4 MB  	maxSize = 4194304;  	break;  case 5:  	// 5 MB  	maxSize = 5242880;  	break;  case 6:  	// 10 MB  	maxSize = 10485760;  	break;  case 7:  	// 15 MB  	maxSize = 15728640;  	break;  }  
Magic Number,SessionViewer,FormMain,C:\repos\woanware_SessionViewer\Source\FormMain.cs,menuFileImport_Click,The following statement contains a magic number: maxSize = 1048576;  
Magic Number,SessionViewer,FormMain,C:\repos\woanware_SessionViewer\Source\FormMain.cs,menuFileImport_Click,The following statement contains a magic number: maxSize = 2097152;  
Magic Number,SessionViewer,FormMain,C:\repos\woanware_SessionViewer\Source\FormMain.cs,menuFileImport_Click,The following statement contains a magic number: maxSize = 3145728;  
Magic Number,SessionViewer,FormMain,C:\repos\woanware_SessionViewer\Source\FormMain.cs,menuFileImport_Click,The following statement contains a magic number: maxSize = 4194304;  
Magic Number,SessionViewer,FormMain,C:\repos\woanware_SessionViewer\Source\FormMain.cs,menuFileImport_Click,The following statement contains a magic number: maxSize = 5242880;  
Magic Number,SessionViewer,FormMain,C:\repos\woanware_SessionViewer\Source\FormMain.cs,menuFileImport_Click,The following statement contains a magic number: maxSize = 10485760;  
Magic Number,SessionViewer,FormMain,C:\repos\woanware_SessionViewer\Source\FormMain.cs,menuFileImport_Click,The following statement contains a magic number: maxSize = 15728640;  
Magic Number,SessionViewer,FormMain,C:\repos\woanware_SessionViewer\Source\FormMain.cs,LoadSession,The following statement contains a magic number: (new Thread (() =>  {  	MethodInvoker methodInvoker = delegate {  		try {  			using (new HourGlass (this)) {  				if (session == null) {  					UserInterface.DisplayErrorMessageBox (this' "Unable to locate session");  					return;  				}  				string filePath = System.IO.Path.Combine (this.dataDirectory' session.Guid.Substring (0' 2)' session.Guid + ".bin");  				if (File.Exists (filePath) == false) {  					UserInterface.DisplayErrorMessageBox (this' "Session data file does not exist: " + filePath);  					return;  				}  				byte[] temp = File.ReadAllBytes (filePath);  				DynamicByteProvider dynamicByteProvider = new DynamicByteProvider (temp);  				hexBox.ByteProvider = dynamicByteProvider;  				temp = woanware.Text.ReplaceNulls (temp);  				FileInfo fileInfo = new FileInfo (filePath);  				// Colourised (HTML)  				if (fileInfo.AlternateDataStreamExists ("html") == true) {  					AlternateDataStreamInfo ads = fileInfo.GetAlternateDataStream ("html"' FileMode.Open);  					using (TextReader reader = ads.OpenText ()) {  						webControl.DocumentText = reader.ReadToEnd ();  					}  				}  				else {  					webControl.DocumentText = string.Empty;  				}  				// ASCII  				if (fileInfo.AlternateDataStreamExists ("txt") == true) {  					AlternateDataStreamInfo ads = fileInfo.GetAlternateDataStream ("txt"' FileMode.Open);  					using (TextReader reader = ads.OpenText ()) {  						txtSession.Text = reader.ReadToEnd ();  						txtSession.ScrollToTop ();  					}  				}  				else {  					txtSession.Text = ASCIIEncoding.ASCII.GetString (temp);  					txtSession.ScrollToTop ();  				}  				// Info  				if (fileInfo.AlternateDataStreamExists ("info") == true) {  					AlternateDataStreamInfo ads = fileInfo.GetAlternateDataStream ("info"' FileMode.Open);  					using (TextReader reader = ads.OpenText ()) {  						txtInfo.Text = reader.ReadToEnd ();  						txtInfo.ScrollToTop ();  					}  				}  				else {  					txtInfo.Text = string.Empty;  					txtInfo.ScrollToTop ();  				}  			}  		}  		catch (Exception ex) {  			this.Log ().Error (ex.ToString ());  		}  	};  	if (this.InvokeRequired == true) {  		this.BeginInvoke (methodInvoker);  	}  	else {  		methodInvoker.Invoke ();  	}  })).Start ();  
Magic Number,SessionViewer,FormMain,C:\repos\woanware_SessionViewer\Source\FormMain.cs,LoadSession,The following statement contains a magic number: try {  	using (new HourGlass (this)) {  		if (session == null) {  			UserInterface.DisplayErrorMessageBox (this' "Unable to locate session");  			return;  		}  		string filePath = System.IO.Path.Combine (this.dataDirectory' session.Guid.Substring (0' 2)' session.Guid + ".bin");  		if (File.Exists (filePath) == false) {  			UserInterface.DisplayErrorMessageBox (this' "Session data file does not exist: " + filePath);  			return;  		}  		byte[] temp = File.ReadAllBytes (filePath);  		DynamicByteProvider dynamicByteProvider = new DynamicByteProvider (temp);  		hexBox.ByteProvider = dynamicByteProvider;  		temp = woanware.Text.ReplaceNulls (temp);  		FileInfo fileInfo = new FileInfo (filePath);  		// Colourised (HTML)  		if (fileInfo.AlternateDataStreamExists ("html") == true) {  			AlternateDataStreamInfo ads = fileInfo.GetAlternateDataStream ("html"' FileMode.Open);  			using (TextReader reader = ads.OpenText ()) {  				webControl.DocumentText = reader.ReadToEnd ();  			}  		}  		else {  			webControl.DocumentText = string.Empty;  		}  		// ASCII  		if (fileInfo.AlternateDataStreamExists ("txt") == true) {  			AlternateDataStreamInfo ads = fileInfo.GetAlternateDataStream ("txt"' FileMode.Open);  			using (TextReader reader = ads.OpenText ()) {  				txtSession.Text = reader.ReadToEnd ();  				txtSession.ScrollToTop ();  			}  		}  		else {  			txtSession.Text = ASCIIEncoding.ASCII.GetString (temp);  			txtSession.ScrollToTop ();  		}  		// Info  		if (fileInfo.AlternateDataStreamExists ("info") == true) {  			AlternateDataStreamInfo ads = fileInfo.GetAlternateDataStream ("info"' FileMode.Open);  			using (TextReader reader = ads.OpenText ()) {  				txtInfo.Text = reader.ReadToEnd ();  				txtInfo.ScrollToTop ();  			}  		}  		else {  			txtInfo.Text = string.Empty;  			txtInfo.ScrollToTop ();  		}  	}  }  catch (Exception ex) {  	this.Log ().Error (ex.ToString ());  }  
Magic Number,SessionViewer,FormMain,C:\repos\woanware_SessionViewer\Source\FormMain.cs,LoadSession,The following statement contains a magic number: using (new HourGlass (this)) {  	if (session == null) {  		UserInterface.DisplayErrorMessageBox (this' "Unable to locate session");  		return;  	}  	string filePath = System.IO.Path.Combine (this.dataDirectory' session.Guid.Substring (0' 2)' session.Guid + ".bin");  	if (File.Exists (filePath) == false) {  		UserInterface.DisplayErrorMessageBox (this' "Session data file does not exist: " + filePath);  		return;  	}  	byte[] temp = File.ReadAllBytes (filePath);  	DynamicByteProvider dynamicByteProvider = new DynamicByteProvider (temp);  	hexBox.ByteProvider = dynamicByteProvider;  	temp = woanware.Text.ReplaceNulls (temp);  	FileInfo fileInfo = new FileInfo (filePath);  	// Colourised (HTML)  	if (fileInfo.AlternateDataStreamExists ("html") == true) {  		AlternateDataStreamInfo ads = fileInfo.GetAlternateDataStream ("html"' FileMode.Open);  		using (TextReader reader = ads.OpenText ()) {  			webControl.DocumentText = reader.ReadToEnd ();  		}  	}  	else {  		webControl.DocumentText = string.Empty;  	}  	// ASCII  	if (fileInfo.AlternateDataStreamExists ("txt") == true) {  		AlternateDataStreamInfo ads = fileInfo.GetAlternateDataStream ("txt"' FileMode.Open);  		using (TextReader reader = ads.OpenText ()) {  			txtSession.Text = reader.ReadToEnd ();  			txtSession.ScrollToTop ();  		}  	}  	else {  		txtSession.Text = ASCIIEncoding.ASCII.GetString (temp);  		txtSession.ScrollToTop ();  	}  	// Info  	if (fileInfo.AlternateDataStreamExists ("info") == true) {  		AlternateDataStreamInfo ads = fileInfo.GetAlternateDataStream ("info"' FileMode.Open);  		using (TextReader reader = ads.OpenText ()) {  			txtInfo.Text = reader.ReadToEnd ();  			txtInfo.ScrollToTop ();  		}  	}  	else {  		txtInfo.Text = string.Empty;  		txtInfo.ScrollToTop ();  	}  }  
Magic Number,SessionViewer,Functions,C:\repos\woanware_SessionViewer\Source\Functions.cs,GenerateHtmlToBytes,The following statement contains a magic number: if (html.EndsWith ("\r\n\r\n") == true) {  	html = html.Substring (0' html.Length - 4);  }  
Magic Number,SessionViewer,Functions,C:\repos\woanware_SessionViewer\Source\Functions.cs,GenerateHtmlToBytes,The following statement contains a magic number: html = html.Substring (0' html.Length - 4);  
Magic Number,SessionViewer,PacketReconstructor,C:\repos\woanware_SessionViewer\Source\PacketReconstructor.cs,PacketReconstructor,The following statement contains a magic number: if (Directory.Exists (Path.Combine (_outputPath' Guid.Substring (0' 2))) == false) {  	woanware.IO.CreateDirectory (Path.Combine (_outputPath' Guid.Substring (0' 2)));  }  
Magic Number,SessionViewer,PacketReconstructor,C:\repos\woanware_SessionViewer\Source\PacketReconstructor.cs,PacketReconstructor,The following statement contains a magic number: if (Directory.Exists (Path.Combine (_outputPath' Guid.Substring (0' 2))) == false) {  	woanware.IO.CreateDirectory (Path.Combine (_outputPath' Guid.Substring (0' 2)));  }  
Magic Number,SessionViewer,PacketReconstructor,C:\repos\woanware_SessionViewer\Source\PacketReconstructor.cs,PacketReconstructor,The following statement contains a magic number: woanware.IO.CreateDirectory (Path.Combine (_outputPath' Guid.Substring (0' 2)));  
Magic Number,SessionViewer,PacketReconstructor,C:\repos\woanware_SessionViewer\Source\PacketReconstructor.cs,PacketReconstructor,The following statement contains a magic number: _storage = new System.IO.FileStream (Path.Combine (_outputPath' Guid.Substring (0' 2)' Guid + ".bin")' System.IO.FileMode.Create);  
Magic Number,SessionViewer,PacketReconstructor,C:\repos\woanware_SessionViewer\Source\PacketReconstructor.cs,SavePacketData,The following statement contains a magic number: try {  	// Ignore empty packets  	if (data.Length == 0) {  		return;  	}  	if (data.Length == 1) {  		if (data [0] == 0) {  			return;  		}  	}  	DataSize += data.Length;  	woanware.IO.WriteToFileStream (_storage' data);  	bool isOutBound = false;  	if (index == 0) {  		isOutBound = true;  	}  	// string presanitised = woanware.Text.ByteArrayToString((byte[])data' woanware.Text.EncodingType.Ascii);  	string sanitised = System.Text.Encoding.ASCII.GetString ((byte[])data);  	//string sanitised = rgx.Replace(woanware.Text.ReplaceNulls(presanitised)' ".");  	StringBuilder html = new StringBuilder ();  	if (isOutBound == true) {  		html.Append ("<font color=\"#006600\" size=\"2\">");  	}  	else {  		html.Append ("<font color=\"#FF0000\" size=\"2\">");  	}  	if (_lastPacketOutbound != isOutBound) {  		//if (sanitised.EndsWith("\r\n\r\n") == true)  		//{  		//    sanitised = sanitised.Substring(0' sanitised.Length - 4);  		//}  		sanitised = sanitised.Trim ();  		woanware.IO.WriteToFileStream (_storageHtml' @"<br>");  		//woanware.IO.WriteToFileStream(_storage' "\r\n");  		_lastPacketOutbound = isOutBound;  	}  	string tempHtml = HttpUtility.HtmlEncode (sanitised);  	if (tempHtml.EndsWith ("\r\n\r\n") == true) {  		tempHtml = tempHtml.Substring (0' tempHtml.Length - 4);  	}  	tempHtml = tempHtml.Replace ("\r\n"' "<br>");  	html.Append (tempHtml);  	html.Append (@"</font>");  	woanware.IO.WriteToFileStream (_storageHtml' html.ToString ());  }  catch (Exception ex) {  	this.Log ().Error (ex.ToString ());  }  
Magic Number,SessionViewer,PacketReconstructor,C:\repos\woanware_SessionViewer\Source\PacketReconstructor.cs,SavePacketData,The following statement contains a magic number: if (tempHtml.EndsWith ("\r\n\r\n") == true) {  	tempHtml = tempHtml.Substring (0' tempHtml.Length - 4);  }  
Magic Number,SessionViewer,PacketReconstructor,C:\repos\woanware_SessionViewer\Source\PacketReconstructor.cs,SavePacketData,The following statement contains a magic number: tempHtml = tempHtml.Substring (0' tempHtml.Length - 4);  
Magic Number,SessionViewer,PacketReconstructor,C:\repos\woanware_SessionViewer\Source\PacketReconstructor.cs,ReassembleUdp,The following statement contains a magic number: try {  	long srcx' dstx;  	int src_index' j;  	src_index = -1;  	/* Now check if the packet is for this connection. */srcx = net_src;  	dstx = net_dst;  	/* Check to see if we have seen this source IP and port before.                 (Yes' we have to check both source IP and port; the connection                 might be between two different ports on the same machine.) */for (j = 0; j < 2; j++) {  		if (_srcAddr [j] == srcx && _srcPort [j] == srcport) {  			src_index = j;  			//break;  		}  	}  	/* we didn't find it if src_index == -1 */if (src_index < 0) {  		/* assign it to a src_index and get going */for (j = 0; j < 2; j++) {  			if (_srcPort [j] == 0) {  				_srcAddr [j] = srcx;  				_srcPort [j] = srcport;  				src_index = j;  				break;  			}  		}  	}  	if (src_index < 0) {  		throw new Exception ("Too many addresses!");  	}  	SavePacketData (net_src' net_dst' srcport' dstport' src_index' data' timestamp);  	return src_index;  }  catch (Exception ex) {  	this.Log ().Error (ex.ToString ());  	return -1;  }  
Magic Number,SessionViewer,PacketReconstructor,C:\repos\woanware_SessionViewer\Source\PacketReconstructor.cs,ReassembleUdp,The following statement contains a magic number: try {  	long srcx' dstx;  	int src_index' j;  	src_index = -1;  	/* Now check if the packet is for this connection. */srcx = net_src;  	dstx = net_dst;  	/* Check to see if we have seen this source IP and port before.                 (Yes' we have to check both source IP and port; the connection                 might be between two different ports on the same machine.) */for (j = 0; j < 2; j++) {  		if (_srcAddr [j] == srcx && _srcPort [j] == srcport) {  			src_index = j;  			//break;  		}  	}  	/* we didn't find it if src_index == -1 */if (src_index < 0) {  		/* assign it to a src_index and get going */for (j = 0; j < 2; j++) {  			if (_srcPort [j] == 0) {  				_srcAddr [j] = srcx;  				_srcPort [j] = srcport;  				src_index = j;  				break;  			}  		}  	}  	if (src_index < 0) {  		throw new Exception ("Too many addresses!");  	}  	SavePacketData (net_src' net_dst' srcport' dstport' src_index' data' timestamp);  	return src_index;  }  catch (Exception ex) {  	this.Log ().Error (ex.ToString ());  	return -1;  }  
Magic Number,SessionViewer,PacketReconstructor,C:\repos\woanware_SessionViewer\Source\PacketReconstructor.cs,ReassembleUdp,The following statement contains a magic number: for (j = 0; j < 2; j++) {  	if (_srcAddr [j] == srcx && _srcPort [j] == srcport) {  		src_index = j;  		//break;  	}  }  
Magic Number,SessionViewer,PacketReconstructor,C:\repos\woanware_SessionViewer\Source\PacketReconstructor.cs,ReassembleUdp,The following statement contains a magic number: if (src_index < 0) {  	/* assign it to a src_index and get going */for (j = 0; j < 2; j++) {  		if (_srcPort [j] == 0) {  			_srcAddr [j] = srcx;  			_srcPort [j] = srcport;  			src_index = j;  			break;  		}  	}  }  
Magic Number,SessionViewer,PacketReconstructor,C:\repos\woanware_SessionViewer\Source\PacketReconstructor.cs,ReassembleUdp,The following statement contains a magic number: for (j = 0; j < 2; j++) {  	if (_srcPort [j] == 0) {  		_srcAddr [j] = srcx;  		_srcPort [j] = srcport;  		src_index = j;  		break;  	}  }  
Magic Number,SessionViewer,PacketReconstructor,C:\repos\woanware_SessionViewer\Source\PacketReconstructor.cs,ReassembleTcp,The following statement contains a magic number: try {  	long srcx' dstx;  	int src_index' j;  	bool first = false;  	ulong newseq;  	tcp_frag tmp_frag;  	src_index = -1;  	/* Now check if the packet is for this connection. */srcx = net_src;  	dstx = net_dst;  	/* Check to see if we have seen this source IP and port before.                 (Yes' we have to check both source IP and port; the connection                 might be between two different ports on the same machine.) */for (j = 0; j < 2; j++) {  		if (_srcAddr [j] == srcx && _srcPort [j] == srcport) {  			src_index = j;  			//break;  		}  	}  	/* we didn't find it if src_index == -1 */if (src_index < 0) {  		/* assign it to a src_index and get going */for (j = 0; j < 2; j++) {  			if (_srcPort [j] == 0) {  				_srcAddr [j] = srcx;  				_srcPort [j] = srcport;  				src_index = j;  				first = true;  				break;  			}  		}  	}  	if (src_index < 0) {  		throw new Exception ("Too many addresses!");  	}  	/* Before adding data for this flow to the data_out_file' check whether                  * this frame acks fragments that were already seen. This happens when                  * frames are not in the capture file' but were actually seen by the                   * receiving host (Fixes bug 592).                  */if (_frags [1 - src_index] != null) {  		while (CheckFragments (net_src' net_dst' srcport' dstport' 1 - src_index' timestamp' acknowledgement))  			;  	}  	/* now that we have filed away the srcs' lets get the sequence number stuff figured out */if (first) {  		/* this is the first time we have seen this src's sequence number */_seq [src_index] = sequence + length;  		if (synflag) {  			_seq [src_index]++;  		}  		SavePacketData (net_src' net_dst' srcport' dstport' src_index' data' timestamp);  		return;  	}  	/* if we are here' we have already seen this src' let's                 try and figure out if this packet is in the right place */if (sequence < _seq [src_index]) {  		/* this sequence number seems dated' but                     check the end to make sure it has no more                     info than we have already seen */newseq = sequence + length;  		if (newseq > _seq [src_index]) {  			ulong new_len;  			/* this one has more than we have seen. let's get the                         payload that we have not seen. */new_len = _seq [src_index] - sequence;  			if (data_length <= new_len) {  				data = null;  				data_length = 0;  			}  			else {  				data_length -= new_len;  				byte[] tmpData = new byte[data_length];  				Buffer.BlockCopy (data' (int)new_len' tmpData' 0' (int)data_length);  				//for (ulong i = 0; i < data_length; i++)  				//{  				//    tmpData[i] = data[i + new_len];  				//}  				data = tmpData;  			}  			sequence = _seq [src_index];  			length = newseq - _seq [src_index];  			/* this will now appear to be right on time :) */}  	}  	if (sequence == _seq [src_index]) {  		/* right on time */_seq [src_index] += length;  		if (synflag) {  			_seq [src_index]++;  		}  		if (data != null) {  			SavePacketData (net_src' net_dst' srcport' dstport' src_index' data' timestamp);  		}  		/* done with the packet' see if it caused a fragment to fit */while (CheckFragments (net_src' net_dst' srcport' dstport' src_index' timestamp' acknowledgement))  			;  	}  	else {  		/* out of order packet */if (data_length > 0 && sequence > _seq [src_index]) {  			tmp_frag = new tcp_frag ();  			tmp_frag.data = data;  			tmp_frag.seq = sequence;  			tmp_frag.len = length;  			tmp_frag.data_len = data_length;  			if (_frags [src_index] != null) {  				tmp_frag.next = _frags [src_index];  			}  			else {  				tmp_frag.next = null;  			}  			_frags [src_index] = tmp_frag;  		}  	}  }  catch (Exception ex) {  	this.Log ().Error (ex.ToString ());  }  
Magic Number,SessionViewer,PacketReconstructor,C:\repos\woanware_SessionViewer\Source\PacketReconstructor.cs,ReassembleTcp,The following statement contains a magic number: try {  	long srcx' dstx;  	int src_index' j;  	bool first = false;  	ulong newseq;  	tcp_frag tmp_frag;  	src_index = -1;  	/* Now check if the packet is for this connection. */srcx = net_src;  	dstx = net_dst;  	/* Check to see if we have seen this source IP and port before.                 (Yes' we have to check both source IP and port; the connection                 might be between two different ports on the same machine.) */for (j = 0; j < 2; j++) {  		if (_srcAddr [j] == srcx && _srcPort [j] == srcport) {  			src_index = j;  			//break;  		}  	}  	/* we didn't find it if src_index == -1 */if (src_index < 0) {  		/* assign it to a src_index and get going */for (j = 0; j < 2; j++) {  			if (_srcPort [j] == 0) {  				_srcAddr [j] = srcx;  				_srcPort [j] = srcport;  				src_index = j;  				first = true;  				break;  			}  		}  	}  	if (src_index < 0) {  		throw new Exception ("Too many addresses!");  	}  	/* Before adding data for this flow to the data_out_file' check whether                  * this frame acks fragments that were already seen. This happens when                  * frames are not in the capture file' but were actually seen by the                   * receiving host (Fixes bug 592).                  */if (_frags [1 - src_index] != null) {  		while (CheckFragments (net_src' net_dst' srcport' dstport' 1 - src_index' timestamp' acknowledgement))  			;  	}  	/* now that we have filed away the srcs' lets get the sequence number stuff figured out */if (first) {  		/* this is the first time we have seen this src's sequence number */_seq [src_index] = sequence + length;  		if (synflag) {  			_seq [src_index]++;  		}  		SavePacketData (net_src' net_dst' srcport' dstport' src_index' data' timestamp);  		return;  	}  	/* if we are here' we have already seen this src' let's                 try and figure out if this packet is in the right place */if (sequence < _seq [src_index]) {  		/* this sequence number seems dated' but                     check the end to make sure it has no more                     info than we have already seen */newseq = sequence + length;  		if (newseq > _seq [src_index]) {  			ulong new_len;  			/* this one has more than we have seen. let's get the                         payload that we have not seen. */new_len = _seq [src_index] - sequence;  			if (data_length <= new_len) {  				data = null;  				data_length = 0;  			}  			else {  				data_length -= new_len;  				byte[] tmpData = new byte[data_length];  				Buffer.BlockCopy (data' (int)new_len' tmpData' 0' (int)data_length);  				//for (ulong i = 0; i < data_length; i++)  				//{  				//    tmpData[i] = data[i + new_len];  				//}  				data = tmpData;  			}  			sequence = _seq [src_index];  			length = newseq - _seq [src_index];  			/* this will now appear to be right on time :) */}  	}  	if (sequence == _seq [src_index]) {  		/* right on time */_seq [src_index] += length;  		if (synflag) {  			_seq [src_index]++;  		}  		if (data != null) {  			SavePacketData (net_src' net_dst' srcport' dstport' src_index' data' timestamp);  		}  		/* done with the packet' see if it caused a fragment to fit */while (CheckFragments (net_src' net_dst' srcport' dstport' src_index' timestamp' acknowledgement))  			;  	}  	else {  		/* out of order packet */if (data_length > 0 && sequence > _seq [src_index]) {  			tmp_frag = new tcp_frag ();  			tmp_frag.data = data;  			tmp_frag.seq = sequence;  			tmp_frag.len = length;  			tmp_frag.data_len = data_length;  			if (_frags [src_index] != null) {  				tmp_frag.next = _frags [src_index];  			}  			else {  				tmp_frag.next = null;  			}  			_frags [src_index] = tmp_frag;  		}  	}  }  catch (Exception ex) {  	this.Log ().Error (ex.ToString ());  }  
Magic Number,SessionViewer,PacketReconstructor,C:\repos\woanware_SessionViewer\Source\PacketReconstructor.cs,ReassembleTcp,The following statement contains a magic number: for (j = 0; j < 2; j++) {  	if (_srcAddr [j] == srcx && _srcPort [j] == srcport) {  		src_index = j;  		//break;  	}  }  
Magic Number,SessionViewer,PacketReconstructor,C:\repos\woanware_SessionViewer\Source\PacketReconstructor.cs,ReassembleTcp,The following statement contains a magic number: if (src_index < 0) {  	/* assign it to a src_index and get going */for (j = 0; j < 2; j++) {  		if (_srcPort [j] == 0) {  			_srcAddr [j] = srcx;  			_srcPort [j] = srcport;  			src_index = j;  			first = true;  			break;  		}  	}  }  
Magic Number,SessionViewer,PacketReconstructor,C:\repos\woanware_SessionViewer\Source\PacketReconstructor.cs,ReassembleTcp,The following statement contains a magic number: for (j = 0; j < 2; j++) {  	if (_srcPort [j] == 0) {  		_srcAddr [j] = srcx;  		_srcPort [j] = srcport;  		src_index = j;  		first = true;  		break;  	}  }  
Magic Number,SessionViewer,PacketReconstructor,C:\repos\woanware_SessionViewer\Source\PacketReconstructor.cs,Reset,The following statement contains a magic number: try {  	tcp_frag current' next;  	for (int i = 0; i < 2; i++) {  		_seq [i] = 0;  		_srcAddr [i] = 0;  		_srcPort [i] = 0;  		_tcpPort [i] = 0;  		current = _frags [i];  		while (current != null) {  			next = current.next;  			current.data = null;  			current = null;  			current = next;  		}  		_frags [i] = null;  	}  }  catch (Exception ex) {  	this.Log ().Error (ex.ToString ());  }  
Magic Number,SessionViewer,PacketReconstructor,C:\repos\woanware_SessionViewer\Source\PacketReconstructor.cs,Reset,The following statement contains a magic number: for (int i = 0; i < 2; i++) {  	_seq [i] = 0;  	_srcAddr [i] = 0;  	_srcPort [i] = 0;  	_tcpPort [i] = 0;  	current = _frags [i];  	while (current != null) {  		next = current.next;  		current.data = null;  		current = null;  		current = next;  	}  	_frags [i] = null;  }  
Magic Number,SessionViewer,Parser,C:\repos\woanware_SessionViewer\Source\Parser.cs,Parse,The following statement contains a magic number: try {  	_outputPath = outputPath;  	_maxSize = maxSize;  	// Check for previous DB  	if (File.Exists (System.IO.Path.Combine (_outputPath' Global.DB_FILE)) == true) {  		OnMessage ("Deleting database...");  		string retDel = IO.DeleteFiles (_outputPath);  		if (retDel.Length > 0) {  			OnError ("An error occurred whilst deleting the existing files: " + retDel);  			return;  		}  	}  	woanware.IO.WriteTextToFile ("Start: " + DateTime.Now.ToString () + Environment.NewLine' System.IO.Path.Combine (_outputPath' "Log.txt")' true);  	OnMessage ("Creating database...");  	string ret = Db.CreateDatabase (_outputPath);  	if (ret.Length > 0) {  		OnError ("Unable to create database: " + ret);  		return;  	}  	OnMessage ("Database created...");  	_packetCount = 0;  	_dictionary = new Dictionary<Connection' PacketReconstructor> ();  	OfflinePacketDevice selectedDevice = new OfflinePacketDevice (pcapPath);  	using (PacketCommunicator packetCommunicator = selectedDevice.Open (65536' PacketDeviceOpenAttributes.Promiscuous' 1000)) {  		packetCommunicator.ReceivePackets (0' DispatcherHandler);  	}  	// Write any remaining sessions  	WriteOldSessions (null);  	_dictionary.Clear ();  	_dictionary = null;  	sessionParser.SetProcessed ();  	OnMessage ("All sessions added to queue' now waiting for session parsing to complete...");  	this.done = new AutoResetEvent (false);  	this.done.WaitOne ();  	woanware.IO.WriteTextToFile ("End: " + DateTime.Now.ToString () + Environment.NewLine' System.IO.Path.Combine (_outputPath' "Log.txt")' true);  	woanware.IO.WriteTextToFile ("Packets: " + _packetCount + Environment.NewLine' System.IO.Path.Combine (_outputPath' "Log.txt")' true);  	woanware.IO.WriteTextToFile ("TCP Sessions: " + this.sessionParser.TotalSessions + Environment.NewLine' System.IO.Path.Combine (_outputPath' "Log.txt")' true);  	OnComplete ();  }  catch (Exception ex) {  	OnError ("An error occurred whilst parsing: " + ex.Message);  }  finally {  	IsRunning = false;  }  
Magic Number,SessionViewer,Parser,C:\repos\woanware_SessionViewer\Source\Parser.cs,Parse,The following statement contains a magic number: try {  	_outputPath = outputPath;  	_maxSize = maxSize;  	// Check for previous DB  	if (File.Exists (System.IO.Path.Combine (_outputPath' Global.DB_FILE)) == true) {  		OnMessage ("Deleting database...");  		string retDel = IO.DeleteFiles (_outputPath);  		if (retDel.Length > 0) {  			OnError ("An error occurred whilst deleting the existing files: " + retDel);  			return;  		}  	}  	woanware.IO.WriteTextToFile ("Start: " + DateTime.Now.ToString () + Environment.NewLine' System.IO.Path.Combine (_outputPath' "Log.txt")' true);  	OnMessage ("Creating database...");  	string ret = Db.CreateDatabase (_outputPath);  	if (ret.Length > 0) {  		OnError ("Unable to create database: " + ret);  		return;  	}  	OnMessage ("Database created...");  	_packetCount = 0;  	_dictionary = new Dictionary<Connection' PacketReconstructor> ();  	OfflinePacketDevice selectedDevice = new OfflinePacketDevice (pcapPath);  	using (PacketCommunicator packetCommunicator = selectedDevice.Open (65536' PacketDeviceOpenAttributes.Promiscuous' 1000)) {  		packetCommunicator.ReceivePackets (0' DispatcherHandler);  	}  	// Write any remaining sessions  	WriteOldSessions (null);  	_dictionary.Clear ();  	_dictionary = null;  	sessionParser.SetProcessed ();  	OnMessage ("All sessions added to queue' now waiting for session parsing to complete...");  	this.done = new AutoResetEvent (false);  	this.done.WaitOne ();  	woanware.IO.WriteTextToFile ("End: " + DateTime.Now.ToString () + Environment.NewLine' System.IO.Path.Combine (_outputPath' "Log.txt")' true);  	woanware.IO.WriteTextToFile ("Packets: " + _packetCount + Environment.NewLine' System.IO.Path.Combine (_outputPath' "Log.txt")' true);  	woanware.IO.WriteTextToFile ("TCP Sessions: " + this.sessionParser.TotalSessions + Environment.NewLine' System.IO.Path.Combine (_outputPath' "Log.txt")' true);  	OnComplete ();  }  catch (Exception ex) {  	OnError ("An error occurred whilst parsing: " + ex.Message);  }  finally {  	IsRunning = false;  }  
Magic Number,SessionViewer,Parser,C:\repos\woanware_SessionViewer\Source\Parser.cs,Parse,The following statement contains a magic number: using (PacketCommunicator packetCommunicator = selectedDevice.Open (65536' PacketDeviceOpenAttributes.Promiscuous' 1000)) {  	packetCommunicator.ReceivePackets (0' DispatcherHandler);  }  
Magic Number,SessionViewer,Parser,C:\repos\woanware_SessionViewer\Source\Parser.cs,Parse,The following statement contains a magic number: using (PacketCommunicator packetCommunicator = selectedDevice.Open (65536' PacketDeviceOpenAttributes.Promiscuous' 1000)) {  	packetCommunicator.ReceivePackets (0' DispatcherHandler);  }  
Magic Number,SessionViewer,Parser,C:\repos\woanware_SessionViewer\Source\Parser.cs,DispatcherHandler,The following statement contains a magic number: try {  	_packetCount++;  	IpV4Datagram ip = packet.Ethernet.IpV4;  	TcpDatagram tcp = ip.Tcp;  	if (tcp == null) {  		Console.WriteLine ("No TCP: " + ip.Source.ToString () + "#" + ip.Destination.ToString ());  		return;  	}  	if (IgnoreLocal == true) {  		if (Networking.IsOnIntranet (System.Net.IPAddress.Parse (ip.Source.ToString ())) == true & Networking.IsOnIntranet (System.Net.IPAddress.Parse (ip.Destination.ToString ())) == true) {  			return;  		}  	}  	Connection connection = new Connection (packet);  	if (_dictionary.ContainsKey (connection) == false) {  		PacketReconstructor packetReconstructor = new PacketReconstructor (_outputPath' _maxSize);  		var parsers = from p in _parsers  		where p.Type == ParserType.Packet  		select p;  		packetReconstructor.SetPacketParsers (parsers.ToList ());  		_dictionary.Add (connection' packetReconstructor);  	}  	_dictionary [connection].ReassemblePacket (packet);  	if (_timestamp == DateTime.MinValue) {  		_timestamp = packet.Timestamp;  	}  	// Only write the data after the user defined period  	if (packet.Timestamp > _timestamp.AddMinutes (BufferInterval)) {  		_timestamp = packet.Timestamp;  		WriteOldSessions (packet);  	}  	if (_packetCount % 10000 == 0) {  		OnMessage ("Processed " + _packetCount + " packets...(" + _dictionary.Count + " sessions)");  	}  }  catch (Exception ex) {  	OnMessage ("Error: " + ex.ToString ());  	Console.WriteLine (ex);  }  
Magic Number,SessionViewer,Parser,C:\repos\woanware_SessionViewer\Source\Parser.cs,DispatcherHandler,The following statement contains a magic number: if (_packetCount % 10000 == 0) {  	OnMessage ("Processed " + _packetCount + " packets...(" + _dictionary.Count + " sessions)");  }  
Magic Number,SessionViewer,Settings,C:\repos\woanware_SessionViewer\Source\Settings.cs,Settings,The following statement contains a magic number: Threads = 4;  
Magic Number,SessionViewer,Settings,C:\repos\woanware_SessionViewer\Source\Settings.cs,Settings,The following statement contains a magic number: BufferInterval = 10;  
Magic Number,SessionViewer,Settings,C:\repos\woanware_SessionViewer\Source\Settings.cs,Settings,The following statement contains a magic number: SessionInterval = 5;  
Magic Number,SessionViewer.SessionProcessors,HttpFileExtractor,C:\repos\woanware_SessionViewer\Source\Extractors\HttpFileExtractor.cs,Start,The following statement contains a magic number: try {  	cancelSource = new CancellationTokenSource ();  	foreach (Session session in this.blockingCollection.GetConsumingEnumerable (cancelSource.Token)) {  		try {  			string path = System.IO.Path.Combine (this.dataDirectory' session.Guid.Substring (0' 2)' session.Guid + ".bin");  			if (File.Exists (path) == false) {  				continue;  			}  			// Parse the HTTP session into its component requests and responses' and perform any required dechunking' gzipping etc  			using (FileStream fileStream = new FileStream (path' FileMode.Open' FileAccess.Read' FileShare.ReadWrite)) {  				this.parser.Parse (fileStream' path);  			}  			foreach (Message message in this.parser.Messages) {  				// Ensure we have a valid response  				if (message.Response.StatusCode == 0) {  					continue;  				}  				if (message.Response.TempFileSize == 0) {  					continue;  				}  				ProcessFiles (session' message);  			}  		}  		catch (Exception) {  		}  	}  }  catch (OperationCanceledException) {  }  catch (Exception ex) {  	//System.Console.WriteLine(ex.ToString());  }  finally {  	OnComplete (Id.ToString ());  }  
Magic Number,SessionViewer.SessionProcessors,HttpFileExtractor,C:\repos\woanware_SessionViewer\Source\Extractors\HttpFileExtractor.cs,Start,The following statement contains a magic number: foreach (Session session in this.blockingCollection.GetConsumingEnumerable (cancelSource.Token)) {  	try {  		string path = System.IO.Path.Combine (this.dataDirectory' session.Guid.Substring (0' 2)' session.Guid + ".bin");  		if (File.Exists (path) == false) {  			continue;  		}  		// Parse the HTTP session into its component requests and responses' and perform any required dechunking' gzipping etc  		using (FileStream fileStream = new FileStream (path' FileMode.Open' FileAccess.Read' FileShare.ReadWrite)) {  			this.parser.Parse (fileStream' path);  		}  		foreach (Message message in this.parser.Messages) {  			// Ensure we have a valid response  			if (message.Response.StatusCode == 0) {  				continue;  			}  			if (message.Response.TempFileSize == 0) {  				continue;  			}  			ProcessFiles (session' message);  		}  	}  	catch (Exception) {  	}  }  
Magic Number,SessionViewer.SessionProcessors,HttpFileExtractor,C:\repos\woanware_SessionViewer\Source\Extractors\HttpFileExtractor.cs,Start,The following statement contains a magic number: try {  	string path = System.IO.Path.Combine (this.dataDirectory' session.Guid.Substring (0' 2)' session.Guid + ".bin");  	if (File.Exists (path) == false) {  		continue;  	}  	// Parse the HTTP session into its component requests and responses' and perform any required dechunking' gzipping etc  	using (FileStream fileStream = new FileStream (path' FileMode.Open' FileAccess.Read' FileShare.ReadWrite)) {  		this.parser.Parse (fileStream' path);  	}  	foreach (Message message in this.parser.Messages) {  		// Ensure we have a valid response  		if (message.Response.StatusCode == 0) {  			continue;  		}  		if (message.Response.TempFileSize == 0) {  			continue;  		}  		ProcessFiles (session' message);  	}  }  catch (Exception) {  }  
Magic Number,SessionViewer.SessionProcessors,HttpFileExtractor,C:\repos\woanware_SessionViewer\Source\Extractors\HttpFileExtractor.cs,ProcessFiles,The following statement contains a magic number: if (message.Response.TempFileSize > 520) {  	header2 = woanware.IO.ReadFileHeader (message.Response.TempFile' 6' 512);  }  
Magic Number,SessionViewer.SessionProcessors,HttpFileExtractor,C:\repos\woanware_SessionViewer\Source\Extractors\HttpFileExtractor.cs,ProcessFiles,The following statement contains a magic number: if (message.Response.TempFileSize > 520) {  	header2 = woanware.IO.ReadFileHeader (message.Response.TempFile' 6' 512);  }  
Magic Number,SessionViewer.SessionProcessors,HttpFileExtractor,C:\repos\woanware_SessionViewer\Source\Extractors\HttpFileExtractor.cs,ProcessFiles,The following statement contains a magic number: if (message.Response.TempFileSize > 520) {  	header2 = woanware.IO.ReadFileHeader (message.Response.TempFile' 6' 512);  }  
Magic Number,SessionViewer.SessionProcessors,HttpFileExtractor,C:\repos\woanware_SessionViewer\Source\Extractors\HttpFileExtractor.cs,ProcessFiles,The following statement contains a magic number: header2 = woanware.IO.ReadFileHeader (message.Response.TempFile' 6' 512);  
Magic Number,SessionViewer.SessionProcessors,HttpFileExtractor,C:\repos\woanware_SessionViewer\Source\Extractors\HttpFileExtractor.cs,ProcessFiles,The following statement contains a magic number: header2 = woanware.IO.ReadFileHeader (message.Response.TempFile' 6' 512);  
Magic Number,SessionViewer.SessionProcessors,HttpFileExtractor,C:\repos\woanware_SessionViewer\Source\Extractors\HttpFileExtractor.cs,ProcessFiles,The following statement contains a magic number: foreach (FileSig sig in this.fileSigs) {  	// Do we have a match on file type  	if (ByteArrayCompare (sig.Sig' header1) == false) {  		continue;  	}  	if (sig.OffsetSubHeader > 0) {  		// Do we have a match on file type  		if (ByteArrayCompare (sig.SigSubHeader' header2) == false) {  			continue;  		}  	}  	// Now extract the contents  	string dir = session.SrcIpText + "." + session.SourcePort + "-" + session.DstIpText + "." + session.DestinationPort;  	if (System.IO.Directory.Exists (System.IO.Path.Combine (this.outputDirectory' dir)) == false) {  		IO.CreateDirectory (System.IO.Path.Combine (this.outputDirectory' dir));  	}  	string fileName = message.Response.GetContentDispositionFileName;  	// Cannot determine a file name from the Content  	// Disposition HTTP header so lets make one up  	if (fileName.Length == 0) {  		fileName = Guid.NewGuid ().ToString () + "." + sig.Extension + ".safe";  	}  	else {  		fileName += ".safe";  	}  	File.Copy (message.Response.TempFile' System.IO.Path.Combine (this.outputDirectory' dir' fileName)' true);  	DownloadDetails downloadDetails = new DownloadDetails ();  	downloadDetails.SrcIp = session.SrcIpText;  	downloadDetails.SrcPort = session.SourcePort;  	downloadDetails.DstIp = session.DstIpText;  	downloadDetails.DstPort = session.DestinationPort;  	downloadDetails.File = fileName;  	try {  		// Not sure if BufferedStream should be wrapped in using block  		using (var stream = new BufferedStream (File.OpenRead (System.IO.Path.Combine (this.outputDirectory' dir' fileName))' 1200000)) {  			MD5 md5 = new MD5CryptoServiceProvider ();  			byte[] hashMd5 = md5.ComputeHash (stream);  			downloadDetails.Md5 = woanware.Text.ConvertByteArrayToHexString (hashMd5);  		}  	}  	catch (Exception) {  	}  	downloadDetails.Save (System.IO.Path.Combine (this.outputDirectory' dir' "Download.Details." + fileName + ".xml"));  	break;  }  
Magic Number,SessionViewer.SessionProcessors,HttpFileExtractor,C:\repos\woanware_SessionViewer\Source\Extractors\HttpFileExtractor.cs,ProcessFiles,The following statement contains a magic number: try {  	// Not sure if BufferedStream should be wrapped in using block  	using (var stream = new BufferedStream (File.OpenRead (System.IO.Path.Combine (this.outputDirectory' dir' fileName))' 1200000)) {  		MD5 md5 = new MD5CryptoServiceProvider ();  		byte[] hashMd5 = md5.ComputeHash (stream);  		downloadDetails.Md5 = woanware.Text.ConvertByteArrayToHexString (hashMd5);  	}  }  catch (Exception) {  }  
Magic Number,SessionViewer.SessionProcessors,HttpFileExtractor,C:\repos\woanware_SessionViewer\Source\Extractors\HttpFileExtractor.cs,ProcessFiles,The following statement contains a magic number: using (var stream = new BufferedStream (File.OpenRead (System.IO.Path.Combine (this.outputDirectory' dir' fileName))' 1200000)) {  	MD5 md5 = new MD5CryptoServiceProvider ();  	byte[] hashMd5 = md5.ComputeHash (stream);  	downloadDetails.Md5 = woanware.Text.ConvertByteArrayToHexString (hashMd5);  }  
Magic Number,SessionViewer.SessionProcessors,UrlExtractor,C:\repos\woanware_SessionViewer\Source\Extractors\UrlExtractor.cs,Start,The following statement contains a magic number: try {  	cancelSource = new CancellationTokenSource ();  	foreach (Session session in this.blockingCollection.GetConsumingEnumerable (cancelSource.Token)) {  		try {  			string path = System.IO.Path.Combine (this.dataDirectory' session.Guid.Substring (0' 2)' session.Guid + ".bin");  			if (File.Exists (path) == false) {  				continue;  			}  			FileInfo fileInfo = new FileInfo (path);  			// Info  			if (fileInfo.AlternateDataStreamExists ("info") == false) {  				continue;  			}  			ProcessUrls (session' fileInfo);  		}  		catch (Exception) {  		}  	}  }  catch (OperationCanceledException) {  }  catch (Exception ex) {  	//System.Console.WriteLine(ex.ToString());  }  finally {  	OnComplete (Id.ToString ());  }  
Magic Number,SessionViewer.SessionProcessors,UrlExtractor,C:\repos\woanware_SessionViewer\Source\Extractors\UrlExtractor.cs,Start,The following statement contains a magic number: foreach (Session session in this.blockingCollection.GetConsumingEnumerable (cancelSource.Token)) {  	try {  		string path = System.IO.Path.Combine (this.dataDirectory' session.Guid.Substring (0' 2)' session.Guid + ".bin");  		if (File.Exists (path) == false) {  			continue;  		}  		FileInfo fileInfo = new FileInfo (path);  		// Info  		if (fileInfo.AlternateDataStreamExists ("info") == false) {  			continue;  		}  		ProcessUrls (session' fileInfo);  	}  	catch (Exception) {  	}  }  
Magic Number,SessionViewer.SessionProcessors,UrlExtractor,C:\repos\woanware_SessionViewer\Source\Extractors\UrlExtractor.cs,Start,The following statement contains a magic number: try {  	string path = System.IO.Path.Combine (this.dataDirectory' session.Guid.Substring (0' 2)' session.Guid + ".bin");  	if (File.Exists (path) == false) {  		continue;  	}  	FileInfo fileInfo = new FileInfo (path);  	// Info  	if (fileInfo.AlternateDataStreamExists ("info") == false) {  		continue;  	}  	ProcessUrls (session' fileInfo);  }  catch (Exception) {  }  
Magic Number,SessionViewer.SessionProcessors,UrlExtractor,C:\repos\woanware_SessionViewer\Source\Extractors\UrlExtractor.cs,ProcessUrls,The following statement contains a magic number: using (TextReader reader = ads.OpenText ()) {  	UrlDetails urlDetails = new UrlDetails ();  	urlDetails.SrcIp = session.SrcIpText;  	urlDetails.SrcPort = session.SourcePort;  	urlDetails.DstIp = session.DstIpText;  	urlDetails.DstPort = session.DestinationPort;  	string line;  	while ((line = reader.ReadLine ()) != null) {  		if (line.StartsWith ("LINK: ") == false) {  			continue;  		}  		string url = line.Substring (6);  		if (urlDetails.Urls.Contains (session.HttpHost + url) == false) {  			urlDetails.Urls.Add (session.HttpHost + url);  		}  	}  	if (urlDetails.Urls.Count > 0) {  		string dir = session.SrcIpText + "." + session.SourcePort + "-" + session.DstIpText + "." + session.DestinationPort;  		if (System.IO.Directory.Exists (System.IO.Path.Combine (this.outputDirectory' dir)) == false) {  			IO.CreateDirectory (System.IO.Path.Combine (this.outputDirectory' dir));  		}  		urlDetails.Save (System.IO.Path.Combine (this.outputDirectory' dir' "Url.Details." + session.Guid + ".xml"));  	}  }  
Magic Number,SessionViewer.SessionProcessors,UrlExtractor,C:\repos\woanware_SessionViewer\Source\Extractors\UrlExtractor.cs,ProcessUrls,The following statement contains a magic number: while ((line = reader.ReadLine ()) != null) {  	if (line.StartsWith ("LINK: ") == false) {  		continue;  	}  	string url = line.Substring (6);  	if (urlDetails.Urls.Contains (session.HttpHost + url) == false) {  		urlDetails.Urls.Add (session.HttpHost + url);  	}  }  
Magic Number,SessionViewer.SessionProcessors,SmtpExtractor,C:\repos\woanware_SessionViewer\Source\Extractors\SmtpExtractor.cs,Start,The following statement contains a magic number: try {  	cancelSource = new CancellationTokenSource ();  	foreach (Session session in this.blockingCollection.GetConsumingEnumerable (cancelSource.Token)) {  		try {  			string path = System.IO.Path.Combine (this.dataDirectory' session.Guid.Substring (0' 2)' session.Guid + ".bin");  			if (File.Exists (path) == false) {  				continue;  			}  			byte[] temp = File.ReadAllBytes (path);  			ProcessAttachments (session' temp);  		}  		catch (Exception) {  		}  	}  }  catch (OperationCanceledException) {  }  catch (Exception ex) {  	//System.Console.WriteLine(ex.ToString());  }  finally {  	OnComplete (Id.ToString ());  }  
Magic Number,SessionViewer.SessionProcessors,SmtpExtractor,C:\repos\woanware_SessionViewer\Source\Extractors\SmtpExtractor.cs,Start,The following statement contains a magic number: foreach (Session session in this.blockingCollection.GetConsumingEnumerable (cancelSource.Token)) {  	try {  		string path = System.IO.Path.Combine (this.dataDirectory' session.Guid.Substring (0' 2)' session.Guid + ".bin");  		if (File.Exists (path) == false) {  			continue;  		}  		byte[] temp = File.ReadAllBytes (path);  		ProcessAttachments (session' temp);  	}  	catch (Exception) {  	}  }  
Magic Number,SessionViewer.SessionProcessors,SmtpExtractor,C:\repos\woanware_SessionViewer\Source\Extractors\SmtpExtractor.cs,Start,The following statement contains a magic number: try {  	string path = System.IO.Path.Combine (this.dataDirectory' session.Guid.Substring (0' 2)' session.Guid + ".bin");  	if (File.Exists (path) == false) {  		continue;  	}  	byte[] temp = File.ReadAllBytes (path);  	ProcessAttachments (session' temp);  }  catch (Exception) {  }  
Magic Number,SessionViewer.SessionProcessors,SmtpExtractor,C:\repos\woanware_SessionViewer\Source\Extractors\SmtpExtractor.cs,ProcessAttachmentHashes,The following statement contains a magic number: using (StreamReader sr = new StreamReader (System.IO.Path.Combine (outputDirectory' "Attachment.Hashes.csv")))  	using (CsvHelper.CsvReader csvReader = new CsvHelper.CsvReader (sr' csvConfig)) {  		List<Attachment> attachments = new List<Attachment> ();  		while (csvReader.Read ()) {  			var md5 = csvReader.GetField (0);  			var file = csvReader.GetField (1);  			var fileName = System.IO.Path.GetFileName (file);  			var srcIp = csvReader.GetField (2);  			var srcPort = csvReader.GetField (3);  			var dstIp = csvReader.GetField (4);  			var dstPort = csvReader.GetField (5);  			var to = csvReader.GetField (6);  			var dateSent = csvReader.GetField (11);  			List<string> tempTo = new List<string> (to.Split ('''));  			for (int index = tempTo.Count () - 1; index > -1; index--) {  				string person = tempTo [index].Trim ().ToLower ();  				if (person.IndexOf ("@") == -1) {  					tempTo.RemoveAt (index);  					continue;  				}  				Match match = regex.Match (person);  				if (match.Success == true) {  					person = match.Groups [1].Value;  				}  				person = person.Replace (@""""' string.Empty);  				tempTo [index] = person;  			}  			var from = csvReader.GetField (6);  			var sender = csvReader.GetField (7);  			var subject = csvReader.GetField (10);  			var attachment = (from a in attachments  			where a.Md5 == md5.ToLower ()  			select a).SingleOrDefault ();  			if (attachment == null) {  				attachment = new Attachment ();  				attachment.Md5 = md5.ToLower ();  				attachment.Recipients.AddRange (tempTo);  				attachment.Subjects.Add (subject);  				attachment.Senders.Add (sender);  				if (fileName.Length > 0) {  					attachment.FileNames.Add (fileName);  				}  				attachment.DateSent = dateSent;  				attachments.Add (attachment);  				SubjectRecipents subjectRecipient = new SubjectRecipents ();  				subjectRecipient.Subject = subject;  				subjectRecipient.File = file;  				subjectRecipient.Sender = sender;  				foreach (string person in tempTo) {  					subjectRecipient.Recipients.Add (person);  				}  				attachment.SubjectRecipents.Add (subjectRecipient);  			}  			else {  				foreach (string person in tempTo) {  					var tempPerson = from r in attachment.Recipients  					where r == person  					select r;  					if (tempPerson.Any () == false) {  						attachment.Recipients.Add (person);  					}  				}  				var tempFileName = from s in attachment.FileNames  				where s == fileName  				select s;  				if (tempFileName.Any () == false) {  					attachment.FileNames.Add (fileName);  				}  				var tempSubject = from s in attachment.Subjects  				where s.ToLower () == subject  				select s;  				if (tempSubject.Any () == false) {  					attachment.Subjects.Add (subject);  				}  				var tempSender = from s in attachment.Senders  				where s.ToLower () == sender  				select s;  				if (tempSender.Any () == false) {  					attachment.Senders.Add (sender);  				}  				var subjectRecipient = (from s in attachment.SubjectRecipents  				where s.Subject.ToLower () == subject.ToLower ()  				select s).SingleOrDefault ();  				if (subjectRecipient == null) {  					subjectRecipient = new SubjectRecipents ();  					subjectRecipient.Subject = subject;  					subjectRecipient.File = file;  					subjectRecipient.Sender = sender;  					foreach (string person in tempTo) {  						subjectRecipient.Recipients.Add (person);  					}  					attachment.SubjectRecipents.Add (subjectRecipient);  				}  				else {  					foreach (string person in tempTo) {  						var tempPerson = from r in subjectRecipient.Recipients  						where r == person  						select r;  						if (tempPerson.Any () == false) {  							subjectRecipient.Recipients.Add (person);  						}  					}  				}  			}  		}  		OutputSummary (outputDirectory' attachments);  	}  
Magic Number,SessionViewer.SessionProcessors,SmtpExtractor,C:\repos\woanware_SessionViewer\Source\Extractors\SmtpExtractor.cs,ProcessAttachmentHashes,The following statement contains a magic number: using (StreamReader sr = new StreamReader (System.IO.Path.Combine (outputDirectory' "Attachment.Hashes.csv")))  	using (CsvHelper.CsvReader csvReader = new CsvHelper.CsvReader (sr' csvConfig)) {  		List<Attachment> attachments = new List<Attachment> ();  		while (csvReader.Read ()) {  			var md5 = csvReader.GetField (0);  			var file = csvReader.GetField (1);  			var fileName = System.IO.Path.GetFileName (file);  			var srcIp = csvReader.GetField (2);  			var srcPort = csvReader.GetField (3);  			var dstIp = csvReader.GetField (4);  			var dstPort = csvReader.GetField (5);  			var to = csvReader.GetField (6);  			var dateSent = csvReader.GetField (11);  			List<string> tempTo = new List<string> (to.Split ('''));  			for (int index = tempTo.Count () - 1; index > -1; index--) {  				string person = tempTo [index].Trim ().ToLower ();  				if (person.IndexOf ("@") == -1) {  					tempTo.RemoveAt (index);  					continue;  				}  				Match match = regex.Match (person);  				if (match.Success == true) {  					person = match.Groups [1].Value;  				}  				person = person.Replace (@""""' string.Empty);  				tempTo [index] = person;  			}  			var from = csvReader.GetField (6);  			var sender = csvReader.GetField (7);  			var subject = csvReader.GetField (10);  			var attachment = (from a in attachments  			where a.Md5 == md5.ToLower ()  			select a).SingleOrDefault ();  			if (attachment == null) {  				attachment = new Attachment ();  				attachment.Md5 = md5.ToLower ();  				attachment.Recipients.AddRange (tempTo);  				attachment.Subjects.Add (subject);  				attachment.Senders.Add (sender);  				if (fileName.Length > 0) {  					attachment.FileNames.Add (fileName);  				}  				attachment.DateSent = dateSent;  				attachments.Add (attachment);  				SubjectRecipents subjectRecipient = new SubjectRecipents ();  				subjectRecipient.Subject = subject;  				subjectRecipient.File = file;  				subjectRecipient.Sender = sender;  				foreach (string person in tempTo) {  					subjectRecipient.Recipients.Add (person);  				}  				attachment.SubjectRecipents.Add (subjectRecipient);  			}  			else {  				foreach (string person in tempTo) {  					var tempPerson = from r in attachment.Recipients  					where r == person  					select r;  					if (tempPerson.Any () == false) {  						attachment.Recipients.Add (person);  					}  				}  				var tempFileName = from s in attachment.FileNames  				where s == fileName  				select s;  				if (tempFileName.Any () == false) {  					attachment.FileNames.Add (fileName);  				}  				var tempSubject = from s in attachment.Subjects  				where s.ToLower () == subject  				select s;  				if (tempSubject.Any () == false) {  					attachment.Subjects.Add (subject);  				}  				var tempSender = from s in attachment.Senders  				where s.ToLower () == sender  				select s;  				if (tempSender.Any () == false) {  					attachment.Senders.Add (sender);  				}  				var subjectRecipient = (from s in attachment.SubjectRecipents  				where s.Subject.ToLower () == subject.ToLower ()  				select s).SingleOrDefault ();  				if (subjectRecipient == null) {  					subjectRecipient = new SubjectRecipents ();  					subjectRecipient.Subject = subject;  					subjectRecipient.File = file;  					subjectRecipient.Sender = sender;  					foreach (string person in tempTo) {  						subjectRecipient.Recipients.Add (person);  					}  					attachment.SubjectRecipents.Add (subjectRecipient);  				}  				else {  					foreach (string person in tempTo) {  						var tempPerson = from r in subjectRecipient.Recipients  						where r == person  						select r;  						if (tempPerson.Any () == false) {  							subjectRecipient.Recipients.Add (person);  						}  					}  				}  			}  		}  		OutputSummary (outputDirectory' attachments);  	}  
Magic Number,SessionViewer.SessionProcessors,SmtpExtractor,C:\repos\woanware_SessionViewer\Source\Extractors\SmtpExtractor.cs,ProcessAttachmentHashes,The following statement contains a magic number: using (StreamReader sr = new StreamReader (System.IO.Path.Combine (outputDirectory' "Attachment.Hashes.csv")))  	using (CsvHelper.CsvReader csvReader = new CsvHelper.CsvReader (sr' csvConfig)) {  		List<Attachment> attachments = new List<Attachment> ();  		while (csvReader.Read ()) {  			var md5 = csvReader.GetField (0);  			var file = csvReader.GetField (1);  			var fileName = System.IO.Path.GetFileName (file);  			var srcIp = csvReader.GetField (2);  			var srcPort = csvReader.GetField (3);  			var dstIp = csvReader.GetField (4);  			var dstPort = csvReader.GetField (5);  			var to = csvReader.GetField (6);  			var dateSent = csvReader.GetField (11);  			List<string> tempTo = new List<string> (to.Split ('''));  			for (int index = tempTo.Count () - 1; index > -1; index--) {  				string person = tempTo [index].Trim ().ToLower ();  				if (person.IndexOf ("@") == -1) {  					tempTo.RemoveAt (index);  					continue;  				}  				Match match = regex.Match (person);  				if (match.Success == true) {  					person = match.Groups [1].Value;  				}  				person = person.Replace (@""""' string.Empty);  				tempTo [index] = person;  			}  			var from = csvReader.GetField (6);  			var sender = csvReader.GetField (7);  			var subject = csvReader.GetField (10);  			var attachment = (from a in attachments  			where a.Md5 == md5.ToLower ()  			select a).SingleOrDefault ();  			if (attachment == null) {  				attachment = new Attachment ();  				attachment.Md5 = md5.ToLower ();  				attachment.Recipients.AddRange (tempTo);  				attachment.Subjects.Add (subject);  				attachment.Senders.Add (sender);  				if (fileName.Length > 0) {  					attachment.FileNames.Add (fileName);  				}  				attachment.DateSent = dateSent;  				attachments.Add (attachment);  				SubjectRecipents subjectRecipient = new SubjectRecipents ();  				subjectRecipient.Subject = subject;  				subjectRecipient.File = file;  				subjectRecipient.Sender = sender;  				foreach (string person in tempTo) {  					subjectRecipient.Recipients.Add (person);  				}  				attachment.SubjectRecipents.Add (subjectRecipient);  			}  			else {  				foreach (string person in tempTo) {  					var tempPerson = from r in attachment.Recipients  					where r == person  					select r;  					if (tempPerson.Any () == false) {  						attachment.Recipients.Add (person);  					}  				}  				var tempFileName = from s in attachment.FileNames  				where s == fileName  				select s;  				if (tempFileName.Any () == false) {  					attachment.FileNames.Add (fileName);  				}  				var tempSubject = from s in attachment.Subjects  				where s.ToLower () == subject  				select s;  				if (tempSubject.Any () == false) {  					attachment.Subjects.Add (subject);  				}  				var tempSender = from s in attachment.Senders  				where s.ToLower () == sender  				select s;  				if (tempSender.Any () == false) {  					attachment.Senders.Add (sender);  				}  				var subjectRecipient = (from s in attachment.SubjectRecipents  				where s.Subject.ToLower () == subject.ToLower ()  				select s).SingleOrDefault ();  				if (subjectRecipient == null) {  					subjectRecipient = new SubjectRecipents ();  					subjectRecipient.Subject = subject;  					subjectRecipient.File = file;  					subjectRecipient.Sender = sender;  					foreach (string person in tempTo) {  						subjectRecipient.Recipients.Add (person);  					}  					attachment.SubjectRecipents.Add (subjectRecipient);  				}  				else {  					foreach (string person in tempTo) {  						var tempPerson = from r in subjectRecipient.Recipients  						where r == person  						select r;  						if (tempPerson.Any () == false) {  							subjectRecipient.Recipients.Add (person);  						}  					}  				}  			}  		}  		OutputSummary (outputDirectory' attachments);  	}  
Magic Number,SessionViewer.SessionProcessors,SmtpExtractor,C:\repos\woanware_SessionViewer\Source\Extractors\SmtpExtractor.cs,ProcessAttachmentHashes,The following statement contains a magic number: using (StreamReader sr = new StreamReader (System.IO.Path.Combine (outputDirectory' "Attachment.Hashes.csv")))  	using (CsvHelper.CsvReader csvReader = new CsvHelper.CsvReader (sr' csvConfig)) {  		List<Attachment> attachments = new List<Attachment> ();  		while (csvReader.Read ()) {  			var md5 = csvReader.GetField (0);  			var file = csvReader.GetField (1);  			var fileName = System.IO.Path.GetFileName (file);  			var srcIp = csvReader.GetField (2);  			var srcPort = csvReader.GetField (3);  			var dstIp = csvReader.GetField (4);  			var dstPort = csvReader.GetField (5);  			var to = csvReader.GetField (6);  			var dateSent = csvReader.GetField (11);  			List<string> tempTo = new List<string> (to.Split ('''));  			for (int index = tempTo.Count () - 1; index > -1; index--) {  				string person = tempTo [index].Trim ().ToLower ();  				if (person.IndexOf ("@") == -1) {  					tempTo.RemoveAt (index);  					continue;  				}  				Match match = regex.Match (person);  				if (match.Success == true) {  					person = match.Groups [1].Value;  				}  				person = person.Replace (@""""' string.Empty);  				tempTo [index] = person;  			}  			var from = csvReader.GetField (6);  			var sender = csvReader.GetField (7);  			var subject = csvReader.GetField (10);  			var attachment = (from a in attachments  			where a.Md5 == md5.ToLower ()  			select a).SingleOrDefault ();  			if (attachment == null) {  				attachment = new Attachment ();  				attachment.Md5 = md5.ToLower ();  				attachment.Recipients.AddRange (tempTo);  				attachment.Subjects.Add (subject);  				attachment.Senders.Add (sender);  				if (fileName.Length > 0) {  					attachment.FileNames.Add (fileName);  				}  				attachment.DateSent = dateSent;  				attachments.Add (attachment);  				SubjectRecipents subjectRecipient = new SubjectRecipents ();  				subjectRecipient.Subject = subject;  				subjectRecipient.File = file;  				subjectRecipient.Sender = sender;  				foreach (string person in tempTo) {  					subjectRecipient.Recipients.Add (person);  				}  				attachment.SubjectRecipents.Add (subjectRecipient);  			}  			else {  				foreach (string person in tempTo) {  					var tempPerson = from r in attachment.Recipients  					where r == person  					select r;  					if (tempPerson.Any () == false) {  						attachment.Recipients.Add (person);  					}  				}  				var tempFileName = from s in attachment.FileNames  				where s == fileName  				select s;  				if (tempFileName.Any () == false) {  					attachment.FileNames.Add (fileName);  				}  				var tempSubject = from s in attachment.Subjects  				where s.ToLower () == subject  				select s;  				if (tempSubject.Any () == false) {  					attachment.Subjects.Add (subject);  				}  				var tempSender = from s in attachment.Senders  				where s.ToLower () == sender  				select s;  				if (tempSender.Any () == false) {  					attachment.Senders.Add (sender);  				}  				var subjectRecipient = (from s in attachment.SubjectRecipents  				where s.Subject.ToLower () == subject.ToLower ()  				select s).SingleOrDefault ();  				if (subjectRecipient == null) {  					subjectRecipient = new SubjectRecipents ();  					subjectRecipient.Subject = subject;  					subjectRecipient.File = file;  					subjectRecipient.Sender = sender;  					foreach (string person in tempTo) {  						subjectRecipient.Recipients.Add (person);  					}  					attachment.SubjectRecipents.Add (subjectRecipient);  				}  				else {  					foreach (string person in tempTo) {  						var tempPerson = from r in subjectRecipient.Recipients  						where r == person  						select r;  						if (tempPerson.Any () == false) {  							subjectRecipient.Recipients.Add (person);  						}  					}  				}  			}  		}  		OutputSummary (outputDirectory' attachments);  	}  
Magic Number,SessionViewer.SessionProcessors,SmtpExtractor,C:\repos\woanware_SessionViewer\Source\Extractors\SmtpExtractor.cs,ProcessAttachmentHashes,The following statement contains a magic number: using (StreamReader sr = new StreamReader (System.IO.Path.Combine (outputDirectory' "Attachment.Hashes.csv")))  	using (CsvHelper.CsvReader csvReader = new CsvHelper.CsvReader (sr' csvConfig)) {  		List<Attachment> attachments = new List<Attachment> ();  		while (csvReader.Read ()) {  			var md5 = csvReader.GetField (0);  			var file = csvReader.GetField (1);  			var fileName = System.IO.Path.GetFileName (file);  			var srcIp = csvReader.GetField (2);  			var srcPort = csvReader.GetField (3);  			var dstIp = csvReader.GetField (4);  			var dstPort = csvReader.GetField (5);  			var to = csvReader.GetField (6);  			var dateSent = csvReader.GetField (11);  			List<string> tempTo = new List<string> (to.Split ('''));  			for (int index = tempTo.Count () - 1; index > -1; index--) {  				string person = tempTo [index].Trim ().ToLower ();  				if (person.IndexOf ("@") == -1) {  					tempTo.RemoveAt (index);  					continue;  				}  				Match match = regex.Match (person);  				if (match.Success == true) {  					person = match.Groups [1].Value;  				}  				person = person.Replace (@""""' string.Empty);  				tempTo [index] = person;  			}  			var from = csvReader.GetField (6);  			var sender = csvReader.GetField (7);  			var subject = csvReader.GetField (10);  			var attachment = (from a in attachments  			where a.Md5 == md5.ToLower ()  			select a).SingleOrDefault ();  			if (attachment == null) {  				attachment = new Attachment ();  				attachment.Md5 = md5.ToLower ();  				attachment.Recipients.AddRange (tempTo);  				attachment.Subjects.Add (subject);  				attachment.Senders.Add (sender);  				if (fileName.Length > 0) {  					attachment.FileNames.Add (fileName);  				}  				attachment.DateSent = dateSent;  				attachments.Add (attachment);  				SubjectRecipents subjectRecipient = new SubjectRecipents ();  				subjectRecipient.Subject = subject;  				subjectRecipient.File = file;  				subjectRecipient.Sender = sender;  				foreach (string person in tempTo) {  					subjectRecipient.Recipients.Add (person);  				}  				attachment.SubjectRecipents.Add (subjectRecipient);  			}  			else {  				foreach (string person in tempTo) {  					var tempPerson = from r in attachment.Recipients  					where r == person  					select r;  					if (tempPerson.Any () == false) {  						attachment.Recipients.Add (person);  					}  				}  				var tempFileName = from s in attachment.FileNames  				where s == fileName  				select s;  				if (tempFileName.Any () == false) {  					attachment.FileNames.Add (fileName);  				}  				var tempSubject = from s in attachment.Subjects  				where s.ToLower () == subject  				select s;  				if (tempSubject.Any () == false) {  					attachment.Subjects.Add (subject);  				}  				var tempSender = from s in attachment.Senders  				where s.ToLower () == sender  				select s;  				if (tempSender.Any () == false) {  					attachment.Senders.Add (sender);  				}  				var subjectRecipient = (from s in attachment.SubjectRecipents  				where s.Subject.ToLower () == subject.ToLower ()  				select s).SingleOrDefault ();  				if (subjectRecipient == null) {  					subjectRecipient = new SubjectRecipents ();  					subjectRecipient.Subject = subject;  					subjectRecipient.File = file;  					subjectRecipient.Sender = sender;  					foreach (string person in tempTo) {  						subjectRecipient.Recipients.Add (person);  					}  					attachment.SubjectRecipents.Add (subjectRecipient);  				}  				else {  					foreach (string person in tempTo) {  						var tempPerson = from r in subjectRecipient.Recipients  						where r == person  						select r;  						if (tempPerson.Any () == false) {  							subjectRecipient.Recipients.Add (person);  						}  					}  				}  			}  		}  		OutputSummary (outputDirectory' attachments);  	}  
Magic Number,SessionViewer.SessionProcessors,SmtpExtractor,C:\repos\woanware_SessionViewer\Source\Extractors\SmtpExtractor.cs,ProcessAttachmentHashes,The following statement contains a magic number: using (StreamReader sr = new StreamReader (System.IO.Path.Combine (outputDirectory' "Attachment.Hashes.csv")))  	using (CsvHelper.CsvReader csvReader = new CsvHelper.CsvReader (sr' csvConfig)) {  		List<Attachment> attachments = new List<Attachment> ();  		while (csvReader.Read ()) {  			var md5 = csvReader.GetField (0);  			var file = csvReader.GetField (1);  			var fileName = System.IO.Path.GetFileName (file);  			var srcIp = csvReader.GetField (2);  			var srcPort = csvReader.GetField (3);  			var dstIp = csvReader.GetField (4);  			var dstPort = csvReader.GetField (5);  			var to = csvReader.GetField (6);  			var dateSent = csvReader.GetField (11);  			List<string> tempTo = new List<string> (to.Split ('''));  			for (int index = tempTo.Count () - 1; index > -1; index--) {  				string person = tempTo [index].Trim ().ToLower ();  				if (person.IndexOf ("@") == -1) {  					tempTo.RemoveAt (index);  					continue;  				}  				Match match = regex.Match (person);  				if (match.Success == true) {  					person = match.Groups [1].Value;  				}  				person = person.Replace (@""""' string.Empty);  				tempTo [index] = person;  			}  			var from = csvReader.GetField (6);  			var sender = csvReader.GetField (7);  			var subject = csvReader.GetField (10);  			var attachment = (from a in attachments  			where a.Md5 == md5.ToLower ()  			select a).SingleOrDefault ();  			if (attachment == null) {  				attachment = new Attachment ();  				attachment.Md5 = md5.ToLower ();  				attachment.Recipients.AddRange (tempTo);  				attachment.Subjects.Add (subject);  				attachment.Senders.Add (sender);  				if (fileName.Length > 0) {  					attachment.FileNames.Add (fileName);  				}  				attachment.DateSent = dateSent;  				attachments.Add (attachment);  				SubjectRecipents subjectRecipient = new SubjectRecipents ();  				subjectRecipient.Subject = subject;  				subjectRecipient.File = file;  				subjectRecipient.Sender = sender;  				foreach (string person in tempTo) {  					subjectRecipient.Recipients.Add (person);  				}  				attachment.SubjectRecipents.Add (subjectRecipient);  			}  			else {  				foreach (string person in tempTo) {  					var tempPerson = from r in attachment.Recipients  					where r == person  					select r;  					if (tempPerson.Any () == false) {  						attachment.Recipients.Add (person);  					}  				}  				var tempFileName = from s in attachment.FileNames  				where s == fileName  				select s;  				if (tempFileName.Any () == false) {  					attachment.FileNames.Add (fileName);  				}  				var tempSubject = from s in attachment.Subjects  				where s.ToLower () == subject  				select s;  				if (tempSubject.Any () == false) {  					attachment.Subjects.Add (subject);  				}  				var tempSender = from s in attachment.Senders  				where s.ToLower () == sender  				select s;  				if (tempSender.Any () == false) {  					attachment.Senders.Add (sender);  				}  				var subjectRecipient = (from s in attachment.SubjectRecipents  				where s.Subject.ToLower () == subject.ToLower ()  				select s).SingleOrDefault ();  				if (subjectRecipient == null) {  					subjectRecipient = new SubjectRecipents ();  					subjectRecipient.Subject = subject;  					subjectRecipient.File = file;  					subjectRecipient.Sender = sender;  					foreach (string person in tempTo) {  						subjectRecipient.Recipients.Add (person);  					}  					attachment.SubjectRecipents.Add (subjectRecipient);  				}  				else {  					foreach (string person in tempTo) {  						var tempPerson = from r in subjectRecipient.Recipients  						where r == person  						select r;  						if (tempPerson.Any () == false) {  							subjectRecipient.Recipients.Add (person);  						}  					}  				}  			}  		}  		OutputSummary (outputDirectory' attachments);  	}  
Magic Number,SessionViewer.SessionProcessors,SmtpExtractor,C:\repos\woanware_SessionViewer\Source\Extractors\SmtpExtractor.cs,ProcessAttachmentHashes,The following statement contains a magic number: using (StreamReader sr = new StreamReader (System.IO.Path.Combine (outputDirectory' "Attachment.Hashes.csv")))  	using (CsvHelper.CsvReader csvReader = new CsvHelper.CsvReader (sr' csvConfig)) {  		List<Attachment> attachments = new List<Attachment> ();  		while (csvReader.Read ()) {  			var md5 = csvReader.GetField (0);  			var file = csvReader.GetField (1);  			var fileName = System.IO.Path.GetFileName (file);  			var srcIp = csvReader.GetField (2);  			var srcPort = csvReader.GetField (3);  			var dstIp = csvReader.GetField (4);  			var dstPort = csvReader.GetField (5);  			var to = csvReader.GetField (6);  			var dateSent = csvReader.GetField (11);  			List<string> tempTo = new List<string> (to.Split ('''));  			for (int index = tempTo.Count () - 1; index > -1; index--) {  				string person = tempTo [index].Trim ().ToLower ();  				if (person.IndexOf ("@") == -1) {  					tempTo.RemoveAt (index);  					continue;  				}  				Match match = regex.Match (person);  				if (match.Success == true) {  					person = match.Groups [1].Value;  				}  				person = person.Replace (@""""' string.Empty);  				tempTo [index] = person;  			}  			var from = csvReader.GetField (6);  			var sender = csvReader.GetField (7);  			var subject = csvReader.GetField (10);  			var attachment = (from a in attachments  			where a.Md5 == md5.ToLower ()  			select a).SingleOrDefault ();  			if (attachment == null) {  				attachment = new Attachment ();  				attachment.Md5 = md5.ToLower ();  				attachment.Recipients.AddRange (tempTo);  				attachment.Subjects.Add (subject);  				attachment.Senders.Add (sender);  				if (fileName.Length > 0) {  					attachment.FileNames.Add (fileName);  				}  				attachment.DateSent = dateSent;  				attachments.Add (attachment);  				SubjectRecipents subjectRecipient = new SubjectRecipents ();  				subjectRecipient.Subject = subject;  				subjectRecipient.File = file;  				subjectRecipient.Sender = sender;  				foreach (string person in tempTo) {  					subjectRecipient.Recipients.Add (person);  				}  				attachment.SubjectRecipents.Add (subjectRecipient);  			}  			else {  				foreach (string person in tempTo) {  					var tempPerson = from r in attachment.Recipients  					where r == person  					select r;  					if (tempPerson.Any () == false) {  						attachment.Recipients.Add (person);  					}  				}  				var tempFileName = from s in attachment.FileNames  				where s == fileName  				select s;  				if (tempFileName.Any () == false) {  					attachment.FileNames.Add (fileName);  				}  				var tempSubject = from s in attachment.Subjects  				where s.ToLower () == subject  				select s;  				if (tempSubject.Any () == false) {  					attachment.Subjects.Add (subject);  				}  				var tempSender = from s in attachment.Senders  				where s.ToLower () == sender  				select s;  				if (tempSender.Any () == false) {  					attachment.Senders.Add (sender);  				}  				var subjectRecipient = (from s in attachment.SubjectRecipents  				where s.Subject.ToLower () == subject.ToLower ()  				select s).SingleOrDefault ();  				if (subjectRecipient == null) {  					subjectRecipient = new SubjectRecipents ();  					subjectRecipient.Subject = subject;  					subjectRecipient.File = file;  					subjectRecipient.Sender = sender;  					foreach (string person in tempTo) {  						subjectRecipient.Recipients.Add (person);  					}  					attachment.SubjectRecipents.Add (subjectRecipient);  				}  				else {  					foreach (string person in tempTo) {  						var tempPerson = from r in subjectRecipient.Recipients  						where r == person  						select r;  						if (tempPerson.Any () == false) {  							subjectRecipient.Recipients.Add (person);  						}  					}  				}  			}  		}  		OutputSummary (outputDirectory' attachments);  	}  
Magic Number,SessionViewer.SessionProcessors,SmtpExtractor,C:\repos\woanware_SessionViewer\Source\Extractors\SmtpExtractor.cs,ProcessAttachmentHashes,The following statement contains a magic number: using (StreamReader sr = new StreamReader (System.IO.Path.Combine (outputDirectory' "Attachment.Hashes.csv")))  	using (CsvHelper.CsvReader csvReader = new CsvHelper.CsvReader (sr' csvConfig)) {  		List<Attachment> attachments = new List<Attachment> ();  		while (csvReader.Read ()) {  			var md5 = csvReader.GetField (0);  			var file = csvReader.GetField (1);  			var fileName = System.IO.Path.GetFileName (file);  			var srcIp = csvReader.GetField (2);  			var srcPort = csvReader.GetField (3);  			var dstIp = csvReader.GetField (4);  			var dstPort = csvReader.GetField (5);  			var to = csvReader.GetField (6);  			var dateSent = csvReader.GetField (11);  			List<string> tempTo = new List<string> (to.Split ('''));  			for (int index = tempTo.Count () - 1; index > -1; index--) {  				string person = tempTo [index].Trim ().ToLower ();  				if (person.IndexOf ("@") == -1) {  					tempTo.RemoveAt (index);  					continue;  				}  				Match match = regex.Match (person);  				if (match.Success == true) {  					person = match.Groups [1].Value;  				}  				person = person.Replace (@""""' string.Empty);  				tempTo [index] = person;  			}  			var from = csvReader.GetField (6);  			var sender = csvReader.GetField (7);  			var subject = csvReader.GetField (10);  			var attachment = (from a in attachments  			where a.Md5 == md5.ToLower ()  			select a).SingleOrDefault ();  			if (attachment == null) {  				attachment = new Attachment ();  				attachment.Md5 = md5.ToLower ();  				attachment.Recipients.AddRange (tempTo);  				attachment.Subjects.Add (subject);  				attachment.Senders.Add (sender);  				if (fileName.Length > 0) {  					attachment.FileNames.Add (fileName);  				}  				attachment.DateSent = dateSent;  				attachments.Add (attachment);  				SubjectRecipents subjectRecipient = new SubjectRecipents ();  				subjectRecipient.Subject = subject;  				subjectRecipient.File = file;  				subjectRecipient.Sender = sender;  				foreach (string person in tempTo) {  					subjectRecipient.Recipients.Add (person);  				}  				attachment.SubjectRecipents.Add (subjectRecipient);  			}  			else {  				foreach (string person in tempTo) {  					var tempPerson = from r in attachment.Recipients  					where r == person  					select r;  					if (tempPerson.Any () == false) {  						attachment.Recipients.Add (person);  					}  				}  				var tempFileName = from s in attachment.FileNames  				where s == fileName  				select s;  				if (tempFileName.Any () == false) {  					attachment.FileNames.Add (fileName);  				}  				var tempSubject = from s in attachment.Subjects  				where s.ToLower () == subject  				select s;  				if (tempSubject.Any () == false) {  					attachment.Subjects.Add (subject);  				}  				var tempSender = from s in attachment.Senders  				where s.ToLower () == sender  				select s;  				if (tempSender.Any () == false) {  					attachment.Senders.Add (sender);  				}  				var subjectRecipient = (from s in attachment.SubjectRecipents  				where s.Subject.ToLower () == subject.ToLower ()  				select s).SingleOrDefault ();  				if (subjectRecipient == null) {  					subjectRecipient = new SubjectRecipents ();  					subjectRecipient.Subject = subject;  					subjectRecipient.File = file;  					subjectRecipient.Sender = sender;  					foreach (string person in tempTo) {  						subjectRecipient.Recipients.Add (person);  					}  					attachment.SubjectRecipents.Add (subjectRecipient);  				}  				else {  					foreach (string person in tempTo) {  						var tempPerson = from r in subjectRecipient.Recipients  						where r == person  						select r;  						if (tempPerson.Any () == false) {  							subjectRecipient.Recipients.Add (person);  						}  					}  				}  			}  		}  		OutputSummary (outputDirectory' attachments);  	}  
Magic Number,SessionViewer.SessionProcessors,SmtpExtractor,C:\repos\woanware_SessionViewer\Source\Extractors\SmtpExtractor.cs,ProcessAttachmentHashes,The following statement contains a magic number: using (StreamReader sr = new StreamReader (System.IO.Path.Combine (outputDirectory' "Attachment.Hashes.csv")))  	using (CsvHelper.CsvReader csvReader = new CsvHelper.CsvReader (sr' csvConfig)) {  		List<Attachment> attachments = new List<Attachment> ();  		while (csvReader.Read ()) {  			var md5 = csvReader.GetField (0);  			var file = csvReader.GetField (1);  			var fileName = System.IO.Path.GetFileName (file);  			var srcIp = csvReader.GetField (2);  			var srcPort = csvReader.GetField (3);  			var dstIp = csvReader.GetField (4);  			var dstPort = csvReader.GetField (5);  			var to = csvReader.GetField (6);  			var dateSent = csvReader.GetField (11);  			List<string> tempTo = new List<string> (to.Split ('''));  			for (int index = tempTo.Count () - 1; index > -1; index--) {  				string person = tempTo [index].Trim ().ToLower ();  				if (person.IndexOf ("@") == -1) {  					tempTo.RemoveAt (index);  					continue;  				}  				Match match = regex.Match (person);  				if (match.Success == true) {  					person = match.Groups [1].Value;  				}  				person = person.Replace (@""""' string.Empty);  				tempTo [index] = person;  			}  			var from = csvReader.GetField (6);  			var sender = csvReader.GetField (7);  			var subject = csvReader.GetField (10);  			var attachment = (from a in attachments  			where a.Md5 == md5.ToLower ()  			select a).SingleOrDefault ();  			if (attachment == null) {  				attachment = new Attachment ();  				attachment.Md5 = md5.ToLower ();  				attachment.Recipients.AddRange (tempTo);  				attachment.Subjects.Add (subject);  				attachment.Senders.Add (sender);  				if (fileName.Length > 0) {  					attachment.FileNames.Add (fileName);  				}  				attachment.DateSent = dateSent;  				attachments.Add (attachment);  				SubjectRecipents subjectRecipient = new SubjectRecipents ();  				subjectRecipient.Subject = subject;  				subjectRecipient.File = file;  				subjectRecipient.Sender = sender;  				foreach (string person in tempTo) {  					subjectRecipient.Recipients.Add (person);  				}  				attachment.SubjectRecipents.Add (subjectRecipient);  			}  			else {  				foreach (string person in tempTo) {  					var tempPerson = from r in attachment.Recipients  					where r == person  					select r;  					if (tempPerson.Any () == false) {  						attachment.Recipients.Add (person);  					}  				}  				var tempFileName = from s in attachment.FileNames  				where s == fileName  				select s;  				if (tempFileName.Any () == false) {  					attachment.FileNames.Add (fileName);  				}  				var tempSubject = from s in attachment.Subjects  				where s.ToLower () == subject  				select s;  				if (tempSubject.Any () == false) {  					attachment.Subjects.Add (subject);  				}  				var tempSender = from s in attachment.Senders  				where s.ToLower () == sender  				select s;  				if (tempSender.Any () == false) {  					attachment.Senders.Add (sender);  				}  				var subjectRecipient = (from s in attachment.SubjectRecipents  				where s.Subject.ToLower () == subject.ToLower ()  				select s).SingleOrDefault ();  				if (subjectRecipient == null) {  					subjectRecipient = new SubjectRecipents ();  					subjectRecipient.Subject = subject;  					subjectRecipient.File = file;  					subjectRecipient.Sender = sender;  					foreach (string person in tempTo) {  						subjectRecipient.Recipients.Add (person);  					}  					attachment.SubjectRecipents.Add (subjectRecipient);  				}  				else {  					foreach (string person in tempTo) {  						var tempPerson = from r in subjectRecipient.Recipients  						where r == person  						select r;  						if (tempPerson.Any () == false) {  							subjectRecipient.Recipients.Add (person);  						}  					}  				}  			}  		}  		OutputSummary (outputDirectory' attachments);  	}  
Magic Number,SessionViewer.SessionProcessors,SmtpExtractor,C:\repos\woanware_SessionViewer\Source\Extractors\SmtpExtractor.cs,ProcessAttachmentHashes,The following statement contains a magic number: using (CsvHelper.CsvReader csvReader = new CsvHelper.CsvReader (sr' csvConfig)) {  	List<Attachment> attachments = new List<Attachment> ();  	while (csvReader.Read ()) {  		var md5 = csvReader.GetField (0);  		var file = csvReader.GetField (1);  		var fileName = System.IO.Path.GetFileName (file);  		var srcIp = csvReader.GetField (2);  		var srcPort = csvReader.GetField (3);  		var dstIp = csvReader.GetField (4);  		var dstPort = csvReader.GetField (5);  		var to = csvReader.GetField (6);  		var dateSent = csvReader.GetField (11);  		List<string> tempTo = new List<string> (to.Split ('''));  		for (int index = tempTo.Count () - 1; index > -1; index--) {  			string person = tempTo [index].Trim ().ToLower ();  			if (person.IndexOf ("@") == -1) {  				tempTo.RemoveAt (index);  				continue;  			}  			Match match = regex.Match (person);  			if (match.Success == true) {  				person = match.Groups [1].Value;  			}  			person = person.Replace (@""""' string.Empty);  			tempTo [index] = person;  		}  		var from = csvReader.GetField (6);  		var sender = csvReader.GetField (7);  		var subject = csvReader.GetField (10);  		var attachment = (from a in attachments  		where a.Md5 == md5.ToLower ()  		select a).SingleOrDefault ();  		if (attachment == null) {  			attachment = new Attachment ();  			attachment.Md5 = md5.ToLower ();  			attachment.Recipients.AddRange (tempTo);  			attachment.Subjects.Add (subject);  			attachment.Senders.Add (sender);  			if (fileName.Length > 0) {  				attachment.FileNames.Add (fileName);  			}  			attachment.DateSent = dateSent;  			attachments.Add (attachment);  			SubjectRecipents subjectRecipient = new SubjectRecipents ();  			subjectRecipient.Subject = subject;  			subjectRecipient.File = file;  			subjectRecipient.Sender = sender;  			foreach (string person in tempTo) {  				subjectRecipient.Recipients.Add (person);  			}  			attachment.SubjectRecipents.Add (subjectRecipient);  		}  		else {  			foreach (string person in tempTo) {  				var tempPerson = from r in attachment.Recipients  				where r == person  				select r;  				if (tempPerson.Any () == false) {  					attachment.Recipients.Add (person);  				}  			}  			var tempFileName = from s in attachment.FileNames  			where s == fileName  			select s;  			if (tempFileName.Any () == false) {  				attachment.FileNames.Add (fileName);  			}  			var tempSubject = from s in attachment.Subjects  			where s.ToLower () == subject  			select s;  			if (tempSubject.Any () == false) {  				attachment.Subjects.Add (subject);  			}  			var tempSender = from s in attachment.Senders  			where s.ToLower () == sender  			select s;  			if (tempSender.Any () == false) {  				attachment.Senders.Add (sender);  			}  			var subjectRecipient = (from s in attachment.SubjectRecipents  			where s.Subject.ToLower () == subject.ToLower ()  			select s).SingleOrDefault ();  			if (subjectRecipient == null) {  				subjectRecipient = new SubjectRecipents ();  				subjectRecipient.Subject = subject;  				subjectRecipient.File = file;  				subjectRecipient.Sender = sender;  				foreach (string person in tempTo) {  					subjectRecipient.Recipients.Add (person);  				}  				attachment.SubjectRecipents.Add (subjectRecipient);  			}  			else {  				foreach (string person in tempTo) {  					var tempPerson = from r in subjectRecipient.Recipients  					where r == person  					select r;  					if (tempPerson.Any () == false) {  						subjectRecipient.Recipients.Add (person);  					}  				}  			}  		}  	}  	OutputSummary (outputDirectory' attachments);  }  
Magic Number,SessionViewer.SessionProcessors,SmtpExtractor,C:\repos\woanware_SessionViewer\Source\Extractors\SmtpExtractor.cs,ProcessAttachmentHashes,The following statement contains a magic number: using (CsvHelper.CsvReader csvReader = new CsvHelper.CsvReader (sr' csvConfig)) {  	List<Attachment> attachments = new List<Attachment> ();  	while (csvReader.Read ()) {  		var md5 = csvReader.GetField (0);  		var file = csvReader.GetField (1);  		var fileName = System.IO.Path.GetFileName (file);  		var srcIp = csvReader.GetField (2);  		var srcPort = csvReader.GetField (3);  		var dstIp = csvReader.GetField (4);  		var dstPort = csvReader.GetField (5);  		var to = csvReader.GetField (6);  		var dateSent = csvReader.GetField (11);  		List<string> tempTo = new List<string> (to.Split ('''));  		for (int index = tempTo.Count () - 1; index > -1; index--) {  			string person = tempTo [index].Trim ().ToLower ();  			if (person.IndexOf ("@") == -1) {  				tempTo.RemoveAt (index);  				continue;  			}  			Match match = regex.Match (person);  			if (match.Success == true) {  				person = match.Groups [1].Value;  			}  			person = person.Replace (@""""' string.Empty);  			tempTo [index] = person;  		}  		var from = csvReader.GetField (6);  		var sender = csvReader.GetField (7);  		var subject = csvReader.GetField (10);  		var attachment = (from a in attachments  		where a.Md5 == md5.ToLower ()  		select a).SingleOrDefault ();  		if (attachment == null) {  			attachment = new Attachment ();  			attachment.Md5 = md5.ToLower ();  			attachment.Recipients.AddRange (tempTo);  			attachment.Subjects.Add (subject);  			attachment.Senders.Add (sender);  			if (fileName.Length > 0) {  				attachment.FileNames.Add (fileName);  			}  			attachment.DateSent = dateSent;  			attachments.Add (attachment);  			SubjectRecipents subjectRecipient = new SubjectRecipents ();  			subjectRecipient.Subject = subject;  			subjectRecipient.File = file;  			subjectRecipient.Sender = sender;  			foreach (string person in tempTo) {  				subjectRecipient.Recipients.Add (person);  			}  			attachment.SubjectRecipents.Add (subjectRecipient);  		}  		else {  			foreach (string person in tempTo) {  				var tempPerson = from r in attachment.Recipients  				where r == person  				select r;  				if (tempPerson.Any () == false) {  					attachment.Recipients.Add (person);  				}  			}  			var tempFileName = from s in attachment.FileNames  			where s == fileName  			select s;  			if (tempFileName.Any () == false) {  				attachment.FileNames.Add (fileName);  			}  			var tempSubject = from s in attachment.Subjects  			where s.ToLower () == subject  			select s;  			if (tempSubject.Any () == false) {  				attachment.Subjects.Add (subject);  			}  			var tempSender = from s in attachment.Senders  			where s.ToLower () == sender  			select s;  			if (tempSender.Any () == false) {  				attachment.Senders.Add (sender);  			}  			var subjectRecipient = (from s in attachment.SubjectRecipents  			where s.Subject.ToLower () == subject.ToLower ()  			select s).SingleOrDefault ();  			if (subjectRecipient == null) {  				subjectRecipient = new SubjectRecipents ();  				subjectRecipient.Subject = subject;  				subjectRecipient.File = file;  				subjectRecipient.Sender = sender;  				foreach (string person in tempTo) {  					subjectRecipient.Recipients.Add (person);  				}  				attachment.SubjectRecipents.Add (subjectRecipient);  			}  			else {  				foreach (string person in tempTo) {  					var tempPerson = from r in subjectRecipient.Recipients  					where r == person  					select r;  					if (tempPerson.Any () == false) {  						subjectRecipient.Recipients.Add (person);  					}  				}  			}  		}  	}  	OutputSummary (outputDirectory' attachments);  }  
Magic Number,SessionViewer.SessionProcessors,SmtpExtractor,C:\repos\woanware_SessionViewer\Source\Extractors\SmtpExtractor.cs,ProcessAttachmentHashes,The following statement contains a magic number: using (CsvHelper.CsvReader csvReader = new CsvHelper.CsvReader (sr' csvConfig)) {  	List<Attachment> attachments = new List<Attachment> ();  	while (csvReader.Read ()) {  		var md5 = csvReader.GetField (0);  		var file = csvReader.GetField (1);  		var fileName = System.IO.Path.GetFileName (file);  		var srcIp = csvReader.GetField (2);  		var srcPort = csvReader.GetField (3);  		var dstIp = csvReader.GetField (4);  		var dstPort = csvReader.GetField (5);  		var to = csvReader.GetField (6);  		var dateSent = csvReader.GetField (11);  		List<string> tempTo = new List<string> (to.Split ('''));  		for (int index = tempTo.Count () - 1; index > -1; index--) {  			string person = tempTo [index].Trim ().ToLower ();  			if (person.IndexOf ("@") == -1) {  				tempTo.RemoveAt (index);  				continue;  			}  			Match match = regex.Match (person);  			if (match.Success == true) {  				person = match.Groups [1].Value;  			}  			person = person.Replace (@""""' string.Empty);  			tempTo [index] = person;  		}  		var from = csvReader.GetField (6);  		var sender = csvReader.GetField (7);  		var subject = csvReader.GetField (10);  		var attachment = (from a in attachments  		where a.Md5 == md5.ToLower ()  		select a).SingleOrDefault ();  		if (attachment == null) {  			attachment = new Attachment ();  			attachment.Md5 = md5.ToLower ();  			attachment.Recipients.AddRange (tempTo);  			attachment.Subjects.Add (subject);  			attachment.Senders.Add (sender);  			if (fileName.Length > 0) {  				attachment.FileNames.Add (fileName);  			}  			attachment.DateSent = dateSent;  			attachments.Add (attachment);  			SubjectRecipents subjectRecipient = new SubjectRecipents ();  			subjectRecipient.Subject = subject;  			subjectRecipient.File = file;  			subjectRecipient.Sender = sender;  			foreach (string person in tempTo) {  				subjectRecipient.Recipients.Add (person);  			}  			attachment.SubjectRecipents.Add (subjectRecipient);  		}  		else {  			foreach (string person in tempTo) {  				var tempPerson = from r in attachment.Recipients  				where r == person  				select r;  				if (tempPerson.Any () == false) {  					attachment.Recipients.Add (person);  				}  			}  			var tempFileName = from s in attachment.FileNames  			where s == fileName  			select s;  			if (tempFileName.Any () == false) {  				attachment.FileNames.Add (fileName);  			}  			var tempSubject = from s in attachment.Subjects  			where s.ToLower () == subject  			select s;  			if (tempSubject.Any () == false) {  				attachment.Subjects.Add (subject);  			}  			var tempSender = from s in attachment.Senders  			where s.ToLower () == sender  			select s;  			if (tempSender.Any () == false) {  				attachment.Senders.Add (sender);  			}  			var subjectRecipient = (from s in attachment.SubjectRecipents  			where s.Subject.ToLower () == subject.ToLower ()  			select s).SingleOrDefault ();  			if (subjectRecipient == null) {  				subjectRecipient = new SubjectRecipents ();  				subjectRecipient.Subject = subject;  				subjectRecipient.File = file;  				subjectRecipient.Sender = sender;  				foreach (string person in tempTo) {  					subjectRecipient.Recipients.Add (person);  				}  				attachment.SubjectRecipents.Add (subjectRecipient);  			}  			else {  				foreach (string person in tempTo) {  					var tempPerson = from r in subjectRecipient.Recipients  					where r == person  					select r;  					if (tempPerson.Any () == false) {  						subjectRecipient.Recipients.Add (person);  					}  				}  			}  		}  	}  	OutputSummary (outputDirectory' attachments);  }  
Magic Number,SessionViewer.SessionProcessors,SmtpExtractor,C:\repos\woanware_SessionViewer\Source\Extractors\SmtpExtractor.cs,ProcessAttachmentHashes,The following statement contains a magic number: using (CsvHelper.CsvReader csvReader = new CsvHelper.CsvReader (sr' csvConfig)) {  	List<Attachment> attachments = new List<Attachment> ();  	while (csvReader.Read ()) {  		var md5 = csvReader.GetField (0);  		var file = csvReader.GetField (1);  		var fileName = System.IO.Path.GetFileName (file);  		var srcIp = csvReader.GetField (2);  		var srcPort = csvReader.GetField (3);  		var dstIp = csvReader.GetField (4);  		var dstPort = csvReader.GetField (5);  		var to = csvReader.GetField (6);  		var dateSent = csvReader.GetField (11);  		List<string> tempTo = new List<string> (to.Split ('''));  		for (int index = tempTo.Count () - 1; index > -1; index--) {  			string person = tempTo [index].Trim ().ToLower ();  			if (person.IndexOf ("@") == -1) {  				tempTo.RemoveAt (index);  				continue;  			}  			Match match = regex.Match (person);  			if (match.Success == true) {  				person = match.Groups [1].Value;  			}  			person = person.Replace (@""""' string.Empty);  			tempTo [index] = person;  		}  		var from = csvReader.GetField (6);  		var sender = csvReader.GetField (7);  		var subject = csvReader.GetField (10);  		var attachment = (from a in attachments  		where a.Md5 == md5.ToLower ()  		select a).SingleOrDefault ();  		if (attachment == null) {  			attachment = new Attachment ();  			attachment.Md5 = md5.ToLower ();  			attachment.Recipients.AddRange (tempTo);  			attachment.Subjects.Add (subject);  			attachment.Senders.Add (sender);  			if (fileName.Length > 0) {  				attachment.FileNames.Add (fileName);  			}  			attachment.DateSent = dateSent;  			attachments.Add (attachment);  			SubjectRecipents subjectRecipient = new SubjectRecipents ();  			subjectRecipient.Subject = subject;  			subjectRecipient.File = file;  			subjectRecipient.Sender = sender;  			foreach (string person in tempTo) {  				subjectRecipient.Recipients.Add (person);  			}  			attachment.SubjectRecipents.Add (subjectRecipient);  		}  		else {  			foreach (string person in tempTo) {  				var tempPerson = from r in attachment.Recipients  				where r == person  				select r;  				if (tempPerson.Any () == false) {  					attachment.Recipients.Add (person);  				}  			}  			var tempFileName = from s in attachment.FileNames  			where s == fileName  			select s;  			if (tempFileName.Any () == false) {  				attachment.FileNames.Add (fileName);  			}  			var tempSubject = from s in attachment.Subjects  			where s.ToLower () == subject  			select s;  			if (tempSubject.Any () == false) {  				attachment.Subjects.Add (subject);  			}  			var tempSender = from s in attachment.Senders  			where s.ToLower () == sender  			select s;  			if (tempSender.Any () == false) {  				attachment.Senders.Add (sender);  			}  			var subjectRecipient = (from s in attachment.SubjectRecipents  			where s.Subject.ToLower () == subject.ToLower ()  			select s).SingleOrDefault ();  			if (subjectRecipient == null) {  				subjectRecipient = new SubjectRecipents ();  				subjectRecipient.Subject = subject;  				subjectRecipient.File = file;  				subjectRecipient.Sender = sender;  				foreach (string person in tempTo) {  					subjectRecipient.Recipients.Add (person);  				}  				attachment.SubjectRecipents.Add (subjectRecipient);  			}  			else {  				foreach (string person in tempTo) {  					var tempPerson = from r in subjectRecipient.Recipients  					where r == person  					select r;  					if (tempPerson.Any () == false) {  						subjectRecipient.Recipients.Add (person);  					}  				}  			}  		}  	}  	OutputSummary (outputDirectory' attachments);  }  
Magic Number,SessionViewer.SessionProcessors,SmtpExtractor,C:\repos\woanware_SessionViewer\Source\Extractors\SmtpExtractor.cs,ProcessAttachmentHashes,The following statement contains a magic number: using (CsvHelper.CsvReader csvReader = new CsvHelper.CsvReader (sr' csvConfig)) {  	List<Attachment> attachments = new List<Attachment> ();  	while (csvReader.Read ()) {  		var md5 = csvReader.GetField (0);  		var file = csvReader.GetField (1);  		var fileName = System.IO.Path.GetFileName (file);  		var srcIp = csvReader.GetField (2);  		var srcPort = csvReader.GetField (3);  		var dstIp = csvReader.GetField (4);  		var dstPort = csvReader.GetField (5);  		var to = csvReader.GetField (6);  		var dateSent = csvReader.GetField (11);  		List<string> tempTo = new List<string> (to.Split ('''));  		for (int index = tempTo.Count () - 1; index > -1; index--) {  			string person = tempTo [index].Trim ().ToLower ();  			if (person.IndexOf ("@") == -1) {  				tempTo.RemoveAt (index);  				continue;  			}  			Match match = regex.Match (person);  			if (match.Success == true) {  				person = match.Groups [1].Value;  			}  			person = person.Replace (@""""' string.Empty);  			tempTo [index] = person;  		}  		var from = csvReader.GetField (6);  		var sender = csvReader.GetField (7);  		var subject = csvReader.GetField (10);  		var attachment = (from a in attachments  		where a.Md5 == md5.ToLower ()  		select a).SingleOrDefault ();  		if (attachment == null) {  			attachment = new Attachment ();  			attachment.Md5 = md5.ToLower ();  			attachment.Recipients.AddRange (tempTo);  			attachment.Subjects.Add (subject);  			attachment.Senders.Add (sender);  			if (fileName.Length > 0) {  				attachment.FileNames.Add (fileName);  			}  			attachment.DateSent = dateSent;  			attachments.Add (attachment);  			SubjectRecipents subjectRecipient = new SubjectRecipents ();  			subjectRecipient.Subject = subject;  			subjectRecipient.File = file;  			subjectRecipient.Sender = sender;  			foreach (string person in tempTo) {  				subjectRecipient.Recipients.Add (person);  			}  			attachment.SubjectRecipents.Add (subjectRecipient);  		}  		else {  			foreach (string person in tempTo) {  				var tempPerson = from r in attachment.Recipients  				where r == person  				select r;  				if (tempPerson.Any () == false) {  					attachment.Recipients.Add (person);  				}  			}  			var tempFileName = from s in attachment.FileNames  			where s == fileName  			select s;  			if (tempFileName.Any () == false) {  				attachment.FileNames.Add (fileName);  			}  			var tempSubject = from s in attachment.Subjects  			where s.ToLower () == subject  			select s;  			if (tempSubject.Any () == false) {  				attachment.Subjects.Add (subject);  			}  			var tempSender = from s in attachment.Senders  			where s.ToLower () == sender  			select s;  			if (tempSender.Any () == false) {  				attachment.Senders.Add (sender);  			}  			var subjectRecipient = (from s in attachment.SubjectRecipents  			where s.Subject.ToLower () == subject.ToLower ()  			select s).SingleOrDefault ();  			if (subjectRecipient == null) {  				subjectRecipient = new SubjectRecipents ();  				subjectRecipient.Subject = subject;  				subjectRecipient.File = file;  				subjectRecipient.Sender = sender;  				foreach (string person in tempTo) {  					subjectRecipient.Recipients.Add (person);  				}  				attachment.SubjectRecipents.Add (subjectRecipient);  			}  			else {  				foreach (string person in tempTo) {  					var tempPerson = from r in subjectRecipient.Recipients  					where r == person  					select r;  					if (tempPerson.Any () == false) {  						subjectRecipient.Recipients.Add (person);  					}  				}  			}  		}  	}  	OutputSummary (outputDirectory' attachments);  }  
Magic Number,SessionViewer.SessionProcessors,SmtpExtractor,C:\repos\woanware_SessionViewer\Source\Extractors\SmtpExtractor.cs,ProcessAttachmentHashes,The following statement contains a magic number: using (CsvHelper.CsvReader csvReader = new CsvHelper.CsvReader (sr' csvConfig)) {  	List<Attachment> attachments = new List<Attachment> ();  	while (csvReader.Read ()) {  		var md5 = csvReader.GetField (0);  		var file = csvReader.GetField (1);  		var fileName = System.IO.Path.GetFileName (file);  		var srcIp = csvReader.GetField (2);  		var srcPort = csvReader.GetField (3);  		var dstIp = csvReader.GetField (4);  		var dstPort = csvReader.GetField (5);  		var to = csvReader.GetField (6);  		var dateSent = csvReader.GetField (11);  		List<string> tempTo = new List<string> (to.Split ('''));  		for (int index = tempTo.Count () - 1; index > -1; index--) {  			string person = tempTo [index].Trim ().ToLower ();  			if (person.IndexOf ("@") == -1) {  				tempTo.RemoveAt (index);  				continue;  			}  			Match match = regex.Match (person);  			if (match.Success == true) {  				person = match.Groups [1].Value;  			}  			person = person.Replace (@""""' string.Empty);  			tempTo [index] = person;  		}  		var from = csvReader.GetField (6);  		var sender = csvReader.GetField (7);  		var subject = csvReader.GetField (10);  		var attachment = (from a in attachments  		where a.Md5 == md5.ToLower ()  		select a).SingleOrDefault ();  		if (attachment == null) {  			attachment = new Attachment ();  			attachment.Md5 = md5.ToLower ();  			attachment.Recipients.AddRange (tempTo);  			attachment.Subjects.Add (subject);  			attachment.Senders.Add (sender);  			if (fileName.Length > 0) {  				attachment.FileNames.Add (fileName);  			}  			attachment.DateSent = dateSent;  			attachments.Add (attachment);  			SubjectRecipents subjectRecipient = new SubjectRecipents ();  			subjectRecipient.Subject = subject;  			subjectRecipient.File = file;  			subjectRecipient.Sender = sender;  			foreach (string person in tempTo) {  				subjectRecipient.Recipients.Add (person);  			}  			attachment.SubjectRecipents.Add (subjectRecipient);  		}  		else {  			foreach (string person in tempTo) {  				var tempPerson = from r in attachment.Recipients  				where r == person  				select r;  				if (tempPerson.Any () == false) {  					attachment.Recipients.Add (person);  				}  			}  			var tempFileName = from s in attachment.FileNames  			where s == fileName  			select s;  			if (tempFileName.Any () == false) {  				attachment.FileNames.Add (fileName);  			}  			var tempSubject = from s in attachment.Subjects  			where s.ToLower () == subject  			select s;  			if (tempSubject.Any () == false) {  				attachment.Subjects.Add (subject);  			}  			var tempSender = from s in attachment.Senders  			where s.ToLower () == sender  			select s;  			if (tempSender.Any () == false) {  				attachment.Senders.Add (sender);  			}  			var subjectRecipient = (from s in attachment.SubjectRecipents  			where s.Subject.ToLower () == subject.ToLower ()  			select s).SingleOrDefault ();  			if (subjectRecipient == null) {  				subjectRecipient = new SubjectRecipents ();  				subjectRecipient.Subject = subject;  				subjectRecipient.File = file;  				subjectRecipient.Sender = sender;  				foreach (string person in tempTo) {  					subjectRecipient.Recipients.Add (person);  				}  				attachment.SubjectRecipents.Add (subjectRecipient);  			}  			else {  				foreach (string person in tempTo) {  					var tempPerson = from r in subjectRecipient.Recipients  					where r == person  					select r;  					if (tempPerson.Any () == false) {  						subjectRecipient.Recipients.Add (person);  					}  				}  			}  		}  	}  	OutputSummary (outputDirectory' attachments);  }  
Magic Number,SessionViewer.SessionProcessors,SmtpExtractor,C:\repos\woanware_SessionViewer\Source\Extractors\SmtpExtractor.cs,ProcessAttachmentHashes,The following statement contains a magic number: using (CsvHelper.CsvReader csvReader = new CsvHelper.CsvReader (sr' csvConfig)) {  	List<Attachment> attachments = new List<Attachment> ();  	while (csvReader.Read ()) {  		var md5 = csvReader.GetField (0);  		var file = csvReader.GetField (1);  		var fileName = System.IO.Path.GetFileName (file);  		var srcIp = csvReader.GetField (2);  		var srcPort = csvReader.GetField (3);  		var dstIp = csvReader.GetField (4);  		var dstPort = csvReader.GetField (5);  		var to = csvReader.GetField (6);  		var dateSent = csvReader.GetField (11);  		List<string> tempTo = new List<string> (to.Split ('''));  		for (int index = tempTo.Count () - 1; index > -1; index--) {  			string person = tempTo [index].Trim ().ToLower ();  			if (person.IndexOf ("@") == -1) {  				tempTo.RemoveAt (index);  				continue;  			}  			Match match = regex.Match (person);  			if (match.Success == true) {  				person = match.Groups [1].Value;  			}  			person = person.Replace (@""""' string.Empty);  			tempTo [index] = person;  		}  		var from = csvReader.GetField (6);  		var sender = csvReader.GetField (7);  		var subject = csvReader.GetField (10);  		var attachment = (from a in attachments  		where a.Md5 == md5.ToLower ()  		select a).SingleOrDefault ();  		if (attachment == null) {  			attachment = new Attachment ();  			attachment.Md5 = md5.ToLower ();  			attachment.Recipients.AddRange (tempTo);  			attachment.Subjects.Add (subject);  			attachment.Senders.Add (sender);  			if (fileName.Length > 0) {  				attachment.FileNames.Add (fileName);  			}  			attachment.DateSent = dateSent;  			attachments.Add (attachment);  			SubjectRecipents subjectRecipient = new SubjectRecipents ();  			subjectRecipient.Subject = subject;  			subjectRecipient.File = file;  			subjectRecipient.Sender = sender;  			foreach (string person in tempTo) {  				subjectRecipient.Recipients.Add (person);  			}  			attachment.SubjectRecipents.Add (subjectRecipient);  		}  		else {  			foreach (string person in tempTo) {  				var tempPerson = from r in attachment.Recipients  				where r == person  				select r;  				if (tempPerson.Any () == false) {  					attachment.Recipients.Add (person);  				}  			}  			var tempFileName = from s in attachment.FileNames  			where s == fileName  			select s;  			if (tempFileName.Any () == false) {  				attachment.FileNames.Add (fileName);  			}  			var tempSubject = from s in attachment.Subjects  			where s.ToLower () == subject  			select s;  			if (tempSubject.Any () == false) {  				attachment.Subjects.Add (subject);  			}  			var tempSender = from s in attachment.Senders  			where s.ToLower () == sender  			select s;  			if (tempSender.Any () == false) {  				attachment.Senders.Add (sender);  			}  			var subjectRecipient = (from s in attachment.SubjectRecipents  			where s.Subject.ToLower () == subject.ToLower ()  			select s).SingleOrDefault ();  			if (subjectRecipient == null) {  				subjectRecipient = new SubjectRecipents ();  				subjectRecipient.Subject = subject;  				subjectRecipient.File = file;  				subjectRecipient.Sender = sender;  				foreach (string person in tempTo) {  					subjectRecipient.Recipients.Add (person);  				}  				attachment.SubjectRecipents.Add (subjectRecipient);  			}  			else {  				foreach (string person in tempTo) {  					var tempPerson = from r in subjectRecipient.Recipients  					where r == person  					select r;  					if (tempPerson.Any () == false) {  						subjectRecipient.Recipients.Add (person);  					}  				}  			}  		}  	}  	OutputSummary (outputDirectory' attachments);  }  
Magic Number,SessionViewer.SessionProcessors,SmtpExtractor,C:\repos\woanware_SessionViewer\Source\Extractors\SmtpExtractor.cs,ProcessAttachmentHashes,The following statement contains a magic number: using (CsvHelper.CsvReader csvReader = new CsvHelper.CsvReader (sr' csvConfig)) {  	List<Attachment> attachments = new List<Attachment> ();  	while (csvReader.Read ()) {  		var md5 = csvReader.GetField (0);  		var file = csvReader.GetField (1);  		var fileName = System.IO.Path.GetFileName (file);  		var srcIp = csvReader.GetField (2);  		var srcPort = csvReader.GetField (3);  		var dstIp = csvReader.GetField (4);  		var dstPort = csvReader.GetField (5);  		var to = csvReader.GetField (6);  		var dateSent = csvReader.GetField (11);  		List<string> tempTo = new List<string> (to.Split ('''));  		for (int index = tempTo.Count () - 1; index > -1; index--) {  			string person = tempTo [index].Trim ().ToLower ();  			if (person.IndexOf ("@") == -1) {  				tempTo.RemoveAt (index);  				continue;  			}  			Match match = regex.Match (person);  			if (match.Success == true) {  				person = match.Groups [1].Value;  			}  			person = person.Replace (@""""' string.Empty);  			tempTo [index] = person;  		}  		var from = csvReader.GetField (6);  		var sender = csvReader.GetField (7);  		var subject = csvReader.GetField (10);  		var attachment = (from a in attachments  		where a.Md5 == md5.ToLower ()  		select a).SingleOrDefault ();  		if (attachment == null) {  			attachment = new Attachment ();  			attachment.Md5 = md5.ToLower ();  			attachment.Recipients.AddRange (tempTo);  			attachment.Subjects.Add (subject);  			attachment.Senders.Add (sender);  			if (fileName.Length > 0) {  				attachment.FileNames.Add (fileName);  			}  			attachment.DateSent = dateSent;  			attachments.Add (attachment);  			SubjectRecipents subjectRecipient = new SubjectRecipents ();  			subjectRecipient.Subject = subject;  			subjectRecipient.File = file;  			subjectRecipient.Sender = sender;  			foreach (string person in tempTo) {  				subjectRecipient.Recipients.Add (person);  			}  			attachment.SubjectRecipents.Add (subjectRecipient);  		}  		else {  			foreach (string person in tempTo) {  				var tempPerson = from r in attachment.Recipients  				where r == person  				select r;  				if (tempPerson.Any () == false) {  					attachment.Recipients.Add (person);  				}  			}  			var tempFileName = from s in attachment.FileNames  			where s == fileName  			select s;  			if (tempFileName.Any () == false) {  				attachment.FileNames.Add (fileName);  			}  			var tempSubject = from s in attachment.Subjects  			where s.ToLower () == subject  			select s;  			if (tempSubject.Any () == false) {  				attachment.Subjects.Add (subject);  			}  			var tempSender = from s in attachment.Senders  			where s.ToLower () == sender  			select s;  			if (tempSender.Any () == false) {  				attachment.Senders.Add (sender);  			}  			var subjectRecipient = (from s in attachment.SubjectRecipents  			where s.Subject.ToLower () == subject.ToLower ()  			select s).SingleOrDefault ();  			if (subjectRecipient == null) {  				subjectRecipient = new SubjectRecipents ();  				subjectRecipient.Subject = subject;  				subjectRecipient.File = file;  				subjectRecipient.Sender = sender;  				foreach (string person in tempTo) {  					subjectRecipient.Recipients.Add (person);  				}  				attachment.SubjectRecipents.Add (subjectRecipient);  			}  			else {  				foreach (string person in tempTo) {  					var tempPerson = from r in subjectRecipient.Recipients  					where r == person  					select r;  					if (tempPerson.Any () == false) {  						subjectRecipient.Recipients.Add (person);  					}  				}  			}  		}  	}  	OutputSummary (outputDirectory' attachments);  }  
Magic Number,SessionViewer.SessionProcessors,SmtpExtractor,C:\repos\woanware_SessionViewer\Source\Extractors\SmtpExtractor.cs,ProcessAttachmentHashes,The following statement contains a magic number: using (CsvHelper.CsvReader csvReader = new CsvHelper.CsvReader (sr' csvConfig)) {  	List<Attachment> attachments = new List<Attachment> ();  	while (csvReader.Read ()) {  		var md5 = csvReader.GetField (0);  		var file = csvReader.GetField (1);  		var fileName = System.IO.Path.GetFileName (file);  		var srcIp = csvReader.GetField (2);  		var srcPort = csvReader.GetField (3);  		var dstIp = csvReader.GetField (4);  		var dstPort = csvReader.GetField (5);  		var to = csvReader.GetField (6);  		var dateSent = csvReader.GetField (11);  		List<string> tempTo = new List<string> (to.Split ('''));  		for (int index = tempTo.Count () - 1; index > -1; index--) {  			string person = tempTo [index].Trim ().ToLower ();  			if (person.IndexOf ("@") == -1) {  				tempTo.RemoveAt (index);  				continue;  			}  			Match match = regex.Match (person);  			if (match.Success == true) {  				person = match.Groups [1].Value;  			}  			person = person.Replace (@""""' string.Empty);  			tempTo [index] = person;  		}  		var from = csvReader.GetField (6);  		var sender = csvReader.GetField (7);  		var subject = csvReader.GetField (10);  		var attachment = (from a in attachments  		where a.Md5 == md5.ToLower ()  		select a).SingleOrDefault ();  		if (attachment == null) {  			attachment = new Attachment ();  			attachment.Md5 = md5.ToLower ();  			attachment.Recipients.AddRange (tempTo);  			attachment.Subjects.Add (subject);  			attachment.Senders.Add (sender);  			if (fileName.Length > 0) {  				attachment.FileNames.Add (fileName);  			}  			attachment.DateSent = dateSent;  			attachments.Add (attachment);  			SubjectRecipents subjectRecipient = new SubjectRecipents ();  			subjectRecipient.Subject = subject;  			subjectRecipient.File = file;  			subjectRecipient.Sender = sender;  			foreach (string person in tempTo) {  				subjectRecipient.Recipients.Add (person);  			}  			attachment.SubjectRecipents.Add (subjectRecipient);  		}  		else {  			foreach (string person in tempTo) {  				var tempPerson = from r in attachment.Recipients  				where r == person  				select r;  				if (tempPerson.Any () == false) {  					attachment.Recipients.Add (person);  				}  			}  			var tempFileName = from s in attachment.FileNames  			where s == fileName  			select s;  			if (tempFileName.Any () == false) {  				attachment.FileNames.Add (fileName);  			}  			var tempSubject = from s in attachment.Subjects  			where s.ToLower () == subject  			select s;  			if (tempSubject.Any () == false) {  				attachment.Subjects.Add (subject);  			}  			var tempSender = from s in attachment.Senders  			where s.ToLower () == sender  			select s;  			if (tempSender.Any () == false) {  				attachment.Senders.Add (sender);  			}  			var subjectRecipient = (from s in attachment.SubjectRecipents  			where s.Subject.ToLower () == subject.ToLower ()  			select s).SingleOrDefault ();  			if (subjectRecipient == null) {  				subjectRecipient = new SubjectRecipents ();  				subjectRecipient.Subject = subject;  				subjectRecipient.File = file;  				subjectRecipient.Sender = sender;  				foreach (string person in tempTo) {  					subjectRecipient.Recipients.Add (person);  				}  				attachment.SubjectRecipents.Add (subjectRecipient);  			}  			else {  				foreach (string person in tempTo) {  					var tempPerson = from r in subjectRecipient.Recipients  					where r == person  					select r;  					if (tempPerson.Any () == false) {  						subjectRecipient.Recipients.Add (person);  					}  				}  			}  		}  	}  	OutputSummary (outputDirectory' attachments);  }  
Magic Number,SessionViewer.SessionProcessors,SmtpExtractor,C:\repos\woanware_SessionViewer\Source\Extractors\SmtpExtractor.cs,ProcessAttachmentHashes,The following statement contains a magic number: while (csvReader.Read ()) {  	var md5 = csvReader.GetField (0);  	var file = csvReader.GetField (1);  	var fileName = System.IO.Path.GetFileName (file);  	var srcIp = csvReader.GetField (2);  	var srcPort = csvReader.GetField (3);  	var dstIp = csvReader.GetField (4);  	var dstPort = csvReader.GetField (5);  	var to = csvReader.GetField (6);  	var dateSent = csvReader.GetField (11);  	List<string> tempTo = new List<string> (to.Split ('''));  	for (int index = tempTo.Count () - 1; index > -1; index--) {  		string person = tempTo [index].Trim ().ToLower ();  		if (person.IndexOf ("@") == -1) {  			tempTo.RemoveAt (index);  			continue;  		}  		Match match = regex.Match (person);  		if (match.Success == true) {  			person = match.Groups [1].Value;  		}  		person = person.Replace (@""""' string.Empty);  		tempTo [index] = person;  	}  	var from = csvReader.GetField (6);  	var sender = csvReader.GetField (7);  	var subject = csvReader.GetField (10);  	var attachment = (from a in attachments  	where a.Md5 == md5.ToLower ()  	select a).SingleOrDefault ();  	if (attachment == null) {  		attachment = new Attachment ();  		attachment.Md5 = md5.ToLower ();  		attachment.Recipients.AddRange (tempTo);  		attachment.Subjects.Add (subject);  		attachment.Senders.Add (sender);  		if (fileName.Length > 0) {  			attachment.FileNames.Add (fileName);  		}  		attachment.DateSent = dateSent;  		attachments.Add (attachment);  		SubjectRecipents subjectRecipient = new SubjectRecipents ();  		subjectRecipient.Subject = subject;  		subjectRecipient.File = file;  		subjectRecipient.Sender = sender;  		foreach (string person in tempTo) {  			subjectRecipient.Recipients.Add (person);  		}  		attachment.SubjectRecipents.Add (subjectRecipient);  	}  	else {  		foreach (string person in tempTo) {  			var tempPerson = from r in attachment.Recipients  			where r == person  			select r;  			if (tempPerson.Any () == false) {  				attachment.Recipients.Add (person);  			}  		}  		var tempFileName = from s in attachment.FileNames  		where s == fileName  		select s;  		if (tempFileName.Any () == false) {  			attachment.FileNames.Add (fileName);  		}  		var tempSubject = from s in attachment.Subjects  		where s.ToLower () == subject  		select s;  		if (tempSubject.Any () == false) {  			attachment.Subjects.Add (subject);  		}  		var tempSender = from s in attachment.Senders  		where s.ToLower () == sender  		select s;  		if (tempSender.Any () == false) {  			attachment.Senders.Add (sender);  		}  		var subjectRecipient = (from s in attachment.SubjectRecipents  		where s.Subject.ToLower () == subject.ToLower ()  		select s).SingleOrDefault ();  		if (subjectRecipient == null) {  			subjectRecipient = new SubjectRecipents ();  			subjectRecipient.Subject = subject;  			subjectRecipient.File = file;  			subjectRecipient.Sender = sender;  			foreach (string person in tempTo) {  				subjectRecipient.Recipients.Add (person);  			}  			attachment.SubjectRecipents.Add (subjectRecipient);  		}  		else {  			foreach (string person in tempTo) {  				var tempPerson = from r in subjectRecipient.Recipients  				where r == person  				select r;  				if (tempPerson.Any () == false) {  					subjectRecipient.Recipients.Add (person);  				}  			}  		}  	}  }  
Magic Number,SessionViewer.SessionProcessors,SmtpExtractor,C:\repos\woanware_SessionViewer\Source\Extractors\SmtpExtractor.cs,ProcessAttachmentHashes,The following statement contains a magic number: while (csvReader.Read ()) {  	var md5 = csvReader.GetField (0);  	var file = csvReader.GetField (1);  	var fileName = System.IO.Path.GetFileName (file);  	var srcIp = csvReader.GetField (2);  	var srcPort = csvReader.GetField (3);  	var dstIp = csvReader.GetField (4);  	var dstPort = csvReader.GetField (5);  	var to = csvReader.GetField (6);  	var dateSent = csvReader.GetField (11);  	List<string> tempTo = new List<string> (to.Split ('''));  	for (int index = tempTo.Count () - 1; index > -1; index--) {  		string person = tempTo [index].Trim ().ToLower ();  		if (person.IndexOf ("@") == -1) {  			tempTo.RemoveAt (index);  			continue;  		}  		Match match = regex.Match (person);  		if (match.Success == true) {  			person = match.Groups [1].Value;  		}  		person = person.Replace (@""""' string.Empty);  		tempTo [index] = person;  	}  	var from = csvReader.GetField (6);  	var sender = csvReader.GetField (7);  	var subject = csvReader.GetField (10);  	var attachment = (from a in attachments  	where a.Md5 == md5.ToLower ()  	select a).SingleOrDefault ();  	if (attachment == null) {  		attachment = new Attachment ();  		attachment.Md5 = md5.ToLower ();  		attachment.Recipients.AddRange (tempTo);  		attachment.Subjects.Add (subject);  		attachment.Senders.Add (sender);  		if (fileName.Length > 0) {  			attachment.FileNames.Add (fileName);  		}  		attachment.DateSent = dateSent;  		attachments.Add (attachment);  		SubjectRecipents subjectRecipient = new SubjectRecipents ();  		subjectRecipient.Subject = subject;  		subjectRecipient.File = file;  		subjectRecipient.Sender = sender;  		foreach (string person in tempTo) {  			subjectRecipient.Recipients.Add (person);  		}  		attachment.SubjectRecipents.Add (subjectRecipient);  	}  	else {  		foreach (string person in tempTo) {  			var tempPerson = from r in attachment.Recipients  			where r == person  			select r;  			if (tempPerson.Any () == false) {  				attachment.Recipients.Add (person);  			}  		}  		var tempFileName = from s in attachment.FileNames  		where s == fileName  		select s;  		if (tempFileName.Any () == false) {  			attachment.FileNames.Add (fileName);  		}  		var tempSubject = from s in attachment.Subjects  		where s.ToLower () == subject  		select s;  		if (tempSubject.Any () == false) {  			attachment.Subjects.Add (subject);  		}  		var tempSender = from s in attachment.Senders  		where s.ToLower () == sender  		select s;  		if (tempSender.Any () == false) {  			attachment.Senders.Add (sender);  		}  		var subjectRecipient = (from s in attachment.SubjectRecipents  		where s.Subject.ToLower () == subject.ToLower ()  		select s).SingleOrDefault ();  		if (subjectRecipient == null) {  			subjectRecipient = new SubjectRecipents ();  			subjectRecipient.Subject = subject;  			subjectRecipient.File = file;  			subjectRecipient.Sender = sender;  			foreach (string person in tempTo) {  				subjectRecipient.Recipients.Add (person);  			}  			attachment.SubjectRecipents.Add (subjectRecipient);  		}  		else {  			foreach (string person in tempTo) {  				var tempPerson = from r in subjectRecipient.Recipients  				where r == person  				select r;  				if (tempPerson.Any () == false) {  					subjectRecipient.Recipients.Add (person);  				}  			}  		}  	}  }  
Magic Number,SessionViewer.SessionProcessors,SmtpExtractor,C:\repos\woanware_SessionViewer\Source\Extractors\SmtpExtractor.cs,ProcessAttachmentHashes,The following statement contains a magic number: while (csvReader.Read ()) {  	var md5 = csvReader.GetField (0);  	var file = csvReader.GetField (1);  	var fileName = System.IO.Path.GetFileName (file);  	var srcIp = csvReader.GetField (2);  	var srcPort = csvReader.GetField (3);  	var dstIp = csvReader.GetField (4);  	var dstPort = csvReader.GetField (5);  	var to = csvReader.GetField (6);  	var dateSent = csvReader.GetField (11);  	List<string> tempTo = new List<string> (to.Split ('''));  	for (int index = tempTo.Count () - 1; index > -1; index--) {  		string person = tempTo [index].Trim ().ToLower ();  		if (person.IndexOf ("@") == -1) {  			tempTo.RemoveAt (index);  			continue;  		}  		Match match = regex.Match (person);  		if (match.Success == true) {  			person = match.Groups [1].Value;  		}  		person = person.Replace (@""""' string.Empty);  		tempTo [index] = person;  	}  	var from = csvReader.GetField (6);  	var sender = csvReader.GetField (7);  	var subject = csvReader.GetField (10);  	var attachment = (from a in attachments  	where a.Md5 == md5.ToLower ()  	select a).SingleOrDefault ();  	if (attachment == null) {  		attachment = new Attachment ();  		attachment.Md5 = md5.ToLower ();  		attachment.Recipients.AddRange (tempTo);  		attachment.Subjects.Add (subject);  		attachment.Senders.Add (sender);  		if (fileName.Length > 0) {  			attachment.FileNames.Add (fileName);  		}  		attachment.DateSent = dateSent;  		attachments.Add (attachment);  		SubjectRecipents subjectRecipient = new SubjectRecipents ();  		subjectRecipient.Subject = subject;  		subjectRecipient.File = file;  		subjectRecipient.Sender = sender;  		foreach (string person in tempTo) {  			subjectRecipient.Recipients.Add (person);  		}  		attachment.SubjectRecipents.Add (subjectRecipient);  	}  	else {  		foreach (string person in tempTo) {  			var tempPerson = from r in attachment.Recipients  			where r == person  			select r;  			if (tempPerson.Any () == false) {  				attachment.Recipients.Add (person);  			}  		}  		var tempFileName = from s in attachment.FileNames  		where s == fileName  		select s;  		if (tempFileName.Any () == false) {  			attachment.FileNames.Add (fileName);  		}  		var tempSubject = from s in attachment.Subjects  		where s.ToLower () == subject  		select s;  		if (tempSubject.Any () == false) {  			attachment.Subjects.Add (subject);  		}  		var tempSender = from s in attachment.Senders  		where s.ToLower () == sender  		select s;  		if (tempSender.Any () == false) {  			attachment.Senders.Add (sender);  		}  		var subjectRecipient = (from s in attachment.SubjectRecipents  		where s.Subject.ToLower () == subject.ToLower ()  		select s).SingleOrDefault ();  		if (subjectRecipient == null) {  			subjectRecipient = new SubjectRecipents ();  			subjectRecipient.Subject = subject;  			subjectRecipient.File = file;  			subjectRecipient.Sender = sender;  			foreach (string person in tempTo) {  				subjectRecipient.Recipients.Add (person);  			}  			attachment.SubjectRecipents.Add (subjectRecipient);  		}  		else {  			foreach (string person in tempTo) {  				var tempPerson = from r in subjectRecipient.Recipients  				where r == person  				select r;  				if (tempPerson.Any () == false) {  					subjectRecipient.Recipients.Add (person);  				}  			}  		}  	}  }  
Magic Number,SessionViewer.SessionProcessors,SmtpExtractor,C:\repos\woanware_SessionViewer\Source\Extractors\SmtpExtractor.cs,ProcessAttachmentHashes,The following statement contains a magic number: while (csvReader.Read ()) {  	var md5 = csvReader.GetField (0);  	var file = csvReader.GetField (1);  	var fileName = System.IO.Path.GetFileName (file);  	var srcIp = csvReader.GetField (2);  	var srcPort = csvReader.GetField (3);  	var dstIp = csvReader.GetField (4);  	var dstPort = csvReader.GetField (5);  	var to = csvReader.GetField (6);  	var dateSent = csvReader.GetField (11);  	List<string> tempTo = new List<string> (to.Split ('''));  	for (int index = tempTo.Count () - 1; index > -1; index--) {  		string person = tempTo [index].Trim ().ToLower ();  		if (person.IndexOf ("@") == -1) {  			tempTo.RemoveAt (index);  			continue;  		}  		Match match = regex.Match (person);  		if (match.Success == true) {  			person = match.Groups [1].Value;  		}  		person = person.Replace (@""""' string.Empty);  		tempTo [index] = person;  	}  	var from = csvReader.GetField (6);  	var sender = csvReader.GetField (7);  	var subject = csvReader.GetField (10);  	var attachment = (from a in attachments  	where a.Md5 == md5.ToLower ()  	select a).SingleOrDefault ();  	if (attachment == null) {  		attachment = new Attachment ();  		attachment.Md5 = md5.ToLower ();  		attachment.Recipients.AddRange (tempTo);  		attachment.Subjects.Add (subject);  		attachment.Senders.Add (sender);  		if (fileName.Length > 0) {  			attachment.FileNames.Add (fileName);  		}  		attachment.DateSent = dateSent;  		attachments.Add (attachment);  		SubjectRecipents subjectRecipient = new SubjectRecipents ();  		subjectRecipient.Subject = subject;  		subjectRecipient.File = file;  		subjectRecipient.Sender = sender;  		foreach (string person in tempTo) {  			subjectRecipient.Recipients.Add (person);  		}  		attachment.SubjectRecipents.Add (subjectRecipient);  	}  	else {  		foreach (string person in tempTo) {  			var tempPerson = from r in attachment.Recipients  			where r == person  			select r;  			if (tempPerson.Any () == false) {  				attachment.Recipients.Add (person);  			}  		}  		var tempFileName = from s in attachment.FileNames  		where s == fileName  		select s;  		if (tempFileName.Any () == false) {  			attachment.FileNames.Add (fileName);  		}  		var tempSubject = from s in attachment.Subjects  		where s.ToLower () == subject  		select s;  		if (tempSubject.Any () == false) {  			attachment.Subjects.Add (subject);  		}  		var tempSender = from s in attachment.Senders  		where s.ToLower () == sender  		select s;  		if (tempSender.Any () == false) {  			attachment.Senders.Add (sender);  		}  		var subjectRecipient = (from s in attachment.SubjectRecipents  		where s.Subject.ToLower () == subject.ToLower ()  		select s).SingleOrDefault ();  		if (subjectRecipient == null) {  			subjectRecipient = new SubjectRecipents ();  			subjectRecipient.Subject = subject;  			subjectRecipient.File = file;  			subjectRecipient.Sender = sender;  			foreach (string person in tempTo) {  				subjectRecipient.Recipients.Add (person);  			}  			attachment.SubjectRecipents.Add (subjectRecipient);  		}  		else {  			foreach (string person in tempTo) {  				var tempPerson = from r in subjectRecipient.Recipients  				where r == person  				select r;  				if (tempPerson.Any () == false) {  					subjectRecipient.Recipients.Add (person);  				}  			}  		}  	}  }  
Magic Number,SessionViewer.SessionProcessors,SmtpExtractor,C:\repos\woanware_SessionViewer\Source\Extractors\SmtpExtractor.cs,ProcessAttachmentHashes,The following statement contains a magic number: while (csvReader.Read ()) {  	var md5 = csvReader.GetField (0);  	var file = csvReader.GetField (1);  	var fileName = System.IO.Path.GetFileName (file);  	var srcIp = csvReader.GetField (2);  	var srcPort = csvReader.GetField (3);  	var dstIp = csvReader.GetField (4);  	var dstPort = csvReader.GetField (5);  	var to = csvReader.GetField (6);  	var dateSent = csvReader.GetField (11);  	List<string> tempTo = new List<string> (to.Split ('''));  	for (int index = tempTo.Count () - 1; index > -1; index--) {  		string person = tempTo [index].Trim ().ToLower ();  		if (person.IndexOf ("@") == -1) {  			tempTo.RemoveAt (index);  			continue;  		}  		Match match = regex.Match (person);  		if (match.Success == true) {  			person = match.Groups [1].Value;  		}  		person = person.Replace (@""""' string.Empty);  		tempTo [index] = person;  	}  	var from = csvReader.GetField (6);  	var sender = csvReader.GetField (7);  	var subject = csvReader.GetField (10);  	var attachment = (from a in attachments  	where a.Md5 == md5.ToLower ()  	select a).SingleOrDefault ();  	if (attachment == null) {  		attachment = new Attachment ();  		attachment.Md5 = md5.ToLower ();  		attachment.Recipients.AddRange (tempTo);  		attachment.Subjects.Add (subject);  		attachment.Senders.Add (sender);  		if (fileName.Length > 0) {  			attachment.FileNames.Add (fileName);  		}  		attachment.DateSent = dateSent;  		attachments.Add (attachment);  		SubjectRecipents subjectRecipient = new SubjectRecipents ();  		subjectRecipient.Subject = subject;  		subjectRecipient.File = file;  		subjectRecipient.Sender = sender;  		foreach (string person in tempTo) {  			subjectRecipient.Recipients.Add (person);  		}  		attachment.SubjectRecipents.Add (subjectRecipient);  	}  	else {  		foreach (string person in tempTo) {  			var tempPerson = from r in attachment.Recipients  			where r == person  			select r;  			if (tempPerson.Any () == false) {  				attachment.Recipients.Add (person);  			}  		}  		var tempFileName = from s in attachment.FileNames  		where s == fileName  		select s;  		if (tempFileName.Any () == false) {  			attachment.FileNames.Add (fileName);  		}  		var tempSubject = from s in attachment.Subjects  		where s.ToLower () == subject  		select s;  		if (tempSubject.Any () == false) {  			attachment.Subjects.Add (subject);  		}  		var tempSender = from s in attachment.Senders  		where s.ToLower () == sender  		select s;  		if (tempSender.Any () == false) {  			attachment.Senders.Add (sender);  		}  		var subjectRecipient = (from s in attachment.SubjectRecipents  		where s.Subject.ToLower () == subject.ToLower ()  		select s).SingleOrDefault ();  		if (subjectRecipient == null) {  			subjectRecipient = new SubjectRecipents ();  			subjectRecipient.Subject = subject;  			subjectRecipient.File = file;  			subjectRecipient.Sender = sender;  			foreach (string person in tempTo) {  				subjectRecipient.Recipients.Add (person);  			}  			attachment.SubjectRecipents.Add (subjectRecipient);  		}  		else {  			foreach (string person in tempTo) {  				var tempPerson = from r in subjectRecipient.Recipients  				where r == person  				select r;  				if (tempPerson.Any () == false) {  					subjectRecipient.Recipients.Add (person);  				}  			}  		}  	}  }  
Magic Number,SessionViewer.SessionProcessors,SmtpExtractor,C:\repos\woanware_SessionViewer\Source\Extractors\SmtpExtractor.cs,ProcessAttachmentHashes,The following statement contains a magic number: while (csvReader.Read ()) {  	var md5 = csvReader.GetField (0);  	var file = csvReader.GetField (1);  	var fileName = System.IO.Path.GetFileName (file);  	var srcIp = csvReader.GetField (2);  	var srcPort = csvReader.GetField (3);  	var dstIp = csvReader.GetField (4);  	var dstPort = csvReader.GetField (5);  	var to = csvReader.GetField (6);  	var dateSent = csvReader.GetField (11);  	List<string> tempTo = new List<string> (to.Split ('''));  	for (int index = tempTo.Count () - 1; index > -1; index--) {  		string person = tempTo [index].Trim ().ToLower ();  		if (person.IndexOf ("@") == -1) {  			tempTo.RemoveAt (index);  			continue;  		}  		Match match = regex.Match (person);  		if (match.Success == true) {  			person = match.Groups [1].Value;  		}  		person = person.Replace (@""""' string.Empty);  		tempTo [index] = person;  	}  	var from = csvReader.GetField (6);  	var sender = csvReader.GetField (7);  	var subject = csvReader.GetField (10);  	var attachment = (from a in attachments  	where a.Md5 == md5.ToLower ()  	select a).SingleOrDefault ();  	if (attachment == null) {  		attachment = new Attachment ();  		attachment.Md5 = md5.ToLower ();  		attachment.Recipients.AddRange (tempTo);  		attachment.Subjects.Add (subject);  		attachment.Senders.Add (sender);  		if (fileName.Length > 0) {  			attachment.FileNames.Add (fileName);  		}  		attachment.DateSent = dateSent;  		attachments.Add (attachment);  		SubjectRecipents subjectRecipient = new SubjectRecipents ();  		subjectRecipient.Subject = subject;  		subjectRecipient.File = file;  		subjectRecipient.Sender = sender;  		foreach (string person in tempTo) {  			subjectRecipient.Recipients.Add (person);  		}  		attachment.SubjectRecipents.Add (subjectRecipient);  	}  	else {  		foreach (string person in tempTo) {  			var tempPerson = from r in attachment.Recipients  			where r == person  			select r;  			if (tempPerson.Any () == false) {  				attachment.Recipients.Add (person);  			}  		}  		var tempFileName = from s in attachment.FileNames  		where s == fileName  		select s;  		if (tempFileName.Any () == false) {  			attachment.FileNames.Add (fileName);  		}  		var tempSubject = from s in attachment.Subjects  		where s.ToLower () == subject  		select s;  		if (tempSubject.Any () == false) {  			attachment.Subjects.Add (subject);  		}  		var tempSender = from s in attachment.Senders  		where s.ToLower () == sender  		select s;  		if (tempSender.Any () == false) {  			attachment.Senders.Add (sender);  		}  		var subjectRecipient = (from s in attachment.SubjectRecipents  		where s.Subject.ToLower () == subject.ToLower ()  		select s).SingleOrDefault ();  		if (subjectRecipient == null) {  			subjectRecipient = new SubjectRecipents ();  			subjectRecipient.Subject = subject;  			subjectRecipient.File = file;  			subjectRecipient.Sender = sender;  			foreach (string person in tempTo) {  				subjectRecipient.Recipients.Add (person);  			}  			attachment.SubjectRecipents.Add (subjectRecipient);  		}  		else {  			foreach (string person in tempTo) {  				var tempPerson = from r in subjectRecipient.Recipients  				where r == person  				select r;  				if (tempPerson.Any () == false) {  					subjectRecipient.Recipients.Add (person);  				}  			}  		}  	}  }  
Magic Number,SessionViewer.SessionProcessors,SmtpExtractor,C:\repos\woanware_SessionViewer\Source\Extractors\SmtpExtractor.cs,ProcessAttachmentHashes,The following statement contains a magic number: while (csvReader.Read ()) {  	var md5 = csvReader.GetField (0);  	var file = csvReader.GetField (1);  	var fileName = System.IO.Path.GetFileName (file);  	var srcIp = csvReader.GetField (2);  	var srcPort = csvReader.GetField (3);  	var dstIp = csvReader.GetField (4);  	var dstPort = csvReader.GetField (5);  	var to = csvReader.GetField (6);  	var dateSent = csvReader.GetField (11);  	List<string> tempTo = new List<string> (to.Split ('''));  	for (int index = tempTo.Count () - 1; index > -1; index--) {  		string person = tempTo [index].Trim ().ToLower ();  		if (person.IndexOf ("@") == -1) {  			tempTo.RemoveAt (index);  			continue;  		}  		Match match = regex.Match (person);  		if (match.Success == true) {  			person = match.Groups [1].Value;  		}  		person = person.Replace (@""""' string.Empty);  		tempTo [index] = person;  	}  	var from = csvReader.GetField (6);  	var sender = csvReader.GetField (7);  	var subject = csvReader.GetField (10);  	var attachment = (from a in attachments  	where a.Md5 == md5.ToLower ()  	select a).SingleOrDefault ();  	if (attachment == null) {  		attachment = new Attachment ();  		attachment.Md5 = md5.ToLower ();  		attachment.Recipients.AddRange (tempTo);  		attachment.Subjects.Add (subject);  		attachment.Senders.Add (sender);  		if (fileName.Length > 0) {  			attachment.FileNames.Add (fileName);  		}  		attachment.DateSent = dateSent;  		attachments.Add (attachment);  		SubjectRecipents subjectRecipient = new SubjectRecipents ();  		subjectRecipient.Subject = subject;  		subjectRecipient.File = file;  		subjectRecipient.Sender = sender;  		foreach (string person in tempTo) {  			subjectRecipient.Recipients.Add (person);  		}  		attachment.SubjectRecipents.Add (subjectRecipient);  	}  	else {  		foreach (string person in tempTo) {  			var tempPerson = from r in attachment.Recipients  			where r == person  			select r;  			if (tempPerson.Any () == false) {  				attachment.Recipients.Add (person);  			}  		}  		var tempFileName = from s in attachment.FileNames  		where s == fileName  		select s;  		if (tempFileName.Any () == false) {  			attachment.FileNames.Add (fileName);  		}  		var tempSubject = from s in attachment.Subjects  		where s.ToLower () == subject  		select s;  		if (tempSubject.Any () == false) {  			attachment.Subjects.Add (subject);  		}  		var tempSender = from s in attachment.Senders  		where s.ToLower () == sender  		select s;  		if (tempSender.Any () == false) {  			attachment.Senders.Add (sender);  		}  		var subjectRecipient = (from s in attachment.SubjectRecipents  		where s.Subject.ToLower () == subject.ToLower ()  		select s).SingleOrDefault ();  		if (subjectRecipient == null) {  			subjectRecipient = new SubjectRecipents ();  			subjectRecipient.Subject = subject;  			subjectRecipient.File = file;  			subjectRecipient.Sender = sender;  			foreach (string person in tempTo) {  				subjectRecipient.Recipients.Add (person);  			}  			attachment.SubjectRecipents.Add (subjectRecipient);  		}  		else {  			foreach (string person in tempTo) {  				var tempPerson = from r in subjectRecipient.Recipients  				where r == person  				select r;  				if (tempPerson.Any () == false) {  					subjectRecipient.Recipients.Add (person);  				}  			}  		}  	}  }  
Magic Number,SessionViewer.SessionProcessors,SmtpExtractor,C:\repos\woanware_SessionViewer\Source\Extractors\SmtpExtractor.cs,ProcessAttachmentHashes,The following statement contains a magic number: while (csvReader.Read ()) {  	var md5 = csvReader.GetField (0);  	var file = csvReader.GetField (1);  	var fileName = System.IO.Path.GetFileName (file);  	var srcIp = csvReader.GetField (2);  	var srcPort = csvReader.GetField (3);  	var dstIp = csvReader.GetField (4);  	var dstPort = csvReader.GetField (5);  	var to = csvReader.GetField (6);  	var dateSent = csvReader.GetField (11);  	List<string> tempTo = new List<string> (to.Split ('''));  	for (int index = tempTo.Count () - 1; index > -1; index--) {  		string person = tempTo [index].Trim ().ToLower ();  		if (person.IndexOf ("@") == -1) {  			tempTo.RemoveAt (index);  			continue;  		}  		Match match = regex.Match (person);  		if (match.Success == true) {  			person = match.Groups [1].Value;  		}  		person = person.Replace (@""""' string.Empty);  		tempTo [index] = person;  	}  	var from = csvReader.GetField (6);  	var sender = csvReader.GetField (7);  	var subject = csvReader.GetField (10);  	var attachment = (from a in attachments  	where a.Md5 == md5.ToLower ()  	select a).SingleOrDefault ();  	if (attachment == null) {  		attachment = new Attachment ();  		attachment.Md5 = md5.ToLower ();  		attachment.Recipients.AddRange (tempTo);  		attachment.Subjects.Add (subject);  		attachment.Senders.Add (sender);  		if (fileName.Length > 0) {  			attachment.FileNames.Add (fileName);  		}  		attachment.DateSent = dateSent;  		attachments.Add (attachment);  		SubjectRecipents subjectRecipient = new SubjectRecipents ();  		subjectRecipient.Subject = subject;  		subjectRecipient.File = file;  		subjectRecipient.Sender = sender;  		foreach (string person in tempTo) {  			subjectRecipient.Recipients.Add (person);  		}  		attachment.SubjectRecipents.Add (subjectRecipient);  	}  	else {  		foreach (string person in tempTo) {  			var tempPerson = from r in attachment.Recipients  			where r == person  			select r;  			if (tempPerson.Any () == false) {  				attachment.Recipients.Add (person);  			}  		}  		var tempFileName = from s in attachment.FileNames  		where s == fileName  		select s;  		if (tempFileName.Any () == false) {  			attachment.FileNames.Add (fileName);  		}  		var tempSubject = from s in attachment.Subjects  		where s.ToLower () == subject  		select s;  		if (tempSubject.Any () == false) {  			attachment.Subjects.Add (subject);  		}  		var tempSender = from s in attachment.Senders  		where s.ToLower () == sender  		select s;  		if (tempSender.Any () == false) {  			attachment.Senders.Add (sender);  		}  		var subjectRecipient = (from s in attachment.SubjectRecipents  		where s.Subject.ToLower () == subject.ToLower ()  		select s).SingleOrDefault ();  		if (subjectRecipient == null) {  			subjectRecipient = new SubjectRecipents ();  			subjectRecipient.Subject = subject;  			subjectRecipient.File = file;  			subjectRecipient.Sender = sender;  			foreach (string person in tempTo) {  				subjectRecipient.Recipients.Add (person);  			}  			attachment.SubjectRecipents.Add (subjectRecipient);  		}  		else {  			foreach (string person in tempTo) {  				var tempPerson = from r in subjectRecipient.Recipients  				where r == person  				select r;  				if (tempPerson.Any () == false) {  					subjectRecipient.Recipients.Add (person);  				}  			}  		}  	}  }  
Magic Number,SessionViewer.SessionProcessors,SmtpExtractor,C:\repos\woanware_SessionViewer\Source\Extractors\SmtpExtractor.cs,ProcessAttachmentHashes,The following statement contains a magic number: while (csvReader.Read ()) {  	var md5 = csvReader.GetField (0);  	var file = csvReader.GetField (1);  	var fileName = System.IO.Path.GetFileName (file);  	var srcIp = csvReader.GetField (2);  	var srcPort = csvReader.GetField (3);  	var dstIp = csvReader.GetField (4);  	var dstPort = csvReader.GetField (5);  	var to = csvReader.GetField (6);  	var dateSent = csvReader.GetField (11);  	List<string> tempTo = new List<string> (to.Split ('''));  	for (int index = tempTo.Count () - 1; index > -1; index--) {  		string person = tempTo [index].Trim ().ToLower ();  		if (person.IndexOf ("@") == -1) {  			tempTo.RemoveAt (index);  			continue;  		}  		Match match = regex.Match (person);  		if (match.Success == true) {  			person = match.Groups [1].Value;  		}  		person = person.Replace (@""""' string.Empty);  		tempTo [index] = person;  	}  	var from = csvReader.GetField (6);  	var sender = csvReader.GetField (7);  	var subject = csvReader.GetField (10);  	var attachment = (from a in attachments  	where a.Md5 == md5.ToLower ()  	select a).SingleOrDefault ();  	if (attachment == null) {  		attachment = new Attachment ();  		attachment.Md5 = md5.ToLower ();  		attachment.Recipients.AddRange (tempTo);  		attachment.Subjects.Add (subject);  		attachment.Senders.Add (sender);  		if (fileName.Length > 0) {  			attachment.FileNames.Add (fileName);  		}  		attachment.DateSent = dateSent;  		attachments.Add (attachment);  		SubjectRecipents subjectRecipient = new SubjectRecipents ();  		subjectRecipient.Subject = subject;  		subjectRecipient.File = file;  		subjectRecipient.Sender = sender;  		foreach (string person in tempTo) {  			subjectRecipient.Recipients.Add (person);  		}  		attachment.SubjectRecipents.Add (subjectRecipient);  	}  	else {  		foreach (string person in tempTo) {  			var tempPerson = from r in attachment.Recipients  			where r == person  			select r;  			if (tempPerson.Any () == false) {  				attachment.Recipients.Add (person);  			}  		}  		var tempFileName = from s in attachment.FileNames  		where s == fileName  		select s;  		if (tempFileName.Any () == false) {  			attachment.FileNames.Add (fileName);  		}  		var tempSubject = from s in attachment.Subjects  		where s.ToLower () == subject  		select s;  		if (tempSubject.Any () == false) {  			attachment.Subjects.Add (subject);  		}  		var tempSender = from s in attachment.Senders  		where s.ToLower () == sender  		select s;  		if (tempSender.Any () == false) {  			attachment.Senders.Add (sender);  		}  		var subjectRecipient = (from s in attachment.SubjectRecipents  		where s.Subject.ToLower () == subject.ToLower ()  		select s).SingleOrDefault ();  		if (subjectRecipient == null) {  			subjectRecipient = new SubjectRecipents ();  			subjectRecipient.Subject = subject;  			subjectRecipient.File = file;  			subjectRecipient.Sender = sender;  			foreach (string person in tempTo) {  				subjectRecipient.Recipients.Add (person);  			}  			attachment.SubjectRecipents.Add (subjectRecipient);  		}  		else {  			foreach (string person in tempTo) {  				var tempPerson = from r in subjectRecipient.Recipients  				where r == person  				select r;  				if (tempPerson.Any () == false) {  					subjectRecipient.Recipients.Add (person);  				}  			}  		}  	}  }  
Magic Number,SessionViewer.SessionProcessors,SmtpExtractor,C:\repos\woanware_SessionViewer\Source\Extractors\SmtpExtractor.cs,PerformArchiveDecompression,The following statement contains a magic number: try {  	byte[] fileHeader = IO.ReadFileHeader (path' 4);  	if (fileHeader == null) {  		return;  	}  	if (woanware.IO.IsZip (fileHeader) == true) {  		string temp = System.IO.Path.GetFileNameWithoutExtension (fileName);  		if (System.IO.Directory.Exists (System.IO.Path.Combine (outputDir' temp)) == false) {  			woanware.IO.CreateDirectory (System.IO.Path.Combine (outputDir' temp));  		}  		using (ZipArchive archive = ZipFile.OpenRead (path)) {  			foreach (ZipArchiveEntry zae in archive.Entries) {  				zae.ExtractToFile (System.IO.Path.Combine (outputDir' temp' zae.Name + ".safe"));  			}  		}  	}  }  catch (Exception ex) {  	this.Log ().Error (ex.ToString ());  }  
Magic Number,SessionViewer.SessionProcessors,SmtpExtractor,C:\repos\woanware_SessionViewer\Source\Extractors\SmtpExtractor.cs,HashFiles,The following statement contains a magic number: foreach (string file in System.IO.Directory.EnumerateFiles (outputDir' "*.*"' SearchOption.AllDirectories)) {  	if (System.IO.Path.GetFileName (file) == "Message.Info.txt") {  		continue;  	}  	try {  		// Not sure if BufferedStream should be wrapped in using block  		using (var stream = new BufferedStream (File.OpenRead (file)' 1200000)) {  			MD5 md5 = new MD5CryptoServiceProvider ();  			byte[] hashMd5 = md5.ComputeHash (stream);  			AttachmentDetails attachmentDetails = new AttachmentDetails ();  			attachmentDetails.File = file;  			attachmentDetails.Md5 = woanware.Text.ConvertByteArrayToHexString (hashMd5);  			messageDetails.Attachments.Add (attachmentDetails);  		}  	}  	catch (Exception) {  	}  }  
Magic Number,SessionViewer.SessionProcessors,SmtpExtractor,C:\repos\woanware_SessionViewer\Source\Extractors\SmtpExtractor.cs,HashFiles,The following statement contains a magic number: try {  	// Not sure if BufferedStream should be wrapped in using block  	using (var stream = new BufferedStream (File.OpenRead (file)' 1200000)) {  		MD5 md5 = new MD5CryptoServiceProvider ();  		byte[] hashMd5 = md5.ComputeHash (stream);  		AttachmentDetails attachmentDetails = new AttachmentDetails ();  		attachmentDetails.File = file;  		attachmentDetails.Md5 = woanware.Text.ConvertByteArrayToHexString (hashMd5);  		messageDetails.Attachments.Add (attachmentDetails);  	}  }  catch (Exception) {  }  
Magic Number,SessionViewer.SessionProcessors,SmtpExtractor,C:\repos\woanware_SessionViewer\Source\Extractors\SmtpExtractor.cs,HashFiles,The following statement contains a magic number: using (var stream = new BufferedStream (File.OpenRead (file)' 1200000)) {  	MD5 md5 = new MD5CryptoServiceProvider ();  	byte[] hashMd5 = md5.ComputeHash (stream);  	AttachmentDetails attachmentDetails = new AttachmentDetails ();  	attachmentDetails.File = file;  	attachmentDetails.Md5 = woanware.Text.ConvertByteArrayToHexString (hashMd5);  	messageDetails.Attachments.Add (attachmentDetails);  }  
Magic Number,SessionViewer.SessionParsers,HttpParser,C:\repos\woanware_SessionViewer\Source\SessionParsers\HttpParser.cs,Process,The following statement contains a magic number: this.outputFile = System.IO.Path.Combine (outputPath' session.Guid.Substring (0' 2)' session.Guid + ".bin");  
Magic Number,SessionViewer.SessionParsers,HttpParser,C:\repos\woanware_SessionViewer\Source\SessionParsers\HttpParser.cs,ParseLinks,The following statement contains a magic number: try {  	if (File.Exists (response.TempFile) == false) {  		return;  	}  	// Lets ensure that the first non-blank line has a HTML header!  	using (FileStream temp = System.IO.File.OpenRead (response.TempFile)) {  		using (LineReader lr = new LineReader (temp' 4096' Encoding.Default)) {  			bool process = true;  			while (process == true) {  				string line = lr.ReadLine ();  				if (line == null) {  					return;  				}  				line = line.Trim ();  				if (line.Length == 0) {  					continue;  				}  				bool validHtml = true;  				if (line.IndexOf ("<html>"' StringComparison.InvariantCultureIgnoreCase) == -1) {  					if (line.IndexOf ("<!doctype html"' StringComparison.InvariantCultureIgnoreCase) == -1) {  						validHtml = false;  					}  				}  				if (validHtml == true) {  					break;  				}  				else {  					return;  				}  			}  		}  	}  	using (TextReader tr = File.OpenText (response.TempFile)) {  		SimpleHtmlParser parser = new SimpleHtmlParser ();  		var doc = parser.Parse (tr);  		List<string> links = new List<string> ();  		foreach (System.Xml.XmlElement link in doc.GetElementsByTagName ("a")) {  			if (link.Attributes == null) {  				continue;  			}  			if (link.Attributes ["href"] == null) {  				continue;  			}  			var href = link.Attributes ["href"].Value.Trim ();  			string md5 = Text.ConvertByteArrayToHexString (Security.GenerateMd5Hash (href));  			if (md5.ToLower () == "6666cd76f96956469e7be39d750cc7d9") {  				// Ignore "/"  				continue;  			}  			if (links.Contains (md5) == false) {  				links.Add (md5);  				woanware.IO.WriteToFileStream (fs' "LINK: " + href + Environment.NewLine);  			}  		}  	}  }  catch (Exception) {  }  
Magic Number,SessionViewer.SessionParsers,HttpParser,C:\repos\woanware_SessionViewer\Source\SessionParsers\HttpParser.cs,ParseLinks,The following statement contains a magic number: using (FileStream temp = System.IO.File.OpenRead (response.TempFile)) {  	using (LineReader lr = new LineReader (temp' 4096' Encoding.Default)) {  		bool process = true;  		while (process == true) {  			string line = lr.ReadLine ();  			if (line == null) {  				return;  			}  			line = line.Trim ();  			if (line.Length == 0) {  				continue;  			}  			bool validHtml = true;  			if (line.IndexOf ("<html>"' StringComparison.InvariantCultureIgnoreCase) == -1) {  				if (line.IndexOf ("<!doctype html"' StringComparison.InvariantCultureIgnoreCase) == -1) {  					validHtml = false;  				}  			}  			if (validHtml == true) {  				break;  			}  			else {  				return;  			}  		}  	}  }  
Magic Number,SessionViewer.SessionParsers,HttpParser,C:\repos\woanware_SessionViewer\Source\SessionParsers\HttpParser.cs,ParseLinks,The following statement contains a magic number: using (LineReader lr = new LineReader (temp' 4096' Encoding.Default)) {  	bool process = true;  	while (process == true) {  		string line = lr.ReadLine ();  		if (line == null) {  			return;  		}  		line = line.Trim ();  		if (line.Length == 0) {  			continue;  		}  		bool validHtml = true;  		if (line.IndexOf ("<html>"' StringComparison.InvariantCultureIgnoreCase) == -1) {  			if (line.IndexOf ("<!doctype html"' StringComparison.InvariantCultureIgnoreCase) == -1) {  				validHtml = false;  			}  		}  		if (validHtml == true) {  			break;  		}  		else {  			return;  		}  	}  }  
Missing Default,SessionViewer,FormMain,C:\repos\woanware_SessionViewer\Source\FormMain.cs,menuFileImport_Click,The following switch statement is missing a default case: switch (cboMaxSession.SelectedIndex) {  case 0:  	// None  	break;  case 1:  	// 1 MB  	maxSize = 1048576;  	break;  case 2:  	// 2 MB  	maxSize = 2097152;  	break;  case 3:  	// 3 MB  	maxSize = 3145728;  	break;  case 4:  	// 4 MB  	maxSize = 4194304;  	break;  case 5:  	// 5 MB  	maxSize = 5242880;  	break;  case 6:  	// 10 MB  	maxSize = 10485760;  	break;  case 7:  	// 15 MB  	maxSize = 15728640;  	break;  }  
Missing Default,SessionViewer,FormMain,C:\repos\woanware_SessionViewer\Source\FormMain.cs,CopyDataToClipboard,The following switch statement is missing a default case: switch (field) {  case Global.FieldsCopy.SourceIp:  	value = temp.SrcIpText;  	break;  case Global.FieldsCopy.SourcePort:  	value = temp.SourcePort.ToString ();  	break;  case Global.FieldsCopy.DestinationIp:  	value = temp.DstIpText;  	break;  case Global.FieldsCopy.DestinationPort:  	value = temp.DestinationPort.ToString ();  	break;  case Global.FieldsCopy.Size:  	value = temp.DataSize.ToString ();  	break;  case Global.FieldsCopy.TimestampFirstPacket:  	value = temp.TimestampFirstPacket.ToString ();  	break;  case Global.FieldsCopy.TimestampLastPacket:  	value = temp.TimestampLastPacket.ToString ();  	break;  case Global.FieldsCopy.SourceCountry:  	value = temp.SourceCountry.ToString ();  	break;  case Global.FieldsCopy.DestinationCountry:  	value = temp.DestinationCountry.ToString ();  	break;  }  
