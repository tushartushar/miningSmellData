Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,Seterlund.CodeGuard.UnitTests,BaseTests,D:\research\architectureSmells\repos\3komma14_Guard\UnitTests\BaseTests.cs,AssertArgumentOfRangeException,The method has 5 parameters. Parameters: exception' paramName' actualValue' to' from
Long Statement,Seterlund.CodeGuard.UnitTests,BaseTests,D:\research\architectureSmells\repos\3komma14_Guard\UnitTests\BaseTests.cs,AssertArgumentOfRangeException,The length of the statement  "                    "The value '{0}' of '{1}' is not in its allowed range of '{2}' to '{3}'\r\nParameter name: {1}\r\nActual value was {0}."' " is 121.
Long Statement,Seterlund.CodeGuard.UnitTests,BaseTests,D:\research\architectureSmells\repos\3komma14_Guard\UnitTests\BaseTests.cs,AssertArgumentOfRangeException,The length of the statement  "            Assert.AreEqual(string.Format("Specified argument was out of the range of valid values.\r\nParameter name: {0}"' paramName)' exception.Message); " is 144.
Magic Number,Seterlund.CodeGuard.UnitTests.Validators,ArrayValidatorTests,D:\research\architectureSmells\repos\3komma14_Guard\UnitTests\Validators\ArrayValidatorTests.cs,CountIs_ArgumentHasCorrectCount_DoesNotThrow,The following statement contains a magic number: Assert.DoesNotThrow(() => Guard.That(() => arg).CountIs(2));
Magic Number,Seterlund.CodeGuard.UnitTests.Validators,ObjectValidatorTests,D:\research\architectureSmells\repos\3komma14_Guard\UnitTests\Validators\ObjectValidatorTests.cs,Is_ArgumentIsSameType_DoesNotThrow,The following statement contains a magic number: var arg = 3;
Magic Number,Seterlund.CodeGuard.UnitTests.Validators,ObjectValidatorTests,D:\research\architectureSmells\repos\3komma14_Guard\UnitTests\Validators\ObjectValidatorTests.cs,IsTrue_WhenArgumentIsFalse_Throws,The following statement contains a magic number: Assert.Throws<ArgumentException>(() =>              {                  Guard.That(() => arg1).IsTrue(x => x > 50' "Must be over 50");              });
Magic Number,Seterlund.CodeGuard.UnitTests.Validators,ObjectValidatorTests,D:\research\architectureSmells\repos\3komma14_Guard\UnitTests\Validators\ObjectValidatorTests.cs,IsOneOf_WhenArgumentIsInCollection_DoesNotThrow,The following statement contains a magic number: var data = new int[3] { 1' 2' 3 };
Magic Number,Seterlund.CodeGuard.UnitTests.Validators,ObjectValidatorTests,D:\research\architectureSmells\repos\3komma14_Guard\UnitTests\Validators\ObjectValidatorTests.cs,IsOneOf_WhenArgumentIsInCollection_DoesNotThrow,The following statement contains a magic number: var data = new int[3] { 1' 2' 3 };
Magic Number,Seterlund.CodeGuard.UnitTests.Validators,ObjectValidatorTests,D:\research\architectureSmells\repos\3komma14_Guard\UnitTests\Validators\ObjectValidatorTests.cs,IsOneOf_WhenArgumentIsInCollection_DoesNotThrow,The following statement contains a magic number: var data = new int[3] { 1' 2' 3 };
Magic Number,Seterlund.CodeGuard.UnitTests.Validators,ObjectValidatorTests,D:\research\architectureSmells\repos\3komma14_Guard\UnitTests\Validators\ObjectValidatorTests.cs,IsOneOf_WhenArgumentIsNotInCollection_Throws,The following statement contains a magic number: int arg = 4;
Magic Number,Seterlund.CodeGuard.UnitTests.Validators,ObjectValidatorTests,D:\research\architectureSmells\repos\3komma14_Guard\UnitTests\Validators\ObjectValidatorTests.cs,IsOneOf_WhenArgumentIsNotInCollection_Throws,The following statement contains a magic number: var data = new int[3] { 1' 2' 3 };
Magic Number,Seterlund.CodeGuard.UnitTests.Validators,ObjectValidatorTests,D:\research\architectureSmells\repos\3komma14_Guard\UnitTests\Validators\ObjectValidatorTests.cs,IsOneOf_WhenArgumentIsNotInCollection_Throws,The following statement contains a magic number: var data = new int[3] { 1' 2' 3 };
Magic Number,Seterlund.CodeGuard.UnitTests.Validators,ObjectValidatorTests,D:\research\architectureSmells\repos\3komma14_Guard\UnitTests\Validators\ObjectValidatorTests.cs,IsOneOf_WhenArgumentIsNotInCollection_Throws,The following statement contains a magic number: var data = new int[3] { 1' 2' 3 };
Magic Number,Seterlund.CodeGuard.UnitTests.Validators,IntegerValidatorTests,D:\research\architectureSmells\repos\3komma14_Guard\UnitTests\Validators\IntegerValidatorTests.cs,IsOdd_ArgumentIsOdd_DoesNotThrow,The following statement contains a magic number: int arg = 3;
Magic Number,Seterlund.CodeGuard.UnitTests.Validators,IntegerValidatorTests,D:\research\architectureSmells\repos\3komma14_Guard\UnitTests\Validators\IntegerValidatorTests.cs,IsOdd_ArgumentIsEven_Throws,The following statement contains a magic number: int arg = 2;
Magic Number,Seterlund.CodeGuard.UnitTests.Validators,IntegerValidatorTests,D:\research\architectureSmells\repos\3komma14_Guard\UnitTests\Validators\IntegerValidatorTests.cs,IsEven_ArgumentIsEven_DoesNotThrow,The following statement contains a magic number: int arg = 4;
Magic Number,Seterlund.CodeGuard.UnitTests.Validators,IntegerValidatorTests,D:\research\architectureSmells\repos\3komma14_Guard\UnitTests\Validators\IntegerValidatorTests.cs,IsEven_ArgumentIsOdd_Throws,The following statement contains a magic number: int arg = 5;
Magic Number,Seterlund.CodeGuard.UnitTests.Validators,StringValidatorTests,D:\research\architectureSmells\repos\3komma14_Guard\UnitTests\Validators\StringValidatorTests.cs,Length_ArgumentHasSameLength_DoesNotThrow,The following statement contains a magic number: Assert.DoesNotThrow(() => Guard.That(() => text).Length(10));
Magic Number,Seterlund.CodeGuard.UnitTests.Validators,StringValidatorTests,D:\research\architectureSmells\repos\3komma14_Guard\UnitTests\Validators\StringValidatorTests.cs,Length_ArgumentHasDifferentLength_Throws,The following statement contains a magic number: Assert.Throws<ArgumentException>(() => Guard.That(() => text).Length(10));
Magic Number,Seterlund.CodeGuard.UnitTests,SpeedTests,D:\research\architectureSmells\repos\3komma14_Guard\UnitTests\SpeedTests.cs,TestLambdaExpressionSpeed,The following statement contains a magic number: i < 10000
Magic Number,Seterlund.CodeGuard.UnitTests,SpeedTests,D:\research\architectureSmells\repos\3komma14_Guard\UnitTests\SpeedTests.cs,TestVariableSpeed,The following statement contains a magic number: i < 10000
Magic Number,Seterlund.CodeGuard.UnitTests,ValidateTests,D:\research\architectureSmells\repos\3komma14_Guard\UnitTests\ValidateTests.cs,GetResult_WhenCalledWithtwoFailingChecks_ReturnListWithTwoMessages,The following statement contains a magic number: int arg1 = 100;
Magic Number,Seterlund.CodeGuard.UnitTests,ValidateTests,D:\research\architectureSmells\repos\3komma14_Guard\UnitTests\ValidateTests.cs,GetResult_WhenCalledWithtwoFailingChecks_ReturnListWithTwoMessages,The following statement contains a magic number: var result = Validate.That(() => arg1).IsGreaterThan(200).IsEqual(1).Errors;
Magic Number,Seterlund.CodeGuard.UnitTests,ValidateTests,D:\research\architectureSmells\repos\3komma14_Guard\UnitTests\ValidateTests.cs,GetResult_WhenCalledWithtwoFailingChecks_ReturnListWithTwoMessages,The following statement contains a magic number: Assert.AreEqual(2' result.Count());
