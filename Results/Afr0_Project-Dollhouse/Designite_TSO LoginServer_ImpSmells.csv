Implementation smell,Namespace,Class,File,Method,Description
Long Method,TSO_LoginServer.Network,LoginPacketHandlers,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSO LoginServer\TSO LoginServer\Network\LoginPacketHandlers.cs,HandleChallengeResponse,The method has 113 lines of code.
Complex Method,TSO_LoginServer.Network,LoginPacketHandlers,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSO LoginServer\TSO LoginServer\Network\LoginPacketHandlers.cs,HandleChallengeResponse,Cyclomatic complexity of the method is 11
Long Statement,TSO_LoginServer,Program,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSO LoginServer\TSO LoginServer\Program.cs,Main,The length of the statement  "			ProtocolAbstractionLibraryD.Logger.OnMessageLogged += new ProtocolAbstractionLibraryD.MessageLoggedDelegate(Logger_OnMessageLogged); " is 132.
Long Statement,TSO_LoginServer,Program,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSO LoginServer\TSO LoginServer\Program.cs,Main,The length of the statement  "			PacketHandlers.Register((byte)PacketType.LOGIN_REQUEST' false' 0' new OnPacketReceive(LoginPacketHandlers.HandleLoginRequest)); " is 127.
Long Statement,TSO_LoginServer,Program,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSO LoginServer\TSO LoginServer\Program.cs,Main,The length of the statement  "			PacketHandlers.Register((byte)PacketType.CHALLENGE_RESPONSE' true' 0' new OnPacketReceive(LoginPacketHandlers.HandleChallengeResponse)); " is 136.
Long Statement,TSO_LoginServer,Program,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSO LoginServer\TSO LoginServer\Program.cs,Main,The length of the statement  "			PacketHandlers.Register((byte)PacketType.CHARACTER_LIST' true' 0' new OnPacketReceive(LoginPacketHandlers.HandleCharacterInfoRequest)); " is 135.
Long Statement,TSO_LoginServer,Program,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSO LoginServer\TSO LoginServer\Program.cs,Main,The length of the statement  "			PacketHandlers.Register((byte)PacketType.CITY_LIST' true' 0' new OnPacketReceive(LoginPacketHandlers.HandleCityInfoRequest)); " is 125.
Long Statement,TSO_LoginServer,Program,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSO LoginServer\TSO LoginServer\Program.cs,Main,The length of the statement  "			PacketHandlers.Register((byte)PacketType.CHARACTER_CREATE' true' 0' new OnPacketReceive(LoginPacketHandlers.HandleCharacterCreate)); " is 132.
Long Statement,TSO_LoginServer,Program,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSO LoginServer\TSO LoginServer\Program.cs,Main,The length of the statement  "			PacketHandlers.Register((byte)PacketType.REQUEST_CITY_TOKEN' true' 0' new OnPacketReceive(LoginPacketHandlers.HandleCityTokenRequest)); " is 135.
Long Statement,TSO_LoginServer,Program,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSO LoginServer\TSO LoginServer\Program.cs,Main,The length of the statement  "			PacketHandlers.Register((byte)PacketType.RETIRE_CHARACTER' true' 0' new OnPacketReceive(LoginPacketHandlers.HandleCharacterRetirement)); " is 136.
Long Statement,TSO_LoginServer.Network,LoginPacketHandlers,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSO LoginServer\TSO LoginServer\Network\LoginPacketHandlers.cs,HandleChallengeResponse,The length of the statement  "                if (AccountName == string.Empty || AccountName.ToLower().Equals("username") || AccountName.ToLower().Contains("username")) " is 122.
Magic Number,TSO_LoginServer,Program,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSO LoginServer\TSO LoginServer\Program.cs,Main,The following statement contains a magic number: NetworkFacade.CServerListener.Initialize(new IPEndPoint(IPAddress.Parse("127.0.0.1")' 2108));
Magic Number,TSO_LoginServer,Program,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSO LoginServer\TSO LoginServer\Program.cs,Main,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,TSO_LoginServer.Network,CityServerListener,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSO LoginServer\TSO LoginServer\Network\CityServerListener.cs,Initialize,The following statement contains a magic number: m_ListenerSock.Listen(10000);
Magic Number,TSO_LoginServer.Network,CityServerListener,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSO LoginServer\TSO LoginServer\Network\CityServerListener.cs,OnAccept,The following statement contains a magic number: AcceptedSocket.LingerState = new LingerOption(true' 5);
Magic Number,TSO_LoginServer.Network,LoginPacketHandlers,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSO LoginServer\TSO LoginServer\Network\LoginPacketHandlers.cs,HandleLoginRequest,The following statement contains a magic number: PacketStream OutPacket = new PacketStream((byte)PacketType.INVALID_VERSION' 2);
Magic Number,TSO_LoginServer.Network,LoginPacketHandlers,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSO LoginServer\TSO LoginServer\Network\LoginPacketHandlers.cs,HandleCityInfoRequest,The following statement contains a magic number: switch (CInfo.Status)  						{  							case CityInfoStatus.Ok:  								Packet.WriteByte(1);  								break;  							case CityInfoStatus.Busy:  								Packet.WriteByte(2);  								break;  							case CityInfoStatus.Full:  								Packet.WriteByte(3);  								break;  							case CityInfoStatus.Reserved:  								Packet.WriteByte(4);  								break;  						}
Magic Number,TSO_LoginServer.Network,LoginPacketHandlers,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSO LoginServer\TSO LoginServer\Network\LoginPacketHandlers.cs,HandleCityInfoRequest,The following statement contains a magic number: switch (CInfo.Status)  						{  							case CityInfoStatus.Ok:  								Packet.WriteByte(1);  								break;  							case CityInfoStatus.Busy:  								Packet.WriteByte(2);  								break;  							case CityInfoStatus.Full:  								Packet.WriteByte(3);  								break;  							case CityInfoStatus.Reserved:  								Packet.WriteByte(4);  								break;  						}
Magic Number,TSO_LoginServer.Network,LoginPacketHandlers,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSO LoginServer\TSO LoginServer\Network\LoginPacketHandlers.cs,HandleCityInfoRequest,The following statement contains a magic number: switch (CInfo.Status)  						{  							case CityInfoStatus.Ok:  								Packet.WriteByte(1);  								break;  							case CityInfoStatus.Busy:  								Packet.WriteByte(2);  								break;  							case CityInfoStatus.Full:  								Packet.WriteByte(3);  								break;  							case CityInfoStatus.Reserved:  								Packet.WriteByte(4);  								break;  						}
Magic Number,TSO_LoginServer.Network,LoginPacketHandlers,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSO LoginServer\TSO LoginServer\Network\LoginPacketHandlers.cs,HandleCharacterCreate,The following statement contains a magic number: Acc.NumCharacters >= 3
Magic Number,TSO_LoginServer.Network,LoginPacketHandlers,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSO LoginServer\TSO LoginServer\Network\LoginPacketHandlers.cs,HandleCharacterCreate,The following statement contains a magic number: switch (status)  				{  					case LoginDataModel.Entities.CharacterCreationStatus.NameAlreadyExisted:  						CCStatusPacket.WriteByte((int)LoginDataModel.Entities.CharacterCreationStatus.NameAlreadyExisted);  						Client.SendEncrypted(CCStatusPacket.PacketID' CCStatusPacket.ToArray());  						break;  					case LoginDataModel.Entities.CharacterCreationStatus.NameTooLong:  						CCStatusPacket.WriteByte((int)LoginDataModel.Entities.CharacterCreationStatus.NameTooLong);  						Client.SendEncrypted(CCStatusPacket.PacketID' CCStatusPacket.ToArray());  						break;  					case LoginDataModel.Entities.CharacterCreationStatus.Success:  						Guid Token = Guid.NewGuid();    						//This actually updates the record' not sure how.  						Acc.NumCharacters++;    						//THIS NEEDS TO HAPPEN FIRST FOR CITY SERVER AUTHENTICATION TO WORK!  						CityInfo CServer = NetworkFacade.CServerListener.GetCityServer(Char.City);    						//Just in case...  						if (CServer != null)  						{  							PacketStream CServerPacket = new PacketStream(0x01' 0);  							CServerPacket.WriteHeader();    							ushort PacketLength = (ushort)(PacketHeaders.UNENCRYPTED + 1 + 4 + (Client.RemoteIP.Length + 1)  								+ 4 + (Char.GUID.ToString().Length + 1) + (Token.ToString().Length + 1));  							CServerPacket.WriteUInt16(PacketLength);    							CServerPacket.WriteByte(1); //CharacterCreate = true  							CServerPacket.WriteInt32(Acc.AccountID);  							CServerPacket.WriteString(Client.RemoteIP);  							CServerPacket.WriteInt32(Client.RemotePort);  							CServerPacket.WriteString(Char.GUID.ToString());  							CServerPacket.WriteString(Token.ToString(""));  							CServer.Client.Send(CServerPacket.ToArray());  						}    						CCStatusPacket.WriteByte((int)LoginDataModel.Entities.CharacterCreationStatus.Success);  						CCStatusPacket.WriteString(Char.GUID.ToString());  						CCStatusPacket.WriteString(Token.ToString());  						Client.SendEncrypted(CCStatusPacket.PacketID' CCStatusPacket.ToArray());    						break;  				}
Magic Number,TSO_LoginServer.Network,LoginPacketHandlers,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSO LoginServer\TSO LoginServer\Network\LoginPacketHandlers.cs,HandleCharacterCreate,The following statement contains a magic number: switch (status)  				{  					case LoginDataModel.Entities.CharacterCreationStatus.NameAlreadyExisted:  						CCStatusPacket.WriteByte((int)LoginDataModel.Entities.CharacterCreationStatus.NameAlreadyExisted);  						Client.SendEncrypted(CCStatusPacket.PacketID' CCStatusPacket.ToArray());  						break;  					case LoginDataModel.Entities.CharacterCreationStatus.NameTooLong:  						CCStatusPacket.WriteByte((int)LoginDataModel.Entities.CharacterCreationStatus.NameTooLong);  						Client.SendEncrypted(CCStatusPacket.PacketID' CCStatusPacket.ToArray());  						break;  					case LoginDataModel.Entities.CharacterCreationStatus.Success:  						Guid Token = Guid.NewGuid();    						//This actually updates the record' not sure how.  						Acc.NumCharacters++;    						//THIS NEEDS TO HAPPEN FIRST FOR CITY SERVER AUTHENTICATION TO WORK!  						CityInfo CServer = NetworkFacade.CServerListener.GetCityServer(Char.City);    						//Just in case...  						if (CServer != null)  						{  							PacketStream CServerPacket = new PacketStream(0x01' 0);  							CServerPacket.WriteHeader();    							ushort PacketLength = (ushort)(PacketHeaders.UNENCRYPTED + 1 + 4 + (Client.RemoteIP.Length + 1)  								+ 4 + (Char.GUID.ToString().Length + 1) + (Token.ToString().Length + 1));  							CServerPacket.WriteUInt16(PacketLength);    							CServerPacket.WriteByte(1); //CharacterCreate = true  							CServerPacket.WriteInt32(Acc.AccountID);  							CServerPacket.WriteString(Client.RemoteIP);  							CServerPacket.WriteInt32(Client.RemotePort);  							CServerPacket.WriteString(Char.GUID.ToString());  							CServerPacket.WriteString(Token.ToString(""));  							CServer.Client.Send(CServerPacket.ToArray());  						}    						CCStatusPacket.WriteByte((int)LoginDataModel.Entities.CharacterCreationStatus.Success);  						CCStatusPacket.WriteString(Char.GUID.ToString());  						CCStatusPacket.WriteString(Token.ToString());  						Client.SendEncrypted(CCStatusPacket.PacketID' CCStatusPacket.ToArray());    						break;  				}
Magic Number,TSO_LoginServer.Network,LoginPacketHandlers,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSO LoginServer\TSO LoginServer\Network\LoginPacketHandlers.cs,HandleCityTokenRequest,The following statement contains a magic number: ushort PacketLength = (ushort)(PacketHeaders.UNENCRYPTED + 1 + 4 + (Client.RemoteIP.Length + 1)  					+ 4 + (CharGUID.ToString().Length + 1) + (Token.ToString().Length + 1));
Magic Number,TSO_LoginServer.Network,LoginPacketHandlers,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSO LoginServer\TSO LoginServer\Network\LoginPacketHandlers.cs,HandleCityTokenRequest,The following statement contains a magic number: ushort PacketLength = (ushort)(PacketHeaders.UNENCRYPTED + 1 + 4 + (Client.RemoteIP.Length + 1)  					+ 4 + (CharGUID.ToString().Length + 1) + (Token.ToString().Length + 1));
Magic Number,TSO_LoginServer.Network,LoginPacketHandlers,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSO LoginServer\TSO LoginServer\Network\LoginPacketHandlers.cs,HandleCharacterRetirement,The following statement contains a magic number: ushort PacketLength = (ushort)(PacketHeaders.UNENCRYPTED + 4 + GUID.Length + 1);
Missing Default,TSO_LoginServer,Program,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSO LoginServer\TSO LoginServer\Program.cs,Logger_OnMessageLogged,The following switch statement is missing a default case: switch (Msg.Level)  			{  				case ProtocolAbstractionLibraryD.LogLevel.info:  					Logger.LogInfo(Msg.Message);  					break;  				case ProtocolAbstractionLibraryD.LogLevel.error:  					Logger.LogDebug(Msg.Message);  					break;  				case ProtocolAbstractionLibraryD.LogLevel.warn:  					Logger.LogWarning(Msg.Message);  					break;  			}
Missing Default,TSO_LoginServer,Program,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSO LoginServer\TSO LoginServer\Program.cs,Logger_OnMessageLogged,The following switch statement is missing a default case: switch (Msg.Level)  			{  				case LoginDataModel.LogLevel.info:  					Logger.LogInfo(Msg.Message);  					break;  				case LoginDataModel.LogLevel.error:  					Logger.LogDebug(Msg.Message);  					break;  				case LoginDataModel.LogLevel.warn:  					Logger.LogWarning(Msg.Message);  					break;  			}
Missing Default,TSO_LoginServer,Program,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSO LoginServer\TSO LoginServer\Program.cs,Logger_OnMessageLogged,The following switch statement is missing a default case: switch (Msg.Level)  			{  				case GonzoNet.LogLevel.info:  					Logger.LogInfo(Msg.Message);  					break;  				case GonzoNet.LogLevel.error:  					Logger.LogDebug(Msg.Message);  					break;  				case GonzoNet.LogLevel.warn:  					Logger.LogWarning(Msg.Message);  					break;  			}
Missing Default,TSO_LoginServer.Network,CityServerPacketHandlers,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSO LoginServer\TSO LoginServer\Network\CityServerPacketHandlers.cs,HandlePlayerOnlineResponse,The following switch statement is missing a default case: switch(Result)  			{  				case 0x01:  					Packet = new PacketStream((byte)PacketType.REQUEST_CITY_TOKEN' 0);  					Packet.WriteString(Token);  					FoundClient = NetworkFacade.ClientListener.GetClient(RemoteIP' RemotePort);    					if(FoundClient != null)  						FoundClient.SendEncrypted((byte)PacketType.REQUEST_CITY_TOKEN' Packet.ToArray());    					break;  				case 0x02: //Write player was already online packet!  					Packet = new PacketStream((byte)PacketType.PLAYER_ALREADY_ONLINE' 0);  					Packet.WriteByte(0x00); //Dummy  					FoundClient = NetworkFacade.ClientListener.GetClient(RemoteIP' RemotePort);    					if (FoundClient != null)  						FoundClient.SendEncrypted((byte)PacketType.PLAYER_ALREADY_ONLINE' Packet.ToArray());    					break;  			}
Missing Default,TSO_LoginServer.Network,LoginPacketHandlers,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSO LoginServer\TSO LoginServer\Network\LoginPacketHandlers.cs,HandleCityInfoRequest,The following switch statement is missing a default case: switch (CInfo.Status)  						{  							case CityInfoStatus.Ok:  								Packet.WriteByte(1);  								break;  							case CityInfoStatus.Busy:  								Packet.WriteByte(2);  								break;  							case CityInfoStatus.Full:  								Packet.WriteByte(3);  								break;  							case CityInfoStatus.Reserved:  								Packet.WriteByte(4);  								break;  						}
Missing Default,TSO_LoginServer.Network,LoginPacketHandlers,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSO LoginServer\TSO LoginServer\Network\LoginPacketHandlers.cs,HandleCharacterCreate,The following switch statement is missing a default case: switch (status)  				{  					case LoginDataModel.Entities.CharacterCreationStatus.NameAlreadyExisted:  						CCStatusPacket.WriteByte((int)LoginDataModel.Entities.CharacterCreationStatus.NameAlreadyExisted);  						Client.SendEncrypted(CCStatusPacket.PacketID' CCStatusPacket.ToArray());  						break;  					case LoginDataModel.Entities.CharacterCreationStatus.NameTooLong:  						CCStatusPacket.WriteByte((int)LoginDataModel.Entities.CharacterCreationStatus.NameTooLong);  						Client.SendEncrypted(CCStatusPacket.PacketID' CCStatusPacket.ToArray());  						break;  					case LoginDataModel.Entities.CharacterCreationStatus.Success:  						Guid Token = Guid.NewGuid();    						//This actually updates the record' not sure how.  						Acc.NumCharacters++;    						//THIS NEEDS TO HAPPEN FIRST FOR CITY SERVER AUTHENTICATION TO WORK!  						CityInfo CServer = NetworkFacade.CServerListener.GetCityServer(Char.City);    						//Just in case...  						if (CServer != null)  						{  							PacketStream CServerPacket = new PacketStream(0x01' 0);  							CServerPacket.WriteHeader();    							ushort PacketLength = (ushort)(PacketHeaders.UNENCRYPTED + 1 + 4 + (Client.RemoteIP.Length + 1)  								+ 4 + (Char.GUID.ToString().Length + 1) + (Token.ToString().Length + 1));  							CServerPacket.WriteUInt16(PacketLength);    							CServerPacket.WriteByte(1); //CharacterCreate = true  							CServerPacket.WriteInt32(Acc.AccountID);  							CServerPacket.WriteString(Client.RemoteIP);  							CServerPacket.WriteInt32(Client.RemotePort);  							CServerPacket.WriteString(Char.GUID.ToString());  							CServerPacket.WriteString(Token.ToString(""));  							CServer.Client.Send(CServerPacket.ToArray());  						}    						CCStatusPacket.WriteByte((int)LoginDataModel.Entities.CharacterCreationStatus.Success);  						CCStatusPacket.WriteString(Char.GUID.ToString());  						CCStatusPacket.WriteString(Token.ToString());  						Client.SendEncrypted(CCStatusPacket.PacketID' CCStatusPacket.ToArray());    						break;  				}
