Implementation smell,Namespace,Class,File,Method,Description
Long Method,GonzoNet,NetworkClient,F:\newReposMay17\Afr0_Project-Dollhouse\Other\libs\GonzoNet\GonzoNet\NetworkClient.cs,ReceiveCallback,The method has 120 lines of code.
Complex Method,GonzoNet,NetworkClient,F:\newReposMay17\Afr0_Project-Dollhouse\Other\libs\GonzoNet\GonzoNet\NetworkClient.cs,ReceiveCallback,Cyclomatic complexity of the method is 21
Long Parameter List,GonzoNet,ProcessedPacket,F:\newReposMay17\Afr0_Project-Dollhouse\Other\libs\GonzoNet\GonzoNet\ProcessedPacket.cs,ProcessedPacket,The method has 6 parameters.
Long Statement,GonzoNet.Concurrency,BlockingCollection,F:\newReposMay17\Afr0_Project-Dollhouse\Other\libs\GonzoNet\GonzoNet\Concurrency\BlockingCollection.cs,Add,The length of the statement  "				throw new InvalidOperationException ("The BlockingCollection<T>" + " has been marked as complete with regards to additions."); " is 126.
Long Statement,GonzoNet.Concurrency,BlockingCollection,F:\newReposMay17\Afr0_Project-Dollhouse\Other\libs\GonzoNet\GonzoNet\Concurrency\BlockingCollection.cs,Add,The length of the statement  "			throw new InvalidOperationException ("The BlockingCollection<T> has" + " been marked as complete with regards to additions."); " is 126.
Long Statement,GonzoNet.Concurrency,BlockingCollection,F:\newReposMay17\Afr0_Project-Dollhouse\Other\libs\GonzoNet\GonzoNet\Concurrency\BlockingCollection.cs,Remove,The length of the statement  "			throw new OperationCanceledException ("The BlockingCollection<T> is empty and has been marked as complete with regards to additions."); " is 135.
Long Statement,GonzoNet.Concurrency,BlockingCollection,F:\newReposMay17\Afr0_Project-Dollhouse\Other\libs\GonzoNet\GonzoNet\Concurrency\BlockingCollection.cs,CheckArray,The length of the statement  "		throw new ArgumentException ("The collections argument is a 0-length array or contains a null element."' "collections"); " is 120.
Long Statement,GonzoNet.Concurrency,ConcurrentDictionary,F:\newReposMay17\Afr0_Project-Dollhouse\Other\libs\GonzoNet\GonzoNet\Concurrency\ConcurrentDictionary.cs,AddOrUpdate,The length of the statement  "	return internalDictionary.InsertOrUpdate (Hash (key)' () => Make (key' addValueFactory (key))' e => Make (key' updateValueFactory (key' e.Value))).Value; " is 153.
Long Statement,GonzoNet.Concurrency,ConcurrentDictionary,F:\newReposMay17\Afr0_Project-Dollhouse\Other\libs\GonzoNet\GonzoNet\Concurrency\ConcurrentDictionary.cs,GetOrAdd,The length of the statement  "	return internalDictionary.InsertOrGet (Hash (key)' Make (key' default(TValue))' () => Make (key' valueFactory (key))).Value; " is 124.
Long Statement,GonzoNet.Concurrency,ConcurrentQueue,F:\newReposMay17\Afr0_Project-Dollhouse\Other\libs\GonzoNet\GonzoNet\Concurrency\ConcurrentQueue.cs,Enqueue,The length of the statement  "	// At this point we added correctly our node' now we have to update tail. If it fails then it will be done by another thread " is 124.
Long Statement,GonzoNet.Concurrency,SplitOrderedList,F:\newReposMay17\Afr0_Project-Dollhouse\Other\libs\GonzoNet\GonzoNet\Concurrency\SplitOrderedList.cs,GetParent,The length of the statement  "	var pos = (tt = v >> 16) > 0 ? (t = tt >> 8) > 0 ? 24 + logTable [t] : 16 + logTable [tt] : (t = v >> 8) > 0 ? 8 + logTable [t] : logTable [v]; " is 143.
Long Statement,GonzoNet.Concurrency,SplitOrderedList,F:\newReposMay17\Afr0_Project-Dollhouse\Other\libs\GonzoNet\GonzoNet\Concurrency\SplitOrderedList.cs,ComputeDummyKey,The length of the statement  "	return ((ulong)(((uint)reverseTable [key & 0xff] << 24) | ((uint)reverseTable [(key >> 8) & 0xff] << 16) | ((uint)reverseTable [(key >> 16) & 0xff] << 8) | ((uint)reverseTable [(key >> 24) & 0xff]))) << 1; " is 205.
Long Statement,GonzoNet.Concurrency,SplitOrderedList,F:\newReposMay17\Afr0_Project-Dollhouse\Other\libs\GonzoNet\GonzoNet\Concurrency\SplitOrderedList.cs,SetBucket,The length of the statement  "				return buckets[segment][index & (SegmentSize - 1)] = node;*/Interlocked.CompareExchange (ref buckets [index]' node' null); " is 122.
Long Statement,GonzoNet.Encryption,AESEncryptor,F:\newReposMay17\Afr0_Project-Dollhouse\Other\libs\GonzoNet\GonzoNet\Encryption\AESEncryptor.cs,FinalizePacket,The length of the statement  "	byte[] EncryptedData = StaticStaticDiffieHellman.Encrypt (m_PrivateKey' ECDiffieHellmanCngPublicKey.FromByteArray (m_PublicKey' CngKeyBlobFormat.EccPublicBlob)' m_NOnce' PacketData); " is 182.
Long Statement,GonzoNet.Encryption,AESEncryptor,F:\newReposMay17\Afr0_Project-Dollhouse\Other\libs\GonzoNet\GonzoNet\Encryption\AESEncryptor.cs,DecryptPacket,The length of the statement  "		byte[] DecryptedData = StaticStaticDiffieHellman.Decrypt (m_PrivateKey' ECDiffieHellmanCngPublicKey.FromByteArray (m_PublicKey' CngKeyBlobFormat.EccPublicBlob)' m_NOnce' EncryptedData); " is 185.
Long Statement,GonzoNet,NetworkClient,F:\newReposMay17\Afr0_Project-Dollhouse\Other\libs\GonzoNet\GonzoNet\NetworkClient.cs,ReceiveCallback,The length of the statement  "					OnPacket (new ProcessedPacket (ID' m_Handler.Encrypted' m_Handler.VariableLength' PacketLength' m_ClientEncryptor' UnknownPacket.ToArray ())' m_Handler); " is 153.
Long Statement,GonzoNet,NetworkClient,F:\newReposMay17\Afr0_Project-Dollhouse\Other\libs\GonzoNet\GonzoNet\NetworkClient.cs,ReceiveCallback,The length of the statement  "					Logger.Log ("Received more bytes than needed for packet. Excess: " + (NumBytesRead - PacketLength) + "\r\n"' LogLevel.info); " is 124.
Long Statement,GonzoNet,NetworkClient,F:\newReposMay17\Afr0_Project-Dollhouse\Other\libs\GonzoNet\GonzoNet\NetworkClient.cs,ReceiveCallback,The length of the statement  "					OnPacket (new ProcessedPacket (ID' OldHandler.Encrypted' OldHandler.VariableLength' OldHandler.Length' m_ClientEncryptor' PacketBuffer)' OldHandler); " is 149.
Long Statement,GonzoNet,NetworkClient,F:\newReposMay17\Afr0_Project-Dollhouse\Other\libs\GonzoNet\GonzoNet\NetworkClient.cs,ReceiveCallback,The length of the statement  "				OnPacket (new ProcessedPacket (m_TempPacket.PacketID' m_Handler.Encrypted' m_Handler.VariableLength' (ushort)m_TempPacket.Length' m_ClientEncryptor' m_TempPacket.ToArray ())' m_Handler); " is 186.
Long Statement,GonzoNet,NetworkClient,F:\newReposMay17\Afr0_Project-Dollhouse\Other\libs\GonzoNet\GonzoNet\NetworkClient.cs,ReceiveCallback,The length of the statement  "				Logger.Log ("Received more bytes than needed for packet. Excess: " + (m_TempPacket.BufferLength - m_TempPacket.Length) + "\r\n"' LogLevel.info); " is 144.
Long Statement,GonzoNet,NetworkClient,F:\newReposMay17\Afr0_Project-Dollhouse\Other\libs\GonzoNet\GonzoNet\NetworkClient.cs,ReceiveCallback,The length of the statement  "				OnPacket (new ProcessedPacket (OldHandler.ID' OldHandler.Encrypted' OldHandler.VariableLength' OldHandler.Length' m_ClientEncryptor' PacketBuffer)' OldHandler); " is 160.
Long Statement,GonzoNet,NetworkClient,F:\newReposMay17\Afr0_Project-Dollhouse\Other\libs\GonzoNet\GonzoNet\NetworkClient.cs,ReceiveCallback,The length of the statement  "				Buffer.BlockCopy (m_TempPacket.ToArray ()' ((int)m_TempPacket.BufferLength - (int)m_TempPacket.Length)' TmpBuffer' 0' TmpBuffer.Length); " is 136.
Virtual Method Call from Constructor,GonzoNet,ProcessedPacket,F:\newReposMay17\Afr0_Project-Dollhouse\Other\libs\GonzoNet\GonzoNet\ProcessedPacket.cs,ProcessedPacket,The constructor "ProcessedPacket" calls a virtual method "GetDecryptionArgsContainer".
Virtual Method Call from Constructor,GonzoNet,ProcessedPacket,F:\newReposMay17\Afr0_Project-Dollhouse\Other\libs\GonzoNet\GonzoNet\ProcessedPacket.cs,ProcessedPacket,The constructor "ProcessedPacket" calls a virtual method "DecryptPacket".
Empty Catch Block,GonzoNet.Concurrency,BlockingCollection,F:\newReposMay17\Afr0_Project-Dollhouse\Other\libs\GonzoNet\GonzoNet\Concurrency\BlockingCollection.cs,AddAny,The method has an empty catch block.
Empty Catch Block,GonzoNet.Concurrency,BlockingCollection,F:\newReposMay17\Afr0_Project-Dollhouse\Other\libs\GonzoNet\GonzoNet\Concurrency\BlockingCollection.cs,RemoveAny,The method has an empty catch block.
Empty Catch Block,GonzoNet,NetworkClient,F:\newReposMay17\Afr0_Project-Dollhouse\Other\libs\GonzoNet\GonzoNet\NetworkClient.cs,Disconnect,The method has an empty catch block.
Magic Number,GonzoNet.Concurrency,SpinWait,F:\newReposMay17\Afr0_Project-Dollhouse\Other\libs\GonzoNet\GonzoNet\Concurrency\SpinWait.cs,SpinOnce,The following statement contains a magic number: if (isSingleCpu) {  	Yield ();  } else {  	if (Interlocked.Increment (ref ntime) % step == 0) {  		Yield ();  	} else {  		// Multi-CPU system might be hyper-threaded' let other thread run  		Thread.SpinWait (2 * (ntime + 1));  	}  }  
Magic Number,GonzoNet.Concurrency,SpinWait,F:\newReposMay17\Afr0_Project-Dollhouse\Other\libs\GonzoNet\GonzoNet\Concurrency\SpinWait.cs,SpinOnce,The following statement contains a magic number: if (Interlocked.Increment (ref ntime) % step == 0) {  	Yield ();  } else {  	// Multi-CPU system might be hyper-threaded' let other thread run  	Thread.SpinWait (2 * (ntime + 1));  }  
Magic Number,GonzoNet.Concurrency,SpinWait,F:\newReposMay17\Afr0_Project-Dollhouse\Other\libs\GonzoNet\GonzoNet\Concurrency\SpinWait.cs,SpinOnce,The following statement contains a magic number: Thread.SpinWait (2 * (ntime + 1));  
Magic Number,GonzoNet.Concurrency,SplitOrderedList,F:\newReposMay17\Afr0_Project-Dollhouse\Other\libs\GonzoNet\GonzoNet\Concurrency\SplitOrderedList.cs,InsertInternal,The following statement contains a magic number: if (Interlocked.Increment (ref count) / csize > MaxLoad && (csize & 0x40000000) == 0)  	Interlocked.CompareExchange (ref size' 2 * csize' csize);  
Magic Number,GonzoNet.Concurrency,SplitOrderedList,F:\newReposMay17\Afr0_Project-Dollhouse\Other\libs\GonzoNet\GonzoNet\Concurrency\SplitOrderedList.cs,InsertInternal,The following statement contains a magic number: Interlocked.CompareExchange (ref size' 2 * csize' csize);  
Magic Number,GonzoNet.Concurrency,SplitOrderedList,F:\newReposMay17\Afr0_Project-Dollhouse\Other\libs\GonzoNet\GonzoNet\Concurrency\SplitOrderedList.cs,ComputeDummyKey,The following statement contains a magic number: return ((ulong)(((uint)reverseTable [key & 0xff] << 24) | ((uint)reverseTable [(key >> 8) & 0xff] << 16) | ((uint)reverseTable [(key >> 16) & 0xff] << 8) | ((uint)reverseTable [(key >> 24) & 0xff]))) << 1;  
Magic Number,GonzoNet.Concurrency,SplitOrderedList,F:\newReposMay17\Afr0_Project-Dollhouse\Other\libs\GonzoNet\GonzoNet\Concurrency\SplitOrderedList.cs,ComputeDummyKey,The following statement contains a magic number: return ((ulong)(((uint)reverseTable [key & 0xff] << 24) | ((uint)reverseTable [(key >> 8) & 0xff] << 16) | ((uint)reverseTable [(key >> 16) & 0xff] << 8) | ((uint)reverseTable [(key >> 24) & 0xff]))) << 1;  
Magic Number,GonzoNet.Concurrency,SplitOrderedList,F:\newReposMay17\Afr0_Project-Dollhouse\Other\libs\GonzoNet\GonzoNet\Concurrency\SplitOrderedList.cs,ComputeDummyKey,The following statement contains a magic number: return ((ulong)(((uint)reverseTable [key & 0xff] << 24) | ((uint)reverseTable [(key >> 8) & 0xff] << 16) | ((uint)reverseTable [(key >> 16) & 0xff] << 8) | ((uint)reverseTable [(key >> 24) & 0xff]))) << 1;  
Magic Number,GonzoNet.Concurrency,SplitOrderedList,F:\newReposMay17\Afr0_Project-Dollhouse\Other\libs\GonzoNet\GonzoNet\Concurrency\SplitOrderedList.cs,ComputeDummyKey,The following statement contains a magic number: return ((ulong)(((uint)reverseTable [key & 0xff] << 24) | ((uint)reverseTable [(key >> 8) & 0xff] << 16) | ((uint)reverseTable [(key >> 16) & 0xff] << 8) | ((uint)reverseTable [(key >> 24) & 0xff]))) << 1;  
Magic Number,GonzoNet.Concurrency,SplitOrderedList,F:\newReposMay17\Afr0_Project-Dollhouse\Other\libs\GonzoNet\GonzoNet\Concurrency\SplitOrderedList.cs,ComputeDummyKey,The following statement contains a magic number: return ((ulong)(((uint)reverseTable [key & 0xff] << 24) | ((uint)reverseTable [(key >> 8) & 0xff] << 16) | ((uint)reverseTable [(key >> 16) & 0xff] << 8) | ((uint)reverseTable [(key >> 24) & 0xff]))) << 1;  
Magic Number,GonzoNet.Concurrency,SplitOrderedList,F:\newReposMay17\Afr0_Project-Dollhouse\Other\libs\GonzoNet\GonzoNet\Concurrency\SplitOrderedList.cs,ComputeDummyKey,The following statement contains a magic number: return ((ulong)(((uint)reverseTable [key & 0xff] << 24) | ((uint)reverseTable [(key >> 8) & 0xff] << 16) | ((uint)reverseTable [(key >> 16) & 0xff] << 8) | ((uint)reverseTable [(key >> 24) & 0xff]))) << 1;  
Magic Number,GonzoNet.Concurrency,SplitOrderedList,F:\newReposMay17\Afr0_Project-Dollhouse\Other\libs\GonzoNet\GonzoNet\Concurrency\SplitOrderedList.cs,CheckSegment,The following statement contains a magic number: try {  	slim.EnterWriteLock ();  	while (segment >= buckets.Length)  		Array.Resize (ref buckets' buckets.Length * 2);  } finally {  	slim.ExitWriteLock ();  }  
Magic Number,GonzoNet.Concurrency,SplitOrderedList,F:\newReposMay17\Afr0_Project-Dollhouse\Other\libs\GonzoNet\GonzoNet\Concurrency\SplitOrderedList.cs,CheckSegment,The following statement contains a magic number: while (segment >= buckets.Length)  	Array.Resize (ref buckets' buckets.Length * 2);  
Magic Number,GonzoNet.Concurrency,SplitOrderedList,F:\newReposMay17\Afr0_Project-Dollhouse\Other\libs\GonzoNet\GonzoNet\Concurrency\SplitOrderedList.cs,CheckSegment,The following statement contains a magic number: Array.Resize (ref buckets' buckets.Length * 2);  
Magic Number,GonzoNet.Encryption,ARC4Encryptor,F:\newReposMay17\Afr0_Project-Dollhouse\Other\libs\GonzoNet\GonzoNet\Encryption\ARC4Encryptor.cs,ARC4Encryptor,The following statement contains a magic number: EncryptionKey = Pwd.GetBytes (8);  
Magic Number,GonzoNet.Encryption,StaticStaticDiffieHellman,F:\newReposMay17\Afr0_Project-Dollhouse\Other\libs\GonzoNet\GonzoNet\Encryption\StaticStaticDiffieHellman.cs,DeriveKeyAndIv,The following statement contains a magic number: Array.Copy (keyAndIv' 0' key' 0' 16);  
Magic Number,GonzoNet.Encryption,StaticStaticDiffieHellman,F:\newReposMay17\Afr0_Project-Dollhouse\Other\libs\GonzoNet\GonzoNet\Encryption\StaticStaticDiffieHellman.cs,DeriveKeyAndIv,The following statement contains a magic number: Array.Copy (keyAndIv' 16' iv' 0' 16);  
Magic Number,GonzoNet.Encryption,StaticStaticDiffieHellman,F:\newReposMay17\Afr0_Project-Dollhouse\Other\libs\GonzoNet\GonzoNet\Encryption\StaticStaticDiffieHellman.cs,DeriveKeyAndIv,The following statement contains a magic number: Array.Copy (keyAndIv' 16' iv' 0' 16);  
Magic Number,GonzoNet,Listener,F:\newReposMay17\Afr0_Project-Dollhouse\Other\libs\GonzoNet\GonzoNet\Listener.cs,Initialize,The following statement contains a magic number: try {  	m_ListenerSock.Bind (LocalEP);  	m_ListenerSock.Listen (10000);  } catch (SocketException E) {  	throw E;  }  
Magic Number,GonzoNet,Listener,F:\newReposMay17\Afr0_Project-Dollhouse\Other\libs\GonzoNet\GonzoNet\Listener.cs,Initialize,The following statement contains a magic number: m_ListenerSock.Listen (10000);  
Magic Number,GonzoNet,Listener,F:\newReposMay17\Afr0_Project-Dollhouse\Other\libs\GonzoNet\GonzoNet\Listener.cs,OnAccept,The following statement contains a magic number: if (AcceptedSocket != null) {  	Console.WriteLine ("\nNew client connected!\r\n");  	//Let sockets linger for 5 seconds after they're closed' in an attempt to make sure all  	//pending data is sent!  	AcceptedSocket.LingerState = new LingerOption (true' 5);  	NetworkClient NewClient = new NetworkClient (AcceptedSocket' this' m_EMode);  	switch (m_EMode) {  	case EncryptionMode.AESCrypto:  		NewClient.ClientEncryptor = new AESEncryptor ("");  		break;  	}  	m_LoginClients.Add (NewClient);  	if (OnConnected != null)  		OnConnected (NewClient);  }  
Magic Number,GonzoNet,Listener,F:\newReposMay17\Afr0_Project-Dollhouse\Other\libs\GonzoNet\GonzoNet\Listener.cs,OnAccept,The following statement contains a magic number: AcceptedSocket.LingerState = new LingerOption (true' 5);  
Magic Number,GonzoNet,NetworkClient,F:\newReposMay17\Afr0_Project-Dollhouse\Other\libs\GonzoNet\GonzoNet\NetworkClient.cs,NetworkClient,The following statement contains a magic number: m_RecvBuf = new byte[11024];  
Magic Number,GonzoNet,NetworkClient,F:\newReposMay17\Afr0_Project-Dollhouse\Other\libs\GonzoNet\GonzoNet\NetworkClient.cs,NetworkClient,The following statement contains a magic number: m_RecvBuf = new byte[11024];  
Magic Number,GonzoNet,NetworkClient,F:\newReposMay17\Afr0_Project-Dollhouse\Other\libs\GonzoNet\GonzoNet\NetworkClient.cs,ReceiveCallback,The following statement contains a magic number: try {  	Socket Sock = (Socket)AR.AsyncState;  	int NumBytesRead = Sock.EndReceive (AR);  	/** Cant do anything with this! **/if (NumBytesRead == 0) {  		return;  	}  	byte[] TmpBuf = new byte[NumBytesRead];  	Buffer.BlockCopy (m_RecvBuf' 0' TmpBuf' 0' NumBytesRead);  	m_RecvBuf = new byte[11024];  	//Clear' to make sure this buffer is always fresh.  	if (m_TempPacket == null)//No temporary data was stored - beginning of new packet!  	 {  		//The packet is given an ID of 0x00 because its ID is currently unknown.  		PacketStream UnknownPacket = new PacketStream (0x00' (ushort)NumBytesRead' TmpBuf);  		byte ID = UnknownPacket.PeekByte (0);  		Logger.Log ("Received packet: " + ID' LogLevel.info);  		ushort PacketLength = 0;  		m_Handler = FindPacketHandler (ID);  		PacketLength = m_Handler.Length;  		if (PacketLength == 0)//Variable length!  		 {  			if (NumBytesRead >= (int)PacketHeaders.ENCRYPTED)  				PacketLength = UnknownPacket.PeekUShort (1);  		} else {  			if (m_TempPacket == null)  				m_TempPacket = new PacketStream (ID' PacketLength);  			byte[] TmpBuffer = new byte[NumBytesRead];  			//Store the number of bytes that were read in the temporary buffer.  			Logger.Log ("Got data' but not a full header - stored " + NumBytesRead.ToString () + "bytes!\r\n\r\n"' LogLevel.info);  			Buffer.BlockCopy (m_RecvBuf' 0' TmpBuffer' 0' NumBytesRead);  			m_TempPacket.WriteBytes (TmpBuffer);  			TmpBuffer = null;  		}  		if (PacketLength != 0) {  			if (NumBytesRead == PacketLength) {  				Logger.Log ("Got packet - exact length!\r\n\r\n"' LogLevel.info);  				OnPacket (new ProcessedPacket (ID' m_Handler.Encrypted' m_Handler.VariableLength' PacketLength' m_ClientEncryptor' UnknownPacket.ToArray ())' m_Handler);  			} else if (NumBytesRead < PacketLength) {  				if (m_TempPacket == null)  					m_TempPacket = new PacketStream (ID' PacketLength);  				byte[] TmpBuffer = new byte[NumBytesRead];  				//Store the number of bytes that were read in the temporary buffer.  				Logger.Log ("Got data' but not a full packet - stored " + NumBytesRead.ToString () + "bytes!\r\n\r\n"' LogLevel.info);  				Buffer.BlockCopy (m_RecvBuf' 0' TmpBuffer' 0' NumBytesRead);  				m_TempPacket.WriteBytes (TmpBuffer);  				TmpBuffer = null;  			} else if (NumBytesRead > PacketLength) {  				Logger.Log ("Received more bytes than needed for packet. Excess: " + (NumBytesRead - PacketLength) + "\r\n"' LogLevel.info);  				PacketHandler OldHandler = m_Handler;  				byte[] PacketBuffer = new byte[PacketLength];  				Buffer.BlockCopy (UnknownPacket.ToArray ()' 0' PacketBuffer' 0' PacketBuffer.Length);  				OnPacket (new ProcessedPacket (ID' OldHandler.Encrypted' OldHandler.VariableLength' OldHandler.Length' m_ClientEncryptor' PacketBuffer)' OldHandler);  				byte[] TmpBuffer = new byte[NumBytesRead - PacketLength];  				Buffer.BlockCopy (UnknownPacket.ToArray ()' (NumBytesRead - PacketLength) - 1' TmpBuffer' 0' TmpBuffer.Length);  				m_TempPacket = new PacketStream (TmpBuffer [0]' (ushort)(NumBytesRead - PacketLength)' TmpBuffer);  				m_TempPacket.WriteBytes (TmpBuffer);  				m_Handler = FindPacketHandler (ID);  				PacketLength = m_Handler.Length;  				if (PacketLength == 0)//Variable length!  				 {  					if (m_TempPacket.BufferLength >= (int)PacketHeaders.ENCRYPTED) {  						PacketLength = UnknownPacket.PeekUShort (1);  						m_TempPacket.SetLength (PacketLength);  					}  				}  				TmpBuffer = null;  			}  		}  	} else {  		m_TempPacket.WriteBytes (TmpBuf);  		if (m_TempPacket.Length == 0)//Variable length!  		 {  			if (NumBytesRead >= (int)PacketHeaders.ENCRYPTED)  				m_TempPacket.SetLength (m_TempPacket.PeekUShort (1));  			else {  				byte[] TmpBuffer = new byte[NumBytesRead];  				//Store the number of bytes that were read in the temporary buffer.  				Logger.Log ("Got data' but not a full header - stored " + NumBytesRead.ToString () + "bytes!\r\n\r\n"' LogLevel.info);  				Buffer.BlockCopy (m_RecvBuf' 0' TmpBuffer' 0' NumBytesRead);  				m_TempPacket.WriteBytes (TmpBuffer);  				BeginReceive ();  				TmpBuffer = null;  			}  		}  		if (m_TempPacket.BufferLength == m_TempPacket.Length) {  			Logger.Log ("Got packet - exact length!\r\n\r\n"' LogLevel.info);  			OnPacket (new ProcessedPacket (m_TempPacket.PacketID' m_Handler.Encrypted' m_Handler.VariableLength' (ushort)m_TempPacket.Length' m_ClientEncryptor' m_TempPacket.ToArray ())' m_Handler);  		} else if (m_TempPacket.BufferLength < m_TempPacket.Length) {  			byte[] TmpBuffer = new byte[NumBytesRead];  			//Store the number of bytes that were read in the temporary buffer.  			Logger.Log ("Got data' but not a full packet - stored " + NumBytesRead.ToString () + "bytes!\r\n\r\n"' LogLevel.info);  			Buffer.BlockCopy (m_RecvBuf' 0' TmpBuffer' 0' NumBytesRead);  			m_TempPacket.WriteBytes (TmpBuffer);  			TmpBuffer = null;  		} else if (m_TempPacket.BufferLength > m_TempPacket.Length) {  			Logger.Log ("Received more bytes than needed for packet. Excess: " + (m_TempPacket.BufferLength - m_TempPacket.Length) + "\r\n"' LogLevel.info);  			PacketHandler OldHandler = m_Handler;  			byte[] PacketBuffer = new byte[m_TempPacket.Length];  			Buffer.BlockCopy (m_TempPacket.ToArray ()' 0' PacketBuffer' 0' PacketBuffer.Length);  			OnPacket (new ProcessedPacket (OldHandler.ID' OldHandler.Encrypted' OldHandler.VariableLength' OldHandler.Length' m_ClientEncryptor' PacketBuffer)' OldHandler);  			byte[] TmpBuffer = new byte[m_TempPacket.BufferLength - m_TempPacket.Length];  			Buffer.BlockCopy (m_TempPacket.ToArray ()' ((int)m_TempPacket.BufferLength - (int)m_TempPacket.Length)' TmpBuffer' 0' TmpBuffer.Length);  			m_TempPacket = new PacketStream (TmpBuffer [0]' (ushort)(m_TempPacket.BufferLength - m_TempPacket.Length)' TmpBuffer);  			m_Handler = FindPacketHandler (m_TempPacket.PacketID);  			ushort PacketLength = m_Handler.Length;  			if (PacketLength == 0)//Variable length!  			 {  				if (m_TempPacket.BufferLength >= (int)PacketHeaders.ENCRYPTED) {  					PacketLength = m_TempPacket.PeekUShort (1);  					m_TempPacket.SetLength (PacketLength);  				}  			}  		}  	}  	m_Sock.BeginReceive (m_RecvBuf' 0' m_RecvBuf.Length' SocketFlags.None' new AsyncCallback (ReceiveCallback)' m_Sock);  } catch (SocketException) {  	Disconnect ();  }  
Magic Number,GonzoNet,NetworkClient,F:\newReposMay17\Afr0_Project-Dollhouse\Other\libs\GonzoNet\GonzoNet\NetworkClient.cs,ReceiveCallback,The following statement contains a magic number: m_RecvBuf = new byte[11024];  
Magic Number,GonzoNet,PacketStream,F:\newReposMay17\Afr0_Project-Dollhouse\Other\libs\GonzoNet\GonzoNet\PacketStream.cs,ToArray,The following statement contains a magic number: if (m_VariableLength) {  	var packetLength = (ushort)m_Position;  	bytes [2] = (byte)(packetLength & 0xFF);  	bytes [3] = (byte)(packetLength >> 8);  }  
Magic Number,GonzoNet,PacketStream,F:\newReposMay17\Afr0_Project-Dollhouse\Other\libs\GonzoNet\GonzoNet\PacketStream.cs,ToArray,The following statement contains a magic number: if (m_VariableLength) {  	var packetLength = (ushort)m_Position;  	bytes [2] = (byte)(packetLength & 0xFF);  	bytes [3] = (byte)(packetLength >> 8);  }  
Magic Number,GonzoNet,PacketStream,F:\newReposMay17\Afr0_Project-Dollhouse\Other\libs\GonzoNet\GonzoNet\PacketStream.cs,ToArray,The following statement contains a magic number: if (m_VariableLength) {  	var packetLength = (ushort)m_Position;  	bytes [2] = (byte)(packetLength & 0xFF);  	bytes [3] = (byte)(packetLength >> 8);  }  
Magic Number,GonzoNet,PacketStream,F:\newReposMay17\Afr0_Project-Dollhouse\Other\libs\GonzoNet\GonzoNet\PacketStream.cs,ToArray,The following statement contains a magic number: bytes [2] = (byte)(packetLength & 0xFF);  
Magic Number,GonzoNet,PacketStream,F:\newReposMay17\Afr0_Project-Dollhouse\Other\libs\GonzoNet\GonzoNet\PacketStream.cs,ToArray,The following statement contains a magic number: bytes [3] = (byte)(packetLength >> 8);  
Magic Number,GonzoNet,PacketStream,F:\newReposMay17\Afr0_Project-Dollhouse\Other\libs\GonzoNet\GonzoNet\PacketStream.cs,ToArray,The following statement contains a magic number: bytes [3] = (byte)(packetLength >> 8);  
Magic Number,GonzoNet,PacketStream,F:\newReposMay17\Afr0_Project-Dollhouse\Other\libs\GonzoNet\GonzoNet\PacketStream.cs,ReadDouble,The following statement contains a magic number: m_Position -= 8;  
Magic Number,GonzoNet,PacketStream,F:\newReposMay17\Afr0_Project-Dollhouse\Other\libs\GonzoNet\GonzoNet\PacketStream.cs,ReadUShort,The following statement contains a magic number: m_Position -= 2;  
Magic Number,GonzoNet,PacketStream,F:\newReposMay17\Afr0_Project-Dollhouse\Other\libs\GonzoNet\GonzoNet\PacketStream.cs,ReadInt32,The following statement contains a magic number: m_Position -= 4;  
Magic Number,GonzoNet,PacketStream,F:\newReposMay17\Afr0_Project-Dollhouse\Other\libs\GonzoNet\GonzoNet\PacketStream.cs,ReadInt64,The following statement contains a magic number: m_Position -= 8;  
Magic Number,GonzoNet,PacketStream,F:\newReposMay17\Afr0_Project-Dollhouse\Other\libs\GonzoNet\GonzoNet\PacketStream.cs,ReadUInt16,The following statement contains a magic number: m_Position -= 2;  
Magic Number,GonzoNet,PacketStream,F:\newReposMay17\Afr0_Project-Dollhouse\Other\libs\GonzoNet\GonzoNet\PacketStream.cs,ReadUInt64,The following statement contains a magic number: m_Position -= 8;  
Magic Number,GonzoNet,PacketStream,F:\newReposMay17\Afr0_Project-Dollhouse\Other\libs\GonzoNet\GonzoNet\PacketStream.cs,WriteDouble,The following statement contains a magic number: lock (m_Writer) {  	m_Writer.Write (Value);  	m_Position += 8;  	m_Writer.Flush ();  }  
Magic Number,GonzoNet,PacketStream,F:\newReposMay17\Afr0_Project-Dollhouse\Other\libs\GonzoNet\GonzoNet\PacketStream.cs,WriteDouble,The following statement contains a magic number: m_Position += 8;  
Magic Number,GonzoNet,PacketStream,F:\newReposMay17\Afr0_Project-Dollhouse\Other\libs\GonzoNet\GonzoNet\PacketStream.cs,WriteInt32,The following statement contains a magic number: lock (m_Writer) {  	try {  		m_Writer.Write (Value);  		m_Position += 4;  		m_Writer.Flush ();  	} catch (IOException) {  		//Try again...  		m_Writer.Write (Value);  		m_Position += 4;  		m_Writer.Flush ();  	}  }  
Magic Number,GonzoNet,PacketStream,F:\newReposMay17\Afr0_Project-Dollhouse\Other\libs\GonzoNet\GonzoNet\PacketStream.cs,WriteInt32,The following statement contains a magic number: lock (m_Writer) {  	try {  		m_Writer.Write (Value);  		m_Position += 4;  		m_Writer.Flush ();  	} catch (IOException) {  		//Try again...  		m_Writer.Write (Value);  		m_Position += 4;  		m_Writer.Flush ();  	}  }  
Magic Number,GonzoNet,PacketStream,F:\newReposMay17\Afr0_Project-Dollhouse\Other\libs\GonzoNet\GonzoNet\PacketStream.cs,WriteInt32,The following statement contains a magic number: try {  	m_Writer.Write (Value);  	m_Position += 4;  	m_Writer.Flush ();  } catch (IOException) {  	//Try again...  	m_Writer.Write (Value);  	m_Position += 4;  	m_Writer.Flush ();  }  
Magic Number,GonzoNet,PacketStream,F:\newReposMay17\Afr0_Project-Dollhouse\Other\libs\GonzoNet\GonzoNet\PacketStream.cs,WriteInt32,The following statement contains a magic number: try {  	m_Writer.Write (Value);  	m_Position += 4;  	m_Writer.Flush ();  } catch (IOException) {  	//Try again...  	m_Writer.Write (Value);  	m_Position += 4;  	m_Writer.Flush ();  }  
Magic Number,GonzoNet,PacketStream,F:\newReposMay17\Afr0_Project-Dollhouse\Other\libs\GonzoNet\GonzoNet\PacketStream.cs,WriteInt32,The following statement contains a magic number: m_Position += 4;  
Magic Number,GonzoNet,PacketStream,F:\newReposMay17\Afr0_Project-Dollhouse\Other\libs\GonzoNet\GonzoNet\PacketStream.cs,WriteInt32,The following statement contains a magic number: m_Position += 4;  
Magic Number,GonzoNet,PacketStream,F:\newReposMay17\Afr0_Project-Dollhouse\Other\libs\GonzoNet\GonzoNet\PacketStream.cs,WriteUInt16,The following statement contains a magic number: lock (m_Writer) {  	try {  		m_Writer.Write (Value);  		m_Position += 2;  		m_Writer.Flush ();  	} catch (IOException) {  		m_Writer.Write (Value);  		m_Position += 2;  		m_Writer.Flush ();  	}  }  
Magic Number,GonzoNet,PacketStream,F:\newReposMay17\Afr0_Project-Dollhouse\Other\libs\GonzoNet\GonzoNet\PacketStream.cs,WriteUInt16,The following statement contains a magic number: lock (m_Writer) {  	try {  		m_Writer.Write (Value);  		m_Position += 2;  		m_Writer.Flush ();  	} catch (IOException) {  		m_Writer.Write (Value);  		m_Position += 2;  		m_Writer.Flush ();  	}  }  
Magic Number,GonzoNet,PacketStream,F:\newReposMay17\Afr0_Project-Dollhouse\Other\libs\GonzoNet\GonzoNet\PacketStream.cs,WriteUInt16,The following statement contains a magic number: try {  	m_Writer.Write (Value);  	m_Position += 2;  	m_Writer.Flush ();  } catch (IOException) {  	m_Writer.Write (Value);  	m_Position += 2;  	m_Writer.Flush ();  }  
Magic Number,GonzoNet,PacketStream,F:\newReposMay17\Afr0_Project-Dollhouse\Other\libs\GonzoNet\GonzoNet\PacketStream.cs,WriteUInt16,The following statement contains a magic number: try {  	m_Writer.Write (Value);  	m_Position += 2;  	m_Writer.Flush ();  } catch (IOException) {  	m_Writer.Write (Value);  	m_Position += 2;  	m_Writer.Flush ();  }  
Magic Number,GonzoNet,PacketStream,F:\newReposMay17\Afr0_Project-Dollhouse\Other\libs\GonzoNet\GonzoNet\PacketStream.cs,WriteUInt16,The following statement contains a magic number: m_Position += 2;  
Magic Number,GonzoNet,PacketStream,F:\newReposMay17\Afr0_Project-Dollhouse\Other\libs\GonzoNet\GonzoNet\PacketStream.cs,WriteUInt16,The following statement contains a magic number: m_Position += 2;  
Magic Number,GonzoNet,PacketStream,F:\newReposMay17\Afr0_Project-Dollhouse\Other\libs\GonzoNet\GonzoNet\PacketStream.cs,WriteInt64,The following statement contains a magic number: lock (m_Writer) {  	try {  		m_Writer.Write (Value);  		m_Position += 8;  		m_Writer.Flush ();  	} catch (IOException) {  		m_Writer.Write (Value);  		m_Position += 8;  		m_Writer.Flush ();  	}  }  
Magic Number,GonzoNet,PacketStream,F:\newReposMay17\Afr0_Project-Dollhouse\Other\libs\GonzoNet\GonzoNet\PacketStream.cs,WriteInt64,The following statement contains a magic number: lock (m_Writer) {  	try {  		m_Writer.Write (Value);  		m_Position += 8;  		m_Writer.Flush ();  	} catch (IOException) {  		m_Writer.Write (Value);  		m_Position += 8;  		m_Writer.Flush ();  	}  }  
Magic Number,GonzoNet,PacketStream,F:\newReposMay17\Afr0_Project-Dollhouse\Other\libs\GonzoNet\GonzoNet\PacketStream.cs,WriteInt64,The following statement contains a magic number: try {  	m_Writer.Write (Value);  	m_Position += 8;  	m_Writer.Flush ();  } catch (IOException) {  	m_Writer.Write (Value);  	m_Position += 8;  	m_Writer.Flush ();  }  
Magic Number,GonzoNet,PacketStream,F:\newReposMay17\Afr0_Project-Dollhouse\Other\libs\GonzoNet\GonzoNet\PacketStream.cs,WriteInt64,The following statement contains a magic number: try {  	m_Writer.Write (Value);  	m_Position += 8;  	m_Writer.Flush ();  } catch (IOException) {  	m_Writer.Write (Value);  	m_Position += 8;  	m_Writer.Flush ();  }  
Magic Number,GonzoNet,PacketStream,F:\newReposMay17\Afr0_Project-Dollhouse\Other\libs\GonzoNet\GonzoNet\PacketStream.cs,WriteInt64,The following statement contains a magic number: m_Position += 8;  
Magic Number,GonzoNet,PacketStream,F:\newReposMay17\Afr0_Project-Dollhouse\Other\libs\GonzoNet\GonzoNet\PacketStream.cs,WriteInt64,The following statement contains a magic number: m_Position += 8;  
Magic Number,GonzoNet,PacketStream,F:\newReposMay17\Afr0_Project-Dollhouse\Other\libs\GonzoNet\GonzoNet\PacketStream.cs,WriteUInt64,The following statement contains a magic number: lock (m_Writer) {  	try {  		m_Writer.Write (Value);  		m_Position += 8;  		m_Writer.Flush ();  	} catch (IOException) {  		m_Writer.Write (Value);  		m_Position += 8;  		m_Writer.Flush ();  	}  }  
Magic Number,GonzoNet,PacketStream,F:\newReposMay17\Afr0_Project-Dollhouse\Other\libs\GonzoNet\GonzoNet\PacketStream.cs,WriteUInt64,The following statement contains a magic number: lock (m_Writer) {  	try {  		m_Writer.Write (Value);  		m_Position += 8;  		m_Writer.Flush ();  	} catch (IOException) {  		m_Writer.Write (Value);  		m_Position += 8;  		m_Writer.Flush ();  	}  }  
Magic Number,GonzoNet,PacketStream,F:\newReposMay17\Afr0_Project-Dollhouse\Other\libs\GonzoNet\GonzoNet\PacketStream.cs,WriteUInt64,The following statement contains a magic number: try {  	m_Writer.Write (Value);  	m_Position += 8;  	m_Writer.Flush ();  } catch (IOException) {  	m_Writer.Write (Value);  	m_Position += 8;  	m_Writer.Flush ();  }  
Magic Number,GonzoNet,PacketStream,F:\newReposMay17\Afr0_Project-Dollhouse\Other\libs\GonzoNet\GonzoNet\PacketStream.cs,WriteUInt64,The following statement contains a magic number: try {  	m_Writer.Write (Value);  	m_Position += 8;  	m_Writer.Flush ();  } catch (IOException) {  	m_Writer.Write (Value);  	m_Position += 8;  	m_Writer.Flush ();  }  
Magic Number,GonzoNet,PacketStream,F:\newReposMay17\Afr0_Project-Dollhouse\Other\libs\GonzoNet\GonzoNet\PacketStream.cs,WriteUInt64,The following statement contains a magic number: m_Position += 8;  
Magic Number,GonzoNet,PacketStream,F:\newReposMay17\Afr0_Project-Dollhouse\Other\libs\GonzoNet\GonzoNet\PacketStream.cs,WriteUInt64,The following statement contains a magic number: m_Position += 8;  
Missing Default,GonzoNet,Listener,F:\newReposMay17\Afr0_Project-Dollhouse\Other\libs\GonzoNet\GonzoNet\Listener.cs,OnAccept,The following switch statement is missing a default case: switch (m_EMode) {  case EncryptionMode.AESCrypto:  	NewClient.ClientEncryptor = new AESEncryptor ("");  	break;  }  
