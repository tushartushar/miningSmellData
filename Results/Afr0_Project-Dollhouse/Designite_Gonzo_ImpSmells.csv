Implementation smell,Namespace,Class,File,Method,Description
Long Method,Gonzo,TreeWalker,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\TreeWalker.cs,WalkTree,The method has 144 lines of code.
Long Method,Gonzo.Elements,UIButton,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The method has 158 lines of code.
Long Method,Gonzo.Elements,UITextEdit,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UITextEdit.cs,UITextEdit,The method has 102 lines of code.
Long Method,Gonzo.Elements,UITextEdit,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UITextEdit.cs,Manager_OnTextInput,The method has 102 lines of code.
Long Method,Gonzo.Elements,UITextEdit,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UITextEdit.cs,Update,The method has 447 lines of code.
Complex Method,Gonzo,TreeWalker,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\TreeWalker.cs,WalkTree,Cyclomatic complexity of the method is 94
Complex Method,Gonzo.Elements,UIBodyBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIBodyBrowser.cs,UIBodyBrowser,Cyclomatic complexity of the method is 14
Complex Method,Gonzo.Elements,UIBodyBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIBodyBrowser.cs,Update,Cyclomatic complexity of the method is 27
Complex Method,Gonzo.Elements,UIBodyBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIBodyBrowser.cs,Draw,Cyclomatic complexity of the method is 19
Complex Method,Gonzo.Elements,UIHeadBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIHeadBrowser.cs,UIHeadBrowser,Cyclomatic complexity of the method is 14
Complex Method,Gonzo.Elements,UIHeadBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIHeadBrowser.cs,Update,Cyclomatic complexity of the method is 25
Complex Method,Gonzo.Elements,UIHeadBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIHeadBrowser.cs,Draw,Cyclomatic complexity of the method is 19
Complex Method,Gonzo.Elements,UIButton,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,Cyclomatic complexity of the method is 52
Complex Method,Gonzo.Elements,UIButton,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,Cyclomatic complexity of the method is 20
Complex Method,Gonzo.Elements,UIButton,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,Update,Cyclomatic complexity of the method is 9
Complex Method,Gonzo.Elements,UIControl,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIControl.cs,UIControl,Cyclomatic complexity of the method is 13
Complex Method,Gonzo.Elements,UILabel,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UILabel.cs,UILabel,Cyclomatic complexity of the method is 28
Complex Method,Gonzo.Elements,UILabel,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UILabel.cs,UILabel,Cyclomatic complexity of the method is 21
Complex Method,Gonzo.Elements,UILabel,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UILabel.cs,AlignText,Cyclomatic complexity of the method is 24
Complex Method,Gonzo.Elements,UITextEdit,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UITextEdit.cs,UITextEdit,Cyclomatic complexity of the method is 17
Complex Method,Gonzo.Elements,UITextEdit,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UITextEdit.cs,UITextEdit,Cyclomatic complexity of the method is 40
Complex Method,Gonzo.Elements,UITextEdit,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UITextEdit.cs,Manager_OnTextInput,Cyclomatic complexity of the method is 18
Complex Method,Gonzo.Elements,UITextEdit,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UITextEdit.cs,Update,Cyclomatic complexity of the method is 261
Complex Method,Gonzo.Elements,UITextEdit,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UITextEdit.cs,Draw,Cyclomatic complexity of the method is 9
Long Parameter List,Gonzo,UIScreen,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\UIScreen.cs,UIScreen,The method has 6 parameters.
Long Parameter List,Gonzo.Dialogs,UIDialog,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\UIDialog.cs,UIDialog,The method has 5 parameters.
Long Parameter List,Gonzo.Elements,UIButton,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The method has 8 parameters.
Long Parameter List,Gonzo.Elements,UIElement,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIElement.cs,UIElement,The method has 5 parameters.
Long Parameter List,Gonzo.Elements,UIImage,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIImage.cs,DrawTextureTo,The method has 5 parameters.
Long Parameter List,Gonzo.Elements,NineSlicer,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIImage.cs,NineSlicer,The method has 7 parameters.
Long Parameter List,Gonzo.Elements,NineSlicer,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIImage.cs,Calculate,The method has 6 parameters.
Long Parameter List,Gonzo.Elements,UILabel,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UILabel.cs,UILabel,The method has 8 parameters.
Long Parameter List,Gonzo.Elements,UITextEdit,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UITextEdit.cs,UITextEdit,The method has 9 parameters.
Long Statement,Gonzo,InputHelper,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\InputHelper.cs,IsNewPress,The length of the statement  "		return (_lastMouseState.MiddleButton == ButtonState.Released && _currentMouseState.MiddleButton == ButtonState.Pressed); " is 120.
Long Statement,Gonzo,InputHelper,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\InputHelper.cs,IsOldPress,The length of the statement  "		return (_lastMouseState.MiddleButton == ButtonState.Pressed && _currentMouseState.MiddleButton == ButtonState.Released); " is 120.
Long Statement,Gonzo,Resolution,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Resolution.cs,ApplyResolutionSettings,The length of the statement  "		if ((_Width <= GraphicsAdapter.DefaultAdapter.CurrentDisplayMode.Width) && (_Height <= GraphicsAdapter.DefaultAdapter.CurrentDisplayMode.Height)) { " is 147.
Long Statement,Gonzo,Resolution,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Resolution.cs,RecreateScaleMatrix,The length of the statement  "	_ScaleMatrix = Matrix.CreateScale ((float)_Device.GraphicsDevice.Viewport.Width / _VWidth' (float)_Device.GraphicsDevice.Viewport.Width / _VWidth' 1f); " is 151.
Long Statement,Gonzo,StringManager,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\StringManager.cs,Initialize,The length of the statement  "			int ID = int.Parse (System.IO.Path.GetFileName (CSTPath).Split ("_".ToCharArray ()' StringSplitOptions.RemoveEmptyEntries) [0]); " is 128.
Long Statement,Gonzo,StringManager,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\StringManager.cs,Initialize,The length of the statement  "			int ID = int.Parse (System.IO.Path.GetFileName (CSTPath).Split ("_".ToCharArray ()' StringSplitOptions.RemoveEmptyEntries) [0]); " is 128.
Long Statement,Gonzo.Dialogs,UIDialog,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\UIDialog.cs,CenterAround,The length of the statement  "	this.Position = new Vector2 (OffsetX + TopLeft.X + ((Element.Size.X - m_Size.X) / 2)' OffsetY + TopLeft.Y + ((Element.Size.Y - m_Size.Y) / 2)); " is 143.
Long Statement,Gonzo.Dialogs,UIDialog,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\UIDialog.cs,Draw,The length of the statement  "		Image.DrawTextureTo (SBatch' Image.Slicer.TCenter_Scale' Image.Slicer.TCenter' Image.Position + new Vector2 (Image.Slicer.LeftPadding' 0)' Depth); " is 146.
Long Statement,Gonzo.Dialogs,UIDialog,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\UIDialog.cs,Draw,The length of the statement  "		Image.DrawTextureTo (SBatch' null' Image.Slicer.TRight' Image.Position + new Vector2 (Image.Slicer.Width - Image.Slicer.RightPadding' 0)' Depth); " is 145.
Long Statement,Gonzo.Dialogs,UIDialog,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\UIDialog.cs,Draw,The length of the statement  "		Image.DrawTextureTo (SBatch' Image.Slicer.CLeft_Scale' Image.Slicer.CLeft' Image.Position + new Vector2 (0' Image.Slicer.TopPadding)' null); " is 140.
Long Statement,Gonzo.Dialogs,UIDialog,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\UIDialog.cs,Draw,The length of the statement  "		Image.DrawTextureTo (SBatch' Image.Slicer.CCenter_Scale' Image.Slicer.CCenter' Image.Position + new Vector2 (Image.Slicer.LeftPadding' Image.Slicer.TopPadding)' Depth); " is 168.
Long Statement,Gonzo.Dialogs,UIDialog,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\UIDialog.cs,Draw,The length of the statement  "		Image.DrawTextureTo (SBatch' Image.Slicer.CRight_Scale' Image.Slicer.CRight' Image.Position + new Vector2 (Image.Slicer.Width - Image.Slicer.RightPadding' Image.Slicer.TopPadding)' Depth); " is 188.
Long Statement,Gonzo.Dialogs,UIDialog,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\UIDialog.cs,Draw,The length of the statement  "		Image.DrawTextureTo (SBatch' Image.Slicer.BCenter_Scale' Image.Slicer.BCenter' Image.Position + new Vector2 (Image.Slicer.LeftPadding' BottomY)' Depth); " is 152.
Long Statement,Gonzo.Dialogs,UIDialog,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\UIDialog.cs,Draw,The length of the statement  "		Image.DrawTextureTo (SBatch' null' Image.Slicer.BRight' Image.Position + new Vector2 (Image.Slicer.Width - Image.Slicer.RightPadding' BottomY)' Depth); " is 151.
Long Statement,Gonzo.Dialogs,WillWrightDiag,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\WillWrightDiag.cs,Draw,The length of the statement  "		SBatch.Draw (m_WillWrightImg.Texture' m_WillWrightImg.Position' null' null' new Vector2 (0.0f' 0.0f)' 0.0f' null' Color.White' SpriteEffects.None' Depth); " is 154.
Long Statement,Gonzo.Elements,UIBodyBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIBodyBrowser.cs,Update,The length of the statement  "								EArgs.SelectedOutfit = (m_Sex == AvatarSex.Male ? m_LightAppearances [(Y * X) + m_Counter].Oft : m_LightFemaleAppearances [(Y * X) + m_Counter].Oft); " is 149.
Long Statement,Gonzo.Elements,UIBodyBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIBodyBrowser.cs,Update,The length of the statement  "								EArgs.SelectedOutfit = (m_Sex == AvatarSex.Male ? m_MediumAppearances [(X * Y) + m_Counter].Oft : m_MediumFemaleAppearances [(Y * X) + m_Counter].Oft); " is 151.
Long Statement,Gonzo.Elements,UIBodyBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIBodyBrowser.cs,Update,The length of the statement  "								EArgs.SelectedOutfit = (m_Sex == AvatarSex.Male ? m_DarkAppearances [(X * Y) + m_Counter].Oft : m_DarkFemaleAppearances [(Y * X) + m_Counter].Oft); " is 147.
Long Statement,Gonzo.Elements,UIBodyBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIBodyBrowser.cs,Draw,The length of the statement  "	SBatch.DrawString (m_Screen.Font9px' "Bodies: " + m_NumberOfBodies' new Vector2 (Position.X + (m_Size.X / 2) - m_Screen.Font9px.MeasureString ("Bodies: ").X' Position.Y + (m_Size.Y - 70))' new Color (255' 249' 157)' 0.0f' new Vector2 (0' 0)' 1.0f' SpriteEffects.None' m_Depth); " is 277.
Long Statement,Gonzo.Elements,UIBodyBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIBodyBrowser.cs,Draw,The length of the statement  "				m_Thumb = FileManager.GetTexture (m_Sex == AvatarSex.Male ? m_LightAppearances [(Y * X) + m_Counter].LightAppearance.ThumbnailID.UniqueID : m_LightFemaleAppearances [(Y * X) + m_Counter].LightAppearance.ThumbnailID.UniqueID); " is 225.
Long Statement,Gonzo.Elements,UIBodyBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIBodyBrowser.cs,Draw,The length of the statement  "				SBatch.Draw (m_SkinBtns [Y + m_Counter].BtnTex' new Rectangle ((int)(Position.X + ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)' new Rectangle ((int)m_SkinBtns [m_Counter + Y].SourcePosition.X' (int)m_SkinBtns [m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f); " is 387.
Long Statement,Gonzo.Elements,UIBodyBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIBodyBrowser.cs,Draw,The length of the statement  "				SBatch.Draw (m_Thumb' new Rectangle ((int)(Position.X + TexturePosition.X)' (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)' null' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth); " is 227.
Long Statement,Gonzo.Elements,UIBodyBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIBodyBrowser.cs,Draw,The length of the statement  "				m_Thumb = FileManager.GetTexture (m_Sex == AvatarSex.Male ? m_MediumAppearances [(Y * X) + m_Counter].MediumAppearance.ThumbnailID.UniqueID : m_MediumFemaleAppearances [(Y * X) + m_Counter].MediumAppearance.ThumbnailID.UniqueID); " is 229.
Long Statement,Gonzo.Elements,UIBodyBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIBodyBrowser.cs,Draw,The length of the statement  "				SBatch.Draw (m_SkinBtns [Y + m_Counter].BtnTex' new Rectangle ((int)(Position.X + ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)' new Rectangle ((int)m_SkinBtns [m_Counter + Y].SourcePosition.X' (int)m_SkinBtns [m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f); " is 387.
Long Statement,Gonzo.Elements,UIBodyBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIBodyBrowser.cs,Draw,The length of the statement  "				SBatch.Draw (m_Thumb' new Rectangle ((int)(Position.X + TexturePosition.X)' (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)' null' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth); " is 227.
Long Statement,Gonzo.Elements,UIBodyBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIBodyBrowser.cs,Draw,The length of the statement  "				m_Thumb = FileManager.GetTexture (m_Sex == AvatarSex.Male ? m_DarkAppearances [(Y * X) + m_Counter].DarkAppearance.ThumbnailID.UniqueID : m_DarkFemaleAppearances [(Y * X) + m_Counter].DarkAppearance.ThumbnailID.UniqueID); " is 221.
Long Statement,Gonzo.Elements,UIBodyBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIBodyBrowser.cs,Draw,The length of the statement  "				SBatch.Draw (m_SkinBtns [Y + m_Counter].BtnTex' new Rectangle ((int)(Position.X + ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)' new Rectangle ((int)m_SkinBtns [m_Counter + Y].SourcePosition.X' (int)m_SkinBtns [m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f); " is 387.
Long Statement,Gonzo.Elements,UIBodyBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIBodyBrowser.cs,Draw,The length of the statement  "				SBatch.Draw (m_Thumb' new Rectangle ((int)(Position.X + TexturePosition.X)' (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)' null' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth); " is 227.
Long Statement,Gonzo.Elements,UIHeadBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIHeadBrowser.cs,Update,The length of the statement  "								EArgs.SelectedOutfit = (m_Sex == AvatarSex.Male ? m_LightAppearances [(Y * X) + m_Counter].Oft : m_LightFemaleAppearances [(Y * X) + m_Counter].Oft); " is 149.
Long Statement,Gonzo.Elements,UIHeadBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIHeadBrowser.cs,Update,The length of the statement  "								EArgs.SelectedOutfit = (m_Sex == AvatarSex.Male ? m_MediumAppearances [(Y * X) + m_Counter].Oft : m_MediumFemaleAppearances [(Y * X) + m_Counter].Oft); " is 151.
Long Statement,Gonzo.Elements,UIHeadBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIHeadBrowser.cs,Update,The length of the statement  "								EArgs.SelectedOutfit = (m_Sex == AvatarSex.Male ? m_DarkAppearances [(Y * X) + m_Counter].Oft : m_DarkFemaleAppearances [(Y * X) + m_Counter].Oft); " is 147.
Long Statement,Gonzo.Elements,UIHeadBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIHeadBrowser.cs,Draw,The length of the statement  "	SBatch.DrawString (m_Screen.Font9px' "Heads: " + m_NumberOfHeads' new Vector2 (Position.X + (m_Size.X / 2) - m_Screen.Font9px.MeasureString ("Heads: ").X' Position.Y + (m_Size.Y - 70))' new Color (255' 249' 157)' 0.0f' new Vector2 (0' 0)' 1.0f' SpriteEffects.None' m_Depth); " is 274.
Long Statement,Gonzo.Elements,UIHeadBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIHeadBrowser.cs,Draw,The length of the statement  "				m_Thumb = FileManager.GetTexture (m_Sex == AvatarSex.Male ? m_LightAppearances [(Y * X) + m_Counter].LightAppearance.ThumbnailID.UniqueID : m_LightFemaleAppearances [(Y * X) + m_Counter].LightAppearance.ThumbnailID.UniqueID); " is 225.
Long Statement,Gonzo.Elements,UIHeadBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIHeadBrowser.cs,Draw,The length of the statement  "				SBatch.Draw (m_SkinBtns [Y + m_Counter].BtnTex' new Rectangle ((int)(Position.X + ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)' new Rectangle ((int)m_SkinBtns [m_Counter + Y].SourcePosition.X' (int)m_SkinBtns [m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f); " is 387.
Long Statement,Gonzo.Elements,UIHeadBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIHeadBrowser.cs,Draw,The length of the statement  "				SBatch.Draw (m_Thumb' new Rectangle ((int)(Position.X + TexturePosition.X)' (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)' null' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth); " is 227.
Long Statement,Gonzo.Elements,UIHeadBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIHeadBrowser.cs,Draw,The length of the statement  "				m_Thumb = FileManager.GetTexture (m_Sex == AvatarSex.Male ? m_MediumAppearances [(Y * X) + m_Counter].MediumAppearance.ThumbnailID.UniqueID : m_MediumFemaleAppearances [(Y * X) + m_Counter].MediumAppearance.ThumbnailID.UniqueID); " is 229.
Long Statement,Gonzo.Elements,UIHeadBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIHeadBrowser.cs,Draw,The length of the statement  "				SBatch.Draw (m_SkinBtns [Y + m_Counter].BtnTex' new Rectangle ((int)(Position.X + ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)' new Rectangle ((int)m_SkinBtns [m_Counter + Y].SourcePosition.X' (int)m_SkinBtns [m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f); " is 387.
Long Statement,Gonzo.Elements,UIHeadBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIHeadBrowser.cs,Draw,The length of the statement  "				SBatch.Draw (m_Thumb' new Rectangle ((int)(Position.X + TexturePosition.X)' (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)' null' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth); " is 227.
Long Statement,Gonzo.Elements,UIHeadBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIHeadBrowser.cs,Draw,The length of the statement  "				m_Thumb = FileManager.GetTexture (m_Sex == AvatarSex.Male ? m_DarkAppearances [(Y * X) + m_Counter].DarkAppearance.ThumbnailID.UniqueID : m_DarkFemaleAppearances [(Y * X) + m_Counter].DarkAppearance.ThumbnailID.UniqueID); " is 221.
Long Statement,Gonzo.Elements,UIHeadBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIHeadBrowser.cs,Draw,The length of the statement  "				SBatch.Draw (m_SkinBtns [Y + m_Counter].BtnTex' new Rectangle ((int)(Position.X + ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)' new Rectangle ((int)m_SkinBtns [m_Counter + Y].SourcePosition.X' (int)m_SkinBtns [m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f); " is 387.
Long Statement,Gonzo.Elements,UIHeadBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIHeadBrowser.cs,Draw,The length of the statement  "				SBatch.Draw (m_Thumb' new Rectangle ((int)(Position.X + TexturePosition.X)' (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)' null' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth); " is 227.
Long Statement,Gonzo.Elements,UIButton,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,DrawBorder,The length of the statement  "	SBatch.Draw (pixel' new Rectangle (rectangleToDraw.X' rectangleToDraw.Y' rectangleToDraw.Width' thicknessOfBorder)' borderColor); " is 129.
Long Statement,Gonzo.Elements,UIButton,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,DrawBorder,The length of the statement  "	SBatch.Draw (pixel' new Rectangle (rectangleToDraw.X' rectangleToDraw.Y' thicknessOfBorder' rectangleToDraw.Height)' borderColor); " is 130.
Long Statement,Gonzo.Elements,UIButton,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,DrawBorder,The length of the statement  "	SBatch.Draw (pixel' new Rectangle ((rectangleToDraw.X + rectangleToDraw.Width - thicknessOfBorder)' rectangleToDraw.Y' thicknessOfBorder' rectangleToDraw.Height)' borderColor); " is 176.
Long Statement,Gonzo.Elements,UIButton,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,DrawBorder,The length of the statement  "	SBatch.Draw (pixel' new Rectangle (rectangleToDraw.X' rectangleToDraw.Y + rectangleToDraw.Height - thicknessOfBorder' rectangleToDraw.Width' thicknessOfBorder)' borderColor); " is 174.
Long Statement,Gonzo.Elements,UIButton,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,Draw,The length of the statement  "			Image.Draw (SBatch' new Rectangle ((int)m_SourcePosition.X' (int)m_SourcePosition.Y' (int)m_Size.X' (int)m_Size.Y)' Depth' new Vector2 (m_XScale' 1.0f)); " is 153.
Long Statement,Gonzo.Elements,UIButton,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,Draw,The length of the statement  "			SBatch.DrawString (m_Font' m_Text' m_TextPosition' TextDrawingColor' 0.0f' new Vector2 (0.0f' 0.0f)' 1.0f' SpriteEffects.None' Depth); " is 134.
Long Statement,Gonzo.Elements,UIElement,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIElement.cs,PixelCheck,The length of the statement  "	if (pixelPosition.X >= 0 && pixelPosition.X < Width && pixelPosition.Y >= 0 && pixelPosition.Y < Image.Texture.Height) { " is 120.
Long Statement,Gonzo.Elements,UIImage,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIImage.cs,Draw,The length of the statement  "			SBatch.Draw (Texture' Position' null' SourceRect' new Vector2 (0.0f' 0.0f)' 0.0f' null' Color.White' SpriteEffects.None' Depth); " is 128.
Long Statement,Gonzo.Elements,UIImage,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIImage.cs,Draw,The length of the statement  "			SBatch.Draw (Texture' Position' null' null' new Vector2 (0.0f' 0.0f)' 0.0f' null' Color.White' SpriteEffects.None' Depth); " is 122.
Long Statement,Gonzo.Elements,UIImage,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIImage.cs,Draw,The length of the statement  "			SBatch.Draw (Texture' Position' null' SourceRect' new Vector2 (0.0f' 0.0f)' 0.0f' Scale' Color.White' SpriteEffects.None' Depth); " is 129.
Long Statement,Gonzo.Elements,UIImage,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIImage.cs,Draw,The length of the statement  "			SBatch.Draw (Texture' Position' null' null' new Vector2 (0.0f' 0.0f)' 0.0f' Scale' Color.White' SpriteEffects.None' Depth); " is 123.
Long Statement,Gonzo.Elements,NineSlicer,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIImage.cs,ReScale,The length of the statement  "	CCenter_Scale = new Vector2 ((width - (LeftPadding + RightPadding)) / (CCenter.Width)' (height - (TopPadding + BottomPadding)) / (CCenter.Height)); " is 147.
Long Statement,Gonzo.Elements,UILabel,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UILabel.cs,Draw,The length of the statement  "			SBatch.DrawString (m_Font' Caption' Position' m_TextColor' 0.0f' new Vector2 (0.0f' 0.0f)' 1.0f' SpriteEffects.None' Depth); " is 124.
Long Statement,Gonzo.Elements,UITextEdit,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UITextEdit.cs,Manager_OnTextInput,The length of the statement  "				if ((m_Font.MeasureString (m_Lines [m_Cursor.LineIndex].SBuilder.ToString ()).X >= m_Size.X) && !m_RemovingTxt && !m_MovingCursor) { " is 132.
Long Statement,Gonzo.Elements,UITextEdit,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UITextEdit.cs,Manager_OnTextInput,The length of the statement  "				if (m_Font.MeasureString (CurrentInput).X >= (m_Size.X - m_Font.MeasureString (e.Character.ToString ()).X) && !m_RemovingTxt) { " is 127.
Long Statement,Gonzo.Elements,UITextEdit,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UITextEdit.cs,Manager_OnTextInput,The length of the statement  "					m_Lines [m_Cursor.LineIndex].SBuilder [m_Cursor.CharacterIndex] = e.Character.ToString ().ToUpper ().ToCharArray () [0]; " is 120.
Long Statement,Gonzo.Elements,UITextEdit,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UITextEdit.cs,Update,The length of the statement  "		m_VerticalTextBoundary = (int)(Position.X + m_Font.MeasureString (m_Lines [m_Cursor.LineIndex].SBuilder.ToString ()).X); " is 120.
Long Statement,Gonzo.Elements,UITextEdit,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UITextEdit.cs,Update,The length of the statement  "								if (m_Lines [m_Cursor.LineIndex].SBuilder.Length > 0 && m_Cursor.CharacterIndex < m_Lines [m_Cursor.LineIndex].SBuilder.Length) { " is 129.
Long Statement,Gonzo.Elements,UITextEdit,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UITextEdit.cs,Draw,The length of the statement  "			Image.DrawTextureTo (SBatch' Image.Slicer.TCenter_Scale' Image.Slicer.TCenter' Image.Position + new Vector2 (Image.Slicer.LeftPadding' 0)' Depth); " is 146.
Long Statement,Gonzo.Elements,UITextEdit,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UITextEdit.cs,Draw,The length of the statement  "			Image.DrawTextureTo (SBatch' null' Image.Slicer.TRight' Image.Position + new Vector2 (Image.Slicer.Width - Image.Slicer.RightPadding' 0)' Depth); " is 145.
Long Statement,Gonzo.Elements,UITextEdit,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UITextEdit.cs,Draw,The length of the statement  "			Image.DrawTextureTo (SBatch' Image.Slicer.CLeft_Scale' Image.Slicer.CLeft' Image.Position + new Vector2 (0' Image.Slicer.TopPadding)' null); " is 140.
Long Statement,Gonzo.Elements,UITextEdit,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UITextEdit.cs,Draw,The length of the statement  "			Image.DrawTextureTo (SBatch' Image.Slicer.CCenter_Scale' Image.Slicer.CCenter' Image.Position + new Vector2 (Image.Slicer.LeftPadding' Image.Slicer.TopPadding)' Depth); " is 168.
Long Statement,Gonzo.Elements,UITextEdit,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UITextEdit.cs,Draw,The length of the statement  "			Image.DrawTextureTo (SBatch' Image.Slicer.CRight_Scale' Image.Slicer.CRight' Image.Position + new Vector2 (Image.Slicer.Width - Image.Slicer.RightPadding' Image.Slicer.TopPadding)' Depth); " is 188.
Long Statement,Gonzo.Elements,UITextEdit,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UITextEdit.cs,Draw,The length of the statement  "			Image.DrawTextureTo (SBatch' Image.Slicer.BCenter_Scale' Image.Slicer.BCenter' Image.Position + new Vector2 (Image.Slicer.LeftPadding' BottomY)' Depth); " is 152.
Long Statement,Gonzo.Elements,UITextEdit,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UITextEdit.cs,Draw,The length of the statement  "			Image.DrawTextureTo (SBatch' null' Image.Slicer.BRight' Image.Position + new Vector2 (Image.Slicer.Width - Image.Slicer.RightPadding' BottomY)' Depth); " is 151.
Long Statement,Gonzo.Elements,UITextEdit,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UITextEdit.cs,Draw,The length of the statement  "			SBatch.Draw (m_ScrollbarImage' new Vector2 (m_Size.X - m_ScrollbarWidth' 0)' null' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' new Vector2 (0.0f' m_ScrollbarHeight)' SpriteEffects.None' Depth); " is 194.
Long Statement,Gonzo.Elements,UITextEdit,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UITextEdit.cs,Draw,The length of the statement  "				SBatch.DrawString (m_Font' Txt.SBuilder.ToString ()' new Vector2 (Txt.Position.X' Txt.Position.Y)' TextColor' 0.0f' new Vector2 (0.0f' 0.0f)' 1.0f' SpriteEffects.None' Depth + 0.1f); " is 182.
Long Statement,Gonzo.Elements,UITextEdit,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UITextEdit.cs,Draw,The length of the statement  "				SBatch.DrawString (m_Font' " " + m_Cursor.Cursor' new Vector2 (m_Cursor.Position.X' m_Cursor.Position.Y)' TextColor' 0.0f' new Vector2 (0.0f' 0.0f)' 1.0f' SpriteEffects.None' Depth + 0.1f); " is 189.
Complex Conditional,Gonzo.Elements,UIElement,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIElement.cs,PixelCheck,The conditional expression  "pixelPosition.X >= 0 && pixelPosition.X < Width && pixelPosition.Y >= 0 && pixelPosition.Y < Image.Texture.Height"  is complex.
Magic Number,Gonzo,Resolution,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Resolution.cs,ResetViewport,The following statement contains a magic number: viewport.X = (_Device.PreferredBackBufferWidth / 2) - (width / 2);  
Magic Number,Gonzo,Resolution,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Resolution.cs,ResetViewport,The following statement contains a magic number: viewport.X = (_Device.PreferredBackBufferWidth / 2) - (width / 2);  
Magic Number,Gonzo,Resolution,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Resolution.cs,ResetViewport,The following statement contains a magic number: viewport.Y = (_Device.PreferredBackBufferHeight / 2) - (height / 2);  
Magic Number,Gonzo,Resolution,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Resolution.cs,ResetViewport,The following statement contains a magic number: viewport.Y = (_Device.PreferredBackBufferHeight / 2) - (height / 2);  
Magic Number,Gonzo,TreeWalker,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\TreeWalker.cs,WalkTree,The following statement contains a magic number: switch (NType) {  case NodeType.DefineImage:  	//Defines an image and loads a texture for it.  	DefineImageNode ImgNode = (DefineImageNode)UINode.GetNode (node);  	UIImage Img = new UIImage (ImgNode' m_Screen);  	Result.Elements.Add (ImgNode.Name' Img);  	break;  case NodeType.DefineString:  	//Defines a string with a name.  	DefineStringNode StrNode = (DefineStringNode)UINode.GetNode (node);  	Result.Strings.Add (StrNode.Name' StringManager.StrTable (State.CurrentStringTable) [StrNode.StrIndex]);  	break;  case NodeType.AddButton:  	//Defines a button.  	AddButtonNode ButtonNode = (AddButtonNode)UINode.GetNode (node);  	UIButton Btn = new UIButton (ButtonNode' Result' m_Screen);  	Result.Elements.Add (ButtonNode.Name' Btn);  	break;  case NodeType.AddText:  	AddTextNode TextNode = (AddTextNode)UINode.GetNode (node);  	UILabel Lbl = new UILabel (TextNode' Result' m_Screen);  	Result.Elements.Add (TextNode.Name' Lbl);  	break;  case NodeType.AddTextEdit:  	AddTextEditNode TextEditNode = (AddTextEditNode)UINode.GetNode (node);  	UITextEdit Txt = new UITextEdit (TextEditNode' State' m_Screen);  	Result.Elements.Add (TextEditNode.Name' Txt);  	break;  case NodeType.AddSlider:  	AddSliderNode SliderNode = (AddSliderNode)UINode.GetNode (node);  	UISlider Slider = new UISlider (SliderNode' State' m_Screen);  	Result.Elements.Add (SliderNode.Name' Slider);  	break;  case NodeType.SetSharedProperties:  	//Assigns a bunch of shared properties to declarations following the statement.  	State.InSharedPropertiesGroup = true;  	SetSharedPropsNode SharedPropsNode = (SetSharedPropsNode)UINode.GetNode (node);  	if (SharedPropsNode.StringTable != null)  		State.CurrentStringTable = (int)SharedPropsNode.StringTable;  	if (SharedPropsNode.ControlPosition != null) {  		State.Position [0] = SharedPropsNode.ControlPosition.Numbers [0];  		State.Position [1] = SharedPropsNode.ControlPosition.Numbers [1];  		break;  	}  	if (SharedPropsNode.Color != null) {  		State.Color = new Color ();  		State.Color.R = (byte)SharedPropsNode.Color.Numbers [0];  		State.Color.G = (byte)SharedPropsNode.Color.Numbers [1];  		State.Color.B = (byte)SharedPropsNode.Color.Numbers [2];  	}  	if (SharedPropsNode.TextColor != null) {  		State.TextColor = new Color ();  		State.TextColor.R = (byte)SharedPropsNode.TextColor.Numbers [0];  		State.TextColor.G = (byte)SharedPropsNode.TextColor.Numbers [1];  		State.TextColor.B = (byte)SharedPropsNode.TextColor.Numbers [2];  	}  	if (SharedPropsNode.TextColorSelected != null) {  		State.TextColorSelected = new Color ();  		State.TextColorSelected.R = (byte)SharedPropsNode.TextColorSelected.Numbers [0];  		State.TextColorSelected.G = (byte)SharedPropsNode.TextColorSelected.Numbers [1];  		State.TextColorSelected.B = (byte)SharedPropsNode.TextColorSelected.Numbers [2];  	}  	if (SharedPropsNode.TextColorHighlighted != null) {  		State.TextColorHighlighted = new Color ();  		State.TextColorHighlighted.R = (byte)SharedPropsNode.TextColorHighlighted.Numbers [0];  		State.TextColorHighlighted.G = (byte)SharedPropsNode.TextColorHighlighted.Numbers [1];  		State.TextColorHighlighted.B = (byte)SharedPropsNode.TextColorHighlighted.Numbers [2];  	}  	if (SharedPropsNode.TextColorDisabled != null) {  		State.TextColorDisabled = new Color ();  		State.TextColorDisabled.R = (byte)SharedPropsNode.TextColorDisabled.Numbers [0];  		State.TextColorDisabled.G = (byte)SharedPropsNode.TextColorDisabled.Numbers [1];  		State.TextColorDisabled.B = (byte)SharedPropsNode.TextColorDisabled.Numbers [2];  	}  	if (SharedPropsNode.BackColor != null) {  		State.BackColor = new Color ();  		State.BackColor.R = (byte)SharedPropsNode.BackColor.Numbers [0];  		State.BackColor.G = (byte)SharedPropsNode.BackColor.Numbers [1];  		State.BackColor.B = (byte)SharedPropsNode.BackColor.Numbers [2];  	}  	if (SharedPropsNode.CursorColor != null) {  		State.CursorColor = new Color ();  		State.CursorColor.R = (byte)SharedPropsNode.CursorColor.Numbers [0];  		State.CursorColor.G = (byte)SharedPropsNode.CursorColor.Numbers [1];  		State.CursorColor.B = (byte)SharedPropsNode.CursorColor.Numbers [2];  	}  	if (SharedPropsNode.TextButton)  		State.TextButton = true;  	if (SharedPropsNode.Opaque != null)  		State.IsOpaque = (SharedPropsNode.Opaque == 1) ? true : false;  	if (SharedPropsNode.Transparent != null)  		State.IsTransparent = (SharedPropsNode.Transparent == 1) ? true : false;  	if (SharedPropsNode.Alignment != null)  		State.Alignment = (int)SharedPropsNode.Alignment;  	if (SharedPropsNode.Image != "")  		State.Image = SharedPropsNode.Image;  	if (SharedPropsNode.Tooltip != "")  		State.Tooltip = SharedPropsNode.Tooltip;  	if (SharedPropsNode.Text != "")  		State.Caption = SharedPropsNode.Text;  	if (SharedPropsNode.Size != null)  		State.Size = new Vector2 (SharedPropsNode.Size.Numbers [0]' SharedPropsNode.Size.Numbers [1]);  	if (SharedPropsNode.Orientation != null)  		State.Orientation = (int)SharedPropsNode.Orientation;  	if (SharedPropsNode.Font != null)  		State.Font = (int)SharedPropsNode.Font;  	if (SharedPropsNode.Opaque != null)  		State.Opaque = (int)SharedPropsNode.Opaque;  	break;  case NodeType.SetControlProperties:  	//Sets a bunch of properties to a specified control.  	SetControlPropsNode ControlPropsNode = (SetControlPropsNode)UINode.GetNode (node);  	UIControl Ctrl = new UIControl (ControlPropsNode' m_Screen' State);  	Result.Controls.Add (ControlPropsNode.Control' Ctrl);  	if (State.InSharedPropertiesGroup) {  		UIElement Test = new UIElement (m_Screen' null);  		//Script implicitly created an object... :\  		if (!Result.Elements.TryGetValue (ControlPropsNode.Control' out Test)) {  			Result.Elements.Add (ControlPropsNode.Control' new UIElement (m_Screen' null));  			if (Ctrl.Image != null)  				Result.Elements [ControlPropsNode.Control].Image = new UIImage (Ctrl.Image);  			Result.Elements [ControlPropsNode.Control].Position = Ctrl.Position;  		}  	}  	break;  case NodeType.End:  	State.InSharedPropertiesGroup = false;  	State.Image = "";  	//Reset  	State.TextButton = false;  	//Reset   	State.Color = new Color ();  	State.Caption = "";  	State.Size = new Vector2 (0' 0);  	State.Alignment = 0;  	State.Font = 0;  	//TODO: Reset more?  	break;  }  
Magic Number,Gonzo,TreeWalker,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\TreeWalker.cs,WalkTree,The following statement contains a magic number: switch (NType) {  case NodeType.DefineImage:  	//Defines an image and loads a texture for it.  	DefineImageNode ImgNode = (DefineImageNode)UINode.GetNode (node);  	UIImage Img = new UIImage (ImgNode' m_Screen);  	Result.Elements.Add (ImgNode.Name' Img);  	break;  case NodeType.DefineString:  	//Defines a string with a name.  	DefineStringNode StrNode = (DefineStringNode)UINode.GetNode (node);  	Result.Strings.Add (StrNode.Name' StringManager.StrTable (State.CurrentStringTable) [StrNode.StrIndex]);  	break;  case NodeType.AddButton:  	//Defines a button.  	AddButtonNode ButtonNode = (AddButtonNode)UINode.GetNode (node);  	UIButton Btn = new UIButton (ButtonNode' Result' m_Screen);  	Result.Elements.Add (ButtonNode.Name' Btn);  	break;  case NodeType.AddText:  	AddTextNode TextNode = (AddTextNode)UINode.GetNode (node);  	UILabel Lbl = new UILabel (TextNode' Result' m_Screen);  	Result.Elements.Add (TextNode.Name' Lbl);  	break;  case NodeType.AddTextEdit:  	AddTextEditNode TextEditNode = (AddTextEditNode)UINode.GetNode (node);  	UITextEdit Txt = new UITextEdit (TextEditNode' State' m_Screen);  	Result.Elements.Add (TextEditNode.Name' Txt);  	break;  case NodeType.AddSlider:  	AddSliderNode SliderNode = (AddSliderNode)UINode.GetNode (node);  	UISlider Slider = new UISlider (SliderNode' State' m_Screen);  	Result.Elements.Add (SliderNode.Name' Slider);  	break;  case NodeType.SetSharedProperties:  	//Assigns a bunch of shared properties to declarations following the statement.  	State.InSharedPropertiesGroup = true;  	SetSharedPropsNode SharedPropsNode = (SetSharedPropsNode)UINode.GetNode (node);  	if (SharedPropsNode.StringTable != null)  		State.CurrentStringTable = (int)SharedPropsNode.StringTable;  	if (SharedPropsNode.ControlPosition != null) {  		State.Position [0] = SharedPropsNode.ControlPosition.Numbers [0];  		State.Position [1] = SharedPropsNode.ControlPosition.Numbers [1];  		break;  	}  	if (SharedPropsNode.Color != null) {  		State.Color = new Color ();  		State.Color.R = (byte)SharedPropsNode.Color.Numbers [0];  		State.Color.G = (byte)SharedPropsNode.Color.Numbers [1];  		State.Color.B = (byte)SharedPropsNode.Color.Numbers [2];  	}  	if (SharedPropsNode.TextColor != null) {  		State.TextColor = new Color ();  		State.TextColor.R = (byte)SharedPropsNode.TextColor.Numbers [0];  		State.TextColor.G = (byte)SharedPropsNode.TextColor.Numbers [1];  		State.TextColor.B = (byte)SharedPropsNode.TextColor.Numbers [2];  	}  	if (SharedPropsNode.TextColorSelected != null) {  		State.TextColorSelected = new Color ();  		State.TextColorSelected.R = (byte)SharedPropsNode.TextColorSelected.Numbers [0];  		State.TextColorSelected.G = (byte)SharedPropsNode.TextColorSelected.Numbers [1];  		State.TextColorSelected.B = (byte)SharedPropsNode.TextColorSelected.Numbers [2];  	}  	if (SharedPropsNode.TextColorHighlighted != null) {  		State.TextColorHighlighted = new Color ();  		State.TextColorHighlighted.R = (byte)SharedPropsNode.TextColorHighlighted.Numbers [0];  		State.TextColorHighlighted.G = (byte)SharedPropsNode.TextColorHighlighted.Numbers [1];  		State.TextColorHighlighted.B = (byte)SharedPropsNode.TextColorHighlighted.Numbers [2];  	}  	if (SharedPropsNode.TextColorDisabled != null) {  		State.TextColorDisabled = new Color ();  		State.TextColorDisabled.R = (byte)SharedPropsNode.TextColorDisabled.Numbers [0];  		State.TextColorDisabled.G = (byte)SharedPropsNode.TextColorDisabled.Numbers [1];  		State.TextColorDisabled.B = (byte)SharedPropsNode.TextColorDisabled.Numbers [2];  	}  	if (SharedPropsNode.BackColor != null) {  		State.BackColor = new Color ();  		State.BackColor.R = (byte)SharedPropsNode.BackColor.Numbers [0];  		State.BackColor.G = (byte)SharedPropsNode.BackColor.Numbers [1];  		State.BackColor.B = (byte)SharedPropsNode.BackColor.Numbers [2];  	}  	if (SharedPropsNode.CursorColor != null) {  		State.CursorColor = new Color ();  		State.CursorColor.R = (byte)SharedPropsNode.CursorColor.Numbers [0];  		State.CursorColor.G = (byte)SharedPropsNode.CursorColor.Numbers [1];  		State.CursorColor.B = (byte)SharedPropsNode.CursorColor.Numbers [2];  	}  	if (SharedPropsNode.TextButton)  		State.TextButton = true;  	if (SharedPropsNode.Opaque != null)  		State.IsOpaque = (SharedPropsNode.Opaque == 1) ? true : false;  	if (SharedPropsNode.Transparent != null)  		State.IsTransparent = (SharedPropsNode.Transparent == 1) ? true : false;  	if (SharedPropsNode.Alignment != null)  		State.Alignment = (int)SharedPropsNode.Alignment;  	if (SharedPropsNode.Image != "")  		State.Image = SharedPropsNode.Image;  	if (SharedPropsNode.Tooltip != "")  		State.Tooltip = SharedPropsNode.Tooltip;  	if (SharedPropsNode.Text != "")  		State.Caption = SharedPropsNode.Text;  	if (SharedPropsNode.Size != null)  		State.Size = new Vector2 (SharedPropsNode.Size.Numbers [0]' SharedPropsNode.Size.Numbers [1]);  	if (SharedPropsNode.Orientation != null)  		State.Orientation = (int)SharedPropsNode.Orientation;  	if (SharedPropsNode.Font != null)  		State.Font = (int)SharedPropsNode.Font;  	if (SharedPropsNode.Opaque != null)  		State.Opaque = (int)SharedPropsNode.Opaque;  	break;  case NodeType.SetControlProperties:  	//Sets a bunch of properties to a specified control.  	SetControlPropsNode ControlPropsNode = (SetControlPropsNode)UINode.GetNode (node);  	UIControl Ctrl = new UIControl (ControlPropsNode' m_Screen' State);  	Result.Controls.Add (ControlPropsNode.Control' Ctrl);  	if (State.InSharedPropertiesGroup) {  		UIElement Test = new UIElement (m_Screen' null);  		//Script implicitly created an object... :\  		if (!Result.Elements.TryGetValue (ControlPropsNode.Control' out Test)) {  			Result.Elements.Add (ControlPropsNode.Control' new UIElement (m_Screen' null));  			if (Ctrl.Image != null)  				Result.Elements [ControlPropsNode.Control].Image = new UIImage (Ctrl.Image);  			Result.Elements [ControlPropsNode.Control].Position = Ctrl.Position;  		}  	}  	break;  case NodeType.End:  	State.InSharedPropertiesGroup = false;  	State.Image = "";  	//Reset  	State.TextButton = false;  	//Reset   	State.Color = new Color ();  	State.Caption = "";  	State.Size = new Vector2 (0' 0);  	State.Alignment = 0;  	State.Font = 0;  	//TODO: Reset more?  	break;  }  
Magic Number,Gonzo,TreeWalker,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\TreeWalker.cs,WalkTree,The following statement contains a magic number: switch (NType) {  case NodeType.DefineImage:  	//Defines an image and loads a texture for it.  	DefineImageNode ImgNode = (DefineImageNode)UINode.GetNode (node);  	UIImage Img = new UIImage (ImgNode' m_Screen);  	Result.Elements.Add (ImgNode.Name' Img);  	break;  case NodeType.DefineString:  	//Defines a string with a name.  	DefineStringNode StrNode = (DefineStringNode)UINode.GetNode (node);  	Result.Strings.Add (StrNode.Name' StringManager.StrTable (State.CurrentStringTable) [StrNode.StrIndex]);  	break;  case NodeType.AddButton:  	//Defines a button.  	AddButtonNode ButtonNode = (AddButtonNode)UINode.GetNode (node);  	UIButton Btn = new UIButton (ButtonNode' Result' m_Screen);  	Result.Elements.Add (ButtonNode.Name' Btn);  	break;  case NodeType.AddText:  	AddTextNode TextNode = (AddTextNode)UINode.GetNode (node);  	UILabel Lbl = new UILabel (TextNode' Result' m_Screen);  	Result.Elements.Add (TextNode.Name' Lbl);  	break;  case NodeType.AddTextEdit:  	AddTextEditNode TextEditNode = (AddTextEditNode)UINode.GetNode (node);  	UITextEdit Txt = new UITextEdit (TextEditNode' State' m_Screen);  	Result.Elements.Add (TextEditNode.Name' Txt);  	break;  case NodeType.AddSlider:  	AddSliderNode SliderNode = (AddSliderNode)UINode.GetNode (node);  	UISlider Slider = new UISlider (SliderNode' State' m_Screen);  	Result.Elements.Add (SliderNode.Name' Slider);  	break;  case NodeType.SetSharedProperties:  	//Assigns a bunch of shared properties to declarations following the statement.  	State.InSharedPropertiesGroup = true;  	SetSharedPropsNode SharedPropsNode = (SetSharedPropsNode)UINode.GetNode (node);  	if (SharedPropsNode.StringTable != null)  		State.CurrentStringTable = (int)SharedPropsNode.StringTable;  	if (SharedPropsNode.ControlPosition != null) {  		State.Position [0] = SharedPropsNode.ControlPosition.Numbers [0];  		State.Position [1] = SharedPropsNode.ControlPosition.Numbers [1];  		break;  	}  	if (SharedPropsNode.Color != null) {  		State.Color = new Color ();  		State.Color.R = (byte)SharedPropsNode.Color.Numbers [0];  		State.Color.G = (byte)SharedPropsNode.Color.Numbers [1];  		State.Color.B = (byte)SharedPropsNode.Color.Numbers [2];  	}  	if (SharedPropsNode.TextColor != null) {  		State.TextColor = new Color ();  		State.TextColor.R = (byte)SharedPropsNode.TextColor.Numbers [0];  		State.TextColor.G = (byte)SharedPropsNode.TextColor.Numbers [1];  		State.TextColor.B = (byte)SharedPropsNode.TextColor.Numbers [2];  	}  	if (SharedPropsNode.TextColorSelected != null) {  		State.TextColorSelected = new Color ();  		State.TextColorSelected.R = (byte)SharedPropsNode.TextColorSelected.Numbers [0];  		State.TextColorSelected.G = (byte)SharedPropsNode.TextColorSelected.Numbers [1];  		State.TextColorSelected.B = (byte)SharedPropsNode.TextColorSelected.Numbers [2];  	}  	if (SharedPropsNode.TextColorHighlighted != null) {  		State.TextColorHighlighted = new Color ();  		State.TextColorHighlighted.R = (byte)SharedPropsNode.TextColorHighlighted.Numbers [0];  		State.TextColorHighlighted.G = (byte)SharedPropsNode.TextColorHighlighted.Numbers [1];  		State.TextColorHighlighted.B = (byte)SharedPropsNode.TextColorHighlighted.Numbers [2];  	}  	if (SharedPropsNode.TextColorDisabled != null) {  		State.TextColorDisabled = new Color ();  		State.TextColorDisabled.R = (byte)SharedPropsNode.TextColorDisabled.Numbers [0];  		State.TextColorDisabled.G = (byte)SharedPropsNode.TextColorDisabled.Numbers [1];  		State.TextColorDisabled.B = (byte)SharedPropsNode.TextColorDisabled.Numbers [2];  	}  	if (SharedPropsNode.BackColor != null) {  		State.BackColor = new Color ();  		State.BackColor.R = (byte)SharedPropsNode.BackColor.Numbers [0];  		State.BackColor.G = (byte)SharedPropsNode.BackColor.Numbers [1];  		State.BackColor.B = (byte)SharedPropsNode.BackColor.Numbers [2];  	}  	if (SharedPropsNode.CursorColor != null) {  		State.CursorColor = new Color ();  		State.CursorColor.R = (byte)SharedPropsNode.CursorColor.Numbers [0];  		State.CursorColor.G = (byte)SharedPropsNode.CursorColor.Numbers [1];  		State.CursorColor.B = (byte)SharedPropsNode.CursorColor.Numbers [2];  	}  	if (SharedPropsNode.TextButton)  		State.TextButton = true;  	if (SharedPropsNode.Opaque != null)  		State.IsOpaque = (SharedPropsNode.Opaque == 1) ? true : false;  	if (SharedPropsNode.Transparent != null)  		State.IsTransparent = (SharedPropsNode.Transparent == 1) ? true : false;  	if (SharedPropsNode.Alignment != null)  		State.Alignment = (int)SharedPropsNode.Alignment;  	if (SharedPropsNode.Image != "")  		State.Image = SharedPropsNode.Image;  	if (SharedPropsNode.Tooltip != "")  		State.Tooltip = SharedPropsNode.Tooltip;  	if (SharedPropsNode.Text != "")  		State.Caption = SharedPropsNode.Text;  	if (SharedPropsNode.Size != null)  		State.Size = new Vector2 (SharedPropsNode.Size.Numbers [0]' SharedPropsNode.Size.Numbers [1]);  	if (SharedPropsNode.Orientation != null)  		State.Orientation = (int)SharedPropsNode.Orientation;  	if (SharedPropsNode.Font != null)  		State.Font = (int)SharedPropsNode.Font;  	if (SharedPropsNode.Opaque != null)  		State.Opaque = (int)SharedPropsNode.Opaque;  	break;  case NodeType.SetControlProperties:  	//Sets a bunch of properties to a specified control.  	SetControlPropsNode ControlPropsNode = (SetControlPropsNode)UINode.GetNode (node);  	UIControl Ctrl = new UIControl (ControlPropsNode' m_Screen' State);  	Result.Controls.Add (ControlPropsNode.Control' Ctrl);  	if (State.InSharedPropertiesGroup) {  		UIElement Test = new UIElement (m_Screen' null);  		//Script implicitly created an object... :\  		if (!Result.Elements.TryGetValue (ControlPropsNode.Control' out Test)) {  			Result.Elements.Add (ControlPropsNode.Control' new UIElement (m_Screen' null));  			if (Ctrl.Image != null)  				Result.Elements [ControlPropsNode.Control].Image = new UIImage (Ctrl.Image);  			Result.Elements [ControlPropsNode.Control].Position = Ctrl.Position;  		}  	}  	break;  case NodeType.End:  	State.InSharedPropertiesGroup = false;  	State.Image = "";  	//Reset  	State.TextButton = false;  	//Reset   	State.Color = new Color ();  	State.Caption = "";  	State.Size = new Vector2 (0' 0);  	State.Alignment = 0;  	State.Font = 0;  	//TODO: Reset more?  	break;  }  
Magic Number,Gonzo,TreeWalker,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\TreeWalker.cs,WalkTree,The following statement contains a magic number: switch (NType) {  case NodeType.DefineImage:  	//Defines an image and loads a texture for it.  	DefineImageNode ImgNode = (DefineImageNode)UINode.GetNode (node);  	UIImage Img = new UIImage (ImgNode' m_Screen);  	Result.Elements.Add (ImgNode.Name' Img);  	break;  case NodeType.DefineString:  	//Defines a string with a name.  	DefineStringNode StrNode = (DefineStringNode)UINode.GetNode (node);  	Result.Strings.Add (StrNode.Name' StringManager.StrTable (State.CurrentStringTable) [StrNode.StrIndex]);  	break;  case NodeType.AddButton:  	//Defines a button.  	AddButtonNode ButtonNode = (AddButtonNode)UINode.GetNode (node);  	UIButton Btn = new UIButton (ButtonNode' Result' m_Screen);  	Result.Elements.Add (ButtonNode.Name' Btn);  	break;  case NodeType.AddText:  	AddTextNode TextNode = (AddTextNode)UINode.GetNode (node);  	UILabel Lbl = new UILabel (TextNode' Result' m_Screen);  	Result.Elements.Add (TextNode.Name' Lbl);  	break;  case NodeType.AddTextEdit:  	AddTextEditNode TextEditNode = (AddTextEditNode)UINode.GetNode (node);  	UITextEdit Txt = new UITextEdit (TextEditNode' State' m_Screen);  	Result.Elements.Add (TextEditNode.Name' Txt);  	break;  case NodeType.AddSlider:  	AddSliderNode SliderNode = (AddSliderNode)UINode.GetNode (node);  	UISlider Slider = new UISlider (SliderNode' State' m_Screen);  	Result.Elements.Add (SliderNode.Name' Slider);  	break;  case NodeType.SetSharedProperties:  	//Assigns a bunch of shared properties to declarations following the statement.  	State.InSharedPropertiesGroup = true;  	SetSharedPropsNode SharedPropsNode = (SetSharedPropsNode)UINode.GetNode (node);  	if (SharedPropsNode.StringTable != null)  		State.CurrentStringTable = (int)SharedPropsNode.StringTable;  	if (SharedPropsNode.ControlPosition != null) {  		State.Position [0] = SharedPropsNode.ControlPosition.Numbers [0];  		State.Position [1] = SharedPropsNode.ControlPosition.Numbers [1];  		break;  	}  	if (SharedPropsNode.Color != null) {  		State.Color = new Color ();  		State.Color.R = (byte)SharedPropsNode.Color.Numbers [0];  		State.Color.G = (byte)SharedPropsNode.Color.Numbers [1];  		State.Color.B = (byte)SharedPropsNode.Color.Numbers [2];  	}  	if (SharedPropsNode.TextColor != null) {  		State.TextColor = new Color ();  		State.TextColor.R = (byte)SharedPropsNode.TextColor.Numbers [0];  		State.TextColor.G = (byte)SharedPropsNode.TextColor.Numbers [1];  		State.TextColor.B = (byte)SharedPropsNode.TextColor.Numbers [2];  	}  	if (SharedPropsNode.TextColorSelected != null) {  		State.TextColorSelected = new Color ();  		State.TextColorSelected.R = (byte)SharedPropsNode.TextColorSelected.Numbers [0];  		State.TextColorSelected.G = (byte)SharedPropsNode.TextColorSelected.Numbers [1];  		State.TextColorSelected.B = (byte)SharedPropsNode.TextColorSelected.Numbers [2];  	}  	if (SharedPropsNode.TextColorHighlighted != null) {  		State.TextColorHighlighted = new Color ();  		State.TextColorHighlighted.R = (byte)SharedPropsNode.TextColorHighlighted.Numbers [0];  		State.TextColorHighlighted.G = (byte)SharedPropsNode.TextColorHighlighted.Numbers [1];  		State.TextColorHighlighted.B = (byte)SharedPropsNode.TextColorHighlighted.Numbers [2];  	}  	if (SharedPropsNode.TextColorDisabled != null) {  		State.TextColorDisabled = new Color ();  		State.TextColorDisabled.R = (byte)SharedPropsNode.TextColorDisabled.Numbers [0];  		State.TextColorDisabled.G = (byte)SharedPropsNode.TextColorDisabled.Numbers [1];  		State.TextColorDisabled.B = (byte)SharedPropsNode.TextColorDisabled.Numbers [2];  	}  	if (SharedPropsNode.BackColor != null) {  		State.BackColor = new Color ();  		State.BackColor.R = (byte)SharedPropsNode.BackColor.Numbers [0];  		State.BackColor.G = (byte)SharedPropsNode.BackColor.Numbers [1];  		State.BackColor.B = (byte)SharedPropsNode.BackColor.Numbers [2];  	}  	if (SharedPropsNode.CursorColor != null) {  		State.CursorColor = new Color ();  		State.CursorColor.R = (byte)SharedPropsNode.CursorColor.Numbers [0];  		State.CursorColor.G = (byte)SharedPropsNode.CursorColor.Numbers [1];  		State.CursorColor.B = (byte)SharedPropsNode.CursorColor.Numbers [2];  	}  	if (SharedPropsNode.TextButton)  		State.TextButton = true;  	if (SharedPropsNode.Opaque != null)  		State.IsOpaque = (SharedPropsNode.Opaque == 1) ? true : false;  	if (SharedPropsNode.Transparent != null)  		State.IsTransparent = (SharedPropsNode.Transparent == 1) ? true : false;  	if (SharedPropsNode.Alignment != null)  		State.Alignment = (int)SharedPropsNode.Alignment;  	if (SharedPropsNode.Image != "")  		State.Image = SharedPropsNode.Image;  	if (SharedPropsNode.Tooltip != "")  		State.Tooltip = SharedPropsNode.Tooltip;  	if (SharedPropsNode.Text != "")  		State.Caption = SharedPropsNode.Text;  	if (SharedPropsNode.Size != null)  		State.Size = new Vector2 (SharedPropsNode.Size.Numbers [0]' SharedPropsNode.Size.Numbers [1]);  	if (SharedPropsNode.Orientation != null)  		State.Orientation = (int)SharedPropsNode.Orientation;  	if (SharedPropsNode.Font != null)  		State.Font = (int)SharedPropsNode.Font;  	if (SharedPropsNode.Opaque != null)  		State.Opaque = (int)SharedPropsNode.Opaque;  	break;  case NodeType.SetControlProperties:  	//Sets a bunch of properties to a specified control.  	SetControlPropsNode ControlPropsNode = (SetControlPropsNode)UINode.GetNode (node);  	UIControl Ctrl = new UIControl (ControlPropsNode' m_Screen' State);  	Result.Controls.Add (ControlPropsNode.Control' Ctrl);  	if (State.InSharedPropertiesGroup) {  		UIElement Test = new UIElement (m_Screen' null);  		//Script implicitly created an object... :\  		if (!Result.Elements.TryGetValue (ControlPropsNode.Control' out Test)) {  			Result.Elements.Add (ControlPropsNode.Control' new UIElement (m_Screen' null));  			if (Ctrl.Image != null)  				Result.Elements [ControlPropsNode.Control].Image = new UIImage (Ctrl.Image);  			Result.Elements [ControlPropsNode.Control].Position = Ctrl.Position;  		}  	}  	break;  case NodeType.End:  	State.InSharedPropertiesGroup = false;  	State.Image = "";  	//Reset  	State.TextButton = false;  	//Reset   	State.Color = new Color ();  	State.Caption = "";  	State.Size = new Vector2 (0' 0);  	State.Alignment = 0;  	State.Font = 0;  	//TODO: Reset more?  	break;  }  
Magic Number,Gonzo,TreeWalker,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\TreeWalker.cs,WalkTree,The following statement contains a magic number: switch (NType) {  case NodeType.DefineImage:  	//Defines an image and loads a texture for it.  	DefineImageNode ImgNode = (DefineImageNode)UINode.GetNode (node);  	UIImage Img = new UIImage (ImgNode' m_Screen);  	Result.Elements.Add (ImgNode.Name' Img);  	break;  case NodeType.DefineString:  	//Defines a string with a name.  	DefineStringNode StrNode = (DefineStringNode)UINode.GetNode (node);  	Result.Strings.Add (StrNode.Name' StringManager.StrTable (State.CurrentStringTable) [StrNode.StrIndex]);  	break;  case NodeType.AddButton:  	//Defines a button.  	AddButtonNode ButtonNode = (AddButtonNode)UINode.GetNode (node);  	UIButton Btn = new UIButton (ButtonNode' Result' m_Screen);  	Result.Elements.Add (ButtonNode.Name' Btn);  	break;  case NodeType.AddText:  	AddTextNode TextNode = (AddTextNode)UINode.GetNode (node);  	UILabel Lbl = new UILabel (TextNode' Result' m_Screen);  	Result.Elements.Add (TextNode.Name' Lbl);  	break;  case NodeType.AddTextEdit:  	AddTextEditNode TextEditNode = (AddTextEditNode)UINode.GetNode (node);  	UITextEdit Txt = new UITextEdit (TextEditNode' State' m_Screen);  	Result.Elements.Add (TextEditNode.Name' Txt);  	break;  case NodeType.AddSlider:  	AddSliderNode SliderNode = (AddSliderNode)UINode.GetNode (node);  	UISlider Slider = new UISlider (SliderNode' State' m_Screen);  	Result.Elements.Add (SliderNode.Name' Slider);  	break;  case NodeType.SetSharedProperties:  	//Assigns a bunch of shared properties to declarations following the statement.  	State.InSharedPropertiesGroup = true;  	SetSharedPropsNode SharedPropsNode = (SetSharedPropsNode)UINode.GetNode (node);  	if (SharedPropsNode.StringTable != null)  		State.CurrentStringTable = (int)SharedPropsNode.StringTable;  	if (SharedPropsNode.ControlPosition != null) {  		State.Position [0] = SharedPropsNode.ControlPosition.Numbers [0];  		State.Position [1] = SharedPropsNode.ControlPosition.Numbers [1];  		break;  	}  	if (SharedPropsNode.Color != null) {  		State.Color = new Color ();  		State.Color.R = (byte)SharedPropsNode.Color.Numbers [0];  		State.Color.G = (byte)SharedPropsNode.Color.Numbers [1];  		State.Color.B = (byte)SharedPropsNode.Color.Numbers [2];  	}  	if (SharedPropsNode.TextColor != null) {  		State.TextColor = new Color ();  		State.TextColor.R = (byte)SharedPropsNode.TextColor.Numbers [0];  		State.TextColor.G = (byte)SharedPropsNode.TextColor.Numbers [1];  		State.TextColor.B = (byte)SharedPropsNode.TextColor.Numbers [2];  	}  	if (SharedPropsNode.TextColorSelected != null) {  		State.TextColorSelected = new Color ();  		State.TextColorSelected.R = (byte)SharedPropsNode.TextColorSelected.Numbers [0];  		State.TextColorSelected.G = (byte)SharedPropsNode.TextColorSelected.Numbers [1];  		State.TextColorSelected.B = (byte)SharedPropsNode.TextColorSelected.Numbers [2];  	}  	if (SharedPropsNode.TextColorHighlighted != null) {  		State.TextColorHighlighted = new Color ();  		State.TextColorHighlighted.R = (byte)SharedPropsNode.TextColorHighlighted.Numbers [0];  		State.TextColorHighlighted.G = (byte)SharedPropsNode.TextColorHighlighted.Numbers [1];  		State.TextColorHighlighted.B = (byte)SharedPropsNode.TextColorHighlighted.Numbers [2];  	}  	if (SharedPropsNode.TextColorDisabled != null) {  		State.TextColorDisabled = new Color ();  		State.TextColorDisabled.R = (byte)SharedPropsNode.TextColorDisabled.Numbers [0];  		State.TextColorDisabled.G = (byte)SharedPropsNode.TextColorDisabled.Numbers [1];  		State.TextColorDisabled.B = (byte)SharedPropsNode.TextColorDisabled.Numbers [2];  	}  	if (SharedPropsNode.BackColor != null) {  		State.BackColor = new Color ();  		State.BackColor.R = (byte)SharedPropsNode.BackColor.Numbers [0];  		State.BackColor.G = (byte)SharedPropsNode.BackColor.Numbers [1];  		State.BackColor.B = (byte)SharedPropsNode.BackColor.Numbers [2];  	}  	if (SharedPropsNode.CursorColor != null) {  		State.CursorColor = new Color ();  		State.CursorColor.R = (byte)SharedPropsNode.CursorColor.Numbers [0];  		State.CursorColor.G = (byte)SharedPropsNode.CursorColor.Numbers [1];  		State.CursorColor.B = (byte)SharedPropsNode.CursorColor.Numbers [2];  	}  	if (SharedPropsNode.TextButton)  		State.TextButton = true;  	if (SharedPropsNode.Opaque != null)  		State.IsOpaque = (SharedPropsNode.Opaque == 1) ? true : false;  	if (SharedPropsNode.Transparent != null)  		State.IsTransparent = (SharedPropsNode.Transparent == 1) ? true : false;  	if (SharedPropsNode.Alignment != null)  		State.Alignment = (int)SharedPropsNode.Alignment;  	if (SharedPropsNode.Image != "")  		State.Image = SharedPropsNode.Image;  	if (SharedPropsNode.Tooltip != "")  		State.Tooltip = SharedPropsNode.Tooltip;  	if (SharedPropsNode.Text != "")  		State.Caption = SharedPropsNode.Text;  	if (SharedPropsNode.Size != null)  		State.Size = new Vector2 (SharedPropsNode.Size.Numbers [0]' SharedPropsNode.Size.Numbers [1]);  	if (SharedPropsNode.Orientation != null)  		State.Orientation = (int)SharedPropsNode.Orientation;  	if (SharedPropsNode.Font != null)  		State.Font = (int)SharedPropsNode.Font;  	if (SharedPropsNode.Opaque != null)  		State.Opaque = (int)SharedPropsNode.Opaque;  	break;  case NodeType.SetControlProperties:  	//Sets a bunch of properties to a specified control.  	SetControlPropsNode ControlPropsNode = (SetControlPropsNode)UINode.GetNode (node);  	UIControl Ctrl = new UIControl (ControlPropsNode' m_Screen' State);  	Result.Controls.Add (ControlPropsNode.Control' Ctrl);  	if (State.InSharedPropertiesGroup) {  		UIElement Test = new UIElement (m_Screen' null);  		//Script implicitly created an object... :\  		if (!Result.Elements.TryGetValue (ControlPropsNode.Control' out Test)) {  			Result.Elements.Add (ControlPropsNode.Control' new UIElement (m_Screen' null));  			if (Ctrl.Image != null)  				Result.Elements [ControlPropsNode.Control].Image = new UIImage (Ctrl.Image);  			Result.Elements [ControlPropsNode.Control].Position = Ctrl.Position;  		}  	}  	break;  case NodeType.End:  	State.InSharedPropertiesGroup = false;  	State.Image = "";  	//Reset  	State.TextButton = false;  	//Reset   	State.Color = new Color ();  	State.Caption = "";  	State.Size = new Vector2 (0' 0);  	State.Alignment = 0;  	State.Font = 0;  	//TODO: Reset more?  	break;  }  
Magic Number,Gonzo,TreeWalker,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\TreeWalker.cs,WalkTree,The following statement contains a magic number: switch (NType) {  case NodeType.DefineImage:  	//Defines an image and loads a texture for it.  	DefineImageNode ImgNode = (DefineImageNode)UINode.GetNode (node);  	UIImage Img = new UIImage (ImgNode' m_Screen);  	Result.Elements.Add (ImgNode.Name' Img);  	break;  case NodeType.DefineString:  	//Defines a string with a name.  	DefineStringNode StrNode = (DefineStringNode)UINode.GetNode (node);  	Result.Strings.Add (StrNode.Name' StringManager.StrTable (State.CurrentStringTable) [StrNode.StrIndex]);  	break;  case NodeType.AddButton:  	//Defines a button.  	AddButtonNode ButtonNode = (AddButtonNode)UINode.GetNode (node);  	UIButton Btn = new UIButton (ButtonNode' Result' m_Screen);  	Result.Elements.Add (ButtonNode.Name' Btn);  	break;  case NodeType.AddText:  	AddTextNode TextNode = (AddTextNode)UINode.GetNode (node);  	UILabel Lbl = new UILabel (TextNode' Result' m_Screen);  	Result.Elements.Add (TextNode.Name' Lbl);  	break;  case NodeType.AddTextEdit:  	AddTextEditNode TextEditNode = (AddTextEditNode)UINode.GetNode (node);  	UITextEdit Txt = new UITextEdit (TextEditNode' State' m_Screen);  	Result.Elements.Add (TextEditNode.Name' Txt);  	break;  case NodeType.AddSlider:  	AddSliderNode SliderNode = (AddSliderNode)UINode.GetNode (node);  	UISlider Slider = new UISlider (SliderNode' State' m_Screen);  	Result.Elements.Add (SliderNode.Name' Slider);  	break;  case NodeType.SetSharedProperties:  	//Assigns a bunch of shared properties to declarations following the statement.  	State.InSharedPropertiesGroup = true;  	SetSharedPropsNode SharedPropsNode = (SetSharedPropsNode)UINode.GetNode (node);  	if (SharedPropsNode.StringTable != null)  		State.CurrentStringTable = (int)SharedPropsNode.StringTable;  	if (SharedPropsNode.ControlPosition != null) {  		State.Position [0] = SharedPropsNode.ControlPosition.Numbers [0];  		State.Position [1] = SharedPropsNode.ControlPosition.Numbers [1];  		break;  	}  	if (SharedPropsNode.Color != null) {  		State.Color = new Color ();  		State.Color.R = (byte)SharedPropsNode.Color.Numbers [0];  		State.Color.G = (byte)SharedPropsNode.Color.Numbers [1];  		State.Color.B = (byte)SharedPropsNode.Color.Numbers [2];  	}  	if (SharedPropsNode.TextColor != null) {  		State.TextColor = new Color ();  		State.TextColor.R = (byte)SharedPropsNode.TextColor.Numbers [0];  		State.TextColor.G = (byte)SharedPropsNode.TextColor.Numbers [1];  		State.TextColor.B = (byte)SharedPropsNode.TextColor.Numbers [2];  	}  	if (SharedPropsNode.TextColorSelected != null) {  		State.TextColorSelected = new Color ();  		State.TextColorSelected.R = (byte)SharedPropsNode.TextColorSelected.Numbers [0];  		State.TextColorSelected.G = (byte)SharedPropsNode.TextColorSelected.Numbers [1];  		State.TextColorSelected.B = (byte)SharedPropsNode.TextColorSelected.Numbers [2];  	}  	if (SharedPropsNode.TextColorHighlighted != null) {  		State.TextColorHighlighted = new Color ();  		State.TextColorHighlighted.R = (byte)SharedPropsNode.TextColorHighlighted.Numbers [0];  		State.TextColorHighlighted.G = (byte)SharedPropsNode.TextColorHighlighted.Numbers [1];  		State.TextColorHighlighted.B = (byte)SharedPropsNode.TextColorHighlighted.Numbers [2];  	}  	if (SharedPropsNode.TextColorDisabled != null) {  		State.TextColorDisabled = new Color ();  		State.TextColorDisabled.R = (byte)SharedPropsNode.TextColorDisabled.Numbers [0];  		State.TextColorDisabled.G = (byte)SharedPropsNode.TextColorDisabled.Numbers [1];  		State.TextColorDisabled.B = (byte)SharedPropsNode.TextColorDisabled.Numbers [2];  	}  	if (SharedPropsNode.BackColor != null) {  		State.BackColor = new Color ();  		State.BackColor.R = (byte)SharedPropsNode.BackColor.Numbers [0];  		State.BackColor.G = (byte)SharedPropsNode.BackColor.Numbers [1];  		State.BackColor.B = (byte)SharedPropsNode.BackColor.Numbers [2];  	}  	if (SharedPropsNode.CursorColor != null) {  		State.CursorColor = new Color ();  		State.CursorColor.R = (byte)SharedPropsNode.CursorColor.Numbers [0];  		State.CursorColor.G = (byte)SharedPropsNode.CursorColor.Numbers [1];  		State.CursorColor.B = (byte)SharedPropsNode.CursorColor.Numbers [2];  	}  	if (SharedPropsNode.TextButton)  		State.TextButton = true;  	if (SharedPropsNode.Opaque != null)  		State.IsOpaque = (SharedPropsNode.Opaque == 1) ? true : false;  	if (SharedPropsNode.Transparent != null)  		State.IsTransparent = (SharedPropsNode.Transparent == 1) ? true : false;  	if (SharedPropsNode.Alignment != null)  		State.Alignment = (int)SharedPropsNode.Alignment;  	if (SharedPropsNode.Image != "")  		State.Image = SharedPropsNode.Image;  	if (SharedPropsNode.Tooltip != "")  		State.Tooltip = SharedPropsNode.Tooltip;  	if (SharedPropsNode.Text != "")  		State.Caption = SharedPropsNode.Text;  	if (SharedPropsNode.Size != null)  		State.Size = new Vector2 (SharedPropsNode.Size.Numbers [0]' SharedPropsNode.Size.Numbers [1]);  	if (SharedPropsNode.Orientation != null)  		State.Orientation = (int)SharedPropsNode.Orientation;  	if (SharedPropsNode.Font != null)  		State.Font = (int)SharedPropsNode.Font;  	if (SharedPropsNode.Opaque != null)  		State.Opaque = (int)SharedPropsNode.Opaque;  	break;  case NodeType.SetControlProperties:  	//Sets a bunch of properties to a specified control.  	SetControlPropsNode ControlPropsNode = (SetControlPropsNode)UINode.GetNode (node);  	UIControl Ctrl = new UIControl (ControlPropsNode' m_Screen' State);  	Result.Controls.Add (ControlPropsNode.Control' Ctrl);  	if (State.InSharedPropertiesGroup) {  		UIElement Test = new UIElement (m_Screen' null);  		//Script implicitly created an object... :\  		if (!Result.Elements.TryGetValue (ControlPropsNode.Control' out Test)) {  			Result.Elements.Add (ControlPropsNode.Control' new UIElement (m_Screen' null));  			if (Ctrl.Image != null)  				Result.Elements [ControlPropsNode.Control].Image = new UIImage (Ctrl.Image);  			Result.Elements [ControlPropsNode.Control].Position = Ctrl.Position;  		}  	}  	break;  case NodeType.End:  	State.InSharedPropertiesGroup = false;  	State.Image = "";  	//Reset  	State.TextButton = false;  	//Reset   	State.Color = new Color ();  	State.Caption = "";  	State.Size = new Vector2 (0' 0);  	State.Alignment = 0;  	State.Font = 0;  	//TODO: Reset more?  	break;  }  
Magic Number,Gonzo,TreeWalker,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\TreeWalker.cs,WalkTree,The following statement contains a magic number: switch (NType) {  case NodeType.DefineImage:  	//Defines an image and loads a texture for it.  	DefineImageNode ImgNode = (DefineImageNode)UINode.GetNode (node);  	UIImage Img = new UIImage (ImgNode' m_Screen);  	Result.Elements.Add (ImgNode.Name' Img);  	break;  case NodeType.DefineString:  	//Defines a string with a name.  	DefineStringNode StrNode = (DefineStringNode)UINode.GetNode (node);  	Result.Strings.Add (StrNode.Name' StringManager.StrTable (State.CurrentStringTable) [StrNode.StrIndex]);  	break;  case NodeType.AddButton:  	//Defines a button.  	AddButtonNode ButtonNode = (AddButtonNode)UINode.GetNode (node);  	UIButton Btn = new UIButton (ButtonNode' Result' m_Screen);  	Result.Elements.Add (ButtonNode.Name' Btn);  	break;  case NodeType.AddText:  	AddTextNode TextNode = (AddTextNode)UINode.GetNode (node);  	UILabel Lbl = new UILabel (TextNode' Result' m_Screen);  	Result.Elements.Add (TextNode.Name' Lbl);  	break;  case NodeType.AddTextEdit:  	AddTextEditNode TextEditNode = (AddTextEditNode)UINode.GetNode (node);  	UITextEdit Txt = new UITextEdit (TextEditNode' State' m_Screen);  	Result.Elements.Add (TextEditNode.Name' Txt);  	break;  case NodeType.AddSlider:  	AddSliderNode SliderNode = (AddSliderNode)UINode.GetNode (node);  	UISlider Slider = new UISlider (SliderNode' State' m_Screen);  	Result.Elements.Add (SliderNode.Name' Slider);  	break;  case NodeType.SetSharedProperties:  	//Assigns a bunch of shared properties to declarations following the statement.  	State.InSharedPropertiesGroup = true;  	SetSharedPropsNode SharedPropsNode = (SetSharedPropsNode)UINode.GetNode (node);  	if (SharedPropsNode.StringTable != null)  		State.CurrentStringTable = (int)SharedPropsNode.StringTable;  	if (SharedPropsNode.ControlPosition != null) {  		State.Position [0] = SharedPropsNode.ControlPosition.Numbers [0];  		State.Position [1] = SharedPropsNode.ControlPosition.Numbers [1];  		break;  	}  	if (SharedPropsNode.Color != null) {  		State.Color = new Color ();  		State.Color.R = (byte)SharedPropsNode.Color.Numbers [0];  		State.Color.G = (byte)SharedPropsNode.Color.Numbers [1];  		State.Color.B = (byte)SharedPropsNode.Color.Numbers [2];  	}  	if (SharedPropsNode.TextColor != null) {  		State.TextColor = new Color ();  		State.TextColor.R = (byte)SharedPropsNode.TextColor.Numbers [0];  		State.TextColor.G = (byte)SharedPropsNode.TextColor.Numbers [1];  		State.TextColor.B = (byte)SharedPropsNode.TextColor.Numbers [2];  	}  	if (SharedPropsNode.TextColorSelected != null) {  		State.TextColorSelected = new Color ();  		State.TextColorSelected.R = (byte)SharedPropsNode.TextColorSelected.Numbers [0];  		State.TextColorSelected.G = (byte)SharedPropsNode.TextColorSelected.Numbers [1];  		State.TextColorSelected.B = (byte)SharedPropsNode.TextColorSelected.Numbers [2];  	}  	if (SharedPropsNode.TextColorHighlighted != null) {  		State.TextColorHighlighted = new Color ();  		State.TextColorHighlighted.R = (byte)SharedPropsNode.TextColorHighlighted.Numbers [0];  		State.TextColorHighlighted.G = (byte)SharedPropsNode.TextColorHighlighted.Numbers [1];  		State.TextColorHighlighted.B = (byte)SharedPropsNode.TextColorHighlighted.Numbers [2];  	}  	if (SharedPropsNode.TextColorDisabled != null) {  		State.TextColorDisabled = new Color ();  		State.TextColorDisabled.R = (byte)SharedPropsNode.TextColorDisabled.Numbers [0];  		State.TextColorDisabled.G = (byte)SharedPropsNode.TextColorDisabled.Numbers [1];  		State.TextColorDisabled.B = (byte)SharedPropsNode.TextColorDisabled.Numbers [2];  	}  	if (SharedPropsNode.BackColor != null) {  		State.BackColor = new Color ();  		State.BackColor.R = (byte)SharedPropsNode.BackColor.Numbers [0];  		State.BackColor.G = (byte)SharedPropsNode.BackColor.Numbers [1];  		State.BackColor.B = (byte)SharedPropsNode.BackColor.Numbers [2];  	}  	if (SharedPropsNode.CursorColor != null) {  		State.CursorColor = new Color ();  		State.CursorColor.R = (byte)SharedPropsNode.CursorColor.Numbers [0];  		State.CursorColor.G = (byte)SharedPropsNode.CursorColor.Numbers [1];  		State.CursorColor.B = (byte)SharedPropsNode.CursorColor.Numbers [2];  	}  	if (SharedPropsNode.TextButton)  		State.TextButton = true;  	if (SharedPropsNode.Opaque != null)  		State.IsOpaque = (SharedPropsNode.Opaque == 1) ? true : false;  	if (SharedPropsNode.Transparent != null)  		State.IsTransparent = (SharedPropsNode.Transparent == 1) ? true : false;  	if (SharedPropsNode.Alignment != null)  		State.Alignment = (int)SharedPropsNode.Alignment;  	if (SharedPropsNode.Image != "")  		State.Image = SharedPropsNode.Image;  	if (SharedPropsNode.Tooltip != "")  		State.Tooltip = SharedPropsNode.Tooltip;  	if (SharedPropsNode.Text != "")  		State.Caption = SharedPropsNode.Text;  	if (SharedPropsNode.Size != null)  		State.Size = new Vector2 (SharedPropsNode.Size.Numbers [0]' SharedPropsNode.Size.Numbers [1]);  	if (SharedPropsNode.Orientation != null)  		State.Orientation = (int)SharedPropsNode.Orientation;  	if (SharedPropsNode.Font != null)  		State.Font = (int)SharedPropsNode.Font;  	if (SharedPropsNode.Opaque != null)  		State.Opaque = (int)SharedPropsNode.Opaque;  	break;  case NodeType.SetControlProperties:  	//Sets a bunch of properties to a specified control.  	SetControlPropsNode ControlPropsNode = (SetControlPropsNode)UINode.GetNode (node);  	UIControl Ctrl = new UIControl (ControlPropsNode' m_Screen' State);  	Result.Controls.Add (ControlPropsNode.Control' Ctrl);  	if (State.InSharedPropertiesGroup) {  		UIElement Test = new UIElement (m_Screen' null);  		//Script implicitly created an object... :\  		if (!Result.Elements.TryGetValue (ControlPropsNode.Control' out Test)) {  			Result.Elements.Add (ControlPropsNode.Control' new UIElement (m_Screen' null));  			if (Ctrl.Image != null)  				Result.Elements [ControlPropsNode.Control].Image = new UIImage (Ctrl.Image);  			Result.Elements [ControlPropsNode.Control].Position = Ctrl.Position;  		}  	}  	break;  case NodeType.End:  	State.InSharedPropertiesGroup = false;  	State.Image = "";  	//Reset  	State.TextButton = false;  	//Reset   	State.Color = new Color ();  	State.Caption = "";  	State.Size = new Vector2 (0' 0);  	State.Alignment = 0;  	State.Font = 0;  	//TODO: Reset more?  	break;  }  
Magic Number,Gonzo,TreeWalker,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\TreeWalker.cs,WalkTree,The following statement contains a magic number: if (SharedPropsNode.Color != null) {  	State.Color = new Color ();  	State.Color.R = (byte)SharedPropsNode.Color.Numbers [0];  	State.Color.G = (byte)SharedPropsNode.Color.Numbers [1];  	State.Color.B = (byte)SharedPropsNode.Color.Numbers [2];  }  
Magic Number,Gonzo,TreeWalker,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\TreeWalker.cs,WalkTree,The following statement contains a magic number: State.Color.B = (byte)SharedPropsNode.Color.Numbers [2];  
Magic Number,Gonzo,TreeWalker,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\TreeWalker.cs,WalkTree,The following statement contains a magic number: if (SharedPropsNode.TextColor != null) {  	State.TextColor = new Color ();  	State.TextColor.R = (byte)SharedPropsNode.TextColor.Numbers [0];  	State.TextColor.G = (byte)SharedPropsNode.TextColor.Numbers [1];  	State.TextColor.B = (byte)SharedPropsNode.TextColor.Numbers [2];  }  
Magic Number,Gonzo,TreeWalker,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\TreeWalker.cs,WalkTree,The following statement contains a magic number: State.TextColor.B = (byte)SharedPropsNode.TextColor.Numbers [2];  
Magic Number,Gonzo,TreeWalker,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\TreeWalker.cs,WalkTree,The following statement contains a magic number: if (SharedPropsNode.TextColorSelected != null) {  	State.TextColorSelected = new Color ();  	State.TextColorSelected.R = (byte)SharedPropsNode.TextColorSelected.Numbers [0];  	State.TextColorSelected.G = (byte)SharedPropsNode.TextColorSelected.Numbers [1];  	State.TextColorSelected.B = (byte)SharedPropsNode.TextColorSelected.Numbers [2];  }  
Magic Number,Gonzo,TreeWalker,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\TreeWalker.cs,WalkTree,The following statement contains a magic number: State.TextColorSelected.B = (byte)SharedPropsNode.TextColorSelected.Numbers [2];  
Magic Number,Gonzo,TreeWalker,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\TreeWalker.cs,WalkTree,The following statement contains a magic number: if (SharedPropsNode.TextColorHighlighted != null) {  	State.TextColorHighlighted = new Color ();  	State.TextColorHighlighted.R = (byte)SharedPropsNode.TextColorHighlighted.Numbers [0];  	State.TextColorHighlighted.G = (byte)SharedPropsNode.TextColorHighlighted.Numbers [1];  	State.TextColorHighlighted.B = (byte)SharedPropsNode.TextColorHighlighted.Numbers [2];  }  
Magic Number,Gonzo,TreeWalker,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\TreeWalker.cs,WalkTree,The following statement contains a magic number: State.TextColorHighlighted.B = (byte)SharedPropsNode.TextColorHighlighted.Numbers [2];  
Magic Number,Gonzo,TreeWalker,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\TreeWalker.cs,WalkTree,The following statement contains a magic number: if (SharedPropsNode.TextColorDisabled != null) {  	State.TextColorDisabled = new Color ();  	State.TextColorDisabled.R = (byte)SharedPropsNode.TextColorDisabled.Numbers [0];  	State.TextColorDisabled.G = (byte)SharedPropsNode.TextColorDisabled.Numbers [1];  	State.TextColorDisabled.B = (byte)SharedPropsNode.TextColorDisabled.Numbers [2];  }  
Magic Number,Gonzo,TreeWalker,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\TreeWalker.cs,WalkTree,The following statement contains a magic number: State.TextColorDisabled.B = (byte)SharedPropsNode.TextColorDisabled.Numbers [2];  
Magic Number,Gonzo,TreeWalker,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\TreeWalker.cs,WalkTree,The following statement contains a magic number: if (SharedPropsNode.BackColor != null) {  	State.BackColor = new Color ();  	State.BackColor.R = (byte)SharedPropsNode.BackColor.Numbers [0];  	State.BackColor.G = (byte)SharedPropsNode.BackColor.Numbers [1];  	State.BackColor.B = (byte)SharedPropsNode.BackColor.Numbers [2];  }  
Magic Number,Gonzo,TreeWalker,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\TreeWalker.cs,WalkTree,The following statement contains a magic number: State.BackColor.B = (byte)SharedPropsNode.BackColor.Numbers [2];  
Magic Number,Gonzo,TreeWalker,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\TreeWalker.cs,WalkTree,The following statement contains a magic number: if (SharedPropsNode.CursorColor != null) {  	State.CursorColor = new Color ();  	State.CursorColor.R = (byte)SharedPropsNode.CursorColor.Numbers [0];  	State.CursorColor.G = (byte)SharedPropsNode.CursorColor.Numbers [1];  	State.CursorColor.B = (byte)SharedPropsNode.CursorColor.Numbers [2];  }  
Magic Number,Gonzo,TreeWalker,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\TreeWalker.cs,WalkTree,The following statement contains a magic number: State.CursorColor.B = (byte)SharedPropsNode.CursorColor.Numbers [2];  
Magic Number,Gonzo.Dialogs,LoginDialog,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\LoginDialog.cs,LoginDialog,The following statement contains a magic number: m_Cst = StringManager.StrTable (209);  
Magic Number,Gonzo.Dialogs,LoginDialog,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\LoginDialog.cs,LoginDialog,The following statement contains a magic number: m_LblTitle = new UILabel (m_Cst [1]' 1' Pos' m_Font.MeasureString (m_Cst [1])' m_Screen.StandardTxtColor' 11' m_Screen' UIParser.Nodes.TextAlignment.Center_Center);  
Magic Number,Gonzo.Dialogs,LoginDialog,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\LoginDialog.cs,LoginDialog,The following statement contains a magic number: m_LblUsername = new UILabel (m_Cst [4]' 2' new Vector2 (Pos.X + 20' Pos.Y - 50)' m_Font.MeasureString (m_Cst [4])' m_Screen.StandardTxtColor' 9' m_Screen' UIParser.Nodes.TextAlignment.Center_Center);  
Magic Number,Gonzo.Dialogs,LoginDialog,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\LoginDialog.cs,LoginDialog,The following statement contains a magic number: m_LblUsername = new UILabel (m_Cst [4]' 2' new Vector2 (Pos.X + 20' Pos.Y - 50)' m_Font.MeasureString (m_Cst [4])' m_Screen.StandardTxtColor' 9' m_Screen' UIParser.Nodes.TextAlignment.Center_Center);  
Magic Number,Gonzo.Dialogs,LoginDialog,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\LoginDialog.cs,LoginDialog,The following statement contains a magic number: m_LblUsername = new UILabel (m_Cst [4]' 2' new Vector2 (Pos.X + 20' Pos.Y - 50)' m_Font.MeasureString (m_Cst [4])' m_Screen.StandardTxtColor' 9' m_Screen' UIParser.Nodes.TextAlignment.Center_Center);  
Magic Number,Gonzo.Dialogs,LoginDialog,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\LoginDialog.cs,LoginDialog,The following statement contains a magic number: m_LblUsername = new UILabel (m_Cst [4]' 2' new Vector2 (Pos.X + 20' Pos.Y - 50)' m_Font.MeasureString (m_Cst [4])' m_Screen.StandardTxtColor' 9' m_Screen' UIParser.Nodes.TextAlignment.Center_Center);  
Magic Number,Gonzo.Dialogs,LoginDialog,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\LoginDialog.cs,LoginDialog,The following statement contains a magic number: m_LblUsername = new UILabel (m_Cst [4]' 2' new Vector2 (Pos.X + 20' Pos.Y - 50)' m_Font.MeasureString (m_Cst [4])' m_Screen.StandardTxtColor' 9' m_Screen' UIParser.Nodes.TextAlignment.Center_Center);  
Magic Number,Gonzo.Dialogs,LoginDialog,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\LoginDialog.cs,LoginDialog,The following statement contains a magic number: m_LblUsername = new UILabel (m_Cst [4]' 2' new Vector2 (Pos.X + 20' Pos.Y - 50)' m_Font.MeasureString (m_Cst [4])' m_Screen.StandardTxtColor' 9' m_Screen' UIParser.Nodes.TextAlignment.Center_Center);  
Magic Number,Gonzo.Dialogs,LoginDialog,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\LoginDialog.cs,LoginDialog,The following statement contains a magic number: m_LblPassword = new UILabel (m_Cst [5]' 3' new Vector2 (Pos.X + 20' Pos.Y - 110)' m_Font.MeasureString (m_Cst [4])' m_Screen.StandardTxtColor' 9' m_Screen' UIParser.Nodes.TextAlignment.Center_Center);  
Magic Number,Gonzo.Dialogs,LoginDialog,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\LoginDialog.cs,LoginDialog,The following statement contains a magic number: m_LblPassword = new UILabel (m_Cst [5]' 3' new Vector2 (Pos.X + 20' Pos.Y - 110)' m_Font.MeasureString (m_Cst [4])' m_Screen.StandardTxtColor' 9' m_Screen' UIParser.Nodes.TextAlignment.Center_Center);  
Magic Number,Gonzo.Dialogs,LoginDialog,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\LoginDialog.cs,LoginDialog,The following statement contains a magic number: m_LblPassword = new UILabel (m_Cst [5]' 3' new Vector2 (Pos.X + 20' Pos.Y - 110)' m_Font.MeasureString (m_Cst [4])' m_Screen.StandardTxtColor' 9' m_Screen' UIParser.Nodes.TextAlignment.Center_Center);  
Magic Number,Gonzo.Dialogs,LoginDialog,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\LoginDialog.cs,LoginDialog,The following statement contains a magic number: m_LblPassword = new UILabel (m_Cst [5]' 3' new Vector2 (Pos.X + 20' Pos.Y - 110)' m_Font.MeasureString (m_Cst [4])' m_Screen.StandardTxtColor' 9' m_Screen' UIParser.Nodes.TextAlignment.Center_Center);  
Magic Number,Gonzo.Dialogs,LoginDialog,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\LoginDialog.cs,LoginDialog,The following statement contains a magic number: m_LblPassword = new UILabel (m_Cst [5]' 3' new Vector2 (Pos.X + 20' Pos.Y - 110)' m_Font.MeasureString (m_Cst [4])' m_Screen.StandardTxtColor' 9' m_Screen' UIParser.Nodes.TextAlignment.Center_Center);  
Magic Number,Gonzo.Dialogs,LoginDialog,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\LoginDialog.cs,LoginDialog,The following statement contains a magic number: m_LblPassword = new UILabel (m_Cst [5]' 3' new Vector2 (Pos.X + 20' Pos.Y - 110)' m_Font.MeasureString (m_Cst [4])' m_Screen.StandardTxtColor' 9' m_Screen' UIParser.Nodes.TextAlignment.Center_Center);  
Magic Number,Gonzo.Dialogs,LoginDialog,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\LoginDialog.cs,LoginDialog,The following statement contains a magic number: m_TxtUsername = new UITextEdit ("TxtUsername"' 4' true' 1' new Vector2 (Pos.X + 20' Pos.Y - 85)' new Vector2 (250' 25)' 10' m_Screen);  
Magic Number,Gonzo.Dialogs,LoginDialog,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\LoginDialog.cs,LoginDialog,The following statement contains a magic number: m_TxtUsername = new UITextEdit ("TxtUsername"' 4' true' 1' new Vector2 (Pos.X + 20' Pos.Y - 85)' new Vector2 (250' 25)' 10' m_Screen);  
Magic Number,Gonzo.Dialogs,LoginDialog,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\LoginDialog.cs,LoginDialog,The following statement contains a magic number: m_TxtUsername = new UITextEdit ("TxtUsername"' 4' true' 1' new Vector2 (Pos.X + 20' Pos.Y - 85)' new Vector2 (250' 25)' 10' m_Screen);  
Magic Number,Gonzo.Dialogs,LoginDialog,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\LoginDialog.cs,LoginDialog,The following statement contains a magic number: m_TxtUsername = new UITextEdit ("TxtUsername"' 4' true' 1' new Vector2 (Pos.X + 20' Pos.Y - 85)' new Vector2 (250' 25)' 10' m_Screen);  
Magic Number,Gonzo.Dialogs,LoginDialog,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\LoginDialog.cs,LoginDialog,The following statement contains a magic number: m_TxtUsername = new UITextEdit ("TxtUsername"' 4' true' 1' new Vector2 (Pos.X + 20' Pos.Y - 85)' new Vector2 (250' 25)' 10' m_Screen);  
Magic Number,Gonzo.Dialogs,LoginDialog,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\LoginDialog.cs,LoginDialog,The following statement contains a magic number: m_TxtUsername = new UITextEdit ("TxtUsername"' 4' true' 1' new Vector2 (Pos.X + 20' Pos.Y - 85)' new Vector2 (250' 25)' 10' m_Screen);  
Magic Number,Gonzo.Dialogs,LoginDialog,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\LoginDialog.cs,LoginDialog,The following statement contains a magic number: m_TxtPassword = new UITextEdit ("TxtPassword"' 5' true' 1' new Vector2 (Pos.X + 20' Pos.Y - 145)' new Vector2 (250' 25)' 10' m_Screen);  
Magic Number,Gonzo.Dialogs,LoginDialog,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\LoginDialog.cs,LoginDialog,The following statement contains a magic number: m_TxtPassword = new UITextEdit ("TxtPassword"' 5' true' 1' new Vector2 (Pos.X + 20' Pos.Y - 145)' new Vector2 (250' 25)' 10' m_Screen);  
Magic Number,Gonzo.Dialogs,LoginDialog,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\LoginDialog.cs,LoginDialog,The following statement contains a magic number: m_TxtPassword = new UITextEdit ("TxtPassword"' 5' true' 1' new Vector2 (Pos.X + 20' Pos.Y - 145)' new Vector2 (250' 25)' 10' m_Screen);  
Magic Number,Gonzo.Dialogs,LoginDialog,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\LoginDialog.cs,LoginDialog,The following statement contains a magic number: m_TxtPassword = new UITextEdit ("TxtPassword"' 5' true' 1' new Vector2 (Pos.X + 20' Pos.Y - 145)' new Vector2 (250' 25)' 10' m_Screen);  
Magic Number,Gonzo.Dialogs,LoginDialog,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\LoginDialog.cs,LoginDialog,The following statement contains a magic number: m_TxtPassword = new UITextEdit ("TxtPassword"' 5' true' 1' new Vector2 (Pos.X + 20' Pos.Y - 145)' new Vector2 (250' 25)' 10' m_Screen);  
Magic Number,Gonzo.Dialogs,LoginDialog,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\LoginDialog.cs,LoginDialog,The following statement contains a magic number: m_TxtPassword = new UITextEdit ("TxtPassword"' 5' true' 1' new Vector2 (Pos.X + 20' Pos.Y - 145)' new Vector2 (250' 25)' 10' m_Screen);  
Magic Number,Gonzo.Dialogs,LoginDialog,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\LoginDialog.cs,LoginDialog,The following statement contains a magic number: m_BtnLogin = new UIButton ("BtnLogin"' new Vector2 (120' 170)' m_Screen' null' m_Cst [2]' 9);  
Magic Number,Gonzo.Dialogs,LoginDialog,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\LoginDialog.cs,LoginDialog,The following statement contains a magic number: m_BtnLogin = new UIButton ("BtnLogin"' new Vector2 (120' 170)' m_Screen' null' m_Cst [2]' 9);  
Magic Number,Gonzo.Dialogs,LoginDialog,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\LoginDialog.cs,LoginDialog,The following statement contains a magic number: m_BtnLogin = new UIButton ("BtnLogin"' new Vector2 (120' 170)' m_Screen' null' m_Cst [2]' 9);  
Magic Number,Gonzo.Dialogs,LoginDialog,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\LoginDialog.cs,LoginDialog,The following statement contains a magic number: m_BtnLogin = new UIButton ("BtnLogin"' new Vector2 (120' 170)' m_Screen' null' m_Cst [2]' 9);  
Magic Number,Gonzo.Dialogs,LoginDialog,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\LoginDialog.cs,LoginDialog,The following statement contains a magic number: m_BtnExit = new UIButton ("BtnExit"' new Vector2 (200' 170)' m_Screen' null' m_Cst [3]' 9);  
Magic Number,Gonzo.Dialogs,LoginDialog,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\LoginDialog.cs,LoginDialog,The following statement contains a magic number: m_BtnExit = new UIButton ("BtnExit"' new Vector2 (200' 170)' m_Screen' null' m_Cst [3]' 9);  
Magic Number,Gonzo.Dialogs,LoginDialog,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\LoginDialog.cs,LoginDialog,The following statement contains a magic number: m_BtnExit = new UIButton ("BtnExit"' new Vector2 (200' 170)' m_Screen' null' m_Cst [3]' 9);  
Magic Number,Gonzo.Dialogs,LoginDialog,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\LoginDialog.cs,LoginDialog,The following statement contains a magic number: m_BtnExit = new UIButton ("BtnExit"' new Vector2 (200' 170)' m_Screen' null' m_Cst [3]' 9);  
Magic Number,Gonzo.Dialogs,LoginDialog,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\LoginDialog.cs,LoginDialog,The following statement contains a magic number: SetSize ((int)((m_Font.MeasureString (m_Cst [1]).X + 40) * Resolution.getVirtualAspectRatio ())' (int)(175 * Resolution.getVirtualAspectRatio ()));  
Magic Number,Gonzo.Dialogs,LoginDialog,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\LoginDialog.cs,LoginDialog,The following statement contains a magic number: SetSize ((int)((m_Font.MeasureString (m_Cst [1]).X + 40) * Resolution.getVirtualAspectRatio ())' (int)(175 * Resolution.getVirtualAspectRatio ()));  
Magic Number,Gonzo.Dialogs,LoginDialog,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\LoginDialog.cs,Update,The following statement contains a magic number: if (Visible) {  	if (m_DoDrag) {  		Vector2 OffsetFromMouse = new Vector2 (60' 0);  		m_LblTitle.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  		OffsetFromMouse = new Vector2 (20' 50);  		m_LblUsername.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  		OffsetFromMouse = new Vector2 (20' 110);  		m_LblPassword.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  		OffsetFromMouse = new Vector2 (20' 85);  		m_TxtUsername.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  		OffsetFromMouse = new Vector2 (20' 145);  		m_TxtPassword.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  		OffsetFromMouse = new Vector2 (120' 170);  		m_BtnLogin.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  		OffsetFromMouse = new Vector2 (200' 170);  		m_BtnExit.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  	}  	/*m_TxtUsername.Update(Helper' GTime);                 m_TxtPassword.Update(Helper' GTime);*/m_BtnLogin.Update (Helper' GTime);  	m_BtnExit.Update (Helper' GTime);  }  
Magic Number,Gonzo.Dialogs,LoginDialog,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\LoginDialog.cs,Update,The following statement contains a magic number: if (Visible) {  	if (m_DoDrag) {  		Vector2 OffsetFromMouse = new Vector2 (60' 0);  		m_LblTitle.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  		OffsetFromMouse = new Vector2 (20' 50);  		m_LblUsername.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  		OffsetFromMouse = new Vector2 (20' 110);  		m_LblPassword.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  		OffsetFromMouse = new Vector2 (20' 85);  		m_TxtUsername.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  		OffsetFromMouse = new Vector2 (20' 145);  		m_TxtPassword.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  		OffsetFromMouse = new Vector2 (120' 170);  		m_BtnLogin.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  		OffsetFromMouse = new Vector2 (200' 170);  		m_BtnExit.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  	}  	/*m_TxtUsername.Update(Helper' GTime);                 m_TxtPassword.Update(Helper' GTime);*/m_BtnLogin.Update (Helper' GTime);  	m_BtnExit.Update (Helper' GTime);  }  
Magic Number,Gonzo.Dialogs,LoginDialog,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\LoginDialog.cs,Update,The following statement contains a magic number: if (Visible) {  	if (m_DoDrag) {  		Vector2 OffsetFromMouse = new Vector2 (60' 0);  		m_LblTitle.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  		OffsetFromMouse = new Vector2 (20' 50);  		m_LblUsername.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  		OffsetFromMouse = new Vector2 (20' 110);  		m_LblPassword.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  		OffsetFromMouse = new Vector2 (20' 85);  		m_TxtUsername.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  		OffsetFromMouse = new Vector2 (20' 145);  		m_TxtPassword.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  		OffsetFromMouse = new Vector2 (120' 170);  		m_BtnLogin.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  		OffsetFromMouse = new Vector2 (200' 170);  		m_BtnExit.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  	}  	/*m_TxtUsername.Update(Helper' GTime);                 m_TxtPassword.Update(Helper' GTime);*/m_BtnLogin.Update (Helper' GTime);  	m_BtnExit.Update (Helper' GTime);  }  
Magic Number,Gonzo.Dialogs,LoginDialog,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\LoginDialog.cs,Update,The following statement contains a magic number: if (Visible) {  	if (m_DoDrag) {  		Vector2 OffsetFromMouse = new Vector2 (60' 0);  		m_LblTitle.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  		OffsetFromMouse = new Vector2 (20' 50);  		m_LblUsername.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  		OffsetFromMouse = new Vector2 (20' 110);  		m_LblPassword.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  		OffsetFromMouse = new Vector2 (20' 85);  		m_TxtUsername.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  		OffsetFromMouse = new Vector2 (20' 145);  		m_TxtPassword.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  		OffsetFromMouse = new Vector2 (120' 170);  		m_BtnLogin.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  		OffsetFromMouse = new Vector2 (200' 170);  		m_BtnExit.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  	}  	/*m_TxtUsername.Update(Helper' GTime);                 m_TxtPassword.Update(Helper' GTime);*/m_BtnLogin.Update (Helper' GTime);  	m_BtnExit.Update (Helper' GTime);  }  
Magic Number,Gonzo.Dialogs,LoginDialog,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\LoginDialog.cs,Update,The following statement contains a magic number: if (Visible) {  	if (m_DoDrag) {  		Vector2 OffsetFromMouse = new Vector2 (60' 0);  		m_LblTitle.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  		OffsetFromMouse = new Vector2 (20' 50);  		m_LblUsername.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  		OffsetFromMouse = new Vector2 (20' 110);  		m_LblPassword.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  		OffsetFromMouse = new Vector2 (20' 85);  		m_TxtUsername.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  		OffsetFromMouse = new Vector2 (20' 145);  		m_TxtPassword.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  		OffsetFromMouse = new Vector2 (120' 170);  		m_BtnLogin.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  		OffsetFromMouse = new Vector2 (200' 170);  		m_BtnExit.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  	}  	/*m_TxtUsername.Update(Helper' GTime);                 m_TxtPassword.Update(Helper' GTime);*/m_BtnLogin.Update (Helper' GTime);  	m_BtnExit.Update (Helper' GTime);  }  
Magic Number,Gonzo.Dialogs,LoginDialog,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\LoginDialog.cs,Update,The following statement contains a magic number: if (Visible) {  	if (m_DoDrag) {  		Vector2 OffsetFromMouse = new Vector2 (60' 0);  		m_LblTitle.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  		OffsetFromMouse = new Vector2 (20' 50);  		m_LblUsername.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  		OffsetFromMouse = new Vector2 (20' 110);  		m_LblPassword.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  		OffsetFromMouse = new Vector2 (20' 85);  		m_TxtUsername.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  		OffsetFromMouse = new Vector2 (20' 145);  		m_TxtPassword.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  		OffsetFromMouse = new Vector2 (120' 170);  		m_BtnLogin.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  		OffsetFromMouse = new Vector2 (200' 170);  		m_BtnExit.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  	}  	/*m_TxtUsername.Update(Helper' GTime);                 m_TxtPassword.Update(Helper' GTime);*/m_BtnLogin.Update (Helper' GTime);  	m_BtnExit.Update (Helper' GTime);  }  
Magic Number,Gonzo.Dialogs,LoginDialog,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\LoginDialog.cs,Update,The following statement contains a magic number: if (Visible) {  	if (m_DoDrag) {  		Vector2 OffsetFromMouse = new Vector2 (60' 0);  		m_LblTitle.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  		OffsetFromMouse = new Vector2 (20' 50);  		m_LblUsername.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  		OffsetFromMouse = new Vector2 (20' 110);  		m_LblPassword.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  		OffsetFromMouse = new Vector2 (20' 85);  		m_TxtUsername.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  		OffsetFromMouse = new Vector2 (20' 145);  		m_TxtPassword.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  		OffsetFromMouse = new Vector2 (120' 170);  		m_BtnLogin.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  		OffsetFromMouse = new Vector2 (200' 170);  		m_BtnExit.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  	}  	/*m_TxtUsername.Update(Helper' GTime);                 m_TxtPassword.Update(Helper' GTime);*/m_BtnLogin.Update (Helper' GTime);  	m_BtnExit.Update (Helper' GTime);  }  
Magic Number,Gonzo.Dialogs,LoginDialog,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\LoginDialog.cs,Update,The following statement contains a magic number: if (Visible) {  	if (m_DoDrag) {  		Vector2 OffsetFromMouse = new Vector2 (60' 0);  		m_LblTitle.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  		OffsetFromMouse = new Vector2 (20' 50);  		m_LblUsername.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  		OffsetFromMouse = new Vector2 (20' 110);  		m_LblPassword.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  		OffsetFromMouse = new Vector2 (20' 85);  		m_TxtUsername.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  		OffsetFromMouse = new Vector2 (20' 145);  		m_TxtPassword.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  		OffsetFromMouse = new Vector2 (120' 170);  		m_BtnLogin.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  		OffsetFromMouse = new Vector2 (200' 170);  		m_BtnExit.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  	}  	/*m_TxtUsername.Update(Helper' GTime);                 m_TxtPassword.Update(Helper' GTime);*/m_BtnLogin.Update (Helper' GTime);  	m_BtnExit.Update (Helper' GTime);  }  
Magic Number,Gonzo.Dialogs,LoginDialog,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\LoginDialog.cs,Update,The following statement contains a magic number: if (Visible) {  	if (m_DoDrag) {  		Vector2 OffsetFromMouse = new Vector2 (60' 0);  		m_LblTitle.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  		OffsetFromMouse = new Vector2 (20' 50);  		m_LblUsername.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  		OffsetFromMouse = new Vector2 (20' 110);  		m_LblPassword.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  		OffsetFromMouse = new Vector2 (20' 85);  		m_TxtUsername.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  		OffsetFromMouse = new Vector2 (20' 145);  		m_TxtPassword.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  		OffsetFromMouse = new Vector2 (120' 170);  		m_BtnLogin.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  		OffsetFromMouse = new Vector2 (200' 170);  		m_BtnExit.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  	}  	/*m_TxtUsername.Update(Helper' GTime);                 m_TxtPassword.Update(Helper' GTime);*/m_BtnLogin.Update (Helper' GTime);  	m_BtnExit.Update (Helper' GTime);  }  
Magic Number,Gonzo.Dialogs,LoginDialog,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\LoginDialog.cs,Update,The following statement contains a magic number: if (Visible) {  	if (m_DoDrag) {  		Vector2 OffsetFromMouse = new Vector2 (60' 0);  		m_LblTitle.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  		OffsetFromMouse = new Vector2 (20' 50);  		m_LblUsername.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  		OffsetFromMouse = new Vector2 (20' 110);  		m_LblPassword.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  		OffsetFromMouse = new Vector2 (20' 85);  		m_TxtUsername.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  		OffsetFromMouse = new Vector2 (20' 145);  		m_TxtPassword.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  		OffsetFromMouse = new Vector2 (120' 170);  		m_BtnLogin.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  		OffsetFromMouse = new Vector2 (200' 170);  		m_BtnExit.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  	}  	/*m_TxtUsername.Update(Helper' GTime);                 m_TxtPassword.Update(Helper' GTime);*/m_BtnLogin.Update (Helper' GTime);  	m_BtnExit.Update (Helper' GTime);  }  
Magic Number,Gonzo.Dialogs,LoginDialog,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\LoginDialog.cs,Update,The following statement contains a magic number: if (Visible) {  	if (m_DoDrag) {  		Vector2 OffsetFromMouse = new Vector2 (60' 0);  		m_LblTitle.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  		OffsetFromMouse = new Vector2 (20' 50);  		m_LblUsername.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  		OffsetFromMouse = new Vector2 (20' 110);  		m_LblPassword.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  		OffsetFromMouse = new Vector2 (20' 85);  		m_TxtUsername.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  		OffsetFromMouse = new Vector2 (20' 145);  		m_TxtPassword.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  		OffsetFromMouse = new Vector2 (120' 170);  		m_BtnLogin.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  		OffsetFromMouse = new Vector2 (200' 170);  		m_BtnExit.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  	}  	/*m_TxtUsername.Update(Helper' GTime);                 m_TxtPassword.Update(Helper' GTime);*/m_BtnLogin.Update (Helper' GTime);  	m_BtnExit.Update (Helper' GTime);  }  
Magic Number,Gonzo.Dialogs,LoginDialog,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\LoginDialog.cs,Update,The following statement contains a magic number: if (Visible) {  	if (m_DoDrag) {  		Vector2 OffsetFromMouse = new Vector2 (60' 0);  		m_LblTitle.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  		OffsetFromMouse = new Vector2 (20' 50);  		m_LblUsername.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  		OffsetFromMouse = new Vector2 (20' 110);  		m_LblPassword.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  		OffsetFromMouse = new Vector2 (20' 85);  		m_TxtUsername.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  		OffsetFromMouse = new Vector2 (20' 145);  		m_TxtPassword.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  		OffsetFromMouse = new Vector2 (120' 170);  		m_BtnLogin.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  		OffsetFromMouse = new Vector2 (200' 170);  		m_BtnExit.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  	}  	/*m_TxtUsername.Update(Helper' GTime);                 m_TxtPassword.Update(Helper' GTime);*/m_BtnLogin.Update (Helper' GTime);  	m_BtnExit.Update (Helper' GTime);  }  
Magic Number,Gonzo.Dialogs,LoginDialog,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\LoginDialog.cs,Update,The following statement contains a magic number: if (Visible) {  	if (m_DoDrag) {  		Vector2 OffsetFromMouse = new Vector2 (60' 0);  		m_LblTitle.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  		OffsetFromMouse = new Vector2 (20' 50);  		m_LblUsername.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  		OffsetFromMouse = new Vector2 (20' 110);  		m_LblPassword.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  		OffsetFromMouse = new Vector2 (20' 85);  		m_TxtUsername.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  		OffsetFromMouse = new Vector2 (20' 145);  		m_TxtPassword.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  		OffsetFromMouse = new Vector2 (120' 170);  		m_BtnLogin.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  		OffsetFromMouse = new Vector2 (200' 170);  		m_BtnExit.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  	}  	/*m_TxtUsername.Update(Helper' GTime);                 m_TxtPassword.Update(Helper' GTime);*/m_BtnLogin.Update (Helper' GTime);  	m_BtnExit.Update (Helper' GTime);  }  
Magic Number,Gonzo.Dialogs,LoginDialog,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\LoginDialog.cs,Update,The following statement contains a magic number: if (m_DoDrag) {  	Vector2 OffsetFromMouse = new Vector2 (60' 0);  	m_LblTitle.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  	OffsetFromMouse = new Vector2 (20' 50);  	m_LblUsername.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  	OffsetFromMouse = new Vector2 (20' 110);  	m_LblPassword.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  	OffsetFromMouse = new Vector2 (20' 85);  	m_TxtUsername.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  	OffsetFromMouse = new Vector2 (20' 145);  	m_TxtPassword.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  	OffsetFromMouse = new Vector2 (120' 170);  	m_BtnLogin.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  	OffsetFromMouse = new Vector2 (200' 170);  	m_BtnExit.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  }  
Magic Number,Gonzo.Dialogs,LoginDialog,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\LoginDialog.cs,Update,The following statement contains a magic number: if (m_DoDrag) {  	Vector2 OffsetFromMouse = new Vector2 (60' 0);  	m_LblTitle.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  	OffsetFromMouse = new Vector2 (20' 50);  	m_LblUsername.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  	OffsetFromMouse = new Vector2 (20' 110);  	m_LblPassword.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  	OffsetFromMouse = new Vector2 (20' 85);  	m_TxtUsername.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  	OffsetFromMouse = new Vector2 (20' 145);  	m_TxtPassword.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  	OffsetFromMouse = new Vector2 (120' 170);  	m_BtnLogin.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  	OffsetFromMouse = new Vector2 (200' 170);  	m_BtnExit.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  }  
Magic Number,Gonzo.Dialogs,LoginDialog,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\LoginDialog.cs,Update,The following statement contains a magic number: if (m_DoDrag) {  	Vector2 OffsetFromMouse = new Vector2 (60' 0);  	m_LblTitle.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  	OffsetFromMouse = new Vector2 (20' 50);  	m_LblUsername.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  	OffsetFromMouse = new Vector2 (20' 110);  	m_LblPassword.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  	OffsetFromMouse = new Vector2 (20' 85);  	m_TxtUsername.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  	OffsetFromMouse = new Vector2 (20' 145);  	m_TxtPassword.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  	OffsetFromMouse = new Vector2 (120' 170);  	m_BtnLogin.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  	OffsetFromMouse = new Vector2 (200' 170);  	m_BtnExit.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  }  
Magic Number,Gonzo.Dialogs,LoginDialog,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\LoginDialog.cs,Update,The following statement contains a magic number: if (m_DoDrag) {  	Vector2 OffsetFromMouse = new Vector2 (60' 0);  	m_LblTitle.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  	OffsetFromMouse = new Vector2 (20' 50);  	m_LblUsername.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  	OffsetFromMouse = new Vector2 (20' 110);  	m_LblPassword.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  	OffsetFromMouse = new Vector2 (20' 85);  	m_TxtUsername.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  	OffsetFromMouse = new Vector2 (20' 145);  	m_TxtPassword.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  	OffsetFromMouse = new Vector2 (120' 170);  	m_BtnLogin.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  	OffsetFromMouse = new Vector2 (200' 170);  	m_BtnExit.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  }  
Magic Number,Gonzo.Dialogs,LoginDialog,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\LoginDialog.cs,Update,The following statement contains a magic number: if (m_DoDrag) {  	Vector2 OffsetFromMouse = new Vector2 (60' 0);  	m_LblTitle.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  	OffsetFromMouse = new Vector2 (20' 50);  	m_LblUsername.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  	OffsetFromMouse = new Vector2 (20' 110);  	m_LblPassword.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  	OffsetFromMouse = new Vector2 (20' 85);  	m_TxtUsername.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  	OffsetFromMouse = new Vector2 (20' 145);  	m_TxtPassword.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  	OffsetFromMouse = new Vector2 (120' 170);  	m_BtnLogin.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  	OffsetFromMouse = new Vector2 (200' 170);  	m_BtnExit.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  }  
Magic Number,Gonzo.Dialogs,LoginDialog,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\LoginDialog.cs,Update,The following statement contains a magic number: if (m_DoDrag) {  	Vector2 OffsetFromMouse = new Vector2 (60' 0);  	m_LblTitle.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  	OffsetFromMouse = new Vector2 (20' 50);  	m_LblUsername.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  	OffsetFromMouse = new Vector2 (20' 110);  	m_LblPassword.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  	OffsetFromMouse = new Vector2 (20' 85);  	m_TxtUsername.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  	OffsetFromMouse = new Vector2 (20' 145);  	m_TxtPassword.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  	OffsetFromMouse = new Vector2 (120' 170);  	m_BtnLogin.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  	OffsetFromMouse = new Vector2 (200' 170);  	m_BtnExit.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  }  
Magic Number,Gonzo.Dialogs,LoginDialog,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\LoginDialog.cs,Update,The following statement contains a magic number: if (m_DoDrag) {  	Vector2 OffsetFromMouse = new Vector2 (60' 0);  	m_LblTitle.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  	OffsetFromMouse = new Vector2 (20' 50);  	m_LblUsername.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  	OffsetFromMouse = new Vector2 (20' 110);  	m_LblPassword.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  	OffsetFromMouse = new Vector2 (20' 85);  	m_TxtUsername.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  	OffsetFromMouse = new Vector2 (20' 145);  	m_TxtPassword.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  	OffsetFromMouse = new Vector2 (120' 170);  	m_BtnLogin.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  	OffsetFromMouse = new Vector2 (200' 170);  	m_BtnExit.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  }  
Magic Number,Gonzo.Dialogs,LoginDialog,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\LoginDialog.cs,Update,The following statement contains a magic number: if (m_DoDrag) {  	Vector2 OffsetFromMouse = new Vector2 (60' 0);  	m_LblTitle.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  	OffsetFromMouse = new Vector2 (20' 50);  	m_LblUsername.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  	OffsetFromMouse = new Vector2 (20' 110);  	m_LblPassword.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  	OffsetFromMouse = new Vector2 (20' 85);  	m_TxtUsername.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  	OffsetFromMouse = new Vector2 (20' 145);  	m_TxtPassword.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  	OffsetFromMouse = new Vector2 (120' 170);  	m_BtnLogin.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  	OffsetFromMouse = new Vector2 (200' 170);  	m_BtnExit.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  }  
Magic Number,Gonzo.Dialogs,LoginDialog,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\LoginDialog.cs,Update,The following statement contains a magic number: if (m_DoDrag) {  	Vector2 OffsetFromMouse = new Vector2 (60' 0);  	m_LblTitle.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  	OffsetFromMouse = new Vector2 (20' 50);  	m_LblUsername.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  	OffsetFromMouse = new Vector2 (20' 110);  	m_LblPassword.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  	OffsetFromMouse = new Vector2 (20' 85);  	m_TxtUsername.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  	OffsetFromMouse = new Vector2 (20' 145);  	m_TxtPassword.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  	OffsetFromMouse = new Vector2 (120' 170);  	m_BtnLogin.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  	OffsetFromMouse = new Vector2 (200' 170);  	m_BtnExit.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  }  
Magic Number,Gonzo.Dialogs,LoginDialog,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\LoginDialog.cs,Update,The following statement contains a magic number: if (m_DoDrag) {  	Vector2 OffsetFromMouse = new Vector2 (60' 0);  	m_LblTitle.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  	OffsetFromMouse = new Vector2 (20' 50);  	m_LblUsername.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  	OffsetFromMouse = new Vector2 (20' 110);  	m_LblPassword.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  	OffsetFromMouse = new Vector2 (20' 85);  	m_TxtUsername.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  	OffsetFromMouse = new Vector2 (20' 145);  	m_TxtPassword.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  	OffsetFromMouse = new Vector2 (120' 170);  	m_BtnLogin.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  	OffsetFromMouse = new Vector2 (200' 170);  	m_BtnExit.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  }  
Magic Number,Gonzo.Dialogs,LoginDialog,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\LoginDialog.cs,Update,The following statement contains a magic number: if (m_DoDrag) {  	Vector2 OffsetFromMouse = new Vector2 (60' 0);  	m_LblTitle.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  	OffsetFromMouse = new Vector2 (20' 50);  	m_LblUsername.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  	OffsetFromMouse = new Vector2 (20' 110);  	m_LblPassword.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  	OffsetFromMouse = new Vector2 (20' 85);  	m_TxtUsername.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  	OffsetFromMouse = new Vector2 (20' 145);  	m_TxtPassword.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  	OffsetFromMouse = new Vector2 (120' 170);  	m_BtnLogin.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  	OffsetFromMouse = new Vector2 (200' 170);  	m_BtnExit.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  }  
Magic Number,Gonzo.Dialogs,LoginDialog,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\LoginDialog.cs,Update,The following statement contains a magic number: if (m_DoDrag) {  	Vector2 OffsetFromMouse = new Vector2 (60' 0);  	m_LblTitle.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  	OffsetFromMouse = new Vector2 (20' 50);  	m_LblUsername.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  	OffsetFromMouse = new Vector2 (20' 110);  	m_LblPassword.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  	OffsetFromMouse = new Vector2 (20' 85);  	m_TxtUsername.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  	OffsetFromMouse = new Vector2 (20' 145);  	m_TxtPassword.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  	OffsetFromMouse = new Vector2 (120' 170);  	m_BtnLogin.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  	OffsetFromMouse = new Vector2 (200' 170);  	m_BtnExit.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  }  
Magic Number,Gonzo.Dialogs,LoginDialog,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\LoginDialog.cs,Update,The following statement contains a magic number: if (m_DoDrag) {  	Vector2 OffsetFromMouse = new Vector2 (60' 0);  	m_LblTitle.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  	OffsetFromMouse = new Vector2 (20' 50);  	m_LblUsername.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  	OffsetFromMouse = new Vector2 (20' 110);  	m_LblPassword.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  	OffsetFromMouse = new Vector2 (20' 85);  	m_TxtUsername.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  	OffsetFromMouse = new Vector2 (20' 145);  	m_TxtPassword.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  	OffsetFromMouse = new Vector2 (120' 170);  	m_BtnLogin.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  	OffsetFromMouse = new Vector2 (200' 170);  	m_BtnExit.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  }  
Magic Number,Gonzo.Dialogs,LoginDialog,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\LoginDialog.cs,Update,The following statement contains a magic number: OffsetFromMouse = new Vector2 (20' 50);  
Magic Number,Gonzo.Dialogs,LoginDialog,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\LoginDialog.cs,Update,The following statement contains a magic number: OffsetFromMouse = new Vector2 (20' 50);  
Magic Number,Gonzo.Dialogs,LoginDialog,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\LoginDialog.cs,Update,The following statement contains a magic number: OffsetFromMouse = new Vector2 (20' 110);  
Magic Number,Gonzo.Dialogs,LoginDialog,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\LoginDialog.cs,Update,The following statement contains a magic number: OffsetFromMouse = new Vector2 (20' 110);  
Magic Number,Gonzo.Dialogs,LoginDialog,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\LoginDialog.cs,Update,The following statement contains a magic number: OffsetFromMouse = new Vector2 (20' 85);  
Magic Number,Gonzo.Dialogs,LoginDialog,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\LoginDialog.cs,Update,The following statement contains a magic number: OffsetFromMouse = new Vector2 (20' 85);  
Magic Number,Gonzo.Dialogs,LoginDialog,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\LoginDialog.cs,Update,The following statement contains a magic number: OffsetFromMouse = new Vector2 (20' 145);  
Magic Number,Gonzo.Dialogs,LoginDialog,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\LoginDialog.cs,Update,The following statement contains a magic number: OffsetFromMouse = new Vector2 (20' 145);  
Magic Number,Gonzo.Dialogs,LoginDialog,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\LoginDialog.cs,Update,The following statement contains a magic number: OffsetFromMouse = new Vector2 (120' 170);  
Magic Number,Gonzo.Dialogs,LoginDialog,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\LoginDialog.cs,Update,The following statement contains a magic number: OffsetFromMouse = new Vector2 (120' 170);  
Magic Number,Gonzo.Dialogs,LoginDialog,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\LoginDialog.cs,Update,The following statement contains a magic number: OffsetFromMouse = new Vector2 (200' 170);  
Magic Number,Gonzo.Dialogs,LoginDialog,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\LoginDialog.cs,Update,The following statement contains a magic number: OffsetFromMouse = new Vector2 (200' 170);  
Magic Number,Gonzo.Dialogs,UIDialog,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\UIDialog.cs,UIDialog,The following statement contains a magic number: if (IsTall != false)  	Image.Slicer = new NineSlicer (new Vector2 (0' 0)' Tex.Width' Tex.Height' 41' 41' 66' 40);  else  	Image.Slicer = new NineSlicer (new Vector2 (0' 0)' Tex.Width' Tex.Height' 41' 41' 60' 40);  
Magic Number,Gonzo.Dialogs,UIDialog,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\UIDialog.cs,UIDialog,The following statement contains a magic number: if (IsTall != false)  	Image.Slicer = new NineSlicer (new Vector2 (0' 0)' Tex.Width' Tex.Height' 41' 41' 66' 40);  else  	Image.Slicer = new NineSlicer (new Vector2 (0' 0)' Tex.Width' Tex.Height' 41' 41' 60' 40);  
Magic Number,Gonzo.Dialogs,UIDialog,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\UIDialog.cs,UIDialog,The following statement contains a magic number: if (IsTall != false)  	Image.Slicer = new NineSlicer (new Vector2 (0' 0)' Tex.Width' Tex.Height' 41' 41' 66' 40);  else  	Image.Slicer = new NineSlicer (new Vector2 (0' 0)' Tex.Width' Tex.Height' 41' 41' 60' 40);  
Magic Number,Gonzo.Dialogs,UIDialog,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\UIDialog.cs,UIDialog,The following statement contains a magic number: if (IsTall != false)  	Image.Slicer = new NineSlicer (new Vector2 (0' 0)' Tex.Width' Tex.Height' 41' 41' 66' 40);  else  	Image.Slicer = new NineSlicer (new Vector2 (0' 0)' Tex.Width' Tex.Height' 41' 41' 60' 40);  
Magic Number,Gonzo.Dialogs,UIDialog,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\UIDialog.cs,UIDialog,The following statement contains a magic number: if (IsTall != false)  	Image.Slicer = new NineSlicer (new Vector2 (0' 0)' Tex.Width' Tex.Height' 41' 41' 66' 40);  else  	Image.Slicer = new NineSlicer (new Vector2 (0' 0)' Tex.Width' Tex.Height' 41' 41' 60' 40);  
Magic Number,Gonzo.Dialogs,UIDialog,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\UIDialog.cs,UIDialog,The following statement contains a magic number: if (IsTall != false)  	Image.Slicer = new NineSlicer (new Vector2 (0' 0)' Tex.Width' Tex.Height' 41' 41' 66' 40);  else  	Image.Slicer = new NineSlicer (new Vector2 (0' 0)' Tex.Width' Tex.Height' 41' 41' 60' 40);  
Magic Number,Gonzo.Dialogs,UIDialog,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\UIDialog.cs,UIDialog,The following statement contains a magic number: if (IsTall != false)  	Image.Slicer = new NineSlicer (new Vector2 (0' 0)' Tex.Width' Tex.Height' 41' 41' 66' 40);  else  	Image.Slicer = new NineSlicer (new Vector2 (0' 0)' Tex.Width' Tex.Height' 41' 41' 60' 40);  
Magic Number,Gonzo.Dialogs,UIDialog,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\UIDialog.cs,UIDialog,The following statement contains a magic number: if (IsTall != false)  	Image.Slicer = new NineSlicer (new Vector2 (0' 0)' Tex.Width' Tex.Height' 41' 41' 66' 40);  else  	Image.Slicer = new NineSlicer (new Vector2 (0' 0)' Tex.Width' Tex.Height' 41' 41' 60' 40);  
Magic Number,Gonzo.Dialogs,UIDialog,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\UIDialog.cs,UIDialog,The following statement contains a magic number: Image.Slicer = new NineSlicer (new Vector2 (0' 0)' Tex.Width' Tex.Height' 41' 41' 66' 40);  
Magic Number,Gonzo.Dialogs,UIDialog,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\UIDialog.cs,UIDialog,The following statement contains a magic number: Image.Slicer = new NineSlicer (new Vector2 (0' 0)' Tex.Width' Tex.Height' 41' 41' 66' 40);  
Magic Number,Gonzo.Dialogs,UIDialog,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\UIDialog.cs,UIDialog,The following statement contains a magic number: Image.Slicer = new NineSlicer (new Vector2 (0' 0)' Tex.Width' Tex.Height' 41' 41' 66' 40);  
Magic Number,Gonzo.Dialogs,UIDialog,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\UIDialog.cs,UIDialog,The following statement contains a magic number: Image.Slicer = new NineSlicer (new Vector2 (0' 0)' Tex.Width' Tex.Height' 41' 41' 66' 40);  
Magic Number,Gonzo.Dialogs,UIDialog,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\UIDialog.cs,UIDialog,The following statement contains a magic number: Image.Slicer = new NineSlicer (new Vector2 (0' 0)' Tex.Width' Tex.Height' 41' 41' 60' 40);  
Magic Number,Gonzo.Dialogs,UIDialog,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\UIDialog.cs,UIDialog,The following statement contains a magic number: Image.Slicer = new NineSlicer (new Vector2 (0' 0)' Tex.Width' Tex.Height' 41' 41' 60' 40);  
Magic Number,Gonzo.Dialogs,UIDialog,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\UIDialog.cs,UIDialog,The following statement contains a magic number: Image.Slicer = new NineSlicer (new Vector2 (0' 0)' Tex.Width' Tex.Height' 41' 41' 60' 40);  
Magic Number,Gonzo.Dialogs,UIDialog,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\UIDialog.cs,UIDialog,The following statement contains a magic number: Image.Slicer = new NineSlicer (new Vector2 (0' 0)' Tex.Width' Tex.Height' 41' 41' 60' 40);  
Magic Number,Gonzo.Dialogs,UIDialog,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\UIDialog.cs,CenterAround,The following statement contains a magic number: this.Position = new Vector2 (OffsetX + TopLeft.X + ((Element.Size.X - m_Size.X) / 2)' OffsetY + TopLeft.Y + ((Element.Size.Y - m_Size.Y) / 2));  
Magic Number,Gonzo.Dialogs,UIDialog,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\UIDialog.cs,CenterAround,The following statement contains a magic number: this.Position = new Vector2 (OffsetX + TopLeft.X + ((Element.Size.X - m_Size.X) / 2)' OffsetY + TopLeft.Y + ((Element.Size.Y - m_Size.Y) / 2));  
Magic Number,Gonzo.Dialogs,WillWrightDiag,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\WillWrightDiag.cs,WillWrightDiag,The following statement contains a magic number: Image.SetSize (m_WillWrightImg.Texture.Width + 50' m_WillWrightImg.Texture.Height + 55);  
Magic Number,Gonzo.Dialogs,WillWrightDiag,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\WillWrightDiag.cs,WillWrightDiag,The following statement contains a magic number: Image.SetSize (m_WillWrightImg.Texture.Width + 50' m_WillWrightImg.Texture.Height + 55);  
Magic Number,Gonzo.Dialogs,WillWrightDiag,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\WillWrightDiag.cs,WillWrightDiag,The following statement contains a magic number: CenterAround (m_WillWrightImg' -22' -42);  
Magic Number,Gonzo.Dialogs,WillWrightDiag,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\WillWrightDiag.cs,WillWrightDiag,The following statement contains a magic number: CenterAround (m_WillWrightImg' -22' -42);  
Magic Number,Gonzo.Dialogs,WillWrightDiag,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\WillWrightDiag.cs,Update,The following statement contains a magic number: if (Visible) {  	if (m_DoDrag)  		m_WillWrightImg.Position = Position - new Vector2 (-22' -42);  }  
Magic Number,Gonzo.Dialogs,WillWrightDiag,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\WillWrightDiag.cs,Update,The following statement contains a magic number: if (Visible) {  	if (m_DoDrag)  		m_WillWrightImg.Position = Position - new Vector2 (-22' -42);  }  
Magic Number,Gonzo.Dialogs,WillWrightDiag,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\WillWrightDiag.cs,Update,The following statement contains a magic number: if (m_DoDrag)  	m_WillWrightImg.Position = Position - new Vector2 (-22' -42);  
Magic Number,Gonzo.Dialogs,WillWrightDiag,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\WillWrightDiag.cs,Update,The following statement contains a magic number: if (m_DoDrag)  	m_WillWrightImg.Position = Position - new Vector2 (-22' -42);  
Magic Number,Gonzo.Dialogs,WillWrightDiag,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\WillWrightDiag.cs,Update,The following statement contains a magic number: m_WillWrightImg.Position = Position - new Vector2 (-22' -42);  
Magic Number,Gonzo.Dialogs,WillWrightDiag,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\WillWrightDiag.cs,Update,The following statement contains a magic number: m_WillWrightImg.Position = Position - new Vector2 (-22' -42);  
Magic Number,Gonzo.Dialogs,ExitDialog,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\ExitDialog.cs,ExitDialog,The following statement contains a magic number: m_ReloginButton.Position += new Vector2 (30' 120);  
Magic Number,Gonzo.Dialogs,ExitDialog,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\ExitDialog.cs,ExitDialog,The following statement contains a magic number: m_ReloginButton.Position += new Vector2 (30' 120);  
Magic Number,Gonzo.Dialogs,ExitDialog,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\ExitDialog.cs,ExitDialog,The following statement contains a magic number: m_ExitButton.Position += new Vector2 (160' 120);  
Magic Number,Gonzo.Dialogs,ExitDialog,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\ExitDialog.cs,ExitDialog,The following statement contains a magic number: m_ExitButton.Position += new Vector2 (160' 120);  
Magic Number,Gonzo.Dialogs,ExitDialog,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\ExitDialog.cs,ExitDialog,The following statement contains a magic number: m_CancelButton.Position += new Vector2 (350' 120);  
Magic Number,Gonzo.Dialogs,ExitDialog,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\ExitDialog.cs,ExitDialog,The following statement contains a magic number: m_CancelButton.Position += new Vector2 (350' 120);  
Magic Number,Gonzo.Dialogs,ExitDialog,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\ExitDialog.cs,Update,The following statement contains a magic number: if (Visible) {  	m_ReloginButton.Update (Helper' GTime);  	m_ExitButton.Update (Helper' GTime);  	m_CancelButton.Update (Helper' GTime);  	if (m_DoDrag) {  		Vector2 OffsetFromMouse = new Vector2 (30' 120);  		m_ReloginButton.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  		OffsetFromMouse = new Vector2 (160' 120);  		m_ExitButton.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  		OffsetFromMouse = new Vector2 (350' 120);  		m_CancelButton.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  		OffsetFromMouse = new Vector2 (60' 6);  		m_TitleText.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  		OffsetFromMouse = new Vector2 (60' 48);  		m_MessageText.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  	}  }  
Magic Number,Gonzo.Dialogs,ExitDialog,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\ExitDialog.cs,Update,The following statement contains a magic number: if (Visible) {  	m_ReloginButton.Update (Helper' GTime);  	m_ExitButton.Update (Helper' GTime);  	m_CancelButton.Update (Helper' GTime);  	if (m_DoDrag) {  		Vector2 OffsetFromMouse = new Vector2 (30' 120);  		m_ReloginButton.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  		OffsetFromMouse = new Vector2 (160' 120);  		m_ExitButton.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  		OffsetFromMouse = new Vector2 (350' 120);  		m_CancelButton.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  		OffsetFromMouse = new Vector2 (60' 6);  		m_TitleText.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  		OffsetFromMouse = new Vector2 (60' 48);  		m_MessageText.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  	}  }  
Magic Number,Gonzo.Dialogs,ExitDialog,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\ExitDialog.cs,Update,The following statement contains a magic number: if (Visible) {  	m_ReloginButton.Update (Helper' GTime);  	m_ExitButton.Update (Helper' GTime);  	m_CancelButton.Update (Helper' GTime);  	if (m_DoDrag) {  		Vector2 OffsetFromMouse = new Vector2 (30' 120);  		m_ReloginButton.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  		OffsetFromMouse = new Vector2 (160' 120);  		m_ExitButton.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  		OffsetFromMouse = new Vector2 (350' 120);  		m_CancelButton.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  		OffsetFromMouse = new Vector2 (60' 6);  		m_TitleText.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  		OffsetFromMouse = new Vector2 (60' 48);  		m_MessageText.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  	}  }  
Magic Number,Gonzo.Dialogs,ExitDialog,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\ExitDialog.cs,Update,The following statement contains a magic number: if (Visible) {  	m_ReloginButton.Update (Helper' GTime);  	m_ExitButton.Update (Helper' GTime);  	m_CancelButton.Update (Helper' GTime);  	if (m_DoDrag) {  		Vector2 OffsetFromMouse = new Vector2 (30' 120);  		m_ReloginButton.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  		OffsetFromMouse = new Vector2 (160' 120);  		m_ExitButton.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  		OffsetFromMouse = new Vector2 (350' 120);  		m_CancelButton.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  		OffsetFromMouse = new Vector2 (60' 6);  		m_TitleText.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  		OffsetFromMouse = new Vector2 (60' 48);  		m_MessageText.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  	}  }  
Magic Number,Gonzo.Dialogs,ExitDialog,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\ExitDialog.cs,Update,The following statement contains a magic number: if (Visible) {  	m_ReloginButton.Update (Helper' GTime);  	m_ExitButton.Update (Helper' GTime);  	m_CancelButton.Update (Helper' GTime);  	if (m_DoDrag) {  		Vector2 OffsetFromMouse = new Vector2 (30' 120);  		m_ReloginButton.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  		OffsetFromMouse = new Vector2 (160' 120);  		m_ExitButton.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  		OffsetFromMouse = new Vector2 (350' 120);  		m_CancelButton.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  		OffsetFromMouse = new Vector2 (60' 6);  		m_TitleText.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  		OffsetFromMouse = new Vector2 (60' 48);  		m_MessageText.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  	}  }  
Magic Number,Gonzo.Dialogs,ExitDialog,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\ExitDialog.cs,Update,The following statement contains a magic number: if (Visible) {  	m_ReloginButton.Update (Helper' GTime);  	m_ExitButton.Update (Helper' GTime);  	m_CancelButton.Update (Helper' GTime);  	if (m_DoDrag) {  		Vector2 OffsetFromMouse = new Vector2 (30' 120);  		m_ReloginButton.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  		OffsetFromMouse = new Vector2 (160' 120);  		m_ExitButton.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  		OffsetFromMouse = new Vector2 (350' 120);  		m_CancelButton.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  		OffsetFromMouse = new Vector2 (60' 6);  		m_TitleText.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  		OffsetFromMouse = new Vector2 (60' 48);  		m_MessageText.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  	}  }  
Magic Number,Gonzo.Dialogs,ExitDialog,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\ExitDialog.cs,Update,The following statement contains a magic number: if (Visible) {  	m_ReloginButton.Update (Helper' GTime);  	m_ExitButton.Update (Helper' GTime);  	m_CancelButton.Update (Helper' GTime);  	if (m_DoDrag) {  		Vector2 OffsetFromMouse = new Vector2 (30' 120);  		m_ReloginButton.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  		OffsetFromMouse = new Vector2 (160' 120);  		m_ExitButton.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  		OffsetFromMouse = new Vector2 (350' 120);  		m_CancelButton.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  		OffsetFromMouse = new Vector2 (60' 6);  		m_TitleText.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  		OffsetFromMouse = new Vector2 (60' 48);  		m_MessageText.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  	}  }  
Magic Number,Gonzo.Dialogs,ExitDialog,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\ExitDialog.cs,Update,The following statement contains a magic number: if (Visible) {  	m_ReloginButton.Update (Helper' GTime);  	m_ExitButton.Update (Helper' GTime);  	m_CancelButton.Update (Helper' GTime);  	if (m_DoDrag) {  		Vector2 OffsetFromMouse = new Vector2 (30' 120);  		m_ReloginButton.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  		OffsetFromMouse = new Vector2 (160' 120);  		m_ExitButton.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  		OffsetFromMouse = new Vector2 (350' 120);  		m_CancelButton.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  		OffsetFromMouse = new Vector2 (60' 6);  		m_TitleText.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  		OffsetFromMouse = new Vector2 (60' 48);  		m_MessageText.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  	}  }  
Magic Number,Gonzo.Dialogs,ExitDialog,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\ExitDialog.cs,Update,The following statement contains a magic number: if (Visible) {  	m_ReloginButton.Update (Helper' GTime);  	m_ExitButton.Update (Helper' GTime);  	m_CancelButton.Update (Helper' GTime);  	if (m_DoDrag) {  		Vector2 OffsetFromMouse = new Vector2 (30' 120);  		m_ReloginButton.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  		OffsetFromMouse = new Vector2 (160' 120);  		m_ExitButton.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  		OffsetFromMouse = new Vector2 (350' 120);  		m_CancelButton.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  		OffsetFromMouse = new Vector2 (60' 6);  		m_TitleText.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  		OffsetFromMouse = new Vector2 (60' 48);  		m_MessageText.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  	}  }  
Magic Number,Gonzo.Dialogs,ExitDialog,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\ExitDialog.cs,Update,The following statement contains a magic number: if (Visible) {  	m_ReloginButton.Update (Helper' GTime);  	m_ExitButton.Update (Helper' GTime);  	m_CancelButton.Update (Helper' GTime);  	if (m_DoDrag) {  		Vector2 OffsetFromMouse = new Vector2 (30' 120);  		m_ReloginButton.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  		OffsetFromMouse = new Vector2 (160' 120);  		m_ExitButton.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  		OffsetFromMouse = new Vector2 (350' 120);  		m_CancelButton.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  		OffsetFromMouse = new Vector2 (60' 6);  		m_TitleText.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  		OffsetFromMouse = new Vector2 (60' 48);  		m_MessageText.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  	}  }  
Magic Number,Gonzo.Dialogs,ExitDialog,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\ExitDialog.cs,Update,The following statement contains a magic number: if (m_DoDrag) {  	Vector2 OffsetFromMouse = new Vector2 (30' 120);  	m_ReloginButton.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  	OffsetFromMouse = new Vector2 (160' 120);  	m_ExitButton.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  	OffsetFromMouse = new Vector2 (350' 120);  	m_CancelButton.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  	OffsetFromMouse = new Vector2 (60' 6);  	m_TitleText.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  	OffsetFromMouse = new Vector2 (60' 48);  	m_MessageText.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  }  
Magic Number,Gonzo.Dialogs,ExitDialog,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\ExitDialog.cs,Update,The following statement contains a magic number: if (m_DoDrag) {  	Vector2 OffsetFromMouse = new Vector2 (30' 120);  	m_ReloginButton.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  	OffsetFromMouse = new Vector2 (160' 120);  	m_ExitButton.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  	OffsetFromMouse = new Vector2 (350' 120);  	m_CancelButton.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  	OffsetFromMouse = new Vector2 (60' 6);  	m_TitleText.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  	OffsetFromMouse = new Vector2 (60' 48);  	m_MessageText.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  }  
Magic Number,Gonzo.Dialogs,ExitDialog,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\ExitDialog.cs,Update,The following statement contains a magic number: if (m_DoDrag) {  	Vector2 OffsetFromMouse = new Vector2 (30' 120);  	m_ReloginButton.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  	OffsetFromMouse = new Vector2 (160' 120);  	m_ExitButton.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  	OffsetFromMouse = new Vector2 (350' 120);  	m_CancelButton.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  	OffsetFromMouse = new Vector2 (60' 6);  	m_TitleText.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  	OffsetFromMouse = new Vector2 (60' 48);  	m_MessageText.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  }  
Magic Number,Gonzo.Dialogs,ExitDialog,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\ExitDialog.cs,Update,The following statement contains a magic number: if (m_DoDrag) {  	Vector2 OffsetFromMouse = new Vector2 (30' 120);  	m_ReloginButton.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  	OffsetFromMouse = new Vector2 (160' 120);  	m_ExitButton.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  	OffsetFromMouse = new Vector2 (350' 120);  	m_CancelButton.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  	OffsetFromMouse = new Vector2 (60' 6);  	m_TitleText.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  	OffsetFromMouse = new Vector2 (60' 48);  	m_MessageText.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  }  
Magic Number,Gonzo.Dialogs,ExitDialog,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\ExitDialog.cs,Update,The following statement contains a magic number: if (m_DoDrag) {  	Vector2 OffsetFromMouse = new Vector2 (30' 120);  	m_ReloginButton.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  	OffsetFromMouse = new Vector2 (160' 120);  	m_ExitButton.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  	OffsetFromMouse = new Vector2 (350' 120);  	m_CancelButton.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  	OffsetFromMouse = new Vector2 (60' 6);  	m_TitleText.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  	OffsetFromMouse = new Vector2 (60' 48);  	m_MessageText.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  }  
Magic Number,Gonzo.Dialogs,ExitDialog,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\ExitDialog.cs,Update,The following statement contains a magic number: if (m_DoDrag) {  	Vector2 OffsetFromMouse = new Vector2 (30' 120);  	m_ReloginButton.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  	OffsetFromMouse = new Vector2 (160' 120);  	m_ExitButton.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  	OffsetFromMouse = new Vector2 (350' 120);  	m_CancelButton.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  	OffsetFromMouse = new Vector2 (60' 6);  	m_TitleText.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  	OffsetFromMouse = new Vector2 (60' 48);  	m_MessageText.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  }  
Magic Number,Gonzo.Dialogs,ExitDialog,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\ExitDialog.cs,Update,The following statement contains a magic number: if (m_DoDrag) {  	Vector2 OffsetFromMouse = new Vector2 (30' 120);  	m_ReloginButton.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  	OffsetFromMouse = new Vector2 (160' 120);  	m_ExitButton.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  	OffsetFromMouse = new Vector2 (350' 120);  	m_CancelButton.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  	OffsetFromMouse = new Vector2 (60' 6);  	m_TitleText.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  	OffsetFromMouse = new Vector2 (60' 48);  	m_MessageText.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  }  
Magic Number,Gonzo.Dialogs,ExitDialog,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\ExitDialog.cs,Update,The following statement contains a magic number: if (m_DoDrag) {  	Vector2 OffsetFromMouse = new Vector2 (30' 120);  	m_ReloginButton.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  	OffsetFromMouse = new Vector2 (160' 120);  	m_ExitButton.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  	OffsetFromMouse = new Vector2 (350' 120);  	m_CancelButton.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  	OffsetFromMouse = new Vector2 (60' 6);  	m_TitleText.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  	OffsetFromMouse = new Vector2 (60' 48);  	m_MessageText.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  }  
Magic Number,Gonzo.Dialogs,ExitDialog,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\ExitDialog.cs,Update,The following statement contains a magic number: if (m_DoDrag) {  	Vector2 OffsetFromMouse = new Vector2 (30' 120);  	m_ReloginButton.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  	OffsetFromMouse = new Vector2 (160' 120);  	m_ExitButton.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  	OffsetFromMouse = new Vector2 (350' 120);  	m_CancelButton.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  	OffsetFromMouse = new Vector2 (60' 6);  	m_TitleText.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  	OffsetFromMouse = new Vector2 (60' 48);  	m_MessageText.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  }  
Magic Number,Gonzo.Dialogs,ExitDialog,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\ExitDialog.cs,Update,The following statement contains a magic number: if (m_DoDrag) {  	Vector2 OffsetFromMouse = new Vector2 (30' 120);  	m_ReloginButton.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  	OffsetFromMouse = new Vector2 (160' 120);  	m_ExitButton.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  	OffsetFromMouse = new Vector2 (350' 120);  	m_CancelButton.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  	OffsetFromMouse = new Vector2 (60' 6);  	m_TitleText.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  	OffsetFromMouse = new Vector2 (60' 48);  	m_MessageText.Position = (Helper.MousePosition + OffsetFromMouse) - m_DragOffset;  }  
Magic Number,Gonzo.Dialogs,ExitDialog,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\ExitDialog.cs,Update,The following statement contains a magic number: OffsetFromMouse = new Vector2 (160' 120);  
Magic Number,Gonzo.Dialogs,ExitDialog,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\ExitDialog.cs,Update,The following statement contains a magic number: OffsetFromMouse = new Vector2 (160' 120);  
Magic Number,Gonzo.Dialogs,ExitDialog,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\ExitDialog.cs,Update,The following statement contains a magic number: OffsetFromMouse = new Vector2 (350' 120);  
Magic Number,Gonzo.Dialogs,ExitDialog,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\ExitDialog.cs,Update,The following statement contains a magic number: OffsetFromMouse = new Vector2 (350' 120);  
Magic Number,Gonzo.Dialogs,ExitDialog,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\ExitDialog.cs,Update,The following statement contains a magic number: OffsetFromMouse = new Vector2 (60' 6);  
Magic Number,Gonzo.Dialogs,ExitDialog,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\ExitDialog.cs,Update,The following statement contains a magic number: OffsetFromMouse = new Vector2 (60' 6);  
Magic Number,Gonzo.Dialogs,ExitDialog,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\ExitDialog.cs,Update,The following statement contains a magic number: OffsetFromMouse = new Vector2 (60' 48);  
Magic Number,Gonzo.Dialogs,ExitDialog,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\ExitDialog.cs,Update,The following statement contains a magic number: OffsetFromMouse = new Vector2 (60' 48);  
Magic Number,Gonzo.Dialogs,ExitDialog,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\ExitDialog.cs,Draw,The following statement contains a magic number: if (Visible) {  	float Depth;  	if (LayerDepth != null)  		Depth = (float)LayerDepth;  	else  		Depth = 0.10f;  	if (Visible) {  		m_ReloginButton.Draw (SBatch' (float)(Depth + 0.1));  		m_ExitButton.Draw (SBatch' (float)(Depth + 0.1));  		m_CancelButton.Draw (SBatch' (float)(Depth + 0.1));  		m_TitleText.Draw (SBatch' (float)(Depth + 0.1));  		m_MessageText.Draw (SBatch' (float)(Depth + 0.1));  	}  	base.Draw (SBatch' LayerDepth);  }  
Magic Number,Gonzo.Dialogs,ExitDialog,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\ExitDialog.cs,Draw,The following statement contains a magic number: if (Visible) {  	float Depth;  	if (LayerDepth != null)  		Depth = (float)LayerDepth;  	else  		Depth = 0.10f;  	if (Visible) {  		m_ReloginButton.Draw (SBatch' (float)(Depth + 0.1));  		m_ExitButton.Draw (SBatch' (float)(Depth + 0.1));  		m_CancelButton.Draw (SBatch' (float)(Depth + 0.1));  		m_TitleText.Draw (SBatch' (float)(Depth + 0.1));  		m_MessageText.Draw (SBatch' (float)(Depth + 0.1));  	}  	base.Draw (SBatch' LayerDepth);  }  
Magic Number,Gonzo.Dialogs,ExitDialog,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\ExitDialog.cs,Draw,The following statement contains a magic number: if (Visible) {  	float Depth;  	if (LayerDepth != null)  		Depth = (float)LayerDepth;  	else  		Depth = 0.10f;  	if (Visible) {  		m_ReloginButton.Draw (SBatch' (float)(Depth + 0.1));  		m_ExitButton.Draw (SBatch' (float)(Depth + 0.1));  		m_CancelButton.Draw (SBatch' (float)(Depth + 0.1));  		m_TitleText.Draw (SBatch' (float)(Depth + 0.1));  		m_MessageText.Draw (SBatch' (float)(Depth + 0.1));  	}  	base.Draw (SBatch' LayerDepth);  }  
Magic Number,Gonzo.Dialogs,ExitDialog,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\ExitDialog.cs,Draw,The following statement contains a magic number: if (Visible) {  	float Depth;  	if (LayerDepth != null)  		Depth = (float)LayerDepth;  	else  		Depth = 0.10f;  	if (Visible) {  		m_ReloginButton.Draw (SBatch' (float)(Depth + 0.1));  		m_ExitButton.Draw (SBatch' (float)(Depth + 0.1));  		m_CancelButton.Draw (SBatch' (float)(Depth + 0.1));  		m_TitleText.Draw (SBatch' (float)(Depth + 0.1));  		m_MessageText.Draw (SBatch' (float)(Depth + 0.1));  	}  	base.Draw (SBatch' LayerDepth);  }  
Magic Number,Gonzo.Dialogs,ExitDialog,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\ExitDialog.cs,Draw,The following statement contains a magic number: if (Visible) {  	float Depth;  	if (LayerDepth != null)  		Depth = (float)LayerDepth;  	else  		Depth = 0.10f;  	if (Visible) {  		m_ReloginButton.Draw (SBatch' (float)(Depth + 0.1));  		m_ExitButton.Draw (SBatch' (float)(Depth + 0.1));  		m_CancelButton.Draw (SBatch' (float)(Depth + 0.1));  		m_TitleText.Draw (SBatch' (float)(Depth + 0.1));  		m_MessageText.Draw (SBatch' (float)(Depth + 0.1));  	}  	base.Draw (SBatch' LayerDepth);  }  
Magic Number,Gonzo.Dialogs,ExitDialog,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\ExitDialog.cs,Draw,The following statement contains a magic number: if (Visible) {  	m_ReloginButton.Draw (SBatch' (float)(Depth + 0.1));  	m_ExitButton.Draw (SBatch' (float)(Depth + 0.1));  	m_CancelButton.Draw (SBatch' (float)(Depth + 0.1));  	m_TitleText.Draw (SBatch' (float)(Depth + 0.1));  	m_MessageText.Draw (SBatch' (float)(Depth + 0.1));  }  
Magic Number,Gonzo.Dialogs,ExitDialog,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\ExitDialog.cs,Draw,The following statement contains a magic number: if (Visible) {  	m_ReloginButton.Draw (SBatch' (float)(Depth + 0.1));  	m_ExitButton.Draw (SBatch' (float)(Depth + 0.1));  	m_CancelButton.Draw (SBatch' (float)(Depth + 0.1));  	m_TitleText.Draw (SBatch' (float)(Depth + 0.1));  	m_MessageText.Draw (SBatch' (float)(Depth + 0.1));  }  
Magic Number,Gonzo.Dialogs,ExitDialog,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\ExitDialog.cs,Draw,The following statement contains a magic number: if (Visible) {  	m_ReloginButton.Draw (SBatch' (float)(Depth + 0.1));  	m_ExitButton.Draw (SBatch' (float)(Depth + 0.1));  	m_CancelButton.Draw (SBatch' (float)(Depth + 0.1));  	m_TitleText.Draw (SBatch' (float)(Depth + 0.1));  	m_MessageText.Draw (SBatch' (float)(Depth + 0.1));  }  
Magic Number,Gonzo.Dialogs,ExitDialog,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\ExitDialog.cs,Draw,The following statement contains a magic number: if (Visible) {  	m_ReloginButton.Draw (SBatch' (float)(Depth + 0.1));  	m_ExitButton.Draw (SBatch' (float)(Depth + 0.1));  	m_CancelButton.Draw (SBatch' (float)(Depth + 0.1));  	m_TitleText.Draw (SBatch' (float)(Depth + 0.1));  	m_MessageText.Draw (SBatch' (float)(Depth + 0.1));  }  
Magic Number,Gonzo.Dialogs,ExitDialog,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\ExitDialog.cs,Draw,The following statement contains a magic number: if (Visible) {  	m_ReloginButton.Draw (SBatch' (float)(Depth + 0.1));  	m_ExitButton.Draw (SBatch' (float)(Depth + 0.1));  	m_CancelButton.Draw (SBatch' (float)(Depth + 0.1));  	m_TitleText.Draw (SBatch' (float)(Depth + 0.1));  	m_MessageText.Draw (SBatch' (float)(Depth + 0.1));  }  
Magic Number,Gonzo.Dialogs,ExitDialog,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\ExitDialog.cs,Draw,The following statement contains a magic number: m_ReloginButton.Draw (SBatch' (float)(Depth + 0.1));  
Magic Number,Gonzo.Dialogs,ExitDialog,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\ExitDialog.cs,Draw,The following statement contains a magic number: m_ExitButton.Draw (SBatch' (float)(Depth + 0.1));  
Magic Number,Gonzo.Dialogs,ExitDialog,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\ExitDialog.cs,Draw,The following statement contains a magic number: m_CancelButton.Draw (SBatch' (float)(Depth + 0.1));  
Magic Number,Gonzo.Dialogs,ExitDialog,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\ExitDialog.cs,Draw,The following statement contains a magic number: m_TitleText.Draw (SBatch' (float)(Depth + 0.1));  
Magic Number,Gonzo.Dialogs,ExitDialog,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\ExitDialog.cs,Draw,The following statement contains a magic number: m_MessageText.Draw (SBatch' (float)(Depth + 0.1));  
Magic Number,Gonzo.Elements,UIBodyBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIBodyBrowser.cs,UIBodyBrowser,The following statement contains a magic number: foreach (OutfitContainer Ctr in m_LightAppearances) {  	SkinBtnContainer Container = new SkinBtnContainer ();  	Container.BtnTex = m_EditBodySkinBtnTex;  	Container.SourcePosition = //Initialize to second frame in image.  	new Vector2 ((m_EditBodySkinBtnTex.Width / (4)) * 2' 0.0f);  	m_SkinBtns.Add (Container);  }  
Magic Number,Gonzo.Elements,UIBodyBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIBodyBrowser.cs,UIBodyBrowser,The following statement contains a magic number: foreach (OutfitContainer Ctr in m_LightAppearances) {  	SkinBtnContainer Container = new SkinBtnContainer ();  	Container.BtnTex = m_EditBodySkinBtnTex;  	Container.SourcePosition = //Initialize to second frame in image.  	new Vector2 ((m_EditBodySkinBtnTex.Width / (4)) * 2' 0.0f);  	m_SkinBtns.Add (Container);  }  
Magic Number,Gonzo.Elements,UIBodyBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIBodyBrowser.cs,UIBodyBrowser,The following statement contains a magic number: Container.SourcePosition = //Initialize to second frame in image.  new Vector2 ((m_EditBodySkinBtnTex.Width / (4)) * 2' 0.0f);  
Magic Number,Gonzo.Elements,UIBodyBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIBodyBrowser.cs,UIBodyBrowser,The following statement contains a magic number: Container.SourcePosition = //Initialize to second frame in image.  new Vector2 ((m_EditBodySkinBtnTex.Width / (4)) * 2' 0.0f);  
Magic Number,Gonzo.Elements,UIBodyBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIBodyBrowser.cs,UIBodyBrowser,The following statement contains a magic number: foreach (OutfitContainer Ctr in m_MediumAppearances) {  	SkinBtnContainer Container = new SkinBtnContainer ();  	Container.BtnTex = m_EditBodySkinBtnTex;  	Container.SourcePosition = //Initialize to second frame in image.  	new Vector2 ((m_EditBodySkinBtnTex.Width / (4)) * 2' 0.0f);  	m_SkinBtns.Add (Container);  }  
Magic Number,Gonzo.Elements,UIBodyBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIBodyBrowser.cs,UIBodyBrowser,The following statement contains a magic number: foreach (OutfitContainer Ctr in m_MediumAppearances) {  	SkinBtnContainer Container = new SkinBtnContainer ();  	Container.BtnTex = m_EditBodySkinBtnTex;  	Container.SourcePosition = //Initialize to second frame in image.  	new Vector2 ((m_EditBodySkinBtnTex.Width / (4)) * 2' 0.0f);  	m_SkinBtns.Add (Container);  }  
Magic Number,Gonzo.Elements,UIBodyBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIBodyBrowser.cs,UIBodyBrowser,The following statement contains a magic number: Container.SourcePosition = //Initialize to second frame in image.  new Vector2 ((m_EditBodySkinBtnTex.Width / (4)) * 2' 0.0f);  
Magic Number,Gonzo.Elements,UIBodyBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIBodyBrowser.cs,UIBodyBrowser,The following statement contains a magic number: Container.SourcePosition = //Initialize to second frame in image.  new Vector2 ((m_EditBodySkinBtnTex.Width / (4)) * 2' 0.0f);  
Magic Number,Gonzo.Elements,UIBodyBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIBodyBrowser.cs,UIBodyBrowser,The following statement contains a magic number: foreach (OutfitContainer Ctr in m_DarkAppearances) {  	SkinBtnContainer Container = new SkinBtnContainer ();  	Container.BtnTex = m_EditBodySkinBtnTex;  	Container.SourcePosition = //Initialize to second frame in image.  	new Vector2 ((m_EditBodySkinBtnTex.Width / (4)) * 2' 0.0f);  	m_SkinBtns.Add (Container);  }  
Magic Number,Gonzo.Elements,UIBodyBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIBodyBrowser.cs,UIBodyBrowser,The following statement contains a magic number: foreach (OutfitContainer Ctr in m_DarkAppearances) {  	SkinBtnContainer Container = new SkinBtnContainer ();  	Container.BtnTex = m_EditBodySkinBtnTex;  	Container.SourcePosition = //Initialize to second frame in image.  	new Vector2 ((m_EditBodySkinBtnTex.Width / (4)) * 2' 0.0f);  	m_SkinBtns.Add (Container);  }  
Magic Number,Gonzo.Elements,UIBodyBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIBodyBrowser.cs,UIBodyBrowser,The following statement contains a magic number: Container.SourcePosition = //Initialize to second frame in image.  new Vector2 ((m_EditBodySkinBtnTex.Width / (4)) * 2' 0.0f);  
Magic Number,Gonzo.Elements,UIBodyBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIBodyBrowser.cs,UIBodyBrowser,The following statement contains a magic number: Container.SourcePosition = //Initialize to second frame in image.  new Vector2 ((m_EditBodySkinBtnTex.Width / (4)) * 2' 0.0f);  
Magic Number,Gonzo.Elements,UIBodyBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIBodyBrowser.cs,Update,The following statement contains a magic number: for (int X = 0; X <= m_Map.GetUpperBound (1); X++) {  	for (int Y = 0; Y <= m_Map.GetUpperBound (0); Y++) {  		m_BtnWidth = m_SkinBtns [Y + m_Counter].BtnTex.Width / 4;  		Vector2 TexturePosition = new Vector2 (X * (BodyTileSize.X + 16)' Y * (BodyTileSize.Y));  		Vector2 ButtonPosition = new Vector2 (TexturePosition.X - 3' TexturePosition.Y - 5);  		if (IsMouseOverButton (Helper' m_SkinBtns [Y + m_Counter]' Position + ButtonPosition)) {  			if (Helper.IsNewPress (MouseButtons.LeftButton)) {  				if (!m_SkinBtns [Y + m_Counter].IsButtonClicked) {  					m_SkinBtns [Y + m_Counter].SourcePosition.X += m_BtnWidth;  					if (OnButtonClicked != null) {  						UISkinButtonClickedEventArgs EArgs = new UISkinButtonClickedEventArgs ();  						switch (m_SelectedSkintype) {  						case Elements.SkinType.Light:  							EArgs.SkinType = 0;  							EArgs.SelectedOutfit = (m_Sex == AvatarSex.Male ? m_LightAppearances [(Y * X) + m_Counter].Oft : m_LightFemaleAppearances [(Y * X) + m_Counter].Oft);  							OnButtonClicked (this' EArgs);  							break;  						case Elements.SkinType.Medium:  							EArgs = new UISkinButtonClickedEventArgs ();  							EArgs.SkinType = 1;  							EArgs.SelectedOutfit = (m_Sex == AvatarSex.Male ? m_MediumAppearances [(X * Y) + m_Counter].Oft : m_MediumFemaleAppearances [(Y * X) + m_Counter].Oft);  							OnButtonClicked (this' EArgs);  							break;  						case Elements.SkinType.Dark:  							EArgs = new UISkinButtonClickedEventArgs ();  							EArgs.SkinType = 2;  							EArgs.SelectedOutfit = (m_Sex == AvatarSex.Male ? m_DarkAppearances [(X * Y) + m_Counter].Oft : m_DarkFemaleAppearances [(Y * X) + m_Counter].Oft);  							OnButtonClicked (this' EArgs);  							break;  						}  					}  					m_SkinBtns [Y + m_Counter].IsButtonClicked = true;  				}  			} else {  				if (m_SkinBtns [Y + m_Counter].IsButtonClicked)  					m_SkinBtns [Y + m_Counter].SourcePosition.X -= m_BtnWidth;  				m_SkinBtns [Y + m_Counter].IsButtonClicked = false;  			}  			if (!m_SkinBtns [Y + m_Counter].IsMouseHovering) {  				m_SkinBtns [Y + m_Counter].SourcePosition.X -= m_BtnWidth;  				m_SkinBtns [Y + m_Counter].IsMouseHovering = true;  			}  		} else {  			m_SkinBtns [Y + m_Counter].SourcePosition.X = (m_BtnWidth * 2);  			m_SkinBtns [Y + m_Counter].IsMouseHovering = false;  		}  		if (m_Counter < m_NumberOfSkinsToDisplay)  			m_Counter++;  	}  }  
Magic Number,Gonzo.Elements,UIBodyBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIBodyBrowser.cs,Update,The following statement contains a magic number: for (int X = 0; X <= m_Map.GetUpperBound (1); X++) {  	for (int Y = 0; Y <= m_Map.GetUpperBound (0); Y++) {  		m_BtnWidth = m_SkinBtns [Y + m_Counter].BtnTex.Width / 4;  		Vector2 TexturePosition = new Vector2 (X * (BodyTileSize.X + 16)' Y * (BodyTileSize.Y));  		Vector2 ButtonPosition = new Vector2 (TexturePosition.X - 3' TexturePosition.Y - 5);  		if (IsMouseOverButton (Helper' m_SkinBtns [Y + m_Counter]' Position + ButtonPosition)) {  			if (Helper.IsNewPress (MouseButtons.LeftButton)) {  				if (!m_SkinBtns [Y + m_Counter].IsButtonClicked) {  					m_SkinBtns [Y + m_Counter].SourcePosition.X += m_BtnWidth;  					if (OnButtonClicked != null) {  						UISkinButtonClickedEventArgs EArgs = new UISkinButtonClickedEventArgs ();  						switch (m_SelectedSkintype) {  						case Elements.SkinType.Light:  							EArgs.SkinType = 0;  							EArgs.SelectedOutfit = (m_Sex == AvatarSex.Male ? m_LightAppearances [(Y * X) + m_Counter].Oft : m_LightFemaleAppearances [(Y * X) + m_Counter].Oft);  							OnButtonClicked (this' EArgs);  							break;  						case Elements.SkinType.Medium:  							EArgs = new UISkinButtonClickedEventArgs ();  							EArgs.SkinType = 1;  							EArgs.SelectedOutfit = (m_Sex == AvatarSex.Male ? m_MediumAppearances [(X * Y) + m_Counter].Oft : m_MediumFemaleAppearances [(Y * X) + m_Counter].Oft);  							OnButtonClicked (this' EArgs);  							break;  						case Elements.SkinType.Dark:  							EArgs = new UISkinButtonClickedEventArgs ();  							EArgs.SkinType = 2;  							EArgs.SelectedOutfit = (m_Sex == AvatarSex.Male ? m_DarkAppearances [(X * Y) + m_Counter].Oft : m_DarkFemaleAppearances [(Y * X) + m_Counter].Oft);  							OnButtonClicked (this' EArgs);  							break;  						}  					}  					m_SkinBtns [Y + m_Counter].IsButtonClicked = true;  				}  			} else {  				if (m_SkinBtns [Y + m_Counter].IsButtonClicked)  					m_SkinBtns [Y + m_Counter].SourcePosition.X -= m_BtnWidth;  				m_SkinBtns [Y + m_Counter].IsButtonClicked = false;  			}  			if (!m_SkinBtns [Y + m_Counter].IsMouseHovering) {  				m_SkinBtns [Y + m_Counter].SourcePosition.X -= m_BtnWidth;  				m_SkinBtns [Y + m_Counter].IsMouseHovering = true;  			}  		} else {  			m_SkinBtns [Y + m_Counter].SourcePosition.X = (m_BtnWidth * 2);  			m_SkinBtns [Y + m_Counter].IsMouseHovering = false;  		}  		if (m_Counter < m_NumberOfSkinsToDisplay)  			m_Counter++;  	}  }  
Magic Number,Gonzo.Elements,UIBodyBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIBodyBrowser.cs,Update,The following statement contains a magic number: for (int X = 0; X <= m_Map.GetUpperBound (1); X++) {  	for (int Y = 0; Y <= m_Map.GetUpperBound (0); Y++) {  		m_BtnWidth = m_SkinBtns [Y + m_Counter].BtnTex.Width / 4;  		Vector2 TexturePosition = new Vector2 (X * (BodyTileSize.X + 16)' Y * (BodyTileSize.Y));  		Vector2 ButtonPosition = new Vector2 (TexturePosition.X - 3' TexturePosition.Y - 5);  		if (IsMouseOverButton (Helper' m_SkinBtns [Y + m_Counter]' Position + ButtonPosition)) {  			if (Helper.IsNewPress (MouseButtons.LeftButton)) {  				if (!m_SkinBtns [Y + m_Counter].IsButtonClicked) {  					m_SkinBtns [Y + m_Counter].SourcePosition.X += m_BtnWidth;  					if (OnButtonClicked != null) {  						UISkinButtonClickedEventArgs EArgs = new UISkinButtonClickedEventArgs ();  						switch (m_SelectedSkintype) {  						case Elements.SkinType.Light:  							EArgs.SkinType = 0;  							EArgs.SelectedOutfit = (m_Sex == AvatarSex.Male ? m_LightAppearances [(Y * X) + m_Counter].Oft : m_LightFemaleAppearances [(Y * X) + m_Counter].Oft);  							OnButtonClicked (this' EArgs);  							break;  						case Elements.SkinType.Medium:  							EArgs = new UISkinButtonClickedEventArgs ();  							EArgs.SkinType = 1;  							EArgs.SelectedOutfit = (m_Sex == AvatarSex.Male ? m_MediumAppearances [(X * Y) + m_Counter].Oft : m_MediumFemaleAppearances [(Y * X) + m_Counter].Oft);  							OnButtonClicked (this' EArgs);  							break;  						case Elements.SkinType.Dark:  							EArgs = new UISkinButtonClickedEventArgs ();  							EArgs.SkinType = 2;  							EArgs.SelectedOutfit = (m_Sex == AvatarSex.Male ? m_DarkAppearances [(X * Y) + m_Counter].Oft : m_DarkFemaleAppearances [(Y * X) + m_Counter].Oft);  							OnButtonClicked (this' EArgs);  							break;  						}  					}  					m_SkinBtns [Y + m_Counter].IsButtonClicked = true;  				}  			} else {  				if (m_SkinBtns [Y + m_Counter].IsButtonClicked)  					m_SkinBtns [Y + m_Counter].SourcePosition.X -= m_BtnWidth;  				m_SkinBtns [Y + m_Counter].IsButtonClicked = false;  			}  			if (!m_SkinBtns [Y + m_Counter].IsMouseHovering) {  				m_SkinBtns [Y + m_Counter].SourcePosition.X -= m_BtnWidth;  				m_SkinBtns [Y + m_Counter].IsMouseHovering = true;  			}  		} else {  			m_SkinBtns [Y + m_Counter].SourcePosition.X = (m_BtnWidth * 2);  			m_SkinBtns [Y + m_Counter].IsMouseHovering = false;  		}  		if (m_Counter < m_NumberOfSkinsToDisplay)  			m_Counter++;  	}  }  
Magic Number,Gonzo.Elements,UIBodyBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIBodyBrowser.cs,Update,The following statement contains a magic number: for (int X = 0; X <= m_Map.GetUpperBound (1); X++) {  	for (int Y = 0; Y <= m_Map.GetUpperBound (0); Y++) {  		m_BtnWidth = m_SkinBtns [Y + m_Counter].BtnTex.Width / 4;  		Vector2 TexturePosition = new Vector2 (X * (BodyTileSize.X + 16)' Y * (BodyTileSize.Y));  		Vector2 ButtonPosition = new Vector2 (TexturePosition.X - 3' TexturePosition.Y - 5);  		if (IsMouseOverButton (Helper' m_SkinBtns [Y + m_Counter]' Position + ButtonPosition)) {  			if (Helper.IsNewPress (MouseButtons.LeftButton)) {  				if (!m_SkinBtns [Y + m_Counter].IsButtonClicked) {  					m_SkinBtns [Y + m_Counter].SourcePosition.X += m_BtnWidth;  					if (OnButtonClicked != null) {  						UISkinButtonClickedEventArgs EArgs = new UISkinButtonClickedEventArgs ();  						switch (m_SelectedSkintype) {  						case Elements.SkinType.Light:  							EArgs.SkinType = 0;  							EArgs.SelectedOutfit = (m_Sex == AvatarSex.Male ? m_LightAppearances [(Y * X) + m_Counter].Oft : m_LightFemaleAppearances [(Y * X) + m_Counter].Oft);  							OnButtonClicked (this' EArgs);  							break;  						case Elements.SkinType.Medium:  							EArgs = new UISkinButtonClickedEventArgs ();  							EArgs.SkinType = 1;  							EArgs.SelectedOutfit = (m_Sex == AvatarSex.Male ? m_MediumAppearances [(X * Y) + m_Counter].Oft : m_MediumFemaleAppearances [(Y * X) + m_Counter].Oft);  							OnButtonClicked (this' EArgs);  							break;  						case Elements.SkinType.Dark:  							EArgs = new UISkinButtonClickedEventArgs ();  							EArgs.SkinType = 2;  							EArgs.SelectedOutfit = (m_Sex == AvatarSex.Male ? m_DarkAppearances [(X * Y) + m_Counter].Oft : m_DarkFemaleAppearances [(Y * X) + m_Counter].Oft);  							OnButtonClicked (this' EArgs);  							break;  						}  					}  					m_SkinBtns [Y + m_Counter].IsButtonClicked = true;  				}  			} else {  				if (m_SkinBtns [Y + m_Counter].IsButtonClicked)  					m_SkinBtns [Y + m_Counter].SourcePosition.X -= m_BtnWidth;  				m_SkinBtns [Y + m_Counter].IsButtonClicked = false;  			}  			if (!m_SkinBtns [Y + m_Counter].IsMouseHovering) {  				m_SkinBtns [Y + m_Counter].SourcePosition.X -= m_BtnWidth;  				m_SkinBtns [Y + m_Counter].IsMouseHovering = true;  			}  		} else {  			m_SkinBtns [Y + m_Counter].SourcePosition.X = (m_BtnWidth * 2);  			m_SkinBtns [Y + m_Counter].IsMouseHovering = false;  		}  		if (m_Counter < m_NumberOfSkinsToDisplay)  			m_Counter++;  	}  }  
Magic Number,Gonzo.Elements,UIBodyBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIBodyBrowser.cs,Update,The following statement contains a magic number: for (int X = 0; X <= m_Map.GetUpperBound (1); X++) {  	for (int Y = 0; Y <= m_Map.GetUpperBound (0); Y++) {  		m_BtnWidth = m_SkinBtns [Y + m_Counter].BtnTex.Width / 4;  		Vector2 TexturePosition = new Vector2 (X * (BodyTileSize.X + 16)' Y * (BodyTileSize.Y));  		Vector2 ButtonPosition = new Vector2 (TexturePosition.X - 3' TexturePosition.Y - 5);  		if (IsMouseOverButton (Helper' m_SkinBtns [Y + m_Counter]' Position + ButtonPosition)) {  			if (Helper.IsNewPress (MouseButtons.LeftButton)) {  				if (!m_SkinBtns [Y + m_Counter].IsButtonClicked) {  					m_SkinBtns [Y + m_Counter].SourcePosition.X += m_BtnWidth;  					if (OnButtonClicked != null) {  						UISkinButtonClickedEventArgs EArgs = new UISkinButtonClickedEventArgs ();  						switch (m_SelectedSkintype) {  						case Elements.SkinType.Light:  							EArgs.SkinType = 0;  							EArgs.SelectedOutfit = (m_Sex == AvatarSex.Male ? m_LightAppearances [(Y * X) + m_Counter].Oft : m_LightFemaleAppearances [(Y * X) + m_Counter].Oft);  							OnButtonClicked (this' EArgs);  							break;  						case Elements.SkinType.Medium:  							EArgs = new UISkinButtonClickedEventArgs ();  							EArgs.SkinType = 1;  							EArgs.SelectedOutfit = (m_Sex == AvatarSex.Male ? m_MediumAppearances [(X * Y) + m_Counter].Oft : m_MediumFemaleAppearances [(Y * X) + m_Counter].Oft);  							OnButtonClicked (this' EArgs);  							break;  						case Elements.SkinType.Dark:  							EArgs = new UISkinButtonClickedEventArgs ();  							EArgs.SkinType = 2;  							EArgs.SelectedOutfit = (m_Sex == AvatarSex.Male ? m_DarkAppearances [(X * Y) + m_Counter].Oft : m_DarkFemaleAppearances [(Y * X) + m_Counter].Oft);  							OnButtonClicked (this' EArgs);  							break;  						}  					}  					m_SkinBtns [Y + m_Counter].IsButtonClicked = true;  				}  			} else {  				if (m_SkinBtns [Y + m_Counter].IsButtonClicked)  					m_SkinBtns [Y + m_Counter].SourcePosition.X -= m_BtnWidth;  				m_SkinBtns [Y + m_Counter].IsButtonClicked = false;  			}  			if (!m_SkinBtns [Y + m_Counter].IsMouseHovering) {  				m_SkinBtns [Y + m_Counter].SourcePosition.X -= m_BtnWidth;  				m_SkinBtns [Y + m_Counter].IsMouseHovering = true;  			}  		} else {  			m_SkinBtns [Y + m_Counter].SourcePosition.X = (m_BtnWidth * 2);  			m_SkinBtns [Y + m_Counter].IsMouseHovering = false;  		}  		if (m_Counter < m_NumberOfSkinsToDisplay)  			m_Counter++;  	}  }  
Magic Number,Gonzo.Elements,UIBodyBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIBodyBrowser.cs,Update,The following statement contains a magic number: for (int X = 0; X <= m_Map.GetUpperBound (1); X++) {  	for (int Y = 0; Y <= m_Map.GetUpperBound (0); Y++) {  		m_BtnWidth = m_SkinBtns [Y + m_Counter].BtnTex.Width / 4;  		Vector2 TexturePosition = new Vector2 (X * (BodyTileSize.X + 16)' Y * (BodyTileSize.Y));  		Vector2 ButtonPosition = new Vector2 (TexturePosition.X - 3' TexturePosition.Y - 5);  		if (IsMouseOverButton (Helper' m_SkinBtns [Y + m_Counter]' Position + ButtonPosition)) {  			if (Helper.IsNewPress (MouseButtons.LeftButton)) {  				if (!m_SkinBtns [Y + m_Counter].IsButtonClicked) {  					m_SkinBtns [Y + m_Counter].SourcePosition.X += m_BtnWidth;  					if (OnButtonClicked != null) {  						UISkinButtonClickedEventArgs EArgs = new UISkinButtonClickedEventArgs ();  						switch (m_SelectedSkintype) {  						case Elements.SkinType.Light:  							EArgs.SkinType = 0;  							EArgs.SelectedOutfit = (m_Sex == AvatarSex.Male ? m_LightAppearances [(Y * X) + m_Counter].Oft : m_LightFemaleAppearances [(Y * X) + m_Counter].Oft);  							OnButtonClicked (this' EArgs);  							break;  						case Elements.SkinType.Medium:  							EArgs = new UISkinButtonClickedEventArgs ();  							EArgs.SkinType = 1;  							EArgs.SelectedOutfit = (m_Sex == AvatarSex.Male ? m_MediumAppearances [(X * Y) + m_Counter].Oft : m_MediumFemaleAppearances [(Y * X) + m_Counter].Oft);  							OnButtonClicked (this' EArgs);  							break;  						case Elements.SkinType.Dark:  							EArgs = new UISkinButtonClickedEventArgs ();  							EArgs.SkinType = 2;  							EArgs.SelectedOutfit = (m_Sex == AvatarSex.Male ? m_DarkAppearances [(X * Y) + m_Counter].Oft : m_DarkFemaleAppearances [(Y * X) + m_Counter].Oft);  							OnButtonClicked (this' EArgs);  							break;  						}  					}  					m_SkinBtns [Y + m_Counter].IsButtonClicked = true;  				}  			} else {  				if (m_SkinBtns [Y + m_Counter].IsButtonClicked)  					m_SkinBtns [Y + m_Counter].SourcePosition.X -= m_BtnWidth;  				m_SkinBtns [Y + m_Counter].IsButtonClicked = false;  			}  			if (!m_SkinBtns [Y + m_Counter].IsMouseHovering) {  				m_SkinBtns [Y + m_Counter].SourcePosition.X -= m_BtnWidth;  				m_SkinBtns [Y + m_Counter].IsMouseHovering = true;  			}  		} else {  			m_SkinBtns [Y + m_Counter].SourcePosition.X = (m_BtnWidth * 2);  			m_SkinBtns [Y + m_Counter].IsMouseHovering = false;  		}  		if (m_Counter < m_NumberOfSkinsToDisplay)  			m_Counter++;  	}  }  
Magic Number,Gonzo.Elements,UIBodyBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIBodyBrowser.cs,Update,The following statement contains a magic number: for (int Y = 0; Y <= m_Map.GetUpperBound (0); Y++) {  	m_BtnWidth = m_SkinBtns [Y + m_Counter].BtnTex.Width / 4;  	Vector2 TexturePosition = new Vector2 (X * (BodyTileSize.X + 16)' Y * (BodyTileSize.Y));  	Vector2 ButtonPosition = new Vector2 (TexturePosition.X - 3' TexturePosition.Y - 5);  	if (IsMouseOverButton (Helper' m_SkinBtns [Y + m_Counter]' Position + ButtonPosition)) {  		if (Helper.IsNewPress (MouseButtons.LeftButton)) {  			if (!m_SkinBtns [Y + m_Counter].IsButtonClicked) {  				m_SkinBtns [Y + m_Counter].SourcePosition.X += m_BtnWidth;  				if (OnButtonClicked != null) {  					UISkinButtonClickedEventArgs EArgs = new UISkinButtonClickedEventArgs ();  					switch (m_SelectedSkintype) {  					case Elements.SkinType.Light:  						EArgs.SkinType = 0;  						EArgs.SelectedOutfit = (m_Sex == AvatarSex.Male ? m_LightAppearances [(Y * X) + m_Counter].Oft : m_LightFemaleAppearances [(Y * X) + m_Counter].Oft);  						OnButtonClicked (this' EArgs);  						break;  					case Elements.SkinType.Medium:  						EArgs = new UISkinButtonClickedEventArgs ();  						EArgs.SkinType = 1;  						EArgs.SelectedOutfit = (m_Sex == AvatarSex.Male ? m_MediumAppearances [(X * Y) + m_Counter].Oft : m_MediumFemaleAppearances [(Y * X) + m_Counter].Oft);  						OnButtonClicked (this' EArgs);  						break;  					case Elements.SkinType.Dark:  						EArgs = new UISkinButtonClickedEventArgs ();  						EArgs.SkinType = 2;  						EArgs.SelectedOutfit = (m_Sex == AvatarSex.Male ? m_DarkAppearances [(X * Y) + m_Counter].Oft : m_DarkFemaleAppearances [(Y * X) + m_Counter].Oft);  						OnButtonClicked (this' EArgs);  						break;  					}  				}  				m_SkinBtns [Y + m_Counter].IsButtonClicked = true;  			}  		} else {  			if (m_SkinBtns [Y + m_Counter].IsButtonClicked)  				m_SkinBtns [Y + m_Counter].SourcePosition.X -= m_BtnWidth;  			m_SkinBtns [Y + m_Counter].IsButtonClicked = false;  		}  		if (!m_SkinBtns [Y + m_Counter].IsMouseHovering) {  			m_SkinBtns [Y + m_Counter].SourcePosition.X -= m_BtnWidth;  			m_SkinBtns [Y + m_Counter].IsMouseHovering = true;  		}  	} else {  		m_SkinBtns [Y + m_Counter].SourcePosition.X = (m_BtnWidth * 2);  		m_SkinBtns [Y + m_Counter].IsMouseHovering = false;  	}  	if (m_Counter < m_NumberOfSkinsToDisplay)  		m_Counter++;  }  
Magic Number,Gonzo.Elements,UIBodyBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIBodyBrowser.cs,Update,The following statement contains a magic number: for (int Y = 0; Y <= m_Map.GetUpperBound (0); Y++) {  	m_BtnWidth = m_SkinBtns [Y + m_Counter].BtnTex.Width / 4;  	Vector2 TexturePosition = new Vector2 (X * (BodyTileSize.X + 16)' Y * (BodyTileSize.Y));  	Vector2 ButtonPosition = new Vector2 (TexturePosition.X - 3' TexturePosition.Y - 5);  	if (IsMouseOverButton (Helper' m_SkinBtns [Y + m_Counter]' Position + ButtonPosition)) {  		if (Helper.IsNewPress (MouseButtons.LeftButton)) {  			if (!m_SkinBtns [Y + m_Counter].IsButtonClicked) {  				m_SkinBtns [Y + m_Counter].SourcePosition.X += m_BtnWidth;  				if (OnButtonClicked != null) {  					UISkinButtonClickedEventArgs EArgs = new UISkinButtonClickedEventArgs ();  					switch (m_SelectedSkintype) {  					case Elements.SkinType.Light:  						EArgs.SkinType = 0;  						EArgs.SelectedOutfit = (m_Sex == AvatarSex.Male ? m_LightAppearances [(Y * X) + m_Counter].Oft : m_LightFemaleAppearances [(Y * X) + m_Counter].Oft);  						OnButtonClicked (this' EArgs);  						break;  					case Elements.SkinType.Medium:  						EArgs = new UISkinButtonClickedEventArgs ();  						EArgs.SkinType = 1;  						EArgs.SelectedOutfit = (m_Sex == AvatarSex.Male ? m_MediumAppearances [(X * Y) + m_Counter].Oft : m_MediumFemaleAppearances [(Y * X) + m_Counter].Oft);  						OnButtonClicked (this' EArgs);  						break;  					case Elements.SkinType.Dark:  						EArgs = new UISkinButtonClickedEventArgs ();  						EArgs.SkinType = 2;  						EArgs.SelectedOutfit = (m_Sex == AvatarSex.Male ? m_DarkAppearances [(X * Y) + m_Counter].Oft : m_DarkFemaleAppearances [(Y * X) + m_Counter].Oft);  						OnButtonClicked (this' EArgs);  						break;  					}  				}  				m_SkinBtns [Y + m_Counter].IsButtonClicked = true;  			}  		} else {  			if (m_SkinBtns [Y + m_Counter].IsButtonClicked)  				m_SkinBtns [Y + m_Counter].SourcePosition.X -= m_BtnWidth;  			m_SkinBtns [Y + m_Counter].IsButtonClicked = false;  		}  		if (!m_SkinBtns [Y + m_Counter].IsMouseHovering) {  			m_SkinBtns [Y + m_Counter].SourcePosition.X -= m_BtnWidth;  			m_SkinBtns [Y + m_Counter].IsMouseHovering = true;  		}  	} else {  		m_SkinBtns [Y + m_Counter].SourcePosition.X = (m_BtnWidth * 2);  		m_SkinBtns [Y + m_Counter].IsMouseHovering = false;  	}  	if (m_Counter < m_NumberOfSkinsToDisplay)  		m_Counter++;  }  
Magic Number,Gonzo.Elements,UIBodyBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIBodyBrowser.cs,Update,The following statement contains a magic number: for (int Y = 0; Y <= m_Map.GetUpperBound (0); Y++) {  	m_BtnWidth = m_SkinBtns [Y + m_Counter].BtnTex.Width / 4;  	Vector2 TexturePosition = new Vector2 (X * (BodyTileSize.X + 16)' Y * (BodyTileSize.Y));  	Vector2 ButtonPosition = new Vector2 (TexturePosition.X - 3' TexturePosition.Y - 5);  	if (IsMouseOverButton (Helper' m_SkinBtns [Y + m_Counter]' Position + ButtonPosition)) {  		if (Helper.IsNewPress (MouseButtons.LeftButton)) {  			if (!m_SkinBtns [Y + m_Counter].IsButtonClicked) {  				m_SkinBtns [Y + m_Counter].SourcePosition.X += m_BtnWidth;  				if (OnButtonClicked != null) {  					UISkinButtonClickedEventArgs EArgs = new UISkinButtonClickedEventArgs ();  					switch (m_SelectedSkintype) {  					case Elements.SkinType.Light:  						EArgs.SkinType = 0;  						EArgs.SelectedOutfit = (m_Sex == AvatarSex.Male ? m_LightAppearances [(Y * X) + m_Counter].Oft : m_LightFemaleAppearances [(Y * X) + m_Counter].Oft);  						OnButtonClicked (this' EArgs);  						break;  					case Elements.SkinType.Medium:  						EArgs = new UISkinButtonClickedEventArgs ();  						EArgs.SkinType = 1;  						EArgs.SelectedOutfit = (m_Sex == AvatarSex.Male ? m_MediumAppearances [(X * Y) + m_Counter].Oft : m_MediumFemaleAppearances [(Y * X) + m_Counter].Oft);  						OnButtonClicked (this' EArgs);  						break;  					case Elements.SkinType.Dark:  						EArgs = new UISkinButtonClickedEventArgs ();  						EArgs.SkinType = 2;  						EArgs.SelectedOutfit = (m_Sex == AvatarSex.Male ? m_DarkAppearances [(X * Y) + m_Counter].Oft : m_DarkFemaleAppearances [(Y * X) + m_Counter].Oft);  						OnButtonClicked (this' EArgs);  						break;  					}  				}  				m_SkinBtns [Y + m_Counter].IsButtonClicked = true;  			}  		} else {  			if (m_SkinBtns [Y + m_Counter].IsButtonClicked)  				m_SkinBtns [Y + m_Counter].SourcePosition.X -= m_BtnWidth;  			m_SkinBtns [Y + m_Counter].IsButtonClicked = false;  		}  		if (!m_SkinBtns [Y + m_Counter].IsMouseHovering) {  			m_SkinBtns [Y + m_Counter].SourcePosition.X -= m_BtnWidth;  			m_SkinBtns [Y + m_Counter].IsMouseHovering = true;  		}  	} else {  		m_SkinBtns [Y + m_Counter].SourcePosition.X = (m_BtnWidth * 2);  		m_SkinBtns [Y + m_Counter].IsMouseHovering = false;  	}  	if (m_Counter < m_NumberOfSkinsToDisplay)  		m_Counter++;  }  
Magic Number,Gonzo.Elements,UIBodyBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIBodyBrowser.cs,Update,The following statement contains a magic number: for (int Y = 0; Y <= m_Map.GetUpperBound (0); Y++) {  	m_BtnWidth = m_SkinBtns [Y + m_Counter].BtnTex.Width / 4;  	Vector2 TexturePosition = new Vector2 (X * (BodyTileSize.X + 16)' Y * (BodyTileSize.Y));  	Vector2 ButtonPosition = new Vector2 (TexturePosition.X - 3' TexturePosition.Y - 5);  	if (IsMouseOverButton (Helper' m_SkinBtns [Y + m_Counter]' Position + ButtonPosition)) {  		if (Helper.IsNewPress (MouseButtons.LeftButton)) {  			if (!m_SkinBtns [Y + m_Counter].IsButtonClicked) {  				m_SkinBtns [Y + m_Counter].SourcePosition.X += m_BtnWidth;  				if (OnButtonClicked != null) {  					UISkinButtonClickedEventArgs EArgs = new UISkinButtonClickedEventArgs ();  					switch (m_SelectedSkintype) {  					case Elements.SkinType.Light:  						EArgs.SkinType = 0;  						EArgs.SelectedOutfit = (m_Sex == AvatarSex.Male ? m_LightAppearances [(Y * X) + m_Counter].Oft : m_LightFemaleAppearances [(Y * X) + m_Counter].Oft);  						OnButtonClicked (this' EArgs);  						break;  					case Elements.SkinType.Medium:  						EArgs = new UISkinButtonClickedEventArgs ();  						EArgs.SkinType = 1;  						EArgs.SelectedOutfit = (m_Sex == AvatarSex.Male ? m_MediumAppearances [(X * Y) + m_Counter].Oft : m_MediumFemaleAppearances [(Y * X) + m_Counter].Oft);  						OnButtonClicked (this' EArgs);  						break;  					case Elements.SkinType.Dark:  						EArgs = new UISkinButtonClickedEventArgs ();  						EArgs.SkinType = 2;  						EArgs.SelectedOutfit = (m_Sex == AvatarSex.Male ? m_DarkAppearances [(X * Y) + m_Counter].Oft : m_DarkFemaleAppearances [(Y * X) + m_Counter].Oft);  						OnButtonClicked (this' EArgs);  						break;  					}  				}  				m_SkinBtns [Y + m_Counter].IsButtonClicked = true;  			}  		} else {  			if (m_SkinBtns [Y + m_Counter].IsButtonClicked)  				m_SkinBtns [Y + m_Counter].SourcePosition.X -= m_BtnWidth;  			m_SkinBtns [Y + m_Counter].IsButtonClicked = false;  		}  		if (!m_SkinBtns [Y + m_Counter].IsMouseHovering) {  			m_SkinBtns [Y + m_Counter].SourcePosition.X -= m_BtnWidth;  			m_SkinBtns [Y + m_Counter].IsMouseHovering = true;  		}  	} else {  		m_SkinBtns [Y + m_Counter].SourcePosition.X = (m_BtnWidth * 2);  		m_SkinBtns [Y + m_Counter].IsMouseHovering = false;  	}  	if (m_Counter < m_NumberOfSkinsToDisplay)  		m_Counter++;  }  
Magic Number,Gonzo.Elements,UIBodyBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIBodyBrowser.cs,Update,The following statement contains a magic number: for (int Y = 0; Y <= m_Map.GetUpperBound (0); Y++) {  	m_BtnWidth = m_SkinBtns [Y + m_Counter].BtnTex.Width / 4;  	Vector2 TexturePosition = new Vector2 (X * (BodyTileSize.X + 16)' Y * (BodyTileSize.Y));  	Vector2 ButtonPosition = new Vector2 (TexturePosition.X - 3' TexturePosition.Y - 5);  	if (IsMouseOverButton (Helper' m_SkinBtns [Y + m_Counter]' Position + ButtonPosition)) {  		if (Helper.IsNewPress (MouseButtons.LeftButton)) {  			if (!m_SkinBtns [Y + m_Counter].IsButtonClicked) {  				m_SkinBtns [Y + m_Counter].SourcePosition.X += m_BtnWidth;  				if (OnButtonClicked != null) {  					UISkinButtonClickedEventArgs EArgs = new UISkinButtonClickedEventArgs ();  					switch (m_SelectedSkintype) {  					case Elements.SkinType.Light:  						EArgs.SkinType = 0;  						EArgs.SelectedOutfit = (m_Sex == AvatarSex.Male ? m_LightAppearances [(Y * X) + m_Counter].Oft : m_LightFemaleAppearances [(Y * X) + m_Counter].Oft);  						OnButtonClicked (this' EArgs);  						break;  					case Elements.SkinType.Medium:  						EArgs = new UISkinButtonClickedEventArgs ();  						EArgs.SkinType = 1;  						EArgs.SelectedOutfit = (m_Sex == AvatarSex.Male ? m_MediumAppearances [(X * Y) + m_Counter].Oft : m_MediumFemaleAppearances [(Y * X) + m_Counter].Oft);  						OnButtonClicked (this' EArgs);  						break;  					case Elements.SkinType.Dark:  						EArgs = new UISkinButtonClickedEventArgs ();  						EArgs.SkinType = 2;  						EArgs.SelectedOutfit = (m_Sex == AvatarSex.Male ? m_DarkAppearances [(X * Y) + m_Counter].Oft : m_DarkFemaleAppearances [(Y * X) + m_Counter].Oft);  						OnButtonClicked (this' EArgs);  						break;  					}  				}  				m_SkinBtns [Y + m_Counter].IsButtonClicked = true;  			}  		} else {  			if (m_SkinBtns [Y + m_Counter].IsButtonClicked)  				m_SkinBtns [Y + m_Counter].SourcePosition.X -= m_BtnWidth;  			m_SkinBtns [Y + m_Counter].IsButtonClicked = false;  		}  		if (!m_SkinBtns [Y + m_Counter].IsMouseHovering) {  			m_SkinBtns [Y + m_Counter].SourcePosition.X -= m_BtnWidth;  			m_SkinBtns [Y + m_Counter].IsMouseHovering = true;  		}  	} else {  		m_SkinBtns [Y + m_Counter].SourcePosition.X = (m_BtnWidth * 2);  		m_SkinBtns [Y + m_Counter].IsMouseHovering = false;  	}  	if (m_Counter < m_NumberOfSkinsToDisplay)  		m_Counter++;  }  
Magic Number,Gonzo.Elements,UIBodyBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIBodyBrowser.cs,Update,The following statement contains a magic number: for (int Y = 0; Y <= m_Map.GetUpperBound (0); Y++) {  	m_BtnWidth = m_SkinBtns [Y + m_Counter].BtnTex.Width / 4;  	Vector2 TexturePosition = new Vector2 (X * (BodyTileSize.X + 16)' Y * (BodyTileSize.Y));  	Vector2 ButtonPosition = new Vector2 (TexturePosition.X - 3' TexturePosition.Y - 5);  	if (IsMouseOverButton (Helper' m_SkinBtns [Y + m_Counter]' Position + ButtonPosition)) {  		if (Helper.IsNewPress (MouseButtons.LeftButton)) {  			if (!m_SkinBtns [Y + m_Counter].IsButtonClicked) {  				m_SkinBtns [Y + m_Counter].SourcePosition.X += m_BtnWidth;  				if (OnButtonClicked != null) {  					UISkinButtonClickedEventArgs EArgs = new UISkinButtonClickedEventArgs ();  					switch (m_SelectedSkintype) {  					case Elements.SkinType.Light:  						EArgs.SkinType = 0;  						EArgs.SelectedOutfit = (m_Sex == AvatarSex.Male ? m_LightAppearances [(Y * X) + m_Counter].Oft : m_LightFemaleAppearances [(Y * X) + m_Counter].Oft);  						OnButtonClicked (this' EArgs);  						break;  					case Elements.SkinType.Medium:  						EArgs = new UISkinButtonClickedEventArgs ();  						EArgs.SkinType = 1;  						EArgs.SelectedOutfit = (m_Sex == AvatarSex.Male ? m_MediumAppearances [(X * Y) + m_Counter].Oft : m_MediumFemaleAppearances [(Y * X) + m_Counter].Oft);  						OnButtonClicked (this' EArgs);  						break;  					case Elements.SkinType.Dark:  						EArgs = new UISkinButtonClickedEventArgs ();  						EArgs.SkinType = 2;  						EArgs.SelectedOutfit = (m_Sex == AvatarSex.Male ? m_DarkAppearances [(X * Y) + m_Counter].Oft : m_DarkFemaleAppearances [(Y * X) + m_Counter].Oft);  						OnButtonClicked (this' EArgs);  						break;  					}  				}  				m_SkinBtns [Y + m_Counter].IsButtonClicked = true;  			}  		} else {  			if (m_SkinBtns [Y + m_Counter].IsButtonClicked)  				m_SkinBtns [Y + m_Counter].SourcePosition.X -= m_BtnWidth;  			m_SkinBtns [Y + m_Counter].IsButtonClicked = false;  		}  		if (!m_SkinBtns [Y + m_Counter].IsMouseHovering) {  			m_SkinBtns [Y + m_Counter].SourcePosition.X -= m_BtnWidth;  			m_SkinBtns [Y + m_Counter].IsMouseHovering = true;  		}  	} else {  		m_SkinBtns [Y + m_Counter].SourcePosition.X = (m_BtnWidth * 2);  		m_SkinBtns [Y + m_Counter].IsMouseHovering = false;  	}  	if (m_Counter < m_NumberOfSkinsToDisplay)  		m_Counter++;  }  
Magic Number,Gonzo.Elements,UIBodyBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIBodyBrowser.cs,Update,The following statement contains a magic number: m_BtnWidth = m_SkinBtns [Y + m_Counter].BtnTex.Width / 4;  
Magic Number,Gonzo.Elements,UIBodyBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIBodyBrowser.cs,Update,The following statement contains a magic number: if (IsMouseOverButton (Helper' m_SkinBtns [Y + m_Counter]' Position + ButtonPosition)) {  	if (Helper.IsNewPress (MouseButtons.LeftButton)) {  		if (!m_SkinBtns [Y + m_Counter].IsButtonClicked) {  			m_SkinBtns [Y + m_Counter].SourcePosition.X += m_BtnWidth;  			if (OnButtonClicked != null) {  				UISkinButtonClickedEventArgs EArgs = new UISkinButtonClickedEventArgs ();  				switch (m_SelectedSkintype) {  				case Elements.SkinType.Light:  					EArgs.SkinType = 0;  					EArgs.SelectedOutfit = (m_Sex == AvatarSex.Male ? m_LightAppearances [(Y * X) + m_Counter].Oft : m_LightFemaleAppearances [(Y * X) + m_Counter].Oft);  					OnButtonClicked (this' EArgs);  					break;  				case Elements.SkinType.Medium:  					EArgs = new UISkinButtonClickedEventArgs ();  					EArgs.SkinType = 1;  					EArgs.SelectedOutfit = (m_Sex == AvatarSex.Male ? m_MediumAppearances [(X * Y) + m_Counter].Oft : m_MediumFemaleAppearances [(Y * X) + m_Counter].Oft);  					OnButtonClicked (this' EArgs);  					break;  				case Elements.SkinType.Dark:  					EArgs = new UISkinButtonClickedEventArgs ();  					EArgs.SkinType = 2;  					EArgs.SelectedOutfit = (m_Sex == AvatarSex.Male ? m_DarkAppearances [(X * Y) + m_Counter].Oft : m_DarkFemaleAppearances [(Y * X) + m_Counter].Oft);  					OnButtonClicked (this' EArgs);  					break;  				}  			}  			m_SkinBtns [Y + m_Counter].IsButtonClicked = true;  		}  	} else {  		if (m_SkinBtns [Y + m_Counter].IsButtonClicked)  			m_SkinBtns [Y + m_Counter].SourcePosition.X -= m_BtnWidth;  		m_SkinBtns [Y + m_Counter].IsButtonClicked = false;  	}  	if (!m_SkinBtns [Y + m_Counter].IsMouseHovering) {  		m_SkinBtns [Y + m_Counter].SourcePosition.X -= m_BtnWidth;  		m_SkinBtns [Y + m_Counter].IsMouseHovering = true;  	}  } else {  	m_SkinBtns [Y + m_Counter].SourcePosition.X = (m_BtnWidth * 2);  	m_SkinBtns [Y + m_Counter].IsMouseHovering = false;  }  
Magic Number,Gonzo.Elements,UIBodyBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIBodyBrowser.cs,Update,The following statement contains a magic number: if (IsMouseOverButton (Helper' m_SkinBtns [Y + m_Counter]' Position + ButtonPosition)) {  	if (Helper.IsNewPress (MouseButtons.LeftButton)) {  		if (!m_SkinBtns [Y + m_Counter].IsButtonClicked) {  			m_SkinBtns [Y + m_Counter].SourcePosition.X += m_BtnWidth;  			if (OnButtonClicked != null) {  				UISkinButtonClickedEventArgs EArgs = new UISkinButtonClickedEventArgs ();  				switch (m_SelectedSkintype) {  				case Elements.SkinType.Light:  					EArgs.SkinType = 0;  					EArgs.SelectedOutfit = (m_Sex == AvatarSex.Male ? m_LightAppearances [(Y * X) + m_Counter].Oft : m_LightFemaleAppearances [(Y * X) + m_Counter].Oft);  					OnButtonClicked (this' EArgs);  					break;  				case Elements.SkinType.Medium:  					EArgs = new UISkinButtonClickedEventArgs ();  					EArgs.SkinType = 1;  					EArgs.SelectedOutfit = (m_Sex == AvatarSex.Male ? m_MediumAppearances [(X * Y) + m_Counter].Oft : m_MediumFemaleAppearances [(Y * X) + m_Counter].Oft);  					OnButtonClicked (this' EArgs);  					break;  				case Elements.SkinType.Dark:  					EArgs = new UISkinButtonClickedEventArgs ();  					EArgs.SkinType = 2;  					EArgs.SelectedOutfit = (m_Sex == AvatarSex.Male ? m_DarkAppearances [(X * Y) + m_Counter].Oft : m_DarkFemaleAppearances [(Y * X) + m_Counter].Oft);  					OnButtonClicked (this' EArgs);  					break;  				}  			}  			m_SkinBtns [Y + m_Counter].IsButtonClicked = true;  		}  	} else {  		if (m_SkinBtns [Y + m_Counter].IsButtonClicked)  			m_SkinBtns [Y + m_Counter].SourcePosition.X -= m_BtnWidth;  		m_SkinBtns [Y + m_Counter].IsButtonClicked = false;  	}  	if (!m_SkinBtns [Y + m_Counter].IsMouseHovering) {  		m_SkinBtns [Y + m_Counter].SourcePosition.X -= m_BtnWidth;  		m_SkinBtns [Y + m_Counter].IsMouseHovering = true;  	}  } else {  	m_SkinBtns [Y + m_Counter].SourcePosition.X = (m_BtnWidth * 2);  	m_SkinBtns [Y + m_Counter].IsMouseHovering = false;  }  
Magic Number,Gonzo.Elements,UIBodyBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIBodyBrowser.cs,Update,The following statement contains a magic number: if (Helper.IsNewPress (MouseButtons.LeftButton)) {  	if (!m_SkinBtns [Y + m_Counter].IsButtonClicked) {  		m_SkinBtns [Y + m_Counter].SourcePosition.X += m_BtnWidth;  		if (OnButtonClicked != null) {  			UISkinButtonClickedEventArgs EArgs = new UISkinButtonClickedEventArgs ();  			switch (m_SelectedSkintype) {  			case Elements.SkinType.Light:  				EArgs.SkinType = 0;  				EArgs.SelectedOutfit = (m_Sex == AvatarSex.Male ? m_LightAppearances [(Y * X) + m_Counter].Oft : m_LightFemaleAppearances [(Y * X) + m_Counter].Oft);  				OnButtonClicked (this' EArgs);  				break;  			case Elements.SkinType.Medium:  				EArgs = new UISkinButtonClickedEventArgs ();  				EArgs.SkinType = 1;  				EArgs.SelectedOutfit = (m_Sex == AvatarSex.Male ? m_MediumAppearances [(X * Y) + m_Counter].Oft : m_MediumFemaleAppearances [(Y * X) + m_Counter].Oft);  				OnButtonClicked (this' EArgs);  				break;  			case Elements.SkinType.Dark:  				EArgs = new UISkinButtonClickedEventArgs ();  				EArgs.SkinType = 2;  				EArgs.SelectedOutfit = (m_Sex == AvatarSex.Male ? m_DarkAppearances [(X * Y) + m_Counter].Oft : m_DarkFemaleAppearances [(Y * X) + m_Counter].Oft);  				OnButtonClicked (this' EArgs);  				break;  			}  		}  		m_SkinBtns [Y + m_Counter].IsButtonClicked = true;  	}  } else {  	if (m_SkinBtns [Y + m_Counter].IsButtonClicked)  		m_SkinBtns [Y + m_Counter].SourcePosition.X -= m_BtnWidth;  	m_SkinBtns [Y + m_Counter].IsButtonClicked = false;  }  
Magic Number,Gonzo.Elements,UIBodyBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIBodyBrowser.cs,Update,The following statement contains a magic number: if (!m_SkinBtns [Y + m_Counter].IsButtonClicked) {  	m_SkinBtns [Y + m_Counter].SourcePosition.X += m_BtnWidth;  	if (OnButtonClicked != null) {  		UISkinButtonClickedEventArgs EArgs = new UISkinButtonClickedEventArgs ();  		switch (m_SelectedSkintype) {  		case Elements.SkinType.Light:  			EArgs.SkinType = 0;  			EArgs.SelectedOutfit = (m_Sex == AvatarSex.Male ? m_LightAppearances [(Y * X) + m_Counter].Oft : m_LightFemaleAppearances [(Y * X) + m_Counter].Oft);  			OnButtonClicked (this' EArgs);  			break;  		case Elements.SkinType.Medium:  			EArgs = new UISkinButtonClickedEventArgs ();  			EArgs.SkinType = 1;  			EArgs.SelectedOutfit = (m_Sex == AvatarSex.Male ? m_MediumAppearances [(X * Y) + m_Counter].Oft : m_MediumFemaleAppearances [(Y * X) + m_Counter].Oft);  			OnButtonClicked (this' EArgs);  			break;  		case Elements.SkinType.Dark:  			EArgs = new UISkinButtonClickedEventArgs ();  			EArgs.SkinType = 2;  			EArgs.SelectedOutfit = (m_Sex == AvatarSex.Male ? m_DarkAppearances [(X * Y) + m_Counter].Oft : m_DarkFemaleAppearances [(Y * X) + m_Counter].Oft);  			OnButtonClicked (this' EArgs);  			break;  		}  	}  	m_SkinBtns [Y + m_Counter].IsButtonClicked = true;  }  
Magic Number,Gonzo.Elements,UIBodyBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIBodyBrowser.cs,Update,The following statement contains a magic number: if (OnButtonClicked != null) {  	UISkinButtonClickedEventArgs EArgs = new UISkinButtonClickedEventArgs ();  	switch (m_SelectedSkintype) {  	case Elements.SkinType.Light:  		EArgs.SkinType = 0;  		EArgs.SelectedOutfit = (m_Sex == AvatarSex.Male ? m_LightAppearances [(Y * X) + m_Counter].Oft : m_LightFemaleAppearances [(Y * X) + m_Counter].Oft);  		OnButtonClicked (this' EArgs);  		break;  	case Elements.SkinType.Medium:  		EArgs = new UISkinButtonClickedEventArgs ();  		EArgs.SkinType = 1;  		EArgs.SelectedOutfit = (m_Sex == AvatarSex.Male ? m_MediumAppearances [(X * Y) + m_Counter].Oft : m_MediumFemaleAppearances [(Y * X) + m_Counter].Oft);  		OnButtonClicked (this' EArgs);  		break;  	case Elements.SkinType.Dark:  		EArgs = new UISkinButtonClickedEventArgs ();  		EArgs.SkinType = 2;  		EArgs.SelectedOutfit = (m_Sex == AvatarSex.Male ? m_DarkAppearances [(X * Y) + m_Counter].Oft : m_DarkFemaleAppearances [(Y * X) + m_Counter].Oft);  		OnButtonClicked (this' EArgs);  		break;  	}  }  
Magic Number,Gonzo.Elements,UIBodyBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIBodyBrowser.cs,Update,The following statement contains a magic number: switch (m_SelectedSkintype) {  case Elements.SkinType.Light:  	EArgs.SkinType = 0;  	EArgs.SelectedOutfit = (m_Sex == AvatarSex.Male ? m_LightAppearances [(Y * X) + m_Counter].Oft : m_LightFemaleAppearances [(Y * X) + m_Counter].Oft);  	OnButtonClicked (this' EArgs);  	break;  case Elements.SkinType.Medium:  	EArgs = new UISkinButtonClickedEventArgs ();  	EArgs.SkinType = 1;  	EArgs.SelectedOutfit = (m_Sex == AvatarSex.Male ? m_MediumAppearances [(X * Y) + m_Counter].Oft : m_MediumFemaleAppearances [(Y * X) + m_Counter].Oft);  	OnButtonClicked (this' EArgs);  	break;  case Elements.SkinType.Dark:  	EArgs = new UISkinButtonClickedEventArgs ();  	EArgs.SkinType = 2;  	EArgs.SelectedOutfit = (m_Sex == AvatarSex.Male ? m_DarkAppearances [(X * Y) + m_Counter].Oft : m_DarkFemaleAppearances [(Y * X) + m_Counter].Oft);  	OnButtonClicked (this' EArgs);  	break;  }  
Magic Number,Gonzo.Elements,UIBodyBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIBodyBrowser.cs,Update,The following statement contains a magic number: EArgs.SkinType = 2;  
Magic Number,Gonzo.Elements,UIBodyBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIBodyBrowser.cs,Update,The following statement contains a magic number: m_SkinBtns [Y + m_Counter].SourcePosition.X = (m_BtnWidth * 2);  
Magic Number,Gonzo.Elements,UIBodyBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIBodyBrowser.cs,Draw,The following statement contains a magic number: SBatch.DrawString (m_Screen.Font9px' "Bodies: " + m_NumberOfBodies' new Vector2 (Position.X + (m_Size.X / 2) - m_Screen.Font9px.MeasureString ("Bodies: ").X' Position.Y + (m_Size.Y - 70))' new Color (255' 249' 157)' 0.0f' new Vector2 (0' 0)' 1.0f' SpriteEffects.None' m_Depth);  
Magic Number,Gonzo.Elements,UIBodyBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIBodyBrowser.cs,Draw,The following statement contains a magic number: SBatch.DrawString (m_Screen.Font9px' "Bodies: " + m_NumberOfBodies' new Vector2 (Position.X + (m_Size.X / 2) - m_Screen.Font9px.MeasureString ("Bodies: ").X' Position.Y + (m_Size.Y - 70))' new Color (255' 249' 157)' 0.0f' new Vector2 (0' 0)' 1.0f' SpriteEffects.None' m_Depth);  
Magic Number,Gonzo.Elements,UIBodyBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIBodyBrowser.cs,Draw,The following statement contains a magic number: SBatch.DrawString (m_Screen.Font9px' "Bodies: " + m_NumberOfBodies' new Vector2 (Position.X + (m_Size.X / 2) - m_Screen.Font9px.MeasureString ("Bodies: ").X' Position.Y + (m_Size.Y - 70))' new Color (255' 249' 157)' 0.0f' new Vector2 (0' 0)' 1.0f' SpriteEffects.None' m_Depth);  
Magic Number,Gonzo.Elements,UIBodyBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIBodyBrowser.cs,Draw,The following statement contains a magic number: SBatch.DrawString (m_Screen.Font9px' "Bodies: " + m_NumberOfBodies' new Vector2 (Position.X + (m_Size.X / 2) - m_Screen.Font9px.MeasureString ("Bodies: ").X' Position.Y + (m_Size.Y - 70))' new Color (255' 249' 157)' 0.0f' new Vector2 (0' 0)' 1.0f' SpriteEffects.None' m_Depth);  
Magic Number,Gonzo.Elements,UIBodyBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIBodyBrowser.cs,Draw,The following statement contains a magic number: SBatch.DrawString (m_Screen.Font9px' "Bodies: " + m_NumberOfBodies' new Vector2 (Position.X + (m_Size.X / 2) - m_Screen.Font9px.MeasureString ("Bodies: ").X' Position.Y + (m_Size.Y - 70))' new Color (255' 249' 157)' 0.0f' new Vector2 (0' 0)' 1.0f' SpriteEffects.None' m_Depth);  
Magic Number,Gonzo.Elements,UIBodyBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIBodyBrowser.cs,Draw,The following statement contains a magic number: switch (m_SelectedSkintype) {  case Elements.SkinType.Light:  	for (int X = 0; X <= m_Map.GetUpperBound (1); X++) {  		for (int Y = 0; Y <= m_Map.GetUpperBound (0); Y++) {  			m_Thumb = FileManager.GetTexture (m_Sex == AvatarSex.Male ? m_LightAppearances [(Y * X) + m_Counter].LightAppearance.ThumbnailID.UniqueID : m_LightFemaleAppearances [(Y * X) + m_Counter].LightAppearance.ThumbnailID.UniqueID);  			m_BtnWidth = m_SkinBtns [m_Counter + Y].BtnTex.Width / 4;  			m_BtnHeight = m_SkinBtns [m_Counter + Y].BtnTex.Height;  			Vector2 TexturePosition = new Vector2 (X * (BodyTileSize.X + 16)' Y * (BodyTileSize.Y));  			Vector2 ButtonPosition = new Vector2 (TexturePosition.X - 3' TexturePosition.Y - 5);  			SBatch.Draw (m_SkinBtns [Y + m_Counter].BtnTex' new Rectangle ((int)(Position.X + ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)' new Rectangle ((int)m_SkinBtns [m_Counter + Y].SourcePosition.X' (int)m_SkinBtns [m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);  			SBatch.Draw (m_Thumb' new Rectangle ((int)(Position.X + TexturePosition.X)' (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)' null' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth);  			if (m_Counter < m_NumberOfSkinsToDisplay)  				m_Counter++;  		}  	}  	break;  case Elements.SkinType.Medium:  	for (int X = 0; X <= m_Map.GetUpperBound (1); X++) {  		for (int Y = 0; Y <= m_Map.GetUpperBound (0); Y++) {  			m_Thumb = FileManager.GetTexture (m_Sex == AvatarSex.Male ? m_MediumAppearances [(Y * X) + m_Counter].MediumAppearance.ThumbnailID.UniqueID : m_MediumFemaleAppearances [(Y * X) + m_Counter].MediumAppearance.ThumbnailID.UniqueID);  			m_BtnWidth = m_SkinBtns [m_Counter + Y].BtnTex.Width / 4;  			m_BtnHeight = m_SkinBtns [m_Counter + Y].BtnTex.Height;  			Vector2 TexturePosition = new Vector2 (X * (BodyTileSize.X + 16)' Y * (BodyTileSize.Y));  			Vector2 ButtonPosition = new Vector2 (TexturePosition.X - 3' TexturePosition.Y - 5);  			SBatch.Draw (m_SkinBtns [Y + m_Counter].BtnTex' new Rectangle ((int)(Position.X + ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)' new Rectangle ((int)m_SkinBtns [m_Counter + Y].SourcePosition.X' (int)m_SkinBtns [m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);  			SBatch.Draw (m_Thumb' new Rectangle ((int)(Position.X + TexturePosition.X)' (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)' null' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth);  			if (m_Counter < m_NumberOfSkinsToDisplay)  				m_Counter++;  		}  	}  	break;  case Elements.SkinType.Dark:  	for (int X = 0; X <= m_Map.GetUpperBound (1); X++) {  		for (int Y = 0; Y <= m_Map.GetUpperBound (0); Y++) {  			m_Thumb = FileManager.GetTexture (m_Sex == AvatarSex.Male ? m_DarkAppearances [(Y * X) + m_Counter].DarkAppearance.ThumbnailID.UniqueID : m_DarkFemaleAppearances [(Y * X) + m_Counter].DarkAppearance.ThumbnailID.UniqueID);  			m_BtnWidth = m_SkinBtns [m_Counter + Y].BtnTex.Width / 4;  			m_BtnHeight = m_SkinBtns [m_Counter + Y].BtnTex.Height;  			Vector2 TexturePosition = new Vector2 (X * (BodyTileSize.X + 16)' Y * (BodyTileSize.Y));  			Vector2 ButtonPosition = new Vector2 (TexturePosition.X - 3' TexturePosition.Y - 5);  			SBatch.Draw (m_SkinBtns [Y + m_Counter].BtnTex' new Rectangle ((int)(Position.X + ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)' new Rectangle ((int)m_SkinBtns [m_Counter + Y].SourcePosition.X' (int)m_SkinBtns [m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);  			SBatch.Draw (m_Thumb' new Rectangle ((int)(Position.X + TexturePosition.X)' (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)' null' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth);  			if (m_Counter < m_NumberOfSkinsToDisplay)  				m_Counter++;  		}  	}  	break;  }  
Magic Number,Gonzo.Elements,UIBodyBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIBodyBrowser.cs,Draw,The following statement contains a magic number: switch (m_SelectedSkintype) {  case Elements.SkinType.Light:  	for (int X = 0; X <= m_Map.GetUpperBound (1); X++) {  		for (int Y = 0; Y <= m_Map.GetUpperBound (0); Y++) {  			m_Thumb = FileManager.GetTexture (m_Sex == AvatarSex.Male ? m_LightAppearances [(Y * X) + m_Counter].LightAppearance.ThumbnailID.UniqueID : m_LightFemaleAppearances [(Y * X) + m_Counter].LightAppearance.ThumbnailID.UniqueID);  			m_BtnWidth = m_SkinBtns [m_Counter + Y].BtnTex.Width / 4;  			m_BtnHeight = m_SkinBtns [m_Counter + Y].BtnTex.Height;  			Vector2 TexturePosition = new Vector2 (X * (BodyTileSize.X + 16)' Y * (BodyTileSize.Y));  			Vector2 ButtonPosition = new Vector2 (TexturePosition.X - 3' TexturePosition.Y - 5);  			SBatch.Draw (m_SkinBtns [Y + m_Counter].BtnTex' new Rectangle ((int)(Position.X + ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)' new Rectangle ((int)m_SkinBtns [m_Counter + Y].SourcePosition.X' (int)m_SkinBtns [m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);  			SBatch.Draw (m_Thumb' new Rectangle ((int)(Position.X + TexturePosition.X)' (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)' null' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth);  			if (m_Counter < m_NumberOfSkinsToDisplay)  				m_Counter++;  		}  	}  	break;  case Elements.SkinType.Medium:  	for (int X = 0; X <= m_Map.GetUpperBound (1); X++) {  		for (int Y = 0; Y <= m_Map.GetUpperBound (0); Y++) {  			m_Thumb = FileManager.GetTexture (m_Sex == AvatarSex.Male ? m_MediumAppearances [(Y * X) + m_Counter].MediumAppearance.ThumbnailID.UniqueID : m_MediumFemaleAppearances [(Y * X) + m_Counter].MediumAppearance.ThumbnailID.UniqueID);  			m_BtnWidth = m_SkinBtns [m_Counter + Y].BtnTex.Width / 4;  			m_BtnHeight = m_SkinBtns [m_Counter + Y].BtnTex.Height;  			Vector2 TexturePosition = new Vector2 (X * (BodyTileSize.X + 16)' Y * (BodyTileSize.Y));  			Vector2 ButtonPosition = new Vector2 (TexturePosition.X - 3' TexturePosition.Y - 5);  			SBatch.Draw (m_SkinBtns [Y + m_Counter].BtnTex' new Rectangle ((int)(Position.X + ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)' new Rectangle ((int)m_SkinBtns [m_Counter + Y].SourcePosition.X' (int)m_SkinBtns [m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);  			SBatch.Draw (m_Thumb' new Rectangle ((int)(Position.X + TexturePosition.X)' (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)' null' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth);  			if (m_Counter < m_NumberOfSkinsToDisplay)  				m_Counter++;  		}  	}  	break;  case Elements.SkinType.Dark:  	for (int X = 0; X <= m_Map.GetUpperBound (1); X++) {  		for (int Y = 0; Y <= m_Map.GetUpperBound (0); Y++) {  			m_Thumb = FileManager.GetTexture (m_Sex == AvatarSex.Male ? m_DarkAppearances [(Y * X) + m_Counter].DarkAppearance.ThumbnailID.UniqueID : m_DarkFemaleAppearances [(Y * X) + m_Counter].DarkAppearance.ThumbnailID.UniqueID);  			m_BtnWidth = m_SkinBtns [m_Counter + Y].BtnTex.Width / 4;  			m_BtnHeight = m_SkinBtns [m_Counter + Y].BtnTex.Height;  			Vector2 TexturePosition = new Vector2 (X * (BodyTileSize.X + 16)' Y * (BodyTileSize.Y));  			Vector2 ButtonPosition = new Vector2 (TexturePosition.X - 3' TexturePosition.Y - 5);  			SBatch.Draw (m_SkinBtns [Y + m_Counter].BtnTex' new Rectangle ((int)(Position.X + ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)' new Rectangle ((int)m_SkinBtns [m_Counter + Y].SourcePosition.X' (int)m_SkinBtns [m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);  			SBatch.Draw (m_Thumb' new Rectangle ((int)(Position.X + TexturePosition.X)' (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)' null' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth);  			if (m_Counter < m_NumberOfSkinsToDisplay)  				m_Counter++;  		}  	}  	break;  }  
Magic Number,Gonzo.Elements,UIBodyBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIBodyBrowser.cs,Draw,The following statement contains a magic number: switch (m_SelectedSkintype) {  case Elements.SkinType.Light:  	for (int X = 0; X <= m_Map.GetUpperBound (1); X++) {  		for (int Y = 0; Y <= m_Map.GetUpperBound (0); Y++) {  			m_Thumb = FileManager.GetTexture (m_Sex == AvatarSex.Male ? m_LightAppearances [(Y * X) + m_Counter].LightAppearance.ThumbnailID.UniqueID : m_LightFemaleAppearances [(Y * X) + m_Counter].LightAppearance.ThumbnailID.UniqueID);  			m_BtnWidth = m_SkinBtns [m_Counter + Y].BtnTex.Width / 4;  			m_BtnHeight = m_SkinBtns [m_Counter + Y].BtnTex.Height;  			Vector2 TexturePosition = new Vector2 (X * (BodyTileSize.X + 16)' Y * (BodyTileSize.Y));  			Vector2 ButtonPosition = new Vector2 (TexturePosition.X - 3' TexturePosition.Y - 5);  			SBatch.Draw (m_SkinBtns [Y + m_Counter].BtnTex' new Rectangle ((int)(Position.X + ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)' new Rectangle ((int)m_SkinBtns [m_Counter + Y].SourcePosition.X' (int)m_SkinBtns [m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);  			SBatch.Draw (m_Thumb' new Rectangle ((int)(Position.X + TexturePosition.X)' (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)' null' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth);  			if (m_Counter < m_NumberOfSkinsToDisplay)  				m_Counter++;  		}  	}  	break;  case Elements.SkinType.Medium:  	for (int X = 0; X <= m_Map.GetUpperBound (1); X++) {  		for (int Y = 0; Y <= m_Map.GetUpperBound (0); Y++) {  			m_Thumb = FileManager.GetTexture (m_Sex == AvatarSex.Male ? m_MediumAppearances [(Y * X) + m_Counter].MediumAppearance.ThumbnailID.UniqueID : m_MediumFemaleAppearances [(Y * X) + m_Counter].MediumAppearance.ThumbnailID.UniqueID);  			m_BtnWidth = m_SkinBtns [m_Counter + Y].BtnTex.Width / 4;  			m_BtnHeight = m_SkinBtns [m_Counter + Y].BtnTex.Height;  			Vector2 TexturePosition = new Vector2 (X * (BodyTileSize.X + 16)' Y * (BodyTileSize.Y));  			Vector2 ButtonPosition = new Vector2 (TexturePosition.X - 3' TexturePosition.Y - 5);  			SBatch.Draw (m_SkinBtns [Y + m_Counter].BtnTex' new Rectangle ((int)(Position.X + ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)' new Rectangle ((int)m_SkinBtns [m_Counter + Y].SourcePosition.X' (int)m_SkinBtns [m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);  			SBatch.Draw (m_Thumb' new Rectangle ((int)(Position.X + TexturePosition.X)' (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)' null' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth);  			if (m_Counter < m_NumberOfSkinsToDisplay)  				m_Counter++;  		}  	}  	break;  case Elements.SkinType.Dark:  	for (int X = 0; X <= m_Map.GetUpperBound (1); X++) {  		for (int Y = 0; Y <= m_Map.GetUpperBound (0); Y++) {  			m_Thumb = FileManager.GetTexture (m_Sex == AvatarSex.Male ? m_DarkAppearances [(Y * X) + m_Counter].DarkAppearance.ThumbnailID.UniqueID : m_DarkFemaleAppearances [(Y * X) + m_Counter].DarkAppearance.ThumbnailID.UniqueID);  			m_BtnWidth = m_SkinBtns [m_Counter + Y].BtnTex.Width / 4;  			m_BtnHeight = m_SkinBtns [m_Counter + Y].BtnTex.Height;  			Vector2 TexturePosition = new Vector2 (X * (BodyTileSize.X + 16)' Y * (BodyTileSize.Y));  			Vector2 ButtonPosition = new Vector2 (TexturePosition.X - 3' TexturePosition.Y - 5);  			SBatch.Draw (m_SkinBtns [Y + m_Counter].BtnTex' new Rectangle ((int)(Position.X + ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)' new Rectangle ((int)m_SkinBtns [m_Counter + Y].SourcePosition.X' (int)m_SkinBtns [m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);  			SBatch.Draw (m_Thumb' new Rectangle ((int)(Position.X + TexturePosition.X)' (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)' null' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth);  			if (m_Counter < m_NumberOfSkinsToDisplay)  				m_Counter++;  		}  	}  	break;  }  
Magic Number,Gonzo.Elements,UIBodyBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIBodyBrowser.cs,Draw,The following statement contains a magic number: switch (m_SelectedSkintype) {  case Elements.SkinType.Light:  	for (int X = 0; X <= m_Map.GetUpperBound (1); X++) {  		for (int Y = 0; Y <= m_Map.GetUpperBound (0); Y++) {  			m_Thumb = FileManager.GetTexture (m_Sex == AvatarSex.Male ? m_LightAppearances [(Y * X) + m_Counter].LightAppearance.ThumbnailID.UniqueID : m_LightFemaleAppearances [(Y * X) + m_Counter].LightAppearance.ThumbnailID.UniqueID);  			m_BtnWidth = m_SkinBtns [m_Counter + Y].BtnTex.Width / 4;  			m_BtnHeight = m_SkinBtns [m_Counter + Y].BtnTex.Height;  			Vector2 TexturePosition = new Vector2 (X * (BodyTileSize.X + 16)' Y * (BodyTileSize.Y));  			Vector2 ButtonPosition = new Vector2 (TexturePosition.X - 3' TexturePosition.Y - 5);  			SBatch.Draw (m_SkinBtns [Y + m_Counter].BtnTex' new Rectangle ((int)(Position.X + ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)' new Rectangle ((int)m_SkinBtns [m_Counter + Y].SourcePosition.X' (int)m_SkinBtns [m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);  			SBatch.Draw (m_Thumb' new Rectangle ((int)(Position.X + TexturePosition.X)' (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)' null' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth);  			if (m_Counter < m_NumberOfSkinsToDisplay)  				m_Counter++;  		}  	}  	break;  case Elements.SkinType.Medium:  	for (int X = 0; X <= m_Map.GetUpperBound (1); X++) {  		for (int Y = 0; Y <= m_Map.GetUpperBound (0); Y++) {  			m_Thumb = FileManager.GetTexture (m_Sex == AvatarSex.Male ? m_MediumAppearances [(Y * X) + m_Counter].MediumAppearance.ThumbnailID.UniqueID : m_MediumFemaleAppearances [(Y * X) + m_Counter].MediumAppearance.ThumbnailID.UniqueID);  			m_BtnWidth = m_SkinBtns [m_Counter + Y].BtnTex.Width / 4;  			m_BtnHeight = m_SkinBtns [m_Counter + Y].BtnTex.Height;  			Vector2 TexturePosition = new Vector2 (X * (BodyTileSize.X + 16)' Y * (BodyTileSize.Y));  			Vector2 ButtonPosition = new Vector2 (TexturePosition.X - 3' TexturePosition.Y - 5);  			SBatch.Draw (m_SkinBtns [Y + m_Counter].BtnTex' new Rectangle ((int)(Position.X + ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)' new Rectangle ((int)m_SkinBtns [m_Counter + Y].SourcePosition.X' (int)m_SkinBtns [m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);  			SBatch.Draw (m_Thumb' new Rectangle ((int)(Position.X + TexturePosition.X)' (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)' null' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth);  			if (m_Counter < m_NumberOfSkinsToDisplay)  				m_Counter++;  		}  	}  	break;  case Elements.SkinType.Dark:  	for (int X = 0; X <= m_Map.GetUpperBound (1); X++) {  		for (int Y = 0; Y <= m_Map.GetUpperBound (0); Y++) {  			m_Thumb = FileManager.GetTexture (m_Sex == AvatarSex.Male ? m_DarkAppearances [(Y * X) + m_Counter].DarkAppearance.ThumbnailID.UniqueID : m_DarkFemaleAppearances [(Y * X) + m_Counter].DarkAppearance.ThumbnailID.UniqueID);  			m_BtnWidth = m_SkinBtns [m_Counter + Y].BtnTex.Width / 4;  			m_BtnHeight = m_SkinBtns [m_Counter + Y].BtnTex.Height;  			Vector2 TexturePosition = new Vector2 (X * (BodyTileSize.X + 16)' Y * (BodyTileSize.Y));  			Vector2 ButtonPosition = new Vector2 (TexturePosition.X - 3' TexturePosition.Y - 5);  			SBatch.Draw (m_SkinBtns [Y + m_Counter].BtnTex' new Rectangle ((int)(Position.X + ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)' new Rectangle ((int)m_SkinBtns [m_Counter + Y].SourcePosition.X' (int)m_SkinBtns [m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);  			SBatch.Draw (m_Thumb' new Rectangle ((int)(Position.X + TexturePosition.X)' (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)' null' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth);  			if (m_Counter < m_NumberOfSkinsToDisplay)  				m_Counter++;  		}  	}  	break;  }  
Magic Number,Gonzo.Elements,UIBodyBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIBodyBrowser.cs,Draw,The following statement contains a magic number: switch (m_SelectedSkintype) {  case Elements.SkinType.Light:  	for (int X = 0; X <= m_Map.GetUpperBound (1); X++) {  		for (int Y = 0; Y <= m_Map.GetUpperBound (0); Y++) {  			m_Thumb = FileManager.GetTexture (m_Sex == AvatarSex.Male ? m_LightAppearances [(Y * X) + m_Counter].LightAppearance.ThumbnailID.UniqueID : m_LightFemaleAppearances [(Y * X) + m_Counter].LightAppearance.ThumbnailID.UniqueID);  			m_BtnWidth = m_SkinBtns [m_Counter + Y].BtnTex.Width / 4;  			m_BtnHeight = m_SkinBtns [m_Counter + Y].BtnTex.Height;  			Vector2 TexturePosition = new Vector2 (X * (BodyTileSize.X + 16)' Y * (BodyTileSize.Y));  			Vector2 ButtonPosition = new Vector2 (TexturePosition.X - 3' TexturePosition.Y - 5);  			SBatch.Draw (m_SkinBtns [Y + m_Counter].BtnTex' new Rectangle ((int)(Position.X + ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)' new Rectangle ((int)m_SkinBtns [m_Counter + Y].SourcePosition.X' (int)m_SkinBtns [m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);  			SBatch.Draw (m_Thumb' new Rectangle ((int)(Position.X + TexturePosition.X)' (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)' null' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth);  			if (m_Counter < m_NumberOfSkinsToDisplay)  				m_Counter++;  		}  	}  	break;  case Elements.SkinType.Medium:  	for (int X = 0; X <= m_Map.GetUpperBound (1); X++) {  		for (int Y = 0; Y <= m_Map.GetUpperBound (0); Y++) {  			m_Thumb = FileManager.GetTexture (m_Sex == AvatarSex.Male ? m_MediumAppearances [(Y * X) + m_Counter].MediumAppearance.ThumbnailID.UniqueID : m_MediumFemaleAppearances [(Y * X) + m_Counter].MediumAppearance.ThumbnailID.UniqueID);  			m_BtnWidth = m_SkinBtns [m_Counter + Y].BtnTex.Width / 4;  			m_BtnHeight = m_SkinBtns [m_Counter + Y].BtnTex.Height;  			Vector2 TexturePosition = new Vector2 (X * (BodyTileSize.X + 16)' Y * (BodyTileSize.Y));  			Vector2 ButtonPosition = new Vector2 (TexturePosition.X - 3' TexturePosition.Y - 5);  			SBatch.Draw (m_SkinBtns [Y + m_Counter].BtnTex' new Rectangle ((int)(Position.X + ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)' new Rectangle ((int)m_SkinBtns [m_Counter + Y].SourcePosition.X' (int)m_SkinBtns [m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);  			SBatch.Draw (m_Thumb' new Rectangle ((int)(Position.X + TexturePosition.X)' (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)' null' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth);  			if (m_Counter < m_NumberOfSkinsToDisplay)  				m_Counter++;  		}  	}  	break;  case Elements.SkinType.Dark:  	for (int X = 0; X <= m_Map.GetUpperBound (1); X++) {  		for (int Y = 0; Y <= m_Map.GetUpperBound (0); Y++) {  			m_Thumb = FileManager.GetTexture (m_Sex == AvatarSex.Male ? m_DarkAppearances [(Y * X) + m_Counter].DarkAppearance.ThumbnailID.UniqueID : m_DarkFemaleAppearances [(Y * X) + m_Counter].DarkAppearance.ThumbnailID.UniqueID);  			m_BtnWidth = m_SkinBtns [m_Counter + Y].BtnTex.Width / 4;  			m_BtnHeight = m_SkinBtns [m_Counter + Y].BtnTex.Height;  			Vector2 TexturePosition = new Vector2 (X * (BodyTileSize.X + 16)' Y * (BodyTileSize.Y));  			Vector2 ButtonPosition = new Vector2 (TexturePosition.X - 3' TexturePosition.Y - 5);  			SBatch.Draw (m_SkinBtns [Y + m_Counter].BtnTex' new Rectangle ((int)(Position.X + ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)' new Rectangle ((int)m_SkinBtns [m_Counter + Y].SourcePosition.X' (int)m_SkinBtns [m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);  			SBatch.Draw (m_Thumb' new Rectangle ((int)(Position.X + TexturePosition.X)' (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)' null' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth);  			if (m_Counter < m_NumberOfSkinsToDisplay)  				m_Counter++;  		}  	}  	break;  }  
Magic Number,Gonzo.Elements,UIBodyBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIBodyBrowser.cs,Draw,The following statement contains a magic number: switch (m_SelectedSkintype) {  case Elements.SkinType.Light:  	for (int X = 0; X <= m_Map.GetUpperBound (1); X++) {  		for (int Y = 0; Y <= m_Map.GetUpperBound (0); Y++) {  			m_Thumb = FileManager.GetTexture (m_Sex == AvatarSex.Male ? m_LightAppearances [(Y * X) + m_Counter].LightAppearance.ThumbnailID.UniqueID : m_LightFemaleAppearances [(Y * X) + m_Counter].LightAppearance.ThumbnailID.UniqueID);  			m_BtnWidth = m_SkinBtns [m_Counter + Y].BtnTex.Width / 4;  			m_BtnHeight = m_SkinBtns [m_Counter + Y].BtnTex.Height;  			Vector2 TexturePosition = new Vector2 (X * (BodyTileSize.X + 16)' Y * (BodyTileSize.Y));  			Vector2 ButtonPosition = new Vector2 (TexturePosition.X - 3' TexturePosition.Y - 5);  			SBatch.Draw (m_SkinBtns [Y + m_Counter].BtnTex' new Rectangle ((int)(Position.X + ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)' new Rectangle ((int)m_SkinBtns [m_Counter + Y].SourcePosition.X' (int)m_SkinBtns [m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);  			SBatch.Draw (m_Thumb' new Rectangle ((int)(Position.X + TexturePosition.X)' (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)' null' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth);  			if (m_Counter < m_NumberOfSkinsToDisplay)  				m_Counter++;  		}  	}  	break;  case Elements.SkinType.Medium:  	for (int X = 0; X <= m_Map.GetUpperBound (1); X++) {  		for (int Y = 0; Y <= m_Map.GetUpperBound (0); Y++) {  			m_Thumb = FileManager.GetTexture (m_Sex == AvatarSex.Male ? m_MediumAppearances [(Y * X) + m_Counter].MediumAppearance.ThumbnailID.UniqueID : m_MediumFemaleAppearances [(Y * X) + m_Counter].MediumAppearance.ThumbnailID.UniqueID);  			m_BtnWidth = m_SkinBtns [m_Counter + Y].BtnTex.Width / 4;  			m_BtnHeight = m_SkinBtns [m_Counter + Y].BtnTex.Height;  			Vector2 TexturePosition = new Vector2 (X * (BodyTileSize.X + 16)' Y * (BodyTileSize.Y));  			Vector2 ButtonPosition = new Vector2 (TexturePosition.X - 3' TexturePosition.Y - 5);  			SBatch.Draw (m_SkinBtns [Y + m_Counter].BtnTex' new Rectangle ((int)(Position.X + ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)' new Rectangle ((int)m_SkinBtns [m_Counter + Y].SourcePosition.X' (int)m_SkinBtns [m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);  			SBatch.Draw (m_Thumb' new Rectangle ((int)(Position.X + TexturePosition.X)' (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)' null' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth);  			if (m_Counter < m_NumberOfSkinsToDisplay)  				m_Counter++;  		}  	}  	break;  case Elements.SkinType.Dark:  	for (int X = 0; X <= m_Map.GetUpperBound (1); X++) {  		for (int Y = 0; Y <= m_Map.GetUpperBound (0); Y++) {  			m_Thumb = FileManager.GetTexture (m_Sex == AvatarSex.Male ? m_DarkAppearances [(Y * X) + m_Counter].DarkAppearance.ThumbnailID.UniqueID : m_DarkFemaleAppearances [(Y * X) + m_Counter].DarkAppearance.ThumbnailID.UniqueID);  			m_BtnWidth = m_SkinBtns [m_Counter + Y].BtnTex.Width / 4;  			m_BtnHeight = m_SkinBtns [m_Counter + Y].BtnTex.Height;  			Vector2 TexturePosition = new Vector2 (X * (BodyTileSize.X + 16)' Y * (BodyTileSize.Y));  			Vector2 ButtonPosition = new Vector2 (TexturePosition.X - 3' TexturePosition.Y - 5);  			SBatch.Draw (m_SkinBtns [Y + m_Counter].BtnTex' new Rectangle ((int)(Position.X + ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)' new Rectangle ((int)m_SkinBtns [m_Counter + Y].SourcePosition.X' (int)m_SkinBtns [m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);  			SBatch.Draw (m_Thumb' new Rectangle ((int)(Position.X + TexturePosition.X)' (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)' null' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth);  			if (m_Counter < m_NumberOfSkinsToDisplay)  				m_Counter++;  		}  	}  	break;  }  
Magic Number,Gonzo.Elements,UIBodyBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIBodyBrowser.cs,Draw,The following statement contains a magic number: switch (m_SelectedSkintype) {  case Elements.SkinType.Light:  	for (int X = 0; X <= m_Map.GetUpperBound (1); X++) {  		for (int Y = 0; Y <= m_Map.GetUpperBound (0); Y++) {  			m_Thumb = FileManager.GetTexture (m_Sex == AvatarSex.Male ? m_LightAppearances [(Y * X) + m_Counter].LightAppearance.ThumbnailID.UniqueID : m_LightFemaleAppearances [(Y * X) + m_Counter].LightAppearance.ThumbnailID.UniqueID);  			m_BtnWidth = m_SkinBtns [m_Counter + Y].BtnTex.Width / 4;  			m_BtnHeight = m_SkinBtns [m_Counter + Y].BtnTex.Height;  			Vector2 TexturePosition = new Vector2 (X * (BodyTileSize.X + 16)' Y * (BodyTileSize.Y));  			Vector2 ButtonPosition = new Vector2 (TexturePosition.X - 3' TexturePosition.Y - 5);  			SBatch.Draw (m_SkinBtns [Y + m_Counter].BtnTex' new Rectangle ((int)(Position.X + ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)' new Rectangle ((int)m_SkinBtns [m_Counter + Y].SourcePosition.X' (int)m_SkinBtns [m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);  			SBatch.Draw (m_Thumb' new Rectangle ((int)(Position.X + TexturePosition.X)' (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)' null' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth);  			if (m_Counter < m_NumberOfSkinsToDisplay)  				m_Counter++;  		}  	}  	break;  case Elements.SkinType.Medium:  	for (int X = 0; X <= m_Map.GetUpperBound (1); X++) {  		for (int Y = 0; Y <= m_Map.GetUpperBound (0); Y++) {  			m_Thumb = FileManager.GetTexture (m_Sex == AvatarSex.Male ? m_MediumAppearances [(Y * X) + m_Counter].MediumAppearance.ThumbnailID.UniqueID : m_MediumFemaleAppearances [(Y * X) + m_Counter].MediumAppearance.ThumbnailID.UniqueID);  			m_BtnWidth = m_SkinBtns [m_Counter + Y].BtnTex.Width / 4;  			m_BtnHeight = m_SkinBtns [m_Counter + Y].BtnTex.Height;  			Vector2 TexturePosition = new Vector2 (X * (BodyTileSize.X + 16)' Y * (BodyTileSize.Y));  			Vector2 ButtonPosition = new Vector2 (TexturePosition.X - 3' TexturePosition.Y - 5);  			SBatch.Draw (m_SkinBtns [Y + m_Counter].BtnTex' new Rectangle ((int)(Position.X + ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)' new Rectangle ((int)m_SkinBtns [m_Counter + Y].SourcePosition.X' (int)m_SkinBtns [m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);  			SBatch.Draw (m_Thumb' new Rectangle ((int)(Position.X + TexturePosition.X)' (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)' null' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth);  			if (m_Counter < m_NumberOfSkinsToDisplay)  				m_Counter++;  		}  	}  	break;  case Elements.SkinType.Dark:  	for (int X = 0; X <= m_Map.GetUpperBound (1); X++) {  		for (int Y = 0; Y <= m_Map.GetUpperBound (0); Y++) {  			m_Thumb = FileManager.GetTexture (m_Sex == AvatarSex.Male ? m_DarkAppearances [(Y * X) + m_Counter].DarkAppearance.ThumbnailID.UniqueID : m_DarkFemaleAppearances [(Y * X) + m_Counter].DarkAppearance.ThumbnailID.UniqueID);  			m_BtnWidth = m_SkinBtns [m_Counter + Y].BtnTex.Width / 4;  			m_BtnHeight = m_SkinBtns [m_Counter + Y].BtnTex.Height;  			Vector2 TexturePosition = new Vector2 (X * (BodyTileSize.X + 16)' Y * (BodyTileSize.Y));  			Vector2 ButtonPosition = new Vector2 (TexturePosition.X - 3' TexturePosition.Y - 5);  			SBatch.Draw (m_SkinBtns [Y + m_Counter].BtnTex' new Rectangle ((int)(Position.X + ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)' new Rectangle ((int)m_SkinBtns [m_Counter + Y].SourcePosition.X' (int)m_SkinBtns [m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);  			SBatch.Draw (m_Thumb' new Rectangle ((int)(Position.X + TexturePosition.X)' (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)' null' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth);  			if (m_Counter < m_NumberOfSkinsToDisplay)  				m_Counter++;  		}  	}  	break;  }  
Magic Number,Gonzo.Elements,UIBodyBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIBodyBrowser.cs,Draw,The following statement contains a magic number: switch (m_SelectedSkintype) {  case Elements.SkinType.Light:  	for (int X = 0; X <= m_Map.GetUpperBound (1); X++) {  		for (int Y = 0; Y <= m_Map.GetUpperBound (0); Y++) {  			m_Thumb = FileManager.GetTexture (m_Sex == AvatarSex.Male ? m_LightAppearances [(Y * X) + m_Counter].LightAppearance.ThumbnailID.UniqueID : m_LightFemaleAppearances [(Y * X) + m_Counter].LightAppearance.ThumbnailID.UniqueID);  			m_BtnWidth = m_SkinBtns [m_Counter + Y].BtnTex.Width / 4;  			m_BtnHeight = m_SkinBtns [m_Counter + Y].BtnTex.Height;  			Vector2 TexturePosition = new Vector2 (X * (BodyTileSize.X + 16)' Y * (BodyTileSize.Y));  			Vector2 ButtonPosition = new Vector2 (TexturePosition.X - 3' TexturePosition.Y - 5);  			SBatch.Draw (m_SkinBtns [Y + m_Counter].BtnTex' new Rectangle ((int)(Position.X + ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)' new Rectangle ((int)m_SkinBtns [m_Counter + Y].SourcePosition.X' (int)m_SkinBtns [m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);  			SBatch.Draw (m_Thumb' new Rectangle ((int)(Position.X + TexturePosition.X)' (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)' null' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth);  			if (m_Counter < m_NumberOfSkinsToDisplay)  				m_Counter++;  		}  	}  	break;  case Elements.SkinType.Medium:  	for (int X = 0; X <= m_Map.GetUpperBound (1); X++) {  		for (int Y = 0; Y <= m_Map.GetUpperBound (0); Y++) {  			m_Thumb = FileManager.GetTexture (m_Sex == AvatarSex.Male ? m_MediumAppearances [(Y * X) + m_Counter].MediumAppearance.ThumbnailID.UniqueID : m_MediumFemaleAppearances [(Y * X) + m_Counter].MediumAppearance.ThumbnailID.UniqueID);  			m_BtnWidth = m_SkinBtns [m_Counter + Y].BtnTex.Width / 4;  			m_BtnHeight = m_SkinBtns [m_Counter + Y].BtnTex.Height;  			Vector2 TexturePosition = new Vector2 (X * (BodyTileSize.X + 16)' Y * (BodyTileSize.Y));  			Vector2 ButtonPosition = new Vector2 (TexturePosition.X - 3' TexturePosition.Y - 5);  			SBatch.Draw (m_SkinBtns [Y + m_Counter].BtnTex' new Rectangle ((int)(Position.X + ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)' new Rectangle ((int)m_SkinBtns [m_Counter + Y].SourcePosition.X' (int)m_SkinBtns [m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);  			SBatch.Draw (m_Thumb' new Rectangle ((int)(Position.X + TexturePosition.X)' (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)' null' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth);  			if (m_Counter < m_NumberOfSkinsToDisplay)  				m_Counter++;  		}  	}  	break;  case Elements.SkinType.Dark:  	for (int X = 0; X <= m_Map.GetUpperBound (1); X++) {  		for (int Y = 0; Y <= m_Map.GetUpperBound (0); Y++) {  			m_Thumb = FileManager.GetTexture (m_Sex == AvatarSex.Male ? m_DarkAppearances [(Y * X) + m_Counter].DarkAppearance.ThumbnailID.UniqueID : m_DarkFemaleAppearances [(Y * X) + m_Counter].DarkAppearance.ThumbnailID.UniqueID);  			m_BtnWidth = m_SkinBtns [m_Counter + Y].BtnTex.Width / 4;  			m_BtnHeight = m_SkinBtns [m_Counter + Y].BtnTex.Height;  			Vector2 TexturePosition = new Vector2 (X * (BodyTileSize.X + 16)' Y * (BodyTileSize.Y));  			Vector2 ButtonPosition = new Vector2 (TexturePosition.X - 3' TexturePosition.Y - 5);  			SBatch.Draw (m_SkinBtns [Y + m_Counter].BtnTex' new Rectangle ((int)(Position.X + ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)' new Rectangle ((int)m_SkinBtns [m_Counter + Y].SourcePosition.X' (int)m_SkinBtns [m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);  			SBatch.Draw (m_Thumb' new Rectangle ((int)(Position.X + TexturePosition.X)' (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)' null' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth);  			if (m_Counter < m_NumberOfSkinsToDisplay)  				m_Counter++;  		}  	}  	break;  }  
Magic Number,Gonzo.Elements,UIBodyBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIBodyBrowser.cs,Draw,The following statement contains a magic number: switch (m_SelectedSkintype) {  case Elements.SkinType.Light:  	for (int X = 0; X <= m_Map.GetUpperBound (1); X++) {  		for (int Y = 0; Y <= m_Map.GetUpperBound (0); Y++) {  			m_Thumb = FileManager.GetTexture (m_Sex == AvatarSex.Male ? m_LightAppearances [(Y * X) + m_Counter].LightAppearance.ThumbnailID.UniqueID : m_LightFemaleAppearances [(Y * X) + m_Counter].LightAppearance.ThumbnailID.UniqueID);  			m_BtnWidth = m_SkinBtns [m_Counter + Y].BtnTex.Width / 4;  			m_BtnHeight = m_SkinBtns [m_Counter + Y].BtnTex.Height;  			Vector2 TexturePosition = new Vector2 (X * (BodyTileSize.X + 16)' Y * (BodyTileSize.Y));  			Vector2 ButtonPosition = new Vector2 (TexturePosition.X - 3' TexturePosition.Y - 5);  			SBatch.Draw (m_SkinBtns [Y + m_Counter].BtnTex' new Rectangle ((int)(Position.X + ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)' new Rectangle ((int)m_SkinBtns [m_Counter + Y].SourcePosition.X' (int)m_SkinBtns [m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);  			SBatch.Draw (m_Thumb' new Rectangle ((int)(Position.X + TexturePosition.X)' (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)' null' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth);  			if (m_Counter < m_NumberOfSkinsToDisplay)  				m_Counter++;  		}  	}  	break;  case Elements.SkinType.Medium:  	for (int X = 0; X <= m_Map.GetUpperBound (1); X++) {  		for (int Y = 0; Y <= m_Map.GetUpperBound (0); Y++) {  			m_Thumb = FileManager.GetTexture (m_Sex == AvatarSex.Male ? m_MediumAppearances [(Y * X) + m_Counter].MediumAppearance.ThumbnailID.UniqueID : m_MediumFemaleAppearances [(Y * X) + m_Counter].MediumAppearance.ThumbnailID.UniqueID);  			m_BtnWidth = m_SkinBtns [m_Counter + Y].BtnTex.Width / 4;  			m_BtnHeight = m_SkinBtns [m_Counter + Y].BtnTex.Height;  			Vector2 TexturePosition = new Vector2 (X * (BodyTileSize.X + 16)' Y * (BodyTileSize.Y));  			Vector2 ButtonPosition = new Vector2 (TexturePosition.X - 3' TexturePosition.Y - 5);  			SBatch.Draw (m_SkinBtns [Y + m_Counter].BtnTex' new Rectangle ((int)(Position.X + ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)' new Rectangle ((int)m_SkinBtns [m_Counter + Y].SourcePosition.X' (int)m_SkinBtns [m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);  			SBatch.Draw (m_Thumb' new Rectangle ((int)(Position.X + TexturePosition.X)' (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)' null' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth);  			if (m_Counter < m_NumberOfSkinsToDisplay)  				m_Counter++;  		}  	}  	break;  case Elements.SkinType.Dark:  	for (int X = 0; X <= m_Map.GetUpperBound (1); X++) {  		for (int Y = 0; Y <= m_Map.GetUpperBound (0); Y++) {  			m_Thumb = FileManager.GetTexture (m_Sex == AvatarSex.Male ? m_DarkAppearances [(Y * X) + m_Counter].DarkAppearance.ThumbnailID.UniqueID : m_DarkFemaleAppearances [(Y * X) + m_Counter].DarkAppearance.ThumbnailID.UniqueID);  			m_BtnWidth = m_SkinBtns [m_Counter + Y].BtnTex.Width / 4;  			m_BtnHeight = m_SkinBtns [m_Counter + Y].BtnTex.Height;  			Vector2 TexturePosition = new Vector2 (X * (BodyTileSize.X + 16)' Y * (BodyTileSize.Y));  			Vector2 ButtonPosition = new Vector2 (TexturePosition.X - 3' TexturePosition.Y - 5);  			SBatch.Draw (m_SkinBtns [Y + m_Counter].BtnTex' new Rectangle ((int)(Position.X + ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)' new Rectangle ((int)m_SkinBtns [m_Counter + Y].SourcePosition.X' (int)m_SkinBtns [m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);  			SBatch.Draw (m_Thumb' new Rectangle ((int)(Position.X + TexturePosition.X)' (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)' null' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth);  			if (m_Counter < m_NumberOfSkinsToDisplay)  				m_Counter++;  		}  	}  	break;  }  
Magic Number,Gonzo.Elements,UIBodyBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIBodyBrowser.cs,Draw,The following statement contains a magic number: switch (m_SelectedSkintype) {  case Elements.SkinType.Light:  	for (int X = 0; X <= m_Map.GetUpperBound (1); X++) {  		for (int Y = 0; Y <= m_Map.GetUpperBound (0); Y++) {  			m_Thumb = FileManager.GetTexture (m_Sex == AvatarSex.Male ? m_LightAppearances [(Y * X) + m_Counter].LightAppearance.ThumbnailID.UniqueID : m_LightFemaleAppearances [(Y * X) + m_Counter].LightAppearance.ThumbnailID.UniqueID);  			m_BtnWidth = m_SkinBtns [m_Counter + Y].BtnTex.Width / 4;  			m_BtnHeight = m_SkinBtns [m_Counter + Y].BtnTex.Height;  			Vector2 TexturePosition = new Vector2 (X * (BodyTileSize.X + 16)' Y * (BodyTileSize.Y));  			Vector2 ButtonPosition = new Vector2 (TexturePosition.X - 3' TexturePosition.Y - 5);  			SBatch.Draw (m_SkinBtns [Y + m_Counter].BtnTex' new Rectangle ((int)(Position.X + ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)' new Rectangle ((int)m_SkinBtns [m_Counter + Y].SourcePosition.X' (int)m_SkinBtns [m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);  			SBatch.Draw (m_Thumb' new Rectangle ((int)(Position.X + TexturePosition.X)' (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)' null' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth);  			if (m_Counter < m_NumberOfSkinsToDisplay)  				m_Counter++;  		}  	}  	break;  case Elements.SkinType.Medium:  	for (int X = 0; X <= m_Map.GetUpperBound (1); X++) {  		for (int Y = 0; Y <= m_Map.GetUpperBound (0); Y++) {  			m_Thumb = FileManager.GetTexture (m_Sex == AvatarSex.Male ? m_MediumAppearances [(Y * X) + m_Counter].MediumAppearance.ThumbnailID.UniqueID : m_MediumFemaleAppearances [(Y * X) + m_Counter].MediumAppearance.ThumbnailID.UniqueID);  			m_BtnWidth = m_SkinBtns [m_Counter + Y].BtnTex.Width / 4;  			m_BtnHeight = m_SkinBtns [m_Counter + Y].BtnTex.Height;  			Vector2 TexturePosition = new Vector2 (X * (BodyTileSize.X + 16)' Y * (BodyTileSize.Y));  			Vector2 ButtonPosition = new Vector2 (TexturePosition.X - 3' TexturePosition.Y - 5);  			SBatch.Draw (m_SkinBtns [Y + m_Counter].BtnTex' new Rectangle ((int)(Position.X + ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)' new Rectangle ((int)m_SkinBtns [m_Counter + Y].SourcePosition.X' (int)m_SkinBtns [m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);  			SBatch.Draw (m_Thumb' new Rectangle ((int)(Position.X + TexturePosition.X)' (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)' null' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth);  			if (m_Counter < m_NumberOfSkinsToDisplay)  				m_Counter++;  		}  	}  	break;  case Elements.SkinType.Dark:  	for (int X = 0; X <= m_Map.GetUpperBound (1); X++) {  		for (int Y = 0; Y <= m_Map.GetUpperBound (0); Y++) {  			m_Thumb = FileManager.GetTexture (m_Sex == AvatarSex.Male ? m_DarkAppearances [(Y * X) + m_Counter].DarkAppearance.ThumbnailID.UniqueID : m_DarkFemaleAppearances [(Y * X) + m_Counter].DarkAppearance.ThumbnailID.UniqueID);  			m_BtnWidth = m_SkinBtns [m_Counter + Y].BtnTex.Width / 4;  			m_BtnHeight = m_SkinBtns [m_Counter + Y].BtnTex.Height;  			Vector2 TexturePosition = new Vector2 (X * (BodyTileSize.X + 16)' Y * (BodyTileSize.Y));  			Vector2 ButtonPosition = new Vector2 (TexturePosition.X - 3' TexturePosition.Y - 5);  			SBatch.Draw (m_SkinBtns [Y + m_Counter].BtnTex' new Rectangle ((int)(Position.X + ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)' new Rectangle ((int)m_SkinBtns [m_Counter + Y].SourcePosition.X' (int)m_SkinBtns [m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);  			SBatch.Draw (m_Thumb' new Rectangle ((int)(Position.X + TexturePosition.X)' (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)' null' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth);  			if (m_Counter < m_NumberOfSkinsToDisplay)  				m_Counter++;  		}  	}  	break;  }  
Magic Number,Gonzo.Elements,UIBodyBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIBodyBrowser.cs,Draw,The following statement contains a magic number: switch (m_SelectedSkintype) {  case Elements.SkinType.Light:  	for (int X = 0; X <= m_Map.GetUpperBound (1); X++) {  		for (int Y = 0; Y <= m_Map.GetUpperBound (0); Y++) {  			m_Thumb = FileManager.GetTexture (m_Sex == AvatarSex.Male ? m_LightAppearances [(Y * X) + m_Counter].LightAppearance.ThumbnailID.UniqueID : m_LightFemaleAppearances [(Y * X) + m_Counter].LightAppearance.ThumbnailID.UniqueID);  			m_BtnWidth = m_SkinBtns [m_Counter + Y].BtnTex.Width / 4;  			m_BtnHeight = m_SkinBtns [m_Counter + Y].BtnTex.Height;  			Vector2 TexturePosition = new Vector2 (X * (BodyTileSize.X + 16)' Y * (BodyTileSize.Y));  			Vector2 ButtonPosition = new Vector2 (TexturePosition.X - 3' TexturePosition.Y - 5);  			SBatch.Draw (m_SkinBtns [Y + m_Counter].BtnTex' new Rectangle ((int)(Position.X + ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)' new Rectangle ((int)m_SkinBtns [m_Counter + Y].SourcePosition.X' (int)m_SkinBtns [m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);  			SBatch.Draw (m_Thumb' new Rectangle ((int)(Position.X + TexturePosition.X)' (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)' null' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth);  			if (m_Counter < m_NumberOfSkinsToDisplay)  				m_Counter++;  		}  	}  	break;  case Elements.SkinType.Medium:  	for (int X = 0; X <= m_Map.GetUpperBound (1); X++) {  		for (int Y = 0; Y <= m_Map.GetUpperBound (0); Y++) {  			m_Thumb = FileManager.GetTexture (m_Sex == AvatarSex.Male ? m_MediumAppearances [(Y * X) + m_Counter].MediumAppearance.ThumbnailID.UniqueID : m_MediumFemaleAppearances [(Y * X) + m_Counter].MediumAppearance.ThumbnailID.UniqueID);  			m_BtnWidth = m_SkinBtns [m_Counter + Y].BtnTex.Width / 4;  			m_BtnHeight = m_SkinBtns [m_Counter + Y].BtnTex.Height;  			Vector2 TexturePosition = new Vector2 (X * (BodyTileSize.X + 16)' Y * (BodyTileSize.Y));  			Vector2 ButtonPosition = new Vector2 (TexturePosition.X - 3' TexturePosition.Y - 5);  			SBatch.Draw (m_SkinBtns [Y + m_Counter].BtnTex' new Rectangle ((int)(Position.X + ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)' new Rectangle ((int)m_SkinBtns [m_Counter + Y].SourcePosition.X' (int)m_SkinBtns [m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);  			SBatch.Draw (m_Thumb' new Rectangle ((int)(Position.X + TexturePosition.X)' (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)' null' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth);  			if (m_Counter < m_NumberOfSkinsToDisplay)  				m_Counter++;  		}  	}  	break;  case Elements.SkinType.Dark:  	for (int X = 0; X <= m_Map.GetUpperBound (1); X++) {  		for (int Y = 0; Y <= m_Map.GetUpperBound (0); Y++) {  			m_Thumb = FileManager.GetTexture (m_Sex == AvatarSex.Male ? m_DarkAppearances [(Y * X) + m_Counter].DarkAppearance.ThumbnailID.UniqueID : m_DarkFemaleAppearances [(Y * X) + m_Counter].DarkAppearance.ThumbnailID.UniqueID);  			m_BtnWidth = m_SkinBtns [m_Counter + Y].BtnTex.Width / 4;  			m_BtnHeight = m_SkinBtns [m_Counter + Y].BtnTex.Height;  			Vector2 TexturePosition = new Vector2 (X * (BodyTileSize.X + 16)' Y * (BodyTileSize.Y));  			Vector2 ButtonPosition = new Vector2 (TexturePosition.X - 3' TexturePosition.Y - 5);  			SBatch.Draw (m_SkinBtns [Y + m_Counter].BtnTex' new Rectangle ((int)(Position.X + ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)' new Rectangle ((int)m_SkinBtns [m_Counter + Y].SourcePosition.X' (int)m_SkinBtns [m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);  			SBatch.Draw (m_Thumb' new Rectangle ((int)(Position.X + TexturePosition.X)' (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)' null' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth);  			if (m_Counter < m_NumberOfSkinsToDisplay)  				m_Counter++;  		}  	}  	break;  }  
Magic Number,Gonzo.Elements,UIBodyBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIBodyBrowser.cs,Draw,The following statement contains a magic number: switch (m_SelectedSkintype) {  case Elements.SkinType.Light:  	for (int X = 0; X <= m_Map.GetUpperBound (1); X++) {  		for (int Y = 0; Y <= m_Map.GetUpperBound (0); Y++) {  			m_Thumb = FileManager.GetTexture (m_Sex == AvatarSex.Male ? m_LightAppearances [(Y * X) + m_Counter].LightAppearance.ThumbnailID.UniqueID : m_LightFemaleAppearances [(Y * X) + m_Counter].LightAppearance.ThumbnailID.UniqueID);  			m_BtnWidth = m_SkinBtns [m_Counter + Y].BtnTex.Width / 4;  			m_BtnHeight = m_SkinBtns [m_Counter + Y].BtnTex.Height;  			Vector2 TexturePosition = new Vector2 (X * (BodyTileSize.X + 16)' Y * (BodyTileSize.Y));  			Vector2 ButtonPosition = new Vector2 (TexturePosition.X - 3' TexturePosition.Y - 5);  			SBatch.Draw (m_SkinBtns [Y + m_Counter].BtnTex' new Rectangle ((int)(Position.X + ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)' new Rectangle ((int)m_SkinBtns [m_Counter + Y].SourcePosition.X' (int)m_SkinBtns [m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);  			SBatch.Draw (m_Thumb' new Rectangle ((int)(Position.X + TexturePosition.X)' (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)' null' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth);  			if (m_Counter < m_NumberOfSkinsToDisplay)  				m_Counter++;  		}  	}  	break;  case Elements.SkinType.Medium:  	for (int X = 0; X <= m_Map.GetUpperBound (1); X++) {  		for (int Y = 0; Y <= m_Map.GetUpperBound (0); Y++) {  			m_Thumb = FileManager.GetTexture (m_Sex == AvatarSex.Male ? m_MediumAppearances [(Y * X) + m_Counter].MediumAppearance.ThumbnailID.UniqueID : m_MediumFemaleAppearances [(Y * X) + m_Counter].MediumAppearance.ThumbnailID.UniqueID);  			m_BtnWidth = m_SkinBtns [m_Counter + Y].BtnTex.Width / 4;  			m_BtnHeight = m_SkinBtns [m_Counter + Y].BtnTex.Height;  			Vector2 TexturePosition = new Vector2 (X * (BodyTileSize.X + 16)' Y * (BodyTileSize.Y));  			Vector2 ButtonPosition = new Vector2 (TexturePosition.X - 3' TexturePosition.Y - 5);  			SBatch.Draw (m_SkinBtns [Y + m_Counter].BtnTex' new Rectangle ((int)(Position.X + ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)' new Rectangle ((int)m_SkinBtns [m_Counter + Y].SourcePosition.X' (int)m_SkinBtns [m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);  			SBatch.Draw (m_Thumb' new Rectangle ((int)(Position.X + TexturePosition.X)' (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)' null' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth);  			if (m_Counter < m_NumberOfSkinsToDisplay)  				m_Counter++;  		}  	}  	break;  case Elements.SkinType.Dark:  	for (int X = 0; X <= m_Map.GetUpperBound (1); X++) {  		for (int Y = 0; Y <= m_Map.GetUpperBound (0); Y++) {  			m_Thumb = FileManager.GetTexture (m_Sex == AvatarSex.Male ? m_DarkAppearances [(Y * X) + m_Counter].DarkAppearance.ThumbnailID.UniqueID : m_DarkFemaleAppearances [(Y * X) + m_Counter].DarkAppearance.ThumbnailID.UniqueID);  			m_BtnWidth = m_SkinBtns [m_Counter + Y].BtnTex.Width / 4;  			m_BtnHeight = m_SkinBtns [m_Counter + Y].BtnTex.Height;  			Vector2 TexturePosition = new Vector2 (X * (BodyTileSize.X + 16)' Y * (BodyTileSize.Y));  			Vector2 ButtonPosition = new Vector2 (TexturePosition.X - 3' TexturePosition.Y - 5);  			SBatch.Draw (m_SkinBtns [Y + m_Counter].BtnTex' new Rectangle ((int)(Position.X + ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)' new Rectangle ((int)m_SkinBtns [m_Counter + Y].SourcePosition.X' (int)m_SkinBtns [m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);  			SBatch.Draw (m_Thumb' new Rectangle ((int)(Position.X + TexturePosition.X)' (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)' null' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth);  			if (m_Counter < m_NumberOfSkinsToDisplay)  				m_Counter++;  		}  	}  	break;  }  
Magic Number,Gonzo.Elements,UIBodyBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIBodyBrowser.cs,Draw,The following statement contains a magic number: for (int X = 0; X <= m_Map.GetUpperBound (1); X++) {  	for (int Y = 0; Y <= m_Map.GetUpperBound (0); Y++) {  		m_Thumb = FileManager.GetTexture (m_Sex == AvatarSex.Male ? m_LightAppearances [(Y * X) + m_Counter].LightAppearance.ThumbnailID.UniqueID : m_LightFemaleAppearances [(Y * X) + m_Counter].LightAppearance.ThumbnailID.UniqueID);  		m_BtnWidth = m_SkinBtns [m_Counter + Y].BtnTex.Width / 4;  		m_BtnHeight = m_SkinBtns [m_Counter + Y].BtnTex.Height;  		Vector2 TexturePosition = new Vector2 (X * (BodyTileSize.X + 16)' Y * (BodyTileSize.Y));  		Vector2 ButtonPosition = new Vector2 (TexturePosition.X - 3' TexturePosition.Y - 5);  		SBatch.Draw (m_SkinBtns [Y + m_Counter].BtnTex' new Rectangle ((int)(Position.X + ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)' new Rectangle ((int)m_SkinBtns [m_Counter + Y].SourcePosition.X' (int)m_SkinBtns [m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);  		SBatch.Draw (m_Thumb' new Rectangle ((int)(Position.X + TexturePosition.X)' (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)' null' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth);  		if (m_Counter < m_NumberOfSkinsToDisplay)  			m_Counter++;  	}  }  
Magic Number,Gonzo.Elements,UIBodyBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIBodyBrowser.cs,Draw,The following statement contains a magic number: for (int X = 0; X <= m_Map.GetUpperBound (1); X++) {  	for (int Y = 0; Y <= m_Map.GetUpperBound (0); Y++) {  		m_Thumb = FileManager.GetTexture (m_Sex == AvatarSex.Male ? m_LightAppearances [(Y * X) + m_Counter].LightAppearance.ThumbnailID.UniqueID : m_LightFemaleAppearances [(Y * X) + m_Counter].LightAppearance.ThumbnailID.UniqueID);  		m_BtnWidth = m_SkinBtns [m_Counter + Y].BtnTex.Width / 4;  		m_BtnHeight = m_SkinBtns [m_Counter + Y].BtnTex.Height;  		Vector2 TexturePosition = new Vector2 (X * (BodyTileSize.X + 16)' Y * (BodyTileSize.Y));  		Vector2 ButtonPosition = new Vector2 (TexturePosition.X - 3' TexturePosition.Y - 5);  		SBatch.Draw (m_SkinBtns [Y + m_Counter].BtnTex' new Rectangle ((int)(Position.X + ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)' new Rectangle ((int)m_SkinBtns [m_Counter + Y].SourcePosition.X' (int)m_SkinBtns [m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);  		SBatch.Draw (m_Thumb' new Rectangle ((int)(Position.X + TexturePosition.X)' (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)' null' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth);  		if (m_Counter < m_NumberOfSkinsToDisplay)  			m_Counter++;  	}  }  
Magic Number,Gonzo.Elements,UIBodyBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIBodyBrowser.cs,Draw,The following statement contains a magic number: for (int X = 0; X <= m_Map.GetUpperBound (1); X++) {  	for (int Y = 0; Y <= m_Map.GetUpperBound (0); Y++) {  		m_Thumb = FileManager.GetTexture (m_Sex == AvatarSex.Male ? m_LightAppearances [(Y * X) + m_Counter].LightAppearance.ThumbnailID.UniqueID : m_LightFemaleAppearances [(Y * X) + m_Counter].LightAppearance.ThumbnailID.UniqueID);  		m_BtnWidth = m_SkinBtns [m_Counter + Y].BtnTex.Width / 4;  		m_BtnHeight = m_SkinBtns [m_Counter + Y].BtnTex.Height;  		Vector2 TexturePosition = new Vector2 (X * (BodyTileSize.X + 16)' Y * (BodyTileSize.Y));  		Vector2 ButtonPosition = new Vector2 (TexturePosition.X - 3' TexturePosition.Y - 5);  		SBatch.Draw (m_SkinBtns [Y + m_Counter].BtnTex' new Rectangle ((int)(Position.X + ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)' new Rectangle ((int)m_SkinBtns [m_Counter + Y].SourcePosition.X' (int)m_SkinBtns [m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);  		SBatch.Draw (m_Thumb' new Rectangle ((int)(Position.X + TexturePosition.X)' (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)' null' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth);  		if (m_Counter < m_NumberOfSkinsToDisplay)  			m_Counter++;  	}  }  
Magic Number,Gonzo.Elements,UIBodyBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIBodyBrowser.cs,Draw,The following statement contains a magic number: for (int X = 0; X <= m_Map.GetUpperBound (1); X++) {  	for (int Y = 0; Y <= m_Map.GetUpperBound (0); Y++) {  		m_Thumb = FileManager.GetTexture (m_Sex == AvatarSex.Male ? m_LightAppearances [(Y * X) + m_Counter].LightAppearance.ThumbnailID.UniqueID : m_LightFemaleAppearances [(Y * X) + m_Counter].LightAppearance.ThumbnailID.UniqueID);  		m_BtnWidth = m_SkinBtns [m_Counter + Y].BtnTex.Width / 4;  		m_BtnHeight = m_SkinBtns [m_Counter + Y].BtnTex.Height;  		Vector2 TexturePosition = new Vector2 (X * (BodyTileSize.X + 16)' Y * (BodyTileSize.Y));  		Vector2 ButtonPosition = new Vector2 (TexturePosition.X - 3' TexturePosition.Y - 5);  		SBatch.Draw (m_SkinBtns [Y + m_Counter].BtnTex' new Rectangle ((int)(Position.X + ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)' new Rectangle ((int)m_SkinBtns [m_Counter + Y].SourcePosition.X' (int)m_SkinBtns [m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);  		SBatch.Draw (m_Thumb' new Rectangle ((int)(Position.X + TexturePosition.X)' (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)' null' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth);  		if (m_Counter < m_NumberOfSkinsToDisplay)  			m_Counter++;  	}  }  
Magic Number,Gonzo.Elements,UIBodyBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIBodyBrowser.cs,Draw,The following statement contains a magic number: for (int Y = 0; Y <= m_Map.GetUpperBound (0); Y++) {  	m_Thumb = FileManager.GetTexture (m_Sex == AvatarSex.Male ? m_LightAppearances [(Y * X) + m_Counter].LightAppearance.ThumbnailID.UniqueID : m_LightFemaleAppearances [(Y * X) + m_Counter].LightAppearance.ThumbnailID.UniqueID);  	m_BtnWidth = m_SkinBtns [m_Counter + Y].BtnTex.Width / 4;  	m_BtnHeight = m_SkinBtns [m_Counter + Y].BtnTex.Height;  	Vector2 TexturePosition = new Vector2 (X * (BodyTileSize.X + 16)' Y * (BodyTileSize.Y));  	Vector2 ButtonPosition = new Vector2 (TexturePosition.X - 3' TexturePosition.Y - 5);  	SBatch.Draw (m_SkinBtns [Y + m_Counter].BtnTex' new Rectangle ((int)(Position.X + ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)' new Rectangle ((int)m_SkinBtns [m_Counter + Y].SourcePosition.X' (int)m_SkinBtns [m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);  	SBatch.Draw (m_Thumb' new Rectangle ((int)(Position.X + TexturePosition.X)' (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)' null' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth);  	if (m_Counter < m_NumberOfSkinsToDisplay)  		m_Counter++;  }  
Magic Number,Gonzo.Elements,UIBodyBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIBodyBrowser.cs,Draw,The following statement contains a magic number: for (int Y = 0; Y <= m_Map.GetUpperBound (0); Y++) {  	m_Thumb = FileManager.GetTexture (m_Sex == AvatarSex.Male ? m_LightAppearances [(Y * X) + m_Counter].LightAppearance.ThumbnailID.UniqueID : m_LightFemaleAppearances [(Y * X) + m_Counter].LightAppearance.ThumbnailID.UniqueID);  	m_BtnWidth = m_SkinBtns [m_Counter + Y].BtnTex.Width / 4;  	m_BtnHeight = m_SkinBtns [m_Counter + Y].BtnTex.Height;  	Vector2 TexturePosition = new Vector2 (X * (BodyTileSize.X + 16)' Y * (BodyTileSize.Y));  	Vector2 ButtonPosition = new Vector2 (TexturePosition.X - 3' TexturePosition.Y - 5);  	SBatch.Draw (m_SkinBtns [Y + m_Counter].BtnTex' new Rectangle ((int)(Position.X + ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)' new Rectangle ((int)m_SkinBtns [m_Counter + Y].SourcePosition.X' (int)m_SkinBtns [m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);  	SBatch.Draw (m_Thumb' new Rectangle ((int)(Position.X + TexturePosition.X)' (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)' null' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth);  	if (m_Counter < m_NumberOfSkinsToDisplay)  		m_Counter++;  }  
Magic Number,Gonzo.Elements,UIBodyBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIBodyBrowser.cs,Draw,The following statement contains a magic number: for (int Y = 0; Y <= m_Map.GetUpperBound (0); Y++) {  	m_Thumb = FileManager.GetTexture (m_Sex == AvatarSex.Male ? m_LightAppearances [(Y * X) + m_Counter].LightAppearance.ThumbnailID.UniqueID : m_LightFemaleAppearances [(Y * X) + m_Counter].LightAppearance.ThumbnailID.UniqueID);  	m_BtnWidth = m_SkinBtns [m_Counter + Y].BtnTex.Width / 4;  	m_BtnHeight = m_SkinBtns [m_Counter + Y].BtnTex.Height;  	Vector2 TexturePosition = new Vector2 (X * (BodyTileSize.X + 16)' Y * (BodyTileSize.Y));  	Vector2 ButtonPosition = new Vector2 (TexturePosition.X - 3' TexturePosition.Y - 5);  	SBatch.Draw (m_SkinBtns [Y + m_Counter].BtnTex' new Rectangle ((int)(Position.X + ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)' new Rectangle ((int)m_SkinBtns [m_Counter + Y].SourcePosition.X' (int)m_SkinBtns [m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);  	SBatch.Draw (m_Thumb' new Rectangle ((int)(Position.X + TexturePosition.X)' (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)' null' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth);  	if (m_Counter < m_NumberOfSkinsToDisplay)  		m_Counter++;  }  
Magic Number,Gonzo.Elements,UIBodyBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIBodyBrowser.cs,Draw,The following statement contains a magic number: for (int Y = 0; Y <= m_Map.GetUpperBound (0); Y++) {  	m_Thumb = FileManager.GetTexture (m_Sex == AvatarSex.Male ? m_LightAppearances [(Y * X) + m_Counter].LightAppearance.ThumbnailID.UniqueID : m_LightFemaleAppearances [(Y * X) + m_Counter].LightAppearance.ThumbnailID.UniqueID);  	m_BtnWidth = m_SkinBtns [m_Counter + Y].BtnTex.Width / 4;  	m_BtnHeight = m_SkinBtns [m_Counter + Y].BtnTex.Height;  	Vector2 TexturePosition = new Vector2 (X * (BodyTileSize.X + 16)' Y * (BodyTileSize.Y));  	Vector2 ButtonPosition = new Vector2 (TexturePosition.X - 3' TexturePosition.Y - 5);  	SBatch.Draw (m_SkinBtns [Y + m_Counter].BtnTex' new Rectangle ((int)(Position.X + ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)' new Rectangle ((int)m_SkinBtns [m_Counter + Y].SourcePosition.X' (int)m_SkinBtns [m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);  	SBatch.Draw (m_Thumb' new Rectangle ((int)(Position.X + TexturePosition.X)' (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)' null' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth);  	if (m_Counter < m_NumberOfSkinsToDisplay)  		m_Counter++;  }  
Magic Number,Gonzo.Elements,UIBodyBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIBodyBrowser.cs,Draw,The following statement contains a magic number: m_BtnWidth = m_SkinBtns [m_Counter + Y].BtnTex.Width / 4;  
Magic Number,Gonzo.Elements,UIBodyBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIBodyBrowser.cs,Draw,The following statement contains a magic number: for (int X = 0; X <= m_Map.GetUpperBound (1); X++) {  	for (int Y = 0; Y <= m_Map.GetUpperBound (0); Y++) {  		m_Thumb = FileManager.GetTexture (m_Sex == AvatarSex.Male ? m_MediumAppearances [(Y * X) + m_Counter].MediumAppearance.ThumbnailID.UniqueID : m_MediumFemaleAppearances [(Y * X) + m_Counter].MediumAppearance.ThumbnailID.UniqueID);  		m_BtnWidth = m_SkinBtns [m_Counter + Y].BtnTex.Width / 4;  		m_BtnHeight = m_SkinBtns [m_Counter + Y].BtnTex.Height;  		Vector2 TexturePosition = new Vector2 (X * (BodyTileSize.X + 16)' Y * (BodyTileSize.Y));  		Vector2 ButtonPosition = new Vector2 (TexturePosition.X - 3' TexturePosition.Y - 5);  		SBatch.Draw (m_SkinBtns [Y + m_Counter].BtnTex' new Rectangle ((int)(Position.X + ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)' new Rectangle ((int)m_SkinBtns [m_Counter + Y].SourcePosition.X' (int)m_SkinBtns [m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);  		SBatch.Draw (m_Thumb' new Rectangle ((int)(Position.X + TexturePosition.X)' (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)' null' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth);  		if (m_Counter < m_NumberOfSkinsToDisplay)  			m_Counter++;  	}  }  
Magic Number,Gonzo.Elements,UIBodyBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIBodyBrowser.cs,Draw,The following statement contains a magic number: for (int X = 0; X <= m_Map.GetUpperBound (1); X++) {  	for (int Y = 0; Y <= m_Map.GetUpperBound (0); Y++) {  		m_Thumb = FileManager.GetTexture (m_Sex == AvatarSex.Male ? m_MediumAppearances [(Y * X) + m_Counter].MediumAppearance.ThumbnailID.UniqueID : m_MediumFemaleAppearances [(Y * X) + m_Counter].MediumAppearance.ThumbnailID.UniqueID);  		m_BtnWidth = m_SkinBtns [m_Counter + Y].BtnTex.Width / 4;  		m_BtnHeight = m_SkinBtns [m_Counter + Y].BtnTex.Height;  		Vector2 TexturePosition = new Vector2 (X * (BodyTileSize.X + 16)' Y * (BodyTileSize.Y));  		Vector2 ButtonPosition = new Vector2 (TexturePosition.X - 3' TexturePosition.Y - 5);  		SBatch.Draw (m_SkinBtns [Y + m_Counter].BtnTex' new Rectangle ((int)(Position.X + ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)' new Rectangle ((int)m_SkinBtns [m_Counter + Y].SourcePosition.X' (int)m_SkinBtns [m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);  		SBatch.Draw (m_Thumb' new Rectangle ((int)(Position.X + TexturePosition.X)' (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)' null' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth);  		if (m_Counter < m_NumberOfSkinsToDisplay)  			m_Counter++;  	}  }  
Magic Number,Gonzo.Elements,UIBodyBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIBodyBrowser.cs,Draw,The following statement contains a magic number: for (int X = 0; X <= m_Map.GetUpperBound (1); X++) {  	for (int Y = 0; Y <= m_Map.GetUpperBound (0); Y++) {  		m_Thumb = FileManager.GetTexture (m_Sex == AvatarSex.Male ? m_MediumAppearances [(Y * X) + m_Counter].MediumAppearance.ThumbnailID.UniqueID : m_MediumFemaleAppearances [(Y * X) + m_Counter].MediumAppearance.ThumbnailID.UniqueID);  		m_BtnWidth = m_SkinBtns [m_Counter + Y].BtnTex.Width / 4;  		m_BtnHeight = m_SkinBtns [m_Counter + Y].BtnTex.Height;  		Vector2 TexturePosition = new Vector2 (X * (BodyTileSize.X + 16)' Y * (BodyTileSize.Y));  		Vector2 ButtonPosition = new Vector2 (TexturePosition.X - 3' TexturePosition.Y - 5);  		SBatch.Draw (m_SkinBtns [Y + m_Counter].BtnTex' new Rectangle ((int)(Position.X + ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)' new Rectangle ((int)m_SkinBtns [m_Counter + Y].SourcePosition.X' (int)m_SkinBtns [m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);  		SBatch.Draw (m_Thumb' new Rectangle ((int)(Position.X + TexturePosition.X)' (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)' null' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth);  		if (m_Counter < m_NumberOfSkinsToDisplay)  			m_Counter++;  	}  }  
Magic Number,Gonzo.Elements,UIBodyBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIBodyBrowser.cs,Draw,The following statement contains a magic number: for (int X = 0; X <= m_Map.GetUpperBound (1); X++) {  	for (int Y = 0; Y <= m_Map.GetUpperBound (0); Y++) {  		m_Thumb = FileManager.GetTexture (m_Sex == AvatarSex.Male ? m_MediumAppearances [(Y * X) + m_Counter].MediumAppearance.ThumbnailID.UniqueID : m_MediumFemaleAppearances [(Y * X) + m_Counter].MediumAppearance.ThumbnailID.UniqueID);  		m_BtnWidth = m_SkinBtns [m_Counter + Y].BtnTex.Width / 4;  		m_BtnHeight = m_SkinBtns [m_Counter + Y].BtnTex.Height;  		Vector2 TexturePosition = new Vector2 (X * (BodyTileSize.X + 16)' Y * (BodyTileSize.Y));  		Vector2 ButtonPosition = new Vector2 (TexturePosition.X - 3' TexturePosition.Y - 5);  		SBatch.Draw (m_SkinBtns [Y + m_Counter].BtnTex' new Rectangle ((int)(Position.X + ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)' new Rectangle ((int)m_SkinBtns [m_Counter + Y].SourcePosition.X' (int)m_SkinBtns [m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);  		SBatch.Draw (m_Thumb' new Rectangle ((int)(Position.X + TexturePosition.X)' (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)' null' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth);  		if (m_Counter < m_NumberOfSkinsToDisplay)  			m_Counter++;  	}  }  
Magic Number,Gonzo.Elements,UIBodyBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIBodyBrowser.cs,Draw,The following statement contains a magic number: for (int Y = 0; Y <= m_Map.GetUpperBound (0); Y++) {  	m_Thumb = FileManager.GetTexture (m_Sex == AvatarSex.Male ? m_MediumAppearances [(Y * X) + m_Counter].MediumAppearance.ThumbnailID.UniqueID : m_MediumFemaleAppearances [(Y * X) + m_Counter].MediumAppearance.ThumbnailID.UniqueID);  	m_BtnWidth = m_SkinBtns [m_Counter + Y].BtnTex.Width / 4;  	m_BtnHeight = m_SkinBtns [m_Counter + Y].BtnTex.Height;  	Vector2 TexturePosition = new Vector2 (X * (BodyTileSize.X + 16)' Y * (BodyTileSize.Y));  	Vector2 ButtonPosition = new Vector2 (TexturePosition.X - 3' TexturePosition.Y - 5);  	SBatch.Draw (m_SkinBtns [Y + m_Counter].BtnTex' new Rectangle ((int)(Position.X + ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)' new Rectangle ((int)m_SkinBtns [m_Counter + Y].SourcePosition.X' (int)m_SkinBtns [m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);  	SBatch.Draw (m_Thumb' new Rectangle ((int)(Position.X + TexturePosition.X)' (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)' null' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth);  	if (m_Counter < m_NumberOfSkinsToDisplay)  		m_Counter++;  }  
Magic Number,Gonzo.Elements,UIBodyBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIBodyBrowser.cs,Draw,The following statement contains a magic number: for (int Y = 0; Y <= m_Map.GetUpperBound (0); Y++) {  	m_Thumb = FileManager.GetTexture (m_Sex == AvatarSex.Male ? m_MediumAppearances [(Y * X) + m_Counter].MediumAppearance.ThumbnailID.UniqueID : m_MediumFemaleAppearances [(Y * X) + m_Counter].MediumAppearance.ThumbnailID.UniqueID);  	m_BtnWidth = m_SkinBtns [m_Counter + Y].BtnTex.Width / 4;  	m_BtnHeight = m_SkinBtns [m_Counter + Y].BtnTex.Height;  	Vector2 TexturePosition = new Vector2 (X * (BodyTileSize.X + 16)' Y * (BodyTileSize.Y));  	Vector2 ButtonPosition = new Vector2 (TexturePosition.X - 3' TexturePosition.Y - 5);  	SBatch.Draw (m_SkinBtns [Y + m_Counter].BtnTex' new Rectangle ((int)(Position.X + ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)' new Rectangle ((int)m_SkinBtns [m_Counter + Y].SourcePosition.X' (int)m_SkinBtns [m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);  	SBatch.Draw (m_Thumb' new Rectangle ((int)(Position.X + TexturePosition.X)' (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)' null' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth);  	if (m_Counter < m_NumberOfSkinsToDisplay)  		m_Counter++;  }  
Magic Number,Gonzo.Elements,UIBodyBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIBodyBrowser.cs,Draw,The following statement contains a magic number: for (int Y = 0; Y <= m_Map.GetUpperBound (0); Y++) {  	m_Thumb = FileManager.GetTexture (m_Sex == AvatarSex.Male ? m_MediumAppearances [(Y * X) + m_Counter].MediumAppearance.ThumbnailID.UniqueID : m_MediumFemaleAppearances [(Y * X) + m_Counter].MediumAppearance.ThumbnailID.UniqueID);  	m_BtnWidth = m_SkinBtns [m_Counter + Y].BtnTex.Width / 4;  	m_BtnHeight = m_SkinBtns [m_Counter + Y].BtnTex.Height;  	Vector2 TexturePosition = new Vector2 (X * (BodyTileSize.X + 16)' Y * (BodyTileSize.Y));  	Vector2 ButtonPosition = new Vector2 (TexturePosition.X - 3' TexturePosition.Y - 5);  	SBatch.Draw (m_SkinBtns [Y + m_Counter].BtnTex' new Rectangle ((int)(Position.X + ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)' new Rectangle ((int)m_SkinBtns [m_Counter + Y].SourcePosition.X' (int)m_SkinBtns [m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);  	SBatch.Draw (m_Thumb' new Rectangle ((int)(Position.X + TexturePosition.X)' (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)' null' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth);  	if (m_Counter < m_NumberOfSkinsToDisplay)  		m_Counter++;  }  
Magic Number,Gonzo.Elements,UIBodyBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIBodyBrowser.cs,Draw,The following statement contains a magic number: for (int Y = 0; Y <= m_Map.GetUpperBound (0); Y++) {  	m_Thumb = FileManager.GetTexture (m_Sex == AvatarSex.Male ? m_MediumAppearances [(Y * X) + m_Counter].MediumAppearance.ThumbnailID.UniqueID : m_MediumFemaleAppearances [(Y * X) + m_Counter].MediumAppearance.ThumbnailID.UniqueID);  	m_BtnWidth = m_SkinBtns [m_Counter + Y].BtnTex.Width / 4;  	m_BtnHeight = m_SkinBtns [m_Counter + Y].BtnTex.Height;  	Vector2 TexturePosition = new Vector2 (X * (BodyTileSize.X + 16)' Y * (BodyTileSize.Y));  	Vector2 ButtonPosition = new Vector2 (TexturePosition.X - 3' TexturePosition.Y - 5);  	SBatch.Draw (m_SkinBtns [Y + m_Counter].BtnTex' new Rectangle ((int)(Position.X + ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)' new Rectangle ((int)m_SkinBtns [m_Counter + Y].SourcePosition.X' (int)m_SkinBtns [m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);  	SBatch.Draw (m_Thumb' new Rectangle ((int)(Position.X + TexturePosition.X)' (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)' null' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth);  	if (m_Counter < m_NumberOfSkinsToDisplay)  		m_Counter++;  }  
Magic Number,Gonzo.Elements,UIBodyBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIBodyBrowser.cs,Draw,The following statement contains a magic number: m_BtnWidth = m_SkinBtns [m_Counter + Y].BtnTex.Width / 4;  
Magic Number,Gonzo.Elements,UIBodyBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIBodyBrowser.cs,Draw,The following statement contains a magic number: for (int X = 0; X <= m_Map.GetUpperBound (1); X++) {  	for (int Y = 0; Y <= m_Map.GetUpperBound (0); Y++) {  		m_Thumb = FileManager.GetTexture (m_Sex == AvatarSex.Male ? m_DarkAppearances [(Y * X) + m_Counter].DarkAppearance.ThumbnailID.UniqueID : m_DarkFemaleAppearances [(Y * X) + m_Counter].DarkAppearance.ThumbnailID.UniqueID);  		m_BtnWidth = m_SkinBtns [m_Counter + Y].BtnTex.Width / 4;  		m_BtnHeight = m_SkinBtns [m_Counter + Y].BtnTex.Height;  		Vector2 TexturePosition = new Vector2 (X * (BodyTileSize.X + 16)' Y * (BodyTileSize.Y));  		Vector2 ButtonPosition = new Vector2 (TexturePosition.X - 3' TexturePosition.Y - 5);  		SBatch.Draw (m_SkinBtns [Y + m_Counter].BtnTex' new Rectangle ((int)(Position.X + ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)' new Rectangle ((int)m_SkinBtns [m_Counter + Y].SourcePosition.X' (int)m_SkinBtns [m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);  		SBatch.Draw (m_Thumb' new Rectangle ((int)(Position.X + TexturePosition.X)' (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)' null' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth);  		if (m_Counter < m_NumberOfSkinsToDisplay)  			m_Counter++;  	}  }  
Magic Number,Gonzo.Elements,UIBodyBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIBodyBrowser.cs,Draw,The following statement contains a magic number: for (int X = 0; X <= m_Map.GetUpperBound (1); X++) {  	for (int Y = 0; Y <= m_Map.GetUpperBound (0); Y++) {  		m_Thumb = FileManager.GetTexture (m_Sex == AvatarSex.Male ? m_DarkAppearances [(Y * X) + m_Counter].DarkAppearance.ThumbnailID.UniqueID : m_DarkFemaleAppearances [(Y * X) + m_Counter].DarkAppearance.ThumbnailID.UniqueID);  		m_BtnWidth = m_SkinBtns [m_Counter + Y].BtnTex.Width / 4;  		m_BtnHeight = m_SkinBtns [m_Counter + Y].BtnTex.Height;  		Vector2 TexturePosition = new Vector2 (X * (BodyTileSize.X + 16)' Y * (BodyTileSize.Y));  		Vector2 ButtonPosition = new Vector2 (TexturePosition.X - 3' TexturePosition.Y - 5);  		SBatch.Draw (m_SkinBtns [Y + m_Counter].BtnTex' new Rectangle ((int)(Position.X + ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)' new Rectangle ((int)m_SkinBtns [m_Counter + Y].SourcePosition.X' (int)m_SkinBtns [m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);  		SBatch.Draw (m_Thumb' new Rectangle ((int)(Position.X + TexturePosition.X)' (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)' null' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth);  		if (m_Counter < m_NumberOfSkinsToDisplay)  			m_Counter++;  	}  }  
Magic Number,Gonzo.Elements,UIBodyBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIBodyBrowser.cs,Draw,The following statement contains a magic number: for (int X = 0; X <= m_Map.GetUpperBound (1); X++) {  	for (int Y = 0; Y <= m_Map.GetUpperBound (0); Y++) {  		m_Thumb = FileManager.GetTexture (m_Sex == AvatarSex.Male ? m_DarkAppearances [(Y * X) + m_Counter].DarkAppearance.ThumbnailID.UniqueID : m_DarkFemaleAppearances [(Y * X) + m_Counter].DarkAppearance.ThumbnailID.UniqueID);  		m_BtnWidth = m_SkinBtns [m_Counter + Y].BtnTex.Width / 4;  		m_BtnHeight = m_SkinBtns [m_Counter + Y].BtnTex.Height;  		Vector2 TexturePosition = new Vector2 (X * (BodyTileSize.X + 16)' Y * (BodyTileSize.Y));  		Vector2 ButtonPosition = new Vector2 (TexturePosition.X - 3' TexturePosition.Y - 5);  		SBatch.Draw (m_SkinBtns [Y + m_Counter].BtnTex' new Rectangle ((int)(Position.X + ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)' new Rectangle ((int)m_SkinBtns [m_Counter + Y].SourcePosition.X' (int)m_SkinBtns [m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);  		SBatch.Draw (m_Thumb' new Rectangle ((int)(Position.X + TexturePosition.X)' (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)' null' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth);  		if (m_Counter < m_NumberOfSkinsToDisplay)  			m_Counter++;  	}  }  
Magic Number,Gonzo.Elements,UIBodyBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIBodyBrowser.cs,Draw,The following statement contains a magic number: for (int X = 0; X <= m_Map.GetUpperBound (1); X++) {  	for (int Y = 0; Y <= m_Map.GetUpperBound (0); Y++) {  		m_Thumb = FileManager.GetTexture (m_Sex == AvatarSex.Male ? m_DarkAppearances [(Y * X) + m_Counter].DarkAppearance.ThumbnailID.UniqueID : m_DarkFemaleAppearances [(Y * X) + m_Counter].DarkAppearance.ThumbnailID.UniqueID);  		m_BtnWidth = m_SkinBtns [m_Counter + Y].BtnTex.Width / 4;  		m_BtnHeight = m_SkinBtns [m_Counter + Y].BtnTex.Height;  		Vector2 TexturePosition = new Vector2 (X * (BodyTileSize.X + 16)' Y * (BodyTileSize.Y));  		Vector2 ButtonPosition = new Vector2 (TexturePosition.X - 3' TexturePosition.Y - 5);  		SBatch.Draw (m_SkinBtns [Y + m_Counter].BtnTex' new Rectangle ((int)(Position.X + ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)' new Rectangle ((int)m_SkinBtns [m_Counter + Y].SourcePosition.X' (int)m_SkinBtns [m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);  		SBatch.Draw (m_Thumb' new Rectangle ((int)(Position.X + TexturePosition.X)' (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)' null' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth);  		if (m_Counter < m_NumberOfSkinsToDisplay)  			m_Counter++;  	}  }  
Magic Number,Gonzo.Elements,UIBodyBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIBodyBrowser.cs,Draw,The following statement contains a magic number: for (int Y = 0; Y <= m_Map.GetUpperBound (0); Y++) {  	m_Thumb = FileManager.GetTexture (m_Sex == AvatarSex.Male ? m_DarkAppearances [(Y * X) + m_Counter].DarkAppearance.ThumbnailID.UniqueID : m_DarkFemaleAppearances [(Y * X) + m_Counter].DarkAppearance.ThumbnailID.UniqueID);  	m_BtnWidth = m_SkinBtns [m_Counter + Y].BtnTex.Width / 4;  	m_BtnHeight = m_SkinBtns [m_Counter + Y].BtnTex.Height;  	Vector2 TexturePosition = new Vector2 (X * (BodyTileSize.X + 16)' Y * (BodyTileSize.Y));  	Vector2 ButtonPosition = new Vector2 (TexturePosition.X - 3' TexturePosition.Y - 5);  	SBatch.Draw (m_SkinBtns [Y + m_Counter].BtnTex' new Rectangle ((int)(Position.X + ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)' new Rectangle ((int)m_SkinBtns [m_Counter + Y].SourcePosition.X' (int)m_SkinBtns [m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);  	SBatch.Draw (m_Thumb' new Rectangle ((int)(Position.X + TexturePosition.X)' (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)' null' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth);  	if (m_Counter < m_NumberOfSkinsToDisplay)  		m_Counter++;  }  
Magic Number,Gonzo.Elements,UIBodyBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIBodyBrowser.cs,Draw,The following statement contains a magic number: for (int Y = 0; Y <= m_Map.GetUpperBound (0); Y++) {  	m_Thumb = FileManager.GetTexture (m_Sex == AvatarSex.Male ? m_DarkAppearances [(Y * X) + m_Counter].DarkAppearance.ThumbnailID.UniqueID : m_DarkFemaleAppearances [(Y * X) + m_Counter].DarkAppearance.ThumbnailID.UniqueID);  	m_BtnWidth = m_SkinBtns [m_Counter + Y].BtnTex.Width / 4;  	m_BtnHeight = m_SkinBtns [m_Counter + Y].BtnTex.Height;  	Vector2 TexturePosition = new Vector2 (X * (BodyTileSize.X + 16)' Y * (BodyTileSize.Y));  	Vector2 ButtonPosition = new Vector2 (TexturePosition.X - 3' TexturePosition.Y - 5);  	SBatch.Draw (m_SkinBtns [Y + m_Counter].BtnTex' new Rectangle ((int)(Position.X + ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)' new Rectangle ((int)m_SkinBtns [m_Counter + Y].SourcePosition.X' (int)m_SkinBtns [m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);  	SBatch.Draw (m_Thumb' new Rectangle ((int)(Position.X + TexturePosition.X)' (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)' null' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth);  	if (m_Counter < m_NumberOfSkinsToDisplay)  		m_Counter++;  }  
Magic Number,Gonzo.Elements,UIBodyBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIBodyBrowser.cs,Draw,The following statement contains a magic number: for (int Y = 0; Y <= m_Map.GetUpperBound (0); Y++) {  	m_Thumb = FileManager.GetTexture (m_Sex == AvatarSex.Male ? m_DarkAppearances [(Y * X) + m_Counter].DarkAppearance.ThumbnailID.UniqueID : m_DarkFemaleAppearances [(Y * X) + m_Counter].DarkAppearance.ThumbnailID.UniqueID);  	m_BtnWidth = m_SkinBtns [m_Counter + Y].BtnTex.Width / 4;  	m_BtnHeight = m_SkinBtns [m_Counter + Y].BtnTex.Height;  	Vector2 TexturePosition = new Vector2 (X * (BodyTileSize.X + 16)' Y * (BodyTileSize.Y));  	Vector2 ButtonPosition = new Vector2 (TexturePosition.X - 3' TexturePosition.Y - 5);  	SBatch.Draw (m_SkinBtns [Y + m_Counter].BtnTex' new Rectangle ((int)(Position.X + ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)' new Rectangle ((int)m_SkinBtns [m_Counter + Y].SourcePosition.X' (int)m_SkinBtns [m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);  	SBatch.Draw (m_Thumb' new Rectangle ((int)(Position.X + TexturePosition.X)' (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)' null' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth);  	if (m_Counter < m_NumberOfSkinsToDisplay)  		m_Counter++;  }  
Magic Number,Gonzo.Elements,UIBodyBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIBodyBrowser.cs,Draw,The following statement contains a magic number: for (int Y = 0; Y <= m_Map.GetUpperBound (0); Y++) {  	m_Thumb = FileManager.GetTexture (m_Sex == AvatarSex.Male ? m_DarkAppearances [(Y * X) + m_Counter].DarkAppearance.ThumbnailID.UniqueID : m_DarkFemaleAppearances [(Y * X) + m_Counter].DarkAppearance.ThumbnailID.UniqueID);  	m_BtnWidth = m_SkinBtns [m_Counter + Y].BtnTex.Width / 4;  	m_BtnHeight = m_SkinBtns [m_Counter + Y].BtnTex.Height;  	Vector2 TexturePosition = new Vector2 (X * (BodyTileSize.X + 16)' Y * (BodyTileSize.Y));  	Vector2 ButtonPosition = new Vector2 (TexturePosition.X - 3' TexturePosition.Y - 5);  	SBatch.Draw (m_SkinBtns [Y + m_Counter].BtnTex' new Rectangle ((int)(Position.X + ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)' new Rectangle ((int)m_SkinBtns [m_Counter + Y].SourcePosition.X' (int)m_SkinBtns [m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);  	SBatch.Draw (m_Thumb' new Rectangle ((int)(Position.X + TexturePosition.X)' (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)' null' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth);  	if (m_Counter < m_NumberOfSkinsToDisplay)  		m_Counter++;  }  
Magic Number,Gonzo.Elements,UIBodyBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIBodyBrowser.cs,Draw,The following statement contains a magic number: m_BtnWidth = m_SkinBtns [m_Counter + Y].BtnTex.Width / 4;  
Magic Number,Gonzo.Elements,UIHeadBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIHeadBrowser.cs,UIHeadBrowser,The following statement contains a magic number: foreach (OutfitContainer Ctr in m_LightAppearances) {  	SkinBtnContainer Container = new SkinBtnContainer ();  	Container.BtnTex = m_EditHeadSkinBtnTex;  	Container.SourcePosition = //Initialize to second frame in image.  	new Vector2 ((m_EditHeadSkinBtnTex.Width / (4)) * 2' 0.0f);  	m_SkinBtns.Add (Container);  }  
Magic Number,Gonzo.Elements,UIHeadBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIHeadBrowser.cs,UIHeadBrowser,The following statement contains a magic number: foreach (OutfitContainer Ctr in m_LightAppearances) {  	SkinBtnContainer Container = new SkinBtnContainer ();  	Container.BtnTex = m_EditHeadSkinBtnTex;  	Container.SourcePosition = //Initialize to second frame in image.  	new Vector2 ((m_EditHeadSkinBtnTex.Width / (4)) * 2' 0.0f);  	m_SkinBtns.Add (Container);  }  
Magic Number,Gonzo.Elements,UIHeadBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIHeadBrowser.cs,UIHeadBrowser,The following statement contains a magic number: Container.SourcePosition = //Initialize to second frame in image.  new Vector2 ((m_EditHeadSkinBtnTex.Width / (4)) * 2' 0.0f);  
Magic Number,Gonzo.Elements,UIHeadBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIHeadBrowser.cs,UIHeadBrowser,The following statement contains a magic number: Container.SourcePosition = //Initialize to second frame in image.  new Vector2 ((m_EditHeadSkinBtnTex.Width / (4)) * 2' 0.0f);  
Magic Number,Gonzo.Elements,UIHeadBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIHeadBrowser.cs,UIHeadBrowser,The following statement contains a magic number: foreach (OutfitContainer Ctr in m_MediumAppearances) {  	SkinBtnContainer Container = new SkinBtnContainer ();  	Container.BtnTex = m_EditHeadSkinBtnTex;  	Container.SourcePosition = //Initialize to second frame in image.  	new Vector2 ((m_EditHeadSkinBtnTex.Width / (4)) * 2' 0.0f);  	m_SkinBtns.Add (Container);  }  
Magic Number,Gonzo.Elements,UIHeadBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIHeadBrowser.cs,UIHeadBrowser,The following statement contains a magic number: foreach (OutfitContainer Ctr in m_MediumAppearances) {  	SkinBtnContainer Container = new SkinBtnContainer ();  	Container.BtnTex = m_EditHeadSkinBtnTex;  	Container.SourcePosition = //Initialize to second frame in image.  	new Vector2 ((m_EditHeadSkinBtnTex.Width / (4)) * 2' 0.0f);  	m_SkinBtns.Add (Container);  }  
Magic Number,Gonzo.Elements,UIHeadBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIHeadBrowser.cs,UIHeadBrowser,The following statement contains a magic number: Container.SourcePosition = //Initialize to second frame in image.  new Vector2 ((m_EditHeadSkinBtnTex.Width / (4)) * 2' 0.0f);  
Magic Number,Gonzo.Elements,UIHeadBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIHeadBrowser.cs,UIHeadBrowser,The following statement contains a magic number: Container.SourcePosition = //Initialize to second frame in image.  new Vector2 ((m_EditHeadSkinBtnTex.Width / (4)) * 2' 0.0f);  
Magic Number,Gonzo.Elements,UIHeadBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIHeadBrowser.cs,UIHeadBrowser,The following statement contains a magic number: foreach (OutfitContainer Ctr in m_DarkAppearances) {  	SkinBtnContainer Container = new SkinBtnContainer ();  	Container.BtnTex = m_EditHeadSkinBtnTex;  	Container.SourcePosition = //Initialize to second frame in image.  	new Vector2 ((m_EditHeadSkinBtnTex.Width / (4)) * 2' 0.0f);  	m_SkinBtns.Add (Container);  }  
Magic Number,Gonzo.Elements,UIHeadBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIHeadBrowser.cs,UIHeadBrowser,The following statement contains a magic number: foreach (OutfitContainer Ctr in m_DarkAppearances) {  	SkinBtnContainer Container = new SkinBtnContainer ();  	Container.BtnTex = m_EditHeadSkinBtnTex;  	Container.SourcePosition = //Initialize to second frame in image.  	new Vector2 ((m_EditHeadSkinBtnTex.Width / (4)) * 2' 0.0f);  	m_SkinBtns.Add (Container);  }  
Magic Number,Gonzo.Elements,UIHeadBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIHeadBrowser.cs,UIHeadBrowser,The following statement contains a magic number: Container.SourcePosition = //Initialize to second frame in image.  new Vector2 ((m_EditHeadSkinBtnTex.Width / (4)) * 2' 0.0f);  
Magic Number,Gonzo.Elements,UIHeadBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIHeadBrowser.cs,UIHeadBrowser,The following statement contains a magic number: Container.SourcePosition = //Initialize to second frame in image.  new Vector2 ((m_EditHeadSkinBtnTex.Width / (4)) * 2' 0.0f);  
Magic Number,Gonzo.Elements,UIHeadBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIHeadBrowser.cs,Update,The following statement contains a magic number: for (int X = 0; X <= m_Map.GetUpperBound (1); X++) {  	for (int Y = 0; Y <= m_Map.GetUpperBound (0); Y++) {  		m_BtnWidth = m_SkinBtns [m_Counter + Y].BtnTex.Width / 4;  		Vector2 TexturePosition = new Vector2 (X * (HeadTileSize.X + 10)' Y * (HeadTileSize.Y));  		Vector2 ButtonPosition = new Vector2 (TexturePosition.X - 3' TexturePosition.Y - 5);  		if (IsMouseOverButton (Helper' m_SkinBtns [Y + m_Counter]' Position + ButtonPosition)) {  			if (Helper.IsNewPress (MouseButtons.LeftButton)) {  				if (!m_SkinBtns [Y + m_Counter].IsButtonClicked) {  					m_SkinBtns [Y + m_Counter].SourcePosition.X += m_BtnWidth;  					if (OnButtonClicked != null) {  						UISkinButtonClickedEventArgs EArgs = new UISkinButtonClickedEventArgs ();  						switch (m_SelectedSkintype) {  						case Elements.SkinType.Light:  							EArgs.SkinType = 0;  							EArgs.SelectedOutfit = (m_Sex == AvatarSex.Male ? m_LightAppearances [(Y * X) + m_Counter].Oft : m_LightFemaleAppearances [(Y * X) + m_Counter].Oft);  							OnButtonClicked (this' EArgs);  							break;  						case Elements.SkinType.Medium:  							EArgs.SkinType = 1;  							EArgs.SelectedOutfit = (m_Sex == AvatarSex.Male ? m_MediumAppearances [(Y * X) + m_Counter].Oft : m_MediumFemaleAppearances [(Y * X) + m_Counter].Oft);  							OnButtonClicked (this' EArgs);  							break;  						case Elements.SkinType.Dark:  							EArgs.SkinType = 2;  							EArgs.SelectedOutfit = (m_Sex == AvatarSex.Male ? m_DarkAppearances [(Y * X) + m_Counter].Oft : m_DarkFemaleAppearances [(Y * X) + m_Counter].Oft);  							OnButtonClicked (this' EArgs);  							break;  						}  					}  					m_SkinBtns [Y + m_Counter].IsButtonClicked = true;  				}  			} else {  				if (m_SkinBtns [Y + m_Counter].IsButtonClicked)  					m_SkinBtns [Y + m_Counter].SourcePosition.X -= m_BtnWidth;  				m_SkinBtns [Y + m_Counter].IsButtonClicked = false;  			}  			if (!m_SkinBtns [Y + m_Counter].IsMouseHovering) {  				m_SkinBtns [Y + m_Counter].SourcePosition.X -= m_BtnWidth;  				m_SkinBtns [Y + m_Counter].IsMouseHovering = true;  			}  		} else {  			m_SkinBtns [Y + m_Counter].SourcePosition.X = (m_BtnWidth * 2);  			m_SkinBtns [Y + m_Counter].IsMouseHovering = false;  		}  		if (m_Counter < m_NumberOfSkinsToDisplay)  			m_Counter++;  	}  }  
Magic Number,Gonzo.Elements,UIHeadBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIHeadBrowser.cs,Update,The following statement contains a magic number: for (int X = 0; X <= m_Map.GetUpperBound (1); X++) {  	for (int Y = 0; Y <= m_Map.GetUpperBound (0); Y++) {  		m_BtnWidth = m_SkinBtns [m_Counter + Y].BtnTex.Width / 4;  		Vector2 TexturePosition = new Vector2 (X * (HeadTileSize.X + 10)' Y * (HeadTileSize.Y));  		Vector2 ButtonPosition = new Vector2 (TexturePosition.X - 3' TexturePosition.Y - 5);  		if (IsMouseOverButton (Helper' m_SkinBtns [Y + m_Counter]' Position + ButtonPosition)) {  			if (Helper.IsNewPress (MouseButtons.LeftButton)) {  				if (!m_SkinBtns [Y + m_Counter].IsButtonClicked) {  					m_SkinBtns [Y + m_Counter].SourcePosition.X += m_BtnWidth;  					if (OnButtonClicked != null) {  						UISkinButtonClickedEventArgs EArgs = new UISkinButtonClickedEventArgs ();  						switch (m_SelectedSkintype) {  						case Elements.SkinType.Light:  							EArgs.SkinType = 0;  							EArgs.SelectedOutfit = (m_Sex == AvatarSex.Male ? m_LightAppearances [(Y * X) + m_Counter].Oft : m_LightFemaleAppearances [(Y * X) + m_Counter].Oft);  							OnButtonClicked (this' EArgs);  							break;  						case Elements.SkinType.Medium:  							EArgs.SkinType = 1;  							EArgs.SelectedOutfit = (m_Sex == AvatarSex.Male ? m_MediumAppearances [(Y * X) + m_Counter].Oft : m_MediumFemaleAppearances [(Y * X) + m_Counter].Oft);  							OnButtonClicked (this' EArgs);  							break;  						case Elements.SkinType.Dark:  							EArgs.SkinType = 2;  							EArgs.SelectedOutfit = (m_Sex == AvatarSex.Male ? m_DarkAppearances [(Y * X) + m_Counter].Oft : m_DarkFemaleAppearances [(Y * X) + m_Counter].Oft);  							OnButtonClicked (this' EArgs);  							break;  						}  					}  					m_SkinBtns [Y + m_Counter].IsButtonClicked = true;  				}  			} else {  				if (m_SkinBtns [Y + m_Counter].IsButtonClicked)  					m_SkinBtns [Y + m_Counter].SourcePosition.X -= m_BtnWidth;  				m_SkinBtns [Y + m_Counter].IsButtonClicked = false;  			}  			if (!m_SkinBtns [Y + m_Counter].IsMouseHovering) {  				m_SkinBtns [Y + m_Counter].SourcePosition.X -= m_BtnWidth;  				m_SkinBtns [Y + m_Counter].IsMouseHovering = true;  			}  		} else {  			m_SkinBtns [Y + m_Counter].SourcePosition.X = (m_BtnWidth * 2);  			m_SkinBtns [Y + m_Counter].IsMouseHovering = false;  		}  		if (m_Counter < m_NumberOfSkinsToDisplay)  			m_Counter++;  	}  }  
Magic Number,Gonzo.Elements,UIHeadBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIHeadBrowser.cs,Update,The following statement contains a magic number: for (int X = 0; X <= m_Map.GetUpperBound (1); X++) {  	for (int Y = 0; Y <= m_Map.GetUpperBound (0); Y++) {  		m_BtnWidth = m_SkinBtns [m_Counter + Y].BtnTex.Width / 4;  		Vector2 TexturePosition = new Vector2 (X * (HeadTileSize.X + 10)' Y * (HeadTileSize.Y));  		Vector2 ButtonPosition = new Vector2 (TexturePosition.X - 3' TexturePosition.Y - 5);  		if (IsMouseOverButton (Helper' m_SkinBtns [Y + m_Counter]' Position + ButtonPosition)) {  			if (Helper.IsNewPress (MouseButtons.LeftButton)) {  				if (!m_SkinBtns [Y + m_Counter].IsButtonClicked) {  					m_SkinBtns [Y + m_Counter].SourcePosition.X += m_BtnWidth;  					if (OnButtonClicked != null) {  						UISkinButtonClickedEventArgs EArgs = new UISkinButtonClickedEventArgs ();  						switch (m_SelectedSkintype) {  						case Elements.SkinType.Light:  							EArgs.SkinType = 0;  							EArgs.SelectedOutfit = (m_Sex == AvatarSex.Male ? m_LightAppearances [(Y * X) + m_Counter].Oft : m_LightFemaleAppearances [(Y * X) + m_Counter].Oft);  							OnButtonClicked (this' EArgs);  							break;  						case Elements.SkinType.Medium:  							EArgs.SkinType = 1;  							EArgs.SelectedOutfit = (m_Sex == AvatarSex.Male ? m_MediumAppearances [(Y * X) + m_Counter].Oft : m_MediumFemaleAppearances [(Y * X) + m_Counter].Oft);  							OnButtonClicked (this' EArgs);  							break;  						case Elements.SkinType.Dark:  							EArgs.SkinType = 2;  							EArgs.SelectedOutfit = (m_Sex == AvatarSex.Male ? m_DarkAppearances [(Y * X) + m_Counter].Oft : m_DarkFemaleAppearances [(Y * X) + m_Counter].Oft);  							OnButtonClicked (this' EArgs);  							break;  						}  					}  					m_SkinBtns [Y + m_Counter].IsButtonClicked = true;  				}  			} else {  				if (m_SkinBtns [Y + m_Counter].IsButtonClicked)  					m_SkinBtns [Y + m_Counter].SourcePosition.X -= m_BtnWidth;  				m_SkinBtns [Y + m_Counter].IsButtonClicked = false;  			}  			if (!m_SkinBtns [Y + m_Counter].IsMouseHovering) {  				m_SkinBtns [Y + m_Counter].SourcePosition.X -= m_BtnWidth;  				m_SkinBtns [Y + m_Counter].IsMouseHovering = true;  			}  		} else {  			m_SkinBtns [Y + m_Counter].SourcePosition.X = (m_BtnWidth * 2);  			m_SkinBtns [Y + m_Counter].IsMouseHovering = false;  		}  		if (m_Counter < m_NumberOfSkinsToDisplay)  			m_Counter++;  	}  }  
Magic Number,Gonzo.Elements,UIHeadBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIHeadBrowser.cs,Update,The following statement contains a magic number: for (int X = 0; X <= m_Map.GetUpperBound (1); X++) {  	for (int Y = 0; Y <= m_Map.GetUpperBound (0); Y++) {  		m_BtnWidth = m_SkinBtns [m_Counter + Y].BtnTex.Width / 4;  		Vector2 TexturePosition = new Vector2 (X * (HeadTileSize.X + 10)' Y * (HeadTileSize.Y));  		Vector2 ButtonPosition = new Vector2 (TexturePosition.X - 3' TexturePosition.Y - 5);  		if (IsMouseOverButton (Helper' m_SkinBtns [Y + m_Counter]' Position + ButtonPosition)) {  			if (Helper.IsNewPress (MouseButtons.LeftButton)) {  				if (!m_SkinBtns [Y + m_Counter].IsButtonClicked) {  					m_SkinBtns [Y + m_Counter].SourcePosition.X += m_BtnWidth;  					if (OnButtonClicked != null) {  						UISkinButtonClickedEventArgs EArgs = new UISkinButtonClickedEventArgs ();  						switch (m_SelectedSkintype) {  						case Elements.SkinType.Light:  							EArgs.SkinType = 0;  							EArgs.SelectedOutfit = (m_Sex == AvatarSex.Male ? m_LightAppearances [(Y * X) + m_Counter].Oft : m_LightFemaleAppearances [(Y * X) + m_Counter].Oft);  							OnButtonClicked (this' EArgs);  							break;  						case Elements.SkinType.Medium:  							EArgs.SkinType = 1;  							EArgs.SelectedOutfit = (m_Sex == AvatarSex.Male ? m_MediumAppearances [(Y * X) + m_Counter].Oft : m_MediumFemaleAppearances [(Y * X) + m_Counter].Oft);  							OnButtonClicked (this' EArgs);  							break;  						case Elements.SkinType.Dark:  							EArgs.SkinType = 2;  							EArgs.SelectedOutfit = (m_Sex == AvatarSex.Male ? m_DarkAppearances [(Y * X) + m_Counter].Oft : m_DarkFemaleAppearances [(Y * X) + m_Counter].Oft);  							OnButtonClicked (this' EArgs);  							break;  						}  					}  					m_SkinBtns [Y + m_Counter].IsButtonClicked = true;  				}  			} else {  				if (m_SkinBtns [Y + m_Counter].IsButtonClicked)  					m_SkinBtns [Y + m_Counter].SourcePosition.X -= m_BtnWidth;  				m_SkinBtns [Y + m_Counter].IsButtonClicked = false;  			}  			if (!m_SkinBtns [Y + m_Counter].IsMouseHovering) {  				m_SkinBtns [Y + m_Counter].SourcePosition.X -= m_BtnWidth;  				m_SkinBtns [Y + m_Counter].IsMouseHovering = true;  			}  		} else {  			m_SkinBtns [Y + m_Counter].SourcePosition.X = (m_BtnWidth * 2);  			m_SkinBtns [Y + m_Counter].IsMouseHovering = false;  		}  		if (m_Counter < m_NumberOfSkinsToDisplay)  			m_Counter++;  	}  }  
Magic Number,Gonzo.Elements,UIHeadBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIHeadBrowser.cs,Update,The following statement contains a magic number: for (int X = 0; X <= m_Map.GetUpperBound (1); X++) {  	for (int Y = 0; Y <= m_Map.GetUpperBound (0); Y++) {  		m_BtnWidth = m_SkinBtns [m_Counter + Y].BtnTex.Width / 4;  		Vector2 TexturePosition = new Vector2 (X * (HeadTileSize.X + 10)' Y * (HeadTileSize.Y));  		Vector2 ButtonPosition = new Vector2 (TexturePosition.X - 3' TexturePosition.Y - 5);  		if (IsMouseOverButton (Helper' m_SkinBtns [Y + m_Counter]' Position + ButtonPosition)) {  			if (Helper.IsNewPress (MouseButtons.LeftButton)) {  				if (!m_SkinBtns [Y + m_Counter].IsButtonClicked) {  					m_SkinBtns [Y + m_Counter].SourcePosition.X += m_BtnWidth;  					if (OnButtonClicked != null) {  						UISkinButtonClickedEventArgs EArgs = new UISkinButtonClickedEventArgs ();  						switch (m_SelectedSkintype) {  						case Elements.SkinType.Light:  							EArgs.SkinType = 0;  							EArgs.SelectedOutfit = (m_Sex == AvatarSex.Male ? m_LightAppearances [(Y * X) + m_Counter].Oft : m_LightFemaleAppearances [(Y * X) + m_Counter].Oft);  							OnButtonClicked (this' EArgs);  							break;  						case Elements.SkinType.Medium:  							EArgs.SkinType = 1;  							EArgs.SelectedOutfit = (m_Sex == AvatarSex.Male ? m_MediumAppearances [(Y * X) + m_Counter].Oft : m_MediumFemaleAppearances [(Y * X) + m_Counter].Oft);  							OnButtonClicked (this' EArgs);  							break;  						case Elements.SkinType.Dark:  							EArgs.SkinType = 2;  							EArgs.SelectedOutfit = (m_Sex == AvatarSex.Male ? m_DarkAppearances [(Y * X) + m_Counter].Oft : m_DarkFemaleAppearances [(Y * X) + m_Counter].Oft);  							OnButtonClicked (this' EArgs);  							break;  						}  					}  					m_SkinBtns [Y + m_Counter].IsButtonClicked = true;  				}  			} else {  				if (m_SkinBtns [Y + m_Counter].IsButtonClicked)  					m_SkinBtns [Y + m_Counter].SourcePosition.X -= m_BtnWidth;  				m_SkinBtns [Y + m_Counter].IsButtonClicked = false;  			}  			if (!m_SkinBtns [Y + m_Counter].IsMouseHovering) {  				m_SkinBtns [Y + m_Counter].SourcePosition.X -= m_BtnWidth;  				m_SkinBtns [Y + m_Counter].IsMouseHovering = true;  			}  		} else {  			m_SkinBtns [Y + m_Counter].SourcePosition.X = (m_BtnWidth * 2);  			m_SkinBtns [Y + m_Counter].IsMouseHovering = false;  		}  		if (m_Counter < m_NumberOfSkinsToDisplay)  			m_Counter++;  	}  }  
Magic Number,Gonzo.Elements,UIHeadBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIHeadBrowser.cs,Update,The following statement contains a magic number: for (int X = 0; X <= m_Map.GetUpperBound (1); X++) {  	for (int Y = 0; Y <= m_Map.GetUpperBound (0); Y++) {  		m_BtnWidth = m_SkinBtns [m_Counter + Y].BtnTex.Width / 4;  		Vector2 TexturePosition = new Vector2 (X * (HeadTileSize.X + 10)' Y * (HeadTileSize.Y));  		Vector2 ButtonPosition = new Vector2 (TexturePosition.X - 3' TexturePosition.Y - 5);  		if (IsMouseOverButton (Helper' m_SkinBtns [Y + m_Counter]' Position + ButtonPosition)) {  			if (Helper.IsNewPress (MouseButtons.LeftButton)) {  				if (!m_SkinBtns [Y + m_Counter].IsButtonClicked) {  					m_SkinBtns [Y + m_Counter].SourcePosition.X += m_BtnWidth;  					if (OnButtonClicked != null) {  						UISkinButtonClickedEventArgs EArgs = new UISkinButtonClickedEventArgs ();  						switch (m_SelectedSkintype) {  						case Elements.SkinType.Light:  							EArgs.SkinType = 0;  							EArgs.SelectedOutfit = (m_Sex == AvatarSex.Male ? m_LightAppearances [(Y * X) + m_Counter].Oft : m_LightFemaleAppearances [(Y * X) + m_Counter].Oft);  							OnButtonClicked (this' EArgs);  							break;  						case Elements.SkinType.Medium:  							EArgs.SkinType = 1;  							EArgs.SelectedOutfit = (m_Sex == AvatarSex.Male ? m_MediumAppearances [(Y * X) + m_Counter].Oft : m_MediumFemaleAppearances [(Y * X) + m_Counter].Oft);  							OnButtonClicked (this' EArgs);  							break;  						case Elements.SkinType.Dark:  							EArgs.SkinType = 2;  							EArgs.SelectedOutfit = (m_Sex == AvatarSex.Male ? m_DarkAppearances [(Y * X) + m_Counter].Oft : m_DarkFemaleAppearances [(Y * X) + m_Counter].Oft);  							OnButtonClicked (this' EArgs);  							break;  						}  					}  					m_SkinBtns [Y + m_Counter].IsButtonClicked = true;  				}  			} else {  				if (m_SkinBtns [Y + m_Counter].IsButtonClicked)  					m_SkinBtns [Y + m_Counter].SourcePosition.X -= m_BtnWidth;  				m_SkinBtns [Y + m_Counter].IsButtonClicked = false;  			}  			if (!m_SkinBtns [Y + m_Counter].IsMouseHovering) {  				m_SkinBtns [Y + m_Counter].SourcePosition.X -= m_BtnWidth;  				m_SkinBtns [Y + m_Counter].IsMouseHovering = true;  			}  		} else {  			m_SkinBtns [Y + m_Counter].SourcePosition.X = (m_BtnWidth * 2);  			m_SkinBtns [Y + m_Counter].IsMouseHovering = false;  		}  		if (m_Counter < m_NumberOfSkinsToDisplay)  			m_Counter++;  	}  }  
Magic Number,Gonzo.Elements,UIHeadBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIHeadBrowser.cs,Update,The following statement contains a magic number: for (int Y = 0; Y <= m_Map.GetUpperBound (0); Y++) {  	m_BtnWidth = m_SkinBtns [m_Counter + Y].BtnTex.Width / 4;  	Vector2 TexturePosition = new Vector2 (X * (HeadTileSize.X + 10)' Y * (HeadTileSize.Y));  	Vector2 ButtonPosition = new Vector2 (TexturePosition.X - 3' TexturePosition.Y - 5);  	if (IsMouseOverButton (Helper' m_SkinBtns [Y + m_Counter]' Position + ButtonPosition)) {  		if (Helper.IsNewPress (MouseButtons.LeftButton)) {  			if (!m_SkinBtns [Y + m_Counter].IsButtonClicked) {  				m_SkinBtns [Y + m_Counter].SourcePosition.X += m_BtnWidth;  				if (OnButtonClicked != null) {  					UISkinButtonClickedEventArgs EArgs = new UISkinButtonClickedEventArgs ();  					switch (m_SelectedSkintype) {  					case Elements.SkinType.Light:  						EArgs.SkinType = 0;  						EArgs.SelectedOutfit = (m_Sex == AvatarSex.Male ? m_LightAppearances [(Y * X) + m_Counter].Oft : m_LightFemaleAppearances [(Y * X) + m_Counter].Oft);  						OnButtonClicked (this' EArgs);  						break;  					case Elements.SkinType.Medium:  						EArgs.SkinType = 1;  						EArgs.SelectedOutfit = (m_Sex == AvatarSex.Male ? m_MediumAppearances [(Y * X) + m_Counter].Oft : m_MediumFemaleAppearances [(Y * X) + m_Counter].Oft);  						OnButtonClicked (this' EArgs);  						break;  					case Elements.SkinType.Dark:  						EArgs.SkinType = 2;  						EArgs.SelectedOutfit = (m_Sex == AvatarSex.Male ? m_DarkAppearances [(Y * X) + m_Counter].Oft : m_DarkFemaleAppearances [(Y * X) + m_Counter].Oft);  						OnButtonClicked (this' EArgs);  						break;  					}  				}  				m_SkinBtns [Y + m_Counter].IsButtonClicked = true;  			}  		} else {  			if (m_SkinBtns [Y + m_Counter].IsButtonClicked)  				m_SkinBtns [Y + m_Counter].SourcePosition.X -= m_BtnWidth;  			m_SkinBtns [Y + m_Counter].IsButtonClicked = false;  		}  		if (!m_SkinBtns [Y + m_Counter].IsMouseHovering) {  			m_SkinBtns [Y + m_Counter].SourcePosition.X -= m_BtnWidth;  			m_SkinBtns [Y + m_Counter].IsMouseHovering = true;  		}  	} else {  		m_SkinBtns [Y + m_Counter].SourcePosition.X = (m_BtnWidth * 2);  		m_SkinBtns [Y + m_Counter].IsMouseHovering = false;  	}  	if (m_Counter < m_NumberOfSkinsToDisplay)  		m_Counter++;  }  
Magic Number,Gonzo.Elements,UIHeadBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIHeadBrowser.cs,Update,The following statement contains a magic number: for (int Y = 0; Y <= m_Map.GetUpperBound (0); Y++) {  	m_BtnWidth = m_SkinBtns [m_Counter + Y].BtnTex.Width / 4;  	Vector2 TexturePosition = new Vector2 (X * (HeadTileSize.X + 10)' Y * (HeadTileSize.Y));  	Vector2 ButtonPosition = new Vector2 (TexturePosition.X - 3' TexturePosition.Y - 5);  	if (IsMouseOverButton (Helper' m_SkinBtns [Y + m_Counter]' Position + ButtonPosition)) {  		if (Helper.IsNewPress (MouseButtons.LeftButton)) {  			if (!m_SkinBtns [Y + m_Counter].IsButtonClicked) {  				m_SkinBtns [Y + m_Counter].SourcePosition.X += m_BtnWidth;  				if (OnButtonClicked != null) {  					UISkinButtonClickedEventArgs EArgs = new UISkinButtonClickedEventArgs ();  					switch (m_SelectedSkintype) {  					case Elements.SkinType.Light:  						EArgs.SkinType = 0;  						EArgs.SelectedOutfit = (m_Sex == AvatarSex.Male ? m_LightAppearances [(Y * X) + m_Counter].Oft : m_LightFemaleAppearances [(Y * X) + m_Counter].Oft);  						OnButtonClicked (this' EArgs);  						break;  					case Elements.SkinType.Medium:  						EArgs.SkinType = 1;  						EArgs.SelectedOutfit = (m_Sex == AvatarSex.Male ? m_MediumAppearances [(Y * X) + m_Counter].Oft : m_MediumFemaleAppearances [(Y * X) + m_Counter].Oft);  						OnButtonClicked (this' EArgs);  						break;  					case Elements.SkinType.Dark:  						EArgs.SkinType = 2;  						EArgs.SelectedOutfit = (m_Sex == AvatarSex.Male ? m_DarkAppearances [(Y * X) + m_Counter].Oft : m_DarkFemaleAppearances [(Y * X) + m_Counter].Oft);  						OnButtonClicked (this' EArgs);  						break;  					}  				}  				m_SkinBtns [Y + m_Counter].IsButtonClicked = true;  			}  		} else {  			if (m_SkinBtns [Y + m_Counter].IsButtonClicked)  				m_SkinBtns [Y + m_Counter].SourcePosition.X -= m_BtnWidth;  			m_SkinBtns [Y + m_Counter].IsButtonClicked = false;  		}  		if (!m_SkinBtns [Y + m_Counter].IsMouseHovering) {  			m_SkinBtns [Y + m_Counter].SourcePosition.X -= m_BtnWidth;  			m_SkinBtns [Y + m_Counter].IsMouseHovering = true;  		}  	} else {  		m_SkinBtns [Y + m_Counter].SourcePosition.X = (m_BtnWidth * 2);  		m_SkinBtns [Y + m_Counter].IsMouseHovering = false;  	}  	if (m_Counter < m_NumberOfSkinsToDisplay)  		m_Counter++;  }  
Magic Number,Gonzo.Elements,UIHeadBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIHeadBrowser.cs,Update,The following statement contains a magic number: for (int Y = 0; Y <= m_Map.GetUpperBound (0); Y++) {  	m_BtnWidth = m_SkinBtns [m_Counter + Y].BtnTex.Width / 4;  	Vector2 TexturePosition = new Vector2 (X * (HeadTileSize.X + 10)' Y * (HeadTileSize.Y));  	Vector2 ButtonPosition = new Vector2 (TexturePosition.X - 3' TexturePosition.Y - 5);  	if (IsMouseOverButton (Helper' m_SkinBtns [Y + m_Counter]' Position + ButtonPosition)) {  		if (Helper.IsNewPress (MouseButtons.LeftButton)) {  			if (!m_SkinBtns [Y + m_Counter].IsButtonClicked) {  				m_SkinBtns [Y + m_Counter].SourcePosition.X += m_BtnWidth;  				if (OnButtonClicked != null) {  					UISkinButtonClickedEventArgs EArgs = new UISkinButtonClickedEventArgs ();  					switch (m_SelectedSkintype) {  					case Elements.SkinType.Light:  						EArgs.SkinType = 0;  						EArgs.SelectedOutfit = (m_Sex == AvatarSex.Male ? m_LightAppearances [(Y * X) + m_Counter].Oft : m_LightFemaleAppearances [(Y * X) + m_Counter].Oft);  						OnButtonClicked (this' EArgs);  						break;  					case Elements.SkinType.Medium:  						EArgs.SkinType = 1;  						EArgs.SelectedOutfit = (m_Sex == AvatarSex.Male ? m_MediumAppearances [(Y * X) + m_Counter].Oft : m_MediumFemaleAppearances [(Y * X) + m_Counter].Oft);  						OnButtonClicked (this' EArgs);  						break;  					case Elements.SkinType.Dark:  						EArgs.SkinType = 2;  						EArgs.SelectedOutfit = (m_Sex == AvatarSex.Male ? m_DarkAppearances [(Y * X) + m_Counter].Oft : m_DarkFemaleAppearances [(Y * X) + m_Counter].Oft);  						OnButtonClicked (this' EArgs);  						break;  					}  				}  				m_SkinBtns [Y + m_Counter].IsButtonClicked = true;  			}  		} else {  			if (m_SkinBtns [Y + m_Counter].IsButtonClicked)  				m_SkinBtns [Y + m_Counter].SourcePosition.X -= m_BtnWidth;  			m_SkinBtns [Y + m_Counter].IsButtonClicked = false;  		}  		if (!m_SkinBtns [Y + m_Counter].IsMouseHovering) {  			m_SkinBtns [Y + m_Counter].SourcePosition.X -= m_BtnWidth;  			m_SkinBtns [Y + m_Counter].IsMouseHovering = true;  		}  	} else {  		m_SkinBtns [Y + m_Counter].SourcePosition.X = (m_BtnWidth * 2);  		m_SkinBtns [Y + m_Counter].IsMouseHovering = false;  	}  	if (m_Counter < m_NumberOfSkinsToDisplay)  		m_Counter++;  }  
Magic Number,Gonzo.Elements,UIHeadBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIHeadBrowser.cs,Update,The following statement contains a magic number: for (int Y = 0; Y <= m_Map.GetUpperBound (0); Y++) {  	m_BtnWidth = m_SkinBtns [m_Counter + Y].BtnTex.Width / 4;  	Vector2 TexturePosition = new Vector2 (X * (HeadTileSize.X + 10)' Y * (HeadTileSize.Y));  	Vector2 ButtonPosition = new Vector2 (TexturePosition.X - 3' TexturePosition.Y - 5);  	if (IsMouseOverButton (Helper' m_SkinBtns [Y + m_Counter]' Position + ButtonPosition)) {  		if (Helper.IsNewPress (MouseButtons.LeftButton)) {  			if (!m_SkinBtns [Y + m_Counter].IsButtonClicked) {  				m_SkinBtns [Y + m_Counter].SourcePosition.X += m_BtnWidth;  				if (OnButtonClicked != null) {  					UISkinButtonClickedEventArgs EArgs = new UISkinButtonClickedEventArgs ();  					switch (m_SelectedSkintype) {  					case Elements.SkinType.Light:  						EArgs.SkinType = 0;  						EArgs.SelectedOutfit = (m_Sex == AvatarSex.Male ? m_LightAppearances [(Y * X) + m_Counter].Oft : m_LightFemaleAppearances [(Y * X) + m_Counter].Oft);  						OnButtonClicked (this' EArgs);  						break;  					case Elements.SkinType.Medium:  						EArgs.SkinType = 1;  						EArgs.SelectedOutfit = (m_Sex == AvatarSex.Male ? m_MediumAppearances [(Y * X) + m_Counter].Oft : m_MediumFemaleAppearances [(Y * X) + m_Counter].Oft);  						OnButtonClicked (this' EArgs);  						break;  					case Elements.SkinType.Dark:  						EArgs.SkinType = 2;  						EArgs.SelectedOutfit = (m_Sex == AvatarSex.Male ? m_DarkAppearances [(Y * X) + m_Counter].Oft : m_DarkFemaleAppearances [(Y * X) + m_Counter].Oft);  						OnButtonClicked (this' EArgs);  						break;  					}  				}  				m_SkinBtns [Y + m_Counter].IsButtonClicked = true;  			}  		} else {  			if (m_SkinBtns [Y + m_Counter].IsButtonClicked)  				m_SkinBtns [Y + m_Counter].SourcePosition.X -= m_BtnWidth;  			m_SkinBtns [Y + m_Counter].IsButtonClicked = false;  		}  		if (!m_SkinBtns [Y + m_Counter].IsMouseHovering) {  			m_SkinBtns [Y + m_Counter].SourcePosition.X -= m_BtnWidth;  			m_SkinBtns [Y + m_Counter].IsMouseHovering = true;  		}  	} else {  		m_SkinBtns [Y + m_Counter].SourcePosition.X = (m_BtnWidth * 2);  		m_SkinBtns [Y + m_Counter].IsMouseHovering = false;  	}  	if (m_Counter < m_NumberOfSkinsToDisplay)  		m_Counter++;  }  
Magic Number,Gonzo.Elements,UIHeadBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIHeadBrowser.cs,Update,The following statement contains a magic number: for (int Y = 0; Y <= m_Map.GetUpperBound (0); Y++) {  	m_BtnWidth = m_SkinBtns [m_Counter + Y].BtnTex.Width / 4;  	Vector2 TexturePosition = new Vector2 (X * (HeadTileSize.X + 10)' Y * (HeadTileSize.Y));  	Vector2 ButtonPosition = new Vector2 (TexturePosition.X - 3' TexturePosition.Y - 5);  	if (IsMouseOverButton (Helper' m_SkinBtns [Y + m_Counter]' Position + ButtonPosition)) {  		if (Helper.IsNewPress (MouseButtons.LeftButton)) {  			if (!m_SkinBtns [Y + m_Counter].IsButtonClicked) {  				m_SkinBtns [Y + m_Counter].SourcePosition.X += m_BtnWidth;  				if (OnButtonClicked != null) {  					UISkinButtonClickedEventArgs EArgs = new UISkinButtonClickedEventArgs ();  					switch (m_SelectedSkintype) {  					case Elements.SkinType.Light:  						EArgs.SkinType = 0;  						EArgs.SelectedOutfit = (m_Sex == AvatarSex.Male ? m_LightAppearances [(Y * X) + m_Counter].Oft : m_LightFemaleAppearances [(Y * X) + m_Counter].Oft);  						OnButtonClicked (this' EArgs);  						break;  					case Elements.SkinType.Medium:  						EArgs.SkinType = 1;  						EArgs.SelectedOutfit = (m_Sex == AvatarSex.Male ? m_MediumAppearances [(Y * X) + m_Counter].Oft : m_MediumFemaleAppearances [(Y * X) + m_Counter].Oft);  						OnButtonClicked (this' EArgs);  						break;  					case Elements.SkinType.Dark:  						EArgs.SkinType = 2;  						EArgs.SelectedOutfit = (m_Sex == AvatarSex.Male ? m_DarkAppearances [(Y * X) + m_Counter].Oft : m_DarkFemaleAppearances [(Y * X) + m_Counter].Oft);  						OnButtonClicked (this' EArgs);  						break;  					}  				}  				m_SkinBtns [Y + m_Counter].IsButtonClicked = true;  			}  		} else {  			if (m_SkinBtns [Y + m_Counter].IsButtonClicked)  				m_SkinBtns [Y + m_Counter].SourcePosition.X -= m_BtnWidth;  			m_SkinBtns [Y + m_Counter].IsButtonClicked = false;  		}  		if (!m_SkinBtns [Y + m_Counter].IsMouseHovering) {  			m_SkinBtns [Y + m_Counter].SourcePosition.X -= m_BtnWidth;  			m_SkinBtns [Y + m_Counter].IsMouseHovering = true;  		}  	} else {  		m_SkinBtns [Y + m_Counter].SourcePosition.X = (m_BtnWidth * 2);  		m_SkinBtns [Y + m_Counter].IsMouseHovering = false;  	}  	if (m_Counter < m_NumberOfSkinsToDisplay)  		m_Counter++;  }  
Magic Number,Gonzo.Elements,UIHeadBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIHeadBrowser.cs,Update,The following statement contains a magic number: for (int Y = 0; Y <= m_Map.GetUpperBound (0); Y++) {  	m_BtnWidth = m_SkinBtns [m_Counter + Y].BtnTex.Width / 4;  	Vector2 TexturePosition = new Vector2 (X * (HeadTileSize.X + 10)' Y * (HeadTileSize.Y));  	Vector2 ButtonPosition = new Vector2 (TexturePosition.X - 3' TexturePosition.Y - 5);  	if (IsMouseOverButton (Helper' m_SkinBtns [Y + m_Counter]' Position + ButtonPosition)) {  		if (Helper.IsNewPress (MouseButtons.LeftButton)) {  			if (!m_SkinBtns [Y + m_Counter].IsButtonClicked) {  				m_SkinBtns [Y + m_Counter].SourcePosition.X += m_BtnWidth;  				if (OnButtonClicked != null) {  					UISkinButtonClickedEventArgs EArgs = new UISkinButtonClickedEventArgs ();  					switch (m_SelectedSkintype) {  					case Elements.SkinType.Light:  						EArgs.SkinType = 0;  						EArgs.SelectedOutfit = (m_Sex == AvatarSex.Male ? m_LightAppearances [(Y * X) + m_Counter].Oft : m_LightFemaleAppearances [(Y * X) + m_Counter].Oft);  						OnButtonClicked (this' EArgs);  						break;  					case Elements.SkinType.Medium:  						EArgs.SkinType = 1;  						EArgs.SelectedOutfit = (m_Sex == AvatarSex.Male ? m_MediumAppearances [(Y * X) + m_Counter].Oft : m_MediumFemaleAppearances [(Y * X) + m_Counter].Oft);  						OnButtonClicked (this' EArgs);  						break;  					case Elements.SkinType.Dark:  						EArgs.SkinType = 2;  						EArgs.SelectedOutfit = (m_Sex == AvatarSex.Male ? m_DarkAppearances [(Y * X) + m_Counter].Oft : m_DarkFemaleAppearances [(Y * X) + m_Counter].Oft);  						OnButtonClicked (this' EArgs);  						break;  					}  				}  				m_SkinBtns [Y + m_Counter].IsButtonClicked = true;  			}  		} else {  			if (m_SkinBtns [Y + m_Counter].IsButtonClicked)  				m_SkinBtns [Y + m_Counter].SourcePosition.X -= m_BtnWidth;  			m_SkinBtns [Y + m_Counter].IsButtonClicked = false;  		}  		if (!m_SkinBtns [Y + m_Counter].IsMouseHovering) {  			m_SkinBtns [Y + m_Counter].SourcePosition.X -= m_BtnWidth;  			m_SkinBtns [Y + m_Counter].IsMouseHovering = true;  		}  	} else {  		m_SkinBtns [Y + m_Counter].SourcePosition.X = (m_BtnWidth * 2);  		m_SkinBtns [Y + m_Counter].IsMouseHovering = false;  	}  	if (m_Counter < m_NumberOfSkinsToDisplay)  		m_Counter++;  }  
Magic Number,Gonzo.Elements,UIHeadBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIHeadBrowser.cs,Update,The following statement contains a magic number: m_BtnWidth = m_SkinBtns [m_Counter + Y].BtnTex.Width / 4;  
Magic Number,Gonzo.Elements,UIHeadBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIHeadBrowser.cs,Update,The following statement contains a magic number: if (IsMouseOverButton (Helper' m_SkinBtns [Y + m_Counter]' Position + ButtonPosition)) {  	if (Helper.IsNewPress (MouseButtons.LeftButton)) {  		if (!m_SkinBtns [Y + m_Counter].IsButtonClicked) {  			m_SkinBtns [Y + m_Counter].SourcePosition.X += m_BtnWidth;  			if (OnButtonClicked != null) {  				UISkinButtonClickedEventArgs EArgs = new UISkinButtonClickedEventArgs ();  				switch (m_SelectedSkintype) {  				case Elements.SkinType.Light:  					EArgs.SkinType = 0;  					EArgs.SelectedOutfit = (m_Sex == AvatarSex.Male ? m_LightAppearances [(Y * X) + m_Counter].Oft : m_LightFemaleAppearances [(Y * X) + m_Counter].Oft);  					OnButtonClicked (this' EArgs);  					break;  				case Elements.SkinType.Medium:  					EArgs.SkinType = 1;  					EArgs.SelectedOutfit = (m_Sex == AvatarSex.Male ? m_MediumAppearances [(Y * X) + m_Counter].Oft : m_MediumFemaleAppearances [(Y * X) + m_Counter].Oft);  					OnButtonClicked (this' EArgs);  					break;  				case Elements.SkinType.Dark:  					EArgs.SkinType = 2;  					EArgs.SelectedOutfit = (m_Sex == AvatarSex.Male ? m_DarkAppearances [(Y * X) + m_Counter].Oft : m_DarkFemaleAppearances [(Y * X) + m_Counter].Oft);  					OnButtonClicked (this' EArgs);  					break;  				}  			}  			m_SkinBtns [Y + m_Counter].IsButtonClicked = true;  		}  	} else {  		if (m_SkinBtns [Y + m_Counter].IsButtonClicked)  			m_SkinBtns [Y + m_Counter].SourcePosition.X -= m_BtnWidth;  		m_SkinBtns [Y + m_Counter].IsButtonClicked = false;  	}  	if (!m_SkinBtns [Y + m_Counter].IsMouseHovering) {  		m_SkinBtns [Y + m_Counter].SourcePosition.X -= m_BtnWidth;  		m_SkinBtns [Y + m_Counter].IsMouseHovering = true;  	}  } else {  	m_SkinBtns [Y + m_Counter].SourcePosition.X = (m_BtnWidth * 2);  	m_SkinBtns [Y + m_Counter].IsMouseHovering = false;  }  
Magic Number,Gonzo.Elements,UIHeadBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIHeadBrowser.cs,Update,The following statement contains a magic number: if (IsMouseOverButton (Helper' m_SkinBtns [Y + m_Counter]' Position + ButtonPosition)) {  	if (Helper.IsNewPress (MouseButtons.LeftButton)) {  		if (!m_SkinBtns [Y + m_Counter].IsButtonClicked) {  			m_SkinBtns [Y + m_Counter].SourcePosition.X += m_BtnWidth;  			if (OnButtonClicked != null) {  				UISkinButtonClickedEventArgs EArgs = new UISkinButtonClickedEventArgs ();  				switch (m_SelectedSkintype) {  				case Elements.SkinType.Light:  					EArgs.SkinType = 0;  					EArgs.SelectedOutfit = (m_Sex == AvatarSex.Male ? m_LightAppearances [(Y * X) + m_Counter].Oft : m_LightFemaleAppearances [(Y * X) + m_Counter].Oft);  					OnButtonClicked (this' EArgs);  					break;  				case Elements.SkinType.Medium:  					EArgs.SkinType = 1;  					EArgs.SelectedOutfit = (m_Sex == AvatarSex.Male ? m_MediumAppearances [(Y * X) + m_Counter].Oft : m_MediumFemaleAppearances [(Y * X) + m_Counter].Oft);  					OnButtonClicked (this' EArgs);  					break;  				case Elements.SkinType.Dark:  					EArgs.SkinType = 2;  					EArgs.SelectedOutfit = (m_Sex == AvatarSex.Male ? m_DarkAppearances [(Y * X) + m_Counter].Oft : m_DarkFemaleAppearances [(Y * X) + m_Counter].Oft);  					OnButtonClicked (this' EArgs);  					break;  				}  			}  			m_SkinBtns [Y + m_Counter].IsButtonClicked = true;  		}  	} else {  		if (m_SkinBtns [Y + m_Counter].IsButtonClicked)  			m_SkinBtns [Y + m_Counter].SourcePosition.X -= m_BtnWidth;  		m_SkinBtns [Y + m_Counter].IsButtonClicked = false;  	}  	if (!m_SkinBtns [Y + m_Counter].IsMouseHovering) {  		m_SkinBtns [Y + m_Counter].SourcePosition.X -= m_BtnWidth;  		m_SkinBtns [Y + m_Counter].IsMouseHovering = true;  	}  } else {  	m_SkinBtns [Y + m_Counter].SourcePosition.X = (m_BtnWidth * 2);  	m_SkinBtns [Y + m_Counter].IsMouseHovering = false;  }  
Magic Number,Gonzo.Elements,UIHeadBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIHeadBrowser.cs,Update,The following statement contains a magic number: if (Helper.IsNewPress (MouseButtons.LeftButton)) {  	if (!m_SkinBtns [Y + m_Counter].IsButtonClicked) {  		m_SkinBtns [Y + m_Counter].SourcePosition.X += m_BtnWidth;  		if (OnButtonClicked != null) {  			UISkinButtonClickedEventArgs EArgs = new UISkinButtonClickedEventArgs ();  			switch (m_SelectedSkintype) {  			case Elements.SkinType.Light:  				EArgs.SkinType = 0;  				EArgs.SelectedOutfit = (m_Sex == AvatarSex.Male ? m_LightAppearances [(Y * X) + m_Counter].Oft : m_LightFemaleAppearances [(Y * X) + m_Counter].Oft);  				OnButtonClicked (this' EArgs);  				break;  			case Elements.SkinType.Medium:  				EArgs.SkinType = 1;  				EArgs.SelectedOutfit = (m_Sex == AvatarSex.Male ? m_MediumAppearances [(Y * X) + m_Counter].Oft : m_MediumFemaleAppearances [(Y * X) + m_Counter].Oft);  				OnButtonClicked (this' EArgs);  				break;  			case Elements.SkinType.Dark:  				EArgs.SkinType = 2;  				EArgs.SelectedOutfit = (m_Sex == AvatarSex.Male ? m_DarkAppearances [(Y * X) + m_Counter].Oft : m_DarkFemaleAppearances [(Y * X) + m_Counter].Oft);  				OnButtonClicked (this' EArgs);  				break;  			}  		}  		m_SkinBtns [Y + m_Counter].IsButtonClicked = true;  	}  } else {  	if (m_SkinBtns [Y + m_Counter].IsButtonClicked)  		m_SkinBtns [Y + m_Counter].SourcePosition.X -= m_BtnWidth;  	m_SkinBtns [Y + m_Counter].IsButtonClicked = false;  }  
Magic Number,Gonzo.Elements,UIHeadBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIHeadBrowser.cs,Update,The following statement contains a magic number: if (!m_SkinBtns [Y + m_Counter].IsButtonClicked) {  	m_SkinBtns [Y + m_Counter].SourcePosition.X += m_BtnWidth;  	if (OnButtonClicked != null) {  		UISkinButtonClickedEventArgs EArgs = new UISkinButtonClickedEventArgs ();  		switch (m_SelectedSkintype) {  		case Elements.SkinType.Light:  			EArgs.SkinType = 0;  			EArgs.SelectedOutfit = (m_Sex == AvatarSex.Male ? m_LightAppearances [(Y * X) + m_Counter].Oft : m_LightFemaleAppearances [(Y * X) + m_Counter].Oft);  			OnButtonClicked (this' EArgs);  			break;  		case Elements.SkinType.Medium:  			EArgs.SkinType = 1;  			EArgs.SelectedOutfit = (m_Sex == AvatarSex.Male ? m_MediumAppearances [(Y * X) + m_Counter].Oft : m_MediumFemaleAppearances [(Y * X) + m_Counter].Oft);  			OnButtonClicked (this' EArgs);  			break;  		case Elements.SkinType.Dark:  			EArgs.SkinType = 2;  			EArgs.SelectedOutfit = (m_Sex == AvatarSex.Male ? m_DarkAppearances [(Y * X) + m_Counter].Oft : m_DarkFemaleAppearances [(Y * X) + m_Counter].Oft);  			OnButtonClicked (this' EArgs);  			break;  		}  	}  	m_SkinBtns [Y + m_Counter].IsButtonClicked = true;  }  
Magic Number,Gonzo.Elements,UIHeadBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIHeadBrowser.cs,Update,The following statement contains a magic number: if (OnButtonClicked != null) {  	UISkinButtonClickedEventArgs EArgs = new UISkinButtonClickedEventArgs ();  	switch (m_SelectedSkintype) {  	case Elements.SkinType.Light:  		EArgs.SkinType = 0;  		EArgs.SelectedOutfit = (m_Sex == AvatarSex.Male ? m_LightAppearances [(Y * X) + m_Counter].Oft : m_LightFemaleAppearances [(Y * X) + m_Counter].Oft);  		OnButtonClicked (this' EArgs);  		break;  	case Elements.SkinType.Medium:  		EArgs.SkinType = 1;  		EArgs.SelectedOutfit = (m_Sex == AvatarSex.Male ? m_MediumAppearances [(Y * X) + m_Counter].Oft : m_MediumFemaleAppearances [(Y * X) + m_Counter].Oft);  		OnButtonClicked (this' EArgs);  		break;  	case Elements.SkinType.Dark:  		EArgs.SkinType = 2;  		EArgs.SelectedOutfit = (m_Sex == AvatarSex.Male ? m_DarkAppearances [(Y * X) + m_Counter].Oft : m_DarkFemaleAppearances [(Y * X) + m_Counter].Oft);  		OnButtonClicked (this' EArgs);  		break;  	}  }  
Magic Number,Gonzo.Elements,UIHeadBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIHeadBrowser.cs,Update,The following statement contains a magic number: switch (m_SelectedSkintype) {  case Elements.SkinType.Light:  	EArgs.SkinType = 0;  	EArgs.SelectedOutfit = (m_Sex == AvatarSex.Male ? m_LightAppearances [(Y * X) + m_Counter].Oft : m_LightFemaleAppearances [(Y * X) + m_Counter].Oft);  	OnButtonClicked (this' EArgs);  	break;  case Elements.SkinType.Medium:  	EArgs.SkinType = 1;  	EArgs.SelectedOutfit = (m_Sex == AvatarSex.Male ? m_MediumAppearances [(Y * X) + m_Counter].Oft : m_MediumFemaleAppearances [(Y * X) + m_Counter].Oft);  	OnButtonClicked (this' EArgs);  	break;  case Elements.SkinType.Dark:  	EArgs.SkinType = 2;  	EArgs.SelectedOutfit = (m_Sex == AvatarSex.Male ? m_DarkAppearances [(Y * X) + m_Counter].Oft : m_DarkFemaleAppearances [(Y * X) + m_Counter].Oft);  	OnButtonClicked (this' EArgs);  	break;  }  
Magic Number,Gonzo.Elements,UIHeadBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIHeadBrowser.cs,Update,The following statement contains a magic number: EArgs.SkinType = 2;  
Magic Number,Gonzo.Elements,UIHeadBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIHeadBrowser.cs,Update,The following statement contains a magic number: m_SkinBtns [Y + m_Counter].SourcePosition.X = (m_BtnWidth * 2);  
Magic Number,Gonzo.Elements,UIHeadBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIHeadBrowser.cs,Draw,The following statement contains a magic number: SBatch.DrawString (m_Screen.Font9px' "Heads: " + m_NumberOfHeads' new Vector2 (Position.X + (m_Size.X / 2) - m_Screen.Font9px.MeasureString ("Heads: ").X' Position.Y + (m_Size.Y - 70))' new Color (255' 249' 157)' 0.0f' new Vector2 (0' 0)' 1.0f' SpriteEffects.None' m_Depth);  
Magic Number,Gonzo.Elements,UIHeadBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIHeadBrowser.cs,Draw,The following statement contains a magic number: SBatch.DrawString (m_Screen.Font9px' "Heads: " + m_NumberOfHeads' new Vector2 (Position.X + (m_Size.X / 2) - m_Screen.Font9px.MeasureString ("Heads: ").X' Position.Y + (m_Size.Y - 70))' new Color (255' 249' 157)' 0.0f' new Vector2 (0' 0)' 1.0f' SpriteEffects.None' m_Depth);  
Magic Number,Gonzo.Elements,UIHeadBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIHeadBrowser.cs,Draw,The following statement contains a magic number: SBatch.DrawString (m_Screen.Font9px' "Heads: " + m_NumberOfHeads' new Vector2 (Position.X + (m_Size.X / 2) - m_Screen.Font9px.MeasureString ("Heads: ").X' Position.Y + (m_Size.Y - 70))' new Color (255' 249' 157)' 0.0f' new Vector2 (0' 0)' 1.0f' SpriteEffects.None' m_Depth);  
Magic Number,Gonzo.Elements,UIHeadBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIHeadBrowser.cs,Draw,The following statement contains a magic number: SBatch.DrawString (m_Screen.Font9px' "Heads: " + m_NumberOfHeads' new Vector2 (Position.X + (m_Size.X / 2) - m_Screen.Font9px.MeasureString ("Heads: ").X' Position.Y + (m_Size.Y - 70))' new Color (255' 249' 157)' 0.0f' new Vector2 (0' 0)' 1.0f' SpriteEffects.None' m_Depth);  
Magic Number,Gonzo.Elements,UIHeadBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIHeadBrowser.cs,Draw,The following statement contains a magic number: SBatch.DrawString (m_Screen.Font9px' "Heads: " + m_NumberOfHeads' new Vector2 (Position.X + (m_Size.X / 2) - m_Screen.Font9px.MeasureString ("Heads: ").X' Position.Y + (m_Size.Y - 70))' new Color (255' 249' 157)' 0.0f' new Vector2 (0' 0)' 1.0f' SpriteEffects.None' m_Depth);  
Magic Number,Gonzo.Elements,UIHeadBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIHeadBrowser.cs,Draw,The following statement contains a magic number: switch (m_SelectedSkintype) {  case Elements.SkinType.Light:  	for (int X = 0; X <= m_Map.GetUpperBound (1); X++) {  		for (int Y = 0; Y <= m_Map.GetUpperBound (0); Y++) {  			m_Thumb = FileManager.GetTexture (m_Sex == AvatarSex.Male ? m_LightAppearances [(Y * X) + m_Counter].LightAppearance.ThumbnailID.UniqueID : m_LightFemaleAppearances [(Y * X) + m_Counter].LightAppearance.ThumbnailID.UniqueID);  			m_BtnWidth = m_SkinBtns [m_Counter + Y].BtnTex.Width / 4;  			m_BtnHeight = m_SkinBtns [m_Counter + Y].BtnTex.Height;  			Vector2 TexturePosition = new Vector2 (X * (HeadTileSize.X + 10)' Y * (HeadTileSize.Y));  			Vector2 ButtonPosition = new Vector2 (TexturePosition.X - 2' TexturePosition.Y - 5);  			//NOTE: Must be drawn at Depth - 0.1f because of alpha issues with thumbs.  			SBatch.Draw (m_SkinBtns [Y + m_Counter].BtnTex' new Rectangle ((int)(Position.X + ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)' new Rectangle ((int)m_SkinBtns [m_Counter + Y].SourcePosition.X' (int)m_SkinBtns [m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);  			SBatch.Draw (m_Thumb' new Rectangle ((int)(Position.X + TexturePosition.X)' (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)' null' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth);  			if (m_Counter < m_NumberOfSkinsToDisplay)  				m_Counter++;  		}  	}  	break;  case Elements.SkinType.Medium:  	for (int X = 0; X <= m_Map.GetUpperBound (1); X++) {  		for (int Y = 0; Y <= m_Map.GetUpperBound (0); Y++) {  			m_Thumb = FileManager.GetTexture (m_Sex == AvatarSex.Male ? m_MediumAppearances [(Y * X) + m_Counter].MediumAppearance.ThumbnailID.UniqueID : m_MediumFemaleAppearances [(Y * X) + m_Counter].MediumAppearance.ThumbnailID.UniqueID);  			m_BtnWidth = m_SkinBtns [m_Counter + Y].BtnTex.Width / 4;  			m_BtnHeight = m_SkinBtns [m_Counter + Y].BtnTex.Height;  			Vector2 TexturePosition = new Vector2 (X * (HeadTileSize.X + 10)' Y * (HeadTileSize.Y));  			Vector2 ButtonPosition = new Vector2 (TexturePosition.X - 2' TexturePosition.Y - 5);  			//NOTE: Must be drawn at Depth - 0.1f because of alpha issues with thumbs.  			SBatch.Draw (m_SkinBtns [Y + m_Counter].BtnTex' new Rectangle ((int)(Position.X + ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)' new Rectangle ((int)m_SkinBtns [m_Counter + Y].SourcePosition.X' (int)m_SkinBtns [m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);  			SBatch.Draw (m_Thumb' new Rectangle ((int)(Position.X + TexturePosition.X)' (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)' null' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth);  			if (m_Counter < m_NumberOfSkinsToDisplay)  				m_Counter++;  		}  	}  	break;  case Elements.SkinType.Dark:  	for (int X = 0; X <= m_Map.GetUpperBound (1); X++) {  		for (int Y = 0; Y <= m_Map.GetUpperBound (0); Y++) {  			m_Thumb = FileManager.GetTexture (m_Sex == AvatarSex.Male ? m_DarkAppearances [(Y * X) + m_Counter].DarkAppearance.ThumbnailID.UniqueID : m_DarkFemaleAppearances [(Y * X) + m_Counter].DarkAppearance.ThumbnailID.UniqueID);  			m_BtnWidth = m_SkinBtns [m_Counter + Y].BtnTex.Width / 4;  			m_BtnHeight = m_SkinBtns [m_Counter + Y].BtnTex.Height;  			Vector2 TexturePosition = new Vector2 (X * (HeadTileSize.X + 10)' Y * (HeadTileSize.Y));  			Vector2 ButtonPosition = new Vector2 (TexturePosition.X - 2' TexturePosition.Y - 5);  			//NOTE: Must be drawn at Depth - 0.1f because of alpha issues with thumbs.  			SBatch.Draw (m_SkinBtns [Y + m_Counter].BtnTex' new Rectangle ((int)(Position.X + ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)' new Rectangle ((int)m_SkinBtns [m_Counter + Y].SourcePosition.X' (int)m_SkinBtns [m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);  			SBatch.Draw (m_Thumb' new Rectangle ((int)(Position.X + TexturePosition.X)' (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)' null' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth);  			if (m_Counter < m_NumberOfSkinsToDisplay)  				m_Counter++;  		}  	}  	break;  }  
Magic Number,Gonzo.Elements,UIHeadBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIHeadBrowser.cs,Draw,The following statement contains a magic number: switch (m_SelectedSkintype) {  case Elements.SkinType.Light:  	for (int X = 0; X <= m_Map.GetUpperBound (1); X++) {  		for (int Y = 0; Y <= m_Map.GetUpperBound (0); Y++) {  			m_Thumb = FileManager.GetTexture (m_Sex == AvatarSex.Male ? m_LightAppearances [(Y * X) + m_Counter].LightAppearance.ThumbnailID.UniqueID : m_LightFemaleAppearances [(Y * X) + m_Counter].LightAppearance.ThumbnailID.UniqueID);  			m_BtnWidth = m_SkinBtns [m_Counter + Y].BtnTex.Width / 4;  			m_BtnHeight = m_SkinBtns [m_Counter + Y].BtnTex.Height;  			Vector2 TexturePosition = new Vector2 (X * (HeadTileSize.X + 10)' Y * (HeadTileSize.Y));  			Vector2 ButtonPosition = new Vector2 (TexturePosition.X - 2' TexturePosition.Y - 5);  			//NOTE: Must be drawn at Depth - 0.1f because of alpha issues with thumbs.  			SBatch.Draw (m_SkinBtns [Y + m_Counter].BtnTex' new Rectangle ((int)(Position.X + ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)' new Rectangle ((int)m_SkinBtns [m_Counter + Y].SourcePosition.X' (int)m_SkinBtns [m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);  			SBatch.Draw (m_Thumb' new Rectangle ((int)(Position.X + TexturePosition.X)' (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)' null' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth);  			if (m_Counter < m_NumberOfSkinsToDisplay)  				m_Counter++;  		}  	}  	break;  case Elements.SkinType.Medium:  	for (int X = 0; X <= m_Map.GetUpperBound (1); X++) {  		for (int Y = 0; Y <= m_Map.GetUpperBound (0); Y++) {  			m_Thumb = FileManager.GetTexture (m_Sex == AvatarSex.Male ? m_MediumAppearances [(Y * X) + m_Counter].MediumAppearance.ThumbnailID.UniqueID : m_MediumFemaleAppearances [(Y * X) + m_Counter].MediumAppearance.ThumbnailID.UniqueID);  			m_BtnWidth = m_SkinBtns [m_Counter + Y].BtnTex.Width / 4;  			m_BtnHeight = m_SkinBtns [m_Counter + Y].BtnTex.Height;  			Vector2 TexturePosition = new Vector2 (X * (HeadTileSize.X + 10)' Y * (HeadTileSize.Y));  			Vector2 ButtonPosition = new Vector2 (TexturePosition.X - 2' TexturePosition.Y - 5);  			//NOTE: Must be drawn at Depth - 0.1f because of alpha issues with thumbs.  			SBatch.Draw (m_SkinBtns [Y + m_Counter].BtnTex' new Rectangle ((int)(Position.X + ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)' new Rectangle ((int)m_SkinBtns [m_Counter + Y].SourcePosition.X' (int)m_SkinBtns [m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);  			SBatch.Draw (m_Thumb' new Rectangle ((int)(Position.X + TexturePosition.X)' (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)' null' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth);  			if (m_Counter < m_NumberOfSkinsToDisplay)  				m_Counter++;  		}  	}  	break;  case Elements.SkinType.Dark:  	for (int X = 0; X <= m_Map.GetUpperBound (1); X++) {  		for (int Y = 0; Y <= m_Map.GetUpperBound (0); Y++) {  			m_Thumb = FileManager.GetTexture (m_Sex == AvatarSex.Male ? m_DarkAppearances [(Y * X) + m_Counter].DarkAppearance.ThumbnailID.UniqueID : m_DarkFemaleAppearances [(Y * X) + m_Counter].DarkAppearance.ThumbnailID.UniqueID);  			m_BtnWidth = m_SkinBtns [m_Counter + Y].BtnTex.Width / 4;  			m_BtnHeight = m_SkinBtns [m_Counter + Y].BtnTex.Height;  			Vector2 TexturePosition = new Vector2 (X * (HeadTileSize.X + 10)' Y * (HeadTileSize.Y));  			Vector2 ButtonPosition = new Vector2 (TexturePosition.X - 2' TexturePosition.Y - 5);  			//NOTE: Must be drawn at Depth - 0.1f because of alpha issues with thumbs.  			SBatch.Draw (m_SkinBtns [Y + m_Counter].BtnTex' new Rectangle ((int)(Position.X + ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)' new Rectangle ((int)m_SkinBtns [m_Counter + Y].SourcePosition.X' (int)m_SkinBtns [m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);  			SBatch.Draw (m_Thumb' new Rectangle ((int)(Position.X + TexturePosition.X)' (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)' null' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth);  			if (m_Counter < m_NumberOfSkinsToDisplay)  				m_Counter++;  		}  	}  	break;  }  
Magic Number,Gonzo.Elements,UIHeadBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIHeadBrowser.cs,Draw,The following statement contains a magic number: switch (m_SelectedSkintype) {  case Elements.SkinType.Light:  	for (int X = 0; X <= m_Map.GetUpperBound (1); X++) {  		for (int Y = 0; Y <= m_Map.GetUpperBound (0); Y++) {  			m_Thumb = FileManager.GetTexture (m_Sex == AvatarSex.Male ? m_LightAppearances [(Y * X) + m_Counter].LightAppearance.ThumbnailID.UniqueID : m_LightFemaleAppearances [(Y * X) + m_Counter].LightAppearance.ThumbnailID.UniqueID);  			m_BtnWidth = m_SkinBtns [m_Counter + Y].BtnTex.Width / 4;  			m_BtnHeight = m_SkinBtns [m_Counter + Y].BtnTex.Height;  			Vector2 TexturePosition = new Vector2 (X * (HeadTileSize.X + 10)' Y * (HeadTileSize.Y));  			Vector2 ButtonPosition = new Vector2 (TexturePosition.X - 2' TexturePosition.Y - 5);  			//NOTE: Must be drawn at Depth - 0.1f because of alpha issues with thumbs.  			SBatch.Draw (m_SkinBtns [Y + m_Counter].BtnTex' new Rectangle ((int)(Position.X + ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)' new Rectangle ((int)m_SkinBtns [m_Counter + Y].SourcePosition.X' (int)m_SkinBtns [m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);  			SBatch.Draw (m_Thumb' new Rectangle ((int)(Position.X + TexturePosition.X)' (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)' null' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth);  			if (m_Counter < m_NumberOfSkinsToDisplay)  				m_Counter++;  		}  	}  	break;  case Elements.SkinType.Medium:  	for (int X = 0; X <= m_Map.GetUpperBound (1); X++) {  		for (int Y = 0; Y <= m_Map.GetUpperBound (0); Y++) {  			m_Thumb = FileManager.GetTexture (m_Sex == AvatarSex.Male ? m_MediumAppearances [(Y * X) + m_Counter].MediumAppearance.ThumbnailID.UniqueID : m_MediumFemaleAppearances [(Y * X) + m_Counter].MediumAppearance.ThumbnailID.UniqueID);  			m_BtnWidth = m_SkinBtns [m_Counter + Y].BtnTex.Width / 4;  			m_BtnHeight = m_SkinBtns [m_Counter + Y].BtnTex.Height;  			Vector2 TexturePosition = new Vector2 (X * (HeadTileSize.X + 10)' Y * (HeadTileSize.Y));  			Vector2 ButtonPosition = new Vector2 (TexturePosition.X - 2' TexturePosition.Y - 5);  			//NOTE: Must be drawn at Depth - 0.1f because of alpha issues with thumbs.  			SBatch.Draw (m_SkinBtns [Y + m_Counter].BtnTex' new Rectangle ((int)(Position.X + ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)' new Rectangle ((int)m_SkinBtns [m_Counter + Y].SourcePosition.X' (int)m_SkinBtns [m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);  			SBatch.Draw (m_Thumb' new Rectangle ((int)(Position.X + TexturePosition.X)' (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)' null' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth);  			if (m_Counter < m_NumberOfSkinsToDisplay)  				m_Counter++;  		}  	}  	break;  case Elements.SkinType.Dark:  	for (int X = 0; X <= m_Map.GetUpperBound (1); X++) {  		for (int Y = 0; Y <= m_Map.GetUpperBound (0); Y++) {  			m_Thumb = FileManager.GetTexture (m_Sex == AvatarSex.Male ? m_DarkAppearances [(Y * X) + m_Counter].DarkAppearance.ThumbnailID.UniqueID : m_DarkFemaleAppearances [(Y * X) + m_Counter].DarkAppearance.ThumbnailID.UniqueID);  			m_BtnWidth = m_SkinBtns [m_Counter + Y].BtnTex.Width / 4;  			m_BtnHeight = m_SkinBtns [m_Counter + Y].BtnTex.Height;  			Vector2 TexturePosition = new Vector2 (X * (HeadTileSize.X + 10)' Y * (HeadTileSize.Y));  			Vector2 ButtonPosition = new Vector2 (TexturePosition.X - 2' TexturePosition.Y - 5);  			//NOTE: Must be drawn at Depth - 0.1f because of alpha issues with thumbs.  			SBatch.Draw (m_SkinBtns [Y + m_Counter].BtnTex' new Rectangle ((int)(Position.X + ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)' new Rectangle ((int)m_SkinBtns [m_Counter + Y].SourcePosition.X' (int)m_SkinBtns [m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);  			SBatch.Draw (m_Thumb' new Rectangle ((int)(Position.X + TexturePosition.X)' (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)' null' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth);  			if (m_Counter < m_NumberOfSkinsToDisplay)  				m_Counter++;  		}  	}  	break;  }  
Magic Number,Gonzo.Elements,UIHeadBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIHeadBrowser.cs,Draw,The following statement contains a magic number: switch (m_SelectedSkintype) {  case Elements.SkinType.Light:  	for (int X = 0; X <= m_Map.GetUpperBound (1); X++) {  		for (int Y = 0; Y <= m_Map.GetUpperBound (0); Y++) {  			m_Thumb = FileManager.GetTexture (m_Sex == AvatarSex.Male ? m_LightAppearances [(Y * X) + m_Counter].LightAppearance.ThumbnailID.UniqueID : m_LightFemaleAppearances [(Y * X) + m_Counter].LightAppearance.ThumbnailID.UniqueID);  			m_BtnWidth = m_SkinBtns [m_Counter + Y].BtnTex.Width / 4;  			m_BtnHeight = m_SkinBtns [m_Counter + Y].BtnTex.Height;  			Vector2 TexturePosition = new Vector2 (X * (HeadTileSize.X + 10)' Y * (HeadTileSize.Y));  			Vector2 ButtonPosition = new Vector2 (TexturePosition.X - 2' TexturePosition.Y - 5);  			//NOTE: Must be drawn at Depth - 0.1f because of alpha issues with thumbs.  			SBatch.Draw (m_SkinBtns [Y + m_Counter].BtnTex' new Rectangle ((int)(Position.X + ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)' new Rectangle ((int)m_SkinBtns [m_Counter + Y].SourcePosition.X' (int)m_SkinBtns [m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);  			SBatch.Draw (m_Thumb' new Rectangle ((int)(Position.X + TexturePosition.X)' (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)' null' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth);  			if (m_Counter < m_NumberOfSkinsToDisplay)  				m_Counter++;  		}  	}  	break;  case Elements.SkinType.Medium:  	for (int X = 0; X <= m_Map.GetUpperBound (1); X++) {  		for (int Y = 0; Y <= m_Map.GetUpperBound (0); Y++) {  			m_Thumb = FileManager.GetTexture (m_Sex == AvatarSex.Male ? m_MediumAppearances [(Y * X) + m_Counter].MediumAppearance.ThumbnailID.UniqueID : m_MediumFemaleAppearances [(Y * X) + m_Counter].MediumAppearance.ThumbnailID.UniqueID);  			m_BtnWidth = m_SkinBtns [m_Counter + Y].BtnTex.Width / 4;  			m_BtnHeight = m_SkinBtns [m_Counter + Y].BtnTex.Height;  			Vector2 TexturePosition = new Vector2 (X * (HeadTileSize.X + 10)' Y * (HeadTileSize.Y));  			Vector2 ButtonPosition = new Vector2 (TexturePosition.X - 2' TexturePosition.Y - 5);  			//NOTE: Must be drawn at Depth - 0.1f because of alpha issues with thumbs.  			SBatch.Draw (m_SkinBtns [Y + m_Counter].BtnTex' new Rectangle ((int)(Position.X + ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)' new Rectangle ((int)m_SkinBtns [m_Counter + Y].SourcePosition.X' (int)m_SkinBtns [m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);  			SBatch.Draw (m_Thumb' new Rectangle ((int)(Position.X + TexturePosition.X)' (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)' null' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth);  			if (m_Counter < m_NumberOfSkinsToDisplay)  				m_Counter++;  		}  	}  	break;  case Elements.SkinType.Dark:  	for (int X = 0; X <= m_Map.GetUpperBound (1); X++) {  		for (int Y = 0; Y <= m_Map.GetUpperBound (0); Y++) {  			m_Thumb = FileManager.GetTexture (m_Sex == AvatarSex.Male ? m_DarkAppearances [(Y * X) + m_Counter].DarkAppearance.ThumbnailID.UniqueID : m_DarkFemaleAppearances [(Y * X) + m_Counter].DarkAppearance.ThumbnailID.UniqueID);  			m_BtnWidth = m_SkinBtns [m_Counter + Y].BtnTex.Width / 4;  			m_BtnHeight = m_SkinBtns [m_Counter + Y].BtnTex.Height;  			Vector2 TexturePosition = new Vector2 (X * (HeadTileSize.X + 10)' Y * (HeadTileSize.Y));  			Vector2 ButtonPosition = new Vector2 (TexturePosition.X - 2' TexturePosition.Y - 5);  			//NOTE: Must be drawn at Depth - 0.1f because of alpha issues with thumbs.  			SBatch.Draw (m_SkinBtns [Y + m_Counter].BtnTex' new Rectangle ((int)(Position.X + ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)' new Rectangle ((int)m_SkinBtns [m_Counter + Y].SourcePosition.X' (int)m_SkinBtns [m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);  			SBatch.Draw (m_Thumb' new Rectangle ((int)(Position.X + TexturePosition.X)' (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)' null' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth);  			if (m_Counter < m_NumberOfSkinsToDisplay)  				m_Counter++;  		}  	}  	break;  }  
Magic Number,Gonzo.Elements,UIHeadBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIHeadBrowser.cs,Draw,The following statement contains a magic number: switch (m_SelectedSkintype) {  case Elements.SkinType.Light:  	for (int X = 0; X <= m_Map.GetUpperBound (1); X++) {  		for (int Y = 0; Y <= m_Map.GetUpperBound (0); Y++) {  			m_Thumb = FileManager.GetTexture (m_Sex == AvatarSex.Male ? m_LightAppearances [(Y * X) + m_Counter].LightAppearance.ThumbnailID.UniqueID : m_LightFemaleAppearances [(Y * X) + m_Counter].LightAppearance.ThumbnailID.UniqueID);  			m_BtnWidth = m_SkinBtns [m_Counter + Y].BtnTex.Width / 4;  			m_BtnHeight = m_SkinBtns [m_Counter + Y].BtnTex.Height;  			Vector2 TexturePosition = new Vector2 (X * (HeadTileSize.X + 10)' Y * (HeadTileSize.Y));  			Vector2 ButtonPosition = new Vector2 (TexturePosition.X - 2' TexturePosition.Y - 5);  			//NOTE: Must be drawn at Depth - 0.1f because of alpha issues with thumbs.  			SBatch.Draw (m_SkinBtns [Y + m_Counter].BtnTex' new Rectangle ((int)(Position.X + ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)' new Rectangle ((int)m_SkinBtns [m_Counter + Y].SourcePosition.X' (int)m_SkinBtns [m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);  			SBatch.Draw (m_Thumb' new Rectangle ((int)(Position.X + TexturePosition.X)' (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)' null' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth);  			if (m_Counter < m_NumberOfSkinsToDisplay)  				m_Counter++;  		}  	}  	break;  case Elements.SkinType.Medium:  	for (int X = 0; X <= m_Map.GetUpperBound (1); X++) {  		for (int Y = 0; Y <= m_Map.GetUpperBound (0); Y++) {  			m_Thumb = FileManager.GetTexture (m_Sex == AvatarSex.Male ? m_MediumAppearances [(Y * X) + m_Counter].MediumAppearance.ThumbnailID.UniqueID : m_MediumFemaleAppearances [(Y * X) + m_Counter].MediumAppearance.ThumbnailID.UniqueID);  			m_BtnWidth = m_SkinBtns [m_Counter + Y].BtnTex.Width / 4;  			m_BtnHeight = m_SkinBtns [m_Counter + Y].BtnTex.Height;  			Vector2 TexturePosition = new Vector2 (X * (HeadTileSize.X + 10)' Y * (HeadTileSize.Y));  			Vector2 ButtonPosition = new Vector2 (TexturePosition.X - 2' TexturePosition.Y - 5);  			//NOTE: Must be drawn at Depth - 0.1f because of alpha issues with thumbs.  			SBatch.Draw (m_SkinBtns [Y + m_Counter].BtnTex' new Rectangle ((int)(Position.X + ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)' new Rectangle ((int)m_SkinBtns [m_Counter + Y].SourcePosition.X' (int)m_SkinBtns [m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);  			SBatch.Draw (m_Thumb' new Rectangle ((int)(Position.X + TexturePosition.X)' (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)' null' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth);  			if (m_Counter < m_NumberOfSkinsToDisplay)  				m_Counter++;  		}  	}  	break;  case Elements.SkinType.Dark:  	for (int X = 0; X <= m_Map.GetUpperBound (1); X++) {  		for (int Y = 0; Y <= m_Map.GetUpperBound (0); Y++) {  			m_Thumb = FileManager.GetTexture (m_Sex == AvatarSex.Male ? m_DarkAppearances [(Y * X) + m_Counter].DarkAppearance.ThumbnailID.UniqueID : m_DarkFemaleAppearances [(Y * X) + m_Counter].DarkAppearance.ThumbnailID.UniqueID);  			m_BtnWidth = m_SkinBtns [m_Counter + Y].BtnTex.Width / 4;  			m_BtnHeight = m_SkinBtns [m_Counter + Y].BtnTex.Height;  			Vector2 TexturePosition = new Vector2 (X * (HeadTileSize.X + 10)' Y * (HeadTileSize.Y));  			Vector2 ButtonPosition = new Vector2 (TexturePosition.X - 2' TexturePosition.Y - 5);  			//NOTE: Must be drawn at Depth - 0.1f because of alpha issues with thumbs.  			SBatch.Draw (m_SkinBtns [Y + m_Counter].BtnTex' new Rectangle ((int)(Position.X + ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)' new Rectangle ((int)m_SkinBtns [m_Counter + Y].SourcePosition.X' (int)m_SkinBtns [m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);  			SBatch.Draw (m_Thumb' new Rectangle ((int)(Position.X + TexturePosition.X)' (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)' null' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth);  			if (m_Counter < m_NumberOfSkinsToDisplay)  				m_Counter++;  		}  	}  	break;  }  
Magic Number,Gonzo.Elements,UIHeadBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIHeadBrowser.cs,Draw,The following statement contains a magic number: switch (m_SelectedSkintype) {  case Elements.SkinType.Light:  	for (int X = 0; X <= m_Map.GetUpperBound (1); X++) {  		for (int Y = 0; Y <= m_Map.GetUpperBound (0); Y++) {  			m_Thumb = FileManager.GetTexture (m_Sex == AvatarSex.Male ? m_LightAppearances [(Y * X) + m_Counter].LightAppearance.ThumbnailID.UniqueID : m_LightFemaleAppearances [(Y * X) + m_Counter].LightAppearance.ThumbnailID.UniqueID);  			m_BtnWidth = m_SkinBtns [m_Counter + Y].BtnTex.Width / 4;  			m_BtnHeight = m_SkinBtns [m_Counter + Y].BtnTex.Height;  			Vector2 TexturePosition = new Vector2 (X * (HeadTileSize.X + 10)' Y * (HeadTileSize.Y));  			Vector2 ButtonPosition = new Vector2 (TexturePosition.X - 2' TexturePosition.Y - 5);  			//NOTE: Must be drawn at Depth - 0.1f because of alpha issues with thumbs.  			SBatch.Draw (m_SkinBtns [Y + m_Counter].BtnTex' new Rectangle ((int)(Position.X + ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)' new Rectangle ((int)m_SkinBtns [m_Counter + Y].SourcePosition.X' (int)m_SkinBtns [m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);  			SBatch.Draw (m_Thumb' new Rectangle ((int)(Position.X + TexturePosition.X)' (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)' null' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth);  			if (m_Counter < m_NumberOfSkinsToDisplay)  				m_Counter++;  		}  	}  	break;  case Elements.SkinType.Medium:  	for (int X = 0; X <= m_Map.GetUpperBound (1); X++) {  		for (int Y = 0; Y <= m_Map.GetUpperBound (0); Y++) {  			m_Thumb = FileManager.GetTexture (m_Sex == AvatarSex.Male ? m_MediumAppearances [(Y * X) + m_Counter].MediumAppearance.ThumbnailID.UniqueID : m_MediumFemaleAppearances [(Y * X) + m_Counter].MediumAppearance.ThumbnailID.UniqueID);  			m_BtnWidth = m_SkinBtns [m_Counter + Y].BtnTex.Width / 4;  			m_BtnHeight = m_SkinBtns [m_Counter + Y].BtnTex.Height;  			Vector2 TexturePosition = new Vector2 (X * (HeadTileSize.X + 10)' Y * (HeadTileSize.Y));  			Vector2 ButtonPosition = new Vector2 (TexturePosition.X - 2' TexturePosition.Y - 5);  			//NOTE: Must be drawn at Depth - 0.1f because of alpha issues with thumbs.  			SBatch.Draw (m_SkinBtns [Y + m_Counter].BtnTex' new Rectangle ((int)(Position.X + ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)' new Rectangle ((int)m_SkinBtns [m_Counter + Y].SourcePosition.X' (int)m_SkinBtns [m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);  			SBatch.Draw (m_Thumb' new Rectangle ((int)(Position.X + TexturePosition.X)' (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)' null' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth);  			if (m_Counter < m_NumberOfSkinsToDisplay)  				m_Counter++;  		}  	}  	break;  case Elements.SkinType.Dark:  	for (int X = 0; X <= m_Map.GetUpperBound (1); X++) {  		for (int Y = 0; Y <= m_Map.GetUpperBound (0); Y++) {  			m_Thumb = FileManager.GetTexture (m_Sex == AvatarSex.Male ? m_DarkAppearances [(Y * X) + m_Counter].DarkAppearance.ThumbnailID.UniqueID : m_DarkFemaleAppearances [(Y * X) + m_Counter].DarkAppearance.ThumbnailID.UniqueID);  			m_BtnWidth = m_SkinBtns [m_Counter + Y].BtnTex.Width / 4;  			m_BtnHeight = m_SkinBtns [m_Counter + Y].BtnTex.Height;  			Vector2 TexturePosition = new Vector2 (X * (HeadTileSize.X + 10)' Y * (HeadTileSize.Y));  			Vector2 ButtonPosition = new Vector2 (TexturePosition.X - 2' TexturePosition.Y - 5);  			//NOTE: Must be drawn at Depth - 0.1f because of alpha issues with thumbs.  			SBatch.Draw (m_SkinBtns [Y + m_Counter].BtnTex' new Rectangle ((int)(Position.X + ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)' new Rectangle ((int)m_SkinBtns [m_Counter + Y].SourcePosition.X' (int)m_SkinBtns [m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);  			SBatch.Draw (m_Thumb' new Rectangle ((int)(Position.X + TexturePosition.X)' (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)' null' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth);  			if (m_Counter < m_NumberOfSkinsToDisplay)  				m_Counter++;  		}  	}  	break;  }  
Magic Number,Gonzo.Elements,UIHeadBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIHeadBrowser.cs,Draw,The following statement contains a magic number: switch (m_SelectedSkintype) {  case Elements.SkinType.Light:  	for (int X = 0; X <= m_Map.GetUpperBound (1); X++) {  		for (int Y = 0; Y <= m_Map.GetUpperBound (0); Y++) {  			m_Thumb = FileManager.GetTexture (m_Sex == AvatarSex.Male ? m_LightAppearances [(Y * X) + m_Counter].LightAppearance.ThumbnailID.UniqueID : m_LightFemaleAppearances [(Y * X) + m_Counter].LightAppearance.ThumbnailID.UniqueID);  			m_BtnWidth = m_SkinBtns [m_Counter + Y].BtnTex.Width / 4;  			m_BtnHeight = m_SkinBtns [m_Counter + Y].BtnTex.Height;  			Vector2 TexturePosition = new Vector2 (X * (HeadTileSize.X + 10)' Y * (HeadTileSize.Y));  			Vector2 ButtonPosition = new Vector2 (TexturePosition.X - 2' TexturePosition.Y - 5);  			//NOTE: Must be drawn at Depth - 0.1f because of alpha issues with thumbs.  			SBatch.Draw (m_SkinBtns [Y + m_Counter].BtnTex' new Rectangle ((int)(Position.X + ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)' new Rectangle ((int)m_SkinBtns [m_Counter + Y].SourcePosition.X' (int)m_SkinBtns [m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);  			SBatch.Draw (m_Thumb' new Rectangle ((int)(Position.X + TexturePosition.X)' (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)' null' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth);  			if (m_Counter < m_NumberOfSkinsToDisplay)  				m_Counter++;  		}  	}  	break;  case Elements.SkinType.Medium:  	for (int X = 0; X <= m_Map.GetUpperBound (1); X++) {  		for (int Y = 0; Y <= m_Map.GetUpperBound (0); Y++) {  			m_Thumb = FileManager.GetTexture (m_Sex == AvatarSex.Male ? m_MediumAppearances [(Y * X) + m_Counter].MediumAppearance.ThumbnailID.UniqueID : m_MediumFemaleAppearances [(Y * X) + m_Counter].MediumAppearance.ThumbnailID.UniqueID);  			m_BtnWidth = m_SkinBtns [m_Counter + Y].BtnTex.Width / 4;  			m_BtnHeight = m_SkinBtns [m_Counter + Y].BtnTex.Height;  			Vector2 TexturePosition = new Vector2 (X * (HeadTileSize.X + 10)' Y * (HeadTileSize.Y));  			Vector2 ButtonPosition = new Vector2 (TexturePosition.X - 2' TexturePosition.Y - 5);  			//NOTE: Must be drawn at Depth - 0.1f because of alpha issues with thumbs.  			SBatch.Draw (m_SkinBtns [Y + m_Counter].BtnTex' new Rectangle ((int)(Position.X + ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)' new Rectangle ((int)m_SkinBtns [m_Counter + Y].SourcePosition.X' (int)m_SkinBtns [m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);  			SBatch.Draw (m_Thumb' new Rectangle ((int)(Position.X + TexturePosition.X)' (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)' null' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth);  			if (m_Counter < m_NumberOfSkinsToDisplay)  				m_Counter++;  		}  	}  	break;  case Elements.SkinType.Dark:  	for (int X = 0; X <= m_Map.GetUpperBound (1); X++) {  		for (int Y = 0; Y <= m_Map.GetUpperBound (0); Y++) {  			m_Thumb = FileManager.GetTexture (m_Sex == AvatarSex.Male ? m_DarkAppearances [(Y * X) + m_Counter].DarkAppearance.ThumbnailID.UniqueID : m_DarkFemaleAppearances [(Y * X) + m_Counter].DarkAppearance.ThumbnailID.UniqueID);  			m_BtnWidth = m_SkinBtns [m_Counter + Y].BtnTex.Width / 4;  			m_BtnHeight = m_SkinBtns [m_Counter + Y].BtnTex.Height;  			Vector2 TexturePosition = new Vector2 (X * (HeadTileSize.X + 10)' Y * (HeadTileSize.Y));  			Vector2 ButtonPosition = new Vector2 (TexturePosition.X - 2' TexturePosition.Y - 5);  			//NOTE: Must be drawn at Depth - 0.1f because of alpha issues with thumbs.  			SBatch.Draw (m_SkinBtns [Y + m_Counter].BtnTex' new Rectangle ((int)(Position.X + ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)' new Rectangle ((int)m_SkinBtns [m_Counter + Y].SourcePosition.X' (int)m_SkinBtns [m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);  			SBatch.Draw (m_Thumb' new Rectangle ((int)(Position.X + TexturePosition.X)' (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)' null' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth);  			if (m_Counter < m_NumberOfSkinsToDisplay)  				m_Counter++;  		}  	}  	break;  }  
Magic Number,Gonzo.Elements,UIHeadBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIHeadBrowser.cs,Draw,The following statement contains a magic number: switch (m_SelectedSkintype) {  case Elements.SkinType.Light:  	for (int X = 0; X <= m_Map.GetUpperBound (1); X++) {  		for (int Y = 0; Y <= m_Map.GetUpperBound (0); Y++) {  			m_Thumb = FileManager.GetTexture (m_Sex == AvatarSex.Male ? m_LightAppearances [(Y * X) + m_Counter].LightAppearance.ThumbnailID.UniqueID : m_LightFemaleAppearances [(Y * X) + m_Counter].LightAppearance.ThumbnailID.UniqueID);  			m_BtnWidth = m_SkinBtns [m_Counter + Y].BtnTex.Width / 4;  			m_BtnHeight = m_SkinBtns [m_Counter + Y].BtnTex.Height;  			Vector2 TexturePosition = new Vector2 (X * (HeadTileSize.X + 10)' Y * (HeadTileSize.Y));  			Vector2 ButtonPosition = new Vector2 (TexturePosition.X - 2' TexturePosition.Y - 5);  			//NOTE: Must be drawn at Depth - 0.1f because of alpha issues with thumbs.  			SBatch.Draw (m_SkinBtns [Y + m_Counter].BtnTex' new Rectangle ((int)(Position.X + ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)' new Rectangle ((int)m_SkinBtns [m_Counter + Y].SourcePosition.X' (int)m_SkinBtns [m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);  			SBatch.Draw (m_Thumb' new Rectangle ((int)(Position.X + TexturePosition.X)' (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)' null' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth);  			if (m_Counter < m_NumberOfSkinsToDisplay)  				m_Counter++;  		}  	}  	break;  case Elements.SkinType.Medium:  	for (int X = 0; X <= m_Map.GetUpperBound (1); X++) {  		for (int Y = 0; Y <= m_Map.GetUpperBound (0); Y++) {  			m_Thumb = FileManager.GetTexture (m_Sex == AvatarSex.Male ? m_MediumAppearances [(Y * X) + m_Counter].MediumAppearance.ThumbnailID.UniqueID : m_MediumFemaleAppearances [(Y * X) + m_Counter].MediumAppearance.ThumbnailID.UniqueID);  			m_BtnWidth = m_SkinBtns [m_Counter + Y].BtnTex.Width / 4;  			m_BtnHeight = m_SkinBtns [m_Counter + Y].BtnTex.Height;  			Vector2 TexturePosition = new Vector2 (X * (HeadTileSize.X + 10)' Y * (HeadTileSize.Y));  			Vector2 ButtonPosition = new Vector2 (TexturePosition.X - 2' TexturePosition.Y - 5);  			//NOTE: Must be drawn at Depth - 0.1f because of alpha issues with thumbs.  			SBatch.Draw (m_SkinBtns [Y + m_Counter].BtnTex' new Rectangle ((int)(Position.X + ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)' new Rectangle ((int)m_SkinBtns [m_Counter + Y].SourcePosition.X' (int)m_SkinBtns [m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);  			SBatch.Draw (m_Thumb' new Rectangle ((int)(Position.X + TexturePosition.X)' (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)' null' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth);  			if (m_Counter < m_NumberOfSkinsToDisplay)  				m_Counter++;  		}  	}  	break;  case Elements.SkinType.Dark:  	for (int X = 0; X <= m_Map.GetUpperBound (1); X++) {  		for (int Y = 0; Y <= m_Map.GetUpperBound (0); Y++) {  			m_Thumb = FileManager.GetTexture (m_Sex == AvatarSex.Male ? m_DarkAppearances [(Y * X) + m_Counter].DarkAppearance.ThumbnailID.UniqueID : m_DarkFemaleAppearances [(Y * X) + m_Counter].DarkAppearance.ThumbnailID.UniqueID);  			m_BtnWidth = m_SkinBtns [m_Counter + Y].BtnTex.Width / 4;  			m_BtnHeight = m_SkinBtns [m_Counter + Y].BtnTex.Height;  			Vector2 TexturePosition = new Vector2 (X * (HeadTileSize.X + 10)' Y * (HeadTileSize.Y));  			Vector2 ButtonPosition = new Vector2 (TexturePosition.X - 2' TexturePosition.Y - 5);  			//NOTE: Must be drawn at Depth - 0.1f because of alpha issues with thumbs.  			SBatch.Draw (m_SkinBtns [Y + m_Counter].BtnTex' new Rectangle ((int)(Position.X + ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)' new Rectangle ((int)m_SkinBtns [m_Counter + Y].SourcePosition.X' (int)m_SkinBtns [m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);  			SBatch.Draw (m_Thumb' new Rectangle ((int)(Position.X + TexturePosition.X)' (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)' null' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth);  			if (m_Counter < m_NumberOfSkinsToDisplay)  				m_Counter++;  		}  	}  	break;  }  
Magic Number,Gonzo.Elements,UIHeadBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIHeadBrowser.cs,Draw,The following statement contains a magic number: switch (m_SelectedSkintype) {  case Elements.SkinType.Light:  	for (int X = 0; X <= m_Map.GetUpperBound (1); X++) {  		for (int Y = 0; Y <= m_Map.GetUpperBound (0); Y++) {  			m_Thumb = FileManager.GetTexture (m_Sex == AvatarSex.Male ? m_LightAppearances [(Y * X) + m_Counter].LightAppearance.ThumbnailID.UniqueID : m_LightFemaleAppearances [(Y * X) + m_Counter].LightAppearance.ThumbnailID.UniqueID);  			m_BtnWidth = m_SkinBtns [m_Counter + Y].BtnTex.Width / 4;  			m_BtnHeight = m_SkinBtns [m_Counter + Y].BtnTex.Height;  			Vector2 TexturePosition = new Vector2 (X * (HeadTileSize.X + 10)' Y * (HeadTileSize.Y));  			Vector2 ButtonPosition = new Vector2 (TexturePosition.X - 2' TexturePosition.Y - 5);  			//NOTE: Must be drawn at Depth - 0.1f because of alpha issues with thumbs.  			SBatch.Draw (m_SkinBtns [Y + m_Counter].BtnTex' new Rectangle ((int)(Position.X + ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)' new Rectangle ((int)m_SkinBtns [m_Counter + Y].SourcePosition.X' (int)m_SkinBtns [m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);  			SBatch.Draw (m_Thumb' new Rectangle ((int)(Position.X + TexturePosition.X)' (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)' null' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth);  			if (m_Counter < m_NumberOfSkinsToDisplay)  				m_Counter++;  		}  	}  	break;  case Elements.SkinType.Medium:  	for (int X = 0; X <= m_Map.GetUpperBound (1); X++) {  		for (int Y = 0; Y <= m_Map.GetUpperBound (0); Y++) {  			m_Thumb = FileManager.GetTexture (m_Sex == AvatarSex.Male ? m_MediumAppearances [(Y * X) + m_Counter].MediumAppearance.ThumbnailID.UniqueID : m_MediumFemaleAppearances [(Y * X) + m_Counter].MediumAppearance.ThumbnailID.UniqueID);  			m_BtnWidth = m_SkinBtns [m_Counter + Y].BtnTex.Width / 4;  			m_BtnHeight = m_SkinBtns [m_Counter + Y].BtnTex.Height;  			Vector2 TexturePosition = new Vector2 (X * (HeadTileSize.X + 10)' Y * (HeadTileSize.Y));  			Vector2 ButtonPosition = new Vector2 (TexturePosition.X - 2' TexturePosition.Y - 5);  			//NOTE: Must be drawn at Depth - 0.1f because of alpha issues with thumbs.  			SBatch.Draw (m_SkinBtns [Y + m_Counter].BtnTex' new Rectangle ((int)(Position.X + ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)' new Rectangle ((int)m_SkinBtns [m_Counter + Y].SourcePosition.X' (int)m_SkinBtns [m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);  			SBatch.Draw (m_Thumb' new Rectangle ((int)(Position.X + TexturePosition.X)' (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)' null' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth);  			if (m_Counter < m_NumberOfSkinsToDisplay)  				m_Counter++;  		}  	}  	break;  case Elements.SkinType.Dark:  	for (int X = 0; X <= m_Map.GetUpperBound (1); X++) {  		for (int Y = 0; Y <= m_Map.GetUpperBound (0); Y++) {  			m_Thumb = FileManager.GetTexture (m_Sex == AvatarSex.Male ? m_DarkAppearances [(Y * X) + m_Counter].DarkAppearance.ThumbnailID.UniqueID : m_DarkFemaleAppearances [(Y * X) + m_Counter].DarkAppearance.ThumbnailID.UniqueID);  			m_BtnWidth = m_SkinBtns [m_Counter + Y].BtnTex.Width / 4;  			m_BtnHeight = m_SkinBtns [m_Counter + Y].BtnTex.Height;  			Vector2 TexturePosition = new Vector2 (X * (HeadTileSize.X + 10)' Y * (HeadTileSize.Y));  			Vector2 ButtonPosition = new Vector2 (TexturePosition.X - 2' TexturePosition.Y - 5);  			//NOTE: Must be drawn at Depth - 0.1f because of alpha issues with thumbs.  			SBatch.Draw (m_SkinBtns [Y + m_Counter].BtnTex' new Rectangle ((int)(Position.X + ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)' new Rectangle ((int)m_SkinBtns [m_Counter + Y].SourcePosition.X' (int)m_SkinBtns [m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);  			SBatch.Draw (m_Thumb' new Rectangle ((int)(Position.X + TexturePosition.X)' (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)' null' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth);  			if (m_Counter < m_NumberOfSkinsToDisplay)  				m_Counter++;  		}  	}  	break;  }  
Magic Number,Gonzo.Elements,UIHeadBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIHeadBrowser.cs,Draw,The following statement contains a magic number: switch (m_SelectedSkintype) {  case Elements.SkinType.Light:  	for (int X = 0; X <= m_Map.GetUpperBound (1); X++) {  		for (int Y = 0; Y <= m_Map.GetUpperBound (0); Y++) {  			m_Thumb = FileManager.GetTexture (m_Sex == AvatarSex.Male ? m_LightAppearances [(Y * X) + m_Counter].LightAppearance.ThumbnailID.UniqueID : m_LightFemaleAppearances [(Y * X) + m_Counter].LightAppearance.ThumbnailID.UniqueID);  			m_BtnWidth = m_SkinBtns [m_Counter + Y].BtnTex.Width / 4;  			m_BtnHeight = m_SkinBtns [m_Counter + Y].BtnTex.Height;  			Vector2 TexturePosition = new Vector2 (X * (HeadTileSize.X + 10)' Y * (HeadTileSize.Y));  			Vector2 ButtonPosition = new Vector2 (TexturePosition.X - 2' TexturePosition.Y - 5);  			//NOTE: Must be drawn at Depth - 0.1f because of alpha issues with thumbs.  			SBatch.Draw (m_SkinBtns [Y + m_Counter].BtnTex' new Rectangle ((int)(Position.X + ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)' new Rectangle ((int)m_SkinBtns [m_Counter + Y].SourcePosition.X' (int)m_SkinBtns [m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);  			SBatch.Draw (m_Thumb' new Rectangle ((int)(Position.X + TexturePosition.X)' (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)' null' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth);  			if (m_Counter < m_NumberOfSkinsToDisplay)  				m_Counter++;  		}  	}  	break;  case Elements.SkinType.Medium:  	for (int X = 0; X <= m_Map.GetUpperBound (1); X++) {  		for (int Y = 0; Y <= m_Map.GetUpperBound (0); Y++) {  			m_Thumb = FileManager.GetTexture (m_Sex == AvatarSex.Male ? m_MediumAppearances [(Y * X) + m_Counter].MediumAppearance.ThumbnailID.UniqueID : m_MediumFemaleAppearances [(Y * X) + m_Counter].MediumAppearance.ThumbnailID.UniqueID);  			m_BtnWidth = m_SkinBtns [m_Counter + Y].BtnTex.Width / 4;  			m_BtnHeight = m_SkinBtns [m_Counter + Y].BtnTex.Height;  			Vector2 TexturePosition = new Vector2 (X * (HeadTileSize.X + 10)' Y * (HeadTileSize.Y));  			Vector2 ButtonPosition = new Vector2 (TexturePosition.X - 2' TexturePosition.Y - 5);  			//NOTE: Must be drawn at Depth - 0.1f because of alpha issues with thumbs.  			SBatch.Draw (m_SkinBtns [Y + m_Counter].BtnTex' new Rectangle ((int)(Position.X + ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)' new Rectangle ((int)m_SkinBtns [m_Counter + Y].SourcePosition.X' (int)m_SkinBtns [m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);  			SBatch.Draw (m_Thumb' new Rectangle ((int)(Position.X + TexturePosition.X)' (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)' null' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth);  			if (m_Counter < m_NumberOfSkinsToDisplay)  				m_Counter++;  		}  	}  	break;  case Elements.SkinType.Dark:  	for (int X = 0; X <= m_Map.GetUpperBound (1); X++) {  		for (int Y = 0; Y <= m_Map.GetUpperBound (0); Y++) {  			m_Thumb = FileManager.GetTexture (m_Sex == AvatarSex.Male ? m_DarkAppearances [(Y * X) + m_Counter].DarkAppearance.ThumbnailID.UniqueID : m_DarkFemaleAppearances [(Y * X) + m_Counter].DarkAppearance.ThumbnailID.UniqueID);  			m_BtnWidth = m_SkinBtns [m_Counter + Y].BtnTex.Width / 4;  			m_BtnHeight = m_SkinBtns [m_Counter + Y].BtnTex.Height;  			Vector2 TexturePosition = new Vector2 (X * (HeadTileSize.X + 10)' Y * (HeadTileSize.Y));  			Vector2 ButtonPosition = new Vector2 (TexturePosition.X - 2' TexturePosition.Y - 5);  			//NOTE: Must be drawn at Depth - 0.1f because of alpha issues with thumbs.  			SBatch.Draw (m_SkinBtns [Y + m_Counter].BtnTex' new Rectangle ((int)(Position.X + ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)' new Rectangle ((int)m_SkinBtns [m_Counter + Y].SourcePosition.X' (int)m_SkinBtns [m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);  			SBatch.Draw (m_Thumb' new Rectangle ((int)(Position.X + TexturePosition.X)' (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)' null' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth);  			if (m_Counter < m_NumberOfSkinsToDisplay)  				m_Counter++;  		}  	}  	break;  }  
Magic Number,Gonzo.Elements,UIHeadBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIHeadBrowser.cs,Draw,The following statement contains a magic number: switch (m_SelectedSkintype) {  case Elements.SkinType.Light:  	for (int X = 0; X <= m_Map.GetUpperBound (1); X++) {  		for (int Y = 0; Y <= m_Map.GetUpperBound (0); Y++) {  			m_Thumb = FileManager.GetTexture (m_Sex == AvatarSex.Male ? m_LightAppearances [(Y * X) + m_Counter].LightAppearance.ThumbnailID.UniqueID : m_LightFemaleAppearances [(Y * X) + m_Counter].LightAppearance.ThumbnailID.UniqueID);  			m_BtnWidth = m_SkinBtns [m_Counter + Y].BtnTex.Width / 4;  			m_BtnHeight = m_SkinBtns [m_Counter + Y].BtnTex.Height;  			Vector2 TexturePosition = new Vector2 (X * (HeadTileSize.X + 10)' Y * (HeadTileSize.Y));  			Vector2 ButtonPosition = new Vector2 (TexturePosition.X - 2' TexturePosition.Y - 5);  			//NOTE: Must be drawn at Depth - 0.1f because of alpha issues with thumbs.  			SBatch.Draw (m_SkinBtns [Y + m_Counter].BtnTex' new Rectangle ((int)(Position.X + ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)' new Rectangle ((int)m_SkinBtns [m_Counter + Y].SourcePosition.X' (int)m_SkinBtns [m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);  			SBatch.Draw (m_Thumb' new Rectangle ((int)(Position.X + TexturePosition.X)' (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)' null' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth);  			if (m_Counter < m_NumberOfSkinsToDisplay)  				m_Counter++;  		}  	}  	break;  case Elements.SkinType.Medium:  	for (int X = 0; X <= m_Map.GetUpperBound (1); X++) {  		for (int Y = 0; Y <= m_Map.GetUpperBound (0); Y++) {  			m_Thumb = FileManager.GetTexture (m_Sex == AvatarSex.Male ? m_MediumAppearances [(Y * X) + m_Counter].MediumAppearance.ThumbnailID.UniqueID : m_MediumFemaleAppearances [(Y * X) + m_Counter].MediumAppearance.ThumbnailID.UniqueID);  			m_BtnWidth = m_SkinBtns [m_Counter + Y].BtnTex.Width / 4;  			m_BtnHeight = m_SkinBtns [m_Counter + Y].BtnTex.Height;  			Vector2 TexturePosition = new Vector2 (X * (HeadTileSize.X + 10)' Y * (HeadTileSize.Y));  			Vector2 ButtonPosition = new Vector2 (TexturePosition.X - 2' TexturePosition.Y - 5);  			//NOTE: Must be drawn at Depth - 0.1f because of alpha issues with thumbs.  			SBatch.Draw (m_SkinBtns [Y + m_Counter].BtnTex' new Rectangle ((int)(Position.X + ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)' new Rectangle ((int)m_SkinBtns [m_Counter + Y].SourcePosition.X' (int)m_SkinBtns [m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);  			SBatch.Draw (m_Thumb' new Rectangle ((int)(Position.X + TexturePosition.X)' (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)' null' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth);  			if (m_Counter < m_NumberOfSkinsToDisplay)  				m_Counter++;  		}  	}  	break;  case Elements.SkinType.Dark:  	for (int X = 0; X <= m_Map.GetUpperBound (1); X++) {  		for (int Y = 0; Y <= m_Map.GetUpperBound (0); Y++) {  			m_Thumb = FileManager.GetTexture (m_Sex == AvatarSex.Male ? m_DarkAppearances [(Y * X) + m_Counter].DarkAppearance.ThumbnailID.UniqueID : m_DarkFemaleAppearances [(Y * X) + m_Counter].DarkAppearance.ThumbnailID.UniqueID);  			m_BtnWidth = m_SkinBtns [m_Counter + Y].BtnTex.Width / 4;  			m_BtnHeight = m_SkinBtns [m_Counter + Y].BtnTex.Height;  			Vector2 TexturePosition = new Vector2 (X * (HeadTileSize.X + 10)' Y * (HeadTileSize.Y));  			Vector2 ButtonPosition = new Vector2 (TexturePosition.X - 2' TexturePosition.Y - 5);  			//NOTE: Must be drawn at Depth - 0.1f because of alpha issues with thumbs.  			SBatch.Draw (m_SkinBtns [Y + m_Counter].BtnTex' new Rectangle ((int)(Position.X + ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)' new Rectangle ((int)m_SkinBtns [m_Counter + Y].SourcePosition.X' (int)m_SkinBtns [m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);  			SBatch.Draw (m_Thumb' new Rectangle ((int)(Position.X + TexturePosition.X)' (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)' null' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth);  			if (m_Counter < m_NumberOfSkinsToDisplay)  				m_Counter++;  		}  	}  	break;  }  
Magic Number,Gonzo.Elements,UIHeadBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIHeadBrowser.cs,Draw,The following statement contains a magic number: switch (m_SelectedSkintype) {  case Elements.SkinType.Light:  	for (int X = 0; X <= m_Map.GetUpperBound (1); X++) {  		for (int Y = 0; Y <= m_Map.GetUpperBound (0); Y++) {  			m_Thumb = FileManager.GetTexture (m_Sex == AvatarSex.Male ? m_LightAppearances [(Y * X) + m_Counter].LightAppearance.ThumbnailID.UniqueID : m_LightFemaleAppearances [(Y * X) + m_Counter].LightAppearance.ThumbnailID.UniqueID);  			m_BtnWidth = m_SkinBtns [m_Counter + Y].BtnTex.Width / 4;  			m_BtnHeight = m_SkinBtns [m_Counter + Y].BtnTex.Height;  			Vector2 TexturePosition = new Vector2 (X * (HeadTileSize.X + 10)' Y * (HeadTileSize.Y));  			Vector2 ButtonPosition = new Vector2 (TexturePosition.X - 2' TexturePosition.Y - 5);  			//NOTE: Must be drawn at Depth - 0.1f because of alpha issues with thumbs.  			SBatch.Draw (m_SkinBtns [Y + m_Counter].BtnTex' new Rectangle ((int)(Position.X + ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)' new Rectangle ((int)m_SkinBtns [m_Counter + Y].SourcePosition.X' (int)m_SkinBtns [m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);  			SBatch.Draw (m_Thumb' new Rectangle ((int)(Position.X + TexturePosition.X)' (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)' null' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth);  			if (m_Counter < m_NumberOfSkinsToDisplay)  				m_Counter++;  		}  	}  	break;  case Elements.SkinType.Medium:  	for (int X = 0; X <= m_Map.GetUpperBound (1); X++) {  		for (int Y = 0; Y <= m_Map.GetUpperBound (0); Y++) {  			m_Thumb = FileManager.GetTexture (m_Sex == AvatarSex.Male ? m_MediumAppearances [(Y * X) + m_Counter].MediumAppearance.ThumbnailID.UniqueID : m_MediumFemaleAppearances [(Y * X) + m_Counter].MediumAppearance.ThumbnailID.UniqueID);  			m_BtnWidth = m_SkinBtns [m_Counter + Y].BtnTex.Width / 4;  			m_BtnHeight = m_SkinBtns [m_Counter + Y].BtnTex.Height;  			Vector2 TexturePosition = new Vector2 (X * (HeadTileSize.X + 10)' Y * (HeadTileSize.Y));  			Vector2 ButtonPosition = new Vector2 (TexturePosition.X - 2' TexturePosition.Y - 5);  			//NOTE: Must be drawn at Depth - 0.1f because of alpha issues with thumbs.  			SBatch.Draw (m_SkinBtns [Y + m_Counter].BtnTex' new Rectangle ((int)(Position.X + ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)' new Rectangle ((int)m_SkinBtns [m_Counter + Y].SourcePosition.X' (int)m_SkinBtns [m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);  			SBatch.Draw (m_Thumb' new Rectangle ((int)(Position.X + TexturePosition.X)' (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)' null' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth);  			if (m_Counter < m_NumberOfSkinsToDisplay)  				m_Counter++;  		}  	}  	break;  case Elements.SkinType.Dark:  	for (int X = 0; X <= m_Map.GetUpperBound (1); X++) {  		for (int Y = 0; Y <= m_Map.GetUpperBound (0); Y++) {  			m_Thumb = FileManager.GetTexture (m_Sex == AvatarSex.Male ? m_DarkAppearances [(Y * X) + m_Counter].DarkAppearance.ThumbnailID.UniqueID : m_DarkFemaleAppearances [(Y * X) + m_Counter].DarkAppearance.ThumbnailID.UniqueID);  			m_BtnWidth = m_SkinBtns [m_Counter + Y].BtnTex.Width / 4;  			m_BtnHeight = m_SkinBtns [m_Counter + Y].BtnTex.Height;  			Vector2 TexturePosition = new Vector2 (X * (HeadTileSize.X + 10)' Y * (HeadTileSize.Y));  			Vector2 ButtonPosition = new Vector2 (TexturePosition.X - 2' TexturePosition.Y - 5);  			//NOTE: Must be drawn at Depth - 0.1f because of alpha issues with thumbs.  			SBatch.Draw (m_SkinBtns [Y + m_Counter].BtnTex' new Rectangle ((int)(Position.X + ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)' new Rectangle ((int)m_SkinBtns [m_Counter + Y].SourcePosition.X' (int)m_SkinBtns [m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);  			SBatch.Draw (m_Thumb' new Rectangle ((int)(Position.X + TexturePosition.X)' (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)' null' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth);  			if (m_Counter < m_NumberOfSkinsToDisplay)  				m_Counter++;  		}  	}  	break;  }  
Magic Number,Gonzo.Elements,UIHeadBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIHeadBrowser.cs,Draw,The following statement contains a magic number: for (int X = 0; X <= m_Map.GetUpperBound (1); X++) {  	for (int Y = 0; Y <= m_Map.GetUpperBound (0); Y++) {  		m_Thumb = FileManager.GetTexture (m_Sex == AvatarSex.Male ? m_LightAppearances [(Y * X) + m_Counter].LightAppearance.ThumbnailID.UniqueID : m_LightFemaleAppearances [(Y * X) + m_Counter].LightAppearance.ThumbnailID.UniqueID);  		m_BtnWidth = m_SkinBtns [m_Counter + Y].BtnTex.Width / 4;  		m_BtnHeight = m_SkinBtns [m_Counter + Y].BtnTex.Height;  		Vector2 TexturePosition = new Vector2 (X * (HeadTileSize.X + 10)' Y * (HeadTileSize.Y));  		Vector2 ButtonPosition = new Vector2 (TexturePosition.X - 2' TexturePosition.Y - 5);  		//NOTE: Must be drawn at Depth - 0.1f because of alpha issues with thumbs.  		SBatch.Draw (m_SkinBtns [Y + m_Counter].BtnTex' new Rectangle ((int)(Position.X + ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)' new Rectangle ((int)m_SkinBtns [m_Counter + Y].SourcePosition.X' (int)m_SkinBtns [m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);  		SBatch.Draw (m_Thumb' new Rectangle ((int)(Position.X + TexturePosition.X)' (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)' null' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth);  		if (m_Counter < m_NumberOfSkinsToDisplay)  			m_Counter++;  	}  }  
Magic Number,Gonzo.Elements,UIHeadBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIHeadBrowser.cs,Draw,The following statement contains a magic number: for (int X = 0; X <= m_Map.GetUpperBound (1); X++) {  	for (int Y = 0; Y <= m_Map.GetUpperBound (0); Y++) {  		m_Thumb = FileManager.GetTexture (m_Sex == AvatarSex.Male ? m_LightAppearances [(Y * X) + m_Counter].LightAppearance.ThumbnailID.UniqueID : m_LightFemaleAppearances [(Y * X) + m_Counter].LightAppearance.ThumbnailID.UniqueID);  		m_BtnWidth = m_SkinBtns [m_Counter + Y].BtnTex.Width / 4;  		m_BtnHeight = m_SkinBtns [m_Counter + Y].BtnTex.Height;  		Vector2 TexturePosition = new Vector2 (X * (HeadTileSize.X + 10)' Y * (HeadTileSize.Y));  		Vector2 ButtonPosition = new Vector2 (TexturePosition.X - 2' TexturePosition.Y - 5);  		//NOTE: Must be drawn at Depth - 0.1f because of alpha issues with thumbs.  		SBatch.Draw (m_SkinBtns [Y + m_Counter].BtnTex' new Rectangle ((int)(Position.X + ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)' new Rectangle ((int)m_SkinBtns [m_Counter + Y].SourcePosition.X' (int)m_SkinBtns [m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);  		SBatch.Draw (m_Thumb' new Rectangle ((int)(Position.X + TexturePosition.X)' (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)' null' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth);  		if (m_Counter < m_NumberOfSkinsToDisplay)  			m_Counter++;  	}  }  
Magic Number,Gonzo.Elements,UIHeadBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIHeadBrowser.cs,Draw,The following statement contains a magic number: for (int X = 0; X <= m_Map.GetUpperBound (1); X++) {  	for (int Y = 0; Y <= m_Map.GetUpperBound (0); Y++) {  		m_Thumb = FileManager.GetTexture (m_Sex == AvatarSex.Male ? m_LightAppearances [(Y * X) + m_Counter].LightAppearance.ThumbnailID.UniqueID : m_LightFemaleAppearances [(Y * X) + m_Counter].LightAppearance.ThumbnailID.UniqueID);  		m_BtnWidth = m_SkinBtns [m_Counter + Y].BtnTex.Width / 4;  		m_BtnHeight = m_SkinBtns [m_Counter + Y].BtnTex.Height;  		Vector2 TexturePosition = new Vector2 (X * (HeadTileSize.X + 10)' Y * (HeadTileSize.Y));  		Vector2 ButtonPosition = new Vector2 (TexturePosition.X - 2' TexturePosition.Y - 5);  		//NOTE: Must be drawn at Depth - 0.1f because of alpha issues with thumbs.  		SBatch.Draw (m_SkinBtns [Y + m_Counter].BtnTex' new Rectangle ((int)(Position.X + ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)' new Rectangle ((int)m_SkinBtns [m_Counter + Y].SourcePosition.X' (int)m_SkinBtns [m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);  		SBatch.Draw (m_Thumb' new Rectangle ((int)(Position.X + TexturePosition.X)' (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)' null' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth);  		if (m_Counter < m_NumberOfSkinsToDisplay)  			m_Counter++;  	}  }  
Magic Number,Gonzo.Elements,UIHeadBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIHeadBrowser.cs,Draw,The following statement contains a magic number: for (int X = 0; X <= m_Map.GetUpperBound (1); X++) {  	for (int Y = 0; Y <= m_Map.GetUpperBound (0); Y++) {  		m_Thumb = FileManager.GetTexture (m_Sex == AvatarSex.Male ? m_LightAppearances [(Y * X) + m_Counter].LightAppearance.ThumbnailID.UniqueID : m_LightFemaleAppearances [(Y * X) + m_Counter].LightAppearance.ThumbnailID.UniqueID);  		m_BtnWidth = m_SkinBtns [m_Counter + Y].BtnTex.Width / 4;  		m_BtnHeight = m_SkinBtns [m_Counter + Y].BtnTex.Height;  		Vector2 TexturePosition = new Vector2 (X * (HeadTileSize.X + 10)' Y * (HeadTileSize.Y));  		Vector2 ButtonPosition = new Vector2 (TexturePosition.X - 2' TexturePosition.Y - 5);  		//NOTE: Must be drawn at Depth - 0.1f because of alpha issues with thumbs.  		SBatch.Draw (m_SkinBtns [Y + m_Counter].BtnTex' new Rectangle ((int)(Position.X + ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)' new Rectangle ((int)m_SkinBtns [m_Counter + Y].SourcePosition.X' (int)m_SkinBtns [m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);  		SBatch.Draw (m_Thumb' new Rectangle ((int)(Position.X + TexturePosition.X)' (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)' null' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth);  		if (m_Counter < m_NumberOfSkinsToDisplay)  			m_Counter++;  	}  }  
Magic Number,Gonzo.Elements,UIHeadBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIHeadBrowser.cs,Draw,The following statement contains a magic number: for (int Y = 0; Y <= m_Map.GetUpperBound (0); Y++) {  	m_Thumb = FileManager.GetTexture (m_Sex == AvatarSex.Male ? m_LightAppearances [(Y * X) + m_Counter].LightAppearance.ThumbnailID.UniqueID : m_LightFemaleAppearances [(Y * X) + m_Counter].LightAppearance.ThumbnailID.UniqueID);  	m_BtnWidth = m_SkinBtns [m_Counter + Y].BtnTex.Width / 4;  	m_BtnHeight = m_SkinBtns [m_Counter + Y].BtnTex.Height;  	Vector2 TexturePosition = new Vector2 (X * (HeadTileSize.X + 10)' Y * (HeadTileSize.Y));  	Vector2 ButtonPosition = new Vector2 (TexturePosition.X - 2' TexturePosition.Y - 5);  	//NOTE: Must be drawn at Depth - 0.1f because of alpha issues with thumbs.  	SBatch.Draw (m_SkinBtns [Y + m_Counter].BtnTex' new Rectangle ((int)(Position.X + ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)' new Rectangle ((int)m_SkinBtns [m_Counter + Y].SourcePosition.X' (int)m_SkinBtns [m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);  	SBatch.Draw (m_Thumb' new Rectangle ((int)(Position.X + TexturePosition.X)' (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)' null' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth);  	if (m_Counter < m_NumberOfSkinsToDisplay)  		m_Counter++;  }  
Magic Number,Gonzo.Elements,UIHeadBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIHeadBrowser.cs,Draw,The following statement contains a magic number: for (int Y = 0; Y <= m_Map.GetUpperBound (0); Y++) {  	m_Thumb = FileManager.GetTexture (m_Sex == AvatarSex.Male ? m_LightAppearances [(Y * X) + m_Counter].LightAppearance.ThumbnailID.UniqueID : m_LightFemaleAppearances [(Y * X) + m_Counter].LightAppearance.ThumbnailID.UniqueID);  	m_BtnWidth = m_SkinBtns [m_Counter + Y].BtnTex.Width / 4;  	m_BtnHeight = m_SkinBtns [m_Counter + Y].BtnTex.Height;  	Vector2 TexturePosition = new Vector2 (X * (HeadTileSize.X + 10)' Y * (HeadTileSize.Y));  	Vector2 ButtonPosition = new Vector2 (TexturePosition.X - 2' TexturePosition.Y - 5);  	//NOTE: Must be drawn at Depth - 0.1f because of alpha issues with thumbs.  	SBatch.Draw (m_SkinBtns [Y + m_Counter].BtnTex' new Rectangle ((int)(Position.X + ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)' new Rectangle ((int)m_SkinBtns [m_Counter + Y].SourcePosition.X' (int)m_SkinBtns [m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);  	SBatch.Draw (m_Thumb' new Rectangle ((int)(Position.X + TexturePosition.X)' (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)' null' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth);  	if (m_Counter < m_NumberOfSkinsToDisplay)  		m_Counter++;  }  
Magic Number,Gonzo.Elements,UIHeadBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIHeadBrowser.cs,Draw,The following statement contains a magic number: for (int Y = 0; Y <= m_Map.GetUpperBound (0); Y++) {  	m_Thumb = FileManager.GetTexture (m_Sex == AvatarSex.Male ? m_LightAppearances [(Y * X) + m_Counter].LightAppearance.ThumbnailID.UniqueID : m_LightFemaleAppearances [(Y * X) + m_Counter].LightAppearance.ThumbnailID.UniqueID);  	m_BtnWidth = m_SkinBtns [m_Counter + Y].BtnTex.Width / 4;  	m_BtnHeight = m_SkinBtns [m_Counter + Y].BtnTex.Height;  	Vector2 TexturePosition = new Vector2 (X * (HeadTileSize.X + 10)' Y * (HeadTileSize.Y));  	Vector2 ButtonPosition = new Vector2 (TexturePosition.X - 2' TexturePosition.Y - 5);  	//NOTE: Must be drawn at Depth - 0.1f because of alpha issues with thumbs.  	SBatch.Draw (m_SkinBtns [Y + m_Counter].BtnTex' new Rectangle ((int)(Position.X + ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)' new Rectangle ((int)m_SkinBtns [m_Counter + Y].SourcePosition.X' (int)m_SkinBtns [m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);  	SBatch.Draw (m_Thumb' new Rectangle ((int)(Position.X + TexturePosition.X)' (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)' null' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth);  	if (m_Counter < m_NumberOfSkinsToDisplay)  		m_Counter++;  }  
Magic Number,Gonzo.Elements,UIHeadBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIHeadBrowser.cs,Draw,The following statement contains a magic number: for (int Y = 0; Y <= m_Map.GetUpperBound (0); Y++) {  	m_Thumb = FileManager.GetTexture (m_Sex == AvatarSex.Male ? m_LightAppearances [(Y * X) + m_Counter].LightAppearance.ThumbnailID.UniqueID : m_LightFemaleAppearances [(Y * X) + m_Counter].LightAppearance.ThumbnailID.UniqueID);  	m_BtnWidth = m_SkinBtns [m_Counter + Y].BtnTex.Width / 4;  	m_BtnHeight = m_SkinBtns [m_Counter + Y].BtnTex.Height;  	Vector2 TexturePosition = new Vector2 (X * (HeadTileSize.X + 10)' Y * (HeadTileSize.Y));  	Vector2 ButtonPosition = new Vector2 (TexturePosition.X - 2' TexturePosition.Y - 5);  	//NOTE: Must be drawn at Depth - 0.1f because of alpha issues with thumbs.  	SBatch.Draw (m_SkinBtns [Y + m_Counter].BtnTex' new Rectangle ((int)(Position.X + ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)' new Rectangle ((int)m_SkinBtns [m_Counter + Y].SourcePosition.X' (int)m_SkinBtns [m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);  	SBatch.Draw (m_Thumb' new Rectangle ((int)(Position.X + TexturePosition.X)' (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)' null' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth);  	if (m_Counter < m_NumberOfSkinsToDisplay)  		m_Counter++;  }  
Magic Number,Gonzo.Elements,UIHeadBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIHeadBrowser.cs,Draw,The following statement contains a magic number: m_BtnWidth = m_SkinBtns [m_Counter + Y].BtnTex.Width / 4;  
Magic Number,Gonzo.Elements,UIHeadBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIHeadBrowser.cs,Draw,The following statement contains a magic number: for (int X = 0; X <= m_Map.GetUpperBound (1); X++) {  	for (int Y = 0; Y <= m_Map.GetUpperBound (0); Y++) {  		m_Thumb = FileManager.GetTexture (m_Sex == AvatarSex.Male ? m_MediumAppearances [(Y * X) + m_Counter].MediumAppearance.ThumbnailID.UniqueID : m_MediumFemaleAppearances [(Y * X) + m_Counter].MediumAppearance.ThumbnailID.UniqueID);  		m_BtnWidth = m_SkinBtns [m_Counter + Y].BtnTex.Width / 4;  		m_BtnHeight = m_SkinBtns [m_Counter + Y].BtnTex.Height;  		Vector2 TexturePosition = new Vector2 (X * (HeadTileSize.X + 10)' Y * (HeadTileSize.Y));  		Vector2 ButtonPosition = new Vector2 (TexturePosition.X - 2' TexturePosition.Y - 5);  		//NOTE: Must be drawn at Depth - 0.1f because of alpha issues with thumbs.  		SBatch.Draw (m_SkinBtns [Y + m_Counter].BtnTex' new Rectangle ((int)(Position.X + ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)' new Rectangle ((int)m_SkinBtns [m_Counter + Y].SourcePosition.X' (int)m_SkinBtns [m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);  		SBatch.Draw (m_Thumb' new Rectangle ((int)(Position.X + TexturePosition.X)' (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)' null' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth);  		if (m_Counter < m_NumberOfSkinsToDisplay)  			m_Counter++;  	}  }  
Magic Number,Gonzo.Elements,UIHeadBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIHeadBrowser.cs,Draw,The following statement contains a magic number: for (int X = 0; X <= m_Map.GetUpperBound (1); X++) {  	for (int Y = 0; Y <= m_Map.GetUpperBound (0); Y++) {  		m_Thumb = FileManager.GetTexture (m_Sex == AvatarSex.Male ? m_MediumAppearances [(Y * X) + m_Counter].MediumAppearance.ThumbnailID.UniqueID : m_MediumFemaleAppearances [(Y * X) + m_Counter].MediumAppearance.ThumbnailID.UniqueID);  		m_BtnWidth = m_SkinBtns [m_Counter + Y].BtnTex.Width / 4;  		m_BtnHeight = m_SkinBtns [m_Counter + Y].BtnTex.Height;  		Vector2 TexturePosition = new Vector2 (X * (HeadTileSize.X + 10)' Y * (HeadTileSize.Y));  		Vector2 ButtonPosition = new Vector2 (TexturePosition.X - 2' TexturePosition.Y - 5);  		//NOTE: Must be drawn at Depth - 0.1f because of alpha issues with thumbs.  		SBatch.Draw (m_SkinBtns [Y + m_Counter].BtnTex' new Rectangle ((int)(Position.X + ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)' new Rectangle ((int)m_SkinBtns [m_Counter + Y].SourcePosition.X' (int)m_SkinBtns [m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);  		SBatch.Draw (m_Thumb' new Rectangle ((int)(Position.X + TexturePosition.X)' (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)' null' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth);  		if (m_Counter < m_NumberOfSkinsToDisplay)  			m_Counter++;  	}  }  
Magic Number,Gonzo.Elements,UIHeadBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIHeadBrowser.cs,Draw,The following statement contains a magic number: for (int X = 0; X <= m_Map.GetUpperBound (1); X++) {  	for (int Y = 0; Y <= m_Map.GetUpperBound (0); Y++) {  		m_Thumb = FileManager.GetTexture (m_Sex == AvatarSex.Male ? m_MediumAppearances [(Y * X) + m_Counter].MediumAppearance.ThumbnailID.UniqueID : m_MediumFemaleAppearances [(Y * X) + m_Counter].MediumAppearance.ThumbnailID.UniqueID);  		m_BtnWidth = m_SkinBtns [m_Counter + Y].BtnTex.Width / 4;  		m_BtnHeight = m_SkinBtns [m_Counter + Y].BtnTex.Height;  		Vector2 TexturePosition = new Vector2 (X * (HeadTileSize.X + 10)' Y * (HeadTileSize.Y));  		Vector2 ButtonPosition = new Vector2 (TexturePosition.X - 2' TexturePosition.Y - 5);  		//NOTE: Must be drawn at Depth - 0.1f because of alpha issues with thumbs.  		SBatch.Draw (m_SkinBtns [Y + m_Counter].BtnTex' new Rectangle ((int)(Position.X + ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)' new Rectangle ((int)m_SkinBtns [m_Counter + Y].SourcePosition.X' (int)m_SkinBtns [m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);  		SBatch.Draw (m_Thumb' new Rectangle ((int)(Position.X + TexturePosition.X)' (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)' null' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth);  		if (m_Counter < m_NumberOfSkinsToDisplay)  			m_Counter++;  	}  }  
Magic Number,Gonzo.Elements,UIHeadBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIHeadBrowser.cs,Draw,The following statement contains a magic number: for (int X = 0; X <= m_Map.GetUpperBound (1); X++) {  	for (int Y = 0; Y <= m_Map.GetUpperBound (0); Y++) {  		m_Thumb = FileManager.GetTexture (m_Sex == AvatarSex.Male ? m_MediumAppearances [(Y * X) + m_Counter].MediumAppearance.ThumbnailID.UniqueID : m_MediumFemaleAppearances [(Y * X) + m_Counter].MediumAppearance.ThumbnailID.UniqueID);  		m_BtnWidth = m_SkinBtns [m_Counter + Y].BtnTex.Width / 4;  		m_BtnHeight = m_SkinBtns [m_Counter + Y].BtnTex.Height;  		Vector2 TexturePosition = new Vector2 (X * (HeadTileSize.X + 10)' Y * (HeadTileSize.Y));  		Vector2 ButtonPosition = new Vector2 (TexturePosition.X - 2' TexturePosition.Y - 5);  		//NOTE: Must be drawn at Depth - 0.1f because of alpha issues with thumbs.  		SBatch.Draw (m_SkinBtns [Y + m_Counter].BtnTex' new Rectangle ((int)(Position.X + ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)' new Rectangle ((int)m_SkinBtns [m_Counter + Y].SourcePosition.X' (int)m_SkinBtns [m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);  		SBatch.Draw (m_Thumb' new Rectangle ((int)(Position.X + TexturePosition.X)' (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)' null' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth);  		if (m_Counter < m_NumberOfSkinsToDisplay)  			m_Counter++;  	}  }  
Magic Number,Gonzo.Elements,UIHeadBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIHeadBrowser.cs,Draw,The following statement contains a magic number: for (int Y = 0; Y <= m_Map.GetUpperBound (0); Y++) {  	m_Thumb = FileManager.GetTexture (m_Sex == AvatarSex.Male ? m_MediumAppearances [(Y * X) + m_Counter].MediumAppearance.ThumbnailID.UniqueID : m_MediumFemaleAppearances [(Y * X) + m_Counter].MediumAppearance.ThumbnailID.UniqueID);  	m_BtnWidth = m_SkinBtns [m_Counter + Y].BtnTex.Width / 4;  	m_BtnHeight = m_SkinBtns [m_Counter + Y].BtnTex.Height;  	Vector2 TexturePosition = new Vector2 (X * (HeadTileSize.X + 10)' Y * (HeadTileSize.Y));  	Vector2 ButtonPosition = new Vector2 (TexturePosition.X - 2' TexturePosition.Y - 5);  	//NOTE: Must be drawn at Depth - 0.1f because of alpha issues with thumbs.  	SBatch.Draw (m_SkinBtns [Y + m_Counter].BtnTex' new Rectangle ((int)(Position.X + ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)' new Rectangle ((int)m_SkinBtns [m_Counter + Y].SourcePosition.X' (int)m_SkinBtns [m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);  	SBatch.Draw (m_Thumb' new Rectangle ((int)(Position.X + TexturePosition.X)' (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)' null' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth);  	if (m_Counter < m_NumberOfSkinsToDisplay)  		m_Counter++;  }  
Magic Number,Gonzo.Elements,UIHeadBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIHeadBrowser.cs,Draw,The following statement contains a magic number: for (int Y = 0; Y <= m_Map.GetUpperBound (0); Y++) {  	m_Thumb = FileManager.GetTexture (m_Sex == AvatarSex.Male ? m_MediumAppearances [(Y * X) + m_Counter].MediumAppearance.ThumbnailID.UniqueID : m_MediumFemaleAppearances [(Y * X) + m_Counter].MediumAppearance.ThumbnailID.UniqueID);  	m_BtnWidth = m_SkinBtns [m_Counter + Y].BtnTex.Width / 4;  	m_BtnHeight = m_SkinBtns [m_Counter + Y].BtnTex.Height;  	Vector2 TexturePosition = new Vector2 (X * (HeadTileSize.X + 10)' Y * (HeadTileSize.Y));  	Vector2 ButtonPosition = new Vector2 (TexturePosition.X - 2' TexturePosition.Y - 5);  	//NOTE: Must be drawn at Depth - 0.1f because of alpha issues with thumbs.  	SBatch.Draw (m_SkinBtns [Y + m_Counter].BtnTex' new Rectangle ((int)(Position.X + ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)' new Rectangle ((int)m_SkinBtns [m_Counter + Y].SourcePosition.X' (int)m_SkinBtns [m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);  	SBatch.Draw (m_Thumb' new Rectangle ((int)(Position.X + TexturePosition.X)' (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)' null' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth);  	if (m_Counter < m_NumberOfSkinsToDisplay)  		m_Counter++;  }  
Magic Number,Gonzo.Elements,UIHeadBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIHeadBrowser.cs,Draw,The following statement contains a magic number: for (int Y = 0; Y <= m_Map.GetUpperBound (0); Y++) {  	m_Thumb = FileManager.GetTexture (m_Sex == AvatarSex.Male ? m_MediumAppearances [(Y * X) + m_Counter].MediumAppearance.ThumbnailID.UniqueID : m_MediumFemaleAppearances [(Y * X) + m_Counter].MediumAppearance.ThumbnailID.UniqueID);  	m_BtnWidth = m_SkinBtns [m_Counter + Y].BtnTex.Width / 4;  	m_BtnHeight = m_SkinBtns [m_Counter + Y].BtnTex.Height;  	Vector2 TexturePosition = new Vector2 (X * (HeadTileSize.X + 10)' Y * (HeadTileSize.Y));  	Vector2 ButtonPosition = new Vector2 (TexturePosition.X - 2' TexturePosition.Y - 5);  	//NOTE: Must be drawn at Depth - 0.1f because of alpha issues with thumbs.  	SBatch.Draw (m_SkinBtns [Y + m_Counter].BtnTex' new Rectangle ((int)(Position.X + ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)' new Rectangle ((int)m_SkinBtns [m_Counter + Y].SourcePosition.X' (int)m_SkinBtns [m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);  	SBatch.Draw (m_Thumb' new Rectangle ((int)(Position.X + TexturePosition.X)' (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)' null' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth);  	if (m_Counter < m_NumberOfSkinsToDisplay)  		m_Counter++;  }  
Magic Number,Gonzo.Elements,UIHeadBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIHeadBrowser.cs,Draw,The following statement contains a magic number: for (int Y = 0; Y <= m_Map.GetUpperBound (0); Y++) {  	m_Thumb = FileManager.GetTexture (m_Sex == AvatarSex.Male ? m_MediumAppearances [(Y * X) + m_Counter].MediumAppearance.ThumbnailID.UniqueID : m_MediumFemaleAppearances [(Y * X) + m_Counter].MediumAppearance.ThumbnailID.UniqueID);  	m_BtnWidth = m_SkinBtns [m_Counter + Y].BtnTex.Width / 4;  	m_BtnHeight = m_SkinBtns [m_Counter + Y].BtnTex.Height;  	Vector2 TexturePosition = new Vector2 (X * (HeadTileSize.X + 10)' Y * (HeadTileSize.Y));  	Vector2 ButtonPosition = new Vector2 (TexturePosition.X - 2' TexturePosition.Y - 5);  	//NOTE: Must be drawn at Depth - 0.1f because of alpha issues with thumbs.  	SBatch.Draw (m_SkinBtns [Y + m_Counter].BtnTex' new Rectangle ((int)(Position.X + ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)' new Rectangle ((int)m_SkinBtns [m_Counter + Y].SourcePosition.X' (int)m_SkinBtns [m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);  	SBatch.Draw (m_Thumb' new Rectangle ((int)(Position.X + TexturePosition.X)' (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)' null' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth);  	if (m_Counter < m_NumberOfSkinsToDisplay)  		m_Counter++;  }  
Magic Number,Gonzo.Elements,UIHeadBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIHeadBrowser.cs,Draw,The following statement contains a magic number: m_BtnWidth = m_SkinBtns [m_Counter + Y].BtnTex.Width / 4;  
Magic Number,Gonzo.Elements,UIHeadBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIHeadBrowser.cs,Draw,The following statement contains a magic number: for (int X = 0; X <= m_Map.GetUpperBound (1); X++) {  	for (int Y = 0; Y <= m_Map.GetUpperBound (0); Y++) {  		m_Thumb = FileManager.GetTexture (m_Sex == AvatarSex.Male ? m_DarkAppearances [(Y * X) + m_Counter].DarkAppearance.ThumbnailID.UniqueID : m_DarkFemaleAppearances [(Y * X) + m_Counter].DarkAppearance.ThumbnailID.UniqueID);  		m_BtnWidth = m_SkinBtns [m_Counter + Y].BtnTex.Width / 4;  		m_BtnHeight = m_SkinBtns [m_Counter + Y].BtnTex.Height;  		Vector2 TexturePosition = new Vector2 (X * (HeadTileSize.X + 10)' Y * (HeadTileSize.Y));  		Vector2 ButtonPosition = new Vector2 (TexturePosition.X - 2' TexturePosition.Y - 5);  		//NOTE: Must be drawn at Depth - 0.1f because of alpha issues with thumbs.  		SBatch.Draw (m_SkinBtns [Y + m_Counter].BtnTex' new Rectangle ((int)(Position.X + ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)' new Rectangle ((int)m_SkinBtns [m_Counter + Y].SourcePosition.X' (int)m_SkinBtns [m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);  		SBatch.Draw (m_Thumb' new Rectangle ((int)(Position.X + TexturePosition.X)' (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)' null' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth);  		if (m_Counter < m_NumberOfSkinsToDisplay)  			m_Counter++;  	}  }  
Magic Number,Gonzo.Elements,UIHeadBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIHeadBrowser.cs,Draw,The following statement contains a magic number: for (int X = 0; X <= m_Map.GetUpperBound (1); X++) {  	for (int Y = 0; Y <= m_Map.GetUpperBound (0); Y++) {  		m_Thumb = FileManager.GetTexture (m_Sex == AvatarSex.Male ? m_DarkAppearances [(Y * X) + m_Counter].DarkAppearance.ThumbnailID.UniqueID : m_DarkFemaleAppearances [(Y * X) + m_Counter].DarkAppearance.ThumbnailID.UniqueID);  		m_BtnWidth = m_SkinBtns [m_Counter + Y].BtnTex.Width / 4;  		m_BtnHeight = m_SkinBtns [m_Counter + Y].BtnTex.Height;  		Vector2 TexturePosition = new Vector2 (X * (HeadTileSize.X + 10)' Y * (HeadTileSize.Y));  		Vector2 ButtonPosition = new Vector2 (TexturePosition.X - 2' TexturePosition.Y - 5);  		//NOTE: Must be drawn at Depth - 0.1f because of alpha issues with thumbs.  		SBatch.Draw (m_SkinBtns [Y + m_Counter].BtnTex' new Rectangle ((int)(Position.X + ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)' new Rectangle ((int)m_SkinBtns [m_Counter + Y].SourcePosition.X' (int)m_SkinBtns [m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);  		SBatch.Draw (m_Thumb' new Rectangle ((int)(Position.X + TexturePosition.X)' (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)' null' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth);  		if (m_Counter < m_NumberOfSkinsToDisplay)  			m_Counter++;  	}  }  
Magic Number,Gonzo.Elements,UIHeadBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIHeadBrowser.cs,Draw,The following statement contains a magic number: for (int X = 0; X <= m_Map.GetUpperBound (1); X++) {  	for (int Y = 0; Y <= m_Map.GetUpperBound (0); Y++) {  		m_Thumb = FileManager.GetTexture (m_Sex == AvatarSex.Male ? m_DarkAppearances [(Y * X) + m_Counter].DarkAppearance.ThumbnailID.UniqueID : m_DarkFemaleAppearances [(Y * X) + m_Counter].DarkAppearance.ThumbnailID.UniqueID);  		m_BtnWidth = m_SkinBtns [m_Counter + Y].BtnTex.Width / 4;  		m_BtnHeight = m_SkinBtns [m_Counter + Y].BtnTex.Height;  		Vector2 TexturePosition = new Vector2 (X * (HeadTileSize.X + 10)' Y * (HeadTileSize.Y));  		Vector2 ButtonPosition = new Vector2 (TexturePosition.X - 2' TexturePosition.Y - 5);  		//NOTE: Must be drawn at Depth - 0.1f because of alpha issues with thumbs.  		SBatch.Draw (m_SkinBtns [Y + m_Counter].BtnTex' new Rectangle ((int)(Position.X + ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)' new Rectangle ((int)m_SkinBtns [m_Counter + Y].SourcePosition.X' (int)m_SkinBtns [m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);  		SBatch.Draw (m_Thumb' new Rectangle ((int)(Position.X + TexturePosition.X)' (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)' null' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth);  		if (m_Counter < m_NumberOfSkinsToDisplay)  			m_Counter++;  	}  }  
Magic Number,Gonzo.Elements,UIHeadBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIHeadBrowser.cs,Draw,The following statement contains a magic number: for (int X = 0; X <= m_Map.GetUpperBound (1); X++) {  	for (int Y = 0; Y <= m_Map.GetUpperBound (0); Y++) {  		m_Thumb = FileManager.GetTexture (m_Sex == AvatarSex.Male ? m_DarkAppearances [(Y * X) + m_Counter].DarkAppearance.ThumbnailID.UniqueID : m_DarkFemaleAppearances [(Y * X) + m_Counter].DarkAppearance.ThumbnailID.UniqueID);  		m_BtnWidth = m_SkinBtns [m_Counter + Y].BtnTex.Width / 4;  		m_BtnHeight = m_SkinBtns [m_Counter + Y].BtnTex.Height;  		Vector2 TexturePosition = new Vector2 (X * (HeadTileSize.X + 10)' Y * (HeadTileSize.Y));  		Vector2 ButtonPosition = new Vector2 (TexturePosition.X - 2' TexturePosition.Y - 5);  		//NOTE: Must be drawn at Depth - 0.1f because of alpha issues with thumbs.  		SBatch.Draw (m_SkinBtns [Y + m_Counter].BtnTex' new Rectangle ((int)(Position.X + ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)' new Rectangle ((int)m_SkinBtns [m_Counter + Y].SourcePosition.X' (int)m_SkinBtns [m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);  		SBatch.Draw (m_Thumb' new Rectangle ((int)(Position.X + TexturePosition.X)' (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)' null' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth);  		if (m_Counter < m_NumberOfSkinsToDisplay)  			m_Counter++;  	}  }  
Magic Number,Gonzo.Elements,UIHeadBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIHeadBrowser.cs,Draw,The following statement contains a magic number: for (int Y = 0; Y <= m_Map.GetUpperBound (0); Y++) {  	m_Thumb = FileManager.GetTexture (m_Sex == AvatarSex.Male ? m_DarkAppearances [(Y * X) + m_Counter].DarkAppearance.ThumbnailID.UniqueID : m_DarkFemaleAppearances [(Y * X) + m_Counter].DarkAppearance.ThumbnailID.UniqueID);  	m_BtnWidth = m_SkinBtns [m_Counter + Y].BtnTex.Width / 4;  	m_BtnHeight = m_SkinBtns [m_Counter + Y].BtnTex.Height;  	Vector2 TexturePosition = new Vector2 (X * (HeadTileSize.X + 10)' Y * (HeadTileSize.Y));  	Vector2 ButtonPosition = new Vector2 (TexturePosition.X - 2' TexturePosition.Y - 5);  	//NOTE: Must be drawn at Depth - 0.1f because of alpha issues with thumbs.  	SBatch.Draw (m_SkinBtns [Y + m_Counter].BtnTex' new Rectangle ((int)(Position.X + ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)' new Rectangle ((int)m_SkinBtns [m_Counter + Y].SourcePosition.X' (int)m_SkinBtns [m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);  	SBatch.Draw (m_Thumb' new Rectangle ((int)(Position.X + TexturePosition.X)' (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)' null' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth);  	if (m_Counter < m_NumberOfSkinsToDisplay)  		m_Counter++;  }  
Magic Number,Gonzo.Elements,UIHeadBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIHeadBrowser.cs,Draw,The following statement contains a magic number: for (int Y = 0; Y <= m_Map.GetUpperBound (0); Y++) {  	m_Thumb = FileManager.GetTexture (m_Sex == AvatarSex.Male ? m_DarkAppearances [(Y * X) + m_Counter].DarkAppearance.ThumbnailID.UniqueID : m_DarkFemaleAppearances [(Y * X) + m_Counter].DarkAppearance.ThumbnailID.UniqueID);  	m_BtnWidth = m_SkinBtns [m_Counter + Y].BtnTex.Width / 4;  	m_BtnHeight = m_SkinBtns [m_Counter + Y].BtnTex.Height;  	Vector2 TexturePosition = new Vector2 (X * (HeadTileSize.X + 10)' Y * (HeadTileSize.Y));  	Vector2 ButtonPosition = new Vector2 (TexturePosition.X - 2' TexturePosition.Y - 5);  	//NOTE: Must be drawn at Depth - 0.1f because of alpha issues with thumbs.  	SBatch.Draw (m_SkinBtns [Y + m_Counter].BtnTex' new Rectangle ((int)(Position.X + ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)' new Rectangle ((int)m_SkinBtns [m_Counter + Y].SourcePosition.X' (int)m_SkinBtns [m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);  	SBatch.Draw (m_Thumb' new Rectangle ((int)(Position.X + TexturePosition.X)' (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)' null' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth);  	if (m_Counter < m_NumberOfSkinsToDisplay)  		m_Counter++;  }  
Magic Number,Gonzo.Elements,UIHeadBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIHeadBrowser.cs,Draw,The following statement contains a magic number: for (int Y = 0; Y <= m_Map.GetUpperBound (0); Y++) {  	m_Thumb = FileManager.GetTexture (m_Sex == AvatarSex.Male ? m_DarkAppearances [(Y * X) + m_Counter].DarkAppearance.ThumbnailID.UniqueID : m_DarkFemaleAppearances [(Y * X) + m_Counter].DarkAppearance.ThumbnailID.UniqueID);  	m_BtnWidth = m_SkinBtns [m_Counter + Y].BtnTex.Width / 4;  	m_BtnHeight = m_SkinBtns [m_Counter + Y].BtnTex.Height;  	Vector2 TexturePosition = new Vector2 (X * (HeadTileSize.X + 10)' Y * (HeadTileSize.Y));  	Vector2 ButtonPosition = new Vector2 (TexturePosition.X - 2' TexturePosition.Y - 5);  	//NOTE: Must be drawn at Depth - 0.1f because of alpha issues with thumbs.  	SBatch.Draw (m_SkinBtns [Y + m_Counter].BtnTex' new Rectangle ((int)(Position.X + ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)' new Rectangle ((int)m_SkinBtns [m_Counter + Y].SourcePosition.X' (int)m_SkinBtns [m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);  	SBatch.Draw (m_Thumb' new Rectangle ((int)(Position.X + TexturePosition.X)' (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)' null' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth);  	if (m_Counter < m_NumberOfSkinsToDisplay)  		m_Counter++;  }  
Magic Number,Gonzo.Elements,UIHeadBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIHeadBrowser.cs,Draw,The following statement contains a magic number: for (int Y = 0; Y <= m_Map.GetUpperBound (0); Y++) {  	m_Thumb = FileManager.GetTexture (m_Sex == AvatarSex.Male ? m_DarkAppearances [(Y * X) + m_Counter].DarkAppearance.ThumbnailID.UniqueID : m_DarkFemaleAppearances [(Y * X) + m_Counter].DarkAppearance.ThumbnailID.UniqueID);  	m_BtnWidth = m_SkinBtns [m_Counter + Y].BtnTex.Width / 4;  	m_BtnHeight = m_SkinBtns [m_Counter + Y].BtnTex.Height;  	Vector2 TexturePosition = new Vector2 (X * (HeadTileSize.X + 10)' Y * (HeadTileSize.Y));  	Vector2 ButtonPosition = new Vector2 (TexturePosition.X - 2' TexturePosition.Y - 5);  	//NOTE: Must be drawn at Depth - 0.1f because of alpha issues with thumbs.  	SBatch.Draw (m_SkinBtns [Y + m_Counter].BtnTex' new Rectangle ((int)(Position.X + ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)' new Rectangle ((int)m_SkinBtns [m_Counter + Y].SourcePosition.X' (int)m_SkinBtns [m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);  	SBatch.Draw (m_Thumb' new Rectangle ((int)(Position.X + TexturePosition.X)' (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)' null' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth);  	if (m_Counter < m_NumberOfSkinsToDisplay)  		m_Counter++;  }  
Magic Number,Gonzo.Elements,UIHeadBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIHeadBrowser.cs,Draw,The following statement contains a magic number: m_BtnWidth = m_SkinBtns [m_Counter + Y].BtnTex.Width / 4;  
Magic Number,Gonzo.Elements,UISkinBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UISkinBrowser.cs,UISkinBrowser,The following statement contains a magic number: m_SkinBrowserArrowLeft = new UIButton ("SkinBrowserArrowLeft"' Position + new Vector2 (5' Size.Y - 70)' Screen' FileManager.GetTexture ((ulong)FileIDs.UIFileIDs.person_edit_skinbrowserarrowleft));  
Magic Number,Gonzo.Elements,UISkinBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UISkinBrowser.cs,UISkinBrowser,The following statement contains a magic number: m_SkinBrowserArrowLeft = new UIButton ("SkinBrowserArrowLeft"' Position + new Vector2 (5' Size.Y - 70)' Screen' FileManager.GetTexture ((ulong)FileIDs.UIFileIDs.person_edit_skinbrowserarrowleft));  
Magic Number,Gonzo.Elements,UISkinBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UISkinBrowser.cs,UISkinBrowser,The following statement contains a magic number: m_SkinBrowserArrowRight = new UIButton ("SkinBrowserArrowRight"' Position + new Vector2 (Size.X - 45' Size.Y - 70)' Screen' FileManager.GetTexture ((ulong)FileIDs.UIFileIDs.person_edit_skinbrowserarrowright));  
Magic Number,Gonzo.Elements,UISkinBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UISkinBrowser.cs,UISkinBrowser,The following statement contains a magic number: m_SkinBrowserArrowRight = new UIButton ("SkinBrowserArrowRight"' Position + new Vector2 (Size.X - 45' Size.Y - 70)' Screen' FileManager.GetTexture ((ulong)FileIDs.UIFileIDs.person_edit_skinbrowserarrowright));  
Magic Number,Gonzo.Elements,UISkinBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UISkinBrowser.cs,IsMouseOverButton,The following statement contains a magic number: if (Input.MousePosition.X > BtnPosition.X && Input.MousePosition.X <= (BtnPosition.X + (Button.BtnTex.Width / 4))) {  	if (Input.MousePosition.Y > BtnPosition.Y && Input.MousePosition.Y <= (BtnPosition.Y + Button.BtnTex.Height))  		return true;  }  
Magic Number,Gonzo.Elements,UIButton,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The following statement contains a magic number: if (!Result.State.InSharedPropertiesGroup) {  	if (Node.Image != null) {  		Image = m_Screen.GetImage (Node.Image' false);  		//Initialize to second frame in the image.  		m_SourcePosition = new Vector2 ((Image.Texture.Width / (4)) * 2' 0.0f);  		m_Size = new Vector2 ();  		m_Size.X = (Image.Texture.Width) / (4);  		m_Size.Y = Image.Texture.Height;  		Position = new Vector2 (Node.ButtonPosition.Numbers [0]' Node.ButtonPosition.Numbers [1]) + m_Screen.Position;  	} else {  		Image = new UIImage (FileManager.GetTexture ((ulong)FileIDs.UIFileIDs.buttontiledialog)' m_Screen);  		//Initialize to second frame in the image.  		m_SourcePosition = new Vector2 ((Image.Texture.Width / 4) * 2' 0.0f);  		m_Size = new Vector2 ();  		m_Size.X = (Image.Texture.Width) / (4);  		m_Size.Y = Image.Texture.Height;  		Position = new Vector2 (Node.ButtonPosition.Numbers [0]' Node.ButtonPosition.Numbers [1]) + m_Screen.Position;  	}  } else {  	if (Result.State.Image != "") {  		Image = m_Screen.GetImage (Result.State.Image' true);  		//Initialize to second frame in the image.  		m_SourcePosition = new Vector2 ((Image.Texture.Width / 4) * 2' 0.0f);  		m_Size = new Vector2 ();  		m_Size.X = (Image.Texture.Width) / (4);  		m_Size.Y = Image.Texture.Height;  	} else {  		if (Result.State.TextButton) {  			m_Text = Result.State.Caption;  			//Text buttons always use this image.  			Image = new UIImage (FileManager.GetTexture ((ulong)FileIDs.UIFileIDs.buttontiledialog)' m_Screen);  			//Initialize to second frame in the image.  			if (Result.State.Size == null)  				m_SourcePosition = new Vector2 ((Image.Texture.Width / 4) * 2' 0.0f);  			m_Size = new Vector2 ();  			m_Size.X = Image.Texture.Width / 4;  			m_Size.Y = Image.Texture.Height;  		} else {  			if (Node.Image != null)  				Image = m_Screen.GetImage (Node.Image' false);  			else  				Image = new UIImage (FileManager.GetTexture ((ulong)FileIDs.UIFileIDs.buttontiledialog)' m_Screen);  			//Initialize to second frame in the image.  			m_SourcePosition = new Vector2 ((Image.Texture.Width / (4)) * 2' 0.0f);  			m_Size = new Vector2 ();  			m_Size.X = (Image.Texture.Width) / (4);  			m_Size.Y = Image.Texture.Height;  		}  	}  	Position = new Vector2 (Node.ButtonPosition.Numbers [0]' Node.ButtonPosition.Numbers [1]) + m_Screen.Position;  	if (Result.State.Tooltip != "")  		Tooltip = m_Screen.GetString (Result.State.Tooltip);  }  
Magic Number,Gonzo.Elements,UIButton,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The following statement contains a magic number: if (!Result.State.InSharedPropertiesGroup) {  	if (Node.Image != null) {  		Image = m_Screen.GetImage (Node.Image' false);  		//Initialize to second frame in the image.  		m_SourcePosition = new Vector2 ((Image.Texture.Width / (4)) * 2' 0.0f);  		m_Size = new Vector2 ();  		m_Size.X = (Image.Texture.Width) / (4);  		m_Size.Y = Image.Texture.Height;  		Position = new Vector2 (Node.ButtonPosition.Numbers [0]' Node.ButtonPosition.Numbers [1]) + m_Screen.Position;  	} else {  		Image = new UIImage (FileManager.GetTexture ((ulong)FileIDs.UIFileIDs.buttontiledialog)' m_Screen);  		//Initialize to second frame in the image.  		m_SourcePosition = new Vector2 ((Image.Texture.Width / 4) * 2' 0.0f);  		m_Size = new Vector2 ();  		m_Size.X = (Image.Texture.Width) / (4);  		m_Size.Y = Image.Texture.Height;  		Position = new Vector2 (Node.ButtonPosition.Numbers [0]' Node.ButtonPosition.Numbers [1]) + m_Screen.Position;  	}  } else {  	if (Result.State.Image != "") {  		Image = m_Screen.GetImage (Result.State.Image' true);  		//Initialize to second frame in the image.  		m_SourcePosition = new Vector2 ((Image.Texture.Width / 4) * 2' 0.0f);  		m_Size = new Vector2 ();  		m_Size.X = (Image.Texture.Width) / (4);  		m_Size.Y = Image.Texture.Height;  	} else {  		if (Result.State.TextButton) {  			m_Text = Result.State.Caption;  			//Text buttons always use this image.  			Image = new UIImage (FileManager.GetTexture ((ulong)FileIDs.UIFileIDs.buttontiledialog)' m_Screen);  			//Initialize to second frame in the image.  			if (Result.State.Size == null)  				m_SourcePosition = new Vector2 ((Image.Texture.Width / 4) * 2' 0.0f);  			m_Size = new Vector2 ();  			m_Size.X = Image.Texture.Width / 4;  			m_Size.Y = Image.Texture.Height;  		} else {  			if (Node.Image != null)  				Image = m_Screen.GetImage (Node.Image' false);  			else  				Image = new UIImage (FileManager.GetTexture ((ulong)FileIDs.UIFileIDs.buttontiledialog)' m_Screen);  			//Initialize to second frame in the image.  			m_SourcePosition = new Vector2 ((Image.Texture.Width / (4)) * 2' 0.0f);  			m_Size = new Vector2 ();  			m_Size.X = (Image.Texture.Width) / (4);  			m_Size.Y = Image.Texture.Height;  		}  	}  	Position = new Vector2 (Node.ButtonPosition.Numbers [0]' Node.ButtonPosition.Numbers [1]) + m_Screen.Position;  	if (Result.State.Tooltip != "")  		Tooltip = m_Screen.GetString (Result.State.Tooltip);  }  
Magic Number,Gonzo.Elements,UIButton,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The following statement contains a magic number: if (!Result.State.InSharedPropertiesGroup) {  	if (Node.Image != null) {  		Image = m_Screen.GetImage (Node.Image' false);  		//Initialize to second frame in the image.  		m_SourcePosition = new Vector2 ((Image.Texture.Width / (4)) * 2' 0.0f);  		m_Size = new Vector2 ();  		m_Size.X = (Image.Texture.Width) / (4);  		m_Size.Y = Image.Texture.Height;  		Position = new Vector2 (Node.ButtonPosition.Numbers [0]' Node.ButtonPosition.Numbers [1]) + m_Screen.Position;  	} else {  		Image = new UIImage (FileManager.GetTexture ((ulong)FileIDs.UIFileIDs.buttontiledialog)' m_Screen);  		//Initialize to second frame in the image.  		m_SourcePosition = new Vector2 ((Image.Texture.Width / 4) * 2' 0.0f);  		m_Size = new Vector2 ();  		m_Size.X = (Image.Texture.Width) / (4);  		m_Size.Y = Image.Texture.Height;  		Position = new Vector2 (Node.ButtonPosition.Numbers [0]' Node.ButtonPosition.Numbers [1]) + m_Screen.Position;  	}  } else {  	if (Result.State.Image != "") {  		Image = m_Screen.GetImage (Result.State.Image' true);  		//Initialize to second frame in the image.  		m_SourcePosition = new Vector2 ((Image.Texture.Width / 4) * 2' 0.0f);  		m_Size = new Vector2 ();  		m_Size.X = (Image.Texture.Width) / (4);  		m_Size.Y = Image.Texture.Height;  	} else {  		if (Result.State.TextButton) {  			m_Text = Result.State.Caption;  			//Text buttons always use this image.  			Image = new UIImage (FileManager.GetTexture ((ulong)FileIDs.UIFileIDs.buttontiledialog)' m_Screen);  			//Initialize to second frame in the image.  			if (Result.State.Size == null)  				m_SourcePosition = new Vector2 ((Image.Texture.Width / 4) * 2' 0.0f);  			m_Size = new Vector2 ();  			m_Size.X = Image.Texture.Width / 4;  			m_Size.Y = Image.Texture.Height;  		} else {  			if (Node.Image != null)  				Image = m_Screen.GetImage (Node.Image' false);  			else  				Image = new UIImage (FileManager.GetTexture ((ulong)FileIDs.UIFileIDs.buttontiledialog)' m_Screen);  			//Initialize to second frame in the image.  			m_SourcePosition = new Vector2 ((Image.Texture.Width / (4)) * 2' 0.0f);  			m_Size = new Vector2 ();  			m_Size.X = (Image.Texture.Width) / (4);  			m_Size.Y = Image.Texture.Height;  		}  	}  	Position = new Vector2 (Node.ButtonPosition.Numbers [0]' Node.ButtonPosition.Numbers [1]) + m_Screen.Position;  	if (Result.State.Tooltip != "")  		Tooltip = m_Screen.GetString (Result.State.Tooltip);  }  
Magic Number,Gonzo.Elements,UIButton,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The following statement contains a magic number: if (!Result.State.InSharedPropertiesGroup) {  	if (Node.Image != null) {  		Image = m_Screen.GetImage (Node.Image' false);  		//Initialize to second frame in the image.  		m_SourcePosition = new Vector2 ((Image.Texture.Width / (4)) * 2' 0.0f);  		m_Size = new Vector2 ();  		m_Size.X = (Image.Texture.Width) / (4);  		m_Size.Y = Image.Texture.Height;  		Position = new Vector2 (Node.ButtonPosition.Numbers [0]' Node.ButtonPosition.Numbers [1]) + m_Screen.Position;  	} else {  		Image = new UIImage (FileManager.GetTexture ((ulong)FileIDs.UIFileIDs.buttontiledialog)' m_Screen);  		//Initialize to second frame in the image.  		m_SourcePosition = new Vector2 ((Image.Texture.Width / 4) * 2' 0.0f);  		m_Size = new Vector2 ();  		m_Size.X = (Image.Texture.Width) / (4);  		m_Size.Y = Image.Texture.Height;  		Position = new Vector2 (Node.ButtonPosition.Numbers [0]' Node.ButtonPosition.Numbers [1]) + m_Screen.Position;  	}  } else {  	if (Result.State.Image != "") {  		Image = m_Screen.GetImage (Result.State.Image' true);  		//Initialize to second frame in the image.  		m_SourcePosition = new Vector2 ((Image.Texture.Width / 4) * 2' 0.0f);  		m_Size = new Vector2 ();  		m_Size.X = (Image.Texture.Width) / (4);  		m_Size.Y = Image.Texture.Height;  	} else {  		if (Result.State.TextButton) {  			m_Text = Result.State.Caption;  			//Text buttons always use this image.  			Image = new UIImage (FileManager.GetTexture ((ulong)FileIDs.UIFileIDs.buttontiledialog)' m_Screen);  			//Initialize to second frame in the image.  			if (Result.State.Size == null)  				m_SourcePosition = new Vector2 ((Image.Texture.Width / 4) * 2' 0.0f);  			m_Size = new Vector2 ();  			m_Size.X = Image.Texture.Width / 4;  			m_Size.Y = Image.Texture.Height;  		} else {  			if (Node.Image != null)  				Image = m_Screen.GetImage (Node.Image' false);  			else  				Image = new UIImage (FileManager.GetTexture ((ulong)FileIDs.UIFileIDs.buttontiledialog)' m_Screen);  			//Initialize to second frame in the image.  			m_SourcePosition = new Vector2 ((Image.Texture.Width / (4)) * 2' 0.0f);  			m_Size = new Vector2 ();  			m_Size.X = (Image.Texture.Width) / (4);  			m_Size.Y = Image.Texture.Height;  		}  	}  	Position = new Vector2 (Node.ButtonPosition.Numbers [0]' Node.ButtonPosition.Numbers [1]) + m_Screen.Position;  	if (Result.State.Tooltip != "")  		Tooltip = m_Screen.GetString (Result.State.Tooltip);  }  
Magic Number,Gonzo.Elements,UIButton,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The following statement contains a magic number: if (!Result.State.InSharedPropertiesGroup) {  	if (Node.Image != null) {  		Image = m_Screen.GetImage (Node.Image' false);  		//Initialize to second frame in the image.  		m_SourcePosition = new Vector2 ((Image.Texture.Width / (4)) * 2' 0.0f);  		m_Size = new Vector2 ();  		m_Size.X = (Image.Texture.Width) / (4);  		m_Size.Y = Image.Texture.Height;  		Position = new Vector2 (Node.ButtonPosition.Numbers [0]' Node.ButtonPosition.Numbers [1]) + m_Screen.Position;  	} else {  		Image = new UIImage (FileManager.GetTexture ((ulong)FileIDs.UIFileIDs.buttontiledialog)' m_Screen);  		//Initialize to second frame in the image.  		m_SourcePosition = new Vector2 ((Image.Texture.Width / 4) * 2' 0.0f);  		m_Size = new Vector2 ();  		m_Size.X = (Image.Texture.Width) / (4);  		m_Size.Y = Image.Texture.Height;  		Position = new Vector2 (Node.ButtonPosition.Numbers [0]' Node.ButtonPosition.Numbers [1]) + m_Screen.Position;  	}  } else {  	if (Result.State.Image != "") {  		Image = m_Screen.GetImage (Result.State.Image' true);  		//Initialize to second frame in the image.  		m_SourcePosition = new Vector2 ((Image.Texture.Width / 4) * 2' 0.0f);  		m_Size = new Vector2 ();  		m_Size.X = (Image.Texture.Width) / (4);  		m_Size.Y = Image.Texture.Height;  	} else {  		if (Result.State.TextButton) {  			m_Text = Result.State.Caption;  			//Text buttons always use this image.  			Image = new UIImage (FileManager.GetTexture ((ulong)FileIDs.UIFileIDs.buttontiledialog)' m_Screen);  			//Initialize to second frame in the image.  			if (Result.State.Size == null)  				m_SourcePosition = new Vector2 ((Image.Texture.Width / 4) * 2' 0.0f);  			m_Size = new Vector2 ();  			m_Size.X = Image.Texture.Width / 4;  			m_Size.Y = Image.Texture.Height;  		} else {  			if (Node.Image != null)  				Image = m_Screen.GetImage (Node.Image' false);  			else  				Image = new UIImage (FileManager.GetTexture ((ulong)FileIDs.UIFileIDs.buttontiledialog)' m_Screen);  			//Initialize to second frame in the image.  			m_SourcePosition = new Vector2 ((Image.Texture.Width / (4)) * 2' 0.0f);  			m_Size = new Vector2 ();  			m_Size.X = (Image.Texture.Width) / (4);  			m_Size.Y = Image.Texture.Height;  		}  	}  	Position = new Vector2 (Node.ButtonPosition.Numbers [0]' Node.ButtonPosition.Numbers [1]) + m_Screen.Position;  	if (Result.State.Tooltip != "")  		Tooltip = m_Screen.GetString (Result.State.Tooltip);  }  
Magic Number,Gonzo.Elements,UIButton,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The following statement contains a magic number: if (!Result.State.InSharedPropertiesGroup) {  	if (Node.Image != null) {  		Image = m_Screen.GetImage (Node.Image' false);  		//Initialize to second frame in the image.  		m_SourcePosition = new Vector2 ((Image.Texture.Width / (4)) * 2' 0.0f);  		m_Size = new Vector2 ();  		m_Size.X = (Image.Texture.Width) / (4);  		m_Size.Y = Image.Texture.Height;  		Position = new Vector2 (Node.ButtonPosition.Numbers [0]' Node.ButtonPosition.Numbers [1]) + m_Screen.Position;  	} else {  		Image = new UIImage (FileManager.GetTexture ((ulong)FileIDs.UIFileIDs.buttontiledialog)' m_Screen);  		//Initialize to second frame in the image.  		m_SourcePosition = new Vector2 ((Image.Texture.Width / 4) * 2' 0.0f);  		m_Size = new Vector2 ();  		m_Size.X = (Image.Texture.Width) / (4);  		m_Size.Y = Image.Texture.Height;  		Position = new Vector2 (Node.ButtonPosition.Numbers [0]' Node.ButtonPosition.Numbers [1]) + m_Screen.Position;  	}  } else {  	if (Result.State.Image != "") {  		Image = m_Screen.GetImage (Result.State.Image' true);  		//Initialize to second frame in the image.  		m_SourcePosition = new Vector2 ((Image.Texture.Width / 4) * 2' 0.0f);  		m_Size = new Vector2 ();  		m_Size.X = (Image.Texture.Width) / (4);  		m_Size.Y = Image.Texture.Height;  	} else {  		if (Result.State.TextButton) {  			m_Text = Result.State.Caption;  			//Text buttons always use this image.  			Image = new UIImage (FileManager.GetTexture ((ulong)FileIDs.UIFileIDs.buttontiledialog)' m_Screen);  			//Initialize to second frame in the image.  			if (Result.State.Size == null)  				m_SourcePosition = new Vector2 ((Image.Texture.Width / 4) * 2' 0.0f);  			m_Size = new Vector2 ();  			m_Size.X = Image.Texture.Width / 4;  			m_Size.Y = Image.Texture.Height;  		} else {  			if (Node.Image != null)  				Image = m_Screen.GetImage (Node.Image' false);  			else  				Image = new UIImage (FileManager.GetTexture ((ulong)FileIDs.UIFileIDs.buttontiledialog)' m_Screen);  			//Initialize to second frame in the image.  			m_SourcePosition = new Vector2 ((Image.Texture.Width / (4)) * 2' 0.0f);  			m_Size = new Vector2 ();  			m_Size.X = (Image.Texture.Width) / (4);  			m_Size.Y = Image.Texture.Height;  		}  	}  	Position = new Vector2 (Node.ButtonPosition.Numbers [0]' Node.ButtonPosition.Numbers [1]) + m_Screen.Position;  	if (Result.State.Tooltip != "")  		Tooltip = m_Screen.GetString (Result.State.Tooltip);  }  
Magic Number,Gonzo.Elements,UIButton,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The following statement contains a magic number: if (!Result.State.InSharedPropertiesGroup) {  	if (Node.Image != null) {  		Image = m_Screen.GetImage (Node.Image' false);  		//Initialize to second frame in the image.  		m_SourcePosition = new Vector2 ((Image.Texture.Width / (4)) * 2' 0.0f);  		m_Size = new Vector2 ();  		m_Size.X = (Image.Texture.Width) / (4);  		m_Size.Y = Image.Texture.Height;  		Position = new Vector2 (Node.ButtonPosition.Numbers [0]' Node.ButtonPosition.Numbers [1]) + m_Screen.Position;  	} else {  		Image = new UIImage (FileManager.GetTexture ((ulong)FileIDs.UIFileIDs.buttontiledialog)' m_Screen);  		//Initialize to second frame in the image.  		m_SourcePosition = new Vector2 ((Image.Texture.Width / 4) * 2' 0.0f);  		m_Size = new Vector2 ();  		m_Size.X = (Image.Texture.Width) / (4);  		m_Size.Y = Image.Texture.Height;  		Position = new Vector2 (Node.ButtonPosition.Numbers [0]' Node.ButtonPosition.Numbers [1]) + m_Screen.Position;  	}  } else {  	if (Result.State.Image != "") {  		Image = m_Screen.GetImage (Result.State.Image' true);  		//Initialize to second frame in the image.  		m_SourcePosition = new Vector2 ((Image.Texture.Width / 4) * 2' 0.0f);  		m_Size = new Vector2 ();  		m_Size.X = (Image.Texture.Width) / (4);  		m_Size.Y = Image.Texture.Height;  	} else {  		if (Result.State.TextButton) {  			m_Text = Result.State.Caption;  			//Text buttons always use this image.  			Image = new UIImage (FileManager.GetTexture ((ulong)FileIDs.UIFileIDs.buttontiledialog)' m_Screen);  			//Initialize to second frame in the image.  			if (Result.State.Size == null)  				m_SourcePosition = new Vector2 ((Image.Texture.Width / 4) * 2' 0.0f);  			m_Size = new Vector2 ();  			m_Size.X = Image.Texture.Width / 4;  			m_Size.Y = Image.Texture.Height;  		} else {  			if (Node.Image != null)  				Image = m_Screen.GetImage (Node.Image' false);  			else  				Image = new UIImage (FileManager.GetTexture ((ulong)FileIDs.UIFileIDs.buttontiledialog)' m_Screen);  			//Initialize to second frame in the image.  			m_SourcePosition = new Vector2 ((Image.Texture.Width / (4)) * 2' 0.0f);  			m_Size = new Vector2 ();  			m_Size.X = (Image.Texture.Width) / (4);  			m_Size.Y = Image.Texture.Height;  		}  	}  	Position = new Vector2 (Node.ButtonPosition.Numbers [0]' Node.ButtonPosition.Numbers [1]) + m_Screen.Position;  	if (Result.State.Tooltip != "")  		Tooltip = m_Screen.GetString (Result.State.Tooltip);  }  
Magic Number,Gonzo.Elements,UIButton,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The following statement contains a magic number: if (!Result.State.InSharedPropertiesGroup) {  	if (Node.Image != null) {  		Image = m_Screen.GetImage (Node.Image' false);  		//Initialize to second frame in the image.  		m_SourcePosition = new Vector2 ((Image.Texture.Width / (4)) * 2' 0.0f);  		m_Size = new Vector2 ();  		m_Size.X = (Image.Texture.Width) / (4);  		m_Size.Y = Image.Texture.Height;  		Position = new Vector2 (Node.ButtonPosition.Numbers [0]' Node.ButtonPosition.Numbers [1]) + m_Screen.Position;  	} else {  		Image = new UIImage (FileManager.GetTexture ((ulong)FileIDs.UIFileIDs.buttontiledialog)' m_Screen);  		//Initialize to second frame in the image.  		m_SourcePosition = new Vector2 ((Image.Texture.Width / 4) * 2' 0.0f);  		m_Size = new Vector2 ();  		m_Size.X = (Image.Texture.Width) / (4);  		m_Size.Y = Image.Texture.Height;  		Position = new Vector2 (Node.ButtonPosition.Numbers [0]' Node.ButtonPosition.Numbers [1]) + m_Screen.Position;  	}  } else {  	if (Result.State.Image != "") {  		Image = m_Screen.GetImage (Result.State.Image' true);  		//Initialize to second frame in the image.  		m_SourcePosition = new Vector2 ((Image.Texture.Width / 4) * 2' 0.0f);  		m_Size = new Vector2 ();  		m_Size.X = (Image.Texture.Width) / (4);  		m_Size.Y = Image.Texture.Height;  	} else {  		if (Result.State.TextButton) {  			m_Text = Result.State.Caption;  			//Text buttons always use this image.  			Image = new UIImage (FileManager.GetTexture ((ulong)FileIDs.UIFileIDs.buttontiledialog)' m_Screen);  			//Initialize to second frame in the image.  			if (Result.State.Size == null)  				m_SourcePosition = new Vector2 ((Image.Texture.Width / 4) * 2' 0.0f);  			m_Size = new Vector2 ();  			m_Size.X = Image.Texture.Width / 4;  			m_Size.Y = Image.Texture.Height;  		} else {  			if (Node.Image != null)  				Image = m_Screen.GetImage (Node.Image' false);  			else  				Image = new UIImage (FileManager.GetTexture ((ulong)FileIDs.UIFileIDs.buttontiledialog)' m_Screen);  			//Initialize to second frame in the image.  			m_SourcePosition = new Vector2 ((Image.Texture.Width / (4)) * 2' 0.0f);  			m_Size = new Vector2 ();  			m_Size.X = (Image.Texture.Width) / (4);  			m_Size.Y = Image.Texture.Height;  		}  	}  	Position = new Vector2 (Node.ButtonPosition.Numbers [0]' Node.ButtonPosition.Numbers [1]) + m_Screen.Position;  	if (Result.State.Tooltip != "")  		Tooltip = m_Screen.GetString (Result.State.Tooltip);  }  
Magic Number,Gonzo.Elements,UIButton,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The following statement contains a magic number: if (!Result.State.InSharedPropertiesGroup) {  	if (Node.Image != null) {  		Image = m_Screen.GetImage (Node.Image' false);  		//Initialize to second frame in the image.  		m_SourcePosition = new Vector2 ((Image.Texture.Width / (4)) * 2' 0.0f);  		m_Size = new Vector2 ();  		m_Size.X = (Image.Texture.Width) / (4);  		m_Size.Y = Image.Texture.Height;  		Position = new Vector2 (Node.ButtonPosition.Numbers [0]' Node.ButtonPosition.Numbers [1]) + m_Screen.Position;  	} else {  		Image = new UIImage (FileManager.GetTexture ((ulong)FileIDs.UIFileIDs.buttontiledialog)' m_Screen);  		//Initialize to second frame in the image.  		m_SourcePosition = new Vector2 ((Image.Texture.Width / 4) * 2' 0.0f);  		m_Size = new Vector2 ();  		m_Size.X = (Image.Texture.Width) / (4);  		m_Size.Y = Image.Texture.Height;  		Position = new Vector2 (Node.ButtonPosition.Numbers [0]' Node.ButtonPosition.Numbers [1]) + m_Screen.Position;  	}  } else {  	if (Result.State.Image != "") {  		Image = m_Screen.GetImage (Result.State.Image' true);  		//Initialize to second frame in the image.  		m_SourcePosition = new Vector2 ((Image.Texture.Width / 4) * 2' 0.0f);  		m_Size = new Vector2 ();  		m_Size.X = (Image.Texture.Width) / (4);  		m_Size.Y = Image.Texture.Height;  	} else {  		if (Result.State.TextButton) {  			m_Text = Result.State.Caption;  			//Text buttons always use this image.  			Image = new UIImage (FileManager.GetTexture ((ulong)FileIDs.UIFileIDs.buttontiledialog)' m_Screen);  			//Initialize to second frame in the image.  			if (Result.State.Size == null)  				m_SourcePosition = new Vector2 ((Image.Texture.Width / 4) * 2' 0.0f);  			m_Size = new Vector2 ();  			m_Size.X = Image.Texture.Width / 4;  			m_Size.Y = Image.Texture.Height;  		} else {  			if (Node.Image != null)  				Image = m_Screen.GetImage (Node.Image' false);  			else  				Image = new UIImage (FileManager.GetTexture ((ulong)FileIDs.UIFileIDs.buttontiledialog)' m_Screen);  			//Initialize to second frame in the image.  			m_SourcePosition = new Vector2 ((Image.Texture.Width / (4)) * 2' 0.0f);  			m_Size = new Vector2 ();  			m_Size.X = (Image.Texture.Width) / (4);  			m_Size.Y = Image.Texture.Height;  		}  	}  	Position = new Vector2 (Node.ButtonPosition.Numbers [0]' Node.ButtonPosition.Numbers [1]) + m_Screen.Position;  	if (Result.State.Tooltip != "")  		Tooltip = m_Screen.GetString (Result.State.Tooltip);  }  
Magic Number,Gonzo.Elements,UIButton,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The following statement contains a magic number: if (!Result.State.InSharedPropertiesGroup) {  	if (Node.Image != null) {  		Image = m_Screen.GetImage (Node.Image' false);  		//Initialize to second frame in the image.  		m_SourcePosition = new Vector2 ((Image.Texture.Width / (4)) * 2' 0.0f);  		m_Size = new Vector2 ();  		m_Size.X = (Image.Texture.Width) / (4);  		m_Size.Y = Image.Texture.Height;  		Position = new Vector2 (Node.ButtonPosition.Numbers [0]' Node.ButtonPosition.Numbers [1]) + m_Screen.Position;  	} else {  		Image = new UIImage (FileManager.GetTexture ((ulong)FileIDs.UIFileIDs.buttontiledialog)' m_Screen);  		//Initialize to second frame in the image.  		m_SourcePosition = new Vector2 ((Image.Texture.Width / 4) * 2' 0.0f);  		m_Size = new Vector2 ();  		m_Size.X = (Image.Texture.Width) / (4);  		m_Size.Y = Image.Texture.Height;  		Position = new Vector2 (Node.ButtonPosition.Numbers [0]' Node.ButtonPosition.Numbers [1]) + m_Screen.Position;  	}  } else {  	if (Result.State.Image != "") {  		Image = m_Screen.GetImage (Result.State.Image' true);  		//Initialize to second frame in the image.  		m_SourcePosition = new Vector2 ((Image.Texture.Width / 4) * 2' 0.0f);  		m_Size = new Vector2 ();  		m_Size.X = (Image.Texture.Width) / (4);  		m_Size.Y = Image.Texture.Height;  	} else {  		if (Result.State.TextButton) {  			m_Text = Result.State.Caption;  			//Text buttons always use this image.  			Image = new UIImage (FileManager.GetTexture ((ulong)FileIDs.UIFileIDs.buttontiledialog)' m_Screen);  			//Initialize to second frame in the image.  			if (Result.State.Size == null)  				m_SourcePosition = new Vector2 ((Image.Texture.Width / 4) * 2' 0.0f);  			m_Size = new Vector2 ();  			m_Size.X = Image.Texture.Width / 4;  			m_Size.Y = Image.Texture.Height;  		} else {  			if (Node.Image != null)  				Image = m_Screen.GetImage (Node.Image' false);  			else  				Image = new UIImage (FileManager.GetTexture ((ulong)FileIDs.UIFileIDs.buttontiledialog)' m_Screen);  			//Initialize to second frame in the image.  			m_SourcePosition = new Vector2 ((Image.Texture.Width / (4)) * 2' 0.0f);  			m_Size = new Vector2 ();  			m_Size.X = (Image.Texture.Width) / (4);  			m_Size.Y = Image.Texture.Height;  		}  	}  	Position = new Vector2 (Node.ButtonPosition.Numbers [0]' Node.ButtonPosition.Numbers [1]) + m_Screen.Position;  	if (Result.State.Tooltip != "")  		Tooltip = m_Screen.GetString (Result.State.Tooltip);  }  
Magic Number,Gonzo.Elements,UIButton,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The following statement contains a magic number: if (!Result.State.InSharedPropertiesGroup) {  	if (Node.Image != null) {  		Image = m_Screen.GetImage (Node.Image' false);  		//Initialize to second frame in the image.  		m_SourcePosition = new Vector2 ((Image.Texture.Width / (4)) * 2' 0.0f);  		m_Size = new Vector2 ();  		m_Size.X = (Image.Texture.Width) / (4);  		m_Size.Y = Image.Texture.Height;  		Position = new Vector2 (Node.ButtonPosition.Numbers [0]' Node.ButtonPosition.Numbers [1]) + m_Screen.Position;  	} else {  		Image = new UIImage (FileManager.GetTexture ((ulong)FileIDs.UIFileIDs.buttontiledialog)' m_Screen);  		//Initialize to second frame in the image.  		m_SourcePosition = new Vector2 ((Image.Texture.Width / 4) * 2' 0.0f);  		m_Size = new Vector2 ();  		m_Size.X = (Image.Texture.Width) / (4);  		m_Size.Y = Image.Texture.Height;  		Position = new Vector2 (Node.ButtonPosition.Numbers [0]' Node.ButtonPosition.Numbers [1]) + m_Screen.Position;  	}  } else {  	if (Result.State.Image != "") {  		Image = m_Screen.GetImage (Result.State.Image' true);  		//Initialize to second frame in the image.  		m_SourcePosition = new Vector2 ((Image.Texture.Width / 4) * 2' 0.0f);  		m_Size = new Vector2 ();  		m_Size.X = (Image.Texture.Width) / (4);  		m_Size.Y = Image.Texture.Height;  	} else {  		if (Result.State.TextButton) {  			m_Text = Result.State.Caption;  			//Text buttons always use this image.  			Image = new UIImage (FileManager.GetTexture ((ulong)FileIDs.UIFileIDs.buttontiledialog)' m_Screen);  			//Initialize to second frame in the image.  			if (Result.State.Size == null)  				m_SourcePosition = new Vector2 ((Image.Texture.Width / 4) * 2' 0.0f);  			m_Size = new Vector2 ();  			m_Size.X = Image.Texture.Width / 4;  			m_Size.Y = Image.Texture.Height;  		} else {  			if (Node.Image != null)  				Image = m_Screen.GetImage (Node.Image' false);  			else  				Image = new UIImage (FileManager.GetTexture ((ulong)FileIDs.UIFileIDs.buttontiledialog)' m_Screen);  			//Initialize to second frame in the image.  			m_SourcePosition = new Vector2 ((Image.Texture.Width / (4)) * 2' 0.0f);  			m_Size = new Vector2 ();  			m_Size.X = (Image.Texture.Width) / (4);  			m_Size.Y = Image.Texture.Height;  		}  	}  	Position = new Vector2 (Node.ButtonPosition.Numbers [0]' Node.ButtonPosition.Numbers [1]) + m_Screen.Position;  	if (Result.State.Tooltip != "")  		Tooltip = m_Screen.GetString (Result.State.Tooltip);  }  
Magic Number,Gonzo.Elements,UIButton,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The following statement contains a magic number: if (!Result.State.InSharedPropertiesGroup) {  	if (Node.Image != null) {  		Image = m_Screen.GetImage (Node.Image' false);  		//Initialize to second frame in the image.  		m_SourcePosition = new Vector2 ((Image.Texture.Width / (4)) * 2' 0.0f);  		m_Size = new Vector2 ();  		m_Size.X = (Image.Texture.Width) / (4);  		m_Size.Y = Image.Texture.Height;  		Position = new Vector2 (Node.ButtonPosition.Numbers [0]' Node.ButtonPosition.Numbers [1]) + m_Screen.Position;  	} else {  		Image = new UIImage (FileManager.GetTexture ((ulong)FileIDs.UIFileIDs.buttontiledialog)' m_Screen);  		//Initialize to second frame in the image.  		m_SourcePosition = new Vector2 ((Image.Texture.Width / 4) * 2' 0.0f);  		m_Size = new Vector2 ();  		m_Size.X = (Image.Texture.Width) / (4);  		m_Size.Y = Image.Texture.Height;  		Position = new Vector2 (Node.ButtonPosition.Numbers [0]' Node.ButtonPosition.Numbers [1]) + m_Screen.Position;  	}  } else {  	if (Result.State.Image != "") {  		Image = m_Screen.GetImage (Result.State.Image' true);  		//Initialize to second frame in the image.  		m_SourcePosition = new Vector2 ((Image.Texture.Width / 4) * 2' 0.0f);  		m_Size = new Vector2 ();  		m_Size.X = (Image.Texture.Width) / (4);  		m_Size.Y = Image.Texture.Height;  	} else {  		if (Result.State.TextButton) {  			m_Text = Result.State.Caption;  			//Text buttons always use this image.  			Image = new UIImage (FileManager.GetTexture ((ulong)FileIDs.UIFileIDs.buttontiledialog)' m_Screen);  			//Initialize to second frame in the image.  			if (Result.State.Size == null)  				m_SourcePosition = new Vector2 ((Image.Texture.Width / 4) * 2' 0.0f);  			m_Size = new Vector2 ();  			m_Size.X = Image.Texture.Width / 4;  			m_Size.Y = Image.Texture.Height;  		} else {  			if (Node.Image != null)  				Image = m_Screen.GetImage (Node.Image' false);  			else  				Image = new UIImage (FileManager.GetTexture ((ulong)FileIDs.UIFileIDs.buttontiledialog)' m_Screen);  			//Initialize to second frame in the image.  			m_SourcePosition = new Vector2 ((Image.Texture.Width / (4)) * 2' 0.0f);  			m_Size = new Vector2 ();  			m_Size.X = (Image.Texture.Width) / (4);  			m_Size.Y = Image.Texture.Height;  		}  	}  	Position = new Vector2 (Node.ButtonPosition.Numbers [0]' Node.ButtonPosition.Numbers [1]) + m_Screen.Position;  	if (Result.State.Tooltip != "")  		Tooltip = m_Screen.GetString (Result.State.Tooltip);  }  
Magic Number,Gonzo.Elements,UIButton,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The following statement contains a magic number: if (!Result.State.InSharedPropertiesGroup) {  	if (Node.Image != null) {  		Image = m_Screen.GetImage (Node.Image' false);  		//Initialize to second frame in the image.  		m_SourcePosition = new Vector2 ((Image.Texture.Width / (4)) * 2' 0.0f);  		m_Size = new Vector2 ();  		m_Size.X = (Image.Texture.Width) / (4);  		m_Size.Y = Image.Texture.Height;  		Position = new Vector2 (Node.ButtonPosition.Numbers [0]' Node.ButtonPosition.Numbers [1]) + m_Screen.Position;  	} else {  		Image = new UIImage (FileManager.GetTexture ((ulong)FileIDs.UIFileIDs.buttontiledialog)' m_Screen);  		//Initialize to second frame in the image.  		m_SourcePosition = new Vector2 ((Image.Texture.Width / 4) * 2' 0.0f);  		m_Size = new Vector2 ();  		m_Size.X = (Image.Texture.Width) / (4);  		m_Size.Y = Image.Texture.Height;  		Position = new Vector2 (Node.ButtonPosition.Numbers [0]' Node.ButtonPosition.Numbers [1]) + m_Screen.Position;  	}  } else {  	if (Result.State.Image != "") {  		Image = m_Screen.GetImage (Result.State.Image' true);  		//Initialize to second frame in the image.  		m_SourcePosition = new Vector2 ((Image.Texture.Width / 4) * 2' 0.0f);  		m_Size = new Vector2 ();  		m_Size.X = (Image.Texture.Width) / (4);  		m_Size.Y = Image.Texture.Height;  	} else {  		if (Result.State.TextButton) {  			m_Text = Result.State.Caption;  			//Text buttons always use this image.  			Image = new UIImage (FileManager.GetTexture ((ulong)FileIDs.UIFileIDs.buttontiledialog)' m_Screen);  			//Initialize to second frame in the image.  			if (Result.State.Size == null)  				m_SourcePosition = new Vector2 ((Image.Texture.Width / 4) * 2' 0.0f);  			m_Size = new Vector2 ();  			m_Size.X = Image.Texture.Width / 4;  			m_Size.Y = Image.Texture.Height;  		} else {  			if (Node.Image != null)  				Image = m_Screen.GetImage (Node.Image' false);  			else  				Image = new UIImage (FileManager.GetTexture ((ulong)FileIDs.UIFileIDs.buttontiledialog)' m_Screen);  			//Initialize to second frame in the image.  			m_SourcePosition = new Vector2 ((Image.Texture.Width / (4)) * 2' 0.0f);  			m_Size = new Vector2 ();  			m_Size.X = (Image.Texture.Width) / (4);  			m_Size.Y = Image.Texture.Height;  		}  	}  	Position = new Vector2 (Node.ButtonPosition.Numbers [0]' Node.ButtonPosition.Numbers [1]) + m_Screen.Position;  	if (Result.State.Tooltip != "")  		Tooltip = m_Screen.GetString (Result.State.Tooltip);  }  
Magic Number,Gonzo.Elements,UIButton,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The following statement contains a magic number: if (!Result.State.InSharedPropertiesGroup) {  	if (Node.Image != null) {  		Image = m_Screen.GetImage (Node.Image' false);  		//Initialize to second frame in the image.  		m_SourcePosition = new Vector2 ((Image.Texture.Width / (4)) * 2' 0.0f);  		m_Size = new Vector2 ();  		m_Size.X = (Image.Texture.Width) / (4);  		m_Size.Y = Image.Texture.Height;  		Position = new Vector2 (Node.ButtonPosition.Numbers [0]' Node.ButtonPosition.Numbers [1]) + m_Screen.Position;  	} else {  		Image = new UIImage (FileManager.GetTexture ((ulong)FileIDs.UIFileIDs.buttontiledialog)' m_Screen);  		//Initialize to second frame in the image.  		m_SourcePosition = new Vector2 ((Image.Texture.Width / 4) * 2' 0.0f);  		m_Size = new Vector2 ();  		m_Size.X = (Image.Texture.Width) / (4);  		m_Size.Y = Image.Texture.Height;  		Position = new Vector2 (Node.ButtonPosition.Numbers [0]' Node.ButtonPosition.Numbers [1]) + m_Screen.Position;  	}  } else {  	if (Result.State.Image != "") {  		Image = m_Screen.GetImage (Result.State.Image' true);  		//Initialize to second frame in the image.  		m_SourcePosition = new Vector2 ((Image.Texture.Width / 4) * 2' 0.0f);  		m_Size = new Vector2 ();  		m_Size.X = (Image.Texture.Width) / (4);  		m_Size.Y = Image.Texture.Height;  	} else {  		if (Result.State.TextButton) {  			m_Text = Result.State.Caption;  			//Text buttons always use this image.  			Image = new UIImage (FileManager.GetTexture ((ulong)FileIDs.UIFileIDs.buttontiledialog)' m_Screen);  			//Initialize to second frame in the image.  			if (Result.State.Size == null)  				m_SourcePosition = new Vector2 ((Image.Texture.Width / 4) * 2' 0.0f);  			m_Size = new Vector2 ();  			m_Size.X = Image.Texture.Width / 4;  			m_Size.Y = Image.Texture.Height;  		} else {  			if (Node.Image != null)  				Image = m_Screen.GetImage (Node.Image' false);  			else  				Image = new UIImage (FileManager.GetTexture ((ulong)FileIDs.UIFileIDs.buttontiledialog)' m_Screen);  			//Initialize to second frame in the image.  			m_SourcePosition = new Vector2 ((Image.Texture.Width / (4)) * 2' 0.0f);  			m_Size = new Vector2 ();  			m_Size.X = (Image.Texture.Width) / (4);  			m_Size.Y = Image.Texture.Height;  		}  	}  	Position = new Vector2 (Node.ButtonPosition.Numbers [0]' Node.ButtonPosition.Numbers [1]) + m_Screen.Position;  	if (Result.State.Tooltip != "")  		Tooltip = m_Screen.GetString (Result.State.Tooltip);  }  
Magic Number,Gonzo.Elements,UIButton,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The following statement contains a magic number: if (!Result.State.InSharedPropertiesGroup) {  	if (Node.Image != null) {  		Image = m_Screen.GetImage (Node.Image' false);  		//Initialize to second frame in the image.  		m_SourcePosition = new Vector2 ((Image.Texture.Width / (4)) * 2' 0.0f);  		m_Size = new Vector2 ();  		m_Size.X = (Image.Texture.Width) / (4);  		m_Size.Y = Image.Texture.Height;  		Position = new Vector2 (Node.ButtonPosition.Numbers [0]' Node.ButtonPosition.Numbers [1]) + m_Screen.Position;  	} else {  		Image = new UIImage (FileManager.GetTexture ((ulong)FileIDs.UIFileIDs.buttontiledialog)' m_Screen);  		//Initialize to second frame in the image.  		m_SourcePosition = new Vector2 ((Image.Texture.Width / 4) * 2' 0.0f);  		m_Size = new Vector2 ();  		m_Size.X = (Image.Texture.Width) / (4);  		m_Size.Y = Image.Texture.Height;  		Position = new Vector2 (Node.ButtonPosition.Numbers [0]' Node.ButtonPosition.Numbers [1]) + m_Screen.Position;  	}  } else {  	if (Result.State.Image != "") {  		Image = m_Screen.GetImage (Result.State.Image' true);  		//Initialize to second frame in the image.  		m_SourcePosition = new Vector2 ((Image.Texture.Width / 4) * 2' 0.0f);  		m_Size = new Vector2 ();  		m_Size.X = (Image.Texture.Width) / (4);  		m_Size.Y = Image.Texture.Height;  	} else {  		if (Result.State.TextButton) {  			m_Text = Result.State.Caption;  			//Text buttons always use this image.  			Image = new UIImage (FileManager.GetTexture ((ulong)FileIDs.UIFileIDs.buttontiledialog)' m_Screen);  			//Initialize to second frame in the image.  			if (Result.State.Size == null)  				m_SourcePosition = new Vector2 ((Image.Texture.Width / 4) * 2' 0.0f);  			m_Size = new Vector2 ();  			m_Size.X = Image.Texture.Width / 4;  			m_Size.Y = Image.Texture.Height;  		} else {  			if (Node.Image != null)  				Image = m_Screen.GetImage (Node.Image' false);  			else  				Image = new UIImage (FileManager.GetTexture ((ulong)FileIDs.UIFileIDs.buttontiledialog)' m_Screen);  			//Initialize to second frame in the image.  			m_SourcePosition = new Vector2 ((Image.Texture.Width / (4)) * 2' 0.0f);  			m_Size = new Vector2 ();  			m_Size.X = (Image.Texture.Width) / (4);  			m_Size.Y = Image.Texture.Height;  		}  	}  	Position = new Vector2 (Node.ButtonPosition.Numbers [0]' Node.ButtonPosition.Numbers [1]) + m_Screen.Position;  	if (Result.State.Tooltip != "")  		Tooltip = m_Screen.GetString (Result.State.Tooltip);  }  
Magic Number,Gonzo.Elements,UIButton,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The following statement contains a magic number: if (Node.Image != null) {  	Image = m_Screen.GetImage (Node.Image' false);  	//Initialize to second frame in the image.  	m_SourcePosition = new Vector2 ((Image.Texture.Width / (4)) * 2' 0.0f);  	m_Size = new Vector2 ();  	m_Size.X = (Image.Texture.Width) / (4);  	m_Size.Y = Image.Texture.Height;  	Position = new Vector2 (Node.ButtonPosition.Numbers [0]' Node.ButtonPosition.Numbers [1]) + m_Screen.Position;  } else {  	Image = new UIImage (FileManager.GetTexture ((ulong)FileIDs.UIFileIDs.buttontiledialog)' m_Screen);  	//Initialize to second frame in the image.  	m_SourcePosition = new Vector2 ((Image.Texture.Width / 4) * 2' 0.0f);  	m_Size = new Vector2 ();  	m_Size.X = (Image.Texture.Width) / (4);  	m_Size.Y = Image.Texture.Height;  	Position = new Vector2 (Node.ButtonPosition.Numbers [0]' Node.ButtonPosition.Numbers [1]) + m_Screen.Position;  }  
Magic Number,Gonzo.Elements,UIButton,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The following statement contains a magic number: if (Node.Image != null) {  	Image = m_Screen.GetImage (Node.Image' false);  	//Initialize to second frame in the image.  	m_SourcePosition = new Vector2 ((Image.Texture.Width / (4)) * 2' 0.0f);  	m_Size = new Vector2 ();  	m_Size.X = (Image.Texture.Width) / (4);  	m_Size.Y = Image.Texture.Height;  	Position = new Vector2 (Node.ButtonPosition.Numbers [0]' Node.ButtonPosition.Numbers [1]) + m_Screen.Position;  } else {  	Image = new UIImage (FileManager.GetTexture ((ulong)FileIDs.UIFileIDs.buttontiledialog)' m_Screen);  	//Initialize to second frame in the image.  	m_SourcePosition = new Vector2 ((Image.Texture.Width / 4) * 2' 0.0f);  	m_Size = new Vector2 ();  	m_Size.X = (Image.Texture.Width) / (4);  	m_Size.Y = Image.Texture.Height;  	Position = new Vector2 (Node.ButtonPosition.Numbers [0]' Node.ButtonPosition.Numbers [1]) + m_Screen.Position;  }  
Magic Number,Gonzo.Elements,UIButton,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The following statement contains a magic number: if (Node.Image != null) {  	Image = m_Screen.GetImage (Node.Image' false);  	//Initialize to second frame in the image.  	m_SourcePosition = new Vector2 ((Image.Texture.Width / (4)) * 2' 0.0f);  	m_Size = new Vector2 ();  	m_Size.X = (Image.Texture.Width) / (4);  	m_Size.Y = Image.Texture.Height;  	Position = new Vector2 (Node.ButtonPosition.Numbers [0]' Node.ButtonPosition.Numbers [1]) + m_Screen.Position;  } else {  	Image = new UIImage (FileManager.GetTexture ((ulong)FileIDs.UIFileIDs.buttontiledialog)' m_Screen);  	//Initialize to second frame in the image.  	m_SourcePosition = new Vector2 ((Image.Texture.Width / 4) * 2' 0.0f);  	m_Size = new Vector2 ();  	m_Size.X = (Image.Texture.Width) / (4);  	m_Size.Y = Image.Texture.Height;  	Position = new Vector2 (Node.ButtonPosition.Numbers [0]' Node.ButtonPosition.Numbers [1]) + m_Screen.Position;  }  
Magic Number,Gonzo.Elements,UIButton,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The following statement contains a magic number: if (Node.Image != null) {  	Image = m_Screen.GetImage (Node.Image' false);  	//Initialize to second frame in the image.  	m_SourcePosition = new Vector2 ((Image.Texture.Width / (4)) * 2' 0.0f);  	m_Size = new Vector2 ();  	m_Size.X = (Image.Texture.Width) / (4);  	m_Size.Y = Image.Texture.Height;  	Position = new Vector2 (Node.ButtonPosition.Numbers [0]' Node.ButtonPosition.Numbers [1]) + m_Screen.Position;  } else {  	Image = new UIImage (FileManager.GetTexture ((ulong)FileIDs.UIFileIDs.buttontiledialog)' m_Screen);  	//Initialize to second frame in the image.  	m_SourcePosition = new Vector2 ((Image.Texture.Width / 4) * 2' 0.0f);  	m_Size = new Vector2 ();  	m_Size.X = (Image.Texture.Width) / (4);  	m_Size.Y = Image.Texture.Height;  	Position = new Vector2 (Node.ButtonPosition.Numbers [0]' Node.ButtonPosition.Numbers [1]) + m_Screen.Position;  }  
Magic Number,Gonzo.Elements,UIButton,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The following statement contains a magic number: if (Node.Image != null) {  	Image = m_Screen.GetImage (Node.Image' false);  	//Initialize to second frame in the image.  	m_SourcePosition = new Vector2 ((Image.Texture.Width / (4)) * 2' 0.0f);  	m_Size = new Vector2 ();  	m_Size.X = (Image.Texture.Width) / (4);  	m_Size.Y = Image.Texture.Height;  	Position = new Vector2 (Node.ButtonPosition.Numbers [0]' Node.ButtonPosition.Numbers [1]) + m_Screen.Position;  } else {  	Image = new UIImage (FileManager.GetTexture ((ulong)FileIDs.UIFileIDs.buttontiledialog)' m_Screen);  	//Initialize to second frame in the image.  	m_SourcePosition = new Vector2 ((Image.Texture.Width / 4) * 2' 0.0f);  	m_Size = new Vector2 ();  	m_Size.X = (Image.Texture.Width) / (4);  	m_Size.Y = Image.Texture.Height;  	Position = new Vector2 (Node.ButtonPosition.Numbers [0]' Node.ButtonPosition.Numbers [1]) + m_Screen.Position;  }  
Magic Number,Gonzo.Elements,UIButton,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The following statement contains a magic number: if (Node.Image != null) {  	Image = m_Screen.GetImage (Node.Image' false);  	//Initialize to second frame in the image.  	m_SourcePosition = new Vector2 ((Image.Texture.Width / (4)) * 2' 0.0f);  	m_Size = new Vector2 ();  	m_Size.X = (Image.Texture.Width) / (4);  	m_Size.Y = Image.Texture.Height;  	Position = new Vector2 (Node.ButtonPosition.Numbers [0]' Node.ButtonPosition.Numbers [1]) + m_Screen.Position;  } else {  	Image = new UIImage (FileManager.GetTexture ((ulong)FileIDs.UIFileIDs.buttontiledialog)' m_Screen);  	//Initialize to second frame in the image.  	m_SourcePosition = new Vector2 ((Image.Texture.Width / 4) * 2' 0.0f);  	m_Size = new Vector2 ();  	m_Size.X = (Image.Texture.Width) / (4);  	m_Size.Y = Image.Texture.Height;  	Position = new Vector2 (Node.ButtonPosition.Numbers [0]' Node.ButtonPosition.Numbers [1]) + m_Screen.Position;  }  
Magic Number,Gonzo.Elements,UIButton,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The following statement contains a magic number: m_SourcePosition = new Vector2 ((Image.Texture.Width / (4)) * 2' 0.0f);  
Magic Number,Gonzo.Elements,UIButton,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The following statement contains a magic number: m_SourcePosition = new Vector2 ((Image.Texture.Width / (4)) * 2' 0.0f);  
Magic Number,Gonzo.Elements,UIButton,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The following statement contains a magic number: m_Size.X = (Image.Texture.Width) / (4);  
Magic Number,Gonzo.Elements,UIButton,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The following statement contains a magic number: m_SourcePosition = new Vector2 ((Image.Texture.Width / 4) * 2' 0.0f);  
Magic Number,Gonzo.Elements,UIButton,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The following statement contains a magic number: m_SourcePosition = new Vector2 ((Image.Texture.Width / 4) * 2' 0.0f);  
Magic Number,Gonzo.Elements,UIButton,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The following statement contains a magic number: m_Size.X = (Image.Texture.Width) / (4);  
Magic Number,Gonzo.Elements,UIButton,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The following statement contains a magic number: if (Result.State.Image != "") {  	Image = m_Screen.GetImage (Result.State.Image' true);  	//Initialize to second frame in the image.  	m_SourcePosition = new Vector2 ((Image.Texture.Width / 4) * 2' 0.0f);  	m_Size = new Vector2 ();  	m_Size.X = (Image.Texture.Width) / (4);  	m_Size.Y = Image.Texture.Height;  } else {  	if (Result.State.TextButton) {  		m_Text = Result.State.Caption;  		//Text buttons always use this image.  		Image = new UIImage (FileManager.GetTexture ((ulong)FileIDs.UIFileIDs.buttontiledialog)' m_Screen);  		//Initialize to second frame in the image.  		if (Result.State.Size == null)  			m_SourcePosition = new Vector2 ((Image.Texture.Width / 4) * 2' 0.0f);  		m_Size = new Vector2 ();  		m_Size.X = Image.Texture.Width / 4;  		m_Size.Y = Image.Texture.Height;  	} else {  		if (Node.Image != null)  			Image = m_Screen.GetImage (Node.Image' false);  		else  			Image = new UIImage (FileManager.GetTexture ((ulong)FileIDs.UIFileIDs.buttontiledialog)' m_Screen);  		//Initialize to second frame in the image.  		m_SourcePosition = new Vector2 ((Image.Texture.Width / (4)) * 2' 0.0f);  		m_Size = new Vector2 ();  		m_Size.X = (Image.Texture.Width) / (4);  		m_Size.Y = Image.Texture.Height;  	}  }  
Magic Number,Gonzo.Elements,UIButton,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The following statement contains a magic number: if (Result.State.Image != "") {  	Image = m_Screen.GetImage (Result.State.Image' true);  	//Initialize to second frame in the image.  	m_SourcePosition = new Vector2 ((Image.Texture.Width / 4) * 2' 0.0f);  	m_Size = new Vector2 ();  	m_Size.X = (Image.Texture.Width) / (4);  	m_Size.Y = Image.Texture.Height;  } else {  	if (Result.State.TextButton) {  		m_Text = Result.State.Caption;  		//Text buttons always use this image.  		Image = new UIImage (FileManager.GetTexture ((ulong)FileIDs.UIFileIDs.buttontiledialog)' m_Screen);  		//Initialize to second frame in the image.  		if (Result.State.Size == null)  			m_SourcePosition = new Vector2 ((Image.Texture.Width / 4) * 2' 0.0f);  		m_Size = new Vector2 ();  		m_Size.X = Image.Texture.Width / 4;  		m_Size.Y = Image.Texture.Height;  	} else {  		if (Node.Image != null)  			Image = m_Screen.GetImage (Node.Image' false);  		else  			Image = new UIImage (FileManager.GetTexture ((ulong)FileIDs.UIFileIDs.buttontiledialog)' m_Screen);  		//Initialize to second frame in the image.  		m_SourcePosition = new Vector2 ((Image.Texture.Width / (4)) * 2' 0.0f);  		m_Size = new Vector2 ();  		m_Size.X = (Image.Texture.Width) / (4);  		m_Size.Y = Image.Texture.Height;  	}  }  
Magic Number,Gonzo.Elements,UIButton,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The following statement contains a magic number: if (Result.State.Image != "") {  	Image = m_Screen.GetImage (Result.State.Image' true);  	//Initialize to second frame in the image.  	m_SourcePosition = new Vector2 ((Image.Texture.Width / 4) * 2' 0.0f);  	m_Size = new Vector2 ();  	m_Size.X = (Image.Texture.Width) / (4);  	m_Size.Y = Image.Texture.Height;  } else {  	if (Result.State.TextButton) {  		m_Text = Result.State.Caption;  		//Text buttons always use this image.  		Image = new UIImage (FileManager.GetTexture ((ulong)FileIDs.UIFileIDs.buttontiledialog)' m_Screen);  		//Initialize to second frame in the image.  		if (Result.State.Size == null)  			m_SourcePosition = new Vector2 ((Image.Texture.Width / 4) * 2' 0.0f);  		m_Size = new Vector2 ();  		m_Size.X = Image.Texture.Width / 4;  		m_Size.Y = Image.Texture.Height;  	} else {  		if (Node.Image != null)  			Image = m_Screen.GetImage (Node.Image' false);  		else  			Image = new UIImage (FileManager.GetTexture ((ulong)FileIDs.UIFileIDs.buttontiledialog)' m_Screen);  		//Initialize to second frame in the image.  		m_SourcePosition = new Vector2 ((Image.Texture.Width / (4)) * 2' 0.0f);  		m_Size = new Vector2 ();  		m_Size.X = (Image.Texture.Width) / (4);  		m_Size.Y = Image.Texture.Height;  	}  }  
Magic Number,Gonzo.Elements,UIButton,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The following statement contains a magic number: if (Result.State.Image != "") {  	Image = m_Screen.GetImage (Result.State.Image' true);  	//Initialize to second frame in the image.  	m_SourcePosition = new Vector2 ((Image.Texture.Width / 4) * 2' 0.0f);  	m_Size = new Vector2 ();  	m_Size.X = (Image.Texture.Width) / (4);  	m_Size.Y = Image.Texture.Height;  } else {  	if (Result.State.TextButton) {  		m_Text = Result.State.Caption;  		//Text buttons always use this image.  		Image = new UIImage (FileManager.GetTexture ((ulong)FileIDs.UIFileIDs.buttontiledialog)' m_Screen);  		//Initialize to second frame in the image.  		if (Result.State.Size == null)  			m_SourcePosition = new Vector2 ((Image.Texture.Width / 4) * 2' 0.0f);  		m_Size = new Vector2 ();  		m_Size.X = Image.Texture.Width / 4;  		m_Size.Y = Image.Texture.Height;  	} else {  		if (Node.Image != null)  			Image = m_Screen.GetImage (Node.Image' false);  		else  			Image = new UIImage (FileManager.GetTexture ((ulong)FileIDs.UIFileIDs.buttontiledialog)' m_Screen);  		//Initialize to second frame in the image.  		m_SourcePosition = new Vector2 ((Image.Texture.Width / (4)) * 2' 0.0f);  		m_Size = new Vector2 ();  		m_Size.X = (Image.Texture.Width) / (4);  		m_Size.Y = Image.Texture.Height;  	}  }  
Magic Number,Gonzo.Elements,UIButton,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The following statement contains a magic number: if (Result.State.Image != "") {  	Image = m_Screen.GetImage (Result.State.Image' true);  	//Initialize to second frame in the image.  	m_SourcePosition = new Vector2 ((Image.Texture.Width / 4) * 2' 0.0f);  	m_Size = new Vector2 ();  	m_Size.X = (Image.Texture.Width) / (4);  	m_Size.Y = Image.Texture.Height;  } else {  	if (Result.State.TextButton) {  		m_Text = Result.State.Caption;  		//Text buttons always use this image.  		Image = new UIImage (FileManager.GetTexture ((ulong)FileIDs.UIFileIDs.buttontiledialog)' m_Screen);  		//Initialize to second frame in the image.  		if (Result.State.Size == null)  			m_SourcePosition = new Vector2 ((Image.Texture.Width / 4) * 2' 0.0f);  		m_Size = new Vector2 ();  		m_Size.X = Image.Texture.Width / 4;  		m_Size.Y = Image.Texture.Height;  	} else {  		if (Node.Image != null)  			Image = m_Screen.GetImage (Node.Image' false);  		else  			Image = new UIImage (FileManager.GetTexture ((ulong)FileIDs.UIFileIDs.buttontiledialog)' m_Screen);  		//Initialize to second frame in the image.  		m_SourcePosition = new Vector2 ((Image.Texture.Width / (4)) * 2' 0.0f);  		m_Size = new Vector2 ();  		m_Size.X = (Image.Texture.Width) / (4);  		m_Size.Y = Image.Texture.Height;  	}  }  
Magic Number,Gonzo.Elements,UIButton,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The following statement contains a magic number: if (Result.State.Image != "") {  	Image = m_Screen.GetImage (Result.State.Image' true);  	//Initialize to second frame in the image.  	m_SourcePosition = new Vector2 ((Image.Texture.Width / 4) * 2' 0.0f);  	m_Size = new Vector2 ();  	m_Size.X = (Image.Texture.Width) / (4);  	m_Size.Y = Image.Texture.Height;  } else {  	if (Result.State.TextButton) {  		m_Text = Result.State.Caption;  		//Text buttons always use this image.  		Image = new UIImage (FileManager.GetTexture ((ulong)FileIDs.UIFileIDs.buttontiledialog)' m_Screen);  		//Initialize to second frame in the image.  		if (Result.State.Size == null)  			m_SourcePosition = new Vector2 ((Image.Texture.Width / 4) * 2' 0.0f);  		m_Size = new Vector2 ();  		m_Size.X = Image.Texture.Width / 4;  		m_Size.Y = Image.Texture.Height;  	} else {  		if (Node.Image != null)  			Image = m_Screen.GetImage (Node.Image' false);  		else  			Image = new UIImage (FileManager.GetTexture ((ulong)FileIDs.UIFileIDs.buttontiledialog)' m_Screen);  		//Initialize to second frame in the image.  		m_SourcePosition = new Vector2 ((Image.Texture.Width / (4)) * 2' 0.0f);  		m_Size = new Vector2 ();  		m_Size.X = (Image.Texture.Width) / (4);  		m_Size.Y = Image.Texture.Height;  	}  }  
Magic Number,Gonzo.Elements,UIButton,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The following statement contains a magic number: if (Result.State.Image != "") {  	Image = m_Screen.GetImage (Result.State.Image' true);  	//Initialize to second frame in the image.  	m_SourcePosition = new Vector2 ((Image.Texture.Width / 4) * 2' 0.0f);  	m_Size = new Vector2 ();  	m_Size.X = (Image.Texture.Width) / (4);  	m_Size.Y = Image.Texture.Height;  } else {  	if (Result.State.TextButton) {  		m_Text = Result.State.Caption;  		//Text buttons always use this image.  		Image = new UIImage (FileManager.GetTexture ((ulong)FileIDs.UIFileIDs.buttontiledialog)' m_Screen);  		//Initialize to second frame in the image.  		if (Result.State.Size == null)  			m_SourcePosition = new Vector2 ((Image.Texture.Width / 4) * 2' 0.0f);  		m_Size = new Vector2 ();  		m_Size.X = Image.Texture.Width / 4;  		m_Size.Y = Image.Texture.Height;  	} else {  		if (Node.Image != null)  			Image = m_Screen.GetImage (Node.Image' false);  		else  			Image = new UIImage (FileManager.GetTexture ((ulong)FileIDs.UIFileIDs.buttontiledialog)' m_Screen);  		//Initialize to second frame in the image.  		m_SourcePosition = new Vector2 ((Image.Texture.Width / (4)) * 2' 0.0f);  		m_Size = new Vector2 ();  		m_Size.X = (Image.Texture.Width) / (4);  		m_Size.Y = Image.Texture.Height;  	}  }  
Magic Number,Gonzo.Elements,UIButton,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The following statement contains a magic number: if (Result.State.Image != "") {  	Image = m_Screen.GetImage (Result.State.Image' true);  	//Initialize to second frame in the image.  	m_SourcePosition = new Vector2 ((Image.Texture.Width / 4) * 2' 0.0f);  	m_Size = new Vector2 ();  	m_Size.X = (Image.Texture.Width) / (4);  	m_Size.Y = Image.Texture.Height;  } else {  	if (Result.State.TextButton) {  		m_Text = Result.State.Caption;  		//Text buttons always use this image.  		Image = new UIImage (FileManager.GetTexture ((ulong)FileIDs.UIFileIDs.buttontiledialog)' m_Screen);  		//Initialize to second frame in the image.  		if (Result.State.Size == null)  			m_SourcePosition = new Vector2 ((Image.Texture.Width / 4) * 2' 0.0f);  		m_Size = new Vector2 ();  		m_Size.X = Image.Texture.Width / 4;  		m_Size.Y = Image.Texture.Height;  	} else {  		if (Node.Image != null)  			Image = m_Screen.GetImage (Node.Image' false);  		else  			Image = new UIImage (FileManager.GetTexture ((ulong)FileIDs.UIFileIDs.buttontiledialog)' m_Screen);  		//Initialize to second frame in the image.  		m_SourcePosition = new Vector2 ((Image.Texture.Width / (4)) * 2' 0.0f);  		m_Size = new Vector2 ();  		m_Size.X = (Image.Texture.Width) / (4);  		m_Size.Y = Image.Texture.Height;  	}  }  
Magic Number,Gonzo.Elements,UIButton,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The following statement contains a magic number: if (Result.State.Image != "") {  	Image = m_Screen.GetImage (Result.State.Image' true);  	//Initialize to second frame in the image.  	m_SourcePosition = new Vector2 ((Image.Texture.Width / 4) * 2' 0.0f);  	m_Size = new Vector2 ();  	m_Size.X = (Image.Texture.Width) / (4);  	m_Size.Y = Image.Texture.Height;  } else {  	if (Result.State.TextButton) {  		m_Text = Result.State.Caption;  		//Text buttons always use this image.  		Image = new UIImage (FileManager.GetTexture ((ulong)FileIDs.UIFileIDs.buttontiledialog)' m_Screen);  		//Initialize to second frame in the image.  		if (Result.State.Size == null)  			m_SourcePosition = new Vector2 ((Image.Texture.Width / 4) * 2' 0.0f);  		m_Size = new Vector2 ();  		m_Size.X = Image.Texture.Width / 4;  		m_Size.Y = Image.Texture.Height;  	} else {  		if (Node.Image != null)  			Image = m_Screen.GetImage (Node.Image' false);  		else  			Image = new UIImage (FileManager.GetTexture ((ulong)FileIDs.UIFileIDs.buttontiledialog)' m_Screen);  		//Initialize to second frame in the image.  		m_SourcePosition = new Vector2 ((Image.Texture.Width / (4)) * 2' 0.0f);  		m_Size = new Vector2 ();  		m_Size.X = (Image.Texture.Width) / (4);  		m_Size.Y = Image.Texture.Height;  	}  }  
Magic Number,Gonzo.Elements,UIButton,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The following statement contains a magic number: m_SourcePosition = new Vector2 ((Image.Texture.Width / 4) * 2' 0.0f);  
Magic Number,Gonzo.Elements,UIButton,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The following statement contains a magic number: m_SourcePosition = new Vector2 ((Image.Texture.Width / 4) * 2' 0.0f);  
Magic Number,Gonzo.Elements,UIButton,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The following statement contains a magic number: m_Size.X = (Image.Texture.Width) / (4);  
Magic Number,Gonzo.Elements,UIButton,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The following statement contains a magic number: if (Result.State.TextButton) {  	m_Text = Result.State.Caption;  	//Text buttons always use this image.  	Image = new UIImage (FileManager.GetTexture ((ulong)FileIDs.UIFileIDs.buttontiledialog)' m_Screen);  	//Initialize to second frame in the image.  	if (Result.State.Size == null)  		m_SourcePosition = new Vector2 ((Image.Texture.Width / 4) * 2' 0.0f);  	m_Size = new Vector2 ();  	m_Size.X = Image.Texture.Width / 4;  	m_Size.Y = Image.Texture.Height;  } else {  	if (Node.Image != null)  		Image = m_Screen.GetImage (Node.Image' false);  	else  		Image = new UIImage (FileManager.GetTexture ((ulong)FileIDs.UIFileIDs.buttontiledialog)' m_Screen);  	//Initialize to second frame in the image.  	m_SourcePosition = new Vector2 ((Image.Texture.Width / (4)) * 2' 0.0f);  	m_Size = new Vector2 ();  	m_Size.X = (Image.Texture.Width) / (4);  	m_Size.Y = Image.Texture.Height;  }  
Magic Number,Gonzo.Elements,UIButton,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The following statement contains a magic number: if (Result.State.TextButton) {  	m_Text = Result.State.Caption;  	//Text buttons always use this image.  	Image = new UIImage (FileManager.GetTexture ((ulong)FileIDs.UIFileIDs.buttontiledialog)' m_Screen);  	//Initialize to second frame in the image.  	if (Result.State.Size == null)  		m_SourcePosition = new Vector2 ((Image.Texture.Width / 4) * 2' 0.0f);  	m_Size = new Vector2 ();  	m_Size.X = Image.Texture.Width / 4;  	m_Size.Y = Image.Texture.Height;  } else {  	if (Node.Image != null)  		Image = m_Screen.GetImage (Node.Image' false);  	else  		Image = new UIImage (FileManager.GetTexture ((ulong)FileIDs.UIFileIDs.buttontiledialog)' m_Screen);  	//Initialize to second frame in the image.  	m_SourcePosition = new Vector2 ((Image.Texture.Width / (4)) * 2' 0.0f);  	m_Size = new Vector2 ();  	m_Size.X = (Image.Texture.Width) / (4);  	m_Size.Y = Image.Texture.Height;  }  
Magic Number,Gonzo.Elements,UIButton,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The following statement contains a magic number: if (Result.State.TextButton) {  	m_Text = Result.State.Caption;  	//Text buttons always use this image.  	Image = new UIImage (FileManager.GetTexture ((ulong)FileIDs.UIFileIDs.buttontiledialog)' m_Screen);  	//Initialize to second frame in the image.  	if (Result.State.Size == null)  		m_SourcePosition = new Vector2 ((Image.Texture.Width / 4) * 2' 0.0f);  	m_Size = new Vector2 ();  	m_Size.X = Image.Texture.Width / 4;  	m_Size.Y = Image.Texture.Height;  } else {  	if (Node.Image != null)  		Image = m_Screen.GetImage (Node.Image' false);  	else  		Image = new UIImage (FileManager.GetTexture ((ulong)FileIDs.UIFileIDs.buttontiledialog)' m_Screen);  	//Initialize to second frame in the image.  	m_SourcePosition = new Vector2 ((Image.Texture.Width / (4)) * 2' 0.0f);  	m_Size = new Vector2 ();  	m_Size.X = (Image.Texture.Width) / (4);  	m_Size.Y = Image.Texture.Height;  }  
Magic Number,Gonzo.Elements,UIButton,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The following statement contains a magic number: if (Result.State.TextButton) {  	m_Text = Result.State.Caption;  	//Text buttons always use this image.  	Image = new UIImage (FileManager.GetTexture ((ulong)FileIDs.UIFileIDs.buttontiledialog)' m_Screen);  	//Initialize to second frame in the image.  	if (Result.State.Size == null)  		m_SourcePosition = new Vector2 ((Image.Texture.Width / 4) * 2' 0.0f);  	m_Size = new Vector2 ();  	m_Size.X = Image.Texture.Width / 4;  	m_Size.Y = Image.Texture.Height;  } else {  	if (Node.Image != null)  		Image = m_Screen.GetImage (Node.Image' false);  	else  		Image = new UIImage (FileManager.GetTexture ((ulong)FileIDs.UIFileIDs.buttontiledialog)' m_Screen);  	//Initialize to second frame in the image.  	m_SourcePosition = new Vector2 ((Image.Texture.Width / (4)) * 2' 0.0f);  	m_Size = new Vector2 ();  	m_Size.X = (Image.Texture.Width) / (4);  	m_Size.Y = Image.Texture.Height;  }  
Magic Number,Gonzo.Elements,UIButton,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The following statement contains a magic number: if (Result.State.TextButton) {  	m_Text = Result.State.Caption;  	//Text buttons always use this image.  	Image = new UIImage (FileManager.GetTexture ((ulong)FileIDs.UIFileIDs.buttontiledialog)' m_Screen);  	//Initialize to second frame in the image.  	if (Result.State.Size == null)  		m_SourcePosition = new Vector2 ((Image.Texture.Width / 4) * 2' 0.0f);  	m_Size = new Vector2 ();  	m_Size.X = Image.Texture.Width / 4;  	m_Size.Y = Image.Texture.Height;  } else {  	if (Node.Image != null)  		Image = m_Screen.GetImage (Node.Image' false);  	else  		Image = new UIImage (FileManager.GetTexture ((ulong)FileIDs.UIFileIDs.buttontiledialog)' m_Screen);  	//Initialize to second frame in the image.  	m_SourcePosition = new Vector2 ((Image.Texture.Width / (4)) * 2' 0.0f);  	m_Size = new Vector2 ();  	m_Size.X = (Image.Texture.Width) / (4);  	m_Size.Y = Image.Texture.Height;  }  
Magic Number,Gonzo.Elements,UIButton,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The following statement contains a magic number: if (Result.State.TextButton) {  	m_Text = Result.State.Caption;  	//Text buttons always use this image.  	Image = new UIImage (FileManager.GetTexture ((ulong)FileIDs.UIFileIDs.buttontiledialog)' m_Screen);  	//Initialize to second frame in the image.  	if (Result.State.Size == null)  		m_SourcePosition = new Vector2 ((Image.Texture.Width / 4) * 2' 0.0f);  	m_Size = new Vector2 ();  	m_Size.X = Image.Texture.Width / 4;  	m_Size.Y = Image.Texture.Height;  } else {  	if (Node.Image != null)  		Image = m_Screen.GetImage (Node.Image' false);  	else  		Image = new UIImage (FileManager.GetTexture ((ulong)FileIDs.UIFileIDs.buttontiledialog)' m_Screen);  	//Initialize to second frame in the image.  	m_SourcePosition = new Vector2 ((Image.Texture.Width / (4)) * 2' 0.0f);  	m_Size = new Vector2 ();  	m_Size.X = (Image.Texture.Width) / (4);  	m_Size.Y = Image.Texture.Height;  }  
Magic Number,Gonzo.Elements,UIButton,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The following statement contains a magic number: if (Result.State.Size == null)  	m_SourcePosition = new Vector2 ((Image.Texture.Width / 4) * 2' 0.0f);  
Magic Number,Gonzo.Elements,UIButton,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The following statement contains a magic number: if (Result.State.Size == null)  	m_SourcePosition = new Vector2 ((Image.Texture.Width / 4) * 2' 0.0f);  
Magic Number,Gonzo.Elements,UIButton,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The following statement contains a magic number: m_SourcePosition = new Vector2 ((Image.Texture.Width / 4) * 2' 0.0f);  
Magic Number,Gonzo.Elements,UIButton,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The following statement contains a magic number: m_SourcePosition = new Vector2 ((Image.Texture.Width / 4) * 2' 0.0f);  
Magic Number,Gonzo.Elements,UIButton,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The following statement contains a magic number: m_Size.X = Image.Texture.Width / 4;  
Magic Number,Gonzo.Elements,UIButton,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The following statement contains a magic number: m_SourcePosition = new Vector2 ((Image.Texture.Width / (4)) * 2' 0.0f);  
Magic Number,Gonzo.Elements,UIButton,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The following statement contains a magic number: m_SourcePosition = new Vector2 ((Image.Texture.Width / (4)) * 2' 0.0f);  
Magic Number,Gonzo.Elements,UIButton,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The following statement contains a magic number: m_Size.X = (Image.Texture.Width) / (4);  
Magic Number,Gonzo.Elements,UIButton,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The following statement contains a magic number: if (Node.Font != null) {  	int FontSize = (int)Node.Font;  	switch (FontSize) {  	case 9:  		m_Font = Screen.Font9px;  		break;  	case 10:  		m_Font = Screen.Font10px;  		break;  	case 12:  		m_Font = Screen.Font12px;  		break;  	case 14:  		m_Font = Screen.Font14px;  		break;  	case 16:  		m_Font = Screen.Font16px;  		break;  	}  } else if (Result.State.Font != 0) {  	switch (Result.State.Font) {  	case 9:  		m_Font = Screen.Font9px;  		break;  	case 10:  		m_Font = Screen.Font10px;  		break;  	case 12:  		m_Font = Screen.Font12px;  		break;  	case 14:  		m_Font = Screen.Font14px;  		break;  	case 16:  		m_Font = Screen.Font16px;  		break;  	default:  		m_Font = Screen.Font12px;  		break;  	}  }  
Magic Number,Gonzo.Elements,UIButton,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The following statement contains a magic number: if (Node.Font != null) {  	int FontSize = (int)Node.Font;  	switch (FontSize) {  	case 9:  		m_Font = Screen.Font9px;  		break;  	case 10:  		m_Font = Screen.Font10px;  		break;  	case 12:  		m_Font = Screen.Font12px;  		break;  	case 14:  		m_Font = Screen.Font14px;  		break;  	case 16:  		m_Font = Screen.Font16px;  		break;  	}  } else if (Result.State.Font != 0) {  	switch (Result.State.Font) {  	case 9:  		m_Font = Screen.Font9px;  		break;  	case 10:  		m_Font = Screen.Font10px;  		break;  	case 12:  		m_Font = Screen.Font12px;  		break;  	case 14:  		m_Font = Screen.Font14px;  		break;  	case 16:  		m_Font = Screen.Font16px;  		break;  	default:  		m_Font = Screen.Font12px;  		break;  	}  }  
Magic Number,Gonzo.Elements,UIButton,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The following statement contains a magic number: if (Node.Font != null) {  	int FontSize = (int)Node.Font;  	switch (FontSize) {  	case 9:  		m_Font = Screen.Font9px;  		break;  	case 10:  		m_Font = Screen.Font10px;  		break;  	case 12:  		m_Font = Screen.Font12px;  		break;  	case 14:  		m_Font = Screen.Font14px;  		break;  	case 16:  		m_Font = Screen.Font16px;  		break;  	}  } else if (Result.State.Font != 0) {  	switch (Result.State.Font) {  	case 9:  		m_Font = Screen.Font9px;  		break;  	case 10:  		m_Font = Screen.Font10px;  		break;  	case 12:  		m_Font = Screen.Font12px;  		break;  	case 14:  		m_Font = Screen.Font14px;  		break;  	case 16:  		m_Font = Screen.Font16px;  		break;  	default:  		m_Font = Screen.Font12px;  		break;  	}  }  
Magic Number,Gonzo.Elements,UIButton,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The following statement contains a magic number: if (Node.Font != null) {  	int FontSize = (int)Node.Font;  	switch (FontSize) {  	case 9:  		m_Font = Screen.Font9px;  		break;  	case 10:  		m_Font = Screen.Font10px;  		break;  	case 12:  		m_Font = Screen.Font12px;  		break;  	case 14:  		m_Font = Screen.Font14px;  		break;  	case 16:  		m_Font = Screen.Font16px;  		break;  	}  } else if (Result.State.Font != 0) {  	switch (Result.State.Font) {  	case 9:  		m_Font = Screen.Font9px;  		break;  	case 10:  		m_Font = Screen.Font10px;  		break;  	case 12:  		m_Font = Screen.Font12px;  		break;  	case 14:  		m_Font = Screen.Font14px;  		break;  	case 16:  		m_Font = Screen.Font16px;  		break;  	default:  		m_Font = Screen.Font12px;  		break;  	}  }  
Magic Number,Gonzo.Elements,UIButton,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The following statement contains a magic number: if (Node.Font != null) {  	int FontSize = (int)Node.Font;  	switch (FontSize) {  	case 9:  		m_Font = Screen.Font9px;  		break;  	case 10:  		m_Font = Screen.Font10px;  		break;  	case 12:  		m_Font = Screen.Font12px;  		break;  	case 14:  		m_Font = Screen.Font14px;  		break;  	case 16:  		m_Font = Screen.Font16px;  		break;  	}  } else if (Result.State.Font != 0) {  	switch (Result.State.Font) {  	case 9:  		m_Font = Screen.Font9px;  		break;  	case 10:  		m_Font = Screen.Font10px;  		break;  	case 12:  		m_Font = Screen.Font12px;  		break;  	case 14:  		m_Font = Screen.Font14px;  		break;  	case 16:  		m_Font = Screen.Font16px;  		break;  	default:  		m_Font = Screen.Font12px;  		break;  	}  }  
Magic Number,Gonzo.Elements,UIButton,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The following statement contains a magic number: if (Node.Font != null) {  	int FontSize = (int)Node.Font;  	switch (FontSize) {  	case 9:  		m_Font = Screen.Font9px;  		break;  	case 10:  		m_Font = Screen.Font10px;  		break;  	case 12:  		m_Font = Screen.Font12px;  		break;  	case 14:  		m_Font = Screen.Font14px;  		break;  	case 16:  		m_Font = Screen.Font16px;  		break;  	}  } else if (Result.State.Font != 0) {  	switch (Result.State.Font) {  	case 9:  		m_Font = Screen.Font9px;  		break;  	case 10:  		m_Font = Screen.Font10px;  		break;  	case 12:  		m_Font = Screen.Font12px;  		break;  	case 14:  		m_Font = Screen.Font14px;  		break;  	case 16:  		m_Font = Screen.Font16px;  		break;  	default:  		m_Font = Screen.Font12px;  		break;  	}  }  
Magic Number,Gonzo.Elements,UIButton,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The following statement contains a magic number: if (Node.Font != null) {  	int FontSize = (int)Node.Font;  	switch (FontSize) {  	case 9:  		m_Font = Screen.Font9px;  		break;  	case 10:  		m_Font = Screen.Font10px;  		break;  	case 12:  		m_Font = Screen.Font12px;  		break;  	case 14:  		m_Font = Screen.Font14px;  		break;  	case 16:  		m_Font = Screen.Font16px;  		break;  	}  } else if (Result.State.Font != 0) {  	switch (Result.State.Font) {  	case 9:  		m_Font = Screen.Font9px;  		break;  	case 10:  		m_Font = Screen.Font10px;  		break;  	case 12:  		m_Font = Screen.Font12px;  		break;  	case 14:  		m_Font = Screen.Font14px;  		break;  	case 16:  		m_Font = Screen.Font16px;  		break;  	default:  		m_Font = Screen.Font12px;  		break;  	}  }  
Magic Number,Gonzo.Elements,UIButton,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The following statement contains a magic number: if (Node.Font != null) {  	int FontSize = (int)Node.Font;  	switch (FontSize) {  	case 9:  		m_Font = Screen.Font9px;  		break;  	case 10:  		m_Font = Screen.Font10px;  		break;  	case 12:  		m_Font = Screen.Font12px;  		break;  	case 14:  		m_Font = Screen.Font14px;  		break;  	case 16:  		m_Font = Screen.Font16px;  		break;  	}  } else if (Result.State.Font != 0) {  	switch (Result.State.Font) {  	case 9:  		m_Font = Screen.Font9px;  		break;  	case 10:  		m_Font = Screen.Font10px;  		break;  	case 12:  		m_Font = Screen.Font12px;  		break;  	case 14:  		m_Font = Screen.Font14px;  		break;  	case 16:  		m_Font = Screen.Font16px;  		break;  	default:  		m_Font = Screen.Font12px;  		break;  	}  }  
Magic Number,Gonzo.Elements,UIButton,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The following statement contains a magic number: if (Node.Font != null) {  	int FontSize = (int)Node.Font;  	switch (FontSize) {  	case 9:  		m_Font = Screen.Font9px;  		break;  	case 10:  		m_Font = Screen.Font10px;  		break;  	case 12:  		m_Font = Screen.Font12px;  		break;  	case 14:  		m_Font = Screen.Font14px;  		break;  	case 16:  		m_Font = Screen.Font16px;  		break;  	}  } else if (Result.State.Font != 0) {  	switch (Result.State.Font) {  	case 9:  		m_Font = Screen.Font9px;  		break;  	case 10:  		m_Font = Screen.Font10px;  		break;  	case 12:  		m_Font = Screen.Font12px;  		break;  	case 14:  		m_Font = Screen.Font14px;  		break;  	case 16:  		m_Font = Screen.Font16px;  		break;  	default:  		m_Font = Screen.Font12px;  		break;  	}  }  
Magic Number,Gonzo.Elements,UIButton,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The following statement contains a magic number: if (Node.Font != null) {  	int FontSize = (int)Node.Font;  	switch (FontSize) {  	case 9:  		m_Font = Screen.Font9px;  		break;  	case 10:  		m_Font = Screen.Font10px;  		break;  	case 12:  		m_Font = Screen.Font12px;  		break;  	case 14:  		m_Font = Screen.Font14px;  		break;  	case 16:  		m_Font = Screen.Font16px;  		break;  	}  } else if (Result.State.Font != 0) {  	switch (Result.State.Font) {  	case 9:  		m_Font = Screen.Font9px;  		break;  	case 10:  		m_Font = Screen.Font10px;  		break;  	case 12:  		m_Font = Screen.Font12px;  		break;  	case 14:  		m_Font = Screen.Font14px;  		break;  	case 16:  		m_Font = Screen.Font16px;  		break;  	default:  		m_Font = Screen.Font12px;  		break;  	}  }  
Magic Number,Gonzo.Elements,UIButton,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The following statement contains a magic number: switch (FontSize) {  case 9:  	m_Font = Screen.Font9px;  	break;  case 10:  	m_Font = Screen.Font10px;  	break;  case 12:  	m_Font = Screen.Font12px;  	break;  case 14:  	m_Font = Screen.Font14px;  	break;  case 16:  	m_Font = Screen.Font16px;  	break;  }  
Magic Number,Gonzo.Elements,UIButton,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The following statement contains a magic number: switch (FontSize) {  case 9:  	m_Font = Screen.Font9px;  	break;  case 10:  	m_Font = Screen.Font10px;  	break;  case 12:  	m_Font = Screen.Font12px;  	break;  case 14:  	m_Font = Screen.Font14px;  	break;  case 16:  	m_Font = Screen.Font16px;  	break;  }  
Magic Number,Gonzo.Elements,UIButton,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The following statement contains a magic number: switch (FontSize) {  case 9:  	m_Font = Screen.Font9px;  	break;  case 10:  	m_Font = Screen.Font10px;  	break;  case 12:  	m_Font = Screen.Font12px;  	break;  case 14:  	m_Font = Screen.Font14px;  	break;  case 16:  	m_Font = Screen.Font16px;  	break;  }  
Magic Number,Gonzo.Elements,UIButton,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The following statement contains a magic number: switch (FontSize) {  case 9:  	m_Font = Screen.Font9px;  	break;  case 10:  	m_Font = Screen.Font10px;  	break;  case 12:  	m_Font = Screen.Font12px;  	break;  case 14:  	m_Font = Screen.Font14px;  	break;  case 16:  	m_Font = Screen.Font16px;  	break;  }  
Magic Number,Gonzo.Elements,UIButton,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The following statement contains a magic number: switch (FontSize) {  case 9:  	m_Font = Screen.Font9px;  	break;  case 10:  	m_Font = Screen.Font10px;  	break;  case 12:  	m_Font = Screen.Font12px;  	break;  case 14:  	m_Font = Screen.Font14px;  	break;  case 16:  	m_Font = Screen.Font16px;  	break;  }  
Magic Number,Gonzo.Elements,UIButton,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The following statement contains a magic number: if (Result.State.Font != 0) {  	switch (Result.State.Font) {  	case 9:  		m_Font = Screen.Font9px;  		break;  	case 10:  		m_Font = Screen.Font10px;  		break;  	case 12:  		m_Font = Screen.Font12px;  		break;  	case 14:  		m_Font = Screen.Font14px;  		break;  	case 16:  		m_Font = Screen.Font16px;  		break;  	default:  		m_Font = Screen.Font12px;  		break;  	}  }  
Magic Number,Gonzo.Elements,UIButton,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The following statement contains a magic number: if (Result.State.Font != 0) {  	switch (Result.State.Font) {  	case 9:  		m_Font = Screen.Font9px;  		break;  	case 10:  		m_Font = Screen.Font10px;  		break;  	case 12:  		m_Font = Screen.Font12px;  		break;  	case 14:  		m_Font = Screen.Font14px;  		break;  	case 16:  		m_Font = Screen.Font16px;  		break;  	default:  		m_Font = Screen.Font12px;  		break;  	}  }  
Magic Number,Gonzo.Elements,UIButton,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The following statement contains a magic number: if (Result.State.Font != 0) {  	switch (Result.State.Font) {  	case 9:  		m_Font = Screen.Font9px;  		break;  	case 10:  		m_Font = Screen.Font10px;  		break;  	case 12:  		m_Font = Screen.Font12px;  		break;  	case 14:  		m_Font = Screen.Font14px;  		break;  	case 16:  		m_Font = Screen.Font16px;  		break;  	default:  		m_Font = Screen.Font12px;  		break;  	}  }  
Magic Number,Gonzo.Elements,UIButton,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The following statement contains a magic number: if (Result.State.Font != 0) {  	switch (Result.State.Font) {  	case 9:  		m_Font = Screen.Font9px;  		break;  	case 10:  		m_Font = Screen.Font10px;  		break;  	case 12:  		m_Font = Screen.Font12px;  		break;  	case 14:  		m_Font = Screen.Font14px;  		break;  	case 16:  		m_Font = Screen.Font16px;  		break;  	default:  		m_Font = Screen.Font12px;  		break;  	}  }  
Magic Number,Gonzo.Elements,UIButton,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The following statement contains a magic number: if (Result.State.Font != 0) {  	switch (Result.State.Font) {  	case 9:  		m_Font = Screen.Font9px;  		break;  	case 10:  		m_Font = Screen.Font10px;  		break;  	case 12:  		m_Font = Screen.Font12px;  		break;  	case 14:  		m_Font = Screen.Font14px;  		break;  	case 16:  		m_Font = Screen.Font16px;  		break;  	default:  		m_Font = Screen.Font12px;  		break;  	}  }  
Magic Number,Gonzo.Elements,UIButton,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The following statement contains a magic number: switch (Result.State.Font) {  case 9:  	m_Font = Screen.Font9px;  	break;  case 10:  	m_Font = Screen.Font10px;  	break;  case 12:  	m_Font = Screen.Font12px;  	break;  case 14:  	m_Font = Screen.Font14px;  	break;  case 16:  	m_Font = Screen.Font16px;  	break;  default:  	m_Font = Screen.Font12px;  	break;  }  
Magic Number,Gonzo.Elements,UIButton,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The following statement contains a magic number: switch (Result.State.Font) {  case 9:  	m_Font = Screen.Font9px;  	break;  case 10:  	m_Font = Screen.Font10px;  	break;  case 12:  	m_Font = Screen.Font12px;  	break;  case 14:  	m_Font = Screen.Font14px;  	break;  case 16:  	m_Font = Screen.Font16px;  	break;  default:  	m_Font = Screen.Font12px;  	break;  }  
Magic Number,Gonzo.Elements,UIButton,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The following statement contains a magic number: switch (Result.State.Font) {  case 9:  	m_Font = Screen.Font9px;  	break;  case 10:  	m_Font = Screen.Font10px;  	break;  case 12:  	m_Font = Screen.Font12px;  	break;  case 14:  	m_Font = Screen.Font14px;  	break;  case 16:  	m_Font = Screen.Font16px;  	break;  default:  	m_Font = Screen.Font12px;  	break;  }  
Magic Number,Gonzo.Elements,UIButton,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The following statement contains a magic number: switch (Result.State.Font) {  case 9:  	m_Font = Screen.Font9px;  	break;  case 10:  	m_Font = Screen.Font10px;  	break;  case 12:  	m_Font = Screen.Font12px;  	break;  case 14:  	m_Font = Screen.Font14px;  	break;  case 16:  	m_Font = Screen.Font16px;  	break;  default:  	m_Font = Screen.Font12px;  	break;  }  
Magic Number,Gonzo.Elements,UIButton,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The following statement contains a magic number: switch (Result.State.Font) {  case 9:  	m_Font = Screen.Font9px;  	break;  case 10:  	m_Font = Screen.Font10px;  	break;  case 12:  	m_Font = Screen.Font12px;  	break;  case 14:  	m_Font = Screen.Font14px;  	break;  case 16:  	m_Font = Screen.Font16px;  	break;  default:  	m_Font = Screen.Font12px;  	break;  }  
Magic Number,Gonzo.Elements,UIButton,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The following statement contains a magic number: if (Node.TextColor != null) {  	TextColor = new Color ();  	TextColor.A = 255;  	TextColor.R = (byte)Node.TextColor.Numbers [0];  	TextColor.G = (byte)Node.TextColor.Numbers [1];  	TextColor.B = (byte)Node.TextColor.Numbers [2];  } else {  	TextColor = Result.State.TextColor;  	TextColor.A = 255;  }  
Magic Number,Gonzo.Elements,UIButton,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The following statement contains a magic number: if (Node.TextColor != null) {  	TextColor = new Color ();  	TextColor.A = 255;  	TextColor.R = (byte)Node.TextColor.Numbers [0];  	TextColor.G = (byte)Node.TextColor.Numbers [1];  	TextColor.B = (byte)Node.TextColor.Numbers [2];  } else {  	TextColor = Result.State.TextColor;  	TextColor.A = 255;  }  
Magic Number,Gonzo.Elements,UIButton,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The following statement contains a magic number: if (Node.TextColor != null) {  	TextColor = new Color ();  	TextColor.A = 255;  	TextColor.R = (byte)Node.TextColor.Numbers [0];  	TextColor.G = (byte)Node.TextColor.Numbers [1];  	TextColor.B = (byte)Node.TextColor.Numbers [2];  } else {  	TextColor = Result.State.TextColor;  	TextColor.A = 255;  }  
Magic Number,Gonzo.Elements,UIButton,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The following statement contains a magic number: TextColor.A = 255;  
Magic Number,Gonzo.Elements,UIButton,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The following statement contains a magic number: TextColor.B = (byte)Node.TextColor.Numbers [2];  
Magic Number,Gonzo.Elements,UIButton,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The following statement contains a magic number: TextColor.A = 255;  
Magic Number,Gonzo.Elements,UIButton,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The following statement contains a magic number: if (Node.TextColorSelected != null) {  	TextColorSelected = new Color ();  	TextColorSelected.A = 255;  	TextColorSelected.R = (byte)Node.TextColorSelected.Numbers [0];  	TextColorSelected.G = (byte)Node.TextColorSelected.Numbers [1];  	TextColorSelected.B = (byte)Node.TextColorSelected.Numbers [2];  } else {  	TextColorSelected = Result.State.TextColorSelected;  	TextColorSelected.A = 255;  }  
Magic Number,Gonzo.Elements,UIButton,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The following statement contains a magic number: if (Node.TextColorSelected != null) {  	TextColorSelected = new Color ();  	TextColorSelected.A = 255;  	TextColorSelected.R = (byte)Node.TextColorSelected.Numbers [0];  	TextColorSelected.G = (byte)Node.TextColorSelected.Numbers [1];  	TextColorSelected.B = (byte)Node.TextColorSelected.Numbers [2];  } else {  	TextColorSelected = Result.State.TextColorSelected;  	TextColorSelected.A = 255;  }  
Magic Number,Gonzo.Elements,UIButton,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The following statement contains a magic number: if (Node.TextColorSelected != null) {  	TextColorSelected = new Color ();  	TextColorSelected.A = 255;  	TextColorSelected.R = (byte)Node.TextColorSelected.Numbers [0];  	TextColorSelected.G = (byte)Node.TextColorSelected.Numbers [1];  	TextColorSelected.B = (byte)Node.TextColorSelected.Numbers [2];  } else {  	TextColorSelected = Result.State.TextColorSelected;  	TextColorSelected.A = 255;  }  
Magic Number,Gonzo.Elements,UIButton,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The following statement contains a magic number: TextColorSelected.A = 255;  
Magic Number,Gonzo.Elements,UIButton,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The following statement contains a magic number: TextColorSelected.B = (byte)Node.TextColorSelected.Numbers [2];  
Magic Number,Gonzo.Elements,UIButton,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The following statement contains a magic number: TextColorSelected.A = 255;  
Magic Number,Gonzo.Elements,UIButton,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The following statement contains a magic number: if (Node.TextColorHighlighted != null) {  	TextColorHighlighted = new Color ();  	TextColorHighlighted.A = 255;  	TextColorHighlighted.R = (byte)Node.TextColorHighlighted.Numbers [0];  	TextColorHighlighted.G = (byte)Node.TextColorHighlighted.Numbers [1];  	TextColorHighlighted.B = (byte)Node.TextColorHighlighted.Numbers [2];  } else {  	TextColorHighlighted = Result.State.TextColorHighlighted;  	TextColorHighlighted.A = 255;  }  
Magic Number,Gonzo.Elements,UIButton,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The following statement contains a magic number: if (Node.TextColorHighlighted != null) {  	TextColorHighlighted = new Color ();  	TextColorHighlighted.A = 255;  	TextColorHighlighted.R = (byte)Node.TextColorHighlighted.Numbers [0];  	TextColorHighlighted.G = (byte)Node.TextColorHighlighted.Numbers [1];  	TextColorHighlighted.B = (byte)Node.TextColorHighlighted.Numbers [2];  } else {  	TextColorHighlighted = Result.State.TextColorHighlighted;  	TextColorHighlighted.A = 255;  }  
Magic Number,Gonzo.Elements,UIButton,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The following statement contains a magic number: if (Node.TextColorHighlighted != null) {  	TextColorHighlighted = new Color ();  	TextColorHighlighted.A = 255;  	TextColorHighlighted.R = (byte)Node.TextColorHighlighted.Numbers [0];  	TextColorHighlighted.G = (byte)Node.TextColorHighlighted.Numbers [1];  	TextColorHighlighted.B = (byte)Node.TextColorHighlighted.Numbers [2];  } else {  	TextColorHighlighted = Result.State.TextColorHighlighted;  	TextColorHighlighted.A = 255;  }  
Magic Number,Gonzo.Elements,UIButton,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The following statement contains a magic number: TextColorHighlighted.A = 255;  
Magic Number,Gonzo.Elements,UIButton,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The following statement contains a magic number: TextColorHighlighted.B = (byte)Node.TextColorHighlighted.Numbers [2];  
Magic Number,Gonzo.Elements,UIButton,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The following statement contains a magic number: TextColorHighlighted.A = 255;  
Magic Number,Gonzo.Elements,UIButton,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The following statement contains a magic number: if (Node.TextColorDisabled != null) {  	TextColorDisabled = new Color ();  	TextColorDisabled.A = 255;  	TextColorDisabled.R = (byte)Node.TextColorDisabled.Numbers [0];  	TextColorDisabled.G = (byte)Node.TextColorDisabled.Numbers [1];  	TextColorDisabled.B = (byte)Node.TextColorDisabled.Numbers [2];  } else {  	TextColorDisabled = Result.State.TextColorDisabled;  	TextColorDisabled.A = 255;  }  
Magic Number,Gonzo.Elements,UIButton,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The following statement contains a magic number: if (Node.TextColorDisabled != null) {  	TextColorDisabled = new Color ();  	TextColorDisabled.A = 255;  	TextColorDisabled.R = (byte)Node.TextColorDisabled.Numbers [0];  	TextColorDisabled.G = (byte)Node.TextColorDisabled.Numbers [1];  	TextColorDisabled.B = (byte)Node.TextColorDisabled.Numbers [2];  } else {  	TextColorDisabled = Result.State.TextColorDisabled;  	TextColorDisabled.A = 255;  }  
Magic Number,Gonzo.Elements,UIButton,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The following statement contains a magic number: if (Node.TextColorDisabled != null) {  	TextColorDisabled = new Color ();  	TextColorDisabled.A = 255;  	TextColorDisabled.R = (byte)Node.TextColorDisabled.Numbers [0];  	TextColorDisabled.G = (byte)Node.TextColorDisabled.Numbers [1];  	TextColorDisabled.B = (byte)Node.TextColorDisabled.Numbers [2];  } else {  	TextColorDisabled = Result.State.TextColorDisabled;  	TextColorDisabled.A = 255;  }  
Magic Number,Gonzo.Elements,UIButton,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The following statement contains a magic number: TextColorDisabled.A = 255;  
Magic Number,Gonzo.Elements,UIButton,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The following statement contains a magic number: TextColorDisabled.B = (byte)Node.TextColorDisabled.Numbers [2];  
Magic Number,Gonzo.Elements,UIButton,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The following statement contains a magic number: TextColorDisabled.A = 255;  
Magic Number,Gonzo.Elements,UIButton,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The following statement contains a magic number: m_SourcePosition = new Vector2 ((Image.Texture.Width / 4) * 2' 0.0f);  
Magic Number,Gonzo.Elements,UIButton,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The following statement contains a magic number: m_SourcePosition = new Vector2 ((Image.Texture.Width / 4) * 2' 0.0f);  
Magic Number,Gonzo.Elements,UIButton,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The following statement contains a magic number: switch (Font) {  case 9:  	m_Font = Screen.Font9px;  	break;  case 10:  	m_Font = Screen.Font10px;  	break;  case 12:  	m_Font = Screen.Font12px;  	break;  case 14:  	m_Font = Screen.Font14px;  	break;  case 16:  	m_Font = Screen.Font16px;  	break;  default:  	m_Font = Screen.Font12px;  	break;  }  
Magic Number,Gonzo.Elements,UIButton,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The following statement contains a magic number: switch (Font) {  case 9:  	m_Font = Screen.Font9px;  	break;  case 10:  	m_Font = Screen.Font10px;  	break;  case 12:  	m_Font = Screen.Font12px;  	break;  case 14:  	m_Font = Screen.Font14px;  	break;  case 16:  	m_Font = Screen.Font16px;  	break;  default:  	m_Font = Screen.Font12px;  	break;  }  
Magic Number,Gonzo.Elements,UIButton,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The following statement contains a magic number: switch (Font) {  case 9:  	m_Font = Screen.Font9px;  	break;  case 10:  	m_Font = Screen.Font10px;  	break;  case 12:  	m_Font = Screen.Font12px;  	break;  case 14:  	m_Font = Screen.Font14px;  	break;  case 16:  	m_Font = Screen.Font16px;  	break;  default:  	m_Font = Screen.Font12px;  	break;  }  
Magic Number,Gonzo.Elements,UIButton,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The following statement contains a magic number: switch (Font) {  case 9:  	m_Font = Screen.Font9px;  	break;  case 10:  	m_Font = Screen.Font10px;  	break;  case 12:  	m_Font = Screen.Font12px;  	break;  case 14:  	m_Font = Screen.Font14px;  	break;  case 16:  	m_Font = Screen.Font16px;  	break;  default:  	m_Font = Screen.Font12px;  	break;  }  
Magic Number,Gonzo.Elements,UIButton,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The following statement contains a magic number: switch (Font) {  case 9:  	m_Font = Screen.Font9px;  	break;  case 10:  	m_Font = Screen.Font10px;  	break;  case 12:  	m_Font = Screen.Font12px;  	break;  case 14:  	m_Font = Screen.Font14px;  	break;  case 16:  	m_Font = Screen.Font16px;  	break;  default:  	m_Font = Screen.Font12px;  	break;  }  
Magic Number,Gonzo.Elements,UIButton,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The following statement contains a magic number: m_Size.X = Image.Texture.Width / 4;  
Magic Number,Gonzo.Elements,UIButton,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,ScaleToText,The following statement contains a magic number: m_TextPosition.X += (HalfX * m_XScale) - (m_Font.MeasureString (m_Text).X / 2);  
Magic Number,Gonzo.Elements,UIButton,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,ScaleToText,The following statement contains a magic number: m_TextPosition.Y += HalfY - (m_Font.MeasureString (m_Text).Y / 2);  
Magic Number,Gonzo.Elements,UIButton,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,AddImage,The following statement contains a magic number: m_Size.X = Image.Texture.Width / 4;  
Magic Number,Gonzo.Elements,UIButton,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,AddImage,The following statement contains a magic number: m_SourcePosition = new Vector2 ((Image.Texture.Width / 4) * 2' 0.0f);  
Magic Number,Gonzo.Elements,UIButton,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,AddImage,The following statement contains a magic number: m_SourcePosition = new Vector2 ((Image.Texture.Width / 4) * 2' 0.0f);  
Magic Number,Gonzo.Elements,UIButton,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,Update,The following statement contains a magic number: if (m_IsTextButton) {  	//Make the text stick to the button if/when button is moved.  	m_TextPosition = Position;  	float HalfX = m_Size.X / 2;  	float HalfY = m_Size.Y / 2;  	m_TextPosition.X += (HalfX * m_XScale) - (m_Font.MeasureString (m_Text).X / 2);  	m_TextPosition.Y += HalfY - (m_Font.MeasureString (m_Text).Y / 2);  }  
Magic Number,Gonzo.Elements,UIButton,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,Update,The following statement contains a magic number: if (m_IsTextButton) {  	//Make the text stick to the button if/when button is moved.  	m_TextPosition = Position;  	float HalfX = m_Size.X / 2;  	float HalfY = m_Size.Y / 2;  	m_TextPosition.X += (HalfX * m_XScale) - (m_Font.MeasureString (m_Text).X / 2);  	m_TextPosition.Y += HalfY - (m_Font.MeasureString (m_Text).Y / 2);  }  
Magic Number,Gonzo.Elements,UIButton,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,Update,The following statement contains a magic number: if (m_IsTextButton) {  	//Make the text stick to the button if/when button is moved.  	m_TextPosition = Position;  	float HalfX = m_Size.X / 2;  	float HalfY = m_Size.Y / 2;  	m_TextPosition.X += (HalfX * m_XScale) - (m_Font.MeasureString (m_Text).X / 2);  	m_TextPosition.Y += HalfY - (m_Font.MeasureString (m_Text).Y / 2);  }  
Magic Number,Gonzo.Elements,UIButton,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,Update,The following statement contains a magic number: if (m_IsTextButton) {  	//Make the text stick to the button if/when button is moved.  	m_TextPosition = Position;  	float HalfX = m_Size.X / 2;  	float HalfY = m_Size.Y / 2;  	m_TextPosition.X += (HalfX * m_XScale) - (m_Font.MeasureString (m_Text).X / 2);  	m_TextPosition.Y += HalfY - (m_Font.MeasureString (m_Text).Y / 2);  }  
Magic Number,Gonzo.Elements,UIButton,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,Update,The following statement contains a magic number: m_TextPosition.X += (HalfX * m_XScale) - (m_Font.MeasureString (m_Text).X / 2);  
Magic Number,Gonzo.Elements,UIButton,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,Update,The following statement contains a magic number: m_TextPosition.Y += HalfY - (m_Font.MeasureString (m_Text).Y / 2);  
Magic Number,Gonzo.Elements,UIButton,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,Update,The following statement contains a magic number: if (IsMouseOver (Input) || PixelCheck (Input' (int)m_Size.X)) {  	if (Input.IsNewPress (MouseButtons.LeftButton)) {  		if (!m_IsButtonClicked && Enabled) {  			TextDrawingColor = TextColorHighlighted;  			m_SourcePosition.X += m_Size.X;  			OnButtonClicked.Invoke (this);  			m_IsButtonClicked = true;  		} else if (Enabled == false)  			m_SourcePosition.X = m_Size.X * 3;  	} else {  		if (m_IsButtonClicked) {  			TextDrawingColor = TextColorSelected;  			m_SourcePosition.X -= m_Size.X;  		}  		m_IsButtonClicked = false;  	}  	if (!m_IsMouseHovering && Enabled) {  		TextDrawingColor = TextColorSelected;  		m_SourcePosition.X -= m_Size.X;  		m_IsMouseHovering = true;  	}  } else {  	if (Enabled) {  		TextDrawingColor = TextColor;  		m_SourcePosition.X = (m_Size.X * 2);  		m_IsMouseHovering = false;  	} else  		m_SourcePosition.X = (m_Size.X * 3);  }  
Magic Number,Gonzo.Elements,UIButton,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,Update,The following statement contains a magic number: if (IsMouseOver (Input) || PixelCheck (Input' (int)m_Size.X)) {  	if (Input.IsNewPress (MouseButtons.LeftButton)) {  		if (!m_IsButtonClicked && Enabled) {  			TextDrawingColor = TextColorHighlighted;  			m_SourcePosition.X += m_Size.X;  			OnButtonClicked.Invoke (this);  			m_IsButtonClicked = true;  		} else if (Enabled == false)  			m_SourcePosition.X = m_Size.X * 3;  	} else {  		if (m_IsButtonClicked) {  			TextDrawingColor = TextColorSelected;  			m_SourcePosition.X -= m_Size.X;  		}  		m_IsButtonClicked = false;  	}  	if (!m_IsMouseHovering && Enabled) {  		TextDrawingColor = TextColorSelected;  		m_SourcePosition.X -= m_Size.X;  		m_IsMouseHovering = true;  	}  } else {  	if (Enabled) {  		TextDrawingColor = TextColor;  		m_SourcePosition.X = (m_Size.X * 2);  		m_IsMouseHovering = false;  	} else  		m_SourcePosition.X = (m_Size.X * 3);  }  
Magic Number,Gonzo.Elements,UIButton,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,Update,The following statement contains a magic number: if (IsMouseOver (Input) || PixelCheck (Input' (int)m_Size.X)) {  	if (Input.IsNewPress (MouseButtons.LeftButton)) {  		if (!m_IsButtonClicked && Enabled) {  			TextDrawingColor = TextColorHighlighted;  			m_SourcePosition.X += m_Size.X;  			OnButtonClicked.Invoke (this);  			m_IsButtonClicked = true;  		} else if (Enabled == false)  			m_SourcePosition.X = m_Size.X * 3;  	} else {  		if (m_IsButtonClicked) {  			TextDrawingColor = TextColorSelected;  			m_SourcePosition.X -= m_Size.X;  		}  		m_IsButtonClicked = false;  	}  	if (!m_IsMouseHovering && Enabled) {  		TextDrawingColor = TextColorSelected;  		m_SourcePosition.X -= m_Size.X;  		m_IsMouseHovering = true;  	}  } else {  	if (Enabled) {  		TextDrawingColor = TextColor;  		m_SourcePosition.X = (m_Size.X * 2);  		m_IsMouseHovering = false;  	} else  		m_SourcePosition.X = (m_Size.X * 3);  }  
Magic Number,Gonzo.Elements,UIButton,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,Update,The following statement contains a magic number: if (Input.IsNewPress (MouseButtons.LeftButton)) {  	if (!m_IsButtonClicked && Enabled) {  		TextDrawingColor = TextColorHighlighted;  		m_SourcePosition.X += m_Size.X;  		OnButtonClicked.Invoke (this);  		m_IsButtonClicked = true;  	} else if (Enabled == false)  		m_SourcePosition.X = m_Size.X * 3;  } else {  	if (m_IsButtonClicked) {  		TextDrawingColor = TextColorSelected;  		m_SourcePosition.X -= m_Size.X;  	}  	m_IsButtonClicked = false;  }  
Magic Number,Gonzo.Elements,UIButton,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,Update,The following statement contains a magic number: if (!m_IsButtonClicked && Enabled) {  	TextDrawingColor = TextColorHighlighted;  	m_SourcePosition.X += m_Size.X;  	OnButtonClicked.Invoke (this);  	m_IsButtonClicked = true;  } else if (Enabled == false)  	m_SourcePosition.X = m_Size.X * 3;  
Magic Number,Gonzo.Elements,UIButton,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,Update,The following statement contains a magic number: if (Enabled == false)  	m_SourcePosition.X = m_Size.X * 3;  
Magic Number,Gonzo.Elements,UIButton,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,Update,The following statement contains a magic number: m_SourcePosition.X = m_Size.X * 3;  
Magic Number,Gonzo.Elements,UIButton,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,Update,The following statement contains a magic number: if (Enabled) {  	TextDrawingColor = TextColor;  	m_SourcePosition.X = (m_Size.X * 2);  	m_IsMouseHovering = false;  } else  	m_SourcePosition.X = (m_Size.X * 3);  
Magic Number,Gonzo.Elements,UIButton,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,Update,The following statement contains a magic number: if (Enabled) {  	TextDrawingColor = TextColor;  	m_SourcePosition.X = (m_Size.X * 2);  	m_IsMouseHovering = false;  } else  	m_SourcePosition.X = (m_Size.X * 3);  
Magic Number,Gonzo.Elements,UIButton,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,Update,The following statement contains a magic number: m_SourcePosition.X = (m_Size.X * 2);  
Magic Number,Gonzo.Elements,UIButton,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,Update,The following statement contains a magic number: m_SourcePosition.X = (m_Size.X * 3);  
Magic Number,Gonzo.Elements,UIElement,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIElement.cs,PixelCheck,The following statement contains a magic number: if (pixelPosition.X >= 0 && pixelPosition.X < Width && pixelPosition.Y >= 0 && pixelPosition.Y < Image.Texture.Height) {  	// Get the Texture Data within the Rectangle coords' in this case a 1 X 1 rectangle  	// Store the data in pixelData Array  	Image.Texture.GetData<uint> (0' new Rectangle ((int)pixelPosition.X' (int)pixelPosition.Y' (1)' (1))' PixelData' 0' 1);  	// Check if pixel in Array is non Alpha' give or take 20  	if (((PixelData [0] & 0xFF000000) >> 24) > 20)  		return true;  }  
Magic Number,Gonzo.Elements,UIElement,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIElement.cs,PixelCheck,The following statement contains a magic number: if (pixelPosition.X >= 0 && pixelPosition.X < Width && pixelPosition.Y >= 0 && pixelPosition.Y < Image.Texture.Height) {  	// Get the Texture Data within the Rectangle coords' in this case a 1 X 1 rectangle  	// Store the data in pixelData Array  	Image.Texture.GetData<uint> (0' new Rectangle ((int)pixelPosition.X' (int)pixelPosition.Y' (1)' (1))' PixelData' 0' 1);  	// Check if pixel in Array is non Alpha' give or take 20  	if (((PixelData [0] & 0xFF000000) >> 24) > 20)  		return true;  }  
Magic Number,Gonzo.Elements,UIElement,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIElement.cs,PixelCheck,The following statement contains a magic number: if (((PixelData [0] & 0xFF000000) >> 24) > 20)  	return true;  
Magic Number,Gonzo.Elements,UIElement,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIElement.cs,PixelCheck,The following statement contains a magic number: if (((PixelData [0] & 0xFF000000) >> 24) > 20)  	return true;  
Magic Number,Gonzo.Elements,UILabel,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UILabel.cs,UILabel,The following statement contains a magic number: if (Node.Color != null) {  	m_TextColor = new Color ();  	m_TextColor.A = 255;  	//Ignore opacity' The Sims Online doesn't support transparent text.  	m_TextColor.R = (byte)Node.Color.Numbers [0];  	m_TextColor.G = (byte)Node.Color.Numbers [1];  	m_TextColor.B = (byte)Node.Color.Numbers [2];  } else {  	m_TextColor = Result.State.Color;  	m_TextColor.A = 255;  	//Ignore opacity' The Sims Online doesn't support transparent text.  }  
Magic Number,Gonzo.Elements,UILabel,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UILabel.cs,UILabel,The following statement contains a magic number: if (Node.Color != null) {  	m_TextColor = new Color ();  	m_TextColor.A = 255;  	//Ignore opacity' The Sims Online doesn't support transparent text.  	m_TextColor.R = (byte)Node.Color.Numbers [0];  	m_TextColor.G = (byte)Node.Color.Numbers [1];  	m_TextColor.B = (byte)Node.Color.Numbers [2];  } else {  	m_TextColor = Result.State.Color;  	m_TextColor.A = 255;  	//Ignore opacity' The Sims Online doesn't support transparent text.  }  
Magic Number,Gonzo.Elements,UILabel,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UILabel.cs,UILabel,The following statement contains a magic number: if (Node.Color != null) {  	m_TextColor = new Color ();  	m_TextColor.A = 255;  	//Ignore opacity' The Sims Online doesn't support transparent text.  	m_TextColor.R = (byte)Node.Color.Numbers [0];  	m_TextColor.G = (byte)Node.Color.Numbers [1];  	m_TextColor.B = (byte)Node.Color.Numbers [2];  } else {  	m_TextColor = Result.State.Color;  	m_TextColor.A = 255;  	//Ignore opacity' The Sims Online doesn't support transparent text.  }  
Magic Number,Gonzo.Elements,UILabel,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UILabel.cs,UILabel,The following statement contains a magic number: m_TextColor.A = 255;  
Magic Number,Gonzo.Elements,UILabel,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UILabel.cs,UILabel,The following statement contains a magic number: m_TextColor.B = (byte)Node.Color.Numbers [2];  
Magic Number,Gonzo.Elements,UILabel,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UILabel.cs,UILabel,The following statement contains a magic number: m_TextColor.A = 255;  
Magic Number,Gonzo.Elements,UILabel,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UILabel.cs,UILabel,The following statement contains a magic number: switch (Font) {  case 7:  	m_Font = Screen.Font9px;  	//TODO: Fixme.  	break;  case 9:  	m_Font = Screen.Font9px;  	break;  case 10:  	m_Font = Screen.Font10px;  	break;  case 11:  	m_Font = Screen.Font11px;  	break;  case 12:  	m_Font = Screen.Font12px;  	break;  case 14:  	m_Font = Screen.Font14px;  	break;  case 16:  	m_Font = Screen.Font16px;  	break;  }  
Magic Number,Gonzo.Elements,UILabel,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UILabel.cs,UILabel,The following statement contains a magic number: switch (Font) {  case 7:  	m_Font = Screen.Font9px;  	//TODO: Fixme.  	break;  case 9:  	m_Font = Screen.Font9px;  	break;  case 10:  	m_Font = Screen.Font10px;  	break;  case 11:  	m_Font = Screen.Font11px;  	break;  case 12:  	m_Font = Screen.Font12px;  	break;  case 14:  	m_Font = Screen.Font14px;  	break;  case 16:  	m_Font = Screen.Font16px;  	break;  }  
Magic Number,Gonzo.Elements,UILabel,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UILabel.cs,UILabel,The following statement contains a magic number: switch (Font) {  case 7:  	m_Font = Screen.Font9px;  	//TODO: Fixme.  	break;  case 9:  	m_Font = Screen.Font9px;  	break;  case 10:  	m_Font = Screen.Font10px;  	break;  case 11:  	m_Font = Screen.Font11px;  	break;  case 12:  	m_Font = Screen.Font12px;  	break;  case 14:  	m_Font = Screen.Font14px;  	break;  case 16:  	m_Font = Screen.Font16px;  	break;  }  
Magic Number,Gonzo.Elements,UILabel,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UILabel.cs,UILabel,The following statement contains a magic number: switch (Font) {  case 7:  	m_Font = Screen.Font9px;  	//TODO: Fixme.  	break;  case 9:  	m_Font = Screen.Font9px;  	break;  case 10:  	m_Font = Screen.Font10px;  	break;  case 11:  	m_Font = Screen.Font11px;  	break;  case 12:  	m_Font = Screen.Font12px;  	break;  case 14:  	m_Font = Screen.Font14px;  	break;  case 16:  	m_Font = Screen.Font16px;  	break;  }  
Magic Number,Gonzo.Elements,UILabel,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UILabel.cs,UILabel,The following statement contains a magic number: switch (Font) {  case 7:  	m_Font = Screen.Font9px;  	//TODO: Fixme.  	break;  case 9:  	m_Font = Screen.Font9px;  	break;  case 10:  	m_Font = Screen.Font10px;  	break;  case 11:  	m_Font = Screen.Font11px;  	break;  case 12:  	m_Font = Screen.Font12px;  	break;  case 14:  	m_Font = Screen.Font14px;  	break;  case 16:  	m_Font = Screen.Font16px;  	break;  }  
Magic Number,Gonzo.Elements,UILabel,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UILabel.cs,UILabel,The following statement contains a magic number: switch (Font) {  case 7:  	m_Font = Screen.Font9px;  	//TODO: Fixme.  	break;  case 9:  	m_Font = Screen.Font9px;  	break;  case 10:  	m_Font = Screen.Font10px;  	break;  case 11:  	m_Font = Screen.Font11px;  	break;  case 12:  	m_Font = Screen.Font12px;  	break;  case 14:  	m_Font = Screen.Font14px;  	break;  case 16:  	m_Font = Screen.Font16px;  	break;  }  
Magic Number,Gonzo.Elements,UILabel,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UILabel.cs,UILabel,The following statement contains a magic number: switch (Font) {  case 7:  	m_Font = Screen.Font9px;  	//TODO: Fixme.  	break;  case 9:  	m_Font = Screen.Font9px;  	break;  case 10:  	m_Font = Screen.Font10px;  	break;  case 11:  	m_Font = Screen.Font11px;  	break;  case 12:  	m_Font = Screen.Font12px;  	break;  case 14:  	m_Font = Screen.Font14px;  	break;  case 16:  	m_Font = Screen.Font16px;  	break;  }  
Magic Number,Gonzo.Elements,UILabel,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UILabel.cs,UILabel,The following statement contains a magic number: m_TextColor.A = 255;  
Magic Number,Gonzo.Elements,UILabel,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UILabel.cs,UILabel,The following statement contains a magic number: switch (Font) {  case 7:  	m_Font = Screen.Font9px;  	//TODO: Fixme.  	break;  case 9:  	m_Font = Screen.Font9px;  	break;  case 10:  	m_Font = Screen.Font10px;  	break;  case 11:  	m_Font = Screen.Font11px;  	break;  case 12:  	m_Font = Screen.Font12px;  	break;  case 14:  	m_Font = Screen.Font14px;  	break;  case 16:  	m_Font = Screen.Font16px;  	break;  }  
Magic Number,Gonzo.Elements,UILabel,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UILabel.cs,UILabel,The following statement contains a magic number: switch (Font) {  case 7:  	m_Font = Screen.Font9px;  	//TODO: Fixme.  	break;  case 9:  	m_Font = Screen.Font9px;  	break;  case 10:  	m_Font = Screen.Font10px;  	break;  case 11:  	m_Font = Screen.Font11px;  	break;  case 12:  	m_Font = Screen.Font12px;  	break;  case 14:  	m_Font = Screen.Font14px;  	break;  case 16:  	m_Font = Screen.Font16px;  	break;  }  
Magic Number,Gonzo.Elements,UILabel,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UILabel.cs,UILabel,The following statement contains a magic number: switch (Font) {  case 7:  	m_Font = Screen.Font9px;  	//TODO: Fixme.  	break;  case 9:  	m_Font = Screen.Font9px;  	break;  case 10:  	m_Font = Screen.Font10px;  	break;  case 11:  	m_Font = Screen.Font11px;  	break;  case 12:  	m_Font = Screen.Font12px;  	break;  case 14:  	m_Font = Screen.Font14px;  	break;  case 16:  	m_Font = Screen.Font16px;  	break;  }  
Magic Number,Gonzo.Elements,UILabel,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UILabel.cs,UILabel,The following statement contains a magic number: switch (Font) {  case 7:  	m_Font = Screen.Font9px;  	//TODO: Fixme.  	break;  case 9:  	m_Font = Screen.Font9px;  	break;  case 10:  	m_Font = Screen.Font10px;  	break;  case 11:  	m_Font = Screen.Font11px;  	break;  case 12:  	m_Font = Screen.Font12px;  	break;  case 14:  	m_Font = Screen.Font14px;  	break;  case 16:  	m_Font = Screen.Font16px;  	break;  }  
Magic Number,Gonzo.Elements,UILabel,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UILabel.cs,UILabel,The following statement contains a magic number: switch (Font) {  case 7:  	m_Font = Screen.Font9px;  	//TODO: Fixme.  	break;  case 9:  	m_Font = Screen.Font9px;  	break;  case 10:  	m_Font = Screen.Font10px;  	break;  case 11:  	m_Font = Screen.Font11px;  	break;  case 12:  	m_Font = Screen.Font12px;  	break;  case 14:  	m_Font = Screen.Font14px;  	break;  case 16:  	m_Font = Screen.Font16px;  	break;  }  
Magic Number,Gonzo.Elements,UILabel,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UILabel.cs,UILabel,The following statement contains a magic number: switch (Font) {  case 7:  	m_Font = Screen.Font9px;  	//TODO: Fixme.  	break;  case 9:  	m_Font = Screen.Font9px;  	break;  case 10:  	m_Font = Screen.Font10px;  	break;  case 11:  	m_Font = Screen.Font11px;  	break;  case 12:  	m_Font = Screen.Font12px;  	break;  case 14:  	m_Font = Screen.Font14px;  	break;  case 16:  	m_Font = Screen.Font16px;  	break;  }  
Magic Number,Gonzo.Elements,UILabel,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UILabel.cs,UILabel,The following statement contains a magic number: switch (Font) {  case 7:  	m_Font = Screen.Font9px;  	//TODO: Fixme.  	break;  case 9:  	m_Font = Screen.Font9px;  	break;  case 10:  	m_Font = Screen.Font10px;  	break;  case 11:  	m_Font = Screen.Font11px;  	break;  case 12:  	m_Font = Screen.Font12px;  	break;  case 14:  	m_Font = Screen.Font14px;  	break;  case 16:  	m_Font = Screen.Font16px;  	break;  }  
Magic Number,Gonzo.Elements,UILabel,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UILabel.cs,AlignText,The following statement contains a magic number: switch (m_Alignment) {  case TextAlignment.Left_Top:  	//Is there a need to modify position at all here??  	break;  case TextAlignment.Left_Center:  	LocalCopy.Y += (m_Size.Y / 2) - (Measurement.Y / 2);  	Position = LocalCopy;  	break;  case TextAlignment.Center_Top:  	LocalCopy.X += (m_Size.X / 2) - (Measurement.X / 2);  	Position = LocalCopy;  	break;  case TextAlignment.Center_Center:  	LocalCopy.X += (m_Size.X / 2) - (Measurement.X / 2);  	LocalCopy.Y += (m_Size.Y / 2) - (Measurement.Y / 2);  	Position = LocalCopy;  	break;  case TextAlignment.Right_Top:  	LocalCopy.X += m_Size.X - Measurement.X;  	Position = LocalCopy;  	break;  case TextAlignment.Right_Center:  	LocalCopy.X += m_Size.X - Measurement.X;  	LocalCopy.Y += (m_Size.Y / 2) - (Measurement.Y / 2);  	Position = LocalCopy;  	break;  }  
Magic Number,Gonzo.Elements,UILabel,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UILabel.cs,AlignText,The following statement contains a magic number: switch (m_Alignment) {  case TextAlignment.Left_Top:  	//Is there a need to modify position at all here??  	break;  case TextAlignment.Left_Center:  	LocalCopy.Y += (m_Size.Y / 2) - (Measurement.Y / 2);  	Position = LocalCopy;  	break;  case TextAlignment.Center_Top:  	LocalCopy.X += (m_Size.X / 2) - (Measurement.X / 2);  	Position = LocalCopy;  	break;  case TextAlignment.Center_Center:  	LocalCopy.X += (m_Size.X / 2) - (Measurement.X / 2);  	LocalCopy.Y += (m_Size.Y / 2) - (Measurement.Y / 2);  	Position = LocalCopy;  	break;  case TextAlignment.Right_Top:  	LocalCopy.X += m_Size.X - Measurement.X;  	Position = LocalCopy;  	break;  case TextAlignment.Right_Center:  	LocalCopy.X += m_Size.X - Measurement.X;  	LocalCopy.Y += (m_Size.Y / 2) - (Measurement.Y / 2);  	Position = LocalCopy;  	break;  }  
Magic Number,Gonzo.Elements,UILabel,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UILabel.cs,AlignText,The following statement contains a magic number: switch (m_Alignment) {  case TextAlignment.Left_Top:  	//Is there a need to modify position at all here??  	break;  case TextAlignment.Left_Center:  	LocalCopy.Y += (m_Size.Y / 2) - (Measurement.Y / 2);  	Position = LocalCopy;  	break;  case TextAlignment.Center_Top:  	LocalCopy.X += (m_Size.X / 2) - (Measurement.X / 2);  	Position = LocalCopy;  	break;  case TextAlignment.Center_Center:  	LocalCopy.X += (m_Size.X / 2) - (Measurement.X / 2);  	LocalCopy.Y += (m_Size.Y / 2) - (Measurement.Y / 2);  	Position = LocalCopy;  	break;  case TextAlignment.Right_Top:  	LocalCopy.X += m_Size.X - Measurement.X;  	Position = LocalCopy;  	break;  case TextAlignment.Right_Center:  	LocalCopy.X += m_Size.X - Measurement.X;  	LocalCopy.Y += (m_Size.Y / 2) - (Measurement.Y / 2);  	Position = LocalCopy;  	break;  }  
Magic Number,Gonzo.Elements,UILabel,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UILabel.cs,AlignText,The following statement contains a magic number: switch (m_Alignment) {  case TextAlignment.Left_Top:  	//Is there a need to modify position at all here??  	break;  case TextAlignment.Left_Center:  	LocalCopy.Y += (m_Size.Y / 2) - (Measurement.Y / 2);  	Position = LocalCopy;  	break;  case TextAlignment.Center_Top:  	LocalCopy.X += (m_Size.X / 2) - (Measurement.X / 2);  	Position = LocalCopy;  	break;  case TextAlignment.Center_Center:  	LocalCopy.X += (m_Size.X / 2) - (Measurement.X / 2);  	LocalCopy.Y += (m_Size.Y / 2) - (Measurement.Y / 2);  	Position = LocalCopy;  	break;  case TextAlignment.Right_Top:  	LocalCopy.X += m_Size.X - Measurement.X;  	Position = LocalCopy;  	break;  case TextAlignment.Right_Center:  	LocalCopy.X += m_Size.X - Measurement.X;  	LocalCopy.Y += (m_Size.Y / 2) - (Measurement.Y / 2);  	Position = LocalCopy;  	break;  }  
Magic Number,Gonzo.Elements,UILabel,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UILabel.cs,AlignText,The following statement contains a magic number: switch (m_Alignment) {  case TextAlignment.Left_Top:  	//Is there a need to modify position at all here??  	break;  case TextAlignment.Left_Center:  	LocalCopy.Y += (m_Size.Y / 2) - (Measurement.Y / 2);  	Position = LocalCopy;  	break;  case TextAlignment.Center_Top:  	LocalCopy.X += (m_Size.X / 2) - (Measurement.X / 2);  	Position = LocalCopy;  	break;  case TextAlignment.Center_Center:  	LocalCopy.X += (m_Size.X / 2) - (Measurement.X / 2);  	LocalCopy.Y += (m_Size.Y / 2) - (Measurement.Y / 2);  	Position = LocalCopy;  	break;  case TextAlignment.Right_Top:  	LocalCopy.X += m_Size.X - Measurement.X;  	Position = LocalCopy;  	break;  case TextAlignment.Right_Center:  	LocalCopy.X += m_Size.X - Measurement.X;  	LocalCopy.Y += (m_Size.Y / 2) - (Measurement.Y / 2);  	Position = LocalCopy;  	break;  }  
Magic Number,Gonzo.Elements,UILabel,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UILabel.cs,AlignText,The following statement contains a magic number: switch (m_Alignment) {  case TextAlignment.Left_Top:  	//Is there a need to modify position at all here??  	break;  case TextAlignment.Left_Center:  	LocalCopy.Y += (m_Size.Y / 2) - (Measurement.Y / 2);  	Position = LocalCopy;  	break;  case TextAlignment.Center_Top:  	LocalCopy.X += (m_Size.X / 2) - (Measurement.X / 2);  	Position = LocalCopy;  	break;  case TextAlignment.Center_Center:  	LocalCopy.X += (m_Size.X / 2) - (Measurement.X / 2);  	LocalCopy.Y += (m_Size.Y / 2) - (Measurement.Y / 2);  	Position = LocalCopy;  	break;  case TextAlignment.Right_Top:  	LocalCopy.X += m_Size.X - Measurement.X;  	Position = LocalCopy;  	break;  case TextAlignment.Right_Center:  	LocalCopy.X += m_Size.X - Measurement.X;  	LocalCopy.Y += (m_Size.Y / 2) - (Measurement.Y / 2);  	Position = LocalCopy;  	break;  }  
Magic Number,Gonzo.Elements,UILabel,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UILabel.cs,AlignText,The following statement contains a magic number: switch (m_Alignment) {  case TextAlignment.Left_Top:  	//Is there a need to modify position at all here??  	break;  case TextAlignment.Left_Center:  	LocalCopy.Y += (m_Size.Y / 2) - (Measurement.Y / 2);  	Position = LocalCopy;  	break;  case TextAlignment.Center_Top:  	LocalCopy.X += (m_Size.X / 2) - (Measurement.X / 2);  	Position = LocalCopy;  	break;  case TextAlignment.Center_Center:  	LocalCopy.X += (m_Size.X / 2) - (Measurement.X / 2);  	LocalCopy.Y += (m_Size.Y / 2) - (Measurement.Y / 2);  	Position = LocalCopy;  	break;  case TextAlignment.Right_Top:  	LocalCopy.X += m_Size.X - Measurement.X;  	Position = LocalCopy;  	break;  case TextAlignment.Right_Center:  	LocalCopy.X += m_Size.X - Measurement.X;  	LocalCopy.Y += (m_Size.Y / 2) - (Measurement.Y / 2);  	Position = LocalCopy;  	break;  }  
Magic Number,Gonzo.Elements,UILabel,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UILabel.cs,AlignText,The following statement contains a magic number: switch (m_Alignment) {  case TextAlignment.Left_Top:  	//Is there a need to modify position at all here??  	break;  case TextAlignment.Left_Center:  	LocalCopy.Y += (m_Size.Y / 2) - (Measurement.Y / 2);  	Position = LocalCopy;  	break;  case TextAlignment.Center_Top:  	LocalCopy.X += (m_Size.X / 2) - (Measurement.X / 2);  	Position = LocalCopy;  	break;  case TextAlignment.Center_Center:  	LocalCopy.X += (m_Size.X / 2) - (Measurement.X / 2);  	LocalCopy.Y += (m_Size.Y / 2) - (Measurement.Y / 2);  	Position = LocalCopy;  	break;  case TextAlignment.Right_Top:  	LocalCopy.X += m_Size.X - Measurement.X;  	Position = LocalCopy;  	break;  case TextAlignment.Right_Center:  	LocalCopy.X += m_Size.X - Measurement.X;  	LocalCopy.Y += (m_Size.Y / 2) - (Measurement.Y / 2);  	Position = LocalCopy;  	break;  }  
Magic Number,Gonzo.Elements,UILabel,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UILabel.cs,AlignText,The following statement contains a magic number: switch (m_Alignment) {  case TextAlignment.Left_Top:  	//Is there a need to modify position at all here??  	break;  case TextAlignment.Left_Center:  	LocalCopy.Y += (m_Size.Y / 2) - (Measurement.Y / 2);  	Position = LocalCopy;  	break;  case TextAlignment.Center_Top:  	LocalCopy.X += (m_Size.X / 2) - (Measurement.X / 2);  	Position = LocalCopy;  	break;  case TextAlignment.Center_Center:  	LocalCopy.X += (m_Size.X / 2) - (Measurement.X / 2);  	LocalCopy.Y += (m_Size.Y / 2) - (Measurement.Y / 2);  	Position = LocalCopy;  	break;  case TextAlignment.Right_Top:  	LocalCopy.X += m_Size.X - Measurement.X;  	Position = LocalCopy;  	break;  case TextAlignment.Right_Center:  	LocalCopy.X += m_Size.X - Measurement.X;  	LocalCopy.Y += (m_Size.Y / 2) - (Measurement.Y / 2);  	Position = LocalCopy;  	break;  }  
Magic Number,Gonzo.Elements,UILabel,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UILabel.cs,AlignText,The following statement contains a magic number: switch (m_Alignment) {  case TextAlignment.Left_Top:  	//Is there a need to modify position at all here??  	break;  case TextAlignment.Left_Center:  	LocalCopy.Y += (m_Size.Y / 2) - (Measurement.Y / 2);  	Position = LocalCopy;  	break;  case TextAlignment.Center_Top:  	LocalCopy.X += (m_Size.X / 2) - (Measurement.X / 2);  	Position = LocalCopy;  	break;  case TextAlignment.Center_Center:  	LocalCopy.X += (m_Size.X / 2) - (Measurement.X / 2);  	LocalCopy.Y += (m_Size.Y / 2) - (Measurement.Y / 2);  	Position = LocalCopy;  	break;  case TextAlignment.Right_Top:  	LocalCopy.X += m_Size.X - Measurement.X;  	Position = LocalCopy;  	break;  case TextAlignment.Right_Center:  	LocalCopy.X += m_Size.X - Measurement.X;  	LocalCopy.Y += (m_Size.Y / 2) - (Measurement.Y / 2);  	Position = LocalCopy;  	break;  }  
Magic Number,Gonzo.Elements,UILabel,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UILabel.cs,AlignText,The following statement contains a magic number: LocalCopy.Y += (m_Size.Y / 2) - (Measurement.Y / 2);  
Magic Number,Gonzo.Elements,UILabel,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UILabel.cs,AlignText,The following statement contains a magic number: LocalCopy.Y += (m_Size.Y / 2) - (Measurement.Y / 2);  
Magic Number,Gonzo.Elements,UILabel,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UILabel.cs,AlignText,The following statement contains a magic number: LocalCopy.X += (m_Size.X / 2) - (Measurement.X / 2);  
Magic Number,Gonzo.Elements,UILabel,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UILabel.cs,AlignText,The following statement contains a magic number: LocalCopy.X += (m_Size.X / 2) - (Measurement.X / 2);  
Magic Number,Gonzo.Elements,UILabel,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UILabel.cs,AlignText,The following statement contains a magic number: LocalCopy.X += (m_Size.X / 2) - (Measurement.X / 2);  
Magic Number,Gonzo.Elements,UILabel,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UILabel.cs,AlignText,The following statement contains a magic number: LocalCopy.X += (m_Size.X / 2) - (Measurement.X / 2);  
Magic Number,Gonzo.Elements,UILabel,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UILabel.cs,AlignText,The following statement contains a magic number: LocalCopy.Y += (m_Size.Y / 2) - (Measurement.Y / 2);  
Magic Number,Gonzo.Elements,UILabel,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UILabel.cs,AlignText,The following statement contains a magic number: LocalCopy.Y += (m_Size.Y / 2) - (Measurement.Y / 2);  
Magic Number,Gonzo.Elements,UILabel,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UILabel.cs,AlignText,The following statement contains a magic number: LocalCopy.Y += (m_Size.Y / 2) - (Measurement.Y / 2);  
Magic Number,Gonzo.Elements,UILabel,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UILabel.cs,AlignText,The following statement contains a magic number: LocalCopy.Y += (m_Size.Y / 2) - (Measurement.Y / 2);  
Magic Number,Gonzo.Elements,UITextEdit,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UITextEdit.cs,UITextEdit,The following statement contains a magic number: switch (Font) {  case 9:  	m_Font = Screen.Font9px;  	break;  case 10:  	m_Font = Screen.Font10px;  	break;  case 12:  	m_Font = Screen.Font12px;  	break;  case 14:  	m_Font = Screen.Font14px;  	break;  case 16:  	m_Font = Screen.Font16px;  	break;  }  
Magic Number,Gonzo.Elements,UITextEdit,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UITextEdit.cs,UITextEdit,The following statement contains a magic number: switch (Font) {  case 9:  	m_Font = Screen.Font9px;  	break;  case 10:  	m_Font = Screen.Font10px;  	break;  case 12:  	m_Font = Screen.Font12px;  	break;  case 14:  	m_Font = Screen.Font14px;  	break;  case 16:  	m_Font = Screen.Font16px;  	break;  }  
Magic Number,Gonzo.Elements,UITextEdit,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UITextEdit.cs,UITextEdit,The following statement contains a magic number: switch (Font) {  case 9:  	m_Font = Screen.Font9px;  	break;  case 10:  	m_Font = Screen.Font10px;  	break;  case 12:  	m_Font = Screen.Font12px;  	break;  case 14:  	m_Font = Screen.Font14px;  	break;  case 16:  	m_Font = Screen.Font16px;  	break;  }  
Magic Number,Gonzo.Elements,UITextEdit,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UITextEdit.cs,UITextEdit,The following statement contains a magic number: switch (Font) {  case 9:  	m_Font = Screen.Font9px;  	break;  case 10:  	m_Font = Screen.Font10px;  	break;  case 12:  	m_Font = Screen.Font12px;  	break;  case 14:  	m_Font = Screen.Font14px;  	break;  case 16:  	m_Font = Screen.Font16px;  	break;  }  
Magic Number,Gonzo.Elements,UITextEdit,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UITextEdit.cs,UITextEdit,The following statement contains a magic number: switch (Font) {  case 9:  	m_Font = Screen.Font9px;  	break;  case 10:  	m_Font = Screen.Font10px;  	break;  case 12:  	m_Font = Screen.Font12px;  	break;  case 14:  	m_Font = Screen.Font14px;  	break;  case 16:  	m_Font = Screen.Font16px;  	break;  }  
Magic Number,Gonzo.Elements,UITextEdit,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UITextEdit.cs,UITextEdit,The following statement contains a magic number: if (DrawBackground) {  	Image = new UIImage (FileManager.GetTexture ((ulong)FileIDs.UIFileIDs.dialog_textboxbackground)' m_Screen);  	if (Position != null)  		Image.Position = Position;  	Image.Slicer = new NineSlicer (new Vector2 (0' 0)' (int)Image.Texture.Width' (int)Image.Texture.Width' 15' 15' 15' 15);  	Image.SetSize ((int)Size.X' (int)Size.Y);  }  
Magic Number,Gonzo.Elements,UITextEdit,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UITextEdit.cs,UITextEdit,The following statement contains a magic number: if (DrawBackground) {  	Image = new UIImage (FileManager.GetTexture ((ulong)FileIDs.UIFileIDs.dialog_textboxbackground)' m_Screen);  	if (Position != null)  		Image.Position = Position;  	Image.Slicer = new NineSlicer (new Vector2 (0' 0)' (int)Image.Texture.Width' (int)Image.Texture.Width' 15' 15' 15' 15);  	Image.SetSize ((int)Size.X' (int)Size.Y);  }  
Magic Number,Gonzo.Elements,UITextEdit,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UITextEdit.cs,UITextEdit,The following statement contains a magic number: if (DrawBackground) {  	Image = new UIImage (FileManager.GetTexture ((ulong)FileIDs.UIFileIDs.dialog_textboxbackground)' m_Screen);  	if (Position != null)  		Image.Position = Position;  	Image.Slicer = new NineSlicer (new Vector2 (0' 0)' (int)Image.Texture.Width' (int)Image.Texture.Width' 15' 15' 15' 15);  	Image.SetSize ((int)Size.X' (int)Size.Y);  }  
Magic Number,Gonzo.Elements,UITextEdit,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UITextEdit.cs,UITextEdit,The following statement contains a magic number: if (DrawBackground) {  	Image = new UIImage (FileManager.GetTexture ((ulong)FileIDs.UIFileIDs.dialog_textboxbackground)' m_Screen);  	if (Position != null)  		Image.Position = Position;  	Image.Slicer = new NineSlicer (new Vector2 (0' 0)' (int)Image.Texture.Width' (int)Image.Texture.Width' 15' 15' 15' 15);  	Image.SetSize ((int)Size.X' (int)Size.Y);  }  
Magic Number,Gonzo.Elements,UITextEdit,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UITextEdit.cs,UITextEdit,The following statement contains a magic number: Image.Slicer = new NineSlicer (new Vector2 (0' 0)' (int)Image.Texture.Width' (int)Image.Texture.Width' 15' 15' 15' 15);  
Magic Number,Gonzo.Elements,UITextEdit,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UITextEdit.cs,UITextEdit,The following statement contains a magic number: Image.Slicer = new NineSlicer (new Vector2 (0' 0)' (int)Image.Texture.Width' (int)Image.Texture.Width' 15' 15' 15' 15);  
Magic Number,Gonzo.Elements,UITextEdit,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UITextEdit.cs,UITextEdit,The following statement contains a magic number: Image.Slicer = new NineSlicer (new Vector2 (0' 0)' (int)Image.Texture.Width' (int)Image.Texture.Width' 15' 15' 15' 15);  
Magic Number,Gonzo.Elements,UITextEdit,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UITextEdit.cs,UITextEdit,The following statement contains a magic number: Image.Slicer = new NineSlicer (new Vector2 (0' 0)' (int)Image.Texture.Width' (int)Image.Texture.Width' 15' 15' 15' 15);  
Magic Number,Gonzo.Elements,UITextEdit,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UITextEdit.cs,UITextEdit,The following statement contains a magic number: if (!State.InSharedPropertiesGroup) {  	if (Node.TextEditPosition.Numbers.Count > 0) {  		Position = new Vector2 (Node.TextEditPosition.Numbers [0]' Node.TextEditPosition.Numbers [1]) + Screen.Position;  		m_TextPosition = Position;  	}  	if (State.InSharedPropertiesGroup)  		m_Size = State.Size;  	else {  		m_Size = new Vector2 ();  		m_Size.X = Node.Size.Numbers [0];  		m_Size.Y = Node.Size.Numbers [1];  	}  	if (Node.Tooltip != "")  		Tooltip = m_Screen.GetString (Node.Tooltip);  	Transparent = (Node.Transparent == 1) ? true : false;  	if (Node.Lines != null)  		m_NumLines = (int)Node.Lines;  	if (Node.Capacity != null)  		m_MaxChars = (int)Node.Capacity;  	if (Node.Alignment != null)  		m_Alignment = (TextEditAlignment)Node.Alignment;  	if (Node.FlashOnEmpty != null)  		m_FlashOnEmpty = (Node.FlashOnEmpty == 1) ? true : false;  	if (Node.FrameOnFocus != null)  		m_FrameOnFocus = (Node.FrameOnFocus == 1) ? true : false;  	if (State.InSharedPropertiesGroup)  		TextColor = State.Color;  	else  		TextColor = new Color (Node.Color.Numbers [0]' Node.Color.Numbers [1]' Node.Color.Numbers [2]);  	if (Node.BackColor != null)  		m_BackColor = new Color (Node.Color.Numbers [0]' Node.Color.Numbers [1]' Node.Color.Numbers [2]);  	else  		m_BackColor = new Color (57' 81' 110' 255);  	if (Node.Mode != null)  		m_Mode = (Node.Mode == "kReadOnly") ? TextEditMode.ReadOnly : TextEditMode.Insert;  	if (Node.ScrollbarImage != string.Empty)  		m_ScrollbarImage = m_Screen.GetImage (Node.ScrollbarImage).Image.Texture;  	if (Node.ScrollbarGutter != null)  		m_ScrollbarWidth = (int)Node.ScrollbarGutter;  	if (Node.ScrollbarType != null)  		m_ScrollbarType = (ScrollbarType)Node.ScrollbarType;  	if (Node.ResizeForExactLineHeight != null)  		m_ResizeForExactLineHeight = (Node.ResizeForExactLineHeight == 1) ? true : false;  	if (Node.EnableIME != null)  		m_EnableInputModeEditing = (Node.EnableIME == 1) ? true : false;  	if (Node.CursorColor != null)  		m_CursorColor = new Color (Node.CursorColor.Numbers [0]' Node.CursorColor.Numbers [1]' Node.CursorColor.Numbers [2]);  	if (Node.FrameColor != null)  		m_FrameColor = new Color (Node.FrameColor.Numbers [0]' Node.FrameColor.Numbers [1]' Node.FrameColor.Numbers [2]);  } else {  	if (State.BackColor != null)  		m_BackColor = State.BackColor;  	if (State.Color != null)  		TextColor = State.Color;  	if (State.CursorColor != null)  		m_CursorColor = State.CursorColor;  	if (State.Position != null) {  		Position = new Vector2 (State.Position [0]' State.Position [1]) + Screen.Position;  		m_TextPosition = Position;  	}  	if (State.Tooltip != "")  		Tooltip = State.Tooltip;  }  
Magic Number,Gonzo.Elements,UITextEdit,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UITextEdit.cs,UITextEdit,The following statement contains a magic number: if (!State.InSharedPropertiesGroup) {  	if (Node.TextEditPosition.Numbers.Count > 0) {  		Position = new Vector2 (Node.TextEditPosition.Numbers [0]' Node.TextEditPosition.Numbers [1]) + Screen.Position;  		m_TextPosition = Position;  	}  	if (State.InSharedPropertiesGroup)  		m_Size = State.Size;  	else {  		m_Size = new Vector2 ();  		m_Size.X = Node.Size.Numbers [0];  		m_Size.Y = Node.Size.Numbers [1];  	}  	if (Node.Tooltip != "")  		Tooltip = m_Screen.GetString (Node.Tooltip);  	Transparent = (Node.Transparent == 1) ? true : false;  	if (Node.Lines != null)  		m_NumLines = (int)Node.Lines;  	if (Node.Capacity != null)  		m_MaxChars = (int)Node.Capacity;  	if (Node.Alignment != null)  		m_Alignment = (TextEditAlignment)Node.Alignment;  	if (Node.FlashOnEmpty != null)  		m_FlashOnEmpty = (Node.FlashOnEmpty == 1) ? true : false;  	if (Node.FrameOnFocus != null)  		m_FrameOnFocus = (Node.FrameOnFocus == 1) ? true : false;  	if (State.InSharedPropertiesGroup)  		TextColor = State.Color;  	else  		TextColor = new Color (Node.Color.Numbers [0]' Node.Color.Numbers [1]' Node.Color.Numbers [2]);  	if (Node.BackColor != null)  		m_BackColor = new Color (Node.Color.Numbers [0]' Node.Color.Numbers [1]' Node.Color.Numbers [2]);  	else  		m_BackColor = new Color (57' 81' 110' 255);  	if (Node.Mode != null)  		m_Mode = (Node.Mode == "kReadOnly") ? TextEditMode.ReadOnly : TextEditMode.Insert;  	if (Node.ScrollbarImage != string.Empty)  		m_ScrollbarImage = m_Screen.GetImage (Node.ScrollbarImage).Image.Texture;  	if (Node.ScrollbarGutter != null)  		m_ScrollbarWidth = (int)Node.ScrollbarGutter;  	if (Node.ScrollbarType != null)  		m_ScrollbarType = (ScrollbarType)Node.ScrollbarType;  	if (Node.ResizeForExactLineHeight != null)  		m_ResizeForExactLineHeight = (Node.ResizeForExactLineHeight == 1) ? true : false;  	if (Node.EnableIME != null)  		m_EnableInputModeEditing = (Node.EnableIME == 1) ? true : false;  	if (Node.CursorColor != null)  		m_CursorColor = new Color (Node.CursorColor.Numbers [0]' Node.CursorColor.Numbers [1]' Node.CursorColor.Numbers [2]);  	if (Node.FrameColor != null)  		m_FrameColor = new Color (Node.FrameColor.Numbers [0]' Node.FrameColor.Numbers [1]' Node.FrameColor.Numbers [2]);  } else {  	if (State.BackColor != null)  		m_BackColor = State.BackColor;  	if (State.Color != null)  		TextColor = State.Color;  	if (State.CursorColor != null)  		m_CursorColor = State.CursorColor;  	if (State.Position != null) {  		Position = new Vector2 (State.Position [0]' State.Position [1]) + Screen.Position;  		m_TextPosition = Position;  	}  	if (State.Tooltip != "")  		Tooltip = State.Tooltip;  }  
Magic Number,Gonzo.Elements,UITextEdit,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UITextEdit.cs,UITextEdit,The following statement contains a magic number: if (!State.InSharedPropertiesGroup) {  	if (Node.TextEditPosition.Numbers.Count > 0) {  		Position = new Vector2 (Node.TextEditPosition.Numbers [0]' Node.TextEditPosition.Numbers [1]) + Screen.Position;  		m_TextPosition = Position;  	}  	if (State.InSharedPropertiesGroup)  		m_Size = State.Size;  	else {  		m_Size = new Vector2 ();  		m_Size.X = Node.Size.Numbers [0];  		m_Size.Y = Node.Size.Numbers [1];  	}  	if (Node.Tooltip != "")  		Tooltip = m_Screen.GetString (Node.Tooltip);  	Transparent = (Node.Transparent == 1) ? true : false;  	if (Node.Lines != null)  		m_NumLines = (int)Node.Lines;  	if (Node.Capacity != null)  		m_MaxChars = (int)Node.Capacity;  	if (Node.Alignment != null)  		m_Alignment = (TextEditAlignment)Node.Alignment;  	if (Node.FlashOnEmpty != null)  		m_FlashOnEmpty = (Node.FlashOnEmpty == 1) ? true : false;  	if (Node.FrameOnFocus != null)  		m_FrameOnFocus = (Node.FrameOnFocus == 1) ? true : false;  	if (State.InSharedPropertiesGroup)  		TextColor = State.Color;  	else  		TextColor = new Color (Node.Color.Numbers [0]' Node.Color.Numbers [1]' Node.Color.Numbers [2]);  	if (Node.BackColor != null)  		m_BackColor = new Color (Node.Color.Numbers [0]' Node.Color.Numbers [1]' Node.Color.Numbers [2]);  	else  		m_BackColor = new Color (57' 81' 110' 255);  	if (Node.Mode != null)  		m_Mode = (Node.Mode == "kReadOnly") ? TextEditMode.ReadOnly : TextEditMode.Insert;  	if (Node.ScrollbarImage != string.Empty)  		m_ScrollbarImage = m_Screen.GetImage (Node.ScrollbarImage).Image.Texture;  	if (Node.ScrollbarGutter != null)  		m_ScrollbarWidth = (int)Node.ScrollbarGutter;  	if (Node.ScrollbarType != null)  		m_ScrollbarType = (ScrollbarType)Node.ScrollbarType;  	if (Node.ResizeForExactLineHeight != null)  		m_ResizeForExactLineHeight = (Node.ResizeForExactLineHeight == 1) ? true : false;  	if (Node.EnableIME != null)  		m_EnableInputModeEditing = (Node.EnableIME == 1) ? true : false;  	if (Node.CursorColor != null)  		m_CursorColor = new Color (Node.CursorColor.Numbers [0]' Node.CursorColor.Numbers [1]' Node.CursorColor.Numbers [2]);  	if (Node.FrameColor != null)  		m_FrameColor = new Color (Node.FrameColor.Numbers [0]' Node.FrameColor.Numbers [1]' Node.FrameColor.Numbers [2]);  } else {  	if (State.BackColor != null)  		m_BackColor = State.BackColor;  	if (State.Color != null)  		TextColor = State.Color;  	if (State.CursorColor != null)  		m_CursorColor = State.CursorColor;  	if (State.Position != null) {  		Position = new Vector2 (State.Position [0]' State.Position [1]) + Screen.Position;  		m_TextPosition = Position;  	}  	if (State.Tooltip != "")  		Tooltip = State.Tooltip;  }  
Magic Number,Gonzo.Elements,UITextEdit,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UITextEdit.cs,UITextEdit,The following statement contains a magic number: if (!State.InSharedPropertiesGroup) {  	if (Node.TextEditPosition.Numbers.Count > 0) {  		Position = new Vector2 (Node.TextEditPosition.Numbers [0]' Node.TextEditPosition.Numbers [1]) + Screen.Position;  		m_TextPosition = Position;  	}  	if (State.InSharedPropertiesGroup)  		m_Size = State.Size;  	else {  		m_Size = new Vector2 ();  		m_Size.X = Node.Size.Numbers [0];  		m_Size.Y = Node.Size.Numbers [1];  	}  	if (Node.Tooltip != "")  		Tooltip = m_Screen.GetString (Node.Tooltip);  	Transparent = (Node.Transparent == 1) ? true : false;  	if (Node.Lines != null)  		m_NumLines = (int)Node.Lines;  	if (Node.Capacity != null)  		m_MaxChars = (int)Node.Capacity;  	if (Node.Alignment != null)  		m_Alignment = (TextEditAlignment)Node.Alignment;  	if (Node.FlashOnEmpty != null)  		m_FlashOnEmpty = (Node.FlashOnEmpty == 1) ? true : false;  	if (Node.FrameOnFocus != null)  		m_FrameOnFocus = (Node.FrameOnFocus == 1) ? true : false;  	if (State.InSharedPropertiesGroup)  		TextColor = State.Color;  	else  		TextColor = new Color (Node.Color.Numbers [0]' Node.Color.Numbers [1]' Node.Color.Numbers [2]);  	if (Node.BackColor != null)  		m_BackColor = new Color (Node.Color.Numbers [0]' Node.Color.Numbers [1]' Node.Color.Numbers [2]);  	else  		m_BackColor = new Color (57' 81' 110' 255);  	if (Node.Mode != null)  		m_Mode = (Node.Mode == "kReadOnly") ? TextEditMode.ReadOnly : TextEditMode.Insert;  	if (Node.ScrollbarImage != string.Empty)  		m_ScrollbarImage = m_Screen.GetImage (Node.ScrollbarImage).Image.Texture;  	if (Node.ScrollbarGutter != null)  		m_ScrollbarWidth = (int)Node.ScrollbarGutter;  	if (Node.ScrollbarType != null)  		m_ScrollbarType = (ScrollbarType)Node.ScrollbarType;  	if (Node.ResizeForExactLineHeight != null)  		m_ResizeForExactLineHeight = (Node.ResizeForExactLineHeight == 1) ? true : false;  	if (Node.EnableIME != null)  		m_EnableInputModeEditing = (Node.EnableIME == 1) ? true : false;  	if (Node.CursorColor != null)  		m_CursorColor = new Color (Node.CursorColor.Numbers [0]' Node.CursorColor.Numbers [1]' Node.CursorColor.Numbers [2]);  	if (Node.FrameColor != null)  		m_FrameColor = new Color (Node.FrameColor.Numbers [0]' Node.FrameColor.Numbers [1]' Node.FrameColor.Numbers [2]);  } else {  	if (State.BackColor != null)  		m_BackColor = State.BackColor;  	if (State.Color != null)  		TextColor = State.Color;  	if (State.CursorColor != null)  		m_CursorColor = State.CursorColor;  	if (State.Position != null) {  		Position = new Vector2 (State.Position [0]' State.Position [1]) + Screen.Position;  		m_TextPosition = Position;  	}  	if (State.Tooltip != "")  		Tooltip = State.Tooltip;  }  
Magic Number,Gonzo.Elements,UITextEdit,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UITextEdit.cs,UITextEdit,The following statement contains a magic number: if (!State.InSharedPropertiesGroup) {  	if (Node.TextEditPosition.Numbers.Count > 0) {  		Position = new Vector2 (Node.TextEditPosition.Numbers [0]' Node.TextEditPosition.Numbers [1]) + Screen.Position;  		m_TextPosition = Position;  	}  	if (State.InSharedPropertiesGroup)  		m_Size = State.Size;  	else {  		m_Size = new Vector2 ();  		m_Size.X = Node.Size.Numbers [0];  		m_Size.Y = Node.Size.Numbers [1];  	}  	if (Node.Tooltip != "")  		Tooltip = m_Screen.GetString (Node.Tooltip);  	Transparent = (Node.Transparent == 1) ? true : false;  	if (Node.Lines != null)  		m_NumLines = (int)Node.Lines;  	if (Node.Capacity != null)  		m_MaxChars = (int)Node.Capacity;  	if (Node.Alignment != null)  		m_Alignment = (TextEditAlignment)Node.Alignment;  	if (Node.FlashOnEmpty != null)  		m_FlashOnEmpty = (Node.FlashOnEmpty == 1) ? true : false;  	if (Node.FrameOnFocus != null)  		m_FrameOnFocus = (Node.FrameOnFocus == 1) ? true : false;  	if (State.InSharedPropertiesGroup)  		TextColor = State.Color;  	else  		TextColor = new Color (Node.Color.Numbers [0]' Node.Color.Numbers [1]' Node.Color.Numbers [2]);  	if (Node.BackColor != null)  		m_BackColor = new Color (Node.Color.Numbers [0]' Node.Color.Numbers [1]' Node.Color.Numbers [2]);  	else  		m_BackColor = new Color (57' 81' 110' 255);  	if (Node.Mode != null)  		m_Mode = (Node.Mode == "kReadOnly") ? TextEditMode.ReadOnly : TextEditMode.Insert;  	if (Node.ScrollbarImage != string.Empty)  		m_ScrollbarImage = m_Screen.GetImage (Node.ScrollbarImage).Image.Texture;  	if (Node.ScrollbarGutter != null)  		m_ScrollbarWidth = (int)Node.ScrollbarGutter;  	if (Node.ScrollbarType != null)  		m_ScrollbarType = (ScrollbarType)Node.ScrollbarType;  	if (Node.ResizeForExactLineHeight != null)  		m_ResizeForExactLineHeight = (Node.ResizeForExactLineHeight == 1) ? true : false;  	if (Node.EnableIME != null)  		m_EnableInputModeEditing = (Node.EnableIME == 1) ? true : false;  	if (Node.CursorColor != null)  		m_CursorColor = new Color (Node.CursorColor.Numbers [0]' Node.CursorColor.Numbers [1]' Node.CursorColor.Numbers [2]);  	if (Node.FrameColor != null)  		m_FrameColor = new Color (Node.FrameColor.Numbers [0]' Node.FrameColor.Numbers [1]' Node.FrameColor.Numbers [2]);  } else {  	if (State.BackColor != null)  		m_BackColor = State.BackColor;  	if (State.Color != null)  		TextColor = State.Color;  	if (State.CursorColor != null)  		m_CursorColor = State.CursorColor;  	if (State.Position != null) {  		Position = new Vector2 (State.Position [0]' State.Position [1]) + Screen.Position;  		m_TextPosition = Position;  	}  	if (State.Tooltip != "")  		Tooltip = State.Tooltip;  }  
Magic Number,Gonzo.Elements,UITextEdit,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UITextEdit.cs,UITextEdit,The following statement contains a magic number: if (!State.InSharedPropertiesGroup) {  	if (Node.TextEditPosition.Numbers.Count > 0) {  		Position = new Vector2 (Node.TextEditPosition.Numbers [0]' Node.TextEditPosition.Numbers [1]) + Screen.Position;  		m_TextPosition = Position;  	}  	if (State.InSharedPropertiesGroup)  		m_Size = State.Size;  	else {  		m_Size = new Vector2 ();  		m_Size.X = Node.Size.Numbers [0];  		m_Size.Y = Node.Size.Numbers [1];  	}  	if (Node.Tooltip != "")  		Tooltip = m_Screen.GetString (Node.Tooltip);  	Transparent = (Node.Transparent == 1) ? true : false;  	if (Node.Lines != null)  		m_NumLines = (int)Node.Lines;  	if (Node.Capacity != null)  		m_MaxChars = (int)Node.Capacity;  	if (Node.Alignment != null)  		m_Alignment = (TextEditAlignment)Node.Alignment;  	if (Node.FlashOnEmpty != null)  		m_FlashOnEmpty = (Node.FlashOnEmpty == 1) ? true : false;  	if (Node.FrameOnFocus != null)  		m_FrameOnFocus = (Node.FrameOnFocus == 1) ? true : false;  	if (State.InSharedPropertiesGroup)  		TextColor = State.Color;  	else  		TextColor = new Color (Node.Color.Numbers [0]' Node.Color.Numbers [1]' Node.Color.Numbers [2]);  	if (Node.BackColor != null)  		m_BackColor = new Color (Node.Color.Numbers [0]' Node.Color.Numbers [1]' Node.Color.Numbers [2]);  	else  		m_BackColor = new Color (57' 81' 110' 255);  	if (Node.Mode != null)  		m_Mode = (Node.Mode == "kReadOnly") ? TextEditMode.ReadOnly : TextEditMode.Insert;  	if (Node.ScrollbarImage != string.Empty)  		m_ScrollbarImage = m_Screen.GetImage (Node.ScrollbarImage).Image.Texture;  	if (Node.ScrollbarGutter != null)  		m_ScrollbarWidth = (int)Node.ScrollbarGutter;  	if (Node.ScrollbarType != null)  		m_ScrollbarType = (ScrollbarType)Node.ScrollbarType;  	if (Node.ResizeForExactLineHeight != null)  		m_ResizeForExactLineHeight = (Node.ResizeForExactLineHeight == 1) ? true : false;  	if (Node.EnableIME != null)  		m_EnableInputModeEditing = (Node.EnableIME == 1) ? true : false;  	if (Node.CursorColor != null)  		m_CursorColor = new Color (Node.CursorColor.Numbers [0]' Node.CursorColor.Numbers [1]' Node.CursorColor.Numbers [2]);  	if (Node.FrameColor != null)  		m_FrameColor = new Color (Node.FrameColor.Numbers [0]' Node.FrameColor.Numbers [1]' Node.FrameColor.Numbers [2]);  } else {  	if (State.BackColor != null)  		m_BackColor = State.BackColor;  	if (State.Color != null)  		TextColor = State.Color;  	if (State.CursorColor != null)  		m_CursorColor = State.CursorColor;  	if (State.Position != null) {  		Position = new Vector2 (State.Position [0]' State.Position [1]) + Screen.Position;  		m_TextPosition = Position;  	}  	if (State.Tooltip != "")  		Tooltip = State.Tooltip;  }  
Magic Number,Gonzo.Elements,UITextEdit,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UITextEdit.cs,UITextEdit,The following statement contains a magic number: if (!State.InSharedPropertiesGroup) {  	if (Node.TextEditPosition.Numbers.Count > 0) {  		Position = new Vector2 (Node.TextEditPosition.Numbers [0]' Node.TextEditPosition.Numbers [1]) + Screen.Position;  		m_TextPosition = Position;  	}  	if (State.InSharedPropertiesGroup)  		m_Size = State.Size;  	else {  		m_Size = new Vector2 ();  		m_Size.X = Node.Size.Numbers [0];  		m_Size.Y = Node.Size.Numbers [1];  	}  	if (Node.Tooltip != "")  		Tooltip = m_Screen.GetString (Node.Tooltip);  	Transparent = (Node.Transparent == 1) ? true : false;  	if (Node.Lines != null)  		m_NumLines = (int)Node.Lines;  	if (Node.Capacity != null)  		m_MaxChars = (int)Node.Capacity;  	if (Node.Alignment != null)  		m_Alignment = (TextEditAlignment)Node.Alignment;  	if (Node.FlashOnEmpty != null)  		m_FlashOnEmpty = (Node.FlashOnEmpty == 1) ? true : false;  	if (Node.FrameOnFocus != null)  		m_FrameOnFocus = (Node.FrameOnFocus == 1) ? true : false;  	if (State.InSharedPropertiesGroup)  		TextColor = State.Color;  	else  		TextColor = new Color (Node.Color.Numbers [0]' Node.Color.Numbers [1]' Node.Color.Numbers [2]);  	if (Node.BackColor != null)  		m_BackColor = new Color (Node.Color.Numbers [0]' Node.Color.Numbers [1]' Node.Color.Numbers [2]);  	else  		m_BackColor = new Color (57' 81' 110' 255);  	if (Node.Mode != null)  		m_Mode = (Node.Mode == "kReadOnly") ? TextEditMode.ReadOnly : TextEditMode.Insert;  	if (Node.ScrollbarImage != string.Empty)  		m_ScrollbarImage = m_Screen.GetImage (Node.ScrollbarImage).Image.Texture;  	if (Node.ScrollbarGutter != null)  		m_ScrollbarWidth = (int)Node.ScrollbarGutter;  	if (Node.ScrollbarType != null)  		m_ScrollbarType = (ScrollbarType)Node.ScrollbarType;  	if (Node.ResizeForExactLineHeight != null)  		m_ResizeForExactLineHeight = (Node.ResizeForExactLineHeight == 1) ? true : false;  	if (Node.EnableIME != null)  		m_EnableInputModeEditing = (Node.EnableIME == 1) ? true : false;  	if (Node.CursorColor != null)  		m_CursorColor = new Color (Node.CursorColor.Numbers [0]' Node.CursorColor.Numbers [1]' Node.CursorColor.Numbers [2]);  	if (Node.FrameColor != null)  		m_FrameColor = new Color (Node.FrameColor.Numbers [0]' Node.FrameColor.Numbers [1]' Node.FrameColor.Numbers [2]);  } else {  	if (State.BackColor != null)  		m_BackColor = State.BackColor;  	if (State.Color != null)  		TextColor = State.Color;  	if (State.CursorColor != null)  		m_CursorColor = State.CursorColor;  	if (State.Position != null) {  		Position = new Vector2 (State.Position [0]' State.Position [1]) + Screen.Position;  		m_TextPosition = Position;  	}  	if (State.Tooltip != "")  		Tooltip = State.Tooltip;  }  
Magic Number,Gonzo.Elements,UITextEdit,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UITextEdit.cs,UITextEdit,The following statement contains a magic number: if (!State.InSharedPropertiesGroup) {  	if (Node.TextEditPosition.Numbers.Count > 0) {  		Position = new Vector2 (Node.TextEditPosition.Numbers [0]' Node.TextEditPosition.Numbers [1]) + Screen.Position;  		m_TextPosition = Position;  	}  	if (State.InSharedPropertiesGroup)  		m_Size = State.Size;  	else {  		m_Size = new Vector2 ();  		m_Size.X = Node.Size.Numbers [0];  		m_Size.Y = Node.Size.Numbers [1];  	}  	if (Node.Tooltip != "")  		Tooltip = m_Screen.GetString (Node.Tooltip);  	Transparent = (Node.Transparent == 1) ? true : false;  	if (Node.Lines != null)  		m_NumLines = (int)Node.Lines;  	if (Node.Capacity != null)  		m_MaxChars = (int)Node.Capacity;  	if (Node.Alignment != null)  		m_Alignment = (TextEditAlignment)Node.Alignment;  	if (Node.FlashOnEmpty != null)  		m_FlashOnEmpty = (Node.FlashOnEmpty == 1) ? true : false;  	if (Node.FrameOnFocus != null)  		m_FrameOnFocus = (Node.FrameOnFocus == 1) ? true : false;  	if (State.InSharedPropertiesGroup)  		TextColor = State.Color;  	else  		TextColor = new Color (Node.Color.Numbers [0]' Node.Color.Numbers [1]' Node.Color.Numbers [2]);  	if (Node.BackColor != null)  		m_BackColor = new Color (Node.Color.Numbers [0]' Node.Color.Numbers [1]' Node.Color.Numbers [2]);  	else  		m_BackColor = new Color (57' 81' 110' 255);  	if (Node.Mode != null)  		m_Mode = (Node.Mode == "kReadOnly") ? TextEditMode.ReadOnly : TextEditMode.Insert;  	if (Node.ScrollbarImage != string.Empty)  		m_ScrollbarImage = m_Screen.GetImage (Node.ScrollbarImage).Image.Texture;  	if (Node.ScrollbarGutter != null)  		m_ScrollbarWidth = (int)Node.ScrollbarGutter;  	if (Node.ScrollbarType != null)  		m_ScrollbarType = (ScrollbarType)Node.ScrollbarType;  	if (Node.ResizeForExactLineHeight != null)  		m_ResizeForExactLineHeight = (Node.ResizeForExactLineHeight == 1) ? true : false;  	if (Node.EnableIME != null)  		m_EnableInputModeEditing = (Node.EnableIME == 1) ? true : false;  	if (Node.CursorColor != null)  		m_CursorColor = new Color (Node.CursorColor.Numbers [0]' Node.CursorColor.Numbers [1]' Node.CursorColor.Numbers [2]);  	if (Node.FrameColor != null)  		m_FrameColor = new Color (Node.FrameColor.Numbers [0]' Node.FrameColor.Numbers [1]' Node.FrameColor.Numbers [2]);  } else {  	if (State.BackColor != null)  		m_BackColor = State.BackColor;  	if (State.Color != null)  		TextColor = State.Color;  	if (State.CursorColor != null)  		m_CursorColor = State.CursorColor;  	if (State.Position != null) {  		Position = new Vector2 (State.Position [0]' State.Position [1]) + Screen.Position;  		m_TextPosition = Position;  	}  	if (State.Tooltip != "")  		Tooltip = State.Tooltip;  }  
Magic Number,Gonzo.Elements,UITextEdit,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UITextEdit.cs,UITextEdit,The following statement contains a magic number: if (State.InSharedPropertiesGroup)  	TextColor = State.Color;  else  	TextColor = new Color (Node.Color.Numbers [0]' Node.Color.Numbers [1]' Node.Color.Numbers [2]);  
Magic Number,Gonzo.Elements,UITextEdit,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UITextEdit.cs,UITextEdit,The following statement contains a magic number: TextColor = new Color (Node.Color.Numbers [0]' Node.Color.Numbers [1]' Node.Color.Numbers [2]);  
Magic Number,Gonzo.Elements,UITextEdit,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UITextEdit.cs,UITextEdit,The following statement contains a magic number: if (Node.BackColor != null)  	m_BackColor = new Color (Node.Color.Numbers [0]' Node.Color.Numbers [1]' Node.Color.Numbers [2]);  else  	m_BackColor = new Color (57' 81' 110' 255);  
Magic Number,Gonzo.Elements,UITextEdit,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UITextEdit.cs,UITextEdit,The following statement contains a magic number: if (Node.BackColor != null)  	m_BackColor = new Color (Node.Color.Numbers [0]' Node.Color.Numbers [1]' Node.Color.Numbers [2]);  else  	m_BackColor = new Color (57' 81' 110' 255);  
Magic Number,Gonzo.Elements,UITextEdit,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UITextEdit.cs,UITextEdit,The following statement contains a magic number: if (Node.BackColor != null)  	m_BackColor = new Color (Node.Color.Numbers [0]' Node.Color.Numbers [1]' Node.Color.Numbers [2]);  else  	m_BackColor = new Color (57' 81' 110' 255);  
Magic Number,Gonzo.Elements,UITextEdit,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UITextEdit.cs,UITextEdit,The following statement contains a magic number: if (Node.BackColor != null)  	m_BackColor = new Color (Node.Color.Numbers [0]' Node.Color.Numbers [1]' Node.Color.Numbers [2]);  else  	m_BackColor = new Color (57' 81' 110' 255);  
Magic Number,Gonzo.Elements,UITextEdit,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UITextEdit.cs,UITextEdit,The following statement contains a magic number: if (Node.BackColor != null)  	m_BackColor = new Color (Node.Color.Numbers [0]' Node.Color.Numbers [1]' Node.Color.Numbers [2]);  else  	m_BackColor = new Color (57' 81' 110' 255);  
Magic Number,Gonzo.Elements,UITextEdit,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UITextEdit.cs,UITextEdit,The following statement contains a magic number: m_BackColor = new Color (Node.Color.Numbers [0]' Node.Color.Numbers [1]' Node.Color.Numbers [2]);  
Magic Number,Gonzo.Elements,UITextEdit,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UITextEdit.cs,UITextEdit,The following statement contains a magic number: m_BackColor = new Color (57' 81' 110' 255);  
Magic Number,Gonzo.Elements,UITextEdit,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UITextEdit.cs,UITextEdit,The following statement contains a magic number: m_BackColor = new Color (57' 81' 110' 255);  
Magic Number,Gonzo.Elements,UITextEdit,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UITextEdit.cs,UITextEdit,The following statement contains a magic number: m_BackColor = new Color (57' 81' 110' 255);  
Magic Number,Gonzo.Elements,UITextEdit,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UITextEdit.cs,UITextEdit,The following statement contains a magic number: m_BackColor = new Color (57' 81' 110' 255);  
Magic Number,Gonzo.Elements,UITextEdit,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UITextEdit.cs,UITextEdit,The following statement contains a magic number: if (Node.CursorColor != null)  	m_CursorColor = new Color (Node.CursorColor.Numbers [0]' Node.CursorColor.Numbers [1]' Node.CursorColor.Numbers [2]);  
Magic Number,Gonzo.Elements,UITextEdit,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UITextEdit.cs,UITextEdit,The following statement contains a magic number: m_CursorColor = new Color (Node.CursorColor.Numbers [0]' Node.CursorColor.Numbers [1]' Node.CursorColor.Numbers [2]);  
Magic Number,Gonzo.Elements,UITextEdit,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UITextEdit.cs,UITextEdit,The following statement contains a magic number: if (Node.FrameColor != null)  	m_FrameColor = new Color (Node.FrameColor.Numbers [0]' Node.FrameColor.Numbers [1]' Node.FrameColor.Numbers [2]);  
Magic Number,Gonzo.Elements,UITextEdit,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UITextEdit.cs,UITextEdit,The following statement contains a magic number: m_FrameColor = new Color (Node.FrameColor.Numbers [0]' Node.FrameColor.Numbers [1]' Node.FrameColor.Numbers [2]);  
Magic Number,Gonzo.Elements,UITextEdit,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UITextEdit.cs,UITextEdit,The following statement contains a magic number: switch (Font) {  case 9:  	m_Font = Screen.Font9px;  	break;  case 10:  	m_Font = Screen.Font10px;  	break;  case 12:  	m_Font = Screen.Font12px;  	break;  case 14:  	m_Font = Screen.Font14px;  	break;  case 16:  	m_Font = Screen.Font16px;  	break;  }  
Magic Number,Gonzo.Elements,UITextEdit,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UITextEdit.cs,UITextEdit,The following statement contains a magic number: switch (Font) {  case 9:  	m_Font = Screen.Font9px;  	break;  case 10:  	m_Font = Screen.Font10px;  	break;  case 12:  	m_Font = Screen.Font12px;  	break;  case 14:  	m_Font = Screen.Font14px;  	break;  case 16:  	m_Font = Screen.Font16px;  	break;  }  
Magic Number,Gonzo.Elements,UITextEdit,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UITextEdit.cs,UITextEdit,The following statement contains a magic number: switch (Font) {  case 9:  	m_Font = Screen.Font9px;  	break;  case 10:  	m_Font = Screen.Font10px;  	break;  case 12:  	m_Font = Screen.Font12px;  	break;  case 14:  	m_Font = Screen.Font14px;  	break;  case 16:  	m_Font = Screen.Font16px;  	break;  }  
Magic Number,Gonzo.Elements,UITextEdit,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UITextEdit.cs,UITextEdit,The following statement contains a magic number: switch (Font) {  case 9:  	m_Font = Screen.Font9px;  	break;  case 10:  	m_Font = Screen.Font10px;  	break;  case 12:  	m_Font = Screen.Font12px;  	break;  case 14:  	m_Font = Screen.Font14px;  	break;  case 16:  	m_Font = Screen.Font16px;  	break;  }  
Magic Number,Gonzo.Elements,UITextEdit,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UITextEdit.cs,UITextEdit,The following statement contains a magic number: switch (Font) {  case 9:  	m_Font = Screen.Font9px;  	break;  case 10:  	m_Font = Screen.Font10px;  	break;  case 12:  	m_Font = Screen.Font12px;  	break;  case 14:  	m_Font = Screen.Font14px;  	break;  case 16:  	m_Font = Screen.Font16px;  	break;  }  
Magic Number,Gonzo.Elements,UITextEdit,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UITextEdit.cs,UITextEdit,The following statement contains a magic number: m_CursorVisibilityTimer = new Timer (100);  
Magic Number,Gonzo.Elements,UITextEdit,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UITextEdit.cs,Manager_OnTextInput,The following statement contains a magic number: if (m_HasFocus) {  	if (m_Mode != TextEditMode.ReadOnly) {  		if (m_NumLines > 1) {  			//Check that text doesn't go beyond width of control...  			if ((m_Font.MeasureString (m_Lines [m_Cursor.LineIndex].SBuilder.ToString ()).X >= m_Size.X) && !m_RemovingTxt && !m_MovingCursor) {  				if (m_TextPosition.Y <= Position.Y + ((m_NumLines - 2) * m_Font.LineSpacing)) {  					m_TextPosition.Y += m_Font.LineSpacing;  					m_Lines.Add (new RenderableText () {  						SBuilder = new StringBuilder ()'  						Position = m_TextPosition  					});  					m_Cursor.Position.Y += m_Font.LineSpacing;  					m_Cursor.LineIndex++;  					m_Cursor.CharacterIndex = 0;  				} else//Text went beyond the borders of the control...  				 {  					foreach (RenderableText Txt in m_Lines)  						Txt.Position.Y -= m_Font.LineSpacing;  					m_Lines.Add (new RenderableText () {  						SBuilder = new StringBuilder ()'  						Position = m_TextPosition  					});  					m_ScrollbarHeight -= m_Font.LineSpacing;  					//TODO: Resize scrollbar...  					m_Cursor.LineIndex++;  					m_Cursor.CharacterIndex = 0;  					m_Lines [m_VisibilityIndex].Visible = false;  					m_VisibilityIndex++;  				}  				m_Cursor.Position.X = Position.X;  			}  		} else {  			//Text went beyond the borders of the control...  			if (m_Font.MeasureString (CurrentInput).X >= (m_Size.X - m_Font.MeasureString (e.Character.ToString ()).X) && !m_RemovingTxt) {  				m_Lines.Add (new RenderableText () {  					SBuilder = new StringBuilder ()'  					Position = m_Cursor.Position'  					Visible = true  				});  				m_Cursor.Position.X = m_Size.X;  				//In a single line control' each "line" will hold one character.  				m_Cursor.LineIndex++;  				foreach (RenderableText Txt in m_Lines) {  					Txt.Position.X -= m_Font.MeasureString (e.Character.ToString ()).X;  					if (Txt.Position.X < Position.X)  						Txt.Visible = false;  				}  			} else {  				m_Lines.Add (new RenderableText () {  					SBuilder = new StringBuilder ()'  					Position = m_Cursor.Position'  					Visible = true  				});  				//In a single line control' each "line" will hold one character.  				m_Cursor.LineIndex++;  			}  		}  	}  	if (!m_IsUpperCase) {  		//If the cursor is in the middle of a line' replace the character.  		if (m_NumLines > 1) {  			if (m_Cursor.CharacterIndex < m_Lines [m_Cursor.LineIndex].SBuilder.Length)  				m_Lines [m_Cursor.LineIndex].SBuilder [m_Cursor.CharacterIndex] = e.Character;  			else  				m_Lines [m_Cursor.LineIndex].SBuilder.Append (e.Character);  		} else {  			if (m_Cursor.CharacterIndex < CurrentInput.Length)  				m_Lines [m_Cursor.LineIndex].SBuilder [0] = e.Character;  			else {  				RenderableText Txt = new RenderableText ();  				Txt.SBuilder = new StringBuilder (e.Character.ToString ());  				Txt.Position = m_Cursor.Position;  				Txt.Visible = true;  				m_Lines.Insert (m_Cursor.LineIndex' Txt);  			}  		}  	} else {  		if (m_NumLines > 1) {  			//If the cursor is in the middle of a line' replace the character.  			if (m_Cursor.CharacterIndex < m_Lines [m_Cursor.LineIndex].SBuilder.Length)  				m_Lines [m_Cursor.LineIndex].SBuilder [m_Cursor.CharacterIndex] = e.Character.ToString ().ToUpper ().ToCharArray () [0];  			else  				m_Lines [m_Cursor.LineIndex].SBuilder.Append (e.Character.ToString ().ToUpper ());  		} else {  			if ((m_Cursor.CharacterIndex < CurrentInput.Length) && m_MovingCursor)  				m_Lines [m_Cursor.LineIndex].SBuilder [0] = e.Character;  			else {  				RenderableText Txt = new RenderableText ();  				Txt.SBuilder = new StringBuilder (e.Character.ToString ().ToUpper ());  				Txt.Position = m_Cursor.Position;  				Txt.Visible = true;  				m_Lines.Insert (m_Cursor.LineIndex' Txt);  			}  		}  	}  	m_Cursor.CharacterIndex++;  	m_RemovingTxt = false;  	m_MovingCursor = false;  	m_Cursor.Position.X += m_Font.MeasureString (e.Character.ToString ()).X;  }  
Magic Number,Gonzo.Elements,UITextEdit,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UITextEdit.cs,Manager_OnTextInput,The following statement contains a magic number: if (m_Mode != TextEditMode.ReadOnly) {  	if (m_NumLines > 1) {  		//Check that text doesn't go beyond width of control...  		if ((m_Font.MeasureString (m_Lines [m_Cursor.LineIndex].SBuilder.ToString ()).X >= m_Size.X) && !m_RemovingTxt && !m_MovingCursor) {  			if (m_TextPosition.Y <= Position.Y + ((m_NumLines - 2) * m_Font.LineSpacing)) {  				m_TextPosition.Y += m_Font.LineSpacing;  				m_Lines.Add (new RenderableText () {  					SBuilder = new StringBuilder ()'  					Position = m_TextPosition  				});  				m_Cursor.Position.Y += m_Font.LineSpacing;  				m_Cursor.LineIndex++;  				m_Cursor.CharacterIndex = 0;  			} else//Text went beyond the borders of the control...  			 {  				foreach (RenderableText Txt in m_Lines)  					Txt.Position.Y -= m_Font.LineSpacing;  				m_Lines.Add (new RenderableText () {  					SBuilder = new StringBuilder ()'  					Position = m_TextPosition  				});  				m_ScrollbarHeight -= m_Font.LineSpacing;  				//TODO: Resize scrollbar...  				m_Cursor.LineIndex++;  				m_Cursor.CharacterIndex = 0;  				m_Lines [m_VisibilityIndex].Visible = false;  				m_VisibilityIndex++;  			}  			m_Cursor.Position.X = Position.X;  		}  	} else {  		//Text went beyond the borders of the control...  		if (m_Font.MeasureString (CurrentInput).X >= (m_Size.X - m_Font.MeasureString (e.Character.ToString ()).X) && !m_RemovingTxt) {  			m_Lines.Add (new RenderableText () {  				SBuilder = new StringBuilder ()'  				Position = m_Cursor.Position'  				Visible = true  			});  			m_Cursor.Position.X = m_Size.X;  			//In a single line control' each "line" will hold one character.  			m_Cursor.LineIndex++;  			foreach (RenderableText Txt in m_Lines) {  				Txt.Position.X -= m_Font.MeasureString (e.Character.ToString ()).X;  				if (Txt.Position.X < Position.X)  					Txt.Visible = false;  			}  		} else {  			m_Lines.Add (new RenderableText () {  				SBuilder = new StringBuilder ()'  				Position = m_Cursor.Position'  				Visible = true  			});  			//In a single line control' each "line" will hold one character.  			m_Cursor.LineIndex++;  		}  	}  }  
Magic Number,Gonzo.Elements,UITextEdit,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UITextEdit.cs,Manager_OnTextInput,The following statement contains a magic number: if (m_NumLines > 1) {  	//Check that text doesn't go beyond width of control...  	if ((m_Font.MeasureString (m_Lines [m_Cursor.LineIndex].SBuilder.ToString ()).X >= m_Size.X) && !m_RemovingTxt && !m_MovingCursor) {  		if (m_TextPosition.Y <= Position.Y + ((m_NumLines - 2) * m_Font.LineSpacing)) {  			m_TextPosition.Y += m_Font.LineSpacing;  			m_Lines.Add (new RenderableText () {  				SBuilder = new StringBuilder ()'  				Position = m_TextPosition  			});  			m_Cursor.Position.Y += m_Font.LineSpacing;  			m_Cursor.LineIndex++;  			m_Cursor.CharacterIndex = 0;  		} else//Text went beyond the borders of the control...  		 {  			foreach (RenderableText Txt in m_Lines)  				Txt.Position.Y -= m_Font.LineSpacing;  			m_Lines.Add (new RenderableText () {  				SBuilder = new StringBuilder ()'  				Position = m_TextPosition  			});  			m_ScrollbarHeight -= m_Font.LineSpacing;  			//TODO: Resize scrollbar...  			m_Cursor.LineIndex++;  			m_Cursor.CharacterIndex = 0;  			m_Lines [m_VisibilityIndex].Visible = false;  			m_VisibilityIndex++;  		}  		m_Cursor.Position.X = Position.X;  	}  } else {  	//Text went beyond the borders of the control...  	if (m_Font.MeasureString (CurrentInput).X >= (m_Size.X - m_Font.MeasureString (e.Character.ToString ()).X) && !m_RemovingTxt) {  		m_Lines.Add (new RenderableText () {  			SBuilder = new StringBuilder ()'  			Position = m_Cursor.Position'  			Visible = true  		});  		m_Cursor.Position.X = m_Size.X;  		//In a single line control' each "line" will hold one character.  		m_Cursor.LineIndex++;  		foreach (RenderableText Txt in m_Lines) {  			Txt.Position.X -= m_Font.MeasureString (e.Character.ToString ()).X;  			if (Txt.Position.X < Position.X)  				Txt.Visible = false;  		}  	} else {  		m_Lines.Add (new RenderableText () {  			SBuilder = new StringBuilder ()'  			Position = m_Cursor.Position'  			Visible = true  		});  		//In a single line control' each "line" will hold one character.  		m_Cursor.LineIndex++;  	}  }  
Magic Number,Gonzo.Elements,UITextEdit,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UITextEdit.cs,Manager_OnTextInput,The following statement contains a magic number: if ((m_Font.MeasureString (m_Lines [m_Cursor.LineIndex].SBuilder.ToString ()).X >= m_Size.X) && !m_RemovingTxt && !m_MovingCursor) {  	if (m_TextPosition.Y <= Position.Y + ((m_NumLines - 2) * m_Font.LineSpacing)) {  		m_TextPosition.Y += m_Font.LineSpacing;  		m_Lines.Add (new RenderableText () {  			SBuilder = new StringBuilder ()'  			Position = m_TextPosition  		});  		m_Cursor.Position.Y += m_Font.LineSpacing;  		m_Cursor.LineIndex++;  		m_Cursor.CharacterIndex = 0;  	} else//Text went beyond the borders of the control...  	 {  		foreach (RenderableText Txt in m_Lines)  			Txt.Position.Y -= m_Font.LineSpacing;  		m_Lines.Add (new RenderableText () {  			SBuilder = new StringBuilder ()'  			Position = m_TextPosition  		});  		m_ScrollbarHeight -= m_Font.LineSpacing;  		//TODO: Resize scrollbar...  		m_Cursor.LineIndex++;  		m_Cursor.CharacterIndex = 0;  		m_Lines [m_VisibilityIndex].Visible = false;  		m_VisibilityIndex++;  	}  	m_Cursor.Position.X = Position.X;  }  
Magic Number,Gonzo.Elements,UITextEdit,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UITextEdit.cs,Manager_OnTextInput,The following statement contains a magic number: if (m_TextPosition.Y <= Position.Y + ((m_NumLines - 2) * m_Font.LineSpacing)) {  	m_TextPosition.Y += m_Font.LineSpacing;  	m_Lines.Add (new RenderableText () {  		SBuilder = new StringBuilder ()'  		Position = m_TextPosition  	});  	m_Cursor.Position.Y += m_Font.LineSpacing;  	m_Cursor.LineIndex++;  	m_Cursor.CharacterIndex = 0;  } else//Text went beyond the borders of the control...   {  	foreach (RenderableText Txt in m_Lines)  		Txt.Position.Y -= m_Font.LineSpacing;  	m_Lines.Add (new RenderableText () {  		SBuilder = new StringBuilder ()'  		Position = m_TextPosition  	});  	m_ScrollbarHeight -= m_Font.LineSpacing;  	//TODO: Resize scrollbar...  	m_Cursor.LineIndex++;  	m_Cursor.CharacterIndex = 0;  	m_Lines [m_VisibilityIndex].Visible = false;  	m_VisibilityIndex++;  }  
Magic Number,Gonzo.Elements,UITextEdit,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UITextEdit.cs,Update,The following statement contains a magic number: if (m_Mode != TextEditMode.ReadOnly) {  	m_VerticalTextBoundary = (int)(Position.X + m_Font.MeasureString (m_Lines [m_Cursor.LineIndex].SBuilder.ToString ()).X);  	m_IsUpperCase = IsUpperCase (Input);  	if (m_HasFocus) {  		Keys[] PressedKeys = Input.CurrentKeyboardState.GetPressedKeys ();  		foreach (Keys K in PressedKeys) {  			if (Input.IsNewPress (K)) {  				switch (K) {  				case Keys.Divide:  					if (m_Cursor.CharacterIndex < m_Lines [m_Cursor.LineIndex].SBuilder.Length)  						m_Lines [m_Cursor.LineIndex].SBuilder [m_Cursor.CharacterIndex] = '/';  					else  						m_Lines [m_Cursor.LineIndex].SBuilder.Append ("/");  					m_Cursor.Position.X += m_Font.MeasureString ("/").X;  					m_Cursor.CharacterIndex++;  					m_RemovingTxt = false;  					break;  				case Keys.OemSemicolon:  					if (Input.InputRegion != null) {  						switch (Input.InputRegion.LayoutName) {  						case "English":  							if (m_Cursor.CharacterIndex < m_Lines [m_Cursor.LineIndex].SBuilder.Length)  								m_Lines [m_Cursor.LineIndex].SBuilder [m_Cursor.CharacterIndex] = ';';  							else  								m_Lines [m_Cursor.LineIndex].SBuilder.Append (";");  							m_Cursor.CharacterIndex++;  							m_MovingCursor = false;  							m_RemovingTxt = false;  							m_Cursor.Position.X += m_Font.MeasureString (";").X;  							break;  						}  					}  					break;  				case Keys.OemQuotes:  					if (Input.InputRegion != null) {  						switch (Input.InputRegion.LayoutName) {  						case "English":  							//TODO: Should this be double quote if upper??  							if (m_Cursor.CharacterIndex < m_Lines [m_Cursor.LineIndex].SBuilder.Length)  								m_Lines [m_Cursor.LineIndex].SBuilder [m_Cursor.CharacterIndex] = '\'';  							else  								m_Lines [m_Cursor.LineIndex].SBuilder.Append ("'");  							m_Cursor.CharacterIndex++;  							m_MovingCursor = false;  							m_RemovingTxt = false;  							m_Cursor.Position.X += m_Font.MeasureString ("'").X;  							break;  						}  					}  					break;  				case Keys.OemCloseBrackets:  					if (Input.InputRegion != null) {  						switch (Input.InputRegion.LayoutName) {  						case "English":  							if (m_Cursor.CharacterIndex < m_Lines [m_Cursor.LineIndex].SBuilder.Length)  								m_Lines [m_Cursor.LineIndex].SBuilder [m_Cursor.CharacterIndex] = '}';  							else  								m_Lines [m_Cursor.LineIndex].SBuilder.Append ("}");  							m_Cursor.Position.X += m_Font.MeasureString ("}").X;  							break;  						case "Norwegian":  						case "Swedish":  						case "Finnish":  						case "Danish":  							if (IsUpperCase (Input)) {  								if (m_Cursor.CharacterIndex < m_Lines [m_Cursor.LineIndex].SBuilder.Length)  									m_Lines [m_Cursor.LineIndex].SBuilder [m_Cursor.CharacterIndex] = '^';  								else  									m_Lines [m_Cursor.LineIndex].SBuilder.Append ("^");  								m_Cursor.Position.X += m_Font.MeasureString ("^").X;  							} else if (Input.IsCurPress (Keys.RightAlt)) {  								if (m_Cursor.CharacterIndex < m_Lines [m_Cursor.LineIndex].SBuilder.Length)  									m_Lines [m_Cursor.LineIndex].SBuilder [m_Cursor.CharacterIndex] = '~';  								else  									m_Lines [m_Cursor.LineIndex].SBuilder.Append ("~");  								m_Cursor.Position.X += m_Font.MeasureString ("~").X;  							}  							break;  						}  					}  					m_Cursor.CharacterIndex++;  					m_MovingCursor = false;  					m_RemovingTxt = false;  					break;  				case Keys.OemPlus:  					if (m_Cursor.CharacterIndex < m_Lines [m_Cursor.LineIndex].SBuilder.Length)  						m_Lines [m_Cursor.LineIndex].SBuilder [m_Cursor.CharacterIndex] = '+';  					else  						m_Lines [m_Cursor.LineIndex].SBuilder.Append ("+");  					m_Cursor.Position.X += m_Font.MeasureString ("+").X;  					m_Cursor.CharacterIndex++;  					m_MovingCursor = false;  					m_RemovingTxt = false;  					break;  				case Keys.OemComma:  					if (IsUpperCase (Input)) {  						if (m_Cursor.CharacterIndex < m_Lines [m_Cursor.LineIndex].SBuilder.Length)  							m_Lines [m_Cursor.LineIndex].SBuilder [m_Cursor.CharacterIndex] = ';';  						else  							m_Lines [m_Cursor.LineIndex].SBuilder.Append (";");  						m_Cursor.Position.X += m_Font.MeasureString (";").X;  					} else {  						if (m_Cursor.CharacterIndex < m_Lines [m_Cursor.LineIndex].SBuilder.Length)  							m_Lines [m_Cursor.LineIndex].SBuilder [m_Cursor.CharacterIndex] = ''';  						else  							m_Lines [m_Cursor.LineIndex].SBuilder.Append ("'");  						m_Cursor.Position.X += m_Font.MeasureString ("'").X;  					}  					m_Cursor.CharacterIndex++;  					m_MovingCursor = false;  					m_RemovingTxt = false;  					break;  				case Keys.OemPeriod:  					if (m_Cursor.CharacterIndex < m_Lines [m_Cursor.LineIndex].SBuilder.Length)  						m_Lines [m_Cursor.LineIndex].SBuilder [m_Cursor.CharacterIndex] = '.';  					else  						m_Lines [m_Cursor.LineIndex].SBuilder.Append (".");  					m_Cursor.Position.X += m_Font.MeasureString (".").X;  					m_Cursor.CharacterIndex++;  					m_MovingCursor = false;  					m_RemovingTxt = false;  					break;  				case Keys.Space:  					if (m_Cursor.CharacterIndex < m_Lines [m_Cursor.LineIndex].SBuilder.Length)  						m_Lines [m_Cursor.LineIndex].SBuilder [m_Cursor.CharacterIndex] = ' ';  					else  						m_Lines [m_Cursor.LineIndex].SBuilder.Append (" ");  					m_Cursor.Position.X += m_Font.MeasureString (" ").X;  					m_Cursor.CharacterIndex++;  					m_MovingCursor = false;  					m_RemovingTxt = false;  					break;  				case Keys.Tab:  					if (m_Cursor.CharacterIndex < m_Lines [m_Cursor.LineIndex].SBuilder.Length)  						m_Lines [m_Cursor.LineIndex].SBuilder.Append ("   ");  					//TODO: How to insert tab??  					else  						m_Lines [m_Cursor.LineIndex].SBuilder.Append ("   ");  					m_Cursor.Position.X += m_Font.MeasureString ("   ").X;  					m_Cursor.CharacterIndex++;  					m_MovingCursor = false;  					m_RemovingTxt = false;  					break;  				case Keys.Subtract:  					if (m_Cursor.CharacterIndex < m_Lines [m_Cursor.LineIndex].SBuilder.Length)  						m_Lines [m_Cursor.LineIndex].SBuilder [m_Cursor.CharacterIndex] = '-';  					else  						m_Lines [m_Cursor.LineIndex].SBuilder.Append ("-");  					m_Cursor.Position.X += m_Font.MeasureString ("-").X;  					m_Cursor.CharacterIndex++;  					m_MovingCursor = false;  					m_RemovingTxt = false;  					break;  				case Keys.NumPad0:  					if (m_Cursor.CharacterIndex < m_Lines [m_Cursor.LineIndex].SBuilder.Length)  						m_Lines [m_Cursor.LineIndex].SBuilder [m_Cursor.CharacterIndex] = '0';  					else  						m_Lines [m_Cursor.LineIndex].SBuilder.Append ("0");  					m_Cursor.Position.X += m_Font.MeasureString ("0").X;  					m_Cursor.CharacterIndex++;  					m_MovingCursor = false;  					m_RemovingTxt = false;  					break;  				case Keys.NumPad1:  					if (m_Cursor.CharacterIndex < m_Lines [m_Cursor.LineIndex].SBuilder.Length)  						m_Lines [m_Cursor.LineIndex].SBuilder [m_Cursor.CharacterIndex] = '1';  					else  						m_Lines [m_Cursor.LineIndex].SBuilder.Append ("1");  					m_Cursor.Position.X += m_Font.MeasureString ("1").X;  					m_Cursor.CharacterIndex++;  					m_MovingCursor = false;  					m_RemovingTxt = false;  					break;  				case Keys.NumPad2:  					if (m_Cursor.CharacterIndex < m_Lines [m_Cursor.LineIndex].SBuilder.Length)  						m_Lines [m_Cursor.LineIndex].SBuilder [m_Cursor.CharacterIndex] = '2';  					else  						m_Lines [m_Cursor.LineIndex].SBuilder.Append ("2");  					m_Cursor.Position.X += m_Font.MeasureString ("2").X;  					m_Cursor.CharacterIndex++;  					m_MovingCursor = false;  					m_RemovingTxt = false;  					break;  				case Keys.NumPad3:  					if (m_Cursor.CharacterIndex < m_Lines [m_Cursor.LineIndex].SBuilder.Length)  						m_Lines [m_Cursor.LineIndex].SBuilder [m_Cursor.CharacterIndex] = '3';  					else  						m_Lines [m_Cursor.LineIndex].SBuilder.Append ("3");  					m_Cursor.Position.X += m_Font.MeasureString ("3").X;  					m_Cursor.CharacterIndex++;  					m_MovingCursor = false;  					m_RemovingTxt = false;  					break;  				case Keys.NumPad4:  					if (m_Cursor.CharacterIndex < m_Lines [m_Cursor.LineIndex].SBuilder.Length)  						m_Lines [m_Cursor.LineIndex].SBuilder [m_Cursor.CharacterIndex] = '4';  					else  						m_Lines [m_Cursor.LineIndex].SBuilder.Append ("4");  					m_Cursor.Position.X += m_Font.MeasureString ("4").X;  					m_Cursor.CharacterIndex++;  					m_MovingCursor = false;  					m_RemovingTxt = false;  					break;  				case Keys.NumPad5:  					if (m_Cursor.CharacterIndex < m_Lines [m_Cursor.LineIndex].SBuilder.Length)  						m_Lines [m_Cursor.LineIndex].SBuilder [m_Cursor.CharacterIndex] = '5';  					else  						m_Lines [m_Cursor.LineIndex].SBuilder.Append ("5");  					m_Cursor.Position.X += m_Font.MeasureString ("5").X;  					m_Cursor.CharacterIndex++;  					m_MovingCursor = false;  					m_RemovingTxt = false;  					break;  				case Keys.NumPad6:  					if (m_Cursor.CharacterIndex < m_Lines [m_Cursor.LineIndex].SBuilder.Length)  						m_Lines [m_Cursor.LineIndex].SBuilder [m_Cursor.CharacterIndex] = '6';  					else  						m_Lines [m_Cursor.LineIndex].SBuilder.Append ("6");  					m_Cursor.Position.X += m_Font.MeasureString ("6").X;  					m_Cursor.CharacterIndex++;  					m_MovingCursor = false;  					m_RemovingTxt = false;  					break;  				case Keys.NumPad7:  					if (m_Cursor.CharacterIndex < m_Lines [m_Cursor.LineIndex].SBuilder.Length)  						m_Lines [m_Cursor.LineIndex].SBuilder [m_Cursor.CharacterIndex] = '7';  					m_Cursor.Position.X += m_Font.MeasureString ("7").X;  					m_Cursor.CharacterIndex++;  					m_MovingCursor = false;  					m_RemovingTxt = false;  					break;  				case Keys.NumPad8:  					if (m_Cursor.CharacterIndex < m_Lines [m_Cursor.LineIndex].SBuilder.Length)  						m_Lines [m_Cursor.LineIndex].SBuilder [m_Cursor.CharacterIndex] = '8';  					else  						m_Lines [m_Cursor.LineIndex].SBuilder.Append ("8");  					m_Cursor.Position.X += m_Font.MeasureString ("8").X;  					m_Cursor.CharacterIndex++;  					m_MovingCursor = false;  					m_RemovingTxt = false;  					break;  				case Keys.NumPad9:  					if (m_Cursor.CharacterIndex < m_Lines [m_Cursor.LineIndex].SBuilder.Length)  						m_Lines [m_Cursor.LineIndex].SBuilder [m_Cursor.CharacterIndex] = '9';  					else  						m_Lines [m_Cursor.LineIndex].SBuilder.Append ("9");  					m_Cursor.Position.X += m_Font.MeasureString ("9").X;  					m_Cursor.CharacterIndex++;  					m_MovingCursor = false;  					m_RemovingTxt = false;  					break;  				case Keys.Multiply:  					if (m_Cursor.CharacterIndex < m_Lines [m_Cursor.LineIndex].SBuilder.Length)  						m_Lines [m_Cursor.LineIndex].SBuilder [m_Cursor.CharacterIndex] = '*';  					else  						m_Lines [m_Cursor.LineIndex].SBuilder.Append ("*");  					m_Cursor.Position.X += m_Font.MeasureString ("*").X;  					m_Cursor.CharacterIndex++;  					m_MovingCursor = false;  					m_RemovingTxt = false;  					break;  				case Keys.Enter:  					if (m_NumLines > 1) {  						m_TextPosition.X = Position.X;  						m_TextPosition.Y += m_Font.LineSpacing;  						m_Lines.Add (new RenderableText () {  							SBuilder = new StringBuilder ()'  							Position = m_TextPosition  						});  						m_Cursor.Position.X = Position.X;  						m_Cursor.Position.Y += m_Font.LineSpacing;  						m_Cursor.LineIndex += 1;  						m_Cursor.CharacterIndex = 0;  						m_MovingCursor = false;  						m_RemovingTxt = false;  					}  					break;  				case Keys.Back:  					m_RemovingTxt = true;  					//Cursor hasn't been moved.  					if (!m_MovingCursor) {  						if (m_Cursor.Position.X <= m_VerticalTextBoundary)  							m_Cursor.Position.X = m_VerticalTextBoundary;  						else {  							if (m_Cursor.Position.X > Position.X)  								m_Cursor.Position.X -= m_Font.MeasureString ("a").X;  						}  					}  					//If the current line is empty' move the cursor up.  					if (m_Lines [m_Cursor.LineIndex].SBuilder.Length == 0) {  						if (m_NumLines > 1) {  							if (m_TextPosition.Y > Position.Y) {  								m_TextPosition.Y -= m_Font.LineSpacing;  								m_Cursor.Position.X = Position.X + m_Size.X;  								m_Cursor.Position.Y -= m_Font.LineSpacing;  							}  							if (m_Cursor.LineIndex > 0) {  								m_Cursor.LineIndex--;  								m_Cursor.CharacterIndex = m_Lines [m_Cursor.LineIndex].SBuilder.Length;  							}  						} else {  							if (m_Cursor.LineIndex > 0)  								m_Cursor.LineIndex--;  						}  					} else {  						if (m_NumLines > 1) {  							m_Lines [m_Cursor.LineIndex].SBuilder.Remove ((int)(m_Cursor.CharacterIndex - 1)' 1);  							m_Cursor.CharacterIndex--;  							m_Cursor.Position.X -= m_Font.MeasureString ("a").X;  						} else {  							m_Lines.Remove (m_Lines [m_Cursor.CharacterIndex]);  							m_Cursor.CharacterIndex--;  							m_Cursor.LineIndex--;  							m_Cursor.Position.X -= m_Font.MeasureString ("a").X;  						}  					}  					//Cursor moved to the beginning of a line.  					if (m_Cursor.Position.X <= Position.X) {  						if (m_TextPosition.Y > Position.Y) {  							m_TextPosition.Y -= m_Font.LineSpacing;  							m_Cursor.Position.X = Position.X + m_Size.X;  							m_Cursor.Position.Y -= m_Font.LineSpacing;  						}  						if (m_Cursor.LineIndex > 0) {  							m_Cursor.LineIndex--;  							m_Cursor.CharacterIndex = m_Lines [m_Cursor.LineIndex].SBuilder.Length;  						}  					}  					break;  				case Keys.Left:  					if (m_Cursor.Position.X > Position.X) {  						m_Cursor.Position.X -= m_Font.MeasureString ("a").X;  						m_Cursor.CharacterIndex--;  						if (m_NumLines == 1)  							m_Cursor.LineIndex--;  					} else if (m_Cursor.Position.X <= Position.X) {  						if (m_NumLines == 1) {  							for (int i = 0; i < m_Lines.Count; i++) {  								//Don't know why Line[0] doesn't work here...  								if ((m_Lines [1].Position.X < Position.X))  									m_Lines [i].Position.X += m_ScrollFactor;  								if (m_Lines [i].Position.X > (Position.X + Size.X))  									m_Lines [i].Visible = false;  								if (m_Lines [i].Position.X > Position.X && m_Lines [i].Position.X < (Position.X + Size.X))  									m_Lines [i].Visible = true;  							}  						}  					}  					m_MovingCursor = true;  					m_RemovingTxt = false;  					break;  				case Keys.Right:  					if (m_Cursor.Position.X < (Position.X + m_Size.X)) {  						if (m_NumLines > 1) {  							if (m_Lines [m_Cursor.LineIndex].SBuilder.Length > 0 && m_Cursor.CharacterIndex < m_Lines [m_Cursor.LineIndex].SBuilder.Length) {  								m_Cursor.Position.X += m_Font.MeasureString ("a").X;  								m_Cursor.CharacterIndex++;  							}  						} else//Single-line control' simple.  						 {  							m_Cursor.Position.X += m_Font.MeasureString ("a").X;  							m_Cursor.CharacterIndex++;  							m_Cursor.LineIndex++;  						}  					} else if (m_Cursor.Position.X >= (Position.X + m_Size.X)) {  						if (m_NumLines == 1) {  							for (int i = 0; i < m_Lines.Count; i++) {  								if ((m_Lines [m_Lines.Count - 1].Position.X >= (Position.X + m_Size.X)))  									m_Lines [i].Position.X -= m_ScrollFactor;  								if (m_Lines [i].Position.X < (Position.X + Size.X))  									m_Lines [i].Visible = true;  								if (m_Lines [i].Position.X < (Position.X + Size.X) && m_Lines [i].Position.X < Position.X)  									m_Lines [i].Visible = false;  							}  						}  					}  					m_MovingCursor = true;  					m_RemovingTxt = false;  					break;  				case Keys.Up:  					if (m_NumLines > 1) {  						if (m_Cursor.Position.Y > Position.Y) {  							m_Cursor.Position.Y -= m_Font.LineSpacing;  							m_Cursor.LineIndex--;  							//Part of a line was most likely deleted' so readjust the cursor accordingly.  							if (m_Cursor.CharacterIndex > m_Lines [m_Cursor.LineIndex].SBuilder.Length) {  								m_Cursor.CharacterIndex = m_Lines [m_Cursor.LineIndex].SBuilder.Length;  								m_Cursor.Position.X = Position.X + m_Font.MeasureString (m_Lines [m_Cursor.LineIndex].SBuilder.ToString ()).X;  							}  						}  						m_MovingCursor = true;  						m_RemovingTxt = false;  					}  					break;  				case Keys.Down:  					if (m_NumLines > 1) {  						if (m_Cursor.Position.Y < (Position.Y + m_Size.Y)) {  							if (m_Lines.Count >= 2) {  								if (m_Cursor.Position.Y < m_Lines [m_Lines.Count - 1].Position.Y) {  									m_Cursor.Position.Y += m_Font.LineSpacing;  									m_Cursor.LineIndex++;  									//Part of a line was most likely deleted' so readjust the cursor accordingly.  									if (m_Cursor.CharacterIndex > m_Lines [m_Cursor.LineIndex].SBuilder.Length) {  										m_Cursor.CharacterIndex = m_Lines [m_Cursor.LineIndex].SBuilder.Length;  										m_Cursor.Position.X = Position.X + m_Font.MeasureString (m_Lines [m_Cursor.LineIndex].SBuilder.ToString ()).X;  									}  								}  							}  						}  						m_MovingCursor = true;  						m_RemovingTxt = false;  					}  					break;  				}  			}  		}  	}  }  
Magic Number,Gonzo.Elements,UITextEdit,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UITextEdit.cs,Update,The following statement contains a magic number: if (m_HasFocus) {  	Keys[] PressedKeys = Input.CurrentKeyboardState.GetPressedKeys ();  	foreach (Keys K in PressedKeys) {  		if (Input.IsNewPress (K)) {  			switch (K) {  			case Keys.Divide:  				if (m_Cursor.CharacterIndex < m_Lines [m_Cursor.LineIndex].SBuilder.Length)  					m_Lines [m_Cursor.LineIndex].SBuilder [m_Cursor.CharacterIndex] = '/';  				else  					m_Lines [m_Cursor.LineIndex].SBuilder.Append ("/");  				m_Cursor.Position.X += m_Font.MeasureString ("/").X;  				m_Cursor.CharacterIndex++;  				m_RemovingTxt = false;  				break;  			case Keys.OemSemicolon:  				if (Input.InputRegion != null) {  					switch (Input.InputRegion.LayoutName) {  					case "English":  						if (m_Cursor.CharacterIndex < m_Lines [m_Cursor.LineIndex].SBuilder.Length)  							m_Lines [m_Cursor.LineIndex].SBuilder [m_Cursor.CharacterIndex] = ';';  						else  							m_Lines [m_Cursor.LineIndex].SBuilder.Append (";");  						m_Cursor.CharacterIndex++;  						m_MovingCursor = false;  						m_RemovingTxt = false;  						m_Cursor.Position.X += m_Font.MeasureString (";").X;  						break;  					}  				}  				break;  			case Keys.OemQuotes:  				if (Input.InputRegion != null) {  					switch (Input.InputRegion.LayoutName) {  					case "English":  						//TODO: Should this be double quote if upper??  						if (m_Cursor.CharacterIndex < m_Lines [m_Cursor.LineIndex].SBuilder.Length)  							m_Lines [m_Cursor.LineIndex].SBuilder [m_Cursor.CharacterIndex] = '\'';  						else  							m_Lines [m_Cursor.LineIndex].SBuilder.Append ("'");  						m_Cursor.CharacterIndex++;  						m_MovingCursor = false;  						m_RemovingTxt = false;  						m_Cursor.Position.X += m_Font.MeasureString ("'").X;  						break;  					}  				}  				break;  			case Keys.OemCloseBrackets:  				if (Input.InputRegion != null) {  					switch (Input.InputRegion.LayoutName) {  					case "English":  						if (m_Cursor.CharacterIndex < m_Lines [m_Cursor.LineIndex].SBuilder.Length)  							m_Lines [m_Cursor.LineIndex].SBuilder [m_Cursor.CharacterIndex] = '}';  						else  							m_Lines [m_Cursor.LineIndex].SBuilder.Append ("}");  						m_Cursor.Position.X += m_Font.MeasureString ("}").X;  						break;  					case "Norwegian":  					case "Swedish":  					case "Finnish":  					case "Danish":  						if (IsUpperCase (Input)) {  							if (m_Cursor.CharacterIndex < m_Lines [m_Cursor.LineIndex].SBuilder.Length)  								m_Lines [m_Cursor.LineIndex].SBuilder [m_Cursor.CharacterIndex] = '^';  							else  								m_Lines [m_Cursor.LineIndex].SBuilder.Append ("^");  							m_Cursor.Position.X += m_Font.MeasureString ("^").X;  						} else if (Input.IsCurPress (Keys.RightAlt)) {  							if (m_Cursor.CharacterIndex < m_Lines [m_Cursor.LineIndex].SBuilder.Length)  								m_Lines [m_Cursor.LineIndex].SBuilder [m_Cursor.CharacterIndex] = '~';  							else  								m_Lines [m_Cursor.LineIndex].SBuilder.Append ("~");  							m_Cursor.Position.X += m_Font.MeasureString ("~").X;  						}  						break;  					}  				}  				m_Cursor.CharacterIndex++;  				m_MovingCursor = false;  				m_RemovingTxt = false;  				break;  			case Keys.OemPlus:  				if (m_Cursor.CharacterIndex < m_Lines [m_Cursor.LineIndex].SBuilder.Length)  					m_Lines [m_Cursor.LineIndex].SBuilder [m_Cursor.CharacterIndex] = '+';  				else  					m_Lines [m_Cursor.LineIndex].SBuilder.Append ("+");  				m_Cursor.Position.X += m_Font.MeasureString ("+").X;  				m_Cursor.CharacterIndex++;  				m_MovingCursor = false;  				m_RemovingTxt = false;  				break;  			case Keys.OemComma:  				if (IsUpperCase (Input)) {  					if (m_Cursor.CharacterIndex < m_Lines [m_Cursor.LineIndex].SBuilder.Length)  						m_Lines [m_Cursor.LineIndex].SBuilder [m_Cursor.CharacterIndex] = ';';  					else  						m_Lines [m_Cursor.LineIndex].SBuilder.Append (";");  					m_Cursor.Position.X += m_Font.MeasureString (";").X;  				} else {  					if (m_Cursor.CharacterIndex < m_Lines [m_Cursor.LineIndex].SBuilder.Length)  						m_Lines [m_Cursor.LineIndex].SBuilder [m_Cursor.CharacterIndex] = ''';  					else  						m_Lines [m_Cursor.LineIndex].SBuilder.Append ("'");  					m_Cursor.Position.X += m_Font.MeasureString ("'").X;  				}  				m_Cursor.CharacterIndex++;  				m_MovingCursor = false;  				m_RemovingTxt = false;  				break;  			case Keys.OemPeriod:  				if (m_Cursor.CharacterIndex < m_Lines [m_Cursor.LineIndex].SBuilder.Length)  					m_Lines [m_Cursor.LineIndex].SBuilder [m_Cursor.CharacterIndex] = '.';  				else  					m_Lines [m_Cursor.LineIndex].SBuilder.Append (".");  				m_Cursor.Position.X += m_Font.MeasureString (".").X;  				m_Cursor.CharacterIndex++;  				m_MovingCursor = false;  				m_RemovingTxt = false;  				break;  			case Keys.Space:  				if (m_Cursor.CharacterIndex < m_Lines [m_Cursor.LineIndex].SBuilder.Length)  					m_Lines [m_Cursor.LineIndex].SBuilder [m_Cursor.CharacterIndex] = ' ';  				else  					m_Lines [m_Cursor.LineIndex].SBuilder.Append (" ");  				m_Cursor.Position.X += m_Font.MeasureString (" ").X;  				m_Cursor.CharacterIndex++;  				m_MovingCursor = false;  				m_RemovingTxt = false;  				break;  			case Keys.Tab:  				if (m_Cursor.CharacterIndex < m_Lines [m_Cursor.LineIndex].SBuilder.Length)  					m_Lines [m_Cursor.LineIndex].SBuilder.Append ("   ");  				//TODO: How to insert tab??  				else  					m_Lines [m_Cursor.LineIndex].SBuilder.Append ("   ");  				m_Cursor.Position.X += m_Font.MeasureString ("   ").X;  				m_Cursor.CharacterIndex++;  				m_MovingCursor = false;  				m_RemovingTxt = false;  				break;  			case Keys.Subtract:  				if (m_Cursor.CharacterIndex < m_Lines [m_Cursor.LineIndex].SBuilder.Length)  					m_Lines [m_Cursor.LineIndex].SBuilder [m_Cursor.CharacterIndex] = '-';  				else  					m_Lines [m_Cursor.LineIndex].SBuilder.Append ("-");  				m_Cursor.Position.X += m_Font.MeasureString ("-").X;  				m_Cursor.CharacterIndex++;  				m_MovingCursor = false;  				m_RemovingTxt = false;  				break;  			case Keys.NumPad0:  				if (m_Cursor.CharacterIndex < m_Lines [m_Cursor.LineIndex].SBuilder.Length)  					m_Lines [m_Cursor.LineIndex].SBuilder [m_Cursor.CharacterIndex] = '0';  				else  					m_Lines [m_Cursor.LineIndex].SBuilder.Append ("0");  				m_Cursor.Position.X += m_Font.MeasureString ("0").X;  				m_Cursor.CharacterIndex++;  				m_MovingCursor = false;  				m_RemovingTxt = false;  				break;  			case Keys.NumPad1:  				if (m_Cursor.CharacterIndex < m_Lines [m_Cursor.LineIndex].SBuilder.Length)  					m_Lines [m_Cursor.LineIndex].SBuilder [m_Cursor.CharacterIndex] = '1';  				else  					m_Lines [m_Cursor.LineIndex].SBuilder.Append ("1");  				m_Cursor.Position.X += m_Font.MeasureString ("1").X;  				m_Cursor.CharacterIndex++;  				m_MovingCursor = false;  				m_RemovingTxt = false;  				break;  			case Keys.NumPad2:  				if (m_Cursor.CharacterIndex < m_Lines [m_Cursor.LineIndex].SBuilder.Length)  					m_Lines [m_Cursor.LineIndex].SBuilder [m_Cursor.CharacterIndex] = '2';  				else  					m_Lines [m_Cursor.LineIndex].SBuilder.Append ("2");  				m_Cursor.Position.X += m_Font.MeasureString ("2").X;  				m_Cursor.CharacterIndex++;  				m_MovingCursor = false;  				m_RemovingTxt = false;  				break;  			case Keys.NumPad3:  				if (m_Cursor.CharacterIndex < m_Lines [m_Cursor.LineIndex].SBuilder.Length)  					m_Lines [m_Cursor.LineIndex].SBuilder [m_Cursor.CharacterIndex] = '3';  				else  					m_Lines [m_Cursor.LineIndex].SBuilder.Append ("3");  				m_Cursor.Position.X += m_Font.MeasureString ("3").X;  				m_Cursor.CharacterIndex++;  				m_MovingCursor = false;  				m_RemovingTxt = false;  				break;  			case Keys.NumPad4:  				if (m_Cursor.CharacterIndex < m_Lines [m_Cursor.LineIndex].SBuilder.Length)  					m_Lines [m_Cursor.LineIndex].SBuilder [m_Cursor.CharacterIndex] = '4';  				else  					m_Lines [m_Cursor.LineIndex].SBuilder.Append ("4");  				m_Cursor.Position.X += m_Font.MeasureString ("4").X;  				m_Cursor.CharacterIndex++;  				m_MovingCursor = false;  				m_RemovingTxt = false;  				break;  			case Keys.NumPad5:  				if (m_Cursor.CharacterIndex < m_Lines [m_Cursor.LineIndex].SBuilder.Length)  					m_Lines [m_Cursor.LineIndex].SBuilder [m_Cursor.CharacterIndex] = '5';  				else  					m_Lines [m_Cursor.LineIndex].SBuilder.Append ("5");  				m_Cursor.Position.X += m_Font.MeasureString ("5").X;  				m_Cursor.CharacterIndex++;  				m_MovingCursor = false;  				m_RemovingTxt = false;  				break;  			case Keys.NumPad6:  				if (m_Cursor.CharacterIndex < m_Lines [m_Cursor.LineIndex].SBuilder.Length)  					m_Lines [m_Cursor.LineIndex].SBuilder [m_Cursor.CharacterIndex] = '6';  				else  					m_Lines [m_Cursor.LineIndex].SBuilder.Append ("6");  				m_Cursor.Position.X += m_Font.MeasureString ("6").X;  				m_Cursor.CharacterIndex++;  				m_MovingCursor = false;  				m_RemovingTxt = false;  				break;  			case Keys.NumPad7:  				if (m_Cursor.CharacterIndex < m_Lines [m_Cursor.LineIndex].SBuilder.Length)  					m_Lines [m_Cursor.LineIndex].SBuilder [m_Cursor.CharacterIndex] = '7';  				m_Cursor.Position.X += m_Font.MeasureString ("7").X;  				m_Cursor.CharacterIndex++;  				m_MovingCursor = false;  				m_RemovingTxt = false;  				break;  			case Keys.NumPad8:  				if (m_Cursor.CharacterIndex < m_Lines [m_Cursor.LineIndex].SBuilder.Length)  					m_Lines [m_Cursor.LineIndex].SBuilder [m_Cursor.CharacterIndex] = '8';  				else  					m_Lines [m_Cursor.LineIndex].SBuilder.Append ("8");  				m_Cursor.Position.X += m_Font.MeasureString ("8").X;  				m_Cursor.CharacterIndex++;  				m_MovingCursor = false;  				m_RemovingTxt = false;  				break;  			case Keys.NumPad9:  				if (m_Cursor.CharacterIndex < m_Lines [m_Cursor.LineIndex].SBuilder.Length)  					m_Lines [m_Cursor.LineIndex].SBuilder [m_Cursor.CharacterIndex] = '9';  				else  					m_Lines [m_Cursor.LineIndex].SBuilder.Append ("9");  				m_Cursor.Position.X += m_Font.MeasureString ("9").X;  				m_Cursor.CharacterIndex++;  				m_MovingCursor = false;  				m_RemovingTxt = false;  				break;  			case Keys.Multiply:  				if (m_Cursor.CharacterIndex < m_Lines [m_Cursor.LineIndex].SBuilder.Length)  					m_Lines [m_Cursor.LineIndex].SBuilder [m_Cursor.CharacterIndex] = '*';  				else  					m_Lines [m_Cursor.LineIndex].SBuilder.Append ("*");  				m_Cursor.Position.X += m_Font.MeasureString ("*").X;  				m_Cursor.CharacterIndex++;  				m_MovingCursor = false;  				m_RemovingTxt = false;  				break;  			case Keys.Enter:  				if (m_NumLines > 1) {  					m_TextPosition.X = Position.X;  					m_TextPosition.Y += m_Font.LineSpacing;  					m_Lines.Add (new RenderableText () {  						SBuilder = new StringBuilder ()'  						Position = m_TextPosition  					});  					m_Cursor.Position.X = Position.X;  					m_Cursor.Position.Y += m_Font.LineSpacing;  					m_Cursor.LineIndex += 1;  					m_Cursor.CharacterIndex = 0;  					m_MovingCursor = false;  					m_RemovingTxt = false;  				}  				break;  			case Keys.Back:  				m_RemovingTxt = true;  				//Cursor hasn't been moved.  				if (!m_MovingCursor) {  					if (m_Cursor.Position.X <= m_VerticalTextBoundary)  						m_Cursor.Position.X = m_VerticalTextBoundary;  					else {  						if (m_Cursor.Position.X > Position.X)  							m_Cursor.Position.X -= m_Font.MeasureString ("a").X;  					}  				}  				//If the current line is empty' move the cursor up.  				if (m_Lines [m_Cursor.LineIndex].SBuilder.Length == 0) {  					if (m_NumLines > 1) {  						if (m_TextPosition.Y > Position.Y) {  							m_TextPosition.Y -= m_Font.LineSpacing;  							m_Cursor.Position.X = Position.X + m_Size.X;  							m_Cursor.Position.Y -= m_Font.LineSpacing;  						}  						if (m_Cursor.LineIndex > 0) {  							m_Cursor.LineIndex--;  							m_Cursor.CharacterIndex = m_Lines [m_Cursor.LineIndex].SBuilder.Length;  						}  					} else {  						if (m_Cursor.LineIndex > 0)  							m_Cursor.LineIndex--;  					}  				} else {  					if (m_NumLines > 1) {  						m_Lines [m_Cursor.LineIndex].SBuilder.Remove ((int)(m_Cursor.CharacterIndex - 1)' 1);  						m_Cursor.CharacterIndex--;  						m_Cursor.Position.X -= m_Font.MeasureString ("a").X;  					} else {  						m_Lines.Remove (m_Lines [m_Cursor.CharacterIndex]);  						m_Cursor.CharacterIndex--;  						m_Cursor.LineIndex--;  						m_Cursor.Position.X -= m_Font.MeasureString ("a").X;  					}  				}  				//Cursor moved to the beginning of a line.  				if (m_Cursor.Position.X <= Position.X) {  					if (m_TextPosition.Y > Position.Y) {  						m_TextPosition.Y -= m_Font.LineSpacing;  						m_Cursor.Position.X = Position.X + m_Size.X;  						m_Cursor.Position.Y -= m_Font.LineSpacing;  					}  					if (m_Cursor.LineIndex > 0) {  						m_Cursor.LineIndex--;  						m_Cursor.CharacterIndex = m_Lines [m_Cursor.LineIndex].SBuilder.Length;  					}  				}  				break;  			case Keys.Left:  				if (m_Cursor.Position.X > Position.X) {  					m_Cursor.Position.X -= m_Font.MeasureString ("a").X;  					m_Cursor.CharacterIndex--;  					if (m_NumLines == 1)  						m_Cursor.LineIndex--;  				} else if (m_Cursor.Position.X <= Position.X) {  					if (m_NumLines == 1) {  						for (int i = 0; i < m_Lines.Count; i++) {  							//Don't know why Line[0] doesn't work here...  							if ((m_Lines [1].Position.X < Position.X))  								m_Lines [i].Position.X += m_ScrollFactor;  							if (m_Lines [i].Position.X > (Position.X + Size.X))  								m_Lines [i].Visible = false;  							if (m_Lines [i].Position.X > Position.X && m_Lines [i].Position.X < (Position.X + Size.X))  								m_Lines [i].Visible = true;  						}  					}  				}  				m_MovingCursor = true;  				m_RemovingTxt = false;  				break;  			case Keys.Right:  				if (m_Cursor.Position.X < (Position.X + m_Size.X)) {  					if (m_NumLines > 1) {  						if (m_Lines [m_Cursor.LineIndex].SBuilder.Length > 0 && m_Cursor.CharacterIndex < m_Lines [m_Cursor.LineIndex].SBuilder.Length) {  							m_Cursor.Position.X += m_Font.MeasureString ("a").X;  							m_Cursor.CharacterIndex++;  						}  					} else//Single-line control' simple.  					 {  						m_Cursor.Position.X += m_Font.MeasureString ("a").X;  						m_Cursor.CharacterIndex++;  						m_Cursor.LineIndex++;  					}  				} else if (m_Cursor.Position.X >= (Position.X + m_Size.X)) {  					if (m_NumLines == 1) {  						for (int i = 0; i < m_Lines.Count; i++) {  							if ((m_Lines [m_Lines.Count - 1].Position.X >= (Position.X + m_Size.X)))  								m_Lines [i].Position.X -= m_ScrollFactor;  							if (m_Lines [i].Position.X < (Position.X + Size.X))  								m_Lines [i].Visible = true;  							if (m_Lines [i].Position.X < (Position.X + Size.X) && m_Lines [i].Position.X < Position.X)  								m_Lines [i].Visible = false;  						}  					}  				}  				m_MovingCursor = true;  				m_RemovingTxt = false;  				break;  			case Keys.Up:  				if (m_NumLines > 1) {  					if (m_Cursor.Position.Y > Position.Y) {  						m_Cursor.Position.Y -= m_Font.LineSpacing;  						m_Cursor.LineIndex--;  						//Part of a line was most likely deleted' so readjust the cursor accordingly.  						if (m_Cursor.CharacterIndex > m_Lines [m_Cursor.LineIndex].SBuilder.Length) {  							m_Cursor.CharacterIndex = m_Lines [m_Cursor.LineIndex].SBuilder.Length;  							m_Cursor.Position.X = Position.X + m_Font.MeasureString (m_Lines [m_Cursor.LineIndex].SBuilder.ToString ()).X;  						}  					}  					m_MovingCursor = true;  					m_RemovingTxt = false;  				}  				break;  			case Keys.Down:  				if (m_NumLines > 1) {  					if (m_Cursor.Position.Y < (Position.Y + m_Size.Y)) {  						if (m_Lines.Count >= 2) {  							if (m_Cursor.Position.Y < m_Lines [m_Lines.Count - 1].Position.Y) {  								m_Cursor.Position.Y += m_Font.LineSpacing;  								m_Cursor.LineIndex++;  								//Part of a line was most likely deleted' so readjust the cursor accordingly.  								if (m_Cursor.CharacterIndex > m_Lines [m_Cursor.LineIndex].SBuilder.Length) {  									m_Cursor.CharacterIndex = m_Lines [m_Cursor.LineIndex].SBuilder.Length;  									m_Cursor.Position.X = Position.X + m_Font.MeasureString (m_Lines [m_Cursor.LineIndex].SBuilder.ToString ()).X;  								}  							}  						}  					}  					m_MovingCursor = true;  					m_RemovingTxt = false;  				}  				break;  			}  		}  	}  }  
Magic Number,Gonzo.Elements,UITextEdit,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UITextEdit.cs,Update,The following statement contains a magic number: foreach (Keys K in PressedKeys) {  	if (Input.IsNewPress (K)) {  		switch (K) {  		case Keys.Divide:  			if (m_Cursor.CharacterIndex < m_Lines [m_Cursor.LineIndex].SBuilder.Length)  				m_Lines [m_Cursor.LineIndex].SBuilder [m_Cursor.CharacterIndex] = '/';  			else  				m_Lines [m_Cursor.LineIndex].SBuilder.Append ("/");  			m_Cursor.Position.X += m_Font.MeasureString ("/").X;  			m_Cursor.CharacterIndex++;  			m_RemovingTxt = false;  			break;  		case Keys.OemSemicolon:  			if (Input.InputRegion != null) {  				switch (Input.InputRegion.LayoutName) {  				case "English":  					if (m_Cursor.CharacterIndex < m_Lines [m_Cursor.LineIndex].SBuilder.Length)  						m_Lines [m_Cursor.LineIndex].SBuilder [m_Cursor.CharacterIndex] = ';';  					else  						m_Lines [m_Cursor.LineIndex].SBuilder.Append (";");  					m_Cursor.CharacterIndex++;  					m_MovingCursor = false;  					m_RemovingTxt = false;  					m_Cursor.Position.X += m_Font.MeasureString (";").X;  					break;  				}  			}  			break;  		case Keys.OemQuotes:  			if (Input.InputRegion != null) {  				switch (Input.InputRegion.LayoutName) {  				case "English":  					//TODO: Should this be double quote if upper??  					if (m_Cursor.CharacterIndex < m_Lines [m_Cursor.LineIndex].SBuilder.Length)  						m_Lines [m_Cursor.LineIndex].SBuilder [m_Cursor.CharacterIndex] = '\'';  					else  						m_Lines [m_Cursor.LineIndex].SBuilder.Append ("'");  					m_Cursor.CharacterIndex++;  					m_MovingCursor = false;  					m_RemovingTxt = false;  					m_Cursor.Position.X += m_Font.MeasureString ("'").X;  					break;  				}  			}  			break;  		case Keys.OemCloseBrackets:  			if (Input.InputRegion != null) {  				switch (Input.InputRegion.LayoutName) {  				case "English":  					if (m_Cursor.CharacterIndex < m_Lines [m_Cursor.LineIndex].SBuilder.Length)  						m_Lines [m_Cursor.LineIndex].SBuilder [m_Cursor.CharacterIndex] = '}';  					else  						m_Lines [m_Cursor.LineIndex].SBuilder.Append ("}");  					m_Cursor.Position.X += m_Font.MeasureString ("}").X;  					break;  				case "Norwegian":  				case "Swedish":  				case "Finnish":  				case "Danish":  					if (IsUpperCase (Input)) {  						if (m_Cursor.CharacterIndex < m_Lines [m_Cursor.LineIndex].SBuilder.Length)  							m_Lines [m_Cursor.LineIndex].SBuilder [m_Cursor.CharacterIndex] = '^';  						else  							m_Lines [m_Cursor.LineIndex].SBuilder.Append ("^");  						m_Cursor.Position.X += m_Font.MeasureString ("^").X;  					} else if (Input.IsCurPress (Keys.RightAlt)) {  						if (m_Cursor.CharacterIndex < m_Lines [m_Cursor.LineIndex].SBuilder.Length)  							m_Lines [m_Cursor.LineIndex].SBuilder [m_Cursor.CharacterIndex] = '~';  						else  							m_Lines [m_Cursor.LineIndex].SBuilder.Append ("~");  						m_Cursor.Position.X += m_Font.MeasureString ("~").X;  					}  					break;  				}  			}  			m_Cursor.CharacterIndex++;  			m_MovingCursor = false;  			m_RemovingTxt = false;  			break;  		case Keys.OemPlus:  			if (m_Cursor.CharacterIndex < m_Lines [m_Cursor.LineIndex].SBuilder.Length)  				m_Lines [m_Cursor.LineIndex].SBuilder [m_Cursor.CharacterIndex] = '+';  			else  				m_Lines [m_Cursor.LineIndex].SBuilder.Append ("+");  			m_Cursor.Position.X += m_Font.MeasureString ("+").X;  			m_Cursor.CharacterIndex++;  			m_MovingCursor = false;  			m_RemovingTxt = false;  			break;  		case Keys.OemComma:  			if (IsUpperCase (Input)) {  				if (m_Cursor.CharacterIndex < m_Lines [m_Cursor.LineIndex].SBuilder.Length)  					m_Lines [m_Cursor.LineIndex].SBuilder [m_Cursor.CharacterIndex] = ';';  				else  					m_Lines [m_Cursor.LineIndex].SBuilder.Append (";");  				m_Cursor.Position.X += m_Font.MeasureString (";").X;  			} else {  				if (m_Cursor.CharacterIndex < m_Lines [m_Cursor.LineIndex].SBuilder.Length)  					m_Lines [m_Cursor.LineIndex].SBuilder [m_Cursor.CharacterIndex] = ''';  				else  					m_Lines [m_Cursor.LineIndex].SBuilder.Append ("'");  				m_Cursor.Position.X += m_Font.MeasureString ("'").X;  			}  			m_Cursor.CharacterIndex++;  			m_MovingCursor = false;  			m_RemovingTxt = false;  			break;  		case Keys.OemPeriod:  			if (m_Cursor.CharacterIndex < m_Lines [m_Cursor.LineIndex].SBuilder.Length)  				m_Lines [m_Cursor.LineIndex].SBuilder [m_Cursor.CharacterIndex] = '.';  			else  				m_Lines [m_Cursor.LineIndex].SBuilder.Append (".");  			m_Cursor.Position.X += m_Font.MeasureString (".").X;  			m_Cursor.CharacterIndex++;  			m_MovingCursor = false;  			m_RemovingTxt = false;  			break;  		case Keys.Space:  			if (m_Cursor.CharacterIndex < m_Lines [m_Cursor.LineIndex].SBuilder.Length)  				m_Lines [m_Cursor.LineIndex].SBuilder [m_Cursor.CharacterIndex] = ' ';  			else  				m_Lines [m_Cursor.LineIndex].SBuilder.Append (" ");  			m_Cursor.Position.X += m_Font.MeasureString (" ").X;  			m_Cursor.CharacterIndex++;  			m_MovingCursor = false;  			m_RemovingTxt = false;  			break;  		case Keys.Tab:  			if (m_Cursor.CharacterIndex < m_Lines [m_Cursor.LineIndex].SBuilder.Length)  				m_Lines [m_Cursor.LineIndex].SBuilder.Append ("   ");  			//TODO: How to insert tab??  			else  				m_Lines [m_Cursor.LineIndex].SBuilder.Append ("   ");  			m_Cursor.Position.X += m_Font.MeasureString ("   ").X;  			m_Cursor.CharacterIndex++;  			m_MovingCursor = false;  			m_RemovingTxt = false;  			break;  		case Keys.Subtract:  			if (m_Cursor.CharacterIndex < m_Lines [m_Cursor.LineIndex].SBuilder.Length)  				m_Lines [m_Cursor.LineIndex].SBuilder [m_Cursor.CharacterIndex] = '-';  			else  				m_Lines [m_Cursor.LineIndex].SBuilder.Append ("-");  			m_Cursor.Position.X += m_Font.MeasureString ("-").X;  			m_Cursor.CharacterIndex++;  			m_MovingCursor = false;  			m_RemovingTxt = false;  			break;  		case Keys.NumPad0:  			if (m_Cursor.CharacterIndex < m_Lines [m_Cursor.LineIndex].SBuilder.Length)  				m_Lines [m_Cursor.LineIndex].SBuilder [m_Cursor.CharacterIndex] = '0';  			else  				m_Lines [m_Cursor.LineIndex].SBuilder.Append ("0");  			m_Cursor.Position.X += m_Font.MeasureString ("0").X;  			m_Cursor.CharacterIndex++;  			m_MovingCursor = false;  			m_RemovingTxt = false;  			break;  		case Keys.NumPad1:  			if (m_Cursor.CharacterIndex < m_Lines [m_Cursor.LineIndex].SBuilder.Length)  				m_Lines [m_Cursor.LineIndex].SBuilder [m_Cursor.CharacterIndex] = '1';  			else  				m_Lines [m_Cursor.LineIndex].SBuilder.Append ("1");  			m_Cursor.Position.X += m_Font.MeasureString ("1").X;  			m_Cursor.CharacterIndex++;  			m_MovingCursor = false;  			m_RemovingTxt = false;  			break;  		case Keys.NumPad2:  			if (m_Cursor.CharacterIndex < m_Lines [m_Cursor.LineIndex].SBuilder.Length)  				m_Lines [m_Cursor.LineIndex].SBuilder [m_Cursor.CharacterIndex] = '2';  			else  				m_Lines [m_Cursor.LineIndex].SBuilder.Append ("2");  			m_Cursor.Position.X += m_Font.MeasureString ("2").X;  			m_Cursor.CharacterIndex++;  			m_MovingCursor = false;  			m_RemovingTxt = false;  			break;  		case Keys.NumPad3:  			if (m_Cursor.CharacterIndex < m_Lines [m_Cursor.LineIndex].SBuilder.Length)  				m_Lines [m_Cursor.LineIndex].SBuilder [m_Cursor.CharacterIndex] = '3';  			else  				m_Lines [m_Cursor.LineIndex].SBuilder.Append ("3");  			m_Cursor.Position.X += m_Font.MeasureString ("3").X;  			m_Cursor.CharacterIndex++;  			m_MovingCursor = false;  			m_RemovingTxt = false;  			break;  		case Keys.NumPad4:  			if (m_Cursor.CharacterIndex < m_Lines [m_Cursor.LineIndex].SBuilder.Length)  				m_Lines [m_Cursor.LineIndex].SBuilder [m_Cursor.CharacterIndex] = '4';  			else  				m_Lines [m_Cursor.LineIndex].SBuilder.Append ("4");  			m_Cursor.Position.X += m_Font.MeasureString ("4").X;  			m_Cursor.CharacterIndex++;  			m_MovingCursor = false;  			m_RemovingTxt = false;  			break;  		case Keys.NumPad5:  			if (m_Cursor.CharacterIndex < m_Lines [m_Cursor.LineIndex].SBuilder.Length)  				m_Lines [m_Cursor.LineIndex].SBuilder [m_Cursor.CharacterIndex] = '5';  			else  				m_Lines [m_Cursor.LineIndex].SBuilder.Append ("5");  			m_Cursor.Position.X += m_Font.MeasureString ("5").X;  			m_Cursor.CharacterIndex++;  			m_MovingCursor = false;  			m_RemovingTxt = false;  			break;  		case Keys.NumPad6:  			if (m_Cursor.CharacterIndex < m_Lines [m_Cursor.LineIndex].SBuilder.Length)  				m_Lines [m_Cursor.LineIndex].SBuilder [m_Cursor.CharacterIndex] = '6';  			else  				m_Lines [m_Cursor.LineIndex].SBuilder.Append ("6");  			m_Cursor.Position.X += m_Font.MeasureString ("6").X;  			m_Cursor.CharacterIndex++;  			m_MovingCursor = false;  			m_RemovingTxt = false;  			break;  		case Keys.NumPad7:  			if (m_Cursor.CharacterIndex < m_Lines [m_Cursor.LineIndex].SBuilder.Length)  				m_Lines [m_Cursor.LineIndex].SBuilder [m_Cursor.CharacterIndex] = '7';  			m_Cursor.Position.X += m_Font.MeasureString ("7").X;  			m_Cursor.CharacterIndex++;  			m_MovingCursor = false;  			m_RemovingTxt = false;  			break;  		case Keys.NumPad8:  			if (m_Cursor.CharacterIndex < m_Lines [m_Cursor.LineIndex].SBuilder.Length)  				m_Lines [m_Cursor.LineIndex].SBuilder [m_Cursor.CharacterIndex] = '8';  			else  				m_Lines [m_Cursor.LineIndex].SBuilder.Append ("8");  			m_Cursor.Position.X += m_Font.MeasureString ("8").X;  			m_Cursor.CharacterIndex++;  			m_MovingCursor = false;  			m_RemovingTxt = false;  			break;  		case Keys.NumPad9:  			if (m_Cursor.CharacterIndex < m_Lines [m_Cursor.LineIndex].SBuilder.Length)  				m_Lines [m_Cursor.LineIndex].SBuilder [m_Cursor.CharacterIndex] = '9';  			else  				m_Lines [m_Cursor.LineIndex].SBuilder.Append ("9");  			m_Cursor.Position.X += m_Font.MeasureString ("9").X;  			m_Cursor.CharacterIndex++;  			m_MovingCursor = false;  			m_RemovingTxt = false;  			break;  		case Keys.Multiply:  			if (m_Cursor.CharacterIndex < m_Lines [m_Cursor.LineIndex].SBuilder.Length)  				m_Lines [m_Cursor.LineIndex].SBuilder [m_Cursor.CharacterIndex] = '*';  			else  				m_Lines [m_Cursor.LineIndex].SBuilder.Append ("*");  			m_Cursor.Position.X += m_Font.MeasureString ("*").X;  			m_Cursor.CharacterIndex++;  			m_MovingCursor = false;  			m_RemovingTxt = false;  			break;  		case Keys.Enter:  			if (m_NumLines > 1) {  				m_TextPosition.X = Position.X;  				m_TextPosition.Y += m_Font.LineSpacing;  				m_Lines.Add (new RenderableText () {  					SBuilder = new StringBuilder ()'  					Position = m_TextPosition  				});  				m_Cursor.Position.X = Position.X;  				m_Cursor.Position.Y += m_Font.LineSpacing;  				m_Cursor.LineIndex += 1;  				m_Cursor.CharacterIndex = 0;  				m_MovingCursor = false;  				m_RemovingTxt = false;  			}  			break;  		case Keys.Back:  			m_RemovingTxt = true;  			//Cursor hasn't been moved.  			if (!m_MovingCursor) {  				if (m_Cursor.Position.X <= m_VerticalTextBoundary)  					m_Cursor.Position.X = m_VerticalTextBoundary;  				else {  					if (m_Cursor.Position.X > Position.X)  						m_Cursor.Position.X -= m_Font.MeasureString ("a").X;  				}  			}  			//If the current line is empty' move the cursor up.  			if (m_Lines [m_Cursor.LineIndex].SBuilder.Length == 0) {  				if (m_NumLines > 1) {  					if (m_TextPosition.Y > Position.Y) {  						m_TextPosition.Y -= m_Font.LineSpacing;  						m_Cursor.Position.X = Position.X + m_Size.X;  						m_Cursor.Position.Y -= m_Font.LineSpacing;  					}  					if (m_Cursor.LineIndex > 0) {  						m_Cursor.LineIndex--;  						m_Cursor.CharacterIndex = m_Lines [m_Cursor.LineIndex].SBuilder.Length;  					}  				} else {  					if (m_Cursor.LineIndex > 0)  						m_Cursor.LineIndex--;  				}  			} else {  				if (m_NumLines > 1) {  					m_Lines [m_Cursor.LineIndex].SBuilder.Remove ((int)(m_Cursor.CharacterIndex - 1)' 1);  					m_Cursor.CharacterIndex--;  					m_Cursor.Position.X -= m_Font.MeasureString ("a").X;  				} else {  					m_Lines.Remove (m_Lines [m_Cursor.CharacterIndex]);  					m_Cursor.CharacterIndex--;  					m_Cursor.LineIndex--;  					m_Cursor.Position.X -= m_Font.MeasureString ("a").X;  				}  			}  			//Cursor moved to the beginning of a line.  			if (m_Cursor.Position.X <= Position.X) {  				if (m_TextPosition.Y > Position.Y) {  					m_TextPosition.Y -= m_Font.LineSpacing;  					m_Cursor.Position.X = Position.X + m_Size.X;  					m_Cursor.Position.Y -= m_Font.LineSpacing;  				}  				if (m_Cursor.LineIndex > 0) {  					m_Cursor.LineIndex--;  					m_Cursor.CharacterIndex = m_Lines [m_Cursor.LineIndex].SBuilder.Length;  				}  			}  			break;  		case Keys.Left:  			if (m_Cursor.Position.X > Position.X) {  				m_Cursor.Position.X -= m_Font.MeasureString ("a").X;  				m_Cursor.CharacterIndex--;  				if (m_NumLines == 1)  					m_Cursor.LineIndex--;  			} else if (m_Cursor.Position.X <= Position.X) {  				if (m_NumLines == 1) {  					for (int i = 0; i < m_Lines.Count; i++) {  						//Don't know why Line[0] doesn't work here...  						if ((m_Lines [1].Position.X < Position.X))  							m_Lines [i].Position.X += m_ScrollFactor;  						if (m_Lines [i].Position.X > (Position.X + Size.X))  							m_Lines [i].Visible = false;  						if (m_Lines [i].Position.X > Position.X && m_Lines [i].Position.X < (Position.X + Size.X))  							m_Lines [i].Visible = true;  					}  				}  			}  			m_MovingCursor = true;  			m_RemovingTxt = false;  			break;  		case Keys.Right:  			if (m_Cursor.Position.X < (Position.X + m_Size.X)) {  				if (m_NumLines > 1) {  					if (m_Lines [m_Cursor.LineIndex].SBuilder.Length > 0 && m_Cursor.CharacterIndex < m_Lines [m_Cursor.LineIndex].SBuilder.Length) {  						m_Cursor.Position.X += m_Font.MeasureString ("a").X;  						m_Cursor.CharacterIndex++;  					}  				} else//Single-line control' simple.  				 {  					m_Cursor.Position.X += m_Font.MeasureString ("a").X;  					m_Cursor.CharacterIndex++;  					m_Cursor.LineIndex++;  				}  			} else if (m_Cursor.Position.X >= (Position.X + m_Size.X)) {  				if (m_NumLines == 1) {  					for (int i = 0; i < m_Lines.Count; i++) {  						if ((m_Lines [m_Lines.Count - 1].Position.X >= (Position.X + m_Size.X)))  							m_Lines [i].Position.X -= m_ScrollFactor;  						if (m_Lines [i].Position.X < (Position.X + Size.X))  							m_Lines [i].Visible = true;  						if (m_Lines [i].Position.X < (Position.X + Size.X) && m_Lines [i].Position.X < Position.X)  							m_Lines [i].Visible = false;  					}  				}  			}  			m_MovingCursor = true;  			m_RemovingTxt = false;  			break;  		case Keys.Up:  			if (m_NumLines > 1) {  				if (m_Cursor.Position.Y > Position.Y) {  					m_Cursor.Position.Y -= m_Font.LineSpacing;  					m_Cursor.LineIndex--;  					//Part of a line was most likely deleted' so readjust the cursor accordingly.  					if (m_Cursor.CharacterIndex > m_Lines [m_Cursor.LineIndex].SBuilder.Length) {  						m_Cursor.CharacterIndex = m_Lines [m_Cursor.LineIndex].SBuilder.Length;  						m_Cursor.Position.X = Position.X + m_Font.MeasureString (m_Lines [m_Cursor.LineIndex].SBuilder.ToString ()).X;  					}  				}  				m_MovingCursor = true;  				m_RemovingTxt = false;  			}  			break;  		case Keys.Down:  			if (m_NumLines > 1) {  				if (m_Cursor.Position.Y < (Position.Y + m_Size.Y)) {  					if (m_Lines.Count >= 2) {  						if (m_Cursor.Position.Y < m_Lines [m_Lines.Count - 1].Position.Y) {  							m_Cursor.Position.Y += m_Font.LineSpacing;  							m_Cursor.LineIndex++;  							//Part of a line was most likely deleted' so readjust the cursor accordingly.  							if (m_Cursor.CharacterIndex > m_Lines [m_Cursor.LineIndex].SBuilder.Length) {  								m_Cursor.CharacterIndex = m_Lines [m_Cursor.LineIndex].SBuilder.Length;  								m_Cursor.Position.X = Position.X + m_Font.MeasureString (m_Lines [m_Cursor.LineIndex].SBuilder.ToString ()).X;  							}  						}  					}  				}  				m_MovingCursor = true;  				m_RemovingTxt = false;  			}  			break;  		}  	}  }  
Magic Number,Gonzo.Elements,UITextEdit,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UITextEdit.cs,Update,The following statement contains a magic number: if (Input.IsNewPress (K)) {  	switch (K) {  	case Keys.Divide:  		if (m_Cursor.CharacterIndex < m_Lines [m_Cursor.LineIndex].SBuilder.Length)  			m_Lines [m_Cursor.LineIndex].SBuilder [m_Cursor.CharacterIndex] = '/';  		else  			m_Lines [m_Cursor.LineIndex].SBuilder.Append ("/");  		m_Cursor.Position.X += m_Font.MeasureString ("/").X;  		m_Cursor.CharacterIndex++;  		m_RemovingTxt = false;  		break;  	case Keys.OemSemicolon:  		if (Input.InputRegion != null) {  			switch (Input.InputRegion.LayoutName) {  			case "English":  				if (m_Cursor.CharacterIndex < m_Lines [m_Cursor.LineIndex].SBuilder.Length)  					m_Lines [m_Cursor.LineIndex].SBuilder [m_Cursor.CharacterIndex] = ';';  				else  					m_Lines [m_Cursor.LineIndex].SBuilder.Append (";");  				m_Cursor.CharacterIndex++;  				m_MovingCursor = false;  				m_RemovingTxt = false;  				m_Cursor.Position.X += m_Font.MeasureString (";").X;  				break;  			}  		}  		break;  	case Keys.OemQuotes:  		if (Input.InputRegion != null) {  			switch (Input.InputRegion.LayoutName) {  			case "English":  				//TODO: Should this be double quote if upper??  				if (m_Cursor.CharacterIndex < m_Lines [m_Cursor.LineIndex].SBuilder.Length)  					m_Lines [m_Cursor.LineIndex].SBuilder [m_Cursor.CharacterIndex] = '\'';  				else  					m_Lines [m_Cursor.LineIndex].SBuilder.Append ("'");  				m_Cursor.CharacterIndex++;  				m_MovingCursor = false;  				m_RemovingTxt = false;  				m_Cursor.Position.X += m_Font.MeasureString ("'").X;  				break;  			}  		}  		break;  	case Keys.OemCloseBrackets:  		if (Input.InputRegion != null) {  			switch (Input.InputRegion.LayoutName) {  			case "English":  				if (m_Cursor.CharacterIndex < m_Lines [m_Cursor.LineIndex].SBuilder.Length)  					m_Lines [m_Cursor.LineIndex].SBuilder [m_Cursor.CharacterIndex] = '}';  				else  					m_Lines [m_Cursor.LineIndex].SBuilder.Append ("}");  				m_Cursor.Position.X += m_Font.MeasureString ("}").X;  				break;  			case "Norwegian":  			case "Swedish":  			case "Finnish":  			case "Danish":  				if (IsUpperCase (Input)) {  					if (m_Cursor.CharacterIndex < m_Lines [m_Cursor.LineIndex].SBuilder.Length)  						m_Lines [m_Cursor.LineIndex].SBuilder [m_Cursor.CharacterIndex] = '^';  					else  						m_Lines [m_Cursor.LineIndex].SBuilder.Append ("^");  					m_Cursor.Position.X += m_Font.MeasureString ("^").X;  				} else if (Input.IsCurPress (Keys.RightAlt)) {  					if (m_Cursor.CharacterIndex < m_Lines [m_Cursor.LineIndex].SBuilder.Length)  						m_Lines [m_Cursor.LineIndex].SBuilder [m_Cursor.CharacterIndex] = '~';  					else  						m_Lines [m_Cursor.LineIndex].SBuilder.Append ("~");  					m_Cursor.Position.X += m_Font.MeasureString ("~").X;  				}  				break;  			}  		}  		m_Cursor.CharacterIndex++;  		m_MovingCursor = false;  		m_RemovingTxt = false;  		break;  	case Keys.OemPlus:  		if (m_Cursor.CharacterIndex < m_Lines [m_Cursor.LineIndex].SBuilder.Length)  			m_Lines [m_Cursor.LineIndex].SBuilder [m_Cursor.CharacterIndex] = '+';  		else  			m_Lines [m_Cursor.LineIndex].SBuilder.Append ("+");  		m_Cursor.Position.X += m_Font.MeasureString ("+").X;  		m_Cursor.CharacterIndex++;  		m_MovingCursor = false;  		m_RemovingTxt = false;  		break;  	case Keys.OemComma:  		if (IsUpperCase (Input)) {  			if (m_Cursor.CharacterIndex < m_Lines [m_Cursor.LineIndex].SBuilder.Length)  				m_Lines [m_Cursor.LineIndex].SBuilder [m_Cursor.CharacterIndex] = ';';  			else  				m_Lines [m_Cursor.LineIndex].SBuilder.Append (";");  			m_Cursor.Position.X += m_Font.MeasureString (";").X;  		} else {  			if (m_Cursor.CharacterIndex < m_Lines [m_Cursor.LineIndex].SBuilder.Length)  				m_Lines [m_Cursor.LineIndex].SBuilder [m_Cursor.CharacterIndex] = ''';  			else  				m_Lines [m_Cursor.LineIndex].SBuilder.Append ("'");  			m_Cursor.Position.X += m_Font.MeasureString ("'").X;  		}  		m_Cursor.CharacterIndex++;  		m_MovingCursor = false;  		m_RemovingTxt = false;  		break;  	case Keys.OemPeriod:  		if (m_Cursor.CharacterIndex < m_Lines [m_Cursor.LineIndex].SBuilder.Length)  			m_Lines [m_Cursor.LineIndex].SBuilder [m_Cursor.CharacterIndex] = '.';  		else  			m_Lines [m_Cursor.LineIndex].SBuilder.Append (".");  		m_Cursor.Position.X += m_Font.MeasureString (".").X;  		m_Cursor.CharacterIndex++;  		m_MovingCursor = false;  		m_RemovingTxt = false;  		break;  	case Keys.Space:  		if (m_Cursor.CharacterIndex < m_Lines [m_Cursor.LineIndex].SBuilder.Length)  			m_Lines [m_Cursor.LineIndex].SBuilder [m_Cursor.CharacterIndex] = ' ';  		else  			m_Lines [m_Cursor.LineIndex].SBuilder.Append (" ");  		m_Cursor.Position.X += m_Font.MeasureString (" ").X;  		m_Cursor.CharacterIndex++;  		m_MovingCursor = false;  		m_RemovingTxt = false;  		break;  	case Keys.Tab:  		if (m_Cursor.CharacterIndex < m_Lines [m_Cursor.LineIndex].SBuilder.Length)  			m_Lines [m_Cursor.LineIndex].SBuilder.Append ("   ");  		//TODO: How to insert tab??  		else  			m_Lines [m_Cursor.LineIndex].SBuilder.Append ("   ");  		m_Cursor.Position.X += m_Font.MeasureString ("   ").X;  		m_Cursor.CharacterIndex++;  		m_MovingCursor = false;  		m_RemovingTxt = false;  		break;  	case Keys.Subtract:  		if (m_Cursor.CharacterIndex < m_Lines [m_Cursor.LineIndex].SBuilder.Length)  			m_Lines [m_Cursor.LineIndex].SBuilder [m_Cursor.CharacterIndex] = '-';  		else  			m_Lines [m_Cursor.LineIndex].SBuilder.Append ("-");  		m_Cursor.Position.X += m_Font.MeasureString ("-").X;  		m_Cursor.CharacterIndex++;  		m_MovingCursor = false;  		m_RemovingTxt = false;  		break;  	case Keys.NumPad0:  		if (m_Cursor.CharacterIndex < m_Lines [m_Cursor.LineIndex].SBuilder.Length)  			m_Lines [m_Cursor.LineIndex].SBuilder [m_Cursor.CharacterIndex] = '0';  		else  			m_Lines [m_Cursor.LineIndex].SBuilder.Append ("0");  		m_Cursor.Position.X += m_Font.MeasureString ("0").X;  		m_Cursor.CharacterIndex++;  		m_MovingCursor = false;  		m_RemovingTxt = false;  		break;  	case Keys.NumPad1:  		if (m_Cursor.CharacterIndex < m_Lines [m_Cursor.LineIndex].SBuilder.Length)  			m_Lines [m_Cursor.LineIndex].SBuilder [m_Cursor.CharacterIndex] = '1';  		else  			m_Lines [m_Cursor.LineIndex].SBuilder.Append ("1");  		m_Cursor.Position.X += m_Font.MeasureString ("1").X;  		m_Cursor.CharacterIndex++;  		m_MovingCursor = false;  		m_RemovingTxt = false;  		break;  	case Keys.NumPad2:  		if (m_Cursor.CharacterIndex < m_Lines [m_Cursor.LineIndex].SBuilder.Length)  			m_Lines [m_Cursor.LineIndex].SBuilder [m_Cursor.CharacterIndex] = '2';  		else  			m_Lines [m_Cursor.LineIndex].SBuilder.Append ("2");  		m_Cursor.Position.X += m_Font.MeasureString ("2").X;  		m_Cursor.CharacterIndex++;  		m_MovingCursor = false;  		m_RemovingTxt = false;  		break;  	case Keys.NumPad3:  		if (m_Cursor.CharacterIndex < m_Lines [m_Cursor.LineIndex].SBuilder.Length)  			m_Lines [m_Cursor.LineIndex].SBuilder [m_Cursor.CharacterIndex] = '3';  		else  			m_Lines [m_Cursor.LineIndex].SBuilder.Append ("3");  		m_Cursor.Position.X += m_Font.MeasureString ("3").X;  		m_Cursor.CharacterIndex++;  		m_MovingCursor = false;  		m_RemovingTxt = false;  		break;  	case Keys.NumPad4:  		if (m_Cursor.CharacterIndex < m_Lines [m_Cursor.LineIndex].SBuilder.Length)  			m_Lines [m_Cursor.LineIndex].SBuilder [m_Cursor.CharacterIndex] = '4';  		else  			m_Lines [m_Cursor.LineIndex].SBuilder.Append ("4");  		m_Cursor.Position.X += m_Font.MeasureString ("4").X;  		m_Cursor.CharacterIndex++;  		m_MovingCursor = false;  		m_RemovingTxt = false;  		break;  	case Keys.NumPad5:  		if (m_Cursor.CharacterIndex < m_Lines [m_Cursor.LineIndex].SBuilder.Length)  			m_Lines [m_Cursor.LineIndex].SBuilder [m_Cursor.CharacterIndex] = '5';  		else  			m_Lines [m_Cursor.LineIndex].SBuilder.Append ("5");  		m_Cursor.Position.X += m_Font.MeasureString ("5").X;  		m_Cursor.CharacterIndex++;  		m_MovingCursor = false;  		m_RemovingTxt = false;  		break;  	case Keys.NumPad6:  		if (m_Cursor.CharacterIndex < m_Lines [m_Cursor.LineIndex].SBuilder.Length)  			m_Lines [m_Cursor.LineIndex].SBuilder [m_Cursor.CharacterIndex] = '6';  		else  			m_Lines [m_Cursor.LineIndex].SBuilder.Append ("6");  		m_Cursor.Position.X += m_Font.MeasureString ("6").X;  		m_Cursor.CharacterIndex++;  		m_MovingCursor = false;  		m_RemovingTxt = false;  		break;  	case Keys.NumPad7:  		if (m_Cursor.CharacterIndex < m_Lines [m_Cursor.LineIndex].SBuilder.Length)  			m_Lines [m_Cursor.LineIndex].SBuilder [m_Cursor.CharacterIndex] = '7';  		m_Cursor.Position.X += m_Font.MeasureString ("7").X;  		m_Cursor.CharacterIndex++;  		m_MovingCursor = false;  		m_RemovingTxt = false;  		break;  	case Keys.NumPad8:  		if (m_Cursor.CharacterIndex < m_Lines [m_Cursor.LineIndex].SBuilder.Length)  			m_Lines [m_Cursor.LineIndex].SBuilder [m_Cursor.CharacterIndex] = '8';  		else  			m_Lines [m_Cursor.LineIndex].SBuilder.Append ("8");  		m_Cursor.Position.X += m_Font.MeasureString ("8").X;  		m_Cursor.CharacterIndex++;  		m_MovingCursor = false;  		m_RemovingTxt = false;  		break;  	case Keys.NumPad9:  		if (m_Cursor.CharacterIndex < m_Lines [m_Cursor.LineIndex].SBuilder.Length)  			m_Lines [m_Cursor.LineIndex].SBuilder [m_Cursor.CharacterIndex] = '9';  		else  			m_Lines [m_Cursor.LineIndex].SBuilder.Append ("9");  		m_Cursor.Position.X += m_Font.MeasureString ("9").X;  		m_Cursor.CharacterIndex++;  		m_MovingCursor = false;  		m_RemovingTxt = false;  		break;  	case Keys.Multiply:  		if (m_Cursor.CharacterIndex < m_Lines [m_Cursor.LineIndex].SBuilder.Length)  			m_Lines [m_Cursor.LineIndex].SBuilder [m_Cursor.CharacterIndex] = '*';  		else  			m_Lines [m_Cursor.LineIndex].SBuilder.Append ("*");  		m_Cursor.Position.X += m_Font.MeasureString ("*").X;  		m_Cursor.CharacterIndex++;  		m_MovingCursor = false;  		m_RemovingTxt = false;  		break;  	case Keys.Enter:  		if (m_NumLines > 1) {  			m_TextPosition.X = Position.X;  			m_TextPosition.Y += m_Font.LineSpacing;  			m_Lines.Add (new RenderableText () {  				SBuilder = new StringBuilder ()'  				Position = m_TextPosition  			});  			m_Cursor.Position.X = Position.X;  			m_Cursor.Position.Y += m_Font.LineSpacing;  			m_Cursor.LineIndex += 1;  			m_Cursor.CharacterIndex = 0;  			m_MovingCursor = false;  			m_RemovingTxt = false;  		}  		break;  	case Keys.Back:  		m_RemovingTxt = true;  		//Cursor hasn't been moved.  		if (!m_MovingCursor) {  			if (m_Cursor.Position.X <= m_VerticalTextBoundary)  				m_Cursor.Position.X = m_VerticalTextBoundary;  			else {  				if (m_Cursor.Position.X > Position.X)  					m_Cursor.Position.X -= m_Font.MeasureString ("a").X;  			}  		}  		//If the current line is empty' move the cursor up.  		if (m_Lines [m_Cursor.LineIndex].SBuilder.Length == 0) {  			if (m_NumLines > 1) {  				if (m_TextPosition.Y > Position.Y) {  					m_TextPosition.Y -= m_Font.LineSpacing;  					m_Cursor.Position.X = Position.X + m_Size.X;  					m_Cursor.Position.Y -= m_Font.LineSpacing;  				}  				if (m_Cursor.LineIndex > 0) {  					m_Cursor.LineIndex--;  					m_Cursor.CharacterIndex = m_Lines [m_Cursor.LineIndex].SBuilder.Length;  				}  			} else {  				if (m_Cursor.LineIndex > 0)  					m_Cursor.LineIndex--;  			}  		} else {  			if (m_NumLines > 1) {  				m_Lines [m_Cursor.LineIndex].SBuilder.Remove ((int)(m_Cursor.CharacterIndex - 1)' 1);  				m_Cursor.CharacterIndex--;  				m_Cursor.Position.X -= m_Font.MeasureString ("a").X;  			} else {  				m_Lines.Remove (m_Lines [m_Cursor.CharacterIndex]);  				m_Cursor.CharacterIndex--;  				m_Cursor.LineIndex--;  				m_Cursor.Position.X -= m_Font.MeasureString ("a").X;  			}  		}  		//Cursor moved to the beginning of a line.  		if (m_Cursor.Position.X <= Position.X) {  			if (m_TextPosition.Y > Position.Y) {  				m_TextPosition.Y -= m_Font.LineSpacing;  				m_Cursor.Position.X = Position.X + m_Size.X;  				m_Cursor.Position.Y -= m_Font.LineSpacing;  			}  			if (m_Cursor.LineIndex > 0) {  				m_Cursor.LineIndex--;  				m_Cursor.CharacterIndex = m_Lines [m_Cursor.LineIndex].SBuilder.Length;  			}  		}  		break;  	case Keys.Left:  		if (m_Cursor.Position.X > Position.X) {  			m_Cursor.Position.X -= m_Font.MeasureString ("a").X;  			m_Cursor.CharacterIndex--;  			if (m_NumLines == 1)  				m_Cursor.LineIndex--;  		} else if (m_Cursor.Position.X <= Position.X) {  			if (m_NumLines == 1) {  				for (int i = 0; i < m_Lines.Count; i++) {  					//Don't know why Line[0] doesn't work here...  					if ((m_Lines [1].Position.X < Position.X))  						m_Lines [i].Position.X += m_ScrollFactor;  					if (m_Lines [i].Position.X > (Position.X + Size.X))  						m_Lines [i].Visible = false;  					if (m_Lines [i].Position.X > Position.X && m_Lines [i].Position.X < (Position.X + Size.X))  						m_Lines [i].Visible = true;  				}  			}  		}  		m_MovingCursor = true;  		m_RemovingTxt = false;  		break;  	case Keys.Right:  		if (m_Cursor.Position.X < (Position.X + m_Size.X)) {  			if (m_NumLines > 1) {  				if (m_Lines [m_Cursor.LineIndex].SBuilder.Length > 0 && m_Cursor.CharacterIndex < m_Lines [m_Cursor.LineIndex].SBuilder.Length) {  					m_Cursor.Position.X += m_Font.MeasureString ("a").X;  					m_Cursor.CharacterIndex++;  				}  			} else//Single-line control' simple.  			 {  				m_Cursor.Position.X += m_Font.MeasureString ("a").X;  				m_Cursor.CharacterIndex++;  				m_Cursor.LineIndex++;  			}  		} else if (m_Cursor.Position.X >= (Position.X + m_Size.X)) {  			if (m_NumLines == 1) {  				for (int i = 0; i < m_Lines.Count; i++) {  					if ((m_Lines [m_Lines.Count - 1].Position.X >= (Position.X + m_Size.X)))  						m_Lines [i].Position.X -= m_ScrollFactor;  					if (m_Lines [i].Position.X < (Position.X + Size.X))  						m_Lines [i].Visible = true;  					if (m_Lines [i].Position.X < (Position.X + Size.X) && m_Lines [i].Position.X < Position.X)  						m_Lines [i].Visible = false;  				}  			}  		}  		m_MovingCursor = true;  		m_RemovingTxt = false;  		break;  	case Keys.Up:  		if (m_NumLines > 1) {  			if (m_Cursor.Position.Y > Position.Y) {  				m_Cursor.Position.Y -= m_Font.LineSpacing;  				m_Cursor.LineIndex--;  				//Part of a line was most likely deleted' so readjust the cursor accordingly.  				if (m_Cursor.CharacterIndex > m_Lines [m_Cursor.LineIndex].SBuilder.Length) {  					m_Cursor.CharacterIndex = m_Lines [m_Cursor.LineIndex].SBuilder.Length;  					m_Cursor.Position.X = Position.X + m_Font.MeasureString (m_Lines [m_Cursor.LineIndex].SBuilder.ToString ()).X;  				}  			}  			m_MovingCursor = true;  			m_RemovingTxt = false;  		}  		break;  	case Keys.Down:  		if (m_NumLines > 1) {  			if (m_Cursor.Position.Y < (Position.Y + m_Size.Y)) {  				if (m_Lines.Count >= 2) {  					if (m_Cursor.Position.Y < m_Lines [m_Lines.Count - 1].Position.Y) {  						m_Cursor.Position.Y += m_Font.LineSpacing;  						m_Cursor.LineIndex++;  						//Part of a line was most likely deleted' so readjust the cursor accordingly.  						if (m_Cursor.CharacterIndex > m_Lines [m_Cursor.LineIndex].SBuilder.Length) {  							m_Cursor.CharacterIndex = m_Lines [m_Cursor.LineIndex].SBuilder.Length;  							m_Cursor.Position.X = Position.X + m_Font.MeasureString (m_Lines [m_Cursor.LineIndex].SBuilder.ToString ()).X;  						}  					}  				}  			}  			m_MovingCursor = true;  			m_RemovingTxt = false;  		}  		break;  	}  }  
Magic Number,Gonzo.Elements,UITextEdit,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UITextEdit.cs,Update,The following statement contains a magic number: switch (K) {  case Keys.Divide:  	if (m_Cursor.CharacterIndex < m_Lines [m_Cursor.LineIndex].SBuilder.Length)  		m_Lines [m_Cursor.LineIndex].SBuilder [m_Cursor.CharacterIndex] = '/';  	else  		m_Lines [m_Cursor.LineIndex].SBuilder.Append ("/");  	m_Cursor.Position.X += m_Font.MeasureString ("/").X;  	m_Cursor.CharacterIndex++;  	m_RemovingTxt = false;  	break;  case Keys.OemSemicolon:  	if (Input.InputRegion != null) {  		switch (Input.InputRegion.LayoutName) {  		case "English":  			if (m_Cursor.CharacterIndex < m_Lines [m_Cursor.LineIndex].SBuilder.Length)  				m_Lines [m_Cursor.LineIndex].SBuilder [m_Cursor.CharacterIndex] = ';';  			else  				m_Lines [m_Cursor.LineIndex].SBuilder.Append (";");  			m_Cursor.CharacterIndex++;  			m_MovingCursor = false;  			m_RemovingTxt = false;  			m_Cursor.Position.X += m_Font.MeasureString (";").X;  			break;  		}  	}  	break;  case Keys.OemQuotes:  	if (Input.InputRegion != null) {  		switch (Input.InputRegion.LayoutName) {  		case "English":  			//TODO: Should this be double quote if upper??  			if (m_Cursor.CharacterIndex < m_Lines [m_Cursor.LineIndex].SBuilder.Length)  				m_Lines [m_Cursor.LineIndex].SBuilder [m_Cursor.CharacterIndex] = '\'';  			else  				m_Lines [m_Cursor.LineIndex].SBuilder.Append ("'");  			m_Cursor.CharacterIndex++;  			m_MovingCursor = false;  			m_RemovingTxt = false;  			m_Cursor.Position.X += m_Font.MeasureString ("'").X;  			break;  		}  	}  	break;  case Keys.OemCloseBrackets:  	if (Input.InputRegion != null) {  		switch (Input.InputRegion.LayoutName) {  		case "English":  			if (m_Cursor.CharacterIndex < m_Lines [m_Cursor.LineIndex].SBuilder.Length)  				m_Lines [m_Cursor.LineIndex].SBuilder [m_Cursor.CharacterIndex] = '}';  			else  				m_Lines [m_Cursor.LineIndex].SBuilder.Append ("}");  			m_Cursor.Position.X += m_Font.MeasureString ("}").X;  			break;  		case "Norwegian":  		case "Swedish":  		case "Finnish":  		case "Danish":  			if (IsUpperCase (Input)) {  				if (m_Cursor.CharacterIndex < m_Lines [m_Cursor.LineIndex].SBuilder.Length)  					m_Lines [m_Cursor.LineIndex].SBuilder [m_Cursor.CharacterIndex] = '^';  				else  					m_Lines [m_Cursor.LineIndex].SBuilder.Append ("^");  				m_Cursor.Position.X += m_Font.MeasureString ("^").X;  			} else if (Input.IsCurPress (Keys.RightAlt)) {  				if (m_Cursor.CharacterIndex < m_Lines [m_Cursor.LineIndex].SBuilder.Length)  					m_Lines [m_Cursor.LineIndex].SBuilder [m_Cursor.CharacterIndex] = '~';  				else  					m_Lines [m_Cursor.LineIndex].SBuilder.Append ("~");  				m_Cursor.Position.X += m_Font.MeasureString ("~").X;  			}  			break;  		}  	}  	m_Cursor.CharacterIndex++;  	m_MovingCursor = false;  	m_RemovingTxt = false;  	break;  case Keys.OemPlus:  	if (m_Cursor.CharacterIndex < m_Lines [m_Cursor.LineIndex].SBuilder.Length)  		m_Lines [m_Cursor.LineIndex].SBuilder [m_Cursor.CharacterIndex] = '+';  	else  		m_Lines [m_Cursor.LineIndex].SBuilder.Append ("+");  	m_Cursor.Position.X += m_Font.MeasureString ("+").X;  	m_Cursor.CharacterIndex++;  	m_MovingCursor = false;  	m_RemovingTxt = false;  	break;  case Keys.OemComma:  	if (IsUpperCase (Input)) {  		if (m_Cursor.CharacterIndex < m_Lines [m_Cursor.LineIndex].SBuilder.Length)  			m_Lines [m_Cursor.LineIndex].SBuilder [m_Cursor.CharacterIndex] = ';';  		else  			m_Lines [m_Cursor.LineIndex].SBuilder.Append (";");  		m_Cursor.Position.X += m_Font.MeasureString (";").X;  	} else {  		if (m_Cursor.CharacterIndex < m_Lines [m_Cursor.LineIndex].SBuilder.Length)  			m_Lines [m_Cursor.LineIndex].SBuilder [m_Cursor.CharacterIndex] = ''';  		else  			m_Lines [m_Cursor.LineIndex].SBuilder.Append ("'");  		m_Cursor.Position.X += m_Font.MeasureString ("'").X;  	}  	m_Cursor.CharacterIndex++;  	m_MovingCursor = false;  	m_RemovingTxt = false;  	break;  case Keys.OemPeriod:  	if (m_Cursor.CharacterIndex < m_Lines [m_Cursor.LineIndex].SBuilder.Length)  		m_Lines [m_Cursor.LineIndex].SBuilder [m_Cursor.CharacterIndex] = '.';  	else  		m_Lines [m_Cursor.LineIndex].SBuilder.Append (".");  	m_Cursor.Position.X += m_Font.MeasureString (".").X;  	m_Cursor.CharacterIndex++;  	m_MovingCursor = false;  	m_RemovingTxt = false;  	break;  case Keys.Space:  	if (m_Cursor.CharacterIndex < m_Lines [m_Cursor.LineIndex].SBuilder.Length)  		m_Lines [m_Cursor.LineIndex].SBuilder [m_Cursor.CharacterIndex] = ' ';  	else  		m_Lines [m_Cursor.LineIndex].SBuilder.Append (" ");  	m_Cursor.Position.X += m_Font.MeasureString (" ").X;  	m_Cursor.CharacterIndex++;  	m_MovingCursor = false;  	m_RemovingTxt = false;  	break;  case Keys.Tab:  	if (m_Cursor.CharacterIndex < m_Lines [m_Cursor.LineIndex].SBuilder.Length)  		m_Lines [m_Cursor.LineIndex].SBuilder.Append ("   ");  	//TODO: How to insert tab??  	else  		m_Lines [m_Cursor.LineIndex].SBuilder.Append ("   ");  	m_Cursor.Position.X += m_Font.MeasureString ("   ").X;  	m_Cursor.CharacterIndex++;  	m_MovingCursor = false;  	m_RemovingTxt = false;  	break;  case Keys.Subtract:  	if (m_Cursor.CharacterIndex < m_Lines [m_Cursor.LineIndex].SBuilder.Length)  		m_Lines [m_Cursor.LineIndex].SBuilder [m_Cursor.CharacterIndex] = '-';  	else  		m_Lines [m_Cursor.LineIndex].SBuilder.Append ("-");  	m_Cursor.Position.X += m_Font.MeasureString ("-").X;  	m_Cursor.CharacterIndex++;  	m_MovingCursor = false;  	m_RemovingTxt = false;  	break;  case Keys.NumPad0:  	if (m_Cursor.CharacterIndex < m_Lines [m_Cursor.LineIndex].SBuilder.Length)  		m_Lines [m_Cursor.LineIndex].SBuilder [m_Cursor.CharacterIndex] = '0';  	else  		m_Lines [m_Cursor.LineIndex].SBuilder.Append ("0");  	m_Cursor.Position.X += m_Font.MeasureString ("0").X;  	m_Cursor.CharacterIndex++;  	m_MovingCursor = false;  	m_RemovingTxt = false;  	break;  case Keys.NumPad1:  	if (m_Cursor.CharacterIndex < m_Lines [m_Cursor.LineIndex].SBuilder.Length)  		m_Lines [m_Cursor.LineIndex].SBuilder [m_Cursor.CharacterIndex] = '1';  	else  		m_Lines [m_Cursor.LineIndex].SBuilder.Append ("1");  	m_Cursor.Position.X += m_Font.MeasureString ("1").X;  	m_Cursor.CharacterIndex++;  	m_MovingCursor = false;  	m_RemovingTxt = false;  	break;  case Keys.NumPad2:  	if (m_Cursor.CharacterIndex < m_Lines [m_Cursor.LineIndex].SBuilder.Length)  		m_Lines [m_Cursor.LineIndex].SBuilder [m_Cursor.CharacterIndex] = '2';  	else  		m_Lines [m_Cursor.LineIndex].SBuilder.Append ("2");  	m_Cursor.Position.X += m_Font.MeasureString ("2").X;  	m_Cursor.CharacterIndex++;  	m_MovingCursor = false;  	m_RemovingTxt = false;  	break;  case Keys.NumPad3:  	if (m_Cursor.CharacterIndex < m_Lines [m_Cursor.LineIndex].SBuilder.Length)  		m_Lines [m_Cursor.LineIndex].SBuilder [m_Cursor.CharacterIndex] = '3';  	else  		m_Lines [m_Cursor.LineIndex].SBuilder.Append ("3");  	m_Cursor.Position.X += m_Font.MeasureString ("3").X;  	m_Cursor.CharacterIndex++;  	m_MovingCursor = false;  	m_RemovingTxt = false;  	break;  case Keys.NumPad4:  	if (m_Cursor.CharacterIndex < m_Lines [m_Cursor.LineIndex].SBuilder.Length)  		m_Lines [m_Cursor.LineIndex].SBuilder [m_Cursor.CharacterIndex] = '4';  	else  		m_Lines [m_Cursor.LineIndex].SBuilder.Append ("4");  	m_Cursor.Position.X += m_Font.MeasureString ("4").X;  	m_Cursor.CharacterIndex++;  	m_MovingCursor = false;  	m_RemovingTxt = false;  	break;  case Keys.NumPad5:  	if (m_Cursor.CharacterIndex < m_Lines [m_Cursor.LineIndex].SBuilder.Length)  		m_Lines [m_Cursor.LineIndex].SBuilder [m_Cursor.CharacterIndex] = '5';  	else  		m_Lines [m_Cursor.LineIndex].SBuilder.Append ("5");  	m_Cursor.Position.X += m_Font.MeasureString ("5").X;  	m_Cursor.CharacterIndex++;  	m_MovingCursor = false;  	m_RemovingTxt = false;  	break;  case Keys.NumPad6:  	if (m_Cursor.CharacterIndex < m_Lines [m_Cursor.LineIndex].SBuilder.Length)  		m_Lines [m_Cursor.LineIndex].SBuilder [m_Cursor.CharacterIndex] = '6';  	else  		m_Lines [m_Cursor.LineIndex].SBuilder.Append ("6");  	m_Cursor.Position.X += m_Font.MeasureString ("6").X;  	m_Cursor.CharacterIndex++;  	m_MovingCursor = false;  	m_RemovingTxt = false;  	break;  case Keys.NumPad7:  	if (m_Cursor.CharacterIndex < m_Lines [m_Cursor.LineIndex].SBuilder.Length)  		m_Lines [m_Cursor.LineIndex].SBuilder [m_Cursor.CharacterIndex] = '7';  	m_Cursor.Position.X += m_Font.MeasureString ("7").X;  	m_Cursor.CharacterIndex++;  	m_MovingCursor = false;  	m_RemovingTxt = false;  	break;  case Keys.NumPad8:  	if (m_Cursor.CharacterIndex < m_Lines [m_Cursor.LineIndex].SBuilder.Length)  		m_Lines [m_Cursor.LineIndex].SBuilder [m_Cursor.CharacterIndex] = '8';  	else  		m_Lines [m_Cursor.LineIndex].SBuilder.Append ("8");  	m_Cursor.Position.X += m_Font.MeasureString ("8").X;  	m_Cursor.CharacterIndex++;  	m_MovingCursor = false;  	m_RemovingTxt = false;  	break;  case Keys.NumPad9:  	if (m_Cursor.CharacterIndex < m_Lines [m_Cursor.LineIndex].SBuilder.Length)  		m_Lines [m_Cursor.LineIndex].SBuilder [m_Cursor.CharacterIndex] = '9';  	else  		m_Lines [m_Cursor.LineIndex].SBuilder.Append ("9");  	m_Cursor.Position.X += m_Font.MeasureString ("9").X;  	m_Cursor.CharacterIndex++;  	m_MovingCursor = false;  	m_RemovingTxt = false;  	break;  case Keys.Multiply:  	if (m_Cursor.CharacterIndex < m_Lines [m_Cursor.LineIndex].SBuilder.Length)  		m_Lines [m_Cursor.LineIndex].SBuilder [m_Cursor.CharacterIndex] = '*';  	else  		m_Lines [m_Cursor.LineIndex].SBuilder.Append ("*");  	m_Cursor.Position.X += m_Font.MeasureString ("*").X;  	m_Cursor.CharacterIndex++;  	m_MovingCursor = false;  	m_RemovingTxt = false;  	break;  case Keys.Enter:  	if (m_NumLines > 1) {  		m_TextPosition.X = Position.X;  		m_TextPosition.Y += m_Font.LineSpacing;  		m_Lines.Add (new RenderableText () {  			SBuilder = new StringBuilder ()'  			Position = m_TextPosition  		});  		m_Cursor.Position.X = Position.X;  		m_Cursor.Position.Y += m_Font.LineSpacing;  		m_Cursor.LineIndex += 1;  		m_Cursor.CharacterIndex = 0;  		m_MovingCursor = false;  		m_RemovingTxt = false;  	}  	break;  case Keys.Back:  	m_RemovingTxt = true;  	//Cursor hasn't been moved.  	if (!m_MovingCursor) {  		if (m_Cursor.Position.X <= m_VerticalTextBoundary)  			m_Cursor.Position.X = m_VerticalTextBoundary;  		else {  			if (m_Cursor.Position.X > Position.X)  				m_Cursor.Position.X -= m_Font.MeasureString ("a").X;  		}  	}  	//If the current line is empty' move the cursor up.  	if (m_Lines [m_Cursor.LineIndex].SBuilder.Length == 0) {  		if (m_NumLines > 1) {  			if (m_TextPosition.Y > Position.Y) {  				m_TextPosition.Y -= m_Font.LineSpacing;  				m_Cursor.Position.X = Position.X + m_Size.X;  				m_Cursor.Position.Y -= m_Font.LineSpacing;  			}  			if (m_Cursor.LineIndex > 0) {  				m_Cursor.LineIndex--;  				m_Cursor.CharacterIndex = m_Lines [m_Cursor.LineIndex].SBuilder.Length;  			}  		} else {  			if (m_Cursor.LineIndex > 0)  				m_Cursor.LineIndex--;  		}  	} else {  		if (m_NumLines > 1) {  			m_Lines [m_Cursor.LineIndex].SBuilder.Remove ((int)(m_Cursor.CharacterIndex - 1)' 1);  			m_Cursor.CharacterIndex--;  			m_Cursor.Position.X -= m_Font.MeasureString ("a").X;  		} else {  			m_Lines.Remove (m_Lines [m_Cursor.CharacterIndex]);  			m_Cursor.CharacterIndex--;  			m_Cursor.LineIndex--;  			m_Cursor.Position.X -= m_Font.MeasureString ("a").X;  		}  	}  	//Cursor moved to the beginning of a line.  	if (m_Cursor.Position.X <= Position.X) {  		if (m_TextPosition.Y > Position.Y) {  			m_TextPosition.Y -= m_Font.LineSpacing;  			m_Cursor.Position.X = Position.X + m_Size.X;  			m_Cursor.Position.Y -= m_Font.LineSpacing;  		}  		if (m_Cursor.LineIndex > 0) {  			m_Cursor.LineIndex--;  			m_Cursor.CharacterIndex = m_Lines [m_Cursor.LineIndex].SBuilder.Length;  		}  	}  	break;  case Keys.Left:  	if (m_Cursor.Position.X > Position.X) {  		m_Cursor.Position.X -= m_Font.MeasureString ("a").X;  		m_Cursor.CharacterIndex--;  		if (m_NumLines == 1)  			m_Cursor.LineIndex--;  	} else if (m_Cursor.Position.X <= Position.X) {  		if (m_NumLines == 1) {  			for (int i = 0; i < m_Lines.Count; i++) {  				//Don't know why Line[0] doesn't work here...  				if ((m_Lines [1].Position.X < Position.X))  					m_Lines [i].Position.X += m_ScrollFactor;  				if (m_Lines [i].Position.X > (Position.X + Size.X))  					m_Lines [i].Visible = false;  				if (m_Lines [i].Position.X > Position.X && m_Lines [i].Position.X < (Position.X + Size.X))  					m_Lines [i].Visible = true;  			}  		}  	}  	m_MovingCursor = true;  	m_RemovingTxt = false;  	break;  case Keys.Right:  	if (m_Cursor.Position.X < (Position.X + m_Size.X)) {  		if (m_NumLines > 1) {  			if (m_Lines [m_Cursor.LineIndex].SBuilder.Length > 0 && m_Cursor.CharacterIndex < m_Lines [m_Cursor.LineIndex].SBuilder.Length) {  				m_Cursor.Position.X += m_Font.MeasureString ("a").X;  				m_Cursor.CharacterIndex++;  			}  		} else//Single-line control' simple.  		 {  			m_Cursor.Position.X += m_Font.MeasureString ("a").X;  			m_Cursor.CharacterIndex++;  			m_Cursor.LineIndex++;  		}  	} else if (m_Cursor.Position.X >= (Position.X + m_Size.X)) {  		if (m_NumLines == 1) {  			for (int i = 0; i < m_Lines.Count; i++) {  				if ((m_Lines [m_Lines.Count - 1].Position.X >= (Position.X + m_Size.X)))  					m_Lines [i].Position.X -= m_ScrollFactor;  				if (m_Lines [i].Position.X < (Position.X + Size.X))  					m_Lines [i].Visible = true;  				if (m_Lines [i].Position.X < (Position.X + Size.X) && m_Lines [i].Position.X < Position.X)  					m_Lines [i].Visible = false;  			}  		}  	}  	m_MovingCursor = true;  	m_RemovingTxt = false;  	break;  case Keys.Up:  	if (m_NumLines > 1) {  		if (m_Cursor.Position.Y > Position.Y) {  			m_Cursor.Position.Y -= m_Font.LineSpacing;  			m_Cursor.LineIndex--;  			//Part of a line was most likely deleted' so readjust the cursor accordingly.  			if (m_Cursor.CharacterIndex > m_Lines [m_Cursor.LineIndex].SBuilder.Length) {  				m_Cursor.CharacterIndex = m_Lines [m_Cursor.LineIndex].SBuilder.Length;  				m_Cursor.Position.X = Position.X + m_Font.MeasureString (m_Lines [m_Cursor.LineIndex].SBuilder.ToString ()).X;  			}  		}  		m_MovingCursor = true;  		m_RemovingTxt = false;  	}  	break;  case Keys.Down:  	if (m_NumLines > 1) {  		if (m_Cursor.Position.Y < (Position.Y + m_Size.Y)) {  			if (m_Lines.Count >= 2) {  				if (m_Cursor.Position.Y < m_Lines [m_Lines.Count - 1].Position.Y) {  					m_Cursor.Position.Y += m_Font.LineSpacing;  					m_Cursor.LineIndex++;  					//Part of a line was most likely deleted' so readjust the cursor accordingly.  					if (m_Cursor.CharacterIndex > m_Lines [m_Cursor.LineIndex].SBuilder.Length) {  						m_Cursor.CharacterIndex = m_Lines [m_Cursor.LineIndex].SBuilder.Length;  						m_Cursor.Position.X = Position.X + m_Font.MeasureString (m_Lines [m_Cursor.LineIndex].SBuilder.ToString ()).X;  					}  				}  			}  		}  		m_MovingCursor = true;  		m_RemovingTxt = false;  	}  	break;  }  
Magic Number,Gonzo.Elements,UITextEdit,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UITextEdit.cs,Update,The following statement contains a magic number: if (m_NumLines > 1) {  	if (m_Cursor.Position.Y < (Position.Y + m_Size.Y)) {  		if (m_Lines.Count >= 2) {  			if (m_Cursor.Position.Y < m_Lines [m_Lines.Count - 1].Position.Y) {  				m_Cursor.Position.Y += m_Font.LineSpacing;  				m_Cursor.LineIndex++;  				//Part of a line was most likely deleted' so readjust the cursor accordingly.  				if (m_Cursor.CharacterIndex > m_Lines [m_Cursor.LineIndex].SBuilder.Length) {  					m_Cursor.CharacterIndex = m_Lines [m_Cursor.LineIndex].SBuilder.Length;  					m_Cursor.Position.X = Position.X + m_Font.MeasureString (m_Lines [m_Cursor.LineIndex].SBuilder.ToString ()).X;  				}  			}  		}  	}  	m_MovingCursor = true;  	m_RemovingTxt = false;  }  
Magic Number,Gonzo.Elements,UITextEdit,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UITextEdit.cs,Update,The following statement contains a magic number: if (m_Cursor.Position.Y < (Position.Y + m_Size.Y)) {  	if (m_Lines.Count >= 2) {  		if (m_Cursor.Position.Y < m_Lines [m_Lines.Count - 1].Position.Y) {  			m_Cursor.Position.Y += m_Font.LineSpacing;  			m_Cursor.LineIndex++;  			//Part of a line was most likely deleted' so readjust the cursor accordingly.  			if (m_Cursor.CharacterIndex > m_Lines [m_Cursor.LineIndex].SBuilder.Length) {  				m_Cursor.CharacterIndex = m_Lines [m_Cursor.LineIndex].SBuilder.Length;  				m_Cursor.Position.X = Position.X + m_Font.MeasureString (m_Lines [m_Cursor.LineIndex].SBuilder.ToString ()).X;  			}  		}  	}  }  
Magic Number,Gonzo.Elements,UITextEdit,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UITextEdit.cs,Update,The following statement contains a magic number: if (m_Lines.Count >= 2) {  	if (m_Cursor.Position.Y < m_Lines [m_Lines.Count - 1].Position.Y) {  		m_Cursor.Position.Y += m_Font.LineSpacing;  		m_Cursor.LineIndex++;  		//Part of a line was most likely deleted' so readjust the cursor accordingly.  		if (m_Cursor.CharacterIndex > m_Lines [m_Cursor.LineIndex].SBuilder.Length) {  			m_Cursor.CharacterIndex = m_Lines [m_Cursor.LineIndex].SBuilder.Length;  			m_Cursor.Position.X = Position.X + m_Font.MeasureString (m_Lines [m_Cursor.LineIndex].SBuilder.ToString ()).X;  		}  	}  }  
Missing Default,Gonzo,TreeWalker,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\TreeWalker.cs,WalkTree,The following switch statement is missing a default case: switch (NType) {  case NodeType.DefineImage:  	//Defines an image and loads a texture for it.  	DefineImageNode ImgNode = (DefineImageNode)UINode.GetNode (node);  	UIImage Img = new UIImage (ImgNode' m_Screen);  	Result.Elements.Add (ImgNode.Name' Img);  	break;  case NodeType.DefineString:  	//Defines a string with a name.  	DefineStringNode StrNode = (DefineStringNode)UINode.GetNode (node);  	Result.Strings.Add (StrNode.Name' StringManager.StrTable (State.CurrentStringTable) [StrNode.StrIndex]);  	break;  case NodeType.AddButton:  	//Defines a button.  	AddButtonNode ButtonNode = (AddButtonNode)UINode.GetNode (node);  	UIButton Btn = new UIButton (ButtonNode' Result' m_Screen);  	Result.Elements.Add (ButtonNode.Name' Btn);  	break;  case NodeType.AddText:  	AddTextNode TextNode = (AddTextNode)UINode.GetNode (node);  	UILabel Lbl = new UILabel (TextNode' Result' m_Screen);  	Result.Elements.Add (TextNode.Name' Lbl);  	break;  case NodeType.AddTextEdit:  	AddTextEditNode TextEditNode = (AddTextEditNode)UINode.GetNode (node);  	UITextEdit Txt = new UITextEdit (TextEditNode' State' m_Screen);  	Result.Elements.Add (TextEditNode.Name' Txt);  	break;  case NodeType.AddSlider:  	AddSliderNode SliderNode = (AddSliderNode)UINode.GetNode (node);  	UISlider Slider = new UISlider (SliderNode' State' m_Screen);  	Result.Elements.Add (SliderNode.Name' Slider);  	break;  case NodeType.SetSharedProperties:  	//Assigns a bunch of shared properties to declarations following the statement.  	State.InSharedPropertiesGroup = true;  	SetSharedPropsNode SharedPropsNode = (SetSharedPropsNode)UINode.GetNode (node);  	if (SharedPropsNode.StringTable != null)  		State.CurrentStringTable = (int)SharedPropsNode.StringTable;  	if (SharedPropsNode.ControlPosition != null) {  		State.Position [0] = SharedPropsNode.ControlPosition.Numbers [0];  		State.Position [1] = SharedPropsNode.ControlPosition.Numbers [1];  		break;  	}  	if (SharedPropsNode.Color != null) {  		State.Color = new Color ();  		State.Color.R = (byte)SharedPropsNode.Color.Numbers [0];  		State.Color.G = (byte)SharedPropsNode.Color.Numbers [1];  		State.Color.B = (byte)SharedPropsNode.Color.Numbers [2];  	}  	if (SharedPropsNode.TextColor != null) {  		State.TextColor = new Color ();  		State.TextColor.R = (byte)SharedPropsNode.TextColor.Numbers [0];  		State.TextColor.G = (byte)SharedPropsNode.TextColor.Numbers [1];  		State.TextColor.B = (byte)SharedPropsNode.TextColor.Numbers [2];  	}  	if (SharedPropsNode.TextColorSelected != null) {  		State.TextColorSelected = new Color ();  		State.TextColorSelected.R = (byte)SharedPropsNode.TextColorSelected.Numbers [0];  		State.TextColorSelected.G = (byte)SharedPropsNode.TextColorSelected.Numbers [1];  		State.TextColorSelected.B = (byte)SharedPropsNode.TextColorSelected.Numbers [2];  	}  	if (SharedPropsNode.TextColorHighlighted != null) {  		State.TextColorHighlighted = new Color ();  		State.TextColorHighlighted.R = (byte)SharedPropsNode.TextColorHighlighted.Numbers [0];  		State.TextColorHighlighted.G = (byte)SharedPropsNode.TextColorHighlighted.Numbers [1];  		State.TextColorHighlighted.B = (byte)SharedPropsNode.TextColorHighlighted.Numbers [2];  	}  	if (SharedPropsNode.TextColorDisabled != null) {  		State.TextColorDisabled = new Color ();  		State.TextColorDisabled.R = (byte)SharedPropsNode.TextColorDisabled.Numbers [0];  		State.TextColorDisabled.G = (byte)SharedPropsNode.TextColorDisabled.Numbers [1];  		State.TextColorDisabled.B = (byte)SharedPropsNode.TextColorDisabled.Numbers [2];  	}  	if (SharedPropsNode.BackColor != null) {  		State.BackColor = new Color ();  		State.BackColor.R = (byte)SharedPropsNode.BackColor.Numbers [0];  		State.BackColor.G = (byte)SharedPropsNode.BackColor.Numbers [1];  		State.BackColor.B = (byte)SharedPropsNode.BackColor.Numbers [2];  	}  	if (SharedPropsNode.CursorColor != null) {  		State.CursorColor = new Color ();  		State.CursorColor.R = (byte)SharedPropsNode.CursorColor.Numbers [0];  		State.CursorColor.G = (byte)SharedPropsNode.CursorColor.Numbers [1];  		State.CursorColor.B = (byte)SharedPropsNode.CursorColor.Numbers [2];  	}  	if (SharedPropsNode.TextButton)  		State.TextButton = true;  	if (SharedPropsNode.Opaque != null)  		State.IsOpaque = (SharedPropsNode.Opaque == 1) ? true : false;  	if (SharedPropsNode.Transparent != null)  		State.IsTransparent = (SharedPropsNode.Transparent == 1) ? true : false;  	if (SharedPropsNode.Alignment != null)  		State.Alignment = (int)SharedPropsNode.Alignment;  	if (SharedPropsNode.Image != "")  		State.Image = SharedPropsNode.Image;  	if (SharedPropsNode.Tooltip != "")  		State.Tooltip = SharedPropsNode.Tooltip;  	if (SharedPropsNode.Text != "")  		State.Caption = SharedPropsNode.Text;  	if (SharedPropsNode.Size != null)  		State.Size = new Vector2 (SharedPropsNode.Size.Numbers [0]' SharedPropsNode.Size.Numbers [1]);  	if (SharedPropsNode.Orientation != null)  		State.Orientation = (int)SharedPropsNode.Orientation;  	if (SharedPropsNode.Font != null)  		State.Font = (int)SharedPropsNode.Font;  	if (SharedPropsNode.Opaque != null)  		State.Opaque = (int)SharedPropsNode.Opaque;  	break;  case NodeType.SetControlProperties:  	//Sets a bunch of properties to a specified control.  	SetControlPropsNode ControlPropsNode = (SetControlPropsNode)UINode.GetNode (node);  	UIControl Ctrl = new UIControl (ControlPropsNode' m_Screen' State);  	Result.Controls.Add (ControlPropsNode.Control' Ctrl);  	if (State.InSharedPropertiesGroup) {  		UIElement Test = new UIElement (m_Screen' null);  		//Script implicitly created an object... :\  		if (!Result.Elements.TryGetValue (ControlPropsNode.Control' out Test)) {  			Result.Elements.Add (ControlPropsNode.Control' new UIElement (m_Screen' null));  			if (Ctrl.Image != null)  				Result.Elements [ControlPropsNode.Control].Image = new UIImage (Ctrl.Image);  			Result.Elements [ControlPropsNode.Control].Position = Ctrl.Position;  		}  	}  	break;  case NodeType.End:  	State.InSharedPropertiesGroup = false;  	State.Image = "";  	//Reset  	State.TextButton = false;  	//Reset   	State.Color = new Color ();  	State.Caption = "";  	State.Size = new Vector2 (0' 0);  	State.Alignment = 0;  	State.Font = 0;  	//TODO: Reset more?  	break;  }  
Missing Default,Gonzo.Dialogs,UIDialog,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\UIDialog.cs,MouseEvents,The following switch statement is missing a default case: switch (Helper.CurrentMouseState.LeftButton) {  case ButtonState.Pressed:  	if (IsMouseOver (Helper)) {  		m_DragOffset = Helper.CurrentMouseState.Position.ToVector2 ();  		m_DoDrag = true;  	}  	break;  case ButtonState.Released:  	m_DoDrag = false;  	break;  }  
Missing Default,Gonzo.Elements,UIBodyBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIBodyBrowser.cs,Update,The following switch statement is missing a default case: switch (m_SelectedSkintype) {  case Elements.SkinType.Light:  	EArgs.SkinType = 0;  	EArgs.SelectedOutfit = (m_Sex == AvatarSex.Male ? m_LightAppearances [(Y * X) + m_Counter].Oft : m_LightFemaleAppearances [(Y * X) + m_Counter].Oft);  	OnButtonClicked (this' EArgs);  	break;  case Elements.SkinType.Medium:  	EArgs = new UISkinButtonClickedEventArgs ();  	EArgs.SkinType = 1;  	EArgs.SelectedOutfit = (m_Sex == AvatarSex.Male ? m_MediumAppearances [(X * Y) + m_Counter].Oft : m_MediumFemaleAppearances [(Y * X) + m_Counter].Oft);  	OnButtonClicked (this' EArgs);  	break;  case Elements.SkinType.Dark:  	EArgs = new UISkinButtonClickedEventArgs ();  	EArgs.SkinType = 2;  	EArgs.SelectedOutfit = (m_Sex == AvatarSex.Male ? m_DarkAppearances [(X * Y) + m_Counter].Oft : m_DarkFemaleAppearances [(Y * X) + m_Counter].Oft);  	OnButtonClicked (this' EArgs);  	break;  }  
Missing Default,Gonzo.Elements,UIBodyBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIBodyBrowser.cs,Draw,The following switch statement is missing a default case: switch (m_SelectedSkintype) {  case Elements.SkinType.Light:  	for (int X = 0; X <= m_Map.GetUpperBound (1); X++) {  		for (int Y = 0; Y <= m_Map.GetUpperBound (0); Y++) {  			m_Thumb = FileManager.GetTexture (m_Sex == AvatarSex.Male ? m_LightAppearances [(Y * X) + m_Counter].LightAppearance.ThumbnailID.UniqueID : m_LightFemaleAppearances [(Y * X) + m_Counter].LightAppearance.ThumbnailID.UniqueID);  			m_BtnWidth = m_SkinBtns [m_Counter + Y].BtnTex.Width / 4;  			m_BtnHeight = m_SkinBtns [m_Counter + Y].BtnTex.Height;  			Vector2 TexturePosition = new Vector2 (X * (BodyTileSize.X + 16)' Y * (BodyTileSize.Y));  			Vector2 ButtonPosition = new Vector2 (TexturePosition.X - 3' TexturePosition.Y - 5);  			SBatch.Draw (m_SkinBtns [Y + m_Counter].BtnTex' new Rectangle ((int)(Position.X + ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)' new Rectangle ((int)m_SkinBtns [m_Counter + Y].SourcePosition.X' (int)m_SkinBtns [m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);  			SBatch.Draw (m_Thumb' new Rectangle ((int)(Position.X + TexturePosition.X)' (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)' null' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth);  			if (m_Counter < m_NumberOfSkinsToDisplay)  				m_Counter++;  		}  	}  	break;  case Elements.SkinType.Medium:  	for (int X = 0; X <= m_Map.GetUpperBound (1); X++) {  		for (int Y = 0; Y <= m_Map.GetUpperBound (0); Y++) {  			m_Thumb = FileManager.GetTexture (m_Sex == AvatarSex.Male ? m_MediumAppearances [(Y * X) + m_Counter].MediumAppearance.ThumbnailID.UniqueID : m_MediumFemaleAppearances [(Y * X) + m_Counter].MediumAppearance.ThumbnailID.UniqueID);  			m_BtnWidth = m_SkinBtns [m_Counter + Y].BtnTex.Width / 4;  			m_BtnHeight = m_SkinBtns [m_Counter + Y].BtnTex.Height;  			Vector2 TexturePosition = new Vector2 (X * (BodyTileSize.X + 16)' Y * (BodyTileSize.Y));  			Vector2 ButtonPosition = new Vector2 (TexturePosition.X - 3' TexturePosition.Y - 5);  			SBatch.Draw (m_SkinBtns [Y + m_Counter].BtnTex' new Rectangle ((int)(Position.X + ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)' new Rectangle ((int)m_SkinBtns [m_Counter + Y].SourcePosition.X' (int)m_SkinBtns [m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);  			SBatch.Draw (m_Thumb' new Rectangle ((int)(Position.X + TexturePosition.X)' (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)' null' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth);  			if (m_Counter < m_NumberOfSkinsToDisplay)  				m_Counter++;  		}  	}  	break;  case Elements.SkinType.Dark:  	for (int X = 0; X <= m_Map.GetUpperBound (1); X++) {  		for (int Y = 0; Y <= m_Map.GetUpperBound (0); Y++) {  			m_Thumb = FileManager.GetTexture (m_Sex == AvatarSex.Male ? m_DarkAppearances [(Y * X) + m_Counter].DarkAppearance.ThumbnailID.UniqueID : m_DarkFemaleAppearances [(Y * X) + m_Counter].DarkAppearance.ThumbnailID.UniqueID);  			m_BtnWidth = m_SkinBtns [m_Counter + Y].BtnTex.Width / 4;  			m_BtnHeight = m_SkinBtns [m_Counter + Y].BtnTex.Height;  			Vector2 TexturePosition = new Vector2 (X * (BodyTileSize.X + 16)' Y * (BodyTileSize.Y));  			Vector2 ButtonPosition = new Vector2 (TexturePosition.X - 3' TexturePosition.Y - 5);  			SBatch.Draw (m_SkinBtns [Y + m_Counter].BtnTex' new Rectangle ((int)(Position.X + ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)' new Rectangle ((int)m_SkinBtns [m_Counter + Y].SourcePosition.X' (int)m_SkinBtns [m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);  			SBatch.Draw (m_Thumb' new Rectangle ((int)(Position.X + TexturePosition.X)' (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)' null' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth);  			if (m_Counter < m_NumberOfSkinsToDisplay)  				m_Counter++;  		}  	}  	break;  }  
Missing Default,Gonzo.Elements,UIHeadBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIHeadBrowser.cs,Update,The following switch statement is missing a default case: switch (m_SelectedSkintype) {  case Elements.SkinType.Light:  	EArgs.SkinType = 0;  	EArgs.SelectedOutfit = (m_Sex == AvatarSex.Male ? m_LightAppearances [(Y * X) + m_Counter].Oft : m_LightFemaleAppearances [(Y * X) + m_Counter].Oft);  	OnButtonClicked (this' EArgs);  	break;  case Elements.SkinType.Medium:  	EArgs.SkinType = 1;  	EArgs.SelectedOutfit = (m_Sex == AvatarSex.Male ? m_MediumAppearances [(Y * X) + m_Counter].Oft : m_MediumFemaleAppearances [(Y * X) + m_Counter].Oft);  	OnButtonClicked (this' EArgs);  	break;  case Elements.SkinType.Dark:  	EArgs.SkinType = 2;  	EArgs.SelectedOutfit = (m_Sex == AvatarSex.Male ? m_DarkAppearances [(Y * X) + m_Counter].Oft : m_DarkFemaleAppearances [(Y * X) + m_Counter].Oft);  	OnButtonClicked (this' EArgs);  	break;  }  
Missing Default,Gonzo.Elements,UIHeadBrowser,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIHeadBrowser.cs,Draw,The following switch statement is missing a default case: switch (m_SelectedSkintype) {  case Elements.SkinType.Light:  	for (int X = 0; X <= m_Map.GetUpperBound (1); X++) {  		for (int Y = 0; Y <= m_Map.GetUpperBound (0); Y++) {  			m_Thumb = FileManager.GetTexture (m_Sex == AvatarSex.Male ? m_LightAppearances [(Y * X) + m_Counter].LightAppearance.ThumbnailID.UniqueID : m_LightFemaleAppearances [(Y * X) + m_Counter].LightAppearance.ThumbnailID.UniqueID);  			m_BtnWidth = m_SkinBtns [m_Counter + Y].BtnTex.Width / 4;  			m_BtnHeight = m_SkinBtns [m_Counter + Y].BtnTex.Height;  			Vector2 TexturePosition = new Vector2 (X * (HeadTileSize.X + 10)' Y * (HeadTileSize.Y));  			Vector2 ButtonPosition = new Vector2 (TexturePosition.X - 2' TexturePosition.Y - 5);  			//NOTE: Must be drawn at Depth - 0.1f because of alpha issues with thumbs.  			SBatch.Draw (m_SkinBtns [Y + m_Counter].BtnTex' new Rectangle ((int)(Position.X + ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)' new Rectangle ((int)m_SkinBtns [m_Counter + Y].SourcePosition.X' (int)m_SkinBtns [m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);  			SBatch.Draw (m_Thumb' new Rectangle ((int)(Position.X + TexturePosition.X)' (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)' null' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth);  			if (m_Counter < m_NumberOfSkinsToDisplay)  				m_Counter++;  		}  	}  	break;  case Elements.SkinType.Medium:  	for (int X = 0; X <= m_Map.GetUpperBound (1); X++) {  		for (int Y = 0; Y <= m_Map.GetUpperBound (0); Y++) {  			m_Thumb = FileManager.GetTexture (m_Sex == AvatarSex.Male ? m_MediumAppearances [(Y * X) + m_Counter].MediumAppearance.ThumbnailID.UniqueID : m_MediumFemaleAppearances [(Y * X) + m_Counter].MediumAppearance.ThumbnailID.UniqueID);  			m_BtnWidth = m_SkinBtns [m_Counter + Y].BtnTex.Width / 4;  			m_BtnHeight = m_SkinBtns [m_Counter + Y].BtnTex.Height;  			Vector2 TexturePosition = new Vector2 (X * (HeadTileSize.X + 10)' Y * (HeadTileSize.Y));  			Vector2 ButtonPosition = new Vector2 (TexturePosition.X - 2' TexturePosition.Y - 5);  			//NOTE: Must be drawn at Depth - 0.1f because of alpha issues with thumbs.  			SBatch.Draw (m_SkinBtns [Y + m_Counter].BtnTex' new Rectangle ((int)(Position.X + ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)' new Rectangle ((int)m_SkinBtns [m_Counter + Y].SourcePosition.X' (int)m_SkinBtns [m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);  			SBatch.Draw (m_Thumb' new Rectangle ((int)(Position.X + TexturePosition.X)' (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)' null' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth);  			if (m_Counter < m_NumberOfSkinsToDisplay)  				m_Counter++;  		}  	}  	break;  case Elements.SkinType.Dark:  	for (int X = 0; X <= m_Map.GetUpperBound (1); X++) {  		for (int Y = 0; Y <= m_Map.GetUpperBound (0); Y++) {  			m_Thumb = FileManager.GetTexture (m_Sex == AvatarSex.Male ? m_DarkAppearances [(Y * X) + m_Counter].DarkAppearance.ThumbnailID.UniqueID : m_DarkFemaleAppearances [(Y * X) + m_Counter].DarkAppearance.ThumbnailID.UniqueID);  			m_BtnWidth = m_SkinBtns [m_Counter + Y].BtnTex.Width / 4;  			m_BtnHeight = m_SkinBtns [m_Counter + Y].BtnTex.Height;  			Vector2 TexturePosition = new Vector2 (X * (HeadTileSize.X + 10)' Y * (HeadTileSize.Y));  			Vector2 ButtonPosition = new Vector2 (TexturePosition.X - 2' TexturePosition.Y - 5);  			//NOTE: Must be drawn at Depth - 0.1f because of alpha issues with thumbs.  			SBatch.Draw (m_SkinBtns [Y + m_Counter].BtnTex' new Rectangle ((int)(Position.X + ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)' new Rectangle ((int)m_SkinBtns [m_Counter + Y].SourcePosition.X' (int)m_SkinBtns [m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);  			SBatch.Draw (m_Thumb' new Rectangle ((int)(Position.X + TexturePosition.X)' (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)' null' Color.White' 0.0f' new Vector2 (0.0f' 0.0f)' SpriteEffects.None' m_Depth);  			if (m_Counter < m_NumberOfSkinsToDisplay)  				m_Counter++;  		}  	}  	break;  }  
Missing Default,Gonzo.Elements,UIButton,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The following switch statement is missing a default case: switch (FontSize) {  case 9:  	m_Font = Screen.Font9px;  	break;  case 10:  	m_Font = Screen.Font10px;  	break;  case 12:  	m_Font = Screen.Font12px;  	break;  case 14:  	m_Font = Screen.Font14px;  	break;  case 16:  	m_Font = Screen.Font16px;  	break;  }  
Missing Default,Gonzo.Elements,UILabel,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UILabel.cs,UILabel,The following switch statement is missing a default case: switch (Font) {  case 7:  	m_Font = Screen.Font9px;  	//TODO: Fixme.  	break;  case 9:  	m_Font = Screen.Font9px;  	break;  case 10:  	m_Font = Screen.Font10px;  	break;  case 11:  	m_Font = Screen.Font11px;  	break;  case 12:  	m_Font = Screen.Font12px;  	break;  case 14:  	m_Font = Screen.Font14px;  	break;  case 16:  	m_Font = Screen.Font16px;  	break;  }  
Missing Default,Gonzo.Elements,UILabel,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UILabel.cs,UILabel,The following switch statement is missing a default case: switch (Font) {  case 7:  	m_Font = Screen.Font9px;  	//TODO: Fixme.  	break;  case 9:  	m_Font = Screen.Font9px;  	break;  case 10:  	m_Font = Screen.Font10px;  	break;  case 11:  	m_Font = Screen.Font11px;  	break;  case 12:  	m_Font = Screen.Font12px;  	break;  case 14:  	m_Font = Screen.Font14px;  	break;  case 16:  	m_Font = Screen.Font16px;  	break;  }  
Missing Default,Gonzo.Elements,UILabel,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UILabel.cs,AlignText,The following switch statement is missing a default case: switch (m_Alignment) {  case TextAlignment.Left_Top:  	//Is there a need to modify position at all here??  	break;  case TextAlignment.Left_Center:  	LocalCopy.Y += (m_Size.Y / 2) - (Measurement.Y / 2);  	Position = LocalCopy;  	break;  case TextAlignment.Center_Top:  	LocalCopy.X += (m_Size.X / 2) - (Measurement.X / 2);  	Position = LocalCopy;  	break;  case TextAlignment.Center_Center:  	LocalCopy.X += (m_Size.X / 2) - (Measurement.X / 2);  	LocalCopy.Y += (m_Size.Y / 2) - (Measurement.Y / 2);  	Position = LocalCopy;  	break;  case TextAlignment.Right_Top:  	LocalCopy.X += m_Size.X - Measurement.X;  	Position = LocalCopy;  	break;  case TextAlignment.Right_Center:  	LocalCopy.X += m_Size.X - Measurement.X;  	LocalCopy.Y += (m_Size.Y / 2) - (Measurement.Y / 2);  	Position = LocalCopy;  	break;  }  
Missing Default,Gonzo.Elements,UITextEdit,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UITextEdit.cs,UITextEdit,The following switch statement is missing a default case: switch (Font) {  case 9:  	m_Font = Screen.Font9px;  	break;  case 10:  	m_Font = Screen.Font10px;  	break;  case 12:  	m_Font = Screen.Font12px;  	break;  case 14:  	m_Font = Screen.Font14px;  	break;  case 16:  	m_Font = Screen.Font16px;  	break;  }  
Missing Default,Gonzo.Elements,UITextEdit,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UITextEdit.cs,UITextEdit,The following switch statement is missing a default case: switch (Font) {  case 9:  	m_Font = Screen.Font9px;  	break;  case 10:  	m_Font = Screen.Font10px;  	break;  case 12:  	m_Font = Screen.Font12px;  	break;  case 14:  	m_Font = Screen.Font14px;  	break;  case 16:  	m_Font = Screen.Font16px;  	break;  }  
Missing Default,Gonzo.Elements,UITextEdit,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UITextEdit.cs,Update,The following switch statement is missing a default case: switch (K) {  case Keys.Divide:  	if (m_Cursor.CharacterIndex < m_Lines [m_Cursor.LineIndex].SBuilder.Length)  		m_Lines [m_Cursor.LineIndex].SBuilder [m_Cursor.CharacterIndex] = '/';  	else  		m_Lines [m_Cursor.LineIndex].SBuilder.Append ("/");  	m_Cursor.Position.X += m_Font.MeasureString ("/").X;  	m_Cursor.CharacterIndex++;  	m_RemovingTxt = false;  	break;  case Keys.OemSemicolon:  	if (Input.InputRegion != null) {  		switch (Input.InputRegion.LayoutName) {  		case "English":  			if (m_Cursor.CharacterIndex < m_Lines [m_Cursor.LineIndex].SBuilder.Length)  				m_Lines [m_Cursor.LineIndex].SBuilder [m_Cursor.CharacterIndex] = ';';  			else  				m_Lines [m_Cursor.LineIndex].SBuilder.Append (";");  			m_Cursor.CharacterIndex++;  			m_MovingCursor = false;  			m_RemovingTxt = false;  			m_Cursor.Position.X += m_Font.MeasureString (";").X;  			break;  		}  	}  	break;  case Keys.OemQuotes:  	if (Input.InputRegion != null) {  		switch (Input.InputRegion.LayoutName) {  		case "English":  			//TODO: Should this be double quote if upper??  			if (m_Cursor.CharacterIndex < m_Lines [m_Cursor.LineIndex].SBuilder.Length)  				m_Lines [m_Cursor.LineIndex].SBuilder [m_Cursor.CharacterIndex] = '\'';  			else  				m_Lines [m_Cursor.LineIndex].SBuilder.Append ("'");  			m_Cursor.CharacterIndex++;  			m_MovingCursor = false;  			m_RemovingTxt = false;  			m_Cursor.Position.X += m_Font.MeasureString ("'").X;  			break;  		}  	}  	break;  case Keys.OemCloseBrackets:  	if (Input.InputRegion != null) {  		switch (Input.InputRegion.LayoutName) {  		case "English":  			if (m_Cursor.CharacterIndex < m_Lines [m_Cursor.LineIndex].SBuilder.Length)  				m_Lines [m_Cursor.LineIndex].SBuilder [m_Cursor.CharacterIndex] = '}';  			else  				m_Lines [m_Cursor.LineIndex].SBuilder.Append ("}");  			m_Cursor.Position.X += m_Font.MeasureString ("}").X;  			break;  		case "Norwegian":  		case "Swedish":  		case "Finnish":  		case "Danish":  			if (IsUpperCase (Input)) {  				if (m_Cursor.CharacterIndex < m_Lines [m_Cursor.LineIndex].SBuilder.Length)  					m_Lines [m_Cursor.LineIndex].SBuilder [m_Cursor.CharacterIndex] = '^';  				else  					m_Lines [m_Cursor.LineIndex].SBuilder.Append ("^");  				m_Cursor.Position.X += m_Font.MeasureString ("^").X;  			} else if (Input.IsCurPress (Keys.RightAlt)) {  				if (m_Cursor.CharacterIndex < m_Lines [m_Cursor.LineIndex].SBuilder.Length)  					m_Lines [m_Cursor.LineIndex].SBuilder [m_Cursor.CharacterIndex] = '~';  				else  					m_Lines [m_Cursor.LineIndex].SBuilder.Append ("~");  				m_Cursor.Position.X += m_Font.MeasureString ("~").X;  			}  			break;  		}  	}  	m_Cursor.CharacterIndex++;  	m_MovingCursor = false;  	m_RemovingTxt = false;  	break;  case Keys.OemPlus:  	if (m_Cursor.CharacterIndex < m_Lines [m_Cursor.LineIndex].SBuilder.Length)  		m_Lines [m_Cursor.LineIndex].SBuilder [m_Cursor.CharacterIndex] = '+';  	else  		m_Lines [m_Cursor.LineIndex].SBuilder.Append ("+");  	m_Cursor.Position.X += m_Font.MeasureString ("+").X;  	m_Cursor.CharacterIndex++;  	m_MovingCursor = false;  	m_RemovingTxt = false;  	break;  case Keys.OemComma:  	if (IsUpperCase (Input)) {  		if (m_Cursor.CharacterIndex < m_Lines [m_Cursor.LineIndex].SBuilder.Length)  			m_Lines [m_Cursor.LineIndex].SBuilder [m_Cursor.CharacterIndex] = ';';  		else  			m_Lines [m_Cursor.LineIndex].SBuilder.Append (";");  		m_Cursor.Position.X += m_Font.MeasureString (";").X;  	} else {  		if (m_Cursor.CharacterIndex < m_Lines [m_Cursor.LineIndex].SBuilder.Length)  			m_Lines [m_Cursor.LineIndex].SBuilder [m_Cursor.CharacterIndex] = ''';  		else  			m_Lines [m_Cursor.LineIndex].SBuilder.Append ("'");  		m_Cursor.Position.X += m_Font.MeasureString ("'").X;  	}  	m_Cursor.CharacterIndex++;  	m_MovingCursor = false;  	m_RemovingTxt = false;  	break;  case Keys.OemPeriod:  	if (m_Cursor.CharacterIndex < m_Lines [m_Cursor.LineIndex].SBuilder.Length)  		m_Lines [m_Cursor.LineIndex].SBuilder [m_Cursor.CharacterIndex] = '.';  	else  		m_Lines [m_Cursor.LineIndex].SBuilder.Append (".");  	m_Cursor.Position.X += m_Font.MeasureString (".").X;  	m_Cursor.CharacterIndex++;  	m_MovingCursor = false;  	m_RemovingTxt = false;  	break;  case Keys.Space:  	if (m_Cursor.CharacterIndex < m_Lines [m_Cursor.LineIndex].SBuilder.Length)  		m_Lines [m_Cursor.LineIndex].SBuilder [m_Cursor.CharacterIndex] = ' ';  	else  		m_Lines [m_Cursor.LineIndex].SBuilder.Append (" ");  	m_Cursor.Position.X += m_Font.MeasureString (" ").X;  	m_Cursor.CharacterIndex++;  	m_MovingCursor = false;  	m_RemovingTxt = false;  	break;  case Keys.Tab:  	if (m_Cursor.CharacterIndex < m_Lines [m_Cursor.LineIndex].SBuilder.Length)  		m_Lines [m_Cursor.LineIndex].SBuilder.Append ("   ");  	//TODO: How to insert tab??  	else  		m_Lines [m_Cursor.LineIndex].SBuilder.Append ("   ");  	m_Cursor.Position.X += m_Font.MeasureString ("   ").X;  	m_Cursor.CharacterIndex++;  	m_MovingCursor = false;  	m_RemovingTxt = false;  	break;  case Keys.Subtract:  	if (m_Cursor.CharacterIndex < m_Lines [m_Cursor.LineIndex].SBuilder.Length)  		m_Lines [m_Cursor.LineIndex].SBuilder [m_Cursor.CharacterIndex] = '-';  	else  		m_Lines [m_Cursor.LineIndex].SBuilder.Append ("-");  	m_Cursor.Position.X += m_Font.MeasureString ("-").X;  	m_Cursor.CharacterIndex++;  	m_MovingCursor = false;  	m_RemovingTxt = false;  	break;  case Keys.NumPad0:  	if (m_Cursor.CharacterIndex < m_Lines [m_Cursor.LineIndex].SBuilder.Length)  		m_Lines [m_Cursor.LineIndex].SBuilder [m_Cursor.CharacterIndex] = '0';  	else  		m_Lines [m_Cursor.LineIndex].SBuilder.Append ("0");  	m_Cursor.Position.X += m_Font.MeasureString ("0").X;  	m_Cursor.CharacterIndex++;  	m_MovingCursor = false;  	m_RemovingTxt = false;  	break;  case Keys.NumPad1:  	if (m_Cursor.CharacterIndex < m_Lines [m_Cursor.LineIndex].SBuilder.Length)  		m_Lines [m_Cursor.LineIndex].SBuilder [m_Cursor.CharacterIndex] = '1';  	else  		m_Lines [m_Cursor.LineIndex].SBuilder.Append ("1");  	m_Cursor.Position.X += m_Font.MeasureString ("1").X;  	m_Cursor.CharacterIndex++;  	m_MovingCursor = false;  	m_RemovingTxt = false;  	break;  case Keys.NumPad2:  	if (m_Cursor.CharacterIndex < m_Lines [m_Cursor.LineIndex].SBuilder.Length)  		m_Lines [m_Cursor.LineIndex].SBuilder [m_Cursor.CharacterIndex] = '2';  	else  		m_Lines [m_Cursor.LineIndex].SBuilder.Append ("2");  	m_Cursor.Position.X += m_Font.MeasureString ("2").X;  	m_Cursor.CharacterIndex++;  	m_MovingCursor = false;  	m_RemovingTxt = false;  	break;  case Keys.NumPad3:  	if (m_Cursor.CharacterIndex < m_Lines [m_Cursor.LineIndex].SBuilder.Length)  		m_Lines [m_Cursor.LineIndex].SBuilder [m_Cursor.CharacterIndex] = '3';  	else  		m_Lines [m_Cursor.LineIndex].SBuilder.Append ("3");  	m_Cursor.Position.X += m_Font.MeasureString ("3").X;  	m_Cursor.CharacterIndex++;  	m_MovingCursor = false;  	m_RemovingTxt = false;  	break;  case Keys.NumPad4:  	if (m_Cursor.CharacterIndex < m_Lines [m_Cursor.LineIndex].SBuilder.Length)  		m_Lines [m_Cursor.LineIndex].SBuilder [m_Cursor.CharacterIndex] = '4';  	else  		m_Lines [m_Cursor.LineIndex].SBuilder.Append ("4");  	m_Cursor.Position.X += m_Font.MeasureString ("4").X;  	m_Cursor.CharacterIndex++;  	m_MovingCursor = false;  	m_RemovingTxt = false;  	break;  case Keys.NumPad5:  	if (m_Cursor.CharacterIndex < m_Lines [m_Cursor.LineIndex].SBuilder.Length)  		m_Lines [m_Cursor.LineIndex].SBuilder [m_Cursor.CharacterIndex] = '5';  	else  		m_Lines [m_Cursor.LineIndex].SBuilder.Append ("5");  	m_Cursor.Position.X += m_Font.MeasureString ("5").X;  	m_Cursor.CharacterIndex++;  	m_MovingCursor = false;  	m_RemovingTxt = false;  	break;  case Keys.NumPad6:  	if (m_Cursor.CharacterIndex < m_Lines [m_Cursor.LineIndex].SBuilder.Length)  		m_Lines [m_Cursor.LineIndex].SBuilder [m_Cursor.CharacterIndex] = '6';  	else  		m_Lines [m_Cursor.LineIndex].SBuilder.Append ("6");  	m_Cursor.Position.X += m_Font.MeasureString ("6").X;  	m_Cursor.CharacterIndex++;  	m_MovingCursor = false;  	m_RemovingTxt = false;  	break;  case Keys.NumPad7:  	if (m_Cursor.CharacterIndex < m_Lines [m_Cursor.LineIndex].SBuilder.Length)  		m_Lines [m_Cursor.LineIndex].SBuilder [m_Cursor.CharacterIndex] = '7';  	m_Cursor.Position.X += m_Font.MeasureString ("7").X;  	m_Cursor.CharacterIndex++;  	m_MovingCursor = false;  	m_RemovingTxt = false;  	break;  case Keys.NumPad8:  	if (m_Cursor.CharacterIndex < m_Lines [m_Cursor.LineIndex].SBuilder.Length)  		m_Lines [m_Cursor.LineIndex].SBuilder [m_Cursor.CharacterIndex] = '8';  	else  		m_Lines [m_Cursor.LineIndex].SBuilder.Append ("8");  	m_Cursor.Position.X += m_Font.MeasureString ("8").X;  	m_Cursor.CharacterIndex++;  	m_MovingCursor = false;  	m_RemovingTxt = false;  	break;  case Keys.NumPad9:  	if (m_Cursor.CharacterIndex < m_Lines [m_Cursor.LineIndex].SBuilder.Length)  		m_Lines [m_Cursor.LineIndex].SBuilder [m_Cursor.CharacterIndex] = '9';  	else  		m_Lines [m_Cursor.LineIndex].SBuilder.Append ("9");  	m_Cursor.Position.X += m_Font.MeasureString ("9").X;  	m_Cursor.CharacterIndex++;  	m_MovingCursor = false;  	m_RemovingTxt = false;  	break;  case Keys.Multiply:  	if (m_Cursor.CharacterIndex < m_Lines [m_Cursor.LineIndex].SBuilder.Length)  		m_Lines [m_Cursor.LineIndex].SBuilder [m_Cursor.CharacterIndex] = '*';  	else  		m_Lines [m_Cursor.LineIndex].SBuilder.Append ("*");  	m_Cursor.Position.X += m_Font.MeasureString ("*").X;  	m_Cursor.CharacterIndex++;  	m_MovingCursor = false;  	m_RemovingTxt = false;  	break;  case Keys.Enter:  	if (m_NumLines > 1) {  		m_TextPosition.X = Position.X;  		m_TextPosition.Y += m_Font.LineSpacing;  		m_Lines.Add (new RenderableText () {  			SBuilder = new StringBuilder ()'  			Position = m_TextPosition  		});  		m_Cursor.Position.X = Position.X;  		m_Cursor.Position.Y += m_Font.LineSpacing;  		m_Cursor.LineIndex += 1;  		m_Cursor.CharacterIndex = 0;  		m_MovingCursor = false;  		m_RemovingTxt = false;  	}  	break;  case Keys.Back:  	m_RemovingTxt = true;  	//Cursor hasn't been moved.  	if (!m_MovingCursor) {  		if (m_Cursor.Position.X <= m_VerticalTextBoundary)  			m_Cursor.Position.X = m_VerticalTextBoundary;  		else {  			if (m_Cursor.Position.X > Position.X)  				m_Cursor.Position.X -= m_Font.MeasureString ("a").X;  		}  	}  	//If the current line is empty' move the cursor up.  	if (m_Lines [m_Cursor.LineIndex].SBuilder.Length == 0) {  		if (m_NumLines > 1) {  			if (m_TextPosition.Y > Position.Y) {  				m_TextPosition.Y -= m_Font.LineSpacing;  				m_Cursor.Position.X = Position.X + m_Size.X;  				m_Cursor.Position.Y -= m_Font.LineSpacing;  			}  			if (m_Cursor.LineIndex > 0) {  				m_Cursor.LineIndex--;  				m_Cursor.CharacterIndex = m_Lines [m_Cursor.LineIndex].SBuilder.Length;  			}  		} else {  			if (m_Cursor.LineIndex > 0)  				m_Cursor.LineIndex--;  		}  	} else {  		if (m_NumLines > 1) {  			m_Lines [m_Cursor.LineIndex].SBuilder.Remove ((int)(m_Cursor.CharacterIndex - 1)' 1);  			m_Cursor.CharacterIndex--;  			m_Cursor.Position.X -= m_Font.MeasureString ("a").X;  		} else {  			m_Lines.Remove (m_Lines [m_Cursor.CharacterIndex]);  			m_Cursor.CharacterIndex--;  			m_Cursor.LineIndex--;  			m_Cursor.Position.X -= m_Font.MeasureString ("a").X;  		}  	}  	//Cursor moved to the beginning of a line.  	if (m_Cursor.Position.X <= Position.X) {  		if (m_TextPosition.Y > Position.Y) {  			m_TextPosition.Y -= m_Font.LineSpacing;  			m_Cursor.Position.X = Position.X + m_Size.X;  			m_Cursor.Position.Y -= m_Font.LineSpacing;  		}  		if (m_Cursor.LineIndex > 0) {  			m_Cursor.LineIndex--;  			m_Cursor.CharacterIndex = m_Lines [m_Cursor.LineIndex].SBuilder.Length;  		}  	}  	break;  case Keys.Left:  	if (m_Cursor.Position.X > Position.X) {  		m_Cursor.Position.X -= m_Font.MeasureString ("a").X;  		m_Cursor.CharacterIndex--;  		if (m_NumLines == 1)  			m_Cursor.LineIndex--;  	} else if (m_Cursor.Position.X <= Position.X) {  		if (m_NumLines == 1) {  			for (int i = 0; i < m_Lines.Count; i++) {  				//Don't know why Line[0] doesn't work here...  				if ((m_Lines [1].Position.X < Position.X))  					m_Lines [i].Position.X += m_ScrollFactor;  				if (m_Lines [i].Position.X > (Position.X + Size.X))  					m_Lines [i].Visible = false;  				if (m_Lines [i].Position.X > Position.X && m_Lines [i].Position.X < (Position.X + Size.X))  					m_Lines [i].Visible = true;  			}  		}  	}  	m_MovingCursor = true;  	m_RemovingTxt = false;  	break;  case Keys.Right:  	if (m_Cursor.Position.X < (Position.X + m_Size.X)) {  		if (m_NumLines > 1) {  			if (m_Lines [m_Cursor.LineIndex].SBuilder.Length > 0 && m_Cursor.CharacterIndex < m_Lines [m_Cursor.LineIndex].SBuilder.Length) {  				m_Cursor.Position.X += m_Font.MeasureString ("a").X;  				m_Cursor.CharacterIndex++;  			}  		} else//Single-line control' simple.  		 {  			m_Cursor.Position.X += m_Font.MeasureString ("a").X;  			m_Cursor.CharacterIndex++;  			m_Cursor.LineIndex++;  		}  	} else if (m_Cursor.Position.X >= (Position.X + m_Size.X)) {  		if (m_NumLines == 1) {  			for (int i = 0; i < m_Lines.Count; i++) {  				if ((m_Lines [m_Lines.Count - 1].Position.X >= (Position.X + m_Size.X)))  					m_Lines [i].Position.X -= m_ScrollFactor;  				if (m_Lines [i].Position.X < (Position.X + Size.X))  					m_Lines [i].Visible = true;  				if (m_Lines [i].Position.X < (Position.X + Size.X) && m_Lines [i].Position.X < Position.X)  					m_Lines [i].Visible = false;  			}  		}  	}  	m_MovingCursor = true;  	m_RemovingTxt = false;  	break;  case Keys.Up:  	if (m_NumLines > 1) {  		if (m_Cursor.Position.Y > Position.Y) {  			m_Cursor.Position.Y -= m_Font.LineSpacing;  			m_Cursor.LineIndex--;  			//Part of a line was most likely deleted' so readjust the cursor accordingly.  			if (m_Cursor.CharacterIndex > m_Lines [m_Cursor.LineIndex].SBuilder.Length) {  				m_Cursor.CharacterIndex = m_Lines [m_Cursor.LineIndex].SBuilder.Length;  				m_Cursor.Position.X = Position.X + m_Font.MeasureString (m_Lines [m_Cursor.LineIndex].SBuilder.ToString ()).X;  			}  		}  		m_MovingCursor = true;  		m_RemovingTxt = false;  	}  	break;  case Keys.Down:  	if (m_NumLines > 1) {  		if (m_Cursor.Position.Y < (Position.Y + m_Size.Y)) {  			if (m_Lines.Count >= 2) {  				if (m_Cursor.Position.Y < m_Lines [m_Lines.Count - 1].Position.Y) {  					m_Cursor.Position.Y += m_Font.LineSpacing;  					m_Cursor.LineIndex++;  					//Part of a line was most likely deleted' so readjust the cursor accordingly.  					if (m_Cursor.CharacterIndex > m_Lines [m_Cursor.LineIndex].SBuilder.Length) {  						m_Cursor.CharacterIndex = m_Lines [m_Cursor.LineIndex].SBuilder.Length;  						m_Cursor.Position.X = Position.X + m_Font.MeasureString (m_Lines [m_Cursor.LineIndex].SBuilder.ToString ()).X;  					}  				}  			}  		}  		m_MovingCursor = true;  		m_RemovingTxt = false;  	}  	break;  }  
Missing Default,Gonzo.Elements,UITextEdit,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UITextEdit.cs,Update,The following switch statement is missing a default case: switch (Input.InputRegion.LayoutName) {  case "English":  	if (m_Cursor.CharacterIndex < m_Lines [m_Cursor.LineIndex].SBuilder.Length)  		m_Lines [m_Cursor.LineIndex].SBuilder [m_Cursor.CharacterIndex] = ';';  	else  		m_Lines [m_Cursor.LineIndex].SBuilder.Append (";");  	m_Cursor.CharacterIndex++;  	m_MovingCursor = false;  	m_RemovingTxt = false;  	m_Cursor.Position.X += m_Font.MeasureString (";").X;  	break;  }  
Missing Default,Gonzo.Elements,UITextEdit,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UITextEdit.cs,Update,The following switch statement is missing a default case: switch (Input.InputRegion.LayoutName) {  case "English":  	//TODO: Should this be double quote if upper??  	if (m_Cursor.CharacterIndex < m_Lines [m_Cursor.LineIndex].SBuilder.Length)  		m_Lines [m_Cursor.LineIndex].SBuilder [m_Cursor.CharacterIndex] = '\'';  	else  		m_Lines [m_Cursor.LineIndex].SBuilder.Append ("'");  	m_Cursor.CharacterIndex++;  	m_MovingCursor = false;  	m_RemovingTxt = false;  	m_Cursor.Position.X += m_Font.MeasureString ("'").X;  	break;  }  
Missing Default,Gonzo.Elements,UITextEdit,F:\newReposMay17\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UITextEdit.cs,Update,The following switch statement is missing a default case: switch (Input.InputRegion.LayoutName) {  case "English":  	if (m_Cursor.CharacterIndex < m_Lines [m_Cursor.LineIndex].SBuilder.Length)  		m_Lines [m_Cursor.LineIndex].SBuilder [m_Cursor.CharacterIndex] = '}';  	else  		m_Lines [m_Cursor.LineIndex].SBuilder.Append ("}");  	m_Cursor.Position.X += m_Font.MeasureString ("}").X;  	break;  case "Norwegian":  case "Swedish":  case "Finnish":  case "Danish":  	if (IsUpperCase (Input)) {  		if (m_Cursor.CharacterIndex < m_Lines [m_Cursor.LineIndex].SBuilder.Length)  			m_Lines [m_Cursor.LineIndex].SBuilder [m_Cursor.CharacterIndex] = '^';  		else  			m_Lines [m_Cursor.LineIndex].SBuilder.Append ("^");  		m_Cursor.Position.X += m_Font.MeasureString ("^").X;  	} else if (Input.IsCurPress (Keys.RightAlt)) {  		if (m_Cursor.CharacterIndex < m_Lines [m_Cursor.LineIndex].SBuilder.Length)  			m_Lines [m_Cursor.LineIndex].SBuilder [m_Cursor.CharacterIndex] = '~';  		else  			m_Lines [m_Cursor.LineIndex].SBuilder.Append ("~");  		m_Cursor.Position.X += m_Font.MeasureString ("~").X;  	}  	break;  }  
