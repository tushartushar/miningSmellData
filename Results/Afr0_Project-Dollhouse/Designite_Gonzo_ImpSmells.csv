Implementation smell,Namespace,Class,File,Method,Description
Long Method,Gonzo,TreeWalker,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\TreeWalker.cs,WalkTree,The method has 171 lines of code.
Long Method,Gonzo.Elements,UITextEdit,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UITextEdit.cs,UITextEdit,The method has 113 lines of code.
Long Method,Gonzo.Elements,UITextEdit,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UITextEdit.cs,Update,The method has 120 lines of code.
Long Method,Gonzo.Elements,UIButton,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The method has 189 lines of code.
Complex Method,Gonzo,TreeWalker,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\TreeWalker.cs,WalkTree,Cyclomatic complexity of the method is 34
Complex Method,Gonzo.Elements,UIBodyBrowser,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIBodyBrowser.cs,UIBodyBrowser,Cyclomatic complexity of the method is 14
Complex Method,Gonzo.Elements,UIBodyBrowser,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIBodyBrowser.cs,Update,Cyclomatic complexity of the method is 13
Complex Method,Gonzo.Elements,UIBodyBrowser,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIBodyBrowser.cs,Draw,Cyclomatic complexity of the method is 13
Complex Method,Gonzo.Elements,UIHeadBrowser,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIHeadBrowser.cs,UIHeadBrowser,Cyclomatic complexity of the method is 14
Complex Method,Gonzo.Elements,UIHeadBrowser,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIHeadBrowser.cs,Update,Cyclomatic complexity of the method is 13
Complex Method,Gonzo.Elements,UIHeadBrowser,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIHeadBrowser.cs,Draw,Cyclomatic complexity of the method is 13
Complex Method,Gonzo.Elements,UITextEdit,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UITextEdit.cs,UITextEdit,Cyclomatic complexity of the method is 31
Complex Method,Gonzo.Elements,UITextEdit,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UITextEdit.cs,Window_TextInput,Cyclomatic complexity of the method is 13
Complex Method,Gonzo.Elements,UITextEdit,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UITextEdit.cs,Update,Cyclomatic complexity of the method is 33
Complex Method,Gonzo.Elements,UITextEdit,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UITextEdit.cs,Draw,Cyclomatic complexity of the method is 10
Complex Method,Gonzo.Elements,UIButton,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,Cyclomatic complexity of the method is 30
Complex Method,Gonzo.Elements,UIButton,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,Cyclomatic complexity of the method is 8
Complex Method,Gonzo.Elements,UIButton,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,Update,Cyclomatic complexity of the method is 9
Complex Method,Gonzo.Elements,UIControl,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIControl.cs,UIControl,Cyclomatic complexity of the method is 13
Complex Method,Gonzo.Elements,UILabel,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UILabel.cs,UILabel,Cyclomatic complexity of the method is 14
Long Parameter List,Gonzo,UIScreen,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\UIScreen.cs,UIScreen,The method has 6 parameters. Parameters: Manager' Name' SBatch' ScreenPosition' ScreenSize' UIScriptPath
Long Parameter List,Gonzo.Dialogs,UIDialog,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\UIDialog.cs,UIDialog,The method has 5 parameters. Parameters: Screen' Pos' IsTall' IsDraggable' HasExitButton
Long Parameter List,Gonzo.Elements,UITextEdit,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UITextEdit.cs,UITextEdit,The method has 10 parameters. Parameters: Name' ID' DrawBackground' Multiline' TextEditPosition' Size' Font' Screen' Tooltip' Parent
Long Parameter List,Gonzo.Elements,UITextEdit,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UITextEdit.cs,DrawBorder,The method has 5 parameters. Parameters: SBatch' TexData' rectangleToDraw' thicknessOfBorder' borderColor
Long Parameter List,Gonzo.Elements,UIButton,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The method has 8 parameters. Parameters: Name' Pos' Screen' Tex' Caption' Font' ScaleToText' Parent
Long Parameter List,Gonzo.Elements,UIElement,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIElement.cs,UIElement,The method has 5 parameters. Parameters: Name' Position' Size' Screen' Parent
Long Parameter List,Gonzo.Elements,UIImage,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIImage.cs,DrawTextureTo,The method has 5 parameters. Parameters: SBatch' Scale' From' To' LayerDepth
Long Parameter List,Gonzo.Elements,NineSlicer,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIImage.cs,NineSlicer,The method has 7 parameters. Parameters: Position' TextureWidth' TextureHeight' LeftPadding' RightPadding' TopPadding' BottomPadding
Long Parameter List,Gonzo.Elements,NineSlicer,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIImage.cs,Calculate,The method has 6 parameters. Parameters: X' Y' LeftPadding' RightPadding' TopPadding' BottomPadding
Long Parameter List,Gonzo.Elements,UILabel,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UILabel.cs,UILabel,The method has 8 parameters. Parameters: StrCaption' ID' TextPosition' Size' Clr' Font' Screen' Alignment
Long Statement,Gonzo,GapBuffer<T>,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\GabBufferEnumerator.cs,CopyTo,The length of the statement  "                throw new ArgumentOutOfRangeException("arrayIndex"' "Offset and length were out of bounds for the array or count is greater than the number of elements from index to the end of the source collection."); " is 202.
Long Statement,Gonzo,GapBuffer<T>,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\GabBufferEnumerator.cs,CopyTo,The length of the statement  "                throw new ArgumentException("Offset and length were out of bounds for the array or count is greater than the number of elements from index to the end of the source collection."' "arrayIndex"); " is 192.
Long Statement,Gonzo,GapBuffer<T>,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\GabBufferEnumerator.cs,RemoveRange,The length of the statement  "                throw new ArgumentOutOfRangeException("count"' "Count must be positive and count must refer to a location within the string/array/collection."); " is 144.
Long Statement,Gonzo.Dialogs,UIDialog,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\UIDialog.cs,Draw,The length of the statement  "                Image.DrawTextureTo(SBatch' Image.Slicer.TCenter_Scale' Image.Slicer.TCenter' Image.Position + new Vector2(Image.Slicer.LeftPadding' 0)' Depth); " is 144.
Long Statement,Gonzo.Dialogs,UIDialog,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\UIDialog.cs,Draw,The length of the statement  "                Image.DrawTextureTo(SBatch' null' Image.Slicer.TRight' Image.Position + new Vector2(Image.Slicer.Width - Image.Slicer.RightPadding' 0)' Depth); " is 143.
Long Statement,Gonzo.Dialogs,UIDialog,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\UIDialog.cs,Draw,The length of the statement  "                Image.DrawTextureTo(SBatch' Image.Slicer.CLeft_Scale' Image.Slicer.CLeft' Image.Position + new Vector2(0' Image.Slicer.TopPadding)' null); " is 138.
Long Statement,Gonzo.Dialogs,UIDialog,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\UIDialog.cs,Draw,The length of the statement  "                Image.DrawTextureTo(SBatch' Image.Slicer.CCenter_Scale' Image.Slicer.CCenter' Image.Position + new Vector2(Image.Slicer.LeftPadding' Image.Slicer.TopPadding)' Depth); " is 166.
Long Statement,Gonzo.Dialogs,UIDialog,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\UIDialog.cs,Draw,The length of the statement  "                Image.DrawTextureTo(SBatch' Image.Slicer.CRight_Scale' Image.Slicer.CRight' Image.Position + new Vector2(Image.Slicer.Width - Image.Slicer.RightPadding' Image.Slicer.TopPadding)' Depth); " is 186.
Long Statement,Gonzo.Dialogs,UIDialog,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\UIDialog.cs,Draw,The length of the statement  "                Image.DrawTextureTo(SBatch' Image.Slicer.BCenter_Scale' Image.Slicer.BCenter' Image.Position + new Vector2(Image.Slicer.LeftPadding' BottomY)' Depth); " is 150.
Long Statement,Gonzo.Dialogs,UIDialog,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\UIDialog.cs,Draw,The length of the statement  "                Image.DrawTextureTo(SBatch' null' Image.Slicer.BRight' Image.Position + new Vector2(Image.Slicer.Width - Image.Slicer.RightPadding' BottomY)' Depth); " is 149.
Long Statement,Gonzo.Elements,UITextEdit,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UITextEdit.cs,Draw,The length of the statement  "                Image.DrawTextureTo(SBatch' Image.Slicer.TCenter_Scale' Image.Slicer.TCenter' Image.Position + new Vector2(Image.Slicer.LeftPadding' 0)' Depth); " is 144.
Long Statement,Gonzo.Elements,UITextEdit,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UITextEdit.cs,Draw,The length of the statement  "                Image.DrawTextureTo(SBatch' null' Image.Slicer.TRight' Image.Position + new Vector2(Image.Slicer.Width - Image.Slicer.RightPadding' 0)' Depth); " is 143.
Long Statement,Gonzo.Elements,UITextEdit,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UITextEdit.cs,Draw,The length of the statement  "                Image.DrawTextureTo(SBatch' Image.Slicer.CLeft_Scale' Image.Slicer.CLeft' Image.Position + new Vector2(0' Image.Slicer.TopPadding)' null); " is 138.
Long Statement,Gonzo.Elements,UITextEdit,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UITextEdit.cs,Draw,The length of the statement  "                Image.DrawTextureTo(SBatch' Image.Slicer.CCenter_Scale' Image.Slicer.CCenter' Image.Position + new Vector2(Image.Slicer.LeftPadding' Image.Slicer.TopPadding)' Depth); " is 166.
Long Statement,Gonzo.Elements,UITextEdit,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UITextEdit.cs,Draw,The length of the statement  "                Image.DrawTextureTo(SBatch' Image.Slicer.CRight_Scale' Image.Slicer.CRight' Image.Position + new Vector2(Image.Slicer.Width - Image.Slicer.RightPadding' Image.Slicer.TopPadding)' Depth); " is 186.
Long Statement,Gonzo.Elements,UITextEdit,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UITextEdit.cs,Draw,The length of the statement  "                Image.DrawTextureTo(SBatch' Image.Slicer.BCenter_Scale' Image.Slicer.BCenter' Image.Position + new Vector2(Image.Slicer.LeftPadding' BottomY)' Depth); " is 150.
Long Statement,Gonzo.Elements,UITextEdit,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UITextEdit.cs,Draw,The length of the statement  "                Image.DrawTextureTo(SBatch' null' Image.Slicer.BRight' Image.Position + new Vector2(Image.Slicer.Width - Image.Slicer.RightPadding' BottomY)' Depth); " is 149.
Long Statement,Gonzo.Elements,UIButton,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,DrawBorder,The length of the statement  "            SBatch.Draw(pixel' new Rectangle(rectangleToDraw.X' rectangleToDraw.Y' rectangleToDraw.Width' thicknessOfBorder)' borderColor); " is 127.
Long Statement,Gonzo.Elements,UIButton,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,DrawBorder,The length of the statement  "            SBatch.Draw(pixel' new Rectangle(rectangleToDraw.X' rectangleToDraw.Y' thicknessOfBorder' rectangleToDraw.Height)' borderColor); " is 128.
Complex Conditional,Gonzo.Elements,UIElement,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIElement.cs,PixelCheck,The conditional expression  "pixelPosition.X >= 0 && pixelPosition.X < Width &&                  pixelPosition.Y >= 0 && pixelPosition.Y < Image.Texture.Height"  is complex.
Magic Number,Gonzo,GapBuffer<T>,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\GabBufferEnumerator.cs,TrimExcess,The following statement contains a magic number: int threshold = (int)(_buffer.Length * 0.9);
Magic Number,Gonzo,GapBuffer<T>,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\GabBufferEnumerator.cs,EnsureGapCapacity,The following statement contains a magic number: int newCapacity = (Count + required) * 2;
Magic Number,Gonzo,Resolution,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Resolution.cs,ResetViewport,The following statement contains a magic number: int height = (int)(width / targetAspectRatio + .5f);
Magic Number,Gonzo,Resolution,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Resolution.cs,ResetViewport,The following statement contains a magic number: width = (int)(height * targetAspectRatio + .5f);
Magic Number,Gonzo,Resolution,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Resolution.cs,ResetViewport,The following statement contains a magic number: viewport.X = (_Device.PreferredBackBufferWidth / 2) - (width / 2);
Magic Number,Gonzo,Resolution,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Resolution.cs,ResetViewport,The following statement contains a magic number: viewport.X = (_Device.PreferredBackBufferWidth / 2) - (width / 2);
Magic Number,Gonzo,Resolution,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Resolution.cs,ResetViewport,The following statement contains a magic number: viewport.Y = (_Device.PreferredBackBufferHeight / 2) - (height / 2);
Magic Number,Gonzo,Resolution,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Resolution.cs,ResetViewport,The following statement contains a magic number: viewport.Y = (_Device.PreferredBackBufferHeight / 2) - (height / 2);
Magic Number,Gonzo,TreeWalker,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\TreeWalker.cs,WalkTree,The following statement contains a magic number: switch (NType)              {                  case NodeType.DefineImage: //Defines an image and loads a texture for it.                      DefineImageNode ImgNode = (DefineImageNode)UINode.GetNode(node);                      UIImage Img = new UIImage(ImgNode' m_Screen);                      Result.Elements.Add(ImgNode.Name' Img);                      break;                  case NodeType.DefineString: //Defines a string with a name.                      DefineStringNode StrNode = (DefineStringNode)UINode.GetNode(node);                      Result.Strings.Add(StrNode.Name' StringManager.StrTable(State.CurrentStringTable)[StrNode.StrIndex]);                      break;                  case NodeType.AddButton: //Defines a button.                      AddButtonNode ButtonNode = (AddButtonNode)UINode.GetNode(node);                      UIButton Btn = new UIButton(ButtonNode' Result' m_Screen);                      Result.Elements.Add(ButtonNode.Name' Btn);                        break;                  case NodeType.AddText:                      AddTextNode TextNode = (AddTextNode)UINode.GetNode(node);                      UILabel Lbl = new UILabel(TextNode' Result' m_Screen);                      Result.Elements.Add(TextNode.Name' Lbl);                      break;                  case NodeType.AddTextEdit:                      AddTextEditNode TextEditNode = (AddTextEditNode)UINode.GetNode(node);                      UITextEdit Txt = new UITextEdit(TextEditNode' State' m_Screen);                      Result.Elements.Add(TextEditNode.Name' Txt);                      break;                  case NodeType.AddSlider:                      AddSliderNode SliderNode = (AddSliderNode)UINode.GetNode(node);                      UISlider Slider = new UISlider(SliderNode' State' m_Screen);                      Result.Elements.Add(SliderNode.Name' Slider);                      break;                  case NodeType.SetSharedProperties: //Assigns a bunch of shared properties to declarations following the statement.                      State.InSharedPropertiesGroup = true;                      SetSharedPropsNode SharedPropsNode = (SetSharedPropsNode)UINode.GetNode(node);                        if (SharedPropsNode.StringTable != null)                          State.CurrentStringTable = (int)SharedPropsNode.StringTable;                        if (SharedPropsNode.ControlPosition != null)                      {                          State.Position[0] = SharedPropsNode.ControlPosition.Numbers[0];                          State.Position[1] = SharedPropsNode.ControlPosition.Numbers[1];                          break;                      }                        if (SharedPropsNode.Color != null)                      {                          State.Color = new Color                          {                              R = (byte)SharedPropsNode.Color.Numbers[0]'                              G = (byte)SharedPropsNode.Color.Numbers[1]'                              B = (byte)SharedPropsNode.Color.Numbers[2]                          };                      }                        if (SharedPropsNode.TextColor != null)                      {                          State.TextColor = new Color                          {                              R = (byte)SharedPropsNode.TextColor.Numbers[0]'                              G = (byte)SharedPropsNode.TextColor.Numbers[1]'                              B = (byte)SharedPropsNode.TextColor.Numbers[2]                          };                      }                        if (SharedPropsNode.TextColorSelected != null)                      {                          State.TextColorSelected = new Color                          {                              R = (byte)SharedPropsNode.TextColorSelected.Numbers[0]'                              G = (byte)SharedPropsNode.TextColorSelected.Numbers[1]'                              B = (byte)SharedPropsNode.TextColorSelected.Numbers[2]                          };                      }                        if (SharedPropsNode.TextColorHighlighted != null)                      {                          State.TextColorHighlighted = new Color                          {                              R = (byte)SharedPropsNode.TextColorHighlighted.Numbers[0]'                              G = (byte)SharedPropsNode.TextColorHighlighted.Numbers[1]'                              B = (byte)SharedPropsNode.TextColorHighlighted.Numbers[2]                          };                      }                        if (SharedPropsNode.TextColorDisabled != null)                      {                          State.TextColorDisabled = new Color                          {                              R = (byte)SharedPropsNode.TextColorDisabled.Numbers[0]'                              G = (byte)SharedPropsNode.TextColorDisabled.Numbers[1]'                              B = (byte)SharedPropsNode.TextColorDisabled.Numbers[2]                          };                      }                        if (SharedPropsNode.BackColor != null)                      {                          State.BackColor = new Color                          {                              R = (byte)SharedPropsNode.BackColor.Numbers[0]'                              G = (byte)SharedPropsNode.BackColor.Numbers[1]'                              B = (byte)SharedPropsNode.BackColor.Numbers[2]                          };                      }                        if (SharedPropsNode.CursorColor != null)                      {                          State.CursorColor = new Color                          {                              R = (byte)SharedPropsNode.CursorColor.Numbers[0]'                              G = (byte)SharedPropsNode.CursorColor.Numbers[1]'                              B = (byte)SharedPropsNode.CursorColor.Numbers[2]                          };                      }                        if(SharedPropsNode.FrameColor != null)                      {                          State.FrameColor = new Color                          {                              R = (byte)SharedPropsNode.FrameColor.Numbers[0]'                              G = (byte)SharedPropsNode.FrameColor.Numbers[1]'                              B = (byte)SharedPropsNode.FrameColor.Numbers[2]                          };                      }                        if (SharedPropsNode.TextButton)                          State.TextButton = true;                        if (SharedPropsNode.Opaque != null)                          State.IsOpaque = (SharedPropsNode.Opaque == 1) ? true : false;                        if (SharedPropsNode.Transparent != null)                          State.IsTransparent = (SharedPropsNode.Transparent == 1) ? true : false;                        if (SharedPropsNode.Alignment != null)                          State.Alignment = (int)SharedPropsNode.Alignment;                        if (SharedPropsNode.Image != "")                          State.Image = SharedPropsNode.Image;                        if (SharedPropsNode.Tooltip != "")                          State.Tooltip = SharedPropsNode.Tooltip;                        if (SharedPropsNode.Text != "")                          State.Caption = SharedPropsNode.Text;                        if (SharedPropsNode.Size != null)                          State.Size = new Vector2(SharedPropsNode.Size.Numbers[0]' SharedPropsNode.Size.Numbers[1]);                        if (SharedPropsNode.Orientation != null)                          State.Orientation = (int)SharedPropsNode.Orientation;                        if (SharedPropsNode.Font != null)                          State.Font = (int)SharedPropsNode.Font;                        if (SharedPropsNode.Opaque != null)                          State.Opaque = (int)SharedPropsNode.Opaque;                        break;                  case NodeType.SetControlProperties: //Sets a bunch of properties to a specified control.                      SetControlPropsNode ControlPropsNode = (SetControlPropsNode)UINode.GetNode(node);                        UIControl Ctrl = new UIControl(ControlPropsNode' m_Screen' State);                      Result.Controls.Add(ControlPropsNode.Control' Ctrl);                        if (State.InSharedPropertiesGroup)                      {                          UIElement Test = new UIElement(m_Screen' null);                          //Script implicitly created an object... :\                          if (!Result.Elements.TryGetValue(ControlPropsNode.Control' out Test))                          {                              Result.Elements.Add(ControlPropsNode.Control' new UIElement(m_Screen' null));                                if (Ctrl.Image != null)                                  Result.Elements[ControlPropsNode.Control].Image = new UIImage(Ctrl.Image);                                Result.Elements[ControlPropsNode.Control].Position = Ctrl.Position;                          }                      }                        break;                  case NodeType.End:                      State.InSharedPropertiesGroup = false;                      State.Image = ""; //Reset                      State.TextButton = false; //Reset                       State.Color = new Color();                      State.Caption = "";                      State.Size = new Vector2(0' 0);                      State.Alignment = 0;                      State.Font = 0;                      //TODO: Reset more?                      break;              }
Magic Number,Gonzo,TreeWalker,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\TreeWalker.cs,WalkTree,The following statement contains a magic number: switch (NType)              {                  case NodeType.DefineImage: //Defines an image and loads a texture for it.                      DefineImageNode ImgNode = (DefineImageNode)UINode.GetNode(node);                      UIImage Img = new UIImage(ImgNode' m_Screen);                      Result.Elements.Add(ImgNode.Name' Img);                      break;                  case NodeType.DefineString: //Defines a string with a name.                      DefineStringNode StrNode = (DefineStringNode)UINode.GetNode(node);                      Result.Strings.Add(StrNode.Name' StringManager.StrTable(State.CurrentStringTable)[StrNode.StrIndex]);                      break;                  case NodeType.AddButton: //Defines a button.                      AddButtonNode ButtonNode = (AddButtonNode)UINode.GetNode(node);                      UIButton Btn = new UIButton(ButtonNode' Result' m_Screen);                      Result.Elements.Add(ButtonNode.Name' Btn);                        break;                  case NodeType.AddText:                      AddTextNode TextNode = (AddTextNode)UINode.GetNode(node);                      UILabel Lbl = new UILabel(TextNode' Result' m_Screen);                      Result.Elements.Add(TextNode.Name' Lbl);                      break;                  case NodeType.AddTextEdit:                      AddTextEditNode TextEditNode = (AddTextEditNode)UINode.GetNode(node);                      UITextEdit Txt = new UITextEdit(TextEditNode' State' m_Screen);                      Result.Elements.Add(TextEditNode.Name' Txt);                      break;                  case NodeType.AddSlider:                      AddSliderNode SliderNode = (AddSliderNode)UINode.GetNode(node);                      UISlider Slider = new UISlider(SliderNode' State' m_Screen);                      Result.Elements.Add(SliderNode.Name' Slider);                      break;                  case NodeType.SetSharedProperties: //Assigns a bunch of shared properties to declarations following the statement.                      State.InSharedPropertiesGroup = true;                      SetSharedPropsNode SharedPropsNode = (SetSharedPropsNode)UINode.GetNode(node);                        if (SharedPropsNode.StringTable != null)                          State.CurrentStringTable = (int)SharedPropsNode.StringTable;                        if (SharedPropsNode.ControlPosition != null)                      {                          State.Position[0] = SharedPropsNode.ControlPosition.Numbers[0];                          State.Position[1] = SharedPropsNode.ControlPosition.Numbers[1];                          break;                      }                        if (SharedPropsNode.Color != null)                      {                          State.Color = new Color                          {                              R = (byte)SharedPropsNode.Color.Numbers[0]'                              G = (byte)SharedPropsNode.Color.Numbers[1]'                              B = (byte)SharedPropsNode.Color.Numbers[2]                          };                      }                        if (SharedPropsNode.TextColor != null)                      {                          State.TextColor = new Color                          {                              R = (byte)SharedPropsNode.TextColor.Numbers[0]'                              G = (byte)SharedPropsNode.TextColor.Numbers[1]'                              B = (byte)SharedPropsNode.TextColor.Numbers[2]                          };                      }                        if (SharedPropsNode.TextColorSelected != null)                      {                          State.TextColorSelected = new Color                          {                              R = (byte)SharedPropsNode.TextColorSelected.Numbers[0]'                              G = (byte)SharedPropsNode.TextColorSelected.Numbers[1]'                              B = (byte)SharedPropsNode.TextColorSelected.Numbers[2]                          };                      }                        if (SharedPropsNode.TextColorHighlighted != null)                      {                          State.TextColorHighlighted = new Color                          {                              R = (byte)SharedPropsNode.TextColorHighlighted.Numbers[0]'                              G = (byte)SharedPropsNode.TextColorHighlighted.Numbers[1]'                              B = (byte)SharedPropsNode.TextColorHighlighted.Numbers[2]                          };                      }                        if (SharedPropsNode.TextColorDisabled != null)                      {                          State.TextColorDisabled = new Color                          {                              R = (byte)SharedPropsNode.TextColorDisabled.Numbers[0]'                              G = (byte)SharedPropsNode.TextColorDisabled.Numbers[1]'                              B = (byte)SharedPropsNode.TextColorDisabled.Numbers[2]                          };                      }                        if (SharedPropsNode.BackColor != null)                      {                          State.BackColor = new Color                          {                              R = (byte)SharedPropsNode.BackColor.Numbers[0]'                              G = (byte)SharedPropsNode.BackColor.Numbers[1]'                              B = (byte)SharedPropsNode.BackColor.Numbers[2]                          };                      }                        if (SharedPropsNode.CursorColor != null)                      {                          State.CursorColor = new Color                          {                              R = (byte)SharedPropsNode.CursorColor.Numbers[0]'                              G = (byte)SharedPropsNode.CursorColor.Numbers[1]'                              B = (byte)SharedPropsNode.CursorColor.Numbers[2]                          };                      }                        if(SharedPropsNode.FrameColor != null)                      {                          State.FrameColor = new Color                          {                              R = (byte)SharedPropsNode.FrameColor.Numbers[0]'                              G = (byte)SharedPropsNode.FrameColor.Numbers[1]'                              B = (byte)SharedPropsNode.FrameColor.Numbers[2]                          };                      }                        if (SharedPropsNode.TextButton)                          State.TextButton = true;                        if (SharedPropsNode.Opaque != null)                          State.IsOpaque = (SharedPropsNode.Opaque == 1) ? true : false;                        if (SharedPropsNode.Transparent != null)                          State.IsTransparent = (SharedPropsNode.Transparent == 1) ? true : false;                        if (SharedPropsNode.Alignment != null)                          State.Alignment = (int)SharedPropsNode.Alignment;                        if (SharedPropsNode.Image != "")                          State.Image = SharedPropsNode.Image;                        if (SharedPropsNode.Tooltip != "")                          State.Tooltip = SharedPropsNode.Tooltip;                        if (SharedPropsNode.Text != "")                          State.Caption = SharedPropsNode.Text;                        if (SharedPropsNode.Size != null)                          State.Size = new Vector2(SharedPropsNode.Size.Numbers[0]' SharedPropsNode.Size.Numbers[1]);                        if (SharedPropsNode.Orientation != null)                          State.Orientation = (int)SharedPropsNode.Orientation;                        if (SharedPropsNode.Font != null)                          State.Font = (int)SharedPropsNode.Font;                        if (SharedPropsNode.Opaque != null)                          State.Opaque = (int)SharedPropsNode.Opaque;                        break;                  case NodeType.SetControlProperties: //Sets a bunch of properties to a specified control.                      SetControlPropsNode ControlPropsNode = (SetControlPropsNode)UINode.GetNode(node);                        UIControl Ctrl = new UIControl(ControlPropsNode' m_Screen' State);                      Result.Controls.Add(ControlPropsNode.Control' Ctrl);                        if (State.InSharedPropertiesGroup)                      {                          UIElement Test = new UIElement(m_Screen' null);                          //Script implicitly created an object... :\                          if (!Result.Elements.TryGetValue(ControlPropsNode.Control' out Test))                          {                              Result.Elements.Add(ControlPropsNode.Control' new UIElement(m_Screen' null));                                if (Ctrl.Image != null)                                  Result.Elements[ControlPropsNode.Control].Image = new UIImage(Ctrl.Image);                                Result.Elements[ControlPropsNode.Control].Position = Ctrl.Position;                          }                      }                        break;                  case NodeType.End:                      State.InSharedPropertiesGroup = false;                      State.Image = ""; //Reset                      State.TextButton = false; //Reset                       State.Color = new Color();                      State.Caption = "";                      State.Size = new Vector2(0' 0);                      State.Alignment = 0;                      State.Font = 0;                      //TODO: Reset more?                      break;              }
Magic Number,Gonzo,TreeWalker,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\TreeWalker.cs,WalkTree,The following statement contains a magic number: switch (NType)              {                  case NodeType.DefineImage: //Defines an image and loads a texture for it.                      DefineImageNode ImgNode = (DefineImageNode)UINode.GetNode(node);                      UIImage Img = new UIImage(ImgNode' m_Screen);                      Result.Elements.Add(ImgNode.Name' Img);                      break;                  case NodeType.DefineString: //Defines a string with a name.                      DefineStringNode StrNode = (DefineStringNode)UINode.GetNode(node);                      Result.Strings.Add(StrNode.Name' StringManager.StrTable(State.CurrentStringTable)[StrNode.StrIndex]);                      break;                  case NodeType.AddButton: //Defines a button.                      AddButtonNode ButtonNode = (AddButtonNode)UINode.GetNode(node);                      UIButton Btn = new UIButton(ButtonNode' Result' m_Screen);                      Result.Elements.Add(ButtonNode.Name' Btn);                        break;                  case NodeType.AddText:                      AddTextNode TextNode = (AddTextNode)UINode.GetNode(node);                      UILabel Lbl = new UILabel(TextNode' Result' m_Screen);                      Result.Elements.Add(TextNode.Name' Lbl);                      break;                  case NodeType.AddTextEdit:                      AddTextEditNode TextEditNode = (AddTextEditNode)UINode.GetNode(node);                      UITextEdit Txt = new UITextEdit(TextEditNode' State' m_Screen);                      Result.Elements.Add(TextEditNode.Name' Txt);                      break;                  case NodeType.AddSlider:                      AddSliderNode SliderNode = (AddSliderNode)UINode.GetNode(node);                      UISlider Slider = new UISlider(SliderNode' State' m_Screen);                      Result.Elements.Add(SliderNode.Name' Slider);                      break;                  case NodeType.SetSharedProperties: //Assigns a bunch of shared properties to declarations following the statement.                      State.InSharedPropertiesGroup = true;                      SetSharedPropsNode SharedPropsNode = (SetSharedPropsNode)UINode.GetNode(node);                        if (SharedPropsNode.StringTable != null)                          State.CurrentStringTable = (int)SharedPropsNode.StringTable;                        if (SharedPropsNode.ControlPosition != null)                      {                          State.Position[0] = SharedPropsNode.ControlPosition.Numbers[0];                          State.Position[1] = SharedPropsNode.ControlPosition.Numbers[1];                          break;                      }                        if (SharedPropsNode.Color != null)                      {                          State.Color = new Color                          {                              R = (byte)SharedPropsNode.Color.Numbers[0]'                              G = (byte)SharedPropsNode.Color.Numbers[1]'                              B = (byte)SharedPropsNode.Color.Numbers[2]                          };                      }                        if (SharedPropsNode.TextColor != null)                      {                          State.TextColor = new Color                          {                              R = (byte)SharedPropsNode.TextColor.Numbers[0]'                              G = (byte)SharedPropsNode.TextColor.Numbers[1]'                              B = (byte)SharedPropsNode.TextColor.Numbers[2]                          };                      }                        if (SharedPropsNode.TextColorSelected != null)                      {                          State.TextColorSelected = new Color                          {                              R = (byte)SharedPropsNode.TextColorSelected.Numbers[0]'                              G = (byte)SharedPropsNode.TextColorSelected.Numbers[1]'                              B = (byte)SharedPropsNode.TextColorSelected.Numbers[2]                          };                      }                        if (SharedPropsNode.TextColorHighlighted != null)                      {                          State.TextColorHighlighted = new Color                          {                              R = (byte)SharedPropsNode.TextColorHighlighted.Numbers[0]'                              G = (byte)SharedPropsNode.TextColorHighlighted.Numbers[1]'                              B = (byte)SharedPropsNode.TextColorHighlighted.Numbers[2]                          };                      }                        if (SharedPropsNode.TextColorDisabled != null)                      {                          State.TextColorDisabled = new Color                          {                              R = (byte)SharedPropsNode.TextColorDisabled.Numbers[0]'                              G = (byte)SharedPropsNode.TextColorDisabled.Numbers[1]'                              B = (byte)SharedPropsNode.TextColorDisabled.Numbers[2]                          };                      }                        if (SharedPropsNode.BackColor != null)                      {                          State.BackColor = new Color                          {                              R = (byte)SharedPropsNode.BackColor.Numbers[0]'                              G = (byte)SharedPropsNode.BackColor.Numbers[1]'                              B = (byte)SharedPropsNode.BackColor.Numbers[2]                          };                      }                        if (SharedPropsNode.CursorColor != null)                      {                          State.CursorColor = new Color                          {                              R = (byte)SharedPropsNode.CursorColor.Numbers[0]'                              G = (byte)SharedPropsNode.CursorColor.Numbers[1]'                              B = (byte)SharedPropsNode.CursorColor.Numbers[2]                          };                      }                        if(SharedPropsNode.FrameColor != null)                      {                          State.FrameColor = new Color                          {                              R = (byte)SharedPropsNode.FrameColor.Numbers[0]'                              G = (byte)SharedPropsNode.FrameColor.Numbers[1]'                              B = (byte)SharedPropsNode.FrameColor.Numbers[2]                          };                      }                        if (SharedPropsNode.TextButton)                          State.TextButton = true;                        if (SharedPropsNode.Opaque != null)                          State.IsOpaque = (SharedPropsNode.Opaque == 1) ? true : false;                        if (SharedPropsNode.Transparent != null)                          State.IsTransparent = (SharedPropsNode.Transparent == 1) ? true : false;                        if (SharedPropsNode.Alignment != null)                          State.Alignment = (int)SharedPropsNode.Alignment;                        if (SharedPropsNode.Image != "")                          State.Image = SharedPropsNode.Image;                        if (SharedPropsNode.Tooltip != "")                          State.Tooltip = SharedPropsNode.Tooltip;                        if (SharedPropsNode.Text != "")                          State.Caption = SharedPropsNode.Text;                        if (SharedPropsNode.Size != null)                          State.Size = new Vector2(SharedPropsNode.Size.Numbers[0]' SharedPropsNode.Size.Numbers[1]);                        if (SharedPropsNode.Orientation != null)                          State.Orientation = (int)SharedPropsNode.Orientation;                        if (SharedPropsNode.Font != null)                          State.Font = (int)SharedPropsNode.Font;                        if (SharedPropsNode.Opaque != null)                          State.Opaque = (int)SharedPropsNode.Opaque;                        break;                  case NodeType.SetControlProperties: //Sets a bunch of properties to a specified control.                      SetControlPropsNode ControlPropsNode = (SetControlPropsNode)UINode.GetNode(node);                        UIControl Ctrl = new UIControl(ControlPropsNode' m_Screen' State);                      Result.Controls.Add(ControlPropsNode.Control' Ctrl);                        if (State.InSharedPropertiesGroup)                      {                          UIElement Test = new UIElement(m_Screen' null);                          //Script implicitly created an object... :\                          if (!Result.Elements.TryGetValue(ControlPropsNode.Control' out Test))                          {                              Result.Elements.Add(ControlPropsNode.Control' new UIElement(m_Screen' null));                                if (Ctrl.Image != null)                                  Result.Elements[ControlPropsNode.Control].Image = new UIImage(Ctrl.Image);                                Result.Elements[ControlPropsNode.Control].Position = Ctrl.Position;                          }                      }                        break;                  case NodeType.End:                      State.InSharedPropertiesGroup = false;                      State.Image = ""; //Reset                      State.TextButton = false; //Reset                       State.Color = new Color();                      State.Caption = "";                      State.Size = new Vector2(0' 0);                      State.Alignment = 0;                      State.Font = 0;                      //TODO: Reset more?                      break;              }
Magic Number,Gonzo,TreeWalker,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\TreeWalker.cs,WalkTree,The following statement contains a magic number: switch (NType)              {                  case NodeType.DefineImage: //Defines an image and loads a texture for it.                      DefineImageNode ImgNode = (DefineImageNode)UINode.GetNode(node);                      UIImage Img = new UIImage(ImgNode' m_Screen);                      Result.Elements.Add(ImgNode.Name' Img);                      break;                  case NodeType.DefineString: //Defines a string with a name.                      DefineStringNode StrNode = (DefineStringNode)UINode.GetNode(node);                      Result.Strings.Add(StrNode.Name' StringManager.StrTable(State.CurrentStringTable)[StrNode.StrIndex]);                      break;                  case NodeType.AddButton: //Defines a button.                      AddButtonNode ButtonNode = (AddButtonNode)UINode.GetNode(node);                      UIButton Btn = new UIButton(ButtonNode' Result' m_Screen);                      Result.Elements.Add(ButtonNode.Name' Btn);                        break;                  case NodeType.AddText:                      AddTextNode TextNode = (AddTextNode)UINode.GetNode(node);                      UILabel Lbl = new UILabel(TextNode' Result' m_Screen);                      Result.Elements.Add(TextNode.Name' Lbl);                      break;                  case NodeType.AddTextEdit:                      AddTextEditNode TextEditNode = (AddTextEditNode)UINode.GetNode(node);                      UITextEdit Txt = new UITextEdit(TextEditNode' State' m_Screen);                      Result.Elements.Add(TextEditNode.Name' Txt);                      break;                  case NodeType.AddSlider:                      AddSliderNode SliderNode = (AddSliderNode)UINode.GetNode(node);                      UISlider Slider = new UISlider(SliderNode' State' m_Screen);                      Result.Elements.Add(SliderNode.Name' Slider);                      break;                  case NodeType.SetSharedProperties: //Assigns a bunch of shared properties to declarations following the statement.                      State.InSharedPropertiesGroup = true;                      SetSharedPropsNode SharedPropsNode = (SetSharedPropsNode)UINode.GetNode(node);                        if (SharedPropsNode.StringTable != null)                          State.CurrentStringTable = (int)SharedPropsNode.StringTable;                        if (SharedPropsNode.ControlPosition != null)                      {                          State.Position[0] = SharedPropsNode.ControlPosition.Numbers[0];                          State.Position[1] = SharedPropsNode.ControlPosition.Numbers[1];                          break;                      }                        if (SharedPropsNode.Color != null)                      {                          State.Color = new Color                          {                              R = (byte)SharedPropsNode.Color.Numbers[0]'                              G = (byte)SharedPropsNode.Color.Numbers[1]'                              B = (byte)SharedPropsNode.Color.Numbers[2]                          };                      }                        if (SharedPropsNode.TextColor != null)                      {                          State.TextColor = new Color                          {                              R = (byte)SharedPropsNode.TextColor.Numbers[0]'                              G = (byte)SharedPropsNode.TextColor.Numbers[1]'                              B = (byte)SharedPropsNode.TextColor.Numbers[2]                          };                      }                        if (SharedPropsNode.TextColorSelected != null)                      {                          State.TextColorSelected = new Color                          {                              R = (byte)SharedPropsNode.TextColorSelected.Numbers[0]'                              G = (byte)SharedPropsNode.TextColorSelected.Numbers[1]'                              B = (byte)SharedPropsNode.TextColorSelected.Numbers[2]                          };                      }                        if (SharedPropsNode.TextColorHighlighted != null)                      {                          State.TextColorHighlighted = new Color                          {                              R = (byte)SharedPropsNode.TextColorHighlighted.Numbers[0]'                              G = (byte)SharedPropsNode.TextColorHighlighted.Numbers[1]'                              B = (byte)SharedPropsNode.TextColorHighlighted.Numbers[2]                          };                      }                        if (SharedPropsNode.TextColorDisabled != null)                      {                          State.TextColorDisabled = new Color                          {                              R = (byte)SharedPropsNode.TextColorDisabled.Numbers[0]'                              G = (byte)SharedPropsNode.TextColorDisabled.Numbers[1]'                              B = (byte)SharedPropsNode.TextColorDisabled.Numbers[2]                          };                      }                        if (SharedPropsNode.BackColor != null)                      {                          State.BackColor = new Color                          {                              R = (byte)SharedPropsNode.BackColor.Numbers[0]'                              G = (byte)SharedPropsNode.BackColor.Numbers[1]'                              B = (byte)SharedPropsNode.BackColor.Numbers[2]                          };                      }                        if (SharedPropsNode.CursorColor != null)                      {                          State.CursorColor = new Color                          {                              R = (byte)SharedPropsNode.CursorColor.Numbers[0]'                              G = (byte)SharedPropsNode.CursorColor.Numbers[1]'                              B = (byte)SharedPropsNode.CursorColor.Numbers[2]                          };                      }                        if(SharedPropsNode.FrameColor != null)                      {                          State.FrameColor = new Color                          {                              R = (byte)SharedPropsNode.FrameColor.Numbers[0]'                              G = (byte)SharedPropsNode.FrameColor.Numbers[1]'                              B = (byte)SharedPropsNode.FrameColor.Numbers[2]                          };                      }                        if (SharedPropsNode.TextButton)                          State.TextButton = true;                        if (SharedPropsNode.Opaque != null)                          State.IsOpaque = (SharedPropsNode.Opaque == 1) ? true : false;                        if (SharedPropsNode.Transparent != null)                          State.IsTransparent = (SharedPropsNode.Transparent == 1) ? true : false;                        if (SharedPropsNode.Alignment != null)                          State.Alignment = (int)SharedPropsNode.Alignment;                        if (SharedPropsNode.Image != "")                          State.Image = SharedPropsNode.Image;                        if (SharedPropsNode.Tooltip != "")                          State.Tooltip = SharedPropsNode.Tooltip;                        if (SharedPropsNode.Text != "")                          State.Caption = SharedPropsNode.Text;                        if (SharedPropsNode.Size != null)                          State.Size = new Vector2(SharedPropsNode.Size.Numbers[0]' SharedPropsNode.Size.Numbers[1]);                        if (SharedPropsNode.Orientation != null)                          State.Orientation = (int)SharedPropsNode.Orientation;                        if (SharedPropsNode.Font != null)                          State.Font = (int)SharedPropsNode.Font;                        if (SharedPropsNode.Opaque != null)                          State.Opaque = (int)SharedPropsNode.Opaque;                        break;                  case NodeType.SetControlProperties: //Sets a bunch of properties to a specified control.                      SetControlPropsNode ControlPropsNode = (SetControlPropsNode)UINode.GetNode(node);                        UIControl Ctrl = new UIControl(ControlPropsNode' m_Screen' State);                      Result.Controls.Add(ControlPropsNode.Control' Ctrl);                        if (State.InSharedPropertiesGroup)                      {                          UIElement Test = new UIElement(m_Screen' null);                          //Script implicitly created an object... :\                          if (!Result.Elements.TryGetValue(ControlPropsNode.Control' out Test))                          {                              Result.Elements.Add(ControlPropsNode.Control' new UIElement(m_Screen' null));                                if (Ctrl.Image != null)                                  Result.Elements[ControlPropsNode.Control].Image = new UIImage(Ctrl.Image);                                Result.Elements[ControlPropsNode.Control].Position = Ctrl.Position;                          }                      }                        break;                  case NodeType.End:                      State.InSharedPropertiesGroup = false;                      State.Image = ""; //Reset                      State.TextButton = false; //Reset                       State.Color = new Color();                      State.Caption = "";                      State.Size = new Vector2(0' 0);                      State.Alignment = 0;                      State.Font = 0;                      //TODO: Reset more?                      break;              }
Magic Number,Gonzo,TreeWalker,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\TreeWalker.cs,WalkTree,The following statement contains a magic number: switch (NType)              {                  case NodeType.DefineImage: //Defines an image and loads a texture for it.                      DefineImageNode ImgNode = (DefineImageNode)UINode.GetNode(node);                      UIImage Img = new UIImage(ImgNode' m_Screen);                      Result.Elements.Add(ImgNode.Name' Img);                      break;                  case NodeType.DefineString: //Defines a string with a name.                      DefineStringNode StrNode = (DefineStringNode)UINode.GetNode(node);                      Result.Strings.Add(StrNode.Name' StringManager.StrTable(State.CurrentStringTable)[StrNode.StrIndex]);                      break;                  case NodeType.AddButton: //Defines a button.                      AddButtonNode ButtonNode = (AddButtonNode)UINode.GetNode(node);                      UIButton Btn = new UIButton(ButtonNode' Result' m_Screen);                      Result.Elements.Add(ButtonNode.Name' Btn);                        break;                  case NodeType.AddText:                      AddTextNode TextNode = (AddTextNode)UINode.GetNode(node);                      UILabel Lbl = new UILabel(TextNode' Result' m_Screen);                      Result.Elements.Add(TextNode.Name' Lbl);                      break;                  case NodeType.AddTextEdit:                      AddTextEditNode TextEditNode = (AddTextEditNode)UINode.GetNode(node);                      UITextEdit Txt = new UITextEdit(TextEditNode' State' m_Screen);                      Result.Elements.Add(TextEditNode.Name' Txt);                      break;                  case NodeType.AddSlider:                      AddSliderNode SliderNode = (AddSliderNode)UINode.GetNode(node);                      UISlider Slider = new UISlider(SliderNode' State' m_Screen);                      Result.Elements.Add(SliderNode.Name' Slider);                      break;                  case NodeType.SetSharedProperties: //Assigns a bunch of shared properties to declarations following the statement.                      State.InSharedPropertiesGroup = true;                      SetSharedPropsNode SharedPropsNode = (SetSharedPropsNode)UINode.GetNode(node);                        if (SharedPropsNode.StringTable != null)                          State.CurrentStringTable = (int)SharedPropsNode.StringTable;                        if (SharedPropsNode.ControlPosition != null)                      {                          State.Position[0] = SharedPropsNode.ControlPosition.Numbers[0];                          State.Position[1] = SharedPropsNode.ControlPosition.Numbers[1];                          break;                      }                        if (SharedPropsNode.Color != null)                      {                          State.Color = new Color                          {                              R = (byte)SharedPropsNode.Color.Numbers[0]'                              G = (byte)SharedPropsNode.Color.Numbers[1]'                              B = (byte)SharedPropsNode.Color.Numbers[2]                          };                      }                        if (SharedPropsNode.TextColor != null)                      {                          State.TextColor = new Color                          {                              R = (byte)SharedPropsNode.TextColor.Numbers[0]'                              G = (byte)SharedPropsNode.TextColor.Numbers[1]'                              B = (byte)SharedPropsNode.TextColor.Numbers[2]                          };                      }                        if (SharedPropsNode.TextColorSelected != null)                      {                          State.TextColorSelected = new Color                          {                              R = (byte)SharedPropsNode.TextColorSelected.Numbers[0]'                              G = (byte)SharedPropsNode.TextColorSelected.Numbers[1]'                              B = (byte)SharedPropsNode.TextColorSelected.Numbers[2]                          };                      }                        if (SharedPropsNode.TextColorHighlighted != null)                      {                          State.TextColorHighlighted = new Color                          {                              R = (byte)SharedPropsNode.TextColorHighlighted.Numbers[0]'                              G = (byte)SharedPropsNode.TextColorHighlighted.Numbers[1]'                              B = (byte)SharedPropsNode.TextColorHighlighted.Numbers[2]                          };                      }                        if (SharedPropsNode.TextColorDisabled != null)                      {                          State.TextColorDisabled = new Color                          {                              R = (byte)SharedPropsNode.TextColorDisabled.Numbers[0]'                              G = (byte)SharedPropsNode.TextColorDisabled.Numbers[1]'                              B = (byte)SharedPropsNode.TextColorDisabled.Numbers[2]                          };                      }                        if (SharedPropsNode.BackColor != null)                      {                          State.BackColor = new Color                          {                              R = (byte)SharedPropsNode.BackColor.Numbers[0]'                              G = (byte)SharedPropsNode.BackColor.Numbers[1]'                              B = (byte)SharedPropsNode.BackColor.Numbers[2]                          };                      }                        if (SharedPropsNode.CursorColor != null)                      {                          State.CursorColor = new Color                          {                              R = (byte)SharedPropsNode.CursorColor.Numbers[0]'                              G = (byte)SharedPropsNode.CursorColor.Numbers[1]'                              B = (byte)SharedPropsNode.CursorColor.Numbers[2]                          };                      }                        if(SharedPropsNode.FrameColor != null)                      {                          State.FrameColor = new Color                          {                              R = (byte)SharedPropsNode.FrameColor.Numbers[0]'                              G = (byte)SharedPropsNode.FrameColor.Numbers[1]'                              B = (byte)SharedPropsNode.FrameColor.Numbers[2]                          };                      }                        if (SharedPropsNode.TextButton)                          State.TextButton = true;                        if (SharedPropsNode.Opaque != null)                          State.IsOpaque = (SharedPropsNode.Opaque == 1) ? true : false;                        if (SharedPropsNode.Transparent != null)                          State.IsTransparent = (SharedPropsNode.Transparent == 1) ? true : false;                        if (SharedPropsNode.Alignment != null)                          State.Alignment = (int)SharedPropsNode.Alignment;                        if (SharedPropsNode.Image != "")                          State.Image = SharedPropsNode.Image;                        if (SharedPropsNode.Tooltip != "")                          State.Tooltip = SharedPropsNode.Tooltip;                        if (SharedPropsNode.Text != "")                          State.Caption = SharedPropsNode.Text;                        if (SharedPropsNode.Size != null)                          State.Size = new Vector2(SharedPropsNode.Size.Numbers[0]' SharedPropsNode.Size.Numbers[1]);                        if (SharedPropsNode.Orientation != null)                          State.Orientation = (int)SharedPropsNode.Orientation;                        if (SharedPropsNode.Font != null)                          State.Font = (int)SharedPropsNode.Font;                        if (SharedPropsNode.Opaque != null)                          State.Opaque = (int)SharedPropsNode.Opaque;                        break;                  case NodeType.SetControlProperties: //Sets a bunch of properties to a specified control.                      SetControlPropsNode ControlPropsNode = (SetControlPropsNode)UINode.GetNode(node);                        UIControl Ctrl = new UIControl(ControlPropsNode' m_Screen' State);                      Result.Controls.Add(ControlPropsNode.Control' Ctrl);                        if (State.InSharedPropertiesGroup)                      {                          UIElement Test = new UIElement(m_Screen' null);                          //Script implicitly created an object... :\                          if (!Result.Elements.TryGetValue(ControlPropsNode.Control' out Test))                          {                              Result.Elements.Add(ControlPropsNode.Control' new UIElement(m_Screen' null));                                if (Ctrl.Image != null)                                  Result.Elements[ControlPropsNode.Control].Image = new UIImage(Ctrl.Image);                                Result.Elements[ControlPropsNode.Control].Position = Ctrl.Position;                          }                      }                        break;                  case NodeType.End:                      State.InSharedPropertiesGroup = false;                      State.Image = ""; //Reset                      State.TextButton = false; //Reset                       State.Color = new Color();                      State.Caption = "";                      State.Size = new Vector2(0' 0);                      State.Alignment = 0;                      State.Font = 0;                      //TODO: Reset more?                      break;              }
Magic Number,Gonzo,TreeWalker,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\TreeWalker.cs,WalkTree,The following statement contains a magic number: switch (NType)              {                  case NodeType.DefineImage: //Defines an image and loads a texture for it.                      DefineImageNode ImgNode = (DefineImageNode)UINode.GetNode(node);                      UIImage Img = new UIImage(ImgNode' m_Screen);                      Result.Elements.Add(ImgNode.Name' Img);                      break;                  case NodeType.DefineString: //Defines a string with a name.                      DefineStringNode StrNode = (DefineStringNode)UINode.GetNode(node);                      Result.Strings.Add(StrNode.Name' StringManager.StrTable(State.CurrentStringTable)[StrNode.StrIndex]);                      break;                  case NodeType.AddButton: //Defines a button.                      AddButtonNode ButtonNode = (AddButtonNode)UINode.GetNode(node);                      UIButton Btn = new UIButton(ButtonNode' Result' m_Screen);                      Result.Elements.Add(ButtonNode.Name' Btn);                        break;                  case NodeType.AddText:                      AddTextNode TextNode = (AddTextNode)UINode.GetNode(node);                      UILabel Lbl = new UILabel(TextNode' Result' m_Screen);                      Result.Elements.Add(TextNode.Name' Lbl);                      break;                  case NodeType.AddTextEdit:                      AddTextEditNode TextEditNode = (AddTextEditNode)UINode.GetNode(node);                      UITextEdit Txt = new UITextEdit(TextEditNode' State' m_Screen);                      Result.Elements.Add(TextEditNode.Name' Txt);                      break;                  case NodeType.AddSlider:                      AddSliderNode SliderNode = (AddSliderNode)UINode.GetNode(node);                      UISlider Slider = new UISlider(SliderNode' State' m_Screen);                      Result.Elements.Add(SliderNode.Name' Slider);                      break;                  case NodeType.SetSharedProperties: //Assigns a bunch of shared properties to declarations following the statement.                      State.InSharedPropertiesGroup = true;                      SetSharedPropsNode SharedPropsNode = (SetSharedPropsNode)UINode.GetNode(node);                        if (SharedPropsNode.StringTable != null)                          State.CurrentStringTable = (int)SharedPropsNode.StringTable;                        if (SharedPropsNode.ControlPosition != null)                      {                          State.Position[0] = SharedPropsNode.ControlPosition.Numbers[0];                          State.Position[1] = SharedPropsNode.ControlPosition.Numbers[1];                          break;                      }                        if (SharedPropsNode.Color != null)                      {                          State.Color = new Color                          {                              R = (byte)SharedPropsNode.Color.Numbers[0]'                              G = (byte)SharedPropsNode.Color.Numbers[1]'                              B = (byte)SharedPropsNode.Color.Numbers[2]                          };                      }                        if (SharedPropsNode.TextColor != null)                      {                          State.TextColor = new Color                          {                              R = (byte)SharedPropsNode.TextColor.Numbers[0]'                              G = (byte)SharedPropsNode.TextColor.Numbers[1]'                              B = (byte)SharedPropsNode.TextColor.Numbers[2]                          };                      }                        if (SharedPropsNode.TextColorSelected != null)                      {                          State.TextColorSelected = new Color                          {                              R = (byte)SharedPropsNode.TextColorSelected.Numbers[0]'                              G = (byte)SharedPropsNode.TextColorSelected.Numbers[1]'                              B = (byte)SharedPropsNode.TextColorSelected.Numbers[2]                          };                      }                        if (SharedPropsNode.TextColorHighlighted != null)                      {                          State.TextColorHighlighted = new Color                          {                              R = (byte)SharedPropsNode.TextColorHighlighted.Numbers[0]'                              G = (byte)SharedPropsNode.TextColorHighlighted.Numbers[1]'                              B = (byte)SharedPropsNode.TextColorHighlighted.Numbers[2]                          };                      }                        if (SharedPropsNode.TextColorDisabled != null)                      {                          State.TextColorDisabled = new Color                          {                              R = (byte)SharedPropsNode.TextColorDisabled.Numbers[0]'                              G = (byte)SharedPropsNode.TextColorDisabled.Numbers[1]'                              B = (byte)SharedPropsNode.TextColorDisabled.Numbers[2]                          };                      }                        if (SharedPropsNode.BackColor != null)                      {                          State.BackColor = new Color                          {                              R = (byte)SharedPropsNode.BackColor.Numbers[0]'                              G = (byte)SharedPropsNode.BackColor.Numbers[1]'                              B = (byte)SharedPropsNode.BackColor.Numbers[2]                          };                      }                        if (SharedPropsNode.CursorColor != null)                      {                          State.CursorColor = new Color                          {                              R = (byte)SharedPropsNode.CursorColor.Numbers[0]'                              G = (byte)SharedPropsNode.CursorColor.Numbers[1]'                              B = (byte)SharedPropsNode.CursorColor.Numbers[2]                          };                      }                        if(SharedPropsNode.FrameColor != null)                      {                          State.FrameColor = new Color                          {                              R = (byte)SharedPropsNode.FrameColor.Numbers[0]'                              G = (byte)SharedPropsNode.FrameColor.Numbers[1]'                              B = (byte)SharedPropsNode.FrameColor.Numbers[2]                          };                      }                        if (SharedPropsNode.TextButton)                          State.TextButton = true;                        if (SharedPropsNode.Opaque != null)                          State.IsOpaque = (SharedPropsNode.Opaque == 1) ? true : false;                        if (SharedPropsNode.Transparent != null)                          State.IsTransparent = (SharedPropsNode.Transparent == 1) ? true : false;                        if (SharedPropsNode.Alignment != null)                          State.Alignment = (int)SharedPropsNode.Alignment;                        if (SharedPropsNode.Image != "")                          State.Image = SharedPropsNode.Image;                        if (SharedPropsNode.Tooltip != "")                          State.Tooltip = SharedPropsNode.Tooltip;                        if (SharedPropsNode.Text != "")                          State.Caption = SharedPropsNode.Text;                        if (SharedPropsNode.Size != null)                          State.Size = new Vector2(SharedPropsNode.Size.Numbers[0]' SharedPropsNode.Size.Numbers[1]);                        if (SharedPropsNode.Orientation != null)                          State.Orientation = (int)SharedPropsNode.Orientation;                        if (SharedPropsNode.Font != null)                          State.Font = (int)SharedPropsNode.Font;                        if (SharedPropsNode.Opaque != null)                          State.Opaque = (int)SharedPropsNode.Opaque;                        break;                  case NodeType.SetControlProperties: //Sets a bunch of properties to a specified control.                      SetControlPropsNode ControlPropsNode = (SetControlPropsNode)UINode.GetNode(node);                        UIControl Ctrl = new UIControl(ControlPropsNode' m_Screen' State);                      Result.Controls.Add(ControlPropsNode.Control' Ctrl);                        if (State.InSharedPropertiesGroup)                      {                          UIElement Test = new UIElement(m_Screen' null);                          //Script implicitly created an object... :\                          if (!Result.Elements.TryGetValue(ControlPropsNode.Control' out Test))                          {                              Result.Elements.Add(ControlPropsNode.Control' new UIElement(m_Screen' null));                                if (Ctrl.Image != null)                                  Result.Elements[ControlPropsNode.Control].Image = new UIImage(Ctrl.Image);                                Result.Elements[ControlPropsNode.Control].Position = Ctrl.Position;                          }                      }                        break;                  case NodeType.End:                      State.InSharedPropertiesGroup = false;                      State.Image = ""; //Reset                      State.TextButton = false; //Reset                       State.Color = new Color();                      State.Caption = "";                      State.Size = new Vector2(0' 0);                      State.Alignment = 0;                      State.Font = 0;                      //TODO: Reset more?                      break;              }
Magic Number,Gonzo,TreeWalker,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\TreeWalker.cs,WalkTree,The following statement contains a magic number: switch (NType)              {                  case NodeType.DefineImage: //Defines an image and loads a texture for it.                      DefineImageNode ImgNode = (DefineImageNode)UINode.GetNode(node);                      UIImage Img = new UIImage(ImgNode' m_Screen);                      Result.Elements.Add(ImgNode.Name' Img);                      break;                  case NodeType.DefineString: //Defines a string with a name.                      DefineStringNode StrNode = (DefineStringNode)UINode.GetNode(node);                      Result.Strings.Add(StrNode.Name' StringManager.StrTable(State.CurrentStringTable)[StrNode.StrIndex]);                      break;                  case NodeType.AddButton: //Defines a button.                      AddButtonNode ButtonNode = (AddButtonNode)UINode.GetNode(node);                      UIButton Btn = new UIButton(ButtonNode' Result' m_Screen);                      Result.Elements.Add(ButtonNode.Name' Btn);                        break;                  case NodeType.AddText:                      AddTextNode TextNode = (AddTextNode)UINode.GetNode(node);                      UILabel Lbl = new UILabel(TextNode' Result' m_Screen);                      Result.Elements.Add(TextNode.Name' Lbl);                      break;                  case NodeType.AddTextEdit:                      AddTextEditNode TextEditNode = (AddTextEditNode)UINode.GetNode(node);                      UITextEdit Txt = new UITextEdit(TextEditNode' State' m_Screen);                      Result.Elements.Add(TextEditNode.Name' Txt);                      break;                  case NodeType.AddSlider:                      AddSliderNode SliderNode = (AddSliderNode)UINode.GetNode(node);                      UISlider Slider = new UISlider(SliderNode' State' m_Screen);                      Result.Elements.Add(SliderNode.Name' Slider);                      break;                  case NodeType.SetSharedProperties: //Assigns a bunch of shared properties to declarations following the statement.                      State.InSharedPropertiesGroup = true;                      SetSharedPropsNode SharedPropsNode = (SetSharedPropsNode)UINode.GetNode(node);                        if (SharedPropsNode.StringTable != null)                          State.CurrentStringTable = (int)SharedPropsNode.StringTable;                        if (SharedPropsNode.ControlPosition != null)                      {                          State.Position[0] = SharedPropsNode.ControlPosition.Numbers[0];                          State.Position[1] = SharedPropsNode.ControlPosition.Numbers[1];                          break;                      }                        if (SharedPropsNode.Color != null)                      {                          State.Color = new Color                          {                              R = (byte)SharedPropsNode.Color.Numbers[0]'                              G = (byte)SharedPropsNode.Color.Numbers[1]'                              B = (byte)SharedPropsNode.Color.Numbers[2]                          };                      }                        if (SharedPropsNode.TextColor != null)                      {                          State.TextColor = new Color                          {                              R = (byte)SharedPropsNode.TextColor.Numbers[0]'                              G = (byte)SharedPropsNode.TextColor.Numbers[1]'                              B = (byte)SharedPropsNode.TextColor.Numbers[2]                          };                      }                        if (SharedPropsNode.TextColorSelected != null)                      {                          State.TextColorSelected = new Color                          {                              R = (byte)SharedPropsNode.TextColorSelected.Numbers[0]'                              G = (byte)SharedPropsNode.TextColorSelected.Numbers[1]'                              B = (byte)SharedPropsNode.TextColorSelected.Numbers[2]                          };                      }                        if (SharedPropsNode.TextColorHighlighted != null)                      {                          State.TextColorHighlighted = new Color                          {                              R = (byte)SharedPropsNode.TextColorHighlighted.Numbers[0]'                              G = (byte)SharedPropsNode.TextColorHighlighted.Numbers[1]'                              B = (byte)SharedPropsNode.TextColorHighlighted.Numbers[2]                          };                      }                        if (SharedPropsNode.TextColorDisabled != null)                      {                          State.TextColorDisabled = new Color                          {                              R = (byte)SharedPropsNode.TextColorDisabled.Numbers[0]'                              G = (byte)SharedPropsNode.TextColorDisabled.Numbers[1]'                              B = (byte)SharedPropsNode.TextColorDisabled.Numbers[2]                          };                      }                        if (SharedPropsNode.BackColor != null)                      {                          State.BackColor = new Color                          {                              R = (byte)SharedPropsNode.BackColor.Numbers[0]'                              G = (byte)SharedPropsNode.BackColor.Numbers[1]'                              B = (byte)SharedPropsNode.BackColor.Numbers[2]                          };                      }                        if (SharedPropsNode.CursorColor != null)                      {                          State.CursorColor = new Color                          {                              R = (byte)SharedPropsNode.CursorColor.Numbers[0]'                              G = (byte)SharedPropsNode.CursorColor.Numbers[1]'                              B = (byte)SharedPropsNode.CursorColor.Numbers[2]                          };                      }                        if(SharedPropsNode.FrameColor != null)                      {                          State.FrameColor = new Color                          {                              R = (byte)SharedPropsNode.FrameColor.Numbers[0]'                              G = (byte)SharedPropsNode.FrameColor.Numbers[1]'                              B = (byte)SharedPropsNode.FrameColor.Numbers[2]                          };                      }                        if (SharedPropsNode.TextButton)                          State.TextButton = true;                        if (SharedPropsNode.Opaque != null)                          State.IsOpaque = (SharedPropsNode.Opaque == 1) ? true : false;                        if (SharedPropsNode.Transparent != null)                          State.IsTransparent = (SharedPropsNode.Transparent == 1) ? true : false;                        if (SharedPropsNode.Alignment != null)                          State.Alignment = (int)SharedPropsNode.Alignment;                        if (SharedPropsNode.Image != "")                          State.Image = SharedPropsNode.Image;                        if (SharedPropsNode.Tooltip != "")                          State.Tooltip = SharedPropsNode.Tooltip;                        if (SharedPropsNode.Text != "")                          State.Caption = SharedPropsNode.Text;                        if (SharedPropsNode.Size != null)                          State.Size = new Vector2(SharedPropsNode.Size.Numbers[0]' SharedPropsNode.Size.Numbers[1]);                        if (SharedPropsNode.Orientation != null)                          State.Orientation = (int)SharedPropsNode.Orientation;                        if (SharedPropsNode.Font != null)                          State.Font = (int)SharedPropsNode.Font;                        if (SharedPropsNode.Opaque != null)                          State.Opaque = (int)SharedPropsNode.Opaque;                        break;                  case NodeType.SetControlProperties: //Sets a bunch of properties to a specified control.                      SetControlPropsNode ControlPropsNode = (SetControlPropsNode)UINode.GetNode(node);                        UIControl Ctrl = new UIControl(ControlPropsNode' m_Screen' State);                      Result.Controls.Add(ControlPropsNode.Control' Ctrl);                        if (State.InSharedPropertiesGroup)                      {                          UIElement Test = new UIElement(m_Screen' null);                          //Script implicitly created an object... :\                          if (!Result.Elements.TryGetValue(ControlPropsNode.Control' out Test))                          {                              Result.Elements.Add(ControlPropsNode.Control' new UIElement(m_Screen' null));                                if (Ctrl.Image != null)                                  Result.Elements[ControlPropsNode.Control].Image = new UIImage(Ctrl.Image);                                Result.Elements[ControlPropsNode.Control].Position = Ctrl.Position;                          }                      }                        break;                  case NodeType.End:                      State.InSharedPropertiesGroup = false;                      State.Image = ""; //Reset                      State.TextButton = false; //Reset                       State.Color = new Color();                      State.Caption = "";                      State.Size = new Vector2(0' 0);                      State.Alignment = 0;                      State.Font = 0;                      //TODO: Reset more?                      break;              }
Magic Number,Gonzo,TreeWalker,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\TreeWalker.cs,WalkTree,The following statement contains a magic number: switch (NType)              {                  case NodeType.DefineImage: //Defines an image and loads a texture for it.                      DefineImageNode ImgNode = (DefineImageNode)UINode.GetNode(node);                      UIImage Img = new UIImage(ImgNode' m_Screen);                      Result.Elements.Add(ImgNode.Name' Img);                      break;                  case NodeType.DefineString: //Defines a string with a name.                      DefineStringNode StrNode = (DefineStringNode)UINode.GetNode(node);                      Result.Strings.Add(StrNode.Name' StringManager.StrTable(State.CurrentStringTable)[StrNode.StrIndex]);                      break;                  case NodeType.AddButton: //Defines a button.                      AddButtonNode ButtonNode = (AddButtonNode)UINode.GetNode(node);                      UIButton Btn = new UIButton(ButtonNode' Result' m_Screen);                      Result.Elements.Add(ButtonNode.Name' Btn);                        break;                  case NodeType.AddText:                      AddTextNode TextNode = (AddTextNode)UINode.GetNode(node);                      UILabel Lbl = new UILabel(TextNode' Result' m_Screen);                      Result.Elements.Add(TextNode.Name' Lbl);                      break;                  case NodeType.AddTextEdit:                      AddTextEditNode TextEditNode = (AddTextEditNode)UINode.GetNode(node);                      UITextEdit Txt = new UITextEdit(TextEditNode' State' m_Screen);                      Result.Elements.Add(TextEditNode.Name' Txt);                      break;                  case NodeType.AddSlider:                      AddSliderNode SliderNode = (AddSliderNode)UINode.GetNode(node);                      UISlider Slider = new UISlider(SliderNode' State' m_Screen);                      Result.Elements.Add(SliderNode.Name' Slider);                      break;                  case NodeType.SetSharedProperties: //Assigns a bunch of shared properties to declarations following the statement.                      State.InSharedPropertiesGroup = true;                      SetSharedPropsNode SharedPropsNode = (SetSharedPropsNode)UINode.GetNode(node);                        if (SharedPropsNode.StringTable != null)                          State.CurrentStringTable = (int)SharedPropsNode.StringTable;                        if (SharedPropsNode.ControlPosition != null)                      {                          State.Position[0] = SharedPropsNode.ControlPosition.Numbers[0];                          State.Position[1] = SharedPropsNode.ControlPosition.Numbers[1];                          break;                      }                        if (SharedPropsNode.Color != null)                      {                          State.Color = new Color                          {                              R = (byte)SharedPropsNode.Color.Numbers[0]'                              G = (byte)SharedPropsNode.Color.Numbers[1]'                              B = (byte)SharedPropsNode.Color.Numbers[2]                          };                      }                        if (SharedPropsNode.TextColor != null)                      {                          State.TextColor = new Color                          {                              R = (byte)SharedPropsNode.TextColor.Numbers[0]'                              G = (byte)SharedPropsNode.TextColor.Numbers[1]'                              B = (byte)SharedPropsNode.TextColor.Numbers[2]                          };                      }                        if (SharedPropsNode.TextColorSelected != null)                      {                          State.TextColorSelected = new Color                          {                              R = (byte)SharedPropsNode.TextColorSelected.Numbers[0]'                              G = (byte)SharedPropsNode.TextColorSelected.Numbers[1]'                              B = (byte)SharedPropsNode.TextColorSelected.Numbers[2]                          };                      }                        if (SharedPropsNode.TextColorHighlighted != null)                      {                          State.TextColorHighlighted = new Color                          {                              R = (byte)SharedPropsNode.TextColorHighlighted.Numbers[0]'                              G = (byte)SharedPropsNode.TextColorHighlighted.Numbers[1]'                              B = (byte)SharedPropsNode.TextColorHighlighted.Numbers[2]                          };                      }                        if (SharedPropsNode.TextColorDisabled != null)                      {                          State.TextColorDisabled = new Color                          {                              R = (byte)SharedPropsNode.TextColorDisabled.Numbers[0]'                              G = (byte)SharedPropsNode.TextColorDisabled.Numbers[1]'                              B = (byte)SharedPropsNode.TextColorDisabled.Numbers[2]                          };                      }                        if (SharedPropsNode.BackColor != null)                      {                          State.BackColor = new Color                          {                              R = (byte)SharedPropsNode.BackColor.Numbers[0]'                              G = (byte)SharedPropsNode.BackColor.Numbers[1]'                              B = (byte)SharedPropsNode.BackColor.Numbers[2]                          };                      }                        if (SharedPropsNode.CursorColor != null)                      {                          State.CursorColor = new Color                          {                              R = (byte)SharedPropsNode.CursorColor.Numbers[0]'                              G = (byte)SharedPropsNode.CursorColor.Numbers[1]'                              B = (byte)SharedPropsNode.CursorColor.Numbers[2]                          };                      }                        if(SharedPropsNode.FrameColor != null)                      {                          State.FrameColor = new Color                          {                              R = (byte)SharedPropsNode.FrameColor.Numbers[0]'                              G = (byte)SharedPropsNode.FrameColor.Numbers[1]'                              B = (byte)SharedPropsNode.FrameColor.Numbers[2]                          };                      }                        if (SharedPropsNode.TextButton)                          State.TextButton = true;                        if (SharedPropsNode.Opaque != null)                          State.IsOpaque = (SharedPropsNode.Opaque == 1) ? true : false;                        if (SharedPropsNode.Transparent != null)                          State.IsTransparent = (SharedPropsNode.Transparent == 1) ? true : false;                        if (SharedPropsNode.Alignment != null)                          State.Alignment = (int)SharedPropsNode.Alignment;                        if (SharedPropsNode.Image != "")                          State.Image = SharedPropsNode.Image;                        if (SharedPropsNode.Tooltip != "")                          State.Tooltip = SharedPropsNode.Tooltip;                        if (SharedPropsNode.Text != "")                          State.Caption = SharedPropsNode.Text;                        if (SharedPropsNode.Size != null)                          State.Size = new Vector2(SharedPropsNode.Size.Numbers[0]' SharedPropsNode.Size.Numbers[1]);                        if (SharedPropsNode.Orientation != null)                          State.Orientation = (int)SharedPropsNode.Orientation;                        if (SharedPropsNode.Font != null)                          State.Font = (int)SharedPropsNode.Font;                        if (SharedPropsNode.Opaque != null)                          State.Opaque = (int)SharedPropsNode.Opaque;                        break;                  case NodeType.SetControlProperties: //Sets a bunch of properties to a specified control.                      SetControlPropsNode ControlPropsNode = (SetControlPropsNode)UINode.GetNode(node);                        UIControl Ctrl = new UIControl(ControlPropsNode' m_Screen' State);                      Result.Controls.Add(ControlPropsNode.Control' Ctrl);                        if (State.InSharedPropertiesGroup)                      {                          UIElement Test = new UIElement(m_Screen' null);                          //Script implicitly created an object... :\                          if (!Result.Elements.TryGetValue(ControlPropsNode.Control' out Test))                          {                              Result.Elements.Add(ControlPropsNode.Control' new UIElement(m_Screen' null));                                if (Ctrl.Image != null)                                  Result.Elements[ControlPropsNode.Control].Image = new UIImage(Ctrl.Image);                                Result.Elements[ControlPropsNode.Control].Position = Ctrl.Position;                          }                      }                        break;                  case NodeType.End:                      State.InSharedPropertiesGroup = false;                      State.Image = ""; //Reset                      State.TextButton = false; //Reset                       State.Color = new Color();                      State.Caption = "";                      State.Size = new Vector2(0' 0);                      State.Alignment = 0;                      State.Font = 0;                      //TODO: Reset more?                      break;              }
Magic Number,Gonzo.Dialogs,LoginDialog,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\LoginDialog.cs,LoginDialog,The following statement contains a magic number: m_Cst = StringManager.StrTable(209);
Magic Number,Gonzo.Dialogs,LoginDialog,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\LoginDialog.cs,LoginDialog,The following statement contains a magic number: Vector2 RelativePosition = new Vector2(60' 0);
Magic Number,Gonzo.Dialogs,LoginDialog,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\LoginDialog.cs,LoginDialog,The following statement contains a magic number: m_LblTitle = new UILabel(m_Cst[1]' 1' Pos + RelativePosition' m_Font.MeasureString(m_Cst[1])'                  m_Screen.StandardTxtColor' 11' m_Screen' UIParser.Nodes.TextAlignment.Center_Center);
Magic Number,Gonzo.Dialogs,LoginDialog,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\LoginDialog.cs,LoginDialog,The following statement contains a magic number: RelativePosition = new Vector2(20' 50);
Magic Number,Gonzo.Dialogs,LoginDialog,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\LoginDialog.cs,LoginDialog,The following statement contains a magic number: RelativePosition = new Vector2(20' 50);
Magic Number,Gonzo.Dialogs,LoginDialog,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\LoginDialog.cs,LoginDialog,The following statement contains a magic number: m_LblUsername = new UILabel(m_Cst[4]' 2' Pos + RelativePosition' m_Font.MeasureString(m_Cst[4])'                   m_Screen.StandardTxtColor' 9' m_Screen' UIParser.Nodes.TextAlignment.Center_Center);
Magic Number,Gonzo.Dialogs,LoginDialog,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\LoginDialog.cs,LoginDialog,The following statement contains a magic number: m_LblUsername = new UILabel(m_Cst[4]' 2' Pos + RelativePosition' m_Font.MeasureString(m_Cst[4])'                   m_Screen.StandardTxtColor' 9' m_Screen' UIParser.Nodes.TextAlignment.Center_Center);
Magic Number,Gonzo.Dialogs,LoginDialog,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\LoginDialog.cs,LoginDialog,The following statement contains a magic number: m_LblUsername = new UILabel(m_Cst[4]' 2' Pos + RelativePosition' m_Font.MeasureString(m_Cst[4])'                   m_Screen.StandardTxtColor' 9' m_Screen' UIParser.Nodes.TextAlignment.Center_Center);
Magic Number,Gonzo.Dialogs,LoginDialog,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\LoginDialog.cs,LoginDialog,The following statement contains a magic number: m_LblUsername = new UILabel(m_Cst[4]' 2' Pos + RelativePosition' m_Font.MeasureString(m_Cst[4])'                   m_Screen.StandardTxtColor' 9' m_Screen' UIParser.Nodes.TextAlignment.Center_Center);
Magic Number,Gonzo.Dialogs,LoginDialog,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\LoginDialog.cs,LoginDialog,The following statement contains a magic number: RelativePosition = new Vector2(20' 110);
Magic Number,Gonzo.Dialogs,LoginDialog,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\LoginDialog.cs,LoginDialog,The following statement contains a magic number: RelativePosition = new Vector2(20' 110);
Magic Number,Gonzo.Dialogs,LoginDialog,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\LoginDialog.cs,LoginDialog,The following statement contains a magic number: m_LblPassword = new UILabel(m_Cst[5]' 3' Pos + RelativePosition' m_Font.MeasureString(m_Cst[4])'                   m_Screen.StandardTxtColor' 9' m_Screen' UIParser.Nodes.TextAlignment.Center_Center);
Magic Number,Gonzo.Dialogs,LoginDialog,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\LoginDialog.cs,LoginDialog,The following statement contains a magic number: m_LblPassword = new UILabel(m_Cst[5]' 3' Pos + RelativePosition' m_Font.MeasureString(m_Cst[4])'                   m_Screen.StandardTxtColor' 9' m_Screen' UIParser.Nodes.TextAlignment.Center_Center);
Magic Number,Gonzo.Dialogs,LoginDialog,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\LoginDialog.cs,LoginDialog,The following statement contains a magic number: m_LblPassword = new UILabel(m_Cst[5]' 3' Pos + RelativePosition' m_Font.MeasureString(m_Cst[4])'                   m_Screen.StandardTxtColor' 9' m_Screen' UIParser.Nodes.TextAlignment.Center_Center);
Magic Number,Gonzo.Dialogs,LoginDialog,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\LoginDialog.cs,LoginDialog,The following statement contains a magic number: m_LblPassword = new UILabel(m_Cst[5]' 3' Pos + RelativePosition' m_Font.MeasureString(m_Cst[4])'                   m_Screen.StandardTxtColor' 9' m_Screen' UIParser.Nodes.TextAlignment.Center_Center);
Magic Number,Gonzo.Dialogs,LoginDialog,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\LoginDialog.cs,LoginDialog,The following statement contains a magic number: RelativePosition = new Vector2(20' 85);
Magic Number,Gonzo.Dialogs,LoginDialog,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\LoginDialog.cs,LoginDialog,The following statement contains a magic number: RelativePosition = new Vector2(20' 85);
Magic Number,Gonzo.Dialogs,LoginDialog,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\LoginDialog.cs,LoginDialog,The following statement contains a magic number: m_TxtUsername = new UITextEdit("TxtUsername"' 4' true' false' Pos + RelativePosition'                   new Vector2(250' 25)' 10' m_Screen' ""' this);
Magic Number,Gonzo.Dialogs,LoginDialog,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\LoginDialog.cs,LoginDialog,The following statement contains a magic number: m_TxtUsername = new UITextEdit("TxtUsername"' 4' true' false' Pos + RelativePosition'                   new Vector2(250' 25)' 10' m_Screen' ""' this);
Magic Number,Gonzo.Dialogs,LoginDialog,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\LoginDialog.cs,LoginDialog,The following statement contains a magic number: m_TxtUsername = new UITextEdit("TxtUsername"' 4' true' false' Pos + RelativePosition'                   new Vector2(250' 25)' 10' m_Screen' ""' this);
Magic Number,Gonzo.Dialogs,LoginDialog,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\LoginDialog.cs,LoginDialog,The following statement contains a magic number: m_TxtUsername = new UITextEdit("TxtUsername"' 4' true' false' Pos + RelativePosition'                   new Vector2(250' 25)' 10' m_Screen' ""' this);
Magic Number,Gonzo.Dialogs,LoginDialog,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\LoginDialog.cs,LoginDialog,The following statement contains a magic number: RelativePosition = new Vector2(20' 145);
Magic Number,Gonzo.Dialogs,LoginDialog,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\LoginDialog.cs,LoginDialog,The following statement contains a magic number: RelativePosition = new Vector2(20' 145);
Magic Number,Gonzo.Dialogs,LoginDialog,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\LoginDialog.cs,LoginDialog,The following statement contains a magic number: m_TxtPassword = new UITextEdit("TxtPassword"' 5' true' false' Pos + RelativePosition'                   new Vector2(250' 25)' 10' m_Screen' ""' this);
Magic Number,Gonzo.Dialogs,LoginDialog,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\LoginDialog.cs,LoginDialog,The following statement contains a magic number: m_TxtPassword = new UITextEdit("TxtPassword"' 5' true' false' Pos + RelativePosition'                   new Vector2(250' 25)' 10' m_Screen' ""' this);
Magic Number,Gonzo.Dialogs,LoginDialog,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\LoginDialog.cs,LoginDialog,The following statement contains a magic number: m_TxtPassword = new UITextEdit("TxtPassword"' 5' true' false' Pos + RelativePosition'                   new Vector2(250' 25)' 10' m_Screen' ""' this);
Magic Number,Gonzo.Dialogs,LoginDialog,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\LoginDialog.cs,LoginDialog,The following statement contains a magic number: m_TxtPassword = new UITextEdit("TxtPassword"' 5' true' false' Pos + RelativePosition'                   new Vector2(250' 25)' 10' m_Screen' ""' this);
Magic Number,Gonzo.Dialogs,LoginDialog,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\LoginDialog.cs,LoginDialog,The following statement contains a magic number: RelativePosition = new Vector2(120' 170);
Magic Number,Gonzo.Dialogs,LoginDialog,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\LoginDialog.cs,LoginDialog,The following statement contains a magic number: RelativePosition = new Vector2(120' 170);
Magic Number,Gonzo.Dialogs,LoginDialog,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\LoginDialog.cs,LoginDialog,The following statement contains a magic number: m_BtnLogin = new UIButton("BtnLogin"' Pos + RelativePosition' m_Screen' null' m_Cst[2]' 9);
Magic Number,Gonzo.Dialogs,LoginDialog,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\LoginDialog.cs,LoginDialog,The following statement contains a magic number: m_BtnLogin = new UIButton("BtnLogin"' Pos + RelativePosition' m_Screen' null' m_Cst[2]' 9);
Magic Number,Gonzo.Dialogs,LoginDialog,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\LoginDialog.cs,LoginDialog,The following statement contains a magic number: RelativePosition = new Vector2(200' 170);
Magic Number,Gonzo.Dialogs,LoginDialog,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\LoginDialog.cs,LoginDialog,The following statement contains a magic number: RelativePosition = new Vector2(200' 170);
Magic Number,Gonzo.Dialogs,LoginDialog,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\LoginDialog.cs,LoginDialog,The following statement contains a magic number: m_BtnExit = new UIButton("BtnExit"' Pos + RelativePosition' m_Screen' null' m_Cst[3]' 9);
Magic Number,Gonzo.Dialogs,LoginDialog,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\LoginDialog.cs,LoginDialog,The following statement contains a magic number: m_BtnExit = new UIButton("BtnExit"' Pos + RelativePosition' m_Screen' null' m_Cst[3]' 9);
Magic Number,Gonzo.Dialogs,LoginDialog,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\LoginDialog.cs,LoginDialog,The following statement contains a magic number: SetSize((int)((m_Font.MeasureString(m_Cst[1]).X + 40) * Resolution.getVirtualAspectRatio())'                   (int)(175 * Resolution.getVirtualAspectRatio()));
Magic Number,Gonzo.Dialogs,LoginDialog,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\LoginDialog.cs,LoginDialog,The following statement contains a magic number: SetSize((int)((m_Font.MeasureString(m_Cst[1]).X + 40) * Resolution.getVirtualAspectRatio())'                   (int)(175 * Resolution.getVirtualAspectRatio()));
Magic Number,Gonzo.Dialogs,LoginDialog,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\LoginDialog.cs,Update,The following statement contains a magic number: Vector2 OffsetFromMouse = new Vector2(60' 0);
Magic Number,Gonzo.Dialogs,LoginDialog,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\LoginDialog.cs,Update,The following statement contains a magic number: OffsetFromMouse = new Vector2(20' 50);
Magic Number,Gonzo.Dialogs,LoginDialog,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\LoginDialog.cs,Update,The following statement contains a magic number: OffsetFromMouse = new Vector2(20' 50);
Magic Number,Gonzo.Dialogs,LoginDialog,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\LoginDialog.cs,Update,The following statement contains a magic number: OffsetFromMouse = new Vector2(20' 110);
Magic Number,Gonzo.Dialogs,LoginDialog,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\LoginDialog.cs,Update,The following statement contains a magic number: OffsetFromMouse = new Vector2(20' 110);
Magic Number,Gonzo.Dialogs,LoginDialog,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\LoginDialog.cs,Update,The following statement contains a magic number: OffsetFromMouse = new Vector2(20' 85);
Magic Number,Gonzo.Dialogs,LoginDialog,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\LoginDialog.cs,Update,The following statement contains a magic number: OffsetFromMouse = new Vector2(20' 85);
Magic Number,Gonzo.Dialogs,LoginDialog,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\LoginDialog.cs,Update,The following statement contains a magic number: OffsetFromMouse = new Vector2(20' 145);
Magic Number,Gonzo.Dialogs,LoginDialog,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\LoginDialog.cs,Update,The following statement contains a magic number: OffsetFromMouse = new Vector2(20' 145);
Magic Number,Gonzo.Dialogs,LoginDialog,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\LoginDialog.cs,Update,The following statement contains a magic number: OffsetFromMouse = new Vector2(120' 170);
Magic Number,Gonzo.Dialogs,LoginDialog,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\LoginDialog.cs,Update,The following statement contains a magic number: OffsetFromMouse = new Vector2(120' 170);
Magic Number,Gonzo.Dialogs,LoginDialog,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\LoginDialog.cs,Update,The following statement contains a magic number: OffsetFromMouse = new Vector2(200' 170);
Magic Number,Gonzo.Dialogs,LoginDialog,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\LoginDialog.cs,Update,The following statement contains a magic number: OffsetFromMouse = new Vector2(200' 170);
Magic Number,Gonzo.Dialogs,LoginDialog,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\LoginDialog.cs,Draw,The following statement contains a magic number: m_LblTitle.Draw(SBatch' Depth + 0.1f);
Magic Number,Gonzo.Dialogs,LoginDialog,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\LoginDialog.cs,Draw,The following statement contains a magic number: m_LblUsername.Draw(SBatch' Depth + 0.1f);
Magic Number,Gonzo.Dialogs,LoginDialog,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\LoginDialog.cs,Draw,The following statement contains a magic number: m_LblPassword.Draw(SBatch' Depth + 0.1f);
Magic Number,Gonzo.Dialogs,LoginDialog,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\LoginDialog.cs,Draw,The following statement contains a magic number: m_TxtUsername.Draw(SBatch' Depth + 0.1f);
Magic Number,Gonzo.Dialogs,LoginDialog,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\LoginDialog.cs,Draw,The following statement contains a magic number: m_TxtPassword.Draw(SBatch' Depth + 0.1f);
Magic Number,Gonzo.Dialogs,LoginDialog,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\LoginDialog.cs,Draw,The following statement contains a magic number: m_BtnLogin.Draw(SBatch' Depth + 0.1f);
Magic Number,Gonzo.Dialogs,LoginDialog,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\LoginDialog.cs,Draw,The following statement contains a magic number: m_BtnExit.Draw(SBatch' Depth + 0.1f);
Magic Number,Gonzo.Dialogs,LoginProgressDialog,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\LoginProgressDialog.cs,LoginProgressDialog,The following statement contains a magic number: m_Cst = StringManager.StrTable(210);
Magic Number,Gonzo.Dialogs,LoginProgressDialog,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\LoginProgressDialog.cs,LoginProgressDialog,The following statement contains a magic number: Vector2 RelativePosition = new Vector2(60' 0);
Magic Number,Gonzo.Dialogs,LoginProgressDialog,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\LoginProgressDialog.cs,LoginProgressDialog,The following statement contains a magic number: m_LblTitle = new UILabel(m_Cst[1]' 1' Pos + RelativePosition' m_Font.MeasureString(m_Cst[1])'                  m_Screen.StandardTxtColor' 11' m_Screen' UIParser.Nodes.TextAlignment.Center_Center);
Magic Number,Gonzo.Dialogs,LoginProgressDialog,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\LoginProgressDialog.cs,LoginProgressDialog,The following statement contains a magic number: RelativePosition = new Vector2(20' 85);
Magic Number,Gonzo.Dialogs,LoginProgressDialog,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\LoginProgressDialog.cs,LoginProgressDialog,The following statement contains a magic number: RelativePosition = new Vector2(20' 85);
Magic Number,Gonzo.Dialogs,LoginProgressDialog,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\LoginProgressDialog.cs,LoginProgressDialog,The following statement contains a magic number: m_ProgressBar = new UIProgressBar(m_Screen' Pos + RelativePosition' 250);
Magic Number,Gonzo.Dialogs,LoginProgressDialog,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\LoginProgressDialog.cs,LoginProgressDialog,The following statement contains a magic number: SetSize((int)((m_Font.MeasureString(m_Cst[1]).X + 40) * Resolution.getVirtualAspectRatio())'                  (int)(175 * Resolution.getVirtualAspectRatio()));
Magic Number,Gonzo.Dialogs,LoginProgressDialog,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\LoginProgressDialog.cs,LoginProgressDialog,The following statement contains a magic number: SetSize((int)((m_Font.MeasureString(m_Cst[1]).X + 40) * Resolution.getVirtualAspectRatio())'                  (int)(175 * Resolution.getVirtualAspectRatio()));
Magic Number,Gonzo.Dialogs,LoginProgressDialog,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\LoginProgressDialog.cs,Update,The following statement contains a magic number: Vector2 OffsetFromMouse = new Vector2(60' 0);
Magic Number,Gonzo.Dialogs,LoginProgressDialog,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\LoginProgressDialog.cs,Update,The following statement contains a magic number: OffsetFromMouse = new Vector2(20' 85);
Magic Number,Gonzo.Dialogs,LoginProgressDialog,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\LoginProgressDialog.cs,Update,The following statement contains a magic number: OffsetFromMouse = new Vector2(20' 85);
Magic Number,Gonzo.Dialogs,LoginProgressDialog,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\LoginProgressDialog.cs,Draw,The following statement contains a magic number: m_LblTitle.Draw(SBatch' Depth + 0.1f);
Magic Number,Gonzo.Dialogs,LoginProgressDialog,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\LoginProgressDialog.cs,Draw,The following statement contains a magic number: m_ProgressBar.Draw(SBatch' Depth + 0.1f);
Magic Number,Gonzo.Dialogs,UIDialog,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\UIDialog.cs,UIDialog,The following statement contains a magic number: Image.Slicer = new NineSlicer(new Vector2(0' 0)' Tex.Width' Tex.Height' 41' 41' 66' 40);
Magic Number,Gonzo.Dialogs,UIDialog,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\UIDialog.cs,UIDialog,The following statement contains a magic number: Image.Slicer = new NineSlicer(new Vector2(0' 0)' Tex.Width' Tex.Height' 41' 41' 66' 40);
Magic Number,Gonzo.Dialogs,UIDialog,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\UIDialog.cs,UIDialog,The following statement contains a magic number: Image.Slicer = new NineSlicer(new Vector2(0' 0)' Tex.Width' Tex.Height' 41' 41' 66' 40);
Magic Number,Gonzo.Dialogs,UIDialog,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\UIDialog.cs,UIDialog,The following statement contains a magic number: Image.Slicer = new NineSlicer(new Vector2(0' 0)' Tex.Width' Tex.Height' 41' 41' 66' 40);
Magic Number,Gonzo.Dialogs,UIDialog,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\UIDialog.cs,UIDialog,The following statement contains a magic number: m_CloseButton = new UIButton("CloseBtn"'                   Position + new Vector2(Image.Slicer.Width - (CloseButtonTex.Width / 2.5f)' 9f)' Screen' CloseButtonTex);
Magic Number,Gonzo.Dialogs,UIDialog,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\UIDialog.cs,UIDialog,The following statement contains a magic number: m_CloseButton = new UIButton("CloseBtn"'                   Position + new Vector2(Image.Slicer.Width - (CloseButtonTex.Width / 2.5f)' 9f)' Screen' CloseButtonTex);
Magic Number,Gonzo.Dialogs,UIDialog,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\UIDialog.cs,MouseEvents,The following statement contains a magic number: m_DragOffset = Helper.MousePosition / 5.0f;
Magic Number,Gonzo.Dialogs,UIDialog,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\UIDialog.cs,Update,The following statement contains a magic number: OffsetFromMouse = new Vector2(Image.Slicer.Width - (m_CloseButton.Image.Texture.Width / 2.5f)' 9f);
Magic Number,Gonzo.Dialogs,UIDialog,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\UIDialog.cs,Update,The following statement contains a magic number: OffsetFromMouse = new Vector2(Image.Slicer.Width - (m_CloseButton.Image.Texture.Width / 2.5f)' 9f);
Magic Number,Gonzo.Dialogs,UIDialog,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\UIDialog.cs,CenterAround,The following statement contains a magic number: this.Position = new Vector2(OffsetX + TopLeft.X + ((Element.Size.X - m_Size.X) / 2)'                   OffsetY + TopLeft.Y + ((Element.Size.Y - m_Size.Y) / 2));
Magic Number,Gonzo.Dialogs,UIDialog,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\UIDialog.cs,CenterAround,The following statement contains a magic number: this.Position = new Vector2(OffsetX + TopLeft.X + ((Element.Size.X - m_Size.X) / 2)'                   OffsetY + TopLeft.Y + ((Element.Size.Y - m_Size.Y) / 2));
Magic Number,Gonzo.Dialogs,UIDialog,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\UIDialog.cs,CenterAround,The following statement contains a magic number: m_CloseButton.Position = Position + new Vector2(Image.Slicer.Width - (m_CloseButton.Image.Texture.Width / 2.5f)' 9f);
Magic Number,Gonzo.Dialogs,UIDialog,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\UIDialog.cs,CenterAround,The following statement contains a magic number: m_CloseButton.Position = Position + new Vector2(Image.Slicer.Width - (m_CloseButton.Image.Texture.Width / 2.5f)' 9f);
Magic Number,Gonzo.Dialogs,WillWrightDiag,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\WillWrightDiag.cs,WillWrightDiag,The following statement contains a magic number: Image.SetSize(m_WillWrightImg.Texture.Width + 50' m_WillWrightImg.Texture.Height + 55);
Magic Number,Gonzo.Dialogs,WillWrightDiag,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\WillWrightDiag.cs,WillWrightDiag,The following statement contains a magic number: Image.SetSize(m_WillWrightImg.Texture.Width + 50' m_WillWrightImg.Texture.Height + 55);
Magic Number,Gonzo.Dialogs,WillWrightDiag,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\WillWrightDiag.cs,WillWrightDiag,The following statement contains a magic number: CenterAround(m_WillWrightImg' -22' -42);
Magic Number,Gonzo.Dialogs,WillWrightDiag,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\WillWrightDiag.cs,WillWrightDiag,The following statement contains a magic number: CenterAround(m_WillWrightImg' -22' -42);
Magic Number,Gonzo.Dialogs,WillWrightDiag,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\WillWrightDiag.cs,Update,The following statement contains a magic number: m_WillWrightImg.Position = Position - new Vector2(-22' -42);
Magic Number,Gonzo.Dialogs,WillWrightDiag,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\WillWrightDiag.cs,Update,The following statement contains a magic number: m_WillWrightImg.Position = Position - new Vector2(-22' -42);
Magic Number,Gonzo.Dialogs,ExitDialog,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\ExitDialog.cs,ExitDialog,The following statement contains a magic number: m_ReloginButton.Position += new Vector2(30' 120);
Magic Number,Gonzo.Dialogs,ExitDialog,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\ExitDialog.cs,ExitDialog,The following statement contains a magic number: m_ReloginButton.Position += new Vector2(30' 120);
Magic Number,Gonzo.Dialogs,ExitDialog,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\ExitDialog.cs,ExitDialog,The following statement contains a magic number: m_ExitButton.Position += new Vector2(160' 120);
Magic Number,Gonzo.Dialogs,ExitDialog,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\ExitDialog.cs,ExitDialog,The following statement contains a magic number: m_ExitButton.Position += new Vector2(160' 120);
Magic Number,Gonzo.Dialogs,ExitDialog,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\ExitDialog.cs,ExitDialog,The following statement contains a magic number: m_CancelButton.Position += new Vector2(350' 120);
Magic Number,Gonzo.Dialogs,ExitDialog,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\ExitDialog.cs,ExitDialog,The following statement contains a magic number: m_CancelButton.Position += new Vector2(350' 120);
Magic Number,Gonzo.Dialogs,ExitDialog,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\ExitDialog.cs,Update,The following statement contains a magic number: Vector2 OffsetFromMouse = new Vector2(30' 120);
Magic Number,Gonzo.Dialogs,ExitDialog,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\ExitDialog.cs,Update,The following statement contains a magic number: Vector2 OffsetFromMouse = new Vector2(30' 120);
Magic Number,Gonzo.Dialogs,ExitDialog,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\ExitDialog.cs,Update,The following statement contains a magic number: OffsetFromMouse = new Vector2(160' 120);
Magic Number,Gonzo.Dialogs,ExitDialog,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\ExitDialog.cs,Update,The following statement contains a magic number: OffsetFromMouse = new Vector2(160' 120);
Magic Number,Gonzo.Dialogs,ExitDialog,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\ExitDialog.cs,Update,The following statement contains a magic number: OffsetFromMouse = new Vector2(350' 120);
Magic Number,Gonzo.Dialogs,ExitDialog,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\ExitDialog.cs,Update,The following statement contains a magic number: OffsetFromMouse = new Vector2(350' 120);
Magic Number,Gonzo.Dialogs,ExitDialog,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\ExitDialog.cs,Update,The following statement contains a magic number: OffsetFromMouse = new Vector2(60' 6);
Magic Number,Gonzo.Dialogs,ExitDialog,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\ExitDialog.cs,Update,The following statement contains a magic number: OffsetFromMouse = new Vector2(60' 6);
Magic Number,Gonzo.Dialogs,ExitDialog,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\ExitDialog.cs,Update,The following statement contains a magic number: OffsetFromMouse = new Vector2(60' 48);
Magic Number,Gonzo.Dialogs,ExitDialog,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\ExitDialog.cs,Update,The following statement contains a magic number: OffsetFromMouse = new Vector2(60' 48);
Magic Number,Gonzo.Dialogs,ExitDialog,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\ExitDialog.cs,Draw,The following statement contains a magic number: m_ReloginButton.Draw(SBatch' (float)(Depth + 0.1));
Magic Number,Gonzo.Dialogs,ExitDialog,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\ExitDialog.cs,Draw,The following statement contains a magic number: m_ExitButton.Draw(SBatch' (float)(Depth + 0.1));
Magic Number,Gonzo.Dialogs,ExitDialog,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\ExitDialog.cs,Draw,The following statement contains a magic number: m_CancelButton.Draw(SBatch' (float)(Depth + 0.1));
Magic Number,Gonzo.Dialogs,ExitDialog,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\ExitDialog.cs,Draw,The following statement contains a magic number: m_TitleText.Draw(SBatch' (float)(Depth + 0.1));
Magic Number,Gonzo.Dialogs,ExitDialog,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Dialogs\ExitDialog.cs,Draw,The following statement contains a magic number: m_MessageText.Draw(SBatch' (float)(Depth + 0.1));
Magic Number,Gonzo.Elements,UIBodyBrowser,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIBodyBrowser.cs,UIBodyBrowser,The following statement contains a magic number: Container.SourcePosition =                       //Initialize to second frame in image.                      new Vector2((m_EditBodySkinBtnTex.Width / (4)) * 2' 0.0f);
Magic Number,Gonzo.Elements,UIBodyBrowser,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIBodyBrowser.cs,UIBodyBrowser,The following statement contains a magic number: Container.SourcePosition =                       //Initialize to second frame in image.                      new Vector2((m_EditBodySkinBtnTex.Width / (4)) * 2' 0.0f);
Magic Number,Gonzo.Elements,UIBodyBrowser,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIBodyBrowser.cs,UIBodyBrowser,The following statement contains a magic number: Container.SourcePosition =                       //Initialize to second frame in image.                      new Vector2((m_EditBodySkinBtnTex.Width / (4)) * 2' 0.0f);
Magic Number,Gonzo.Elements,UIBodyBrowser,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIBodyBrowser.cs,UIBodyBrowser,The following statement contains a magic number: Container.SourcePosition =                       //Initialize to second frame in image.                      new Vector2((m_EditBodySkinBtnTex.Width / (4)) * 2' 0.0f);
Magic Number,Gonzo.Elements,UIBodyBrowser,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIBodyBrowser.cs,UIBodyBrowser,The following statement contains a magic number: Container.SourcePosition =                      //Initialize to second frame in image.                      new Vector2((m_EditBodySkinBtnTex.Width / (4)) * 2' 0.0f);
Magic Number,Gonzo.Elements,UIBodyBrowser,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIBodyBrowser.cs,UIBodyBrowser,The following statement contains a magic number: Container.SourcePosition =                      //Initialize to second frame in image.                      new Vector2((m_EditBodySkinBtnTex.Width / (4)) * 2' 0.0f);
Magic Number,Gonzo.Elements,UIBodyBrowser,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIBodyBrowser.cs,Update,The following statement contains a magic number: m_BtnWidth = m_SkinBtns[Y + m_Counter].BtnTex.Width / 4;
Magic Number,Gonzo.Elements,UIBodyBrowser,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIBodyBrowser.cs,Update,The following statement contains a magic number: Vector2 TexturePosition = new Vector2(X * (BodyTileSize.X + 16)' Y * (BodyTileSize.Y));
Magic Number,Gonzo.Elements,UIBodyBrowser,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIBodyBrowser.cs,Update,The following statement contains a magic number: Vector2 ButtonPosition = new Vector2(TexturePosition.X - 3'  TexturePosition.Y - 5);
Magic Number,Gonzo.Elements,UIBodyBrowser,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIBodyBrowser.cs,Update,The following statement contains a magic number: Vector2 ButtonPosition = new Vector2(TexturePosition.X - 3'  TexturePosition.Y - 5);
Magic Number,Gonzo.Elements,UIBodyBrowser,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIBodyBrowser.cs,Update,The following statement contains a magic number: switch (m_SelectedSkintype)                                      {                                          case Elements.SkinType.Light:                                              EArgs.SkinType = 0;                                              EArgs.SelectedOutfit = (m_Sex == AvatarSex.Male ?                                                  m_LightAppearances[(Y * X) + m_Counter].Oft :                                                  m_LightFemaleAppearances[(Y * X) + m_Counter].Oft);                                                OnButtonClicked(this' EArgs);                                              break;                                          case Elements.SkinType.Medium:                                              EArgs = new UISkinButtonClickedEventArgs();                                              EArgs.SkinType = 1;                                              EArgs.SelectedOutfit = (m_Sex == AvatarSex.Male ?                                                  m_MediumAppearances[(X * Y) + m_Counter].Oft :                                                  m_MediumFemaleAppearances[(Y * X) + m_Counter].Oft);                                                OnButtonClicked(this' EArgs);                                              break;                                          case Elements.SkinType.Dark:                                              EArgs = new UISkinButtonClickedEventArgs();                                              EArgs.SkinType = 2;                                              EArgs.SelectedOutfit = (m_Sex == AvatarSex.Male ?                                                  m_DarkAppearances[(X * Y) + m_Counter].Oft :                                                  m_DarkFemaleAppearances[(Y * X) + m_Counter].Oft);                                                OnButtonClicked(this' EArgs);                                              break;                                      }
Magic Number,Gonzo.Elements,UIBodyBrowser,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIBodyBrowser.cs,Draw,The following statement contains a magic number: SBatch.DrawString(m_Screen.Font9px' "Bodies: " + m_NumberOfBodies'                   new Vector2(Position.X + (m_Size.X / 2) - m_Screen.Font9px.MeasureString("Bodies: ").X'                  Position.Y + (m_Size.Y - 70))' new Color(255' 249' 157)' 0.0f' new Vector2(0' 0)' 1.0f'                  SpriteEffects.None' m_Depth);
Magic Number,Gonzo.Elements,UIBodyBrowser,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIBodyBrowser.cs,Draw,The following statement contains a magic number: SBatch.DrawString(m_Screen.Font9px' "Bodies: " + m_NumberOfBodies'                   new Vector2(Position.X + (m_Size.X / 2) - m_Screen.Font9px.MeasureString("Bodies: ").X'                  Position.Y + (m_Size.Y - 70))' new Color(255' 249' 157)' 0.0f' new Vector2(0' 0)' 1.0f'                  SpriteEffects.None' m_Depth);
Magic Number,Gonzo.Elements,UIBodyBrowser,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIBodyBrowser.cs,Draw,The following statement contains a magic number: SBatch.DrawString(m_Screen.Font9px' "Bodies: " + m_NumberOfBodies'                   new Vector2(Position.X + (m_Size.X / 2) - m_Screen.Font9px.MeasureString("Bodies: ").X'                  Position.Y + (m_Size.Y - 70))' new Color(255' 249' 157)' 0.0f' new Vector2(0' 0)' 1.0f'                  SpriteEffects.None' m_Depth);
Magic Number,Gonzo.Elements,UIBodyBrowser,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIBodyBrowser.cs,Draw,The following statement contains a magic number: SBatch.DrawString(m_Screen.Font9px' "Bodies: " + m_NumberOfBodies'                   new Vector2(Position.X + (m_Size.X / 2) - m_Screen.Font9px.MeasureString("Bodies: ").X'                  Position.Y + (m_Size.Y - 70))' new Color(255' 249' 157)' 0.0f' new Vector2(0' 0)' 1.0f'                  SpriteEffects.None' m_Depth);
Magic Number,Gonzo.Elements,UIBodyBrowser,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIBodyBrowser.cs,Draw,The following statement contains a magic number: SBatch.DrawString(m_Screen.Font9px' "Bodies: " + m_NumberOfBodies'                   new Vector2(Position.X + (m_Size.X / 2) - m_Screen.Font9px.MeasureString("Bodies: ").X'                  Position.Y + (m_Size.Y - 70))' new Color(255' 249' 157)' 0.0f' new Vector2(0' 0)' 1.0f'                  SpriteEffects.None' m_Depth);
Magic Number,Gonzo.Elements,UIBodyBrowser,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIBodyBrowser.cs,Draw,The following statement contains a magic number: switch (m_SelectedSkintype)              {                  case Elements.SkinType.Light:                      for (int X = 0; X <= m_Map.GetUpperBound(1); X++)                      {                          for (int Y = 0; Y <= m_Map.GetUpperBound(0); Y++)                          {                              m_Thumb = FileManager.GetTexture(m_Sex == AvatarSex.Male ?                                  m_LightAppearances[(Y * X) + m_Counter].LightAppearance.ThumbnailID.UniqueID :                                  m_LightFemaleAppearances[(Y * X) + m_Counter].LightAppearance.ThumbnailID.UniqueID);                              m_BtnWidth = m_SkinBtns[m_Counter + Y].BtnTex.Width / 4;                              m_BtnHeight = m_SkinBtns[m_Counter + Y].BtnTex.Height;                                Vector2 TexturePosition = new Vector2(X * (BodyTileSize.X + 16)' Y * (BodyTileSize.Y));                              Vector2 ButtonPosition = new Vector2(TexturePosition.X - 3' TexturePosition.Y - 5);                                SBatch.Draw(m_SkinBtns[Y + m_Counter].BtnTex' new Rectangle((int)(Position.X +                                  ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)'                                  new Rectangle((int)m_SkinBtns[m_Counter + Y].SourcePosition.X'                                  (int)m_SkinBtns[m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)'                                  Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);                                SBatch.Draw(m_Thumb' new Rectangle((int)(Position.X + TexturePosition.X)'                                  (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)'                                  null' Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth);                                if (m_Counter < m_NumberOfSkinsToDisplay)                                  m_Counter++;                          }                      }                        break;                  case Elements.SkinType.Medium:                      for (int X = 0; X <= m_Map.GetUpperBound(1); X++)                      {                          for (int Y = 0; Y <= m_Map.GetUpperBound(0); Y++)                          {                              m_Thumb = FileManager.GetTexture(m_Sex == AvatarSex.Male ?                                  m_MediumAppearances[(Y * X) + m_Counter].MediumAppearance.ThumbnailID.UniqueID :                                  m_MediumFemaleAppearances[(Y * X) + m_Counter].MediumAppearance.ThumbnailID.UniqueID);                              m_BtnWidth = m_SkinBtns[m_Counter + Y].BtnTex.Width / 4;                              m_BtnHeight = m_SkinBtns[m_Counter + Y].BtnTex.Height;                                Vector2 TexturePosition = new Vector2(X * (BodyTileSize.X + 16)' Y * (BodyTileSize.Y));                              Vector2 ButtonPosition = new Vector2(TexturePosition.X - 3' TexturePosition.Y - 5);                                SBatch.Draw(m_SkinBtns[Y + m_Counter].BtnTex' new Rectangle((int)(Position.X +                                  ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)'                                  new Rectangle((int)m_SkinBtns[m_Counter + Y].SourcePosition.X'                                  (int)m_SkinBtns[m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)'                                  Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);                                SBatch.Draw(m_Thumb' new Rectangle((int)(Position.X + TexturePosition.X)'                                  (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)'                                  null' Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth);                                if (m_Counter < m_NumberOfSkinsToDisplay)                                  m_Counter++;                          }                      }                        break;                  case Elements.SkinType.Dark:                      for (int X = 0; X <= m_Map.GetUpperBound(1); X++)                      {                          for (int Y = 0; Y <= m_Map.GetUpperBound(0); Y++)                          {                              m_Thumb = FileManager.GetTexture(m_Sex == AvatarSex.Male ?                                  m_DarkAppearances[(Y * X) + m_Counter].DarkAppearance.ThumbnailID.UniqueID :                                  m_DarkFemaleAppearances[(Y  * X) + m_Counter].DarkAppearance.ThumbnailID.UniqueID);                              m_BtnWidth = m_SkinBtns[m_Counter + Y].BtnTex.Width / 4 ;                              m_BtnHeight = m_SkinBtns[m_Counter + Y].BtnTex.Height;                                Vector2 TexturePosition = new Vector2(X * (BodyTileSize.X + 16)' Y * (BodyTileSize.Y));                              Vector2 ButtonPosition = new Vector2(TexturePosition.X - 3' TexturePosition.Y - 5);                                SBatch.Draw(m_SkinBtns[Y + m_Counter].BtnTex' new Rectangle((int)(Position.X +                                  ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)'                                  new Rectangle((int)m_SkinBtns[m_Counter + Y].SourcePosition.X'                                  (int)m_SkinBtns[m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)'                                  Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);                                SBatch.Draw(m_Thumb' new Rectangle((int)(Position.X + TexturePosition.X)'                                  (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)'                                  null' Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth);                                if (m_Counter < m_NumberOfSkinsToDisplay)                                  m_Counter++;                          }                      }                        break;              }
Magic Number,Gonzo.Elements,UIBodyBrowser,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIBodyBrowser.cs,Draw,The following statement contains a magic number: switch (m_SelectedSkintype)              {                  case Elements.SkinType.Light:                      for (int X = 0; X <= m_Map.GetUpperBound(1); X++)                      {                          for (int Y = 0; Y <= m_Map.GetUpperBound(0); Y++)                          {                              m_Thumb = FileManager.GetTexture(m_Sex == AvatarSex.Male ?                                  m_LightAppearances[(Y * X) + m_Counter].LightAppearance.ThumbnailID.UniqueID :                                  m_LightFemaleAppearances[(Y * X) + m_Counter].LightAppearance.ThumbnailID.UniqueID);                              m_BtnWidth = m_SkinBtns[m_Counter + Y].BtnTex.Width / 4;                              m_BtnHeight = m_SkinBtns[m_Counter + Y].BtnTex.Height;                                Vector2 TexturePosition = new Vector2(X * (BodyTileSize.X + 16)' Y * (BodyTileSize.Y));                              Vector2 ButtonPosition = new Vector2(TexturePosition.X - 3' TexturePosition.Y - 5);                                SBatch.Draw(m_SkinBtns[Y + m_Counter].BtnTex' new Rectangle((int)(Position.X +                                  ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)'                                  new Rectangle((int)m_SkinBtns[m_Counter + Y].SourcePosition.X'                                  (int)m_SkinBtns[m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)'                                  Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);                                SBatch.Draw(m_Thumb' new Rectangle((int)(Position.X + TexturePosition.X)'                                  (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)'                                  null' Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth);                                if (m_Counter < m_NumberOfSkinsToDisplay)                                  m_Counter++;                          }                      }                        break;                  case Elements.SkinType.Medium:                      for (int X = 0; X <= m_Map.GetUpperBound(1); X++)                      {                          for (int Y = 0; Y <= m_Map.GetUpperBound(0); Y++)                          {                              m_Thumb = FileManager.GetTexture(m_Sex == AvatarSex.Male ?                                  m_MediumAppearances[(Y * X) + m_Counter].MediumAppearance.ThumbnailID.UniqueID :                                  m_MediumFemaleAppearances[(Y * X) + m_Counter].MediumAppearance.ThumbnailID.UniqueID);                              m_BtnWidth = m_SkinBtns[m_Counter + Y].BtnTex.Width / 4;                              m_BtnHeight = m_SkinBtns[m_Counter + Y].BtnTex.Height;                                Vector2 TexturePosition = new Vector2(X * (BodyTileSize.X + 16)' Y * (BodyTileSize.Y));                              Vector2 ButtonPosition = new Vector2(TexturePosition.X - 3' TexturePosition.Y - 5);                                SBatch.Draw(m_SkinBtns[Y + m_Counter].BtnTex' new Rectangle((int)(Position.X +                                  ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)'                                  new Rectangle((int)m_SkinBtns[m_Counter + Y].SourcePosition.X'                                  (int)m_SkinBtns[m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)'                                  Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);                                SBatch.Draw(m_Thumb' new Rectangle((int)(Position.X + TexturePosition.X)'                                  (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)'                                  null' Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth);                                if (m_Counter < m_NumberOfSkinsToDisplay)                                  m_Counter++;                          }                      }                        break;                  case Elements.SkinType.Dark:                      for (int X = 0; X <= m_Map.GetUpperBound(1); X++)                      {                          for (int Y = 0; Y <= m_Map.GetUpperBound(0); Y++)                          {                              m_Thumb = FileManager.GetTexture(m_Sex == AvatarSex.Male ?                                  m_DarkAppearances[(Y * X) + m_Counter].DarkAppearance.ThumbnailID.UniqueID :                                  m_DarkFemaleAppearances[(Y  * X) + m_Counter].DarkAppearance.ThumbnailID.UniqueID);                              m_BtnWidth = m_SkinBtns[m_Counter + Y].BtnTex.Width / 4 ;                              m_BtnHeight = m_SkinBtns[m_Counter + Y].BtnTex.Height;                                Vector2 TexturePosition = new Vector2(X * (BodyTileSize.X + 16)' Y * (BodyTileSize.Y));                              Vector2 ButtonPosition = new Vector2(TexturePosition.X - 3' TexturePosition.Y - 5);                                SBatch.Draw(m_SkinBtns[Y + m_Counter].BtnTex' new Rectangle((int)(Position.X +                                  ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)'                                  new Rectangle((int)m_SkinBtns[m_Counter + Y].SourcePosition.X'                                  (int)m_SkinBtns[m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)'                                  Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);                                SBatch.Draw(m_Thumb' new Rectangle((int)(Position.X + TexturePosition.X)'                                  (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)'                                  null' Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth);                                if (m_Counter < m_NumberOfSkinsToDisplay)                                  m_Counter++;                          }                      }                        break;              }
Magic Number,Gonzo.Elements,UIBodyBrowser,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIBodyBrowser.cs,Draw,The following statement contains a magic number: switch (m_SelectedSkintype)              {                  case Elements.SkinType.Light:                      for (int X = 0; X <= m_Map.GetUpperBound(1); X++)                      {                          for (int Y = 0; Y <= m_Map.GetUpperBound(0); Y++)                          {                              m_Thumb = FileManager.GetTexture(m_Sex == AvatarSex.Male ?                                  m_LightAppearances[(Y * X) + m_Counter].LightAppearance.ThumbnailID.UniqueID :                                  m_LightFemaleAppearances[(Y * X) + m_Counter].LightAppearance.ThumbnailID.UniqueID);                              m_BtnWidth = m_SkinBtns[m_Counter + Y].BtnTex.Width / 4;                              m_BtnHeight = m_SkinBtns[m_Counter + Y].BtnTex.Height;                                Vector2 TexturePosition = new Vector2(X * (BodyTileSize.X + 16)' Y * (BodyTileSize.Y));                              Vector2 ButtonPosition = new Vector2(TexturePosition.X - 3' TexturePosition.Y - 5);                                SBatch.Draw(m_SkinBtns[Y + m_Counter].BtnTex' new Rectangle((int)(Position.X +                                  ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)'                                  new Rectangle((int)m_SkinBtns[m_Counter + Y].SourcePosition.X'                                  (int)m_SkinBtns[m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)'                                  Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);                                SBatch.Draw(m_Thumb' new Rectangle((int)(Position.X + TexturePosition.X)'                                  (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)'                                  null' Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth);                                if (m_Counter < m_NumberOfSkinsToDisplay)                                  m_Counter++;                          }                      }                        break;                  case Elements.SkinType.Medium:                      for (int X = 0; X <= m_Map.GetUpperBound(1); X++)                      {                          for (int Y = 0; Y <= m_Map.GetUpperBound(0); Y++)                          {                              m_Thumb = FileManager.GetTexture(m_Sex == AvatarSex.Male ?                                  m_MediumAppearances[(Y * X) + m_Counter].MediumAppearance.ThumbnailID.UniqueID :                                  m_MediumFemaleAppearances[(Y * X) + m_Counter].MediumAppearance.ThumbnailID.UniqueID);                              m_BtnWidth = m_SkinBtns[m_Counter + Y].BtnTex.Width / 4;                              m_BtnHeight = m_SkinBtns[m_Counter + Y].BtnTex.Height;                                Vector2 TexturePosition = new Vector2(X * (BodyTileSize.X + 16)' Y * (BodyTileSize.Y));                              Vector2 ButtonPosition = new Vector2(TexturePosition.X - 3' TexturePosition.Y - 5);                                SBatch.Draw(m_SkinBtns[Y + m_Counter].BtnTex' new Rectangle((int)(Position.X +                                  ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)'                                  new Rectangle((int)m_SkinBtns[m_Counter + Y].SourcePosition.X'                                  (int)m_SkinBtns[m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)'                                  Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);                                SBatch.Draw(m_Thumb' new Rectangle((int)(Position.X + TexturePosition.X)'                                  (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)'                                  null' Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth);                                if (m_Counter < m_NumberOfSkinsToDisplay)                                  m_Counter++;                          }                      }                        break;                  case Elements.SkinType.Dark:                      for (int X = 0; X <= m_Map.GetUpperBound(1); X++)                      {                          for (int Y = 0; Y <= m_Map.GetUpperBound(0); Y++)                          {                              m_Thumb = FileManager.GetTexture(m_Sex == AvatarSex.Male ?                                  m_DarkAppearances[(Y * X) + m_Counter].DarkAppearance.ThumbnailID.UniqueID :                                  m_DarkFemaleAppearances[(Y  * X) + m_Counter].DarkAppearance.ThumbnailID.UniqueID);                              m_BtnWidth = m_SkinBtns[m_Counter + Y].BtnTex.Width / 4 ;                              m_BtnHeight = m_SkinBtns[m_Counter + Y].BtnTex.Height;                                Vector2 TexturePosition = new Vector2(X * (BodyTileSize.X + 16)' Y * (BodyTileSize.Y));                              Vector2 ButtonPosition = new Vector2(TexturePosition.X - 3' TexturePosition.Y - 5);                                SBatch.Draw(m_SkinBtns[Y + m_Counter].BtnTex' new Rectangle((int)(Position.X +                                  ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)'                                  new Rectangle((int)m_SkinBtns[m_Counter + Y].SourcePosition.X'                                  (int)m_SkinBtns[m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)'                                  Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);                                SBatch.Draw(m_Thumb' new Rectangle((int)(Position.X + TexturePosition.X)'                                  (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)'                                  null' Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth);                                if (m_Counter < m_NumberOfSkinsToDisplay)                                  m_Counter++;                          }                      }                        break;              }
Magic Number,Gonzo.Elements,UIBodyBrowser,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIBodyBrowser.cs,Draw,The following statement contains a magic number: switch (m_SelectedSkintype)              {                  case Elements.SkinType.Light:                      for (int X = 0; X <= m_Map.GetUpperBound(1); X++)                      {                          for (int Y = 0; Y <= m_Map.GetUpperBound(0); Y++)                          {                              m_Thumb = FileManager.GetTexture(m_Sex == AvatarSex.Male ?                                  m_LightAppearances[(Y * X) + m_Counter].LightAppearance.ThumbnailID.UniqueID :                                  m_LightFemaleAppearances[(Y * X) + m_Counter].LightAppearance.ThumbnailID.UniqueID);                              m_BtnWidth = m_SkinBtns[m_Counter + Y].BtnTex.Width / 4;                              m_BtnHeight = m_SkinBtns[m_Counter + Y].BtnTex.Height;                                Vector2 TexturePosition = new Vector2(X * (BodyTileSize.X + 16)' Y * (BodyTileSize.Y));                              Vector2 ButtonPosition = new Vector2(TexturePosition.X - 3' TexturePosition.Y - 5);                                SBatch.Draw(m_SkinBtns[Y + m_Counter].BtnTex' new Rectangle((int)(Position.X +                                  ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)'                                  new Rectangle((int)m_SkinBtns[m_Counter + Y].SourcePosition.X'                                  (int)m_SkinBtns[m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)'                                  Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);                                SBatch.Draw(m_Thumb' new Rectangle((int)(Position.X + TexturePosition.X)'                                  (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)'                                  null' Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth);                                if (m_Counter < m_NumberOfSkinsToDisplay)                                  m_Counter++;                          }                      }                        break;                  case Elements.SkinType.Medium:                      for (int X = 0; X <= m_Map.GetUpperBound(1); X++)                      {                          for (int Y = 0; Y <= m_Map.GetUpperBound(0); Y++)                          {                              m_Thumb = FileManager.GetTexture(m_Sex == AvatarSex.Male ?                                  m_MediumAppearances[(Y * X) + m_Counter].MediumAppearance.ThumbnailID.UniqueID :                                  m_MediumFemaleAppearances[(Y * X) + m_Counter].MediumAppearance.ThumbnailID.UniqueID);                              m_BtnWidth = m_SkinBtns[m_Counter + Y].BtnTex.Width / 4;                              m_BtnHeight = m_SkinBtns[m_Counter + Y].BtnTex.Height;                                Vector2 TexturePosition = new Vector2(X * (BodyTileSize.X + 16)' Y * (BodyTileSize.Y));                              Vector2 ButtonPosition = new Vector2(TexturePosition.X - 3' TexturePosition.Y - 5);                                SBatch.Draw(m_SkinBtns[Y + m_Counter].BtnTex' new Rectangle((int)(Position.X +                                  ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)'                                  new Rectangle((int)m_SkinBtns[m_Counter + Y].SourcePosition.X'                                  (int)m_SkinBtns[m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)'                                  Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);                                SBatch.Draw(m_Thumb' new Rectangle((int)(Position.X + TexturePosition.X)'                                  (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)'                                  null' Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth);                                if (m_Counter < m_NumberOfSkinsToDisplay)                                  m_Counter++;                          }                      }                        break;                  case Elements.SkinType.Dark:                      for (int X = 0; X <= m_Map.GetUpperBound(1); X++)                      {                          for (int Y = 0; Y <= m_Map.GetUpperBound(0); Y++)                          {                              m_Thumb = FileManager.GetTexture(m_Sex == AvatarSex.Male ?                                  m_DarkAppearances[(Y * X) + m_Counter].DarkAppearance.ThumbnailID.UniqueID :                                  m_DarkFemaleAppearances[(Y  * X) + m_Counter].DarkAppearance.ThumbnailID.UniqueID);                              m_BtnWidth = m_SkinBtns[m_Counter + Y].BtnTex.Width / 4 ;                              m_BtnHeight = m_SkinBtns[m_Counter + Y].BtnTex.Height;                                Vector2 TexturePosition = new Vector2(X * (BodyTileSize.X + 16)' Y * (BodyTileSize.Y));                              Vector2 ButtonPosition = new Vector2(TexturePosition.X - 3' TexturePosition.Y - 5);                                SBatch.Draw(m_SkinBtns[Y + m_Counter].BtnTex' new Rectangle((int)(Position.X +                                  ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)'                                  new Rectangle((int)m_SkinBtns[m_Counter + Y].SourcePosition.X'                                  (int)m_SkinBtns[m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)'                                  Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);                                SBatch.Draw(m_Thumb' new Rectangle((int)(Position.X + TexturePosition.X)'                                  (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)'                                  null' Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth);                                if (m_Counter < m_NumberOfSkinsToDisplay)                                  m_Counter++;                          }                      }                        break;              }
Magic Number,Gonzo.Elements,UIBodyBrowser,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIBodyBrowser.cs,Draw,The following statement contains a magic number: switch (m_SelectedSkintype)              {                  case Elements.SkinType.Light:                      for (int X = 0; X <= m_Map.GetUpperBound(1); X++)                      {                          for (int Y = 0; Y <= m_Map.GetUpperBound(0); Y++)                          {                              m_Thumb = FileManager.GetTexture(m_Sex == AvatarSex.Male ?                                  m_LightAppearances[(Y * X) + m_Counter].LightAppearance.ThumbnailID.UniqueID :                                  m_LightFemaleAppearances[(Y * X) + m_Counter].LightAppearance.ThumbnailID.UniqueID);                              m_BtnWidth = m_SkinBtns[m_Counter + Y].BtnTex.Width / 4;                              m_BtnHeight = m_SkinBtns[m_Counter + Y].BtnTex.Height;                                Vector2 TexturePosition = new Vector2(X * (BodyTileSize.X + 16)' Y * (BodyTileSize.Y));                              Vector2 ButtonPosition = new Vector2(TexturePosition.X - 3' TexturePosition.Y - 5);                                SBatch.Draw(m_SkinBtns[Y + m_Counter].BtnTex' new Rectangle((int)(Position.X +                                  ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)'                                  new Rectangle((int)m_SkinBtns[m_Counter + Y].SourcePosition.X'                                  (int)m_SkinBtns[m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)'                                  Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);                                SBatch.Draw(m_Thumb' new Rectangle((int)(Position.X + TexturePosition.X)'                                  (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)'                                  null' Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth);                                if (m_Counter < m_NumberOfSkinsToDisplay)                                  m_Counter++;                          }                      }                        break;                  case Elements.SkinType.Medium:                      for (int X = 0; X <= m_Map.GetUpperBound(1); X++)                      {                          for (int Y = 0; Y <= m_Map.GetUpperBound(0); Y++)                          {                              m_Thumb = FileManager.GetTexture(m_Sex == AvatarSex.Male ?                                  m_MediumAppearances[(Y * X) + m_Counter].MediumAppearance.ThumbnailID.UniqueID :                                  m_MediumFemaleAppearances[(Y * X) + m_Counter].MediumAppearance.ThumbnailID.UniqueID);                              m_BtnWidth = m_SkinBtns[m_Counter + Y].BtnTex.Width / 4;                              m_BtnHeight = m_SkinBtns[m_Counter + Y].BtnTex.Height;                                Vector2 TexturePosition = new Vector2(X * (BodyTileSize.X + 16)' Y * (BodyTileSize.Y));                              Vector2 ButtonPosition = new Vector2(TexturePosition.X - 3' TexturePosition.Y - 5);                                SBatch.Draw(m_SkinBtns[Y + m_Counter].BtnTex' new Rectangle((int)(Position.X +                                  ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)'                                  new Rectangle((int)m_SkinBtns[m_Counter + Y].SourcePosition.X'                                  (int)m_SkinBtns[m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)'                                  Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);                                SBatch.Draw(m_Thumb' new Rectangle((int)(Position.X + TexturePosition.X)'                                  (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)'                                  null' Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth);                                if (m_Counter < m_NumberOfSkinsToDisplay)                                  m_Counter++;                          }                      }                        break;                  case Elements.SkinType.Dark:                      for (int X = 0; X <= m_Map.GetUpperBound(1); X++)                      {                          for (int Y = 0; Y <= m_Map.GetUpperBound(0); Y++)                          {                              m_Thumb = FileManager.GetTexture(m_Sex == AvatarSex.Male ?                                  m_DarkAppearances[(Y * X) + m_Counter].DarkAppearance.ThumbnailID.UniqueID :                                  m_DarkFemaleAppearances[(Y  * X) + m_Counter].DarkAppearance.ThumbnailID.UniqueID);                              m_BtnWidth = m_SkinBtns[m_Counter + Y].BtnTex.Width / 4 ;                              m_BtnHeight = m_SkinBtns[m_Counter + Y].BtnTex.Height;                                Vector2 TexturePosition = new Vector2(X * (BodyTileSize.X + 16)' Y * (BodyTileSize.Y));                              Vector2 ButtonPosition = new Vector2(TexturePosition.X - 3' TexturePosition.Y - 5);                                SBatch.Draw(m_SkinBtns[Y + m_Counter].BtnTex' new Rectangle((int)(Position.X +                                  ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)'                                  new Rectangle((int)m_SkinBtns[m_Counter + Y].SourcePosition.X'                                  (int)m_SkinBtns[m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)'                                  Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);                                SBatch.Draw(m_Thumb' new Rectangle((int)(Position.X + TexturePosition.X)'                                  (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)'                                  null' Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth);                                if (m_Counter < m_NumberOfSkinsToDisplay)                                  m_Counter++;                          }                      }                        break;              }
Magic Number,Gonzo.Elements,UIBodyBrowser,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIBodyBrowser.cs,Draw,The following statement contains a magic number: switch (m_SelectedSkintype)              {                  case Elements.SkinType.Light:                      for (int X = 0; X <= m_Map.GetUpperBound(1); X++)                      {                          for (int Y = 0; Y <= m_Map.GetUpperBound(0); Y++)                          {                              m_Thumb = FileManager.GetTexture(m_Sex == AvatarSex.Male ?                                  m_LightAppearances[(Y * X) + m_Counter].LightAppearance.ThumbnailID.UniqueID :                                  m_LightFemaleAppearances[(Y * X) + m_Counter].LightAppearance.ThumbnailID.UniqueID);                              m_BtnWidth = m_SkinBtns[m_Counter + Y].BtnTex.Width / 4;                              m_BtnHeight = m_SkinBtns[m_Counter + Y].BtnTex.Height;                                Vector2 TexturePosition = new Vector2(X * (BodyTileSize.X + 16)' Y * (BodyTileSize.Y));                              Vector2 ButtonPosition = new Vector2(TexturePosition.X - 3' TexturePosition.Y - 5);                                SBatch.Draw(m_SkinBtns[Y + m_Counter].BtnTex' new Rectangle((int)(Position.X +                                  ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)'                                  new Rectangle((int)m_SkinBtns[m_Counter + Y].SourcePosition.X'                                  (int)m_SkinBtns[m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)'                                  Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);                                SBatch.Draw(m_Thumb' new Rectangle((int)(Position.X + TexturePosition.X)'                                  (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)'                                  null' Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth);                                if (m_Counter < m_NumberOfSkinsToDisplay)                                  m_Counter++;                          }                      }                        break;                  case Elements.SkinType.Medium:                      for (int X = 0; X <= m_Map.GetUpperBound(1); X++)                      {                          for (int Y = 0; Y <= m_Map.GetUpperBound(0); Y++)                          {                              m_Thumb = FileManager.GetTexture(m_Sex == AvatarSex.Male ?                                  m_MediumAppearances[(Y * X) + m_Counter].MediumAppearance.ThumbnailID.UniqueID :                                  m_MediumFemaleAppearances[(Y * X) + m_Counter].MediumAppearance.ThumbnailID.UniqueID);                              m_BtnWidth = m_SkinBtns[m_Counter + Y].BtnTex.Width / 4;                              m_BtnHeight = m_SkinBtns[m_Counter + Y].BtnTex.Height;                                Vector2 TexturePosition = new Vector2(X * (BodyTileSize.X + 16)' Y * (BodyTileSize.Y));                              Vector2 ButtonPosition = new Vector2(TexturePosition.X - 3' TexturePosition.Y - 5);                                SBatch.Draw(m_SkinBtns[Y + m_Counter].BtnTex' new Rectangle((int)(Position.X +                                  ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)'                                  new Rectangle((int)m_SkinBtns[m_Counter + Y].SourcePosition.X'                                  (int)m_SkinBtns[m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)'                                  Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);                                SBatch.Draw(m_Thumb' new Rectangle((int)(Position.X + TexturePosition.X)'                                  (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)'                                  null' Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth);                                if (m_Counter < m_NumberOfSkinsToDisplay)                                  m_Counter++;                          }                      }                        break;                  case Elements.SkinType.Dark:                      for (int X = 0; X <= m_Map.GetUpperBound(1); X++)                      {                          for (int Y = 0; Y <= m_Map.GetUpperBound(0); Y++)                          {                              m_Thumb = FileManager.GetTexture(m_Sex == AvatarSex.Male ?                                  m_DarkAppearances[(Y * X) + m_Counter].DarkAppearance.ThumbnailID.UniqueID :                                  m_DarkFemaleAppearances[(Y  * X) + m_Counter].DarkAppearance.ThumbnailID.UniqueID);                              m_BtnWidth = m_SkinBtns[m_Counter + Y].BtnTex.Width / 4 ;                              m_BtnHeight = m_SkinBtns[m_Counter + Y].BtnTex.Height;                                Vector2 TexturePosition = new Vector2(X * (BodyTileSize.X + 16)' Y * (BodyTileSize.Y));                              Vector2 ButtonPosition = new Vector2(TexturePosition.X - 3' TexturePosition.Y - 5);                                SBatch.Draw(m_SkinBtns[Y + m_Counter].BtnTex' new Rectangle((int)(Position.X +                                  ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)'                                  new Rectangle((int)m_SkinBtns[m_Counter + Y].SourcePosition.X'                                  (int)m_SkinBtns[m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)'                                  Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);                                SBatch.Draw(m_Thumb' new Rectangle((int)(Position.X + TexturePosition.X)'                                  (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)'                                  null' Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth);                                if (m_Counter < m_NumberOfSkinsToDisplay)                                  m_Counter++;                          }                      }                        break;              }
Magic Number,Gonzo.Elements,UIBodyBrowser,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIBodyBrowser.cs,Draw,The following statement contains a magic number: switch (m_SelectedSkintype)              {                  case Elements.SkinType.Light:                      for (int X = 0; X <= m_Map.GetUpperBound(1); X++)                      {                          for (int Y = 0; Y <= m_Map.GetUpperBound(0); Y++)                          {                              m_Thumb = FileManager.GetTexture(m_Sex == AvatarSex.Male ?                                  m_LightAppearances[(Y * X) + m_Counter].LightAppearance.ThumbnailID.UniqueID :                                  m_LightFemaleAppearances[(Y * X) + m_Counter].LightAppearance.ThumbnailID.UniqueID);                              m_BtnWidth = m_SkinBtns[m_Counter + Y].BtnTex.Width / 4;                              m_BtnHeight = m_SkinBtns[m_Counter + Y].BtnTex.Height;                                Vector2 TexturePosition = new Vector2(X * (BodyTileSize.X + 16)' Y * (BodyTileSize.Y));                              Vector2 ButtonPosition = new Vector2(TexturePosition.X - 3' TexturePosition.Y - 5);                                SBatch.Draw(m_SkinBtns[Y + m_Counter].BtnTex' new Rectangle((int)(Position.X +                                  ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)'                                  new Rectangle((int)m_SkinBtns[m_Counter + Y].SourcePosition.X'                                  (int)m_SkinBtns[m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)'                                  Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);                                SBatch.Draw(m_Thumb' new Rectangle((int)(Position.X + TexturePosition.X)'                                  (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)'                                  null' Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth);                                if (m_Counter < m_NumberOfSkinsToDisplay)                                  m_Counter++;                          }                      }                        break;                  case Elements.SkinType.Medium:                      for (int X = 0; X <= m_Map.GetUpperBound(1); X++)                      {                          for (int Y = 0; Y <= m_Map.GetUpperBound(0); Y++)                          {                              m_Thumb = FileManager.GetTexture(m_Sex == AvatarSex.Male ?                                  m_MediumAppearances[(Y * X) + m_Counter].MediumAppearance.ThumbnailID.UniqueID :                                  m_MediumFemaleAppearances[(Y * X) + m_Counter].MediumAppearance.ThumbnailID.UniqueID);                              m_BtnWidth = m_SkinBtns[m_Counter + Y].BtnTex.Width / 4;                              m_BtnHeight = m_SkinBtns[m_Counter + Y].BtnTex.Height;                                Vector2 TexturePosition = new Vector2(X * (BodyTileSize.X + 16)' Y * (BodyTileSize.Y));                              Vector2 ButtonPosition = new Vector2(TexturePosition.X - 3' TexturePosition.Y - 5);                                SBatch.Draw(m_SkinBtns[Y + m_Counter].BtnTex' new Rectangle((int)(Position.X +                                  ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)'                                  new Rectangle((int)m_SkinBtns[m_Counter + Y].SourcePosition.X'                                  (int)m_SkinBtns[m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)'                                  Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);                                SBatch.Draw(m_Thumb' new Rectangle((int)(Position.X + TexturePosition.X)'                                  (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)'                                  null' Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth);                                if (m_Counter < m_NumberOfSkinsToDisplay)                                  m_Counter++;                          }                      }                        break;                  case Elements.SkinType.Dark:                      for (int X = 0; X <= m_Map.GetUpperBound(1); X++)                      {                          for (int Y = 0; Y <= m_Map.GetUpperBound(0); Y++)                          {                              m_Thumb = FileManager.GetTexture(m_Sex == AvatarSex.Male ?                                  m_DarkAppearances[(Y * X) + m_Counter].DarkAppearance.ThumbnailID.UniqueID :                                  m_DarkFemaleAppearances[(Y  * X) + m_Counter].DarkAppearance.ThumbnailID.UniqueID);                              m_BtnWidth = m_SkinBtns[m_Counter + Y].BtnTex.Width / 4 ;                              m_BtnHeight = m_SkinBtns[m_Counter + Y].BtnTex.Height;                                Vector2 TexturePosition = new Vector2(X * (BodyTileSize.X + 16)' Y * (BodyTileSize.Y));                              Vector2 ButtonPosition = new Vector2(TexturePosition.X - 3' TexturePosition.Y - 5);                                SBatch.Draw(m_SkinBtns[Y + m_Counter].BtnTex' new Rectangle((int)(Position.X +                                  ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)'                                  new Rectangle((int)m_SkinBtns[m_Counter + Y].SourcePosition.X'                                  (int)m_SkinBtns[m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)'                                  Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);                                SBatch.Draw(m_Thumb' new Rectangle((int)(Position.X + TexturePosition.X)'                                  (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)'                                  null' Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth);                                if (m_Counter < m_NumberOfSkinsToDisplay)                                  m_Counter++;                          }                      }                        break;              }
Magic Number,Gonzo.Elements,UIBodyBrowser,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIBodyBrowser.cs,Draw,The following statement contains a magic number: switch (m_SelectedSkintype)              {                  case Elements.SkinType.Light:                      for (int X = 0; X <= m_Map.GetUpperBound(1); X++)                      {                          for (int Y = 0; Y <= m_Map.GetUpperBound(0); Y++)                          {                              m_Thumb = FileManager.GetTexture(m_Sex == AvatarSex.Male ?                                  m_LightAppearances[(Y * X) + m_Counter].LightAppearance.ThumbnailID.UniqueID :                                  m_LightFemaleAppearances[(Y * X) + m_Counter].LightAppearance.ThumbnailID.UniqueID);                              m_BtnWidth = m_SkinBtns[m_Counter + Y].BtnTex.Width / 4;                              m_BtnHeight = m_SkinBtns[m_Counter + Y].BtnTex.Height;                                Vector2 TexturePosition = new Vector2(X * (BodyTileSize.X + 16)' Y * (BodyTileSize.Y));                              Vector2 ButtonPosition = new Vector2(TexturePosition.X - 3' TexturePosition.Y - 5);                                SBatch.Draw(m_SkinBtns[Y + m_Counter].BtnTex' new Rectangle((int)(Position.X +                                  ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)'                                  new Rectangle((int)m_SkinBtns[m_Counter + Y].SourcePosition.X'                                  (int)m_SkinBtns[m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)'                                  Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);                                SBatch.Draw(m_Thumb' new Rectangle((int)(Position.X + TexturePosition.X)'                                  (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)'                                  null' Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth);                                if (m_Counter < m_NumberOfSkinsToDisplay)                                  m_Counter++;                          }                      }                        break;                  case Elements.SkinType.Medium:                      for (int X = 0; X <= m_Map.GetUpperBound(1); X++)                      {                          for (int Y = 0; Y <= m_Map.GetUpperBound(0); Y++)                          {                              m_Thumb = FileManager.GetTexture(m_Sex == AvatarSex.Male ?                                  m_MediumAppearances[(Y * X) + m_Counter].MediumAppearance.ThumbnailID.UniqueID :                                  m_MediumFemaleAppearances[(Y * X) + m_Counter].MediumAppearance.ThumbnailID.UniqueID);                              m_BtnWidth = m_SkinBtns[m_Counter + Y].BtnTex.Width / 4;                              m_BtnHeight = m_SkinBtns[m_Counter + Y].BtnTex.Height;                                Vector2 TexturePosition = new Vector2(X * (BodyTileSize.X + 16)' Y * (BodyTileSize.Y));                              Vector2 ButtonPosition = new Vector2(TexturePosition.X - 3' TexturePosition.Y - 5);                                SBatch.Draw(m_SkinBtns[Y + m_Counter].BtnTex' new Rectangle((int)(Position.X +                                  ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)'                                  new Rectangle((int)m_SkinBtns[m_Counter + Y].SourcePosition.X'                                  (int)m_SkinBtns[m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)'                                  Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);                                SBatch.Draw(m_Thumb' new Rectangle((int)(Position.X + TexturePosition.X)'                                  (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)'                                  null' Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth);                                if (m_Counter < m_NumberOfSkinsToDisplay)                                  m_Counter++;                          }                      }                        break;                  case Elements.SkinType.Dark:                      for (int X = 0; X <= m_Map.GetUpperBound(1); X++)                      {                          for (int Y = 0; Y <= m_Map.GetUpperBound(0); Y++)                          {                              m_Thumb = FileManager.GetTexture(m_Sex == AvatarSex.Male ?                                  m_DarkAppearances[(Y * X) + m_Counter].DarkAppearance.ThumbnailID.UniqueID :                                  m_DarkFemaleAppearances[(Y  * X) + m_Counter].DarkAppearance.ThumbnailID.UniqueID);                              m_BtnWidth = m_SkinBtns[m_Counter + Y].BtnTex.Width / 4 ;                              m_BtnHeight = m_SkinBtns[m_Counter + Y].BtnTex.Height;                                Vector2 TexturePosition = new Vector2(X * (BodyTileSize.X + 16)' Y * (BodyTileSize.Y));                              Vector2 ButtonPosition = new Vector2(TexturePosition.X - 3' TexturePosition.Y - 5);                                SBatch.Draw(m_SkinBtns[Y + m_Counter].BtnTex' new Rectangle((int)(Position.X +                                  ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)'                                  new Rectangle((int)m_SkinBtns[m_Counter + Y].SourcePosition.X'                                  (int)m_SkinBtns[m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)'                                  Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);                                SBatch.Draw(m_Thumb' new Rectangle((int)(Position.X + TexturePosition.X)'                                  (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)'                                  null' Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth);                                if (m_Counter < m_NumberOfSkinsToDisplay)                                  m_Counter++;                          }                      }                        break;              }
Magic Number,Gonzo.Elements,UIBodyBrowser,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIBodyBrowser.cs,Draw,The following statement contains a magic number: switch (m_SelectedSkintype)              {                  case Elements.SkinType.Light:                      for (int X = 0; X <= m_Map.GetUpperBound(1); X++)                      {                          for (int Y = 0; Y <= m_Map.GetUpperBound(0); Y++)                          {                              m_Thumb = FileManager.GetTexture(m_Sex == AvatarSex.Male ?                                  m_LightAppearances[(Y * X) + m_Counter].LightAppearance.ThumbnailID.UniqueID :                                  m_LightFemaleAppearances[(Y * X) + m_Counter].LightAppearance.ThumbnailID.UniqueID);                              m_BtnWidth = m_SkinBtns[m_Counter + Y].BtnTex.Width / 4;                              m_BtnHeight = m_SkinBtns[m_Counter + Y].BtnTex.Height;                                Vector2 TexturePosition = new Vector2(X * (BodyTileSize.X + 16)' Y * (BodyTileSize.Y));                              Vector2 ButtonPosition = new Vector2(TexturePosition.X - 3' TexturePosition.Y - 5);                                SBatch.Draw(m_SkinBtns[Y + m_Counter].BtnTex' new Rectangle((int)(Position.X +                                  ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)'                                  new Rectangle((int)m_SkinBtns[m_Counter + Y].SourcePosition.X'                                  (int)m_SkinBtns[m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)'                                  Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);                                SBatch.Draw(m_Thumb' new Rectangle((int)(Position.X + TexturePosition.X)'                                  (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)'                                  null' Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth);                                if (m_Counter < m_NumberOfSkinsToDisplay)                                  m_Counter++;                          }                      }                        break;                  case Elements.SkinType.Medium:                      for (int X = 0; X <= m_Map.GetUpperBound(1); X++)                      {                          for (int Y = 0; Y <= m_Map.GetUpperBound(0); Y++)                          {                              m_Thumb = FileManager.GetTexture(m_Sex == AvatarSex.Male ?                                  m_MediumAppearances[(Y * X) + m_Counter].MediumAppearance.ThumbnailID.UniqueID :                                  m_MediumFemaleAppearances[(Y * X) + m_Counter].MediumAppearance.ThumbnailID.UniqueID);                              m_BtnWidth = m_SkinBtns[m_Counter + Y].BtnTex.Width / 4;                              m_BtnHeight = m_SkinBtns[m_Counter + Y].BtnTex.Height;                                Vector2 TexturePosition = new Vector2(X * (BodyTileSize.X + 16)' Y * (BodyTileSize.Y));                              Vector2 ButtonPosition = new Vector2(TexturePosition.X - 3' TexturePosition.Y - 5);                                SBatch.Draw(m_SkinBtns[Y + m_Counter].BtnTex' new Rectangle((int)(Position.X +                                  ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)'                                  new Rectangle((int)m_SkinBtns[m_Counter + Y].SourcePosition.X'                                  (int)m_SkinBtns[m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)'                                  Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);                                SBatch.Draw(m_Thumb' new Rectangle((int)(Position.X + TexturePosition.X)'                                  (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)'                                  null' Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth);                                if (m_Counter < m_NumberOfSkinsToDisplay)                                  m_Counter++;                          }                      }                        break;                  case Elements.SkinType.Dark:                      for (int X = 0; X <= m_Map.GetUpperBound(1); X++)                      {                          for (int Y = 0; Y <= m_Map.GetUpperBound(0); Y++)                          {                              m_Thumb = FileManager.GetTexture(m_Sex == AvatarSex.Male ?                                  m_DarkAppearances[(Y * X) + m_Counter].DarkAppearance.ThumbnailID.UniqueID :                                  m_DarkFemaleAppearances[(Y  * X) + m_Counter].DarkAppearance.ThumbnailID.UniqueID);                              m_BtnWidth = m_SkinBtns[m_Counter + Y].BtnTex.Width / 4 ;                              m_BtnHeight = m_SkinBtns[m_Counter + Y].BtnTex.Height;                                Vector2 TexturePosition = new Vector2(X * (BodyTileSize.X + 16)' Y * (BodyTileSize.Y));                              Vector2 ButtonPosition = new Vector2(TexturePosition.X - 3' TexturePosition.Y - 5);                                SBatch.Draw(m_SkinBtns[Y + m_Counter].BtnTex' new Rectangle((int)(Position.X +                                  ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)'                                  new Rectangle((int)m_SkinBtns[m_Counter + Y].SourcePosition.X'                                  (int)m_SkinBtns[m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)'                                  Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);                                SBatch.Draw(m_Thumb' new Rectangle((int)(Position.X + TexturePosition.X)'                                  (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)'                                  null' Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth);                                if (m_Counter < m_NumberOfSkinsToDisplay)                                  m_Counter++;                          }                      }                        break;              }
Magic Number,Gonzo.Elements,UIBodyBrowser,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIBodyBrowser.cs,Draw,The following statement contains a magic number: switch (m_SelectedSkintype)              {                  case Elements.SkinType.Light:                      for (int X = 0; X <= m_Map.GetUpperBound(1); X++)                      {                          for (int Y = 0; Y <= m_Map.GetUpperBound(0); Y++)                          {                              m_Thumb = FileManager.GetTexture(m_Sex == AvatarSex.Male ?                                  m_LightAppearances[(Y * X) + m_Counter].LightAppearance.ThumbnailID.UniqueID :                                  m_LightFemaleAppearances[(Y * X) + m_Counter].LightAppearance.ThumbnailID.UniqueID);                              m_BtnWidth = m_SkinBtns[m_Counter + Y].BtnTex.Width / 4;                              m_BtnHeight = m_SkinBtns[m_Counter + Y].BtnTex.Height;                                Vector2 TexturePosition = new Vector2(X * (BodyTileSize.X + 16)' Y * (BodyTileSize.Y));                              Vector2 ButtonPosition = new Vector2(TexturePosition.X - 3' TexturePosition.Y - 5);                                SBatch.Draw(m_SkinBtns[Y + m_Counter].BtnTex' new Rectangle((int)(Position.X +                                  ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)'                                  new Rectangle((int)m_SkinBtns[m_Counter + Y].SourcePosition.X'                                  (int)m_SkinBtns[m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)'                                  Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);                                SBatch.Draw(m_Thumb' new Rectangle((int)(Position.X + TexturePosition.X)'                                  (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)'                                  null' Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth);                                if (m_Counter < m_NumberOfSkinsToDisplay)                                  m_Counter++;                          }                      }                        break;                  case Elements.SkinType.Medium:                      for (int X = 0; X <= m_Map.GetUpperBound(1); X++)                      {                          for (int Y = 0; Y <= m_Map.GetUpperBound(0); Y++)                          {                              m_Thumb = FileManager.GetTexture(m_Sex == AvatarSex.Male ?                                  m_MediumAppearances[(Y * X) + m_Counter].MediumAppearance.ThumbnailID.UniqueID :                                  m_MediumFemaleAppearances[(Y * X) + m_Counter].MediumAppearance.ThumbnailID.UniqueID);                              m_BtnWidth = m_SkinBtns[m_Counter + Y].BtnTex.Width / 4;                              m_BtnHeight = m_SkinBtns[m_Counter + Y].BtnTex.Height;                                Vector2 TexturePosition = new Vector2(X * (BodyTileSize.X + 16)' Y * (BodyTileSize.Y));                              Vector2 ButtonPosition = new Vector2(TexturePosition.X - 3' TexturePosition.Y - 5);                                SBatch.Draw(m_SkinBtns[Y + m_Counter].BtnTex' new Rectangle((int)(Position.X +                                  ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)'                                  new Rectangle((int)m_SkinBtns[m_Counter + Y].SourcePosition.X'                                  (int)m_SkinBtns[m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)'                                  Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);                                SBatch.Draw(m_Thumb' new Rectangle((int)(Position.X + TexturePosition.X)'                                  (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)'                                  null' Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth);                                if (m_Counter < m_NumberOfSkinsToDisplay)                                  m_Counter++;                          }                      }                        break;                  case Elements.SkinType.Dark:                      for (int X = 0; X <= m_Map.GetUpperBound(1); X++)                      {                          for (int Y = 0; Y <= m_Map.GetUpperBound(0); Y++)                          {                              m_Thumb = FileManager.GetTexture(m_Sex == AvatarSex.Male ?                                  m_DarkAppearances[(Y * X) + m_Counter].DarkAppearance.ThumbnailID.UniqueID :                                  m_DarkFemaleAppearances[(Y  * X) + m_Counter].DarkAppearance.ThumbnailID.UniqueID);                              m_BtnWidth = m_SkinBtns[m_Counter + Y].BtnTex.Width / 4 ;                              m_BtnHeight = m_SkinBtns[m_Counter + Y].BtnTex.Height;                                Vector2 TexturePosition = new Vector2(X * (BodyTileSize.X + 16)' Y * (BodyTileSize.Y));                              Vector2 ButtonPosition = new Vector2(TexturePosition.X - 3' TexturePosition.Y - 5);                                SBatch.Draw(m_SkinBtns[Y + m_Counter].BtnTex' new Rectangle((int)(Position.X +                                  ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)'                                  new Rectangle((int)m_SkinBtns[m_Counter + Y].SourcePosition.X'                                  (int)m_SkinBtns[m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)'                                  Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);                                SBatch.Draw(m_Thumb' new Rectangle((int)(Position.X + TexturePosition.X)'                                  (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)'                                  null' Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth);                                if (m_Counter < m_NumberOfSkinsToDisplay)                                  m_Counter++;                          }                      }                        break;              }
Magic Number,Gonzo.Elements,UIBodyBrowser,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIBodyBrowser.cs,Draw,The following statement contains a magic number: switch (m_SelectedSkintype)              {                  case Elements.SkinType.Light:                      for (int X = 0; X <= m_Map.GetUpperBound(1); X++)                      {                          for (int Y = 0; Y <= m_Map.GetUpperBound(0); Y++)                          {                              m_Thumb = FileManager.GetTexture(m_Sex == AvatarSex.Male ?                                  m_LightAppearances[(Y * X) + m_Counter].LightAppearance.ThumbnailID.UniqueID :                                  m_LightFemaleAppearances[(Y * X) + m_Counter].LightAppearance.ThumbnailID.UniqueID);                              m_BtnWidth = m_SkinBtns[m_Counter + Y].BtnTex.Width / 4;                              m_BtnHeight = m_SkinBtns[m_Counter + Y].BtnTex.Height;                                Vector2 TexturePosition = new Vector2(X * (BodyTileSize.X + 16)' Y * (BodyTileSize.Y));                              Vector2 ButtonPosition = new Vector2(TexturePosition.X - 3' TexturePosition.Y - 5);                                SBatch.Draw(m_SkinBtns[Y + m_Counter].BtnTex' new Rectangle((int)(Position.X +                                  ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)'                                  new Rectangle((int)m_SkinBtns[m_Counter + Y].SourcePosition.X'                                  (int)m_SkinBtns[m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)'                                  Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);                                SBatch.Draw(m_Thumb' new Rectangle((int)(Position.X + TexturePosition.X)'                                  (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)'                                  null' Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth);                                if (m_Counter < m_NumberOfSkinsToDisplay)                                  m_Counter++;                          }                      }                        break;                  case Elements.SkinType.Medium:                      for (int X = 0; X <= m_Map.GetUpperBound(1); X++)                      {                          for (int Y = 0; Y <= m_Map.GetUpperBound(0); Y++)                          {                              m_Thumb = FileManager.GetTexture(m_Sex == AvatarSex.Male ?                                  m_MediumAppearances[(Y * X) + m_Counter].MediumAppearance.ThumbnailID.UniqueID :                                  m_MediumFemaleAppearances[(Y * X) + m_Counter].MediumAppearance.ThumbnailID.UniqueID);                              m_BtnWidth = m_SkinBtns[m_Counter + Y].BtnTex.Width / 4;                              m_BtnHeight = m_SkinBtns[m_Counter + Y].BtnTex.Height;                                Vector2 TexturePosition = new Vector2(X * (BodyTileSize.X + 16)' Y * (BodyTileSize.Y));                              Vector2 ButtonPosition = new Vector2(TexturePosition.X - 3' TexturePosition.Y - 5);                                SBatch.Draw(m_SkinBtns[Y + m_Counter].BtnTex' new Rectangle((int)(Position.X +                                  ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)'                                  new Rectangle((int)m_SkinBtns[m_Counter + Y].SourcePosition.X'                                  (int)m_SkinBtns[m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)'                                  Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);                                SBatch.Draw(m_Thumb' new Rectangle((int)(Position.X + TexturePosition.X)'                                  (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)'                                  null' Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth);                                if (m_Counter < m_NumberOfSkinsToDisplay)                                  m_Counter++;                          }                      }                        break;                  case Elements.SkinType.Dark:                      for (int X = 0; X <= m_Map.GetUpperBound(1); X++)                      {                          for (int Y = 0; Y <= m_Map.GetUpperBound(0); Y++)                          {                              m_Thumb = FileManager.GetTexture(m_Sex == AvatarSex.Male ?                                  m_DarkAppearances[(Y * X) + m_Counter].DarkAppearance.ThumbnailID.UniqueID :                                  m_DarkFemaleAppearances[(Y  * X) + m_Counter].DarkAppearance.ThumbnailID.UniqueID);                              m_BtnWidth = m_SkinBtns[m_Counter + Y].BtnTex.Width / 4 ;                              m_BtnHeight = m_SkinBtns[m_Counter + Y].BtnTex.Height;                                Vector2 TexturePosition = new Vector2(X * (BodyTileSize.X + 16)' Y * (BodyTileSize.Y));                              Vector2 ButtonPosition = new Vector2(TexturePosition.X - 3' TexturePosition.Y - 5);                                SBatch.Draw(m_SkinBtns[Y + m_Counter].BtnTex' new Rectangle((int)(Position.X +                                  ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)'                                  new Rectangle((int)m_SkinBtns[m_Counter + Y].SourcePosition.X'                                  (int)m_SkinBtns[m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)'                                  Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);                                SBatch.Draw(m_Thumb' new Rectangle((int)(Position.X + TexturePosition.X)'                                  (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)'                                  null' Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth);                                if (m_Counter < m_NumberOfSkinsToDisplay)                                  m_Counter++;                          }                      }                        break;              }
Magic Number,Gonzo.Elements,UIBodyBrowser,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIBodyBrowser.cs,Draw,The following statement contains a magic number: switch (m_SelectedSkintype)              {                  case Elements.SkinType.Light:                      for (int X = 0; X <= m_Map.GetUpperBound(1); X++)                      {                          for (int Y = 0; Y <= m_Map.GetUpperBound(0); Y++)                          {                              m_Thumb = FileManager.GetTexture(m_Sex == AvatarSex.Male ?                                  m_LightAppearances[(Y * X) + m_Counter].LightAppearance.ThumbnailID.UniqueID :                                  m_LightFemaleAppearances[(Y * X) + m_Counter].LightAppearance.ThumbnailID.UniqueID);                              m_BtnWidth = m_SkinBtns[m_Counter + Y].BtnTex.Width / 4;                              m_BtnHeight = m_SkinBtns[m_Counter + Y].BtnTex.Height;                                Vector2 TexturePosition = new Vector2(X * (BodyTileSize.X + 16)' Y * (BodyTileSize.Y));                              Vector2 ButtonPosition = new Vector2(TexturePosition.X - 3' TexturePosition.Y - 5);                                SBatch.Draw(m_SkinBtns[Y + m_Counter].BtnTex' new Rectangle((int)(Position.X +                                  ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)'                                  new Rectangle((int)m_SkinBtns[m_Counter + Y].SourcePosition.X'                                  (int)m_SkinBtns[m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)'                                  Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);                                SBatch.Draw(m_Thumb' new Rectangle((int)(Position.X + TexturePosition.X)'                                  (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)'                                  null' Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth);                                if (m_Counter < m_NumberOfSkinsToDisplay)                                  m_Counter++;                          }                      }                        break;                  case Elements.SkinType.Medium:                      for (int X = 0; X <= m_Map.GetUpperBound(1); X++)                      {                          for (int Y = 0; Y <= m_Map.GetUpperBound(0); Y++)                          {                              m_Thumb = FileManager.GetTexture(m_Sex == AvatarSex.Male ?                                  m_MediumAppearances[(Y * X) + m_Counter].MediumAppearance.ThumbnailID.UniqueID :                                  m_MediumFemaleAppearances[(Y * X) + m_Counter].MediumAppearance.ThumbnailID.UniqueID);                              m_BtnWidth = m_SkinBtns[m_Counter + Y].BtnTex.Width / 4;                              m_BtnHeight = m_SkinBtns[m_Counter + Y].BtnTex.Height;                                Vector2 TexturePosition = new Vector2(X * (BodyTileSize.X + 16)' Y * (BodyTileSize.Y));                              Vector2 ButtonPosition = new Vector2(TexturePosition.X - 3' TexturePosition.Y - 5);                                SBatch.Draw(m_SkinBtns[Y + m_Counter].BtnTex' new Rectangle((int)(Position.X +                                  ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)'                                  new Rectangle((int)m_SkinBtns[m_Counter + Y].SourcePosition.X'                                  (int)m_SkinBtns[m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)'                                  Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);                                SBatch.Draw(m_Thumb' new Rectangle((int)(Position.X + TexturePosition.X)'                                  (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)'                                  null' Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth);                                if (m_Counter < m_NumberOfSkinsToDisplay)                                  m_Counter++;                          }                      }                        break;                  case Elements.SkinType.Dark:                      for (int X = 0; X <= m_Map.GetUpperBound(1); X++)                      {                          for (int Y = 0; Y <= m_Map.GetUpperBound(0); Y++)                          {                              m_Thumb = FileManager.GetTexture(m_Sex == AvatarSex.Male ?                                  m_DarkAppearances[(Y * X) + m_Counter].DarkAppearance.ThumbnailID.UniqueID :                                  m_DarkFemaleAppearances[(Y  * X) + m_Counter].DarkAppearance.ThumbnailID.UniqueID);                              m_BtnWidth = m_SkinBtns[m_Counter + Y].BtnTex.Width / 4 ;                              m_BtnHeight = m_SkinBtns[m_Counter + Y].BtnTex.Height;                                Vector2 TexturePosition = new Vector2(X * (BodyTileSize.X + 16)' Y * (BodyTileSize.Y));                              Vector2 ButtonPosition = new Vector2(TexturePosition.X - 3' TexturePosition.Y - 5);                                SBatch.Draw(m_SkinBtns[Y + m_Counter].BtnTex' new Rectangle((int)(Position.X +                                  ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)'                                  new Rectangle((int)m_SkinBtns[m_Counter + Y].SourcePosition.X'                                  (int)m_SkinBtns[m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)'                                  Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);                                SBatch.Draw(m_Thumb' new Rectangle((int)(Position.X + TexturePosition.X)'                                  (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)'                                  null' Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth);                                if (m_Counter < m_NumberOfSkinsToDisplay)                                  m_Counter++;                          }                      }                        break;              }
Magic Number,Gonzo.Elements,UIBodyBrowser,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIBodyBrowser.cs,Draw,The following statement contains a magic number: switch (m_SelectedSkintype)              {                  case Elements.SkinType.Light:                      for (int X = 0; X <= m_Map.GetUpperBound(1); X++)                      {                          for (int Y = 0; Y <= m_Map.GetUpperBound(0); Y++)                          {                              m_Thumb = FileManager.GetTexture(m_Sex == AvatarSex.Male ?                                  m_LightAppearances[(Y * X) + m_Counter].LightAppearance.ThumbnailID.UniqueID :                                  m_LightFemaleAppearances[(Y * X) + m_Counter].LightAppearance.ThumbnailID.UniqueID);                              m_BtnWidth = m_SkinBtns[m_Counter + Y].BtnTex.Width / 4;                              m_BtnHeight = m_SkinBtns[m_Counter + Y].BtnTex.Height;                                Vector2 TexturePosition = new Vector2(X * (BodyTileSize.X + 16)' Y * (BodyTileSize.Y));                              Vector2 ButtonPosition = new Vector2(TexturePosition.X - 3' TexturePosition.Y - 5);                                SBatch.Draw(m_SkinBtns[Y + m_Counter].BtnTex' new Rectangle((int)(Position.X +                                  ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)'                                  new Rectangle((int)m_SkinBtns[m_Counter + Y].SourcePosition.X'                                  (int)m_SkinBtns[m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)'                                  Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);                                SBatch.Draw(m_Thumb' new Rectangle((int)(Position.X + TexturePosition.X)'                                  (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)'                                  null' Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth);                                if (m_Counter < m_NumberOfSkinsToDisplay)                                  m_Counter++;                          }                      }                        break;                  case Elements.SkinType.Medium:                      for (int X = 0; X <= m_Map.GetUpperBound(1); X++)                      {                          for (int Y = 0; Y <= m_Map.GetUpperBound(0); Y++)                          {                              m_Thumb = FileManager.GetTexture(m_Sex == AvatarSex.Male ?                                  m_MediumAppearances[(Y * X) + m_Counter].MediumAppearance.ThumbnailID.UniqueID :                                  m_MediumFemaleAppearances[(Y * X) + m_Counter].MediumAppearance.ThumbnailID.UniqueID);                              m_BtnWidth = m_SkinBtns[m_Counter + Y].BtnTex.Width / 4;                              m_BtnHeight = m_SkinBtns[m_Counter + Y].BtnTex.Height;                                Vector2 TexturePosition = new Vector2(X * (BodyTileSize.X + 16)' Y * (BodyTileSize.Y));                              Vector2 ButtonPosition = new Vector2(TexturePosition.X - 3' TexturePosition.Y - 5);                                SBatch.Draw(m_SkinBtns[Y + m_Counter].BtnTex' new Rectangle((int)(Position.X +                                  ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)'                                  new Rectangle((int)m_SkinBtns[m_Counter + Y].SourcePosition.X'                                  (int)m_SkinBtns[m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)'                                  Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);                                SBatch.Draw(m_Thumb' new Rectangle((int)(Position.X + TexturePosition.X)'                                  (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)'                                  null' Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth);                                if (m_Counter < m_NumberOfSkinsToDisplay)                                  m_Counter++;                          }                      }                        break;                  case Elements.SkinType.Dark:                      for (int X = 0; X <= m_Map.GetUpperBound(1); X++)                      {                          for (int Y = 0; Y <= m_Map.GetUpperBound(0); Y++)                          {                              m_Thumb = FileManager.GetTexture(m_Sex == AvatarSex.Male ?                                  m_DarkAppearances[(Y * X) + m_Counter].DarkAppearance.ThumbnailID.UniqueID :                                  m_DarkFemaleAppearances[(Y  * X) + m_Counter].DarkAppearance.ThumbnailID.UniqueID);                              m_BtnWidth = m_SkinBtns[m_Counter + Y].BtnTex.Width / 4 ;                              m_BtnHeight = m_SkinBtns[m_Counter + Y].BtnTex.Height;                                Vector2 TexturePosition = new Vector2(X * (BodyTileSize.X + 16)' Y * (BodyTileSize.Y));                              Vector2 ButtonPosition = new Vector2(TexturePosition.X - 3' TexturePosition.Y - 5);                                SBatch.Draw(m_SkinBtns[Y + m_Counter].BtnTex' new Rectangle((int)(Position.X +                                  ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)'                                  new Rectangle((int)m_SkinBtns[m_Counter + Y].SourcePosition.X'                                  (int)m_SkinBtns[m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)'                                  Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);                                SBatch.Draw(m_Thumb' new Rectangle((int)(Position.X + TexturePosition.X)'                                  (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)'                                  null' Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth);                                if (m_Counter < m_NumberOfSkinsToDisplay)                                  m_Counter++;                          }                      }                        break;              }
Magic Number,Gonzo.Elements,UIBodyBrowser,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIBodyBrowser.cs,Draw,The following statement contains a magic number: switch (m_SelectedSkintype)              {                  case Elements.SkinType.Light:                      for (int X = 0; X <= m_Map.GetUpperBound(1); X++)                      {                          for (int Y = 0; Y <= m_Map.GetUpperBound(0); Y++)                          {                              m_Thumb = FileManager.GetTexture(m_Sex == AvatarSex.Male ?                                  m_LightAppearances[(Y * X) + m_Counter].LightAppearance.ThumbnailID.UniqueID :                                  m_LightFemaleAppearances[(Y * X) + m_Counter].LightAppearance.ThumbnailID.UniqueID);                              m_BtnWidth = m_SkinBtns[m_Counter + Y].BtnTex.Width / 4;                              m_BtnHeight = m_SkinBtns[m_Counter + Y].BtnTex.Height;                                Vector2 TexturePosition = new Vector2(X * (BodyTileSize.X + 16)' Y * (BodyTileSize.Y));                              Vector2 ButtonPosition = new Vector2(TexturePosition.X - 3' TexturePosition.Y - 5);                                SBatch.Draw(m_SkinBtns[Y + m_Counter].BtnTex' new Rectangle((int)(Position.X +                                  ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)'                                  new Rectangle((int)m_SkinBtns[m_Counter + Y].SourcePosition.X'                                  (int)m_SkinBtns[m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)'                                  Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);                                SBatch.Draw(m_Thumb' new Rectangle((int)(Position.X + TexturePosition.X)'                                  (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)'                                  null' Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth);                                if (m_Counter < m_NumberOfSkinsToDisplay)                                  m_Counter++;                          }                      }                        break;                  case Elements.SkinType.Medium:                      for (int X = 0; X <= m_Map.GetUpperBound(1); X++)                      {                          for (int Y = 0; Y <= m_Map.GetUpperBound(0); Y++)                          {                              m_Thumb = FileManager.GetTexture(m_Sex == AvatarSex.Male ?                                  m_MediumAppearances[(Y * X) + m_Counter].MediumAppearance.ThumbnailID.UniqueID :                                  m_MediumFemaleAppearances[(Y * X) + m_Counter].MediumAppearance.ThumbnailID.UniqueID);                              m_BtnWidth = m_SkinBtns[m_Counter + Y].BtnTex.Width / 4;                              m_BtnHeight = m_SkinBtns[m_Counter + Y].BtnTex.Height;                                Vector2 TexturePosition = new Vector2(X * (BodyTileSize.X + 16)' Y * (BodyTileSize.Y));                              Vector2 ButtonPosition = new Vector2(TexturePosition.X - 3' TexturePosition.Y - 5);                                SBatch.Draw(m_SkinBtns[Y + m_Counter].BtnTex' new Rectangle((int)(Position.X +                                  ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)'                                  new Rectangle((int)m_SkinBtns[m_Counter + Y].SourcePosition.X'                                  (int)m_SkinBtns[m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)'                                  Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);                                SBatch.Draw(m_Thumb' new Rectangle((int)(Position.X + TexturePosition.X)'                                  (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)'                                  null' Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth);                                if (m_Counter < m_NumberOfSkinsToDisplay)                                  m_Counter++;                          }                      }                        break;                  case Elements.SkinType.Dark:                      for (int X = 0; X <= m_Map.GetUpperBound(1); X++)                      {                          for (int Y = 0; Y <= m_Map.GetUpperBound(0); Y++)                          {                              m_Thumb = FileManager.GetTexture(m_Sex == AvatarSex.Male ?                                  m_DarkAppearances[(Y * X) + m_Counter].DarkAppearance.ThumbnailID.UniqueID :                                  m_DarkFemaleAppearances[(Y  * X) + m_Counter].DarkAppearance.ThumbnailID.UniqueID);                              m_BtnWidth = m_SkinBtns[m_Counter + Y].BtnTex.Width / 4 ;                              m_BtnHeight = m_SkinBtns[m_Counter + Y].BtnTex.Height;                                Vector2 TexturePosition = new Vector2(X * (BodyTileSize.X + 16)' Y * (BodyTileSize.Y));                              Vector2 ButtonPosition = new Vector2(TexturePosition.X - 3' TexturePosition.Y - 5);                                SBatch.Draw(m_SkinBtns[Y + m_Counter].BtnTex' new Rectangle((int)(Position.X +                                  ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)'                                  new Rectangle((int)m_SkinBtns[m_Counter + Y].SourcePosition.X'                                  (int)m_SkinBtns[m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)'                                  Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);                                SBatch.Draw(m_Thumb' new Rectangle((int)(Position.X + TexturePosition.X)'                                  (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)'                                  null' Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth);                                if (m_Counter < m_NumberOfSkinsToDisplay)                                  m_Counter++;                          }                      }                        break;              }
Magic Number,Gonzo.Elements,UIBodyBrowser,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIBodyBrowser.cs,Draw,The following statement contains a magic number: switch (m_SelectedSkintype)              {                  case Elements.SkinType.Light:                      for (int X = 0; X <= m_Map.GetUpperBound(1); X++)                      {                          for (int Y = 0; Y <= m_Map.GetUpperBound(0); Y++)                          {                              m_Thumb = FileManager.GetTexture(m_Sex == AvatarSex.Male ?                                  m_LightAppearances[(Y * X) + m_Counter].LightAppearance.ThumbnailID.UniqueID :                                  m_LightFemaleAppearances[(Y * X) + m_Counter].LightAppearance.ThumbnailID.UniqueID);                              m_BtnWidth = m_SkinBtns[m_Counter + Y].BtnTex.Width / 4;                              m_BtnHeight = m_SkinBtns[m_Counter + Y].BtnTex.Height;                                Vector2 TexturePosition = new Vector2(X * (BodyTileSize.X + 16)' Y * (BodyTileSize.Y));                              Vector2 ButtonPosition = new Vector2(TexturePosition.X - 3' TexturePosition.Y - 5);                                SBatch.Draw(m_SkinBtns[Y + m_Counter].BtnTex' new Rectangle((int)(Position.X +                                  ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)'                                  new Rectangle((int)m_SkinBtns[m_Counter + Y].SourcePosition.X'                                  (int)m_SkinBtns[m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)'                                  Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);                                SBatch.Draw(m_Thumb' new Rectangle((int)(Position.X + TexturePosition.X)'                                  (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)'                                  null' Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth);                                if (m_Counter < m_NumberOfSkinsToDisplay)                                  m_Counter++;                          }                      }                        break;                  case Elements.SkinType.Medium:                      for (int X = 0; X <= m_Map.GetUpperBound(1); X++)                      {                          for (int Y = 0; Y <= m_Map.GetUpperBound(0); Y++)                          {                              m_Thumb = FileManager.GetTexture(m_Sex == AvatarSex.Male ?                                  m_MediumAppearances[(Y * X) + m_Counter].MediumAppearance.ThumbnailID.UniqueID :                                  m_MediumFemaleAppearances[(Y * X) + m_Counter].MediumAppearance.ThumbnailID.UniqueID);                              m_BtnWidth = m_SkinBtns[m_Counter + Y].BtnTex.Width / 4;                              m_BtnHeight = m_SkinBtns[m_Counter + Y].BtnTex.Height;                                Vector2 TexturePosition = new Vector2(X * (BodyTileSize.X + 16)' Y * (BodyTileSize.Y));                              Vector2 ButtonPosition = new Vector2(TexturePosition.X - 3' TexturePosition.Y - 5);                                SBatch.Draw(m_SkinBtns[Y + m_Counter].BtnTex' new Rectangle((int)(Position.X +                                  ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)'                                  new Rectangle((int)m_SkinBtns[m_Counter + Y].SourcePosition.X'                                  (int)m_SkinBtns[m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)'                                  Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);                                SBatch.Draw(m_Thumb' new Rectangle((int)(Position.X + TexturePosition.X)'                                  (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)'                                  null' Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth);                                if (m_Counter < m_NumberOfSkinsToDisplay)                                  m_Counter++;                          }                      }                        break;                  case Elements.SkinType.Dark:                      for (int X = 0; X <= m_Map.GetUpperBound(1); X++)                      {                          for (int Y = 0; Y <= m_Map.GetUpperBound(0); Y++)                          {                              m_Thumb = FileManager.GetTexture(m_Sex == AvatarSex.Male ?                                  m_DarkAppearances[(Y * X) + m_Counter].DarkAppearance.ThumbnailID.UniqueID :                                  m_DarkFemaleAppearances[(Y  * X) + m_Counter].DarkAppearance.ThumbnailID.UniqueID);                              m_BtnWidth = m_SkinBtns[m_Counter + Y].BtnTex.Width / 4 ;                              m_BtnHeight = m_SkinBtns[m_Counter + Y].BtnTex.Height;                                Vector2 TexturePosition = new Vector2(X * (BodyTileSize.X + 16)' Y * (BodyTileSize.Y));                              Vector2 ButtonPosition = new Vector2(TexturePosition.X - 3' TexturePosition.Y - 5);                                SBatch.Draw(m_SkinBtns[Y + m_Counter].BtnTex' new Rectangle((int)(Position.X +                                  ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)'                                  new Rectangle((int)m_SkinBtns[m_Counter + Y].SourcePosition.X'                                  (int)m_SkinBtns[m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)'                                  Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);                                SBatch.Draw(m_Thumb' new Rectangle((int)(Position.X + TexturePosition.X)'                                  (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)'                                  null' Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth);                                if (m_Counter < m_NumberOfSkinsToDisplay)                                  m_Counter++;                          }                      }                        break;              }
Magic Number,Gonzo.Elements,UIHeadBrowser,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIHeadBrowser.cs,UIHeadBrowser,The following statement contains a magic number: Container.SourcePosition =                       //Initialize to second frame in image.                      new Vector2((m_EditHeadSkinBtnTex.Width / (4)) * 2' 0.0f);
Magic Number,Gonzo.Elements,UIHeadBrowser,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIHeadBrowser.cs,UIHeadBrowser,The following statement contains a magic number: Container.SourcePosition =                       //Initialize to second frame in image.                      new Vector2((m_EditHeadSkinBtnTex.Width / (4)) * 2' 0.0f);
Magic Number,Gonzo.Elements,UIHeadBrowser,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIHeadBrowser.cs,UIHeadBrowser,The following statement contains a magic number: Container.SourcePosition =                      //Initialize to second frame in image.                      new Vector2((m_EditHeadSkinBtnTex.Width / (4)) * 2' 0.0f);
Magic Number,Gonzo.Elements,UIHeadBrowser,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIHeadBrowser.cs,UIHeadBrowser,The following statement contains a magic number: Container.SourcePosition =                      //Initialize to second frame in image.                      new Vector2((m_EditHeadSkinBtnTex.Width / (4)) * 2' 0.0f);
Magic Number,Gonzo.Elements,UIHeadBrowser,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIHeadBrowser.cs,UIHeadBrowser,The following statement contains a magic number: Container.SourcePosition =                      //Initialize to second frame in image.                      new Vector2((m_EditHeadSkinBtnTex.Width / (4)) * 2' 0.0f);
Magic Number,Gonzo.Elements,UIHeadBrowser,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIHeadBrowser.cs,UIHeadBrowser,The following statement contains a magic number: Container.SourcePosition =                      //Initialize to second frame in image.                      new Vector2((m_EditHeadSkinBtnTex.Width / (4)) * 2' 0.0f);
Magic Number,Gonzo.Elements,UIHeadBrowser,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIHeadBrowser.cs,Update,The following statement contains a magic number: m_BtnWidth = m_SkinBtns[m_Counter + Y].BtnTex.Width / 4;
Magic Number,Gonzo.Elements,UIHeadBrowser,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIHeadBrowser.cs,Update,The following statement contains a magic number: Vector2 TexturePosition = new Vector2(X * (HeadTileSize.X + 10)' Y * (HeadTileSize.Y));
Magic Number,Gonzo.Elements,UIHeadBrowser,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIHeadBrowser.cs,Update,The following statement contains a magic number: Vector2 ButtonPosition = new Vector2(TexturePosition.X - 3' TexturePosition.Y - 5);
Magic Number,Gonzo.Elements,UIHeadBrowser,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIHeadBrowser.cs,Update,The following statement contains a magic number: Vector2 ButtonPosition = new Vector2(TexturePosition.X - 3' TexturePosition.Y - 5);
Magic Number,Gonzo.Elements,UIHeadBrowser,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIHeadBrowser.cs,Update,The following statement contains a magic number: switch (m_SelectedSkintype)                                      {                                          case Elements.SkinType.Light:                                              EArgs.SkinType = 0;                                              EArgs.SelectedOutfit = (m_Sex == AvatarSex.Male ?                                                  m_LightAppearances[(Y * X) + m_Counter].Oft :                                                  m_LightFemaleAppearances[(Y * X) + m_Counter].Oft);                                                OnButtonClicked(this' EArgs);                                              break;                                          case Elements.SkinType.Medium:                                              EArgs.SkinType = 1;                                              EArgs.SelectedOutfit = (m_Sex == AvatarSex.Male ?                                                  m_MediumAppearances[(Y * X) + m_Counter].Oft :                                                  m_MediumFemaleAppearances[(Y * X) + m_Counter].Oft);                                              OnButtonClicked(this' EArgs);                                              break;                                          case Elements.SkinType.Dark:                                              EArgs.SkinType = 2;                                              EArgs.SelectedOutfit = (m_Sex == AvatarSex.Male ?                                                  m_DarkAppearances[(Y * X) + m_Counter].Oft :                                                  m_DarkFemaleAppearances[(Y * X) + m_Counter].Oft);                                                OnButtonClicked(this' EArgs);                                              break;                                      }
Magic Number,Gonzo.Elements,UIHeadBrowser,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIHeadBrowser.cs,Draw,The following statement contains a magic number: SBatch.DrawString(m_Screen.Font9px' "Heads: " + m_NumberOfHeads'                   new Vector2(Position.X + (m_Size.X / 2) - m_Screen.Font9px.MeasureString("Heads: ").X'                   Position.Y + (m_Size.Y - 70))' new Color(255' 249' 157)' 0.0f' new Vector2(0' 0)' 1.0f'                   SpriteEffects.None' m_Depth);
Magic Number,Gonzo.Elements,UIHeadBrowser,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIHeadBrowser.cs,Draw,The following statement contains a magic number: SBatch.DrawString(m_Screen.Font9px' "Heads: " + m_NumberOfHeads'                   new Vector2(Position.X + (m_Size.X / 2) - m_Screen.Font9px.MeasureString("Heads: ").X'                   Position.Y + (m_Size.Y - 70))' new Color(255' 249' 157)' 0.0f' new Vector2(0' 0)' 1.0f'                   SpriteEffects.None' m_Depth);
Magic Number,Gonzo.Elements,UIHeadBrowser,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIHeadBrowser.cs,Draw,The following statement contains a magic number: SBatch.DrawString(m_Screen.Font9px' "Heads: " + m_NumberOfHeads'                   new Vector2(Position.X + (m_Size.X / 2) - m_Screen.Font9px.MeasureString("Heads: ").X'                   Position.Y + (m_Size.Y - 70))' new Color(255' 249' 157)' 0.0f' new Vector2(0' 0)' 1.0f'                   SpriteEffects.None' m_Depth);
Magic Number,Gonzo.Elements,UIHeadBrowser,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIHeadBrowser.cs,Draw,The following statement contains a magic number: SBatch.DrawString(m_Screen.Font9px' "Heads: " + m_NumberOfHeads'                   new Vector2(Position.X + (m_Size.X / 2) - m_Screen.Font9px.MeasureString("Heads: ").X'                   Position.Y + (m_Size.Y - 70))' new Color(255' 249' 157)' 0.0f' new Vector2(0' 0)' 1.0f'                   SpriteEffects.None' m_Depth);
Magic Number,Gonzo.Elements,UIHeadBrowser,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIHeadBrowser.cs,Draw,The following statement contains a magic number: SBatch.DrawString(m_Screen.Font9px' "Heads: " + m_NumberOfHeads'                   new Vector2(Position.X + (m_Size.X / 2) - m_Screen.Font9px.MeasureString("Heads: ").X'                   Position.Y + (m_Size.Y - 70))' new Color(255' 249' 157)' 0.0f' new Vector2(0' 0)' 1.0f'                   SpriteEffects.None' m_Depth);
Magic Number,Gonzo.Elements,UIHeadBrowser,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIHeadBrowser.cs,Draw,The following statement contains a magic number: switch (m_SelectedSkintype)              {                  case Elements.SkinType.Light:                      for (int X = 0; X <= m_Map.GetUpperBound(1); X++)                      {                          for (int Y = 0; Y <= m_Map.GetUpperBound(0); Y++)                          {                              m_Thumb = FileManager.GetTexture(m_Sex == AvatarSex.Male ?                                   m_LightAppearances[(Y * X) + m_Counter].LightAppearance.ThumbnailID.UniqueID :                                  m_LightFemaleAppearances[(Y * X) + m_Counter].LightAppearance.ThumbnailID.UniqueID);                              m_BtnWidth = m_SkinBtns[m_Counter + Y].BtnTex.Width / 4;                              m_BtnHeight = m_SkinBtns[m_Counter + Y].BtnTex.Height;                                Vector2 TexturePosition =                                   new Vector2(X * (HeadTileSize.X + 10)' Y * (HeadTileSize.Y));                              Vector2 ButtonPosition = new Vector2(TexturePosition.X - 2' TexturePosition.Y - 5);                                //NOTE: Must be drawn at Depth - 0.1f because of alpha issues with thumbs.                              SBatch.Draw(m_SkinBtns[Y + m_Counter].BtnTex' new Rectangle((int)(Position.X +                                  ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)'                                  new Rectangle((int)m_SkinBtns[m_Counter + Y].SourcePosition.X'                                  (int)m_SkinBtns[m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)'                                  Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);                                SBatch.Draw(m_Thumb' new Rectangle((int)(Position.X + TexturePosition.X)'                                  (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)'                                  null' Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth);                                if (m_Counter < m_NumberOfSkinsToDisplay)                                  m_Counter++;                          }                      }                        break;                  case Elements.SkinType.Medium:                      for (int X = 0; X <= m_Map.GetUpperBound(1); X++)                      {                          for (int Y = 0; Y <= m_Map.GetUpperBound(0); Y++)                          {                              m_Thumb = FileManager.GetTexture(m_Sex == AvatarSex.Male ?                                  m_MediumAppearances[(Y * X) + m_Counter].MediumAppearance.ThumbnailID.UniqueID :                                  m_MediumFemaleAppearances[(Y * X) + m_Counter].MediumAppearance.ThumbnailID.UniqueID);                              m_BtnWidth = m_SkinBtns[m_Counter + Y].BtnTex.Width / 4;                              m_BtnHeight = m_SkinBtns[m_Counter + Y].BtnTex.Height;                                Vector2 TexturePosition = new Vector2(X * (HeadTileSize.X + 10)' Y * (HeadTileSize.Y));                              Vector2 ButtonPosition = new Vector2(TexturePosition.X - 2' TexturePosition.Y - 5);                                //NOTE: Must be drawn at Depth - 0.1f because of alpha issues with thumbs.                              SBatch.Draw(m_SkinBtns[Y + m_Counter].BtnTex' new Rectangle((int)(Position.X +                                  ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)'                                  new Rectangle((int)m_SkinBtns[m_Counter + Y].SourcePosition.X'                                  (int)m_SkinBtns[m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)'                                  Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);                                SBatch.Draw(m_Thumb' new Rectangle((int)(Position.X + TexturePosition.X)'                                  (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)'                                  null' Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth);                                if (m_Counter < m_NumberOfSkinsToDisplay)                                  m_Counter++;                          }                      }                        break;                  case Elements.SkinType.Dark:                      for (int X = 0; X <= m_Map.GetUpperBound(1); X++)                      {                          for (int Y = 0; Y <= m_Map.GetUpperBound(0); Y++)                          {                              m_Thumb = FileManager.GetTexture(m_Sex == AvatarSex.Male ?                                  m_DarkAppearances[(Y * X) + m_Counter].DarkAppearance.ThumbnailID.UniqueID :                                  m_DarkFemaleAppearances[(Y * X) + m_Counter].DarkAppearance.ThumbnailID.UniqueID);                              m_BtnWidth = m_SkinBtns[m_Counter + Y].BtnTex.Width / 4;                              m_BtnHeight = m_SkinBtns[m_Counter + Y].BtnTex.Height;                                Vector2 TexturePosition = new Vector2(X * (HeadTileSize.X + 10)' Y * (HeadTileSize.Y));                              Vector2 ButtonPosition = new Vector2(TexturePosition.X - 2' TexturePosition.Y - 5);                                //NOTE: Must be drawn at Depth - 0.1f because of alpha issues with thumbs.                              SBatch.Draw(m_SkinBtns[Y + m_Counter].BtnTex' new Rectangle((int)(Position.X +                                  ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)'                                  new Rectangle((int)m_SkinBtns[m_Counter + Y].SourcePosition.X'                                  (int)m_SkinBtns[m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)'                                  Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);                                SBatch.Draw(m_Thumb' new Rectangle((int)(Position.X + TexturePosition.X)'                                  (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)'                                  null' Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth);                                if (m_Counter < m_NumberOfSkinsToDisplay)                                  m_Counter++;                          }                      }                        break;              }
Magic Number,Gonzo.Elements,UIHeadBrowser,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIHeadBrowser.cs,Draw,The following statement contains a magic number: switch (m_SelectedSkintype)              {                  case Elements.SkinType.Light:                      for (int X = 0; X <= m_Map.GetUpperBound(1); X++)                      {                          for (int Y = 0; Y <= m_Map.GetUpperBound(0); Y++)                          {                              m_Thumb = FileManager.GetTexture(m_Sex == AvatarSex.Male ?                                   m_LightAppearances[(Y * X) + m_Counter].LightAppearance.ThumbnailID.UniqueID :                                  m_LightFemaleAppearances[(Y * X) + m_Counter].LightAppearance.ThumbnailID.UniqueID);                              m_BtnWidth = m_SkinBtns[m_Counter + Y].BtnTex.Width / 4;                              m_BtnHeight = m_SkinBtns[m_Counter + Y].BtnTex.Height;                                Vector2 TexturePosition =                                   new Vector2(X * (HeadTileSize.X + 10)' Y * (HeadTileSize.Y));                              Vector2 ButtonPosition = new Vector2(TexturePosition.X - 2' TexturePosition.Y - 5);                                //NOTE: Must be drawn at Depth - 0.1f because of alpha issues with thumbs.                              SBatch.Draw(m_SkinBtns[Y + m_Counter].BtnTex' new Rectangle((int)(Position.X +                                  ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)'                                  new Rectangle((int)m_SkinBtns[m_Counter + Y].SourcePosition.X'                                  (int)m_SkinBtns[m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)'                                  Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);                                SBatch.Draw(m_Thumb' new Rectangle((int)(Position.X + TexturePosition.X)'                                  (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)'                                  null' Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth);                                if (m_Counter < m_NumberOfSkinsToDisplay)                                  m_Counter++;                          }                      }                        break;                  case Elements.SkinType.Medium:                      for (int X = 0; X <= m_Map.GetUpperBound(1); X++)                      {                          for (int Y = 0; Y <= m_Map.GetUpperBound(0); Y++)                          {                              m_Thumb = FileManager.GetTexture(m_Sex == AvatarSex.Male ?                                  m_MediumAppearances[(Y * X) + m_Counter].MediumAppearance.ThumbnailID.UniqueID :                                  m_MediumFemaleAppearances[(Y * X) + m_Counter].MediumAppearance.ThumbnailID.UniqueID);                              m_BtnWidth = m_SkinBtns[m_Counter + Y].BtnTex.Width / 4;                              m_BtnHeight = m_SkinBtns[m_Counter + Y].BtnTex.Height;                                Vector2 TexturePosition = new Vector2(X * (HeadTileSize.X + 10)' Y * (HeadTileSize.Y));                              Vector2 ButtonPosition = new Vector2(TexturePosition.X - 2' TexturePosition.Y - 5);                                //NOTE: Must be drawn at Depth - 0.1f because of alpha issues with thumbs.                              SBatch.Draw(m_SkinBtns[Y + m_Counter].BtnTex' new Rectangle((int)(Position.X +                                  ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)'                                  new Rectangle((int)m_SkinBtns[m_Counter + Y].SourcePosition.X'                                  (int)m_SkinBtns[m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)'                                  Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);                                SBatch.Draw(m_Thumb' new Rectangle((int)(Position.X + TexturePosition.X)'                                  (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)'                                  null' Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth);                                if (m_Counter < m_NumberOfSkinsToDisplay)                                  m_Counter++;                          }                      }                        break;                  case Elements.SkinType.Dark:                      for (int X = 0; X <= m_Map.GetUpperBound(1); X++)                      {                          for (int Y = 0; Y <= m_Map.GetUpperBound(0); Y++)                          {                              m_Thumb = FileManager.GetTexture(m_Sex == AvatarSex.Male ?                                  m_DarkAppearances[(Y * X) + m_Counter].DarkAppearance.ThumbnailID.UniqueID :                                  m_DarkFemaleAppearances[(Y * X) + m_Counter].DarkAppearance.ThumbnailID.UniqueID);                              m_BtnWidth = m_SkinBtns[m_Counter + Y].BtnTex.Width / 4;                              m_BtnHeight = m_SkinBtns[m_Counter + Y].BtnTex.Height;                                Vector2 TexturePosition = new Vector2(X * (HeadTileSize.X + 10)' Y * (HeadTileSize.Y));                              Vector2 ButtonPosition = new Vector2(TexturePosition.X - 2' TexturePosition.Y - 5);                                //NOTE: Must be drawn at Depth - 0.1f because of alpha issues with thumbs.                              SBatch.Draw(m_SkinBtns[Y + m_Counter].BtnTex' new Rectangle((int)(Position.X +                                  ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)'                                  new Rectangle((int)m_SkinBtns[m_Counter + Y].SourcePosition.X'                                  (int)m_SkinBtns[m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)'                                  Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);                                SBatch.Draw(m_Thumb' new Rectangle((int)(Position.X + TexturePosition.X)'                                  (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)'                                  null' Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth);                                if (m_Counter < m_NumberOfSkinsToDisplay)                                  m_Counter++;                          }                      }                        break;              }
Magic Number,Gonzo.Elements,UIHeadBrowser,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIHeadBrowser.cs,Draw,The following statement contains a magic number: switch (m_SelectedSkintype)              {                  case Elements.SkinType.Light:                      for (int X = 0; X <= m_Map.GetUpperBound(1); X++)                      {                          for (int Y = 0; Y <= m_Map.GetUpperBound(0); Y++)                          {                              m_Thumb = FileManager.GetTexture(m_Sex == AvatarSex.Male ?                                   m_LightAppearances[(Y * X) + m_Counter].LightAppearance.ThumbnailID.UniqueID :                                  m_LightFemaleAppearances[(Y * X) + m_Counter].LightAppearance.ThumbnailID.UniqueID);                              m_BtnWidth = m_SkinBtns[m_Counter + Y].BtnTex.Width / 4;                              m_BtnHeight = m_SkinBtns[m_Counter + Y].BtnTex.Height;                                Vector2 TexturePosition =                                   new Vector2(X * (HeadTileSize.X + 10)' Y * (HeadTileSize.Y));                              Vector2 ButtonPosition = new Vector2(TexturePosition.X - 2' TexturePosition.Y - 5);                                //NOTE: Must be drawn at Depth - 0.1f because of alpha issues with thumbs.                              SBatch.Draw(m_SkinBtns[Y + m_Counter].BtnTex' new Rectangle((int)(Position.X +                                  ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)'                                  new Rectangle((int)m_SkinBtns[m_Counter + Y].SourcePosition.X'                                  (int)m_SkinBtns[m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)'                                  Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);                                SBatch.Draw(m_Thumb' new Rectangle((int)(Position.X + TexturePosition.X)'                                  (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)'                                  null' Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth);                                if (m_Counter < m_NumberOfSkinsToDisplay)                                  m_Counter++;                          }                      }                        break;                  case Elements.SkinType.Medium:                      for (int X = 0; X <= m_Map.GetUpperBound(1); X++)                      {                          for (int Y = 0; Y <= m_Map.GetUpperBound(0); Y++)                          {                              m_Thumb = FileManager.GetTexture(m_Sex == AvatarSex.Male ?                                  m_MediumAppearances[(Y * X) + m_Counter].MediumAppearance.ThumbnailID.UniqueID :                                  m_MediumFemaleAppearances[(Y * X) + m_Counter].MediumAppearance.ThumbnailID.UniqueID);                              m_BtnWidth = m_SkinBtns[m_Counter + Y].BtnTex.Width / 4;                              m_BtnHeight = m_SkinBtns[m_Counter + Y].BtnTex.Height;                                Vector2 TexturePosition = new Vector2(X * (HeadTileSize.X + 10)' Y * (HeadTileSize.Y));                              Vector2 ButtonPosition = new Vector2(TexturePosition.X - 2' TexturePosition.Y - 5);                                //NOTE: Must be drawn at Depth - 0.1f because of alpha issues with thumbs.                              SBatch.Draw(m_SkinBtns[Y + m_Counter].BtnTex' new Rectangle((int)(Position.X +                                  ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)'                                  new Rectangle((int)m_SkinBtns[m_Counter + Y].SourcePosition.X'                                  (int)m_SkinBtns[m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)'                                  Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);                                SBatch.Draw(m_Thumb' new Rectangle((int)(Position.X + TexturePosition.X)'                                  (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)'                                  null' Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth);                                if (m_Counter < m_NumberOfSkinsToDisplay)                                  m_Counter++;                          }                      }                        break;                  case Elements.SkinType.Dark:                      for (int X = 0; X <= m_Map.GetUpperBound(1); X++)                      {                          for (int Y = 0; Y <= m_Map.GetUpperBound(0); Y++)                          {                              m_Thumb = FileManager.GetTexture(m_Sex == AvatarSex.Male ?                                  m_DarkAppearances[(Y * X) + m_Counter].DarkAppearance.ThumbnailID.UniqueID :                                  m_DarkFemaleAppearances[(Y * X) + m_Counter].DarkAppearance.ThumbnailID.UniqueID);                              m_BtnWidth = m_SkinBtns[m_Counter + Y].BtnTex.Width / 4;                              m_BtnHeight = m_SkinBtns[m_Counter + Y].BtnTex.Height;                                Vector2 TexturePosition = new Vector2(X * (HeadTileSize.X + 10)' Y * (HeadTileSize.Y));                              Vector2 ButtonPosition = new Vector2(TexturePosition.X - 2' TexturePosition.Y - 5);                                //NOTE: Must be drawn at Depth - 0.1f because of alpha issues with thumbs.                              SBatch.Draw(m_SkinBtns[Y + m_Counter].BtnTex' new Rectangle((int)(Position.X +                                  ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)'                                  new Rectangle((int)m_SkinBtns[m_Counter + Y].SourcePosition.X'                                  (int)m_SkinBtns[m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)'                                  Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);                                SBatch.Draw(m_Thumb' new Rectangle((int)(Position.X + TexturePosition.X)'                                  (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)'                                  null' Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth);                                if (m_Counter < m_NumberOfSkinsToDisplay)                                  m_Counter++;                          }                      }                        break;              }
Magic Number,Gonzo.Elements,UIHeadBrowser,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIHeadBrowser.cs,Draw,The following statement contains a magic number: switch (m_SelectedSkintype)              {                  case Elements.SkinType.Light:                      for (int X = 0; X <= m_Map.GetUpperBound(1); X++)                      {                          for (int Y = 0; Y <= m_Map.GetUpperBound(0); Y++)                          {                              m_Thumb = FileManager.GetTexture(m_Sex == AvatarSex.Male ?                                   m_LightAppearances[(Y * X) + m_Counter].LightAppearance.ThumbnailID.UniqueID :                                  m_LightFemaleAppearances[(Y * X) + m_Counter].LightAppearance.ThumbnailID.UniqueID);                              m_BtnWidth = m_SkinBtns[m_Counter + Y].BtnTex.Width / 4;                              m_BtnHeight = m_SkinBtns[m_Counter + Y].BtnTex.Height;                                Vector2 TexturePosition =                                   new Vector2(X * (HeadTileSize.X + 10)' Y * (HeadTileSize.Y));                              Vector2 ButtonPosition = new Vector2(TexturePosition.X - 2' TexturePosition.Y - 5);                                //NOTE: Must be drawn at Depth - 0.1f because of alpha issues with thumbs.                              SBatch.Draw(m_SkinBtns[Y + m_Counter].BtnTex' new Rectangle((int)(Position.X +                                  ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)'                                  new Rectangle((int)m_SkinBtns[m_Counter + Y].SourcePosition.X'                                  (int)m_SkinBtns[m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)'                                  Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);                                SBatch.Draw(m_Thumb' new Rectangle((int)(Position.X + TexturePosition.X)'                                  (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)'                                  null' Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth);                                if (m_Counter < m_NumberOfSkinsToDisplay)                                  m_Counter++;                          }                      }                        break;                  case Elements.SkinType.Medium:                      for (int X = 0; X <= m_Map.GetUpperBound(1); X++)                      {                          for (int Y = 0; Y <= m_Map.GetUpperBound(0); Y++)                          {                              m_Thumb = FileManager.GetTexture(m_Sex == AvatarSex.Male ?                                  m_MediumAppearances[(Y * X) + m_Counter].MediumAppearance.ThumbnailID.UniqueID :                                  m_MediumFemaleAppearances[(Y * X) + m_Counter].MediumAppearance.ThumbnailID.UniqueID);                              m_BtnWidth = m_SkinBtns[m_Counter + Y].BtnTex.Width / 4;                              m_BtnHeight = m_SkinBtns[m_Counter + Y].BtnTex.Height;                                Vector2 TexturePosition = new Vector2(X * (HeadTileSize.X + 10)' Y * (HeadTileSize.Y));                              Vector2 ButtonPosition = new Vector2(TexturePosition.X - 2' TexturePosition.Y - 5);                                //NOTE: Must be drawn at Depth - 0.1f because of alpha issues with thumbs.                              SBatch.Draw(m_SkinBtns[Y + m_Counter].BtnTex' new Rectangle((int)(Position.X +                                  ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)'                                  new Rectangle((int)m_SkinBtns[m_Counter + Y].SourcePosition.X'                                  (int)m_SkinBtns[m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)'                                  Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);                                SBatch.Draw(m_Thumb' new Rectangle((int)(Position.X + TexturePosition.X)'                                  (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)'                                  null' Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth);                                if (m_Counter < m_NumberOfSkinsToDisplay)                                  m_Counter++;                          }                      }                        break;                  case Elements.SkinType.Dark:                      for (int X = 0; X <= m_Map.GetUpperBound(1); X++)                      {                          for (int Y = 0; Y <= m_Map.GetUpperBound(0); Y++)                          {                              m_Thumb = FileManager.GetTexture(m_Sex == AvatarSex.Male ?                                  m_DarkAppearances[(Y * X) + m_Counter].DarkAppearance.ThumbnailID.UniqueID :                                  m_DarkFemaleAppearances[(Y * X) + m_Counter].DarkAppearance.ThumbnailID.UniqueID);                              m_BtnWidth = m_SkinBtns[m_Counter + Y].BtnTex.Width / 4;                              m_BtnHeight = m_SkinBtns[m_Counter + Y].BtnTex.Height;                                Vector2 TexturePosition = new Vector2(X * (HeadTileSize.X + 10)' Y * (HeadTileSize.Y));                              Vector2 ButtonPosition = new Vector2(TexturePosition.X - 2' TexturePosition.Y - 5);                                //NOTE: Must be drawn at Depth - 0.1f because of alpha issues with thumbs.                              SBatch.Draw(m_SkinBtns[Y + m_Counter].BtnTex' new Rectangle((int)(Position.X +                                  ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)'                                  new Rectangle((int)m_SkinBtns[m_Counter + Y].SourcePosition.X'                                  (int)m_SkinBtns[m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)'                                  Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);                                SBatch.Draw(m_Thumb' new Rectangle((int)(Position.X + TexturePosition.X)'                                  (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)'                                  null' Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth);                                if (m_Counter < m_NumberOfSkinsToDisplay)                                  m_Counter++;                          }                      }                        break;              }
Magic Number,Gonzo.Elements,UIHeadBrowser,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIHeadBrowser.cs,Draw,The following statement contains a magic number: switch (m_SelectedSkintype)              {                  case Elements.SkinType.Light:                      for (int X = 0; X <= m_Map.GetUpperBound(1); X++)                      {                          for (int Y = 0; Y <= m_Map.GetUpperBound(0); Y++)                          {                              m_Thumb = FileManager.GetTexture(m_Sex == AvatarSex.Male ?                                   m_LightAppearances[(Y * X) + m_Counter].LightAppearance.ThumbnailID.UniqueID :                                  m_LightFemaleAppearances[(Y * X) + m_Counter].LightAppearance.ThumbnailID.UniqueID);                              m_BtnWidth = m_SkinBtns[m_Counter + Y].BtnTex.Width / 4;                              m_BtnHeight = m_SkinBtns[m_Counter + Y].BtnTex.Height;                                Vector2 TexturePosition =                                   new Vector2(X * (HeadTileSize.X + 10)' Y * (HeadTileSize.Y));                              Vector2 ButtonPosition = new Vector2(TexturePosition.X - 2' TexturePosition.Y - 5);                                //NOTE: Must be drawn at Depth - 0.1f because of alpha issues with thumbs.                              SBatch.Draw(m_SkinBtns[Y + m_Counter].BtnTex' new Rectangle((int)(Position.X +                                  ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)'                                  new Rectangle((int)m_SkinBtns[m_Counter + Y].SourcePosition.X'                                  (int)m_SkinBtns[m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)'                                  Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);                                SBatch.Draw(m_Thumb' new Rectangle((int)(Position.X + TexturePosition.X)'                                  (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)'                                  null' Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth);                                if (m_Counter < m_NumberOfSkinsToDisplay)                                  m_Counter++;                          }                      }                        break;                  case Elements.SkinType.Medium:                      for (int X = 0; X <= m_Map.GetUpperBound(1); X++)                      {                          for (int Y = 0; Y <= m_Map.GetUpperBound(0); Y++)                          {                              m_Thumb = FileManager.GetTexture(m_Sex == AvatarSex.Male ?                                  m_MediumAppearances[(Y * X) + m_Counter].MediumAppearance.ThumbnailID.UniqueID :                                  m_MediumFemaleAppearances[(Y * X) + m_Counter].MediumAppearance.ThumbnailID.UniqueID);                              m_BtnWidth = m_SkinBtns[m_Counter + Y].BtnTex.Width / 4;                              m_BtnHeight = m_SkinBtns[m_Counter + Y].BtnTex.Height;                                Vector2 TexturePosition = new Vector2(X * (HeadTileSize.X + 10)' Y * (HeadTileSize.Y));                              Vector2 ButtonPosition = new Vector2(TexturePosition.X - 2' TexturePosition.Y - 5);                                //NOTE: Must be drawn at Depth - 0.1f because of alpha issues with thumbs.                              SBatch.Draw(m_SkinBtns[Y + m_Counter].BtnTex' new Rectangle((int)(Position.X +                                  ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)'                                  new Rectangle((int)m_SkinBtns[m_Counter + Y].SourcePosition.X'                                  (int)m_SkinBtns[m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)'                                  Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);                                SBatch.Draw(m_Thumb' new Rectangle((int)(Position.X + TexturePosition.X)'                                  (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)'                                  null' Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth);                                if (m_Counter < m_NumberOfSkinsToDisplay)                                  m_Counter++;                          }                      }                        break;                  case Elements.SkinType.Dark:                      for (int X = 0; X <= m_Map.GetUpperBound(1); X++)                      {                          for (int Y = 0; Y <= m_Map.GetUpperBound(0); Y++)                          {                              m_Thumb = FileManager.GetTexture(m_Sex == AvatarSex.Male ?                                  m_DarkAppearances[(Y * X) + m_Counter].DarkAppearance.ThumbnailID.UniqueID :                                  m_DarkFemaleAppearances[(Y * X) + m_Counter].DarkAppearance.ThumbnailID.UniqueID);                              m_BtnWidth = m_SkinBtns[m_Counter + Y].BtnTex.Width / 4;                              m_BtnHeight = m_SkinBtns[m_Counter + Y].BtnTex.Height;                                Vector2 TexturePosition = new Vector2(X * (HeadTileSize.X + 10)' Y * (HeadTileSize.Y));                              Vector2 ButtonPosition = new Vector2(TexturePosition.X - 2' TexturePosition.Y - 5);                                //NOTE: Must be drawn at Depth - 0.1f because of alpha issues with thumbs.                              SBatch.Draw(m_SkinBtns[Y + m_Counter].BtnTex' new Rectangle((int)(Position.X +                                  ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)'                                  new Rectangle((int)m_SkinBtns[m_Counter + Y].SourcePosition.X'                                  (int)m_SkinBtns[m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)'                                  Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);                                SBatch.Draw(m_Thumb' new Rectangle((int)(Position.X + TexturePosition.X)'                                  (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)'                                  null' Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth);                                if (m_Counter < m_NumberOfSkinsToDisplay)                                  m_Counter++;                          }                      }                        break;              }
Magic Number,Gonzo.Elements,UIHeadBrowser,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIHeadBrowser.cs,Draw,The following statement contains a magic number: switch (m_SelectedSkintype)              {                  case Elements.SkinType.Light:                      for (int X = 0; X <= m_Map.GetUpperBound(1); X++)                      {                          for (int Y = 0; Y <= m_Map.GetUpperBound(0); Y++)                          {                              m_Thumb = FileManager.GetTexture(m_Sex == AvatarSex.Male ?                                   m_LightAppearances[(Y * X) + m_Counter].LightAppearance.ThumbnailID.UniqueID :                                  m_LightFemaleAppearances[(Y * X) + m_Counter].LightAppearance.ThumbnailID.UniqueID);                              m_BtnWidth = m_SkinBtns[m_Counter + Y].BtnTex.Width / 4;                              m_BtnHeight = m_SkinBtns[m_Counter + Y].BtnTex.Height;                                Vector2 TexturePosition =                                   new Vector2(X * (HeadTileSize.X + 10)' Y * (HeadTileSize.Y));                              Vector2 ButtonPosition = new Vector2(TexturePosition.X - 2' TexturePosition.Y - 5);                                //NOTE: Must be drawn at Depth - 0.1f because of alpha issues with thumbs.                              SBatch.Draw(m_SkinBtns[Y + m_Counter].BtnTex' new Rectangle((int)(Position.X +                                  ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)'                                  new Rectangle((int)m_SkinBtns[m_Counter + Y].SourcePosition.X'                                  (int)m_SkinBtns[m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)'                                  Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);                                SBatch.Draw(m_Thumb' new Rectangle((int)(Position.X + TexturePosition.X)'                                  (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)'                                  null' Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth);                                if (m_Counter < m_NumberOfSkinsToDisplay)                                  m_Counter++;                          }                      }                        break;                  case Elements.SkinType.Medium:                      for (int X = 0; X <= m_Map.GetUpperBound(1); X++)                      {                          for (int Y = 0; Y <= m_Map.GetUpperBound(0); Y++)                          {                              m_Thumb = FileManager.GetTexture(m_Sex == AvatarSex.Male ?                                  m_MediumAppearances[(Y * X) + m_Counter].MediumAppearance.ThumbnailID.UniqueID :                                  m_MediumFemaleAppearances[(Y * X) + m_Counter].MediumAppearance.ThumbnailID.UniqueID);                              m_BtnWidth = m_SkinBtns[m_Counter + Y].BtnTex.Width / 4;                              m_BtnHeight = m_SkinBtns[m_Counter + Y].BtnTex.Height;                                Vector2 TexturePosition = new Vector2(X * (HeadTileSize.X + 10)' Y * (HeadTileSize.Y));                              Vector2 ButtonPosition = new Vector2(TexturePosition.X - 2' TexturePosition.Y - 5);                                //NOTE: Must be drawn at Depth - 0.1f because of alpha issues with thumbs.                              SBatch.Draw(m_SkinBtns[Y + m_Counter].BtnTex' new Rectangle((int)(Position.X +                                  ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)'                                  new Rectangle((int)m_SkinBtns[m_Counter + Y].SourcePosition.X'                                  (int)m_SkinBtns[m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)'                                  Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);                                SBatch.Draw(m_Thumb' new Rectangle((int)(Position.X + TexturePosition.X)'                                  (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)'                                  null' Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth);                                if (m_Counter < m_NumberOfSkinsToDisplay)                                  m_Counter++;                          }                      }                        break;                  case Elements.SkinType.Dark:                      for (int X = 0; X <= m_Map.GetUpperBound(1); X++)                      {                          for (int Y = 0; Y <= m_Map.GetUpperBound(0); Y++)                          {                              m_Thumb = FileManager.GetTexture(m_Sex == AvatarSex.Male ?                                  m_DarkAppearances[(Y * X) + m_Counter].DarkAppearance.ThumbnailID.UniqueID :                                  m_DarkFemaleAppearances[(Y * X) + m_Counter].DarkAppearance.ThumbnailID.UniqueID);                              m_BtnWidth = m_SkinBtns[m_Counter + Y].BtnTex.Width / 4;                              m_BtnHeight = m_SkinBtns[m_Counter + Y].BtnTex.Height;                                Vector2 TexturePosition = new Vector2(X * (HeadTileSize.X + 10)' Y * (HeadTileSize.Y));                              Vector2 ButtonPosition = new Vector2(TexturePosition.X - 2' TexturePosition.Y - 5);                                //NOTE: Must be drawn at Depth - 0.1f because of alpha issues with thumbs.                              SBatch.Draw(m_SkinBtns[Y + m_Counter].BtnTex' new Rectangle((int)(Position.X +                                  ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)'                                  new Rectangle((int)m_SkinBtns[m_Counter + Y].SourcePosition.X'                                  (int)m_SkinBtns[m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)'                                  Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);                                SBatch.Draw(m_Thumb' new Rectangle((int)(Position.X + TexturePosition.X)'                                  (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)'                                  null' Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth);                                if (m_Counter < m_NumberOfSkinsToDisplay)                                  m_Counter++;                          }                      }                        break;              }
Magic Number,Gonzo.Elements,UIHeadBrowser,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIHeadBrowser.cs,Draw,The following statement contains a magic number: switch (m_SelectedSkintype)              {                  case Elements.SkinType.Light:                      for (int X = 0; X <= m_Map.GetUpperBound(1); X++)                      {                          for (int Y = 0; Y <= m_Map.GetUpperBound(0); Y++)                          {                              m_Thumb = FileManager.GetTexture(m_Sex == AvatarSex.Male ?                                   m_LightAppearances[(Y * X) + m_Counter].LightAppearance.ThumbnailID.UniqueID :                                  m_LightFemaleAppearances[(Y * X) + m_Counter].LightAppearance.ThumbnailID.UniqueID);                              m_BtnWidth = m_SkinBtns[m_Counter + Y].BtnTex.Width / 4;                              m_BtnHeight = m_SkinBtns[m_Counter + Y].BtnTex.Height;                                Vector2 TexturePosition =                                   new Vector2(X * (HeadTileSize.X + 10)' Y * (HeadTileSize.Y));                              Vector2 ButtonPosition = new Vector2(TexturePosition.X - 2' TexturePosition.Y - 5);                                //NOTE: Must be drawn at Depth - 0.1f because of alpha issues with thumbs.                              SBatch.Draw(m_SkinBtns[Y + m_Counter].BtnTex' new Rectangle((int)(Position.X +                                  ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)'                                  new Rectangle((int)m_SkinBtns[m_Counter + Y].SourcePosition.X'                                  (int)m_SkinBtns[m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)'                                  Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);                                SBatch.Draw(m_Thumb' new Rectangle((int)(Position.X + TexturePosition.X)'                                  (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)'                                  null' Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth);                                if (m_Counter < m_NumberOfSkinsToDisplay)                                  m_Counter++;                          }                      }                        break;                  case Elements.SkinType.Medium:                      for (int X = 0; X <= m_Map.GetUpperBound(1); X++)                      {                          for (int Y = 0; Y <= m_Map.GetUpperBound(0); Y++)                          {                              m_Thumb = FileManager.GetTexture(m_Sex == AvatarSex.Male ?                                  m_MediumAppearances[(Y * X) + m_Counter].MediumAppearance.ThumbnailID.UniqueID :                                  m_MediumFemaleAppearances[(Y * X) + m_Counter].MediumAppearance.ThumbnailID.UniqueID);                              m_BtnWidth = m_SkinBtns[m_Counter + Y].BtnTex.Width / 4;                              m_BtnHeight = m_SkinBtns[m_Counter + Y].BtnTex.Height;                                Vector2 TexturePosition = new Vector2(X * (HeadTileSize.X + 10)' Y * (HeadTileSize.Y));                              Vector2 ButtonPosition = new Vector2(TexturePosition.X - 2' TexturePosition.Y - 5);                                //NOTE: Must be drawn at Depth - 0.1f because of alpha issues with thumbs.                              SBatch.Draw(m_SkinBtns[Y + m_Counter].BtnTex' new Rectangle((int)(Position.X +                                  ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)'                                  new Rectangle((int)m_SkinBtns[m_Counter + Y].SourcePosition.X'                                  (int)m_SkinBtns[m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)'                                  Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);                                SBatch.Draw(m_Thumb' new Rectangle((int)(Position.X + TexturePosition.X)'                                  (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)'                                  null' Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth);                                if (m_Counter < m_NumberOfSkinsToDisplay)                                  m_Counter++;                          }                      }                        break;                  case Elements.SkinType.Dark:                      for (int X = 0; X <= m_Map.GetUpperBound(1); X++)                      {                          for (int Y = 0; Y <= m_Map.GetUpperBound(0); Y++)                          {                              m_Thumb = FileManager.GetTexture(m_Sex == AvatarSex.Male ?                                  m_DarkAppearances[(Y * X) + m_Counter].DarkAppearance.ThumbnailID.UniqueID :                                  m_DarkFemaleAppearances[(Y * X) + m_Counter].DarkAppearance.ThumbnailID.UniqueID);                              m_BtnWidth = m_SkinBtns[m_Counter + Y].BtnTex.Width / 4;                              m_BtnHeight = m_SkinBtns[m_Counter + Y].BtnTex.Height;                                Vector2 TexturePosition = new Vector2(X * (HeadTileSize.X + 10)' Y * (HeadTileSize.Y));                              Vector2 ButtonPosition = new Vector2(TexturePosition.X - 2' TexturePosition.Y - 5);                                //NOTE: Must be drawn at Depth - 0.1f because of alpha issues with thumbs.                              SBatch.Draw(m_SkinBtns[Y + m_Counter].BtnTex' new Rectangle((int)(Position.X +                                  ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)'                                  new Rectangle((int)m_SkinBtns[m_Counter + Y].SourcePosition.X'                                  (int)m_SkinBtns[m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)'                                  Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);                                SBatch.Draw(m_Thumb' new Rectangle((int)(Position.X + TexturePosition.X)'                                  (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)'                                  null' Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth);                                if (m_Counter < m_NumberOfSkinsToDisplay)                                  m_Counter++;                          }                      }                        break;              }
Magic Number,Gonzo.Elements,UIHeadBrowser,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIHeadBrowser.cs,Draw,The following statement contains a magic number: switch (m_SelectedSkintype)              {                  case Elements.SkinType.Light:                      for (int X = 0; X <= m_Map.GetUpperBound(1); X++)                      {                          for (int Y = 0; Y <= m_Map.GetUpperBound(0); Y++)                          {                              m_Thumb = FileManager.GetTexture(m_Sex == AvatarSex.Male ?                                   m_LightAppearances[(Y * X) + m_Counter].LightAppearance.ThumbnailID.UniqueID :                                  m_LightFemaleAppearances[(Y * X) + m_Counter].LightAppearance.ThumbnailID.UniqueID);                              m_BtnWidth = m_SkinBtns[m_Counter + Y].BtnTex.Width / 4;                              m_BtnHeight = m_SkinBtns[m_Counter + Y].BtnTex.Height;                                Vector2 TexturePosition =                                   new Vector2(X * (HeadTileSize.X + 10)' Y * (HeadTileSize.Y));                              Vector2 ButtonPosition = new Vector2(TexturePosition.X - 2' TexturePosition.Y - 5);                                //NOTE: Must be drawn at Depth - 0.1f because of alpha issues with thumbs.                              SBatch.Draw(m_SkinBtns[Y + m_Counter].BtnTex' new Rectangle((int)(Position.X +                                  ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)'                                  new Rectangle((int)m_SkinBtns[m_Counter + Y].SourcePosition.X'                                  (int)m_SkinBtns[m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)'                                  Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);                                SBatch.Draw(m_Thumb' new Rectangle((int)(Position.X + TexturePosition.X)'                                  (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)'                                  null' Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth);                                if (m_Counter < m_NumberOfSkinsToDisplay)                                  m_Counter++;                          }                      }                        break;                  case Elements.SkinType.Medium:                      for (int X = 0; X <= m_Map.GetUpperBound(1); X++)                      {                          for (int Y = 0; Y <= m_Map.GetUpperBound(0); Y++)                          {                              m_Thumb = FileManager.GetTexture(m_Sex == AvatarSex.Male ?                                  m_MediumAppearances[(Y * X) + m_Counter].MediumAppearance.ThumbnailID.UniqueID :                                  m_MediumFemaleAppearances[(Y * X) + m_Counter].MediumAppearance.ThumbnailID.UniqueID);                              m_BtnWidth = m_SkinBtns[m_Counter + Y].BtnTex.Width / 4;                              m_BtnHeight = m_SkinBtns[m_Counter + Y].BtnTex.Height;                                Vector2 TexturePosition = new Vector2(X * (HeadTileSize.X + 10)' Y * (HeadTileSize.Y));                              Vector2 ButtonPosition = new Vector2(TexturePosition.X - 2' TexturePosition.Y - 5);                                //NOTE: Must be drawn at Depth - 0.1f because of alpha issues with thumbs.                              SBatch.Draw(m_SkinBtns[Y + m_Counter].BtnTex' new Rectangle((int)(Position.X +                                  ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)'                                  new Rectangle((int)m_SkinBtns[m_Counter + Y].SourcePosition.X'                                  (int)m_SkinBtns[m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)'                                  Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);                                SBatch.Draw(m_Thumb' new Rectangle((int)(Position.X + TexturePosition.X)'                                  (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)'                                  null' Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth);                                if (m_Counter < m_NumberOfSkinsToDisplay)                                  m_Counter++;                          }                      }                        break;                  case Elements.SkinType.Dark:                      for (int X = 0; X <= m_Map.GetUpperBound(1); X++)                      {                          for (int Y = 0; Y <= m_Map.GetUpperBound(0); Y++)                          {                              m_Thumb = FileManager.GetTexture(m_Sex == AvatarSex.Male ?                                  m_DarkAppearances[(Y * X) + m_Counter].DarkAppearance.ThumbnailID.UniqueID :                                  m_DarkFemaleAppearances[(Y * X) + m_Counter].DarkAppearance.ThumbnailID.UniqueID);                              m_BtnWidth = m_SkinBtns[m_Counter + Y].BtnTex.Width / 4;                              m_BtnHeight = m_SkinBtns[m_Counter + Y].BtnTex.Height;                                Vector2 TexturePosition = new Vector2(X * (HeadTileSize.X + 10)' Y * (HeadTileSize.Y));                              Vector2 ButtonPosition = new Vector2(TexturePosition.X - 2' TexturePosition.Y - 5);                                //NOTE: Must be drawn at Depth - 0.1f because of alpha issues with thumbs.                              SBatch.Draw(m_SkinBtns[Y + m_Counter].BtnTex' new Rectangle((int)(Position.X +                                  ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)'                                  new Rectangle((int)m_SkinBtns[m_Counter + Y].SourcePosition.X'                                  (int)m_SkinBtns[m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)'                                  Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);                                SBatch.Draw(m_Thumb' new Rectangle((int)(Position.X + TexturePosition.X)'                                  (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)'                                  null' Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth);                                if (m_Counter < m_NumberOfSkinsToDisplay)                                  m_Counter++;                          }                      }                        break;              }
Magic Number,Gonzo.Elements,UIHeadBrowser,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIHeadBrowser.cs,Draw,The following statement contains a magic number: switch (m_SelectedSkintype)              {                  case Elements.SkinType.Light:                      for (int X = 0; X <= m_Map.GetUpperBound(1); X++)                      {                          for (int Y = 0; Y <= m_Map.GetUpperBound(0); Y++)                          {                              m_Thumb = FileManager.GetTexture(m_Sex == AvatarSex.Male ?                                   m_LightAppearances[(Y * X) + m_Counter].LightAppearance.ThumbnailID.UniqueID :                                  m_LightFemaleAppearances[(Y * X) + m_Counter].LightAppearance.ThumbnailID.UniqueID);                              m_BtnWidth = m_SkinBtns[m_Counter + Y].BtnTex.Width / 4;                              m_BtnHeight = m_SkinBtns[m_Counter + Y].BtnTex.Height;                                Vector2 TexturePosition =                                   new Vector2(X * (HeadTileSize.X + 10)' Y * (HeadTileSize.Y));                              Vector2 ButtonPosition = new Vector2(TexturePosition.X - 2' TexturePosition.Y - 5);                                //NOTE: Must be drawn at Depth - 0.1f because of alpha issues with thumbs.                              SBatch.Draw(m_SkinBtns[Y + m_Counter].BtnTex' new Rectangle((int)(Position.X +                                  ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)'                                  new Rectangle((int)m_SkinBtns[m_Counter + Y].SourcePosition.X'                                  (int)m_SkinBtns[m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)'                                  Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);                                SBatch.Draw(m_Thumb' new Rectangle((int)(Position.X + TexturePosition.X)'                                  (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)'                                  null' Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth);                                if (m_Counter < m_NumberOfSkinsToDisplay)                                  m_Counter++;                          }                      }                        break;                  case Elements.SkinType.Medium:                      for (int X = 0; X <= m_Map.GetUpperBound(1); X++)                      {                          for (int Y = 0; Y <= m_Map.GetUpperBound(0); Y++)                          {                              m_Thumb = FileManager.GetTexture(m_Sex == AvatarSex.Male ?                                  m_MediumAppearances[(Y * X) + m_Counter].MediumAppearance.ThumbnailID.UniqueID :                                  m_MediumFemaleAppearances[(Y * X) + m_Counter].MediumAppearance.ThumbnailID.UniqueID);                              m_BtnWidth = m_SkinBtns[m_Counter + Y].BtnTex.Width / 4;                              m_BtnHeight = m_SkinBtns[m_Counter + Y].BtnTex.Height;                                Vector2 TexturePosition = new Vector2(X * (HeadTileSize.X + 10)' Y * (HeadTileSize.Y));                              Vector2 ButtonPosition = new Vector2(TexturePosition.X - 2' TexturePosition.Y - 5);                                //NOTE: Must be drawn at Depth - 0.1f because of alpha issues with thumbs.                              SBatch.Draw(m_SkinBtns[Y + m_Counter].BtnTex' new Rectangle((int)(Position.X +                                  ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)'                                  new Rectangle((int)m_SkinBtns[m_Counter + Y].SourcePosition.X'                                  (int)m_SkinBtns[m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)'                                  Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);                                SBatch.Draw(m_Thumb' new Rectangle((int)(Position.X + TexturePosition.X)'                                  (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)'                                  null' Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth);                                if (m_Counter < m_NumberOfSkinsToDisplay)                                  m_Counter++;                          }                      }                        break;                  case Elements.SkinType.Dark:                      for (int X = 0; X <= m_Map.GetUpperBound(1); X++)                      {                          for (int Y = 0; Y <= m_Map.GetUpperBound(0); Y++)                          {                              m_Thumb = FileManager.GetTexture(m_Sex == AvatarSex.Male ?                                  m_DarkAppearances[(Y * X) + m_Counter].DarkAppearance.ThumbnailID.UniqueID :                                  m_DarkFemaleAppearances[(Y * X) + m_Counter].DarkAppearance.ThumbnailID.UniqueID);                              m_BtnWidth = m_SkinBtns[m_Counter + Y].BtnTex.Width / 4;                              m_BtnHeight = m_SkinBtns[m_Counter + Y].BtnTex.Height;                                Vector2 TexturePosition = new Vector2(X * (HeadTileSize.X + 10)' Y * (HeadTileSize.Y));                              Vector2 ButtonPosition = new Vector2(TexturePosition.X - 2' TexturePosition.Y - 5);                                //NOTE: Must be drawn at Depth - 0.1f because of alpha issues with thumbs.                              SBatch.Draw(m_SkinBtns[Y + m_Counter].BtnTex' new Rectangle((int)(Position.X +                                  ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)'                                  new Rectangle((int)m_SkinBtns[m_Counter + Y].SourcePosition.X'                                  (int)m_SkinBtns[m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)'                                  Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);                                SBatch.Draw(m_Thumb' new Rectangle((int)(Position.X + TexturePosition.X)'                                  (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)'                                  null' Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth);                                if (m_Counter < m_NumberOfSkinsToDisplay)                                  m_Counter++;                          }                      }                        break;              }
Magic Number,Gonzo.Elements,UIHeadBrowser,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIHeadBrowser.cs,Draw,The following statement contains a magic number: switch (m_SelectedSkintype)              {                  case Elements.SkinType.Light:                      for (int X = 0; X <= m_Map.GetUpperBound(1); X++)                      {                          for (int Y = 0; Y <= m_Map.GetUpperBound(0); Y++)                          {                              m_Thumb = FileManager.GetTexture(m_Sex == AvatarSex.Male ?                                   m_LightAppearances[(Y * X) + m_Counter].LightAppearance.ThumbnailID.UniqueID :                                  m_LightFemaleAppearances[(Y * X) + m_Counter].LightAppearance.ThumbnailID.UniqueID);                              m_BtnWidth = m_SkinBtns[m_Counter + Y].BtnTex.Width / 4;                              m_BtnHeight = m_SkinBtns[m_Counter + Y].BtnTex.Height;                                Vector2 TexturePosition =                                   new Vector2(X * (HeadTileSize.X + 10)' Y * (HeadTileSize.Y));                              Vector2 ButtonPosition = new Vector2(TexturePosition.X - 2' TexturePosition.Y - 5);                                //NOTE: Must be drawn at Depth - 0.1f because of alpha issues with thumbs.                              SBatch.Draw(m_SkinBtns[Y + m_Counter].BtnTex' new Rectangle((int)(Position.X +                                  ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)'                                  new Rectangle((int)m_SkinBtns[m_Counter + Y].SourcePosition.X'                                  (int)m_SkinBtns[m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)'                                  Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);                                SBatch.Draw(m_Thumb' new Rectangle((int)(Position.X + TexturePosition.X)'                                  (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)'                                  null' Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth);                                if (m_Counter < m_NumberOfSkinsToDisplay)                                  m_Counter++;                          }                      }                        break;                  case Elements.SkinType.Medium:                      for (int X = 0; X <= m_Map.GetUpperBound(1); X++)                      {                          for (int Y = 0; Y <= m_Map.GetUpperBound(0); Y++)                          {                              m_Thumb = FileManager.GetTexture(m_Sex == AvatarSex.Male ?                                  m_MediumAppearances[(Y * X) + m_Counter].MediumAppearance.ThumbnailID.UniqueID :                                  m_MediumFemaleAppearances[(Y * X) + m_Counter].MediumAppearance.ThumbnailID.UniqueID);                              m_BtnWidth = m_SkinBtns[m_Counter + Y].BtnTex.Width / 4;                              m_BtnHeight = m_SkinBtns[m_Counter + Y].BtnTex.Height;                                Vector2 TexturePosition = new Vector2(X * (HeadTileSize.X + 10)' Y * (HeadTileSize.Y));                              Vector2 ButtonPosition = new Vector2(TexturePosition.X - 2' TexturePosition.Y - 5);                                //NOTE: Must be drawn at Depth - 0.1f because of alpha issues with thumbs.                              SBatch.Draw(m_SkinBtns[Y + m_Counter].BtnTex' new Rectangle((int)(Position.X +                                  ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)'                                  new Rectangle((int)m_SkinBtns[m_Counter + Y].SourcePosition.X'                                  (int)m_SkinBtns[m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)'                                  Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);                                SBatch.Draw(m_Thumb' new Rectangle((int)(Position.X + TexturePosition.X)'                                  (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)'                                  null' Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth);                                if (m_Counter < m_NumberOfSkinsToDisplay)                                  m_Counter++;                          }                      }                        break;                  case Elements.SkinType.Dark:                      for (int X = 0; X <= m_Map.GetUpperBound(1); X++)                      {                          for (int Y = 0; Y <= m_Map.GetUpperBound(0); Y++)                          {                              m_Thumb = FileManager.GetTexture(m_Sex == AvatarSex.Male ?                                  m_DarkAppearances[(Y * X) + m_Counter].DarkAppearance.ThumbnailID.UniqueID :                                  m_DarkFemaleAppearances[(Y * X) + m_Counter].DarkAppearance.ThumbnailID.UniqueID);                              m_BtnWidth = m_SkinBtns[m_Counter + Y].BtnTex.Width / 4;                              m_BtnHeight = m_SkinBtns[m_Counter + Y].BtnTex.Height;                                Vector2 TexturePosition = new Vector2(X * (HeadTileSize.X + 10)' Y * (HeadTileSize.Y));                              Vector2 ButtonPosition = new Vector2(TexturePosition.X - 2' TexturePosition.Y - 5);                                //NOTE: Must be drawn at Depth - 0.1f because of alpha issues with thumbs.                              SBatch.Draw(m_SkinBtns[Y + m_Counter].BtnTex' new Rectangle((int)(Position.X +                                  ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)'                                  new Rectangle((int)m_SkinBtns[m_Counter + Y].SourcePosition.X'                                  (int)m_SkinBtns[m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)'                                  Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);                                SBatch.Draw(m_Thumb' new Rectangle((int)(Position.X + TexturePosition.X)'                                  (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)'                                  null' Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth);                                if (m_Counter < m_NumberOfSkinsToDisplay)                                  m_Counter++;                          }                      }                        break;              }
Magic Number,Gonzo.Elements,UIHeadBrowser,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIHeadBrowser.cs,Draw,The following statement contains a magic number: switch (m_SelectedSkintype)              {                  case Elements.SkinType.Light:                      for (int X = 0; X <= m_Map.GetUpperBound(1); X++)                      {                          for (int Y = 0; Y <= m_Map.GetUpperBound(0); Y++)                          {                              m_Thumb = FileManager.GetTexture(m_Sex == AvatarSex.Male ?                                   m_LightAppearances[(Y * X) + m_Counter].LightAppearance.ThumbnailID.UniqueID :                                  m_LightFemaleAppearances[(Y * X) + m_Counter].LightAppearance.ThumbnailID.UniqueID);                              m_BtnWidth = m_SkinBtns[m_Counter + Y].BtnTex.Width / 4;                              m_BtnHeight = m_SkinBtns[m_Counter + Y].BtnTex.Height;                                Vector2 TexturePosition =                                   new Vector2(X * (HeadTileSize.X + 10)' Y * (HeadTileSize.Y));                              Vector2 ButtonPosition = new Vector2(TexturePosition.X - 2' TexturePosition.Y - 5);                                //NOTE: Must be drawn at Depth - 0.1f because of alpha issues with thumbs.                              SBatch.Draw(m_SkinBtns[Y + m_Counter].BtnTex' new Rectangle((int)(Position.X +                                  ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)'                                  new Rectangle((int)m_SkinBtns[m_Counter + Y].SourcePosition.X'                                  (int)m_SkinBtns[m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)'                                  Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);                                SBatch.Draw(m_Thumb' new Rectangle((int)(Position.X + TexturePosition.X)'                                  (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)'                                  null' Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth);                                if (m_Counter < m_NumberOfSkinsToDisplay)                                  m_Counter++;                          }                      }                        break;                  case Elements.SkinType.Medium:                      for (int X = 0; X <= m_Map.GetUpperBound(1); X++)                      {                          for (int Y = 0; Y <= m_Map.GetUpperBound(0); Y++)                          {                              m_Thumb = FileManager.GetTexture(m_Sex == AvatarSex.Male ?                                  m_MediumAppearances[(Y * X) + m_Counter].MediumAppearance.ThumbnailID.UniqueID :                                  m_MediumFemaleAppearances[(Y * X) + m_Counter].MediumAppearance.ThumbnailID.UniqueID);                              m_BtnWidth = m_SkinBtns[m_Counter + Y].BtnTex.Width / 4;                              m_BtnHeight = m_SkinBtns[m_Counter + Y].BtnTex.Height;                                Vector2 TexturePosition = new Vector2(X * (HeadTileSize.X + 10)' Y * (HeadTileSize.Y));                              Vector2 ButtonPosition = new Vector2(TexturePosition.X - 2' TexturePosition.Y - 5);                                //NOTE: Must be drawn at Depth - 0.1f because of alpha issues with thumbs.                              SBatch.Draw(m_SkinBtns[Y + m_Counter].BtnTex' new Rectangle((int)(Position.X +                                  ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)'                                  new Rectangle((int)m_SkinBtns[m_Counter + Y].SourcePosition.X'                                  (int)m_SkinBtns[m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)'                                  Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);                                SBatch.Draw(m_Thumb' new Rectangle((int)(Position.X + TexturePosition.X)'                                  (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)'                                  null' Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth);                                if (m_Counter < m_NumberOfSkinsToDisplay)                                  m_Counter++;                          }                      }                        break;                  case Elements.SkinType.Dark:                      for (int X = 0; X <= m_Map.GetUpperBound(1); X++)                      {                          for (int Y = 0; Y <= m_Map.GetUpperBound(0); Y++)                          {                              m_Thumb = FileManager.GetTexture(m_Sex == AvatarSex.Male ?                                  m_DarkAppearances[(Y * X) + m_Counter].DarkAppearance.ThumbnailID.UniqueID :                                  m_DarkFemaleAppearances[(Y * X) + m_Counter].DarkAppearance.ThumbnailID.UniqueID);                              m_BtnWidth = m_SkinBtns[m_Counter + Y].BtnTex.Width / 4;                              m_BtnHeight = m_SkinBtns[m_Counter + Y].BtnTex.Height;                                Vector2 TexturePosition = new Vector2(X * (HeadTileSize.X + 10)' Y * (HeadTileSize.Y));                              Vector2 ButtonPosition = new Vector2(TexturePosition.X - 2' TexturePosition.Y - 5);                                //NOTE: Must be drawn at Depth - 0.1f because of alpha issues with thumbs.                              SBatch.Draw(m_SkinBtns[Y + m_Counter].BtnTex' new Rectangle((int)(Position.X +                                  ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)'                                  new Rectangle((int)m_SkinBtns[m_Counter + Y].SourcePosition.X'                                  (int)m_SkinBtns[m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)'                                  Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);                                SBatch.Draw(m_Thumb' new Rectangle((int)(Position.X + TexturePosition.X)'                                  (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)'                                  null' Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth);                                if (m_Counter < m_NumberOfSkinsToDisplay)                                  m_Counter++;                          }                      }                        break;              }
Magic Number,Gonzo.Elements,UIHeadBrowser,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIHeadBrowser.cs,Draw,The following statement contains a magic number: switch (m_SelectedSkintype)              {                  case Elements.SkinType.Light:                      for (int X = 0; X <= m_Map.GetUpperBound(1); X++)                      {                          for (int Y = 0; Y <= m_Map.GetUpperBound(0); Y++)                          {                              m_Thumb = FileManager.GetTexture(m_Sex == AvatarSex.Male ?                                   m_LightAppearances[(Y * X) + m_Counter].LightAppearance.ThumbnailID.UniqueID :                                  m_LightFemaleAppearances[(Y * X) + m_Counter].LightAppearance.ThumbnailID.UniqueID);                              m_BtnWidth = m_SkinBtns[m_Counter + Y].BtnTex.Width / 4;                              m_BtnHeight = m_SkinBtns[m_Counter + Y].BtnTex.Height;                                Vector2 TexturePosition =                                   new Vector2(X * (HeadTileSize.X + 10)' Y * (HeadTileSize.Y));                              Vector2 ButtonPosition = new Vector2(TexturePosition.X - 2' TexturePosition.Y - 5);                                //NOTE: Must be drawn at Depth - 0.1f because of alpha issues with thumbs.                              SBatch.Draw(m_SkinBtns[Y + m_Counter].BtnTex' new Rectangle((int)(Position.X +                                  ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)'                                  new Rectangle((int)m_SkinBtns[m_Counter + Y].SourcePosition.X'                                  (int)m_SkinBtns[m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)'                                  Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);                                SBatch.Draw(m_Thumb' new Rectangle((int)(Position.X + TexturePosition.X)'                                  (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)'                                  null' Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth);                                if (m_Counter < m_NumberOfSkinsToDisplay)                                  m_Counter++;                          }                      }                        break;                  case Elements.SkinType.Medium:                      for (int X = 0; X <= m_Map.GetUpperBound(1); X++)                      {                          for (int Y = 0; Y <= m_Map.GetUpperBound(0); Y++)                          {                              m_Thumb = FileManager.GetTexture(m_Sex == AvatarSex.Male ?                                  m_MediumAppearances[(Y * X) + m_Counter].MediumAppearance.ThumbnailID.UniqueID :                                  m_MediumFemaleAppearances[(Y * X) + m_Counter].MediumAppearance.ThumbnailID.UniqueID);                              m_BtnWidth = m_SkinBtns[m_Counter + Y].BtnTex.Width / 4;                              m_BtnHeight = m_SkinBtns[m_Counter + Y].BtnTex.Height;                                Vector2 TexturePosition = new Vector2(X * (HeadTileSize.X + 10)' Y * (HeadTileSize.Y));                              Vector2 ButtonPosition = new Vector2(TexturePosition.X - 2' TexturePosition.Y - 5);                                //NOTE: Must be drawn at Depth - 0.1f because of alpha issues with thumbs.                              SBatch.Draw(m_SkinBtns[Y + m_Counter].BtnTex' new Rectangle((int)(Position.X +                                  ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)'                                  new Rectangle((int)m_SkinBtns[m_Counter + Y].SourcePosition.X'                                  (int)m_SkinBtns[m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)'                                  Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);                                SBatch.Draw(m_Thumb' new Rectangle((int)(Position.X + TexturePosition.X)'                                  (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)'                                  null' Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth);                                if (m_Counter < m_NumberOfSkinsToDisplay)                                  m_Counter++;                          }                      }                        break;                  case Elements.SkinType.Dark:                      for (int X = 0; X <= m_Map.GetUpperBound(1); X++)                      {                          for (int Y = 0; Y <= m_Map.GetUpperBound(0); Y++)                          {                              m_Thumb = FileManager.GetTexture(m_Sex == AvatarSex.Male ?                                  m_DarkAppearances[(Y * X) + m_Counter].DarkAppearance.ThumbnailID.UniqueID :                                  m_DarkFemaleAppearances[(Y * X) + m_Counter].DarkAppearance.ThumbnailID.UniqueID);                              m_BtnWidth = m_SkinBtns[m_Counter + Y].BtnTex.Width / 4;                              m_BtnHeight = m_SkinBtns[m_Counter + Y].BtnTex.Height;                                Vector2 TexturePosition = new Vector2(X * (HeadTileSize.X + 10)' Y * (HeadTileSize.Y));                              Vector2 ButtonPosition = new Vector2(TexturePosition.X - 2' TexturePosition.Y - 5);                                //NOTE: Must be drawn at Depth - 0.1f because of alpha issues with thumbs.                              SBatch.Draw(m_SkinBtns[Y + m_Counter].BtnTex' new Rectangle((int)(Position.X +                                  ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)'                                  new Rectangle((int)m_SkinBtns[m_Counter + Y].SourcePosition.X'                                  (int)m_SkinBtns[m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)'                                  Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);                                SBatch.Draw(m_Thumb' new Rectangle((int)(Position.X + TexturePosition.X)'                                  (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)'                                  null' Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth);                                if (m_Counter < m_NumberOfSkinsToDisplay)                                  m_Counter++;                          }                      }                        break;              }
Magic Number,Gonzo.Elements,UIHeadBrowser,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIHeadBrowser.cs,Draw,The following statement contains a magic number: switch (m_SelectedSkintype)              {                  case Elements.SkinType.Light:                      for (int X = 0; X <= m_Map.GetUpperBound(1); X++)                      {                          for (int Y = 0; Y <= m_Map.GetUpperBound(0); Y++)                          {                              m_Thumb = FileManager.GetTexture(m_Sex == AvatarSex.Male ?                                   m_LightAppearances[(Y * X) + m_Counter].LightAppearance.ThumbnailID.UniqueID :                                  m_LightFemaleAppearances[(Y * X) + m_Counter].LightAppearance.ThumbnailID.UniqueID);                              m_BtnWidth = m_SkinBtns[m_Counter + Y].BtnTex.Width / 4;                              m_BtnHeight = m_SkinBtns[m_Counter + Y].BtnTex.Height;                                Vector2 TexturePosition =                                   new Vector2(X * (HeadTileSize.X + 10)' Y * (HeadTileSize.Y));                              Vector2 ButtonPosition = new Vector2(TexturePosition.X - 2' TexturePosition.Y - 5);                                //NOTE: Must be drawn at Depth - 0.1f because of alpha issues with thumbs.                              SBatch.Draw(m_SkinBtns[Y + m_Counter].BtnTex' new Rectangle((int)(Position.X +                                  ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)'                                  new Rectangle((int)m_SkinBtns[m_Counter + Y].SourcePosition.X'                                  (int)m_SkinBtns[m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)'                                  Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);                                SBatch.Draw(m_Thumb' new Rectangle((int)(Position.X + TexturePosition.X)'                                  (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)'                                  null' Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth);                                if (m_Counter < m_NumberOfSkinsToDisplay)                                  m_Counter++;                          }                      }                        break;                  case Elements.SkinType.Medium:                      for (int X = 0; X <= m_Map.GetUpperBound(1); X++)                      {                          for (int Y = 0; Y <= m_Map.GetUpperBound(0); Y++)                          {                              m_Thumb = FileManager.GetTexture(m_Sex == AvatarSex.Male ?                                  m_MediumAppearances[(Y * X) + m_Counter].MediumAppearance.ThumbnailID.UniqueID :                                  m_MediumFemaleAppearances[(Y * X) + m_Counter].MediumAppearance.ThumbnailID.UniqueID);                              m_BtnWidth = m_SkinBtns[m_Counter + Y].BtnTex.Width / 4;                              m_BtnHeight = m_SkinBtns[m_Counter + Y].BtnTex.Height;                                Vector2 TexturePosition = new Vector2(X * (HeadTileSize.X + 10)' Y * (HeadTileSize.Y));                              Vector2 ButtonPosition = new Vector2(TexturePosition.X - 2' TexturePosition.Y - 5);                                //NOTE: Must be drawn at Depth - 0.1f because of alpha issues with thumbs.                              SBatch.Draw(m_SkinBtns[Y + m_Counter].BtnTex' new Rectangle((int)(Position.X +                                  ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)'                                  new Rectangle((int)m_SkinBtns[m_Counter + Y].SourcePosition.X'                                  (int)m_SkinBtns[m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)'                                  Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);                                SBatch.Draw(m_Thumb' new Rectangle((int)(Position.X + TexturePosition.X)'                                  (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)'                                  null' Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth);                                if (m_Counter < m_NumberOfSkinsToDisplay)                                  m_Counter++;                          }                      }                        break;                  case Elements.SkinType.Dark:                      for (int X = 0; X <= m_Map.GetUpperBound(1); X++)                      {                          for (int Y = 0; Y <= m_Map.GetUpperBound(0); Y++)                          {                              m_Thumb = FileManager.GetTexture(m_Sex == AvatarSex.Male ?                                  m_DarkAppearances[(Y * X) + m_Counter].DarkAppearance.ThumbnailID.UniqueID :                                  m_DarkFemaleAppearances[(Y * X) + m_Counter].DarkAppearance.ThumbnailID.UniqueID);                              m_BtnWidth = m_SkinBtns[m_Counter + Y].BtnTex.Width / 4;                              m_BtnHeight = m_SkinBtns[m_Counter + Y].BtnTex.Height;                                Vector2 TexturePosition = new Vector2(X * (HeadTileSize.X + 10)' Y * (HeadTileSize.Y));                              Vector2 ButtonPosition = new Vector2(TexturePosition.X - 2' TexturePosition.Y - 5);                                //NOTE: Must be drawn at Depth - 0.1f because of alpha issues with thumbs.                              SBatch.Draw(m_SkinBtns[Y + m_Counter].BtnTex' new Rectangle((int)(Position.X +                                  ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)'                                  new Rectangle((int)m_SkinBtns[m_Counter + Y].SourcePosition.X'                                  (int)m_SkinBtns[m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)'                                  Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);                                SBatch.Draw(m_Thumb' new Rectangle((int)(Position.X + TexturePosition.X)'                                  (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)'                                  null' Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth);                                if (m_Counter < m_NumberOfSkinsToDisplay)                                  m_Counter++;                          }                      }                        break;              }
Magic Number,Gonzo.Elements,UIHeadBrowser,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIHeadBrowser.cs,Draw,The following statement contains a magic number: switch (m_SelectedSkintype)              {                  case Elements.SkinType.Light:                      for (int X = 0; X <= m_Map.GetUpperBound(1); X++)                      {                          for (int Y = 0; Y <= m_Map.GetUpperBound(0); Y++)                          {                              m_Thumb = FileManager.GetTexture(m_Sex == AvatarSex.Male ?                                   m_LightAppearances[(Y * X) + m_Counter].LightAppearance.ThumbnailID.UniqueID :                                  m_LightFemaleAppearances[(Y * X) + m_Counter].LightAppearance.ThumbnailID.UniqueID);                              m_BtnWidth = m_SkinBtns[m_Counter + Y].BtnTex.Width / 4;                              m_BtnHeight = m_SkinBtns[m_Counter + Y].BtnTex.Height;                                Vector2 TexturePosition =                                   new Vector2(X * (HeadTileSize.X + 10)' Y * (HeadTileSize.Y));                              Vector2 ButtonPosition = new Vector2(TexturePosition.X - 2' TexturePosition.Y - 5);                                //NOTE: Must be drawn at Depth - 0.1f because of alpha issues with thumbs.                              SBatch.Draw(m_SkinBtns[Y + m_Counter].BtnTex' new Rectangle((int)(Position.X +                                  ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)'                                  new Rectangle((int)m_SkinBtns[m_Counter + Y].SourcePosition.X'                                  (int)m_SkinBtns[m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)'                                  Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);                                SBatch.Draw(m_Thumb' new Rectangle((int)(Position.X + TexturePosition.X)'                                  (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)'                                  null' Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth);                                if (m_Counter < m_NumberOfSkinsToDisplay)                                  m_Counter++;                          }                      }                        break;                  case Elements.SkinType.Medium:                      for (int X = 0; X <= m_Map.GetUpperBound(1); X++)                      {                          for (int Y = 0; Y <= m_Map.GetUpperBound(0); Y++)                          {                              m_Thumb = FileManager.GetTexture(m_Sex == AvatarSex.Male ?                                  m_MediumAppearances[(Y * X) + m_Counter].MediumAppearance.ThumbnailID.UniqueID :                                  m_MediumFemaleAppearances[(Y * X) + m_Counter].MediumAppearance.ThumbnailID.UniqueID);                              m_BtnWidth = m_SkinBtns[m_Counter + Y].BtnTex.Width / 4;                              m_BtnHeight = m_SkinBtns[m_Counter + Y].BtnTex.Height;                                Vector2 TexturePosition = new Vector2(X * (HeadTileSize.X + 10)' Y * (HeadTileSize.Y));                              Vector2 ButtonPosition = new Vector2(TexturePosition.X - 2' TexturePosition.Y - 5);                                //NOTE: Must be drawn at Depth - 0.1f because of alpha issues with thumbs.                              SBatch.Draw(m_SkinBtns[Y + m_Counter].BtnTex' new Rectangle((int)(Position.X +                                  ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)'                                  new Rectangle((int)m_SkinBtns[m_Counter + Y].SourcePosition.X'                                  (int)m_SkinBtns[m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)'                                  Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);                                SBatch.Draw(m_Thumb' new Rectangle((int)(Position.X + TexturePosition.X)'                                  (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)'                                  null' Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth);                                if (m_Counter < m_NumberOfSkinsToDisplay)                                  m_Counter++;                          }                      }                        break;                  case Elements.SkinType.Dark:                      for (int X = 0; X <= m_Map.GetUpperBound(1); X++)                      {                          for (int Y = 0; Y <= m_Map.GetUpperBound(0); Y++)                          {                              m_Thumb = FileManager.GetTexture(m_Sex == AvatarSex.Male ?                                  m_DarkAppearances[(Y * X) + m_Counter].DarkAppearance.ThumbnailID.UniqueID :                                  m_DarkFemaleAppearances[(Y * X) + m_Counter].DarkAppearance.ThumbnailID.UniqueID);                              m_BtnWidth = m_SkinBtns[m_Counter + Y].BtnTex.Width / 4;                              m_BtnHeight = m_SkinBtns[m_Counter + Y].BtnTex.Height;                                Vector2 TexturePosition = new Vector2(X * (HeadTileSize.X + 10)' Y * (HeadTileSize.Y));                              Vector2 ButtonPosition = new Vector2(TexturePosition.X - 2' TexturePosition.Y - 5);                                //NOTE: Must be drawn at Depth - 0.1f because of alpha issues with thumbs.                              SBatch.Draw(m_SkinBtns[Y + m_Counter].BtnTex' new Rectangle((int)(Position.X +                                  ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)'                                  new Rectangle((int)m_SkinBtns[m_Counter + Y].SourcePosition.X'                                  (int)m_SkinBtns[m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)'                                  Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);                                SBatch.Draw(m_Thumb' new Rectangle((int)(Position.X + TexturePosition.X)'                                  (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)'                                  null' Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth);                                if (m_Counter < m_NumberOfSkinsToDisplay)                                  m_Counter++;                          }                      }                        break;              }
Magic Number,Gonzo.Elements,UIHeadBrowser,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIHeadBrowser.cs,Draw,The following statement contains a magic number: switch (m_SelectedSkintype)              {                  case Elements.SkinType.Light:                      for (int X = 0; X <= m_Map.GetUpperBound(1); X++)                      {                          for (int Y = 0; Y <= m_Map.GetUpperBound(0); Y++)                          {                              m_Thumb = FileManager.GetTexture(m_Sex == AvatarSex.Male ?                                   m_LightAppearances[(Y * X) + m_Counter].LightAppearance.ThumbnailID.UniqueID :                                  m_LightFemaleAppearances[(Y * X) + m_Counter].LightAppearance.ThumbnailID.UniqueID);                              m_BtnWidth = m_SkinBtns[m_Counter + Y].BtnTex.Width / 4;                              m_BtnHeight = m_SkinBtns[m_Counter + Y].BtnTex.Height;                                Vector2 TexturePosition =                                   new Vector2(X * (HeadTileSize.X + 10)' Y * (HeadTileSize.Y));                              Vector2 ButtonPosition = new Vector2(TexturePosition.X - 2' TexturePosition.Y - 5);                                //NOTE: Must be drawn at Depth - 0.1f because of alpha issues with thumbs.                              SBatch.Draw(m_SkinBtns[Y + m_Counter].BtnTex' new Rectangle((int)(Position.X +                                  ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)'                                  new Rectangle((int)m_SkinBtns[m_Counter + Y].SourcePosition.X'                                  (int)m_SkinBtns[m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)'                                  Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);                                SBatch.Draw(m_Thumb' new Rectangle((int)(Position.X + TexturePosition.X)'                                  (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)'                                  null' Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth);                                if (m_Counter < m_NumberOfSkinsToDisplay)                                  m_Counter++;                          }                      }                        break;                  case Elements.SkinType.Medium:                      for (int X = 0; X <= m_Map.GetUpperBound(1); X++)                      {                          for (int Y = 0; Y <= m_Map.GetUpperBound(0); Y++)                          {                              m_Thumb = FileManager.GetTexture(m_Sex == AvatarSex.Male ?                                  m_MediumAppearances[(Y * X) + m_Counter].MediumAppearance.ThumbnailID.UniqueID :                                  m_MediumFemaleAppearances[(Y * X) + m_Counter].MediumAppearance.ThumbnailID.UniqueID);                              m_BtnWidth = m_SkinBtns[m_Counter + Y].BtnTex.Width / 4;                              m_BtnHeight = m_SkinBtns[m_Counter + Y].BtnTex.Height;                                Vector2 TexturePosition = new Vector2(X * (HeadTileSize.X + 10)' Y * (HeadTileSize.Y));                              Vector2 ButtonPosition = new Vector2(TexturePosition.X - 2' TexturePosition.Y - 5);                                //NOTE: Must be drawn at Depth - 0.1f because of alpha issues with thumbs.                              SBatch.Draw(m_SkinBtns[Y + m_Counter].BtnTex' new Rectangle((int)(Position.X +                                  ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)'                                  new Rectangle((int)m_SkinBtns[m_Counter + Y].SourcePosition.X'                                  (int)m_SkinBtns[m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)'                                  Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);                                SBatch.Draw(m_Thumb' new Rectangle((int)(Position.X + TexturePosition.X)'                                  (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)'                                  null' Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth);                                if (m_Counter < m_NumberOfSkinsToDisplay)                                  m_Counter++;                          }                      }                        break;                  case Elements.SkinType.Dark:                      for (int X = 0; X <= m_Map.GetUpperBound(1); X++)                      {                          for (int Y = 0; Y <= m_Map.GetUpperBound(0); Y++)                          {                              m_Thumb = FileManager.GetTexture(m_Sex == AvatarSex.Male ?                                  m_DarkAppearances[(Y * X) + m_Counter].DarkAppearance.ThumbnailID.UniqueID :                                  m_DarkFemaleAppearances[(Y * X) + m_Counter].DarkAppearance.ThumbnailID.UniqueID);                              m_BtnWidth = m_SkinBtns[m_Counter + Y].BtnTex.Width / 4;                              m_BtnHeight = m_SkinBtns[m_Counter + Y].BtnTex.Height;                                Vector2 TexturePosition = new Vector2(X * (HeadTileSize.X + 10)' Y * (HeadTileSize.Y));                              Vector2 ButtonPosition = new Vector2(TexturePosition.X - 2' TexturePosition.Y - 5);                                //NOTE: Must be drawn at Depth - 0.1f because of alpha issues with thumbs.                              SBatch.Draw(m_SkinBtns[Y + m_Counter].BtnTex' new Rectangle((int)(Position.X +                                  ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)'                                  new Rectangle((int)m_SkinBtns[m_Counter + Y].SourcePosition.X'                                  (int)m_SkinBtns[m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)'                                  Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);                                SBatch.Draw(m_Thumb' new Rectangle((int)(Position.X + TexturePosition.X)'                                  (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)'                                  null' Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth);                                if (m_Counter < m_NumberOfSkinsToDisplay)                                  m_Counter++;                          }                      }                        break;              }
Magic Number,Gonzo.Elements,UIProgressBar,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIProgressBar.cs,UIProgressBar,The following statement contains a magic number: m_LblProgressInPercentage = new UILabel(InitialValue' 1' new Vector2(Width / 2' 0)'                   m_Font.MeasureString(InitialValue)' Color.Black' 11' m_Screen);
Magic Number,Gonzo.Elements,UIProgressBar,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIProgressBar.cs,UIProgressBar,The following statement contains a magic number: m_LblProgressInPercentage = new UILabel(InitialValue' 1' new Vector2(Width / 2' 0)'                   m_Font.MeasureString(InitialValue)' Color.Black' 11' m_Screen);
Magic Number,Gonzo.Elements,UIProgressBar,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIProgressBar.cs,Draw,The following statement contains a magic number: SBatch.Draw(m_ProgressBarFront' new Rectangle((int)Position.X' (int)Position.Y' (int)m_Size.X'                       (int)(m_ProgressInPercentage / 100) * TotalProgressInPercentage)' Color.White);
Magic Number,Gonzo.Elements,UISkinBrowser,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UISkinBrowser.cs,UISkinBrowser,The following statement contains a magic number: m_SkinBrowserArrowLeft = new UIButton("SkinBrowserArrowLeft"'                  Position + new Vector2(5' Size.Y - 70)' Screen'                  FileManager.GetTexture((ulong)FileIDs.UIFileIDs.person_edit_skinbrowserarrowleft));
Magic Number,Gonzo.Elements,UISkinBrowser,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UISkinBrowser.cs,UISkinBrowser,The following statement contains a magic number: m_SkinBrowserArrowLeft = new UIButton("SkinBrowserArrowLeft"'                  Position + new Vector2(5' Size.Y - 70)' Screen'                  FileManager.GetTexture((ulong)FileIDs.UIFileIDs.person_edit_skinbrowserarrowleft));
Magic Number,Gonzo.Elements,UISkinBrowser,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UISkinBrowser.cs,UISkinBrowser,The following statement contains a magic number: m_SkinBrowserArrowRight = new UIButton("SkinBrowserArrowRight"'                   Position + new Vector2(Size.X - 45' Size.Y - 70)' Screen'                   FileManager.GetTexture((ulong)FileIDs.UIFileIDs.person_edit_skinbrowserarrowright));
Magic Number,Gonzo.Elements,UISkinBrowser,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UISkinBrowser.cs,UISkinBrowser,The following statement contains a magic number: m_SkinBrowserArrowRight = new UIButton("SkinBrowserArrowRight"'                   Position + new Vector2(Size.X - 45' Size.Y - 70)' Screen'                   FileManager.GetTexture((ulong)FileIDs.UIFileIDs.person_edit_skinbrowserarrowright));
Magic Number,Gonzo.Elements,UISkinBrowser,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UISkinBrowser.cs,IsMouseOverButton,The following statement contains a magic number: Input.MousePosition.X > BtnPosition.X && Input.MousePosition.X <= (BtnPosition.X + (Button.BtnTex.Width / 4))
Magic Number,Gonzo.Elements,UITextEdit,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UITextEdit.cs,UITextEdit,The following statement contains a magic number: switch (Font)              {                  case 9:                      m_Font = Screen.Font9px;                      break;                  case 10:                      m_Font = Screen.Font10px;                      break;                  case 12:                      m_Font = Screen.Font12px;                      break;                  case 14:                      m_Font = Screen.Font14px;                      break;                  case 16:                      m_Font = Screen.Font16px;                      break;              }
Magic Number,Gonzo.Elements,UITextEdit,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UITextEdit.cs,UITextEdit,The following statement contains a magic number: switch (Font)              {                  case 9:                      m_Font = Screen.Font9px;                      break;                  case 10:                      m_Font = Screen.Font10px;                      break;                  case 12:                      m_Font = Screen.Font12px;                      break;                  case 14:                      m_Font = Screen.Font14px;                      break;                  case 16:                      m_Font = Screen.Font16px;                      break;              }
Magic Number,Gonzo.Elements,UITextEdit,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UITextEdit.cs,UITextEdit,The following statement contains a magic number: switch (Font)              {                  case 9:                      m_Font = Screen.Font9px;                      break;                  case 10:                      m_Font = Screen.Font10px;                      break;                  case 12:                      m_Font = Screen.Font12px;                      break;                  case 14:                      m_Font = Screen.Font14px;                      break;                  case 16:                      m_Font = Screen.Font16px;                      break;              }
Magic Number,Gonzo.Elements,UITextEdit,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UITextEdit.cs,UITextEdit,The following statement contains a magic number: switch (Font)              {                  case 9:                      m_Font = Screen.Font9px;                      break;                  case 10:                      m_Font = Screen.Font10px;                      break;                  case 12:                      m_Font = Screen.Font12px;                      break;                  case 14:                      m_Font = Screen.Font14px;                      break;                  case 16:                      m_Font = Screen.Font16px;                      break;              }
Magic Number,Gonzo.Elements,UITextEdit,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UITextEdit.cs,UITextEdit,The following statement contains a magic number: switch (Font)              {                  case 9:                      m_Font = Screen.Font9px;                      break;                  case 10:                      m_Font = Screen.Font10px;                      break;                  case 12:                      m_Font = Screen.Font12px;                      break;                  case 14:                      m_Font = Screen.Font14px;                      break;                  case 16:                      m_Font = Screen.Font16px;                      break;              }
Magic Number,Gonzo.Elements,UITextEdit,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UITextEdit.cs,UITextEdit,The following statement contains a magic number: m_CursorVisibilityTimer = new Timer(100);
Magic Number,Gonzo.Elements,UITextEdit,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UITextEdit.cs,UITextEdit,The following statement contains a magic number: m_FrameTimer = new Timer(500);
Magic Number,Gonzo.Elements,UITextEdit,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UITextEdit.cs,UITextEdit,The following statement contains a magic number: Image.Slicer = new NineSlicer(new Vector2(0' 0)' (int)Image.Texture.Width' (int)Image.Texture.Width' 15' 15' 15' 15);
Magic Number,Gonzo.Elements,UITextEdit,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UITextEdit.cs,UITextEdit,The following statement contains a magic number: Image.Slicer = new NineSlicer(new Vector2(0' 0)' (int)Image.Texture.Width' (int)Image.Texture.Width' 15' 15' 15' 15);
Magic Number,Gonzo.Elements,UITextEdit,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UITextEdit.cs,UITextEdit,The following statement contains a magic number: Image.Slicer = new NineSlicer(new Vector2(0' 0)' (int)Image.Texture.Width' (int)Image.Texture.Width' 15' 15' 15' 15);
Magic Number,Gonzo.Elements,UITextEdit,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UITextEdit.cs,UITextEdit,The following statement contains a magic number: Image.Slicer = new NineSlicer(new Vector2(0' 0)' (int)Image.Texture.Width' (int)Image.Texture.Width' 15' 15' 15' 15);
Magic Number,Gonzo.Elements,UITextEdit,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UITextEdit.cs,UITextEdit,The following statement contains a magic number: TextColor = new Color(Node.Color.Numbers[0]' Node.Color.Numbers[1]' Node.Color.Numbers[2]);
Magic Number,Gonzo.Elements,UITextEdit,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UITextEdit.cs,UITextEdit,The following statement contains a magic number: m_BackColor = new Color(Node.Color.Numbers[0]' Node.Color.Numbers[1]' Node.Color.Numbers[2]);
Magic Number,Gonzo.Elements,UITextEdit,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UITextEdit.cs,UITextEdit,The following statement contains a magic number: m_CursorColor = new Color(Node.CursorColor.Numbers[0]' Node.CursorColor.Numbers[1]' Node.CursorColor.Numbers[2]);
Magic Number,Gonzo.Elements,UITextEdit,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UITextEdit.cs,UITextEdit,The following statement contains a magic number: m_FrameColor = new Color(Node.FrameColor.Numbers[0]' Node.FrameColor.Numbers[1]' Node.FrameColor.Numbers[2]);
Magic Number,Gonzo.Elements,UITextEdit,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UITextEdit.cs,UITextEdit,The following statement contains a magic number: switch (Font)              {                  case 9:                      m_Font = Screen.Font9px;                      break;                  case 10:                      m_Font = Screen.Font10px;                      break;                  case 12:                      m_Font = Screen.Font12px;                      break;                  case 14:                      m_Font = Screen.Font14px;                      break;                  case 16:                      m_Font = Screen.Font16px;                      break;              }
Magic Number,Gonzo.Elements,UITextEdit,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UITextEdit.cs,UITextEdit,The following statement contains a magic number: switch (Font)              {                  case 9:                      m_Font = Screen.Font9px;                      break;                  case 10:                      m_Font = Screen.Font10px;                      break;                  case 12:                      m_Font = Screen.Font12px;                      break;                  case 14:                      m_Font = Screen.Font14px;                      break;                  case 16:                      m_Font = Screen.Font16px;                      break;              }
Magic Number,Gonzo.Elements,UITextEdit,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UITextEdit.cs,UITextEdit,The following statement contains a magic number: switch (Font)              {                  case 9:                      m_Font = Screen.Font9px;                      break;                  case 10:                      m_Font = Screen.Font10px;                      break;                  case 12:                      m_Font = Screen.Font12px;                      break;                  case 14:                      m_Font = Screen.Font14px;                      break;                  case 16:                      m_Font = Screen.Font16px;                      break;              }
Magic Number,Gonzo.Elements,UITextEdit,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UITextEdit.cs,UITextEdit,The following statement contains a magic number: switch (Font)              {                  case 9:                      m_Font = Screen.Font9px;                      break;                  case 10:                      m_Font = Screen.Font10px;                      break;                  case 12:                      m_Font = Screen.Font12px;                      break;                  case 14:                      m_Font = Screen.Font14px;                      break;                  case 16:                      m_Font = Screen.Font16px;                      break;              }
Magic Number,Gonzo.Elements,UITextEdit,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UITextEdit.cs,UITextEdit,The following statement contains a magic number: switch (Font)              {                  case 9:                      m_Font = Screen.Font9px;                      break;                  case 10:                      m_Font = Screen.Font10px;                      break;                  case 12:                      m_Font = Screen.Font12px;                      break;                  case 14:                      m_Font = Screen.Font14px;                      break;                  case 16:                      m_Font = Screen.Font16px;                      break;              }
Magic Number,Gonzo.Elements,UITextEdit,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UITextEdit.cs,UITextEdit,The following statement contains a magic number: m_CursorVisibilityTimer = new Timer(100);
Magic Number,Gonzo.Elements,UITextEdit,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UITextEdit.cs,UITextEdit,The following statement contains a magic number: m_FrameTimer = new Timer(190);
Magic Number,Gonzo.Elements,UITextEdit,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UITextEdit.cs,Update,The following statement contains a magic number: repeatSince.CompareTo(TimeSpan.FromMilliseconds(1000f / m_RepsPerSec)) > 0
Magic Number,Gonzo.Elements,UITextEdit,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UITextEdit.cs,Draw,The following statement contains a magic number: SBatch.GraphicsDevice.ScissorRectangle = new Rectangle((int)(this.Position.X)' (int)(this.Position.Y)'                  (int)((Size.X) - 5)' (int)(Size.Y));
Magic Number,Gonzo.Elements,UITextEdit,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UITextEdit.cs,Draw,The following statement contains a magic number: DrawBorder(SBatch' m_FrameTex' new Rectangle((int)(this.Position.X)' (int)(this.Position.Y)'                  (int)(Size.X - 5)' (int)(Size.Y))' 3' Color.Red);
Magic Number,Gonzo.Elements,UITextEdit,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UITextEdit.cs,Draw,The following statement contains a magic number: DrawBorder(SBatch' m_FrameTex' new Rectangle((int)(this.Position.X)' (int)(this.Position.Y)'                  (int)(Size.X - 5)' (int)(Size.Y))' 3' Color.Red);
Magic Number,Gonzo.Elements,UITextEdit,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UITextEdit.cs,Draw,The following statement contains a magic number: DrawBorder(SBatch' m_FrameTex' new Rectangle((int)(Position.X)'                           (int)(Position.Y)'                          (int)(Size.X - 5)' (int)(Size.Y))' 3' m_FrameColor);
Magic Number,Gonzo.Elements,UITextEdit,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UITextEdit.cs,Draw,The following statement contains a magic number: DrawBorder(SBatch' m_FrameTex' new Rectangle((int)(Position.X)'                           (int)(Position.Y)'                          (int)(Size.X - 5)' (int)(Size.Y))' 3' m_FrameColor);
Magic Number,Gonzo.Elements,UITextEdit,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UITextEdit.cs,Draw,The following statement contains a magic number: DrawBorder(SBatch' m_FrameTex' new Rectangle((int)(Position.X)'                          (int)(Position.Y)'                          (int)(Size.X - 5)'                          (int)(Size.Y))' 3' m_FrameColor);
Magic Number,Gonzo.Elements,UITextEdit,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UITextEdit.cs,Draw,The following statement contains a magic number: DrawBorder(SBatch' m_FrameTex' new Rectangle((int)(Position.X)'                          (int)(Position.Y)'                          (int)(Size.X - 5)'                          (int)(Size.Y))' 3' m_FrameColor);
Magic Number,Gonzo.Elements,UIButton,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The following statement contains a magic number: m_SourcePosition = new Vector2((Image.Texture.Width / (4)) * 2' 0.0f);
Magic Number,Gonzo.Elements,UIButton,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The following statement contains a magic number: m_SourcePosition = new Vector2((Image.Texture.Width / (4)) * 2' 0.0f);
Magic Number,Gonzo.Elements,UIButton,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The following statement contains a magic number: m_Size.X = (Image.Texture.Width) / (4);
Magic Number,Gonzo.Elements,UIButton,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The following statement contains a magic number: switch (FontSize)                  {                      case 9:                          m_Font = Screen.Font9px;                          break;                      case 10:                          m_Font = Screen.Font10px;                          break;                      case 12:                          m_Font = Screen.Font12px;                          break;                      case 14:                          m_Font = Screen.Font14px;                          break;                      case 16:                          m_Font = Screen.Font16px;                          break;                  }
Magic Number,Gonzo.Elements,UIButton,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The following statement contains a magic number: switch (FontSize)                  {                      case 9:                          m_Font = Screen.Font9px;                          break;                      case 10:                          m_Font = Screen.Font10px;                          break;                      case 12:                          m_Font = Screen.Font12px;                          break;                      case 14:                          m_Font = Screen.Font14px;                          break;                      case 16:                          m_Font = Screen.Font16px;                          break;                  }
Magic Number,Gonzo.Elements,UIButton,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The following statement contains a magic number: switch (FontSize)                  {                      case 9:                          m_Font = Screen.Font9px;                          break;                      case 10:                          m_Font = Screen.Font10px;                          break;                      case 12:                          m_Font = Screen.Font12px;                          break;                      case 14:                          m_Font = Screen.Font14px;                          break;                      case 16:                          m_Font = Screen.Font16px;                          break;                  }
Magic Number,Gonzo.Elements,UIButton,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The following statement contains a magic number: switch (FontSize)                  {                      case 9:                          m_Font = Screen.Font9px;                          break;                      case 10:                          m_Font = Screen.Font10px;                          break;                      case 12:                          m_Font = Screen.Font12px;                          break;                      case 14:                          m_Font = Screen.Font14px;                          break;                      case 16:                          m_Font = Screen.Font16px;                          break;                  }
Magic Number,Gonzo.Elements,UIButton,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The following statement contains a magic number: switch (FontSize)                  {                      case 9:                          m_Font = Screen.Font9px;                          break;                      case 10:                          m_Font = Screen.Font10px;                          break;                      case 12:                          m_Font = Screen.Font12px;                          break;                      case 14:                          m_Font = Screen.Font14px;                          break;                      case 16:                          m_Font = Screen.Font16px;                          break;                  }
Magic Number,Gonzo.Elements,UIButton,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The following statement contains a magic number: TextColor.A = 255;
Magic Number,Gonzo.Elements,UIButton,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The following statement contains a magic number: TextColor.B = (byte)Node.TextColor.Numbers[2];
Magic Number,Gonzo.Elements,UIButton,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The following statement contains a magic number: TextColorSelected.A = 255;
Magic Number,Gonzo.Elements,UIButton,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The following statement contains a magic number: TextColorSelected.B = (byte)Node.TextColorSelected.Numbers[2];
Magic Number,Gonzo.Elements,UIButton,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The following statement contains a magic number: TextColorHighlighted.A = 255;
Magic Number,Gonzo.Elements,UIButton,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The following statement contains a magic number: TextColorHighlighted.B = (byte)Node.TextColorHighlighted.Numbers[2];
Magic Number,Gonzo.Elements,UIButton,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The following statement contains a magic number: TextColorDisabled.A = 255;
Magic Number,Gonzo.Elements,UIButton,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The following statement contains a magic number: TextColorDisabled.B = (byte)Node.TextColorDisabled.Numbers[2];
Magic Number,Gonzo.Elements,UIButton,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The following statement contains a magic number: m_SourcePosition = new Vector2((Image.Texture.Width / 4) * 2' 0.0f);
Magic Number,Gonzo.Elements,UIButton,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The following statement contains a magic number: m_SourcePosition = new Vector2((Image.Texture.Width / 4) * 2' 0.0f);
Magic Number,Gonzo.Elements,UIButton,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The following statement contains a magic number: switch (Font)              {                  case 9:                      m_Font = Screen.Font9px;                      break;                  case 10:                      m_Font = Screen.Font10px;                      break;                  case 12:                      m_Font = Screen.Font12px;                      break;                  case 14:                      m_Font = Screen.Font14px;                      break;                  case 16:                      m_Font = Screen.Font16px;                      break;                  default:                      m_Font = Screen.Font12px;                      break;              }
Magic Number,Gonzo.Elements,UIButton,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The following statement contains a magic number: switch (Font)              {                  case 9:                      m_Font = Screen.Font9px;                      break;                  case 10:                      m_Font = Screen.Font10px;                      break;                  case 12:                      m_Font = Screen.Font12px;                      break;                  case 14:                      m_Font = Screen.Font14px;                      break;                  case 16:                      m_Font = Screen.Font16px;                      break;                  default:                      m_Font = Screen.Font12px;                      break;              }
Magic Number,Gonzo.Elements,UIButton,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The following statement contains a magic number: switch (Font)              {                  case 9:                      m_Font = Screen.Font9px;                      break;                  case 10:                      m_Font = Screen.Font10px;                      break;                  case 12:                      m_Font = Screen.Font12px;                      break;                  case 14:                      m_Font = Screen.Font14px;                      break;                  case 16:                      m_Font = Screen.Font16px;                      break;                  default:                      m_Font = Screen.Font12px;                      break;              }
Magic Number,Gonzo.Elements,UIButton,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The following statement contains a magic number: switch (Font)              {                  case 9:                      m_Font = Screen.Font9px;                      break;                  case 10:                      m_Font = Screen.Font10px;                      break;                  case 12:                      m_Font = Screen.Font12px;                      break;                  case 14:                      m_Font = Screen.Font14px;                      break;                  case 16:                      m_Font = Screen.Font16px;                      break;                  default:                      m_Font = Screen.Font12px;                      break;              }
Magic Number,Gonzo.Elements,UIButton,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The following statement contains a magic number: switch (Font)              {                  case 9:                      m_Font = Screen.Font9px;                      break;                  case 10:                      m_Font = Screen.Font10px;                      break;                  case 12:                      m_Font = Screen.Font12px;                      break;                  case 14:                      m_Font = Screen.Font14px;                      break;                  case 16:                      m_Font = Screen.Font16px;                      break;                  default:                      m_Font = Screen.Font12px;                      break;              }
Magic Number,Gonzo.Elements,UIButton,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The following statement contains a magic number: m_Size.X = Image.Texture.Width / 4;
Magic Number,Gonzo.Elements,UIButton,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,ScaleToText,The following statement contains a magic number: m_XScale += 0.5f;
Magic Number,Gonzo.Elements,UIButton,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,ScaleToText,The following statement contains a magic number: float HalfX = m_Size.X / 2;
Magic Number,Gonzo.Elements,UIButton,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,ScaleToText,The following statement contains a magic number: float HalfY = m_Size.Y / 2;
Magic Number,Gonzo.Elements,UIButton,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,ScaleToText,The following statement contains a magic number: m_TextPosition.X += (HalfX * m_XScale) - (m_Font.MeasureString(m_Text).X / 2);
Magic Number,Gonzo.Elements,UIButton,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,ScaleToText,The following statement contains a magic number: m_TextPosition.Y += HalfY - (m_Font.MeasureString(m_Text).Y / 2);
Magic Number,Gonzo.Elements,UIButton,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,AddImage,The following statement contains a magic number: m_Size.X = Image.Texture.Width / 4;
Magic Number,Gonzo.Elements,UIButton,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,AddImage,The following statement contains a magic number: m_SourcePosition = new Vector2((Image.Texture.Width / 4) * 2' 0.0f);
Magic Number,Gonzo.Elements,UIButton,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,AddImage,The following statement contains a magic number: m_SourcePosition = new Vector2((Image.Texture.Width / 4) * 2' 0.0f);
Magic Number,Gonzo.Elements,UIButton,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,Update,The following statement contains a magic number: float HalfX = m_Size.X / 2;
Magic Number,Gonzo.Elements,UIButton,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,Update,The following statement contains a magic number: float HalfY = m_Size.Y / 2;
Magic Number,Gonzo.Elements,UIButton,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,Update,The following statement contains a magic number: m_TextPosition.X += (HalfX * m_XScale) - (m_Font.MeasureString(m_Text).X / 2);
Magic Number,Gonzo.Elements,UIButton,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,Update,The following statement contains a magic number: m_TextPosition.Y += HalfY - (m_Font.MeasureString(m_Text).Y / 2);
Magic Number,Gonzo.Elements,UIElement,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIElement.cs,GetLayerDepth,The following statement contains a magic number: switch(Depth)              {                  case LayerDepth.Default:                      return 0.0f;                  case LayerDepth.ImageLayer:                      return 0.8f;                  case LayerDepth.ButtonLayer:                      return 0.9f;                  case LayerDepth.DialogLayer:                      return 0.10f;                  case LayerDepth.TextLayer:                      return 0.11f;                  default:                      return 0.0f;              }
Magic Number,Gonzo.Elements,UIElement,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIElement.cs,GetLayerDepth,The following statement contains a magic number: switch(Depth)              {                  case LayerDepth.Default:                      return 0.0f;                  case LayerDepth.ImageLayer:                      return 0.8f;                  case LayerDepth.ButtonLayer:                      return 0.9f;                  case LayerDepth.DialogLayer:                      return 0.10f;                  case LayerDepth.TextLayer:                      return 0.11f;                  default:                      return 0.0f;              }
Magic Number,Gonzo.Elements,UIElement,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIElement.cs,GetLayerDepth,The following statement contains a magic number: switch(Depth)              {                  case LayerDepth.Default:                      return 0.0f;                  case LayerDepth.ImageLayer:                      return 0.8f;                  case LayerDepth.ButtonLayer:                      return 0.9f;                  case LayerDepth.DialogLayer:                      return 0.10f;                  case LayerDepth.TextLayer:                      return 0.11f;                  default:                      return 0.0f;              }
Magic Number,Gonzo.Elements,UIElement,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIElement.cs,GetLayerDepth,The following statement contains a magic number: switch(Depth)              {                  case LayerDepth.Default:                      return 0.0f;                  case LayerDepth.ImageLayer:                      return 0.8f;                  case LayerDepth.ButtonLayer:                      return 0.9f;                  case LayerDepth.DialogLayer:                      return 0.10f;                  case LayerDepth.TextLayer:                      return 0.11f;                  default:                      return 0.0f;              }
Magic Number,Gonzo.Elements,UIElement,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIElement.cs,PixelCheck,The following statement contains a magic number: ((PixelData[0] & 0xFF000000) >> 24) > 20
Magic Number,Gonzo.Elements,UIElement,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIElement.cs,PixelCheck,The following statement contains a magic number: ((PixelData[0] & 0xFF000000) >> 24) > 20
Magic Number,Gonzo.Elements,UILabel,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UILabel.cs,UILabel,The following statement contains a magic number: m_TextColor.A = 255;
Magic Number,Gonzo.Elements,UILabel,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UILabel.cs,UILabel,The following statement contains a magic number: m_TextColor.B = (byte)Node.Color.Numbers[2];
Magic Number,Gonzo.Elements,UILabel,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UILabel.cs,UILabel,The following statement contains a magic number: switch (Font)              {                      case 7:                          m_Font = Screen.Font9px; //TODO: Fixme.                          break;                      case 9:                      m_Font = Screen.Font9px;                          break;                      case 10:                          m_Font = Screen.Font10px;                          break;                      case 11:                          m_Font = Screen.Font11px;                          break;                      case 12:                          m_Font = Screen.Font12px;                          break;                      case 14:                          m_Font = Screen.Font14px;                          break;                      case 16:                          m_Font = Screen.Font16px;                          break;              }
Magic Number,Gonzo.Elements,UILabel,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UILabel.cs,UILabel,The following statement contains a magic number: switch (Font)              {                      case 7:                          m_Font = Screen.Font9px; //TODO: Fixme.                          break;                      case 9:                      m_Font = Screen.Font9px;                          break;                      case 10:                          m_Font = Screen.Font10px;                          break;                      case 11:                          m_Font = Screen.Font11px;                          break;                      case 12:                          m_Font = Screen.Font12px;                          break;                      case 14:                          m_Font = Screen.Font14px;                          break;                      case 16:                          m_Font = Screen.Font16px;                          break;              }
Magic Number,Gonzo.Elements,UILabel,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UILabel.cs,UILabel,The following statement contains a magic number: switch (Font)              {                      case 7:                          m_Font = Screen.Font9px; //TODO: Fixme.                          break;                      case 9:                      m_Font = Screen.Font9px;                          break;                      case 10:                          m_Font = Screen.Font10px;                          break;                      case 11:                          m_Font = Screen.Font11px;                          break;                      case 12:                          m_Font = Screen.Font12px;                          break;                      case 14:                          m_Font = Screen.Font14px;                          break;                      case 16:                          m_Font = Screen.Font16px;                          break;              }
Magic Number,Gonzo.Elements,UILabel,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UILabel.cs,UILabel,The following statement contains a magic number: switch (Font)              {                      case 7:                          m_Font = Screen.Font9px; //TODO: Fixme.                          break;                      case 9:                      m_Font = Screen.Font9px;                          break;                      case 10:                          m_Font = Screen.Font10px;                          break;                      case 11:                          m_Font = Screen.Font11px;                          break;                      case 12:                          m_Font = Screen.Font12px;                          break;                      case 14:                          m_Font = Screen.Font14px;                          break;                      case 16:                          m_Font = Screen.Font16px;                          break;              }
Magic Number,Gonzo.Elements,UILabel,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UILabel.cs,UILabel,The following statement contains a magic number: switch (Font)              {                      case 7:                          m_Font = Screen.Font9px; //TODO: Fixme.                          break;                      case 9:                      m_Font = Screen.Font9px;                          break;                      case 10:                          m_Font = Screen.Font10px;                          break;                      case 11:                          m_Font = Screen.Font11px;                          break;                      case 12:                          m_Font = Screen.Font12px;                          break;                      case 14:                          m_Font = Screen.Font14px;                          break;                      case 16:                          m_Font = Screen.Font16px;                          break;              }
Magic Number,Gonzo.Elements,UILabel,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UILabel.cs,UILabel,The following statement contains a magic number: switch (Font)              {                      case 7:                          m_Font = Screen.Font9px; //TODO: Fixme.                          break;                      case 9:                      m_Font = Screen.Font9px;                          break;                      case 10:                          m_Font = Screen.Font10px;                          break;                      case 11:                          m_Font = Screen.Font11px;                          break;                      case 12:                          m_Font = Screen.Font12px;                          break;                      case 14:                          m_Font = Screen.Font14px;                          break;                      case 16:                          m_Font = Screen.Font16px;                          break;              }
Magic Number,Gonzo.Elements,UILabel,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UILabel.cs,UILabel,The following statement contains a magic number: switch (Font)              {                      case 7:                          m_Font = Screen.Font9px; //TODO: Fixme.                          break;                      case 9:                      m_Font = Screen.Font9px;                          break;                      case 10:                          m_Font = Screen.Font10px;                          break;                      case 11:                          m_Font = Screen.Font11px;                          break;                      case 12:                          m_Font = Screen.Font12px;                          break;                      case 14:                          m_Font = Screen.Font14px;                          break;                      case 16:                          m_Font = Screen.Font16px;                          break;              }
Magic Number,Gonzo.Elements,UILabel,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UILabel.cs,UILabel,The following statement contains a magic number: m_TextColor.A = 255;
Magic Number,Gonzo.Elements,UILabel,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UILabel.cs,UILabel,The following statement contains a magic number: switch (Font)              {                  case 7:                      m_Font = Screen.Font9px; //TODO: Fixme.                      break;                  case 9:                      m_Font = Screen.Font9px;                      break;                  case 10:                      m_Font = Screen.Font10px;                      break;                  case 11:                      m_Font = Screen.Font11px;                      break;                  case 12:                      m_Font = Screen.Font12px;                      break;                  case 14:                      m_Font = Screen.Font14px;                      break;                  case 16:                      m_Font = Screen.Font16px;                      break;              }
Magic Number,Gonzo.Elements,UILabel,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UILabel.cs,UILabel,The following statement contains a magic number: switch (Font)              {                  case 7:                      m_Font = Screen.Font9px; //TODO: Fixme.                      break;                  case 9:                      m_Font = Screen.Font9px;                      break;                  case 10:                      m_Font = Screen.Font10px;                      break;                  case 11:                      m_Font = Screen.Font11px;                      break;                  case 12:                      m_Font = Screen.Font12px;                      break;                  case 14:                      m_Font = Screen.Font14px;                      break;                  case 16:                      m_Font = Screen.Font16px;                      break;              }
Magic Number,Gonzo.Elements,UILabel,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UILabel.cs,UILabel,The following statement contains a magic number: switch (Font)              {                  case 7:                      m_Font = Screen.Font9px; //TODO: Fixme.                      break;                  case 9:                      m_Font = Screen.Font9px;                      break;                  case 10:                      m_Font = Screen.Font10px;                      break;                  case 11:                      m_Font = Screen.Font11px;                      break;                  case 12:                      m_Font = Screen.Font12px;                      break;                  case 14:                      m_Font = Screen.Font14px;                      break;                  case 16:                      m_Font = Screen.Font16px;                      break;              }
Magic Number,Gonzo.Elements,UILabel,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UILabel.cs,UILabel,The following statement contains a magic number: switch (Font)              {                  case 7:                      m_Font = Screen.Font9px; //TODO: Fixme.                      break;                  case 9:                      m_Font = Screen.Font9px;                      break;                  case 10:                      m_Font = Screen.Font10px;                      break;                  case 11:                      m_Font = Screen.Font11px;                      break;                  case 12:                      m_Font = Screen.Font12px;                      break;                  case 14:                      m_Font = Screen.Font14px;                      break;                  case 16:                      m_Font = Screen.Font16px;                      break;              }
Magic Number,Gonzo.Elements,UILabel,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UILabel.cs,UILabel,The following statement contains a magic number: switch (Font)              {                  case 7:                      m_Font = Screen.Font9px; //TODO: Fixme.                      break;                  case 9:                      m_Font = Screen.Font9px;                      break;                  case 10:                      m_Font = Screen.Font10px;                      break;                  case 11:                      m_Font = Screen.Font11px;                      break;                  case 12:                      m_Font = Screen.Font12px;                      break;                  case 14:                      m_Font = Screen.Font14px;                      break;                  case 16:                      m_Font = Screen.Font16px;                      break;              }
Magic Number,Gonzo.Elements,UILabel,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UILabel.cs,UILabel,The following statement contains a magic number: switch (Font)              {                  case 7:                      m_Font = Screen.Font9px; //TODO: Fixme.                      break;                  case 9:                      m_Font = Screen.Font9px;                      break;                  case 10:                      m_Font = Screen.Font10px;                      break;                  case 11:                      m_Font = Screen.Font11px;                      break;                  case 12:                      m_Font = Screen.Font12px;                      break;                  case 14:                      m_Font = Screen.Font14px;                      break;                  case 16:                      m_Font = Screen.Font16px;                      break;              }
Magic Number,Gonzo.Elements,UILabel,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UILabel.cs,UILabel,The following statement contains a magic number: switch (Font)              {                  case 7:                      m_Font = Screen.Font9px; //TODO: Fixme.                      break;                  case 9:                      m_Font = Screen.Font9px;                      break;                  case 10:                      m_Font = Screen.Font10px;                      break;                  case 11:                      m_Font = Screen.Font11px;                      break;                  case 12:                      m_Font = Screen.Font12px;                      break;                  case 14:                      m_Font = Screen.Font14px;                      break;                  case 16:                      m_Font = Screen.Font16px;                      break;              }
Magic Number,Gonzo.Elements,UILabel,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UILabel.cs,AlignText,The following statement contains a magic number: switch (m_Alignment)              {                  case TextAlignment.Left_Top:                      //Is there a need to modify position at all here??                      break;                  case TextAlignment.Left_Center:                      LocalCopy.Y += (m_Size.Y / 2) - (Measurement.Y / 2);                      Position = LocalCopy;                      break;                  case TextAlignment.Center_Top:                      LocalCopy.X += (m_Size.X / 2) - (Measurement.X / 2);                      Position = LocalCopy;                      break;                  case TextAlignment.Center_Center:                      LocalCopy.X += (m_Size.X / 2) - (Measurement.X / 2);                      LocalCopy.Y += (m_Size.Y / 2) - (Measurement.Y / 2);                      Position = LocalCopy;                      break;                  case TextAlignment.Right_Top:                      LocalCopy.X += m_Size.X - Measurement.X;                      Position = LocalCopy;                      break;                  case TextAlignment.Right_Center:                      LocalCopy.X += m_Size.X - Measurement.X;                      LocalCopy.Y += (m_Size.Y / 2) - (Measurement.Y / 2);                      Position = LocalCopy;                      break;              }
Magic Number,Gonzo.Elements,UILabel,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UILabel.cs,AlignText,The following statement contains a magic number: switch (m_Alignment)              {                  case TextAlignment.Left_Top:                      //Is there a need to modify position at all here??                      break;                  case TextAlignment.Left_Center:                      LocalCopy.Y += (m_Size.Y / 2) - (Measurement.Y / 2);                      Position = LocalCopy;                      break;                  case TextAlignment.Center_Top:                      LocalCopy.X += (m_Size.X / 2) - (Measurement.X / 2);                      Position = LocalCopy;                      break;                  case TextAlignment.Center_Center:                      LocalCopy.X += (m_Size.X / 2) - (Measurement.X / 2);                      LocalCopy.Y += (m_Size.Y / 2) - (Measurement.Y / 2);                      Position = LocalCopy;                      break;                  case TextAlignment.Right_Top:                      LocalCopy.X += m_Size.X - Measurement.X;                      Position = LocalCopy;                      break;                  case TextAlignment.Right_Center:                      LocalCopy.X += m_Size.X - Measurement.X;                      LocalCopy.Y += (m_Size.Y / 2) - (Measurement.Y / 2);                      Position = LocalCopy;                      break;              }
Magic Number,Gonzo.Elements,UILabel,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UILabel.cs,AlignText,The following statement contains a magic number: switch (m_Alignment)              {                  case TextAlignment.Left_Top:                      //Is there a need to modify position at all here??                      break;                  case TextAlignment.Left_Center:                      LocalCopy.Y += (m_Size.Y / 2) - (Measurement.Y / 2);                      Position = LocalCopy;                      break;                  case TextAlignment.Center_Top:                      LocalCopy.X += (m_Size.X / 2) - (Measurement.X / 2);                      Position = LocalCopy;                      break;                  case TextAlignment.Center_Center:                      LocalCopy.X += (m_Size.X / 2) - (Measurement.X / 2);                      LocalCopy.Y += (m_Size.Y / 2) - (Measurement.Y / 2);                      Position = LocalCopy;                      break;                  case TextAlignment.Right_Top:                      LocalCopy.X += m_Size.X - Measurement.X;                      Position = LocalCopy;                      break;                  case TextAlignment.Right_Center:                      LocalCopy.X += m_Size.X - Measurement.X;                      LocalCopy.Y += (m_Size.Y / 2) - (Measurement.Y / 2);                      Position = LocalCopy;                      break;              }
Magic Number,Gonzo.Elements,UILabel,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UILabel.cs,AlignText,The following statement contains a magic number: switch (m_Alignment)              {                  case TextAlignment.Left_Top:                      //Is there a need to modify position at all here??                      break;                  case TextAlignment.Left_Center:                      LocalCopy.Y += (m_Size.Y / 2) - (Measurement.Y / 2);                      Position = LocalCopy;                      break;                  case TextAlignment.Center_Top:                      LocalCopy.X += (m_Size.X / 2) - (Measurement.X / 2);                      Position = LocalCopy;                      break;                  case TextAlignment.Center_Center:                      LocalCopy.X += (m_Size.X / 2) - (Measurement.X / 2);                      LocalCopy.Y += (m_Size.Y / 2) - (Measurement.Y / 2);                      Position = LocalCopy;                      break;                  case TextAlignment.Right_Top:                      LocalCopy.X += m_Size.X - Measurement.X;                      Position = LocalCopy;                      break;                  case TextAlignment.Right_Center:                      LocalCopy.X += m_Size.X - Measurement.X;                      LocalCopy.Y += (m_Size.Y / 2) - (Measurement.Y / 2);                      Position = LocalCopy;                      break;              }
Magic Number,Gonzo.Elements,UILabel,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UILabel.cs,AlignText,The following statement contains a magic number: switch (m_Alignment)              {                  case TextAlignment.Left_Top:                      //Is there a need to modify position at all here??                      break;                  case TextAlignment.Left_Center:                      LocalCopy.Y += (m_Size.Y / 2) - (Measurement.Y / 2);                      Position = LocalCopy;                      break;                  case TextAlignment.Center_Top:                      LocalCopy.X += (m_Size.X / 2) - (Measurement.X / 2);                      Position = LocalCopy;                      break;                  case TextAlignment.Center_Center:                      LocalCopy.X += (m_Size.X / 2) - (Measurement.X / 2);                      LocalCopy.Y += (m_Size.Y / 2) - (Measurement.Y / 2);                      Position = LocalCopy;                      break;                  case TextAlignment.Right_Top:                      LocalCopy.X += m_Size.X - Measurement.X;                      Position = LocalCopy;                      break;                  case TextAlignment.Right_Center:                      LocalCopy.X += m_Size.X - Measurement.X;                      LocalCopy.Y += (m_Size.Y / 2) - (Measurement.Y / 2);                      Position = LocalCopy;                      break;              }
Magic Number,Gonzo.Elements,UILabel,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UILabel.cs,AlignText,The following statement contains a magic number: switch (m_Alignment)              {                  case TextAlignment.Left_Top:                      //Is there a need to modify position at all here??                      break;                  case TextAlignment.Left_Center:                      LocalCopy.Y += (m_Size.Y / 2) - (Measurement.Y / 2);                      Position = LocalCopy;                      break;                  case TextAlignment.Center_Top:                      LocalCopy.X += (m_Size.X / 2) - (Measurement.X / 2);                      Position = LocalCopy;                      break;                  case TextAlignment.Center_Center:                      LocalCopy.X += (m_Size.X / 2) - (Measurement.X / 2);                      LocalCopy.Y += (m_Size.Y / 2) - (Measurement.Y / 2);                      Position = LocalCopy;                      break;                  case TextAlignment.Right_Top:                      LocalCopy.X += m_Size.X - Measurement.X;                      Position = LocalCopy;                      break;                  case TextAlignment.Right_Center:                      LocalCopy.X += m_Size.X - Measurement.X;                      LocalCopy.Y += (m_Size.Y / 2) - (Measurement.Y / 2);                      Position = LocalCopy;                      break;              }
Magic Number,Gonzo.Elements,UILabel,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UILabel.cs,AlignText,The following statement contains a magic number: switch (m_Alignment)              {                  case TextAlignment.Left_Top:                      //Is there a need to modify position at all here??                      break;                  case TextAlignment.Left_Center:                      LocalCopy.Y += (m_Size.Y / 2) - (Measurement.Y / 2);                      Position = LocalCopy;                      break;                  case TextAlignment.Center_Top:                      LocalCopy.X += (m_Size.X / 2) - (Measurement.X / 2);                      Position = LocalCopy;                      break;                  case TextAlignment.Center_Center:                      LocalCopy.X += (m_Size.X / 2) - (Measurement.X / 2);                      LocalCopy.Y += (m_Size.Y / 2) - (Measurement.Y / 2);                      Position = LocalCopy;                      break;                  case TextAlignment.Right_Top:                      LocalCopy.X += m_Size.X - Measurement.X;                      Position = LocalCopy;                      break;                  case TextAlignment.Right_Center:                      LocalCopy.X += m_Size.X - Measurement.X;                      LocalCopy.Y += (m_Size.Y / 2) - (Measurement.Y / 2);                      Position = LocalCopy;                      break;              }
Magic Number,Gonzo.Elements,UILabel,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UILabel.cs,AlignText,The following statement contains a magic number: switch (m_Alignment)              {                  case TextAlignment.Left_Top:                      //Is there a need to modify position at all here??                      break;                  case TextAlignment.Left_Center:                      LocalCopy.Y += (m_Size.Y / 2) - (Measurement.Y / 2);                      Position = LocalCopy;                      break;                  case TextAlignment.Center_Top:                      LocalCopy.X += (m_Size.X / 2) - (Measurement.X / 2);                      Position = LocalCopy;                      break;                  case TextAlignment.Center_Center:                      LocalCopy.X += (m_Size.X / 2) - (Measurement.X / 2);                      LocalCopy.Y += (m_Size.Y / 2) - (Measurement.Y / 2);                      Position = LocalCopy;                      break;                  case TextAlignment.Right_Top:                      LocalCopy.X += m_Size.X - Measurement.X;                      Position = LocalCopy;                      break;                  case TextAlignment.Right_Center:                      LocalCopy.X += m_Size.X - Measurement.X;                      LocalCopy.Y += (m_Size.Y / 2) - (Measurement.Y / 2);                      Position = LocalCopy;                      break;              }
Magic Number,Gonzo.Elements,UILabel,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UILabel.cs,AlignText,The following statement contains a magic number: switch (m_Alignment)              {                  case TextAlignment.Left_Top:                      //Is there a need to modify position at all here??                      break;                  case TextAlignment.Left_Center:                      LocalCopy.Y += (m_Size.Y / 2) - (Measurement.Y / 2);                      Position = LocalCopy;                      break;                  case TextAlignment.Center_Top:                      LocalCopy.X += (m_Size.X / 2) - (Measurement.X / 2);                      Position = LocalCopy;                      break;                  case TextAlignment.Center_Center:                      LocalCopy.X += (m_Size.X / 2) - (Measurement.X / 2);                      LocalCopy.Y += (m_Size.Y / 2) - (Measurement.Y / 2);                      Position = LocalCopy;                      break;                  case TextAlignment.Right_Top:                      LocalCopy.X += m_Size.X - Measurement.X;                      Position = LocalCopy;                      break;                  case TextAlignment.Right_Center:                      LocalCopy.X += m_Size.X - Measurement.X;                      LocalCopy.Y += (m_Size.Y / 2) - (Measurement.Y / 2);                      Position = LocalCopy;                      break;              }
Magic Number,Gonzo.Elements,UILabel,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UILabel.cs,AlignText,The following statement contains a magic number: switch (m_Alignment)              {                  case TextAlignment.Left_Top:                      //Is there a need to modify position at all here??                      break;                  case TextAlignment.Left_Center:                      LocalCopy.Y += (m_Size.Y / 2) - (Measurement.Y / 2);                      Position = LocalCopy;                      break;                  case TextAlignment.Center_Top:                      LocalCopy.X += (m_Size.X / 2) - (Measurement.X / 2);                      Position = LocalCopy;                      break;                  case TextAlignment.Center_Center:                      LocalCopy.X += (m_Size.X / 2) - (Measurement.X / 2);                      LocalCopy.Y += (m_Size.Y / 2) - (Measurement.Y / 2);                      Position = LocalCopy;                      break;                  case TextAlignment.Right_Top:                      LocalCopy.X += m_Size.X - Measurement.X;                      Position = LocalCopy;                      break;                  case TextAlignment.Right_Center:                      LocalCopy.X += m_Size.X - Measurement.X;                      LocalCopy.Y += (m_Size.Y / 2) - (Measurement.Y / 2);                      Position = LocalCopy;                      break;              }
Duplicate Code,Gonzo.Elements,UIBodyBrowser,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIBodyBrowser.cs,Draw,The method contains a code clone-set at the following line numbers (starting from the method definition): ((24' 45)' (54' 75)' (84' 105))
Duplicate Code,Gonzo.Elements,UIHeadBrowser,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIHeadBrowser.cs,Draw,The method contains a code clone-set at the following line numbers (starting from the method definition): ((56' 78)' (87' 109))
Missing Default,Gonzo,TreeWalker,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\TreeWalker.cs,WalkTree,The following switch statement is missing a default case: switch (NType)              {                  case NodeType.DefineImage: //Defines an image and loads a texture for it.                      DefineImageNode ImgNode = (DefineImageNode)UINode.GetNode(node);                      UIImage Img = new UIImage(ImgNode' m_Screen);                      Result.Elements.Add(ImgNode.Name' Img);                      break;                  case NodeType.DefineString: //Defines a string with a name.                      DefineStringNode StrNode = (DefineStringNode)UINode.GetNode(node);                      Result.Strings.Add(StrNode.Name' StringManager.StrTable(State.CurrentStringTable)[StrNode.StrIndex]);                      break;                  case NodeType.AddButton: //Defines a button.                      AddButtonNode ButtonNode = (AddButtonNode)UINode.GetNode(node);                      UIButton Btn = new UIButton(ButtonNode' Result' m_Screen);                      Result.Elements.Add(ButtonNode.Name' Btn);                        break;                  case NodeType.AddText:                      AddTextNode TextNode = (AddTextNode)UINode.GetNode(node);                      UILabel Lbl = new UILabel(TextNode' Result' m_Screen);                      Result.Elements.Add(TextNode.Name' Lbl);                      break;                  case NodeType.AddTextEdit:                      AddTextEditNode TextEditNode = (AddTextEditNode)UINode.GetNode(node);                      UITextEdit Txt = new UITextEdit(TextEditNode' State' m_Screen);                      Result.Elements.Add(TextEditNode.Name' Txt);                      break;                  case NodeType.AddSlider:                      AddSliderNode SliderNode = (AddSliderNode)UINode.GetNode(node);                      UISlider Slider = new UISlider(SliderNode' State' m_Screen);                      Result.Elements.Add(SliderNode.Name' Slider);                      break;                  case NodeType.SetSharedProperties: //Assigns a bunch of shared properties to declarations following the statement.                      State.InSharedPropertiesGroup = true;                      SetSharedPropsNode SharedPropsNode = (SetSharedPropsNode)UINode.GetNode(node);                        if (SharedPropsNode.StringTable != null)                          State.CurrentStringTable = (int)SharedPropsNode.StringTable;                        if (SharedPropsNode.ControlPosition != null)                      {                          State.Position[0] = SharedPropsNode.ControlPosition.Numbers[0];                          State.Position[1] = SharedPropsNode.ControlPosition.Numbers[1];                          break;                      }                        if (SharedPropsNode.Color != null)                      {                          State.Color = new Color                          {                              R = (byte)SharedPropsNode.Color.Numbers[0]'                              G = (byte)SharedPropsNode.Color.Numbers[1]'                              B = (byte)SharedPropsNode.Color.Numbers[2]                          };                      }                        if (SharedPropsNode.TextColor != null)                      {                          State.TextColor = new Color                          {                              R = (byte)SharedPropsNode.TextColor.Numbers[0]'                              G = (byte)SharedPropsNode.TextColor.Numbers[1]'                              B = (byte)SharedPropsNode.TextColor.Numbers[2]                          };                      }                        if (SharedPropsNode.TextColorSelected != null)                      {                          State.TextColorSelected = new Color                          {                              R = (byte)SharedPropsNode.TextColorSelected.Numbers[0]'                              G = (byte)SharedPropsNode.TextColorSelected.Numbers[1]'                              B = (byte)SharedPropsNode.TextColorSelected.Numbers[2]                          };                      }                        if (SharedPropsNode.TextColorHighlighted != null)                      {                          State.TextColorHighlighted = new Color                          {                              R = (byte)SharedPropsNode.TextColorHighlighted.Numbers[0]'                              G = (byte)SharedPropsNode.TextColorHighlighted.Numbers[1]'                              B = (byte)SharedPropsNode.TextColorHighlighted.Numbers[2]                          };                      }                        if (SharedPropsNode.TextColorDisabled != null)                      {                          State.TextColorDisabled = new Color                          {                              R = (byte)SharedPropsNode.TextColorDisabled.Numbers[0]'                              G = (byte)SharedPropsNode.TextColorDisabled.Numbers[1]'                              B = (byte)SharedPropsNode.TextColorDisabled.Numbers[2]                          };                      }                        if (SharedPropsNode.BackColor != null)                      {                          State.BackColor = new Color                          {                              R = (byte)SharedPropsNode.BackColor.Numbers[0]'                              G = (byte)SharedPropsNode.BackColor.Numbers[1]'                              B = (byte)SharedPropsNode.BackColor.Numbers[2]                          };                      }                        if (SharedPropsNode.CursorColor != null)                      {                          State.CursorColor = new Color                          {                              R = (byte)SharedPropsNode.CursorColor.Numbers[0]'                              G = (byte)SharedPropsNode.CursorColor.Numbers[1]'                              B = (byte)SharedPropsNode.CursorColor.Numbers[2]                          };                      }                        if(SharedPropsNode.FrameColor != null)                      {                          State.FrameColor = new Color                          {                              R = (byte)SharedPropsNode.FrameColor.Numbers[0]'                              G = (byte)SharedPropsNode.FrameColor.Numbers[1]'                              B = (byte)SharedPropsNode.FrameColor.Numbers[2]                          };                      }                        if (SharedPropsNode.TextButton)                          State.TextButton = true;                        if (SharedPropsNode.Opaque != null)                          State.IsOpaque = (SharedPropsNode.Opaque == 1) ? true : false;                        if (SharedPropsNode.Transparent != null)                          State.IsTransparent = (SharedPropsNode.Transparent == 1) ? true : false;                        if (SharedPropsNode.Alignment != null)                          State.Alignment = (int)SharedPropsNode.Alignment;                        if (SharedPropsNode.Image != "")                          State.Image = SharedPropsNode.Image;                        if (SharedPropsNode.Tooltip != "")                          State.Tooltip = SharedPropsNode.Tooltip;                        if (SharedPropsNode.Text != "")                          State.Caption = SharedPropsNode.Text;                        if (SharedPropsNode.Size != null)                          State.Size = new Vector2(SharedPropsNode.Size.Numbers[0]' SharedPropsNode.Size.Numbers[1]);                        if (SharedPropsNode.Orientation != null)                          State.Orientation = (int)SharedPropsNode.Orientation;                        if (SharedPropsNode.Font != null)                          State.Font = (int)SharedPropsNode.Font;                        if (SharedPropsNode.Opaque != null)                          State.Opaque = (int)SharedPropsNode.Opaque;                        break;                  case NodeType.SetControlProperties: //Sets a bunch of properties to a specified control.                      SetControlPropsNode ControlPropsNode = (SetControlPropsNode)UINode.GetNode(node);                        UIControl Ctrl = new UIControl(ControlPropsNode' m_Screen' State);                      Result.Controls.Add(ControlPropsNode.Control' Ctrl);                        if (State.InSharedPropertiesGroup)                      {                          UIElement Test = new UIElement(m_Screen' null);                          //Script implicitly created an object... :\                          if (!Result.Elements.TryGetValue(ControlPropsNode.Control' out Test))                          {                              Result.Elements.Add(ControlPropsNode.Control' new UIElement(m_Screen' null));                                if (Ctrl.Image != null)                                  Result.Elements[ControlPropsNode.Control].Image = new UIImage(Ctrl.Image);                                Result.Elements[ControlPropsNode.Control].Position = Ctrl.Position;                          }                      }                        break;                  case NodeType.End:                      State.InSharedPropertiesGroup = false;                      State.Image = ""; //Reset                      State.TextButton = false; //Reset                       State.Color = new Color();                      State.Caption = "";                      State.Size = new Vector2(0' 0);                      State.Alignment = 0;                      State.Font = 0;                      //TODO: Reset more?                      break;              }
Missing Default,Gonzo.Elements,UIBodyBrowser,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIBodyBrowser.cs,Update,The following switch statement is missing a default case: switch (m_SelectedSkintype)                                      {                                          case Elements.SkinType.Light:                                              EArgs.SkinType = 0;                                              EArgs.SelectedOutfit = (m_Sex == AvatarSex.Male ?                                                  m_LightAppearances[(Y * X) + m_Counter].Oft :                                                  m_LightFemaleAppearances[(Y * X) + m_Counter].Oft);                                                OnButtonClicked(this' EArgs);                                              break;                                          case Elements.SkinType.Medium:                                              EArgs = new UISkinButtonClickedEventArgs();                                              EArgs.SkinType = 1;                                              EArgs.SelectedOutfit = (m_Sex == AvatarSex.Male ?                                                  m_MediumAppearances[(X * Y) + m_Counter].Oft :                                                  m_MediumFemaleAppearances[(Y * X) + m_Counter].Oft);                                                OnButtonClicked(this' EArgs);                                              break;                                          case Elements.SkinType.Dark:                                              EArgs = new UISkinButtonClickedEventArgs();                                              EArgs.SkinType = 2;                                              EArgs.SelectedOutfit = (m_Sex == AvatarSex.Male ?                                                  m_DarkAppearances[(X * Y) + m_Counter].Oft :                                                  m_DarkFemaleAppearances[(Y * X) + m_Counter].Oft);                                                OnButtonClicked(this' EArgs);                                              break;                                      }
Missing Default,Gonzo.Elements,UIBodyBrowser,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIBodyBrowser.cs,Draw,The following switch statement is missing a default case: switch (m_SelectedSkintype)              {                  case Elements.SkinType.Light:                      for (int X = 0; X <= m_Map.GetUpperBound(1); X++)                      {                          for (int Y = 0; Y <= m_Map.GetUpperBound(0); Y++)                          {                              m_Thumb = FileManager.GetTexture(m_Sex == AvatarSex.Male ?                                  m_LightAppearances[(Y * X) + m_Counter].LightAppearance.ThumbnailID.UniqueID :                                  m_LightFemaleAppearances[(Y * X) + m_Counter].LightAppearance.ThumbnailID.UniqueID);                              m_BtnWidth = m_SkinBtns[m_Counter + Y].BtnTex.Width / 4;                              m_BtnHeight = m_SkinBtns[m_Counter + Y].BtnTex.Height;                                Vector2 TexturePosition = new Vector2(X * (BodyTileSize.X + 16)' Y * (BodyTileSize.Y));                              Vector2 ButtonPosition = new Vector2(TexturePosition.X - 3' TexturePosition.Y - 5);                                SBatch.Draw(m_SkinBtns[Y + m_Counter].BtnTex' new Rectangle((int)(Position.X +                                  ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)'                                  new Rectangle((int)m_SkinBtns[m_Counter + Y].SourcePosition.X'                                  (int)m_SkinBtns[m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)'                                  Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);                                SBatch.Draw(m_Thumb' new Rectangle((int)(Position.X + TexturePosition.X)'                                  (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)'                                  null' Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth);                                if (m_Counter < m_NumberOfSkinsToDisplay)                                  m_Counter++;                          }                      }                        break;                  case Elements.SkinType.Medium:                      for (int X = 0; X <= m_Map.GetUpperBound(1); X++)                      {                          for (int Y = 0; Y <= m_Map.GetUpperBound(0); Y++)                          {                              m_Thumb = FileManager.GetTexture(m_Sex == AvatarSex.Male ?                                  m_MediumAppearances[(Y * X) + m_Counter].MediumAppearance.ThumbnailID.UniqueID :                                  m_MediumFemaleAppearances[(Y * X) + m_Counter].MediumAppearance.ThumbnailID.UniqueID);                              m_BtnWidth = m_SkinBtns[m_Counter + Y].BtnTex.Width / 4;                              m_BtnHeight = m_SkinBtns[m_Counter + Y].BtnTex.Height;                                Vector2 TexturePosition = new Vector2(X * (BodyTileSize.X + 16)' Y * (BodyTileSize.Y));                              Vector2 ButtonPosition = new Vector2(TexturePosition.X - 3' TexturePosition.Y - 5);                                SBatch.Draw(m_SkinBtns[Y + m_Counter].BtnTex' new Rectangle((int)(Position.X +                                  ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)'                                  new Rectangle((int)m_SkinBtns[m_Counter + Y].SourcePosition.X'                                  (int)m_SkinBtns[m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)'                                  Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);                                SBatch.Draw(m_Thumb' new Rectangle((int)(Position.X + TexturePosition.X)'                                  (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)'                                  null' Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth);                                if (m_Counter < m_NumberOfSkinsToDisplay)                                  m_Counter++;                          }                      }                        break;                  case Elements.SkinType.Dark:                      for (int X = 0; X <= m_Map.GetUpperBound(1); X++)                      {                          for (int Y = 0; Y <= m_Map.GetUpperBound(0); Y++)                          {                              m_Thumb = FileManager.GetTexture(m_Sex == AvatarSex.Male ?                                  m_DarkAppearances[(Y * X) + m_Counter].DarkAppearance.ThumbnailID.UniqueID :                                  m_DarkFemaleAppearances[(Y  * X) + m_Counter].DarkAppearance.ThumbnailID.UniqueID);                              m_BtnWidth = m_SkinBtns[m_Counter + Y].BtnTex.Width / 4 ;                              m_BtnHeight = m_SkinBtns[m_Counter + Y].BtnTex.Height;                                Vector2 TexturePosition = new Vector2(X * (BodyTileSize.X + 16)' Y * (BodyTileSize.Y));                              Vector2 ButtonPosition = new Vector2(TexturePosition.X - 3' TexturePosition.Y - 5);                                SBatch.Draw(m_SkinBtns[Y + m_Counter].BtnTex' new Rectangle((int)(Position.X +                                  ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)'                                  new Rectangle((int)m_SkinBtns[m_Counter + Y].SourcePosition.X'                                  (int)m_SkinBtns[m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)'                                  Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);                                SBatch.Draw(m_Thumb' new Rectangle((int)(Position.X + TexturePosition.X)'                                  (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)'                                  null' Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth);                                if (m_Counter < m_NumberOfSkinsToDisplay)                                  m_Counter++;                          }                      }                        break;              }
Missing Default,Gonzo.Elements,UIHeadBrowser,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIHeadBrowser.cs,Update,The following switch statement is missing a default case: switch (m_SelectedSkintype)                                      {                                          case Elements.SkinType.Light:                                              EArgs.SkinType = 0;                                              EArgs.SelectedOutfit = (m_Sex == AvatarSex.Male ?                                                  m_LightAppearances[(Y * X) + m_Counter].Oft :                                                  m_LightFemaleAppearances[(Y * X) + m_Counter].Oft);                                                OnButtonClicked(this' EArgs);                                              break;                                          case Elements.SkinType.Medium:                                              EArgs.SkinType = 1;                                              EArgs.SelectedOutfit = (m_Sex == AvatarSex.Male ?                                                  m_MediumAppearances[(Y * X) + m_Counter].Oft :                                                  m_MediumFemaleAppearances[(Y * X) + m_Counter].Oft);                                              OnButtonClicked(this' EArgs);                                              break;                                          case Elements.SkinType.Dark:                                              EArgs.SkinType = 2;                                              EArgs.SelectedOutfit = (m_Sex == AvatarSex.Male ?                                                  m_DarkAppearances[(Y * X) + m_Counter].Oft :                                                  m_DarkFemaleAppearances[(Y * X) + m_Counter].Oft);                                                OnButtonClicked(this' EArgs);                                              break;                                      }
Missing Default,Gonzo.Elements,UIHeadBrowser,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIHeadBrowser.cs,Draw,The following switch statement is missing a default case: switch (m_SelectedSkintype)              {                  case Elements.SkinType.Light:                      for (int X = 0; X <= m_Map.GetUpperBound(1); X++)                      {                          for (int Y = 0; Y <= m_Map.GetUpperBound(0); Y++)                          {                              m_Thumb = FileManager.GetTexture(m_Sex == AvatarSex.Male ?                                   m_LightAppearances[(Y * X) + m_Counter].LightAppearance.ThumbnailID.UniqueID :                                  m_LightFemaleAppearances[(Y * X) + m_Counter].LightAppearance.ThumbnailID.UniqueID);                              m_BtnWidth = m_SkinBtns[m_Counter + Y].BtnTex.Width / 4;                              m_BtnHeight = m_SkinBtns[m_Counter + Y].BtnTex.Height;                                Vector2 TexturePosition =                                   new Vector2(X * (HeadTileSize.X + 10)' Y * (HeadTileSize.Y));                              Vector2 ButtonPosition = new Vector2(TexturePosition.X - 2' TexturePosition.Y - 5);                                //NOTE: Must be drawn at Depth - 0.1f because of alpha issues with thumbs.                              SBatch.Draw(m_SkinBtns[Y + m_Counter].BtnTex' new Rectangle((int)(Position.X +                                  ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)'                                  new Rectangle((int)m_SkinBtns[m_Counter + Y].SourcePosition.X'                                  (int)m_SkinBtns[m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)'                                  Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);                                SBatch.Draw(m_Thumb' new Rectangle((int)(Position.X + TexturePosition.X)'                                  (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)'                                  null' Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth);                                if (m_Counter < m_NumberOfSkinsToDisplay)                                  m_Counter++;                          }                      }                        break;                  case Elements.SkinType.Medium:                      for (int X = 0; X <= m_Map.GetUpperBound(1); X++)                      {                          for (int Y = 0; Y <= m_Map.GetUpperBound(0); Y++)                          {                              m_Thumb = FileManager.GetTexture(m_Sex == AvatarSex.Male ?                                  m_MediumAppearances[(Y * X) + m_Counter].MediumAppearance.ThumbnailID.UniqueID :                                  m_MediumFemaleAppearances[(Y * X) + m_Counter].MediumAppearance.ThumbnailID.UniqueID);                              m_BtnWidth = m_SkinBtns[m_Counter + Y].BtnTex.Width / 4;                              m_BtnHeight = m_SkinBtns[m_Counter + Y].BtnTex.Height;                                Vector2 TexturePosition = new Vector2(X * (HeadTileSize.X + 10)' Y * (HeadTileSize.Y));                              Vector2 ButtonPosition = new Vector2(TexturePosition.X - 2' TexturePosition.Y - 5);                                //NOTE: Must be drawn at Depth - 0.1f because of alpha issues with thumbs.                              SBatch.Draw(m_SkinBtns[Y + m_Counter].BtnTex' new Rectangle((int)(Position.X +                                  ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)'                                  new Rectangle((int)m_SkinBtns[m_Counter + Y].SourcePosition.X'                                  (int)m_SkinBtns[m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)'                                  Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);                                SBatch.Draw(m_Thumb' new Rectangle((int)(Position.X + TexturePosition.X)'                                  (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)'                                  null' Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth);                                if (m_Counter < m_NumberOfSkinsToDisplay)                                  m_Counter++;                          }                      }                        break;                  case Elements.SkinType.Dark:                      for (int X = 0; X <= m_Map.GetUpperBound(1); X++)                      {                          for (int Y = 0; Y <= m_Map.GetUpperBound(0); Y++)                          {                              m_Thumb = FileManager.GetTexture(m_Sex == AvatarSex.Male ?                                  m_DarkAppearances[(Y * X) + m_Counter].DarkAppearance.ThumbnailID.UniqueID :                                  m_DarkFemaleAppearances[(Y * X) + m_Counter].DarkAppearance.ThumbnailID.UniqueID);                              m_BtnWidth = m_SkinBtns[m_Counter + Y].BtnTex.Width / 4;                              m_BtnHeight = m_SkinBtns[m_Counter + Y].BtnTex.Height;                                Vector2 TexturePosition = new Vector2(X * (HeadTileSize.X + 10)' Y * (HeadTileSize.Y));                              Vector2 ButtonPosition = new Vector2(TexturePosition.X - 2' TexturePosition.Y - 5);                                //NOTE: Must be drawn at Depth - 0.1f because of alpha issues with thumbs.                              SBatch.Draw(m_SkinBtns[Y + m_Counter].BtnTex' new Rectangle((int)(Position.X +                                  ButtonPosition.X)' (int)(Position.Y + ButtonPosition.Y)' m_BtnWidth' m_BtnHeight)'                                  new Rectangle((int)m_SkinBtns[m_Counter + Y].SourcePosition.X'                                  (int)m_SkinBtns[m_Counter + Y].SourcePosition.Y' m_BtnWidth' m_BtnHeight)'                                  Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth - 0.1f);                                SBatch.Draw(m_Thumb' new Rectangle((int)(Position.X + TexturePosition.X)'                                  (int)(Position.Y + TexturePosition.Y)' m_Thumb.Width' m_Thumb.Height)'                                  null' Color.White' 0.0f' new Vector2(0.0f' 0.0f)' SpriteEffects.None' m_Depth);                                if (m_Counter < m_NumberOfSkinsToDisplay)                                  m_Counter++;                          }                      }                        break;              }
Missing Default,Gonzo.Elements,UITextEdit,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UITextEdit.cs,UITextEdit,The following switch statement is missing a default case: switch (Font)              {                  case 9:                      m_Font = Screen.Font9px;                      break;                  case 10:                      m_Font = Screen.Font10px;                      break;                  case 12:                      m_Font = Screen.Font12px;                      break;                  case 14:                      m_Font = Screen.Font14px;                      break;                  case 16:                      m_Font = Screen.Font16px;                      break;              }
Missing Default,Gonzo.Elements,UITextEdit,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UITextEdit.cs,UITextEdit,The following switch statement is missing a default case: switch (Font)              {                  case 9:                      m_Font = Screen.Font9px;                      break;                  case 10:                      m_Font = Screen.Font10px;                      break;                  case 12:                      m_Font = Screen.Font12px;                      break;                  case 14:                      m_Font = Screen.Font14px;                      break;                  case 16:                      m_Font = Screen.Font16px;                      break;              }
Missing Default,Gonzo.Elements,UITextEdit,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UITextEdit.cs,Update,The following switch statement is missing a default case: switch (K)                          {                              case Keys.Up:                                  if (m_RepChar != Keys.Up || m_LastRep != DateTime.Now)                                  {                                      if (m_MultiLine)                                          MoveCursorUp();                                  }                                  break;                              case Keys.Down:                                  if (m_RepChar != Keys.Down || m_LastRep != DateTime.Now)                                  {                                      if (m_MultiLine)                                          MoveCursorDown();                                  }                                  break;                              case Keys.Left:                                  MoveCursorLeft();                                  break;                              case Keys.Right:                                  MoveCursorRight();                                  break;                              case Keys.Back:                                  if (m_RepChar != Keys.Back || m_LastRep != DateTime.Now)                                      RemoveText();                                  break;                              case Keys.LeftShift:                                  m_CapitalLetters = true;                                  break;                              case Keys.RightShift:                                  m_CapitalLetters = true;                                  break;                              case Keys.Enter:                                  AddNewline();                                  break;                          }
Missing Default,Gonzo.Elements,UIButton,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The following switch statement is missing a default case: switch (FontSize)                  {                      case 9:                          m_Font = Screen.Font9px;                          break;                      case 10:                          m_Font = Screen.Font10px;                          break;                      case 12:                          m_Font = Screen.Font12px;                          break;                      case 14:                          m_Font = Screen.Font14px;                          break;                      case 16:                          m_Font = Screen.Font16px;                          break;                  }
Missing Default,Gonzo.Elements,UILabel,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UILabel.cs,UILabel,The following switch statement is missing a default case: switch (Font)              {                      case 7:                          m_Font = Screen.Font9px; //TODO: Fixme.                          break;                      case 9:                      m_Font = Screen.Font9px;                          break;                      case 10:                          m_Font = Screen.Font10px;                          break;                      case 11:                          m_Font = Screen.Font11px;                          break;                      case 12:                          m_Font = Screen.Font12px;                          break;                      case 14:                          m_Font = Screen.Font14px;                          break;                      case 16:                          m_Font = Screen.Font16px;                          break;              }
Missing Default,Gonzo.Elements,UILabel,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UILabel.cs,UILabel,The following switch statement is missing a default case: switch (Font)              {                  case 7:                      m_Font = Screen.Font9px; //TODO: Fixme.                      break;                  case 9:                      m_Font = Screen.Font9px;                      break;                  case 10:                      m_Font = Screen.Font10px;                      break;                  case 11:                      m_Font = Screen.Font11px;                      break;                  case 12:                      m_Font = Screen.Font12px;                      break;                  case 14:                      m_Font = Screen.Font14px;                      break;                  case 16:                      m_Font = Screen.Font16px;                      break;              }
Missing Default,Gonzo.Elements,UILabel,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UILabel.cs,AlignText,The following switch statement is missing a default case: switch (m_Alignment)              {                  case TextAlignment.Left_Top:                      //Is there a need to modify position at all here??                      break;                  case TextAlignment.Left_Center:                      LocalCopy.Y += (m_Size.Y / 2) - (Measurement.Y / 2);                      Position = LocalCopy;                      break;                  case TextAlignment.Center_Top:                      LocalCopy.X += (m_Size.X / 2) - (Measurement.X / 2);                      Position = LocalCopy;                      break;                  case TextAlignment.Center_Center:                      LocalCopy.X += (m_Size.X / 2) - (Measurement.X / 2);                      LocalCopy.Y += (m_Size.Y / 2) - (Measurement.Y / 2);                      Position = LocalCopy;                      break;                  case TextAlignment.Right_Top:                      LocalCopy.X += m_Size.X - Measurement.X;                      Position = LocalCopy;                      break;                  case TextAlignment.Right_Center:                      LocalCopy.X += m_Size.X - Measurement.X;                      LocalCopy.Y += (m_Size.Y / 2) - (Measurement.Y / 2);                      Position = LocalCopy;                      break;              }
