Implementation smell,Namespace,Class,File,Method,Description
Long Method,Gonzo.Elements,UIButton,C:\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The method has 189 lines of code.
Long Method,Gonzo.Elements,UITextEdit,C:\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UITextEdit.cs,UITextEdit,The method has 110 lines of code.
Long Method,Gonzo.Elements,UITextEdit,C:\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UITextEdit.cs,Manager_OnTextInput,The method has 112 lines of code.
Long Method,Gonzo.Elements,UITextEdit,C:\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UITextEdit.cs,Update,The method has 510 lines of code.
Complex Method,Gonzo.Elements,UIButton,C:\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,Cyclomatic complexity of the method is 16
Complex Method,Gonzo.Elements,UIControl,C:\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIControl.cs,UIControl,Cyclomatic complexity of the method is 10
Complex Method,Gonzo.Elements,UILabel,C:\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UILabel.cs,UILabel,Cyclomatic complexity of the method is 8
Complex Method,Gonzo.Elements,UITextEdit,C:\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UITextEdit.cs,UITextEdit,Cyclomatic complexity of the method is 22
Complex Method,Gonzo.Elements,UITextEdit,C:\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UITextEdit.cs,Manager_OnTextInput,Cyclomatic complexity of the method is 9
Complex Method,Gonzo.Elements,UITextEdit,C:\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UITextEdit.cs,Update,Cyclomatic complexity of the method is 11
Complex Method,Gonzo.Elements,UITextEdit,C:\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UITextEdit.cs,Draw,Cyclomatic complexity of the method is 9
Long Parameter List,Gonzo,UIScreen,C:\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\UIScreen.cs,UIScreen,The method has 6 parameters. Parameters: Manager' Name' SBatch' ScreenPosition' ScreenSize' UIScriptPath
Long Parameter List,Gonzo.Elements,UIButton,C:\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The method has 8 parameters. Parameters: Name' Pos' Screen' Tex' Caption' Font' ScaleToText' Parent
Long Parameter List,Gonzo.Elements,UIElement,C:\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIElement.cs,UIElement,The method has 5 parameters. Parameters: Name' Position' Size' Screen' Parent
Long Parameter List,Gonzo.Elements,UIImage,C:\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIImage.cs,DrawTextureTo,The method has 5 parameters. Parameters: SBatch' Scale' From' To' LayerDepth
Long Parameter List,Gonzo.Elements,NineSlicer,C:\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIImage.cs,NineSlicer,The method has 7 parameters. Parameters: Position' TextureWidth' TextureHeight' LeftPadding' RightPadding' TopPadding' BottomPadding
Long Parameter List,Gonzo.Elements,NineSlicer,C:\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIImage.cs,Calculate,The method has 6 parameters. Parameters: X' Y' LeftPadding' RightPadding' TopPadding' BottomPadding
Long Parameter List,Gonzo.Elements,UILabel,C:\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UILabel.cs,UILabel,The method has 8 parameters. Parameters: StrCaption' ID' TextPosition' Size' Clr' Font' Screen' Alignment
Long Parameter List,Gonzo.Elements,UITextEdit,C:\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UITextEdit.cs,UITextEdit,The method has 9 parameters. Parameters: Name' ID' DrawBackground' NumLines' TextEditPosition' TextEditSize' Font' Screen' Tooltip
Long Statement,Gonzo.Elements,UIButton,C:\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,DrawBorder,The length of the statement  "            SBatch.Draw(pixel' new Rectangle(rectangleToDraw.X' rectangleToDraw.Y' rectangleToDraw.Width' thicknessOfBorder)' borderColor); " is 127.
Long Statement,Gonzo.Elements,UIButton,C:\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,DrawBorder,The length of the statement  "            SBatch.Draw(pixel' new Rectangle(rectangleToDraw.X' rectangleToDraw.Y' thicknessOfBorder' rectangleToDraw.Height)' borderColor); " is 128.
Long Statement,Gonzo.Elements,UITextEdit,C:\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UITextEdit.cs,Draw,The length of the statement  "                    Image.DrawTextureTo(SBatch' Image.Slicer.TCenter_Scale' Image.Slicer.TCenter' Image.Position + new Vector2(Image.Slicer.LeftPadding' 0)' Depth); " is 144.
Long Statement,Gonzo.Elements,UITextEdit,C:\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UITextEdit.cs,Draw,The length of the statement  "                    Image.DrawTextureTo(SBatch' null' Image.Slicer.TRight' Image.Position + new Vector2(Image.Slicer.Width - Image.Slicer.RightPadding' 0)' Depth); " is 143.
Long Statement,Gonzo.Elements,UITextEdit,C:\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UITextEdit.cs,Draw,The length of the statement  "                    Image.DrawTextureTo(SBatch' Image.Slicer.CLeft_Scale' Image.Slicer.CLeft' Image.Position + new Vector2(0' Image.Slicer.TopPadding)' null); " is 138.
Long Statement,Gonzo.Elements,UITextEdit,C:\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UITextEdit.cs,Draw,The length of the statement  "                    Image.DrawTextureTo(SBatch' Image.Slicer.CCenter_Scale' Image.Slicer.CCenter' Image.Position + new Vector2(Image.Slicer.LeftPadding' Image.Slicer.TopPadding)' Depth); " is 166.
Long Statement,Gonzo.Elements,UITextEdit,C:\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UITextEdit.cs,Draw,The length of the statement  "                    Image.DrawTextureTo(SBatch' Image.Slicer.CRight_Scale' Image.Slicer.CRight' Image.Position + new Vector2(Image.Slicer.Width - Image.Slicer.RightPadding' Image.Slicer.TopPadding)' Depth); " is 186.
Long Statement,Gonzo.Elements,UITextEdit,C:\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UITextEdit.cs,Draw,The length of the statement  "                    Image.DrawTextureTo(SBatch' Image.Slicer.BCenter_Scale' Image.Slicer.BCenter' Image.Position + new Vector2(Image.Slicer.LeftPadding' BottomY)' Depth); " is 150.
Long Statement,Gonzo.Elements,UITextEdit,C:\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UITextEdit.cs,Draw,The length of the statement  "                    Image.DrawTextureTo(SBatch' null' Image.Slicer.BRight' Image.Position + new Vector2(Image.Slicer.Width - Image.Slicer.RightPadding' BottomY)' Depth); " is 149.
Complex Conditional,Gonzo.Elements,UIElement,C:\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIElement.cs,PixelCheck,The conditional expression  "pixelPosition.X >= 0 && pixelPosition.X < Width &&                  pixelPosition.Y >= 0 && pixelPosition.Y < Image.Texture.Height"  is complex.
Magic Number,Gonzo,Resolution,C:\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Resolution.cs,ResetViewport,The following statement contains a magic number: viewport.X = (_Device.PreferredBackBufferWidth / 2) - (width / 2);
Magic Number,Gonzo,Resolution,C:\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Resolution.cs,ResetViewport,The following statement contains a magic number: viewport.X = (_Device.PreferredBackBufferWidth / 2) - (width / 2);
Magic Number,Gonzo,Resolution,C:\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Resolution.cs,ResetViewport,The following statement contains a magic number: viewport.Y = (_Device.PreferredBackBufferHeight / 2) - (height / 2);
Magic Number,Gonzo,Resolution,C:\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Resolution.cs,ResetViewport,The following statement contains a magic number: viewport.Y = (_Device.PreferredBackBufferHeight / 2) - (height / 2);
Magic Number,Gonzo.Elements,UIButton,C:\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The following statement contains a magic number: if (!Result.State.InSharedPropertiesGroup)              {                  if (Node.Image != null)                  {                      Image = m_Screen.GetImage(Node.Image' false);                      //Initialize to second frame in the image.                      m_SourcePosition = new Vector2((Image.Texture.Width / (4)) * 2' 0.0f);                        m_Size = new Vector2();                      m_Size.X = (Image.Texture.Width) / (4);                      m_Size.Y = Image.Texture.Height;                        Position = new Vector2(Node.ButtonPosition.Numbers[0]' Node.ButtonPosition.Numbers[1]) + m_Screen.Position;                  }                  else                  {                      Image = new UIImage(FileManager.GetTexture((ulong)FileIDs.UIFileIDs.buttontiledialog)' m_Screen);                      //Initialize to second frame in the image.                      m_SourcePosition = new Vector2((Image.Texture.Width / 4) * 2' 0.0f);                        m_Size = new Vector2();                      m_Size.X = (Image.Texture.Width) / (4);                      m_Size.Y = Image.Texture.Height;                        Position = new Vector2(Node.ButtonPosition.Numbers[0]' Node.ButtonPosition.Numbers[1]) + m_Screen.Position;                  }              }              else              {                  if (Result.State.Image != "")                  {                      Image = m_Screen.GetImage(Result.State.Image' true);                      //Initialize to second frame in the image.                      m_SourcePosition = new Vector2((Image.Texture.Width / 4) * 2' 0.0f);                        m_Size = new Vector2();                      m_Size.X = (Image.Texture.Width) / (4);                      m_Size.Y = Image.Texture.Height;                  }                  else                  {                      if (Result.State.TextButton)                      {                          m_Text = Result.State.Caption;                          //Text buttons always use this image.                          Image = new UIImage(FileManager.GetTexture((ulong)FileIDs.UIFileIDs.buttontiledialog)' m_Screen);                          //Initialize to second frame in the image.                          if(Result.State.Size == null)                              m_SourcePosition = new Vector2((Image.Texture.Width / 4) * 2' 0.0f);                            m_Size = new Vector2();                          m_Size.X = Image.Texture.Width / 4;                          m_Size.Y = Image.Texture.Height;                      }                      else                      {                          if(Node.Image != null)                              Image = m_Screen.GetImage(Node.Image' false);                          else                              Image = new UIImage(FileManager.GetTexture((ulong)FileIDs.UIFileIDs.buttontiledialog)' m_Screen);                          //Initialize to second frame in the image.                          m_SourcePosition = new Vector2((Image.Texture.Width / (4)) * 2' 0.0f);                            m_Size = new Vector2();                          m_Size.X = (Image.Texture.Width) / (4);                          m_Size.Y = Image.Texture.Height;                      }                  }                    Position = new Vector2(Node.ButtonPosition.Numbers[0]' Node.ButtonPosition.Numbers[1]) + m_Screen.Position;                    if (Result.State.Tooltip != "")                      Tooltip = m_Screen.GetString(Result.State.Tooltip);              }
Magic Number,Gonzo.Elements,UIButton,C:\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The following statement contains a magic number: if (!Result.State.InSharedPropertiesGroup)              {                  if (Node.Image != null)                  {                      Image = m_Screen.GetImage(Node.Image' false);                      //Initialize to second frame in the image.                      m_SourcePosition = new Vector2((Image.Texture.Width / (4)) * 2' 0.0f);                        m_Size = new Vector2();                      m_Size.X = (Image.Texture.Width) / (4);                      m_Size.Y = Image.Texture.Height;                        Position = new Vector2(Node.ButtonPosition.Numbers[0]' Node.ButtonPosition.Numbers[1]) + m_Screen.Position;                  }                  else                  {                      Image = new UIImage(FileManager.GetTexture((ulong)FileIDs.UIFileIDs.buttontiledialog)' m_Screen);                      //Initialize to second frame in the image.                      m_SourcePosition = new Vector2((Image.Texture.Width / 4) * 2' 0.0f);                        m_Size = new Vector2();                      m_Size.X = (Image.Texture.Width) / (4);                      m_Size.Y = Image.Texture.Height;                        Position = new Vector2(Node.ButtonPosition.Numbers[0]' Node.ButtonPosition.Numbers[1]) + m_Screen.Position;                  }              }              else              {                  if (Result.State.Image != "")                  {                      Image = m_Screen.GetImage(Result.State.Image' true);                      //Initialize to second frame in the image.                      m_SourcePosition = new Vector2((Image.Texture.Width / 4) * 2' 0.0f);                        m_Size = new Vector2();                      m_Size.X = (Image.Texture.Width) / (4);                      m_Size.Y = Image.Texture.Height;                  }                  else                  {                      if (Result.State.TextButton)                      {                          m_Text = Result.State.Caption;                          //Text buttons always use this image.                          Image = new UIImage(FileManager.GetTexture((ulong)FileIDs.UIFileIDs.buttontiledialog)' m_Screen);                          //Initialize to second frame in the image.                          if(Result.State.Size == null)                              m_SourcePosition = new Vector2((Image.Texture.Width / 4) * 2' 0.0f);                            m_Size = new Vector2();                          m_Size.X = Image.Texture.Width / 4;                          m_Size.Y = Image.Texture.Height;                      }                      else                      {                          if(Node.Image != null)                              Image = m_Screen.GetImage(Node.Image' false);                          else                              Image = new UIImage(FileManager.GetTexture((ulong)FileIDs.UIFileIDs.buttontiledialog)' m_Screen);                          //Initialize to second frame in the image.                          m_SourcePosition = new Vector2((Image.Texture.Width / (4)) * 2' 0.0f);                            m_Size = new Vector2();                          m_Size.X = (Image.Texture.Width) / (4);                          m_Size.Y = Image.Texture.Height;                      }                  }                    Position = new Vector2(Node.ButtonPosition.Numbers[0]' Node.ButtonPosition.Numbers[1]) + m_Screen.Position;                    if (Result.State.Tooltip != "")                      Tooltip = m_Screen.GetString(Result.State.Tooltip);              }
Magic Number,Gonzo.Elements,UIButton,C:\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The following statement contains a magic number: if (!Result.State.InSharedPropertiesGroup)              {                  if (Node.Image != null)                  {                      Image = m_Screen.GetImage(Node.Image' false);                      //Initialize to second frame in the image.                      m_SourcePosition = new Vector2((Image.Texture.Width / (4)) * 2' 0.0f);                        m_Size = new Vector2();                      m_Size.X = (Image.Texture.Width) / (4);                      m_Size.Y = Image.Texture.Height;                        Position = new Vector2(Node.ButtonPosition.Numbers[0]' Node.ButtonPosition.Numbers[1]) + m_Screen.Position;                  }                  else                  {                      Image = new UIImage(FileManager.GetTexture((ulong)FileIDs.UIFileIDs.buttontiledialog)' m_Screen);                      //Initialize to second frame in the image.                      m_SourcePosition = new Vector2((Image.Texture.Width / 4) * 2' 0.0f);                        m_Size = new Vector2();                      m_Size.X = (Image.Texture.Width) / (4);                      m_Size.Y = Image.Texture.Height;                        Position = new Vector2(Node.ButtonPosition.Numbers[0]' Node.ButtonPosition.Numbers[1]) + m_Screen.Position;                  }              }              else              {                  if (Result.State.Image != "")                  {                      Image = m_Screen.GetImage(Result.State.Image' true);                      //Initialize to second frame in the image.                      m_SourcePosition = new Vector2((Image.Texture.Width / 4) * 2' 0.0f);                        m_Size = new Vector2();                      m_Size.X = (Image.Texture.Width) / (4);                      m_Size.Y = Image.Texture.Height;                  }                  else                  {                      if (Result.State.TextButton)                      {                          m_Text = Result.State.Caption;                          //Text buttons always use this image.                          Image = new UIImage(FileManager.GetTexture((ulong)FileIDs.UIFileIDs.buttontiledialog)' m_Screen);                          //Initialize to second frame in the image.                          if(Result.State.Size == null)                              m_SourcePosition = new Vector2((Image.Texture.Width / 4) * 2' 0.0f);                            m_Size = new Vector2();                          m_Size.X = Image.Texture.Width / 4;                          m_Size.Y = Image.Texture.Height;                      }                      else                      {                          if(Node.Image != null)                              Image = m_Screen.GetImage(Node.Image' false);                          else                              Image = new UIImage(FileManager.GetTexture((ulong)FileIDs.UIFileIDs.buttontiledialog)' m_Screen);                          //Initialize to second frame in the image.                          m_SourcePosition = new Vector2((Image.Texture.Width / (4)) * 2' 0.0f);                            m_Size = new Vector2();                          m_Size.X = (Image.Texture.Width) / (4);                          m_Size.Y = Image.Texture.Height;                      }                  }                    Position = new Vector2(Node.ButtonPosition.Numbers[0]' Node.ButtonPosition.Numbers[1]) + m_Screen.Position;                    if (Result.State.Tooltip != "")                      Tooltip = m_Screen.GetString(Result.State.Tooltip);              }
Magic Number,Gonzo.Elements,UIButton,C:\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The following statement contains a magic number: if (!Result.State.InSharedPropertiesGroup)              {                  if (Node.Image != null)                  {                      Image = m_Screen.GetImage(Node.Image' false);                      //Initialize to second frame in the image.                      m_SourcePosition = new Vector2((Image.Texture.Width / (4)) * 2' 0.0f);                        m_Size = new Vector2();                      m_Size.X = (Image.Texture.Width) / (4);                      m_Size.Y = Image.Texture.Height;                        Position = new Vector2(Node.ButtonPosition.Numbers[0]' Node.ButtonPosition.Numbers[1]) + m_Screen.Position;                  }                  else                  {                      Image = new UIImage(FileManager.GetTexture((ulong)FileIDs.UIFileIDs.buttontiledialog)' m_Screen);                      //Initialize to second frame in the image.                      m_SourcePosition = new Vector2((Image.Texture.Width / 4) * 2' 0.0f);                        m_Size = new Vector2();                      m_Size.X = (Image.Texture.Width) / (4);                      m_Size.Y = Image.Texture.Height;                        Position = new Vector2(Node.ButtonPosition.Numbers[0]' Node.ButtonPosition.Numbers[1]) + m_Screen.Position;                  }              }              else              {                  if (Result.State.Image != "")                  {                      Image = m_Screen.GetImage(Result.State.Image' true);                      //Initialize to second frame in the image.                      m_SourcePosition = new Vector2((Image.Texture.Width / 4) * 2' 0.0f);                        m_Size = new Vector2();                      m_Size.X = (Image.Texture.Width) / (4);                      m_Size.Y = Image.Texture.Height;                  }                  else                  {                      if (Result.State.TextButton)                      {                          m_Text = Result.State.Caption;                          //Text buttons always use this image.                          Image = new UIImage(FileManager.GetTexture((ulong)FileIDs.UIFileIDs.buttontiledialog)' m_Screen);                          //Initialize to second frame in the image.                          if(Result.State.Size == null)                              m_SourcePosition = new Vector2((Image.Texture.Width / 4) * 2' 0.0f);                            m_Size = new Vector2();                          m_Size.X = Image.Texture.Width / 4;                          m_Size.Y = Image.Texture.Height;                      }                      else                      {                          if(Node.Image != null)                              Image = m_Screen.GetImage(Node.Image' false);                          else                              Image = new UIImage(FileManager.GetTexture((ulong)FileIDs.UIFileIDs.buttontiledialog)' m_Screen);                          //Initialize to second frame in the image.                          m_SourcePosition = new Vector2((Image.Texture.Width / (4)) * 2' 0.0f);                            m_Size = new Vector2();                          m_Size.X = (Image.Texture.Width) / (4);                          m_Size.Y = Image.Texture.Height;                      }                  }                    Position = new Vector2(Node.ButtonPosition.Numbers[0]' Node.ButtonPosition.Numbers[1]) + m_Screen.Position;                    if (Result.State.Tooltip != "")                      Tooltip = m_Screen.GetString(Result.State.Tooltip);              }
Magic Number,Gonzo.Elements,UIButton,C:\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The following statement contains a magic number: if (!Result.State.InSharedPropertiesGroup)              {                  if (Node.Image != null)                  {                      Image = m_Screen.GetImage(Node.Image' false);                      //Initialize to second frame in the image.                      m_SourcePosition = new Vector2((Image.Texture.Width / (4)) * 2' 0.0f);                        m_Size = new Vector2();                      m_Size.X = (Image.Texture.Width) / (4);                      m_Size.Y = Image.Texture.Height;                        Position = new Vector2(Node.ButtonPosition.Numbers[0]' Node.ButtonPosition.Numbers[1]) + m_Screen.Position;                  }                  else                  {                      Image = new UIImage(FileManager.GetTexture((ulong)FileIDs.UIFileIDs.buttontiledialog)' m_Screen);                      //Initialize to second frame in the image.                      m_SourcePosition = new Vector2((Image.Texture.Width / 4) * 2' 0.0f);                        m_Size = new Vector2();                      m_Size.X = (Image.Texture.Width) / (4);                      m_Size.Y = Image.Texture.Height;                        Position = new Vector2(Node.ButtonPosition.Numbers[0]' Node.ButtonPosition.Numbers[1]) + m_Screen.Position;                  }              }              else              {                  if (Result.State.Image != "")                  {                      Image = m_Screen.GetImage(Result.State.Image' true);                      //Initialize to second frame in the image.                      m_SourcePosition = new Vector2((Image.Texture.Width / 4) * 2' 0.0f);                        m_Size = new Vector2();                      m_Size.X = (Image.Texture.Width) / (4);                      m_Size.Y = Image.Texture.Height;                  }                  else                  {                      if (Result.State.TextButton)                      {                          m_Text = Result.State.Caption;                          //Text buttons always use this image.                          Image = new UIImage(FileManager.GetTexture((ulong)FileIDs.UIFileIDs.buttontiledialog)' m_Screen);                          //Initialize to second frame in the image.                          if(Result.State.Size == null)                              m_SourcePosition = new Vector2((Image.Texture.Width / 4) * 2' 0.0f);                            m_Size = new Vector2();                          m_Size.X = Image.Texture.Width / 4;                          m_Size.Y = Image.Texture.Height;                      }                      else                      {                          if(Node.Image != null)                              Image = m_Screen.GetImage(Node.Image' false);                          else                              Image = new UIImage(FileManager.GetTexture((ulong)FileIDs.UIFileIDs.buttontiledialog)' m_Screen);                          //Initialize to second frame in the image.                          m_SourcePosition = new Vector2((Image.Texture.Width / (4)) * 2' 0.0f);                            m_Size = new Vector2();                          m_Size.X = (Image.Texture.Width) / (4);                          m_Size.Y = Image.Texture.Height;                      }                  }                    Position = new Vector2(Node.ButtonPosition.Numbers[0]' Node.ButtonPosition.Numbers[1]) + m_Screen.Position;                    if (Result.State.Tooltip != "")                      Tooltip = m_Screen.GetString(Result.State.Tooltip);              }
Magic Number,Gonzo.Elements,UIButton,C:\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The following statement contains a magic number: if (!Result.State.InSharedPropertiesGroup)              {                  if (Node.Image != null)                  {                      Image = m_Screen.GetImage(Node.Image' false);                      //Initialize to second frame in the image.                      m_SourcePosition = new Vector2((Image.Texture.Width / (4)) * 2' 0.0f);                        m_Size = new Vector2();                      m_Size.X = (Image.Texture.Width) / (4);                      m_Size.Y = Image.Texture.Height;                        Position = new Vector2(Node.ButtonPosition.Numbers[0]' Node.ButtonPosition.Numbers[1]) + m_Screen.Position;                  }                  else                  {                      Image = new UIImage(FileManager.GetTexture((ulong)FileIDs.UIFileIDs.buttontiledialog)' m_Screen);                      //Initialize to second frame in the image.                      m_SourcePosition = new Vector2((Image.Texture.Width / 4) * 2' 0.0f);                        m_Size = new Vector2();                      m_Size.X = (Image.Texture.Width) / (4);                      m_Size.Y = Image.Texture.Height;                        Position = new Vector2(Node.ButtonPosition.Numbers[0]' Node.ButtonPosition.Numbers[1]) + m_Screen.Position;                  }              }              else              {                  if (Result.State.Image != "")                  {                      Image = m_Screen.GetImage(Result.State.Image' true);                      //Initialize to second frame in the image.                      m_SourcePosition = new Vector2((Image.Texture.Width / 4) * 2' 0.0f);                        m_Size = new Vector2();                      m_Size.X = (Image.Texture.Width) / (4);                      m_Size.Y = Image.Texture.Height;                  }                  else                  {                      if (Result.State.TextButton)                      {                          m_Text = Result.State.Caption;                          //Text buttons always use this image.                          Image = new UIImage(FileManager.GetTexture((ulong)FileIDs.UIFileIDs.buttontiledialog)' m_Screen);                          //Initialize to second frame in the image.                          if(Result.State.Size == null)                              m_SourcePosition = new Vector2((Image.Texture.Width / 4) * 2' 0.0f);                            m_Size = new Vector2();                          m_Size.X = Image.Texture.Width / 4;                          m_Size.Y = Image.Texture.Height;                      }                      else                      {                          if(Node.Image != null)                              Image = m_Screen.GetImage(Node.Image' false);                          else                              Image = new UIImage(FileManager.GetTexture((ulong)FileIDs.UIFileIDs.buttontiledialog)' m_Screen);                          //Initialize to second frame in the image.                          m_SourcePosition = new Vector2((Image.Texture.Width / (4)) * 2' 0.0f);                            m_Size = new Vector2();                          m_Size.X = (Image.Texture.Width) / (4);                          m_Size.Y = Image.Texture.Height;                      }                  }                    Position = new Vector2(Node.ButtonPosition.Numbers[0]' Node.ButtonPosition.Numbers[1]) + m_Screen.Position;                    if (Result.State.Tooltip != "")                      Tooltip = m_Screen.GetString(Result.State.Tooltip);              }
Magic Number,Gonzo.Elements,UIButton,C:\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The following statement contains a magic number: if (!Result.State.InSharedPropertiesGroup)              {                  if (Node.Image != null)                  {                      Image = m_Screen.GetImage(Node.Image' false);                      //Initialize to second frame in the image.                      m_SourcePosition = new Vector2((Image.Texture.Width / (4)) * 2' 0.0f);                        m_Size = new Vector2();                      m_Size.X = (Image.Texture.Width) / (4);                      m_Size.Y = Image.Texture.Height;                        Position = new Vector2(Node.ButtonPosition.Numbers[0]' Node.ButtonPosition.Numbers[1]) + m_Screen.Position;                  }                  else                  {                      Image = new UIImage(FileManager.GetTexture((ulong)FileIDs.UIFileIDs.buttontiledialog)' m_Screen);                      //Initialize to second frame in the image.                      m_SourcePosition = new Vector2((Image.Texture.Width / 4) * 2' 0.0f);                        m_Size = new Vector2();                      m_Size.X = (Image.Texture.Width) / (4);                      m_Size.Y = Image.Texture.Height;                        Position = new Vector2(Node.ButtonPosition.Numbers[0]' Node.ButtonPosition.Numbers[1]) + m_Screen.Position;                  }              }              else              {                  if (Result.State.Image != "")                  {                      Image = m_Screen.GetImage(Result.State.Image' true);                      //Initialize to second frame in the image.                      m_SourcePosition = new Vector2((Image.Texture.Width / 4) * 2' 0.0f);                        m_Size = new Vector2();                      m_Size.X = (Image.Texture.Width) / (4);                      m_Size.Y = Image.Texture.Height;                  }                  else                  {                      if (Result.State.TextButton)                      {                          m_Text = Result.State.Caption;                          //Text buttons always use this image.                          Image = new UIImage(FileManager.GetTexture((ulong)FileIDs.UIFileIDs.buttontiledialog)' m_Screen);                          //Initialize to second frame in the image.                          if(Result.State.Size == null)                              m_SourcePosition = new Vector2((Image.Texture.Width / 4) * 2' 0.0f);                            m_Size = new Vector2();                          m_Size.X = Image.Texture.Width / 4;                          m_Size.Y = Image.Texture.Height;                      }                      else                      {                          if(Node.Image != null)                              Image = m_Screen.GetImage(Node.Image' false);                          else                              Image = new UIImage(FileManager.GetTexture((ulong)FileIDs.UIFileIDs.buttontiledialog)' m_Screen);                          //Initialize to second frame in the image.                          m_SourcePosition = new Vector2((Image.Texture.Width / (4)) * 2' 0.0f);                            m_Size = new Vector2();                          m_Size.X = (Image.Texture.Width) / (4);                          m_Size.Y = Image.Texture.Height;                      }                  }                    Position = new Vector2(Node.ButtonPosition.Numbers[0]' Node.ButtonPosition.Numbers[1]) + m_Screen.Position;                    if (Result.State.Tooltip != "")                      Tooltip = m_Screen.GetString(Result.State.Tooltip);              }
Magic Number,Gonzo.Elements,UIButton,C:\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The following statement contains a magic number: if (!Result.State.InSharedPropertiesGroup)              {                  if (Node.Image != null)                  {                      Image = m_Screen.GetImage(Node.Image' false);                      //Initialize to second frame in the image.                      m_SourcePosition = new Vector2((Image.Texture.Width / (4)) * 2' 0.0f);                        m_Size = new Vector2();                      m_Size.X = (Image.Texture.Width) / (4);                      m_Size.Y = Image.Texture.Height;                        Position = new Vector2(Node.ButtonPosition.Numbers[0]' Node.ButtonPosition.Numbers[1]) + m_Screen.Position;                  }                  else                  {                      Image = new UIImage(FileManager.GetTexture((ulong)FileIDs.UIFileIDs.buttontiledialog)' m_Screen);                      //Initialize to second frame in the image.                      m_SourcePosition = new Vector2((Image.Texture.Width / 4) * 2' 0.0f);                        m_Size = new Vector2();                      m_Size.X = (Image.Texture.Width) / (4);                      m_Size.Y = Image.Texture.Height;                        Position = new Vector2(Node.ButtonPosition.Numbers[0]' Node.ButtonPosition.Numbers[1]) + m_Screen.Position;                  }              }              else              {                  if (Result.State.Image != "")                  {                      Image = m_Screen.GetImage(Result.State.Image' true);                      //Initialize to second frame in the image.                      m_SourcePosition = new Vector2((Image.Texture.Width / 4) * 2' 0.0f);                        m_Size = new Vector2();                      m_Size.X = (Image.Texture.Width) / (4);                      m_Size.Y = Image.Texture.Height;                  }                  else                  {                      if (Result.State.TextButton)                      {                          m_Text = Result.State.Caption;                          //Text buttons always use this image.                          Image = new UIImage(FileManager.GetTexture((ulong)FileIDs.UIFileIDs.buttontiledialog)' m_Screen);                          //Initialize to second frame in the image.                          if(Result.State.Size == null)                              m_SourcePosition = new Vector2((Image.Texture.Width / 4) * 2' 0.0f);                            m_Size = new Vector2();                          m_Size.X = Image.Texture.Width / 4;                          m_Size.Y = Image.Texture.Height;                      }                      else                      {                          if(Node.Image != null)                              Image = m_Screen.GetImage(Node.Image' false);                          else                              Image = new UIImage(FileManager.GetTexture((ulong)FileIDs.UIFileIDs.buttontiledialog)' m_Screen);                          //Initialize to second frame in the image.                          m_SourcePosition = new Vector2((Image.Texture.Width / (4)) * 2' 0.0f);                            m_Size = new Vector2();                          m_Size.X = (Image.Texture.Width) / (4);                          m_Size.Y = Image.Texture.Height;                      }                  }                    Position = new Vector2(Node.ButtonPosition.Numbers[0]' Node.ButtonPosition.Numbers[1]) + m_Screen.Position;                    if (Result.State.Tooltip != "")                      Tooltip = m_Screen.GetString(Result.State.Tooltip);              }
Magic Number,Gonzo.Elements,UIButton,C:\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The following statement contains a magic number: if (!Result.State.InSharedPropertiesGroup)              {                  if (Node.Image != null)                  {                      Image = m_Screen.GetImage(Node.Image' false);                      //Initialize to second frame in the image.                      m_SourcePosition = new Vector2((Image.Texture.Width / (4)) * 2' 0.0f);                        m_Size = new Vector2();                      m_Size.X = (Image.Texture.Width) / (4);                      m_Size.Y = Image.Texture.Height;                        Position = new Vector2(Node.ButtonPosition.Numbers[0]' Node.ButtonPosition.Numbers[1]) + m_Screen.Position;                  }                  else                  {                      Image = new UIImage(FileManager.GetTexture((ulong)FileIDs.UIFileIDs.buttontiledialog)' m_Screen);                      //Initialize to second frame in the image.                      m_SourcePosition = new Vector2((Image.Texture.Width / 4) * 2' 0.0f);                        m_Size = new Vector2();                      m_Size.X = (Image.Texture.Width) / (4);                      m_Size.Y = Image.Texture.Height;                        Position = new Vector2(Node.ButtonPosition.Numbers[0]' Node.ButtonPosition.Numbers[1]) + m_Screen.Position;                  }              }              else              {                  if (Result.State.Image != "")                  {                      Image = m_Screen.GetImage(Result.State.Image' true);                      //Initialize to second frame in the image.                      m_SourcePosition = new Vector2((Image.Texture.Width / 4) * 2' 0.0f);                        m_Size = new Vector2();                      m_Size.X = (Image.Texture.Width) / (4);                      m_Size.Y = Image.Texture.Height;                  }                  else                  {                      if (Result.State.TextButton)                      {                          m_Text = Result.State.Caption;                          //Text buttons always use this image.                          Image = new UIImage(FileManager.GetTexture((ulong)FileIDs.UIFileIDs.buttontiledialog)' m_Screen);                          //Initialize to second frame in the image.                          if(Result.State.Size == null)                              m_SourcePosition = new Vector2((Image.Texture.Width / 4) * 2' 0.0f);                            m_Size = new Vector2();                          m_Size.X = Image.Texture.Width / 4;                          m_Size.Y = Image.Texture.Height;                      }                      else                      {                          if(Node.Image != null)                              Image = m_Screen.GetImage(Node.Image' false);                          else                              Image = new UIImage(FileManager.GetTexture((ulong)FileIDs.UIFileIDs.buttontiledialog)' m_Screen);                          //Initialize to second frame in the image.                          m_SourcePosition = new Vector2((Image.Texture.Width / (4)) * 2' 0.0f);                            m_Size = new Vector2();                          m_Size.X = (Image.Texture.Width) / (4);                          m_Size.Y = Image.Texture.Height;                      }                  }                    Position = new Vector2(Node.ButtonPosition.Numbers[0]' Node.ButtonPosition.Numbers[1]) + m_Screen.Position;                    if (Result.State.Tooltip != "")                      Tooltip = m_Screen.GetString(Result.State.Tooltip);              }
Magic Number,Gonzo.Elements,UIButton,C:\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The following statement contains a magic number: if (!Result.State.InSharedPropertiesGroup)              {                  if (Node.Image != null)                  {                      Image = m_Screen.GetImage(Node.Image' false);                      //Initialize to second frame in the image.                      m_SourcePosition = new Vector2((Image.Texture.Width / (4)) * 2' 0.0f);                        m_Size = new Vector2();                      m_Size.X = (Image.Texture.Width) / (4);                      m_Size.Y = Image.Texture.Height;                        Position = new Vector2(Node.ButtonPosition.Numbers[0]' Node.ButtonPosition.Numbers[1]) + m_Screen.Position;                  }                  else                  {                      Image = new UIImage(FileManager.GetTexture((ulong)FileIDs.UIFileIDs.buttontiledialog)' m_Screen);                      //Initialize to second frame in the image.                      m_SourcePosition = new Vector2((Image.Texture.Width / 4) * 2' 0.0f);                        m_Size = new Vector2();                      m_Size.X = (Image.Texture.Width) / (4);                      m_Size.Y = Image.Texture.Height;                        Position = new Vector2(Node.ButtonPosition.Numbers[0]' Node.ButtonPosition.Numbers[1]) + m_Screen.Position;                  }              }              else              {                  if (Result.State.Image != "")                  {                      Image = m_Screen.GetImage(Result.State.Image' true);                      //Initialize to second frame in the image.                      m_SourcePosition = new Vector2((Image.Texture.Width / 4) * 2' 0.0f);                        m_Size = new Vector2();                      m_Size.X = (Image.Texture.Width) / (4);                      m_Size.Y = Image.Texture.Height;                  }                  else                  {                      if (Result.State.TextButton)                      {                          m_Text = Result.State.Caption;                          //Text buttons always use this image.                          Image = new UIImage(FileManager.GetTexture((ulong)FileIDs.UIFileIDs.buttontiledialog)' m_Screen);                          //Initialize to second frame in the image.                          if(Result.State.Size == null)                              m_SourcePosition = new Vector2((Image.Texture.Width / 4) * 2' 0.0f);                            m_Size = new Vector2();                          m_Size.X = Image.Texture.Width / 4;                          m_Size.Y = Image.Texture.Height;                      }                      else                      {                          if(Node.Image != null)                              Image = m_Screen.GetImage(Node.Image' false);                          else                              Image = new UIImage(FileManager.GetTexture((ulong)FileIDs.UIFileIDs.buttontiledialog)' m_Screen);                          //Initialize to second frame in the image.                          m_SourcePosition = new Vector2((Image.Texture.Width / (4)) * 2' 0.0f);                            m_Size = new Vector2();                          m_Size.X = (Image.Texture.Width) / (4);                          m_Size.Y = Image.Texture.Height;                      }                  }                    Position = new Vector2(Node.ButtonPosition.Numbers[0]' Node.ButtonPosition.Numbers[1]) + m_Screen.Position;                    if (Result.State.Tooltip != "")                      Tooltip = m_Screen.GetString(Result.State.Tooltip);              }
Magic Number,Gonzo.Elements,UIButton,C:\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The following statement contains a magic number: if (!Result.State.InSharedPropertiesGroup)              {                  if (Node.Image != null)                  {                      Image = m_Screen.GetImage(Node.Image' false);                      //Initialize to second frame in the image.                      m_SourcePosition = new Vector2((Image.Texture.Width / (4)) * 2' 0.0f);                        m_Size = new Vector2();                      m_Size.X = (Image.Texture.Width) / (4);                      m_Size.Y = Image.Texture.Height;                        Position = new Vector2(Node.ButtonPosition.Numbers[0]' Node.ButtonPosition.Numbers[1]) + m_Screen.Position;                  }                  else                  {                      Image = new UIImage(FileManager.GetTexture((ulong)FileIDs.UIFileIDs.buttontiledialog)' m_Screen);                      //Initialize to second frame in the image.                      m_SourcePosition = new Vector2((Image.Texture.Width / 4) * 2' 0.0f);                        m_Size = new Vector2();                      m_Size.X = (Image.Texture.Width) / (4);                      m_Size.Y = Image.Texture.Height;                        Position = new Vector2(Node.ButtonPosition.Numbers[0]' Node.ButtonPosition.Numbers[1]) + m_Screen.Position;                  }              }              else              {                  if (Result.State.Image != "")                  {                      Image = m_Screen.GetImage(Result.State.Image' true);                      //Initialize to second frame in the image.                      m_SourcePosition = new Vector2((Image.Texture.Width / 4) * 2' 0.0f);                        m_Size = new Vector2();                      m_Size.X = (Image.Texture.Width) / (4);                      m_Size.Y = Image.Texture.Height;                  }                  else                  {                      if (Result.State.TextButton)                      {                          m_Text = Result.State.Caption;                          //Text buttons always use this image.                          Image = new UIImage(FileManager.GetTexture((ulong)FileIDs.UIFileIDs.buttontiledialog)' m_Screen);                          //Initialize to second frame in the image.                          if(Result.State.Size == null)                              m_SourcePosition = new Vector2((Image.Texture.Width / 4) * 2' 0.0f);                            m_Size = new Vector2();                          m_Size.X = Image.Texture.Width / 4;                          m_Size.Y = Image.Texture.Height;                      }                      else                      {                          if(Node.Image != null)                              Image = m_Screen.GetImage(Node.Image' false);                          else                              Image = new UIImage(FileManager.GetTexture((ulong)FileIDs.UIFileIDs.buttontiledialog)' m_Screen);                          //Initialize to second frame in the image.                          m_SourcePosition = new Vector2((Image.Texture.Width / (4)) * 2' 0.0f);                            m_Size = new Vector2();                          m_Size.X = (Image.Texture.Width) / (4);                          m_Size.Y = Image.Texture.Height;                      }                  }                    Position = new Vector2(Node.ButtonPosition.Numbers[0]' Node.ButtonPosition.Numbers[1]) + m_Screen.Position;                    if (Result.State.Tooltip != "")                      Tooltip = m_Screen.GetString(Result.State.Tooltip);              }
Magic Number,Gonzo.Elements,UIButton,C:\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The following statement contains a magic number: if (!Result.State.InSharedPropertiesGroup)              {                  if (Node.Image != null)                  {                      Image = m_Screen.GetImage(Node.Image' false);                      //Initialize to second frame in the image.                      m_SourcePosition = new Vector2((Image.Texture.Width / (4)) * 2' 0.0f);                        m_Size = new Vector2();                      m_Size.X = (Image.Texture.Width) / (4);                      m_Size.Y = Image.Texture.Height;                        Position = new Vector2(Node.ButtonPosition.Numbers[0]' Node.ButtonPosition.Numbers[1]) + m_Screen.Position;                  }                  else                  {                      Image = new UIImage(FileManager.GetTexture((ulong)FileIDs.UIFileIDs.buttontiledialog)' m_Screen);                      //Initialize to second frame in the image.                      m_SourcePosition = new Vector2((Image.Texture.Width / 4) * 2' 0.0f);                        m_Size = new Vector2();                      m_Size.X = (Image.Texture.Width) / (4);                      m_Size.Y = Image.Texture.Height;                        Position = new Vector2(Node.ButtonPosition.Numbers[0]' Node.ButtonPosition.Numbers[1]) + m_Screen.Position;                  }              }              else              {                  if (Result.State.Image != "")                  {                      Image = m_Screen.GetImage(Result.State.Image' true);                      //Initialize to second frame in the image.                      m_SourcePosition = new Vector2((Image.Texture.Width / 4) * 2' 0.0f);                        m_Size = new Vector2();                      m_Size.X = (Image.Texture.Width) / (4);                      m_Size.Y = Image.Texture.Height;                  }                  else                  {                      if (Result.State.TextButton)                      {                          m_Text = Result.State.Caption;                          //Text buttons always use this image.                          Image = new UIImage(FileManager.GetTexture((ulong)FileIDs.UIFileIDs.buttontiledialog)' m_Screen);                          //Initialize to second frame in the image.                          if(Result.State.Size == null)                              m_SourcePosition = new Vector2((Image.Texture.Width / 4) * 2' 0.0f);                            m_Size = new Vector2();                          m_Size.X = Image.Texture.Width / 4;                          m_Size.Y = Image.Texture.Height;                      }                      else                      {                          if(Node.Image != null)                              Image = m_Screen.GetImage(Node.Image' false);                          else                              Image = new UIImage(FileManager.GetTexture((ulong)FileIDs.UIFileIDs.buttontiledialog)' m_Screen);                          //Initialize to second frame in the image.                          m_SourcePosition = new Vector2((Image.Texture.Width / (4)) * 2' 0.0f);                            m_Size = new Vector2();                          m_Size.X = (Image.Texture.Width) / (4);                          m_Size.Y = Image.Texture.Height;                      }                  }                    Position = new Vector2(Node.ButtonPosition.Numbers[0]' Node.ButtonPosition.Numbers[1]) + m_Screen.Position;                    if (Result.State.Tooltip != "")                      Tooltip = m_Screen.GetString(Result.State.Tooltip);              }
Magic Number,Gonzo.Elements,UIButton,C:\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The following statement contains a magic number: if (!Result.State.InSharedPropertiesGroup)              {                  if (Node.Image != null)                  {                      Image = m_Screen.GetImage(Node.Image' false);                      //Initialize to second frame in the image.                      m_SourcePosition = new Vector2((Image.Texture.Width / (4)) * 2' 0.0f);                        m_Size = new Vector2();                      m_Size.X = (Image.Texture.Width) / (4);                      m_Size.Y = Image.Texture.Height;                        Position = new Vector2(Node.ButtonPosition.Numbers[0]' Node.ButtonPosition.Numbers[1]) + m_Screen.Position;                  }                  else                  {                      Image = new UIImage(FileManager.GetTexture((ulong)FileIDs.UIFileIDs.buttontiledialog)' m_Screen);                      //Initialize to second frame in the image.                      m_SourcePosition = new Vector2((Image.Texture.Width / 4) * 2' 0.0f);                        m_Size = new Vector2();                      m_Size.X = (Image.Texture.Width) / (4);                      m_Size.Y = Image.Texture.Height;                        Position = new Vector2(Node.ButtonPosition.Numbers[0]' Node.ButtonPosition.Numbers[1]) + m_Screen.Position;                  }              }              else              {                  if (Result.State.Image != "")                  {                      Image = m_Screen.GetImage(Result.State.Image' true);                      //Initialize to second frame in the image.                      m_SourcePosition = new Vector2((Image.Texture.Width / 4) * 2' 0.0f);                        m_Size = new Vector2();                      m_Size.X = (Image.Texture.Width) / (4);                      m_Size.Y = Image.Texture.Height;                  }                  else                  {                      if (Result.State.TextButton)                      {                          m_Text = Result.State.Caption;                          //Text buttons always use this image.                          Image = new UIImage(FileManager.GetTexture((ulong)FileIDs.UIFileIDs.buttontiledialog)' m_Screen);                          //Initialize to second frame in the image.                          if(Result.State.Size == null)                              m_SourcePosition = new Vector2((Image.Texture.Width / 4) * 2' 0.0f);                            m_Size = new Vector2();                          m_Size.X = Image.Texture.Width / 4;                          m_Size.Y = Image.Texture.Height;                      }                      else                      {                          if(Node.Image != null)                              Image = m_Screen.GetImage(Node.Image' false);                          else                              Image = new UIImage(FileManager.GetTexture((ulong)FileIDs.UIFileIDs.buttontiledialog)' m_Screen);                          //Initialize to second frame in the image.                          m_SourcePosition = new Vector2((Image.Texture.Width / (4)) * 2' 0.0f);                            m_Size = new Vector2();                          m_Size.X = (Image.Texture.Width) / (4);                          m_Size.Y = Image.Texture.Height;                      }                  }                    Position = new Vector2(Node.ButtonPosition.Numbers[0]' Node.ButtonPosition.Numbers[1]) + m_Screen.Position;                    if (Result.State.Tooltip != "")                      Tooltip = m_Screen.GetString(Result.State.Tooltip);              }
Magic Number,Gonzo.Elements,UIButton,C:\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The following statement contains a magic number: if (!Result.State.InSharedPropertiesGroup)              {                  if (Node.Image != null)                  {                      Image = m_Screen.GetImage(Node.Image' false);                      //Initialize to second frame in the image.                      m_SourcePosition = new Vector2((Image.Texture.Width / (4)) * 2' 0.0f);                        m_Size = new Vector2();                      m_Size.X = (Image.Texture.Width) / (4);                      m_Size.Y = Image.Texture.Height;                        Position = new Vector2(Node.ButtonPosition.Numbers[0]' Node.ButtonPosition.Numbers[1]) + m_Screen.Position;                  }                  else                  {                      Image = new UIImage(FileManager.GetTexture((ulong)FileIDs.UIFileIDs.buttontiledialog)' m_Screen);                      //Initialize to second frame in the image.                      m_SourcePosition = new Vector2((Image.Texture.Width / 4) * 2' 0.0f);                        m_Size = new Vector2();                      m_Size.X = (Image.Texture.Width) / (4);                      m_Size.Y = Image.Texture.Height;                        Position = new Vector2(Node.ButtonPosition.Numbers[0]' Node.ButtonPosition.Numbers[1]) + m_Screen.Position;                  }              }              else              {                  if (Result.State.Image != "")                  {                      Image = m_Screen.GetImage(Result.State.Image' true);                      //Initialize to second frame in the image.                      m_SourcePosition = new Vector2((Image.Texture.Width / 4) * 2' 0.0f);                        m_Size = new Vector2();                      m_Size.X = (Image.Texture.Width) / (4);                      m_Size.Y = Image.Texture.Height;                  }                  else                  {                      if (Result.State.TextButton)                      {                          m_Text = Result.State.Caption;                          //Text buttons always use this image.                          Image = new UIImage(FileManager.GetTexture((ulong)FileIDs.UIFileIDs.buttontiledialog)' m_Screen);                          //Initialize to second frame in the image.                          if(Result.State.Size == null)                              m_SourcePosition = new Vector2((Image.Texture.Width / 4) * 2' 0.0f);                            m_Size = new Vector2();                          m_Size.X = Image.Texture.Width / 4;                          m_Size.Y = Image.Texture.Height;                      }                      else                      {                          if(Node.Image != null)                              Image = m_Screen.GetImage(Node.Image' false);                          else                              Image = new UIImage(FileManager.GetTexture((ulong)FileIDs.UIFileIDs.buttontiledialog)' m_Screen);                          //Initialize to second frame in the image.                          m_SourcePosition = new Vector2((Image.Texture.Width / (4)) * 2' 0.0f);                            m_Size = new Vector2();                          m_Size.X = (Image.Texture.Width) / (4);                          m_Size.Y = Image.Texture.Height;                      }                  }                    Position = new Vector2(Node.ButtonPosition.Numbers[0]' Node.ButtonPosition.Numbers[1]) + m_Screen.Position;                    if (Result.State.Tooltip != "")                      Tooltip = m_Screen.GetString(Result.State.Tooltip);              }
Magic Number,Gonzo.Elements,UIButton,C:\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The following statement contains a magic number: if (!Result.State.InSharedPropertiesGroup)              {                  if (Node.Image != null)                  {                      Image = m_Screen.GetImage(Node.Image' false);                      //Initialize to second frame in the image.                      m_SourcePosition = new Vector2((Image.Texture.Width / (4)) * 2' 0.0f);                        m_Size = new Vector2();                      m_Size.X = (Image.Texture.Width) / (4);                      m_Size.Y = Image.Texture.Height;                        Position = new Vector2(Node.ButtonPosition.Numbers[0]' Node.ButtonPosition.Numbers[1]) + m_Screen.Position;                  }                  else                  {                      Image = new UIImage(FileManager.GetTexture((ulong)FileIDs.UIFileIDs.buttontiledialog)' m_Screen);                      //Initialize to second frame in the image.                      m_SourcePosition = new Vector2((Image.Texture.Width / 4) * 2' 0.0f);                        m_Size = new Vector2();                      m_Size.X = (Image.Texture.Width) / (4);                      m_Size.Y = Image.Texture.Height;                        Position = new Vector2(Node.ButtonPosition.Numbers[0]' Node.ButtonPosition.Numbers[1]) + m_Screen.Position;                  }              }              else              {                  if (Result.State.Image != "")                  {                      Image = m_Screen.GetImage(Result.State.Image' true);                      //Initialize to second frame in the image.                      m_SourcePosition = new Vector2((Image.Texture.Width / 4) * 2' 0.0f);                        m_Size = new Vector2();                      m_Size.X = (Image.Texture.Width) / (4);                      m_Size.Y = Image.Texture.Height;                  }                  else                  {                      if (Result.State.TextButton)                      {                          m_Text = Result.State.Caption;                          //Text buttons always use this image.                          Image = new UIImage(FileManager.GetTexture((ulong)FileIDs.UIFileIDs.buttontiledialog)' m_Screen);                          //Initialize to second frame in the image.                          if(Result.State.Size == null)                              m_SourcePosition = new Vector2((Image.Texture.Width / 4) * 2' 0.0f);                            m_Size = new Vector2();                          m_Size.X = Image.Texture.Width / 4;                          m_Size.Y = Image.Texture.Height;                      }                      else                      {                          if(Node.Image != null)                              Image = m_Screen.GetImage(Node.Image' false);                          else                              Image = new UIImage(FileManager.GetTexture((ulong)FileIDs.UIFileIDs.buttontiledialog)' m_Screen);                          //Initialize to second frame in the image.                          m_SourcePosition = new Vector2((Image.Texture.Width / (4)) * 2' 0.0f);                            m_Size = new Vector2();                          m_Size.X = (Image.Texture.Width) / (4);                          m_Size.Y = Image.Texture.Height;                      }                  }                    Position = new Vector2(Node.ButtonPosition.Numbers[0]' Node.ButtonPosition.Numbers[1]) + m_Screen.Position;                    if (Result.State.Tooltip != "")                      Tooltip = m_Screen.GetString(Result.State.Tooltip);              }
Magic Number,Gonzo.Elements,UIButton,C:\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The following statement contains a magic number: if (Node.Font != null)              {                  int FontSize = (int)Node.Font;                    switch (FontSize)                  {                      case 9:                          m_Font = Screen.Font9px;                          break;                      case 10:                          m_Font = Screen.Font10px;                          break;                      case 12:                          m_Font = Screen.Font12px;                          break;                      case 14:                          m_Font = Screen.Font14px;                          break;                      case 16:                          m_Font = Screen.Font16px;                          break;                  }              }              else if (Result.State.Font != 0)              {                  switch (Result.State.Font)                  {                      case 9:                          m_Font = Screen.Font9px;                          break;                      case 10:                          m_Font = Screen.Font10px;                          break;                      case 12:                          m_Font = Screen.Font12px;                          break;                      case 14:                          m_Font = Screen.Font14px;                          break;                      case 16:                          m_Font = Screen.Font16px;                          break;                      default:                          m_Font = Screen.Font12px;                          break;                  }              }
Magic Number,Gonzo.Elements,UIButton,C:\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The following statement contains a magic number: if (Node.Font != null)              {                  int FontSize = (int)Node.Font;                    switch (FontSize)                  {                      case 9:                          m_Font = Screen.Font9px;                          break;                      case 10:                          m_Font = Screen.Font10px;                          break;                      case 12:                          m_Font = Screen.Font12px;                          break;                      case 14:                          m_Font = Screen.Font14px;                          break;                      case 16:                          m_Font = Screen.Font16px;                          break;                  }              }              else if (Result.State.Font != 0)              {                  switch (Result.State.Font)                  {                      case 9:                          m_Font = Screen.Font9px;                          break;                      case 10:                          m_Font = Screen.Font10px;                          break;                      case 12:                          m_Font = Screen.Font12px;                          break;                      case 14:                          m_Font = Screen.Font14px;                          break;                      case 16:                          m_Font = Screen.Font16px;                          break;                      default:                          m_Font = Screen.Font12px;                          break;                  }              }
Magic Number,Gonzo.Elements,UIButton,C:\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The following statement contains a magic number: if (Node.Font != null)              {                  int FontSize = (int)Node.Font;                    switch (FontSize)                  {                      case 9:                          m_Font = Screen.Font9px;                          break;                      case 10:                          m_Font = Screen.Font10px;                          break;                      case 12:                          m_Font = Screen.Font12px;                          break;                      case 14:                          m_Font = Screen.Font14px;                          break;                      case 16:                          m_Font = Screen.Font16px;                          break;                  }              }              else if (Result.State.Font != 0)              {                  switch (Result.State.Font)                  {                      case 9:                          m_Font = Screen.Font9px;                          break;                      case 10:                          m_Font = Screen.Font10px;                          break;                      case 12:                          m_Font = Screen.Font12px;                          break;                      case 14:                          m_Font = Screen.Font14px;                          break;                      case 16:                          m_Font = Screen.Font16px;                          break;                      default:                          m_Font = Screen.Font12px;                          break;                  }              }
Magic Number,Gonzo.Elements,UIButton,C:\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The following statement contains a magic number: if (Node.Font != null)              {                  int FontSize = (int)Node.Font;                    switch (FontSize)                  {                      case 9:                          m_Font = Screen.Font9px;                          break;                      case 10:                          m_Font = Screen.Font10px;                          break;                      case 12:                          m_Font = Screen.Font12px;                          break;                      case 14:                          m_Font = Screen.Font14px;                          break;                      case 16:                          m_Font = Screen.Font16px;                          break;                  }              }              else if (Result.State.Font != 0)              {                  switch (Result.State.Font)                  {                      case 9:                          m_Font = Screen.Font9px;                          break;                      case 10:                          m_Font = Screen.Font10px;                          break;                      case 12:                          m_Font = Screen.Font12px;                          break;                      case 14:                          m_Font = Screen.Font14px;                          break;                      case 16:                          m_Font = Screen.Font16px;                          break;                      default:                          m_Font = Screen.Font12px;                          break;                  }              }
Magic Number,Gonzo.Elements,UIButton,C:\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The following statement contains a magic number: if (Node.Font != null)              {                  int FontSize = (int)Node.Font;                    switch (FontSize)                  {                      case 9:                          m_Font = Screen.Font9px;                          break;                      case 10:                          m_Font = Screen.Font10px;                          break;                      case 12:                          m_Font = Screen.Font12px;                          break;                      case 14:                          m_Font = Screen.Font14px;                          break;                      case 16:                          m_Font = Screen.Font16px;                          break;                  }              }              else if (Result.State.Font != 0)              {                  switch (Result.State.Font)                  {                      case 9:                          m_Font = Screen.Font9px;                          break;                      case 10:                          m_Font = Screen.Font10px;                          break;                      case 12:                          m_Font = Screen.Font12px;                          break;                      case 14:                          m_Font = Screen.Font14px;                          break;                      case 16:                          m_Font = Screen.Font16px;                          break;                      default:                          m_Font = Screen.Font12px;                          break;                  }              }
Magic Number,Gonzo.Elements,UIButton,C:\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The following statement contains a magic number: if (Node.Font != null)              {                  int FontSize = (int)Node.Font;                    switch (FontSize)                  {                      case 9:                          m_Font = Screen.Font9px;                          break;                      case 10:                          m_Font = Screen.Font10px;                          break;                      case 12:                          m_Font = Screen.Font12px;                          break;                      case 14:                          m_Font = Screen.Font14px;                          break;                      case 16:                          m_Font = Screen.Font16px;                          break;                  }              }              else if (Result.State.Font != 0)              {                  switch (Result.State.Font)                  {                      case 9:                          m_Font = Screen.Font9px;                          break;                      case 10:                          m_Font = Screen.Font10px;                          break;                      case 12:                          m_Font = Screen.Font12px;                          break;                      case 14:                          m_Font = Screen.Font14px;                          break;                      case 16:                          m_Font = Screen.Font16px;                          break;                      default:                          m_Font = Screen.Font12px;                          break;                  }              }
Magic Number,Gonzo.Elements,UIButton,C:\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The following statement contains a magic number: if (Node.Font != null)              {                  int FontSize = (int)Node.Font;                    switch (FontSize)                  {                      case 9:                          m_Font = Screen.Font9px;                          break;                      case 10:                          m_Font = Screen.Font10px;                          break;                      case 12:                          m_Font = Screen.Font12px;                          break;                      case 14:                          m_Font = Screen.Font14px;                          break;                      case 16:                          m_Font = Screen.Font16px;                          break;                  }              }              else if (Result.State.Font != 0)              {                  switch (Result.State.Font)                  {                      case 9:                          m_Font = Screen.Font9px;                          break;                      case 10:                          m_Font = Screen.Font10px;                          break;                      case 12:                          m_Font = Screen.Font12px;                          break;                      case 14:                          m_Font = Screen.Font14px;                          break;                      case 16:                          m_Font = Screen.Font16px;                          break;                      default:                          m_Font = Screen.Font12px;                          break;                  }              }
Magic Number,Gonzo.Elements,UIButton,C:\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The following statement contains a magic number: if (Node.Font != null)              {                  int FontSize = (int)Node.Font;                    switch (FontSize)                  {                      case 9:                          m_Font = Screen.Font9px;                          break;                      case 10:                          m_Font = Screen.Font10px;                          break;                      case 12:                          m_Font = Screen.Font12px;                          break;                      case 14:                          m_Font = Screen.Font14px;                          break;                      case 16:                          m_Font = Screen.Font16px;                          break;                  }              }              else if (Result.State.Font != 0)              {                  switch (Result.State.Font)                  {                      case 9:                          m_Font = Screen.Font9px;                          break;                      case 10:                          m_Font = Screen.Font10px;                          break;                      case 12:                          m_Font = Screen.Font12px;                          break;                      case 14:                          m_Font = Screen.Font14px;                          break;                      case 16:                          m_Font = Screen.Font16px;                          break;                      default:                          m_Font = Screen.Font12px;                          break;                  }              }
Magic Number,Gonzo.Elements,UIButton,C:\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The following statement contains a magic number: if (Node.Font != null)              {                  int FontSize = (int)Node.Font;                    switch (FontSize)                  {                      case 9:                          m_Font = Screen.Font9px;                          break;                      case 10:                          m_Font = Screen.Font10px;                          break;                      case 12:                          m_Font = Screen.Font12px;                          break;                      case 14:                          m_Font = Screen.Font14px;                          break;                      case 16:                          m_Font = Screen.Font16px;                          break;                  }              }              else if (Result.State.Font != 0)              {                  switch (Result.State.Font)                  {                      case 9:                          m_Font = Screen.Font9px;                          break;                      case 10:                          m_Font = Screen.Font10px;                          break;                      case 12:                          m_Font = Screen.Font12px;                          break;                      case 14:                          m_Font = Screen.Font14px;                          break;                      case 16:                          m_Font = Screen.Font16px;                          break;                      default:                          m_Font = Screen.Font12px;                          break;                  }              }
Magic Number,Gonzo.Elements,UIButton,C:\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The following statement contains a magic number: if (Node.Font != null)              {                  int FontSize = (int)Node.Font;                    switch (FontSize)                  {                      case 9:                          m_Font = Screen.Font9px;                          break;                      case 10:                          m_Font = Screen.Font10px;                          break;                      case 12:                          m_Font = Screen.Font12px;                          break;                      case 14:                          m_Font = Screen.Font14px;                          break;                      case 16:                          m_Font = Screen.Font16px;                          break;                  }              }              else if (Result.State.Font != 0)              {                  switch (Result.State.Font)                  {                      case 9:                          m_Font = Screen.Font9px;                          break;                      case 10:                          m_Font = Screen.Font10px;                          break;                      case 12:                          m_Font = Screen.Font12px;                          break;                      case 14:                          m_Font = Screen.Font14px;                          break;                      case 16:                          m_Font = Screen.Font16px;                          break;                      default:                          m_Font = Screen.Font12px;                          break;                  }              }
Magic Number,Gonzo.Elements,UIButton,C:\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The following statement contains a magic number: if (Node.TextColor != null)              {                  TextColor = new Color();                  TextColor.A = 255;                  TextColor.R = (byte)Node.TextColor.Numbers[0];                  TextColor.G = (byte)Node.TextColor.Numbers[1];                  TextColor.B = (byte)Node.TextColor.Numbers[2];              }              else              {                  TextColor = Result.State.TextColor;                  TextColor.A = 255;              }
Magic Number,Gonzo.Elements,UIButton,C:\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The following statement contains a magic number: if (Node.TextColor != null)              {                  TextColor = new Color();                  TextColor.A = 255;                  TextColor.R = (byte)Node.TextColor.Numbers[0];                  TextColor.G = (byte)Node.TextColor.Numbers[1];                  TextColor.B = (byte)Node.TextColor.Numbers[2];              }              else              {                  TextColor = Result.State.TextColor;                  TextColor.A = 255;              }
Magic Number,Gonzo.Elements,UIButton,C:\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The following statement contains a magic number: if (Node.TextColor != null)              {                  TextColor = new Color();                  TextColor.A = 255;                  TextColor.R = (byte)Node.TextColor.Numbers[0];                  TextColor.G = (byte)Node.TextColor.Numbers[1];                  TextColor.B = (byte)Node.TextColor.Numbers[2];              }              else              {                  TextColor = Result.State.TextColor;                  TextColor.A = 255;              }
Magic Number,Gonzo.Elements,UIButton,C:\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The following statement contains a magic number: if (Node.TextColorSelected != null)              {                  TextColorSelected = new Color();                  TextColorSelected.A = 255;                  TextColorSelected.R = (byte)Node.TextColorSelected.Numbers[0];                  TextColorSelected.G = (byte)Node.TextColorSelected.Numbers[1];                  TextColorSelected.B = (byte)Node.TextColorSelected.Numbers[2];              }              else              {                  TextColorSelected = Result.State.TextColorSelected;                  TextColorSelected.A = 255;              }
Magic Number,Gonzo.Elements,UIButton,C:\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The following statement contains a magic number: if (Node.TextColorSelected != null)              {                  TextColorSelected = new Color();                  TextColorSelected.A = 255;                  TextColorSelected.R = (byte)Node.TextColorSelected.Numbers[0];                  TextColorSelected.G = (byte)Node.TextColorSelected.Numbers[1];                  TextColorSelected.B = (byte)Node.TextColorSelected.Numbers[2];              }              else              {                  TextColorSelected = Result.State.TextColorSelected;                  TextColorSelected.A = 255;              }
Magic Number,Gonzo.Elements,UIButton,C:\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The following statement contains a magic number: if (Node.TextColorSelected != null)              {                  TextColorSelected = new Color();                  TextColorSelected.A = 255;                  TextColorSelected.R = (byte)Node.TextColorSelected.Numbers[0];                  TextColorSelected.G = (byte)Node.TextColorSelected.Numbers[1];                  TextColorSelected.B = (byte)Node.TextColorSelected.Numbers[2];              }              else              {                  TextColorSelected = Result.State.TextColorSelected;                  TextColorSelected.A = 255;              }
Magic Number,Gonzo.Elements,UIButton,C:\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The following statement contains a magic number: if (Node.TextColorHighlighted != null)              {                  TextColorHighlighted = new Color();                  TextColorHighlighted.A = 255;                  TextColorHighlighted.R = (byte)Node.TextColorHighlighted.Numbers[0];                  TextColorHighlighted.G = (byte)Node.TextColorHighlighted.Numbers[1];                  TextColorHighlighted.B = (byte)Node.TextColorHighlighted.Numbers[2];              }              else              {                  TextColorHighlighted = Result.State.TextColorHighlighted;                  TextColorHighlighted.A = 255;              }
Magic Number,Gonzo.Elements,UIButton,C:\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The following statement contains a magic number: if (Node.TextColorHighlighted != null)              {                  TextColorHighlighted = new Color();                  TextColorHighlighted.A = 255;                  TextColorHighlighted.R = (byte)Node.TextColorHighlighted.Numbers[0];                  TextColorHighlighted.G = (byte)Node.TextColorHighlighted.Numbers[1];                  TextColorHighlighted.B = (byte)Node.TextColorHighlighted.Numbers[2];              }              else              {                  TextColorHighlighted = Result.State.TextColorHighlighted;                  TextColorHighlighted.A = 255;              }
Magic Number,Gonzo.Elements,UIButton,C:\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The following statement contains a magic number: if (Node.TextColorHighlighted != null)              {                  TextColorHighlighted = new Color();                  TextColorHighlighted.A = 255;                  TextColorHighlighted.R = (byte)Node.TextColorHighlighted.Numbers[0];                  TextColorHighlighted.G = (byte)Node.TextColorHighlighted.Numbers[1];                  TextColorHighlighted.B = (byte)Node.TextColorHighlighted.Numbers[2];              }              else              {                  TextColorHighlighted = Result.State.TextColorHighlighted;                  TextColorHighlighted.A = 255;              }
Magic Number,Gonzo.Elements,UIButton,C:\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The following statement contains a magic number: if (Node.TextColorDisabled != null)              {                  TextColorDisabled = new Color();                  TextColorDisabled.A = 255;                  TextColorDisabled.R = (byte)Node.TextColorDisabled.Numbers[0];                  TextColorDisabled.G = (byte)Node.TextColorDisabled.Numbers[1];                  TextColorDisabled.B = (byte)Node.TextColorDisabled.Numbers[2];              }              else              {                  TextColorDisabled = Result.State.TextColorDisabled;                  TextColorDisabled.A = 255;              }
Magic Number,Gonzo.Elements,UIButton,C:\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The following statement contains a magic number: if (Node.TextColorDisabled != null)              {                  TextColorDisabled = new Color();                  TextColorDisabled.A = 255;                  TextColorDisabled.R = (byte)Node.TextColorDisabled.Numbers[0];                  TextColorDisabled.G = (byte)Node.TextColorDisabled.Numbers[1];                  TextColorDisabled.B = (byte)Node.TextColorDisabled.Numbers[2];              }              else              {                  TextColorDisabled = Result.State.TextColorDisabled;                  TextColorDisabled.A = 255;              }
Magic Number,Gonzo.Elements,UIButton,C:\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The following statement contains a magic number: if (Node.TextColorDisabled != null)              {                  TextColorDisabled = new Color();                  TextColorDisabled.A = 255;                  TextColorDisabled.R = (byte)Node.TextColorDisabled.Numbers[0];                  TextColorDisabled.G = (byte)Node.TextColorDisabled.Numbers[1];                  TextColorDisabled.B = (byte)Node.TextColorDisabled.Numbers[2];              }              else              {                  TextColorDisabled = Result.State.TextColorDisabled;                  TextColorDisabled.A = 255;              }
Magic Number,Gonzo.Elements,UIButton,C:\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The following statement contains a magic number: m_SourcePosition = new Vector2((Image.Texture.Width / 4) * 2' 0.0f);
Magic Number,Gonzo.Elements,UIButton,C:\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The following statement contains a magic number: m_SourcePosition = new Vector2((Image.Texture.Width / 4) * 2' 0.0f);
Magic Number,Gonzo.Elements,UIButton,C:\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The following statement contains a magic number: switch (Font)              {                  case 9:                      m_Font = Screen.Font9px;                      break;                  case 10:                      m_Font = Screen.Font10px;                      break;                  case 12:                      m_Font = Screen.Font12px;                      break;                  case 14:                      m_Font = Screen.Font14px;                      break;                  case 16:                      m_Font = Screen.Font16px;                      break;                  default:                      m_Font = Screen.Font12px;                      break;              }
Magic Number,Gonzo.Elements,UIButton,C:\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The following statement contains a magic number: switch (Font)              {                  case 9:                      m_Font = Screen.Font9px;                      break;                  case 10:                      m_Font = Screen.Font10px;                      break;                  case 12:                      m_Font = Screen.Font12px;                      break;                  case 14:                      m_Font = Screen.Font14px;                      break;                  case 16:                      m_Font = Screen.Font16px;                      break;                  default:                      m_Font = Screen.Font12px;                      break;              }
Magic Number,Gonzo.Elements,UIButton,C:\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The following statement contains a magic number: switch (Font)              {                  case 9:                      m_Font = Screen.Font9px;                      break;                  case 10:                      m_Font = Screen.Font10px;                      break;                  case 12:                      m_Font = Screen.Font12px;                      break;                  case 14:                      m_Font = Screen.Font14px;                      break;                  case 16:                      m_Font = Screen.Font16px;                      break;                  default:                      m_Font = Screen.Font12px;                      break;              }
Magic Number,Gonzo.Elements,UIButton,C:\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The following statement contains a magic number: switch (Font)              {                  case 9:                      m_Font = Screen.Font9px;                      break;                  case 10:                      m_Font = Screen.Font10px;                      break;                  case 12:                      m_Font = Screen.Font12px;                      break;                  case 14:                      m_Font = Screen.Font14px;                      break;                  case 16:                      m_Font = Screen.Font16px;                      break;                  default:                      m_Font = Screen.Font12px;                      break;              }
Magic Number,Gonzo.Elements,UIButton,C:\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The following statement contains a magic number: switch (Font)              {                  case 9:                      m_Font = Screen.Font9px;                      break;                  case 10:                      m_Font = Screen.Font10px;                      break;                  case 12:                      m_Font = Screen.Font12px;                      break;                  case 14:                      m_Font = Screen.Font14px;                      break;                  case 16:                      m_Font = Screen.Font16px;                      break;                  default:                      m_Font = Screen.Font12px;                      break;              }
Magic Number,Gonzo.Elements,UIButton,C:\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The following statement contains a magic number: m_Size.X = Image.Texture.Width / 4;
Magic Number,Gonzo.Elements,UIButton,C:\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,ScaleToText,The following statement contains a magic number: float HalfX = m_Size.X / 2;
Magic Number,Gonzo.Elements,UIButton,C:\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,ScaleToText,The following statement contains a magic number: float HalfY = m_Size.Y / 2;
Magic Number,Gonzo.Elements,UIButton,C:\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,ScaleToText,The following statement contains a magic number: m_TextPosition.X += (HalfX * m_XScale) - (m_Font.MeasureString(m_Text).X / 2);
Magic Number,Gonzo.Elements,UIButton,C:\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,ScaleToText,The following statement contains a magic number: m_TextPosition.Y += HalfY - (m_Font.MeasureString(m_Text).Y / 2);
Magic Number,Gonzo.Elements,UIButton,C:\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,AddImage,The following statement contains a magic number: m_Size.X = Image.Texture.Width / 4;
Magic Number,Gonzo.Elements,UIButton,C:\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,AddImage,The following statement contains a magic number: m_SourcePosition = new Vector2((Image.Texture.Width / 4) * 2' 0.0f);
Magic Number,Gonzo.Elements,UIButton,C:\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,AddImage,The following statement contains a magic number: m_SourcePosition = new Vector2((Image.Texture.Width / 4) * 2' 0.0f);
Magic Number,Gonzo.Elements,UIButton,C:\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,Update,The following statement contains a magic number: if(m_IsTextButton)              {                  //Make the text stick to the button if/when button is moved.                  m_TextPosition = Position;                    float HalfX = m_Size.X / 2;                  float HalfY = m_Size.Y / 2;                  m_TextPosition.X += (HalfX * m_XScale) - (m_Font.MeasureString(m_Text).X / 2);                  m_TextPosition.Y += HalfY - (m_Font.MeasureString(m_Text).Y / 2);              }
Magic Number,Gonzo.Elements,UIButton,C:\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,Update,The following statement contains a magic number: if(m_IsTextButton)              {                  //Make the text stick to the button if/when button is moved.                  m_TextPosition = Position;                    float HalfX = m_Size.X / 2;                  float HalfY = m_Size.Y / 2;                  m_TextPosition.X += (HalfX * m_XScale) - (m_Font.MeasureString(m_Text).X / 2);                  m_TextPosition.Y += HalfY - (m_Font.MeasureString(m_Text).Y / 2);              }
Magic Number,Gonzo.Elements,UIButton,C:\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,Update,The following statement contains a magic number: if(m_IsTextButton)              {                  //Make the text stick to the button if/when button is moved.                  m_TextPosition = Position;                    float HalfX = m_Size.X / 2;                  float HalfY = m_Size.Y / 2;                  m_TextPosition.X += (HalfX * m_XScale) - (m_Font.MeasureString(m_Text).X / 2);                  m_TextPosition.Y += HalfY - (m_Font.MeasureString(m_Text).Y / 2);              }
Magic Number,Gonzo.Elements,UIButton,C:\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,Update,The following statement contains a magic number: if(m_IsTextButton)              {                  //Make the text stick to the button if/when button is moved.                  m_TextPosition = Position;                    float HalfX = m_Size.X / 2;                  float HalfY = m_Size.Y / 2;                  m_TextPosition.X += (HalfX * m_XScale) - (m_Font.MeasureString(m_Text).X / 2);                  m_TextPosition.Y += HalfY - (m_Font.MeasureString(m_Text).Y / 2);              }
Magic Number,Gonzo.Elements,UIButton,C:\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,Update,The following statement contains a magic number: if(IsMouseOver(Input) || PixelCheck(Input' (int)m_Size.X))              {                  if (Input.IsNewPress(MouseButtons.LeftButton))                  {                      if (!m_IsButtonClicked && Enabled)                      {                          TextDrawingColor = TextColorHighlighted;                          m_SourcePosition.X += m_Size.X;                            OnButtonClicked?.Invoke(this);                            m_IsButtonClicked = true;                      }                      else if(Enabled == false)                          m_SourcePosition.X = m_Size.X * 3;                  }                  else                  {                      if (m_IsButtonClicked)                      {                          TextDrawingColor = TextColorSelected;                          m_SourcePosition.X -= m_Size.X;                      }                        m_IsButtonClicked = false;                  }                    if (!m_IsMouseHovering && Enabled)                  {                      TextDrawingColor = TextColorSelected;                      m_SourcePosition.X -= m_Size.X;                      m_IsMouseHovering = true;                  }              }              else              {                  if (Enabled)                  {                      TextDrawingColor = TextColor;                      m_SourcePosition.X = (m_Size.X * 2);                      m_IsMouseHovering = false;                  }                  else                      m_SourcePosition.X = (m_Size.X * 3);              }
Magic Number,Gonzo.Elements,UIButton,C:\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,Update,The following statement contains a magic number: if(IsMouseOver(Input) || PixelCheck(Input' (int)m_Size.X))              {                  if (Input.IsNewPress(MouseButtons.LeftButton))                  {                      if (!m_IsButtonClicked && Enabled)                      {                          TextDrawingColor = TextColorHighlighted;                          m_SourcePosition.X += m_Size.X;                            OnButtonClicked?.Invoke(this);                            m_IsButtonClicked = true;                      }                      else if(Enabled == false)                          m_SourcePosition.X = m_Size.X * 3;                  }                  else                  {                      if (m_IsButtonClicked)                      {                          TextDrawingColor = TextColorSelected;                          m_SourcePosition.X -= m_Size.X;                      }                        m_IsButtonClicked = false;                  }                    if (!m_IsMouseHovering && Enabled)                  {                      TextDrawingColor = TextColorSelected;                      m_SourcePosition.X -= m_Size.X;                      m_IsMouseHovering = true;                  }              }              else              {                  if (Enabled)                  {                      TextDrawingColor = TextColor;                      m_SourcePosition.X = (m_Size.X * 2);                      m_IsMouseHovering = false;                  }                  else                      m_SourcePosition.X = (m_Size.X * 3);              }
Magic Number,Gonzo.Elements,UIButton,C:\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,Update,The following statement contains a magic number: if(IsMouseOver(Input) || PixelCheck(Input' (int)m_Size.X))              {                  if (Input.IsNewPress(MouseButtons.LeftButton))                  {                      if (!m_IsButtonClicked && Enabled)                      {                          TextDrawingColor = TextColorHighlighted;                          m_SourcePosition.X += m_Size.X;                            OnButtonClicked?.Invoke(this);                            m_IsButtonClicked = true;                      }                      else if(Enabled == false)                          m_SourcePosition.X = m_Size.X * 3;                  }                  else                  {                      if (m_IsButtonClicked)                      {                          TextDrawingColor = TextColorSelected;                          m_SourcePosition.X -= m_Size.X;                      }                        m_IsButtonClicked = false;                  }                    if (!m_IsMouseHovering && Enabled)                  {                      TextDrawingColor = TextColorSelected;                      m_SourcePosition.X -= m_Size.X;                      m_IsMouseHovering = true;                  }              }              else              {                  if (Enabled)                  {                      TextDrawingColor = TextColor;                      m_SourcePosition.X = (m_Size.X * 2);                      m_IsMouseHovering = false;                  }                  else                      m_SourcePosition.X = (m_Size.X * 3);              }
Magic Number,Gonzo.Elements,UIElement,C:\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIElement.cs,PixelCheck,The following statement contains a magic number: if (pixelPosition.X >= 0 && pixelPosition.X < Width &&                  pixelPosition.Y >= 0 && pixelPosition.Y < Image.Texture.Height)              {                  // Get the Texture Data within the Rectangle coords' in this case a 1 X 1 rectangle                  // Store the data in pixelData Array                  Image.Texture.GetData<uint>(0' new Rectangle((int)pixelPosition.X' (int)pixelPosition.Y'                       (1)' (1))' PixelData' 0' 1);                    // Check if pixel in Array is non Alpha' give or take 20                  if (((PixelData[0] & 0xFF000000) >> 24) > 20)                      return true;              }
Magic Number,Gonzo.Elements,UIElement,C:\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIElement.cs,PixelCheck,The following statement contains a magic number: if (pixelPosition.X >= 0 && pixelPosition.X < Width &&                  pixelPosition.Y >= 0 && pixelPosition.Y < Image.Texture.Height)              {                  // Get the Texture Data within the Rectangle coords' in this case a 1 X 1 rectangle                  // Store the data in pixelData Array                  Image.Texture.GetData<uint>(0' new Rectangle((int)pixelPosition.X' (int)pixelPosition.Y'                       (1)' (1))' PixelData' 0' 1);                    // Check if pixel in Array is non Alpha' give or take 20                  if (((PixelData[0] & 0xFF000000) >> 24) > 20)                      return true;              }
Magic Number,Gonzo.Elements,UILabel,C:\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UILabel.cs,UILabel,The following statement contains a magic number: if (Node.Color != null)              {                  m_TextColor = new Color();                  m_TextColor.A = 255; //Ignore opacity' The Sims Online doesn't support transparent text.                  m_TextColor.R = (byte)Node.Color.Numbers[0];                  m_TextColor.G = (byte)Node.Color.Numbers[1];                  m_TextColor.B = (byte)Node.Color.Numbers[2];              }              else              {                  m_TextColor = Result.State.Color;                  m_TextColor.A = 255; //Ignore opacity' The Sims Online doesn't support transparent text.              }
Magic Number,Gonzo.Elements,UILabel,C:\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UILabel.cs,UILabel,The following statement contains a magic number: if (Node.Color != null)              {                  m_TextColor = new Color();                  m_TextColor.A = 255; //Ignore opacity' The Sims Online doesn't support transparent text.                  m_TextColor.R = (byte)Node.Color.Numbers[0];                  m_TextColor.G = (byte)Node.Color.Numbers[1];                  m_TextColor.B = (byte)Node.Color.Numbers[2];              }              else              {                  m_TextColor = Result.State.Color;                  m_TextColor.A = 255; //Ignore opacity' The Sims Online doesn't support transparent text.              }
Magic Number,Gonzo.Elements,UILabel,C:\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UILabel.cs,UILabel,The following statement contains a magic number: if (Node.Color != null)              {                  m_TextColor = new Color();                  m_TextColor.A = 255; //Ignore opacity' The Sims Online doesn't support transparent text.                  m_TextColor.R = (byte)Node.Color.Numbers[0];                  m_TextColor.G = (byte)Node.Color.Numbers[1];                  m_TextColor.B = (byte)Node.Color.Numbers[2];              }              else              {                  m_TextColor = Result.State.Color;                  m_TextColor.A = 255; //Ignore opacity' The Sims Online doesn't support transparent text.              }
Magic Number,Gonzo.Elements,UILabel,C:\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UILabel.cs,UILabel,The following statement contains a magic number: switch (Font)              {                      case 7:                          m_Font = Screen.Font9px; //TODO: Fixme.                          break;                      case 9:                      m_Font = Screen.Font9px;                          break;                      case 10:                          m_Font = Screen.Font10px;                          break;                      case 11:                          m_Font = Screen.Font11px;                          break;                      case 12:                          m_Font = Screen.Font12px;                          break;                      case 14:                          m_Font = Screen.Font14px;                          break;                      case 16:                          m_Font = Screen.Font16px;                          break;              }
Magic Number,Gonzo.Elements,UILabel,C:\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UILabel.cs,UILabel,The following statement contains a magic number: switch (Font)              {                      case 7:                          m_Font = Screen.Font9px; //TODO: Fixme.                          break;                      case 9:                      m_Font = Screen.Font9px;                          break;                      case 10:                          m_Font = Screen.Font10px;                          break;                      case 11:                          m_Font = Screen.Font11px;                          break;                      case 12:                          m_Font = Screen.Font12px;                          break;                      case 14:                          m_Font = Screen.Font14px;                          break;                      case 16:                          m_Font = Screen.Font16px;                          break;              }
Magic Number,Gonzo.Elements,UILabel,C:\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UILabel.cs,UILabel,The following statement contains a magic number: switch (Font)              {                      case 7:                          m_Font = Screen.Font9px; //TODO: Fixme.                          break;                      case 9:                      m_Font = Screen.Font9px;                          break;                      case 10:                          m_Font = Screen.Font10px;                          break;                      case 11:                          m_Font = Screen.Font11px;                          break;                      case 12:                          m_Font = Screen.Font12px;                          break;                      case 14:                          m_Font = Screen.Font14px;                          break;                      case 16:                          m_Font = Screen.Font16px;                          break;              }
Magic Number,Gonzo.Elements,UILabel,C:\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UILabel.cs,UILabel,The following statement contains a magic number: switch (Font)              {                      case 7:                          m_Font = Screen.Font9px; //TODO: Fixme.                          break;                      case 9:                      m_Font = Screen.Font9px;                          break;                      case 10:                          m_Font = Screen.Font10px;                          break;                      case 11:                          m_Font = Screen.Font11px;                          break;                      case 12:                          m_Font = Screen.Font12px;                          break;                      case 14:                          m_Font = Screen.Font14px;                          break;                      case 16:                          m_Font = Screen.Font16px;                          break;              }
Magic Number,Gonzo.Elements,UILabel,C:\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UILabel.cs,UILabel,The following statement contains a magic number: switch (Font)              {                      case 7:                          m_Font = Screen.Font9px; //TODO: Fixme.                          break;                      case 9:                      m_Font = Screen.Font9px;                          break;                      case 10:                          m_Font = Screen.Font10px;                          break;                      case 11:                          m_Font = Screen.Font11px;                          break;                      case 12:                          m_Font = Screen.Font12px;                          break;                      case 14:                          m_Font = Screen.Font14px;                          break;                      case 16:                          m_Font = Screen.Font16px;                          break;              }
Magic Number,Gonzo.Elements,UILabel,C:\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UILabel.cs,UILabel,The following statement contains a magic number: switch (Font)              {                      case 7:                          m_Font = Screen.Font9px; //TODO: Fixme.                          break;                      case 9:                      m_Font = Screen.Font9px;                          break;                      case 10:                          m_Font = Screen.Font10px;                          break;                      case 11:                          m_Font = Screen.Font11px;                          break;                      case 12:                          m_Font = Screen.Font12px;                          break;                      case 14:                          m_Font = Screen.Font14px;                          break;                      case 16:                          m_Font = Screen.Font16px;                          break;              }
Magic Number,Gonzo.Elements,UILabel,C:\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UILabel.cs,UILabel,The following statement contains a magic number: switch (Font)              {                      case 7:                          m_Font = Screen.Font9px; //TODO: Fixme.                          break;                      case 9:                      m_Font = Screen.Font9px;                          break;                      case 10:                          m_Font = Screen.Font10px;                          break;                      case 11:                          m_Font = Screen.Font11px;                          break;                      case 12:                          m_Font = Screen.Font12px;                          break;                      case 14:                          m_Font = Screen.Font14px;                          break;                      case 16:                          m_Font = Screen.Font16px;                          break;              }
Magic Number,Gonzo.Elements,UILabel,C:\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UILabel.cs,UILabel,The following statement contains a magic number: m_TextColor.A = 255;
Magic Number,Gonzo.Elements,UILabel,C:\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UILabel.cs,UILabel,The following statement contains a magic number: switch (Font)              {                  case 7:                      m_Font = Screen.Font9px; //TODO: Fixme.                      break;                  case 9:                      m_Font = Screen.Font9px;                      break;                  case 10:                      m_Font = Screen.Font10px;                      break;                  case 11:                      m_Font = Screen.Font11px;                      break;                  case 12:                      m_Font = Screen.Font12px;                      break;                  case 14:                      m_Font = Screen.Font14px;                      break;                  case 16:                      m_Font = Screen.Font16px;                      break;              }
Magic Number,Gonzo.Elements,UILabel,C:\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UILabel.cs,UILabel,The following statement contains a magic number: switch (Font)              {                  case 7:                      m_Font = Screen.Font9px; //TODO: Fixme.                      break;                  case 9:                      m_Font = Screen.Font9px;                      break;                  case 10:                      m_Font = Screen.Font10px;                      break;                  case 11:                      m_Font = Screen.Font11px;                      break;                  case 12:                      m_Font = Screen.Font12px;                      break;                  case 14:                      m_Font = Screen.Font14px;                      break;                  case 16:                      m_Font = Screen.Font16px;                      break;              }
Magic Number,Gonzo.Elements,UILabel,C:\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UILabel.cs,UILabel,The following statement contains a magic number: switch (Font)              {                  case 7:                      m_Font = Screen.Font9px; //TODO: Fixme.                      break;                  case 9:                      m_Font = Screen.Font9px;                      break;                  case 10:                      m_Font = Screen.Font10px;                      break;                  case 11:                      m_Font = Screen.Font11px;                      break;                  case 12:                      m_Font = Screen.Font12px;                      break;                  case 14:                      m_Font = Screen.Font14px;                      break;                  case 16:                      m_Font = Screen.Font16px;                      break;              }
Magic Number,Gonzo.Elements,UILabel,C:\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UILabel.cs,UILabel,The following statement contains a magic number: switch (Font)              {                  case 7:                      m_Font = Screen.Font9px; //TODO: Fixme.                      break;                  case 9:                      m_Font = Screen.Font9px;                      break;                  case 10:                      m_Font = Screen.Font10px;                      break;                  case 11:                      m_Font = Screen.Font11px;                      break;                  case 12:                      m_Font = Screen.Font12px;                      break;                  case 14:                      m_Font = Screen.Font14px;                      break;                  case 16:                      m_Font = Screen.Font16px;                      break;              }
Magic Number,Gonzo.Elements,UILabel,C:\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UILabel.cs,UILabel,The following statement contains a magic number: switch (Font)              {                  case 7:                      m_Font = Screen.Font9px; //TODO: Fixme.                      break;                  case 9:                      m_Font = Screen.Font9px;                      break;                  case 10:                      m_Font = Screen.Font10px;                      break;                  case 11:                      m_Font = Screen.Font11px;                      break;                  case 12:                      m_Font = Screen.Font12px;                      break;                  case 14:                      m_Font = Screen.Font14px;                      break;                  case 16:                      m_Font = Screen.Font16px;                      break;              }
Magic Number,Gonzo.Elements,UILabel,C:\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UILabel.cs,UILabel,The following statement contains a magic number: switch (Font)              {                  case 7:                      m_Font = Screen.Font9px; //TODO: Fixme.                      break;                  case 9:                      m_Font = Screen.Font9px;                      break;                  case 10:                      m_Font = Screen.Font10px;                      break;                  case 11:                      m_Font = Screen.Font11px;                      break;                  case 12:                      m_Font = Screen.Font12px;                      break;                  case 14:                      m_Font = Screen.Font14px;                      break;                  case 16:                      m_Font = Screen.Font16px;                      break;              }
Magic Number,Gonzo.Elements,UILabel,C:\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UILabel.cs,UILabel,The following statement contains a magic number: switch (Font)              {                  case 7:                      m_Font = Screen.Font9px; //TODO: Fixme.                      break;                  case 9:                      m_Font = Screen.Font9px;                      break;                  case 10:                      m_Font = Screen.Font10px;                      break;                  case 11:                      m_Font = Screen.Font11px;                      break;                  case 12:                      m_Font = Screen.Font12px;                      break;                  case 14:                      m_Font = Screen.Font14px;                      break;                  case 16:                      m_Font = Screen.Font16px;                      break;              }
Magic Number,Gonzo.Elements,UILabel,C:\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UILabel.cs,AlignText,The following statement contains a magic number: switch (m_Alignment)              {                  case TextAlignment.Left_Top:                      //Is there a need to modify position at all here??                      break;                  case TextAlignment.Left_Center:                      LocalCopy.Y += (m_Size.Y / 2) - (Measurement.Y / 2);                      Position = LocalCopy;                      break;                  case TextAlignment.Center_Top:                      LocalCopy.X += (m_Size.X / 2) - (Measurement.X / 2);                      Position = LocalCopy;                      break;                  case TextAlignment.Center_Center:                      LocalCopy.X += (m_Size.X / 2) - (Measurement.X / 2);                      LocalCopy.Y += (m_Size.Y / 2) - (Measurement.Y / 2);                      Position = LocalCopy;                      break;                  case TextAlignment.Right_Top:                      LocalCopy.X += m_Size.X - Measurement.X;                      Position = LocalCopy;                      break;                  case TextAlignment.Right_Center:                      LocalCopy.X += m_Size.X - Measurement.X;                      LocalCopy.Y += (m_Size.Y / 2) - (Measurement.Y / 2);                      Position = LocalCopy;                      break;              }
Magic Number,Gonzo.Elements,UILabel,C:\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UILabel.cs,AlignText,The following statement contains a magic number: switch (m_Alignment)              {                  case TextAlignment.Left_Top:                      //Is there a need to modify position at all here??                      break;                  case TextAlignment.Left_Center:                      LocalCopy.Y += (m_Size.Y / 2) - (Measurement.Y / 2);                      Position = LocalCopy;                      break;                  case TextAlignment.Center_Top:                      LocalCopy.X += (m_Size.X / 2) - (Measurement.X / 2);                      Position = LocalCopy;                      break;                  case TextAlignment.Center_Center:                      LocalCopy.X += (m_Size.X / 2) - (Measurement.X / 2);                      LocalCopy.Y += (m_Size.Y / 2) - (Measurement.Y / 2);                      Position = LocalCopy;                      break;                  case TextAlignment.Right_Top:                      LocalCopy.X += m_Size.X - Measurement.X;                      Position = LocalCopy;                      break;                  case TextAlignment.Right_Center:                      LocalCopy.X += m_Size.X - Measurement.X;                      LocalCopy.Y += (m_Size.Y / 2) - (Measurement.Y / 2);                      Position = LocalCopy;                      break;              }
Magic Number,Gonzo.Elements,UILabel,C:\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UILabel.cs,AlignText,The following statement contains a magic number: switch (m_Alignment)              {                  case TextAlignment.Left_Top:                      //Is there a need to modify position at all here??                      break;                  case TextAlignment.Left_Center:                      LocalCopy.Y += (m_Size.Y / 2) - (Measurement.Y / 2);                      Position = LocalCopy;                      break;                  case TextAlignment.Center_Top:                      LocalCopy.X += (m_Size.X / 2) - (Measurement.X / 2);                      Position = LocalCopy;                      break;                  case TextAlignment.Center_Center:                      LocalCopy.X += (m_Size.X / 2) - (Measurement.X / 2);                      LocalCopy.Y += (m_Size.Y / 2) - (Measurement.Y / 2);                      Position = LocalCopy;                      break;                  case TextAlignment.Right_Top:                      LocalCopy.X += m_Size.X - Measurement.X;                      Position = LocalCopy;                      break;                  case TextAlignment.Right_Center:                      LocalCopy.X += m_Size.X - Measurement.X;                      LocalCopy.Y += (m_Size.Y / 2) - (Measurement.Y / 2);                      Position = LocalCopy;                      break;              }
Magic Number,Gonzo.Elements,UILabel,C:\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UILabel.cs,AlignText,The following statement contains a magic number: switch (m_Alignment)              {                  case TextAlignment.Left_Top:                      //Is there a need to modify position at all here??                      break;                  case TextAlignment.Left_Center:                      LocalCopy.Y += (m_Size.Y / 2) - (Measurement.Y / 2);                      Position = LocalCopy;                      break;                  case TextAlignment.Center_Top:                      LocalCopy.X += (m_Size.X / 2) - (Measurement.X / 2);                      Position = LocalCopy;                      break;                  case TextAlignment.Center_Center:                      LocalCopy.X += (m_Size.X / 2) - (Measurement.X / 2);                      LocalCopy.Y += (m_Size.Y / 2) - (Measurement.Y / 2);                      Position = LocalCopy;                      break;                  case TextAlignment.Right_Top:                      LocalCopy.X += m_Size.X - Measurement.X;                      Position = LocalCopy;                      break;                  case TextAlignment.Right_Center:                      LocalCopy.X += m_Size.X - Measurement.X;                      LocalCopy.Y += (m_Size.Y / 2) - (Measurement.Y / 2);                      Position = LocalCopy;                      break;              }
Magic Number,Gonzo.Elements,UILabel,C:\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UILabel.cs,AlignText,The following statement contains a magic number: switch (m_Alignment)              {                  case TextAlignment.Left_Top:                      //Is there a need to modify position at all here??                      break;                  case TextAlignment.Left_Center:                      LocalCopy.Y += (m_Size.Y / 2) - (Measurement.Y / 2);                      Position = LocalCopy;                      break;                  case TextAlignment.Center_Top:                      LocalCopy.X += (m_Size.X / 2) - (Measurement.X / 2);                      Position = LocalCopy;                      break;                  case TextAlignment.Center_Center:                      LocalCopy.X += (m_Size.X / 2) - (Measurement.X / 2);                      LocalCopy.Y += (m_Size.Y / 2) - (Measurement.Y / 2);                      Position = LocalCopy;                      break;                  case TextAlignment.Right_Top:                      LocalCopy.X += m_Size.X - Measurement.X;                      Position = LocalCopy;                      break;                  case TextAlignment.Right_Center:                      LocalCopy.X += m_Size.X - Measurement.X;                      LocalCopy.Y += (m_Size.Y / 2) - (Measurement.Y / 2);                      Position = LocalCopy;                      break;              }
Magic Number,Gonzo.Elements,UILabel,C:\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UILabel.cs,AlignText,The following statement contains a magic number: switch (m_Alignment)              {                  case TextAlignment.Left_Top:                      //Is there a need to modify position at all here??                      break;                  case TextAlignment.Left_Center:                      LocalCopy.Y += (m_Size.Y / 2) - (Measurement.Y / 2);                      Position = LocalCopy;                      break;                  case TextAlignment.Center_Top:                      LocalCopy.X += (m_Size.X / 2) - (Measurement.X / 2);                      Position = LocalCopy;                      break;                  case TextAlignment.Center_Center:                      LocalCopy.X += (m_Size.X / 2) - (Measurement.X / 2);                      LocalCopy.Y += (m_Size.Y / 2) - (Measurement.Y / 2);                      Position = LocalCopy;                      break;                  case TextAlignment.Right_Top:                      LocalCopy.X += m_Size.X - Measurement.X;                      Position = LocalCopy;                      break;                  case TextAlignment.Right_Center:                      LocalCopy.X += m_Size.X - Measurement.X;                      LocalCopy.Y += (m_Size.Y / 2) - (Measurement.Y / 2);                      Position = LocalCopy;                      break;              }
Magic Number,Gonzo.Elements,UILabel,C:\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UILabel.cs,AlignText,The following statement contains a magic number: switch (m_Alignment)              {                  case TextAlignment.Left_Top:                      //Is there a need to modify position at all here??                      break;                  case TextAlignment.Left_Center:                      LocalCopy.Y += (m_Size.Y / 2) - (Measurement.Y / 2);                      Position = LocalCopy;                      break;                  case TextAlignment.Center_Top:                      LocalCopy.X += (m_Size.X / 2) - (Measurement.X / 2);                      Position = LocalCopy;                      break;                  case TextAlignment.Center_Center:                      LocalCopy.X += (m_Size.X / 2) - (Measurement.X / 2);                      LocalCopy.Y += (m_Size.Y / 2) - (Measurement.Y / 2);                      Position = LocalCopy;                      break;                  case TextAlignment.Right_Top:                      LocalCopy.X += m_Size.X - Measurement.X;                      Position = LocalCopy;                      break;                  case TextAlignment.Right_Center:                      LocalCopy.X += m_Size.X - Measurement.X;                      LocalCopy.Y += (m_Size.Y / 2) - (Measurement.Y / 2);                      Position = LocalCopy;                      break;              }
Magic Number,Gonzo.Elements,UILabel,C:\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UILabel.cs,AlignText,The following statement contains a magic number: switch (m_Alignment)              {                  case TextAlignment.Left_Top:                      //Is there a need to modify position at all here??                      break;                  case TextAlignment.Left_Center:                      LocalCopy.Y += (m_Size.Y / 2) - (Measurement.Y / 2);                      Position = LocalCopy;                      break;                  case TextAlignment.Center_Top:                      LocalCopy.X += (m_Size.X / 2) - (Measurement.X / 2);                      Position = LocalCopy;                      break;                  case TextAlignment.Center_Center:                      LocalCopy.X += (m_Size.X / 2) - (Measurement.X / 2);                      LocalCopy.Y += (m_Size.Y / 2) - (Measurement.Y / 2);                      Position = LocalCopy;                      break;                  case TextAlignment.Right_Top:                      LocalCopy.X += m_Size.X - Measurement.X;                      Position = LocalCopy;                      break;                  case TextAlignment.Right_Center:                      LocalCopy.X += m_Size.X - Measurement.X;                      LocalCopy.Y += (m_Size.Y / 2) - (Measurement.Y / 2);                      Position = LocalCopy;                      break;              }
Magic Number,Gonzo.Elements,UILabel,C:\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UILabel.cs,AlignText,The following statement contains a magic number: switch (m_Alignment)              {                  case TextAlignment.Left_Top:                      //Is there a need to modify position at all here??                      break;                  case TextAlignment.Left_Center:                      LocalCopy.Y += (m_Size.Y / 2) - (Measurement.Y / 2);                      Position = LocalCopy;                      break;                  case TextAlignment.Center_Top:                      LocalCopy.X += (m_Size.X / 2) - (Measurement.X / 2);                      Position = LocalCopy;                      break;                  case TextAlignment.Center_Center:                      LocalCopy.X += (m_Size.X / 2) - (Measurement.X / 2);                      LocalCopy.Y += (m_Size.Y / 2) - (Measurement.Y / 2);                      Position = LocalCopy;                      break;                  case TextAlignment.Right_Top:                      LocalCopy.X += m_Size.X - Measurement.X;                      Position = LocalCopy;                      break;                  case TextAlignment.Right_Center:                      LocalCopy.X += m_Size.X - Measurement.X;                      LocalCopy.Y += (m_Size.Y / 2) - (Measurement.Y / 2);                      Position = LocalCopy;                      break;              }
Magic Number,Gonzo.Elements,UILabel,C:\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UILabel.cs,AlignText,The following statement contains a magic number: switch (m_Alignment)              {                  case TextAlignment.Left_Top:                      //Is there a need to modify position at all here??                      break;                  case TextAlignment.Left_Center:                      LocalCopy.Y += (m_Size.Y / 2) - (Measurement.Y / 2);                      Position = LocalCopy;                      break;                  case TextAlignment.Center_Top:                      LocalCopy.X += (m_Size.X / 2) - (Measurement.X / 2);                      Position = LocalCopy;                      break;                  case TextAlignment.Center_Center:                      LocalCopy.X += (m_Size.X / 2) - (Measurement.X / 2);                      LocalCopy.Y += (m_Size.Y / 2) - (Measurement.Y / 2);                      Position = LocalCopy;                      break;                  case TextAlignment.Right_Top:                      LocalCopy.X += m_Size.X - Measurement.X;                      Position = LocalCopy;                      break;                  case TextAlignment.Right_Center:                      LocalCopy.X += m_Size.X - Measurement.X;                      LocalCopy.Y += (m_Size.Y / 2) - (Measurement.Y / 2);                      Position = LocalCopy;                      break;              }
Magic Number,Gonzo.Elements,UITextEdit,C:\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UITextEdit.cs,UITextEdit,The following statement contains a magic number: switch (Font)              {                  case 9:                      m_Font = Screen.Font9px;                      break;                  case 10:                      m_Font = Screen.Font10px;                      break;                  case 12:                      m_Font = Screen.Font12px;                      break;                  case 14:                      m_Font = Screen.Font14px;                      break;                  case 16:                      m_Font = Screen.Font16px;                      break;              }
Magic Number,Gonzo.Elements,UITextEdit,C:\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UITextEdit.cs,UITextEdit,The following statement contains a magic number: switch (Font)              {                  case 9:                      m_Font = Screen.Font9px;                      break;                  case 10:                      m_Font = Screen.Font10px;                      break;                  case 12:                      m_Font = Screen.Font12px;                      break;                  case 14:                      m_Font = Screen.Font14px;                      break;                  case 16:                      m_Font = Screen.Font16px;                      break;              }
Magic Number,Gonzo.Elements,UITextEdit,C:\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UITextEdit.cs,UITextEdit,The following statement contains a magic number: switch (Font)              {                  case 9:                      m_Font = Screen.Font9px;                      break;                  case 10:                      m_Font = Screen.Font10px;                      break;                  case 12:                      m_Font = Screen.Font12px;                      break;                  case 14:                      m_Font = Screen.Font14px;                      break;                  case 16:                      m_Font = Screen.Font16px;                      break;              }
Magic Number,Gonzo.Elements,UITextEdit,C:\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UITextEdit.cs,UITextEdit,The following statement contains a magic number: switch (Font)              {                  case 9:                      m_Font = Screen.Font9px;                      break;                  case 10:                      m_Font = Screen.Font10px;                      break;                  case 12:                      m_Font = Screen.Font12px;                      break;                  case 14:                      m_Font = Screen.Font14px;                      break;                  case 16:                      m_Font = Screen.Font16px;                      break;              }
Magic Number,Gonzo.Elements,UITextEdit,C:\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UITextEdit.cs,UITextEdit,The following statement contains a magic number: switch (Font)              {                  case 9:                      m_Font = Screen.Font9px;                      break;                  case 10:                      m_Font = Screen.Font10px;                      break;                  case 12:                      m_Font = Screen.Font12px;                      break;                  case 14:                      m_Font = Screen.Font14px;                      break;                  case 16:                      m_Font = Screen.Font16px;                      break;              }
Magic Number,Gonzo.Elements,UITextEdit,C:\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UITextEdit.cs,UITextEdit,The following statement contains a magic number: if (DrawBackground)              {                  Image = new UIImage(FileManager.GetTexture((ulong)FileIDs.UIFileIDs.dialog_textboxbackground)' m_Screen);                    if (Position != null)                      Image.Position = Position;                    Image.Slicer = new NineSlicer(new Vector2(0' 0)' (int)Image.Texture.Width' (int)Image.Texture.Width' 15' 15' 15' 15);                  Image.SetSize((int)Size.X' (int)Size.Y);              }
Magic Number,Gonzo.Elements,UITextEdit,C:\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UITextEdit.cs,UITextEdit,The following statement contains a magic number: if (DrawBackground)              {                  Image = new UIImage(FileManager.GetTexture((ulong)FileIDs.UIFileIDs.dialog_textboxbackground)' m_Screen);                    if (Position != null)                      Image.Position = Position;                    Image.Slicer = new NineSlicer(new Vector2(0' 0)' (int)Image.Texture.Width' (int)Image.Texture.Width' 15' 15' 15' 15);                  Image.SetSize((int)Size.X' (int)Size.Y);              }
Magic Number,Gonzo.Elements,UITextEdit,C:\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UITextEdit.cs,UITextEdit,The following statement contains a magic number: if (DrawBackground)              {                  Image = new UIImage(FileManager.GetTexture((ulong)FileIDs.UIFileIDs.dialog_textboxbackground)' m_Screen);                    if (Position != null)                      Image.Position = Position;                    Image.Slicer = new NineSlicer(new Vector2(0' 0)' (int)Image.Texture.Width' (int)Image.Texture.Width' 15' 15' 15' 15);                  Image.SetSize((int)Size.X' (int)Size.Y);              }
Magic Number,Gonzo.Elements,UITextEdit,C:\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UITextEdit.cs,UITextEdit,The following statement contains a magic number: if (DrawBackground)              {                  Image = new UIImage(FileManager.GetTexture((ulong)FileIDs.UIFileIDs.dialog_textboxbackground)' m_Screen);                    if (Position != null)                      Image.Position = Position;                    Image.Slicer = new NineSlicer(new Vector2(0' 0)' (int)Image.Texture.Width' (int)Image.Texture.Width' 15' 15' 15' 15);                  Image.SetSize((int)Size.X' (int)Size.Y);              }
Magic Number,Gonzo.Elements,UITextEdit,C:\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UITextEdit.cs,UITextEdit,The following statement contains a magic number: if (!State.InSharedPropertiesGroup)              {                  if (Node.TextEditPosition.Numbers.Count > 0)                  {                      Position = new Vector2(Node.TextEditPosition.Numbers[0]' Node.TextEditPosition.Numbers[1]) + Screen.Position;                      m_TextPosition = Position;                  }                    if (State.InSharedPropertiesGroup)                      m_Size = State.Size;                  else                  {                      m_Size = new Vector2();                      m_Size.X = Node.Size.Numbers[0];                      m_Size.Y = Node.Size.Numbers[1];                  }                    if (Node.Tooltip != "")                      Tooltip = m_Screen.GetString(Node.Tooltip);                    Transparent = (Node.Transparent == 1) ? true : false;                    if (Node.Lines != null)                      m_NumLines = (int)Node.Lines;                    if (Node.Capacity != null)                      m_MaxChars = (int)Node.Capacity;                    if (Node.Alignment != null)                      m_Alignment = (TextEditAlignment)Node.Alignment;                    if (Node.FlashOnEmpty != null)                      m_FlashOnEmpty = (Node.FlashOnEmpty == 1) ? true : false;                    if (Node.FrameOnFocus != null)                      m_FrameOnFocus = (Node.FrameOnFocus == 1) ? true : false;                    if (State.InSharedPropertiesGroup)                      TextColor = State.Color;                  else                      TextColor = new Color(Node.Color.Numbers[0]' Node.Color.Numbers[1]' Node.Color.Numbers[2]);                    if (Node.BackColor != null)                      m_BackColor = new Color(Node.Color.Numbers[0]' Node.Color.Numbers[1]' Node.Color.Numbers[2]);                  else                      m_BackColor = new Color(57' 81' 110' 255);                    if (Node.Mode != null)                      m_Mode = (Node.Mode == "kReadOnly") ? TextEditMode.ReadOnly : TextEditMode.Insert;                    if (Node.ScrollbarImage != string.Empty)                      m_ScrollbarImage = m_Screen.GetImage(Node.ScrollbarImage).Image.Texture;                    if (Node.ScrollbarGutter != null)                      m_ScrollbarWidth = (int)Node.ScrollbarGutter;                    if (Node.ScrollbarType != null)                      m_ScrollbarType = (ScrollbarType)Node.ScrollbarType;                    if (Node.ResizeForExactLineHeight != null)                      m_ResizeForExactLineHeight = (Node.ResizeForExactLineHeight == 1) ? true : false;                    if (Node.EnableIME != null)                      m_EnableInputModeEditing = (Node.EnableIME == 1) ? true : false;                    if (Node.CursorColor != null)                      m_CursorColor = new Color(Node.CursorColor.Numbers[0]' Node.CursorColor.Numbers[1]' Node.CursorColor.Numbers[2]);                    if (Node.FrameColor != null)                      m_FrameColor = new Color(Node.FrameColor.Numbers[0]' Node.FrameColor.Numbers[1]' Node.FrameColor.Numbers[2]);              }              else              {                  if (State.BackColor != null)                      m_BackColor = State.BackColor;                  if (State.Color != null)                      TextColor = State.Color;                  if (State.CursorColor != null)                      m_CursorColor = State.CursorColor;                  if (State.Position != null)                  {                      Position = new Vector2(State.Position[0]' State.Position[1]) + Screen.Position;                      m_TextPosition = Position;                  }                  if (State.Tooltip != "")                      Tooltip = State.Tooltip;              }
Magic Number,Gonzo.Elements,UITextEdit,C:\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UITextEdit.cs,UITextEdit,The following statement contains a magic number: if (!State.InSharedPropertiesGroup)              {                  if (Node.TextEditPosition.Numbers.Count > 0)                  {                      Position = new Vector2(Node.TextEditPosition.Numbers[0]' Node.TextEditPosition.Numbers[1]) + Screen.Position;                      m_TextPosition = Position;                  }                    if (State.InSharedPropertiesGroup)                      m_Size = State.Size;                  else                  {                      m_Size = new Vector2();                      m_Size.X = Node.Size.Numbers[0];                      m_Size.Y = Node.Size.Numbers[1];                  }                    if (Node.Tooltip != "")                      Tooltip = m_Screen.GetString(Node.Tooltip);                    Transparent = (Node.Transparent == 1) ? true : false;                    if (Node.Lines != null)                      m_NumLines = (int)Node.Lines;                    if (Node.Capacity != null)                      m_MaxChars = (int)Node.Capacity;                    if (Node.Alignment != null)                      m_Alignment = (TextEditAlignment)Node.Alignment;                    if (Node.FlashOnEmpty != null)                      m_FlashOnEmpty = (Node.FlashOnEmpty == 1) ? true : false;                    if (Node.FrameOnFocus != null)                      m_FrameOnFocus = (Node.FrameOnFocus == 1) ? true : false;                    if (State.InSharedPropertiesGroup)                      TextColor = State.Color;                  else                      TextColor = new Color(Node.Color.Numbers[0]' Node.Color.Numbers[1]' Node.Color.Numbers[2]);                    if (Node.BackColor != null)                      m_BackColor = new Color(Node.Color.Numbers[0]' Node.Color.Numbers[1]' Node.Color.Numbers[2]);                  else                      m_BackColor = new Color(57' 81' 110' 255);                    if (Node.Mode != null)                      m_Mode = (Node.Mode == "kReadOnly") ? TextEditMode.ReadOnly : TextEditMode.Insert;                    if (Node.ScrollbarImage != string.Empty)                      m_ScrollbarImage = m_Screen.GetImage(Node.ScrollbarImage).Image.Texture;                    if (Node.ScrollbarGutter != null)                      m_ScrollbarWidth = (int)Node.ScrollbarGutter;                    if (Node.ScrollbarType != null)                      m_ScrollbarType = (ScrollbarType)Node.ScrollbarType;                    if (Node.ResizeForExactLineHeight != null)                      m_ResizeForExactLineHeight = (Node.ResizeForExactLineHeight == 1) ? true : false;                    if (Node.EnableIME != null)                      m_EnableInputModeEditing = (Node.EnableIME == 1) ? true : false;                    if (Node.CursorColor != null)                      m_CursorColor = new Color(Node.CursorColor.Numbers[0]' Node.CursorColor.Numbers[1]' Node.CursorColor.Numbers[2]);                    if (Node.FrameColor != null)                      m_FrameColor = new Color(Node.FrameColor.Numbers[0]' Node.FrameColor.Numbers[1]' Node.FrameColor.Numbers[2]);              }              else              {                  if (State.BackColor != null)                      m_BackColor = State.BackColor;                  if (State.Color != null)                      TextColor = State.Color;                  if (State.CursorColor != null)                      m_CursorColor = State.CursorColor;                  if (State.Position != null)                  {                      Position = new Vector2(State.Position[0]' State.Position[1]) + Screen.Position;                      m_TextPosition = Position;                  }                  if (State.Tooltip != "")                      Tooltip = State.Tooltip;              }
Magic Number,Gonzo.Elements,UITextEdit,C:\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UITextEdit.cs,UITextEdit,The following statement contains a magic number: if (!State.InSharedPropertiesGroup)              {                  if (Node.TextEditPosition.Numbers.Count > 0)                  {                      Position = new Vector2(Node.TextEditPosition.Numbers[0]' Node.TextEditPosition.Numbers[1]) + Screen.Position;                      m_TextPosition = Position;                  }                    if (State.InSharedPropertiesGroup)                      m_Size = State.Size;                  else                  {                      m_Size = new Vector2();                      m_Size.X = Node.Size.Numbers[0];                      m_Size.Y = Node.Size.Numbers[1];                  }                    if (Node.Tooltip != "")                      Tooltip = m_Screen.GetString(Node.Tooltip);                    Transparent = (Node.Transparent == 1) ? true : false;                    if (Node.Lines != null)                      m_NumLines = (int)Node.Lines;                    if (Node.Capacity != null)                      m_MaxChars = (int)Node.Capacity;                    if (Node.Alignment != null)                      m_Alignment = (TextEditAlignment)Node.Alignment;                    if (Node.FlashOnEmpty != null)                      m_FlashOnEmpty = (Node.FlashOnEmpty == 1) ? true : false;                    if (Node.FrameOnFocus != null)                      m_FrameOnFocus = (Node.FrameOnFocus == 1) ? true : false;                    if (State.InSharedPropertiesGroup)                      TextColor = State.Color;                  else                      TextColor = new Color(Node.Color.Numbers[0]' Node.Color.Numbers[1]' Node.Color.Numbers[2]);                    if (Node.BackColor != null)                      m_BackColor = new Color(Node.Color.Numbers[0]' Node.Color.Numbers[1]' Node.Color.Numbers[2]);                  else                      m_BackColor = new Color(57' 81' 110' 255);                    if (Node.Mode != null)                      m_Mode = (Node.Mode == "kReadOnly") ? TextEditMode.ReadOnly : TextEditMode.Insert;                    if (Node.ScrollbarImage != string.Empty)                      m_ScrollbarImage = m_Screen.GetImage(Node.ScrollbarImage).Image.Texture;                    if (Node.ScrollbarGutter != null)                      m_ScrollbarWidth = (int)Node.ScrollbarGutter;                    if (Node.ScrollbarType != null)                      m_ScrollbarType = (ScrollbarType)Node.ScrollbarType;                    if (Node.ResizeForExactLineHeight != null)                      m_ResizeForExactLineHeight = (Node.ResizeForExactLineHeight == 1) ? true : false;                    if (Node.EnableIME != null)                      m_EnableInputModeEditing = (Node.EnableIME == 1) ? true : false;                    if (Node.CursorColor != null)                      m_CursorColor = new Color(Node.CursorColor.Numbers[0]' Node.CursorColor.Numbers[1]' Node.CursorColor.Numbers[2]);                    if (Node.FrameColor != null)                      m_FrameColor = new Color(Node.FrameColor.Numbers[0]' Node.FrameColor.Numbers[1]' Node.FrameColor.Numbers[2]);              }              else              {                  if (State.BackColor != null)                      m_BackColor = State.BackColor;                  if (State.Color != null)                      TextColor = State.Color;                  if (State.CursorColor != null)                      m_CursorColor = State.CursorColor;                  if (State.Position != null)                  {                      Position = new Vector2(State.Position[0]' State.Position[1]) + Screen.Position;                      m_TextPosition = Position;                  }                  if (State.Tooltip != "")                      Tooltip = State.Tooltip;              }
Magic Number,Gonzo.Elements,UITextEdit,C:\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UITextEdit.cs,UITextEdit,The following statement contains a magic number: if (!State.InSharedPropertiesGroup)              {                  if (Node.TextEditPosition.Numbers.Count > 0)                  {                      Position = new Vector2(Node.TextEditPosition.Numbers[0]' Node.TextEditPosition.Numbers[1]) + Screen.Position;                      m_TextPosition = Position;                  }                    if (State.InSharedPropertiesGroup)                      m_Size = State.Size;                  else                  {                      m_Size = new Vector2();                      m_Size.X = Node.Size.Numbers[0];                      m_Size.Y = Node.Size.Numbers[1];                  }                    if (Node.Tooltip != "")                      Tooltip = m_Screen.GetString(Node.Tooltip);                    Transparent = (Node.Transparent == 1) ? true : false;                    if (Node.Lines != null)                      m_NumLines = (int)Node.Lines;                    if (Node.Capacity != null)                      m_MaxChars = (int)Node.Capacity;                    if (Node.Alignment != null)                      m_Alignment = (TextEditAlignment)Node.Alignment;                    if (Node.FlashOnEmpty != null)                      m_FlashOnEmpty = (Node.FlashOnEmpty == 1) ? true : false;                    if (Node.FrameOnFocus != null)                      m_FrameOnFocus = (Node.FrameOnFocus == 1) ? true : false;                    if (State.InSharedPropertiesGroup)                      TextColor = State.Color;                  else                      TextColor = new Color(Node.Color.Numbers[0]' Node.Color.Numbers[1]' Node.Color.Numbers[2]);                    if (Node.BackColor != null)                      m_BackColor = new Color(Node.Color.Numbers[0]' Node.Color.Numbers[1]' Node.Color.Numbers[2]);                  else                      m_BackColor = new Color(57' 81' 110' 255);                    if (Node.Mode != null)                      m_Mode = (Node.Mode == "kReadOnly") ? TextEditMode.ReadOnly : TextEditMode.Insert;                    if (Node.ScrollbarImage != string.Empty)                      m_ScrollbarImage = m_Screen.GetImage(Node.ScrollbarImage).Image.Texture;                    if (Node.ScrollbarGutter != null)                      m_ScrollbarWidth = (int)Node.ScrollbarGutter;                    if (Node.ScrollbarType != null)                      m_ScrollbarType = (ScrollbarType)Node.ScrollbarType;                    if (Node.ResizeForExactLineHeight != null)                      m_ResizeForExactLineHeight = (Node.ResizeForExactLineHeight == 1) ? true : false;                    if (Node.EnableIME != null)                      m_EnableInputModeEditing = (Node.EnableIME == 1) ? true : false;                    if (Node.CursorColor != null)                      m_CursorColor = new Color(Node.CursorColor.Numbers[0]' Node.CursorColor.Numbers[1]' Node.CursorColor.Numbers[2]);                    if (Node.FrameColor != null)                      m_FrameColor = new Color(Node.FrameColor.Numbers[0]' Node.FrameColor.Numbers[1]' Node.FrameColor.Numbers[2]);              }              else              {                  if (State.BackColor != null)                      m_BackColor = State.BackColor;                  if (State.Color != null)                      TextColor = State.Color;                  if (State.CursorColor != null)                      m_CursorColor = State.CursorColor;                  if (State.Position != null)                  {                      Position = new Vector2(State.Position[0]' State.Position[1]) + Screen.Position;                      m_TextPosition = Position;                  }                  if (State.Tooltip != "")                      Tooltip = State.Tooltip;              }
Magic Number,Gonzo.Elements,UITextEdit,C:\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UITextEdit.cs,UITextEdit,The following statement contains a magic number: if (!State.InSharedPropertiesGroup)              {                  if (Node.TextEditPosition.Numbers.Count > 0)                  {                      Position = new Vector2(Node.TextEditPosition.Numbers[0]' Node.TextEditPosition.Numbers[1]) + Screen.Position;                      m_TextPosition = Position;                  }                    if (State.InSharedPropertiesGroup)                      m_Size = State.Size;                  else                  {                      m_Size = new Vector2();                      m_Size.X = Node.Size.Numbers[0];                      m_Size.Y = Node.Size.Numbers[1];                  }                    if (Node.Tooltip != "")                      Tooltip = m_Screen.GetString(Node.Tooltip);                    Transparent = (Node.Transparent == 1) ? true : false;                    if (Node.Lines != null)                      m_NumLines = (int)Node.Lines;                    if (Node.Capacity != null)                      m_MaxChars = (int)Node.Capacity;                    if (Node.Alignment != null)                      m_Alignment = (TextEditAlignment)Node.Alignment;                    if (Node.FlashOnEmpty != null)                      m_FlashOnEmpty = (Node.FlashOnEmpty == 1) ? true : false;                    if (Node.FrameOnFocus != null)                      m_FrameOnFocus = (Node.FrameOnFocus == 1) ? true : false;                    if (State.InSharedPropertiesGroup)                      TextColor = State.Color;                  else                      TextColor = new Color(Node.Color.Numbers[0]' Node.Color.Numbers[1]' Node.Color.Numbers[2]);                    if (Node.BackColor != null)                      m_BackColor = new Color(Node.Color.Numbers[0]' Node.Color.Numbers[1]' Node.Color.Numbers[2]);                  else                      m_BackColor = new Color(57' 81' 110' 255);                    if (Node.Mode != null)                      m_Mode = (Node.Mode == "kReadOnly") ? TextEditMode.ReadOnly : TextEditMode.Insert;                    if (Node.ScrollbarImage != string.Empty)                      m_ScrollbarImage = m_Screen.GetImage(Node.ScrollbarImage).Image.Texture;                    if (Node.ScrollbarGutter != null)                      m_ScrollbarWidth = (int)Node.ScrollbarGutter;                    if (Node.ScrollbarType != null)                      m_ScrollbarType = (ScrollbarType)Node.ScrollbarType;                    if (Node.ResizeForExactLineHeight != null)                      m_ResizeForExactLineHeight = (Node.ResizeForExactLineHeight == 1) ? true : false;                    if (Node.EnableIME != null)                      m_EnableInputModeEditing = (Node.EnableIME == 1) ? true : false;                    if (Node.CursorColor != null)                      m_CursorColor = new Color(Node.CursorColor.Numbers[0]' Node.CursorColor.Numbers[1]' Node.CursorColor.Numbers[2]);                    if (Node.FrameColor != null)                      m_FrameColor = new Color(Node.FrameColor.Numbers[0]' Node.FrameColor.Numbers[1]' Node.FrameColor.Numbers[2]);              }              else              {                  if (State.BackColor != null)                      m_BackColor = State.BackColor;                  if (State.Color != null)                      TextColor = State.Color;                  if (State.CursorColor != null)                      m_CursorColor = State.CursorColor;                  if (State.Position != null)                  {                      Position = new Vector2(State.Position[0]' State.Position[1]) + Screen.Position;                      m_TextPosition = Position;                  }                  if (State.Tooltip != "")                      Tooltip = State.Tooltip;              }
Magic Number,Gonzo.Elements,UITextEdit,C:\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UITextEdit.cs,UITextEdit,The following statement contains a magic number: if (!State.InSharedPropertiesGroup)              {                  if (Node.TextEditPosition.Numbers.Count > 0)                  {                      Position = new Vector2(Node.TextEditPosition.Numbers[0]' Node.TextEditPosition.Numbers[1]) + Screen.Position;                      m_TextPosition = Position;                  }                    if (State.InSharedPropertiesGroup)                      m_Size = State.Size;                  else                  {                      m_Size = new Vector2();                      m_Size.X = Node.Size.Numbers[0];                      m_Size.Y = Node.Size.Numbers[1];                  }                    if (Node.Tooltip != "")                      Tooltip = m_Screen.GetString(Node.Tooltip);                    Transparent = (Node.Transparent == 1) ? true : false;                    if (Node.Lines != null)                      m_NumLines = (int)Node.Lines;                    if (Node.Capacity != null)                      m_MaxChars = (int)Node.Capacity;                    if (Node.Alignment != null)                      m_Alignment = (TextEditAlignment)Node.Alignment;                    if (Node.FlashOnEmpty != null)                      m_FlashOnEmpty = (Node.FlashOnEmpty == 1) ? true : false;                    if (Node.FrameOnFocus != null)                      m_FrameOnFocus = (Node.FrameOnFocus == 1) ? true : false;                    if (State.InSharedPropertiesGroup)                      TextColor = State.Color;                  else                      TextColor = new Color(Node.Color.Numbers[0]' Node.Color.Numbers[1]' Node.Color.Numbers[2]);                    if (Node.BackColor != null)                      m_BackColor = new Color(Node.Color.Numbers[0]' Node.Color.Numbers[1]' Node.Color.Numbers[2]);                  else                      m_BackColor = new Color(57' 81' 110' 255);                    if (Node.Mode != null)                      m_Mode = (Node.Mode == "kReadOnly") ? TextEditMode.ReadOnly : TextEditMode.Insert;                    if (Node.ScrollbarImage != string.Empty)                      m_ScrollbarImage = m_Screen.GetImage(Node.ScrollbarImage).Image.Texture;                    if (Node.ScrollbarGutter != null)                      m_ScrollbarWidth = (int)Node.ScrollbarGutter;                    if (Node.ScrollbarType != null)                      m_ScrollbarType = (ScrollbarType)Node.ScrollbarType;                    if (Node.ResizeForExactLineHeight != null)                      m_ResizeForExactLineHeight = (Node.ResizeForExactLineHeight == 1) ? true : false;                    if (Node.EnableIME != null)                      m_EnableInputModeEditing = (Node.EnableIME == 1) ? true : false;                    if (Node.CursorColor != null)                      m_CursorColor = new Color(Node.CursorColor.Numbers[0]' Node.CursorColor.Numbers[1]' Node.CursorColor.Numbers[2]);                    if (Node.FrameColor != null)                      m_FrameColor = new Color(Node.FrameColor.Numbers[0]' Node.FrameColor.Numbers[1]' Node.FrameColor.Numbers[2]);              }              else              {                  if (State.BackColor != null)                      m_BackColor = State.BackColor;                  if (State.Color != null)                      TextColor = State.Color;                  if (State.CursorColor != null)                      m_CursorColor = State.CursorColor;                  if (State.Position != null)                  {                      Position = new Vector2(State.Position[0]' State.Position[1]) + Screen.Position;                      m_TextPosition = Position;                  }                  if (State.Tooltip != "")                      Tooltip = State.Tooltip;              }
Magic Number,Gonzo.Elements,UITextEdit,C:\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UITextEdit.cs,UITextEdit,The following statement contains a magic number: if (!State.InSharedPropertiesGroup)              {                  if (Node.TextEditPosition.Numbers.Count > 0)                  {                      Position = new Vector2(Node.TextEditPosition.Numbers[0]' Node.TextEditPosition.Numbers[1]) + Screen.Position;                      m_TextPosition = Position;                  }                    if (State.InSharedPropertiesGroup)                      m_Size = State.Size;                  else                  {                      m_Size = new Vector2();                      m_Size.X = Node.Size.Numbers[0];                      m_Size.Y = Node.Size.Numbers[1];                  }                    if (Node.Tooltip != "")                      Tooltip = m_Screen.GetString(Node.Tooltip);                    Transparent = (Node.Transparent == 1) ? true : false;                    if (Node.Lines != null)                      m_NumLines = (int)Node.Lines;                    if (Node.Capacity != null)                      m_MaxChars = (int)Node.Capacity;                    if (Node.Alignment != null)                      m_Alignment = (TextEditAlignment)Node.Alignment;                    if (Node.FlashOnEmpty != null)                      m_FlashOnEmpty = (Node.FlashOnEmpty == 1) ? true : false;                    if (Node.FrameOnFocus != null)                      m_FrameOnFocus = (Node.FrameOnFocus == 1) ? true : false;                    if (State.InSharedPropertiesGroup)                      TextColor = State.Color;                  else                      TextColor = new Color(Node.Color.Numbers[0]' Node.Color.Numbers[1]' Node.Color.Numbers[2]);                    if (Node.BackColor != null)                      m_BackColor = new Color(Node.Color.Numbers[0]' Node.Color.Numbers[1]' Node.Color.Numbers[2]);                  else                      m_BackColor = new Color(57' 81' 110' 255);                    if (Node.Mode != null)                      m_Mode = (Node.Mode == "kReadOnly") ? TextEditMode.ReadOnly : TextEditMode.Insert;                    if (Node.ScrollbarImage != string.Empty)                      m_ScrollbarImage = m_Screen.GetImage(Node.ScrollbarImage).Image.Texture;                    if (Node.ScrollbarGutter != null)                      m_ScrollbarWidth = (int)Node.ScrollbarGutter;                    if (Node.ScrollbarType != null)                      m_ScrollbarType = (ScrollbarType)Node.ScrollbarType;                    if (Node.ResizeForExactLineHeight != null)                      m_ResizeForExactLineHeight = (Node.ResizeForExactLineHeight == 1) ? true : false;                    if (Node.EnableIME != null)                      m_EnableInputModeEditing = (Node.EnableIME == 1) ? true : false;                    if (Node.CursorColor != null)                      m_CursorColor = new Color(Node.CursorColor.Numbers[0]' Node.CursorColor.Numbers[1]' Node.CursorColor.Numbers[2]);                    if (Node.FrameColor != null)                      m_FrameColor = new Color(Node.FrameColor.Numbers[0]' Node.FrameColor.Numbers[1]' Node.FrameColor.Numbers[2]);              }              else              {                  if (State.BackColor != null)                      m_BackColor = State.BackColor;                  if (State.Color != null)                      TextColor = State.Color;                  if (State.CursorColor != null)                      m_CursorColor = State.CursorColor;                  if (State.Position != null)                  {                      Position = new Vector2(State.Position[0]' State.Position[1]) + Screen.Position;                      m_TextPosition = Position;                  }                  if (State.Tooltip != "")                      Tooltip = State.Tooltip;              }
Magic Number,Gonzo.Elements,UITextEdit,C:\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UITextEdit.cs,UITextEdit,The following statement contains a magic number: if (!State.InSharedPropertiesGroup)              {                  if (Node.TextEditPosition.Numbers.Count > 0)                  {                      Position = new Vector2(Node.TextEditPosition.Numbers[0]' Node.TextEditPosition.Numbers[1]) + Screen.Position;                      m_TextPosition = Position;                  }                    if (State.InSharedPropertiesGroup)                      m_Size = State.Size;                  else                  {                      m_Size = new Vector2();                      m_Size.X = Node.Size.Numbers[0];                      m_Size.Y = Node.Size.Numbers[1];                  }                    if (Node.Tooltip != "")                      Tooltip = m_Screen.GetString(Node.Tooltip);                    Transparent = (Node.Transparent == 1) ? true : false;                    if (Node.Lines != null)                      m_NumLines = (int)Node.Lines;                    if (Node.Capacity != null)                      m_MaxChars = (int)Node.Capacity;                    if (Node.Alignment != null)                      m_Alignment = (TextEditAlignment)Node.Alignment;                    if (Node.FlashOnEmpty != null)                      m_FlashOnEmpty = (Node.FlashOnEmpty == 1) ? true : false;                    if (Node.FrameOnFocus != null)                      m_FrameOnFocus = (Node.FrameOnFocus == 1) ? true : false;                    if (State.InSharedPropertiesGroup)                      TextColor = State.Color;                  else                      TextColor = new Color(Node.Color.Numbers[0]' Node.Color.Numbers[1]' Node.Color.Numbers[2]);                    if (Node.BackColor != null)                      m_BackColor = new Color(Node.Color.Numbers[0]' Node.Color.Numbers[1]' Node.Color.Numbers[2]);                  else                      m_BackColor = new Color(57' 81' 110' 255);                    if (Node.Mode != null)                      m_Mode = (Node.Mode == "kReadOnly") ? TextEditMode.ReadOnly : TextEditMode.Insert;                    if (Node.ScrollbarImage != string.Empty)                      m_ScrollbarImage = m_Screen.GetImage(Node.ScrollbarImage).Image.Texture;                    if (Node.ScrollbarGutter != null)                      m_ScrollbarWidth = (int)Node.ScrollbarGutter;                    if (Node.ScrollbarType != null)                      m_ScrollbarType = (ScrollbarType)Node.ScrollbarType;                    if (Node.ResizeForExactLineHeight != null)                      m_ResizeForExactLineHeight = (Node.ResizeForExactLineHeight == 1) ? true : false;                    if (Node.EnableIME != null)                      m_EnableInputModeEditing = (Node.EnableIME == 1) ? true : false;                    if (Node.CursorColor != null)                      m_CursorColor = new Color(Node.CursorColor.Numbers[0]' Node.CursorColor.Numbers[1]' Node.CursorColor.Numbers[2]);                    if (Node.FrameColor != null)                      m_FrameColor = new Color(Node.FrameColor.Numbers[0]' Node.FrameColor.Numbers[1]' Node.FrameColor.Numbers[2]);              }              else              {                  if (State.BackColor != null)                      m_BackColor = State.BackColor;                  if (State.Color != null)                      TextColor = State.Color;                  if (State.CursorColor != null)                      m_CursorColor = State.CursorColor;                  if (State.Position != null)                  {                      Position = new Vector2(State.Position[0]' State.Position[1]) + Screen.Position;                      m_TextPosition = Position;                  }                  if (State.Tooltip != "")                      Tooltip = State.Tooltip;              }
Magic Number,Gonzo.Elements,UITextEdit,C:\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UITextEdit.cs,UITextEdit,The following statement contains a magic number: switch(Font)              {                  case 9:                      m_Font = Screen.Font9px;                      break;                  case 10:                      m_Font = Screen.Font10px;                      break;                  case 12:                      m_Font = Screen.Font12px;                      break;                  case 14:                      m_Font = Screen.Font14px;                      break;                  case 16:                      m_Font = Screen.Font16px;                      break;              }
Magic Number,Gonzo.Elements,UITextEdit,C:\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UITextEdit.cs,UITextEdit,The following statement contains a magic number: switch(Font)              {                  case 9:                      m_Font = Screen.Font9px;                      break;                  case 10:                      m_Font = Screen.Font10px;                      break;                  case 12:                      m_Font = Screen.Font12px;                      break;                  case 14:                      m_Font = Screen.Font14px;                      break;                  case 16:                      m_Font = Screen.Font16px;                      break;              }
Magic Number,Gonzo.Elements,UITextEdit,C:\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UITextEdit.cs,UITextEdit,The following statement contains a magic number: switch(Font)              {                  case 9:                      m_Font = Screen.Font9px;                      break;                  case 10:                      m_Font = Screen.Font10px;                      break;                  case 12:                      m_Font = Screen.Font12px;                      break;                  case 14:                      m_Font = Screen.Font14px;                      break;                  case 16:                      m_Font = Screen.Font16px;                      break;              }
Magic Number,Gonzo.Elements,UITextEdit,C:\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UITextEdit.cs,UITextEdit,The following statement contains a magic number: switch(Font)              {                  case 9:                      m_Font = Screen.Font9px;                      break;                  case 10:                      m_Font = Screen.Font10px;                      break;                  case 12:                      m_Font = Screen.Font12px;                      break;                  case 14:                      m_Font = Screen.Font14px;                      break;                  case 16:                      m_Font = Screen.Font16px;                      break;              }
Magic Number,Gonzo.Elements,UITextEdit,C:\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UITextEdit.cs,UITextEdit,The following statement contains a magic number: switch(Font)              {                  case 9:                      m_Font = Screen.Font9px;                      break;                  case 10:                      m_Font = Screen.Font10px;                      break;                  case 12:                      m_Font = Screen.Font12px;                      break;                  case 14:                      m_Font = Screen.Font14px;                      break;                  case 16:                      m_Font = Screen.Font16px;                      break;              }
Magic Number,Gonzo.Elements,UITextEdit,C:\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UITextEdit.cs,UITextEdit,The following statement contains a magic number: m_CursorVisibilityTimer = new Timer(100);
Magic Number,Gonzo.Elements,UITextEdit,C:\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UITextEdit.cs,Manager_OnTextInput,The following statement contains a magic number: if (m_HasFocus)              {                  if (m_Mode != TextEditMode.ReadOnly)                  {                      if (m_NumLines > 1)                      {                          //Check that text doesn't go beyond width of control...                          if ((m_Font.MeasureString(m_Lines[m_Cursor.LineIndex].SBuilder.ToString()).X >=                               m_Size.X) && !m_RemovingTxt && !m_MovingCursor)                          {                              if (m_TextPosition.Y <= Position.Y + ((m_NumLines - 2) * m_Font.LineSpacing))                              {                                  m_TextPosition.Y += m_Font.LineSpacing;                                  m_Lines.Add(new RenderableText() { SBuilder = new StringBuilder()' Position = m_TextPosition });                                    m_Cursor.Position.Y += m_Font.LineSpacing;                                    m_Cursor.LineIndex++;                                  m_Cursor.CharacterIndex = 0;                              }                              else //Text went beyond the borders of the control...                              {                                  foreach (RenderableText Txt in m_Lines)                                      Txt.Position.Y -= m_Font.LineSpacing;                                    m_Lines.Add(new RenderableText() { SBuilder = new StringBuilder()' Position = m_TextPosition });                                  m_ScrollbarHeight -= m_Font.LineSpacing; //TODO: Resize scrollbar...                                    m_Cursor.LineIndex++;                                  m_Cursor.CharacterIndex = 0;                                    m_Lines[m_VisibilityIndex].Visible = false;                                  m_VisibilityIndex++;                              }                                m_Cursor.Position.X = Position.X;                          }                      }                      else                      {                          //Text went beyond the borders of the control...                          if (m_Font.MeasureString(CurrentInput).X >= (m_Size.X -                               m_Font.MeasureString(e.Character.ToString()).X) && !m_RemovingTxt)                          {                              m_Lines.Add(new RenderableText() { SBuilder = new StringBuilder()' Position = m_Cursor.Position' Visible = true });                              m_Cursor.Position.X = m_Size.X;                              //In a single line control' each "line" will hold one character.                              m_Cursor.LineIndex++;                                foreach (RenderableText Txt in m_Lines)                              {                                  Txt.Position.X -= m_Font.MeasureString(e.Character.ToString()).X;                                    if (Txt.Position.X < Position.X)                                      Txt.Visible = false;                              }                          }                          else                          {                              m_Lines.Add(new RenderableText() { SBuilder = new StringBuilder()' Position = m_Cursor.Position' Visible = true});                              //In a single line control' each "line" will hold one character.                              m_Cursor.LineIndex++;                          }                      }                  }                    if (!m_IsUpperCase)                  {                      //If the cursor is in the middle of a line' replace the character.                      if (m_NumLines > 1)                      {                          if (m_Cursor.CharacterIndex < m_Lines[m_Cursor.LineIndex].SBuilder.Length)                              m_Lines[m_Cursor.LineIndex].SBuilder[m_Cursor.CharacterIndex] = e.Character;                          else                              m_Lines[m_Cursor.LineIndex].SBuilder.Append(e.Character);                      }                      else                            {                          if (m_Cursor.CharacterIndex < CurrentInput.Length)                              m_Lines[m_Cursor.LineIndex].SBuilder[0] = e.Character;                          else                          {                              RenderableText Txt = new RenderableText();                              Txt.SBuilder = new StringBuilder(e.Character.ToString());                              Txt.Position = m_Cursor.Position;                              Txt.Visible = true;                              m_Lines.Insert(m_Cursor.LineIndex' Txt);                          }                      }                  }                  else                  {                      if (m_NumLines > 1)                      {                          //If the cursor is in the middle of a line' replace the character.                          if (m_Cursor.CharacterIndex < m_Lines[m_Cursor.LineIndex].SBuilder.Length)                              m_Lines[m_Cursor.LineIndex].SBuilder[m_Cursor.CharacterIndex] = e.Character.ToString().ToUpper().ToCharArray()[0];                          else                              m_Lines[m_Cursor.LineIndex].SBuilder.Append(e.Character.ToString().ToUpper());                      }                      else                      {                          if ((m_Cursor.CharacterIndex < CurrentInput.Length) && m_MovingCursor)                              m_Lines[m_Cursor.LineIndex].SBuilder[0] = e.Character;                          else                          {                              RenderableText Txt = new RenderableText();                              Txt.SBuilder = new StringBuilder(e.Character.ToString().ToUpper());                              Txt.Position = m_Cursor.Position;                              Txt.Visible = true;                              m_Lines.Insert(m_Cursor.LineIndex' Txt);                          }                      }                  }                    m_Cursor.CharacterIndex++;                  m_RemovingTxt = false;                  m_MovingCursor = false;                  m_Cursor.Position.X += m_Font.MeasureString(e.Character.ToString()).X;              }
Magic Number,Gonzo.Elements,UITextEdit,C:\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UITextEdit.cs,Update,The following statement contains a magic number: if (m_Mode != TextEditMode.ReadOnly)              {                  m_VerticalTextBoundary = (int)(Position.X + m_Font.MeasureString(m_Lines[m_Cursor.LineIndex].SBuilder.ToString()).X);                  m_IsUpperCase = IsUpperCase(Input);                    if (m_HasFocus)                  {                      Keys[] PressedKeys = Input.CurrentKeyboardState.GetPressedKeys();                        foreach (Keys K in PressedKeys)                      {                          if (Input.IsNewPress(K))                          {                              switch (K)                              {                                  case Keys.Divide:                                      if (m_Cursor.CharacterIndex < m_Lines[m_Cursor.LineIndex].SBuilder.Length)                                          m_Lines[m_Cursor.LineIndex].SBuilder[m_Cursor.CharacterIndex] = '/';                                      else                                          m_Lines[m_Cursor.LineIndex].SBuilder.Append("/");                                        m_Cursor.Position.X += m_Font.MeasureString("/").X;                                      m_Cursor.CharacterIndex++;                                        m_RemovingTxt = false;                                      break;                                  case Keys.OemSemicolon:                                      if (Input.InputRegion != null)                                      {                                          switch (Input.InputRegion.LayoutName)                                          {                                              case "English":                                                  if (m_Cursor.CharacterIndex < m_Lines[m_Cursor.LineIndex].SBuilder.Length)                                                      m_Lines[m_Cursor.LineIndex].SBuilder[m_Cursor.CharacterIndex] = ';';                                                  else                                                      m_Lines[m_Cursor.LineIndex].SBuilder.Append(";");                                                    m_Cursor.CharacterIndex++;                                                  m_MovingCursor = false;                                                  m_RemovingTxt = false;                                                  m_Cursor.Position.X += m_Font.MeasureString(";").X;                                                  break;                                          }                                      }                                      break;                                  case Keys.OemQuotes:                                      if (Input.InputRegion != null)                                      {                                          switch (Input.InputRegion.LayoutName)                                          {                                              case "English": //TODO: Should this be double quote if upper??                                                  if (m_Cursor.CharacterIndex < m_Lines[m_Cursor.LineIndex].SBuilder.Length)                                                      m_Lines[m_Cursor.LineIndex].SBuilder[m_Cursor.CharacterIndex] = '\'';                                                  else                                                      m_Lines[m_Cursor.LineIndex].SBuilder.Append("'");                                                    m_Cursor.CharacterIndex++;                                                  m_MovingCursor = false;                                                  m_RemovingTxt = false;                                                  m_Cursor.Position.X += m_Font.MeasureString("'").X;                                                  break;                                          }                                      }                                      break;                                  case Keys.OemCloseBrackets:                                      if (Input.InputRegion != null)                                      {                                          switch (Input.InputRegion.LayoutName)                                          {                                              case "English":                                                  if (m_Cursor.CharacterIndex < m_Lines[m_Cursor.LineIndex].SBuilder.Length)                                                      m_Lines[m_Cursor.LineIndex].SBuilder[m_Cursor.CharacterIndex] = '}';                                                  else                                                      m_Lines[m_Cursor.LineIndex].SBuilder.Append("}");                                                    m_Cursor.Position.X += m_Font.MeasureString("}").X;                                                  break;                                              case "Norwegian":                                              case "Swedish":                                              case "Finnish":                                              case "Danish":                                                  if (IsUpperCase(Input))                                                  {                                                      if (m_Cursor.CharacterIndex < m_Lines[m_Cursor.LineIndex].SBuilder.Length)                                                          m_Lines[m_Cursor.LineIndex].SBuilder[m_Cursor.CharacterIndex] = '^';                                                      else                                                          m_Lines[m_Cursor.LineIndex].SBuilder.Append("^");                                                        m_Cursor.Position.X += m_Font.MeasureString("^").X;                                                  }                                                  else if (Input.IsCurPress(Keys.RightAlt))                                                  {                                                      if (m_Cursor.CharacterIndex < m_Lines[m_Cursor.LineIndex].SBuilder.Length)                                                          m_Lines[m_Cursor.LineIndex].SBuilder[m_Cursor.CharacterIndex] = '~';                                                      else                                                          m_Lines[m_Cursor.LineIndex].SBuilder.Append("~");                                                        m_Cursor.Position.X += m_Font.MeasureString("~").X;                                                  }                                                  break;                                          }                                      }                                        m_Cursor.CharacterIndex++;                                      m_MovingCursor = false;                                      m_RemovingTxt = false;                                      break;                                  case Keys.OemPlus:                                      if (m_Cursor.CharacterIndex < m_Lines[m_Cursor.LineIndex].SBuilder.Length)                                          m_Lines[m_Cursor.LineIndex].SBuilder[m_Cursor.CharacterIndex] = '+';                                      else                                          m_Lines[m_Cursor.LineIndex].SBuilder.Append("+");                                        m_Cursor.Position.X += m_Font.MeasureString("+").X;                                        m_Cursor.CharacterIndex++;                                      m_MovingCursor = false;                                      m_RemovingTxt = false;                                      break;                                  case Keys.OemComma:                                      if (IsUpperCase(Input))                                      {                                          if (m_Cursor.CharacterIndex < m_Lines[m_Cursor.LineIndex].SBuilder.Length)                                              m_Lines[m_Cursor.LineIndex].SBuilder[m_Cursor.CharacterIndex] = ';';                                          else                                              m_Lines[m_Cursor.LineIndex].SBuilder.Append(";");                                            m_Cursor.Position.X += m_Font.MeasureString(";").X;                                      }                                      else                                      {                                          if (m_Cursor.CharacterIndex < m_Lines[m_Cursor.LineIndex].SBuilder.Length)                                              m_Lines[m_Cursor.LineIndex].SBuilder[m_Cursor.CharacterIndex] = ''';                                          else                                              m_Lines[m_Cursor.LineIndex].SBuilder.Append("'");                                            m_Cursor.Position.X += m_Font.MeasureString("'").X;                                      }                                        m_Cursor.CharacterIndex++;                                      m_MovingCursor = false;                                      m_RemovingTxt = false;                                      break;                                  case Keys.OemPeriod:                                      if (m_Cursor.CharacterIndex < m_Lines[m_Cursor.LineIndex].SBuilder.Length)                                          m_Lines[m_Cursor.LineIndex].SBuilder[m_Cursor.CharacterIndex] = '.';                                      else                                          m_Lines[m_Cursor.LineIndex].SBuilder.Append(".");                                        m_Cursor.Position.X += m_Font.MeasureString(".").X;                                        m_Cursor.CharacterIndex++;                                      m_MovingCursor = false;                                      m_RemovingTxt = false;                                      break;                                  case Keys.Space:                                      if (m_Cursor.CharacterIndex < m_Lines[m_Cursor.LineIndex].SBuilder.Length)                                          m_Lines[m_Cursor.LineIndex].SBuilder[m_Cursor.CharacterIndex] = ' ';                                      else                                          m_Lines[m_Cursor.LineIndex].SBuilder.Append(" ");                                        m_Cursor.Position.X += m_Font.MeasureString(" ").X;                                        m_Cursor.CharacterIndex++;                                      m_MovingCursor = false;                                      m_RemovingTxt = false;                                      break;                                  case Keys.Tab:                                      if (m_Cursor.CharacterIndex < m_Lines[m_Cursor.LineIndex].SBuilder.Length)                                          m_Lines[m_Cursor.LineIndex].SBuilder.Append("   "); //TODO: How to insert tab??                                      else                                          m_Lines[m_Cursor.LineIndex].SBuilder.Append("   ");                                        m_Cursor.Position.X += m_Font.MeasureString("   ").X;                                        m_Cursor.CharacterIndex++;                                      m_MovingCursor = false;                                      m_RemovingTxt = false;                                      break;                                  case Keys.Subtract:                                      if (m_Cursor.CharacterIndex < m_Lines[m_Cursor.LineIndex].SBuilder.Length)                                          m_Lines[m_Cursor.LineIndex].SBuilder[m_Cursor.CharacterIndex] = '-';                                      else                                          m_Lines[m_Cursor.LineIndex].SBuilder.Append("-");                                        m_Cursor.Position.X += m_Font.MeasureString("-").X;                                        m_Cursor.CharacterIndex++;                                      m_MovingCursor = false;                                      m_RemovingTxt = false;                                      break;                                  case Keys.NumPad0:                                      if (m_Cursor.CharacterIndex < m_Lines[m_Cursor.LineIndex].SBuilder.Length)                                          m_Lines[m_Cursor.LineIndex].SBuilder[m_Cursor.CharacterIndex] = '0';                                      else                                          m_Lines[m_Cursor.LineIndex].SBuilder.Append("0");                                        m_Cursor.Position.X += m_Font.MeasureString("0").X;                                        m_Cursor.CharacterIndex++;                                      m_MovingCursor = false;                                      m_RemovingTxt = false;                                      break;                                  case Keys.NumPad1:                                      if (m_Cursor.CharacterIndex < m_Lines[m_Cursor.LineIndex].SBuilder.Length)                                          m_Lines[m_Cursor.LineIndex].SBuilder[m_Cursor.CharacterIndex] = '1';                                      else                                          m_Lines[m_Cursor.LineIndex].SBuilder.Append("1");                                        m_Cursor.Position.X += m_Font.MeasureString("1").X;                                        m_Cursor.CharacterIndex++;                                      m_MovingCursor = false;                                      m_RemovingTxt = false;                                      break;                                  case Keys.NumPad2:                                      if (m_Cursor.CharacterIndex < m_Lines[m_Cursor.LineIndex].SBuilder.Length)                                          m_Lines[m_Cursor.LineIndex].SBuilder[m_Cursor.CharacterIndex] = '2';                                      else                                          m_Lines[m_Cursor.LineIndex].SBuilder.Append("2");                                        m_Cursor.Position.X += m_Font.MeasureString("2").X;                                        m_Cursor.CharacterIndex++;                                      m_MovingCursor = false;                                      m_RemovingTxt = false;                                      break;                                  case Keys.NumPad3:                                      if (m_Cursor.CharacterIndex < m_Lines[m_Cursor.LineIndex].SBuilder.Length)                                          m_Lines[m_Cursor.LineIndex].SBuilder[m_Cursor.CharacterIndex] = '3';                                      else                                          m_Lines[m_Cursor.LineIndex].SBuilder.Append("3");                                        m_Cursor.Position.X += m_Font.MeasureString("3").X;                                        m_Cursor.CharacterIndex++;                                      m_MovingCursor = false;                                      m_RemovingTxt = false;                                      break;                                  case Keys.NumPad4:                                      if (m_Cursor.CharacterIndex < m_Lines[m_Cursor.LineIndex].SBuilder.Length)                                          m_Lines[m_Cursor.LineIndex].SBuilder[m_Cursor.CharacterIndex] = '4';                                      else                                          m_Lines[m_Cursor.LineIndex].SBuilder.Append("4");                                        m_Cursor.Position.X += m_Font.MeasureString("4").X;                                        m_Cursor.CharacterIndex++;                                      m_MovingCursor = false;                                      m_RemovingTxt = false;                                      break;                                  case Keys.NumPad5:                                      if (m_Cursor.CharacterIndex < m_Lines[m_Cursor.LineIndex].SBuilder.Length)                                          m_Lines[m_Cursor.LineIndex].SBuilder[m_Cursor.CharacterIndex] = '5';                                      else                                          m_Lines[m_Cursor.LineIndex].SBuilder.Append("5");                                        m_Cursor.Position.X += m_Font.MeasureString("5").X;                                        m_Cursor.CharacterIndex++;                                      m_MovingCursor = false;                                      m_RemovingTxt = false;                                      break;                                  case Keys.NumPad6:                                      if (m_Cursor.CharacterIndex < m_Lines[m_Cursor.LineIndex].SBuilder.Length)                                          m_Lines[m_Cursor.LineIndex].SBuilder[m_Cursor.CharacterIndex] = '6';                                      else                                          m_Lines[m_Cursor.LineIndex].SBuilder.Append("6");                                        m_Cursor.Position.X += m_Font.MeasureString("6").X;                                        m_Cursor.CharacterIndex++;                                      m_MovingCursor = false;                                      m_RemovingTxt = false;                                      break;                                  case Keys.NumPad7:                                      if (m_Cursor.CharacterIndex < m_Lines[m_Cursor.LineIndex].SBuilder.Length)                                          m_Lines[m_Cursor.LineIndex].SBuilder[m_Cursor.CharacterIndex] = '7';                                      m_Cursor.Position.X += m_Font.MeasureString("7").X;                                        m_Cursor.CharacterIndex++;                                      m_MovingCursor = false;                                      m_RemovingTxt = false;                                      break;                                  case Keys.NumPad8:                                      if (m_Cursor.CharacterIndex < m_Lines[m_Cursor.LineIndex].SBuilder.Length)                                          m_Lines[m_Cursor.LineIndex].SBuilder[m_Cursor.CharacterIndex] = '8';                                      else                                          m_Lines[m_Cursor.LineIndex].SBuilder.Append("8");                                        m_Cursor.Position.X += m_Font.MeasureString("8").X;                                        m_Cursor.CharacterIndex++;                                      m_MovingCursor = false;                                      m_RemovingTxt = false;                                      break;                                  case Keys.NumPad9:                                      if (m_Cursor.CharacterIndex < m_Lines[m_Cursor.LineIndex].SBuilder.Length)                                          m_Lines[m_Cursor.LineIndex].SBuilder[m_Cursor.CharacterIndex] = '9';                                      else                                          m_Lines[m_Cursor.LineIndex].SBuilder.Append("9");                                        m_Cursor.Position.X += m_Font.MeasureString("9").X;                                        m_Cursor.CharacterIndex++;                                      m_MovingCursor = false;                                      m_RemovingTxt = false;                                      break;                                  case Keys.Multiply:                                      if (m_Cursor.CharacterIndex < m_Lines[m_Cursor.LineIndex].SBuilder.Length)                                          m_Lines[m_Cursor.LineIndex].SBuilder[m_Cursor.CharacterIndex] = '*';                                      else                                          m_Lines[m_Cursor.LineIndex].SBuilder.Append("*");                                        m_Cursor.Position.X += m_Font.MeasureString("*").X;                                        m_Cursor.CharacterIndex++;                                      m_MovingCursor = false;                                      m_RemovingTxt = false;                                      break;                                  case Keys.Enter:                                      if (m_NumLines > 1)                                      {                                          m_TextPosition.X = Position.X;                                          m_TextPosition.Y += m_Font.LineSpacing;                                          m_Lines.Add(new RenderableText() { SBuilder = new StringBuilder()' Position = m_TextPosition });                                            m_Cursor.Position.X = Position.X;                                          m_Cursor.Position.Y += m_Font.LineSpacing;                                          m_Cursor.LineIndex += 1;                                          m_Cursor.CharacterIndex = 0;                                            m_MovingCursor = false;                                          m_RemovingTxt = false;                                      }                                      break;                                  case Keys.Back:                                      m_RemovingTxt = true;                                        //Cursor hasn't been moved.                                      if (!m_MovingCursor)                                      {                                          if (m_Cursor.Position.X <= m_VerticalTextBoundary)                                              m_Cursor.Position.X = m_VerticalTextBoundary;                                          else                                          {                                              if (m_Cursor.Position.X > Position.X)                                                  m_Cursor.Position.X -= m_Font.MeasureString("a").X;                                          }                                      }                                        //If the current line is empty' move the cursor up.                                      if (m_Lines[m_Cursor.LineIndex].SBuilder.Length == 0)                                      {                                          if (m_NumLines > 1)                                          {                                              if (m_TextPosition.Y > Position.Y)                                              {                                                  m_TextPosition.Y -= m_Font.LineSpacing;                                                    m_Cursor.Position.X = Position.X + m_Size.X;                                                  m_Cursor.Position.Y -= m_Font.LineSpacing;                                              }                                                if (m_Cursor.LineIndex > 0)                                              {                                                  m_Cursor.LineIndex--;                                                  m_Cursor.CharacterIndex = m_Lines[m_Cursor.LineIndex].SBuilder.Length;                                              }                                          }                                          else                                          {                                              if (m_Cursor.LineIndex > 0)                                                  m_Cursor.LineIndex--;                                          }                                      }                                      else                                      {                                          if (m_NumLines > 1)                                          {                                              m_Lines[m_Cursor.LineIndex].SBuilder.Remove((int)(m_Cursor.CharacterIndex - 1)' 1);                                              m_Cursor.CharacterIndex--;                                              m_Cursor.Position.X -= m_Font.MeasureString("a").X;                                          }                                          else                                          {                                              m_Lines.Remove(m_Lines[m_Cursor.CharacterIndex]);                                              m_Cursor.CharacterIndex--;                                              m_Cursor.LineIndex--;                                              m_Cursor.Position.X -= m_Font.MeasureString("a").X;                                          }                                      }                                        //Cursor moved to the beginning of a line.                                      if (m_Cursor.Position.X <= Position.X)                                      {                                          if (m_TextPosition.Y > Position.Y)                                          {                                              m_TextPosition.Y -= m_Font.LineSpacing;                                                m_Cursor.Position.X = Position.X + m_Size.X;                                              m_Cursor.Position.Y -= m_Font.LineSpacing;                                          }                                            if (m_Cursor.LineIndex > 0)                                          {                                              m_Cursor.LineIndex--;                                              m_Cursor.CharacterIndex = m_Lines[m_Cursor.LineIndex].SBuilder.Length;                                          }                                      }                                      break;                                  case Keys.Left:                                      if (m_Cursor.Position.X > Position.X)                                      {                                          m_Cursor.Position.X -= m_Font.MeasureString("a").X;                                          m_Cursor.CharacterIndex--;                                            if (m_NumLines == 1)                                              m_Cursor.LineIndex--;                                      }                                      else if (m_Cursor.Position.X <= Position.X)                                      {                                          if (m_NumLines == 1)                                          {                                              for (int i = 0; i < m_Lines.Count; i++)                                              {                                                  //Don't know why Line[0] doesn't work here...                                                  if ((m_Lines[1].Position.X < Position.X))                                                      m_Lines[i].Position.X += m_ScrollFactor;                                                    if (m_Lines[i].Position.X > (Position.X + Size.X))                                                      m_Lines[i].Visible = false;                                                    if (m_Lines[i].Position.X > Position.X && m_Lines[i].Position.X < (Position.X + Size.X))                                                      m_Lines[i].Visible = true;                                              }                                          }                                      }                                        m_MovingCursor = true;                                      m_RemovingTxt = false;                                      break;                                  case Keys.Right:                                      if (m_Cursor.Position.X < (Position.X + m_Size.X))                                      {                                          if (m_NumLines > 1)                                          {                                              if (m_Lines[m_Cursor.LineIndex].SBuilder.Length > 0 &&                                                  m_Cursor.CharacterIndex < m_Lines[m_Cursor.LineIndex].SBuilder.Length)                                              {                                                  m_Cursor.Position.X += m_Font.MeasureString("a").X;                                                  m_Cursor.CharacterIndex++;                                              }                                          }                                          else //Single-line control' simple.                                          {                                              m_Cursor.Position.X += m_Font.MeasureString("a").X;                                              m_Cursor.CharacterIndex++;                                              m_Cursor.LineIndex++;                                          }                                      }                                      else if (m_Cursor.Position.X >= (Position.X + m_Size.X))                                      {                                          if (m_NumLines == 1)                                          {                                              for (int i = 0; i < m_Lines.Count; i++)                                              {                                                  if ((m_Lines[m_Lines.Count - 1].Position.X >= (Position.X + m_Size.X)))                                                      m_Lines[i].Position.X -= m_ScrollFactor;                                                    if (m_Lines[i].Position.X < (Position.X + Size.X))                                                      m_Lines[i].Visible = true;                                                    if (m_Lines[i].Position.X < (Position.X + Size.X) &&                                                      m_Lines[i].Position.X < Position.X)                                                      m_Lines[i].Visible = false;                                              }                                          }                                      }                                        m_MovingCursor = true;                                      m_RemovingTxt = false;                                      break;                                  case Keys.Up:                                      if (m_NumLines > 1)                                      {                                          if (m_Cursor.Position.Y > Position.Y)                                          {                                              m_Cursor.Position.Y -= m_Font.LineSpacing;                                              m_Cursor.LineIndex--;                                                //Part of a line was most likely deleted' so readjust the cursor accordingly.                                              if (m_Cursor.CharacterIndex > m_Lines[m_Cursor.LineIndex].SBuilder.Length)                                              {                                                  m_Cursor.CharacterIndex = m_Lines[m_Cursor.LineIndex].SBuilder.Length;                                                  m_Cursor.Position.X = Position.X +                                                      m_Font.MeasureString(m_Lines[m_Cursor.LineIndex].SBuilder.ToString()).X;                                              }                                          }                                            m_MovingCursor = true;                                          m_RemovingTxt = false;                                      }                                      break;                                  case Keys.Down:                                      if (m_NumLines > 1)                                      {                                          if (m_Cursor.Position.Y < (Position.Y + m_Size.Y))                                          {                                              if (m_Lines.Count >= 2)                                              {                                                  if (m_Cursor.Position.Y < m_Lines[m_Lines.Count - 1].Position.Y)                                                  {                                                      m_Cursor.Position.Y += m_Font.LineSpacing;                                                      m_Cursor.LineIndex++;                                                        //Part of a line was most likely deleted' so readjust the cursor accordingly.                                                      if (m_Cursor.CharacterIndex > m_Lines[m_Cursor.LineIndex].SBuilder.Length)                                                      {                                                          m_Cursor.CharacterIndex = m_Lines[m_Cursor.LineIndex].SBuilder.Length;                                                          m_Cursor.Position.X = Position.X +                                                              m_Font.MeasureString(m_Lines[m_Cursor.LineIndex].SBuilder.ToString()).X;                                                      }                                                  }                                              }                                          }                                            m_MovingCursor = true;                                          m_RemovingTxt = false;                                      }                                      break;                              }                          }                      }                  }              }
Missing Default,Gonzo.Elements,UIButton,C:\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UIButton.cs,UIButton,The following switch statement is missing a default case: switch (FontSize)                  {                      case 9:                          m_Font = Screen.Font9px;                          break;                      case 10:                          m_Font = Screen.Font10px;                          break;                      case 12:                          m_Font = Screen.Font12px;                          break;                      case 14:                          m_Font = Screen.Font14px;                          break;                      case 16:                          m_Font = Screen.Font16px;                          break;                  }
Missing Default,Gonzo.Elements,UILabel,C:\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UILabel.cs,UILabel,The following switch statement is missing a default case: switch (Font)              {                      case 7:                          m_Font = Screen.Font9px; //TODO: Fixme.                          break;                      case 9:                      m_Font = Screen.Font9px;                          break;                      case 10:                          m_Font = Screen.Font10px;                          break;                      case 11:                          m_Font = Screen.Font11px;                          break;                      case 12:                          m_Font = Screen.Font12px;                          break;                      case 14:                          m_Font = Screen.Font14px;                          break;                      case 16:                          m_Font = Screen.Font16px;                          break;              }
Missing Default,Gonzo.Elements,UILabel,C:\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UILabel.cs,UILabel,The following switch statement is missing a default case: switch (Font)              {                  case 7:                      m_Font = Screen.Font9px; //TODO: Fixme.                      break;                  case 9:                      m_Font = Screen.Font9px;                      break;                  case 10:                      m_Font = Screen.Font10px;                      break;                  case 11:                      m_Font = Screen.Font11px;                      break;                  case 12:                      m_Font = Screen.Font12px;                      break;                  case 14:                      m_Font = Screen.Font14px;                      break;                  case 16:                      m_Font = Screen.Font16px;                      break;              }
Missing Default,Gonzo.Elements,UILabel,C:\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UILabel.cs,AlignText,The following switch statement is missing a default case: switch (m_Alignment)              {                  case TextAlignment.Left_Top:                      //Is there a need to modify position at all here??                      break;                  case TextAlignment.Left_Center:                      LocalCopy.Y += (m_Size.Y / 2) - (Measurement.Y / 2);                      Position = LocalCopy;                      break;                  case TextAlignment.Center_Top:                      LocalCopy.X += (m_Size.X / 2) - (Measurement.X / 2);                      Position = LocalCopy;                      break;                  case TextAlignment.Center_Center:                      LocalCopy.X += (m_Size.X / 2) - (Measurement.X / 2);                      LocalCopy.Y += (m_Size.Y / 2) - (Measurement.Y / 2);                      Position = LocalCopy;                      break;                  case TextAlignment.Right_Top:                      LocalCopy.X += m_Size.X - Measurement.X;                      Position = LocalCopy;                      break;                  case TextAlignment.Right_Center:                      LocalCopy.X += m_Size.X - Measurement.X;                      LocalCopy.Y += (m_Size.Y / 2) - (Measurement.Y / 2);                      Position = LocalCopy;                      break;              }
Missing Default,Gonzo.Elements,UITextEdit,C:\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UITextEdit.cs,UITextEdit,The following switch statement is missing a default case: switch (Font)              {                  case 9:                      m_Font = Screen.Font9px;                      break;                  case 10:                      m_Font = Screen.Font10px;                      break;                  case 12:                      m_Font = Screen.Font12px;                      break;                  case 14:                      m_Font = Screen.Font14px;                      break;                  case 16:                      m_Font = Screen.Font16px;                      break;              }
Missing Default,Gonzo.Elements,UITextEdit,C:\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UITextEdit.cs,UITextEdit,The following switch statement is missing a default case: switch(Font)              {                  case 9:                      m_Font = Screen.Font9px;                      break;                  case 10:                      m_Font = Screen.Font10px;                      break;                  case 12:                      m_Font = Screen.Font12px;                      break;                  case 14:                      m_Font = Screen.Font14px;                      break;                  case 16:                      m_Font = Screen.Font16px;                      break;              }
Missing Default,Gonzo.Elements,UITextEdit,C:\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UITextEdit.cs,Update,The following switch statement is missing a default case: switch (K)                              {                                  case Keys.Divide:                                      if (m_Cursor.CharacterIndex < m_Lines[m_Cursor.LineIndex].SBuilder.Length)                                          m_Lines[m_Cursor.LineIndex].SBuilder[m_Cursor.CharacterIndex] = '/';                                      else                                          m_Lines[m_Cursor.LineIndex].SBuilder.Append("/");                                        m_Cursor.Position.X += m_Font.MeasureString("/").X;                                      m_Cursor.CharacterIndex++;                                        m_RemovingTxt = false;                                      break;                                  case Keys.OemSemicolon:                                      if (Input.InputRegion != null)                                      {                                          switch (Input.InputRegion.LayoutName)                                          {                                              case "English":                                                  if (m_Cursor.CharacterIndex < m_Lines[m_Cursor.LineIndex].SBuilder.Length)                                                      m_Lines[m_Cursor.LineIndex].SBuilder[m_Cursor.CharacterIndex] = ';';                                                  else                                                      m_Lines[m_Cursor.LineIndex].SBuilder.Append(";");                                                    m_Cursor.CharacterIndex++;                                                  m_MovingCursor = false;                                                  m_RemovingTxt = false;                                                  m_Cursor.Position.X += m_Font.MeasureString(";").X;                                                  break;                                          }                                      }                                      break;                                  case Keys.OemQuotes:                                      if (Input.InputRegion != null)                                      {                                          switch (Input.InputRegion.LayoutName)                                          {                                              case "English": //TODO: Should this be double quote if upper??                                                  if (m_Cursor.CharacterIndex < m_Lines[m_Cursor.LineIndex].SBuilder.Length)                                                      m_Lines[m_Cursor.LineIndex].SBuilder[m_Cursor.CharacterIndex] = '\'';                                                  else                                                      m_Lines[m_Cursor.LineIndex].SBuilder.Append("'");                                                    m_Cursor.CharacterIndex++;                                                  m_MovingCursor = false;                                                  m_RemovingTxt = false;                                                  m_Cursor.Position.X += m_Font.MeasureString("'").X;                                                  break;                                          }                                      }                                      break;                                  case Keys.OemCloseBrackets:                                      if (Input.InputRegion != null)                                      {                                          switch (Input.InputRegion.LayoutName)                                          {                                              case "English":                                                  if (m_Cursor.CharacterIndex < m_Lines[m_Cursor.LineIndex].SBuilder.Length)                                                      m_Lines[m_Cursor.LineIndex].SBuilder[m_Cursor.CharacterIndex] = '}';                                                  else                                                      m_Lines[m_Cursor.LineIndex].SBuilder.Append("}");                                                    m_Cursor.Position.X += m_Font.MeasureString("}").X;                                                  break;                                              case "Norwegian":                                              case "Swedish":                                              case "Finnish":                                              case "Danish":                                                  if (IsUpperCase(Input))                                                  {                                                      if (m_Cursor.CharacterIndex < m_Lines[m_Cursor.LineIndex].SBuilder.Length)                                                          m_Lines[m_Cursor.LineIndex].SBuilder[m_Cursor.CharacterIndex] = '^';                                                      else                                                          m_Lines[m_Cursor.LineIndex].SBuilder.Append("^");                                                        m_Cursor.Position.X += m_Font.MeasureString("^").X;                                                  }                                                  else if (Input.IsCurPress(Keys.RightAlt))                                                  {                                                      if (m_Cursor.CharacterIndex < m_Lines[m_Cursor.LineIndex].SBuilder.Length)                                                          m_Lines[m_Cursor.LineIndex].SBuilder[m_Cursor.CharacterIndex] = '~';                                                      else                                                          m_Lines[m_Cursor.LineIndex].SBuilder.Append("~");                                                        m_Cursor.Position.X += m_Font.MeasureString("~").X;                                                  }                                                  break;                                          }                                      }                                        m_Cursor.CharacterIndex++;                                      m_MovingCursor = false;                                      m_RemovingTxt = false;                                      break;                                  case Keys.OemPlus:                                      if (m_Cursor.CharacterIndex < m_Lines[m_Cursor.LineIndex].SBuilder.Length)                                          m_Lines[m_Cursor.LineIndex].SBuilder[m_Cursor.CharacterIndex] = '+';                                      else                                          m_Lines[m_Cursor.LineIndex].SBuilder.Append("+");                                        m_Cursor.Position.X += m_Font.MeasureString("+").X;                                        m_Cursor.CharacterIndex++;                                      m_MovingCursor = false;                                      m_RemovingTxt = false;                                      break;                                  case Keys.OemComma:                                      if (IsUpperCase(Input))                                      {                                          if (m_Cursor.CharacterIndex < m_Lines[m_Cursor.LineIndex].SBuilder.Length)                                              m_Lines[m_Cursor.LineIndex].SBuilder[m_Cursor.CharacterIndex] = ';';                                          else                                              m_Lines[m_Cursor.LineIndex].SBuilder.Append(";");                                            m_Cursor.Position.X += m_Font.MeasureString(";").X;                                      }                                      else                                      {                                          if (m_Cursor.CharacterIndex < m_Lines[m_Cursor.LineIndex].SBuilder.Length)                                              m_Lines[m_Cursor.LineIndex].SBuilder[m_Cursor.CharacterIndex] = ''';                                          else                                              m_Lines[m_Cursor.LineIndex].SBuilder.Append("'");                                            m_Cursor.Position.X += m_Font.MeasureString("'").X;                                      }                                        m_Cursor.CharacterIndex++;                                      m_MovingCursor = false;                                      m_RemovingTxt = false;                                      break;                                  case Keys.OemPeriod:                                      if (m_Cursor.CharacterIndex < m_Lines[m_Cursor.LineIndex].SBuilder.Length)                                          m_Lines[m_Cursor.LineIndex].SBuilder[m_Cursor.CharacterIndex] = '.';                                      else                                          m_Lines[m_Cursor.LineIndex].SBuilder.Append(".");                                        m_Cursor.Position.X += m_Font.MeasureString(".").X;                                        m_Cursor.CharacterIndex++;                                      m_MovingCursor = false;                                      m_RemovingTxt = false;                                      break;                                  case Keys.Space:                                      if (m_Cursor.CharacterIndex < m_Lines[m_Cursor.LineIndex].SBuilder.Length)                                          m_Lines[m_Cursor.LineIndex].SBuilder[m_Cursor.CharacterIndex] = ' ';                                      else                                          m_Lines[m_Cursor.LineIndex].SBuilder.Append(" ");                                        m_Cursor.Position.X += m_Font.MeasureString(" ").X;                                        m_Cursor.CharacterIndex++;                                      m_MovingCursor = false;                                      m_RemovingTxt = false;                                      break;                                  case Keys.Tab:                                      if (m_Cursor.CharacterIndex < m_Lines[m_Cursor.LineIndex].SBuilder.Length)                                          m_Lines[m_Cursor.LineIndex].SBuilder.Append("   "); //TODO: How to insert tab??                                      else                                          m_Lines[m_Cursor.LineIndex].SBuilder.Append("   ");                                        m_Cursor.Position.X += m_Font.MeasureString("   ").X;                                        m_Cursor.CharacterIndex++;                                      m_MovingCursor = false;                                      m_RemovingTxt = false;                                      break;                                  case Keys.Subtract:                                      if (m_Cursor.CharacterIndex < m_Lines[m_Cursor.LineIndex].SBuilder.Length)                                          m_Lines[m_Cursor.LineIndex].SBuilder[m_Cursor.CharacterIndex] = '-';                                      else                                          m_Lines[m_Cursor.LineIndex].SBuilder.Append("-");                                        m_Cursor.Position.X += m_Font.MeasureString("-").X;                                        m_Cursor.CharacterIndex++;                                      m_MovingCursor = false;                                      m_RemovingTxt = false;                                      break;                                  case Keys.NumPad0:                                      if (m_Cursor.CharacterIndex < m_Lines[m_Cursor.LineIndex].SBuilder.Length)                                          m_Lines[m_Cursor.LineIndex].SBuilder[m_Cursor.CharacterIndex] = '0';                                      else                                          m_Lines[m_Cursor.LineIndex].SBuilder.Append("0");                                        m_Cursor.Position.X += m_Font.MeasureString("0").X;                                        m_Cursor.CharacterIndex++;                                      m_MovingCursor = false;                                      m_RemovingTxt = false;                                      break;                                  case Keys.NumPad1:                                      if (m_Cursor.CharacterIndex < m_Lines[m_Cursor.LineIndex].SBuilder.Length)                                          m_Lines[m_Cursor.LineIndex].SBuilder[m_Cursor.CharacterIndex] = '1';                                      else                                          m_Lines[m_Cursor.LineIndex].SBuilder.Append("1");                                        m_Cursor.Position.X += m_Font.MeasureString("1").X;                                        m_Cursor.CharacterIndex++;                                      m_MovingCursor = false;                                      m_RemovingTxt = false;                                      break;                                  case Keys.NumPad2:                                      if (m_Cursor.CharacterIndex < m_Lines[m_Cursor.LineIndex].SBuilder.Length)                                          m_Lines[m_Cursor.LineIndex].SBuilder[m_Cursor.CharacterIndex] = '2';                                      else                                          m_Lines[m_Cursor.LineIndex].SBuilder.Append("2");                                        m_Cursor.Position.X += m_Font.MeasureString("2").X;                                        m_Cursor.CharacterIndex++;                                      m_MovingCursor = false;                                      m_RemovingTxt = false;                                      break;                                  case Keys.NumPad3:                                      if (m_Cursor.CharacterIndex < m_Lines[m_Cursor.LineIndex].SBuilder.Length)                                          m_Lines[m_Cursor.LineIndex].SBuilder[m_Cursor.CharacterIndex] = '3';                                      else                                          m_Lines[m_Cursor.LineIndex].SBuilder.Append("3");                                        m_Cursor.Position.X += m_Font.MeasureString("3").X;                                        m_Cursor.CharacterIndex++;                                      m_MovingCursor = false;                                      m_RemovingTxt = false;                                      break;                                  case Keys.NumPad4:                                      if (m_Cursor.CharacterIndex < m_Lines[m_Cursor.LineIndex].SBuilder.Length)                                          m_Lines[m_Cursor.LineIndex].SBuilder[m_Cursor.CharacterIndex] = '4';                                      else                                          m_Lines[m_Cursor.LineIndex].SBuilder.Append("4");                                        m_Cursor.Position.X += m_Font.MeasureString("4").X;                                        m_Cursor.CharacterIndex++;                                      m_MovingCursor = false;                                      m_RemovingTxt = false;                                      break;                                  case Keys.NumPad5:                                      if (m_Cursor.CharacterIndex < m_Lines[m_Cursor.LineIndex].SBuilder.Length)                                          m_Lines[m_Cursor.LineIndex].SBuilder[m_Cursor.CharacterIndex] = '5';                                      else                                          m_Lines[m_Cursor.LineIndex].SBuilder.Append("5");                                        m_Cursor.Position.X += m_Font.MeasureString("5").X;                                        m_Cursor.CharacterIndex++;                                      m_MovingCursor = false;                                      m_RemovingTxt = false;                                      break;                                  case Keys.NumPad6:                                      if (m_Cursor.CharacterIndex < m_Lines[m_Cursor.LineIndex].SBuilder.Length)                                          m_Lines[m_Cursor.LineIndex].SBuilder[m_Cursor.CharacterIndex] = '6';                                      else                                          m_Lines[m_Cursor.LineIndex].SBuilder.Append("6");                                        m_Cursor.Position.X += m_Font.MeasureString("6").X;                                        m_Cursor.CharacterIndex++;                                      m_MovingCursor = false;                                      m_RemovingTxt = false;                                      break;                                  case Keys.NumPad7:                                      if (m_Cursor.CharacterIndex < m_Lines[m_Cursor.LineIndex].SBuilder.Length)                                          m_Lines[m_Cursor.LineIndex].SBuilder[m_Cursor.CharacterIndex] = '7';                                      m_Cursor.Position.X += m_Font.MeasureString("7").X;                                        m_Cursor.CharacterIndex++;                                      m_MovingCursor = false;                                      m_RemovingTxt = false;                                      break;                                  case Keys.NumPad8:                                      if (m_Cursor.CharacterIndex < m_Lines[m_Cursor.LineIndex].SBuilder.Length)                                          m_Lines[m_Cursor.LineIndex].SBuilder[m_Cursor.CharacterIndex] = '8';                                      else                                          m_Lines[m_Cursor.LineIndex].SBuilder.Append("8");                                        m_Cursor.Position.X += m_Font.MeasureString("8").X;                                        m_Cursor.CharacterIndex++;                                      m_MovingCursor = false;                                      m_RemovingTxt = false;                                      break;                                  case Keys.NumPad9:                                      if (m_Cursor.CharacterIndex < m_Lines[m_Cursor.LineIndex].SBuilder.Length)                                          m_Lines[m_Cursor.LineIndex].SBuilder[m_Cursor.CharacterIndex] = '9';                                      else                                          m_Lines[m_Cursor.LineIndex].SBuilder.Append("9");                                        m_Cursor.Position.X += m_Font.MeasureString("9").X;                                        m_Cursor.CharacterIndex++;                                      m_MovingCursor = false;                                      m_RemovingTxt = false;                                      break;                                  case Keys.Multiply:                                      if (m_Cursor.CharacterIndex < m_Lines[m_Cursor.LineIndex].SBuilder.Length)                                          m_Lines[m_Cursor.LineIndex].SBuilder[m_Cursor.CharacterIndex] = '*';                                      else                                          m_Lines[m_Cursor.LineIndex].SBuilder.Append("*");                                        m_Cursor.Position.X += m_Font.MeasureString("*").X;                                        m_Cursor.CharacterIndex++;                                      m_MovingCursor = false;                                      m_RemovingTxt = false;                                      break;                                  case Keys.Enter:                                      if (m_NumLines > 1)                                      {                                          m_TextPosition.X = Position.X;                                          m_TextPosition.Y += m_Font.LineSpacing;                                          m_Lines.Add(new RenderableText() { SBuilder = new StringBuilder()' Position = m_TextPosition });                                            m_Cursor.Position.X = Position.X;                                          m_Cursor.Position.Y += m_Font.LineSpacing;                                          m_Cursor.LineIndex += 1;                                          m_Cursor.CharacterIndex = 0;                                            m_MovingCursor = false;                                          m_RemovingTxt = false;                                      }                                      break;                                  case Keys.Back:                                      m_RemovingTxt = true;                                        //Cursor hasn't been moved.                                      if (!m_MovingCursor)                                      {                                          if (m_Cursor.Position.X <= m_VerticalTextBoundary)                                              m_Cursor.Position.X = m_VerticalTextBoundary;                                          else                                          {                                              if (m_Cursor.Position.X > Position.X)                                                  m_Cursor.Position.X -= m_Font.MeasureString("a").X;                                          }                                      }                                        //If the current line is empty' move the cursor up.                                      if (m_Lines[m_Cursor.LineIndex].SBuilder.Length == 0)                                      {                                          if (m_NumLines > 1)                                          {                                              if (m_TextPosition.Y > Position.Y)                                              {                                                  m_TextPosition.Y -= m_Font.LineSpacing;                                                    m_Cursor.Position.X = Position.X + m_Size.X;                                                  m_Cursor.Position.Y -= m_Font.LineSpacing;                                              }                                                if (m_Cursor.LineIndex > 0)                                              {                                                  m_Cursor.LineIndex--;                                                  m_Cursor.CharacterIndex = m_Lines[m_Cursor.LineIndex].SBuilder.Length;                                              }                                          }                                          else                                          {                                              if (m_Cursor.LineIndex > 0)                                                  m_Cursor.LineIndex--;                                          }                                      }                                      else                                      {                                          if (m_NumLines > 1)                                          {                                              m_Lines[m_Cursor.LineIndex].SBuilder.Remove((int)(m_Cursor.CharacterIndex - 1)' 1);                                              m_Cursor.CharacterIndex--;                                              m_Cursor.Position.X -= m_Font.MeasureString("a").X;                                          }                                          else                                          {                                              m_Lines.Remove(m_Lines[m_Cursor.CharacterIndex]);                                              m_Cursor.CharacterIndex--;                                              m_Cursor.LineIndex--;                                              m_Cursor.Position.X -= m_Font.MeasureString("a").X;                                          }                                      }                                        //Cursor moved to the beginning of a line.                                      if (m_Cursor.Position.X <= Position.X)                                      {                                          if (m_TextPosition.Y > Position.Y)                                          {                                              m_TextPosition.Y -= m_Font.LineSpacing;                                                m_Cursor.Position.X = Position.X + m_Size.X;                                              m_Cursor.Position.Y -= m_Font.LineSpacing;                                          }                                            if (m_Cursor.LineIndex > 0)                                          {                                              m_Cursor.LineIndex--;                                              m_Cursor.CharacterIndex = m_Lines[m_Cursor.LineIndex].SBuilder.Length;                                          }                                      }                                      break;                                  case Keys.Left:                                      if (m_Cursor.Position.X > Position.X)                                      {                                          m_Cursor.Position.X -= m_Font.MeasureString("a").X;                                          m_Cursor.CharacterIndex--;                                            if (m_NumLines == 1)                                              m_Cursor.LineIndex--;                                      }                                      else if (m_Cursor.Position.X <= Position.X)                                      {                                          if (m_NumLines == 1)                                          {                                              for (int i = 0; i < m_Lines.Count; i++)                                              {                                                  //Don't know why Line[0] doesn't work here...                                                  if ((m_Lines[1].Position.X < Position.X))                                                      m_Lines[i].Position.X += m_ScrollFactor;                                                    if (m_Lines[i].Position.X > (Position.X + Size.X))                                                      m_Lines[i].Visible = false;                                                    if (m_Lines[i].Position.X > Position.X && m_Lines[i].Position.X < (Position.X + Size.X))                                                      m_Lines[i].Visible = true;                                              }                                          }                                      }                                        m_MovingCursor = true;                                      m_RemovingTxt = false;                                      break;                                  case Keys.Right:                                      if (m_Cursor.Position.X < (Position.X + m_Size.X))                                      {                                          if (m_NumLines > 1)                                          {                                              if (m_Lines[m_Cursor.LineIndex].SBuilder.Length > 0 &&                                                  m_Cursor.CharacterIndex < m_Lines[m_Cursor.LineIndex].SBuilder.Length)                                              {                                                  m_Cursor.Position.X += m_Font.MeasureString("a").X;                                                  m_Cursor.CharacterIndex++;                                              }                                          }                                          else //Single-line control' simple.                                          {                                              m_Cursor.Position.X += m_Font.MeasureString("a").X;                                              m_Cursor.CharacterIndex++;                                              m_Cursor.LineIndex++;                                          }                                      }                                      else if (m_Cursor.Position.X >= (Position.X + m_Size.X))                                      {                                          if (m_NumLines == 1)                                          {                                              for (int i = 0; i < m_Lines.Count; i++)                                              {                                                  if ((m_Lines[m_Lines.Count - 1].Position.X >= (Position.X + m_Size.X)))                                                      m_Lines[i].Position.X -= m_ScrollFactor;                                                    if (m_Lines[i].Position.X < (Position.X + Size.X))                                                      m_Lines[i].Visible = true;                                                    if (m_Lines[i].Position.X < (Position.X + Size.X) &&                                                      m_Lines[i].Position.X < Position.X)                                                      m_Lines[i].Visible = false;                                              }                                          }                                      }                                        m_MovingCursor = true;                                      m_RemovingTxt = false;                                      break;                                  case Keys.Up:                                      if (m_NumLines > 1)                                      {                                          if (m_Cursor.Position.Y > Position.Y)                                          {                                              m_Cursor.Position.Y -= m_Font.LineSpacing;                                              m_Cursor.LineIndex--;                                                //Part of a line was most likely deleted' so readjust the cursor accordingly.                                              if (m_Cursor.CharacterIndex > m_Lines[m_Cursor.LineIndex].SBuilder.Length)                                              {                                                  m_Cursor.CharacterIndex = m_Lines[m_Cursor.LineIndex].SBuilder.Length;                                                  m_Cursor.Position.X = Position.X +                                                      m_Font.MeasureString(m_Lines[m_Cursor.LineIndex].SBuilder.ToString()).X;                                              }                                          }                                            m_MovingCursor = true;                                          m_RemovingTxt = false;                                      }                                      break;                                  case Keys.Down:                                      if (m_NumLines > 1)                                      {                                          if (m_Cursor.Position.Y < (Position.Y + m_Size.Y))                                          {                                              if (m_Lines.Count >= 2)                                              {                                                  if (m_Cursor.Position.Y < m_Lines[m_Lines.Count - 1].Position.Y)                                                  {                                                      m_Cursor.Position.Y += m_Font.LineSpacing;                                                      m_Cursor.LineIndex++;                                                        //Part of a line was most likely deleted' so readjust the cursor accordingly.                                                      if (m_Cursor.CharacterIndex > m_Lines[m_Cursor.LineIndex].SBuilder.Length)                                                      {                                                          m_Cursor.CharacterIndex = m_Lines[m_Cursor.LineIndex].SBuilder.Length;                                                          m_Cursor.Position.X = Position.X +                                                              m_Font.MeasureString(m_Lines[m_Cursor.LineIndex].SBuilder.ToString()).X;                                                      }                                                  }                                              }                                          }                                            m_MovingCursor = true;                                          m_RemovingTxt = false;                                      }                                      break;                              }
Missing Default,Gonzo.Elements,UITextEdit,C:\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UITextEdit.cs,Update,The following switch statement is missing a default case: switch (Input.InputRegion.LayoutName)                                          {                                              case "English":                                                  if (m_Cursor.CharacterIndex < m_Lines[m_Cursor.LineIndex].SBuilder.Length)                                                      m_Lines[m_Cursor.LineIndex].SBuilder[m_Cursor.CharacterIndex] = ';';                                                  else                                                      m_Lines[m_Cursor.LineIndex].SBuilder.Append(";");                                                    m_Cursor.CharacterIndex++;                                                  m_MovingCursor = false;                                                  m_RemovingTxt = false;                                                  m_Cursor.Position.X += m_Font.MeasureString(";").X;                                                  break;                                          }
Missing Default,Gonzo.Elements,UITextEdit,C:\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UITextEdit.cs,Update,The following switch statement is missing a default case: switch (Input.InputRegion.LayoutName)                                          {                                              case "English": //TODO: Should this be double quote if upper??                                                  if (m_Cursor.CharacterIndex < m_Lines[m_Cursor.LineIndex].SBuilder.Length)                                                      m_Lines[m_Cursor.LineIndex].SBuilder[m_Cursor.CharacterIndex] = '\'';                                                  else                                                      m_Lines[m_Cursor.LineIndex].SBuilder.Append("'");                                                    m_Cursor.CharacterIndex++;                                                  m_MovingCursor = false;                                                  m_RemovingTxt = false;                                                  m_Cursor.Position.X += m_Font.MeasureString("'").X;                                                  break;                                          }
Missing Default,Gonzo.Elements,UITextEdit,C:\repos\Afr0_Project-Dollhouse\TSOClient\Gonzo\Gonzo\Elements\UITextEdit.cs,Update,The following switch statement is missing a default case: switch (Input.InputRegion.LayoutName)                                          {                                              case "English":                                                  if (m_Cursor.CharacterIndex < m_Lines[m_Cursor.LineIndex].SBuilder.Length)                                                      m_Lines[m_Cursor.LineIndex].SBuilder[m_Cursor.CharacterIndex] = '}';                                                  else                                                      m_Lines[m_Cursor.LineIndex].SBuilder.Append("}");                                                    m_Cursor.Position.X += m_Font.MeasureString("}").X;                                                  break;                                              case "Norwegian":                                              case "Swedish":                                              case "Finnish":                                              case "Danish":                                                  if (IsUpperCase(Input))                                                  {                                                      if (m_Cursor.CharacterIndex < m_Lines[m_Cursor.LineIndex].SBuilder.Length)                                                          m_Lines[m_Cursor.LineIndex].SBuilder[m_Cursor.CharacterIndex] = '^';                                                      else                                                          m_Lines[m_Cursor.LineIndex].SBuilder.Append("^");                                                        m_Cursor.Position.X += m_Font.MeasureString("^").X;                                                  }                                                  else if (Input.IsCurPress(Keys.RightAlt))                                                  {                                                      if (m_Cursor.CharacterIndex < m_Lines[m_Cursor.LineIndex].SBuilder.Length)                                                          m_Lines[m_Cursor.LineIndex].SBuilder[m_Cursor.CharacterIndex] = '~';                                                      else                                                          m_Lines[m_Cursor.LineIndex].SBuilder.Append("~");                                                        m_Cursor.Position.X += m_Font.MeasureString("~").X;                                                  }                                                  break;                                          }
