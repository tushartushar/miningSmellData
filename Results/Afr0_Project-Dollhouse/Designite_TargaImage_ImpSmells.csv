Implementation smell,Namespace,Class,File,Method,Description
Long Method,Paloma,TargaImage,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,LoadTGAHeaderInfo,The method has 133 lines of code.
Long Method,Paloma,TargaImage,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,LoadImageBytes,The method has 180 lines of code.
Complex Method,Paloma,TargaImage,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,LoadTGAHeaderInfo,Cyclomatic complexity of the method is 13
Complex Method,Paloma,TargaImage,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,LoadTGAExtensionArea,Cyclomatic complexity of the method is 8
Complex Method,Paloma,TargaImage,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,LoadImageBytes,Cyclomatic complexity of the method is 20
Complex Method,Paloma,TargaImage,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,LoadTGAImage,Cyclomatic complexity of the method is 10
Complex Method,Paloma,TargaImage,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,GetPixelFormat,Cyclomatic complexity of the method is 9
Complex Method,Paloma,TargaImage,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,LoadThumbnail,Cyclomatic complexity of the method is 14
Complex Method,Paloma,TargaImage,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,Dispose,Cyclomatic complexity of the method is 9
Long Identifier,Paloma,TargaConstants,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,,The length of the parameter ExtensionAreaAuthorNameByteLength is 33.
Long Identifier,Paloma,TargaConstants,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,,The length of the parameter ExtensionAreaAuthorCommentsByteLength is 37.
Long Identifier,Paloma,TargaConstants,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,,The length of the parameter ExtensionAreaJobNameByteLength is 30.
Long Identifier,Paloma,TargaConstants,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,,The length of the parameter ExtensionAreaSoftwareIDByteLength is 33.
Long Identifier,Paloma,TargaConstants,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,,The length of the parameter ExtensionAreaSoftwareVersionLetterByteLength is 44.
Long Identifier,Paloma,TargaConstants,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,,The length of the parameter ExtensionAreaColorCorrectionTableValueLength is 44.
Long Statement,Paloma,TargaImage,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,LoadTGAFooterInfo,The length of the statement  "                if (binReader != null && binReader.BaseStream != null && binReader.BaseStream.Length > 0 && binReader.BaseStream.CanSeek == true) " is 129.
Long Statement,Paloma,TargaImage,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,LoadTGAFooterInfo,The length of the statement  "                        string Signature = System.Text.Encoding.ASCII.GetString(binReader.ReadBytes(TargaConstants.FooterSignatureByteLength)).TrimEnd('\0'); " is 133.
Long Statement,Paloma,TargaImage,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,LoadTGAFooterInfo,The length of the statement  "                        if (string.Compare(Signature' TargaConstants.TargaFooterASCIISignature' StringComparison.InvariantCultureIgnoreCase) == 0) " is 122.
Long Statement,Paloma,TargaImage,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,LoadTGAFooterInfo,The length of the statement  "                            string ResChar = System.Text.Encoding.ASCII.GetString(binReader.ReadBytes(TargaConstants.FooterReservedCharByteLength)).TrimEnd('\0'); " is 134.
Long Statement,Paloma,TargaImage,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,LoadTGAHeaderInfo,The length of the statement  "            if (binReader != null && binReader.BaseStream != null && binReader.BaseStream.Length > 0 && binReader.BaseStream.CanSeek == true) " is 129.
Long Statement,Paloma,TargaImage,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,LoadTGAExtensionArea,The length of the statement  "            if (binReader != null && binReader.BaseStream != null && binReader.BaseStream.Length > 0 && binReader.BaseStream.CanSeek == true) " is 129.
Long Statement,Paloma,TargaImage,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,LoadTGAExtensionArea,The length of the statement  "                        this.objTargaExtensionArea.SetAuthorName(System.Text.Encoding.ASCII.GetString(binReader.ReadBytes(TargaConstants.ExtensionAreaAuthorNameByteLength)).TrimEnd('\0')); " is 164.
Long Statement,Paloma,TargaImage,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,LoadTGAExtensionArea,The length of the statement  "                        this.objTargaExtensionArea.SetAuthorComments(System.Text.Encoding.ASCII.GetString(binReader.ReadBytes(TargaConstants.ExtensionAreaAuthorCommentsByteLength)).TrimEnd('\0')); " is 172.
Long Statement,Paloma,TargaImage,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,LoadTGAExtensionArea,The length of the statement  "                        string strStamp = iMonth.ToString(CultureInfo.CurrentCulture) + @"/" + iDay.ToString(CultureInfo.CurrentCulture) + @"/" + iYear.ToString(CultureInfo.CurrentCulture) + @" "; " is 172.
Long Statement,Paloma,TargaImage,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,LoadTGAExtensionArea,The length of the statement  "                        strStamp += iHour.ToString(CultureInfo.CurrentCulture) + @":" + iMinute.ToString(CultureInfo.CurrentCulture) + @":" + iSecond.ToString(CultureInfo.CurrentCulture); " is 163.
Long Statement,Paloma,TargaImage,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,LoadTGAExtensionArea,The length of the statement  "                        this.objTargaExtensionArea.SetJobName(System.Text.Encoding.ASCII.GetString(binReader.ReadBytes(TargaConstants.ExtensionAreaJobNameByteLength)).TrimEnd('\0')); " is 158.
Long Statement,Paloma,TargaImage,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,LoadTGAExtensionArea,The length of the statement  "                        this.objTargaExtensionArea.SetSoftwareID(System.Text.Encoding.ASCII.GetString(binReader.ReadBytes(TargaConstants.ExtensionAreaSoftwareIDByteLength)).TrimEnd('\0')); " is 164.
Long Statement,Paloma,TargaImage,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,LoadTGAExtensionArea,The length of the statement  "                        string strVersionLetter = System.Text.Encoding.ASCII.GetString(binReader.ReadBytes(TargaConstants.ExtensionAreaSoftwareVersionLetterByteLength)).TrimEnd('\0'); " is 159.
Long Statement,Paloma,TargaImage,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,LoadTGAExtensionArea,The length of the statement  "                        this.objTargaExtensionArea.SetSoftwareID(iVersionNumber.ToString(@"F2"' CultureInfo.CurrentCulture) + strVersionLetter); " is 120.
Long Statement,Paloma,TargaImage,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,LoadImageBytes,The length of the statement  "            if (binReader != null && binReader.BaseStream != null && binReader.BaseStream.Length > 0 && binReader.BaseStream.CanSeek == true) " is 129.
Long Statement,Paloma,TargaImage,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,LoadTGAImage,The length of the statement  "            this.intStride = (((int)this.objTargaHeader.Width * (int)this.objTargaHeader.PixelDepth + 31) & ~31) >> 3; // width in bytes " is 124.
Long Statement,Paloma,TargaImage,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,LoadTGAImage,The length of the statement  "                        pal.Entries[i] = Color.FromArgb(255' this.objTargaHeader.ColorMap[i].R' this.objTargaHeader.ColorMap[i].G' this.objTargaHeader.ColorMap[i].B); " is 142.
Long Statement,Paloma,TargaImage,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,LoadThumbnail,The length of the statement  "            if (binReader != null && binReader.BaseStream != null && binReader.BaseStream.Length > 0 && binReader.BaseStream.CanSeek == true) " is 129.
Long Statement,Paloma,TargaImage,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,LoadThumbnail,The length of the statement  "                    System.Collections.Generic.List<System.Collections.Generic.List<byte>> objRows = new System.Collections.Generic.List<System.Collections.Generic.List<byte>>(); " is 158.
Complex Conditional,Paloma,TargaImage,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,LoadTGAFooterInfo,The conditional expression  "binReader != null && binReader.BaseStream != null && binReader.BaseStream.Length > 0 && binReader.BaseStream.CanSeek == true"  is complex.
Complex Conditional,Paloma,TargaImage,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,LoadTGAHeaderInfo,The conditional expression  "binReader != null && binReader.BaseStream != null && binReader.BaseStream.Length > 0 && binReader.BaseStream.CanSeek == true"  is complex.
Complex Conditional,Paloma,TargaImage,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,LoadTGAExtensionArea,The conditional expression  "binReader != null && binReader.BaseStream != null && binReader.BaseStream.Length > 0 && binReader.BaseStream.CanSeek == true"  is complex.
Complex Conditional,Paloma,TargaImage,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,LoadImageBytes,The conditional expression  "binReader != null && binReader.BaseStream != null && binReader.BaseStream.Length > 0 && binReader.BaseStream.CanSeek == true"  is complex.
Complex Conditional,Paloma,TargaImage,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,LoadThumbnail,The conditional expression  "binReader != null && binReader.BaseStream != null && binReader.BaseStream.Length > 0 && binReader.BaseStream.CanSeek == true"  is complex.
Magic Number,Paloma,TargaImage,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,LoadTGAHeaderInfo,The following statement contains a magic number: switch (pixeldepth)                      {                          case 8:                          case 16:                          case 24:                          case 32:                              this.objTargaHeader.SetPixelDepth(pixeldepth);                              break;                            default:                              this.ClearAll();                              throw new IOException("Targa Image only supports 8' 16' 24' or 32 bit pixel depths.");                      }
Magic Number,Paloma,TargaImage,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,LoadTGAHeaderInfo,The following statement contains a magic number: switch (pixeldepth)                      {                          case 8:                          case 16:                          case 24:                          case 32:                              this.objTargaHeader.SetPixelDepth(pixeldepth);                              break;                            default:                              this.ClearAll();                              throw new IOException("Targa Image only supports 8' 16' 24' or 32 bit pixel depths.");                      }
Magic Number,Paloma,TargaImage,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,LoadTGAHeaderInfo,The following statement contains a magic number: switch (pixeldepth)                      {                          case 8:                          case 16:                          case 24:                          case 32:                              this.objTargaHeader.SetPixelDepth(pixeldepth);                              break;                            default:                              this.ClearAll();                              throw new IOException("Targa Image only supports 8' 16' 24' or 32 bit pixel depths.");                      }
Magic Number,Paloma,TargaImage,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,LoadTGAHeaderInfo,The following statement contains a magic number: switch (pixeldepth)                      {                          case 8:                          case 16:                          case 24:                          case 32:                              this.objTargaHeader.SetPixelDepth(pixeldepth);                              break;                            default:                              this.ClearAll();                              throw new IOException("Targa Image only supports 8' 16' 24' or 32 bit pixel depths.");                      }
Magic Number,Paloma,TargaImage,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,LoadTGAHeaderInfo,The following statement contains a magic number: this.objTargaHeader.SetAttributeBits((byte)Utilities.GetBits(ImageDescriptor' 0' 4));
Magic Number,Paloma,TargaImage,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,LoadTGAHeaderInfo,The following statement contains a magic number: this.objTargaHeader.SetVerticalTransferOrder((VerticalTransferOrder)Utilities.GetBits(ImageDescriptor' 5' 1));
Magic Number,Paloma,TargaImage,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,LoadTGAHeaderInfo,The following statement contains a magic number: this.objTargaHeader.SetHorizontalTransferOrder((HorizontalTransferOrder)Utilities.GetBits(ImageDescriptor' 4' 1));
Magic Number,Paloma,TargaImage,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,LoadTGAHeaderInfo,The following statement contains a magic number: switch (this.objTargaHeader.ColorMapEntrySize)                                      {                                          case 15:                                              byte[] color15 = binReader.ReadBytes(2);                                              // remember that the bytes are stored in reverse oreder                                              this.objTargaHeader.ColorMap.Add(Utilities.GetColorFrom2Bytes(color15[1]' color15[0]));                                              break;                                          case 16:                                              byte[] color16 = binReader.ReadBytes(2);                                              // remember that the bytes are stored in reverse oreder                                              this.objTargaHeader.ColorMap.Add(Utilities.GetColorFrom2Bytes(color16[1]' color16[0]));                                              break;                                          case 24:                                              b = Convert.ToInt32(binReader.ReadByte());                                              g = Convert.ToInt32(binReader.ReadByte());                                              r = Convert.ToInt32(binReader.ReadByte());                                              this.objTargaHeader.ColorMap.Add(System.Drawing.Color.FromArgb(r' g' b));                                              break;                                          case 32:                                              a = Convert.ToInt32(binReader.ReadByte());                                              b = Convert.ToInt32(binReader.ReadByte());                                              g = Convert.ToInt32(binReader.ReadByte());                                              r = Convert.ToInt32(binReader.ReadByte());                                              this.objTargaHeader.ColorMap.Add(System.Drawing.Color.FromArgb(a' r' g' b));                                              break;                                          default:                                              this.ClearAll();                                              throw new IOException("TargaImage only supports ColorMap Entry Sizes of 15' 16' 24 or 32 bits.");                                                                                    }
Magic Number,Paloma,TargaImage,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,LoadTGAHeaderInfo,The following statement contains a magic number: switch (this.objTargaHeader.ColorMapEntrySize)                                      {                                          case 15:                                              byte[] color15 = binReader.ReadBytes(2);                                              // remember that the bytes are stored in reverse oreder                                              this.objTargaHeader.ColorMap.Add(Utilities.GetColorFrom2Bytes(color15[1]' color15[0]));                                              break;                                          case 16:                                              byte[] color16 = binReader.ReadBytes(2);                                              // remember that the bytes are stored in reverse oreder                                              this.objTargaHeader.ColorMap.Add(Utilities.GetColorFrom2Bytes(color16[1]' color16[0]));                                              break;                                          case 24:                                              b = Convert.ToInt32(binReader.ReadByte());                                              g = Convert.ToInt32(binReader.ReadByte());                                              r = Convert.ToInt32(binReader.ReadByte());                                              this.objTargaHeader.ColorMap.Add(System.Drawing.Color.FromArgb(r' g' b));                                              break;                                          case 32:                                              a = Convert.ToInt32(binReader.ReadByte());                                              b = Convert.ToInt32(binReader.ReadByte());                                              g = Convert.ToInt32(binReader.ReadByte());                                              r = Convert.ToInt32(binReader.ReadByte());                                              this.objTargaHeader.ColorMap.Add(System.Drawing.Color.FromArgb(a' r' g' b));                                              break;                                          default:                                              this.ClearAll();                                              throw new IOException("TargaImage only supports ColorMap Entry Sizes of 15' 16' 24 or 32 bits.");                                                                                    }
Magic Number,Paloma,TargaImage,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,LoadTGAHeaderInfo,The following statement contains a magic number: switch (this.objTargaHeader.ColorMapEntrySize)                                      {                                          case 15:                                              byte[] color15 = binReader.ReadBytes(2);                                              // remember that the bytes are stored in reverse oreder                                              this.objTargaHeader.ColorMap.Add(Utilities.GetColorFrom2Bytes(color15[1]' color15[0]));                                              break;                                          case 16:                                              byte[] color16 = binReader.ReadBytes(2);                                              // remember that the bytes are stored in reverse oreder                                              this.objTargaHeader.ColorMap.Add(Utilities.GetColorFrom2Bytes(color16[1]' color16[0]));                                              break;                                          case 24:                                              b = Convert.ToInt32(binReader.ReadByte());                                              g = Convert.ToInt32(binReader.ReadByte());                                              r = Convert.ToInt32(binReader.ReadByte());                                              this.objTargaHeader.ColorMap.Add(System.Drawing.Color.FromArgb(r' g' b));                                              break;                                          case 32:                                              a = Convert.ToInt32(binReader.ReadByte());                                              b = Convert.ToInt32(binReader.ReadByte());                                              g = Convert.ToInt32(binReader.ReadByte());                                              r = Convert.ToInt32(binReader.ReadByte());                                              this.objTargaHeader.ColorMap.Add(System.Drawing.Color.FromArgb(a' r' g' b));                                              break;                                          default:                                              this.ClearAll();                                              throw new IOException("TargaImage only supports ColorMap Entry Sizes of 15' 16' 24 or 32 bits.");                                                                                    }
Magic Number,Paloma,TargaImage,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,LoadTGAHeaderInfo,The following statement contains a magic number: switch (this.objTargaHeader.ColorMapEntrySize)                                      {                                          case 15:                                              byte[] color15 = binReader.ReadBytes(2);                                              // remember that the bytes are stored in reverse oreder                                              this.objTargaHeader.ColorMap.Add(Utilities.GetColorFrom2Bytes(color15[1]' color15[0]));                                              break;                                          case 16:                                              byte[] color16 = binReader.ReadBytes(2);                                              // remember that the bytes are stored in reverse oreder                                              this.objTargaHeader.ColorMap.Add(Utilities.GetColorFrom2Bytes(color16[1]' color16[0]));                                              break;                                          case 24:                                              b = Convert.ToInt32(binReader.ReadByte());                                              g = Convert.ToInt32(binReader.ReadByte());                                              r = Convert.ToInt32(binReader.ReadByte());                                              this.objTargaHeader.ColorMap.Add(System.Drawing.Color.FromArgb(r' g' b));                                              break;                                          case 32:                                              a = Convert.ToInt32(binReader.ReadByte());                                              b = Convert.ToInt32(binReader.ReadByte());                                              g = Convert.ToInt32(binReader.ReadByte());                                              r = Convert.ToInt32(binReader.ReadByte());                                              this.objTargaHeader.ColorMap.Add(System.Drawing.Color.FromArgb(a' r' g' b));                                              break;                                          default:                                              this.ClearAll();                                              throw new IOException("TargaImage only supports ColorMap Entry Sizes of 15' 16' 24 or 32 bits.");                                                                                    }
Magic Number,Paloma,TargaImage,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,LoadTGAHeaderInfo,The following statement contains a magic number: switch (this.objTargaHeader.ColorMapEntrySize)                                      {                                          case 15:                                              byte[] color15 = binReader.ReadBytes(2);                                              // remember that the bytes are stored in reverse oreder                                              this.objTargaHeader.ColorMap.Add(Utilities.GetColorFrom2Bytes(color15[1]' color15[0]));                                              break;                                          case 16:                                              byte[] color16 = binReader.ReadBytes(2);                                              // remember that the bytes are stored in reverse oreder                                              this.objTargaHeader.ColorMap.Add(Utilities.GetColorFrom2Bytes(color16[1]' color16[0]));                                              break;                                          case 24:                                              b = Convert.ToInt32(binReader.ReadByte());                                              g = Convert.ToInt32(binReader.ReadByte());                                              r = Convert.ToInt32(binReader.ReadByte());                                              this.objTargaHeader.ColorMap.Add(System.Drawing.Color.FromArgb(r' g' b));                                              break;                                          case 32:                                              a = Convert.ToInt32(binReader.ReadByte());                                              b = Convert.ToInt32(binReader.ReadByte());                                              g = Convert.ToInt32(binReader.ReadByte());                                              r = Convert.ToInt32(binReader.ReadByte());                                              this.objTargaHeader.ColorMap.Add(System.Drawing.Color.FromArgb(a' r' g' b));                                              break;                                          default:                                              this.ClearAll();                                              throw new IOException("TargaImage only supports ColorMap Entry Sizes of 15' 16' 24 or 32 bits.");                                                                                    }
Magic Number,Paloma,TargaImage,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,LoadTGAHeaderInfo,The following statement contains a magic number: switch (this.objTargaHeader.ColorMapEntrySize)                                      {                                          case 15:                                              byte[] color15 = binReader.ReadBytes(2);                                              // remember that the bytes are stored in reverse oreder                                              this.objTargaHeader.ColorMap.Add(Utilities.GetColorFrom2Bytes(color15[1]' color15[0]));                                              break;                                          case 16:                                              byte[] color16 = binReader.ReadBytes(2);                                              // remember that the bytes are stored in reverse oreder                                              this.objTargaHeader.ColorMap.Add(Utilities.GetColorFrom2Bytes(color16[1]' color16[0]));                                              break;                                          case 24:                                              b = Convert.ToInt32(binReader.ReadByte());                                              g = Convert.ToInt32(binReader.ReadByte());                                              r = Convert.ToInt32(binReader.ReadByte());                                              this.objTargaHeader.ColorMap.Add(System.Drawing.Color.FromArgb(r' g' b));                                              break;                                          case 32:                                              a = Convert.ToInt32(binReader.ReadByte());                                              b = Convert.ToInt32(binReader.ReadByte());                                              g = Convert.ToInt32(binReader.ReadByte());                                              r = Convert.ToInt32(binReader.ReadByte());                                              this.objTargaHeader.ColorMap.Add(System.Drawing.Color.FromArgb(a' r' g' b));                                              break;                                          default:                                              this.ClearAll();                                              throw new IOException("TargaImage only supports ColorMap Entry Sizes of 15' 16' 24 or 32 bits.");                                                                                    }
Magic Number,Paloma,TargaImage,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,LoadTGAExtensionArea,The following statement contains a magic number: float iVersionNumber = (float)binReader.ReadInt16() / 100.0F;
Magic Number,Paloma,TargaImage,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,LoadImageBytes,The following statement contains a magic number: intRLEPacketType = Utilities.GetBits(bRLEPacket' 7' 1);
Magic Number,Paloma,TargaImage,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,LoadImageBytes,The following statement contains a magic number: intRLEPixelCount = Utilities.GetBits(bRLEPacket' 0' 7) + 1;
Magic Number,Paloma,TargaImage,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,LoadTGAImage,The following statement contains a magic number: this.intStride = (((int)this.objTargaHeader.Width * (int)this.objTargaHeader.PixelDepth + 31) & ~31) >> 3;
Magic Number,Paloma,TargaImage,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,LoadTGAImage,The following statement contains a magic number: this.intStride = (((int)this.objTargaHeader.Width * (int)this.objTargaHeader.PixelDepth + 31) & ~31) >> 3;
Magic Number,Paloma,TargaImage,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,LoadTGAImage,The following statement contains a magic number: this.intStride = (((int)this.objTargaHeader.Width * (int)this.objTargaHeader.PixelDepth + 31) & ~31) >> 3;
Magic Number,Paloma,TargaImage,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,LoadTGAImage,The following statement contains a magic number: this.intPadding = this.intStride - ((((int)this.objTargaHeader.Width * (int)this.objTargaHeader.PixelDepth) + 7) / 8);
Magic Number,Paloma,TargaImage,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,LoadTGAImage,The following statement contains a magic number: this.intPadding = this.intStride - ((((int)this.objTargaHeader.Width * (int)this.objTargaHeader.PixelDepth) + 7) / 8);
Magic Number,Paloma,TargaImage,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,LoadTGAImage,The following statement contains a magic number: pal.Entries[i] = Color.FromArgb(255' this.objTargaHeader.ColorMap[i].R' this.objTargaHeader.ColorMap[i].G' this.objTargaHeader.ColorMap[i].B);
Magic Number,Paloma,TargaImage,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,GetPixelFormat,The following statement contains a magic number: switch (this.objTargaHeader.PixelDepth)              {                  case 8:                      pfTargaPixelFormat = PixelFormat.Format8bppIndexed;                      break;                    case 16:                      //PixelFormat.Format16bppArgb1555                      //PixelFormat.Format16bppRgb555                      if (this.Format == TGAFormat.NEW_TGA)                      {                          switch (this.objTargaExtensionArea.AttributesType)                          {                              case 0:                              case 1:                              case 2: // no alpha data                                  pfTargaPixelFormat = PixelFormat.Format16bppRgb555;                                  break;                                case 3: // useful alpha data                                  pfTargaPixelFormat = PixelFormat.Format16bppArgb1555;                                  break;                          }                      }                      else                      {                          pfTargaPixelFormat = PixelFormat.Format16bppRgb555;                      }                        break;                    case 24:                      pfTargaPixelFormat = PixelFormat.Format24bppRgb;                      break;                    case 32:                      //PixelFormat.Format32bppArgb                      //PixelFormat.Format32bppPArgb                      //PixelFormat.Format32bppRgb                      if (this.Format == TGAFormat.NEW_TGA)                      {                          switch (this.objTargaExtensionArea.AttributesType)                          {                                                            case 1:                              case 2: // no alpha data                                  pfTargaPixelFormat = PixelFormat.Format32bppRgb;                                  break;                                case 0:                              case 3: // useful alpha data                                  pfTargaPixelFormat = PixelFormat.Format32bppArgb;                                  break;                                case 4: // premultiplied alpha data                                  pfTargaPixelFormat = PixelFormat.Format32bppPArgb;                                  break;                            }                      }                      else                      {                          pfTargaPixelFormat = PixelFormat.Format32bppRgb;                          break;                      }                                                                    break;                                }
Magic Number,Paloma,TargaImage,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,GetPixelFormat,The following statement contains a magic number: switch (this.objTargaHeader.PixelDepth)              {                  case 8:                      pfTargaPixelFormat = PixelFormat.Format8bppIndexed;                      break;                    case 16:                      //PixelFormat.Format16bppArgb1555                      //PixelFormat.Format16bppRgb555                      if (this.Format == TGAFormat.NEW_TGA)                      {                          switch (this.objTargaExtensionArea.AttributesType)                          {                              case 0:                              case 1:                              case 2: // no alpha data                                  pfTargaPixelFormat = PixelFormat.Format16bppRgb555;                                  break;                                case 3: // useful alpha data                                  pfTargaPixelFormat = PixelFormat.Format16bppArgb1555;                                  break;                          }                      }                      else                      {                          pfTargaPixelFormat = PixelFormat.Format16bppRgb555;                      }                        break;                    case 24:                      pfTargaPixelFormat = PixelFormat.Format24bppRgb;                      break;                    case 32:                      //PixelFormat.Format32bppArgb                      //PixelFormat.Format32bppPArgb                      //PixelFormat.Format32bppRgb                      if (this.Format == TGAFormat.NEW_TGA)                      {                          switch (this.objTargaExtensionArea.AttributesType)                          {                                                            case 1:                              case 2: // no alpha data                                  pfTargaPixelFormat = PixelFormat.Format32bppRgb;                                  break;                                case 0:                              case 3: // useful alpha data                                  pfTargaPixelFormat = PixelFormat.Format32bppArgb;                                  break;                                case 4: // premultiplied alpha data                                  pfTargaPixelFormat = PixelFormat.Format32bppPArgb;                                  break;                            }                      }                      else                      {                          pfTargaPixelFormat = PixelFormat.Format32bppRgb;                          break;                      }                                                                    break;                                }
Magic Number,Paloma,TargaImage,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,GetPixelFormat,The following statement contains a magic number: switch (this.objTargaHeader.PixelDepth)              {                  case 8:                      pfTargaPixelFormat = PixelFormat.Format8bppIndexed;                      break;                    case 16:                      //PixelFormat.Format16bppArgb1555                      //PixelFormat.Format16bppRgb555                      if (this.Format == TGAFormat.NEW_TGA)                      {                          switch (this.objTargaExtensionArea.AttributesType)                          {                              case 0:                              case 1:                              case 2: // no alpha data                                  pfTargaPixelFormat = PixelFormat.Format16bppRgb555;                                  break;                                case 3: // useful alpha data                                  pfTargaPixelFormat = PixelFormat.Format16bppArgb1555;                                  break;                          }                      }                      else                      {                          pfTargaPixelFormat = PixelFormat.Format16bppRgb555;                      }                        break;                    case 24:                      pfTargaPixelFormat = PixelFormat.Format24bppRgb;                      break;                    case 32:                      //PixelFormat.Format32bppArgb                      //PixelFormat.Format32bppPArgb                      //PixelFormat.Format32bppRgb                      if (this.Format == TGAFormat.NEW_TGA)                      {                          switch (this.objTargaExtensionArea.AttributesType)                          {                                                            case 1:                              case 2: // no alpha data                                  pfTargaPixelFormat = PixelFormat.Format32bppRgb;                                  break;                                case 0:                              case 3: // useful alpha data                                  pfTargaPixelFormat = PixelFormat.Format32bppArgb;                                  break;                                case 4: // premultiplied alpha data                                  pfTargaPixelFormat = PixelFormat.Format32bppPArgb;                                  break;                            }                      }                      else                      {                          pfTargaPixelFormat = PixelFormat.Format32bppRgb;                          break;                      }                                                                    break;                                }
Magic Number,Paloma,TargaImage,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,GetPixelFormat,The following statement contains a magic number: switch (this.objTargaHeader.PixelDepth)              {                  case 8:                      pfTargaPixelFormat = PixelFormat.Format8bppIndexed;                      break;                    case 16:                      //PixelFormat.Format16bppArgb1555                      //PixelFormat.Format16bppRgb555                      if (this.Format == TGAFormat.NEW_TGA)                      {                          switch (this.objTargaExtensionArea.AttributesType)                          {                              case 0:                              case 1:                              case 2: // no alpha data                                  pfTargaPixelFormat = PixelFormat.Format16bppRgb555;                                  break;                                case 3: // useful alpha data                                  pfTargaPixelFormat = PixelFormat.Format16bppArgb1555;                                  break;                          }                      }                      else                      {                          pfTargaPixelFormat = PixelFormat.Format16bppRgb555;                      }                        break;                    case 24:                      pfTargaPixelFormat = PixelFormat.Format24bppRgb;                      break;                    case 32:                      //PixelFormat.Format32bppArgb                      //PixelFormat.Format32bppPArgb                      //PixelFormat.Format32bppRgb                      if (this.Format == TGAFormat.NEW_TGA)                      {                          switch (this.objTargaExtensionArea.AttributesType)                          {                                                            case 1:                              case 2: // no alpha data                                  pfTargaPixelFormat = PixelFormat.Format32bppRgb;                                  break;                                case 0:                              case 3: // useful alpha data                                  pfTargaPixelFormat = PixelFormat.Format32bppArgb;                                  break;                                case 4: // premultiplied alpha data                                  pfTargaPixelFormat = PixelFormat.Format32bppPArgb;                                  break;                            }                      }                      else                      {                          pfTargaPixelFormat = PixelFormat.Format32bppRgb;                          break;                      }                                                                    break;                                }
Magic Number,Paloma,TargaImage,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,GetPixelFormat,The following statement contains a magic number: switch (this.objTargaHeader.PixelDepth)              {                  case 8:                      pfTargaPixelFormat = PixelFormat.Format8bppIndexed;                      break;                    case 16:                      //PixelFormat.Format16bppArgb1555                      //PixelFormat.Format16bppRgb555                      if (this.Format == TGAFormat.NEW_TGA)                      {                          switch (this.objTargaExtensionArea.AttributesType)                          {                              case 0:                              case 1:                              case 2: // no alpha data                                  pfTargaPixelFormat = PixelFormat.Format16bppRgb555;                                  break;                                case 3: // useful alpha data                                  pfTargaPixelFormat = PixelFormat.Format16bppArgb1555;                                  break;                          }                      }                      else                      {                          pfTargaPixelFormat = PixelFormat.Format16bppRgb555;                      }                        break;                    case 24:                      pfTargaPixelFormat = PixelFormat.Format24bppRgb;                      break;                    case 32:                      //PixelFormat.Format32bppArgb                      //PixelFormat.Format32bppPArgb                      //PixelFormat.Format32bppRgb                      if (this.Format == TGAFormat.NEW_TGA)                      {                          switch (this.objTargaExtensionArea.AttributesType)                          {                                                            case 1:                              case 2: // no alpha data                                  pfTargaPixelFormat = PixelFormat.Format32bppRgb;                                  break;                                case 0:                              case 3: // useful alpha data                                  pfTargaPixelFormat = PixelFormat.Format32bppArgb;                                  break;                                case 4: // premultiplied alpha data                                  pfTargaPixelFormat = PixelFormat.Format32bppPArgb;                                  break;                            }                      }                      else                      {                          pfTargaPixelFormat = PixelFormat.Format32bppRgb;                          break;                      }                                                                    break;                                }
Magic Number,Paloma,TargaImage,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,GetPixelFormat,The following statement contains a magic number: switch (this.objTargaHeader.PixelDepth)              {                  case 8:                      pfTargaPixelFormat = PixelFormat.Format8bppIndexed;                      break;                    case 16:                      //PixelFormat.Format16bppArgb1555                      //PixelFormat.Format16bppRgb555                      if (this.Format == TGAFormat.NEW_TGA)                      {                          switch (this.objTargaExtensionArea.AttributesType)                          {                              case 0:                              case 1:                              case 2: // no alpha data                                  pfTargaPixelFormat = PixelFormat.Format16bppRgb555;                                  break;                                case 3: // useful alpha data                                  pfTargaPixelFormat = PixelFormat.Format16bppArgb1555;                                  break;                          }                      }                      else                      {                          pfTargaPixelFormat = PixelFormat.Format16bppRgb555;                      }                        break;                    case 24:                      pfTargaPixelFormat = PixelFormat.Format24bppRgb;                      break;                    case 32:                      //PixelFormat.Format32bppArgb                      //PixelFormat.Format32bppPArgb                      //PixelFormat.Format32bppRgb                      if (this.Format == TGAFormat.NEW_TGA)                      {                          switch (this.objTargaExtensionArea.AttributesType)                          {                                                            case 1:                              case 2: // no alpha data                                  pfTargaPixelFormat = PixelFormat.Format32bppRgb;                                  break;                                case 0:                              case 3: // useful alpha data                                  pfTargaPixelFormat = PixelFormat.Format32bppArgb;                                  break;                                case 4: // premultiplied alpha data                                  pfTargaPixelFormat = PixelFormat.Format32bppPArgb;                                  break;                            }                      }                      else                      {                          pfTargaPixelFormat = PixelFormat.Format32bppRgb;                          break;                      }                                                                    break;                                }
Magic Number,Paloma,TargaImage,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,GetPixelFormat,The following statement contains a magic number: switch (this.objTargaHeader.PixelDepth)              {                  case 8:                      pfTargaPixelFormat = PixelFormat.Format8bppIndexed;                      break;                    case 16:                      //PixelFormat.Format16bppArgb1555                      //PixelFormat.Format16bppRgb555                      if (this.Format == TGAFormat.NEW_TGA)                      {                          switch (this.objTargaExtensionArea.AttributesType)                          {                              case 0:                              case 1:                              case 2: // no alpha data                                  pfTargaPixelFormat = PixelFormat.Format16bppRgb555;                                  break;                                case 3: // useful alpha data                                  pfTargaPixelFormat = PixelFormat.Format16bppArgb1555;                                  break;                          }                      }                      else                      {                          pfTargaPixelFormat = PixelFormat.Format16bppRgb555;                      }                        break;                    case 24:                      pfTargaPixelFormat = PixelFormat.Format24bppRgb;                      break;                    case 32:                      //PixelFormat.Format32bppArgb                      //PixelFormat.Format32bppPArgb                      //PixelFormat.Format32bppRgb                      if (this.Format == TGAFormat.NEW_TGA)                      {                          switch (this.objTargaExtensionArea.AttributesType)                          {                                                            case 1:                              case 2: // no alpha data                                  pfTargaPixelFormat = PixelFormat.Format32bppRgb;                                  break;                                case 0:                              case 3: // useful alpha data                                  pfTargaPixelFormat = PixelFormat.Format32bppArgb;                                  break;                                case 4: // premultiplied alpha data                                  pfTargaPixelFormat = PixelFormat.Format32bppPArgb;                                  break;                            }                      }                      else                      {                          pfTargaPixelFormat = PixelFormat.Format32bppRgb;                          break;                      }                                                                    break;                                }
Magic Number,Paloma,TargaImage,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,GetPixelFormat,The following statement contains a magic number: switch (this.objTargaHeader.PixelDepth)              {                  case 8:                      pfTargaPixelFormat = PixelFormat.Format8bppIndexed;                      break;                    case 16:                      //PixelFormat.Format16bppArgb1555                      //PixelFormat.Format16bppRgb555                      if (this.Format == TGAFormat.NEW_TGA)                      {                          switch (this.objTargaExtensionArea.AttributesType)                          {                              case 0:                              case 1:                              case 2: // no alpha data                                  pfTargaPixelFormat = PixelFormat.Format16bppRgb555;                                  break;                                case 3: // useful alpha data                                  pfTargaPixelFormat = PixelFormat.Format16bppArgb1555;                                  break;                          }                      }                      else                      {                          pfTargaPixelFormat = PixelFormat.Format16bppRgb555;                      }                        break;                    case 24:                      pfTargaPixelFormat = PixelFormat.Format24bppRgb;                      break;                    case 32:                      //PixelFormat.Format32bppArgb                      //PixelFormat.Format32bppPArgb                      //PixelFormat.Format32bppRgb                      if (this.Format == TGAFormat.NEW_TGA)                      {                          switch (this.objTargaExtensionArea.AttributesType)                          {                                                            case 1:                              case 2: // no alpha data                                  pfTargaPixelFormat = PixelFormat.Format32bppRgb;                                  break;                                case 0:                              case 3: // useful alpha data                                  pfTargaPixelFormat = PixelFormat.Format32bppArgb;                                  break;                                case 4: // premultiplied alpha data                                  pfTargaPixelFormat = PixelFormat.Format32bppPArgb;                                  break;                            }                      }                      else                      {                          pfTargaPixelFormat = PixelFormat.Format32bppRgb;                          break;                      }                                                                    break;                                }
Magic Number,Paloma,TargaImage,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,GetPixelFormat,The following statement contains a magic number: switch (this.objTargaHeader.PixelDepth)              {                  case 8:                      pfTargaPixelFormat = PixelFormat.Format8bppIndexed;                      break;                    case 16:                      //PixelFormat.Format16bppArgb1555                      //PixelFormat.Format16bppRgb555                      if (this.Format == TGAFormat.NEW_TGA)                      {                          switch (this.objTargaExtensionArea.AttributesType)                          {                              case 0:                              case 1:                              case 2: // no alpha data                                  pfTargaPixelFormat = PixelFormat.Format16bppRgb555;                                  break;                                case 3: // useful alpha data                                  pfTargaPixelFormat = PixelFormat.Format16bppArgb1555;                                  break;                          }                      }                      else                      {                          pfTargaPixelFormat = PixelFormat.Format16bppRgb555;                      }                        break;                    case 24:                      pfTargaPixelFormat = PixelFormat.Format24bppRgb;                      break;                    case 32:                      //PixelFormat.Format32bppArgb                      //PixelFormat.Format32bppPArgb                      //PixelFormat.Format32bppRgb                      if (this.Format == TGAFormat.NEW_TGA)                      {                          switch (this.objTargaExtensionArea.AttributesType)                          {                                                            case 1:                              case 2: // no alpha data                                  pfTargaPixelFormat = PixelFormat.Format32bppRgb;                                  break;                                case 0:                              case 3: // useful alpha data                                  pfTargaPixelFormat = PixelFormat.Format32bppArgb;                                  break;                                case 4: // premultiplied alpha data                                  pfTargaPixelFormat = PixelFormat.Format32bppPArgb;                                  break;                            }                      }                      else                      {                          pfTargaPixelFormat = PixelFormat.Format32bppRgb;                          break;                      }                                                                    break;                                }
Magic Number,Paloma,TargaImage,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,LoadThumbnail,The following statement contains a magic number: int iStride = ((iWidth * (int)this.objTargaHeader.PixelDepth + 31) & ~31) >> 3;
Magic Number,Paloma,TargaImage,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,LoadThumbnail,The following statement contains a magic number: int iStride = ((iWidth * (int)this.objTargaHeader.PixelDepth + 31) & ~31) >> 3;
Magic Number,Paloma,TargaImage,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,LoadThumbnail,The following statement contains a magic number: int iStride = ((iWidth * (int)this.objTargaHeader.PixelDepth + 31) & ~31) >> 3;
Magic Number,Paloma,TargaImage,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,LoadThumbnail,The following statement contains a magic number: int iPadding = iStride - (((iWidth * (int)this.objTargaHeader.PixelDepth) + 7) / 8);
Magic Number,Paloma,TargaImage,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,LoadThumbnail,The following statement contains a magic number: int iPadding = iStride - (((iWidth * (int)this.objTargaHeader.PixelDepth) + 7) / 8);
Magic Number,Paloma,TargaImage,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,LoadThumbnail,The following statement contains a magic number: int intImageRowByteSize = iWidth * ((int)this.objTargaHeader.PixelDepth / 8);
Magic Number,Paloma,Utilities,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,GetColorFrom2Bytes,The following statement contains a magic number: int r1 = Utilities.GetBits(one' 2' 5);
Magic Number,Paloma,Utilities,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,GetColorFrom2Bytes,The following statement contains a magic number: int r1 = Utilities.GetBits(one' 2' 5);
Magic Number,Paloma,Utilities,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,GetColorFrom2Bytes,The following statement contains a magic number: int r = r1 << 3;
Magic Number,Paloma,Utilities,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,GetColorFrom2Bytes,The following statement contains a magic number: int bit = Utilities.GetBits(one' 0' 2);
Magic Number,Paloma,Utilities,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,GetColorFrom2Bytes,The following statement contains a magic number: int g1 = bit << 6;
Magic Number,Paloma,Utilities,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,GetColorFrom2Bytes,The following statement contains a magic number: bit = Utilities.GetBits(two' 5' 3);
Magic Number,Paloma,Utilities,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,GetColorFrom2Bytes,The following statement contains a magic number: bit = Utilities.GetBits(two' 5' 3);
Magic Number,Paloma,Utilities,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,GetColorFrom2Bytes,The following statement contains a magic number: int g2 = bit << 3;
Magic Number,Paloma,Utilities,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,GetColorFrom2Bytes,The following statement contains a magic number: int b1 = Utilities.GetBits(two' 0' 5);
Magic Number,Paloma,Utilities,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,GetColorFrom2Bytes,The following statement contains a magic number: int b = b1 << 3;
Magic Number,Paloma,Utilities,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,GetColorFrom2Bytes,The following statement contains a magic number: int a1 = Utilities.GetBits(one' 7' 1);
Magic Number,Paloma,Utilities,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,GetColorFrom2Bytes,The following statement contains a magic number: int a = a1 * 255;
Missing Default,Paloma,TargaImage,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,LoadImageBytes,The following switch statement is missing a default case: switch (this.objTargaHeader.FirstPixelDestination)                      {                          case FirstPixelDestination.TOP_LEFT:                              blnRowsReverse = false;                              blnEachRowReverse = true;                              break;                            case FirstPixelDestination.TOP_RIGHT:                              blnRowsReverse = false;                              blnEachRowReverse = false;                              break;                            case FirstPixelDestination.BOTTOM_LEFT:                              blnRowsReverse = true;                              blnEachRowReverse = true;                              break;                            case FirstPixelDestination.BOTTOM_RIGHT:                          case FirstPixelDestination.UNKNOWN:                              blnRowsReverse = true;                              blnEachRowReverse = false;                                break;                      }
Missing Default,Paloma,TargaImage,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,GetPixelFormat,The following switch statement is missing a default case: switch (this.objTargaHeader.PixelDepth)              {                  case 8:                      pfTargaPixelFormat = PixelFormat.Format8bppIndexed;                      break;                    case 16:                      //PixelFormat.Format16bppArgb1555                      //PixelFormat.Format16bppRgb555                      if (this.Format == TGAFormat.NEW_TGA)                      {                          switch (this.objTargaExtensionArea.AttributesType)                          {                              case 0:                              case 1:                              case 2: // no alpha data                                  pfTargaPixelFormat = PixelFormat.Format16bppRgb555;                                  break;                                case 3: // useful alpha data                                  pfTargaPixelFormat = PixelFormat.Format16bppArgb1555;                                  break;                          }                      }                      else                      {                          pfTargaPixelFormat = PixelFormat.Format16bppRgb555;                      }                        break;                    case 24:                      pfTargaPixelFormat = PixelFormat.Format24bppRgb;                      break;                    case 32:                      //PixelFormat.Format32bppArgb                      //PixelFormat.Format32bppPArgb                      //PixelFormat.Format32bppRgb                      if (this.Format == TGAFormat.NEW_TGA)                      {                          switch (this.objTargaExtensionArea.AttributesType)                          {                                                            case 1:                              case 2: // no alpha data                                  pfTargaPixelFormat = PixelFormat.Format32bppRgb;                                  break;                                case 0:                              case 3: // useful alpha data                                  pfTargaPixelFormat = PixelFormat.Format32bppArgb;                                  break;                                case 4: // premultiplied alpha data                                  pfTargaPixelFormat = PixelFormat.Format32bppPArgb;                                  break;                            }                      }                      else                      {                          pfTargaPixelFormat = PixelFormat.Format32bppRgb;                          break;                      }                                                                    break;                                }
Missing Default,Paloma,TargaImage,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,GetPixelFormat,The following switch statement is missing a default case: switch (this.objTargaExtensionArea.AttributesType)                          {                              case 0:                              case 1:                              case 2: // no alpha data                                  pfTargaPixelFormat = PixelFormat.Format16bppRgb555;                                  break;                                case 3: // useful alpha data                                  pfTargaPixelFormat = PixelFormat.Format16bppArgb1555;                                  break;                          }
Missing Default,Paloma,TargaImage,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,GetPixelFormat,The following switch statement is missing a default case: switch (this.objTargaExtensionArea.AttributesType)                          {                                                            case 1:                              case 2: // no alpha data                                  pfTargaPixelFormat = PixelFormat.Format32bppRgb;                                  break;                                case 0:                              case 3: // useful alpha data                                  pfTargaPixelFormat = PixelFormat.Format32bppArgb;                                  break;                                case 4: // premultiplied alpha data                                  pfTargaPixelFormat = PixelFormat.Format32bppPArgb;                                  break;                            }
Missing Default,Paloma,TargaImage,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,LoadThumbnail,The following switch statement is missing a default case: switch (this.objTargaHeader.FirstPixelDestination)                          {                              case FirstPixelDestination.TOP_LEFT:                                  break;                                case FirstPixelDestination.TOP_RIGHT:                                  blnRowsReverse = false;                                  blnEachRowReverse = false;                                  break;                                case FirstPixelDestination.BOTTOM_LEFT:                                  break;                                case FirstPixelDestination.BOTTOM_RIGHT:                              case FirstPixelDestination.UNKNOWN:                                  blnRowsReverse = true;                                  blnEachRowReverse = false;                                    break;                          }
