Implementation smell,Namespace,Class,File,Method,Description
Long Statement,TSO_CityServer,Program,C:\repos\Afr0_Project-Dollhouse\TSO CityServer\TSO CityServer\Program.cs,Main,The length of the statement  "			ProtocolAbstractionLibraryD.Logger.OnMessageLogged += new ProtocolAbstractionLibraryD.MessageLoggedDelegate(Logger_OnMessageLogged); " is 132.
Long Statement,TSO_CityServer.Terrain,ImageLoader,C:\repos\Afr0_Project-Dollhouse\TSO CityServer\TSO CityServer\Terrain\ImageLoader.cs,FromStream,The length of the statement  "				var data = bmp.LockBits(new Rectangle(0' 0' bmp.Width' bmp.Height)' System.Drawing.Imaging.ImageLockMode.ReadOnly' System.Drawing.Imaging.PixelFormat.Format32bppArgb); " is 167.
Long Statement,TSO_CityServer.Terrain,Terrain,C:\repos\Afr0_Project-Dollhouse\TSO CityServer\TSO CityServer\Terrain\Terrain.cs,LoadContent,The length of the statement  "			string CityStr = "cities\\" + ((m_CityNumber >= 10) ? "city_00" + m_CityNumber.ToString() : "city_000" + m_CityNumber.ToString()); " is 130.
Long Statement,TSO_CityServer.Terrain,Terrain,C:\repos\Afr0_Project-Dollhouse\TSO CityServer\TSO CityServer\Terrain\Terrain.cs,IsLandBuildable,The length of the statement  "			if (x < 0 || x > 510 || y < 0 || y > 510) return false; //because of +1s' use 510 as bound rather than 511. People won't see those tiles at near view anyways. " is 158.
Long Statement,TSO_CityServer.Terrain,Terrain,C:\repos\Afr0_Project-Dollhouse\TSO CityServer\TSO CityServer\Terrain\Terrain.cs,IsLandBuildable,The length of the statement  "			//gets max and min elevation of the 4 verts of this tile' and compares them against a threshold. This threshold should be EXACTLY THE SAME ON THE SERVER!  " is 153.
Long Statement,TSO_CityServer.Terrain,Terrain,C:\repos\Afr0_Project-Dollhouse\TSO CityServer\TSO CityServer\Terrain\Terrain.cs,IsLandBuildable,The length of the statement  "			int max = Math.Max(m_ElevationData[(y * 512 + x) * 4]' Math.Max(m_ElevationData[(y * 512 + x + 1) * 4]' Math.Max(m_ElevationData[((y + 1) * 512 + x + 1) * 4]' m_ElevationData[((y + 1) * 512 + x) * 4]))); " is 203.
Long Statement,TSO_CityServer.Terrain,Terrain,C:\repos\Afr0_Project-Dollhouse\TSO CityServer\TSO CityServer\Terrain\Terrain.cs,IsLandBuildable,The length of the statement  "			int min = Math.Min(m_ElevationData[(y * 512 + x) * 4]' Math.Min(m_ElevationData[(y * 512 + x + 1) * 4]' Math.Min(m_ElevationData[((y + 1) * 512 + x + 1) * 4]' m_ElevationData[((y + 1) * 512 + x) * 4]))); " is 203.
Long Statement,TSO_CityServer.Network,ClientPacketHandlers,C:\repos\Afr0_Project-Dollhouse\TSO CityServer\TSO CityServer\Network\ClientPacketHandlers.cs,HandleCharacterCreate,The length of the statement  "					PacketStream FailPacket = new PacketStream((byte)PacketType.CHARACTER_CREATE_CITY_FAILED' (int)(PacketHeaders.ENCRYPTED + 1)); " is 126.
Long Statement,TSO_CityServer.Network,ClientPacketHandlers,C:\repos\Afr0_Project-Dollhouse\TSO CityServer\TSO CityServer\Network\ClientPacketHandlers.cs,HandleCharacterCreate,The length of the statement  "				PacketStream FailPacket = new PacketStream((byte)PacketType.CHARACTER_CREATE_CITY_FAILED' (int)(PacketHeaders.ENCRYPTED + 1)); " is 126.
Complex Conditional,TSO_CityServer.Terrain,Terrain,C:\repos\Afr0_Project-Dollhouse\TSO CityServer\TSO CityServer\Terrain\Terrain.cs,IsLandBuildable,The conditional expression  "x < 0 || x > 510 || y < 0 || y > 510"  is complex.
Complex Conditional,TSO_CityServer.Network,ClientPacketHandlers,C:\repos\Afr0_Project-Dollhouse\TSO CityServer\TSO CityServer\Network\ClientPacketHandlers.cs,HandleCharacterCreate,The conditional expression  "Char.Timestamp == string.Empty || Char.Name == string.Empty || Char.Sex == string.Empty ||  								Char.Description == string.Empty"  is complex.
Magic Number,TSO_CityServer,ConfigurationManager,C:\repos\Afr0_Project-Dollhouse\TSO CityServer\TSO CityServer\ConfigurationManager.cs,LoadCityConfig,The following statement contains a magic number: try              {                  string[] Lines = File.ReadAllLines("ServerConfig.ini");                    foreach (string Line in Lines)                  {                      if (!Line.StartsWith("//"))                      {                          if(Line.StartsWith("ID: "))                              GlobalSettings.Default.ServerID = Line.Replace("ID: "' "").Trim();                          if (Line.StartsWith("Name: "))                              GlobalSettings.Default.CityName = Line.Replace("Name: "' "").Trim();                          else if (Line.StartsWith("Description: "))                              GlobalSettings.Default.CityDescription = Line.Replace("Description: "' "").Trim().Replace("\r"' "").                                  Replace("\n"' "");                          else if (Line.StartsWith("Thumbnail: "))                              GlobalSettings.Default.CityThumbnail = Convert.ToUInt64(Line.Replace("Thumbnail: "' "")' 16);                          else if (Line.StartsWith("Map: "))                              GlobalSettings.Default.Map = Convert.ToUInt64(Line.Replace("Map: "' "")' 16);                      }                  }              }              catch (Exception)              {                  return false;              }
Magic Number,TSO_CityServer,ConfigurationManager,C:\repos\Afr0_Project-Dollhouse\TSO CityServer\TSO CityServer\ConfigurationManager.cs,LoadCityConfig,The following statement contains a magic number: try              {                  string[] Lines = File.ReadAllLines("ServerConfig.ini");                    foreach (string Line in Lines)                  {                      if (!Line.StartsWith("//"))                      {                          if(Line.StartsWith("ID: "))                              GlobalSettings.Default.ServerID = Line.Replace("ID: "' "").Trim();                          if (Line.StartsWith("Name: "))                              GlobalSettings.Default.CityName = Line.Replace("Name: "' "").Trim();                          else if (Line.StartsWith("Description: "))                              GlobalSettings.Default.CityDescription = Line.Replace("Description: "' "").Trim().Replace("\r"' "").                                  Replace("\n"' "");                          else if (Line.StartsWith("Thumbnail: "))                              GlobalSettings.Default.CityThumbnail = Convert.ToUInt64(Line.Replace("Thumbnail: "' "")' 16);                          else if (Line.StartsWith("Map: "))                              GlobalSettings.Default.Map = Convert.ToUInt64(Line.Replace("Map: "' "")' 16);                      }                  }              }              catch (Exception)              {                  return false;              }
Magic Number,TSO_CityServer,Program,C:\repos\Afr0_Project-Dollhouse\TSO CityServer\TSO CityServer\Program.cs,Main,The following statement contains a magic number: m_LoginClient = new NetworkClient("127.0.0.1"' 2108' EncryptionMode.AESCrypto' true);
Magic Number,TSO_CityServer,Program,C:\repos\Afr0_Project-Dollhouse\TSO CityServer\TSO CityServer\Program.cs,Main,The following statement contains a magic number: while (true)  			{  				m_VM.Update();  				Thread.Sleep(1000);  			}
Magic Number,TSO_CityServer.Terrain,ImageLoader,C:\repos\Afr0_Project-Dollhouse\TSO CityServer\TSO CityServer\Terrain\ImageLoader.cs,FromStream,The following statement contains a magic number: try  			{  				bool premultiplied = false;  				Bitmap bmp = null;  				try  				{  					bmp = (Bitmap)Image.FromStream(str); //try as bmp  				}  				catch (Exception)  				{  					str.Seek(0' SeekOrigin.Begin);  					var tga = new Paloma.TargaImage(str);  					bmp = tga.Image; //try as tga. for some reason this format does not have a magic number' which is ridiculously stupid.  				}    				var data = bmp.LockBits(new Rectangle(0' 0' bmp.Width' bmp.Height)' System.Drawing.Imaging.ImageLockMode.ReadOnly' System.Drawing.Imaging.PixelFormat.Format32bppArgb);  				var bytes = new byte[data.Height * data.Stride];    				// copy the bytes from bitmap to array  				Marshal.Copy(data.Scan0' bytes' 0' bytes.Length);    				for (int i = 0; i < bytes.Length; i += 4)  				{ //flip red and blue and premultiply alpha  					byte temp = bytes[i + 2];  					float a = (premultiplied) ? 1 : (bytes[i + 3] / 255f);  					bytes[i + 2] = (byte)(bytes[i] * a);  					bytes[i + 1] = (byte)(bytes[i + 1] * a);  					bytes[i] = (byte)(temp * a);  				}    				Marshal.Copy(bytes' 0' data.Scan0' bytes.Length); //copy modified bits back  				bmp.UnlockBits(data);    				return bmp;  			}  			catch (Exception e)  			{  				return null;  			}
Magic Number,TSO_CityServer.Terrain,ImageLoader,C:\repos\Afr0_Project-Dollhouse\TSO CityServer\TSO CityServer\Terrain\ImageLoader.cs,FromStream,The following statement contains a magic number: try  			{  				bool premultiplied = false;  				Bitmap bmp = null;  				try  				{  					bmp = (Bitmap)Image.FromStream(str); //try as bmp  				}  				catch (Exception)  				{  					str.Seek(0' SeekOrigin.Begin);  					var tga = new Paloma.TargaImage(str);  					bmp = tga.Image; //try as tga. for some reason this format does not have a magic number' which is ridiculously stupid.  				}    				var data = bmp.LockBits(new Rectangle(0' 0' bmp.Width' bmp.Height)' System.Drawing.Imaging.ImageLockMode.ReadOnly' System.Drawing.Imaging.PixelFormat.Format32bppArgb);  				var bytes = new byte[data.Height * data.Stride];    				// copy the bytes from bitmap to array  				Marshal.Copy(data.Scan0' bytes' 0' bytes.Length);    				for (int i = 0; i < bytes.Length; i += 4)  				{ //flip red and blue and premultiply alpha  					byte temp = bytes[i + 2];  					float a = (premultiplied) ? 1 : (bytes[i + 3] / 255f);  					bytes[i + 2] = (byte)(bytes[i] * a);  					bytes[i + 1] = (byte)(bytes[i + 1] * a);  					bytes[i] = (byte)(temp * a);  				}    				Marshal.Copy(bytes' 0' data.Scan0' bytes.Length); //copy modified bits back  				bmp.UnlockBits(data);    				return bmp;  			}  			catch (Exception e)  			{  				return null;  			}
Magic Number,TSO_CityServer.Terrain,ImageLoader,C:\repos\Afr0_Project-Dollhouse\TSO CityServer\TSO CityServer\Terrain\ImageLoader.cs,FromStream,The following statement contains a magic number: try  			{  				bool premultiplied = false;  				Bitmap bmp = null;  				try  				{  					bmp = (Bitmap)Image.FromStream(str); //try as bmp  				}  				catch (Exception)  				{  					str.Seek(0' SeekOrigin.Begin);  					var tga = new Paloma.TargaImage(str);  					bmp = tga.Image; //try as tga. for some reason this format does not have a magic number' which is ridiculously stupid.  				}    				var data = bmp.LockBits(new Rectangle(0' 0' bmp.Width' bmp.Height)' System.Drawing.Imaging.ImageLockMode.ReadOnly' System.Drawing.Imaging.PixelFormat.Format32bppArgb);  				var bytes = new byte[data.Height * data.Stride];    				// copy the bytes from bitmap to array  				Marshal.Copy(data.Scan0' bytes' 0' bytes.Length);    				for (int i = 0; i < bytes.Length; i += 4)  				{ //flip red and blue and premultiply alpha  					byte temp = bytes[i + 2];  					float a = (premultiplied) ? 1 : (bytes[i + 3] / 255f);  					bytes[i + 2] = (byte)(bytes[i] * a);  					bytes[i + 1] = (byte)(bytes[i + 1] * a);  					bytes[i] = (byte)(temp * a);  				}    				Marshal.Copy(bytes' 0' data.Scan0' bytes.Length); //copy modified bits back  				bmp.UnlockBits(data);    				return bmp;  			}  			catch (Exception e)  			{  				return null;  			}
Magic Number,TSO_CityServer.Terrain,ImageLoader,C:\repos\Afr0_Project-Dollhouse\TSO CityServer\TSO CityServer\Terrain\ImageLoader.cs,FromStream,The following statement contains a magic number: try  			{  				bool premultiplied = false;  				Bitmap bmp = null;  				try  				{  					bmp = (Bitmap)Image.FromStream(str); //try as bmp  				}  				catch (Exception)  				{  					str.Seek(0' SeekOrigin.Begin);  					var tga = new Paloma.TargaImage(str);  					bmp = tga.Image; //try as tga. for some reason this format does not have a magic number' which is ridiculously stupid.  				}    				var data = bmp.LockBits(new Rectangle(0' 0' bmp.Width' bmp.Height)' System.Drawing.Imaging.ImageLockMode.ReadOnly' System.Drawing.Imaging.PixelFormat.Format32bppArgb);  				var bytes = new byte[data.Height * data.Stride];    				// copy the bytes from bitmap to array  				Marshal.Copy(data.Scan0' bytes' 0' bytes.Length);    				for (int i = 0; i < bytes.Length; i += 4)  				{ //flip red and blue and premultiply alpha  					byte temp = bytes[i + 2];  					float a = (premultiplied) ? 1 : (bytes[i + 3] / 255f);  					bytes[i + 2] = (byte)(bytes[i] * a);  					bytes[i + 1] = (byte)(bytes[i + 1] * a);  					bytes[i] = (byte)(temp * a);  				}    				Marshal.Copy(bytes' 0' data.Scan0' bytes.Length); //copy modified bits back  				bmp.UnlockBits(data);    				return bmp;  			}  			catch (Exception e)  			{  				return null;  			}
Magic Number,TSO_CityServer.Terrain,Terrain,C:\repos\Afr0_Project-Dollhouse\TSO CityServer\TSO CityServer\Terrain\Terrain.cs,GetCityNumber,The following statement contains a magic number: switch (CityName)  			{  				case "Blazing Falls":  					return 1;  				case "Alphaville":  					return 2;  				case "Test Center":  					return 3;  				case "Interhogan":  					return 4;  				case "Ocean's Edge":  					return 5;  				case "East Jerome":  					return 6;  				case "Fancy Fields":  					return 7;  				case "Betaville":  					return 8;  				case "Charvatia":  					return 9;  				case "Dragon's Cove":  					return 10;  				case "Rancho Rizzo":  					return 11;  				case "Zavadaville":  					return 12;  				case "Queen Margaret's":  					return 13;  				case "Shannopolis":  					return 14;  				case "Grantley Grove":  					return 15;  				case "Calvin's Creek":  					return 16;  				case "The Billabong":  					return 17;  				case "Mount Fuji":  					return 18;  				case "Dan's Grove":  					return 19;  				case "Jolly Pines":  					return 20;  				case "Yatesport":  					return 21;  				case "Landry Lakes":  					return 22;  				case "Nichol's Notch":  					return 23;  				case "King Canyons":  					return 24;  				case "Virginia Islands":  					return 25;  				case "Pixie Point":  					return 26;  				case "West Darrington":  					return 27;  				case "Upper Shankelston":  					return 28;  				case "Albertstown":  					return 29;  				case "Terra Tablante":  					return 30;  			}
Magic Number,TSO_CityServer.Terrain,Terrain,C:\repos\Afr0_Project-Dollhouse\TSO CityServer\TSO CityServer\Terrain\Terrain.cs,GetCityNumber,The following statement contains a magic number: switch (CityName)  			{  				case "Blazing Falls":  					return 1;  				case "Alphaville":  					return 2;  				case "Test Center":  					return 3;  				case "Interhogan":  					return 4;  				case "Ocean's Edge":  					return 5;  				case "East Jerome":  					return 6;  				case "Fancy Fields":  					return 7;  				case "Betaville":  					return 8;  				case "Charvatia":  					return 9;  				case "Dragon's Cove":  					return 10;  				case "Rancho Rizzo":  					return 11;  				case "Zavadaville":  					return 12;  				case "Queen Margaret's":  					return 13;  				case "Shannopolis":  					return 14;  				case "Grantley Grove":  					return 15;  				case "Calvin's Creek":  					return 16;  				case "The Billabong":  					return 17;  				case "Mount Fuji":  					return 18;  				case "Dan's Grove":  					return 19;  				case "Jolly Pines":  					return 20;  				case "Yatesport":  					return 21;  				case "Landry Lakes":  					return 22;  				case "Nichol's Notch":  					return 23;  				case "King Canyons":  					return 24;  				case "Virginia Islands":  					return 25;  				case "Pixie Point":  					return 26;  				case "West Darrington":  					return 27;  				case "Upper Shankelston":  					return 28;  				case "Albertstown":  					return 29;  				case "Terra Tablante":  					return 30;  			}
Magic Number,TSO_CityServer.Terrain,Terrain,C:\repos\Afr0_Project-Dollhouse\TSO CityServer\TSO CityServer\Terrain\Terrain.cs,GetCityNumber,The following statement contains a magic number: switch (CityName)  			{  				case "Blazing Falls":  					return 1;  				case "Alphaville":  					return 2;  				case "Test Center":  					return 3;  				case "Interhogan":  					return 4;  				case "Ocean's Edge":  					return 5;  				case "East Jerome":  					return 6;  				case "Fancy Fields":  					return 7;  				case "Betaville":  					return 8;  				case "Charvatia":  					return 9;  				case "Dragon's Cove":  					return 10;  				case "Rancho Rizzo":  					return 11;  				case "Zavadaville":  					return 12;  				case "Queen Margaret's":  					return 13;  				case "Shannopolis":  					return 14;  				case "Grantley Grove":  					return 15;  				case "Calvin's Creek":  					return 16;  				case "The Billabong":  					return 17;  				case "Mount Fuji":  					return 18;  				case "Dan's Grove":  					return 19;  				case "Jolly Pines":  					return 20;  				case "Yatesport":  					return 21;  				case "Landry Lakes":  					return 22;  				case "Nichol's Notch":  					return 23;  				case "King Canyons":  					return 24;  				case "Virginia Islands":  					return 25;  				case "Pixie Point":  					return 26;  				case "West Darrington":  					return 27;  				case "Upper Shankelston":  					return 28;  				case "Albertstown":  					return 29;  				case "Terra Tablante":  					return 30;  			}
Magic Number,TSO_CityServer.Terrain,Terrain,C:\repos\Afr0_Project-Dollhouse\TSO CityServer\TSO CityServer\Terrain\Terrain.cs,GetCityNumber,The following statement contains a magic number: switch (CityName)  			{  				case "Blazing Falls":  					return 1;  				case "Alphaville":  					return 2;  				case "Test Center":  					return 3;  				case "Interhogan":  					return 4;  				case "Ocean's Edge":  					return 5;  				case "East Jerome":  					return 6;  				case "Fancy Fields":  					return 7;  				case "Betaville":  					return 8;  				case "Charvatia":  					return 9;  				case "Dragon's Cove":  					return 10;  				case "Rancho Rizzo":  					return 11;  				case "Zavadaville":  					return 12;  				case "Queen Margaret's":  					return 13;  				case "Shannopolis":  					return 14;  				case "Grantley Grove":  					return 15;  				case "Calvin's Creek":  					return 16;  				case "The Billabong":  					return 17;  				case "Mount Fuji":  					return 18;  				case "Dan's Grove":  					return 19;  				case "Jolly Pines":  					return 20;  				case "Yatesport":  					return 21;  				case "Landry Lakes":  					return 22;  				case "Nichol's Notch":  					return 23;  				case "King Canyons":  					return 24;  				case "Virginia Islands":  					return 25;  				case "Pixie Point":  					return 26;  				case "West Darrington":  					return 27;  				case "Upper Shankelston":  					return 28;  				case "Albertstown":  					return 29;  				case "Terra Tablante":  					return 30;  			}
Magic Number,TSO_CityServer.Terrain,Terrain,C:\repos\Afr0_Project-Dollhouse\TSO CityServer\TSO CityServer\Terrain\Terrain.cs,GetCityNumber,The following statement contains a magic number: switch (CityName)  			{  				case "Blazing Falls":  					return 1;  				case "Alphaville":  					return 2;  				case "Test Center":  					return 3;  				case "Interhogan":  					return 4;  				case "Ocean's Edge":  					return 5;  				case "East Jerome":  					return 6;  				case "Fancy Fields":  					return 7;  				case "Betaville":  					return 8;  				case "Charvatia":  					return 9;  				case "Dragon's Cove":  					return 10;  				case "Rancho Rizzo":  					return 11;  				case "Zavadaville":  					return 12;  				case "Queen Margaret's":  					return 13;  				case "Shannopolis":  					return 14;  				case "Grantley Grove":  					return 15;  				case "Calvin's Creek":  					return 16;  				case "The Billabong":  					return 17;  				case "Mount Fuji":  					return 18;  				case "Dan's Grove":  					return 19;  				case "Jolly Pines":  					return 20;  				case "Yatesport":  					return 21;  				case "Landry Lakes":  					return 22;  				case "Nichol's Notch":  					return 23;  				case "King Canyons":  					return 24;  				case "Virginia Islands":  					return 25;  				case "Pixie Point":  					return 26;  				case "West Darrington":  					return 27;  				case "Upper Shankelston":  					return 28;  				case "Albertstown":  					return 29;  				case "Terra Tablante":  					return 30;  			}
Magic Number,TSO_CityServer.Terrain,Terrain,C:\repos\Afr0_Project-Dollhouse\TSO CityServer\TSO CityServer\Terrain\Terrain.cs,GetCityNumber,The following statement contains a magic number: switch (CityName)  			{  				case "Blazing Falls":  					return 1;  				case "Alphaville":  					return 2;  				case "Test Center":  					return 3;  				case "Interhogan":  					return 4;  				case "Ocean's Edge":  					return 5;  				case "East Jerome":  					return 6;  				case "Fancy Fields":  					return 7;  				case "Betaville":  					return 8;  				case "Charvatia":  					return 9;  				case "Dragon's Cove":  					return 10;  				case "Rancho Rizzo":  					return 11;  				case "Zavadaville":  					return 12;  				case "Queen Margaret's":  					return 13;  				case "Shannopolis":  					return 14;  				case "Grantley Grove":  					return 15;  				case "Calvin's Creek":  					return 16;  				case "The Billabong":  					return 17;  				case "Mount Fuji":  					return 18;  				case "Dan's Grove":  					return 19;  				case "Jolly Pines":  					return 20;  				case "Yatesport":  					return 21;  				case "Landry Lakes":  					return 22;  				case "Nichol's Notch":  					return 23;  				case "King Canyons":  					return 24;  				case "Virginia Islands":  					return 25;  				case "Pixie Point":  					return 26;  				case "West Darrington":  					return 27;  				case "Upper Shankelston":  					return 28;  				case "Albertstown":  					return 29;  				case "Terra Tablante":  					return 30;  			}
Magic Number,TSO_CityServer.Terrain,Terrain,C:\repos\Afr0_Project-Dollhouse\TSO CityServer\TSO CityServer\Terrain\Terrain.cs,GetCityNumber,The following statement contains a magic number: switch (CityName)  			{  				case "Blazing Falls":  					return 1;  				case "Alphaville":  					return 2;  				case "Test Center":  					return 3;  				case "Interhogan":  					return 4;  				case "Ocean's Edge":  					return 5;  				case "East Jerome":  					return 6;  				case "Fancy Fields":  					return 7;  				case "Betaville":  					return 8;  				case "Charvatia":  					return 9;  				case "Dragon's Cove":  					return 10;  				case "Rancho Rizzo":  					return 11;  				case "Zavadaville":  					return 12;  				case "Queen Margaret's":  					return 13;  				case "Shannopolis":  					return 14;  				case "Grantley Grove":  					return 15;  				case "Calvin's Creek":  					return 16;  				case "The Billabong":  					return 17;  				case "Mount Fuji":  					return 18;  				case "Dan's Grove":  					return 19;  				case "Jolly Pines":  					return 20;  				case "Yatesport":  					return 21;  				case "Landry Lakes":  					return 22;  				case "Nichol's Notch":  					return 23;  				case "King Canyons":  					return 24;  				case "Virginia Islands":  					return 25;  				case "Pixie Point":  					return 26;  				case "West Darrington":  					return 27;  				case "Upper Shankelston":  					return 28;  				case "Albertstown":  					return 29;  				case "Terra Tablante":  					return 30;  			}
Magic Number,TSO_CityServer.Terrain,Terrain,C:\repos\Afr0_Project-Dollhouse\TSO CityServer\TSO CityServer\Terrain\Terrain.cs,GetCityNumber,The following statement contains a magic number: switch (CityName)  			{  				case "Blazing Falls":  					return 1;  				case "Alphaville":  					return 2;  				case "Test Center":  					return 3;  				case "Interhogan":  					return 4;  				case "Ocean's Edge":  					return 5;  				case "East Jerome":  					return 6;  				case "Fancy Fields":  					return 7;  				case "Betaville":  					return 8;  				case "Charvatia":  					return 9;  				case "Dragon's Cove":  					return 10;  				case "Rancho Rizzo":  					return 11;  				case "Zavadaville":  					return 12;  				case "Queen Margaret's":  					return 13;  				case "Shannopolis":  					return 14;  				case "Grantley Grove":  					return 15;  				case "Calvin's Creek":  					return 16;  				case "The Billabong":  					return 17;  				case "Mount Fuji":  					return 18;  				case "Dan's Grove":  					return 19;  				case "Jolly Pines":  					return 20;  				case "Yatesport":  					return 21;  				case "Landry Lakes":  					return 22;  				case "Nichol's Notch":  					return 23;  				case "King Canyons":  					return 24;  				case "Virginia Islands":  					return 25;  				case "Pixie Point":  					return 26;  				case "West Darrington":  					return 27;  				case "Upper Shankelston":  					return 28;  				case "Albertstown":  					return 29;  				case "Terra Tablante":  					return 30;  			}
Magic Number,TSO_CityServer.Terrain,Terrain,C:\repos\Afr0_Project-Dollhouse\TSO CityServer\TSO CityServer\Terrain\Terrain.cs,GetCityNumber,The following statement contains a magic number: switch (CityName)  			{  				case "Blazing Falls":  					return 1;  				case "Alphaville":  					return 2;  				case "Test Center":  					return 3;  				case "Interhogan":  					return 4;  				case "Ocean's Edge":  					return 5;  				case "East Jerome":  					return 6;  				case "Fancy Fields":  					return 7;  				case "Betaville":  					return 8;  				case "Charvatia":  					return 9;  				case "Dragon's Cove":  					return 10;  				case "Rancho Rizzo":  					return 11;  				case "Zavadaville":  					return 12;  				case "Queen Margaret's":  					return 13;  				case "Shannopolis":  					return 14;  				case "Grantley Grove":  					return 15;  				case "Calvin's Creek":  					return 16;  				case "The Billabong":  					return 17;  				case "Mount Fuji":  					return 18;  				case "Dan's Grove":  					return 19;  				case "Jolly Pines":  					return 20;  				case "Yatesport":  					return 21;  				case "Landry Lakes":  					return 22;  				case "Nichol's Notch":  					return 23;  				case "King Canyons":  					return 24;  				case "Virginia Islands":  					return 25;  				case "Pixie Point":  					return 26;  				case "West Darrington":  					return 27;  				case "Upper Shankelston":  					return 28;  				case "Albertstown":  					return 29;  				case "Terra Tablante":  					return 30;  			}
Magic Number,TSO_CityServer.Terrain,Terrain,C:\repos\Afr0_Project-Dollhouse\TSO CityServer\TSO CityServer\Terrain\Terrain.cs,GetCityNumber,The following statement contains a magic number: switch (CityName)  			{  				case "Blazing Falls":  					return 1;  				case "Alphaville":  					return 2;  				case "Test Center":  					return 3;  				case "Interhogan":  					return 4;  				case "Ocean's Edge":  					return 5;  				case "East Jerome":  					return 6;  				case "Fancy Fields":  					return 7;  				case "Betaville":  					return 8;  				case "Charvatia":  					return 9;  				case "Dragon's Cove":  					return 10;  				case "Rancho Rizzo":  					return 11;  				case "Zavadaville":  					return 12;  				case "Queen Margaret's":  					return 13;  				case "Shannopolis":  					return 14;  				case "Grantley Grove":  					return 15;  				case "Calvin's Creek":  					return 16;  				case "The Billabong":  					return 17;  				case "Mount Fuji":  					return 18;  				case "Dan's Grove":  					return 19;  				case "Jolly Pines":  					return 20;  				case "Yatesport":  					return 21;  				case "Landry Lakes":  					return 22;  				case "Nichol's Notch":  					return 23;  				case "King Canyons":  					return 24;  				case "Virginia Islands":  					return 25;  				case "Pixie Point":  					return 26;  				case "West Darrington":  					return 27;  				case "Upper Shankelston":  					return 28;  				case "Albertstown":  					return 29;  				case "Terra Tablante":  					return 30;  			}
Magic Number,TSO_CityServer.Terrain,Terrain,C:\repos\Afr0_Project-Dollhouse\TSO CityServer\TSO CityServer\Terrain\Terrain.cs,GetCityNumber,The following statement contains a magic number: switch (CityName)  			{  				case "Blazing Falls":  					return 1;  				case "Alphaville":  					return 2;  				case "Test Center":  					return 3;  				case "Interhogan":  					return 4;  				case "Ocean's Edge":  					return 5;  				case "East Jerome":  					return 6;  				case "Fancy Fields":  					return 7;  				case "Betaville":  					return 8;  				case "Charvatia":  					return 9;  				case "Dragon's Cove":  					return 10;  				case "Rancho Rizzo":  					return 11;  				case "Zavadaville":  					return 12;  				case "Queen Margaret's":  					return 13;  				case "Shannopolis":  					return 14;  				case "Grantley Grove":  					return 15;  				case "Calvin's Creek":  					return 16;  				case "The Billabong":  					return 17;  				case "Mount Fuji":  					return 18;  				case "Dan's Grove":  					return 19;  				case "Jolly Pines":  					return 20;  				case "Yatesport":  					return 21;  				case "Landry Lakes":  					return 22;  				case "Nichol's Notch":  					return 23;  				case "King Canyons":  					return 24;  				case "Virginia Islands":  					return 25;  				case "Pixie Point":  					return 26;  				case "West Darrington":  					return 27;  				case "Upper Shankelston":  					return 28;  				case "Albertstown":  					return 29;  				case "Terra Tablante":  					return 30;  			}
Magic Number,TSO_CityServer.Terrain,Terrain,C:\repos\Afr0_Project-Dollhouse\TSO CityServer\TSO CityServer\Terrain\Terrain.cs,GetCityNumber,The following statement contains a magic number: switch (CityName)  			{  				case "Blazing Falls":  					return 1;  				case "Alphaville":  					return 2;  				case "Test Center":  					return 3;  				case "Interhogan":  					return 4;  				case "Ocean's Edge":  					return 5;  				case "East Jerome":  					return 6;  				case "Fancy Fields":  					return 7;  				case "Betaville":  					return 8;  				case "Charvatia":  					return 9;  				case "Dragon's Cove":  					return 10;  				case "Rancho Rizzo":  					return 11;  				case "Zavadaville":  					return 12;  				case "Queen Margaret's":  					return 13;  				case "Shannopolis":  					return 14;  				case "Grantley Grove":  					return 15;  				case "Calvin's Creek":  					return 16;  				case "The Billabong":  					return 17;  				case "Mount Fuji":  					return 18;  				case "Dan's Grove":  					return 19;  				case "Jolly Pines":  					return 20;  				case "Yatesport":  					return 21;  				case "Landry Lakes":  					return 22;  				case "Nichol's Notch":  					return 23;  				case "King Canyons":  					return 24;  				case "Virginia Islands":  					return 25;  				case "Pixie Point":  					return 26;  				case "West Darrington":  					return 27;  				case "Upper Shankelston":  					return 28;  				case "Albertstown":  					return 29;  				case "Terra Tablante":  					return 30;  			}
Magic Number,TSO_CityServer.Terrain,Terrain,C:\repos\Afr0_Project-Dollhouse\TSO CityServer\TSO CityServer\Terrain\Terrain.cs,GetCityNumber,The following statement contains a magic number: switch (CityName)  			{  				case "Blazing Falls":  					return 1;  				case "Alphaville":  					return 2;  				case "Test Center":  					return 3;  				case "Interhogan":  					return 4;  				case "Ocean's Edge":  					return 5;  				case "East Jerome":  					return 6;  				case "Fancy Fields":  					return 7;  				case "Betaville":  					return 8;  				case "Charvatia":  					return 9;  				case "Dragon's Cove":  					return 10;  				case "Rancho Rizzo":  					return 11;  				case "Zavadaville":  					return 12;  				case "Queen Margaret's":  					return 13;  				case "Shannopolis":  					return 14;  				case "Grantley Grove":  					return 15;  				case "Calvin's Creek":  					return 16;  				case "The Billabong":  					return 17;  				case "Mount Fuji":  					return 18;  				case "Dan's Grove":  					return 19;  				case "Jolly Pines":  					return 20;  				case "Yatesport":  					return 21;  				case "Landry Lakes":  					return 22;  				case "Nichol's Notch":  					return 23;  				case "King Canyons":  					return 24;  				case "Virginia Islands":  					return 25;  				case "Pixie Point":  					return 26;  				case "West Darrington":  					return 27;  				case "Upper Shankelston":  					return 28;  				case "Albertstown":  					return 29;  				case "Terra Tablante":  					return 30;  			}
Magic Number,TSO_CityServer.Terrain,Terrain,C:\repos\Afr0_Project-Dollhouse\TSO CityServer\TSO CityServer\Terrain\Terrain.cs,GetCityNumber,The following statement contains a magic number: switch (CityName)  			{  				case "Blazing Falls":  					return 1;  				case "Alphaville":  					return 2;  				case "Test Center":  					return 3;  				case "Interhogan":  					return 4;  				case "Ocean's Edge":  					return 5;  				case "East Jerome":  					return 6;  				case "Fancy Fields":  					return 7;  				case "Betaville":  					return 8;  				case "Charvatia":  					return 9;  				case "Dragon's Cove":  					return 10;  				case "Rancho Rizzo":  					return 11;  				case "Zavadaville":  					return 12;  				case "Queen Margaret's":  					return 13;  				case "Shannopolis":  					return 14;  				case "Grantley Grove":  					return 15;  				case "Calvin's Creek":  					return 16;  				case "The Billabong":  					return 17;  				case "Mount Fuji":  					return 18;  				case "Dan's Grove":  					return 19;  				case "Jolly Pines":  					return 20;  				case "Yatesport":  					return 21;  				case "Landry Lakes":  					return 22;  				case "Nichol's Notch":  					return 23;  				case "King Canyons":  					return 24;  				case "Virginia Islands":  					return 25;  				case "Pixie Point":  					return 26;  				case "West Darrington":  					return 27;  				case "Upper Shankelston":  					return 28;  				case "Albertstown":  					return 29;  				case "Terra Tablante":  					return 30;  			}
Magic Number,TSO_CityServer.Terrain,Terrain,C:\repos\Afr0_Project-Dollhouse\TSO CityServer\TSO CityServer\Terrain\Terrain.cs,GetCityNumber,The following statement contains a magic number: switch (CityName)  			{  				case "Blazing Falls":  					return 1;  				case "Alphaville":  					return 2;  				case "Test Center":  					return 3;  				case "Interhogan":  					return 4;  				case "Ocean's Edge":  					return 5;  				case "East Jerome":  					return 6;  				case "Fancy Fields":  					return 7;  				case "Betaville":  					return 8;  				case "Charvatia":  					return 9;  				case "Dragon's Cove":  					return 10;  				case "Rancho Rizzo":  					return 11;  				case "Zavadaville":  					return 12;  				case "Queen Margaret's":  					return 13;  				case "Shannopolis":  					return 14;  				case "Grantley Grove":  					return 15;  				case "Calvin's Creek":  					return 16;  				case "The Billabong":  					return 17;  				case "Mount Fuji":  					return 18;  				case "Dan's Grove":  					return 19;  				case "Jolly Pines":  					return 20;  				case "Yatesport":  					return 21;  				case "Landry Lakes":  					return 22;  				case "Nichol's Notch":  					return 23;  				case "King Canyons":  					return 24;  				case "Virginia Islands":  					return 25;  				case "Pixie Point":  					return 26;  				case "West Darrington":  					return 27;  				case "Upper Shankelston":  					return 28;  				case "Albertstown":  					return 29;  				case "Terra Tablante":  					return 30;  			}
Magic Number,TSO_CityServer.Terrain,Terrain,C:\repos\Afr0_Project-Dollhouse\TSO CityServer\TSO CityServer\Terrain\Terrain.cs,GetCityNumber,The following statement contains a magic number: switch (CityName)  			{  				case "Blazing Falls":  					return 1;  				case "Alphaville":  					return 2;  				case "Test Center":  					return 3;  				case "Interhogan":  					return 4;  				case "Ocean's Edge":  					return 5;  				case "East Jerome":  					return 6;  				case "Fancy Fields":  					return 7;  				case "Betaville":  					return 8;  				case "Charvatia":  					return 9;  				case "Dragon's Cove":  					return 10;  				case "Rancho Rizzo":  					return 11;  				case "Zavadaville":  					return 12;  				case "Queen Margaret's":  					return 13;  				case "Shannopolis":  					return 14;  				case "Grantley Grove":  					return 15;  				case "Calvin's Creek":  					return 16;  				case "The Billabong":  					return 17;  				case "Mount Fuji":  					return 18;  				case "Dan's Grove":  					return 19;  				case "Jolly Pines":  					return 20;  				case "Yatesport":  					return 21;  				case "Landry Lakes":  					return 22;  				case "Nichol's Notch":  					return 23;  				case "King Canyons":  					return 24;  				case "Virginia Islands":  					return 25;  				case "Pixie Point":  					return 26;  				case "West Darrington":  					return 27;  				case "Upper Shankelston":  					return 28;  				case "Albertstown":  					return 29;  				case "Terra Tablante":  					return 30;  			}
Magic Number,TSO_CityServer.Terrain,Terrain,C:\repos\Afr0_Project-Dollhouse\TSO CityServer\TSO CityServer\Terrain\Terrain.cs,GetCityNumber,The following statement contains a magic number: switch (CityName)  			{  				case "Blazing Falls":  					return 1;  				case "Alphaville":  					return 2;  				case "Test Center":  					return 3;  				case "Interhogan":  					return 4;  				case "Ocean's Edge":  					return 5;  				case "East Jerome":  					return 6;  				case "Fancy Fields":  					return 7;  				case "Betaville":  					return 8;  				case "Charvatia":  					return 9;  				case "Dragon's Cove":  					return 10;  				case "Rancho Rizzo":  					return 11;  				case "Zavadaville":  					return 12;  				case "Queen Margaret's":  					return 13;  				case "Shannopolis":  					return 14;  				case "Grantley Grove":  					return 15;  				case "Calvin's Creek":  					return 16;  				case "The Billabong":  					return 17;  				case "Mount Fuji":  					return 18;  				case "Dan's Grove":  					return 19;  				case "Jolly Pines":  					return 20;  				case "Yatesport":  					return 21;  				case "Landry Lakes":  					return 22;  				case "Nichol's Notch":  					return 23;  				case "King Canyons":  					return 24;  				case "Virginia Islands":  					return 25;  				case "Pixie Point":  					return 26;  				case "West Darrington":  					return 27;  				case "Upper Shankelston":  					return 28;  				case "Albertstown":  					return 29;  				case "Terra Tablante":  					return 30;  			}
Magic Number,TSO_CityServer.Terrain,Terrain,C:\repos\Afr0_Project-Dollhouse\TSO CityServer\TSO CityServer\Terrain\Terrain.cs,GetCityNumber,The following statement contains a magic number: switch (CityName)  			{  				case "Blazing Falls":  					return 1;  				case "Alphaville":  					return 2;  				case "Test Center":  					return 3;  				case "Interhogan":  					return 4;  				case "Ocean's Edge":  					return 5;  				case "East Jerome":  					return 6;  				case "Fancy Fields":  					return 7;  				case "Betaville":  					return 8;  				case "Charvatia":  					return 9;  				case "Dragon's Cove":  					return 10;  				case "Rancho Rizzo":  					return 11;  				case "Zavadaville":  					return 12;  				case "Queen Margaret's":  					return 13;  				case "Shannopolis":  					return 14;  				case "Grantley Grove":  					return 15;  				case "Calvin's Creek":  					return 16;  				case "The Billabong":  					return 17;  				case "Mount Fuji":  					return 18;  				case "Dan's Grove":  					return 19;  				case "Jolly Pines":  					return 20;  				case "Yatesport":  					return 21;  				case "Landry Lakes":  					return 22;  				case "Nichol's Notch":  					return 23;  				case "King Canyons":  					return 24;  				case "Virginia Islands":  					return 25;  				case "Pixie Point":  					return 26;  				case "West Darrington":  					return 27;  				case "Upper Shankelston":  					return 28;  				case "Albertstown":  					return 29;  				case "Terra Tablante":  					return 30;  			}
Magic Number,TSO_CityServer.Terrain,Terrain,C:\repos\Afr0_Project-Dollhouse\TSO CityServer\TSO CityServer\Terrain\Terrain.cs,GetCityNumber,The following statement contains a magic number: switch (CityName)  			{  				case "Blazing Falls":  					return 1;  				case "Alphaville":  					return 2;  				case "Test Center":  					return 3;  				case "Interhogan":  					return 4;  				case "Ocean's Edge":  					return 5;  				case "East Jerome":  					return 6;  				case "Fancy Fields":  					return 7;  				case "Betaville":  					return 8;  				case "Charvatia":  					return 9;  				case "Dragon's Cove":  					return 10;  				case "Rancho Rizzo":  					return 11;  				case "Zavadaville":  					return 12;  				case "Queen Margaret's":  					return 13;  				case "Shannopolis":  					return 14;  				case "Grantley Grove":  					return 15;  				case "Calvin's Creek":  					return 16;  				case "The Billabong":  					return 17;  				case "Mount Fuji":  					return 18;  				case "Dan's Grove":  					return 19;  				case "Jolly Pines":  					return 20;  				case "Yatesport":  					return 21;  				case "Landry Lakes":  					return 22;  				case "Nichol's Notch":  					return 23;  				case "King Canyons":  					return 24;  				case "Virginia Islands":  					return 25;  				case "Pixie Point":  					return 26;  				case "West Darrington":  					return 27;  				case "Upper Shankelston":  					return 28;  				case "Albertstown":  					return 29;  				case "Terra Tablante":  					return 30;  			}
Magic Number,TSO_CityServer.Terrain,Terrain,C:\repos\Afr0_Project-Dollhouse\TSO CityServer\TSO CityServer\Terrain\Terrain.cs,GetCityNumber,The following statement contains a magic number: switch (CityName)  			{  				case "Blazing Falls":  					return 1;  				case "Alphaville":  					return 2;  				case "Test Center":  					return 3;  				case "Interhogan":  					return 4;  				case "Ocean's Edge":  					return 5;  				case "East Jerome":  					return 6;  				case "Fancy Fields":  					return 7;  				case "Betaville":  					return 8;  				case "Charvatia":  					return 9;  				case "Dragon's Cove":  					return 10;  				case "Rancho Rizzo":  					return 11;  				case "Zavadaville":  					return 12;  				case "Queen Margaret's":  					return 13;  				case "Shannopolis":  					return 14;  				case "Grantley Grove":  					return 15;  				case "Calvin's Creek":  					return 16;  				case "The Billabong":  					return 17;  				case "Mount Fuji":  					return 18;  				case "Dan's Grove":  					return 19;  				case "Jolly Pines":  					return 20;  				case "Yatesport":  					return 21;  				case "Landry Lakes":  					return 22;  				case "Nichol's Notch":  					return 23;  				case "King Canyons":  					return 24;  				case "Virginia Islands":  					return 25;  				case "Pixie Point":  					return 26;  				case "West Darrington":  					return 27;  				case "Upper Shankelston":  					return 28;  				case "Albertstown":  					return 29;  				case "Terra Tablante":  					return 30;  			}
Magic Number,TSO_CityServer.Terrain,Terrain,C:\repos\Afr0_Project-Dollhouse\TSO CityServer\TSO CityServer\Terrain\Terrain.cs,GetCityNumber,The following statement contains a magic number: switch (CityName)  			{  				case "Blazing Falls":  					return 1;  				case "Alphaville":  					return 2;  				case "Test Center":  					return 3;  				case "Interhogan":  					return 4;  				case "Ocean's Edge":  					return 5;  				case "East Jerome":  					return 6;  				case "Fancy Fields":  					return 7;  				case "Betaville":  					return 8;  				case "Charvatia":  					return 9;  				case "Dragon's Cove":  					return 10;  				case "Rancho Rizzo":  					return 11;  				case "Zavadaville":  					return 12;  				case "Queen Margaret's":  					return 13;  				case "Shannopolis":  					return 14;  				case "Grantley Grove":  					return 15;  				case "Calvin's Creek":  					return 16;  				case "The Billabong":  					return 17;  				case "Mount Fuji":  					return 18;  				case "Dan's Grove":  					return 19;  				case "Jolly Pines":  					return 20;  				case "Yatesport":  					return 21;  				case "Landry Lakes":  					return 22;  				case "Nichol's Notch":  					return 23;  				case "King Canyons":  					return 24;  				case "Virginia Islands":  					return 25;  				case "Pixie Point":  					return 26;  				case "West Darrington":  					return 27;  				case "Upper Shankelston":  					return 28;  				case "Albertstown":  					return 29;  				case "Terra Tablante":  					return 30;  			}
Magic Number,TSO_CityServer.Terrain,Terrain,C:\repos\Afr0_Project-Dollhouse\TSO CityServer\TSO CityServer\Terrain\Terrain.cs,GetCityNumber,The following statement contains a magic number: switch (CityName)  			{  				case "Blazing Falls":  					return 1;  				case "Alphaville":  					return 2;  				case "Test Center":  					return 3;  				case "Interhogan":  					return 4;  				case "Ocean's Edge":  					return 5;  				case "East Jerome":  					return 6;  				case "Fancy Fields":  					return 7;  				case "Betaville":  					return 8;  				case "Charvatia":  					return 9;  				case "Dragon's Cove":  					return 10;  				case "Rancho Rizzo":  					return 11;  				case "Zavadaville":  					return 12;  				case "Queen Margaret's":  					return 13;  				case "Shannopolis":  					return 14;  				case "Grantley Grove":  					return 15;  				case "Calvin's Creek":  					return 16;  				case "The Billabong":  					return 17;  				case "Mount Fuji":  					return 18;  				case "Dan's Grove":  					return 19;  				case "Jolly Pines":  					return 20;  				case "Yatesport":  					return 21;  				case "Landry Lakes":  					return 22;  				case "Nichol's Notch":  					return 23;  				case "King Canyons":  					return 24;  				case "Virginia Islands":  					return 25;  				case "Pixie Point":  					return 26;  				case "West Darrington":  					return 27;  				case "Upper Shankelston":  					return 28;  				case "Albertstown":  					return 29;  				case "Terra Tablante":  					return 30;  			}
Magic Number,TSO_CityServer.Terrain,Terrain,C:\repos\Afr0_Project-Dollhouse\TSO CityServer\TSO CityServer\Terrain\Terrain.cs,GetCityNumber,The following statement contains a magic number: switch (CityName)  			{  				case "Blazing Falls":  					return 1;  				case "Alphaville":  					return 2;  				case "Test Center":  					return 3;  				case "Interhogan":  					return 4;  				case "Ocean's Edge":  					return 5;  				case "East Jerome":  					return 6;  				case "Fancy Fields":  					return 7;  				case "Betaville":  					return 8;  				case "Charvatia":  					return 9;  				case "Dragon's Cove":  					return 10;  				case "Rancho Rizzo":  					return 11;  				case "Zavadaville":  					return 12;  				case "Queen Margaret's":  					return 13;  				case "Shannopolis":  					return 14;  				case "Grantley Grove":  					return 15;  				case "Calvin's Creek":  					return 16;  				case "The Billabong":  					return 17;  				case "Mount Fuji":  					return 18;  				case "Dan's Grove":  					return 19;  				case "Jolly Pines":  					return 20;  				case "Yatesport":  					return 21;  				case "Landry Lakes":  					return 22;  				case "Nichol's Notch":  					return 23;  				case "King Canyons":  					return 24;  				case "Virginia Islands":  					return 25;  				case "Pixie Point":  					return 26;  				case "West Darrington":  					return 27;  				case "Upper Shankelston":  					return 28;  				case "Albertstown":  					return 29;  				case "Terra Tablante":  					return 30;  			}
Magic Number,TSO_CityServer.Terrain,Terrain,C:\repos\Afr0_Project-Dollhouse\TSO CityServer\TSO CityServer\Terrain\Terrain.cs,GetCityNumber,The following statement contains a magic number: switch (CityName)  			{  				case "Blazing Falls":  					return 1;  				case "Alphaville":  					return 2;  				case "Test Center":  					return 3;  				case "Interhogan":  					return 4;  				case "Ocean's Edge":  					return 5;  				case "East Jerome":  					return 6;  				case "Fancy Fields":  					return 7;  				case "Betaville":  					return 8;  				case "Charvatia":  					return 9;  				case "Dragon's Cove":  					return 10;  				case "Rancho Rizzo":  					return 11;  				case "Zavadaville":  					return 12;  				case "Queen Margaret's":  					return 13;  				case "Shannopolis":  					return 14;  				case "Grantley Grove":  					return 15;  				case "Calvin's Creek":  					return 16;  				case "The Billabong":  					return 17;  				case "Mount Fuji":  					return 18;  				case "Dan's Grove":  					return 19;  				case "Jolly Pines":  					return 20;  				case "Yatesport":  					return 21;  				case "Landry Lakes":  					return 22;  				case "Nichol's Notch":  					return 23;  				case "King Canyons":  					return 24;  				case "Virginia Islands":  					return 25;  				case "Pixie Point":  					return 26;  				case "West Darrington":  					return 27;  				case "Upper Shankelston":  					return 28;  				case "Albertstown":  					return 29;  				case "Terra Tablante":  					return 30;  			}
Magic Number,TSO_CityServer.Terrain,Terrain,C:\repos\Afr0_Project-Dollhouse\TSO CityServer\TSO CityServer\Terrain\Terrain.cs,GetCityNumber,The following statement contains a magic number: switch (CityName)  			{  				case "Blazing Falls":  					return 1;  				case "Alphaville":  					return 2;  				case "Test Center":  					return 3;  				case "Interhogan":  					return 4;  				case "Ocean's Edge":  					return 5;  				case "East Jerome":  					return 6;  				case "Fancy Fields":  					return 7;  				case "Betaville":  					return 8;  				case "Charvatia":  					return 9;  				case "Dragon's Cove":  					return 10;  				case "Rancho Rizzo":  					return 11;  				case "Zavadaville":  					return 12;  				case "Queen Margaret's":  					return 13;  				case "Shannopolis":  					return 14;  				case "Grantley Grove":  					return 15;  				case "Calvin's Creek":  					return 16;  				case "The Billabong":  					return 17;  				case "Mount Fuji":  					return 18;  				case "Dan's Grove":  					return 19;  				case "Jolly Pines":  					return 20;  				case "Yatesport":  					return 21;  				case "Landry Lakes":  					return 22;  				case "Nichol's Notch":  					return 23;  				case "King Canyons":  					return 24;  				case "Virginia Islands":  					return 25;  				case "Pixie Point":  					return 26;  				case "West Darrington":  					return 27;  				case "Upper Shankelston":  					return 28;  				case "Albertstown":  					return 29;  				case "Terra Tablante":  					return 30;  			}
Magic Number,TSO_CityServer.Terrain,Terrain,C:\repos\Afr0_Project-Dollhouse\TSO CityServer\TSO CityServer\Terrain\Terrain.cs,GetCityNumber,The following statement contains a magic number: switch (CityName)  			{  				case "Blazing Falls":  					return 1;  				case "Alphaville":  					return 2;  				case "Test Center":  					return 3;  				case "Interhogan":  					return 4;  				case "Ocean's Edge":  					return 5;  				case "East Jerome":  					return 6;  				case "Fancy Fields":  					return 7;  				case "Betaville":  					return 8;  				case "Charvatia":  					return 9;  				case "Dragon's Cove":  					return 10;  				case "Rancho Rizzo":  					return 11;  				case "Zavadaville":  					return 12;  				case "Queen Margaret's":  					return 13;  				case "Shannopolis":  					return 14;  				case "Grantley Grove":  					return 15;  				case "Calvin's Creek":  					return 16;  				case "The Billabong":  					return 17;  				case "Mount Fuji":  					return 18;  				case "Dan's Grove":  					return 19;  				case "Jolly Pines":  					return 20;  				case "Yatesport":  					return 21;  				case "Landry Lakes":  					return 22;  				case "Nichol's Notch":  					return 23;  				case "King Canyons":  					return 24;  				case "Virginia Islands":  					return 25;  				case "Pixie Point":  					return 26;  				case "West Darrington":  					return 27;  				case "Upper Shankelston":  					return 28;  				case "Albertstown":  					return 29;  				case "Terra Tablante":  					return 30;  			}
Magic Number,TSO_CityServer.Terrain,Terrain,C:\repos\Afr0_Project-Dollhouse\TSO CityServer\TSO CityServer\Terrain\Terrain.cs,GetCityNumber,The following statement contains a magic number: switch (CityName)  			{  				case "Blazing Falls":  					return 1;  				case "Alphaville":  					return 2;  				case "Test Center":  					return 3;  				case "Interhogan":  					return 4;  				case "Ocean's Edge":  					return 5;  				case "East Jerome":  					return 6;  				case "Fancy Fields":  					return 7;  				case "Betaville":  					return 8;  				case "Charvatia":  					return 9;  				case "Dragon's Cove":  					return 10;  				case "Rancho Rizzo":  					return 11;  				case "Zavadaville":  					return 12;  				case "Queen Margaret's":  					return 13;  				case "Shannopolis":  					return 14;  				case "Grantley Grove":  					return 15;  				case "Calvin's Creek":  					return 16;  				case "The Billabong":  					return 17;  				case "Mount Fuji":  					return 18;  				case "Dan's Grove":  					return 19;  				case "Jolly Pines":  					return 20;  				case "Yatesport":  					return 21;  				case "Landry Lakes":  					return 22;  				case "Nichol's Notch":  					return 23;  				case "King Canyons":  					return 24;  				case "Virginia Islands":  					return 25;  				case "Pixie Point":  					return 26;  				case "West Darrington":  					return 27;  				case "Upper Shankelston":  					return 28;  				case "Albertstown":  					return 29;  				case "Terra Tablante":  					return 30;  			}
Magic Number,TSO_CityServer.Terrain,Terrain,C:\repos\Afr0_Project-Dollhouse\TSO CityServer\TSO CityServer\Terrain\Terrain.cs,GetCityNumber,The following statement contains a magic number: switch (CityName)  			{  				case "Blazing Falls":  					return 1;  				case "Alphaville":  					return 2;  				case "Test Center":  					return 3;  				case "Interhogan":  					return 4;  				case "Ocean's Edge":  					return 5;  				case "East Jerome":  					return 6;  				case "Fancy Fields":  					return 7;  				case "Betaville":  					return 8;  				case "Charvatia":  					return 9;  				case "Dragon's Cove":  					return 10;  				case "Rancho Rizzo":  					return 11;  				case "Zavadaville":  					return 12;  				case "Queen Margaret's":  					return 13;  				case "Shannopolis":  					return 14;  				case "Grantley Grove":  					return 15;  				case "Calvin's Creek":  					return 16;  				case "The Billabong":  					return 17;  				case "Mount Fuji":  					return 18;  				case "Dan's Grove":  					return 19;  				case "Jolly Pines":  					return 20;  				case "Yatesport":  					return 21;  				case "Landry Lakes":  					return 22;  				case "Nichol's Notch":  					return 23;  				case "King Canyons":  					return 24;  				case "Virginia Islands":  					return 25;  				case "Pixie Point":  					return 26;  				case "West Darrington":  					return 27;  				case "Upper Shankelston":  					return 28;  				case "Albertstown":  					return 29;  				case "Terra Tablante":  					return 30;  			}
Magic Number,TSO_CityServer.Terrain,Terrain,C:\repos\Afr0_Project-Dollhouse\TSO CityServer\TSO CityServer\Terrain\Terrain.cs,GetCityNumber,The following statement contains a magic number: switch (CityName)  			{  				case "Blazing Falls":  					return 1;  				case "Alphaville":  					return 2;  				case "Test Center":  					return 3;  				case "Interhogan":  					return 4;  				case "Ocean's Edge":  					return 5;  				case "East Jerome":  					return 6;  				case "Fancy Fields":  					return 7;  				case "Betaville":  					return 8;  				case "Charvatia":  					return 9;  				case "Dragon's Cove":  					return 10;  				case "Rancho Rizzo":  					return 11;  				case "Zavadaville":  					return 12;  				case "Queen Margaret's":  					return 13;  				case "Shannopolis":  					return 14;  				case "Grantley Grove":  					return 15;  				case "Calvin's Creek":  					return 16;  				case "The Billabong":  					return 17;  				case "Mount Fuji":  					return 18;  				case "Dan's Grove":  					return 19;  				case "Jolly Pines":  					return 20;  				case "Yatesport":  					return 21;  				case "Landry Lakes":  					return 22;  				case "Nichol's Notch":  					return 23;  				case "King Canyons":  					return 24;  				case "Virginia Islands":  					return 25;  				case "Pixie Point":  					return 26;  				case "West Darrington":  					return 27;  				case "Upper Shankelston":  					return 28;  				case "Albertstown":  					return 29;  				case "Terra Tablante":  					return 30;  			}
Magic Number,TSO_CityServer.Terrain,Terrain,C:\repos\Afr0_Project-Dollhouse\TSO CityServer\TSO CityServer\Terrain\Terrain.cs,LoadContent,The following statement contains a magic number: string CityStr = "cities\\" + ((m_CityNumber >= 10) ? "city_00" + m_CityNumber.ToString() : "city_000" + m_CityNumber.ToString());
Magic Number,TSO_CityServer.Terrain,Terrain,C:\repos\Afr0_Project-Dollhouse\TSO CityServer\TSO CityServer\Terrain\Terrain.cs,ConvertToBinaryArray,The following statement contains a magic number: byte[] BinArray = new byte[ColorArray.Length * 4];
Magic Number,TSO_CityServer.Terrain,Terrain,C:\repos\Afr0_Project-Dollhouse\TSO CityServer\TSO CityServer\Terrain\Terrain.cs,ConvertToBinaryArray,The following statement contains a magic number: for (int i = 0; i < ColorArray.Length; i++)  			{  				BinArray[i * 4] = ColorArray[i].R;  				BinArray[i * 4 + 1] = ColorArray[i].G;  				BinArray[i * 4 + 2] = ColorArray[i].B;  				BinArray[i * 4 + 3] = ColorArray[i].A;  			}
Magic Number,TSO_CityServer.Terrain,Terrain,C:\repos\Afr0_Project-Dollhouse\TSO CityServer\TSO CityServer\Terrain\Terrain.cs,ConvertToBinaryArray,The following statement contains a magic number: for (int i = 0; i < ColorArray.Length; i++)  			{  				BinArray[i * 4] = ColorArray[i].R;  				BinArray[i * 4 + 1] = ColorArray[i].G;  				BinArray[i * 4 + 2] = ColorArray[i].B;  				BinArray[i * 4 + 3] = ColorArray[i].A;  			}
Magic Number,TSO_CityServer.Terrain,Terrain,C:\repos\Afr0_Project-Dollhouse\TSO CityServer\TSO CityServer\Terrain\Terrain.cs,ConvertToBinaryArray,The following statement contains a magic number: for (int i = 0; i < ColorArray.Length; i++)  			{  				BinArray[i * 4] = ColorArray[i].R;  				BinArray[i * 4 + 1] = ColorArray[i].G;  				BinArray[i * 4 + 2] = ColorArray[i].B;  				BinArray[i * 4 + 3] = ColorArray[i].A;  			}
Magic Number,TSO_CityServer.Terrain,Terrain,C:\repos\Afr0_Project-Dollhouse\TSO CityServer\TSO CityServer\Terrain\Terrain.cs,ConvertToBinaryArray,The following statement contains a magic number: for (int i = 0; i < ColorArray.Length; i++)  			{  				BinArray[i * 4] = ColorArray[i].R;  				BinArray[i * 4 + 1] = ColorArray[i].G;  				BinArray[i * 4 + 2] = ColorArray[i].B;  				BinArray[i * 4 + 3] = ColorArray[i].A;  			}
Magic Number,TSO_CityServer.Terrain,Terrain,C:\repos\Afr0_Project-Dollhouse\TSO CityServer\TSO CityServer\Terrain\Terrain.cs,ConvertToBinaryArray,The following statement contains a magic number: for (int i = 0; i < ColorArray.Length; i++)  			{  				BinArray[i * 4] = ColorArray[i].R;  				BinArray[i * 4 + 1] = ColorArray[i].G;  				BinArray[i * 4 + 2] = ColorArray[i].B;  				BinArray[i * 4 + 3] = ColorArray[i].A;  			}
Magic Number,TSO_CityServer.Terrain,Terrain,C:\repos\Afr0_Project-Dollhouse\TSO CityServer\TSO CityServer\Terrain\Terrain.cs,ConvertToBinaryArray,The following statement contains a magic number: for (int i = 0; i < ColorArray.Length; i++)  			{  				BinArray[i * 4] = ColorArray[i].R;  				BinArray[i * 4 + 1] = ColorArray[i].G;  				BinArray[i * 4 + 2] = ColorArray[i].B;  				BinArray[i * 4 + 3] = ColorArray[i].A;  			}
Magic Number,TSO_CityServer.Terrain,Terrain,C:\repos\Afr0_Project-Dollhouse\TSO CityServer\TSO CityServer\Terrain\Terrain.cs,IsLandBuildable,The following statement contains a magic number: if (x < 0 || x > 510 || y < 0 || y > 510) return false;
Magic Number,TSO_CityServer.Terrain,Terrain,C:\repos\Afr0_Project-Dollhouse\TSO CityServer\TSO CityServer\Terrain\Terrain.cs,IsLandBuildable,The following statement contains a magic number: if (x < 0 || x > 510 || y < 0 || y > 510) return false;
Magic Number,TSO_CityServer.Terrain,Terrain,C:\repos\Afr0_Project-Dollhouse\TSO CityServer\TSO CityServer\Terrain\Terrain.cs,IsLandBuildable,The following statement contains a magic number: if (m_TerrainTypeColorData[y * 512 + x] == Color.FromArgb(0x0C' 0' 255)) return false;
Magic Number,TSO_CityServer.Terrain,Terrain,C:\repos\Afr0_Project-Dollhouse\TSO CityServer\TSO CityServer\Terrain\Terrain.cs,IsLandBuildable,The following statement contains a magic number: if (m_TerrainTypeColorData[y * 512 + x] == Color.FromArgb(0x0C' 0' 255)) return false;
Magic Number,TSO_CityServer.Terrain,Terrain,C:\repos\Afr0_Project-Dollhouse\TSO CityServer\TSO CityServer\Terrain\Terrain.cs,IsLandBuildable,The following statement contains a magic number: int max = Math.Max(m_ElevationData[(y * 512 + x) * 4]' Math.Max(m_ElevationData[(y * 512 + x + 1) * 4]' Math.Max(m_ElevationData[((y + 1) * 512 + x + 1) * 4]' m_ElevationData[((y + 1) * 512 + x) * 4])));
Magic Number,TSO_CityServer.Terrain,Terrain,C:\repos\Afr0_Project-Dollhouse\TSO CityServer\TSO CityServer\Terrain\Terrain.cs,IsLandBuildable,The following statement contains a magic number: int max = Math.Max(m_ElevationData[(y * 512 + x) * 4]' Math.Max(m_ElevationData[(y * 512 + x + 1) * 4]' Math.Max(m_ElevationData[((y + 1) * 512 + x + 1) * 4]' m_ElevationData[((y + 1) * 512 + x) * 4])));
Magic Number,TSO_CityServer.Terrain,Terrain,C:\repos\Afr0_Project-Dollhouse\TSO CityServer\TSO CityServer\Terrain\Terrain.cs,IsLandBuildable,The following statement contains a magic number: int max = Math.Max(m_ElevationData[(y * 512 + x) * 4]' Math.Max(m_ElevationData[(y * 512 + x + 1) * 4]' Math.Max(m_ElevationData[((y + 1) * 512 + x + 1) * 4]' m_ElevationData[((y + 1) * 512 + x) * 4])));
Magic Number,TSO_CityServer.Terrain,Terrain,C:\repos\Afr0_Project-Dollhouse\TSO CityServer\TSO CityServer\Terrain\Terrain.cs,IsLandBuildable,The following statement contains a magic number: int max = Math.Max(m_ElevationData[(y * 512 + x) * 4]' Math.Max(m_ElevationData[(y * 512 + x + 1) * 4]' Math.Max(m_ElevationData[((y + 1) * 512 + x + 1) * 4]' m_ElevationData[((y + 1) * 512 + x) * 4])));
Magic Number,TSO_CityServer.Terrain,Terrain,C:\repos\Afr0_Project-Dollhouse\TSO CityServer\TSO CityServer\Terrain\Terrain.cs,IsLandBuildable,The following statement contains a magic number: int max = Math.Max(m_ElevationData[(y * 512 + x) * 4]' Math.Max(m_ElevationData[(y * 512 + x + 1) * 4]' Math.Max(m_ElevationData[((y + 1) * 512 + x + 1) * 4]' m_ElevationData[((y + 1) * 512 + x) * 4])));
Magic Number,TSO_CityServer.Terrain,Terrain,C:\repos\Afr0_Project-Dollhouse\TSO CityServer\TSO CityServer\Terrain\Terrain.cs,IsLandBuildable,The following statement contains a magic number: int max = Math.Max(m_ElevationData[(y * 512 + x) * 4]' Math.Max(m_ElevationData[(y * 512 + x + 1) * 4]' Math.Max(m_ElevationData[((y + 1) * 512 + x + 1) * 4]' m_ElevationData[((y + 1) * 512 + x) * 4])));
Magic Number,TSO_CityServer.Terrain,Terrain,C:\repos\Afr0_Project-Dollhouse\TSO CityServer\TSO CityServer\Terrain\Terrain.cs,IsLandBuildable,The following statement contains a magic number: int max = Math.Max(m_ElevationData[(y * 512 + x) * 4]' Math.Max(m_ElevationData[(y * 512 + x + 1) * 4]' Math.Max(m_ElevationData[((y + 1) * 512 + x + 1) * 4]' m_ElevationData[((y + 1) * 512 + x) * 4])));
Magic Number,TSO_CityServer.Terrain,Terrain,C:\repos\Afr0_Project-Dollhouse\TSO CityServer\TSO CityServer\Terrain\Terrain.cs,IsLandBuildable,The following statement contains a magic number: int max = Math.Max(m_ElevationData[(y * 512 + x) * 4]' Math.Max(m_ElevationData[(y * 512 + x + 1) * 4]' Math.Max(m_ElevationData[((y + 1) * 512 + x + 1) * 4]' m_ElevationData[((y + 1) * 512 + x) * 4])));
Magic Number,TSO_CityServer.Terrain,Terrain,C:\repos\Afr0_Project-Dollhouse\TSO CityServer\TSO CityServer\Terrain\Terrain.cs,IsLandBuildable,The following statement contains a magic number: int min = Math.Min(m_ElevationData[(y * 512 + x) * 4]' Math.Min(m_ElevationData[(y * 512 + x + 1) * 4]' Math.Min(m_ElevationData[((y + 1) * 512 + x + 1) * 4]' m_ElevationData[((y + 1) * 512 + x) * 4])));
Magic Number,TSO_CityServer.Terrain,Terrain,C:\repos\Afr0_Project-Dollhouse\TSO CityServer\TSO CityServer\Terrain\Terrain.cs,IsLandBuildable,The following statement contains a magic number: int min = Math.Min(m_ElevationData[(y * 512 + x) * 4]' Math.Min(m_ElevationData[(y * 512 + x + 1) * 4]' Math.Min(m_ElevationData[((y + 1) * 512 + x + 1) * 4]' m_ElevationData[((y + 1) * 512 + x) * 4])));
Magic Number,TSO_CityServer.Terrain,Terrain,C:\repos\Afr0_Project-Dollhouse\TSO CityServer\TSO CityServer\Terrain\Terrain.cs,IsLandBuildable,The following statement contains a magic number: int min = Math.Min(m_ElevationData[(y * 512 + x) * 4]' Math.Min(m_ElevationData[(y * 512 + x + 1) * 4]' Math.Min(m_ElevationData[((y + 1) * 512 + x + 1) * 4]' m_ElevationData[((y + 1) * 512 + x) * 4])));
Magic Number,TSO_CityServer.Terrain,Terrain,C:\repos\Afr0_Project-Dollhouse\TSO CityServer\TSO CityServer\Terrain\Terrain.cs,IsLandBuildable,The following statement contains a magic number: int min = Math.Min(m_ElevationData[(y * 512 + x) * 4]' Math.Min(m_ElevationData[(y * 512 + x + 1) * 4]' Math.Min(m_ElevationData[((y + 1) * 512 + x + 1) * 4]' m_ElevationData[((y + 1) * 512 + x) * 4])));
Magic Number,TSO_CityServer.Terrain,Terrain,C:\repos\Afr0_Project-Dollhouse\TSO CityServer\TSO CityServer\Terrain\Terrain.cs,IsLandBuildable,The following statement contains a magic number: int min = Math.Min(m_ElevationData[(y * 512 + x) * 4]' Math.Min(m_ElevationData[(y * 512 + x + 1) * 4]' Math.Min(m_ElevationData[((y + 1) * 512 + x + 1) * 4]' m_ElevationData[((y + 1) * 512 + x) * 4])));
Magic Number,TSO_CityServer.Terrain,Terrain,C:\repos\Afr0_Project-Dollhouse\TSO CityServer\TSO CityServer\Terrain\Terrain.cs,IsLandBuildable,The following statement contains a magic number: int min = Math.Min(m_ElevationData[(y * 512 + x) * 4]' Math.Min(m_ElevationData[(y * 512 + x + 1) * 4]' Math.Min(m_ElevationData[((y + 1) * 512 + x + 1) * 4]' m_ElevationData[((y + 1) * 512 + x) * 4])));
Magic Number,TSO_CityServer.Terrain,Terrain,C:\repos\Afr0_Project-Dollhouse\TSO CityServer\TSO CityServer\Terrain\Terrain.cs,IsLandBuildable,The following statement contains a magic number: int min = Math.Min(m_ElevationData[(y * 512 + x) * 4]' Math.Min(m_ElevationData[(y * 512 + x + 1) * 4]' Math.Min(m_ElevationData[((y + 1) * 512 + x + 1) * 4]' m_ElevationData[((y + 1) * 512 + x) * 4])));
Magic Number,TSO_CityServer.Terrain,Terrain,C:\repos\Afr0_Project-Dollhouse\TSO CityServer\TSO CityServer\Terrain\Terrain.cs,IsLandBuildable,The following statement contains a magic number: int min = Math.Min(m_ElevationData[(y * 512 + x) * 4]' Math.Min(m_ElevationData[(y * 512 + x + 1) * 4]' Math.Min(m_ElevationData[((y + 1) * 512 + x + 1) * 4]' m_ElevationData[((y + 1) * 512 + x) * 4])));
Magic Number,TSO_CityServer.Terrain,Terrain,C:\repos\Afr0_Project-Dollhouse\TSO CityServer\TSO CityServer\Terrain\Terrain.cs,IsLandBuildable,The following statement contains a magic number: return (max - min < 10);
Magic Number,TSO_CityServer.VM,VM,C:\repos\Afr0_Project-Dollhouse\TSO CityServer\TSO CityServer\VM\VM.cs,Init,The following statement contains a magic number: Clock.TicksPerMinute = 10;
Magic Number,TSO_CityServer.VM,VMClock,C:\repos\Afr0_Project-Dollhouse\TSO CityServer\TSO CityServer\VM\VMClock.cs,Tick,The following statement contains a magic number: if (++MinuteFractions >= TicksPerMinute)              {                  MinuteFractions = 0;                  if (++Minutes >= 60)   				{                      Minutes = 0;                      if (++Hours >= 24)                      {                          Hours = 0;                      }                  }              }
Magic Number,TSO_CityServer.VM,VMClock,C:\repos\Afr0_Project-Dollhouse\TSO CityServer\TSO CityServer\VM\VMClock.cs,Tick,The following statement contains a magic number: if (++MinuteFractions >= TicksPerMinute)              {                  MinuteFractions = 0;                  if (++Minutes >= 60)   				{                      Minutes = 0;                      if (++Hours >= 24)                      {                          Hours = 0;                      }                  }              }
Magic Number,TSO_CityServer.Network,ClientPacketHandlers,C:\repos\Afr0_Project-Dollhouse\TSO CityServer\TSO CityServer\Network\ClientPacketHandlers.cs,HandleLotCostRequest,The following statement contains a magic number: using (DataAccess db = DataAccess.Get())  			{  				if (db.Houses.GetForPosition(X' Y).HouseID == 0)  				{  					if (!NetworkFacade.CurrentSession.IsLotOccupied(X' Y))  					{  						ProtoHelpers.SetBit(ref Flags' 0' false); //Online.  						ProtoHelpers.SetBit(ref Flags' 1' false); //Spotlight' this will have to be checked against DB.  						ProtoHelpers.SetBit(ref Flags' 2' false); //Locked - is the house locked for public access?  						ProtoHelpers.SetBit(ref Flags' 3' false); //Occupied.  						LotCostPacket.WriteByte(Flags);  						LotCostPacket.WriteInt32(NetworkFacade.LOT_COST); //TODO: Figure out a way to deal with this...  					}  				}  				else  				{  					if (NetworkFacade.CurrentSession.IsLotOccupied(X' Y))  					{  						ProtoHelpers.SetBit(ref Flags' 0' true);  //Online.  						ProtoHelpers.SetBit(ref Flags' 1' false); //Spotlight' this will have to be checked against DB.  						ProtoHelpers.SetBit(ref Flags' 2' false); //Locked - is the house locked for public access?  						ProtoHelpers.SetBit(ref Flags' 3' true);  //Occupied.  						LotCostPacket.WriteByte(Flags);  						LotCostPacket.WriteInt32(0);  					}  					else if (!NetworkFacade.CurrentSession.IsLotOccupied(X' Y))  					{  						ProtoHelpers.SetBit(ref Flags' 0' false); //Online.  						ProtoHelpers.SetBit(ref Flags' 1' false); //Spotlight' this will have to be checked against DB.  						ProtoHelpers.SetBit(ref Flags' 2' false); //Locked - is the house locked for public access?  						ProtoHelpers.SetBit(ref Flags' 3' true);  //Occupied.  						LotCostPacket.WriteByte(Flags);  						LotCostPacket.WriteInt32(0);  					}  				}  			}
Magic Number,TSO_CityServer.Network,ClientPacketHandlers,C:\repos\Afr0_Project-Dollhouse\TSO CityServer\TSO CityServer\Network\ClientPacketHandlers.cs,HandleLotCostRequest,The following statement contains a magic number: using (DataAccess db = DataAccess.Get())  			{  				if (db.Houses.GetForPosition(X' Y).HouseID == 0)  				{  					if (!NetworkFacade.CurrentSession.IsLotOccupied(X' Y))  					{  						ProtoHelpers.SetBit(ref Flags' 0' false); //Online.  						ProtoHelpers.SetBit(ref Flags' 1' false); //Spotlight' this will have to be checked against DB.  						ProtoHelpers.SetBit(ref Flags' 2' false); //Locked - is the house locked for public access?  						ProtoHelpers.SetBit(ref Flags' 3' false); //Occupied.  						LotCostPacket.WriteByte(Flags);  						LotCostPacket.WriteInt32(NetworkFacade.LOT_COST); //TODO: Figure out a way to deal with this...  					}  				}  				else  				{  					if (NetworkFacade.CurrentSession.IsLotOccupied(X' Y))  					{  						ProtoHelpers.SetBit(ref Flags' 0' true);  //Online.  						ProtoHelpers.SetBit(ref Flags' 1' false); //Spotlight' this will have to be checked against DB.  						ProtoHelpers.SetBit(ref Flags' 2' false); //Locked - is the house locked for public access?  						ProtoHelpers.SetBit(ref Flags' 3' true);  //Occupied.  						LotCostPacket.WriteByte(Flags);  						LotCostPacket.WriteInt32(0);  					}  					else if (!NetworkFacade.CurrentSession.IsLotOccupied(X' Y))  					{  						ProtoHelpers.SetBit(ref Flags' 0' false); //Online.  						ProtoHelpers.SetBit(ref Flags' 1' false); //Spotlight' this will have to be checked against DB.  						ProtoHelpers.SetBit(ref Flags' 2' false); //Locked - is the house locked for public access?  						ProtoHelpers.SetBit(ref Flags' 3' true);  //Occupied.  						LotCostPacket.WriteByte(Flags);  						LotCostPacket.WriteInt32(0);  					}  				}  			}
Magic Number,TSO_CityServer.Network,ClientPacketHandlers,C:\repos\Afr0_Project-Dollhouse\TSO CityServer\TSO CityServer\Network\ClientPacketHandlers.cs,HandleLotCostRequest,The following statement contains a magic number: using (DataAccess db = DataAccess.Get())  			{  				if (db.Houses.GetForPosition(X' Y).HouseID == 0)  				{  					if (!NetworkFacade.CurrentSession.IsLotOccupied(X' Y))  					{  						ProtoHelpers.SetBit(ref Flags' 0' false); //Online.  						ProtoHelpers.SetBit(ref Flags' 1' false); //Spotlight' this will have to be checked against DB.  						ProtoHelpers.SetBit(ref Flags' 2' false); //Locked - is the house locked for public access?  						ProtoHelpers.SetBit(ref Flags' 3' false); //Occupied.  						LotCostPacket.WriteByte(Flags);  						LotCostPacket.WriteInt32(NetworkFacade.LOT_COST); //TODO: Figure out a way to deal with this...  					}  				}  				else  				{  					if (NetworkFacade.CurrentSession.IsLotOccupied(X' Y))  					{  						ProtoHelpers.SetBit(ref Flags' 0' true);  //Online.  						ProtoHelpers.SetBit(ref Flags' 1' false); //Spotlight' this will have to be checked against DB.  						ProtoHelpers.SetBit(ref Flags' 2' false); //Locked - is the house locked for public access?  						ProtoHelpers.SetBit(ref Flags' 3' true);  //Occupied.  						LotCostPacket.WriteByte(Flags);  						LotCostPacket.WriteInt32(0);  					}  					else if (!NetworkFacade.CurrentSession.IsLotOccupied(X' Y))  					{  						ProtoHelpers.SetBit(ref Flags' 0' false); //Online.  						ProtoHelpers.SetBit(ref Flags' 1' false); //Spotlight' this will have to be checked against DB.  						ProtoHelpers.SetBit(ref Flags' 2' false); //Locked - is the house locked for public access?  						ProtoHelpers.SetBit(ref Flags' 3' true);  //Occupied.  						LotCostPacket.WriteByte(Flags);  						LotCostPacket.WriteInt32(0);  					}  				}  			}
Magic Number,TSO_CityServer.Network,ClientPacketHandlers,C:\repos\Afr0_Project-Dollhouse\TSO CityServer\TSO CityServer\Network\ClientPacketHandlers.cs,HandleLotCostRequest,The following statement contains a magic number: using (DataAccess db = DataAccess.Get())  			{  				if (db.Houses.GetForPosition(X' Y).HouseID == 0)  				{  					if (!NetworkFacade.CurrentSession.IsLotOccupied(X' Y))  					{  						ProtoHelpers.SetBit(ref Flags' 0' false); //Online.  						ProtoHelpers.SetBit(ref Flags' 1' false); //Spotlight' this will have to be checked against DB.  						ProtoHelpers.SetBit(ref Flags' 2' false); //Locked - is the house locked for public access?  						ProtoHelpers.SetBit(ref Flags' 3' false); //Occupied.  						LotCostPacket.WriteByte(Flags);  						LotCostPacket.WriteInt32(NetworkFacade.LOT_COST); //TODO: Figure out a way to deal with this...  					}  				}  				else  				{  					if (NetworkFacade.CurrentSession.IsLotOccupied(X' Y))  					{  						ProtoHelpers.SetBit(ref Flags' 0' true);  //Online.  						ProtoHelpers.SetBit(ref Flags' 1' false); //Spotlight' this will have to be checked against DB.  						ProtoHelpers.SetBit(ref Flags' 2' false); //Locked - is the house locked for public access?  						ProtoHelpers.SetBit(ref Flags' 3' true);  //Occupied.  						LotCostPacket.WriteByte(Flags);  						LotCostPacket.WriteInt32(0);  					}  					else if (!NetworkFacade.CurrentSession.IsLotOccupied(X' Y))  					{  						ProtoHelpers.SetBit(ref Flags' 0' false); //Online.  						ProtoHelpers.SetBit(ref Flags' 1' false); //Spotlight' this will have to be checked against DB.  						ProtoHelpers.SetBit(ref Flags' 2' false); //Locked - is the house locked for public access?  						ProtoHelpers.SetBit(ref Flags' 3' true);  //Occupied.  						LotCostPacket.WriteByte(Flags);  						LotCostPacket.WriteInt32(0);  					}  				}  			}
Magic Number,TSO_CityServer.Network,ClientPacketHandlers,C:\repos\Afr0_Project-Dollhouse\TSO CityServer\TSO CityServer\Network\ClientPacketHandlers.cs,HandleLotCostRequest,The following statement contains a magic number: using (DataAccess db = DataAccess.Get())  			{  				if (db.Houses.GetForPosition(X' Y).HouseID == 0)  				{  					if (!NetworkFacade.CurrentSession.IsLotOccupied(X' Y))  					{  						ProtoHelpers.SetBit(ref Flags' 0' false); //Online.  						ProtoHelpers.SetBit(ref Flags' 1' false); //Spotlight' this will have to be checked against DB.  						ProtoHelpers.SetBit(ref Flags' 2' false); //Locked - is the house locked for public access?  						ProtoHelpers.SetBit(ref Flags' 3' false); //Occupied.  						LotCostPacket.WriteByte(Flags);  						LotCostPacket.WriteInt32(NetworkFacade.LOT_COST); //TODO: Figure out a way to deal with this...  					}  				}  				else  				{  					if (NetworkFacade.CurrentSession.IsLotOccupied(X' Y))  					{  						ProtoHelpers.SetBit(ref Flags' 0' true);  //Online.  						ProtoHelpers.SetBit(ref Flags' 1' false); //Spotlight' this will have to be checked against DB.  						ProtoHelpers.SetBit(ref Flags' 2' false); //Locked - is the house locked for public access?  						ProtoHelpers.SetBit(ref Flags' 3' true);  //Occupied.  						LotCostPacket.WriteByte(Flags);  						LotCostPacket.WriteInt32(0);  					}  					else if (!NetworkFacade.CurrentSession.IsLotOccupied(X' Y))  					{  						ProtoHelpers.SetBit(ref Flags' 0' false); //Online.  						ProtoHelpers.SetBit(ref Flags' 1' false); //Spotlight' this will have to be checked against DB.  						ProtoHelpers.SetBit(ref Flags' 2' false); //Locked - is the house locked for public access?  						ProtoHelpers.SetBit(ref Flags' 3' true);  //Occupied.  						LotCostPacket.WriteByte(Flags);  						LotCostPacket.WriteInt32(0);  					}  				}  			}
Magic Number,TSO_CityServer.Network,ClientPacketHandlers,C:\repos\Afr0_Project-Dollhouse\TSO CityServer\TSO CityServer\Network\ClientPacketHandlers.cs,HandleLotCostRequest,The following statement contains a magic number: using (DataAccess db = DataAccess.Get())  			{  				if (db.Houses.GetForPosition(X' Y).HouseID == 0)  				{  					if (!NetworkFacade.CurrentSession.IsLotOccupied(X' Y))  					{  						ProtoHelpers.SetBit(ref Flags' 0' false); //Online.  						ProtoHelpers.SetBit(ref Flags' 1' false); //Spotlight' this will have to be checked against DB.  						ProtoHelpers.SetBit(ref Flags' 2' false); //Locked - is the house locked for public access?  						ProtoHelpers.SetBit(ref Flags' 3' false); //Occupied.  						LotCostPacket.WriteByte(Flags);  						LotCostPacket.WriteInt32(NetworkFacade.LOT_COST); //TODO: Figure out a way to deal with this...  					}  				}  				else  				{  					if (NetworkFacade.CurrentSession.IsLotOccupied(X' Y))  					{  						ProtoHelpers.SetBit(ref Flags' 0' true);  //Online.  						ProtoHelpers.SetBit(ref Flags' 1' false); //Spotlight' this will have to be checked against DB.  						ProtoHelpers.SetBit(ref Flags' 2' false); //Locked - is the house locked for public access?  						ProtoHelpers.SetBit(ref Flags' 3' true);  //Occupied.  						LotCostPacket.WriteByte(Flags);  						LotCostPacket.WriteInt32(0);  					}  					else if (!NetworkFacade.CurrentSession.IsLotOccupied(X' Y))  					{  						ProtoHelpers.SetBit(ref Flags' 0' false); //Online.  						ProtoHelpers.SetBit(ref Flags' 1' false); //Spotlight' this will have to be checked against DB.  						ProtoHelpers.SetBit(ref Flags' 2' false); //Locked - is the house locked for public access?  						ProtoHelpers.SetBit(ref Flags' 3' true);  //Occupied.  						LotCostPacket.WriteByte(Flags);  						LotCostPacket.WriteInt32(0);  					}  				}  			}
Magic Number,TSO_CityServer.Network,LoginPacketHandlers,C:\repos\Afr0_Project-Dollhouse\TSO CityServer\TSO CityServer\Network\LoginPacketHandlers.cs,HandleClientToken,The following statement contains a magic number: try              {                  ClientToken Token = new ClientToken();  				byte CharacterCreate = (byte)P.ReadByte();                  Token.AccountID = P.ReadInt32();                  Token.ClientIP = P.ReadString();  				int ClientPort = P.ReadInt32();                  Token.CharacterGUID = P.ReadString();                  Token.Token = P.ReadString();    				PacketStream PlayerOnlinePacket = new PacketStream(0x67' 0);  				PlayerOnlinePacket.WriteHeader();  				PlayerOnlinePacket.WriteUInt16((ushort)(PacketHeaders.UNENCRYPTED + 1 +  					Token.Token.Length + 1 + Token.ClientIP.Length + 1 + 4));    				if (CharacterCreate == 0)  				{  					if (NetworkFacade.CurrentSession.GetPlayer(Token.CharacterGUID) == null)  					{  						NetworkClient WaitingClient = NetworkFacade.NetworkListener.GetClient(Token.ClientIP' ClientPort);  						//Uh-oh' someone's waiting for their token!  						if(WaitingClient != null)  						{  							PacketStream SuccessPacket = new PacketStream((byte)PacketType.CITY_TOKEN' 0);  							SuccessPacket.WriteByte((byte)CityTransferStatus.Success);  							WaitingClient.SendEncrypted((byte)PacketType.CITY_TOKEN' SuccessPacket.ToArray());  						}    						PlayerOnlinePacket.WriteByte(0x01);  						PlayerOnlinePacket.WriteString(Token.Token);  						PlayerOnlinePacket.WriteString(Token.ClientIP);  						PlayerOnlinePacket.WriteInt32(ClientPort);    						lock (NetworkFacade.TransferringClients)  						{  							if (!NetworkFacade.TransferringClients.Contains(Token))  								NetworkFacade.TransferringClients.Add(Token);  						}    						Client.Send(PlayerOnlinePacket.ToArray());  					}  					else  					{  						PlayerOnlinePacket.WriteByte(0x02);  						PlayerOnlinePacket.WriteString(Token.Token);  						PlayerOnlinePacket.WriteString(Token.ClientIP);  						PlayerOnlinePacket.WriteInt32(ClientPort);    						Client.Send(PlayerOnlinePacket.ToArray());  					}  				}  				else  				{  					NetworkClient WaitingClient = NetworkFacade.NetworkListener.GetClient(Token.ClientIP' ClientPort);  					//Uh-oh' someone's waiting for their token!  					if (WaitingClient != null)  					{  						PacketStream SuccessPacket = new PacketStream((byte)PacketType.CITY_TOKEN' 0);  						SuccessPacket.WriteByte((byte)CityTransferStatus.Success);  						WaitingClient.SendEncrypted((byte)PacketType.CITY_TOKEN' SuccessPacket.ToArray());  					}    					if (!NetworkFacade.TransferringClients.Contains(Token))  						NetworkFacade.TransferringClients.Add(Token);  				}              }              catch (Exception E)              {                  Logger.LogDebug("Exception in HandleClientToken: " + E.ToString());              }
Missing Default,TSO_CityServer,Program,C:\repos\Afr0_Project-Dollhouse\TSO CityServer\TSO CityServer\Program.cs,Logger_OnMessageLogged,The following switch statement is missing a default case: switch (Msg.Level)  			{  				case ProtocolAbstractionLibraryD.LogLevel.info:  					Logger.LogInfo(Msg.Message);  					break;  				case ProtocolAbstractionLibraryD.LogLevel.error:  					Logger.LogDebug(Msg.Message);  					break;  				case ProtocolAbstractionLibraryD.LogLevel.warn:  					Logger.LogWarning(Msg.Message);  					break;  			}
Missing Default,TSO_CityServer,Program,C:\repos\Afr0_Project-Dollhouse\TSO CityServer\TSO CityServer\Program.cs,Logger_OnMessageLogged,The following switch statement is missing a default case: switch (Msg.Level)  			{  				case CityDataModel.LogLevel.info:  					Logger.LogInfo(Msg.Message);  					break;  				case CityDataModel.LogLevel.error:  					Logger.LogDebug(Msg.Message);  					break;  				case CityDataModel.LogLevel.warn:  					Logger.LogWarning(Msg.Message);  					break;  			}
Missing Default,TSO_CityServer,Program,C:\repos\Afr0_Project-Dollhouse\TSO CityServer\TSO CityServer\Program.cs,Logger_OnMessageLogged,The following switch statement is missing a default case: switch (Msg.Level)  			{  				case GonzoNet.LogLevel.info:  					Logger.LogInfo(Msg.Message);  					break;  				case GonzoNet.LogLevel.error:  					Logger.LogDebug(Msg.Message);  					break;  				case GonzoNet.LogLevel.warn:  					Logger.LogWarning(Msg.Message);  					break;  			}
Missing Default,TSO_CityServer.Terrain,Terrain,C:\repos\Afr0_Project-Dollhouse\TSO CityServer\TSO CityServer\Terrain\Terrain.cs,GetCityNumber,The following switch statement is missing a default case: switch (CityName)  			{  				case "Blazing Falls":  					return 1;  				case "Alphaville":  					return 2;  				case "Test Center":  					return 3;  				case "Interhogan":  					return 4;  				case "Ocean's Edge":  					return 5;  				case "East Jerome":  					return 6;  				case "Fancy Fields":  					return 7;  				case "Betaville":  					return 8;  				case "Charvatia":  					return 9;  				case "Dragon's Cove":  					return 10;  				case "Rancho Rizzo":  					return 11;  				case "Zavadaville":  					return 12;  				case "Queen Margaret's":  					return 13;  				case "Shannopolis":  					return 14;  				case "Grantley Grove":  					return 15;  				case "Calvin's Creek":  					return 16;  				case "The Billabong":  					return 17;  				case "Mount Fuji":  					return 18;  				case "Dan's Grove":  					return 19;  				case "Jolly Pines":  					return 20;  				case "Yatesport":  					return 21;  				case "Landry Lakes":  					return 22;  				case "Nichol's Notch":  					return 23;  				case "King Canyons":  					return 24;  				case "Virginia Islands":  					return 25;  				case "Pixie Point":  					return 26;  				case "West Darrington":  					return 27;  				case "Upper Shankelston":  					return 28;  				case "Albertstown":  					return 29;  				case "Terra Tablante":  					return 30;  			}
