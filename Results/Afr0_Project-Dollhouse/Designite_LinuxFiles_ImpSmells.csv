Implementation smell,Namespace,Class,File,Method,Description
Long Method,Files.FAR3,Decompresser,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\FAR3\Decompresser.cs,Compress,The method has 178 lines of code.
Long Method,Files.FAR3,Decompresser,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\FAR3\Decompresser.cs,Decompress,The method has 100 lines of code.
Long Method,Files.Manager,FileManager,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\FileManager\FileManager.cs,GrabItem,The method has 153 lines of code.
Long Method,Files.Manager,FileManager,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\FileManager\FileManager.cs,GrabItem,The method has 236 lines of code.
Long Method,Files.IFF,CST,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\IFF\CST.cs,CST,The method has 105 lines of code.
Long Method,Files.IFF,CTSS,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\IFF\CTSS.cs,CTSS,The method has 105 lines of code.
Long Method,Files.IFF,Iff,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\IFF\Iff.cs,Init,The method has 103 lines of code.
Long Method,Files.IFF,OBJD,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\IFF\OBJD.cs,OBJD,The method has 116 lines of code.
Long Method,Files.IFF,SPR2Frame,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\IFF\SPR2.cs,SPR2Frame,The method has 128 lines of code.
Long Method,Files.IFF,STR,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\IFF\STR.cs,STR,The method has 105 lines of code.
Long Method,Files.IFF,TTAs,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\IFF\TTAs.cs,TTAs,The method has 105 lines of code.
Long Method,Paloma,TargaImage,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,LoadTGAHeaderInfo,The method has 133 lines of code.
Long Method,Paloma,TargaImage,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,LoadImageBytes,The method has 180 lines of code.
Complex Method,Files.AudioFiles,UTKFile2,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\Audiofiles\UTKFile2.cs,DecodeFrame,Cyclomatic complexity of the method is 12
Complex Method,Files.AudioFiles,UTKFile2,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\Audiofiles\UTKFile2.cs,GenerateExcitation,Cyclomatic complexity of the method is 12
Complex Method,Files.AudioLogic,HLS,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\AudioLogic\HLS.cs,HLS,Cyclomatic complexity of the method is 8
Complex Method,Files.AudioLogic,TRK,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\AudioLogic\TRK.cs,TRK,Cyclomatic complexity of the method is 10
Complex Method,Files.FAR3,Decompresser,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\FAR3\Decompresser.cs,Compress,Cyclomatic complexity of the method is 20
Complex Method,Files.FAR3,Decompresser,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\FAR3\Decompresser.cs,Decompress,Cyclomatic complexity of the method is 16
Complex Method,Files.Manager,FileManager,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\FileManager\FileManager.cs,GetTexture,Cyclomatic complexity of the method is 8
Complex Method,Files.Manager,FileManager,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\FileManager\FileManager.cs,GetSound,Cyclomatic complexity of the method is 8
Complex Method,Files.Manager,FileManager,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\FileManager\FileManager.cs,GrabItem,Cyclomatic complexity of the method is 40
Complex Method,Files.Manager,FileManager,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\FileManager\FileManager.cs,GrabItem,Cyclomatic complexity of the method is 22
Complex Method,Files.Manager,FileManager,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\FileManager\FileManager.cs,GrabItem,Cyclomatic complexity of the method is 12
Complex Method,Files.IFF,CST,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\IFF\CST.cs,CST,Cyclomatic complexity of the method is 17
Complex Method,Files.IFF,CTSS,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\IFF\CTSS.cs,CTSS,Cyclomatic complexity of the method is 17
Complex Method,Files.IFF,Iff,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\IFF\Iff.cs,Init,Cyclomatic complexity of the method is 23
Complex Method,Files.IFF,SPRFrame,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\IFF\SPR.cs,SPRFrame,Cyclomatic complexity of the method is 12
Complex Method,Files.IFF,SPR2Frame,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\IFF\SPR2.cs,SPR2Frame,Cyclomatic complexity of the method is 15
Complex Method,Files.IFF,STR,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\IFF\STR.cs,STR,Cyclomatic complexity of the method is 17
Complex Method,Files.IFF,TTAs,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\IFF\TTAs.cs,TTAs,Cyclomatic complexity of the method is 17
Complex Method,Files.Vitaboy,Mesh,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\Vitaboy\Mesh.cs,Mesh,Cyclomatic complexity of the method is 8
Complex Method,Paloma,TargaImage,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,LoadTGAHeaderInfo,Cyclomatic complexity of the method is 13
Complex Method,Paloma,TargaImage,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,LoadTGAExtensionArea,Cyclomatic complexity of the method is 8
Complex Method,Paloma,TargaImage,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,LoadImageBytes,Cyclomatic complexity of the method is 20
Complex Method,Paloma,TargaImage,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,LoadTGAImage,Cyclomatic complexity of the method is 10
Complex Method,Paloma,TargaImage,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,GetPixelFormat,Cyclomatic complexity of the method is 9
Complex Method,Paloma,TargaImage,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,LoadThumbnail,Cyclomatic complexity of the method is 14
Complex Method,Paloma,TargaImage,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,Dispose,Cyclomatic complexity of the method is 9
Long Parameter List,Files.FAR3,Decompresser,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\FAR3\Decompresser.cs,ArrayCopy2,The method has 5 parameters. Parameters: Src' SrcPos' Dest' DestPos' Length
Long Identifier,Paloma,TargaConstants,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,,The length of the parameter ExtensionAreaAuthorNameByteLength is 33.
Long Identifier,Paloma,TargaConstants,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,,The length of the parameter ExtensionAreaAuthorCommentsByteLength is 37.
Long Identifier,Paloma,TargaConstants,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,,The length of the parameter ExtensionAreaJobNameByteLength is 30.
Long Identifier,Paloma,TargaConstants,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,,The length of the parameter ExtensionAreaSoftwareIDByteLength is 33.
Long Identifier,Paloma,TargaConstants,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,,The length of the parameter ExtensionAreaSoftwareVersionLetterByteLength is 44.
Long Identifier,Paloma,TargaConstants,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,,The length of the parameter ExtensionAreaColorCorrectionTableValueLength is 44.
Long Statement,Files.AudioFiles,UTKFile2,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\Audiofiles\UTKFile2.cs,DecodeFrame,The length of the statement  "                    m_DecompressedFrame[324 + 108 * i + j] = InnovationGain * Excitation[5 + j] + PitchGain * m_DecompressedFrame[108 * i + j + (216 - Phase)]; " is 139.
Long Statement,Files.AudioFiles,XAFile,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\Audiofiles\XAFile.cs,DecompressStereo,The length of the statement  "            if (InputBuffer.Length != 0x1E) return; //todo' deal with this correctly. Right now stereo audio is kind of totally fucked! " is 123.
Long Statement,Files.FAR3,Decompresser,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\FAR3\Decompresser.cs,Compress,The length of the statement  "			            while ((Data.Length > index + copyCount)&& (Data[index + copyCount] == Data[foundindex + copyCount]) && (copyCount < MAX_COPY_COUNT)) " is 133.
Long Statement,Files.IFF,Iff,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\IFF\Iff.cs,Init,The length of the statement  "            if (!MagicNumber.Equals("IFF FILE 2.5:TYPE FOLLOWED BY SIZE\0 JAMIE DOORNBOS & MAXIS 1\0"' StringComparison.InvariantCultureIgnoreCase)) " is 136.
Long Statement,Paloma,TargaImage,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,LoadTGAFooterInfo,The length of the statement  "                if (binReader != null && binReader.BaseStream != null && binReader.BaseStream.Length > 0 && binReader.BaseStream.CanSeek == true) " is 129.
Long Statement,Paloma,TargaImage,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,LoadTGAFooterInfo,The length of the statement  "                        string Signature = System.Text.Encoding.ASCII.GetString(binReader.ReadBytes(TargaConstants.FooterSignatureByteLength)).TrimEnd('\0'); " is 133.
Long Statement,Paloma,TargaImage,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,LoadTGAFooterInfo,The length of the statement  "                        if (string.Compare(Signature' TargaConstants.TargaFooterASCIISignature' StringComparison.InvariantCultureIgnoreCase) == 0) " is 122.
Long Statement,Paloma,TargaImage,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,LoadTGAFooterInfo,The length of the statement  "                            string ResChar = System.Text.Encoding.ASCII.GetString(binReader.ReadBytes(TargaConstants.FooterReservedCharByteLength)).TrimEnd('\0'); " is 134.
Long Statement,Paloma,TargaImage,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,LoadTGAHeaderInfo,The length of the statement  "            if (binReader != null && binReader.BaseStream != null && binReader.BaseStream.Length > 0 && binReader.BaseStream.CanSeek == true) " is 129.
Long Statement,Paloma,TargaImage,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,LoadTGAExtensionArea,The length of the statement  "            if (binReader != null && binReader.BaseStream != null && binReader.BaseStream.Length > 0 && binReader.BaseStream.CanSeek == true) " is 129.
Long Statement,Paloma,TargaImage,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,LoadTGAExtensionArea,The length of the statement  "                        this.objTargaExtensionArea.SetAuthorName(System.Text.Encoding.ASCII.GetString(binReader.ReadBytes(TargaConstants.ExtensionAreaAuthorNameByteLength)).TrimEnd('\0')); " is 164.
Long Statement,Paloma,TargaImage,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,LoadTGAExtensionArea,The length of the statement  "                        this.objTargaExtensionArea.SetAuthorComments(System.Text.Encoding.ASCII.GetString(binReader.ReadBytes(TargaConstants.ExtensionAreaAuthorCommentsByteLength)).TrimEnd('\0')); " is 172.
Long Statement,Paloma,TargaImage,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,LoadTGAExtensionArea,The length of the statement  "                        string strStamp = iMonth.ToString(CultureInfo.CurrentCulture) + @"/" + iDay.ToString(CultureInfo.CurrentCulture) + @"/" + iYear.ToString(CultureInfo.CurrentCulture) + @" "; " is 172.
Long Statement,Paloma,TargaImage,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,LoadTGAExtensionArea,The length of the statement  "                        strStamp += iHour.ToString(CultureInfo.CurrentCulture) + @":" + iMinute.ToString(CultureInfo.CurrentCulture) + @":" + iSecond.ToString(CultureInfo.CurrentCulture); " is 163.
Long Statement,Paloma,TargaImage,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,LoadTGAExtensionArea,The length of the statement  "                        this.objTargaExtensionArea.SetJobName(System.Text.Encoding.ASCII.GetString(binReader.ReadBytes(TargaConstants.ExtensionAreaJobNameByteLength)).TrimEnd('\0')); " is 158.
Long Statement,Paloma,TargaImage,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,LoadTGAExtensionArea,The length of the statement  "                        this.objTargaExtensionArea.SetSoftwareID(System.Text.Encoding.ASCII.GetString(binReader.ReadBytes(TargaConstants.ExtensionAreaSoftwareIDByteLength)).TrimEnd('\0')); " is 164.
Long Statement,Paloma,TargaImage,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,LoadTGAExtensionArea,The length of the statement  "                        string strVersionLetter = System.Text.Encoding.ASCII.GetString(binReader.ReadBytes(TargaConstants.ExtensionAreaSoftwareVersionLetterByteLength)).TrimEnd('\0'); " is 159.
Long Statement,Paloma,TargaImage,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,LoadTGAExtensionArea,The length of the statement  "                        this.objTargaExtensionArea.SetSoftwareID(iVersionNumber.ToString(@"F2"' CultureInfo.CurrentCulture) + strVersionLetter); " is 120.
Long Statement,Paloma,TargaImage,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,LoadImageBytes,The length of the statement  "            if (binReader != null && binReader.BaseStream != null && binReader.BaseStream.Length > 0 && binReader.BaseStream.CanSeek == true) " is 129.
Long Statement,Paloma,TargaImage,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,LoadTGAImage,The length of the statement  "            this.intStride = (((int)this.objTargaHeader.Width * (int)this.objTargaHeader.PixelDepth + 31) & ~31) >> 3; // width in bytes " is 124.
Long Statement,Paloma,TargaImage,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,LoadTGAImage,The length of the statement  "                        pal.Entries[i] = Color.FromArgb(255' this.objTargaHeader.ColorMap[i].R' this.objTargaHeader.ColorMap[i].G' this.objTargaHeader.ColorMap[i].B); " is 142.
Long Statement,Paloma,TargaImage,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,LoadThumbnail,The length of the statement  "            if (binReader != null && binReader.BaseStream != null && binReader.BaseStream.Length > 0 && binReader.BaseStream.CanSeek == true) " is 129.
Long Statement,Paloma,TargaImage,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,LoadThumbnail,The length of the statement  "                    System.Collections.Generic.List<System.Collections.Generic.List<byte>> objRows = new System.Collections.Generic.List<System.Collections.Generic.List<byte>>(); " is 158.
Complex Conditional,Files.AudioLogic,EVT,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\AudioLogic\EVT.cs,ParseHexString,The conditional expression  "HexStr.Contains("a") || HexStr.Contains("b") || HexStr.Contains("b") ||                  HexStr.Contains("c") || HexStr.Contains("d") || HexStr.Contains("e") || HexStr.Contains("f")"  is complex.
Complex Conditional,Paloma,TargaImage,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,LoadTGAFooterInfo,The conditional expression  "binReader != null && binReader.BaseStream != null && binReader.BaseStream.Length > 0 && binReader.BaseStream.CanSeek == true"  is complex.
Complex Conditional,Paloma,TargaImage,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,LoadTGAHeaderInfo,The conditional expression  "binReader != null && binReader.BaseStream != null && binReader.BaseStream.Length > 0 && binReader.BaseStream.CanSeek == true"  is complex.
Complex Conditional,Paloma,TargaImage,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,LoadTGAExtensionArea,The conditional expression  "binReader != null && binReader.BaseStream != null && binReader.BaseStream.Length > 0 && binReader.BaseStream.CanSeek == true"  is complex.
Complex Conditional,Paloma,TargaImage,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,LoadImageBytes,The conditional expression  "binReader != null && binReader.BaseStream != null && binReader.BaseStream.Length > 0 && binReader.BaseStream.CanSeek == true"  is complex.
Complex Conditional,Paloma,TargaImage,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,LoadThumbnail,The conditional expression  "binReader != null && binReader.BaseStream != null && binReader.BaseStream.Length > 0 && binReader.BaseStream.CanSeek == true"  is complex.
Magic Number,Files,Endian,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\Endian.cs,SwapInt16,The following statement contains a magic number: return (short)(((v & 0xff) << 8) | ((v >> 8) & 0xff));
Magic Number,Files,Endian,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\Endian.cs,SwapInt16,The following statement contains a magic number: return (short)(((v & 0xff) << 8) | ((v >> 8) & 0xff));
Magic Number,Files,Endian,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\Endian.cs,SwapUInt16,The following statement contains a magic number: return (ushort)(((v & 0xff) << 8) | ((v >> 8) & 0xff));
Magic Number,Files,Endian,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\Endian.cs,SwapUInt16,The following statement contains a magic number: return (ushort)(((v & 0xff) << 8) | ((v >> 8) & 0xff));
Magic Number,Files,FileReader,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\FileReader.cs,ReadBigEndianInt16,The following statement contains a magic number: byte[] b = ReadBytes(2);
Magic Number,Files,FileReader,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\FileReader.cs,ReadBigEndianInt16,The following statement contains a magic number: return (short)(b[1] + (b[0] << 8));
Magic Number,Files,FileReader,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\FileReader.cs,ReadBigEndianInt32,The following statement contains a magic number: byte[] b = ReadBytes(4);
Magic Number,Files,FileReader,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\FileReader.cs,ReadBigEndianInt32,The following statement contains a magic number: return b[3] + (b[2] << 8) + (b[1] << 16) + (b[0] << 24);
Magic Number,Files,FileReader,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\FileReader.cs,ReadBigEndianInt32,The following statement contains a magic number: return b[3] + (b[2] << 8) + (b[1] << 16) + (b[0] << 24);
Magic Number,Files,FileReader,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\FileReader.cs,ReadBigEndianInt32,The following statement contains a magic number: return b[3] + (b[2] << 8) + (b[1] << 16) + (b[0] << 24);
Magic Number,Files,FileReader,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\FileReader.cs,ReadBigEndianInt32,The following statement contains a magic number: return b[3] + (b[2] << 8) + (b[1] << 16) + (b[0] << 24);
Magic Number,Files,FileReader,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\FileReader.cs,ReadBigEndianInt32,The following statement contains a magic number: return b[3] + (b[2] << 8) + (b[1] << 16) + (b[0] << 24);
Magic Number,Files,FileReader,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\FileReader.cs,ReadBigEndianInt64,The following statement contains a magic number: byte[] b = ReadBytes(8);
Magic Number,Files,FileReader,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\FileReader.cs,ReadBigEndianInt64,The following statement contains a magic number: return b[7] + (b[6] << 8) + (b[5] << 16) + (b[4] << 24) + (b[3] << 32) + (b[2] << 40) + (b[1] << 48) + (b[0] << 56);
Magic Number,Files,FileReader,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\FileReader.cs,ReadBigEndianInt64,The following statement contains a magic number: return b[7] + (b[6] << 8) + (b[5] << 16) + (b[4] << 24) + (b[3] << 32) + (b[2] << 40) + (b[1] << 48) + (b[0] << 56);
Magic Number,Files,FileReader,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\FileReader.cs,ReadBigEndianInt64,The following statement contains a magic number: return b[7] + (b[6] << 8) + (b[5] << 16) + (b[4] << 24) + (b[3] << 32) + (b[2] << 40) + (b[1] << 48) + (b[0] << 56);
Magic Number,Files,FileReader,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\FileReader.cs,ReadBigEndianInt64,The following statement contains a magic number: return b[7] + (b[6] << 8) + (b[5] << 16) + (b[4] << 24) + (b[3] << 32) + (b[2] << 40) + (b[1] << 48) + (b[0] << 56);
Magic Number,Files,FileReader,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\FileReader.cs,ReadBigEndianInt64,The following statement contains a magic number: return b[7] + (b[6] << 8) + (b[5] << 16) + (b[4] << 24) + (b[3] << 32) + (b[2] << 40) + (b[1] << 48) + (b[0] << 56);
Magic Number,Files,FileReader,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\FileReader.cs,ReadBigEndianInt64,The following statement contains a magic number: return b[7] + (b[6] << 8) + (b[5] << 16) + (b[4] << 24) + (b[3] << 32) + (b[2] << 40) + (b[1] << 48) + (b[0] << 56);
Magic Number,Files,FileReader,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\FileReader.cs,ReadBigEndianInt64,The following statement contains a magic number: return b[7] + (b[6] << 8) + (b[5] << 16) + (b[4] << 24) + (b[3] << 32) + (b[2] << 40) + (b[1] << 48) + (b[0] << 56);
Magic Number,Files,FileReader,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\FileReader.cs,ReadBigEndianInt64,The following statement contains a magic number: return b[7] + (b[6] << 8) + (b[5] << 16) + (b[4] << 24) + (b[3] << 32) + (b[2] << 40) + (b[1] << 48) + (b[0] << 56);
Magic Number,Files,FileReader,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\FileReader.cs,ReadBigEndianInt64,The following statement contains a magic number: return b[7] + (b[6] << 8) + (b[5] << 16) + (b[4] << 24) + (b[3] << 32) + (b[2] << 40) + (b[1] << 48) + (b[0] << 56);
Magic Number,Files,FileReader,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\FileReader.cs,ReadBigEndianInt64,The following statement contains a magic number: return b[7] + (b[6] << 8) + (b[5] << 16) + (b[4] << 24) + (b[3] << 32) + (b[2] << 40) + (b[1] << 48) + (b[0] << 56);
Magic Number,Files,FileReader,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\FileReader.cs,ReadBigEndianInt64,The following statement contains a magic number: return b[7] + (b[6] << 8) + (b[5] << 16) + (b[4] << 24) + (b[3] << 32) + (b[2] << 40) + (b[1] << 48) + (b[0] << 56);
Magic Number,Files,FileReader,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\FileReader.cs,ReadBigEndianInt64,The following statement contains a magic number: return b[7] + (b[6] << 8) + (b[5] << 16) + (b[4] << 24) + (b[3] << 32) + (b[2] << 40) + (b[1] << 48) + (b[0] << 56);
Magic Number,Files,FileReader,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\FileReader.cs,ReadBigEndianInt64,The following statement contains a magic number: return b[7] + (b[6] << 8) + (b[5] << 16) + (b[4] << 24) + (b[3] << 32) + (b[2] << 40) + (b[1] << 48) + (b[0] << 56);
Magic Number,Files,FileUtilities,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\FileUtilities.cs,HashCode,The following statement contains a magic number: hash = thisHash ^ ((hash << 5) + hash);
Magic Number,Files.AudioFiles,UTKFile2,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\Audiofiles\UTKFile2.cs,ReadHeader,The following statement contains a magic number: m_ID = Convert.ToString(m_Reader.ReadBytes(4));
Magic Number,Files.AudioFiles,UTKFile2,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\Audiofiles\UTKFile2.cs,ReadHeader,The following statement contains a magic number: uint dwFMTSize = 16;
Magic Number,Files.AudioFiles,UTKFile2,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\Audiofiles\UTKFile2.cs,ReadHeader,The following statement contains a magic number: uint dwRIFFSize = 36 + dwDataSize;
Magic Number,Files.AudioFiles,UTKFile2,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\Audiofiles\UTKFile2.cs,ReadHeader,The following statement contains a magic number: m_UnreadBitsCount = 8;
Magic Number,Files.AudioFiles,UTKFile2,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\Audiofiles\UTKFile2.cs,ReadHeader,The following statement contains a magic number: m_VoicedThreshold = (byte)(32 - ReadBits(4));
Magic Number,Files.AudioFiles,UTKFile2,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\Audiofiles\UTKFile2.cs,ReadHeader,The following statement contains a magic number: m_VoicedThreshold = (byte)(32 - ReadBits(4));
Magic Number,Files.AudioFiles,UTKFile2,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\Audiofiles\UTKFile2.cs,ReadHeader,The following statement contains a magic number: m_InnovationPower[0] = (ReadBits(4) + 1) * 8;
Magic Number,Files.AudioFiles,UTKFile2,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\Audiofiles\UTKFile2.cs,ReadHeader,The following statement contains a magic number: m_InnovationPower[0] = (ReadBits(4) + 1) * 8;
Magic Number,Files.AudioFiles,UTKFile2,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\Audiofiles\UTKFile2.cs,ReadHeader,The following statement contains a magic number: float Base = 1.04f + (float)(ReadBits(6)) / 1000.0f;
Magic Number,Files.AudioFiles,UTKFile2,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\Audiofiles\UTKFile2.cs,ReadHeader,The following statement contains a magic number: float Base = 1.04f + (float)(ReadBits(6)) / 1000.0f;
Magic Number,Files.AudioFiles,UTKFile2,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\Audiofiles\UTKFile2.cs,ReadHeader,The following statement contains a magic number: float Base = 1.04f + (float)(ReadBits(6)) / 1000.0f;
Magic Number,Files.AudioFiles,UTKFile2,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\Audiofiles\UTKFile2.cs,ReadHeader,The following statement contains a magic number: i < 64
Magic Number,Files.AudioFiles,UTKFile2,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\Audiofiles\UTKFile2.cs,ReadBits,The following statement contains a magic number: byte Value = (byte)(m_UnreadBitsValue & (255 >> (8 - Bits)));
Magic Number,Files.AudioFiles,UTKFile2,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\Audiofiles\UTKFile2.cs,ReadBits,The following statement contains a magic number: byte Value = (byte)(m_UnreadBitsValue & (255 >> (8 - Bits)));
Magic Number,Files.AudioFiles,UTKFile2,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\Audiofiles\UTKFile2.cs,ReadBits,The following statement contains a magic number: m_UnreadBitsCount += 8;
Magic Number,Files.AudioFiles,UTKFile2,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\Audiofiles\UTKFile2.cs,ReadBits,The following statement contains a magic number: (m_UnreadBitsCount < 8) && (m_Reader.Position < m_Reader.StreamLength)
Magic Number,Files.AudioFiles,UTKFile2,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\Audiofiles\UTKFile2.cs,UTKDecode,The following statement contains a magic number: int BlockSize = Lesser((int)Frames' 432);
Magic Number,Files.AudioFiles,UTKFile2,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\Audiofiles\UTKFile2.cs,UTKDecode,The following statement contains a magic number: int Value = (int)Math.Round(m_DecompressedFrame[324 + i]);
Magic Number,Files.AudioFiles,UTKFile2,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\Audiofiles\UTKFile2.cs,UTKDecode,The following statement contains a magic number: Value = Clamp<int>(Value' -32768' 32767);
Magic Number,Files.AudioFiles,UTKFile2,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\Audiofiles\UTKFile2.cs,UTKDecode,The following statement contains a magic number: Value = Clamp<int>(Value' -32768' 32767);
Magic Number,Files.AudioFiles,UTKFile2,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\Audiofiles\UTKFile2.cs,DecodeFrame,The following statement contains a magic number: float[] Excitation = new float[118];
Magic Number,Files.AudioFiles,UTKFile2,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\Audiofiles\UTKFile2.cs,DecodeFrame,The following statement contains a magic number: float[] RCDelta = new float[12];
Magic Number,Files.AudioFiles,UTKFile2,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\Audiofiles\UTKFile2.cs,DecodeFrame,The following statement contains a magic number: byte index = ReadBits((byte)((i < 4) ? 6 : 5));
Magic Number,Files.AudioFiles,UTKFile2,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\Audiofiles\UTKFile2.cs,DecodeFrame,The following statement contains a magic number: byte index = ReadBits((byte)((i < 4) ? 6 : 5));
Magic Number,Files.AudioFiles,UTKFile2,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\Audiofiles\UTKFile2.cs,DecodeFrame,The following statement contains a magic number: byte index = ReadBits((byte)((i < 4) ? 6 : 5));
Magic Number,Files.AudioFiles,UTKFile2,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\Audiofiles\UTKFile2.cs,DecodeFrame,The following statement contains a magic number: RCDelta[i] = (UTKCosine[index + ((i < 4) ? 0 : 16)] - m_RC[i]) / 4.0f;
Magic Number,Files.AudioFiles,UTKFile2,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\Audiofiles\UTKFile2.cs,DecodeFrame,The following statement contains a magic number: RCDelta[i] = (UTKCosine[index + ((i < 4) ? 0 : 16)] - m_RC[i]) / 4.0f;
Magic Number,Files.AudioFiles,UTKFile2,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\Audiofiles\UTKFile2.cs,DecodeFrame,The following statement contains a magic number: RCDelta[i] = (UTKCosine[index + ((i < 4) ? 0 : 16)] - m_RC[i]) / 4.0f;
Magic Number,Files.AudioFiles,UTKFile2,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\Audiofiles\UTKFile2.cs,DecodeFrame,The following statement contains a magic number: i < 12
Magic Number,Files.AudioFiles,UTKFile2,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\Audiofiles\UTKFile2.cs,DecodeFrame,The following statement contains a magic number: int Phase = ReadBits(8);
Magic Number,Files.AudioFiles,UTKFile2,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\Audiofiles\UTKFile2.cs,DecodeFrame,The following statement contains a magic number: Phase = 216;
Magic Number,Files.AudioFiles,UTKFile2,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\Audiofiles\UTKFile2.cs,DecodeFrame,The following statement contains a magic number: i == 0 && Phase > 216
Magic Number,Files.AudioFiles,UTKFile2,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\Audiofiles\UTKFile2.cs,DecodeFrame,The following statement contains a magic number: float PitchGain = (float)(ReadBits(4)) / 15.0f;
Magic Number,Files.AudioFiles,UTKFile2,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\Audiofiles\UTKFile2.cs,DecodeFrame,The following statement contains a magic number: float PitchGain = (float)(ReadBits(4)) / 15.0f;
Magic Number,Files.AudioFiles,UTKFile2,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\Audiofiles\UTKFile2.cs,DecodeFrame,The following statement contains a magic number: float InnovationGain = m_InnovationPower[ReadBits(6)];
Magic Number,Files.AudioFiles,UTKFile2,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\Audiofiles\UTKFile2.cs,DecodeFrame,The following statement contains a magic number: GenerateExcitation(5' ref Excitation' Voiced' 1);
Magic Number,Files.AudioFiles,UTKFile2,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\Audiofiles\UTKFile2.cs,DecodeFrame,The following statement contains a magic number: m_DecompressedFrame[324 + 108 * i + j] = InnovationGain * Excitation[5 + j] + PitchGain * m_DecompressedFrame[108 * i + j + (216 - Phase)];
Magic Number,Files.AudioFiles,UTKFile2,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\Audiofiles\UTKFile2.cs,DecodeFrame,The following statement contains a magic number: m_DecompressedFrame[324 + 108 * i + j] = InnovationGain * Excitation[5 + j] + PitchGain * m_DecompressedFrame[108 * i + j + (216 - Phase)];
Magic Number,Files.AudioFiles,UTKFile2,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\Audiofiles\UTKFile2.cs,DecodeFrame,The following statement contains a magic number: m_DecompressedFrame[324 + 108 * i + j] = InnovationGain * Excitation[5 + j] + PitchGain * m_DecompressedFrame[108 * i + j + (216 - Phase)];
Magic Number,Files.AudioFiles,UTKFile2,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\Audiofiles\UTKFile2.cs,DecodeFrame,The following statement contains a magic number: m_DecompressedFrame[324 + 108 * i + j] = InnovationGain * Excitation[5 + j] + PitchGain * m_DecompressedFrame[108 * i + j + (216 - Phase)];
Magic Number,Files.AudioFiles,UTKFile2,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\Audiofiles\UTKFile2.cs,DecodeFrame,The following statement contains a magic number: m_DecompressedFrame[324 + 108 * i + j] = InnovationGain * Excitation[5 + j] + PitchGain * m_DecompressedFrame[108 * i + j + (216 - Phase)];
Magic Number,Files.AudioFiles,UTKFile2,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\Audiofiles\UTKFile2.cs,DecodeFrame,The following statement contains a magic number: j < 108
Magic Number,Files.AudioFiles,UTKFile2,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\Audiofiles\UTKFile2.cs,DecodeFrame,The following statement contains a magic number: i < 4
Magic Number,Files.AudioFiles,UTKFile2,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\Audiofiles\UTKFile2.cs,DecodeFrame,The following statement contains a magic number: Array.Copy(m_DecompressedFrame' 324 + 108' m_DecompressedFrame' 0' 324);
Magic Number,Files.AudioFiles,UTKFile2,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\Audiofiles\UTKFile2.cs,DecodeFrame,The following statement contains a magic number: Array.Copy(m_DecompressedFrame' 324 + 108' m_DecompressedFrame' 0' 324);
Magic Number,Files.AudioFiles,UTKFile2,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\Audiofiles\UTKFile2.cs,DecodeFrame,The following statement contains a magic number: Array.Copy(m_DecompressedFrame' 324 + 108' m_DecompressedFrame' 0' 324);
Magic Number,Files.AudioFiles,UTKFile2,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\Audiofiles\UTKFile2.cs,DecodeFrame,The following statement contains a magic number: j < 12
Magic Number,Files.AudioFiles,UTKFile2,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\Audiofiles\UTKFile2.cs,DecodeFrame,The following statement contains a magic number: Synthesize(i * 12' (i != 3) ? 12 : 396);
Magic Number,Files.AudioFiles,UTKFile2,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\Audiofiles\UTKFile2.cs,DecodeFrame,The following statement contains a magic number: Synthesize(i * 12' (i != 3) ? 12 : 396);
Magic Number,Files.AudioFiles,UTKFile2,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\Audiofiles\UTKFile2.cs,DecodeFrame,The following statement contains a magic number: Synthesize(i * 12' (i != 3) ? 12 : 396);
Magic Number,Files.AudioFiles,UTKFile2,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\Audiofiles\UTKFile2.cs,DecodeFrame,The following statement contains a magic number: Synthesize(i * 12' (i != 3) ? 12 : 396);
Magic Number,Files.AudioFiles,UTKFile2,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\Audiofiles\UTKFile2.cs,DecodeFrame,The following statement contains a magic number: i < 4
Magic Number,Files.AudioFiles,UTKFile2,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\Audiofiles\UTKFile2.cs,GenerateExcitation,The following statement contains a magic number: byte code = UTKCodebook[(Table << 8) | (m_UnreadBitsValue & 0xFF)];
Magic Number,Files.AudioFiles,UTKFile2,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\Audiofiles\UTKFile2.cs,GenerateExcitation,The following statement contains a magic number: Table = (code < 2 || code > 8) ? 1 : 0;
Magic Number,Files.AudioFiles,UTKFile2,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\Audiofiles\UTKFile2.cs,GenerateExcitation,The following statement contains a magic number: Table = (code < 2 || code > 8) ? 1 : 0;
Magic Number,Files.AudioFiles,UTKFile2,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\Audiofiles\UTKFile2.cs,GenerateExcitation,The following statement contains a magic number: Excitation[i] = (code - 1) / 4;
Magic Number,Files.AudioFiles,UTKFile2,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\Audiofiles\UTKFile2.cs,GenerateExcitation,The following statement contains a magic number: code >= 4
Magic Number,Files.AudioFiles,UTKFile2,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\Audiofiles\UTKFile2.cs,GenerateExcitation,The following statement contains a magic number: i < Offset + 108
Magic Number,Files.AudioFiles,UTKFile2,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\Audiofiles\UTKFile2.cs,Synthesize,The following statement contains a magic number: float[] LPC = new float[12];
Magic Number,Files.AudioFiles,UTKFile2,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\Audiofiles\UTKFile2.cs,Synthesize,The following statement contains a magic number: ++offset == 12
Magic Number,Files.AudioFiles,UTKFile2,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\Audiofiles\UTKFile2.cs,Synthesize,The following statement contains a magic number: m_DecompressedFrame[324 + Sample] += LPC[i] * m_History[offset];
Magic Number,Files.AudioFiles,UTKFile2,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\Audiofiles\UTKFile2.cs,Synthesize,The following statement contains a magic number: i < 12
Magic Number,Files.AudioFiles,UTKFile2,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\Audiofiles\UTKFile2.cs,Synthesize,The following statement contains a magic number: m_History[offset--] = m_DecompressedFrame[324 + Sample++];
Magic Number,Files.AudioFiles,UTKFile2,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\Audiofiles\UTKFile2.cs,RCtoLPC,The following statement contains a magic number: float[] RCTemp = new float[12]' LPCTemp = new float[12];
Magic Number,Files.AudioFiles,UTKFile2,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\Audiofiles\UTKFile2.cs,RCtoLPC,The following statement contains a magic number: float[] RCTemp = new float[12]' LPCTemp = new float[12];
Magic Number,Files.AudioFiles,UTKFile2,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\Audiofiles\UTKFile2.cs,RCtoLPC,The following statement contains a magic number: Array.Copy(RC' 0' RCTemp' 1' 11);
Magic Number,Files.AudioFiles,UTKFile2,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\Audiofiles\UTKFile2.cs,RCtoLPC,The following statement contains a magic number: j != 11
Magic Number,Files.AudioFiles,UTKFile2,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\Audiofiles\UTKFile2.cs,RCtoLPC,The following statement contains a magic number: i < 12
Magic Number,Files.AudioFiles,XAFile,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\Audiofiles\XAFile.cs,LoadFile,The following statement contains a magic number: m_ID = Convert.ToString(m_Reader.ReadBytes(4));
Magic Number,Files.AudioFiles,XAFile,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\Audiofiles\XAFile.cs,LoadFile,The following statement contains a magic number: m_ID = Convert.ToString(m_Reader.ReadBytes(4));
Magic Number,Files.AudioFiles,XAFile,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\Audiofiles\XAFile.cs,DecompressFile,The following statement contains a magic number: uint dwFMTSize = 16;
Magic Number,Files.AudioFiles,XAFile,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\Audiofiles\XAFile.cs,DecompressFile,The following statement contains a magic number: uint dwRIFFSize = /*dwFMTSize + 8 + dwDataSize + 8 + 4;*/ dwDataSize + 4 + 4 + dwFMTSize + 4 + 9;
Magic Number,Files.AudioFiles,XAFile,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\Audiofiles\XAFile.cs,DecompressFile,The following statement contains a magic number: uint dwRIFFSize = /*dwFMTSize + 8 + dwDataSize + 8 + 4;*/ dwDataSize + 4 + 4 + dwFMTSize + 4 + 9;
Magic Number,Files.AudioFiles,XAFile,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\Audiofiles\XAFile.cs,DecompressFile,The following statement contains a magic number: uint dwRIFFSize = /*dwFMTSize + 8 + dwDataSize + 8 + 4;*/ dwDataSize + 4 + 4 + dwFMTSize + 4 + 9;
Magic Number,Files.AudioFiles,XAFile,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\Audiofiles\XAFile.cs,DecompressFile,The following statement contains a magic number: uint dwRIFFSize = /*dwFMTSize + 8 + dwDataSize + 8 + 4;*/ dwDataSize + 4 + 4 + dwFMTSize + 4 + 9;
Magic Number,Files.AudioFiles,XAFile,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\Audiofiles\XAFile.cs,DecompressStereo,The following statement contains a magic number: c2left = (int)EATable[HINIBBLE(bInput) + 4];
Magic Number,Files.AudioFiles,XAFile,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\Audiofiles\XAFile.cs,DecompressStereo,The following statement contains a magic number: dleft = (byte)(LONIBBLE(bInput) + 8);
Magic Number,Files.AudioFiles,XAFile,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\Audiofiles\XAFile.cs,DecompressStereo,The following statement contains a magic number: c2right = (int)EATable[HINIBBLE(bInput) + 4];
Magic Number,Files.AudioFiles,XAFile,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\Audiofiles\XAFile.cs,DecompressStereo,The following statement contains a magic number: dright = (byte)(LONIBBLE(bInput) + 8);
Magic Number,Files.AudioFiles,XAFile,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\Audiofiles\XAFile.cs,DecompressStereo,The following statement contains a magic number: left = (left + m_CurSampleLeft * c1left + m_PrevSampleLeft * c2left + 0x80) >> 8;
Magic Number,Files.AudioFiles,XAFile,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\Audiofiles\XAFile.cs,DecompressStereo,The following statement contains a magic number: right = (right + m_CurSampleRight * c1right + m_PrevSampleRight * c2right + 0x80) >> 8;
Magic Number,Files.AudioFiles,XAFile,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\Audiofiles\XAFile.cs,DecompressStereo,The following statement contains a magic number: left = (left + m_CurSampleLeft * c1left + m_PrevSampleLeft * c2left + 0x80) >> 8;
Magic Number,Files.AudioFiles,XAFile,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\Audiofiles\XAFile.cs,DecompressStereo,The following statement contains a magic number: right = (right + m_CurSampleRight * c1right + m_PrevSampleRight * c2right + 0x80) >> 8;
Magic Number,Files.AudioFiles,XAFile,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\Audiofiles\XAFile.cs,DecompressMono,The following statement contains a magic number: int c2 = (int)EATable[HINIBBLE(bInput) + 4];
Magic Number,Files.AudioFiles,XAFile,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\Audiofiles\XAFile.cs,DecompressMono,The following statement contains a magic number: d = (byte)(LONIBBLE(bInput) + 8);
Magic Number,Files.AudioFiles,XAFile,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\Audiofiles\XAFile.cs,DecompressMono,The following statement contains a magic number: c2left = (int)EATable[HINIBBLE(bInput) + 4];
Magic Number,Files.AudioFiles,XAFile,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\Audiofiles\XAFile.cs,DecompressMono,The following statement contains a magic number: dleft = (byte)(LONIBBLE(bInput) + 8);
Magic Number,Files.AudioFiles,XAFile,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\Audiofiles\XAFile.cs,DecompressMono,The following statement contains a magic number: left = (left + m_CurSampleLeft * c1left + m_PrevSampleLeft * c2left + 0x80) >> 8;
Magic Number,Files.AudioFiles,XAFile,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\Audiofiles\XAFile.cs,DecompressMono,The following statement contains a magic number: left = (left + m_CurSampleLeft * c1left + m_PrevSampleLeft * c2left + 0x80) >> 8;
Magic Number,Files.AudioFiles,XAFile,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\Audiofiles\XAFile.cs,Clip16BitSample,The following statement contains a magic number: return 32767;
Magic Number,Files.AudioFiles,XAFile,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\Audiofiles\XAFile.cs,Clip16BitSample,The following statement contains a magic number: sample > 32767
Magic Number,Files.AudioFiles,XAFile,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\Audiofiles\XAFile.cs,HINIBBLE,The following statement contains a magic number: return (byte)(((B) >> 4) & 0x0F);
Magic Number,Files.AudioLogic,EVT,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\AudioLogic\EVT.cs,EVT,The following statement contains a magic number: Event.TrackID = (Elements[2].Equals(""' StringComparison.InvariantCultureIgnoreCase)) ? 0 : uint.Parse(Elements[2].Replace("0x"' "")' NumberStyles.HexNumber);
Magic Number,Files.AudioLogic,EVT,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\AudioLogic\EVT.cs,EVT,The following statement contains a magic number: Event.TrackID = (Elements[2].Equals(""' StringComparison.InvariantCultureIgnoreCase)) ? 0 : uint.Parse(Elements[2].Replace("0x"' "")' NumberStyles.HexNumber);
Magic Number,Files.AudioLogic,EVT,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\AudioLogic\EVT.cs,EVT,The following statement contains a magic number: Event.Unknown = ParseHexString(Elements[3]);
Magic Number,Files.AudioLogic,EVT,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\AudioLogic\EVT.cs,EVT,The following statement contains a magic number: Event.Unknown2 = ParseHexString(Elements[4]);
Magic Number,Files.AudioLogic,EVT,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\AudioLogic\EVT.cs,EVT,The following statement contains a magic number: Event.Unknown3 = ParseHexString(Elements[5]);
Magic Number,Files.AudioLogic,EVT,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\AudioLogic\EVT.cs,EVT,The following statement contains a magic number: Event.Unknown4 = ParseHexString(Elements[6]);
Magic Number,Files.AudioLogic,EVT,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\AudioLogic\EVT.cs,ParseHexString,The following statement contains a magic number: HexStr = HexStr.Substring(2);
Magic Number,Files.AudioLogic,EVT,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\AudioLogic\EVT.cs,ParseHexString,The following statement contains a magic number: return Convert.ToUInt32(HexStr' 16);
Magic Number,Files.AudioLogic,HLS,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\AudioLogic\HLS.cs,HLS,The following statement contains a magic number: (m_Reader.StreamLength - m_Reader.Position) > 4
Magic Number,Files.AudioLogic,TRK,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\AudioLogic\TRK.cs,TRK,The following statement contains a magic number: string MagicNumber = Enc.GetString(m_Reader.ReadBytes(4));
Magic Number,Files.AudioLogic,TRK,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\AudioLogic\TRK.cs,TRK,The following statement contains a magic number: TrackName = Elements[2];
Magic Number,Files.AudioLogic,TRK,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\AudioLogic\TRK.cs,TRK,The following statement contains a magic number: SoundID = uint.Parse(Elements[3].Replace("0x"' "")' NumberStyles.HexNumber);
Magic Number,Files.AudioLogic,TRK,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\AudioLogic\TRK.cs,TRK,The following statement contains a magic number: !Elements[3].Equals(""' StringComparison.InvariantCultureIgnoreCase)
Magic Number,Files.AudioLogic,TRK,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\AudioLogic\TRK.cs,TRK,The following statement contains a magic number: Elements[5].Equals("\r\n"' StringComparison.InvariantCultureIgnoreCase)
Magic Number,Files.AudioLogic,TRK,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\AudioLogic\TRK.cs,TRK,The following statement contains a magic number: Argument = (HITTrackArguments)Enum.Parse(typeof(HITTrackArguments)' Elements[5]);
Magic Number,Files.AudioLogic,TRK,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\AudioLogic\TRK.cs,TRK,The following statement contains a magic number: !Elements[5].Equals(""' StringComparison.InvariantCultureIgnoreCase)
Magic Number,Files.AudioLogic,TRK,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\AudioLogic\TRK.cs,TRK,The following statement contains a magic number: ControlGroup = (HITControlGroup)Enum.Parse(typeof(HITControlGroup)' Elements[7]);
Magic Number,Files.AudioLogic,TRK,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\AudioLogic\TRK.cs,TRK,The following statement contains a magic number: !Elements[7].Equals(""' StringComparison.InvariantCultureIgnoreCase)
Magic Number,Files.AudioLogic,TRK,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\AudioLogic\TRK.cs,TRK,The following statement contains a magic number: DuckingPriority = int.Parse(Elements[(m_Version != 2) ? 11 : 12]' NumberStyles.Integer);
Magic Number,Files.AudioLogic,TRK,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\AudioLogic\TRK.cs,TRK,The following statement contains a magic number: DuckingPriority = int.Parse(Elements[(m_Version != 2) ? 11 : 12]' NumberStyles.Integer);
Magic Number,Files.AudioLogic,TRK,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\AudioLogic\TRK.cs,TRK,The following statement contains a magic number: DuckingPriority = int.Parse(Elements[(m_Version != 2) ? 11 : 12]' NumberStyles.Integer);
Magic Number,Files.AudioLogic,TRK,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\AudioLogic\TRK.cs,TRK,The following statement contains a magic number: !Elements[(m_Version != 2) ? 11 : 12].Equals(""' StringComparison.InvariantCultureIgnoreCase)
Magic Number,Files.AudioLogic,TRK,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\AudioLogic\TRK.cs,TRK,The following statement contains a magic number: !Elements[(m_Version != 2) ? 11 : 12].Equals(""' StringComparison.InvariantCultureIgnoreCase)
Magic Number,Files.AudioLogic,TRK,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\AudioLogic\TRK.cs,TRK,The following statement contains a magic number: !Elements[(m_Version != 2) ? 11 : 12].Equals(""' StringComparison.InvariantCultureIgnoreCase)
Magic Number,Files.AudioLogic,TRK,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\AudioLogic\TRK.cs,TRK,The following statement contains a magic number: Looped = (int.Parse(Elements[(m_Version != 2) ? 12 : 13]' NumberStyles.Integer) != 0) ? true : false;
Magic Number,Files.AudioLogic,TRK,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\AudioLogic\TRK.cs,TRK,The following statement contains a magic number: Looped = (int.Parse(Elements[(m_Version != 2) ? 12 : 13]' NumberStyles.Integer) != 0) ? true : false;
Magic Number,Files.AudioLogic,TRK,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\AudioLogic\TRK.cs,TRK,The following statement contains a magic number: Looped = (int.Parse(Elements[(m_Version != 2) ? 12 : 13]' NumberStyles.Integer) != 0) ? true : false;
Magic Number,Files.AudioLogic,TRK,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\AudioLogic\TRK.cs,TRK,The following statement contains a magic number: !Elements[(m_Version != 2) ? 12 : 13].Equals(""' StringComparison.InvariantCultureIgnoreCase)
Magic Number,Files.AudioLogic,TRK,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\AudioLogic\TRK.cs,TRK,The following statement contains a magic number: !Elements[(m_Version != 2) ? 12 : 13].Equals(""' StringComparison.InvariantCultureIgnoreCase)
Magic Number,Files.AudioLogic,TRK,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\AudioLogic\TRK.cs,TRK,The following statement contains a magic number: !Elements[(m_Version != 2) ? 12 : 13].Equals(""' StringComparison.InvariantCultureIgnoreCase)
Magic Number,Files.AudioLogic,TRK,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\AudioLogic\TRK.cs,TRK,The following statement contains a magic number: Volume = int.Parse(Elements[(m_Version != 2) ? 13 : 14]' NumberStyles.Integer);
Magic Number,Files.AudioLogic,TRK,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\AudioLogic\TRK.cs,TRK,The following statement contains a magic number: Volume = int.Parse(Elements[(m_Version != 2) ? 13 : 14]' NumberStyles.Integer);
Magic Number,Files.AudioLogic,TRK,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\AudioLogic\TRK.cs,TRK,The following statement contains a magic number: Volume = int.Parse(Elements[(m_Version != 2) ? 13 : 14]' NumberStyles.Integer);
Magic Number,Files.AudioLogic,TRK,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\AudioLogic\TRK.cs,TRK,The following statement contains a magic number: !Elements[(m_Version != 2) ? 13 : 14].Equals(""' StringComparison.InvariantCultureIgnoreCase)
Magic Number,Files.AudioLogic,TRK,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\AudioLogic\TRK.cs,TRK,The following statement contains a magic number: !Elements[(m_Version != 2) ? 13 : 14].Equals(""' StringComparison.InvariantCultureIgnoreCase)
Magic Number,Files.AudioLogic,TRK,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\AudioLogic\TRK.cs,TRK,The following statement contains a magic number: !Elements[(m_Version != 2) ? 13 : 14].Equals(""' StringComparison.InvariantCultureIgnoreCase)
Magic Number,Files.DBPF,DBPFArchive,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\DBPF\DBPFArchive.cs,ReadArchive,The following statement contains a magic number: string MagicNumber = Enc.GetString(m_Reader.ReadBytes(4));
Magic Number,Files.DBPF,DBPFArchive,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\DBPF\DBPFArchive.cs,ReadArchive,The following statement contains a magic number: m_Reader.ReadBytes(12);
Magic Number,Files.DBPF,DBPFArchive,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\DBPF\DBPFArchive.cs,ReadArchive,The following statement contains a magic number: m_Reader.ReadBytes(4);
Magic Number,Files.DBPF,DBPFArchive,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\DBPF\DBPFArchive.cs,ReadArchive,The following statement contains a magic number: m_Reader.ReadBytes(4);
Magic Number,Files.FAR1,FAR1Archive,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\FAR1\FAR1Archive.cs,ReadArchive,The following statement contains a magic number: string MagicNumber = Enc.GetString(m_Reader.ReadBytes(8));
Magic Number,Files.FAR3,Decompresser,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\FAR3\Decompresser.cs,Compress,The following statement contains a magic number: int writeIndex = 9;
Magic Number,Files.FAR3,Decompresser,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\FAR3\Decompresser.cs,Compress,The following statement contains a magic number: index >= Data.Length - 2
Magic Number,Files.FAR3,Decompresser,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\FAR3\Decompresser.cs,Compress,The following statement contains a magic number: int mapindex = Data[index] + (Data[index + 1] << 8)  					            + (Data[index + 2] << 16);
Magic Number,Files.FAR3,Decompresser,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\FAR3\Decompresser.cs,Compress,The following statement contains a magic number: int mapindex = Data[index] + (Data[index + 1] << 8)  					            + (Data[index + 2] << 16);
Magic Number,Files.FAR3,Decompresser,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\FAR3\Decompresser.cs,Compress,The following statement contains a magic number: int mapindex = Data[index] + (Data[index + 1] << 8)  					            + (Data[index + 2] << 16);
Magic Number,Files.FAR3,Decompresser,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\FAR3\Decompresser.cs,Compress,The following statement contains a magic number: copyCount = 3;
Magic Number,Files.FAR3,Decompresser,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\FAR3\Decompresser.cs,Compress,The following statement contains a magic number: offsetCopyCount <= 2
Magic Number,Files.FAR3,Decompresser,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\FAR3\Decompresser.cs,Compress,The following statement contains a magic number: copyCount = (index - lastReadIndex) / 4 - 1;
Magic Number,Files.FAR3,Decompresser,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\FAR3\Decompresser.cs,Compress,The following statement contains a magic number: copyCount = 4 * copyCount + 4;
Magic Number,Files.FAR3,Decompresser,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\FAR3\Decompresser.cs,Compress,The following statement contains a magic number: copyCount = 4 * copyCount + 4;
Magic Number,Files.FAR3,Decompresser,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\FAR3\Decompresser.cs,Compress,The following statement contains a magic number: index - lastReadIndex >= 4
Magic Number,Files.FAR3,Decompresser,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\FAR3\Decompresser.cs,Compress,The following statement contains a magic number: cData[writeIndex++] = (byte) (((copyOffset >> 8) << 5)  						            + ((offsetCopyCount - 3) << 2) + copyCount);
Magic Number,Files.FAR3,Decompresser,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\FAR3\Decompresser.cs,Compress,The following statement contains a magic number: cData[writeIndex++] = (byte) (((copyOffset >> 8) << 5)  						            + ((offsetCopyCount - 3) << 2) + copyCount);
Magic Number,Files.FAR3,Decompresser,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\FAR3\Decompresser.cs,Compress,The following statement contains a magic number: cData[writeIndex++] = (byte) (((copyOffset >> 8) << 5)  						            + ((offsetCopyCount - 3) << 2) + copyCount);
Magic Number,Files.FAR3,Decompresser,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\FAR3\Decompresser.cs,Compress,The following statement contains a magic number: cData[writeIndex++] = (byte) (((copyOffset >> 8) << 5)  						            + ((offsetCopyCount - 3) << 2) + copyCount);
Magic Number,Files.FAR3,Decompresser,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\FAR3\Decompresser.cs,Compress,The following statement contains a magic number: index < Data.Length - 3
Magic Number,Files.FAR3,Decompresser,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\FAR3\Decompresser.cs,Compress,The following statement contains a magic number: copyCount = (index - lastReadIndex) / 4 - 1;
Magic Number,Files.FAR3,Decompresser,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\FAR3\Decompresser.cs,Compress,The following statement contains a magic number: copyCount = 4 * copyCount + 4;
Magic Number,Files.FAR3,Decompresser,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\FAR3\Decompresser.cs,Compress,The following statement contains a magic number: copyCount = 4 * copyCount + 4;
Magic Number,Files.FAR3,Decompresser,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\FAR3\Decompresser.cs,Compress,The following statement contains a magic number: index - lastReadIndex >= 4
Magic Number,Files.FAR3,Decompresser,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\FAR3\Decompresser.cs,Compress,The following statement contains a magic number: Writer.Write((revData[2] << 16) | (revData[1] << 8) | revData[0]);
Magic Number,Files.FAR3,Decompresser,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\FAR3\Decompresser.cs,Compress,The following statement contains a magic number: Writer.Write((revData[2] << 16) | (revData[1] << 8) | revData[0]);
Magic Number,Files.FAR3,Decompresser,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\FAR3\Decompresser.cs,Compress,The following statement contains a magic number: Writer.Write((revData[2] << 16) | (revData[1] << 8) | revData[0]);
Magic Number,Files.FAR3,Decompresser,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\FAR3\Decompresser.cs,Compress,The following statement contains a magic number: Data.Length > 6
Magic Number,Files.FAR3,Decompresser,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\FAR3\Decompresser.cs,Decompress,The following statement contains a magic number: int offset = (int)(((Control1 & 0x60) << 3) + (control2) + 1);
Magic Number,Files.FAR3,Decompresser,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\FAR3\Decompresser.cs,Decompress,The following statement contains a magic number: long numberToCopyFromOffset = ((Control1 & 0x1C) >> 2) + 3;
Magic Number,Files.FAR3,Decompresser,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\FAR3\Decompresser.cs,Decompress,The following statement contains a magic number: long numberToCopyFromOffset = ((Control1 & 0x1C) >> 2) + 3;
Magic Number,Files.FAR3,Decompresser,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\FAR3\Decompresser.cs,Decompress,The following statement contains a magic number: Control1 >= 0 && Control1 <= 127
Magic Number,Files.FAR3,Decompresser,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\FAR3\Decompresser.cs,Decompress,The following statement contains a magic number: Data.Length > 6
Magic Number,Files.FAR3,FAR3Archive,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\FAR3\FAR3Archive.cs,ReadArchive,The following statement contains a magic number: string MagicNumber = Enc.GetString(m_Reader.ReadBytes(8));
Magic Number,Files.FAR3,FAR3Archive,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\FAR3\FAR3Archive.cs,ReadArchive,The following statement contains a magic number: byte[] Dummy = m_Reader.ReadBytes(3);
Magic Number,Files.FAR3,FAR3Archive,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\FAR3\FAR3Archive.cs,ReadArchive,The following statement contains a magic number: Entry.CompressedDataSize = (uint)((Dummy[0] << 0) | (Dummy[1] << 8) | (Dummy[2]) << 16);
Magic Number,Files.FAR3,FAR3Archive,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\FAR3\FAR3Archive.cs,ReadArchive,The following statement contains a magic number: Entry.CompressedDataSize = (uint)((Dummy[0] << 0) | (Dummy[1] << 8) | (Dummy[2]) << 16);
Magic Number,Files.FAR3,FAR3Archive,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\FAR3\FAR3Archive.cs,ReadArchive,The following statement contains a magic number: Entry.CompressedDataSize = (uint)((Dummy[0] << 0) | (Dummy[1] << 8) | (Dummy[2]) << 16);
Magic Number,Files.FAR3,FAR3Archive,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\FAR3\FAR3Archive.cs,GrabEntry,The following statement contains a magic number: switch (Entry.TypeID)                  {                      case 1: //BMP                      case 2: //TGA                      case 5: //SKEL                      case 7: //ANIM                      case 9: //MESH                      case 11: //BND                      case 12: //APR                      case 13: //OFT                      case 15: //PO                      case 16: //COL                      case 18: //HAG                      case 20: //JPG                      case 24: //PNG                          return Decompress(Entry);                      case 14: //PNG' uncompressed                      default:                          MemoryStream MemStream = new MemoryStream(m_Reader.ReadBytes((int)Entry.DecompressedDataSize));                          MemStream.Seek(0' SeekOrigin.Begin);                          return MemStream;                  }
Magic Number,Files.FAR3,FAR3Archive,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\FAR3\FAR3Archive.cs,GrabEntry,The following statement contains a magic number: switch (Entry.TypeID)                  {                      case 1: //BMP                      case 2: //TGA                      case 5: //SKEL                      case 7: //ANIM                      case 9: //MESH                      case 11: //BND                      case 12: //APR                      case 13: //OFT                      case 15: //PO                      case 16: //COL                      case 18: //HAG                      case 20: //JPG                      case 24: //PNG                          return Decompress(Entry);                      case 14: //PNG' uncompressed                      default:                          MemoryStream MemStream = new MemoryStream(m_Reader.ReadBytes((int)Entry.DecompressedDataSize));                          MemStream.Seek(0' SeekOrigin.Begin);                          return MemStream;                  }
Magic Number,Files.FAR3,FAR3Archive,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\FAR3\FAR3Archive.cs,GrabEntry,The following statement contains a magic number: switch (Entry.TypeID)                  {                      case 1: //BMP                      case 2: //TGA                      case 5: //SKEL                      case 7: //ANIM                      case 9: //MESH                      case 11: //BND                      case 12: //APR                      case 13: //OFT                      case 15: //PO                      case 16: //COL                      case 18: //HAG                      case 20: //JPG                      case 24: //PNG                          return Decompress(Entry);                      case 14: //PNG' uncompressed                      default:                          MemoryStream MemStream = new MemoryStream(m_Reader.ReadBytes((int)Entry.DecompressedDataSize));                          MemStream.Seek(0' SeekOrigin.Begin);                          return MemStream;                  }
Magic Number,Files.FAR3,FAR3Archive,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\FAR3\FAR3Archive.cs,GrabEntry,The following statement contains a magic number: switch (Entry.TypeID)                  {                      case 1: //BMP                      case 2: //TGA                      case 5: //SKEL                      case 7: //ANIM                      case 9: //MESH                      case 11: //BND                      case 12: //APR                      case 13: //OFT                      case 15: //PO                      case 16: //COL                      case 18: //HAG                      case 20: //JPG                      case 24: //PNG                          return Decompress(Entry);                      case 14: //PNG' uncompressed                      default:                          MemoryStream MemStream = new MemoryStream(m_Reader.ReadBytes((int)Entry.DecompressedDataSize));                          MemStream.Seek(0' SeekOrigin.Begin);                          return MemStream;                  }
Magic Number,Files.FAR3,FAR3Archive,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\FAR3\FAR3Archive.cs,GrabEntry,The following statement contains a magic number: switch (Entry.TypeID)                  {                      case 1: //BMP                      case 2: //TGA                      case 5: //SKEL                      case 7: //ANIM                      case 9: //MESH                      case 11: //BND                      case 12: //APR                      case 13: //OFT                      case 15: //PO                      case 16: //COL                      case 18: //HAG                      case 20: //JPG                      case 24: //PNG                          return Decompress(Entry);                      case 14: //PNG' uncompressed                      default:                          MemoryStream MemStream = new MemoryStream(m_Reader.ReadBytes((int)Entry.DecompressedDataSize));                          MemStream.Seek(0' SeekOrigin.Begin);                          return MemStream;                  }
Magic Number,Files.FAR3,FAR3Archive,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\FAR3\FAR3Archive.cs,GrabEntry,The following statement contains a magic number: switch (Entry.TypeID)                  {                      case 1: //BMP                      case 2: //TGA                      case 5: //SKEL                      case 7: //ANIM                      case 9: //MESH                      case 11: //BND                      case 12: //APR                      case 13: //OFT                      case 15: //PO                      case 16: //COL                      case 18: //HAG                      case 20: //JPG                      case 24: //PNG                          return Decompress(Entry);                      case 14: //PNG' uncompressed                      default:                          MemoryStream MemStream = new MemoryStream(m_Reader.ReadBytes((int)Entry.DecompressedDataSize));                          MemStream.Seek(0' SeekOrigin.Begin);                          return MemStream;                  }
Magic Number,Files.FAR3,FAR3Archive,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\FAR3\FAR3Archive.cs,GrabEntry,The following statement contains a magic number: switch (Entry.TypeID)                  {                      case 1: //BMP                      case 2: //TGA                      case 5: //SKEL                      case 7: //ANIM                      case 9: //MESH                      case 11: //BND                      case 12: //APR                      case 13: //OFT                      case 15: //PO                      case 16: //COL                      case 18: //HAG                      case 20: //JPG                      case 24: //PNG                          return Decompress(Entry);                      case 14: //PNG' uncompressed                      default:                          MemoryStream MemStream = new MemoryStream(m_Reader.ReadBytes((int)Entry.DecompressedDataSize));                          MemStream.Seek(0' SeekOrigin.Begin);                          return MemStream;                  }
Magic Number,Files.FAR3,FAR3Archive,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\FAR3\FAR3Archive.cs,GrabEntry,The following statement contains a magic number: switch (Entry.TypeID)                  {                      case 1: //BMP                      case 2: //TGA                      case 5: //SKEL                      case 7: //ANIM                      case 9: //MESH                      case 11: //BND                      case 12: //APR                      case 13: //OFT                      case 15: //PO                      case 16: //COL                      case 18: //HAG                      case 20: //JPG                      case 24: //PNG                          return Decompress(Entry);                      case 14: //PNG' uncompressed                      default:                          MemoryStream MemStream = new MemoryStream(m_Reader.ReadBytes((int)Entry.DecompressedDataSize));                          MemStream.Seek(0' SeekOrigin.Begin);                          return MemStream;                  }
Magic Number,Files.FAR3,FAR3Archive,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\FAR3\FAR3Archive.cs,GrabEntry,The following statement contains a magic number: switch (Entry.TypeID)                  {                      case 1: //BMP                      case 2: //TGA                      case 5: //SKEL                      case 7: //ANIM                      case 9: //MESH                      case 11: //BND                      case 12: //APR                      case 13: //OFT                      case 15: //PO                      case 16: //COL                      case 18: //HAG                      case 20: //JPG                      case 24: //PNG                          return Decompress(Entry);                      case 14: //PNG' uncompressed                      default:                          MemoryStream MemStream = new MemoryStream(m_Reader.ReadBytes((int)Entry.DecompressedDataSize));                          MemStream.Seek(0' SeekOrigin.Begin);                          return MemStream;                  }
Magic Number,Files.FAR3,FAR3Archive,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\FAR3\FAR3Archive.cs,GrabEntry,The following statement contains a magic number: switch (Entry.TypeID)                  {                      case 1: //BMP                      case 2: //TGA                      case 5: //SKEL                      case 7: //ANIM                      case 9: //MESH                      case 11: //BND                      case 12: //APR                      case 13: //OFT                      case 15: //PO                      case 16: //COL                      case 18: //HAG                      case 20: //JPG                      case 24: //PNG                          return Decompress(Entry);                      case 14: //PNG' uncompressed                      default:                          MemoryStream MemStream = new MemoryStream(m_Reader.ReadBytes((int)Entry.DecompressedDataSize));                          MemStream.Seek(0' SeekOrigin.Begin);                          return MemStream;                  }
Magic Number,Files.FAR3,FAR3Archive,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\FAR3\FAR3Archive.cs,GrabEntry,The following statement contains a magic number: switch (Entry.TypeID)                  {                      case 1: //BMP                      case 2: //TGA                      case 5: //SKEL                      case 7: //ANIM                      case 9: //MESH                      case 11: //BND                      case 12: //APR                      case 13: //OFT                      case 15: //PO                      case 16: //COL                      case 18: //HAG                      case 20: //JPG                      case 24: //PNG                          return Decompress(Entry);                      case 14: //PNG' uncompressed                      default:                          MemoryStream MemStream = new MemoryStream(m_Reader.ReadBytes((int)Entry.DecompressedDataSize));                          MemStream.Seek(0' SeekOrigin.Begin);                          return MemStream;                  }
Magic Number,Files.FAR3,FAR3Archive,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\FAR3\FAR3Archive.cs,GrabEntry,The following statement contains a magic number: switch (Entry.TypeID)                  {                      case 1: //BMP                      case 2: //TGA                      case 5: //SKEL                      case 7: //ANIM                      case 9: //MESH                      case 11: //BND                      case 12: //APR                      case 13: //OFT                      case 15: //PO                      case 16: //COL                      case 18: //HAG                      case 20: //JPG                      case 24: //PNG                          return Decompress(Entry);                      case 14: //PNG' uncompressed                      default:                          MemoryStream MemStream = new MemoryStream(m_Reader.ReadBytes((int)Entry.DecompressedDataSize));                          MemStream.Seek(0' SeekOrigin.Begin);                          return MemStream;                  }
Magic Number,Files.FAR3,FAR3Archive,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\FAR3\FAR3Archive.cs,GrabEntry,The following statement contains a magic number: switch (Entry.TypeID)                  {                      case 1: //BMP                      case 2: //TGA                      case 5: //SKEL                      case 7: //ANIM                      case 9: //MESH                      case 11: //BND                      case 12: //APR                      case 13: //OFT                      case 15: //PO                      case 16: //COL                      case 18: //HAG                      case 20: //JPG                      case 24: //PNG                          return Decompress(Entry);                      case 14: //PNG' uncompressed                      default:                          MemoryStream MemStream = new MemoryStream(m_Reader.ReadBytes((int)Entry.DecompressedDataSize));                          MemStream.Seek(0' SeekOrigin.Begin);                          return MemStream;                  }
Magic Number,Files.FAR3,FAR3Archive,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\FAR3\FAR3Archive.cs,Decompress,The following statement contains a magic number: m_Reader.ReadBytes(9);
Magic Number,Files.FAR3,FAR3Archive,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\FAR3\FAR3Archive.cs,Decompress,The following statement contains a magic number: byte[] Dummy = m_Reader.ReadBytes(3);
Magic Number,Files.FAR3,FAR3Archive,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\FAR3\FAR3Archive.cs,Decompress,The following statement contains a magic number: uint DecompressedSize = (uint)((Dummy[0] << 0x10) | (Dummy[1] << 0x08) | +Dummy[2]);
Magic Number,Files.Manager,FileManager,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\FileManager\FileManager.cs,IsBMP,The following statement contains a magic number: byte[] data = Reader.ReadBytes(2);
Magic Number,Files.Manager,FileManager,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\FileManager\FileManager.cs,IsUTK,The following statement contains a magic number: byte[] data = Reader.ReadBytes(4);
Magic Number,Files.Manager,FileManager,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\FileManager\FileManager.cs,IsXA,The following statement contains a magic number: byte[] data = Reader.ReadBytes(4);
Magic Number,Files.Manager,FileManager,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\FileManager\FileManager.cs,GrabItem,The following statement contains a magic number: switch(TypeID)                          {                              case FAR3TypeIDs.ANIM:                                  AddItem(ID' new Asset(ID' (uint)Data.Length' new Anim(Data)));                                  break;                              case FAR3TypeIDs.APR:                                  AddItem(ID' new Asset(ID' (uint)Data.Length' new Appearance(Data)));                                  break;                              case FAR3TypeIDs.BND:                                  AddItem(ID' new Asset(ID' (uint)Data.Length' new Binding(Data)));                                  break;                              case FAR3TypeIDs.COL:                                  AddItem(ID' new Asset(ID' (uint)Data.Length' new Collection(Data)));                                  break;                              case FAR3TypeIDs.HAG:                                  AddItem(ID' new Asset(ID' (uint)Data.Length' new HandGroup(Data)));                                  break;                              case FAR3TypeIDs.MESH:                                  AddItem(ID' new Asset(ID' (uint)Data.Length' new Mesh(Data)));                                  break;                              case FAR3TypeIDs.OFT:                                  AddItem(ID' new Asset(ID' (uint)Data.Length' new Outfit(Data)));                                  break;                              case FAR3TypeIDs.PO:                                  AddItem(ID' new Asset(ID' (uint)Data.Length' new PurchasableOutfit(Data)));                                  break;                              case FAR3TypeIDs.SKEL:                                  AddItem(ID' new Asset(ID' (uint)Data.Length' new Skeleton(Data)));                                  break;                              case FAR3TypeIDs.TGA:                                  lock (TheLock)                                  {                                      using (Paloma.TargaImage TGA = new Paloma.TargaImage(Data))                                      {                                          TGA.Image.Save(MemStream' System.Drawing.Imaging.ImageFormat.Png);                                          MemStream.Seek(0' SeekOrigin.Begin);                                          AddItem(ID' new Asset(ID' (uint)MemStream.Length'                                              Texture2D.FromStream(m_Game.GraphicsDevice' MemStream)));                                      }                                  }                                  break;                              case FAR3TypeIDs.PNG:                              case FAR3TypeIDs.PackedPNG:                                  AddItem(ID' new Asset(ID' (uint)Data.Length'                                       Texture2D.FromStream(m_Game.GraphicsDevice' Data)));                                  break;                              case FAR3TypeIDs.JPG:                                  try                                  {                                      using (BMap = new Bitmap(Data))                                      {                                          BMap.MakeTransparent(System.Drawing.Color.FromArgb(255' 0' 255));                                          BMap.MakeTransparent(System.Drawing.Color.FromArgb(255' 1' 255));                                          BMap.MakeTransparent(System.Drawing.Color.FromArgb(254' 2' 254));                                          BMap.Save(MemStream' System.Drawing.Imaging.ImageFormat.Png);                                          MemStream.Seek(0' SeekOrigin.Begin);                                      }                                        AddItem(ID' new Asset(ID' (uint)MemStream.Length'                                          Texture2D.FromStream(m_Game.GraphicsDevice' MemStream)));                                  }                                  catch                                  {                                      try                                      {                                          AddItem(ID' new Asset(ID' (uint)Data.Length'                                              Texture2D.FromStream(m_Game.GraphicsDevice' Data)));                                      }                                      catch(Exception) //Most likely a TGA' sigh.                                      {                                          MemStream = new MemoryStream();                                            using (Paloma.TargaImage TGA = new Paloma.TargaImage(Data))                                          {                                              TGA.Image.Save(MemStream' System.Drawing.Imaging.ImageFormat.Png);                                              MemStream.Seek(0' SeekOrigin.Begin);                                              AddItem(ID' new Asset(ID' (uint)MemStream.Length'                                                  Texture2D.FromStream(m_Game.GraphicsDevice' MemStream)));                                          }                                      }                                  }                                  break;                              case FAR3TypeIDs.BMP:                                  if (IsBMP(Data))                                  {                                      lock (TheLock)                                      {                                          try                                          {                                              using (BMap = new Bitmap(Data))                                              {                                                  BMap.MakeTransparent(System.Drawing.Color.FromArgb(255' 0' 255));                                                  BMap.MakeTransparent(System.Drawing.Color.FromArgb(255' 1' 255));                                                  BMap.MakeTransparent(System.Drawing.Color.FromArgb(254' 2' 254));                                                  BMap.Save(MemStream' System.Drawing.Imaging.ImageFormat.Png);                                                  MemStream.Seek(0' SeekOrigin.Begin);                                              }                                                AddItem(ID' new Asset(ID' (uint)MemStream.Length'                                                  Texture2D.FromStream(m_Game.GraphicsDevice' MemStream)));                                          }                                          catch (Exception)                                          {                                              AddItem(ID' new Asset(ID' (uint)Data.Length'                                                  Texture2D.FromStream(m_Game.GraphicsDevice' Data)));                                          }                                      }                                  }                                  else                                  {                                      AddItem(ID' new Asset(ID' (uint)Data.Length'                                           Texture2D.FromStream(m_Game.GraphicsDevice' Data)));                                  }                                  break;                          }
Magic Number,Files.Manager,FileManager,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\FileManager\FileManager.cs,GrabItem,The following statement contains a magic number: switch(TypeID)                          {                              case FAR3TypeIDs.ANIM:                                  AddItem(ID' new Asset(ID' (uint)Data.Length' new Anim(Data)));                                  break;                              case FAR3TypeIDs.APR:                                  AddItem(ID' new Asset(ID' (uint)Data.Length' new Appearance(Data)));                                  break;                              case FAR3TypeIDs.BND:                                  AddItem(ID' new Asset(ID' (uint)Data.Length' new Binding(Data)));                                  break;                              case FAR3TypeIDs.COL:                                  AddItem(ID' new Asset(ID' (uint)Data.Length' new Collection(Data)));                                  break;                              case FAR3TypeIDs.HAG:                                  AddItem(ID' new Asset(ID' (uint)Data.Length' new HandGroup(Data)));                                  break;                              case FAR3TypeIDs.MESH:                                  AddItem(ID' new Asset(ID' (uint)Data.Length' new Mesh(Data)));                                  break;                              case FAR3TypeIDs.OFT:                                  AddItem(ID' new Asset(ID' (uint)Data.Length' new Outfit(Data)));                                  break;                              case FAR3TypeIDs.PO:                                  AddItem(ID' new Asset(ID' (uint)Data.Length' new PurchasableOutfit(Data)));                                  break;                              case FAR3TypeIDs.SKEL:                                  AddItem(ID' new Asset(ID' (uint)Data.Length' new Skeleton(Data)));                                  break;                              case FAR3TypeIDs.TGA:                                  lock (TheLock)                                  {                                      using (Paloma.TargaImage TGA = new Paloma.TargaImage(Data))                                      {                                          TGA.Image.Save(MemStream' System.Drawing.Imaging.ImageFormat.Png);                                          MemStream.Seek(0' SeekOrigin.Begin);                                          AddItem(ID' new Asset(ID' (uint)MemStream.Length'                                              Texture2D.FromStream(m_Game.GraphicsDevice' MemStream)));                                      }                                  }                                  break;                              case FAR3TypeIDs.PNG:                              case FAR3TypeIDs.PackedPNG:                                  AddItem(ID' new Asset(ID' (uint)Data.Length'                                       Texture2D.FromStream(m_Game.GraphicsDevice' Data)));                                  break;                              case FAR3TypeIDs.JPG:                                  try                                  {                                      using (BMap = new Bitmap(Data))                                      {                                          BMap.MakeTransparent(System.Drawing.Color.FromArgb(255' 0' 255));                                          BMap.MakeTransparent(System.Drawing.Color.FromArgb(255' 1' 255));                                          BMap.MakeTransparent(System.Drawing.Color.FromArgb(254' 2' 254));                                          BMap.Save(MemStream' System.Drawing.Imaging.ImageFormat.Png);                                          MemStream.Seek(0' SeekOrigin.Begin);                                      }                                        AddItem(ID' new Asset(ID' (uint)MemStream.Length'                                          Texture2D.FromStream(m_Game.GraphicsDevice' MemStream)));                                  }                                  catch                                  {                                      try                                      {                                          AddItem(ID' new Asset(ID' (uint)Data.Length'                                              Texture2D.FromStream(m_Game.GraphicsDevice' Data)));                                      }                                      catch(Exception) //Most likely a TGA' sigh.                                      {                                          MemStream = new MemoryStream();                                            using (Paloma.TargaImage TGA = new Paloma.TargaImage(Data))                                          {                                              TGA.Image.Save(MemStream' System.Drawing.Imaging.ImageFormat.Png);                                              MemStream.Seek(0' SeekOrigin.Begin);                                              AddItem(ID' new Asset(ID' (uint)MemStream.Length'                                                  Texture2D.FromStream(m_Game.GraphicsDevice' MemStream)));                                          }                                      }                                  }                                  break;                              case FAR3TypeIDs.BMP:                                  if (IsBMP(Data))                                  {                                      lock (TheLock)                                      {                                          try                                          {                                              using (BMap = new Bitmap(Data))                                              {                                                  BMap.MakeTransparent(System.Drawing.Color.FromArgb(255' 0' 255));                                                  BMap.MakeTransparent(System.Drawing.Color.FromArgb(255' 1' 255));                                                  BMap.MakeTransparent(System.Drawing.Color.FromArgb(254' 2' 254));                                                  BMap.Save(MemStream' System.Drawing.Imaging.ImageFormat.Png);                                                  MemStream.Seek(0' SeekOrigin.Begin);                                              }                                                AddItem(ID' new Asset(ID' (uint)MemStream.Length'                                                  Texture2D.FromStream(m_Game.GraphicsDevice' MemStream)));                                          }                                          catch (Exception)                                          {                                              AddItem(ID' new Asset(ID' (uint)Data.Length'                                                  Texture2D.FromStream(m_Game.GraphicsDevice' Data)));                                          }                                      }                                  }                                  else                                  {                                      AddItem(ID' new Asset(ID' (uint)Data.Length'                                           Texture2D.FromStream(m_Game.GraphicsDevice' Data)));                                  }                                  break;                          }
Magic Number,Files.Manager,FileManager,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\FileManager\FileManager.cs,GrabItem,The following statement contains a magic number: switch(TypeID)                          {                              case FAR3TypeIDs.ANIM:                                  AddItem(ID' new Asset(ID' (uint)Data.Length' new Anim(Data)));                                  break;                              case FAR3TypeIDs.APR:                                  AddItem(ID' new Asset(ID' (uint)Data.Length' new Appearance(Data)));                                  break;                              case FAR3TypeIDs.BND:                                  AddItem(ID' new Asset(ID' (uint)Data.Length' new Binding(Data)));                                  break;                              case FAR3TypeIDs.COL:                                  AddItem(ID' new Asset(ID' (uint)Data.Length' new Collection(Data)));                                  break;                              case FAR3TypeIDs.HAG:                                  AddItem(ID' new Asset(ID' (uint)Data.Length' new HandGroup(Data)));                                  break;                              case FAR3TypeIDs.MESH:                                  AddItem(ID' new Asset(ID' (uint)Data.Length' new Mesh(Data)));                                  break;                              case FAR3TypeIDs.OFT:                                  AddItem(ID' new Asset(ID' (uint)Data.Length' new Outfit(Data)));                                  break;                              case FAR3TypeIDs.PO:                                  AddItem(ID' new Asset(ID' (uint)Data.Length' new PurchasableOutfit(Data)));                                  break;                              case FAR3TypeIDs.SKEL:                                  AddItem(ID' new Asset(ID' (uint)Data.Length' new Skeleton(Data)));                                  break;                              case FAR3TypeIDs.TGA:                                  lock (TheLock)                                  {                                      using (Paloma.TargaImage TGA = new Paloma.TargaImage(Data))                                      {                                          TGA.Image.Save(MemStream' System.Drawing.Imaging.ImageFormat.Png);                                          MemStream.Seek(0' SeekOrigin.Begin);                                          AddItem(ID' new Asset(ID' (uint)MemStream.Length'                                              Texture2D.FromStream(m_Game.GraphicsDevice' MemStream)));                                      }                                  }                                  break;                              case FAR3TypeIDs.PNG:                              case FAR3TypeIDs.PackedPNG:                                  AddItem(ID' new Asset(ID' (uint)Data.Length'                                       Texture2D.FromStream(m_Game.GraphicsDevice' Data)));                                  break;                              case FAR3TypeIDs.JPG:                                  try                                  {                                      using (BMap = new Bitmap(Data))                                      {                                          BMap.MakeTransparent(System.Drawing.Color.FromArgb(255' 0' 255));                                          BMap.MakeTransparent(System.Drawing.Color.FromArgb(255' 1' 255));                                          BMap.MakeTransparent(System.Drawing.Color.FromArgb(254' 2' 254));                                          BMap.Save(MemStream' System.Drawing.Imaging.ImageFormat.Png);                                          MemStream.Seek(0' SeekOrigin.Begin);                                      }                                        AddItem(ID' new Asset(ID' (uint)MemStream.Length'                                          Texture2D.FromStream(m_Game.GraphicsDevice' MemStream)));                                  }                                  catch                                  {                                      try                                      {                                          AddItem(ID' new Asset(ID' (uint)Data.Length'                                              Texture2D.FromStream(m_Game.GraphicsDevice' Data)));                                      }                                      catch(Exception) //Most likely a TGA' sigh.                                      {                                          MemStream = new MemoryStream();                                            using (Paloma.TargaImage TGA = new Paloma.TargaImage(Data))                                          {                                              TGA.Image.Save(MemStream' System.Drawing.Imaging.ImageFormat.Png);                                              MemStream.Seek(0' SeekOrigin.Begin);                                              AddItem(ID' new Asset(ID' (uint)MemStream.Length'                                                  Texture2D.FromStream(m_Game.GraphicsDevice' MemStream)));                                          }                                      }                                  }                                  break;                              case FAR3TypeIDs.BMP:                                  if (IsBMP(Data))                                  {                                      lock (TheLock)                                      {                                          try                                          {                                              using (BMap = new Bitmap(Data))                                              {                                                  BMap.MakeTransparent(System.Drawing.Color.FromArgb(255' 0' 255));                                                  BMap.MakeTransparent(System.Drawing.Color.FromArgb(255' 1' 255));                                                  BMap.MakeTransparent(System.Drawing.Color.FromArgb(254' 2' 254));                                                  BMap.Save(MemStream' System.Drawing.Imaging.ImageFormat.Png);                                                  MemStream.Seek(0' SeekOrigin.Begin);                                              }                                                AddItem(ID' new Asset(ID' (uint)MemStream.Length'                                                  Texture2D.FromStream(m_Game.GraphicsDevice' MemStream)));                                          }                                          catch (Exception)                                          {                                              AddItem(ID' new Asset(ID' (uint)Data.Length'                                                  Texture2D.FromStream(m_Game.GraphicsDevice' Data)));                                          }                                      }                                  }                                  else                                  {                                      AddItem(ID' new Asset(ID' (uint)Data.Length'                                           Texture2D.FromStream(m_Game.GraphicsDevice' Data)));                                  }                                  break;                          }
Magic Number,Files.Manager,FileManager,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\FileManager\FileManager.cs,GrabItem,The following statement contains a magic number: switch(TypeID)                          {                              case FAR3TypeIDs.ANIM:                                  AddItem(ID' new Asset(ID' (uint)Data.Length' new Anim(Data)));                                  break;                              case FAR3TypeIDs.APR:                                  AddItem(ID' new Asset(ID' (uint)Data.Length' new Appearance(Data)));                                  break;                              case FAR3TypeIDs.BND:                                  AddItem(ID' new Asset(ID' (uint)Data.Length' new Binding(Data)));                                  break;                              case FAR3TypeIDs.COL:                                  AddItem(ID' new Asset(ID' (uint)Data.Length' new Collection(Data)));                                  break;                              case FAR3TypeIDs.HAG:                                  AddItem(ID' new Asset(ID' (uint)Data.Length' new HandGroup(Data)));                                  break;                              case FAR3TypeIDs.MESH:                                  AddItem(ID' new Asset(ID' (uint)Data.Length' new Mesh(Data)));                                  break;                              case FAR3TypeIDs.OFT:                                  AddItem(ID' new Asset(ID' (uint)Data.Length' new Outfit(Data)));                                  break;                              case FAR3TypeIDs.PO:                                  AddItem(ID' new Asset(ID' (uint)Data.Length' new PurchasableOutfit(Data)));                                  break;                              case FAR3TypeIDs.SKEL:                                  AddItem(ID' new Asset(ID' (uint)Data.Length' new Skeleton(Data)));                                  break;                              case FAR3TypeIDs.TGA:                                  lock (TheLock)                                  {                                      using (Paloma.TargaImage TGA = new Paloma.TargaImage(Data))                                      {                                          TGA.Image.Save(MemStream' System.Drawing.Imaging.ImageFormat.Png);                                          MemStream.Seek(0' SeekOrigin.Begin);                                          AddItem(ID' new Asset(ID' (uint)MemStream.Length'                                              Texture2D.FromStream(m_Game.GraphicsDevice' MemStream)));                                      }                                  }                                  break;                              case FAR3TypeIDs.PNG:                              case FAR3TypeIDs.PackedPNG:                                  AddItem(ID' new Asset(ID' (uint)Data.Length'                                       Texture2D.FromStream(m_Game.GraphicsDevice' Data)));                                  break;                              case FAR3TypeIDs.JPG:                                  try                                  {                                      using (BMap = new Bitmap(Data))                                      {                                          BMap.MakeTransparent(System.Drawing.Color.FromArgb(255' 0' 255));                                          BMap.MakeTransparent(System.Drawing.Color.FromArgb(255' 1' 255));                                          BMap.MakeTransparent(System.Drawing.Color.FromArgb(254' 2' 254));                                          BMap.Save(MemStream' System.Drawing.Imaging.ImageFormat.Png);                                          MemStream.Seek(0' SeekOrigin.Begin);                                      }                                        AddItem(ID' new Asset(ID' (uint)MemStream.Length'                                          Texture2D.FromStream(m_Game.GraphicsDevice' MemStream)));                                  }                                  catch                                  {                                      try                                      {                                          AddItem(ID' new Asset(ID' (uint)Data.Length'                                              Texture2D.FromStream(m_Game.GraphicsDevice' Data)));                                      }                                      catch(Exception) //Most likely a TGA' sigh.                                      {                                          MemStream = new MemoryStream();                                            using (Paloma.TargaImage TGA = new Paloma.TargaImage(Data))                                          {                                              TGA.Image.Save(MemStream' System.Drawing.Imaging.ImageFormat.Png);                                              MemStream.Seek(0' SeekOrigin.Begin);                                              AddItem(ID' new Asset(ID' (uint)MemStream.Length'                                                  Texture2D.FromStream(m_Game.GraphicsDevice' MemStream)));                                          }                                      }                                  }                                  break;                              case FAR3TypeIDs.BMP:                                  if (IsBMP(Data))                                  {                                      lock (TheLock)                                      {                                          try                                          {                                              using (BMap = new Bitmap(Data))                                              {                                                  BMap.MakeTransparent(System.Drawing.Color.FromArgb(255' 0' 255));                                                  BMap.MakeTransparent(System.Drawing.Color.FromArgb(255' 1' 255));                                                  BMap.MakeTransparent(System.Drawing.Color.FromArgb(254' 2' 254));                                                  BMap.Save(MemStream' System.Drawing.Imaging.ImageFormat.Png);                                                  MemStream.Seek(0' SeekOrigin.Begin);                                              }                                                AddItem(ID' new Asset(ID' (uint)MemStream.Length'                                                  Texture2D.FromStream(m_Game.GraphicsDevice' MemStream)));                                          }                                          catch (Exception)                                          {                                              AddItem(ID' new Asset(ID' (uint)Data.Length'                                                  Texture2D.FromStream(m_Game.GraphicsDevice' Data)));                                          }                                      }                                  }                                  else                                  {                                      AddItem(ID' new Asset(ID' (uint)Data.Length'                                           Texture2D.FromStream(m_Game.GraphicsDevice' Data)));                                  }                                  break;                          }
Magic Number,Files.Manager,FileManager,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\FileManager\FileManager.cs,GrabItem,The following statement contains a magic number: switch(TypeID)                          {                              case FAR3TypeIDs.ANIM:                                  AddItem(ID' new Asset(ID' (uint)Data.Length' new Anim(Data)));                                  break;                              case FAR3TypeIDs.APR:                                  AddItem(ID' new Asset(ID' (uint)Data.Length' new Appearance(Data)));                                  break;                              case FAR3TypeIDs.BND:                                  AddItem(ID' new Asset(ID' (uint)Data.Length' new Binding(Data)));                                  break;                              case FAR3TypeIDs.COL:                                  AddItem(ID' new Asset(ID' (uint)Data.Length' new Collection(Data)));                                  break;                              case FAR3TypeIDs.HAG:                                  AddItem(ID' new Asset(ID' (uint)Data.Length' new HandGroup(Data)));                                  break;                              case FAR3TypeIDs.MESH:                                  AddItem(ID' new Asset(ID' (uint)Data.Length' new Mesh(Data)));                                  break;                              case FAR3TypeIDs.OFT:                                  AddItem(ID' new Asset(ID' (uint)Data.Length' new Outfit(Data)));                                  break;                              case FAR3TypeIDs.PO:                                  AddItem(ID' new Asset(ID' (uint)Data.Length' new PurchasableOutfit(Data)));                                  break;                              case FAR3TypeIDs.SKEL:                                  AddItem(ID' new Asset(ID' (uint)Data.Length' new Skeleton(Data)));                                  break;                              case FAR3TypeIDs.TGA:                                  lock (TheLock)                                  {                                      using (Paloma.TargaImage TGA = new Paloma.TargaImage(Data))                                      {                                          TGA.Image.Save(MemStream' System.Drawing.Imaging.ImageFormat.Png);                                          MemStream.Seek(0' SeekOrigin.Begin);                                          AddItem(ID' new Asset(ID' (uint)MemStream.Length'                                              Texture2D.FromStream(m_Game.GraphicsDevice' MemStream)));                                      }                                  }                                  break;                              case FAR3TypeIDs.PNG:                              case FAR3TypeIDs.PackedPNG:                                  AddItem(ID' new Asset(ID' (uint)Data.Length'                                       Texture2D.FromStream(m_Game.GraphicsDevice' Data)));                                  break;                              case FAR3TypeIDs.JPG:                                  try                                  {                                      using (BMap = new Bitmap(Data))                                      {                                          BMap.MakeTransparent(System.Drawing.Color.FromArgb(255' 0' 255));                                          BMap.MakeTransparent(System.Drawing.Color.FromArgb(255' 1' 255));                                          BMap.MakeTransparent(System.Drawing.Color.FromArgb(254' 2' 254));                                          BMap.Save(MemStream' System.Drawing.Imaging.ImageFormat.Png);                                          MemStream.Seek(0' SeekOrigin.Begin);                                      }                                        AddItem(ID' new Asset(ID' (uint)MemStream.Length'                                          Texture2D.FromStream(m_Game.GraphicsDevice' MemStream)));                                  }                                  catch                                  {                                      try                                      {                                          AddItem(ID' new Asset(ID' (uint)Data.Length'                                              Texture2D.FromStream(m_Game.GraphicsDevice' Data)));                                      }                                      catch(Exception) //Most likely a TGA' sigh.                                      {                                          MemStream = new MemoryStream();                                            using (Paloma.TargaImage TGA = new Paloma.TargaImage(Data))                                          {                                              TGA.Image.Save(MemStream' System.Drawing.Imaging.ImageFormat.Png);                                              MemStream.Seek(0' SeekOrigin.Begin);                                              AddItem(ID' new Asset(ID' (uint)MemStream.Length'                                                  Texture2D.FromStream(m_Game.GraphicsDevice' MemStream)));                                          }                                      }                                  }                                  break;                              case FAR3TypeIDs.BMP:                                  if (IsBMP(Data))                                  {                                      lock (TheLock)                                      {                                          try                                          {                                              using (BMap = new Bitmap(Data))                                              {                                                  BMap.MakeTransparent(System.Drawing.Color.FromArgb(255' 0' 255));                                                  BMap.MakeTransparent(System.Drawing.Color.FromArgb(255' 1' 255));                                                  BMap.MakeTransparent(System.Drawing.Color.FromArgb(254' 2' 254));                                                  BMap.Save(MemStream' System.Drawing.Imaging.ImageFormat.Png);                                                  MemStream.Seek(0' SeekOrigin.Begin);                                              }                                                AddItem(ID' new Asset(ID' (uint)MemStream.Length'                                                  Texture2D.FromStream(m_Game.GraphicsDevice' MemStream)));                                          }                                          catch (Exception)                                          {                                              AddItem(ID' new Asset(ID' (uint)Data.Length'                                                  Texture2D.FromStream(m_Game.GraphicsDevice' Data)));                                          }                                      }                                  }                                  else                                  {                                      AddItem(ID' new Asset(ID' (uint)Data.Length'                                           Texture2D.FromStream(m_Game.GraphicsDevice' Data)));                                  }                                  break;                          }
Magic Number,Files.Manager,FileManager,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\FileManager\FileManager.cs,GrabItem,The following statement contains a magic number: switch(TypeID)                          {                              case FAR3TypeIDs.ANIM:                                  AddItem(ID' new Asset(ID' (uint)Data.Length' new Anim(Data)));                                  break;                              case FAR3TypeIDs.APR:                                  AddItem(ID' new Asset(ID' (uint)Data.Length' new Appearance(Data)));                                  break;                              case FAR3TypeIDs.BND:                                  AddItem(ID' new Asset(ID' (uint)Data.Length' new Binding(Data)));                                  break;                              case FAR3TypeIDs.COL:                                  AddItem(ID' new Asset(ID' (uint)Data.Length' new Collection(Data)));                                  break;                              case FAR3TypeIDs.HAG:                                  AddItem(ID' new Asset(ID' (uint)Data.Length' new HandGroup(Data)));                                  break;                              case FAR3TypeIDs.MESH:                                  AddItem(ID' new Asset(ID' (uint)Data.Length' new Mesh(Data)));                                  break;                              case FAR3TypeIDs.OFT:                                  AddItem(ID' new Asset(ID' (uint)Data.Length' new Outfit(Data)));                                  break;                              case FAR3TypeIDs.PO:                                  AddItem(ID' new Asset(ID' (uint)Data.Length' new PurchasableOutfit(Data)));                                  break;                              case FAR3TypeIDs.SKEL:                                  AddItem(ID' new Asset(ID' (uint)Data.Length' new Skeleton(Data)));                                  break;                              case FAR3TypeIDs.TGA:                                  lock (TheLock)                                  {                                      using (Paloma.TargaImage TGA = new Paloma.TargaImage(Data))                                      {                                          TGA.Image.Save(MemStream' System.Drawing.Imaging.ImageFormat.Png);                                          MemStream.Seek(0' SeekOrigin.Begin);                                          AddItem(ID' new Asset(ID' (uint)MemStream.Length'                                              Texture2D.FromStream(m_Game.GraphicsDevice' MemStream)));                                      }                                  }                                  break;                              case FAR3TypeIDs.PNG:                              case FAR3TypeIDs.PackedPNG:                                  AddItem(ID' new Asset(ID' (uint)Data.Length'                                       Texture2D.FromStream(m_Game.GraphicsDevice' Data)));                                  break;                              case FAR3TypeIDs.JPG:                                  try                                  {                                      using (BMap = new Bitmap(Data))                                      {                                          BMap.MakeTransparent(System.Drawing.Color.FromArgb(255' 0' 255));                                          BMap.MakeTransparent(System.Drawing.Color.FromArgb(255' 1' 255));                                          BMap.MakeTransparent(System.Drawing.Color.FromArgb(254' 2' 254));                                          BMap.Save(MemStream' System.Drawing.Imaging.ImageFormat.Png);                                          MemStream.Seek(0' SeekOrigin.Begin);                                      }                                        AddItem(ID' new Asset(ID' (uint)MemStream.Length'                                          Texture2D.FromStream(m_Game.GraphicsDevice' MemStream)));                                  }                                  catch                                  {                                      try                                      {                                          AddItem(ID' new Asset(ID' (uint)Data.Length'                                              Texture2D.FromStream(m_Game.GraphicsDevice' Data)));                                      }                                      catch(Exception) //Most likely a TGA' sigh.                                      {                                          MemStream = new MemoryStream();                                            using (Paloma.TargaImage TGA = new Paloma.TargaImage(Data))                                          {                                              TGA.Image.Save(MemStream' System.Drawing.Imaging.ImageFormat.Png);                                              MemStream.Seek(0' SeekOrigin.Begin);                                              AddItem(ID' new Asset(ID' (uint)MemStream.Length'                                                  Texture2D.FromStream(m_Game.GraphicsDevice' MemStream)));                                          }                                      }                                  }                                  break;                              case FAR3TypeIDs.BMP:                                  if (IsBMP(Data))                                  {                                      lock (TheLock)                                      {                                          try                                          {                                              using (BMap = new Bitmap(Data))                                              {                                                  BMap.MakeTransparent(System.Drawing.Color.FromArgb(255' 0' 255));                                                  BMap.MakeTransparent(System.Drawing.Color.FromArgb(255' 1' 255));                                                  BMap.MakeTransparent(System.Drawing.Color.FromArgb(254' 2' 254));                                                  BMap.Save(MemStream' System.Drawing.Imaging.ImageFormat.Png);                                                  MemStream.Seek(0' SeekOrigin.Begin);                                              }                                                AddItem(ID' new Asset(ID' (uint)MemStream.Length'                                                  Texture2D.FromStream(m_Game.GraphicsDevice' MemStream)));                                          }                                          catch (Exception)                                          {                                              AddItem(ID' new Asset(ID' (uint)Data.Length'                                                  Texture2D.FromStream(m_Game.GraphicsDevice' Data)));                                          }                                      }                                  }                                  else                                  {                                      AddItem(ID' new Asset(ID' (uint)Data.Length'                                           Texture2D.FromStream(m_Game.GraphicsDevice' Data)));                                  }                                  break;                          }
Magic Number,Files.Manager,FileManager,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\FileManager\FileManager.cs,GrabItem,The following statement contains a magic number: switch(TypeID)                          {                              case FAR3TypeIDs.ANIM:                                  AddItem(ID' new Asset(ID' (uint)Data.Length' new Anim(Data)));                                  break;                              case FAR3TypeIDs.APR:                                  AddItem(ID' new Asset(ID' (uint)Data.Length' new Appearance(Data)));                                  break;                              case FAR3TypeIDs.BND:                                  AddItem(ID' new Asset(ID' (uint)Data.Length' new Binding(Data)));                                  break;                              case FAR3TypeIDs.COL:                                  AddItem(ID' new Asset(ID' (uint)Data.Length' new Collection(Data)));                                  break;                              case FAR3TypeIDs.HAG:                                  AddItem(ID' new Asset(ID' (uint)Data.Length' new HandGroup(Data)));                                  break;                              case FAR3TypeIDs.MESH:                                  AddItem(ID' new Asset(ID' (uint)Data.Length' new Mesh(Data)));                                  break;                              case FAR3TypeIDs.OFT:                                  AddItem(ID' new Asset(ID' (uint)Data.Length' new Outfit(Data)));                                  break;                              case FAR3TypeIDs.PO:                                  AddItem(ID' new Asset(ID' (uint)Data.Length' new PurchasableOutfit(Data)));                                  break;                              case FAR3TypeIDs.SKEL:                                  AddItem(ID' new Asset(ID' (uint)Data.Length' new Skeleton(Data)));                                  break;                              case FAR3TypeIDs.TGA:                                  lock (TheLock)                                  {                                      using (Paloma.TargaImage TGA = new Paloma.TargaImage(Data))                                      {                                          TGA.Image.Save(MemStream' System.Drawing.Imaging.ImageFormat.Png);                                          MemStream.Seek(0' SeekOrigin.Begin);                                          AddItem(ID' new Asset(ID' (uint)MemStream.Length'                                              Texture2D.FromStream(m_Game.GraphicsDevice' MemStream)));                                      }                                  }                                  break;                              case FAR3TypeIDs.PNG:                              case FAR3TypeIDs.PackedPNG:                                  AddItem(ID' new Asset(ID' (uint)Data.Length'                                       Texture2D.FromStream(m_Game.GraphicsDevice' Data)));                                  break;                              case FAR3TypeIDs.JPG:                                  try                                  {                                      using (BMap = new Bitmap(Data))                                      {                                          BMap.MakeTransparent(System.Drawing.Color.FromArgb(255' 0' 255));                                          BMap.MakeTransparent(System.Drawing.Color.FromArgb(255' 1' 255));                                          BMap.MakeTransparent(System.Drawing.Color.FromArgb(254' 2' 254));                                          BMap.Save(MemStream' System.Drawing.Imaging.ImageFormat.Png);                                          MemStream.Seek(0' SeekOrigin.Begin);                                      }                                        AddItem(ID' new Asset(ID' (uint)MemStream.Length'                                          Texture2D.FromStream(m_Game.GraphicsDevice' MemStream)));                                  }                                  catch                                  {                                      try                                      {                                          AddItem(ID' new Asset(ID' (uint)Data.Length'                                              Texture2D.FromStream(m_Game.GraphicsDevice' Data)));                                      }                                      catch(Exception) //Most likely a TGA' sigh.                                      {                                          MemStream = new MemoryStream();                                            using (Paloma.TargaImage TGA = new Paloma.TargaImage(Data))                                          {                                              TGA.Image.Save(MemStream' System.Drawing.Imaging.ImageFormat.Png);                                              MemStream.Seek(0' SeekOrigin.Begin);                                              AddItem(ID' new Asset(ID' (uint)MemStream.Length'                                                  Texture2D.FromStream(m_Game.GraphicsDevice' MemStream)));                                          }                                      }                                  }                                  break;                              case FAR3TypeIDs.BMP:                                  if (IsBMP(Data))                                  {                                      lock (TheLock)                                      {                                          try                                          {                                              using (BMap = new Bitmap(Data))                                              {                                                  BMap.MakeTransparent(System.Drawing.Color.FromArgb(255' 0' 255));                                                  BMap.MakeTransparent(System.Drawing.Color.FromArgb(255' 1' 255));                                                  BMap.MakeTransparent(System.Drawing.Color.FromArgb(254' 2' 254));                                                  BMap.Save(MemStream' System.Drawing.Imaging.ImageFormat.Png);                                                  MemStream.Seek(0' SeekOrigin.Begin);                                              }                                                AddItem(ID' new Asset(ID' (uint)MemStream.Length'                                                  Texture2D.FromStream(m_Game.GraphicsDevice' MemStream)));                                          }                                          catch (Exception)                                          {                                              AddItem(ID' new Asset(ID' (uint)Data.Length'                                                  Texture2D.FromStream(m_Game.GraphicsDevice' Data)));                                          }                                      }                                  }                                  else                                  {                                      AddItem(ID' new Asset(ID' (uint)Data.Length'                                           Texture2D.FromStream(m_Game.GraphicsDevice' Data)));                                  }                                  break;                          }
Magic Number,Files.Manager,FileManager,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\FileManager\FileManager.cs,GrabItem,The following statement contains a magic number: switch(TypeID)                          {                              case FAR3TypeIDs.ANIM:                                  AddItem(ID' new Asset(ID' (uint)Data.Length' new Anim(Data)));                                  break;                              case FAR3TypeIDs.APR:                                  AddItem(ID' new Asset(ID' (uint)Data.Length' new Appearance(Data)));                                  break;                              case FAR3TypeIDs.BND:                                  AddItem(ID' new Asset(ID' (uint)Data.Length' new Binding(Data)));                                  break;                              case FAR3TypeIDs.COL:                                  AddItem(ID' new Asset(ID' (uint)Data.Length' new Collection(Data)));                                  break;                              case FAR3TypeIDs.HAG:                                  AddItem(ID' new Asset(ID' (uint)Data.Length' new HandGroup(Data)));                                  break;                              case FAR3TypeIDs.MESH:                                  AddItem(ID' new Asset(ID' (uint)Data.Length' new Mesh(Data)));                                  break;                              case FAR3TypeIDs.OFT:                                  AddItem(ID' new Asset(ID' (uint)Data.Length' new Outfit(Data)));                                  break;                              case FAR3TypeIDs.PO:                                  AddItem(ID' new Asset(ID' (uint)Data.Length' new PurchasableOutfit(Data)));                                  break;                              case FAR3TypeIDs.SKEL:                                  AddItem(ID' new Asset(ID' (uint)Data.Length' new Skeleton(Data)));                                  break;                              case FAR3TypeIDs.TGA:                                  lock (TheLock)                                  {                                      using (Paloma.TargaImage TGA = new Paloma.TargaImage(Data))                                      {                                          TGA.Image.Save(MemStream' System.Drawing.Imaging.ImageFormat.Png);                                          MemStream.Seek(0' SeekOrigin.Begin);                                          AddItem(ID' new Asset(ID' (uint)MemStream.Length'                                              Texture2D.FromStream(m_Game.GraphicsDevice' MemStream)));                                      }                                  }                                  break;                              case FAR3TypeIDs.PNG:                              case FAR3TypeIDs.PackedPNG:                                  AddItem(ID' new Asset(ID' (uint)Data.Length'                                       Texture2D.FromStream(m_Game.GraphicsDevice' Data)));                                  break;                              case FAR3TypeIDs.JPG:                                  try                                  {                                      using (BMap = new Bitmap(Data))                                      {                                          BMap.MakeTransparent(System.Drawing.Color.FromArgb(255' 0' 255));                                          BMap.MakeTransparent(System.Drawing.Color.FromArgb(255' 1' 255));                                          BMap.MakeTransparent(System.Drawing.Color.FromArgb(254' 2' 254));                                          BMap.Save(MemStream' System.Drawing.Imaging.ImageFormat.Png);                                          MemStream.Seek(0' SeekOrigin.Begin);                                      }                                        AddItem(ID' new Asset(ID' (uint)MemStream.Length'                                          Texture2D.FromStream(m_Game.GraphicsDevice' MemStream)));                                  }                                  catch                                  {                                      try                                      {                                          AddItem(ID' new Asset(ID' (uint)Data.Length'                                              Texture2D.FromStream(m_Game.GraphicsDevice' Data)));                                      }                                      catch(Exception) //Most likely a TGA' sigh.                                      {                                          MemStream = new MemoryStream();                                            using (Paloma.TargaImage TGA = new Paloma.TargaImage(Data))                                          {                                              TGA.Image.Save(MemStream' System.Drawing.Imaging.ImageFormat.Png);                                              MemStream.Seek(0' SeekOrigin.Begin);                                              AddItem(ID' new Asset(ID' (uint)MemStream.Length'                                                  Texture2D.FromStream(m_Game.GraphicsDevice' MemStream)));                                          }                                      }                                  }                                  break;                              case FAR3TypeIDs.BMP:                                  if (IsBMP(Data))                                  {                                      lock (TheLock)                                      {                                          try                                          {                                              using (BMap = new Bitmap(Data))                                              {                                                  BMap.MakeTransparent(System.Drawing.Color.FromArgb(255' 0' 255));                                                  BMap.MakeTransparent(System.Drawing.Color.FromArgb(255' 1' 255));                                                  BMap.MakeTransparent(System.Drawing.Color.FromArgb(254' 2' 254));                                                  BMap.Save(MemStream' System.Drawing.Imaging.ImageFormat.Png);                                                  MemStream.Seek(0' SeekOrigin.Begin);                                              }                                                AddItem(ID' new Asset(ID' (uint)MemStream.Length'                                                  Texture2D.FromStream(m_Game.GraphicsDevice' MemStream)));                                          }                                          catch (Exception)                                          {                                              AddItem(ID' new Asset(ID' (uint)Data.Length'                                                  Texture2D.FromStream(m_Game.GraphicsDevice' Data)));                                          }                                      }                                  }                                  else                                  {                                      AddItem(ID' new Asset(ID' (uint)Data.Length'                                           Texture2D.FromStream(m_Game.GraphicsDevice' Data)));                                  }                                  break;                          }
Magic Number,Files.Manager,FileManager,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\FileManager\FileManager.cs,GrabItem,The following statement contains a magic number: switch(TypeID)                          {                              case FAR3TypeIDs.ANIM:                                  AddItem(ID' new Asset(ID' (uint)Data.Length' new Anim(Data)));                                  break;                              case FAR3TypeIDs.APR:                                  AddItem(ID' new Asset(ID' (uint)Data.Length' new Appearance(Data)));                                  break;                              case FAR3TypeIDs.BND:                                  AddItem(ID' new Asset(ID' (uint)Data.Length' new Binding(Data)));                                  break;                              case FAR3TypeIDs.COL:                                  AddItem(ID' new Asset(ID' (uint)Data.Length' new Collection(Data)));                                  break;                              case FAR3TypeIDs.HAG:                                  AddItem(ID' new Asset(ID' (uint)Data.Length' new HandGroup(Data)));                                  break;                              case FAR3TypeIDs.MESH:                                  AddItem(ID' new Asset(ID' (uint)Data.Length' new Mesh(Data)));                                  break;                              case FAR3TypeIDs.OFT:                                  AddItem(ID' new Asset(ID' (uint)Data.Length' new Outfit(Data)));                                  break;                              case FAR3TypeIDs.PO:                                  AddItem(ID' new Asset(ID' (uint)Data.Length' new PurchasableOutfit(Data)));                                  break;                              case FAR3TypeIDs.SKEL:                                  AddItem(ID' new Asset(ID' (uint)Data.Length' new Skeleton(Data)));                                  break;                              case FAR3TypeIDs.TGA:                                  lock (TheLock)                                  {                                      using (Paloma.TargaImage TGA = new Paloma.TargaImage(Data))                                      {                                          TGA.Image.Save(MemStream' System.Drawing.Imaging.ImageFormat.Png);                                          MemStream.Seek(0' SeekOrigin.Begin);                                          AddItem(ID' new Asset(ID' (uint)MemStream.Length'                                              Texture2D.FromStream(m_Game.GraphicsDevice' MemStream)));                                      }                                  }                                  break;                              case FAR3TypeIDs.PNG:                              case FAR3TypeIDs.PackedPNG:                                  AddItem(ID' new Asset(ID' (uint)Data.Length'                                       Texture2D.FromStream(m_Game.GraphicsDevice' Data)));                                  break;                              case FAR3TypeIDs.JPG:                                  try                                  {                                      using (BMap = new Bitmap(Data))                                      {                                          BMap.MakeTransparent(System.Drawing.Color.FromArgb(255' 0' 255));                                          BMap.MakeTransparent(System.Drawing.Color.FromArgb(255' 1' 255));                                          BMap.MakeTransparent(System.Drawing.Color.FromArgb(254' 2' 254));                                          BMap.Save(MemStream' System.Drawing.Imaging.ImageFormat.Png);                                          MemStream.Seek(0' SeekOrigin.Begin);                                      }                                        AddItem(ID' new Asset(ID' (uint)MemStream.Length'                                          Texture2D.FromStream(m_Game.GraphicsDevice' MemStream)));                                  }                                  catch                                  {                                      try                                      {                                          AddItem(ID' new Asset(ID' (uint)Data.Length'                                              Texture2D.FromStream(m_Game.GraphicsDevice' Data)));                                      }                                      catch(Exception) //Most likely a TGA' sigh.                                      {                                          MemStream = new MemoryStream();                                            using (Paloma.TargaImage TGA = new Paloma.TargaImage(Data))                                          {                                              TGA.Image.Save(MemStream' System.Drawing.Imaging.ImageFormat.Png);                                              MemStream.Seek(0' SeekOrigin.Begin);                                              AddItem(ID' new Asset(ID' (uint)MemStream.Length'                                                  Texture2D.FromStream(m_Game.GraphicsDevice' MemStream)));                                          }                                      }                                  }                                  break;                              case FAR3TypeIDs.BMP:                                  if (IsBMP(Data))                                  {                                      lock (TheLock)                                      {                                          try                                          {                                              using (BMap = new Bitmap(Data))                                              {                                                  BMap.MakeTransparent(System.Drawing.Color.FromArgb(255' 0' 255));                                                  BMap.MakeTransparent(System.Drawing.Color.FromArgb(255' 1' 255));                                                  BMap.MakeTransparent(System.Drawing.Color.FromArgb(254' 2' 254));                                                  BMap.Save(MemStream' System.Drawing.Imaging.ImageFormat.Png);                                                  MemStream.Seek(0' SeekOrigin.Begin);                                              }                                                AddItem(ID' new Asset(ID' (uint)MemStream.Length'                                                  Texture2D.FromStream(m_Game.GraphicsDevice' MemStream)));                                          }                                          catch (Exception)                                          {                                              AddItem(ID' new Asset(ID' (uint)Data.Length'                                                  Texture2D.FromStream(m_Game.GraphicsDevice' Data)));                                          }                                      }                                  }                                  else                                  {                                      AddItem(ID' new Asset(ID' (uint)Data.Length'                                           Texture2D.FromStream(m_Game.GraphicsDevice' Data)));                                  }                                  break;                          }
Magic Number,Files.Manager,FileManager,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\FileManager\FileManager.cs,GrabItem,The following statement contains a magic number: switch(TypeID)                          {                              case FAR3TypeIDs.ANIM:                                  AddItem(ID' new Asset(ID' (uint)Data.Length' new Anim(Data)));                                  break;                              case FAR3TypeIDs.APR:                                  AddItem(ID' new Asset(ID' (uint)Data.Length' new Appearance(Data)));                                  break;                              case FAR3TypeIDs.BND:                                  AddItem(ID' new Asset(ID' (uint)Data.Length' new Binding(Data)));                                  break;                              case FAR3TypeIDs.COL:                                  AddItem(ID' new Asset(ID' (uint)Data.Length' new Collection(Data)));                                  break;                              case FAR3TypeIDs.HAG:                                  AddItem(ID' new Asset(ID' (uint)Data.Length' new HandGroup(Data)));                                  break;                              case FAR3TypeIDs.MESH:                                  AddItem(ID' new Asset(ID' (uint)Data.Length' new Mesh(Data)));                                  break;                              case FAR3TypeIDs.OFT:                                  AddItem(ID' new Asset(ID' (uint)Data.Length' new Outfit(Data)));                                  break;                              case FAR3TypeIDs.PO:                                  AddItem(ID' new Asset(ID' (uint)Data.Length' new PurchasableOutfit(Data)));                                  break;                              case FAR3TypeIDs.SKEL:                                  AddItem(ID' new Asset(ID' (uint)Data.Length' new Skeleton(Data)));                                  break;                              case FAR3TypeIDs.TGA:                                  lock (TheLock)                                  {                                      using (Paloma.TargaImage TGA = new Paloma.TargaImage(Data))                                      {                                          TGA.Image.Save(MemStream' System.Drawing.Imaging.ImageFormat.Png);                                          MemStream.Seek(0' SeekOrigin.Begin);                                          AddItem(ID' new Asset(ID' (uint)MemStream.Length'                                              Texture2D.FromStream(m_Game.GraphicsDevice' MemStream)));                                      }                                  }                                  break;                              case FAR3TypeIDs.PNG:                              case FAR3TypeIDs.PackedPNG:                                  AddItem(ID' new Asset(ID' (uint)Data.Length'                                       Texture2D.FromStream(m_Game.GraphicsDevice' Data)));                                  break;                              case FAR3TypeIDs.JPG:                                  try                                  {                                      using (BMap = new Bitmap(Data))                                      {                                          BMap.MakeTransparent(System.Drawing.Color.FromArgb(255' 0' 255));                                          BMap.MakeTransparent(System.Drawing.Color.FromArgb(255' 1' 255));                                          BMap.MakeTransparent(System.Drawing.Color.FromArgb(254' 2' 254));                                          BMap.Save(MemStream' System.Drawing.Imaging.ImageFormat.Png);                                          MemStream.Seek(0' SeekOrigin.Begin);                                      }                                        AddItem(ID' new Asset(ID' (uint)MemStream.Length'                                          Texture2D.FromStream(m_Game.GraphicsDevice' MemStream)));                                  }                                  catch                                  {                                      try                                      {                                          AddItem(ID' new Asset(ID' (uint)Data.Length'                                              Texture2D.FromStream(m_Game.GraphicsDevice' Data)));                                      }                                      catch(Exception) //Most likely a TGA' sigh.                                      {                                          MemStream = new MemoryStream();                                            using (Paloma.TargaImage TGA = new Paloma.TargaImage(Data))                                          {                                              TGA.Image.Save(MemStream' System.Drawing.Imaging.ImageFormat.Png);                                              MemStream.Seek(0' SeekOrigin.Begin);                                              AddItem(ID' new Asset(ID' (uint)MemStream.Length'                                                  Texture2D.FromStream(m_Game.GraphicsDevice' MemStream)));                                          }                                      }                                  }                                  break;                              case FAR3TypeIDs.BMP:                                  if (IsBMP(Data))                                  {                                      lock (TheLock)                                      {                                          try                                          {                                              using (BMap = new Bitmap(Data))                                              {                                                  BMap.MakeTransparent(System.Drawing.Color.FromArgb(255' 0' 255));                                                  BMap.MakeTransparent(System.Drawing.Color.FromArgb(255' 1' 255));                                                  BMap.MakeTransparent(System.Drawing.Color.FromArgb(254' 2' 254));                                                  BMap.Save(MemStream' System.Drawing.Imaging.ImageFormat.Png);                                                  MemStream.Seek(0' SeekOrigin.Begin);                                              }                                                AddItem(ID' new Asset(ID' (uint)MemStream.Length'                                                  Texture2D.FromStream(m_Game.GraphicsDevice' MemStream)));                                          }                                          catch (Exception)                                          {                                              AddItem(ID' new Asset(ID' (uint)Data.Length'                                                  Texture2D.FromStream(m_Game.GraphicsDevice' Data)));                                          }                                      }                                  }                                  else                                  {                                      AddItem(ID' new Asset(ID' (uint)Data.Length'                                           Texture2D.FromStream(m_Game.GraphicsDevice' Data)));                                  }                                  break;                          }
Magic Number,Files.Manager,FileManager,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\FileManager\FileManager.cs,GrabItem,The following statement contains a magic number: switch(TypeID)                          {                              case FAR3TypeIDs.ANIM:                                  AddItem(ID' new Asset(ID' (uint)Data.Length' new Anim(Data)));                                  break;                              case FAR3TypeIDs.APR:                                  AddItem(ID' new Asset(ID' (uint)Data.Length' new Appearance(Data)));                                  break;                              case FAR3TypeIDs.BND:                                  AddItem(ID' new Asset(ID' (uint)Data.Length' new Binding(Data)));                                  break;                              case FAR3TypeIDs.COL:                                  AddItem(ID' new Asset(ID' (uint)Data.Length' new Collection(Data)));                                  break;                              case FAR3TypeIDs.HAG:                                  AddItem(ID' new Asset(ID' (uint)Data.Length' new HandGroup(Data)));                                  break;                              case FAR3TypeIDs.MESH:                                  AddItem(ID' new Asset(ID' (uint)Data.Length' new Mesh(Data)));                                  break;                              case FAR3TypeIDs.OFT:                                  AddItem(ID' new Asset(ID' (uint)Data.Length' new Outfit(Data)));                                  break;                              case FAR3TypeIDs.PO:                                  AddItem(ID' new Asset(ID' (uint)Data.Length' new PurchasableOutfit(Data)));                                  break;                              case FAR3TypeIDs.SKEL:                                  AddItem(ID' new Asset(ID' (uint)Data.Length' new Skeleton(Data)));                                  break;                              case FAR3TypeIDs.TGA:                                  lock (TheLock)                                  {                                      using (Paloma.TargaImage TGA = new Paloma.TargaImage(Data))                                      {                                          TGA.Image.Save(MemStream' System.Drawing.Imaging.ImageFormat.Png);                                          MemStream.Seek(0' SeekOrigin.Begin);                                          AddItem(ID' new Asset(ID' (uint)MemStream.Length'                                              Texture2D.FromStream(m_Game.GraphicsDevice' MemStream)));                                      }                                  }                                  break;                              case FAR3TypeIDs.PNG:                              case FAR3TypeIDs.PackedPNG:                                  AddItem(ID' new Asset(ID' (uint)Data.Length'                                       Texture2D.FromStream(m_Game.GraphicsDevice' Data)));                                  break;                              case FAR3TypeIDs.JPG:                                  try                                  {                                      using (BMap = new Bitmap(Data))                                      {                                          BMap.MakeTransparent(System.Drawing.Color.FromArgb(255' 0' 255));                                          BMap.MakeTransparent(System.Drawing.Color.FromArgb(255' 1' 255));                                          BMap.MakeTransparent(System.Drawing.Color.FromArgb(254' 2' 254));                                          BMap.Save(MemStream' System.Drawing.Imaging.ImageFormat.Png);                                          MemStream.Seek(0' SeekOrigin.Begin);                                      }                                        AddItem(ID' new Asset(ID' (uint)MemStream.Length'                                          Texture2D.FromStream(m_Game.GraphicsDevice' MemStream)));                                  }                                  catch                                  {                                      try                                      {                                          AddItem(ID' new Asset(ID' (uint)Data.Length'                                              Texture2D.FromStream(m_Game.GraphicsDevice' Data)));                                      }                                      catch(Exception) //Most likely a TGA' sigh.                                      {                                          MemStream = new MemoryStream();                                            using (Paloma.TargaImage TGA = new Paloma.TargaImage(Data))                                          {                                              TGA.Image.Save(MemStream' System.Drawing.Imaging.ImageFormat.Png);                                              MemStream.Seek(0' SeekOrigin.Begin);                                              AddItem(ID' new Asset(ID' (uint)MemStream.Length'                                                  Texture2D.FromStream(m_Game.GraphicsDevice' MemStream)));                                          }                                      }                                  }                                  break;                              case FAR3TypeIDs.BMP:                                  if (IsBMP(Data))                                  {                                      lock (TheLock)                                      {                                          try                                          {                                              using (BMap = new Bitmap(Data))                                              {                                                  BMap.MakeTransparent(System.Drawing.Color.FromArgb(255' 0' 255));                                                  BMap.MakeTransparent(System.Drawing.Color.FromArgb(255' 1' 255));                                                  BMap.MakeTransparent(System.Drawing.Color.FromArgb(254' 2' 254));                                                  BMap.Save(MemStream' System.Drawing.Imaging.ImageFormat.Png);                                                  MemStream.Seek(0' SeekOrigin.Begin);                                              }                                                AddItem(ID' new Asset(ID' (uint)MemStream.Length'                                                  Texture2D.FromStream(m_Game.GraphicsDevice' MemStream)));                                          }                                          catch (Exception)                                          {                                              AddItem(ID' new Asset(ID' (uint)Data.Length'                                                  Texture2D.FromStream(m_Game.GraphicsDevice' Data)));                                          }                                      }                                  }                                  else                                  {                                      AddItem(ID' new Asset(ID' (uint)Data.Length'                                           Texture2D.FromStream(m_Game.GraphicsDevice' Data)));                                  }                                  break;                          }
Magic Number,Files.Manager,FileManager,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\FileManager\FileManager.cs,GrabItem,The following statement contains a magic number: switch(TypeID)                          {                              case FAR3TypeIDs.ANIM:                                  AddItem(ID' new Asset(ID' (uint)Data.Length' new Anim(Data)));                                  break;                              case FAR3TypeIDs.APR:                                  AddItem(ID' new Asset(ID' (uint)Data.Length' new Appearance(Data)));                                  break;                              case FAR3TypeIDs.BND:                                  AddItem(ID' new Asset(ID' (uint)Data.Length' new Binding(Data)));                                  break;                              case FAR3TypeIDs.COL:                                  AddItem(ID' new Asset(ID' (uint)Data.Length' new Collection(Data)));                                  break;                              case FAR3TypeIDs.HAG:                                  AddItem(ID' new Asset(ID' (uint)Data.Length' new HandGroup(Data)));                                  break;                              case FAR3TypeIDs.MESH:                                  AddItem(ID' new Asset(ID' (uint)Data.Length' new Mesh(Data)));                                  break;                              case FAR3TypeIDs.OFT:                                  AddItem(ID' new Asset(ID' (uint)Data.Length' new Outfit(Data)));                                  break;                              case FAR3TypeIDs.PO:                                  AddItem(ID' new Asset(ID' (uint)Data.Length' new PurchasableOutfit(Data)));                                  break;                              case FAR3TypeIDs.SKEL:                                  AddItem(ID' new Asset(ID' (uint)Data.Length' new Skeleton(Data)));                                  break;                              case FAR3TypeIDs.TGA:                                  lock (TheLock)                                  {                                      using (Paloma.TargaImage TGA = new Paloma.TargaImage(Data))                                      {                                          TGA.Image.Save(MemStream' System.Drawing.Imaging.ImageFormat.Png);                                          MemStream.Seek(0' SeekOrigin.Begin);                                          AddItem(ID' new Asset(ID' (uint)MemStream.Length'                                              Texture2D.FromStream(m_Game.GraphicsDevice' MemStream)));                                      }                                  }                                  break;                              case FAR3TypeIDs.PNG:                              case FAR3TypeIDs.PackedPNG:                                  AddItem(ID' new Asset(ID' (uint)Data.Length'                                       Texture2D.FromStream(m_Game.GraphicsDevice' Data)));                                  break;                              case FAR3TypeIDs.JPG:                                  try                                  {                                      using (BMap = new Bitmap(Data))                                      {                                          BMap.MakeTransparent(System.Drawing.Color.FromArgb(255' 0' 255));                                          BMap.MakeTransparent(System.Drawing.Color.FromArgb(255' 1' 255));                                          BMap.MakeTransparent(System.Drawing.Color.FromArgb(254' 2' 254));                                          BMap.Save(MemStream' System.Drawing.Imaging.ImageFormat.Png);                                          MemStream.Seek(0' SeekOrigin.Begin);                                      }                                        AddItem(ID' new Asset(ID' (uint)MemStream.Length'                                          Texture2D.FromStream(m_Game.GraphicsDevice' MemStream)));                                  }                                  catch                                  {                                      try                                      {                                          AddItem(ID' new Asset(ID' (uint)Data.Length'                                              Texture2D.FromStream(m_Game.GraphicsDevice' Data)));                                      }                                      catch(Exception) //Most likely a TGA' sigh.                                      {                                          MemStream = new MemoryStream();                                            using (Paloma.TargaImage TGA = new Paloma.TargaImage(Data))                                          {                                              TGA.Image.Save(MemStream' System.Drawing.Imaging.ImageFormat.Png);                                              MemStream.Seek(0' SeekOrigin.Begin);                                              AddItem(ID' new Asset(ID' (uint)MemStream.Length'                                                  Texture2D.FromStream(m_Game.GraphicsDevice' MemStream)));                                          }                                      }                                  }                                  break;                              case FAR3TypeIDs.BMP:                                  if (IsBMP(Data))                                  {                                      lock (TheLock)                                      {                                          try                                          {                                              using (BMap = new Bitmap(Data))                                              {                                                  BMap.MakeTransparent(System.Drawing.Color.FromArgb(255' 0' 255));                                                  BMap.MakeTransparent(System.Drawing.Color.FromArgb(255' 1' 255));                                                  BMap.MakeTransparent(System.Drawing.Color.FromArgb(254' 2' 254));                                                  BMap.Save(MemStream' System.Drawing.Imaging.ImageFormat.Png);                                                  MemStream.Seek(0' SeekOrigin.Begin);                                              }                                                AddItem(ID' new Asset(ID' (uint)MemStream.Length'                                                  Texture2D.FromStream(m_Game.GraphicsDevice' MemStream)));                                          }                                          catch (Exception)                                          {                                              AddItem(ID' new Asset(ID' (uint)Data.Length'                                                  Texture2D.FromStream(m_Game.GraphicsDevice' Data)));                                          }                                      }                                  }                                  else                                  {                                      AddItem(ID' new Asset(ID' (uint)Data.Length'                                           Texture2D.FromStream(m_Game.GraphicsDevice' Data)));                                  }                                  break;                          }
Magic Number,Files.Manager,FileManager,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\FileManager\FileManager.cs,GrabItem,The following statement contains a magic number: switch(TypeID)                          {                              case FAR3TypeIDs.ANIM:                                  AddItem(ID' new Asset(ID' (uint)Data.Length' new Anim(Data)));                                  break;                              case FAR3TypeIDs.APR:                                  AddItem(ID' new Asset(ID' (uint)Data.Length' new Appearance(Data)));                                  break;                              case FAR3TypeIDs.BND:                                  AddItem(ID' new Asset(ID' (uint)Data.Length' new Binding(Data)));                                  break;                              case FAR3TypeIDs.COL:                                  AddItem(ID' new Asset(ID' (uint)Data.Length' new Collection(Data)));                                  break;                              case FAR3TypeIDs.HAG:                                  AddItem(ID' new Asset(ID' (uint)Data.Length' new HandGroup(Data)));                                  break;                              case FAR3TypeIDs.MESH:                                  AddItem(ID' new Asset(ID' (uint)Data.Length' new Mesh(Data)));                                  break;                              case FAR3TypeIDs.OFT:                                  AddItem(ID' new Asset(ID' (uint)Data.Length' new Outfit(Data)));                                  break;                              case FAR3TypeIDs.PO:                                  AddItem(ID' new Asset(ID' (uint)Data.Length' new PurchasableOutfit(Data)));                                  break;                              case FAR3TypeIDs.SKEL:                                  AddItem(ID' new Asset(ID' (uint)Data.Length' new Skeleton(Data)));                                  break;                              case FAR3TypeIDs.TGA:                                  lock (TheLock)                                  {                                      using (Paloma.TargaImage TGA = new Paloma.TargaImage(Data))                                      {                                          TGA.Image.Save(MemStream' System.Drawing.Imaging.ImageFormat.Png);                                          MemStream.Seek(0' SeekOrigin.Begin);                                          AddItem(ID' new Asset(ID' (uint)MemStream.Length'                                              Texture2D.FromStream(m_Game.GraphicsDevice' MemStream)));                                      }                                  }                                  break;                              case FAR3TypeIDs.PNG:                              case FAR3TypeIDs.PackedPNG:                                  AddItem(ID' new Asset(ID' (uint)Data.Length'                                       Texture2D.FromStream(m_Game.GraphicsDevice' Data)));                                  break;                              case FAR3TypeIDs.JPG:                                  try                                  {                                      using (BMap = new Bitmap(Data))                                      {                                          BMap.MakeTransparent(System.Drawing.Color.FromArgb(255' 0' 255));                                          BMap.MakeTransparent(System.Drawing.Color.FromArgb(255' 1' 255));                                          BMap.MakeTransparent(System.Drawing.Color.FromArgb(254' 2' 254));                                          BMap.Save(MemStream' System.Drawing.Imaging.ImageFormat.Png);                                          MemStream.Seek(0' SeekOrigin.Begin);                                      }                                        AddItem(ID' new Asset(ID' (uint)MemStream.Length'                                          Texture2D.FromStream(m_Game.GraphicsDevice' MemStream)));                                  }                                  catch                                  {                                      try                                      {                                          AddItem(ID' new Asset(ID' (uint)Data.Length'                                              Texture2D.FromStream(m_Game.GraphicsDevice' Data)));                                      }                                      catch(Exception) //Most likely a TGA' sigh.                                      {                                          MemStream = new MemoryStream();                                            using (Paloma.TargaImage TGA = new Paloma.TargaImage(Data))                                          {                                              TGA.Image.Save(MemStream' System.Drawing.Imaging.ImageFormat.Png);                                              MemStream.Seek(0' SeekOrigin.Begin);                                              AddItem(ID' new Asset(ID' (uint)MemStream.Length'                                                  Texture2D.FromStream(m_Game.GraphicsDevice' MemStream)));                                          }                                      }                                  }                                  break;                              case FAR3TypeIDs.BMP:                                  if (IsBMP(Data))                                  {                                      lock (TheLock)                                      {                                          try                                          {                                              using (BMap = new Bitmap(Data))                                              {                                                  BMap.MakeTransparent(System.Drawing.Color.FromArgb(255' 0' 255));                                                  BMap.MakeTransparent(System.Drawing.Color.FromArgb(255' 1' 255));                                                  BMap.MakeTransparent(System.Drawing.Color.FromArgb(254' 2' 254));                                                  BMap.Save(MemStream' System.Drawing.Imaging.ImageFormat.Png);                                                  MemStream.Seek(0' SeekOrigin.Begin);                                              }                                                AddItem(ID' new Asset(ID' (uint)MemStream.Length'                                                  Texture2D.FromStream(m_Game.GraphicsDevice' MemStream)));                                          }                                          catch (Exception)                                          {                                              AddItem(ID' new Asset(ID' (uint)Data.Length'                                                  Texture2D.FromStream(m_Game.GraphicsDevice' Data)));                                          }                                      }                                  }                                  else                                  {                                      AddItem(ID' new Asset(ID' (uint)Data.Length'                                           Texture2D.FromStream(m_Game.GraphicsDevice' Data)));                                  }                                  break;                          }
Magic Number,Files.Manager,FileManager,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\FileManager\FileManager.cs,GrabItem,The following statement contains a magic number: switch(TypeID)                          {                              case FAR3TypeIDs.ANIM:                                  AddItem(ID' new Asset(ID' (uint)Data.Length' new Anim(Data)));                                  break;                              case FAR3TypeIDs.APR:                                  AddItem(ID' new Asset(ID' (uint)Data.Length' new Appearance(Data)));                                  break;                              case FAR3TypeIDs.BND:                                  AddItem(ID' new Asset(ID' (uint)Data.Length' new Binding(Data)));                                  break;                              case FAR3TypeIDs.COL:                                  AddItem(ID' new Asset(ID' (uint)Data.Length' new Collection(Data)));                                  break;                              case FAR3TypeIDs.HAG:                                  AddItem(ID' new Asset(ID' (uint)Data.Length' new HandGroup(Data)));                                  break;                              case FAR3TypeIDs.MESH:                                  AddItem(ID' new Asset(ID' (uint)Data.Length' new Mesh(Data)));                                  break;                              case FAR3TypeIDs.OFT:                                  AddItem(ID' new Asset(ID' (uint)Data.Length' new Outfit(Data)));                                  break;                              case FAR3TypeIDs.PO:                                  AddItem(ID' new Asset(ID' (uint)Data.Length' new PurchasableOutfit(Data)));                                  break;                              case FAR3TypeIDs.SKEL:                                  AddItem(ID' new Asset(ID' (uint)Data.Length' new Skeleton(Data)));                                  break;                              case FAR3TypeIDs.TGA:                                  lock (TheLock)                                  {                                      using (Paloma.TargaImage TGA = new Paloma.TargaImage(Data))                                      {                                          TGA.Image.Save(MemStream' System.Drawing.Imaging.ImageFormat.Png);                                          MemStream.Seek(0' SeekOrigin.Begin);                                          AddItem(ID' new Asset(ID' (uint)MemStream.Length'                                              Texture2D.FromStream(m_Game.GraphicsDevice' MemStream)));                                      }                                  }                                  break;                              case FAR3TypeIDs.PNG:                              case FAR3TypeIDs.PackedPNG:                                  AddItem(ID' new Asset(ID' (uint)Data.Length'                                       Texture2D.FromStream(m_Game.GraphicsDevice' Data)));                                  break;                              case FAR3TypeIDs.JPG:                                  try                                  {                                      using (BMap = new Bitmap(Data))                                      {                                          BMap.MakeTransparent(System.Drawing.Color.FromArgb(255' 0' 255));                                          BMap.MakeTransparent(System.Drawing.Color.FromArgb(255' 1' 255));                                          BMap.MakeTransparent(System.Drawing.Color.FromArgb(254' 2' 254));                                          BMap.Save(MemStream' System.Drawing.Imaging.ImageFormat.Png);                                          MemStream.Seek(0' SeekOrigin.Begin);                                      }                                        AddItem(ID' new Asset(ID' (uint)MemStream.Length'                                          Texture2D.FromStream(m_Game.GraphicsDevice' MemStream)));                                  }                                  catch                                  {                                      try                                      {                                          AddItem(ID' new Asset(ID' (uint)Data.Length'                                              Texture2D.FromStream(m_Game.GraphicsDevice' Data)));                                      }                                      catch(Exception) //Most likely a TGA' sigh.                                      {                                          MemStream = new MemoryStream();                                            using (Paloma.TargaImage TGA = new Paloma.TargaImage(Data))                                          {                                              TGA.Image.Save(MemStream' System.Drawing.Imaging.ImageFormat.Png);                                              MemStream.Seek(0' SeekOrigin.Begin);                                              AddItem(ID' new Asset(ID' (uint)MemStream.Length'                                                  Texture2D.FromStream(m_Game.GraphicsDevice' MemStream)));                                          }                                      }                                  }                                  break;                              case FAR3TypeIDs.BMP:                                  if (IsBMP(Data))                                  {                                      lock (TheLock)                                      {                                          try                                          {                                              using (BMap = new Bitmap(Data))                                              {                                                  BMap.MakeTransparent(System.Drawing.Color.FromArgb(255' 0' 255));                                                  BMap.MakeTransparent(System.Drawing.Color.FromArgb(255' 1' 255));                                                  BMap.MakeTransparent(System.Drawing.Color.FromArgb(254' 2' 254));                                                  BMap.Save(MemStream' System.Drawing.Imaging.ImageFormat.Png);                                                  MemStream.Seek(0' SeekOrigin.Begin);                                              }                                                AddItem(ID' new Asset(ID' (uint)MemStream.Length'                                                  Texture2D.FromStream(m_Game.GraphicsDevice' MemStream)));                                          }                                          catch (Exception)                                          {                                              AddItem(ID' new Asset(ID' (uint)Data.Length'                                                  Texture2D.FromStream(m_Game.GraphicsDevice' Data)));                                          }                                      }                                  }                                  else                                  {                                      AddItem(ID' new Asset(ID' (uint)Data.Length'                                           Texture2D.FromStream(m_Game.GraphicsDevice' Data)));                                  }                                  break;                          }
Magic Number,Files.IFF,CST,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\IFF\CST.cs,CST,The following statement contains a magic number: switch (Version)                  {                      case 0:                          NumStrings = Reader.ReadUShort();                            for (int i = 0; i < NumStrings; i++)                          {                              TranslatedString Str = new TranslatedString();                              Str.LangCode = LanguageCodes.unused;                              Str.TranslatedStr = Reader.ReadPascalString();                                if (Strings.ContainsKey(Str.LangCode))                                  Strings[Str.LangCode].Add(Str);                              else                              {                                  List<TranslatedString> LanguageSet = new List<TranslatedString>();                                  LanguageSet.Add(Str);                                  Strings.Add(Str.LangCode' LanguageSet);                              }                          }                            break;                      case -1:                          NumStrings = Reader.ReadUShort();                            for (int i = 0; i < NumStrings; i++)                          {                              TranslatedString Str = new TranslatedString();                              Str.LangCode = LanguageCodes.unused;                              Str.TranslatedStr = Reader.ReadCString();                                if (Strings.ContainsKey(Str.LangCode))                                  Strings[Str.LangCode].Add(Str);                              else                              {                                  List<TranslatedString> LanguageSet = new List<TranslatedString>();                                  LanguageSet.Add(Str);                                  Strings.Add(Str.LangCode' LanguageSet);                              }                          }                            break;                      case -2:                          NumStrings = Reader.ReadUShort();                            for (int i = 0; i < NumStrings; i++)                          {                              TranslatedString Str = new TranslatedString();                              Str.LangCode = LanguageCodes.unused;                              Str.TranslatedStr = Reader.ReadCString();                              Reader.ReadCString(); //Comment                                if (Strings.ContainsKey(Str.LangCode))                                  Strings[Str.LangCode].Add(Str);                              else                              {                                  List<TranslatedString> LanguageSet = new List<TranslatedString>();                                  LanguageSet.Add(Str);                                  Strings.Add(Str.LangCode' LanguageSet);                              }                          }                            break;                      case -3:                          NumStrings = Reader.ReadUShort();                            for (int i = 0; i < NumStrings; i++)                          {                              TranslatedString Str = new TranslatedString();                              Str.LangCode = (LanguageCodes)Reader.ReadByte();                              Str.TranslatedStr = Reader.ReadCString();                              Reader.ReadCString(); //Comment                                if (Strings.ContainsKey(Str.LangCode))                                  Strings[Str.LangCode].Add(Str);                              else                              {                                  List<TranslatedString> LanguageSet = new List<TranslatedString>();                                  LanguageSet.Add(Str);                                  Strings.Add(Str.LangCode' LanguageSet);                              }                          }                            break;                      case -4:                          byte LanguageSets = Reader.ReadByte();                          for (int i = 0; i < LanguageSets; i++)                          {                              NumStrings = Reader.ReadUShort();                                for (int j = 0; j < NumStrings; j++)                              {                                  TranslatedString Str = new TranslatedString();                                  Str.LangCode = (LanguageCodes)(Reader.ReadByte() + 1);                                  Str.TranslatedStr = Reader.ReadString();                                  Reader.ReadString(); //Comment                                    if (Strings.ContainsKey(Str.LangCode))                                      Strings[Str.LangCode].Add(Str);                                  else                                  {                                      List<TranslatedString> LanguageSet = new List<TranslatedString>();                                      LanguageSet.Add(Str);                                      Strings.Add(Str.LangCode' LanguageSet);                                  }                              }                          }                            break;                  }
Magic Number,Files.IFF,CST,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\IFF\CST.cs,CST,The following statement contains a magic number: switch (Version)                  {                      case 0:                          NumStrings = Reader.ReadUShort();                            for (int i = 0; i < NumStrings; i++)                          {                              TranslatedString Str = new TranslatedString();                              Str.LangCode = LanguageCodes.unused;                              Str.TranslatedStr = Reader.ReadPascalString();                                if (Strings.ContainsKey(Str.LangCode))                                  Strings[Str.LangCode].Add(Str);                              else                              {                                  List<TranslatedString> LanguageSet = new List<TranslatedString>();                                  LanguageSet.Add(Str);                                  Strings.Add(Str.LangCode' LanguageSet);                              }                          }                            break;                      case -1:                          NumStrings = Reader.ReadUShort();                            for (int i = 0; i < NumStrings; i++)                          {                              TranslatedString Str = new TranslatedString();                              Str.LangCode = LanguageCodes.unused;                              Str.TranslatedStr = Reader.ReadCString();                                if (Strings.ContainsKey(Str.LangCode))                                  Strings[Str.LangCode].Add(Str);                              else                              {                                  List<TranslatedString> LanguageSet = new List<TranslatedString>();                                  LanguageSet.Add(Str);                                  Strings.Add(Str.LangCode' LanguageSet);                              }                          }                            break;                      case -2:                          NumStrings = Reader.ReadUShort();                            for (int i = 0; i < NumStrings; i++)                          {                              TranslatedString Str = new TranslatedString();                              Str.LangCode = LanguageCodes.unused;                              Str.TranslatedStr = Reader.ReadCString();                              Reader.ReadCString(); //Comment                                if (Strings.ContainsKey(Str.LangCode))                                  Strings[Str.LangCode].Add(Str);                              else                              {                                  List<TranslatedString> LanguageSet = new List<TranslatedString>();                                  LanguageSet.Add(Str);                                  Strings.Add(Str.LangCode' LanguageSet);                              }                          }                            break;                      case -3:                          NumStrings = Reader.ReadUShort();                            for (int i = 0; i < NumStrings; i++)                          {                              TranslatedString Str = new TranslatedString();                              Str.LangCode = (LanguageCodes)Reader.ReadByte();                              Str.TranslatedStr = Reader.ReadCString();                              Reader.ReadCString(); //Comment                                if (Strings.ContainsKey(Str.LangCode))                                  Strings[Str.LangCode].Add(Str);                              else                              {                                  List<TranslatedString> LanguageSet = new List<TranslatedString>();                                  LanguageSet.Add(Str);                                  Strings.Add(Str.LangCode' LanguageSet);                              }                          }                            break;                      case -4:                          byte LanguageSets = Reader.ReadByte();                          for (int i = 0; i < LanguageSets; i++)                          {                              NumStrings = Reader.ReadUShort();                                for (int j = 0; j < NumStrings; j++)                              {                                  TranslatedString Str = new TranslatedString();                                  Str.LangCode = (LanguageCodes)(Reader.ReadByte() + 1);                                  Str.TranslatedStr = Reader.ReadString();                                  Reader.ReadString(); //Comment                                    if (Strings.ContainsKey(Str.LangCode))                                      Strings[Str.LangCode].Add(Str);                                  else                                  {                                      List<TranslatedString> LanguageSet = new List<TranslatedString>();                                      LanguageSet.Add(Str);                                      Strings.Add(Str.LangCode' LanguageSet);                                  }                              }                          }                            break;                  }
Magic Number,Files.IFF,CST,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\IFF\CST.cs,CST,The following statement contains a magic number: switch (Version)                  {                      case 0:                          NumStrings = Reader.ReadUShort();                            for (int i = 0; i < NumStrings; i++)                          {                              TranslatedString Str = new TranslatedString();                              Str.LangCode = LanguageCodes.unused;                              Str.TranslatedStr = Reader.ReadPascalString();                                if (Strings.ContainsKey(Str.LangCode))                                  Strings[Str.LangCode].Add(Str);                              else                              {                                  List<TranslatedString> LanguageSet = new List<TranslatedString>();                                  LanguageSet.Add(Str);                                  Strings.Add(Str.LangCode' LanguageSet);                              }                          }                            break;                      case -1:                          NumStrings = Reader.ReadUShort();                            for (int i = 0; i < NumStrings; i++)                          {                              TranslatedString Str = new TranslatedString();                              Str.LangCode = LanguageCodes.unused;                              Str.TranslatedStr = Reader.ReadCString();                                if (Strings.ContainsKey(Str.LangCode))                                  Strings[Str.LangCode].Add(Str);                              else                              {                                  List<TranslatedString> LanguageSet = new List<TranslatedString>();                                  LanguageSet.Add(Str);                                  Strings.Add(Str.LangCode' LanguageSet);                              }                          }                            break;                      case -2:                          NumStrings = Reader.ReadUShort();                            for (int i = 0; i < NumStrings; i++)                          {                              TranslatedString Str = new TranslatedString();                              Str.LangCode = LanguageCodes.unused;                              Str.TranslatedStr = Reader.ReadCString();                              Reader.ReadCString(); //Comment                                if (Strings.ContainsKey(Str.LangCode))                                  Strings[Str.LangCode].Add(Str);                              else                              {                                  List<TranslatedString> LanguageSet = new List<TranslatedString>();                                  LanguageSet.Add(Str);                                  Strings.Add(Str.LangCode' LanguageSet);                              }                          }                            break;                      case -3:                          NumStrings = Reader.ReadUShort();                            for (int i = 0; i < NumStrings; i++)                          {                              TranslatedString Str = new TranslatedString();                              Str.LangCode = (LanguageCodes)Reader.ReadByte();                              Str.TranslatedStr = Reader.ReadCString();                              Reader.ReadCString(); //Comment                                if (Strings.ContainsKey(Str.LangCode))                                  Strings[Str.LangCode].Add(Str);                              else                              {                                  List<TranslatedString> LanguageSet = new List<TranslatedString>();                                  LanguageSet.Add(Str);                                  Strings.Add(Str.LangCode' LanguageSet);                              }                          }                            break;                      case -4:                          byte LanguageSets = Reader.ReadByte();                          for (int i = 0; i < LanguageSets; i++)                          {                              NumStrings = Reader.ReadUShort();                                for (int j = 0; j < NumStrings; j++)                              {                                  TranslatedString Str = new TranslatedString();                                  Str.LangCode = (LanguageCodes)(Reader.ReadByte() + 1);                                  Str.TranslatedStr = Reader.ReadString();                                  Reader.ReadString(); //Comment                                    if (Strings.ContainsKey(Str.LangCode))                                      Strings[Str.LangCode].Add(Str);                                  else                                  {                                      List<TranslatedString> LanguageSet = new List<TranslatedString>();                                      LanguageSet.Add(Str);                                      Strings.Add(Str.LangCode' LanguageSet);                                  }                              }                          }                            break;                  }
Magic Number,Files.IFF,CST,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\IFF\CST.cs,CST,The following statement contains a magic number: (Reader.StreamLength - Reader.Position) > 2
Magic Number,Files.IFF,CTSS,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\IFF\CTSS.cs,CTSS,The following statement contains a magic number: switch (Version)                  {                      case 0:                          NumStrings = Reader.ReadUShort();                            for (int i = 0; i < NumStrings; i++)                          {                              TranslatedString Str = new TranslatedString();                              Str.LangCode = LanguageCodes.unused;                              Str.TranslatedStr = Reader.ReadPascalString();                                if (Strings.ContainsKey(Str.LangCode))                                  Strings[Str.LangCode].Add(Str);                              else                              {                                  List<TranslatedString> LanguageSet = new List<TranslatedString>();                                  LanguageSet.Add(Str);                                  Strings.Add(Str.LangCode' LanguageSet);                              }                          }                            break;                      case -1:                          NumStrings = Reader.ReadUShort();                            for (int i = 0; i < NumStrings; i++)                          {                              TranslatedString Str = new TranslatedString();                              Str.LangCode = LanguageCodes.unused;                              Str.TranslatedStr = Reader.ReadCString();                                if (Strings.ContainsKey(Str.LangCode))                                  Strings[Str.LangCode].Add(Str);                              else                              {                                  List<TranslatedString> LanguageSet = new List<TranslatedString>();                                  LanguageSet.Add(Str);                                  Strings.Add(Str.LangCode' LanguageSet);                              }                          }                            break;                      case -2:                          NumStrings = Reader.ReadUShort();                            for (int i = 0; i < NumStrings; i++)                          {                              TranslatedString Str = new TranslatedString();                              Str.LangCode = LanguageCodes.unused;                              Str.TranslatedStr = Reader.ReadCString();                              Reader.ReadCString(); //Comment                                if (Strings.ContainsKey(Str.LangCode))                                  Strings[Str.LangCode].Add(Str);                              else                              {                                  List<TranslatedString> LanguageSet = new List<TranslatedString>();                                  LanguageSet.Add(Str);                                  Strings.Add(Str.LangCode' LanguageSet);                              }                          }                            break;                      case -3:                          NumStrings = Reader.ReadUShort();                            for (int i = 0; i < NumStrings; i++)                          {                              TranslatedString Str = new TranslatedString();                              Str.LangCode = (LanguageCodes)Reader.ReadByte();                              Str.TranslatedStr = Reader.ReadCString();                              Reader.ReadCString(); //Comment                                if (Strings.ContainsKey(Str.LangCode))                                  Strings[Str.LangCode].Add(Str);                              else                              {                                  List<TranslatedString> LanguageSet = new List<TranslatedString>();                                  LanguageSet.Add(Str);                                  Strings.Add(Str.LangCode' LanguageSet);                              }                          }                            break;                      case -4:                          byte LanguageSets = Reader.ReadByte();                          for (int i = 0; i < LanguageSets; i++)                          {                              NumStrings = Reader.ReadUShort();                                for (int j = 0; j < NumStrings; j++)                              {                                  TranslatedString Str = new TranslatedString();                                  Str.LangCode = (LanguageCodes)(Reader.ReadByte() + 1);                                  Str.TranslatedStr = Reader.ReadString();                                  Reader.ReadString(); //Comment                                    if (Strings.ContainsKey(Str.LangCode))                                      Strings[Str.LangCode].Add(Str);                                  else                                  {                                      List<TranslatedString> LanguageSet = new List<TranslatedString>();                                      LanguageSet.Add(Str);                                      Strings.Add(Str.LangCode' LanguageSet);                                  }                              }                          }                            break;                  }
Magic Number,Files.IFF,CTSS,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\IFF\CTSS.cs,CTSS,The following statement contains a magic number: switch (Version)                  {                      case 0:                          NumStrings = Reader.ReadUShort();                            for (int i = 0; i < NumStrings; i++)                          {                              TranslatedString Str = new TranslatedString();                              Str.LangCode = LanguageCodes.unused;                              Str.TranslatedStr = Reader.ReadPascalString();                                if (Strings.ContainsKey(Str.LangCode))                                  Strings[Str.LangCode].Add(Str);                              else                              {                                  List<TranslatedString> LanguageSet = new List<TranslatedString>();                                  LanguageSet.Add(Str);                                  Strings.Add(Str.LangCode' LanguageSet);                              }                          }                            break;                      case -1:                          NumStrings = Reader.ReadUShort();                            for (int i = 0; i < NumStrings; i++)                          {                              TranslatedString Str = new TranslatedString();                              Str.LangCode = LanguageCodes.unused;                              Str.TranslatedStr = Reader.ReadCString();                                if (Strings.ContainsKey(Str.LangCode))                                  Strings[Str.LangCode].Add(Str);                              else                              {                                  List<TranslatedString> LanguageSet = new List<TranslatedString>();                                  LanguageSet.Add(Str);                                  Strings.Add(Str.LangCode' LanguageSet);                              }                          }                            break;                      case -2:                          NumStrings = Reader.ReadUShort();                            for (int i = 0; i < NumStrings; i++)                          {                              TranslatedString Str = new TranslatedString();                              Str.LangCode = LanguageCodes.unused;                              Str.TranslatedStr = Reader.ReadCString();                              Reader.ReadCString(); //Comment                                if (Strings.ContainsKey(Str.LangCode))                                  Strings[Str.LangCode].Add(Str);                              else                              {                                  List<TranslatedString> LanguageSet = new List<TranslatedString>();                                  LanguageSet.Add(Str);                                  Strings.Add(Str.LangCode' LanguageSet);                              }                          }                            break;                      case -3:                          NumStrings = Reader.ReadUShort();                            for (int i = 0; i < NumStrings; i++)                          {                              TranslatedString Str = new TranslatedString();                              Str.LangCode = (LanguageCodes)Reader.ReadByte();                              Str.TranslatedStr = Reader.ReadCString();                              Reader.ReadCString(); //Comment                                if (Strings.ContainsKey(Str.LangCode))                                  Strings[Str.LangCode].Add(Str);                              else                              {                                  List<TranslatedString> LanguageSet = new List<TranslatedString>();                                  LanguageSet.Add(Str);                                  Strings.Add(Str.LangCode' LanguageSet);                              }                          }                            break;                      case -4:                          byte LanguageSets = Reader.ReadByte();                          for (int i = 0; i < LanguageSets; i++)                          {                              NumStrings = Reader.ReadUShort();                                for (int j = 0; j < NumStrings; j++)                              {                                  TranslatedString Str = new TranslatedString();                                  Str.LangCode = (LanguageCodes)(Reader.ReadByte() + 1);                                  Str.TranslatedStr = Reader.ReadString();                                  Reader.ReadString(); //Comment                                    if (Strings.ContainsKey(Str.LangCode))                                      Strings[Str.LangCode].Add(Str);                                  else                                  {                                      List<TranslatedString> LanguageSet = new List<TranslatedString>();                                      LanguageSet.Add(Str);                                      Strings.Add(Str.LangCode' LanguageSet);                                  }                              }                          }                            break;                  }
Magic Number,Files.IFF,CTSS,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\IFF\CTSS.cs,CTSS,The following statement contains a magic number: switch (Version)                  {                      case 0:                          NumStrings = Reader.ReadUShort();                            for (int i = 0; i < NumStrings; i++)                          {                              TranslatedString Str = new TranslatedString();                              Str.LangCode = LanguageCodes.unused;                              Str.TranslatedStr = Reader.ReadPascalString();                                if (Strings.ContainsKey(Str.LangCode))                                  Strings[Str.LangCode].Add(Str);                              else                              {                                  List<TranslatedString> LanguageSet = new List<TranslatedString>();                                  LanguageSet.Add(Str);                                  Strings.Add(Str.LangCode' LanguageSet);                              }                          }                            break;                      case -1:                          NumStrings = Reader.ReadUShort();                            for (int i = 0; i < NumStrings; i++)                          {                              TranslatedString Str = new TranslatedString();                              Str.LangCode = LanguageCodes.unused;                              Str.TranslatedStr = Reader.ReadCString();                                if (Strings.ContainsKey(Str.LangCode))                                  Strings[Str.LangCode].Add(Str);                              else                              {                                  List<TranslatedString> LanguageSet = new List<TranslatedString>();                                  LanguageSet.Add(Str);                                  Strings.Add(Str.LangCode' LanguageSet);                              }                          }                            break;                      case -2:                          NumStrings = Reader.ReadUShort();                            for (int i = 0; i < NumStrings; i++)                          {                              TranslatedString Str = new TranslatedString();                              Str.LangCode = LanguageCodes.unused;                              Str.TranslatedStr = Reader.ReadCString();                              Reader.ReadCString(); //Comment                                if (Strings.ContainsKey(Str.LangCode))                                  Strings[Str.LangCode].Add(Str);                              else                              {                                  List<TranslatedString> LanguageSet = new List<TranslatedString>();                                  LanguageSet.Add(Str);                                  Strings.Add(Str.LangCode' LanguageSet);                              }                          }                            break;                      case -3:                          NumStrings = Reader.ReadUShort();                            for (int i = 0; i < NumStrings; i++)                          {                              TranslatedString Str = new TranslatedString();                              Str.LangCode = (LanguageCodes)Reader.ReadByte();                              Str.TranslatedStr = Reader.ReadCString();                              Reader.ReadCString(); //Comment                                if (Strings.ContainsKey(Str.LangCode))                                  Strings[Str.LangCode].Add(Str);                              else                              {                                  List<TranslatedString> LanguageSet = new List<TranslatedString>();                                  LanguageSet.Add(Str);                                  Strings.Add(Str.LangCode' LanguageSet);                              }                          }                            break;                      case -4:                          byte LanguageSets = Reader.ReadByte();                          for (int i = 0; i < LanguageSets; i++)                          {                              NumStrings = Reader.ReadUShort();                                for (int j = 0; j < NumStrings; j++)                              {                                  TranslatedString Str = new TranslatedString();                                  Str.LangCode = (LanguageCodes)(Reader.ReadByte() + 1);                                  Str.TranslatedStr = Reader.ReadString();                                  Reader.ReadString(); //Comment                                    if (Strings.ContainsKey(Str.LangCode))                                      Strings[Str.LangCode].Add(Str);                                  else                                  {                                      List<TranslatedString> LanguageSet = new List<TranslatedString>();                                      LanguageSet.Add(Str);                                      Strings.Add(Str.LangCode' LanguageSet);                                  }                              }                          }                            break;                  }
Magic Number,Files.IFF,CTSS,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\IFF\CTSS.cs,CTSS,The following statement contains a magic number: (Reader.StreamLength - Reader.Position) > 2
Magic Number,Files.IFF,DGRP,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\IFF\DGRP.cs,DGRP,The following statement contains a magic number: switch(m_Version)              {                  case 20000:                      ImageCount = Reader.ReadUShort();                      break;                  case 20001:                      ImageCount = Reader.ReadUShort();                      break;                  case 20003:                      ImageCount = Reader.ReadUInt32();                      break;                  case 20004:                      ImageCount = Reader.ReadUInt32();                      break;              }
Magic Number,Files.IFF,DGRP,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\IFF\DGRP.cs,DGRP,The following statement contains a magic number: switch(m_Version)              {                  case 20000:                      ImageCount = Reader.ReadUShort();                      break;                  case 20001:                      ImageCount = Reader.ReadUShort();                      break;                  case 20003:                      ImageCount = Reader.ReadUInt32();                      break;                  case 20004:                      ImageCount = Reader.ReadUInt32();                      break;              }
Magic Number,Files.IFF,DGRP,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\IFF\DGRP.cs,DGRP,The following statement contains a magic number: switch(m_Version)              {                  case 20000:                      ImageCount = Reader.ReadUShort();                      break;                  case 20001:                      ImageCount = Reader.ReadUShort();                      break;                  case 20003:                      ImageCount = Reader.ReadUInt32();                      break;                  case 20004:                      ImageCount = Reader.ReadUInt32();                      break;              }
Magic Number,Files.IFF,DGRP,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\IFF\DGRP.cs,DGRP,The following statement contains a magic number: switch(m_Version)              {                  case 20000:                      ImageCount = Reader.ReadUShort();                      break;                  case 20001:                      ImageCount = Reader.ReadUShort();                      break;                  case 20003:                      ImageCount = Reader.ReadUInt32();                      break;                  case 20004:                      ImageCount = Reader.ReadUInt32();                      break;              }
Magic Number,Files.IFF,DGRPImg,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\IFF\DGRP.cs,DGRPImg,The following statement contains a magic number: Version == 20000 || Version == 20001
Magic Number,Files.IFF,DGRPImg,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\IFF\DGRP.cs,DGRPImg,The following statement contains a magic number: Version == 20000 || Version == 20001
Magic Number,Files.IFF,SpriteInfo,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\IFF\DGRP.cs,SpriteInfo,The following statement contains a magic number: Version == 20000 || Version == 20001
Magic Number,Files.IFF,SpriteInfo,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\IFF\DGRP.cs,SpriteInfo,The following statement contains a magic number: Version == 20000 || Version == 20001
Magic Number,Files.IFF,IFFChunk,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\IFF\IFFChunk.cs,ReadHeader,The following statement contains a magic number: Type = (IFFChunkTypes)Enum.Parse(typeof(IFFChunkTypes)' Reader.ReadString(4).Replace("#"' "").Replace("\0"' ""));
Magic Number,Files.IFF,IFFChunk,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\IFF\IFFChunk.cs,ReadHeader,The following statement contains a magic number: Reader.ReadBytes(64);
Magic Number,Files.IFF,IFFChunk,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\IFF\IFFChunk.cs,ReadHeader,The following statement contains a magic number: m_Data = Reader.ReadBytes((int)(Size - 76));
Magic Number,Files.IFF,Iff,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\IFF\Iff.cs,Init,The following statement contains a magic number: string MagicNumber = m_Reader.ReadString(60);
Magic Number,Files.IFF,Iff,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\IFF\Iff.cs,Init,The following statement contains a magic number: (m_Reader.StreamLength - m_Reader.Position) > 76
Magic Number,Files.IFF,OBJD,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\IFF\OBJD.cs,OBJD,The following statement contains a magic number: switch(Version)              {                  case 136:                      m_NumFields = 80;                      break;                  case 138:                      m_NumFields = 95;                      break;                  case 139:                      m_NumFields = 96;                      break;                  case 140:                      m_NumFields = 97;                      break;                  case 141:                      m_NumFields = 97;                      break;                  case 142:                      m_NumFields = 105;                      break;              }
Magic Number,Files.IFF,OBJD,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\IFF\OBJD.cs,OBJD,The following statement contains a magic number: switch(Version)              {                  case 136:                      m_NumFields = 80;                      break;                  case 138:                      m_NumFields = 95;                      break;                  case 139:                      m_NumFields = 96;                      break;                  case 140:                      m_NumFields = 97;                      break;                  case 141:                      m_NumFields = 97;                      break;                  case 142:                      m_NumFields = 105;                      break;              }
Magic Number,Files.IFF,OBJD,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\IFF\OBJD.cs,OBJD,The following statement contains a magic number: switch(Version)              {                  case 136:                      m_NumFields = 80;                      break;                  case 138:                      m_NumFields = 95;                      break;                  case 139:                      m_NumFields = 96;                      break;                  case 140:                      m_NumFields = 97;                      break;                  case 141:                      m_NumFields = 97;                      break;                  case 142:                      m_NumFields = 105;                      break;              }
Magic Number,Files.IFF,OBJD,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\IFF\OBJD.cs,OBJD,The following statement contains a magic number: switch(Version)              {                  case 136:                      m_NumFields = 80;                      break;                  case 138:                      m_NumFields = 95;                      break;                  case 139:                      m_NumFields = 96;                      break;                  case 140:                      m_NumFields = 97;                      break;                  case 141:                      m_NumFields = 97;                      break;                  case 142:                      m_NumFields = 105;                      break;              }
Magic Number,Files.IFF,OBJD,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\IFF\OBJD.cs,OBJD,The following statement contains a magic number: switch(Version)              {                  case 136:                      m_NumFields = 80;                      break;                  case 138:                      m_NumFields = 95;                      break;                  case 139:                      m_NumFields = 96;                      break;                  case 140:                      m_NumFields = 97;                      break;                  case 141:                      m_NumFields = 97;                      break;                  case 142:                      m_NumFields = 105;                      break;              }
Magic Number,Files.IFF,OBJD,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\IFF\OBJD.cs,OBJD,The following statement contains a magic number: switch(Version)              {                  case 136:                      m_NumFields = 80;                      break;                  case 138:                      m_NumFields = 95;                      break;                  case 139:                      m_NumFields = 96;                      break;                  case 140:                      m_NumFields = 97;                      break;                  case 141:                      m_NumFields = 97;                      break;                  case 142:                      m_NumFields = 105;                      break;              }
Magic Number,Files.IFF,OBJD,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\IFF\OBJD.cs,OBJD,The following statement contains a magic number: switch(Version)              {                  case 136:                      m_NumFields = 80;                      break;                  case 138:                      m_NumFields = 95;                      break;                  case 139:                      m_NumFields = 96;                      break;                  case 140:                      m_NumFields = 97;                      break;                  case 141:                      m_NumFields = 97;                      break;                  case 142:                      m_NumFields = 105;                      break;              }
Magic Number,Files.IFF,OBJD,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\IFF\OBJD.cs,OBJD,The following statement contains a magic number: switch(Version)              {                  case 136:                      m_NumFields = 80;                      break;                  case 138:                      m_NumFields = 95;                      break;                  case 139:                      m_NumFields = 96;                      break;                  case 140:                      m_NumFields = 97;                      break;                  case 141:                      m_NumFields = 97;                      break;                  case 142:                      m_NumFields = 105;                      break;              }
Magic Number,Files.IFF,OBJD,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\IFF\OBJD.cs,OBJD,The following statement contains a magic number: switch(Version)              {                  case 136:                      m_NumFields = 80;                      break;                  case 138:                      m_NumFields = 95;                      break;                  case 139:                      m_NumFields = 96;                      break;                  case 140:                      m_NumFields = 97;                      break;                  case 141:                      m_NumFields = 97;                      break;                  case 142:                      m_NumFields = 105;                      break;              }
Magic Number,Files.IFF,OBJD,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\IFF\OBJD.cs,OBJD,The following statement contains a magic number: switch(Version)              {                  case 136:                      m_NumFields = 80;                      break;                  case 138:                      m_NumFields = 95;                      break;                  case 139:                      m_NumFields = 96;                      break;                  case 140:                      m_NumFields = 97;                      break;                  case 141:                      m_NumFields = 97;                      break;                  case 142:                      m_NumFields = 105;                      break;              }
Magic Number,Files.IFF,OBJD,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\IFF\OBJD.cs,OBJD,The following statement contains a magic number: switch(Version)              {                  case 136:                      m_NumFields = 80;                      break;                  case 138:                      m_NumFields = 95;                      break;                  case 139:                      m_NumFields = 96;                      break;                  case 140:                      m_NumFields = 97;                      break;                  case 141:                      m_NumFields = 97;                      break;                  case 142:                      m_NumFields = 105;                      break;              }
Magic Number,Files.IFF,OBJD,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\IFF\OBJD.cs,OBJD,The following statement contains a magic number: switch(Version)              {                  case 136:                      m_NumFields = 80;                      break;                  case 138:                      m_NumFields = 95;                      break;                  case 139:                      m_NumFields = 96;                      break;                  case 140:                      m_NumFields = 97;                      break;                  case 141:                      m_NumFields = 97;                      break;                  case 142:                      m_NumFields = 105;                      break;              }
Magic Number,Files.IFF,OBJD,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\IFF\OBJD.cs,OBJD,The following statement contains a magic number: m_NumFields > 80
Magic Number,Files.IFF,OBJf,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\IFF\OBJf.cs,OBJf,The following statement contains a magic number: Reader.ReadBytes(4);
Magic Number,Files.IFF,OBJf,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\IFF\OBJf.cs,OBJf,The following statement contains a magic number: Reader.ReadBytes(4);
Magic Number,Files.IFF,OBJf,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\IFF\OBJf.cs,OBJf,The following statement contains a magic number: Reader.ReadBytes(4);
Magic Number,Files.IFF,PALT,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\IFF\PALT.cs,PALT,The following statement contains a magic number: Reader.ReadBytes(8);
Magic Number,Files.IFF,SPR,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\IFF\SPR.cs,SPR,The following statement contains a magic number: Version >= 502 && Version <= 505
Magic Number,Files.IFF,SPR,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\IFF\SPR.cs,SPR,The following statement contains a magic number: Version >= 502 && Version <= 505
Magic Number,Files.IFF,SPRFrame,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\IFF\SPR.cs,SPRFrame,The following statement contains a magic number: Version == 1001
Magic Number,Files.IFF,SPR2,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\IFF\SPR2.cs,SPR2,The following statement contains a magic number: Version == 1000
Magic Number,Files.IFF,SPR2Frame,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\IFF\SPR2.cs,SPR2Frame,The following statement contains a magic number: SpriteVersion == 1001
Magic Number,Files.IFF,SPR2Frame,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\IFF\SPR2.cs,SPR2Frame,The following statement contains a magic number: var Command = Marker >> 13;
Magic Number,Files.IFF,SPR2Frame,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\IFF\SPR2.cs,SPR2Frame,The following statement contains a magic number: switch(Command)                  {                      //Fill this row with pixel data that directly follows; the count byte of the row command denotes                       //the size in bytes of the row's command/count bytes together with the supplied pixel data. In                       //the pixel data' each pixel command consists of a 3-bit/13-bit command/count header followed by a                       //block of pixel data padded to a multiple of 2 bytes. If the row is not filled completely' the                       //remainder is transparent. The pixel commands are:                      case 0x00:                          for(int i = 0; i < Count; i++)                          {                              ushort PxMarker = Reader.ReadUShort();                              var PxCommand = PxMarker >> 13;                              var PxCount = PxMarker & 0x1FFF;                                Color[] Colors;                                switch(PxCommand)                              {                                  //Set the next pixel count pixels in the z-buffer and color channels to the values defined                                   //by the pixel data provided directly after this command. Every group of 2 bytes in the pixel                                   //data provides a luminosity (z-buffer) or color index (color) value to be copied to the row                                   //for the z-buffer channel and color channel' respectively' in that order' using the full                                   //opacity value of 255 for each pixel that is not the transparent color.                                  case 0x01:                                      Colors = new Color[PxCount];                                        for(int j = 0; j < PxCount; j++)                                      {                                          byte Luminosity = Reader.ReadByte();                                          byte ColorIndex = Reader.ReadByte();                                          Colors[j] = Palette[ColorIndex];                                          ZBuffer[j] = Luminosity;                                      }                                      Texture.SetData<Color>(Colors' 0' Colors.Length);                                      break;                                      //Set the next pixel count pixels in the z-buffer' color' and alpha channels to the values                                       //defined by the pixel data provided directly after this command. Every group of 3 bytes in                                       //the pixel data' minus the padding byte at the very end (if it exists)' provides a luminosity                                       //(z-buffer and alpha) or color index (color) value to be copied to the row for the z-buffer'                                       //color' and alpha channels' respectively' in that order. The alpha channel data is grayscale                                       //in the range 0-31' and the z buffer is in range 0-255.                                  case 0x02:                                      Colors = new Color[PxCount];                                        for (int j = 0; j < PxCount; j++)                                      {                                          byte Luminosity = Reader.ReadByte();                                          byte ColorIndex = Reader.ReadByte();                                          byte Alpha = (byte)(Reader.ReadByte() * 8.2258064516129032258064516129032);                                          Colors[j] = Palette[ColorIndex];                                          Colors[j].A = Alpha;                                          ZBuffer[j] = Luminosity;                                      }                                      Texture.SetData<Color>(Colors' 0' Colors.Length);                                      break;                                  //Leave the next pixel count pixels in the color channel filled with the transparent color'                                   //in the z-buffer channel filled with 255' and in the alpha channel filled with 0. This pixel                                   //command has no pixel data.                                  case 0x03:                                      Colors = new Color[PxCount];                                        for (int j = 0; j < PxCount; j++)                                      {                                          Colors[j] = Color.Transparent;                                          Colors[j].A = 0;                                          ZBuffer[j] = 255;                                      }                                      Texture.SetData<Color>(Colors' 0' Colors.Length);                                      break;                                  //Set the next pixel count pixels in the color channel to the palette color indices defined by                                   //the pixel data provided directly after this command.Every byte in the pixel data' minus the                                   //padding byte at the very end(if it exists)' provides a color index value to be copied to the                                   //row for the color channel using the full opacity value of 255 and the closest z-buffer value                                   //of 0 if the pixel is not the transparent color' or otherwise the no opacity value of 0 and the                                   //farthest z-buffer value of 255.                                  case 0x06:                                      Colors = new Color[PxCount];                                        for (int j = 0; j < PxCount; j++)                                      {                                          byte ColorIndex = Reader.ReadByte();                                          Colors[j] = Palette[ColorIndex];                                            Colors[j].A = (Palette[ColorIndex] != Color.Transparent) ? (byte)255 : (byte)0;                                          ZBuffer[j] = (Palette[ColorIndex] != Color.Transparent) ? (byte)0 : (byte)255;                                      }                                      Texture.SetData<Color>(Colors' 0' Colors.Length);                                      break;                              }                          }                          break;                      //Leave the next count rows in the color channel filled with the transparent color'                       //in the z-buffer channel filled with 255' and in the alpha channel filled with 0.                      case 0x04:                          for (int j = 0; j < Count; j++)                          {                              Color[] Colors = new Color[Width];                                for (int k = 0; k < Width; k++)                              {                                  Colors[k] = Color.Transparent;                                  Colors[k].A = 0;                                  ZBuffer[k] = 255;                              }                                Texture.SetData<Color>(Colors' 0' Colors.Length);                          }                          break;                      case 0x05:                          EndMarker = true;                          break;                  }
Magic Number,Files.IFF,SPR2Frame,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\IFF\SPR2.cs,SPR2Frame,The following statement contains a magic number: switch(Command)                  {                      //Fill this row with pixel data that directly follows; the count byte of the row command denotes                       //the size in bytes of the row's command/count bytes together with the supplied pixel data. In                       //the pixel data' each pixel command consists of a 3-bit/13-bit command/count header followed by a                       //block of pixel data padded to a multiple of 2 bytes. If the row is not filled completely' the                       //remainder is transparent. The pixel commands are:                      case 0x00:                          for(int i = 0; i < Count; i++)                          {                              ushort PxMarker = Reader.ReadUShort();                              var PxCommand = PxMarker >> 13;                              var PxCount = PxMarker & 0x1FFF;                                Color[] Colors;                                switch(PxCommand)                              {                                  //Set the next pixel count pixels in the z-buffer and color channels to the values defined                                   //by the pixel data provided directly after this command. Every group of 2 bytes in the pixel                                   //data provides a luminosity (z-buffer) or color index (color) value to be copied to the row                                   //for the z-buffer channel and color channel' respectively' in that order' using the full                                   //opacity value of 255 for each pixel that is not the transparent color.                                  case 0x01:                                      Colors = new Color[PxCount];                                        for(int j = 0; j < PxCount; j++)                                      {                                          byte Luminosity = Reader.ReadByte();                                          byte ColorIndex = Reader.ReadByte();                                          Colors[j] = Palette[ColorIndex];                                          ZBuffer[j] = Luminosity;                                      }                                      Texture.SetData<Color>(Colors' 0' Colors.Length);                                      break;                                      //Set the next pixel count pixels in the z-buffer' color' and alpha channels to the values                                       //defined by the pixel data provided directly after this command. Every group of 3 bytes in                                       //the pixel data' minus the padding byte at the very end (if it exists)' provides a luminosity                                       //(z-buffer and alpha) or color index (color) value to be copied to the row for the z-buffer'                                       //color' and alpha channels' respectively' in that order. The alpha channel data is grayscale                                       //in the range 0-31' and the z buffer is in range 0-255.                                  case 0x02:                                      Colors = new Color[PxCount];                                        for (int j = 0; j < PxCount; j++)                                      {                                          byte Luminosity = Reader.ReadByte();                                          byte ColorIndex = Reader.ReadByte();                                          byte Alpha = (byte)(Reader.ReadByte() * 8.2258064516129032258064516129032);                                          Colors[j] = Palette[ColorIndex];                                          Colors[j].A = Alpha;                                          ZBuffer[j] = Luminosity;                                      }                                      Texture.SetData<Color>(Colors' 0' Colors.Length);                                      break;                                  //Leave the next pixel count pixels in the color channel filled with the transparent color'                                   //in the z-buffer channel filled with 255' and in the alpha channel filled with 0. This pixel                                   //command has no pixel data.                                  case 0x03:                                      Colors = new Color[PxCount];                                        for (int j = 0; j < PxCount; j++)                                      {                                          Colors[j] = Color.Transparent;                                          Colors[j].A = 0;                                          ZBuffer[j] = 255;                                      }                                      Texture.SetData<Color>(Colors' 0' Colors.Length);                                      break;                                  //Set the next pixel count pixels in the color channel to the palette color indices defined by                                   //the pixel data provided directly after this command.Every byte in the pixel data' minus the                                   //padding byte at the very end(if it exists)' provides a color index value to be copied to the                                   //row for the color channel using the full opacity value of 255 and the closest z-buffer value                                   //of 0 if the pixel is not the transparent color' or otherwise the no opacity value of 0 and the                                   //farthest z-buffer value of 255.                                  case 0x06:                                      Colors = new Color[PxCount];                                        for (int j = 0; j < PxCount; j++)                                      {                                          byte ColorIndex = Reader.ReadByte();                                          Colors[j] = Palette[ColorIndex];                                            Colors[j].A = (Palette[ColorIndex] != Color.Transparent) ? (byte)255 : (byte)0;                                          ZBuffer[j] = (Palette[ColorIndex] != Color.Transparent) ? (byte)0 : (byte)255;                                      }                                      Texture.SetData<Color>(Colors' 0' Colors.Length);                                      break;                              }                          }                          break;                      //Leave the next count rows in the color channel filled with the transparent color'                       //in the z-buffer channel filled with 255' and in the alpha channel filled with 0.                      case 0x04:                          for (int j = 0; j < Count; j++)                          {                              Color[] Colors = new Color[Width];                                for (int k = 0; k < Width; k++)                              {                                  Colors[k] = Color.Transparent;                                  Colors[k].A = 0;                                  ZBuffer[k] = 255;                              }                                Texture.SetData<Color>(Colors' 0' Colors.Length);                          }                          break;                      case 0x05:                          EndMarker = true;                          break;                  }
Magic Number,Files.IFF,SPR2Frame,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\IFF\SPR2.cs,SPR2Frame,The following statement contains a magic number: switch(Command)                  {                      //Fill this row with pixel data that directly follows; the count byte of the row command denotes                       //the size in bytes of the row's command/count bytes together with the supplied pixel data. In                       //the pixel data' each pixel command consists of a 3-bit/13-bit command/count header followed by a                       //block of pixel data padded to a multiple of 2 bytes. If the row is not filled completely' the                       //remainder is transparent. The pixel commands are:                      case 0x00:                          for(int i = 0; i < Count; i++)                          {                              ushort PxMarker = Reader.ReadUShort();                              var PxCommand = PxMarker >> 13;                              var PxCount = PxMarker & 0x1FFF;                                Color[] Colors;                                switch(PxCommand)                              {                                  //Set the next pixel count pixels in the z-buffer and color channels to the values defined                                   //by the pixel data provided directly after this command. Every group of 2 bytes in the pixel                                   //data provides a luminosity (z-buffer) or color index (color) value to be copied to the row                                   //for the z-buffer channel and color channel' respectively' in that order' using the full                                   //opacity value of 255 for each pixel that is not the transparent color.                                  case 0x01:                                      Colors = new Color[PxCount];                                        for(int j = 0; j < PxCount; j++)                                      {                                          byte Luminosity = Reader.ReadByte();                                          byte ColorIndex = Reader.ReadByte();                                          Colors[j] = Palette[ColorIndex];                                          ZBuffer[j] = Luminosity;                                      }                                      Texture.SetData<Color>(Colors' 0' Colors.Length);                                      break;                                      //Set the next pixel count pixels in the z-buffer' color' and alpha channels to the values                                       //defined by the pixel data provided directly after this command. Every group of 3 bytes in                                       //the pixel data' minus the padding byte at the very end (if it exists)' provides a luminosity                                       //(z-buffer and alpha) or color index (color) value to be copied to the row for the z-buffer'                                       //color' and alpha channels' respectively' in that order. The alpha channel data is grayscale                                       //in the range 0-31' and the z buffer is in range 0-255.                                  case 0x02:                                      Colors = new Color[PxCount];                                        for (int j = 0; j < PxCount; j++)                                      {                                          byte Luminosity = Reader.ReadByte();                                          byte ColorIndex = Reader.ReadByte();                                          byte Alpha = (byte)(Reader.ReadByte() * 8.2258064516129032258064516129032);                                          Colors[j] = Palette[ColorIndex];                                          Colors[j].A = Alpha;                                          ZBuffer[j] = Luminosity;                                      }                                      Texture.SetData<Color>(Colors' 0' Colors.Length);                                      break;                                  //Leave the next pixel count pixels in the color channel filled with the transparent color'                                   //in the z-buffer channel filled with 255' and in the alpha channel filled with 0. This pixel                                   //command has no pixel data.                                  case 0x03:                                      Colors = new Color[PxCount];                                        for (int j = 0; j < PxCount; j++)                                      {                                          Colors[j] = Color.Transparent;                                          Colors[j].A = 0;                                          ZBuffer[j] = 255;                                      }                                      Texture.SetData<Color>(Colors' 0' Colors.Length);                                      break;                                  //Set the next pixel count pixels in the color channel to the palette color indices defined by                                   //the pixel data provided directly after this command.Every byte in the pixel data' minus the                                   //padding byte at the very end(if it exists)' provides a color index value to be copied to the                                   //row for the color channel using the full opacity value of 255 and the closest z-buffer value                                   //of 0 if the pixel is not the transparent color' or otherwise the no opacity value of 0 and the                                   //farthest z-buffer value of 255.                                  case 0x06:                                      Colors = new Color[PxCount];                                        for (int j = 0; j < PxCount; j++)                                      {                                          byte ColorIndex = Reader.ReadByte();                                          Colors[j] = Palette[ColorIndex];                                            Colors[j].A = (Palette[ColorIndex] != Color.Transparent) ? (byte)255 : (byte)0;                                          ZBuffer[j] = (Palette[ColorIndex] != Color.Transparent) ? (byte)0 : (byte)255;                                      }                                      Texture.SetData<Color>(Colors' 0' Colors.Length);                                      break;                              }                          }                          break;                      //Leave the next count rows in the color channel filled with the transparent color'                       //in the z-buffer channel filled with 255' and in the alpha channel filled with 0.                      case 0x04:                          for (int j = 0; j < Count; j++)                          {                              Color[] Colors = new Color[Width];                                for (int k = 0; k < Width; k++)                              {                                  Colors[k] = Color.Transparent;                                  Colors[k].A = 0;                                  ZBuffer[k] = 255;                              }                                Texture.SetData<Color>(Colors' 0' Colors.Length);                          }                          break;                      case 0x05:                          EndMarker = true;                          break;                  }
Magic Number,Files.IFF,SPR2Frame,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\IFF\SPR2.cs,SPR2Frame,The following statement contains a magic number: switch(Command)                  {                      //Fill this row with pixel data that directly follows; the count byte of the row command denotes                       //the size in bytes of the row's command/count bytes together with the supplied pixel data. In                       //the pixel data' each pixel command consists of a 3-bit/13-bit command/count header followed by a                       //block of pixel data padded to a multiple of 2 bytes. If the row is not filled completely' the                       //remainder is transparent. The pixel commands are:                      case 0x00:                          for(int i = 0; i < Count; i++)                          {                              ushort PxMarker = Reader.ReadUShort();                              var PxCommand = PxMarker >> 13;                              var PxCount = PxMarker & 0x1FFF;                                Color[] Colors;                                switch(PxCommand)                              {                                  //Set the next pixel count pixels in the z-buffer and color channels to the values defined                                   //by the pixel data provided directly after this command. Every group of 2 bytes in the pixel                                   //data provides a luminosity (z-buffer) or color index (color) value to be copied to the row                                   //for the z-buffer channel and color channel' respectively' in that order' using the full                                   //opacity value of 255 for each pixel that is not the transparent color.                                  case 0x01:                                      Colors = new Color[PxCount];                                        for(int j = 0; j < PxCount; j++)                                      {                                          byte Luminosity = Reader.ReadByte();                                          byte ColorIndex = Reader.ReadByte();                                          Colors[j] = Palette[ColorIndex];                                          ZBuffer[j] = Luminosity;                                      }                                      Texture.SetData<Color>(Colors' 0' Colors.Length);                                      break;                                      //Set the next pixel count pixels in the z-buffer' color' and alpha channels to the values                                       //defined by the pixel data provided directly after this command. Every group of 3 bytes in                                       //the pixel data' minus the padding byte at the very end (if it exists)' provides a luminosity                                       //(z-buffer and alpha) or color index (color) value to be copied to the row for the z-buffer'                                       //color' and alpha channels' respectively' in that order. The alpha channel data is grayscale                                       //in the range 0-31' and the z buffer is in range 0-255.                                  case 0x02:                                      Colors = new Color[PxCount];                                        for (int j = 0; j < PxCount; j++)                                      {                                          byte Luminosity = Reader.ReadByte();                                          byte ColorIndex = Reader.ReadByte();                                          byte Alpha = (byte)(Reader.ReadByte() * 8.2258064516129032258064516129032);                                          Colors[j] = Palette[ColorIndex];                                          Colors[j].A = Alpha;                                          ZBuffer[j] = Luminosity;                                      }                                      Texture.SetData<Color>(Colors' 0' Colors.Length);                                      break;                                  //Leave the next pixel count pixels in the color channel filled with the transparent color'                                   //in the z-buffer channel filled with 255' and in the alpha channel filled with 0. This pixel                                   //command has no pixel data.                                  case 0x03:                                      Colors = new Color[PxCount];                                        for (int j = 0; j < PxCount; j++)                                      {                                          Colors[j] = Color.Transparent;                                          Colors[j].A = 0;                                          ZBuffer[j] = 255;                                      }                                      Texture.SetData<Color>(Colors' 0' Colors.Length);                                      break;                                  //Set the next pixel count pixels in the color channel to the palette color indices defined by                                   //the pixel data provided directly after this command.Every byte in the pixel data' minus the                                   //padding byte at the very end(if it exists)' provides a color index value to be copied to the                                   //row for the color channel using the full opacity value of 255 and the closest z-buffer value                                   //of 0 if the pixel is not the transparent color' or otherwise the no opacity value of 0 and the                                   //farthest z-buffer value of 255.                                  case 0x06:                                      Colors = new Color[PxCount];                                        for (int j = 0; j < PxCount; j++)                                      {                                          byte ColorIndex = Reader.ReadByte();                                          Colors[j] = Palette[ColorIndex];                                            Colors[j].A = (Palette[ColorIndex] != Color.Transparent) ? (byte)255 : (byte)0;                                          ZBuffer[j] = (Palette[ColorIndex] != Color.Transparent) ? (byte)0 : (byte)255;                                      }                                      Texture.SetData<Color>(Colors' 0' Colors.Length);                                      break;                              }                          }                          break;                      //Leave the next count rows in the color channel filled with the transparent color'                       //in the z-buffer channel filled with 255' and in the alpha channel filled with 0.                      case 0x04:                          for (int j = 0; j < Count; j++)                          {                              Color[] Colors = new Color[Width];                                for (int k = 0; k < Width; k++)                              {                                  Colors[k] = Color.Transparent;                                  Colors[k].A = 0;                                  ZBuffer[k] = 255;                              }                                Texture.SetData<Color>(Colors' 0' Colors.Length);                          }                          break;                      case 0x05:                          EndMarker = true;                          break;                  }
Magic Number,Files.IFF,SPR2Frame,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\IFF\SPR2.cs,SPR2Frame,The following statement contains a magic number: switch(Command)                  {                      //Fill this row with pixel data that directly follows; the count byte of the row command denotes                       //the size in bytes of the row's command/count bytes together with the supplied pixel data. In                       //the pixel data' each pixel command consists of a 3-bit/13-bit command/count header followed by a                       //block of pixel data padded to a multiple of 2 bytes. If the row is not filled completely' the                       //remainder is transparent. The pixel commands are:                      case 0x00:                          for(int i = 0; i < Count; i++)                          {                              ushort PxMarker = Reader.ReadUShort();                              var PxCommand = PxMarker >> 13;                              var PxCount = PxMarker & 0x1FFF;                                Color[] Colors;                                switch(PxCommand)                              {                                  //Set the next pixel count pixels in the z-buffer and color channels to the values defined                                   //by the pixel data provided directly after this command. Every group of 2 bytes in the pixel                                   //data provides a luminosity (z-buffer) or color index (color) value to be copied to the row                                   //for the z-buffer channel and color channel' respectively' in that order' using the full                                   //opacity value of 255 for each pixel that is not the transparent color.                                  case 0x01:                                      Colors = new Color[PxCount];                                        for(int j = 0; j < PxCount; j++)                                      {                                          byte Luminosity = Reader.ReadByte();                                          byte ColorIndex = Reader.ReadByte();                                          Colors[j] = Palette[ColorIndex];                                          ZBuffer[j] = Luminosity;                                      }                                      Texture.SetData<Color>(Colors' 0' Colors.Length);                                      break;                                      //Set the next pixel count pixels in the z-buffer' color' and alpha channels to the values                                       //defined by the pixel data provided directly after this command. Every group of 3 bytes in                                       //the pixel data' minus the padding byte at the very end (if it exists)' provides a luminosity                                       //(z-buffer and alpha) or color index (color) value to be copied to the row for the z-buffer'                                       //color' and alpha channels' respectively' in that order. The alpha channel data is grayscale                                       //in the range 0-31' and the z buffer is in range 0-255.                                  case 0x02:                                      Colors = new Color[PxCount];                                        for (int j = 0; j < PxCount; j++)                                      {                                          byte Luminosity = Reader.ReadByte();                                          byte ColorIndex = Reader.ReadByte();                                          byte Alpha = (byte)(Reader.ReadByte() * 8.2258064516129032258064516129032);                                          Colors[j] = Palette[ColorIndex];                                          Colors[j].A = Alpha;                                          ZBuffer[j] = Luminosity;                                      }                                      Texture.SetData<Color>(Colors' 0' Colors.Length);                                      break;                                  //Leave the next pixel count pixels in the color channel filled with the transparent color'                                   //in the z-buffer channel filled with 255' and in the alpha channel filled with 0. This pixel                                   //command has no pixel data.                                  case 0x03:                                      Colors = new Color[PxCount];                                        for (int j = 0; j < PxCount; j++)                                      {                                          Colors[j] = Color.Transparent;                                          Colors[j].A = 0;                                          ZBuffer[j] = 255;                                      }                                      Texture.SetData<Color>(Colors' 0' Colors.Length);                                      break;                                  //Set the next pixel count pixels in the color channel to the palette color indices defined by                                   //the pixel data provided directly after this command.Every byte in the pixel data' minus the                                   //padding byte at the very end(if it exists)' provides a color index value to be copied to the                                   //row for the color channel using the full opacity value of 255 and the closest z-buffer value                                   //of 0 if the pixel is not the transparent color' or otherwise the no opacity value of 0 and the                                   //farthest z-buffer value of 255.                                  case 0x06:                                      Colors = new Color[PxCount];                                        for (int j = 0; j < PxCount; j++)                                      {                                          byte ColorIndex = Reader.ReadByte();                                          Colors[j] = Palette[ColorIndex];                                            Colors[j].A = (Palette[ColorIndex] != Color.Transparent) ? (byte)255 : (byte)0;                                          ZBuffer[j] = (Palette[ColorIndex] != Color.Transparent) ? (byte)0 : (byte)255;                                      }                                      Texture.SetData<Color>(Colors' 0' Colors.Length);                                      break;                              }                          }                          break;                      //Leave the next count rows in the color channel filled with the transparent color'                       //in the z-buffer channel filled with 255' and in the alpha channel filled with 0.                      case 0x04:                          for (int j = 0; j < Count; j++)                          {                              Color[] Colors = new Color[Width];                                for (int k = 0; k < Width; k++)                              {                                  Colors[k] = Color.Transparent;                                  Colors[k].A = 0;                                  ZBuffer[k] = 255;                              }                                Texture.SetData<Color>(Colors' 0' Colors.Length);                          }                          break;                      case 0x05:                          EndMarker = true;                          break;                  }
Magic Number,Files.IFF,SPR2Frame,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\IFF\SPR2.cs,SPR2Frame,The following statement contains a magic number: switch(Command)                  {                      //Fill this row with pixel data that directly follows; the count byte of the row command denotes                       //the size in bytes of the row's command/count bytes together with the supplied pixel data. In                       //the pixel data' each pixel command consists of a 3-bit/13-bit command/count header followed by a                       //block of pixel data padded to a multiple of 2 bytes. If the row is not filled completely' the                       //remainder is transparent. The pixel commands are:                      case 0x00:                          for(int i = 0; i < Count; i++)                          {                              ushort PxMarker = Reader.ReadUShort();                              var PxCommand = PxMarker >> 13;                              var PxCount = PxMarker & 0x1FFF;                                Color[] Colors;                                switch(PxCommand)                              {                                  //Set the next pixel count pixels in the z-buffer and color channels to the values defined                                   //by the pixel data provided directly after this command. Every group of 2 bytes in the pixel                                   //data provides a luminosity (z-buffer) or color index (color) value to be copied to the row                                   //for the z-buffer channel and color channel' respectively' in that order' using the full                                   //opacity value of 255 for each pixel that is not the transparent color.                                  case 0x01:                                      Colors = new Color[PxCount];                                        for(int j = 0; j < PxCount; j++)                                      {                                          byte Luminosity = Reader.ReadByte();                                          byte ColorIndex = Reader.ReadByte();                                          Colors[j] = Palette[ColorIndex];                                          ZBuffer[j] = Luminosity;                                      }                                      Texture.SetData<Color>(Colors' 0' Colors.Length);                                      break;                                      //Set the next pixel count pixels in the z-buffer' color' and alpha channels to the values                                       //defined by the pixel data provided directly after this command. Every group of 3 bytes in                                       //the pixel data' minus the padding byte at the very end (if it exists)' provides a luminosity                                       //(z-buffer and alpha) or color index (color) value to be copied to the row for the z-buffer'                                       //color' and alpha channels' respectively' in that order. The alpha channel data is grayscale                                       //in the range 0-31' and the z buffer is in range 0-255.                                  case 0x02:                                      Colors = new Color[PxCount];                                        for (int j = 0; j < PxCount; j++)                                      {                                          byte Luminosity = Reader.ReadByte();                                          byte ColorIndex = Reader.ReadByte();                                          byte Alpha = (byte)(Reader.ReadByte() * 8.2258064516129032258064516129032);                                          Colors[j] = Palette[ColorIndex];                                          Colors[j].A = Alpha;                                          ZBuffer[j] = Luminosity;                                      }                                      Texture.SetData<Color>(Colors' 0' Colors.Length);                                      break;                                  //Leave the next pixel count pixels in the color channel filled with the transparent color'                                   //in the z-buffer channel filled with 255' and in the alpha channel filled with 0. This pixel                                   //command has no pixel data.                                  case 0x03:                                      Colors = new Color[PxCount];                                        for (int j = 0; j < PxCount; j++)                                      {                                          Colors[j] = Color.Transparent;                                          Colors[j].A = 0;                                          ZBuffer[j] = 255;                                      }                                      Texture.SetData<Color>(Colors' 0' Colors.Length);                                      break;                                  //Set the next pixel count pixels in the color channel to the palette color indices defined by                                   //the pixel data provided directly after this command.Every byte in the pixel data' minus the                                   //padding byte at the very end(if it exists)' provides a color index value to be copied to the                                   //row for the color channel using the full opacity value of 255 and the closest z-buffer value                                   //of 0 if the pixel is not the transparent color' or otherwise the no opacity value of 0 and the                                   //farthest z-buffer value of 255.                                  case 0x06:                                      Colors = new Color[PxCount];                                        for (int j = 0; j < PxCount; j++)                                      {                                          byte ColorIndex = Reader.ReadByte();                                          Colors[j] = Palette[ColorIndex];                                            Colors[j].A = (Palette[ColorIndex] != Color.Transparent) ? (byte)255 : (byte)0;                                          ZBuffer[j] = (Palette[ColorIndex] != Color.Transparent) ? (byte)0 : (byte)255;                                      }                                      Texture.SetData<Color>(Colors' 0' Colors.Length);                                      break;                              }                          }                          break;                      //Leave the next count rows in the color channel filled with the transparent color'                       //in the z-buffer channel filled with 255' and in the alpha channel filled with 0.                      case 0x04:                          for (int j = 0; j < Count; j++)                          {                              Color[] Colors = new Color[Width];                                for (int k = 0; k < Width; k++)                              {                                  Colors[k] = Color.Transparent;                                  Colors[k].A = 0;                                  ZBuffer[k] = 255;                              }                                Texture.SetData<Color>(Colors' 0' Colors.Length);                          }                          break;                      case 0x05:                          EndMarker = true;                          break;                  }
Magic Number,Files.IFF,STR,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\IFF\STR.cs,STR,The following statement contains a magic number: FileReader Reader = new FileReader(new MemoryStream(m_Data)' false' Encoding.GetEncoding(1252));
Magic Number,Files.IFF,STR,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\IFF\STR.cs,STR,The following statement contains a magic number: switch(Version)                  {                      case 0:                          NumStrings = Reader.ReadUShort();                            for (int i = 0; i < NumStrings; i++)                          {                              TranslatedString Str = new TranslatedString();                              Str.LangCode = LanguageCodes.unused;                              Str.TranslatedStr = Reader.ReadPascalString();                                if (Strings.ContainsKey(Str.LangCode))                                  Strings[Str.LangCode].Add(Str);                              else                              {                                  List<TranslatedString> LanguageSet = new List<TranslatedString>();                                  LanguageSet.Add(Str);                                  Strings.Add(Str.LangCode' LanguageSet);                              }                          }                            break;                      case -1:                          NumStrings = Reader.ReadUShort();                            for (int i = 0; i < NumStrings; i++)                          {                              TranslatedString Str = new TranslatedString();                              Str.LangCode = LanguageCodes.unused;                              Str.TranslatedStr = Reader.ReadCString();                                if (Strings.ContainsKey(Str.LangCode))                                  Strings[Str.LangCode].Add(Str);                              else                              {                                  List<TranslatedString> LanguageSet = new List<TranslatedString>();                                  LanguageSet.Add(Str);                                  Strings.Add(Str.LangCode' LanguageSet);                              }                          }                            break;                      case -2:                          NumStrings = Reader.ReadUShort();                            for (int i = 0; i < NumStrings; i++)                          {                              TranslatedString Str = new TranslatedString();                              Str.LangCode = LanguageCodes.unused;                              Str.TranslatedStr = Reader.ReadCString();                              Reader.ReadCString(); //Comment                                if (Strings.ContainsKey(Str.LangCode))                                  Strings[Str.LangCode].Add(Str);                              else                              {                                  List<TranslatedString> LanguageSet = new List<TranslatedString>();                                  LanguageSet.Add(Str);                                  Strings.Add(Str.LangCode' LanguageSet);                              }                          }                            break;                      case -3:                          NumStrings = Reader.ReadUShort();                            for (int i = 0; i < NumStrings; i++)                          {                              TranslatedString Str = new TranslatedString();                              Str.LangCode = (LanguageCodes)Reader.ReadByte();                              Str.TranslatedStr = Reader.ReadCString();                              Reader.ReadCString(); //Comment                                if (Strings.ContainsKey(Str.LangCode))                                  Strings[Str.LangCode].Add(Str);                              else                              {                                  List<TranslatedString> LanguageSet = new List<TranslatedString>();                                  LanguageSet.Add(Str);                                  Strings.Add(Str.LangCode' LanguageSet);                              }                          }                            break;                      case -4:                          byte LanguageSets = Reader.ReadByte();                          for (int i = 0; i < LanguageSets; i++)                          {                              NumStrings = Reader.ReadUShort();                                for (int j = 0; j < NumStrings; j++)                              {                                  TranslatedString Str = new TranslatedString();                                  Str.LangCode = (LanguageCodes)(Reader.ReadByte() + 1);                                  Str.TranslatedStr = Reader.ReadString();                                    Reader.ReadString(); //Comment                                    if (Strings.ContainsKey(Str.LangCode))                                      Strings[Str.LangCode].Add(Str);                                  else                                  {                                      List<TranslatedString> LanguageSet = new List<TranslatedString>();                                      LanguageSet.Add(Str);                                      Strings.Add(Str.LangCode' LanguageSet);                                  }                              }                          }                            break;                  }
Magic Number,Files.IFF,STR,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\IFF\STR.cs,STR,The following statement contains a magic number: switch(Version)                  {                      case 0:                          NumStrings = Reader.ReadUShort();                            for (int i = 0; i < NumStrings; i++)                          {                              TranslatedString Str = new TranslatedString();                              Str.LangCode = LanguageCodes.unused;                              Str.TranslatedStr = Reader.ReadPascalString();                                if (Strings.ContainsKey(Str.LangCode))                                  Strings[Str.LangCode].Add(Str);                              else                              {                                  List<TranslatedString> LanguageSet = new List<TranslatedString>();                                  LanguageSet.Add(Str);                                  Strings.Add(Str.LangCode' LanguageSet);                              }                          }                            break;                      case -1:                          NumStrings = Reader.ReadUShort();                            for (int i = 0; i < NumStrings; i++)                          {                              TranslatedString Str = new TranslatedString();                              Str.LangCode = LanguageCodes.unused;                              Str.TranslatedStr = Reader.ReadCString();                                if (Strings.ContainsKey(Str.LangCode))                                  Strings[Str.LangCode].Add(Str);                              else                              {                                  List<TranslatedString> LanguageSet = new List<TranslatedString>();                                  LanguageSet.Add(Str);                                  Strings.Add(Str.LangCode' LanguageSet);                              }                          }                            break;                      case -2:                          NumStrings = Reader.ReadUShort();                            for (int i = 0; i < NumStrings; i++)                          {                              TranslatedString Str = new TranslatedString();                              Str.LangCode = LanguageCodes.unused;                              Str.TranslatedStr = Reader.ReadCString();                              Reader.ReadCString(); //Comment                                if (Strings.ContainsKey(Str.LangCode))                                  Strings[Str.LangCode].Add(Str);                              else                              {                                  List<TranslatedString> LanguageSet = new List<TranslatedString>();                                  LanguageSet.Add(Str);                                  Strings.Add(Str.LangCode' LanguageSet);                              }                          }                            break;                      case -3:                          NumStrings = Reader.ReadUShort();                            for (int i = 0; i < NumStrings; i++)                          {                              TranslatedString Str = new TranslatedString();                              Str.LangCode = (LanguageCodes)Reader.ReadByte();                              Str.TranslatedStr = Reader.ReadCString();                              Reader.ReadCString(); //Comment                                if (Strings.ContainsKey(Str.LangCode))                                  Strings[Str.LangCode].Add(Str);                              else                              {                                  List<TranslatedString> LanguageSet = new List<TranslatedString>();                                  LanguageSet.Add(Str);                                  Strings.Add(Str.LangCode' LanguageSet);                              }                          }                            break;                      case -4:                          byte LanguageSets = Reader.ReadByte();                          for (int i = 0; i < LanguageSets; i++)                          {                              NumStrings = Reader.ReadUShort();                                for (int j = 0; j < NumStrings; j++)                              {                                  TranslatedString Str = new TranslatedString();                                  Str.LangCode = (LanguageCodes)(Reader.ReadByte() + 1);                                  Str.TranslatedStr = Reader.ReadString();                                    Reader.ReadString(); //Comment                                    if (Strings.ContainsKey(Str.LangCode))                                      Strings[Str.LangCode].Add(Str);                                  else                                  {                                      List<TranslatedString> LanguageSet = new List<TranslatedString>();                                      LanguageSet.Add(Str);                                      Strings.Add(Str.LangCode' LanguageSet);                                  }                              }                          }                            break;                  }
Magic Number,Files.IFF,STR,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\IFF\STR.cs,STR,The following statement contains a magic number: switch(Version)                  {                      case 0:                          NumStrings = Reader.ReadUShort();                            for (int i = 0; i < NumStrings; i++)                          {                              TranslatedString Str = new TranslatedString();                              Str.LangCode = LanguageCodes.unused;                              Str.TranslatedStr = Reader.ReadPascalString();                                if (Strings.ContainsKey(Str.LangCode))                                  Strings[Str.LangCode].Add(Str);                              else                              {                                  List<TranslatedString> LanguageSet = new List<TranslatedString>();                                  LanguageSet.Add(Str);                                  Strings.Add(Str.LangCode' LanguageSet);                              }                          }                            break;                      case -1:                          NumStrings = Reader.ReadUShort();                            for (int i = 0; i < NumStrings; i++)                          {                              TranslatedString Str = new TranslatedString();                              Str.LangCode = LanguageCodes.unused;                              Str.TranslatedStr = Reader.ReadCString();                                if (Strings.ContainsKey(Str.LangCode))                                  Strings[Str.LangCode].Add(Str);                              else                              {                                  List<TranslatedString> LanguageSet = new List<TranslatedString>();                                  LanguageSet.Add(Str);                                  Strings.Add(Str.LangCode' LanguageSet);                              }                          }                            break;                      case -2:                          NumStrings = Reader.ReadUShort();                            for (int i = 0; i < NumStrings; i++)                          {                              TranslatedString Str = new TranslatedString();                              Str.LangCode = LanguageCodes.unused;                              Str.TranslatedStr = Reader.ReadCString();                              Reader.ReadCString(); //Comment                                if (Strings.ContainsKey(Str.LangCode))                                  Strings[Str.LangCode].Add(Str);                              else                              {                                  List<TranslatedString> LanguageSet = new List<TranslatedString>();                                  LanguageSet.Add(Str);                                  Strings.Add(Str.LangCode' LanguageSet);                              }                          }                            break;                      case -3:                          NumStrings = Reader.ReadUShort();                            for (int i = 0; i < NumStrings; i++)                          {                              TranslatedString Str = new TranslatedString();                              Str.LangCode = (LanguageCodes)Reader.ReadByte();                              Str.TranslatedStr = Reader.ReadCString();                              Reader.ReadCString(); //Comment                                if (Strings.ContainsKey(Str.LangCode))                                  Strings[Str.LangCode].Add(Str);                              else                              {                                  List<TranslatedString> LanguageSet = new List<TranslatedString>();                                  LanguageSet.Add(Str);                                  Strings.Add(Str.LangCode' LanguageSet);                              }                          }                            break;                      case -4:                          byte LanguageSets = Reader.ReadByte();                          for (int i = 0; i < LanguageSets; i++)                          {                              NumStrings = Reader.ReadUShort();                                for (int j = 0; j < NumStrings; j++)                              {                                  TranslatedString Str = new TranslatedString();                                  Str.LangCode = (LanguageCodes)(Reader.ReadByte() + 1);                                  Str.TranslatedStr = Reader.ReadString();                                    Reader.ReadString(); //Comment                                    if (Strings.ContainsKey(Str.LangCode))                                      Strings[Str.LangCode].Add(Str);                                  else                                  {                                      List<TranslatedString> LanguageSet = new List<TranslatedString>();                                      LanguageSet.Add(Str);                                      Strings.Add(Str.LangCode' LanguageSet);                                  }                              }                          }                            break;                  }
Magic Number,Files.IFF,STR,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\IFF\STR.cs,STR,The following statement contains a magic number: (Reader.StreamLength - Reader.Position) > 2
Magic Number,Files.IFF,TTAs,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\IFF\TTAs.cs,TTAs,The following statement contains a magic number: switch (Version)                  {                      case 0:                          NumStrings = Reader.ReadUShort();                            for (int i = 0; i < NumStrings; i++)                          {                              TranslatedString Str = new TranslatedString();                              Str.LangCode = LanguageCodes.unused;                              Str.TranslatedStr = Reader.ReadPascalString();                                if (Strings.ContainsKey(Str.LangCode))                                  Strings[Str.LangCode].Add(Str);                              else                              {                                  List<TranslatedString> LanguageSet = new List<TranslatedString>();                                  LanguageSet.Add(Str);                                  Strings.Add(Str.LangCode' LanguageSet);                              }                          }                            break;                      case -1:                          NumStrings = Reader.ReadUShort();                            for (int i = 0; i < NumStrings; i++)                          {                              TranslatedString Str = new TranslatedString();                              Str.LangCode = LanguageCodes.unused;                              Str.TranslatedStr = Reader.ReadCString();                                if (Strings.ContainsKey(Str.LangCode))                                  Strings[Str.LangCode].Add(Str);                              else                              {                                  List<TranslatedString> LanguageSet = new List<TranslatedString>();                                  LanguageSet.Add(Str);                                  Strings.Add(Str.LangCode' LanguageSet);                              }                          }                            break;                      case -2:                          NumStrings = Reader.ReadUShort();                            for (int i = 0; i < NumStrings; i++)                          {                              TranslatedString Str = new TranslatedString();                              Str.LangCode = LanguageCodes.unused;                              Str.TranslatedStr = Reader.ReadCString();                              Reader.ReadCString(); //Comment                                if (Strings.ContainsKey(Str.LangCode))                                  Strings[Str.LangCode].Add(Str);                              else                              {                                  List<TranslatedString> LanguageSet = new List<TranslatedString>();                                  LanguageSet.Add(Str);                                  Strings.Add(Str.LangCode' LanguageSet);                              }                          }                            break;                      case -3:                          NumStrings = Reader.ReadUShort();                            for (int i = 0; i < NumStrings; i++)                          {                              TranslatedString Str = new TranslatedString();                              Str.LangCode = (LanguageCodes)Reader.ReadByte();                              Str.TranslatedStr = Reader.ReadCString();                              Reader.ReadCString(); //Comment                                if (Strings.ContainsKey(Str.LangCode))                                  Strings[Str.LangCode].Add(Str);                              else                              {                                  List<TranslatedString> LanguageSet = new List<TranslatedString>();                                  LanguageSet.Add(Str);                                  Strings.Add(Str.LangCode' LanguageSet);                              }                          }                            break;                      case -4:                          byte LanguageSets = Reader.ReadByte();                          for (int i = 0; i < LanguageSets; i++)                          {                              NumStrings = Reader.ReadUShort();                                for (int j = 0; j < NumStrings; j++)                              {                                  TranslatedString Str = new TranslatedString();                                  Str.LangCode = (LanguageCodes)(Reader.ReadByte() + 1);                                  Str.TranslatedStr = Reader.ReadString();                                  Reader.ReadString(); //Comment                                    if (Strings.ContainsKey(Str.LangCode))                                      Strings[Str.LangCode].Add(Str);                                  else                                  {                                      List<TranslatedString> LanguageSet = new List<TranslatedString>();                                      LanguageSet.Add(Str);                                      Strings.Add(Str.LangCode' LanguageSet);                                  }                              }                          }                            break;                  }
Magic Number,Files.IFF,TTAs,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\IFF\TTAs.cs,TTAs,The following statement contains a magic number: switch (Version)                  {                      case 0:                          NumStrings = Reader.ReadUShort();                            for (int i = 0; i < NumStrings; i++)                          {                              TranslatedString Str = new TranslatedString();                              Str.LangCode = LanguageCodes.unused;                              Str.TranslatedStr = Reader.ReadPascalString();                                if (Strings.ContainsKey(Str.LangCode))                                  Strings[Str.LangCode].Add(Str);                              else                              {                                  List<TranslatedString> LanguageSet = new List<TranslatedString>();                                  LanguageSet.Add(Str);                                  Strings.Add(Str.LangCode' LanguageSet);                              }                          }                            break;                      case -1:                          NumStrings = Reader.ReadUShort();                            for (int i = 0; i < NumStrings; i++)                          {                              TranslatedString Str = new TranslatedString();                              Str.LangCode = LanguageCodes.unused;                              Str.TranslatedStr = Reader.ReadCString();                                if (Strings.ContainsKey(Str.LangCode))                                  Strings[Str.LangCode].Add(Str);                              else                              {                                  List<TranslatedString> LanguageSet = new List<TranslatedString>();                                  LanguageSet.Add(Str);                                  Strings.Add(Str.LangCode' LanguageSet);                              }                          }                            break;                      case -2:                          NumStrings = Reader.ReadUShort();                            for (int i = 0; i < NumStrings; i++)                          {                              TranslatedString Str = new TranslatedString();                              Str.LangCode = LanguageCodes.unused;                              Str.TranslatedStr = Reader.ReadCString();                              Reader.ReadCString(); //Comment                                if (Strings.ContainsKey(Str.LangCode))                                  Strings[Str.LangCode].Add(Str);                              else                              {                                  List<TranslatedString> LanguageSet = new List<TranslatedString>();                                  LanguageSet.Add(Str);                                  Strings.Add(Str.LangCode' LanguageSet);                              }                          }                            break;                      case -3:                          NumStrings = Reader.ReadUShort();                            for (int i = 0; i < NumStrings; i++)                          {                              TranslatedString Str = new TranslatedString();                              Str.LangCode = (LanguageCodes)Reader.ReadByte();                              Str.TranslatedStr = Reader.ReadCString();                              Reader.ReadCString(); //Comment                                if (Strings.ContainsKey(Str.LangCode))                                  Strings[Str.LangCode].Add(Str);                              else                              {                                  List<TranslatedString> LanguageSet = new List<TranslatedString>();                                  LanguageSet.Add(Str);                                  Strings.Add(Str.LangCode' LanguageSet);                              }                          }                            break;                      case -4:                          byte LanguageSets = Reader.ReadByte();                          for (int i = 0; i < LanguageSets; i++)                          {                              NumStrings = Reader.ReadUShort();                                for (int j = 0; j < NumStrings; j++)                              {                                  TranslatedString Str = new TranslatedString();                                  Str.LangCode = (LanguageCodes)(Reader.ReadByte() + 1);                                  Str.TranslatedStr = Reader.ReadString();                                  Reader.ReadString(); //Comment                                    if (Strings.ContainsKey(Str.LangCode))                                      Strings[Str.LangCode].Add(Str);                                  else                                  {                                      List<TranslatedString> LanguageSet = new List<TranslatedString>();                                      LanguageSet.Add(Str);                                      Strings.Add(Str.LangCode' LanguageSet);                                  }                              }                          }                            break;                  }
Magic Number,Files.IFF,TTAs,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\IFF\TTAs.cs,TTAs,The following statement contains a magic number: switch (Version)                  {                      case 0:                          NumStrings = Reader.ReadUShort();                            for (int i = 0; i < NumStrings; i++)                          {                              TranslatedString Str = new TranslatedString();                              Str.LangCode = LanguageCodes.unused;                              Str.TranslatedStr = Reader.ReadPascalString();                                if (Strings.ContainsKey(Str.LangCode))                                  Strings[Str.LangCode].Add(Str);                              else                              {                                  List<TranslatedString> LanguageSet = new List<TranslatedString>();                                  LanguageSet.Add(Str);                                  Strings.Add(Str.LangCode' LanguageSet);                              }                          }                            break;                      case -1:                          NumStrings = Reader.ReadUShort();                            for (int i = 0; i < NumStrings; i++)                          {                              TranslatedString Str = new TranslatedString();                              Str.LangCode = LanguageCodes.unused;                              Str.TranslatedStr = Reader.ReadCString();                                if (Strings.ContainsKey(Str.LangCode))                                  Strings[Str.LangCode].Add(Str);                              else                              {                                  List<TranslatedString> LanguageSet = new List<TranslatedString>();                                  LanguageSet.Add(Str);                                  Strings.Add(Str.LangCode' LanguageSet);                              }                          }                            break;                      case -2:                          NumStrings = Reader.ReadUShort();                            for (int i = 0; i < NumStrings; i++)                          {                              TranslatedString Str = new TranslatedString();                              Str.LangCode = LanguageCodes.unused;                              Str.TranslatedStr = Reader.ReadCString();                              Reader.ReadCString(); //Comment                                if (Strings.ContainsKey(Str.LangCode))                                  Strings[Str.LangCode].Add(Str);                              else                              {                                  List<TranslatedString> LanguageSet = new List<TranslatedString>();                                  LanguageSet.Add(Str);                                  Strings.Add(Str.LangCode' LanguageSet);                              }                          }                            break;                      case -3:                          NumStrings = Reader.ReadUShort();                            for (int i = 0; i < NumStrings; i++)                          {                              TranslatedString Str = new TranslatedString();                              Str.LangCode = (LanguageCodes)Reader.ReadByte();                              Str.TranslatedStr = Reader.ReadCString();                              Reader.ReadCString(); //Comment                                if (Strings.ContainsKey(Str.LangCode))                                  Strings[Str.LangCode].Add(Str);                              else                              {                                  List<TranslatedString> LanguageSet = new List<TranslatedString>();                                  LanguageSet.Add(Str);                                  Strings.Add(Str.LangCode' LanguageSet);                              }                          }                            break;                      case -4:                          byte LanguageSets = Reader.ReadByte();                          for (int i = 0; i < LanguageSets; i++)                          {                              NumStrings = Reader.ReadUShort();                                for (int j = 0; j < NumStrings; j++)                              {                                  TranslatedString Str = new TranslatedString();                                  Str.LangCode = (LanguageCodes)(Reader.ReadByte() + 1);                                  Str.TranslatedStr = Reader.ReadString();                                  Reader.ReadString(); //Comment                                    if (Strings.ContainsKey(Str.LangCode))                                      Strings[Str.LangCode].Add(Str);                                  else                                  {                                      List<TranslatedString> LanguageSet = new List<TranslatedString>();                                      LanguageSet.Add(Str);                                      Strings.Add(Str.LangCode' LanguageSet);                                  }                              }                          }                            break;                  }
Magic Number,Files.IFF,TTAs,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\IFF\TTAs.cs,TTAs,The following statement contains a magic number: (Reader.StreamLength - Reader.Position) > 2
Magic Number,Files.Vitaboy,Anim,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\Vitaboy\Anim.cs,Anim,The following statement contains a magic number: Translations = new float[TranslationsCount' 3];
Magic Number,Files.Vitaboy,Anim,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\Vitaboy\Anim.cs,Anim,The following statement contains a magic number: Translations[i' 2] = m_Reader.ReadFloat();
Magic Number,Files.Vitaboy,Anim,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\Vitaboy\Anim.cs,Anim,The following statement contains a magic number: Rotations = new float[RotationsCount' 4];
Magic Number,Files.Vitaboy,Anim,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\Vitaboy\Anim.cs,Anim,The following statement contains a magic number: Rotations[i' 2] = m_Reader.ReadFloat();
Magic Number,Files.Vitaboy,Anim,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\Vitaboy\Anim.cs,Anim,The following statement contains a magic number: Rotations[i' 3] = m_Reader.ReadFloat();
Magic Number,Files.Vitaboy,Binding,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\Vitaboy\Binding.cs,Binding,The following statement contains a magic number: AssetType == 8
Magic Number,Files.Vitaboy,Binding,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\Vitaboy\Binding.cs,Binding,The following statement contains a magic number: AssetType == 8
Magic Number,Paloma,TargaImage,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,LoadTGAHeaderInfo,The following statement contains a magic number: switch (pixeldepth)                      {                          case 8:                          case 16:                          case 24:                          case 32:                              this.objTargaHeader.SetPixelDepth(pixeldepth);                              break;                            default:                              this.ClearAll();                              throw new IOException("Targa Image only supports 8' 16' 24' or 32 bit pixel depths.");                      }
Magic Number,Paloma,TargaImage,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,LoadTGAHeaderInfo,The following statement contains a magic number: switch (pixeldepth)                      {                          case 8:                          case 16:                          case 24:                          case 32:                              this.objTargaHeader.SetPixelDepth(pixeldepth);                              break;                            default:                              this.ClearAll();                              throw new IOException("Targa Image only supports 8' 16' 24' or 32 bit pixel depths.");                      }
Magic Number,Paloma,TargaImage,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,LoadTGAHeaderInfo,The following statement contains a magic number: switch (pixeldepth)                      {                          case 8:                          case 16:                          case 24:                          case 32:                              this.objTargaHeader.SetPixelDepth(pixeldepth);                              break;                            default:                              this.ClearAll();                              throw new IOException("Targa Image only supports 8' 16' 24' or 32 bit pixel depths.");                      }
Magic Number,Paloma,TargaImage,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,LoadTGAHeaderInfo,The following statement contains a magic number: switch (pixeldepth)                      {                          case 8:                          case 16:                          case 24:                          case 32:                              this.objTargaHeader.SetPixelDepth(pixeldepth);                              break;                            default:                              this.ClearAll();                              throw new IOException("Targa Image only supports 8' 16' 24' or 32 bit pixel depths.");                      }
Magic Number,Paloma,TargaImage,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,LoadTGAHeaderInfo,The following statement contains a magic number: this.objTargaHeader.SetAttributeBits((byte)Utilities.GetBits(ImageDescriptor' 0' 4));
Magic Number,Paloma,TargaImage,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,LoadTGAHeaderInfo,The following statement contains a magic number: this.objTargaHeader.SetVerticalTransferOrder((VerticalTransferOrder)Utilities.GetBits(ImageDescriptor' 5' 1));
Magic Number,Paloma,TargaImage,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,LoadTGAHeaderInfo,The following statement contains a magic number: this.objTargaHeader.SetHorizontalTransferOrder((HorizontalTransferOrder)Utilities.GetBits(ImageDescriptor' 4' 1));
Magic Number,Paloma,TargaImage,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,LoadTGAHeaderInfo,The following statement contains a magic number: switch (this.objTargaHeader.ColorMapEntrySize)                                      {                                          case 15:                                              byte[] color15 = binReader.ReadBytes(2);                                              // remember that the bytes are stored in reverse oreder                                              this.objTargaHeader.ColorMap.Add(Utilities.GetColorFrom2Bytes(color15[1]' color15[0]));                                              break;                                          case 16:                                              byte[] color16 = binReader.ReadBytes(2);                                              // remember that the bytes are stored in reverse oreder                                              this.objTargaHeader.ColorMap.Add(Utilities.GetColorFrom2Bytes(color16[1]' color16[0]));                                              break;                                          case 24:                                              b = Convert.ToInt32(binReader.ReadByte());                                              g = Convert.ToInt32(binReader.ReadByte());                                              r = Convert.ToInt32(binReader.ReadByte());                                              this.objTargaHeader.ColorMap.Add(System.Drawing.Color.FromArgb(r' g' b));                                              break;                                          case 32:                                              a = Convert.ToInt32(binReader.ReadByte());                                              b = Convert.ToInt32(binReader.ReadByte());                                              g = Convert.ToInt32(binReader.ReadByte());                                              r = Convert.ToInt32(binReader.ReadByte());                                              this.objTargaHeader.ColorMap.Add(System.Drawing.Color.FromArgb(a' r' g' b));                                              break;                                          default:                                              this.ClearAll();                                              throw new IOException("TargaImage only supports ColorMap Entry Sizes of 15' 16' 24 or 32 bits.");                                                                                    }
Magic Number,Paloma,TargaImage,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,LoadTGAHeaderInfo,The following statement contains a magic number: switch (this.objTargaHeader.ColorMapEntrySize)                                      {                                          case 15:                                              byte[] color15 = binReader.ReadBytes(2);                                              // remember that the bytes are stored in reverse oreder                                              this.objTargaHeader.ColorMap.Add(Utilities.GetColorFrom2Bytes(color15[1]' color15[0]));                                              break;                                          case 16:                                              byte[] color16 = binReader.ReadBytes(2);                                              // remember that the bytes are stored in reverse oreder                                              this.objTargaHeader.ColorMap.Add(Utilities.GetColorFrom2Bytes(color16[1]' color16[0]));                                              break;                                          case 24:                                              b = Convert.ToInt32(binReader.ReadByte());                                              g = Convert.ToInt32(binReader.ReadByte());                                              r = Convert.ToInt32(binReader.ReadByte());                                              this.objTargaHeader.ColorMap.Add(System.Drawing.Color.FromArgb(r' g' b));                                              break;                                          case 32:                                              a = Convert.ToInt32(binReader.ReadByte());                                              b = Convert.ToInt32(binReader.ReadByte());                                              g = Convert.ToInt32(binReader.ReadByte());                                              r = Convert.ToInt32(binReader.ReadByte());                                              this.objTargaHeader.ColorMap.Add(System.Drawing.Color.FromArgb(a' r' g' b));                                              break;                                          default:                                              this.ClearAll();                                              throw new IOException("TargaImage only supports ColorMap Entry Sizes of 15' 16' 24 or 32 bits.");                                                                                    }
Magic Number,Paloma,TargaImage,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,LoadTGAHeaderInfo,The following statement contains a magic number: switch (this.objTargaHeader.ColorMapEntrySize)                                      {                                          case 15:                                              byte[] color15 = binReader.ReadBytes(2);                                              // remember that the bytes are stored in reverse oreder                                              this.objTargaHeader.ColorMap.Add(Utilities.GetColorFrom2Bytes(color15[1]' color15[0]));                                              break;                                          case 16:                                              byte[] color16 = binReader.ReadBytes(2);                                              // remember that the bytes are stored in reverse oreder                                              this.objTargaHeader.ColorMap.Add(Utilities.GetColorFrom2Bytes(color16[1]' color16[0]));                                              break;                                          case 24:                                              b = Convert.ToInt32(binReader.ReadByte());                                              g = Convert.ToInt32(binReader.ReadByte());                                              r = Convert.ToInt32(binReader.ReadByte());                                              this.objTargaHeader.ColorMap.Add(System.Drawing.Color.FromArgb(r' g' b));                                              break;                                          case 32:                                              a = Convert.ToInt32(binReader.ReadByte());                                              b = Convert.ToInt32(binReader.ReadByte());                                              g = Convert.ToInt32(binReader.ReadByte());                                              r = Convert.ToInt32(binReader.ReadByte());                                              this.objTargaHeader.ColorMap.Add(System.Drawing.Color.FromArgb(a' r' g' b));                                              break;                                          default:                                              this.ClearAll();                                              throw new IOException("TargaImage only supports ColorMap Entry Sizes of 15' 16' 24 or 32 bits.");                                                                                    }
Magic Number,Paloma,TargaImage,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,LoadTGAHeaderInfo,The following statement contains a magic number: switch (this.objTargaHeader.ColorMapEntrySize)                                      {                                          case 15:                                              byte[] color15 = binReader.ReadBytes(2);                                              // remember that the bytes are stored in reverse oreder                                              this.objTargaHeader.ColorMap.Add(Utilities.GetColorFrom2Bytes(color15[1]' color15[0]));                                              break;                                          case 16:                                              byte[] color16 = binReader.ReadBytes(2);                                              // remember that the bytes are stored in reverse oreder                                              this.objTargaHeader.ColorMap.Add(Utilities.GetColorFrom2Bytes(color16[1]' color16[0]));                                              break;                                          case 24:                                              b = Convert.ToInt32(binReader.ReadByte());                                              g = Convert.ToInt32(binReader.ReadByte());                                              r = Convert.ToInt32(binReader.ReadByte());                                              this.objTargaHeader.ColorMap.Add(System.Drawing.Color.FromArgb(r' g' b));                                              break;                                          case 32:                                              a = Convert.ToInt32(binReader.ReadByte());                                              b = Convert.ToInt32(binReader.ReadByte());                                              g = Convert.ToInt32(binReader.ReadByte());                                              r = Convert.ToInt32(binReader.ReadByte());                                              this.objTargaHeader.ColorMap.Add(System.Drawing.Color.FromArgb(a' r' g' b));                                              break;                                          default:                                              this.ClearAll();                                              throw new IOException("TargaImage only supports ColorMap Entry Sizes of 15' 16' 24 or 32 bits.");                                                                                    }
Magic Number,Paloma,TargaImage,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,LoadTGAHeaderInfo,The following statement contains a magic number: switch (this.objTargaHeader.ColorMapEntrySize)                                      {                                          case 15:                                              byte[] color15 = binReader.ReadBytes(2);                                              // remember that the bytes are stored in reverse oreder                                              this.objTargaHeader.ColorMap.Add(Utilities.GetColorFrom2Bytes(color15[1]' color15[0]));                                              break;                                          case 16:                                              byte[] color16 = binReader.ReadBytes(2);                                              // remember that the bytes are stored in reverse oreder                                              this.objTargaHeader.ColorMap.Add(Utilities.GetColorFrom2Bytes(color16[1]' color16[0]));                                              break;                                          case 24:                                              b = Convert.ToInt32(binReader.ReadByte());                                              g = Convert.ToInt32(binReader.ReadByte());                                              r = Convert.ToInt32(binReader.ReadByte());                                              this.objTargaHeader.ColorMap.Add(System.Drawing.Color.FromArgb(r' g' b));                                              break;                                          case 32:                                              a = Convert.ToInt32(binReader.ReadByte());                                              b = Convert.ToInt32(binReader.ReadByte());                                              g = Convert.ToInt32(binReader.ReadByte());                                              r = Convert.ToInt32(binReader.ReadByte());                                              this.objTargaHeader.ColorMap.Add(System.Drawing.Color.FromArgb(a' r' g' b));                                              break;                                          default:                                              this.ClearAll();                                              throw new IOException("TargaImage only supports ColorMap Entry Sizes of 15' 16' 24 or 32 bits.");                                                                                    }
Magic Number,Paloma,TargaImage,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,LoadTGAHeaderInfo,The following statement contains a magic number: switch (this.objTargaHeader.ColorMapEntrySize)                                      {                                          case 15:                                              byte[] color15 = binReader.ReadBytes(2);                                              // remember that the bytes are stored in reverse oreder                                              this.objTargaHeader.ColorMap.Add(Utilities.GetColorFrom2Bytes(color15[1]' color15[0]));                                              break;                                          case 16:                                              byte[] color16 = binReader.ReadBytes(2);                                              // remember that the bytes are stored in reverse oreder                                              this.objTargaHeader.ColorMap.Add(Utilities.GetColorFrom2Bytes(color16[1]' color16[0]));                                              break;                                          case 24:                                              b = Convert.ToInt32(binReader.ReadByte());                                              g = Convert.ToInt32(binReader.ReadByte());                                              r = Convert.ToInt32(binReader.ReadByte());                                              this.objTargaHeader.ColorMap.Add(System.Drawing.Color.FromArgb(r' g' b));                                              break;                                          case 32:                                              a = Convert.ToInt32(binReader.ReadByte());                                              b = Convert.ToInt32(binReader.ReadByte());                                              g = Convert.ToInt32(binReader.ReadByte());                                              r = Convert.ToInt32(binReader.ReadByte());                                              this.objTargaHeader.ColorMap.Add(System.Drawing.Color.FromArgb(a' r' g' b));                                              break;                                          default:                                              this.ClearAll();                                              throw new IOException("TargaImage only supports ColorMap Entry Sizes of 15' 16' 24 or 32 bits.");                                                                                    }
Magic Number,Paloma,TargaImage,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,LoadTGAExtensionArea,The following statement contains a magic number: float iVersionNumber = (float)binReader.ReadInt16() / 100.0F;
Magic Number,Paloma,TargaImage,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,LoadImageBytes,The following statement contains a magic number: intRLEPacketType = Utilities.GetBits(bRLEPacket' 7' 1);
Magic Number,Paloma,TargaImage,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,LoadImageBytes,The following statement contains a magic number: intRLEPixelCount = Utilities.GetBits(bRLEPacket' 0' 7) + 1;
Magic Number,Paloma,TargaImage,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,LoadTGAImage,The following statement contains a magic number: this.intStride = (((int)this.objTargaHeader.Width * (int)this.objTargaHeader.PixelDepth + 31) & ~31) >> 3;
Magic Number,Paloma,TargaImage,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,LoadTGAImage,The following statement contains a magic number: this.intStride = (((int)this.objTargaHeader.Width * (int)this.objTargaHeader.PixelDepth + 31) & ~31) >> 3;
Magic Number,Paloma,TargaImage,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,LoadTGAImage,The following statement contains a magic number: this.intStride = (((int)this.objTargaHeader.Width * (int)this.objTargaHeader.PixelDepth + 31) & ~31) >> 3;
Magic Number,Paloma,TargaImage,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,LoadTGAImage,The following statement contains a magic number: this.intPadding = this.intStride - ((((int)this.objTargaHeader.Width * (int)this.objTargaHeader.PixelDepth) + 7) / 8);
Magic Number,Paloma,TargaImage,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,LoadTGAImage,The following statement contains a magic number: this.intPadding = this.intStride - ((((int)this.objTargaHeader.Width * (int)this.objTargaHeader.PixelDepth) + 7) / 8);
Magic Number,Paloma,TargaImage,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,LoadTGAImage,The following statement contains a magic number: pal.Entries[i] = Color.FromArgb(255' this.objTargaHeader.ColorMap[i].R' this.objTargaHeader.ColorMap[i].G' this.objTargaHeader.ColorMap[i].B);
Magic Number,Paloma,TargaImage,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,GetPixelFormat,The following statement contains a magic number: switch (this.objTargaHeader.PixelDepth)              {                  case 8:                      pfTargaPixelFormat = PixelFormat.Format8bppIndexed;                      break;                    case 16:                      //PixelFormat.Format16bppArgb1555                      //PixelFormat.Format16bppRgb555                      if (this.Format == TGAFormat.NEW_TGA)                      {                          switch (this.objTargaExtensionArea.AttributesType)                          {                              case 0:                              case 1:                              case 2: // no alpha data                                  pfTargaPixelFormat = PixelFormat.Format16bppRgb555;                                  break;                                case 3: // useful alpha data                                  pfTargaPixelFormat = PixelFormat.Format16bppArgb1555;                                  break;                          }                      }                      else                      {                          pfTargaPixelFormat = PixelFormat.Format16bppRgb555;                      }                        break;                    case 24:                      pfTargaPixelFormat = PixelFormat.Format24bppRgb;                      break;                    case 32:                      //PixelFormat.Format32bppArgb                      //PixelFormat.Format32bppPArgb                      //PixelFormat.Format32bppRgb                      if (this.Format == TGAFormat.NEW_TGA)                      {                          switch (this.objTargaExtensionArea.AttributesType)                          {                                                            case 1:                              case 2: // no alpha data                                  pfTargaPixelFormat = PixelFormat.Format32bppRgb;                                  break;                                case 0:                              case 3: // useful alpha data                                  pfTargaPixelFormat = PixelFormat.Format32bppArgb;                                  break;                                case 4: // premultiplied alpha data                                  pfTargaPixelFormat = PixelFormat.Format32bppPArgb;                                  break;                            }                      }                      else                      {                          pfTargaPixelFormat = PixelFormat.Format32bppRgb;                          break;                      }                                                                    break;                                }
Magic Number,Paloma,TargaImage,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,GetPixelFormat,The following statement contains a magic number: switch (this.objTargaHeader.PixelDepth)              {                  case 8:                      pfTargaPixelFormat = PixelFormat.Format8bppIndexed;                      break;                    case 16:                      //PixelFormat.Format16bppArgb1555                      //PixelFormat.Format16bppRgb555                      if (this.Format == TGAFormat.NEW_TGA)                      {                          switch (this.objTargaExtensionArea.AttributesType)                          {                              case 0:                              case 1:                              case 2: // no alpha data                                  pfTargaPixelFormat = PixelFormat.Format16bppRgb555;                                  break;                                case 3: // useful alpha data                                  pfTargaPixelFormat = PixelFormat.Format16bppArgb1555;                                  break;                          }                      }                      else                      {                          pfTargaPixelFormat = PixelFormat.Format16bppRgb555;                      }                        break;                    case 24:                      pfTargaPixelFormat = PixelFormat.Format24bppRgb;                      break;                    case 32:                      //PixelFormat.Format32bppArgb                      //PixelFormat.Format32bppPArgb                      //PixelFormat.Format32bppRgb                      if (this.Format == TGAFormat.NEW_TGA)                      {                          switch (this.objTargaExtensionArea.AttributesType)                          {                                                            case 1:                              case 2: // no alpha data                                  pfTargaPixelFormat = PixelFormat.Format32bppRgb;                                  break;                                case 0:                              case 3: // useful alpha data                                  pfTargaPixelFormat = PixelFormat.Format32bppArgb;                                  break;                                case 4: // premultiplied alpha data                                  pfTargaPixelFormat = PixelFormat.Format32bppPArgb;                                  break;                            }                      }                      else                      {                          pfTargaPixelFormat = PixelFormat.Format32bppRgb;                          break;                      }                                                                    break;                                }
Magic Number,Paloma,TargaImage,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,GetPixelFormat,The following statement contains a magic number: switch (this.objTargaHeader.PixelDepth)              {                  case 8:                      pfTargaPixelFormat = PixelFormat.Format8bppIndexed;                      break;                    case 16:                      //PixelFormat.Format16bppArgb1555                      //PixelFormat.Format16bppRgb555                      if (this.Format == TGAFormat.NEW_TGA)                      {                          switch (this.objTargaExtensionArea.AttributesType)                          {                              case 0:                              case 1:                              case 2: // no alpha data                                  pfTargaPixelFormat = PixelFormat.Format16bppRgb555;                                  break;                                case 3: // useful alpha data                                  pfTargaPixelFormat = PixelFormat.Format16bppArgb1555;                                  break;                          }                      }                      else                      {                          pfTargaPixelFormat = PixelFormat.Format16bppRgb555;                      }                        break;                    case 24:                      pfTargaPixelFormat = PixelFormat.Format24bppRgb;                      break;                    case 32:                      //PixelFormat.Format32bppArgb                      //PixelFormat.Format32bppPArgb                      //PixelFormat.Format32bppRgb                      if (this.Format == TGAFormat.NEW_TGA)                      {                          switch (this.objTargaExtensionArea.AttributesType)                          {                                                            case 1:                              case 2: // no alpha data                                  pfTargaPixelFormat = PixelFormat.Format32bppRgb;                                  break;                                case 0:                              case 3: // useful alpha data                                  pfTargaPixelFormat = PixelFormat.Format32bppArgb;                                  break;                                case 4: // premultiplied alpha data                                  pfTargaPixelFormat = PixelFormat.Format32bppPArgb;                                  break;                            }                      }                      else                      {                          pfTargaPixelFormat = PixelFormat.Format32bppRgb;                          break;                      }                                                                    break;                                }
Magic Number,Paloma,TargaImage,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,GetPixelFormat,The following statement contains a magic number: switch (this.objTargaHeader.PixelDepth)              {                  case 8:                      pfTargaPixelFormat = PixelFormat.Format8bppIndexed;                      break;                    case 16:                      //PixelFormat.Format16bppArgb1555                      //PixelFormat.Format16bppRgb555                      if (this.Format == TGAFormat.NEW_TGA)                      {                          switch (this.objTargaExtensionArea.AttributesType)                          {                              case 0:                              case 1:                              case 2: // no alpha data                                  pfTargaPixelFormat = PixelFormat.Format16bppRgb555;                                  break;                                case 3: // useful alpha data                                  pfTargaPixelFormat = PixelFormat.Format16bppArgb1555;                                  break;                          }                      }                      else                      {                          pfTargaPixelFormat = PixelFormat.Format16bppRgb555;                      }                        break;                    case 24:                      pfTargaPixelFormat = PixelFormat.Format24bppRgb;                      break;                    case 32:                      //PixelFormat.Format32bppArgb                      //PixelFormat.Format32bppPArgb                      //PixelFormat.Format32bppRgb                      if (this.Format == TGAFormat.NEW_TGA)                      {                          switch (this.objTargaExtensionArea.AttributesType)                          {                                                            case 1:                              case 2: // no alpha data                                  pfTargaPixelFormat = PixelFormat.Format32bppRgb;                                  break;                                case 0:                              case 3: // useful alpha data                                  pfTargaPixelFormat = PixelFormat.Format32bppArgb;                                  break;                                case 4: // premultiplied alpha data                                  pfTargaPixelFormat = PixelFormat.Format32bppPArgb;                                  break;                            }                      }                      else                      {                          pfTargaPixelFormat = PixelFormat.Format32bppRgb;                          break;                      }                                                                    break;                                }
Magic Number,Paloma,TargaImage,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,GetPixelFormat,The following statement contains a magic number: switch (this.objTargaHeader.PixelDepth)              {                  case 8:                      pfTargaPixelFormat = PixelFormat.Format8bppIndexed;                      break;                    case 16:                      //PixelFormat.Format16bppArgb1555                      //PixelFormat.Format16bppRgb555                      if (this.Format == TGAFormat.NEW_TGA)                      {                          switch (this.objTargaExtensionArea.AttributesType)                          {                              case 0:                              case 1:                              case 2: // no alpha data                                  pfTargaPixelFormat = PixelFormat.Format16bppRgb555;                                  break;                                case 3: // useful alpha data                                  pfTargaPixelFormat = PixelFormat.Format16bppArgb1555;                                  break;                          }                      }                      else                      {                          pfTargaPixelFormat = PixelFormat.Format16bppRgb555;                      }                        break;                    case 24:                      pfTargaPixelFormat = PixelFormat.Format24bppRgb;                      break;                    case 32:                      //PixelFormat.Format32bppArgb                      //PixelFormat.Format32bppPArgb                      //PixelFormat.Format32bppRgb                      if (this.Format == TGAFormat.NEW_TGA)                      {                          switch (this.objTargaExtensionArea.AttributesType)                          {                                                            case 1:                              case 2: // no alpha data                                  pfTargaPixelFormat = PixelFormat.Format32bppRgb;                                  break;                                case 0:                              case 3: // useful alpha data                                  pfTargaPixelFormat = PixelFormat.Format32bppArgb;                                  break;                                case 4: // premultiplied alpha data                                  pfTargaPixelFormat = PixelFormat.Format32bppPArgb;                                  break;                            }                      }                      else                      {                          pfTargaPixelFormat = PixelFormat.Format32bppRgb;                          break;                      }                                                                    break;                                }
Magic Number,Paloma,TargaImage,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,GetPixelFormat,The following statement contains a magic number: switch (this.objTargaHeader.PixelDepth)              {                  case 8:                      pfTargaPixelFormat = PixelFormat.Format8bppIndexed;                      break;                    case 16:                      //PixelFormat.Format16bppArgb1555                      //PixelFormat.Format16bppRgb555                      if (this.Format == TGAFormat.NEW_TGA)                      {                          switch (this.objTargaExtensionArea.AttributesType)                          {                              case 0:                              case 1:                              case 2: // no alpha data                                  pfTargaPixelFormat = PixelFormat.Format16bppRgb555;                                  break;                                case 3: // useful alpha data                                  pfTargaPixelFormat = PixelFormat.Format16bppArgb1555;                                  break;                          }                      }                      else                      {                          pfTargaPixelFormat = PixelFormat.Format16bppRgb555;                      }                        break;                    case 24:                      pfTargaPixelFormat = PixelFormat.Format24bppRgb;                      break;                    case 32:                      //PixelFormat.Format32bppArgb                      //PixelFormat.Format32bppPArgb                      //PixelFormat.Format32bppRgb                      if (this.Format == TGAFormat.NEW_TGA)                      {                          switch (this.objTargaExtensionArea.AttributesType)                          {                                                            case 1:                              case 2: // no alpha data                                  pfTargaPixelFormat = PixelFormat.Format32bppRgb;                                  break;                                case 0:                              case 3: // useful alpha data                                  pfTargaPixelFormat = PixelFormat.Format32bppArgb;                                  break;                                case 4: // premultiplied alpha data                                  pfTargaPixelFormat = PixelFormat.Format32bppPArgb;                                  break;                            }                      }                      else                      {                          pfTargaPixelFormat = PixelFormat.Format32bppRgb;                          break;                      }                                                                    break;                                }
Magic Number,Paloma,TargaImage,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,GetPixelFormat,The following statement contains a magic number: switch (this.objTargaHeader.PixelDepth)              {                  case 8:                      pfTargaPixelFormat = PixelFormat.Format8bppIndexed;                      break;                    case 16:                      //PixelFormat.Format16bppArgb1555                      //PixelFormat.Format16bppRgb555                      if (this.Format == TGAFormat.NEW_TGA)                      {                          switch (this.objTargaExtensionArea.AttributesType)                          {                              case 0:                              case 1:                              case 2: // no alpha data                                  pfTargaPixelFormat = PixelFormat.Format16bppRgb555;                                  break;                                case 3: // useful alpha data                                  pfTargaPixelFormat = PixelFormat.Format16bppArgb1555;                                  break;                          }                      }                      else                      {                          pfTargaPixelFormat = PixelFormat.Format16bppRgb555;                      }                        break;                    case 24:                      pfTargaPixelFormat = PixelFormat.Format24bppRgb;                      break;                    case 32:                      //PixelFormat.Format32bppArgb                      //PixelFormat.Format32bppPArgb                      //PixelFormat.Format32bppRgb                      if (this.Format == TGAFormat.NEW_TGA)                      {                          switch (this.objTargaExtensionArea.AttributesType)                          {                                                            case 1:                              case 2: // no alpha data                                  pfTargaPixelFormat = PixelFormat.Format32bppRgb;                                  break;                                case 0:                              case 3: // useful alpha data                                  pfTargaPixelFormat = PixelFormat.Format32bppArgb;                                  break;                                case 4: // premultiplied alpha data                                  pfTargaPixelFormat = PixelFormat.Format32bppPArgb;                                  break;                            }                      }                      else                      {                          pfTargaPixelFormat = PixelFormat.Format32bppRgb;                          break;                      }                                                                    break;                                }
Magic Number,Paloma,TargaImage,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,GetPixelFormat,The following statement contains a magic number: switch (this.objTargaHeader.PixelDepth)              {                  case 8:                      pfTargaPixelFormat = PixelFormat.Format8bppIndexed;                      break;                    case 16:                      //PixelFormat.Format16bppArgb1555                      //PixelFormat.Format16bppRgb555                      if (this.Format == TGAFormat.NEW_TGA)                      {                          switch (this.objTargaExtensionArea.AttributesType)                          {                              case 0:                              case 1:                              case 2: // no alpha data                                  pfTargaPixelFormat = PixelFormat.Format16bppRgb555;                                  break;                                case 3: // useful alpha data                                  pfTargaPixelFormat = PixelFormat.Format16bppArgb1555;                                  break;                          }                      }                      else                      {                          pfTargaPixelFormat = PixelFormat.Format16bppRgb555;                      }                        break;                    case 24:                      pfTargaPixelFormat = PixelFormat.Format24bppRgb;                      break;                    case 32:                      //PixelFormat.Format32bppArgb                      //PixelFormat.Format32bppPArgb                      //PixelFormat.Format32bppRgb                      if (this.Format == TGAFormat.NEW_TGA)                      {                          switch (this.objTargaExtensionArea.AttributesType)                          {                                                            case 1:                              case 2: // no alpha data                                  pfTargaPixelFormat = PixelFormat.Format32bppRgb;                                  break;                                case 0:                              case 3: // useful alpha data                                  pfTargaPixelFormat = PixelFormat.Format32bppArgb;                                  break;                                case 4: // premultiplied alpha data                                  pfTargaPixelFormat = PixelFormat.Format32bppPArgb;                                  break;                            }                      }                      else                      {                          pfTargaPixelFormat = PixelFormat.Format32bppRgb;                          break;                      }                                                                    break;                                }
Magic Number,Paloma,TargaImage,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,GetPixelFormat,The following statement contains a magic number: switch (this.objTargaHeader.PixelDepth)              {                  case 8:                      pfTargaPixelFormat = PixelFormat.Format8bppIndexed;                      break;                    case 16:                      //PixelFormat.Format16bppArgb1555                      //PixelFormat.Format16bppRgb555                      if (this.Format == TGAFormat.NEW_TGA)                      {                          switch (this.objTargaExtensionArea.AttributesType)                          {                              case 0:                              case 1:                              case 2: // no alpha data                                  pfTargaPixelFormat = PixelFormat.Format16bppRgb555;                                  break;                                case 3: // useful alpha data                                  pfTargaPixelFormat = PixelFormat.Format16bppArgb1555;                                  break;                          }                      }                      else                      {                          pfTargaPixelFormat = PixelFormat.Format16bppRgb555;                      }                        break;                    case 24:                      pfTargaPixelFormat = PixelFormat.Format24bppRgb;                      break;                    case 32:                      //PixelFormat.Format32bppArgb                      //PixelFormat.Format32bppPArgb                      //PixelFormat.Format32bppRgb                      if (this.Format == TGAFormat.NEW_TGA)                      {                          switch (this.objTargaExtensionArea.AttributesType)                          {                                                            case 1:                              case 2: // no alpha data                                  pfTargaPixelFormat = PixelFormat.Format32bppRgb;                                  break;                                case 0:                              case 3: // useful alpha data                                  pfTargaPixelFormat = PixelFormat.Format32bppArgb;                                  break;                                case 4: // premultiplied alpha data                                  pfTargaPixelFormat = PixelFormat.Format32bppPArgb;                                  break;                            }                      }                      else                      {                          pfTargaPixelFormat = PixelFormat.Format32bppRgb;                          break;                      }                                                                    break;                                }
Magic Number,Paloma,TargaImage,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,LoadThumbnail,The following statement contains a magic number: int iStride = ((iWidth * (int)this.objTargaHeader.PixelDepth + 31) & ~31) >> 3;
Magic Number,Paloma,TargaImage,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,LoadThumbnail,The following statement contains a magic number: int iStride = ((iWidth * (int)this.objTargaHeader.PixelDepth + 31) & ~31) >> 3;
Magic Number,Paloma,TargaImage,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,LoadThumbnail,The following statement contains a magic number: int iStride = ((iWidth * (int)this.objTargaHeader.PixelDepth + 31) & ~31) >> 3;
Magic Number,Paloma,TargaImage,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,LoadThumbnail,The following statement contains a magic number: int iPadding = iStride - (((iWidth * (int)this.objTargaHeader.PixelDepth) + 7) / 8);
Magic Number,Paloma,TargaImage,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,LoadThumbnail,The following statement contains a magic number: int iPadding = iStride - (((iWidth * (int)this.objTargaHeader.PixelDepth) + 7) / 8);
Magic Number,Paloma,TargaImage,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,LoadThumbnail,The following statement contains a magic number: int intImageRowByteSize = iWidth * ((int)this.objTargaHeader.PixelDepth / 8);
Magic Number,Paloma,Utilities,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,GetColorFrom2Bytes,The following statement contains a magic number: int r1 = Utilities.GetBits(one' 2' 5);
Magic Number,Paloma,Utilities,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,GetColorFrom2Bytes,The following statement contains a magic number: int r1 = Utilities.GetBits(one' 2' 5);
Magic Number,Paloma,Utilities,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,GetColorFrom2Bytes,The following statement contains a magic number: int r = r1 << 3;
Magic Number,Paloma,Utilities,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,GetColorFrom2Bytes,The following statement contains a magic number: int bit = Utilities.GetBits(one' 0' 2);
Magic Number,Paloma,Utilities,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,GetColorFrom2Bytes,The following statement contains a magic number: int g1 = bit << 6;
Magic Number,Paloma,Utilities,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,GetColorFrom2Bytes,The following statement contains a magic number: bit = Utilities.GetBits(two' 5' 3);
Magic Number,Paloma,Utilities,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,GetColorFrom2Bytes,The following statement contains a magic number: bit = Utilities.GetBits(two' 5' 3);
Magic Number,Paloma,Utilities,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,GetColorFrom2Bytes,The following statement contains a magic number: int g2 = bit << 3;
Magic Number,Paloma,Utilities,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,GetColorFrom2Bytes,The following statement contains a magic number: int b1 = Utilities.GetBits(two' 0' 5);
Magic Number,Paloma,Utilities,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,GetColorFrom2Bytes,The following statement contains a magic number: int b = b1 << 3;
Magic Number,Paloma,Utilities,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,GetColorFrom2Bytes,The following statement contains a magic number: int a1 = Utilities.GetBits(one' 7' 1);
Magic Number,Paloma,Utilities,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,GetColorFrom2Bytes,The following statement contains a magic number: int a = a1 * 255;
Missing Default,Files.Manager,FileManager,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\FileManager\FileManager.cs,GrabItem,The following switch statement is missing a default case: switch(TypeID)                          {                              case FAR3TypeIDs.ANIM:                                  AddItem(ID' new Asset(ID' (uint)Data.Length' new Anim(Data)));                                  break;                              case FAR3TypeIDs.APR:                                  AddItem(ID' new Asset(ID' (uint)Data.Length' new Appearance(Data)));                                  break;                              case FAR3TypeIDs.BND:                                  AddItem(ID' new Asset(ID' (uint)Data.Length' new Binding(Data)));                                  break;                              case FAR3TypeIDs.COL:                                  AddItem(ID' new Asset(ID' (uint)Data.Length' new Collection(Data)));                                  break;                              case FAR3TypeIDs.HAG:                                  AddItem(ID' new Asset(ID' (uint)Data.Length' new HandGroup(Data)));                                  break;                              case FAR3TypeIDs.MESH:                                  AddItem(ID' new Asset(ID' (uint)Data.Length' new Mesh(Data)));                                  break;                              case FAR3TypeIDs.OFT:                                  AddItem(ID' new Asset(ID' (uint)Data.Length' new Outfit(Data)));                                  break;                              case FAR3TypeIDs.PO:                                  AddItem(ID' new Asset(ID' (uint)Data.Length' new PurchasableOutfit(Data)));                                  break;                              case FAR3TypeIDs.SKEL:                                  AddItem(ID' new Asset(ID' (uint)Data.Length' new Skeleton(Data)));                                  break;                              case FAR3TypeIDs.TGA:                                  lock (TheLock)                                  {                                      using (Paloma.TargaImage TGA = new Paloma.TargaImage(Data))                                      {                                          TGA.Image.Save(MemStream' System.Drawing.Imaging.ImageFormat.Png);                                          MemStream.Seek(0' SeekOrigin.Begin);                                          AddItem(ID' new Asset(ID' (uint)MemStream.Length'                                              Texture2D.FromStream(m_Game.GraphicsDevice' MemStream)));                                      }                                  }                                  break;                              case FAR3TypeIDs.PNG:                              case FAR3TypeIDs.PackedPNG:                                  AddItem(ID' new Asset(ID' (uint)Data.Length'                                       Texture2D.FromStream(m_Game.GraphicsDevice' Data)));                                  break;                              case FAR3TypeIDs.JPG:                                  try                                  {                                      using (BMap = new Bitmap(Data))                                      {                                          BMap.MakeTransparent(System.Drawing.Color.FromArgb(255' 0' 255));                                          BMap.MakeTransparent(System.Drawing.Color.FromArgb(255' 1' 255));                                          BMap.MakeTransparent(System.Drawing.Color.FromArgb(254' 2' 254));                                          BMap.Save(MemStream' System.Drawing.Imaging.ImageFormat.Png);                                          MemStream.Seek(0' SeekOrigin.Begin);                                      }                                        AddItem(ID' new Asset(ID' (uint)MemStream.Length'                                          Texture2D.FromStream(m_Game.GraphicsDevice' MemStream)));                                  }                                  catch                                  {                                      try                                      {                                          AddItem(ID' new Asset(ID' (uint)Data.Length'                                              Texture2D.FromStream(m_Game.GraphicsDevice' Data)));                                      }                                      catch(Exception) //Most likely a TGA' sigh.                                      {                                          MemStream = new MemoryStream();                                            using (Paloma.TargaImage TGA = new Paloma.TargaImage(Data))                                          {                                              TGA.Image.Save(MemStream' System.Drawing.Imaging.ImageFormat.Png);                                              MemStream.Seek(0' SeekOrigin.Begin);                                              AddItem(ID' new Asset(ID' (uint)MemStream.Length'                                                  Texture2D.FromStream(m_Game.GraphicsDevice' MemStream)));                                          }                                      }                                  }                                  break;                              case FAR3TypeIDs.BMP:                                  if (IsBMP(Data))                                  {                                      lock (TheLock)                                      {                                          try                                          {                                              using (BMap = new Bitmap(Data))                                              {                                                  BMap.MakeTransparent(System.Drawing.Color.FromArgb(255' 0' 255));                                                  BMap.MakeTransparent(System.Drawing.Color.FromArgb(255' 1' 255));                                                  BMap.MakeTransparent(System.Drawing.Color.FromArgb(254' 2' 254));                                                  BMap.Save(MemStream' System.Drawing.Imaging.ImageFormat.Png);                                                  MemStream.Seek(0' SeekOrigin.Begin);                                              }                                                AddItem(ID' new Asset(ID' (uint)MemStream.Length'                                                  Texture2D.FromStream(m_Game.GraphicsDevice' MemStream)));                                          }                                          catch (Exception)                                          {                                              AddItem(ID' new Asset(ID' (uint)Data.Length'                                                  Texture2D.FromStream(m_Game.GraphicsDevice' Data)));                                          }                                      }                                  }                                  else                                  {                                      AddItem(ID' new Asset(ID' (uint)Data.Length'                                           Texture2D.FromStream(m_Game.GraphicsDevice' Data)));                                  }                                  break;                          }
Missing Default,Files.IFF,CST,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\IFF\CST.cs,CST,The following switch statement is missing a default case: switch (Version)                  {                      case 0:                          NumStrings = Reader.ReadUShort();                            for (int i = 0; i < NumStrings; i++)                          {                              TranslatedString Str = new TranslatedString();                              Str.LangCode = LanguageCodes.unused;                              Str.TranslatedStr = Reader.ReadPascalString();                                if (Strings.ContainsKey(Str.LangCode))                                  Strings[Str.LangCode].Add(Str);                              else                              {                                  List<TranslatedString> LanguageSet = new List<TranslatedString>();                                  LanguageSet.Add(Str);                                  Strings.Add(Str.LangCode' LanguageSet);                              }                          }                            break;                      case -1:                          NumStrings = Reader.ReadUShort();                            for (int i = 0; i < NumStrings; i++)                          {                              TranslatedString Str = new TranslatedString();                              Str.LangCode = LanguageCodes.unused;                              Str.TranslatedStr = Reader.ReadCString();                                if (Strings.ContainsKey(Str.LangCode))                                  Strings[Str.LangCode].Add(Str);                              else                              {                                  List<TranslatedString> LanguageSet = new List<TranslatedString>();                                  LanguageSet.Add(Str);                                  Strings.Add(Str.LangCode' LanguageSet);                              }                          }                            break;                      case -2:                          NumStrings = Reader.ReadUShort();                            for (int i = 0; i < NumStrings; i++)                          {                              TranslatedString Str = new TranslatedString();                              Str.LangCode = LanguageCodes.unused;                              Str.TranslatedStr = Reader.ReadCString();                              Reader.ReadCString(); //Comment                                if (Strings.ContainsKey(Str.LangCode))                                  Strings[Str.LangCode].Add(Str);                              else                              {                                  List<TranslatedString> LanguageSet = new List<TranslatedString>();                                  LanguageSet.Add(Str);                                  Strings.Add(Str.LangCode' LanguageSet);                              }                          }                            break;                      case -3:                          NumStrings = Reader.ReadUShort();                            for (int i = 0; i < NumStrings; i++)                          {                              TranslatedString Str = new TranslatedString();                              Str.LangCode = (LanguageCodes)Reader.ReadByte();                              Str.TranslatedStr = Reader.ReadCString();                              Reader.ReadCString(); //Comment                                if (Strings.ContainsKey(Str.LangCode))                                  Strings[Str.LangCode].Add(Str);                              else                              {                                  List<TranslatedString> LanguageSet = new List<TranslatedString>();                                  LanguageSet.Add(Str);                                  Strings.Add(Str.LangCode' LanguageSet);                              }                          }                            break;                      case -4:                          byte LanguageSets = Reader.ReadByte();                          for (int i = 0; i < LanguageSets; i++)                          {                              NumStrings = Reader.ReadUShort();                                for (int j = 0; j < NumStrings; j++)                              {                                  TranslatedString Str = new TranslatedString();                                  Str.LangCode = (LanguageCodes)(Reader.ReadByte() + 1);                                  Str.TranslatedStr = Reader.ReadString();                                  Reader.ReadString(); //Comment                                    if (Strings.ContainsKey(Str.LangCode))                                      Strings[Str.LangCode].Add(Str);                                  else                                  {                                      List<TranslatedString> LanguageSet = new List<TranslatedString>();                                      LanguageSet.Add(Str);                                      Strings.Add(Str.LangCode' LanguageSet);                                  }                              }                          }                            break;                  }
Missing Default,Files.IFF,CTSS,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\IFF\CTSS.cs,CTSS,The following switch statement is missing a default case: switch (Version)                  {                      case 0:                          NumStrings = Reader.ReadUShort();                            for (int i = 0; i < NumStrings; i++)                          {                              TranslatedString Str = new TranslatedString();                              Str.LangCode = LanguageCodes.unused;                              Str.TranslatedStr = Reader.ReadPascalString();                                if (Strings.ContainsKey(Str.LangCode))                                  Strings[Str.LangCode].Add(Str);                              else                              {                                  List<TranslatedString> LanguageSet = new List<TranslatedString>();                                  LanguageSet.Add(Str);                                  Strings.Add(Str.LangCode' LanguageSet);                              }                          }                            break;                      case -1:                          NumStrings = Reader.ReadUShort();                            for (int i = 0; i < NumStrings; i++)                          {                              TranslatedString Str = new TranslatedString();                              Str.LangCode = LanguageCodes.unused;                              Str.TranslatedStr = Reader.ReadCString();                                if (Strings.ContainsKey(Str.LangCode))                                  Strings[Str.LangCode].Add(Str);                              else                              {                                  List<TranslatedString> LanguageSet = new List<TranslatedString>();                                  LanguageSet.Add(Str);                                  Strings.Add(Str.LangCode' LanguageSet);                              }                          }                            break;                      case -2:                          NumStrings = Reader.ReadUShort();                            for (int i = 0; i < NumStrings; i++)                          {                              TranslatedString Str = new TranslatedString();                              Str.LangCode = LanguageCodes.unused;                              Str.TranslatedStr = Reader.ReadCString();                              Reader.ReadCString(); //Comment                                if (Strings.ContainsKey(Str.LangCode))                                  Strings[Str.LangCode].Add(Str);                              else                              {                                  List<TranslatedString> LanguageSet = new List<TranslatedString>();                                  LanguageSet.Add(Str);                                  Strings.Add(Str.LangCode' LanguageSet);                              }                          }                            break;                      case -3:                          NumStrings = Reader.ReadUShort();                            for (int i = 0; i < NumStrings; i++)                          {                              TranslatedString Str = new TranslatedString();                              Str.LangCode = (LanguageCodes)Reader.ReadByte();                              Str.TranslatedStr = Reader.ReadCString();                              Reader.ReadCString(); //Comment                                if (Strings.ContainsKey(Str.LangCode))                                  Strings[Str.LangCode].Add(Str);                              else                              {                                  List<TranslatedString> LanguageSet = new List<TranslatedString>();                                  LanguageSet.Add(Str);                                  Strings.Add(Str.LangCode' LanguageSet);                              }                          }                            break;                      case -4:                          byte LanguageSets = Reader.ReadByte();                          for (int i = 0; i < LanguageSets; i++)                          {                              NumStrings = Reader.ReadUShort();                                for (int j = 0; j < NumStrings; j++)                              {                                  TranslatedString Str = new TranslatedString();                                  Str.LangCode = (LanguageCodes)(Reader.ReadByte() + 1);                                  Str.TranslatedStr = Reader.ReadString();                                  Reader.ReadString(); //Comment                                    if (Strings.ContainsKey(Str.LangCode))                                      Strings[Str.LangCode].Add(Str);                                  else                                  {                                      List<TranslatedString> LanguageSet = new List<TranslatedString>();                                      LanguageSet.Add(Str);                                      Strings.Add(Str.LangCode' LanguageSet);                                  }                              }                          }                            break;                  }
Missing Default,Files.IFF,DGRP,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\IFF\DGRP.cs,DGRP,The following switch statement is missing a default case: switch(m_Version)              {                  case 20000:                      ImageCount = Reader.ReadUShort();                      break;                  case 20001:                      ImageCount = Reader.ReadUShort();                      break;                  case 20003:                      ImageCount = Reader.ReadUInt32();                      break;                  case 20004:                      ImageCount = Reader.ReadUInt32();                      break;              }
Missing Default,Files.IFF,Iff,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\IFF\Iff.cs,Init,The following switch statement is missing a default case: switch (Chunk.Type)                  {                      case IFFChunkTypes.FBMP:                          FBMP FBMPChunk = new FBMP(Chunk);                          m_FBMPChunks.Add(Chunk.ID' FBMPChunk);                          break;                      case IFFChunkTypes.FWAV:                          FWAV FWAVChunk = new FWAV(Chunk);                          m_FWAVChunks.Add(Chunk.ID' FWAVChunk);                          break;                      case IFFChunkTypes.BMP_:                          BMP_ BMPChunk = new BMP_(Chunk);                          m_BMP_Chunks.Add(Chunk.ID' BMPChunk);                          break;                      case IFFChunkTypes.DGRP:                          DGRP DGRPChunk = new DGRP(Chunk);                          m_DGRPChunks.Add(Chunk.ID' DGRPChunk);                          break;                      case IFFChunkTypes.BCON:                          BCON BCONChunk = new BCON(Chunk);                          m_BCONChunks.Add(Chunk.ID' BCONChunk);                          break;                      case IFFChunkTypes.GLOB:                          GLOB GlobChunk = new GLOB(Chunk);                          m_GLOBChunks.Add(Chunk.ID' GlobChunk);                          break;                      case IFFChunkTypes.OBJD:                          OBJD OBJDChunk = new OBJD(Chunk);                          m_OBJDs.Add(OBJDChunk);                          break;                      case IFFChunkTypes.TTAs:                          TTAs TTAsChunk = new TTAs(Chunk);                          m_TTAsChunks.Add(Chunk.ID' TTAsChunk);                          break;                      case IFFChunkTypes.TTAB:                          TTAB TTABChunk = new TTAB(Chunk);                          TTABChunk.Type = Chunk.Type;                          TTABChunk.ID = Chunk.ID;                          m_TTABChunks.Add(Chunk.ID' TTABChunk);                          break;                      case IFFChunkTypes.TPRP:                          TPRP TPRPChunk = new TPRP(Chunk);                          m_TPRPChunks.Add(Chunk.ID' TPRPChunk);                          break;                      case IFFChunkTypes.STR:                          STR STRChunk = new STR(Chunk);                          m_STRChunks.Add(Chunk.ID' STRChunk);                          break;                      case IFFChunkTypes.BHAV:                          BHAV BHAVChunk = new BHAV(Chunk);                          m_BHAVChunks.Add(Chunk.ID' BHAVChunk);                          break;                      case IFFChunkTypes.OBJf:                          OBJf OBJfChunk = new OBJf(Chunk);                          m_OBJfChunks.Add(Chunk.ID' OBJfChunk);                          break;                      case IFFChunkTypes.FCNS:                          FCNS FCNSChunk = new FCNS(Chunk);                          m_FCNSChunks.Add(Chunk.ID' FCNSChunk);                          break;                      case IFFChunkTypes.SPR:                          SPR SPRChunk = new SPR(Chunk);                          m_SPRChunks.Add(Chunk.ID' SPRChunk);                          break;                      case IFFChunkTypes.SPR2:                          SPR2 SPR2Chunk = new SPR2(Chunk);                          m_SPR2Chunks.Add(Chunk.ID' SPR2Chunk);                          break;                      case IFFChunkTypes.PALT:                          PALT PALTChunk = new PALT(Chunk);                          m_PALTChunks.Add(Chunk.ID' PALTChunk);                          break;                      case IFFChunkTypes.CTSS:                          CTSS CTSSChunk = new CTSS(Chunk);                          m_CTSSChunks.Add(Chunk.ID' CTSSChunk);                          break;                      case IFFChunkTypes.CST:                          CST CSTChunk = new CST(Chunk);                          m_CSTChunks.Add(Chunk.ID' CSTChunk);                          break;                  }
Missing Default,Files.IFF,OBJD,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\IFF\OBJD.cs,OBJD,The following switch statement is missing a default case: switch(Version)              {                  case 136:                      m_NumFields = 80;                      break;                  case 138:                      m_NumFields = 95;                      break;                  case 139:                      m_NumFields = 96;                      break;                  case 140:                      m_NumFields = 97;                      break;                  case 141:                      m_NumFields = 97;                      break;                  case 142:                      m_NumFields = 105;                      break;              }
Missing Default,Files.IFF,SPRFrame,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\IFF\SPR.cs,SPRFrame,The following switch statement is missing a default case: switch(Cmd)                  {                      case 0x04:                          for(byte j = 0; j < Count; j++)                          {                              byte PxCmd = Reader.ReadByte();                              byte PxCount = Reader.ReadByte();                              Color[] Pixels;                                switch(PxCmd)                              {                                  case 0x01:                                      //Leave the next pixel count pixels as transparent. This pixel command has no pixel data.                                      Pixels = new Color[Count];                                      for (int k = 0; k < Count; k++)                                          Pixels[k] = Color.Transparent;                                        Texture.SetData<Color>(Pixels' 0' Count);                                      break;                                  case 0x02:                                      //Fill the next pixel count pixels with a single palette color.                                       //The pixel data is two bytes: the first byte denotes the palette color                                       //index' and the second byte is padding (which is always equal to the                                       //first byte but is ignored).                                      Pixels = new Color[Count];                                      byte ColorIndex = Reader.ReadByte();                                        for (int k = 0; k < Count; k++)                                          Pixels[k] = Palette[ColorIndex];                                        Texture.SetData<Color>(Pixels' 0' Count);                                      break;                                  case 0x03:                                      //Set the next pixel count pixels to the palette color indices defined by                                       //the pixel data provided directly after this command. Each byte in the pixel data'                                       //minus the padding byte at the very end (if it exists)' is a color index value to                                       //be copied to the row.                                      Pixels = new Color[Count];                                        for (int k = 0; k < Count; k++)                                          Pixels[k] = Palette[Reader.ReadByte()];                                        Texture.SetData<Color>(Pixels' 0' Count);                                      break;                                  case 0x09:                                      //Leave the next count rows as transparent.                                      for (int k = 0; k < Count; k++)                                      {                                          Pixels = new Color[Width];                                          for (int l = 0; l < Width; l++)                                              Pixels[l] = Color.Transparent;                                            Texture.SetData<Color>(Pixels' 0' Width);                                      }                                      break;                              }                          }                          break;                  }
Missing Default,Files.IFF,SPRFrame,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\IFF\SPR.cs,SPRFrame,The following switch statement is missing a default case: switch(PxCmd)                              {                                  case 0x01:                                      //Leave the next pixel count pixels as transparent. This pixel command has no pixel data.                                      Pixels = new Color[Count];                                      for (int k = 0; k < Count; k++)                                          Pixels[k] = Color.Transparent;                                        Texture.SetData<Color>(Pixels' 0' Count);                                      break;                                  case 0x02:                                      //Fill the next pixel count pixels with a single palette color.                                       //The pixel data is two bytes: the first byte denotes the palette color                                       //index' and the second byte is padding (which is always equal to the                                       //first byte but is ignored).                                      Pixels = new Color[Count];                                      byte ColorIndex = Reader.ReadByte();                                        for (int k = 0; k < Count; k++)                                          Pixels[k] = Palette[ColorIndex];                                        Texture.SetData<Color>(Pixels' 0' Count);                                      break;                                  case 0x03:                                      //Set the next pixel count pixels to the palette color indices defined by                                       //the pixel data provided directly after this command. Each byte in the pixel data'                                       //minus the padding byte at the very end (if it exists)' is a color index value to                                       //be copied to the row.                                      Pixels = new Color[Count];                                        for (int k = 0; k < Count; k++)                                          Pixels[k] = Palette[Reader.ReadByte()];                                        Texture.SetData<Color>(Pixels' 0' Count);                                      break;                                  case 0x09:                                      //Leave the next count rows as transparent.                                      for (int k = 0; k < Count; k++)                                      {                                          Pixels = new Color[Width];                                          for (int l = 0; l < Width; l++)                                              Pixels[l] = Color.Transparent;                                            Texture.SetData<Color>(Pixels' 0' Width);                                      }                                      break;                              }
Missing Default,Files.IFF,SPR2Frame,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\IFF\SPR2.cs,SPR2Frame,The following switch statement is missing a default case: switch(Command)                  {                      //Fill this row with pixel data that directly follows; the count byte of the row command denotes                       //the size in bytes of the row's command/count bytes together with the supplied pixel data. In                       //the pixel data' each pixel command consists of a 3-bit/13-bit command/count header followed by a                       //block of pixel data padded to a multiple of 2 bytes. If the row is not filled completely' the                       //remainder is transparent. The pixel commands are:                      case 0x00:                          for(int i = 0; i < Count; i++)                          {                              ushort PxMarker = Reader.ReadUShort();                              var PxCommand = PxMarker >> 13;                              var PxCount = PxMarker & 0x1FFF;                                Color[] Colors;                                switch(PxCommand)                              {                                  //Set the next pixel count pixels in the z-buffer and color channels to the values defined                                   //by the pixel data provided directly after this command. Every group of 2 bytes in the pixel                                   //data provides a luminosity (z-buffer) or color index (color) value to be copied to the row                                   //for the z-buffer channel and color channel' respectively' in that order' using the full                                   //opacity value of 255 for each pixel that is not the transparent color.                                  case 0x01:                                      Colors = new Color[PxCount];                                        for(int j = 0; j < PxCount; j++)                                      {                                          byte Luminosity = Reader.ReadByte();                                          byte ColorIndex = Reader.ReadByte();                                          Colors[j] = Palette[ColorIndex];                                          ZBuffer[j] = Luminosity;                                      }                                      Texture.SetData<Color>(Colors' 0' Colors.Length);                                      break;                                      //Set the next pixel count pixels in the z-buffer' color' and alpha channels to the values                                       //defined by the pixel data provided directly after this command. Every group of 3 bytes in                                       //the pixel data' minus the padding byte at the very end (if it exists)' provides a luminosity                                       //(z-buffer and alpha) or color index (color) value to be copied to the row for the z-buffer'                                       //color' and alpha channels' respectively' in that order. The alpha channel data is grayscale                                       //in the range 0-31' and the z buffer is in range 0-255.                                  case 0x02:                                      Colors = new Color[PxCount];                                        for (int j = 0; j < PxCount; j++)                                      {                                          byte Luminosity = Reader.ReadByte();                                          byte ColorIndex = Reader.ReadByte();                                          byte Alpha = (byte)(Reader.ReadByte() * 8.2258064516129032258064516129032);                                          Colors[j] = Palette[ColorIndex];                                          Colors[j].A = Alpha;                                          ZBuffer[j] = Luminosity;                                      }                                      Texture.SetData<Color>(Colors' 0' Colors.Length);                                      break;                                  //Leave the next pixel count pixels in the color channel filled with the transparent color'                                   //in the z-buffer channel filled with 255' and in the alpha channel filled with 0. This pixel                                   //command has no pixel data.                                  case 0x03:                                      Colors = new Color[PxCount];                                        for (int j = 0; j < PxCount; j++)                                      {                                          Colors[j] = Color.Transparent;                                          Colors[j].A = 0;                                          ZBuffer[j] = 255;                                      }                                      Texture.SetData<Color>(Colors' 0' Colors.Length);                                      break;                                  //Set the next pixel count pixels in the color channel to the palette color indices defined by                                   //the pixel data provided directly after this command.Every byte in the pixel data' minus the                                   //padding byte at the very end(if it exists)' provides a color index value to be copied to the                                   //row for the color channel using the full opacity value of 255 and the closest z-buffer value                                   //of 0 if the pixel is not the transparent color' or otherwise the no opacity value of 0 and the                                   //farthest z-buffer value of 255.                                  case 0x06:                                      Colors = new Color[PxCount];                                        for (int j = 0; j < PxCount; j++)                                      {                                          byte ColorIndex = Reader.ReadByte();                                          Colors[j] = Palette[ColorIndex];                                            Colors[j].A = (Palette[ColorIndex] != Color.Transparent) ? (byte)255 : (byte)0;                                          ZBuffer[j] = (Palette[ColorIndex] != Color.Transparent) ? (byte)0 : (byte)255;                                      }                                      Texture.SetData<Color>(Colors' 0' Colors.Length);                                      break;                              }                          }                          break;                      //Leave the next count rows in the color channel filled with the transparent color'                       //in the z-buffer channel filled with 255' and in the alpha channel filled with 0.                      case 0x04:                          for (int j = 0; j < Count; j++)                          {                              Color[] Colors = new Color[Width];                                for (int k = 0; k < Width; k++)                              {                                  Colors[k] = Color.Transparent;                                  Colors[k].A = 0;                                  ZBuffer[k] = 255;                              }                                Texture.SetData<Color>(Colors' 0' Colors.Length);                          }                          break;                      case 0x05:                          EndMarker = true;                          break;                  }
Missing Default,Files.IFF,SPR2Frame,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\IFF\SPR2.cs,SPR2Frame,The following switch statement is missing a default case: switch(PxCommand)                              {                                  //Set the next pixel count pixels in the z-buffer and color channels to the values defined                                   //by the pixel data provided directly after this command. Every group of 2 bytes in the pixel                                   //data provides a luminosity (z-buffer) or color index (color) value to be copied to the row                                   //for the z-buffer channel and color channel' respectively' in that order' using the full                                   //opacity value of 255 for each pixel that is not the transparent color.                                  case 0x01:                                      Colors = new Color[PxCount];                                        for(int j = 0; j < PxCount; j++)                                      {                                          byte Luminosity = Reader.ReadByte();                                          byte ColorIndex = Reader.ReadByte();                                          Colors[j] = Palette[ColorIndex];                                          ZBuffer[j] = Luminosity;                                      }                                      Texture.SetData<Color>(Colors' 0' Colors.Length);                                      break;                                      //Set the next pixel count pixels in the z-buffer' color' and alpha channels to the values                                       //defined by the pixel data provided directly after this command. Every group of 3 bytes in                                       //the pixel data' minus the padding byte at the very end (if it exists)' provides a luminosity                                       //(z-buffer and alpha) or color index (color) value to be copied to the row for the z-buffer'                                       //color' and alpha channels' respectively' in that order. The alpha channel data is grayscale                                       //in the range 0-31' and the z buffer is in range 0-255.                                  case 0x02:                                      Colors = new Color[PxCount];                                        for (int j = 0; j < PxCount; j++)                                      {                                          byte Luminosity = Reader.ReadByte();                                          byte ColorIndex = Reader.ReadByte();                                          byte Alpha = (byte)(Reader.ReadByte() * 8.2258064516129032258064516129032);                                          Colors[j] = Palette[ColorIndex];                                          Colors[j].A = Alpha;                                          ZBuffer[j] = Luminosity;                                      }                                      Texture.SetData<Color>(Colors' 0' Colors.Length);                                      break;                                  //Leave the next pixel count pixels in the color channel filled with the transparent color'                                   //in the z-buffer channel filled with 255' and in the alpha channel filled with 0. This pixel                                   //command has no pixel data.                                  case 0x03:                                      Colors = new Color[PxCount];                                        for (int j = 0; j < PxCount; j++)                                      {                                          Colors[j] = Color.Transparent;                                          Colors[j].A = 0;                                          ZBuffer[j] = 255;                                      }                                      Texture.SetData<Color>(Colors' 0' Colors.Length);                                      break;                                  //Set the next pixel count pixels in the color channel to the palette color indices defined by                                   //the pixel data provided directly after this command.Every byte in the pixel data' minus the                                   //padding byte at the very end(if it exists)' provides a color index value to be copied to the                                   //row for the color channel using the full opacity value of 255 and the closest z-buffer value                                   //of 0 if the pixel is not the transparent color' or otherwise the no opacity value of 0 and the                                   //farthest z-buffer value of 255.                                  case 0x06:                                      Colors = new Color[PxCount];                                        for (int j = 0; j < PxCount; j++)                                      {                                          byte ColorIndex = Reader.ReadByte();                                          Colors[j] = Palette[ColorIndex];                                            Colors[j].A = (Palette[ColorIndex] != Color.Transparent) ? (byte)255 : (byte)0;                                          ZBuffer[j] = (Palette[ColorIndex] != Color.Transparent) ? (byte)0 : (byte)255;                                      }                                      Texture.SetData<Color>(Colors' 0' Colors.Length);                                      break;                              }
Missing Default,Files.IFF,STR,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\IFF\STR.cs,STR,The following switch statement is missing a default case: switch(Version)                  {                      case 0:                          NumStrings = Reader.ReadUShort();                            for (int i = 0; i < NumStrings; i++)                          {                              TranslatedString Str = new TranslatedString();                              Str.LangCode = LanguageCodes.unused;                              Str.TranslatedStr = Reader.ReadPascalString();                                if (Strings.ContainsKey(Str.LangCode))                                  Strings[Str.LangCode].Add(Str);                              else                              {                                  List<TranslatedString> LanguageSet = new List<TranslatedString>();                                  LanguageSet.Add(Str);                                  Strings.Add(Str.LangCode' LanguageSet);                              }                          }                            break;                      case -1:                          NumStrings = Reader.ReadUShort();                            for (int i = 0; i < NumStrings; i++)                          {                              TranslatedString Str = new TranslatedString();                              Str.LangCode = LanguageCodes.unused;                              Str.TranslatedStr = Reader.ReadCString();                                if (Strings.ContainsKey(Str.LangCode))                                  Strings[Str.LangCode].Add(Str);                              else                              {                                  List<TranslatedString> LanguageSet = new List<TranslatedString>();                                  LanguageSet.Add(Str);                                  Strings.Add(Str.LangCode' LanguageSet);                              }                          }                            break;                      case -2:                          NumStrings = Reader.ReadUShort();                            for (int i = 0; i < NumStrings; i++)                          {                              TranslatedString Str = new TranslatedString();                              Str.LangCode = LanguageCodes.unused;                              Str.TranslatedStr = Reader.ReadCString();                              Reader.ReadCString(); //Comment                                if (Strings.ContainsKey(Str.LangCode))                                  Strings[Str.LangCode].Add(Str);                              else                              {                                  List<TranslatedString> LanguageSet = new List<TranslatedString>();                                  LanguageSet.Add(Str);                                  Strings.Add(Str.LangCode' LanguageSet);                              }                          }                            break;                      case -3:                          NumStrings = Reader.ReadUShort();                            for (int i = 0; i < NumStrings; i++)                          {                              TranslatedString Str = new TranslatedString();                              Str.LangCode = (LanguageCodes)Reader.ReadByte();                              Str.TranslatedStr = Reader.ReadCString();                              Reader.ReadCString(); //Comment                                if (Strings.ContainsKey(Str.LangCode))                                  Strings[Str.LangCode].Add(Str);                              else                              {                                  List<TranslatedString> LanguageSet = new List<TranslatedString>();                                  LanguageSet.Add(Str);                                  Strings.Add(Str.LangCode' LanguageSet);                              }                          }                            break;                      case -4:                          byte LanguageSets = Reader.ReadByte();                          for (int i = 0; i < LanguageSets; i++)                          {                              NumStrings = Reader.ReadUShort();                                for (int j = 0; j < NumStrings; j++)                              {                                  TranslatedString Str = new TranslatedString();                                  Str.LangCode = (LanguageCodes)(Reader.ReadByte() + 1);                                  Str.TranslatedStr = Reader.ReadString();                                    Reader.ReadString(); //Comment                                    if (Strings.ContainsKey(Str.LangCode))                                      Strings[Str.LangCode].Add(Str);                                  else                                  {                                      List<TranslatedString> LanguageSet = new List<TranslatedString>();                                      LanguageSet.Add(Str);                                      Strings.Add(Str.LangCode' LanguageSet);                                  }                              }                          }                            break;                  }
Missing Default,Files.IFF,TTAs,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\TSOClient\Files\Files\IFF\TTAs.cs,TTAs,The following switch statement is missing a default case: switch (Version)                  {                      case 0:                          NumStrings = Reader.ReadUShort();                            for (int i = 0; i < NumStrings; i++)                          {                              TranslatedString Str = new TranslatedString();                              Str.LangCode = LanguageCodes.unused;                              Str.TranslatedStr = Reader.ReadPascalString();                                if (Strings.ContainsKey(Str.LangCode))                                  Strings[Str.LangCode].Add(Str);                              else                              {                                  List<TranslatedString> LanguageSet = new List<TranslatedString>();                                  LanguageSet.Add(Str);                                  Strings.Add(Str.LangCode' LanguageSet);                              }                          }                            break;                      case -1:                          NumStrings = Reader.ReadUShort();                            for (int i = 0; i < NumStrings; i++)                          {                              TranslatedString Str = new TranslatedString();                              Str.LangCode = LanguageCodes.unused;                              Str.TranslatedStr = Reader.ReadCString();                                if (Strings.ContainsKey(Str.LangCode))                                  Strings[Str.LangCode].Add(Str);                              else                              {                                  List<TranslatedString> LanguageSet = new List<TranslatedString>();                                  LanguageSet.Add(Str);                                  Strings.Add(Str.LangCode' LanguageSet);                              }                          }                            break;                      case -2:                          NumStrings = Reader.ReadUShort();                            for (int i = 0; i < NumStrings; i++)                          {                              TranslatedString Str = new TranslatedString();                              Str.LangCode = LanguageCodes.unused;                              Str.TranslatedStr = Reader.ReadCString();                              Reader.ReadCString(); //Comment                                if (Strings.ContainsKey(Str.LangCode))                                  Strings[Str.LangCode].Add(Str);                              else                              {                                  List<TranslatedString> LanguageSet = new List<TranslatedString>();                                  LanguageSet.Add(Str);                                  Strings.Add(Str.LangCode' LanguageSet);                              }                          }                            break;                      case -3:                          NumStrings = Reader.ReadUShort();                            for (int i = 0; i < NumStrings; i++)                          {                              TranslatedString Str = new TranslatedString();                              Str.LangCode = (LanguageCodes)Reader.ReadByte();                              Str.TranslatedStr = Reader.ReadCString();                              Reader.ReadCString(); //Comment                                if (Strings.ContainsKey(Str.LangCode))                                  Strings[Str.LangCode].Add(Str);                              else                              {                                  List<TranslatedString> LanguageSet = new List<TranslatedString>();                                  LanguageSet.Add(Str);                                  Strings.Add(Str.LangCode' LanguageSet);                              }                          }                            break;                      case -4:                          byte LanguageSets = Reader.ReadByte();                          for (int i = 0; i < LanguageSets; i++)                          {                              NumStrings = Reader.ReadUShort();                                for (int j = 0; j < NumStrings; j++)                              {                                  TranslatedString Str = new TranslatedString();                                  Str.LangCode = (LanguageCodes)(Reader.ReadByte() + 1);                                  Str.TranslatedStr = Reader.ReadString();                                  Reader.ReadString(); //Comment                                    if (Strings.ContainsKey(Str.LangCode))                                      Strings[Str.LangCode].Add(Str);                                  else                                  {                                      List<TranslatedString> LanguageSet = new List<TranslatedString>();                                      LanguageSet.Add(Str);                                      Strings.Add(Str.LangCode' LanguageSet);                                  }                              }                          }                            break;                  }
Missing Default,Paloma,TargaImage,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,LoadImageBytes,The following switch statement is missing a default case: switch (this.objTargaHeader.FirstPixelDestination)                      {                          case FirstPixelDestination.TOP_LEFT:                              blnRowsReverse = false;                              blnEachRowReverse = true;                              break;                            case FirstPixelDestination.TOP_RIGHT:                              blnRowsReverse = false;                              blnEachRowReverse = false;                              break;                            case FirstPixelDestination.BOTTOM_LEFT:                              blnRowsReverse = true;                              blnEachRowReverse = true;                              break;                            case FirstPixelDestination.BOTTOM_RIGHT:                          case FirstPixelDestination.UNKNOWN:                              blnRowsReverse = true;                              blnEachRowReverse = false;                                break;                      }
Missing Default,Paloma,TargaImage,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,GetPixelFormat,The following switch statement is missing a default case: switch (this.objTargaHeader.PixelDepth)              {                  case 8:                      pfTargaPixelFormat = PixelFormat.Format8bppIndexed;                      break;                    case 16:                      //PixelFormat.Format16bppArgb1555                      //PixelFormat.Format16bppRgb555                      if (this.Format == TGAFormat.NEW_TGA)                      {                          switch (this.objTargaExtensionArea.AttributesType)                          {                              case 0:                              case 1:                              case 2: // no alpha data                                  pfTargaPixelFormat = PixelFormat.Format16bppRgb555;                                  break;                                case 3: // useful alpha data                                  pfTargaPixelFormat = PixelFormat.Format16bppArgb1555;                                  break;                          }                      }                      else                      {                          pfTargaPixelFormat = PixelFormat.Format16bppRgb555;                      }                        break;                    case 24:                      pfTargaPixelFormat = PixelFormat.Format24bppRgb;                      break;                    case 32:                      //PixelFormat.Format32bppArgb                      //PixelFormat.Format32bppPArgb                      //PixelFormat.Format32bppRgb                      if (this.Format == TGAFormat.NEW_TGA)                      {                          switch (this.objTargaExtensionArea.AttributesType)                          {                                                            case 1:                              case 2: // no alpha data                                  pfTargaPixelFormat = PixelFormat.Format32bppRgb;                                  break;                                case 0:                              case 3: // useful alpha data                                  pfTargaPixelFormat = PixelFormat.Format32bppArgb;                                  break;                                case 4: // premultiplied alpha data                                  pfTargaPixelFormat = PixelFormat.Format32bppPArgb;                                  break;                            }                      }                      else                      {                          pfTargaPixelFormat = PixelFormat.Format32bppRgb;                          break;                      }                                                                    break;                                }
Missing Default,Paloma,TargaImage,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,GetPixelFormat,The following switch statement is missing a default case: switch (this.objTargaExtensionArea.AttributesType)                          {                              case 0:                              case 1:                              case 2: // no alpha data                                  pfTargaPixelFormat = PixelFormat.Format16bppRgb555;                                  break;                                case 3: // useful alpha data                                  pfTargaPixelFormat = PixelFormat.Format16bppArgb1555;                                  break;                          }
Missing Default,Paloma,TargaImage,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,GetPixelFormat,The following switch statement is missing a default case: switch (this.objTargaExtensionArea.AttributesType)                          {                                                            case 1:                              case 2: // no alpha data                                  pfTargaPixelFormat = PixelFormat.Format32bppRgb;                                  break;                                case 0:                              case 3: // useful alpha data                                  pfTargaPixelFormat = PixelFormat.Format32bppArgb;                                  break;                                case 4: // premultiplied alpha data                                  pfTargaPixelFormat = PixelFormat.Format32bppPArgb;                                  break;                            }
Missing Default,Paloma,TargaImage,D:\research\architectureSmells\repos\Afr0_Project-Dollhouse\Other\libs\TargaImage\TargaImage.cs,LoadThumbnail,The following switch statement is missing a default case: switch (this.objTargaHeader.FirstPixelDestination)                          {                              case FirstPixelDestination.TOP_LEFT:                                  break;                                case FirstPixelDestination.TOP_RIGHT:                                  blnRowsReverse = false;                                  blnEachRowReverse = false;                                  break;                                case FirstPixelDestination.BOTTOM_LEFT:                                  break;                                case FirstPixelDestination.BOTTOM_RIGHT:                              case FirstPixelDestination.UNKNOWN:                                  blnRowsReverse = true;                                  blnEachRowReverse = false;                                    break;                          }
