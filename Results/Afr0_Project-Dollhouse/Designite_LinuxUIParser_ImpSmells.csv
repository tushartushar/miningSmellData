Implementation smell,Namespace,Class,File,Method,Description
Long Method,UIParser.Nodes,AssignmentNode,C:\repos\Afr0_Project-Dollhouse\Other\libs\UIParser\UIParser\Nodes\AssignmentNode.cs,InitChildren,The method has 274 lines of code.
Magic Number,UIParser.Nodes,AddButtonNode,C:\repos\Afr0_Project-Dollhouse\Other\libs\UIParser\UIParser\Nodes\AddButtonNode.cs,InitChildren,The following statement contains a magic number: if (nodes[2].AstNode != null)                  AssignmentBlock = (AssignmentBlockNode)nodes[2].AstNode;
Magic Number,UIParser.Nodes,AddButtonNode,C:\repos\Afr0_Project-Dollhouse\Other\libs\UIParser\UIParser\Nodes\AddButtonNode.cs,InitChildren,The following statement contains a magic number: if (nodes[2].AstNode != null)                  AssignmentBlock = (AssignmentBlockNode)nodes[2].AstNode;
Magic Number,UIParser.Nodes,AddFormatedTextNode,C:\repos\Afr0_Project-Dollhouse\Other\libs\UIParser\UIParser\Nodes\AddFormatedTextNode.cs,InitChildren,The following statement contains a magic number: if (nodes[2].AstNode != null)                  AssignmentBlock = (AssignmentBlockNode)nodes[2].AstNode;
Magic Number,UIParser.Nodes,AddFormatedTextNode,C:\repos\Afr0_Project-Dollhouse\Other\libs\UIParser\UIParser\Nodes\AddFormatedTextNode.cs,InitChildren,The following statement contains a magic number: if (nodes[2].AstNode != null)                  AssignmentBlock = (AssignmentBlockNode)nodes[2].AstNode;
Magic Number,UIParser.Nodes,AddListboxNode,C:\repos\Afr0_Project-Dollhouse\Other\libs\UIParser\UIParser\Nodes\AddListboxNode.cs,InitChildren,The following statement contains a magic number: if (nodes[2].AstNode != null)                  AssignmentBlock = (AssignmentBlockNode)nodes[2].AstNode;
Magic Number,UIParser.Nodes,AddListboxNode,C:\repos\Afr0_Project-Dollhouse\Other\libs\UIParser\UIParser\Nodes\AddListboxNode.cs,InitChildren,The following statement contains a magic number: if (nodes[2].AstNode != null)                  AssignmentBlock = (AssignmentBlockNode)nodes[2].AstNode;
Magic Number,UIParser.Nodes,AddProgressBarNode,C:\repos\Afr0_Project-Dollhouse\Other\libs\UIParser\UIParser\Nodes\AddProgressBarNode.cs,InitChildren,The following statement contains a magic number: if (nodes[2].AstNode != null)                  AssignmentBlock = (AssignmentBlockNode)nodes[2].AstNode;
Magic Number,UIParser.Nodes,AddProgressBarNode,C:\repos\Afr0_Project-Dollhouse\Other\libs\UIParser\UIParser\Nodes\AddProgressBarNode.cs,InitChildren,The following statement contains a magic number: if (nodes[2].AstNode != null)                  AssignmentBlock = (AssignmentBlockNode)nodes[2].AstNode;
Magic Number,UIParser.Nodes,AddSliderNode,C:\repos\Afr0_Project-Dollhouse\Other\libs\UIParser\UIParser\Nodes\AddSliderNode.cs,InitChildren,The following statement contains a magic number: if (nodes[2].AstNode != null)                  AssignmentBlock = (AssignmentBlockNode)nodes[2].AstNode;
Magic Number,UIParser.Nodes,AddSliderNode,C:\repos\Afr0_Project-Dollhouse\Other\libs\UIParser\UIParser\Nodes\AddSliderNode.cs,InitChildren,The following statement contains a magic number: if (nodes[2].AstNode != null)                  AssignmentBlock = (AssignmentBlockNode)nodes[2].AstNode;
Magic Number,UIParser.Nodes,AddTextEditNode,C:\repos\Afr0_Project-Dollhouse\Other\libs\UIParser\UIParser\Nodes\AddTextEditNode.cs,InitChildren,The following statement contains a magic number: if (nodes[2].AstNode != null)                  AssignmentBlock = (AssignmentBlockNode)nodes[2].AstNode;
Magic Number,UIParser.Nodes,AddTextEditNode,C:\repos\Afr0_Project-Dollhouse\Other\libs\UIParser\UIParser\Nodes\AddTextEditNode.cs,InitChildren,The following statement contains a magic number: if (nodes[2].AstNode != null)                  AssignmentBlock = (AssignmentBlockNode)nodes[2].AstNode;
Magic Number,UIParser.Nodes,AddTextNode,C:\repos\Afr0_Project-Dollhouse\Other\libs\UIParser\UIParser\Nodes\AddTextNode.cs,InitChildren,The following statement contains a magic number: if (nodes[2].AstNode != null)                  AssignmentBlock = (AssignmentBlockNode)nodes[2].AstNode;
Magic Number,UIParser.Nodes,AddTextNode,C:\repos\Afr0_Project-Dollhouse\Other\libs\UIParser\UIParser\Nodes\AddTextNode.cs,InitChildren,The following statement contains a magic number: if (nodes[2].AstNode != null)                  AssignmentBlock = (AssignmentBlockNode)nodes[2].AstNode;
Magic Number,UIParser.Nodes,AssignmentNode,C:\repos\Afr0_Project-Dollhouse\Other\libs\UIParser\UIParser\Nodes\AssignmentNode.cs,InitChildren,The following statement contains a magic number: switch(nodes[0].Token.Text)              {                  case "stringDir":                      TypeOfAssignment = AssignmentType.StringDirAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "stringTable":                      TypeOfAssignment = AssignmentType.StringTableAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "leftArrowImage":                      TypeOfAssignment = AssignmentType.LeftArrowImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "rightArrowImage":                      TypeOfAssignment = AssignmentType.RightArrowImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "tracking":                      TypeOfAssignment = AssignmentType.TrackingAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "trigger":                      TypeOfAssignment = AssignmentType.TriggerAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "image":                      TypeOfAssignment = AssignmentType.ImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "position":                      TypeOfAssignment = AssignmentType.PositionAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "size":                      TypeOfAssignment = AssignmentType.SizeAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "id":                      TypeOfAssignment = AssignmentType.IDAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "orientation":                      TypeOfAssignment = AssignmentType.OrientationAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "opaque":                      TypeOfAssignment = AssignmentType.OpaqueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "assetID":                      TypeOfAssignment = AssignmentType.AssetIDAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "stringIndex":                      TypeOfAssignment = AssignmentType.StringIndexAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "text":                      TypeOfAssignment = AssignmentType.TextAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "font":                      TypeOfAssignment = AssignmentType.FontAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "textColorSelected":                      TypeOfAssignment = AssignmentType.TextColorSelectedAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textColorHighlighted":                      TypeOfAssignment = AssignmentType.TextColorHighlightedAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textColorDisabled":                      TypeOfAssignment = AssignmentType.TextColorDisabledAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textButton":                      TypeOfAssignment = AssignmentType.TextButtonAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "color":                      TypeOfAssignment = AssignmentType.ColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "alignment":                      TypeOfAssignment = AssignmentType.AlignmentAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "backColor":                      TypeOfAssignment = AssignmentType.BackColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "frameOnFocus":                      TypeOfAssignment = AssignmentType.FrameOnFocusAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "transparent":                      TypeOfAssignment = AssignmentType.TransparentAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "capacity":                      TypeOfAssignment = AssignmentType.CapacityAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "lines":                      TypeOfAssignment = AssignmentType.LinesAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "flashOnEmpty":                      TypeOfAssignment = AssignmentType.FlashOnEmptyAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "thumbImageSize":                      TypeOfAssignment = AssignmentType.ThumbImageSizeAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "thumbImageOffsets":                      TypeOfAssignment = AssignmentType.ThumbImageOffsetsAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "thumbButtonImage":                      TypeOfAssignment = AssignmentType.ThumbButtonImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "wrapped":                      TypeOfAssignment = AssignmentType.WrappedAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "textColor":                      TypeOfAssignment = AssignmentType.TextColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "mode":                      TypeOfAssignment = AssignmentType.ModeAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "scrollBarImage":                      TypeOfAssignment = AssignmentType.ScrollBarImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "scrollBarGutter":                      TypeOfAssignment = AssignmentType.ScrollBarGutterAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "scrollBarType":                      TypeOfAssignment = AssignmentType.ScrollBarTypeAssignment;                      Value = Value = int.Parse(nodes[2].Token.Text);                      break;                  case "enableIME":                      TypeOfAssignment = AssignmentType.EnableIMEAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "highlighted":                      TypeOfAssignment = AssignmentType.HighlightedAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "minValue":                      TypeOfAssignment = AssignmentType.MinValueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "maxValue":                      TypeOfAssignment = AssignmentType.MaxValueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "pageSize":                      TypeOfAssignment = AssignmentType.PageSizeAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "cursorColor":                      TypeOfAssignment = AssignmentType.CursorColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "toolTip":                      TypeOfAssignment = AssignmentType.TooltipAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "tooltip":                      TypeOfAssignment = AssignmentType.TooltipAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "MouseTransparent":                      TypeOfAssignment = AssignmentType.MouseTransparentAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "imagestates":                      TypeOfAssignment = AssignmentType.ImageStatesAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "backgroundColor":                      TypeOfAssignment = AssignmentType.BackgroundColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "framecolor":                      TypeOfAssignment = AssignmentType.FrameColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "alignments":                      TypeOfAssignment = AssignmentType.AlignmentsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "visibleRows":                      TypeOfAssignment = AssignmentType.VisibleRowsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "columns":                      TypeOfAssignment = AssignmentType.ColumnsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "rowHeight":                      TypeOfAssignment = AssignmentType.RowHeightAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "fillColor":                      TypeOfAssignment = AssignmentType.FillColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "selectionFillColor":                      TypeOfAssignment = AssignmentType.SelectionFillColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "cursor":                      TypeOfAssignment = AssignmentType.CursorAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "lineHeight":                      TypeOfAssignment = AssignmentType.LineHeightAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetL":                      TypeOfAssignment = AssignmentType.EdgeOffsetLAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetR":                      TypeOfAssignment = AssignmentType.EdgeOffsetRAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetT":                      TypeOfAssignment = AssignmentType.EdgeOffsetTAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetB":                      TypeOfAssignment = AssignmentType.EdgeOffsetBAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "foregroundImage":                      TypeOfAssignment = AssignmentType.ForegroundImageAssignment;                      Value = nodes[2].Token.Text;                      break;                  case "backgroundImage":                      TypeOfAssignment = AssignmentType.BackgroundImageAssignment;                      Value = nodes[2].Token.Text;                      break;                  case "value":                      TypeOfAssignment = AssignmentType.ValueAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "useBackgroundImage":                      TypeOfAssignment = AssignmentType.UseBackgroundImageAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "enabled":                      TypeOfAssignment = AssignmentType.EnabledAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "fittext":                      TypeOfAssignment = AssignmentType.FitTextAssignment;                      Value = (int)nodes[2].Token.Value;                      break;              }
Magic Number,UIParser.Nodes,AssignmentNode,C:\repos\Afr0_Project-Dollhouse\Other\libs\UIParser\UIParser\Nodes\AssignmentNode.cs,InitChildren,The following statement contains a magic number: switch(nodes[0].Token.Text)              {                  case "stringDir":                      TypeOfAssignment = AssignmentType.StringDirAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "stringTable":                      TypeOfAssignment = AssignmentType.StringTableAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "leftArrowImage":                      TypeOfAssignment = AssignmentType.LeftArrowImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "rightArrowImage":                      TypeOfAssignment = AssignmentType.RightArrowImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "tracking":                      TypeOfAssignment = AssignmentType.TrackingAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "trigger":                      TypeOfAssignment = AssignmentType.TriggerAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "image":                      TypeOfAssignment = AssignmentType.ImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "position":                      TypeOfAssignment = AssignmentType.PositionAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "size":                      TypeOfAssignment = AssignmentType.SizeAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "id":                      TypeOfAssignment = AssignmentType.IDAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "orientation":                      TypeOfAssignment = AssignmentType.OrientationAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "opaque":                      TypeOfAssignment = AssignmentType.OpaqueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "assetID":                      TypeOfAssignment = AssignmentType.AssetIDAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "stringIndex":                      TypeOfAssignment = AssignmentType.StringIndexAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "text":                      TypeOfAssignment = AssignmentType.TextAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "font":                      TypeOfAssignment = AssignmentType.FontAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "textColorSelected":                      TypeOfAssignment = AssignmentType.TextColorSelectedAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textColorHighlighted":                      TypeOfAssignment = AssignmentType.TextColorHighlightedAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textColorDisabled":                      TypeOfAssignment = AssignmentType.TextColorDisabledAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textButton":                      TypeOfAssignment = AssignmentType.TextButtonAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "color":                      TypeOfAssignment = AssignmentType.ColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "alignment":                      TypeOfAssignment = AssignmentType.AlignmentAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "backColor":                      TypeOfAssignment = AssignmentType.BackColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "frameOnFocus":                      TypeOfAssignment = AssignmentType.FrameOnFocusAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "transparent":                      TypeOfAssignment = AssignmentType.TransparentAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "capacity":                      TypeOfAssignment = AssignmentType.CapacityAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "lines":                      TypeOfAssignment = AssignmentType.LinesAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "flashOnEmpty":                      TypeOfAssignment = AssignmentType.FlashOnEmptyAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "thumbImageSize":                      TypeOfAssignment = AssignmentType.ThumbImageSizeAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "thumbImageOffsets":                      TypeOfAssignment = AssignmentType.ThumbImageOffsetsAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "thumbButtonImage":                      TypeOfAssignment = AssignmentType.ThumbButtonImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "wrapped":                      TypeOfAssignment = AssignmentType.WrappedAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "textColor":                      TypeOfAssignment = AssignmentType.TextColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "mode":                      TypeOfAssignment = AssignmentType.ModeAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "scrollBarImage":                      TypeOfAssignment = AssignmentType.ScrollBarImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "scrollBarGutter":                      TypeOfAssignment = AssignmentType.ScrollBarGutterAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "scrollBarType":                      TypeOfAssignment = AssignmentType.ScrollBarTypeAssignment;                      Value = Value = int.Parse(nodes[2].Token.Text);                      break;                  case "enableIME":                      TypeOfAssignment = AssignmentType.EnableIMEAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "highlighted":                      TypeOfAssignment = AssignmentType.HighlightedAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "minValue":                      TypeOfAssignment = AssignmentType.MinValueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "maxValue":                      TypeOfAssignment = AssignmentType.MaxValueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "pageSize":                      TypeOfAssignment = AssignmentType.PageSizeAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "cursorColor":                      TypeOfAssignment = AssignmentType.CursorColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "toolTip":                      TypeOfAssignment = AssignmentType.TooltipAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "tooltip":                      TypeOfAssignment = AssignmentType.TooltipAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "MouseTransparent":                      TypeOfAssignment = AssignmentType.MouseTransparentAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "imagestates":                      TypeOfAssignment = AssignmentType.ImageStatesAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "backgroundColor":                      TypeOfAssignment = AssignmentType.BackgroundColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "framecolor":                      TypeOfAssignment = AssignmentType.FrameColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "alignments":                      TypeOfAssignment = AssignmentType.AlignmentsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "visibleRows":                      TypeOfAssignment = AssignmentType.VisibleRowsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "columns":                      TypeOfAssignment = AssignmentType.ColumnsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "rowHeight":                      TypeOfAssignment = AssignmentType.RowHeightAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "fillColor":                      TypeOfAssignment = AssignmentType.FillColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "selectionFillColor":                      TypeOfAssignment = AssignmentType.SelectionFillColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "cursor":                      TypeOfAssignment = AssignmentType.CursorAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "lineHeight":                      TypeOfAssignment = AssignmentType.LineHeightAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetL":                      TypeOfAssignment = AssignmentType.EdgeOffsetLAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetR":                      TypeOfAssignment = AssignmentType.EdgeOffsetRAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetT":                      TypeOfAssignment = AssignmentType.EdgeOffsetTAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetB":                      TypeOfAssignment = AssignmentType.EdgeOffsetBAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "foregroundImage":                      TypeOfAssignment = AssignmentType.ForegroundImageAssignment;                      Value = nodes[2].Token.Text;                      break;                  case "backgroundImage":                      TypeOfAssignment = AssignmentType.BackgroundImageAssignment;                      Value = nodes[2].Token.Text;                      break;                  case "value":                      TypeOfAssignment = AssignmentType.ValueAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "useBackgroundImage":                      TypeOfAssignment = AssignmentType.UseBackgroundImageAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "enabled":                      TypeOfAssignment = AssignmentType.EnabledAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "fittext":                      TypeOfAssignment = AssignmentType.FitTextAssignment;                      Value = (int)nodes[2].Token.Value;                      break;              }
Magic Number,UIParser.Nodes,AssignmentNode,C:\repos\Afr0_Project-Dollhouse\Other\libs\UIParser\UIParser\Nodes\AssignmentNode.cs,InitChildren,The following statement contains a magic number: switch(nodes[0].Token.Text)              {                  case "stringDir":                      TypeOfAssignment = AssignmentType.StringDirAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "stringTable":                      TypeOfAssignment = AssignmentType.StringTableAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "leftArrowImage":                      TypeOfAssignment = AssignmentType.LeftArrowImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "rightArrowImage":                      TypeOfAssignment = AssignmentType.RightArrowImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "tracking":                      TypeOfAssignment = AssignmentType.TrackingAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "trigger":                      TypeOfAssignment = AssignmentType.TriggerAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "image":                      TypeOfAssignment = AssignmentType.ImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "position":                      TypeOfAssignment = AssignmentType.PositionAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "size":                      TypeOfAssignment = AssignmentType.SizeAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "id":                      TypeOfAssignment = AssignmentType.IDAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "orientation":                      TypeOfAssignment = AssignmentType.OrientationAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "opaque":                      TypeOfAssignment = AssignmentType.OpaqueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "assetID":                      TypeOfAssignment = AssignmentType.AssetIDAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "stringIndex":                      TypeOfAssignment = AssignmentType.StringIndexAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "text":                      TypeOfAssignment = AssignmentType.TextAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "font":                      TypeOfAssignment = AssignmentType.FontAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "textColorSelected":                      TypeOfAssignment = AssignmentType.TextColorSelectedAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textColorHighlighted":                      TypeOfAssignment = AssignmentType.TextColorHighlightedAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textColorDisabled":                      TypeOfAssignment = AssignmentType.TextColorDisabledAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textButton":                      TypeOfAssignment = AssignmentType.TextButtonAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "color":                      TypeOfAssignment = AssignmentType.ColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "alignment":                      TypeOfAssignment = AssignmentType.AlignmentAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "backColor":                      TypeOfAssignment = AssignmentType.BackColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "frameOnFocus":                      TypeOfAssignment = AssignmentType.FrameOnFocusAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "transparent":                      TypeOfAssignment = AssignmentType.TransparentAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "capacity":                      TypeOfAssignment = AssignmentType.CapacityAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "lines":                      TypeOfAssignment = AssignmentType.LinesAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "flashOnEmpty":                      TypeOfAssignment = AssignmentType.FlashOnEmptyAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "thumbImageSize":                      TypeOfAssignment = AssignmentType.ThumbImageSizeAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "thumbImageOffsets":                      TypeOfAssignment = AssignmentType.ThumbImageOffsetsAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "thumbButtonImage":                      TypeOfAssignment = AssignmentType.ThumbButtonImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "wrapped":                      TypeOfAssignment = AssignmentType.WrappedAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "textColor":                      TypeOfAssignment = AssignmentType.TextColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "mode":                      TypeOfAssignment = AssignmentType.ModeAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "scrollBarImage":                      TypeOfAssignment = AssignmentType.ScrollBarImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "scrollBarGutter":                      TypeOfAssignment = AssignmentType.ScrollBarGutterAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "scrollBarType":                      TypeOfAssignment = AssignmentType.ScrollBarTypeAssignment;                      Value = Value = int.Parse(nodes[2].Token.Text);                      break;                  case "enableIME":                      TypeOfAssignment = AssignmentType.EnableIMEAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "highlighted":                      TypeOfAssignment = AssignmentType.HighlightedAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "minValue":                      TypeOfAssignment = AssignmentType.MinValueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "maxValue":                      TypeOfAssignment = AssignmentType.MaxValueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "pageSize":                      TypeOfAssignment = AssignmentType.PageSizeAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "cursorColor":                      TypeOfAssignment = AssignmentType.CursorColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "toolTip":                      TypeOfAssignment = AssignmentType.TooltipAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "tooltip":                      TypeOfAssignment = AssignmentType.TooltipAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "MouseTransparent":                      TypeOfAssignment = AssignmentType.MouseTransparentAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "imagestates":                      TypeOfAssignment = AssignmentType.ImageStatesAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "backgroundColor":                      TypeOfAssignment = AssignmentType.BackgroundColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "framecolor":                      TypeOfAssignment = AssignmentType.FrameColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "alignments":                      TypeOfAssignment = AssignmentType.AlignmentsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "visibleRows":                      TypeOfAssignment = AssignmentType.VisibleRowsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "columns":                      TypeOfAssignment = AssignmentType.ColumnsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "rowHeight":                      TypeOfAssignment = AssignmentType.RowHeightAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "fillColor":                      TypeOfAssignment = AssignmentType.FillColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "selectionFillColor":                      TypeOfAssignment = AssignmentType.SelectionFillColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "cursor":                      TypeOfAssignment = AssignmentType.CursorAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "lineHeight":                      TypeOfAssignment = AssignmentType.LineHeightAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetL":                      TypeOfAssignment = AssignmentType.EdgeOffsetLAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetR":                      TypeOfAssignment = AssignmentType.EdgeOffsetRAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetT":                      TypeOfAssignment = AssignmentType.EdgeOffsetTAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetB":                      TypeOfAssignment = AssignmentType.EdgeOffsetBAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "foregroundImage":                      TypeOfAssignment = AssignmentType.ForegroundImageAssignment;                      Value = nodes[2].Token.Text;                      break;                  case "backgroundImage":                      TypeOfAssignment = AssignmentType.BackgroundImageAssignment;                      Value = nodes[2].Token.Text;                      break;                  case "value":                      TypeOfAssignment = AssignmentType.ValueAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "useBackgroundImage":                      TypeOfAssignment = AssignmentType.UseBackgroundImageAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "enabled":                      TypeOfAssignment = AssignmentType.EnabledAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "fittext":                      TypeOfAssignment = AssignmentType.FitTextAssignment;                      Value = (int)nodes[2].Token.Value;                      break;              }
Magic Number,UIParser.Nodes,AssignmentNode,C:\repos\Afr0_Project-Dollhouse\Other\libs\UIParser\UIParser\Nodes\AssignmentNode.cs,InitChildren,The following statement contains a magic number: switch(nodes[0].Token.Text)              {                  case "stringDir":                      TypeOfAssignment = AssignmentType.StringDirAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "stringTable":                      TypeOfAssignment = AssignmentType.StringTableAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "leftArrowImage":                      TypeOfAssignment = AssignmentType.LeftArrowImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "rightArrowImage":                      TypeOfAssignment = AssignmentType.RightArrowImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "tracking":                      TypeOfAssignment = AssignmentType.TrackingAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "trigger":                      TypeOfAssignment = AssignmentType.TriggerAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "image":                      TypeOfAssignment = AssignmentType.ImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "position":                      TypeOfAssignment = AssignmentType.PositionAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "size":                      TypeOfAssignment = AssignmentType.SizeAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "id":                      TypeOfAssignment = AssignmentType.IDAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "orientation":                      TypeOfAssignment = AssignmentType.OrientationAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "opaque":                      TypeOfAssignment = AssignmentType.OpaqueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "assetID":                      TypeOfAssignment = AssignmentType.AssetIDAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "stringIndex":                      TypeOfAssignment = AssignmentType.StringIndexAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "text":                      TypeOfAssignment = AssignmentType.TextAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "font":                      TypeOfAssignment = AssignmentType.FontAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "textColorSelected":                      TypeOfAssignment = AssignmentType.TextColorSelectedAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textColorHighlighted":                      TypeOfAssignment = AssignmentType.TextColorHighlightedAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textColorDisabled":                      TypeOfAssignment = AssignmentType.TextColorDisabledAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textButton":                      TypeOfAssignment = AssignmentType.TextButtonAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "color":                      TypeOfAssignment = AssignmentType.ColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "alignment":                      TypeOfAssignment = AssignmentType.AlignmentAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "backColor":                      TypeOfAssignment = AssignmentType.BackColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "frameOnFocus":                      TypeOfAssignment = AssignmentType.FrameOnFocusAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "transparent":                      TypeOfAssignment = AssignmentType.TransparentAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "capacity":                      TypeOfAssignment = AssignmentType.CapacityAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "lines":                      TypeOfAssignment = AssignmentType.LinesAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "flashOnEmpty":                      TypeOfAssignment = AssignmentType.FlashOnEmptyAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "thumbImageSize":                      TypeOfAssignment = AssignmentType.ThumbImageSizeAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "thumbImageOffsets":                      TypeOfAssignment = AssignmentType.ThumbImageOffsetsAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "thumbButtonImage":                      TypeOfAssignment = AssignmentType.ThumbButtonImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "wrapped":                      TypeOfAssignment = AssignmentType.WrappedAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "textColor":                      TypeOfAssignment = AssignmentType.TextColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "mode":                      TypeOfAssignment = AssignmentType.ModeAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "scrollBarImage":                      TypeOfAssignment = AssignmentType.ScrollBarImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "scrollBarGutter":                      TypeOfAssignment = AssignmentType.ScrollBarGutterAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "scrollBarType":                      TypeOfAssignment = AssignmentType.ScrollBarTypeAssignment;                      Value = Value = int.Parse(nodes[2].Token.Text);                      break;                  case "enableIME":                      TypeOfAssignment = AssignmentType.EnableIMEAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "highlighted":                      TypeOfAssignment = AssignmentType.HighlightedAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "minValue":                      TypeOfAssignment = AssignmentType.MinValueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "maxValue":                      TypeOfAssignment = AssignmentType.MaxValueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "pageSize":                      TypeOfAssignment = AssignmentType.PageSizeAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "cursorColor":                      TypeOfAssignment = AssignmentType.CursorColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "toolTip":                      TypeOfAssignment = AssignmentType.TooltipAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "tooltip":                      TypeOfAssignment = AssignmentType.TooltipAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "MouseTransparent":                      TypeOfAssignment = AssignmentType.MouseTransparentAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "imagestates":                      TypeOfAssignment = AssignmentType.ImageStatesAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "backgroundColor":                      TypeOfAssignment = AssignmentType.BackgroundColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "framecolor":                      TypeOfAssignment = AssignmentType.FrameColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "alignments":                      TypeOfAssignment = AssignmentType.AlignmentsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "visibleRows":                      TypeOfAssignment = AssignmentType.VisibleRowsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "columns":                      TypeOfAssignment = AssignmentType.ColumnsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "rowHeight":                      TypeOfAssignment = AssignmentType.RowHeightAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "fillColor":                      TypeOfAssignment = AssignmentType.FillColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "selectionFillColor":                      TypeOfAssignment = AssignmentType.SelectionFillColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "cursor":                      TypeOfAssignment = AssignmentType.CursorAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "lineHeight":                      TypeOfAssignment = AssignmentType.LineHeightAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetL":                      TypeOfAssignment = AssignmentType.EdgeOffsetLAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetR":                      TypeOfAssignment = AssignmentType.EdgeOffsetRAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetT":                      TypeOfAssignment = AssignmentType.EdgeOffsetTAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetB":                      TypeOfAssignment = AssignmentType.EdgeOffsetBAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "foregroundImage":                      TypeOfAssignment = AssignmentType.ForegroundImageAssignment;                      Value = nodes[2].Token.Text;                      break;                  case "backgroundImage":                      TypeOfAssignment = AssignmentType.BackgroundImageAssignment;                      Value = nodes[2].Token.Text;                      break;                  case "value":                      TypeOfAssignment = AssignmentType.ValueAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "useBackgroundImage":                      TypeOfAssignment = AssignmentType.UseBackgroundImageAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "enabled":                      TypeOfAssignment = AssignmentType.EnabledAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "fittext":                      TypeOfAssignment = AssignmentType.FitTextAssignment;                      Value = (int)nodes[2].Token.Value;                      break;              }
Magic Number,UIParser.Nodes,AssignmentNode,C:\repos\Afr0_Project-Dollhouse\Other\libs\UIParser\UIParser\Nodes\AssignmentNode.cs,InitChildren,The following statement contains a magic number: switch(nodes[0].Token.Text)              {                  case "stringDir":                      TypeOfAssignment = AssignmentType.StringDirAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "stringTable":                      TypeOfAssignment = AssignmentType.StringTableAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "leftArrowImage":                      TypeOfAssignment = AssignmentType.LeftArrowImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "rightArrowImage":                      TypeOfAssignment = AssignmentType.RightArrowImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "tracking":                      TypeOfAssignment = AssignmentType.TrackingAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "trigger":                      TypeOfAssignment = AssignmentType.TriggerAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "image":                      TypeOfAssignment = AssignmentType.ImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "position":                      TypeOfAssignment = AssignmentType.PositionAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "size":                      TypeOfAssignment = AssignmentType.SizeAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "id":                      TypeOfAssignment = AssignmentType.IDAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "orientation":                      TypeOfAssignment = AssignmentType.OrientationAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "opaque":                      TypeOfAssignment = AssignmentType.OpaqueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "assetID":                      TypeOfAssignment = AssignmentType.AssetIDAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "stringIndex":                      TypeOfAssignment = AssignmentType.StringIndexAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "text":                      TypeOfAssignment = AssignmentType.TextAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "font":                      TypeOfAssignment = AssignmentType.FontAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "textColorSelected":                      TypeOfAssignment = AssignmentType.TextColorSelectedAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textColorHighlighted":                      TypeOfAssignment = AssignmentType.TextColorHighlightedAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textColorDisabled":                      TypeOfAssignment = AssignmentType.TextColorDisabledAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textButton":                      TypeOfAssignment = AssignmentType.TextButtonAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "color":                      TypeOfAssignment = AssignmentType.ColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "alignment":                      TypeOfAssignment = AssignmentType.AlignmentAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "backColor":                      TypeOfAssignment = AssignmentType.BackColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "frameOnFocus":                      TypeOfAssignment = AssignmentType.FrameOnFocusAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "transparent":                      TypeOfAssignment = AssignmentType.TransparentAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "capacity":                      TypeOfAssignment = AssignmentType.CapacityAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "lines":                      TypeOfAssignment = AssignmentType.LinesAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "flashOnEmpty":                      TypeOfAssignment = AssignmentType.FlashOnEmptyAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "thumbImageSize":                      TypeOfAssignment = AssignmentType.ThumbImageSizeAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "thumbImageOffsets":                      TypeOfAssignment = AssignmentType.ThumbImageOffsetsAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "thumbButtonImage":                      TypeOfAssignment = AssignmentType.ThumbButtonImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "wrapped":                      TypeOfAssignment = AssignmentType.WrappedAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "textColor":                      TypeOfAssignment = AssignmentType.TextColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "mode":                      TypeOfAssignment = AssignmentType.ModeAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "scrollBarImage":                      TypeOfAssignment = AssignmentType.ScrollBarImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "scrollBarGutter":                      TypeOfAssignment = AssignmentType.ScrollBarGutterAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "scrollBarType":                      TypeOfAssignment = AssignmentType.ScrollBarTypeAssignment;                      Value = Value = int.Parse(nodes[2].Token.Text);                      break;                  case "enableIME":                      TypeOfAssignment = AssignmentType.EnableIMEAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "highlighted":                      TypeOfAssignment = AssignmentType.HighlightedAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "minValue":                      TypeOfAssignment = AssignmentType.MinValueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "maxValue":                      TypeOfAssignment = AssignmentType.MaxValueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "pageSize":                      TypeOfAssignment = AssignmentType.PageSizeAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "cursorColor":                      TypeOfAssignment = AssignmentType.CursorColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "toolTip":                      TypeOfAssignment = AssignmentType.TooltipAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "tooltip":                      TypeOfAssignment = AssignmentType.TooltipAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "MouseTransparent":                      TypeOfAssignment = AssignmentType.MouseTransparentAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "imagestates":                      TypeOfAssignment = AssignmentType.ImageStatesAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "backgroundColor":                      TypeOfAssignment = AssignmentType.BackgroundColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "framecolor":                      TypeOfAssignment = AssignmentType.FrameColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "alignments":                      TypeOfAssignment = AssignmentType.AlignmentsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "visibleRows":                      TypeOfAssignment = AssignmentType.VisibleRowsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "columns":                      TypeOfAssignment = AssignmentType.ColumnsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "rowHeight":                      TypeOfAssignment = AssignmentType.RowHeightAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "fillColor":                      TypeOfAssignment = AssignmentType.FillColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "selectionFillColor":                      TypeOfAssignment = AssignmentType.SelectionFillColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "cursor":                      TypeOfAssignment = AssignmentType.CursorAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "lineHeight":                      TypeOfAssignment = AssignmentType.LineHeightAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetL":                      TypeOfAssignment = AssignmentType.EdgeOffsetLAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetR":                      TypeOfAssignment = AssignmentType.EdgeOffsetRAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetT":                      TypeOfAssignment = AssignmentType.EdgeOffsetTAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetB":                      TypeOfAssignment = AssignmentType.EdgeOffsetBAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "foregroundImage":                      TypeOfAssignment = AssignmentType.ForegroundImageAssignment;                      Value = nodes[2].Token.Text;                      break;                  case "backgroundImage":                      TypeOfAssignment = AssignmentType.BackgroundImageAssignment;                      Value = nodes[2].Token.Text;                      break;                  case "value":                      TypeOfAssignment = AssignmentType.ValueAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "useBackgroundImage":                      TypeOfAssignment = AssignmentType.UseBackgroundImageAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "enabled":                      TypeOfAssignment = AssignmentType.EnabledAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "fittext":                      TypeOfAssignment = AssignmentType.FitTextAssignment;                      Value = (int)nodes[2].Token.Value;                      break;              }
Magic Number,UIParser.Nodes,AssignmentNode,C:\repos\Afr0_Project-Dollhouse\Other\libs\UIParser\UIParser\Nodes\AssignmentNode.cs,InitChildren,The following statement contains a magic number: switch(nodes[0].Token.Text)              {                  case "stringDir":                      TypeOfAssignment = AssignmentType.StringDirAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "stringTable":                      TypeOfAssignment = AssignmentType.StringTableAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "leftArrowImage":                      TypeOfAssignment = AssignmentType.LeftArrowImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "rightArrowImage":                      TypeOfAssignment = AssignmentType.RightArrowImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "tracking":                      TypeOfAssignment = AssignmentType.TrackingAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "trigger":                      TypeOfAssignment = AssignmentType.TriggerAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "image":                      TypeOfAssignment = AssignmentType.ImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "position":                      TypeOfAssignment = AssignmentType.PositionAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "size":                      TypeOfAssignment = AssignmentType.SizeAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "id":                      TypeOfAssignment = AssignmentType.IDAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "orientation":                      TypeOfAssignment = AssignmentType.OrientationAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "opaque":                      TypeOfAssignment = AssignmentType.OpaqueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "assetID":                      TypeOfAssignment = AssignmentType.AssetIDAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "stringIndex":                      TypeOfAssignment = AssignmentType.StringIndexAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "text":                      TypeOfAssignment = AssignmentType.TextAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "font":                      TypeOfAssignment = AssignmentType.FontAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "textColorSelected":                      TypeOfAssignment = AssignmentType.TextColorSelectedAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textColorHighlighted":                      TypeOfAssignment = AssignmentType.TextColorHighlightedAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textColorDisabled":                      TypeOfAssignment = AssignmentType.TextColorDisabledAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textButton":                      TypeOfAssignment = AssignmentType.TextButtonAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "color":                      TypeOfAssignment = AssignmentType.ColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "alignment":                      TypeOfAssignment = AssignmentType.AlignmentAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "backColor":                      TypeOfAssignment = AssignmentType.BackColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "frameOnFocus":                      TypeOfAssignment = AssignmentType.FrameOnFocusAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "transparent":                      TypeOfAssignment = AssignmentType.TransparentAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "capacity":                      TypeOfAssignment = AssignmentType.CapacityAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "lines":                      TypeOfAssignment = AssignmentType.LinesAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "flashOnEmpty":                      TypeOfAssignment = AssignmentType.FlashOnEmptyAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "thumbImageSize":                      TypeOfAssignment = AssignmentType.ThumbImageSizeAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "thumbImageOffsets":                      TypeOfAssignment = AssignmentType.ThumbImageOffsetsAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "thumbButtonImage":                      TypeOfAssignment = AssignmentType.ThumbButtonImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "wrapped":                      TypeOfAssignment = AssignmentType.WrappedAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "textColor":                      TypeOfAssignment = AssignmentType.TextColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "mode":                      TypeOfAssignment = AssignmentType.ModeAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "scrollBarImage":                      TypeOfAssignment = AssignmentType.ScrollBarImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "scrollBarGutter":                      TypeOfAssignment = AssignmentType.ScrollBarGutterAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "scrollBarType":                      TypeOfAssignment = AssignmentType.ScrollBarTypeAssignment;                      Value = Value = int.Parse(nodes[2].Token.Text);                      break;                  case "enableIME":                      TypeOfAssignment = AssignmentType.EnableIMEAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "highlighted":                      TypeOfAssignment = AssignmentType.HighlightedAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "minValue":                      TypeOfAssignment = AssignmentType.MinValueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "maxValue":                      TypeOfAssignment = AssignmentType.MaxValueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "pageSize":                      TypeOfAssignment = AssignmentType.PageSizeAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "cursorColor":                      TypeOfAssignment = AssignmentType.CursorColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "toolTip":                      TypeOfAssignment = AssignmentType.TooltipAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "tooltip":                      TypeOfAssignment = AssignmentType.TooltipAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "MouseTransparent":                      TypeOfAssignment = AssignmentType.MouseTransparentAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "imagestates":                      TypeOfAssignment = AssignmentType.ImageStatesAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "backgroundColor":                      TypeOfAssignment = AssignmentType.BackgroundColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "framecolor":                      TypeOfAssignment = AssignmentType.FrameColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "alignments":                      TypeOfAssignment = AssignmentType.AlignmentsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "visibleRows":                      TypeOfAssignment = AssignmentType.VisibleRowsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "columns":                      TypeOfAssignment = AssignmentType.ColumnsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "rowHeight":                      TypeOfAssignment = AssignmentType.RowHeightAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "fillColor":                      TypeOfAssignment = AssignmentType.FillColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "selectionFillColor":                      TypeOfAssignment = AssignmentType.SelectionFillColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "cursor":                      TypeOfAssignment = AssignmentType.CursorAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "lineHeight":                      TypeOfAssignment = AssignmentType.LineHeightAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetL":                      TypeOfAssignment = AssignmentType.EdgeOffsetLAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetR":                      TypeOfAssignment = AssignmentType.EdgeOffsetRAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetT":                      TypeOfAssignment = AssignmentType.EdgeOffsetTAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetB":                      TypeOfAssignment = AssignmentType.EdgeOffsetBAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "foregroundImage":                      TypeOfAssignment = AssignmentType.ForegroundImageAssignment;                      Value = nodes[2].Token.Text;                      break;                  case "backgroundImage":                      TypeOfAssignment = AssignmentType.BackgroundImageAssignment;                      Value = nodes[2].Token.Text;                      break;                  case "value":                      TypeOfAssignment = AssignmentType.ValueAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "useBackgroundImage":                      TypeOfAssignment = AssignmentType.UseBackgroundImageAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "enabled":                      TypeOfAssignment = AssignmentType.EnabledAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "fittext":                      TypeOfAssignment = AssignmentType.FitTextAssignment;                      Value = (int)nodes[2].Token.Value;                      break;              }
Magic Number,UIParser.Nodes,AssignmentNode,C:\repos\Afr0_Project-Dollhouse\Other\libs\UIParser\UIParser\Nodes\AssignmentNode.cs,InitChildren,The following statement contains a magic number: switch(nodes[0].Token.Text)              {                  case "stringDir":                      TypeOfAssignment = AssignmentType.StringDirAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "stringTable":                      TypeOfAssignment = AssignmentType.StringTableAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "leftArrowImage":                      TypeOfAssignment = AssignmentType.LeftArrowImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "rightArrowImage":                      TypeOfAssignment = AssignmentType.RightArrowImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "tracking":                      TypeOfAssignment = AssignmentType.TrackingAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "trigger":                      TypeOfAssignment = AssignmentType.TriggerAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "image":                      TypeOfAssignment = AssignmentType.ImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "position":                      TypeOfAssignment = AssignmentType.PositionAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "size":                      TypeOfAssignment = AssignmentType.SizeAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "id":                      TypeOfAssignment = AssignmentType.IDAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "orientation":                      TypeOfAssignment = AssignmentType.OrientationAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "opaque":                      TypeOfAssignment = AssignmentType.OpaqueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "assetID":                      TypeOfAssignment = AssignmentType.AssetIDAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "stringIndex":                      TypeOfAssignment = AssignmentType.StringIndexAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "text":                      TypeOfAssignment = AssignmentType.TextAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "font":                      TypeOfAssignment = AssignmentType.FontAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "textColorSelected":                      TypeOfAssignment = AssignmentType.TextColorSelectedAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textColorHighlighted":                      TypeOfAssignment = AssignmentType.TextColorHighlightedAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textColorDisabled":                      TypeOfAssignment = AssignmentType.TextColorDisabledAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textButton":                      TypeOfAssignment = AssignmentType.TextButtonAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "color":                      TypeOfAssignment = AssignmentType.ColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "alignment":                      TypeOfAssignment = AssignmentType.AlignmentAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "backColor":                      TypeOfAssignment = AssignmentType.BackColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "frameOnFocus":                      TypeOfAssignment = AssignmentType.FrameOnFocusAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "transparent":                      TypeOfAssignment = AssignmentType.TransparentAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "capacity":                      TypeOfAssignment = AssignmentType.CapacityAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "lines":                      TypeOfAssignment = AssignmentType.LinesAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "flashOnEmpty":                      TypeOfAssignment = AssignmentType.FlashOnEmptyAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "thumbImageSize":                      TypeOfAssignment = AssignmentType.ThumbImageSizeAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "thumbImageOffsets":                      TypeOfAssignment = AssignmentType.ThumbImageOffsetsAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "thumbButtonImage":                      TypeOfAssignment = AssignmentType.ThumbButtonImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "wrapped":                      TypeOfAssignment = AssignmentType.WrappedAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "textColor":                      TypeOfAssignment = AssignmentType.TextColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "mode":                      TypeOfAssignment = AssignmentType.ModeAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "scrollBarImage":                      TypeOfAssignment = AssignmentType.ScrollBarImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "scrollBarGutter":                      TypeOfAssignment = AssignmentType.ScrollBarGutterAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "scrollBarType":                      TypeOfAssignment = AssignmentType.ScrollBarTypeAssignment;                      Value = Value = int.Parse(nodes[2].Token.Text);                      break;                  case "enableIME":                      TypeOfAssignment = AssignmentType.EnableIMEAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "highlighted":                      TypeOfAssignment = AssignmentType.HighlightedAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "minValue":                      TypeOfAssignment = AssignmentType.MinValueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "maxValue":                      TypeOfAssignment = AssignmentType.MaxValueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "pageSize":                      TypeOfAssignment = AssignmentType.PageSizeAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "cursorColor":                      TypeOfAssignment = AssignmentType.CursorColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "toolTip":                      TypeOfAssignment = AssignmentType.TooltipAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "tooltip":                      TypeOfAssignment = AssignmentType.TooltipAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "MouseTransparent":                      TypeOfAssignment = AssignmentType.MouseTransparentAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "imagestates":                      TypeOfAssignment = AssignmentType.ImageStatesAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "backgroundColor":                      TypeOfAssignment = AssignmentType.BackgroundColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "framecolor":                      TypeOfAssignment = AssignmentType.FrameColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "alignments":                      TypeOfAssignment = AssignmentType.AlignmentsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "visibleRows":                      TypeOfAssignment = AssignmentType.VisibleRowsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "columns":                      TypeOfAssignment = AssignmentType.ColumnsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "rowHeight":                      TypeOfAssignment = AssignmentType.RowHeightAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "fillColor":                      TypeOfAssignment = AssignmentType.FillColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "selectionFillColor":                      TypeOfAssignment = AssignmentType.SelectionFillColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "cursor":                      TypeOfAssignment = AssignmentType.CursorAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "lineHeight":                      TypeOfAssignment = AssignmentType.LineHeightAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetL":                      TypeOfAssignment = AssignmentType.EdgeOffsetLAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetR":                      TypeOfAssignment = AssignmentType.EdgeOffsetRAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetT":                      TypeOfAssignment = AssignmentType.EdgeOffsetTAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetB":                      TypeOfAssignment = AssignmentType.EdgeOffsetBAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "foregroundImage":                      TypeOfAssignment = AssignmentType.ForegroundImageAssignment;                      Value = nodes[2].Token.Text;                      break;                  case "backgroundImage":                      TypeOfAssignment = AssignmentType.BackgroundImageAssignment;                      Value = nodes[2].Token.Text;                      break;                  case "value":                      TypeOfAssignment = AssignmentType.ValueAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "useBackgroundImage":                      TypeOfAssignment = AssignmentType.UseBackgroundImageAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "enabled":                      TypeOfAssignment = AssignmentType.EnabledAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "fittext":                      TypeOfAssignment = AssignmentType.FitTextAssignment;                      Value = (int)nodes[2].Token.Value;                      break;              }
Magic Number,UIParser.Nodes,AssignmentNode,C:\repos\Afr0_Project-Dollhouse\Other\libs\UIParser\UIParser\Nodes\AssignmentNode.cs,InitChildren,The following statement contains a magic number: switch(nodes[0].Token.Text)              {                  case "stringDir":                      TypeOfAssignment = AssignmentType.StringDirAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "stringTable":                      TypeOfAssignment = AssignmentType.StringTableAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "leftArrowImage":                      TypeOfAssignment = AssignmentType.LeftArrowImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "rightArrowImage":                      TypeOfAssignment = AssignmentType.RightArrowImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "tracking":                      TypeOfAssignment = AssignmentType.TrackingAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "trigger":                      TypeOfAssignment = AssignmentType.TriggerAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "image":                      TypeOfAssignment = AssignmentType.ImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "position":                      TypeOfAssignment = AssignmentType.PositionAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "size":                      TypeOfAssignment = AssignmentType.SizeAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "id":                      TypeOfAssignment = AssignmentType.IDAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "orientation":                      TypeOfAssignment = AssignmentType.OrientationAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "opaque":                      TypeOfAssignment = AssignmentType.OpaqueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "assetID":                      TypeOfAssignment = AssignmentType.AssetIDAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "stringIndex":                      TypeOfAssignment = AssignmentType.StringIndexAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "text":                      TypeOfAssignment = AssignmentType.TextAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "font":                      TypeOfAssignment = AssignmentType.FontAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "textColorSelected":                      TypeOfAssignment = AssignmentType.TextColorSelectedAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textColorHighlighted":                      TypeOfAssignment = AssignmentType.TextColorHighlightedAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textColorDisabled":                      TypeOfAssignment = AssignmentType.TextColorDisabledAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textButton":                      TypeOfAssignment = AssignmentType.TextButtonAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "color":                      TypeOfAssignment = AssignmentType.ColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "alignment":                      TypeOfAssignment = AssignmentType.AlignmentAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "backColor":                      TypeOfAssignment = AssignmentType.BackColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "frameOnFocus":                      TypeOfAssignment = AssignmentType.FrameOnFocusAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "transparent":                      TypeOfAssignment = AssignmentType.TransparentAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "capacity":                      TypeOfAssignment = AssignmentType.CapacityAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "lines":                      TypeOfAssignment = AssignmentType.LinesAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "flashOnEmpty":                      TypeOfAssignment = AssignmentType.FlashOnEmptyAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "thumbImageSize":                      TypeOfAssignment = AssignmentType.ThumbImageSizeAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "thumbImageOffsets":                      TypeOfAssignment = AssignmentType.ThumbImageOffsetsAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "thumbButtonImage":                      TypeOfAssignment = AssignmentType.ThumbButtonImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "wrapped":                      TypeOfAssignment = AssignmentType.WrappedAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "textColor":                      TypeOfAssignment = AssignmentType.TextColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "mode":                      TypeOfAssignment = AssignmentType.ModeAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "scrollBarImage":                      TypeOfAssignment = AssignmentType.ScrollBarImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "scrollBarGutter":                      TypeOfAssignment = AssignmentType.ScrollBarGutterAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "scrollBarType":                      TypeOfAssignment = AssignmentType.ScrollBarTypeAssignment;                      Value = Value = int.Parse(nodes[2].Token.Text);                      break;                  case "enableIME":                      TypeOfAssignment = AssignmentType.EnableIMEAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "highlighted":                      TypeOfAssignment = AssignmentType.HighlightedAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "minValue":                      TypeOfAssignment = AssignmentType.MinValueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "maxValue":                      TypeOfAssignment = AssignmentType.MaxValueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "pageSize":                      TypeOfAssignment = AssignmentType.PageSizeAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "cursorColor":                      TypeOfAssignment = AssignmentType.CursorColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "toolTip":                      TypeOfAssignment = AssignmentType.TooltipAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "tooltip":                      TypeOfAssignment = AssignmentType.TooltipAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "MouseTransparent":                      TypeOfAssignment = AssignmentType.MouseTransparentAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "imagestates":                      TypeOfAssignment = AssignmentType.ImageStatesAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "backgroundColor":                      TypeOfAssignment = AssignmentType.BackgroundColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "framecolor":                      TypeOfAssignment = AssignmentType.FrameColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "alignments":                      TypeOfAssignment = AssignmentType.AlignmentsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "visibleRows":                      TypeOfAssignment = AssignmentType.VisibleRowsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "columns":                      TypeOfAssignment = AssignmentType.ColumnsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "rowHeight":                      TypeOfAssignment = AssignmentType.RowHeightAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "fillColor":                      TypeOfAssignment = AssignmentType.FillColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "selectionFillColor":                      TypeOfAssignment = AssignmentType.SelectionFillColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "cursor":                      TypeOfAssignment = AssignmentType.CursorAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "lineHeight":                      TypeOfAssignment = AssignmentType.LineHeightAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetL":                      TypeOfAssignment = AssignmentType.EdgeOffsetLAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetR":                      TypeOfAssignment = AssignmentType.EdgeOffsetRAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetT":                      TypeOfAssignment = AssignmentType.EdgeOffsetTAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetB":                      TypeOfAssignment = AssignmentType.EdgeOffsetBAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "foregroundImage":                      TypeOfAssignment = AssignmentType.ForegroundImageAssignment;                      Value = nodes[2].Token.Text;                      break;                  case "backgroundImage":                      TypeOfAssignment = AssignmentType.BackgroundImageAssignment;                      Value = nodes[2].Token.Text;                      break;                  case "value":                      TypeOfAssignment = AssignmentType.ValueAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "useBackgroundImage":                      TypeOfAssignment = AssignmentType.UseBackgroundImageAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "enabled":                      TypeOfAssignment = AssignmentType.EnabledAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "fittext":                      TypeOfAssignment = AssignmentType.FitTextAssignment;                      Value = (int)nodes[2].Token.Value;                      break;              }
Magic Number,UIParser.Nodes,AssignmentNode,C:\repos\Afr0_Project-Dollhouse\Other\libs\UIParser\UIParser\Nodes\AssignmentNode.cs,InitChildren,The following statement contains a magic number: switch(nodes[0].Token.Text)              {                  case "stringDir":                      TypeOfAssignment = AssignmentType.StringDirAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "stringTable":                      TypeOfAssignment = AssignmentType.StringTableAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "leftArrowImage":                      TypeOfAssignment = AssignmentType.LeftArrowImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "rightArrowImage":                      TypeOfAssignment = AssignmentType.RightArrowImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "tracking":                      TypeOfAssignment = AssignmentType.TrackingAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "trigger":                      TypeOfAssignment = AssignmentType.TriggerAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "image":                      TypeOfAssignment = AssignmentType.ImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "position":                      TypeOfAssignment = AssignmentType.PositionAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "size":                      TypeOfAssignment = AssignmentType.SizeAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "id":                      TypeOfAssignment = AssignmentType.IDAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "orientation":                      TypeOfAssignment = AssignmentType.OrientationAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "opaque":                      TypeOfAssignment = AssignmentType.OpaqueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "assetID":                      TypeOfAssignment = AssignmentType.AssetIDAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "stringIndex":                      TypeOfAssignment = AssignmentType.StringIndexAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "text":                      TypeOfAssignment = AssignmentType.TextAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "font":                      TypeOfAssignment = AssignmentType.FontAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "textColorSelected":                      TypeOfAssignment = AssignmentType.TextColorSelectedAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textColorHighlighted":                      TypeOfAssignment = AssignmentType.TextColorHighlightedAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textColorDisabled":                      TypeOfAssignment = AssignmentType.TextColorDisabledAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textButton":                      TypeOfAssignment = AssignmentType.TextButtonAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "color":                      TypeOfAssignment = AssignmentType.ColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "alignment":                      TypeOfAssignment = AssignmentType.AlignmentAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "backColor":                      TypeOfAssignment = AssignmentType.BackColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "frameOnFocus":                      TypeOfAssignment = AssignmentType.FrameOnFocusAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "transparent":                      TypeOfAssignment = AssignmentType.TransparentAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "capacity":                      TypeOfAssignment = AssignmentType.CapacityAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "lines":                      TypeOfAssignment = AssignmentType.LinesAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "flashOnEmpty":                      TypeOfAssignment = AssignmentType.FlashOnEmptyAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "thumbImageSize":                      TypeOfAssignment = AssignmentType.ThumbImageSizeAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "thumbImageOffsets":                      TypeOfAssignment = AssignmentType.ThumbImageOffsetsAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "thumbButtonImage":                      TypeOfAssignment = AssignmentType.ThumbButtonImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "wrapped":                      TypeOfAssignment = AssignmentType.WrappedAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "textColor":                      TypeOfAssignment = AssignmentType.TextColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "mode":                      TypeOfAssignment = AssignmentType.ModeAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "scrollBarImage":                      TypeOfAssignment = AssignmentType.ScrollBarImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "scrollBarGutter":                      TypeOfAssignment = AssignmentType.ScrollBarGutterAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "scrollBarType":                      TypeOfAssignment = AssignmentType.ScrollBarTypeAssignment;                      Value = Value = int.Parse(nodes[2].Token.Text);                      break;                  case "enableIME":                      TypeOfAssignment = AssignmentType.EnableIMEAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "highlighted":                      TypeOfAssignment = AssignmentType.HighlightedAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "minValue":                      TypeOfAssignment = AssignmentType.MinValueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "maxValue":                      TypeOfAssignment = AssignmentType.MaxValueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "pageSize":                      TypeOfAssignment = AssignmentType.PageSizeAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "cursorColor":                      TypeOfAssignment = AssignmentType.CursorColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "toolTip":                      TypeOfAssignment = AssignmentType.TooltipAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "tooltip":                      TypeOfAssignment = AssignmentType.TooltipAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "MouseTransparent":                      TypeOfAssignment = AssignmentType.MouseTransparentAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "imagestates":                      TypeOfAssignment = AssignmentType.ImageStatesAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "backgroundColor":                      TypeOfAssignment = AssignmentType.BackgroundColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "framecolor":                      TypeOfAssignment = AssignmentType.FrameColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "alignments":                      TypeOfAssignment = AssignmentType.AlignmentsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "visibleRows":                      TypeOfAssignment = AssignmentType.VisibleRowsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "columns":                      TypeOfAssignment = AssignmentType.ColumnsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "rowHeight":                      TypeOfAssignment = AssignmentType.RowHeightAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "fillColor":                      TypeOfAssignment = AssignmentType.FillColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "selectionFillColor":                      TypeOfAssignment = AssignmentType.SelectionFillColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "cursor":                      TypeOfAssignment = AssignmentType.CursorAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "lineHeight":                      TypeOfAssignment = AssignmentType.LineHeightAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetL":                      TypeOfAssignment = AssignmentType.EdgeOffsetLAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetR":                      TypeOfAssignment = AssignmentType.EdgeOffsetRAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetT":                      TypeOfAssignment = AssignmentType.EdgeOffsetTAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetB":                      TypeOfAssignment = AssignmentType.EdgeOffsetBAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "foregroundImage":                      TypeOfAssignment = AssignmentType.ForegroundImageAssignment;                      Value = nodes[2].Token.Text;                      break;                  case "backgroundImage":                      TypeOfAssignment = AssignmentType.BackgroundImageAssignment;                      Value = nodes[2].Token.Text;                      break;                  case "value":                      TypeOfAssignment = AssignmentType.ValueAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "useBackgroundImage":                      TypeOfAssignment = AssignmentType.UseBackgroundImageAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "enabled":                      TypeOfAssignment = AssignmentType.EnabledAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "fittext":                      TypeOfAssignment = AssignmentType.FitTextAssignment;                      Value = (int)nodes[2].Token.Value;                      break;              }
Magic Number,UIParser.Nodes,AssignmentNode,C:\repos\Afr0_Project-Dollhouse\Other\libs\UIParser\UIParser\Nodes\AssignmentNode.cs,InitChildren,The following statement contains a magic number: switch(nodes[0].Token.Text)              {                  case "stringDir":                      TypeOfAssignment = AssignmentType.StringDirAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "stringTable":                      TypeOfAssignment = AssignmentType.StringTableAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "leftArrowImage":                      TypeOfAssignment = AssignmentType.LeftArrowImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "rightArrowImage":                      TypeOfAssignment = AssignmentType.RightArrowImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "tracking":                      TypeOfAssignment = AssignmentType.TrackingAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "trigger":                      TypeOfAssignment = AssignmentType.TriggerAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "image":                      TypeOfAssignment = AssignmentType.ImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "position":                      TypeOfAssignment = AssignmentType.PositionAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "size":                      TypeOfAssignment = AssignmentType.SizeAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "id":                      TypeOfAssignment = AssignmentType.IDAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "orientation":                      TypeOfAssignment = AssignmentType.OrientationAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "opaque":                      TypeOfAssignment = AssignmentType.OpaqueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "assetID":                      TypeOfAssignment = AssignmentType.AssetIDAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "stringIndex":                      TypeOfAssignment = AssignmentType.StringIndexAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "text":                      TypeOfAssignment = AssignmentType.TextAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "font":                      TypeOfAssignment = AssignmentType.FontAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "textColorSelected":                      TypeOfAssignment = AssignmentType.TextColorSelectedAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textColorHighlighted":                      TypeOfAssignment = AssignmentType.TextColorHighlightedAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textColorDisabled":                      TypeOfAssignment = AssignmentType.TextColorDisabledAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textButton":                      TypeOfAssignment = AssignmentType.TextButtonAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "color":                      TypeOfAssignment = AssignmentType.ColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "alignment":                      TypeOfAssignment = AssignmentType.AlignmentAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "backColor":                      TypeOfAssignment = AssignmentType.BackColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "frameOnFocus":                      TypeOfAssignment = AssignmentType.FrameOnFocusAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "transparent":                      TypeOfAssignment = AssignmentType.TransparentAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "capacity":                      TypeOfAssignment = AssignmentType.CapacityAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "lines":                      TypeOfAssignment = AssignmentType.LinesAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "flashOnEmpty":                      TypeOfAssignment = AssignmentType.FlashOnEmptyAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "thumbImageSize":                      TypeOfAssignment = AssignmentType.ThumbImageSizeAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "thumbImageOffsets":                      TypeOfAssignment = AssignmentType.ThumbImageOffsetsAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "thumbButtonImage":                      TypeOfAssignment = AssignmentType.ThumbButtonImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "wrapped":                      TypeOfAssignment = AssignmentType.WrappedAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "textColor":                      TypeOfAssignment = AssignmentType.TextColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "mode":                      TypeOfAssignment = AssignmentType.ModeAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "scrollBarImage":                      TypeOfAssignment = AssignmentType.ScrollBarImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "scrollBarGutter":                      TypeOfAssignment = AssignmentType.ScrollBarGutterAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "scrollBarType":                      TypeOfAssignment = AssignmentType.ScrollBarTypeAssignment;                      Value = Value = int.Parse(nodes[2].Token.Text);                      break;                  case "enableIME":                      TypeOfAssignment = AssignmentType.EnableIMEAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "highlighted":                      TypeOfAssignment = AssignmentType.HighlightedAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "minValue":                      TypeOfAssignment = AssignmentType.MinValueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "maxValue":                      TypeOfAssignment = AssignmentType.MaxValueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "pageSize":                      TypeOfAssignment = AssignmentType.PageSizeAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "cursorColor":                      TypeOfAssignment = AssignmentType.CursorColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "toolTip":                      TypeOfAssignment = AssignmentType.TooltipAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "tooltip":                      TypeOfAssignment = AssignmentType.TooltipAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "MouseTransparent":                      TypeOfAssignment = AssignmentType.MouseTransparentAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "imagestates":                      TypeOfAssignment = AssignmentType.ImageStatesAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "backgroundColor":                      TypeOfAssignment = AssignmentType.BackgroundColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "framecolor":                      TypeOfAssignment = AssignmentType.FrameColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "alignments":                      TypeOfAssignment = AssignmentType.AlignmentsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "visibleRows":                      TypeOfAssignment = AssignmentType.VisibleRowsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "columns":                      TypeOfAssignment = AssignmentType.ColumnsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "rowHeight":                      TypeOfAssignment = AssignmentType.RowHeightAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "fillColor":                      TypeOfAssignment = AssignmentType.FillColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "selectionFillColor":                      TypeOfAssignment = AssignmentType.SelectionFillColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "cursor":                      TypeOfAssignment = AssignmentType.CursorAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "lineHeight":                      TypeOfAssignment = AssignmentType.LineHeightAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetL":                      TypeOfAssignment = AssignmentType.EdgeOffsetLAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetR":                      TypeOfAssignment = AssignmentType.EdgeOffsetRAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetT":                      TypeOfAssignment = AssignmentType.EdgeOffsetTAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetB":                      TypeOfAssignment = AssignmentType.EdgeOffsetBAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "foregroundImage":                      TypeOfAssignment = AssignmentType.ForegroundImageAssignment;                      Value = nodes[2].Token.Text;                      break;                  case "backgroundImage":                      TypeOfAssignment = AssignmentType.BackgroundImageAssignment;                      Value = nodes[2].Token.Text;                      break;                  case "value":                      TypeOfAssignment = AssignmentType.ValueAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "useBackgroundImage":                      TypeOfAssignment = AssignmentType.UseBackgroundImageAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "enabled":                      TypeOfAssignment = AssignmentType.EnabledAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "fittext":                      TypeOfAssignment = AssignmentType.FitTextAssignment;                      Value = (int)nodes[2].Token.Value;                      break;              }
Magic Number,UIParser.Nodes,AssignmentNode,C:\repos\Afr0_Project-Dollhouse\Other\libs\UIParser\UIParser\Nodes\AssignmentNode.cs,InitChildren,The following statement contains a magic number: switch(nodes[0].Token.Text)              {                  case "stringDir":                      TypeOfAssignment = AssignmentType.StringDirAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "stringTable":                      TypeOfAssignment = AssignmentType.StringTableAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "leftArrowImage":                      TypeOfAssignment = AssignmentType.LeftArrowImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "rightArrowImage":                      TypeOfAssignment = AssignmentType.RightArrowImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "tracking":                      TypeOfAssignment = AssignmentType.TrackingAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "trigger":                      TypeOfAssignment = AssignmentType.TriggerAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "image":                      TypeOfAssignment = AssignmentType.ImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "position":                      TypeOfAssignment = AssignmentType.PositionAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "size":                      TypeOfAssignment = AssignmentType.SizeAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "id":                      TypeOfAssignment = AssignmentType.IDAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "orientation":                      TypeOfAssignment = AssignmentType.OrientationAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "opaque":                      TypeOfAssignment = AssignmentType.OpaqueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "assetID":                      TypeOfAssignment = AssignmentType.AssetIDAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "stringIndex":                      TypeOfAssignment = AssignmentType.StringIndexAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "text":                      TypeOfAssignment = AssignmentType.TextAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "font":                      TypeOfAssignment = AssignmentType.FontAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "textColorSelected":                      TypeOfAssignment = AssignmentType.TextColorSelectedAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textColorHighlighted":                      TypeOfAssignment = AssignmentType.TextColorHighlightedAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textColorDisabled":                      TypeOfAssignment = AssignmentType.TextColorDisabledAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textButton":                      TypeOfAssignment = AssignmentType.TextButtonAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "color":                      TypeOfAssignment = AssignmentType.ColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "alignment":                      TypeOfAssignment = AssignmentType.AlignmentAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "backColor":                      TypeOfAssignment = AssignmentType.BackColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "frameOnFocus":                      TypeOfAssignment = AssignmentType.FrameOnFocusAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "transparent":                      TypeOfAssignment = AssignmentType.TransparentAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "capacity":                      TypeOfAssignment = AssignmentType.CapacityAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "lines":                      TypeOfAssignment = AssignmentType.LinesAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "flashOnEmpty":                      TypeOfAssignment = AssignmentType.FlashOnEmptyAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "thumbImageSize":                      TypeOfAssignment = AssignmentType.ThumbImageSizeAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "thumbImageOffsets":                      TypeOfAssignment = AssignmentType.ThumbImageOffsetsAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "thumbButtonImage":                      TypeOfAssignment = AssignmentType.ThumbButtonImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "wrapped":                      TypeOfAssignment = AssignmentType.WrappedAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "textColor":                      TypeOfAssignment = AssignmentType.TextColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "mode":                      TypeOfAssignment = AssignmentType.ModeAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "scrollBarImage":                      TypeOfAssignment = AssignmentType.ScrollBarImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "scrollBarGutter":                      TypeOfAssignment = AssignmentType.ScrollBarGutterAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "scrollBarType":                      TypeOfAssignment = AssignmentType.ScrollBarTypeAssignment;                      Value = Value = int.Parse(nodes[2].Token.Text);                      break;                  case "enableIME":                      TypeOfAssignment = AssignmentType.EnableIMEAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "highlighted":                      TypeOfAssignment = AssignmentType.HighlightedAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "minValue":                      TypeOfAssignment = AssignmentType.MinValueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "maxValue":                      TypeOfAssignment = AssignmentType.MaxValueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "pageSize":                      TypeOfAssignment = AssignmentType.PageSizeAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "cursorColor":                      TypeOfAssignment = AssignmentType.CursorColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "toolTip":                      TypeOfAssignment = AssignmentType.TooltipAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "tooltip":                      TypeOfAssignment = AssignmentType.TooltipAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "MouseTransparent":                      TypeOfAssignment = AssignmentType.MouseTransparentAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "imagestates":                      TypeOfAssignment = AssignmentType.ImageStatesAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "backgroundColor":                      TypeOfAssignment = AssignmentType.BackgroundColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "framecolor":                      TypeOfAssignment = AssignmentType.FrameColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "alignments":                      TypeOfAssignment = AssignmentType.AlignmentsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "visibleRows":                      TypeOfAssignment = AssignmentType.VisibleRowsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "columns":                      TypeOfAssignment = AssignmentType.ColumnsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "rowHeight":                      TypeOfAssignment = AssignmentType.RowHeightAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "fillColor":                      TypeOfAssignment = AssignmentType.FillColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "selectionFillColor":                      TypeOfAssignment = AssignmentType.SelectionFillColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "cursor":                      TypeOfAssignment = AssignmentType.CursorAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "lineHeight":                      TypeOfAssignment = AssignmentType.LineHeightAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetL":                      TypeOfAssignment = AssignmentType.EdgeOffsetLAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetR":                      TypeOfAssignment = AssignmentType.EdgeOffsetRAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetT":                      TypeOfAssignment = AssignmentType.EdgeOffsetTAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetB":                      TypeOfAssignment = AssignmentType.EdgeOffsetBAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "foregroundImage":                      TypeOfAssignment = AssignmentType.ForegroundImageAssignment;                      Value = nodes[2].Token.Text;                      break;                  case "backgroundImage":                      TypeOfAssignment = AssignmentType.BackgroundImageAssignment;                      Value = nodes[2].Token.Text;                      break;                  case "value":                      TypeOfAssignment = AssignmentType.ValueAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "useBackgroundImage":                      TypeOfAssignment = AssignmentType.UseBackgroundImageAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "enabled":                      TypeOfAssignment = AssignmentType.EnabledAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "fittext":                      TypeOfAssignment = AssignmentType.FitTextAssignment;                      Value = (int)nodes[2].Token.Value;                      break;              }
Magic Number,UIParser.Nodes,AssignmentNode,C:\repos\Afr0_Project-Dollhouse\Other\libs\UIParser\UIParser\Nodes\AssignmentNode.cs,InitChildren,The following statement contains a magic number: switch(nodes[0].Token.Text)              {                  case "stringDir":                      TypeOfAssignment = AssignmentType.StringDirAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "stringTable":                      TypeOfAssignment = AssignmentType.StringTableAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "leftArrowImage":                      TypeOfAssignment = AssignmentType.LeftArrowImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "rightArrowImage":                      TypeOfAssignment = AssignmentType.RightArrowImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "tracking":                      TypeOfAssignment = AssignmentType.TrackingAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "trigger":                      TypeOfAssignment = AssignmentType.TriggerAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "image":                      TypeOfAssignment = AssignmentType.ImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "position":                      TypeOfAssignment = AssignmentType.PositionAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "size":                      TypeOfAssignment = AssignmentType.SizeAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "id":                      TypeOfAssignment = AssignmentType.IDAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "orientation":                      TypeOfAssignment = AssignmentType.OrientationAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "opaque":                      TypeOfAssignment = AssignmentType.OpaqueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "assetID":                      TypeOfAssignment = AssignmentType.AssetIDAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "stringIndex":                      TypeOfAssignment = AssignmentType.StringIndexAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "text":                      TypeOfAssignment = AssignmentType.TextAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "font":                      TypeOfAssignment = AssignmentType.FontAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "textColorSelected":                      TypeOfAssignment = AssignmentType.TextColorSelectedAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textColorHighlighted":                      TypeOfAssignment = AssignmentType.TextColorHighlightedAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textColorDisabled":                      TypeOfAssignment = AssignmentType.TextColorDisabledAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textButton":                      TypeOfAssignment = AssignmentType.TextButtonAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "color":                      TypeOfAssignment = AssignmentType.ColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "alignment":                      TypeOfAssignment = AssignmentType.AlignmentAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "backColor":                      TypeOfAssignment = AssignmentType.BackColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "frameOnFocus":                      TypeOfAssignment = AssignmentType.FrameOnFocusAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "transparent":                      TypeOfAssignment = AssignmentType.TransparentAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "capacity":                      TypeOfAssignment = AssignmentType.CapacityAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "lines":                      TypeOfAssignment = AssignmentType.LinesAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "flashOnEmpty":                      TypeOfAssignment = AssignmentType.FlashOnEmptyAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "thumbImageSize":                      TypeOfAssignment = AssignmentType.ThumbImageSizeAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "thumbImageOffsets":                      TypeOfAssignment = AssignmentType.ThumbImageOffsetsAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "thumbButtonImage":                      TypeOfAssignment = AssignmentType.ThumbButtonImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "wrapped":                      TypeOfAssignment = AssignmentType.WrappedAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "textColor":                      TypeOfAssignment = AssignmentType.TextColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "mode":                      TypeOfAssignment = AssignmentType.ModeAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "scrollBarImage":                      TypeOfAssignment = AssignmentType.ScrollBarImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "scrollBarGutter":                      TypeOfAssignment = AssignmentType.ScrollBarGutterAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "scrollBarType":                      TypeOfAssignment = AssignmentType.ScrollBarTypeAssignment;                      Value = Value = int.Parse(nodes[2].Token.Text);                      break;                  case "enableIME":                      TypeOfAssignment = AssignmentType.EnableIMEAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "highlighted":                      TypeOfAssignment = AssignmentType.HighlightedAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "minValue":                      TypeOfAssignment = AssignmentType.MinValueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "maxValue":                      TypeOfAssignment = AssignmentType.MaxValueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "pageSize":                      TypeOfAssignment = AssignmentType.PageSizeAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "cursorColor":                      TypeOfAssignment = AssignmentType.CursorColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "toolTip":                      TypeOfAssignment = AssignmentType.TooltipAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "tooltip":                      TypeOfAssignment = AssignmentType.TooltipAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "MouseTransparent":                      TypeOfAssignment = AssignmentType.MouseTransparentAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "imagestates":                      TypeOfAssignment = AssignmentType.ImageStatesAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "backgroundColor":                      TypeOfAssignment = AssignmentType.BackgroundColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "framecolor":                      TypeOfAssignment = AssignmentType.FrameColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "alignments":                      TypeOfAssignment = AssignmentType.AlignmentsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "visibleRows":                      TypeOfAssignment = AssignmentType.VisibleRowsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "columns":                      TypeOfAssignment = AssignmentType.ColumnsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "rowHeight":                      TypeOfAssignment = AssignmentType.RowHeightAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "fillColor":                      TypeOfAssignment = AssignmentType.FillColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "selectionFillColor":                      TypeOfAssignment = AssignmentType.SelectionFillColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "cursor":                      TypeOfAssignment = AssignmentType.CursorAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "lineHeight":                      TypeOfAssignment = AssignmentType.LineHeightAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetL":                      TypeOfAssignment = AssignmentType.EdgeOffsetLAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetR":                      TypeOfAssignment = AssignmentType.EdgeOffsetRAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetT":                      TypeOfAssignment = AssignmentType.EdgeOffsetTAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetB":                      TypeOfAssignment = AssignmentType.EdgeOffsetBAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "foregroundImage":                      TypeOfAssignment = AssignmentType.ForegroundImageAssignment;                      Value = nodes[2].Token.Text;                      break;                  case "backgroundImage":                      TypeOfAssignment = AssignmentType.BackgroundImageAssignment;                      Value = nodes[2].Token.Text;                      break;                  case "value":                      TypeOfAssignment = AssignmentType.ValueAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "useBackgroundImage":                      TypeOfAssignment = AssignmentType.UseBackgroundImageAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "enabled":                      TypeOfAssignment = AssignmentType.EnabledAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "fittext":                      TypeOfAssignment = AssignmentType.FitTextAssignment;                      Value = (int)nodes[2].Token.Value;                      break;              }
Magic Number,UIParser.Nodes,AssignmentNode,C:\repos\Afr0_Project-Dollhouse\Other\libs\UIParser\UIParser\Nodes\AssignmentNode.cs,InitChildren,The following statement contains a magic number: switch(nodes[0].Token.Text)              {                  case "stringDir":                      TypeOfAssignment = AssignmentType.StringDirAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "stringTable":                      TypeOfAssignment = AssignmentType.StringTableAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "leftArrowImage":                      TypeOfAssignment = AssignmentType.LeftArrowImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "rightArrowImage":                      TypeOfAssignment = AssignmentType.RightArrowImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "tracking":                      TypeOfAssignment = AssignmentType.TrackingAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "trigger":                      TypeOfAssignment = AssignmentType.TriggerAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "image":                      TypeOfAssignment = AssignmentType.ImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "position":                      TypeOfAssignment = AssignmentType.PositionAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "size":                      TypeOfAssignment = AssignmentType.SizeAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "id":                      TypeOfAssignment = AssignmentType.IDAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "orientation":                      TypeOfAssignment = AssignmentType.OrientationAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "opaque":                      TypeOfAssignment = AssignmentType.OpaqueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "assetID":                      TypeOfAssignment = AssignmentType.AssetIDAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "stringIndex":                      TypeOfAssignment = AssignmentType.StringIndexAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "text":                      TypeOfAssignment = AssignmentType.TextAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "font":                      TypeOfAssignment = AssignmentType.FontAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "textColorSelected":                      TypeOfAssignment = AssignmentType.TextColorSelectedAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textColorHighlighted":                      TypeOfAssignment = AssignmentType.TextColorHighlightedAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textColorDisabled":                      TypeOfAssignment = AssignmentType.TextColorDisabledAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textButton":                      TypeOfAssignment = AssignmentType.TextButtonAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "color":                      TypeOfAssignment = AssignmentType.ColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "alignment":                      TypeOfAssignment = AssignmentType.AlignmentAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "backColor":                      TypeOfAssignment = AssignmentType.BackColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "frameOnFocus":                      TypeOfAssignment = AssignmentType.FrameOnFocusAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "transparent":                      TypeOfAssignment = AssignmentType.TransparentAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "capacity":                      TypeOfAssignment = AssignmentType.CapacityAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "lines":                      TypeOfAssignment = AssignmentType.LinesAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "flashOnEmpty":                      TypeOfAssignment = AssignmentType.FlashOnEmptyAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "thumbImageSize":                      TypeOfAssignment = AssignmentType.ThumbImageSizeAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "thumbImageOffsets":                      TypeOfAssignment = AssignmentType.ThumbImageOffsetsAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "thumbButtonImage":                      TypeOfAssignment = AssignmentType.ThumbButtonImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "wrapped":                      TypeOfAssignment = AssignmentType.WrappedAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "textColor":                      TypeOfAssignment = AssignmentType.TextColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "mode":                      TypeOfAssignment = AssignmentType.ModeAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "scrollBarImage":                      TypeOfAssignment = AssignmentType.ScrollBarImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "scrollBarGutter":                      TypeOfAssignment = AssignmentType.ScrollBarGutterAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "scrollBarType":                      TypeOfAssignment = AssignmentType.ScrollBarTypeAssignment;                      Value = Value = int.Parse(nodes[2].Token.Text);                      break;                  case "enableIME":                      TypeOfAssignment = AssignmentType.EnableIMEAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "highlighted":                      TypeOfAssignment = AssignmentType.HighlightedAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "minValue":                      TypeOfAssignment = AssignmentType.MinValueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "maxValue":                      TypeOfAssignment = AssignmentType.MaxValueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "pageSize":                      TypeOfAssignment = AssignmentType.PageSizeAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "cursorColor":                      TypeOfAssignment = AssignmentType.CursorColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "toolTip":                      TypeOfAssignment = AssignmentType.TooltipAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "tooltip":                      TypeOfAssignment = AssignmentType.TooltipAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "MouseTransparent":                      TypeOfAssignment = AssignmentType.MouseTransparentAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "imagestates":                      TypeOfAssignment = AssignmentType.ImageStatesAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "backgroundColor":                      TypeOfAssignment = AssignmentType.BackgroundColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "framecolor":                      TypeOfAssignment = AssignmentType.FrameColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "alignments":                      TypeOfAssignment = AssignmentType.AlignmentsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "visibleRows":                      TypeOfAssignment = AssignmentType.VisibleRowsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "columns":                      TypeOfAssignment = AssignmentType.ColumnsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "rowHeight":                      TypeOfAssignment = AssignmentType.RowHeightAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "fillColor":                      TypeOfAssignment = AssignmentType.FillColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "selectionFillColor":                      TypeOfAssignment = AssignmentType.SelectionFillColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "cursor":                      TypeOfAssignment = AssignmentType.CursorAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "lineHeight":                      TypeOfAssignment = AssignmentType.LineHeightAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetL":                      TypeOfAssignment = AssignmentType.EdgeOffsetLAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetR":                      TypeOfAssignment = AssignmentType.EdgeOffsetRAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetT":                      TypeOfAssignment = AssignmentType.EdgeOffsetTAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetB":                      TypeOfAssignment = AssignmentType.EdgeOffsetBAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "foregroundImage":                      TypeOfAssignment = AssignmentType.ForegroundImageAssignment;                      Value = nodes[2].Token.Text;                      break;                  case "backgroundImage":                      TypeOfAssignment = AssignmentType.BackgroundImageAssignment;                      Value = nodes[2].Token.Text;                      break;                  case "value":                      TypeOfAssignment = AssignmentType.ValueAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "useBackgroundImage":                      TypeOfAssignment = AssignmentType.UseBackgroundImageAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "enabled":                      TypeOfAssignment = AssignmentType.EnabledAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "fittext":                      TypeOfAssignment = AssignmentType.FitTextAssignment;                      Value = (int)nodes[2].Token.Value;                      break;              }
Magic Number,UIParser.Nodes,AssignmentNode,C:\repos\Afr0_Project-Dollhouse\Other\libs\UIParser\UIParser\Nodes\AssignmentNode.cs,InitChildren,The following statement contains a magic number: switch(nodes[0].Token.Text)              {                  case "stringDir":                      TypeOfAssignment = AssignmentType.StringDirAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "stringTable":                      TypeOfAssignment = AssignmentType.StringTableAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "leftArrowImage":                      TypeOfAssignment = AssignmentType.LeftArrowImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "rightArrowImage":                      TypeOfAssignment = AssignmentType.RightArrowImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "tracking":                      TypeOfAssignment = AssignmentType.TrackingAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "trigger":                      TypeOfAssignment = AssignmentType.TriggerAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "image":                      TypeOfAssignment = AssignmentType.ImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "position":                      TypeOfAssignment = AssignmentType.PositionAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "size":                      TypeOfAssignment = AssignmentType.SizeAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "id":                      TypeOfAssignment = AssignmentType.IDAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "orientation":                      TypeOfAssignment = AssignmentType.OrientationAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "opaque":                      TypeOfAssignment = AssignmentType.OpaqueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "assetID":                      TypeOfAssignment = AssignmentType.AssetIDAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "stringIndex":                      TypeOfAssignment = AssignmentType.StringIndexAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "text":                      TypeOfAssignment = AssignmentType.TextAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "font":                      TypeOfAssignment = AssignmentType.FontAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "textColorSelected":                      TypeOfAssignment = AssignmentType.TextColorSelectedAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textColorHighlighted":                      TypeOfAssignment = AssignmentType.TextColorHighlightedAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textColorDisabled":                      TypeOfAssignment = AssignmentType.TextColorDisabledAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textButton":                      TypeOfAssignment = AssignmentType.TextButtonAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "color":                      TypeOfAssignment = AssignmentType.ColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "alignment":                      TypeOfAssignment = AssignmentType.AlignmentAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "backColor":                      TypeOfAssignment = AssignmentType.BackColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "frameOnFocus":                      TypeOfAssignment = AssignmentType.FrameOnFocusAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "transparent":                      TypeOfAssignment = AssignmentType.TransparentAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "capacity":                      TypeOfAssignment = AssignmentType.CapacityAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "lines":                      TypeOfAssignment = AssignmentType.LinesAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "flashOnEmpty":                      TypeOfAssignment = AssignmentType.FlashOnEmptyAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "thumbImageSize":                      TypeOfAssignment = AssignmentType.ThumbImageSizeAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "thumbImageOffsets":                      TypeOfAssignment = AssignmentType.ThumbImageOffsetsAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "thumbButtonImage":                      TypeOfAssignment = AssignmentType.ThumbButtonImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "wrapped":                      TypeOfAssignment = AssignmentType.WrappedAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "textColor":                      TypeOfAssignment = AssignmentType.TextColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "mode":                      TypeOfAssignment = AssignmentType.ModeAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "scrollBarImage":                      TypeOfAssignment = AssignmentType.ScrollBarImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "scrollBarGutter":                      TypeOfAssignment = AssignmentType.ScrollBarGutterAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "scrollBarType":                      TypeOfAssignment = AssignmentType.ScrollBarTypeAssignment;                      Value = Value = int.Parse(nodes[2].Token.Text);                      break;                  case "enableIME":                      TypeOfAssignment = AssignmentType.EnableIMEAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "highlighted":                      TypeOfAssignment = AssignmentType.HighlightedAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "minValue":                      TypeOfAssignment = AssignmentType.MinValueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "maxValue":                      TypeOfAssignment = AssignmentType.MaxValueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "pageSize":                      TypeOfAssignment = AssignmentType.PageSizeAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "cursorColor":                      TypeOfAssignment = AssignmentType.CursorColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "toolTip":                      TypeOfAssignment = AssignmentType.TooltipAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "tooltip":                      TypeOfAssignment = AssignmentType.TooltipAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "MouseTransparent":                      TypeOfAssignment = AssignmentType.MouseTransparentAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "imagestates":                      TypeOfAssignment = AssignmentType.ImageStatesAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "backgroundColor":                      TypeOfAssignment = AssignmentType.BackgroundColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "framecolor":                      TypeOfAssignment = AssignmentType.FrameColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "alignments":                      TypeOfAssignment = AssignmentType.AlignmentsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "visibleRows":                      TypeOfAssignment = AssignmentType.VisibleRowsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "columns":                      TypeOfAssignment = AssignmentType.ColumnsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "rowHeight":                      TypeOfAssignment = AssignmentType.RowHeightAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "fillColor":                      TypeOfAssignment = AssignmentType.FillColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "selectionFillColor":                      TypeOfAssignment = AssignmentType.SelectionFillColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "cursor":                      TypeOfAssignment = AssignmentType.CursorAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "lineHeight":                      TypeOfAssignment = AssignmentType.LineHeightAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetL":                      TypeOfAssignment = AssignmentType.EdgeOffsetLAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetR":                      TypeOfAssignment = AssignmentType.EdgeOffsetRAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetT":                      TypeOfAssignment = AssignmentType.EdgeOffsetTAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetB":                      TypeOfAssignment = AssignmentType.EdgeOffsetBAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "foregroundImage":                      TypeOfAssignment = AssignmentType.ForegroundImageAssignment;                      Value = nodes[2].Token.Text;                      break;                  case "backgroundImage":                      TypeOfAssignment = AssignmentType.BackgroundImageAssignment;                      Value = nodes[2].Token.Text;                      break;                  case "value":                      TypeOfAssignment = AssignmentType.ValueAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "useBackgroundImage":                      TypeOfAssignment = AssignmentType.UseBackgroundImageAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "enabled":                      TypeOfAssignment = AssignmentType.EnabledAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "fittext":                      TypeOfAssignment = AssignmentType.FitTextAssignment;                      Value = (int)nodes[2].Token.Value;                      break;              }
Magic Number,UIParser.Nodes,AssignmentNode,C:\repos\Afr0_Project-Dollhouse\Other\libs\UIParser\UIParser\Nodes\AssignmentNode.cs,InitChildren,The following statement contains a magic number: switch(nodes[0].Token.Text)              {                  case "stringDir":                      TypeOfAssignment = AssignmentType.StringDirAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "stringTable":                      TypeOfAssignment = AssignmentType.StringTableAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "leftArrowImage":                      TypeOfAssignment = AssignmentType.LeftArrowImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "rightArrowImage":                      TypeOfAssignment = AssignmentType.RightArrowImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "tracking":                      TypeOfAssignment = AssignmentType.TrackingAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "trigger":                      TypeOfAssignment = AssignmentType.TriggerAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "image":                      TypeOfAssignment = AssignmentType.ImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "position":                      TypeOfAssignment = AssignmentType.PositionAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "size":                      TypeOfAssignment = AssignmentType.SizeAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "id":                      TypeOfAssignment = AssignmentType.IDAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "orientation":                      TypeOfAssignment = AssignmentType.OrientationAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "opaque":                      TypeOfAssignment = AssignmentType.OpaqueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "assetID":                      TypeOfAssignment = AssignmentType.AssetIDAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "stringIndex":                      TypeOfAssignment = AssignmentType.StringIndexAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "text":                      TypeOfAssignment = AssignmentType.TextAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "font":                      TypeOfAssignment = AssignmentType.FontAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "textColorSelected":                      TypeOfAssignment = AssignmentType.TextColorSelectedAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textColorHighlighted":                      TypeOfAssignment = AssignmentType.TextColorHighlightedAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textColorDisabled":                      TypeOfAssignment = AssignmentType.TextColorDisabledAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textButton":                      TypeOfAssignment = AssignmentType.TextButtonAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "color":                      TypeOfAssignment = AssignmentType.ColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "alignment":                      TypeOfAssignment = AssignmentType.AlignmentAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "backColor":                      TypeOfAssignment = AssignmentType.BackColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "frameOnFocus":                      TypeOfAssignment = AssignmentType.FrameOnFocusAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "transparent":                      TypeOfAssignment = AssignmentType.TransparentAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "capacity":                      TypeOfAssignment = AssignmentType.CapacityAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "lines":                      TypeOfAssignment = AssignmentType.LinesAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "flashOnEmpty":                      TypeOfAssignment = AssignmentType.FlashOnEmptyAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "thumbImageSize":                      TypeOfAssignment = AssignmentType.ThumbImageSizeAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "thumbImageOffsets":                      TypeOfAssignment = AssignmentType.ThumbImageOffsetsAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "thumbButtonImage":                      TypeOfAssignment = AssignmentType.ThumbButtonImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "wrapped":                      TypeOfAssignment = AssignmentType.WrappedAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "textColor":                      TypeOfAssignment = AssignmentType.TextColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "mode":                      TypeOfAssignment = AssignmentType.ModeAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "scrollBarImage":                      TypeOfAssignment = AssignmentType.ScrollBarImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "scrollBarGutter":                      TypeOfAssignment = AssignmentType.ScrollBarGutterAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "scrollBarType":                      TypeOfAssignment = AssignmentType.ScrollBarTypeAssignment;                      Value = Value = int.Parse(nodes[2].Token.Text);                      break;                  case "enableIME":                      TypeOfAssignment = AssignmentType.EnableIMEAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "highlighted":                      TypeOfAssignment = AssignmentType.HighlightedAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "minValue":                      TypeOfAssignment = AssignmentType.MinValueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "maxValue":                      TypeOfAssignment = AssignmentType.MaxValueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "pageSize":                      TypeOfAssignment = AssignmentType.PageSizeAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "cursorColor":                      TypeOfAssignment = AssignmentType.CursorColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "toolTip":                      TypeOfAssignment = AssignmentType.TooltipAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "tooltip":                      TypeOfAssignment = AssignmentType.TooltipAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "MouseTransparent":                      TypeOfAssignment = AssignmentType.MouseTransparentAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "imagestates":                      TypeOfAssignment = AssignmentType.ImageStatesAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "backgroundColor":                      TypeOfAssignment = AssignmentType.BackgroundColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "framecolor":                      TypeOfAssignment = AssignmentType.FrameColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "alignments":                      TypeOfAssignment = AssignmentType.AlignmentsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "visibleRows":                      TypeOfAssignment = AssignmentType.VisibleRowsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "columns":                      TypeOfAssignment = AssignmentType.ColumnsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "rowHeight":                      TypeOfAssignment = AssignmentType.RowHeightAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "fillColor":                      TypeOfAssignment = AssignmentType.FillColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "selectionFillColor":                      TypeOfAssignment = AssignmentType.SelectionFillColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "cursor":                      TypeOfAssignment = AssignmentType.CursorAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "lineHeight":                      TypeOfAssignment = AssignmentType.LineHeightAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetL":                      TypeOfAssignment = AssignmentType.EdgeOffsetLAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetR":                      TypeOfAssignment = AssignmentType.EdgeOffsetRAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetT":                      TypeOfAssignment = AssignmentType.EdgeOffsetTAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetB":                      TypeOfAssignment = AssignmentType.EdgeOffsetBAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "foregroundImage":                      TypeOfAssignment = AssignmentType.ForegroundImageAssignment;                      Value = nodes[2].Token.Text;                      break;                  case "backgroundImage":                      TypeOfAssignment = AssignmentType.BackgroundImageAssignment;                      Value = nodes[2].Token.Text;                      break;                  case "value":                      TypeOfAssignment = AssignmentType.ValueAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "useBackgroundImage":                      TypeOfAssignment = AssignmentType.UseBackgroundImageAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "enabled":                      TypeOfAssignment = AssignmentType.EnabledAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "fittext":                      TypeOfAssignment = AssignmentType.FitTextAssignment;                      Value = (int)nodes[2].Token.Value;                      break;              }
Magic Number,UIParser.Nodes,AssignmentNode,C:\repos\Afr0_Project-Dollhouse\Other\libs\UIParser\UIParser\Nodes\AssignmentNode.cs,InitChildren,The following statement contains a magic number: switch(nodes[0].Token.Text)              {                  case "stringDir":                      TypeOfAssignment = AssignmentType.StringDirAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "stringTable":                      TypeOfAssignment = AssignmentType.StringTableAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "leftArrowImage":                      TypeOfAssignment = AssignmentType.LeftArrowImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "rightArrowImage":                      TypeOfAssignment = AssignmentType.RightArrowImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "tracking":                      TypeOfAssignment = AssignmentType.TrackingAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "trigger":                      TypeOfAssignment = AssignmentType.TriggerAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "image":                      TypeOfAssignment = AssignmentType.ImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "position":                      TypeOfAssignment = AssignmentType.PositionAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "size":                      TypeOfAssignment = AssignmentType.SizeAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "id":                      TypeOfAssignment = AssignmentType.IDAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "orientation":                      TypeOfAssignment = AssignmentType.OrientationAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "opaque":                      TypeOfAssignment = AssignmentType.OpaqueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "assetID":                      TypeOfAssignment = AssignmentType.AssetIDAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "stringIndex":                      TypeOfAssignment = AssignmentType.StringIndexAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "text":                      TypeOfAssignment = AssignmentType.TextAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "font":                      TypeOfAssignment = AssignmentType.FontAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "textColorSelected":                      TypeOfAssignment = AssignmentType.TextColorSelectedAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textColorHighlighted":                      TypeOfAssignment = AssignmentType.TextColorHighlightedAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textColorDisabled":                      TypeOfAssignment = AssignmentType.TextColorDisabledAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textButton":                      TypeOfAssignment = AssignmentType.TextButtonAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "color":                      TypeOfAssignment = AssignmentType.ColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "alignment":                      TypeOfAssignment = AssignmentType.AlignmentAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "backColor":                      TypeOfAssignment = AssignmentType.BackColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "frameOnFocus":                      TypeOfAssignment = AssignmentType.FrameOnFocusAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "transparent":                      TypeOfAssignment = AssignmentType.TransparentAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "capacity":                      TypeOfAssignment = AssignmentType.CapacityAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "lines":                      TypeOfAssignment = AssignmentType.LinesAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "flashOnEmpty":                      TypeOfAssignment = AssignmentType.FlashOnEmptyAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "thumbImageSize":                      TypeOfAssignment = AssignmentType.ThumbImageSizeAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "thumbImageOffsets":                      TypeOfAssignment = AssignmentType.ThumbImageOffsetsAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "thumbButtonImage":                      TypeOfAssignment = AssignmentType.ThumbButtonImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "wrapped":                      TypeOfAssignment = AssignmentType.WrappedAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "textColor":                      TypeOfAssignment = AssignmentType.TextColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "mode":                      TypeOfAssignment = AssignmentType.ModeAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "scrollBarImage":                      TypeOfAssignment = AssignmentType.ScrollBarImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "scrollBarGutter":                      TypeOfAssignment = AssignmentType.ScrollBarGutterAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "scrollBarType":                      TypeOfAssignment = AssignmentType.ScrollBarTypeAssignment;                      Value = Value = int.Parse(nodes[2].Token.Text);                      break;                  case "enableIME":                      TypeOfAssignment = AssignmentType.EnableIMEAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "highlighted":                      TypeOfAssignment = AssignmentType.HighlightedAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "minValue":                      TypeOfAssignment = AssignmentType.MinValueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "maxValue":                      TypeOfAssignment = AssignmentType.MaxValueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "pageSize":                      TypeOfAssignment = AssignmentType.PageSizeAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "cursorColor":                      TypeOfAssignment = AssignmentType.CursorColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "toolTip":                      TypeOfAssignment = AssignmentType.TooltipAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "tooltip":                      TypeOfAssignment = AssignmentType.TooltipAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "MouseTransparent":                      TypeOfAssignment = AssignmentType.MouseTransparentAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "imagestates":                      TypeOfAssignment = AssignmentType.ImageStatesAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "backgroundColor":                      TypeOfAssignment = AssignmentType.BackgroundColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "framecolor":                      TypeOfAssignment = AssignmentType.FrameColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "alignments":                      TypeOfAssignment = AssignmentType.AlignmentsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "visibleRows":                      TypeOfAssignment = AssignmentType.VisibleRowsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "columns":                      TypeOfAssignment = AssignmentType.ColumnsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "rowHeight":                      TypeOfAssignment = AssignmentType.RowHeightAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "fillColor":                      TypeOfAssignment = AssignmentType.FillColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "selectionFillColor":                      TypeOfAssignment = AssignmentType.SelectionFillColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "cursor":                      TypeOfAssignment = AssignmentType.CursorAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "lineHeight":                      TypeOfAssignment = AssignmentType.LineHeightAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetL":                      TypeOfAssignment = AssignmentType.EdgeOffsetLAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetR":                      TypeOfAssignment = AssignmentType.EdgeOffsetRAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetT":                      TypeOfAssignment = AssignmentType.EdgeOffsetTAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetB":                      TypeOfAssignment = AssignmentType.EdgeOffsetBAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "foregroundImage":                      TypeOfAssignment = AssignmentType.ForegroundImageAssignment;                      Value = nodes[2].Token.Text;                      break;                  case "backgroundImage":                      TypeOfAssignment = AssignmentType.BackgroundImageAssignment;                      Value = nodes[2].Token.Text;                      break;                  case "value":                      TypeOfAssignment = AssignmentType.ValueAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "useBackgroundImage":                      TypeOfAssignment = AssignmentType.UseBackgroundImageAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "enabled":                      TypeOfAssignment = AssignmentType.EnabledAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "fittext":                      TypeOfAssignment = AssignmentType.FitTextAssignment;                      Value = (int)nodes[2].Token.Value;                      break;              }
Magic Number,UIParser.Nodes,AssignmentNode,C:\repos\Afr0_Project-Dollhouse\Other\libs\UIParser\UIParser\Nodes\AssignmentNode.cs,InitChildren,The following statement contains a magic number: switch(nodes[0].Token.Text)              {                  case "stringDir":                      TypeOfAssignment = AssignmentType.StringDirAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "stringTable":                      TypeOfAssignment = AssignmentType.StringTableAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "leftArrowImage":                      TypeOfAssignment = AssignmentType.LeftArrowImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "rightArrowImage":                      TypeOfAssignment = AssignmentType.RightArrowImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "tracking":                      TypeOfAssignment = AssignmentType.TrackingAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "trigger":                      TypeOfAssignment = AssignmentType.TriggerAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "image":                      TypeOfAssignment = AssignmentType.ImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "position":                      TypeOfAssignment = AssignmentType.PositionAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "size":                      TypeOfAssignment = AssignmentType.SizeAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "id":                      TypeOfAssignment = AssignmentType.IDAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "orientation":                      TypeOfAssignment = AssignmentType.OrientationAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "opaque":                      TypeOfAssignment = AssignmentType.OpaqueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "assetID":                      TypeOfAssignment = AssignmentType.AssetIDAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "stringIndex":                      TypeOfAssignment = AssignmentType.StringIndexAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "text":                      TypeOfAssignment = AssignmentType.TextAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "font":                      TypeOfAssignment = AssignmentType.FontAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "textColorSelected":                      TypeOfAssignment = AssignmentType.TextColorSelectedAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textColorHighlighted":                      TypeOfAssignment = AssignmentType.TextColorHighlightedAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textColorDisabled":                      TypeOfAssignment = AssignmentType.TextColorDisabledAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textButton":                      TypeOfAssignment = AssignmentType.TextButtonAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "color":                      TypeOfAssignment = AssignmentType.ColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "alignment":                      TypeOfAssignment = AssignmentType.AlignmentAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "backColor":                      TypeOfAssignment = AssignmentType.BackColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "frameOnFocus":                      TypeOfAssignment = AssignmentType.FrameOnFocusAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "transparent":                      TypeOfAssignment = AssignmentType.TransparentAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "capacity":                      TypeOfAssignment = AssignmentType.CapacityAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "lines":                      TypeOfAssignment = AssignmentType.LinesAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "flashOnEmpty":                      TypeOfAssignment = AssignmentType.FlashOnEmptyAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "thumbImageSize":                      TypeOfAssignment = AssignmentType.ThumbImageSizeAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "thumbImageOffsets":                      TypeOfAssignment = AssignmentType.ThumbImageOffsetsAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "thumbButtonImage":                      TypeOfAssignment = AssignmentType.ThumbButtonImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "wrapped":                      TypeOfAssignment = AssignmentType.WrappedAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "textColor":                      TypeOfAssignment = AssignmentType.TextColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "mode":                      TypeOfAssignment = AssignmentType.ModeAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "scrollBarImage":                      TypeOfAssignment = AssignmentType.ScrollBarImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "scrollBarGutter":                      TypeOfAssignment = AssignmentType.ScrollBarGutterAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "scrollBarType":                      TypeOfAssignment = AssignmentType.ScrollBarTypeAssignment;                      Value = Value = int.Parse(nodes[2].Token.Text);                      break;                  case "enableIME":                      TypeOfAssignment = AssignmentType.EnableIMEAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "highlighted":                      TypeOfAssignment = AssignmentType.HighlightedAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "minValue":                      TypeOfAssignment = AssignmentType.MinValueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "maxValue":                      TypeOfAssignment = AssignmentType.MaxValueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "pageSize":                      TypeOfAssignment = AssignmentType.PageSizeAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "cursorColor":                      TypeOfAssignment = AssignmentType.CursorColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "toolTip":                      TypeOfAssignment = AssignmentType.TooltipAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "tooltip":                      TypeOfAssignment = AssignmentType.TooltipAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "MouseTransparent":                      TypeOfAssignment = AssignmentType.MouseTransparentAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "imagestates":                      TypeOfAssignment = AssignmentType.ImageStatesAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "backgroundColor":                      TypeOfAssignment = AssignmentType.BackgroundColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "framecolor":                      TypeOfAssignment = AssignmentType.FrameColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "alignments":                      TypeOfAssignment = AssignmentType.AlignmentsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "visibleRows":                      TypeOfAssignment = AssignmentType.VisibleRowsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "columns":                      TypeOfAssignment = AssignmentType.ColumnsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "rowHeight":                      TypeOfAssignment = AssignmentType.RowHeightAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "fillColor":                      TypeOfAssignment = AssignmentType.FillColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "selectionFillColor":                      TypeOfAssignment = AssignmentType.SelectionFillColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "cursor":                      TypeOfAssignment = AssignmentType.CursorAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "lineHeight":                      TypeOfAssignment = AssignmentType.LineHeightAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetL":                      TypeOfAssignment = AssignmentType.EdgeOffsetLAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetR":                      TypeOfAssignment = AssignmentType.EdgeOffsetRAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetT":                      TypeOfAssignment = AssignmentType.EdgeOffsetTAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetB":                      TypeOfAssignment = AssignmentType.EdgeOffsetBAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "foregroundImage":                      TypeOfAssignment = AssignmentType.ForegroundImageAssignment;                      Value = nodes[2].Token.Text;                      break;                  case "backgroundImage":                      TypeOfAssignment = AssignmentType.BackgroundImageAssignment;                      Value = nodes[2].Token.Text;                      break;                  case "value":                      TypeOfAssignment = AssignmentType.ValueAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "useBackgroundImage":                      TypeOfAssignment = AssignmentType.UseBackgroundImageAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "enabled":                      TypeOfAssignment = AssignmentType.EnabledAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "fittext":                      TypeOfAssignment = AssignmentType.FitTextAssignment;                      Value = (int)nodes[2].Token.Value;                      break;              }
Magic Number,UIParser.Nodes,AssignmentNode,C:\repos\Afr0_Project-Dollhouse\Other\libs\UIParser\UIParser\Nodes\AssignmentNode.cs,InitChildren,The following statement contains a magic number: switch(nodes[0].Token.Text)              {                  case "stringDir":                      TypeOfAssignment = AssignmentType.StringDirAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "stringTable":                      TypeOfAssignment = AssignmentType.StringTableAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "leftArrowImage":                      TypeOfAssignment = AssignmentType.LeftArrowImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "rightArrowImage":                      TypeOfAssignment = AssignmentType.RightArrowImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "tracking":                      TypeOfAssignment = AssignmentType.TrackingAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "trigger":                      TypeOfAssignment = AssignmentType.TriggerAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "image":                      TypeOfAssignment = AssignmentType.ImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "position":                      TypeOfAssignment = AssignmentType.PositionAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "size":                      TypeOfAssignment = AssignmentType.SizeAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "id":                      TypeOfAssignment = AssignmentType.IDAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "orientation":                      TypeOfAssignment = AssignmentType.OrientationAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "opaque":                      TypeOfAssignment = AssignmentType.OpaqueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "assetID":                      TypeOfAssignment = AssignmentType.AssetIDAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "stringIndex":                      TypeOfAssignment = AssignmentType.StringIndexAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "text":                      TypeOfAssignment = AssignmentType.TextAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "font":                      TypeOfAssignment = AssignmentType.FontAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "textColorSelected":                      TypeOfAssignment = AssignmentType.TextColorSelectedAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textColorHighlighted":                      TypeOfAssignment = AssignmentType.TextColorHighlightedAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textColorDisabled":                      TypeOfAssignment = AssignmentType.TextColorDisabledAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textButton":                      TypeOfAssignment = AssignmentType.TextButtonAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "color":                      TypeOfAssignment = AssignmentType.ColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "alignment":                      TypeOfAssignment = AssignmentType.AlignmentAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "backColor":                      TypeOfAssignment = AssignmentType.BackColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "frameOnFocus":                      TypeOfAssignment = AssignmentType.FrameOnFocusAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "transparent":                      TypeOfAssignment = AssignmentType.TransparentAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "capacity":                      TypeOfAssignment = AssignmentType.CapacityAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "lines":                      TypeOfAssignment = AssignmentType.LinesAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "flashOnEmpty":                      TypeOfAssignment = AssignmentType.FlashOnEmptyAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "thumbImageSize":                      TypeOfAssignment = AssignmentType.ThumbImageSizeAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "thumbImageOffsets":                      TypeOfAssignment = AssignmentType.ThumbImageOffsetsAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "thumbButtonImage":                      TypeOfAssignment = AssignmentType.ThumbButtonImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "wrapped":                      TypeOfAssignment = AssignmentType.WrappedAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "textColor":                      TypeOfAssignment = AssignmentType.TextColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "mode":                      TypeOfAssignment = AssignmentType.ModeAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "scrollBarImage":                      TypeOfAssignment = AssignmentType.ScrollBarImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "scrollBarGutter":                      TypeOfAssignment = AssignmentType.ScrollBarGutterAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "scrollBarType":                      TypeOfAssignment = AssignmentType.ScrollBarTypeAssignment;                      Value = Value = int.Parse(nodes[2].Token.Text);                      break;                  case "enableIME":                      TypeOfAssignment = AssignmentType.EnableIMEAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "highlighted":                      TypeOfAssignment = AssignmentType.HighlightedAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "minValue":                      TypeOfAssignment = AssignmentType.MinValueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "maxValue":                      TypeOfAssignment = AssignmentType.MaxValueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "pageSize":                      TypeOfAssignment = AssignmentType.PageSizeAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "cursorColor":                      TypeOfAssignment = AssignmentType.CursorColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "toolTip":                      TypeOfAssignment = AssignmentType.TooltipAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "tooltip":                      TypeOfAssignment = AssignmentType.TooltipAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "MouseTransparent":                      TypeOfAssignment = AssignmentType.MouseTransparentAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "imagestates":                      TypeOfAssignment = AssignmentType.ImageStatesAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "backgroundColor":                      TypeOfAssignment = AssignmentType.BackgroundColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "framecolor":                      TypeOfAssignment = AssignmentType.FrameColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "alignments":                      TypeOfAssignment = AssignmentType.AlignmentsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "visibleRows":                      TypeOfAssignment = AssignmentType.VisibleRowsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "columns":                      TypeOfAssignment = AssignmentType.ColumnsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "rowHeight":                      TypeOfAssignment = AssignmentType.RowHeightAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "fillColor":                      TypeOfAssignment = AssignmentType.FillColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "selectionFillColor":                      TypeOfAssignment = AssignmentType.SelectionFillColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "cursor":                      TypeOfAssignment = AssignmentType.CursorAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "lineHeight":                      TypeOfAssignment = AssignmentType.LineHeightAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetL":                      TypeOfAssignment = AssignmentType.EdgeOffsetLAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetR":                      TypeOfAssignment = AssignmentType.EdgeOffsetRAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetT":                      TypeOfAssignment = AssignmentType.EdgeOffsetTAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetB":                      TypeOfAssignment = AssignmentType.EdgeOffsetBAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "foregroundImage":                      TypeOfAssignment = AssignmentType.ForegroundImageAssignment;                      Value = nodes[2].Token.Text;                      break;                  case "backgroundImage":                      TypeOfAssignment = AssignmentType.BackgroundImageAssignment;                      Value = nodes[2].Token.Text;                      break;                  case "value":                      TypeOfAssignment = AssignmentType.ValueAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "useBackgroundImage":                      TypeOfAssignment = AssignmentType.UseBackgroundImageAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "enabled":                      TypeOfAssignment = AssignmentType.EnabledAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "fittext":                      TypeOfAssignment = AssignmentType.FitTextAssignment;                      Value = (int)nodes[2].Token.Value;                      break;              }
Magic Number,UIParser.Nodes,AssignmentNode,C:\repos\Afr0_Project-Dollhouse\Other\libs\UIParser\UIParser\Nodes\AssignmentNode.cs,InitChildren,The following statement contains a magic number: switch(nodes[0].Token.Text)              {                  case "stringDir":                      TypeOfAssignment = AssignmentType.StringDirAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "stringTable":                      TypeOfAssignment = AssignmentType.StringTableAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "leftArrowImage":                      TypeOfAssignment = AssignmentType.LeftArrowImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "rightArrowImage":                      TypeOfAssignment = AssignmentType.RightArrowImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "tracking":                      TypeOfAssignment = AssignmentType.TrackingAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "trigger":                      TypeOfAssignment = AssignmentType.TriggerAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "image":                      TypeOfAssignment = AssignmentType.ImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "position":                      TypeOfAssignment = AssignmentType.PositionAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "size":                      TypeOfAssignment = AssignmentType.SizeAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "id":                      TypeOfAssignment = AssignmentType.IDAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "orientation":                      TypeOfAssignment = AssignmentType.OrientationAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "opaque":                      TypeOfAssignment = AssignmentType.OpaqueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "assetID":                      TypeOfAssignment = AssignmentType.AssetIDAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "stringIndex":                      TypeOfAssignment = AssignmentType.StringIndexAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "text":                      TypeOfAssignment = AssignmentType.TextAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "font":                      TypeOfAssignment = AssignmentType.FontAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "textColorSelected":                      TypeOfAssignment = AssignmentType.TextColorSelectedAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textColorHighlighted":                      TypeOfAssignment = AssignmentType.TextColorHighlightedAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textColorDisabled":                      TypeOfAssignment = AssignmentType.TextColorDisabledAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textButton":                      TypeOfAssignment = AssignmentType.TextButtonAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "color":                      TypeOfAssignment = AssignmentType.ColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "alignment":                      TypeOfAssignment = AssignmentType.AlignmentAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "backColor":                      TypeOfAssignment = AssignmentType.BackColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "frameOnFocus":                      TypeOfAssignment = AssignmentType.FrameOnFocusAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "transparent":                      TypeOfAssignment = AssignmentType.TransparentAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "capacity":                      TypeOfAssignment = AssignmentType.CapacityAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "lines":                      TypeOfAssignment = AssignmentType.LinesAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "flashOnEmpty":                      TypeOfAssignment = AssignmentType.FlashOnEmptyAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "thumbImageSize":                      TypeOfAssignment = AssignmentType.ThumbImageSizeAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "thumbImageOffsets":                      TypeOfAssignment = AssignmentType.ThumbImageOffsetsAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "thumbButtonImage":                      TypeOfAssignment = AssignmentType.ThumbButtonImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "wrapped":                      TypeOfAssignment = AssignmentType.WrappedAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "textColor":                      TypeOfAssignment = AssignmentType.TextColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "mode":                      TypeOfAssignment = AssignmentType.ModeAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "scrollBarImage":                      TypeOfAssignment = AssignmentType.ScrollBarImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "scrollBarGutter":                      TypeOfAssignment = AssignmentType.ScrollBarGutterAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "scrollBarType":                      TypeOfAssignment = AssignmentType.ScrollBarTypeAssignment;                      Value = Value = int.Parse(nodes[2].Token.Text);                      break;                  case "enableIME":                      TypeOfAssignment = AssignmentType.EnableIMEAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "highlighted":                      TypeOfAssignment = AssignmentType.HighlightedAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "minValue":                      TypeOfAssignment = AssignmentType.MinValueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "maxValue":                      TypeOfAssignment = AssignmentType.MaxValueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "pageSize":                      TypeOfAssignment = AssignmentType.PageSizeAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "cursorColor":                      TypeOfAssignment = AssignmentType.CursorColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "toolTip":                      TypeOfAssignment = AssignmentType.TooltipAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "tooltip":                      TypeOfAssignment = AssignmentType.TooltipAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "MouseTransparent":                      TypeOfAssignment = AssignmentType.MouseTransparentAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "imagestates":                      TypeOfAssignment = AssignmentType.ImageStatesAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "backgroundColor":                      TypeOfAssignment = AssignmentType.BackgroundColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "framecolor":                      TypeOfAssignment = AssignmentType.FrameColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "alignments":                      TypeOfAssignment = AssignmentType.AlignmentsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "visibleRows":                      TypeOfAssignment = AssignmentType.VisibleRowsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "columns":                      TypeOfAssignment = AssignmentType.ColumnsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "rowHeight":                      TypeOfAssignment = AssignmentType.RowHeightAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "fillColor":                      TypeOfAssignment = AssignmentType.FillColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "selectionFillColor":                      TypeOfAssignment = AssignmentType.SelectionFillColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "cursor":                      TypeOfAssignment = AssignmentType.CursorAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "lineHeight":                      TypeOfAssignment = AssignmentType.LineHeightAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetL":                      TypeOfAssignment = AssignmentType.EdgeOffsetLAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetR":                      TypeOfAssignment = AssignmentType.EdgeOffsetRAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetT":                      TypeOfAssignment = AssignmentType.EdgeOffsetTAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetB":                      TypeOfAssignment = AssignmentType.EdgeOffsetBAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "foregroundImage":                      TypeOfAssignment = AssignmentType.ForegroundImageAssignment;                      Value = nodes[2].Token.Text;                      break;                  case "backgroundImage":                      TypeOfAssignment = AssignmentType.BackgroundImageAssignment;                      Value = nodes[2].Token.Text;                      break;                  case "value":                      TypeOfAssignment = AssignmentType.ValueAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "useBackgroundImage":                      TypeOfAssignment = AssignmentType.UseBackgroundImageAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "enabled":                      TypeOfAssignment = AssignmentType.EnabledAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "fittext":                      TypeOfAssignment = AssignmentType.FitTextAssignment;                      Value = (int)nodes[2].Token.Value;                      break;              }
Magic Number,UIParser.Nodes,AssignmentNode,C:\repos\Afr0_Project-Dollhouse\Other\libs\UIParser\UIParser\Nodes\AssignmentNode.cs,InitChildren,The following statement contains a magic number: switch(nodes[0].Token.Text)              {                  case "stringDir":                      TypeOfAssignment = AssignmentType.StringDirAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "stringTable":                      TypeOfAssignment = AssignmentType.StringTableAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "leftArrowImage":                      TypeOfAssignment = AssignmentType.LeftArrowImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "rightArrowImage":                      TypeOfAssignment = AssignmentType.RightArrowImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "tracking":                      TypeOfAssignment = AssignmentType.TrackingAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "trigger":                      TypeOfAssignment = AssignmentType.TriggerAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "image":                      TypeOfAssignment = AssignmentType.ImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "position":                      TypeOfAssignment = AssignmentType.PositionAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "size":                      TypeOfAssignment = AssignmentType.SizeAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "id":                      TypeOfAssignment = AssignmentType.IDAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "orientation":                      TypeOfAssignment = AssignmentType.OrientationAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "opaque":                      TypeOfAssignment = AssignmentType.OpaqueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "assetID":                      TypeOfAssignment = AssignmentType.AssetIDAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "stringIndex":                      TypeOfAssignment = AssignmentType.StringIndexAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "text":                      TypeOfAssignment = AssignmentType.TextAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "font":                      TypeOfAssignment = AssignmentType.FontAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "textColorSelected":                      TypeOfAssignment = AssignmentType.TextColorSelectedAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textColorHighlighted":                      TypeOfAssignment = AssignmentType.TextColorHighlightedAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textColorDisabled":                      TypeOfAssignment = AssignmentType.TextColorDisabledAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textButton":                      TypeOfAssignment = AssignmentType.TextButtonAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "color":                      TypeOfAssignment = AssignmentType.ColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "alignment":                      TypeOfAssignment = AssignmentType.AlignmentAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "backColor":                      TypeOfAssignment = AssignmentType.BackColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "frameOnFocus":                      TypeOfAssignment = AssignmentType.FrameOnFocusAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "transparent":                      TypeOfAssignment = AssignmentType.TransparentAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "capacity":                      TypeOfAssignment = AssignmentType.CapacityAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "lines":                      TypeOfAssignment = AssignmentType.LinesAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "flashOnEmpty":                      TypeOfAssignment = AssignmentType.FlashOnEmptyAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "thumbImageSize":                      TypeOfAssignment = AssignmentType.ThumbImageSizeAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "thumbImageOffsets":                      TypeOfAssignment = AssignmentType.ThumbImageOffsetsAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "thumbButtonImage":                      TypeOfAssignment = AssignmentType.ThumbButtonImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "wrapped":                      TypeOfAssignment = AssignmentType.WrappedAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "textColor":                      TypeOfAssignment = AssignmentType.TextColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "mode":                      TypeOfAssignment = AssignmentType.ModeAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "scrollBarImage":                      TypeOfAssignment = AssignmentType.ScrollBarImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "scrollBarGutter":                      TypeOfAssignment = AssignmentType.ScrollBarGutterAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "scrollBarType":                      TypeOfAssignment = AssignmentType.ScrollBarTypeAssignment;                      Value = Value = int.Parse(nodes[2].Token.Text);                      break;                  case "enableIME":                      TypeOfAssignment = AssignmentType.EnableIMEAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "highlighted":                      TypeOfAssignment = AssignmentType.HighlightedAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "minValue":                      TypeOfAssignment = AssignmentType.MinValueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "maxValue":                      TypeOfAssignment = AssignmentType.MaxValueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "pageSize":                      TypeOfAssignment = AssignmentType.PageSizeAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "cursorColor":                      TypeOfAssignment = AssignmentType.CursorColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "toolTip":                      TypeOfAssignment = AssignmentType.TooltipAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "tooltip":                      TypeOfAssignment = AssignmentType.TooltipAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "MouseTransparent":                      TypeOfAssignment = AssignmentType.MouseTransparentAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "imagestates":                      TypeOfAssignment = AssignmentType.ImageStatesAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "backgroundColor":                      TypeOfAssignment = AssignmentType.BackgroundColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "framecolor":                      TypeOfAssignment = AssignmentType.FrameColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "alignments":                      TypeOfAssignment = AssignmentType.AlignmentsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "visibleRows":                      TypeOfAssignment = AssignmentType.VisibleRowsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "columns":                      TypeOfAssignment = AssignmentType.ColumnsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "rowHeight":                      TypeOfAssignment = AssignmentType.RowHeightAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "fillColor":                      TypeOfAssignment = AssignmentType.FillColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "selectionFillColor":                      TypeOfAssignment = AssignmentType.SelectionFillColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "cursor":                      TypeOfAssignment = AssignmentType.CursorAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "lineHeight":                      TypeOfAssignment = AssignmentType.LineHeightAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetL":                      TypeOfAssignment = AssignmentType.EdgeOffsetLAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetR":                      TypeOfAssignment = AssignmentType.EdgeOffsetRAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetT":                      TypeOfAssignment = AssignmentType.EdgeOffsetTAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetB":                      TypeOfAssignment = AssignmentType.EdgeOffsetBAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "foregroundImage":                      TypeOfAssignment = AssignmentType.ForegroundImageAssignment;                      Value = nodes[2].Token.Text;                      break;                  case "backgroundImage":                      TypeOfAssignment = AssignmentType.BackgroundImageAssignment;                      Value = nodes[2].Token.Text;                      break;                  case "value":                      TypeOfAssignment = AssignmentType.ValueAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "useBackgroundImage":                      TypeOfAssignment = AssignmentType.UseBackgroundImageAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "enabled":                      TypeOfAssignment = AssignmentType.EnabledAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "fittext":                      TypeOfAssignment = AssignmentType.FitTextAssignment;                      Value = (int)nodes[2].Token.Value;                      break;              }
Magic Number,UIParser.Nodes,AssignmentNode,C:\repos\Afr0_Project-Dollhouse\Other\libs\UIParser\UIParser\Nodes\AssignmentNode.cs,InitChildren,The following statement contains a magic number: switch(nodes[0].Token.Text)              {                  case "stringDir":                      TypeOfAssignment = AssignmentType.StringDirAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "stringTable":                      TypeOfAssignment = AssignmentType.StringTableAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "leftArrowImage":                      TypeOfAssignment = AssignmentType.LeftArrowImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "rightArrowImage":                      TypeOfAssignment = AssignmentType.RightArrowImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "tracking":                      TypeOfAssignment = AssignmentType.TrackingAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "trigger":                      TypeOfAssignment = AssignmentType.TriggerAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "image":                      TypeOfAssignment = AssignmentType.ImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "position":                      TypeOfAssignment = AssignmentType.PositionAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "size":                      TypeOfAssignment = AssignmentType.SizeAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "id":                      TypeOfAssignment = AssignmentType.IDAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "orientation":                      TypeOfAssignment = AssignmentType.OrientationAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "opaque":                      TypeOfAssignment = AssignmentType.OpaqueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "assetID":                      TypeOfAssignment = AssignmentType.AssetIDAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "stringIndex":                      TypeOfAssignment = AssignmentType.StringIndexAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "text":                      TypeOfAssignment = AssignmentType.TextAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "font":                      TypeOfAssignment = AssignmentType.FontAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "textColorSelected":                      TypeOfAssignment = AssignmentType.TextColorSelectedAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textColorHighlighted":                      TypeOfAssignment = AssignmentType.TextColorHighlightedAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textColorDisabled":                      TypeOfAssignment = AssignmentType.TextColorDisabledAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textButton":                      TypeOfAssignment = AssignmentType.TextButtonAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "color":                      TypeOfAssignment = AssignmentType.ColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "alignment":                      TypeOfAssignment = AssignmentType.AlignmentAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "backColor":                      TypeOfAssignment = AssignmentType.BackColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "frameOnFocus":                      TypeOfAssignment = AssignmentType.FrameOnFocusAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "transparent":                      TypeOfAssignment = AssignmentType.TransparentAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "capacity":                      TypeOfAssignment = AssignmentType.CapacityAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "lines":                      TypeOfAssignment = AssignmentType.LinesAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "flashOnEmpty":                      TypeOfAssignment = AssignmentType.FlashOnEmptyAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "thumbImageSize":                      TypeOfAssignment = AssignmentType.ThumbImageSizeAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "thumbImageOffsets":                      TypeOfAssignment = AssignmentType.ThumbImageOffsetsAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "thumbButtonImage":                      TypeOfAssignment = AssignmentType.ThumbButtonImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "wrapped":                      TypeOfAssignment = AssignmentType.WrappedAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "textColor":                      TypeOfAssignment = AssignmentType.TextColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "mode":                      TypeOfAssignment = AssignmentType.ModeAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "scrollBarImage":                      TypeOfAssignment = AssignmentType.ScrollBarImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "scrollBarGutter":                      TypeOfAssignment = AssignmentType.ScrollBarGutterAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "scrollBarType":                      TypeOfAssignment = AssignmentType.ScrollBarTypeAssignment;                      Value = Value = int.Parse(nodes[2].Token.Text);                      break;                  case "enableIME":                      TypeOfAssignment = AssignmentType.EnableIMEAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "highlighted":                      TypeOfAssignment = AssignmentType.HighlightedAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "minValue":                      TypeOfAssignment = AssignmentType.MinValueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "maxValue":                      TypeOfAssignment = AssignmentType.MaxValueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "pageSize":                      TypeOfAssignment = AssignmentType.PageSizeAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "cursorColor":                      TypeOfAssignment = AssignmentType.CursorColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "toolTip":                      TypeOfAssignment = AssignmentType.TooltipAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "tooltip":                      TypeOfAssignment = AssignmentType.TooltipAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "MouseTransparent":                      TypeOfAssignment = AssignmentType.MouseTransparentAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "imagestates":                      TypeOfAssignment = AssignmentType.ImageStatesAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "backgroundColor":                      TypeOfAssignment = AssignmentType.BackgroundColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "framecolor":                      TypeOfAssignment = AssignmentType.FrameColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "alignments":                      TypeOfAssignment = AssignmentType.AlignmentsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "visibleRows":                      TypeOfAssignment = AssignmentType.VisibleRowsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "columns":                      TypeOfAssignment = AssignmentType.ColumnsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "rowHeight":                      TypeOfAssignment = AssignmentType.RowHeightAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "fillColor":                      TypeOfAssignment = AssignmentType.FillColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "selectionFillColor":                      TypeOfAssignment = AssignmentType.SelectionFillColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "cursor":                      TypeOfAssignment = AssignmentType.CursorAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "lineHeight":                      TypeOfAssignment = AssignmentType.LineHeightAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetL":                      TypeOfAssignment = AssignmentType.EdgeOffsetLAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetR":                      TypeOfAssignment = AssignmentType.EdgeOffsetRAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetT":                      TypeOfAssignment = AssignmentType.EdgeOffsetTAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetB":                      TypeOfAssignment = AssignmentType.EdgeOffsetBAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "foregroundImage":                      TypeOfAssignment = AssignmentType.ForegroundImageAssignment;                      Value = nodes[2].Token.Text;                      break;                  case "backgroundImage":                      TypeOfAssignment = AssignmentType.BackgroundImageAssignment;                      Value = nodes[2].Token.Text;                      break;                  case "value":                      TypeOfAssignment = AssignmentType.ValueAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "useBackgroundImage":                      TypeOfAssignment = AssignmentType.UseBackgroundImageAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "enabled":                      TypeOfAssignment = AssignmentType.EnabledAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "fittext":                      TypeOfAssignment = AssignmentType.FitTextAssignment;                      Value = (int)nodes[2].Token.Value;                      break;              }
Magic Number,UIParser.Nodes,AssignmentNode,C:\repos\Afr0_Project-Dollhouse\Other\libs\UIParser\UIParser\Nodes\AssignmentNode.cs,InitChildren,The following statement contains a magic number: switch(nodes[0].Token.Text)              {                  case "stringDir":                      TypeOfAssignment = AssignmentType.StringDirAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "stringTable":                      TypeOfAssignment = AssignmentType.StringTableAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "leftArrowImage":                      TypeOfAssignment = AssignmentType.LeftArrowImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "rightArrowImage":                      TypeOfAssignment = AssignmentType.RightArrowImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "tracking":                      TypeOfAssignment = AssignmentType.TrackingAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "trigger":                      TypeOfAssignment = AssignmentType.TriggerAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "image":                      TypeOfAssignment = AssignmentType.ImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "position":                      TypeOfAssignment = AssignmentType.PositionAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "size":                      TypeOfAssignment = AssignmentType.SizeAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "id":                      TypeOfAssignment = AssignmentType.IDAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "orientation":                      TypeOfAssignment = AssignmentType.OrientationAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "opaque":                      TypeOfAssignment = AssignmentType.OpaqueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "assetID":                      TypeOfAssignment = AssignmentType.AssetIDAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "stringIndex":                      TypeOfAssignment = AssignmentType.StringIndexAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "text":                      TypeOfAssignment = AssignmentType.TextAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "font":                      TypeOfAssignment = AssignmentType.FontAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "textColorSelected":                      TypeOfAssignment = AssignmentType.TextColorSelectedAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textColorHighlighted":                      TypeOfAssignment = AssignmentType.TextColorHighlightedAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textColorDisabled":                      TypeOfAssignment = AssignmentType.TextColorDisabledAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textButton":                      TypeOfAssignment = AssignmentType.TextButtonAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "color":                      TypeOfAssignment = AssignmentType.ColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "alignment":                      TypeOfAssignment = AssignmentType.AlignmentAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "backColor":                      TypeOfAssignment = AssignmentType.BackColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "frameOnFocus":                      TypeOfAssignment = AssignmentType.FrameOnFocusAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "transparent":                      TypeOfAssignment = AssignmentType.TransparentAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "capacity":                      TypeOfAssignment = AssignmentType.CapacityAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "lines":                      TypeOfAssignment = AssignmentType.LinesAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "flashOnEmpty":                      TypeOfAssignment = AssignmentType.FlashOnEmptyAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "thumbImageSize":                      TypeOfAssignment = AssignmentType.ThumbImageSizeAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "thumbImageOffsets":                      TypeOfAssignment = AssignmentType.ThumbImageOffsetsAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "thumbButtonImage":                      TypeOfAssignment = AssignmentType.ThumbButtonImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "wrapped":                      TypeOfAssignment = AssignmentType.WrappedAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "textColor":                      TypeOfAssignment = AssignmentType.TextColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "mode":                      TypeOfAssignment = AssignmentType.ModeAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "scrollBarImage":                      TypeOfAssignment = AssignmentType.ScrollBarImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "scrollBarGutter":                      TypeOfAssignment = AssignmentType.ScrollBarGutterAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "scrollBarType":                      TypeOfAssignment = AssignmentType.ScrollBarTypeAssignment;                      Value = Value = int.Parse(nodes[2].Token.Text);                      break;                  case "enableIME":                      TypeOfAssignment = AssignmentType.EnableIMEAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "highlighted":                      TypeOfAssignment = AssignmentType.HighlightedAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "minValue":                      TypeOfAssignment = AssignmentType.MinValueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "maxValue":                      TypeOfAssignment = AssignmentType.MaxValueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "pageSize":                      TypeOfAssignment = AssignmentType.PageSizeAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "cursorColor":                      TypeOfAssignment = AssignmentType.CursorColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "toolTip":                      TypeOfAssignment = AssignmentType.TooltipAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "tooltip":                      TypeOfAssignment = AssignmentType.TooltipAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "MouseTransparent":                      TypeOfAssignment = AssignmentType.MouseTransparentAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "imagestates":                      TypeOfAssignment = AssignmentType.ImageStatesAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "backgroundColor":                      TypeOfAssignment = AssignmentType.BackgroundColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "framecolor":                      TypeOfAssignment = AssignmentType.FrameColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "alignments":                      TypeOfAssignment = AssignmentType.AlignmentsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "visibleRows":                      TypeOfAssignment = AssignmentType.VisibleRowsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "columns":                      TypeOfAssignment = AssignmentType.ColumnsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "rowHeight":                      TypeOfAssignment = AssignmentType.RowHeightAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "fillColor":                      TypeOfAssignment = AssignmentType.FillColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "selectionFillColor":                      TypeOfAssignment = AssignmentType.SelectionFillColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "cursor":                      TypeOfAssignment = AssignmentType.CursorAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "lineHeight":                      TypeOfAssignment = AssignmentType.LineHeightAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetL":                      TypeOfAssignment = AssignmentType.EdgeOffsetLAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetR":                      TypeOfAssignment = AssignmentType.EdgeOffsetRAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetT":                      TypeOfAssignment = AssignmentType.EdgeOffsetTAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetB":                      TypeOfAssignment = AssignmentType.EdgeOffsetBAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "foregroundImage":                      TypeOfAssignment = AssignmentType.ForegroundImageAssignment;                      Value = nodes[2].Token.Text;                      break;                  case "backgroundImage":                      TypeOfAssignment = AssignmentType.BackgroundImageAssignment;                      Value = nodes[2].Token.Text;                      break;                  case "value":                      TypeOfAssignment = AssignmentType.ValueAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "useBackgroundImage":                      TypeOfAssignment = AssignmentType.UseBackgroundImageAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "enabled":                      TypeOfAssignment = AssignmentType.EnabledAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "fittext":                      TypeOfAssignment = AssignmentType.FitTextAssignment;                      Value = (int)nodes[2].Token.Value;                      break;              }
Magic Number,UIParser.Nodes,AssignmentNode,C:\repos\Afr0_Project-Dollhouse\Other\libs\UIParser\UIParser\Nodes\AssignmentNode.cs,InitChildren,The following statement contains a magic number: switch(nodes[0].Token.Text)              {                  case "stringDir":                      TypeOfAssignment = AssignmentType.StringDirAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "stringTable":                      TypeOfAssignment = AssignmentType.StringTableAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "leftArrowImage":                      TypeOfAssignment = AssignmentType.LeftArrowImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "rightArrowImage":                      TypeOfAssignment = AssignmentType.RightArrowImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "tracking":                      TypeOfAssignment = AssignmentType.TrackingAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "trigger":                      TypeOfAssignment = AssignmentType.TriggerAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "image":                      TypeOfAssignment = AssignmentType.ImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "position":                      TypeOfAssignment = AssignmentType.PositionAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "size":                      TypeOfAssignment = AssignmentType.SizeAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "id":                      TypeOfAssignment = AssignmentType.IDAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "orientation":                      TypeOfAssignment = AssignmentType.OrientationAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "opaque":                      TypeOfAssignment = AssignmentType.OpaqueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "assetID":                      TypeOfAssignment = AssignmentType.AssetIDAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "stringIndex":                      TypeOfAssignment = AssignmentType.StringIndexAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "text":                      TypeOfAssignment = AssignmentType.TextAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "font":                      TypeOfAssignment = AssignmentType.FontAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "textColorSelected":                      TypeOfAssignment = AssignmentType.TextColorSelectedAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textColorHighlighted":                      TypeOfAssignment = AssignmentType.TextColorHighlightedAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textColorDisabled":                      TypeOfAssignment = AssignmentType.TextColorDisabledAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textButton":                      TypeOfAssignment = AssignmentType.TextButtonAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "color":                      TypeOfAssignment = AssignmentType.ColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "alignment":                      TypeOfAssignment = AssignmentType.AlignmentAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "backColor":                      TypeOfAssignment = AssignmentType.BackColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "frameOnFocus":                      TypeOfAssignment = AssignmentType.FrameOnFocusAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "transparent":                      TypeOfAssignment = AssignmentType.TransparentAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "capacity":                      TypeOfAssignment = AssignmentType.CapacityAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "lines":                      TypeOfAssignment = AssignmentType.LinesAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "flashOnEmpty":                      TypeOfAssignment = AssignmentType.FlashOnEmptyAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "thumbImageSize":                      TypeOfAssignment = AssignmentType.ThumbImageSizeAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "thumbImageOffsets":                      TypeOfAssignment = AssignmentType.ThumbImageOffsetsAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "thumbButtonImage":                      TypeOfAssignment = AssignmentType.ThumbButtonImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "wrapped":                      TypeOfAssignment = AssignmentType.WrappedAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "textColor":                      TypeOfAssignment = AssignmentType.TextColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "mode":                      TypeOfAssignment = AssignmentType.ModeAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "scrollBarImage":                      TypeOfAssignment = AssignmentType.ScrollBarImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "scrollBarGutter":                      TypeOfAssignment = AssignmentType.ScrollBarGutterAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "scrollBarType":                      TypeOfAssignment = AssignmentType.ScrollBarTypeAssignment;                      Value = Value = int.Parse(nodes[2].Token.Text);                      break;                  case "enableIME":                      TypeOfAssignment = AssignmentType.EnableIMEAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "highlighted":                      TypeOfAssignment = AssignmentType.HighlightedAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "minValue":                      TypeOfAssignment = AssignmentType.MinValueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "maxValue":                      TypeOfAssignment = AssignmentType.MaxValueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "pageSize":                      TypeOfAssignment = AssignmentType.PageSizeAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "cursorColor":                      TypeOfAssignment = AssignmentType.CursorColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "toolTip":                      TypeOfAssignment = AssignmentType.TooltipAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "tooltip":                      TypeOfAssignment = AssignmentType.TooltipAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "MouseTransparent":                      TypeOfAssignment = AssignmentType.MouseTransparentAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "imagestates":                      TypeOfAssignment = AssignmentType.ImageStatesAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "backgroundColor":                      TypeOfAssignment = AssignmentType.BackgroundColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "framecolor":                      TypeOfAssignment = AssignmentType.FrameColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "alignments":                      TypeOfAssignment = AssignmentType.AlignmentsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "visibleRows":                      TypeOfAssignment = AssignmentType.VisibleRowsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "columns":                      TypeOfAssignment = AssignmentType.ColumnsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "rowHeight":                      TypeOfAssignment = AssignmentType.RowHeightAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "fillColor":                      TypeOfAssignment = AssignmentType.FillColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "selectionFillColor":                      TypeOfAssignment = AssignmentType.SelectionFillColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "cursor":                      TypeOfAssignment = AssignmentType.CursorAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "lineHeight":                      TypeOfAssignment = AssignmentType.LineHeightAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetL":                      TypeOfAssignment = AssignmentType.EdgeOffsetLAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetR":                      TypeOfAssignment = AssignmentType.EdgeOffsetRAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetT":                      TypeOfAssignment = AssignmentType.EdgeOffsetTAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetB":                      TypeOfAssignment = AssignmentType.EdgeOffsetBAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "foregroundImage":                      TypeOfAssignment = AssignmentType.ForegroundImageAssignment;                      Value = nodes[2].Token.Text;                      break;                  case "backgroundImage":                      TypeOfAssignment = AssignmentType.BackgroundImageAssignment;                      Value = nodes[2].Token.Text;                      break;                  case "value":                      TypeOfAssignment = AssignmentType.ValueAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "useBackgroundImage":                      TypeOfAssignment = AssignmentType.UseBackgroundImageAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "enabled":                      TypeOfAssignment = AssignmentType.EnabledAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "fittext":                      TypeOfAssignment = AssignmentType.FitTextAssignment;                      Value = (int)nodes[2].Token.Value;                      break;              }
Magic Number,UIParser.Nodes,AssignmentNode,C:\repos\Afr0_Project-Dollhouse\Other\libs\UIParser\UIParser\Nodes\AssignmentNode.cs,InitChildren,The following statement contains a magic number: switch(nodes[0].Token.Text)              {                  case "stringDir":                      TypeOfAssignment = AssignmentType.StringDirAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "stringTable":                      TypeOfAssignment = AssignmentType.StringTableAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "leftArrowImage":                      TypeOfAssignment = AssignmentType.LeftArrowImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "rightArrowImage":                      TypeOfAssignment = AssignmentType.RightArrowImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "tracking":                      TypeOfAssignment = AssignmentType.TrackingAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "trigger":                      TypeOfAssignment = AssignmentType.TriggerAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "image":                      TypeOfAssignment = AssignmentType.ImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "position":                      TypeOfAssignment = AssignmentType.PositionAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "size":                      TypeOfAssignment = AssignmentType.SizeAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "id":                      TypeOfAssignment = AssignmentType.IDAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "orientation":                      TypeOfAssignment = AssignmentType.OrientationAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "opaque":                      TypeOfAssignment = AssignmentType.OpaqueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "assetID":                      TypeOfAssignment = AssignmentType.AssetIDAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "stringIndex":                      TypeOfAssignment = AssignmentType.StringIndexAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "text":                      TypeOfAssignment = AssignmentType.TextAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "font":                      TypeOfAssignment = AssignmentType.FontAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "textColorSelected":                      TypeOfAssignment = AssignmentType.TextColorSelectedAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textColorHighlighted":                      TypeOfAssignment = AssignmentType.TextColorHighlightedAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textColorDisabled":                      TypeOfAssignment = AssignmentType.TextColorDisabledAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textButton":                      TypeOfAssignment = AssignmentType.TextButtonAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "color":                      TypeOfAssignment = AssignmentType.ColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "alignment":                      TypeOfAssignment = AssignmentType.AlignmentAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "backColor":                      TypeOfAssignment = AssignmentType.BackColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "frameOnFocus":                      TypeOfAssignment = AssignmentType.FrameOnFocusAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "transparent":                      TypeOfAssignment = AssignmentType.TransparentAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "capacity":                      TypeOfAssignment = AssignmentType.CapacityAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "lines":                      TypeOfAssignment = AssignmentType.LinesAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "flashOnEmpty":                      TypeOfAssignment = AssignmentType.FlashOnEmptyAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "thumbImageSize":                      TypeOfAssignment = AssignmentType.ThumbImageSizeAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "thumbImageOffsets":                      TypeOfAssignment = AssignmentType.ThumbImageOffsetsAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "thumbButtonImage":                      TypeOfAssignment = AssignmentType.ThumbButtonImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "wrapped":                      TypeOfAssignment = AssignmentType.WrappedAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "textColor":                      TypeOfAssignment = AssignmentType.TextColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "mode":                      TypeOfAssignment = AssignmentType.ModeAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "scrollBarImage":                      TypeOfAssignment = AssignmentType.ScrollBarImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "scrollBarGutter":                      TypeOfAssignment = AssignmentType.ScrollBarGutterAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "scrollBarType":                      TypeOfAssignment = AssignmentType.ScrollBarTypeAssignment;                      Value = Value = int.Parse(nodes[2].Token.Text);                      break;                  case "enableIME":                      TypeOfAssignment = AssignmentType.EnableIMEAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "highlighted":                      TypeOfAssignment = AssignmentType.HighlightedAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "minValue":                      TypeOfAssignment = AssignmentType.MinValueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "maxValue":                      TypeOfAssignment = AssignmentType.MaxValueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "pageSize":                      TypeOfAssignment = AssignmentType.PageSizeAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "cursorColor":                      TypeOfAssignment = AssignmentType.CursorColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "toolTip":                      TypeOfAssignment = AssignmentType.TooltipAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "tooltip":                      TypeOfAssignment = AssignmentType.TooltipAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "MouseTransparent":                      TypeOfAssignment = AssignmentType.MouseTransparentAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "imagestates":                      TypeOfAssignment = AssignmentType.ImageStatesAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "backgroundColor":                      TypeOfAssignment = AssignmentType.BackgroundColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "framecolor":                      TypeOfAssignment = AssignmentType.FrameColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "alignments":                      TypeOfAssignment = AssignmentType.AlignmentsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "visibleRows":                      TypeOfAssignment = AssignmentType.VisibleRowsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "columns":                      TypeOfAssignment = AssignmentType.ColumnsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "rowHeight":                      TypeOfAssignment = AssignmentType.RowHeightAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "fillColor":                      TypeOfAssignment = AssignmentType.FillColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "selectionFillColor":                      TypeOfAssignment = AssignmentType.SelectionFillColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "cursor":                      TypeOfAssignment = AssignmentType.CursorAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "lineHeight":                      TypeOfAssignment = AssignmentType.LineHeightAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetL":                      TypeOfAssignment = AssignmentType.EdgeOffsetLAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetR":                      TypeOfAssignment = AssignmentType.EdgeOffsetRAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetT":                      TypeOfAssignment = AssignmentType.EdgeOffsetTAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetB":                      TypeOfAssignment = AssignmentType.EdgeOffsetBAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "foregroundImage":                      TypeOfAssignment = AssignmentType.ForegroundImageAssignment;                      Value = nodes[2].Token.Text;                      break;                  case "backgroundImage":                      TypeOfAssignment = AssignmentType.BackgroundImageAssignment;                      Value = nodes[2].Token.Text;                      break;                  case "value":                      TypeOfAssignment = AssignmentType.ValueAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "useBackgroundImage":                      TypeOfAssignment = AssignmentType.UseBackgroundImageAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "enabled":                      TypeOfAssignment = AssignmentType.EnabledAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "fittext":                      TypeOfAssignment = AssignmentType.FitTextAssignment;                      Value = (int)nodes[2].Token.Value;                      break;              }
Magic Number,UIParser.Nodes,AssignmentNode,C:\repos\Afr0_Project-Dollhouse\Other\libs\UIParser\UIParser\Nodes\AssignmentNode.cs,InitChildren,The following statement contains a magic number: switch(nodes[0].Token.Text)              {                  case "stringDir":                      TypeOfAssignment = AssignmentType.StringDirAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "stringTable":                      TypeOfAssignment = AssignmentType.StringTableAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "leftArrowImage":                      TypeOfAssignment = AssignmentType.LeftArrowImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "rightArrowImage":                      TypeOfAssignment = AssignmentType.RightArrowImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "tracking":                      TypeOfAssignment = AssignmentType.TrackingAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "trigger":                      TypeOfAssignment = AssignmentType.TriggerAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "image":                      TypeOfAssignment = AssignmentType.ImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "position":                      TypeOfAssignment = AssignmentType.PositionAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "size":                      TypeOfAssignment = AssignmentType.SizeAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "id":                      TypeOfAssignment = AssignmentType.IDAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "orientation":                      TypeOfAssignment = AssignmentType.OrientationAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "opaque":                      TypeOfAssignment = AssignmentType.OpaqueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "assetID":                      TypeOfAssignment = AssignmentType.AssetIDAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "stringIndex":                      TypeOfAssignment = AssignmentType.StringIndexAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "text":                      TypeOfAssignment = AssignmentType.TextAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "font":                      TypeOfAssignment = AssignmentType.FontAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "textColorSelected":                      TypeOfAssignment = AssignmentType.TextColorSelectedAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textColorHighlighted":                      TypeOfAssignment = AssignmentType.TextColorHighlightedAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textColorDisabled":                      TypeOfAssignment = AssignmentType.TextColorDisabledAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textButton":                      TypeOfAssignment = AssignmentType.TextButtonAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "color":                      TypeOfAssignment = AssignmentType.ColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "alignment":                      TypeOfAssignment = AssignmentType.AlignmentAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "backColor":                      TypeOfAssignment = AssignmentType.BackColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "frameOnFocus":                      TypeOfAssignment = AssignmentType.FrameOnFocusAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "transparent":                      TypeOfAssignment = AssignmentType.TransparentAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "capacity":                      TypeOfAssignment = AssignmentType.CapacityAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "lines":                      TypeOfAssignment = AssignmentType.LinesAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "flashOnEmpty":                      TypeOfAssignment = AssignmentType.FlashOnEmptyAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "thumbImageSize":                      TypeOfAssignment = AssignmentType.ThumbImageSizeAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "thumbImageOffsets":                      TypeOfAssignment = AssignmentType.ThumbImageOffsetsAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "thumbButtonImage":                      TypeOfAssignment = AssignmentType.ThumbButtonImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "wrapped":                      TypeOfAssignment = AssignmentType.WrappedAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "textColor":                      TypeOfAssignment = AssignmentType.TextColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "mode":                      TypeOfAssignment = AssignmentType.ModeAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "scrollBarImage":                      TypeOfAssignment = AssignmentType.ScrollBarImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "scrollBarGutter":                      TypeOfAssignment = AssignmentType.ScrollBarGutterAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "scrollBarType":                      TypeOfAssignment = AssignmentType.ScrollBarTypeAssignment;                      Value = Value = int.Parse(nodes[2].Token.Text);                      break;                  case "enableIME":                      TypeOfAssignment = AssignmentType.EnableIMEAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "highlighted":                      TypeOfAssignment = AssignmentType.HighlightedAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "minValue":                      TypeOfAssignment = AssignmentType.MinValueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "maxValue":                      TypeOfAssignment = AssignmentType.MaxValueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "pageSize":                      TypeOfAssignment = AssignmentType.PageSizeAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "cursorColor":                      TypeOfAssignment = AssignmentType.CursorColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "toolTip":                      TypeOfAssignment = AssignmentType.TooltipAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "tooltip":                      TypeOfAssignment = AssignmentType.TooltipAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "MouseTransparent":                      TypeOfAssignment = AssignmentType.MouseTransparentAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "imagestates":                      TypeOfAssignment = AssignmentType.ImageStatesAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "backgroundColor":                      TypeOfAssignment = AssignmentType.BackgroundColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "framecolor":                      TypeOfAssignment = AssignmentType.FrameColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "alignments":                      TypeOfAssignment = AssignmentType.AlignmentsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "visibleRows":                      TypeOfAssignment = AssignmentType.VisibleRowsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "columns":                      TypeOfAssignment = AssignmentType.ColumnsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "rowHeight":                      TypeOfAssignment = AssignmentType.RowHeightAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "fillColor":                      TypeOfAssignment = AssignmentType.FillColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "selectionFillColor":                      TypeOfAssignment = AssignmentType.SelectionFillColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "cursor":                      TypeOfAssignment = AssignmentType.CursorAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "lineHeight":                      TypeOfAssignment = AssignmentType.LineHeightAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetL":                      TypeOfAssignment = AssignmentType.EdgeOffsetLAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetR":                      TypeOfAssignment = AssignmentType.EdgeOffsetRAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetT":                      TypeOfAssignment = AssignmentType.EdgeOffsetTAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetB":                      TypeOfAssignment = AssignmentType.EdgeOffsetBAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "foregroundImage":                      TypeOfAssignment = AssignmentType.ForegroundImageAssignment;                      Value = nodes[2].Token.Text;                      break;                  case "backgroundImage":                      TypeOfAssignment = AssignmentType.BackgroundImageAssignment;                      Value = nodes[2].Token.Text;                      break;                  case "value":                      TypeOfAssignment = AssignmentType.ValueAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "useBackgroundImage":                      TypeOfAssignment = AssignmentType.UseBackgroundImageAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "enabled":                      TypeOfAssignment = AssignmentType.EnabledAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "fittext":                      TypeOfAssignment = AssignmentType.FitTextAssignment;                      Value = (int)nodes[2].Token.Value;                      break;              }
Magic Number,UIParser.Nodes,AssignmentNode,C:\repos\Afr0_Project-Dollhouse\Other\libs\UIParser\UIParser\Nodes\AssignmentNode.cs,InitChildren,The following statement contains a magic number: switch(nodes[0].Token.Text)              {                  case "stringDir":                      TypeOfAssignment = AssignmentType.StringDirAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "stringTable":                      TypeOfAssignment = AssignmentType.StringTableAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "leftArrowImage":                      TypeOfAssignment = AssignmentType.LeftArrowImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "rightArrowImage":                      TypeOfAssignment = AssignmentType.RightArrowImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "tracking":                      TypeOfAssignment = AssignmentType.TrackingAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "trigger":                      TypeOfAssignment = AssignmentType.TriggerAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "image":                      TypeOfAssignment = AssignmentType.ImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "position":                      TypeOfAssignment = AssignmentType.PositionAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "size":                      TypeOfAssignment = AssignmentType.SizeAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "id":                      TypeOfAssignment = AssignmentType.IDAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "orientation":                      TypeOfAssignment = AssignmentType.OrientationAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "opaque":                      TypeOfAssignment = AssignmentType.OpaqueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "assetID":                      TypeOfAssignment = AssignmentType.AssetIDAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "stringIndex":                      TypeOfAssignment = AssignmentType.StringIndexAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "text":                      TypeOfAssignment = AssignmentType.TextAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "font":                      TypeOfAssignment = AssignmentType.FontAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "textColorSelected":                      TypeOfAssignment = AssignmentType.TextColorSelectedAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textColorHighlighted":                      TypeOfAssignment = AssignmentType.TextColorHighlightedAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textColorDisabled":                      TypeOfAssignment = AssignmentType.TextColorDisabledAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textButton":                      TypeOfAssignment = AssignmentType.TextButtonAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "color":                      TypeOfAssignment = AssignmentType.ColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "alignment":                      TypeOfAssignment = AssignmentType.AlignmentAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "backColor":                      TypeOfAssignment = AssignmentType.BackColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "frameOnFocus":                      TypeOfAssignment = AssignmentType.FrameOnFocusAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "transparent":                      TypeOfAssignment = AssignmentType.TransparentAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "capacity":                      TypeOfAssignment = AssignmentType.CapacityAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "lines":                      TypeOfAssignment = AssignmentType.LinesAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "flashOnEmpty":                      TypeOfAssignment = AssignmentType.FlashOnEmptyAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "thumbImageSize":                      TypeOfAssignment = AssignmentType.ThumbImageSizeAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "thumbImageOffsets":                      TypeOfAssignment = AssignmentType.ThumbImageOffsetsAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "thumbButtonImage":                      TypeOfAssignment = AssignmentType.ThumbButtonImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "wrapped":                      TypeOfAssignment = AssignmentType.WrappedAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "textColor":                      TypeOfAssignment = AssignmentType.TextColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "mode":                      TypeOfAssignment = AssignmentType.ModeAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "scrollBarImage":                      TypeOfAssignment = AssignmentType.ScrollBarImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "scrollBarGutter":                      TypeOfAssignment = AssignmentType.ScrollBarGutterAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "scrollBarType":                      TypeOfAssignment = AssignmentType.ScrollBarTypeAssignment;                      Value = Value = int.Parse(nodes[2].Token.Text);                      break;                  case "enableIME":                      TypeOfAssignment = AssignmentType.EnableIMEAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "highlighted":                      TypeOfAssignment = AssignmentType.HighlightedAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "minValue":                      TypeOfAssignment = AssignmentType.MinValueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "maxValue":                      TypeOfAssignment = AssignmentType.MaxValueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "pageSize":                      TypeOfAssignment = AssignmentType.PageSizeAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "cursorColor":                      TypeOfAssignment = AssignmentType.CursorColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "toolTip":                      TypeOfAssignment = AssignmentType.TooltipAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "tooltip":                      TypeOfAssignment = AssignmentType.TooltipAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "MouseTransparent":                      TypeOfAssignment = AssignmentType.MouseTransparentAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "imagestates":                      TypeOfAssignment = AssignmentType.ImageStatesAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "backgroundColor":                      TypeOfAssignment = AssignmentType.BackgroundColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "framecolor":                      TypeOfAssignment = AssignmentType.FrameColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "alignments":                      TypeOfAssignment = AssignmentType.AlignmentsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "visibleRows":                      TypeOfAssignment = AssignmentType.VisibleRowsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "columns":                      TypeOfAssignment = AssignmentType.ColumnsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "rowHeight":                      TypeOfAssignment = AssignmentType.RowHeightAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "fillColor":                      TypeOfAssignment = AssignmentType.FillColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "selectionFillColor":                      TypeOfAssignment = AssignmentType.SelectionFillColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "cursor":                      TypeOfAssignment = AssignmentType.CursorAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "lineHeight":                      TypeOfAssignment = AssignmentType.LineHeightAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetL":                      TypeOfAssignment = AssignmentType.EdgeOffsetLAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetR":                      TypeOfAssignment = AssignmentType.EdgeOffsetRAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetT":                      TypeOfAssignment = AssignmentType.EdgeOffsetTAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetB":                      TypeOfAssignment = AssignmentType.EdgeOffsetBAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "foregroundImage":                      TypeOfAssignment = AssignmentType.ForegroundImageAssignment;                      Value = nodes[2].Token.Text;                      break;                  case "backgroundImage":                      TypeOfAssignment = AssignmentType.BackgroundImageAssignment;                      Value = nodes[2].Token.Text;                      break;                  case "value":                      TypeOfAssignment = AssignmentType.ValueAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "useBackgroundImage":                      TypeOfAssignment = AssignmentType.UseBackgroundImageAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "enabled":                      TypeOfAssignment = AssignmentType.EnabledAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "fittext":                      TypeOfAssignment = AssignmentType.FitTextAssignment;                      Value = (int)nodes[2].Token.Value;                      break;              }
Magic Number,UIParser.Nodes,AssignmentNode,C:\repos\Afr0_Project-Dollhouse\Other\libs\UIParser\UIParser\Nodes\AssignmentNode.cs,InitChildren,The following statement contains a magic number: switch(nodes[0].Token.Text)              {                  case "stringDir":                      TypeOfAssignment = AssignmentType.StringDirAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "stringTable":                      TypeOfAssignment = AssignmentType.StringTableAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "leftArrowImage":                      TypeOfAssignment = AssignmentType.LeftArrowImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "rightArrowImage":                      TypeOfAssignment = AssignmentType.RightArrowImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "tracking":                      TypeOfAssignment = AssignmentType.TrackingAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "trigger":                      TypeOfAssignment = AssignmentType.TriggerAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "image":                      TypeOfAssignment = AssignmentType.ImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "position":                      TypeOfAssignment = AssignmentType.PositionAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "size":                      TypeOfAssignment = AssignmentType.SizeAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "id":                      TypeOfAssignment = AssignmentType.IDAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "orientation":                      TypeOfAssignment = AssignmentType.OrientationAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "opaque":                      TypeOfAssignment = AssignmentType.OpaqueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "assetID":                      TypeOfAssignment = AssignmentType.AssetIDAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "stringIndex":                      TypeOfAssignment = AssignmentType.StringIndexAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "text":                      TypeOfAssignment = AssignmentType.TextAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "font":                      TypeOfAssignment = AssignmentType.FontAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "textColorSelected":                      TypeOfAssignment = AssignmentType.TextColorSelectedAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textColorHighlighted":                      TypeOfAssignment = AssignmentType.TextColorHighlightedAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textColorDisabled":                      TypeOfAssignment = AssignmentType.TextColorDisabledAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textButton":                      TypeOfAssignment = AssignmentType.TextButtonAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "color":                      TypeOfAssignment = AssignmentType.ColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "alignment":                      TypeOfAssignment = AssignmentType.AlignmentAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "backColor":                      TypeOfAssignment = AssignmentType.BackColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "frameOnFocus":                      TypeOfAssignment = AssignmentType.FrameOnFocusAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "transparent":                      TypeOfAssignment = AssignmentType.TransparentAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "capacity":                      TypeOfAssignment = AssignmentType.CapacityAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "lines":                      TypeOfAssignment = AssignmentType.LinesAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "flashOnEmpty":                      TypeOfAssignment = AssignmentType.FlashOnEmptyAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "thumbImageSize":                      TypeOfAssignment = AssignmentType.ThumbImageSizeAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "thumbImageOffsets":                      TypeOfAssignment = AssignmentType.ThumbImageOffsetsAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "thumbButtonImage":                      TypeOfAssignment = AssignmentType.ThumbButtonImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "wrapped":                      TypeOfAssignment = AssignmentType.WrappedAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "textColor":                      TypeOfAssignment = AssignmentType.TextColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "mode":                      TypeOfAssignment = AssignmentType.ModeAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "scrollBarImage":                      TypeOfAssignment = AssignmentType.ScrollBarImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "scrollBarGutter":                      TypeOfAssignment = AssignmentType.ScrollBarGutterAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "scrollBarType":                      TypeOfAssignment = AssignmentType.ScrollBarTypeAssignment;                      Value = Value = int.Parse(nodes[2].Token.Text);                      break;                  case "enableIME":                      TypeOfAssignment = AssignmentType.EnableIMEAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "highlighted":                      TypeOfAssignment = AssignmentType.HighlightedAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "minValue":                      TypeOfAssignment = AssignmentType.MinValueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "maxValue":                      TypeOfAssignment = AssignmentType.MaxValueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "pageSize":                      TypeOfAssignment = AssignmentType.PageSizeAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "cursorColor":                      TypeOfAssignment = AssignmentType.CursorColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "toolTip":                      TypeOfAssignment = AssignmentType.TooltipAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "tooltip":                      TypeOfAssignment = AssignmentType.TooltipAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "MouseTransparent":                      TypeOfAssignment = AssignmentType.MouseTransparentAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "imagestates":                      TypeOfAssignment = AssignmentType.ImageStatesAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "backgroundColor":                      TypeOfAssignment = AssignmentType.BackgroundColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "framecolor":                      TypeOfAssignment = AssignmentType.FrameColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "alignments":                      TypeOfAssignment = AssignmentType.AlignmentsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "visibleRows":                      TypeOfAssignment = AssignmentType.VisibleRowsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "columns":                      TypeOfAssignment = AssignmentType.ColumnsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "rowHeight":                      TypeOfAssignment = AssignmentType.RowHeightAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "fillColor":                      TypeOfAssignment = AssignmentType.FillColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "selectionFillColor":                      TypeOfAssignment = AssignmentType.SelectionFillColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "cursor":                      TypeOfAssignment = AssignmentType.CursorAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "lineHeight":                      TypeOfAssignment = AssignmentType.LineHeightAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetL":                      TypeOfAssignment = AssignmentType.EdgeOffsetLAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetR":                      TypeOfAssignment = AssignmentType.EdgeOffsetRAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetT":                      TypeOfAssignment = AssignmentType.EdgeOffsetTAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetB":                      TypeOfAssignment = AssignmentType.EdgeOffsetBAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "foregroundImage":                      TypeOfAssignment = AssignmentType.ForegroundImageAssignment;                      Value = nodes[2].Token.Text;                      break;                  case "backgroundImage":                      TypeOfAssignment = AssignmentType.BackgroundImageAssignment;                      Value = nodes[2].Token.Text;                      break;                  case "value":                      TypeOfAssignment = AssignmentType.ValueAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "useBackgroundImage":                      TypeOfAssignment = AssignmentType.UseBackgroundImageAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "enabled":                      TypeOfAssignment = AssignmentType.EnabledAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "fittext":                      TypeOfAssignment = AssignmentType.FitTextAssignment;                      Value = (int)nodes[2].Token.Value;                      break;              }
Magic Number,UIParser.Nodes,AssignmentNode,C:\repos\Afr0_Project-Dollhouse\Other\libs\UIParser\UIParser\Nodes\AssignmentNode.cs,InitChildren,The following statement contains a magic number: switch(nodes[0].Token.Text)              {                  case "stringDir":                      TypeOfAssignment = AssignmentType.StringDirAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "stringTable":                      TypeOfAssignment = AssignmentType.StringTableAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "leftArrowImage":                      TypeOfAssignment = AssignmentType.LeftArrowImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "rightArrowImage":                      TypeOfAssignment = AssignmentType.RightArrowImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "tracking":                      TypeOfAssignment = AssignmentType.TrackingAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "trigger":                      TypeOfAssignment = AssignmentType.TriggerAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "image":                      TypeOfAssignment = AssignmentType.ImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "position":                      TypeOfAssignment = AssignmentType.PositionAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "size":                      TypeOfAssignment = AssignmentType.SizeAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "id":                      TypeOfAssignment = AssignmentType.IDAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "orientation":                      TypeOfAssignment = AssignmentType.OrientationAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "opaque":                      TypeOfAssignment = AssignmentType.OpaqueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "assetID":                      TypeOfAssignment = AssignmentType.AssetIDAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "stringIndex":                      TypeOfAssignment = AssignmentType.StringIndexAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "text":                      TypeOfAssignment = AssignmentType.TextAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "font":                      TypeOfAssignment = AssignmentType.FontAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "textColorSelected":                      TypeOfAssignment = AssignmentType.TextColorSelectedAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textColorHighlighted":                      TypeOfAssignment = AssignmentType.TextColorHighlightedAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textColorDisabled":                      TypeOfAssignment = AssignmentType.TextColorDisabledAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textButton":                      TypeOfAssignment = AssignmentType.TextButtonAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "color":                      TypeOfAssignment = AssignmentType.ColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "alignment":                      TypeOfAssignment = AssignmentType.AlignmentAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "backColor":                      TypeOfAssignment = AssignmentType.BackColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "frameOnFocus":                      TypeOfAssignment = AssignmentType.FrameOnFocusAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "transparent":                      TypeOfAssignment = AssignmentType.TransparentAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "capacity":                      TypeOfAssignment = AssignmentType.CapacityAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "lines":                      TypeOfAssignment = AssignmentType.LinesAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "flashOnEmpty":                      TypeOfAssignment = AssignmentType.FlashOnEmptyAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "thumbImageSize":                      TypeOfAssignment = AssignmentType.ThumbImageSizeAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "thumbImageOffsets":                      TypeOfAssignment = AssignmentType.ThumbImageOffsetsAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "thumbButtonImage":                      TypeOfAssignment = AssignmentType.ThumbButtonImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "wrapped":                      TypeOfAssignment = AssignmentType.WrappedAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "textColor":                      TypeOfAssignment = AssignmentType.TextColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "mode":                      TypeOfAssignment = AssignmentType.ModeAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "scrollBarImage":                      TypeOfAssignment = AssignmentType.ScrollBarImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "scrollBarGutter":                      TypeOfAssignment = AssignmentType.ScrollBarGutterAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "scrollBarType":                      TypeOfAssignment = AssignmentType.ScrollBarTypeAssignment;                      Value = Value = int.Parse(nodes[2].Token.Text);                      break;                  case "enableIME":                      TypeOfAssignment = AssignmentType.EnableIMEAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "highlighted":                      TypeOfAssignment = AssignmentType.HighlightedAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "minValue":                      TypeOfAssignment = AssignmentType.MinValueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "maxValue":                      TypeOfAssignment = AssignmentType.MaxValueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "pageSize":                      TypeOfAssignment = AssignmentType.PageSizeAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "cursorColor":                      TypeOfAssignment = AssignmentType.CursorColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "toolTip":                      TypeOfAssignment = AssignmentType.TooltipAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "tooltip":                      TypeOfAssignment = AssignmentType.TooltipAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "MouseTransparent":                      TypeOfAssignment = AssignmentType.MouseTransparentAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "imagestates":                      TypeOfAssignment = AssignmentType.ImageStatesAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "backgroundColor":                      TypeOfAssignment = AssignmentType.BackgroundColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "framecolor":                      TypeOfAssignment = AssignmentType.FrameColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "alignments":                      TypeOfAssignment = AssignmentType.AlignmentsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "visibleRows":                      TypeOfAssignment = AssignmentType.VisibleRowsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "columns":                      TypeOfAssignment = AssignmentType.ColumnsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "rowHeight":                      TypeOfAssignment = AssignmentType.RowHeightAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "fillColor":                      TypeOfAssignment = AssignmentType.FillColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "selectionFillColor":                      TypeOfAssignment = AssignmentType.SelectionFillColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "cursor":                      TypeOfAssignment = AssignmentType.CursorAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "lineHeight":                      TypeOfAssignment = AssignmentType.LineHeightAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetL":                      TypeOfAssignment = AssignmentType.EdgeOffsetLAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetR":                      TypeOfAssignment = AssignmentType.EdgeOffsetRAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetT":                      TypeOfAssignment = AssignmentType.EdgeOffsetTAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetB":                      TypeOfAssignment = AssignmentType.EdgeOffsetBAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "foregroundImage":                      TypeOfAssignment = AssignmentType.ForegroundImageAssignment;                      Value = nodes[2].Token.Text;                      break;                  case "backgroundImage":                      TypeOfAssignment = AssignmentType.BackgroundImageAssignment;                      Value = nodes[2].Token.Text;                      break;                  case "value":                      TypeOfAssignment = AssignmentType.ValueAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "useBackgroundImage":                      TypeOfAssignment = AssignmentType.UseBackgroundImageAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "enabled":                      TypeOfAssignment = AssignmentType.EnabledAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "fittext":                      TypeOfAssignment = AssignmentType.FitTextAssignment;                      Value = (int)nodes[2].Token.Value;                      break;              }
Magic Number,UIParser.Nodes,AssignmentNode,C:\repos\Afr0_Project-Dollhouse\Other\libs\UIParser\UIParser\Nodes\AssignmentNode.cs,InitChildren,The following statement contains a magic number: switch(nodes[0].Token.Text)              {                  case "stringDir":                      TypeOfAssignment = AssignmentType.StringDirAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "stringTable":                      TypeOfAssignment = AssignmentType.StringTableAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "leftArrowImage":                      TypeOfAssignment = AssignmentType.LeftArrowImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "rightArrowImage":                      TypeOfAssignment = AssignmentType.RightArrowImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "tracking":                      TypeOfAssignment = AssignmentType.TrackingAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "trigger":                      TypeOfAssignment = AssignmentType.TriggerAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "image":                      TypeOfAssignment = AssignmentType.ImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "position":                      TypeOfAssignment = AssignmentType.PositionAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "size":                      TypeOfAssignment = AssignmentType.SizeAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "id":                      TypeOfAssignment = AssignmentType.IDAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "orientation":                      TypeOfAssignment = AssignmentType.OrientationAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "opaque":                      TypeOfAssignment = AssignmentType.OpaqueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "assetID":                      TypeOfAssignment = AssignmentType.AssetIDAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "stringIndex":                      TypeOfAssignment = AssignmentType.StringIndexAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "text":                      TypeOfAssignment = AssignmentType.TextAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "font":                      TypeOfAssignment = AssignmentType.FontAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "textColorSelected":                      TypeOfAssignment = AssignmentType.TextColorSelectedAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textColorHighlighted":                      TypeOfAssignment = AssignmentType.TextColorHighlightedAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textColorDisabled":                      TypeOfAssignment = AssignmentType.TextColorDisabledAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textButton":                      TypeOfAssignment = AssignmentType.TextButtonAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "color":                      TypeOfAssignment = AssignmentType.ColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "alignment":                      TypeOfAssignment = AssignmentType.AlignmentAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "backColor":                      TypeOfAssignment = AssignmentType.BackColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "frameOnFocus":                      TypeOfAssignment = AssignmentType.FrameOnFocusAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "transparent":                      TypeOfAssignment = AssignmentType.TransparentAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "capacity":                      TypeOfAssignment = AssignmentType.CapacityAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "lines":                      TypeOfAssignment = AssignmentType.LinesAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "flashOnEmpty":                      TypeOfAssignment = AssignmentType.FlashOnEmptyAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "thumbImageSize":                      TypeOfAssignment = AssignmentType.ThumbImageSizeAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "thumbImageOffsets":                      TypeOfAssignment = AssignmentType.ThumbImageOffsetsAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "thumbButtonImage":                      TypeOfAssignment = AssignmentType.ThumbButtonImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "wrapped":                      TypeOfAssignment = AssignmentType.WrappedAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "textColor":                      TypeOfAssignment = AssignmentType.TextColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "mode":                      TypeOfAssignment = AssignmentType.ModeAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "scrollBarImage":                      TypeOfAssignment = AssignmentType.ScrollBarImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "scrollBarGutter":                      TypeOfAssignment = AssignmentType.ScrollBarGutterAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "scrollBarType":                      TypeOfAssignment = AssignmentType.ScrollBarTypeAssignment;                      Value = Value = int.Parse(nodes[2].Token.Text);                      break;                  case "enableIME":                      TypeOfAssignment = AssignmentType.EnableIMEAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "highlighted":                      TypeOfAssignment = AssignmentType.HighlightedAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "minValue":                      TypeOfAssignment = AssignmentType.MinValueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "maxValue":                      TypeOfAssignment = AssignmentType.MaxValueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "pageSize":                      TypeOfAssignment = AssignmentType.PageSizeAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "cursorColor":                      TypeOfAssignment = AssignmentType.CursorColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "toolTip":                      TypeOfAssignment = AssignmentType.TooltipAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "tooltip":                      TypeOfAssignment = AssignmentType.TooltipAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "MouseTransparent":                      TypeOfAssignment = AssignmentType.MouseTransparentAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "imagestates":                      TypeOfAssignment = AssignmentType.ImageStatesAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "backgroundColor":                      TypeOfAssignment = AssignmentType.BackgroundColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "framecolor":                      TypeOfAssignment = AssignmentType.FrameColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "alignments":                      TypeOfAssignment = AssignmentType.AlignmentsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "visibleRows":                      TypeOfAssignment = AssignmentType.VisibleRowsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "columns":                      TypeOfAssignment = AssignmentType.ColumnsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "rowHeight":                      TypeOfAssignment = AssignmentType.RowHeightAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "fillColor":                      TypeOfAssignment = AssignmentType.FillColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "selectionFillColor":                      TypeOfAssignment = AssignmentType.SelectionFillColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "cursor":                      TypeOfAssignment = AssignmentType.CursorAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "lineHeight":                      TypeOfAssignment = AssignmentType.LineHeightAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetL":                      TypeOfAssignment = AssignmentType.EdgeOffsetLAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetR":                      TypeOfAssignment = AssignmentType.EdgeOffsetRAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetT":                      TypeOfAssignment = AssignmentType.EdgeOffsetTAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetB":                      TypeOfAssignment = AssignmentType.EdgeOffsetBAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "foregroundImage":                      TypeOfAssignment = AssignmentType.ForegroundImageAssignment;                      Value = nodes[2].Token.Text;                      break;                  case "backgroundImage":                      TypeOfAssignment = AssignmentType.BackgroundImageAssignment;                      Value = nodes[2].Token.Text;                      break;                  case "value":                      TypeOfAssignment = AssignmentType.ValueAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "useBackgroundImage":                      TypeOfAssignment = AssignmentType.UseBackgroundImageAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "enabled":                      TypeOfAssignment = AssignmentType.EnabledAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "fittext":                      TypeOfAssignment = AssignmentType.FitTextAssignment;                      Value = (int)nodes[2].Token.Value;                      break;              }
Magic Number,UIParser.Nodes,AssignmentNode,C:\repos\Afr0_Project-Dollhouse\Other\libs\UIParser\UIParser\Nodes\AssignmentNode.cs,InitChildren,The following statement contains a magic number: switch(nodes[0].Token.Text)              {                  case "stringDir":                      TypeOfAssignment = AssignmentType.StringDirAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "stringTable":                      TypeOfAssignment = AssignmentType.StringTableAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "leftArrowImage":                      TypeOfAssignment = AssignmentType.LeftArrowImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "rightArrowImage":                      TypeOfAssignment = AssignmentType.RightArrowImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "tracking":                      TypeOfAssignment = AssignmentType.TrackingAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "trigger":                      TypeOfAssignment = AssignmentType.TriggerAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "image":                      TypeOfAssignment = AssignmentType.ImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "position":                      TypeOfAssignment = AssignmentType.PositionAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "size":                      TypeOfAssignment = AssignmentType.SizeAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "id":                      TypeOfAssignment = AssignmentType.IDAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "orientation":                      TypeOfAssignment = AssignmentType.OrientationAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "opaque":                      TypeOfAssignment = AssignmentType.OpaqueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "assetID":                      TypeOfAssignment = AssignmentType.AssetIDAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "stringIndex":                      TypeOfAssignment = AssignmentType.StringIndexAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "text":                      TypeOfAssignment = AssignmentType.TextAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "font":                      TypeOfAssignment = AssignmentType.FontAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "textColorSelected":                      TypeOfAssignment = AssignmentType.TextColorSelectedAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textColorHighlighted":                      TypeOfAssignment = AssignmentType.TextColorHighlightedAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textColorDisabled":                      TypeOfAssignment = AssignmentType.TextColorDisabledAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textButton":                      TypeOfAssignment = AssignmentType.TextButtonAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "color":                      TypeOfAssignment = AssignmentType.ColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "alignment":                      TypeOfAssignment = AssignmentType.AlignmentAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "backColor":                      TypeOfAssignment = AssignmentType.BackColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "frameOnFocus":                      TypeOfAssignment = AssignmentType.FrameOnFocusAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "transparent":                      TypeOfAssignment = AssignmentType.TransparentAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "capacity":                      TypeOfAssignment = AssignmentType.CapacityAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "lines":                      TypeOfAssignment = AssignmentType.LinesAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "flashOnEmpty":                      TypeOfAssignment = AssignmentType.FlashOnEmptyAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "thumbImageSize":                      TypeOfAssignment = AssignmentType.ThumbImageSizeAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "thumbImageOffsets":                      TypeOfAssignment = AssignmentType.ThumbImageOffsetsAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "thumbButtonImage":                      TypeOfAssignment = AssignmentType.ThumbButtonImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "wrapped":                      TypeOfAssignment = AssignmentType.WrappedAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "textColor":                      TypeOfAssignment = AssignmentType.TextColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "mode":                      TypeOfAssignment = AssignmentType.ModeAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "scrollBarImage":                      TypeOfAssignment = AssignmentType.ScrollBarImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "scrollBarGutter":                      TypeOfAssignment = AssignmentType.ScrollBarGutterAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "scrollBarType":                      TypeOfAssignment = AssignmentType.ScrollBarTypeAssignment;                      Value = Value = int.Parse(nodes[2].Token.Text);                      break;                  case "enableIME":                      TypeOfAssignment = AssignmentType.EnableIMEAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "highlighted":                      TypeOfAssignment = AssignmentType.HighlightedAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "minValue":                      TypeOfAssignment = AssignmentType.MinValueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "maxValue":                      TypeOfAssignment = AssignmentType.MaxValueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "pageSize":                      TypeOfAssignment = AssignmentType.PageSizeAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "cursorColor":                      TypeOfAssignment = AssignmentType.CursorColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "toolTip":                      TypeOfAssignment = AssignmentType.TooltipAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "tooltip":                      TypeOfAssignment = AssignmentType.TooltipAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "MouseTransparent":                      TypeOfAssignment = AssignmentType.MouseTransparentAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "imagestates":                      TypeOfAssignment = AssignmentType.ImageStatesAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "backgroundColor":                      TypeOfAssignment = AssignmentType.BackgroundColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "framecolor":                      TypeOfAssignment = AssignmentType.FrameColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "alignments":                      TypeOfAssignment = AssignmentType.AlignmentsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "visibleRows":                      TypeOfAssignment = AssignmentType.VisibleRowsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "columns":                      TypeOfAssignment = AssignmentType.ColumnsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "rowHeight":                      TypeOfAssignment = AssignmentType.RowHeightAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "fillColor":                      TypeOfAssignment = AssignmentType.FillColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "selectionFillColor":                      TypeOfAssignment = AssignmentType.SelectionFillColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "cursor":                      TypeOfAssignment = AssignmentType.CursorAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "lineHeight":                      TypeOfAssignment = AssignmentType.LineHeightAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetL":                      TypeOfAssignment = AssignmentType.EdgeOffsetLAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetR":                      TypeOfAssignment = AssignmentType.EdgeOffsetRAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetT":                      TypeOfAssignment = AssignmentType.EdgeOffsetTAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetB":                      TypeOfAssignment = AssignmentType.EdgeOffsetBAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "foregroundImage":                      TypeOfAssignment = AssignmentType.ForegroundImageAssignment;                      Value = nodes[2].Token.Text;                      break;                  case "backgroundImage":                      TypeOfAssignment = AssignmentType.BackgroundImageAssignment;                      Value = nodes[2].Token.Text;                      break;                  case "value":                      TypeOfAssignment = AssignmentType.ValueAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "useBackgroundImage":                      TypeOfAssignment = AssignmentType.UseBackgroundImageAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "enabled":                      TypeOfAssignment = AssignmentType.EnabledAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "fittext":                      TypeOfAssignment = AssignmentType.FitTextAssignment;                      Value = (int)nodes[2].Token.Value;                      break;              }
Magic Number,UIParser.Nodes,AssignmentNode,C:\repos\Afr0_Project-Dollhouse\Other\libs\UIParser\UIParser\Nodes\AssignmentNode.cs,InitChildren,The following statement contains a magic number: switch(nodes[0].Token.Text)              {                  case "stringDir":                      TypeOfAssignment = AssignmentType.StringDirAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "stringTable":                      TypeOfAssignment = AssignmentType.StringTableAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "leftArrowImage":                      TypeOfAssignment = AssignmentType.LeftArrowImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "rightArrowImage":                      TypeOfAssignment = AssignmentType.RightArrowImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "tracking":                      TypeOfAssignment = AssignmentType.TrackingAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "trigger":                      TypeOfAssignment = AssignmentType.TriggerAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "image":                      TypeOfAssignment = AssignmentType.ImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "position":                      TypeOfAssignment = AssignmentType.PositionAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "size":                      TypeOfAssignment = AssignmentType.SizeAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "id":                      TypeOfAssignment = AssignmentType.IDAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "orientation":                      TypeOfAssignment = AssignmentType.OrientationAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "opaque":                      TypeOfAssignment = AssignmentType.OpaqueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "assetID":                      TypeOfAssignment = AssignmentType.AssetIDAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "stringIndex":                      TypeOfAssignment = AssignmentType.StringIndexAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "text":                      TypeOfAssignment = AssignmentType.TextAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "font":                      TypeOfAssignment = AssignmentType.FontAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "textColorSelected":                      TypeOfAssignment = AssignmentType.TextColorSelectedAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textColorHighlighted":                      TypeOfAssignment = AssignmentType.TextColorHighlightedAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textColorDisabled":                      TypeOfAssignment = AssignmentType.TextColorDisabledAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textButton":                      TypeOfAssignment = AssignmentType.TextButtonAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "color":                      TypeOfAssignment = AssignmentType.ColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "alignment":                      TypeOfAssignment = AssignmentType.AlignmentAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "backColor":                      TypeOfAssignment = AssignmentType.BackColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "frameOnFocus":                      TypeOfAssignment = AssignmentType.FrameOnFocusAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "transparent":                      TypeOfAssignment = AssignmentType.TransparentAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "capacity":                      TypeOfAssignment = AssignmentType.CapacityAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "lines":                      TypeOfAssignment = AssignmentType.LinesAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "flashOnEmpty":                      TypeOfAssignment = AssignmentType.FlashOnEmptyAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "thumbImageSize":                      TypeOfAssignment = AssignmentType.ThumbImageSizeAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "thumbImageOffsets":                      TypeOfAssignment = AssignmentType.ThumbImageOffsetsAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "thumbButtonImage":                      TypeOfAssignment = AssignmentType.ThumbButtonImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "wrapped":                      TypeOfAssignment = AssignmentType.WrappedAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "textColor":                      TypeOfAssignment = AssignmentType.TextColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "mode":                      TypeOfAssignment = AssignmentType.ModeAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "scrollBarImage":                      TypeOfAssignment = AssignmentType.ScrollBarImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "scrollBarGutter":                      TypeOfAssignment = AssignmentType.ScrollBarGutterAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "scrollBarType":                      TypeOfAssignment = AssignmentType.ScrollBarTypeAssignment;                      Value = Value = int.Parse(nodes[2].Token.Text);                      break;                  case "enableIME":                      TypeOfAssignment = AssignmentType.EnableIMEAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "highlighted":                      TypeOfAssignment = AssignmentType.HighlightedAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "minValue":                      TypeOfAssignment = AssignmentType.MinValueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "maxValue":                      TypeOfAssignment = AssignmentType.MaxValueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "pageSize":                      TypeOfAssignment = AssignmentType.PageSizeAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "cursorColor":                      TypeOfAssignment = AssignmentType.CursorColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "toolTip":                      TypeOfAssignment = AssignmentType.TooltipAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "tooltip":                      TypeOfAssignment = AssignmentType.TooltipAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "MouseTransparent":                      TypeOfAssignment = AssignmentType.MouseTransparentAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "imagestates":                      TypeOfAssignment = AssignmentType.ImageStatesAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "backgroundColor":                      TypeOfAssignment = AssignmentType.BackgroundColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "framecolor":                      TypeOfAssignment = AssignmentType.FrameColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "alignments":                      TypeOfAssignment = AssignmentType.AlignmentsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "visibleRows":                      TypeOfAssignment = AssignmentType.VisibleRowsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "columns":                      TypeOfAssignment = AssignmentType.ColumnsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "rowHeight":                      TypeOfAssignment = AssignmentType.RowHeightAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "fillColor":                      TypeOfAssignment = AssignmentType.FillColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "selectionFillColor":                      TypeOfAssignment = AssignmentType.SelectionFillColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "cursor":                      TypeOfAssignment = AssignmentType.CursorAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "lineHeight":                      TypeOfAssignment = AssignmentType.LineHeightAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetL":                      TypeOfAssignment = AssignmentType.EdgeOffsetLAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetR":                      TypeOfAssignment = AssignmentType.EdgeOffsetRAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetT":                      TypeOfAssignment = AssignmentType.EdgeOffsetTAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetB":                      TypeOfAssignment = AssignmentType.EdgeOffsetBAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "foregroundImage":                      TypeOfAssignment = AssignmentType.ForegroundImageAssignment;                      Value = nodes[2].Token.Text;                      break;                  case "backgroundImage":                      TypeOfAssignment = AssignmentType.BackgroundImageAssignment;                      Value = nodes[2].Token.Text;                      break;                  case "value":                      TypeOfAssignment = AssignmentType.ValueAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "useBackgroundImage":                      TypeOfAssignment = AssignmentType.UseBackgroundImageAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "enabled":                      TypeOfAssignment = AssignmentType.EnabledAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "fittext":                      TypeOfAssignment = AssignmentType.FitTextAssignment;                      Value = (int)nodes[2].Token.Value;                      break;              }
Magic Number,UIParser.Nodes,AssignmentNode,C:\repos\Afr0_Project-Dollhouse\Other\libs\UIParser\UIParser\Nodes\AssignmentNode.cs,InitChildren,The following statement contains a magic number: switch(nodes[0].Token.Text)              {                  case "stringDir":                      TypeOfAssignment = AssignmentType.StringDirAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "stringTable":                      TypeOfAssignment = AssignmentType.StringTableAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "leftArrowImage":                      TypeOfAssignment = AssignmentType.LeftArrowImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "rightArrowImage":                      TypeOfAssignment = AssignmentType.RightArrowImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "tracking":                      TypeOfAssignment = AssignmentType.TrackingAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "trigger":                      TypeOfAssignment = AssignmentType.TriggerAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "image":                      TypeOfAssignment = AssignmentType.ImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "position":                      TypeOfAssignment = AssignmentType.PositionAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "size":                      TypeOfAssignment = AssignmentType.SizeAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "id":                      TypeOfAssignment = AssignmentType.IDAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "orientation":                      TypeOfAssignment = AssignmentType.OrientationAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "opaque":                      TypeOfAssignment = AssignmentType.OpaqueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "assetID":                      TypeOfAssignment = AssignmentType.AssetIDAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "stringIndex":                      TypeOfAssignment = AssignmentType.StringIndexAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "text":                      TypeOfAssignment = AssignmentType.TextAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "font":                      TypeOfAssignment = AssignmentType.FontAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "textColorSelected":                      TypeOfAssignment = AssignmentType.TextColorSelectedAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textColorHighlighted":                      TypeOfAssignment = AssignmentType.TextColorHighlightedAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textColorDisabled":                      TypeOfAssignment = AssignmentType.TextColorDisabledAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textButton":                      TypeOfAssignment = AssignmentType.TextButtonAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "color":                      TypeOfAssignment = AssignmentType.ColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "alignment":                      TypeOfAssignment = AssignmentType.AlignmentAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "backColor":                      TypeOfAssignment = AssignmentType.BackColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "frameOnFocus":                      TypeOfAssignment = AssignmentType.FrameOnFocusAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "transparent":                      TypeOfAssignment = AssignmentType.TransparentAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "capacity":                      TypeOfAssignment = AssignmentType.CapacityAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "lines":                      TypeOfAssignment = AssignmentType.LinesAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "flashOnEmpty":                      TypeOfAssignment = AssignmentType.FlashOnEmptyAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "thumbImageSize":                      TypeOfAssignment = AssignmentType.ThumbImageSizeAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "thumbImageOffsets":                      TypeOfAssignment = AssignmentType.ThumbImageOffsetsAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "thumbButtonImage":                      TypeOfAssignment = AssignmentType.ThumbButtonImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "wrapped":                      TypeOfAssignment = AssignmentType.WrappedAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "textColor":                      TypeOfAssignment = AssignmentType.TextColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "mode":                      TypeOfAssignment = AssignmentType.ModeAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "scrollBarImage":                      TypeOfAssignment = AssignmentType.ScrollBarImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "scrollBarGutter":                      TypeOfAssignment = AssignmentType.ScrollBarGutterAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "scrollBarType":                      TypeOfAssignment = AssignmentType.ScrollBarTypeAssignment;                      Value = Value = int.Parse(nodes[2].Token.Text);                      break;                  case "enableIME":                      TypeOfAssignment = AssignmentType.EnableIMEAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "highlighted":                      TypeOfAssignment = AssignmentType.HighlightedAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "minValue":                      TypeOfAssignment = AssignmentType.MinValueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "maxValue":                      TypeOfAssignment = AssignmentType.MaxValueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "pageSize":                      TypeOfAssignment = AssignmentType.PageSizeAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "cursorColor":                      TypeOfAssignment = AssignmentType.CursorColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "toolTip":                      TypeOfAssignment = AssignmentType.TooltipAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "tooltip":                      TypeOfAssignment = AssignmentType.TooltipAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "MouseTransparent":                      TypeOfAssignment = AssignmentType.MouseTransparentAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "imagestates":                      TypeOfAssignment = AssignmentType.ImageStatesAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "backgroundColor":                      TypeOfAssignment = AssignmentType.BackgroundColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "framecolor":                      TypeOfAssignment = AssignmentType.FrameColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "alignments":                      TypeOfAssignment = AssignmentType.AlignmentsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "visibleRows":                      TypeOfAssignment = AssignmentType.VisibleRowsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "columns":                      TypeOfAssignment = AssignmentType.ColumnsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "rowHeight":                      TypeOfAssignment = AssignmentType.RowHeightAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "fillColor":                      TypeOfAssignment = AssignmentType.FillColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "selectionFillColor":                      TypeOfAssignment = AssignmentType.SelectionFillColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "cursor":                      TypeOfAssignment = AssignmentType.CursorAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "lineHeight":                      TypeOfAssignment = AssignmentType.LineHeightAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetL":                      TypeOfAssignment = AssignmentType.EdgeOffsetLAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetR":                      TypeOfAssignment = AssignmentType.EdgeOffsetRAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetT":                      TypeOfAssignment = AssignmentType.EdgeOffsetTAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetB":                      TypeOfAssignment = AssignmentType.EdgeOffsetBAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "foregroundImage":                      TypeOfAssignment = AssignmentType.ForegroundImageAssignment;                      Value = nodes[2].Token.Text;                      break;                  case "backgroundImage":                      TypeOfAssignment = AssignmentType.BackgroundImageAssignment;                      Value = nodes[2].Token.Text;                      break;                  case "value":                      TypeOfAssignment = AssignmentType.ValueAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "useBackgroundImage":                      TypeOfAssignment = AssignmentType.UseBackgroundImageAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "enabled":                      TypeOfAssignment = AssignmentType.EnabledAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "fittext":                      TypeOfAssignment = AssignmentType.FitTextAssignment;                      Value = (int)nodes[2].Token.Value;                      break;              }
Magic Number,UIParser.Nodes,AssignmentNode,C:\repos\Afr0_Project-Dollhouse\Other\libs\UIParser\UIParser\Nodes\AssignmentNode.cs,InitChildren,The following statement contains a magic number: switch(nodes[0].Token.Text)              {                  case "stringDir":                      TypeOfAssignment = AssignmentType.StringDirAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "stringTable":                      TypeOfAssignment = AssignmentType.StringTableAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "leftArrowImage":                      TypeOfAssignment = AssignmentType.LeftArrowImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "rightArrowImage":                      TypeOfAssignment = AssignmentType.RightArrowImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "tracking":                      TypeOfAssignment = AssignmentType.TrackingAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "trigger":                      TypeOfAssignment = AssignmentType.TriggerAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "image":                      TypeOfAssignment = AssignmentType.ImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "position":                      TypeOfAssignment = AssignmentType.PositionAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "size":                      TypeOfAssignment = AssignmentType.SizeAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "id":                      TypeOfAssignment = AssignmentType.IDAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "orientation":                      TypeOfAssignment = AssignmentType.OrientationAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "opaque":                      TypeOfAssignment = AssignmentType.OpaqueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "assetID":                      TypeOfAssignment = AssignmentType.AssetIDAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "stringIndex":                      TypeOfAssignment = AssignmentType.StringIndexAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "text":                      TypeOfAssignment = AssignmentType.TextAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "font":                      TypeOfAssignment = AssignmentType.FontAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "textColorSelected":                      TypeOfAssignment = AssignmentType.TextColorSelectedAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textColorHighlighted":                      TypeOfAssignment = AssignmentType.TextColorHighlightedAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textColorDisabled":                      TypeOfAssignment = AssignmentType.TextColorDisabledAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textButton":                      TypeOfAssignment = AssignmentType.TextButtonAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "color":                      TypeOfAssignment = AssignmentType.ColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "alignment":                      TypeOfAssignment = AssignmentType.AlignmentAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "backColor":                      TypeOfAssignment = AssignmentType.BackColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "frameOnFocus":                      TypeOfAssignment = AssignmentType.FrameOnFocusAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "transparent":                      TypeOfAssignment = AssignmentType.TransparentAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "capacity":                      TypeOfAssignment = AssignmentType.CapacityAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "lines":                      TypeOfAssignment = AssignmentType.LinesAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "flashOnEmpty":                      TypeOfAssignment = AssignmentType.FlashOnEmptyAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "thumbImageSize":                      TypeOfAssignment = AssignmentType.ThumbImageSizeAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "thumbImageOffsets":                      TypeOfAssignment = AssignmentType.ThumbImageOffsetsAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "thumbButtonImage":                      TypeOfAssignment = AssignmentType.ThumbButtonImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "wrapped":                      TypeOfAssignment = AssignmentType.WrappedAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "textColor":                      TypeOfAssignment = AssignmentType.TextColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "mode":                      TypeOfAssignment = AssignmentType.ModeAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "scrollBarImage":                      TypeOfAssignment = AssignmentType.ScrollBarImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "scrollBarGutter":                      TypeOfAssignment = AssignmentType.ScrollBarGutterAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "scrollBarType":                      TypeOfAssignment = AssignmentType.ScrollBarTypeAssignment;                      Value = Value = int.Parse(nodes[2].Token.Text);                      break;                  case "enableIME":                      TypeOfAssignment = AssignmentType.EnableIMEAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "highlighted":                      TypeOfAssignment = AssignmentType.HighlightedAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "minValue":                      TypeOfAssignment = AssignmentType.MinValueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "maxValue":                      TypeOfAssignment = AssignmentType.MaxValueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "pageSize":                      TypeOfAssignment = AssignmentType.PageSizeAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "cursorColor":                      TypeOfAssignment = AssignmentType.CursorColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "toolTip":                      TypeOfAssignment = AssignmentType.TooltipAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "tooltip":                      TypeOfAssignment = AssignmentType.TooltipAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "MouseTransparent":                      TypeOfAssignment = AssignmentType.MouseTransparentAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "imagestates":                      TypeOfAssignment = AssignmentType.ImageStatesAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "backgroundColor":                      TypeOfAssignment = AssignmentType.BackgroundColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "framecolor":                      TypeOfAssignment = AssignmentType.FrameColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "alignments":                      TypeOfAssignment = AssignmentType.AlignmentsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "visibleRows":                      TypeOfAssignment = AssignmentType.VisibleRowsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "columns":                      TypeOfAssignment = AssignmentType.ColumnsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "rowHeight":                      TypeOfAssignment = AssignmentType.RowHeightAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "fillColor":                      TypeOfAssignment = AssignmentType.FillColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "selectionFillColor":                      TypeOfAssignment = AssignmentType.SelectionFillColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "cursor":                      TypeOfAssignment = AssignmentType.CursorAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "lineHeight":                      TypeOfAssignment = AssignmentType.LineHeightAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetL":                      TypeOfAssignment = AssignmentType.EdgeOffsetLAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetR":                      TypeOfAssignment = AssignmentType.EdgeOffsetRAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetT":                      TypeOfAssignment = AssignmentType.EdgeOffsetTAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetB":                      TypeOfAssignment = AssignmentType.EdgeOffsetBAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "foregroundImage":                      TypeOfAssignment = AssignmentType.ForegroundImageAssignment;                      Value = nodes[2].Token.Text;                      break;                  case "backgroundImage":                      TypeOfAssignment = AssignmentType.BackgroundImageAssignment;                      Value = nodes[2].Token.Text;                      break;                  case "value":                      TypeOfAssignment = AssignmentType.ValueAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "useBackgroundImage":                      TypeOfAssignment = AssignmentType.UseBackgroundImageAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "enabled":                      TypeOfAssignment = AssignmentType.EnabledAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "fittext":                      TypeOfAssignment = AssignmentType.FitTextAssignment;                      Value = (int)nodes[2].Token.Value;                      break;              }
Magic Number,UIParser.Nodes,AssignmentNode,C:\repos\Afr0_Project-Dollhouse\Other\libs\UIParser\UIParser\Nodes\AssignmentNode.cs,InitChildren,The following statement contains a magic number: switch(nodes[0].Token.Text)              {                  case "stringDir":                      TypeOfAssignment = AssignmentType.StringDirAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "stringTable":                      TypeOfAssignment = AssignmentType.StringTableAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "leftArrowImage":                      TypeOfAssignment = AssignmentType.LeftArrowImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "rightArrowImage":                      TypeOfAssignment = AssignmentType.RightArrowImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "tracking":                      TypeOfAssignment = AssignmentType.TrackingAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "trigger":                      TypeOfAssignment = AssignmentType.TriggerAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "image":                      TypeOfAssignment = AssignmentType.ImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "position":                      TypeOfAssignment = AssignmentType.PositionAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "size":                      TypeOfAssignment = AssignmentType.SizeAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "id":                      TypeOfAssignment = AssignmentType.IDAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "orientation":                      TypeOfAssignment = AssignmentType.OrientationAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "opaque":                      TypeOfAssignment = AssignmentType.OpaqueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "assetID":                      TypeOfAssignment = AssignmentType.AssetIDAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "stringIndex":                      TypeOfAssignment = AssignmentType.StringIndexAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "text":                      TypeOfAssignment = AssignmentType.TextAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "font":                      TypeOfAssignment = AssignmentType.FontAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "textColorSelected":                      TypeOfAssignment = AssignmentType.TextColorSelectedAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textColorHighlighted":                      TypeOfAssignment = AssignmentType.TextColorHighlightedAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textColorDisabled":                      TypeOfAssignment = AssignmentType.TextColorDisabledAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textButton":                      TypeOfAssignment = AssignmentType.TextButtonAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "color":                      TypeOfAssignment = AssignmentType.ColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "alignment":                      TypeOfAssignment = AssignmentType.AlignmentAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "backColor":                      TypeOfAssignment = AssignmentType.BackColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "frameOnFocus":                      TypeOfAssignment = AssignmentType.FrameOnFocusAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "transparent":                      TypeOfAssignment = AssignmentType.TransparentAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "capacity":                      TypeOfAssignment = AssignmentType.CapacityAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "lines":                      TypeOfAssignment = AssignmentType.LinesAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "flashOnEmpty":                      TypeOfAssignment = AssignmentType.FlashOnEmptyAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "thumbImageSize":                      TypeOfAssignment = AssignmentType.ThumbImageSizeAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "thumbImageOffsets":                      TypeOfAssignment = AssignmentType.ThumbImageOffsetsAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "thumbButtonImage":                      TypeOfAssignment = AssignmentType.ThumbButtonImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "wrapped":                      TypeOfAssignment = AssignmentType.WrappedAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "textColor":                      TypeOfAssignment = AssignmentType.TextColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "mode":                      TypeOfAssignment = AssignmentType.ModeAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "scrollBarImage":                      TypeOfAssignment = AssignmentType.ScrollBarImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "scrollBarGutter":                      TypeOfAssignment = AssignmentType.ScrollBarGutterAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "scrollBarType":                      TypeOfAssignment = AssignmentType.ScrollBarTypeAssignment;                      Value = Value = int.Parse(nodes[2].Token.Text);                      break;                  case "enableIME":                      TypeOfAssignment = AssignmentType.EnableIMEAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "highlighted":                      TypeOfAssignment = AssignmentType.HighlightedAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "minValue":                      TypeOfAssignment = AssignmentType.MinValueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "maxValue":                      TypeOfAssignment = AssignmentType.MaxValueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "pageSize":                      TypeOfAssignment = AssignmentType.PageSizeAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "cursorColor":                      TypeOfAssignment = AssignmentType.CursorColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "toolTip":                      TypeOfAssignment = AssignmentType.TooltipAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "tooltip":                      TypeOfAssignment = AssignmentType.TooltipAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "MouseTransparent":                      TypeOfAssignment = AssignmentType.MouseTransparentAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "imagestates":                      TypeOfAssignment = AssignmentType.ImageStatesAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "backgroundColor":                      TypeOfAssignment = AssignmentType.BackgroundColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "framecolor":                      TypeOfAssignment = AssignmentType.FrameColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "alignments":                      TypeOfAssignment = AssignmentType.AlignmentsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "visibleRows":                      TypeOfAssignment = AssignmentType.VisibleRowsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "columns":                      TypeOfAssignment = AssignmentType.ColumnsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "rowHeight":                      TypeOfAssignment = AssignmentType.RowHeightAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "fillColor":                      TypeOfAssignment = AssignmentType.FillColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "selectionFillColor":                      TypeOfAssignment = AssignmentType.SelectionFillColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "cursor":                      TypeOfAssignment = AssignmentType.CursorAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "lineHeight":                      TypeOfAssignment = AssignmentType.LineHeightAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetL":                      TypeOfAssignment = AssignmentType.EdgeOffsetLAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetR":                      TypeOfAssignment = AssignmentType.EdgeOffsetRAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetT":                      TypeOfAssignment = AssignmentType.EdgeOffsetTAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetB":                      TypeOfAssignment = AssignmentType.EdgeOffsetBAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "foregroundImage":                      TypeOfAssignment = AssignmentType.ForegroundImageAssignment;                      Value = nodes[2].Token.Text;                      break;                  case "backgroundImage":                      TypeOfAssignment = AssignmentType.BackgroundImageAssignment;                      Value = nodes[2].Token.Text;                      break;                  case "value":                      TypeOfAssignment = AssignmentType.ValueAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "useBackgroundImage":                      TypeOfAssignment = AssignmentType.UseBackgroundImageAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "enabled":                      TypeOfAssignment = AssignmentType.EnabledAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "fittext":                      TypeOfAssignment = AssignmentType.FitTextAssignment;                      Value = (int)nodes[2].Token.Value;                      break;              }
Magic Number,UIParser.Nodes,AssignmentNode,C:\repos\Afr0_Project-Dollhouse\Other\libs\UIParser\UIParser\Nodes\AssignmentNode.cs,InitChildren,The following statement contains a magic number: switch(nodes[0].Token.Text)              {                  case "stringDir":                      TypeOfAssignment = AssignmentType.StringDirAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "stringTable":                      TypeOfAssignment = AssignmentType.StringTableAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "leftArrowImage":                      TypeOfAssignment = AssignmentType.LeftArrowImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "rightArrowImage":                      TypeOfAssignment = AssignmentType.RightArrowImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "tracking":                      TypeOfAssignment = AssignmentType.TrackingAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "trigger":                      TypeOfAssignment = AssignmentType.TriggerAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "image":                      TypeOfAssignment = AssignmentType.ImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "position":                      TypeOfAssignment = AssignmentType.PositionAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "size":                      TypeOfAssignment = AssignmentType.SizeAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "id":                      TypeOfAssignment = AssignmentType.IDAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "orientation":                      TypeOfAssignment = AssignmentType.OrientationAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "opaque":                      TypeOfAssignment = AssignmentType.OpaqueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "assetID":                      TypeOfAssignment = AssignmentType.AssetIDAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "stringIndex":                      TypeOfAssignment = AssignmentType.StringIndexAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "text":                      TypeOfAssignment = AssignmentType.TextAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "font":                      TypeOfAssignment = AssignmentType.FontAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "textColorSelected":                      TypeOfAssignment = AssignmentType.TextColorSelectedAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textColorHighlighted":                      TypeOfAssignment = AssignmentType.TextColorHighlightedAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textColorDisabled":                      TypeOfAssignment = AssignmentType.TextColorDisabledAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textButton":                      TypeOfAssignment = AssignmentType.TextButtonAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "color":                      TypeOfAssignment = AssignmentType.ColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "alignment":                      TypeOfAssignment = AssignmentType.AlignmentAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "backColor":                      TypeOfAssignment = AssignmentType.BackColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "frameOnFocus":                      TypeOfAssignment = AssignmentType.FrameOnFocusAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "transparent":                      TypeOfAssignment = AssignmentType.TransparentAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "capacity":                      TypeOfAssignment = AssignmentType.CapacityAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "lines":                      TypeOfAssignment = AssignmentType.LinesAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "flashOnEmpty":                      TypeOfAssignment = AssignmentType.FlashOnEmptyAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "thumbImageSize":                      TypeOfAssignment = AssignmentType.ThumbImageSizeAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "thumbImageOffsets":                      TypeOfAssignment = AssignmentType.ThumbImageOffsetsAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "thumbButtonImage":                      TypeOfAssignment = AssignmentType.ThumbButtonImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "wrapped":                      TypeOfAssignment = AssignmentType.WrappedAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "textColor":                      TypeOfAssignment = AssignmentType.TextColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "mode":                      TypeOfAssignment = AssignmentType.ModeAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "scrollBarImage":                      TypeOfAssignment = AssignmentType.ScrollBarImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "scrollBarGutter":                      TypeOfAssignment = AssignmentType.ScrollBarGutterAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "scrollBarType":                      TypeOfAssignment = AssignmentType.ScrollBarTypeAssignment;                      Value = Value = int.Parse(nodes[2].Token.Text);                      break;                  case "enableIME":                      TypeOfAssignment = AssignmentType.EnableIMEAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "highlighted":                      TypeOfAssignment = AssignmentType.HighlightedAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "minValue":                      TypeOfAssignment = AssignmentType.MinValueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "maxValue":                      TypeOfAssignment = AssignmentType.MaxValueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "pageSize":                      TypeOfAssignment = AssignmentType.PageSizeAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "cursorColor":                      TypeOfAssignment = AssignmentType.CursorColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "toolTip":                      TypeOfAssignment = AssignmentType.TooltipAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "tooltip":                      TypeOfAssignment = AssignmentType.TooltipAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "MouseTransparent":                      TypeOfAssignment = AssignmentType.MouseTransparentAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "imagestates":                      TypeOfAssignment = AssignmentType.ImageStatesAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "backgroundColor":                      TypeOfAssignment = AssignmentType.BackgroundColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "framecolor":                      TypeOfAssignment = AssignmentType.FrameColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "alignments":                      TypeOfAssignment = AssignmentType.AlignmentsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "visibleRows":                      TypeOfAssignment = AssignmentType.VisibleRowsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "columns":                      TypeOfAssignment = AssignmentType.ColumnsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "rowHeight":                      TypeOfAssignment = AssignmentType.RowHeightAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "fillColor":                      TypeOfAssignment = AssignmentType.FillColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "selectionFillColor":                      TypeOfAssignment = AssignmentType.SelectionFillColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "cursor":                      TypeOfAssignment = AssignmentType.CursorAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "lineHeight":                      TypeOfAssignment = AssignmentType.LineHeightAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetL":                      TypeOfAssignment = AssignmentType.EdgeOffsetLAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetR":                      TypeOfAssignment = AssignmentType.EdgeOffsetRAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetT":                      TypeOfAssignment = AssignmentType.EdgeOffsetTAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetB":                      TypeOfAssignment = AssignmentType.EdgeOffsetBAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "foregroundImage":                      TypeOfAssignment = AssignmentType.ForegroundImageAssignment;                      Value = nodes[2].Token.Text;                      break;                  case "backgroundImage":                      TypeOfAssignment = AssignmentType.BackgroundImageAssignment;                      Value = nodes[2].Token.Text;                      break;                  case "value":                      TypeOfAssignment = AssignmentType.ValueAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "useBackgroundImage":                      TypeOfAssignment = AssignmentType.UseBackgroundImageAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "enabled":                      TypeOfAssignment = AssignmentType.EnabledAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "fittext":                      TypeOfAssignment = AssignmentType.FitTextAssignment;                      Value = (int)nodes[2].Token.Value;                      break;              }
Magic Number,UIParser.Nodes,AssignmentNode,C:\repos\Afr0_Project-Dollhouse\Other\libs\UIParser\UIParser\Nodes\AssignmentNode.cs,InitChildren,The following statement contains a magic number: switch(nodes[0].Token.Text)              {                  case "stringDir":                      TypeOfAssignment = AssignmentType.StringDirAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "stringTable":                      TypeOfAssignment = AssignmentType.StringTableAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "leftArrowImage":                      TypeOfAssignment = AssignmentType.LeftArrowImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "rightArrowImage":                      TypeOfAssignment = AssignmentType.RightArrowImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "tracking":                      TypeOfAssignment = AssignmentType.TrackingAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "trigger":                      TypeOfAssignment = AssignmentType.TriggerAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "image":                      TypeOfAssignment = AssignmentType.ImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "position":                      TypeOfAssignment = AssignmentType.PositionAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "size":                      TypeOfAssignment = AssignmentType.SizeAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "id":                      TypeOfAssignment = AssignmentType.IDAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "orientation":                      TypeOfAssignment = AssignmentType.OrientationAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "opaque":                      TypeOfAssignment = AssignmentType.OpaqueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "assetID":                      TypeOfAssignment = AssignmentType.AssetIDAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "stringIndex":                      TypeOfAssignment = AssignmentType.StringIndexAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "text":                      TypeOfAssignment = AssignmentType.TextAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "font":                      TypeOfAssignment = AssignmentType.FontAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "textColorSelected":                      TypeOfAssignment = AssignmentType.TextColorSelectedAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textColorHighlighted":                      TypeOfAssignment = AssignmentType.TextColorHighlightedAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textColorDisabled":                      TypeOfAssignment = AssignmentType.TextColorDisabledAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textButton":                      TypeOfAssignment = AssignmentType.TextButtonAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "color":                      TypeOfAssignment = AssignmentType.ColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "alignment":                      TypeOfAssignment = AssignmentType.AlignmentAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "backColor":                      TypeOfAssignment = AssignmentType.BackColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "frameOnFocus":                      TypeOfAssignment = AssignmentType.FrameOnFocusAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "transparent":                      TypeOfAssignment = AssignmentType.TransparentAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "capacity":                      TypeOfAssignment = AssignmentType.CapacityAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "lines":                      TypeOfAssignment = AssignmentType.LinesAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "flashOnEmpty":                      TypeOfAssignment = AssignmentType.FlashOnEmptyAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "thumbImageSize":                      TypeOfAssignment = AssignmentType.ThumbImageSizeAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "thumbImageOffsets":                      TypeOfAssignment = AssignmentType.ThumbImageOffsetsAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "thumbButtonImage":                      TypeOfAssignment = AssignmentType.ThumbButtonImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "wrapped":                      TypeOfAssignment = AssignmentType.WrappedAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "textColor":                      TypeOfAssignment = AssignmentType.TextColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "mode":                      TypeOfAssignment = AssignmentType.ModeAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "scrollBarImage":                      TypeOfAssignment = AssignmentType.ScrollBarImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "scrollBarGutter":                      TypeOfAssignment = AssignmentType.ScrollBarGutterAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "scrollBarType":                      TypeOfAssignment = AssignmentType.ScrollBarTypeAssignment;                      Value = Value = int.Parse(nodes[2].Token.Text);                      break;                  case "enableIME":                      TypeOfAssignment = AssignmentType.EnableIMEAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "highlighted":                      TypeOfAssignment = AssignmentType.HighlightedAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "minValue":                      TypeOfAssignment = AssignmentType.MinValueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "maxValue":                      TypeOfAssignment = AssignmentType.MaxValueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "pageSize":                      TypeOfAssignment = AssignmentType.PageSizeAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "cursorColor":                      TypeOfAssignment = AssignmentType.CursorColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "toolTip":                      TypeOfAssignment = AssignmentType.TooltipAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "tooltip":                      TypeOfAssignment = AssignmentType.TooltipAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "MouseTransparent":                      TypeOfAssignment = AssignmentType.MouseTransparentAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "imagestates":                      TypeOfAssignment = AssignmentType.ImageStatesAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "backgroundColor":                      TypeOfAssignment = AssignmentType.BackgroundColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "framecolor":                      TypeOfAssignment = AssignmentType.FrameColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "alignments":                      TypeOfAssignment = AssignmentType.AlignmentsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "visibleRows":                      TypeOfAssignment = AssignmentType.VisibleRowsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "columns":                      TypeOfAssignment = AssignmentType.ColumnsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "rowHeight":                      TypeOfAssignment = AssignmentType.RowHeightAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "fillColor":                      TypeOfAssignment = AssignmentType.FillColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "selectionFillColor":                      TypeOfAssignment = AssignmentType.SelectionFillColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "cursor":                      TypeOfAssignment = AssignmentType.CursorAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "lineHeight":                      TypeOfAssignment = AssignmentType.LineHeightAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetL":                      TypeOfAssignment = AssignmentType.EdgeOffsetLAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetR":                      TypeOfAssignment = AssignmentType.EdgeOffsetRAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetT":                      TypeOfAssignment = AssignmentType.EdgeOffsetTAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetB":                      TypeOfAssignment = AssignmentType.EdgeOffsetBAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "foregroundImage":                      TypeOfAssignment = AssignmentType.ForegroundImageAssignment;                      Value = nodes[2].Token.Text;                      break;                  case "backgroundImage":                      TypeOfAssignment = AssignmentType.BackgroundImageAssignment;                      Value = nodes[2].Token.Text;                      break;                  case "value":                      TypeOfAssignment = AssignmentType.ValueAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "useBackgroundImage":                      TypeOfAssignment = AssignmentType.UseBackgroundImageAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "enabled":                      TypeOfAssignment = AssignmentType.EnabledAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "fittext":                      TypeOfAssignment = AssignmentType.FitTextAssignment;                      Value = (int)nodes[2].Token.Value;                      break;              }
Magic Number,UIParser.Nodes,AssignmentNode,C:\repos\Afr0_Project-Dollhouse\Other\libs\UIParser\UIParser\Nodes\AssignmentNode.cs,InitChildren,The following statement contains a magic number: switch(nodes[0].Token.Text)              {                  case "stringDir":                      TypeOfAssignment = AssignmentType.StringDirAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "stringTable":                      TypeOfAssignment = AssignmentType.StringTableAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "leftArrowImage":                      TypeOfAssignment = AssignmentType.LeftArrowImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "rightArrowImage":                      TypeOfAssignment = AssignmentType.RightArrowImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "tracking":                      TypeOfAssignment = AssignmentType.TrackingAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "trigger":                      TypeOfAssignment = AssignmentType.TriggerAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "image":                      TypeOfAssignment = AssignmentType.ImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "position":                      TypeOfAssignment = AssignmentType.PositionAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "size":                      TypeOfAssignment = AssignmentType.SizeAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "id":                      TypeOfAssignment = AssignmentType.IDAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "orientation":                      TypeOfAssignment = AssignmentType.OrientationAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "opaque":                      TypeOfAssignment = AssignmentType.OpaqueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "assetID":                      TypeOfAssignment = AssignmentType.AssetIDAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "stringIndex":                      TypeOfAssignment = AssignmentType.StringIndexAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "text":                      TypeOfAssignment = AssignmentType.TextAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "font":                      TypeOfAssignment = AssignmentType.FontAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "textColorSelected":                      TypeOfAssignment = AssignmentType.TextColorSelectedAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textColorHighlighted":                      TypeOfAssignment = AssignmentType.TextColorHighlightedAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textColorDisabled":                      TypeOfAssignment = AssignmentType.TextColorDisabledAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textButton":                      TypeOfAssignment = AssignmentType.TextButtonAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "color":                      TypeOfAssignment = AssignmentType.ColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "alignment":                      TypeOfAssignment = AssignmentType.AlignmentAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "backColor":                      TypeOfAssignment = AssignmentType.BackColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "frameOnFocus":                      TypeOfAssignment = AssignmentType.FrameOnFocusAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "transparent":                      TypeOfAssignment = AssignmentType.TransparentAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "capacity":                      TypeOfAssignment = AssignmentType.CapacityAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "lines":                      TypeOfAssignment = AssignmentType.LinesAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "flashOnEmpty":                      TypeOfAssignment = AssignmentType.FlashOnEmptyAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "thumbImageSize":                      TypeOfAssignment = AssignmentType.ThumbImageSizeAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "thumbImageOffsets":                      TypeOfAssignment = AssignmentType.ThumbImageOffsetsAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "thumbButtonImage":                      TypeOfAssignment = AssignmentType.ThumbButtonImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "wrapped":                      TypeOfAssignment = AssignmentType.WrappedAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "textColor":                      TypeOfAssignment = AssignmentType.TextColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "mode":                      TypeOfAssignment = AssignmentType.ModeAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "scrollBarImage":                      TypeOfAssignment = AssignmentType.ScrollBarImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "scrollBarGutter":                      TypeOfAssignment = AssignmentType.ScrollBarGutterAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "scrollBarType":                      TypeOfAssignment = AssignmentType.ScrollBarTypeAssignment;                      Value = Value = int.Parse(nodes[2].Token.Text);                      break;                  case "enableIME":                      TypeOfAssignment = AssignmentType.EnableIMEAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "highlighted":                      TypeOfAssignment = AssignmentType.HighlightedAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "minValue":                      TypeOfAssignment = AssignmentType.MinValueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "maxValue":                      TypeOfAssignment = AssignmentType.MaxValueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "pageSize":                      TypeOfAssignment = AssignmentType.PageSizeAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "cursorColor":                      TypeOfAssignment = AssignmentType.CursorColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "toolTip":                      TypeOfAssignment = AssignmentType.TooltipAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "tooltip":                      TypeOfAssignment = AssignmentType.TooltipAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "MouseTransparent":                      TypeOfAssignment = AssignmentType.MouseTransparentAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "imagestates":                      TypeOfAssignment = AssignmentType.ImageStatesAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "backgroundColor":                      TypeOfAssignment = AssignmentType.BackgroundColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "framecolor":                      TypeOfAssignment = AssignmentType.FrameColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "alignments":                      TypeOfAssignment = AssignmentType.AlignmentsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "visibleRows":                      TypeOfAssignment = AssignmentType.VisibleRowsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "columns":                      TypeOfAssignment = AssignmentType.ColumnsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "rowHeight":                      TypeOfAssignment = AssignmentType.RowHeightAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "fillColor":                      TypeOfAssignment = AssignmentType.FillColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "selectionFillColor":                      TypeOfAssignment = AssignmentType.SelectionFillColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "cursor":                      TypeOfAssignment = AssignmentType.CursorAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "lineHeight":                      TypeOfAssignment = AssignmentType.LineHeightAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetL":                      TypeOfAssignment = AssignmentType.EdgeOffsetLAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetR":                      TypeOfAssignment = AssignmentType.EdgeOffsetRAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetT":                      TypeOfAssignment = AssignmentType.EdgeOffsetTAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetB":                      TypeOfAssignment = AssignmentType.EdgeOffsetBAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "foregroundImage":                      TypeOfAssignment = AssignmentType.ForegroundImageAssignment;                      Value = nodes[2].Token.Text;                      break;                  case "backgroundImage":                      TypeOfAssignment = AssignmentType.BackgroundImageAssignment;                      Value = nodes[2].Token.Text;                      break;                  case "value":                      TypeOfAssignment = AssignmentType.ValueAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "useBackgroundImage":                      TypeOfAssignment = AssignmentType.UseBackgroundImageAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "enabled":                      TypeOfAssignment = AssignmentType.EnabledAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "fittext":                      TypeOfAssignment = AssignmentType.FitTextAssignment;                      Value = (int)nodes[2].Token.Value;                      break;              }
Magic Number,UIParser.Nodes,AssignmentNode,C:\repos\Afr0_Project-Dollhouse\Other\libs\UIParser\UIParser\Nodes\AssignmentNode.cs,InitChildren,The following statement contains a magic number: switch(nodes[0].Token.Text)              {                  case "stringDir":                      TypeOfAssignment = AssignmentType.StringDirAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "stringTable":                      TypeOfAssignment = AssignmentType.StringTableAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "leftArrowImage":                      TypeOfAssignment = AssignmentType.LeftArrowImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "rightArrowImage":                      TypeOfAssignment = AssignmentType.RightArrowImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "tracking":                      TypeOfAssignment = AssignmentType.TrackingAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "trigger":                      TypeOfAssignment = AssignmentType.TriggerAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "image":                      TypeOfAssignment = AssignmentType.ImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "position":                      TypeOfAssignment = AssignmentType.PositionAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "size":                      TypeOfAssignment = AssignmentType.SizeAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "id":                      TypeOfAssignment = AssignmentType.IDAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "orientation":                      TypeOfAssignment = AssignmentType.OrientationAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "opaque":                      TypeOfAssignment = AssignmentType.OpaqueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "assetID":                      TypeOfAssignment = AssignmentType.AssetIDAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "stringIndex":                      TypeOfAssignment = AssignmentType.StringIndexAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "text":                      TypeOfAssignment = AssignmentType.TextAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "font":                      TypeOfAssignment = AssignmentType.FontAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "textColorSelected":                      TypeOfAssignment = AssignmentType.TextColorSelectedAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textColorHighlighted":                      TypeOfAssignment = AssignmentType.TextColorHighlightedAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textColorDisabled":                      TypeOfAssignment = AssignmentType.TextColorDisabledAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textButton":                      TypeOfAssignment = AssignmentType.TextButtonAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "color":                      TypeOfAssignment = AssignmentType.ColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "alignment":                      TypeOfAssignment = AssignmentType.AlignmentAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "backColor":                      TypeOfAssignment = AssignmentType.BackColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "frameOnFocus":                      TypeOfAssignment = AssignmentType.FrameOnFocusAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "transparent":                      TypeOfAssignment = AssignmentType.TransparentAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "capacity":                      TypeOfAssignment = AssignmentType.CapacityAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "lines":                      TypeOfAssignment = AssignmentType.LinesAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "flashOnEmpty":                      TypeOfAssignment = AssignmentType.FlashOnEmptyAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "thumbImageSize":                      TypeOfAssignment = AssignmentType.ThumbImageSizeAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "thumbImageOffsets":                      TypeOfAssignment = AssignmentType.ThumbImageOffsetsAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "thumbButtonImage":                      TypeOfAssignment = AssignmentType.ThumbButtonImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "wrapped":                      TypeOfAssignment = AssignmentType.WrappedAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "textColor":                      TypeOfAssignment = AssignmentType.TextColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "mode":                      TypeOfAssignment = AssignmentType.ModeAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "scrollBarImage":                      TypeOfAssignment = AssignmentType.ScrollBarImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "scrollBarGutter":                      TypeOfAssignment = AssignmentType.ScrollBarGutterAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "scrollBarType":                      TypeOfAssignment = AssignmentType.ScrollBarTypeAssignment;                      Value = Value = int.Parse(nodes[2].Token.Text);                      break;                  case "enableIME":                      TypeOfAssignment = AssignmentType.EnableIMEAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "highlighted":                      TypeOfAssignment = AssignmentType.HighlightedAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "minValue":                      TypeOfAssignment = AssignmentType.MinValueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "maxValue":                      TypeOfAssignment = AssignmentType.MaxValueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "pageSize":                      TypeOfAssignment = AssignmentType.PageSizeAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "cursorColor":                      TypeOfAssignment = AssignmentType.CursorColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "toolTip":                      TypeOfAssignment = AssignmentType.TooltipAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "tooltip":                      TypeOfAssignment = AssignmentType.TooltipAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "MouseTransparent":                      TypeOfAssignment = AssignmentType.MouseTransparentAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "imagestates":                      TypeOfAssignment = AssignmentType.ImageStatesAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "backgroundColor":                      TypeOfAssignment = AssignmentType.BackgroundColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "framecolor":                      TypeOfAssignment = AssignmentType.FrameColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "alignments":                      TypeOfAssignment = AssignmentType.AlignmentsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "visibleRows":                      TypeOfAssignment = AssignmentType.VisibleRowsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "columns":                      TypeOfAssignment = AssignmentType.ColumnsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "rowHeight":                      TypeOfAssignment = AssignmentType.RowHeightAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "fillColor":                      TypeOfAssignment = AssignmentType.FillColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "selectionFillColor":                      TypeOfAssignment = AssignmentType.SelectionFillColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "cursor":                      TypeOfAssignment = AssignmentType.CursorAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "lineHeight":                      TypeOfAssignment = AssignmentType.LineHeightAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetL":                      TypeOfAssignment = AssignmentType.EdgeOffsetLAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetR":                      TypeOfAssignment = AssignmentType.EdgeOffsetRAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetT":                      TypeOfAssignment = AssignmentType.EdgeOffsetTAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetB":                      TypeOfAssignment = AssignmentType.EdgeOffsetBAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "foregroundImage":                      TypeOfAssignment = AssignmentType.ForegroundImageAssignment;                      Value = nodes[2].Token.Text;                      break;                  case "backgroundImage":                      TypeOfAssignment = AssignmentType.BackgroundImageAssignment;                      Value = nodes[2].Token.Text;                      break;                  case "value":                      TypeOfAssignment = AssignmentType.ValueAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "useBackgroundImage":                      TypeOfAssignment = AssignmentType.UseBackgroundImageAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "enabled":                      TypeOfAssignment = AssignmentType.EnabledAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "fittext":                      TypeOfAssignment = AssignmentType.FitTextAssignment;                      Value = (int)nodes[2].Token.Value;                      break;              }
Magic Number,UIParser.Nodes,AssignmentNode,C:\repos\Afr0_Project-Dollhouse\Other\libs\UIParser\UIParser\Nodes\AssignmentNode.cs,InitChildren,The following statement contains a magic number: switch(nodes[0].Token.Text)              {                  case "stringDir":                      TypeOfAssignment = AssignmentType.StringDirAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "stringTable":                      TypeOfAssignment = AssignmentType.StringTableAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "leftArrowImage":                      TypeOfAssignment = AssignmentType.LeftArrowImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "rightArrowImage":                      TypeOfAssignment = AssignmentType.RightArrowImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "tracking":                      TypeOfAssignment = AssignmentType.TrackingAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "trigger":                      TypeOfAssignment = AssignmentType.TriggerAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "image":                      TypeOfAssignment = AssignmentType.ImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "position":                      TypeOfAssignment = AssignmentType.PositionAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "size":                      TypeOfAssignment = AssignmentType.SizeAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "id":                      TypeOfAssignment = AssignmentType.IDAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "orientation":                      TypeOfAssignment = AssignmentType.OrientationAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "opaque":                      TypeOfAssignment = AssignmentType.OpaqueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "assetID":                      TypeOfAssignment = AssignmentType.AssetIDAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "stringIndex":                      TypeOfAssignment = AssignmentType.StringIndexAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "text":                      TypeOfAssignment = AssignmentType.TextAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "font":                      TypeOfAssignment = AssignmentType.FontAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "textColorSelected":                      TypeOfAssignment = AssignmentType.TextColorSelectedAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textColorHighlighted":                      TypeOfAssignment = AssignmentType.TextColorHighlightedAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textColorDisabled":                      TypeOfAssignment = AssignmentType.TextColorDisabledAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textButton":                      TypeOfAssignment = AssignmentType.TextButtonAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "color":                      TypeOfAssignment = AssignmentType.ColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "alignment":                      TypeOfAssignment = AssignmentType.AlignmentAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "backColor":                      TypeOfAssignment = AssignmentType.BackColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "frameOnFocus":                      TypeOfAssignment = AssignmentType.FrameOnFocusAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "transparent":                      TypeOfAssignment = AssignmentType.TransparentAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "capacity":                      TypeOfAssignment = AssignmentType.CapacityAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "lines":                      TypeOfAssignment = AssignmentType.LinesAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "flashOnEmpty":                      TypeOfAssignment = AssignmentType.FlashOnEmptyAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "thumbImageSize":                      TypeOfAssignment = AssignmentType.ThumbImageSizeAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "thumbImageOffsets":                      TypeOfAssignment = AssignmentType.ThumbImageOffsetsAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "thumbButtonImage":                      TypeOfAssignment = AssignmentType.ThumbButtonImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "wrapped":                      TypeOfAssignment = AssignmentType.WrappedAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "textColor":                      TypeOfAssignment = AssignmentType.TextColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "mode":                      TypeOfAssignment = AssignmentType.ModeAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "scrollBarImage":                      TypeOfAssignment = AssignmentType.ScrollBarImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "scrollBarGutter":                      TypeOfAssignment = AssignmentType.ScrollBarGutterAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "scrollBarType":                      TypeOfAssignment = AssignmentType.ScrollBarTypeAssignment;                      Value = Value = int.Parse(nodes[2].Token.Text);                      break;                  case "enableIME":                      TypeOfAssignment = AssignmentType.EnableIMEAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "highlighted":                      TypeOfAssignment = AssignmentType.HighlightedAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "minValue":                      TypeOfAssignment = AssignmentType.MinValueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "maxValue":                      TypeOfAssignment = AssignmentType.MaxValueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "pageSize":                      TypeOfAssignment = AssignmentType.PageSizeAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "cursorColor":                      TypeOfAssignment = AssignmentType.CursorColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "toolTip":                      TypeOfAssignment = AssignmentType.TooltipAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "tooltip":                      TypeOfAssignment = AssignmentType.TooltipAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "MouseTransparent":                      TypeOfAssignment = AssignmentType.MouseTransparentAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "imagestates":                      TypeOfAssignment = AssignmentType.ImageStatesAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "backgroundColor":                      TypeOfAssignment = AssignmentType.BackgroundColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "framecolor":                      TypeOfAssignment = AssignmentType.FrameColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "alignments":                      TypeOfAssignment = AssignmentType.AlignmentsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "visibleRows":                      TypeOfAssignment = AssignmentType.VisibleRowsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "columns":                      TypeOfAssignment = AssignmentType.ColumnsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "rowHeight":                      TypeOfAssignment = AssignmentType.RowHeightAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "fillColor":                      TypeOfAssignment = AssignmentType.FillColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "selectionFillColor":                      TypeOfAssignment = AssignmentType.SelectionFillColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "cursor":                      TypeOfAssignment = AssignmentType.CursorAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "lineHeight":                      TypeOfAssignment = AssignmentType.LineHeightAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetL":                      TypeOfAssignment = AssignmentType.EdgeOffsetLAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetR":                      TypeOfAssignment = AssignmentType.EdgeOffsetRAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetT":                      TypeOfAssignment = AssignmentType.EdgeOffsetTAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetB":                      TypeOfAssignment = AssignmentType.EdgeOffsetBAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "foregroundImage":                      TypeOfAssignment = AssignmentType.ForegroundImageAssignment;                      Value = nodes[2].Token.Text;                      break;                  case "backgroundImage":                      TypeOfAssignment = AssignmentType.BackgroundImageAssignment;                      Value = nodes[2].Token.Text;                      break;                  case "value":                      TypeOfAssignment = AssignmentType.ValueAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "useBackgroundImage":                      TypeOfAssignment = AssignmentType.UseBackgroundImageAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "enabled":                      TypeOfAssignment = AssignmentType.EnabledAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "fittext":                      TypeOfAssignment = AssignmentType.FitTextAssignment;                      Value = (int)nodes[2].Token.Value;                      break;              }
Magic Number,UIParser.Nodes,AssignmentNode,C:\repos\Afr0_Project-Dollhouse\Other\libs\UIParser\UIParser\Nodes\AssignmentNode.cs,InitChildren,The following statement contains a magic number: switch(nodes[0].Token.Text)              {                  case "stringDir":                      TypeOfAssignment = AssignmentType.StringDirAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "stringTable":                      TypeOfAssignment = AssignmentType.StringTableAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "leftArrowImage":                      TypeOfAssignment = AssignmentType.LeftArrowImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "rightArrowImage":                      TypeOfAssignment = AssignmentType.RightArrowImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "tracking":                      TypeOfAssignment = AssignmentType.TrackingAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "trigger":                      TypeOfAssignment = AssignmentType.TriggerAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "image":                      TypeOfAssignment = AssignmentType.ImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "position":                      TypeOfAssignment = AssignmentType.PositionAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "size":                      TypeOfAssignment = AssignmentType.SizeAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "id":                      TypeOfAssignment = AssignmentType.IDAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "orientation":                      TypeOfAssignment = AssignmentType.OrientationAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "opaque":                      TypeOfAssignment = AssignmentType.OpaqueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "assetID":                      TypeOfAssignment = AssignmentType.AssetIDAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "stringIndex":                      TypeOfAssignment = AssignmentType.StringIndexAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "text":                      TypeOfAssignment = AssignmentType.TextAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "font":                      TypeOfAssignment = AssignmentType.FontAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "textColorSelected":                      TypeOfAssignment = AssignmentType.TextColorSelectedAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textColorHighlighted":                      TypeOfAssignment = AssignmentType.TextColorHighlightedAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textColorDisabled":                      TypeOfAssignment = AssignmentType.TextColorDisabledAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textButton":                      TypeOfAssignment = AssignmentType.TextButtonAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "color":                      TypeOfAssignment = AssignmentType.ColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "alignment":                      TypeOfAssignment = AssignmentType.AlignmentAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "backColor":                      TypeOfAssignment = AssignmentType.BackColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "frameOnFocus":                      TypeOfAssignment = AssignmentType.FrameOnFocusAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "transparent":                      TypeOfAssignment = AssignmentType.TransparentAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "capacity":                      TypeOfAssignment = AssignmentType.CapacityAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "lines":                      TypeOfAssignment = AssignmentType.LinesAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "flashOnEmpty":                      TypeOfAssignment = AssignmentType.FlashOnEmptyAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "thumbImageSize":                      TypeOfAssignment = AssignmentType.ThumbImageSizeAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "thumbImageOffsets":                      TypeOfAssignment = AssignmentType.ThumbImageOffsetsAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "thumbButtonImage":                      TypeOfAssignment = AssignmentType.ThumbButtonImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "wrapped":                      TypeOfAssignment = AssignmentType.WrappedAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "textColor":                      TypeOfAssignment = AssignmentType.TextColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "mode":                      TypeOfAssignment = AssignmentType.ModeAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "scrollBarImage":                      TypeOfAssignment = AssignmentType.ScrollBarImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "scrollBarGutter":                      TypeOfAssignment = AssignmentType.ScrollBarGutterAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "scrollBarType":                      TypeOfAssignment = AssignmentType.ScrollBarTypeAssignment;                      Value = Value = int.Parse(nodes[2].Token.Text);                      break;                  case "enableIME":                      TypeOfAssignment = AssignmentType.EnableIMEAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "highlighted":                      TypeOfAssignment = AssignmentType.HighlightedAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "minValue":                      TypeOfAssignment = AssignmentType.MinValueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "maxValue":                      TypeOfAssignment = AssignmentType.MaxValueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "pageSize":                      TypeOfAssignment = AssignmentType.PageSizeAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "cursorColor":                      TypeOfAssignment = AssignmentType.CursorColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "toolTip":                      TypeOfAssignment = AssignmentType.TooltipAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "tooltip":                      TypeOfAssignment = AssignmentType.TooltipAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "MouseTransparent":                      TypeOfAssignment = AssignmentType.MouseTransparentAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "imagestates":                      TypeOfAssignment = AssignmentType.ImageStatesAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "backgroundColor":                      TypeOfAssignment = AssignmentType.BackgroundColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "framecolor":                      TypeOfAssignment = AssignmentType.FrameColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "alignments":                      TypeOfAssignment = AssignmentType.AlignmentsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "visibleRows":                      TypeOfAssignment = AssignmentType.VisibleRowsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "columns":                      TypeOfAssignment = AssignmentType.ColumnsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "rowHeight":                      TypeOfAssignment = AssignmentType.RowHeightAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "fillColor":                      TypeOfAssignment = AssignmentType.FillColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "selectionFillColor":                      TypeOfAssignment = AssignmentType.SelectionFillColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "cursor":                      TypeOfAssignment = AssignmentType.CursorAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "lineHeight":                      TypeOfAssignment = AssignmentType.LineHeightAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetL":                      TypeOfAssignment = AssignmentType.EdgeOffsetLAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetR":                      TypeOfAssignment = AssignmentType.EdgeOffsetRAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetT":                      TypeOfAssignment = AssignmentType.EdgeOffsetTAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetB":                      TypeOfAssignment = AssignmentType.EdgeOffsetBAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "foregroundImage":                      TypeOfAssignment = AssignmentType.ForegroundImageAssignment;                      Value = nodes[2].Token.Text;                      break;                  case "backgroundImage":                      TypeOfAssignment = AssignmentType.BackgroundImageAssignment;                      Value = nodes[2].Token.Text;                      break;                  case "value":                      TypeOfAssignment = AssignmentType.ValueAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "useBackgroundImage":                      TypeOfAssignment = AssignmentType.UseBackgroundImageAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "enabled":                      TypeOfAssignment = AssignmentType.EnabledAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "fittext":                      TypeOfAssignment = AssignmentType.FitTextAssignment;                      Value = (int)nodes[2].Token.Value;                      break;              }
Magic Number,UIParser.Nodes,AssignmentNode,C:\repos\Afr0_Project-Dollhouse\Other\libs\UIParser\UIParser\Nodes\AssignmentNode.cs,InitChildren,The following statement contains a magic number: switch(nodes[0].Token.Text)              {                  case "stringDir":                      TypeOfAssignment = AssignmentType.StringDirAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "stringTable":                      TypeOfAssignment = AssignmentType.StringTableAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "leftArrowImage":                      TypeOfAssignment = AssignmentType.LeftArrowImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "rightArrowImage":                      TypeOfAssignment = AssignmentType.RightArrowImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "tracking":                      TypeOfAssignment = AssignmentType.TrackingAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "trigger":                      TypeOfAssignment = AssignmentType.TriggerAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "image":                      TypeOfAssignment = AssignmentType.ImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "position":                      TypeOfAssignment = AssignmentType.PositionAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "size":                      TypeOfAssignment = AssignmentType.SizeAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "id":                      TypeOfAssignment = AssignmentType.IDAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "orientation":                      TypeOfAssignment = AssignmentType.OrientationAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "opaque":                      TypeOfAssignment = AssignmentType.OpaqueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "assetID":                      TypeOfAssignment = AssignmentType.AssetIDAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "stringIndex":                      TypeOfAssignment = AssignmentType.StringIndexAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "text":                      TypeOfAssignment = AssignmentType.TextAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "font":                      TypeOfAssignment = AssignmentType.FontAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "textColorSelected":                      TypeOfAssignment = AssignmentType.TextColorSelectedAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textColorHighlighted":                      TypeOfAssignment = AssignmentType.TextColorHighlightedAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textColorDisabled":                      TypeOfAssignment = AssignmentType.TextColorDisabledAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textButton":                      TypeOfAssignment = AssignmentType.TextButtonAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "color":                      TypeOfAssignment = AssignmentType.ColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "alignment":                      TypeOfAssignment = AssignmentType.AlignmentAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "backColor":                      TypeOfAssignment = AssignmentType.BackColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "frameOnFocus":                      TypeOfAssignment = AssignmentType.FrameOnFocusAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "transparent":                      TypeOfAssignment = AssignmentType.TransparentAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "capacity":                      TypeOfAssignment = AssignmentType.CapacityAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "lines":                      TypeOfAssignment = AssignmentType.LinesAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "flashOnEmpty":                      TypeOfAssignment = AssignmentType.FlashOnEmptyAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "thumbImageSize":                      TypeOfAssignment = AssignmentType.ThumbImageSizeAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "thumbImageOffsets":                      TypeOfAssignment = AssignmentType.ThumbImageOffsetsAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "thumbButtonImage":                      TypeOfAssignment = AssignmentType.ThumbButtonImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "wrapped":                      TypeOfAssignment = AssignmentType.WrappedAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "textColor":                      TypeOfAssignment = AssignmentType.TextColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "mode":                      TypeOfAssignment = AssignmentType.ModeAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "scrollBarImage":                      TypeOfAssignment = AssignmentType.ScrollBarImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "scrollBarGutter":                      TypeOfAssignment = AssignmentType.ScrollBarGutterAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "scrollBarType":                      TypeOfAssignment = AssignmentType.ScrollBarTypeAssignment;                      Value = Value = int.Parse(nodes[2].Token.Text);                      break;                  case "enableIME":                      TypeOfAssignment = AssignmentType.EnableIMEAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "highlighted":                      TypeOfAssignment = AssignmentType.HighlightedAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "minValue":                      TypeOfAssignment = AssignmentType.MinValueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "maxValue":                      TypeOfAssignment = AssignmentType.MaxValueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "pageSize":                      TypeOfAssignment = AssignmentType.PageSizeAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "cursorColor":                      TypeOfAssignment = AssignmentType.CursorColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "toolTip":                      TypeOfAssignment = AssignmentType.TooltipAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "tooltip":                      TypeOfAssignment = AssignmentType.TooltipAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "MouseTransparent":                      TypeOfAssignment = AssignmentType.MouseTransparentAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "imagestates":                      TypeOfAssignment = AssignmentType.ImageStatesAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "backgroundColor":                      TypeOfAssignment = AssignmentType.BackgroundColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "framecolor":                      TypeOfAssignment = AssignmentType.FrameColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "alignments":                      TypeOfAssignment = AssignmentType.AlignmentsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "visibleRows":                      TypeOfAssignment = AssignmentType.VisibleRowsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "columns":                      TypeOfAssignment = AssignmentType.ColumnsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "rowHeight":                      TypeOfAssignment = AssignmentType.RowHeightAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "fillColor":                      TypeOfAssignment = AssignmentType.FillColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "selectionFillColor":                      TypeOfAssignment = AssignmentType.SelectionFillColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "cursor":                      TypeOfAssignment = AssignmentType.CursorAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "lineHeight":                      TypeOfAssignment = AssignmentType.LineHeightAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetL":                      TypeOfAssignment = AssignmentType.EdgeOffsetLAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetR":                      TypeOfAssignment = AssignmentType.EdgeOffsetRAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetT":                      TypeOfAssignment = AssignmentType.EdgeOffsetTAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetB":                      TypeOfAssignment = AssignmentType.EdgeOffsetBAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "foregroundImage":                      TypeOfAssignment = AssignmentType.ForegroundImageAssignment;                      Value = nodes[2].Token.Text;                      break;                  case "backgroundImage":                      TypeOfAssignment = AssignmentType.BackgroundImageAssignment;                      Value = nodes[2].Token.Text;                      break;                  case "value":                      TypeOfAssignment = AssignmentType.ValueAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "useBackgroundImage":                      TypeOfAssignment = AssignmentType.UseBackgroundImageAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "enabled":                      TypeOfAssignment = AssignmentType.EnabledAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "fittext":                      TypeOfAssignment = AssignmentType.FitTextAssignment;                      Value = (int)nodes[2].Token.Value;                      break;              }
Magic Number,UIParser.Nodes,AssignmentNode,C:\repos\Afr0_Project-Dollhouse\Other\libs\UIParser\UIParser\Nodes\AssignmentNode.cs,InitChildren,The following statement contains a magic number: switch(nodes[0].Token.Text)              {                  case "stringDir":                      TypeOfAssignment = AssignmentType.StringDirAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "stringTable":                      TypeOfAssignment = AssignmentType.StringTableAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "leftArrowImage":                      TypeOfAssignment = AssignmentType.LeftArrowImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "rightArrowImage":                      TypeOfAssignment = AssignmentType.RightArrowImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "tracking":                      TypeOfAssignment = AssignmentType.TrackingAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "trigger":                      TypeOfAssignment = AssignmentType.TriggerAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "image":                      TypeOfAssignment = AssignmentType.ImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "position":                      TypeOfAssignment = AssignmentType.PositionAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "size":                      TypeOfAssignment = AssignmentType.SizeAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "id":                      TypeOfAssignment = AssignmentType.IDAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "orientation":                      TypeOfAssignment = AssignmentType.OrientationAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "opaque":                      TypeOfAssignment = AssignmentType.OpaqueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "assetID":                      TypeOfAssignment = AssignmentType.AssetIDAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "stringIndex":                      TypeOfAssignment = AssignmentType.StringIndexAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "text":                      TypeOfAssignment = AssignmentType.TextAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "font":                      TypeOfAssignment = AssignmentType.FontAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "textColorSelected":                      TypeOfAssignment = AssignmentType.TextColorSelectedAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textColorHighlighted":                      TypeOfAssignment = AssignmentType.TextColorHighlightedAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textColorDisabled":                      TypeOfAssignment = AssignmentType.TextColorDisabledAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textButton":                      TypeOfAssignment = AssignmentType.TextButtonAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "color":                      TypeOfAssignment = AssignmentType.ColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "alignment":                      TypeOfAssignment = AssignmentType.AlignmentAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "backColor":                      TypeOfAssignment = AssignmentType.BackColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "frameOnFocus":                      TypeOfAssignment = AssignmentType.FrameOnFocusAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "transparent":                      TypeOfAssignment = AssignmentType.TransparentAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "capacity":                      TypeOfAssignment = AssignmentType.CapacityAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "lines":                      TypeOfAssignment = AssignmentType.LinesAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "flashOnEmpty":                      TypeOfAssignment = AssignmentType.FlashOnEmptyAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "thumbImageSize":                      TypeOfAssignment = AssignmentType.ThumbImageSizeAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "thumbImageOffsets":                      TypeOfAssignment = AssignmentType.ThumbImageOffsetsAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "thumbButtonImage":                      TypeOfAssignment = AssignmentType.ThumbButtonImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "wrapped":                      TypeOfAssignment = AssignmentType.WrappedAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "textColor":                      TypeOfAssignment = AssignmentType.TextColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "mode":                      TypeOfAssignment = AssignmentType.ModeAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "scrollBarImage":                      TypeOfAssignment = AssignmentType.ScrollBarImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "scrollBarGutter":                      TypeOfAssignment = AssignmentType.ScrollBarGutterAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "scrollBarType":                      TypeOfAssignment = AssignmentType.ScrollBarTypeAssignment;                      Value = Value = int.Parse(nodes[2].Token.Text);                      break;                  case "enableIME":                      TypeOfAssignment = AssignmentType.EnableIMEAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "highlighted":                      TypeOfAssignment = AssignmentType.HighlightedAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "minValue":                      TypeOfAssignment = AssignmentType.MinValueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "maxValue":                      TypeOfAssignment = AssignmentType.MaxValueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "pageSize":                      TypeOfAssignment = AssignmentType.PageSizeAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "cursorColor":                      TypeOfAssignment = AssignmentType.CursorColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "toolTip":                      TypeOfAssignment = AssignmentType.TooltipAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "tooltip":                      TypeOfAssignment = AssignmentType.TooltipAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "MouseTransparent":                      TypeOfAssignment = AssignmentType.MouseTransparentAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "imagestates":                      TypeOfAssignment = AssignmentType.ImageStatesAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "backgroundColor":                      TypeOfAssignment = AssignmentType.BackgroundColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "framecolor":                      TypeOfAssignment = AssignmentType.FrameColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "alignments":                      TypeOfAssignment = AssignmentType.AlignmentsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "visibleRows":                      TypeOfAssignment = AssignmentType.VisibleRowsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "columns":                      TypeOfAssignment = AssignmentType.ColumnsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "rowHeight":                      TypeOfAssignment = AssignmentType.RowHeightAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "fillColor":                      TypeOfAssignment = AssignmentType.FillColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "selectionFillColor":                      TypeOfAssignment = AssignmentType.SelectionFillColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "cursor":                      TypeOfAssignment = AssignmentType.CursorAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "lineHeight":                      TypeOfAssignment = AssignmentType.LineHeightAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetL":                      TypeOfAssignment = AssignmentType.EdgeOffsetLAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetR":                      TypeOfAssignment = AssignmentType.EdgeOffsetRAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetT":                      TypeOfAssignment = AssignmentType.EdgeOffsetTAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetB":                      TypeOfAssignment = AssignmentType.EdgeOffsetBAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "foregroundImage":                      TypeOfAssignment = AssignmentType.ForegroundImageAssignment;                      Value = nodes[2].Token.Text;                      break;                  case "backgroundImage":                      TypeOfAssignment = AssignmentType.BackgroundImageAssignment;                      Value = nodes[2].Token.Text;                      break;                  case "value":                      TypeOfAssignment = AssignmentType.ValueAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "useBackgroundImage":                      TypeOfAssignment = AssignmentType.UseBackgroundImageAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "enabled":                      TypeOfAssignment = AssignmentType.EnabledAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "fittext":                      TypeOfAssignment = AssignmentType.FitTextAssignment;                      Value = (int)nodes[2].Token.Value;                      break;              }
Magic Number,UIParser.Nodes,AssignmentNode,C:\repos\Afr0_Project-Dollhouse\Other\libs\UIParser\UIParser\Nodes\AssignmentNode.cs,InitChildren,The following statement contains a magic number: switch(nodes[0].Token.Text)              {                  case "stringDir":                      TypeOfAssignment = AssignmentType.StringDirAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "stringTable":                      TypeOfAssignment = AssignmentType.StringTableAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "leftArrowImage":                      TypeOfAssignment = AssignmentType.LeftArrowImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "rightArrowImage":                      TypeOfAssignment = AssignmentType.RightArrowImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "tracking":                      TypeOfAssignment = AssignmentType.TrackingAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "trigger":                      TypeOfAssignment = AssignmentType.TriggerAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "image":                      TypeOfAssignment = AssignmentType.ImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "position":                      TypeOfAssignment = AssignmentType.PositionAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "size":                      TypeOfAssignment = AssignmentType.SizeAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "id":                      TypeOfAssignment = AssignmentType.IDAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "orientation":                      TypeOfAssignment = AssignmentType.OrientationAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "opaque":                      TypeOfAssignment = AssignmentType.OpaqueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "assetID":                      TypeOfAssignment = AssignmentType.AssetIDAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "stringIndex":                      TypeOfAssignment = AssignmentType.StringIndexAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "text":                      TypeOfAssignment = AssignmentType.TextAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "font":                      TypeOfAssignment = AssignmentType.FontAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "textColorSelected":                      TypeOfAssignment = AssignmentType.TextColorSelectedAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textColorHighlighted":                      TypeOfAssignment = AssignmentType.TextColorHighlightedAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textColorDisabled":                      TypeOfAssignment = AssignmentType.TextColorDisabledAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textButton":                      TypeOfAssignment = AssignmentType.TextButtonAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "color":                      TypeOfAssignment = AssignmentType.ColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "alignment":                      TypeOfAssignment = AssignmentType.AlignmentAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "backColor":                      TypeOfAssignment = AssignmentType.BackColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "frameOnFocus":                      TypeOfAssignment = AssignmentType.FrameOnFocusAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "transparent":                      TypeOfAssignment = AssignmentType.TransparentAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "capacity":                      TypeOfAssignment = AssignmentType.CapacityAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "lines":                      TypeOfAssignment = AssignmentType.LinesAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "flashOnEmpty":                      TypeOfAssignment = AssignmentType.FlashOnEmptyAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "thumbImageSize":                      TypeOfAssignment = AssignmentType.ThumbImageSizeAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "thumbImageOffsets":                      TypeOfAssignment = AssignmentType.ThumbImageOffsetsAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "thumbButtonImage":                      TypeOfAssignment = AssignmentType.ThumbButtonImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "wrapped":                      TypeOfAssignment = AssignmentType.WrappedAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "textColor":                      TypeOfAssignment = AssignmentType.TextColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "mode":                      TypeOfAssignment = AssignmentType.ModeAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "scrollBarImage":                      TypeOfAssignment = AssignmentType.ScrollBarImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "scrollBarGutter":                      TypeOfAssignment = AssignmentType.ScrollBarGutterAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "scrollBarType":                      TypeOfAssignment = AssignmentType.ScrollBarTypeAssignment;                      Value = Value = int.Parse(nodes[2].Token.Text);                      break;                  case "enableIME":                      TypeOfAssignment = AssignmentType.EnableIMEAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "highlighted":                      TypeOfAssignment = AssignmentType.HighlightedAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "minValue":                      TypeOfAssignment = AssignmentType.MinValueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "maxValue":                      TypeOfAssignment = AssignmentType.MaxValueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "pageSize":                      TypeOfAssignment = AssignmentType.PageSizeAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "cursorColor":                      TypeOfAssignment = AssignmentType.CursorColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "toolTip":                      TypeOfAssignment = AssignmentType.TooltipAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "tooltip":                      TypeOfAssignment = AssignmentType.TooltipAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "MouseTransparent":                      TypeOfAssignment = AssignmentType.MouseTransparentAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "imagestates":                      TypeOfAssignment = AssignmentType.ImageStatesAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "backgroundColor":                      TypeOfAssignment = AssignmentType.BackgroundColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "framecolor":                      TypeOfAssignment = AssignmentType.FrameColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "alignments":                      TypeOfAssignment = AssignmentType.AlignmentsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "visibleRows":                      TypeOfAssignment = AssignmentType.VisibleRowsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "columns":                      TypeOfAssignment = AssignmentType.ColumnsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "rowHeight":                      TypeOfAssignment = AssignmentType.RowHeightAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "fillColor":                      TypeOfAssignment = AssignmentType.FillColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "selectionFillColor":                      TypeOfAssignment = AssignmentType.SelectionFillColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "cursor":                      TypeOfAssignment = AssignmentType.CursorAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "lineHeight":                      TypeOfAssignment = AssignmentType.LineHeightAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetL":                      TypeOfAssignment = AssignmentType.EdgeOffsetLAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetR":                      TypeOfAssignment = AssignmentType.EdgeOffsetRAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetT":                      TypeOfAssignment = AssignmentType.EdgeOffsetTAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetB":                      TypeOfAssignment = AssignmentType.EdgeOffsetBAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "foregroundImage":                      TypeOfAssignment = AssignmentType.ForegroundImageAssignment;                      Value = nodes[2].Token.Text;                      break;                  case "backgroundImage":                      TypeOfAssignment = AssignmentType.BackgroundImageAssignment;                      Value = nodes[2].Token.Text;                      break;                  case "value":                      TypeOfAssignment = AssignmentType.ValueAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "useBackgroundImage":                      TypeOfAssignment = AssignmentType.UseBackgroundImageAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "enabled":                      TypeOfAssignment = AssignmentType.EnabledAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "fittext":                      TypeOfAssignment = AssignmentType.FitTextAssignment;                      Value = (int)nodes[2].Token.Value;                      break;              }
Magic Number,UIParser.Nodes,AssignmentNode,C:\repos\Afr0_Project-Dollhouse\Other\libs\UIParser\UIParser\Nodes\AssignmentNode.cs,InitChildren,The following statement contains a magic number: switch(nodes[0].Token.Text)              {                  case "stringDir":                      TypeOfAssignment = AssignmentType.StringDirAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "stringTable":                      TypeOfAssignment = AssignmentType.StringTableAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "leftArrowImage":                      TypeOfAssignment = AssignmentType.LeftArrowImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "rightArrowImage":                      TypeOfAssignment = AssignmentType.RightArrowImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "tracking":                      TypeOfAssignment = AssignmentType.TrackingAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "trigger":                      TypeOfAssignment = AssignmentType.TriggerAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "image":                      TypeOfAssignment = AssignmentType.ImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "position":                      TypeOfAssignment = AssignmentType.PositionAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "size":                      TypeOfAssignment = AssignmentType.SizeAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "id":                      TypeOfAssignment = AssignmentType.IDAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "orientation":                      TypeOfAssignment = AssignmentType.OrientationAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "opaque":                      TypeOfAssignment = AssignmentType.OpaqueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "assetID":                      TypeOfAssignment = AssignmentType.AssetIDAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "stringIndex":                      TypeOfAssignment = AssignmentType.StringIndexAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "text":                      TypeOfAssignment = AssignmentType.TextAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "font":                      TypeOfAssignment = AssignmentType.FontAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "textColorSelected":                      TypeOfAssignment = AssignmentType.TextColorSelectedAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textColorHighlighted":                      TypeOfAssignment = AssignmentType.TextColorHighlightedAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textColorDisabled":                      TypeOfAssignment = AssignmentType.TextColorDisabledAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textButton":                      TypeOfAssignment = AssignmentType.TextButtonAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "color":                      TypeOfAssignment = AssignmentType.ColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "alignment":                      TypeOfAssignment = AssignmentType.AlignmentAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "backColor":                      TypeOfAssignment = AssignmentType.BackColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "frameOnFocus":                      TypeOfAssignment = AssignmentType.FrameOnFocusAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "transparent":                      TypeOfAssignment = AssignmentType.TransparentAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "capacity":                      TypeOfAssignment = AssignmentType.CapacityAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "lines":                      TypeOfAssignment = AssignmentType.LinesAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "flashOnEmpty":                      TypeOfAssignment = AssignmentType.FlashOnEmptyAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "thumbImageSize":                      TypeOfAssignment = AssignmentType.ThumbImageSizeAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "thumbImageOffsets":                      TypeOfAssignment = AssignmentType.ThumbImageOffsetsAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "thumbButtonImage":                      TypeOfAssignment = AssignmentType.ThumbButtonImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "wrapped":                      TypeOfAssignment = AssignmentType.WrappedAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "textColor":                      TypeOfAssignment = AssignmentType.TextColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "mode":                      TypeOfAssignment = AssignmentType.ModeAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "scrollBarImage":                      TypeOfAssignment = AssignmentType.ScrollBarImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "scrollBarGutter":                      TypeOfAssignment = AssignmentType.ScrollBarGutterAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "scrollBarType":                      TypeOfAssignment = AssignmentType.ScrollBarTypeAssignment;                      Value = Value = int.Parse(nodes[2].Token.Text);                      break;                  case "enableIME":                      TypeOfAssignment = AssignmentType.EnableIMEAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "highlighted":                      TypeOfAssignment = AssignmentType.HighlightedAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "minValue":                      TypeOfAssignment = AssignmentType.MinValueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "maxValue":                      TypeOfAssignment = AssignmentType.MaxValueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "pageSize":                      TypeOfAssignment = AssignmentType.PageSizeAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "cursorColor":                      TypeOfAssignment = AssignmentType.CursorColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "toolTip":                      TypeOfAssignment = AssignmentType.TooltipAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "tooltip":                      TypeOfAssignment = AssignmentType.TooltipAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "MouseTransparent":                      TypeOfAssignment = AssignmentType.MouseTransparentAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "imagestates":                      TypeOfAssignment = AssignmentType.ImageStatesAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "backgroundColor":                      TypeOfAssignment = AssignmentType.BackgroundColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "framecolor":                      TypeOfAssignment = AssignmentType.FrameColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "alignments":                      TypeOfAssignment = AssignmentType.AlignmentsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "visibleRows":                      TypeOfAssignment = AssignmentType.VisibleRowsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "columns":                      TypeOfAssignment = AssignmentType.ColumnsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "rowHeight":                      TypeOfAssignment = AssignmentType.RowHeightAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "fillColor":                      TypeOfAssignment = AssignmentType.FillColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "selectionFillColor":                      TypeOfAssignment = AssignmentType.SelectionFillColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "cursor":                      TypeOfAssignment = AssignmentType.CursorAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "lineHeight":                      TypeOfAssignment = AssignmentType.LineHeightAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetL":                      TypeOfAssignment = AssignmentType.EdgeOffsetLAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetR":                      TypeOfAssignment = AssignmentType.EdgeOffsetRAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetT":                      TypeOfAssignment = AssignmentType.EdgeOffsetTAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetB":                      TypeOfAssignment = AssignmentType.EdgeOffsetBAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "foregroundImage":                      TypeOfAssignment = AssignmentType.ForegroundImageAssignment;                      Value = nodes[2].Token.Text;                      break;                  case "backgroundImage":                      TypeOfAssignment = AssignmentType.BackgroundImageAssignment;                      Value = nodes[2].Token.Text;                      break;                  case "value":                      TypeOfAssignment = AssignmentType.ValueAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "useBackgroundImage":                      TypeOfAssignment = AssignmentType.UseBackgroundImageAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "enabled":                      TypeOfAssignment = AssignmentType.EnabledAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "fittext":                      TypeOfAssignment = AssignmentType.FitTextAssignment;                      Value = (int)nodes[2].Token.Value;                      break;              }
Magic Number,UIParser.Nodes,AssignmentNode,C:\repos\Afr0_Project-Dollhouse\Other\libs\UIParser\UIParser\Nodes\AssignmentNode.cs,InitChildren,The following statement contains a magic number: switch(nodes[0].Token.Text)              {                  case "stringDir":                      TypeOfAssignment = AssignmentType.StringDirAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "stringTable":                      TypeOfAssignment = AssignmentType.StringTableAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "leftArrowImage":                      TypeOfAssignment = AssignmentType.LeftArrowImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "rightArrowImage":                      TypeOfAssignment = AssignmentType.RightArrowImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "tracking":                      TypeOfAssignment = AssignmentType.TrackingAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "trigger":                      TypeOfAssignment = AssignmentType.TriggerAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "image":                      TypeOfAssignment = AssignmentType.ImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "position":                      TypeOfAssignment = AssignmentType.PositionAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "size":                      TypeOfAssignment = AssignmentType.SizeAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "id":                      TypeOfAssignment = AssignmentType.IDAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "orientation":                      TypeOfAssignment = AssignmentType.OrientationAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "opaque":                      TypeOfAssignment = AssignmentType.OpaqueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "assetID":                      TypeOfAssignment = AssignmentType.AssetIDAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "stringIndex":                      TypeOfAssignment = AssignmentType.StringIndexAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "text":                      TypeOfAssignment = AssignmentType.TextAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "font":                      TypeOfAssignment = AssignmentType.FontAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "textColorSelected":                      TypeOfAssignment = AssignmentType.TextColorSelectedAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textColorHighlighted":                      TypeOfAssignment = AssignmentType.TextColorHighlightedAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textColorDisabled":                      TypeOfAssignment = AssignmentType.TextColorDisabledAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textButton":                      TypeOfAssignment = AssignmentType.TextButtonAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "color":                      TypeOfAssignment = AssignmentType.ColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "alignment":                      TypeOfAssignment = AssignmentType.AlignmentAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "backColor":                      TypeOfAssignment = AssignmentType.BackColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "frameOnFocus":                      TypeOfAssignment = AssignmentType.FrameOnFocusAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "transparent":                      TypeOfAssignment = AssignmentType.TransparentAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "capacity":                      TypeOfAssignment = AssignmentType.CapacityAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "lines":                      TypeOfAssignment = AssignmentType.LinesAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "flashOnEmpty":                      TypeOfAssignment = AssignmentType.FlashOnEmptyAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "thumbImageSize":                      TypeOfAssignment = AssignmentType.ThumbImageSizeAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "thumbImageOffsets":                      TypeOfAssignment = AssignmentType.ThumbImageOffsetsAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "thumbButtonImage":                      TypeOfAssignment = AssignmentType.ThumbButtonImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "wrapped":                      TypeOfAssignment = AssignmentType.WrappedAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "textColor":                      TypeOfAssignment = AssignmentType.TextColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "mode":                      TypeOfAssignment = AssignmentType.ModeAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "scrollBarImage":                      TypeOfAssignment = AssignmentType.ScrollBarImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "scrollBarGutter":                      TypeOfAssignment = AssignmentType.ScrollBarGutterAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "scrollBarType":                      TypeOfAssignment = AssignmentType.ScrollBarTypeAssignment;                      Value = Value = int.Parse(nodes[2].Token.Text);                      break;                  case "enableIME":                      TypeOfAssignment = AssignmentType.EnableIMEAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "highlighted":                      TypeOfAssignment = AssignmentType.HighlightedAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "minValue":                      TypeOfAssignment = AssignmentType.MinValueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "maxValue":                      TypeOfAssignment = AssignmentType.MaxValueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "pageSize":                      TypeOfAssignment = AssignmentType.PageSizeAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "cursorColor":                      TypeOfAssignment = AssignmentType.CursorColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "toolTip":                      TypeOfAssignment = AssignmentType.TooltipAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "tooltip":                      TypeOfAssignment = AssignmentType.TooltipAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "MouseTransparent":                      TypeOfAssignment = AssignmentType.MouseTransparentAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "imagestates":                      TypeOfAssignment = AssignmentType.ImageStatesAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "backgroundColor":                      TypeOfAssignment = AssignmentType.BackgroundColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "framecolor":                      TypeOfAssignment = AssignmentType.FrameColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "alignments":                      TypeOfAssignment = AssignmentType.AlignmentsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "visibleRows":                      TypeOfAssignment = AssignmentType.VisibleRowsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "columns":                      TypeOfAssignment = AssignmentType.ColumnsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "rowHeight":                      TypeOfAssignment = AssignmentType.RowHeightAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "fillColor":                      TypeOfAssignment = AssignmentType.FillColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "selectionFillColor":                      TypeOfAssignment = AssignmentType.SelectionFillColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "cursor":                      TypeOfAssignment = AssignmentType.CursorAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "lineHeight":                      TypeOfAssignment = AssignmentType.LineHeightAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetL":                      TypeOfAssignment = AssignmentType.EdgeOffsetLAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetR":                      TypeOfAssignment = AssignmentType.EdgeOffsetRAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetT":                      TypeOfAssignment = AssignmentType.EdgeOffsetTAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetB":                      TypeOfAssignment = AssignmentType.EdgeOffsetBAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "foregroundImage":                      TypeOfAssignment = AssignmentType.ForegroundImageAssignment;                      Value = nodes[2].Token.Text;                      break;                  case "backgroundImage":                      TypeOfAssignment = AssignmentType.BackgroundImageAssignment;                      Value = nodes[2].Token.Text;                      break;                  case "value":                      TypeOfAssignment = AssignmentType.ValueAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "useBackgroundImage":                      TypeOfAssignment = AssignmentType.UseBackgroundImageAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "enabled":                      TypeOfAssignment = AssignmentType.EnabledAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "fittext":                      TypeOfAssignment = AssignmentType.FitTextAssignment;                      Value = (int)nodes[2].Token.Value;                      break;              }
Magic Number,UIParser.Nodes,AssignmentNode,C:\repos\Afr0_Project-Dollhouse\Other\libs\UIParser\UIParser\Nodes\AssignmentNode.cs,InitChildren,The following statement contains a magic number: switch(nodes[0].Token.Text)              {                  case "stringDir":                      TypeOfAssignment = AssignmentType.StringDirAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "stringTable":                      TypeOfAssignment = AssignmentType.StringTableAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "leftArrowImage":                      TypeOfAssignment = AssignmentType.LeftArrowImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "rightArrowImage":                      TypeOfAssignment = AssignmentType.RightArrowImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "tracking":                      TypeOfAssignment = AssignmentType.TrackingAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "trigger":                      TypeOfAssignment = AssignmentType.TriggerAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "image":                      TypeOfAssignment = AssignmentType.ImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "position":                      TypeOfAssignment = AssignmentType.PositionAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "size":                      TypeOfAssignment = AssignmentType.SizeAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "id":                      TypeOfAssignment = AssignmentType.IDAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "orientation":                      TypeOfAssignment = AssignmentType.OrientationAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "opaque":                      TypeOfAssignment = AssignmentType.OpaqueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "assetID":                      TypeOfAssignment = AssignmentType.AssetIDAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "stringIndex":                      TypeOfAssignment = AssignmentType.StringIndexAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "text":                      TypeOfAssignment = AssignmentType.TextAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "font":                      TypeOfAssignment = AssignmentType.FontAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "textColorSelected":                      TypeOfAssignment = AssignmentType.TextColorSelectedAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textColorHighlighted":                      TypeOfAssignment = AssignmentType.TextColorHighlightedAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textColorDisabled":                      TypeOfAssignment = AssignmentType.TextColorDisabledAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textButton":                      TypeOfAssignment = AssignmentType.TextButtonAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "color":                      TypeOfAssignment = AssignmentType.ColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "alignment":                      TypeOfAssignment = AssignmentType.AlignmentAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "backColor":                      TypeOfAssignment = AssignmentType.BackColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "frameOnFocus":                      TypeOfAssignment = AssignmentType.FrameOnFocusAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "transparent":                      TypeOfAssignment = AssignmentType.TransparentAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "capacity":                      TypeOfAssignment = AssignmentType.CapacityAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "lines":                      TypeOfAssignment = AssignmentType.LinesAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "flashOnEmpty":                      TypeOfAssignment = AssignmentType.FlashOnEmptyAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "thumbImageSize":                      TypeOfAssignment = AssignmentType.ThumbImageSizeAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "thumbImageOffsets":                      TypeOfAssignment = AssignmentType.ThumbImageOffsetsAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "thumbButtonImage":                      TypeOfAssignment = AssignmentType.ThumbButtonImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "wrapped":                      TypeOfAssignment = AssignmentType.WrappedAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "textColor":                      TypeOfAssignment = AssignmentType.TextColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "mode":                      TypeOfAssignment = AssignmentType.ModeAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "scrollBarImage":                      TypeOfAssignment = AssignmentType.ScrollBarImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "scrollBarGutter":                      TypeOfAssignment = AssignmentType.ScrollBarGutterAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "scrollBarType":                      TypeOfAssignment = AssignmentType.ScrollBarTypeAssignment;                      Value = Value = int.Parse(nodes[2].Token.Text);                      break;                  case "enableIME":                      TypeOfAssignment = AssignmentType.EnableIMEAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "highlighted":                      TypeOfAssignment = AssignmentType.HighlightedAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "minValue":                      TypeOfAssignment = AssignmentType.MinValueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "maxValue":                      TypeOfAssignment = AssignmentType.MaxValueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "pageSize":                      TypeOfAssignment = AssignmentType.PageSizeAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "cursorColor":                      TypeOfAssignment = AssignmentType.CursorColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "toolTip":                      TypeOfAssignment = AssignmentType.TooltipAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "tooltip":                      TypeOfAssignment = AssignmentType.TooltipAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "MouseTransparent":                      TypeOfAssignment = AssignmentType.MouseTransparentAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "imagestates":                      TypeOfAssignment = AssignmentType.ImageStatesAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "backgroundColor":                      TypeOfAssignment = AssignmentType.BackgroundColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "framecolor":                      TypeOfAssignment = AssignmentType.FrameColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "alignments":                      TypeOfAssignment = AssignmentType.AlignmentsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "visibleRows":                      TypeOfAssignment = AssignmentType.VisibleRowsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "columns":                      TypeOfAssignment = AssignmentType.ColumnsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "rowHeight":                      TypeOfAssignment = AssignmentType.RowHeightAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "fillColor":                      TypeOfAssignment = AssignmentType.FillColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "selectionFillColor":                      TypeOfAssignment = AssignmentType.SelectionFillColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "cursor":                      TypeOfAssignment = AssignmentType.CursorAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "lineHeight":                      TypeOfAssignment = AssignmentType.LineHeightAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetL":                      TypeOfAssignment = AssignmentType.EdgeOffsetLAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetR":                      TypeOfAssignment = AssignmentType.EdgeOffsetRAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetT":                      TypeOfAssignment = AssignmentType.EdgeOffsetTAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetB":                      TypeOfAssignment = AssignmentType.EdgeOffsetBAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "foregroundImage":                      TypeOfAssignment = AssignmentType.ForegroundImageAssignment;                      Value = nodes[2].Token.Text;                      break;                  case "backgroundImage":                      TypeOfAssignment = AssignmentType.BackgroundImageAssignment;                      Value = nodes[2].Token.Text;                      break;                  case "value":                      TypeOfAssignment = AssignmentType.ValueAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "useBackgroundImage":                      TypeOfAssignment = AssignmentType.UseBackgroundImageAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "enabled":                      TypeOfAssignment = AssignmentType.EnabledAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "fittext":                      TypeOfAssignment = AssignmentType.FitTextAssignment;                      Value = (int)nodes[2].Token.Value;                      break;              }
Magic Number,UIParser.Nodes,AssignmentNode,C:\repos\Afr0_Project-Dollhouse\Other\libs\UIParser\UIParser\Nodes\AssignmentNode.cs,InitChildren,The following statement contains a magic number: switch(nodes[0].Token.Text)              {                  case "stringDir":                      TypeOfAssignment = AssignmentType.StringDirAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "stringTable":                      TypeOfAssignment = AssignmentType.StringTableAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "leftArrowImage":                      TypeOfAssignment = AssignmentType.LeftArrowImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "rightArrowImage":                      TypeOfAssignment = AssignmentType.RightArrowImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "tracking":                      TypeOfAssignment = AssignmentType.TrackingAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "trigger":                      TypeOfAssignment = AssignmentType.TriggerAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "image":                      TypeOfAssignment = AssignmentType.ImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "position":                      TypeOfAssignment = AssignmentType.PositionAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "size":                      TypeOfAssignment = AssignmentType.SizeAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "id":                      TypeOfAssignment = AssignmentType.IDAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "orientation":                      TypeOfAssignment = AssignmentType.OrientationAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "opaque":                      TypeOfAssignment = AssignmentType.OpaqueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "assetID":                      TypeOfAssignment = AssignmentType.AssetIDAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "stringIndex":                      TypeOfAssignment = AssignmentType.StringIndexAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "text":                      TypeOfAssignment = AssignmentType.TextAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "font":                      TypeOfAssignment = AssignmentType.FontAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "textColorSelected":                      TypeOfAssignment = AssignmentType.TextColorSelectedAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textColorHighlighted":                      TypeOfAssignment = AssignmentType.TextColorHighlightedAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textColorDisabled":                      TypeOfAssignment = AssignmentType.TextColorDisabledAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textButton":                      TypeOfAssignment = AssignmentType.TextButtonAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "color":                      TypeOfAssignment = AssignmentType.ColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "alignment":                      TypeOfAssignment = AssignmentType.AlignmentAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "backColor":                      TypeOfAssignment = AssignmentType.BackColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "frameOnFocus":                      TypeOfAssignment = AssignmentType.FrameOnFocusAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "transparent":                      TypeOfAssignment = AssignmentType.TransparentAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "capacity":                      TypeOfAssignment = AssignmentType.CapacityAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "lines":                      TypeOfAssignment = AssignmentType.LinesAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "flashOnEmpty":                      TypeOfAssignment = AssignmentType.FlashOnEmptyAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "thumbImageSize":                      TypeOfAssignment = AssignmentType.ThumbImageSizeAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "thumbImageOffsets":                      TypeOfAssignment = AssignmentType.ThumbImageOffsetsAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "thumbButtonImage":                      TypeOfAssignment = AssignmentType.ThumbButtonImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "wrapped":                      TypeOfAssignment = AssignmentType.WrappedAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "textColor":                      TypeOfAssignment = AssignmentType.TextColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "mode":                      TypeOfAssignment = AssignmentType.ModeAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "scrollBarImage":                      TypeOfAssignment = AssignmentType.ScrollBarImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "scrollBarGutter":                      TypeOfAssignment = AssignmentType.ScrollBarGutterAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "scrollBarType":                      TypeOfAssignment = AssignmentType.ScrollBarTypeAssignment;                      Value = Value = int.Parse(nodes[2].Token.Text);                      break;                  case "enableIME":                      TypeOfAssignment = AssignmentType.EnableIMEAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "highlighted":                      TypeOfAssignment = AssignmentType.HighlightedAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "minValue":                      TypeOfAssignment = AssignmentType.MinValueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "maxValue":                      TypeOfAssignment = AssignmentType.MaxValueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "pageSize":                      TypeOfAssignment = AssignmentType.PageSizeAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "cursorColor":                      TypeOfAssignment = AssignmentType.CursorColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "toolTip":                      TypeOfAssignment = AssignmentType.TooltipAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "tooltip":                      TypeOfAssignment = AssignmentType.TooltipAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "MouseTransparent":                      TypeOfAssignment = AssignmentType.MouseTransparentAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "imagestates":                      TypeOfAssignment = AssignmentType.ImageStatesAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "backgroundColor":                      TypeOfAssignment = AssignmentType.BackgroundColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "framecolor":                      TypeOfAssignment = AssignmentType.FrameColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "alignments":                      TypeOfAssignment = AssignmentType.AlignmentsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "visibleRows":                      TypeOfAssignment = AssignmentType.VisibleRowsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "columns":                      TypeOfAssignment = AssignmentType.ColumnsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "rowHeight":                      TypeOfAssignment = AssignmentType.RowHeightAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "fillColor":                      TypeOfAssignment = AssignmentType.FillColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "selectionFillColor":                      TypeOfAssignment = AssignmentType.SelectionFillColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "cursor":                      TypeOfAssignment = AssignmentType.CursorAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "lineHeight":                      TypeOfAssignment = AssignmentType.LineHeightAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetL":                      TypeOfAssignment = AssignmentType.EdgeOffsetLAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetR":                      TypeOfAssignment = AssignmentType.EdgeOffsetRAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetT":                      TypeOfAssignment = AssignmentType.EdgeOffsetTAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetB":                      TypeOfAssignment = AssignmentType.EdgeOffsetBAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "foregroundImage":                      TypeOfAssignment = AssignmentType.ForegroundImageAssignment;                      Value = nodes[2].Token.Text;                      break;                  case "backgroundImage":                      TypeOfAssignment = AssignmentType.BackgroundImageAssignment;                      Value = nodes[2].Token.Text;                      break;                  case "value":                      TypeOfAssignment = AssignmentType.ValueAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "useBackgroundImage":                      TypeOfAssignment = AssignmentType.UseBackgroundImageAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "enabled":                      TypeOfAssignment = AssignmentType.EnabledAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "fittext":                      TypeOfAssignment = AssignmentType.FitTextAssignment;                      Value = (int)nodes[2].Token.Value;                      break;              }
Magic Number,UIParser.Nodes,AssignmentNode,C:\repos\Afr0_Project-Dollhouse\Other\libs\UIParser\UIParser\Nodes\AssignmentNode.cs,InitChildren,The following statement contains a magic number: switch(nodes[0].Token.Text)              {                  case "stringDir":                      TypeOfAssignment = AssignmentType.StringDirAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "stringTable":                      TypeOfAssignment = AssignmentType.StringTableAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "leftArrowImage":                      TypeOfAssignment = AssignmentType.LeftArrowImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "rightArrowImage":                      TypeOfAssignment = AssignmentType.RightArrowImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "tracking":                      TypeOfAssignment = AssignmentType.TrackingAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "trigger":                      TypeOfAssignment = AssignmentType.TriggerAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "image":                      TypeOfAssignment = AssignmentType.ImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "position":                      TypeOfAssignment = AssignmentType.PositionAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "size":                      TypeOfAssignment = AssignmentType.SizeAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "id":                      TypeOfAssignment = AssignmentType.IDAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "orientation":                      TypeOfAssignment = AssignmentType.OrientationAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "opaque":                      TypeOfAssignment = AssignmentType.OpaqueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "assetID":                      TypeOfAssignment = AssignmentType.AssetIDAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "stringIndex":                      TypeOfAssignment = AssignmentType.StringIndexAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "text":                      TypeOfAssignment = AssignmentType.TextAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "font":                      TypeOfAssignment = AssignmentType.FontAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "textColorSelected":                      TypeOfAssignment = AssignmentType.TextColorSelectedAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textColorHighlighted":                      TypeOfAssignment = AssignmentType.TextColorHighlightedAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textColorDisabled":                      TypeOfAssignment = AssignmentType.TextColorDisabledAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textButton":                      TypeOfAssignment = AssignmentType.TextButtonAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "color":                      TypeOfAssignment = AssignmentType.ColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "alignment":                      TypeOfAssignment = AssignmentType.AlignmentAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "backColor":                      TypeOfAssignment = AssignmentType.BackColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "frameOnFocus":                      TypeOfAssignment = AssignmentType.FrameOnFocusAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "transparent":                      TypeOfAssignment = AssignmentType.TransparentAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "capacity":                      TypeOfAssignment = AssignmentType.CapacityAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "lines":                      TypeOfAssignment = AssignmentType.LinesAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "flashOnEmpty":                      TypeOfAssignment = AssignmentType.FlashOnEmptyAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "thumbImageSize":                      TypeOfAssignment = AssignmentType.ThumbImageSizeAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "thumbImageOffsets":                      TypeOfAssignment = AssignmentType.ThumbImageOffsetsAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "thumbButtonImage":                      TypeOfAssignment = AssignmentType.ThumbButtonImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "wrapped":                      TypeOfAssignment = AssignmentType.WrappedAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "textColor":                      TypeOfAssignment = AssignmentType.TextColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "mode":                      TypeOfAssignment = AssignmentType.ModeAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "scrollBarImage":                      TypeOfAssignment = AssignmentType.ScrollBarImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "scrollBarGutter":                      TypeOfAssignment = AssignmentType.ScrollBarGutterAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "scrollBarType":                      TypeOfAssignment = AssignmentType.ScrollBarTypeAssignment;                      Value = Value = int.Parse(nodes[2].Token.Text);                      break;                  case "enableIME":                      TypeOfAssignment = AssignmentType.EnableIMEAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "highlighted":                      TypeOfAssignment = AssignmentType.HighlightedAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "minValue":                      TypeOfAssignment = AssignmentType.MinValueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "maxValue":                      TypeOfAssignment = AssignmentType.MaxValueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "pageSize":                      TypeOfAssignment = AssignmentType.PageSizeAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "cursorColor":                      TypeOfAssignment = AssignmentType.CursorColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "toolTip":                      TypeOfAssignment = AssignmentType.TooltipAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "tooltip":                      TypeOfAssignment = AssignmentType.TooltipAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "MouseTransparent":                      TypeOfAssignment = AssignmentType.MouseTransparentAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "imagestates":                      TypeOfAssignment = AssignmentType.ImageStatesAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "backgroundColor":                      TypeOfAssignment = AssignmentType.BackgroundColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "framecolor":                      TypeOfAssignment = AssignmentType.FrameColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "alignments":                      TypeOfAssignment = AssignmentType.AlignmentsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "visibleRows":                      TypeOfAssignment = AssignmentType.VisibleRowsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "columns":                      TypeOfAssignment = AssignmentType.ColumnsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "rowHeight":                      TypeOfAssignment = AssignmentType.RowHeightAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "fillColor":                      TypeOfAssignment = AssignmentType.FillColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "selectionFillColor":                      TypeOfAssignment = AssignmentType.SelectionFillColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "cursor":                      TypeOfAssignment = AssignmentType.CursorAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "lineHeight":                      TypeOfAssignment = AssignmentType.LineHeightAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetL":                      TypeOfAssignment = AssignmentType.EdgeOffsetLAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetR":                      TypeOfAssignment = AssignmentType.EdgeOffsetRAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetT":                      TypeOfAssignment = AssignmentType.EdgeOffsetTAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetB":                      TypeOfAssignment = AssignmentType.EdgeOffsetBAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "foregroundImage":                      TypeOfAssignment = AssignmentType.ForegroundImageAssignment;                      Value = nodes[2].Token.Text;                      break;                  case "backgroundImage":                      TypeOfAssignment = AssignmentType.BackgroundImageAssignment;                      Value = nodes[2].Token.Text;                      break;                  case "value":                      TypeOfAssignment = AssignmentType.ValueAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "useBackgroundImage":                      TypeOfAssignment = AssignmentType.UseBackgroundImageAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "enabled":                      TypeOfAssignment = AssignmentType.EnabledAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "fittext":                      TypeOfAssignment = AssignmentType.FitTextAssignment;                      Value = (int)nodes[2].Token.Value;                      break;              }
Magic Number,UIParser.Nodes,AssignmentNode,C:\repos\Afr0_Project-Dollhouse\Other\libs\UIParser\UIParser\Nodes\AssignmentNode.cs,InitChildren,The following statement contains a magic number: switch(nodes[0].Token.Text)              {                  case "stringDir":                      TypeOfAssignment = AssignmentType.StringDirAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "stringTable":                      TypeOfAssignment = AssignmentType.StringTableAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "leftArrowImage":                      TypeOfAssignment = AssignmentType.LeftArrowImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "rightArrowImage":                      TypeOfAssignment = AssignmentType.RightArrowImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "tracking":                      TypeOfAssignment = AssignmentType.TrackingAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "trigger":                      TypeOfAssignment = AssignmentType.TriggerAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "image":                      TypeOfAssignment = AssignmentType.ImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "position":                      TypeOfAssignment = AssignmentType.PositionAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "size":                      TypeOfAssignment = AssignmentType.SizeAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "id":                      TypeOfAssignment = AssignmentType.IDAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "orientation":                      TypeOfAssignment = AssignmentType.OrientationAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "opaque":                      TypeOfAssignment = AssignmentType.OpaqueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "assetID":                      TypeOfAssignment = AssignmentType.AssetIDAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "stringIndex":                      TypeOfAssignment = AssignmentType.StringIndexAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "text":                      TypeOfAssignment = AssignmentType.TextAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "font":                      TypeOfAssignment = AssignmentType.FontAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "textColorSelected":                      TypeOfAssignment = AssignmentType.TextColorSelectedAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textColorHighlighted":                      TypeOfAssignment = AssignmentType.TextColorHighlightedAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textColorDisabled":                      TypeOfAssignment = AssignmentType.TextColorDisabledAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textButton":                      TypeOfAssignment = AssignmentType.TextButtonAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "color":                      TypeOfAssignment = AssignmentType.ColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "alignment":                      TypeOfAssignment = AssignmentType.AlignmentAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "backColor":                      TypeOfAssignment = AssignmentType.BackColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "frameOnFocus":                      TypeOfAssignment = AssignmentType.FrameOnFocusAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "transparent":                      TypeOfAssignment = AssignmentType.TransparentAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "capacity":                      TypeOfAssignment = AssignmentType.CapacityAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "lines":                      TypeOfAssignment = AssignmentType.LinesAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "flashOnEmpty":                      TypeOfAssignment = AssignmentType.FlashOnEmptyAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "thumbImageSize":                      TypeOfAssignment = AssignmentType.ThumbImageSizeAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "thumbImageOffsets":                      TypeOfAssignment = AssignmentType.ThumbImageOffsetsAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "thumbButtonImage":                      TypeOfAssignment = AssignmentType.ThumbButtonImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "wrapped":                      TypeOfAssignment = AssignmentType.WrappedAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "textColor":                      TypeOfAssignment = AssignmentType.TextColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "mode":                      TypeOfAssignment = AssignmentType.ModeAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "scrollBarImage":                      TypeOfAssignment = AssignmentType.ScrollBarImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "scrollBarGutter":                      TypeOfAssignment = AssignmentType.ScrollBarGutterAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "scrollBarType":                      TypeOfAssignment = AssignmentType.ScrollBarTypeAssignment;                      Value = Value = int.Parse(nodes[2].Token.Text);                      break;                  case "enableIME":                      TypeOfAssignment = AssignmentType.EnableIMEAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "highlighted":                      TypeOfAssignment = AssignmentType.HighlightedAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "minValue":                      TypeOfAssignment = AssignmentType.MinValueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "maxValue":                      TypeOfAssignment = AssignmentType.MaxValueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "pageSize":                      TypeOfAssignment = AssignmentType.PageSizeAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "cursorColor":                      TypeOfAssignment = AssignmentType.CursorColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "toolTip":                      TypeOfAssignment = AssignmentType.TooltipAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "tooltip":                      TypeOfAssignment = AssignmentType.TooltipAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "MouseTransparent":                      TypeOfAssignment = AssignmentType.MouseTransparentAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "imagestates":                      TypeOfAssignment = AssignmentType.ImageStatesAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "backgroundColor":                      TypeOfAssignment = AssignmentType.BackgroundColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "framecolor":                      TypeOfAssignment = AssignmentType.FrameColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "alignments":                      TypeOfAssignment = AssignmentType.AlignmentsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "visibleRows":                      TypeOfAssignment = AssignmentType.VisibleRowsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "columns":                      TypeOfAssignment = AssignmentType.ColumnsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "rowHeight":                      TypeOfAssignment = AssignmentType.RowHeightAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "fillColor":                      TypeOfAssignment = AssignmentType.FillColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "selectionFillColor":                      TypeOfAssignment = AssignmentType.SelectionFillColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "cursor":                      TypeOfAssignment = AssignmentType.CursorAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "lineHeight":                      TypeOfAssignment = AssignmentType.LineHeightAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetL":                      TypeOfAssignment = AssignmentType.EdgeOffsetLAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetR":                      TypeOfAssignment = AssignmentType.EdgeOffsetRAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetT":                      TypeOfAssignment = AssignmentType.EdgeOffsetTAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetB":                      TypeOfAssignment = AssignmentType.EdgeOffsetBAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "foregroundImage":                      TypeOfAssignment = AssignmentType.ForegroundImageAssignment;                      Value = nodes[2].Token.Text;                      break;                  case "backgroundImage":                      TypeOfAssignment = AssignmentType.BackgroundImageAssignment;                      Value = nodes[2].Token.Text;                      break;                  case "value":                      TypeOfAssignment = AssignmentType.ValueAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "useBackgroundImage":                      TypeOfAssignment = AssignmentType.UseBackgroundImageAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "enabled":                      TypeOfAssignment = AssignmentType.EnabledAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "fittext":                      TypeOfAssignment = AssignmentType.FitTextAssignment;                      Value = (int)nodes[2].Token.Value;                      break;              }
Magic Number,UIParser.Nodes,AssignmentNode,C:\repos\Afr0_Project-Dollhouse\Other\libs\UIParser\UIParser\Nodes\AssignmentNode.cs,InitChildren,The following statement contains a magic number: switch(nodes[0].Token.Text)              {                  case "stringDir":                      TypeOfAssignment = AssignmentType.StringDirAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "stringTable":                      TypeOfAssignment = AssignmentType.StringTableAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "leftArrowImage":                      TypeOfAssignment = AssignmentType.LeftArrowImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "rightArrowImage":                      TypeOfAssignment = AssignmentType.RightArrowImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "tracking":                      TypeOfAssignment = AssignmentType.TrackingAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "trigger":                      TypeOfAssignment = AssignmentType.TriggerAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "image":                      TypeOfAssignment = AssignmentType.ImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "position":                      TypeOfAssignment = AssignmentType.PositionAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "size":                      TypeOfAssignment = AssignmentType.SizeAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "id":                      TypeOfAssignment = AssignmentType.IDAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "orientation":                      TypeOfAssignment = AssignmentType.OrientationAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "opaque":                      TypeOfAssignment = AssignmentType.OpaqueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "assetID":                      TypeOfAssignment = AssignmentType.AssetIDAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "stringIndex":                      TypeOfAssignment = AssignmentType.StringIndexAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "text":                      TypeOfAssignment = AssignmentType.TextAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "font":                      TypeOfAssignment = AssignmentType.FontAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "textColorSelected":                      TypeOfAssignment = AssignmentType.TextColorSelectedAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textColorHighlighted":                      TypeOfAssignment = AssignmentType.TextColorHighlightedAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textColorDisabled":                      TypeOfAssignment = AssignmentType.TextColorDisabledAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textButton":                      TypeOfAssignment = AssignmentType.TextButtonAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "color":                      TypeOfAssignment = AssignmentType.ColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "alignment":                      TypeOfAssignment = AssignmentType.AlignmentAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "backColor":                      TypeOfAssignment = AssignmentType.BackColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "frameOnFocus":                      TypeOfAssignment = AssignmentType.FrameOnFocusAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "transparent":                      TypeOfAssignment = AssignmentType.TransparentAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "capacity":                      TypeOfAssignment = AssignmentType.CapacityAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "lines":                      TypeOfAssignment = AssignmentType.LinesAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "flashOnEmpty":                      TypeOfAssignment = AssignmentType.FlashOnEmptyAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "thumbImageSize":                      TypeOfAssignment = AssignmentType.ThumbImageSizeAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "thumbImageOffsets":                      TypeOfAssignment = AssignmentType.ThumbImageOffsetsAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "thumbButtonImage":                      TypeOfAssignment = AssignmentType.ThumbButtonImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "wrapped":                      TypeOfAssignment = AssignmentType.WrappedAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "textColor":                      TypeOfAssignment = AssignmentType.TextColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "mode":                      TypeOfAssignment = AssignmentType.ModeAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "scrollBarImage":                      TypeOfAssignment = AssignmentType.ScrollBarImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "scrollBarGutter":                      TypeOfAssignment = AssignmentType.ScrollBarGutterAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "scrollBarType":                      TypeOfAssignment = AssignmentType.ScrollBarTypeAssignment;                      Value = Value = int.Parse(nodes[2].Token.Text);                      break;                  case "enableIME":                      TypeOfAssignment = AssignmentType.EnableIMEAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "highlighted":                      TypeOfAssignment = AssignmentType.HighlightedAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "minValue":                      TypeOfAssignment = AssignmentType.MinValueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "maxValue":                      TypeOfAssignment = AssignmentType.MaxValueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "pageSize":                      TypeOfAssignment = AssignmentType.PageSizeAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "cursorColor":                      TypeOfAssignment = AssignmentType.CursorColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "toolTip":                      TypeOfAssignment = AssignmentType.TooltipAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "tooltip":                      TypeOfAssignment = AssignmentType.TooltipAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "MouseTransparent":                      TypeOfAssignment = AssignmentType.MouseTransparentAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "imagestates":                      TypeOfAssignment = AssignmentType.ImageStatesAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "backgroundColor":                      TypeOfAssignment = AssignmentType.BackgroundColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "framecolor":                      TypeOfAssignment = AssignmentType.FrameColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "alignments":                      TypeOfAssignment = AssignmentType.AlignmentsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "visibleRows":                      TypeOfAssignment = AssignmentType.VisibleRowsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "columns":                      TypeOfAssignment = AssignmentType.ColumnsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "rowHeight":                      TypeOfAssignment = AssignmentType.RowHeightAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "fillColor":                      TypeOfAssignment = AssignmentType.FillColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "selectionFillColor":                      TypeOfAssignment = AssignmentType.SelectionFillColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "cursor":                      TypeOfAssignment = AssignmentType.CursorAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "lineHeight":                      TypeOfAssignment = AssignmentType.LineHeightAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetL":                      TypeOfAssignment = AssignmentType.EdgeOffsetLAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetR":                      TypeOfAssignment = AssignmentType.EdgeOffsetRAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetT":                      TypeOfAssignment = AssignmentType.EdgeOffsetTAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetB":                      TypeOfAssignment = AssignmentType.EdgeOffsetBAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "foregroundImage":                      TypeOfAssignment = AssignmentType.ForegroundImageAssignment;                      Value = nodes[2].Token.Text;                      break;                  case "backgroundImage":                      TypeOfAssignment = AssignmentType.BackgroundImageAssignment;                      Value = nodes[2].Token.Text;                      break;                  case "value":                      TypeOfAssignment = AssignmentType.ValueAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "useBackgroundImage":                      TypeOfAssignment = AssignmentType.UseBackgroundImageAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "enabled":                      TypeOfAssignment = AssignmentType.EnabledAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "fittext":                      TypeOfAssignment = AssignmentType.FitTextAssignment;                      Value = (int)nodes[2].Token.Value;                      break;              }
Magic Number,UIParser.Nodes,AssignmentNode,C:\repos\Afr0_Project-Dollhouse\Other\libs\UIParser\UIParser\Nodes\AssignmentNode.cs,InitChildren,The following statement contains a magic number: switch(nodes[0].Token.Text)              {                  case "stringDir":                      TypeOfAssignment = AssignmentType.StringDirAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "stringTable":                      TypeOfAssignment = AssignmentType.StringTableAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "leftArrowImage":                      TypeOfAssignment = AssignmentType.LeftArrowImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "rightArrowImage":                      TypeOfAssignment = AssignmentType.RightArrowImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "tracking":                      TypeOfAssignment = AssignmentType.TrackingAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "trigger":                      TypeOfAssignment = AssignmentType.TriggerAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "image":                      TypeOfAssignment = AssignmentType.ImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "position":                      TypeOfAssignment = AssignmentType.PositionAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "size":                      TypeOfAssignment = AssignmentType.SizeAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "id":                      TypeOfAssignment = AssignmentType.IDAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "orientation":                      TypeOfAssignment = AssignmentType.OrientationAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "opaque":                      TypeOfAssignment = AssignmentType.OpaqueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "assetID":                      TypeOfAssignment = AssignmentType.AssetIDAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "stringIndex":                      TypeOfAssignment = AssignmentType.StringIndexAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "text":                      TypeOfAssignment = AssignmentType.TextAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "font":                      TypeOfAssignment = AssignmentType.FontAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "textColorSelected":                      TypeOfAssignment = AssignmentType.TextColorSelectedAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textColorHighlighted":                      TypeOfAssignment = AssignmentType.TextColorHighlightedAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textColorDisabled":                      TypeOfAssignment = AssignmentType.TextColorDisabledAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textButton":                      TypeOfAssignment = AssignmentType.TextButtonAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "color":                      TypeOfAssignment = AssignmentType.ColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "alignment":                      TypeOfAssignment = AssignmentType.AlignmentAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "backColor":                      TypeOfAssignment = AssignmentType.BackColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "frameOnFocus":                      TypeOfAssignment = AssignmentType.FrameOnFocusAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "transparent":                      TypeOfAssignment = AssignmentType.TransparentAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "capacity":                      TypeOfAssignment = AssignmentType.CapacityAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "lines":                      TypeOfAssignment = AssignmentType.LinesAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "flashOnEmpty":                      TypeOfAssignment = AssignmentType.FlashOnEmptyAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "thumbImageSize":                      TypeOfAssignment = AssignmentType.ThumbImageSizeAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "thumbImageOffsets":                      TypeOfAssignment = AssignmentType.ThumbImageOffsetsAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "thumbButtonImage":                      TypeOfAssignment = AssignmentType.ThumbButtonImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "wrapped":                      TypeOfAssignment = AssignmentType.WrappedAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "textColor":                      TypeOfAssignment = AssignmentType.TextColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "mode":                      TypeOfAssignment = AssignmentType.ModeAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "scrollBarImage":                      TypeOfAssignment = AssignmentType.ScrollBarImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "scrollBarGutter":                      TypeOfAssignment = AssignmentType.ScrollBarGutterAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "scrollBarType":                      TypeOfAssignment = AssignmentType.ScrollBarTypeAssignment;                      Value = Value = int.Parse(nodes[2].Token.Text);                      break;                  case "enableIME":                      TypeOfAssignment = AssignmentType.EnableIMEAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "highlighted":                      TypeOfAssignment = AssignmentType.HighlightedAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "minValue":                      TypeOfAssignment = AssignmentType.MinValueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "maxValue":                      TypeOfAssignment = AssignmentType.MaxValueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "pageSize":                      TypeOfAssignment = AssignmentType.PageSizeAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "cursorColor":                      TypeOfAssignment = AssignmentType.CursorColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "toolTip":                      TypeOfAssignment = AssignmentType.TooltipAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "tooltip":                      TypeOfAssignment = AssignmentType.TooltipAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "MouseTransparent":                      TypeOfAssignment = AssignmentType.MouseTransparentAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "imagestates":                      TypeOfAssignment = AssignmentType.ImageStatesAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "backgroundColor":                      TypeOfAssignment = AssignmentType.BackgroundColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "framecolor":                      TypeOfAssignment = AssignmentType.FrameColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "alignments":                      TypeOfAssignment = AssignmentType.AlignmentsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "visibleRows":                      TypeOfAssignment = AssignmentType.VisibleRowsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "columns":                      TypeOfAssignment = AssignmentType.ColumnsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "rowHeight":                      TypeOfAssignment = AssignmentType.RowHeightAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "fillColor":                      TypeOfAssignment = AssignmentType.FillColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "selectionFillColor":                      TypeOfAssignment = AssignmentType.SelectionFillColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "cursor":                      TypeOfAssignment = AssignmentType.CursorAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "lineHeight":                      TypeOfAssignment = AssignmentType.LineHeightAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetL":                      TypeOfAssignment = AssignmentType.EdgeOffsetLAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetR":                      TypeOfAssignment = AssignmentType.EdgeOffsetRAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetT":                      TypeOfAssignment = AssignmentType.EdgeOffsetTAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetB":                      TypeOfAssignment = AssignmentType.EdgeOffsetBAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "foregroundImage":                      TypeOfAssignment = AssignmentType.ForegroundImageAssignment;                      Value = nodes[2].Token.Text;                      break;                  case "backgroundImage":                      TypeOfAssignment = AssignmentType.BackgroundImageAssignment;                      Value = nodes[2].Token.Text;                      break;                  case "value":                      TypeOfAssignment = AssignmentType.ValueAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "useBackgroundImage":                      TypeOfAssignment = AssignmentType.UseBackgroundImageAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "enabled":                      TypeOfAssignment = AssignmentType.EnabledAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "fittext":                      TypeOfAssignment = AssignmentType.FitTextAssignment;                      Value = (int)nodes[2].Token.Value;                      break;              }
Magic Number,UIParser.Nodes,AssignmentNode,C:\repos\Afr0_Project-Dollhouse\Other\libs\UIParser\UIParser\Nodes\AssignmentNode.cs,InitChildren,The following statement contains a magic number: switch(nodes[0].Token.Text)              {                  case "stringDir":                      TypeOfAssignment = AssignmentType.StringDirAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "stringTable":                      TypeOfAssignment = AssignmentType.StringTableAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "leftArrowImage":                      TypeOfAssignment = AssignmentType.LeftArrowImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "rightArrowImage":                      TypeOfAssignment = AssignmentType.RightArrowImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "tracking":                      TypeOfAssignment = AssignmentType.TrackingAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "trigger":                      TypeOfAssignment = AssignmentType.TriggerAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "image":                      TypeOfAssignment = AssignmentType.ImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "position":                      TypeOfAssignment = AssignmentType.PositionAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "size":                      TypeOfAssignment = AssignmentType.SizeAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "id":                      TypeOfAssignment = AssignmentType.IDAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "orientation":                      TypeOfAssignment = AssignmentType.OrientationAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "opaque":                      TypeOfAssignment = AssignmentType.OpaqueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "assetID":                      TypeOfAssignment = AssignmentType.AssetIDAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "stringIndex":                      TypeOfAssignment = AssignmentType.StringIndexAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "text":                      TypeOfAssignment = AssignmentType.TextAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "font":                      TypeOfAssignment = AssignmentType.FontAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "textColorSelected":                      TypeOfAssignment = AssignmentType.TextColorSelectedAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textColorHighlighted":                      TypeOfAssignment = AssignmentType.TextColorHighlightedAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textColorDisabled":                      TypeOfAssignment = AssignmentType.TextColorDisabledAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textButton":                      TypeOfAssignment = AssignmentType.TextButtonAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "color":                      TypeOfAssignment = AssignmentType.ColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "alignment":                      TypeOfAssignment = AssignmentType.AlignmentAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "backColor":                      TypeOfAssignment = AssignmentType.BackColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "frameOnFocus":                      TypeOfAssignment = AssignmentType.FrameOnFocusAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "transparent":                      TypeOfAssignment = AssignmentType.TransparentAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "capacity":                      TypeOfAssignment = AssignmentType.CapacityAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "lines":                      TypeOfAssignment = AssignmentType.LinesAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "flashOnEmpty":                      TypeOfAssignment = AssignmentType.FlashOnEmptyAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "thumbImageSize":                      TypeOfAssignment = AssignmentType.ThumbImageSizeAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "thumbImageOffsets":                      TypeOfAssignment = AssignmentType.ThumbImageOffsetsAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "thumbButtonImage":                      TypeOfAssignment = AssignmentType.ThumbButtonImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "wrapped":                      TypeOfAssignment = AssignmentType.WrappedAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "textColor":                      TypeOfAssignment = AssignmentType.TextColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "mode":                      TypeOfAssignment = AssignmentType.ModeAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "scrollBarImage":                      TypeOfAssignment = AssignmentType.ScrollBarImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "scrollBarGutter":                      TypeOfAssignment = AssignmentType.ScrollBarGutterAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "scrollBarType":                      TypeOfAssignment = AssignmentType.ScrollBarTypeAssignment;                      Value = Value = int.Parse(nodes[2].Token.Text);                      break;                  case "enableIME":                      TypeOfAssignment = AssignmentType.EnableIMEAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "highlighted":                      TypeOfAssignment = AssignmentType.HighlightedAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "minValue":                      TypeOfAssignment = AssignmentType.MinValueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "maxValue":                      TypeOfAssignment = AssignmentType.MaxValueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "pageSize":                      TypeOfAssignment = AssignmentType.PageSizeAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "cursorColor":                      TypeOfAssignment = AssignmentType.CursorColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "toolTip":                      TypeOfAssignment = AssignmentType.TooltipAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "tooltip":                      TypeOfAssignment = AssignmentType.TooltipAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "MouseTransparent":                      TypeOfAssignment = AssignmentType.MouseTransparentAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "imagestates":                      TypeOfAssignment = AssignmentType.ImageStatesAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "backgroundColor":                      TypeOfAssignment = AssignmentType.BackgroundColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "framecolor":                      TypeOfAssignment = AssignmentType.FrameColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "alignments":                      TypeOfAssignment = AssignmentType.AlignmentsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "visibleRows":                      TypeOfAssignment = AssignmentType.VisibleRowsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "columns":                      TypeOfAssignment = AssignmentType.ColumnsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "rowHeight":                      TypeOfAssignment = AssignmentType.RowHeightAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "fillColor":                      TypeOfAssignment = AssignmentType.FillColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "selectionFillColor":                      TypeOfAssignment = AssignmentType.SelectionFillColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "cursor":                      TypeOfAssignment = AssignmentType.CursorAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "lineHeight":                      TypeOfAssignment = AssignmentType.LineHeightAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetL":                      TypeOfAssignment = AssignmentType.EdgeOffsetLAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetR":                      TypeOfAssignment = AssignmentType.EdgeOffsetRAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetT":                      TypeOfAssignment = AssignmentType.EdgeOffsetTAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetB":                      TypeOfAssignment = AssignmentType.EdgeOffsetBAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "foregroundImage":                      TypeOfAssignment = AssignmentType.ForegroundImageAssignment;                      Value = nodes[2].Token.Text;                      break;                  case "backgroundImage":                      TypeOfAssignment = AssignmentType.BackgroundImageAssignment;                      Value = nodes[2].Token.Text;                      break;                  case "value":                      TypeOfAssignment = AssignmentType.ValueAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "useBackgroundImage":                      TypeOfAssignment = AssignmentType.UseBackgroundImageAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "enabled":                      TypeOfAssignment = AssignmentType.EnabledAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "fittext":                      TypeOfAssignment = AssignmentType.FitTextAssignment;                      Value = (int)nodes[2].Token.Value;                      break;              }
Magic Number,UIParser.Nodes,AssignmentNode,C:\repos\Afr0_Project-Dollhouse\Other\libs\UIParser\UIParser\Nodes\AssignmentNode.cs,InitChildren,The following statement contains a magic number: switch(nodes[0].Token.Text)              {                  case "stringDir":                      TypeOfAssignment = AssignmentType.StringDirAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "stringTable":                      TypeOfAssignment = AssignmentType.StringTableAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "leftArrowImage":                      TypeOfAssignment = AssignmentType.LeftArrowImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "rightArrowImage":                      TypeOfAssignment = AssignmentType.RightArrowImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "tracking":                      TypeOfAssignment = AssignmentType.TrackingAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "trigger":                      TypeOfAssignment = AssignmentType.TriggerAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "image":                      TypeOfAssignment = AssignmentType.ImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "position":                      TypeOfAssignment = AssignmentType.PositionAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "size":                      TypeOfAssignment = AssignmentType.SizeAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "id":                      TypeOfAssignment = AssignmentType.IDAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "orientation":                      TypeOfAssignment = AssignmentType.OrientationAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "opaque":                      TypeOfAssignment = AssignmentType.OpaqueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "assetID":                      TypeOfAssignment = AssignmentType.AssetIDAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "stringIndex":                      TypeOfAssignment = AssignmentType.StringIndexAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "text":                      TypeOfAssignment = AssignmentType.TextAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "font":                      TypeOfAssignment = AssignmentType.FontAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "textColorSelected":                      TypeOfAssignment = AssignmentType.TextColorSelectedAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textColorHighlighted":                      TypeOfAssignment = AssignmentType.TextColorHighlightedAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textColorDisabled":                      TypeOfAssignment = AssignmentType.TextColorDisabledAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textButton":                      TypeOfAssignment = AssignmentType.TextButtonAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "color":                      TypeOfAssignment = AssignmentType.ColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "alignment":                      TypeOfAssignment = AssignmentType.AlignmentAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "backColor":                      TypeOfAssignment = AssignmentType.BackColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "frameOnFocus":                      TypeOfAssignment = AssignmentType.FrameOnFocusAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "transparent":                      TypeOfAssignment = AssignmentType.TransparentAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "capacity":                      TypeOfAssignment = AssignmentType.CapacityAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "lines":                      TypeOfAssignment = AssignmentType.LinesAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "flashOnEmpty":                      TypeOfAssignment = AssignmentType.FlashOnEmptyAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "thumbImageSize":                      TypeOfAssignment = AssignmentType.ThumbImageSizeAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "thumbImageOffsets":                      TypeOfAssignment = AssignmentType.ThumbImageOffsetsAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "thumbButtonImage":                      TypeOfAssignment = AssignmentType.ThumbButtonImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "wrapped":                      TypeOfAssignment = AssignmentType.WrappedAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "textColor":                      TypeOfAssignment = AssignmentType.TextColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "mode":                      TypeOfAssignment = AssignmentType.ModeAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "scrollBarImage":                      TypeOfAssignment = AssignmentType.ScrollBarImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "scrollBarGutter":                      TypeOfAssignment = AssignmentType.ScrollBarGutterAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "scrollBarType":                      TypeOfAssignment = AssignmentType.ScrollBarTypeAssignment;                      Value = Value = int.Parse(nodes[2].Token.Text);                      break;                  case "enableIME":                      TypeOfAssignment = AssignmentType.EnableIMEAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "highlighted":                      TypeOfAssignment = AssignmentType.HighlightedAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "minValue":                      TypeOfAssignment = AssignmentType.MinValueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "maxValue":                      TypeOfAssignment = AssignmentType.MaxValueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "pageSize":                      TypeOfAssignment = AssignmentType.PageSizeAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "cursorColor":                      TypeOfAssignment = AssignmentType.CursorColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "toolTip":                      TypeOfAssignment = AssignmentType.TooltipAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "tooltip":                      TypeOfAssignment = AssignmentType.TooltipAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "MouseTransparent":                      TypeOfAssignment = AssignmentType.MouseTransparentAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "imagestates":                      TypeOfAssignment = AssignmentType.ImageStatesAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "backgroundColor":                      TypeOfAssignment = AssignmentType.BackgroundColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "framecolor":                      TypeOfAssignment = AssignmentType.FrameColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "alignments":                      TypeOfAssignment = AssignmentType.AlignmentsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "visibleRows":                      TypeOfAssignment = AssignmentType.VisibleRowsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "columns":                      TypeOfAssignment = AssignmentType.ColumnsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "rowHeight":                      TypeOfAssignment = AssignmentType.RowHeightAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "fillColor":                      TypeOfAssignment = AssignmentType.FillColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "selectionFillColor":                      TypeOfAssignment = AssignmentType.SelectionFillColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "cursor":                      TypeOfAssignment = AssignmentType.CursorAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "lineHeight":                      TypeOfAssignment = AssignmentType.LineHeightAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetL":                      TypeOfAssignment = AssignmentType.EdgeOffsetLAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetR":                      TypeOfAssignment = AssignmentType.EdgeOffsetRAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetT":                      TypeOfAssignment = AssignmentType.EdgeOffsetTAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetB":                      TypeOfAssignment = AssignmentType.EdgeOffsetBAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "foregroundImage":                      TypeOfAssignment = AssignmentType.ForegroundImageAssignment;                      Value = nodes[2].Token.Text;                      break;                  case "backgroundImage":                      TypeOfAssignment = AssignmentType.BackgroundImageAssignment;                      Value = nodes[2].Token.Text;                      break;                  case "value":                      TypeOfAssignment = AssignmentType.ValueAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "useBackgroundImage":                      TypeOfAssignment = AssignmentType.UseBackgroundImageAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "enabled":                      TypeOfAssignment = AssignmentType.EnabledAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "fittext":                      TypeOfAssignment = AssignmentType.FitTextAssignment;                      Value = (int)nodes[2].Token.Value;                      break;              }
Magic Number,UIParser.Nodes,AssignmentNode,C:\repos\Afr0_Project-Dollhouse\Other\libs\UIParser\UIParser\Nodes\AssignmentNode.cs,InitChildren,The following statement contains a magic number: switch(nodes[0].Token.Text)              {                  case "stringDir":                      TypeOfAssignment = AssignmentType.StringDirAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "stringTable":                      TypeOfAssignment = AssignmentType.StringTableAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "leftArrowImage":                      TypeOfAssignment = AssignmentType.LeftArrowImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "rightArrowImage":                      TypeOfAssignment = AssignmentType.RightArrowImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "tracking":                      TypeOfAssignment = AssignmentType.TrackingAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "trigger":                      TypeOfAssignment = AssignmentType.TriggerAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "image":                      TypeOfAssignment = AssignmentType.ImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "position":                      TypeOfAssignment = AssignmentType.PositionAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "size":                      TypeOfAssignment = AssignmentType.SizeAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "id":                      TypeOfAssignment = AssignmentType.IDAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "orientation":                      TypeOfAssignment = AssignmentType.OrientationAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "opaque":                      TypeOfAssignment = AssignmentType.OpaqueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "assetID":                      TypeOfAssignment = AssignmentType.AssetIDAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "stringIndex":                      TypeOfAssignment = AssignmentType.StringIndexAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "text":                      TypeOfAssignment = AssignmentType.TextAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "font":                      TypeOfAssignment = AssignmentType.FontAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "textColorSelected":                      TypeOfAssignment = AssignmentType.TextColorSelectedAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textColorHighlighted":                      TypeOfAssignment = AssignmentType.TextColorHighlightedAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textColorDisabled":                      TypeOfAssignment = AssignmentType.TextColorDisabledAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textButton":                      TypeOfAssignment = AssignmentType.TextButtonAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "color":                      TypeOfAssignment = AssignmentType.ColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "alignment":                      TypeOfAssignment = AssignmentType.AlignmentAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "backColor":                      TypeOfAssignment = AssignmentType.BackColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "frameOnFocus":                      TypeOfAssignment = AssignmentType.FrameOnFocusAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "transparent":                      TypeOfAssignment = AssignmentType.TransparentAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "capacity":                      TypeOfAssignment = AssignmentType.CapacityAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "lines":                      TypeOfAssignment = AssignmentType.LinesAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "flashOnEmpty":                      TypeOfAssignment = AssignmentType.FlashOnEmptyAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "thumbImageSize":                      TypeOfAssignment = AssignmentType.ThumbImageSizeAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "thumbImageOffsets":                      TypeOfAssignment = AssignmentType.ThumbImageOffsetsAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "thumbButtonImage":                      TypeOfAssignment = AssignmentType.ThumbButtonImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "wrapped":                      TypeOfAssignment = AssignmentType.WrappedAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "textColor":                      TypeOfAssignment = AssignmentType.TextColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "mode":                      TypeOfAssignment = AssignmentType.ModeAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "scrollBarImage":                      TypeOfAssignment = AssignmentType.ScrollBarImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "scrollBarGutter":                      TypeOfAssignment = AssignmentType.ScrollBarGutterAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "scrollBarType":                      TypeOfAssignment = AssignmentType.ScrollBarTypeAssignment;                      Value = Value = int.Parse(nodes[2].Token.Text);                      break;                  case "enableIME":                      TypeOfAssignment = AssignmentType.EnableIMEAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "highlighted":                      TypeOfAssignment = AssignmentType.HighlightedAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "minValue":                      TypeOfAssignment = AssignmentType.MinValueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "maxValue":                      TypeOfAssignment = AssignmentType.MaxValueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "pageSize":                      TypeOfAssignment = AssignmentType.PageSizeAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "cursorColor":                      TypeOfAssignment = AssignmentType.CursorColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "toolTip":                      TypeOfAssignment = AssignmentType.TooltipAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "tooltip":                      TypeOfAssignment = AssignmentType.TooltipAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "MouseTransparent":                      TypeOfAssignment = AssignmentType.MouseTransparentAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "imagestates":                      TypeOfAssignment = AssignmentType.ImageStatesAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "backgroundColor":                      TypeOfAssignment = AssignmentType.BackgroundColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "framecolor":                      TypeOfAssignment = AssignmentType.FrameColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "alignments":                      TypeOfAssignment = AssignmentType.AlignmentsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "visibleRows":                      TypeOfAssignment = AssignmentType.VisibleRowsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "columns":                      TypeOfAssignment = AssignmentType.ColumnsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "rowHeight":                      TypeOfAssignment = AssignmentType.RowHeightAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "fillColor":                      TypeOfAssignment = AssignmentType.FillColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "selectionFillColor":                      TypeOfAssignment = AssignmentType.SelectionFillColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "cursor":                      TypeOfAssignment = AssignmentType.CursorAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "lineHeight":                      TypeOfAssignment = AssignmentType.LineHeightAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetL":                      TypeOfAssignment = AssignmentType.EdgeOffsetLAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetR":                      TypeOfAssignment = AssignmentType.EdgeOffsetRAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetT":                      TypeOfAssignment = AssignmentType.EdgeOffsetTAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetB":                      TypeOfAssignment = AssignmentType.EdgeOffsetBAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "foregroundImage":                      TypeOfAssignment = AssignmentType.ForegroundImageAssignment;                      Value = nodes[2].Token.Text;                      break;                  case "backgroundImage":                      TypeOfAssignment = AssignmentType.BackgroundImageAssignment;                      Value = nodes[2].Token.Text;                      break;                  case "value":                      TypeOfAssignment = AssignmentType.ValueAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "useBackgroundImage":                      TypeOfAssignment = AssignmentType.UseBackgroundImageAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "enabled":                      TypeOfAssignment = AssignmentType.EnabledAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "fittext":                      TypeOfAssignment = AssignmentType.FitTextAssignment;                      Value = (int)nodes[2].Token.Value;                      break;              }
Magic Number,UIParser.Nodes,AssignmentNode,C:\repos\Afr0_Project-Dollhouse\Other\libs\UIParser\UIParser\Nodes\AssignmentNode.cs,InitChildren,The following statement contains a magic number: switch(nodes[0].Token.Text)              {                  case "stringDir":                      TypeOfAssignment = AssignmentType.StringDirAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "stringTable":                      TypeOfAssignment = AssignmentType.StringTableAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "leftArrowImage":                      TypeOfAssignment = AssignmentType.LeftArrowImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "rightArrowImage":                      TypeOfAssignment = AssignmentType.RightArrowImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "tracking":                      TypeOfAssignment = AssignmentType.TrackingAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "trigger":                      TypeOfAssignment = AssignmentType.TriggerAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "image":                      TypeOfAssignment = AssignmentType.ImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "position":                      TypeOfAssignment = AssignmentType.PositionAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "size":                      TypeOfAssignment = AssignmentType.SizeAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "id":                      TypeOfAssignment = AssignmentType.IDAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "orientation":                      TypeOfAssignment = AssignmentType.OrientationAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "opaque":                      TypeOfAssignment = AssignmentType.OpaqueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "assetID":                      TypeOfAssignment = AssignmentType.AssetIDAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "stringIndex":                      TypeOfAssignment = AssignmentType.StringIndexAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "text":                      TypeOfAssignment = AssignmentType.TextAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "font":                      TypeOfAssignment = AssignmentType.FontAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "textColorSelected":                      TypeOfAssignment = AssignmentType.TextColorSelectedAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textColorHighlighted":                      TypeOfAssignment = AssignmentType.TextColorHighlightedAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textColorDisabled":                      TypeOfAssignment = AssignmentType.TextColorDisabledAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textButton":                      TypeOfAssignment = AssignmentType.TextButtonAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "color":                      TypeOfAssignment = AssignmentType.ColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "alignment":                      TypeOfAssignment = AssignmentType.AlignmentAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "backColor":                      TypeOfAssignment = AssignmentType.BackColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "frameOnFocus":                      TypeOfAssignment = AssignmentType.FrameOnFocusAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "transparent":                      TypeOfAssignment = AssignmentType.TransparentAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "capacity":                      TypeOfAssignment = AssignmentType.CapacityAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "lines":                      TypeOfAssignment = AssignmentType.LinesAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "flashOnEmpty":                      TypeOfAssignment = AssignmentType.FlashOnEmptyAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "thumbImageSize":                      TypeOfAssignment = AssignmentType.ThumbImageSizeAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "thumbImageOffsets":                      TypeOfAssignment = AssignmentType.ThumbImageOffsetsAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "thumbButtonImage":                      TypeOfAssignment = AssignmentType.ThumbButtonImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "wrapped":                      TypeOfAssignment = AssignmentType.WrappedAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "textColor":                      TypeOfAssignment = AssignmentType.TextColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "mode":                      TypeOfAssignment = AssignmentType.ModeAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "scrollBarImage":                      TypeOfAssignment = AssignmentType.ScrollBarImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "scrollBarGutter":                      TypeOfAssignment = AssignmentType.ScrollBarGutterAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "scrollBarType":                      TypeOfAssignment = AssignmentType.ScrollBarTypeAssignment;                      Value = Value = int.Parse(nodes[2].Token.Text);                      break;                  case "enableIME":                      TypeOfAssignment = AssignmentType.EnableIMEAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "highlighted":                      TypeOfAssignment = AssignmentType.HighlightedAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "minValue":                      TypeOfAssignment = AssignmentType.MinValueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "maxValue":                      TypeOfAssignment = AssignmentType.MaxValueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "pageSize":                      TypeOfAssignment = AssignmentType.PageSizeAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "cursorColor":                      TypeOfAssignment = AssignmentType.CursorColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "toolTip":                      TypeOfAssignment = AssignmentType.TooltipAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "tooltip":                      TypeOfAssignment = AssignmentType.TooltipAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "MouseTransparent":                      TypeOfAssignment = AssignmentType.MouseTransparentAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "imagestates":                      TypeOfAssignment = AssignmentType.ImageStatesAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "backgroundColor":                      TypeOfAssignment = AssignmentType.BackgroundColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "framecolor":                      TypeOfAssignment = AssignmentType.FrameColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "alignments":                      TypeOfAssignment = AssignmentType.AlignmentsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "visibleRows":                      TypeOfAssignment = AssignmentType.VisibleRowsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "columns":                      TypeOfAssignment = AssignmentType.ColumnsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "rowHeight":                      TypeOfAssignment = AssignmentType.RowHeightAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "fillColor":                      TypeOfAssignment = AssignmentType.FillColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "selectionFillColor":                      TypeOfAssignment = AssignmentType.SelectionFillColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "cursor":                      TypeOfAssignment = AssignmentType.CursorAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "lineHeight":                      TypeOfAssignment = AssignmentType.LineHeightAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetL":                      TypeOfAssignment = AssignmentType.EdgeOffsetLAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetR":                      TypeOfAssignment = AssignmentType.EdgeOffsetRAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetT":                      TypeOfAssignment = AssignmentType.EdgeOffsetTAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetB":                      TypeOfAssignment = AssignmentType.EdgeOffsetBAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "foregroundImage":                      TypeOfAssignment = AssignmentType.ForegroundImageAssignment;                      Value = nodes[2].Token.Text;                      break;                  case "backgroundImage":                      TypeOfAssignment = AssignmentType.BackgroundImageAssignment;                      Value = nodes[2].Token.Text;                      break;                  case "value":                      TypeOfAssignment = AssignmentType.ValueAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "useBackgroundImage":                      TypeOfAssignment = AssignmentType.UseBackgroundImageAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "enabled":                      TypeOfAssignment = AssignmentType.EnabledAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "fittext":                      TypeOfAssignment = AssignmentType.FitTextAssignment;                      Value = (int)nodes[2].Token.Value;                      break;              }
Magic Number,UIParser.Nodes,AssignmentNode,C:\repos\Afr0_Project-Dollhouse\Other\libs\UIParser\UIParser\Nodes\AssignmentNode.cs,InitChildren,The following statement contains a magic number: switch(nodes[0].Token.Text)              {                  case "stringDir":                      TypeOfAssignment = AssignmentType.StringDirAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "stringTable":                      TypeOfAssignment = AssignmentType.StringTableAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "leftArrowImage":                      TypeOfAssignment = AssignmentType.LeftArrowImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "rightArrowImage":                      TypeOfAssignment = AssignmentType.RightArrowImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "tracking":                      TypeOfAssignment = AssignmentType.TrackingAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "trigger":                      TypeOfAssignment = AssignmentType.TriggerAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "image":                      TypeOfAssignment = AssignmentType.ImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "position":                      TypeOfAssignment = AssignmentType.PositionAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "size":                      TypeOfAssignment = AssignmentType.SizeAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "id":                      TypeOfAssignment = AssignmentType.IDAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "orientation":                      TypeOfAssignment = AssignmentType.OrientationAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "opaque":                      TypeOfAssignment = AssignmentType.OpaqueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "assetID":                      TypeOfAssignment = AssignmentType.AssetIDAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "stringIndex":                      TypeOfAssignment = AssignmentType.StringIndexAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "text":                      TypeOfAssignment = AssignmentType.TextAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "font":                      TypeOfAssignment = AssignmentType.FontAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "textColorSelected":                      TypeOfAssignment = AssignmentType.TextColorSelectedAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textColorHighlighted":                      TypeOfAssignment = AssignmentType.TextColorHighlightedAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textColorDisabled":                      TypeOfAssignment = AssignmentType.TextColorDisabledAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textButton":                      TypeOfAssignment = AssignmentType.TextButtonAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "color":                      TypeOfAssignment = AssignmentType.ColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "alignment":                      TypeOfAssignment = AssignmentType.AlignmentAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "backColor":                      TypeOfAssignment = AssignmentType.BackColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "frameOnFocus":                      TypeOfAssignment = AssignmentType.FrameOnFocusAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "transparent":                      TypeOfAssignment = AssignmentType.TransparentAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "capacity":                      TypeOfAssignment = AssignmentType.CapacityAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "lines":                      TypeOfAssignment = AssignmentType.LinesAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "flashOnEmpty":                      TypeOfAssignment = AssignmentType.FlashOnEmptyAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "thumbImageSize":                      TypeOfAssignment = AssignmentType.ThumbImageSizeAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "thumbImageOffsets":                      TypeOfAssignment = AssignmentType.ThumbImageOffsetsAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "thumbButtonImage":                      TypeOfAssignment = AssignmentType.ThumbButtonImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "wrapped":                      TypeOfAssignment = AssignmentType.WrappedAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "textColor":                      TypeOfAssignment = AssignmentType.TextColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "mode":                      TypeOfAssignment = AssignmentType.ModeAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "scrollBarImage":                      TypeOfAssignment = AssignmentType.ScrollBarImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "scrollBarGutter":                      TypeOfAssignment = AssignmentType.ScrollBarGutterAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "scrollBarType":                      TypeOfAssignment = AssignmentType.ScrollBarTypeAssignment;                      Value = Value = int.Parse(nodes[2].Token.Text);                      break;                  case "enableIME":                      TypeOfAssignment = AssignmentType.EnableIMEAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "highlighted":                      TypeOfAssignment = AssignmentType.HighlightedAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "minValue":                      TypeOfAssignment = AssignmentType.MinValueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "maxValue":                      TypeOfAssignment = AssignmentType.MaxValueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "pageSize":                      TypeOfAssignment = AssignmentType.PageSizeAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "cursorColor":                      TypeOfAssignment = AssignmentType.CursorColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "toolTip":                      TypeOfAssignment = AssignmentType.TooltipAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "tooltip":                      TypeOfAssignment = AssignmentType.TooltipAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "MouseTransparent":                      TypeOfAssignment = AssignmentType.MouseTransparentAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "imagestates":                      TypeOfAssignment = AssignmentType.ImageStatesAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "backgroundColor":                      TypeOfAssignment = AssignmentType.BackgroundColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "framecolor":                      TypeOfAssignment = AssignmentType.FrameColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "alignments":                      TypeOfAssignment = AssignmentType.AlignmentsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "visibleRows":                      TypeOfAssignment = AssignmentType.VisibleRowsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "columns":                      TypeOfAssignment = AssignmentType.ColumnsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "rowHeight":                      TypeOfAssignment = AssignmentType.RowHeightAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "fillColor":                      TypeOfAssignment = AssignmentType.FillColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "selectionFillColor":                      TypeOfAssignment = AssignmentType.SelectionFillColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "cursor":                      TypeOfAssignment = AssignmentType.CursorAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "lineHeight":                      TypeOfAssignment = AssignmentType.LineHeightAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetL":                      TypeOfAssignment = AssignmentType.EdgeOffsetLAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetR":                      TypeOfAssignment = AssignmentType.EdgeOffsetRAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetT":                      TypeOfAssignment = AssignmentType.EdgeOffsetTAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetB":                      TypeOfAssignment = AssignmentType.EdgeOffsetBAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "foregroundImage":                      TypeOfAssignment = AssignmentType.ForegroundImageAssignment;                      Value = nodes[2].Token.Text;                      break;                  case "backgroundImage":                      TypeOfAssignment = AssignmentType.BackgroundImageAssignment;                      Value = nodes[2].Token.Text;                      break;                  case "value":                      TypeOfAssignment = AssignmentType.ValueAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "useBackgroundImage":                      TypeOfAssignment = AssignmentType.UseBackgroundImageAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "enabled":                      TypeOfAssignment = AssignmentType.EnabledAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "fittext":                      TypeOfAssignment = AssignmentType.FitTextAssignment;                      Value = (int)nodes[2].Token.Value;                      break;              }
Magic Number,UIParser.Nodes,AssignmentNode,C:\repos\Afr0_Project-Dollhouse\Other\libs\UIParser\UIParser\Nodes\AssignmentNode.cs,InitChildren,The following statement contains a magic number: switch(nodes[0].Token.Text)              {                  case "stringDir":                      TypeOfAssignment = AssignmentType.StringDirAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "stringTable":                      TypeOfAssignment = AssignmentType.StringTableAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "leftArrowImage":                      TypeOfAssignment = AssignmentType.LeftArrowImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "rightArrowImage":                      TypeOfAssignment = AssignmentType.RightArrowImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "tracking":                      TypeOfAssignment = AssignmentType.TrackingAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "trigger":                      TypeOfAssignment = AssignmentType.TriggerAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "image":                      TypeOfAssignment = AssignmentType.ImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "position":                      TypeOfAssignment = AssignmentType.PositionAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "size":                      TypeOfAssignment = AssignmentType.SizeAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "id":                      TypeOfAssignment = AssignmentType.IDAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "orientation":                      TypeOfAssignment = AssignmentType.OrientationAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "opaque":                      TypeOfAssignment = AssignmentType.OpaqueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "assetID":                      TypeOfAssignment = AssignmentType.AssetIDAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "stringIndex":                      TypeOfAssignment = AssignmentType.StringIndexAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "text":                      TypeOfAssignment = AssignmentType.TextAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "font":                      TypeOfAssignment = AssignmentType.FontAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "textColorSelected":                      TypeOfAssignment = AssignmentType.TextColorSelectedAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textColorHighlighted":                      TypeOfAssignment = AssignmentType.TextColorHighlightedAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textColorDisabled":                      TypeOfAssignment = AssignmentType.TextColorDisabledAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textButton":                      TypeOfAssignment = AssignmentType.TextButtonAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "color":                      TypeOfAssignment = AssignmentType.ColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "alignment":                      TypeOfAssignment = AssignmentType.AlignmentAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "backColor":                      TypeOfAssignment = AssignmentType.BackColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "frameOnFocus":                      TypeOfAssignment = AssignmentType.FrameOnFocusAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "transparent":                      TypeOfAssignment = AssignmentType.TransparentAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "capacity":                      TypeOfAssignment = AssignmentType.CapacityAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "lines":                      TypeOfAssignment = AssignmentType.LinesAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "flashOnEmpty":                      TypeOfAssignment = AssignmentType.FlashOnEmptyAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "thumbImageSize":                      TypeOfAssignment = AssignmentType.ThumbImageSizeAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "thumbImageOffsets":                      TypeOfAssignment = AssignmentType.ThumbImageOffsetsAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "thumbButtonImage":                      TypeOfAssignment = AssignmentType.ThumbButtonImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "wrapped":                      TypeOfAssignment = AssignmentType.WrappedAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "textColor":                      TypeOfAssignment = AssignmentType.TextColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "mode":                      TypeOfAssignment = AssignmentType.ModeAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "scrollBarImage":                      TypeOfAssignment = AssignmentType.ScrollBarImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "scrollBarGutter":                      TypeOfAssignment = AssignmentType.ScrollBarGutterAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "scrollBarType":                      TypeOfAssignment = AssignmentType.ScrollBarTypeAssignment;                      Value = Value = int.Parse(nodes[2].Token.Text);                      break;                  case "enableIME":                      TypeOfAssignment = AssignmentType.EnableIMEAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "highlighted":                      TypeOfAssignment = AssignmentType.HighlightedAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "minValue":                      TypeOfAssignment = AssignmentType.MinValueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "maxValue":                      TypeOfAssignment = AssignmentType.MaxValueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "pageSize":                      TypeOfAssignment = AssignmentType.PageSizeAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "cursorColor":                      TypeOfAssignment = AssignmentType.CursorColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "toolTip":                      TypeOfAssignment = AssignmentType.TooltipAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "tooltip":                      TypeOfAssignment = AssignmentType.TooltipAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "MouseTransparent":                      TypeOfAssignment = AssignmentType.MouseTransparentAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "imagestates":                      TypeOfAssignment = AssignmentType.ImageStatesAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "backgroundColor":                      TypeOfAssignment = AssignmentType.BackgroundColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "framecolor":                      TypeOfAssignment = AssignmentType.FrameColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "alignments":                      TypeOfAssignment = AssignmentType.AlignmentsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "visibleRows":                      TypeOfAssignment = AssignmentType.VisibleRowsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "columns":                      TypeOfAssignment = AssignmentType.ColumnsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "rowHeight":                      TypeOfAssignment = AssignmentType.RowHeightAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "fillColor":                      TypeOfAssignment = AssignmentType.FillColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "selectionFillColor":                      TypeOfAssignment = AssignmentType.SelectionFillColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "cursor":                      TypeOfAssignment = AssignmentType.CursorAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "lineHeight":                      TypeOfAssignment = AssignmentType.LineHeightAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetL":                      TypeOfAssignment = AssignmentType.EdgeOffsetLAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetR":                      TypeOfAssignment = AssignmentType.EdgeOffsetRAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetT":                      TypeOfAssignment = AssignmentType.EdgeOffsetTAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetB":                      TypeOfAssignment = AssignmentType.EdgeOffsetBAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "foregroundImage":                      TypeOfAssignment = AssignmentType.ForegroundImageAssignment;                      Value = nodes[2].Token.Text;                      break;                  case "backgroundImage":                      TypeOfAssignment = AssignmentType.BackgroundImageAssignment;                      Value = nodes[2].Token.Text;                      break;                  case "value":                      TypeOfAssignment = AssignmentType.ValueAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "useBackgroundImage":                      TypeOfAssignment = AssignmentType.UseBackgroundImageAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "enabled":                      TypeOfAssignment = AssignmentType.EnabledAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "fittext":                      TypeOfAssignment = AssignmentType.FitTextAssignment;                      Value = (int)nodes[2].Token.Value;                      break;              }
Magic Number,UIParser.Nodes,AssignmentNode,C:\repos\Afr0_Project-Dollhouse\Other\libs\UIParser\UIParser\Nodes\AssignmentNode.cs,InitChildren,The following statement contains a magic number: switch(nodes[0].Token.Text)              {                  case "stringDir":                      TypeOfAssignment = AssignmentType.StringDirAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "stringTable":                      TypeOfAssignment = AssignmentType.StringTableAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "leftArrowImage":                      TypeOfAssignment = AssignmentType.LeftArrowImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "rightArrowImage":                      TypeOfAssignment = AssignmentType.RightArrowImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "tracking":                      TypeOfAssignment = AssignmentType.TrackingAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "trigger":                      TypeOfAssignment = AssignmentType.TriggerAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "image":                      TypeOfAssignment = AssignmentType.ImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "position":                      TypeOfAssignment = AssignmentType.PositionAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "size":                      TypeOfAssignment = AssignmentType.SizeAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "id":                      TypeOfAssignment = AssignmentType.IDAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "orientation":                      TypeOfAssignment = AssignmentType.OrientationAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "opaque":                      TypeOfAssignment = AssignmentType.OpaqueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "assetID":                      TypeOfAssignment = AssignmentType.AssetIDAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "stringIndex":                      TypeOfAssignment = AssignmentType.StringIndexAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "text":                      TypeOfAssignment = AssignmentType.TextAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "font":                      TypeOfAssignment = AssignmentType.FontAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "textColorSelected":                      TypeOfAssignment = AssignmentType.TextColorSelectedAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textColorHighlighted":                      TypeOfAssignment = AssignmentType.TextColorHighlightedAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textColorDisabled":                      TypeOfAssignment = AssignmentType.TextColorDisabledAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textButton":                      TypeOfAssignment = AssignmentType.TextButtonAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "color":                      TypeOfAssignment = AssignmentType.ColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "alignment":                      TypeOfAssignment = AssignmentType.AlignmentAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "backColor":                      TypeOfAssignment = AssignmentType.BackColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "frameOnFocus":                      TypeOfAssignment = AssignmentType.FrameOnFocusAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "transparent":                      TypeOfAssignment = AssignmentType.TransparentAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "capacity":                      TypeOfAssignment = AssignmentType.CapacityAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "lines":                      TypeOfAssignment = AssignmentType.LinesAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "flashOnEmpty":                      TypeOfAssignment = AssignmentType.FlashOnEmptyAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "thumbImageSize":                      TypeOfAssignment = AssignmentType.ThumbImageSizeAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "thumbImageOffsets":                      TypeOfAssignment = AssignmentType.ThumbImageOffsetsAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "thumbButtonImage":                      TypeOfAssignment = AssignmentType.ThumbButtonImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "wrapped":                      TypeOfAssignment = AssignmentType.WrappedAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "textColor":                      TypeOfAssignment = AssignmentType.TextColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "mode":                      TypeOfAssignment = AssignmentType.ModeAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "scrollBarImage":                      TypeOfAssignment = AssignmentType.ScrollBarImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "scrollBarGutter":                      TypeOfAssignment = AssignmentType.ScrollBarGutterAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "scrollBarType":                      TypeOfAssignment = AssignmentType.ScrollBarTypeAssignment;                      Value = Value = int.Parse(nodes[2].Token.Text);                      break;                  case "enableIME":                      TypeOfAssignment = AssignmentType.EnableIMEAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "highlighted":                      TypeOfAssignment = AssignmentType.HighlightedAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "minValue":                      TypeOfAssignment = AssignmentType.MinValueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "maxValue":                      TypeOfAssignment = AssignmentType.MaxValueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "pageSize":                      TypeOfAssignment = AssignmentType.PageSizeAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "cursorColor":                      TypeOfAssignment = AssignmentType.CursorColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "toolTip":                      TypeOfAssignment = AssignmentType.TooltipAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "tooltip":                      TypeOfAssignment = AssignmentType.TooltipAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "MouseTransparent":                      TypeOfAssignment = AssignmentType.MouseTransparentAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "imagestates":                      TypeOfAssignment = AssignmentType.ImageStatesAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "backgroundColor":                      TypeOfAssignment = AssignmentType.BackgroundColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "framecolor":                      TypeOfAssignment = AssignmentType.FrameColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "alignments":                      TypeOfAssignment = AssignmentType.AlignmentsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "visibleRows":                      TypeOfAssignment = AssignmentType.VisibleRowsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "columns":                      TypeOfAssignment = AssignmentType.ColumnsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "rowHeight":                      TypeOfAssignment = AssignmentType.RowHeightAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "fillColor":                      TypeOfAssignment = AssignmentType.FillColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "selectionFillColor":                      TypeOfAssignment = AssignmentType.SelectionFillColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "cursor":                      TypeOfAssignment = AssignmentType.CursorAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "lineHeight":                      TypeOfAssignment = AssignmentType.LineHeightAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetL":                      TypeOfAssignment = AssignmentType.EdgeOffsetLAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetR":                      TypeOfAssignment = AssignmentType.EdgeOffsetRAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetT":                      TypeOfAssignment = AssignmentType.EdgeOffsetTAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetB":                      TypeOfAssignment = AssignmentType.EdgeOffsetBAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "foregroundImage":                      TypeOfAssignment = AssignmentType.ForegroundImageAssignment;                      Value = nodes[2].Token.Text;                      break;                  case "backgroundImage":                      TypeOfAssignment = AssignmentType.BackgroundImageAssignment;                      Value = nodes[2].Token.Text;                      break;                  case "value":                      TypeOfAssignment = AssignmentType.ValueAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "useBackgroundImage":                      TypeOfAssignment = AssignmentType.UseBackgroundImageAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "enabled":                      TypeOfAssignment = AssignmentType.EnabledAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "fittext":                      TypeOfAssignment = AssignmentType.FitTextAssignment;                      Value = (int)nodes[2].Token.Value;                      break;              }
Magic Number,UIParser.Nodes,AssignmentNode,C:\repos\Afr0_Project-Dollhouse\Other\libs\UIParser\UIParser\Nodes\AssignmentNode.cs,InitChildren,The following statement contains a magic number: switch(nodes[0].Token.Text)              {                  case "stringDir":                      TypeOfAssignment = AssignmentType.StringDirAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "stringTable":                      TypeOfAssignment = AssignmentType.StringTableAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "leftArrowImage":                      TypeOfAssignment = AssignmentType.LeftArrowImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "rightArrowImage":                      TypeOfAssignment = AssignmentType.RightArrowImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "tracking":                      TypeOfAssignment = AssignmentType.TrackingAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "trigger":                      TypeOfAssignment = AssignmentType.TriggerAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "image":                      TypeOfAssignment = AssignmentType.ImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "position":                      TypeOfAssignment = AssignmentType.PositionAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "size":                      TypeOfAssignment = AssignmentType.SizeAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "id":                      TypeOfAssignment = AssignmentType.IDAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "orientation":                      TypeOfAssignment = AssignmentType.OrientationAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "opaque":                      TypeOfAssignment = AssignmentType.OpaqueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "assetID":                      TypeOfAssignment = AssignmentType.AssetIDAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "stringIndex":                      TypeOfAssignment = AssignmentType.StringIndexAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "text":                      TypeOfAssignment = AssignmentType.TextAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "font":                      TypeOfAssignment = AssignmentType.FontAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "textColorSelected":                      TypeOfAssignment = AssignmentType.TextColorSelectedAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textColorHighlighted":                      TypeOfAssignment = AssignmentType.TextColorHighlightedAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textColorDisabled":                      TypeOfAssignment = AssignmentType.TextColorDisabledAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textButton":                      TypeOfAssignment = AssignmentType.TextButtonAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "color":                      TypeOfAssignment = AssignmentType.ColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "alignment":                      TypeOfAssignment = AssignmentType.AlignmentAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "backColor":                      TypeOfAssignment = AssignmentType.BackColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "frameOnFocus":                      TypeOfAssignment = AssignmentType.FrameOnFocusAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "transparent":                      TypeOfAssignment = AssignmentType.TransparentAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "capacity":                      TypeOfAssignment = AssignmentType.CapacityAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "lines":                      TypeOfAssignment = AssignmentType.LinesAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "flashOnEmpty":                      TypeOfAssignment = AssignmentType.FlashOnEmptyAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "thumbImageSize":                      TypeOfAssignment = AssignmentType.ThumbImageSizeAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "thumbImageOffsets":                      TypeOfAssignment = AssignmentType.ThumbImageOffsetsAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "thumbButtonImage":                      TypeOfAssignment = AssignmentType.ThumbButtonImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "wrapped":                      TypeOfAssignment = AssignmentType.WrappedAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "textColor":                      TypeOfAssignment = AssignmentType.TextColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "mode":                      TypeOfAssignment = AssignmentType.ModeAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "scrollBarImage":                      TypeOfAssignment = AssignmentType.ScrollBarImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "scrollBarGutter":                      TypeOfAssignment = AssignmentType.ScrollBarGutterAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "scrollBarType":                      TypeOfAssignment = AssignmentType.ScrollBarTypeAssignment;                      Value = Value = int.Parse(nodes[2].Token.Text);                      break;                  case "enableIME":                      TypeOfAssignment = AssignmentType.EnableIMEAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "highlighted":                      TypeOfAssignment = AssignmentType.HighlightedAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "minValue":                      TypeOfAssignment = AssignmentType.MinValueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "maxValue":                      TypeOfAssignment = AssignmentType.MaxValueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "pageSize":                      TypeOfAssignment = AssignmentType.PageSizeAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "cursorColor":                      TypeOfAssignment = AssignmentType.CursorColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "toolTip":                      TypeOfAssignment = AssignmentType.TooltipAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "tooltip":                      TypeOfAssignment = AssignmentType.TooltipAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "MouseTransparent":                      TypeOfAssignment = AssignmentType.MouseTransparentAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "imagestates":                      TypeOfAssignment = AssignmentType.ImageStatesAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "backgroundColor":                      TypeOfAssignment = AssignmentType.BackgroundColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "framecolor":                      TypeOfAssignment = AssignmentType.FrameColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "alignments":                      TypeOfAssignment = AssignmentType.AlignmentsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "visibleRows":                      TypeOfAssignment = AssignmentType.VisibleRowsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "columns":                      TypeOfAssignment = AssignmentType.ColumnsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "rowHeight":                      TypeOfAssignment = AssignmentType.RowHeightAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "fillColor":                      TypeOfAssignment = AssignmentType.FillColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "selectionFillColor":                      TypeOfAssignment = AssignmentType.SelectionFillColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "cursor":                      TypeOfAssignment = AssignmentType.CursorAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "lineHeight":                      TypeOfAssignment = AssignmentType.LineHeightAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetL":                      TypeOfAssignment = AssignmentType.EdgeOffsetLAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetR":                      TypeOfAssignment = AssignmentType.EdgeOffsetRAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetT":                      TypeOfAssignment = AssignmentType.EdgeOffsetTAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetB":                      TypeOfAssignment = AssignmentType.EdgeOffsetBAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "foregroundImage":                      TypeOfAssignment = AssignmentType.ForegroundImageAssignment;                      Value = nodes[2].Token.Text;                      break;                  case "backgroundImage":                      TypeOfAssignment = AssignmentType.BackgroundImageAssignment;                      Value = nodes[2].Token.Text;                      break;                  case "value":                      TypeOfAssignment = AssignmentType.ValueAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "useBackgroundImage":                      TypeOfAssignment = AssignmentType.UseBackgroundImageAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "enabled":                      TypeOfAssignment = AssignmentType.EnabledAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "fittext":                      TypeOfAssignment = AssignmentType.FitTextAssignment;                      Value = (int)nodes[2].Token.Value;                      break;              }
Magic Number,UIParser.Nodes,AssignmentNode,C:\repos\Afr0_Project-Dollhouse\Other\libs\UIParser\UIParser\Nodes\AssignmentNode.cs,InitChildren,The following statement contains a magic number: switch(nodes[0].Token.Text)              {                  case "stringDir":                      TypeOfAssignment = AssignmentType.StringDirAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "stringTable":                      TypeOfAssignment = AssignmentType.StringTableAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "leftArrowImage":                      TypeOfAssignment = AssignmentType.LeftArrowImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "rightArrowImage":                      TypeOfAssignment = AssignmentType.RightArrowImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "tracking":                      TypeOfAssignment = AssignmentType.TrackingAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "trigger":                      TypeOfAssignment = AssignmentType.TriggerAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "image":                      TypeOfAssignment = AssignmentType.ImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "position":                      TypeOfAssignment = AssignmentType.PositionAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "size":                      TypeOfAssignment = AssignmentType.SizeAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "id":                      TypeOfAssignment = AssignmentType.IDAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "orientation":                      TypeOfAssignment = AssignmentType.OrientationAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "opaque":                      TypeOfAssignment = AssignmentType.OpaqueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "assetID":                      TypeOfAssignment = AssignmentType.AssetIDAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "stringIndex":                      TypeOfAssignment = AssignmentType.StringIndexAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "text":                      TypeOfAssignment = AssignmentType.TextAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "font":                      TypeOfAssignment = AssignmentType.FontAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "textColorSelected":                      TypeOfAssignment = AssignmentType.TextColorSelectedAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textColorHighlighted":                      TypeOfAssignment = AssignmentType.TextColorHighlightedAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textColorDisabled":                      TypeOfAssignment = AssignmentType.TextColorDisabledAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textButton":                      TypeOfAssignment = AssignmentType.TextButtonAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "color":                      TypeOfAssignment = AssignmentType.ColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "alignment":                      TypeOfAssignment = AssignmentType.AlignmentAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "backColor":                      TypeOfAssignment = AssignmentType.BackColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "frameOnFocus":                      TypeOfAssignment = AssignmentType.FrameOnFocusAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "transparent":                      TypeOfAssignment = AssignmentType.TransparentAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "capacity":                      TypeOfAssignment = AssignmentType.CapacityAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "lines":                      TypeOfAssignment = AssignmentType.LinesAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "flashOnEmpty":                      TypeOfAssignment = AssignmentType.FlashOnEmptyAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "thumbImageSize":                      TypeOfAssignment = AssignmentType.ThumbImageSizeAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "thumbImageOffsets":                      TypeOfAssignment = AssignmentType.ThumbImageOffsetsAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "thumbButtonImage":                      TypeOfAssignment = AssignmentType.ThumbButtonImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "wrapped":                      TypeOfAssignment = AssignmentType.WrappedAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "textColor":                      TypeOfAssignment = AssignmentType.TextColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "mode":                      TypeOfAssignment = AssignmentType.ModeAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "scrollBarImage":                      TypeOfAssignment = AssignmentType.ScrollBarImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "scrollBarGutter":                      TypeOfAssignment = AssignmentType.ScrollBarGutterAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "scrollBarType":                      TypeOfAssignment = AssignmentType.ScrollBarTypeAssignment;                      Value = Value = int.Parse(nodes[2].Token.Text);                      break;                  case "enableIME":                      TypeOfAssignment = AssignmentType.EnableIMEAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "highlighted":                      TypeOfAssignment = AssignmentType.HighlightedAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "minValue":                      TypeOfAssignment = AssignmentType.MinValueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "maxValue":                      TypeOfAssignment = AssignmentType.MaxValueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "pageSize":                      TypeOfAssignment = AssignmentType.PageSizeAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "cursorColor":                      TypeOfAssignment = AssignmentType.CursorColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "toolTip":                      TypeOfAssignment = AssignmentType.TooltipAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "tooltip":                      TypeOfAssignment = AssignmentType.TooltipAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "MouseTransparent":                      TypeOfAssignment = AssignmentType.MouseTransparentAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "imagestates":                      TypeOfAssignment = AssignmentType.ImageStatesAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "backgroundColor":                      TypeOfAssignment = AssignmentType.BackgroundColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "framecolor":                      TypeOfAssignment = AssignmentType.FrameColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "alignments":                      TypeOfAssignment = AssignmentType.AlignmentsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "visibleRows":                      TypeOfAssignment = AssignmentType.VisibleRowsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "columns":                      TypeOfAssignment = AssignmentType.ColumnsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "rowHeight":                      TypeOfAssignment = AssignmentType.RowHeightAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "fillColor":                      TypeOfAssignment = AssignmentType.FillColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "selectionFillColor":                      TypeOfAssignment = AssignmentType.SelectionFillColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "cursor":                      TypeOfAssignment = AssignmentType.CursorAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "lineHeight":                      TypeOfAssignment = AssignmentType.LineHeightAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetL":                      TypeOfAssignment = AssignmentType.EdgeOffsetLAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetR":                      TypeOfAssignment = AssignmentType.EdgeOffsetRAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetT":                      TypeOfAssignment = AssignmentType.EdgeOffsetTAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetB":                      TypeOfAssignment = AssignmentType.EdgeOffsetBAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "foregroundImage":                      TypeOfAssignment = AssignmentType.ForegroundImageAssignment;                      Value = nodes[2].Token.Text;                      break;                  case "backgroundImage":                      TypeOfAssignment = AssignmentType.BackgroundImageAssignment;                      Value = nodes[2].Token.Text;                      break;                  case "value":                      TypeOfAssignment = AssignmentType.ValueAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "useBackgroundImage":                      TypeOfAssignment = AssignmentType.UseBackgroundImageAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "enabled":                      TypeOfAssignment = AssignmentType.EnabledAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "fittext":                      TypeOfAssignment = AssignmentType.FitTextAssignment;                      Value = (int)nodes[2].Token.Value;                      break;              }
Magic Number,UIParser.Nodes,AssignmentNode,C:\repos\Afr0_Project-Dollhouse\Other\libs\UIParser\UIParser\Nodes\AssignmentNode.cs,InitChildren,The following statement contains a magic number: switch(nodes[0].Token.Text)              {                  case "stringDir":                      TypeOfAssignment = AssignmentType.StringDirAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "stringTable":                      TypeOfAssignment = AssignmentType.StringTableAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "leftArrowImage":                      TypeOfAssignment = AssignmentType.LeftArrowImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "rightArrowImage":                      TypeOfAssignment = AssignmentType.RightArrowImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "tracking":                      TypeOfAssignment = AssignmentType.TrackingAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "trigger":                      TypeOfAssignment = AssignmentType.TriggerAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "image":                      TypeOfAssignment = AssignmentType.ImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "position":                      TypeOfAssignment = AssignmentType.PositionAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "size":                      TypeOfAssignment = AssignmentType.SizeAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "id":                      TypeOfAssignment = AssignmentType.IDAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "orientation":                      TypeOfAssignment = AssignmentType.OrientationAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "opaque":                      TypeOfAssignment = AssignmentType.OpaqueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "assetID":                      TypeOfAssignment = AssignmentType.AssetIDAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "stringIndex":                      TypeOfAssignment = AssignmentType.StringIndexAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "text":                      TypeOfAssignment = AssignmentType.TextAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "font":                      TypeOfAssignment = AssignmentType.FontAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "textColorSelected":                      TypeOfAssignment = AssignmentType.TextColorSelectedAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textColorHighlighted":                      TypeOfAssignment = AssignmentType.TextColorHighlightedAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textColorDisabled":                      TypeOfAssignment = AssignmentType.TextColorDisabledAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textButton":                      TypeOfAssignment = AssignmentType.TextButtonAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "color":                      TypeOfAssignment = AssignmentType.ColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "alignment":                      TypeOfAssignment = AssignmentType.AlignmentAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "backColor":                      TypeOfAssignment = AssignmentType.BackColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "frameOnFocus":                      TypeOfAssignment = AssignmentType.FrameOnFocusAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "transparent":                      TypeOfAssignment = AssignmentType.TransparentAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "capacity":                      TypeOfAssignment = AssignmentType.CapacityAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "lines":                      TypeOfAssignment = AssignmentType.LinesAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "flashOnEmpty":                      TypeOfAssignment = AssignmentType.FlashOnEmptyAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "thumbImageSize":                      TypeOfAssignment = AssignmentType.ThumbImageSizeAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "thumbImageOffsets":                      TypeOfAssignment = AssignmentType.ThumbImageOffsetsAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "thumbButtonImage":                      TypeOfAssignment = AssignmentType.ThumbButtonImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "wrapped":                      TypeOfAssignment = AssignmentType.WrappedAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "textColor":                      TypeOfAssignment = AssignmentType.TextColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "mode":                      TypeOfAssignment = AssignmentType.ModeAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "scrollBarImage":                      TypeOfAssignment = AssignmentType.ScrollBarImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "scrollBarGutter":                      TypeOfAssignment = AssignmentType.ScrollBarGutterAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "scrollBarType":                      TypeOfAssignment = AssignmentType.ScrollBarTypeAssignment;                      Value = Value = int.Parse(nodes[2].Token.Text);                      break;                  case "enableIME":                      TypeOfAssignment = AssignmentType.EnableIMEAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "highlighted":                      TypeOfAssignment = AssignmentType.HighlightedAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "minValue":                      TypeOfAssignment = AssignmentType.MinValueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "maxValue":                      TypeOfAssignment = AssignmentType.MaxValueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "pageSize":                      TypeOfAssignment = AssignmentType.PageSizeAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "cursorColor":                      TypeOfAssignment = AssignmentType.CursorColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "toolTip":                      TypeOfAssignment = AssignmentType.TooltipAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "tooltip":                      TypeOfAssignment = AssignmentType.TooltipAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "MouseTransparent":                      TypeOfAssignment = AssignmentType.MouseTransparentAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "imagestates":                      TypeOfAssignment = AssignmentType.ImageStatesAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "backgroundColor":                      TypeOfAssignment = AssignmentType.BackgroundColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "framecolor":                      TypeOfAssignment = AssignmentType.FrameColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "alignments":                      TypeOfAssignment = AssignmentType.AlignmentsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "visibleRows":                      TypeOfAssignment = AssignmentType.VisibleRowsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "columns":                      TypeOfAssignment = AssignmentType.ColumnsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "rowHeight":                      TypeOfAssignment = AssignmentType.RowHeightAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "fillColor":                      TypeOfAssignment = AssignmentType.FillColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "selectionFillColor":                      TypeOfAssignment = AssignmentType.SelectionFillColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "cursor":                      TypeOfAssignment = AssignmentType.CursorAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "lineHeight":                      TypeOfAssignment = AssignmentType.LineHeightAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetL":                      TypeOfAssignment = AssignmentType.EdgeOffsetLAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetR":                      TypeOfAssignment = AssignmentType.EdgeOffsetRAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetT":                      TypeOfAssignment = AssignmentType.EdgeOffsetTAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetB":                      TypeOfAssignment = AssignmentType.EdgeOffsetBAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "foregroundImage":                      TypeOfAssignment = AssignmentType.ForegroundImageAssignment;                      Value = nodes[2].Token.Text;                      break;                  case "backgroundImage":                      TypeOfAssignment = AssignmentType.BackgroundImageAssignment;                      Value = nodes[2].Token.Text;                      break;                  case "value":                      TypeOfAssignment = AssignmentType.ValueAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "useBackgroundImage":                      TypeOfAssignment = AssignmentType.UseBackgroundImageAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "enabled":                      TypeOfAssignment = AssignmentType.EnabledAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "fittext":                      TypeOfAssignment = AssignmentType.FitTextAssignment;                      Value = (int)nodes[2].Token.Value;                      break;              }
Magic Number,UIParser.Nodes,AssignmentNode,C:\repos\Afr0_Project-Dollhouse\Other\libs\UIParser\UIParser\Nodes\AssignmentNode.cs,InitChildren,The following statement contains a magic number: switch(nodes[0].Token.Text)              {                  case "stringDir":                      TypeOfAssignment = AssignmentType.StringDirAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "stringTable":                      TypeOfAssignment = AssignmentType.StringTableAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "leftArrowImage":                      TypeOfAssignment = AssignmentType.LeftArrowImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "rightArrowImage":                      TypeOfAssignment = AssignmentType.RightArrowImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "tracking":                      TypeOfAssignment = AssignmentType.TrackingAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "trigger":                      TypeOfAssignment = AssignmentType.TriggerAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "image":                      TypeOfAssignment = AssignmentType.ImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "position":                      TypeOfAssignment = AssignmentType.PositionAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "size":                      TypeOfAssignment = AssignmentType.SizeAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "id":                      TypeOfAssignment = AssignmentType.IDAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "orientation":                      TypeOfAssignment = AssignmentType.OrientationAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "opaque":                      TypeOfAssignment = AssignmentType.OpaqueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "assetID":                      TypeOfAssignment = AssignmentType.AssetIDAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "stringIndex":                      TypeOfAssignment = AssignmentType.StringIndexAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "text":                      TypeOfAssignment = AssignmentType.TextAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "font":                      TypeOfAssignment = AssignmentType.FontAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "textColorSelected":                      TypeOfAssignment = AssignmentType.TextColorSelectedAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textColorHighlighted":                      TypeOfAssignment = AssignmentType.TextColorHighlightedAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textColorDisabled":                      TypeOfAssignment = AssignmentType.TextColorDisabledAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textButton":                      TypeOfAssignment = AssignmentType.TextButtonAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "color":                      TypeOfAssignment = AssignmentType.ColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "alignment":                      TypeOfAssignment = AssignmentType.AlignmentAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "backColor":                      TypeOfAssignment = AssignmentType.BackColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "frameOnFocus":                      TypeOfAssignment = AssignmentType.FrameOnFocusAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "transparent":                      TypeOfAssignment = AssignmentType.TransparentAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "capacity":                      TypeOfAssignment = AssignmentType.CapacityAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "lines":                      TypeOfAssignment = AssignmentType.LinesAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "flashOnEmpty":                      TypeOfAssignment = AssignmentType.FlashOnEmptyAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "thumbImageSize":                      TypeOfAssignment = AssignmentType.ThumbImageSizeAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "thumbImageOffsets":                      TypeOfAssignment = AssignmentType.ThumbImageOffsetsAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "thumbButtonImage":                      TypeOfAssignment = AssignmentType.ThumbButtonImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "wrapped":                      TypeOfAssignment = AssignmentType.WrappedAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "textColor":                      TypeOfAssignment = AssignmentType.TextColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "mode":                      TypeOfAssignment = AssignmentType.ModeAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "scrollBarImage":                      TypeOfAssignment = AssignmentType.ScrollBarImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "scrollBarGutter":                      TypeOfAssignment = AssignmentType.ScrollBarGutterAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "scrollBarType":                      TypeOfAssignment = AssignmentType.ScrollBarTypeAssignment;                      Value = Value = int.Parse(nodes[2].Token.Text);                      break;                  case "enableIME":                      TypeOfAssignment = AssignmentType.EnableIMEAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "highlighted":                      TypeOfAssignment = AssignmentType.HighlightedAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "minValue":                      TypeOfAssignment = AssignmentType.MinValueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "maxValue":                      TypeOfAssignment = AssignmentType.MaxValueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "pageSize":                      TypeOfAssignment = AssignmentType.PageSizeAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "cursorColor":                      TypeOfAssignment = AssignmentType.CursorColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "toolTip":                      TypeOfAssignment = AssignmentType.TooltipAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "tooltip":                      TypeOfAssignment = AssignmentType.TooltipAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "MouseTransparent":                      TypeOfAssignment = AssignmentType.MouseTransparentAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "imagestates":                      TypeOfAssignment = AssignmentType.ImageStatesAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "backgroundColor":                      TypeOfAssignment = AssignmentType.BackgroundColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "framecolor":                      TypeOfAssignment = AssignmentType.FrameColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "alignments":                      TypeOfAssignment = AssignmentType.AlignmentsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "visibleRows":                      TypeOfAssignment = AssignmentType.VisibleRowsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "columns":                      TypeOfAssignment = AssignmentType.ColumnsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "rowHeight":                      TypeOfAssignment = AssignmentType.RowHeightAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "fillColor":                      TypeOfAssignment = AssignmentType.FillColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "selectionFillColor":                      TypeOfAssignment = AssignmentType.SelectionFillColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "cursor":                      TypeOfAssignment = AssignmentType.CursorAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "lineHeight":                      TypeOfAssignment = AssignmentType.LineHeightAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetL":                      TypeOfAssignment = AssignmentType.EdgeOffsetLAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetR":                      TypeOfAssignment = AssignmentType.EdgeOffsetRAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetT":                      TypeOfAssignment = AssignmentType.EdgeOffsetTAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetB":                      TypeOfAssignment = AssignmentType.EdgeOffsetBAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "foregroundImage":                      TypeOfAssignment = AssignmentType.ForegroundImageAssignment;                      Value = nodes[2].Token.Text;                      break;                  case "backgroundImage":                      TypeOfAssignment = AssignmentType.BackgroundImageAssignment;                      Value = nodes[2].Token.Text;                      break;                  case "value":                      TypeOfAssignment = AssignmentType.ValueAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "useBackgroundImage":                      TypeOfAssignment = AssignmentType.UseBackgroundImageAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "enabled":                      TypeOfAssignment = AssignmentType.EnabledAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "fittext":                      TypeOfAssignment = AssignmentType.FitTextAssignment;                      Value = (int)nodes[2].Token.Value;                      break;              }
Magic Number,UIParser.Nodes,AssignmentNode,C:\repos\Afr0_Project-Dollhouse\Other\libs\UIParser\UIParser\Nodes\AssignmentNode.cs,InitChildren,The following statement contains a magic number: switch(nodes[0].Token.Text)              {                  case "stringDir":                      TypeOfAssignment = AssignmentType.StringDirAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "stringTable":                      TypeOfAssignment = AssignmentType.StringTableAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "leftArrowImage":                      TypeOfAssignment = AssignmentType.LeftArrowImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "rightArrowImage":                      TypeOfAssignment = AssignmentType.RightArrowImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "tracking":                      TypeOfAssignment = AssignmentType.TrackingAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "trigger":                      TypeOfAssignment = AssignmentType.TriggerAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "image":                      TypeOfAssignment = AssignmentType.ImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "position":                      TypeOfAssignment = AssignmentType.PositionAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "size":                      TypeOfAssignment = AssignmentType.SizeAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "id":                      TypeOfAssignment = AssignmentType.IDAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "orientation":                      TypeOfAssignment = AssignmentType.OrientationAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "opaque":                      TypeOfAssignment = AssignmentType.OpaqueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "assetID":                      TypeOfAssignment = AssignmentType.AssetIDAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "stringIndex":                      TypeOfAssignment = AssignmentType.StringIndexAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "text":                      TypeOfAssignment = AssignmentType.TextAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "font":                      TypeOfAssignment = AssignmentType.FontAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "textColorSelected":                      TypeOfAssignment = AssignmentType.TextColorSelectedAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textColorHighlighted":                      TypeOfAssignment = AssignmentType.TextColorHighlightedAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textColorDisabled":                      TypeOfAssignment = AssignmentType.TextColorDisabledAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textButton":                      TypeOfAssignment = AssignmentType.TextButtonAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "color":                      TypeOfAssignment = AssignmentType.ColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "alignment":                      TypeOfAssignment = AssignmentType.AlignmentAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "backColor":                      TypeOfAssignment = AssignmentType.BackColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "frameOnFocus":                      TypeOfAssignment = AssignmentType.FrameOnFocusAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "transparent":                      TypeOfAssignment = AssignmentType.TransparentAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "capacity":                      TypeOfAssignment = AssignmentType.CapacityAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "lines":                      TypeOfAssignment = AssignmentType.LinesAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "flashOnEmpty":                      TypeOfAssignment = AssignmentType.FlashOnEmptyAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "thumbImageSize":                      TypeOfAssignment = AssignmentType.ThumbImageSizeAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "thumbImageOffsets":                      TypeOfAssignment = AssignmentType.ThumbImageOffsetsAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "thumbButtonImage":                      TypeOfAssignment = AssignmentType.ThumbButtonImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "wrapped":                      TypeOfAssignment = AssignmentType.WrappedAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "textColor":                      TypeOfAssignment = AssignmentType.TextColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "mode":                      TypeOfAssignment = AssignmentType.ModeAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "scrollBarImage":                      TypeOfAssignment = AssignmentType.ScrollBarImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "scrollBarGutter":                      TypeOfAssignment = AssignmentType.ScrollBarGutterAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "scrollBarType":                      TypeOfAssignment = AssignmentType.ScrollBarTypeAssignment;                      Value = Value = int.Parse(nodes[2].Token.Text);                      break;                  case "enableIME":                      TypeOfAssignment = AssignmentType.EnableIMEAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "highlighted":                      TypeOfAssignment = AssignmentType.HighlightedAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "minValue":                      TypeOfAssignment = AssignmentType.MinValueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "maxValue":                      TypeOfAssignment = AssignmentType.MaxValueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "pageSize":                      TypeOfAssignment = AssignmentType.PageSizeAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "cursorColor":                      TypeOfAssignment = AssignmentType.CursorColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "toolTip":                      TypeOfAssignment = AssignmentType.TooltipAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "tooltip":                      TypeOfAssignment = AssignmentType.TooltipAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "MouseTransparent":                      TypeOfAssignment = AssignmentType.MouseTransparentAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "imagestates":                      TypeOfAssignment = AssignmentType.ImageStatesAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "backgroundColor":                      TypeOfAssignment = AssignmentType.BackgroundColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "framecolor":                      TypeOfAssignment = AssignmentType.FrameColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "alignments":                      TypeOfAssignment = AssignmentType.AlignmentsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "visibleRows":                      TypeOfAssignment = AssignmentType.VisibleRowsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "columns":                      TypeOfAssignment = AssignmentType.ColumnsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "rowHeight":                      TypeOfAssignment = AssignmentType.RowHeightAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "fillColor":                      TypeOfAssignment = AssignmentType.FillColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "selectionFillColor":                      TypeOfAssignment = AssignmentType.SelectionFillColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "cursor":                      TypeOfAssignment = AssignmentType.CursorAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "lineHeight":                      TypeOfAssignment = AssignmentType.LineHeightAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetL":                      TypeOfAssignment = AssignmentType.EdgeOffsetLAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetR":                      TypeOfAssignment = AssignmentType.EdgeOffsetRAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetT":                      TypeOfAssignment = AssignmentType.EdgeOffsetTAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetB":                      TypeOfAssignment = AssignmentType.EdgeOffsetBAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "foregroundImage":                      TypeOfAssignment = AssignmentType.ForegroundImageAssignment;                      Value = nodes[2].Token.Text;                      break;                  case "backgroundImage":                      TypeOfAssignment = AssignmentType.BackgroundImageAssignment;                      Value = nodes[2].Token.Text;                      break;                  case "value":                      TypeOfAssignment = AssignmentType.ValueAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "useBackgroundImage":                      TypeOfAssignment = AssignmentType.UseBackgroundImageAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "enabled":                      TypeOfAssignment = AssignmentType.EnabledAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "fittext":                      TypeOfAssignment = AssignmentType.FitTextAssignment;                      Value = (int)nodes[2].Token.Value;                      break;              }
Magic Number,UIParser.Nodes,AssignmentNode,C:\repos\Afr0_Project-Dollhouse\Other\libs\UIParser\UIParser\Nodes\AssignmentNode.cs,InitChildren,The following statement contains a magic number: switch(nodes[0].Token.Text)              {                  case "stringDir":                      TypeOfAssignment = AssignmentType.StringDirAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "stringTable":                      TypeOfAssignment = AssignmentType.StringTableAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "leftArrowImage":                      TypeOfAssignment = AssignmentType.LeftArrowImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "rightArrowImage":                      TypeOfAssignment = AssignmentType.RightArrowImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "tracking":                      TypeOfAssignment = AssignmentType.TrackingAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "trigger":                      TypeOfAssignment = AssignmentType.TriggerAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "image":                      TypeOfAssignment = AssignmentType.ImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "position":                      TypeOfAssignment = AssignmentType.PositionAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "size":                      TypeOfAssignment = AssignmentType.SizeAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "id":                      TypeOfAssignment = AssignmentType.IDAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "orientation":                      TypeOfAssignment = AssignmentType.OrientationAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "opaque":                      TypeOfAssignment = AssignmentType.OpaqueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "assetID":                      TypeOfAssignment = AssignmentType.AssetIDAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "stringIndex":                      TypeOfAssignment = AssignmentType.StringIndexAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "text":                      TypeOfAssignment = AssignmentType.TextAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "font":                      TypeOfAssignment = AssignmentType.FontAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "textColorSelected":                      TypeOfAssignment = AssignmentType.TextColorSelectedAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textColorHighlighted":                      TypeOfAssignment = AssignmentType.TextColorHighlightedAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textColorDisabled":                      TypeOfAssignment = AssignmentType.TextColorDisabledAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textButton":                      TypeOfAssignment = AssignmentType.TextButtonAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "color":                      TypeOfAssignment = AssignmentType.ColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "alignment":                      TypeOfAssignment = AssignmentType.AlignmentAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "backColor":                      TypeOfAssignment = AssignmentType.BackColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "frameOnFocus":                      TypeOfAssignment = AssignmentType.FrameOnFocusAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "transparent":                      TypeOfAssignment = AssignmentType.TransparentAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "capacity":                      TypeOfAssignment = AssignmentType.CapacityAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "lines":                      TypeOfAssignment = AssignmentType.LinesAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "flashOnEmpty":                      TypeOfAssignment = AssignmentType.FlashOnEmptyAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "thumbImageSize":                      TypeOfAssignment = AssignmentType.ThumbImageSizeAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "thumbImageOffsets":                      TypeOfAssignment = AssignmentType.ThumbImageOffsetsAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "thumbButtonImage":                      TypeOfAssignment = AssignmentType.ThumbButtonImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "wrapped":                      TypeOfAssignment = AssignmentType.WrappedAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "textColor":                      TypeOfAssignment = AssignmentType.TextColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "mode":                      TypeOfAssignment = AssignmentType.ModeAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "scrollBarImage":                      TypeOfAssignment = AssignmentType.ScrollBarImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "scrollBarGutter":                      TypeOfAssignment = AssignmentType.ScrollBarGutterAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "scrollBarType":                      TypeOfAssignment = AssignmentType.ScrollBarTypeAssignment;                      Value = Value = int.Parse(nodes[2].Token.Text);                      break;                  case "enableIME":                      TypeOfAssignment = AssignmentType.EnableIMEAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "highlighted":                      TypeOfAssignment = AssignmentType.HighlightedAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "minValue":                      TypeOfAssignment = AssignmentType.MinValueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "maxValue":                      TypeOfAssignment = AssignmentType.MaxValueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "pageSize":                      TypeOfAssignment = AssignmentType.PageSizeAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "cursorColor":                      TypeOfAssignment = AssignmentType.CursorColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "toolTip":                      TypeOfAssignment = AssignmentType.TooltipAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "tooltip":                      TypeOfAssignment = AssignmentType.TooltipAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "MouseTransparent":                      TypeOfAssignment = AssignmentType.MouseTransparentAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "imagestates":                      TypeOfAssignment = AssignmentType.ImageStatesAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "backgroundColor":                      TypeOfAssignment = AssignmentType.BackgroundColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "framecolor":                      TypeOfAssignment = AssignmentType.FrameColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "alignments":                      TypeOfAssignment = AssignmentType.AlignmentsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "visibleRows":                      TypeOfAssignment = AssignmentType.VisibleRowsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "columns":                      TypeOfAssignment = AssignmentType.ColumnsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "rowHeight":                      TypeOfAssignment = AssignmentType.RowHeightAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "fillColor":                      TypeOfAssignment = AssignmentType.FillColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "selectionFillColor":                      TypeOfAssignment = AssignmentType.SelectionFillColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "cursor":                      TypeOfAssignment = AssignmentType.CursorAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "lineHeight":                      TypeOfAssignment = AssignmentType.LineHeightAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetL":                      TypeOfAssignment = AssignmentType.EdgeOffsetLAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetR":                      TypeOfAssignment = AssignmentType.EdgeOffsetRAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetT":                      TypeOfAssignment = AssignmentType.EdgeOffsetTAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetB":                      TypeOfAssignment = AssignmentType.EdgeOffsetBAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "foregroundImage":                      TypeOfAssignment = AssignmentType.ForegroundImageAssignment;                      Value = nodes[2].Token.Text;                      break;                  case "backgroundImage":                      TypeOfAssignment = AssignmentType.BackgroundImageAssignment;                      Value = nodes[2].Token.Text;                      break;                  case "value":                      TypeOfAssignment = AssignmentType.ValueAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "useBackgroundImage":                      TypeOfAssignment = AssignmentType.UseBackgroundImageAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "enabled":                      TypeOfAssignment = AssignmentType.EnabledAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "fittext":                      TypeOfAssignment = AssignmentType.FitTextAssignment;                      Value = (int)nodes[2].Token.Value;                      break;              }
Magic Number,UIParser.Nodes,AssignmentNode,C:\repos\Afr0_Project-Dollhouse\Other\libs\UIParser\UIParser\Nodes\AssignmentNode.cs,InitChildren,The following statement contains a magic number: switch(nodes[0].Token.Text)              {                  case "stringDir":                      TypeOfAssignment = AssignmentType.StringDirAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "stringTable":                      TypeOfAssignment = AssignmentType.StringTableAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "leftArrowImage":                      TypeOfAssignment = AssignmentType.LeftArrowImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "rightArrowImage":                      TypeOfAssignment = AssignmentType.RightArrowImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "tracking":                      TypeOfAssignment = AssignmentType.TrackingAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "trigger":                      TypeOfAssignment = AssignmentType.TriggerAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "image":                      TypeOfAssignment = AssignmentType.ImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "position":                      TypeOfAssignment = AssignmentType.PositionAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "size":                      TypeOfAssignment = AssignmentType.SizeAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "id":                      TypeOfAssignment = AssignmentType.IDAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "orientation":                      TypeOfAssignment = AssignmentType.OrientationAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "opaque":                      TypeOfAssignment = AssignmentType.OpaqueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "assetID":                      TypeOfAssignment = AssignmentType.AssetIDAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "stringIndex":                      TypeOfAssignment = AssignmentType.StringIndexAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "text":                      TypeOfAssignment = AssignmentType.TextAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "font":                      TypeOfAssignment = AssignmentType.FontAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "textColorSelected":                      TypeOfAssignment = AssignmentType.TextColorSelectedAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textColorHighlighted":                      TypeOfAssignment = AssignmentType.TextColorHighlightedAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textColorDisabled":                      TypeOfAssignment = AssignmentType.TextColorDisabledAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textButton":                      TypeOfAssignment = AssignmentType.TextButtonAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "color":                      TypeOfAssignment = AssignmentType.ColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "alignment":                      TypeOfAssignment = AssignmentType.AlignmentAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "backColor":                      TypeOfAssignment = AssignmentType.BackColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "frameOnFocus":                      TypeOfAssignment = AssignmentType.FrameOnFocusAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "transparent":                      TypeOfAssignment = AssignmentType.TransparentAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "capacity":                      TypeOfAssignment = AssignmentType.CapacityAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "lines":                      TypeOfAssignment = AssignmentType.LinesAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "flashOnEmpty":                      TypeOfAssignment = AssignmentType.FlashOnEmptyAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "thumbImageSize":                      TypeOfAssignment = AssignmentType.ThumbImageSizeAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "thumbImageOffsets":                      TypeOfAssignment = AssignmentType.ThumbImageOffsetsAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "thumbButtonImage":                      TypeOfAssignment = AssignmentType.ThumbButtonImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "wrapped":                      TypeOfAssignment = AssignmentType.WrappedAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "textColor":                      TypeOfAssignment = AssignmentType.TextColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "mode":                      TypeOfAssignment = AssignmentType.ModeAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "scrollBarImage":                      TypeOfAssignment = AssignmentType.ScrollBarImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "scrollBarGutter":                      TypeOfAssignment = AssignmentType.ScrollBarGutterAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "scrollBarType":                      TypeOfAssignment = AssignmentType.ScrollBarTypeAssignment;                      Value = Value = int.Parse(nodes[2].Token.Text);                      break;                  case "enableIME":                      TypeOfAssignment = AssignmentType.EnableIMEAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "highlighted":                      TypeOfAssignment = AssignmentType.HighlightedAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "minValue":                      TypeOfAssignment = AssignmentType.MinValueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "maxValue":                      TypeOfAssignment = AssignmentType.MaxValueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "pageSize":                      TypeOfAssignment = AssignmentType.PageSizeAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "cursorColor":                      TypeOfAssignment = AssignmentType.CursorColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "toolTip":                      TypeOfAssignment = AssignmentType.TooltipAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "tooltip":                      TypeOfAssignment = AssignmentType.TooltipAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "MouseTransparent":                      TypeOfAssignment = AssignmentType.MouseTransparentAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "imagestates":                      TypeOfAssignment = AssignmentType.ImageStatesAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "backgroundColor":                      TypeOfAssignment = AssignmentType.BackgroundColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "framecolor":                      TypeOfAssignment = AssignmentType.FrameColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "alignments":                      TypeOfAssignment = AssignmentType.AlignmentsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "visibleRows":                      TypeOfAssignment = AssignmentType.VisibleRowsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "columns":                      TypeOfAssignment = AssignmentType.ColumnsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "rowHeight":                      TypeOfAssignment = AssignmentType.RowHeightAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "fillColor":                      TypeOfAssignment = AssignmentType.FillColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "selectionFillColor":                      TypeOfAssignment = AssignmentType.SelectionFillColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "cursor":                      TypeOfAssignment = AssignmentType.CursorAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "lineHeight":                      TypeOfAssignment = AssignmentType.LineHeightAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetL":                      TypeOfAssignment = AssignmentType.EdgeOffsetLAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetR":                      TypeOfAssignment = AssignmentType.EdgeOffsetRAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetT":                      TypeOfAssignment = AssignmentType.EdgeOffsetTAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetB":                      TypeOfAssignment = AssignmentType.EdgeOffsetBAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "foregroundImage":                      TypeOfAssignment = AssignmentType.ForegroundImageAssignment;                      Value = nodes[2].Token.Text;                      break;                  case "backgroundImage":                      TypeOfAssignment = AssignmentType.BackgroundImageAssignment;                      Value = nodes[2].Token.Text;                      break;                  case "value":                      TypeOfAssignment = AssignmentType.ValueAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "useBackgroundImage":                      TypeOfAssignment = AssignmentType.UseBackgroundImageAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "enabled":                      TypeOfAssignment = AssignmentType.EnabledAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "fittext":                      TypeOfAssignment = AssignmentType.FitTextAssignment;                      Value = (int)nodes[2].Token.Value;                      break;              }
Magic Number,UIParser.Nodes,AssignmentNode,C:\repos\Afr0_Project-Dollhouse\Other\libs\UIParser\UIParser\Nodes\AssignmentNode.cs,InitChildren,The following statement contains a magic number: switch(nodes[0].Token.Text)              {                  case "stringDir":                      TypeOfAssignment = AssignmentType.StringDirAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "stringTable":                      TypeOfAssignment = AssignmentType.StringTableAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "leftArrowImage":                      TypeOfAssignment = AssignmentType.LeftArrowImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "rightArrowImage":                      TypeOfAssignment = AssignmentType.RightArrowImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "tracking":                      TypeOfAssignment = AssignmentType.TrackingAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "trigger":                      TypeOfAssignment = AssignmentType.TriggerAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "image":                      TypeOfAssignment = AssignmentType.ImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "position":                      TypeOfAssignment = AssignmentType.PositionAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "size":                      TypeOfAssignment = AssignmentType.SizeAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "id":                      TypeOfAssignment = AssignmentType.IDAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "orientation":                      TypeOfAssignment = AssignmentType.OrientationAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "opaque":                      TypeOfAssignment = AssignmentType.OpaqueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "assetID":                      TypeOfAssignment = AssignmentType.AssetIDAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "stringIndex":                      TypeOfAssignment = AssignmentType.StringIndexAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "text":                      TypeOfAssignment = AssignmentType.TextAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "font":                      TypeOfAssignment = AssignmentType.FontAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "textColorSelected":                      TypeOfAssignment = AssignmentType.TextColorSelectedAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textColorHighlighted":                      TypeOfAssignment = AssignmentType.TextColorHighlightedAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textColorDisabled":                      TypeOfAssignment = AssignmentType.TextColorDisabledAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textButton":                      TypeOfAssignment = AssignmentType.TextButtonAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "color":                      TypeOfAssignment = AssignmentType.ColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "alignment":                      TypeOfAssignment = AssignmentType.AlignmentAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "backColor":                      TypeOfAssignment = AssignmentType.BackColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "frameOnFocus":                      TypeOfAssignment = AssignmentType.FrameOnFocusAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "transparent":                      TypeOfAssignment = AssignmentType.TransparentAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "capacity":                      TypeOfAssignment = AssignmentType.CapacityAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "lines":                      TypeOfAssignment = AssignmentType.LinesAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "flashOnEmpty":                      TypeOfAssignment = AssignmentType.FlashOnEmptyAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "thumbImageSize":                      TypeOfAssignment = AssignmentType.ThumbImageSizeAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "thumbImageOffsets":                      TypeOfAssignment = AssignmentType.ThumbImageOffsetsAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "thumbButtonImage":                      TypeOfAssignment = AssignmentType.ThumbButtonImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "wrapped":                      TypeOfAssignment = AssignmentType.WrappedAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "textColor":                      TypeOfAssignment = AssignmentType.TextColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "mode":                      TypeOfAssignment = AssignmentType.ModeAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "scrollBarImage":                      TypeOfAssignment = AssignmentType.ScrollBarImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "scrollBarGutter":                      TypeOfAssignment = AssignmentType.ScrollBarGutterAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "scrollBarType":                      TypeOfAssignment = AssignmentType.ScrollBarTypeAssignment;                      Value = Value = int.Parse(nodes[2].Token.Text);                      break;                  case "enableIME":                      TypeOfAssignment = AssignmentType.EnableIMEAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "highlighted":                      TypeOfAssignment = AssignmentType.HighlightedAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "minValue":                      TypeOfAssignment = AssignmentType.MinValueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "maxValue":                      TypeOfAssignment = AssignmentType.MaxValueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "pageSize":                      TypeOfAssignment = AssignmentType.PageSizeAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "cursorColor":                      TypeOfAssignment = AssignmentType.CursorColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "toolTip":                      TypeOfAssignment = AssignmentType.TooltipAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "tooltip":                      TypeOfAssignment = AssignmentType.TooltipAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "MouseTransparent":                      TypeOfAssignment = AssignmentType.MouseTransparentAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "imagestates":                      TypeOfAssignment = AssignmentType.ImageStatesAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "backgroundColor":                      TypeOfAssignment = AssignmentType.BackgroundColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "framecolor":                      TypeOfAssignment = AssignmentType.FrameColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "alignments":                      TypeOfAssignment = AssignmentType.AlignmentsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "visibleRows":                      TypeOfAssignment = AssignmentType.VisibleRowsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "columns":                      TypeOfAssignment = AssignmentType.ColumnsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "rowHeight":                      TypeOfAssignment = AssignmentType.RowHeightAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "fillColor":                      TypeOfAssignment = AssignmentType.FillColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "selectionFillColor":                      TypeOfAssignment = AssignmentType.SelectionFillColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "cursor":                      TypeOfAssignment = AssignmentType.CursorAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "lineHeight":                      TypeOfAssignment = AssignmentType.LineHeightAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetL":                      TypeOfAssignment = AssignmentType.EdgeOffsetLAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetR":                      TypeOfAssignment = AssignmentType.EdgeOffsetRAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetT":                      TypeOfAssignment = AssignmentType.EdgeOffsetTAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetB":                      TypeOfAssignment = AssignmentType.EdgeOffsetBAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "foregroundImage":                      TypeOfAssignment = AssignmentType.ForegroundImageAssignment;                      Value = nodes[2].Token.Text;                      break;                  case "backgroundImage":                      TypeOfAssignment = AssignmentType.BackgroundImageAssignment;                      Value = nodes[2].Token.Text;                      break;                  case "value":                      TypeOfAssignment = AssignmentType.ValueAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "useBackgroundImage":                      TypeOfAssignment = AssignmentType.UseBackgroundImageAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "enabled":                      TypeOfAssignment = AssignmentType.EnabledAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "fittext":                      TypeOfAssignment = AssignmentType.FitTextAssignment;                      Value = (int)nodes[2].Token.Value;                      break;              }
Magic Number,UIParser.Nodes,AssignmentNode,C:\repos\Afr0_Project-Dollhouse\Other\libs\UIParser\UIParser\Nodes\AssignmentNode.cs,InitChildren,The following statement contains a magic number: switch(nodes[0].Token.Text)              {                  case "stringDir":                      TypeOfAssignment = AssignmentType.StringDirAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "stringTable":                      TypeOfAssignment = AssignmentType.StringTableAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "leftArrowImage":                      TypeOfAssignment = AssignmentType.LeftArrowImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "rightArrowImage":                      TypeOfAssignment = AssignmentType.RightArrowImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "tracking":                      TypeOfAssignment = AssignmentType.TrackingAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "trigger":                      TypeOfAssignment = AssignmentType.TriggerAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "image":                      TypeOfAssignment = AssignmentType.ImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "position":                      TypeOfAssignment = AssignmentType.PositionAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "size":                      TypeOfAssignment = AssignmentType.SizeAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "id":                      TypeOfAssignment = AssignmentType.IDAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "orientation":                      TypeOfAssignment = AssignmentType.OrientationAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "opaque":                      TypeOfAssignment = AssignmentType.OpaqueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "assetID":                      TypeOfAssignment = AssignmentType.AssetIDAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "stringIndex":                      TypeOfAssignment = AssignmentType.StringIndexAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "text":                      TypeOfAssignment = AssignmentType.TextAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "font":                      TypeOfAssignment = AssignmentType.FontAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "textColorSelected":                      TypeOfAssignment = AssignmentType.TextColorSelectedAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textColorHighlighted":                      TypeOfAssignment = AssignmentType.TextColorHighlightedAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textColorDisabled":                      TypeOfAssignment = AssignmentType.TextColorDisabledAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textButton":                      TypeOfAssignment = AssignmentType.TextButtonAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "color":                      TypeOfAssignment = AssignmentType.ColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "alignment":                      TypeOfAssignment = AssignmentType.AlignmentAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "backColor":                      TypeOfAssignment = AssignmentType.BackColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "frameOnFocus":                      TypeOfAssignment = AssignmentType.FrameOnFocusAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "transparent":                      TypeOfAssignment = AssignmentType.TransparentAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "capacity":                      TypeOfAssignment = AssignmentType.CapacityAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "lines":                      TypeOfAssignment = AssignmentType.LinesAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "flashOnEmpty":                      TypeOfAssignment = AssignmentType.FlashOnEmptyAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "thumbImageSize":                      TypeOfAssignment = AssignmentType.ThumbImageSizeAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "thumbImageOffsets":                      TypeOfAssignment = AssignmentType.ThumbImageOffsetsAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "thumbButtonImage":                      TypeOfAssignment = AssignmentType.ThumbButtonImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "wrapped":                      TypeOfAssignment = AssignmentType.WrappedAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "textColor":                      TypeOfAssignment = AssignmentType.TextColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "mode":                      TypeOfAssignment = AssignmentType.ModeAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "scrollBarImage":                      TypeOfAssignment = AssignmentType.ScrollBarImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "scrollBarGutter":                      TypeOfAssignment = AssignmentType.ScrollBarGutterAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "scrollBarType":                      TypeOfAssignment = AssignmentType.ScrollBarTypeAssignment;                      Value = Value = int.Parse(nodes[2].Token.Text);                      break;                  case "enableIME":                      TypeOfAssignment = AssignmentType.EnableIMEAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "highlighted":                      TypeOfAssignment = AssignmentType.HighlightedAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "minValue":                      TypeOfAssignment = AssignmentType.MinValueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "maxValue":                      TypeOfAssignment = AssignmentType.MaxValueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "pageSize":                      TypeOfAssignment = AssignmentType.PageSizeAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "cursorColor":                      TypeOfAssignment = AssignmentType.CursorColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "toolTip":                      TypeOfAssignment = AssignmentType.TooltipAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "tooltip":                      TypeOfAssignment = AssignmentType.TooltipAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "MouseTransparent":                      TypeOfAssignment = AssignmentType.MouseTransparentAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "imagestates":                      TypeOfAssignment = AssignmentType.ImageStatesAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "backgroundColor":                      TypeOfAssignment = AssignmentType.BackgroundColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "framecolor":                      TypeOfAssignment = AssignmentType.FrameColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "alignments":                      TypeOfAssignment = AssignmentType.AlignmentsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "visibleRows":                      TypeOfAssignment = AssignmentType.VisibleRowsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "columns":                      TypeOfAssignment = AssignmentType.ColumnsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "rowHeight":                      TypeOfAssignment = AssignmentType.RowHeightAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "fillColor":                      TypeOfAssignment = AssignmentType.FillColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "selectionFillColor":                      TypeOfAssignment = AssignmentType.SelectionFillColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "cursor":                      TypeOfAssignment = AssignmentType.CursorAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "lineHeight":                      TypeOfAssignment = AssignmentType.LineHeightAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetL":                      TypeOfAssignment = AssignmentType.EdgeOffsetLAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetR":                      TypeOfAssignment = AssignmentType.EdgeOffsetRAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetT":                      TypeOfAssignment = AssignmentType.EdgeOffsetTAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetB":                      TypeOfAssignment = AssignmentType.EdgeOffsetBAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "foregroundImage":                      TypeOfAssignment = AssignmentType.ForegroundImageAssignment;                      Value = nodes[2].Token.Text;                      break;                  case "backgroundImage":                      TypeOfAssignment = AssignmentType.BackgroundImageAssignment;                      Value = nodes[2].Token.Text;                      break;                  case "value":                      TypeOfAssignment = AssignmentType.ValueAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "useBackgroundImage":                      TypeOfAssignment = AssignmentType.UseBackgroundImageAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "enabled":                      TypeOfAssignment = AssignmentType.EnabledAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "fittext":                      TypeOfAssignment = AssignmentType.FitTextAssignment;                      Value = (int)nodes[2].Token.Value;                      break;              }
Magic Number,UIParser.Nodes,DefineImageNode,C:\repos\Afr0_Project-Dollhouse\Other\libs\UIParser\UIParser\Nodes\DefineImageNode.cs,InitChildren,The following statement contains a magic number: AssetID = nodes[2].ChildNodes[0].ChildNodes[0].ChildNodes[2].Token.Text.Replace("\""' "");
Magic Number,UIParser.Nodes,DefineImageNode,C:\repos\Afr0_Project-Dollhouse\Other\libs\UIParser\UIParser\Nodes\DefineImageNode.cs,InitChildren,The following statement contains a magic number: AssetID = nodes[2].ChildNodes[0].ChildNodes[0].ChildNodes[2].Token.Text.Replace("\""' "");
Magic Number,UIParser.Nodes,DefineImageNode,C:\repos\Afr0_Project-Dollhouse\Other\libs\UIParser\UIParser\Nodes\DefineImageNode.cs,InitChildren,The following statement contains a magic number: AssetID = AssetID.Substring(2);
Magic Number,UIParser.Nodes,DefineStringNode,C:\repos\Afr0_Project-Dollhouse\Other\libs\UIParser\UIParser\Nodes\DefineStringNode.cs,InitChildren,The following statement contains a magic number: StrIndex = (int)nodes[2].ChildNodes[0].ChildNodes[0].ChildNodes[2].Token.Value;
Magic Number,UIParser.Nodes,DefineStringNode,C:\repos\Afr0_Project-Dollhouse\Other\libs\UIParser\UIParser\Nodes\DefineStringNode.cs,InitChildren,The following statement contains a magic number: StrIndex = (int)nodes[2].ChildNodes[0].ChildNodes[0].ChildNodes[2].Token.Value;
Magic Number,UIParser.Nodes,SetControlPropsNode,C:\repos\Afr0_Project-Dollhouse\Other\libs\UIParser\UIParser\Nodes\SetControlPropsNode.cs,InitChildren,The following statement contains a magic number: if (nodes[2].AstNode != null)                  AssignmentBlock = (AssignmentBlockNode)nodes[2].AstNode;
Magic Number,UIParser.Nodes,SetControlPropsNode,C:\repos\Afr0_Project-Dollhouse\Other\libs\UIParser\UIParser\Nodes\SetControlPropsNode.cs,InitChildren,The following statement contains a magic number: if (nodes[2].AstNode != null)                  AssignmentBlock = (AssignmentBlockNode)nodes[2].AstNode;
Magic Number,UIParser.Nodes,SetControlPropsNode,C:\repos\Afr0_Project-Dollhouse\Other\libs\UIParser\UIParser\Nodes\SetControlPropsNode.cs,InitChildren,The following statement contains a magic number: foreach(AssignmentNode ANode in AssignmentBlock.ChildNodes[0].ChildNodes)              {                  switch(ANode.TypeOfAssignment)                  {                      case AssignmentType.ImageAssignment:                          Image = ANode.StrValue;                          break;                      case AssignmentType.PositionAssignment:                          PositionAssignment = new int[2];                          PositionAssignment[0] = ANode.Array.Numbers[0];                          PositionAssignment[1] = ANode.Array.Numbers[1];                          break;                      case AssignmentType.SizeAssignment:                          Size = ANode.Array;                          break;                      case AssignmentType.ThumbSizeAssignment:                          ThumbSize = ANode.Array;                          break;                      case AssignmentType.ThumbMarginsAssignment:                          ThumbMargins = ANode.Array;                          break;                      case AssignmentType.ThumbImageSizeAssignment:                          ThumbImageSize = ANode.Array;                          break;                      case AssignmentType.ThumbImageOffsetsAssignment:                          ThumbImageOffsets = ANode.Array;                          break;                      case AssignmentType.ThumbButtonImageAssignment:                          ThumbButtonImage = ANode.StrValue;                          break;                  }              }
Missing Default,UIParser.Nodes,AddButtonNode,C:\repos\Afr0_Project-Dollhouse\Other\libs\UIParser\UIParser\Nodes\AddButtonNode.cs,InitChildren,The following switch statement is missing a default case: switch (ANode.TypeOfAssignment)                  {                      case AssignmentType.PositionAssignment:                          ButtonPosition = ANode.Array;                          break;                      case AssignmentType.ImageAssignment:                          Image = ANode.StrValue;                          break;                      case AssignmentType.IDAssignment:                          ID = ANode.NumberValue;                          break;                      case AssignmentType.SizeAssignment:                          ButtonSize = ANode.Array;                          break;                      case AssignmentType.TextAssignment:                          Text = ANode.StrValue;                          break;                      case AssignmentType.TriggerAssignment:                          Trigger = ANode.NumberValue;                          break;                      case AssignmentType.TrackingAssignment:                          Tracking = ANode.NumberValue;                          break;                      case AssignmentType.TooltipAssignment:                          Tooltip = ANode.StrValue;                          break;                      case AssignmentType.ImageStatesAssignment:                          ImageStates = ANode.NumberValue;                          break;                      case AssignmentType.TextButtonAssignment:                          TextButton = ANode.NumberValue;                          break;                      case AssignmentType.FontAssignment:                          Font = ANode.NumberValue;                          break;                      case AssignmentType.TextColorAssignment:                          TextColor = ANode.Array;                          break;                      case AssignmentType.TextColorDisabledAssignment:                          TextColorDisabled = ANode.Array;                          break;                      case AssignmentType.TextColorHighlightedAssignment:                          TextColorHighlighted = ANode.Array;                          break;                      case AssignmentType.TextColorSelectedAssignment:                          TextColorSelected = ANode.Array;                          break;                  }
Missing Default,UIParser.Nodes,AddFormatedTextNode,C:\repos\Afr0_Project-Dollhouse\Other\libs\UIParser\UIParser\Nodes\AddFormatedTextNode.cs,InitChildren,The following switch statement is missing a default case: switch (ANode.TypeOfAssignment)                  {                      case AssignmentType.IDAssignment:                          ID = ANode.NumberValue;                          break;                      case AssignmentType.PositionAssignment:                          FormatedTextPosition = ANode.Array;                          break;                      case AssignmentType.SizeAssignment:                          Size = ANode.Array;                          break;                      case AssignmentType.OpaqueAssignment:                          Opaque = ANode.NumberValue;                          break;                      case AssignmentType.LineHeightAssignment:                          LineHeight = ANode.NumberValue;                          break;                      case AssignmentType.EdgeOffsetLAssignment:                          EdgeOffsetL = ANode.NumberValue;                          break;                      case AssignmentType.EdgeOffsetRAssignment:                          EdgeOffsetR = ANode.NumberValue;                          break;                      case AssignmentType.EdgeOffsetTAssignment:                          EdgeOffsetT = ANode.NumberValue;                          break;                      case AssignmentType.EdgeOffsetBAssignment:                          EdgeOffsetB = ANode.NumberValue;                          break;                  }
Missing Default,UIParser.Nodes,AddListboxNode,C:\repos\Afr0_Project-Dollhouse\Other\libs\UIParser\UIParser\Nodes\AddListboxNode.cs,InitChildren,The following switch statement is missing a default case: switch (ANode.TypeOfAssignment)                  {                      case AssignmentType.IDAssignment:                          ID = ANode.NumberValue;                          break;                      case AssignmentType.PositionAssignment:                          ListBoxPosition = ANode.Array;                          break;                      case AssignmentType.SizeAssignment:                          Size = ANode.Array;                          break;                      case AssignmentType.VisibleRowsAssignment:                          VisibleRows = ANode.NumberValue;                          break;                      case AssignmentType.ColumnsAssignment:                          Columns = ANode.NumberValue;                          break;                      case AssignmentType.AlignmentsAssignment:                          Alignments = ANode.NumberValue;                          break;                      case AssignmentType.FontAssignment:                          Font = ANode.NumberValue;                          break;                      case AssignmentType.RowHeightAssignment:                          RowHeight = ANode.NumberValue;                          break;                      case AssignmentType.TransparentAssignment:                          Transparent = ANode.NumberValue;                          break;                      case AssignmentType.FillColorAssignment:                          FillColor = ANode.Array;                          break;                      case AssignmentType.SelectionFillColorAssignment:                          SelectionFillColor = ANode.Array;                          break;                      case AssignmentType.CursorAssignment:                          Cursor = ANode.NumberValue;                          break;                  }
Missing Default,UIParser.Nodes,AddProgressBarNode,C:\repos\Afr0_Project-Dollhouse\Other\libs\UIParser\UIParser\Nodes\AddProgressBarNode.cs,InitChildren,The following switch statement is missing a default case: switch (ANode.TypeOfAssignment)                  {                      case AssignmentType.IDAssignment:                          ID = ANode.NumberValue;                          break;                      case AssignmentType.PositionAssignment:                          ProgressbarPosition = ANode.Array;                          break;                      case AssignmentType.ForegroundImageAssignment:                          ForegroundImage = ANode.StrValue;                          break;                      case AssignmentType.BackgroundImageAssignment:                          BackgroundImage = ANode.StrValue;                          break;                      case AssignmentType.MaxValueAssignment:                          MaximumValue = ANode.NumberValue;                          break;                      case AssignmentType.MinValueAssignment:                          MinimumValue = ANode.NumberValue;                          break;                      case AssignmentType.ValueAssignment:                          Value = ANode.NumberValue;                          break;                  }
Missing Default,UIParser.Nodes,AddSliderNode,C:\repos\Afr0_Project-Dollhouse\Other\libs\UIParser\UIParser\Nodes\AddSliderNode.cs,InitChildren,The following switch statement is missing a default case: switch (ANode.TypeOfAssignment)                  {                      case AssignmentType.PositionAssignment:                          SliderPosition = ANode.Array;                          break;                      case AssignmentType.ImageAssignment:                          Image = ANode.StrValue;                          break;                      case AssignmentType.IDAssignment:                          ID = ANode.NumberValue;                          break;                      case AssignmentType.SizeAssignment:                          Size = ANode.Array;                          break;                      case AssignmentType.MinValueAssignment:                          MinimumValue = ANode.NumberValue;                          break;                      case AssignmentType.MaxValueAssignment:                          MaximumValue = ANode.NumberValue;                          break;                      case AssignmentType.OrientationAssignment:                          Orientation = ANode.NumberValue;                          break;                  }
Missing Default,UIParser.Nodes,AddTextEditNode,C:\repos\Afr0_Project-Dollhouse\Other\libs\UIParser\UIParser\Nodes\AddTextEditNode.cs,InitChildren,The following switch statement is missing a default case: switch (ANode.TypeOfAssignment)                  {                      case AssignmentType.IDAssignment:                          ID = ANode.NumberValue;                          break;                      case AssignmentType.PositionAssignment:                          TextEditPosition = ANode.Array;                          break;                      case AssignmentType.SizeAssignment:                          Size = ANode.Array;                          break;                      case AssignmentType.FontAssignment:                          Font = ANode.NumberValue;                          break;                      case AssignmentType.LinesAssignment:                          Lines = ANode.NumberValue;                          break;                      case AssignmentType.CapacityAssignment:                          Capacity = ANode.NumberValue;                          break;                      case AssignmentType.FrameOnFocusAssignment:                          FrameOnFocus = ANode.NumberValue;                          break;                      case AssignmentType.ColorAssignment:                          Color = ANode.Array;                          break;                      case AssignmentType.BackColorAssignment:                          BackColor = ANode.Array;                          break;                      case AssignmentType.CursorColorAssignment:                          CursorColor = ANode.Array;                          break;                      case AssignmentType.FrameColorAssignment:                          FrameColor = ANode.Array;                          break;                      case AssignmentType.TransparentAssignment:                          Transparent = ANode.NumberValue;                          break;                      case AssignmentType.AlignmentAssignment:                          Alignment = ANode.NumberValue;                          break;                      case AssignmentType.FlashOnEmptyAssignment:                          FlashOnEmpty = ANode.NumberValue;                          break;                      case AssignmentType.TooltipAssignment:                          Tooltip = ANode.StrValue;                          break;                  }
Missing Default,UIParser.Nodes,AddTextNode,C:\repos\Afr0_Project-Dollhouse\Other\libs\UIParser\UIParser\Nodes\AddTextNode.cs,InitChildren,The following switch statement is missing a default case: switch (ANode.TypeOfAssignment)                  {                      case AssignmentType.IDAssignment:                          ID = ANode.NumberValue;                          break;                      case AssignmentType.PositionAssignment:                          TextPosition = ANode.Array;                          break;                      case AssignmentType.SizeAssignment:                          Size = ANode.Array;                          break;                      case AssignmentType.ColorAssignment:                          Color = ANode.Array;                          break;                      case AssignmentType.TextAssignment:                          Text = ANode.StrValue;                          break;                      case AssignmentType.AlignmentAssignment:                          Alignment = (TextAlignment)ANode.NumberValue;                          break;                      case AssignmentType.FontAssignment:                          Font = ANode.NumberValue;                          break;                      case AssignmentType.OpaqueAssignment:                          Opaque = ANode.NumberValue;                          break;                  }
Missing Default,UIParser.Nodes,AssignmentNode,C:\repos\Afr0_Project-Dollhouse\Other\libs\UIParser\UIParser\Nodes\AssignmentNode.cs,InitChildren,The following switch statement is missing a default case: switch(nodes[0].Token.Text)              {                  case "stringDir":                      TypeOfAssignment = AssignmentType.StringDirAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "stringTable":                      TypeOfAssignment = AssignmentType.StringTableAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "leftArrowImage":                      TypeOfAssignment = AssignmentType.LeftArrowImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "rightArrowImage":                      TypeOfAssignment = AssignmentType.RightArrowImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "tracking":                      TypeOfAssignment = AssignmentType.TrackingAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "trigger":                      TypeOfAssignment = AssignmentType.TriggerAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "image":                      TypeOfAssignment = AssignmentType.ImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "position":                      TypeOfAssignment = AssignmentType.PositionAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "size":                      TypeOfAssignment = AssignmentType.SizeAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "id":                      TypeOfAssignment = AssignmentType.IDAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "orientation":                      TypeOfAssignment = AssignmentType.OrientationAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "opaque":                      TypeOfAssignment = AssignmentType.OpaqueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "assetID":                      TypeOfAssignment = AssignmentType.AssetIDAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "stringIndex":                      TypeOfAssignment = AssignmentType.StringIndexAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "text":                      TypeOfAssignment = AssignmentType.TextAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "font":                      TypeOfAssignment = AssignmentType.FontAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "textColorSelected":                      TypeOfAssignment = AssignmentType.TextColorSelectedAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textColorHighlighted":                      TypeOfAssignment = AssignmentType.TextColorHighlightedAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textColorDisabled":                      TypeOfAssignment = AssignmentType.TextColorDisabledAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "textButton":                      TypeOfAssignment = AssignmentType.TextButtonAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "color":                      TypeOfAssignment = AssignmentType.ColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "alignment":                      TypeOfAssignment = AssignmentType.AlignmentAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "backColor":                      TypeOfAssignment = AssignmentType.BackColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "frameOnFocus":                      TypeOfAssignment = AssignmentType.FrameOnFocusAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "transparent":                      TypeOfAssignment = AssignmentType.TransparentAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "capacity":                      TypeOfAssignment = AssignmentType.CapacityAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "lines":                      TypeOfAssignment = AssignmentType.LinesAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "flashOnEmpty":                      TypeOfAssignment = AssignmentType.FlashOnEmptyAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "thumbImageSize":                      TypeOfAssignment = AssignmentType.ThumbImageSizeAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "thumbImageOffsets":                      TypeOfAssignment = AssignmentType.ThumbImageOffsetsAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "thumbButtonImage":                      TypeOfAssignment = AssignmentType.ThumbButtonImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "wrapped":                      TypeOfAssignment = AssignmentType.WrappedAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "textColor":                      TypeOfAssignment = AssignmentType.TextColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "mode":                      TypeOfAssignment = AssignmentType.ModeAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "scrollBarImage":                      TypeOfAssignment = AssignmentType.ScrollBarImageAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "scrollBarGutter":                      TypeOfAssignment = AssignmentType.ScrollBarGutterAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "scrollBarType":                      TypeOfAssignment = AssignmentType.ScrollBarTypeAssignment;                      Value = Value = int.Parse(nodes[2].Token.Text);                      break;                  case "enableIME":                      TypeOfAssignment = AssignmentType.EnableIMEAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "highlighted":                      TypeOfAssignment = AssignmentType.HighlightedAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "minValue":                      TypeOfAssignment = AssignmentType.MinValueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "maxValue":                      TypeOfAssignment = AssignmentType.MaxValueAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "pageSize":                      TypeOfAssignment = AssignmentType.PageSizeAssignment;                      Value = int.Parse(nodes[2].Token.Text);                      break;                  case "cursorColor":                      TypeOfAssignment = AssignmentType.CursorColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "toolTip":                      TypeOfAssignment = AssignmentType.TooltipAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "tooltip":                      TypeOfAssignment = AssignmentType.TooltipAssignment;                      Value = (string)nodes[2].Token.Text;                      break;                  case "MouseTransparent":                      TypeOfAssignment = AssignmentType.MouseTransparentAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "imagestates":                      TypeOfAssignment = AssignmentType.ImageStatesAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "backgroundColor":                      TypeOfAssignment = AssignmentType.BackgroundColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "framecolor":                      TypeOfAssignment = AssignmentType.FrameColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "alignments":                      TypeOfAssignment = AssignmentType.AlignmentsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "visibleRows":                      TypeOfAssignment = AssignmentType.VisibleRowsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "columns":                      TypeOfAssignment = AssignmentType.ColumnsAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "rowHeight":                      TypeOfAssignment = AssignmentType.RowHeightAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "fillColor":                      TypeOfAssignment = AssignmentType.FillColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "selectionFillColor":                      TypeOfAssignment = AssignmentType.SelectionFillColorAssignment;                      Value = (ArrayListNode)nodes[2].ChildNodes[1].AstNode;                      break;                  case "cursor":                      TypeOfAssignment = AssignmentType.CursorAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "lineHeight":                      TypeOfAssignment = AssignmentType.LineHeightAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetL":                      TypeOfAssignment = AssignmentType.EdgeOffsetLAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetR":                      TypeOfAssignment = AssignmentType.EdgeOffsetRAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetT":                      TypeOfAssignment = AssignmentType.EdgeOffsetTAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "edgeOffsetB":                      TypeOfAssignment = AssignmentType.EdgeOffsetBAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "foregroundImage":                      TypeOfAssignment = AssignmentType.ForegroundImageAssignment;                      Value = nodes[2].Token.Text;                      break;                  case "backgroundImage":                      TypeOfAssignment = AssignmentType.BackgroundImageAssignment;                      Value = nodes[2].Token.Text;                      break;                  case "value":                      TypeOfAssignment = AssignmentType.ValueAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "useBackgroundImage":                      TypeOfAssignment = AssignmentType.UseBackgroundImageAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "enabled":                      TypeOfAssignment = AssignmentType.EnabledAssignment;                      Value = (int)nodes[2].Token.Value;                      break;                  case "fittext":                      TypeOfAssignment = AssignmentType.FitTextAssignment;                      Value = (int)nodes[2].Token.Value;                      break;              }
Missing Default,UIParser.Nodes,SetControlPropsNode,C:\repos\Afr0_Project-Dollhouse\Other\libs\UIParser\UIParser\Nodes\SetControlPropsNode.cs,InitChildren,The following switch statement is missing a default case: switch(ANode.TypeOfAssignment)                  {                      case AssignmentType.ImageAssignment:                          Image = ANode.StrValue;                          break;                      case AssignmentType.PositionAssignment:                          PositionAssignment = new int[2];                          PositionAssignment[0] = ANode.Array.Numbers[0];                          PositionAssignment[1] = ANode.Array.Numbers[1];                          break;                      case AssignmentType.SizeAssignment:                          Size = ANode.Array;                          break;                      case AssignmentType.ThumbSizeAssignment:                          ThumbSize = ANode.Array;                          break;                      case AssignmentType.ThumbMarginsAssignment:                          ThumbMargins = ANode.Array;                          break;                      case AssignmentType.ThumbImageSizeAssignment:                          ThumbImageSize = ANode.Array;                          break;                      case AssignmentType.ThumbImageOffsetsAssignment:                          ThumbImageOffsets = ANode.Array;                          break;                      case AssignmentType.ThumbButtonImageAssignment:                          ThumbButtonImage = ANode.StrValue;                          break;                  }
Missing Default,UIParser.Nodes,SetSharedPropsNode,C:\repos\Afr0_Project-Dollhouse\Other\libs\UIParser\UIParser\Nodes\SetSharedPropsNode.cs,InitChildren,The following switch statement is missing a default case: switch (ANode.TypeOfAssignment)                  {                      case AssignmentType.StringTableAssignment:                          StringTable = ANode.NumberValue;                          break;                      case AssignmentType.PositionAssignment:                          ControlPosition = ANode.Array;                          break;                      case AssignmentType.ColorAssignment:                          Color = ANode.Array;                          break;                      case AssignmentType.TextColorAssignment:                          TextColor = ANode.Array;                          break;                      case AssignmentType.TextColorSelectedAssignment:                          TextColorSelected = ANode.Array;                          break;                      case AssignmentType.TextColorHighlightedAssignment:                          TextColorHighlighted = ANode.Array;                          break;                      case AssignmentType.TextColorDisabledAssignment:                          TextColorDisabled = ANode.Array;                          break;                      case AssignmentType.BackColorAssignment:                          BackColor = ANode.Array;                          break;                      case AssignmentType.CursorAssignment:                          CursorColor = ANode.Array;                          break;                      case AssignmentType.OpaqueAssignment:                          Opaque = ANode.NumberValue;                          break;                      case AssignmentType.TransparentAssignment:                          Transparent = ANode.NumberValue;                          break;                      case AssignmentType.AlignmentAssignment:                          Alignment = ANode.NumberValue;                          break;                      case AssignmentType.ImageAssignment:                          Image = ANode.StrValue;                          break;                      case AssignmentType.TooltipAssignment:                          Tooltip = ANode.StrValue;                          break;                      case AssignmentType.TextAssignment:                          Text = ANode.StrValue;                          break;                      case AssignmentType.SizeAssignment:                          Size = ANode.Array;                          break;                      case AssignmentType.OrientationAssignment:                          Orientation = ANode.NumberValue;                          break;                      case AssignmentType.FontAssignment:                          Font = ANode.NumberValue;                          break;                      case AssignmentType.TextButtonAssignment:                          TextButton = (ANode.NumberValue == 1 ? true : false);                          break;                  }
