Implementation smell,Namespace,Class,File,Method,Description
Long Method,Vitaboy,AvatarBase,C:\repos\Afr0_Project-Dollhouse\TSOClient\Vitaboy\Vitaboy\AvatarBase.cs,Render,The method has 320 lines of code.
Complex Method,Vitaboy,AvatarBase,C:\repos\Afr0_Project-Dollhouse\TSOClient\Vitaboy\Vitaboy\AvatarBase.cs,ChangeOutfit,Cyclomatic complexity of the method is 11
Complex Method,Vitaboy,AvatarBase,C:\repos\Afr0_Project-Dollhouse\TSOClient\Vitaboy\Vitaboy\AvatarBase.cs,Render,Cyclomatic complexity of the method is 27
Long Statement,Vitaboy,AvatarBase,C:\repos\Afr0_Project-Dollhouse\TSOClient\Vitaboy\Vitaboy\AvatarBase.cs,TransformVertices,The length of the statement  "                            Matrix translatedMatrix = Matrix.CreateTranslation(new Vector3(relativeVertex.Position.X' relativeVertex.Position.Y' relativeVertex.Position.Z)) * bone.AbsoluteMatrix; " is 167.
Long Statement,Vitaboy,AvatarBase,C:\repos\Afr0_Project-Dollhouse\TSOClient\Vitaboy\Vitaboy\AvatarBase.cs,TransformVertices,The length of the statement  "                            translatedMatrix = Matrix.CreateTranslation(new Vector3(relativeVertex.Normal.X' relativeVertex.Normal.Y' relativeVertex.Normal.Z)) * bone.AbsoluteMatrix; " is 154.
Magic Number,Vitaboy,AvatarBase,C:\repos\Afr0_Project-Dollhouse\TSOClient\Vitaboy\Vitaboy\AvatarBase.cs,DegreesToRadians,The following statement contains a magic number: return (Math.PI / 180) * Angle;
Magic Number,Vitaboy,AvatarBase,C:\repos\Afr0_Project-Dollhouse\TSOClient\Vitaboy\Vitaboy\AvatarBase.cs,Update,The following statement contains a magic number: if (ShouldRotate)              {                  float Time = GTime.TotalGameTime.Ticks;                  float Phase = (Time % RotationSpeed) / RotationSpeed;                  double Multiplier = Math.Sin((Math.PI * 2) * Phase);                  double NewAngle = RotationStartAngle + (RotationRange * Multiplier);                    RotationY = (float)DegreesToRadians(NewAngle);              }
Magic Number,Vitaboy,AvatarBase,C:\repos\Afr0_Project-Dollhouse\TSOClient\Vitaboy\Vitaboy\AvatarBase.cs,Render,The following statement contains a magic number: if (HeadMesh != null)              {                  if (m_GPURender == false)                  {                      foreach (EffectPass Pass in m_HeadEffect.CurrentTechnique.Passes)                      {                          Pass.Apply();                            foreach (Vector3 Fce in HeadMesh.Faces)                          {                              // Draw                              VertexPositionNormalTexture[] Vertex = new VertexPositionNormalTexture[3];                              Vertex[0].Position = HeadMesh.TransformedVertices[(int)Fce.X].Position;                              Vertex[1].Position = HeadMesh.TransformedVertices[(int)Fce.Y].Position;                              Vertex[2].Position = HeadMesh.TransformedVertices[(int)Fce.Z].Position;                                Vertex[0].TextureCoordinate = HeadMesh.TransformedVertices[(int)Fce.X].TextureCoordinate;                              Vertex[1].TextureCoordinate = HeadMesh.TransformedVertices[(int)Fce.Y].TextureCoordinate;                              Vertex[2].TextureCoordinate = HeadMesh.TransformedVertices[(int)Fce.Z].TextureCoordinate;                                Vertex[0].Normal = HeadMesh.TransformedVertices[(int)Fce.X].Normal;                              Vertex[1].Normal = HeadMesh.TransformedVertices[(int)Fce.Y].Normal;                              Vertex[2].Normal = HeadMesh.TransformedVertices[(int)Fce.Z].Normal;                                m_Devc.DrawUserPrimitives(PrimitiveType.TriangleList' Vertex' 0' 1);                          }                            TransformVertices(HeadMesh' null' MeshType.Head);                      }                    }                  else                  {                      m_VitaboyShader.Parameters["VitaboyTexture"].SetValue(HeadTexture);                      m_VitaboyShader.Parameters["World"].SetValue(WorldMatrix);                      m_VitaboyShader.Parameters["ChildBones"].SetValue(GetAllBones(HeadMesh' Skel));                        //foreach (EffectPass Pass in m_VitaboyShader.Techniques["TransformHeadTechnique"].Passes)                      foreach (EffectPass Pass in m_VitaboyShader.Techniques["TransformVerticesTechnique"].Passes)                      {                          Pass.Apply();                            foreach (Vector3 Fce in HeadMesh.Faces)                          {                              VitaboyVertex[] Vertex = new VitaboyVertex[3];                              Vertex[0].Position = HeadMesh.RealVertices[(int)Fce.X].Position;                              Vertex[1].Position = HeadMesh.RealVertices[(int)Fce.Y].Position;                              Vertex[2].Position = HeadMesh.RealVertices[(int)Fce.Z].Position;                                Vertex[0].TextureCoordinate = HeadMesh.RealVertices[(int)Fce.X].TextureCoordinate;                              Vertex[1].TextureCoordinate = HeadMesh.RealVertices[(int)Fce.Y].TextureCoordinate;                              Vertex[2].TextureCoordinate = HeadMesh.RealVertices[(int)Fce.Z].TextureCoordinate;                                Vertex[0].Normal = HeadMesh.RealVertices[(int)Fce.X].Normal;                              Vertex[1].Normal = HeadMesh.RealVertices[(int)Fce.Y].Normal;                              Vertex[2].Normal = HeadMesh.RealVertices[(int)Fce.Z].Normal;                                //All the meshes except the body mesh only references one bone.                              Vertex[0].BoneBinding = 0;                              Vertex[1].BoneBinding = 0;                              Vertex[2].BoneBinding = 0;                                m_Devc.DrawUserPrimitives(PrimitiveType.TriangleList' Vertex' 0' 1);                          }                      }                  }              }
Magic Number,Vitaboy,AvatarBase,C:\repos\Afr0_Project-Dollhouse\TSOClient\Vitaboy\Vitaboy\AvatarBase.cs,Render,The following statement contains a magic number: if (HeadMesh != null)              {                  if (m_GPURender == false)                  {                      foreach (EffectPass Pass in m_HeadEffect.CurrentTechnique.Passes)                      {                          Pass.Apply();                            foreach (Vector3 Fce in HeadMesh.Faces)                          {                              // Draw                              VertexPositionNormalTexture[] Vertex = new VertexPositionNormalTexture[3];                              Vertex[0].Position = HeadMesh.TransformedVertices[(int)Fce.X].Position;                              Vertex[1].Position = HeadMesh.TransformedVertices[(int)Fce.Y].Position;                              Vertex[2].Position = HeadMesh.TransformedVertices[(int)Fce.Z].Position;                                Vertex[0].TextureCoordinate = HeadMesh.TransformedVertices[(int)Fce.X].TextureCoordinate;                              Vertex[1].TextureCoordinate = HeadMesh.TransformedVertices[(int)Fce.Y].TextureCoordinate;                              Vertex[2].TextureCoordinate = HeadMesh.TransformedVertices[(int)Fce.Z].TextureCoordinate;                                Vertex[0].Normal = HeadMesh.TransformedVertices[(int)Fce.X].Normal;                              Vertex[1].Normal = HeadMesh.TransformedVertices[(int)Fce.Y].Normal;                              Vertex[2].Normal = HeadMesh.TransformedVertices[(int)Fce.Z].Normal;                                m_Devc.DrawUserPrimitives(PrimitiveType.TriangleList' Vertex' 0' 1);                          }                            TransformVertices(HeadMesh' null' MeshType.Head);                      }                    }                  else                  {                      m_VitaboyShader.Parameters["VitaboyTexture"].SetValue(HeadTexture);                      m_VitaboyShader.Parameters["World"].SetValue(WorldMatrix);                      m_VitaboyShader.Parameters["ChildBones"].SetValue(GetAllBones(HeadMesh' Skel));                        //foreach (EffectPass Pass in m_VitaboyShader.Techniques["TransformHeadTechnique"].Passes)                      foreach (EffectPass Pass in m_VitaboyShader.Techniques["TransformVerticesTechnique"].Passes)                      {                          Pass.Apply();                            foreach (Vector3 Fce in HeadMesh.Faces)                          {                              VitaboyVertex[] Vertex = new VitaboyVertex[3];                              Vertex[0].Position = HeadMesh.RealVertices[(int)Fce.X].Position;                              Vertex[1].Position = HeadMesh.RealVertices[(int)Fce.Y].Position;                              Vertex[2].Position = HeadMesh.RealVertices[(int)Fce.Z].Position;                                Vertex[0].TextureCoordinate = HeadMesh.RealVertices[(int)Fce.X].TextureCoordinate;                              Vertex[1].TextureCoordinate = HeadMesh.RealVertices[(int)Fce.Y].TextureCoordinate;                              Vertex[2].TextureCoordinate = HeadMesh.RealVertices[(int)Fce.Z].TextureCoordinate;                                Vertex[0].Normal = HeadMesh.RealVertices[(int)Fce.X].Normal;                              Vertex[1].Normal = HeadMesh.RealVertices[(int)Fce.Y].Normal;                              Vertex[2].Normal = HeadMesh.RealVertices[(int)Fce.Z].Normal;                                //All the meshes except the body mesh only references one bone.                              Vertex[0].BoneBinding = 0;                              Vertex[1].BoneBinding = 0;                              Vertex[2].BoneBinding = 0;                                m_Devc.DrawUserPrimitives(PrimitiveType.TriangleList' Vertex' 0' 1);                          }                      }                  }              }
Magic Number,Vitaboy,AvatarBase,C:\repos\Afr0_Project-Dollhouse\TSOClient\Vitaboy\Vitaboy\AvatarBase.cs,Render,The following statement contains a magic number: if (HeadMesh != null)              {                  if (m_GPURender == false)                  {                      foreach (EffectPass Pass in m_HeadEffect.CurrentTechnique.Passes)                      {                          Pass.Apply();                            foreach (Vector3 Fce in HeadMesh.Faces)                          {                              // Draw                              VertexPositionNormalTexture[] Vertex = new VertexPositionNormalTexture[3];                              Vertex[0].Position = HeadMesh.TransformedVertices[(int)Fce.X].Position;                              Vertex[1].Position = HeadMesh.TransformedVertices[(int)Fce.Y].Position;                              Vertex[2].Position = HeadMesh.TransformedVertices[(int)Fce.Z].Position;                                Vertex[0].TextureCoordinate = HeadMesh.TransformedVertices[(int)Fce.X].TextureCoordinate;                              Vertex[1].TextureCoordinate = HeadMesh.TransformedVertices[(int)Fce.Y].TextureCoordinate;                              Vertex[2].TextureCoordinate = HeadMesh.TransformedVertices[(int)Fce.Z].TextureCoordinate;                                Vertex[0].Normal = HeadMesh.TransformedVertices[(int)Fce.X].Normal;                              Vertex[1].Normal = HeadMesh.TransformedVertices[(int)Fce.Y].Normal;                              Vertex[2].Normal = HeadMesh.TransformedVertices[(int)Fce.Z].Normal;                                m_Devc.DrawUserPrimitives(PrimitiveType.TriangleList' Vertex' 0' 1);                          }                            TransformVertices(HeadMesh' null' MeshType.Head);                      }                    }                  else                  {                      m_VitaboyShader.Parameters["VitaboyTexture"].SetValue(HeadTexture);                      m_VitaboyShader.Parameters["World"].SetValue(WorldMatrix);                      m_VitaboyShader.Parameters["ChildBones"].SetValue(GetAllBones(HeadMesh' Skel));                        //foreach (EffectPass Pass in m_VitaboyShader.Techniques["TransformHeadTechnique"].Passes)                      foreach (EffectPass Pass in m_VitaboyShader.Techniques["TransformVerticesTechnique"].Passes)                      {                          Pass.Apply();                            foreach (Vector3 Fce in HeadMesh.Faces)                          {                              VitaboyVertex[] Vertex = new VitaboyVertex[3];                              Vertex[0].Position = HeadMesh.RealVertices[(int)Fce.X].Position;                              Vertex[1].Position = HeadMesh.RealVertices[(int)Fce.Y].Position;                              Vertex[2].Position = HeadMesh.RealVertices[(int)Fce.Z].Position;                                Vertex[0].TextureCoordinate = HeadMesh.RealVertices[(int)Fce.X].TextureCoordinate;                              Vertex[1].TextureCoordinate = HeadMesh.RealVertices[(int)Fce.Y].TextureCoordinate;                              Vertex[2].TextureCoordinate = HeadMesh.RealVertices[(int)Fce.Z].TextureCoordinate;                                Vertex[0].Normal = HeadMesh.RealVertices[(int)Fce.X].Normal;                              Vertex[1].Normal = HeadMesh.RealVertices[(int)Fce.Y].Normal;                              Vertex[2].Normal = HeadMesh.RealVertices[(int)Fce.Z].Normal;                                //All the meshes except the body mesh only references one bone.                              Vertex[0].BoneBinding = 0;                              Vertex[1].BoneBinding = 0;                              Vertex[2].BoneBinding = 0;                                m_Devc.DrawUserPrimitives(PrimitiveType.TriangleList' Vertex' 0' 1);                          }                      }                  }              }
Magic Number,Vitaboy,AvatarBase,C:\repos\Afr0_Project-Dollhouse\TSOClient\Vitaboy\Vitaboy\AvatarBase.cs,Render,The following statement contains a magic number: if (HeadMesh != null)              {                  if (m_GPURender == false)                  {                      foreach (EffectPass Pass in m_HeadEffect.CurrentTechnique.Passes)                      {                          Pass.Apply();                            foreach (Vector3 Fce in HeadMesh.Faces)                          {                              // Draw                              VertexPositionNormalTexture[] Vertex = new VertexPositionNormalTexture[3];                              Vertex[0].Position = HeadMesh.TransformedVertices[(int)Fce.X].Position;                              Vertex[1].Position = HeadMesh.TransformedVertices[(int)Fce.Y].Position;                              Vertex[2].Position = HeadMesh.TransformedVertices[(int)Fce.Z].Position;                                Vertex[0].TextureCoordinate = HeadMesh.TransformedVertices[(int)Fce.X].TextureCoordinate;                              Vertex[1].TextureCoordinate = HeadMesh.TransformedVertices[(int)Fce.Y].TextureCoordinate;                              Vertex[2].TextureCoordinate = HeadMesh.TransformedVertices[(int)Fce.Z].TextureCoordinate;                                Vertex[0].Normal = HeadMesh.TransformedVertices[(int)Fce.X].Normal;                              Vertex[1].Normal = HeadMesh.TransformedVertices[(int)Fce.Y].Normal;                              Vertex[2].Normal = HeadMesh.TransformedVertices[(int)Fce.Z].Normal;                                m_Devc.DrawUserPrimitives(PrimitiveType.TriangleList' Vertex' 0' 1);                          }                            TransformVertices(HeadMesh' null' MeshType.Head);                      }                    }                  else                  {                      m_VitaboyShader.Parameters["VitaboyTexture"].SetValue(HeadTexture);                      m_VitaboyShader.Parameters["World"].SetValue(WorldMatrix);                      m_VitaboyShader.Parameters["ChildBones"].SetValue(GetAllBones(HeadMesh' Skel));                        //foreach (EffectPass Pass in m_VitaboyShader.Techniques["TransformHeadTechnique"].Passes)                      foreach (EffectPass Pass in m_VitaboyShader.Techniques["TransformVerticesTechnique"].Passes)                      {                          Pass.Apply();                            foreach (Vector3 Fce in HeadMesh.Faces)                          {                              VitaboyVertex[] Vertex = new VitaboyVertex[3];                              Vertex[0].Position = HeadMesh.RealVertices[(int)Fce.X].Position;                              Vertex[1].Position = HeadMesh.RealVertices[(int)Fce.Y].Position;                              Vertex[2].Position = HeadMesh.RealVertices[(int)Fce.Z].Position;                                Vertex[0].TextureCoordinate = HeadMesh.RealVertices[(int)Fce.X].TextureCoordinate;                              Vertex[1].TextureCoordinate = HeadMesh.RealVertices[(int)Fce.Y].TextureCoordinate;                              Vertex[2].TextureCoordinate = HeadMesh.RealVertices[(int)Fce.Z].TextureCoordinate;                                Vertex[0].Normal = HeadMesh.RealVertices[(int)Fce.X].Normal;                              Vertex[1].Normal = HeadMesh.RealVertices[(int)Fce.Y].Normal;                              Vertex[2].Normal = HeadMesh.RealVertices[(int)Fce.Z].Normal;                                //All the meshes except the body mesh only references one bone.                              Vertex[0].BoneBinding = 0;                              Vertex[1].BoneBinding = 0;                              Vertex[2].BoneBinding = 0;                                m_Devc.DrawUserPrimitives(PrimitiveType.TriangleList' Vertex' 0' 1);                          }                      }                  }              }
Magic Number,Vitaboy,AvatarBase,C:\repos\Afr0_Project-Dollhouse\TSOClient\Vitaboy\Vitaboy\AvatarBase.cs,Render,The following statement contains a magic number: if (HeadMesh != null)              {                  if (m_GPURender == false)                  {                      foreach (EffectPass Pass in m_HeadEffect.CurrentTechnique.Passes)                      {                          Pass.Apply();                            foreach (Vector3 Fce in HeadMesh.Faces)                          {                              // Draw                              VertexPositionNormalTexture[] Vertex = new VertexPositionNormalTexture[3];                              Vertex[0].Position = HeadMesh.TransformedVertices[(int)Fce.X].Position;                              Vertex[1].Position = HeadMesh.TransformedVertices[(int)Fce.Y].Position;                              Vertex[2].Position = HeadMesh.TransformedVertices[(int)Fce.Z].Position;                                Vertex[0].TextureCoordinate = HeadMesh.TransformedVertices[(int)Fce.X].TextureCoordinate;                              Vertex[1].TextureCoordinate = HeadMesh.TransformedVertices[(int)Fce.Y].TextureCoordinate;                              Vertex[2].TextureCoordinate = HeadMesh.TransformedVertices[(int)Fce.Z].TextureCoordinate;                                Vertex[0].Normal = HeadMesh.TransformedVertices[(int)Fce.X].Normal;                              Vertex[1].Normal = HeadMesh.TransformedVertices[(int)Fce.Y].Normal;                              Vertex[2].Normal = HeadMesh.TransformedVertices[(int)Fce.Z].Normal;                                m_Devc.DrawUserPrimitives(PrimitiveType.TriangleList' Vertex' 0' 1);                          }                            TransformVertices(HeadMesh' null' MeshType.Head);                      }                    }                  else                  {                      m_VitaboyShader.Parameters["VitaboyTexture"].SetValue(HeadTexture);                      m_VitaboyShader.Parameters["World"].SetValue(WorldMatrix);                      m_VitaboyShader.Parameters["ChildBones"].SetValue(GetAllBones(HeadMesh' Skel));                        //foreach (EffectPass Pass in m_VitaboyShader.Techniques["TransformHeadTechnique"].Passes)                      foreach (EffectPass Pass in m_VitaboyShader.Techniques["TransformVerticesTechnique"].Passes)                      {                          Pass.Apply();                            foreach (Vector3 Fce in HeadMesh.Faces)                          {                              VitaboyVertex[] Vertex = new VitaboyVertex[3];                              Vertex[0].Position = HeadMesh.RealVertices[(int)Fce.X].Position;                              Vertex[1].Position = HeadMesh.RealVertices[(int)Fce.Y].Position;                              Vertex[2].Position = HeadMesh.RealVertices[(int)Fce.Z].Position;                                Vertex[0].TextureCoordinate = HeadMesh.RealVertices[(int)Fce.X].TextureCoordinate;                              Vertex[1].TextureCoordinate = HeadMesh.RealVertices[(int)Fce.Y].TextureCoordinate;                              Vertex[2].TextureCoordinate = HeadMesh.RealVertices[(int)Fce.Z].TextureCoordinate;                                Vertex[0].Normal = HeadMesh.RealVertices[(int)Fce.X].Normal;                              Vertex[1].Normal = HeadMesh.RealVertices[(int)Fce.Y].Normal;                              Vertex[2].Normal = HeadMesh.RealVertices[(int)Fce.Z].Normal;                                //All the meshes except the body mesh only references one bone.                              Vertex[0].BoneBinding = 0;                              Vertex[1].BoneBinding = 0;                              Vertex[2].BoneBinding = 0;                                m_Devc.DrawUserPrimitives(PrimitiveType.TriangleList' Vertex' 0' 1);                          }                      }                  }              }
Magic Number,Vitaboy,AvatarBase,C:\repos\Afr0_Project-Dollhouse\TSOClient\Vitaboy\Vitaboy\AvatarBase.cs,Render,The following statement contains a magic number: if (HeadMesh != null)              {                  if (m_GPURender == false)                  {                      foreach (EffectPass Pass in m_HeadEffect.CurrentTechnique.Passes)                      {                          Pass.Apply();                            foreach (Vector3 Fce in HeadMesh.Faces)                          {                              // Draw                              VertexPositionNormalTexture[] Vertex = new VertexPositionNormalTexture[3];                              Vertex[0].Position = HeadMesh.TransformedVertices[(int)Fce.X].Position;                              Vertex[1].Position = HeadMesh.TransformedVertices[(int)Fce.Y].Position;                              Vertex[2].Position = HeadMesh.TransformedVertices[(int)Fce.Z].Position;                                Vertex[0].TextureCoordinate = HeadMesh.TransformedVertices[(int)Fce.X].TextureCoordinate;                              Vertex[1].TextureCoordinate = HeadMesh.TransformedVertices[(int)Fce.Y].TextureCoordinate;                              Vertex[2].TextureCoordinate = HeadMesh.TransformedVertices[(int)Fce.Z].TextureCoordinate;                                Vertex[0].Normal = HeadMesh.TransformedVertices[(int)Fce.X].Normal;                              Vertex[1].Normal = HeadMesh.TransformedVertices[(int)Fce.Y].Normal;                              Vertex[2].Normal = HeadMesh.TransformedVertices[(int)Fce.Z].Normal;                                m_Devc.DrawUserPrimitives(PrimitiveType.TriangleList' Vertex' 0' 1);                          }                            TransformVertices(HeadMesh' null' MeshType.Head);                      }                    }                  else                  {                      m_VitaboyShader.Parameters["VitaboyTexture"].SetValue(HeadTexture);                      m_VitaboyShader.Parameters["World"].SetValue(WorldMatrix);                      m_VitaboyShader.Parameters["ChildBones"].SetValue(GetAllBones(HeadMesh' Skel));                        //foreach (EffectPass Pass in m_VitaboyShader.Techniques["TransformHeadTechnique"].Passes)                      foreach (EffectPass Pass in m_VitaboyShader.Techniques["TransformVerticesTechnique"].Passes)                      {                          Pass.Apply();                            foreach (Vector3 Fce in HeadMesh.Faces)                          {                              VitaboyVertex[] Vertex = new VitaboyVertex[3];                              Vertex[0].Position = HeadMesh.RealVertices[(int)Fce.X].Position;                              Vertex[1].Position = HeadMesh.RealVertices[(int)Fce.Y].Position;                              Vertex[2].Position = HeadMesh.RealVertices[(int)Fce.Z].Position;                                Vertex[0].TextureCoordinate = HeadMesh.RealVertices[(int)Fce.X].TextureCoordinate;                              Vertex[1].TextureCoordinate = HeadMesh.RealVertices[(int)Fce.Y].TextureCoordinate;                              Vertex[2].TextureCoordinate = HeadMesh.RealVertices[(int)Fce.Z].TextureCoordinate;                                Vertex[0].Normal = HeadMesh.RealVertices[(int)Fce.X].Normal;                              Vertex[1].Normal = HeadMesh.RealVertices[(int)Fce.Y].Normal;                              Vertex[2].Normal = HeadMesh.RealVertices[(int)Fce.Z].Normal;                                //All the meshes except the body mesh only references one bone.                              Vertex[0].BoneBinding = 0;                              Vertex[1].BoneBinding = 0;                              Vertex[2].BoneBinding = 0;                                m_Devc.DrawUserPrimitives(PrimitiveType.TriangleList' Vertex' 0' 1);                          }                      }                  }              }
Magic Number,Vitaboy,AvatarBase,C:\repos\Afr0_Project-Dollhouse\TSOClient\Vitaboy\Vitaboy\AvatarBase.cs,Render,The following statement contains a magic number: if (HeadMesh != null)              {                  if (m_GPURender == false)                  {                      foreach (EffectPass Pass in m_HeadEffect.CurrentTechnique.Passes)                      {                          Pass.Apply();                            foreach (Vector3 Fce in HeadMesh.Faces)                          {                              // Draw                              VertexPositionNormalTexture[] Vertex = new VertexPositionNormalTexture[3];                              Vertex[0].Position = HeadMesh.TransformedVertices[(int)Fce.X].Position;                              Vertex[1].Position = HeadMesh.TransformedVertices[(int)Fce.Y].Position;                              Vertex[2].Position = HeadMesh.TransformedVertices[(int)Fce.Z].Position;                                Vertex[0].TextureCoordinate = HeadMesh.TransformedVertices[(int)Fce.X].TextureCoordinate;                              Vertex[1].TextureCoordinate = HeadMesh.TransformedVertices[(int)Fce.Y].TextureCoordinate;                              Vertex[2].TextureCoordinate = HeadMesh.TransformedVertices[(int)Fce.Z].TextureCoordinate;                                Vertex[0].Normal = HeadMesh.TransformedVertices[(int)Fce.X].Normal;                              Vertex[1].Normal = HeadMesh.TransformedVertices[(int)Fce.Y].Normal;                              Vertex[2].Normal = HeadMesh.TransformedVertices[(int)Fce.Z].Normal;                                m_Devc.DrawUserPrimitives(PrimitiveType.TriangleList' Vertex' 0' 1);                          }                            TransformVertices(HeadMesh' null' MeshType.Head);                      }                    }                  else                  {                      m_VitaboyShader.Parameters["VitaboyTexture"].SetValue(HeadTexture);                      m_VitaboyShader.Parameters["World"].SetValue(WorldMatrix);                      m_VitaboyShader.Parameters["ChildBones"].SetValue(GetAllBones(HeadMesh' Skel));                        //foreach (EffectPass Pass in m_VitaboyShader.Techniques["TransformHeadTechnique"].Passes)                      foreach (EffectPass Pass in m_VitaboyShader.Techniques["TransformVerticesTechnique"].Passes)                      {                          Pass.Apply();                            foreach (Vector3 Fce in HeadMesh.Faces)                          {                              VitaboyVertex[] Vertex = new VitaboyVertex[3];                              Vertex[0].Position = HeadMesh.RealVertices[(int)Fce.X].Position;                              Vertex[1].Position = HeadMesh.RealVertices[(int)Fce.Y].Position;                              Vertex[2].Position = HeadMesh.RealVertices[(int)Fce.Z].Position;                                Vertex[0].TextureCoordinate = HeadMesh.RealVertices[(int)Fce.X].TextureCoordinate;                              Vertex[1].TextureCoordinate = HeadMesh.RealVertices[(int)Fce.Y].TextureCoordinate;                              Vertex[2].TextureCoordinate = HeadMesh.RealVertices[(int)Fce.Z].TextureCoordinate;                                Vertex[0].Normal = HeadMesh.RealVertices[(int)Fce.X].Normal;                              Vertex[1].Normal = HeadMesh.RealVertices[(int)Fce.Y].Normal;                              Vertex[2].Normal = HeadMesh.RealVertices[(int)Fce.Z].Normal;                                //All the meshes except the body mesh only references one bone.                              Vertex[0].BoneBinding = 0;                              Vertex[1].BoneBinding = 0;                              Vertex[2].BoneBinding = 0;                                m_Devc.DrawUserPrimitives(PrimitiveType.TriangleList' Vertex' 0' 1);                          }                      }                  }              }
Magic Number,Vitaboy,AvatarBase,C:\repos\Afr0_Project-Dollhouse\TSOClient\Vitaboy\Vitaboy\AvatarBase.cs,Render,The following statement contains a magic number: if (HeadMesh != null)              {                  if (m_GPURender == false)                  {                      foreach (EffectPass Pass in m_HeadEffect.CurrentTechnique.Passes)                      {                          Pass.Apply();                            foreach (Vector3 Fce in HeadMesh.Faces)                          {                              // Draw                              VertexPositionNormalTexture[] Vertex = new VertexPositionNormalTexture[3];                              Vertex[0].Position = HeadMesh.TransformedVertices[(int)Fce.X].Position;                              Vertex[1].Position = HeadMesh.TransformedVertices[(int)Fce.Y].Position;                              Vertex[2].Position = HeadMesh.TransformedVertices[(int)Fce.Z].Position;                                Vertex[0].TextureCoordinate = HeadMesh.TransformedVertices[(int)Fce.X].TextureCoordinate;                              Vertex[1].TextureCoordinate = HeadMesh.TransformedVertices[(int)Fce.Y].TextureCoordinate;                              Vertex[2].TextureCoordinate = HeadMesh.TransformedVertices[(int)Fce.Z].TextureCoordinate;                                Vertex[0].Normal = HeadMesh.TransformedVertices[(int)Fce.X].Normal;                              Vertex[1].Normal = HeadMesh.TransformedVertices[(int)Fce.Y].Normal;                              Vertex[2].Normal = HeadMesh.TransformedVertices[(int)Fce.Z].Normal;                                m_Devc.DrawUserPrimitives(PrimitiveType.TriangleList' Vertex' 0' 1);                          }                            TransformVertices(HeadMesh' null' MeshType.Head);                      }                    }                  else                  {                      m_VitaboyShader.Parameters["VitaboyTexture"].SetValue(HeadTexture);                      m_VitaboyShader.Parameters["World"].SetValue(WorldMatrix);                      m_VitaboyShader.Parameters["ChildBones"].SetValue(GetAllBones(HeadMesh' Skel));                        //foreach (EffectPass Pass in m_VitaboyShader.Techniques["TransformHeadTechnique"].Passes)                      foreach (EffectPass Pass in m_VitaboyShader.Techniques["TransformVerticesTechnique"].Passes)                      {                          Pass.Apply();                            foreach (Vector3 Fce in HeadMesh.Faces)                          {                              VitaboyVertex[] Vertex = new VitaboyVertex[3];                              Vertex[0].Position = HeadMesh.RealVertices[(int)Fce.X].Position;                              Vertex[1].Position = HeadMesh.RealVertices[(int)Fce.Y].Position;                              Vertex[2].Position = HeadMesh.RealVertices[(int)Fce.Z].Position;                                Vertex[0].TextureCoordinate = HeadMesh.RealVertices[(int)Fce.X].TextureCoordinate;                              Vertex[1].TextureCoordinate = HeadMesh.RealVertices[(int)Fce.Y].TextureCoordinate;                              Vertex[2].TextureCoordinate = HeadMesh.RealVertices[(int)Fce.Z].TextureCoordinate;                                Vertex[0].Normal = HeadMesh.RealVertices[(int)Fce.X].Normal;                              Vertex[1].Normal = HeadMesh.RealVertices[(int)Fce.Y].Normal;                              Vertex[2].Normal = HeadMesh.RealVertices[(int)Fce.Z].Normal;                                //All the meshes except the body mesh only references one bone.                              Vertex[0].BoneBinding = 0;                              Vertex[1].BoneBinding = 0;                              Vertex[2].BoneBinding = 0;                                m_Devc.DrawUserPrimitives(PrimitiveType.TriangleList' Vertex' 0' 1);                          }                      }                  }              }
Magic Number,Vitaboy,AvatarBase,C:\repos\Afr0_Project-Dollhouse\TSOClient\Vitaboy\Vitaboy\AvatarBase.cs,Render,The following statement contains a magic number: if (HeadMesh != null)              {                  if (m_GPURender == false)                  {                      foreach (EffectPass Pass in m_HeadEffect.CurrentTechnique.Passes)                      {                          Pass.Apply();                            foreach (Vector3 Fce in HeadMesh.Faces)                          {                              // Draw                              VertexPositionNormalTexture[] Vertex = new VertexPositionNormalTexture[3];                              Vertex[0].Position = HeadMesh.TransformedVertices[(int)Fce.X].Position;                              Vertex[1].Position = HeadMesh.TransformedVertices[(int)Fce.Y].Position;                              Vertex[2].Position = HeadMesh.TransformedVertices[(int)Fce.Z].Position;                                Vertex[0].TextureCoordinate = HeadMesh.TransformedVertices[(int)Fce.X].TextureCoordinate;                              Vertex[1].TextureCoordinate = HeadMesh.TransformedVertices[(int)Fce.Y].TextureCoordinate;                              Vertex[2].TextureCoordinate = HeadMesh.TransformedVertices[(int)Fce.Z].TextureCoordinate;                                Vertex[0].Normal = HeadMesh.TransformedVertices[(int)Fce.X].Normal;                              Vertex[1].Normal = HeadMesh.TransformedVertices[(int)Fce.Y].Normal;                              Vertex[2].Normal = HeadMesh.TransformedVertices[(int)Fce.Z].Normal;                                m_Devc.DrawUserPrimitives(PrimitiveType.TriangleList' Vertex' 0' 1);                          }                            TransformVertices(HeadMesh' null' MeshType.Head);                      }                    }                  else                  {                      m_VitaboyShader.Parameters["VitaboyTexture"].SetValue(HeadTexture);                      m_VitaboyShader.Parameters["World"].SetValue(WorldMatrix);                      m_VitaboyShader.Parameters["ChildBones"].SetValue(GetAllBones(HeadMesh' Skel));                        //foreach (EffectPass Pass in m_VitaboyShader.Techniques["TransformHeadTechnique"].Passes)                      foreach (EffectPass Pass in m_VitaboyShader.Techniques["TransformVerticesTechnique"].Passes)                      {                          Pass.Apply();                            foreach (Vector3 Fce in HeadMesh.Faces)                          {                              VitaboyVertex[] Vertex = new VitaboyVertex[3];                              Vertex[0].Position = HeadMesh.RealVertices[(int)Fce.X].Position;                              Vertex[1].Position = HeadMesh.RealVertices[(int)Fce.Y].Position;                              Vertex[2].Position = HeadMesh.RealVertices[(int)Fce.Z].Position;                                Vertex[0].TextureCoordinate = HeadMesh.RealVertices[(int)Fce.X].TextureCoordinate;                              Vertex[1].TextureCoordinate = HeadMesh.RealVertices[(int)Fce.Y].TextureCoordinate;                              Vertex[2].TextureCoordinate = HeadMesh.RealVertices[(int)Fce.Z].TextureCoordinate;                                Vertex[0].Normal = HeadMesh.RealVertices[(int)Fce.X].Normal;                              Vertex[1].Normal = HeadMesh.RealVertices[(int)Fce.Y].Normal;                              Vertex[2].Normal = HeadMesh.RealVertices[(int)Fce.Z].Normal;                                //All the meshes except the body mesh only references one bone.                              Vertex[0].BoneBinding = 0;                              Vertex[1].BoneBinding = 0;                              Vertex[2].BoneBinding = 0;                                m_Devc.DrawUserPrimitives(PrimitiveType.TriangleList' Vertex' 0' 1);                          }                      }                  }              }
Magic Number,Vitaboy,AvatarBase,C:\repos\Afr0_Project-Dollhouse\TSOClient\Vitaboy\Vitaboy\AvatarBase.cs,Render,The following statement contains a magic number: if (AccessoryMesh != null)              {                  if (m_GPURender == false)                  {                      foreach (EffectPass Pass in m_AccessoryEffect.CurrentTechnique.Passes)                      {                          Pass.Apply();                            foreach (Vector3 Fce in AccessoryMesh.Faces)                          {                              // Draw                              VertexPositionNormalTexture[] Vertex = new VertexPositionNormalTexture[3];                              Vertex[0].Position = AccessoryMesh.TransformedVertices[(int)Fce.X].Position;                              Vertex[1].Position = AccessoryMesh.TransformedVertices[(int)Fce.Y].Position;                              Vertex[2].Position = AccessoryMesh.TransformedVertices[(int)Fce.Z].Position;                                Vertex[0].TextureCoordinate = AccessoryMesh.TransformedVertices[(int)Fce.X].TextureCoordinate;                              Vertex[1].TextureCoordinate = AccessoryMesh.TransformedVertices[(int)Fce.Y].TextureCoordinate;                              Vertex[2].TextureCoordinate = AccessoryMesh.TransformedVertices[(int)Fce.Z].TextureCoordinate;                                Vertex[0].Normal = AccessoryMesh.TransformedVertices[(int)Fce.X].Normal;                              Vertex[1].Normal = AccessoryMesh.TransformedVertices[(int)Fce.Y].Normal;                              Vertex[2].Normal = AccessoryMesh.TransformedVertices[(int)Fce.Z].Normal;                                m_Devc.DrawUserPrimitives(PrimitiveType.TriangleList' Vertex' 0' 1);                          }                            TransformVertices(AccessoryMesh' null' MeshType.Head);                      }                  }                  else                  {                      m_VitaboyShader.Parameters["VitaboyTexture"].SetValue(AccessoryTexture);                      m_VitaboyShader.Parameters["World"].SetValue(WorldMatrix);                      m_VitaboyShader.Parameters["ChildBones"].SetValue(GetAllBones(HeadMesh' Skel));                        foreach (EffectPass Pass in m_VitaboyShader.Techniques["TransformVerticesTechnique"].Passes)                      {                          Pass.Apply();                            foreach (Vector3 Fce in AccessoryMesh.Faces)                          {                              VitaboyVertex[] Vertex = new VitaboyVertex[3];                              Vertex[0].Position = AccessoryMesh.RealVertices[(int)Fce.X].Position;                              Vertex[1].Position = AccessoryMesh.RealVertices[(int)Fce.Y].Position;                              Vertex[2].Position = AccessoryMesh.RealVertices[(int)Fce.Z].Position;                                Vertex[0].TextureCoordinate = AccessoryMesh.RealVertices[(int)Fce.X].TextureCoordinate;                              Vertex[1].TextureCoordinate = AccessoryMesh.RealVertices[(int)Fce.Y].TextureCoordinate;                              Vertex[2].TextureCoordinate = AccessoryMesh.RealVertices[(int)Fce.Z].TextureCoordinate;                                Vertex[0].Normal = AccessoryMesh.RealVertices[(int)Fce.X].Normal;                              Vertex[1].Normal = AccessoryMesh.RealVertices[(int)Fce.Y].Normal;                              Vertex[2].Normal = AccessoryMesh.RealVertices[(int)Fce.Z].Normal;                                Vertex[0].BoneBinding = 0;                              Vertex[1].BoneBinding = 0;                              Vertex[2].BoneBinding = 0;                                m_Devc.DrawUserPrimitives(PrimitiveType.TriangleList' Vertex' 0' 1);                          }                      }                  }              }
Magic Number,Vitaboy,AvatarBase,C:\repos\Afr0_Project-Dollhouse\TSOClient\Vitaboy\Vitaboy\AvatarBase.cs,Render,The following statement contains a magic number: if (AccessoryMesh != null)              {                  if (m_GPURender == false)                  {                      foreach (EffectPass Pass in m_AccessoryEffect.CurrentTechnique.Passes)                      {                          Pass.Apply();                            foreach (Vector3 Fce in AccessoryMesh.Faces)                          {                              // Draw                              VertexPositionNormalTexture[] Vertex = new VertexPositionNormalTexture[3];                              Vertex[0].Position = AccessoryMesh.TransformedVertices[(int)Fce.X].Position;                              Vertex[1].Position = AccessoryMesh.TransformedVertices[(int)Fce.Y].Position;                              Vertex[2].Position = AccessoryMesh.TransformedVertices[(int)Fce.Z].Position;                                Vertex[0].TextureCoordinate = AccessoryMesh.TransformedVertices[(int)Fce.X].TextureCoordinate;                              Vertex[1].TextureCoordinate = AccessoryMesh.TransformedVertices[(int)Fce.Y].TextureCoordinate;                              Vertex[2].TextureCoordinate = AccessoryMesh.TransformedVertices[(int)Fce.Z].TextureCoordinate;                                Vertex[0].Normal = AccessoryMesh.TransformedVertices[(int)Fce.X].Normal;                              Vertex[1].Normal = AccessoryMesh.TransformedVertices[(int)Fce.Y].Normal;                              Vertex[2].Normal = AccessoryMesh.TransformedVertices[(int)Fce.Z].Normal;                                m_Devc.DrawUserPrimitives(PrimitiveType.TriangleList' Vertex' 0' 1);                          }                            TransformVertices(AccessoryMesh' null' MeshType.Head);                      }                  }                  else                  {                      m_VitaboyShader.Parameters["VitaboyTexture"].SetValue(AccessoryTexture);                      m_VitaboyShader.Parameters["World"].SetValue(WorldMatrix);                      m_VitaboyShader.Parameters["ChildBones"].SetValue(GetAllBones(HeadMesh' Skel));                        foreach (EffectPass Pass in m_VitaboyShader.Techniques["TransformVerticesTechnique"].Passes)                      {                          Pass.Apply();                            foreach (Vector3 Fce in AccessoryMesh.Faces)                          {                              VitaboyVertex[] Vertex = new VitaboyVertex[3];                              Vertex[0].Position = AccessoryMesh.RealVertices[(int)Fce.X].Position;                              Vertex[1].Position = AccessoryMesh.RealVertices[(int)Fce.Y].Position;                              Vertex[2].Position = AccessoryMesh.RealVertices[(int)Fce.Z].Position;                                Vertex[0].TextureCoordinate = AccessoryMesh.RealVertices[(int)Fce.X].TextureCoordinate;                              Vertex[1].TextureCoordinate = AccessoryMesh.RealVertices[(int)Fce.Y].TextureCoordinate;                              Vertex[2].TextureCoordinate = AccessoryMesh.RealVertices[(int)Fce.Z].TextureCoordinate;                                Vertex[0].Normal = AccessoryMesh.RealVertices[(int)Fce.X].Normal;                              Vertex[1].Normal = AccessoryMesh.RealVertices[(int)Fce.Y].Normal;                              Vertex[2].Normal = AccessoryMesh.RealVertices[(int)Fce.Z].Normal;                                Vertex[0].BoneBinding = 0;                              Vertex[1].BoneBinding = 0;                              Vertex[2].BoneBinding = 0;                                m_Devc.DrawUserPrimitives(PrimitiveType.TriangleList' Vertex' 0' 1);                          }                      }                  }              }
Magic Number,Vitaboy,AvatarBase,C:\repos\Afr0_Project-Dollhouse\TSOClient\Vitaboy\Vitaboy\AvatarBase.cs,Render,The following statement contains a magic number: if (AccessoryMesh != null)              {                  if (m_GPURender == false)                  {                      foreach (EffectPass Pass in m_AccessoryEffect.CurrentTechnique.Passes)                      {                          Pass.Apply();                            foreach (Vector3 Fce in AccessoryMesh.Faces)                          {                              // Draw                              VertexPositionNormalTexture[] Vertex = new VertexPositionNormalTexture[3];                              Vertex[0].Position = AccessoryMesh.TransformedVertices[(int)Fce.X].Position;                              Vertex[1].Position = AccessoryMesh.TransformedVertices[(int)Fce.Y].Position;                              Vertex[2].Position = AccessoryMesh.TransformedVertices[(int)Fce.Z].Position;                                Vertex[0].TextureCoordinate = AccessoryMesh.TransformedVertices[(int)Fce.X].TextureCoordinate;                              Vertex[1].TextureCoordinate = AccessoryMesh.TransformedVertices[(int)Fce.Y].TextureCoordinate;                              Vertex[2].TextureCoordinate = AccessoryMesh.TransformedVertices[(int)Fce.Z].TextureCoordinate;                                Vertex[0].Normal = AccessoryMesh.TransformedVertices[(int)Fce.X].Normal;                              Vertex[1].Normal = AccessoryMesh.TransformedVertices[(int)Fce.Y].Normal;                              Vertex[2].Normal = AccessoryMesh.TransformedVertices[(int)Fce.Z].Normal;                                m_Devc.DrawUserPrimitives(PrimitiveType.TriangleList' Vertex' 0' 1);                          }                            TransformVertices(AccessoryMesh' null' MeshType.Head);                      }                  }                  else                  {                      m_VitaboyShader.Parameters["VitaboyTexture"].SetValue(AccessoryTexture);                      m_VitaboyShader.Parameters["World"].SetValue(WorldMatrix);                      m_VitaboyShader.Parameters["ChildBones"].SetValue(GetAllBones(HeadMesh' Skel));                        foreach (EffectPass Pass in m_VitaboyShader.Techniques["TransformVerticesTechnique"].Passes)                      {                          Pass.Apply();                            foreach (Vector3 Fce in AccessoryMesh.Faces)                          {                              VitaboyVertex[] Vertex = new VitaboyVertex[3];                              Vertex[0].Position = AccessoryMesh.RealVertices[(int)Fce.X].Position;                              Vertex[1].Position = AccessoryMesh.RealVertices[(int)Fce.Y].Position;                              Vertex[2].Position = AccessoryMesh.RealVertices[(int)Fce.Z].Position;                                Vertex[0].TextureCoordinate = AccessoryMesh.RealVertices[(int)Fce.X].TextureCoordinate;                              Vertex[1].TextureCoordinate = AccessoryMesh.RealVertices[(int)Fce.Y].TextureCoordinate;                              Vertex[2].TextureCoordinate = AccessoryMesh.RealVertices[(int)Fce.Z].TextureCoordinate;                                Vertex[0].Normal = AccessoryMesh.RealVertices[(int)Fce.X].Normal;                              Vertex[1].Normal = AccessoryMesh.RealVertices[(int)Fce.Y].Normal;                              Vertex[2].Normal = AccessoryMesh.RealVertices[(int)Fce.Z].Normal;                                Vertex[0].BoneBinding = 0;                              Vertex[1].BoneBinding = 0;                              Vertex[2].BoneBinding = 0;                                m_Devc.DrawUserPrimitives(PrimitiveType.TriangleList' Vertex' 0' 1);                          }                      }                  }              }
Magic Number,Vitaboy,AvatarBase,C:\repos\Afr0_Project-Dollhouse\TSOClient\Vitaboy\Vitaboy\AvatarBase.cs,Render,The following statement contains a magic number: if (AccessoryMesh != null)              {                  if (m_GPURender == false)                  {                      foreach (EffectPass Pass in m_AccessoryEffect.CurrentTechnique.Passes)                      {                          Pass.Apply();                            foreach (Vector3 Fce in AccessoryMesh.Faces)                          {                              // Draw                              VertexPositionNormalTexture[] Vertex = new VertexPositionNormalTexture[3];                              Vertex[0].Position = AccessoryMesh.TransformedVertices[(int)Fce.X].Position;                              Vertex[1].Position = AccessoryMesh.TransformedVertices[(int)Fce.Y].Position;                              Vertex[2].Position = AccessoryMesh.TransformedVertices[(int)Fce.Z].Position;                                Vertex[0].TextureCoordinate = AccessoryMesh.TransformedVertices[(int)Fce.X].TextureCoordinate;                              Vertex[1].TextureCoordinate = AccessoryMesh.TransformedVertices[(int)Fce.Y].TextureCoordinate;                              Vertex[2].TextureCoordinate = AccessoryMesh.TransformedVertices[(int)Fce.Z].TextureCoordinate;                                Vertex[0].Normal = AccessoryMesh.TransformedVertices[(int)Fce.X].Normal;                              Vertex[1].Normal = AccessoryMesh.TransformedVertices[(int)Fce.Y].Normal;                              Vertex[2].Normal = AccessoryMesh.TransformedVertices[(int)Fce.Z].Normal;                                m_Devc.DrawUserPrimitives(PrimitiveType.TriangleList' Vertex' 0' 1);                          }                            TransformVertices(AccessoryMesh' null' MeshType.Head);                      }                  }                  else                  {                      m_VitaboyShader.Parameters["VitaboyTexture"].SetValue(AccessoryTexture);                      m_VitaboyShader.Parameters["World"].SetValue(WorldMatrix);                      m_VitaboyShader.Parameters["ChildBones"].SetValue(GetAllBones(HeadMesh' Skel));                        foreach (EffectPass Pass in m_VitaboyShader.Techniques["TransformVerticesTechnique"].Passes)                      {                          Pass.Apply();                            foreach (Vector3 Fce in AccessoryMesh.Faces)                          {                              VitaboyVertex[] Vertex = new VitaboyVertex[3];                              Vertex[0].Position = AccessoryMesh.RealVertices[(int)Fce.X].Position;                              Vertex[1].Position = AccessoryMesh.RealVertices[(int)Fce.Y].Position;                              Vertex[2].Position = AccessoryMesh.RealVertices[(int)Fce.Z].Position;                                Vertex[0].TextureCoordinate = AccessoryMesh.RealVertices[(int)Fce.X].TextureCoordinate;                              Vertex[1].TextureCoordinate = AccessoryMesh.RealVertices[(int)Fce.Y].TextureCoordinate;                              Vertex[2].TextureCoordinate = AccessoryMesh.RealVertices[(int)Fce.Z].TextureCoordinate;                                Vertex[0].Normal = AccessoryMesh.RealVertices[(int)Fce.X].Normal;                              Vertex[1].Normal = AccessoryMesh.RealVertices[(int)Fce.Y].Normal;                              Vertex[2].Normal = AccessoryMesh.RealVertices[(int)Fce.Z].Normal;                                Vertex[0].BoneBinding = 0;                              Vertex[1].BoneBinding = 0;                              Vertex[2].BoneBinding = 0;                                m_Devc.DrawUserPrimitives(PrimitiveType.TriangleList' Vertex' 0' 1);                          }                      }                  }              }
Magic Number,Vitaboy,AvatarBase,C:\repos\Afr0_Project-Dollhouse\TSOClient\Vitaboy\Vitaboy\AvatarBase.cs,Render,The following statement contains a magic number: if (AccessoryMesh != null)              {                  if (m_GPURender == false)                  {                      foreach (EffectPass Pass in m_AccessoryEffect.CurrentTechnique.Passes)                      {                          Pass.Apply();                            foreach (Vector3 Fce in AccessoryMesh.Faces)                          {                              // Draw                              VertexPositionNormalTexture[] Vertex = new VertexPositionNormalTexture[3];                              Vertex[0].Position = AccessoryMesh.TransformedVertices[(int)Fce.X].Position;                              Vertex[1].Position = AccessoryMesh.TransformedVertices[(int)Fce.Y].Position;                              Vertex[2].Position = AccessoryMesh.TransformedVertices[(int)Fce.Z].Position;                                Vertex[0].TextureCoordinate = AccessoryMesh.TransformedVertices[(int)Fce.X].TextureCoordinate;                              Vertex[1].TextureCoordinate = AccessoryMesh.TransformedVertices[(int)Fce.Y].TextureCoordinate;                              Vertex[2].TextureCoordinate = AccessoryMesh.TransformedVertices[(int)Fce.Z].TextureCoordinate;                                Vertex[0].Normal = AccessoryMesh.TransformedVertices[(int)Fce.X].Normal;                              Vertex[1].Normal = AccessoryMesh.TransformedVertices[(int)Fce.Y].Normal;                              Vertex[2].Normal = AccessoryMesh.TransformedVertices[(int)Fce.Z].Normal;                                m_Devc.DrawUserPrimitives(PrimitiveType.TriangleList' Vertex' 0' 1);                          }                            TransformVertices(AccessoryMesh' null' MeshType.Head);                      }                  }                  else                  {                      m_VitaboyShader.Parameters["VitaboyTexture"].SetValue(AccessoryTexture);                      m_VitaboyShader.Parameters["World"].SetValue(WorldMatrix);                      m_VitaboyShader.Parameters["ChildBones"].SetValue(GetAllBones(HeadMesh' Skel));                        foreach (EffectPass Pass in m_VitaboyShader.Techniques["TransformVerticesTechnique"].Passes)                      {                          Pass.Apply();                            foreach (Vector3 Fce in AccessoryMesh.Faces)                          {                              VitaboyVertex[] Vertex = new VitaboyVertex[3];                              Vertex[0].Position = AccessoryMesh.RealVertices[(int)Fce.X].Position;                              Vertex[1].Position = AccessoryMesh.RealVertices[(int)Fce.Y].Position;                              Vertex[2].Position = AccessoryMesh.RealVertices[(int)Fce.Z].Position;                                Vertex[0].TextureCoordinate = AccessoryMesh.RealVertices[(int)Fce.X].TextureCoordinate;                              Vertex[1].TextureCoordinate = AccessoryMesh.RealVertices[(int)Fce.Y].TextureCoordinate;                              Vertex[2].TextureCoordinate = AccessoryMesh.RealVertices[(int)Fce.Z].TextureCoordinate;                                Vertex[0].Normal = AccessoryMesh.RealVertices[(int)Fce.X].Normal;                              Vertex[1].Normal = AccessoryMesh.RealVertices[(int)Fce.Y].Normal;                              Vertex[2].Normal = AccessoryMesh.RealVertices[(int)Fce.Z].Normal;                                Vertex[0].BoneBinding = 0;                              Vertex[1].BoneBinding = 0;                              Vertex[2].BoneBinding = 0;                                m_Devc.DrawUserPrimitives(PrimitiveType.TriangleList' Vertex' 0' 1);                          }                      }                  }              }
Magic Number,Vitaboy,AvatarBase,C:\repos\Afr0_Project-Dollhouse\TSOClient\Vitaboy\Vitaboy\AvatarBase.cs,Render,The following statement contains a magic number: if (AccessoryMesh != null)              {                  if (m_GPURender == false)                  {                      foreach (EffectPass Pass in m_AccessoryEffect.CurrentTechnique.Passes)                      {                          Pass.Apply();                            foreach (Vector3 Fce in AccessoryMesh.Faces)                          {                              // Draw                              VertexPositionNormalTexture[] Vertex = new VertexPositionNormalTexture[3];                              Vertex[0].Position = AccessoryMesh.TransformedVertices[(int)Fce.X].Position;                              Vertex[1].Position = AccessoryMesh.TransformedVertices[(int)Fce.Y].Position;                              Vertex[2].Position = AccessoryMesh.TransformedVertices[(int)Fce.Z].Position;                                Vertex[0].TextureCoordinate = AccessoryMesh.TransformedVertices[(int)Fce.X].TextureCoordinate;                              Vertex[1].TextureCoordinate = AccessoryMesh.TransformedVertices[(int)Fce.Y].TextureCoordinate;                              Vertex[2].TextureCoordinate = AccessoryMesh.TransformedVertices[(int)Fce.Z].TextureCoordinate;                                Vertex[0].Normal = AccessoryMesh.TransformedVertices[(int)Fce.X].Normal;                              Vertex[1].Normal = AccessoryMesh.TransformedVertices[(int)Fce.Y].Normal;                              Vertex[2].Normal = AccessoryMesh.TransformedVertices[(int)Fce.Z].Normal;                                m_Devc.DrawUserPrimitives(PrimitiveType.TriangleList' Vertex' 0' 1);                          }                            TransformVertices(AccessoryMesh' null' MeshType.Head);                      }                  }                  else                  {                      m_VitaboyShader.Parameters["VitaboyTexture"].SetValue(AccessoryTexture);                      m_VitaboyShader.Parameters["World"].SetValue(WorldMatrix);                      m_VitaboyShader.Parameters["ChildBones"].SetValue(GetAllBones(HeadMesh' Skel));                        foreach (EffectPass Pass in m_VitaboyShader.Techniques["TransformVerticesTechnique"].Passes)                      {                          Pass.Apply();                            foreach (Vector3 Fce in AccessoryMesh.Faces)                          {                              VitaboyVertex[] Vertex = new VitaboyVertex[3];                              Vertex[0].Position = AccessoryMesh.RealVertices[(int)Fce.X].Position;                              Vertex[1].Position = AccessoryMesh.RealVertices[(int)Fce.Y].Position;                              Vertex[2].Position = AccessoryMesh.RealVertices[(int)Fce.Z].Position;                                Vertex[0].TextureCoordinate = AccessoryMesh.RealVertices[(int)Fce.X].TextureCoordinate;                              Vertex[1].TextureCoordinate = AccessoryMesh.RealVertices[(int)Fce.Y].TextureCoordinate;                              Vertex[2].TextureCoordinate = AccessoryMesh.RealVertices[(int)Fce.Z].TextureCoordinate;                                Vertex[0].Normal = AccessoryMesh.RealVertices[(int)Fce.X].Normal;                              Vertex[1].Normal = AccessoryMesh.RealVertices[(int)Fce.Y].Normal;                              Vertex[2].Normal = AccessoryMesh.RealVertices[(int)Fce.Z].Normal;                                Vertex[0].BoneBinding = 0;                              Vertex[1].BoneBinding = 0;                              Vertex[2].BoneBinding = 0;                                m_Devc.DrawUserPrimitives(PrimitiveType.TriangleList' Vertex' 0' 1);                          }                      }                  }              }
Magic Number,Vitaboy,AvatarBase,C:\repos\Afr0_Project-Dollhouse\TSOClient\Vitaboy\Vitaboy\AvatarBase.cs,Render,The following statement contains a magic number: if (AccessoryMesh != null)              {                  if (m_GPURender == false)                  {                      foreach (EffectPass Pass in m_AccessoryEffect.CurrentTechnique.Passes)                      {                          Pass.Apply();                            foreach (Vector3 Fce in AccessoryMesh.Faces)                          {                              // Draw                              VertexPositionNormalTexture[] Vertex = new VertexPositionNormalTexture[3];                              Vertex[0].Position = AccessoryMesh.TransformedVertices[(int)Fce.X].Position;                              Vertex[1].Position = AccessoryMesh.TransformedVertices[(int)Fce.Y].Position;                              Vertex[2].Position = AccessoryMesh.TransformedVertices[(int)Fce.Z].Position;                                Vertex[0].TextureCoordinate = AccessoryMesh.TransformedVertices[(int)Fce.X].TextureCoordinate;                              Vertex[1].TextureCoordinate = AccessoryMesh.TransformedVertices[(int)Fce.Y].TextureCoordinate;                              Vertex[2].TextureCoordinate = AccessoryMesh.TransformedVertices[(int)Fce.Z].TextureCoordinate;                                Vertex[0].Normal = AccessoryMesh.TransformedVertices[(int)Fce.X].Normal;                              Vertex[1].Normal = AccessoryMesh.TransformedVertices[(int)Fce.Y].Normal;                              Vertex[2].Normal = AccessoryMesh.TransformedVertices[(int)Fce.Z].Normal;                                m_Devc.DrawUserPrimitives(PrimitiveType.TriangleList' Vertex' 0' 1);                          }                            TransformVertices(AccessoryMesh' null' MeshType.Head);                      }                  }                  else                  {                      m_VitaboyShader.Parameters["VitaboyTexture"].SetValue(AccessoryTexture);                      m_VitaboyShader.Parameters["World"].SetValue(WorldMatrix);                      m_VitaboyShader.Parameters["ChildBones"].SetValue(GetAllBones(HeadMesh' Skel));                        foreach (EffectPass Pass in m_VitaboyShader.Techniques["TransformVerticesTechnique"].Passes)                      {                          Pass.Apply();                            foreach (Vector3 Fce in AccessoryMesh.Faces)                          {                              VitaboyVertex[] Vertex = new VitaboyVertex[3];                              Vertex[0].Position = AccessoryMesh.RealVertices[(int)Fce.X].Position;                              Vertex[1].Position = AccessoryMesh.RealVertices[(int)Fce.Y].Position;                              Vertex[2].Position = AccessoryMesh.RealVertices[(int)Fce.Z].Position;                                Vertex[0].TextureCoordinate = AccessoryMesh.RealVertices[(int)Fce.X].TextureCoordinate;                              Vertex[1].TextureCoordinate = AccessoryMesh.RealVertices[(int)Fce.Y].TextureCoordinate;                              Vertex[2].TextureCoordinate = AccessoryMesh.RealVertices[(int)Fce.Z].TextureCoordinate;                                Vertex[0].Normal = AccessoryMesh.RealVertices[(int)Fce.X].Normal;                              Vertex[1].Normal = AccessoryMesh.RealVertices[(int)Fce.Y].Normal;                              Vertex[2].Normal = AccessoryMesh.RealVertices[(int)Fce.Z].Normal;                                Vertex[0].BoneBinding = 0;                              Vertex[1].BoneBinding = 0;                              Vertex[2].BoneBinding = 0;                                m_Devc.DrawUserPrimitives(PrimitiveType.TriangleList' Vertex' 0' 1);                          }                      }                  }              }
Magic Number,Vitaboy,AvatarBase,C:\repos\Afr0_Project-Dollhouse\TSOClient\Vitaboy\Vitaboy\AvatarBase.cs,Render,The following statement contains a magic number: if (AccessoryMesh != null)              {                  if (m_GPURender == false)                  {                      foreach (EffectPass Pass in m_AccessoryEffect.CurrentTechnique.Passes)                      {                          Pass.Apply();                            foreach (Vector3 Fce in AccessoryMesh.Faces)                          {                              // Draw                              VertexPositionNormalTexture[] Vertex = new VertexPositionNormalTexture[3];                              Vertex[0].Position = AccessoryMesh.TransformedVertices[(int)Fce.X].Position;                              Vertex[1].Position = AccessoryMesh.TransformedVertices[(int)Fce.Y].Position;                              Vertex[2].Position = AccessoryMesh.TransformedVertices[(int)Fce.Z].Position;                                Vertex[0].TextureCoordinate = AccessoryMesh.TransformedVertices[(int)Fce.X].TextureCoordinate;                              Vertex[1].TextureCoordinate = AccessoryMesh.TransformedVertices[(int)Fce.Y].TextureCoordinate;                              Vertex[2].TextureCoordinate = AccessoryMesh.TransformedVertices[(int)Fce.Z].TextureCoordinate;                                Vertex[0].Normal = AccessoryMesh.TransformedVertices[(int)Fce.X].Normal;                              Vertex[1].Normal = AccessoryMesh.TransformedVertices[(int)Fce.Y].Normal;                              Vertex[2].Normal = AccessoryMesh.TransformedVertices[(int)Fce.Z].Normal;                                m_Devc.DrawUserPrimitives(PrimitiveType.TriangleList' Vertex' 0' 1);                          }                            TransformVertices(AccessoryMesh' null' MeshType.Head);                      }                  }                  else                  {                      m_VitaboyShader.Parameters["VitaboyTexture"].SetValue(AccessoryTexture);                      m_VitaboyShader.Parameters["World"].SetValue(WorldMatrix);                      m_VitaboyShader.Parameters["ChildBones"].SetValue(GetAllBones(HeadMesh' Skel));                        foreach (EffectPass Pass in m_VitaboyShader.Techniques["TransformVerticesTechnique"].Passes)                      {                          Pass.Apply();                            foreach (Vector3 Fce in AccessoryMesh.Faces)                          {                              VitaboyVertex[] Vertex = new VitaboyVertex[3];                              Vertex[0].Position = AccessoryMesh.RealVertices[(int)Fce.X].Position;                              Vertex[1].Position = AccessoryMesh.RealVertices[(int)Fce.Y].Position;                              Vertex[2].Position = AccessoryMesh.RealVertices[(int)Fce.Z].Position;                                Vertex[0].TextureCoordinate = AccessoryMesh.RealVertices[(int)Fce.X].TextureCoordinate;                              Vertex[1].TextureCoordinate = AccessoryMesh.RealVertices[(int)Fce.Y].TextureCoordinate;                              Vertex[2].TextureCoordinate = AccessoryMesh.RealVertices[(int)Fce.Z].TextureCoordinate;                                Vertex[0].Normal = AccessoryMesh.RealVertices[(int)Fce.X].Normal;                              Vertex[1].Normal = AccessoryMesh.RealVertices[(int)Fce.Y].Normal;                              Vertex[2].Normal = AccessoryMesh.RealVertices[(int)Fce.Z].Normal;                                Vertex[0].BoneBinding = 0;                              Vertex[1].BoneBinding = 0;                              Vertex[2].BoneBinding = 0;                                m_Devc.DrawUserPrimitives(PrimitiveType.TriangleList' Vertex' 0' 1);                          }                      }                  }              }
Magic Number,Vitaboy,AvatarBase,C:\repos\Afr0_Project-Dollhouse\TSOClient\Vitaboy\Vitaboy\AvatarBase.cs,Render,The following statement contains a magic number: if (AccessoryMesh != null)              {                  if (m_GPURender == false)                  {                      foreach (EffectPass Pass in m_AccessoryEffect.CurrentTechnique.Passes)                      {                          Pass.Apply();                            foreach (Vector3 Fce in AccessoryMesh.Faces)                          {                              // Draw                              VertexPositionNormalTexture[] Vertex = new VertexPositionNormalTexture[3];                              Vertex[0].Position = AccessoryMesh.TransformedVertices[(int)Fce.X].Position;                              Vertex[1].Position = AccessoryMesh.TransformedVertices[(int)Fce.Y].Position;                              Vertex[2].Position = AccessoryMesh.TransformedVertices[(int)Fce.Z].Position;                                Vertex[0].TextureCoordinate = AccessoryMesh.TransformedVertices[(int)Fce.X].TextureCoordinate;                              Vertex[1].TextureCoordinate = AccessoryMesh.TransformedVertices[(int)Fce.Y].TextureCoordinate;                              Vertex[2].TextureCoordinate = AccessoryMesh.TransformedVertices[(int)Fce.Z].TextureCoordinate;                                Vertex[0].Normal = AccessoryMesh.TransformedVertices[(int)Fce.X].Normal;                              Vertex[1].Normal = AccessoryMesh.TransformedVertices[(int)Fce.Y].Normal;                              Vertex[2].Normal = AccessoryMesh.TransformedVertices[(int)Fce.Z].Normal;                                m_Devc.DrawUserPrimitives(PrimitiveType.TriangleList' Vertex' 0' 1);                          }                            TransformVertices(AccessoryMesh' null' MeshType.Head);                      }                  }                  else                  {                      m_VitaboyShader.Parameters["VitaboyTexture"].SetValue(AccessoryTexture);                      m_VitaboyShader.Parameters["World"].SetValue(WorldMatrix);                      m_VitaboyShader.Parameters["ChildBones"].SetValue(GetAllBones(HeadMesh' Skel));                        foreach (EffectPass Pass in m_VitaboyShader.Techniques["TransformVerticesTechnique"].Passes)                      {                          Pass.Apply();                            foreach (Vector3 Fce in AccessoryMesh.Faces)                          {                              VitaboyVertex[] Vertex = new VitaboyVertex[3];                              Vertex[0].Position = AccessoryMesh.RealVertices[(int)Fce.X].Position;                              Vertex[1].Position = AccessoryMesh.RealVertices[(int)Fce.Y].Position;                              Vertex[2].Position = AccessoryMesh.RealVertices[(int)Fce.Z].Position;                                Vertex[0].TextureCoordinate = AccessoryMesh.RealVertices[(int)Fce.X].TextureCoordinate;                              Vertex[1].TextureCoordinate = AccessoryMesh.RealVertices[(int)Fce.Y].TextureCoordinate;                              Vertex[2].TextureCoordinate = AccessoryMesh.RealVertices[(int)Fce.Z].TextureCoordinate;                                Vertex[0].Normal = AccessoryMesh.RealVertices[(int)Fce.X].Normal;                              Vertex[1].Normal = AccessoryMesh.RealVertices[(int)Fce.Y].Normal;                              Vertex[2].Normal = AccessoryMesh.RealVertices[(int)Fce.Z].Normal;                                Vertex[0].BoneBinding = 0;                              Vertex[1].BoneBinding = 0;                              Vertex[2].BoneBinding = 0;                                m_Devc.DrawUserPrimitives(PrimitiveType.TriangleList' Vertex' 0' 1);                          }                      }                  }              }
Magic Number,Vitaboy,AvatarBase,C:\repos\Afr0_Project-Dollhouse\TSOClient\Vitaboy\Vitaboy\AvatarBase.cs,Render,The following statement contains a magic number: if (BodyMesh != null)              {                  if (m_GPURender == false)                  {                      foreach (EffectPass Pass in m_BodyEffect.CurrentTechnique.Passes)                      {                          Pass.Apply();                            foreach (Vector3 Fce in BodyMesh.Faces)                          {                              // Draw                              VertexPositionNormalTexture[] Vertex = new VertexPositionNormalTexture[3];                              Vertex[0].Position = BodyMesh.TransformedVertices[(int)Fce.X].Position;                              Vertex[1].Position = BodyMesh.TransformedVertices[(int)Fce.Y].Position;                              Vertex[2].Position = BodyMesh.TransformedVertices[(int)Fce.Z].Position;                                Vertex[0].TextureCoordinate = BodyMesh.TransformedVertices[(int)Fce.X].TextureCoordinate;                              Vertex[1].TextureCoordinate = BodyMesh.TransformedVertices[(int)Fce.Y].TextureCoordinate;                              Vertex[2].TextureCoordinate = BodyMesh.TransformedVertices[(int)Fce.Z].TextureCoordinate;                                Vertex[0].Normal = BodyMesh.TransformedVertices[(int)Fce.X].Normal;                              Vertex[1].Normal = BodyMesh.TransformedVertices[(int)Fce.Y].Normal;                              Vertex[2].Normal = BodyMesh.TransformedVertices[(int)Fce.Z].Normal;                                m_Devc.DrawUserPrimitives(PrimitiveType.TriangleList' Vertex' 0' 1);                          }                            TransformVertices(BodyMesh' Skel.Bones[Skel.FindBone("PELVIS")]' MeshType.Body);                      }                  }                  else                  {                      CopyBodyVertices(Skel.Bones[Skel.FindBone("PELVIS")]);                        m_VitaboyShader.Parameters["VitaboyTexture"].SetValue(BodyTexture);                      m_VitaboyShader.Parameters["World"].SetValue(WorldMatrix);                      m_VitaboyShader.Parameters["ChildBones"].SetValue(GetAllBones(BodyMesh' Skel));                        foreach (EffectPass Pass in m_VitaboyShader.Techniques["TransformVerticesTechnique"].Passes)                      {                          foreach (Vector3 Fce in BodyMesh.Faces)                          {                              Pass.Apply();                                // Draw                              VitaboyVertex[] Vertex = new VitaboyVertex[3];                                Vertex[0].Position = BodyMesh.TransformedVertices[(int)Fce.X].Position;                              Vertex[1].Position = BodyMesh.TransformedVertices[(int)Fce.Y].Position;                              Vertex[2].Position = BodyMesh.TransformedVertices[(int)Fce.Z].Position;                                Vertex[0].TextureCoordinate = BodyMesh.TransformedVertices[(int)Fce.X].TextureCoordinate;                              Vertex[1].TextureCoordinate = BodyMesh.TransformedVertices[(int)Fce.Y].TextureCoordinate;                              Vertex[2].TextureCoordinate = BodyMesh.TransformedVertices[(int)Fce.Z].TextureCoordinate;                                Vertex[0].Normal = BodyMesh.TransformedVertices[(int)Fce.X].Normal;                              Vertex[1].Normal = BodyMesh.TransformedVertices[(int)Fce.Y].Normal;                              Vertex[2].Normal = BodyMesh.TransformedVertices[(int)Fce.Z].Normal;                                Vertex[0].BoneBinding = BodyMesh.TransformedVertices[(int)Fce.X].BoneBinding;                              Vertex[1].BoneBinding = BodyMesh.TransformedVertices[(int)Fce.Y].BoneBinding;                              Vertex[2].BoneBinding = BodyMesh.TransformedVertices[(int)Fce.Z].BoneBinding;                                m_Devc.DrawUserPrimitives(PrimitiveType.TriangleList' Vertex' 0' 1);                          }                      }                  }              }
Magic Number,Vitaboy,AvatarBase,C:\repos\Afr0_Project-Dollhouse\TSOClient\Vitaboy\Vitaboy\AvatarBase.cs,Render,The following statement contains a magic number: if (BodyMesh != null)              {                  if (m_GPURender == false)                  {                      foreach (EffectPass Pass in m_BodyEffect.CurrentTechnique.Passes)                      {                          Pass.Apply();                            foreach (Vector3 Fce in BodyMesh.Faces)                          {                              // Draw                              VertexPositionNormalTexture[] Vertex = new VertexPositionNormalTexture[3];                              Vertex[0].Position = BodyMesh.TransformedVertices[(int)Fce.X].Position;                              Vertex[1].Position = BodyMesh.TransformedVertices[(int)Fce.Y].Position;                              Vertex[2].Position = BodyMesh.TransformedVertices[(int)Fce.Z].Position;                                Vertex[0].TextureCoordinate = BodyMesh.TransformedVertices[(int)Fce.X].TextureCoordinate;                              Vertex[1].TextureCoordinate = BodyMesh.TransformedVertices[(int)Fce.Y].TextureCoordinate;                              Vertex[2].TextureCoordinate = BodyMesh.TransformedVertices[(int)Fce.Z].TextureCoordinate;                                Vertex[0].Normal = BodyMesh.TransformedVertices[(int)Fce.X].Normal;                              Vertex[1].Normal = BodyMesh.TransformedVertices[(int)Fce.Y].Normal;                              Vertex[2].Normal = BodyMesh.TransformedVertices[(int)Fce.Z].Normal;                                m_Devc.DrawUserPrimitives(PrimitiveType.TriangleList' Vertex' 0' 1);                          }                            TransformVertices(BodyMesh' Skel.Bones[Skel.FindBone("PELVIS")]' MeshType.Body);                      }                  }                  else                  {                      CopyBodyVertices(Skel.Bones[Skel.FindBone("PELVIS")]);                        m_VitaboyShader.Parameters["VitaboyTexture"].SetValue(BodyTexture);                      m_VitaboyShader.Parameters["World"].SetValue(WorldMatrix);                      m_VitaboyShader.Parameters["ChildBones"].SetValue(GetAllBones(BodyMesh' Skel));                        foreach (EffectPass Pass in m_VitaboyShader.Techniques["TransformVerticesTechnique"].Passes)                      {                          foreach (Vector3 Fce in BodyMesh.Faces)                          {                              Pass.Apply();                                // Draw                              VitaboyVertex[] Vertex = new VitaboyVertex[3];                                Vertex[0].Position = BodyMesh.TransformedVertices[(int)Fce.X].Position;                              Vertex[1].Position = BodyMesh.TransformedVertices[(int)Fce.Y].Position;                              Vertex[2].Position = BodyMesh.TransformedVertices[(int)Fce.Z].Position;                                Vertex[0].TextureCoordinate = BodyMesh.TransformedVertices[(int)Fce.X].TextureCoordinate;                              Vertex[1].TextureCoordinate = BodyMesh.TransformedVertices[(int)Fce.Y].TextureCoordinate;                              Vertex[2].TextureCoordinate = BodyMesh.TransformedVertices[(int)Fce.Z].TextureCoordinate;                                Vertex[0].Normal = BodyMesh.TransformedVertices[(int)Fce.X].Normal;                              Vertex[1].Normal = BodyMesh.TransformedVertices[(int)Fce.Y].Normal;                              Vertex[2].Normal = BodyMesh.TransformedVertices[(int)Fce.Z].Normal;                                Vertex[0].BoneBinding = BodyMesh.TransformedVertices[(int)Fce.X].BoneBinding;                              Vertex[1].BoneBinding = BodyMesh.TransformedVertices[(int)Fce.Y].BoneBinding;                              Vertex[2].BoneBinding = BodyMesh.TransformedVertices[(int)Fce.Z].BoneBinding;                                m_Devc.DrawUserPrimitives(PrimitiveType.TriangleList' Vertex' 0' 1);                          }                      }                  }              }
Magic Number,Vitaboy,AvatarBase,C:\repos\Afr0_Project-Dollhouse\TSOClient\Vitaboy\Vitaboy\AvatarBase.cs,Render,The following statement contains a magic number: if (BodyMesh != null)              {                  if (m_GPURender == false)                  {                      foreach (EffectPass Pass in m_BodyEffect.CurrentTechnique.Passes)                      {                          Pass.Apply();                            foreach (Vector3 Fce in BodyMesh.Faces)                          {                              // Draw                              VertexPositionNormalTexture[] Vertex = new VertexPositionNormalTexture[3];                              Vertex[0].Position = BodyMesh.TransformedVertices[(int)Fce.X].Position;                              Vertex[1].Position = BodyMesh.TransformedVertices[(int)Fce.Y].Position;                              Vertex[2].Position = BodyMesh.TransformedVertices[(int)Fce.Z].Position;                                Vertex[0].TextureCoordinate = BodyMesh.TransformedVertices[(int)Fce.X].TextureCoordinate;                              Vertex[1].TextureCoordinate = BodyMesh.TransformedVertices[(int)Fce.Y].TextureCoordinate;                              Vertex[2].TextureCoordinate = BodyMesh.TransformedVertices[(int)Fce.Z].TextureCoordinate;                                Vertex[0].Normal = BodyMesh.TransformedVertices[(int)Fce.X].Normal;                              Vertex[1].Normal = BodyMesh.TransformedVertices[(int)Fce.Y].Normal;                              Vertex[2].Normal = BodyMesh.TransformedVertices[(int)Fce.Z].Normal;                                m_Devc.DrawUserPrimitives(PrimitiveType.TriangleList' Vertex' 0' 1);                          }                            TransformVertices(BodyMesh' Skel.Bones[Skel.FindBone("PELVIS")]' MeshType.Body);                      }                  }                  else                  {                      CopyBodyVertices(Skel.Bones[Skel.FindBone("PELVIS")]);                        m_VitaboyShader.Parameters["VitaboyTexture"].SetValue(BodyTexture);                      m_VitaboyShader.Parameters["World"].SetValue(WorldMatrix);                      m_VitaboyShader.Parameters["ChildBones"].SetValue(GetAllBones(BodyMesh' Skel));                        foreach (EffectPass Pass in m_VitaboyShader.Techniques["TransformVerticesTechnique"].Passes)                      {                          foreach (Vector3 Fce in BodyMesh.Faces)                          {                              Pass.Apply();                                // Draw                              VitaboyVertex[] Vertex = new VitaboyVertex[3];                                Vertex[0].Position = BodyMesh.TransformedVertices[(int)Fce.X].Position;                              Vertex[1].Position = BodyMesh.TransformedVertices[(int)Fce.Y].Position;                              Vertex[2].Position = BodyMesh.TransformedVertices[(int)Fce.Z].Position;                                Vertex[0].TextureCoordinate = BodyMesh.TransformedVertices[(int)Fce.X].TextureCoordinate;                              Vertex[1].TextureCoordinate = BodyMesh.TransformedVertices[(int)Fce.Y].TextureCoordinate;                              Vertex[2].TextureCoordinate = BodyMesh.TransformedVertices[(int)Fce.Z].TextureCoordinate;                                Vertex[0].Normal = BodyMesh.TransformedVertices[(int)Fce.X].Normal;                              Vertex[1].Normal = BodyMesh.TransformedVertices[(int)Fce.Y].Normal;                              Vertex[2].Normal = BodyMesh.TransformedVertices[(int)Fce.Z].Normal;                                Vertex[0].BoneBinding = BodyMesh.TransformedVertices[(int)Fce.X].BoneBinding;                              Vertex[1].BoneBinding = BodyMesh.TransformedVertices[(int)Fce.Y].BoneBinding;                              Vertex[2].BoneBinding = BodyMesh.TransformedVertices[(int)Fce.Z].BoneBinding;                                m_Devc.DrawUserPrimitives(PrimitiveType.TriangleList' Vertex' 0' 1);                          }                      }                  }              }
Magic Number,Vitaboy,AvatarBase,C:\repos\Afr0_Project-Dollhouse\TSOClient\Vitaboy\Vitaboy\AvatarBase.cs,Render,The following statement contains a magic number: if (BodyMesh != null)              {                  if (m_GPURender == false)                  {                      foreach (EffectPass Pass in m_BodyEffect.CurrentTechnique.Passes)                      {                          Pass.Apply();                            foreach (Vector3 Fce in BodyMesh.Faces)                          {                              // Draw                              VertexPositionNormalTexture[] Vertex = new VertexPositionNormalTexture[3];                              Vertex[0].Position = BodyMesh.TransformedVertices[(int)Fce.X].Position;                              Vertex[1].Position = BodyMesh.TransformedVertices[(int)Fce.Y].Position;                              Vertex[2].Position = BodyMesh.TransformedVertices[(int)Fce.Z].Position;                                Vertex[0].TextureCoordinate = BodyMesh.TransformedVertices[(int)Fce.X].TextureCoordinate;                              Vertex[1].TextureCoordinate = BodyMesh.TransformedVertices[(int)Fce.Y].TextureCoordinate;                              Vertex[2].TextureCoordinate = BodyMesh.TransformedVertices[(int)Fce.Z].TextureCoordinate;                                Vertex[0].Normal = BodyMesh.TransformedVertices[(int)Fce.X].Normal;                              Vertex[1].Normal = BodyMesh.TransformedVertices[(int)Fce.Y].Normal;                              Vertex[2].Normal = BodyMesh.TransformedVertices[(int)Fce.Z].Normal;                                m_Devc.DrawUserPrimitives(PrimitiveType.TriangleList' Vertex' 0' 1);                          }                            TransformVertices(BodyMesh' Skel.Bones[Skel.FindBone("PELVIS")]' MeshType.Body);                      }                  }                  else                  {                      CopyBodyVertices(Skel.Bones[Skel.FindBone("PELVIS")]);                        m_VitaboyShader.Parameters["VitaboyTexture"].SetValue(BodyTexture);                      m_VitaboyShader.Parameters["World"].SetValue(WorldMatrix);                      m_VitaboyShader.Parameters["ChildBones"].SetValue(GetAllBones(BodyMesh' Skel));                        foreach (EffectPass Pass in m_VitaboyShader.Techniques["TransformVerticesTechnique"].Passes)                      {                          foreach (Vector3 Fce in BodyMesh.Faces)                          {                              Pass.Apply();                                // Draw                              VitaboyVertex[] Vertex = new VitaboyVertex[3];                                Vertex[0].Position = BodyMesh.TransformedVertices[(int)Fce.X].Position;                              Vertex[1].Position = BodyMesh.TransformedVertices[(int)Fce.Y].Position;                              Vertex[2].Position = BodyMesh.TransformedVertices[(int)Fce.Z].Position;                                Vertex[0].TextureCoordinate = BodyMesh.TransformedVertices[(int)Fce.X].TextureCoordinate;                              Vertex[1].TextureCoordinate = BodyMesh.TransformedVertices[(int)Fce.Y].TextureCoordinate;                              Vertex[2].TextureCoordinate = BodyMesh.TransformedVertices[(int)Fce.Z].TextureCoordinate;                                Vertex[0].Normal = BodyMesh.TransformedVertices[(int)Fce.X].Normal;                              Vertex[1].Normal = BodyMesh.TransformedVertices[(int)Fce.Y].Normal;                              Vertex[2].Normal = BodyMesh.TransformedVertices[(int)Fce.Z].Normal;                                Vertex[0].BoneBinding = BodyMesh.TransformedVertices[(int)Fce.X].BoneBinding;                              Vertex[1].BoneBinding = BodyMesh.TransformedVertices[(int)Fce.Y].BoneBinding;                              Vertex[2].BoneBinding = BodyMesh.TransformedVertices[(int)Fce.Z].BoneBinding;                                m_Devc.DrawUserPrimitives(PrimitiveType.TriangleList' Vertex' 0' 1);                          }                      }                  }              }
Magic Number,Vitaboy,AvatarBase,C:\repos\Afr0_Project-Dollhouse\TSOClient\Vitaboy\Vitaboy\AvatarBase.cs,Render,The following statement contains a magic number: if (BodyMesh != null)              {                  if (m_GPURender == false)                  {                      foreach (EffectPass Pass in m_BodyEffect.CurrentTechnique.Passes)                      {                          Pass.Apply();                            foreach (Vector3 Fce in BodyMesh.Faces)                          {                              // Draw                              VertexPositionNormalTexture[] Vertex = new VertexPositionNormalTexture[3];                              Vertex[0].Position = BodyMesh.TransformedVertices[(int)Fce.X].Position;                              Vertex[1].Position = BodyMesh.TransformedVertices[(int)Fce.Y].Position;                              Vertex[2].Position = BodyMesh.TransformedVertices[(int)Fce.Z].Position;                                Vertex[0].TextureCoordinate = BodyMesh.TransformedVertices[(int)Fce.X].TextureCoordinate;                              Vertex[1].TextureCoordinate = BodyMesh.TransformedVertices[(int)Fce.Y].TextureCoordinate;                              Vertex[2].TextureCoordinate = BodyMesh.TransformedVertices[(int)Fce.Z].TextureCoordinate;                                Vertex[0].Normal = BodyMesh.TransformedVertices[(int)Fce.X].Normal;                              Vertex[1].Normal = BodyMesh.TransformedVertices[(int)Fce.Y].Normal;                              Vertex[2].Normal = BodyMesh.TransformedVertices[(int)Fce.Z].Normal;                                m_Devc.DrawUserPrimitives(PrimitiveType.TriangleList' Vertex' 0' 1);                          }                            TransformVertices(BodyMesh' Skel.Bones[Skel.FindBone("PELVIS")]' MeshType.Body);                      }                  }                  else                  {                      CopyBodyVertices(Skel.Bones[Skel.FindBone("PELVIS")]);                        m_VitaboyShader.Parameters["VitaboyTexture"].SetValue(BodyTexture);                      m_VitaboyShader.Parameters["World"].SetValue(WorldMatrix);                      m_VitaboyShader.Parameters["ChildBones"].SetValue(GetAllBones(BodyMesh' Skel));                        foreach (EffectPass Pass in m_VitaboyShader.Techniques["TransformVerticesTechnique"].Passes)                      {                          foreach (Vector3 Fce in BodyMesh.Faces)                          {                              Pass.Apply();                                // Draw                              VitaboyVertex[] Vertex = new VitaboyVertex[3];                                Vertex[0].Position = BodyMesh.TransformedVertices[(int)Fce.X].Position;                              Vertex[1].Position = BodyMesh.TransformedVertices[(int)Fce.Y].Position;                              Vertex[2].Position = BodyMesh.TransformedVertices[(int)Fce.Z].Position;                                Vertex[0].TextureCoordinate = BodyMesh.TransformedVertices[(int)Fce.X].TextureCoordinate;                              Vertex[1].TextureCoordinate = BodyMesh.TransformedVertices[(int)Fce.Y].TextureCoordinate;                              Vertex[2].TextureCoordinate = BodyMesh.TransformedVertices[(int)Fce.Z].TextureCoordinate;                                Vertex[0].Normal = BodyMesh.TransformedVertices[(int)Fce.X].Normal;                              Vertex[1].Normal = BodyMesh.TransformedVertices[(int)Fce.Y].Normal;                              Vertex[2].Normal = BodyMesh.TransformedVertices[(int)Fce.Z].Normal;                                Vertex[0].BoneBinding = BodyMesh.TransformedVertices[(int)Fce.X].BoneBinding;                              Vertex[1].BoneBinding = BodyMesh.TransformedVertices[(int)Fce.Y].BoneBinding;                              Vertex[2].BoneBinding = BodyMesh.TransformedVertices[(int)Fce.Z].BoneBinding;                                m_Devc.DrawUserPrimitives(PrimitiveType.TriangleList' Vertex' 0' 1);                          }                      }                  }              }
Magic Number,Vitaboy,AvatarBase,C:\repos\Afr0_Project-Dollhouse\TSOClient\Vitaboy\Vitaboy\AvatarBase.cs,Render,The following statement contains a magic number: if (BodyMesh != null)              {                  if (m_GPURender == false)                  {                      foreach (EffectPass Pass in m_BodyEffect.CurrentTechnique.Passes)                      {                          Pass.Apply();                            foreach (Vector3 Fce in BodyMesh.Faces)                          {                              // Draw                              VertexPositionNormalTexture[] Vertex = new VertexPositionNormalTexture[3];                              Vertex[0].Position = BodyMesh.TransformedVertices[(int)Fce.X].Position;                              Vertex[1].Position = BodyMesh.TransformedVertices[(int)Fce.Y].Position;                              Vertex[2].Position = BodyMesh.TransformedVertices[(int)Fce.Z].Position;                                Vertex[0].TextureCoordinate = BodyMesh.TransformedVertices[(int)Fce.X].TextureCoordinate;                              Vertex[1].TextureCoordinate = BodyMesh.TransformedVertices[(int)Fce.Y].TextureCoordinate;                              Vertex[2].TextureCoordinate = BodyMesh.TransformedVertices[(int)Fce.Z].TextureCoordinate;                                Vertex[0].Normal = BodyMesh.TransformedVertices[(int)Fce.X].Normal;                              Vertex[1].Normal = BodyMesh.TransformedVertices[(int)Fce.Y].Normal;                              Vertex[2].Normal = BodyMesh.TransformedVertices[(int)Fce.Z].Normal;                                m_Devc.DrawUserPrimitives(PrimitiveType.TriangleList' Vertex' 0' 1);                          }                            TransformVertices(BodyMesh' Skel.Bones[Skel.FindBone("PELVIS")]' MeshType.Body);                      }                  }                  else                  {                      CopyBodyVertices(Skel.Bones[Skel.FindBone("PELVIS")]);                        m_VitaboyShader.Parameters["VitaboyTexture"].SetValue(BodyTexture);                      m_VitaboyShader.Parameters["World"].SetValue(WorldMatrix);                      m_VitaboyShader.Parameters["ChildBones"].SetValue(GetAllBones(BodyMesh' Skel));                        foreach (EffectPass Pass in m_VitaboyShader.Techniques["TransformVerticesTechnique"].Passes)                      {                          foreach (Vector3 Fce in BodyMesh.Faces)                          {                              Pass.Apply();                                // Draw                              VitaboyVertex[] Vertex = new VitaboyVertex[3];                                Vertex[0].Position = BodyMesh.TransformedVertices[(int)Fce.X].Position;                              Vertex[1].Position = BodyMesh.TransformedVertices[(int)Fce.Y].Position;                              Vertex[2].Position = BodyMesh.TransformedVertices[(int)Fce.Z].Position;                                Vertex[0].TextureCoordinate = BodyMesh.TransformedVertices[(int)Fce.X].TextureCoordinate;                              Vertex[1].TextureCoordinate = BodyMesh.TransformedVertices[(int)Fce.Y].TextureCoordinate;                              Vertex[2].TextureCoordinate = BodyMesh.TransformedVertices[(int)Fce.Z].TextureCoordinate;                                Vertex[0].Normal = BodyMesh.TransformedVertices[(int)Fce.X].Normal;                              Vertex[1].Normal = BodyMesh.TransformedVertices[(int)Fce.Y].Normal;                              Vertex[2].Normal = BodyMesh.TransformedVertices[(int)Fce.Z].Normal;                                Vertex[0].BoneBinding = BodyMesh.TransformedVertices[(int)Fce.X].BoneBinding;                              Vertex[1].BoneBinding = BodyMesh.TransformedVertices[(int)Fce.Y].BoneBinding;                              Vertex[2].BoneBinding = BodyMesh.TransformedVertices[(int)Fce.Z].BoneBinding;                                m_Devc.DrawUserPrimitives(PrimitiveType.TriangleList' Vertex' 0' 1);                          }                      }                  }              }
Magic Number,Vitaboy,AvatarBase,C:\repos\Afr0_Project-Dollhouse\TSOClient\Vitaboy\Vitaboy\AvatarBase.cs,Render,The following statement contains a magic number: if (BodyMesh != null)              {                  if (m_GPURender == false)                  {                      foreach (EffectPass Pass in m_BodyEffect.CurrentTechnique.Passes)                      {                          Pass.Apply();                            foreach (Vector3 Fce in BodyMesh.Faces)                          {                              // Draw                              VertexPositionNormalTexture[] Vertex = new VertexPositionNormalTexture[3];                              Vertex[0].Position = BodyMesh.TransformedVertices[(int)Fce.X].Position;                              Vertex[1].Position = BodyMesh.TransformedVertices[(int)Fce.Y].Position;                              Vertex[2].Position = BodyMesh.TransformedVertices[(int)Fce.Z].Position;                                Vertex[0].TextureCoordinate = BodyMesh.TransformedVertices[(int)Fce.X].TextureCoordinate;                              Vertex[1].TextureCoordinate = BodyMesh.TransformedVertices[(int)Fce.Y].TextureCoordinate;                              Vertex[2].TextureCoordinate = BodyMesh.TransformedVertices[(int)Fce.Z].TextureCoordinate;                                Vertex[0].Normal = BodyMesh.TransformedVertices[(int)Fce.X].Normal;                              Vertex[1].Normal = BodyMesh.TransformedVertices[(int)Fce.Y].Normal;                              Vertex[2].Normal = BodyMesh.TransformedVertices[(int)Fce.Z].Normal;                                m_Devc.DrawUserPrimitives(PrimitiveType.TriangleList' Vertex' 0' 1);                          }                            TransformVertices(BodyMesh' Skel.Bones[Skel.FindBone("PELVIS")]' MeshType.Body);                      }                  }                  else                  {                      CopyBodyVertices(Skel.Bones[Skel.FindBone("PELVIS")]);                        m_VitaboyShader.Parameters["VitaboyTexture"].SetValue(BodyTexture);                      m_VitaboyShader.Parameters["World"].SetValue(WorldMatrix);                      m_VitaboyShader.Parameters["ChildBones"].SetValue(GetAllBones(BodyMesh' Skel));                        foreach (EffectPass Pass in m_VitaboyShader.Techniques["TransformVerticesTechnique"].Passes)                      {                          foreach (Vector3 Fce in BodyMesh.Faces)                          {                              Pass.Apply();                                // Draw                              VitaboyVertex[] Vertex = new VitaboyVertex[3];                                Vertex[0].Position = BodyMesh.TransformedVertices[(int)Fce.X].Position;                              Vertex[1].Position = BodyMesh.TransformedVertices[(int)Fce.Y].Position;                              Vertex[2].Position = BodyMesh.TransformedVertices[(int)Fce.Z].Position;                                Vertex[0].TextureCoordinate = BodyMesh.TransformedVertices[(int)Fce.X].TextureCoordinate;                              Vertex[1].TextureCoordinate = BodyMesh.TransformedVertices[(int)Fce.Y].TextureCoordinate;                              Vertex[2].TextureCoordinate = BodyMesh.TransformedVertices[(int)Fce.Z].TextureCoordinate;                                Vertex[0].Normal = BodyMesh.TransformedVertices[(int)Fce.X].Normal;                              Vertex[1].Normal = BodyMesh.TransformedVertices[(int)Fce.Y].Normal;                              Vertex[2].Normal = BodyMesh.TransformedVertices[(int)Fce.Z].Normal;                                Vertex[0].BoneBinding = BodyMesh.TransformedVertices[(int)Fce.X].BoneBinding;                              Vertex[1].BoneBinding = BodyMesh.TransformedVertices[(int)Fce.Y].BoneBinding;                              Vertex[2].BoneBinding = BodyMesh.TransformedVertices[(int)Fce.Z].BoneBinding;                                m_Devc.DrawUserPrimitives(PrimitiveType.TriangleList' Vertex' 0' 1);                          }                      }                  }              }
Magic Number,Vitaboy,AvatarBase,C:\repos\Afr0_Project-Dollhouse\TSOClient\Vitaboy\Vitaboy\AvatarBase.cs,Render,The following statement contains a magic number: if (BodyMesh != null)              {                  if (m_GPURender == false)                  {                      foreach (EffectPass Pass in m_BodyEffect.CurrentTechnique.Passes)                      {                          Pass.Apply();                            foreach (Vector3 Fce in BodyMesh.Faces)                          {                              // Draw                              VertexPositionNormalTexture[] Vertex = new VertexPositionNormalTexture[3];                              Vertex[0].Position = BodyMesh.TransformedVertices[(int)Fce.X].Position;                              Vertex[1].Position = BodyMesh.TransformedVertices[(int)Fce.Y].Position;                              Vertex[2].Position = BodyMesh.TransformedVertices[(int)Fce.Z].Position;                                Vertex[0].TextureCoordinate = BodyMesh.TransformedVertices[(int)Fce.X].TextureCoordinate;                              Vertex[1].TextureCoordinate = BodyMesh.TransformedVertices[(int)Fce.Y].TextureCoordinate;                              Vertex[2].TextureCoordinate = BodyMesh.TransformedVertices[(int)Fce.Z].TextureCoordinate;                                Vertex[0].Normal = BodyMesh.TransformedVertices[(int)Fce.X].Normal;                              Vertex[1].Normal = BodyMesh.TransformedVertices[(int)Fce.Y].Normal;                              Vertex[2].Normal = BodyMesh.TransformedVertices[(int)Fce.Z].Normal;                                m_Devc.DrawUserPrimitives(PrimitiveType.TriangleList' Vertex' 0' 1);                          }                            TransformVertices(BodyMesh' Skel.Bones[Skel.FindBone("PELVIS")]' MeshType.Body);                      }                  }                  else                  {                      CopyBodyVertices(Skel.Bones[Skel.FindBone("PELVIS")]);                        m_VitaboyShader.Parameters["VitaboyTexture"].SetValue(BodyTexture);                      m_VitaboyShader.Parameters["World"].SetValue(WorldMatrix);                      m_VitaboyShader.Parameters["ChildBones"].SetValue(GetAllBones(BodyMesh' Skel));                        foreach (EffectPass Pass in m_VitaboyShader.Techniques["TransformVerticesTechnique"].Passes)                      {                          foreach (Vector3 Fce in BodyMesh.Faces)                          {                              Pass.Apply();                                // Draw                              VitaboyVertex[] Vertex = new VitaboyVertex[3];                                Vertex[0].Position = BodyMesh.TransformedVertices[(int)Fce.X].Position;                              Vertex[1].Position = BodyMesh.TransformedVertices[(int)Fce.Y].Position;                              Vertex[2].Position = BodyMesh.TransformedVertices[(int)Fce.Z].Position;                                Vertex[0].TextureCoordinate = BodyMesh.TransformedVertices[(int)Fce.X].TextureCoordinate;                              Vertex[1].TextureCoordinate = BodyMesh.TransformedVertices[(int)Fce.Y].TextureCoordinate;                              Vertex[2].TextureCoordinate = BodyMesh.TransformedVertices[(int)Fce.Z].TextureCoordinate;                                Vertex[0].Normal = BodyMesh.TransformedVertices[(int)Fce.X].Normal;                              Vertex[1].Normal = BodyMesh.TransformedVertices[(int)Fce.Y].Normal;                              Vertex[2].Normal = BodyMesh.TransformedVertices[(int)Fce.Z].Normal;                                Vertex[0].BoneBinding = BodyMesh.TransformedVertices[(int)Fce.X].BoneBinding;                              Vertex[1].BoneBinding = BodyMesh.TransformedVertices[(int)Fce.Y].BoneBinding;                              Vertex[2].BoneBinding = BodyMesh.TransformedVertices[(int)Fce.Z].BoneBinding;                                m_Devc.DrawUserPrimitives(PrimitiveType.TriangleList' Vertex' 0' 1);                          }                      }                  }              }
Magic Number,Vitaboy,AvatarBase,C:\repos\Afr0_Project-Dollhouse\TSOClient\Vitaboy\Vitaboy\AvatarBase.cs,Render,The following statement contains a magic number: if (BodyMesh != null)              {                  if (m_GPURender == false)                  {                      foreach (EffectPass Pass in m_BodyEffect.CurrentTechnique.Passes)                      {                          Pass.Apply();                            foreach (Vector3 Fce in BodyMesh.Faces)                          {                              // Draw                              VertexPositionNormalTexture[] Vertex = new VertexPositionNormalTexture[3];                              Vertex[0].Position = BodyMesh.TransformedVertices[(int)Fce.X].Position;                              Vertex[1].Position = BodyMesh.TransformedVertices[(int)Fce.Y].Position;                              Vertex[2].Position = BodyMesh.TransformedVertices[(int)Fce.Z].Position;                                Vertex[0].TextureCoordinate = BodyMesh.TransformedVertices[(int)Fce.X].TextureCoordinate;                              Vertex[1].TextureCoordinate = BodyMesh.TransformedVertices[(int)Fce.Y].TextureCoordinate;                              Vertex[2].TextureCoordinate = BodyMesh.TransformedVertices[(int)Fce.Z].TextureCoordinate;                                Vertex[0].Normal = BodyMesh.TransformedVertices[(int)Fce.X].Normal;                              Vertex[1].Normal = BodyMesh.TransformedVertices[(int)Fce.Y].Normal;                              Vertex[2].Normal = BodyMesh.TransformedVertices[(int)Fce.Z].Normal;                                m_Devc.DrawUserPrimitives(PrimitiveType.TriangleList' Vertex' 0' 1);                          }                            TransformVertices(BodyMesh' Skel.Bones[Skel.FindBone("PELVIS")]' MeshType.Body);                      }                  }                  else                  {                      CopyBodyVertices(Skel.Bones[Skel.FindBone("PELVIS")]);                        m_VitaboyShader.Parameters["VitaboyTexture"].SetValue(BodyTexture);                      m_VitaboyShader.Parameters["World"].SetValue(WorldMatrix);                      m_VitaboyShader.Parameters["ChildBones"].SetValue(GetAllBones(BodyMesh' Skel));                        foreach (EffectPass Pass in m_VitaboyShader.Techniques["TransformVerticesTechnique"].Passes)                      {                          foreach (Vector3 Fce in BodyMesh.Faces)                          {                              Pass.Apply();                                // Draw                              VitaboyVertex[] Vertex = new VitaboyVertex[3];                                Vertex[0].Position = BodyMesh.TransformedVertices[(int)Fce.X].Position;                              Vertex[1].Position = BodyMesh.TransformedVertices[(int)Fce.Y].Position;                              Vertex[2].Position = BodyMesh.TransformedVertices[(int)Fce.Z].Position;                                Vertex[0].TextureCoordinate = BodyMesh.TransformedVertices[(int)Fce.X].TextureCoordinate;                              Vertex[1].TextureCoordinate = BodyMesh.TransformedVertices[(int)Fce.Y].TextureCoordinate;                              Vertex[2].TextureCoordinate = BodyMesh.TransformedVertices[(int)Fce.Z].TextureCoordinate;                                Vertex[0].Normal = BodyMesh.TransformedVertices[(int)Fce.X].Normal;                              Vertex[1].Normal = BodyMesh.TransformedVertices[(int)Fce.Y].Normal;                              Vertex[2].Normal = BodyMesh.TransformedVertices[(int)Fce.Z].Normal;                                Vertex[0].BoneBinding = BodyMesh.TransformedVertices[(int)Fce.X].BoneBinding;                              Vertex[1].BoneBinding = BodyMesh.TransformedVertices[(int)Fce.Y].BoneBinding;                              Vertex[2].BoneBinding = BodyMesh.TransformedVertices[(int)Fce.Z].BoneBinding;                                m_Devc.DrawUserPrimitives(PrimitiveType.TriangleList' Vertex' 0' 1);                          }                      }                  }              }
Magic Number,Vitaboy,AvatarBase,C:\repos\Afr0_Project-Dollhouse\TSOClient\Vitaboy\Vitaboy\AvatarBase.cs,Render,The following statement contains a magic number: if (LeftHandMesh != null)              {                  if (m_GPURender == false)                  {                      foreach (EffectPass Pass in m_LeftHandEffect.CurrentTechnique.Passes)                      {                          Pass.Apply();                            foreach (Vector3 Fce in LeftHandMesh.Faces)                          {                              // Draw                              VertexPositionNormalTexture[] Vertex = new VertexPositionNormalTexture[3];                              Vertex[0].Position = LeftHandMesh.TransformedVertices[(int)Fce.X].Position;                              Vertex[1].Position = LeftHandMesh.TransformedVertices[(int)Fce.Y].Position;                              Vertex[2].Position = LeftHandMesh.TransformedVertices[(int)Fce.Z].Position;                                m_Devc.DrawUserPrimitives(PrimitiveType.TriangleList' Vertex' 0' 1);                          }                            TransformVertices(LeftHandMesh' null' MeshType.LHand);                      }                  }                  else                  {                      m_VitaboyShader.Parameters["VitaboyTexture"].SetValue(LeftHandTexture);                      m_VitaboyShader.Parameters["World"].SetValue(WorldMatrix);                      m_VitaboyShader.Parameters["ChildBones"].SetValue(GetAllBones(LeftHandMesh' Skel));                        foreach (EffectPass Pass in m_VitaboyShader.Techniques["TransformVerticesTechnique"].Passes)                      {                          Pass.Apply();                            foreach (Vector3 Fce in LeftHandMesh.Faces)                          {                              VitaboyVertex[] Vertex = new VitaboyVertex[3];                              Vertex[0].Position = LeftHandMesh.RealVertices[(int)Fce.X].Position;                              Vertex[1].Position = LeftHandMesh.RealVertices[(int)Fce.Y].Position;                              Vertex[2].Position = LeftHandMesh.RealVertices[(int)Fce.Z].Position;                                Vertex[0].TextureCoordinate = LeftHandMesh.RealVertices[(int)Fce.X].TextureCoordinate;                              Vertex[1].TextureCoordinate = LeftHandMesh.RealVertices[(int)Fce.Y].TextureCoordinate;                              Vertex[2].TextureCoordinate = LeftHandMesh.RealVertices[(int)Fce.Z].TextureCoordinate;                                Vertex[0].Normal = LeftHandMesh.RealVertices[(int)Fce.X].Normal;                              Vertex[1].Normal = LeftHandMesh.RealVertices[(int)Fce.Y].Normal;                              Vertex[2].Normal = LeftHandMesh.RealVertices[(int)Fce.Z].Normal;                                //All the meshes except the body mesh only references one bone.                              Vertex[0].BoneBinding = 0;                              Vertex[1].BoneBinding = 0;                              Vertex[2].BoneBinding = 0;                                m_Devc.DrawUserPrimitives(PrimitiveType.TriangleList' Vertex' 0' 1);                          }                      }                  }              }
Magic Number,Vitaboy,AvatarBase,C:\repos\Afr0_Project-Dollhouse\TSOClient\Vitaboy\Vitaboy\AvatarBase.cs,Render,The following statement contains a magic number: if (LeftHandMesh != null)              {                  if (m_GPURender == false)                  {                      foreach (EffectPass Pass in m_LeftHandEffect.CurrentTechnique.Passes)                      {                          Pass.Apply();                            foreach (Vector3 Fce in LeftHandMesh.Faces)                          {                              // Draw                              VertexPositionNormalTexture[] Vertex = new VertexPositionNormalTexture[3];                              Vertex[0].Position = LeftHandMesh.TransformedVertices[(int)Fce.X].Position;                              Vertex[1].Position = LeftHandMesh.TransformedVertices[(int)Fce.Y].Position;                              Vertex[2].Position = LeftHandMesh.TransformedVertices[(int)Fce.Z].Position;                                m_Devc.DrawUserPrimitives(PrimitiveType.TriangleList' Vertex' 0' 1);                          }                            TransformVertices(LeftHandMesh' null' MeshType.LHand);                      }                  }                  else                  {                      m_VitaboyShader.Parameters["VitaboyTexture"].SetValue(LeftHandTexture);                      m_VitaboyShader.Parameters["World"].SetValue(WorldMatrix);                      m_VitaboyShader.Parameters["ChildBones"].SetValue(GetAllBones(LeftHandMesh' Skel));                        foreach (EffectPass Pass in m_VitaboyShader.Techniques["TransformVerticesTechnique"].Passes)                      {                          Pass.Apply();                            foreach (Vector3 Fce in LeftHandMesh.Faces)                          {                              VitaboyVertex[] Vertex = new VitaboyVertex[3];                              Vertex[0].Position = LeftHandMesh.RealVertices[(int)Fce.X].Position;                              Vertex[1].Position = LeftHandMesh.RealVertices[(int)Fce.Y].Position;                              Vertex[2].Position = LeftHandMesh.RealVertices[(int)Fce.Z].Position;                                Vertex[0].TextureCoordinate = LeftHandMesh.RealVertices[(int)Fce.X].TextureCoordinate;                              Vertex[1].TextureCoordinate = LeftHandMesh.RealVertices[(int)Fce.Y].TextureCoordinate;                              Vertex[2].TextureCoordinate = LeftHandMesh.RealVertices[(int)Fce.Z].TextureCoordinate;                                Vertex[0].Normal = LeftHandMesh.RealVertices[(int)Fce.X].Normal;                              Vertex[1].Normal = LeftHandMesh.RealVertices[(int)Fce.Y].Normal;                              Vertex[2].Normal = LeftHandMesh.RealVertices[(int)Fce.Z].Normal;                                //All the meshes except the body mesh only references one bone.                              Vertex[0].BoneBinding = 0;                              Vertex[1].BoneBinding = 0;                              Vertex[2].BoneBinding = 0;                                m_Devc.DrawUserPrimitives(PrimitiveType.TriangleList' Vertex' 0' 1);                          }                      }                  }              }
Magic Number,Vitaboy,AvatarBase,C:\repos\Afr0_Project-Dollhouse\TSOClient\Vitaboy\Vitaboy\AvatarBase.cs,Render,The following statement contains a magic number: if (LeftHandMesh != null)              {                  if (m_GPURender == false)                  {                      foreach (EffectPass Pass in m_LeftHandEffect.CurrentTechnique.Passes)                      {                          Pass.Apply();                            foreach (Vector3 Fce in LeftHandMesh.Faces)                          {                              // Draw                              VertexPositionNormalTexture[] Vertex = new VertexPositionNormalTexture[3];                              Vertex[0].Position = LeftHandMesh.TransformedVertices[(int)Fce.X].Position;                              Vertex[1].Position = LeftHandMesh.TransformedVertices[(int)Fce.Y].Position;                              Vertex[2].Position = LeftHandMesh.TransformedVertices[(int)Fce.Z].Position;                                m_Devc.DrawUserPrimitives(PrimitiveType.TriangleList' Vertex' 0' 1);                          }                            TransformVertices(LeftHandMesh' null' MeshType.LHand);                      }                  }                  else                  {                      m_VitaboyShader.Parameters["VitaboyTexture"].SetValue(LeftHandTexture);                      m_VitaboyShader.Parameters["World"].SetValue(WorldMatrix);                      m_VitaboyShader.Parameters["ChildBones"].SetValue(GetAllBones(LeftHandMesh' Skel));                        foreach (EffectPass Pass in m_VitaboyShader.Techniques["TransformVerticesTechnique"].Passes)                      {                          Pass.Apply();                            foreach (Vector3 Fce in LeftHandMesh.Faces)                          {                              VitaboyVertex[] Vertex = new VitaboyVertex[3];                              Vertex[0].Position = LeftHandMesh.RealVertices[(int)Fce.X].Position;                              Vertex[1].Position = LeftHandMesh.RealVertices[(int)Fce.Y].Position;                              Vertex[2].Position = LeftHandMesh.RealVertices[(int)Fce.Z].Position;                                Vertex[0].TextureCoordinate = LeftHandMesh.RealVertices[(int)Fce.X].TextureCoordinate;                              Vertex[1].TextureCoordinate = LeftHandMesh.RealVertices[(int)Fce.Y].TextureCoordinate;                              Vertex[2].TextureCoordinate = LeftHandMesh.RealVertices[(int)Fce.Z].TextureCoordinate;                                Vertex[0].Normal = LeftHandMesh.RealVertices[(int)Fce.X].Normal;                              Vertex[1].Normal = LeftHandMesh.RealVertices[(int)Fce.Y].Normal;                              Vertex[2].Normal = LeftHandMesh.RealVertices[(int)Fce.Z].Normal;                                //All the meshes except the body mesh only references one bone.                              Vertex[0].BoneBinding = 0;                              Vertex[1].BoneBinding = 0;                              Vertex[2].BoneBinding = 0;                                m_Devc.DrawUserPrimitives(PrimitiveType.TriangleList' Vertex' 0' 1);                          }                      }                  }              }
Magic Number,Vitaboy,AvatarBase,C:\repos\Afr0_Project-Dollhouse\TSOClient\Vitaboy\Vitaboy\AvatarBase.cs,Render,The following statement contains a magic number: if (LeftHandMesh != null)              {                  if (m_GPURender == false)                  {                      foreach (EffectPass Pass in m_LeftHandEffect.CurrentTechnique.Passes)                      {                          Pass.Apply();                            foreach (Vector3 Fce in LeftHandMesh.Faces)                          {                              // Draw                              VertexPositionNormalTexture[] Vertex = new VertexPositionNormalTexture[3];                              Vertex[0].Position = LeftHandMesh.TransformedVertices[(int)Fce.X].Position;                              Vertex[1].Position = LeftHandMesh.TransformedVertices[(int)Fce.Y].Position;                              Vertex[2].Position = LeftHandMesh.TransformedVertices[(int)Fce.Z].Position;                                m_Devc.DrawUserPrimitives(PrimitiveType.TriangleList' Vertex' 0' 1);                          }                            TransformVertices(LeftHandMesh' null' MeshType.LHand);                      }                  }                  else                  {                      m_VitaboyShader.Parameters["VitaboyTexture"].SetValue(LeftHandTexture);                      m_VitaboyShader.Parameters["World"].SetValue(WorldMatrix);                      m_VitaboyShader.Parameters["ChildBones"].SetValue(GetAllBones(LeftHandMesh' Skel));                        foreach (EffectPass Pass in m_VitaboyShader.Techniques["TransformVerticesTechnique"].Passes)                      {                          Pass.Apply();                            foreach (Vector3 Fce in LeftHandMesh.Faces)                          {                              VitaboyVertex[] Vertex = new VitaboyVertex[3];                              Vertex[0].Position = LeftHandMesh.RealVertices[(int)Fce.X].Position;                              Vertex[1].Position = LeftHandMesh.RealVertices[(int)Fce.Y].Position;                              Vertex[2].Position = LeftHandMesh.RealVertices[(int)Fce.Z].Position;                                Vertex[0].TextureCoordinate = LeftHandMesh.RealVertices[(int)Fce.X].TextureCoordinate;                              Vertex[1].TextureCoordinate = LeftHandMesh.RealVertices[(int)Fce.Y].TextureCoordinate;                              Vertex[2].TextureCoordinate = LeftHandMesh.RealVertices[(int)Fce.Z].TextureCoordinate;                                Vertex[0].Normal = LeftHandMesh.RealVertices[(int)Fce.X].Normal;                              Vertex[1].Normal = LeftHandMesh.RealVertices[(int)Fce.Y].Normal;                              Vertex[2].Normal = LeftHandMesh.RealVertices[(int)Fce.Z].Normal;                                //All the meshes except the body mesh only references one bone.                              Vertex[0].BoneBinding = 0;                              Vertex[1].BoneBinding = 0;                              Vertex[2].BoneBinding = 0;                                m_Devc.DrawUserPrimitives(PrimitiveType.TriangleList' Vertex' 0' 1);                          }                      }                  }              }
Magic Number,Vitaboy,AvatarBase,C:\repos\Afr0_Project-Dollhouse\TSOClient\Vitaboy\Vitaboy\AvatarBase.cs,Render,The following statement contains a magic number: if (LeftHandMesh != null)              {                  if (m_GPURender == false)                  {                      foreach (EffectPass Pass in m_LeftHandEffect.CurrentTechnique.Passes)                      {                          Pass.Apply();                            foreach (Vector3 Fce in LeftHandMesh.Faces)                          {                              // Draw                              VertexPositionNormalTexture[] Vertex = new VertexPositionNormalTexture[3];                              Vertex[0].Position = LeftHandMesh.TransformedVertices[(int)Fce.X].Position;                              Vertex[1].Position = LeftHandMesh.TransformedVertices[(int)Fce.Y].Position;                              Vertex[2].Position = LeftHandMesh.TransformedVertices[(int)Fce.Z].Position;                                m_Devc.DrawUserPrimitives(PrimitiveType.TriangleList' Vertex' 0' 1);                          }                            TransformVertices(LeftHandMesh' null' MeshType.LHand);                      }                  }                  else                  {                      m_VitaboyShader.Parameters["VitaboyTexture"].SetValue(LeftHandTexture);                      m_VitaboyShader.Parameters["World"].SetValue(WorldMatrix);                      m_VitaboyShader.Parameters["ChildBones"].SetValue(GetAllBones(LeftHandMesh' Skel));                        foreach (EffectPass Pass in m_VitaboyShader.Techniques["TransformVerticesTechnique"].Passes)                      {                          Pass.Apply();                            foreach (Vector3 Fce in LeftHandMesh.Faces)                          {                              VitaboyVertex[] Vertex = new VitaboyVertex[3];                              Vertex[0].Position = LeftHandMesh.RealVertices[(int)Fce.X].Position;                              Vertex[1].Position = LeftHandMesh.RealVertices[(int)Fce.Y].Position;                              Vertex[2].Position = LeftHandMesh.RealVertices[(int)Fce.Z].Position;                                Vertex[0].TextureCoordinate = LeftHandMesh.RealVertices[(int)Fce.X].TextureCoordinate;                              Vertex[1].TextureCoordinate = LeftHandMesh.RealVertices[(int)Fce.Y].TextureCoordinate;                              Vertex[2].TextureCoordinate = LeftHandMesh.RealVertices[(int)Fce.Z].TextureCoordinate;                                Vertex[0].Normal = LeftHandMesh.RealVertices[(int)Fce.X].Normal;                              Vertex[1].Normal = LeftHandMesh.RealVertices[(int)Fce.Y].Normal;                              Vertex[2].Normal = LeftHandMesh.RealVertices[(int)Fce.Z].Normal;                                //All the meshes except the body mesh only references one bone.                              Vertex[0].BoneBinding = 0;                              Vertex[1].BoneBinding = 0;                              Vertex[2].BoneBinding = 0;                                m_Devc.DrawUserPrimitives(PrimitiveType.TriangleList' Vertex' 0' 1);                          }                      }                  }              }
Magic Number,Vitaboy,AvatarBase,C:\repos\Afr0_Project-Dollhouse\TSOClient\Vitaboy\Vitaboy\AvatarBase.cs,Render,The following statement contains a magic number: if (LeftHandMesh != null)              {                  if (m_GPURender == false)                  {                      foreach (EffectPass Pass in m_LeftHandEffect.CurrentTechnique.Passes)                      {                          Pass.Apply();                            foreach (Vector3 Fce in LeftHandMesh.Faces)                          {                              // Draw                              VertexPositionNormalTexture[] Vertex = new VertexPositionNormalTexture[3];                              Vertex[0].Position = LeftHandMesh.TransformedVertices[(int)Fce.X].Position;                              Vertex[1].Position = LeftHandMesh.TransformedVertices[(int)Fce.Y].Position;                              Vertex[2].Position = LeftHandMesh.TransformedVertices[(int)Fce.Z].Position;                                m_Devc.DrawUserPrimitives(PrimitiveType.TriangleList' Vertex' 0' 1);                          }                            TransformVertices(LeftHandMesh' null' MeshType.LHand);                      }                  }                  else                  {                      m_VitaboyShader.Parameters["VitaboyTexture"].SetValue(LeftHandTexture);                      m_VitaboyShader.Parameters["World"].SetValue(WorldMatrix);                      m_VitaboyShader.Parameters["ChildBones"].SetValue(GetAllBones(LeftHandMesh' Skel));                        foreach (EffectPass Pass in m_VitaboyShader.Techniques["TransformVerticesTechnique"].Passes)                      {                          Pass.Apply();                            foreach (Vector3 Fce in LeftHandMesh.Faces)                          {                              VitaboyVertex[] Vertex = new VitaboyVertex[3];                              Vertex[0].Position = LeftHandMesh.RealVertices[(int)Fce.X].Position;                              Vertex[1].Position = LeftHandMesh.RealVertices[(int)Fce.Y].Position;                              Vertex[2].Position = LeftHandMesh.RealVertices[(int)Fce.Z].Position;                                Vertex[0].TextureCoordinate = LeftHandMesh.RealVertices[(int)Fce.X].TextureCoordinate;                              Vertex[1].TextureCoordinate = LeftHandMesh.RealVertices[(int)Fce.Y].TextureCoordinate;                              Vertex[2].TextureCoordinate = LeftHandMesh.RealVertices[(int)Fce.Z].TextureCoordinate;                                Vertex[0].Normal = LeftHandMesh.RealVertices[(int)Fce.X].Normal;                              Vertex[1].Normal = LeftHandMesh.RealVertices[(int)Fce.Y].Normal;                              Vertex[2].Normal = LeftHandMesh.RealVertices[(int)Fce.Z].Normal;                                //All the meshes except the body mesh only references one bone.                              Vertex[0].BoneBinding = 0;                              Vertex[1].BoneBinding = 0;                              Vertex[2].BoneBinding = 0;                                m_Devc.DrawUserPrimitives(PrimitiveType.TriangleList' Vertex' 0' 1);                          }                      }                  }              }
Magic Number,Vitaboy,AvatarBase,C:\repos\Afr0_Project-Dollhouse\TSOClient\Vitaboy\Vitaboy\AvatarBase.cs,Render,The following statement contains a magic number: if (LeftHandMesh != null)              {                  if (m_GPURender == false)                  {                      foreach (EffectPass Pass in m_LeftHandEffect.CurrentTechnique.Passes)                      {                          Pass.Apply();                            foreach (Vector3 Fce in LeftHandMesh.Faces)                          {                              // Draw                              VertexPositionNormalTexture[] Vertex = new VertexPositionNormalTexture[3];                              Vertex[0].Position = LeftHandMesh.TransformedVertices[(int)Fce.X].Position;                              Vertex[1].Position = LeftHandMesh.TransformedVertices[(int)Fce.Y].Position;                              Vertex[2].Position = LeftHandMesh.TransformedVertices[(int)Fce.Z].Position;                                m_Devc.DrawUserPrimitives(PrimitiveType.TriangleList' Vertex' 0' 1);                          }                            TransformVertices(LeftHandMesh' null' MeshType.LHand);                      }                  }                  else                  {                      m_VitaboyShader.Parameters["VitaboyTexture"].SetValue(LeftHandTexture);                      m_VitaboyShader.Parameters["World"].SetValue(WorldMatrix);                      m_VitaboyShader.Parameters["ChildBones"].SetValue(GetAllBones(LeftHandMesh' Skel));                        foreach (EffectPass Pass in m_VitaboyShader.Techniques["TransformVerticesTechnique"].Passes)                      {                          Pass.Apply();                            foreach (Vector3 Fce in LeftHandMesh.Faces)                          {                              VitaboyVertex[] Vertex = new VitaboyVertex[3];                              Vertex[0].Position = LeftHandMesh.RealVertices[(int)Fce.X].Position;                              Vertex[1].Position = LeftHandMesh.RealVertices[(int)Fce.Y].Position;                              Vertex[2].Position = LeftHandMesh.RealVertices[(int)Fce.Z].Position;                                Vertex[0].TextureCoordinate = LeftHandMesh.RealVertices[(int)Fce.X].TextureCoordinate;                              Vertex[1].TextureCoordinate = LeftHandMesh.RealVertices[(int)Fce.Y].TextureCoordinate;                              Vertex[2].TextureCoordinate = LeftHandMesh.RealVertices[(int)Fce.Z].TextureCoordinate;                                Vertex[0].Normal = LeftHandMesh.RealVertices[(int)Fce.X].Normal;                              Vertex[1].Normal = LeftHandMesh.RealVertices[(int)Fce.Y].Normal;                              Vertex[2].Normal = LeftHandMesh.RealVertices[(int)Fce.Z].Normal;                                //All the meshes except the body mesh only references one bone.                              Vertex[0].BoneBinding = 0;                              Vertex[1].BoneBinding = 0;                              Vertex[2].BoneBinding = 0;                                m_Devc.DrawUserPrimitives(PrimitiveType.TriangleList' Vertex' 0' 1);                          }                      }                  }              }
Magic Number,Vitaboy,AvatarBase,C:\repos\Afr0_Project-Dollhouse\TSOClient\Vitaboy\Vitaboy\AvatarBase.cs,Render,The following statement contains a magic number: if (RightHandMesh != null)              {                  if (m_GPURender == false)                  {                      foreach (EffectPass Pass in m_LeftHandEffect.CurrentTechnique.Passes)                      {                          Pass.Apply();                            foreach (Vector3 Fce in RightHandMesh.Faces)                          {                              // Draw                              VertexPositionNormalTexture[] Vertex = new VertexPositionNormalTexture[3];                              Vertex[0].Position = RightHandMesh.TransformedVertices[(int)Fce.X].Position;                              Vertex[1].Position = RightHandMesh.TransformedVertices[(int)Fce.Y].Position;                              Vertex[2].Position = RightHandMesh.TransformedVertices[(int)Fce.Z].Position;                                m_Devc.DrawUserPrimitives(PrimitiveType.TriangleList' Vertex' 0' 1);                          }                            TransformVertices(RightHandMesh' null' MeshType.RHand);                      }                  }                  else                  {                      m_VitaboyShader.Parameters["VitaboyTexture"].SetValue(RightHandTexture);                      m_VitaboyShader.Parameters["World"].SetValue(WorldMatrix);                      m_VitaboyShader.Parameters["ChildBones"].SetValue(GetAllBones(RightHandMesh' Skel));                          foreach (EffectPass Pass in m_VitaboyShader.Techniques["TransformVerticesTechnique"].Passes)                      {                          Pass.Apply();                            foreach (Vector3 Fce in RightHandMesh.Faces)                          {                              VitaboyVertex[] Vertex = new VitaboyVertex[3];                              Vertex[0].Position = RightHandMesh.RealVertices[(int)Fce.X].Position;                              Vertex[1].Position = RightHandMesh.RealVertices[(int)Fce.Y].Position;                              Vertex[2].Position = RightHandMesh.RealVertices[(int)Fce.Z].Position;                                Vertex[0].TextureCoordinate = RightHandMesh.RealVertices[(int)Fce.X].TextureCoordinate;                              Vertex[1].TextureCoordinate = RightHandMesh.RealVertices[(int)Fce.Y].TextureCoordinate;                              Vertex[2].TextureCoordinate = RightHandMesh.RealVertices[(int)Fce.Z].TextureCoordinate;                                Vertex[0].Normal = RightHandMesh.RealVertices[(int)Fce.X].Normal;                              Vertex[1].Normal = RightHandMesh.RealVertices[(int)Fce.Y].Normal;                              Vertex[2].Normal = RightHandMesh.RealVertices[(int)Fce.Z].Normal;                                //All the meshes except the body mesh only references one bone.                              Vertex[0].BoneBinding = 0;                              Vertex[1].BoneBinding = 0;                              Vertex[2].BoneBinding = 0;                                m_Devc.DrawUserPrimitives(PrimitiveType.TriangleList' Vertex' 0' 1);                          }                      }                  }              }
Magic Number,Vitaboy,AvatarBase,C:\repos\Afr0_Project-Dollhouse\TSOClient\Vitaboy\Vitaboy\AvatarBase.cs,Render,The following statement contains a magic number: if (RightHandMesh != null)              {                  if (m_GPURender == false)                  {                      foreach (EffectPass Pass in m_LeftHandEffect.CurrentTechnique.Passes)                      {                          Pass.Apply();                            foreach (Vector3 Fce in RightHandMesh.Faces)                          {                              // Draw                              VertexPositionNormalTexture[] Vertex = new VertexPositionNormalTexture[3];                              Vertex[0].Position = RightHandMesh.TransformedVertices[(int)Fce.X].Position;                              Vertex[1].Position = RightHandMesh.TransformedVertices[(int)Fce.Y].Position;                              Vertex[2].Position = RightHandMesh.TransformedVertices[(int)Fce.Z].Position;                                m_Devc.DrawUserPrimitives(PrimitiveType.TriangleList' Vertex' 0' 1);                          }                            TransformVertices(RightHandMesh' null' MeshType.RHand);                      }                  }                  else                  {                      m_VitaboyShader.Parameters["VitaboyTexture"].SetValue(RightHandTexture);                      m_VitaboyShader.Parameters["World"].SetValue(WorldMatrix);                      m_VitaboyShader.Parameters["ChildBones"].SetValue(GetAllBones(RightHandMesh' Skel));                          foreach (EffectPass Pass in m_VitaboyShader.Techniques["TransformVerticesTechnique"].Passes)                      {                          Pass.Apply();                            foreach (Vector3 Fce in RightHandMesh.Faces)                          {                              VitaboyVertex[] Vertex = new VitaboyVertex[3];                              Vertex[0].Position = RightHandMesh.RealVertices[(int)Fce.X].Position;                              Vertex[1].Position = RightHandMesh.RealVertices[(int)Fce.Y].Position;                              Vertex[2].Position = RightHandMesh.RealVertices[(int)Fce.Z].Position;                                Vertex[0].TextureCoordinate = RightHandMesh.RealVertices[(int)Fce.X].TextureCoordinate;                              Vertex[1].TextureCoordinate = RightHandMesh.RealVertices[(int)Fce.Y].TextureCoordinate;                              Vertex[2].TextureCoordinate = RightHandMesh.RealVertices[(int)Fce.Z].TextureCoordinate;                                Vertex[0].Normal = RightHandMesh.RealVertices[(int)Fce.X].Normal;                              Vertex[1].Normal = RightHandMesh.RealVertices[(int)Fce.Y].Normal;                              Vertex[2].Normal = RightHandMesh.RealVertices[(int)Fce.Z].Normal;                                //All the meshes except the body mesh only references one bone.                              Vertex[0].BoneBinding = 0;                              Vertex[1].BoneBinding = 0;                              Vertex[2].BoneBinding = 0;                                m_Devc.DrawUserPrimitives(PrimitiveType.TriangleList' Vertex' 0' 1);                          }                      }                  }              }
Magic Number,Vitaboy,AvatarBase,C:\repos\Afr0_Project-Dollhouse\TSOClient\Vitaboy\Vitaboy\AvatarBase.cs,Render,The following statement contains a magic number: if (RightHandMesh != null)              {                  if (m_GPURender == false)                  {                      foreach (EffectPass Pass in m_LeftHandEffect.CurrentTechnique.Passes)                      {                          Pass.Apply();                            foreach (Vector3 Fce in RightHandMesh.Faces)                          {                              // Draw                              VertexPositionNormalTexture[] Vertex = new VertexPositionNormalTexture[3];                              Vertex[0].Position = RightHandMesh.TransformedVertices[(int)Fce.X].Position;                              Vertex[1].Position = RightHandMesh.TransformedVertices[(int)Fce.Y].Position;                              Vertex[2].Position = RightHandMesh.TransformedVertices[(int)Fce.Z].Position;                                m_Devc.DrawUserPrimitives(PrimitiveType.TriangleList' Vertex' 0' 1);                          }                            TransformVertices(RightHandMesh' null' MeshType.RHand);                      }                  }                  else                  {                      m_VitaboyShader.Parameters["VitaboyTexture"].SetValue(RightHandTexture);                      m_VitaboyShader.Parameters["World"].SetValue(WorldMatrix);                      m_VitaboyShader.Parameters["ChildBones"].SetValue(GetAllBones(RightHandMesh' Skel));                          foreach (EffectPass Pass in m_VitaboyShader.Techniques["TransformVerticesTechnique"].Passes)                      {                          Pass.Apply();                            foreach (Vector3 Fce in RightHandMesh.Faces)                          {                              VitaboyVertex[] Vertex = new VitaboyVertex[3];                              Vertex[0].Position = RightHandMesh.RealVertices[(int)Fce.X].Position;                              Vertex[1].Position = RightHandMesh.RealVertices[(int)Fce.Y].Position;                              Vertex[2].Position = RightHandMesh.RealVertices[(int)Fce.Z].Position;                                Vertex[0].TextureCoordinate = RightHandMesh.RealVertices[(int)Fce.X].TextureCoordinate;                              Vertex[1].TextureCoordinate = RightHandMesh.RealVertices[(int)Fce.Y].TextureCoordinate;                              Vertex[2].TextureCoordinate = RightHandMesh.RealVertices[(int)Fce.Z].TextureCoordinate;                                Vertex[0].Normal = RightHandMesh.RealVertices[(int)Fce.X].Normal;                              Vertex[1].Normal = RightHandMesh.RealVertices[(int)Fce.Y].Normal;                              Vertex[2].Normal = RightHandMesh.RealVertices[(int)Fce.Z].Normal;                                //All the meshes except the body mesh only references one bone.                              Vertex[0].BoneBinding = 0;                              Vertex[1].BoneBinding = 0;                              Vertex[2].BoneBinding = 0;                                m_Devc.DrawUserPrimitives(PrimitiveType.TriangleList' Vertex' 0' 1);                          }                      }                  }              }
Magic Number,Vitaboy,AvatarBase,C:\repos\Afr0_Project-Dollhouse\TSOClient\Vitaboy\Vitaboy\AvatarBase.cs,Render,The following statement contains a magic number: if (RightHandMesh != null)              {                  if (m_GPURender == false)                  {                      foreach (EffectPass Pass in m_LeftHandEffect.CurrentTechnique.Passes)                      {                          Pass.Apply();                            foreach (Vector3 Fce in RightHandMesh.Faces)                          {                              // Draw                              VertexPositionNormalTexture[] Vertex = new VertexPositionNormalTexture[3];                              Vertex[0].Position = RightHandMesh.TransformedVertices[(int)Fce.X].Position;                              Vertex[1].Position = RightHandMesh.TransformedVertices[(int)Fce.Y].Position;                              Vertex[2].Position = RightHandMesh.TransformedVertices[(int)Fce.Z].Position;                                m_Devc.DrawUserPrimitives(PrimitiveType.TriangleList' Vertex' 0' 1);                          }                            TransformVertices(RightHandMesh' null' MeshType.RHand);                      }                  }                  else                  {                      m_VitaboyShader.Parameters["VitaboyTexture"].SetValue(RightHandTexture);                      m_VitaboyShader.Parameters["World"].SetValue(WorldMatrix);                      m_VitaboyShader.Parameters["ChildBones"].SetValue(GetAllBones(RightHandMesh' Skel));                          foreach (EffectPass Pass in m_VitaboyShader.Techniques["TransformVerticesTechnique"].Passes)                      {                          Pass.Apply();                            foreach (Vector3 Fce in RightHandMesh.Faces)                          {                              VitaboyVertex[] Vertex = new VitaboyVertex[3];                              Vertex[0].Position = RightHandMesh.RealVertices[(int)Fce.X].Position;                              Vertex[1].Position = RightHandMesh.RealVertices[(int)Fce.Y].Position;                              Vertex[2].Position = RightHandMesh.RealVertices[(int)Fce.Z].Position;                                Vertex[0].TextureCoordinate = RightHandMesh.RealVertices[(int)Fce.X].TextureCoordinate;                              Vertex[1].TextureCoordinate = RightHandMesh.RealVertices[(int)Fce.Y].TextureCoordinate;                              Vertex[2].TextureCoordinate = RightHandMesh.RealVertices[(int)Fce.Z].TextureCoordinate;                                Vertex[0].Normal = RightHandMesh.RealVertices[(int)Fce.X].Normal;                              Vertex[1].Normal = RightHandMesh.RealVertices[(int)Fce.Y].Normal;                              Vertex[2].Normal = RightHandMesh.RealVertices[(int)Fce.Z].Normal;                                //All the meshes except the body mesh only references one bone.                              Vertex[0].BoneBinding = 0;                              Vertex[1].BoneBinding = 0;                              Vertex[2].BoneBinding = 0;                                m_Devc.DrawUserPrimitives(PrimitiveType.TriangleList' Vertex' 0' 1);                          }                      }                  }              }
Magic Number,Vitaboy,AvatarBase,C:\repos\Afr0_Project-Dollhouse\TSOClient\Vitaboy\Vitaboy\AvatarBase.cs,Render,The following statement contains a magic number: if (RightHandMesh != null)              {                  if (m_GPURender == false)                  {                      foreach (EffectPass Pass in m_LeftHandEffect.CurrentTechnique.Passes)                      {                          Pass.Apply();                            foreach (Vector3 Fce in RightHandMesh.Faces)                          {                              // Draw                              VertexPositionNormalTexture[] Vertex = new VertexPositionNormalTexture[3];                              Vertex[0].Position = RightHandMesh.TransformedVertices[(int)Fce.X].Position;                              Vertex[1].Position = RightHandMesh.TransformedVertices[(int)Fce.Y].Position;                              Vertex[2].Position = RightHandMesh.TransformedVertices[(int)Fce.Z].Position;                                m_Devc.DrawUserPrimitives(PrimitiveType.TriangleList' Vertex' 0' 1);                          }                            TransformVertices(RightHandMesh' null' MeshType.RHand);                      }                  }                  else                  {                      m_VitaboyShader.Parameters["VitaboyTexture"].SetValue(RightHandTexture);                      m_VitaboyShader.Parameters["World"].SetValue(WorldMatrix);                      m_VitaboyShader.Parameters["ChildBones"].SetValue(GetAllBones(RightHandMesh' Skel));                          foreach (EffectPass Pass in m_VitaboyShader.Techniques["TransformVerticesTechnique"].Passes)                      {                          Pass.Apply();                            foreach (Vector3 Fce in RightHandMesh.Faces)                          {                              VitaboyVertex[] Vertex = new VitaboyVertex[3];                              Vertex[0].Position = RightHandMesh.RealVertices[(int)Fce.X].Position;                              Vertex[1].Position = RightHandMesh.RealVertices[(int)Fce.Y].Position;                              Vertex[2].Position = RightHandMesh.RealVertices[(int)Fce.Z].Position;                                Vertex[0].TextureCoordinate = RightHandMesh.RealVertices[(int)Fce.X].TextureCoordinate;                              Vertex[1].TextureCoordinate = RightHandMesh.RealVertices[(int)Fce.Y].TextureCoordinate;                              Vertex[2].TextureCoordinate = RightHandMesh.RealVertices[(int)Fce.Z].TextureCoordinate;                                Vertex[0].Normal = RightHandMesh.RealVertices[(int)Fce.X].Normal;                              Vertex[1].Normal = RightHandMesh.RealVertices[(int)Fce.Y].Normal;                              Vertex[2].Normal = RightHandMesh.RealVertices[(int)Fce.Z].Normal;                                //All the meshes except the body mesh only references one bone.                              Vertex[0].BoneBinding = 0;                              Vertex[1].BoneBinding = 0;                              Vertex[2].BoneBinding = 0;                                m_Devc.DrawUserPrimitives(PrimitiveType.TriangleList' Vertex' 0' 1);                          }                      }                  }              }
Magic Number,Vitaboy,AvatarBase,C:\repos\Afr0_Project-Dollhouse\TSOClient\Vitaboy\Vitaboy\AvatarBase.cs,Render,The following statement contains a magic number: if (RightHandMesh != null)              {                  if (m_GPURender == false)                  {                      foreach (EffectPass Pass in m_LeftHandEffect.CurrentTechnique.Passes)                      {                          Pass.Apply();                            foreach (Vector3 Fce in RightHandMesh.Faces)                          {                              // Draw                              VertexPositionNormalTexture[] Vertex = new VertexPositionNormalTexture[3];                              Vertex[0].Position = RightHandMesh.TransformedVertices[(int)Fce.X].Position;                              Vertex[1].Position = RightHandMesh.TransformedVertices[(int)Fce.Y].Position;                              Vertex[2].Position = RightHandMesh.TransformedVertices[(int)Fce.Z].Position;                                m_Devc.DrawUserPrimitives(PrimitiveType.TriangleList' Vertex' 0' 1);                          }                            TransformVertices(RightHandMesh' null' MeshType.RHand);                      }                  }                  else                  {                      m_VitaboyShader.Parameters["VitaboyTexture"].SetValue(RightHandTexture);                      m_VitaboyShader.Parameters["World"].SetValue(WorldMatrix);                      m_VitaboyShader.Parameters["ChildBones"].SetValue(GetAllBones(RightHandMesh' Skel));                          foreach (EffectPass Pass in m_VitaboyShader.Techniques["TransformVerticesTechnique"].Passes)                      {                          Pass.Apply();                            foreach (Vector3 Fce in RightHandMesh.Faces)                          {                              VitaboyVertex[] Vertex = new VitaboyVertex[3];                              Vertex[0].Position = RightHandMesh.RealVertices[(int)Fce.X].Position;                              Vertex[1].Position = RightHandMesh.RealVertices[(int)Fce.Y].Position;                              Vertex[2].Position = RightHandMesh.RealVertices[(int)Fce.Z].Position;                                Vertex[0].TextureCoordinate = RightHandMesh.RealVertices[(int)Fce.X].TextureCoordinate;                              Vertex[1].TextureCoordinate = RightHandMesh.RealVertices[(int)Fce.Y].TextureCoordinate;                              Vertex[2].TextureCoordinate = RightHandMesh.RealVertices[(int)Fce.Z].TextureCoordinate;                                Vertex[0].Normal = RightHandMesh.RealVertices[(int)Fce.X].Normal;                              Vertex[1].Normal = RightHandMesh.RealVertices[(int)Fce.Y].Normal;                              Vertex[2].Normal = RightHandMesh.RealVertices[(int)Fce.Z].Normal;                                //All the meshes except the body mesh only references one bone.                              Vertex[0].BoneBinding = 0;                              Vertex[1].BoneBinding = 0;                              Vertex[2].BoneBinding = 0;                                m_Devc.DrawUserPrimitives(PrimitiveType.TriangleList' Vertex' 0' 1);                          }                      }                  }              }
Magic Number,Vitaboy,AvatarBase,C:\repos\Afr0_Project-Dollhouse\TSOClient\Vitaboy\Vitaboy\AvatarBase.cs,Render,The following statement contains a magic number: if (RightHandMesh != null)              {                  if (m_GPURender == false)                  {                      foreach (EffectPass Pass in m_LeftHandEffect.CurrentTechnique.Passes)                      {                          Pass.Apply();                            foreach (Vector3 Fce in RightHandMesh.Faces)                          {                              // Draw                              VertexPositionNormalTexture[] Vertex = new VertexPositionNormalTexture[3];                              Vertex[0].Position = RightHandMesh.TransformedVertices[(int)Fce.X].Position;                              Vertex[1].Position = RightHandMesh.TransformedVertices[(int)Fce.Y].Position;                              Vertex[2].Position = RightHandMesh.TransformedVertices[(int)Fce.Z].Position;                                m_Devc.DrawUserPrimitives(PrimitiveType.TriangleList' Vertex' 0' 1);                          }                            TransformVertices(RightHandMesh' null' MeshType.RHand);                      }                  }                  else                  {                      m_VitaboyShader.Parameters["VitaboyTexture"].SetValue(RightHandTexture);                      m_VitaboyShader.Parameters["World"].SetValue(WorldMatrix);                      m_VitaboyShader.Parameters["ChildBones"].SetValue(GetAllBones(RightHandMesh' Skel));                          foreach (EffectPass Pass in m_VitaboyShader.Techniques["TransformVerticesTechnique"].Passes)                      {                          Pass.Apply();                            foreach (Vector3 Fce in RightHandMesh.Faces)                          {                              VitaboyVertex[] Vertex = new VitaboyVertex[3];                              Vertex[0].Position = RightHandMesh.RealVertices[(int)Fce.X].Position;                              Vertex[1].Position = RightHandMesh.RealVertices[(int)Fce.Y].Position;                              Vertex[2].Position = RightHandMesh.RealVertices[(int)Fce.Z].Position;                                Vertex[0].TextureCoordinate = RightHandMesh.RealVertices[(int)Fce.X].TextureCoordinate;                              Vertex[1].TextureCoordinate = RightHandMesh.RealVertices[(int)Fce.Y].TextureCoordinate;                              Vertex[2].TextureCoordinate = RightHandMesh.RealVertices[(int)Fce.Z].TextureCoordinate;                                Vertex[0].Normal = RightHandMesh.RealVertices[(int)Fce.X].Normal;                              Vertex[1].Normal = RightHandMesh.RealVertices[(int)Fce.Y].Normal;                              Vertex[2].Normal = RightHandMesh.RealVertices[(int)Fce.Z].Normal;                                //All the meshes except the body mesh only references one bone.                              Vertex[0].BoneBinding = 0;                              Vertex[1].BoneBinding = 0;                              Vertex[2].BoneBinding = 0;                                m_Devc.DrawUserPrimitives(PrimitiveType.TriangleList' Vertex' 0' 1);                          }                      }                  }              }
Magic Number,Vitaboy,AvatarBase,C:\repos\Afr0_Project-Dollhouse\TSOClient\Vitaboy\Vitaboy\AvatarBase.cs,AdvanceFrame,The following statement contains a magic number: float Duration = (float)Animation.Motions[0].FrameCount / 30;
Magic Number,Vitaboy,AvatarBase,C:\repos\Afr0_Project-Dollhouse\TSOClient\Vitaboy\Vitaboy\AvatarBase.cs,AdvanceFrame,The following statement contains a magic number: for (int i = 0; i < Animation.Motions.Count; i++)              {                  int BoneIndex = Skel.FindBone(Animation.Motions[i].BoneName);                    if (BoneIndex == -1)                      continue;                    int Frame = (int)(m_AnimationTime * 30);                  float FractionShown = m_AnimationTime * 30 - Frame;                  int NextFrame = (Frame + 1 != Animation.Motions[0].FrameCount) ? Frame + 1 : 0;                    if (Animation.Motions[i].HasTranslation)                  {                      Vector3 Translation = new Vector3(                          Animation.Translations[Frame + Animation.Motions[i].FirstTranslationIndex' 0]'                          Animation.Translations[Frame + Animation.Motions[i].FirstTranslationIndex' 1]'                          Animation.Translations[Frame + Animation.Motions[i].FirstTranslationIndex' 2]);                      Vector3 NextTranslation = new Vector3(                          Animation.Translations[NextFrame + Animation.Motions[i].FirstTranslationIndex' 0]'                          Animation.Translations[NextFrame + Animation.Motions[i].FirstTranslationIndex' 1]'                          Animation.Translations[NextFrame + Animation.Motions[i].FirstTranslationIndex' 2]);                        Vector3 UpdatedTranslation = new Vector3();                      UpdatedTranslation.X = (1 - FractionShown) * Translation.X + FractionShown * NextTranslation.X;                      UpdatedTranslation.Y = (1 - FractionShown) * Translation.Y + FractionShown * NextTranslation.Y;                      UpdatedTranslation.Z = (1 - FractionShown) * Translation.Z + FractionShown * NextTranslation.Z;                        Skel.Bones[BoneIndex].Translation = UpdatedTranslation;                  }                    if (Animation.Motions[i].HasRotation)                  {                      Quaternion Rotation = new Quaternion(                          Animation.Rotations[Frame + Animation.Motions[i].FirstRotationIndex' 0]'                          Animation.Rotations[Frame + Animation.Motions[i].FirstRotationIndex' 1]'                          Animation.Rotations[Frame + Animation.Motions[i].FirstRotationIndex' 2]'                          Animation.Rotations[Frame + Animation.Motions[i].FirstRotationIndex' 3]);                      Quaternion NextRotation = new Quaternion(                          Animation.Rotations[NextFrame + Animation.Motions[i].FirstRotationIndex' 0]'                          Animation.Rotations[NextFrame + Animation.Motions[i].FirstRotationIndex' 1]'                          Animation.Rotations[NextFrame + Animation.Motions[i].FirstRotationIndex' 2]'                          Animation.Rotations[NextFrame + Animation.Motions[i].FirstRotationIndex' 3]);                        //Use Slerp to interpolate                      float W1' W2 = 1.0f;                      float CosTheta = Helpers.DotProduct(Rotation' NextRotation);                        if (CosTheta < 0)                      {                          CosTheta *= -1;                          W2 *= -1;                      }                        float Theta = (float)Math.Acos(CosTheta);                      float SinTheta = (float)Math.Sin(Theta);                        if (SinTheta > 0.001f)                      {                          W1 = (float)Math.Sin((1.0f - FractionShown) * Theta) / SinTheta;                          W2 *= (float)Math.Sin(FractionShown * Theta) / SinTheta;                      }                      else                      {                          W1 = 1.0f - FractionShown;                          W2 = FractionShown;                      }                        Quaternion UpdatedRotation = new Quaternion();                      UpdatedRotation.X = W1 * Rotation.X + W2 * NextRotation.X;                      UpdatedRotation.Y = W1 * Rotation.Y + W2 * NextRotation.Y;                      UpdatedRotation.Z = W1 * Rotation.Z + W2 * NextRotation.Z;                      UpdatedRotation.W = W1 * Rotation.W + W2 * NextRotation.W;                        Skel.Bones[BoneIndex].Rotation.X = UpdatedRotation.X;                      Skel.Bones[BoneIndex].Rotation.Y = UpdatedRotation.Y;                      Skel.Bones[BoneIndex].Rotation.Z = UpdatedRotation.Z;                      Skel.Bones[BoneIndex].Rotation.W = UpdatedRotation.W;                  }              }
Magic Number,Vitaboy,AvatarBase,C:\repos\Afr0_Project-Dollhouse\TSOClient\Vitaboy\Vitaboy\AvatarBase.cs,AdvanceFrame,The following statement contains a magic number: for (int i = 0; i < Animation.Motions.Count; i++)              {                  int BoneIndex = Skel.FindBone(Animation.Motions[i].BoneName);                    if (BoneIndex == -1)                      continue;                    int Frame = (int)(m_AnimationTime * 30);                  float FractionShown = m_AnimationTime * 30 - Frame;                  int NextFrame = (Frame + 1 != Animation.Motions[0].FrameCount) ? Frame + 1 : 0;                    if (Animation.Motions[i].HasTranslation)                  {                      Vector3 Translation = new Vector3(                          Animation.Translations[Frame + Animation.Motions[i].FirstTranslationIndex' 0]'                          Animation.Translations[Frame + Animation.Motions[i].FirstTranslationIndex' 1]'                          Animation.Translations[Frame + Animation.Motions[i].FirstTranslationIndex' 2]);                      Vector3 NextTranslation = new Vector3(                          Animation.Translations[NextFrame + Animation.Motions[i].FirstTranslationIndex' 0]'                          Animation.Translations[NextFrame + Animation.Motions[i].FirstTranslationIndex' 1]'                          Animation.Translations[NextFrame + Animation.Motions[i].FirstTranslationIndex' 2]);                        Vector3 UpdatedTranslation = new Vector3();                      UpdatedTranslation.X = (1 - FractionShown) * Translation.X + FractionShown * NextTranslation.X;                      UpdatedTranslation.Y = (1 - FractionShown) * Translation.Y + FractionShown * NextTranslation.Y;                      UpdatedTranslation.Z = (1 - FractionShown) * Translation.Z + FractionShown * NextTranslation.Z;                        Skel.Bones[BoneIndex].Translation = UpdatedTranslation;                  }                    if (Animation.Motions[i].HasRotation)                  {                      Quaternion Rotation = new Quaternion(                          Animation.Rotations[Frame + Animation.Motions[i].FirstRotationIndex' 0]'                          Animation.Rotations[Frame + Animation.Motions[i].FirstRotationIndex' 1]'                          Animation.Rotations[Frame + Animation.Motions[i].FirstRotationIndex' 2]'                          Animation.Rotations[Frame + Animation.Motions[i].FirstRotationIndex' 3]);                      Quaternion NextRotation = new Quaternion(                          Animation.Rotations[NextFrame + Animation.Motions[i].FirstRotationIndex' 0]'                          Animation.Rotations[NextFrame + Animation.Motions[i].FirstRotationIndex' 1]'                          Animation.Rotations[NextFrame + Animation.Motions[i].FirstRotationIndex' 2]'                          Animation.Rotations[NextFrame + Animation.Motions[i].FirstRotationIndex' 3]);                        //Use Slerp to interpolate                      float W1' W2 = 1.0f;                      float CosTheta = Helpers.DotProduct(Rotation' NextRotation);                        if (CosTheta < 0)                      {                          CosTheta *= -1;                          W2 *= -1;                      }                        float Theta = (float)Math.Acos(CosTheta);                      float SinTheta = (float)Math.Sin(Theta);                        if (SinTheta > 0.001f)                      {                          W1 = (float)Math.Sin((1.0f - FractionShown) * Theta) / SinTheta;                          W2 *= (float)Math.Sin(FractionShown * Theta) / SinTheta;                      }                      else                      {                          W1 = 1.0f - FractionShown;                          W2 = FractionShown;                      }                        Quaternion UpdatedRotation = new Quaternion();                      UpdatedRotation.X = W1 * Rotation.X + W2 * NextRotation.X;                      UpdatedRotation.Y = W1 * Rotation.Y + W2 * NextRotation.Y;                      UpdatedRotation.Z = W1 * Rotation.Z + W2 * NextRotation.Z;                      UpdatedRotation.W = W1 * Rotation.W + W2 * NextRotation.W;                        Skel.Bones[BoneIndex].Rotation.X = UpdatedRotation.X;                      Skel.Bones[BoneIndex].Rotation.Y = UpdatedRotation.Y;                      Skel.Bones[BoneIndex].Rotation.Z = UpdatedRotation.Z;                      Skel.Bones[BoneIndex].Rotation.W = UpdatedRotation.W;                  }              }
Magic Number,Vitaboy,AvatarBase,C:\repos\Afr0_Project-Dollhouse\TSOClient\Vitaboy\Vitaboy\AvatarBase.cs,AdvanceFrame,The following statement contains a magic number: for (int i = 0; i < Animation.Motions.Count; i++)              {                  int BoneIndex = Skel.FindBone(Animation.Motions[i].BoneName);                    if (BoneIndex == -1)                      continue;                    int Frame = (int)(m_AnimationTime * 30);                  float FractionShown = m_AnimationTime * 30 - Frame;                  int NextFrame = (Frame + 1 != Animation.Motions[0].FrameCount) ? Frame + 1 : 0;                    if (Animation.Motions[i].HasTranslation)                  {                      Vector3 Translation = new Vector3(                          Animation.Translations[Frame + Animation.Motions[i].FirstTranslationIndex' 0]'                          Animation.Translations[Frame + Animation.Motions[i].FirstTranslationIndex' 1]'                          Animation.Translations[Frame + Animation.Motions[i].FirstTranslationIndex' 2]);                      Vector3 NextTranslation = new Vector3(                          Animation.Translations[NextFrame + Animation.Motions[i].FirstTranslationIndex' 0]'                          Animation.Translations[NextFrame + Animation.Motions[i].FirstTranslationIndex' 1]'                          Animation.Translations[NextFrame + Animation.Motions[i].FirstTranslationIndex' 2]);                        Vector3 UpdatedTranslation = new Vector3();                      UpdatedTranslation.X = (1 - FractionShown) * Translation.X + FractionShown * NextTranslation.X;                      UpdatedTranslation.Y = (1 - FractionShown) * Translation.Y + FractionShown * NextTranslation.Y;                      UpdatedTranslation.Z = (1 - FractionShown) * Translation.Z + FractionShown * NextTranslation.Z;                        Skel.Bones[BoneIndex].Translation = UpdatedTranslation;                  }                    if (Animation.Motions[i].HasRotation)                  {                      Quaternion Rotation = new Quaternion(                          Animation.Rotations[Frame + Animation.Motions[i].FirstRotationIndex' 0]'                          Animation.Rotations[Frame + Animation.Motions[i].FirstRotationIndex' 1]'                          Animation.Rotations[Frame + Animation.Motions[i].FirstRotationIndex' 2]'                          Animation.Rotations[Frame + Animation.Motions[i].FirstRotationIndex' 3]);                      Quaternion NextRotation = new Quaternion(                          Animation.Rotations[NextFrame + Animation.Motions[i].FirstRotationIndex' 0]'                          Animation.Rotations[NextFrame + Animation.Motions[i].FirstRotationIndex' 1]'                          Animation.Rotations[NextFrame + Animation.Motions[i].FirstRotationIndex' 2]'                          Animation.Rotations[NextFrame + Animation.Motions[i].FirstRotationIndex' 3]);                        //Use Slerp to interpolate                      float W1' W2 = 1.0f;                      float CosTheta = Helpers.DotProduct(Rotation' NextRotation);                        if (CosTheta < 0)                      {                          CosTheta *= -1;                          W2 *= -1;                      }                        float Theta = (float)Math.Acos(CosTheta);                      float SinTheta = (float)Math.Sin(Theta);                        if (SinTheta > 0.001f)                      {                          W1 = (float)Math.Sin((1.0f - FractionShown) * Theta) / SinTheta;                          W2 *= (float)Math.Sin(FractionShown * Theta) / SinTheta;                      }                      else                      {                          W1 = 1.0f - FractionShown;                          W2 = FractionShown;                      }                        Quaternion UpdatedRotation = new Quaternion();                      UpdatedRotation.X = W1 * Rotation.X + W2 * NextRotation.X;                      UpdatedRotation.Y = W1 * Rotation.Y + W2 * NextRotation.Y;                      UpdatedRotation.Z = W1 * Rotation.Z + W2 * NextRotation.Z;                      UpdatedRotation.W = W1 * Rotation.W + W2 * NextRotation.W;                        Skel.Bones[BoneIndex].Rotation.X = UpdatedRotation.X;                      Skel.Bones[BoneIndex].Rotation.Y = UpdatedRotation.Y;                      Skel.Bones[BoneIndex].Rotation.Z = UpdatedRotation.Z;                      Skel.Bones[BoneIndex].Rotation.W = UpdatedRotation.W;                  }              }
Magic Number,Vitaboy,AvatarBase,C:\repos\Afr0_Project-Dollhouse\TSOClient\Vitaboy\Vitaboy\AvatarBase.cs,AdvanceFrame,The following statement contains a magic number: for (int i = 0; i < Animation.Motions.Count; i++)              {                  int BoneIndex = Skel.FindBone(Animation.Motions[i].BoneName);                    if (BoneIndex == -1)                      continue;                    int Frame = (int)(m_AnimationTime * 30);                  float FractionShown = m_AnimationTime * 30 - Frame;                  int NextFrame = (Frame + 1 != Animation.Motions[0].FrameCount) ? Frame + 1 : 0;                    if (Animation.Motions[i].HasTranslation)                  {                      Vector3 Translation = new Vector3(                          Animation.Translations[Frame + Animation.Motions[i].FirstTranslationIndex' 0]'                          Animation.Translations[Frame + Animation.Motions[i].FirstTranslationIndex' 1]'                          Animation.Translations[Frame + Animation.Motions[i].FirstTranslationIndex' 2]);                      Vector3 NextTranslation = new Vector3(                          Animation.Translations[NextFrame + Animation.Motions[i].FirstTranslationIndex' 0]'                          Animation.Translations[NextFrame + Animation.Motions[i].FirstTranslationIndex' 1]'                          Animation.Translations[NextFrame + Animation.Motions[i].FirstTranslationIndex' 2]);                        Vector3 UpdatedTranslation = new Vector3();                      UpdatedTranslation.X = (1 - FractionShown) * Translation.X + FractionShown * NextTranslation.X;                      UpdatedTranslation.Y = (1 - FractionShown) * Translation.Y + FractionShown * NextTranslation.Y;                      UpdatedTranslation.Z = (1 - FractionShown) * Translation.Z + FractionShown * NextTranslation.Z;                        Skel.Bones[BoneIndex].Translation = UpdatedTranslation;                  }                    if (Animation.Motions[i].HasRotation)                  {                      Quaternion Rotation = new Quaternion(                          Animation.Rotations[Frame + Animation.Motions[i].FirstRotationIndex' 0]'                          Animation.Rotations[Frame + Animation.Motions[i].FirstRotationIndex' 1]'                          Animation.Rotations[Frame + Animation.Motions[i].FirstRotationIndex' 2]'                          Animation.Rotations[Frame + Animation.Motions[i].FirstRotationIndex' 3]);                      Quaternion NextRotation = new Quaternion(                          Animation.Rotations[NextFrame + Animation.Motions[i].FirstRotationIndex' 0]'                          Animation.Rotations[NextFrame + Animation.Motions[i].FirstRotationIndex' 1]'                          Animation.Rotations[NextFrame + Animation.Motions[i].FirstRotationIndex' 2]'                          Animation.Rotations[NextFrame + Animation.Motions[i].FirstRotationIndex' 3]);                        //Use Slerp to interpolate                      float W1' W2 = 1.0f;                      float CosTheta = Helpers.DotProduct(Rotation' NextRotation);                        if (CosTheta < 0)                      {                          CosTheta *= -1;                          W2 *= -1;                      }                        float Theta = (float)Math.Acos(CosTheta);                      float SinTheta = (float)Math.Sin(Theta);                        if (SinTheta > 0.001f)                      {                          W1 = (float)Math.Sin((1.0f - FractionShown) * Theta) / SinTheta;                          W2 *= (float)Math.Sin(FractionShown * Theta) / SinTheta;                      }                      else                      {                          W1 = 1.0f - FractionShown;                          W2 = FractionShown;                      }                        Quaternion UpdatedRotation = new Quaternion();                      UpdatedRotation.X = W1 * Rotation.X + W2 * NextRotation.X;                      UpdatedRotation.Y = W1 * Rotation.Y + W2 * NextRotation.Y;                      UpdatedRotation.Z = W1 * Rotation.Z + W2 * NextRotation.Z;                      UpdatedRotation.W = W1 * Rotation.W + W2 * NextRotation.W;                        Skel.Bones[BoneIndex].Rotation.X = UpdatedRotation.X;                      Skel.Bones[BoneIndex].Rotation.Y = UpdatedRotation.Y;                      Skel.Bones[BoneIndex].Rotation.Z = UpdatedRotation.Z;                      Skel.Bones[BoneIndex].Rotation.W = UpdatedRotation.W;                  }              }
Magic Number,Vitaboy,AvatarBase,C:\repos\Afr0_Project-Dollhouse\TSOClient\Vitaboy\Vitaboy\AvatarBase.cs,AdvanceFrame,The following statement contains a magic number: for (int i = 0; i < Animation.Motions.Count; i++)              {                  int BoneIndex = Skel.FindBone(Animation.Motions[i].BoneName);                    if (BoneIndex == -1)                      continue;                    int Frame = (int)(m_AnimationTime * 30);                  float FractionShown = m_AnimationTime * 30 - Frame;                  int NextFrame = (Frame + 1 != Animation.Motions[0].FrameCount) ? Frame + 1 : 0;                    if (Animation.Motions[i].HasTranslation)                  {                      Vector3 Translation = new Vector3(                          Animation.Translations[Frame + Animation.Motions[i].FirstTranslationIndex' 0]'                          Animation.Translations[Frame + Animation.Motions[i].FirstTranslationIndex' 1]'                          Animation.Translations[Frame + Animation.Motions[i].FirstTranslationIndex' 2]);                      Vector3 NextTranslation = new Vector3(                          Animation.Translations[NextFrame + Animation.Motions[i].FirstTranslationIndex' 0]'                          Animation.Translations[NextFrame + Animation.Motions[i].FirstTranslationIndex' 1]'                          Animation.Translations[NextFrame + Animation.Motions[i].FirstTranslationIndex' 2]);                        Vector3 UpdatedTranslation = new Vector3();                      UpdatedTranslation.X = (1 - FractionShown) * Translation.X + FractionShown * NextTranslation.X;                      UpdatedTranslation.Y = (1 - FractionShown) * Translation.Y + FractionShown * NextTranslation.Y;                      UpdatedTranslation.Z = (1 - FractionShown) * Translation.Z + FractionShown * NextTranslation.Z;                        Skel.Bones[BoneIndex].Translation = UpdatedTranslation;                  }                    if (Animation.Motions[i].HasRotation)                  {                      Quaternion Rotation = new Quaternion(                          Animation.Rotations[Frame + Animation.Motions[i].FirstRotationIndex' 0]'                          Animation.Rotations[Frame + Animation.Motions[i].FirstRotationIndex' 1]'                          Animation.Rotations[Frame + Animation.Motions[i].FirstRotationIndex' 2]'                          Animation.Rotations[Frame + Animation.Motions[i].FirstRotationIndex' 3]);                      Quaternion NextRotation = new Quaternion(                          Animation.Rotations[NextFrame + Animation.Motions[i].FirstRotationIndex' 0]'                          Animation.Rotations[NextFrame + Animation.Motions[i].FirstRotationIndex' 1]'                          Animation.Rotations[NextFrame + Animation.Motions[i].FirstRotationIndex' 2]'                          Animation.Rotations[NextFrame + Animation.Motions[i].FirstRotationIndex' 3]);                        //Use Slerp to interpolate                      float W1' W2 = 1.0f;                      float CosTheta = Helpers.DotProduct(Rotation' NextRotation);                        if (CosTheta < 0)                      {                          CosTheta *= -1;                          W2 *= -1;                      }                        float Theta = (float)Math.Acos(CosTheta);                      float SinTheta = (float)Math.Sin(Theta);                        if (SinTheta > 0.001f)                      {                          W1 = (float)Math.Sin((1.0f - FractionShown) * Theta) / SinTheta;                          W2 *= (float)Math.Sin(FractionShown * Theta) / SinTheta;                      }                      else                      {                          W1 = 1.0f - FractionShown;                          W2 = FractionShown;                      }                        Quaternion UpdatedRotation = new Quaternion();                      UpdatedRotation.X = W1 * Rotation.X + W2 * NextRotation.X;                      UpdatedRotation.Y = W1 * Rotation.Y + W2 * NextRotation.Y;                      UpdatedRotation.Z = W1 * Rotation.Z + W2 * NextRotation.Z;                      UpdatedRotation.W = W1 * Rotation.W + W2 * NextRotation.W;                        Skel.Bones[BoneIndex].Rotation.X = UpdatedRotation.X;                      Skel.Bones[BoneIndex].Rotation.Y = UpdatedRotation.Y;                      Skel.Bones[BoneIndex].Rotation.Z = UpdatedRotation.Z;                      Skel.Bones[BoneIndex].Rotation.W = UpdatedRotation.W;                  }              }
Magic Number,Vitaboy,AvatarBase,C:\repos\Afr0_Project-Dollhouse\TSOClient\Vitaboy\Vitaboy\AvatarBase.cs,AdvanceFrame,The following statement contains a magic number: for (int i = 0; i < Animation.Motions.Count; i++)              {                  int BoneIndex = Skel.FindBone(Animation.Motions[i].BoneName);                    if (BoneIndex == -1)                      continue;                    int Frame = (int)(m_AnimationTime * 30);                  float FractionShown = m_AnimationTime * 30 - Frame;                  int NextFrame = (Frame + 1 != Animation.Motions[0].FrameCount) ? Frame + 1 : 0;                    if (Animation.Motions[i].HasTranslation)                  {                      Vector3 Translation = new Vector3(                          Animation.Translations[Frame + Animation.Motions[i].FirstTranslationIndex' 0]'                          Animation.Translations[Frame + Animation.Motions[i].FirstTranslationIndex' 1]'                          Animation.Translations[Frame + Animation.Motions[i].FirstTranslationIndex' 2]);                      Vector3 NextTranslation = new Vector3(                          Animation.Translations[NextFrame + Animation.Motions[i].FirstTranslationIndex' 0]'                          Animation.Translations[NextFrame + Animation.Motions[i].FirstTranslationIndex' 1]'                          Animation.Translations[NextFrame + Animation.Motions[i].FirstTranslationIndex' 2]);                        Vector3 UpdatedTranslation = new Vector3();                      UpdatedTranslation.X = (1 - FractionShown) * Translation.X + FractionShown * NextTranslation.X;                      UpdatedTranslation.Y = (1 - FractionShown) * Translation.Y + FractionShown * NextTranslation.Y;                      UpdatedTranslation.Z = (1 - FractionShown) * Translation.Z + FractionShown * NextTranslation.Z;                        Skel.Bones[BoneIndex].Translation = UpdatedTranslation;                  }                    if (Animation.Motions[i].HasRotation)                  {                      Quaternion Rotation = new Quaternion(                          Animation.Rotations[Frame + Animation.Motions[i].FirstRotationIndex' 0]'                          Animation.Rotations[Frame + Animation.Motions[i].FirstRotationIndex' 1]'                          Animation.Rotations[Frame + Animation.Motions[i].FirstRotationIndex' 2]'                          Animation.Rotations[Frame + Animation.Motions[i].FirstRotationIndex' 3]);                      Quaternion NextRotation = new Quaternion(                          Animation.Rotations[NextFrame + Animation.Motions[i].FirstRotationIndex' 0]'                          Animation.Rotations[NextFrame + Animation.Motions[i].FirstRotationIndex' 1]'                          Animation.Rotations[NextFrame + Animation.Motions[i].FirstRotationIndex' 2]'                          Animation.Rotations[NextFrame + Animation.Motions[i].FirstRotationIndex' 3]);                        //Use Slerp to interpolate                      float W1' W2 = 1.0f;                      float CosTheta = Helpers.DotProduct(Rotation' NextRotation);                        if (CosTheta < 0)                      {                          CosTheta *= -1;                          W2 *= -1;                      }                        float Theta = (float)Math.Acos(CosTheta);                      float SinTheta = (float)Math.Sin(Theta);                        if (SinTheta > 0.001f)                      {                          W1 = (float)Math.Sin((1.0f - FractionShown) * Theta) / SinTheta;                          W2 *= (float)Math.Sin(FractionShown * Theta) / SinTheta;                      }                      else                      {                          W1 = 1.0f - FractionShown;                          W2 = FractionShown;                      }                        Quaternion UpdatedRotation = new Quaternion();                      UpdatedRotation.X = W1 * Rotation.X + W2 * NextRotation.X;                      UpdatedRotation.Y = W1 * Rotation.Y + W2 * NextRotation.Y;                      UpdatedRotation.Z = W1 * Rotation.Z + W2 * NextRotation.Z;                      UpdatedRotation.W = W1 * Rotation.W + W2 * NextRotation.W;                        Skel.Bones[BoneIndex].Rotation.X = UpdatedRotation.X;                      Skel.Bones[BoneIndex].Rotation.Y = UpdatedRotation.Y;                      Skel.Bones[BoneIndex].Rotation.Z = UpdatedRotation.Z;                      Skel.Bones[BoneIndex].Rotation.W = UpdatedRotation.W;                  }              }
Magic Number,Vitaboy,AvatarBase,C:\repos\Afr0_Project-Dollhouse\TSOClient\Vitaboy\Vitaboy\AvatarBase.cs,AdvanceFrame,The following statement contains a magic number: for (int i = 0; i < Animation.Motions.Count; i++)              {                  int BoneIndex = Skel.FindBone(Animation.Motions[i].BoneName);                    if (BoneIndex == -1)                      continue;                    int Frame = (int)(m_AnimationTime * 30);                  float FractionShown = m_AnimationTime * 30 - Frame;                  int NextFrame = (Frame + 1 != Animation.Motions[0].FrameCount) ? Frame + 1 : 0;                    if (Animation.Motions[i].HasTranslation)                  {                      Vector3 Translation = new Vector3(                          Animation.Translations[Frame + Animation.Motions[i].FirstTranslationIndex' 0]'                          Animation.Translations[Frame + Animation.Motions[i].FirstTranslationIndex' 1]'                          Animation.Translations[Frame + Animation.Motions[i].FirstTranslationIndex' 2]);                      Vector3 NextTranslation = new Vector3(                          Animation.Translations[NextFrame + Animation.Motions[i].FirstTranslationIndex' 0]'                          Animation.Translations[NextFrame + Animation.Motions[i].FirstTranslationIndex' 1]'                          Animation.Translations[NextFrame + Animation.Motions[i].FirstTranslationIndex' 2]);                        Vector3 UpdatedTranslation = new Vector3();                      UpdatedTranslation.X = (1 - FractionShown) * Translation.X + FractionShown * NextTranslation.X;                      UpdatedTranslation.Y = (1 - FractionShown) * Translation.Y + FractionShown * NextTranslation.Y;                      UpdatedTranslation.Z = (1 - FractionShown) * Translation.Z + FractionShown * NextTranslation.Z;                        Skel.Bones[BoneIndex].Translation = UpdatedTranslation;                  }                    if (Animation.Motions[i].HasRotation)                  {                      Quaternion Rotation = new Quaternion(                          Animation.Rotations[Frame + Animation.Motions[i].FirstRotationIndex' 0]'                          Animation.Rotations[Frame + Animation.Motions[i].FirstRotationIndex' 1]'                          Animation.Rotations[Frame + Animation.Motions[i].FirstRotationIndex' 2]'                          Animation.Rotations[Frame + Animation.Motions[i].FirstRotationIndex' 3]);                      Quaternion NextRotation = new Quaternion(                          Animation.Rotations[NextFrame + Animation.Motions[i].FirstRotationIndex' 0]'                          Animation.Rotations[NextFrame + Animation.Motions[i].FirstRotationIndex' 1]'                          Animation.Rotations[NextFrame + Animation.Motions[i].FirstRotationIndex' 2]'                          Animation.Rotations[NextFrame + Animation.Motions[i].FirstRotationIndex' 3]);                        //Use Slerp to interpolate                      float W1' W2 = 1.0f;                      float CosTheta = Helpers.DotProduct(Rotation' NextRotation);                        if (CosTheta < 0)                      {                          CosTheta *= -1;                          W2 *= -1;                      }                        float Theta = (float)Math.Acos(CosTheta);                      float SinTheta = (float)Math.Sin(Theta);                        if (SinTheta > 0.001f)                      {                          W1 = (float)Math.Sin((1.0f - FractionShown) * Theta) / SinTheta;                          W2 *= (float)Math.Sin(FractionShown * Theta) / SinTheta;                      }                      else                      {                          W1 = 1.0f - FractionShown;                          W2 = FractionShown;                      }                        Quaternion UpdatedRotation = new Quaternion();                      UpdatedRotation.X = W1 * Rotation.X + W2 * NextRotation.X;                      UpdatedRotation.Y = W1 * Rotation.Y + W2 * NextRotation.Y;                      UpdatedRotation.Z = W1 * Rotation.Z + W2 * NextRotation.Z;                      UpdatedRotation.W = W1 * Rotation.W + W2 * NextRotation.W;                        Skel.Bones[BoneIndex].Rotation.X = UpdatedRotation.X;                      Skel.Bones[BoneIndex].Rotation.Y = UpdatedRotation.Y;                      Skel.Bones[BoneIndex].Rotation.Z = UpdatedRotation.Z;                      Skel.Bones[BoneIndex].Rotation.W = UpdatedRotation.W;                  }              }
Magic Number,Vitaboy,AvatarBase,C:\repos\Afr0_Project-Dollhouse\TSOClient\Vitaboy\Vitaboy\AvatarBase.cs,AdvanceFrame,The following statement contains a magic number: for (int i = 0; i < Animation.Motions.Count; i++)              {                  int BoneIndex = Skel.FindBone(Animation.Motions[i].BoneName);                    if (BoneIndex == -1)                      continue;                    int Frame = (int)(m_AnimationTime * 30);                  float FractionShown = m_AnimationTime * 30 - Frame;                  int NextFrame = (Frame + 1 != Animation.Motions[0].FrameCount) ? Frame + 1 : 0;                    if (Animation.Motions[i].HasTranslation)                  {                      Vector3 Translation = new Vector3(                          Animation.Translations[Frame + Animation.Motions[i].FirstTranslationIndex' 0]'                          Animation.Translations[Frame + Animation.Motions[i].FirstTranslationIndex' 1]'                          Animation.Translations[Frame + Animation.Motions[i].FirstTranslationIndex' 2]);                      Vector3 NextTranslation = new Vector3(                          Animation.Translations[NextFrame + Animation.Motions[i].FirstTranslationIndex' 0]'                          Animation.Translations[NextFrame + Animation.Motions[i].FirstTranslationIndex' 1]'                          Animation.Translations[NextFrame + Animation.Motions[i].FirstTranslationIndex' 2]);                        Vector3 UpdatedTranslation = new Vector3();                      UpdatedTranslation.X = (1 - FractionShown) * Translation.X + FractionShown * NextTranslation.X;                      UpdatedTranslation.Y = (1 - FractionShown) * Translation.Y + FractionShown * NextTranslation.Y;                      UpdatedTranslation.Z = (1 - FractionShown) * Translation.Z + FractionShown * NextTranslation.Z;                        Skel.Bones[BoneIndex].Translation = UpdatedTranslation;                  }                    if (Animation.Motions[i].HasRotation)                  {                      Quaternion Rotation = new Quaternion(                          Animation.Rotations[Frame + Animation.Motions[i].FirstRotationIndex' 0]'                          Animation.Rotations[Frame + Animation.Motions[i].FirstRotationIndex' 1]'                          Animation.Rotations[Frame + Animation.Motions[i].FirstRotationIndex' 2]'                          Animation.Rotations[Frame + Animation.Motions[i].FirstRotationIndex' 3]);                      Quaternion NextRotation = new Quaternion(                          Animation.Rotations[NextFrame + Animation.Motions[i].FirstRotationIndex' 0]'                          Animation.Rotations[NextFrame + Animation.Motions[i].FirstRotationIndex' 1]'                          Animation.Rotations[NextFrame + Animation.Motions[i].FirstRotationIndex' 2]'                          Animation.Rotations[NextFrame + Animation.Motions[i].FirstRotationIndex' 3]);                        //Use Slerp to interpolate                      float W1' W2 = 1.0f;                      float CosTheta = Helpers.DotProduct(Rotation' NextRotation);                        if (CosTheta < 0)                      {                          CosTheta *= -1;                          W2 *= -1;                      }                        float Theta = (float)Math.Acos(CosTheta);                      float SinTheta = (float)Math.Sin(Theta);                        if (SinTheta > 0.001f)                      {                          W1 = (float)Math.Sin((1.0f - FractionShown) * Theta) / SinTheta;                          W2 *= (float)Math.Sin(FractionShown * Theta) / SinTheta;                      }                      else                      {                          W1 = 1.0f - FractionShown;                          W2 = FractionShown;                      }                        Quaternion UpdatedRotation = new Quaternion();                      UpdatedRotation.X = W1 * Rotation.X + W2 * NextRotation.X;                      UpdatedRotation.Y = W1 * Rotation.Y + W2 * NextRotation.Y;                      UpdatedRotation.Z = W1 * Rotation.Z + W2 * NextRotation.Z;                      UpdatedRotation.W = W1 * Rotation.W + W2 * NextRotation.W;                        Skel.Bones[BoneIndex].Rotation.X = UpdatedRotation.X;                      Skel.Bones[BoneIndex].Rotation.Y = UpdatedRotation.Y;                      Skel.Bones[BoneIndex].Rotation.Z = UpdatedRotation.Z;                      Skel.Bones[BoneIndex].Rotation.W = UpdatedRotation.W;                  }              }
Missing Default,Vitaboy,AvatarBase,C:\repos\Afr0_Project-Dollhouse\TSOClient\Vitaboy\Vitaboy\AvatarBase.cs,ChangeOutfit,The following switch statement is missing a default case: switch (Bnd.Bone)                      {                          case "L_HAND":                              LeftHandMesh = FileManager.GetMesh(Bnd.MeshID.UniqueID);                              LeftHandTexture = FileManager.GetTexture(Bnd.TextureID.UniqueID);                              break;                      }
Missing Default,Vitaboy,AvatarBase,C:\repos\Afr0_Project-Dollhouse\TSOClient\Vitaboy\Vitaboy\AvatarBase.cs,ChangeOutfit,The following switch statement is missing a default case: switch (Bnd.Bone)                      {                          case "R_HAND":                              RightHandMesh = FileManager.GetMesh(Bnd.MeshID.UniqueID);                              RightHandTexture = FileManager.GetTexture(Bnd.TextureID.UniqueID);                              break;                      }
Missing Default,Vitaboy,AvatarBase,C:\repos\Afr0_Project-Dollhouse\TSOClient\Vitaboy\Vitaboy\AvatarBase.cs,ChangeOutfit,The following switch statement is missing a default case: switch (Bnd.Bone)                  {                      case "PELVIS":                          BodyMesh = FileManager.GetMesh(Bnd.MeshID.UniqueID);                          BodyTexture = FileManager.GetTexture(Bnd.TextureID.UniqueID);                          break;                      case "HEAD":                          if (HeadMesh == null)                          {                              HeadMesh = FileManager.GetMesh(Bnd.MeshID.UniqueID);                              HeadTexture = FileManager.GetTexture(Bnd.TextureID.UniqueID);                          }                          else                          {                              AccessoryMesh = FileManager.GetMesh(Bnd.MeshID.UniqueID);                              AccessoryTexture = FileManager.GetTexture(Bnd.TextureID.UniqueID);                          }                          break;                  }
Missing Default,Vitaboy,AvatarBase,C:\repos\Afr0_Project-Dollhouse\TSOClient\Vitaboy\Vitaboy\AvatarBase.cs,TransformVertices,The following switch statement is missing a default case: switch (MshType)              {                  case MeshType.Head:                      for (int i = 0; i < Msh.TotalVertexCount; i++)                      {                          //Transform the head vertices' position by the absolute transform                          //for the headbone (which is always bone 17) to render the head in place.                          Msh.TransformedVertices[i].Position = Vector3.Transform(Msh.RealVertices[i].Position'                              Skel.Bones[Skel.FindBone("HEAD")].AbsoluteMatrix);                            Msh.TransformedVertices[i].TextureCoordinate = Msh.RealVertices[i].TextureCoordinate;                            //Transform the head normals' position by the absolute transform                          //for the headbone (which is always bone 17) to render the head in place.                          Msh.TransformedVertices[i].Normal = Vector3.Transform(Msh.RealVertices[i].Normal'                              Skel.Bones[Skel.FindBone("HEAD")].AbsoluteMatrix);                      }                        return;                    case MeshType.Body:                      BoneBinding boneBinding = Msh.BoneBindings.FirstOrDefault(x => Msh.Bones[(int)x.BoneIndex] == bone.Name);                        if (boneBinding != null)                      {                          for (int i = 0; i < boneBinding.RealVertexCount; i++)                          {                              int vertexIndex = (int)boneBinding.FirstRealVertexIndex + i;                              VertexPositionNormalTexture relativeVertex = Msh.RealVertices[vertexIndex];                                Matrix translatedMatrix = Matrix.CreateTranslation(new Vector3(relativeVertex.Position.X' relativeVertex.Position.Y' relativeVertex.Position.Z)) * bone.AbsoluteMatrix;                              Msh.TransformedVertices[vertexIndex].Position = Vector3.Transform(Vector3.Zero' translatedMatrix);                                Msh.TransformedVertices[vertexIndex].TextureCoordinate = relativeVertex.TextureCoordinate;                                //Normals...                              translatedMatrix = Matrix.CreateTranslation(new Vector3(relativeVertex.Normal.X' relativeVertex.Normal.Y' relativeVertex.Normal.Z)) * bone.AbsoluteMatrix;                              Msh.TransformedVertices[vertexIndex].Normal = Vector3.Transform(Vector3.Zero' translatedMatrix);                          }                      }                        foreach (var child in bone.Children)                          TransformVertices(Msh' child' MshType);                        break;                    case MeshType.LHand:                      for (int i = 0; i < Msh.TotalVertexCount; i++)                      {                          //Transform the left hand vertices' position by the absolute transform                          //for the left handbone (which is always bone 10) to render the left hand in place.                          Msh.TransformedVertices[i].Position = Vector3.Transform(Msh.RealVertices[i].Position'                              Skel.Bones[Skel.FindBone("L_HAND")].AbsoluteMatrix);                            //Transform the left hand normals' position by the absolute transform                          //for the left handbone (which is always bone 10) to render the left hand in place.                          Msh.TransformedVertices[i].Normal = Vector3.Transform(Msh.RealVertices[i].Normal'                              Skel.Bones[Skel.FindBone("L_HAND")].AbsoluteMatrix);                      }                        return;                    case MeshType.RHand:                      for (int i = 0; i < Msh.TotalVertexCount; i++)                      {                          //Transform the right hand vertices' position by the absolute transform                          //for the right handbone (which is always bone 15) to render the right hand in place.                          Msh.TransformedVertices[i].Position = Vector3.Transform(Msh.RealVertices[i].Position'                              Skel.Bones[Skel.FindBone("R_HAND")].AbsoluteMatrix);                            //Transform the right hand normals' position by the absolute transform                          //for the right handbone (which is always bone 15) to render the right hand in place.                          Msh.TransformedVertices[i].Normal = Vector3.Transform(Msh.RealVertices[i].Normal'                              Skel.Bones[Skel.FindBone("R_HAND")].AbsoluteMatrix);                      }                        return;              }
