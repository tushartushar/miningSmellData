Implementation smell,Namespace,Class,File,Method,Description
Complex Method,DataDictionaryCreator,Exporter,C:\repos\doggy8088_DataDictionaryCreator\DataDictionaryCreator\exporters\Exporter.cs,Export,Cyclomatic complexity of the method is 11
Complex Method,DataDictionaryCreator,Main,C:\repos\doggy8088_DataDictionaryCreator\DataDictionaryCreator\MainForm.cs,FillSelectedTableToDocument,Cyclomatic complexity of the method is 9
Complex Method,DataDictionaryCreator,Main,C:\repos\doggy8088_DataDictionaryCreator\DataDictionaryCreator\MainForm.cs,btnExport_Click,Cyclomatic complexity of the method is 25
Complex Method,DataDictionaryCreator,Main,C:\repos\doggy8088_DataDictionaryCreator\DataDictionaryCreator\MainForm.cs,btnImport_Click,Cyclomatic complexity of the method is 18
Complex Method,DataDictionaryCreator,Main,C:\repos\doggy8088_DataDictionaryCreator\DataDictionaryCreator\MainForm.cs,bgwUpdater_RunWorkerCompleted,Cyclomatic complexity of the method is 8
Long Parameter List,DataDictionaryCreator,Main,C:\repos\doggy8088_DataDictionaryCreator\DataDictionaryCreator\MainForm.cs,SetPropertyValue,The method has 5 parameters.
Long Parameter List,DataDictionaryCreator,Main,C:\repos\doggy8088_DataDictionaryCreator\DataDictionaryCreator\MainForm.cs,SetPropertyValue,The method has 5 parameters.
Long Statement,DataDictionaryCreator,XmlExporter,C:\repos\doggy8088_DataDictionaryCreator\DataDictionaryCreator\exporters\XmlExporter.cs,ExportColumnProperties,The length of the statement  "		writer.WriteAttributeString ("description"' column.ExtendedProperties [SmoUtil.DESCRIPTION_PROPERTY].Value.ToString ()); " is 120.
Long Statement,DataDictionaryCreator,Main,C:\repos\doggy8088_DataDictionaryCreator\DataDictionaryCreator\MainForm.cs,DocumentationSetup,The length of the statement  "			SetConnectionState (true' string.Format (Resources.ConnectionSuccessGeneric' server.Name' db.Name)' string.Empty' Color.Green); " is 127.
Long Statement,DataDictionaryCreator,Main,C:\repos\doggy8088_DataDictionaryCreator\DataDictionaryCreator\MainForm.cs,FillSelectedTableToDocument,The length of the statement  "		chkExcludedTable.Checked = Properties.Settings.Default.ExcludedObjects.Exists (obj => obj == new ExcludedObject (table)); " is 121.
Long Statement,DataDictionaryCreator,Main,C:\repos\doggy8088_DataDictionaryCreator\DataDictionaryCreator\MainForm.cs,FillSelectedTableToDocument,The length of the statement  "	int RequiredGridHeight = dgvColumns.Rows.GetRowsHeight (DataGridViewElementStates.None) + dgvColumns.ColumnHeadersHeight; " is 121.
Long Statement,DataDictionaryCreator,Main,C:\repos\doggy8088_DataDictionaryCreator\DataDictionaryCreator\MainForm.cs,PromptForConnectionString,The length of the statement  "	if (!generatedConnectionString.Contains ("Integrated Security=SSPI") && !generatedConnectionString.Contains ("Trusted_Connection=True") && !generatedConnectionString.Contains ("Password=") && !generatedConnectionString.Contains ("Pwd=")) " is 237.
Long Statement,DataDictionaryCreator,Main,C:\repos\doggy8088_DataDictionaryCreator\DataDictionaryCreator\MainForm.cs,SetConnectionString,The length of the statement  "	// We may need to check the new and old value of the connection string but I'm commenting it out now because it is causing issues and no one is here to stop me " is 159.
Long Statement,DataDictionaryCreator,Main,C:\repos\doggy8088_DataDictionaryCreator\DataDictionaryCreator\MainForm.cs,btnSetKeyDescriptions_Click,The length of the statement  "						SetPropertyValue (table' SmoUtil.DESCRIPTION_PROPERTY' string.Format (foreignKeyDescription' fk.ReferencedTable)' column' overwrite); " is 133.
Long Statement,DataDictionaryCreator,Main,C:\repos\doggy8088_DataDictionaryCreator\DataDictionaryCreator\MainForm.cs,btnExport_Click,The length of the statement  "	saveFileDialogExport.Filter = "Excel (*.xls)|*.xls" + "|Excel Grouped (*.xls)|*.xls" + "|HTML (*.htm)|*.htm" + "|HTML Grouped (.htm)|.htm" + "|Word (*.doc)|*.doc" + "|Word Grouped (*.doc)|*.doc" + "|XML (*.xml)|*.xml" + "|T-SQL (*.sql)|*.sql"; " is 243.
Long Statement,DataDictionaryCreator,Main,C:\repos\doggy8088_DataDictionaryCreator\DataDictionaryCreator\MainForm.cs,btnExport_Click,The length of the statement  "				MessageBox.Show ("Export isn't supported for this filetype: " + fileInfo.Extension' "Unsupported File Type"' MessageBoxButtons.OK' MessageBoxIcon.Information); " is 159.
Long Statement,DataDictionaryCreator,Main,C:\repos\doggy8088_DataDictionaryCreator\DataDictionaryCreator\MainForm.cs,btnImport_Click,The length of the statement  "						SetPropertyValue (currentTable' SmoUtil.DESCRIPTION_PROPERTY' columnNode.Attributes ["description"].Value' columnNode.Attributes ["name"].Value' true); " is 151.
Long Statement,DataDictionaryCreator,Main,C:\repos\doggy8088_DataDictionaryCreator\DataDictionaryCreator\MainForm.cs,btnImport_Click,The length of the statement  "							SetPropertyValue (currentTable' columnPropertyNode.Attributes ["name"].Value' columnPropertyNode.Attributes ["value"].Value' columnNode.Attributes ["name"].Value' true); " is 169.
Long Statement,DataDictionaryCreator,Main,C:\repos\doggy8088_DataDictionaryCreator\DataDictionaryCreator\MainForm.cs,updateAvailableToolStripMenuItem_Click,The length of the statement  "	DialogResult dialogResult = MessageBox.Show (Resources.UpdateApplicationNow' Resources.UpdateAvailable' MessageBoxButtons.OKCancel); " is 132.
Long Statement,DataDictionaryCreator,SmoUtil,C:\repos\doggy8088_DataDictionaryCreator\DataDictionaryCreator\SmoUtil.cs,GetDatatypeString,The length of the statement  "		return string.Format ("{0} ({1}'{2})"' dataType.SqlDataType.ToString ()' dataType.NumericPrecision' dataType.NumericScale); " is 123.
Complex Conditional,DataDictionaryCreator,Main,C:\repos\doggy8088_DataDictionaryCreator\DataDictionaryCreator\MainForm.cs,PromptForConnectionString,The conditional expression  "!generatedConnectionString.Contains ("Integrated Security=SSPI") && !generatedConnectionString.Contains ("Trusted_Connection=True") && !generatedConnectionString.Contains ("Password=") && !generatedConnectionString.Contains ("Pwd=")"  is complex.
Magic Number,DataDictionaryCreator,Exporter,C:\repos\doggy8088_DataDictionaryCreator\DataDictionaryCreator\exporters\Exporter.cs,SqlScriptExporter,The following statement contains a magic number: if (serverInformation.Version.Major == 9)  	return new XsltExporter ("sql2005Output.xslt");  else  	return new XsltExporter ("sql2000Output.xslt");  
Magic Number,DataDictionaryCreator,Main,C:\repos\doggy8088_DataDictionaryCreator\DataDictionaryCreator\MainForm.cs,DocumentationSetup,The following statement contains a magic number: BeginAction (Resources.DocumentationSetupBeginAction' 100);  
Magic Number,DataDictionaryCreator,Main,C:\repos\doggy8088_DataDictionaryCreator\DataDictionaryCreator\MainForm.cs,FillSelectedTableToDocument,The following statement contains a magic number: BeginAction (Resources.DocumentLoadTableBeginAction' 100);  
Magic Number,DataDictionaryCreator,Main,C:\repos\doggy8088_DataDictionaryCreator\DataDictionaryCreator\MainForm.cs,SetTableDescription,The following statement contains a magic number: BeginAction (Resources.TableDescriptionBeginAction' 100);  
Magic Number,DataDictionaryCreator,Main,C:\repos\doggy8088_DataDictionaryCreator\DataDictionaryCreator\MainForm.cs,btnExport_Click,The following statement contains a magic number: if (!string.IsNullOrEmpty (saveFileDialogExport.FileName)) {  	try {  		FileInfo fileInfo = new FileInfo (saveFileDialogExport.FileName);  		//Allow a little extra space on the progress bar for the XSL transform  		BeginAction ("Exporting to " + fileInfo.Name' (int)(db.Tables.Count * 1.1));  		this.Refresh ();  		Exporter exporter;  		switch (fileInfo.Extension) {  		case ".sql":  			exporter = Exporter.SqlScriptExporter (server.Information);  			break;  		case ".doc":  			if (saveFileDialogExport.FilterIndex == 6) {  				exporter = Exporter.WordExporter (true);  			}  			else {  				exporter = Exporter.WordExporter (false);  			}  			break;  		case ".xls":  			if (saveFileDialogExport.FilterIndex == 2) {  				exporter = Exporter.ExcelExporter (true);  			}  			else {  				exporter = Exporter.ExcelExporter (false);  			}  			break;  		case ".htm":  		case ".html":  			if (saveFileDialogExport.FilterIndex == 4) {  				exporter = Exporter.HtmlExporter (true);  			}  			else {  				exporter = Exporter.HtmlExporter (false);  			}  			break;  		case ".xml":  			exporter = Exporter.XmlExporter ();  			break;  		case "":  			return;  		default:  			//Could move this check before exporting to XML.  			MessageBox.Show ("Export isn't supported for this filetype: " + fileInfo.Extension' "Unsupported File Type"' MessageBoxButtons.OK' MessageBoxIcon.Information);  			return;  		}  		exporter.Progressed += new EventHandler (ProgressUpdate);  		exporter.Export (db' additionalPropertiesArray' fileInfo);  		try {  			if (chkOpenFile.Checked)  				System.Diagnostics.Process.Start (fileInfo.FullName);  		}  		catch (Exception) {  			MessageBox.Show (Resources.ExportErrorGeneric);  		}  	}  	finally {  		EndAction (Resources.ExportEndAction);  	}  }  
Magic Number,DataDictionaryCreator,Main,C:\repos\doggy8088_DataDictionaryCreator\DataDictionaryCreator\MainForm.cs,btnExport_Click,The following statement contains a magic number: if (!string.IsNullOrEmpty (saveFileDialogExport.FileName)) {  	try {  		FileInfo fileInfo = new FileInfo (saveFileDialogExport.FileName);  		//Allow a little extra space on the progress bar for the XSL transform  		BeginAction ("Exporting to " + fileInfo.Name' (int)(db.Tables.Count * 1.1));  		this.Refresh ();  		Exporter exporter;  		switch (fileInfo.Extension) {  		case ".sql":  			exporter = Exporter.SqlScriptExporter (server.Information);  			break;  		case ".doc":  			if (saveFileDialogExport.FilterIndex == 6) {  				exporter = Exporter.WordExporter (true);  			}  			else {  				exporter = Exporter.WordExporter (false);  			}  			break;  		case ".xls":  			if (saveFileDialogExport.FilterIndex == 2) {  				exporter = Exporter.ExcelExporter (true);  			}  			else {  				exporter = Exporter.ExcelExporter (false);  			}  			break;  		case ".htm":  		case ".html":  			if (saveFileDialogExport.FilterIndex == 4) {  				exporter = Exporter.HtmlExporter (true);  			}  			else {  				exporter = Exporter.HtmlExporter (false);  			}  			break;  		case ".xml":  			exporter = Exporter.XmlExporter ();  			break;  		case "":  			return;  		default:  			//Could move this check before exporting to XML.  			MessageBox.Show ("Export isn't supported for this filetype: " + fileInfo.Extension' "Unsupported File Type"' MessageBoxButtons.OK' MessageBoxIcon.Information);  			return;  		}  		exporter.Progressed += new EventHandler (ProgressUpdate);  		exporter.Export (db' additionalPropertiesArray' fileInfo);  		try {  			if (chkOpenFile.Checked)  				System.Diagnostics.Process.Start (fileInfo.FullName);  		}  		catch (Exception) {  			MessageBox.Show (Resources.ExportErrorGeneric);  		}  	}  	finally {  		EndAction (Resources.ExportEndAction);  	}  }  
Magic Number,DataDictionaryCreator,Main,C:\repos\doggy8088_DataDictionaryCreator\DataDictionaryCreator\MainForm.cs,btnExport_Click,The following statement contains a magic number: if (!string.IsNullOrEmpty (saveFileDialogExport.FileName)) {  	try {  		FileInfo fileInfo = new FileInfo (saveFileDialogExport.FileName);  		//Allow a little extra space on the progress bar for the XSL transform  		BeginAction ("Exporting to " + fileInfo.Name' (int)(db.Tables.Count * 1.1));  		this.Refresh ();  		Exporter exporter;  		switch (fileInfo.Extension) {  		case ".sql":  			exporter = Exporter.SqlScriptExporter (server.Information);  			break;  		case ".doc":  			if (saveFileDialogExport.FilterIndex == 6) {  				exporter = Exporter.WordExporter (true);  			}  			else {  				exporter = Exporter.WordExporter (false);  			}  			break;  		case ".xls":  			if (saveFileDialogExport.FilterIndex == 2) {  				exporter = Exporter.ExcelExporter (true);  			}  			else {  				exporter = Exporter.ExcelExporter (false);  			}  			break;  		case ".htm":  		case ".html":  			if (saveFileDialogExport.FilterIndex == 4) {  				exporter = Exporter.HtmlExporter (true);  			}  			else {  				exporter = Exporter.HtmlExporter (false);  			}  			break;  		case ".xml":  			exporter = Exporter.XmlExporter ();  			break;  		case "":  			return;  		default:  			//Could move this check before exporting to XML.  			MessageBox.Show ("Export isn't supported for this filetype: " + fileInfo.Extension' "Unsupported File Type"' MessageBoxButtons.OK' MessageBoxIcon.Information);  			return;  		}  		exporter.Progressed += new EventHandler (ProgressUpdate);  		exporter.Export (db' additionalPropertiesArray' fileInfo);  		try {  			if (chkOpenFile.Checked)  				System.Diagnostics.Process.Start (fileInfo.FullName);  		}  		catch (Exception) {  			MessageBox.Show (Resources.ExportErrorGeneric);  		}  	}  	finally {  		EndAction (Resources.ExportEndAction);  	}  }  
Magic Number,DataDictionaryCreator,Main,C:\repos\doggy8088_DataDictionaryCreator\DataDictionaryCreator\MainForm.cs,btnExport_Click,The following statement contains a magic number: if (!string.IsNullOrEmpty (saveFileDialogExport.FileName)) {  	try {  		FileInfo fileInfo = new FileInfo (saveFileDialogExport.FileName);  		//Allow a little extra space on the progress bar for the XSL transform  		BeginAction ("Exporting to " + fileInfo.Name' (int)(db.Tables.Count * 1.1));  		this.Refresh ();  		Exporter exporter;  		switch (fileInfo.Extension) {  		case ".sql":  			exporter = Exporter.SqlScriptExporter (server.Information);  			break;  		case ".doc":  			if (saveFileDialogExport.FilterIndex == 6) {  				exporter = Exporter.WordExporter (true);  			}  			else {  				exporter = Exporter.WordExporter (false);  			}  			break;  		case ".xls":  			if (saveFileDialogExport.FilterIndex == 2) {  				exporter = Exporter.ExcelExporter (true);  			}  			else {  				exporter = Exporter.ExcelExporter (false);  			}  			break;  		case ".htm":  		case ".html":  			if (saveFileDialogExport.FilterIndex == 4) {  				exporter = Exporter.HtmlExporter (true);  			}  			else {  				exporter = Exporter.HtmlExporter (false);  			}  			break;  		case ".xml":  			exporter = Exporter.XmlExporter ();  			break;  		case "":  			return;  		default:  			//Could move this check before exporting to XML.  			MessageBox.Show ("Export isn't supported for this filetype: " + fileInfo.Extension' "Unsupported File Type"' MessageBoxButtons.OK' MessageBoxIcon.Information);  			return;  		}  		exporter.Progressed += new EventHandler (ProgressUpdate);  		exporter.Export (db' additionalPropertiesArray' fileInfo);  		try {  			if (chkOpenFile.Checked)  				System.Diagnostics.Process.Start (fileInfo.FullName);  		}  		catch (Exception) {  			MessageBox.Show (Resources.ExportErrorGeneric);  		}  	}  	finally {  		EndAction (Resources.ExportEndAction);  	}  }  
Magic Number,DataDictionaryCreator,Main,C:\repos\doggy8088_DataDictionaryCreator\DataDictionaryCreator\MainForm.cs,btnExport_Click,The following statement contains a magic number: try {  	FileInfo fileInfo = new FileInfo (saveFileDialogExport.FileName);  	//Allow a little extra space on the progress bar for the XSL transform  	BeginAction ("Exporting to " + fileInfo.Name' (int)(db.Tables.Count * 1.1));  	this.Refresh ();  	Exporter exporter;  	switch (fileInfo.Extension) {  	case ".sql":  		exporter = Exporter.SqlScriptExporter (server.Information);  		break;  	case ".doc":  		if (saveFileDialogExport.FilterIndex == 6) {  			exporter = Exporter.WordExporter (true);  		}  		else {  			exporter = Exporter.WordExporter (false);  		}  		break;  	case ".xls":  		if (saveFileDialogExport.FilterIndex == 2) {  			exporter = Exporter.ExcelExporter (true);  		}  		else {  			exporter = Exporter.ExcelExporter (false);  		}  		break;  	case ".htm":  	case ".html":  		if (saveFileDialogExport.FilterIndex == 4) {  			exporter = Exporter.HtmlExporter (true);  		}  		else {  			exporter = Exporter.HtmlExporter (false);  		}  		break;  	case ".xml":  		exporter = Exporter.XmlExporter ();  		break;  	case "":  		return;  	default:  		//Could move this check before exporting to XML.  		MessageBox.Show ("Export isn't supported for this filetype: " + fileInfo.Extension' "Unsupported File Type"' MessageBoxButtons.OK' MessageBoxIcon.Information);  		return;  	}  	exporter.Progressed += new EventHandler (ProgressUpdate);  	exporter.Export (db' additionalPropertiesArray' fileInfo);  	try {  		if (chkOpenFile.Checked)  			System.Diagnostics.Process.Start (fileInfo.FullName);  	}  	catch (Exception) {  		MessageBox.Show (Resources.ExportErrorGeneric);  	}  }  finally {  	EndAction (Resources.ExportEndAction);  }  
Magic Number,DataDictionaryCreator,Main,C:\repos\doggy8088_DataDictionaryCreator\DataDictionaryCreator\MainForm.cs,btnExport_Click,The following statement contains a magic number: try {  	FileInfo fileInfo = new FileInfo (saveFileDialogExport.FileName);  	//Allow a little extra space on the progress bar for the XSL transform  	BeginAction ("Exporting to " + fileInfo.Name' (int)(db.Tables.Count * 1.1));  	this.Refresh ();  	Exporter exporter;  	switch (fileInfo.Extension) {  	case ".sql":  		exporter = Exporter.SqlScriptExporter (server.Information);  		break;  	case ".doc":  		if (saveFileDialogExport.FilterIndex == 6) {  			exporter = Exporter.WordExporter (true);  		}  		else {  			exporter = Exporter.WordExporter (false);  		}  		break;  	case ".xls":  		if (saveFileDialogExport.FilterIndex == 2) {  			exporter = Exporter.ExcelExporter (true);  		}  		else {  			exporter = Exporter.ExcelExporter (false);  		}  		break;  	case ".htm":  	case ".html":  		if (saveFileDialogExport.FilterIndex == 4) {  			exporter = Exporter.HtmlExporter (true);  		}  		else {  			exporter = Exporter.HtmlExporter (false);  		}  		break;  	case ".xml":  		exporter = Exporter.XmlExporter ();  		break;  	case "":  		return;  	default:  		//Could move this check before exporting to XML.  		MessageBox.Show ("Export isn't supported for this filetype: " + fileInfo.Extension' "Unsupported File Type"' MessageBoxButtons.OK' MessageBoxIcon.Information);  		return;  	}  	exporter.Progressed += new EventHandler (ProgressUpdate);  	exporter.Export (db' additionalPropertiesArray' fileInfo);  	try {  		if (chkOpenFile.Checked)  			System.Diagnostics.Process.Start (fileInfo.FullName);  	}  	catch (Exception) {  		MessageBox.Show (Resources.ExportErrorGeneric);  	}  }  finally {  	EndAction (Resources.ExportEndAction);  }  
Magic Number,DataDictionaryCreator,Main,C:\repos\doggy8088_DataDictionaryCreator\DataDictionaryCreator\MainForm.cs,btnExport_Click,The following statement contains a magic number: try {  	FileInfo fileInfo = new FileInfo (saveFileDialogExport.FileName);  	//Allow a little extra space on the progress bar for the XSL transform  	BeginAction ("Exporting to " + fileInfo.Name' (int)(db.Tables.Count * 1.1));  	this.Refresh ();  	Exporter exporter;  	switch (fileInfo.Extension) {  	case ".sql":  		exporter = Exporter.SqlScriptExporter (server.Information);  		break;  	case ".doc":  		if (saveFileDialogExport.FilterIndex == 6) {  			exporter = Exporter.WordExporter (true);  		}  		else {  			exporter = Exporter.WordExporter (false);  		}  		break;  	case ".xls":  		if (saveFileDialogExport.FilterIndex == 2) {  			exporter = Exporter.ExcelExporter (true);  		}  		else {  			exporter = Exporter.ExcelExporter (false);  		}  		break;  	case ".htm":  	case ".html":  		if (saveFileDialogExport.FilterIndex == 4) {  			exporter = Exporter.HtmlExporter (true);  		}  		else {  			exporter = Exporter.HtmlExporter (false);  		}  		break;  	case ".xml":  		exporter = Exporter.XmlExporter ();  		break;  	case "":  		return;  	default:  		//Could move this check before exporting to XML.  		MessageBox.Show ("Export isn't supported for this filetype: " + fileInfo.Extension' "Unsupported File Type"' MessageBoxButtons.OK' MessageBoxIcon.Information);  		return;  	}  	exporter.Progressed += new EventHandler (ProgressUpdate);  	exporter.Export (db' additionalPropertiesArray' fileInfo);  	try {  		if (chkOpenFile.Checked)  			System.Diagnostics.Process.Start (fileInfo.FullName);  	}  	catch (Exception) {  		MessageBox.Show (Resources.ExportErrorGeneric);  	}  }  finally {  	EndAction (Resources.ExportEndAction);  }  
Magic Number,DataDictionaryCreator,Main,C:\repos\doggy8088_DataDictionaryCreator\DataDictionaryCreator\MainForm.cs,btnExport_Click,The following statement contains a magic number: try {  	FileInfo fileInfo = new FileInfo (saveFileDialogExport.FileName);  	//Allow a little extra space on the progress bar for the XSL transform  	BeginAction ("Exporting to " + fileInfo.Name' (int)(db.Tables.Count * 1.1));  	this.Refresh ();  	Exporter exporter;  	switch (fileInfo.Extension) {  	case ".sql":  		exporter = Exporter.SqlScriptExporter (server.Information);  		break;  	case ".doc":  		if (saveFileDialogExport.FilterIndex == 6) {  			exporter = Exporter.WordExporter (true);  		}  		else {  			exporter = Exporter.WordExporter (false);  		}  		break;  	case ".xls":  		if (saveFileDialogExport.FilterIndex == 2) {  			exporter = Exporter.ExcelExporter (true);  		}  		else {  			exporter = Exporter.ExcelExporter (false);  		}  		break;  	case ".htm":  	case ".html":  		if (saveFileDialogExport.FilterIndex == 4) {  			exporter = Exporter.HtmlExporter (true);  		}  		else {  			exporter = Exporter.HtmlExporter (false);  		}  		break;  	case ".xml":  		exporter = Exporter.XmlExporter ();  		break;  	case "":  		return;  	default:  		//Could move this check before exporting to XML.  		MessageBox.Show ("Export isn't supported for this filetype: " + fileInfo.Extension' "Unsupported File Type"' MessageBoxButtons.OK' MessageBoxIcon.Information);  		return;  	}  	exporter.Progressed += new EventHandler (ProgressUpdate);  	exporter.Export (db' additionalPropertiesArray' fileInfo);  	try {  		if (chkOpenFile.Checked)  			System.Diagnostics.Process.Start (fileInfo.FullName);  	}  	catch (Exception) {  		MessageBox.Show (Resources.ExportErrorGeneric);  	}  }  finally {  	EndAction (Resources.ExportEndAction);  }  
Magic Number,DataDictionaryCreator,Main,C:\repos\doggy8088_DataDictionaryCreator\DataDictionaryCreator\MainForm.cs,btnExport_Click,The following statement contains a magic number: BeginAction ("Exporting to " + fileInfo.Name' (int)(db.Tables.Count * 1.1));  
Magic Number,DataDictionaryCreator,Main,C:\repos\doggy8088_DataDictionaryCreator\DataDictionaryCreator\MainForm.cs,btnExport_Click,The following statement contains a magic number: switch (fileInfo.Extension) {  case ".sql":  	exporter = Exporter.SqlScriptExporter (server.Information);  	break;  case ".doc":  	if (saveFileDialogExport.FilterIndex == 6) {  		exporter = Exporter.WordExporter (true);  	}  	else {  		exporter = Exporter.WordExporter (false);  	}  	break;  case ".xls":  	if (saveFileDialogExport.FilterIndex == 2) {  		exporter = Exporter.ExcelExporter (true);  	}  	else {  		exporter = Exporter.ExcelExporter (false);  	}  	break;  case ".htm":  case ".html":  	if (saveFileDialogExport.FilterIndex == 4) {  		exporter = Exporter.HtmlExporter (true);  	}  	else {  		exporter = Exporter.HtmlExporter (false);  	}  	break;  case ".xml":  	exporter = Exporter.XmlExporter ();  	break;  case "":  	return;  default:  	//Could move this check before exporting to XML.  	MessageBox.Show ("Export isn't supported for this filetype: " + fileInfo.Extension' "Unsupported File Type"' MessageBoxButtons.OK' MessageBoxIcon.Information);  	return;  }  
Magic Number,DataDictionaryCreator,Main,C:\repos\doggy8088_DataDictionaryCreator\DataDictionaryCreator\MainForm.cs,btnExport_Click,The following statement contains a magic number: switch (fileInfo.Extension) {  case ".sql":  	exporter = Exporter.SqlScriptExporter (server.Information);  	break;  case ".doc":  	if (saveFileDialogExport.FilterIndex == 6) {  		exporter = Exporter.WordExporter (true);  	}  	else {  		exporter = Exporter.WordExporter (false);  	}  	break;  case ".xls":  	if (saveFileDialogExport.FilterIndex == 2) {  		exporter = Exporter.ExcelExporter (true);  	}  	else {  		exporter = Exporter.ExcelExporter (false);  	}  	break;  case ".htm":  case ".html":  	if (saveFileDialogExport.FilterIndex == 4) {  		exporter = Exporter.HtmlExporter (true);  	}  	else {  		exporter = Exporter.HtmlExporter (false);  	}  	break;  case ".xml":  	exporter = Exporter.XmlExporter ();  	break;  case "":  	return;  default:  	//Could move this check before exporting to XML.  	MessageBox.Show ("Export isn't supported for this filetype: " + fileInfo.Extension' "Unsupported File Type"' MessageBoxButtons.OK' MessageBoxIcon.Information);  	return;  }  
Magic Number,DataDictionaryCreator,Main,C:\repos\doggy8088_DataDictionaryCreator\DataDictionaryCreator\MainForm.cs,btnExport_Click,The following statement contains a magic number: switch (fileInfo.Extension) {  case ".sql":  	exporter = Exporter.SqlScriptExporter (server.Information);  	break;  case ".doc":  	if (saveFileDialogExport.FilterIndex == 6) {  		exporter = Exporter.WordExporter (true);  	}  	else {  		exporter = Exporter.WordExporter (false);  	}  	break;  case ".xls":  	if (saveFileDialogExport.FilterIndex == 2) {  		exporter = Exporter.ExcelExporter (true);  	}  	else {  		exporter = Exporter.ExcelExporter (false);  	}  	break;  case ".htm":  case ".html":  	if (saveFileDialogExport.FilterIndex == 4) {  		exporter = Exporter.HtmlExporter (true);  	}  	else {  		exporter = Exporter.HtmlExporter (false);  	}  	break;  case ".xml":  	exporter = Exporter.XmlExporter ();  	break;  case "":  	return;  default:  	//Could move this check before exporting to XML.  	MessageBox.Show ("Export isn't supported for this filetype: " + fileInfo.Extension' "Unsupported File Type"' MessageBoxButtons.OK' MessageBoxIcon.Information);  	return;  }  
Magic Number,DataDictionaryCreator,Main,C:\repos\doggy8088_DataDictionaryCreator\DataDictionaryCreator\MainForm.cs,btnExport_Click,The following statement contains a magic number: if (saveFileDialogExport.FilterIndex == 6) {  	exporter = Exporter.WordExporter (true);  }  else {  	exporter = Exporter.WordExporter (false);  }  
Magic Number,DataDictionaryCreator,Main,C:\repos\doggy8088_DataDictionaryCreator\DataDictionaryCreator\MainForm.cs,btnExport_Click,The following statement contains a magic number: if (saveFileDialogExport.FilterIndex == 2) {  	exporter = Exporter.ExcelExporter (true);  }  else {  	exporter = Exporter.ExcelExporter (false);  }  
Magic Number,DataDictionaryCreator,Main,C:\repos\doggy8088_DataDictionaryCreator\DataDictionaryCreator\MainForm.cs,btnExport_Click,The following statement contains a magic number: if (saveFileDialogExport.FilterIndex == 4) {  	exporter = Exporter.HtmlExporter (true);  }  else {  	exporter = Exporter.HtmlExporter (false);  }  
Magic Number,DataDictionaryCreator,Main,C:\repos\doggy8088_DataDictionaryCreator\DataDictionaryCreator\MainForm.cs,btnImport_Click,The following statement contains a magic number: if (!string.IsNullOrEmpty (openFileDialogImport.FileName)) {  	try {  		FileInfo fileInfo = new FileInfo (openFileDialogImport.FileName);  		//Allow a little extra space on the progress bar for the XSL transform  		BeginAction ("Importing from " + fileInfo.Name' (int)(db.Tables.Count * 1.1));  		this.Refresh ();  		switch (fileInfo.Extension) {  		case ".sql":  			//Check script contains correct DDC tag  			string script = fileInfo.OpenText ().ReadToEnd ();  			if (script.IndexOf (Exporter.Identifier' StringComparison.InvariantCultureIgnoreCase) == -1)  				throw new System.Exception (Resources.ImportErrorCanNotValidateScript);  			//Execute SQL script - this command knows how to deal with GO separators  			server.ConnectionContext.ExecuteNonQuery (script);  			break;  		case ".xml":  			//Check doctype and tags to ensure DDC type  			XmlDocument xmlDoc = new XmlDocument ();  			xmlDoc.Load (fileInfo.FullName);  			if (!xmlDoc.DocumentType.Name.Equals (XmlExporter.Identifier' StringComparison.InvariantCultureIgnoreCase))  				throw new System.Exception (Resources.ImportErrorUnsupportedVersion);  			//Iterate and import  			foreach (XmlNode tableNode in xmlDoc.SelectNodes ("//documentation/tables/table")) {  				string tbl = "[" + tableNode.Attributes ["schema"].Value + "].[" + tableNode.Attributes ["name"].Value + "]";  				Table currentTable = SmoUtil.GetTableByName (db' tbl);  				SetTableDescription (currentTable' tableNode.Attributes ["description"].Value);  				foreach (XmlNode columnNode in tableNode.SelectNodes ("column")) {  					SetPropertyValue (currentTable' SmoUtil.DESCRIPTION_PROPERTY' columnNode.Attributes ["description"].Value' columnNode.Attributes ["name"].Value' true);  					foreach (XmlNode columnPropertyNode in columnNode.SelectNodes ("property")) {  						SetPropertyValue (currentTable' columnPropertyNode.Attributes ["name"].Value' columnPropertyNode.Attributes ["value"].Value' columnNode.Attributes ["name"].Value' true);  					}  				}  			}  			break;  		}  		DocumentationSetup (sqlConnectionString);  		EndAction (Resources.ImportEndAction);  	}  	catch (Exception ex) {  		EndAction ("ERROR: " + ex.Message);  	}  	finally {  	}  }  
Magic Number,DataDictionaryCreator,Main,C:\repos\doggy8088_DataDictionaryCreator\DataDictionaryCreator\MainForm.cs,btnImport_Click,The following statement contains a magic number: try {  	FileInfo fileInfo = new FileInfo (openFileDialogImport.FileName);  	//Allow a little extra space on the progress bar for the XSL transform  	BeginAction ("Importing from " + fileInfo.Name' (int)(db.Tables.Count * 1.1));  	this.Refresh ();  	switch (fileInfo.Extension) {  	case ".sql":  		//Check script contains correct DDC tag  		string script = fileInfo.OpenText ().ReadToEnd ();  		if (script.IndexOf (Exporter.Identifier' StringComparison.InvariantCultureIgnoreCase) == -1)  			throw new System.Exception (Resources.ImportErrorCanNotValidateScript);  		//Execute SQL script - this command knows how to deal with GO separators  		server.ConnectionContext.ExecuteNonQuery (script);  		break;  	case ".xml":  		//Check doctype and tags to ensure DDC type  		XmlDocument xmlDoc = new XmlDocument ();  		xmlDoc.Load (fileInfo.FullName);  		if (!xmlDoc.DocumentType.Name.Equals (XmlExporter.Identifier' StringComparison.InvariantCultureIgnoreCase))  			throw new System.Exception (Resources.ImportErrorUnsupportedVersion);  		//Iterate and import  		foreach (XmlNode tableNode in xmlDoc.SelectNodes ("//documentation/tables/table")) {  			string tbl = "[" + tableNode.Attributes ["schema"].Value + "].[" + tableNode.Attributes ["name"].Value + "]";  			Table currentTable = SmoUtil.GetTableByName (db' tbl);  			SetTableDescription (currentTable' tableNode.Attributes ["description"].Value);  			foreach (XmlNode columnNode in tableNode.SelectNodes ("column")) {  				SetPropertyValue (currentTable' SmoUtil.DESCRIPTION_PROPERTY' columnNode.Attributes ["description"].Value' columnNode.Attributes ["name"].Value' true);  				foreach (XmlNode columnPropertyNode in columnNode.SelectNodes ("property")) {  					SetPropertyValue (currentTable' columnPropertyNode.Attributes ["name"].Value' columnPropertyNode.Attributes ["value"].Value' columnNode.Attributes ["name"].Value' true);  				}  			}  		}  		break;  	}  	DocumentationSetup (sqlConnectionString);  	EndAction (Resources.ImportEndAction);  }  catch (Exception ex) {  	EndAction ("ERROR: " + ex.Message);  }  finally {  }  
Magic Number,DataDictionaryCreator,Main,C:\repos\doggy8088_DataDictionaryCreator\DataDictionaryCreator\MainForm.cs,btnImport_Click,The following statement contains a magic number: BeginAction ("Importing from " + fileInfo.Name' (int)(db.Tables.Count * 1.1));  
Missing Default,DataDictionaryCreator,Main,C:\repos\doggy8088_DataDictionaryCreator\DataDictionaryCreator\MainForm.cs,btnImport_Click,The following switch statement is missing a default case: switch (fileInfo.Extension) {  case ".sql":  	//Check script contains correct DDC tag  	string script = fileInfo.OpenText ().ReadToEnd ();  	if (script.IndexOf (Exporter.Identifier' StringComparison.InvariantCultureIgnoreCase) == -1)  		throw new System.Exception (Resources.ImportErrorCanNotValidateScript);  	//Execute SQL script - this command knows how to deal with GO separators  	server.ConnectionContext.ExecuteNonQuery (script);  	break;  case ".xml":  	//Check doctype and tags to ensure DDC type  	XmlDocument xmlDoc = new XmlDocument ();  	xmlDoc.Load (fileInfo.FullName);  	if (!xmlDoc.DocumentType.Name.Equals (XmlExporter.Identifier' StringComparison.InvariantCultureIgnoreCase))  		throw new System.Exception (Resources.ImportErrorUnsupportedVersion);  	//Iterate and import  	foreach (XmlNode tableNode in xmlDoc.SelectNodes ("//documentation/tables/table")) {  		string tbl = "[" + tableNode.Attributes ["schema"].Value + "].[" + tableNode.Attributes ["name"].Value + "]";  		Table currentTable = SmoUtil.GetTableByName (db' tbl);  		SetTableDescription (currentTable' tableNode.Attributes ["description"].Value);  		foreach (XmlNode columnNode in tableNode.SelectNodes ("column")) {  			SetPropertyValue (currentTable' SmoUtil.DESCRIPTION_PROPERTY' columnNode.Attributes ["description"].Value' columnNode.Attributes ["name"].Value' true);  			foreach (XmlNode columnPropertyNode in columnNode.SelectNodes ("property")) {  				SetPropertyValue (currentTable' columnPropertyNode.Attributes ["name"].Value' columnPropertyNode.Attributes ["value"].Value' columnNode.Attributes ["name"].Value' true);  			}  		}  	}  	break;  }  
Missing Default,DataDictionaryCreator,Main,C:\repos\doggy8088_DataDictionaryCreator\DataDictionaryCreator\MainForm.cs,bgwUpdater_RunWorkerCompleted,The following switch statement is missing a default case: switch ((UpdateStatuses)e.Result) {  case UpdateStatuses.UpdateAvailable:  	updateAvailableToolStripMenuItem.Visible = true;  	break;  case UpdateStatuses.UpdateRequired:  	updateAvailableToolStripMenuItem.Visible = true;  	MessageBox.Show (Resources.RequiredUpdateAvailable' Resources.UpdateAvailable' MessageBoxButtons.OK);  	UpdateApplication ();  	break;  }  
