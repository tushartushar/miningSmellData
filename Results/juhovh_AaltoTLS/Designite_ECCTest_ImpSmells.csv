Implementation smell,Namespace,Class,File,Method,Description
Complex Method,ECCTest,MainClass,D:\research\architectureSmells\repos\juhovh_AaltoTLS\Samples\ECCTest\Main.cs,GetECDSAFromPublicKey,Cyclomatic complexity of the method is 8
Complex Method,ECCTest,ECDiffieHellmanBc,D:\research\architectureSmells\repos\juhovh_AaltoTLS\Samples\ECCTest\ECDiffieHellmanBc.cs,DeriveKeyMaterial,Cyclomatic complexity of the method is 16
Long Statement,ECCTest,MainClass,D:\research\architectureSmells\repos\juhovh_AaltoTLS\Samples\ECCTest\Main.cs,Main,The length of the statement  "			CngKey cngKey = CngKey.Import(cngBlob' CngKeyBlobFormat.GenericPrivateBlob' CngProvider.MicrosoftSoftwareKeyStorageProvider); " is 125.
Magic Number,ECCTest,MainClass,D:\research\architectureSmells\repos\juhovh_AaltoTLS\Samples\ECCTest\Main.cs,PrintBytes,The following statement contains a magic number: i%16 == 0
Magic Number,ECCTest,MainClass,D:\research\architectureSmells\repos\juhovh_AaltoTLS\Samples\ECCTest\Main.cs,PrintBytes,The following statement contains a magic number: Console.Write(data[i].ToString("x").PadLeft(2' '0') + " ");
Magic Number,ECCTest,MainClass,D:\research\architectureSmells\repos\juhovh_AaltoTLS\Samples\ECCTest\Main.cs,Main,The following statement contains a magic number: args.Length != 2
Magic Number,ECCTest,MainClass,D:\research\architectureSmells\repos\juhovh_AaltoTLS\Samples\ECCTest\Main.cs,Main,The following statement contains a magic number: byte[] data = new byte[256];
Magic Number,ECCTest,MainClass,D:\research\architectureSmells\repos\juhovh_AaltoTLS\Samples\ECCTest\Main.cs,Main,The following statement contains a magic number: byte[] keyBytes = new byte[24];
Magic Number,ECCTest,MainClass,D:\research\architectureSmells\repos\juhovh_AaltoTLS\Samples\ECCTest\Main.cs,Main,The following statement contains a magic number: byte[] hashedData = new byte[31];
Magic Number,ECCTest,MainClass,D:\research\architectureSmells\repos\juhovh_AaltoTLS\Samples\ECCTest\Main.cs,Main,The following statement contains a magic number: CMac cmac = new CMac(new AesEngine()' 128);
Magic Number,ECCTest,MainClass,D:\research\architectureSmells\repos\juhovh_AaltoTLS\Samples\ECCTest\Main.cs,GetECDSAFromPublicKey,The following statement contains a magic number: keyLength = 32;
Magic Number,ECCTest,MainClass,D:\research\architectureSmells\repos\juhovh_AaltoTLS\Samples\ECCTest\Main.cs,GetECDSAFromPublicKey,The following statement contains a magic number: throw new Exception("Invalid length of ECDSA public key: " + keyData.Length +  				                    " (should be " + (1+2*keyLength) + ")");
Magic Number,ECCTest,MainClass,D:\research\architectureSmells\repos\juhovh_AaltoTLS\Samples\ECCTest\Main.cs,GetECDSAFromPublicKey,The following statement contains a magic number: 2*keyLength != keyData.Length-1
Magic Number,ECCTest,MainClass,D:\research\architectureSmells\repos\juhovh_AaltoTLS\Samples\ECCTest\Main.cs,GetECDSAFromPublicKey,The following statement contains a magic number: byte[] eccBlob = new byte[8+2*keyLength];
Magic Number,ECCTest,MainClass,D:\research\architectureSmells\repos\juhovh_AaltoTLS\Samples\ECCTest\Main.cs,GetECDSAFromPublicKey,The following statement contains a magic number: byte[] eccBlob = new byte[8+2*keyLength];
Magic Number,ECCTest,MainClass,D:\research\architectureSmells\repos\juhovh_AaltoTLS\Samples\ECCTest\Main.cs,GetECDSAFromPublicKey,The following statement contains a magic number: Buffer.BlockCopy(blobMagic' 0' eccBlob' 0' 4);
Magic Number,ECCTest,MainClass,D:\research\architectureSmells\repos\juhovh_AaltoTLS\Samples\ECCTest\Main.cs,GetECDSAFromPublicKey,The following statement contains a magic number: Buffer.BlockCopy(lengthData' 0' eccBlob' 4' 4);
Magic Number,ECCTest,MainClass,D:\research\architectureSmells\repos\juhovh_AaltoTLS\Samples\ECCTest\Main.cs,GetECDSAFromPublicKey,The following statement contains a magic number: Buffer.BlockCopy(lengthData' 0' eccBlob' 4' 4);
Magic Number,ECCTest,MainClass,D:\research\architectureSmells\repos\juhovh_AaltoTLS\Samples\ECCTest\Main.cs,GetECDSAFromPublicKey,The following statement contains a magic number: Buffer.BlockCopy(keyData' 1' eccBlob' 8' (int) (2*keyLength));
Magic Number,ECCTest,MainClass,D:\research\architectureSmells\repos\juhovh_AaltoTLS\Samples\ECCTest\Main.cs,GetECDSAFromPublicKey,The following statement contains a magic number: Buffer.BlockCopy(keyData' 1' eccBlob' 8' (int) (2*keyLength));
Magic Number,ECCTest,MainClass,D:\research\architectureSmells\repos\juhovh_AaltoTLS\Samples\ECCTest\Main.cs,DER2OID,The following statement contains a magic number: oid[0] != 0x06 || oid[1] >= 128 || oid[1] != oid.Length-2
Magic Number,ECCTest,MainClass,D:\research\architectureSmells\repos\juhovh_AaltoTLS\Samples\ECCTest\Main.cs,DER2OID,The following statement contains a magic number: oid[0] != 0x06 || oid[1] >= 128 || oid[1] != oid.Length-2
Magic Number,ECCTest,MainClass,D:\research\architectureSmells\repos\juhovh_AaltoTLS\Samples\ECCTest\Main.cs,DER2OID,The following statement contains a magic number: byte firstByte = oid[2];
Magic Number,ECCTest,MainClass,D:\research\architectureSmells\repos\juhovh_AaltoTLS\Samples\ECCTest\Main.cs,DER2OID,The following statement contains a magic number: string ret = (firstByte / 40) + "." + (firstByte % 40) + ".";
Magic Number,ECCTest,MainClass,D:\research\architectureSmells\repos\juhovh_AaltoTLS\Samples\ECCTest\Main.cs,DER2OID,The following statement contains a magic number: string ret = (firstByte / 40) + "." + (firstByte % 40) + ".";
Magic Number,ECCTest,MainClass,D:\research\architectureSmells\repos\juhovh_AaltoTLS\Samples\ECCTest\Main.cs,DER2OID,The following statement contains a magic number: oid[i] < 128
Magic Number,ECCTest,ECDiffieHellmanBc,D:\research\architectureSmells\repos\juhovh_AaltoTLS\Samples\ECCTest\ECDiffieHellmanBc.cs,ECDiffieHellmanBc,The following statement contains a magic number: switch (keySize) {  			case 256:  				ecParams = Org.BouncyCastle.Asn1.Sec.SecNamedCurves.GetByName("secp256r1");  				break;  			case 384:  				ecParams = Org.BouncyCastle.Asn1.Sec.SecNamedCurves.GetByName("secp384r1");  				break;  			case 521:  				ecParams = Org.BouncyCastle.Asn1.Sec.SecNamedCurves.GetByName("secp521r1");  				break;  			default:  				throw new ArgumentException("ECDiffieHellman key size " + keySize + " not supported");  			}
Magic Number,ECCTest,ECDiffieHellmanBc,D:\research\architectureSmells\repos\juhovh_AaltoTLS\Samples\ECCTest\ECDiffieHellmanBc.cs,ECDiffieHellmanBc,The following statement contains a magic number: switch (keySize) {  			case 256:  				ecParams = Org.BouncyCastle.Asn1.Sec.SecNamedCurves.GetByName("secp256r1");  				break;  			case 384:  				ecParams = Org.BouncyCastle.Asn1.Sec.SecNamedCurves.GetByName("secp384r1");  				break;  			case 521:  				ecParams = Org.BouncyCastle.Asn1.Sec.SecNamedCurves.GetByName("secp521r1");  				break;  			default:  				throw new ArgumentException("ECDiffieHellman key size " + keySize + " not supported");  			}
Magic Number,ECCTest,ECDiffieHellmanBc,D:\research\architectureSmells\repos\juhovh_AaltoTLS\Samples\ECCTest\ECDiffieHellmanBc.cs,ECDiffieHellmanBc,The following statement contains a magic number: switch (keySize) {  			case 256:  				ecParams = Org.BouncyCastle.Asn1.Sec.SecNamedCurves.GetByName("secp256r1");  				break;  			case 384:  				ecParams = Org.BouncyCastle.Asn1.Sec.SecNamedCurves.GetByName("secp384r1");  				break;  			case 521:  				ecParams = Org.BouncyCastle.Asn1.Sec.SecNamedCurves.GetByName("secp521r1");  				break;  			default:  				throw new ArgumentException("ECDiffieHellman key size " + keySize + " not supported");  			}
Magic Number,ECCTest,ECDiffieHellmanBc,D:\research\architectureSmells\repos\juhovh_AaltoTLS\Samples\ECCTest\ECDiffieHellmanBc.cs,DeriveKeyMaterial,The following statement contains a magic number: byte[] tmpSecret = new byte[(_keySize+7)/8];
Magic Number,ECCTest,ECDiffieHellmanBc,D:\research\architectureSmells\repos\juhovh_AaltoTLS\Samples\ECCTest\ECDiffieHellmanBc.cs,DeriveKeyMaterial,The following statement contains a magic number: byte[] tmpSecret = new byte[(_keySize+7)/8];
Magic Number,ECCTest,ECDiffieHellmanBc,D:\research\architectureSmells\repos\juhovh_AaltoTLS\Samples\ECCTest\ECDiffieHellmanBc.cs,GetPublicKeyParameters,The following statement contains a magic number: string magic = Encoding.ASCII.GetString(ecdhBlob' 0' 4);
Magic Number,ECCTest,ECDiffieHellmanBc,D:\research\architectureSmells\repos\juhovh_AaltoTLS\Samples\ECCTest\ECDiffieHellmanBc.cs,GetPublicKeyParameters,The following statement contains a magic number: keySize = 256;
Magic Number,ECCTest,ECDiffieHellmanBc,D:\research\architectureSmells\repos\juhovh_AaltoTLS\Samples\ECCTest\ECDiffieHellmanBc.cs,GetPublicKeyParameters,The following statement contains a magic number: byte[] encoded = new byte[1 + ecdhBlob.Length - 8];
Magic Number,ECCTest,ECDiffieHellmanBc,D:\research\architectureSmells\repos\juhovh_AaltoTLS\Samples\ECCTest\ECDiffieHellmanBc.cs,GetPublicKeyParameters,The following statement contains a magic number: Buffer.BlockCopy(ecdhBlob' 8' encoded' 1' ecdhBlob.Length - 8);
Magic Number,ECCTest,ECDiffieHellmanBc,D:\research\architectureSmells\repos\juhovh_AaltoTLS\Samples\ECCTest\ECDiffieHellmanBc.cs,GetPublicKeyParameters,The following statement contains a magic number: Buffer.BlockCopy(ecdhBlob' 8' encoded' 1' ecdhBlob.Length - 8);
