Implementation smell,Namespace,Class,File,Method,Description
Complex Method,EllipticCurveCipherSuitePlugin,SignatureAlgorithmECDSA,C:\repos\juhovh_AaltoTLS\Plugins\EllipticCurveCipherSuitePlugin\SignatureAlgorithmECDSA.cs,DERDecodeSignature,Cyclomatic complexity of the method is 9
Long Parameter List,EllipticCurveCipherSuitePlugin,SignatureAlgorithmECDSA,C:\repos\juhovh_AaltoTLS\Plugins\EllipticCurveCipherSuitePlugin\SignatureAlgorithmECDSA.cs,DEREncodeVector,The method has 5 parameters. Parameters: vector' idx1' length' output' idx2
Empty Catch Block,EllipticCurveCipherSuitePlugin,SignatureAlgorithmECDSA,C:\repos\juhovh_AaltoTLS\Plugins\EllipticCurveCipherSuitePlugin\SignatureAlgorithmECDSA.cs,ImportPrivateKey,The method has an empty catch block.
Magic Number,EllipticCurveCipherSuitePlugin,KeyExchangeAlgorithmECDHE,C:\repos\juhovh_AaltoTLS\Plugins\EllipticCurveCipherSuitePlugin\KeyExchangeAlgorithmECDHE.cs,GetServerKeys,The following statement contains a magic number: _ecdhCng = new ECDiffieHellmanCng(256);
Magic Number,EllipticCurveCipherSuitePlugin,KeyExchangeAlgorithmECDHE,C:\repos\juhovh_AaltoTLS\Plugins\EllipticCurveCipherSuitePlugin\KeyExchangeAlgorithmECDHE.cs,GetServerKeys,The following statement contains a magic number: UInt16 namedCurve = KeySizeToNamedCurve(256);
Magic Number,EllipticCurveCipherSuitePlugin,KeyExchangeAlgorithmECDHE,C:\repos\juhovh_AaltoTLS\Plugins\EllipticCurveCipherSuitePlugin\KeyExchangeAlgorithmECDHE.cs,GetServerKeys,The following statement contains a magic number: byte[] ret = new byte[4+ecPoint.Length];
Magic Number,EllipticCurveCipherSuitePlugin,KeyExchangeAlgorithmECDHE,C:\repos\juhovh_AaltoTLS\Plugins\EllipticCurveCipherSuitePlugin\KeyExchangeAlgorithmECDHE.cs,GetServerKeys,The following statement contains a magic number: ret[0] = 3;
Magic Number,EllipticCurveCipherSuitePlugin,KeyExchangeAlgorithmECDHE,C:\repos\juhovh_AaltoTLS\Plugins\EllipticCurveCipherSuitePlugin\KeyExchangeAlgorithmECDHE.cs,GetServerKeys,The following statement contains a magic number: ret[1] = (byte) (namedCurve >> 8);
Magic Number,EllipticCurveCipherSuitePlugin,KeyExchangeAlgorithmECDHE,C:\repos\juhovh_AaltoTLS\Plugins\EllipticCurveCipherSuitePlugin\KeyExchangeAlgorithmECDHE.cs,GetServerKeys,The following statement contains a magic number: ret[2] = (byte) (namedCurve);
Magic Number,EllipticCurveCipherSuitePlugin,KeyExchangeAlgorithmECDHE,C:\repos\juhovh_AaltoTLS\Plugins\EllipticCurveCipherSuitePlugin\KeyExchangeAlgorithmECDHE.cs,GetServerKeys,The following statement contains a magic number: ret[3] = (byte) (ecPoint.Length);
Magic Number,EllipticCurveCipherSuitePlugin,KeyExchangeAlgorithmECDHE,C:\repos\juhovh_AaltoTLS\Plugins\EllipticCurveCipherSuitePlugin\KeyExchangeAlgorithmECDHE.cs,GetServerKeys,The following statement contains a magic number: Buffer.BlockCopy(ecPoint' 0' ret' 4' ecPoint.Length);
Magic Number,EllipticCurveCipherSuitePlugin,KeyExchangeAlgorithmECDHE,C:\repos\juhovh_AaltoTLS\Plugins\EllipticCurveCipherSuitePlugin\KeyExchangeAlgorithmECDHE.cs,ProcessServerKeys,The following statement contains a magic number: if (data[0] != 3) {  				throw new Exception("ECCurveType " + data[0] + " is not supported");  			}
Magic Number,EllipticCurveCipherSuitePlugin,KeyExchangeAlgorithmECDHE,C:\repos\juhovh_AaltoTLS\Plugins\EllipticCurveCipherSuitePlugin\KeyExchangeAlgorithmECDHE.cs,ProcessServerKeys,The following statement contains a magic number: UInt16 namedCurve = (UInt16) ((data[1] << 8) + data[2]);
Magic Number,EllipticCurveCipherSuitePlugin,KeyExchangeAlgorithmECDHE,C:\repos\juhovh_AaltoTLS\Plugins\EllipticCurveCipherSuitePlugin\KeyExchangeAlgorithmECDHE.cs,ProcessServerKeys,The following statement contains a magic number: UInt16 namedCurve = (UInt16) ((data[1] << 8) + data[2]);
Magic Number,EllipticCurveCipherSuitePlugin,KeyExchangeAlgorithmECDHE,C:\repos\juhovh_AaltoTLS\Plugins\EllipticCurveCipherSuitePlugin\KeyExchangeAlgorithmECDHE.cs,ProcessServerKeys,The following statement contains a magic number: int keyLength = data[3];
Magic Number,EllipticCurveCipherSuitePlugin,KeyExchangeAlgorithmECDHE,C:\repos\juhovh_AaltoTLS\Plugins\EllipticCurveCipherSuitePlugin\KeyExchangeAlgorithmECDHE.cs,ProcessServerKeys,The following statement contains a magic number: Buffer.BlockCopy(data' 4' ecPoint' 0' keyLength);
Magic Number,EllipticCurveCipherSuitePlugin,KeyExchangeAlgorithmECDHE,C:\repos\juhovh_AaltoTLS\Plugins\EllipticCurveCipherSuitePlugin\KeyExchangeAlgorithmECDHE.cs,ProcessServerKeys,The following statement contains a magic number: byte[] signature = new byte[data.Length-4-keyLength];
Magic Number,EllipticCurveCipherSuitePlugin,KeyExchangeAlgorithmECDHE,C:\repos\juhovh_AaltoTLS\Plugins\EllipticCurveCipherSuitePlugin\KeyExchangeAlgorithmECDHE.cs,ProcessServerKeys,The following statement contains a magic number: Buffer.BlockCopy(data' 4+keyLength' signature' 0' data.Length-4-keyLength);
Magic Number,EllipticCurveCipherSuitePlugin,KeyExchangeAlgorithmECDHE,C:\repos\juhovh_AaltoTLS\Plugins\EllipticCurveCipherSuitePlugin\KeyExchangeAlgorithmECDHE.cs,ProcessServerKeys,The following statement contains a magic number: Buffer.BlockCopy(data' 4+keyLength' signature' 0' data.Length-4-keyLength);
Magic Number,EllipticCurveCipherSuitePlugin,KeyExchangeAlgorithmECDHE,C:\repos\juhovh_AaltoTLS\Plugins\EllipticCurveCipherSuitePlugin\KeyExchangeAlgorithmECDHE.cs,GetMasterSecret,The following statement contains a magic number: byte[] prfID = prf.CreateDeriveBytes(new byte[0]' new byte[0]).GetBytes(48);
Magic Number,EllipticCurveCipherSuitePlugin,KeyExchangeAlgorithmECDHE,C:\repos\juhovh_AaltoTLS\Plugins\EllipticCurveCipherSuitePlugin\KeyExchangeAlgorithmECDHE.cs,GetSSLv3MasterSecret,The following statement contains a magic number: byte[] ret = new byte[48];
Magic Number,EllipticCurveCipherSuitePlugin,KeyExchangeAlgorithmECDHE,C:\repos\juhovh_AaltoTLS\Plugins\EllipticCurveCipherSuitePlugin\KeyExchangeAlgorithmECDHE.cs,GetSSLv3MasterSecret,The following statement contains a magic number: Buffer.BlockCopy(md5_a' 0' ret'  0' 16);
Magic Number,EllipticCurveCipherSuitePlugin,KeyExchangeAlgorithmECDHE,C:\repos\juhovh_AaltoTLS\Plugins\EllipticCurveCipherSuitePlugin\KeyExchangeAlgorithmECDHE.cs,GetSSLv3MasterSecret,The following statement contains a magic number: Buffer.BlockCopy(md5_b' 0' ret' 16' 16);
Magic Number,EllipticCurveCipherSuitePlugin,KeyExchangeAlgorithmECDHE,C:\repos\juhovh_AaltoTLS\Plugins\EllipticCurveCipherSuitePlugin\KeyExchangeAlgorithmECDHE.cs,GetSSLv3MasterSecret,The following statement contains a magic number: Buffer.BlockCopy(md5_b' 0' ret' 16' 16);
Magic Number,EllipticCurveCipherSuitePlugin,KeyExchangeAlgorithmECDHE,C:\repos\juhovh_AaltoTLS\Plugins\EllipticCurveCipherSuitePlugin\KeyExchangeAlgorithmECDHE.cs,GetSSLv3MasterSecret,The following statement contains a magic number: Buffer.BlockCopy(md5_c' 0' ret' 32' 16);
Magic Number,EllipticCurveCipherSuitePlugin,KeyExchangeAlgorithmECDHE,C:\repos\juhovh_AaltoTLS\Plugins\EllipticCurveCipherSuitePlugin\KeyExchangeAlgorithmECDHE.cs,GetSSLv3MasterSecret,The following statement contains a magic number: Buffer.BlockCopy(md5_c' 0' ret' 32' 16);
Magic Number,EllipticCurveCipherSuitePlugin,KeyExchangeAlgorithmECDHE,C:\repos\juhovh_AaltoTLS\Plugins\EllipticCurveCipherSuitePlugin\KeyExchangeAlgorithmECDHE.cs,KeySizeToNamedCurve,The following statement contains a magic number: switch (keySize) {  			case 256:  				// NamedCurve.secp256r1  				return 23;  			case 384:  				// NamedCurve.secp384r1  				return 24;  			case 521:  				// NamedCurve.secp521r1  				return 25;  			default:  				throw new Exception("Unsupported ECDH key size: " + keySize);  			}
Magic Number,EllipticCurveCipherSuitePlugin,KeyExchangeAlgorithmECDHE,C:\repos\juhovh_AaltoTLS\Plugins\EllipticCurveCipherSuitePlugin\KeyExchangeAlgorithmECDHE.cs,KeySizeToNamedCurve,The following statement contains a magic number: switch (keySize) {  			case 256:  				// NamedCurve.secp256r1  				return 23;  			case 384:  				// NamedCurve.secp384r1  				return 24;  			case 521:  				// NamedCurve.secp521r1  				return 25;  			default:  				throw new Exception("Unsupported ECDH key size: " + keySize);  			}
Magic Number,EllipticCurveCipherSuitePlugin,KeyExchangeAlgorithmECDHE,C:\repos\juhovh_AaltoTLS\Plugins\EllipticCurveCipherSuitePlugin\KeyExchangeAlgorithmECDHE.cs,KeySizeToNamedCurve,The following statement contains a magic number: switch (keySize) {  			case 256:  				// NamedCurve.secp256r1  				return 23;  			case 384:  				// NamedCurve.secp384r1  				return 24;  			case 521:  				// NamedCurve.secp521r1  				return 25;  			default:  				throw new Exception("Unsupported ECDH key size: " + keySize);  			}
Magic Number,EllipticCurveCipherSuitePlugin,KeyExchangeAlgorithmECDHE,C:\repos\juhovh_AaltoTLS\Plugins\EllipticCurveCipherSuitePlugin\KeyExchangeAlgorithmECDHE.cs,KeySizeToNamedCurve,The following statement contains a magic number: switch (keySize) {  			case 256:  				// NamedCurve.secp256r1  				return 23;  			case 384:  				// NamedCurve.secp384r1  				return 24;  			case 521:  				// NamedCurve.secp521r1  				return 25;  			default:  				throw new Exception("Unsupported ECDH key size: " + keySize);  			}
Magic Number,EllipticCurveCipherSuitePlugin,KeyExchangeAlgorithmECDHE,C:\repos\juhovh_AaltoTLS\Plugins\EllipticCurveCipherSuitePlugin\KeyExchangeAlgorithmECDHE.cs,KeySizeToNamedCurve,The following statement contains a magic number: switch (keySize) {  			case 256:  				// NamedCurve.secp256r1  				return 23;  			case 384:  				// NamedCurve.secp384r1  				return 24;  			case 521:  				// NamedCurve.secp521r1  				return 25;  			default:  				throw new Exception("Unsupported ECDH key size: " + keySize);  			}
Magic Number,EllipticCurveCipherSuitePlugin,KeyExchangeAlgorithmECDHE,C:\repos\juhovh_AaltoTLS\Plugins\EllipticCurveCipherSuitePlugin\KeyExchangeAlgorithmECDHE.cs,KeySizeToNamedCurve,The following statement contains a magic number: switch (keySize) {  			case 256:  				// NamedCurve.secp256r1  				return 23;  			case 384:  				// NamedCurve.secp384r1  				return 24;  			case 521:  				// NamedCurve.secp521r1  				return 25;  			default:  				throw new Exception("Unsupported ECDH key size: " + keySize);  			}
Magic Number,EllipticCurveCipherSuitePlugin,KeyExchangeAlgorithmECDHE,C:\repos\juhovh_AaltoTLS\Plugins\EllipticCurveCipherSuitePlugin\KeyExchangeAlgorithmECDHE.cs,NamedCurveToKeySize,The following statement contains a magic number: switch (namedCurve) {  			case 23:  				return 256;  			case 24:  				return 384;  			case 25:  				return 521;  			default:  				throw new Exception("Unsupported NamedCurve: " + namedCurve);  			}
Magic Number,EllipticCurveCipherSuitePlugin,KeyExchangeAlgorithmECDHE,C:\repos\juhovh_AaltoTLS\Plugins\EllipticCurveCipherSuitePlugin\KeyExchangeAlgorithmECDHE.cs,NamedCurveToKeySize,The following statement contains a magic number: switch (namedCurve) {  			case 23:  				return 256;  			case 24:  				return 384;  			case 25:  				return 521;  			default:  				throw new Exception("Unsupported NamedCurve: " + namedCurve);  			}
Magic Number,EllipticCurveCipherSuitePlugin,KeyExchangeAlgorithmECDHE,C:\repos\juhovh_AaltoTLS\Plugins\EllipticCurveCipherSuitePlugin\KeyExchangeAlgorithmECDHE.cs,NamedCurveToKeySize,The following statement contains a magic number: switch (namedCurve) {  			case 23:  				return 256;  			case 24:  				return 384;  			case 25:  				return 521;  			default:  				throw new Exception("Unsupported NamedCurve: " + namedCurve);  			}
Magic Number,EllipticCurveCipherSuitePlugin,KeyExchangeAlgorithmECDHE,C:\repos\juhovh_AaltoTLS\Plugins\EllipticCurveCipherSuitePlugin\KeyExchangeAlgorithmECDHE.cs,NamedCurveToKeySize,The following statement contains a magic number: switch (namedCurve) {  			case 23:  				return 256;  			case 24:  				return 384;  			case 25:  				return 521;  			default:  				throw new Exception("Unsupported NamedCurve: " + namedCurve);  			}
Magic Number,EllipticCurveCipherSuitePlugin,KeyExchangeAlgorithmECDHE,C:\repos\juhovh_AaltoTLS\Plugins\EllipticCurveCipherSuitePlugin\KeyExchangeAlgorithmECDHE.cs,NamedCurveToKeySize,The following statement contains a magic number: switch (namedCurve) {  			case 23:  				return 256;  			case 24:  				return 384;  			case 25:  				return 521;  			default:  				throw new Exception("Unsupported NamedCurve: " + namedCurve);  			}
Magic Number,EllipticCurveCipherSuitePlugin,KeyExchangeAlgorithmECDHE,C:\repos\juhovh_AaltoTLS\Plugins\EllipticCurveCipherSuitePlugin\KeyExchangeAlgorithmECDHE.cs,NamedCurveToKeySize,The following statement contains a magic number: switch (namedCurve) {  			case 23:  				return 256;  			case 24:  				return 384;  			case 25:  				return 521;  			default:  				throw new Exception("Unsupported NamedCurve: " + namedCurve);  			}
Magic Number,EllipticCurveCipherSuitePlugin,KeyExchangeAlgorithmECDHE,C:\repos\juhovh_AaltoTLS\Plugins\EllipticCurveCipherSuitePlugin\KeyExchangeAlgorithmECDHE.cs,Blob2Point,The following statement contains a magic number: string blobMagic = Encoding.ASCII.GetString(blob' 0' 4);
Magic Number,EllipticCurveCipherSuitePlugin,KeyExchangeAlgorithmECDHE,C:\repos\juhovh_AaltoTLS\Plugins\EllipticCurveCipherSuitePlugin\KeyExchangeAlgorithmECDHE.cs,Blob2Point,The following statement contains a magic number: UInt32 keyLength = BitConverter.ToUInt32(blob' 4);
Magic Number,EllipticCurveCipherSuitePlugin,KeyExchangeAlgorithmECDHE,C:\repos\juhovh_AaltoTLS\Plugins\EllipticCurveCipherSuitePlugin\KeyExchangeAlgorithmECDHE.cs,Blob2Point,The following statement contains a magic number: if (blobMagic.Equals("ECK1")) {  				keyLengthOk = (keyLength == 32);  			} else if (blobMagic.Equals("ECK3")) {  				keyLengthOk = (keyLength == 48);  			} else if (blobMagic.Equals("ECK5")) {  				keyLengthOk = (keyLength == 66);  			} else {  				throw new Exception("Unknown ECDH public blob type: " + blobMagic);  			}
Magic Number,EllipticCurveCipherSuitePlugin,KeyExchangeAlgorithmECDHE,C:\repos\juhovh_AaltoTLS\Plugins\EllipticCurveCipherSuitePlugin\KeyExchangeAlgorithmECDHE.cs,Blob2Point,The following statement contains a magic number: if (blobMagic.Equals("ECK1")) {  				keyLengthOk = (keyLength == 32);  			} else if (blobMagic.Equals("ECK3")) {  				keyLengthOk = (keyLength == 48);  			} else if (blobMagic.Equals("ECK5")) {  				keyLengthOk = (keyLength == 66);  			} else {  				throw new Exception("Unknown ECDH public blob type: " + blobMagic);  			}
Magic Number,EllipticCurveCipherSuitePlugin,KeyExchangeAlgorithmECDHE,C:\repos\juhovh_AaltoTLS\Plugins\EllipticCurveCipherSuitePlugin\KeyExchangeAlgorithmECDHE.cs,Blob2Point,The following statement contains a magic number: if (blobMagic.Equals("ECK1")) {  				keyLengthOk = (keyLength == 32);  			} else if (blobMagic.Equals("ECK3")) {  				keyLengthOk = (keyLength == 48);  			} else if (blobMagic.Equals("ECK5")) {  				keyLengthOk = (keyLength == 66);  			} else {  				throw new Exception("Unknown ECDH public blob type: " + blobMagic);  			}
Magic Number,EllipticCurveCipherSuitePlugin,KeyExchangeAlgorithmECDHE,C:\repos\juhovh_AaltoTLS\Plugins\EllipticCurveCipherSuitePlugin\KeyExchangeAlgorithmECDHE.cs,Blob2Point,The following statement contains a magic number: if (!keyLengthOk || (blob.Length != 8+2*keyLength)) {  				throw new Exception("Invalid ECC blob key length");  			}
Magic Number,EllipticCurveCipherSuitePlugin,KeyExchangeAlgorithmECDHE,C:\repos\juhovh_AaltoTLS\Plugins\EllipticCurveCipherSuitePlugin\KeyExchangeAlgorithmECDHE.cs,Blob2Point,The following statement contains a magic number: if (!keyLengthOk || (blob.Length != 8+2*keyLength)) {  				throw new Exception("Invalid ECC blob key length");  			}
Magic Number,EllipticCurveCipherSuitePlugin,KeyExchangeAlgorithmECDHE,C:\repos\juhovh_AaltoTLS\Plugins\EllipticCurveCipherSuitePlugin\KeyExchangeAlgorithmECDHE.cs,Blob2Point,The following statement contains a magic number: byte[] ret = new byte[1+2*keyLength];
Magic Number,EllipticCurveCipherSuitePlugin,KeyExchangeAlgorithmECDHE,C:\repos\juhovh_AaltoTLS\Plugins\EllipticCurveCipherSuitePlugin\KeyExchangeAlgorithmECDHE.cs,Blob2Point,The following statement contains a magic number: ret[0] = 4;
Magic Number,EllipticCurveCipherSuitePlugin,KeyExchangeAlgorithmECDHE,C:\repos\juhovh_AaltoTLS\Plugins\EllipticCurveCipherSuitePlugin\KeyExchangeAlgorithmECDHE.cs,Blob2Point,The following statement contains a magic number: Buffer.BlockCopy(blob' 8' ret' 1' ret.Length-1);
Magic Number,EllipticCurveCipherSuitePlugin,KeyExchangeAlgorithmECDHE,C:\repos\juhovh_AaltoTLS\Plugins\EllipticCurveCipherSuitePlugin\KeyExchangeAlgorithmECDHE.cs,Point2Blob,The following statement contains a magic number: if (point[0] != 4) {  				throw new Exception("Unsupported ECPoint format: " + point[0]);  			}
Magic Number,EllipticCurveCipherSuitePlugin,KeyExchangeAlgorithmECDHE,C:\repos\juhovh_AaltoTLS\Plugins\EllipticCurveCipherSuitePlugin\KeyExchangeAlgorithmECDHE.cs,Point2Blob,The following statement contains a magic number: UInt32 keyLength = (UInt32) ((point.Length-1)/2);
Magic Number,EllipticCurveCipherSuitePlugin,KeyExchangeAlgorithmECDHE,C:\repos\juhovh_AaltoTLS\Plugins\EllipticCurveCipherSuitePlugin\KeyExchangeAlgorithmECDHE.cs,Point2Blob,The following statement contains a magic number: switch (keyLength*8) {  			case 256:  				blobMagic = "ECK1";  				break;  			case 384:  				blobMagic = "ECK3";  				break;  			case 521:  				blobMagic = "ECK5";  				break;  			default:  				throw new Exception("Unknown ECPoint key length");  			}
Magic Number,EllipticCurveCipherSuitePlugin,KeyExchangeAlgorithmECDHE,C:\repos\juhovh_AaltoTLS\Plugins\EllipticCurveCipherSuitePlugin\KeyExchangeAlgorithmECDHE.cs,Point2Blob,The following statement contains a magic number: switch (keyLength*8) {  			case 256:  				blobMagic = "ECK1";  				break;  			case 384:  				blobMagic = "ECK3";  				break;  			case 521:  				blobMagic = "ECK5";  				break;  			default:  				throw new Exception("Unknown ECPoint key length");  			}
Magic Number,EllipticCurveCipherSuitePlugin,KeyExchangeAlgorithmECDHE,C:\repos\juhovh_AaltoTLS\Plugins\EllipticCurveCipherSuitePlugin\KeyExchangeAlgorithmECDHE.cs,Point2Blob,The following statement contains a magic number: switch (keyLength*8) {  			case 256:  				blobMagic = "ECK1";  				break;  			case 384:  				blobMagic = "ECK3";  				break;  			case 521:  				blobMagic = "ECK5";  				break;  			default:  				throw new Exception("Unknown ECPoint key length");  			}
Magic Number,EllipticCurveCipherSuitePlugin,KeyExchangeAlgorithmECDHE,C:\repos\juhovh_AaltoTLS\Plugins\EllipticCurveCipherSuitePlugin\KeyExchangeAlgorithmECDHE.cs,Point2Blob,The following statement contains a magic number: switch (keyLength*8) {  			case 256:  				blobMagic = "ECK1";  				break;  			case 384:  				blobMagic = "ECK3";  				break;  			case 521:  				blobMagic = "ECK5";  				break;  			default:  				throw new Exception("Unknown ECPoint key length");  			}
Magic Number,EllipticCurveCipherSuitePlugin,KeyExchangeAlgorithmECDHE,C:\repos\juhovh_AaltoTLS\Plugins\EllipticCurveCipherSuitePlugin\KeyExchangeAlgorithmECDHE.cs,Point2Blob,The following statement contains a magic number: byte[] ret = new byte[8+2*keyLength];
Magic Number,EllipticCurveCipherSuitePlugin,KeyExchangeAlgorithmECDHE,C:\repos\juhovh_AaltoTLS\Plugins\EllipticCurveCipherSuitePlugin\KeyExchangeAlgorithmECDHE.cs,Point2Blob,The following statement contains a magic number: byte[] ret = new byte[8+2*keyLength];
Magic Number,EllipticCurveCipherSuitePlugin,KeyExchangeAlgorithmECDHE,C:\repos\juhovh_AaltoTLS\Plugins\EllipticCurveCipherSuitePlugin\KeyExchangeAlgorithmECDHE.cs,Point2Blob,The following statement contains a magic number: Buffer.BlockCopy(blobMagicData' 0' ret' 0' 4);
Magic Number,EllipticCurveCipherSuitePlugin,KeyExchangeAlgorithmECDHE,C:\repos\juhovh_AaltoTLS\Plugins\EllipticCurveCipherSuitePlugin\KeyExchangeAlgorithmECDHE.cs,Point2Blob,The following statement contains a magic number: Buffer.BlockCopy(keyLengthData' 0' ret' 4' 4);
Magic Number,EllipticCurveCipherSuitePlugin,KeyExchangeAlgorithmECDHE,C:\repos\juhovh_AaltoTLS\Plugins\EllipticCurveCipherSuitePlugin\KeyExchangeAlgorithmECDHE.cs,Point2Blob,The following statement contains a magic number: Buffer.BlockCopy(keyLengthData' 0' ret' 4' 4);
Magic Number,EllipticCurveCipherSuitePlugin,KeyExchangeAlgorithmECDHE,C:\repos\juhovh_AaltoTLS\Plugins\EllipticCurveCipherSuitePlugin\KeyExchangeAlgorithmECDHE.cs,Point2Blob,The following statement contains a magic number: Buffer.BlockCopy(point' 1' ret' 8' ret.Length-8);
Magic Number,EllipticCurveCipherSuitePlugin,KeyExchangeAlgorithmECDHE,C:\repos\juhovh_AaltoTLS\Plugins\EllipticCurveCipherSuitePlugin\KeyExchangeAlgorithmECDHE.cs,Point2Blob,The following statement contains a magic number: Buffer.BlockCopy(point' 1' ret' 8' ret.Length-8);
Magic Number,EllipticCurveCipherSuitePlugin,SignatureAlgorithmECDSA,C:\repos\juhovh_AaltoTLS\Plugins\EllipticCurveCipherSuitePlugin\SignatureAlgorithmECDSA.cs,SupportsHashAlgorithmType,The following statement contains a magic number: switch (hashAlgorithm) {  			case 1: // HashAlgorithm.md5  			case 2: // HashAlgorithm.sha1  			case 4: // HashAlgorithm.sha256  			case 5: // HashAlgorithm.sha384  			case 6: // HashAlgorithm.sha512  				return true;  			default:  				return false;  			}
Magic Number,EllipticCurveCipherSuitePlugin,SignatureAlgorithmECDSA,C:\repos\juhovh_AaltoTLS\Plugins\EllipticCurveCipherSuitePlugin\SignatureAlgorithmECDSA.cs,SupportsHashAlgorithmType,The following statement contains a magic number: switch (hashAlgorithm) {  			case 1: // HashAlgorithm.md5  			case 2: // HashAlgorithm.sha1  			case 4: // HashAlgorithm.sha256  			case 5: // HashAlgorithm.sha384  			case 6: // HashAlgorithm.sha512  				return true;  			default:  				return false;  			}
Magic Number,EllipticCurveCipherSuitePlugin,SignatureAlgorithmECDSA,C:\repos\juhovh_AaltoTLS\Plugins\EllipticCurveCipherSuitePlugin\SignatureAlgorithmECDSA.cs,SupportsHashAlgorithmType,The following statement contains a magic number: switch (hashAlgorithm) {  			case 1: // HashAlgorithm.md5  			case 2: // HashAlgorithm.sha1  			case 4: // HashAlgorithm.sha256  			case 5: // HashAlgorithm.sha384  			case 6: // HashAlgorithm.sha512  				return true;  			default:  				return false;  			}
Magic Number,EllipticCurveCipherSuitePlugin,SignatureAlgorithmECDSA,C:\repos\juhovh_AaltoTLS\Plugins\EllipticCurveCipherSuitePlugin\SignatureAlgorithmECDSA.cs,SupportsHashAlgorithmType,The following statement contains a magic number: switch (hashAlgorithm) {  			case 1: // HashAlgorithm.md5  			case 2: // HashAlgorithm.sha1  			case 4: // HashAlgorithm.sha256  			case 5: // HashAlgorithm.sha384  			case 6: // HashAlgorithm.sha512  				return true;  			default:  				return false;  			}
Magic Number,EllipticCurveCipherSuitePlugin,SignatureAlgorithmECDSA,C:\repos\juhovh_AaltoTLS\Plugins\EllipticCurveCipherSuitePlugin\SignatureAlgorithmECDSA.cs,ImportPrivateKey,The following statement contains a magic number: try {  				string magic = Encoding.ASCII.GetString(keyData' 0' 4);  				if (magic.Equals("ECS2") || magic.Equals("ECS4") || magic.Equals("ECS6")) {  					CngKey cngKey = CngKey.Import(keyData' CngKeyBlobFormat.EccPrivateBlob);  					ECDsaCng ecdsa = new ECDsaCng(cngKey);  					return new CertificatePrivateKey(ecdsa);  				}  			} catch (Exception) {}
Magic Number,EllipticCurveCipherSuitePlugin,SignatureAlgorithmECDSA,C:\repos\juhovh_AaltoTLS\Plugins\EllipticCurveCipherSuitePlugin\SignatureAlgorithmECDSA.cs,VerifyData,The following statement contains a magic number: if (curveOid.Equals(P256OID)) {  				keyLength = 32;  				blobMagic = Encoding.ASCII.GetBytes("ECS1");  			} else if (curveOid.Equals(P384OID)) {  				keyLength = 48;  				blobMagic = Encoding.ASCII.GetBytes("ECS3");  			} else if (curveOid.Equals(P521OID)) {  				keyLength = 66;  				blobMagic = Encoding.ASCII.GetBytes("ECS5");  			} else {  				throw new Exception("Unsupported ECC curve type OID: " + curveOid);  			}
Magic Number,EllipticCurveCipherSuitePlugin,SignatureAlgorithmECDSA,C:\repos\juhovh_AaltoTLS\Plugins\EllipticCurveCipherSuitePlugin\SignatureAlgorithmECDSA.cs,VerifyData,The following statement contains a magic number: if (curveOid.Equals(P256OID)) {  				keyLength = 32;  				blobMagic = Encoding.ASCII.GetBytes("ECS1");  			} else if (curveOid.Equals(P384OID)) {  				keyLength = 48;  				blobMagic = Encoding.ASCII.GetBytes("ECS3");  			} else if (curveOid.Equals(P521OID)) {  				keyLength = 66;  				blobMagic = Encoding.ASCII.GetBytes("ECS5");  			} else {  				throw new Exception("Unsupported ECC curve type OID: " + curveOid);  			}
Magic Number,EllipticCurveCipherSuitePlugin,SignatureAlgorithmECDSA,C:\repos\juhovh_AaltoTLS\Plugins\EllipticCurveCipherSuitePlugin\SignatureAlgorithmECDSA.cs,VerifyData,The following statement contains a magic number: if (curveOid.Equals(P256OID)) {  				keyLength = 32;  				blobMagic = Encoding.ASCII.GetBytes("ECS1");  			} else if (curveOid.Equals(P384OID)) {  				keyLength = 48;  				blobMagic = Encoding.ASCII.GetBytes("ECS3");  			} else if (curveOid.Equals(P521OID)) {  				keyLength = 66;  				blobMagic = Encoding.ASCII.GetBytes("ECS5");  			} else {  				throw new Exception("Unsupported ECC curve type OID: " + curveOid);  			}
Magic Number,EllipticCurveCipherSuitePlugin,SignatureAlgorithmECDSA,C:\repos\juhovh_AaltoTLS\Plugins\EllipticCurveCipherSuitePlugin\SignatureAlgorithmECDSA.cs,VerifyData,The following statement contains a magic number: if (2*keyLength != keyData.Length-1) {  				throw new Exception("Invalid length of ECDSA public key: " + keyData.Length +  				                    " (should be " + (1+2*keyLength) + ")");  			}
Magic Number,EllipticCurveCipherSuitePlugin,SignatureAlgorithmECDSA,C:\repos\juhovh_AaltoTLS\Plugins\EllipticCurveCipherSuitePlugin\SignatureAlgorithmECDSA.cs,VerifyData,The following statement contains a magic number: if (2*keyLength != keyData.Length-1) {  				throw new Exception("Invalid length of ECDSA public key: " + keyData.Length +  				                    " (should be " + (1+2*keyLength) + ")");  			}
Magic Number,EllipticCurveCipherSuitePlugin,SignatureAlgorithmECDSA,C:\repos\juhovh_AaltoTLS\Plugins\EllipticCurveCipherSuitePlugin\SignatureAlgorithmECDSA.cs,VerifyData,The following statement contains a magic number: byte[] eccBlob = new byte[8+2*keyLength];
Magic Number,EllipticCurveCipherSuitePlugin,SignatureAlgorithmECDSA,C:\repos\juhovh_AaltoTLS\Plugins\EllipticCurveCipherSuitePlugin\SignatureAlgorithmECDSA.cs,VerifyData,The following statement contains a magic number: byte[] eccBlob = new byte[8+2*keyLength];
Magic Number,EllipticCurveCipherSuitePlugin,SignatureAlgorithmECDSA,C:\repos\juhovh_AaltoTLS\Plugins\EllipticCurveCipherSuitePlugin\SignatureAlgorithmECDSA.cs,VerifyData,The following statement contains a magic number: Buffer.BlockCopy(blobMagic' 0' eccBlob' 0' 4);
Magic Number,EllipticCurveCipherSuitePlugin,SignatureAlgorithmECDSA,C:\repos\juhovh_AaltoTLS\Plugins\EllipticCurveCipherSuitePlugin\SignatureAlgorithmECDSA.cs,VerifyData,The following statement contains a magic number: Buffer.BlockCopy(lengthData' 0' eccBlob' 4' 4);
Magic Number,EllipticCurveCipherSuitePlugin,SignatureAlgorithmECDSA,C:\repos\juhovh_AaltoTLS\Plugins\EllipticCurveCipherSuitePlugin\SignatureAlgorithmECDSA.cs,VerifyData,The following statement contains a magic number: Buffer.BlockCopy(lengthData' 0' eccBlob' 4' 4);
Magic Number,EllipticCurveCipherSuitePlugin,SignatureAlgorithmECDSA,C:\repos\juhovh_AaltoTLS\Plugins\EllipticCurveCipherSuitePlugin\SignatureAlgorithmECDSA.cs,VerifyData,The following statement contains a magic number: Buffer.BlockCopy(keyData' 1' eccBlob' 8' (int) (2*keyLength));
Magic Number,EllipticCurveCipherSuitePlugin,SignatureAlgorithmECDSA,C:\repos\juhovh_AaltoTLS\Plugins\EllipticCurveCipherSuitePlugin\SignatureAlgorithmECDSA.cs,VerifyData,The following statement contains a magic number: Buffer.BlockCopy(keyData' 1' eccBlob' 8' (int) (2*keyLength));
Magic Number,EllipticCurveCipherSuitePlugin,SignatureAlgorithmECDSA,C:\repos\juhovh_AaltoTLS\Plugins\EllipticCurveCipherSuitePlugin\SignatureAlgorithmECDSA.cs,DER2OID,The following statement contains a magic number: try {  				if (oid[0] != 0x06 || oid[1] >= 128 || oid[1] != oid.Length-2) {  					return null;  				}  				  				byte firstByte = oid[2];  				string ret = (firstByte / 40) + "." + (firstByte % 40) + ".";  				for (int i=3; i<oid.Length; i++) {  					if (oid[i] < 128) {  						ret += (int) oid[i];  					} else if (oid[i] >= 128 && oid[i+1] < 128) {  						ret += (int) (((oid[i] & 0x7f) << 7) | oid[i+1]);  						i++;  					} else {  						return null;  					}  					  					if (i != oid.Length-1) {  						ret += ".";  					}  				}  				return ret;  			} catch (Exception) {  				return null;  			}
Magic Number,EllipticCurveCipherSuitePlugin,SignatureAlgorithmECDSA,C:\repos\juhovh_AaltoTLS\Plugins\EllipticCurveCipherSuitePlugin\SignatureAlgorithmECDSA.cs,DER2OID,The following statement contains a magic number: try {  				if (oid[0] != 0x06 || oid[1] >= 128 || oid[1] != oid.Length-2) {  					return null;  				}  				  				byte firstByte = oid[2];  				string ret = (firstByte / 40) + "." + (firstByte % 40) + ".";  				for (int i=3; i<oid.Length; i++) {  					if (oid[i] < 128) {  						ret += (int) oid[i];  					} else if (oid[i] >= 128 && oid[i+1] < 128) {  						ret += (int) (((oid[i] & 0x7f) << 7) | oid[i+1]);  						i++;  					} else {  						return null;  					}  					  					if (i != oid.Length-1) {  						ret += ".";  					}  				}  				return ret;  			} catch (Exception) {  				return null;  			}
Magic Number,EllipticCurveCipherSuitePlugin,SignatureAlgorithmECDSA,C:\repos\juhovh_AaltoTLS\Plugins\EllipticCurveCipherSuitePlugin\SignatureAlgorithmECDSA.cs,DER2OID,The following statement contains a magic number: try {  				if (oid[0] != 0x06 || oid[1] >= 128 || oid[1] != oid.Length-2) {  					return null;  				}  				  				byte firstByte = oid[2];  				string ret = (firstByte / 40) + "." + (firstByte % 40) + ".";  				for (int i=3; i<oid.Length; i++) {  					if (oid[i] < 128) {  						ret += (int) oid[i];  					} else if (oid[i] >= 128 && oid[i+1] < 128) {  						ret += (int) (((oid[i] & 0x7f) << 7) | oid[i+1]);  						i++;  					} else {  						return null;  					}  					  					if (i != oid.Length-1) {  						ret += ".";  					}  				}  				return ret;  			} catch (Exception) {  				return null;  			}
Magic Number,EllipticCurveCipherSuitePlugin,SignatureAlgorithmECDSA,C:\repos\juhovh_AaltoTLS\Plugins\EllipticCurveCipherSuitePlugin\SignatureAlgorithmECDSA.cs,DER2OID,The following statement contains a magic number: try {  				if (oid[0] != 0x06 || oid[1] >= 128 || oid[1] != oid.Length-2) {  					return null;  				}  				  				byte firstByte = oid[2];  				string ret = (firstByte / 40) + "." + (firstByte % 40) + ".";  				for (int i=3; i<oid.Length; i++) {  					if (oid[i] < 128) {  						ret += (int) oid[i];  					} else if (oid[i] >= 128 && oid[i+1] < 128) {  						ret += (int) (((oid[i] & 0x7f) << 7) | oid[i+1]);  						i++;  					} else {  						return null;  					}  					  					if (i != oid.Length-1) {  						ret += ".";  					}  				}  				return ret;  			} catch (Exception) {  				return null;  			}
Magic Number,EllipticCurveCipherSuitePlugin,SignatureAlgorithmECDSA,C:\repos\juhovh_AaltoTLS\Plugins\EllipticCurveCipherSuitePlugin\SignatureAlgorithmECDSA.cs,DER2OID,The following statement contains a magic number: try {  				if (oid[0] != 0x06 || oid[1] >= 128 || oid[1] != oid.Length-2) {  					return null;  				}  				  				byte firstByte = oid[2];  				string ret = (firstByte / 40) + "." + (firstByte % 40) + ".";  				for (int i=3; i<oid.Length; i++) {  					if (oid[i] < 128) {  						ret += (int) oid[i];  					} else if (oid[i] >= 128 && oid[i+1] < 128) {  						ret += (int) (((oid[i] & 0x7f) << 7) | oid[i+1]);  						i++;  					} else {  						return null;  					}  					  					if (i != oid.Length-1) {  						ret += ".";  					}  				}  				return ret;  			} catch (Exception) {  				return null;  			}
Magic Number,EllipticCurveCipherSuitePlugin,SignatureAlgorithmECDSA,C:\repos\juhovh_AaltoTLS\Plugins\EllipticCurveCipherSuitePlugin\SignatureAlgorithmECDSA.cs,DER2OID,The following statement contains a magic number: try {  				if (oid[0] != 0x06 || oid[1] >= 128 || oid[1] != oid.Length-2) {  					return null;  				}  				  				byte firstByte = oid[2];  				string ret = (firstByte / 40) + "." + (firstByte % 40) + ".";  				for (int i=3; i<oid.Length; i++) {  					if (oid[i] < 128) {  						ret += (int) oid[i];  					} else if (oid[i] >= 128 && oid[i+1] < 128) {  						ret += (int) (((oid[i] & 0x7f) << 7) | oid[i+1]);  						i++;  					} else {  						return null;  					}  					  					if (i != oid.Length-1) {  						ret += ".";  					}  				}  				return ret;  			} catch (Exception) {  				return null;  			}
Magic Number,EllipticCurveCipherSuitePlugin,SignatureAlgorithmECDSA,C:\repos\juhovh_AaltoTLS\Plugins\EllipticCurveCipherSuitePlugin\SignatureAlgorithmECDSA.cs,DER2OID,The following statement contains a magic number: try {  				if (oid[0] != 0x06 || oid[1] >= 128 || oid[1] != oid.Length-2) {  					return null;  				}  				  				byte firstByte = oid[2];  				string ret = (firstByte / 40) + "." + (firstByte % 40) + ".";  				for (int i=3; i<oid.Length; i++) {  					if (oid[i] < 128) {  						ret += (int) oid[i];  					} else if (oid[i] >= 128 && oid[i+1] < 128) {  						ret += (int) (((oid[i] & 0x7f) << 7) | oid[i+1]);  						i++;  					} else {  						return null;  					}  					  					if (i != oid.Length-1) {  						ret += ".";  					}  				}  				return ret;  			} catch (Exception) {  				return null;  			}
Magic Number,EllipticCurveCipherSuitePlugin,SignatureAlgorithmECDSA,C:\repos\juhovh_AaltoTLS\Plugins\EllipticCurveCipherSuitePlugin\SignatureAlgorithmECDSA.cs,DER2OID,The following statement contains a magic number: try {  				if (oid[0] != 0x06 || oid[1] >= 128 || oid[1] != oid.Length-2) {  					return null;  				}  				  				byte firstByte = oid[2];  				string ret = (firstByte / 40) + "." + (firstByte % 40) + ".";  				for (int i=3; i<oid.Length; i++) {  					if (oid[i] < 128) {  						ret += (int) oid[i];  					} else if (oid[i] >= 128 && oid[i+1] < 128) {  						ret += (int) (((oid[i] & 0x7f) << 7) | oid[i+1]);  						i++;  					} else {  						return null;  					}  					  					if (i != oid.Length-1) {  						ret += ".";  					}  				}  				return ret;  			} catch (Exception) {  				return null;  			}
Magic Number,EllipticCurveCipherSuitePlugin,SignatureAlgorithmECDSA,C:\repos\juhovh_AaltoTLS\Plugins\EllipticCurveCipherSuitePlugin\SignatureAlgorithmECDSA.cs,DER2OID,The following statement contains a magic number: try {  				if (oid[0] != 0x06 || oid[1] >= 128 || oid[1] != oid.Length-2) {  					return null;  				}  				  				byte firstByte = oid[2];  				string ret = (firstByte / 40) + "." + (firstByte % 40) + ".";  				for (int i=3; i<oid.Length; i++) {  					if (oid[i] < 128) {  						ret += (int) oid[i];  					} else if (oid[i] >= 128 && oid[i+1] < 128) {  						ret += (int) (((oid[i] & 0x7f) << 7) | oid[i+1]);  						i++;  					} else {  						return null;  					}  					  					if (i != oid.Length-1) {  						ret += ".";  					}  				}  				return ret;  			} catch (Exception) {  				return null;  			}
Magic Number,EllipticCurveCipherSuitePlugin,SignatureAlgorithmECDSA,C:\repos\juhovh_AaltoTLS\Plugins\EllipticCurveCipherSuitePlugin\SignatureAlgorithmECDSA.cs,DER2OID,The following statement contains a magic number: try {  				if (oid[0] != 0x06 || oid[1] >= 128 || oid[1] != oid.Length-2) {  					return null;  				}  				  				byte firstByte = oid[2];  				string ret = (firstByte / 40) + "." + (firstByte % 40) + ".";  				for (int i=3; i<oid.Length; i++) {  					if (oid[i] < 128) {  						ret += (int) oid[i];  					} else if (oid[i] >= 128 && oid[i+1] < 128) {  						ret += (int) (((oid[i] & 0x7f) << 7) | oid[i+1]);  						i++;  					} else {  						return null;  					}  					  					if (i != oid.Length-1) {  						ret += ".";  					}  				}  				return ret;  			} catch (Exception) {  				return null;  			}
Magic Number,EllipticCurveCipherSuitePlugin,SignatureAlgorithmECDSA,C:\repos\juhovh_AaltoTLS\Plugins\EllipticCurveCipherSuitePlugin\SignatureAlgorithmECDSA.cs,DEREncodeSignature,The following statement contains a magic number: if (signature.Length > 65526 || (signature.Length%2) != 0) {  				throw new Exception("Invalid signature length");  			}
Magic Number,EllipticCurveCipherSuitePlugin,SignatureAlgorithmECDSA,C:\repos\juhovh_AaltoTLS\Plugins\EllipticCurveCipherSuitePlugin\SignatureAlgorithmECDSA.cs,DEREncodeSignature,The following statement contains a magic number: if (signature.Length > 65526 || (signature.Length%2) != 0) {  				throw new Exception("Invalid signature length");  			}
Magic Number,EllipticCurveCipherSuitePlugin,SignatureAlgorithmECDSA,C:\repos\juhovh_AaltoTLS\Plugins\EllipticCurveCipherSuitePlugin\SignatureAlgorithmECDSA.cs,DEREncodeSignature,The following statement contains a magic number: int vectorLength = (signature.Length/2 < 128) ? 2+(signature.Length/2) :  			                   (signature.Length/2 < 256) ? 3+(signature.Length/2) :  			                   4+(signature.Length/2);
Magic Number,EllipticCurveCipherSuitePlugin,SignatureAlgorithmECDSA,C:\repos\juhovh_AaltoTLS\Plugins\EllipticCurveCipherSuitePlugin\SignatureAlgorithmECDSA.cs,DEREncodeSignature,The following statement contains a magic number: int vectorLength = (signature.Length/2 < 128) ? 2+(signature.Length/2) :  			                   (signature.Length/2 < 256) ? 3+(signature.Length/2) :  			                   4+(signature.Length/2);
Magic Number,EllipticCurveCipherSuitePlugin,SignatureAlgorithmECDSA,C:\repos\juhovh_AaltoTLS\Plugins\EllipticCurveCipherSuitePlugin\SignatureAlgorithmECDSA.cs,DEREncodeSignature,The following statement contains a magic number: int vectorLength = (signature.Length/2 < 128) ? 2+(signature.Length/2) :  			                   (signature.Length/2 < 256) ? 3+(signature.Length/2) :  			                   4+(signature.Length/2);
Magic Number,EllipticCurveCipherSuitePlugin,SignatureAlgorithmECDSA,C:\repos\juhovh_AaltoTLS\Plugins\EllipticCurveCipherSuitePlugin\SignatureAlgorithmECDSA.cs,DEREncodeSignature,The following statement contains a magic number: int vectorLength = (signature.Length/2 < 128) ? 2+(signature.Length/2) :  			                   (signature.Length/2 < 256) ? 3+(signature.Length/2) :  			                   4+(signature.Length/2);
Magic Number,EllipticCurveCipherSuitePlugin,SignatureAlgorithmECDSA,C:\repos\juhovh_AaltoTLS\Plugins\EllipticCurveCipherSuitePlugin\SignatureAlgorithmECDSA.cs,DEREncodeSignature,The following statement contains a magic number: int vectorLength = (signature.Length/2 < 128) ? 2+(signature.Length/2) :  			                   (signature.Length/2 < 256) ? 3+(signature.Length/2) :  			                   4+(signature.Length/2);
Magic Number,EllipticCurveCipherSuitePlugin,SignatureAlgorithmECDSA,C:\repos\juhovh_AaltoTLS\Plugins\EllipticCurveCipherSuitePlugin\SignatureAlgorithmECDSA.cs,DEREncodeSignature,The following statement contains a magic number: int vectorLength = (signature.Length/2 < 128) ? 2+(signature.Length/2) :  			                   (signature.Length/2 < 256) ? 3+(signature.Length/2) :  			                   4+(signature.Length/2);
Magic Number,EllipticCurveCipherSuitePlugin,SignatureAlgorithmECDSA,C:\repos\juhovh_AaltoTLS\Plugins\EllipticCurveCipherSuitePlugin\SignatureAlgorithmECDSA.cs,DEREncodeSignature,The following statement contains a magic number: int vectorLength = (signature.Length/2 < 128) ? 2+(signature.Length/2) :  			                   (signature.Length/2 < 256) ? 3+(signature.Length/2) :  			                   4+(signature.Length/2);
Magic Number,EllipticCurveCipherSuitePlugin,SignatureAlgorithmECDSA,C:\repos\juhovh_AaltoTLS\Plugins\EllipticCurveCipherSuitePlugin\SignatureAlgorithmECDSA.cs,DEREncodeSignature,The following statement contains a magic number: int vectorLength = (signature.Length/2 < 128) ? 2+(signature.Length/2) :  			                   (signature.Length/2 < 256) ? 3+(signature.Length/2) :  			                   4+(signature.Length/2);
Magic Number,EllipticCurveCipherSuitePlugin,SignatureAlgorithmECDSA,C:\repos\juhovh_AaltoTLS\Plugins\EllipticCurveCipherSuitePlugin\SignatureAlgorithmECDSA.cs,DEREncodeSignature,The following statement contains a magic number: int vectorLength = (signature.Length/2 < 128) ? 2+(signature.Length/2) :  			                   (signature.Length/2 < 256) ? 3+(signature.Length/2) :  			                   4+(signature.Length/2);
Magic Number,EllipticCurveCipherSuitePlugin,SignatureAlgorithmECDSA,C:\repos\juhovh_AaltoTLS\Plugins\EllipticCurveCipherSuitePlugin\SignatureAlgorithmECDSA.cs,DEREncodeSignature,The following statement contains a magic number: int vectorLength = (signature.Length/2 < 128) ? 2+(signature.Length/2) :  			                   (signature.Length/2 < 256) ? 3+(signature.Length/2) :  			                   4+(signature.Length/2);
Magic Number,EllipticCurveCipherSuitePlugin,SignatureAlgorithmECDSA,C:\repos\juhovh_AaltoTLS\Plugins\EllipticCurveCipherSuitePlugin\SignatureAlgorithmECDSA.cs,DEREncodeSignature,The following statement contains a magic number: byte[] encoded = new byte[2*vectorLength];
Magic Number,EllipticCurveCipherSuitePlugin,SignatureAlgorithmECDSA,C:\repos\juhovh_AaltoTLS\Plugins\EllipticCurveCipherSuitePlugin\SignatureAlgorithmECDSA.cs,DEREncodeSignature,The following statement contains a magic number: DEREncodeVector(signature' 0' signature.Length/2' encoded' 1);
Magic Number,EllipticCurveCipherSuitePlugin,SignatureAlgorithmECDSA,C:\repos\juhovh_AaltoTLS\Plugins\EllipticCurveCipherSuitePlugin\SignatureAlgorithmECDSA.cs,DEREncodeSignature,The following statement contains a magic number: DEREncodeVector(signature' signature.Length/2' signature.Length/2' encoded' vectorLength+1);
Magic Number,EllipticCurveCipherSuitePlugin,SignatureAlgorithmECDSA,C:\repos\juhovh_AaltoTLS\Plugins\EllipticCurveCipherSuitePlugin\SignatureAlgorithmECDSA.cs,DEREncodeSignature,The following statement contains a magic number: DEREncodeVector(signature' signature.Length/2' signature.Length/2' encoded' vectorLength+1);
Magic Number,EllipticCurveCipherSuitePlugin,SignatureAlgorithmECDSA,C:\repos\juhovh_AaltoTLS\Plugins\EllipticCurveCipherSuitePlugin\SignatureAlgorithmECDSA.cs,DEREncodeSignature,The following statement contains a magic number: int retLength = (encoded.Length < 128) ? 2+encoded.Length :  			                (encoded.Length < 256) ? 3+encoded.Length :  			                4+encoded.Length;
Magic Number,EllipticCurveCipherSuitePlugin,SignatureAlgorithmECDSA,C:\repos\juhovh_AaltoTLS\Plugins\EllipticCurveCipherSuitePlugin\SignatureAlgorithmECDSA.cs,DEREncodeSignature,The following statement contains a magic number: int retLength = (encoded.Length < 128) ? 2+encoded.Length :  			                (encoded.Length < 256) ? 3+encoded.Length :  			                4+encoded.Length;
Magic Number,EllipticCurveCipherSuitePlugin,SignatureAlgorithmECDSA,C:\repos\juhovh_AaltoTLS\Plugins\EllipticCurveCipherSuitePlugin\SignatureAlgorithmECDSA.cs,DEREncodeSignature,The following statement contains a magic number: int retLength = (encoded.Length < 128) ? 2+encoded.Length :  			                (encoded.Length < 256) ? 3+encoded.Length :  			                4+encoded.Length;
Magic Number,EllipticCurveCipherSuitePlugin,SignatureAlgorithmECDSA,C:\repos\juhovh_AaltoTLS\Plugins\EllipticCurveCipherSuitePlugin\SignatureAlgorithmECDSA.cs,DEREncodeSignature,The following statement contains a magic number: int retLength = (encoded.Length < 128) ? 2+encoded.Length :  			                (encoded.Length < 256) ? 3+encoded.Length :  			                4+encoded.Length;
Magic Number,EllipticCurveCipherSuitePlugin,SignatureAlgorithmECDSA,C:\repos\juhovh_AaltoTLS\Plugins\EllipticCurveCipherSuitePlugin\SignatureAlgorithmECDSA.cs,DEREncodeSignature,The following statement contains a magic number: int retLength = (encoded.Length < 128) ? 2+encoded.Length :  			                (encoded.Length < 256) ? 3+encoded.Length :  			                4+encoded.Length;
Magic Number,EllipticCurveCipherSuitePlugin,SignatureAlgorithmECDSA,C:\repos\juhovh_AaltoTLS\Plugins\EllipticCurveCipherSuitePlugin\SignatureAlgorithmECDSA.cs,DERDecodeSignature,The following statement contains a magic number: if (data.Length > 65538 || data[0] != 0x30) {  				throw new Exception("Invalid signature");  			}
Magic Number,EllipticCurveCipherSuitePlugin,SignatureAlgorithmECDSA,C:\repos\juhovh_AaltoTLS\Plugins\EllipticCurveCipherSuitePlugin\SignatureAlgorithmECDSA.cs,DERDecodeSignature,The following statement contains a magic number: byte[] ret = new byte[sigLength*2];
Magic Number,EllipticCurveCipherSuitePlugin,SignatureAlgorithmECDSA,C:\repos\juhovh_AaltoTLS\Plugins\EllipticCurveCipherSuitePlugin\SignatureAlgorithmECDSA.cs,DEREncodeVector,The following statement contains a magic number: if (length < 128) {  				output[idx2++] = (byte) length;  			} else if (length < 256) {  				output[idx2++] = 0x81;  				output[idx2++] = (byte) length;  			} else {  				output[idx2++] = 0x82;  				output[idx2++] = (byte) (length >> 8);  				output[idx2++] = (byte) (length);  			}
Magic Number,EllipticCurveCipherSuitePlugin,SignatureAlgorithmECDSA,C:\repos\juhovh_AaltoTLS\Plugins\EllipticCurveCipherSuitePlugin\SignatureAlgorithmECDSA.cs,DEREncodeVector,The following statement contains a magic number: if (length < 128) {  				output[idx2++] = (byte) length;  			} else if (length < 256) {  				output[idx2++] = 0x81;  				output[idx2++] = (byte) length;  			} else {  				output[idx2++] = 0x82;  				output[idx2++] = (byte) (length >> 8);  				output[idx2++] = (byte) (length);  			}
Magic Number,EllipticCurveCipherSuitePlugin,SignatureAlgorithmECDSA,C:\repos\juhovh_AaltoTLS\Plugins\EllipticCurveCipherSuitePlugin\SignatureAlgorithmECDSA.cs,DEREncodeVector,The following statement contains a magic number: if (length < 128) {  				output[idx2++] = (byte) length;  			} else if (length < 256) {  				output[idx2++] = 0x81;  				output[idx2++] = (byte) length;  			} else {  				output[idx2++] = 0x82;  				output[idx2++] = (byte) (length >> 8);  				output[idx2++] = (byte) (length);  			}
Magic Number,EllipticCurveCipherSuitePlugin,SignatureAlgorithmECDSA,C:\repos\juhovh_AaltoTLS\Plugins\EllipticCurveCipherSuitePlugin\SignatureAlgorithmECDSA.cs,DERDecodeVector,The following statement contains a magic number: if (input[idx] < 128) {  				length = input[idx];  				consumed = 1+length;  				idx += 1;  			} else if (input[idx] == 0x81) {  				length = input[idx+1];  				consumed = 2+length;  				idx += 2;  			} else if (input[idx] == 0x82) {  				length = (input[idx+1] << 8) | input[idx+2];  				consumed = 3+length;  				idx += 3;  			} else {  				throw new Exception("Unsupported DER vector length");  			}
Magic Number,EllipticCurveCipherSuitePlugin,SignatureAlgorithmECDSA,C:\repos\juhovh_AaltoTLS\Plugins\EllipticCurveCipherSuitePlugin\SignatureAlgorithmECDSA.cs,DERDecodeVector,The following statement contains a magic number: if (input[idx] < 128) {  				length = input[idx];  				consumed = 1+length;  				idx += 1;  			} else if (input[idx] == 0x81) {  				length = input[idx+1];  				consumed = 2+length;  				idx += 2;  			} else if (input[idx] == 0x82) {  				length = (input[idx+1] << 8) | input[idx+2];  				consumed = 3+length;  				idx += 3;  			} else {  				throw new Exception("Unsupported DER vector length");  			}
Magic Number,EllipticCurveCipherSuitePlugin,SignatureAlgorithmECDSA,C:\repos\juhovh_AaltoTLS\Plugins\EllipticCurveCipherSuitePlugin\SignatureAlgorithmECDSA.cs,DERDecodeVector,The following statement contains a magic number: if (input[idx] < 128) {  				length = input[idx];  				consumed = 1+length;  				idx += 1;  			} else if (input[idx] == 0x81) {  				length = input[idx+1];  				consumed = 2+length;  				idx += 2;  			} else if (input[idx] == 0x82) {  				length = (input[idx+1] << 8) | input[idx+2];  				consumed = 3+length;  				idx += 3;  			} else {  				throw new Exception("Unsupported DER vector length");  			}
Magic Number,EllipticCurveCipherSuitePlugin,SignatureAlgorithmECDSA,C:\repos\juhovh_AaltoTLS\Plugins\EllipticCurveCipherSuitePlugin\SignatureAlgorithmECDSA.cs,DERDecodeVector,The following statement contains a magic number: if (input[idx] < 128) {  				length = input[idx];  				consumed = 1+length;  				idx += 1;  			} else if (input[idx] == 0x81) {  				length = input[idx+1];  				consumed = 2+length;  				idx += 2;  			} else if (input[idx] == 0x82) {  				length = (input[idx+1] << 8) | input[idx+2];  				consumed = 3+length;  				idx += 3;  			} else {  				throw new Exception("Unsupported DER vector length");  			}
Magic Number,EllipticCurveCipherSuitePlugin,SignatureAlgorithmECDSA,C:\repos\juhovh_AaltoTLS\Plugins\EllipticCurveCipherSuitePlugin\SignatureAlgorithmECDSA.cs,DERDecodeVector,The following statement contains a magic number: if (input[idx] < 128) {  				length = input[idx];  				consumed = 1+length;  				idx += 1;  			} else if (input[idx] == 0x81) {  				length = input[idx+1];  				consumed = 2+length;  				idx += 2;  			} else if (input[idx] == 0x82) {  				length = (input[idx+1] << 8) | input[idx+2];  				consumed = 3+length;  				idx += 3;  			} else {  				throw new Exception("Unsupported DER vector length");  			}
Magic Number,EllipticCurveCipherSuitePlugin,SignatureAlgorithmECDSA,C:\repos\juhovh_AaltoTLS\Plugins\EllipticCurveCipherSuitePlugin\SignatureAlgorithmECDSA.cs,DERDecodeVector,The following statement contains a magic number: if (input[idx] < 128) {  				length = input[idx];  				consumed = 1+length;  				idx += 1;  			} else if (input[idx] == 0x81) {  				length = input[idx+1];  				consumed = 2+length;  				idx += 2;  			} else if (input[idx] == 0x82) {  				length = (input[idx+1] << 8) | input[idx+2];  				consumed = 3+length;  				idx += 3;  			} else {  				throw new Exception("Unsupported DER vector length");  			}
Magic Number,EllipticCurveCipherSuitePlugin,SignatureAlgorithmECDSA,C:\repos\juhovh_AaltoTLS\Plugins\EllipticCurveCipherSuitePlugin\SignatureAlgorithmECDSA.cs,DERDecodeVector,The following statement contains a magic number: if (input[idx] < 128) {  				length = input[idx];  				consumed = 1+length;  				idx += 1;  			} else if (input[idx] == 0x81) {  				length = input[idx+1];  				consumed = 2+length;  				idx += 2;  			} else if (input[idx] == 0x82) {  				length = (input[idx+1] << 8) | input[idx+2];  				consumed = 3+length;  				idx += 3;  			} else {  				throw new Exception("Unsupported DER vector length");  			}
