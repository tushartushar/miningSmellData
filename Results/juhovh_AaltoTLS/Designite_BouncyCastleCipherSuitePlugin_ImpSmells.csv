Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,BouncyCastleCipherSuitePlugin,SignatureAlgorithmECDSA,C:\repos\juhovh_AaltoTLS\Plugins\BouncyCastleCipherSuitePlugin\SignatureAlgorithmECDSA.cs,VerifyData,The method has 5 parameters. Parameters: version' data' hashAlgorithm' publicKey' signature
Long Parameter List,BouncyCastleCipherSuitePlugin,SignatureAlgorithmECDSA,C:\repos\juhovh_AaltoTLS\Plugins\BouncyCastleCipherSuitePlugin\SignatureAlgorithmECDSA.cs,DEREncodeVector,The method has 5 parameters. Parameters: vector' idx1' length' output' idx2
Magic Number,BouncyCastleCipherSuitePlugin,BulkCipherAlgorithmCbc<BlockCipherType>,C:\repos\juhovh_AaltoTLS\Plugins\BouncyCastleCipherSuitePlugin\BulkCipherAlgorithmCbc.cs,BulkCipherAlgorithmCbc,The following statement contains a magic number: if (keySize%8 != 0)  				throw new ArgumentException("keySize");
Magic Number,BouncyCastleCipherSuitePlugin,BulkCipherAlgorithmCbc<BlockCipherType>,C:\repos\juhovh_AaltoTLS\Plugins\BouncyCastleCipherSuitePlugin\BulkCipherAlgorithmCbc.cs,BulkCipherAlgorithmCbc,The following statement contains a magic number: _keySize = keySize/8;
Magic Number,BouncyCastleCipherSuitePlugin,BouncyCastleCipherSuitePlugin,C:\repos\juhovh_AaltoTLS\Plugins\BouncyCastleCipherSuitePlugin\BouncyCastleCipherSuitePlugin.cs,GetBulkCipherAlgorithm,The following statement contains a magic number: if (name.Equals("SEED_CBC")) {  				return new BulkCipherAlgorithmCbc<SeedEngine>(128);  			} else if (name.Equals("CAMELLIA_128_CBC")) {  				return new BulkCipherAlgorithmCbc<CamelliaEngine>(128);  			} else if (name.Equals("CAMELLIA_256_CBC")) {  				return new BulkCipherAlgorithmCbc<CamelliaEngine>(256);  			} else {  				return null;  			}
Magic Number,BouncyCastleCipherSuitePlugin,BouncyCastleCipherSuitePlugin,C:\repos\juhovh_AaltoTLS\Plugins\BouncyCastleCipherSuitePlugin\BouncyCastleCipherSuitePlugin.cs,GetBulkCipherAlgorithm,The following statement contains a magic number: if (name.Equals("SEED_CBC")) {  				return new BulkCipherAlgorithmCbc<SeedEngine>(128);  			} else if (name.Equals("CAMELLIA_128_CBC")) {  				return new BulkCipherAlgorithmCbc<CamelliaEngine>(128);  			} else if (name.Equals("CAMELLIA_256_CBC")) {  				return new BulkCipherAlgorithmCbc<CamelliaEngine>(256);  			} else {  				return null;  			}
Magic Number,BouncyCastleCipherSuitePlugin,BouncyCastleCipherSuitePlugin,C:\repos\juhovh_AaltoTLS\Plugins\BouncyCastleCipherSuitePlugin\BouncyCastleCipherSuitePlugin.cs,GetBulkCipherAlgorithm,The following statement contains a magic number: if (name.Equals("SEED_CBC")) {  				return new BulkCipherAlgorithmCbc<SeedEngine>(128);  			} else if (name.Equals("CAMELLIA_128_CBC")) {  				return new BulkCipherAlgorithmCbc<CamelliaEngine>(128);  			} else if (name.Equals("CAMELLIA_256_CBC")) {  				return new BulkCipherAlgorithmCbc<CamelliaEngine>(256);  			} else {  				return null;  			}
Magic Number,BouncyCastleCipherSuitePlugin,KeyExchangeAlgorithmECDHE,C:\repos\juhovh_AaltoTLS\Plugins\BouncyCastleCipherSuitePlugin\KeyExchangeAlgorithmECDHE.cs,GetServerKeys,The following statement contains a magic number: byte[] serverKeys = new byte[4+publicKey.Length];
Magic Number,BouncyCastleCipherSuitePlugin,KeyExchangeAlgorithmECDHE,C:\repos\juhovh_AaltoTLS\Plugins\BouncyCastleCipherSuitePlugin\KeyExchangeAlgorithmECDHE.cs,GetServerKeys,The following statement contains a magic number: serverKeys[0] = 3;
Magic Number,BouncyCastleCipherSuitePlugin,KeyExchangeAlgorithmECDHE,C:\repos\juhovh_AaltoTLS\Plugins\BouncyCastleCipherSuitePlugin\KeyExchangeAlgorithmECDHE.cs,GetServerKeys,The following statement contains a magic number: serverKeys[2] = 23;
Magic Number,BouncyCastleCipherSuitePlugin,KeyExchangeAlgorithmECDHE,C:\repos\juhovh_AaltoTLS\Plugins\BouncyCastleCipherSuitePlugin\KeyExchangeAlgorithmECDHE.cs,GetServerKeys,The following statement contains a magic number: serverKeys[2] = 23;
Magic Number,BouncyCastleCipherSuitePlugin,KeyExchangeAlgorithmECDHE,C:\repos\juhovh_AaltoTLS\Plugins\BouncyCastleCipherSuitePlugin\KeyExchangeAlgorithmECDHE.cs,GetServerKeys,The following statement contains a magic number: serverKeys[3] = (byte) publicKey.Length;
Magic Number,BouncyCastleCipherSuitePlugin,KeyExchangeAlgorithmECDHE,C:\repos\juhovh_AaltoTLS\Plugins\BouncyCastleCipherSuitePlugin\KeyExchangeAlgorithmECDHE.cs,GetServerKeys,The following statement contains a magic number: Buffer.BlockCopy(publicKey' 0' serverKeys' 3' publicKey.Length);
Magic Number,BouncyCastleCipherSuitePlugin,KeyExchangeAlgorithmECDHE,C:\repos\juhovh_AaltoTLS\Plugins\BouncyCastleCipherSuitePlugin\KeyExchangeAlgorithmECDHE.cs,ProcessServerKeys,The following statement contains a magic number: if (data.Length < 4)  				throw new ArgumentException("data");
Magic Number,BouncyCastleCipherSuitePlugin,KeyExchangeAlgorithmECDHE,C:\repos\juhovh_AaltoTLS\Plugins\BouncyCastleCipherSuitePlugin\KeyExchangeAlgorithmECDHE.cs,ProcessServerKeys,The following statement contains a magic number: if (data[0] != 3 || data[1] != 0 || data[2] != 23)  				throw new ArgumentException("data");
Magic Number,BouncyCastleCipherSuitePlugin,KeyExchangeAlgorithmECDHE,C:\repos\juhovh_AaltoTLS\Plugins\BouncyCastleCipherSuitePlugin\KeyExchangeAlgorithmECDHE.cs,ProcessServerKeys,The following statement contains a magic number: if (data[0] != 3 || data[1] != 0 || data[2] != 23)  				throw new ArgumentException("data");
Magic Number,BouncyCastleCipherSuitePlugin,KeyExchangeAlgorithmECDHE,C:\repos\juhovh_AaltoTLS\Plugins\BouncyCastleCipherSuitePlugin\KeyExchangeAlgorithmECDHE.cs,ProcessServerKeys,The following statement contains a magic number: if (data[0] != 3 || data[1] != 0 || data[2] != 23)  				throw new ArgumentException("data");
Magic Number,BouncyCastleCipherSuitePlugin,KeyExchangeAlgorithmECDHE,C:\repos\juhovh_AaltoTLS\Plugins\BouncyCastleCipherSuitePlugin\KeyExchangeAlgorithmECDHE.cs,ProcessServerKeys,The following statement contains a magic number: if (data[3] != 65 || data[4] > data.Length-4)  				throw new ArgumentException("data");
Magic Number,BouncyCastleCipherSuitePlugin,KeyExchangeAlgorithmECDHE,C:\repos\juhovh_AaltoTLS\Plugins\BouncyCastleCipherSuitePlugin\KeyExchangeAlgorithmECDHE.cs,ProcessServerKeys,The following statement contains a magic number: if (data[3] != 65 || data[4] > data.Length-4)  				throw new ArgumentException("data");
Magic Number,BouncyCastleCipherSuitePlugin,KeyExchangeAlgorithmECDHE,C:\repos\juhovh_AaltoTLS\Plugins\BouncyCastleCipherSuitePlugin\KeyExchangeAlgorithmECDHE.cs,ProcessServerKeys,The following statement contains a magic number: if (data[3] != 65 || data[4] > data.Length-4)  				throw new ArgumentException("data");
Magic Number,BouncyCastleCipherSuitePlugin,KeyExchangeAlgorithmECDHE,C:\repos\juhovh_AaltoTLS\Plugins\BouncyCastleCipherSuitePlugin\KeyExchangeAlgorithmECDHE.cs,ProcessServerKeys,The following statement contains a magic number: if (data[3] != 65 || data[4] > data.Length-4)  				throw new ArgumentException("data");
Magic Number,BouncyCastleCipherSuitePlugin,KeyExchangeAlgorithmECDHE,C:\repos\juhovh_AaltoTLS\Plugins\BouncyCastleCipherSuitePlugin\KeyExchangeAlgorithmECDHE.cs,ProcessServerKeys,The following statement contains a magic number: byte[] ecPointData = new byte[data[3]];
Magic Number,BouncyCastleCipherSuitePlugin,KeyExchangeAlgorithmECDHE,C:\repos\juhovh_AaltoTLS\Plugins\BouncyCastleCipherSuitePlugin\KeyExchangeAlgorithmECDHE.cs,ProcessServerKeys,The following statement contains a magic number: Buffer.BlockCopy(data' 4' ecPointData' 0' ecPointData.Length);
Magic Number,BouncyCastleCipherSuitePlugin,KeyExchangeAlgorithmECDHE,C:\repos\juhovh_AaltoTLS\Plugins\BouncyCastleCipherSuitePlugin\KeyExchangeAlgorithmECDHE.cs,ProcessServerKeys,The following statement contains a magic number: _preMasterSecret = BigIntegerToByteArray(agreement.CalculateAgreement(theirPublicKey)' 32);
Magic Number,BouncyCastleCipherSuitePlugin,KeyExchangeAlgorithmECDHE,C:\repos\juhovh_AaltoTLS\Plugins\BouncyCastleCipherSuitePlugin\KeyExchangeAlgorithmECDHE.cs,ProcessServerKeys,The following statement contains a magic number: byte[] signature = new byte[data.Length-4-data[3]];
Magic Number,BouncyCastleCipherSuitePlugin,KeyExchangeAlgorithmECDHE,C:\repos\juhovh_AaltoTLS\Plugins\BouncyCastleCipherSuitePlugin\KeyExchangeAlgorithmECDHE.cs,ProcessServerKeys,The following statement contains a magic number: byte[] signature = new byte[data.Length-4-data[3]];
Magic Number,BouncyCastleCipherSuitePlugin,KeyExchangeAlgorithmECDHE,C:\repos\juhovh_AaltoTLS\Plugins\BouncyCastleCipherSuitePlugin\KeyExchangeAlgorithmECDHE.cs,ProcessServerKeys,The following statement contains a magic number: Buffer.BlockCopy(data' 4+data[3]' signature' 0' signature.Length);
Magic Number,BouncyCastleCipherSuitePlugin,KeyExchangeAlgorithmECDHE,C:\repos\juhovh_AaltoTLS\Plugins\BouncyCastleCipherSuitePlugin\KeyExchangeAlgorithmECDHE.cs,ProcessServerKeys,The following statement contains a magic number: Buffer.BlockCopy(data' 4+data[3]' signature' 0' signature.Length);
Magic Number,BouncyCastleCipherSuitePlugin,KeyExchangeAlgorithmECDHE,C:\repos\juhovh_AaltoTLS\Plugins\BouncyCastleCipherSuitePlugin\KeyExchangeAlgorithmECDHE.cs,ProcessClientKeys,The following statement contains a magic number: _preMasterSecret = BigIntegerToByteArray(agreement.CalculateAgreement(theirPublicKey)' 32);
Magic Number,BouncyCastleCipherSuitePlugin,KeyExchangeAlgorithmECDHE,C:\repos\juhovh_AaltoTLS\Plugins\BouncyCastleCipherSuitePlugin\KeyExchangeAlgorithmECDHE.cs,GetMasterSecret,The following statement contains a magic number: return prf.CreateDeriveBytes(_preMasterSecret' "master secret"' seed).GetBytes(48);
Magic Number,BouncyCastleCipherSuitePlugin,SignatureAlgorithmECDSA,C:\repos\juhovh_AaltoTLS\Plugins\BouncyCastleCipherSuitePlugin\SignatureAlgorithmECDSA.cs,SupportsHashAlgorithmType,The following statement contains a magic number: switch (hashAlgorithm) {  			case 1: // HashAlgorithm.md5  			case 2: // HashAlgorithm.sha1  			case 4: // HashAlgorithm.sha256  			case 5: // HashAlgorithm.sha384  			case 6: // HashAlgorithm.sha512  				return true;  			default:  				return false;  			}
Magic Number,BouncyCastleCipherSuitePlugin,SignatureAlgorithmECDSA,C:\repos\juhovh_AaltoTLS\Plugins\BouncyCastleCipherSuitePlugin\SignatureAlgorithmECDSA.cs,SupportsHashAlgorithmType,The following statement contains a magic number: switch (hashAlgorithm) {  			case 1: // HashAlgorithm.md5  			case 2: // HashAlgorithm.sha1  			case 4: // HashAlgorithm.sha256  			case 5: // HashAlgorithm.sha384  			case 6: // HashAlgorithm.sha512  				return true;  			default:  				return false;  			}
Magic Number,BouncyCastleCipherSuitePlugin,SignatureAlgorithmECDSA,C:\repos\juhovh_AaltoTLS\Plugins\BouncyCastleCipherSuitePlugin\SignatureAlgorithmECDSA.cs,SupportsHashAlgorithmType,The following statement contains a magic number: switch (hashAlgorithm) {  			case 1: // HashAlgorithm.md5  			case 2: // HashAlgorithm.sha1  			case 4: // HashAlgorithm.sha256  			case 5: // HashAlgorithm.sha384  			case 6: // HashAlgorithm.sha512  				return true;  			default:  				return false;  			}
Magic Number,BouncyCastleCipherSuitePlugin,SignatureAlgorithmECDSA,C:\repos\juhovh_AaltoTLS\Plugins\BouncyCastleCipherSuitePlugin\SignatureAlgorithmECDSA.cs,SupportsHashAlgorithmType,The following statement contains a magic number: switch (hashAlgorithm) {  			case 1: // HashAlgorithm.md5  			case 2: // HashAlgorithm.sha1  			case 4: // HashAlgorithm.sha256  			case 5: // HashAlgorithm.sha384  			case 6: // HashAlgorithm.sha512  				return true;  			default:  				return false;  			}
Magic Number,BouncyCastleCipherSuitePlugin,SignatureAlgorithmECDSA,C:\repos\juhovh_AaltoTLS\Plugins\BouncyCastleCipherSuitePlugin\SignatureAlgorithmECDSA.cs,DER2OID,The following statement contains a magic number: try {  				if (oid[0] != 0x06 || oid[1] >= 128 || oid[1] != oid.Length-2) {  					return null;  				}  				  				byte firstByte = oid[2];  				string ret = (firstByte / 40) + "." + (firstByte % 40) + ".";  				for (int i=3; i<oid.Length; i++) {  					if (oid[i] < 128) {  						ret += (int) oid[i];  					} else if (oid[i] >= 128 && oid[i+1] < 128) {  						ret += (int) (((oid[i] & 0x7f) << 7) | oid[i+1]);  						i++;  					} else {  						return null;  					}  					  					if (i != oid.Length-1) {  						ret += ".";  					}  				}  				return ret;  			} catch (Exception) {  				return null;  			}
Magic Number,BouncyCastleCipherSuitePlugin,SignatureAlgorithmECDSA,C:\repos\juhovh_AaltoTLS\Plugins\BouncyCastleCipherSuitePlugin\SignatureAlgorithmECDSA.cs,DER2OID,The following statement contains a magic number: try {  				if (oid[0] != 0x06 || oid[1] >= 128 || oid[1] != oid.Length-2) {  					return null;  				}  				  				byte firstByte = oid[2];  				string ret = (firstByte / 40) + "." + (firstByte % 40) + ".";  				for (int i=3; i<oid.Length; i++) {  					if (oid[i] < 128) {  						ret += (int) oid[i];  					} else if (oid[i] >= 128 && oid[i+1] < 128) {  						ret += (int) (((oid[i] & 0x7f) << 7) | oid[i+1]);  						i++;  					} else {  						return null;  					}  					  					if (i != oid.Length-1) {  						ret += ".";  					}  				}  				return ret;  			} catch (Exception) {  				return null;  			}
Magic Number,BouncyCastleCipherSuitePlugin,SignatureAlgorithmECDSA,C:\repos\juhovh_AaltoTLS\Plugins\BouncyCastleCipherSuitePlugin\SignatureAlgorithmECDSA.cs,DER2OID,The following statement contains a magic number: try {  				if (oid[0] != 0x06 || oid[1] >= 128 || oid[1] != oid.Length-2) {  					return null;  				}  				  				byte firstByte = oid[2];  				string ret = (firstByte / 40) + "." + (firstByte % 40) + ".";  				for (int i=3; i<oid.Length; i++) {  					if (oid[i] < 128) {  						ret += (int) oid[i];  					} else if (oid[i] >= 128 && oid[i+1] < 128) {  						ret += (int) (((oid[i] & 0x7f) << 7) | oid[i+1]);  						i++;  					} else {  						return null;  					}  					  					if (i != oid.Length-1) {  						ret += ".";  					}  				}  				return ret;  			} catch (Exception) {  				return null;  			}
Magic Number,BouncyCastleCipherSuitePlugin,SignatureAlgorithmECDSA,C:\repos\juhovh_AaltoTLS\Plugins\BouncyCastleCipherSuitePlugin\SignatureAlgorithmECDSA.cs,DER2OID,The following statement contains a magic number: try {  				if (oid[0] != 0x06 || oid[1] >= 128 || oid[1] != oid.Length-2) {  					return null;  				}  				  				byte firstByte = oid[2];  				string ret = (firstByte / 40) + "." + (firstByte % 40) + ".";  				for (int i=3; i<oid.Length; i++) {  					if (oid[i] < 128) {  						ret += (int) oid[i];  					} else if (oid[i] >= 128 && oid[i+1] < 128) {  						ret += (int) (((oid[i] & 0x7f) << 7) | oid[i+1]);  						i++;  					} else {  						return null;  					}  					  					if (i != oid.Length-1) {  						ret += ".";  					}  				}  				return ret;  			} catch (Exception) {  				return null;  			}
Magic Number,BouncyCastleCipherSuitePlugin,SignatureAlgorithmECDSA,C:\repos\juhovh_AaltoTLS\Plugins\BouncyCastleCipherSuitePlugin\SignatureAlgorithmECDSA.cs,DER2OID,The following statement contains a magic number: try {  				if (oid[0] != 0x06 || oid[1] >= 128 || oid[1] != oid.Length-2) {  					return null;  				}  				  				byte firstByte = oid[2];  				string ret = (firstByte / 40) + "." + (firstByte % 40) + ".";  				for (int i=3; i<oid.Length; i++) {  					if (oid[i] < 128) {  						ret += (int) oid[i];  					} else if (oid[i] >= 128 && oid[i+1] < 128) {  						ret += (int) (((oid[i] & 0x7f) << 7) | oid[i+1]);  						i++;  					} else {  						return null;  					}  					  					if (i != oid.Length-1) {  						ret += ".";  					}  				}  				return ret;  			} catch (Exception) {  				return null;  			}
Magic Number,BouncyCastleCipherSuitePlugin,SignatureAlgorithmECDSA,C:\repos\juhovh_AaltoTLS\Plugins\BouncyCastleCipherSuitePlugin\SignatureAlgorithmECDSA.cs,DER2OID,The following statement contains a magic number: try {  				if (oid[0] != 0x06 || oid[1] >= 128 || oid[1] != oid.Length-2) {  					return null;  				}  				  				byte firstByte = oid[2];  				string ret = (firstByte / 40) + "." + (firstByte % 40) + ".";  				for (int i=3; i<oid.Length; i++) {  					if (oid[i] < 128) {  						ret += (int) oid[i];  					} else if (oid[i] >= 128 && oid[i+1] < 128) {  						ret += (int) (((oid[i] & 0x7f) << 7) | oid[i+1]);  						i++;  					} else {  						return null;  					}  					  					if (i != oid.Length-1) {  						ret += ".";  					}  				}  				return ret;  			} catch (Exception) {  				return null;  			}
Magic Number,BouncyCastleCipherSuitePlugin,SignatureAlgorithmECDSA,C:\repos\juhovh_AaltoTLS\Plugins\BouncyCastleCipherSuitePlugin\SignatureAlgorithmECDSA.cs,DER2OID,The following statement contains a magic number: try {  				if (oid[0] != 0x06 || oid[1] >= 128 || oid[1] != oid.Length-2) {  					return null;  				}  				  				byte firstByte = oid[2];  				string ret = (firstByte / 40) + "." + (firstByte % 40) + ".";  				for (int i=3; i<oid.Length; i++) {  					if (oid[i] < 128) {  						ret += (int) oid[i];  					} else if (oid[i] >= 128 && oid[i+1] < 128) {  						ret += (int) (((oid[i] & 0x7f) << 7) | oid[i+1]);  						i++;  					} else {  						return null;  					}  					  					if (i != oid.Length-1) {  						ret += ".";  					}  				}  				return ret;  			} catch (Exception) {  				return null;  			}
Magic Number,BouncyCastleCipherSuitePlugin,SignatureAlgorithmECDSA,C:\repos\juhovh_AaltoTLS\Plugins\BouncyCastleCipherSuitePlugin\SignatureAlgorithmECDSA.cs,DER2OID,The following statement contains a magic number: try {  				if (oid[0] != 0x06 || oid[1] >= 128 || oid[1] != oid.Length-2) {  					return null;  				}  				  				byte firstByte = oid[2];  				string ret = (firstByte / 40) + "." + (firstByte % 40) + ".";  				for (int i=3; i<oid.Length; i++) {  					if (oid[i] < 128) {  						ret += (int) oid[i];  					} else if (oid[i] >= 128 && oid[i+1] < 128) {  						ret += (int) (((oid[i] & 0x7f) << 7) | oid[i+1]);  						i++;  					} else {  						return null;  					}  					  					if (i != oid.Length-1) {  						ret += ".";  					}  				}  				return ret;  			} catch (Exception) {  				return null;  			}
Magic Number,BouncyCastleCipherSuitePlugin,SignatureAlgorithmECDSA,C:\repos\juhovh_AaltoTLS\Plugins\BouncyCastleCipherSuitePlugin\SignatureAlgorithmECDSA.cs,DER2OID,The following statement contains a magic number: try {  				if (oid[0] != 0x06 || oid[1] >= 128 || oid[1] != oid.Length-2) {  					return null;  				}  				  				byte firstByte = oid[2];  				string ret = (firstByte / 40) + "." + (firstByte % 40) + ".";  				for (int i=3; i<oid.Length; i++) {  					if (oid[i] < 128) {  						ret += (int) oid[i];  					} else if (oid[i] >= 128 && oid[i+1] < 128) {  						ret += (int) (((oid[i] & 0x7f) << 7) | oid[i+1]);  						i++;  					} else {  						return null;  					}  					  					if (i != oid.Length-1) {  						ret += ".";  					}  				}  				return ret;  			} catch (Exception) {  				return null;  			}
Magic Number,BouncyCastleCipherSuitePlugin,SignatureAlgorithmECDSA,C:\repos\juhovh_AaltoTLS\Plugins\BouncyCastleCipherSuitePlugin\SignatureAlgorithmECDSA.cs,DER2OID,The following statement contains a magic number: try {  				if (oid[0] != 0x06 || oid[1] >= 128 || oid[1] != oid.Length-2) {  					return null;  				}  				  				byte firstByte = oid[2];  				string ret = (firstByte / 40) + "." + (firstByte % 40) + ".";  				for (int i=3; i<oid.Length; i++) {  					if (oid[i] < 128) {  						ret += (int) oid[i];  					} else if (oid[i] >= 128 && oid[i+1] < 128) {  						ret += (int) (((oid[i] & 0x7f) << 7) | oid[i+1]);  						i++;  					} else {  						return null;  					}  					  					if (i != oid.Length-1) {  						ret += ".";  					}  				}  				return ret;  			} catch (Exception) {  				return null;  			}
Magic Number,BouncyCastleCipherSuitePlugin,SignatureAlgorithmECDSA,C:\repos\juhovh_AaltoTLS\Plugins\BouncyCastleCipherSuitePlugin\SignatureAlgorithmECDSA.cs,DEREncodeSignature,The following statement contains a magic number: if (signature.Length > 65526 || (signature.Length%2) != 0) {  				throw new Exception("Invalid signature length");  			}
Magic Number,BouncyCastleCipherSuitePlugin,SignatureAlgorithmECDSA,C:\repos\juhovh_AaltoTLS\Plugins\BouncyCastleCipherSuitePlugin\SignatureAlgorithmECDSA.cs,DEREncodeSignature,The following statement contains a magic number: if (signature.Length > 65526 || (signature.Length%2) != 0) {  				throw new Exception("Invalid signature length");  			}
Magic Number,BouncyCastleCipherSuitePlugin,SignatureAlgorithmECDSA,C:\repos\juhovh_AaltoTLS\Plugins\BouncyCastleCipherSuitePlugin\SignatureAlgorithmECDSA.cs,DEREncodeSignature,The following statement contains a magic number: int vectorLength = (signature.Length/2 < 128) ? 2+(signature.Length/2) :  			                   (signature.Length/2 < 256) ? 3+(signature.Length/2) :  			                   4+(signature.Length/2);
Magic Number,BouncyCastleCipherSuitePlugin,SignatureAlgorithmECDSA,C:\repos\juhovh_AaltoTLS\Plugins\BouncyCastleCipherSuitePlugin\SignatureAlgorithmECDSA.cs,DEREncodeSignature,The following statement contains a magic number: int vectorLength = (signature.Length/2 < 128) ? 2+(signature.Length/2) :  			                   (signature.Length/2 < 256) ? 3+(signature.Length/2) :  			                   4+(signature.Length/2);
Magic Number,BouncyCastleCipherSuitePlugin,SignatureAlgorithmECDSA,C:\repos\juhovh_AaltoTLS\Plugins\BouncyCastleCipherSuitePlugin\SignatureAlgorithmECDSA.cs,DEREncodeSignature,The following statement contains a magic number: int vectorLength = (signature.Length/2 < 128) ? 2+(signature.Length/2) :  			                   (signature.Length/2 < 256) ? 3+(signature.Length/2) :  			                   4+(signature.Length/2);
Magic Number,BouncyCastleCipherSuitePlugin,SignatureAlgorithmECDSA,C:\repos\juhovh_AaltoTLS\Plugins\BouncyCastleCipherSuitePlugin\SignatureAlgorithmECDSA.cs,DEREncodeSignature,The following statement contains a magic number: int vectorLength = (signature.Length/2 < 128) ? 2+(signature.Length/2) :  			                   (signature.Length/2 < 256) ? 3+(signature.Length/2) :  			                   4+(signature.Length/2);
Magic Number,BouncyCastleCipherSuitePlugin,SignatureAlgorithmECDSA,C:\repos\juhovh_AaltoTLS\Plugins\BouncyCastleCipherSuitePlugin\SignatureAlgorithmECDSA.cs,DEREncodeSignature,The following statement contains a magic number: int vectorLength = (signature.Length/2 < 128) ? 2+(signature.Length/2) :  			                   (signature.Length/2 < 256) ? 3+(signature.Length/2) :  			                   4+(signature.Length/2);
Magic Number,BouncyCastleCipherSuitePlugin,SignatureAlgorithmECDSA,C:\repos\juhovh_AaltoTLS\Plugins\BouncyCastleCipherSuitePlugin\SignatureAlgorithmECDSA.cs,DEREncodeSignature,The following statement contains a magic number: int vectorLength = (signature.Length/2 < 128) ? 2+(signature.Length/2) :  			                   (signature.Length/2 < 256) ? 3+(signature.Length/2) :  			                   4+(signature.Length/2);
Magic Number,BouncyCastleCipherSuitePlugin,SignatureAlgorithmECDSA,C:\repos\juhovh_AaltoTLS\Plugins\BouncyCastleCipherSuitePlugin\SignatureAlgorithmECDSA.cs,DEREncodeSignature,The following statement contains a magic number: int vectorLength = (signature.Length/2 < 128) ? 2+(signature.Length/2) :  			                   (signature.Length/2 < 256) ? 3+(signature.Length/2) :  			                   4+(signature.Length/2);
Magic Number,BouncyCastleCipherSuitePlugin,SignatureAlgorithmECDSA,C:\repos\juhovh_AaltoTLS\Plugins\BouncyCastleCipherSuitePlugin\SignatureAlgorithmECDSA.cs,DEREncodeSignature,The following statement contains a magic number: int vectorLength = (signature.Length/2 < 128) ? 2+(signature.Length/2) :  			                   (signature.Length/2 < 256) ? 3+(signature.Length/2) :  			                   4+(signature.Length/2);
Magic Number,BouncyCastleCipherSuitePlugin,SignatureAlgorithmECDSA,C:\repos\juhovh_AaltoTLS\Plugins\BouncyCastleCipherSuitePlugin\SignatureAlgorithmECDSA.cs,DEREncodeSignature,The following statement contains a magic number: int vectorLength = (signature.Length/2 < 128) ? 2+(signature.Length/2) :  			                   (signature.Length/2 < 256) ? 3+(signature.Length/2) :  			                   4+(signature.Length/2);
Magic Number,BouncyCastleCipherSuitePlugin,SignatureAlgorithmECDSA,C:\repos\juhovh_AaltoTLS\Plugins\BouncyCastleCipherSuitePlugin\SignatureAlgorithmECDSA.cs,DEREncodeSignature,The following statement contains a magic number: int vectorLength = (signature.Length/2 < 128) ? 2+(signature.Length/2) :  			                   (signature.Length/2 < 256) ? 3+(signature.Length/2) :  			                   4+(signature.Length/2);
Magic Number,BouncyCastleCipherSuitePlugin,SignatureAlgorithmECDSA,C:\repos\juhovh_AaltoTLS\Plugins\BouncyCastleCipherSuitePlugin\SignatureAlgorithmECDSA.cs,DEREncodeSignature,The following statement contains a magic number: byte[] encoded = new byte[2*vectorLength];
Magic Number,BouncyCastleCipherSuitePlugin,SignatureAlgorithmECDSA,C:\repos\juhovh_AaltoTLS\Plugins\BouncyCastleCipherSuitePlugin\SignatureAlgorithmECDSA.cs,DEREncodeSignature,The following statement contains a magic number: DEREncodeVector(signature' 0' signature.Length/2' encoded' 1);
Magic Number,BouncyCastleCipherSuitePlugin,SignatureAlgorithmECDSA,C:\repos\juhovh_AaltoTLS\Plugins\BouncyCastleCipherSuitePlugin\SignatureAlgorithmECDSA.cs,DEREncodeSignature,The following statement contains a magic number: DEREncodeVector(signature' signature.Length/2' signature.Length/2' encoded' vectorLength+1);
Magic Number,BouncyCastleCipherSuitePlugin,SignatureAlgorithmECDSA,C:\repos\juhovh_AaltoTLS\Plugins\BouncyCastleCipherSuitePlugin\SignatureAlgorithmECDSA.cs,DEREncodeSignature,The following statement contains a magic number: DEREncodeVector(signature' signature.Length/2' signature.Length/2' encoded' vectorLength+1);
Magic Number,BouncyCastleCipherSuitePlugin,SignatureAlgorithmECDSA,C:\repos\juhovh_AaltoTLS\Plugins\BouncyCastleCipherSuitePlugin\SignatureAlgorithmECDSA.cs,DEREncodeSignature,The following statement contains a magic number: int retLength = (encoded.Length < 128) ? 2+encoded.Length :  			                (encoded.Length < 256) ? 3+encoded.Length :  			                4+encoded.Length;
Magic Number,BouncyCastleCipherSuitePlugin,SignatureAlgorithmECDSA,C:\repos\juhovh_AaltoTLS\Plugins\BouncyCastleCipherSuitePlugin\SignatureAlgorithmECDSA.cs,DEREncodeSignature,The following statement contains a magic number: int retLength = (encoded.Length < 128) ? 2+encoded.Length :  			                (encoded.Length < 256) ? 3+encoded.Length :  			                4+encoded.Length;
Magic Number,BouncyCastleCipherSuitePlugin,SignatureAlgorithmECDSA,C:\repos\juhovh_AaltoTLS\Plugins\BouncyCastleCipherSuitePlugin\SignatureAlgorithmECDSA.cs,DEREncodeSignature,The following statement contains a magic number: int retLength = (encoded.Length < 128) ? 2+encoded.Length :  			                (encoded.Length < 256) ? 3+encoded.Length :  			                4+encoded.Length;
Magic Number,BouncyCastleCipherSuitePlugin,SignatureAlgorithmECDSA,C:\repos\juhovh_AaltoTLS\Plugins\BouncyCastleCipherSuitePlugin\SignatureAlgorithmECDSA.cs,DEREncodeSignature,The following statement contains a magic number: int retLength = (encoded.Length < 128) ? 2+encoded.Length :  			                (encoded.Length < 256) ? 3+encoded.Length :  			                4+encoded.Length;
Magic Number,BouncyCastleCipherSuitePlugin,SignatureAlgorithmECDSA,C:\repos\juhovh_AaltoTLS\Plugins\BouncyCastleCipherSuitePlugin\SignatureAlgorithmECDSA.cs,DEREncodeSignature,The following statement contains a magic number: int retLength = (encoded.Length < 128) ? 2+encoded.Length :  			                (encoded.Length < 256) ? 3+encoded.Length :  			                4+encoded.Length;
Magic Number,BouncyCastleCipherSuitePlugin,SignatureAlgorithmECDSA,C:\repos\juhovh_AaltoTLS\Plugins\BouncyCastleCipherSuitePlugin\SignatureAlgorithmECDSA.cs,DERDecodeSignature,The following statement contains a magic number: if (data.Length > 65538 || data[0] != 0x30) {  				throw new Exception("Invalid signature");  			}
Magic Number,BouncyCastleCipherSuitePlugin,SignatureAlgorithmECDSA,C:\repos\juhovh_AaltoTLS\Plugins\BouncyCastleCipherSuitePlugin\SignatureAlgorithmECDSA.cs,DEREncodeVector,The following statement contains a magic number: if (length < 128) {  				output[idx2++] = (byte) length;  			} else if (length < 256) {  				output[idx2++] = 0x81;  				output[idx2++] = (byte) length;  			} else {  				output[idx2++] = 0x82;  				output[idx2++] = (byte) (length >> 8);  				output[idx2++] = (byte) (length);  			}
Magic Number,BouncyCastleCipherSuitePlugin,SignatureAlgorithmECDSA,C:\repos\juhovh_AaltoTLS\Plugins\BouncyCastleCipherSuitePlugin\SignatureAlgorithmECDSA.cs,DEREncodeVector,The following statement contains a magic number: if (length < 128) {  				output[idx2++] = (byte) length;  			} else if (length < 256) {  				output[idx2++] = 0x81;  				output[idx2++] = (byte) length;  			} else {  				output[idx2++] = 0x82;  				output[idx2++] = (byte) (length >> 8);  				output[idx2++] = (byte) (length);  			}
Magic Number,BouncyCastleCipherSuitePlugin,SignatureAlgorithmECDSA,C:\repos\juhovh_AaltoTLS\Plugins\BouncyCastleCipherSuitePlugin\SignatureAlgorithmECDSA.cs,DEREncodeVector,The following statement contains a magic number: if (length < 128) {  				output[idx2++] = (byte) length;  			} else if (length < 256) {  				output[idx2++] = 0x81;  				output[idx2++] = (byte) length;  			} else {  				output[idx2++] = 0x82;  				output[idx2++] = (byte) (length >> 8);  				output[idx2++] = (byte) (length);  			}
Magic Number,BouncyCastleCipherSuitePlugin,SignatureAlgorithmECDSA,C:\repos\juhovh_AaltoTLS\Plugins\BouncyCastleCipherSuitePlugin\SignatureAlgorithmECDSA.cs,DERDecodeVector,The following statement contains a magic number: if (input[idx] < 128) {  				length = input[idx];  				consumed = 1+length;  				idx += 1;  			} else if (input[idx] == 0x81) {  				length = input[idx+1];  				consumed = 2+length;  				idx += 2;  			} else if (input[idx] == 0x82) {  				length = (input[idx+1] << 8) | input[idx+2];  				consumed = 3+length;  				idx += 3;  			} else {  				throw new Exception("Unsupported DER vector length");  			}
Magic Number,BouncyCastleCipherSuitePlugin,SignatureAlgorithmECDSA,C:\repos\juhovh_AaltoTLS\Plugins\BouncyCastleCipherSuitePlugin\SignatureAlgorithmECDSA.cs,DERDecodeVector,The following statement contains a magic number: if (input[idx] < 128) {  				length = input[idx];  				consumed = 1+length;  				idx += 1;  			} else if (input[idx] == 0x81) {  				length = input[idx+1];  				consumed = 2+length;  				idx += 2;  			} else if (input[idx] == 0x82) {  				length = (input[idx+1] << 8) | input[idx+2];  				consumed = 3+length;  				idx += 3;  			} else {  				throw new Exception("Unsupported DER vector length");  			}
Magic Number,BouncyCastleCipherSuitePlugin,SignatureAlgorithmECDSA,C:\repos\juhovh_AaltoTLS\Plugins\BouncyCastleCipherSuitePlugin\SignatureAlgorithmECDSA.cs,DERDecodeVector,The following statement contains a magic number: if (input[idx] < 128) {  				length = input[idx];  				consumed = 1+length;  				idx += 1;  			} else if (input[idx] == 0x81) {  				length = input[idx+1];  				consumed = 2+length;  				idx += 2;  			} else if (input[idx] == 0x82) {  				length = (input[idx+1] << 8) | input[idx+2];  				consumed = 3+length;  				idx += 3;  			} else {  				throw new Exception("Unsupported DER vector length");  			}
Magic Number,BouncyCastleCipherSuitePlugin,SignatureAlgorithmECDSA,C:\repos\juhovh_AaltoTLS\Plugins\BouncyCastleCipherSuitePlugin\SignatureAlgorithmECDSA.cs,DERDecodeVector,The following statement contains a magic number: if (input[idx] < 128) {  				length = input[idx];  				consumed = 1+length;  				idx += 1;  			} else if (input[idx] == 0x81) {  				length = input[idx+1];  				consumed = 2+length;  				idx += 2;  			} else if (input[idx] == 0x82) {  				length = (input[idx+1] << 8) | input[idx+2];  				consumed = 3+length;  				idx += 3;  			} else {  				throw new Exception("Unsupported DER vector length");  			}
Magic Number,BouncyCastleCipherSuitePlugin,SignatureAlgorithmECDSA,C:\repos\juhovh_AaltoTLS\Plugins\BouncyCastleCipherSuitePlugin\SignatureAlgorithmECDSA.cs,DERDecodeVector,The following statement contains a magic number: if (input[idx] < 128) {  				length = input[idx];  				consumed = 1+length;  				idx += 1;  			} else if (input[idx] == 0x81) {  				length = input[idx+1];  				consumed = 2+length;  				idx += 2;  			} else if (input[idx] == 0x82) {  				length = (input[idx+1] << 8) | input[idx+2];  				consumed = 3+length;  				idx += 3;  			} else {  				throw new Exception("Unsupported DER vector length");  			}
Magic Number,BouncyCastleCipherSuitePlugin,SignatureAlgorithmECDSA,C:\repos\juhovh_AaltoTLS\Plugins\BouncyCastleCipherSuitePlugin\SignatureAlgorithmECDSA.cs,DERDecodeVector,The following statement contains a magic number: if (input[idx] < 128) {  				length = input[idx];  				consumed = 1+length;  				idx += 1;  			} else if (input[idx] == 0x81) {  				length = input[idx+1];  				consumed = 2+length;  				idx += 2;  			} else if (input[idx] == 0x82) {  				length = (input[idx+1] << 8) | input[idx+2];  				consumed = 3+length;  				idx += 3;  			} else {  				throw new Exception("Unsupported DER vector length");  			}
Magic Number,BouncyCastleCipherSuitePlugin,SignatureAlgorithmECDSA,C:\repos\juhovh_AaltoTLS\Plugins\BouncyCastleCipherSuitePlugin\SignatureAlgorithmECDSA.cs,DERDecodeVector,The following statement contains a magic number: if (input[idx] < 128) {  				length = input[idx];  				consumed = 1+length;  				idx += 1;  			} else if (input[idx] == 0x81) {  				length = input[idx+1];  				consumed = 2+length;  				idx += 2;  			} else if (input[idx] == 0x82) {  				length = (input[idx+1] << 8) | input[idx+2];  				consumed = 3+length;  				idx += 3;  			} else {  				throw new Exception("Unsupported DER vector length");  			}
