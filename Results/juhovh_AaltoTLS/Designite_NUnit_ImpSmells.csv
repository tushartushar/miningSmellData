Implementation smell,Namespace,Class,File,Method,Description
Magic Number,AaltoTLS.RecordLayer,RecordHandlerTest,C:\repos\juhovh_AaltoTLS\NUnit\RecordHandlerTest.cs,GetRecord,The following statement contains a magic number: Buffer.BlockCopy(data' 5' record.Fragment' 0' record.Fragment.Length);
Magic Number,AaltoTLS.RecordLayer,RecordHandlerTest,C:\repos\juhovh_AaltoTLS\NUnit\RecordHandlerTest.cs,PaddingTest,The following statement contains a magic number: ConnectionState connectionState = new ConnectionState(new byte[32]' new byte[32]' new byte[48]);
Magic Number,AaltoTLS.RecordLayer,RecordHandlerTest,C:\repos\juhovh_AaltoTLS\NUnit\RecordHandlerTest.cs,PaddingTest,The following statement contains a magic number: ConnectionState connectionState = new ConnectionState(new byte[32]' new byte[32]' new byte[48]);
Magic Number,AaltoTLS.RecordLayer,RecordHandlerTest,C:\repos\juhovh_AaltoTLS\NUnit\RecordHandlerTest.cs,PaddingTest,The following statement contains a magic number: ConnectionState connectionState = new ConnectionState(new byte[32]' new byte[32]' new byte[48]);
Magic Number,AaltoTLS.RecordLayer,RecordHandlerTest,C:\repos\juhovh_AaltoTLS\NUnit\RecordHandlerTest.cs,PaddingTest,The following statement contains a magic number: Record record = new Record(22' ProtocolVersion.SSL3_0);
Magic Number,AaltoTLS.RecordLayer,RecordHandlerTest,C:\repos\juhovh_AaltoTLS\NUnit\RecordHandlerTest.cs,PaddingTest,The following statement contains a magic number: for (int i=0; i<blockSize*2; i++) {  				byte[] data = new byte[i];  				record.Fragment = (byte[])data.Clone();  				clientHandler.ProcessOutputRecord(record);  				Assert.AreEqual(0' record.Fragment.Length%blockSize);  				serverHandler.ProcessInputRecord(record);  				Assert.AreEqual(data' record.Fragment);  			}
Magic Number,AaltoTLS.RecordLayer,RecordHandlerTest,C:\repos\juhovh_AaltoTLS\NUnit\RecordHandlerTest.cs,PaddingTest,The following statement contains a magic number: record = new Record(22' ProtocolVersion.TLS1_0);
Magic Number,AaltoTLS.RecordLayer,RecordHandlerTest,C:\repos\juhovh_AaltoTLS\NUnit\RecordHandlerTest.cs,PaddingTest,The following statement contains a magic number: for (int i=0; i<blockSize*2; i++) {  				byte[] data = new byte[i];  				record.Fragment = (byte[])data.Clone();  				clientHandler.ProcessOutputRecord(record);  				Assert.AreEqual(0' record.Fragment.Length%blockSize);  				serverHandler.ProcessInputRecord(record);  				Assert.AreEqual(data' record.Fragment);  			}
Magic Number,AaltoTLS.RecordLayer,RecordHandlerTest,C:\repos\juhovh_AaltoTLS\NUnit\RecordHandlerTest.cs,PaddingTest,The following statement contains a magic number: record = new Record(22' ProtocolVersion.TLS1_2);
Magic Number,AaltoTLS.RecordLayer,RecordHandlerTest,C:\repos\juhovh_AaltoTLS\NUnit\RecordHandlerTest.cs,PaddingTest,The following statement contains a magic number: for (int i=0; i<blockSize*2; i++) {  				byte[] data = new byte[i];  				record.Fragment = (byte[])data.Clone();  				clientHandler.ProcessOutputRecord(record);  				Assert.AreEqual(8+data.Length+16' record.Fragment.Length);  				serverHandler.ProcessInputRecord(record);  				Assert.AreEqual(data' record.Fragment);  			}
Magic Number,AaltoTLS.RecordLayer,RecordHandlerTest,C:\repos\juhovh_AaltoTLS\NUnit\RecordHandlerTest.cs,PaddingTest,The following statement contains a magic number: for (int i=0; i<blockSize*2; i++) {  				byte[] data = new byte[i];  				record.Fragment = (byte[])data.Clone();  				clientHandler.ProcessOutputRecord(record);  				Assert.AreEqual(8+data.Length+16' record.Fragment.Length);  				serverHandler.ProcessInputRecord(record);  				Assert.AreEqual(data' record.Fragment);  			}
Magic Number,AaltoTLS.RecordLayer,RecordHandlerTest,C:\repos\juhovh_AaltoTLS\NUnit\RecordHandlerTest.cs,PaddingTest,The following statement contains a magic number: for (int i=0; i<blockSize*2; i++) {  				byte[] data = new byte[i];  				record.Fragment = (byte[])data.Clone();  				clientHandler.ProcessOutputRecord(record);  				Assert.AreEqual(8+data.Length+16' record.Fragment.Length);  				serverHandler.ProcessInputRecord(record);  				Assert.AreEqual(data' record.Fragment);  			}
