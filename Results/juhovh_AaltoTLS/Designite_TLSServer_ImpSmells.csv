Implementation smell,Namespace,Class,File,Method,Description
Long Statement,AaltoTLS,TLSServer,C:\repos\juhovh_AaltoTLS\Samples\TLSServer\TLSServer.cs,Main,The length of the statement  "				securityParameters.CipherSuiteIDs.AddRange(pluginManager.GetSupportedCipherSuiteIDs(securityParameters.MaximumVersion' certs[0]' false)); " is 137.
Empty Catch Block,AaltoTLS,TLSServer,C:\repos\juhovh_AaltoTLS\Samples\TLSServer\TLSServer.cs,Thread,The method has an empty catch block.
Magic Number,AaltoTLS,TLSServer,C:\repos\juhovh_AaltoTLS\Samples\TLSServer\TLSServer.cs,Main,The following statement contains a magic number: if (args.Length < 2) {  				Console.WriteLine("Usage: TLSServer.exe cert.pem key.xml");  				return;  			} else if (args.Length >= 2) {  				X509CertificateCollection certs = new X509CertificateCollection();  				for (int i=0; i<args.Length-1; i++) {  					certs.Add(new X509Certificate(args[i]));  				}  				  				// Get plugin manager for importing the private key  				string path = System.Reflection.Assembly.GetAssembly(typeof(HandshakeSession)).Location;  				string directory = Path.GetDirectoryName(path);  				CipherSuitePluginManager pluginManager = new CipherSuitePluginManager(directory);  				  				// Import the private key into asymmetric algorithm  				byte[] privateKeyData = File.ReadAllBytes(args[args.Length-1]);  				CertificatePrivateKey privateKey = pluginManager.GetPrivateKey(privateKeyData);  				  				securityParameters.AddCertificate(certs' privateKey);  				securityParameters.CipherSuiteIDs.AddRange(pluginManager.GetSupportedCipherSuiteIDs(securityParameters.MaximumVersion' certs[0]' false));  			}
Magic Number,AaltoTLS,TLSServer,C:\repos\juhovh_AaltoTLS\Samples\TLSServer\TLSServer.cs,Main,The following statement contains a magic number: if (args.Length < 2) {  				Console.WriteLine("Usage: TLSServer.exe cert.pem key.xml");  				return;  			} else if (args.Length >= 2) {  				X509CertificateCollection certs = new X509CertificateCollection();  				for (int i=0; i<args.Length-1; i++) {  					certs.Add(new X509Certificate(args[i]));  				}  				  				// Get plugin manager for importing the private key  				string path = System.Reflection.Assembly.GetAssembly(typeof(HandshakeSession)).Location;  				string directory = Path.GetDirectoryName(path);  				CipherSuitePluginManager pluginManager = new CipherSuitePluginManager(directory);  				  				// Import the private key into asymmetric algorithm  				byte[] privateKeyData = File.ReadAllBytes(args[args.Length-1]);  				CertificatePrivateKey privateKey = pluginManager.GetPrivateKey(privateKeyData);  				  				securityParameters.AddCertificate(certs' privateKey);  				securityParameters.CipherSuiteIDs.AddRange(pluginManager.GetSupportedCipherSuiteIDs(securityParameters.MaximumVersion' certs[0]' false));  			}
Magic Number,AaltoTLS,TLSServer,C:\repos\juhovh_AaltoTLS\Samples\TLSServer\TLSServer.cs,Main,The following statement contains a magic number: try {  				TcpListener tcpListener = new TcpListener(IPAddress.Any' 4433);  				tcpListener.Start();    				while (true) {  					TcpClient tcpClient = tcpListener.AcceptTcpClient();  					Console.WriteLine("Accepted client");    					TLSServer server = new TLSServer(tcpClient' securityParameters);  					Thread thread = new Thread(new ThreadStart(server.Thread));  					thread.Start();  				}  			} catch (SocketException) {  				Console.WriteLine("Unable to listen to socket");  				return;  			}
