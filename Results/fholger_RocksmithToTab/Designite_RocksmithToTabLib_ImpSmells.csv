Implementation smell,Namespace,Class,File,Method,Description
Long Method,RocksmithToTabLib,GP5File,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GP5File.cs,WriteBeat,The method has 172 lines of code.
Long Method,RocksmithToTabLib,GpxExporter,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GpxExporter.cs,ExportOrFindBeat,The method has 152 lines of code.
Long Method,RocksmithToTabLib,GpxExporter,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GpxExporter.cs,ExportOrFindNote,The method has 129 lines of code.
Complex Method,RocksmithToTabLib,Converter,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\Converter.cs,CreateChord,Cyclomatic complexity of the method is 14
Complex Method,RocksmithToTabLib,Converter,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\Converter.cs,HandleSustainsAndSilence,Cyclomatic complexity of the method is 9
Complex Method,RocksmithToTabLib,Converter,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\Converter.cs,CalculateNoteDurations,Cyclomatic complexity of the method is 16
Complex Method,RocksmithToTabLib,Converter,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\Converter.cs,SplitImplicitSlides,Cyclomatic complexity of the method is 12
Complex Method,RocksmithToTabLib,Converter,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\Converter.cs,CalculateAndCleanBendOffsets,Cyclomatic complexity of the method is 15
Complex Method,RocksmithToTabLib,GP5File,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GP5File.cs,WriteMasterBars,Cyclomatic complexity of the method is 9
Complex Method,RocksmithToTabLib,GP5File,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GP5File.cs,WriteBeat,Cyclomatic complexity of the method is 42
Complex Method,RocksmithToTabLib,GP5File,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GP5File.cs,WriteChordTemplate,Cyclomatic complexity of the method is 8
Complex Method,RocksmithToTabLib,GP5File,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GP5File.cs,WriteNote,Cyclomatic complexity of the method is 26
Complex Method,RocksmithToTabLib,GpxExporter,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GpxExporter.cs,ExportChordDiagrams,Cyclomatic complexity of the method is 12
Complex Method,RocksmithToTabLib,GpxExporter,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GpxExporter.cs,ExportBars,Cyclomatic complexity of the method is 8
Complex Method,RocksmithToTabLib,GpxExporter,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GpxExporter.cs,ExportOrFindBeat,Cyclomatic complexity of the method is 36
Complex Method,RocksmithToTabLib,GpxExporter,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GpxExporter.cs,ExportOrFindNote,Cyclomatic complexity of the method is 23
Complex Method,RocksmithToTabLib,PSARC,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\PSARC.cs,Read,Cyclomatic complexity of the method is 10
Complex Method,RocksmithToTabLib,PsarcBrowser,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\PsarcBrowser.cs,GetToolkitInfo,Cyclomatic complexity of the method is 9
Complex Method,RocksmithToTabLib,RhythmDetector,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\RhythmDetector.cs,MatchRhythm,Cyclomatic complexity of the method is 8
Complex Method,RocksmithToTabLib,RhythmDetector,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\RhythmDetector.cs,SplitDurations,Cyclomatic complexity of the method is 11
Long Parameter List,RocksmithToTabLib,Converter,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\Converter.cs,CollectNotesForDifficulty,The method has 5 parameters. Parameters: arrangement' bars' chordTemplates' difficultyLevel' numStrings
Long Parameter List,RocksmithToTabLib,GP5File,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GP5File.cs,WriteBeat,The method has 5 parameters. Parameters: chord' trackNumber' numStrings' changeTempo' newTempo
Long Parameter List,RocksmithToTabLib,RhythmDetector,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\RhythmDetector.cs,MatchRhythm,The method has 6 parameters. Parameters: noteEnds' start' end' offset' length' beatDuration
Long Statement,RocksmithToTabLib,Converter,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\Converter.cs,ConvertArrangement,The length of the statement  "            track.DifficultyLevel = CollectNotesForDifficulty(arrangement' track.Bars' track.ChordTemplates' difficultyLevel' out numStrings); " is 130.
Long Statement,RocksmithToTabLib,Converter,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\Converter.cs,SplitImplicitSlides,The length of the statement  "                    var nextChord = (i < bar.Chords.Count - 1) ? bar.Chords[i + 1] : ((nextBar != null) ? nextBar.Chords.FirstOrDefault() : null); " is 126.
Long Statement,RocksmithToTabLib,GP5File,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GP5File.cs,WriteTrack,The length of the statement  "            Byte[] fillData = new Byte[]{ 67' 1' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 100' 0' 0' 0' 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 255' 3' 255' 255' 255' 255' 255' 255' 255' 255' 255' 255' 255' 255' 255' 255' 255 }; " is 199.
Long Statement,RocksmithToTabLib,GpxExporter,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GpxExporter.cs,ExportOrFindNote,The length of the statement  "                gpNote.Tie = new Gpif.Note.TieType() { Destination = link[note.String]' Origin = note.LinkNext && note.Slide != Note.SlideType.ToNext }; " is 136.
Long Statement,RocksmithToTabLib,RhythmDetector,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\RhythmDetector.cs,MatchRhythm,The length of the statement  "            //Console.WriteLine("MatchRhythm(start: {0}' end: {1}' offset: {2}' length: {3}' beatDuration: {4})"' start' end' offset' length' beatDuration); " is 144.
Long Statement,RocksmithToTabLib,RhythmDetector,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\RhythmDetector.cs,SplitDurations,The length of the statement  "                    Console.WriteLine("  Warning: Failed to split note duration {0} properly' splitting in half..."' durations[i].Duration); " is 120.
Complex Conditional,RocksmithToTabLib,Converter,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\Converter.cs,SplitImplicitSlides,The conditional expression  "!note.LinkNext || nextChord == null || !nextChord.Notes.ContainsKey(kvp.Key) ||                                  nextChord.Notes[kvp.Key].Fret != note.SlideTarget"  is complex.
Complex Conditional,RocksmithToTabLib,GP5File,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GP5File.cs,WriteBeat,The conditional expression  "chord.ChordId != -1 && chord.ChordId != prevChordId[trackNumber] &&                  chordTemplates.ContainsKey(chord.ChordId) &&                  chordTemplates[chord.ChordId].Name != string.Empty"  is complex.
Empty Catch Block,RocksmithToTabLib,PsarcBrowser,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\PsarcBrowser.cs,GetSongList,The method has an empty catch block.
Magic Number,RocksmithToTabLib,Converter,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\Converter.cs,ConvertArrangement,The following statement contains a magic number: numStrings = Math.Max(numStrings' 6);
Magic Number,RocksmithToTabLib,Converter,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\Converter.cs,GetTuning,The following statement contains a magic number: int[] tuning = new int[6];
Magic Number,RocksmithToTabLib,Converter,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\Converter.cs,GetChordTemplates,The following statement contains a magic number: j < 6
Magic Number,RocksmithToTabLib,Converter,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\Converter.cs,GetBars,The following statement contains a magic number: currentMeasure.End = currentMeasure.Start + 2;
Magic Number,RocksmithToTabLib,Converter,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\Converter.cs,CreateChord,The following statement contains a magic number: i < 6
Magic Number,RocksmithToTabLib,Converter,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\Converter.cs,CalculateAndCleanBendOffsets,The following statement contains a magic number: bend.Step > 0.05
Magic Number,RocksmithToTabLib,Converter,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\Converter.cs,CalculateAndCleanBendOffsets,The following statement contains a magic number: i > 0 && Math.Abs(bend.RelativePosition - note.BendValues[i - 1].RelativePosition) < 0.005
Magic Number,RocksmithToTabLib,Converter,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\Converter.cs,CalculateAndCleanBendOffsets,The following statement contains a magic number: firstBend.RelativePosition <= 0.005
Magic Number,RocksmithToTabLib,Converter,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\Converter.cs,CalculateAndCleanBendOffsets,The following statement contains a magic number: lastBend.RelativePosition >= 0.995
Magic Number,RocksmithToTabLib,GP5File,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GP5File.cs,WriteHeader,The following statement contains a magic number: i < 30
Magic Number,RocksmithToTabLib,GP5File,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GP5File.cs,WriteLyrics,The following statement contains a magic number: i < 5
Magic Number,RocksmithToTabLib,GP5File,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GP5File.cs,WritePageSetup,The following statement contains a magic number: writer.Write((Int32)210);
Magic Number,RocksmithToTabLib,GP5File,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GP5File.cs,WritePageSetup,The following statement contains a magic number: writer.Write((Int32)297);
Magic Number,RocksmithToTabLib,GP5File,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GP5File.cs,WritePageSetup,The following statement contains a magic number: writer.Write((Int32)10);
Magic Number,RocksmithToTabLib,GP5File,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GP5File.cs,WritePageSetup,The following statement contains a magic number: writer.Write((Int32)10);
Magic Number,RocksmithToTabLib,GP5File,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GP5File.cs,WritePageSetup,The following statement contains a magic number: writer.Write((Int32)15);
Magic Number,RocksmithToTabLib,GP5File,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GP5File.cs,WritePageSetup,The following statement contains a magic number: writer.Write((Int32)10);
Magic Number,RocksmithToTabLib,GP5File,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GP5File.cs,WritePageSetup,The following statement contains a magic number: writer.Write((Int32)100);
Magic Number,RocksmithToTabLib,GP5File,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GP5File.cs,WriteTempo,The following statement contains a magic number: Int32 avgBPM = (score.Tracks.Count > 0) ? (Int32)score.Tracks[0].AverageBeatsPerMinute : 120;
Magic Number,RocksmithToTabLib,GP5File,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GP5File.cs,WriteChannels,The following statement contains a magic number: curChannel == 9
Magic Number,RocksmithToTabLib,GP5File,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GP5File.cs,WriteChannels,The following statement contains a magic number: curChannel == 9
Magic Number,RocksmithToTabLib,GP5File,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GP5File.cs,WriteChannels,The following statement contains a magic number: curChannel >= 15
Magic Number,RocksmithToTabLib,GP5File,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GP5File.cs,WriteChannels,The following statement contains a magic number: i % 16 != 9 && channelTracks.Count != 0
Magic Number,RocksmithToTabLib,GP5File,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GP5File.cs,WriteChannels,The following statement contains a magic number: i % 16 != 9 && channelTracks.Count != 0
Magic Number,RocksmithToTabLib,GP5File,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GP5File.cs,WriteChannels,The following statement contains a magic number: i < 64
Magic Number,RocksmithToTabLib,GP5File,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GP5File.cs,WriteChannel,The following statement contains a magic number: writer.Write((Byte)15);
Magic Number,RocksmithToTabLib,GP5File,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GP5File.cs,WriteChannel,The following statement contains a magic number: writer.Write((Byte)8);
Magic Number,RocksmithToTabLib,GP5File,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GP5File.cs,WriteMusicalDirections,The following statement contains a magic number: i < 38
Magic Number,RocksmithToTabLib,GP5File,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GP5File.cs,WriteMasterBars,The following statement contains a magic number: const Byte KEY_CHANGE = 1 << 6;
Magic Number,RocksmithToTabLib,GP5File,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GP5File.cs,WriteMasterBars,The following statement contains a magic number: int eighthsInDenominator = 8 / timeDenom;
Magic Number,RocksmithToTabLib,GP5File,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GP5File.cs,WriteMasterBars,The following statement contains a magic number: Byte val = (Byte)(total / 4);
Magic Number,RocksmithToTabLib,GP5File,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GP5File.cs,WriteMasterBars,The following statement contains a magic number: Byte missing = (Byte)(total - 4 * val);
Magic Number,RocksmithToTabLib,GP5File,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GP5File.cs,WriteTrack,The following statement contains a magic number: writer.Write((Byte)(8 | flags));
Magic Number,RocksmithToTabLib,GP5File,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GP5File.cs,WriteTrack,The following statement contains a magic number: trackName = trackName.Substring(0' Math.Min(40' trackName.Length));
Magic Number,RocksmithToTabLib,GP5File,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GP5File.cs,WriteTrack,The following statement contains a magic number: i < 40
Magic Number,RocksmithToTabLib,GP5File,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GP5File.cs,WriteTrack,The following statement contains a magic number: int tuningOffset = (track.Instrument == Track.InstrumentType.Bass) ? 12 : 0;
Magic Number,RocksmithToTabLib,GP5File,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GP5File.cs,WriteTrack,The following statement contains a magic number: i < 7
Magic Number,RocksmithToTabLib,GP5File,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GP5File.cs,WriteTrack,The following statement contains a magic number: writer.Write((Int32)24);
Magic Number,RocksmithToTabLib,GP5File,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GP5File.cs,WriteTrack,The following statement contains a magic number: writer.Write((Byte)track.Color[2]);
Magic Number,RocksmithToTabLib,GP5File,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GP5File.cs,WriteTrack,The following statement contains a magic number: Byte[] fillData = new Byte[]{ 67' 1' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 100' 0' 0' 0' 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 255' 3' 255' 255' 255' 255' 255' 255' 255' 255' 255' 255' 255' 255' 255' 255' 255 };
Magic Number,RocksmithToTabLib,GP5File,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GP5File.cs,WriteTrack,The following statement contains a magic number: Byte[] fillData = new Byte[]{ 67' 1' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 100' 0' 0' 0' 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 255' 3' 255' 255' 255' 255' 255' 255' 255' 255' 255' 255' 255' 255' 255' 255' 255 };
Magic Number,RocksmithToTabLib,GP5File,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GP5File.cs,WriteTrack,The following statement contains a magic number: Byte[] fillData = new Byte[]{ 67' 1' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 100' 0' 0' 0' 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 255' 3' 255' 255' 255' 255' 255' 255' 255' 255' 255' 255' 255' 255' 255' 255' 255 };
Magic Number,RocksmithToTabLib,GP5File,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GP5File.cs,WriteTrack,The following statement contains a magic number: Byte[] fillData = new Byte[]{ 67' 1' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 100' 0' 0' 0' 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 255' 3' 255' 255' 255' 255' 255' 255' 255' 255' 255' 255' 255' 255' 255' 255' 255 };
Magic Number,RocksmithToTabLib,GP5File,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GP5File.cs,WriteTrack,The following statement contains a magic number: Byte[] fillData = new Byte[]{ 67' 1' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 100' 0' 0' 0' 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 255' 3' 255' 255' 255' 255' 255' 255' 255' 255' 255' 255' 255' 255' 255' 255' 255 };
Magic Number,RocksmithToTabLib,GP5File,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GP5File.cs,WriteTrack,The following statement contains a magic number: Byte[] fillData = new Byte[]{ 67' 1' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 100' 0' 0' 0' 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 255' 3' 255' 255' 255' 255' 255' 255' 255' 255' 255' 255' 255' 255' 255' 255' 255 };
Magic Number,RocksmithToTabLib,GP5File,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GP5File.cs,WriteTrack,The following statement contains a magic number: Byte[] fillData = new Byte[]{ 67' 1' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 100' 0' 0' 0' 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 255' 3' 255' 255' 255' 255' 255' 255' 255' 255' 255' 255' 255' 255' 255' 255' 255 };
Magic Number,RocksmithToTabLib,GP5File,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GP5File.cs,WriteTrack,The following statement contains a magic number: Byte[] fillData = new Byte[]{ 67' 1' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 100' 0' 0' 0' 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 255' 3' 255' 255' 255' 255' 255' 255' 255' 255' 255' 255' 255' 255' 255' 255' 255 };
Magic Number,RocksmithToTabLib,GP5File,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GP5File.cs,WriteTrack,The following statement contains a magic number: Byte[] fillData = new Byte[]{ 67' 1' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 100' 0' 0' 0' 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 255' 3' 255' 255' 255' 255' 255' 255' 255' 255' 255' 255' 255' 255' 255' 255' 255 };
Magic Number,RocksmithToTabLib,GP5File,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GP5File.cs,WriteTrack,The following statement contains a magic number: Byte[] fillData = new Byte[]{ 67' 1' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 100' 0' 0' 0' 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 255' 3' 255' 255' 255' 255' 255' 255' 255' 255' 255' 255' 255' 255' 255' 255' 255 };
Magic Number,RocksmithToTabLib,GP5File,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GP5File.cs,WriteTrack,The following statement contains a magic number: Byte[] fillData = new Byte[]{ 67' 1' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 100' 0' 0' 0' 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 255' 3' 255' 255' 255' 255' 255' 255' 255' 255' 255' 255' 255' 255' 255' 255' 255 };
Magic Number,RocksmithToTabLib,GP5File,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GP5File.cs,WriteTrack,The following statement contains a magic number: Byte[] fillData = new Byte[]{ 67' 1' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 100' 0' 0' 0' 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 255' 3' 255' 255' 255' 255' 255' 255' 255' 255' 255' 255' 255' 255' 255' 255' 255 };
Magic Number,RocksmithToTabLib,GP5File,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GP5File.cs,WriteTrack,The following statement contains a magic number: Byte[] fillData = new Byte[]{ 67' 1' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 100' 0' 0' 0' 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 255' 3' 255' 255' 255' 255' 255' 255' 255' 255' 255' 255' 255' 255' 255' 255' 255 };
Magic Number,RocksmithToTabLib,GP5File,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GP5File.cs,WriteTrack,The following statement contains a magic number: Byte[] fillData = new Byte[]{ 67' 1' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 100' 0' 0' 0' 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 255' 3' 255' 255' 255' 255' 255' 255' 255' 255' 255' 255' 255' 255' 255' 255' 255 };
Magic Number,RocksmithToTabLib,GP5File,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GP5File.cs,WriteTrack,The following statement contains a magic number: Byte[] fillData = new Byte[]{ 67' 1' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 100' 0' 0' 0' 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 255' 3' 255' 255' 255' 255' 255' 255' 255' 255' 255' 255' 255' 255' 255' 255' 255 };
Magic Number,RocksmithToTabLib,GP5File,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GP5File.cs,WriteTrack,The following statement contains a magic number: Byte[] fillData = new Byte[]{ 67' 1' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 100' 0' 0' 0' 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 255' 3' 255' 255' 255' 255' 255' 255' 255' 255' 255' 255' 255' 255' 255' 255' 255 };
Magic Number,RocksmithToTabLib,GP5File,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GP5File.cs,WriteTrack,The following statement contains a magic number: Byte[] fillData = new Byte[]{ 67' 1' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 100' 0' 0' 0' 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 255' 3' 255' 255' 255' 255' 255' 255' 255' 255' 255' 255' 255' 255' 255' 255' 255 };
Magic Number,RocksmithToTabLib,GP5File,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GP5File.cs,WriteTrack,The following statement contains a magic number: Byte[] fillData = new Byte[]{ 67' 1' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 100' 0' 0' 0' 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 255' 3' 255' 255' 255' 255' 255' 255' 255' 255' 255' 255' 255' 255' 255' 255' 255 };
Magic Number,RocksmithToTabLib,GP5File,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GP5File.cs,WriteTrack,The following statement contains a magic number: Byte[] fillData = new Byte[]{ 67' 1' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 100' 0' 0' 0' 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 255' 3' 255' 255' 255' 255' 255' 255' 255' 255' 255' 255' 255' 255' 255' 255' 255 };
Magic Number,RocksmithToTabLib,GP5File,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GP5File.cs,WriteTrack,The following statement contains a magic number: Byte[] fillData = new Byte[]{ 67' 1' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 100' 0' 0' 0' 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 255' 3' 255' 255' 255' 255' 255' 255' 255' 255' 255' 255' 255' 255' 255' 255' 255 };
Magic Number,RocksmithToTabLib,GP5File,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GP5File.cs,WriteTrack,The following statement contains a magic number: Byte[] fillData = new Byte[]{ 67' 1' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 100' 0' 0' 0' 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 255' 3' 255' 255' 255' 255' 255' 255' 255' 255' 255' 255' 255' 255' 255' 255' 255 };
Magic Number,RocksmithToTabLib,GP5File,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GP5File.cs,WriteTrack,The following statement contains a magic number: Byte[] fillData = new Byte[]{ 67' 1' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 100' 0' 0' 0' 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 255' 3' 255' 255' 255' 255' 255' 255' 255' 255' 255' 255' 255' 255' 255' 255' 255 };
Magic Number,RocksmithToTabLib,GP5File,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GP5File.cs,WriteTrack,The following statement contains a magic number: Byte[] fillData = new Byte[]{ 67' 1' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 100' 0' 0' 0' 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 255' 3' 255' 255' 255' 255' 255' 255' 255' 255' 255' 255' 255' 255' 255' 255' 255 };
Magic Number,RocksmithToTabLib,GP5File,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GP5File.cs,WriteTrack,The following statement contains a magic number: Byte[] fillData = new Byte[]{ 67' 1' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 100' 0' 0' 0' 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 255' 3' 255' 255' 255' 255' 255' 255' 255' 255' 255' 255' 255' 255' 255' 255' 255 };
Magic Number,RocksmithToTabLib,GP5File,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GP5File.cs,WriteTrack,The following statement contains a magic number: Byte[] fillData = new Byte[]{ 67' 1' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 100' 0' 0' 0' 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 255' 3' 255' 255' 255' 255' 255' 255' 255' 255' 255' 255' 255' 255' 255' 255' 255 };
Magic Number,RocksmithToTabLib,GP5File,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GP5File.cs,WriteTrack,The following statement contains a magic number: Byte[] fillData = new Byte[]{ 67' 1' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 100' 0' 0' 0' 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 255' 3' 255' 255' 255' 255' 255' 255' 255' 255' 255' 255' 255' 255' 255' 255' 255 };
Magic Number,RocksmithToTabLib,GP5File,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GP5File.cs,WriteTrack,The following statement contains a magic number: Byte[] fillData = new Byte[]{ 67' 1' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 100' 0' 0' 0' 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 255' 3' 255' 255' 255' 255' 255' 255' 255' 255' 255' 255' 255' 255' 255' 255' 255 };
Magic Number,RocksmithToTabLib,GP5File,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GP5File.cs,WriteTrack,The following statement contains a magic number: Byte[] fillData = new Byte[]{ 67' 1' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 0' 100' 0' 0' 0' 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 255' 3' 255' 255' 255' 255' 255' 255' 255' 255' 255' 255' 255' 255' 255' 255' 255 };
Magic Number,RocksmithToTabLib,GP5File,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GP5File.cs,WriteBeat,The following statement contains a magic number: const Byte TEXT = (1 << 2);
Magic Number,RocksmithToTabLib,GP5File,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GP5File.cs,WriteBeat,The following statement contains a magic number: const Byte BEAT_EFFECTS = (1 << 3);
Magic Number,RocksmithToTabLib,GP5File,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GP5File.cs,WriteBeat,The following statement contains a magic number: const Byte MIX_TABLE = (1 << 4);
Magic Number,RocksmithToTabLib,GP5File,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GP5File.cs,WriteBeat,The following statement contains a magic number: const Byte TUPLET = (1 << 5);
Magic Number,RocksmithToTabLib,GP5File,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GP5File.cs,WriteBeat,The following statement contains a magic number: const Byte REST = (1 << 6);
Magic Number,RocksmithToTabLib,GP5File,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GP5File.cs,WriteBeat,The following statement contains a magic number: const short STRING_EFFECTS = (1 << 5);
Magic Number,RocksmithToTabLib,GP5File,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GP5File.cs,WriteBeat,The following statement contains a magic number: const Byte SLAPPING = 2;
Magic Number,RocksmithToTabLib,GP5File,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GP5File.cs,WriteBeat,The following statement contains a magic number: const Byte POPPING = 3;
Magic Number,RocksmithToTabLib,GP5File,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GP5File.cs,WriteBeat,The following statement contains a magic number: switch (chord.Duration)              {                  case 192:                      duration = -2;                      break;                  case 144:                      duration = -1;                      dotted = true;                      break;                  case 96:                      duration = -1;                      break;                  case 72:                      duration = 0;                      dotted = true;                      break;                  case 48:                      duration = 0;                      break;                  case 36:                      duration = 1;                      dotted = true;                      break;                  case 32:                      duration = 0;                      triplet = true;                      break;                  case 24:                      duration = 1;                      break;                  case 18:                      duration = 2;                      dotted = true;                      break;                  case 16:                      duration = 1;                      triplet = true;                      break;                  case 12:                      duration = 2;                      break;                  case 9:                      duration = 3;                      dotted = true;                      break;                  case 8:                      duration = 2;                      triplet = true;                      break;                  case 6:                      duration = 3;                      break;                  case 4:                      duration = 3;                      triplet = true;                      break;                  case 3:                      duration = 4;                      break;                  case 2:                      duration = 4;                      triplet = true;                      break;                  default:                      Console.WriteLine("  Warning: Rhythm Duration {0} not handled' defaulting to quarter note."' chord.Duration);                      duration = 0;                      break;              }
Magic Number,RocksmithToTabLib,GP5File,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GP5File.cs,WriteBeat,The following statement contains a magic number: switch (chord.Duration)              {                  case 192:                      duration = -2;                      break;                  case 144:                      duration = -1;                      dotted = true;                      break;                  case 96:                      duration = -1;                      break;                  case 72:                      duration = 0;                      dotted = true;                      break;                  case 48:                      duration = 0;                      break;                  case 36:                      duration = 1;                      dotted = true;                      break;                  case 32:                      duration = 0;                      triplet = true;                      break;                  case 24:                      duration = 1;                      break;                  case 18:                      duration = 2;                      dotted = true;                      break;                  case 16:                      duration = 1;                      triplet = true;                      break;                  case 12:                      duration = 2;                      break;                  case 9:                      duration = 3;                      dotted = true;                      break;                  case 8:                      duration = 2;                      triplet = true;                      break;                  case 6:                      duration = 3;                      break;                  case 4:                      duration = 3;                      triplet = true;                      break;                  case 3:                      duration = 4;                      break;                  case 2:                      duration = 4;                      triplet = true;                      break;                  default:                      Console.WriteLine("  Warning: Rhythm Duration {0} not handled' defaulting to quarter note."' chord.Duration);                      duration = 0;                      break;              }
Magic Number,RocksmithToTabLib,GP5File,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GP5File.cs,WriteBeat,The following statement contains a magic number: switch (chord.Duration)              {                  case 192:                      duration = -2;                      break;                  case 144:                      duration = -1;                      dotted = true;                      break;                  case 96:                      duration = -1;                      break;                  case 72:                      duration = 0;                      dotted = true;                      break;                  case 48:                      duration = 0;                      break;                  case 36:                      duration = 1;                      dotted = true;                      break;                  case 32:                      duration = 0;                      triplet = true;                      break;                  case 24:                      duration = 1;                      break;                  case 18:                      duration = 2;                      dotted = true;                      break;                  case 16:                      duration = 1;                      triplet = true;                      break;                  case 12:                      duration = 2;                      break;                  case 9:                      duration = 3;                      dotted = true;                      break;                  case 8:                      duration = 2;                      triplet = true;                      break;                  case 6:                      duration = 3;                      break;                  case 4:                      duration = 3;                      triplet = true;                      break;                  case 3:                      duration = 4;                      break;                  case 2:                      duration = 4;                      triplet = true;                      break;                  default:                      Console.WriteLine("  Warning: Rhythm Duration {0} not handled' defaulting to quarter note."' chord.Duration);                      duration = 0;                      break;              }
Magic Number,RocksmithToTabLib,GP5File,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GP5File.cs,WriteBeat,The following statement contains a magic number: switch (chord.Duration)              {                  case 192:                      duration = -2;                      break;                  case 144:                      duration = -1;                      dotted = true;                      break;                  case 96:                      duration = -1;                      break;                  case 72:                      duration = 0;                      dotted = true;                      break;                  case 48:                      duration = 0;                      break;                  case 36:                      duration = 1;                      dotted = true;                      break;                  case 32:                      duration = 0;                      triplet = true;                      break;                  case 24:                      duration = 1;                      break;                  case 18:                      duration = 2;                      dotted = true;                      break;                  case 16:                      duration = 1;                      triplet = true;                      break;                  case 12:                      duration = 2;                      break;                  case 9:                      duration = 3;                      dotted = true;                      break;                  case 8:                      duration = 2;                      triplet = true;                      break;                  case 6:                      duration = 3;                      break;                  case 4:                      duration = 3;                      triplet = true;                      break;                  case 3:                      duration = 4;                      break;                  case 2:                      duration = 4;                      triplet = true;                      break;                  default:                      Console.WriteLine("  Warning: Rhythm Duration {0} not handled' defaulting to quarter note."' chord.Duration);                      duration = 0;                      break;              }
Magic Number,RocksmithToTabLib,GP5File,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GP5File.cs,WriteBeat,The following statement contains a magic number: switch (chord.Duration)              {                  case 192:                      duration = -2;                      break;                  case 144:                      duration = -1;                      dotted = true;                      break;                  case 96:                      duration = -1;                      break;                  case 72:                      duration = 0;                      dotted = true;                      break;                  case 48:                      duration = 0;                      break;                  case 36:                      duration = 1;                      dotted = true;                      break;                  case 32:                      duration = 0;                      triplet = true;                      break;                  case 24:                      duration = 1;                      break;                  case 18:                      duration = 2;                      dotted = true;                      break;                  case 16:                      duration = 1;                      triplet = true;                      break;                  case 12:                      duration = 2;                      break;                  case 9:                      duration = 3;                      dotted = true;                      break;                  case 8:                      duration = 2;                      triplet = true;                      break;                  case 6:                      duration = 3;                      break;                  case 4:                      duration = 3;                      triplet = true;                      break;                  case 3:                      duration = 4;                      break;                  case 2:                      duration = 4;                      triplet = true;                      break;                  default:                      Console.WriteLine("  Warning: Rhythm Duration {0} not handled' defaulting to quarter note."' chord.Duration);                      duration = 0;                      break;              }
Magic Number,RocksmithToTabLib,GP5File,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GP5File.cs,WriteBeat,The following statement contains a magic number: switch (chord.Duration)              {                  case 192:                      duration = -2;                      break;                  case 144:                      duration = -1;                      dotted = true;                      break;                  case 96:                      duration = -1;                      break;                  case 72:                      duration = 0;                      dotted = true;                      break;                  case 48:                      duration = 0;                      break;                  case 36:                      duration = 1;                      dotted = true;                      break;                  case 32:                      duration = 0;                      triplet = true;                      break;                  case 24:                      duration = 1;                      break;                  case 18:                      duration = 2;                      dotted = true;                      break;                  case 16:                      duration = 1;                      triplet = true;                      break;                  case 12:                      duration = 2;                      break;                  case 9:                      duration = 3;                      dotted = true;                      break;                  case 8:                      duration = 2;                      triplet = true;                      break;                  case 6:                      duration = 3;                      break;                  case 4:                      duration = 3;                      triplet = true;                      break;                  case 3:                      duration = 4;                      break;                  case 2:                      duration = 4;                      triplet = true;                      break;                  default:                      Console.WriteLine("  Warning: Rhythm Duration {0} not handled' defaulting to quarter note."' chord.Duration);                      duration = 0;                      break;              }
Magic Number,RocksmithToTabLib,GP5File,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GP5File.cs,WriteBeat,The following statement contains a magic number: switch (chord.Duration)              {                  case 192:                      duration = -2;                      break;                  case 144:                      duration = -1;                      dotted = true;                      break;                  case 96:                      duration = -1;                      break;                  case 72:                      duration = 0;                      dotted = true;                      break;                  case 48:                      duration = 0;                      break;                  case 36:                      duration = 1;                      dotted = true;                      break;                  case 32:                      duration = 0;                      triplet = true;                      break;                  case 24:                      duration = 1;                      break;                  case 18:                      duration = 2;                      dotted = true;                      break;                  case 16:                      duration = 1;                      triplet = true;                      break;                  case 12:                      duration = 2;                      break;                  case 9:                      duration = 3;                      dotted = true;                      break;                  case 8:                      duration = 2;                      triplet = true;                      break;                  case 6:                      duration = 3;                      break;                  case 4:                      duration = 3;                      triplet = true;                      break;                  case 3:                      duration = 4;                      break;                  case 2:                      duration = 4;                      triplet = true;                      break;                  default:                      Console.WriteLine("  Warning: Rhythm Duration {0} not handled' defaulting to quarter note."' chord.Duration);                      duration = 0;                      break;              }
Magic Number,RocksmithToTabLib,GP5File,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GP5File.cs,WriteBeat,The following statement contains a magic number: switch (chord.Duration)              {                  case 192:                      duration = -2;                      break;                  case 144:                      duration = -1;                      dotted = true;                      break;                  case 96:                      duration = -1;                      break;                  case 72:                      duration = 0;                      dotted = true;                      break;                  case 48:                      duration = 0;                      break;                  case 36:                      duration = 1;                      dotted = true;                      break;                  case 32:                      duration = 0;                      triplet = true;                      break;                  case 24:                      duration = 1;                      break;                  case 18:                      duration = 2;                      dotted = true;                      break;                  case 16:                      duration = 1;                      triplet = true;                      break;                  case 12:                      duration = 2;                      break;                  case 9:                      duration = 3;                      dotted = true;                      break;                  case 8:                      duration = 2;                      triplet = true;                      break;                  case 6:                      duration = 3;                      break;                  case 4:                      duration = 3;                      triplet = true;                      break;                  case 3:                      duration = 4;                      break;                  case 2:                      duration = 4;                      triplet = true;                      break;                  default:                      Console.WriteLine("  Warning: Rhythm Duration {0} not handled' defaulting to quarter note."' chord.Duration);                      duration = 0;                      break;              }
Magic Number,RocksmithToTabLib,GP5File,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GP5File.cs,WriteBeat,The following statement contains a magic number: switch (chord.Duration)              {                  case 192:                      duration = -2;                      break;                  case 144:                      duration = -1;                      dotted = true;                      break;                  case 96:                      duration = -1;                      break;                  case 72:                      duration = 0;                      dotted = true;                      break;                  case 48:                      duration = 0;                      break;                  case 36:                      duration = 1;                      dotted = true;                      break;                  case 32:                      duration = 0;                      triplet = true;                      break;                  case 24:                      duration = 1;                      break;                  case 18:                      duration = 2;                      dotted = true;                      break;                  case 16:                      duration = 1;                      triplet = true;                      break;                  case 12:                      duration = 2;                      break;                  case 9:                      duration = 3;                      dotted = true;                      break;                  case 8:                      duration = 2;                      triplet = true;                      break;                  case 6:                      duration = 3;                      break;                  case 4:                      duration = 3;                      triplet = true;                      break;                  case 3:                      duration = 4;                      break;                  case 2:                      duration = 4;                      triplet = true;                      break;                  default:                      Console.WriteLine("  Warning: Rhythm Duration {0} not handled' defaulting to quarter note."' chord.Duration);                      duration = 0;                      break;              }
Magic Number,RocksmithToTabLib,GP5File,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GP5File.cs,WriteBeat,The following statement contains a magic number: switch (chord.Duration)              {                  case 192:                      duration = -2;                      break;                  case 144:                      duration = -1;                      dotted = true;                      break;                  case 96:                      duration = -1;                      break;                  case 72:                      duration = 0;                      dotted = true;                      break;                  case 48:                      duration = 0;                      break;                  case 36:                      duration = 1;                      dotted = true;                      break;                  case 32:                      duration = 0;                      triplet = true;                      break;                  case 24:                      duration = 1;                      break;                  case 18:                      duration = 2;                      dotted = true;                      break;                  case 16:                      duration = 1;                      triplet = true;                      break;                  case 12:                      duration = 2;                      break;                  case 9:                      duration = 3;                      dotted = true;                      break;                  case 8:                      duration = 2;                      triplet = true;                      break;                  case 6:                      duration = 3;                      break;                  case 4:                      duration = 3;                      triplet = true;                      break;                  case 3:                      duration = 4;                      break;                  case 2:                      duration = 4;                      triplet = true;                      break;                  default:                      Console.WriteLine("  Warning: Rhythm Duration {0} not handled' defaulting to quarter note."' chord.Duration);                      duration = 0;                      break;              }
Magic Number,RocksmithToTabLib,GP5File,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GP5File.cs,WriteBeat,The following statement contains a magic number: switch (chord.Duration)              {                  case 192:                      duration = -2;                      break;                  case 144:                      duration = -1;                      dotted = true;                      break;                  case 96:                      duration = -1;                      break;                  case 72:                      duration = 0;                      dotted = true;                      break;                  case 48:                      duration = 0;                      break;                  case 36:                      duration = 1;                      dotted = true;                      break;                  case 32:                      duration = 0;                      triplet = true;                      break;                  case 24:                      duration = 1;                      break;                  case 18:                      duration = 2;                      dotted = true;                      break;                  case 16:                      duration = 1;                      triplet = true;                      break;                  case 12:                      duration = 2;                      break;                  case 9:                      duration = 3;                      dotted = true;                      break;                  case 8:                      duration = 2;                      triplet = true;                      break;                  case 6:                      duration = 3;                      break;                  case 4:                      duration = 3;                      triplet = true;                      break;                  case 3:                      duration = 4;                      break;                  case 2:                      duration = 4;                      triplet = true;                      break;                  default:                      Console.WriteLine("  Warning: Rhythm Duration {0} not handled' defaulting to quarter note."' chord.Duration);                      duration = 0;                      break;              }
Magic Number,RocksmithToTabLib,GP5File,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GP5File.cs,WriteBeat,The following statement contains a magic number: switch (chord.Duration)              {                  case 192:                      duration = -2;                      break;                  case 144:                      duration = -1;                      dotted = true;                      break;                  case 96:                      duration = -1;                      break;                  case 72:                      duration = 0;                      dotted = true;                      break;                  case 48:                      duration = 0;                      break;                  case 36:                      duration = 1;                      dotted = true;                      break;                  case 32:                      duration = 0;                      triplet = true;                      break;                  case 24:                      duration = 1;                      break;                  case 18:                      duration = 2;                      dotted = true;                      break;                  case 16:                      duration = 1;                      triplet = true;                      break;                  case 12:                      duration = 2;                      break;                  case 9:                      duration = 3;                      dotted = true;                      break;                  case 8:                      duration = 2;                      triplet = true;                      break;                  case 6:                      duration = 3;                      break;                  case 4:                      duration = 3;                      triplet = true;                      break;                  case 3:                      duration = 4;                      break;                  case 2:                      duration = 4;                      triplet = true;                      break;                  default:                      Console.WriteLine("  Warning: Rhythm Duration {0} not handled' defaulting to quarter note."' chord.Duration);                      duration = 0;                      break;              }
Magic Number,RocksmithToTabLib,GP5File,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GP5File.cs,WriteBeat,The following statement contains a magic number: switch (chord.Duration)              {                  case 192:                      duration = -2;                      break;                  case 144:                      duration = -1;                      dotted = true;                      break;                  case 96:                      duration = -1;                      break;                  case 72:                      duration = 0;                      dotted = true;                      break;                  case 48:                      duration = 0;                      break;                  case 36:                      duration = 1;                      dotted = true;                      break;                  case 32:                      duration = 0;                      triplet = true;                      break;                  case 24:                      duration = 1;                      break;                  case 18:                      duration = 2;                      dotted = true;                      break;                  case 16:                      duration = 1;                      triplet = true;                      break;                  case 12:                      duration = 2;                      break;                  case 9:                      duration = 3;                      dotted = true;                      break;                  case 8:                      duration = 2;                      triplet = true;                      break;                  case 6:                      duration = 3;                      break;                  case 4:                      duration = 3;                      triplet = true;                      break;                  case 3:                      duration = 4;                      break;                  case 2:                      duration = 4;                      triplet = true;                      break;                  default:                      Console.WriteLine("  Warning: Rhythm Duration {0} not handled' defaulting to quarter note."' chord.Duration);                      duration = 0;                      break;              }
Magic Number,RocksmithToTabLib,GP5File,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GP5File.cs,WriteBeat,The following statement contains a magic number: switch (chord.Duration)              {                  case 192:                      duration = -2;                      break;                  case 144:                      duration = -1;                      dotted = true;                      break;                  case 96:                      duration = -1;                      break;                  case 72:                      duration = 0;                      dotted = true;                      break;                  case 48:                      duration = 0;                      break;                  case 36:                      duration = 1;                      dotted = true;                      break;                  case 32:                      duration = 0;                      triplet = true;                      break;                  case 24:                      duration = 1;                      break;                  case 18:                      duration = 2;                      dotted = true;                      break;                  case 16:                      duration = 1;                      triplet = true;                      break;                  case 12:                      duration = 2;                      break;                  case 9:                      duration = 3;                      dotted = true;                      break;                  case 8:                      duration = 2;                      triplet = true;                      break;                  case 6:                      duration = 3;                      break;                  case 4:                      duration = 3;                      triplet = true;                      break;                  case 3:                      duration = 4;                      break;                  case 2:                      duration = 4;                      triplet = true;                      break;                  default:                      Console.WriteLine("  Warning: Rhythm Duration {0} not handled' defaulting to quarter note."' chord.Duration);                      duration = 0;                      break;              }
Magic Number,RocksmithToTabLib,GP5File,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GP5File.cs,WriteBeat,The following statement contains a magic number: switch (chord.Duration)              {                  case 192:                      duration = -2;                      break;                  case 144:                      duration = -1;                      dotted = true;                      break;                  case 96:                      duration = -1;                      break;                  case 72:                      duration = 0;                      dotted = true;                      break;                  case 48:                      duration = 0;                      break;                  case 36:                      duration = 1;                      dotted = true;                      break;                  case 32:                      duration = 0;                      triplet = true;                      break;                  case 24:                      duration = 1;                      break;                  case 18:                      duration = 2;                      dotted = true;                      break;                  case 16:                      duration = 1;                      triplet = true;                      break;                  case 12:                      duration = 2;                      break;                  case 9:                      duration = 3;                      dotted = true;                      break;                  case 8:                      duration = 2;                      triplet = true;                      break;                  case 6:                      duration = 3;                      break;                  case 4:                      duration = 3;                      triplet = true;                      break;                  case 3:                      duration = 4;                      break;                  case 2:                      duration = 4;                      triplet = true;                      break;                  default:                      Console.WriteLine("  Warning: Rhythm Duration {0} not handled' defaulting to quarter note."' chord.Duration);                      duration = 0;                      break;              }
Magic Number,RocksmithToTabLib,GP5File,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GP5File.cs,WriteBeat,The following statement contains a magic number: switch (chord.Duration)              {                  case 192:                      duration = -2;                      break;                  case 144:                      duration = -1;                      dotted = true;                      break;                  case 96:                      duration = -1;                      break;                  case 72:                      duration = 0;                      dotted = true;                      break;                  case 48:                      duration = 0;                      break;                  case 36:                      duration = 1;                      dotted = true;                      break;                  case 32:                      duration = 0;                      triplet = true;                      break;                  case 24:                      duration = 1;                      break;                  case 18:                      duration = 2;                      dotted = true;                      break;                  case 16:                      duration = 1;                      triplet = true;                      break;                  case 12:                      duration = 2;                      break;                  case 9:                      duration = 3;                      dotted = true;                      break;                  case 8:                      duration = 2;                      triplet = true;                      break;                  case 6:                      duration = 3;                      break;                  case 4:                      duration = 3;                      triplet = true;                      break;                  case 3:                      duration = 4;                      break;                  case 2:                      duration = 4;                      triplet = true;                      break;                  default:                      Console.WriteLine("  Warning: Rhythm Duration {0} not handled' defaulting to quarter note."' chord.Duration);                      duration = 0;                      break;              }
Magic Number,RocksmithToTabLib,GP5File,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GP5File.cs,WriteBeat,The following statement contains a magic number: switch (chord.Duration)              {                  case 192:                      duration = -2;                      break;                  case 144:                      duration = -1;                      dotted = true;                      break;                  case 96:                      duration = -1;                      break;                  case 72:                      duration = 0;                      dotted = true;                      break;                  case 48:                      duration = 0;                      break;                  case 36:                      duration = 1;                      dotted = true;                      break;                  case 32:                      duration = 0;                      triplet = true;                      break;                  case 24:                      duration = 1;                      break;                  case 18:                      duration = 2;                      dotted = true;                      break;                  case 16:                      duration = 1;                      triplet = true;                      break;                  case 12:                      duration = 2;                      break;                  case 9:                      duration = 3;                      dotted = true;                      break;                  case 8:                      duration = 2;                      triplet = true;                      break;                  case 6:                      duration = 3;                      break;                  case 4:                      duration = 3;                      triplet = true;                      break;                  case 3:                      duration = 4;                      break;                  case 2:                      duration = 4;                      triplet = true;                      break;                  default:                      Console.WriteLine("  Warning: Rhythm Duration {0} not handled' defaulting to quarter note."' chord.Duration);                      duration = 0;                      break;              }
Magic Number,RocksmithToTabLib,GP5File,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GP5File.cs,WriteBeat,The following statement contains a magic number: switch (chord.Duration)              {                  case 192:                      duration = -2;                      break;                  case 144:                      duration = -1;                      dotted = true;                      break;                  case 96:                      duration = -1;                      break;                  case 72:                      duration = 0;                      dotted = true;                      break;                  case 48:                      duration = 0;                      break;                  case 36:                      duration = 1;                      dotted = true;                      break;                  case 32:                      duration = 0;                      triplet = true;                      break;                  case 24:                      duration = 1;                      break;                  case 18:                      duration = 2;                      dotted = true;                      break;                  case 16:                      duration = 1;                      triplet = true;                      break;                  case 12:                      duration = 2;                      break;                  case 9:                      duration = 3;                      dotted = true;                      break;                  case 8:                      duration = 2;                      triplet = true;                      break;                  case 6:                      duration = 3;                      break;                  case 4:                      duration = 3;                      triplet = true;                      break;                  case 3:                      duration = 4;                      break;                  case 2:                      duration = 4;                      triplet = true;                      break;                  default:                      Console.WriteLine("  Warning: Rhythm Duration {0} not handled' defaulting to quarter note."' chord.Duration);                      duration = 0;                      break;              }
Magic Number,RocksmithToTabLib,GP5File,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GP5File.cs,WriteBeat,The following statement contains a magic number: switch (chord.Duration)              {                  case 192:                      duration = -2;                      break;                  case 144:                      duration = -1;                      dotted = true;                      break;                  case 96:                      duration = -1;                      break;                  case 72:                      duration = 0;                      dotted = true;                      break;                  case 48:                      duration = 0;                      break;                  case 36:                      duration = 1;                      dotted = true;                      break;                  case 32:                      duration = 0;                      triplet = true;                      break;                  case 24:                      duration = 1;                      break;                  case 18:                      duration = 2;                      dotted = true;                      break;                  case 16:                      duration = 1;                      triplet = true;                      break;                  case 12:                      duration = 2;                      break;                  case 9:                      duration = 3;                      dotted = true;                      break;                  case 8:                      duration = 2;                      triplet = true;                      break;                  case 6:                      duration = 3;                      break;                  case 4:                      duration = 3;                      triplet = true;                      break;                  case 3:                      duration = 4;                      break;                  case 2:                      duration = 4;                      triplet = true;                      break;                  default:                      Console.WriteLine("  Warning: Rhythm Duration {0} not handled' defaulting to quarter note."' chord.Duration);                      duration = 0;                      break;              }
Magic Number,RocksmithToTabLib,GP5File,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GP5File.cs,WriteBeat,The following statement contains a magic number: switch (chord.Duration)              {                  case 192:                      duration = -2;                      break;                  case 144:                      duration = -1;                      dotted = true;                      break;                  case 96:                      duration = -1;                      break;                  case 72:                      duration = 0;                      dotted = true;                      break;                  case 48:                      duration = 0;                      break;                  case 36:                      duration = 1;                      dotted = true;                      break;                  case 32:                      duration = 0;                      triplet = true;                      break;                  case 24:                      duration = 1;                      break;                  case 18:                      duration = 2;                      dotted = true;                      break;                  case 16:                      duration = 1;                      triplet = true;                      break;                  case 12:                      duration = 2;                      break;                  case 9:                      duration = 3;                      dotted = true;                      break;                  case 8:                      duration = 2;                      triplet = true;                      break;                  case 6:                      duration = 3;                      break;                  case 4:                      duration = 3;                      triplet = true;                      break;                  case 3:                      duration = 4;                      break;                  case 2:                      duration = 4;                      triplet = true;                      break;                  default:                      Console.WriteLine("  Warning: Rhythm Duration {0} not handled' defaulting to quarter note."' chord.Duration);                      duration = 0;                      break;              }
Magic Number,RocksmithToTabLib,GP5File,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GP5File.cs,WriteBeat,The following statement contains a magic number: switch (chord.Duration)              {                  case 192:                      duration = -2;                      break;                  case 144:                      duration = -1;                      dotted = true;                      break;                  case 96:                      duration = -1;                      break;                  case 72:                      duration = 0;                      dotted = true;                      break;                  case 48:                      duration = 0;                      break;                  case 36:                      duration = 1;                      dotted = true;                      break;                  case 32:                      duration = 0;                      triplet = true;                      break;                  case 24:                      duration = 1;                      break;                  case 18:                      duration = 2;                      dotted = true;                      break;                  case 16:                      duration = 1;                      triplet = true;                      break;                  case 12:                      duration = 2;                      break;                  case 9:                      duration = 3;                      dotted = true;                      break;                  case 8:                      duration = 2;                      triplet = true;                      break;                  case 6:                      duration = 3;                      break;                  case 4:                      duration = 3;                      triplet = true;                      break;                  case 3:                      duration = 4;                      break;                  case 2:                      duration = 4;                      triplet = true;                      break;                  default:                      Console.WriteLine("  Warning: Rhythm Duration {0} not handled' defaulting to quarter note."' chord.Duration);                      duration = 0;                      break;              }
Magic Number,RocksmithToTabLib,GP5File,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GP5File.cs,WriteBeat,The following statement contains a magic number: switch (chord.Duration)              {                  case 192:                      duration = -2;                      break;                  case 144:                      duration = -1;                      dotted = true;                      break;                  case 96:                      duration = -1;                      break;                  case 72:                      duration = 0;                      dotted = true;                      break;                  case 48:                      duration = 0;                      break;                  case 36:                      duration = 1;                      dotted = true;                      break;                  case 32:                      duration = 0;                      triplet = true;                      break;                  case 24:                      duration = 1;                      break;                  case 18:                      duration = 2;                      dotted = true;                      break;                  case 16:                      duration = 1;                      triplet = true;                      break;                  case 12:                      duration = 2;                      break;                  case 9:                      duration = 3;                      dotted = true;                      break;                  case 8:                      duration = 2;                      triplet = true;                      break;                  case 6:                      duration = 3;                      break;                  case 4:                      duration = 3;                      triplet = true;                      break;                  case 3:                      duration = 4;                      break;                  case 2:                      duration = 4;                      triplet = true;                      break;                  default:                      Console.WriteLine("  Warning: Rhythm Duration {0} not handled' defaulting to quarter note."' chord.Duration);                      duration = 0;                      break;              }
Magic Number,RocksmithToTabLib,GP5File,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GP5File.cs,WriteBeat,The following statement contains a magic number: switch (chord.Duration)              {                  case 192:                      duration = -2;                      break;                  case 144:                      duration = -1;                      dotted = true;                      break;                  case 96:                      duration = -1;                      break;                  case 72:                      duration = 0;                      dotted = true;                      break;                  case 48:                      duration = 0;                      break;                  case 36:                      duration = 1;                      dotted = true;                      break;                  case 32:                      duration = 0;                      triplet = true;                      break;                  case 24:                      duration = 1;                      break;                  case 18:                      duration = 2;                      dotted = true;                      break;                  case 16:                      duration = 1;                      triplet = true;                      break;                  case 12:                      duration = 2;                      break;                  case 9:                      duration = 3;                      dotted = true;                      break;                  case 8:                      duration = 2;                      triplet = true;                      break;                  case 6:                      duration = 3;                      break;                  case 4:                      duration = 3;                      triplet = true;                      break;                  case 3:                      duration = 4;                      break;                  case 2:                      duration = 4;                      triplet = true;                      break;                  default:                      Console.WriteLine("  Warning: Rhythm Duration {0} not handled' defaulting to quarter note."' chord.Duration);                      duration = 0;                      break;              }
Magic Number,RocksmithToTabLib,GP5File,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GP5File.cs,WriteBeat,The following statement contains a magic number: switch (chord.Duration)              {                  case 192:                      duration = -2;                      break;                  case 144:                      duration = -1;                      dotted = true;                      break;                  case 96:                      duration = -1;                      break;                  case 72:                      duration = 0;                      dotted = true;                      break;                  case 48:                      duration = 0;                      break;                  case 36:                      duration = 1;                      dotted = true;                      break;                  case 32:                      duration = 0;                      triplet = true;                      break;                  case 24:                      duration = 1;                      break;                  case 18:                      duration = 2;                      dotted = true;                      break;                  case 16:                      duration = 1;                      triplet = true;                      break;                  case 12:                      duration = 2;                      break;                  case 9:                      duration = 3;                      dotted = true;                      break;                  case 8:                      duration = 2;                      triplet = true;                      break;                  case 6:                      duration = 3;                      break;                  case 4:                      duration = 3;                      triplet = true;                      break;                  case 3:                      duration = 4;                      break;                  case 2:                      duration = 4;                      triplet = true;                      break;                  default:                      Console.WriteLine("  Warning: Rhythm Duration {0} not handled' defaulting to quarter note."' chord.Duration);                      duration = 0;                      break;              }
Magic Number,RocksmithToTabLib,GP5File,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GP5File.cs,WriteBeat,The following statement contains a magic number: switch (chord.Duration)              {                  case 192:                      duration = -2;                      break;                  case 144:                      duration = -1;                      dotted = true;                      break;                  case 96:                      duration = -1;                      break;                  case 72:                      duration = 0;                      dotted = true;                      break;                  case 48:                      duration = 0;                      break;                  case 36:                      duration = 1;                      dotted = true;                      break;                  case 32:                      duration = 0;                      triplet = true;                      break;                  case 24:                      duration = 1;                      break;                  case 18:                      duration = 2;                      dotted = true;                      break;                  case 16:                      duration = 1;                      triplet = true;                      break;                  case 12:                      duration = 2;                      break;                  case 9:                      duration = 3;                      dotted = true;                      break;                  case 8:                      duration = 2;                      triplet = true;                      break;                  case 6:                      duration = 3;                      break;                  case 4:                      duration = 3;                      triplet = true;                      break;                  case 3:                      duration = 4;                      break;                  case 2:                      duration = 4;                      triplet = true;                      break;                  default:                      Console.WriteLine("  Warning: Rhythm Duration {0} not handled' defaulting to quarter note."' chord.Duration);                      duration = 0;                      break;              }
Magic Number,RocksmithToTabLib,GP5File,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GP5File.cs,WriteBeat,The following statement contains a magic number: switch (chord.Duration)              {                  case 192:                      duration = -2;                      break;                  case 144:                      duration = -1;                      dotted = true;                      break;                  case 96:                      duration = -1;                      break;                  case 72:                      duration = 0;                      dotted = true;                      break;                  case 48:                      duration = 0;                      break;                  case 36:                      duration = 1;                      dotted = true;                      break;                  case 32:                      duration = 0;                      triplet = true;                      break;                  case 24:                      duration = 1;                      break;                  case 18:                      duration = 2;                      dotted = true;                      break;                  case 16:                      duration = 1;                      triplet = true;                      break;                  case 12:                      duration = 2;                      break;                  case 9:                      duration = 3;                      dotted = true;                      break;                  case 8:                      duration = 2;                      triplet = true;                      break;                  case 6:                      duration = 3;                      break;                  case 4:                      duration = 3;                      triplet = true;                      break;                  case 3:                      duration = 4;                      break;                  case 2:                      duration = 4;                      triplet = true;                      break;                  default:                      Console.WriteLine("  Warning: Rhythm Duration {0} not handled' defaulting to quarter note."' chord.Duration);                      duration = 0;                      break;              }
Magic Number,RocksmithToTabLib,GP5File,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GP5File.cs,WriteBeat,The following statement contains a magic number: writer.Write((Byte)2);
Magic Number,RocksmithToTabLib,GP5File,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GP5File.cs,WriteBeat,The following statement contains a magic number: writer.Write((Int32)3);
Magic Number,RocksmithToTabLib,GP5File,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GP5File.cs,WriteBeat,The following statement contains a magic number: i < 23
Magic Number,RocksmithToTabLib,GP5File,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GP5File.cs,WriteBeat,The following statement contains a magic number: int stringOffset = 7 - numStrings;
Magic Number,RocksmithToTabLib,GP5File,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GP5File.cs,WriteBeat,The following statement contains a magic number: i < 6
Magic Number,RocksmithToTabLib,GP5File,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GP5File.cs,WriteChordTemplate,The following statement contains a magic number: writer.Write(new Byte[] { 1' 1' 0' 0' 0' 12' 0' 0' 255' 255' 255' 255' 0' 0' 0' 0' 0 });
Magic Number,RocksmithToTabLib,GP5File,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GP5File.cs,WriteChordTemplate,The following statement contains a magic number: writer.Write(new Byte[] { 1' 1' 0' 0' 0' 12' 0' 0' 255' 255' 255' 255' 0' 0' 0' 0' 0 });
Magic Number,RocksmithToTabLib,GP5File,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GP5File.cs,WriteChordTemplate,The following statement contains a magic number: writer.Write(new Byte[] { 1' 1' 0' 0' 0' 12' 0' 0' 255' 255' 255' 255' 0' 0' 0' 0' 0 });
Magic Number,RocksmithToTabLib,GP5File,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GP5File.cs,WriteChordTemplate,The following statement contains a magic number: writer.Write(new Byte[] { 1' 1' 0' 0' 0' 12' 0' 0' 255' 255' 255' 255' 0' 0' 0' 0' 0 });
Magic Number,RocksmithToTabLib,GP5File,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GP5File.cs,WriteChordTemplate,The following statement contains a magic number: writer.Write(new Byte[] { 1' 1' 0' 0' 0' 12' 0' 0' 255' 255' 255' 255' 0' 0' 0' 0' 0 });
Magic Number,RocksmithToTabLib,GP5File,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GP5File.cs,WriteChordTemplate,The following statement contains a magic number: var chordName = template.Name.Substring(0' Math.Min(20' template.Name.Length));
Magic Number,RocksmithToTabLib,GP5File,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GP5File.cs,WriteChordTemplate,The following statement contains a magic number: i < 20
Magic Number,RocksmithToTabLib,GP5File,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GP5File.cs,WriteChordTemplate,The following statement contains a magic number: int minFret = 100;
Magic Number,RocksmithToTabLib,GP5File,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GP5File.cs,WriteChordTemplate,The following statement contains a magic number: i < 6
Magic Number,RocksmithToTabLib,GP5File,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GP5File.cs,WriteChordTemplate,The following statement contains a magic number: maxFret <= 5
Magic Number,RocksmithToTabLib,GP5File,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GP5File.cs,WriteChordTemplate,The following statement contains a magic number: i < 5
Magic Number,RocksmithToTabLib,GP5File,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GP5File.cs,WriteChordTemplate,The following statement contains a magic number: writer.Write((Byte)255);
Magic Number,RocksmithToTabLib,GP5File,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GP5File.cs,WriteNote,The following statement contains a magic number: const Byte NOTE_TYPE = (1 << 4);
Magic Number,RocksmithToTabLib,GP5File,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GP5File.cs,WriteNote,The following statement contains a magic number: const Byte NOTE_DYNAMICS = (1 << 5);
Magic Number,RocksmithToTabLib,GP5File,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GP5File.cs,WriteNote,The following statement contains a magic number: const Byte NOTE_EFFECTS = (1 << 3);
Magic Number,RocksmithToTabLib,GP5File,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GP5File.cs,WriteNote,The following statement contains a magic number: const Byte FINGER_HINTS = (1 << 7);
Magic Number,RocksmithToTabLib,GP5File,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GP5File.cs,WriteNote,The following statement contains a magic number: const Byte ACCENTUATED = (1 << 6);
Magic Number,RocksmithToTabLib,GP5File,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GP5File.cs,WriteNote,The following statement contains a magic number: const Byte TYPE_TIED = 2;
Magic Number,RocksmithToTabLib,GP5File,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GP5File.cs,WriteNote,The following statement contains a magic number: const Byte TYPE_DEAD = 3;
Magic Number,RocksmithToTabLib,GP5File,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GP5File.cs,WriteNote,The following statement contains a magic number: const short PALM_MUTE = (1 << 9);
Magic Number,RocksmithToTabLib,GP5File,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GP5File.cs,WriteNote,The following statement contains a magic number: const short TREMOLO = (1 << 10);
Magic Number,RocksmithToTabLib,GP5File,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GP5File.cs,WriteNote,The following statement contains a magic number: const short SLIDE = (1 << 11);
Magic Number,RocksmithToTabLib,GP5File,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GP5File.cs,WriteNote,The following statement contains a magic number: const short HARMONIC = (1 << 12);
Magic Number,RocksmithToTabLib,GP5File,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GP5File.cs,WriteNote,The following statement contains a magic number: const short VIBRATO = (1 << 14);
Magic Number,RocksmithToTabLib,GP5File,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GP5File.cs,WriteNote,The following statement contains a magic number: const Byte PINCH_HARMONIC = 4;
Magic Number,RocksmithToTabLib,GP5File,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GP5File.cs,WriteNote,The following statement contains a magic number: writer.Write((Byte)(5 + accent));
Magic Number,RocksmithToTabLib,GP5File,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GP5File.cs,WriteNote,The following statement contains a magic number: writer.Write((Byte)2);
Magic Number,RocksmithToTabLib,GP5File,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GP5File.cs,WriteNote,The following statement contains a magic number: writer.Write((Byte)2);
Magic Number,RocksmithToTabLib,GP5File,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GP5File.cs,WriteBend,The following statement contains a magic number: writer.Write((Byte)2);
Magic Number,RocksmithToTabLib,GP5File,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GP5File.cs,WriteBend,The following statement contains a magic number: Int32 position = (Int32)(bendValue.RelativePosition * 60);
Magic Number,RocksmithToTabLib,GP5File,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GP5File.cs,WriteBend,The following statement contains a magic number: Int32 step = (Int32)(Math.Round(bendValue.Step * 2) * 25);
Magic Number,RocksmithToTabLib,GP5File,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GP5File.cs,WriteBend,The following statement contains a magic number: Int32 step = (Int32)(Math.Round(bendValue.Step * 2) * 25);
Magic Number,RocksmithToTabLib,GpxContainer,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GpxContainer.cs,CreateGPXContainer,The following statement contains a magic number: const int HEADER_BCFS = 1397113666;
Magic Number,RocksmithToTabLib,GpxContainer,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GpxContainer.cs,CreateGPXContainer,The following statement contains a magic number: writer.Write(nullData' 0' 131);
Magic Number,RocksmithToTabLib,GpxContainer,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GpxContainer.cs,CreateGPXContainer,The following statement contains a magic number: writer.Write((int)4);
Magic Number,RocksmithToTabLib,GpxContainer,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GpxContainer.cs,CreateGPXContainer,The following statement contains a magic number: writer.Write((int)3);
Magic Number,RocksmithToTabLib,GpxContainer,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GpxContainer.cs,CreateGPXContainer,The following statement contains a magic number: writer.Write(nullData' 0' 3944);
Magic Number,RocksmithToTabLib,GpxContainer,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GpxContainer.cs,CreateGPXContainer,The following statement contains a magic number: writer.Write((int)2);
Magic Number,RocksmithToTabLib,GpxContainer,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GpxContainer.cs,CreateGPXContainer,The following statement contains a magic number: writer.Write(nullData' 0' 122);
Magic Number,RocksmithToTabLib,GpxContainer,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GpxContainer.cs,CreateGPXContainer,The following statement contains a magic number: i < 4 + numberOfSectors
Magic Number,RocksmithToTabLib,GpxContainer,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GpxContainer.cs,CreateGPXContainer,The following statement contains a magic number: writer.Write(nullData' 0' 3948 - numberOfSectors * 4);
Magic Number,RocksmithToTabLib,GpxContainer,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GpxContainer.cs,CreateGPXContainer,The following statement contains a magic number: writer.Write(nullData' 0' 3948 - numberOfSectors * 4);
Magic Number,RocksmithToTabLib,GpxContainer,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GpxContainer.cs,CreateGPXContainer,The following statement contains a magic number: writer.Write((int)2);
Magic Number,RocksmithToTabLib,GpxContainer,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GpxContainer.cs,CreateGPXContainer,The following statement contains a magic number: writer.Write(nullData' 0' sectorSize - 4);
Magic Number,RocksmithToTabLib,GpxExporter,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GpxExporter.cs,ExportTrack,The following statement contains a magic number: tuningProp.Pitches[i] -= 12;
Magic Number,RocksmithToTabLib,GpxExporter,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GpxExporter.cs,ExportTrack,The following statement contains a magic number: gpTrack.GeneralMidi.Program = 29;
Magic Number,RocksmithToTabLib,GpxExporter,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GpxExporter.cs,ExportChordDiagrams,The following statement contains a magic number: int minFret = 100;
Magic Number,RocksmithToTabLib,GpxExporter,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GpxExporter.cs,ExportChordDiagrams,The following statement contains a magic number: i < 6
Magic Number,RocksmithToTabLib,GpxExporter,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GpxExporter.cs,ExportChordDiagrams,The following statement contains a magic number: maxFret > 5
Magic Number,RocksmithToTabLib,GpxExporter,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GpxExporter.cs,ExportChordDiagrams,The following statement contains a magic number: diagram.Diagram.StringCount = (track.Instrument == Track.InstrumentType.Bass ? 4 : 6);
Magic Number,RocksmithToTabLib,GpxExporter,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GpxExporter.cs,ExportChordDiagrams,The following statement contains a magic number: diagram.Diagram.StringCount = (track.Instrument == Track.InstrumentType.Bass ? 4 : 6);
Magic Number,RocksmithToTabLib,GpxExporter,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GpxExporter.cs,ExportChordDiagrams,The following statement contains a magic number: diagram.Diagram.FretCount = Math.Max(5' maxFret - minFret);
Magic Number,RocksmithToTabLib,GpxExporter,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GpxExporter.cs,ExportChordDiagrams,The following statement contains a magic number: switch (kvp.Value.Fingers[i])                      {                          case 1:                              position.Finger = "Index"; break;                          case 2:                              position.Finger = "Middle"; break;                          case 3:                              position.Finger = "Ring"; break;                          case 4:                              position.Finger = "Pinky"; break;                          default:                              position.Finger = "None"; break;                      }
Magic Number,RocksmithToTabLib,GpxExporter,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GpxExporter.cs,ExportChordDiagrams,The following statement contains a magic number: switch (kvp.Value.Fingers[i])                      {                          case 1:                              position.Finger = "Index"; break;                          case 2:                              position.Finger = "Middle"; break;                          case 3:                              position.Finger = "Ring"; break;                          case 4:                              position.Finger = "Pinky"; break;                          default:                              position.Finger = "None"; break;                      }
Magic Number,RocksmithToTabLib,GpxExporter,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GpxExporter.cs,ExportChordDiagrams,The following statement contains a magic number: switch (kvp.Value.Fingers[i])                      {                          case 1:                              position.Finger = "Index"; break;                          case 2:                              position.Finger = "Middle"; break;                          case 3:                              position.Finger = "Ring"; break;                          case 4:                              position.Finger = "Pinky"; break;                          default:                              position.Finger = "None"; break;                      }
Magic Number,RocksmithToTabLib,GpxExporter,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GpxExporter.cs,ExportChordDiagrams,The following statement contains a magic number: i < 6
Magic Number,RocksmithToTabLib,GpxExporter,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GpxExporter.cs,ExportBars,The following statement contains a magic number: tempo.Value[1] = 2;
Magic Number,RocksmithToTabLib,GpxExporter,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GpxExporter.cs,ExportOrFindBeat,The following statement contains a magic number: i < 6
Magic Number,RocksmithToTabLib,GpxExporter,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GpxExporter.cs,ExportOrFindBeat,The following statement contains a magic number: switch (chord.Duration)              {                  case 192:                      rhythm.NoteValue = "Whole";                      break;                  case 168:  // should avoid this' split note instead (TODO)                      rhythm.NoteValue = "Half";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 2 };                      break;                  case 144:                      rhythm.NoteValue = "Half";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 1 };                      break;                  case 96:                      rhythm.NoteValue = "Half";                      break;                  case 84:  // should avoid this' split note instead (TODO)                      rhythm.NoteValue = "Quarter";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 2 };                      break;                  case 72:                      rhythm.NoteValue = "Quarter";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 1 };                      break;                  case 48:                      rhythm.NoteValue = "Quarter";                      break;                  case 36:                      rhythm.NoteValue = "Eighth";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 1 };                      break;                  case 32:                      rhythm.NoteValue = "Quarter";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  case 24:                      rhythm.NoteValue = "Eighth";                      break;                  case 18:                      rhythm.NoteValue = "16th";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 1 };                      break;                  case 16:                      rhythm.NoteValue = "Eighth";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  case 12:                      rhythm.NoteValue = "16th";                      break;                  case 9:                      rhythm.NoteValue = "32nd";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 1 };                      break;                  case 8:                      rhythm.NoteValue = "16th";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  case 6:                      rhythm.NoteValue = "32nd";                      break;                  case 4:                      rhythm.NoteValue = "32nd";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  case 3:                      rhythm.NoteValue = "64th";                      break;                  case 2:                      rhythm.NoteValue = "64th";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  case 1:                      rhythm.NoteValue = "128th";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  default:                      Console.WriteLine("  Warning: Rhythm Duration {0} not handled' defaulting to quarter note."' chord.Duration);                      rhythm.NoteValue = "Quarter";                      break;              }
Magic Number,RocksmithToTabLib,GpxExporter,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GpxExporter.cs,ExportOrFindBeat,The following statement contains a magic number: switch (chord.Duration)              {                  case 192:                      rhythm.NoteValue = "Whole";                      break;                  case 168:  // should avoid this' split note instead (TODO)                      rhythm.NoteValue = "Half";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 2 };                      break;                  case 144:                      rhythm.NoteValue = "Half";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 1 };                      break;                  case 96:                      rhythm.NoteValue = "Half";                      break;                  case 84:  // should avoid this' split note instead (TODO)                      rhythm.NoteValue = "Quarter";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 2 };                      break;                  case 72:                      rhythm.NoteValue = "Quarter";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 1 };                      break;                  case 48:                      rhythm.NoteValue = "Quarter";                      break;                  case 36:                      rhythm.NoteValue = "Eighth";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 1 };                      break;                  case 32:                      rhythm.NoteValue = "Quarter";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  case 24:                      rhythm.NoteValue = "Eighth";                      break;                  case 18:                      rhythm.NoteValue = "16th";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 1 };                      break;                  case 16:                      rhythm.NoteValue = "Eighth";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  case 12:                      rhythm.NoteValue = "16th";                      break;                  case 9:                      rhythm.NoteValue = "32nd";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 1 };                      break;                  case 8:                      rhythm.NoteValue = "16th";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  case 6:                      rhythm.NoteValue = "32nd";                      break;                  case 4:                      rhythm.NoteValue = "32nd";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  case 3:                      rhythm.NoteValue = "64th";                      break;                  case 2:                      rhythm.NoteValue = "64th";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  case 1:                      rhythm.NoteValue = "128th";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  default:                      Console.WriteLine("  Warning: Rhythm Duration {0} not handled' defaulting to quarter note."' chord.Duration);                      rhythm.NoteValue = "Quarter";                      break;              }
Magic Number,RocksmithToTabLib,GpxExporter,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GpxExporter.cs,ExportOrFindBeat,The following statement contains a magic number: switch (chord.Duration)              {                  case 192:                      rhythm.NoteValue = "Whole";                      break;                  case 168:  // should avoid this' split note instead (TODO)                      rhythm.NoteValue = "Half";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 2 };                      break;                  case 144:                      rhythm.NoteValue = "Half";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 1 };                      break;                  case 96:                      rhythm.NoteValue = "Half";                      break;                  case 84:  // should avoid this' split note instead (TODO)                      rhythm.NoteValue = "Quarter";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 2 };                      break;                  case 72:                      rhythm.NoteValue = "Quarter";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 1 };                      break;                  case 48:                      rhythm.NoteValue = "Quarter";                      break;                  case 36:                      rhythm.NoteValue = "Eighth";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 1 };                      break;                  case 32:                      rhythm.NoteValue = "Quarter";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  case 24:                      rhythm.NoteValue = "Eighth";                      break;                  case 18:                      rhythm.NoteValue = "16th";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 1 };                      break;                  case 16:                      rhythm.NoteValue = "Eighth";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  case 12:                      rhythm.NoteValue = "16th";                      break;                  case 9:                      rhythm.NoteValue = "32nd";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 1 };                      break;                  case 8:                      rhythm.NoteValue = "16th";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  case 6:                      rhythm.NoteValue = "32nd";                      break;                  case 4:                      rhythm.NoteValue = "32nd";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  case 3:                      rhythm.NoteValue = "64th";                      break;                  case 2:                      rhythm.NoteValue = "64th";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  case 1:                      rhythm.NoteValue = "128th";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  default:                      Console.WriteLine("  Warning: Rhythm Duration {0} not handled' defaulting to quarter note."' chord.Duration);                      rhythm.NoteValue = "Quarter";                      break;              }
Magic Number,RocksmithToTabLib,GpxExporter,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GpxExporter.cs,ExportOrFindBeat,The following statement contains a magic number: switch (chord.Duration)              {                  case 192:                      rhythm.NoteValue = "Whole";                      break;                  case 168:  // should avoid this' split note instead (TODO)                      rhythm.NoteValue = "Half";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 2 };                      break;                  case 144:                      rhythm.NoteValue = "Half";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 1 };                      break;                  case 96:                      rhythm.NoteValue = "Half";                      break;                  case 84:  // should avoid this' split note instead (TODO)                      rhythm.NoteValue = "Quarter";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 2 };                      break;                  case 72:                      rhythm.NoteValue = "Quarter";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 1 };                      break;                  case 48:                      rhythm.NoteValue = "Quarter";                      break;                  case 36:                      rhythm.NoteValue = "Eighth";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 1 };                      break;                  case 32:                      rhythm.NoteValue = "Quarter";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  case 24:                      rhythm.NoteValue = "Eighth";                      break;                  case 18:                      rhythm.NoteValue = "16th";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 1 };                      break;                  case 16:                      rhythm.NoteValue = "Eighth";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  case 12:                      rhythm.NoteValue = "16th";                      break;                  case 9:                      rhythm.NoteValue = "32nd";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 1 };                      break;                  case 8:                      rhythm.NoteValue = "16th";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  case 6:                      rhythm.NoteValue = "32nd";                      break;                  case 4:                      rhythm.NoteValue = "32nd";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  case 3:                      rhythm.NoteValue = "64th";                      break;                  case 2:                      rhythm.NoteValue = "64th";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  case 1:                      rhythm.NoteValue = "128th";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  default:                      Console.WriteLine("  Warning: Rhythm Duration {0} not handled' defaulting to quarter note."' chord.Duration);                      rhythm.NoteValue = "Quarter";                      break;              }
Magic Number,RocksmithToTabLib,GpxExporter,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GpxExporter.cs,ExportOrFindBeat,The following statement contains a magic number: switch (chord.Duration)              {                  case 192:                      rhythm.NoteValue = "Whole";                      break;                  case 168:  // should avoid this' split note instead (TODO)                      rhythm.NoteValue = "Half";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 2 };                      break;                  case 144:                      rhythm.NoteValue = "Half";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 1 };                      break;                  case 96:                      rhythm.NoteValue = "Half";                      break;                  case 84:  // should avoid this' split note instead (TODO)                      rhythm.NoteValue = "Quarter";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 2 };                      break;                  case 72:                      rhythm.NoteValue = "Quarter";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 1 };                      break;                  case 48:                      rhythm.NoteValue = "Quarter";                      break;                  case 36:                      rhythm.NoteValue = "Eighth";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 1 };                      break;                  case 32:                      rhythm.NoteValue = "Quarter";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  case 24:                      rhythm.NoteValue = "Eighth";                      break;                  case 18:                      rhythm.NoteValue = "16th";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 1 };                      break;                  case 16:                      rhythm.NoteValue = "Eighth";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  case 12:                      rhythm.NoteValue = "16th";                      break;                  case 9:                      rhythm.NoteValue = "32nd";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 1 };                      break;                  case 8:                      rhythm.NoteValue = "16th";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  case 6:                      rhythm.NoteValue = "32nd";                      break;                  case 4:                      rhythm.NoteValue = "32nd";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  case 3:                      rhythm.NoteValue = "64th";                      break;                  case 2:                      rhythm.NoteValue = "64th";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  case 1:                      rhythm.NoteValue = "128th";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  default:                      Console.WriteLine("  Warning: Rhythm Duration {0} not handled' defaulting to quarter note."' chord.Duration);                      rhythm.NoteValue = "Quarter";                      break;              }
Magic Number,RocksmithToTabLib,GpxExporter,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GpxExporter.cs,ExportOrFindBeat,The following statement contains a magic number: switch (chord.Duration)              {                  case 192:                      rhythm.NoteValue = "Whole";                      break;                  case 168:  // should avoid this' split note instead (TODO)                      rhythm.NoteValue = "Half";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 2 };                      break;                  case 144:                      rhythm.NoteValue = "Half";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 1 };                      break;                  case 96:                      rhythm.NoteValue = "Half";                      break;                  case 84:  // should avoid this' split note instead (TODO)                      rhythm.NoteValue = "Quarter";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 2 };                      break;                  case 72:                      rhythm.NoteValue = "Quarter";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 1 };                      break;                  case 48:                      rhythm.NoteValue = "Quarter";                      break;                  case 36:                      rhythm.NoteValue = "Eighth";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 1 };                      break;                  case 32:                      rhythm.NoteValue = "Quarter";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  case 24:                      rhythm.NoteValue = "Eighth";                      break;                  case 18:                      rhythm.NoteValue = "16th";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 1 };                      break;                  case 16:                      rhythm.NoteValue = "Eighth";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  case 12:                      rhythm.NoteValue = "16th";                      break;                  case 9:                      rhythm.NoteValue = "32nd";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 1 };                      break;                  case 8:                      rhythm.NoteValue = "16th";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  case 6:                      rhythm.NoteValue = "32nd";                      break;                  case 4:                      rhythm.NoteValue = "32nd";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  case 3:                      rhythm.NoteValue = "64th";                      break;                  case 2:                      rhythm.NoteValue = "64th";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  case 1:                      rhythm.NoteValue = "128th";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  default:                      Console.WriteLine("  Warning: Rhythm Duration {0} not handled' defaulting to quarter note."' chord.Duration);                      rhythm.NoteValue = "Quarter";                      break;              }
Magic Number,RocksmithToTabLib,GpxExporter,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GpxExporter.cs,ExportOrFindBeat,The following statement contains a magic number: switch (chord.Duration)              {                  case 192:                      rhythm.NoteValue = "Whole";                      break;                  case 168:  // should avoid this' split note instead (TODO)                      rhythm.NoteValue = "Half";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 2 };                      break;                  case 144:                      rhythm.NoteValue = "Half";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 1 };                      break;                  case 96:                      rhythm.NoteValue = "Half";                      break;                  case 84:  // should avoid this' split note instead (TODO)                      rhythm.NoteValue = "Quarter";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 2 };                      break;                  case 72:                      rhythm.NoteValue = "Quarter";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 1 };                      break;                  case 48:                      rhythm.NoteValue = "Quarter";                      break;                  case 36:                      rhythm.NoteValue = "Eighth";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 1 };                      break;                  case 32:                      rhythm.NoteValue = "Quarter";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  case 24:                      rhythm.NoteValue = "Eighth";                      break;                  case 18:                      rhythm.NoteValue = "16th";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 1 };                      break;                  case 16:                      rhythm.NoteValue = "Eighth";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  case 12:                      rhythm.NoteValue = "16th";                      break;                  case 9:                      rhythm.NoteValue = "32nd";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 1 };                      break;                  case 8:                      rhythm.NoteValue = "16th";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  case 6:                      rhythm.NoteValue = "32nd";                      break;                  case 4:                      rhythm.NoteValue = "32nd";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  case 3:                      rhythm.NoteValue = "64th";                      break;                  case 2:                      rhythm.NoteValue = "64th";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  case 1:                      rhythm.NoteValue = "128th";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  default:                      Console.WriteLine("  Warning: Rhythm Duration {0} not handled' defaulting to quarter note."' chord.Duration);                      rhythm.NoteValue = "Quarter";                      break;              }
Magic Number,RocksmithToTabLib,GpxExporter,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GpxExporter.cs,ExportOrFindBeat,The following statement contains a magic number: switch (chord.Duration)              {                  case 192:                      rhythm.NoteValue = "Whole";                      break;                  case 168:  // should avoid this' split note instead (TODO)                      rhythm.NoteValue = "Half";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 2 };                      break;                  case 144:                      rhythm.NoteValue = "Half";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 1 };                      break;                  case 96:                      rhythm.NoteValue = "Half";                      break;                  case 84:  // should avoid this' split note instead (TODO)                      rhythm.NoteValue = "Quarter";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 2 };                      break;                  case 72:                      rhythm.NoteValue = "Quarter";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 1 };                      break;                  case 48:                      rhythm.NoteValue = "Quarter";                      break;                  case 36:                      rhythm.NoteValue = "Eighth";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 1 };                      break;                  case 32:                      rhythm.NoteValue = "Quarter";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  case 24:                      rhythm.NoteValue = "Eighth";                      break;                  case 18:                      rhythm.NoteValue = "16th";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 1 };                      break;                  case 16:                      rhythm.NoteValue = "Eighth";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  case 12:                      rhythm.NoteValue = "16th";                      break;                  case 9:                      rhythm.NoteValue = "32nd";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 1 };                      break;                  case 8:                      rhythm.NoteValue = "16th";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  case 6:                      rhythm.NoteValue = "32nd";                      break;                  case 4:                      rhythm.NoteValue = "32nd";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  case 3:                      rhythm.NoteValue = "64th";                      break;                  case 2:                      rhythm.NoteValue = "64th";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  case 1:                      rhythm.NoteValue = "128th";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  default:                      Console.WriteLine("  Warning: Rhythm Duration {0} not handled' defaulting to quarter note."' chord.Duration);                      rhythm.NoteValue = "Quarter";                      break;              }
Magic Number,RocksmithToTabLib,GpxExporter,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GpxExporter.cs,ExportOrFindBeat,The following statement contains a magic number: switch (chord.Duration)              {                  case 192:                      rhythm.NoteValue = "Whole";                      break;                  case 168:  // should avoid this' split note instead (TODO)                      rhythm.NoteValue = "Half";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 2 };                      break;                  case 144:                      rhythm.NoteValue = "Half";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 1 };                      break;                  case 96:                      rhythm.NoteValue = "Half";                      break;                  case 84:  // should avoid this' split note instead (TODO)                      rhythm.NoteValue = "Quarter";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 2 };                      break;                  case 72:                      rhythm.NoteValue = "Quarter";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 1 };                      break;                  case 48:                      rhythm.NoteValue = "Quarter";                      break;                  case 36:                      rhythm.NoteValue = "Eighth";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 1 };                      break;                  case 32:                      rhythm.NoteValue = "Quarter";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  case 24:                      rhythm.NoteValue = "Eighth";                      break;                  case 18:                      rhythm.NoteValue = "16th";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 1 };                      break;                  case 16:                      rhythm.NoteValue = "Eighth";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  case 12:                      rhythm.NoteValue = "16th";                      break;                  case 9:                      rhythm.NoteValue = "32nd";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 1 };                      break;                  case 8:                      rhythm.NoteValue = "16th";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  case 6:                      rhythm.NoteValue = "32nd";                      break;                  case 4:                      rhythm.NoteValue = "32nd";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  case 3:                      rhythm.NoteValue = "64th";                      break;                  case 2:                      rhythm.NoteValue = "64th";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  case 1:                      rhythm.NoteValue = "128th";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  default:                      Console.WriteLine("  Warning: Rhythm Duration {0} not handled' defaulting to quarter note."' chord.Duration);                      rhythm.NoteValue = "Quarter";                      break;              }
Magic Number,RocksmithToTabLib,GpxExporter,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GpxExporter.cs,ExportOrFindBeat,The following statement contains a magic number: switch (chord.Duration)              {                  case 192:                      rhythm.NoteValue = "Whole";                      break;                  case 168:  // should avoid this' split note instead (TODO)                      rhythm.NoteValue = "Half";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 2 };                      break;                  case 144:                      rhythm.NoteValue = "Half";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 1 };                      break;                  case 96:                      rhythm.NoteValue = "Half";                      break;                  case 84:  // should avoid this' split note instead (TODO)                      rhythm.NoteValue = "Quarter";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 2 };                      break;                  case 72:                      rhythm.NoteValue = "Quarter";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 1 };                      break;                  case 48:                      rhythm.NoteValue = "Quarter";                      break;                  case 36:                      rhythm.NoteValue = "Eighth";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 1 };                      break;                  case 32:                      rhythm.NoteValue = "Quarter";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  case 24:                      rhythm.NoteValue = "Eighth";                      break;                  case 18:                      rhythm.NoteValue = "16th";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 1 };                      break;                  case 16:                      rhythm.NoteValue = "Eighth";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  case 12:                      rhythm.NoteValue = "16th";                      break;                  case 9:                      rhythm.NoteValue = "32nd";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 1 };                      break;                  case 8:                      rhythm.NoteValue = "16th";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  case 6:                      rhythm.NoteValue = "32nd";                      break;                  case 4:                      rhythm.NoteValue = "32nd";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  case 3:                      rhythm.NoteValue = "64th";                      break;                  case 2:                      rhythm.NoteValue = "64th";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  case 1:                      rhythm.NoteValue = "128th";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  default:                      Console.WriteLine("  Warning: Rhythm Duration {0} not handled' defaulting to quarter note."' chord.Duration);                      rhythm.NoteValue = "Quarter";                      break;              }
Magic Number,RocksmithToTabLib,GpxExporter,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GpxExporter.cs,ExportOrFindBeat,The following statement contains a magic number: switch (chord.Duration)              {                  case 192:                      rhythm.NoteValue = "Whole";                      break;                  case 168:  // should avoid this' split note instead (TODO)                      rhythm.NoteValue = "Half";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 2 };                      break;                  case 144:                      rhythm.NoteValue = "Half";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 1 };                      break;                  case 96:                      rhythm.NoteValue = "Half";                      break;                  case 84:  // should avoid this' split note instead (TODO)                      rhythm.NoteValue = "Quarter";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 2 };                      break;                  case 72:                      rhythm.NoteValue = "Quarter";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 1 };                      break;                  case 48:                      rhythm.NoteValue = "Quarter";                      break;                  case 36:                      rhythm.NoteValue = "Eighth";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 1 };                      break;                  case 32:                      rhythm.NoteValue = "Quarter";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  case 24:                      rhythm.NoteValue = "Eighth";                      break;                  case 18:                      rhythm.NoteValue = "16th";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 1 };                      break;                  case 16:                      rhythm.NoteValue = "Eighth";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  case 12:                      rhythm.NoteValue = "16th";                      break;                  case 9:                      rhythm.NoteValue = "32nd";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 1 };                      break;                  case 8:                      rhythm.NoteValue = "16th";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  case 6:                      rhythm.NoteValue = "32nd";                      break;                  case 4:                      rhythm.NoteValue = "32nd";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  case 3:                      rhythm.NoteValue = "64th";                      break;                  case 2:                      rhythm.NoteValue = "64th";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  case 1:                      rhythm.NoteValue = "128th";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  default:                      Console.WriteLine("  Warning: Rhythm Duration {0} not handled' defaulting to quarter note."' chord.Duration);                      rhythm.NoteValue = "Quarter";                      break;              }
Magic Number,RocksmithToTabLib,GpxExporter,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GpxExporter.cs,ExportOrFindBeat,The following statement contains a magic number: switch (chord.Duration)              {                  case 192:                      rhythm.NoteValue = "Whole";                      break;                  case 168:  // should avoid this' split note instead (TODO)                      rhythm.NoteValue = "Half";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 2 };                      break;                  case 144:                      rhythm.NoteValue = "Half";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 1 };                      break;                  case 96:                      rhythm.NoteValue = "Half";                      break;                  case 84:  // should avoid this' split note instead (TODO)                      rhythm.NoteValue = "Quarter";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 2 };                      break;                  case 72:                      rhythm.NoteValue = "Quarter";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 1 };                      break;                  case 48:                      rhythm.NoteValue = "Quarter";                      break;                  case 36:                      rhythm.NoteValue = "Eighth";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 1 };                      break;                  case 32:                      rhythm.NoteValue = "Quarter";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  case 24:                      rhythm.NoteValue = "Eighth";                      break;                  case 18:                      rhythm.NoteValue = "16th";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 1 };                      break;                  case 16:                      rhythm.NoteValue = "Eighth";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  case 12:                      rhythm.NoteValue = "16th";                      break;                  case 9:                      rhythm.NoteValue = "32nd";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 1 };                      break;                  case 8:                      rhythm.NoteValue = "16th";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  case 6:                      rhythm.NoteValue = "32nd";                      break;                  case 4:                      rhythm.NoteValue = "32nd";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  case 3:                      rhythm.NoteValue = "64th";                      break;                  case 2:                      rhythm.NoteValue = "64th";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  case 1:                      rhythm.NoteValue = "128th";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  default:                      Console.WriteLine("  Warning: Rhythm Duration {0} not handled' defaulting to quarter note."' chord.Duration);                      rhythm.NoteValue = "Quarter";                      break;              }
Magic Number,RocksmithToTabLib,GpxExporter,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GpxExporter.cs,ExportOrFindBeat,The following statement contains a magic number: switch (chord.Duration)              {                  case 192:                      rhythm.NoteValue = "Whole";                      break;                  case 168:  // should avoid this' split note instead (TODO)                      rhythm.NoteValue = "Half";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 2 };                      break;                  case 144:                      rhythm.NoteValue = "Half";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 1 };                      break;                  case 96:                      rhythm.NoteValue = "Half";                      break;                  case 84:  // should avoid this' split note instead (TODO)                      rhythm.NoteValue = "Quarter";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 2 };                      break;                  case 72:                      rhythm.NoteValue = "Quarter";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 1 };                      break;                  case 48:                      rhythm.NoteValue = "Quarter";                      break;                  case 36:                      rhythm.NoteValue = "Eighth";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 1 };                      break;                  case 32:                      rhythm.NoteValue = "Quarter";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  case 24:                      rhythm.NoteValue = "Eighth";                      break;                  case 18:                      rhythm.NoteValue = "16th";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 1 };                      break;                  case 16:                      rhythm.NoteValue = "Eighth";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  case 12:                      rhythm.NoteValue = "16th";                      break;                  case 9:                      rhythm.NoteValue = "32nd";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 1 };                      break;                  case 8:                      rhythm.NoteValue = "16th";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  case 6:                      rhythm.NoteValue = "32nd";                      break;                  case 4:                      rhythm.NoteValue = "32nd";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  case 3:                      rhythm.NoteValue = "64th";                      break;                  case 2:                      rhythm.NoteValue = "64th";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  case 1:                      rhythm.NoteValue = "128th";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  default:                      Console.WriteLine("  Warning: Rhythm Duration {0} not handled' defaulting to quarter note."' chord.Duration);                      rhythm.NoteValue = "Quarter";                      break;              }
Magic Number,RocksmithToTabLib,GpxExporter,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GpxExporter.cs,ExportOrFindBeat,The following statement contains a magic number: switch (chord.Duration)              {                  case 192:                      rhythm.NoteValue = "Whole";                      break;                  case 168:  // should avoid this' split note instead (TODO)                      rhythm.NoteValue = "Half";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 2 };                      break;                  case 144:                      rhythm.NoteValue = "Half";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 1 };                      break;                  case 96:                      rhythm.NoteValue = "Half";                      break;                  case 84:  // should avoid this' split note instead (TODO)                      rhythm.NoteValue = "Quarter";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 2 };                      break;                  case 72:                      rhythm.NoteValue = "Quarter";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 1 };                      break;                  case 48:                      rhythm.NoteValue = "Quarter";                      break;                  case 36:                      rhythm.NoteValue = "Eighth";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 1 };                      break;                  case 32:                      rhythm.NoteValue = "Quarter";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  case 24:                      rhythm.NoteValue = "Eighth";                      break;                  case 18:                      rhythm.NoteValue = "16th";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 1 };                      break;                  case 16:                      rhythm.NoteValue = "Eighth";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  case 12:                      rhythm.NoteValue = "16th";                      break;                  case 9:                      rhythm.NoteValue = "32nd";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 1 };                      break;                  case 8:                      rhythm.NoteValue = "16th";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  case 6:                      rhythm.NoteValue = "32nd";                      break;                  case 4:                      rhythm.NoteValue = "32nd";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  case 3:                      rhythm.NoteValue = "64th";                      break;                  case 2:                      rhythm.NoteValue = "64th";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  case 1:                      rhythm.NoteValue = "128th";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  default:                      Console.WriteLine("  Warning: Rhythm Duration {0} not handled' defaulting to quarter note."' chord.Duration);                      rhythm.NoteValue = "Quarter";                      break;              }
Magic Number,RocksmithToTabLib,GpxExporter,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GpxExporter.cs,ExportOrFindBeat,The following statement contains a magic number: switch (chord.Duration)              {                  case 192:                      rhythm.NoteValue = "Whole";                      break;                  case 168:  // should avoid this' split note instead (TODO)                      rhythm.NoteValue = "Half";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 2 };                      break;                  case 144:                      rhythm.NoteValue = "Half";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 1 };                      break;                  case 96:                      rhythm.NoteValue = "Half";                      break;                  case 84:  // should avoid this' split note instead (TODO)                      rhythm.NoteValue = "Quarter";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 2 };                      break;                  case 72:                      rhythm.NoteValue = "Quarter";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 1 };                      break;                  case 48:                      rhythm.NoteValue = "Quarter";                      break;                  case 36:                      rhythm.NoteValue = "Eighth";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 1 };                      break;                  case 32:                      rhythm.NoteValue = "Quarter";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  case 24:                      rhythm.NoteValue = "Eighth";                      break;                  case 18:                      rhythm.NoteValue = "16th";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 1 };                      break;                  case 16:                      rhythm.NoteValue = "Eighth";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  case 12:                      rhythm.NoteValue = "16th";                      break;                  case 9:                      rhythm.NoteValue = "32nd";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 1 };                      break;                  case 8:                      rhythm.NoteValue = "16th";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  case 6:                      rhythm.NoteValue = "32nd";                      break;                  case 4:                      rhythm.NoteValue = "32nd";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  case 3:                      rhythm.NoteValue = "64th";                      break;                  case 2:                      rhythm.NoteValue = "64th";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  case 1:                      rhythm.NoteValue = "128th";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  default:                      Console.WriteLine("  Warning: Rhythm Duration {0} not handled' defaulting to quarter note."' chord.Duration);                      rhythm.NoteValue = "Quarter";                      break;              }
Magic Number,RocksmithToTabLib,GpxExporter,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GpxExporter.cs,ExportOrFindBeat,The following statement contains a magic number: switch (chord.Duration)              {                  case 192:                      rhythm.NoteValue = "Whole";                      break;                  case 168:  // should avoid this' split note instead (TODO)                      rhythm.NoteValue = "Half";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 2 };                      break;                  case 144:                      rhythm.NoteValue = "Half";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 1 };                      break;                  case 96:                      rhythm.NoteValue = "Half";                      break;                  case 84:  // should avoid this' split note instead (TODO)                      rhythm.NoteValue = "Quarter";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 2 };                      break;                  case 72:                      rhythm.NoteValue = "Quarter";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 1 };                      break;                  case 48:                      rhythm.NoteValue = "Quarter";                      break;                  case 36:                      rhythm.NoteValue = "Eighth";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 1 };                      break;                  case 32:                      rhythm.NoteValue = "Quarter";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  case 24:                      rhythm.NoteValue = "Eighth";                      break;                  case 18:                      rhythm.NoteValue = "16th";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 1 };                      break;                  case 16:                      rhythm.NoteValue = "Eighth";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  case 12:                      rhythm.NoteValue = "16th";                      break;                  case 9:                      rhythm.NoteValue = "32nd";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 1 };                      break;                  case 8:                      rhythm.NoteValue = "16th";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  case 6:                      rhythm.NoteValue = "32nd";                      break;                  case 4:                      rhythm.NoteValue = "32nd";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  case 3:                      rhythm.NoteValue = "64th";                      break;                  case 2:                      rhythm.NoteValue = "64th";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  case 1:                      rhythm.NoteValue = "128th";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  default:                      Console.WriteLine("  Warning: Rhythm Duration {0} not handled' defaulting to quarter note."' chord.Duration);                      rhythm.NoteValue = "Quarter";                      break;              }
Magic Number,RocksmithToTabLib,GpxExporter,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GpxExporter.cs,ExportOrFindBeat,The following statement contains a magic number: switch (chord.Duration)              {                  case 192:                      rhythm.NoteValue = "Whole";                      break;                  case 168:  // should avoid this' split note instead (TODO)                      rhythm.NoteValue = "Half";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 2 };                      break;                  case 144:                      rhythm.NoteValue = "Half";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 1 };                      break;                  case 96:                      rhythm.NoteValue = "Half";                      break;                  case 84:  // should avoid this' split note instead (TODO)                      rhythm.NoteValue = "Quarter";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 2 };                      break;                  case 72:                      rhythm.NoteValue = "Quarter";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 1 };                      break;                  case 48:                      rhythm.NoteValue = "Quarter";                      break;                  case 36:                      rhythm.NoteValue = "Eighth";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 1 };                      break;                  case 32:                      rhythm.NoteValue = "Quarter";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  case 24:                      rhythm.NoteValue = "Eighth";                      break;                  case 18:                      rhythm.NoteValue = "16th";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 1 };                      break;                  case 16:                      rhythm.NoteValue = "Eighth";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  case 12:                      rhythm.NoteValue = "16th";                      break;                  case 9:                      rhythm.NoteValue = "32nd";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 1 };                      break;                  case 8:                      rhythm.NoteValue = "16th";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  case 6:                      rhythm.NoteValue = "32nd";                      break;                  case 4:                      rhythm.NoteValue = "32nd";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  case 3:                      rhythm.NoteValue = "64th";                      break;                  case 2:                      rhythm.NoteValue = "64th";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  case 1:                      rhythm.NoteValue = "128th";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  default:                      Console.WriteLine("  Warning: Rhythm Duration {0} not handled' defaulting to quarter note."' chord.Duration);                      rhythm.NoteValue = "Quarter";                      break;              }
Magic Number,RocksmithToTabLib,GpxExporter,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GpxExporter.cs,ExportOrFindBeat,The following statement contains a magic number: switch (chord.Duration)              {                  case 192:                      rhythm.NoteValue = "Whole";                      break;                  case 168:  // should avoid this' split note instead (TODO)                      rhythm.NoteValue = "Half";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 2 };                      break;                  case 144:                      rhythm.NoteValue = "Half";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 1 };                      break;                  case 96:                      rhythm.NoteValue = "Half";                      break;                  case 84:  // should avoid this' split note instead (TODO)                      rhythm.NoteValue = "Quarter";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 2 };                      break;                  case 72:                      rhythm.NoteValue = "Quarter";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 1 };                      break;                  case 48:                      rhythm.NoteValue = "Quarter";                      break;                  case 36:                      rhythm.NoteValue = "Eighth";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 1 };                      break;                  case 32:                      rhythm.NoteValue = "Quarter";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  case 24:                      rhythm.NoteValue = "Eighth";                      break;                  case 18:                      rhythm.NoteValue = "16th";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 1 };                      break;                  case 16:                      rhythm.NoteValue = "Eighth";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  case 12:                      rhythm.NoteValue = "16th";                      break;                  case 9:                      rhythm.NoteValue = "32nd";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 1 };                      break;                  case 8:                      rhythm.NoteValue = "16th";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  case 6:                      rhythm.NoteValue = "32nd";                      break;                  case 4:                      rhythm.NoteValue = "32nd";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  case 3:                      rhythm.NoteValue = "64th";                      break;                  case 2:                      rhythm.NoteValue = "64th";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  case 1:                      rhythm.NoteValue = "128th";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  default:                      Console.WriteLine("  Warning: Rhythm Duration {0} not handled' defaulting to quarter note."' chord.Duration);                      rhythm.NoteValue = "Quarter";                      break;              }
Magic Number,RocksmithToTabLib,GpxExporter,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GpxExporter.cs,ExportOrFindBeat,The following statement contains a magic number: switch (chord.Duration)              {                  case 192:                      rhythm.NoteValue = "Whole";                      break;                  case 168:  // should avoid this' split note instead (TODO)                      rhythm.NoteValue = "Half";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 2 };                      break;                  case 144:                      rhythm.NoteValue = "Half";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 1 };                      break;                  case 96:                      rhythm.NoteValue = "Half";                      break;                  case 84:  // should avoid this' split note instead (TODO)                      rhythm.NoteValue = "Quarter";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 2 };                      break;                  case 72:                      rhythm.NoteValue = "Quarter";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 1 };                      break;                  case 48:                      rhythm.NoteValue = "Quarter";                      break;                  case 36:                      rhythm.NoteValue = "Eighth";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 1 };                      break;                  case 32:                      rhythm.NoteValue = "Quarter";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  case 24:                      rhythm.NoteValue = "Eighth";                      break;                  case 18:                      rhythm.NoteValue = "16th";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 1 };                      break;                  case 16:                      rhythm.NoteValue = "Eighth";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  case 12:                      rhythm.NoteValue = "16th";                      break;                  case 9:                      rhythm.NoteValue = "32nd";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 1 };                      break;                  case 8:                      rhythm.NoteValue = "16th";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  case 6:                      rhythm.NoteValue = "32nd";                      break;                  case 4:                      rhythm.NoteValue = "32nd";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  case 3:                      rhythm.NoteValue = "64th";                      break;                  case 2:                      rhythm.NoteValue = "64th";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  case 1:                      rhythm.NoteValue = "128th";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  default:                      Console.WriteLine("  Warning: Rhythm Duration {0} not handled' defaulting to quarter note."' chord.Duration);                      rhythm.NoteValue = "Quarter";                      break;              }
Magic Number,RocksmithToTabLib,GpxExporter,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GpxExporter.cs,ExportOrFindBeat,The following statement contains a magic number: switch (chord.Duration)              {                  case 192:                      rhythm.NoteValue = "Whole";                      break;                  case 168:  // should avoid this' split note instead (TODO)                      rhythm.NoteValue = "Half";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 2 };                      break;                  case 144:                      rhythm.NoteValue = "Half";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 1 };                      break;                  case 96:                      rhythm.NoteValue = "Half";                      break;                  case 84:  // should avoid this' split note instead (TODO)                      rhythm.NoteValue = "Quarter";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 2 };                      break;                  case 72:                      rhythm.NoteValue = "Quarter";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 1 };                      break;                  case 48:                      rhythm.NoteValue = "Quarter";                      break;                  case 36:                      rhythm.NoteValue = "Eighth";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 1 };                      break;                  case 32:                      rhythm.NoteValue = "Quarter";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  case 24:                      rhythm.NoteValue = "Eighth";                      break;                  case 18:                      rhythm.NoteValue = "16th";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 1 };                      break;                  case 16:                      rhythm.NoteValue = "Eighth";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  case 12:                      rhythm.NoteValue = "16th";                      break;                  case 9:                      rhythm.NoteValue = "32nd";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 1 };                      break;                  case 8:                      rhythm.NoteValue = "16th";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  case 6:                      rhythm.NoteValue = "32nd";                      break;                  case 4:                      rhythm.NoteValue = "32nd";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  case 3:                      rhythm.NoteValue = "64th";                      break;                  case 2:                      rhythm.NoteValue = "64th";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  case 1:                      rhythm.NoteValue = "128th";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  default:                      Console.WriteLine("  Warning: Rhythm Duration {0} not handled' defaulting to quarter note."' chord.Duration);                      rhythm.NoteValue = "Quarter";                      break;              }
Magic Number,RocksmithToTabLib,GpxExporter,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GpxExporter.cs,ExportOrFindBeat,The following statement contains a magic number: switch (chord.Duration)              {                  case 192:                      rhythm.NoteValue = "Whole";                      break;                  case 168:  // should avoid this' split note instead (TODO)                      rhythm.NoteValue = "Half";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 2 };                      break;                  case 144:                      rhythm.NoteValue = "Half";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 1 };                      break;                  case 96:                      rhythm.NoteValue = "Half";                      break;                  case 84:  // should avoid this' split note instead (TODO)                      rhythm.NoteValue = "Quarter";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 2 };                      break;                  case 72:                      rhythm.NoteValue = "Quarter";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 1 };                      break;                  case 48:                      rhythm.NoteValue = "Quarter";                      break;                  case 36:                      rhythm.NoteValue = "Eighth";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 1 };                      break;                  case 32:                      rhythm.NoteValue = "Quarter";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  case 24:                      rhythm.NoteValue = "Eighth";                      break;                  case 18:                      rhythm.NoteValue = "16th";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 1 };                      break;                  case 16:                      rhythm.NoteValue = "Eighth";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  case 12:                      rhythm.NoteValue = "16th";                      break;                  case 9:                      rhythm.NoteValue = "32nd";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 1 };                      break;                  case 8:                      rhythm.NoteValue = "16th";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  case 6:                      rhythm.NoteValue = "32nd";                      break;                  case 4:                      rhythm.NoteValue = "32nd";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  case 3:                      rhythm.NoteValue = "64th";                      break;                  case 2:                      rhythm.NoteValue = "64th";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  case 1:                      rhythm.NoteValue = "128th";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  default:                      Console.WriteLine("  Warning: Rhythm Duration {0} not handled' defaulting to quarter note."' chord.Duration);                      rhythm.NoteValue = "Quarter";                      break;              }
Magic Number,RocksmithToTabLib,GpxExporter,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GpxExporter.cs,ExportOrFindBeat,The following statement contains a magic number: switch (chord.Duration)              {                  case 192:                      rhythm.NoteValue = "Whole";                      break;                  case 168:  // should avoid this' split note instead (TODO)                      rhythm.NoteValue = "Half";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 2 };                      break;                  case 144:                      rhythm.NoteValue = "Half";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 1 };                      break;                  case 96:                      rhythm.NoteValue = "Half";                      break;                  case 84:  // should avoid this' split note instead (TODO)                      rhythm.NoteValue = "Quarter";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 2 };                      break;                  case 72:                      rhythm.NoteValue = "Quarter";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 1 };                      break;                  case 48:                      rhythm.NoteValue = "Quarter";                      break;                  case 36:                      rhythm.NoteValue = "Eighth";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 1 };                      break;                  case 32:                      rhythm.NoteValue = "Quarter";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  case 24:                      rhythm.NoteValue = "Eighth";                      break;                  case 18:                      rhythm.NoteValue = "16th";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 1 };                      break;                  case 16:                      rhythm.NoteValue = "Eighth";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  case 12:                      rhythm.NoteValue = "16th";                      break;                  case 9:                      rhythm.NoteValue = "32nd";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 1 };                      break;                  case 8:                      rhythm.NoteValue = "16th";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  case 6:                      rhythm.NoteValue = "32nd";                      break;                  case 4:                      rhythm.NoteValue = "32nd";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  case 3:                      rhythm.NoteValue = "64th";                      break;                  case 2:                      rhythm.NoteValue = "64th";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  case 1:                      rhythm.NoteValue = "128th";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  default:                      Console.WriteLine("  Warning: Rhythm Duration {0} not handled' defaulting to quarter note."' chord.Duration);                      rhythm.NoteValue = "Quarter";                      break;              }
Magic Number,RocksmithToTabLib,GpxExporter,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GpxExporter.cs,ExportOrFindBeat,The following statement contains a magic number: switch (chord.Duration)              {                  case 192:                      rhythm.NoteValue = "Whole";                      break;                  case 168:  // should avoid this' split note instead (TODO)                      rhythm.NoteValue = "Half";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 2 };                      break;                  case 144:                      rhythm.NoteValue = "Half";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 1 };                      break;                  case 96:                      rhythm.NoteValue = "Half";                      break;                  case 84:  // should avoid this' split note instead (TODO)                      rhythm.NoteValue = "Quarter";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 2 };                      break;                  case 72:                      rhythm.NoteValue = "Quarter";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 1 };                      break;                  case 48:                      rhythm.NoteValue = "Quarter";                      break;                  case 36:                      rhythm.NoteValue = "Eighth";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 1 };                      break;                  case 32:                      rhythm.NoteValue = "Quarter";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  case 24:                      rhythm.NoteValue = "Eighth";                      break;                  case 18:                      rhythm.NoteValue = "16th";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 1 };                      break;                  case 16:                      rhythm.NoteValue = "Eighth";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  case 12:                      rhythm.NoteValue = "16th";                      break;                  case 9:                      rhythm.NoteValue = "32nd";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 1 };                      break;                  case 8:                      rhythm.NoteValue = "16th";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  case 6:                      rhythm.NoteValue = "32nd";                      break;                  case 4:                      rhythm.NoteValue = "32nd";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  case 3:                      rhythm.NoteValue = "64th";                      break;                  case 2:                      rhythm.NoteValue = "64th";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  case 1:                      rhythm.NoteValue = "128th";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  default:                      Console.WriteLine("  Warning: Rhythm Duration {0} not handled' defaulting to quarter note."' chord.Duration);                      rhythm.NoteValue = "Quarter";                      break;              }
Magic Number,RocksmithToTabLib,GpxExporter,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GpxExporter.cs,ExportOrFindBeat,The following statement contains a magic number: switch (chord.Duration)              {                  case 192:                      rhythm.NoteValue = "Whole";                      break;                  case 168:  // should avoid this' split note instead (TODO)                      rhythm.NoteValue = "Half";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 2 };                      break;                  case 144:                      rhythm.NoteValue = "Half";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 1 };                      break;                  case 96:                      rhythm.NoteValue = "Half";                      break;                  case 84:  // should avoid this' split note instead (TODO)                      rhythm.NoteValue = "Quarter";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 2 };                      break;                  case 72:                      rhythm.NoteValue = "Quarter";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 1 };                      break;                  case 48:                      rhythm.NoteValue = "Quarter";                      break;                  case 36:                      rhythm.NoteValue = "Eighth";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 1 };                      break;                  case 32:                      rhythm.NoteValue = "Quarter";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  case 24:                      rhythm.NoteValue = "Eighth";                      break;                  case 18:                      rhythm.NoteValue = "16th";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 1 };                      break;                  case 16:                      rhythm.NoteValue = "Eighth";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  case 12:                      rhythm.NoteValue = "16th";                      break;                  case 9:                      rhythm.NoteValue = "32nd";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 1 };                      break;                  case 8:                      rhythm.NoteValue = "16th";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  case 6:                      rhythm.NoteValue = "32nd";                      break;                  case 4:                      rhythm.NoteValue = "32nd";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  case 3:                      rhythm.NoteValue = "64th";                      break;                  case 2:                      rhythm.NoteValue = "64th";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  case 1:                      rhythm.NoteValue = "128th";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  default:                      Console.WriteLine("  Warning: Rhythm Duration {0} not handled' defaulting to quarter note."' chord.Duration);                      rhythm.NoteValue = "Quarter";                      break;              }
Magic Number,RocksmithToTabLib,GpxExporter,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GpxExporter.cs,ExportOrFindBeat,The following statement contains a magic number: switch (chord.Duration)              {                  case 192:                      rhythm.NoteValue = "Whole";                      break;                  case 168:  // should avoid this' split note instead (TODO)                      rhythm.NoteValue = "Half";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 2 };                      break;                  case 144:                      rhythm.NoteValue = "Half";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 1 };                      break;                  case 96:                      rhythm.NoteValue = "Half";                      break;                  case 84:  // should avoid this' split note instead (TODO)                      rhythm.NoteValue = "Quarter";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 2 };                      break;                  case 72:                      rhythm.NoteValue = "Quarter";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 1 };                      break;                  case 48:                      rhythm.NoteValue = "Quarter";                      break;                  case 36:                      rhythm.NoteValue = "Eighth";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 1 };                      break;                  case 32:                      rhythm.NoteValue = "Quarter";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  case 24:                      rhythm.NoteValue = "Eighth";                      break;                  case 18:                      rhythm.NoteValue = "16th";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 1 };                      break;                  case 16:                      rhythm.NoteValue = "Eighth";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  case 12:                      rhythm.NoteValue = "16th";                      break;                  case 9:                      rhythm.NoteValue = "32nd";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 1 };                      break;                  case 8:                      rhythm.NoteValue = "16th";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  case 6:                      rhythm.NoteValue = "32nd";                      break;                  case 4:                      rhythm.NoteValue = "32nd";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  case 3:                      rhythm.NoteValue = "64th";                      break;                  case 2:                      rhythm.NoteValue = "64th";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  case 1:                      rhythm.NoteValue = "128th";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  default:                      Console.WriteLine("  Warning: Rhythm Duration {0} not handled' defaulting to quarter note."' chord.Duration);                      rhythm.NoteValue = "Quarter";                      break;              }
Magic Number,RocksmithToTabLib,GpxExporter,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GpxExporter.cs,ExportOrFindBeat,The following statement contains a magic number: switch (chord.Duration)              {                  case 192:                      rhythm.NoteValue = "Whole";                      break;                  case 168:  // should avoid this' split note instead (TODO)                      rhythm.NoteValue = "Half";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 2 };                      break;                  case 144:                      rhythm.NoteValue = "Half";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 1 };                      break;                  case 96:                      rhythm.NoteValue = "Half";                      break;                  case 84:  // should avoid this' split note instead (TODO)                      rhythm.NoteValue = "Quarter";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 2 };                      break;                  case 72:                      rhythm.NoteValue = "Quarter";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 1 };                      break;                  case 48:                      rhythm.NoteValue = "Quarter";                      break;                  case 36:                      rhythm.NoteValue = "Eighth";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 1 };                      break;                  case 32:                      rhythm.NoteValue = "Quarter";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  case 24:                      rhythm.NoteValue = "Eighth";                      break;                  case 18:                      rhythm.NoteValue = "16th";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 1 };                      break;                  case 16:                      rhythm.NoteValue = "Eighth";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  case 12:                      rhythm.NoteValue = "16th";                      break;                  case 9:                      rhythm.NoteValue = "32nd";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 1 };                      break;                  case 8:                      rhythm.NoteValue = "16th";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  case 6:                      rhythm.NoteValue = "32nd";                      break;                  case 4:                      rhythm.NoteValue = "32nd";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  case 3:                      rhythm.NoteValue = "64th";                      break;                  case 2:                      rhythm.NoteValue = "64th";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  case 1:                      rhythm.NoteValue = "128th";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  default:                      Console.WriteLine("  Warning: Rhythm Duration {0} not handled' defaulting to quarter note."' chord.Duration);                      rhythm.NoteValue = "Quarter";                      break;              }
Magic Number,RocksmithToTabLib,GpxExporter,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GpxExporter.cs,ExportOrFindBeat,The following statement contains a magic number: switch (chord.Duration)              {                  case 192:                      rhythm.NoteValue = "Whole";                      break;                  case 168:  // should avoid this' split note instead (TODO)                      rhythm.NoteValue = "Half";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 2 };                      break;                  case 144:                      rhythm.NoteValue = "Half";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 1 };                      break;                  case 96:                      rhythm.NoteValue = "Half";                      break;                  case 84:  // should avoid this' split note instead (TODO)                      rhythm.NoteValue = "Quarter";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 2 };                      break;                  case 72:                      rhythm.NoteValue = "Quarter";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 1 };                      break;                  case 48:                      rhythm.NoteValue = "Quarter";                      break;                  case 36:                      rhythm.NoteValue = "Eighth";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 1 };                      break;                  case 32:                      rhythm.NoteValue = "Quarter";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  case 24:                      rhythm.NoteValue = "Eighth";                      break;                  case 18:                      rhythm.NoteValue = "16th";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 1 };                      break;                  case 16:                      rhythm.NoteValue = "Eighth";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  case 12:                      rhythm.NoteValue = "16th";                      break;                  case 9:                      rhythm.NoteValue = "32nd";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 1 };                      break;                  case 8:                      rhythm.NoteValue = "16th";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  case 6:                      rhythm.NoteValue = "32nd";                      break;                  case 4:                      rhythm.NoteValue = "32nd";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  case 3:                      rhythm.NoteValue = "64th";                      break;                  case 2:                      rhythm.NoteValue = "64th";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  case 1:                      rhythm.NoteValue = "128th";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  default:                      Console.WriteLine("  Warning: Rhythm Duration {0} not handled' defaulting to quarter note."' chord.Duration);                      rhythm.NoteValue = "Quarter";                      break;              }
Magic Number,RocksmithToTabLib,GpxExporter,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GpxExporter.cs,ExportOrFindBeat,The following statement contains a magic number: switch (chord.Duration)              {                  case 192:                      rhythm.NoteValue = "Whole";                      break;                  case 168:  // should avoid this' split note instead (TODO)                      rhythm.NoteValue = "Half";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 2 };                      break;                  case 144:                      rhythm.NoteValue = "Half";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 1 };                      break;                  case 96:                      rhythm.NoteValue = "Half";                      break;                  case 84:  // should avoid this' split note instead (TODO)                      rhythm.NoteValue = "Quarter";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 2 };                      break;                  case 72:                      rhythm.NoteValue = "Quarter";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 1 };                      break;                  case 48:                      rhythm.NoteValue = "Quarter";                      break;                  case 36:                      rhythm.NoteValue = "Eighth";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 1 };                      break;                  case 32:                      rhythm.NoteValue = "Quarter";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  case 24:                      rhythm.NoteValue = "Eighth";                      break;                  case 18:                      rhythm.NoteValue = "16th";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 1 };                      break;                  case 16:                      rhythm.NoteValue = "Eighth";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  case 12:                      rhythm.NoteValue = "16th";                      break;                  case 9:                      rhythm.NoteValue = "32nd";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 1 };                      break;                  case 8:                      rhythm.NoteValue = "16th";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  case 6:                      rhythm.NoteValue = "32nd";                      break;                  case 4:                      rhythm.NoteValue = "32nd";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  case 3:                      rhythm.NoteValue = "64th";                      break;                  case 2:                      rhythm.NoteValue = "64th";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  case 1:                      rhythm.NoteValue = "128th";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  default:                      Console.WriteLine("  Warning: Rhythm Duration {0} not handled' defaulting to quarter note."' chord.Duration);                      rhythm.NoteValue = "Quarter";                      break;              }
Magic Number,RocksmithToTabLib,GpxExporter,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GpxExporter.cs,ExportOrFindBeat,The following statement contains a magic number: switch (chord.Duration)              {                  case 192:                      rhythm.NoteValue = "Whole";                      break;                  case 168:  // should avoid this' split note instead (TODO)                      rhythm.NoteValue = "Half";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 2 };                      break;                  case 144:                      rhythm.NoteValue = "Half";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 1 };                      break;                  case 96:                      rhythm.NoteValue = "Half";                      break;                  case 84:  // should avoid this' split note instead (TODO)                      rhythm.NoteValue = "Quarter";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 2 };                      break;                  case 72:                      rhythm.NoteValue = "Quarter";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 1 };                      break;                  case 48:                      rhythm.NoteValue = "Quarter";                      break;                  case 36:                      rhythm.NoteValue = "Eighth";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 1 };                      break;                  case 32:                      rhythm.NoteValue = "Quarter";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  case 24:                      rhythm.NoteValue = "Eighth";                      break;                  case 18:                      rhythm.NoteValue = "16th";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 1 };                      break;                  case 16:                      rhythm.NoteValue = "Eighth";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  case 12:                      rhythm.NoteValue = "16th";                      break;                  case 9:                      rhythm.NoteValue = "32nd";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 1 };                      break;                  case 8:                      rhythm.NoteValue = "16th";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  case 6:                      rhythm.NoteValue = "32nd";                      break;                  case 4:                      rhythm.NoteValue = "32nd";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  case 3:                      rhythm.NoteValue = "64th";                      break;                  case 2:                      rhythm.NoteValue = "64th";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  case 1:                      rhythm.NoteValue = "128th";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  default:                      Console.WriteLine("  Warning: Rhythm Duration {0} not handled' defaulting to quarter note."' chord.Duration);                      rhythm.NoteValue = "Quarter";                      break;              }
Magic Number,RocksmithToTabLib,GpxExporter,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GpxExporter.cs,ExportOrFindBeat,The following statement contains a magic number: switch (chord.Duration)              {                  case 192:                      rhythm.NoteValue = "Whole";                      break;                  case 168:  // should avoid this' split note instead (TODO)                      rhythm.NoteValue = "Half";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 2 };                      break;                  case 144:                      rhythm.NoteValue = "Half";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 1 };                      break;                  case 96:                      rhythm.NoteValue = "Half";                      break;                  case 84:  // should avoid this' split note instead (TODO)                      rhythm.NoteValue = "Quarter";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 2 };                      break;                  case 72:                      rhythm.NoteValue = "Quarter";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 1 };                      break;                  case 48:                      rhythm.NoteValue = "Quarter";                      break;                  case 36:                      rhythm.NoteValue = "Eighth";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 1 };                      break;                  case 32:                      rhythm.NoteValue = "Quarter";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  case 24:                      rhythm.NoteValue = "Eighth";                      break;                  case 18:                      rhythm.NoteValue = "16th";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 1 };                      break;                  case 16:                      rhythm.NoteValue = "Eighth";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  case 12:                      rhythm.NoteValue = "16th";                      break;                  case 9:                      rhythm.NoteValue = "32nd";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 1 };                      break;                  case 8:                      rhythm.NoteValue = "16th";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  case 6:                      rhythm.NoteValue = "32nd";                      break;                  case 4:                      rhythm.NoteValue = "32nd";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  case 3:                      rhythm.NoteValue = "64th";                      break;                  case 2:                      rhythm.NoteValue = "64th";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  case 1:                      rhythm.NoteValue = "128th";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  default:                      Console.WriteLine("  Warning: Rhythm Duration {0} not handled' defaulting to quarter note."' chord.Duration);                      rhythm.NoteValue = "Quarter";                      break;              }
Magic Number,RocksmithToTabLib,GpxExporter,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GpxExporter.cs,ExportOrFindBeat,The following statement contains a magic number: switch (chord.Duration)              {                  case 192:                      rhythm.NoteValue = "Whole";                      break;                  case 168:  // should avoid this' split note instead (TODO)                      rhythm.NoteValue = "Half";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 2 };                      break;                  case 144:                      rhythm.NoteValue = "Half";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 1 };                      break;                  case 96:                      rhythm.NoteValue = "Half";                      break;                  case 84:  // should avoid this' split note instead (TODO)                      rhythm.NoteValue = "Quarter";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 2 };                      break;                  case 72:                      rhythm.NoteValue = "Quarter";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 1 };                      break;                  case 48:                      rhythm.NoteValue = "Quarter";                      break;                  case 36:                      rhythm.NoteValue = "Eighth";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 1 };                      break;                  case 32:                      rhythm.NoteValue = "Quarter";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  case 24:                      rhythm.NoteValue = "Eighth";                      break;                  case 18:                      rhythm.NoteValue = "16th";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 1 };                      break;                  case 16:                      rhythm.NoteValue = "Eighth";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  case 12:                      rhythm.NoteValue = "16th";                      break;                  case 9:                      rhythm.NoteValue = "32nd";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 1 };                      break;                  case 8:                      rhythm.NoteValue = "16th";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  case 6:                      rhythm.NoteValue = "32nd";                      break;                  case 4:                      rhythm.NoteValue = "32nd";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  case 3:                      rhythm.NoteValue = "64th";                      break;                  case 2:                      rhythm.NoteValue = "64th";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  case 1:                      rhythm.NoteValue = "128th";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  default:                      Console.WriteLine("  Warning: Rhythm Duration {0} not handled' defaulting to quarter note."' chord.Duration);                      rhythm.NoteValue = "Quarter";                      break;              }
Magic Number,RocksmithToTabLib,GpxExporter,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GpxExporter.cs,ExportOrFindBeat,The following statement contains a magic number: switch (chord.Duration)              {                  case 192:                      rhythm.NoteValue = "Whole";                      break;                  case 168:  // should avoid this' split note instead (TODO)                      rhythm.NoteValue = "Half";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 2 };                      break;                  case 144:                      rhythm.NoteValue = "Half";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 1 };                      break;                  case 96:                      rhythm.NoteValue = "Half";                      break;                  case 84:  // should avoid this' split note instead (TODO)                      rhythm.NoteValue = "Quarter";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 2 };                      break;                  case 72:                      rhythm.NoteValue = "Quarter";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 1 };                      break;                  case 48:                      rhythm.NoteValue = "Quarter";                      break;                  case 36:                      rhythm.NoteValue = "Eighth";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 1 };                      break;                  case 32:                      rhythm.NoteValue = "Quarter";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  case 24:                      rhythm.NoteValue = "Eighth";                      break;                  case 18:                      rhythm.NoteValue = "16th";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 1 };                      break;                  case 16:                      rhythm.NoteValue = "Eighth";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  case 12:                      rhythm.NoteValue = "16th";                      break;                  case 9:                      rhythm.NoteValue = "32nd";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 1 };                      break;                  case 8:                      rhythm.NoteValue = "16th";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  case 6:                      rhythm.NoteValue = "32nd";                      break;                  case 4:                      rhythm.NoteValue = "32nd";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  case 3:                      rhythm.NoteValue = "64th";                      break;                  case 2:                      rhythm.NoteValue = "64th";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  case 1:                      rhythm.NoteValue = "128th";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  default:                      Console.WriteLine("  Warning: Rhythm Duration {0} not handled' defaulting to quarter note."' chord.Duration);                      rhythm.NoteValue = "Quarter";                      break;              }
Magic Number,RocksmithToTabLib,GpxExporter,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GpxExporter.cs,ExportOrFindBeat,The following statement contains a magic number: switch (chord.Duration)              {                  case 192:                      rhythm.NoteValue = "Whole";                      break;                  case 168:  // should avoid this' split note instead (TODO)                      rhythm.NoteValue = "Half";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 2 };                      break;                  case 144:                      rhythm.NoteValue = "Half";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 1 };                      break;                  case 96:                      rhythm.NoteValue = "Half";                      break;                  case 84:  // should avoid this' split note instead (TODO)                      rhythm.NoteValue = "Quarter";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 2 };                      break;                  case 72:                      rhythm.NoteValue = "Quarter";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 1 };                      break;                  case 48:                      rhythm.NoteValue = "Quarter";                      break;                  case 36:                      rhythm.NoteValue = "Eighth";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 1 };                      break;                  case 32:                      rhythm.NoteValue = "Quarter";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  case 24:                      rhythm.NoteValue = "Eighth";                      break;                  case 18:                      rhythm.NoteValue = "16th";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 1 };                      break;                  case 16:                      rhythm.NoteValue = "Eighth";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  case 12:                      rhythm.NoteValue = "16th";                      break;                  case 9:                      rhythm.NoteValue = "32nd";                      rhythm.AugmentationDot = new Rhythm.Dot() { Count = 1 };                      break;                  case 8:                      rhythm.NoteValue = "16th";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  case 6:                      rhythm.NoteValue = "32nd";                      break;                  case 4:                      rhythm.NoteValue = "32nd";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  case 3:                      rhythm.NoteValue = "64th";                      break;                  case 2:                      rhythm.NoteValue = "64th";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  case 1:                      rhythm.NoteValue = "128th";                      rhythm.PrimaryTuplet = new Rhythm.Tuplet() { Den = 2' Num = 3 };                      break;                  default:                      Console.WriteLine("  Warning: Rhythm Duration {0} not handled' defaulting to quarter note."' chord.Duration);                      rhythm.NoteValue = "Quarter";                      break;              }
Magic Number,RocksmithToTabLib,GpxExporter,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GpxExporter.cs,ExportOrFindNote,The following statement contains a magic number: gpNote.Accent = 4;
Magic Number,RocksmithToTabLib,GpxExporter,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GpxExporter.cs,ExportOrFindNote,The following statement contains a magic number: gpNote.Properties.Add(new Property()                  {                      Name = "HarmonicFret"'                      HFret = note.Fret == 3 ? "3.2" : note.Fret.ToString()                  });
Magic Number,RocksmithToTabLib,GpxExporter,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GpxExporter.cs,ExportOrFindNote,The following statement contains a magic number: switch (note.Slide)              {                  case Note.SlideType.ToNext:                      slideFlag = 2; break;                  case Note.SlideType.UnpitchDown:                      slideFlag = 4; break;                  case Note.SlideType.UnpitchUp:                      slideFlag = 8; break;              }
Magic Number,RocksmithToTabLib,GpxExporter,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GpxExporter.cs,ExportOrFindNote,The following statement contains a magic number: switch (note.Slide)              {                  case Note.SlideType.ToNext:                      slideFlag = 2; break;                  case Note.SlideType.UnpitchDown:                      slideFlag = 4; break;                  case Note.SlideType.UnpitchUp:                      slideFlag = 8; break;              }
Magic Number,RocksmithToTabLib,GpxExporter,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GpxExporter.cs,ExportOrFindNote,The following statement contains a magic number: switch (note.Slide)              {                  case Note.SlideType.ToNext:                      slideFlag = 2; break;                  case Note.SlideType.UnpitchDown:                      slideFlag = 4; break;                  case Note.SlideType.UnpitchUp:                      slideFlag = 8; break;              }
Magic Number,RocksmithToTabLib,GpxExporter,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GpxExporter.cs,ExportOrFindNote,The following statement contains a magic number: gpNote.Properties.Add(new Property() { Name = "BendOriginValue"' Float = Math.Round(origin * 50) });
Magic Number,RocksmithToTabLib,GpxExporter,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GpxExporter.cs,ExportOrFindNote,The following statement contains a magic number: gpNote.Properties.Add(new Property() { Name = "BendMiddleValue"' Float = Math.Round(middle * 50) });
Magic Number,RocksmithToTabLib,GpxExporter,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GpxExporter.cs,ExportOrFindNote,The following statement contains a magic number: gpNote.Properties.Add(new Property() { Name = "BendMiddleOffset1"' Float = Math.Round(middleOffset1 * 100) });
Magic Number,RocksmithToTabLib,GpxExporter,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GpxExporter.cs,ExportOrFindNote,The following statement contains a magic number: gpNote.Properties.Add(new Property() { Name = "BendMiddleOffset2"' Float = Math.Round(middleOffset2 * 100) });
Magic Number,RocksmithToTabLib,GpxExporter,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GpxExporter.cs,ExportOrFindNote,The following statement contains a magic number: gpNote.Properties.Add(new Property() { Name = "BendDestinationValue"' Float = Math.Round(destination * 50) });
Magic Number,RocksmithToTabLib,GpxExporter,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GpxExporter.cs,ExportOrFindNote,The following statement contains a magic number: gpNote.Properties.Add(new Property() { Name = "BendDestinationOffset"' Float = Math.Round(destinationOffset * 100) });
Magic Number,RocksmithToTabLib,GpxExporter,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GpxExporter.cs,ExportOrFindNote,The following statement contains a magic number: note.LeftFingering >= 0 && note.LeftFingering <= 4
Magic Number,RocksmithToTabLib,PSARC,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\PSARC.cs,ReadNames,The following statement contains a magic number: StringBuilder stringBuilder = new StringBuilder(100);
Magic Number,RocksmithToTabLib,PSARC,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\PSARC.cs,Read,The following statement contains a magic number: byte[] buffer = new byte[30000];
Magic Number,RocksmithToTabLib,PSARC,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\PSARC.cs,Read,The following statement contains a magic number: int decMax = (int)this.header.TotalTOCSize - 32;
Magic Number,RocksmithToTabLib,PSARC,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\PSARC.cs,Read,The following statement contains a magic number: this.header.archiveFlags == 4
Magic Number,RocksmithToTabLib,PSARC,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\PSARC.cs,Read,The following statement contains a magic number: uint num = 256;
Magic Number,RocksmithToTabLib,PSARC,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\PSARC.cs,Read,The following statement contains a magic number: num *= 256;
Magic Number,RocksmithToTabLib,PSARC,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\PSARC.cs,Read,The following statement contains a magic number: this.Entries.Add(new Entry  						{  							id = num2'                              MD5 = bigEndianBinaryReaderTOC.ReadBytes(16)'                              zIndex = bigEndianBinaryReaderTOC.ReadUInt32()'                              Length = bigEndianBinaryReaderTOC.ReadUInt40()'                              Offset = bigEndianBinaryReaderTOC.ReadUInt40()  						});
Magic Number,RocksmithToTabLib,PSARC,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\PSARC.cs,Read,The following statement contains a magic number: long decMax = (this.header.archiveFlags == 4) ? 32 : 0;
Magic Number,RocksmithToTabLib,PSARC,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\PSARC.cs,Read,The following statement contains a magic number: long decMax = (this.header.archiveFlags == 4) ? 32 : 0;
Magic Number,RocksmithToTabLib,PSARC,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\PSARC.cs,Read,The following statement contains a magic number: switch (b)  						{  						case 2:                              array[num2] = (uint)bigEndianBinaryReaderTOC.ReadUInt16();  							break;  						case 3:                              array[num2] = bigEndianBinaryReaderTOC.ReadUInt24();  							break;  						case 4:                              array[num2] = bigEndianBinaryReaderTOC.ReadUInt32();  							break;  						}
Magic Number,RocksmithToTabLib,PSARC,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\PSARC.cs,Read,The following statement contains a magic number: switch (b)  						{  						case 2:                              array[num2] = (uint)bigEndianBinaryReaderTOC.ReadUInt16();  							break;  						case 3:                              array[num2] = bigEndianBinaryReaderTOC.ReadUInt24();  							break;  						case 4:                              array[num2] = bigEndianBinaryReaderTOC.ReadUInt32();  							break;  						}
Magic Number,RocksmithToTabLib,PSARC,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\PSARC.cs,Read,The following statement contains a magic number: switch (b)  						{  						case 2:                              array[num2] = (uint)bigEndianBinaryReaderTOC.ReadUInt16();  							break;  						case 3:                              array[num2] = bigEndianBinaryReaderTOC.ReadUInt24();  							break;  						case 4:                              array[num2] = bigEndianBinaryReaderTOC.ReadUInt32();  							break;  						}
Magic Number,RocksmithToTabLib,PSARC,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\PSARC.cs,Read,The following statement contains a magic number: this.header.CompressionMethod == 2053925218
Magic Number,RocksmithToTabLib,PSARC,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\PSARC.cs,Read,The following statement contains a magic number: this.header.MagicNumber == 1347633490
Magic Number,RocksmithToTabLib,Header,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\PSARC.cs,Header,The following statement contains a magic number: this.MagicNumber = 1347633490;
Magic Number,RocksmithToTabLib,Header,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\PSARC.cs,Header,The following statement contains a magic number: this.VersionNumber = 65540;
Magic Number,RocksmithToTabLib,Header,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\PSARC.cs,Header,The following statement contains a magic number: this.CompressionMethod = 2053925218;
Magic Number,RocksmithToTabLib,Header,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\PSARC.cs,Header,The following statement contains a magic number: this.TOCEntrySize = 30;
Magic Number,RocksmithToTabLib,Header,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\PSARC.cs,Header,The following statement contains a magic number: this.blockSize = 65536;
Magic Number,RocksmithToTabLib,RhythmDetector,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\RhythmDetector.cs,MatchRhythm,The following statement contains a magic number: length <= 3
Magic Number,RocksmithToTabLib,RhythmDetector,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\RhythmDetector.cs,MatchRhythm,The following statement contains a magic number: int tripletBeat = beatDuration * 2 / 3;
Magic Number,RocksmithToTabLib,RhythmDetector,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\RhythmDetector.cs,MatchRhythm,The following statement contains a magic number: int tripletBeat = beatDuration * 2 / 3;
Magic Number,RocksmithToTabLib,RhythmDetector,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\RhythmDetector.cs,MatchRhythm,The following statement contains a magic number: minMatchDiff < PRECISION || beatDuration <= 3
Magic Number,RocksmithToTabLib,RhythmDetector,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\RhythmDetector.cs,SplitDurations,The following statement contains a magic number: int n = 2;
Magic Number,RocksmithToTabLib,RhythmDetector,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\RhythmDetector.cs,SplitDurations,The following statement contains a magic number: int d = 3;
Magic Number,RocksmithToTabLib,RhythmDetector,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\RhythmDetector.cs,SplitDurations,The following statement contains a magic number: remaining < 2 && remaining != 0
Magic Number,RocksmithToTabLib,RhythmDetector,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\RhythmDetector.cs,SplitDurations,The following statement contains a magic number: n = 3;
Magic Number,RocksmithToTabLib,RhythmDetector,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\RhythmDetector.cs,SplitDurations,The following statement contains a magic number: d = 4;
Magic Number,RocksmithToTabLib,RhythmDetector,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\RhythmDetector.cs,SplitDurations,The following statement contains a magic number: n == 2
Magic Number,RocksmithToTabLib,RhythmDetector,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\RhythmDetector.cs,SplitDurations,The following statement contains a magic number: !done && curBeat >= 2
Magic Number,RocksmithToTabLib,RhythmDetector,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\RhythmDetector.cs,SplitDurations,The following statement contains a magic number: var newNote = new RhythmValue()                      {                          Duration = durations[i].Duration / 2'                          NoteIndex = durations[i].NoteIndex                      };
Magic Number,RocksmithToTabLib,Bar,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\Score.cs,GetDuration,The following statement contains a magic number: var beatDuration = (noteEnd - noteStart) / beatLength * 4 / TimeDenominator;
Magic Number,RocksmithToTabLib,Bar,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\Score.cs,GetDuration,The following statement contains a magic number: return duration * 48;
Magic Number,RocksmithToTabLib,Bar,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\Score.cs,GetDurationLength,The following statement contains a magic number: Single quarterNoteLength = (End - Start) / TimeNominator * TimeDenominator / 4;
Magic Number,RocksmithToTabLib,Bar,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\Score.cs,GetDurationLength,The following statement contains a magic number: return duration / 48.0f * quarterNoteLength;
Magic Number,RocksmithToTabLib,Bar,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\Score.cs,GetBeatDuration,The following statement contains a magic number: return 24;
Magic Number,RocksmithToTabLib,Bar,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\Score.cs,GetBeatDuration,The following statement contains a magic number: TimeDenominator == 8
Magic Number,RocksmithToTabLib,Bar,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\Score.cs,GuessTimeAndBPM,The following statement contains a magic number: TimeDenominator = 4;
Magic Number,RocksmithToTabLib,Bar,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\Score.cs,GuessTimeAndBPM,The following statement contains a magic number: Math.Abs(averageBPM - 60.0 / avgTimePerBeat)                  < Math.Abs(averageBPM - 30.0 / avgTimePerBeat)
Magic Number,RocksmithToTabLib,Bar,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\Score.cs,GuessTimeAndBPM,The following statement contains a magic number: Math.Abs(averageBPM - 60.0 / avgTimePerBeat)                  < Math.Abs(averageBPM - 30.0 / avgTimePerBeat)
Magic Number,RocksmithToTabLib,Bar,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\Score.cs,GuessTimeAndBPM,The following statement contains a magic number: BeatsPerMinute = (int)Math.Round(4.0/TimeDenominator * 60.0 / avgTimePerBeat);
Magic Number,RocksmithToTabLib,Bar,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\Score.cs,GuessTimeAndBPM,The following statement contains a magic number: BeatsPerMinute = (int)Math.Round(4.0/TimeDenominator * 60.0 / avgTimePerBeat);
Missing Default,RocksmithToTabLib,GpxExporter,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\GpxExporter.cs,ExportOrFindNote,The following switch statement is missing a default case: switch (note.Slide)              {                  case Note.SlideType.ToNext:                      slideFlag = 2; break;                  case Note.SlideType.UnpitchDown:                      slideFlag = 4; break;                  case Note.SlideType.UnpitchUp:                      slideFlag = 8; break;              }
Missing Default,RocksmithToTabLib,PSARC,D:\research\architectureSmells\repos\fholger_RocksmithToTab\RocksmithToTabLib\PSARC.cs,Read,The following switch statement is missing a default case: switch (b)  						{  						case 2:                              array[num2] = (uint)bigEndianBinaryReaderTOC.ReadUInt16();  							break;  						case 3:                              array[num2] = bigEndianBinaryReaderTOC.ReadUInt24();  							break;  						case 4:                              array[num2] = bigEndianBinaryReaderTOC.ReadUInt32();  							break;  						}
