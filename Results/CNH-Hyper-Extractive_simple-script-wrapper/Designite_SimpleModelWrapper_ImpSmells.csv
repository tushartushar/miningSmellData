Implementation smell,Namespace,Class,File,Method,Description
Long Method,Sc.Smw,Wrapper,C:\repos\CNH-Hyper-Extractive_simple-script-wrapper\Source\SimpleModelWrapper\Wrapper.cs,CreateExchangeItemsFromXMLNode,The method has 111 lines of code.
Complex Method,Sc.Smw,Utilities,C:\repos\CNH-Hyper-Extractive_simple-script-wrapper\Source\SimpleModelWrapper\Utilities.cs,AddElementsFromShapefile,Cyclomatic complexity of the method is 8
Complex Method,Sc.Smw,Wrapper,C:\repos\CNH-Hyper-Extractive_simple-script-wrapper\Source\SimpleModelWrapper\Wrapper.cs,GetInputTime,Cyclomatic complexity of the method is 9
Complex Method,Sc.Smw,Wrapper,C:\repos\CNH-Hyper-Extractive_simple-script-wrapper\Source\SimpleModelWrapper\Wrapper.cs,AdvanceTime,Cyclomatic complexity of the method is 9
Complex Method,Sc.Smw,Wrapper,C:\repos\CNH-Hyper-Extractive_simple-script-wrapper\Source\SimpleModelWrapper\Wrapper.cs,SetVariablesFromConfigFile,Cyclomatic complexity of the method is 13
Complex Method,Sc.Smw,Wrapper,C:\repos\CNH-Hyper-Extractive_simple-script-wrapper\Source\SimpleModelWrapper\Wrapper.cs,CreateExchangeItemsFromXMLNode,Cyclomatic complexity of the method is 28
Long Parameter List,Sc.Smw,ODM,C:\repos\CNH-Hyper-Extractive_simple-script-wrapper\Source\SimpleModelWrapper\Utilities.cs,WriteToODMcsv,The method has 7 parameters.
Long Statement,Sc.Smw,ODM,C:\repos\CNH-Hyper-Extractive_simple-script-wrapper\Source\SimpleModelWrapper\Utilities.cs,Add_ODM_Definition,The length of the statement  "	var myconn = new SqlConnection ("Data Source=.\\SQLEXPRESS;" + "Initial Catalog = OD;" + "User ID = sa" + "Password = sa"); " is 123.
Long Statement,Sc.Smw,ODM,C:\repos\CNH-Hyper-Extractive_simple-script-wrapper\Source\SimpleModelWrapper\Utilities.cs,CreateODMcsv,The length of the statement  "	SW.WriteLine ("DataValue'ValueAccuracy'LocalDateTime'DateTimeUTC'SiteCode'SiteName'" + "Latitude'Longitude'LatLongDatumID'Elevation_m'VerticalDatum'LocalX'" + "LocalY'LocalProjectionID'PosAccuracy_m'SiteState'County'Comments'" + "MethodDescription'MethodLink'QualifierCode'QualifierDescription'" + "VariableCode'VariableName'Speciation'VariableUnitsID'SampleMedium'" + "ValueType'IsRegular'TimeSupport'TimeUnitsID'DataType'GeneralCategory'" + "NoDataValue'OffsetUnitsID'OffsetDescription'QualityControlLevelCode'" + "Definition'Explanation'Organization'SourceDescription'SourceLink'ContactName'" + "Phone'Email'Address'City'SourceState'ZipCode'Citation'TopicCategory'Title'" + "Abstract'ProfileVersion'MetadataLink'SampleType'LabSampleCode'LabName'LabOrganization'" + "LabMethodName'LabMethodDescription'LabMethodLink'OffsetValue'CensorCode"); " is 843.
Long Statement,Sc.Smw,ODM,C:\repos\CNH-Hyper-Extractive_simple-script-wrapper\Source\SimpleModelWrapper\Utilities.cs,CreateBat,The length of the statement  "	sw.WriteLine ("odmloader.exe -server {0} -db {1} -user {2} -password {3} -file {4} -log {5}"' Server' Database' User' Password' SiteName + ".csv"' Log); " is 152.
Long Statement,Sc.Smw,Wrapper,C:\repos\CNH-Hyper-Extractive_simple-script-wrapper\Source\SimpleModelWrapper\Wrapper.cs,GetInputTime,The length of the statement  "	//return new TimeStamp(_currentTime + (_timeStep / 86400)); // alternate one where providing models run their time steps before this one " is 136.
Long Statement,Sc.Smw,Wrapper,C:\repos\CNH-Hyper-Extractive_simple-script-wrapper\Source\SimpleModelWrapper\Wrapper.cs,GetInputTime,The length of the statement  "	_logFile.Append ("InputTime:" + CalendarConverter.ModifiedJulian2Gregorian (inputTime) + " (current:" + CalendarConverter.ModifiedJulian2Gregorian (_currentTime) + ")"); " is 169.
Long Statement,Sc.Smw,Wrapper,C:\repos\CNH-Hyper-Extractive_simple-script-wrapper\Source\SimpleModelWrapper\Wrapper.cs,SetVariablesFromConfigFile,The length of the statement  "	_simulationStartTime = CalendarConverter.Gregorian2ModifiedJulian (Convert.ToDateTime (timeHorizon ["StartDateTime"].InnerText)); " is 129.
Long Statement,Sc.Smw,Wrapper,C:\repos\CNH-Hyper-Extractive_simple-script-wrapper\Source\SimpleModelWrapper\Wrapper.cs,SetVariablesFromConfigFile,The length of the statement  "	_simulationEndTime = CalendarConverter.Gregorian2ModifiedJulian (Convert.ToDateTime (timeHorizon ["EndDateTime"].InnerText)); " is 125.
Empty Catch Block,Sc.Smw,ODM,C:\repos\CNH-Hyper-Extractive_simple-script-wrapper\Source\SimpleModelWrapper\Utilities.cs,Add_ODM_Definition,The method has an empty catch block.
Empty Catch Block,Sc.Smw,ODM,C:\repos\CNH-Hyper-Extractive_simple-script-wrapper\Source\SimpleModelWrapper\Utilities.cs,Add_ODM_Definition,The method has an empty catch block.
Magic Number,Sc.Smw,Utilities,C:\repos\CNH-Hyper-Extractive_simple-script-wrapper\Source\SimpleModelWrapper\Utilities.cs,AddElementsFromShapefile,The following statement contains a magic number: for (uint i = 0; i < myLayer.DataSource.GetFeatureCount (); ++i) {  	var feat = myLayer.DataSource.GetFeature (i);  	var GeometryType = Convert.ToString (feat.Geometry.AsText ().Substring (0' feat.Geometry.AsText ().IndexOf (' ')));  	var e = new Element ();  	if (feat.Table.Columns.IndexOf ("HydroCode") != -1)  		e.ID = feat.ItemArray [feat.Table.Columns.IndexOf ("HydroCode")].ToString ();  	if (GeometryType == "POINT") {  		omiElementSet.ElementType = ElementType.XYPoint;  		var p = (Point)feat.Geometry;  		var v = new Vertex ();  		v.x = p.X;  		v.y = p.Y;  		e.AddVertex (v);  	}  	if (GeometryType == "POLYGON") {  		omiElementSet.ElementType = ElementType.XYPolygon;  		var p = (Polygon)feat.Geometry;  		var lr = p.ExteriorRing;  		//Only loop until lr.Vertices.Count-2 b/c the first element is the same  		// as the last element within the exterior ring.  This will thrown an error  		// within the OATC element mapper' when trying to map elements.  Also this  		// loop arranges the vertices of the exterior ring in counter clockwise order  		// as needed for the element mapping.  		for (var j = lr.Vertices.Count - 2; j >= 0; j--) {  			var v = new Vertex ();  			v.x = lr.Vertices [j].X;  			v.y = lr.Vertices [j].Y;  			e.AddVertex (v);  		}  	}  	if (GeometryType == "LINESTRING") {  		omiElementSet.ElementType = ElementType.XYPolyLine;  		var ls = (LineString)feat.Geometry;  		//Point endpt = ls.EndPoint;  		//Point startpt = ls.StartPoint;  		for (var j = 0; j < ls.Vertices.Count; j++) {  			var v = new Vertex ();  			v.x = ls.Vertices [j].X;  			v.y = ls.Vertices [j].Y;  			e.AddVertex (v);  		}  	}  	omiElementSet.AddElement (e);  }  
Magic Number,Sc.Smw,Utilities,C:\repos\CNH-Hyper-Extractive_simple-script-wrapper\Source\SimpleModelWrapper\Utilities.cs,AddElementsFromShapefile,The following statement contains a magic number: if (GeometryType == "POLYGON") {  	omiElementSet.ElementType = ElementType.XYPolygon;  	var p = (Polygon)feat.Geometry;  	var lr = p.ExteriorRing;  	//Only loop until lr.Vertices.Count-2 b/c the first element is the same  	// as the last element within the exterior ring.  This will thrown an error  	// within the OATC element mapper' when trying to map elements.  Also this  	// loop arranges the vertices of the exterior ring in counter clockwise order  	// as needed for the element mapping.  	for (var j = lr.Vertices.Count - 2; j >= 0; j--) {  		var v = new Vertex ();  		v.x = lr.Vertices [j].X;  		v.y = lr.Vertices [j].Y;  		e.AddVertex (v);  	}  }  
Magic Number,Sc.Smw,Utilities,C:\repos\CNH-Hyper-Extractive_simple-script-wrapper\Source\SimpleModelWrapper\Utilities.cs,AddElementsFromShapefile,The following statement contains a magic number: for (var j = lr.Vertices.Count - 2; j >= 0; j--) {  	var v = new Vertex ();  	v.x = lr.Vertices [j].X;  	v.y = lr.Vertices [j].Y;  	e.AddVertex (v);  }  
Magic Number,Sc.Smw,Wrapper,C:\repos\CNH-Hyper-Extractive_simple-script-wrapper\Source\SimpleModelWrapper\Wrapper.cs,GetMissingValueDefinition,The following statement contains a magic number: return -999;  
Magic Number,Sc.Smw,Wrapper,C:\repos\CNH-Hyper-Extractive_simple-script-wrapper\Source\SimpleModelWrapper\Wrapper.cs,GetValues,The following statement contains a magic number: if (rows.Length == 1)  	return (IValueSet)rows [0].ItemArray [2];  
Magic Number,Sc.Smw,Wrapper,C:\repos\CNH-Hyper-Extractive_simple-script-wrapper\Source\SimpleModelWrapper\Wrapper.cs,GetValues,The following statement contains a magic number: return (IValueSet)rows [0].ItemArray [2];  
Missing Default,Sc.Smw,Wrapper,C:\repos\CNH-Hyper-Extractive_simple-script-wrapper\Source\SimpleModelWrapper\Wrapper.cs,GetInputTime,The following switch statement is missing a default case: switch (_stepUnit) {  case STEP_UNIT_SECOND:  	dt = dt.AddSeconds (_stepInputOffset * _stepLength);  	break;  case STEP_UNIT_DAY:  	dt = dt.AddDays (_stepInputOffset * _stepLength);  	break;  case STEP_UNIT_YEAR:  	dt = dt.AddYears (_stepInputOffset * _stepLength);  	break;  }  
Missing Default,Sc.Smw,Wrapper,C:\repos\CNH-Hyper-Extractive_simple-script-wrapper\Source\SimpleModelWrapper\Wrapper.cs,AdvanceTime,The following switch statement is missing a default case: switch (_stepUnit) {  case STEP_UNIT_SECOND:  	dt = dt.AddSeconds (_stepLength);  	break;  case STEP_UNIT_DAY:  	dt = dt.AddDays (_stepLength);  	break;  case STEP_UNIT_YEAR:  	dt = dt.AddYears (_stepLength);  	break;  }  
Missing Default,Sc.Smw,Wrapper,C:\repos\CNH-Hyper-Extractive_simple-script-wrapper\Source\SimpleModelWrapper\Wrapper.cs,SetVariablesFromConfigFile,The following switch statement is missing a default case: switch (timeStepUnit) {  case "second":  	_stepUnit = STEP_UNIT_SECOND;  	break;  case "day":  	_stepUnit = STEP_UNIT_DAY;  	break;  case "year":  	_stepUnit = STEP_UNIT_YEAR;  	break;  }  
