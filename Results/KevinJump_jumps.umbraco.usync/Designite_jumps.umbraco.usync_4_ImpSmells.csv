Implementation smell,Namespace,Class,File,Method,Description
Long Method,jumps.umbraco.usync.Extensions,IContentTypeExtensions,C:\repos\KevinJump_jumps.umbraco.usync\jumps.umbraco.usync\Extensions\IContentTypeExtensions.cs,ImportRemoveMissingProps,The method has 133 lines of code.
Long Method,jumps.umbraco.usync,MediaTypeHelper,C:\repos\KevinJump_jumps.umbraco.usync\jumps.umbraco.usync\SyncMediaTypes.cs,Import,The method has 251 lines of code.
Long Method,jumps.umbraco.usync,MemberTypeHelper,C:\repos\KevinJump_jumps.umbraco.usync\jumps.umbraco.usync\SyncMemberType.cs,Import,The method has 198 lines of code.
Complex Method,jumps.umbraco.usync.Extensions,IContentTypeExtensions,C:\repos\KevinJump_jumps.umbraco.usync\jumps.umbraco.usync\Extensions\IContentTypeExtensions.cs,ExportToXml,Cyclomatic complexity of the method is 8
Complex Method,jumps.umbraco.usync.helpers,XmlDoc,C:\repos\KevinJump_jumps.umbraco.usync\jumps.umbraco.usync\helpers\XmlDoc.cs,CalculateMD5Hash,Cyclomatic complexity of the method is 9
Complex Method,jumps.umbraco.usync,SyncDataType,C:\repos\KevinJump_jumps.umbraco.usync\jumps.umbraco.usync\SyncDataType.cs,ReadFromDisk,Cyclomatic complexity of the method is 8
Complex Method,jumps.umbraco.usync,SyncDataType,C:\repos\KevinJump_jumps.umbraco.usync\jumps.umbraco.usync\SyncDataType.cs,ReplaceCotentNodes,Cyclomatic complexity of the method is 11
Complex Method,jumps.umbraco.usync,SyncDataType,C:\repos\KevinJump_jumps.umbraco.usync\jumps.umbraco.usync\SyncDataType.cs,HuntContentNodes,Cyclomatic complexity of the method is 11
Complex Method,jumps.umbraco.usync,SyncDocType,C:\repos\KevinJump_jumps.umbraco.usync\jumps.umbraco.usync\SyncDocType.cs,ReadFromDisk,Cyclomatic complexity of the method is 11
Complex Method,jumps.umbraco.usync,SyncMacro,C:\repos\KevinJump_jumps.umbraco.usync\jumps.umbraco.usync\SyncMacro.cs,ApplyUpdates,Cyclomatic complexity of the method is 8
Complex Method,jumps.umbraco.usync,MediaTypeHelper,C:\repos\KevinJump_jumps.umbraco.usync\jumps.umbraco.usync\SyncMediaTypes.cs,ToXml,Cyclomatic complexity of the method is 10
Complex Method,jumps.umbraco.usync,MediaTypeHelper,C:\repos\KevinJump_jumps.umbraco.usync\jumps.umbraco.usync\SyncMediaTypes.cs,Import,Cyclomatic complexity of the method is 33
Complex Method,jumps.umbraco.usync,MemberTypeHelper,C:\repos\KevinJump_jumps.umbraco.usync\jumps.umbraco.usync\SyncMemberType.cs,ToXml,Cyclomatic complexity of the method is 10
Complex Method,jumps.umbraco.usync,MemberTypeHelper,C:\repos\KevinJump_jumps.umbraco.usync\jumps.umbraco.usync\SyncMemberType.cs,Import,Cyclomatic complexity of the method is 25
Complex Method,jumps.umbraco.usync,uSync,C:\repos\KevinJump_jumps.umbraco.usync\jumps.umbraco.usync\uSync.cs,SaveAllToDisk,Cyclomatic complexity of the method is 9
Complex Method,jumps.umbraco.usync,uSync,C:\repos\KevinJump_jumps.umbraco.usync\jumps.umbraco.usync\uSync.cs,AttachToAll,Cyclomatic complexity of the method is 9
Long Statement,jumps.umbraco.usync.Extensions,IContentTypeExtensions,C:\repos\KevinJump_jumps.umbraco.usync\jumps.umbraco.usync\Extensions\IContentTypeExtensions.cs,ImportRemoveMissingProps,The length of the statement  "                        LogHelper.Info<SyncDocType>("Error looking for the datatype {0}' you might be missing a package?"' ()=> dataTypeDefinitionId); " is 126.
Long Statement,jumps.umbraco.usync.helpers,DiffrenceEngine,C:\repos\KevinJump_jumps.umbraco.usync\jumps.umbraco.usync\helpers\DiffrenceEngine.cs,LogChanges,The length of the statement  "                LogHelper.Info<DiffrenceEngine>("DE: {0} {1} {2}"' () => diffrence.Name' ()=> diffrence.changeType' ()=> diffrence.changes.Count()); " is 132.
Long Statement,jumps.umbraco.usync,SyncDataType,C:\repos\KevinJump_jumps.umbraco.usync\jumps.umbraco.usync\SyncDataType.cs,UpdatePreValues,The length of the statement  "            var existingPreValues = dataTypeSerivce.GetPreValuesCollectionByDataTypeId(dataType.Id).FormatAsDictionary(); // .PreValuesAsDictionary; " is 136.
Long Statement,jumps.umbraco.usync,SyncDataType,C:\repos\KevinJump_jumps.umbraco.usync\jumps.umbraco.usync\SyncDataType.cs,UpdatePreValues,The length of the statement  "                    var updateVal = preValues.Elements("PreValue").Where(x => ((string)x.Attribute("Alias").Value == preVal.Key)).FirstOrDefault(); " is 127.
Long Statement,jumps.umbraco.usync,SyncDocType,C:\repos\KevinJump_jumps.umbraco.usync\jumps.umbraco.usync\SyncDocType.cs,ReadFromDisk,The length of the statement  "                                LogHelper.Warn<SyncDocType>("{0} : Cannot find one of the composite types {1} either in the import or the site' this import will likely fail"' " is 142.
Long Statement,jumps.umbraco.usync,SyncDocType,C:\repos\KevinJump_jumps.umbraco.usync\jumps.umbraco.usync\SyncDocType.cs,GetImportDocTypes,The length of the statement  "                                LogHelper.Warn<SyncDocType>("Found a duplicated doctype in folder {0}' check your uSync folder for duplicate types"' () => name); " is 129.
Long Statement,jumps.umbraco.usync,MediaTypeHelper,C:\repos\KevinJump_jumps.umbraco.usync\jumps.umbraco.usync\SyncMediaTypes.cs,Import,The length of the statement  "                        LogHelper.Debug<SyncMediaTypes>("Local: {0}->{1} : Virtual: {2}->{3}"' () => lt.Id' () => lt.Name' () => vt.Id' () => vt.Caption); " is 130.
Long Statement,jumps.umbraco.usync,MediaTypeHelper,C:\repos\KevinJump_jumps.umbraco.usync\jumps.umbraco.usync\SyncMediaTypes.cs,Import,The length of the statement  "                LogHelper.Debug<SyncMediaTypes>(" >> Processing Properties: {0} -> {1}"' () => mt.Alias' () => xmlHelper.GetNodeValue(gp.SelectSingleNode("Name"))); " is 148.
Long Statement,jumps.umbraco.usync,MediaTypeHelper,C:\repos\KevinJump_jumps.umbraco.usync\jumps.umbraco.usync\SyncMediaTypes.cs,Import,The length of the statement  "                if (gp.SelectSingleNode("Definition") != null && !string.IsNullOrEmpty(xmlHelper.GetNodeValue(gp.SelectSingleNode("Definition")))) " is 130.
Long Statement,jumps.umbraco.usync,MediaTypeHelper,C:\repos\KevinJump_jumps.umbraco.usync\jumps.umbraco.usync\SyncMediaTypes.cs,findDataTypeDefinitionFromType,The length of the statement  "            foreach (global::umbraco.cms.businesslogic.datatype.DataTypeDefinition df in global::umbraco.cms.businesslogic.datatype.DataTypeDefinition.GetAll()) " is 148.
Long Statement,jumps.umbraco.usync,MemberTypeHelper,C:\repos\KevinJump_jumps.umbraco.usync\jumps.umbraco.usync\SyncMemberType.cs,Import,The length of the statement  "                if (gp.SelectSingleNode("Definition") != null && !string.IsNullOrEmpty(xmlHelper.GetNodeValue(gp.SelectSingleNode("Definition")))) " is 130.
Long Statement,jumps.umbraco.usync,MemberTypeHelper,C:\repos\KevinJump_jumps.umbraco.usync\jumps.umbraco.usync\SyncMemberType.cs,findDataTypeDefinitionFromType,The length of the statement  "            foreach (global::umbraco.cms.businesslogic.datatype.DataTypeDefinition df in global::umbraco.cms.businesslogic.datatype.DataTypeDefinition.GetAll()) " is 148.
Long Statement,jumps.umbraco.usync,SyncTemplate,C:\repos\KevinJump_jumps.umbraco.usync\jumps.umbraco.usync\SyncTemplate.cs,GetMasterId,The length of the statement  "            global::umbraco.cms.businesslogic.template.Template t = new global::umbraco.cms.businesslogic.template.Template(item.Id); " is 121.
Magic Number,jumps.umbraco.usync.helpers,ContentWalker,C:\repos\KevinJump_jumps.umbraco.usync\jumps.umbraco.usync\helpers\ContentWalker.cs,GetIdFromPath,The following statement contains a magic number: if (!string.IsNullOrWhiteSpace(path))              {                  var bits = path.Split('\\');                  var rootName = bits[0];                    var root = _contentService.GetByLevel(1).Where(x => x.Name == rootName).FirstOrDefault();                  if (root != null)                  {                      if (bits.Length == 1)                          return root.Id;                        // recurse into the rest of it...                      return GetLastId(_contentService' root.Id' bits' 2);                  }              }
Magic Number,jumps.umbraco.usync.helpers,MediaWalker,C:\repos\KevinJump_jumps.umbraco.usync\jumps.umbraco.usync\helpers\ContentWalker.cs,GetIdFromPath,The following statement contains a magic number: if (!string.IsNullOrWhiteSpace(path))              {                  var bits = path.Split('\\');                  var rootName = bits[0];                    var root = _mediaService.GetByLevel(1).Where(x => x.Name == rootName).FirstOrDefault();                  if (root != null)                  {                      if (bits.Length == 1)                          return root.Id;                        return GetLastId(_mediaService' root.Id' bits' 2);                  }              }
Magic Number,jumps.umbraco.usync,SyncDataType,C:\repos\KevinJump_jumps.umbraco.usync\jumps.umbraco.usync\SyncDataType.cs,AttachEvents,The following statement contains a magic number: _saveTimer = new Timer(8128);
Magic Number,jumps.umbraco.usync,SyncFileWatcher,C:\repos\KevinJump_jumps.umbraco.usync\jumps.umbraco.usync\SyncFileWatcher.cs,Init,The following statement contains a magic number: _notificationTimer = new Timer(8128);
Magic Number,jumps.umbraco.usync,SyncMemberType,C:\repos\KevinJump_jumps.umbraco.usync\jumps.umbraco.usync\SyncMemberType.cs,AttachEvents,The following statement contains a magic number: _saveTimer = new Timer(8128);
Magic Number,jumps.umbraco.usync,SyncStylesheet,C:\repos\KevinJump_jumps.umbraco.usync\jumps.umbraco.usync\SyncStylesheet.cs,SaveAllToDisk,The following statement contains a magic number: if (Umbraco.Core.Configuration.UmbracoVersion.Current.Major == 7 &&                  Umbraco.Core.Configuration.UmbracoVersion.Current.Minor < 3)              {                    try                  {                      foreach (StyleSheet item in StyleSheet.GetAll())                      {                          SaveToDisk(item);                      }                  }                  catch (Exception ex)                  {                      LogHelper.Info<SyncStylesheet>("uSync: Error Saving all Stylesheets {0}"' () => ex.ToString());                  }              }
Magic Number,jumps.umbraco.usync,SyncStylesheet,C:\repos\KevinJump_jumps.umbraco.usync\jumps.umbraco.usync\SyncStylesheet.cs,SaveAllToDisk,The following statement contains a magic number: if (Umbraco.Core.Configuration.UmbracoVersion.Current.Major == 7 &&                  Umbraco.Core.Configuration.UmbracoVersion.Current.Minor < 3)              {                    try                  {                      foreach (StyleSheet item in StyleSheet.GetAll())                      {                          SaveToDisk(item);                      }                  }                  catch (Exception ex)                  {                      LogHelper.Info<SyncStylesheet>("uSync: Error Saving all Stylesheets {0}"' () => ex.ToString());                  }              }
Magic Number,jumps.umbraco.usync,SyncStylesheet,C:\repos\KevinJump_jumps.umbraco.usync\jumps.umbraco.usync\SyncStylesheet.cs,ReadAllFromDisk,The following statement contains a magic number: if (Umbraco.Core.Configuration.UmbracoVersion.Current.Major == 7 &&                  Umbraco.Core.Configuration.UmbracoVersion.Current.Minor < 3)              {                    Stopwatch sw = new Stopwatch();                  sw.Start();                    string path = IOHelper.MapPath(string.Format("{0}{1}"'                      helpers.uSyncIO.RootFolder'                      "StyleSheet"));                    ReadFromDisk(path);                    sw.Stop();                  LogHelper.Info<uSync>("Processed Stylesheets ({0}ms)"' () => sw.ElapsedMilliseconds);              }
Magic Number,jumps.umbraco.usync,SyncStylesheet,C:\repos\KevinJump_jumps.umbraco.usync\jumps.umbraco.usync\SyncStylesheet.cs,ReadAllFromDisk,The following statement contains a magic number: if (Umbraco.Core.Configuration.UmbracoVersion.Current.Major == 7 &&                  Umbraco.Core.Configuration.UmbracoVersion.Current.Minor < 3)              {                    Stopwatch sw = new Stopwatch();                  sw.Start();                    string path = IOHelper.MapPath(string.Format("{0}{1}"'                      helpers.uSyncIO.RootFolder'                      "StyleSheet"));                    ReadFromDisk(path);                    sw.Stop();                  LogHelper.Info<uSync>("Processed Stylesheets ({0}ms)"' () => sw.ElapsedMilliseconds);              }
Magic Number,jumps.umbraco.usync,SyncStylesheet,C:\repos\KevinJump_jumps.umbraco.usync\jumps.umbraco.usync\SyncStylesheet.cs,AttachEvents,The following statement contains a magic number: if (Umbraco.Core.Configuration.UmbracoVersion.Current.Major == 7 &&                  Umbraco.Core.Configuration.UmbracoVersion.Current.Minor < 3)              {                  StyleSheet.AfterSave += StyleSheet_AfterSave;                  StyleSheet.BeforeDelete += StyleSheet_BeforeDelete;              }
Magic Number,jumps.umbraco.usync,SyncStylesheet,C:\repos\KevinJump_jumps.umbraco.usync\jumps.umbraco.usync\SyncStylesheet.cs,AttachEvents,The following statement contains a magic number: if (Umbraco.Core.Configuration.UmbracoVersion.Current.Major == 7 &&                  Umbraco.Core.Configuration.UmbracoVersion.Current.Minor < 3)              {                  StyleSheet.AfterSave += StyleSheet_AfterSave;                  StyleSheet.BeforeDelete += StyleSheet_BeforeDelete;              }
Magic Number,jumps.umbraco.usync,uSync,C:\repos\KevinJump_jumps.umbraco.usync\jumps.umbraco.usync\uSync.cs,OnApplicationStarted,The following statement contains a magic number: if ( Umbraco.Core.Configuration.UmbracoVersion.Current.Major >= 7 &&                   Umbraco.Core.Configuration.UmbracoVersion.Current.Minor >= 1 )               {                  DoOnStart();              }              else {                  LogHelper.Info<uSync>("########### this version of usync if for Umbraco 7.1 and above ##########");              }
Missing Default,jumps.umbraco.usync.helpers,DiffrenceEngine,C:\repos\KevinJump_jumps.umbraco.usync\jumps.umbraco.usync\helpers\DiffrenceEngine.cs,LogChange,The following switch statement is missing a default case: switch( after.Name.LocalName )              {                  case "DataType":                                      LogDataTypeChange(diffrence' before' after);                      break;                  case "MediaType":                      break;                  case "DocumentType":                      break;                  case "Language":                      break;                  case "Dictionary":                      break;                  case "Template":                      break;                  case "Stylesheet":                      break;               }
