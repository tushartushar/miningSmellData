Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Castle.Components.DictionaryAdapter,DictionaryAdapterBase,D:\research\architectureSmells\repos\castleproject_Castle.Core-READONLY\src\Castle.Core\Components.DictionaryAdapter\DictionaryAdapterBase.Copy.cs,CancelEdit,Cyclomatic complexity of the method is 8
Complex Method,Castle.Components.DictionaryAdapter,DictionaryAdapterBase,D:\research\architectureSmells\repos\castleproject_Castle.Core-READONLY\src\Castle.Core\Components.DictionaryAdapter\DictionaryAdapterBase.Copy.cs,ComposeChildNotifications,Cyclomatic complexity of the method is 11
Complex Method,Castle.Components.DictionaryAdapter,OnDemandAttribute,D:\research\architectureSmells\repos\castleproject_Castle.Core-READONLY\src\Castle.Core\Components.DictionaryAdapter\Attributes\OnDemandAttribute.cs,GetPropertyValue,Cyclomatic complexity of the method is 16
Complex Method,Castle.Components.DictionaryAdapter,OnDemandAttribute,D:\research\architectureSmells\repos\castleproject_Castle.Core-READONLY\src\Castle.Core\Components.DictionaryAdapter\Attributes\OnDemandAttribute.cs,GetInferredType,Cyclomatic complexity of the method is 9
Complex Method,Castle.Components.DictionaryAdapter,XPathAdapter,D:\research\architectureSmells\repos\castleproject_Castle.Core-READONLY\src\Castle.Core\Components.DictionaryAdapter\XPathAdapter.cs,Initialize,Cyclomatic complexity of the method is 11
Complex Method,Castle.Components.DictionaryAdapter,XPathAdapter,D:\research\architectureSmells\repos\castleproject_Castle.Core-READONLY\src\Castle.Core\Components.DictionaryAdapter\XPathAdapter.cs,WriteProperty,Cyclomatic complexity of the method is 8
Complex Method,Castle.Components.DictionaryAdapter,XPathAdapter,D:\research\architectureSmells\repos\castleproject_Castle.Core-READONLY\src\Castle.Core\Components.DictionaryAdapter\XPathAdapter.cs,EvaluateProperty,Cyclomatic complexity of the method is 15
Complex Method,Castle.Components.DictionaryAdapter,XPathResult,D:\research\architectureSmells\repos\castleproject_Castle.Core-READONLY\src\Castle.Core\Components.DictionaryAdapter\XPathResult.cs,GetNodes,Cyclomatic complexity of the method is 8
Complex Method,Castle.Components.DictionaryAdapter,XPathResult,D:\research\architectureSmells\repos\castleproject_Castle.Core-READONLY\src\Castle.Core\Components.DictionaryAdapter\XPathResult.cs,CreateNode,Cyclomatic complexity of the method is 15
Complex Method,Castle.Components.DictionaryAdapter,XPathResult,D:\research\architectureSmells\repos\castleproject_Castle.Core-READONLY\src\Castle.Core\Components.DictionaryAdapter\XPathResult.cs,Remove,Cyclomatic complexity of the method is 9
Complex Method,Castle.DynamicProxy,ProxyGenerator,D:\research\architectureSmells\repos\castleproject_Castle.Core-READONLY\src\Castle.Core\DynamicProxy\ProxyGenerator.cs,CreateInterfaceProxyWithTargetInterface,Cyclomatic complexity of the method is 13
Complex Method,Castle.DynamicProxy.Generators.Emitters.SimpleAST,ConvertExpression,D:\research\architectureSmells\repos\castleproject_Castle.Core-READONLY\src\Castle.Core\DynamicProxy\Generators\Emitters\SimpleAST\ConvertExpression.cs,Emit,Cyclomatic complexity of the method is 8
Complex Method,Castle.DynamicProxy.Generators.Emitters.SimpleAST,LiteralIntExpression,D:\research\architectureSmells\repos\castleproject_Castle.Core-READONLY\src\Castle.Core\DynamicProxy\Generators\Emitters\SimpleAST\LiteralIntExpression.cs,Emit,Cyclomatic complexity of the method is 11
Complex Method,Castle.DynamicProxy.Contributors,MembersCollector,D:\research\architectureSmells\repos\castleproject_Castle.Core-READONLY\src\Castle.Core\DynamicProxy\Contributors\MembersCollector.cs,AcceptMethod,Cyclomatic complexity of the method is 8
Complex Method,Castle.DynamicProxy.Generators,ClassProxyWithTargetGenerator,D:\research\architectureSmells\repos\castleproject_Castle.Core-READONLY\src\Castle.Core\DynamicProxy\Generators\ClassProxyWithTargetGenerator.cs,GetTypeImplementerMapping,Cyclomatic complexity of the method is 11
Complex Method,Castle.DynamicProxy.Generators,BaseProxyGenerator,D:\research\architectureSmells\repos\castleproject_Castle.Core-READONLY\src\Castle.Core\DynamicProxy\Generators\BaseProxyGenerator.cs,GenerateConstructor,Cyclomatic complexity of the method is 9
Complex Method,Castle.DynamicProxy.Generators,CacheKey,D:\research\architectureSmells\repos\castleproject_Castle.Core-READONLY\src\Castle.Core\DynamicProxy\Generators\CacheKey.cs,Equals,Cyclomatic complexity of the method is 9
Complex Method,Castle.DynamicProxy.Generators,ClassProxyGenerator,D:\research\architectureSmells\repos\castleproject_Castle.Core-READONLY\src\Castle.Core\DynamicProxy\Generators\ClassProxyGenerator.cs,GetTypeImplementerMapping,Cyclomatic complexity of the method is 11
Complex Method,Castle.DynamicProxy.Generators,InterfaceProxyWithTargetGenerator,D:\research\architectureSmells\repos\castleproject_Castle.Core-READONLY\src\Castle.Core\DynamicProxy\Generators\InterfaceProxyWithTargetGenerator.cs,GetTypeImplementerMapping,Cyclomatic complexity of the method is 9
Complex Method,Castle.DynamicProxy.Generators,InvocationTypeGenerator,D:\research\architectureSmells\repos\castleproject_Castle.Core-READONLY\src\Castle.Core\DynamicProxy\Generators\InvocationTypeGenerator.cs,ImplementInvokeMethodOnTarget,Cyclomatic complexity of the method is 8
Complex Method,Castle.DynamicProxy.Generators,MetaMethod,D:\research\architectureSmells\repos\castleproject_Castle.Core-READONLY\src\Castle.Core\DynamicProxy\Generators\MetaMethod.cs,ObtainAttributes,Cyclomatic complexity of the method is 9
Complex Method,Castle.DynamicProxy.Generators,MetaProperty,D:\research\architectureSmells\repos\castleproject_Castle.Core-READONLY\src\Castle.Core\DynamicProxy\Generators\MetaProperty.cs,Equals,Cyclomatic complexity of the method is 8
Complex Method,Castle.DynamicProxy.Generators.Emitters,GenericUtil,D:\research\architectureSmells\repos\castleproject_Castle.Core-READONLY\src\Castle.Core\DynamicProxy\Generators\Emitters\GenericUtil.cs,ExtractCorrectType,Cyclomatic complexity of the method is 8
Complex Method,Castle.DynamicProxy.Generators.Emitters,OpCodeUtil,D:\research\architectureSmells\repos\castleproject_Castle.Core-READONLY\src\Castle.Core\DynamicProxy\Generators\Emitters\OpCodeUtil.cs,GetUnderlyingTypeOfEnum,Cyclomatic complexity of the method is 9
Long Parameter List,Castle.Components.DictionaryAdapter,XmlMetadata,D:\research\architectureSmells\repos\castleproject_Castle.Core-READONLY\src\Castle.Core\Components.DictionaryAdapter\XmlMetadata.cs,XmlMetadata,The method has 6 parameters. Parameters: type' qualified' isNullable' xmlType' xmlRoot' xmlIncludes
Long Parameter List,Castle.Components.DictionaryAdapter,ComponentAttribute,D:\research\architectureSmells\repos\castleproject_Castle.Core-READONLY\src\Castle.Core\Components.DictionaryAdapter\Attributes\ComponentAttribute.cs,GetPropertyValue,The method has 5 parameters. Parameters: dictionaryAdapter' key' storedValue' property' ifExists
Long Parameter List,Castle.Components.DictionaryAdapter,NewGuidAttribute,D:\research\architectureSmells\repos\castleproject_Castle.Core-READONLY\src\Castle.Core\Components.DictionaryAdapter\Attributes\NewGuidAttribute.cs,GetPropertyValue,The method has 5 parameters. Parameters: dictionaryAdapter' key' storedValue' property' ifExists
Long Parameter List,Castle.Components.DictionaryAdapter,OnDemandAttribute,D:\research\architectureSmells\repos\castleproject_Castle.Core-READONLY\src\Castle.Core\Components.DictionaryAdapter\Attributes\OnDemandAttribute.cs,GetPropertyValue,The method has 5 parameters. Parameters: dictionaryAdapter' key' storedValue' property' ifExists
Long Parameter List,Castle.Components.DictionaryAdapter,StringFormatAttribute,D:\research\architectureSmells\repos\castleproject_Castle.Core-READONLY\src\Castle.Core\Components.DictionaryAdapter\Attributes\StringFormatAttribute.cs,GetPropertyValue,The method has 5 parameters. Parameters: dictionaryAdapter' key' storedValue' property' ifExists
Long Parameter List,Castle.Components.DictionaryAdapter,StringListAttribute,D:\research\architectureSmells\repos\castleproject_Castle.Core-READONLY\src\Castle.Core\Components.DictionaryAdapter\Attributes\StringListAttribute.cs,GetPropertyValue,The method has 5 parameters. Parameters: dictionaryAdapter' key' storedValue' property' ifExists
Long Parameter List,Castle.Components.DictionaryAdapter,DefaultPropertyGetter,D:\research\architectureSmells\repos\castleproject_Castle.Core-READONLY\src\Castle.Core\Components.DictionaryAdapter\DefaultPropertyGetter.cs,GetPropertyValue,The method has 5 parameters. Parameters: dictionaryAdapter' key' storedValue' property' ifExists
Long Parameter List,Castle.Components.DictionaryAdapter,DictionaryAdapterMeta,D:\research\architectureSmells\repos\castleproject_Castle.Core-READONLY\src\Castle.Core\Components.DictionaryAdapter\DictionaryAdapterMeta.cs,DictionaryAdapterMeta,The method has 7 parameters. Parameters: type' initializers' metaInitializers' behaviors' properties' descriptor' factory
Long Parameter List,Castle.Components.DictionaryAdapter,IDictionaryPropertyGetter,D:\research\architectureSmells\repos\castleproject_Castle.Core-READONLY\src\Castle.Core\Components.DictionaryAdapter\IDictionaryPropertyGetter.cs,GetPropertyValue,The method has 5 parameters. Parameters: dictionaryAdapter' key' storedValue' property' ifExists
Long Parameter List,Castle.Components.DictionaryAdapter,PropertyDescriptor,D:\research\architectureSmells\repos\castleproject_Castle.Core-READONLY\src\Castle.Core\Components.DictionaryAdapter\PropertyDescriptor.cs,GetPropertyValue,The method has 5 parameters. Parameters: dictionaryAdapter' key' storedValue' descriptor' ifExists
Long Parameter List,Castle.Components.DictionaryAdapter,BindingListInitializer<T>,D:\research\architectureSmells\repos\castleproject_Castle.Core-READONLY\src\Castle.Core\Components.DictionaryAdapter\Util\BindingListInitializer.cs,BindingListInitializer,The method has 5 parameters. Parameters: addAt' addNew' setAt' removeAt' reset
Long Parameter List,Castle.Components.DictionaryAdapter,XPathAdapter,D:\research\architectureSmells\repos\castleproject_Castle.Core-READONLY\src\Castle.Core\Components.DictionaryAdapter\XPathAdapter.cs,GetPropertyValue,The method has 5 parameters. Parameters: dictionaryAdapter' key' storedValue' property' ifExists
Long Parameter List,Castle.Components.DictionaryAdapter,XPathResult,D:\research\architectureSmells\repos\castleproject_Castle.Core-READONLY\src\Castle.Core\Components.DictionaryAdapter\XPathResult.cs,XPathResult,The method has 5 parameters. Parameters: property' key' result' context' matchingBehavior
Long Parameter List,Castle.Components.DictionaryAdapter,XPathResult,D:\research\architectureSmells\repos\castleproject_Castle.Core-READONLY\src\Castle.Core\Components.DictionaryAdapter\XPathResult.cs,XPathResult,The method has 6 parameters. Parameters: property' key' result' context' matchingBehavior' create
Long Parameter List,Castle.Components.DictionaryAdapter,XPathResult,D:\research\architectureSmells\repos\castleproject_Castle.Core-READONLY\src\Castle.Core\Components.DictionaryAdapter\XPathResult.cs,GetItemQualifedName,The method has 5 parameters. Parameters: type' item' getXmlMeta' name' namespaceUri
Long Parameter List,Castle.DynamicProxy,AbstractInvocation,D:\research\architectureSmells\repos\castleproject_Castle.Core-READONLY\src\Castle.Core\DynamicProxy\AbstractInvocation.cs,AbstractInvocation,The method has 7 parameters. Parameters: proxy' targetType' interceptors' proxiedMethod' arguments' selector' methodInterceptors
Long Parameter List,Castle.DynamicProxy,ModuleScope,D:\research\architectureSmells\repos\castleproject_Castle.Core-READONLY\src\Castle.Core\DynamicProxy\ModuleScope.cs,ModuleScope,The method has 6 parameters. Parameters: savePhysicalAssembly' disableSignedModule' strongAssemblyName' strongModulePath' weakAssemblyName' weakModulePath
Long Parameter List,Castle.DynamicProxy,ModuleScope,D:\research\architectureSmells\repos\castleproject_Castle.Core-READONLY\src\Castle.Core\DynamicProxy\ModuleScope.cs,ModuleScope,The method has 7 parameters. Parameters: savePhysicalAssembly' disableSignedModule' namingScope' strongAssemblyName' strongModulePath' weakAssemblyName' weakModulePath
Long Parameter List,Castle.DynamicProxy,ProxyGenerator,D:\research\architectureSmells\repos\castleproject_Castle.Core-READONLY\src\Castle.Core\DynamicProxy\ProxyGenerator.cs,CreateInterfaceProxyWithTarget,The method has 5 parameters. Parameters: interfaceToProxy' additionalInterfacesToProxy' target' options' interceptors
Long Parameter List,Castle.DynamicProxy,ProxyGenerator,D:\research\architectureSmells\repos\castleproject_Castle.Core-READONLY\src\Castle.Core\DynamicProxy\ProxyGenerator.cs,CreateInterfaceProxyWithTargetInterface,The method has 5 parameters. Parameters: interfaceToProxy' additionalInterfacesToProxy' target' options' interceptors
Long Parameter List,Castle.DynamicProxy,ProxyGenerator,D:\research\architectureSmells\repos\castleproject_Castle.Core-READONLY\src\Castle.Core\DynamicProxy\ProxyGenerator.cs,CreateClassProxyWithTarget,The method has 5 parameters. Parameters: classToProxy' target' options' constructorArguments' interceptors
Long Parameter List,Castle.DynamicProxy,ProxyGenerator,D:\research\architectureSmells\repos\castleproject_Castle.Core-READONLY\src\Castle.Core\DynamicProxy\ProxyGenerator.cs,CreateClassProxyWithTarget,The method has 5 parameters. Parameters: classToProxy' additionalInterfacesToProxy' target' options' interceptors
Long Parameter List,Castle.DynamicProxy,ProxyGenerator,D:\research\architectureSmells\repos\castleproject_Castle.Core-READONLY\src\Castle.Core\DynamicProxy\ProxyGenerator.cs,CreateClassProxyWithTarget,The method has 6 parameters. Parameters: classToProxy' additionalInterfacesToProxy' target' options' constructorArguments' interceptors
Long Parameter List,Castle.DynamicProxy,ProxyGenerator,D:\research\architectureSmells\repos\castleproject_Castle.Core-READONLY\src\Castle.Core\DynamicProxy\ProxyGenerator.cs,CreateClassProxy,The method has 5 parameters. Parameters: classToProxy' additionalInterfacesToProxy' options' constructorArguments' interceptors
Long Parameter List,Castle.DynamicProxy.Internal,CompositionInvocation,D:\research\architectureSmells\repos\castleproject_Castle.Core-READONLY\src\Castle.Core\DynamicProxy\Internal\CompositionInvocation.cs,CompositionInvocation,The method has 5 parameters. Parameters: target' proxy' interceptors' proxiedMethod' arguments
Long Parameter List,Castle.DynamicProxy.Internal,CompositionInvocation,D:\research\architectureSmells\repos\castleproject_Castle.Core-READONLY\src\Castle.Core\DynamicProxy\Internal\CompositionInvocation.cs,CompositionInvocation,The method has 7 parameters. Parameters: target' proxy' interceptors' proxiedMethod' arguments' selector' methodInterceptors
Long Parameter List,Castle.DynamicProxy.Internal,AttributeUtil,D:\research\architectureSmells\repos\castleproject_Castle.Core-READONLY\src\Castle.Core\DynamicProxy\Internal\AttributeUtil.cs,GetSettersAndFields,The method has 5 parameters. Parameters: namedArguments' properties' propertyValues' fields' fieldValues
Long Parameter List,Castle.DynamicProxy.Internal,InheritanceInvocation,D:\research\architectureSmells\repos\castleproject_Castle.Core-READONLY\src\Castle.Core\DynamicProxy\Internal\InheritanceInvocation.cs,InheritanceInvocation,The method has 5 parameters. Parameters: targetType' proxy' interceptors' proxiedMethod' arguments
Long Parameter List,Castle.DynamicProxy.Internal,InheritanceInvocation,D:\research\architectureSmells\repos\castleproject_Castle.Core-READONLY\src\Castle.Core\DynamicProxy\Internal\InheritanceInvocation.cs,InheritanceInvocation,The method has 7 parameters. Parameters: targetType' proxy' interceptors' proxiedMethod' arguments' selector' methodInterceptors
Long Parameter List,Castle.DynamicProxy.Generators,MetaEvent,D:\research\architectureSmells\repos\castleproject_Castle.Core-READONLY\src\Castle.Core\DynamicProxy\Generators\MetaEvent.cs,MetaEvent,The method has 6 parameters. Parameters: name' declaringType' eventDelegateType' adder' remover' attributes
Long Parameter List,Castle.DynamicProxy.Generators,CompositionInvocationTypeGenerator,D:\research\architectureSmells\repos\castleproject_Castle.Core-READONLY\src\Castle.Core\DynamicProxy\Generators\CompositionInvocationTypeGenerator.cs,CompositionInvocationTypeGenerator,The method has 5 parameters. Parameters: target' method' callback' canChangeTarget' contributor
Long Parameter List,Castle.DynamicProxy.Generators,InterfaceProxyWithoutTargetGenerator,D:\research\architectureSmells\repos\castleproject_Castle.Core-READONLY\src\Castle.Core\DynamicProxy\Generators\InterfaceProxyWithoutTargetGenerator.cs,AddMappingForTargetType,The method has 5 parameters. Parameters: interfaceTypeImplementerMapping' proxyTargetType' targetInterfaces' additionalInterfaces' namingScope
Long Parameter List,Castle.DynamicProxy.Generators,InterfaceProxyWithTargetGenerator,D:\research\architectureSmells\repos\castleproject_Castle.Core-READONLY\src\Castle.Core\DynamicProxy\Generators\InterfaceProxyWithTargetGenerator.cs,AddMappingForTargetType,The method has 5 parameters. Parameters: typeImplementerMapping' proxyTargetType' targetInterfaces' additionalInterfaces' namingScope
Long Parameter List,Castle.DynamicProxy.Generators,InterfaceProxyWithTargetGenerator,D:\research\architectureSmells\repos\castleproject_Castle.Core-READONLY\src\Castle.Core\DynamicProxy\Generators\InterfaceProxyWithTargetGenerator.cs,Init,The method has 5 parameters. Parameters: typeName' emitter' proxyTargetType' interceptorsField' interfaces
Long Parameter List,Castle.DynamicProxy.Generators,InterfaceProxyWithTargetInterfaceGenerator,D:\research\architectureSmells\repos\castleproject_Castle.Core-READONLY\src\Castle.Core\DynamicProxy\Generators\InterfaceProxyWithTargetInterfaceGenerator.cs,AddMappingForTargetType,The method has 5 parameters. Parameters: typeImplementerMapping' proxyTargetType' targetInterfaces' additionalInterfaces' namingScope
Long Parameter List,Castle.DynamicProxy.Generators,InvocationTypeGenerator,D:\research\architectureSmells\repos\castleproject_Castle.Core-READONLY\src\Castle.Core\DynamicProxy\Generators\InvocationTypeGenerator.cs,InvocationTypeGenerator,The method has 5 parameters. Parameters: targetType' method' callback' canChangeTarget' contributor
Long Parameter List,Castle.DynamicProxy.Generators,InvocationTypeGenerator,D:\research\architectureSmells\repos\castleproject_Castle.Core-READONLY\src\Castle.Core\DynamicProxy\Generators\InvocationTypeGenerator.cs,GetCallbackMethodInvocation,The method has 5 parameters. Parameters: invocation' args' callbackMethod' targetField' invokeMethodOnTarget
Long Parameter List,Castle.DynamicProxy.Generators,MetaMethod,D:\research\architectureSmells\repos\castleproject_Castle.Core-READONLY\src\Castle.Core\DynamicProxy\Generators\MetaMethod.cs,MetaMethod,The method has 5 parameters. Parameters: method' methodOnTarget' standalone' proxyable' hasTarget
Long Parameter List,Castle.DynamicProxy.Generators,MethodWithInvocationGenerator,D:\research\architectureSmells\repos\castleproject_Castle.Core-READONLY\src\Castle.Core\DynamicProxy\Generators\MethodWithInvocationGenerator.cs,MethodWithInvocationGenerator,The method has 6 parameters. Parameters: method' interceptors' invocation' getTargetExpression' createMethod' contributor
Long Parameter List,Castle.DynamicProxy.Generators,MetaProperty,D:\research\architectureSmells\repos\castleproject_Castle.Core-READONLY\src\Castle.Core\DynamicProxy\Generators\MetaProperty.cs,MetaProperty,The method has 7 parameters. Parameters: name' propertyType' declaringType' getter' setter' customAttributes' arguments
Long Parameter List,Castle.DynamicProxy.Generators.Emitters,ClassEmitter,D:\research\architectureSmells\repos\castleproject_Castle.Core-READONLY\src\Castle.Core\DynamicProxy\Generators\Emitters\ClassEmitter.cs,ClassEmitter,The method has 5 parameters. Parameters: modulescope' name' baseType' interfaces' flags
Long Parameter List,Castle.DynamicProxy.Generators.Emitters,ClassEmitter,D:\research\architectureSmells\repos\castleproject_Castle.Core-READONLY\src\Castle.Core\DynamicProxy\Generators\Emitters\ClassEmitter.cs,ClassEmitter,The method has 6 parameters. Parameters: modulescope' name' baseType' interfaces' flags' forceUnsigned
Long Parameter List,Castle.DynamicProxy.Generators.Emitters,ClassEmitter,D:\research\architectureSmells\repos\castleproject_Castle.Core-READONLY\src\Castle.Core\DynamicProxy\Generators\Emitters\ClassEmitter.cs,CreateTypeBuilder,The method has 6 parameters. Parameters: modulescope' name' baseType' interfaces' flags' forceUnsigned
Long Parameter List,Castle.DynamicProxy.Generators.Emitters,MethodEmitter,D:\research\architectureSmells\repos\castleproject_Castle.Core-READONLY\src\Castle.Core\DynamicProxy\Generators\Emitters\MethodEmitter.cs,MethodEmitter,The method has 5 parameters. Parameters: owner' name' attributes' returnType' argumentTypes
Long Parameter List,Castle.DynamicProxy.Generators.Emitters,NestedClassEmitter,D:\research\architectureSmells\repos\castleproject_Castle.Core-READONLY\src\Castle.Core\DynamicProxy\Generators\Emitters\NestedClassEmitter.cs,NestedClassEmitter,The method has 5 parameters. Parameters: maintype' name' attributes' baseType' interfaces
Long Parameter List,Castle.DynamicProxy.Generators.Emitters,NestedClassEmitter,D:\research\architectureSmells\repos\castleproject_Castle.Core-READONLY\src\Castle.Core\DynamicProxy\Generators\Emitters\NestedClassEmitter.cs,CreateTypeBuilder,The method has 5 parameters. Parameters: maintype' name' attributes' baseType' interfaces
Long Parameter List,Castle.DynamicProxy.Generators.Emitters,PropertyEmitter,D:\research\architectureSmells\repos\castleproject_Castle.Core-READONLY\src\Castle.Core\DynamicProxy\Generators\Emitters\PropertyEmitter.cs,PropertyEmitter,The method has 5 parameters. Parameters: parentTypeEmitter' name' attributes' propertyType' arguments
Long Identifier,Castle.DynamicProxy,ProxyGenerationOptions,D:\research\architectureSmells\repos\castleproject_Castle.Core-READONLY\src\Castle.Core\DynamicProxy\ProxyGenerationOptions.cs,,The length of the parameter attributesToAddToGeneratedTypes is 31.
Long Identifier,Castle.DynamicProxy.Generators,ClassProxyWithTargetGenerator,D:\research\architectureSmells\repos\castleproject_Castle.Core-READONLY\src\Castle.Core\DynamicProxy\Generators\ClassProxyWithTargetGenerator.cs,GetTypeImplementerMapping,The length of the parameter additionalInterfacesContributor is 31.
Long Identifier,Castle.DynamicProxy.Generators,ClassProxyGenerator,D:\research\architectureSmells\repos\castleproject_Castle.Core-READONLY\src\Castle.Core\DynamicProxy\Generators\ClassProxyGenerator.cs,GetTypeImplementerMapping,The length of the parameter additionalInterfacesContributor is 31.
Long Identifier,Castle.DynamicProxy.Generators,InterfaceProxyWithoutTargetGenerator,D:\research\architectureSmells\repos\castleproject_Castle.Core-READONLY\src\Castle.Core\DynamicProxy\Generators\InterfaceProxyWithoutTargetGenerator.cs,AddMappingForTargetType,The length of the parameter interfaceTypeImplementerMapping is 31.
Long Identifier,Castle.DynamicProxy.Generators,InterfaceProxyWithTargetGenerator,D:\research\architectureSmells\repos\castleproject_Castle.Core-READONLY\src\Castle.Core\DynamicProxy\Generators\InterfaceProxyWithTargetGenerator.cs,GetTypeImplementerMapping,The length of the parameter additionalInterfacesContributor is 31.
Long Identifier,Castle.DynamicProxy.Generators,InterfaceProxyWithTargetGenerator,D:\research\architectureSmells\repos\castleproject_Castle.Core-READONLY\src\Castle.Core\DynamicProxy\Generators\InterfaceProxyWithTargetGenerator.cs,ThrowInvalidBaseType,The length of the parameter doesNotHaveAccessibleParameterlessConstructor is 45.
Long Identifier,Castle.DynamicProxy.Generators,InvocationTypeGenerator,D:\research\architectureSmells\repos\castleproject_Castle.Core-READONLY\src\Castle.Core\DynamicProxy\Generators\InvocationTypeGenerator.cs,GetCallbackMethodInvocation,The length of the parameter methodOnTargetInvocationExpression is 34.
Long Identifier,Castle.DynamicProxy.Generators,InvocationTypeGenerator,D:\research\architectureSmells\repos\castleproject_Castle.Core-READONLY\src\Castle.Core\DynamicProxy\Generators\InvocationTypeGenerator.cs,ImplementInvokeMethodOnTarget,The length of the parameter methodOnTargetInvocationExpression is 34.
Long Identifier,Castle.DynamicProxy.Generators,MetaMethod,D:\research\architectureSmells\repos\castleproject_Castle.Core-READONLY\src\Castle.Core\DynamicProxy\Generators\MetaMethod.cs,,The length of the parameter ExplicitImplementationAttributes is 32.
Long Identifier,Castle.DynamicProxy.Tokens,InvocationMethods,D:\research\architectureSmells\repos\castleproject_Castle.Core-READONLY\src\Castle.Core\DynamicProxy\Tokens\InvocationMethods.cs,,The length of the parameter CompositionInvocationConstructorNoSelector is 42.
Long Identifier,Castle.DynamicProxy.Tokens,InvocationMethods,D:\research\architectureSmells\repos\castleproject_Castle.Core-READONLY\src\Castle.Core\DynamicProxy\Tokens\InvocationMethods.cs,,The length of the parameter CompositionInvocationConstructorWithSelector is 44.
Long Identifier,Castle.DynamicProxy.Tokens,InvocationMethods,D:\research\architectureSmells\repos\castleproject_Castle.Core-READONLY\src\Castle.Core\DynamicProxy\Tokens\InvocationMethods.cs,,The length of the parameter InheritanceInvocationConstructorNoSelector is 42.
Long Identifier,Castle.DynamicProxy.Tokens,InvocationMethods,D:\research\architectureSmells\repos\castleproject_Castle.Core-READONLY\src\Castle.Core\DynamicProxy\Tokens\InvocationMethods.cs,,The length of the parameter InheritanceInvocationConstructorWithSelector is 44.
Long Statement,Castle.Components.DictionaryAdapter,DefaultXmlSerializer,D:\research\architectureSmells\repos\castleproject_Castle.Core-READONLY\src\Castle.Core\Components.DictionaryAdapter\DefaultXmlSerializer.cs,DeserializeCustom,The length of the statement  "			if (reader.NodeType == XmlNodeType.Element && reader.LocalName == node.LocalName && reader.NamespaceURI == node.NamespaceURI) " is 125.
Long Statement,Castle.Components.DictionaryAdapter,DictionaryAdapterFactory,D:\research\architectureSmells\repos\castleproject_Castle.Core-READONLY\src\Castle.Core\Components.DictionaryAdapter\DictionaryAdapterFactory.cs,CreateAdapterAssembly,The length of the statement  "			var meta = new DictionaryAdapterMeta(type' initializers' metaInitializers' behaviors' propertyMap' descriptor as DictionaryDescriptor' this); " is 141.
Long Statement,Castle.Components.DictionaryAdapter,XPathAdapter,D:\research\architectureSmells\repos\castleproject_Castle.Core-READONLY\src\Castle.Core\Components.DictionaryAdapter\XPathAdapter.cs,WriteCollection,The length of the statement  "					value = ((IDictionaryPropertyGetter)this).GetPropertyValue(dictionaryAdapter' result.Key' null' result.Property' false); " is 120.
Long Statement,Castle.Core.Internal,SlimReadWriteLock,D:\research\architectureSmells\repos\castleproject_Castle.Core-READONLY\src\Castle.Core\Core\Internal\SlimReadWriteLock.cs,ForReadingUpgradeable,The length of the statement  "			return new SlimUpgradeableReadLockHolder(locker' waitForLock' locker.IsUpgradeableReadLockHeld || locker.IsWriteLockHeld); " is 122.
Long Statement,Castle.Core,ReflectionBasedDictionaryAdapter,D:\research\architectureSmells\repos\castleproject_Castle.Core-READONLY\src\Castle.Core\Core\ReflectionBasedDictionaryAdapter.cs,GetPropertyValue,The length of the statement  "				string message = "Could not read properties of anonymous object due to restrictive behavior of Silverlight. Make your assembly internal types visible to Castle.Core by adding the following attribute: [assembly: InternalsVisibleTo(InternalsVisible.ToCastleCore)]"; " is 263.
Long Statement,Castle.DynamicProxy,ModuleScope,D:\research\architectureSmells\repos\castleproject_Castle.Core-READONLY\src\Castle.Core\DynamicProxy\ModuleScope.cs,GetKeyPair,The length of the statement  "						"Should have a Castle.DynamicProxy.DynProxy.snk as an embedded resource' so Dynamic Proxy could sign generated assembly"); " is 122.
Long Statement,Castle.DynamicProxy,ModuleScope,D:\research\architectureSmells\repos\castleproject_Castle.Core-READONLY\src\Castle.Core\DynamicProxy\ModuleScope.cs,CreateModule,The length of the statement  "						assemblyName' AssemblyBuilderAccess.RunAndSave' signStrongName ? StrongNamedModuleDirectory : WeakNamedModuleDirectory); " is 120.
Long Statement,Castle.DynamicProxy,ModuleScope,D:\research\architectureSmells\repos\castleproject_Castle.Core-READONLY\src\Castle.Core\DynamicProxy\ModuleScope.cs,CreateModule,The length of the statement  "							"There was an error creating dynamic assembly for your proxies - you don't have permissions required to sign the assembly. To workaround it you can enforce generating non-signed assembly only when creating {0}. ALternatively ensure that your account has all the required permissions."' " is 285.
Long Statement,Castle.DynamicProxy,ModuleScope,D:\research\architectureSmells\repos\castleproject_Castle.Core-READONLY\src\Castle.Core\DynamicProxy\ModuleScope.cs,GetAssemblyName,The length of the statement  "					// we can only set the public key.. but for our needs it appears to be working (workaround found by Jeff Nevins' see issue 161 for DP in the issue tracker for more details) " is 172.
Long Statement,Castle.DynamicProxy,ProxyGenerator,D:\research\architectureSmells\repos\castleproject_Castle.Core-READONLY\src\Castle.Core\DynamicProxy\ProxyGenerator.cs,CreateInterfaceProxyWithTarget,The length of the statement  "			// NOTE: we don't need to document exception case where interface type is null' since it can never be for a generic method. " is 123.
Long Statement,Castle.DynamicProxy,ProxyGenerator,D:\research\architectureSmells\repos\castleproject_Castle.Core-READONLY\src\Castle.Core\DynamicProxy\ProxyGenerator.cs,CreateInterfaceProxyWithTarget,The length of the statement  "			// If we leave target as being of type TInterface we also have covered exception where target does not implement TInterface. " is 124.
Long Statement,Castle.DynamicProxy,ProxyGenerator,D:\research\architectureSmells\repos\castleproject_Castle.Core-READONLY\src\Castle.Core\DynamicProxy\ProxyGenerator.cs,GetConstructorArguments,The length of the statement  "			// create constructor arguments (initialized with mixin implementations' interceptors and target type constructor arguments) " is 124.
Long Statement,Castle.DynamicProxy,ProxyGenerator,D:\research\architectureSmells\repos\castleproject_Castle.Core-READONLY\src\Castle.Core\DynamicProxy\ProxyGenerator.cs,CreateClassProxyWithTarget,The length of the statement  "			// create constructor arguments (initialized with mixin implementations' interceptors and target type constructor arguments) " is 124.
Long Statement,Castle.DynamicProxy,ProxyGenerator,D:\research\architectureSmells\repos\castleproject_Castle.Core-READONLY\src\Castle.Core\DynamicProxy\ProxyGenerator.cs,CreateClassProxy,The length of the statement  "			// create constructor arguments (initialized with mixin implementations' interceptors and target type constructor arguments) " is 124.
Long Statement,Castle.DynamicProxy.Internal,CompositionInvocation,D:\research\architectureSmells\repos\castleproject_Castle.Core-READONLY\src\Castle.Core\DynamicProxy\Internal\CompositionInvocation.cs,EnsureValidProxyTarget,The length of the statement  "			              "This would result in recursively calling proxy methods over and over again until stack overflow' which may destabilize your program." + " is 136.
Long Statement,Castle.DynamicProxy.Internal,CompositionInvocation,D:\research\architectureSmells\repos\castleproject_Castle.Core-READONLY\src\Castle.Core\DynamicProxy\Internal\CompositionInvocation.cs,EnsureValidTarget,The length of the statement  "			              "This may result in recursively calling the method over and over again until stack overflow' which may destabilize your program." + " is 131.
Long Statement,Castle.DynamicProxy.Internal,AttributeUtil,D:\research\architectureSmells\repos\castleproject_Castle.Core-READONLY\src\Castle.Core\DynamicProxy\Internal\AttributeUtil.cs,GetNonInheritableAttributes,The length of the statement  "							"Due to limitations in CLR' DynamicProxy was unable to successfully replicate non-inheritable attribute {0} on {1}{2}. To avoid this error you can chose not to replicate this attribute type by calling '{3}.Add(typeof({0}))'."' " is 226.
Long Statement,Castle.DynamicProxy.Generators,ClassProxyWithTargetGenerator,D:\research\architectureSmells\repos\castleproject_Castle.Core-READONLY\src\Castle.Core\DynamicProxy\Generators\ClassProxyWithTargetGenerator.cs,EnsureDoesNotImplementIProxyTargetAccessor,The length of the statement  "					"Target type for the proxy implements {0} which is a DynamicProxy infrastructure interface and you should never implement it yourself. Are you trying to proxy an existing proxy?"' " is 179.
Long Statement,Castle.DynamicProxy.Generators,BaseProxyGenerator,D:\research\architectureSmells\repos\castleproject_Castle.Core-READONLY\src\Castle.Core\DynamicProxy\Generators\BaseProxyGenerator.cs,HandleExplicitlyPassedProxyTargetAccessor,The length of the statement  "						"Target type for the proxy implements {0} which is a DynamicProxy infrastructure interface and you should never implement it yourself. Are you trying to proxy an existing proxy?"' " is 179.
Long Statement,Castle.DynamicProxy.Generators,BaseProxyGenerator,D:\research\architectureSmells\repos\castleproject_Castle.Core-READONLY\src\Castle.Core\DynamicProxy\Generators\BaseProxyGenerator.cs,HandleExplicitlyPassedProxyTargetAccessor,The length of the statement  "						"Mixin type {0} implements {1} which is a DynamicProxy infrastructure interface and you should never implement it yourself. Are you trying to mix in an existing proxy?"' " is 169.
Long Statement,Castle.DynamicProxy.Generators,BaseProxyGenerator,D:\research\architectureSmells\repos\castleproject_Castle.Core-READONLY\src\Castle.Core\DynamicProxy\Generators\BaseProxyGenerator.cs,HandleExplicitlyPassedProxyTargetAccessor,The length of the statement  "						"You passed {0} as one of additional interfaces to proxy which is a DynamicProxy infrastructure interface and is implemented by every proxy anyway. Please remove it from the list of additional interfaces to proxy."' " is 215.
Long Statement,Castle.DynamicProxy.Generators,ClassProxyGenerator,D:\research\architectureSmells\repos\castleproject_Castle.Core-READONLY\src\Castle.Core\DynamicProxy\Generators\ClassProxyGenerator.cs,EnsureDoesNotImplementIProxyTargetAccessor,The length of the statement  "					"Target type for the proxy implements {0} which is a DynamicProxy infrastructure interface and you should never implement it yourself. Are you trying to proxy an existing proxy?"' " is 179.
Long Statement,Castle.DynamicProxy.Generators,InterfaceProxyWithTargetGenerator,D:\research\architectureSmells\repos\castleproject_Castle.Core-READONLY\src\Castle.Core\DynamicProxy\Generators\InterfaceProxyWithTargetGenerator.cs,ThrowInvalidBaseType,The length of the statement  "				"Type {0} is not valid base type for interface proxy' because {1}. Only a non-sealed class with non-private default constructor can be used as base type for interface proxy. Please use some other valid type."; " is 209.
Long Statement,Castle.DynamicProxy.Generators,InvocationTypeGenerator,D:\research\architectureSmells\repos\castleproject_Castle.Core-READONLY\src\Castle.Core\DynamicProxy\Generators\InvocationTypeGenerator.cs,ImplementInvokeMethodOnTarget,The length of the statement  "			var methodOnTargetInvocationExpression = GetCallbackMethodInvocation(invocation' args' callbackMethod' targetField' invokeMethodOnTarget); " is 138.
Long Statement,Castle.DynamicProxy.Serialization,ProxyObjectReference,D:\research\architectureSmells\repos\castleproject_Castle.Core-READONLY\src\Castle.Core\DynamicProxy\Serialization\ProxyObjectReference.cs,OnDeserialization,The length of the statement  "			// Get the proxy state again' to get all those members we couldn't get in the constructor due to deserialization ordering. " is 122.
Long Statement,Castle.DynamicProxy.Generators.Emitters,GenericUtil,D:\research\architectureSmells\repos\castleproject_Castle.Core-READONLY\src\Castle.Core\DynamicProxy\Generators\Emitters\GenericUtil.cs,AdjustConstraintToNewGenericParameters,The length of the statement  "					             "When a generic method parameter has a constraint on another method parameter' both parameters must be declared on the same method."); " is 134.
Long Statement,Castle.DynamicProxy.Generators.Emitters,GenericUtil,D:\research\architectureSmells\repos\castleproject_Castle.Core-READONLY\src\Castle.Core\DynamicProxy\Generators\Emitters\GenericUtil.cs,AdjustConstraintToNewGenericParameters,The length of the statement  "					             "When a generic method parameter has a constraint on a generic type parameter' the generic type must be the declaring typer of the method."); " is 141.
Long Statement,Castle.DynamicProxy.Generators.Emitters,StrongNameUtil,D:\research\architectureSmells\repos\castleproject_Castle.Core-READONLY\src\Castle.Core\DynamicProxy\Generators\Emitters\StrongNameUtil.cs,ContainsPublicKey,The length of the statement  "			// Pulled from a comment on http://www.flawlesscode.com/post/2008/08/Mocking-and-IOC-in-Silverlight-2-Castle-Project-and-Moq-ports.aspx " is 135.
Long Statement,Castle.DynamicProxy.Generators.Emitters,TypeUtil,D:\research\architectureSmells\repos\castleproject_Castle.Core-READONLY\src\Castle.Core\DynamicProxy\Generators\Emitters\TypeUtil.cs,SetStaticField,The length of the statement  "						"There was an error trying to set field named '{0}' on type {1}. This is likely a bug in DynamicProxy. Please report it."' " is 122.
Long Statement,Castle.Core.Resource,AssemblyResource,D:\research\architectureSmells\repos\castleproject_Castle.Core-READONLY\src\Castle.Core\Core\Resource\AssemblyResource.cs,CreateResourceFromUri,The length of the statement  "				String message = String.Format(CultureInfo.InvariantCulture' "The assembly resource {0} could not be located"' resourcePath); " is 125.
Long Statement,Castle.Core.Resource,FileResource,D:\research\architectureSmells\repos\castleproject_Castle.Core-READONLY\src\Castle.Core\Core\Resource\FileResource.cs,CheckFileExists,The length of the statement  "				String message = String.Format(CultureInfo.InvariantCulture' "File {0} could not be found"' new FileInfo(path).FullName); " is 121.
Complex Conditional,Castle.Components.DictionaryAdapter,StringListAttribute,D:\research\architectureSmells\repos\castleproject_Castle.Core-READONLY\src\Castle.Core\Components.DictionaryAdapter\Attributes\StringListAttribute.cs,GetPropertyValue,The conditional expression  "genericDef == typeof(IList<>) || genericDef == typeof(ICollection<>) ||  						genericDef == typeof(List<>) || genericDef == typeof(IEnumerable<>)"  is complex.
Complex Conditional,Castle.DynamicProxy.Contributors,MembersCollector,D:\research\architectureSmells\repos\castleproject_Castle.Core-READONLY\src\Castle.Core\DynamicProxy\Contributors\MembersCollector.cs,AcceptMethod,The conditional expression  "(method.IsPublic || method.IsFamily || method.IsAssembly || method.IsFamilyOrAssembly) == false"  is complex.
Complex Conditional,Castle.DynamicProxy.Generators,MethodFinder,D:\research\architectureSmells\repos\castleproject_Castle.Core-READONLY\src\Castle.Core\DynamicProxy\Generators\MethodFinder.cs,MakeFilteredCopy,The conditional expression  "(method.IsPublic && includePublic) || (!method.IsPublic && includeNonPublic)"  is complex.
Complex Conditional,Castle.Core.Resource,CustomUri,D:\research\architectureSmells\repos\castleproject_Castle.Core-READONLY\src\Castle.Core\Core\Resource\CustomUri.cs,ParseIdentifier,The conditional expression  "comma == -1 && !(identifier[0] == '\\' && identifier[1] == '\\') && identifier[0] != '/'"  is complex.
Virtual Method Call from Constructor,Castle.Components.DictionaryAdapter,TrackPropertyChangeScope,D:\research\architectureSmells\repos\castleproject_Castle.Core-READONLY\src\Castle.Core\Components.DictionaryAdapter\DictionaryAdapterBase.Notify.cs,TrackPropertyChangeScope,The constructor "TrackPropertyChangeScope" calls a virtual method "GetProperty".
Virtual Method Call from Constructor,Castle.DynamicProxy.Serialization,ProxyObjectReference,D:\research\architectureSmells\repos\castleproject_Castle.Core-READONLY\src\Castle.Core\DynamicProxy\Serialization\ProxyObjectReference.cs,ProxyObjectReference,The constructor "ProxyObjectReference" calls a virtual method "RecreateProxy".
Virtual Method Call from Constructor,Castle.DynamicProxy.Generators.Emitters,ClassEmitter,D:\research\architectureSmells\repos\castleproject_Castle.Core-READONLY\src\Castle.Core\DynamicProxy\Generators\Emitters\ClassEmitter.cs,ClassEmitter,The constructor "ClassEmitter" calls a virtual method "InitializeGenericArgumentsFromBases".
Magic Number,Castle.Components.DictionaryAdapter,RemoveIfAttribute,D:\research\architectureSmells\repos\castleproject_Castle.Core-READONLY\src\Castle.Core\Components.DictionaryAdapter\Attributes\RemoveIfAttribute.cs,RemoveIfAttribute,The following statement contains a magic number: ExecutionOrder += 10;
Magic Number,Castle.Components.DictionaryAdapter,HashCodeVisitor,D:\research\architectureSmells\repos\castleproject_Castle.Core-READONLY\src\Castle.Core\Components.DictionaryAdapter\MemberwiseEqualityHashCodeStrategy.cs,CalculateHashCode,The following statement contains a magic number: hashCode = 27;
Magic Number,Castle.Components.DictionaryAdapter,HashCodeVisitor,D:\research\architectureSmells\repos\castleproject_Castle.Core-READONLY\src\Castle.Core\Components.DictionaryAdapter\MemberwiseEqualityHashCodeStrategy.cs,GetCollectionHashcode,The following statement contains a magic number: collectionHashCode = (13 * collectionHashCode) + valueHashCode;
Magic Number,Castle.Components.DictionaryAdapter,HashCodeVisitor,D:\research\architectureSmells\repos\castleproject_Castle.Core-READONLY\src\Castle.Core\Components.DictionaryAdapter\MemberwiseEqualityHashCodeStrategy.cs,CollectHashCode,The following statement contains a magic number: hashCode = (13 * hashCode) + property.PropertyName.GetHashCode();
Magic Number,Castle.Components.DictionaryAdapter,HashCodeVisitor,D:\research\architectureSmells\repos\castleproject_Castle.Core-READONLY\src\Castle.Core\Components.DictionaryAdapter\MemberwiseEqualityHashCodeStrategy.cs,CollectHashCode,The following statement contains a magic number: hashCode = (13 * hashCode) + valueHashCode;
Magic Number,Castle.Core,Pair<TFirst;TSecond>,D:\research\architectureSmells\repos\castleproject_Castle.Core-READONLY\src\Castle.Core\Core\Pair.cs,GetHashCode,The following statement contains a magic number: return first.GetHashCode() + 29 * second.GetHashCode();
Magic Number,Castle.DynamicProxy,MixinData,D:\research\architectureSmells\repos\castleproject_Castle.Core-READONLY\src\Castle.Core\DynamicProxy\MixinData.cs,GetHashCode,The following statement contains a magic number: hashCode = 29*hashCode + mixinImplementation.GetType().GetHashCode();
Magic Number,Castle.DynamicProxy,ProxyGenerationOptions,D:\research\architectureSmells\repos\castleproject_Castle.Core-READONLY\src\Castle.Core\DynamicProxy\ProxyGenerationOptions.cs,GetHashCode,The following statement contains a magic number: result = 29*result + (Selector != null ? 1 : 0);
Magic Number,Castle.DynamicProxy,ProxyGenerationOptions,D:\research\architectureSmells\repos\castleproject_Castle.Core-READONLY\src\Castle.Core\DynamicProxy\ProxyGenerationOptions.cs,GetHashCode,The following statement contains a magic number: result = 29*result + MixinData.GetHashCode();
Magic Number,Castle.DynamicProxy,ProxyGenerationOptions,D:\research\architectureSmells\repos\castleproject_Castle.Core-READONLY\src\Castle.Core\DynamicProxy\ProxyGenerationOptions.cs,GetHashCode,The following statement contains a magic number: result = 29*result + (BaseTypeForInterfaceProxy != null ? BaseTypeForInterfaceProxy.GetHashCode() : 0);
Magic Number,Castle.DynamicProxy.Generators.Emitters.SimpleAST,ArgumentReference,D:\research\architectureSmells\repos\castleproject_Castle.Core-READONLY\src\Castle.Core\DynamicProxy\Generators\Emitters\SimpleAST\ArgumentReference.cs,LoadReference,The following statement contains a magic number: switch (Position)  			{  				case 0:  					gen.Emit(OpCodes.Ldarg_0);  					break;  				case 1:  					gen.Emit(OpCodes.Ldarg_1);  					break;  				case 2:  					gen.Emit(OpCodes.Ldarg_2);  					break;  				case 3:  					gen.Emit(OpCodes.Ldarg_3);  					break;  				default:  					gen.Emit(OpCodes.Ldarg_S' Position);  					break;  			}
Magic Number,Castle.DynamicProxy.Generators.Emitters.SimpleAST,ArgumentReference,D:\research\architectureSmells\repos\castleproject_Castle.Core-READONLY\src\Castle.Core\DynamicProxy\Generators\Emitters\SimpleAST\ArgumentReference.cs,LoadReference,The following statement contains a magic number: switch (Position)  			{  				case 0:  					gen.Emit(OpCodes.Ldarg_0);  					break;  				case 1:  					gen.Emit(OpCodes.Ldarg_1);  					break;  				case 2:  					gen.Emit(OpCodes.Ldarg_2);  					break;  				case 3:  					gen.Emit(OpCodes.Ldarg_3);  					break;  				default:  					gen.Emit(OpCodes.Ldarg_S' Position);  					break;  			}
Magic Number,Castle.DynamicProxy.Generators.Emitters.SimpleAST,LiteralIntExpression,D:\research\architectureSmells\repos\castleproject_Castle.Core-READONLY\src\Castle.Core\DynamicProxy\Generators\Emitters\SimpleAST\LiteralIntExpression.cs,Emit,The following statement contains a magic number: switch (value)  			{  				case -1:  					gen.Emit(OpCodes.Ldc_I4_M1);  					break;  				case 0:  					gen.Emit(OpCodes.Ldc_I4_0);  					break;  				case 1:  					gen.Emit(OpCodes.Ldc_I4_1);  					break;  				case 2:  					gen.Emit(OpCodes.Ldc_I4_2);  					break;  				case 3:  					gen.Emit(OpCodes.Ldc_I4_3);  					break;  				case 4:  					gen.Emit(OpCodes.Ldc_I4_4);  					break;  				case 5:  					gen.Emit(OpCodes.Ldc_I4_5);  					break;  				case 6:  					gen.Emit(OpCodes.Ldc_I4_6);  					break;  				case 7:  					gen.Emit(OpCodes.Ldc_I4_7);  					break;  				case 8:  					gen.Emit(OpCodes.Ldc_I4_8);  					break;  				default:  					gen.Emit(OpCodes.Ldc_I4' value);  					break;  			}
Magic Number,Castle.DynamicProxy.Generators.Emitters.SimpleAST,LiteralIntExpression,D:\research\architectureSmells\repos\castleproject_Castle.Core-READONLY\src\Castle.Core\DynamicProxy\Generators\Emitters\SimpleAST\LiteralIntExpression.cs,Emit,The following statement contains a magic number: switch (value)  			{  				case -1:  					gen.Emit(OpCodes.Ldc_I4_M1);  					break;  				case 0:  					gen.Emit(OpCodes.Ldc_I4_0);  					break;  				case 1:  					gen.Emit(OpCodes.Ldc_I4_1);  					break;  				case 2:  					gen.Emit(OpCodes.Ldc_I4_2);  					break;  				case 3:  					gen.Emit(OpCodes.Ldc_I4_3);  					break;  				case 4:  					gen.Emit(OpCodes.Ldc_I4_4);  					break;  				case 5:  					gen.Emit(OpCodes.Ldc_I4_5);  					break;  				case 6:  					gen.Emit(OpCodes.Ldc_I4_6);  					break;  				case 7:  					gen.Emit(OpCodes.Ldc_I4_7);  					break;  				case 8:  					gen.Emit(OpCodes.Ldc_I4_8);  					break;  				default:  					gen.Emit(OpCodes.Ldc_I4' value);  					break;  			}
Magic Number,Castle.DynamicProxy.Generators.Emitters.SimpleAST,LiteralIntExpression,D:\research\architectureSmells\repos\castleproject_Castle.Core-READONLY\src\Castle.Core\DynamicProxy\Generators\Emitters\SimpleAST\LiteralIntExpression.cs,Emit,The following statement contains a magic number: switch (value)  			{  				case -1:  					gen.Emit(OpCodes.Ldc_I4_M1);  					break;  				case 0:  					gen.Emit(OpCodes.Ldc_I4_0);  					break;  				case 1:  					gen.Emit(OpCodes.Ldc_I4_1);  					break;  				case 2:  					gen.Emit(OpCodes.Ldc_I4_2);  					break;  				case 3:  					gen.Emit(OpCodes.Ldc_I4_3);  					break;  				case 4:  					gen.Emit(OpCodes.Ldc_I4_4);  					break;  				case 5:  					gen.Emit(OpCodes.Ldc_I4_5);  					break;  				case 6:  					gen.Emit(OpCodes.Ldc_I4_6);  					break;  				case 7:  					gen.Emit(OpCodes.Ldc_I4_7);  					break;  				case 8:  					gen.Emit(OpCodes.Ldc_I4_8);  					break;  				default:  					gen.Emit(OpCodes.Ldc_I4' value);  					break;  			}
Magic Number,Castle.DynamicProxy.Generators.Emitters.SimpleAST,LiteralIntExpression,D:\research\architectureSmells\repos\castleproject_Castle.Core-READONLY\src\Castle.Core\DynamicProxy\Generators\Emitters\SimpleAST\LiteralIntExpression.cs,Emit,The following statement contains a magic number: switch (value)  			{  				case -1:  					gen.Emit(OpCodes.Ldc_I4_M1);  					break;  				case 0:  					gen.Emit(OpCodes.Ldc_I4_0);  					break;  				case 1:  					gen.Emit(OpCodes.Ldc_I4_1);  					break;  				case 2:  					gen.Emit(OpCodes.Ldc_I4_2);  					break;  				case 3:  					gen.Emit(OpCodes.Ldc_I4_3);  					break;  				case 4:  					gen.Emit(OpCodes.Ldc_I4_4);  					break;  				case 5:  					gen.Emit(OpCodes.Ldc_I4_5);  					break;  				case 6:  					gen.Emit(OpCodes.Ldc_I4_6);  					break;  				case 7:  					gen.Emit(OpCodes.Ldc_I4_7);  					break;  				case 8:  					gen.Emit(OpCodes.Ldc_I4_8);  					break;  				default:  					gen.Emit(OpCodes.Ldc_I4' value);  					break;  			}
Magic Number,Castle.DynamicProxy.Generators.Emitters.SimpleAST,LiteralIntExpression,D:\research\architectureSmells\repos\castleproject_Castle.Core-READONLY\src\Castle.Core\DynamicProxy\Generators\Emitters\SimpleAST\LiteralIntExpression.cs,Emit,The following statement contains a magic number: switch (value)  			{  				case -1:  					gen.Emit(OpCodes.Ldc_I4_M1);  					break;  				case 0:  					gen.Emit(OpCodes.Ldc_I4_0);  					break;  				case 1:  					gen.Emit(OpCodes.Ldc_I4_1);  					break;  				case 2:  					gen.Emit(OpCodes.Ldc_I4_2);  					break;  				case 3:  					gen.Emit(OpCodes.Ldc_I4_3);  					break;  				case 4:  					gen.Emit(OpCodes.Ldc_I4_4);  					break;  				case 5:  					gen.Emit(OpCodes.Ldc_I4_5);  					break;  				case 6:  					gen.Emit(OpCodes.Ldc_I4_6);  					break;  				case 7:  					gen.Emit(OpCodes.Ldc_I4_7);  					break;  				case 8:  					gen.Emit(OpCodes.Ldc_I4_8);  					break;  				default:  					gen.Emit(OpCodes.Ldc_I4' value);  					break;  			}
Magic Number,Castle.DynamicProxy.Generators.Emitters.SimpleAST,LiteralIntExpression,D:\research\architectureSmells\repos\castleproject_Castle.Core-READONLY\src\Castle.Core\DynamicProxy\Generators\Emitters\SimpleAST\LiteralIntExpression.cs,Emit,The following statement contains a magic number: switch (value)  			{  				case -1:  					gen.Emit(OpCodes.Ldc_I4_M1);  					break;  				case 0:  					gen.Emit(OpCodes.Ldc_I4_0);  					break;  				case 1:  					gen.Emit(OpCodes.Ldc_I4_1);  					break;  				case 2:  					gen.Emit(OpCodes.Ldc_I4_2);  					break;  				case 3:  					gen.Emit(OpCodes.Ldc_I4_3);  					break;  				case 4:  					gen.Emit(OpCodes.Ldc_I4_4);  					break;  				case 5:  					gen.Emit(OpCodes.Ldc_I4_5);  					break;  				case 6:  					gen.Emit(OpCodes.Ldc_I4_6);  					break;  				case 7:  					gen.Emit(OpCodes.Ldc_I4_7);  					break;  				case 8:  					gen.Emit(OpCodes.Ldc_I4_8);  					break;  				default:  					gen.Emit(OpCodes.Ldc_I4' value);  					break;  			}
Magic Number,Castle.DynamicProxy.Generators.Emitters.SimpleAST,LiteralIntExpression,D:\research\architectureSmells\repos\castleproject_Castle.Core-READONLY\src\Castle.Core\DynamicProxy\Generators\Emitters\SimpleAST\LiteralIntExpression.cs,Emit,The following statement contains a magic number: switch (value)  			{  				case -1:  					gen.Emit(OpCodes.Ldc_I4_M1);  					break;  				case 0:  					gen.Emit(OpCodes.Ldc_I4_0);  					break;  				case 1:  					gen.Emit(OpCodes.Ldc_I4_1);  					break;  				case 2:  					gen.Emit(OpCodes.Ldc_I4_2);  					break;  				case 3:  					gen.Emit(OpCodes.Ldc_I4_3);  					break;  				case 4:  					gen.Emit(OpCodes.Ldc_I4_4);  					break;  				case 5:  					gen.Emit(OpCodes.Ldc_I4_5);  					break;  				case 6:  					gen.Emit(OpCodes.Ldc_I4_6);  					break;  				case 7:  					gen.Emit(OpCodes.Ldc_I4_7);  					break;  				case 8:  					gen.Emit(OpCodes.Ldc_I4_8);  					break;  				default:  					gen.Emit(OpCodes.Ldc_I4' value);  					break;  			}
Magic Number,Castle.DynamicProxy.Generators,CacheKey,D:\research\architectureSmells\repos\castleproject_Castle.Core-READONLY\src\Castle.Core\DynamicProxy\Generators\CacheKey.cs,GetHashCode,The following statement contains a magic number: result += 29 + inter.GetHashCode();
Magic Number,Castle.DynamicProxy.Generators,CacheKey,D:\research\architectureSmells\repos\castleproject_Castle.Core-READONLY\src\Castle.Core\DynamicProxy\Generators\CacheKey.cs,GetHashCode,The following statement contains a magic number: result = 29*result + options.GetHashCode();
Magic Number,Castle.DynamicProxy.Generators,CacheKey,D:\research\architectureSmells\repos\castleproject_Castle.Core-READONLY\src\Castle.Core\DynamicProxy\Generators\CacheKey.cs,GetHashCode,The following statement contains a magic number: result = 29*result + type.GetHashCode();
Magic Number,Castle.DynamicProxy.Generators,MetaEvent,D:\research\architectureSmells\repos\castleproject_Castle.Core-READONLY\src\Castle.Core\DynamicProxy\Generators\MetaEvent.cs,GetHashCode,The following statement contains a magic number: result = (result*397) ^ (remover.Method != null ? remover.Method.GetHashCode() : 0);
Magic Number,Castle.DynamicProxy.Generators,MetaEvent,D:\research\architectureSmells\repos\castleproject_Castle.Core-READONLY\src\Castle.Core\DynamicProxy\Generators\MetaEvent.cs,GetHashCode,The following statement contains a magic number: result = (result*397) ^ Attributes.GetHashCode();
Magic Number,Castle.DynamicProxy.Generators,MetaProperty,D:\research\architectureSmells\repos\castleproject_Castle.Core-READONLY\src\Castle.Core\DynamicProxy\Generators\MetaProperty.cs,GetHashCode,The following statement contains a magic number: return ((GetMethod != null ? GetMethod.GetHashCode() : 0)*397) ^ (SetMethod != null ? SetMethod.GetHashCode() : 0);
Magic Number,Castle.Core.Resource,AssemblyBundleResource,D:\research\architectureSmells\repos\castleproject_Castle.Core-READONLY\src\Castle.Core\Core\Resource\AssemblyBundleResource.cs,GetStreamReader,The following statement contains a magic number: paths.Length != 2
Missing Default,Castle.Components.DictionaryAdapter,BindingListInitializer<T>,D:\research\architectureSmells\repos\castleproject_Castle.Core-READONLY\src\Castle.Core\Components.DictionaryAdapter\Util\BindingListInitializer.cs,Initialize,The following switch statement is missing a default case: switch (args.ListChangedType)  				{  					case ListChangedType.ItemAdded:  						if (addingNew == false && addAt != null)  						{  							var item = addAt(args.NewIndex' bindingList[args.NewIndex]);  							if (item != null)  							{  								using (new SuppressListChangedEvents(bindingList))  								{  									bindingList[args.NewIndex] = (T)item;									  								}  							}  						}  						addingNew = false;  						break;    					case ListChangedType.ItemChanged:  						if (setAt != null)  						{  							var item = setAt(args.NewIndex' bindingList[args.NewIndex]);  							if (item != null)  							{  								using (new SuppressListChangedEvents(bindingList))  								{  									bindingList[args.NewIndex] = (T)item;  								}  							}  						}  						break;    					case ListChangedType.ItemDeleted:  						if (removeAt != null)  							removeAt(args.NewIndex);  						break;    					case ListChangedType.Reset:  						if (reset != null)  							reset();  						break;  				}
Missing Default,Castle.Core.Logging,TraceLogger,D:\research\architectureSmells\repos\castleproject_Castle.Core-READONLY\src\Castle.Core\Core\Logging\TraceLogger.cs,MapLoggerLevel,The following switch statement is missing a default case: switch (level)  			{  				case SourceLevels.All:  					return LoggerLevel.Debug;  				case SourceLevels.Verbose:  					return LoggerLevel.Debug;  				case SourceLevels.Information:  					return LoggerLevel.Info;  				case SourceLevels.Warning:  					return LoggerLevel.Warn;  				case SourceLevels.Error:  					return LoggerLevel.Error;  				case SourceLevels.Critical:  					return LoggerLevel.Fatal;  			}
Missing Default,Castle.Core.Logging,TraceLogger,D:\research\architectureSmells\repos\castleproject_Castle.Core-READONLY\src\Castle.Core\Core\Logging\TraceLogger.cs,MapSourceLevels,The following switch statement is missing a default case: switch (level)  			{  				case LoggerLevel.Debug:  					return SourceLevels.Verbose;  				case LoggerLevel.Info:  					return SourceLevels.Information;  				case LoggerLevel.Warn:  					return SourceLevels.Warning;  				case LoggerLevel.Error:  					return SourceLevels.Error;  				case LoggerLevel.Fatal:  					return SourceLevels.Critical;  			}
Missing Default,Castle.Core.Logging,TraceLogger,D:\research\architectureSmells\repos\castleproject_Castle.Core-READONLY\src\Castle.Core\Core\Logging\TraceLogger.cs,MapTraceEventType,The following switch statement is missing a default case: switch (level)  			{  				case LoggerLevel.Debug:  					return TraceEventType.Verbose;  				case LoggerLevel.Info:  					return TraceEventType.Information;  				case LoggerLevel.Warn:  					return TraceEventType.Warning;  				case LoggerLevel.Error:  					return TraceEventType.Error;  				case LoggerLevel.Fatal:  					return TraceEventType.Critical;  			}
