Implementation smell,Namespace,Class,File,Method,Description
Complex Method,CSharpTest.Net.Library.Test,TestTransactedCompoundFile,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestTransactedCompoundFile.cs,ExersizeFile,Cyclomatic complexity of the method is 10
Complex Method,CSharpTest.Net.Library.Test,TestBTreeList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestBTreeList.cs,SequencedTest,Cyclomatic complexity of the method is 12
Complex Method,CSharpTest.Net.Library.Test,TestBTreeDictionary,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestBTreeDictionary.cs,SequencedTest,Cyclomatic complexity of the method is 18
Complex Method,CSharpTest.Net.Library.Test,TestFragmentedFile,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestFragmentedFile.cs,TestCrud,Cyclomatic complexity of the method is 8
Long Statement,CSharpTest.Net.Library.Test,TestLurchTable,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestLurchTable.cs,TestCTors,The length of the statement  "            Assert.AreEqual(LurchTableOrder.Access' new LurchTable<int' int>(LurchTableOrder.Access' limit' 1' 1' 1' cmp).Ordering); " is 120.
Long Statement,CSharpTest.Net.Library.Test,TestLurchTableThreading,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestLurchTableThreading.cs,TestInsertUpdateDelete,The length of the statement  "            Parallel(100' ids' id => { Assert.IsTrue(Map.TryAdd(id' true)); Assert.IsTrue(Map.TryUpdate(id' false' true)); Assert.IsTrue(Map.Remove(id)); }); " is 145.
Long Statement,CSharpTest.Net.Library.Test,TestTransactedCompoundFile,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestTransactedCompoundFile.cs,TestOptions,The length of the statement  "                Assert.AreEqual(TransactedCompoundFile.LoadingRule.Primary' o.LoadingRule = TransactedCompoundFile.LoadingRule.Primary); " is 120.
Long Statement,CSharpTest.Net.Library.Test,TestTransactedCompoundFile,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestTransactedCompoundFile.cs,SimpleTest,The length of the statement  "                using (TransactedCompoundFile test = new TransactedCompoundFile(new TransactedCompoundFile.Options(temp.TempPath) { BlockSize=512' CreateNew = true })) " is 151.
Long Statement,CSharpTest.Net.Library.Test,TestTransactedCompoundFile,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestTransactedCompoundFile.cs,SimpleTest,The length of the statement  "                    Assert.AreEqual("Roger was here."' Encoding.UTF8.GetString(IOStream.ReadAllBytes(test.Read(TransactedCompoundFile.FirstIdentity)))); " is 132.
Long Statement,CSharpTest.Net.Library.Test,TestTransactedCompoundFile,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestTransactedCompoundFile.cs,SimpleTest,The length of the statement  "                using (TransactedCompoundFile test = new TransactedCompoundFile(new TransactedCompoundFile.Options(temp.TempPath) { BlockSize=512' CreateNew = false })) " is 152.
Long Statement,CSharpTest.Net.Library.Test,TestTransactedCompoundFile,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestTransactedCompoundFile.cs,SimpleTest,The length of the statement  "                    Assert.AreEqual("Roger was here."' Encoding.UTF8.GetString(IOStream.ReadAllBytes(test.Read(TransactedCompoundFile.FirstIdentity)))); " is 132.
Long Statement,CSharpTest.Net.Library.Test,TestTransactedCompoundFile,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestTransactedCompoundFile.cs,RandomTest,The length of the statement  "                using (TransactedCompoundFile test = new TransactedCompoundFile(new TransactedCompoundFile.Options(temp.TempPath) { BlockSize = 512' CreateNew = true })) " is 153.
Long Statement,CSharpTest.Net.Library.Test,TestOrderedEnumeration,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestOrderedEnumeration.cs,TestOrderedKeyValuePairsOverloads,The length of the statement  "            KeyValueSerializer<int'int> ser = new KeyValueSerializer<int'int>(PrimitiveSerializer.Int32' PrimitiveSerializer.Int32); " is 120.
Long Statement,CSharpTest.Net.Library.Test,TestOrderedEnumeration,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestOrderedEnumeration.cs,TestOrderedKeyValuePairsOverloads,The length of the statement  "            ordered = new OrderedKeyValuePairs<int' int>(new ReverseOrder<int>(Comparer<int>.Default)' e' PrimitiveSerializer.Int32' PrimitiveSerializer.Int32); " is 148.
Long Statement,CSharpTest.Net.Library.Test,TestOrderedEnumeration,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestOrderedEnumeration.cs,TestOrderedKeyValuePairsOverloads,The length of the statement  "            ordered = new OrderedKeyValuePairs<int' int>(new ReverseOrder<int>(Comparer<int>.Default)' e' PrimitiveSerializer.Int32' PrimitiveSerializer.Int32' 42); " is 152.
Long Statement,CSharpTest.Net.Library.Test,TestCrc32,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestCrc32.cs,TestKnownBytesLeadingZero,The length of the statement  "{ AssertCrc32(new byte[] { 0x00' 0x00' 0x00' 0x00' 0x00' 0x00' 0x00' 0x00' 0x00' 0x00' 0x00' 0x00' 0x00' 0x00' 0x00' 0x00' 0x00' 0x00' 0x00' 0x00' 0x00' 0x00' 0x00' 0x00' 0x00' 0x00' 0x00' 0x00' 0x00' 0x00' 0x00' 0x00' 0x00' 0x00' 0x00' 0x00' 0x00' 0x00' 0x00' 0x00' 0x00' 0x00' 0x00' 0x28' 0x86' 0x4d' 0x7f' 0x99 }' unchecked((int)0x923D6EFD)); }" is 347.
Long Statement,CSharpTest.Net.Library.Test,TestCrc32,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestCrc32.cs,TestKnownBytesLeading0Xff,The length of the statement  "{ AssertCrc32(new byte[] { 0xff' 0xff' 0xff' 0xff' 0xff' 0xff' 0xff' 0xff' 0xff' 0xff' 0xff' 0xff' 0xff' 0xff' 0xff' 0xff' 0xff' 0xff' 0xff' 0xff' 0xff' 0xff' 0xff' 0xff' 0xff' 0xff' 0xff' 0xff' 0xff' 0xff' 0xff' 0xff' 0xff' 0xff' 0xff' 0xff' 0xff' 0xff' 0xff' 0xff' 0x00' 0x00' 0x00' 0x28' 0xc5' 0x5e' 0x45' 0x7a }' 0x49a04d82); }" is 331.
Long Statement,CSharpTest.Net.Library.Test,TestCrc32,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestCrc32.cs,TestKnownBytesSequence,The length of the statement  "{ AssertCrc32(new byte[] { 0x01' 0x02' 0x03' 0x04' 0x05' 0x06' 0x07' 0x08' 0x09' 0x0a' 0x0b' 0x0c' 0x0d' 0x0e' 0x0f' 0x10' 0x11' 0x12' 0x13' 0x14' 0x15' 0x16' 0x17' 0x18' 0x19' 0x1a' 0x1b' 0x1c' 0x1d' 0x1e' 0x1f' 0x20' 0x21' 0x22' 0x23' 0x24' 0x25' 0x26' 0x27' 0x28' 0x00' 0x00' 0x00' 0x28' 0xbf' 0x67' 0x1e' 0xd0 }' 0x688b3bfa); }" is 331.
Long Statement,CSharpTest.Net.Library.Test,TestFragmentedFile,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestFragmentedFile.cs,TestCloseAndReopen,The length of the statement  "                using (FragmentedFile ff = new FragmentedFile(file.TempPath' 512' 10' 10' FileAccess.Read' FileShare.None' FileOptions.None)) " is 125.
Long Statement,CSharpTest.Net.Library.Test,TestPrimitiveSerializer,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestPrimitiveSerializer.cs,TestSerializeKeyValuePair,The length of the statement  "            ISerializer<KeyValuePair<int' Guid>> ser = new KeyValueSerializer<int' Guid>(PrimitiveSerializer.Int32' PrimitiveSerializer.Guid); " is 130.
Long Statement,CSharpTest.Net.Library.Test,TestBinaryComparer,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestBinaryComparer.cs,TestHashCode,The length of the statement  "            Assert.AreEqual(BinaryComparer.GetHashCode(new byte[] { 1' 2' 3 })' BinaryComparer.GetHashCode(new byte[] { 1' 2' 3 })); " is 120.
Long Statement,CSharpTest.Net.Library.Test,TestBinaryComparer,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestBinaryComparer.cs,TestHashCode,The length of the statement  "            Assert.AreNotEqual(BinaryComparer.GetHashCode(new byte[] { 1' 2 })' BinaryComparer.GetHashCode(new byte[] { 1' 2' 3 })); " is 120.
Long Statement,CSharpTest.Net.Library.Test,TestBinaryComparer,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestBinaryComparer.cs,TestHashCode,The length of the statement  "            Assert.AreNotEqual(BinaryComparer.GetHashCode(new byte[] { 1' 2' 3 })' BinaryComparer.GetHashCode(new byte[] { 1' 2 })); " is 120.
Long Statement,CSharpTest.Net.Library.Test,TestStreamCache,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestStreamCache.cs,TestFileStreamFactoryReturnsFileStream,The length of the statement  "                FileStreamFactory factory = new FileStreamFactory(tempFile.TempPath' FileMode.Create' FileAccess.ReadWrite' FileShare.None' 1024' FileOptions.Asynchronous); " is 156.
Long Statement,CSharpTest.Net.Library.Test,TestStreamCache,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestStreamCache.cs,TestFileStreamFactoryCreateABunch,The length of the statement  "                FileStreamFactory factory = new FileStreamFactory(tempFile.TempPath' FileMode.OpenOrCreate' FileAccess.ReadWrite' FileShare.ReadWrite); " is 135.
Long Statement,CSharpTest.Net.Library.Test,TestStreamCache,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestStreamCache.cs,TestFileStreamInvalidBufferSize,The length of the statement  "                FileStreamFactory factory = new FileStreamFactory(tempFile.TempPath' FileMode.Create' FileAccess.ReadWrite' FileShare.None' 0); " is 127.
Long Statement,CSharpTest.Net.Library.Test,TestStreamCache,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestStreamCache.cs,TestFileStreamInvalidFileShare,The length of the statement  "                FileStreamFactory factory = new FileStreamFactory(tempFile.TempPath' FileMode.OpenOrCreate' FileAccess.ReadWrite' FileShare.None); " is 130.
Long Statement,CSharpTest.Net.Library.Test.LockingTests,TestLockingStructs,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\LockingTests\TestLockingStructs.cs,TestIdiotUsesSafeLockDispose,The length of the statement  "                ((IDisposable)safeLock).Dispose();//since the using statement has the same boxed pointer to r' we are allowed to dispose " is 120.
Empty Catch Block,CSharpTest.Net.Library.Test,TestTransactedCompoundFile,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestTransactedCompoundFile.cs,TestWriteWithOptions,The method has an empty catch block.
Empty Catch Block,CSharpTest.Net.Library.Test,TestTransactedCompoundFile,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestTransactedCompoundFile.cs,TestRevertChanges,The method has an empty catch block.
Empty Catch Block,CSharpTest.Net.Library.Test,TestTransactedCompoundFile,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestTransactedCompoundFile.cs,TestClear,The method has an empty catch block.
Empty Catch Block,CSharpTest.Net.Library.Test,TestTransactedCompoundFile,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestTransactedCompoundFile.cs,VerifyLoadRulesWithCorruptPrimary,The method has an empty catch block.
Empty Catch Block,CSharpTest.Net.Library.Test,TestTransactedCompoundFile,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestTransactedCompoundFile.cs,VerifyLoadRulesWithCorruptSecondary,The method has an empty catch block.
Empty Catch Block,CSharpTest.Net.Library.Test,TestTransactedCompoundFile,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestTransactedCompoundFile.cs,VerifyLoadRulesWithBothCorruptions,The method has an empty catch block.
Empty Catch Block,CSharpTest.Net.Library.Test,TestTransactedCompoundFile,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestTransactedCompoundFile.cs,VerifyLoadRulesWithBothCorruptions,The method has an empty catch block.
Empty Catch Block,CSharpTest.Net.Library.Test,TestBTreeDictionary,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestBTreeDictionary.cs,TestFirstAndLast,The method has an empty catch block.
Empty Catch Block,CSharpTest.Net.Library.Test,TestBTreeDictionary,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestBTreeDictionary.cs,TestFirstAndLast,The method has an empty catch block.
Empty Catch Block,CSharpTest.Net.Library.Test,TestOrderedEnumeration,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestOrderedEnumeration.cs,TestDedupFirst,The method has an empty catch block.
Empty Catch Block,CSharpTest.Net.Library.Test,TestOrderedEnumeration,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestOrderedEnumeration.cs,TestEnumTwiceFails,The method has an empty catch block.
Empty Catch Block,CSharpTest.Net.Library.Test,TestOrderedEnumeration,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestOrderedEnumeration.cs,TestEnumInvalid,The method has an empty catch block.
Empty Catch Block,CSharpTest.Net.Library.Test,TestOrderedEnumeration,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestOrderedEnumeration.cs,TestEnumInvalid,The method has an empty catch block.
Empty Catch Block,CSharpTest.Net.Library.Test,TestStreamCache,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestStreamCache.cs,TestStreamCacheDisposes,The method has an empty catch block.
Empty Catch Block,CSharpTest.Net.Library.Test,TestStreamCache,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestStreamCache.cs,TestStreamCacheDisposes,The method has an empty catch block.
Empty Catch Block,CSharpTest.Net.Library.Test.LockingTests,TestSimpleReadWriteLocking,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\LockingTests\TestSimpleReadWriteLocking.cs,DisposedWithReaders,The method has an empty catch block.
Empty Catch Block,CSharpTest.Net.Library.Test.LockingTests,TestSimpleReadWriteLocking,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\LockingTests\TestSimpleReadWriteLocking.cs,DisposedWithWriters,The method has an empty catch block.
Magic Number,CSharpTest.Net.Library.Test,ExampleCode,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\ExampleCode.cs,LurchTableDemo,The following statement contains a magic number: var loops = Math.Max(1' 100/names.Length);
Magic Number,CSharpTest.Net.Library.Test,ExampleCode,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\ExampleCode.cs,BPlusTreeDemo,The following statement contains a magic number: options.CalcBTreeOrder(16' 24);
Magic Number,CSharpTest.Net.Library.Test,ExampleCode,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\ExampleCode.cs,BPlusTreeDemo,The following statement contains a magic number: options.CalcBTreeOrder(16' 24);
Magic Number,CSharpTest.Net.Library.Test,TestLurchTable,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestLurchTable.cs,GetSample,The following statement contains a magic number: i < 100
Magic Number,CSharpTest.Net.Library.Test,TestLurchTable,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestLurchTable.cs,TestCTors,The following statement contains a magic number: const int limit = 5;
Magic Number,CSharpTest.Net.Library.Test,TestLurchTable,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestLurchTable.cs,TestLimitorByAccess,The following statement contains a magic number: const int prime = 1103;
Magic Number,CSharpTest.Net.Library.Test,TestLurchTable,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestLurchTable.cs,TestLimitorByAccess,The following statement contains a magic number: var test = new LurchTable<int' string>(LurchTableOrder.Access' 3' prime' 10' 10' EqualityComparer<int>.Default);
Magic Number,CSharpTest.Net.Library.Test,TestLurchTable,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestLurchTable.cs,TestLimitorByAccess,The following statement contains a magic number: var test = new LurchTable<int' string>(LurchTableOrder.Access' 3' prime' 10' 10' EqualityComparer<int>.Default);
Magic Number,CSharpTest.Net.Library.Test,TestLurchTable,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestLurchTable.cs,TestLimitorByAccess,The following statement contains a magic number: var test = new LurchTable<int' string>(LurchTableOrder.Access' 3' prime' 10' 10' EqualityComparer<int>.Default);
Magic Number,CSharpTest.Net.Library.Test,TestLurchTable,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestLurchTable.cs,TestLimitorByAccess,The following statement contains a magic number: test[2 * prime] = "b";
Magic Number,CSharpTest.Net.Library.Test,TestLurchTable,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestLurchTable.cs,TestLimitorByAccess,The following statement contains a magic number: test[3 * prime] = "c";
Magic Number,CSharpTest.Net.Library.Test,TestLurchTable,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestLurchTable.cs,TestLimitorByAccess,The following statement contains a magic number: Assert.AreEqual(3' test.Count);
Magic Number,CSharpTest.Net.Library.Test,TestLurchTable,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestLurchTable.cs,TestLimitorByAccess,The following statement contains a magic number: Assert.AreEqual("b"' test[2 * prime]);
Magic Number,CSharpTest.Net.Library.Test,TestLurchTable,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestLurchTable.cs,TestLimitorByAccess,The following statement contains a magic number: test[4] = "d";
Magic Number,CSharpTest.Net.Library.Test,TestLurchTable,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestLurchTable.cs,TestLimitorByAccess,The following statement contains a magic number: test[5] = "e";
Magic Number,CSharpTest.Net.Library.Test,TestLurchTable,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestLurchTable.cs,TestLimitorByAccess,The following statement contains a magic number: Assert.AreEqual(3' test.Count);
Magic Number,CSharpTest.Net.Library.Test,TestLurchTable,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestLurchTable.cs,TestLimitorByAccess,The following statement contains a magic number: Assert.IsTrue(test.ContainsKey(2 * prime));
Magic Number,CSharpTest.Net.Library.Test,TestLurchTable,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestLurchTable.cs,TestLimitorByAccess,The following statement contains a magic number: Assert.IsFalse(test.ContainsKey(3 * prime));
Magic Number,CSharpTest.Net.Library.Test,TestLurchTable,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestLurchTable.cs,TestCrudEvents,The following statement contains a magic number: var test = new LurchTable<int' string>(LurchTableOrder.Access' 3' 1103' 10' 10' EqualityComparer<int>.Default);
Magic Number,CSharpTest.Net.Library.Test,TestLurchTable,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestLurchTable.cs,TestCrudEvents,The following statement contains a magic number: var test = new LurchTable<int' string>(LurchTableOrder.Access' 3' 1103' 10' 10' EqualityComparer<int>.Default);
Magic Number,CSharpTest.Net.Library.Test,TestLurchTable,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestLurchTable.cs,TestCrudEvents,The following statement contains a magic number: var test = new LurchTable<int' string>(LurchTableOrder.Access' 3' 1103' 10' 10' EqualityComparer<int>.Default);
Magic Number,CSharpTest.Net.Library.Test,TestLurchTable,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestLurchTable.cs,TestCrudEvents,The following statement contains a magic number: var test = new LurchTable<int' string>(LurchTableOrder.Access' 3' 1103' 10' 10' EqualityComparer<int>.Default);
Magic Number,CSharpTest.Net.Library.Test,TestLurchTable,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestLurchTable.cs,TestCrudEvents,The following statement contains a magic number: test[2] = "b";
Magic Number,CSharpTest.Net.Library.Test,TestLurchTable,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestLurchTable.cs,TestCrudEvents,The following statement contains a magic number: test[3] = "c";
Magic Number,CSharpTest.Net.Library.Test,TestLurchTable,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestLurchTable.cs,TestCrudEvents,The following statement contains a magic number: Assert.AreEqual(3' test.Count);
Magic Number,CSharpTest.Net.Library.Test,TestLurchTable,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestLurchTable.cs,TestCrudEvents,The following statement contains a magic number: Assert.AreEqual("b"' test[2]);
Magic Number,CSharpTest.Net.Library.Test,TestLurchTable,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestLurchTable.cs,TestCrudEvents,The following statement contains a magic number: test[4] = "d";
Magic Number,CSharpTest.Net.Library.Test,TestLurchTable,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestLurchTable.cs,TestCrudEvents,The following statement contains a magic number: test[5] = "e";
Magic Number,CSharpTest.Net.Library.Test,TestLurchTable,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestLurchTable.cs,TestCrudEvents,The following statement contains a magic number: test[2] = "B";
Magic Number,CSharpTest.Net.Library.Test,TestLurchTable,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestLurchTable.cs,TestCrudEvents,The following statement contains a magic number: test[6] = "f";
Magic Number,CSharpTest.Net.Library.Test,TestLurchTable,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestLurchTable.cs,TestCrudEvents,The following statement contains a magic number: Assert.AreEqual(3' test.Count);
Magic Number,CSharpTest.Net.Library.Test,TestLurchTable,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestLurchTable.cs,TestCrudEvents,The following statement contains a magic number: Assert.IsTrue(test.TryRemove(5' out value));
Magic Number,CSharpTest.Net.Library.Test,TestLurchTable,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestLurchTable.cs,TestCollisionRemoval,The following statement contains a magic number: const int prime = 1103;
Magic Number,CSharpTest.Net.Library.Test,TestLurchTable,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestLurchTable.cs,TestCollisionRemoval,The following statement contains a magic number: var test = new LurchTable<int' string>(LurchTableOrder.Access' 10' prime' 10' 10' EqualityComparer<int>.Default);
Magic Number,CSharpTest.Net.Library.Test,TestLurchTable,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestLurchTable.cs,TestCollisionRemoval,The following statement contains a magic number: var test = new LurchTable<int' string>(LurchTableOrder.Access' 10' prime' 10' 10' EqualityComparer<int>.Default);
Magic Number,CSharpTest.Net.Library.Test,TestLurchTable,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestLurchTable.cs,TestCollisionRemoval,The following statement contains a magic number: var test = new LurchTable<int' string>(LurchTableOrder.Access' 10' prime' 10' 10' EqualityComparer<int>.Default);
Magic Number,CSharpTest.Net.Library.Test,TestLurchTable,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestLurchTable.cs,TestCollisionRemoval,The following statement contains a magic number: test[2 * prime] = "b";
Magic Number,CSharpTest.Net.Library.Test,TestLurchTable,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestLurchTable.cs,TestCollisionRemoval,The following statement contains a magic number: test[3 * prime] = "c";
Magic Number,CSharpTest.Net.Library.Test,TestLurchTable,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestLurchTable.cs,TestCollisionRemoval,The following statement contains a magic number: test[4 * prime] = "d";
Magic Number,CSharpTest.Net.Library.Test,TestLurchTable,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestLurchTable.cs,TestCollisionRemoval,The following statement contains a magic number: test[5 * prime] = "e";
Magic Number,CSharpTest.Net.Library.Test,TestLurchTable,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestLurchTable.cs,TestCollisionRemoval,The following statement contains a magic number: Assert.IsTrue(test.Remove(4 * prime));
Magic Number,CSharpTest.Net.Library.Test,TestLurchTable,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestLurchTable.cs,TestCollisionRemoval,The following statement contains a magic number: Assert.IsTrue(test.Remove(2 * prime));
Magic Number,CSharpTest.Net.Library.Test,TestLurchTable,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestLurchTable.cs,TestCollisionRemoval,The following statement contains a magic number: Assert.IsTrue(test.Remove(5 * prime));
Magic Number,CSharpTest.Net.Library.Test,TestLurchTable,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestLurchTable.cs,TestCollisionRemoval,The following statement contains a magic number: Assert.IsTrue(test.Remove(3 * prime));
Magic Number,CSharpTest.Net.Library.Test,TestLurchTable,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestLurchTable.cs,TestAddRemoveByKey,The following statement contains a magic number: i < 10
Magic Number,CSharpTest.Net.Library.Test,TestLurchTable,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestLurchTable.cs,TestAddRemoveByKey,The following statement contains a magic number: i < 10
Magic Number,CSharpTest.Net.Library.Test,TestLurchTable,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestLurchTable.cs,TestAddRemoveByKey,The following statement contains a magic number: i < 10
Magic Number,CSharpTest.Net.Library.Test,TestLurchTable,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestLurchTable.cs,TestAddRemoveByKey,The following statement contains a magic number: i < 10
Magic Number,CSharpTest.Net.Library.Test,TestLurchTable,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestLurchTable.cs,TestAtomicAdd,The following statement contains a magic number: i < 100
Magic Number,CSharpTest.Net.Library.Test,TestLurchTable,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestLurchTable.cs,TestAtomicAdd,The following statement contains a magic number: Assert.AreEqual(100' data.Count);
Magic Number,CSharpTest.Net.Library.Test,TestLurchTable,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestLurchTable.cs,TestAtomicAdd,The following statement contains a magic number: Assert.AreEqual(100' counter[0] + 1);
Magic Number,CSharpTest.Net.Library.Test,TestLurchTable,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestLurchTable.cs,TestAtomicAdd,The following statement contains a magic number: Assert.IsFalse(data.TryAdd(50' (k) => { throw new InvalidOperationException(); }));
Magic Number,CSharpTest.Net.Library.Test,TestLurchTable,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestLurchTable.cs,TestAtomicAdd,The following statement contains a magic number: Assert.AreEqual(100' data.Count);
Magic Number,CSharpTest.Net.Library.Test,TestLurchTable,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestLurchTable.cs,TestAtomicAddOrUpdate,The following statement contains a magic number: i < 100
Magic Number,CSharpTest.Net.Library.Test,TestLurchTable,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestLurchTable.cs,TestAtomicAddOrUpdate,The following statement contains a magic number: i < 100
Magic Number,CSharpTest.Net.Library.Test,TestLurchTable,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestLurchTable.cs,TestAtomicAddOrUpdate,The following statement contains a magic number: i < 100
Magic Number,CSharpTest.Net.Library.Test,TestLurchTable,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestLurchTable.cs,TestAtomicAddOrUpdate,The following statement contains a magic number: Assert.AreEqual(100' data.Count);
Magic Number,CSharpTest.Net.Library.Test,TestLurchTable,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestLurchTable.cs,TestAtomicAddOrUpdate,The following statement contains a magic number: Assert.AreEqual(200' counter[0] + 1);
Magic Number,CSharpTest.Net.Library.Test,TestLurchTable,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestLurchTable.cs,TestAtomicAddOrUpdate,The following statement contains a magic number: Assert.IsTrue(data.TryRemove(i' (k' v) => int.Parse(v) - 100 == i));
Magic Number,CSharpTest.Net.Library.Test,TestLurchTable,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestLurchTable.cs,TestAtomicAddOrUpdate,The following statement contains a magic number: i < 100
Magic Number,CSharpTest.Net.Library.Test,TestLurchTable,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestLurchTable.cs,TestNewAddOrUpdate,The following statement contains a magic number: Assert.AreEqual("b"' data.AddOrUpdate(2' k => "b"' (k' v) => k.ToString()));
Magic Number,CSharpTest.Net.Library.Test,TestLurchTable,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestLurchTable.cs,TestNewAddOrUpdate,The following statement contains a magic number: Assert.AreEqual("2"' data.AddOrUpdate(2' k => "b"' (k' v) => k.ToString()));
Magic Number,CSharpTest.Net.Library.Test,TestLurchTable,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestLurchTable.cs,TestAtomicInterfaces,The following statement contains a magic number: Assert.IsFalse(data.AddOrUpdate(2' ref update));
Magic Number,CSharpTest.Net.Library.Test,TestLurchTable,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestLurchTable.cs,TestAtomicInterfaces,The following statement contains a magic number: Assert.IsTrue(data.AddOrUpdate(2' ref update));
Magic Number,CSharpTest.Net.Library.Test,TestLurchTable,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestLurchTable.cs,TestAtomicInterfaces,The following statement contains a magic number: Assert.AreEqual(2' data.Count);
Magic Number,CSharpTest.Net.Library.Test,TestLurchTable,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestLurchTable.cs,TestAtomicInterfaces,The following statement contains a magic number: Assert.AreEqual("b"' data[2]);
Magic Number,CSharpTest.Net.Library.Test,TestLurchTable,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestLurchTable.cs,TestAtomicInterfaces,The following statement contains a magic number: Assert.IsTrue(data.TryRemove(2' ref update));
Magic Number,CSharpTest.Net.Library.Test,TestLurchTable,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestLurchTable.cs,TestGetOrAdd,The following statement contains a magic number: Assert.AreEqual("b"' data.GetOrAdd(2' k => "b"));
Magic Number,CSharpTest.Net.Library.Test,TestLurchTable,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestLurchTable.cs,TestGetOrAdd,The following statement contains a magic number: Assert.AreEqual("b"' data.GetOrAdd(2' k => "c"));
Magic Number,CSharpTest.Net.Library.Test,TestLurchTable,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestLurchTable.cs,TestTryRoutines,The following statement contains a magic number: Assert.IsFalse(data.TryUpdate(2' "b"));
Magic Number,CSharpTest.Net.Library.Test,TestLurchTable,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestLurchTable.cs,TestTryRoutines,The following statement contains a magic number: Assert.IsFalse(data.TryRemove(2' out val));
Magic Number,CSharpTest.Net.Library.Test,TestLurchTableThreading,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestLurchTableThreading.cs,TestLimitedInsert,The following statement contains a magic number: var Map = new LurchTable<Guid' bool>(LurchTableOrder.Access' 1000);
Magic Number,CSharpTest.Net.Library.Test,TestLurchTableThreading,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestLurchTableThreading.cs,TestLimitedInsert,The following statement contains a magic number: var ids = CreateSample(Guid.NewGuid()' 1000000' 0);
Magic Number,CSharpTest.Net.Library.Test,TestLurchTableThreading,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestLurchTableThreading.cs,TestLimitedInsert,The following statement contains a magic number: Assert.AreEqual(1000' Map.Count);
Magic Number,CSharpTest.Net.Library.Test,TestLurchTableThreading,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestLurchTableThreading.cs,TestInsert,The following statement contains a magic number: var ids = CreateSample(Guid.NewGuid()' COUNT' 4);
Magic Number,CSharpTest.Net.Library.Test,TestLurchTableThreading,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestLurchTableThreading.cs,TestDelete,The following statement contains a magic number: var ids = CreateSample(Guid.NewGuid()' COUNT' 4);
Magic Number,CSharpTest.Net.Library.Test,TestLurchTableThreading,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestLurchTableThreading.cs,TestInsertDelete,The following statement contains a magic number: var ids = CreateSample(Guid.NewGuid()' COUNT' 4);
Magic Number,CSharpTest.Net.Library.Test,TestLurchTableThreading,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestLurchTableThreading.cs,TestInsertDelete,The following statement contains a magic number: Parallel(100' ids' id => { Assert.IsTrue(Map.TryAdd(id' true)); Assert.IsTrue(Map.Remove(id)); });
Magic Number,CSharpTest.Net.Library.Test,TestLurchTableThreading,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestLurchTableThreading.cs,TestInsertUpdateDelete,The following statement contains a magic number: var ids = CreateSample(Guid.NewGuid()' COUNT' 4);
Magic Number,CSharpTest.Net.Library.Test,TestLurchTableThreading,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestLurchTableThreading.cs,TestInsertUpdateDelete,The following statement contains a magic number: Parallel(100' ids' id => { Assert.IsTrue(Map.TryAdd(id' true)); Assert.IsTrue(Map.TryUpdate(id' false' true)); Assert.IsTrue(Map.Remove(id)); });
Magic Number,CSharpTest.Net.Library.Test,TestLurchTableThreading,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestLurchTableThreading.cs,CompareTest,The following statement contains a magic number: const int size = 1000000;
Magic Number,CSharpTest.Net.Library.Test,TestLurchTableThreading,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestLurchTableThreading.cs,CompareTest,The following statement contains a magic number: int reps = 3;
Magic Number,CSharpTest.Net.Library.Test,TestLurchTableThreading,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestLurchTableThreading.cs,NextHashCollision,The following statement contains a magic number: Array.Copy(                  BitConverter.GetBytes((short)random.Next())'                  0'                  bytes'                  8'                  2              );
Magic Number,CSharpTest.Net.Library.Test,TestLurchTableThreading,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestLurchTableThreading.cs,NextHashCollision,The following statement contains a magic number: Array.Copy(                  BitConverter.GetBytes((short)random.Next())'                  0'                  bytes'                  8'                  2              );
Magic Number,CSharpTest.Net.Library.Test,TestLurchTableThreading,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestLurchTableThreading.cs,NextHashCollision,The following statement contains a magic number: Array.Copy(                  BitConverter.GetBytes(                      BitConverter.ToInt32(bytes' 11) +                      Interlocked.Increment(ref iCounter)                      )'                  0'                  bytes'                  11'                  4              );
Magic Number,CSharpTest.Net.Library.Test,TestLurchTableThreading,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestLurchTableThreading.cs,NextHashCollision,The following statement contains a magic number: Array.Copy(                  BitConverter.GetBytes(                      BitConverter.ToInt32(bytes' 11) +                      Interlocked.Increment(ref iCounter)                      )'                  0'                  bytes'                  11'                  4              );
Magic Number,CSharpTest.Net.Library.Test,TestLurchTableThreading,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestLurchTableThreading.cs,NextHashCollision,The following statement contains a magic number: Array.Copy(                  BitConverter.GetBytes(                      BitConverter.ToInt32(bytes' 11) +                      Interlocked.Increment(ref iCounter)                      )'                  0'                  bytes'                  11'                  4              );
Magic Number,CSharpTest.Net.Library.Test,TestTransactedCompoundFile,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestTransactedCompoundFile.cs,TestOptions,The following statement contains a magic number: Assert.AreEqual(4096' o.BlockSize);
Magic Number,CSharpTest.Net.Library.Test,TestTransactedCompoundFile,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestTransactedCompoundFile.cs,TestOptions,The following statement contains a magic number: Assert.AreEqual(8192' o.BlockSize = 8192);
Magic Number,CSharpTest.Net.Library.Test,TestTransactedCompoundFile,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestTransactedCompoundFile.cs,TestOptions,The following statement contains a magic number: Assert.AreEqual(8192' o.BlockSize = 8192);
Magic Number,CSharpTest.Net.Library.Test,TestTransactedCompoundFile,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestTransactedCompoundFile.cs,TestCommitOnDispose,The following statement contains a magic number: TestWriteWithOptions(                      new TransactedCompoundFile.Options(temp.TempPath)                      {                          BlockSize = 512'                          CommitOnWrite = false'                          CommitOnDispose = true'                      }                      );
Magic Number,CSharpTest.Net.Library.Test,TestTransactedCompoundFile,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestTransactedCompoundFile.cs,TestCommitOnWrite,The following statement contains a magic number: TestWriteWithOptions(                      new TransactedCompoundFile.Options(temp.TempPath)                      {                          BlockSize = 2048'                          CommitOnWrite = true'                          CommitOnDispose = true'                          CreateNew = true                      }                      );
Magic Number,CSharpTest.Net.Library.Test,TestTransactedCompoundFile,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestTransactedCompoundFile.cs,TestNormalWrite,The following statement contains a magic number: TestWriteWithOptions(                      new TransactedCompoundFile.Options(temp.TempPath)                          {                              BlockSize = 512'                              CommitOnWrite = false'                              CommitOnDispose = true                          }                      );
Magic Number,CSharpTest.Net.Library.Test,TestTransactedCompoundFile,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestTransactedCompoundFile.cs,TestCommitWrite,The following statement contains a magic number: TestWriteWithOptions(                      new TransactedCompoundFile.Options(temp.TempPath)                      {                          BlockSize = 512'                          CommitOnWrite = true'                          CommitOnDispose = false                      }                      );
Magic Number,CSharpTest.Net.Library.Test,TestTransactedCompoundFile,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestTransactedCompoundFile.cs,TestNoCommit,The following statement contains a magic number: TestWriteWithOptions(                      new TransactedCompoundFile.Options(temp.TempPath)                      {                          BlockSize = 512'                          CommitOnWrite = false'                          CommitOnDispose = false                      }                      );
Magic Number,CSharpTest.Net.Library.Test,TestTransactedCompoundFile,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestTransactedCompoundFile.cs,TestWriteWithOptions,The following statement contains a magic number: byte[] sample = new byte[1024];
Magic Number,CSharpTest.Net.Library.Test,TestTransactedCompoundFile,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestTransactedCompoundFile.cs,TestWriteWithOptions,The following statement contains a magic number: i == 500
Magic Number,CSharpTest.Net.Library.Test,TestTransactedCompoundFile,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestTransactedCompoundFile.cs,TestWriteWithOptions,The following statement contains a magic number: i < 1000
Magic Number,CSharpTest.Net.Library.Test,TestTransactedCompoundFile,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestTransactedCompoundFile.cs,TestWriteWithOptions,The following statement contains a magic number: i <= 500 || options.CommitOnWrite || options.CommitOnDispose
Magic Number,CSharpTest.Net.Library.Test,TestTransactedCompoundFile,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestTransactedCompoundFile.cs,TestWriteWithOptions,The following statement contains a magic number: i < 1000
Magic Number,CSharpTest.Net.Library.Test,TestTransactedCompoundFile,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestTransactedCompoundFile.cs,TestRevertChanges,The following statement contains a magic number: byte[] sample = new byte[1024];
Magic Number,CSharpTest.Net.Library.Test,TestTransactedCompoundFile,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestTransactedCompoundFile.cs,TestRevertChanges,The following statement contains a magic number: i == 500
Magic Number,CSharpTest.Net.Library.Test,TestTransactedCompoundFile,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestTransactedCompoundFile.cs,TestRevertChanges,The following statement contains a magic number: i < 1000
Magic Number,CSharpTest.Net.Library.Test,TestTransactedCompoundFile,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestTransactedCompoundFile.cs,TestRevertChanges,The following statement contains a magic number: i <= 500
Magic Number,CSharpTest.Net.Library.Test,TestTransactedCompoundFile,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestTransactedCompoundFile.cs,TestRevertChanges,The following statement contains a magic number: i < 1000
Magic Number,CSharpTest.Net.Library.Test,TestTransactedCompoundFile,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestTransactedCompoundFile.cs,TestClear,The following statement contains a magic number: byte[] sample = new byte[1024];
Magic Number,CSharpTest.Net.Library.Test,TestTransactedCompoundFile,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestTransactedCompoundFile.cs,TestClear,The following statement contains a magic number: i < 100
Magic Number,CSharpTest.Net.Library.Test,TestTransactedCompoundFile,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestTransactedCompoundFile.cs,TestClear,The following statement contains a magic number: i < 100
Magic Number,CSharpTest.Net.Library.Test,TestTransactedCompoundFile,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestTransactedCompoundFile.cs,TestRevertWithChanges,The following statement contains a magic number: byte[] sample = new byte[1024];
Magic Number,CSharpTest.Net.Library.Test,TestTransactedCompoundFile,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestTransactedCompoundFile.cs,TestRevertWithChanges,The following statement contains a magic number: i < 1000
Magic Number,CSharpTest.Net.Library.Test,TestTransactedCompoundFile,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestTransactedCompoundFile.cs,TestRevertWithChanges,The following statement contains a magic number: byte[] dummy = new byte[1024];
Magic Number,CSharpTest.Net.Library.Test,TestTransactedCompoundFile,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestTransactedCompoundFile.cs,TestRevertWithChanges,The following statement contains a magic number: i < 1000
Magic Number,CSharpTest.Net.Library.Test,TestTransactedCompoundFile,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestTransactedCompoundFile.cs,TestRevertWithChanges,The following statement contains a magic number: i < 1000
Magic Number,CSharpTest.Net.Library.Test,TestTransactedCompoundFile,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestTransactedCompoundFile.cs,TestCommit,The following statement contains a magic number: byte[] sample = new byte[1024];
Magic Number,CSharpTest.Net.Library.Test,TestTransactedCompoundFile,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestTransactedCompoundFile.cs,TestExceedWriteMax,The following statement contains a magic number: var options = new TransactedCompoundFile.Options(temp.TempPath) {BlockSize = 512};
Magic Number,CSharpTest.Net.Library.Test,TestTransactedCompoundFile,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestTransactedCompoundFile.cs,TestLargeWrite,The following statement contains a magic number: var options = new TransactedCompoundFile.Options(temp.TempPath) { BlockSize = 512 };
Magic Number,CSharpTest.Net.Library.Test,TestTransactedCompoundFile,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestTransactedCompoundFile.cs,TestLargeWrite,The following statement contains a magic number: i < 2
Magic Number,CSharpTest.Net.Library.Test,TestTransactedCompoundFile,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestTransactedCompoundFile.cs,TestLargeWrite,The following statement contains a magic number: i < 2
Magic Number,CSharpTest.Net.Library.Test,TestTransactedCompoundFile,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestTransactedCompoundFile.cs,TestLargeWrite,The following statement contains a magic number: file.Write(hid' sample' i' 300);
Magic Number,CSharpTest.Net.Library.Test,TestTransactedCompoundFile,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestTransactedCompoundFile.cs,TestLargeWrite,The following statement contains a magic number: i < 252
Magic Number,CSharpTest.Net.Library.Test,TestTransactedCompoundFile,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestTransactedCompoundFile.cs,VerifyLoadRulesWithCorruptPrimary,The following statement contains a magic number: var options = new TransactedCompoundFile.Options(temp.TempPath) {BlockSize = 512};
Magic Number,CSharpTest.Net.Library.Test,TestTransactedCompoundFile,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestTransactedCompoundFile.cs,VerifyLoadRulesWithCorruptPrimary,The following statement contains a magic number: const int count = 4;
Magic Number,CSharpTest.Net.Library.Test,TestTransactedCompoundFile,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestTransactedCompoundFile.cs,VerifyLoadRulesWithCorruptPrimary,The following statement contains a magic number: byte[] sample = new byte[options.MaxWriteSize/3];
Magic Number,CSharpTest.Net.Library.Test,TestTransactedCompoundFile,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestTransactedCompoundFile.cs,VerifyLoadRulesWithCorruptPrimary,The following statement contains a magic number: f.Write(sample' 0' 100);
Magic Number,CSharpTest.Net.Library.Test,TestTransactedCompoundFile,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestTransactedCompoundFile.cs,VerifyLoadRulesWithCorruptSecondary,The following statement contains a magic number: var options = new TransactedCompoundFile.Options(temp.TempPath) {BlockSize = 512};
Magic Number,CSharpTest.Net.Library.Test,TestTransactedCompoundFile,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestTransactedCompoundFile.cs,VerifyLoadRulesWithCorruptSecondary,The following statement contains a magic number: const int count = 4;
Magic Number,CSharpTest.Net.Library.Test,TestTransactedCompoundFile,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestTransactedCompoundFile.cs,VerifyLoadRulesWithCorruptSecondary,The following statement contains a magic number: byte[] sample = new byte[options.MaxWriteSize/3];
Magic Number,CSharpTest.Net.Library.Test,TestTransactedCompoundFile,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestTransactedCompoundFile.cs,VerifyLoadRulesWithCorruptSecondary,The following statement contains a magic number: f.Seek(-100' SeekOrigin.End);
Magic Number,CSharpTest.Net.Library.Test,TestTransactedCompoundFile,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestTransactedCompoundFile.cs,VerifyLoadRulesWithCorruptSecondary,The following statement contains a magic number: f.Write(sample' 0' 100);
Magic Number,CSharpTest.Net.Library.Test,TestTransactedCompoundFile,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestTransactedCompoundFile.cs,VerifyLoadRulesWithBothCorruptions,The following statement contains a magic number: var options = new TransactedCompoundFile.Options(temp.TempPath) { BlockSize = 512 };
Magic Number,CSharpTest.Net.Library.Test,TestTransactedCompoundFile,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestTransactedCompoundFile.cs,VerifyLoadRulesWithBothCorruptions,The following statement contains a magic number: const int count = 4;
Magic Number,CSharpTest.Net.Library.Test,TestTransactedCompoundFile,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestTransactedCompoundFile.cs,VerifyLoadRulesWithBothCorruptions,The following statement contains a magic number: byte[] sample = new byte[options.MaxWriteSize / 3];
Magic Number,CSharpTest.Net.Library.Test,TestTransactedCompoundFile,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestTransactedCompoundFile.cs,VerifyLoadRulesWithBothCorruptions,The following statement contains a magic number: f.Write(sample' 0' 100);
Magic Number,CSharpTest.Net.Library.Test,TestTransactedCompoundFile,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestTransactedCompoundFile.cs,VerifyLoadRulesWithBothCorruptions,The following statement contains a magic number: f.Seek(-100' SeekOrigin.End);
Magic Number,CSharpTest.Net.Library.Test,TestTransactedCompoundFile,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestTransactedCompoundFile.cs,VerifyLoadRulesWithBothCorruptions,The following statement contains a magic number: f.Write(sample' 0' 100);
Magic Number,CSharpTest.Net.Library.Test,TestTransactedCompoundFile,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestTransactedCompoundFile.cs,VerifyCommitAsTransaction,The following statement contains a magic number: var options = new TransactedCompoundFile.Options(temp1.TempPath) { BlockSize = 512 };
Magic Number,CSharpTest.Net.Library.Test,TestTransactedCompoundFile,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestTransactedCompoundFile.cs,VerifyCommitAsTransaction,The following statement contains a magic number: const int count = 4;
Magic Number,CSharpTest.Net.Library.Test,TestTransactedCompoundFile,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestTransactedCompoundFile.cs,VerifyCommitAsTransaction,The following statement contains a magic number: byte[] sample1 = new byte[options.MaxWriteSize / 3];
Magic Number,CSharpTest.Net.Library.Test,TestTransactedCompoundFile,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestTransactedCompoundFile.cs,VerifyCommitAsTransaction,The following statement contains a magic number: options = new TransactedCompoundFile.Options(temp2.TempPath) { BlockSize = 512' CommitOnDispose = false };
Magic Number,CSharpTest.Net.Library.Test,TestTransactedCompoundFile,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestTransactedCompoundFile.cs,ConcurrencyTest,The following statement contains a magic number: i < 5
Magic Number,CSharpTest.Net.Library.Test,TestTransactedCompoundFile,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestTransactedCompoundFile.cs,ConcurrencyTest,The following statement contains a magic number: System.Threading.Thread.Sleep(1000);
Magic Number,CSharpTest.Net.Library.Test,TestTransactedCompoundFile,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestTransactedCompoundFile.cs,ConcurrencyTest,The following statement contains a magic number: Assert.AreEqual(0' copy.Length%512);
Magic Number,CSharpTest.Net.Library.Test,TestTransactedCompoundFile,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestTransactedCompoundFile.cs,ConcurrencyTest,The following statement contains a magic number: int hcount = (int)(copy.Length/512);
Magic Number,CSharpTest.Net.Library.Test,TestTransactedCompoundFile,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestTransactedCompoundFile.cs,ConcurrencyTest,The following statement contains a magic number: h % (512 / 4) == 0 || (h + 1) % (512 / 4) == 0
Magic Number,CSharpTest.Net.Library.Test,TestTransactedCompoundFile,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestTransactedCompoundFile.cs,ConcurrencyTest,The following statement contains a magic number: h % (512 / 4) == 0 || (h + 1) % (512 / 4) == 0
Magic Number,CSharpTest.Net.Library.Test,TestTransactedCompoundFile,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestTransactedCompoundFile.cs,ConcurrencyTest,The following statement contains a magic number: h % (512 / 4) == 0 || (h + 1) % (512 / 4) == 0
Magic Number,CSharpTest.Net.Library.Test,TestTransactedCompoundFile,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestTransactedCompoundFile.cs,ConcurrencyTest,The following statement contains a magic number: h % (512 / 4) == 0 || (h + 1) % (512 / 4) == 0
Magic Number,CSharpTest.Net.Library.Test,TestTransactedCompoundFile,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestTransactedCompoundFile.cs,ConcurrencyTest,The following statement contains a magic number: workers.Complete(false' 1000);
Magic Number,CSharpTest.Net.Library.Test,TestTransactedCompoundFile,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestTransactedCompoundFile.cs,ExersizeFile,The following statement contains a magic number: const int LIMIT = 512 * 512 / 4 - 512 * 3;
Magic Number,CSharpTest.Net.Library.Test,TestTransactedCompoundFile,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestTransactedCompoundFile.cs,ExersizeFile,The following statement contains a magic number: const int LIMIT = 512 * 512 / 4 - 512 * 3;
Magic Number,CSharpTest.Net.Library.Test,TestTransactedCompoundFile,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestTransactedCompoundFile.cs,ExersizeFile,The following statement contains a magic number: const int LIMIT = 512 * 512 / 4 - 512 * 3;
Magic Number,CSharpTest.Net.Library.Test,TestTransactedCompoundFile,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestTransactedCompoundFile.cs,ExersizeFile,The following statement contains a magic number: const int LIMIT = 512 * 512 / 4 - 512 * 3;
Magic Number,CSharpTest.Net.Library.Test,TestTransactedCompoundFile,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestTransactedCompoundFile.cs,ExersizeFile,The following statement contains a magic number: const int LIMIT = 512 * 512 / 4 - 512 * 3;
Magic Number,CSharpTest.Net.Library.Test,TestTransactedCompoundFile,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestTransactedCompoundFile.cs,ExersizeFile,The following statement contains a magic number: byte[] bytes = new byte[r.Next(5) == 0 ? r.Next(512) : r.Next(LIMIT)];
Magic Number,CSharpTest.Net.Library.Test,TestTransactedCompoundFile,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestTransactedCompoundFile.cs,ExersizeFile,The following statement contains a magic number: byte[] bytes = new byte[r.Next(5) == 0 ? r.Next(512) : r.Next(LIMIT)];
Magic Number,CSharpTest.Net.Library.Test,TestTransactedCompoundFile,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestTransactedCompoundFile.cs,ExersizeFile,The following statement contains a magic number: state.Count < 1000
Magic Number,CSharpTest.Net.Library.Test,TestTransactedCompoundFile,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestTransactedCompoundFile.cs,ExersizeFile,The following statement contains a magic number: byte[] bytes = new byte[r.Next(512)];
Magic Number,CSharpTest.Net.Library.Test,TestTransactedCompoundFile,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestTransactedCompoundFile.cs,SimpleTest,The following statement contains a magic number: byte[] bytes = RandomBytes(2140);
Magic Number,CSharpTest.Net.Library.Test,TestTransactedCompoundFile,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestTransactedCompoundFile.cs,SimpleTest,The following statement contains a magic number: test.Write(TransactedCompoundFile.FirstIdentity' Encoding.UTF8.GetBytes("Roger was here.")' 0' 15);
Magic Number,CSharpTest.Net.Library.Test,TestTransactedCompoundFile,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestTransactedCompoundFile.cs,SimpleTest,The following statement contains a magic number: test.Write(id' bytes' i' 300);
Magic Number,CSharpTest.Net.Library.Test,TestTransactedCompoundFile,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestTransactedCompoundFile.cs,SimpleTest,The following statement contains a magic number: i % 2 == 0
Magic Number,CSharpTest.Net.Library.Test,TestTransactedCompoundFile,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestTransactedCompoundFile.cs,SimpleTest,The following statement contains a magic number: i < 10
Magic Number,CSharpTest.Net.Library.Test,TestTransactedCompoundFile,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestTransactedCompoundFile.cs,SimpleTest,The following statement contains a magic number: test.Write(handle' bytes' 1000' bytes.Length - 1000);
Magic Number,CSharpTest.Net.Library.Test,TestTransactedCompoundFile,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestTransactedCompoundFile.cs,SimpleTest,The following statement contains a magic number: test.Write(handle' bytes' 1000' bytes.Length - 1000);
Magic Number,CSharpTest.Net.Library.Test,TestTransactedCompoundFile,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestTransactedCompoundFile.cs,SimpleTest,The following statement contains a magic number: CompareBytes(bytes' 1000' bytes.Length - 1000' IOStream.ReadAllBytes(test.Read(handle)));
Magic Number,CSharpTest.Net.Library.Test,TestTransactedCompoundFile,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestTransactedCompoundFile.cs,SimpleTest,The following statement contains a magic number: CompareBytes(bytes' 1000' bytes.Length - 1000' IOStream.ReadAllBytes(test.Read(handle)));
Magic Number,CSharpTest.Net.Library.Test,TestTransactedCompoundFile,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestTransactedCompoundFile.cs,RandomTest,The following statement contains a magic number: switch(i < 1000 ? 0 : rand.Next(3))                          {                              case 0:                                  {                                      id = test.Create();                                      bytes = RandomBytes(rand.Next(1000));                                      store.Add(id' bytes);                                      test.Write(id' bytes' 0' bytes.Length);                                      break;                                  }                              case 1:                                  {                                      id = RandomPick(store.Keys);                                      bytes = store[id];                                      CompareBytes(bytes' 0' bytes.Length' IOStream.ReadAllBytes(test.Read(id)));                                      break;                                  }                              case 2:                                  {                                      id = RandomPick(store.Keys);                                      Assert.IsTrue(store.Remove(id));                                      test.Delete(id);                                      break;                                  }                          }
Magic Number,CSharpTest.Net.Library.Test,TestTransactedCompoundFile,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestTransactedCompoundFile.cs,RandomTest,The following statement contains a magic number: switch(i < 1000 ? 0 : rand.Next(3))                          {                              case 0:                                  {                                      id = test.Create();                                      bytes = RandomBytes(rand.Next(1000));                                      store.Add(id' bytes);                                      test.Write(id' bytes' 0' bytes.Length);                                      break;                                  }                              case 1:                                  {                                      id = RandomPick(store.Keys);                                      bytes = store[id];                                      CompareBytes(bytes' 0' bytes.Length' IOStream.ReadAllBytes(test.Read(id)));                                      break;                                  }                              case 2:                                  {                                      id = RandomPick(store.Keys);                                      Assert.IsTrue(store.Remove(id));                                      test.Delete(id);                                      break;                                  }                          }
Magic Number,CSharpTest.Net.Library.Test,TestTransactedCompoundFile,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestTransactedCompoundFile.cs,RandomTest,The following statement contains a magic number: switch(i < 1000 ? 0 : rand.Next(3))                          {                              case 0:                                  {                                      id = test.Create();                                      bytes = RandomBytes(rand.Next(1000));                                      store.Add(id' bytes);                                      test.Write(id' bytes' 0' bytes.Length);                                      break;                                  }                              case 1:                                  {                                      id = RandomPick(store.Keys);                                      bytes = store[id];                                      CompareBytes(bytes' 0' bytes.Length' IOStream.ReadAllBytes(test.Read(id)));                                      break;                                  }                              case 2:                                  {                                      id = RandomPick(store.Keys);                                      Assert.IsTrue(store.Remove(id));                                      test.Delete(id);                                      break;                                  }                          }
Magic Number,CSharpTest.Net.Library.Test,TestTransactedCompoundFile,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestTransactedCompoundFile.cs,RandomTest,The following statement contains a magic number: switch(i < 1000 ? 0 : rand.Next(3))                          {                              case 0:                                  {                                      id = test.Create();                                      bytes = RandomBytes(rand.Next(1000));                                      store.Add(id' bytes);                                      test.Write(id' bytes' 0' bytes.Length);                                      break;                                  }                              case 1:                                  {                                      id = RandomPick(store.Keys);                                      bytes = store[id];                                      CompareBytes(bytes' 0' bytes.Length' IOStream.ReadAllBytes(test.Read(id)));                                      break;                                  }                              case 2:                                  {                                      id = RandomPick(store.Keys);                                      Assert.IsTrue(store.Remove(id));                                      test.Delete(id);                                      break;                                  }                          }
Magic Number,CSharpTest.Net.Library.Test,TestTransactedCompoundFile,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestTransactedCompoundFile.cs,RandomTest,The following statement contains a magic number: i < 10000
Magic Number,CSharpTest.Net.Library.Test,TestBTreeList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestBTreeList.cs,GetSample,The following statement contains a magic number: i < 1000
Magic Number,CSharpTest.Net.Library.Test,TestBTreeList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestBTreeList.cs,TestIndexOf,The following statement contains a magic number: i <=20
Magic Number,CSharpTest.Net.Library.Test,TestBTreeList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestBTreeList.cs,TestRemoveAt,The following statement contains a magic number: BTreeList<int> test = new BTreeList<int>(new int[] { 0' 1' 2' 3' 4' 5' 6' 7' 8' 9 });
Magic Number,CSharpTest.Net.Library.Test,TestBTreeList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestBTreeList.cs,TestRemoveAt,The following statement contains a magic number: BTreeList<int> test = new BTreeList<int>(new int[] { 0' 1' 2' 3' 4' 5' 6' 7' 8' 9 });
Magic Number,CSharpTest.Net.Library.Test,TestBTreeList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestBTreeList.cs,TestRemoveAt,The following statement contains a magic number: BTreeList<int> test = new BTreeList<int>(new int[] { 0' 1' 2' 3' 4' 5' 6' 7' 8' 9 });
Magic Number,CSharpTest.Net.Library.Test,TestBTreeList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestBTreeList.cs,TestRemoveAt,The following statement contains a magic number: BTreeList<int> test = new BTreeList<int>(new int[] { 0' 1' 2' 3' 4' 5' 6' 7' 8' 9 });
Magic Number,CSharpTest.Net.Library.Test,TestBTreeList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestBTreeList.cs,TestRemoveAt,The following statement contains a magic number: BTreeList<int> test = new BTreeList<int>(new int[] { 0' 1' 2' 3' 4' 5' 6' 7' 8' 9 });
Magic Number,CSharpTest.Net.Library.Test,TestBTreeList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestBTreeList.cs,TestRemoveAt,The following statement contains a magic number: BTreeList<int> test = new BTreeList<int>(new int[] { 0' 1' 2' 3' 4' 5' 6' 7' 8' 9 });
Magic Number,CSharpTest.Net.Library.Test,TestBTreeList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestBTreeList.cs,TestRemoveAt,The following statement contains a magic number: BTreeList<int> test = new BTreeList<int>(new int[] { 0' 1' 2' 3' 4' 5' 6' 7' 8' 9 });
Magic Number,CSharpTest.Net.Library.Test,TestBTreeList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestBTreeList.cs,TestRemoveAt,The following statement contains a magic number: BTreeList<int> test = new BTreeList<int>(new int[] { 0' 1' 2' 3' 4' 5' 6' 7' 8' 9 });
Magic Number,CSharpTest.Net.Library.Test,TestBTreeList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestBTreeList.cs,TestRemoveAt,The following statement contains a magic number: i < 1000
Magic Number,CSharpTest.Net.Library.Test,TestBTreeList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestBTreeList.cs,TestRemoveAt,The following statement contains a magic number: list.RemoveAt(2);
Magic Number,CSharpTest.Net.Library.Test,TestBTreeList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestBTreeList.cs,TestRemoveAt,The following statement contains a magic number: Assert.AreEqual(3' list[1]);
Magic Number,CSharpTest.Net.Library.Test,TestBTreeList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestBTreeList.cs,TestRemoveAt,The following statement contains a magic number: Assert.AreEqual(5' list[2]);
Magic Number,CSharpTest.Net.Library.Test,TestBTreeList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestBTreeList.cs,TestRemoveAt,The following statement contains a magic number: Assert.AreEqual(5' list[2]);
Magic Number,CSharpTest.Net.Library.Test,TestBTreeList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestBTreeList.cs,TestRemoveAt,The following statement contains a magic number: Assert.AreEqual(1000 - 12' list.Count);
Magic Number,CSharpTest.Net.Library.Test,TestBTreeList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestBTreeList.cs,TestRemoveAt,The following statement contains a magic number: Assert.AreEqual(1000 - 12' list.Count);
Magic Number,CSharpTest.Net.Library.Test,TestBTreeList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestBTreeList.cs,TestRangeEnumerate,The following statement contains a magic number: i < 100
Magic Number,CSharpTest.Net.Library.Test,TestBTreeList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestBTreeList.cs,TestRangeEnumerate,The following statement contains a magic number: data.EnumerateRange(-500' 5000)
Magic Number,CSharpTest.Net.Library.Test,TestBTreeList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestBTreeList.cs,TestRangeEnumerate,The following statement contains a magic number: data.EnumerateRange(-500' 5000)
Magic Number,CSharpTest.Net.Library.Test,TestBTreeList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestBTreeList.cs,TestRangeEnumerate,The following statement contains a magic number: Assert.AreEqual(100' ix);
Magic Number,CSharpTest.Net.Library.Test,TestBTreeList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestBTreeList.cs,TestRangeEnumerate,The following statement contains a magic number: new Dictionary<int' int> {{6' 25}' {7' 25}' {8' 25}' {9' 25}' {22' 25}' {28' 28}}
Magic Number,CSharpTest.Net.Library.Test,TestBTreeList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestBTreeList.cs,TestRangeEnumerate,The following statement contains a magic number: new Dictionary<int' int> {{6' 25}' {7' 25}' {8' 25}' {9' 25}' {22' 25}' {28' 28}}
Magic Number,CSharpTest.Net.Library.Test,TestBTreeList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestBTreeList.cs,TestRangeEnumerate,The following statement contains a magic number: new Dictionary<int' int> {{6' 25}' {7' 25}' {8' 25}' {9' 25}' {22' 25}' {28' 28}}
Magic Number,CSharpTest.Net.Library.Test,TestBTreeList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestBTreeList.cs,TestRangeEnumerate,The following statement contains a magic number: new Dictionary<int' int> {{6' 25}' {7' 25}' {8' 25}' {9' 25}' {22' 25}' {28' 28}}
Magic Number,CSharpTest.Net.Library.Test,TestBTreeList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestBTreeList.cs,TestRangeEnumerate,The following statement contains a magic number: new Dictionary<int' int> {{6' 25}' {7' 25}' {8' 25}' {9' 25}' {22' 25}' {28' 28}}
Magic Number,CSharpTest.Net.Library.Test,TestBTreeList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestBTreeList.cs,TestRangeEnumerate,The following statement contains a magic number: new Dictionary<int' int> {{6' 25}' {7' 25}' {8' 25}' {9' 25}' {22' 25}' {28' 28}}
Magic Number,CSharpTest.Net.Library.Test,TestBTreeList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestBTreeList.cs,TestRangeEnumerate,The following statement contains a magic number: new Dictionary<int' int> {{6' 25}' {7' 25}' {8' 25}' {9' 25}' {22' 25}' {28' 28}}
Magic Number,CSharpTest.Net.Library.Test,TestBTreeList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestBTreeList.cs,TestRangeEnumerate,The following statement contains a magic number: new Dictionary<int' int> {{6' 25}' {7' 25}' {8' 25}' {9' 25}' {22' 25}' {28' 28}}
Magic Number,CSharpTest.Net.Library.Test,TestBTreeList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestBTreeList.cs,TestRangeEnumerate,The following statement contains a magic number: new Dictionary<int' int> {{6' 25}' {7' 25}' {8' 25}' {9' 25}' {22' 25}' {28' 28}}
Magic Number,CSharpTest.Net.Library.Test,TestBTreeList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestBTreeList.cs,TestRangeEnumerate,The following statement contains a magic number: new Dictionary<int' int> {{6' 25}' {7' 25}' {8' 25}' {9' 25}' {22' 25}' {28' 28}}
Magic Number,CSharpTest.Net.Library.Test,TestBTreeList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestBTreeList.cs,TestRangeEnumerate,The following statement contains a magic number: new Dictionary<int' int> {{6' 25}' {7' 25}' {8' 25}' {9' 25}' {22' 25}' {28' 28}}
Magic Number,CSharpTest.Net.Library.Test,TestBTreeList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestBTreeList.cs,TestRangeEnumerate,The following statement contains a magic number: new Dictionary<int' int> {{6' 25}' {7' 25}' {8' 25}' {9' 25}' {22' 25}' {28' 28}}
Magic Number,CSharpTest.Net.Library.Test,TestBTreeList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestBTreeList.cs,TestEnumerateFrom,The following statement contains a magic number: i < 100
Magic Number,CSharpTest.Net.Library.Test,TestBTreeList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestBTreeList.cs,TestEnumerateFrom,The following statement contains a magic number: Assert.AreEqual(50' new List<int>(data.EnumerateFrom(50)).Count);
Magic Number,CSharpTest.Net.Library.Test,TestBTreeList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestBTreeList.cs,TestEnumerateFrom,The following statement contains a magic number: Assert.AreEqual(50' new List<int>(data.EnumerateFrom(50)).Count);
Magic Number,CSharpTest.Net.Library.Test,TestBTreeList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestBTreeList.cs,TestEnumerateFrom,The following statement contains a magic number: Assert.AreEqual(25' new List<int>(data.EnumerateFrom(75)).Count);
Magic Number,CSharpTest.Net.Library.Test,TestBTreeList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestBTreeList.cs,TestEnumerateFrom,The following statement contains a magic number: Assert.AreEqual(25' new List<int>(data.EnumerateFrom(75)).Count);
Magic Number,CSharpTest.Net.Library.Test,TestBTreeList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestBTreeList.cs,TestEnumerateFrom,The following statement contains a magic number: i < 100
Magic Number,CSharpTest.Net.Library.Test,TestBTreeList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestBTreeList.cs,TestForwardInsertTo1000,The following statement contains a magic number: SequencedTest(0' 1' 1000' "Forward");
Magic Number,CSharpTest.Net.Library.Test,TestBTreeList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestBTreeList.cs,TestForwardInsertTo5000,The following statement contains a magic number: SequencedTest(0' 1' 5000' "Forward");
Magic Number,CSharpTest.Net.Library.Test,TestBTreeList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestBTreeList.cs,TestReverseInsertTo1000,The following statement contains a magic number: SequencedTest(1000' -1' 0' "Reverse");
Magic Number,CSharpTest.Net.Library.Test,TestBTreeList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestBTreeList.cs,TestReverseInsertTo5000,The following statement contains a magic number: SequencedTest(5000' -1' 0' "Reverse");
Magic Number,CSharpTest.Net.Library.Test,BTreeFactory,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestBTreeList.cs,Create,The following statement contains a magic number: return new BTreeList<int>(5' Comparer);
Magic Number,CSharpTest.Net.Library.Test,BTreeFactory,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestBTreeList.cs,Create,The following statement contains a magic number: return new BTreeDictionary<int' string>(5' Comparer);
Magic Number,CSharpTest.Net.Library.Test,TestBTreeDictionary,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestBTreeDictionary.cs,GetSample,The following statement contains a magic number: i < 1000
Magic Number,CSharpTest.Net.Library.Test,TestBTreeDictionary,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestBTreeDictionary.cs,TestRangeEnumerate,The following statement contains a magic number: i < 100
Magic Number,CSharpTest.Net.Library.Test,TestBTreeDictionary,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestBTreeDictionary.cs,TestRangeEnumerate,The following statement contains a magic number: data.EnumerateRange(-500' 5000)
Magic Number,CSharpTest.Net.Library.Test,TestBTreeDictionary,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestBTreeDictionary.cs,TestRangeEnumerate,The following statement contains a magic number: data.EnumerateRange(-500' 5000)
Magic Number,CSharpTest.Net.Library.Test,TestBTreeDictionary,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestBTreeDictionary.cs,TestRangeEnumerate,The following statement contains a magic number: Assert.AreEqual(100' ix);
Magic Number,CSharpTest.Net.Library.Test,TestBTreeDictionary,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestBTreeDictionary.cs,TestRangeEnumerate,The following statement contains a magic number: new Dictionary<int' int> {{6' 25}' {7' 25}' {8' 25}' {9' 25}' {22' 25}' {28' 28}}
Magic Number,CSharpTest.Net.Library.Test,TestBTreeDictionary,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestBTreeDictionary.cs,TestRangeEnumerate,The following statement contains a magic number: new Dictionary<int' int> {{6' 25}' {7' 25}' {8' 25}' {9' 25}' {22' 25}' {28' 28}}
Magic Number,CSharpTest.Net.Library.Test,TestBTreeDictionary,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestBTreeDictionary.cs,TestRangeEnumerate,The following statement contains a magic number: new Dictionary<int' int> {{6' 25}' {7' 25}' {8' 25}' {9' 25}' {22' 25}' {28' 28}}
Magic Number,CSharpTest.Net.Library.Test,TestBTreeDictionary,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestBTreeDictionary.cs,TestRangeEnumerate,The following statement contains a magic number: new Dictionary<int' int> {{6' 25}' {7' 25}' {8' 25}' {9' 25}' {22' 25}' {28' 28}}
Magic Number,CSharpTest.Net.Library.Test,TestBTreeDictionary,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestBTreeDictionary.cs,TestRangeEnumerate,The following statement contains a magic number: new Dictionary<int' int> {{6' 25}' {7' 25}' {8' 25}' {9' 25}' {22' 25}' {28' 28}}
Magic Number,CSharpTest.Net.Library.Test,TestBTreeDictionary,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestBTreeDictionary.cs,TestRangeEnumerate,The following statement contains a magic number: new Dictionary<int' int> {{6' 25}' {7' 25}' {8' 25}' {9' 25}' {22' 25}' {28' 28}}
Magic Number,CSharpTest.Net.Library.Test,TestBTreeDictionary,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestBTreeDictionary.cs,TestRangeEnumerate,The following statement contains a magic number: new Dictionary<int' int> {{6' 25}' {7' 25}' {8' 25}' {9' 25}' {22' 25}' {28' 28}}
Magic Number,CSharpTest.Net.Library.Test,TestBTreeDictionary,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestBTreeDictionary.cs,TestRangeEnumerate,The following statement contains a magic number: new Dictionary<int' int> {{6' 25}' {7' 25}' {8' 25}' {9' 25}' {22' 25}' {28' 28}}
Magic Number,CSharpTest.Net.Library.Test,TestBTreeDictionary,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestBTreeDictionary.cs,TestRangeEnumerate,The following statement contains a magic number: new Dictionary<int' int> {{6' 25}' {7' 25}' {8' 25}' {9' 25}' {22' 25}' {28' 28}}
Magic Number,CSharpTest.Net.Library.Test,TestBTreeDictionary,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestBTreeDictionary.cs,TestRangeEnumerate,The following statement contains a magic number: new Dictionary<int' int> {{6' 25}' {7' 25}' {8' 25}' {9' 25}' {22' 25}' {28' 28}}
Magic Number,CSharpTest.Net.Library.Test,TestBTreeDictionary,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestBTreeDictionary.cs,TestRangeEnumerate,The following statement contains a magic number: new Dictionary<int' int> {{6' 25}' {7' 25}' {8' 25}' {9' 25}' {22' 25}' {28' 28}}
Magic Number,CSharpTest.Net.Library.Test,TestBTreeDictionary,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestBTreeDictionary.cs,TestRangeEnumerate,The following statement contains a magic number: new Dictionary<int' int> {{6' 25}' {7' 25}' {8' 25}' {9' 25}' {22' 25}' {28' 28}}
Magic Number,CSharpTest.Net.Library.Test,TestBTreeDictionary,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestBTreeDictionary.cs,TestTryRoutines,The following statement contains a magic number: Assert.IsFalse(data.TryUpdate(2' "b"));
Magic Number,CSharpTest.Net.Library.Test,TestBTreeDictionary,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestBTreeDictionary.cs,TestTryRoutines,The following statement contains a magic number: Assert.IsFalse(data.TryRemove(2' out val));
Magic Number,CSharpTest.Net.Library.Test,TestBTreeDictionary,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestBTreeDictionary.cs,TestKeyValueCollections,The following statement contains a magic number: i < sample.Count && i < 5
Magic Number,CSharpTest.Net.Library.Test,TestBTreeDictionary,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestBTreeDictionary.cs,TestKeyValueCollections,The following statement contains a magic number: i < sample.Count && i < 5
Magic Number,CSharpTest.Net.Library.Test,TestBTreeDictionary,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestBTreeDictionary.cs,TestEnumerateFrom,The following statement contains a magic number: i < 100
Magic Number,CSharpTest.Net.Library.Test,TestBTreeDictionary,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestBTreeDictionary.cs,TestEnumerateFrom,The following statement contains a magic number: Assert.AreEqual(50' new List<KeyValuePair<int' string>>(data.EnumerateFrom(50)).Count);
Magic Number,CSharpTest.Net.Library.Test,TestBTreeDictionary,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestBTreeDictionary.cs,TestEnumerateFrom,The following statement contains a magic number: Assert.AreEqual(50' new List<KeyValuePair<int' string>>(data.EnumerateFrom(50)).Count);
Magic Number,CSharpTest.Net.Library.Test,TestBTreeDictionary,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestBTreeDictionary.cs,TestEnumerateFrom,The following statement contains a magic number: Assert.AreEqual(25' new List<KeyValuePair<int' string>>(data.EnumerateFrom(75)).Count);
Magic Number,CSharpTest.Net.Library.Test,TestBTreeDictionary,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestBTreeDictionary.cs,TestEnumerateFrom,The following statement contains a magic number: Assert.AreEqual(25' new List<KeyValuePair<int' string>>(data.EnumerateFrom(75)).Count);
Magic Number,CSharpTest.Net.Library.Test,TestBTreeDictionary,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestBTreeDictionary.cs,TestEnumerateFrom,The following statement contains a magic number: i < 100
Magic Number,CSharpTest.Net.Library.Test,TestBTreeDictionary,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestBTreeDictionary.cs,TestFirstAndLast,The following statement contains a magic number: data.Add(2' "b");
Magic Number,CSharpTest.Net.Library.Test,TestBTreeDictionary,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestBTreeDictionary.cs,TestFirstAndLast,The following statement contains a magic number: data.Add(3' "c");
Magic Number,CSharpTest.Net.Library.Test,TestBTreeDictionary,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestBTreeDictionary.cs,TestFirstAndLast,The following statement contains a magic number: data.Add(4' "d");
Magic Number,CSharpTest.Net.Library.Test,TestBTreeDictionary,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestBTreeDictionary.cs,TestFirstAndLast,The following statement contains a magic number: data.Add(5' "e");
Magic Number,CSharpTest.Net.Library.Test,TestBTreeDictionary,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestBTreeDictionary.cs,TestFirstAndLast,The following statement contains a magic number: Assert.AreEqual(2' data.First().Key);
Magic Number,CSharpTest.Net.Library.Test,TestBTreeDictionary,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestBTreeDictionary.cs,TestFirstAndLast,The following statement contains a magic number: Assert.AreEqual(5' data.Last().Key);
Magic Number,CSharpTest.Net.Library.Test,TestBTreeDictionary,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestBTreeDictionary.cs,TestFirstAndLast,The following statement contains a magic number: data.Remove(5);
Magic Number,CSharpTest.Net.Library.Test,TestBTreeDictionary,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestBTreeDictionary.cs,TestFirstAndLast,The following statement contains a magic number: Assert.AreEqual(4' data.Last().Key);
Magic Number,CSharpTest.Net.Library.Test,TestBTreeDictionary,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestBTreeDictionary.cs,TestFirstAndLast,The following statement contains a magic number: data.Remove(4);
Magic Number,CSharpTest.Net.Library.Test,TestBTreeDictionary,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestBTreeDictionary.cs,TestFirstAndLast,The following statement contains a magic number: data.Remove(3);
Magic Number,CSharpTest.Net.Library.Test,TestBTreeDictionary,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestBTreeDictionary.cs,TestFirstAndLast,The following statement contains a magic number: data.Remove(2);
Magic Number,CSharpTest.Net.Library.Test,TestBTreeDictionary,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestBTreeDictionary.cs,TestForwardInsertTo1000,The following statement contains a magic number: SequencedTest(0' 1' 1000' "Forward");
Magic Number,CSharpTest.Net.Library.Test,TestBTreeDictionary,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestBTreeDictionary.cs,TestForwardInsertTo5000,The following statement contains a magic number: SequencedTest(0' 1' 5000' "Forward");
Magic Number,CSharpTest.Net.Library.Test,TestBTreeDictionary,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestBTreeDictionary.cs,TestReverseInsertTo1000,The following statement contains a magic number: SequencedTest(1000' -1' 0' "Reverse");
Magic Number,CSharpTest.Net.Library.Test,TestBTreeDictionary,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestBTreeDictionary.cs,TestReverseInsertTo5000,The following statement contains a magic number: SequencedTest(5000' -1' 0' "Reverse");
Magic Number,CSharpTest.Net.Library.Test,TestBTreeDictionary,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestBTreeDictionary.cs,SequencedTest,The following statement contains a magic number: BTreeDictionary<int' string> tree = new BTreeDictionary<int' string>(8' Comparer);
Magic Number,CSharpTest.Net.Library.Test,TestBTreeDictionary,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestBTreeDictionary.cs,SequencedTest,The following statement contains a magic number: i = 988;
Magic Number,CSharpTest.Net.Library.Test,TestBTreeDictionary,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestBTreeDictionary.cs,SequencedTest,The following statement contains a magic number: i == 988
Magic Number,CSharpTest.Net.Library.Test,TestBTreeDictionary,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestBTreeDictionary.cs,SequencedTest,The following statement contains a magic number: i = 16;
Magic Number,CSharpTest.Net.Library.Test,TestBTreeDictionary,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestBTreeDictionary.cs,SequencedTest,The following statement contains a magic number: i == 16
Magic Number,CSharpTest.Net.Library.Test,TestFactories,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestFactories.cs,TestSingletonIsLazyFactory,The following statement contains a magic number: Assert.AreEqual(0' Loaded & 2);
Magic Number,CSharpTest.Net.Library.Test,TestFactories,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestFactories.cs,TestSingletonIsLazyFactory,The following statement contains a magic number: Assert.AreEqual(0' Loaded & 2);
Magic Number,CSharpTest.Net.Library.Test,TestFactories,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestFactories.cs,TestSingletonIsLazyFactory,The following statement contains a magic number: Assert.AreEqual(2' Loaded & 2);
Magic Number,CSharpTest.Net.Library.Test,TestFactories,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestFactories.cs,TestSingletonIsLazyFactory,The following statement contains a magic number: Assert.AreEqual(2' Loaded & 2);
Magic Number,CSharpTest.Net.Library.Test,TestLazy2,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestFactories.cs,TestLazy2,The following statement contains a magic number: Loaded |= 2;
Magic Number,CSharpTest.Net.Library.Test,TestOrderedEnumeration,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestOrderedEnumeration.cs,TestKeyValueComparer,The following statement contains a magic number: Assert.AreEqual(-1' cmp.Compare(new KeyValuePair<int' int>(1' 1)' new KeyValuePair<int' int>(2' 1)));
Magic Number,CSharpTest.Net.Library.Test,TestOrderedEnumeration,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestOrderedEnumeration.cs,TestKeyValueComparer,The following statement contains a magic number: Assert.AreEqual(0' cmp.Compare(new KeyValuePair<int' int>(1' 1)' new KeyValuePair<int' int>(1' 2)));
Magic Number,CSharpTest.Net.Library.Test,TestOrderedEnumeration,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestOrderedEnumeration.cs,TestKeyValueComparer,The following statement contains a magic number: Assert.AreEqual(1' cmp.Compare(new KeyValuePair<int' int>(2' 1)' new KeyValuePair<int' int>(1' 1)));
Magic Number,CSharpTest.Net.Library.Test,TestOrderedEnumeration,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestOrderedEnumeration.cs,TestMergeSortBasicOverloads,The following statement contains a magic number: Guid[] test' arrTest = new Guid[255];
Magic Number,CSharpTest.Net.Library.Test,TestOrderedEnumeration,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestOrderedEnumeration.cs,TestMergeSortRangeOverloads,The following statement contains a magic number: MergeSort.Sort(input' 1' 5' Comparer<Char>.Default);
Magic Number,CSharpTest.Net.Library.Test,TestOrderedEnumeration,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestOrderedEnumeration.cs,TestMergeSortRangeOverloads,The following statement contains a magic number: MergeSort.Sort(input' 1' 5' delegate(char x' char y) { return y.CompareTo(x); } );
Magic Number,CSharpTest.Net.Library.Test,TestOrderedEnumeration,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestOrderedEnumeration.cs,TestMergeSortStable,The following statement contains a magic number: Assert.IsTrue(ReferenceEquals(set[2]' copy[2]));
Magic Number,CSharpTest.Net.Library.Test,TestOrderedEnumeration,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestOrderedEnumeration.cs,TestMergeSortStable,The following statement contains a magic number: Assert.IsTrue(ReferenceEquals(set[2]' copy[2]));
Magic Number,CSharpTest.Net.Library.Test,TestOrderedEnumeration,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestOrderedEnumeration.cs,TestOrderedEnum,The following statement contains a magic number: byte[] input = new byte[256];
Magic Number,CSharpTest.Net.Library.Test,TestOrderedEnumeration,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestOrderedEnumeration.cs,TestDedupFirst,The following statement contains a magic number: Assert.IsTrue(ReferenceEquals(set[2]' arr[0]));
Magic Number,CSharpTest.Net.Library.Test,TestOrderedEnumeration,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestOrderedEnumeration.cs,TestDedupFirst,The following statement contains a magic number: Assert.AreEqual(3' arr.Count);
Magic Number,CSharpTest.Net.Library.Test,TestOrderedEnumeration,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestOrderedEnumeration.cs,TestDedupFirst,The following statement contains a magic number: Assert.IsTrue(ReferenceEquals(set[2]' arr[2]));
Magic Number,CSharpTest.Net.Library.Test,TestOrderedEnumeration,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestOrderedEnumeration.cs,TestDedupFirst,The following statement contains a magic number: Assert.IsTrue(ReferenceEquals(set[2]' arr[2]));
Magic Number,CSharpTest.Net.Library.Test,TestOrderedEnumeration,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestOrderedEnumeration.cs,TestUnorderedAssertion,The following statement contains a magic number: new List<int>(OrderedEnumeration<int>.WithDuplicateHandling(                  new [] { 2' 1 }' Comparer<int>.Default' DuplicateHandling.RaisesException));
Magic Number,CSharpTest.Net.Library.Test,TestOrderedEnumeration,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestOrderedEnumeration.cs,TestOrderedEnumProperties,The following statement contains a magic number: Assert.AreEqual(10' ordered.InMemoryLimit = 10);
Magic Number,CSharpTest.Net.Library.Test,TestOrderedEnumeration,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestOrderedEnumeration.cs,TestOrderedEnumProperties,The following statement contains a magic number: Assert.AreEqual(10' ordered.InMemoryLimit = 10);
Magic Number,CSharpTest.Net.Library.Test,TestOrderedEnumeration,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestOrderedEnumeration.cs,TestOrderedEnumDedup,The following statement contains a magic number: byte[] input = new byte[512];
Magic Number,CSharpTest.Net.Library.Test,TestOrderedEnumeration,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestOrderedEnumeration.cs,TestOrderedEnumDedup,The following statement contains a magic number: ordered.InMemoryLimit = 10;
Magic Number,CSharpTest.Net.Library.Test,TestOrderedEnumeration,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestOrderedEnumeration.cs,TestOrderedEnumDedup,The following statement contains a magic number: Assert.IsTrue(count <= 256);
Magic Number,CSharpTest.Net.Library.Test,TestOrderedEnumeration,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestOrderedEnumeration.cs,TestOrderedEnumPaginated,The following statement contains a magic number: byte[] input = new byte[512];
Magic Number,CSharpTest.Net.Library.Test,TestOrderedEnumeration,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestOrderedEnumeration.cs,TestOrderedEnumPaginated,The following statement contains a magic number: ordered.InMemoryLimit = 10;
Magic Number,CSharpTest.Net.Library.Test,TestOrderedEnumeration,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestOrderedEnumeration.cs,TestOrderedEnumPaginated,The following statement contains a magic number: Assert.IsTrue(count <= 256);
Magic Number,CSharpTest.Net.Library.Test,TestOrderedEnumeration,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestOrderedEnumeration.cs,TestOrderedEnumPaginatedCleanup,The following statement contains a magic number: byte[] input = new byte[512];
Magic Number,CSharpTest.Net.Library.Test,TestOrderedEnumeration,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestOrderedEnumeration.cs,TestOrderedEnumPaginatedCleanup,The following statement contains a magic number: ordered.InMemoryLimit = 10;
Magic Number,CSharpTest.Net.Library.Test,TestOrderedEnumeration,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestOrderedEnumeration.cs,TestOrderedKeyValuePairsMerge,The following statement contains a magic number: var y = new[] { new KeyValuePair<int' int>(2' 2) };
Magic Number,CSharpTest.Net.Library.Test,TestOrderedEnumeration,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestOrderedEnumeration.cs,TestOrderedKeyValuePairsMerge,The following statement contains a magic number: var y = new[] { new KeyValuePair<int' int>(2' 2) };
Magic Number,CSharpTest.Net.Library.Test,TestOrderedEnumeration,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestOrderedEnumeration.cs,TestOrderedKeyValuePairsMerge,The following statement contains a magic number: Assert.AreEqual(2' e.Current.Key);
Magic Number,CSharpTest.Net.Library.Test,TestOrderedEnumeration,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestOrderedEnumeration.cs,TestOrderedKeyValuePairsMergeOnDuplicate,The following statement contains a magic number: var y = new[] { new KeyValuePair<int' int>(1' 2)' new KeyValuePair<int' int>(2' 2) };
Magic Number,CSharpTest.Net.Library.Test,TestOrderedEnumeration,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestOrderedEnumeration.cs,TestOrderedKeyValuePairsMergeOnDuplicate,The following statement contains a magic number: var y = new[] { new KeyValuePair<int' int>(1' 2)' new KeyValuePair<int' int>(2' 2) };
Magic Number,CSharpTest.Net.Library.Test,TestOrderedEnumeration,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestOrderedEnumeration.cs,TestOrderedKeyValuePairsMergeOnDuplicate,The following statement contains a magic number: var y = new[] { new KeyValuePair<int' int>(1' 2)' new KeyValuePair<int' int>(2' 2) };
Magic Number,CSharpTest.Net.Library.Test,TestOrderedEnumeration,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestOrderedEnumeration.cs,TestOrderedKeyValuePairsMergeOnDuplicate,The following statement contains a magic number: Assert.AreEqual(2' e.Current.Key);
Magic Number,CSharpTest.Net.Library.Test,TestOrderedEnumeration,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestOrderedEnumeration.cs,TestOrderedKeyValuePairsMergeOnDuplicate,The following statement contains a magic number: Assert.AreEqual(2' e.Current.Value);
Magic Number,CSharpTest.Net.Library.Test,TestOrderedEnumeration,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestOrderedEnumeration.cs,TestOrderedKeyValuePairsMergeOnDuplicate,The following statement contains a magic number: Assert.AreEqual(2' e.Current.Value);
Magic Number,CSharpTest.Net.Library.Test,TestOrderedEnumeration,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestOrderedEnumeration.cs,TestOrderedKeyValuePairsMergeOnDuplicate,The following statement contains a magic number: Assert.AreEqual(2' e.Current.Key);
Magic Number,CSharpTest.Net.Library.Test,TestOrderedEnumeration,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestOrderedEnumeration.cs,TestOrderedKeyValuePairsMergeOnDuplicate,The following statement contains a magic number: Assert.AreEqual(2' e.Current.Value);
Magic Number,CSharpTest.Net.Library.Test,TestOrderedEnumeration,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestOrderedEnumeration.cs,TestOrderedKeyValuePairsOverloads,The following statement contains a magic number: ordered = new OrderedKeyValuePairs<int' int>(new ReverseOrder<int>(Comparer<int>.Default)' e' ser' 42);
Magic Number,CSharpTest.Net.Library.Test,TestOrderedEnumeration,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestOrderedEnumeration.cs,TestOrderedKeyValuePairsOverloads,The following statement contains a magic number: Assert.AreEqual(42' ordered.InMemoryLimit);
Magic Number,CSharpTest.Net.Library.Test,TestOrderedEnumeration,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestOrderedEnumeration.cs,TestOrderedKeyValuePairsOverloads,The following statement contains a magic number: ordered = new OrderedKeyValuePairs<int' int>(new ReverseOrder<int>(Comparer<int>.Default)' e' PrimitiveSerializer.Int32' PrimitiveSerializer.Int32' 42);
Magic Number,CSharpTest.Net.Library.Test,TestOrderedEnumeration,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestOrderedEnumeration.cs,TestOrderedKeyValuePairsOverloads,The following statement contains a magic number: Assert.AreEqual(42' ordered.InMemoryLimit);
Magic Number,CSharpTest.Net.Library.Test,TestCrc32,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestCrc32.cs,TestKnownResume2,The following statement contains a magic number: AssertCrc32("resum" + (char)233' unchecked((int)0x84cf1fab));
Magic Number,CSharpTest.Net.Library.Test,TestCrc32,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestCrc32.cs,TestAddByteRange,The following statement contains a magic number: crc.Add(new byte[] { 0x1' 0x2' 0x3' 0x4' 0x5' 0x6' 0x7' 0x8 }' 1' 5);
Magic Number,CSharpTest.Net.Library.Test,TestFragmentedFile,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestFragmentedFile.cs,TestOptionsWriteThrough,The following statement contains a magic number: io.Write(bytes = MakeBytes(256)' 0' bytes.Length);
Magic Number,CSharpTest.Net.Library.Test,TestFragmentedFile,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestFragmentedFile.cs,TestOptionsNoBuffering,The following statement contains a magic number: io.Write(bytes = MakeBytes(256)' 0' bytes.Length);
Magic Number,CSharpTest.Net.Library.Test,TestFragmentedFile,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestFragmentedFile.cs,TestClear,The following statement contains a magic number: Assert.AreEqual(256' count);
Magic Number,CSharpTest.Net.Library.Test,TestFragmentedFile,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestFragmentedFile.cs,TestCrud,The following statement contains a magic number: io.Write(data[id] = MakeBytes(blockSize * 2)' 0' blockSize * 2);
Magic Number,CSharpTest.Net.Library.Test,TestFragmentedFile,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestFragmentedFile.cs,TestCrud,The following statement contains a magic number: io.Write(data[id] = MakeBytes(blockSize * 2)' 0' blockSize * 2);
Magic Number,CSharpTest.Net.Library.Test,TestFragmentedFile,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestFragmentedFile.cs,TestCrud,The following statement contains a magic number: io.Write(data[id] = MakeBytes(blockSize / 2)' 0' blockSize / 2);
Magic Number,CSharpTest.Net.Library.Test,TestFragmentedFile,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestFragmentedFile.cs,TestCrud,The following statement contains a magic number: io.Write(data[id] = MakeBytes(blockSize / 2)' 0' blockSize / 2);
Magic Number,CSharpTest.Net.Library.Test,TestFragmentedFile,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestFragmentedFile.cs,TestSingleBlockCrud,The following statement contains a magic number: TestCrud(ff' 256' 256);
Magic Number,CSharpTest.Net.Library.Test,TestFragmentedFile,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestFragmentedFile.cs,TestSingleBlockCrud,The following statement contains a magic number: TestCrud(ff' 256' 256);
Magic Number,CSharpTest.Net.Library.Test,TestFragmentedFile,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestFragmentedFile.cs,TestSingleBlockCrud,The following statement contains a magic number: TestCrud(ff' 256' 256);
Magic Number,CSharpTest.Net.Library.Test,TestFragmentedFile,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestFragmentedFile.cs,TestSingleBlockCrud,The following statement contains a magic number: TestCrud(ff' 256' 256);
Magic Number,CSharpTest.Net.Library.Test,TestFragmentedFile,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestFragmentedFile.cs,TestTwoBlocks,The following statement contains a magic number: TestCrud(ff' 100' 768);
Magic Number,CSharpTest.Net.Library.Test,TestFragmentedFile,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestFragmentedFile.cs,TestTwoBlocks,The following statement contains a magic number: TestCrud(ff' 100' 768);
Magic Number,CSharpTest.Net.Library.Test,TestFragmentedFile,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestFragmentedFile.cs,TestMultiBlocks,The following statement contains a magic number: TestCrud(ff' 50' 2000);
Magic Number,CSharpTest.Net.Library.Test,TestFragmentedFile,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestFragmentedFile.cs,TestMultiBlocks,The following statement contains a magic number: TestCrud(ff' 50' 2000);
Magic Number,CSharpTest.Net.Library.Test,TestFragmentedFile,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestFragmentedFile.cs,TestRecoverBlocks,The following statement contains a magic number: FragmentedFile ff = FragmentedFile.CreateNew(file.TempPath' 512' 100' 2' FragmentedFile.OptionsDefault);
Magic Number,CSharpTest.Net.Library.Test,TestFragmentedFile,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestFragmentedFile.cs,TestRecoverBlocks,The following statement contains a magic number: FragmentedFile ff = FragmentedFile.CreateNew(file.TempPath' 512' 100' 2' FragmentedFile.OptionsDefault);
Magic Number,CSharpTest.Net.Library.Test,TestFragmentedFile,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestFragmentedFile.cs,TestRecoverBlocks,The following statement contains a magic number: FragmentedFile ff = FragmentedFile.CreateNew(file.TempPath' 512' 100' 2' FragmentedFile.OptionsDefault);
Magic Number,CSharpTest.Net.Library.Test,TestFragmentedFile,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestFragmentedFile.cs,TestTransactBlock,The following statement contains a magic number: FragmentedFile.CreateNew(shared' 512' 100' 2).Dispose();
Magic Number,CSharpTest.Net.Library.Test,TestFragmentedFile,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestFragmentedFile.cs,TestTransactBlock,The following statement contains a magic number: FragmentedFile.CreateNew(shared' 512' 100' 2).Dispose();
Magic Number,CSharpTest.Net.Library.Test,TestFragmentedFile,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestFragmentedFile.cs,TestTransactBlock,The following statement contains a magic number: FragmentedFile.CreateNew(shared' 512' 100' 2).Dispose();
Magic Number,CSharpTest.Net.Library.Test,TestFragmentedFile,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestFragmentedFile.cs,TestTransactBlock,The following statement contains a magic number: byte[] orig = MakeBytes(255);
Magic Number,CSharpTest.Net.Library.Test,TestFragmentedFile,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestFragmentedFile.cs,TestTransactBlock,The following statement contains a magic number: byte[] change = MakeBytes(800);
Magic Number,CSharpTest.Net.Library.Test,TestFragmentedFile,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestFragmentedFile.cs,TestTransactFail,The following statement contains a magic number: FragmentedFile.CreateNew(shared' 512' 100' 2).Dispose();
Magic Number,CSharpTest.Net.Library.Test,TestFragmentedFile,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestFragmentedFile.cs,TestTransactFail,The following statement contains a magic number: FragmentedFile.CreateNew(shared' 512' 100' 2).Dispose();
Magic Number,CSharpTest.Net.Library.Test,TestFragmentedFile,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestFragmentedFile.cs,TestTransactFail,The following statement contains a magic number: FragmentedFile.CreateNew(shared' 512' 100' 2).Dispose();
Magic Number,CSharpTest.Net.Library.Test,TestFragmentedFile,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestFragmentedFile.cs,TestTransactFail,The following statement contains a magic number: byte[] bytes = MakeBytes(255);
Magic Number,CSharpTest.Net.Library.Test,TestFragmentedFile,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestFragmentedFile.cs,TestTransactWriteAfterCommit,The following statement contains a magic number: FragmentedFile.CreateNew(shared' 512' 100' 2).Dispose();
Magic Number,CSharpTest.Net.Library.Test,TestFragmentedFile,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestFragmentedFile.cs,TestTransactWriteAfterCommit,The following statement contains a magic number: FragmentedFile.CreateNew(shared' 512' 100' 2).Dispose();
Magic Number,CSharpTest.Net.Library.Test,TestFragmentedFile,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestFragmentedFile.cs,TestTransactWriteAfterCommit,The following statement contains a magic number: FragmentedFile.CreateNew(shared' 512' 100' 2).Dispose();
Magic Number,CSharpTest.Net.Library.Test,TestFragmentedFile,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestFragmentedFile.cs,TestTransactWriteAfterCommit,The following statement contains a magic number: byte[] bytes = MakeBytes(255);
Magic Number,CSharpTest.Net.Library.Test,TestFragmentedFile,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestFragmentedFile.cs,TestRollbackCreate,The following statement contains a magic number: FragmentedFile.CreateNew(shared' 512' 100' 2).Dispose();
Magic Number,CSharpTest.Net.Library.Test,TestFragmentedFile,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestFragmentedFile.cs,TestRollbackCreate,The following statement contains a magic number: FragmentedFile.CreateNew(shared' 512' 100' 2).Dispose();
Magic Number,CSharpTest.Net.Library.Test,TestFragmentedFile,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestFragmentedFile.cs,TestRollbackCreate,The following statement contains a magic number: FragmentedFile.CreateNew(shared' 512' 100' 2).Dispose();
Magic Number,CSharpTest.Net.Library.Test,TestFragmentedFile,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestFragmentedFile.cs,TestRollbackCreate,The following statement contains a magic number: byte[] bytes = MakeBytes(255);
Magic Number,CSharpTest.Net.Library.Test,TestGenericCollection<TList;TItem>,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestGenericCollection.cs,VerifyCollection,The following statement contains a magic number: T[] items = new T[10 + collection.Count];
Magic Number,CSharpTest.Net.Library.Test,TestGenericCollection<TList;TItem>,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestGenericCollection.cs,VerifyCollection,The following statement contains a magic number: collection.CopyTo(items' 5);
Magic Number,CSharpTest.Net.Library.Test,TestGenericCollection<TList;TItem>,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestGenericCollection.cs,VerifyCollection,The following statement contains a magic number: Array.Copy(items' 5' items' 0' collection.Count);
Magic Number,CSharpTest.Net.Library.Test,TestGenericCollection<TList;TItem>,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestGenericCollection.cs,VerifyCollection,The following statement contains a magic number: i < 5
Magic Number,CSharpTest.Net.Library.Test,TestObjectKeepAlive,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestObjectKeepAlive.cs,TestKeepAliveMax,The following statement contains a magic number: ObjectKeepAlive keep = new ObjectKeepAlive(25' 50' TimeSpan.FromSeconds(1));
Magic Number,CSharpTest.Net.Library.Test,TestObjectKeepAlive,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestObjectKeepAlive.cs,TestKeepAliveMax,The following statement contains a magic number: ObjectKeepAlive keep = new ObjectKeepAlive(25' 50' TimeSpan.FromSeconds(1));
Magic Number,CSharpTest.Net.Library.Test,TestObjectKeepAlive,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestObjectKeepAlive.cs,TestKeepAliveMax,The following statement contains a magic number: i < 49
Magic Number,CSharpTest.Net.Library.Test,TestObjectKeepAlive,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestObjectKeepAlive.cs,TestKeepAliveMin,The following statement contains a magic number: ObjectKeepAlive keep = new ObjectKeepAlive(1' 10' TimeSpan.FromTicks(1)' true);
Magic Number,CSharpTest.Net.Library.Test,TestObjectKeepAlive,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestObjectKeepAlive.cs,TestKeepAliveMin,The following statement contains a magic number: i < 35
Magic Number,CSharpTest.Net.Library.Test,TestObjectKeepAlive,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestObjectKeepAlive.cs,TestKeepAliveMin,The following statement contains a magic number: i < 100
Magic Number,CSharpTest.Net.Library.Test,TestObjectKeepAlive,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestObjectKeepAlive.cs,TestKeepAliveTime,The following statement contains a magic number: TimeSpan timeout = TimeSpan.FromMilliseconds(100);
Magic Number,CSharpTest.Net.Library.Test,TestObjectKeepAlive,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestObjectKeepAlive.cs,TestKeepAliveTime,The following statement contains a magic number: ObjectKeepAlive keep = new ObjectKeepAlive(1' 10' timeout' false);
Magic Number,CSharpTest.Net.Library.Test,TestObjectKeepAlive,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestObjectKeepAlive.cs,TestKeepAliveTime,The following statement contains a magic number: i < 5
Magic Number,CSharpTest.Net.Library.Test,TestObjectKeepAlive,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestObjectKeepAlive.cs,TestKeepAliveTime,The following statement contains a magic number: System.Threading.Thread.SpinWait(100);
Magic Number,CSharpTest.Net.Library.Test,TestObjectKeepAlive,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestObjectKeepAlive.cs,TestTruncateLarge,The following statement contains a magic number: TimeSpan timeout = TimeSpan.FromMilliseconds(25);
Magic Number,CSharpTest.Net.Library.Test,TestObjectKeepAlive,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestObjectKeepAlive.cs,TestTruncateLarge,The following statement contains a magic number: ObjectKeepAlive keep = new ObjectKeepAlive(100' 10000' timeout);
Magic Number,CSharpTest.Net.Library.Test,TestObjectKeepAlive,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestObjectKeepAlive.cs,TestTruncateLarge,The following statement contains a magic number: ObjectKeepAlive keep = new ObjectKeepAlive(100' 10000' timeout);
Magic Number,CSharpTest.Net.Library.Test,TestObjectKeepAlive,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestObjectKeepAlive.cs,TestTruncateLarge,The following statement contains a magic number: i < 100000
Magic Number,CSharpTest.Net.Library.Test,TestObjectKeepAlive,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestObjectKeepAlive.cs,TestTruncateLarge,The following statement contains a magic number: i < 10000
Magic Number,CSharpTest.Net.Library.Test,TestPrimitiveSerializer,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestPrimitiveSerializer.cs,ReadWrite,The following statement contains a magic number: byte[] bytes = new byte[256 - ms.Position];
Magic Number,CSharpTest.Net.Library.Test,TestPrimitiveSerializer,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestPrimitiveSerializer.cs,TestBytesSerializer,The following statement contains a magic number: byte[] bytes = new byte[256];
Magic Number,CSharpTest.Net.Library.Test,TestPrimitiveSerializer,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestPrimitiveSerializer.cs,TestSerializeByteArray,The following statement contains a magic number: ReadWrite(new byte[] { 0' 123' byte.MaxValue });
Magic Number,CSharpTest.Net.Library.Test,TestPrimitiveSerializer,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestPrimitiveSerializer.cs,TestSerializeChar,The following statement contains a magic number: ch < 256
Magic Number,CSharpTest.Net.Library.Test,TestPrimitiveSerializer,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestPrimitiveSerializer.cs,TestSerializeDouble,The following statement contains a magic number: ReadWrite(1.123);
Magic Number,CSharpTest.Net.Library.Test,TestPrimitiveSerializer,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestPrimitiveSerializer.cs,TestSerializeDouble,The following statement contains a magic number: ReadWrite(0.001);
Magic Number,CSharpTest.Net.Library.Test,TestPrimitiveSerializer,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestPrimitiveSerializer.cs,TestSerializeFloat,The following statement contains a magic number: ReadWrite(1.123);
Magic Number,CSharpTest.Net.Library.Test,TestPrimitiveSerializer,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestPrimitiveSerializer.cs,TestSerializeFloat,The following statement contains a magic number: ReadWrite(0.001);
Magic Number,CSharpTest.Net.Library.Test,TestPrimitiveSerializer,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestPrimitiveSerializer.cs,TestSerializeIntPtr,The following statement contains a magic number: IntPtr.Size == 4
Magic Number,CSharpTest.Net.Library.Test,TestPrimitiveSerializer,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestPrimitiveSerializer.cs,TestSerializeUIntPtr,The following statement contains a magic number: UIntPtr.Size == 4
Magic Number,CSharpTest.Net.Library.Test,TestPrimitiveSerializer,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestPrimitiveSerializer.cs,TestSerializeKeyValuePair,The following statement contains a magic number: byte[] bytes = new byte[256 - ms.Position];
Magic Number,CSharpTest.Net.Library.Test,TestBinaryComparer,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestBinaryComparer.cs,TestEquals,The following statement contains a magic number: Assert.IsTrue(BinaryComparer.Equals(new byte[] { 1' 2' 3 }' new byte[] { 1' 2' 3 }));
Magic Number,CSharpTest.Net.Library.Test,TestBinaryComparer,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestBinaryComparer.cs,TestEquals,The following statement contains a magic number: Assert.IsTrue(BinaryComparer.Equals(new byte[] { 1' 2' 3 }' new byte[] { 1' 2' 3 }));
Magic Number,CSharpTest.Net.Library.Test,TestBinaryComparer,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestBinaryComparer.cs,TestEquals,The following statement contains a magic number: Assert.IsTrue(BinaryComparer.Equals(new byte[] { 1' 2' 3 }' new byte[] { 1' 2' 3 }));
Magic Number,CSharpTest.Net.Library.Test,TestBinaryComparer,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestBinaryComparer.cs,TestEquals,The following statement contains a magic number: Assert.IsTrue(BinaryComparer.Equals(new byte[] { 1' 2' 3 }' new byte[] { 1' 2' 3 }));
Magic Number,CSharpTest.Net.Library.Test,TestBinaryComparer,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestBinaryComparer.cs,TestEquals,The following statement contains a magic number: Assert.IsFalse(BinaryComparer.Equals(null' new byte[] { 1' 2' 3 }));
Magic Number,CSharpTest.Net.Library.Test,TestBinaryComparer,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestBinaryComparer.cs,TestEquals,The following statement contains a magic number: Assert.IsFalse(BinaryComparer.Equals(null' new byte[] { 1' 2' 3 }));
Magic Number,CSharpTest.Net.Library.Test,TestBinaryComparer,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestBinaryComparer.cs,TestEquals,The following statement contains a magic number: Assert.IsFalse(BinaryComparer.Equals(new byte[] { 1' 2' 3 }' null));
Magic Number,CSharpTest.Net.Library.Test,TestBinaryComparer,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestBinaryComparer.cs,TestEquals,The following statement contains a magic number: Assert.IsFalse(BinaryComparer.Equals(new byte[] { 1' 2' 3 }' null));
Magic Number,CSharpTest.Net.Library.Test,TestBinaryComparer,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestBinaryComparer.cs,TestEquals,The following statement contains a magic number: Assert.IsFalse(BinaryComparer.Equals(new byte[] { 1' 2 }' new byte[] { 1' 2' 3 }));
Magic Number,CSharpTest.Net.Library.Test,TestBinaryComparer,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestBinaryComparer.cs,TestEquals,The following statement contains a magic number: Assert.IsFalse(BinaryComparer.Equals(new byte[] { 1' 2 }' new byte[] { 1' 2' 3 }));
Magic Number,CSharpTest.Net.Library.Test,TestBinaryComparer,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestBinaryComparer.cs,TestEquals,The following statement contains a magic number: Assert.IsFalse(BinaryComparer.Equals(new byte[] { 1' 2 }' new byte[] { 1' 2' 3 }));
Magic Number,CSharpTest.Net.Library.Test,TestBinaryComparer,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestBinaryComparer.cs,TestEquals,The following statement contains a magic number: Assert.IsFalse(BinaryComparer.Equals(new byte[] { 1' 2' 3 }' new byte[] { 1' 2 }));
Magic Number,CSharpTest.Net.Library.Test,TestBinaryComparer,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestBinaryComparer.cs,TestEquals,The following statement contains a magic number: Assert.IsFalse(BinaryComparer.Equals(new byte[] { 1' 2' 3 }' new byte[] { 1' 2 }));
Magic Number,CSharpTest.Net.Library.Test,TestBinaryComparer,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestBinaryComparer.cs,TestEquals,The following statement contains a magic number: Assert.IsFalse(BinaryComparer.Equals(new byte[] { 1' 2' 3 }' new byte[] { 1' 2 }));
Magic Number,CSharpTest.Net.Library.Test,TestBinaryComparer,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestBinaryComparer.cs,TestHashCode,The following statement contains a magic number: Assert.AreEqual(BinaryComparer.GetHashCode(new byte[] { 1' 2' 3 })' BinaryComparer.GetHashCode(new byte[] { 1' 2' 3 }));
Magic Number,CSharpTest.Net.Library.Test,TestBinaryComparer,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestBinaryComparer.cs,TestHashCode,The following statement contains a magic number: Assert.AreEqual(BinaryComparer.GetHashCode(new byte[] { 1' 2' 3 })' BinaryComparer.GetHashCode(new byte[] { 1' 2' 3 }));
Magic Number,CSharpTest.Net.Library.Test,TestBinaryComparer,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestBinaryComparer.cs,TestHashCode,The following statement contains a magic number: Assert.AreEqual(BinaryComparer.GetHashCode(new byte[] { 1' 2' 3 })' BinaryComparer.GetHashCode(new byte[] { 1' 2' 3 }));
Magic Number,CSharpTest.Net.Library.Test,TestBinaryComparer,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestBinaryComparer.cs,TestHashCode,The following statement contains a magic number: Assert.AreEqual(BinaryComparer.GetHashCode(new byte[] { 1' 2' 3 })' BinaryComparer.GetHashCode(new byte[] { 1' 2' 3 }));
Magic Number,CSharpTest.Net.Library.Test,TestBinaryComparer,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestBinaryComparer.cs,TestHashCode,The following statement contains a magic number: Assert.AreNotEqual(BinaryComparer.GetHashCode(null)' BinaryComparer.GetHashCode(new byte[] { 1' 2' 3 }));
Magic Number,CSharpTest.Net.Library.Test,TestBinaryComparer,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestBinaryComparer.cs,TestHashCode,The following statement contains a magic number: Assert.AreNotEqual(BinaryComparer.GetHashCode(null)' BinaryComparer.GetHashCode(new byte[] { 1' 2' 3 }));
Magic Number,CSharpTest.Net.Library.Test,TestBinaryComparer,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestBinaryComparer.cs,TestHashCode,The following statement contains a magic number: Assert.AreNotEqual(BinaryComparer.GetHashCode(new byte[] { 1' 2' 3 })' BinaryComparer.GetHashCode(null));
Magic Number,CSharpTest.Net.Library.Test,TestBinaryComparer,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestBinaryComparer.cs,TestHashCode,The following statement contains a magic number: Assert.AreNotEqual(BinaryComparer.GetHashCode(new byte[] { 1' 2' 3 })' BinaryComparer.GetHashCode(null));
Magic Number,CSharpTest.Net.Library.Test,TestBinaryComparer,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestBinaryComparer.cs,TestHashCode,The following statement contains a magic number: Assert.AreNotEqual(BinaryComparer.GetHashCode(new byte[] { 1' 2 })' BinaryComparer.GetHashCode(new byte[] { 1' 2' 3 }));
Magic Number,CSharpTest.Net.Library.Test,TestBinaryComparer,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestBinaryComparer.cs,TestHashCode,The following statement contains a magic number: Assert.AreNotEqual(BinaryComparer.GetHashCode(new byte[] { 1' 2 })' BinaryComparer.GetHashCode(new byte[] { 1' 2' 3 }));
Magic Number,CSharpTest.Net.Library.Test,TestBinaryComparer,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestBinaryComparer.cs,TestHashCode,The following statement contains a magic number: Assert.AreNotEqual(BinaryComparer.GetHashCode(new byte[] { 1' 2 })' BinaryComparer.GetHashCode(new byte[] { 1' 2' 3 }));
Magic Number,CSharpTest.Net.Library.Test,TestBinaryComparer,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestBinaryComparer.cs,TestHashCode,The following statement contains a magic number: Assert.AreNotEqual(BinaryComparer.GetHashCode(new byte[] { 1' 2' 3 })' BinaryComparer.GetHashCode(new byte[] { 1' 2 }));
Magic Number,CSharpTest.Net.Library.Test,TestBinaryComparer,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestBinaryComparer.cs,TestHashCode,The following statement contains a magic number: Assert.AreNotEqual(BinaryComparer.GetHashCode(new byte[] { 1' 2' 3 })' BinaryComparer.GetHashCode(new byte[] { 1' 2 }));
Magic Number,CSharpTest.Net.Library.Test,TestBinaryComparer,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestBinaryComparer.cs,TestHashCode,The following statement contains a magic number: Assert.AreNotEqual(BinaryComparer.GetHashCode(new byte[] { 1' 2' 3 })' BinaryComparer.GetHashCode(new byte[] { 1' 2 }));
Magic Number,CSharpTest.Net.Library.Test,TestBinaryComparer,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestBinaryComparer.cs,TestCompare,The following statement contains a magic number: Assert.AreEqual(0' BinaryComparer.Compare(new byte[] { 1' 2' 3 }' new byte[] { 1' 2' 3 }));
Magic Number,CSharpTest.Net.Library.Test,TestBinaryComparer,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestBinaryComparer.cs,TestCompare,The following statement contains a magic number: Assert.AreEqual(0' BinaryComparer.Compare(new byte[] { 1' 2' 3 }' new byte[] { 1' 2' 3 }));
Magic Number,CSharpTest.Net.Library.Test,TestBinaryComparer,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestBinaryComparer.cs,TestCompare,The following statement contains a magic number: Assert.AreEqual(0' BinaryComparer.Compare(new byte[] { 1' 2' 3 }' new byte[] { 1' 2' 3 }));
Magic Number,CSharpTest.Net.Library.Test,TestBinaryComparer,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestBinaryComparer.cs,TestCompare,The following statement contains a magic number: Assert.AreEqual(0' BinaryComparer.Compare(new byte[] { 1' 2' 3 }' new byte[] { 1' 2' 3 }));
Magic Number,CSharpTest.Net.Library.Test,TestBinaryComparer,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestBinaryComparer.cs,TestCompare,The following statement contains a magic number: Assert.AreEqual(-1' BinaryComparer.Compare(null' new byte[] { 1' 2' 3 }));
Magic Number,CSharpTest.Net.Library.Test,TestBinaryComparer,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestBinaryComparer.cs,TestCompare,The following statement contains a magic number: Assert.AreEqual(-1' BinaryComparer.Compare(null' new byte[] { 1' 2' 3 }));
Magic Number,CSharpTest.Net.Library.Test,TestBinaryComparer,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestBinaryComparer.cs,TestCompare,The following statement contains a magic number: Assert.AreEqual(1' BinaryComparer.Compare(new byte[] { 1' 2' 3 }' null));
Magic Number,CSharpTest.Net.Library.Test,TestBinaryComparer,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestBinaryComparer.cs,TestCompare,The following statement contains a magic number: Assert.AreEqual(1' BinaryComparer.Compare(new byte[] { 1' 2' 3 }' null));
Magic Number,CSharpTest.Net.Library.Test,TestBinaryComparer,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestBinaryComparer.cs,TestCompare,The following statement contains a magic number: Assert.AreEqual(-1' BinaryComparer.Compare(new byte[] { 1' 2 }' new byte[] { 1' 2' 3 }));
Magic Number,CSharpTest.Net.Library.Test,TestBinaryComparer,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestBinaryComparer.cs,TestCompare,The following statement contains a magic number: Assert.AreEqual(-1' BinaryComparer.Compare(new byte[] { 1' 2 }' new byte[] { 1' 2' 3 }));
Magic Number,CSharpTest.Net.Library.Test,TestBinaryComparer,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestBinaryComparer.cs,TestCompare,The following statement contains a magic number: Assert.AreEqual(-1' BinaryComparer.Compare(new byte[] { 1' 2 }' new byte[] { 1' 2' 3 }));
Magic Number,CSharpTest.Net.Library.Test,TestBinaryComparer,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestBinaryComparer.cs,TestCompare,The following statement contains a magic number: Assert.AreEqual(1' BinaryComparer.Compare(new byte[] { 1' 2' 3 }' new byte[] { 1' 2 }));
Magic Number,CSharpTest.Net.Library.Test,TestBinaryComparer,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestBinaryComparer.cs,TestCompare,The following statement contains a magic number: Assert.AreEqual(1' BinaryComparer.Compare(new byte[] { 1' 2' 3 }' new byte[] { 1' 2 }));
Magic Number,CSharpTest.Net.Library.Test,TestBinaryComparer,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestBinaryComparer.cs,TestCompare,The following statement contains a magic number: Assert.AreEqual(1' BinaryComparer.Compare(new byte[] { 1' 2' 3 }' new byte[] { 1' 2 }));
Magic Number,CSharpTest.Net.Library.Test,TestBinaryComparer,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestBinaryComparer.cs,TestHashable,The following statement contains a magic number: i < 1000
Magic Number,CSharpTest.Net.Library.Test,TestBinaryComparer,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestBinaryComparer.cs,TestSortable,The following statement contains a magic number: i < 1000
Magic Number,CSharpTest.Net.Library.Test,TestDisposingList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestDisposingList.cs,TestNonGeneric,The following statement contains a magic number: Assert.AreEqual(2' disposeOrder.Count);
Magic Number,CSharpTest.Net.Library.Test,TestDisposingList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestDisposingList.cs,TestNonGeneric,The following statement contains a magic number: Assert.AreEqual(2' new DisposingList(new IDisposable[] { a' b }).Count);
Magic Number,CSharpTest.Net.Library.Test,TestDisposingList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestDisposingList.cs,TestNonGeneric,The following statement contains a magic number: Assert.AreEqual(0' new DisposingList(5).Count);
Magic Number,CSharpTest.Net.Library.Test,TestDisposingList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestDisposingList.cs,TestGeneric,The following statement contains a magic number: Assert.AreEqual(2' disposeOrder.Count);
Magic Number,CSharpTest.Net.Library.Test,TestDisposingList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestDisposingList.cs,TestGeneric,The following statement contains a magic number: Assert.AreEqual(2' new DisposingList<DisposeInOrder>(new DisposeInOrder[] { a' b }).Count);
Magic Number,CSharpTest.Net.Library.Test,TestDisposingList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestDisposingList.cs,TestGeneric,The following statement contains a magic number: Assert.AreEqual(0' new DisposingList<DisposeInOrder>(5).Count);
Magic Number,CSharpTest.Net.Library.Test,TestEquatable,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestEquatable.cs,TestEqualityOperators,The following statement contains a magic number: Null<int> a = 5;
Magic Number,CSharpTest.Net.Library.Test,TestEquatable,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestEquatable.cs,TestEqualityOperators,The following statement contains a magic number: Null<int> b1 = 6;
Magic Number,CSharpTest.Net.Library.Test,TestEquatable,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestEquatable.cs,TestEqualityOperators,The following statement contains a magic number: Null<int> b2 = 6;
Magic Number,CSharpTest.Net.Library.Test,TestEquatable,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestEquatable.cs,TestLessThanOperators,The following statement contains a magic number: Null<int> a = 5;
Magic Number,CSharpTest.Net.Library.Test,TestEquatable,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestEquatable.cs,TestLessThanOperators,The following statement contains a magic number: Null<int> b1 = 6;
Magic Number,CSharpTest.Net.Library.Test,TestEquatable,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestEquatable.cs,TestLessThanOperators,The following statement contains a magic number: Null<int> b2 = 6;
Magic Number,CSharpTest.Net.Library.Test,TestEquatable,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestEquatable.cs,TestGreaterThanOperators,The following statement contains a magic number: Null<int> a = 5;
Magic Number,CSharpTest.Net.Library.Test,TestEquatable,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestEquatable.cs,TestGreaterThanOperators,The following statement contains a magic number: Null<int> b1 = 6;
Magic Number,CSharpTest.Net.Library.Test,TestEquatable,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestEquatable.cs,TestGreaterThanOperators,The following statement contains a magic number: Null<int> b2 = 6;
Magic Number,CSharpTest.Net.Library.Test,TestEquatable,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestEquatable.cs,TestIEquatable,The following statement contains a magic number: IEquatable<Null<int>> a = new Null<int>(5);
Magic Number,CSharpTest.Net.Library.Test,TestEquatable,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestEquatable.cs,TestIEquatable,The following statement contains a magic number: Null<int> b1 = 6;
Magic Number,CSharpTest.Net.Library.Test,TestEquatable,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestEquatable.cs,TestIEquatable,The following statement contains a magic number: Assert.IsTrue(a.Equals(5));
Magic Number,CSharpTest.Net.Library.Test,TestEquatable,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestEquatable.cs,TestIEqualityComparer,The following statement contains a magic number: Null<int> a = 5;
Magic Number,CSharpTest.Net.Library.Test,TestEquatable,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestEquatable.cs,TestIEqualityComparer,The following statement contains a magic number: Null<int> b1 = 6;
Magic Number,CSharpTest.Net.Library.Test,TestEquatable,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestEquatable.cs,TestIEqualityComparer,The following statement contains a magic number: Null<int> b2 = 6;
Magic Number,CSharpTest.Net.Library.Test,TestEquatable,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestEquatable.cs,TestIComparable,The following statement contains a magic number: IComparable<Null<int>> a = new Null<int>(5);
Magic Number,CSharpTest.Net.Library.Test,TestEquatable,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestEquatable.cs,TestIComparable,The following statement contains a magic number: IComparable a1 = new Null<int>(5);
Magic Number,CSharpTest.Net.Library.Test,TestEquatable,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestEquatable.cs,TestIComparable,The following statement contains a magic number: Null<int> b1 = 6;
Magic Number,CSharpTest.Net.Library.Test,TestEquatable,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestEquatable.cs,TestIComparable,The following statement contains a magic number: Assert.IsTrue(a.CompareTo(5) == 0);
Magic Number,CSharpTest.Net.Library.Test,TestEquatable,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestEquatable.cs,TestIComparable,The following statement contains a magic number: Assert.IsTrue(a1.CompareTo((Null<int>)5) == 0);
Magic Number,CSharpTest.Net.Library.Test,TestEquatable,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestEquatable.cs,TestIComparer,The following statement contains a magic number: Null<int> a = 5;
Magic Number,CSharpTest.Net.Library.Test,TestEquatable,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestEquatable.cs,TestIComparer,The following statement contains a magic number: Null<int> b1 = 6;
Magic Number,CSharpTest.Net.Library.Test,TestEquatable,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestEquatable.cs,TestIComparer,The following statement contains a magic number: Null<int> b2 = 6;
Magic Number,CSharpTest.Net.Library.Test,TestEquatable,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestEquatable.cs,TestEquals,The following statement contains a magic number: object a = new Null<int>(5);
Magic Number,CSharpTest.Net.Library.Test,TestEquatable,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestEquatable.cs,TestEquals,The following statement contains a magic number: object b1 = 6;
Magic Number,CSharpTest.Net.Library.Test,TestEquatable,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestEquatable.cs,TestEquals,The following statement contains a magic number: Assert.IsTrue(a.Equals((Null<int>)5));
Magic Number,CSharpTest.Net.Library.Test,TestOrdinalList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestOrdinalList.cs,TestBasics,The following statement contains a magic number: Assert.AreEqual(513' offset);
Magic Number,CSharpTest.Net.Library.Test,TestOrdinalList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestOrdinalList.cs,TestBasics,The following statement contains a magic number: Assert.AreEqual(513' list.Count);
Magic Number,CSharpTest.Net.Library.Test,TestOrdinalList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestOrdinalList.cs,TestBasics,The following statement contains a magic number: Assert.AreEqual(519' list.Ceiling);
Magic Number,CSharpTest.Net.Library.Test,TestOrdinalList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestOrdinalList.cs,TestBasics,The following statement contains a magic number: list.AddRange(new int[] { 5' 10' 20 });
Magic Number,CSharpTest.Net.Library.Test,TestOrdinalList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestOrdinalList.cs,TestBasics,The following statement contains a magic number: list.AddRange(new int[] { 5' 10' 20 });
Magic Number,CSharpTest.Net.Library.Test,TestOrdinalList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestOrdinalList.cs,TestBasics,The following statement contains a magic number: list.AddRange(new int[] { 5' 10' 20 });
Magic Number,CSharpTest.Net.Library.Test,TestOrdinalList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestOrdinalList.cs,TestBasics,The following statement contains a magic number: Assert.AreEqual(3' list.Count);
Magic Number,CSharpTest.Net.Library.Test,TestOrdinalList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestOrdinalList.cs,TestBasics,The following statement contains a magic number: Assert.AreEqual(23' list.Ceiling);
Magic Number,CSharpTest.Net.Library.Test,TestOrdinalList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestOrdinalList.cs,TestBasics,The following statement contains a magic number: Assert.IsTrue(list.Contains(20));
Magic Number,CSharpTest.Net.Library.Test,TestOrdinalList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestOrdinalList.cs,TestBasics,The following statement contains a magic number: Assert.IsTrue(list.Remove(20));
Magic Number,CSharpTest.Net.Library.Test,TestOrdinalList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestOrdinalList.cs,TestBasics,The following statement contains a magic number: Assert.IsFalse(list.Contains(20));
Magic Number,CSharpTest.Net.Library.Test,TestOrdinalList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestOrdinalList.cs,TestBasics,The following statement contains a magic number: Assert.IsFalse(list.Remove(20));
Magic Number,CSharpTest.Net.Library.Test,TestOrdinalList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestOrdinalList.cs,TestBasics,The following statement contains a magic number: Assert.AreEqual(2' list.Count);
Magic Number,CSharpTest.Net.Library.Test,TestOrdinalList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestOrdinalList.cs,TestBasics,The following statement contains a magic number: int[] items = new int[2];
Magic Number,CSharpTest.Net.Library.Test,TestOrdinalList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestOrdinalList.cs,TestBasics,The following statement contains a magic number: Assert.AreEqual(5' items[0]);
Magic Number,CSharpTest.Net.Library.Test,TestOrdinalList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestOrdinalList.cs,TestBasics,The following statement contains a magic number: Assert.AreEqual(10' items[1]);
Magic Number,CSharpTest.Net.Library.Test,TestOrdinalList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestOrdinalList.cs,TestBasics,The following statement contains a magic number: Assert.AreEqual(5' items[0]);
Magic Number,CSharpTest.Net.Library.Test,TestOrdinalList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestOrdinalList.cs,TestBasics,The following statement contains a magic number: Assert.AreEqual(10' items[1]);
Magic Number,CSharpTest.Net.Library.Test,TestOrdinalList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestOrdinalList.cs,TestBasics,The following statement contains a magic number: Assert.AreEqual(3' bits.Length);
Magic Number,CSharpTest.Net.Library.Test,TestOrdinalList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestOrdinalList.cs,TestBasics,The following statement contains a magic number: Assert.AreEqual(2' new OrdinalList(bits).Count);
Magic Number,CSharpTest.Net.Library.Test,TestOrdinalList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestOrdinalList.cs,TestBasics,The following statement contains a magic number: Assert.AreEqual(2' tmp.Count);
Magic Number,CSharpTest.Net.Library.Test,TestOrdinalList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestOrdinalList.cs,TestBasics,The following statement contains a magic number: Assert.AreEqual(5' tmp[0]);
Magic Number,CSharpTest.Net.Library.Test,TestOrdinalList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestOrdinalList.cs,TestBasics,The following statement contains a magic number: Assert.AreEqual(10' tmp[1]);
Magic Number,CSharpTest.Net.Library.Test,TestOrdinalList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestOrdinalList.cs,TestICollection,The following statement contains a magic number: list.AddRange(new int[] { 5' 10' 20 });
Magic Number,CSharpTest.Net.Library.Test,TestOrdinalList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestOrdinalList.cs,TestICollection,The following statement contains a magic number: list.AddRange(new int[] { 5' 10' 20 });
Magic Number,CSharpTest.Net.Library.Test,TestOrdinalList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestOrdinalList.cs,TestICollection,The following statement contains a magic number: list.AddRange(new int[] { 5' 10' 20 });
Magic Number,CSharpTest.Net.Library.Test,TestOrdinalList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestOrdinalList.cs,TestICollection,The following statement contains a magic number: int[] copy = new int[3];
Magic Number,CSharpTest.Net.Library.Test,TestOrdinalList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestOrdinalList.cs,TestICollection,The following statement contains a magic number: Assert.AreEqual(5' copy[0]);
Magic Number,CSharpTest.Net.Library.Test,TestOrdinalList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestOrdinalList.cs,TestICollection,The following statement contains a magic number: Assert.AreEqual(10' copy[1]);
Magic Number,CSharpTest.Net.Library.Test,TestOrdinalList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestOrdinalList.cs,TestICollection,The following statement contains a magic number: Assert.AreEqual(20' copy[2]);
Magic Number,CSharpTest.Net.Library.Test,TestOrdinalList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestOrdinalList.cs,TestICollection,The following statement contains a magic number: Assert.AreEqual(20' copy[2]);
Magic Number,CSharpTest.Net.Library.Test,TestOrdinalList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestOrdinalList.cs,TestICollection,The following statement contains a magic number: byte[] bits = new byte[3];
Magic Number,CSharpTest.Net.Library.Test,TestOrdinalList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestOrdinalList.cs,TestICollection,The following statement contains a magic number: Assert.AreEqual(32' bits[0]);
Magic Number,CSharpTest.Net.Library.Test,TestOrdinalList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestOrdinalList.cs,TestICollection,The following statement contains a magic number: Assert.AreEqual(4' bits[1]);
Magic Number,CSharpTest.Net.Library.Test,TestOrdinalList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestOrdinalList.cs,TestICollection,The following statement contains a magic number: Assert.AreEqual(16' bits[2]);
Magic Number,CSharpTest.Net.Library.Test,TestOrdinalList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestOrdinalList.cs,TestICollection,The following statement contains a magic number: Assert.AreEqual(16' bits[2]);
Magic Number,CSharpTest.Net.Library.Test,TestOrdinalList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestOrdinalList.cs,TestICollection,The following statement contains a magic number: Assert.AreEqual(3' tmp.Count);
Magic Number,CSharpTest.Net.Library.Test,TestOrdinalList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestOrdinalList.cs,TestICollection,The following statement contains a magic number: Assert.AreEqual(5' tmp[0]);
Magic Number,CSharpTest.Net.Library.Test,TestOrdinalList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestOrdinalList.cs,TestICollection,The following statement contains a magic number: Assert.AreEqual(10' tmp[1]);
Magic Number,CSharpTest.Net.Library.Test,TestOrdinalList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestOrdinalList.cs,TestICollection,The following statement contains a magic number: Assert.AreEqual(20' tmp[2]);
Magic Number,CSharpTest.Net.Library.Test,TestOrdinalList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestOrdinalList.cs,TestICollection,The following statement contains a magic number: Assert.AreEqual(20' tmp[2]);
Magic Number,CSharpTest.Net.Library.Test,TestOrdinalList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestOrdinalList.cs,TestInvert,The following statement contains a magic number: OrdinalList lista = new OrdinalList(new int[] {0' 2' 4' 6' 8' 10' 12});
Magic Number,CSharpTest.Net.Library.Test,TestOrdinalList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestOrdinalList.cs,TestInvert,The following statement contains a magic number: OrdinalList lista = new OrdinalList(new int[] {0' 2' 4' 6' 8' 10' 12});
Magic Number,CSharpTest.Net.Library.Test,TestOrdinalList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestOrdinalList.cs,TestInvert,The following statement contains a magic number: OrdinalList lista = new OrdinalList(new int[] {0' 2' 4' 6' 8' 10' 12});
Magic Number,CSharpTest.Net.Library.Test,TestOrdinalList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestOrdinalList.cs,TestInvert,The following statement contains a magic number: OrdinalList lista = new OrdinalList(new int[] {0' 2' 4' 6' 8' 10' 12});
Magic Number,CSharpTest.Net.Library.Test,TestOrdinalList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestOrdinalList.cs,TestInvert,The following statement contains a magic number: OrdinalList lista = new OrdinalList(new int[] {0' 2' 4' 6' 8' 10' 12});
Magic Number,CSharpTest.Net.Library.Test,TestOrdinalList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestOrdinalList.cs,TestInvert,The following statement contains a magic number: OrdinalList lista = new OrdinalList(new int[] {0' 2' 4' 6' 8' 10' 12});
Magic Number,CSharpTest.Net.Library.Test,TestOrdinalList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestOrdinalList.cs,TestInvert,The following statement contains a magic number: OrdinalList listb = new OrdinalList(new int[] {1' 3' 5' 7' 9' 11' 13});
Magic Number,CSharpTest.Net.Library.Test,TestOrdinalList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestOrdinalList.cs,TestInvert,The following statement contains a magic number: OrdinalList listb = new OrdinalList(new int[] {1' 3' 5' 7' 9' 11' 13});
Magic Number,CSharpTest.Net.Library.Test,TestOrdinalList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestOrdinalList.cs,TestInvert,The following statement contains a magic number: OrdinalList listb = new OrdinalList(new int[] {1' 3' 5' 7' 9' 11' 13});
Magic Number,CSharpTest.Net.Library.Test,TestOrdinalList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestOrdinalList.cs,TestInvert,The following statement contains a magic number: OrdinalList listb = new OrdinalList(new int[] {1' 3' 5' 7' 9' 11' 13});
Magic Number,CSharpTest.Net.Library.Test,TestOrdinalList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestOrdinalList.cs,TestInvert,The following statement contains a magic number: OrdinalList listb = new OrdinalList(new int[] {1' 3' 5' 7' 9' 11' 13});
Magic Number,CSharpTest.Net.Library.Test,TestOrdinalList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestOrdinalList.cs,TestInvert,The following statement contains a magic number: OrdinalList listb = new OrdinalList(new int[] {1' 3' 5' 7' 9' 11' 13});
Magic Number,CSharpTest.Net.Library.Test,TestOrdinalList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestOrdinalList.cs,TestInvert,The following statement contains a magic number: OrdinalList invta = lista.Invert(13);
Magic Number,CSharpTest.Net.Library.Test,TestOrdinalList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestOrdinalList.cs,TestInvert,The following statement contains a magic number: listb = new OrdinalList(new int[] { 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13 });
Magic Number,CSharpTest.Net.Library.Test,TestOrdinalList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestOrdinalList.cs,TestInvert,The following statement contains a magic number: listb = new OrdinalList(new int[] { 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13 });
Magic Number,CSharpTest.Net.Library.Test,TestOrdinalList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestOrdinalList.cs,TestInvert,The following statement contains a magic number: listb = new OrdinalList(new int[] { 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13 });
Magic Number,CSharpTest.Net.Library.Test,TestOrdinalList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestOrdinalList.cs,TestInvert,The following statement contains a magic number: listb = new OrdinalList(new int[] { 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13 });
Magic Number,CSharpTest.Net.Library.Test,TestOrdinalList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestOrdinalList.cs,TestInvert,The following statement contains a magic number: listb = new OrdinalList(new int[] { 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13 });
Magic Number,CSharpTest.Net.Library.Test,TestOrdinalList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestOrdinalList.cs,TestInvert,The following statement contains a magic number: listb = new OrdinalList(new int[] { 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13 });
Magic Number,CSharpTest.Net.Library.Test,TestOrdinalList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestOrdinalList.cs,TestInvert,The following statement contains a magic number: listb = new OrdinalList(new int[] { 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13 });
Magic Number,CSharpTest.Net.Library.Test,TestOrdinalList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestOrdinalList.cs,TestInvert,The following statement contains a magic number: listb = new OrdinalList(new int[] { 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13 });
Magic Number,CSharpTest.Net.Library.Test,TestOrdinalList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestOrdinalList.cs,TestInvert,The following statement contains a magic number: listb = new OrdinalList(new int[] { 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13 });
Magic Number,CSharpTest.Net.Library.Test,TestOrdinalList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestOrdinalList.cs,TestInvert,The following statement contains a magic number: listb = new OrdinalList(new int[] { 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13 });
Magic Number,CSharpTest.Net.Library.Test,TestOrdinalList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestOrdinalList.cs,TestInvert,The following statement contains a magic number: listb = new OrdinalList(new int[] { 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13 });
Magic Number,CSharpTest.Net.Library.Test,TestOrdinalList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestOrdinalList.cs,TestInvert,The following statement contains a magic number: listb = new OrdinalList(new int[] { 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13 });
Magic Number,CSharpTest.Net.Library.Test,TestOrdinalList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestOrdinalList.cs,TestInvert,The following statement contains a magic number: invta = lista.Invert(13);
Magic Number,CSharpTest.Net.Library.Test,TestOrdinalList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestOrdinalList.cs,TestInvert,The following statement contains a magic number: lista = new OrdinalList(new int[] { 0' 1' 2' 4' 5' 6' 7' 8' 9' 10' 11' 13 });
Magic Number,CSharpTest.Net.Library.Test,TestOrdinalList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestOrdinalList.cs,TestInvert,The following statement contains a magic number: lista = new OrdinalList(new int[] { 0' 1' 2' 4' 5' 6' 7' 8' 9' 10' 11' 13 });
Magic Number,CSharpTest.Net.Library.Test,TestOrdinalList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestOrdinalList.cs,TestInvert,The following statement contains a magic number: lista = new OrdinalList(new int[] { 0' 1' 2' 4' 5' 6' 7' 8' 9' 10' 11' 13 });
Magic Number,CSharpTest.Net.Library.Test,TestOrdinalList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestOrdinalList.cs,TestInvert,The following statement contains a magic number: lista = new OrdinalList(new int[] { 0' 1' 2' 4' 5' 6' 7' 8' 9' 10' 11' 13 });
Magic Number,CSharpTest.Net.Library.Test,TestOrdinalList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestOrdinalList.cs,TestInvert,The following statement contains a magic number: lista = new OrdinalList(new int[] { 0' 1' 2' 4' 5' 6' 7' 8' 9' 10' 11' 13 });
Magic Number,CSharpTest.Net.Library.Test,TestOrdinalList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestOrdinalList.cs,TestInvert,The following statement contains a magic number: lista = new OrdinalList(new int[] { 0' 1' 2' 4' 5' 6' 7' 8' 9' 10' 11' 13 });
Magic Number,CSharpTest.Net.Library.Test,TestOrdinalList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestOrdinalList.cs,TestInvert,The following statement contains a magic number: lista = new OrdinalList(new int[] { 0' 1' 2' 4' 5' 6' 7' 8' 9' 10' 11' 13 });
Magic Number,CSharpTest.Net.Library.Test,TestOrdinalList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestOrdinalList.cs,TestInvert,The following statement contains a magic number: lista = new OrdinalList(new int[] { 0' 1' 2' 4' 5' 6' 7' 8' 9' 10' 11' 13 });
Magic Number,CSharpTest.Net.Library.Test,TestOrdinalList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestOrdinalList.cs,TestInvert,The following statement contains a magic number: lista = new OrdinalList(new int[] { 0' 1' 2' 4' 5' 6' 7' 8' 9' 10' 11' 13 });
Magic Number,CSharpTest.Net.Library.Test,TestOrdinalList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestOrdinalList.cs,TestInvert,The following statement contains a magic number: lista = new OrdinalList(new int[] { 0' 1' 2' 4' 5' 6' 7' 8' 9' 10' 11' 13 });
Magic Number,CSharpTest.Net.Library.Test,TestOrdinalList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestOrdinalList.cs,TestInvert,The following statement contains a magic number: listb = new OrdinalList(new int[] { 3 });
Magic Number,CSharpTest.Net.Library.Test,TestOrdinalList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestOrdinalList.cs,TestInvert,The following statement contains a magic number: invta = lista.Invert(4);
Magic Number,CSharpTest.Net.Library.Test,TestOrdinalList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestOrdinalList.cs,TestIntersectUnion,The following statement contains a magic number: OrdinalList lista = new OrdinalList(new int[] { 5' 10' 99 });
Magic Number,CSharpTest.Net.Library.Test,TestOrdinalList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestOrdinalList.cs,TestIntersectUnion,The following statement contains a magic number: OrdinalList lista = new OrdinalList(new int[] { 5' 10' 99 });
Magic Number,CSharpTest.Net.Library.Test,TestOrdinalList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestOrdinalList.cs,TestIntersectUnion,The following statement contains a magic number: OrdinalList lista = new OrdinalList(new int[] { 5' 10' 99 });
Magic Number,CSharpTest.Net.Library.Test,TestOrdinalList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestOrdinalList.cs,TestIntersectUnion,The following statement contains a magic number: OrdinalList listb = new OrdinalList(new int[] { 2' 4' 6' 8' 10 });
Magic Number,CSharpTest.Net.Library.Test,TestOrdinalList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestOrdinalList.cs,TestIntersectUnion,The following statement contains a magic number: OrdinalList listb = new OrdinalList(new int[] { 2' 4' 6' 8' 10 });
Magic Number,CSharpTest.Net.Library.Test,TestOrdinalList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestOrdinalList.cs,TestIntersectUnion,The following statement contains a magic number: OrdinalList listb = new OrdinalList(new int[] { 2' 4' 6' 8' 10 });
Magic Number,CSharpTest.Net.Library.Test,TestOrdinalList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestOrdinalList.cs,TestIntersectUnion,The following statement contains a magic number: OrdinalList listb = new OrdinalList(new int[] { 2' 4' 6' 8' 10 });
Magic Number,CSharpTest.Net.Library.Test,TestOrdinalList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestOrdinalList.cs,TestIntersectUnion,The following statement contains a magic number: OrdinalList listb = new OrdinalList(new int[] { 2' 4' 6' 8' 10 });
Magic Number,CSharpTest.Net.Library.Test,TestOrdinalList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestOrdinalList.cs,TestIntersectUnion,The following statement contains a magic number: Assert.AreEqual(7' union.Count);
Magic Number,CSharpTest.Net.Library.Test,TestOrdinalList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestOrdinalList.cs,TestIntersectUnion,The following statement contains a magic number: Assert.AreEqual(10' i);
Magic Number,CSharpTest.Net.Library.Test,TestOrdinalList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestOrdinalList.cs,TestIntersectUnionSameLength,The following statement contains a magic number: OrdinalList lista = new OrdinalList(new int[] { 1' 4' 5 });
Magic Number,CSharpTest.Net.Library.Test,TestOrdinalList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestOrdinalList.cs,TestIntersectUnionSameLength,The following statement contains a magic number: OrdinalList lista = new OrdinalList(new int[] { 1' 4' 5 });
Magic Number,CSharpTest.Net.Library.Test,TestOrdinalList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestOrdinalList.cs,TestIntersectUnionSameLength,The following statement contains a magic number: OrdinalList listb = new OrdinalList(new int[] { 2' 4' 6 });
Magic Number,CSharpTest.Net.Library.Test,TestOrdinalList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestOrdinalList.cs,TestIntersectUnionSameLength,The following statement contains a magic number: OrdinalList listb = new OrdinalList(new int[] { 2' 4' 6 });
Magic Number,CSharpTest.Net.Library.Test,TestOrdinalList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestOrdinalList.cs,TestIntersectUnionSameLength,The following statement contains a magic number: OrdinalList listb = new OrdinalList(new int[] { 2' 4' 6 });
Magic Number,CSharpTest.Net.Library.Test,TestOrdinalList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestOrdinalList.cs,TestIntersectUnionSameLength,The following statement contains a magic number: Assert.AreEqual(5' union.Count);
Magic Number,CSharpTest.Net.Library.Test,TestOrdinalList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestOrdinalList.cs,TestIntersectUnionSameLength,The following statement contains a magic number: Assert.AreEqual(4' i);
Magic Number,CSharpTest.Net.Library.Test,TestOrdinalListNegative,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestOrdinalList.cs,TestBadCeiling,The following statement contains a magic number: list.Ceiling = -2;
Magic Number,CSharpTest.Net.Library.Test,TestOrdinalListNegative,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestOrdinalList.cs,TestBadArrayType,The following statement contains a magic number: list.CopyTo(new ulong[3]' 0);
Magic Number,CSharpTest.Net.Library.Test,TestSetList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestSetList.cs,BenchmarkTest,The following statement contains a magic number: int repeat = 10;
Magic Number,CSharpTest.Net.Library.Test,TestSetList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestSetList.cs,BenchmarkTest,The following statement contains a magic number: i2 < 10000
Magic Number,CSharpTest.Net.Library.Test,TestSetList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestSetList.cs,TestBasics,The following statement contains a magic number: Assert.AreEqual(513' offset);
Magic Number,CSharpTest.Net.Library.Test,TestSetList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestSetList.cs,TestBasics,The following statement contains a magic number: Assert.AreEqual(513' list.Count);
Magic Number,CSharpTest.Net.Library.Test,TestSetList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestSetList.cs,TestBasics,The following statement contains a magic number: list.AddRange(new int[] { 5' 10' 20 });
Magic Number,CSharpTest.Net.Library.Test,TestSetList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestSetList.cs,TestBasics,The following statement contains a magic number: list.AddRange(new int[] { 5' 10' 20 });
Magic Number,CSharpTest.Net.Library.Test,TestSetList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestSetList.cs,TestBasics,The following statement contains a magic number: list.AddRange(new int[] { 5' 10' 20 });
Magic Number,CSharpTest.Net.Library.Test,TestSetList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestSetList.cs,TestBasics,The following statement contains a magic number: Assert.AreEqual(3' list.Count);
Magic Number,CSharpTest.Net.Library.Test,TestSetList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestSetList.cs,TestBasics,The following statement contains a magic number: Assert.IsTrue(list.Contains(20));
Magic Number,CSharpTest.Net.Library.Test,TestSetList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestSetList.cs,TestBasics,The following statement contains a magic number: Assert.IsTrue(list.Remove(20));
Magic Number,CSharpTest.Net.Library.Test,TestSetList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestSetList.cs,TestBasics,The following statement contains a magic number: Assert.IsFalse(list.Contains(20));
Magic Number,CSharpTest.Net.Library.Test,TestSetList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestSetList.cs,TestBasics,The following statement contains a magic number: Assert.IsFalse(list.Remove(20));
Magic Number,CSharpTest.Net.Library.Test,TestSetList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestSetList.cs,TestBasics,The following statement contains a magic number: Assert.AreEqual(2' list.Count);
Magic Number,CSharpTest.Net.Library.Test,TestSetList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestSetList.cs,TestBasics,The following statement contains a magic number: list.Add(10' out pos);
Magic Number,CSharpTest.Net.Library.Test,TestSetList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestSetList.cs,TestBasics,The following statement contains a magic number: Assert.AreEqual(2' list.Count);
Magic Number,CSharpTest.Net.Library.Test,TestSetList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestSetList.cs,TestBasics,The following statement contains a magic number: int[] items = new int[2];
Magic Number,CSharpTest.Net.Library.Test,TestSetList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestSetList.cs,TestBasics,The following statement contains a magic number: Assert.AreEqual(5' items[0]);
Magic Number,CSharpTest.Net.Library.Test,TestSetList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestSetList.cs,TestBasics,The following statement contains a magic number: Assert.AreEqual(10' items[1]);
Magic Number,CSharpTest.Net.Library.Test,TestSetList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestSetList.cs,TestBasics,The following statement contains a magic number: Assert.AreEqual(5' items[0]);
Magic Number,CSharpTest.Net.Library.Test,TestSetList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestSetList.cs,TestBasics,The following statement contains a magic number: Assert.AreEqual(10' items[1]);
Magic Number,CSharpTest.Net.Library.Test,TestSetList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestSetList.cs,TestBasics,The following statement contains a magic number: Assert.AreEqual(2' tmp.Count);
Magic Number,CSharpTest.Net.Library.Test,TestSetList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestSetList.cs,TestBasics,The following statement contains a magic number: Assert.AreEqual(5' tmp[0]);
Magic Number,CSharpTest.Net.Library.Test,TestSetList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestSetList.cs,TestBasics,The following statement contains a magic number: Assert.AreEqual(10' tmp[1]);
Magic Number,CSharpTest.Net.Library.Test,TestSetList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestSetList.cs,TestReplaceOne,The following statement contains a magic number: MyValue two = new MyValue(2);
Magic Number,CSharpTest.Net.Library.Test,TestSetList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestSetList.cs,TestReplaceOne,The following statement contains a magic number: Assert.AreEqual(2' set.Count);
Magic Number,CSharpTest.Net.Library.Test,TestSetList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestSetList.cs,TestReplaceOne,The following statement contains a magic number: Assert.IsFalse(set.Replace(new MyValue(3)));
Magic Number,CSharpTest.Net.Library.Test,TestSetList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestSetList.cs,TestReplaceOne,The following statement contains a magic number: Assert.AreEqual(3' set.Count);
Magic Number,CSharpTest.Net.Library.Test,TestSetList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestSetList.cs,TestReplaceAll,The following statement contains a magic number: MyValue two = new MyValue(2);
Magic Number,CSharpTest.Net.Library.Test,TestSetList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestSetList.cs,TestReplaceAll,The following statement contains a magic number: Assert.AreEqual(2' set.Count);
Magic Number,CSharpTest.Net.Library.Test,TestSetList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestSetList.cs,TestReplaceAll,The following statement contains a magic number: Assert.IsTrue(set.ReplaceAll(new MyValue[] { new MyValue(1)' new MyValue(3) }));
Magic Number,CSharpTest.Net.Library.Test,TestSetList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestSetList.cs,TestReplaceAll,The following statement contains a magic number: Assert.AreEqual(3' set.Count);
Magic Number,CSharpTest.Net.Library.Test,TestSetList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestSetList.cs,TestICollection,The following statement contains a magic number: list.AddRange(new int[] { 5' 10' 20 });
Magic Number,CSharpTest.Net.Library.Test,TestSetList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestSetList.cs,TestICollection,The following statement contains a magic number: list.AddRange(new int[] { 5' 10' 20 });
Magic Number,CSharpTest.Net.Library.Test,TestSetList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestSetList.cs,TestICollection,The following statement contains a magic number: list.AddRange(new int[] { 5' 10' 20 });
Magic Number,CSharpTest.Net.Library.Test,TestSetList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestSetList.cs,TestICollection,The following statement contains a magic number: int[] copy = new int[3];
Magic Number,CSharpTest.Net.Library.Test,TestSetList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestSetList.cs,TestICollection,The following statement contains a magic number: Assert.AreEqual(5' copy[0]);
Magic Number,CSharpTest.Net.Library.Test,TestSetList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestSetList.cs,TestICollection,The following statement contains a magic number: Assert.AreEqual(10' copy[1]);
Magic Number,CSharpTest.Net.Library.Test,TestSetList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestSetList.cs,TestICollection,The following statement contains a magic number: Assert.AreEqual(20' copy[2]);
Magic Number,CSharpTest.Net.Library.Test,TestSetList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestSetList.cs,TestICollection,The following statement contains a magic number: Assert.AreEqual(20' copy[2]);
Magic Number,CSharpTest.Net.Library.Test,TestSetList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestSetList.cs,TestICollection,The following statement contains a magic number: Assert.AreEqual(3' tmp.Count);
Magic Number,CSharpTest.Net.Library.Test,TestSetList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestSetList.cs,TestICollection,The following statement contains a magic number: Assert.AreEqual(5' tmp[0]);
Magic Number,CSharpTest.Net.Library.Test,TestSetList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestSetList.cs,TestICollection,The following statement contains a magic number: Assert.AreEqual(10' tmp[1]);
Magic Number,CSharpTest.Net.Library.Test,TestSetList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestSetList.cs,TestICollection,The following statement contains a magic number: Assert.AreEqual(20' tmp[2]);
Magic Number,CSharpTest.Net.Library.Test,TestSetList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestSetList.cs,TestICollection,The following statement contains a magic number: Assert.AreEqual(20' tmp[2]);
Magic Number,CSharpTest.Net.Library.Test,TestSetList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestSetList.cs,TestIntersectUnion,The following statement contains a magic number: SetList<int> lista = new SetList<int>(new int[] { 5' 10' 20 });
Magic Number,CSharpTest.Net.Library.Test,TestSetList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestSetList.cs,TestIntersectUnion,The following statement contains a magic number: SetList<int> lista = new SetList<int>(new int[] { 5' 10' 20 });
Magic Number,CSharpTest.Net.Library.Test,TestSetList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestSetList.cs,TestIntersectUnion,The following statement contains a magic number: SetList<int> lista = new SetList<int>(new int[] { 5' 10' 20 });
Magic Number,CSharpTest.Net.Library.Test,TestSetList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestSetList.cs,TestIntersectUnion,The following statement contains a magic number: SetList<int> listb = new SetList<int>(new int[] { 2' 4' 6' 8' 10 });
Magic Number,CSharpTest.Net.Library.Test,TestSetList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestSetList.cs,TestIntersectUnion,The following statement contains a magic number: SetList<int> listb = new SetList<int>(new int[] { 2' 4' 6' 8' 10 });
Magic Number,CSharpTest.Net.Library.Test,TestSetList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestSetList.cs,TestIntersectUnion,The following statement contains a magic number: SetList<int> listb = new SetList<int>(new int[] { 2' 4' 6' 8' 10 });
Magic Number,CSharpTest.Net.Library.Test,TestSetList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestSetList.cs,TestIntersectUnion,The following statement contains a magic number: SetList<int> listb = new SetList<int>(new int[] { 2' 4' 6' 8' 10 });
Magic Number,CSharpTest.Net.Library.Test,TestSetList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestSetList.cs,TestIntersectUnion,The following statement contains a magic number: SetList<int> listb = new SetList<int>(new int[] { 2' 4' 6' 8' 10 });
Magic Number,CSharpTest.Net.Library.Test,TestSetList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestSetList.cs,TestIntersectUnion,The following statement contains a magic number: Assert.AreEqual(7' union.Count);
Magic Number,CSharpTest.Net.Library.Test,TestSetList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestSetList.cs,TestIntersectUnion,The following statement contains a magic number: Assert.AreEqual(0' union.IndexOf(2));
Magic Number,CSharpTest.Net.Library.Test,TestSetList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestSetList.cs,TestIntersectUnion,The following statement contains a magic number: Assert.AreEqual(6' union.IndexOf(20));
Magic Number,CSharpTest.Net.Library.Test,TestSetList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestSetList.cs,TestIntersectUnion,The following statement contains a magic number: Assert.AreEqual(6' union.IndexOf(20));
Magic Number,CSharpTest.Net.Library.Test,TestSetList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestSetList.cs,TestIntersectUnion,The following statement contains a magic number: Assert.AreEqual(10' i);
Magic Number,CSharpTest.Net.Library.Test,TestSetList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestSetList.cs,TestIList,The following statement contains a magic number: Assert.AreEqual(2' list.Count);
Magic Number,CSharpTest.Net.Library.Test,TestSetList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestSetList.cs,TestIList,The following statement contains a magic number: Assert.AreEqual(2' list.Count);
Magic Number,CSharpTest.Net.Library.Test,TestSetList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestSetList.cs,TestIList,The following statement contains a magic number: Assert.IsFalse(list.Contains(5));
Magic Number,CSharpTest.Net.Library.Test,TestSetList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestSetList.cs,TestIList,The following statement contains a magic number: Assert.IsTrue(list.IndexOf(5) < 0);
Magic Number,CSharpTest.Net.Library.Test,TestSetList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestSetList.cs,TestSubsets,The following statement contains a magic number: SetList<int> lista = new SetList<int>(new int[] { 5' 10' 20 });
Magic Number,CSharpTest.Net.Library.Test,TestSetList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestSetList.cs,TestSubsets,The following statement contains a magic number: SetList<int> lista = new SetList<int>(new int[] { 5' 10' 20 });
Magic Number,CSharpTest.Net.Library.Test,TestSetList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestSetList.cs,TestSubsets,The following statement contains a magic number: SetList<int> lista = new SetList<int>(new int[] { 5' 10' 20 });
Magic Number,CSharpTest.Net.Library.Test,TestSetList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestSetList.cs,TestSubsets,The following statement contains a magic number: SetList<int> listb = new SetList<int>(new int[] { 2' 4' 6' 8' 10 });
Magic Number,CSharpTest.Net.Library.Test,TestSetList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestSetList.cs,TestSubsets,The following statement contains a magic number: SetList<int> listb = new SetList<int>(new int[] { 2' 4' 6' 8' 10 });
Magic Number,CSharpTest.Net.Library.Test,TestSetList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestSetList.cs,TestSubsets,The following statement contains a magic number: SetList<int> listb = new SetList<int>(new int[] { 2' 4' 6' 8' 10 });
Magic Number,CSharpTest.Net.Library.Test,TestSetList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestSetList.cs,TestSubsets,The following statement contains a magic number: SetList<int> listb = new SetList<int>(new int[] { 2' 4' 6' 8' 10 });
Magic Number,CSharpTest.Net.Library.Test,TestSetList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestSetList.cs,TestSubsets,The following statement contains a magic number: SetList<int> listb = new SetList<int>(new int[] { 2' 4' 6' 8' 10 });
Magic Number,CSharpTest.Net.Library.Test,TestSetList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestSetList.cs,TestSubsets,The following statement contains a magic number: Assert.IsTrue(subt.Contains(5));
Magic Number,CSharpTest.Net.Library.Test,TestSetList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestSetList.cs,TestSubsets,The following statement contains a magic number: Assert.IsFalse(subt.Contains(10));
Magic Number,CSharpTest.Net.Library.Test,TestSetList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestSetList.cs,TestSubsets,The following statement contains a magic number: Assert.IsTrue(subt.IsEqualTo(new SetList<int>(new int[] { 5' 20 })));
Magic Number,CSharpTest.Net.Library.Test,TestSetList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestSetList.cs,TestSubsets,The following statement contains a magic number: Assert.IsTrue(subt.IsEqualTo(new SetList<int>(new int[] { 5' 20 })));
Magic Number,CSharpTest.Net.Library.Test,TestSetList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestSetList.cs,TestSubsets,The following statement contains a magic number: copy.Add(11);
Magic Number,CSharpTest.Net.Library.Test,TestSetList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestSetList.cs,TestSubsets,The following statement contains a magic number: Assert.IsTrue(xor.IsEqualTo(new SetList<int>(new int[] { 2' 4' 6' 8' 5' 20 })));
Magic Number,CSharpTest.Net.Library.Test,TestSetList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestSetList.cs,TestSubsets,The following statement contains a magic number: Assert.IsTrue(xor.IsEqualTo(new SetList<int>(new int[] { 2' 4' 6' 8' 5' 20 })));
Magic Number,CSharpTest.Net.Library.Test,TestSetList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestSetList.cs,TestSubsets,The following statement contains a magic number: Assert.IsTrue(xor.IsEqualTo(new SetList<int>(new int[] { 2' 4' 6' 8' 5' 20 })));
Magic Number,CSharpTest.Net.Library.Test,TestSetList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestSetList.cs,TestSubsets,The following statement contains a magic number: Assert.IsTrue(xor.IsEqualTo(new SetList<int>(new int[] { 2' 4' 6' 8' 5' 20 })));
Magic Number,CSharpTest.Net.Library.Test,TestSetList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestSetList.cs,TestSubsets,The following statement contains a magic number: Assert.IsTrue(xor.IsEqualTo(new SetList<int>(new int[] { 2' 4' 6' 8' 5' 20 })));
Magic Number,CSharpTest.Net.Library.Test,TestSetList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestSetList.cs,TestSubsets,The following statement contains a magic number: Assert.IsTrue(xor.IsEqualTo(new SetList<int>(new int[] { 2' 4' 6' 8' 5' 20 })));
Magic Number,CSharpTest.Net.Library.Test,TestSetList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestSetList.cs,TestSubsets,The following statement contains a magic number: Assert.IsTrue(comp.IsEqualTo(new SetList<int>(new int[] { 2' 4' 6' 8 })));
Magic Number,CSharpTest.Net.Library.Test,TestSetList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestSetList.cs,TestSubsets,The following statement contains a magic number: Assert.IsTrue(comp.IsEqualTo(new SetList<int>(new int[] { 2' 4' 6' 8 })));
Magic Number,CSharpTest.Net.Library.Test,TestSetList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestSetList.cs,TestSubsets,The following statement contains a magic number: Assert.IsTrue(comp.IsEqualTo(new SetList<int>(new int[] { 2' 4' 6' 8 })));
Magic Number,CSharpTest.Net.Library.Test,TestSetList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestSetList.cs,TestSubsets,The following statement contains a magic number: Assert.IsTrue(comp.IsEqualTo(new SetList<int>(new int[] { 2' 4' 6' 8 })));
Magic Number,CSharpTest.Net.Library.Test,TestSetList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestSetList.cs,TestCTors,The following statement contains a magic number: list = new SetList<string>(2);
Magic Number,CSharpTest.Net.Library.Test,TestSetList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestSetList.cs,TestCTors,The following statement contains a magic number: list = new SetList<string>(2' StringComparer.Ordinal);
Magic Number,CSharpTest.Net.Library.Test,TestSetList,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestSetList.cs,TestCTors,The following statement contains a magic number: list = new SetList<string>(2' StringComparer.OrdinalIgnoreCase);
Magic Number,CSharpTest.Net.Library.Test,TestSetListNegative,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestSetList.cs,TestBadArgumentTypeForAdd,The following statement contains a magic number: list.Add(5);
Magic Number,CSharpTest.Net.Library.Test,TestSetListNegative,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestSetList.cs,TestBadArgumentTypeForRemove,The following statement contains a magic number: list.Remove(5);
Magic Number,CSharpTest.Net.Library.Test,TestStreamCache,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestStreamCache.cs,TestFileStreamCache,The following statement contains a magic number: stream.SetLength(100);
Magic Number,CSharpTest.Net.Library.Test,TestStreamCache,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestStreamCache.cs,TestFileStreamCache,The following statement contains a magic number: Assert.AreEqual(100' tempFile.Length);
Magic Number,CSharpTest.Net.Library.Test,TestStreamCache,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestStreamCache.cs,TestStreamReadWrite,The following statement contains a magic number: stream.Write(new byte[100]' 25' 55);
Magic Number,CSharpTest.Net.Library.Test,TestStreamCache,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestStreamCache.cs,TestStreamReadWrite,The following statement contains a magic number: stream.Write(new byte[100]' 25' 55);
Magic Number,CSharpTest.Net.Library.Test,TestStreamCache,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestStreamCache.cs,TestStreamReadWrite,The following statement contains a magic number: stream.Write(new byte[100]' 25' 55);
Magic Number,CSharpTest.Net.Library.Test,TestStreamCache,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestStreamCache.cs,TestStreamReadWrite,The following statement contains a magic number: Assert.AreEqual(new byte[55]' IOStream.ReadAllBytes(stream));
Magic Number,CSharpTest.Net.Library.Test,TestStreamCache,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestStreamCache.cs,TestCacheRecoverAbandondMutex,The following statement contains a magic number: stream.Position = 100;
Magic Number,CSharpTest.Net.Library.Test,TestStreamCache,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestStreamCache.cs,TestCacheRecoverAbandondMutex,The following statement contains a magic number: Assert.AreEqual(100' another.Position);
Magic Number,CSharpTest.Net.Library.Test,TestStreamCache,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestStreamCache.cs,TestCacheRecoverAbandondStream,The following statement contains a magic number: stream.Write(new byte[100]' 25' 55);
Magic Number,CSharpTest.Net.Library.Test,TestStreamCache,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestStreamCache.cs,TestCacheRecoverAbandondStream,The following statement contains a magic number: stream.Write(new byte[100]' 25' 55);
Magic Number,CSharpTest.Net.Library.Test,TestStreamCache,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestStreamCache.cs,TestCacheRecoverAbandondStream,The following statement contains a magic number: stream.Write(new byte[100]' 25' 55);
Magic Number,CSharpTest.Net.Library.Test,TestStreamCache,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestStreamCache.cs,TestCacheRecoverAbandondStream,The following statement contains a magic number: Thread t = new Thread(                      delegate()                      {                          using (stream = cache.Open(FileAccess.Read))                          {                              Assert.AreEqual(new byte[55]' IOStream.ReadAllBytes(stream));                          }                      }                  );
Magic Number,CSharpTest.Net.Library.Test,TestStreamCache,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestStreamCache.cs,TestCacheRecoverAbandondStream,The following statement contains a magic number: Assert.IsTrue(t.Join(1000));
Magic Number,CSharpTest.Net.Library.Test,TestStreamCache,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestStreamCache.cs,TestCacheLimit,The following statement contains a magic number: Thread t = new Thread(                      delegate()                      {                          using (Stream stream = cache.Open(FileAccess.ReadWrite))                          {                              stream.Write(new byte[50]' 0' 50);                              ready.Set();                              release.WaitOne();                              stream.Write(new byte[50]' 0' 50);                              GC.KeepAlive(stream);                              finished = true;                          }                      }                  );
Magic Number,CSharpTest.Net.Library.Test,TestStreamCache,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestStreamCache.cs,TestCacheLimit,The following statement contains a magic number: Thread t = new Thread(                      delegate()                      {                          using (Stream stream = cache.Open(FileAccess.ReadWrite))                          {                              stream.Write(new byte[50]' 0' 50);                              ready.Set();                              release.WaitOne();                              stream.Write(new byte[50]' 0' 50);                              GC.KeepAlive(stream);                              finished = true;                          }                      }                  );
Magic Number,CSharpTest.Net.Library.Test,TestStreamCache,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestStreamCache.cs,TestCacheLimit,The following statement contains a magic number: Thread t = new Thread(                      delegate()                      {                          using (Stream stream = cache.Open(FileAccess.ReadWrite))                          {                              stream.Write(new byte[50]' 0' 50);                              ready.Set();                              release.WaitOne();                              stream.Write(new byte[50]' 0' 50);                              GC.KeepAlive(stream);                              finished = true;                          }                      }                  );
Magic Number,CSharpTest.Net.Library.Test,TestStreamCache,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestStreamCache.cs,TestCacheLimit,The following statement contains a magic number: Thread t = new Thread(                      delegate()                      {                          using (Stream stream = cache.Open(FileAccess.ReadWrite))                          {                              stream.Write(new byte[50]' 0' 50);                              ready.Set();                              release.WaitOne();                              stream.Write(new byte[50]' 0' 50);                              GC.KeepAlive(stream);                              finished = true;                          }                      }                  );
Magic Number,CSharpTest.Net.Library.Test,TestStreamCache,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestStreamCache.cs,TestCacheLimit,The following statement contains a magic number: Assert.AreEqual(50' shared.Length);
Magic Number,CSharpTest.Net.Library.Test,TestStreamCache,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestStreamCache.cs,TestCacheLimit,The following statement contains a magic number: new Thread(                      delegate()                      {                          Thread.Sleep(10);                          release.Set();                      }                  ).Start();
Magic Number,CSharpTest.Net.Library.Test,TestStreamCache,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestStreamCache.cs,TestCacheLimit,The following statement contains a magic number: Assert.AreEqual(100' stream.Read(new byte[100]' 0' 100));
Magic Number,CSharpTest.Net.Library.Test,TestStreamCache,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestStreamCache.cs,TestCacheLimit,The following statement contains a magic number: Assert.AreEqual(100' stream.Read(new byte[100]' 0' 100));
Magic Number,CSharpTest.Net.Library.Test,TestStreamCache,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestStreamCache.cs,TestCacheLimit,The following statement contains a magic number: Assert.AreEqual(100' stream.Read(new byte[100]' 0' 100));
Magic Number,CSharpTest.Net.Library.Test,TestStreamCache,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestStreamCache.cs,TestCacheLimit,The following statement contains a magic number: Assert.IsTrue(t.Join(1000));
Magic Number,CSharpTest.Net.Library.Test,TestStreamCache,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestStreamCache.cs,TestFileStreamFactoryReturnsFileStream,The following statement contains a magic number: FileStreamFactory factory = new FileStreamFactory(tempFile.TempPath' FileMode.Create' FileAccess.ReadWrite' FileShare.None' 1024' FileOptions.Asynchronous);
Magic Number,CSharpTest.Net.Library.Test,TestStreamCache,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestStreamCache.cs,TestFileStreamFactoryCreateABunch,The following statement contains a magic number: i < 50
Magic Number,CSharpTest.Net.Library.Test,TestTempFiles,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestTempFiles.cs,TestLength,The following statement contains a magic number: f.Length = 255;
Magic Number,CSharpTest.Net.Library.Test,TestTempFiles,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestTempFiles.cs,TestLength,The following statement contains a magic number: Assert.AreEqual(255' f.Length);
Magic Number,CSharpTest.Net.Library.Test,TestTempFiles,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestTempFiles.cs,TestInfo,The following statement contains a magic number: f.Length = 5;
Magic Number,CSharpTest.Net.Library.Test,TestVariantSerializer,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestVariantSerializer.cs,ReadWrite,The following statement contains a magic number: byte[] bytes = new byte[256 - ms.Position];
Magic Number,CSharpTest.Net.Library.Test,TestWorkQueue,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestWorkQueue.cs,TestSingleAction,The following statement contains a magic number: Assert.IsTrue(finished.WaitOne(100' false));
Magic Number,CSharpTest.Net.Library.Test,TestWorkQueue,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestWorkQueue.cs,TestMultipleActionsComplete,The following statement contains a magic number: i < 1000
Magic Number,CSharpTest.Net.Library.Test,TestWorkQueue,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestWorkQueue.cs,TestMultipleActionsComplete,The following statement contains a magic number: Assert.AreEqual(1000' count[0]);
Magic Number,CSharpTest.Net.Library.Test,TestWorkQueue,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestWorkQueue.cs,TestMultipleActionsIncomplete,The following statement contains a magic number: i < 10000
Magic Number,CSharpTest.Net.Library.Test,TestWorkQueue,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestWorkQueue.cs,TestMultipleActionsIncomplete,The following statement contains a magic number: Assert.AreNotEqual(10000' count[0]);
Magic Number,CSharpTest.Net.Library.Test,TestWorkQueue,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestWorkQueue.cs,TestSingleActionT,The following statement contains a magic number: Assert.IsTrue(finished.WaitOne(100' false));
Magic Number,CSharpTest.Net.Library.Test,TestWorkQueue,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestWorkQueue.cs,TestMultipleActionTComplete,The following statement contains a magic number: int[] counters = new int[10];
Magic Number,CSharpTest.Net.Library.Test,TestWorkQueue,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestWorkQueue.cs,TestMultipleActionTComplete,The following statement contains a magic number: worker.Enqueue(delegate(int offset) { Interlocked.Increment(ref counters[offset]); }' i % 10);
Magic Number,CSharpTest.Net.Library.Test,TestWorkQueue,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestWorkQueue.cs,TestMultipleActionTComplete,The following statement contains a magic number: i < 1000
Magic Number,CSharpTest.Net.Library.Test,TestWorkQueue,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestWorkQueue.cs,TestMultipleActionTComplete,The following statement contains a magic number: Assert.AreEqual(100' counter);
Magic Number,CSharpTest.Net.Library.Test,TestWorkQueue,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestWorkQueue.cs,TestThreadAborts,The following statement contains a magic number: i < 1000
Magic Number,CSharpTest.Net.Library.Test,TestWorkQueue,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestWorkQueue.cs,TestThreadAborts,The following statement contains a magic number: worker.Complete(false' 10);
Magic Number,CSharpTest.Net.Library.Test,TestWorkQueue,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestWorkQueue.cs,ProcessOne,The following statement contains a magic number: Thread.Sleep(100);
Magic Number,CSharpTest.Net.Library.Test,TestWorkQueue,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestWorkQueue.cs,TestEnqueueAfterDispose,The following statement contains a magic number: worker.Complete(false' 100);
Magic Number,CSharpTest.Net.IO,Contents,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\IO\SegmentedMemoryStream.cs,Contents,The following statement contains a magic number: _segments = new byte[16][];
Magic Number,CSharpTest.Net.Library.Test.LockingTests,BaseThreadedReaderWriterTest<TFactory>,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\LockingTests\BaseThreadedReaderWriterTest.cs,FullContentionTest,The following statement contains a magic number: worker.Enqueue(                          delegate()                              {                                  Random r = new Random();                                  while (!stop.WaitOne(0' false))                                  {                                      Interlocked.Increment(ref iterations[0]);                                      for (int i = 0; i < 100; i++)                                      {                                          int val;                                          int tmp = r.Next(100);                                          if (i%5 == 0)                                              data[tmp] = tmp;                                          else if (data.TryGetValue(tmp' out val))                                              Assert.AreEqual(tmp' val);                                      }                                  }                              }                          );
Magic Number,CSharpTest.Net.Library.Test.LockingTests,BaseThreadedReaderWriterTest<TFactory>,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\LockingTests\BaseThreadedReaderWriterTest.cs,FullContentionTest,The following statement contains a magic number: worker.Enqueue(                          delegate()                              {                                  Random r = new Random();                                  while (!stop.WaitOne(0' false))                                  {                                      Interlocked.Increment(ref iterations[0]);                                      for (int i = 0; i < 100; i++)                                      {                                          int val;                                          int tmp = r.Next(100);                                          if (i%5 == 0)                                              data[tmp] = tmp;                                          else if (data.TryGetValue(tmp' out val))                                              Assert.AreEqual(tmp' val);                                      }                                  }                              }                          );
Magic Number,CSharpTest.Net.Library.Test.LockingTests,BaseThreadedReaderWriterTest<TFactory>,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\LockingTests\BaseThreadedReaderWriterTest.cs,FullContentionTest,The following statement contains a magic number: worker.Enqueue(                          delegate()                              {                                  Random r = new Random();                                  while (!stop.WaitOne(0' false))                                  {                                      Interlocked.Increment(ref iterations[0]);                                      for (int i = 0; i < 100; i++)                                      {                                          int val;                                          int tmp = r.Next(100);                                          if (i%5 == 0)                                              data[tmp] = tmp;                                          else if (data.TryGetValue(tmp' out val))                                              Assert.AreEqual(tmp' val);                                      }                                  }                              }                          );
Magic Number,CSharpTest.Net.Library.Test.LockingTests,BaseThreadedReaderWriterTest<TFactory>,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\LockingTests\BaseThreadedReaderWriterTest.cs,FullContentionTest,The following statement contains a magic number: job < 10
Magic Number,CSharpTest.Net.Library.Test.LockingTests,BaseThreadedReaderWriterTest<TFactory>,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\LockingTests\BaseThreadedReaderWriterTest.cs,FullContentionTest,The following statement contains a magic number: Thread.Sleep(100);
Magic Number,CSharpTest.Net.Library.Test.LockingTests,BaseThreadedReaderWriterTest<TFactory>,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\LockingTests\BaseThreadedReaderWriterTest.cs,FullContentionTest,The following statement contains a magic number: worker.Complete(true' 100);
Magic Number,CSharpTest.Net.Library.Test.LockingTests,TestSimpleReadWriteLocking,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\LockingTests\TestSimpleReadWriteLocking.cs,ReadToWriteFails,The following statement contains a magic number: Assert.IsFalse(l.TryWrite(10));
Magic Number,CSharpTest.Net.Library.Test.LockingTests,TestReaderWriterLocking,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\LockingTests\TestReaderWriterLocking.cs,ReadToWriteFails,The following statement contains a magic number: Assert.IsFalse(l.TryWrite(10));
Magic Number,CSharpTest.Net.Library.Test.LockingTests,ThreadedReader,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\LockingTests\ThreadedReaderWriter.cs,Lock,The following statement contains a magic number: return _lck.Read(100);
Magic Number,CSharpTest.Net.Library.Test.LockingTests,ThreadedWriter,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\LockingTests\ThreadedReaderWriter.cs,ThreadedWriter,The following statement contains a magic number: !_started.WaitOne(1000' false)
Magic Number,CSharpTest.Net.Library.Test.LockingTests,ThreadedWriter,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\LockingTests\ThreadedReaderWriter.cs,Lock,The following statement contains a magic number: return _lck.Write(100);
Magic Number,CSharpTest.Net.Threading,WorkQueue<T>,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\Threading\WorkQueue.cs,WorkQueue,The following statement contains a magic number: Check.InRange(nThreads' 1' 10000);
Magic Number,CSharpTest.Net.Threading,WorkQueue<T>,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\Threading\WorkQueue.cs,WorkQueue,The following statement contains a magic number: _queue = new Queue<T>(nThreads * 2);
Magic Number,CSharpTest.Net.Threading,WorkQueue<T>,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\Threading\WorkQueue.cs,Dispose,The following statement contains a magic number: Complete(false' 100);
Magic Number,CSharpTest.Net.Threading,WorkQueue<T>,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\Threading\WorkQueue.cs,Complete,The following statement contains a magic number: !t.Join(10000)
Missing Default,CSharpTest.Net.Library.Test,TestTransactedCompoundFile,D:\research\architectureSmells\repos\csharptest_CSharpTest.Net.Collections\src\CSharpTest.Net.CollectionsTest\TestTransactedCompoundFile.cs,RandomTest,The following switch statement is missing a default case: switch(i < 1000 ? 0 : rand.Next(3))                          {                              case 0:                                  {                                      id = test.Create();                                      bytes = RandomBytes(rand.Next(1000));                                      store.Add(id' bytes);                                      test.Write(id' bytes' 0' bytes.Length);                                      break;                                  }                              case 1:                                  {                                      id = RandomPick(store.Keys);                                      bytes = store[id];                                      CompareBytes(bytes' 0' bytes.Length' IOStream.ReadAllBytes(test.Read(id)));                                      break;                                  }                              case 2:                                  {                                      id = RandomPick(store.Keys);                                      Assert.IsTrue(store.Remove(id));                                      test.Delete(id);                                      break;                                  }                          }
