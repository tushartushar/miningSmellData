Implementation smell,Namespace,Class,File,Method,Description
Complex Method,DataTablesParser,Parser<T>,C:\repos\garvincasimir_csharp-datatables-parser\src\DatatablesParser\DatatablesParser.cs,GenerateEntityFilter,Cyclomatic complexity of the method is 11
Long Statement,DataTablesParser,Parser<T>,C:\repos\garvincasimir_csharp-datatables-parser\src\DatatablesParser\DatatablesParser.cs,Parse,The length of the statement  "            var hasFilterText = !string.IsNullOrWhiteSpace(_config[Constants.SEARCH_KEY]) || _propertyMap.Any( p => !string.IsNullOrWhiteSpace(p.Value.Filter)); " is 148.
Complex Conditional,DataTablesParser,Parser<T>,C:\repos\garvincasimir_csharp-datatables-parser\src\DatatablesParser\DatatablesParser.cs,GenerateEntityFilter,The conditional expression  "(!prop.CanWrite || (!_convertable.Any(t => t == prop.PropertyType) && !isString )) && !hasCustomExpr"  is complex.
Magic Number,DataTablesParser,Parser<T>,C:\repos\garvincasimir_csharp-datatables-parser\src\DatatablesParser\DatatablesParser.cs,Parser,The following statement contains a magic number: if(_config.ContainsKey(Constants.DISPLAY_LENGTH))              {                  int.TryParse(_config[Constants.DISPLAY_LENGTH]' out _take);              }              else              {                  _take = 10;              }
Magic Number,DataTablesParser,Parser<T>,C:\repos\garvincasimir_csharp-datatables-parser\src\DatatablesParser\DatatablesParser.cs,ApplySort,The following statement contains a magic number: foreach (var param in _config.Where(k => Regex.IsMatch(k.Key' Constants.ORDER_PATTERN)))              {                  // column number to sort (same as the array)                  int sortcolumn = int.Parse(param.Value);                    // ignore disabled columns                   if (!_propertyMap.ContainsKey(sortcolumn) || !_propertyMap[sortcolumn].Orderable)                  {                      continue;                  }                    var index = Regex.Match(param.Key' Constants.ORDER_PATTERN).Groups[1].Value;                  var orderDirectionKey = Constants.GetKey(Constants.ORDER_DIRECTION_FORMAT' index);                    // get the direction of the sort                  string sortdir = _config[orderDirectionKey];                      var sortProperty = _propertyMap[sortcolumn].Property;                  var expression1 = Expression.Property(paramExpr' sortProperty);                  var propType = sortProperty.PropertyType;                  var delegateType = Expression.GetFuncType(_type' propType);                  var propertyExpr = Expression.Lambda(delegateType' expression1' paramExpr);                                   // apply the sort (default is ascending if not specified)                   string methodName;                   if (string.IsNullOrEmpty(sortdir) || sortdir.Equals(Constants.ASCENDING_SORT' StringComparison.OrdinalIgnoreCase))                   {                       methodName = sorted ? "ThenBy" : "OrderBy";                   }                   else                   {                       methodName = sorted ? "ThenByDescending" : "OrderByDescending";                   }                    _queryable = typeof(Queryable).GetMethods().Single(                      method => method.Name == methodName                                  && method.IsGenericMethodDefinition                                  && method.GetGenericArguments().Length == 2                                  && method.GetParameters().Length == 2)                          .MakeGenericMethod(_type' propType)                          .Invoke(null' new object[] { _queryable' propertyExpr }) as IOrderedQueryable<T>;                         sorted = true;              }
Magic Number,DataTablesParser,Parser<T>,C:\repos\garvincasimir_csharp-datatables-parser\src\DatatablesParser\DatatablesParser.cs,ApplySort,The following statement contains a magic number: foreach (var param in _config.Where(k => Regex.IsMatch(k.Key' Constants.ORDER_PATTERN)))              {                  // column number to sort (same as the array)                  int sortcolumn = int.Parse(param.Value);                    // ignore disabled columns                   if (!_propertyMap.ContainsKey(sortcolumn) || !_propertyMap[sortcolumn].Orderable)                  {                      continue;                  }                    var index = Regex.Match(param.Key' Constants.ORDER_PATTERN).Groups[1].Value;                  var orderDirectionKey = Constants.GetKey(Constants.ORDER_DIRECTION_FORMAT' index);                    // get the direction of the sort                  string sortdir = _config[orderDirectionKey];                      var sortProperty = _propertyMap[sortcolumn].Property;                  var expression1 = Expression.Property(paramExpr' sortProperty);                  var propType = sortProperty.PropertyType;                  var delegateType = Expression.GetFuncType(_type' propType);                  var propertyExpr = Expression.Lambda(delegateType' expression1' paramExpr);                                   // apply the sort (default is ascending if not specified)                   string methodName;                   if (string.IsNullOrEmpty(sortdir) || sortdir.Equals(Constants.ASCENDING_SORT' StringComparison.OrdinalIgnoreCase))                   {                       methodName = sorted ? "ThenBy" : "OrderBy";                   }                   else                   {                       methodName = sorted ? "ThenByDescending" : "OrderByDescending";                   }                    _queryable = typeof(Queryable).GetMethods().Single(                      method => method.Name == methodName                                  && method.IsGenericMethodDefinition                                  && method.GetGenericArguments().Length == 2                                  && method.GetParameters().Length == 2)                          .MakeGenericMethod(_type' propType)                          .Invoke(null' new object[] { _queryable' propertyExpr }) as IOrderedQueryable<T>;                         sorted = true;              }
Magic Number,DataTablesParser,Parser<T>,C:\repos\garvincasimir_csharp-datatables-parser\src\DatatablesParser\DatatablesParser.cs,ApplySort,The following statement contains a magic number: if (!sorted )              {                  var firstProp = Expression.Property(paramExpr' _propertyMap.First().Value.Property);                  var propType = _propertyMap.First().Value.Property.PropertyType;                  var delegateType = Expression.GetFuncType(_type' propType);                  var propertyExpr = Expression.Lambda(delegateType' firstProp' paramExpr);                             _queryable = typeof(Queryable).GetMethods().Single(               method => method.Name == "OrderBy"                           && method.IsGenericMethodDefinition                           && method.GetGenericArguments().Length == 2                           && method.GetParameters().Length == 2)                   .MakeGenericMethod(_type' propType)                   .Invoke(null' new object[] { _queryable' propertyExpr }) as IOrderedQueryable<T>;                }
Magic Number,DataTablesParser,Parser<T>,C:\repos\garvincasimir_csharp-datatables-parser\src\DatatablesParser\DatatablesParser.cs,ApplySort,The following statement contains a magic number: if (!sorted )              {                  var firstProp = Expression.Property(paramExpr' _propertyMap.First().Value.Property);                  var propType = _propertyMap.First().Value.Property.PropertyType;                  var delegateType = Expression.GetFuncType(_type' propType);                  var propertyExpr = Expression.Lambda(delegateType' firstProp' paramExpr);                             _queryable = typeof(Queryable).GetMethods().Single(               method => method.Name == "OrderBy"                           && method.IsGenericMethodDefinition                           && method.GetGenericArguments().Length == 2                           && method.GetParameters().Length == 2)                   .MakeGenericMethod(_type' propType)                   .Invoke(null' new object[] { _queryable' propertyExpr }) as IOrderedQueryable<T>;                }
