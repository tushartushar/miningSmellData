Implementation smell,Namespace,Class,File,Method,Description
Complex Method,DataTablesParser,Parser<T>,D:\research\architectureSmells\repos\garvincasimir_csharp-datatables-parser\src\DatatablesParser\DatatablesParser.cs,GenerateEntityFilter,Cyclomatic complexity of the method is 12
Long Statement,DataTablesParser,Parser<T>,D:\research\architectureSmells\repos\garvincasimir_csharp-datatables-parser\src\DatatablesParser\DatatablesParser.cs,Parse,The length of the statement  "            var hasFilterText = !string.IsNullOrWhiteSpace(_config[Constants.SEARCH_KEY]) || _propertyMap.Any( p => !string.IsNullOrWhiteSpace(p.Value.Filter)); " is 148.
Long Statement,DataTablesParser,Parser<T>,D:\research\architectureSmells\repos\garvincasimir_csharp-datatables-parser\src\DatatablesParser\DatatablesParser.cs,GenerateEntityFilter,The length of the statement  "                        var globalTest = Expression.Call(toLower' typeof(string).GetMethod(globalFilterFn' new[] { typeof(string) })' globalFilterConst); " is 129.
Long Statement,DataTablesParser,Parser<T>,D:\research\architectureSmells\repos\garvincasimir_csharp-datatables-parser\src\DatatablesParser\DatatablesParser.cs,GenerateEntityFilter,The length of the statement  "                        individualConditions.Add(Expression.Call(toLower' typeof(string).GetMethod(propFilterFn' new[] { typeof(string) })' individualFilterConst)); " is 140.
Complex Conditional,DataTablesParser,Parser<T>,D:\research\architectureSmells\repos\garvincasimir_csharp-datatables-parser\src\DatatablesParser\DatatablesParser.cs,GenerateEntityFilter,The conditional expression  "!prop.CanWrite || (!_convertable.Any(t => t == prop.PropertyType)  && !hasCustomExpr && !_isEnumerableQuery )"  is complex.
Magic Number,DataTablesParser,Parser<T>,D:\research\architectureSmells\repos\garvincasimir_csharp-datatables-parser\src\DatatablesParser\DatatablesParser.cs,ApplySort,The following statement contains a magic number: _query = typeof(Queryable).GetMethods().Single(                      method => method.Name == methodName                                  && method.IsGenericMethodDefinition                                  && method.GetGenericArguments().Length == 2                                  && method.GetParameters().Length == 2)                          .MakeGenericMethod(_type' propType)                          .Invoke(null' new object[] { _query' propertyExpr }) as IOrderedQueryable<T>;
Magic Number,DataTablesParser,Parser<T>,D:\research\architectureSmells\repos\garvincasimir_csharp-datatables-parser\src\DatatablesParser\DatatablesParser.cs,ApplySort,The following statement contains a magic number: _query = typeof(Queryable).GetMethods().Single(                      method => method.Name == methodName                                  && method.IsGenericMethodDefinition                                  && method.GetGenericArguments().Length == 2                                  && method.GetParameters().Length == 2)                          .MakeGenericMethod(_type' propType)                          .Invoke(null' new object[] { _query' propertyExpr }) as IOrderedQueryable<T>;
Magic Number,DataTablesParser,Parser<T>,D:\research\architectureSmells\repos\garvincasimir_csharp-datatables-parser\src\DatatablesParser\DatatablesParser.cs,ApplySort,The following statement contains a magic number: _query = typeof(Queryable).GetMethods().Single(               method => method.Name == "OrderBy"                           && method.IsGenericMethodDefinition                           && method.GetGenericArguments().Length == 2                           && method.GetParameters().Length == 2)                   .MakeGenericMethod(_type' propType)                   .Invoke(null' new object[] { _query' propertyExpr }) as IOrderedQueryable<T>;
Magic Number,DataTablesParser,Parser<T>,D:\research\architectureSmells\repos\garvincasimir_csharp-datatables-parser\src\DatatablesParser\DatatablesParser.cs,ApplySort,The following statement contains a magic number: _query = typeof(Queryable).GetMethods().Single(               method => method.Name == "OrderBy"                           && method.IsGenericMethodDefinition                           && method.GetGenericArguments().Length == 2                           && method.GetParameters().Length == 2)                   .MakeGenericMethod(_type' propType)                   .Invoke(null' new object[] { _query' propertyExpr }) as IOrderedQueryable<T>;
