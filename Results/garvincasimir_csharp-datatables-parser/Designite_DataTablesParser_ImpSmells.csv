Implementation smell,Namespace,Class,File,Method,Description
Long Statement,DataTablesParser,DataTablesParser,F:\newReposMay17\garvincasimir_csharp-datatables-parser\DataTablesParser\DatatablesParser.cs,Parse,The length of the statement  "			if (map.Value.Searchable && Convert.ToString (map.Value.Property.GetValue (item' null)).ToLower ().Contains ((sSearch).ToLower ())) { " is 133.
Long Statement,DataTablesParser,DataTablesParser,F:\newReposMay17\garvincasimir_csharp-datatables-parser\DataTablesParser\DatatablesParser.cs,Parse,The length of the statement  "		list.recordsFiltered = string.IsNullOrWhiteSpace (_httpRequest [Constants.SEARCH_KEY]) ? list.recordsTotal : _queriable.Count (ApplyGenericSearch); " is 147.
Long Statement,DataTablesParser,DataTablesParser,F:\newReposMay17\garvincasimir_csharp-datatables-parser\DataTablesParser\DatatablesParser.cs,Parse,The length of the statement  "		list.recordsFiltered = string.IsNullOrWhiteSpace (_httpRequest [Constants.SEARCH_KEY]) ? list.recordsTotal : _queriable.Count (GenericFind); " is 140.
Long Statement,DataTablesParser,DataTablesParser,F:\newReposMay17\garvincasimir_csharp-datatables-parser\DataTablesParser\DatatablesParser.cs,ApplySort,The length of the statement  "		_queriable = typeof(Queryable).GetMethods ().Single (method => method.Name == methodName && method.IsGenericMethodDefinition && method.GetGenericArguments ().Length == 2 && method.GetParameters ().Length == 2).MakeGenericMethod (typeof(T)' propType).Invoke (null' new object[] { " is 278.
Long Statement,DataTablesParser,DataTablesParser,F:\newReposMay17\garvincasimir_csharp-datatables-parser\DataTablesParser\DatatablesParser.cs,ApplySort,The length of the statement  "		_queriable = typeof(Queryable).GetMethods ().Single (method => method.Name == "OrderBy" && method.IsGenericMethodDefinition && method.GetGenericArguments ().Length == 2 && method.GetParameters ().Length == 2).MakeGenericMethod (typeof(T)' propType).Invoke (null' new object[] { " is 277.
Magic Number,DataTablesParser,DataTablesParser,F:\newReposMay17\garvincasimir_csharp-datatables-parser\DataTablesParser\DatatablesParser.cs,ApplySort,The following statement contains a magic number: foreach (string key in _httpRequest.Params.AllKeys.Where (x => Regex.IsMatch (x' Constants.ORDER_PATTERN))) {  	// column number to sort (same as the array)  	int sortcolumn = int.Parse (_httpRequest [key]);  	// ignore invalid for disabled columns   	if (!_propertyMap.ContainsKey (sortcolumn) || !_propertyMap [sortcolumn].Orderable)  		continue;  	var index = Regex.Match (key' Constants.ORDER_PATTERN).Groups [1].Value;  	var orderDirectionKey = Constants.GetKey (Constants.ORDER_DIRECTION_FORMAT' index);  	// get the direction of the sort  	string sortdir = _httpRequest [orderDirectionKey];  	var sortProperty = _propertyMap [sortcolumn].Property;  	var expression1 = Expression.Property (paramExpr' sortProperty);  	var propType = sortProperty.PropertyType;  	var delegateType = Expression.GetFuncType (typeof(T)' propType);  	var propertyExpr = Expression.Lambda (delegateType' expression1' paramExpr);  	// apply the sort (default is ascending if not specified)  	string methodName;  	if (string.IsNullOrEmpty (sortdir) || sortdir.Equals (Constants.ASCENDING_SORT' StringComparison.OrdinalIgnoreCase)) {  		methodName = sorted ? "ThenBy" : "OrderBy";  	} else {  		methodName = sorted ? "ThenByDescending" : "OrderByDescending";  	}  	_queriable = typeof(Queryable).GetMethods ().Single (method => method.Name == methodName && method.IsGenericMethodDefinition && method.GetGenericArguments ().Length == 2 && method.GetParameters ().Length == 2).MakeGenericMethod (typeof(T)' propType).Invoke (null' new object[] {  		_queriable'  		propertyExpr  	}) as IOrderedQueryable<T>;  	sorted = true;  }  
Magic Number,DataTablesParser,DataTablesParser,F:\newReposMay17\garvincasimir_csharp-datatables-parser\DataTablesParser\DatatablesParser.cs,ApplySort,The following statement contains a magic number: foreach (string key in _httpRequest.Params.AllKeys.Where (x => Regex.IsMatch (x' Constants.ORDER_PATTERN))) {  	// column number to sort (same as the array)  	int sortcolumn = int.Parse (_httpRequest [key]);  	// ignore invalid for disabled columns   	if (!_propertyMap.ContainsKey (sortcolumn) || !_propertyMap [sortcolumn].Orderable)  		continue;  	var index = Regex.Match (key' Constants.ORDER_PATTERN).Groups [1].Value;  	var orderDirectionKey = Constants.GetKey (Constants.ORDER_DIRECTION_FORMAT' index);  	// get the direction of the sort  	string sortdir = _httpRequest [orderDirectionKey];  	var sortProperty = _propertyMap [sortcolumn].Property;  	var expression1 = Expression.Property (paramExpr' sortProperty);  	var propType = sortProperty.PropertyType;  	var delegateType = Expression.GetFuncType (typeof(T)' propType);  	var propertyExpr = Expression.Lambda (delegateType' expression1' paramExpr);  	// apply the sort (default is ascending if not specified)  	string methodName;  	if (string.IsNullOrEmpty (sortdir) || sortdir.Equals (Constants.ASCENDING_SORT' StringComparison.OrdinalIgnoreCase)) {  		methodName = sorted ? "ThenBy" : "OrderBy";  	} else {  		methodName = sorted ? "ThenByDescending" : "OrderByDescending";  	}  	_queriable = typeof(Queryable).GetMethods ().Single (method => method.Name == methodName && method.IsGenericMethodDefinition && method.GetGenericArguments ().Length == 2 && method.GetParameters ().Length == 2).MakeGenericMethod (typeof(T)' propType).Invoke (null' new object[] {  		_queriable'  		propertyExpr  	}) as IOrderedQueryable<T>;  	sorted = true;  }  
Magic Number,DataTablesParser,DataTablesParser,F:\newReposMay17\garvincasimir_csharp-datatables-parser\DataTablesParser\DatatablesParser.cs,ApplySort,The following statement contains a magic number: _queriable = typeof(Queryable).GetMethods ().Single (method => method.Name == methodName && method.IsGenericMethodDefinition && method.GetGenericArguments ().Length == 2 && method.GetParameters ().Length == 2).MakeGenericMethod (typeof(T)' propType).Invoke (null' new object[] {  	_queriable'  	propertyExpr  }) as IOrderedQueryable<T>;  
Magic Number,DataTablesParser,DataTablesParser,F:\newReposMay17\garvincasimir_csharp-datatables-parser\DataTablesParser\DatatablesParser.cs,ApplySort,The following statement contains a magic number: _queriable = typeof(Queryable).GetMethods ().Single (method => method.Name == methodName && method.IsGenericMethodDefinition && method.GetGenericArguments ().Length == 2 && method.GetParameters ().Length == 2).MakeGenericMethod (typeof(T)' propType).Invoke (null' new object[] {  	_queriable'  	propertyExpr  }) as IOrderedQueryable<T>;  
Magic Number,DataTablesParser,DataTablesParser,F:\newReposMay17\garvincasimir_csharp-datatables-parser\DataTablesParser\DatatablesParser.cs,ApplySort,The following statement contains a magic number: if (!sorted) {  	var firstProp = Expression.Property (paramExpr' _propertyMap.First ().Value.Property);  	var propType = _propertyMap.First ().Value.Property.PropertyType;  	var delegateType = Expression.GetFuncType (typeof(T)' propType);  	var propertyExpr = Expression.Lambda (delegateType' firstProp' paramExpr);  	_queriable = typeof(Queryable).GetMethods ().Single (method => method.Name == "OrderBy" && method.IsGenericMethodDefinition && method.GetGenericArguments ().Length == 2 && method.GetParameters ().Length == 2).MakeGenericMethod (typeof(T)' propType).Invoke (null' new object[] {  		_queriable'  		propertyExpr  	}) as IOrderedQueryable<T>;  }  
Magic Number,DataTablesParser,DataTablesParser,F:\newReposMay17\garvincasimir_csharp-datatables-parser\DataTablesParser\DatatablesParser.cs,ApplySort,The following statement contains a magic number: if (!sorted) {  	var firstProp = Expression.Property (paramExpr' _propertyMap.First ().Value.Property);  	var propType = _propertyMap.First ().Value.Property.PropertyType;  	var delegateType = Expression.GetFuncType (typeof(T)' propType);  	var propertyExpr = Expression.Lambda (delegateType' firstProp' paramExpr);  	_queriable = typeof(Queryable).GetMethods ().Single (method => method.Name == "OrderBy" && method.IsGenericMethodDefinition && method.GetGenericArguments ().Length == 2 && method.GetParameters ().Length == 2).MakeGenericMethod (typeof(T)' propType).Invoke (null' new object[] {  		_queriable'  		propertyExpr  	}) as IOrderedQueryable<T>;  }  
Magic Number,DataTablesParser,DataTablesParser,F:\newReposMay17\garvincasimir_csharp-datatables-parser\DataTablesParser\DatatablesParser.cs,ApplySort,The following statement contains a magic number: _queriable = typeof(Queryable).GetMethods ().Single (method => method.Name == "OrderBy" && method.IsGenericMethodDefinition && method.GetGenericArguments ().Length == 2 && method.GetParameters ().Length == 2).MakeGenericMethod (typeof(T)' propType).Invoke (null' new object[] {  	_queriable'  	propertyExpr  }) as IOrderedQueryable<T>;  
Magic Number,DataTablesParser,DataTablesParser,F:\newReposMay17\garvincasimir_csharp-datatables-parser\DataTablesParser\DatatablesParser.cs,ApplySort,The following statement contains a magic number: _queriable = typeof(Queryable).GetMethods ().Single (method => method.Name == "OrderBy" && method.IsGenericMethodDefinition && method.GetGenericArguments ().Length == 2 && method.GetParameters ().Length == 2).MakeGenericMethod (typeof(T)' propType).Invoke (null' new object[] {  	_queriable'  	propertyExpr  }) as IOrderedQueryable<T>;  
