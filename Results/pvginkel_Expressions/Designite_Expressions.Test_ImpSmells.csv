Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Expressions.Test.VisualBasicLanguage.ExpressionTests,ExpressionPrinter,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\VisualBasicLanguage\ExpressionTests\ExpressionPrinter.cs,PrintNode,Cyclomatic complexity of the method is 11
Complex Method,Expressions.Test.CsharpLanguage.ExpressionTests,ExpressionPrinter,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\CsharpLanguage\ExpressionTests\ExpressionPrinter.cs,PrintNode,Cyclomatic complexity of the method is 11
Complex Method,Expressions.Test.FleeLanguage.ExpressionTests,ExpressionPrinter,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\FleeLanguage\ExpressionTests\ExpressionPrinter.cs,PrintNode,Cyclomatic complexity of the method is 11
Long Parameter List,Expressions.Test,ExpressionTests,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\ExpressionTests.cs,DoTest,The method has 5 parameters. Parameters: expression' expressionContext' result' resultType' testCulture
Long Statement,Expressions.Test.FleeLanguage.Compilation,ExpectedExceptions,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\FleeLanguage\Compilation\ExpectedExceptions.cs,Resolve,The length of the statement  "                Assert.AreEqual(exceptionType' ex.Type' String.Format("Expected exception type '{0}' got '{1}'"' exceptionType' ex.Type)); " is 122.
Long Statement,Expressions.Test.FleeLanguage,IndividualTests,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\FleeLanguage\IndividualTests.cs,TestImportMethod,The length of the statement  "            //System.Reflection.MethodInfo mi = typeof(int).GetMethod("parse"' System.Reflection.BindingFlags.Static | System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.IgnoreCase' null' System.Reflection.CallingConventions.Any' new Type[] { typeof(string) }' null); " is 275.
Long Statement,Expressions.Test,ExpressionTests,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\ExpressionTests.cs,AssertCompileException,The length of the statement  "                Assert.AreEqual(exceptionType' ex.Type' string.Format("Expected exception type '{0}' but got '{1}'"' exceptionType' ex.Type)); " is 126.
Long Statement,Expressions.Test,ExpressionTests,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\ExpressionTests.cs,GetIndividualTest,The length of the statement  "            using (Stream s = a.GetManifestResourceStream(typeof(FleeLanguage.BulkTests.BulkTests).Namespace + ".TestScripts.IndividualTests.xml")) " is 135.
Virtual Method Call from Constructor,Expressions.Test,ExpressionTests,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\ExpressionTests.cs,ExpressionTests,The constructor "ExpressionTests" calls a virtual method "Initialize".
Empty Catch Block,Expressions.Test,ExpressionTests,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\ExpressionTests.cs,AssertCompileException,The method has an empty catch block.
Empty Catch Block,Expressions.Test,ExpressionTests,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\ExpressionTests.cs,AssertCompileException,The method has an empty catch block.
Magic Number,Expressions.Test.FleeLanguage.BulkTests,BulkTests,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\FleeLanguage\BulkTests\BulkTests.cs,DoTestInvalidExpressions,The following statement contains a magic number: var reason = (ExpressionsExceptionType)Enum.Parse(typeof(ExpressionsExceptionType)' arr[2]' true);
Magic Number,Expressions.Test.FleeLanguage.Compilation,Owner,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\FleeLanguage\Compilation\ExpectedExceptions.cs,Method,The following statement contains a magic number: return 7;
Magic Number,Expressions.Test.FleeLanguage.Compilation,BinaryExpressions,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\FleeLanguage\Compilation\BinaryExpressions.cs,Constants,The following statement contains a magic number: Resolve("1 + 1"' 2);
Magic Number,Expressions.Test.FleeLanguage.Compilation,BinaryExpressions,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\FleeLanguage\Compilation\BinaryExpressions.cs,Constants,The following statement contains a magic number: Resolve("1 + 1.1"' 2.1);
Magic Number,Expressions.Test.FleeLanguage.Compilation,BinaryExpressions,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\FleeLanguage\Compilation\BinaryExpressions.cs,ConstantAndVariable,The following statement contains a magic number: context.Variables.Add(new Variable("Variable2") { Value = 1.1 });
Magic Number,Expressions.Test.FleeLanguage.Compilation,BinaryExpressions,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\FleeLanguage\Compilation\BinaryExpressions.cs,ConstantAndVariable,The following statement contains a magic number: Resolve(context' "Variable1 + 1"' 2);
Magic Number,Expressions.Test.FleeLanguage.Compilation,BinaryExpressions,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\FleeLanguage\Compilation\BinaryExpressions.cs,ConstantAndVariable,The following statement contains a magic number: Resolve(context' "Variable2 + 1"' 2.1);
Magic Number,Expressions.Test.FleeLanguage.Compilation,BinaryExpressions,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\FleeLanguage\Compilation\BinaryExpressions.cs,Calculation,The following statement contains a magic number: Resolve("2147483648U / 2u"' 1073741824u);
Magic Number,Expressions.Test.FleeLanguage.Compilation,BinaryExpressions,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\FleeLanguage\Compilation\BinaryExpressions.cs,Remainder,The following statement contains a magic number: Resolve("2147483648U % 5U"' 3);
Magic Number,Expressions.Test.FleeLanguage.Compilation,BinaryExpressions,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\FleeLanguage\Compilation\BinaryExpressions.cs,UnsignedShiftRight,The following statement contains a magic number: Resolve(                  "100U >> 2"'                  25u              );
Magic Number,Expressions.Test.FleeLanguage.Compilation,BinaryExpressions,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\FleeLanguage\Compilation\BinaryExpressions.cs,LongShiftLeft,The following statement contains a magic number: Resolve(                  "100L << 2"'                  400              );
Magic Number,Expressions.Test.FleeLanguage.Compilation,Casting,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\FleeLanguage\Compilation\Casting.cs,CastWithBuiltInFloat,The following statement contains a magic number: Resolve("cast(7' single)"' 7.0f);
Magic Number,Expressions.Test.FleeLanguage.Compilation,Casting,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\FleeLanguage\Compilation\Casting.cs,CastWithExpression,The following statement contains a magic number: Resolve("cast(1 + 2' single)"' 3f);
Magic Number,Expressions.Test.FleeLanguage.Compilation,Casting,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\FleeLanguage\Compilation\Casting.cs,OperatorAdd,The following statement contains a magic number: Resolve(                  context'                  "Owner + 7"'                  7              );
Magic Number,Expressions.Test.FleeLanguage.Compilation,Casting,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\FleeLanguage\Compilation\Casting.cs,LongNumber,The following statement contains a magic number: Resolve(                  "0x8000000000000000"'                  9223372036854775808'                  new BoundExpressionOptions                  {                      ResultType = typeof(ulong)                  }              );
Magic Number,Expressions.Test.FleeLanguage.Compilation,Casting,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\FleeLanguage\Compilation\Casting.cs,LongSignedNumber,The following statement contains a magic number: Resolve(                  "-0x7fffffffffffffff"'                  -9223372036854775807'                  new BoundExpressionOptions                  {                      ResultType = typeof(long)                  }              );
Magic Number,Expressions.Test.FleeLanguage.Compilation,Casting,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\FleeLanguage\Compilation\Casting.cs,MinusDecimal,The following statement contains a magic number: context.Variables.Add(new Variable("Decimal") { Value = 100m });
Magic Number,Expressions.Test.FleeLanguage.Compilation,Casting,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\FleeLanguage\Compilation\Casting.cs,MinusDecimal,The following statement contains a magic number: Resolve(                  context'                  "-Decimal"'                  -100m              );
Magic Number,Expressions.Test.FleeLanguage.Compilation,Casting,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\FleeLanguage\Compilation\Casting.cs,ValidByteCast,The following statement contains a magic number: context.Variables.Add("bytea"' (byte)50);
Magic Number,Expressions.Test.FleeLanguage.Compilation,Casting,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\FleeLanguage\Compilation\Casting.cs,ValidByteCast,The following statement contains a magic number: Resolve(context' "cast(bytea'byte)"' 50' new BoundExpressionOptions              {                  ResultType = typeof(byte)              });
Magic Number,Expressions.Test.FleeLanguage.Compilation,Fields,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\FleeLanguage\Compilation\Fields.cs,StaticFieldOnOwner,The following statement contains a magic number: Resolve(context' "StaticField"' 8);
Magic Number,Expressions.Test.FleeLanguage.Compilation,Fields,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\FleeLanguage\Compilation\Fields.cs,FieldOnOwner,The following statement contains a magic number: Resolve(context' "Field"' 7);
Magic Number,Expressions.Test.FleeLanguage.Compilation,Imports,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\FleeLanguage\Compilation\Imports.cs,NestedImportOnNamespace,The following statement contains a magic number: Resolve(                  new ExpressionContext(                      new[]                      {                          new Import(                              "ns"'                              new Import(typeof(Math))'                              new Import(typeof(int))                          )                      }                  )'                  "ns.Abs(ns.MinValue + 10)"'                  int.MaxValue - 9              );
Magic Number,Expressions.Test.FleeLanguage.Compilation,Imports,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\FleeLanguage\Compilation\Imports.cs,NestedImportOnNestedNamespace,The following statement contains a magic number: Resolve(                  new ExpressionContext(                      new[]                      {                          new Import(                              "ns1"'                              new Import(typeof(Math))'                              new Import(                                  "ns2"'                                  new Import(typeof(int))                              )                          )                      }                  )'                  "ns1.Abs(ns1.ns2.MinValue + 10)"'                  int.MaxValue - 9              );
Magic Number,Expressions.Test.FleeLanguage.Compilation,Indexing,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\FleeLanguage\Compilation\Indexing.cs,RankedArrayIndexOnOwner,The following statement contains a magic number: Resolve(context' "RankedProperty[1'1]"' 4);
Magic Number,Expressions.Test.FleeLanguage.Compilation,MethodCalls,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\FleeLanguage\Compilation\MethodCalls.cs,StaticsOnImport,The following statement contains a magic number: Resolve(context' "Max(1' 2)"' 2);
Magic Number,Expressions.Test.FleeLanguage.Compilation,MethodCalls,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\FleeLanguage\Compilation\MethodCalls.cs,StaticsOnImport,The following statement contains a magic number: Resolve(context' "Max(1.1' 2)"' 2.0);
Magic Number,Expressions.Test.FleeLanguage.Compilation,MethodCalls,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\FleeLanguage\Compilation\MethodCalls.cs,MethodOnOwner,The following statement contains a magic number: Resolve(context' "Method()"' 7);
Magic Number,Expressions.Test.FleeLanguage.Compilation,MethodCalls,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\FleeLanguage\Compilation\MethodCalls.cs,PropertyOnOwner,The following statement contains a magic number: Resolve(context' "IntProperty"' 7);
Magic Number,Expressions.Test.FleeLanguage.Compilation,MethodCalls,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\FleeLanguage\Compilation\MethodCalls.cs,NestedPropertyOnOwner,The following statement contains a magic number: Resolve(context' "Item.IntProperty"' 7);
Magic Number,Expressions.Test.FleeLanguage.Compilation,MethodCalls,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\FleeLanguage\Compilation\MethodCalls.cs,ParamsWithSingleArg,The following statement contains a magic number: Resolve(context' "Owner.Params(0' \"a\")"' 2);
Magic Number,Expressions.Test.FleeLanguage.Compilation,MethodCalls,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\FleeLanguage\Compilation\MethodCalls.cs,ParamsWithMultipleArg,The following statement contains a magic number: Resolve(context' "Owner.Params(0' \"a\"' \"a\")"' 4);
Magic Number,Expressions.Test.FleeLanguage.Compilation,MethodCalls,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\FleeLanguage\Compilation\MethodCalls.cs,ParamsWithMultipleNullArg,The following statement contains a magic number: Resolve(context' "Owner.Params(0' null' null)"' 2);
Magic Number,Expressions.Test.FleeLanguage.Compilation,MethodCalls,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\FleeLanguage\Compilation\MethodCalls.cs,ParamsWithNullAndActualArg,The following statement contains a magic number: Resolve(context' "Owner.Params(0' null' \"a\"' null)"' 4);
Magic Number,Expressions.Test.FleeLanguage.Compilation,MethodCalls,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\FleeLanguage\Compilation\MethodCalls.cs,ParamsWithMatchingArg,The following statement contains a magic number: Resolve(context' "Owner.Params(0' Variable)"' 2);
Magic Number,Expressions.Test.FleeLanguage.Compilation,MethodCalls,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\FleeLanguage\Compilation\MethodCalls.cs,ObjectParamsWithSingleArg,The following statement contains a magic number: Resolve(context' "Owner.ObjectParams(0' \"a\")"' 2);
Magic Number,Expressions.Test.FleeLanguage.Compilation,MethodCalls,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\FleeLanguage\Compilation\MethodCalls.cs,ObjectParamsWithMultipleArg,The following statement contains a magic number: Resolve(context' "Owner.ObjectParams(0' \"a\"' \"a\")"' 4);
Magic Number,Expressions.Test.FleeLanguage.Compilation,MethodCalls,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\FleeLanguage\Compilation\MethodCalls.cs,ObjectParamsWithMultipleNullArg,The following statement contains a magic number: Resolve(context' "Owner.ObjectParams(0' null' null)"' 2);
Magic Number,Expressions.Test.FleeLanguage.Compilation,MethodCalls,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\FleeLanguage\Compilation\MethodCalls.cs,ObjectParamsWithNullAndActualArg,The following statement contains a magic number: Resolve(context' "Owner.ObjectParams(0' null' \"a\"' null)"' 4);
Magic Number,Expressions.Test.FleeLanguage.Compilation,MethodCalls,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\FleeLanguage\Compilation\MethodCalls.cs,ObjectParamsWithMatchingArg,The following statement contains a magic number: Resolve(context' "Owner.ObjectParams(0' Variable)"' 2);
Magic Number,Expressions.Test.FleeLanguage.Compilation,MethodCalls,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\FleeLanguage\Compilation\MethodCalls.cs,MethodOnMember,The following statement contains a magic number: CompileExpression(                  new ExpressionContext(null' new Owner { Variable = 7 })'                  "Variable.ToString()"              );
Magic Number,Expressions.Test.FleeLanguage.Compilation,ResultCasting,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\FleeLanguage\Compilation\ResultCasting.cs,CastCharToDecimal,The following statement contains a magic number: Resolve(                  "'a'"'                  97m'                  new BoundExpressionOptions { ResultType = typeof(decimal) }              );
Magic Number,Expressions.Test.FleeLanguage,IndividualTests,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\FleeLanguage\IndividualTests.cs,ThreadRunParse,The following statement contains a magic number: i <= 40 - 1
Magic Number,Expressions.Test.FleeLanguage,IndividualTests,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\FleeLanguage\IndividualTests.cs,ThreadRunEvaluate,The following statement contains a magic number: Assert.AreEqual(1 + 1 * 200' result);
Magic Number,Expressions.Test.FleeLanguage,IndividualTests,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\FleeLanguage\IndividualTests.cs,ThreadRunEvaluate,The following statement contains a magic number: i <= 40 - 1
Magic Number,Expressions.Test.FleeLanguage,IndividualTests,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\FleeLanguage\IndividualTests.cs,TestGenericEvaluate,The following statement contains a magic number: Assert.AreEqual(1000' e1.Invoke(context));
Magic Number,Expressions.Test.FleeLanguage,IndividualTests,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\FleeLanguage\IndividualTests.cs,TestGenericEvaluate,The following statement contains a magic number: Assert.AreEqual(1000.25' e2.Invoke(context));
Magic Number,Expressions.Test.FleeLanguage,IndividualTests,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\FleeLanguage\IndividualTests.cs,TestGenericEvaluate,The following statement contains a magic number: Assert.AreEqual(1000.0' e3.Invoke(context));
Magic Number,Expressions.Test.FleeLanguage,IndividualTests,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\FleeLanguage\IndividualTests.cs,TestGenericEvaluate,The following statement contains a magic number: Assert.AreEqual(1000' vt);
Magic Number,Expressions.Test.FleeLanguage,IndividualTests,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\FleeLanguage\IndividualTests.cs,TestGenericEvaluate,The following statement contains a magic number: Assert.AreEqual(1000 + 2.5' o);
Magic Number,Expressions.Test.FleeLanguage,IndividualTests,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\FleeLanguage\IndividualTests.cs,TestGenericEvaluate,The following statement contains a magic number: Assert.AreEqual(1000 + 2.5' o);
Magic Number,Expressions.Test.FleeLanguage,IndividualTests,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\FleeLanguage\IndividualTests.cs,TestImportsNamespaces,The following statement contains a magic number: Assert.AreEqual(Math.Cos(100)' (double)e.Invoke(context));
Magic Number,Expressions.Test.FleeLanguage,IndividualTests,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\FleeLanguage\IndividualTests.cs,TestValueTypeVariables,The following statement contains a magic number: variables.Add("a"' 100);
Magic Number,Expressions.Test.FleeLanguage,IndividualTests,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\FleeLanguage\IndividualTests.cs,TestValueTypeVariables,The following statement contains a magic number: variables.Add("b"' -100);
Magic Number,Expressions.Test.FleeLanguage,IndividualTests,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\FleeLanguage\IndividualTests.cs,TestValueTypeVariables,The following statement contains a magic number: Assert.AreEqual(100 + -100' result);
Magic Number,Expressions.Test.FleeLanguage,IndividualTests,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\FleeLanguage\IndividualTests.cs,TestValueTypeVariables,The following statement contains a magic number: Assert.AreEqual(100 + -100' result);
Magic Number,Expressions.Test.FleeLanguage,IndividualTests,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\FleeLanguage\IndividualTests.cs,TestValueTypeVariables,The following statement contains a magic number: variables["B"].Value = 1000;
Magic Number,Expressions.Test.FleeLanguage,IndividualTests,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\FleeLanguage\IndividualTests.cs,TestValueTypeVariables,The following statement contains a magic number: Assert.AreEqual(100 + 1000' result);
Magic Number,Expressions.Test.FleeLanguage,IndividualTests,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\FleeLanguage\IndividualTests.cs,TestValueTypeVariables,The following statement contains a magic number: Assert.AreEqual(100 + 1000' result);
Magic Number,Expressions.Test.FleeLanguage,IndividualTests,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\FleeLanguage\IndividualTests.cs,TestReferenceTypeVariables,The following statement contains a magic number: variables.Add("b"' 100);
Magic Number,Expressions.Test.FleeLanguage,IndividualTests,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\FleeLanguage\IndividualTests.cs,TestReferenceTypeVariables,The following statement contains a magic number: Assert.AreEqual("string" + 100 + "string"' result);
Magic Number,Expressions.Test.FleeLanguage,IndividualTests,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\FleeLanguage\IndividualTests.cs,TestValueTypeOwner,The following statement contains a magic number: TestStruct owner = new TestStruct(100);
Magic Number,Expressions.Test.FleeLanguage,IndividualTests,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\FleeLanguage\IndividualTests.cs,TestValueTypeOwner,The following statement contains a magic number: Assert.AreEqual(100' result);
Magic Number,Expressions.Test.FleeLanguage,IndividualTests,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\FleeLanguage\IndividualTests.cs,TestValueTypeOwner,The following statement contains a magic number: Assert.AreEqual(100' result);
Magic Number,Expressions.Test.FleeLanguage,IndividualTests,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\FleeLanguage\IndividualTests.cs,TestNonPublicImports,The following statement contains a magic number: Assert.AreEqual(100' (int)e.Invoke(context));
Magic Number,Expressions.Test.FleeLanguage,IndividualTests,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\FleeLanguage\IndividualTests.cs,TestNestedTypeImport,The following statement contains a magic number: Assert.AreEqual(100' (int)e.Invoke(context));
Magic Number,Expressions.Test.FleeLanguage,IndividualTests,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\FleeLanguage\IndividualTests.cs,TestNestedTypeImport,The following statement contains a magic number: Assert.AreEqual(100' (int)e.Invoke(context));
Magic Number,Expressions.Test.FleeLanguage,IndividualTests,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\FleeLanguage\IndividualTests.cs,TestOnDemandVariables,The following statement contains a magic number: Assert.AreEqual(100 + 100' (int)e.Invoke(new TestExpressionContext()));
Magic Number,Expressions.Test.FleeLanguage,IndividualTests,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\FleeLanguage\IndividualTests.cs,TestOnDemandVariables,The following statement contains a magic number: Assert.AreEqual(100 + 100' (int)e.Invoke(new TestExpressionContext()));
Magic Number,Expressions.Test.FleeLanguage,IndividualTests,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\FleeLanguage\IndividualTests.cs,TestOverloadResolution,The following statement contains a magic number: this.DoTestOverloadResolution("valuetype1(100.0f)"' context' 2);
Magic Number,Expressions.Test.FleeLanguage,IndividualTests,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\FleeLanguage\IndividualTests.cs,TestOverloadResolution,The following statement contains a magic number: this.DoTestOverloadResolution("valuetype1(100.0)"' context' 3);
Magic Number,Expressions.Test.FleeLanguage,IndividualTests,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\FleeLanguage\IndividualTests.cs,TestOverloadResolution,The following statement contains a magic number: this.DoTestOverloadResolution("ReferenceType1(\"abc\")"' context' 2);
Magic Number,Expressions.Test.FleeLanguage,IndividualTests,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\FleeLanguage\IndividualTests.cs,TestOverloadResolution,The following statement contains a magic number: this.DoTestOverloadResolution("ReferenceType2(a)"' context' 2);
Magic Number,Expressions.Test.FleeLanguage,IndividualTests,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\FleeLanguage\IndividualTests.cs,TestOverloadResolution,The following statement contains a magic number: this.DoTestOverloadResolution("ReferenceType3(\"abc\")"' context' 2);
Magic Number,Expressions.Test.FleeLanguage,IndividualTests,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\FleeLanguage\IndividualTests.cs,TestOverloadResolution,The following statement contains a magic number: this.DoTestOverloadResolution("ReferenceType1(null)"' context' 2);
Magic Number,Expressions.Test.FleeLanguage,IndividualTests,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\FleeLanguage\IndividualTests.cs,TestOverloadResolution,The following statement contains a magic number: this.DoTestOverloadResolution("ReferenceType2(null)"' context' 2);
Magic Number,Expressions.Test.FleeLanguage,IndividualTests,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\FleeLanguage\IndividualTests.cs,TestOverloadResolution,The following statement contains a magic number: this.DoTestOverloadResolution("Multiple1(100' 2.0)"' context' 2);
Magic Number,Expressions.Test.FleeLanguage,IndividualTests,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\FleeLanguage\IndividualTests.cs,TestOverloadResolution,The following statement contains a magic number: this.DoTestOverloadResolution("Multiple1(100' 2.0f)"' context' 2);
Magic Number,Expressions.Test.FleeLanguage,IndividualTests,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\FleeLanguage\IndividualTests.cs,TestExpressionVariables,The following statement contains a magic number: double b = Math.Cos(Math.PI / 2);
Magic Number,Expressions.Test.FleeLanguage,TestExpressionContext,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\FleeLanguage\IndividualTests.cs,GetVariableValue,The following statement contains a magic number: return 100;
Magic Number,Expressions.Test.VisualBasicLanguage.Compilation,BinaryExpressions,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\VisualBasicLanguage\Compilation\BinaryExpressions.cs,Constants,The following statement contains a magic number: Resolve("1 + 1"' 2);
Magic Number,Expressions.Test.VisualBasicLanguage.Compilation,BinaryExpressions,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\VisualBasicLanguage\Compilation\BinaryExpressions.cs,Constants,The following statement contains a magic number: Resolve("1 + 1.1"' 2.1);
Magic Number,Expressions.Test.VisualBasicLanguage.Compilation,BinaryExpressions,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\VisualBasicLanguage\Compilation\BinaryExpressions.cs,ConstantAndVariable,The following statement contains a magic number: context.Variables.Add(new Variable("Variable2") { Value = 1.1 });
Magic Number,Expressions.Test.VisualBasicLanguage.Compilation,BinaryExpressions,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\VisualBasicLanguage\Compilation\BinaryExpressions.cs,ConstantAndVariable,The following statement contains a magic number: Resolve(context' "Variable1 + 1"' 2);
Magic Number,Expressions.Test.VisualBasicLanguage.Compilation,BinaryExpressions,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\VisualBasicLanguage\Compilation\BinaryExpressions.cs,ConstantAndVariable,The following statement contains a magic number: Resolve(context' "Variable2 + 1"' 2.1);
Magic Number,Expressions.Test.VisualBasicLanguage.Compilation,BinaryExpressions,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\VisualBasicLanguage\Compilation\BinaryExpressions.cs,Calculation,The following statement contains a magic number: Resolve("2147483648Ui / 2ui"' 1073741824u);
Magic Number,Expressions.Test.VisualBasicLanguage.Compilation,BinaryExpressions,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\VisualBasicLanguage\Compilation\BinaryExpressions.cs,Remainder,The following statement contains a magic number: Resolve("2147483648Ui % 5Ui"' 3);
Magic Number,Expressions.Test.VisualBasicLanguage.Compilation,Casting,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\VisualBasicLanguage\Compilation\Casting.cs,CastWithBuiltInFloat,The following statement contains a magic number: Resolve("ctype(7' single)"' 7.0f);
Magic Number,Expressions.Test.VisualBasicLanguage.Compilation,Casting,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\VisualBasicLanguage\Compilation\Casting.cs,CastWithExpression,The following statement contains a magic number: Resolve("ctype(1 + 2' single)"' 3f);
Magic Number,Expressions.Test.VisualBasicLanguage.Compilation,Casting,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\VisualBasicLanguage\Compilation\Casting.cs,OperatorAdd,The following statement contains a magic number: Resolve(                  context'                  "Owner + 7"'                  7              );
Magic Number,Expressions.Test.VisualBasicLanguage.Compilation,Casting,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\VisualBasicLanguage\Compilation\Casting.cs,LongNumber,The following statement contains a magic number: Resolve(                  "&h8000000000000000"'                  9223372036854775808'                  new BoundExpressionOptions                  {                      ResultType = typeof(ulong)                  }              );
Magic Number,Expressions.Test.VisualBasicLanguage.Compilation,Casting,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\VisualBasicLanguage\Compilation\Casting.cs,LongSignedNumber,The following statement contains a magic number: Resolve(                  "-&h7fffffffffffffff"'                  -9223372036854775807'                  new BoundExpressionOptions                  {                      ResultType = typeof(long)                  }              );
Magic Number,Expressions.Test.VisualBasicLanguage.Compilation,Casting,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\VisualBasicLanguage\Compilation\Casting.cs,MinusDecimal,The following statement contains a magic number: context.Variables.Add(new Variable("Decimal") { Value = 100m });
Magic Number,Expressions.Test.VisualBasicLanguage.Compilation,Casting,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\VisualBasicLanguage\Compilation\Casting.cs,MinusDecimal,The following statement contains a magic number: Resolve(                  context'                  "-Decimal"'                  -100m              );
Magic Number,Expressions.Test.VisualBasicLanguage.Compilation,Owner,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\VisualBasicLanguage\Compilation\Casting.cs,Method,The following statement contains a magic number: return 7;
Magic Number,Expressions.Test.VisualBasicLanguage.Compilation,Fields,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\VisualBasicLanguage\Compilation\Fields.cs,StaticFieldOnOwner,The following statement contains a magic number: Resolve(context' "StaticField"' 8);
Magic Number,Expressions.Test.VisualBasicLanguage.Compilation,Fields,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\VisualBasicLanguage\Compilation\Fields.cs,FieldOnOwner,The following statement contains a magic number: Resolve(context' "Field"' 7);
Magic Number,Expressions.Test.VisualBasicLanguage.Compilation,Imports,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\VisualBasicLanguage\Compilation\Imports.cs,NestedImportOnNamespace,The following statement contains a magic number: Resolve(                  new ExpressionContext(                      new[]                      {                          new Import(                              "ns"'                              new Import(typeof(Math))'                              new Import(typeof(int))                          )                      }                  )'                  "ns.Abs(ns.MinValue + 10)"'                  int.MaxValue - 9              );
Magic Number,Expressions.Test.VisualBasicLanguage.Compilation,Imports,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\VisualBasicLanguage\Compilation\Imports.cs,NestedImportOnNestedNamespace,The following statement contains a magic number: Resolve(                  new ExpressionContext(                      new[]                      {                          new Import(                              "ns1"'                              new Import(typeof(Math))'                              new Import(                                  "ns2"'                                  new Import(typeof(int))                              )                          )                      }                  )'                  "ns1.Abs(ns1.ns2.MinValue + 10)"'                  int.MaxValue - 9              );
Magic Number,Expressions.Test.VisualBasicLanguage.Compilation,Indexing,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\VisualBasicLanguage\Compilation\Indexing.cs,RankedArrayIndexOnOwner,The following statement contains a magic number: Resolve(context' "RankedProperty(1'1)"' 4);
Magic Number,Expressions.Test.VisualBasicLanguage.Compilation,MethodCalls,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\VisualBasicLanguage\Compilation\MethodCalls.cs,StaticsOnImport,The following statement contains a magic number: Resolve(context' "Max(1' 2)"' 2);
Magic Number,Expressions.Test.VisualBasicLanguage.Compilation,MethodCalls,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\VisualBasicLanguage\Compilation\MethodCalls.cs,StaticsOnImport,The following statement contains a magic number: Resolve(context' "Max(1.1' 2)"' 2.0);
Magic Number,Expressions.Test.VisualBasicLanguage.Compilation,MethodCalls,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\VisualBasicLanguage\Compilation\MethodCalls.cs,MethodOnOwner,The following statement contains a magic number: Resolve(context' "Method()"' 7);
Magic Number,Expressions.Test.VisualBasicLanguage.Compilation,MethodCalls,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\VisualBasicLanguage\Compilation\MethodCalls.cs,PropertyOnOwner,The following statement contains a magic number: Resolve(context' "IntProperty"' 7);
Magic Number,Expressions.Test.VisualBasicLanguage.Compilation,MethodCalls,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\VisualBasicLanguage\Compilation\MethodCalls.cs,NestedPropertyOnOwner,The following statement contains a magic number: Resolve(context' "Item.IntProperty"' 7);
Magic Number,Expressions.Test.VisualBasicLanguage.Compilation,MethodCalls,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\VisualBasicLanguage\Compilation\MethodCalls.cs,ParamsWithSingleArg,The following statement contains a magic number: Resolve(context' "Owner.Params(0' \"a\")"' 2);
Magic Number,Expressions.Test.VisualBasicLanguage.Compilation,MethodCalls,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\VisualBasicLanguage\Compilation\MethodCalls.cs,ParamsWithMultipleArg,The following statement contains a magic number: Resolve(context' "Owner.Params(0' \"a\"' \"a\")"' 4);
Magic Number,Expressions.Test.VisualBasicLanguage.Compilation,MethodCalls,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\VisualBasicLanguage\Compilation\MethodCalls.cs,ParamsWithMultipleNullArg,The following statement contains a magic number: Resolve(context' "Owner.Params(0' nothing' nothing)"' 2);
Magic Number,Expressions.Test.VisualBasicLanguage.Compilation,MethodCalls,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\VisualBasicLanguage\Compilation\MethodCalls.cs,ParamsWithNullAndActualArg,The following statement contains a magic number: Resolve(context' "Owner.Params(0' nothing' \"a\"' nothing)"' 4);
Magic Number,Expressions.Test.VisualBasicLanguage.Compilation,MethodCalls,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\VisualBasicLanguage\Compilation\MethodCalls.cs,ParamsWithMatchingArg,The following statement contains a magic number: Resolve(context' "Owner.Params(0' Variable)"' 2);
Magic Number,Expressions.Test.VisualBasicLanguage.Compilation,MethodCalls,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\VisualBasicLanguage\Compilation\MethodCalls.cs,ObjectParamsWithSingleArg,The following statement contains a magic number: Resolve(context' "Owner.ObjectParams(0' \"a\")"' 2);
Magic Number,Expressions.Test.VisualBasicLanguage.Compilation,MethodCalls,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\VisualBasicLanguage\Compilation\MethodCalls.cs,ObjectParamsWithMultipleArg,The following statement contains a magic number: Resolve(context' "Owner.ObjectParams(0' \"a\"' \"a\")"' 4);
Magic Number,Expressions.Test.VisualBasicLanguage.Compilation,MethodCalls,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\VisualBasicLanguage\Compilation\MethodCalls.cs,ObjectParamsWithMultipleNullArg,The following statement contains a magic number: Resolve(context' "Owner.ObjectParams(0' nothing' nothing)"' 2);
Magic Number,Expressions.Test.VisualBasicLanguage.Compilation,MethodCalls,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\VisualBasicLanguage\Compilation\MethodCalls.cs,ObjectParamsWithNullAndActualArg,The following statement contains a magic number: Resolve(context' "Owner.ObjectParams(0' nothing' \"a\"' nothing)"' 4);
Magic Number,Expressions.Test.VisualBasicLanguage.Compilation,MethodCalls,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\VisualBasicLanguage\Compilation\MethodCalls.cs,ObjectParamsWithMatchingArg,The following statement contains a magic number: Resolve(context' "Owner.ObjectParams(0' Variable)"' 2);
Magic Number,Expressions.Test.VisualBasicLanguage.Compilation,MethodCalls,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\VisualBasicLanguage\Compilation\MethodCalls.cs,MethodOnMember,The following statement contains a magic number: CompileExpression(                  new ExpressionContext(null' new Owner { Variable = 7 })'                  "Variable.ToString()"              );
Magic Number,Expressions.Test.VisualBasicLanguage.Compilation,ResultCasting,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\VisualBasicLanguage\Compilation\ResultCasting.cs,CastCharToDecimal,The following statement contains a magic number: Resolve(                  "'a'"'                  97m'                  new BoundExpressionOptions { ResultType = typeof(decimal) }              );
Magic Number,Expressions.Test.VisualBasicLanguage.ExpressionTests,BinaryExpressions,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\VisualBasicLanguage\ExpressionTests\BinaryExpressions.cs,BinaryTypeUnchanged,The following statement contains a magic number: Resolve(                  "1 + 2"'                  new BinaryExpression(                      new Constant(1)'                      new Constant(2)'                      ExpressionType.Add'                      typeof(int)                  )              );
Magic Number,Expressions.Test.VisualBasicLanguage.ExpressionTests,BinaryExpressions,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\VisualBasicLanguage\ExpressionTests\BinaryExpressions.cs,Calculation,The following statement contains a magic number: Resolve(                  "2147483648Ui / 2ui"'                  new BinaryExpression(                      new Constant(2147483648u)'                      new Constant(2u)'                      ExpressionType.Divide'                      typeof(uint)                  )              );
Magic Number,Expressions.Test.VisualBasicLanguage.ExpressionTests,BinaryExpressions,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\VisualBasicLanguage\ExpressionTests\BinaryExpressions.cs,Calculation,The following statement contains a magic number: Resolve(                  "2147483648Ui / 2ui"'                  new BinaryExpression(                      new Constant(2147483648u)'                      new Constant(2u)'                      ExpressionType.Divide'                      typeof(uint)                  )              );
Magic Number,Expressions.Test.VisualBasicLanguage.ExpressionTests,BinaryExpressions,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\VisualBasicLanguage\ExpressionTests\BinaryExpressions.cs,MultipleAdditions,The following statement contains a magic number: Resolve(                  "100 + .25 + 000.25 + 1.50"'                  new BinaryExpression(                      new BinaryExpression(                          new BinaryExpression(                              new Constant(100)'                              new Constant(0.25)'                              ExpressionType.Add'                              typeof(double)                          )'                          new Constant(0.25)'                          ExpressionType.Add'                          typeof(double)                      )'                      new Constant(1.5)'                      ExpressionType.Add'                      typeof(double)                  )              );
Magic Number,Expressions.Test.VisualBasicLanguage.ExpressionTests,BinaryExpressions,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\VisualBasicLanguage\ExpressionTests\BinaryExpressions.cs,MultipleAdditions,The following statement contains a magic number: Resolve(                  "100 + .25 + 000.25 + 1.50"'                  new BinaryExpression(                      new BinaryExpression(                          new BinaryExpression(                              new Constant(100)'                              new Constant(0.25)'                              ExpressionType.Add'                              typeof(double)                          )'                          new Constant(0.25)'                          ExpressionType.Add'                          typeof(double)                      )'                      new Constant(1.5)'                      ExpressionType.Add'                      typeof(double)                  )              );
Magic Number,Expressions.Test.VisualBasicLanguage.ExpressionTests,BinaryExpressions,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\VisualBasicLanguage\ExpressionTests\BinaryExpressions.cs,MultipleAdditions,The following statement contains a magic number: Resolve(                  "100 + .25 + 000.25 + 1.50"'                  new BinaryExpression(                      new BinaryExpression(                          new BinaryExpression(                              new Constant(100)'                              new Constant(0.25)'                              ExpressionType.Add'                              typeof(double)                          )'                          new Constant(0.25)'                          ExpressionType.Add'                          typeof(double)                      )'                      new Constant(1.5)'                      ExpressionType.Add'                      typeof(double)                  )              );
Magic Number,Expressions.Test.VisualBasicLanguage.ExpressionTests,BinaryExpressions,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\VisualBasicLanguage\ExpressionTests\BinaryExpressions.cs,MultipleAdditions,The following statement contains a magic number: Resolve(                  "100 + .25 + 000.25 + 1.50"'                  new BinaryExpression(                      new BinaryExpression(                          new BinaryExpression(                              new Constant(100)'                              new Constant(0.25)'                              ExpressionType.Add'                              typeof(double)                          )'                          new Constant(0.25)'                          ExpressionType.Add'                          typeof(double)                      )'                      new Constant(1.5)'                      ExpressionType.Add'                      typeof(double)                  )              );
Magic Number,Expressions.Test.VisualBasicLanguage.ExpressionTests,BinaryExpressions,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\VisualBasicLanguage\ExpressionTests\BinaryExpressions.cs,CompareAndEquals,The following statement contains a magic number: Resolve(                  "10 > 2 = true"'                  new BinaryExpression(                      new BinaryExpression(                          new Constant(10)'                          new Constant(2)'                          ExpressionType.Greater'                          typeof(bool)'                          typeof(int)                      )'                      new Constant(true)'                      ExpressionType.Equals'                      typeof(bool)                  )              );
Magic Number,Expressions.Test.VisualBasicLanguage.ExpressionTests,BinaryExpressions,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\VisualBasicLanguage\ExpressionTests\BinaryExpressions.cs,CompareAndEquals,The following statement contains a magic number: Resolve(                  "10 > 2 = true"'                  new BinaryExpression(                      new BinaryExpression(                          new Constant(10)'                          new Constant(2)'                          ExpressionType.Greater'                          typeof(bool)'                          typeof(int)                      )'                      new Constant(true)'                      ExpressionType.Equals'                      typeof(bool)                  )              );
Magic Number,Expressions.Test.VisualBasicLanguage.ExpressionTests,BinaryExpressions,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\VisualBasicLanguage\ExpressionTests\BinaryExpressions.cs,ComparesWithLongCast,The following statement contains a magic number: Resolve(                  "-100 > 100Ui"'                  new BinaryExpression(                      new Constant(-100)'                      new Constant(100u)'                      ExpressionType.Greater'                      typeof(bool)'                      typeof(long)                  )              );
Magic Number,Expressions.Test.VisualBasicLanguage.ExpressionTests,BinaryExpressions,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\VisualBasicLanguage\ExpressionTests\BinaryExpressions.cs,ComparesWithLongCast,The following statement contains a magic number: Resolve(                  "-100 > 100Ui"'                  new BinaryExpression(                      new Constant(-100)'                      new Constant(100u)'                      ExpressionType.Greater'                      typeof(bool)'                      typeof(long)                  )              );
Magic Number,Expressions.Test.VisualBasicLanguage.ExpressionTests,BinaryExpressions,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\VisualBasicLanguage\ExpressionTests\BinaryExpressions.cs,MultipleBitwise,The following statement contains a magic number: Resolve(                  "123 and 100 or 1245 xor 80"'                  new BinaryExpression(                      new BinaryExpression(                          new Constant(123)'                          new Constant(100)'                          ExpressionType.BitwiseAnd'                          typeof(int)                      )'                      new BinaryExpression(                          new Constant(1245)'                          new Constant(80)'                          ExpressionType.Xor'                          typeof(int)                      )'                      ExpressionType.BitwiseOr'                      typeof(int)                  )              );
Magic Number,Expressions.Test.VisualBasicLanguage.ExpressionTests,BinaryExpressions,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\VisualBasicLanguage\ExpressionTests\BinaryExpressions.cs,MultipleBitwise,The following statement contains a magic number: Resolve(                  "123 and 100 or 1245 xor 80"'                  new BinaryExpression(                      new BinaryExpression(                          new Constant(123)'                          new Constant(100)'                          ExpressionType.BitwiseAnd'                          typeof(int)                      )'                      new BinaryExpression(                          new Constant(1245)'                          new Constant(80)'                          ExpressionType.Xor'                          typeof(int)                      )'                      ExpressionType.BitwiseOr'                      typeof(int)                  )              );
Magic Number,Expressions.Test.VisualBasicLanguage.ExpressionTests,BinaryExpressions,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\VisualBasicLanguage\ExpressionTests\BinaryExpressions.cs,MultipleBitwise,The following statement contains a magic number: Resolve(                  "123 and 100 or 1245 xor 80"'                  new BinaryExpression(                      new BinaryExpression(                          new Constant(123)'                          new Constant(100)'                          ExpressionType.BitwiseAnd'                          typeof(int)                      )'                      new BinaryExpression(                          new Constant(1245)'                          new Constant(80)'                          ExpressionType.Xor'                          typeof(int)                      )'                      ExpressionType.BitwiseOr'                      typeof(int)                  )              );
Magic Number,Expressions.Test.VisualBasicLanguage.ExpressionTests,BinaryExpressions,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\VisualBasicLanguage\ExpressionTests\BinaryExpressions.cs,MultipleBitwise,The following statement contains a magic number: Resolve(                  "123 and 100 or 1245 xor 80"'                  new BinaryExpression(                      new BinaryExpression(                          new Constant(123)'                          new Constant(100)'                          ExpressionType.BitwiseAnd'                          typeof(int)                      )'                      new BinaryExpression(                          new Constant(1245)'                          new Constant(80)'                          ExpressionType.Xor'                          typeof(int)                      )'                      ExpressionType.BitwiseOr'                      typeof(int)                  )              );
Magic Number,Expressions.Test.VisualBasicLanguage.ExpressionTests,BinaryExpressions,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\VisualBasicLanguage\ExpressionTests\BinaryExpressions.cs,PrecedenceOfNot,The following statement contains a magic number: Resolve(                  "not 1 > 100"'                  new UnaryExpression(                      new BinaryExpression(                          new Constant(1)'                          new Constant(100)'                          ExpressionType.Greater'                          typeof(bool)'                          typeof(int)                      )'                      typeof(bool)'                      ExpressionType.Not                  )              );
Magic Number,Expressions.Test.VisualBasicLanguage.ExpressionTests,BinaryExpressions,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\VisualBasicLanguage\ExpressionTests\BinaryExpressions.cs,EqualsAndNotEquals,The following statement contains a magic number: Resolve(                  "100 = 20 = false <> false"'                  new BinaryExpression(                      new BinaryExpression(                          new BinaryExpression(                              new Constant(100)'                              new Constant(20)'                              ExpressionType.Equals'                              typeof(bool)'                              typeof(int)                          )'                          new Constant(false)'                          ExpressionType.Equals'                          typeof(bool)                      )'                      new Constant(false)'                      ExpressionType.NotEquals'                      typeof(bool)                  )              );
Magic Number,Expressions.Test.VisualBasicLanguage.ExpressionTests,BinaryExpressions,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\VisualBasicLanguage\ExpressionTests\BinaryExpressions.cs,EqualsAndNotEquals,The following statement contains a magic number: Resolve(                  "100 = 20 = false <> false"'                  new BinaryExpression(                      new BinaryExpression(                          new BinaryExpression(                              new Constant(100)'                              new Constant(20)'                              ExpressionType.Equals'                              typeof(bool)'                              typeof(int)                          )'                          new Constant(false)'                          ExpressionType.Equals'                          typeof(bool)                      )'                      new Constant(false)'                      ExpressionType.NotEquals'                      typeof(bool)                  )              );
Magic Number,Expressions.Test.VisualBasicLanguage.ExpressionTests,Casting,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\VisualBasicLanguage\ExpressionTests\Casting.cs,CastWithBuiltInFloat,The following statement contains a magic number: Resolve(                  "ctype(7' single)"'                  new Cast(                      new Constant(7)'                      typeof(float)                  )              );
Magic Number,Expressions.Test.VisualBasicLanguage.ExpressionTests,Casting,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\VisualBasicLanguage\ExpressionTests\Casting.cs,CastWithExpression,The following statement contains a magic number: Resolve(                  "ctype(1 + 2' single)"'                  new Cast(                      new BinaryExpression(                          new Constant(1)'                          new Constant(2)'                          ExpressionType.Add'                          typeof(int)                      )'                      typeof(float)                  )              );
Magic Number,Expressions.Test.VisualBasicLanguage.ExpressionTests,Casting,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\VisualBasicLanguage\ExpressionTests\Casting.cs,CastingWithFullType,The following statement contains a magic number: Resolve(                  "ctype(7' System.Single)"'                  new Cast(                      new Constant(7)'                      typeof(float)                  )              );
Magic Number,Expressions.Test.VisualBasicLanguage.ExpressionTests,Conversions,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\VisualBasicLanguage\ExpressionTests\Conversions.cs,Power,The following statement contains a magic number: Resolve(                  "1 ^ 2"'                  new MethodCall(                      new TypeAccess(typeof(Math))'                      typeof(Math).GetMethod("Pow")'                      new IExpression[]                      {                          new Constant(1)'                          new Constant(2)                      }                  )              );
Magic Number,Expressions.Test.VisualBasicLanguage.ExpressionTests,ExpressionPrinter,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\VisualBasicLanguage\ExpressionTests\ExpressionPrinter.cs,PrintResolvedMethodCall,The following statement contains a magic number: PrintNode(node.Arguments[i]' indent + 2);
Magic Number,Expressions.Test.VisualBasicLanguage.ExpressionTests,ExpressionPrinter,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\VisualBasicLanguage\ExpressionTests\ExpressionPrinter.cs,PrintNodeArray,The following statement contains a magic number: PrintNode(arguments[i]' indent + 2);
Magic Number,Expressions.Test.VisualBasicLanguage.ExpressionTests,ExpressionPrinter,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\VisualBasicLanguage\ExpressionTests\ExpressionPrinter.cs,AppendLine,The following statement contains a magic number: _sb.AppendLine(new string(' '' indent * 4) + line);
Magic Number,Expressions.Test.VisualBasicLanguage.ExpressionTests,GlobalAccesses,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\VisualBasicLanguage\ExpressionTests\GlobalAccesses.cs,HexConstant,The following statement contains a magic number: Resolve("&hDeaD"' new Constant(57005));
Magic Number,Expressions.Test.CsharpLanguage.Compilation,BinaryExpressions,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\CsharpLanguage\Compilation\BinaryExpressions.cs,Constants,The following statement contains a magic number: Resolve("1 + 1"' 2);
Magic Number,Expressions.Test.CsharpLanguage.Compilation,BinaryExpressions,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\CsharpLanguage\Compilation\BinaryExpressions.cs,Constants,The following statement contains a magic number: Resolve("1 + 1.1"' 2.1);
Magic Number,Expressions.Test.CsharpLanguage.Compilation,BinaryExpressions,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\CsharpLanguage\Compilation\BinaryExpressions.cs,ConstantAndVariable,The following statement contains a magic number: context.Variables.Add(new Variable("Variable2") { Value = 1.1 });
Magic Number,Expressions.Test.CsharpLanguage.Compilation,BinaryExpressions,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\CsharpLanguage\Compilation\BinaryExpressions.cs,ConstantAndVariable,The following statement contains a magic number: Resolve(context' "Variable1 + 1"' 2);
Magic Number,Expressions.Test.CsharpLanguage.Compilation,BinaryExpressions,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\CsharpLanguage\Compilation\BinaryExpressions.cs,ConstantAndVariable,The following statement contains a magic number: Resolve(context' "Variable2 + 1"' 2.1);
Magic Number,Expressions.Test.CsharpLanguage.Compilation,BinaryExpressions,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\CsharpLanguage\Compilation\BinaryExpressions.cs,Calculation,The following statement contains a magic number: Resolve("2147483648U / 2u"' 1073741824u);
Magic Number,Expressions.Test.CsharpLanguage.Compilation,BinaryExpressions,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\CsharpLanguage\Compilation\BinaryExpressions.cs,Remainder,The following statement contains a magic number: Resolve("2147483648U % 5U"' 3);
Magic Number,Expressions.Test.CsharpLanguage.Compilation,BinaryExpressions,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\CsharpLanguage\Compilation\BinaryExpressions.cs,UnsignedShiftRight,The following statement contains a magic number: Resolve(                  "100U >> 2"'                  25u              );
Magic Number,Expressions.Test.CsharpLanguage.Compilation,BinaryExpressions,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\CsharpLanguage\Compilation\BinaryExpressions.cs,LongShiftLeft,The following statement contains a magic number: Resolve(                  "100L << 2"'                  400              );
Magic Number,Expressions.Test.CsharpLanguage.Compilation,Casting,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\CsharpLanguage\Compilation\Casting.cs,CastWithBuiltInFloat,The following statement contains a magic number: Resolve("(float)7"' 7.0f);
Magic Number,Expressions.Test.CsharpLanguage.Compilation,Casting,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\CsharpLanguage\Compilation\Casting.cs,CastWithExpression,The following statement contains a magic number: Resolve("(float)(1 + 2)"' 3f);
Magic Number,Expressions.Test.CsharpLanguage.Compilation,Casting,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\CsharpLanguage\Compilation\Casting.cs,OperatorAdd,The following statement contains a magic number: Resolve(                  context'                  "Owner + 7"'                  7              );
Magic Number,Expressions.Test.CsharpLanguage.Compilation,Casting,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\CsharpLanguage\Compilation\Casting.cs,LongNumber,The following statement contains a magic number: Resolve(                  "0x8000000000000000"'                  9223372036854775808'                  new BoundExpressionOptions                  {                      ResultType = typeof(ulong)                  }              );
Magic Number,Expressions.Test.CsharpLanguage.Compilation,Casting,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\CsharpLanguage\Compilation\Casting.cs,LongSignedNumber,The following statement contains a magic number: Resolve(                  "-0x7fffffffffffffff"'                  -9223372036854775807'                  new BoundExpressionOptions                  {                      ResultType = typeof(long)                  }              );
Magic Number,Expressions.Test.CsharpLanguage.Compilation,Casting,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\CsharpLanguage\Compilation\Casting.cs,MinusDecimal,The following statement contains a magic number: context.Variables.Add(new Variable("Decimal") { Value = 100m });
Magic Number,Expressions.Test.CsharpLanguage.Compilation,Casting,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\CsharpLanguage\Compilation\Casting.cs,MinusDecimal,The following statement contains a magic number: Resolve(                  context'                  "-Decimal"'                  -100m              );
Magic Number,Expressions.Test.CsharpLanguage.Compilation,Owner,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\CsharpLanguage\Compilation\Casting.cs,Method,The following statement contains a magic number: return 7;
Magic Number,Expressions.Test.CsharpLanguage.Compilation,Fields,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\CsharpLanguage\Compilation\Fields.cs,StaticFieldOnOwner,The following statement contains a magic number: Resolve(context' "StaticField"' 8);
Magic Number,Expressions.Test.CsharpLanguage.Compilation,Fields,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\CsharpLanguage\Compilation\Fields.cs,FieldOnOwner,The following statement contains a magic number: Resolve(context' "Field"' 7);
Magic Number,Expressions.Test.CsharpLanguage.Compilation,Imports,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\CsharpLanguage\Compilation\Imports.cs,NestedImportOnNamespace,The following statement contains a magic number: Resolve(                  new ExpressionContext(                      new[]                      {                          new Import(                              "ns"'                              new Import(typeof(Math))'                              new Import(typeof(int))                          )                      }                  )'                  "ns.Abs(ns.MinValue + 10)"'                  int.MaxValue - 9              );
Magic Number,Expressions.Test.CsharpLanguage.Compilation,Imports,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\CsharpLanguage\Compilation\Imports.cs,NestedImportOnNestedNamespace,The following statement contains a magic number: Resolve(                  new ExpressionContext(                      new[]                      {                          new Import(                              "ns1"'                              new Import(typeof(Math))'                              new Import(                                  "ns2"'                                  new Import(typeof(int))                              )                          )                      }                  )'                  "ns1.Abs(ns1.ns2.MinValue + 10)"'                  int.MaxValue - 9              );
Magic Number,Expressions.Test.CsharpLanguage.Compilation,Indexing,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\CsharpLanguage\Compilation\Indexing.cs,RankedArrayIndexOnOwner,The following statement contains a magic number: Resolve(context' "RankedProperty[1'1]"' 4);
Magic Number,Expressions.Test.CsharpLanguage.Compilation,MethodCalls,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\CsharpLanguage\Compilation\MethodCalls.cs,StaticsOnImport,The following statement contains a magic number: Resolve(context' "Max(1' 2)"' 2);
Magic Number,Expressions.Test.CsharpLanguage.Compilation,MethodCalls,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\CsharpLanguage\Compilation\MethodCalls.cs,StaticsOnImport,The following statement contains a magic number: Resolve(context' "Max(1.1' 2)"' 2.0);
Magic Number,Expressions.Test.CsharpLanguage.Compilation,MethodCalls,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\CsharpLanguage\Compilation\MethodCalls.cs,MethodOnOwner,The following statement contains a magic number: Resolve(context' "Method()"' 7);
Magic Number,Expressions.Test.CsharpLanguage.Compilation,MethodCalls,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\CsharpLanguage\Compilation\MethodCalls.cs,PropertyOnOwner,The following statement contains a magic number: Resolve(context' "IntProperty"' 7);
Magic Number,Expressions.Test.CsharpLanguage.Compilation,MethodCalls,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\CsharpLanguage\Compilation\MethodCalls.cs,NestedPropertyOnOwner,The following statement contains a magic number: Resolve(context' "Item.IntProperty"' 7);
Magic Number,Expressions.Test.CsharpLanguage.Compilation,MethodCalls,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\CsharpLanguage\Compilation\MethodCalls.cs,ParamsWithSingleArg,The following statement contains a magic number: Resolve(context' "Owner.Params(0' \"a\")"' 2);
Magic Number,Expressions.Test.CsharpLanguage.Compilation,MethodCalls,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\CsharpLanguage\Compilation\MethodCalls.cs,ParamsWithMultipleArg,The following statement contains a magic number: Resolve(context' "Owner.Params(0' \"a\"' \"a\")"' 4);
Magic Number,Expressions.Test.CsharpLanguage.Compilation,MethodCalls,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\CsharpLanguage\Compilation\MethodCalls.cs,ParamsWithMultipleNullArg,The following statement contains a magic number: Resolve(context' "Owner.Params(0' null' null)"' 2);
Magic Number,Expressions.Test.CsharpLanguage.Compilation,MethodCalls,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\CsharpLanguage\Compilation\MethodCalls.cs,ParamsWithNullAndActualArg,The following statement contains a magic number: Resolve(context' "Owner.Params(0' null' \"a\"' null)"' 4);
Magic Number,Expressions.Test.CsharpLanguage.Compilation,MethodCalls,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\CsharpLanguage\Compilation\MethodCalls.cs,ParamsWithMatchingArg,The following statement contains a magic number: Resolve(context' "Owner.Params(0' Variable)"' 2);
Magic Number,Expressions.Test.CsharpLanguage.Compilation,MethodCalls,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\CsharpLanguage\Compilation\MethodCalls.cs,ObjectParamsWithSingleArg,The following statement contains a magic number: Resolve(context' "Owner.ObjectParams(0' \"a\")"' 2);
Magic Number,Expressions.Test.CsharpLanguage.Compilation,MethodCalls,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\CsharpLanguage\Compilation\MethodCalls.cs,ObjectParamsWithMultipleArg,The following statement contains a magic number: Resolve(context' "Owner.ObjectParams(0' \"a\"' \"a\")"' 4);
Magic Number,Expressions.Test.CsharpLanguage.Compilation,MethodCalls,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\CsharpLanguage\Compilation\MethodCalls.cs,ObjectParamsWithMultipleNullArg,The following statement contains a magic number: Resolve(context' "Owner.ObjectParams(0' null' null)"' 2);
Magic Number,Expressions.Test.CsharpLanguage.Compilation,MethodCalls,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\CsharpLanguage\Compilation\MethodCalls.cs,ObjectParamsWithNullAndActualArg,The following statement contains a magic number: Resolve(context' "Owner.ObjectParams(0' null' \"a\"' null)"' 4);
Magic Number,Expressions.Test.CsharpLanguage.Compilation,MethodCalls,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\CsharpLanguage\Compilation\MethodCalls.cs,ObjectParamsWithMatchingArg,The following statement contains a magic number: Resolve(context' "Owner.ObjectParams(0' Variable)"' 2);
Magic Number,Expressions.Test.CsharpLanguage.Compilation,MethodCalls,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\CsharpLanguage\Compilation\MethodCalls.cs,MethodOnMember,The following statement contains a magic number: CompileExpression(                  new ExpressionContext(null' new Owner { Variable = 7 })'                  "Variable.ToString()"              );
Magic Number,Expressions.Test.CsharpLanguage.Compilation,ResultCasting,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\CsharpLanguage\Compilation\ResultCasting.cs,CastCharToDecimal,The following statement contains a magic number: Resolve(                  "'a'"'                  97m'                  new BoundExpressionOptions { ResultType = typeof(decimal) }              );
Magic Number,Expressions.Test.CsharpLanguage.ExpressionTests,BinaryExpressions,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\CsharpLanguage\ExpressionTests\BinaryExpressions.cs,BinaryTypeUnchanged,The following statement contains a magic number: Resolve(                  "1 + 2"'                  new BinaryExpression(                      new Constant(1)'                      new Constant(2)'                      ExpressionType.Add'                      typeof(int)                  )              );
Magic Number,Expressions.Test.CsharpLanguage.ExpressionTests,BinaryExpressions,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\CsharpLanguage\ExpressionTests\BinaryExpressions.cs,Calculation,The following statement contains a magic number: Resolve(                  "2147483648U / 2u"'                  new BinaryExpression(                      new Constant(2147483648u)'                      new Constant(2u)'                      ExpressionType.Divide'                      typeof(uint)                  )              );
Magic Number,Expressions.Test.CsharpLanguage.ExpressionTests,BinaryExpressions,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\CsharpLanguage\ExpressionTests\BinaryExpressions.cs,Calculation,The following statement contains a magic number: Resolve(                  "2147483648U / 2u"'                  new BinaryExpression(                      new Constant(2147483648u)'                      new Constant(2u)'                      ExpressionType.Divide'                      typeof(uint)                  )              );
Magic Number,Expressions.Test.CsharpLanguage.ExpressionTests,BinaryExpressions,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\CsharpLanguage\ExpressionTests\BinaryExpressions.cs,MultipleAdditions,The following statement contains a magic number: Resolve(                  "100 + .25 + 000.25 + 1.50"'                  new BinaryExpression(                      new BinaryExpression(                          new BinaryExpression(                              new Constant(100)'                              new Constant(0.25)'                              ExpressionType.Add'                              typeof(double)                          )'                          new Constant(0.25)'                          ExpressionType.Add'                          typeof(double)                      )'                      new Constant(1.5)'                      ExpressionType.Add'                      typeof(double)                  )              );
Magic Number,Expressions.Test.CsharpLanguage.ExpressionTests,BinaryExpressions,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\CsharpLanguage\ExpressionTests\BinaryExpressions.cs,MultipleAdditions,The following statement contains a magic number: Resolve(                  "100 + .25 + 000.25 + 1.50"'                  new BinaryExpression(                      new BinaryExpression(                          new BinaryExpression(                              new Constant(100)'                              new Constant(0.25)'                              ExpressionType.Add'                              typeof(double)                          )'                          new Constant(0.25)'                          ExpressionType.Add'                          typeof(double)                      )'                      new Constant(1.5)'                      ExpressionType.Add'                      typeof(double)                  )              );
Magic Number,Expressions.Test.CsharpLanguage.ExpressionTests,BinaryExpressions,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\CsharpLanguage\ExpressionTests\BinaryExpressions.cs,MultipleAdditions,The following statement contains a magic number: Resolve(                  "100 + .25 + 000.25 + 1.50"'                  new BinaryExpression(                      new BinaryExpression(                          new BinaryExpression(                              new Constant(100)'                              new Constant(0.25)'                              ExpressionType.Add'                              typeof(double)                          )'                          new Constant(0.25)'                          ExpressionType.Add'                          typeof(double)                      )'                      new Constant(1.5)'                      ExpressionType.Add'                      typeof(double)                  )              );
Magic Number,Expressions.Test.CsharpLanguage.ExpressionTests,BinaryExpressions,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\CsharpLanguage\ExpressionTests\BinaryExpressions.cs,MultipleAdditions,The following statement contains a magic number: Resolve(                  "100 + .25 + 000.25 + 1.50"'                  new BinaryExpression(                      new BinaryExpression(                          new BinaryExpression(                              new Constant(100)'                              new Constant(0.25)'                              ExpressionType.Add'                              typeof(double)                          )'                          new Constant(0.25)'                          ExpressionType.Add'                          typeof(double)                      )'                      new Constant(1.5)'                      ExpressionType.Add'                      typeof(double)                  )              );
Magic Number,Expressions.Test.CsharpLanguage.ExpressionTests,BinaryExpressions,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\CsharpLanguage\ExpressionTests\BinaryExpressions.cs,CompareAndEquals,The following statement contains a magic number: Resolve(                  "10 > 2 == true"'                  new BinaryExpression(                      new BinaryExpression(                          new Constant(10)'                          new Constant(2)'                          ExpressionType.Greater'                          typeof(bool)'                          typeof(int)                      )'                      new Constant(true)'                      ExpressionType.Equals'                      typeof(bool)                  )              );
Magic Number,Expressions.Test.CsharpLanguage.ExpressionTests,BinaryExpressions,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\CsharpLanguage\ExpressionTests\BinaryExpressions.cs,CompareAndEquals,The following statement contains a magic number: Resolve(                  "10 > 2 == true"'                  new BinaryExpression(                      new BinaryExpression(                          new Constant(10)'                          new Constant(2)'                          ExpressionType.Greater'                          typeof(bool)'                          typeof(int)                      )'                      new Constant(true)'                      ExpressionType.Equals'                      typeof(bool)                  )              );
Magic Number,Expressions.Test.CsharpLanguage.ExpressionTests,BinaryExpressions,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\CsharpLanguage\ExpressionTests\BinaryExpressions.cs,ComparesWithLongCast,The following statement contains a magic number: Resolve(                  "-100 > 100U"'                  new BinaryExpression(                      new Constant(-100)'                      new Constant(100u)'                      ExpressionType.Greater'                      typeof(bool)'                      typeof(long)                  )              );
Magic Number,Expressions.Test.CsharpLanguage.ExpressionTests,BinaryExpressions,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\CsharpLanguage\ExpressionTests\BinaryExpressions.cs,ComparesWithLongCast,The following statement contains a magic number: Resolve(                  "-100 > 100U"'                  new BinaryExpression(                      new Constant(-100)'                      new Constant(100u)'                      ExpressionType.Greater'                      typeof(bool)'                      typeof(long)                  )              );
Magic Number,Expressions.Test.CsharpLanguage.ExpressionTests,BinaryExpressions,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\CsharpLanguage\ExpressionTests\BinaryExpressions.cs,MultipleBitwise,The following statement contains a magic number: Resolve(                  "123 & 100 | 1245 ^ 80"'                  new BinaryExpression(                      new BinaryExpression(                          new Constant(123)'                          new Constant(100)'                          ExpressionType.BitwiseAnd'                          typeof(int)                      )'                      new BinaryExpression(                          new Constant(1245)'                          new Constant(80)'                          ExpressionType.Xor'                          typeof(int)                      )'                      ExpressionType.BitwiseOr'                      typeof(int)                  )              );
Magic Number,Expressions.Test.CsharpLanguage.ExpressionTests,BinaryExpressions,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\CsharpLanguage\ExpressionTests\BinaryExpressions.cs,MultipleBitwise,The following statement contains a magic number: Resolve(                  "123 & 100 | 1245 ^ 80"'                  new BinaryExpression(                      new BinaryExpression(                          new Constant(123)'                          new Constant(100)'                          ExpressionType.BitwiseAnd'                          typeof(int)                      )'                      new BinaryExpression(                          new Constant(1245)'                          new Constant(80)'                          ExpressionType.Xor'                          typeof(int)                      )'                      ExpressionType.BitwiseOr'                      typeof(int)                  )              );
Magic Number,Expressions.Test.CsharpLanguage.ExpressionTests,BinaryExpressions,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\CsharpLanguage\ExpressionTests\BinaryExpressions.cs,MultipleBitwise,The following statement contains a magic number: Resolve(                  "123 & 100 | 1245 ^ 80"'                  new BinaryExpression(                      new BinaryExpression(                          new Constant(123)'                          new Constant(100)'                          ExpressionType.BitwiseAnd'                          typeof(int)                      )'                      new BinaryExpression(                          new Constant(1245)'                          new Constant(80)'                          ExpressionType.Xor'                          typeof(int)                      )'                      ExpressionType.BitwiseOr'                      typeof(int)                  )              );
Magic Number,Expressions.Test.CsharpLanguage.ExpressionTests,BinaryExpressions,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\CsharpLanguage\ExpressionTests\BinaryExpressions.cs,MultipleBitwise,The following statement contains a magic number: Resolve(                  "123 & 100 | 1245 ^ 80"'                  new BinaryExpression(                      new BinaryExpression(                          new Constant(123)'                          new Constant(100)'                          ExpressionType.BitwiseAnd'                          typeof(int)                      )'                      new BinaryExpression(                          new Constant(1245)'                          new Constant(80)'                          ExpressionType.Xor'                          typeof(int)                      )'                      ExpressionType.BitwiseOr'                      typeof(int)                  )              );
Magic Number,Expressions.Test.CsharpLanguage.ExpressionTests,BinaryExpressions,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\CsharpLanguage\ExpressionTests\BinaryExpressions.cs,PrecedenceOfNot,The following statement contains a magic number: Resolve(                  "!(1 > 100)"'                  new UnaryExpression(                      new UnaryExpression(                          new BinaryExpression(                              new Constant(1)'                              new Constant(100)'                              ExpressionType.Greater'                              typeof(bool)'                              typeof(int)                          )'                          typeof(bool)'                          ExpressionType.Group                      )'                      typeof(bool)'                      ExpressionType.LogicalNot                  )              );
Magic Number,Expressions.Test.CsharpLanguage.ExpressionTests,Casting,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\CsharpLanguage\ExpressionTests\Casting.cs,CastWithBuiltInFloat,The following statement contains a magic number: Resolve(                  "(float)7"'                  new Cast(                      new Constant(7)'                      typeof(float)                  )              );
Magic Number,Expressions.Test.CsharpLanguage.ExpressionTests,Casting,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\CsharpLanguage\ExpressionTests\Casting.cs,CastWithExpression,The following statement contains a magic number: Resolve(                  "(float)(1 + 2)"'                  new Cast(                      new UnaryExpression(                          new BinaryExpression(                              new Constant(1)'                              new Constant(2)'                              ExpressionType.Add'                              typeof(int)                          )'                          typeof(int)'                          ExpressionType.Group                      )'                      typeof(float)                  )              );
Magic Number,Expressions.Test.CsharpLanguage.ExpressionTests,Casting,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\CsharpLanguage\ExpressionTests\Casting.cs,CastingWithFullType,The following statement contains a magic number: Resolve(                  "(System.Single)7"'                  new Cast(                      new Constant(7)'                      typeof(float)                  )              );
Magic Number,Expressions.Test.CsharpLanguage.ExpressionTests,ExpressionPrinter,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\CsharpLanguage\ExpressionTests\ExpressionPrinter.cs,PrintResolvedMethodCall,The following statement contains a magic number: PrintNode(node.Arguments[i]' indent + 2);
Magic Number,Expressions.Test.CsharpLanguage.ExpressionTests,ExpressionPrinter,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\CsharpLanguage\ExpressionTests\ExpressionPrinter.cs,PrintNodeArray,The following statement contains a magic number: PrintNode(arguments[i]' indent + 2);
Magic Number,Expressions.Test.CsharpLanguage.ExpressionTests,ExpressionPrinter,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\CsharpLanguage\ExpressionTests\ExpressionPrinter.cs,AppendLine,The following statement contains a magic number: _sb.AppendLine(new string(' '' indent * 4) + line);
Magic Number,Expressions.Test.CsharpLanguage.ExpressionTests,GlobalAccesses,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\CsharpLanguage\ExpressionTests\GlobalAccesses.cs,HexConstant,The following statement contains a magic number: Resolve("0xDeaDU"' new Constant(57005u));
Magic Number,Expressions.Test.FleeLanguage.ExpressionTests,BinaryExpressions,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\FleeLanguage\ExpressionTests\BinaryExpressions.cs,BinaryTypeUnchanged,The following statement contains a magic number: Resolve(                  "1 + 2"'                  new BinaryExpression(                      new Constant(1)'                      new Constant(2)'                      ExpressionType.Add'                      typeof(int)                  )              );
Magic Number,Expressions.Test.FleeLanguage.ExpressionTests,BinaryExpressions,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\FleeLanguage\ExpressionTests\BinaryExpressions.cs,Calculation,The following statement contains a magic number: Resolve(                  "2147483648U / 2u"'                  new BinaryExpression(                      new Constant(2147483648u)'                      new Constant(2u)'                      ExpressionType.Divide'                      typeof(uint)                  )              );
Magic Number,Expressions.Test.FleeLanguage.ExpressionTests,BinaryExpressions,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\FleeLanguage\ExpressionTests\BinaryExpressions.cs,Calculation,The following statement contains a magic number: Resolve(                  "2147483648U / 2u"'                  new BinaryExpression(                      new Constant(2147483648u)'                      new Constant(2u)'                      ExpressionType.Divide'                      typeof(uint)                  )              );
Magic Number,Expressions.Test.FleeLanguage.ExpressionTests,BinaryExpressions,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\FleeLanguage\ExpressionTests\BinaryExpressions.cs,MultipleAdditions,The following statement contains a magic number: Resolve(                  "100 + .25 + 000.25 + 1.50"'                  new BinaryExpression(                      new BinaryExpression(                          new BinaryExpression(                              new Constant(100)'                              new Constant(0.25)'                              ExpressionType.Add'                              typeof(double)                          )'                          new Constant(0.25)'                          ExpressionType.Add'                          typeof(double)                      )'                      new Constant(1.5)'                      ExpressionType.Add'                      typeof(double)                  )              );
Magic Number,Expressions.Test.FleeLanguage.ExpressionTests,BinaryExpressions,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\FleeLanguage\ExpressionTests\BinaryExpressions.cs,MultipleAdditions,The following statement contains a magic number: Resolve(                  "100 + .25 + 000.25 + 1.50"'                  new BinaryExpression(                      new BinaryExpression(                          new BinaryExpression(                              new Constant(100)'                              new Constant(0.25)'                              ExpressionType.Add'                              typeof(double)                          )'                          new Constant(0.25)'                          ExpressionType.Add'                          typeof(double)                      )'                      new Constant(1.5)'                      ExpressionType.Add'                      typeof(double)                  )              );
Magic Number,Expressions.Test.FleeLanguage.ExpressionTests,BinaryExpressions,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\FleeLanguage\ExpressionTests\BinaryExpressions.cs,MultipleAdditions,The following statement contains a magic number: Resolve(                  "100 + .25 + 000.25 + 1.50"'                  new BinaryExpression(                      new BinaryExpression(                          new BinaryExpression(                              new Constant(100)'                              new Constant(0.25)'                              ExpressionType.Add'                              typeof(double)                          )'                          new Constant(0.25)'                          ExpressionType.Add'                          typeof(double)                      )'                      new Constant(1.5)'                      ExpressionType.Add'                      typeof(double)                  )              );
Magic Number,Expressions.Test.FleeLanguage.ExpressionTests,BinaryExpressions,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\FleeLanguage\ExpressionTests\BinaryExpressions.cs,MultipleAdditions,The following statement contains a magic number: Resolve(                  "100 + .25 + 000.25 + 1.50"'                  new BinaryExpression(                      new BinaryExpression(                          new BinaryExpression(                              new Constant(100)'                              new Constant(0.25)'                              ExpressionType.Add'                              typeof(double)                          )'                          new Constant(0.25)'                          ExpressionType.Add'                          typeof(double)                      )'                      new Constant(1.5)'                      ExpressionType.Add'                      typeof(double)                  )              );
Magic Number,Expressions.Test.FleeLanguage.ExpressionTests,BinaryExpressions,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\FleeLanguage\ExpressionTests\BinaryExpressions.cs,CompareAndEquals,The following statement contains a magic number: Resolve(                  "10 > 2 = true"'                  new BinaryExpression(                      new BinaryExpression(                          new Constant(10)'                          new Constant(2)'                          ExpressionType.Greater'                          typeof(bool)'                          typeof(int)                      )'                      new Constant(true)'                      ExpressionType.Equals'                      typeof(bool)                  )              );
Magic Number,Expressions.Test.FleeLanguage.ExpressionTests,BinaryExpressions,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\FleeLanguage\ExpressionTests\BinaryExpressions.cs,CompareAndEquals,The following statement contains a magic number: Resolve(                  "10 > 2 = true"'                  new BinaryExpression(                      new BinaryExpression(                          new Constant(10)'                          new Constant(2)'                          ExpressionType.Greater'                          typeof(bool)'                          typeof(int)                      )'                      new Constant(true)'                      ExpressionType.Equals'                      typeof(bool)                  )              );
Magic Number,Expressions.Test.FleeLanguage.ExpressionTests,BinaryExpressions,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\FleeLanguage\ExpressionTests\BinaryExpressions.cs,ComparesWithLongCast,The following statement contains a magic number: Resolve(                  "-100 > 100U"'                  new BinaryExpression(                      new Constant(-100)'                      new Constant(100u)'                      ExpressionType.Greater'                      typeof(bool)'                      typeof(long)                  )              );
Magic Number,Expressions.Test.FleeLanguage.ExpressionTests,BinaryExpressions,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\FleeLanguage\ExpressionTests\BinaryExpressions.cs,ComparesWithLongCast,The following statement contains a magic number: Resolve(                  "-100 > 100U"'                  new BinaryExpression(                      new Constant(-100)'                      new Constant(100u)'                      ExpressionType.Greater'                      typeof(bool)'                      typeof(long)                  )              );
Magic Number,Expressions.Test.FleeLanguage.ExpressionTests,BinaryExpressions,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\FleeLanguage\ExpressionTests\BinaryExpressions.cs,MultipleBitwise,The following statement contains a magic number: Resolve(                  "123 and 100 or 1245 xor 80"'                  new BinaryExpression(                      new BinaryExpression(                          new Constant(123)'                          new Constant(100)'                          ExpressionType.And'                          typeof(int)                      )'                      new BinaryExpression(                          new Constant(1245)'                          new Constant(80)'                          ExpressionType.Xor'                          typeof(int)                      )'                      ExpressionType.Or'                      typeof(int)                  )              );
Magic Number,Expressions.Test.FleeLanguage.ExpressionTests,BinaryExpressions,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\FleeLanguage\ExpressionTests\BinaryExpressions.cs,MultipleBitwise,The following statement contains a magic number: Resolve(                  "123 and 100 or 1245 xor 80"'                  new BinaryExpression(                      new BinaryExpression(                          new Constant(123)'                          new Constant(100)'                          ExpressionType.And'                          typeof(int)                      )'                      new BinaryExpression(                          new Constant(1245)'                          new Constant(80)'                          ExpressionType.Xor'                          typeof(int)                      )'                      ExpressionType.Or'                      typeof(int)                  )              );
Magic Number,Expressions.Test.FleeLanguage.ExpressionTests,BinaryExpressions,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\FleeLanguage\ExpressionTests\BinaryExpressions.cs,MultipleBitwise,The following statement contains a magic number: Resolve(                  "123 and 100 or 1245 xor 80"'                  new BinaryExpression(                      new BinaryExpression(                          new Constant(123)'                          new Constant(100)'                          ExpressionType.And'                          typeof(int)                      )'                      new BinaryExpression(                          new Constant(1245)'                          new Constant(80)'                          ExpressionType.Xor'                          typeof(int)                      )'                      ExpressionType.Or'                      typeof(int)                  )              );
Magic Number,Expressions.Test.FleeLanguage.ExpressionTests,BinaryExpressions,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\FleeLanguage\ExpressionTests\BinaryExpressions.cs,MultipleBitwise,The following statement contains a magic number: Resolve(                  "123 and 100 or 1245 xor 80"'                  new BinaryExpression(                      new BinaryExpression(                          new Constant(123)'                          new Constant(100)'                          ExpressionType.And'                          typeof(int)                      )'                      new BinaryExpression(                          new Constant(1245)'                          new Constant(80)'                          ExpressionType.Xor'                          typeof(int)                      )'                      ExpressionType.Or'                      typeof(int)                  )              );
Magic Number,Expressions.Test.FleeLanguage.ExpressionTests,BinaryExpressions,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\FleeLanguage\ExpressionTests\BinaryExpressions.cs,PrecedenceOfNot,The following statement contains a magic number: Resolve(                  "not 1 > 100"'                  new UnaryExpression(                      new BinaryExpression(                          new Constant(1)'                          new Constant(100)'                          ExpressionType.Greater'                          typeof(bool)'                          typeof(int)                      )'                      typeof(bool)'                      ExpressionType.Not                  )              );
Magic Number,Expressions.Test.FleeLanguage.ExpressionTests,Casting,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\FleeLanguage\ExpressionTests\Casting.cs,CastWithBuiltInFloat,The following statement contains a magic number: Resolve(                  "cast(7' single)"'                  new Cast(                      new Constant(7)'                      typeof(float)                  )              );
Magic Number,Expressions.Test.FleeLanguage.ExpressionTests,Casting,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\FleeLanguage\ExpressionTests\Casting.cs,CastWithExpression,The following statement contains a magic number: Resolve(                  "cast(1 + 2' single)"'                  new Cast(                      new BinaryExpression(                          new Constant(1)'                          new Constant(2)'                          ExpressionType.Add'                          typeof(int)                      )'                      typeof(float)                  )              );
Magic Number,Expressions.Test.FleeLanguage.ExpressionTests,Casting,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\FleeLanguage\ExpressionTests\Casting.cs,CastingWithFullType,The following statement contains a magic number: Resolve(                  "cast(7' System.Single)"'                  new Cast(                      new Constant(7)'                      typeof(float)                  )              );
Magic Number,Expressions.Test.FleeLanguage.ExpressionTests,Conversions,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\FleeLanguage\ExpressionTests\Conversions.cs,Power,The following statement contains a magic number: Resolve(                  "1 ^ 2"'                  new MethodCall(                      new TypeAccess(typeof(Math))'                      typeof(Math).GetMethod("Pow")'                      new IExpression[]                      {                          new Constant(1)'                          new Constant(2)                      }                  )              );
Magic Number,Expressions.Test.FleeLanguage.ExpressionTests,ExpressionPrinter,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\FleeLanguage\ExpressionTests\ExpressionPrinter.cs,PrintResolvedMethodCall,The following statement contains a magic number: PrintNode(node.Arguments[i]' indent + 2);
Magic Number,Expressions.Test.FleeLanguage.ExpressionTests,ExpressionPrinter,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\FleeLanguage\ExpressionTests\ExpressionPrinter.cs,PrintNodeArray,The following statement contains a magic number: PrintNode(arguments[i]' indent + 2);
Magic Number,Expressions.Test.FleeLanguage.ExpressionTests,ExpressionPrinter,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\FleeLanguage\ExpressionTests\ExpressionPrinter.cs,AppendLine,The following statement contains a magic number: _sb.AppendLine(new string(' '' indent * 4) + line);
Magic Number,Expressions.Test.FleeLanguage.ExpressionTests,GlobalAccesses,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\FleeLanguage\ExpressionTests\GlobalAccesses.cs,HexConstant,The following statement contains a magic number: Resolve("0xDeaDU"' new Constant(57005u));
Magic Number,Expressions.Test,BulkTests,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\BulkTests.cs,DoTestValidExpressions,The following statement contains a magic number: DoTest(expression' context' arr[2]' expressionType' ExpressionTests.TestCulture);
Magic Number,Expressions.Test,BulkTests,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\BulkTests.cs,DoTestCheckedExpressions,The following statement contains a magic number: bool shouldOverflow = bool.Parse(arr[2]);
Magic Number,Expressions.Test,Mouse,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\ExpressionOwners.cs,Mouse,The following statement contains a magic number: DT = new DateTime(2007' 1' 1);
Magic Number,Expressions.Test,Monitor,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\ExpressionOwners.cs,Monitor,The following statement contains a magic number: I = 900;
Magic Number,Expressions.Test,Monitor,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\ExpressionOwners.cs,Monitor,The following statement contains a magic number: DT = new DateTime(2007' 1' 1);
Magic Number,Expressions.Test,ExpressionOwner,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\ExpressionOwners.cs,ExpressionOwner,The following statement contains a magic number: this.DecimalA = 100;
Magic Number,Expressions.Test,ExpressionOwner,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\ExpressionOwners.cs,ExpressionOwner,The following statement contains a magic number: this.DecimalB = 0.25m;
Magic Number,Expressions.Test,ExpressionOwner,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\ExpressionOwners.cs,ExpressionOwner,The following statement contains a magic number: this.KeyboardA.StructA = new Mouse("mouse"' 123);
Magic Number,Expressions.Test,ExpressionOwner,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\ExpressionOwners.cs,ExpressionOwner,The following statement contains a magic number: this.ObjectIntA = 100;
Magic Number,Expressions.Test,ExpressionOwner,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\ExpressionOwners.cs,ExpressionOwner,The following statement contains a magic number: this.IComparableA = 100.25;
Magic Number,Expressions.Test,ExpressionOwner,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\ExpressionOwners.cs,ExpressionOwner,The following statement contains a magic number: this.List.Add(100);
Magic Number,Expressions.Test,ExpressionOwner,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\ExpressionOwners.cs,ExpressionOwner,The following statement contains a magic number: this.DoubleA = 100.25;
Magic Number,Expressions.Test,ExpressionOwner,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\ExpressionOwners.cs,ExpressionOwner,The following statement contains a magic number: this.SingleA = 100.25f;
Magic Number,Expressions.Test,ExpressionOwner,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\ExpressionOwners.cs,ExpressionOwner,The following statement contains a magic number: this.Int32A = 100000;
Magic Number,Expressions.Test,ExpressionOwner,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\ExpressionOwners.cs,ExpressionOwner,The following statement contains a magic number: this.ByteA = 50;
Magic Number,Expressions.Test,ExpressionOwner,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\ExpressionOwners.cs,ExpressionOwner,The following statement contains a magic number: this.ByteB = 2;
Magic Number,Expressions.Test,ExpressionOwner,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\ExpressionOwners.cs,ExpressionOwner,The following statement contains a magic number: this.SByteA = -10;
Magic Number,Expressions.Test,ExpressionOwner,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\ExpressionOwners.cs,ExpressionOwner,The following statement contains a magic number: this.Int16A = -10;
Magic Number,Expressions.Test,ExpressionOwner,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\ExpressionOwners.cs,ExpressionOwner,The following statement contains a magic number: this.UInt16A = 100;
Magic Number,Expressions.Test,ExpressionOwner,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\ExpressionOwners.cs,ExpressionOwner,The following statement contains a magic number: this.DateTimeA = new DateTime(2007' 7' 1);
Magic Number,Expressions.Test,ExpressionOwner,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\ExpressionOwners.cs,ExpressionOwner,The following statement contains a magic number: this.DateTimeA = new DateTime(2007' 7' 1);
Magic Number,Expressions.Test,ExpressionOwner,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\ExpressionOwners.cs,ExpressionOwner,The following statement contains a magic number: this.GenericDict.Add("a"' 100);
Magic Number,Expressions.Test,ExpressionOwner,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\ExpressionOwners.cs,ExpressionOwner,The following statement contains a magic number: this.GenericDict.Add("b"' 100);
Magic Number,Expressions.Test,ExpressionOwner,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\ExpressionOwners.cs,ExpressionOwner,The following statement contains a magic number: this.Dict.Add(100' null);
Magic Number,Expressions.Test,ExpressionOwner,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\ExpressionOwners.cs,ExpressionOwner,The following statement contains a magic number: dt.Rows.Add(100);
Magic Number,Expressions.Test,ExpressionOwner,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\ExpressionOwners.cs,DoubleIt,The following statement contains a magic number: return i * 2;
Magic Number,Expressions.Test,ExpressionOwner,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\ExpressionOwners.cs,SharedFuncInt,The following statement contains a magic number: return 100;
Magic Number,Expressions.Test,ExpressionOwner,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\ExpressionOwners.cs,PrivateSharedFuncInt,The following statement contains a magic number: return 100;
Magic Number,Expressions.Test,ExpressionOwner,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\ExpressionOwners.cs,Sum,The following statement contains a magic number: return 2;
Magic Number,Expressions.Test,ExpressionOwner,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\ExpressionOwners.cs,Sum,The following statement contains a magic number: return 3;
Magic Number,Expressions.Test,ExpressionOwner,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\ExpressionOwners.cs,Sum,The following statement contains a magic number: return 4;
Magic Number,Expressions.Test,ExpressionOwner,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\ExpressionOwners.cs,Sum2,The following statement contains a magic number: return 3;
Magic Number,Expressions.Test,ExpressionOwner,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\ExpressionOwners.cs,Sum2,The following statement contains a magic number: return 4;
Magic Number,Expressions.Test,ExpressionOwner,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\ExpressionOwners.cs,ParamArray3,The following statement contains a magic number: return 2;
Magic Number,Expressions.Test,ExpressionOwner,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\ExpressionOwners.cs,ParamArray4,The following statement contains a magic number: return 2;
Magic Number,Expressions.Test,OverloadTestExpressionOwner,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\ExpressionOwners.cs,ValueType1,The following statement contains a magic number: return 2;
Magic Number,Expressions.Test,OverloadTestExpressionOwner,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\ExpressionOwners.cs,ValueType1,The following statement contains a magic number: return 3;
Magic Number,Expressions.Test,OverloadTestExpressionOwner,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\ExpressionOwners.cs,ValueType1,The following statement contains a magic number: return 4;
Magic Number,Expressions.Test,OverloadTestExpressionOwner,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\ExpressionOwners.cs,ValueType2,The following statement contains a magic number: return 2;
Magic Number,Expressions.Test,OverloadTestExpressionOwner,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\ExpressionOwners.cs,ValueType3,The following statement contains a magic number: return 2;
Magic Number,Expressions.Test,OverloadTestExpressionOwner,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\ExpressionOwners.cs,ReferenceType1,The following statement contains a magic number: return 2;
Magic Number,Expressions.Test,OverloadTestExpressionOwner,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\ExpressionOwners.cs,ReferenceType2,The following statement contains a magic number: return 2;
Magic Number,Expressions.Test,OverloadTestExpressionOwner,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\ExpressionOwners.cs,ReferenceType3,The following statement contains a magic number: return 2;
Magic Number,Expressions.Test,OverloadTestExpressionOwner,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\ExpressionOwners.cs,ReferenceType4,The following statement contains a magic number: return 2;
Magic Number,Expressions.Test,OverloadTestExpressionOwner,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\ExpressionOwners.cs,Value_ReferenceType1,The following statement contains a magic number: return 2;
Magic Number,Expressions.Test,OverloadTestExpressionOwner,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\ExpressionOwners.cs,Value_ReferenceType2,The following statement contains a magic number: return 2;
Magic Number,Expressions.Test,OverloadTestExpressionOwner,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\ExpressionOwners.cs,Value_ReferenceType3,The following statement contains a magic number: return 2;
Magic Number,Expressions.Test,OverloadTestExpressionOwner,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\ExpressionOwners.cs,Value_ReferenceType4,The following statement contains a magic number: return 2;
Magic Number,Expressions.Test,OverloadTestExpressionOwner,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\ExpressionOwners.cs,Access1,The following statement contains a magic number: return 2;
Magic Number,Expressions.Test,OverloadTestExpressionOwner,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\ExpressionOwners.cs,Access2,The following statement contains a magic number: return 2;
Magic Number,Expressions.Test,OverloadTestExpressionOwner,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\ExpressionOwners.cs,Multiple1,The following statement contains a magic number: return 2;
Magic Number,Expressions.Test,TestImport,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\ExpressionOwners.cs,DoStuff,The following statement contains a magic number: return 100;
Magic Number,Expressions.Test,TestStruct,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\ExpressionOwners.cs,DoStuff,The following statement contains a magic number: return 100;
Magic Number,Expressions.Test,NestedPublicB,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\ExpressionOwners.cs,DoStuff,The following statement contains a magic number: return 100;
Magic Number,Expressions.Test,NestedInternalB,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\ExpressionOwners.cs,DoStuff,The following statement contains a magic number: return 100;
Magic Number,Expressions.Test,ExpressionTests,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\ExpressionTests.cs,CreateGenericContext,The following statement contains a magic number: context.Variables.Add("varInt32"' 100);
Magic Number,Expressions.Test,ExpressionTests,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\ExpressionTests.cs,CreateGenericContext,The following statement contains a magic number: context.Variables.Add("varDecimal"' new decimal(100));
Magic Number,Expressions.Test,ExpressionTests,C:\research\architectureSmells\repos\pvginkel_Expressions\Expressions.Test\ExpressionTests.cs,RoundIfReal,The following statement contains a magic number: d = Math.Round(d' 4);
