Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Monoceros.Pipeline.Tiled,MapContent,C:\repos\LithiumToast_Monoceros\src\Monoceros.Tiled.Pipeline\Tiled\MapContent.cs,MapContent,Cyclomatic complexity of the method is 13
Complex Method,Monoceros.Pipeline.Tiled,MapEntityLayerContent,C:\repos\LithiumToast_Monoceros\src\Monoceros.Tiled.Pipeline\Tiled\MapEntityLayerContent.cs,MapEntityLayerContent,Cyclomatic complexity of the method is 12
Complex Method,Monoceros.Pipeline.Tiled,MapTileLayerContent,C:\repos\LithiumToast_Monoceros\src\Monoceros.Tiled.Pipeline\Tiled\MapTileLayerContent.cs,MapTileLayerContent,Cyclomatic complexity of the method is 17
Long Statement,Monoceros.Pipeline.Tiled,MapEntityLayerContent,C:\repos\LithiumToast_Monoceros\src\Monoceros.Tiled.Pipeline\Tiled\MapEntityLayerContent.cs,FindProperty,The length of the statement  "	var propertyInfo = obj.GetType ().GetProperty (propertyName' BindingFlags.Public | BindingFlags.Instance | BindingFlags.IgnoreCase); " is 132.
Complex Conditional,Monoceros.Pipeline.Tiled,TiledContent,C:\repos\LithiumToast_Monoceros\src\Monoceros.Tiled.Pipeline\Tiled\TiledContent.cs,TiledContent,The conditional expression  "nameAttribute != null && !string.IsNullOrEmpty (nameAttribute.Value) && valueAttribute != null && !string.IsNullOrEmpty (valueAttribute.Value)"  is complex.
Magic Number,Monoceros.Pipeline.Tiled,MapEntityLayerContent,C:\repos\LithiumToast_Monoceros\src\Monoceros.Tiled.Pipeline\Tiled\MapEntityLayerContent.cs,TryBindTiledProperties,The following statement contains a magic number: foreach (var tiledProperty in tiledProperties) {  	Object propertyObject;  	var propertyInfo = FindProperty (obj' tiledProperty.Key' out propertyObject);  	if (propertyInfo != null) {  		Object value;  		if (propertyInfo.PropertyType == typeof(Vector2)) {  			var parse = tiledProperty.Key.Split (new[] {  				' ''  				'''  			}' StringSplitOptions.RemoveEmptyEntries);  			if (parse.Length == 2)  				value = new Vector2 (float.Parse (parse [0])' float.Parse (parse [1]));  			else if (parse.Length == 1)  				value = new Vector2 (float.Parse (parse [0]));  			else  				value = Convert.ChangeType (tiledProperty.Value' propertyInfo.PropertyType);  		}  		else if (propertyInfo.PropertyType == typeof(Rectangle)) {  			var parse = tiledProperty.Value.Split (new[] {  				' ''  				'''  			}' StringSplitOptions.RemoveEmptyEntries);  			value = new Rectangle (int.Parse (parse [0])' int.Parse (parse [1])' int.Parse (parse [2])' int.Parse (parse [3]));  		}  		else  			value = Convert.ChangeType (tiledProperty.Value' propertyInfo.PropertyType);  		propertyInfo.SetValue (propertyObject' value' null);  	}  }  
Magic Number,Monoceros.Pipeline.Tiled,MapEntityLayerContent,C:\repos\LithiumToast_Monoceros\src\Monoceros.Tiled.Pipeline\Tiled\MapEntityLayerContent.cs,TryBindTiledProperties,The following statement contains a magic number: foreach (var tiledProperty in tiledProperties) {  	Object propertyObject;  	var propertyInfo = FindProperty (obj' tiledProperty.Key' out propertyObject);  	if (propertyInfo != null) {  		Object value;  		if (propertyInfo.PropertyType == typeof(Vector2)) {  			var parse = tiledProperty.Key.Split (new[] {  				' ''  				'''  			}' StringSplitOptions.RemoveEmptyEntries);  			if (parse.Length == 2)  				value = new Vector2 (float.Parse (parse [0])' float.Parse (parse [1]));  			else if (parse.Length == 1)  				value = new Vector2 (float.Parse (parse [0]));  			else  				value = Convert.ChangeType (tiledProperty.Value' propertyInfo.PropertyType);  		}  		else if (propertyInfo.PropertyType == typeof(Rectangle)) {  			var parse = tiledProperty.Value.Split (new[] {  				' ''  				'''  			}' StringSplitOptions.RemoveEmptyEntries);  			value = new Rectangle (int.Parse (parse [0])' int.Parse (parse [1])' int.Parse (parse [2])' int.Parse (parse [3]));  		}  		else  			value = Convert.ChangeType (tiledProperty.Value' propertyInfo.PropertyType);  		propertyInfo.SetValue (propertyObject' value' null);  	}  }  
Magic Number,Monoceros.Pipeline.Tiled,MapEntityLayerContent,C:\repos\LithiumToast_Monoceros\src\Monoceros.Tiled.Pipeline\Tiled\MapEntityLayerContent.cs,TryBindTiledProperties,The following statement contains a magic number: foreach (var tiledProperty in tiledProperties) {  	Object propertyObject;  	var propertyInfo = FindProperty (obj' tiledProperty.Key' out propertyObject);  	if (propertyInfo != null) {  		Object value;  		if (propertyInfo.PropertyType == typeof(Vector2)) {  			var parse = tiledProperty.Key.Split (new[] {  				' ''  				'''  			}' StringSplitOptions.RemoveEmptyEntries);  			if (parse.Length == 2)  				value = new Vector2 (float.Parse (parse [0])' float.Parse (parse [1]));  			else if (parse.Length == 1)  				value = new Vector2 (float.Parse (parse [0]));  			else  				value = Convert.ChangeType (tiledProperty.Value' propertyInfo.PropertyType);  		}  		else if (propertyInfo.PropertyType == typeof(Rectangle)) {  			var parse = tiledProperty.Value.Split (new[] {  				' ''  				'''  			}' StringSplitOptions.RemoveEmptyEntries);  			value = new Rectangle (int.Parse (parse [0])' int.Parse (parse [1])' int.Parse (parse [2])' int.Parse (parse [3]));  		}  		else  			value = Convert.ChangeType (tiledProperty.Value' propertyInfo.PropertyType);  		propertyInfo.SetValue (propertyObject' value' null);  	}  }  
Magic Number,Monoceros.Pipeline.Tiled,MapEntityLayerContent,C:\repos\LithiumToast_Monoceros\src\Monoceros.Tiled.Pipeline\Tiled\MapEntityLayerContent.cs,TryBindTiledProperties,The following statement contains a magic number: if (propertyInfo != null) {  	Object value;  	if (propertyInfo.PropertyType == typeof(Vector2)) {  		var parse = tiledProperty.Key.Split (new[] {  			' ''  			'''  		}' StringSplitOptions.RemoveEmptyEntries);  		if (parse.Length == 2)  			value = new Vector2 (float.Parse (parse [0])' float.Parse (parse [1]));  		else if (parse.Length == 1)  			value = new Vector2 (float.Parse (parse [0]));  		else  			value = Convert.ChangeType (tiledProperty.Value' propertyInfo.PropertyType);  	}  	else if (propertyInfo.PropertyType == typeof(Rectangle)) {  		var parse = tiledProperty.Value.Split (new[] {  			' ''  			'''  		}' StringSplitOptions.RemoveEmptyEntries);  		value = new Rectangle (int.Parse (parse [0])' int.Parse (parse [1])' int.Parse (parse [2])' int.Parse (parse [3]));  	}  	else  		value = Convert.ChangeType (tiledProperty.Value' propertyInfo.PropertyType);  	propertyInfo.SetValue (propertyObject' value' null);  }  
Magic Number,Monoceros.Pipeline.Tiled,MapEntityLayerContent,C:\repos\LithiumToast_Monoceros\src\Monoceros.Tiled.Pipeline\Tiled\MapEntityLayerContent.cs,TryBindTiledProperties,The following statement contains a magic number: if (propertyInfo != null) {  	Object value;  	if (propertyInfo.PropertyType == typeof(Vector2)) {  		var parse = tiledProperty.Key.Split (new[] {  			' ''  			'''  		}' StringSplitOptions.RemoveEmptyEntries);  		if (parse.Length == 2)  			value = new Vector2 (float.Parse (parse [0])' float.Parse (parse [1]));  		else if (parse.Length == 1)  			value = new Vector2 (float.Parse (parse [0]));  		else  			value = Convert.ChangeType (tiledProperty.Value' propertyInfo.PropertyType);  	}  	else if (propertyInfo.PropertyType == typeof(Rectangle)) {  		var parse = tiledProperty.Value.Split (new[] {  			' ''  			'''  		}' StringSplitOptions.RemoveEmptyEntries);  		value = new Rectangle (int.Parse (parse [0])' int.Parse (parse [1])' int.Parse (parse [2])' int.Parse (parse [3]));  	}  	else  		value = Convert.ChangeType (tiledProperty.Value' propertyInfo.PropertyType);  	propertyInfo.SetValue (propertyObject' value' null);  }  
Magic Number,Monoceros.Pipeline.Tiled,MapEntityLayerContent,C:\repos\LithiumToast_Monoceros\src\Monoceros.Tiled.Pipeline\Tiled\MapEntityLayerContent.cs,TryBindTiledProperties,The following statement contains a magic number: if (propertyInfo != null) {  	Object value;  	if (propertyInfo.PropertyType == typeof(Vector2)) {  		var parse = tiledProperty.Key.Split (new[] {  			' ''  			'''  		}' StringSplitOptions.RemoveEmptyEntries);  		if (parse.Length == 2)  			value = new Vector2 (float.Parse (parse [0])' float.Parse (parse [1]));  		else if (parse.Length == 1)  			value = new Vector2 (float.Parse (parse [0]));  		else  			value = Convert.ChangeType (tiledProperty.Value' propertyInfo.PropertyType);  	}  	else if (propertyInfo.PropertyType == typeof(Rectangle)) {  		var parse = tiledProperty.Value.Split (new[] {  			' ''  			'''  		}' StringSplitOptions.RemoveEmptyEntries);  		value = new Rectangle (int.Parse (parse [0])' int.Parse (parse [1])' int.Parse (parse [2])' int.Parse (parse [3]));  	}  	else  		value = Convert.ChangeType (tiledProperty.Value' propertyInfo.PropertyType);  	propertyInfo.SetValue (propertyObject' value' null);  }  
Magic Number,Monoceros.Pipeline.Tiled,MapEntityLayerContent,C:\repos\LithiumToast_Monoceros\src\Monoceros.Tiled.Pipeline\Tiled\MapEntityLayerContent.cs,TryBindTiledProperties,The following statement contains a magic number: if (propertyInfo.PropertyType == typeof(Vector2)) {  	var parse = tiledProperty.Key.Split (new[] {  		' ''  		'''  	}' StringSplitOptions.RemoveEmptyEntries);  	if (parse.Length == 2)  		value = new Vector2 (float.Parse (parse [0])' float.Parse (parse [1]));  	else if (parse.Length == 1)  		value = new Vector2 (float.Parse (parse [0]));  	else  		value = Convert.ChangeType (tiledProperty.Value' propertyInfo.PropertyType);  }  else if (propertyInfo.PropertyType == typeof(Rectangle)) {  	var parse = tiledProperty.Value.Split (new[] {  		' ''  		'''  	}' StringSplitOptions.RemoveEmptyEntries);  	value = new Rectangle (int.Parse (parse [0])' int.Parse (parse [1])' int.Parse (parse [2])' int.Parse (parse [3]));  }  else  	value = Convert.ChangeType (tiledProperty.Value' propertyInfo.PropertyType);  
Magic Number,Monoceros.Pipeline.Tiled,MapEntityLayerContent,C:\repos\LithiumToast_Monoceros\src\Monoceros.Tiled.Pipeline\Tiled\MapEntityLayerContent.cs,TryBindTiledProperties,The following statement contains a magic number: if (propertyInfo.PropertyType == typeof(Vector2)) {  	var parse = tiledProperty.Key.Split (new[] {  		' ''  		'''  	}' StringSplitOptions.RemoveEmptyEntries);  	if (parse.Length == 2)  		value = new Vector2 (float.Parse (parse [0])' float.Parse (parse [1]));  	else if (parse.Length == 1)  		value = new Vector2 (float.Parse (parse [0]));  	else  		value = Convert.ChangeType (tiledProperty.Value' propertyInfo.PropertyType);  }  else if (propertyInfo.PropertyType == typeof(Rectangle)) {  	var parse = tiledProperty.Value.Split (new[] {  		' ''  		'''  	}' StringSplitOptions.RemoveEmptyEntries);  	value = new Rectangle (int.Parse (parse [0])' int.Parse (parse [1])' int.Parse (parse [2])' int.Parse (parse [3]));  }  else  	value = Convert.ChangeType (tiledProperty.Value' propertyInfo.PropertyType);  
Magic Number,Monoceros.Pipeline.Tiled,MapEntityLayerContent,C:\repos\LithiumToast_Monoceros\src\Monoceros.Tiled.Pipeline\Tiled\MapEntityLayerContent.cs,TryBindTiledProperties,The following statement contains a magic number: if (propertyInfo.PropertyType == typeof(Vector2)) {  	var parse = tiledProperty.Key.Split (new[] {  		' ''  		'''  	}' StringSplitOptions.RemoveEmptyEntries);  	if (parse.Length == 2)  		value = new Vector2 (float.Parse (parse [0])' float.Parse (parse [1]));  	else if (parse.Length == 1)  		value = new Vector2 (float.Parse (parse [0]));  	else  		value = Convert.ChangeType (tiledProperty.Value' propertyInfo.PropertyType);  }  else if (propertyInfo.PropertyType == typeof(Rectangle)) {  	var parse = tiledProperty.Value.Split (new[] {  		' ''  		'''  	}' StringSplitOptions.RemoveEmptyEntries);  	value = new Rectangle (int.Parse (parse [0])' int.Parse (parse [1])' int.Parse (parse [2])' int.Parse (parse [3]));  }  else  	value = Convert.ChangeType (tiledProperty.Value' propertyInfo.PropertyType);  
Magic Number,Monoceros.Pipeline.Tiled,MapEntityLayerContent,C:\repos\LithiumToast_Monoceros\src\Monoceros.Tiled.Pipeline\Tiled\MapEntityLayerContent.cs,TryBindTiledProperties,The following statement contains a magic number: if (parse.Length == 2)  	value = new Vector2 (float.Parse (parse [0])' float.Parse (parse [1]));  else if (parse.Length == 1)  	value = new Vector2 (float.Parse (parse [0]));  else  	value = Convert.ChangeType (tiledProperty.Value' propertyInfo.PropertyType);  
Magic Number,Monoceros.Pipeline.Tiled,MapEntityLayerContent,C:\repos\LithiumToast_Monoceros\src\Monoceros.Tiled.Pipeline\Tiled\MapEntityLayerContent.cs,TryBindTiledProperties,The following statement contains a magic number: if (propertyInfo.PropertyType == typeof(Rectangle)) {  	var parse = tiledProperty.Value.Split (new[] {  		' ''  		'''  	}' StringSplitOptions.RemoveEmptyEntries);  	value = new Rectangle (int.Parse (parse [0])' int.Parse (parse [1])' int.Parse (parse [2])' int.Parse (parse [3]));  }  else  	value = Convert.ChangeType (tiledProperty.Value' propertyInfo.PropertyType);  
Magic Number,Monoceros.Pipeline.Tiled,MapEntityLayerContent,C:\repos\LithiumToast_Monoceros\src\Monoceros.Tiled.Pipeline\Tiled\MapEntityLayerContent.cs,TryBindTiledProperties,The following statement contains a magic number: if (propertyInfo.PropertyType == typeof(Rectangle)) {  	var parse = tiledProperty.Value.Split (new[] {  		' ''  		'''  	}' StringSplitOptions.RemoveEmptyEntries);  	value = new Rectangle (int.Parse (parse [0])' int.Parse (parse [1])' int.Parse (parse [2])' int.Parse (parse [3]));  }  else  	value = Convert.ChangeType (tiledProperty.Value' propertyInfo.PropertyType);  
Magic Number,Monoceros.Pipeline.Tiled,MapEntityLayerContent,C:\repos\LithiumToast_Monoceros\src\Monoceros.Tiled.Pipeline\Tiled\MapEntityLayerContent.cs,TryBindTiledProperties,The following statement contains a magic number: value = new Rectangle (int.Parse (parse [0])' int.Parse (parse [1])' int.Parse (parse [2])' int.Parse (parse [3]));  
Magic Number,Monoceros.Pipeline.Tiled,MapEntityLayerContent,C:\repos\LithiumToast_Monoceros\src\Monoceros.Tiled.Pipeline\Tiled\MapEntityLayerContent.cs,TryBindTiledProperties,The following statement contains a magic number: value = new Rectangle (int.Parse (parse [0])' int.Parse (parse [1])' int.Parse (parse [2])' int.Parse (parse [3]));  
Missing Default,Monoceros.Pipeline.Tiled,MapContent,C:\repos\LithiumToast_Monoceros\src\Monoceros.Tiled.Pipeline\Tiled\MapContent.cs,MapContent,The following switch statement is missing a default case: switch (layerNode.Name.ToString ()) {  case "layer":  	var tileLayer = new MapTileLayerContent (this' layerNode);  	Layers.Add (tileLayer);  	break;  case "objectgroup":  	var layer = new MapEntityLayerContent (layerNode);  	Layers.Add (layer);  	break;  }  
