Implementation smell,Namespace,Class,File,Method,Description
Long Method,Kiss.Data,DataReaderConvert,C:\repos\sdming_Kiss.Data\src\Kiss.Data\DataReaderConvert.cs,SetValue,The method has 157 lines of code.
Long Method,Kiss.Data.Driver,SqlDriver,C:\repos\sdming_Kiss.Data\src\Kiss.Data\Driver\SqlDriver.cs,NativeTypeToDbType,The method has 163 lines of code.
Complex Method,Kiss.Data,DataReaderConvert,C:\repos\sdming_Kiss.Data\src\Kiss.Data\DataReaderConvert.cs,CreateColumnsMapping,Cyclomatic complexity of the method is 8
Complex Method,Kiss.Data,DataReaderConvert,C:\repos\sdming_Kiss.Data\src\Kiss.Data\DataReaderConvert.cs,SetValue,Cyclomatic complexity of the method is 52
Complex Method,Kiss.Data,FieldReader,C:\repos\sdming_Kiss.Data\src\Kiss.Data\FieldReader.cs,ReadEnum,Cyclomatic complexity of the method is 9
Complex Method,Kiss.Data,FieldReader,C:\repos\sdming_Kiss.Data\src\Kiss.Data\FieldReader.cs,ReadValue,Cyclomatic complexity of the method is 19
Complex Method,Kiss.Data,FieldReader,C:\repos\sdming_Kiss.Data\src\Kiss.Data\FieldReader.cs,ReadBoolean,Cyclomatic complexity of the method is 58
Complex Method,Kiss.Data,FieldReader,C:\repos\sdming_Kiss.Data\src\Kiss.Data\FieldReader.cs,ReadChar,Cyclomatic complexity of the method is 58
Complex Method,Kiss.Data,FieldReader,C:\repos\sdming_Kiss.Data\src\Kiss.Data\FieldReader.cs,ReadSByte,Cyclomatic complexity of the method is 58
Complex Method,Kiss.Data,FieldReader,C:\repos\sdming_Kiss.Data\src\Kiss.Data\FieldReader.cs,ReadByte,Cyclomatic complexity of the method is 58
Complex Method,Kiss.Data,FieldReader,C:\repos\sdming_Kiss.Data\src\Kiss.Data\FieldReader.cs,ReadInt16,Cyclomatic complexity of the method is 58
Complex Method,Kiss.Data,FieldReader,C:\repos\sdming_Kiss.Data\src\Kiss.Data\FieldReader.cs,ReadUInt16,Cyclomatic complexity of the method is 58
Complex Method,Kiss.Data,FieldReader,C:\repos\sdming_Kiss.Data\src\Kiss.Data\FieldReader.cs,ReadInt32,Cyclomatic complexity of the method is 58
Complex Method,Kiss.Data,FieldReader,C:\repos\sdming_Kiss.Data\src\Kiss.Data\FieldReader.cs,ReadUInt32,Cyclomatic complexity of the method is 58
Complex Method,Kiss.Data,FieldReader,C:\repos\sdming_Kiss.Data\src\Kiss.Data\FieldReader.cs,ReadInt64,Cyclomatic complexity of the method is 58
Complex Method,Kiss.Data,FieldReader,C:\repos\sdming_Kiss.Data\src\Kiss.Data\FieldReader.cs,ReadUInt64,Cyclomatic complexity of the method is 58
Complex Method,Kiss.Data,FieldReader,C:\repos\sdming_Kiss.Data\src\Kiss.Data\FieldReader.cs,ReadSingle,Cyclomatic complexity of the method is 58
Complex Method,Kiss.Data,FieldReader,C:\repos\sdming_Kiss.Data\src\Kiss.Data\FieldReader.cs,ReadDouble,Cyclomatic complexity of the method is 58
Complex Method,Kiss.Data,FieldReader,C:\repos\sdming_Kiss.Data\src\Kiss.Data\FieldReader.cs,ReadDecimal,Cyclomatic complexity of the method is 58
Complex Method,Kiss.Data,FieldReader,C:\repos\sdming_Kiss.Data\src\Kiss.Data\FieldReader.cs,ReadDateTime,Cyclomatic complexity of the method is 58
Complex Method,Kiss.Data,FieldReader,C:\repos\sdming_Kiss.Data\src\Kiss.Data\FieldReader.cs,ReadString,Cyclomatic complexity of the method is 58
Complex Method,Kiss.Data,FunctionProxy,C:\repos\sdming_Kiss.Data\src\Kiss.Data\FunctionProxy.cs,Invoke,Cyclomatic complexity of the method is 13
Complex Method,Kiss.Data,TableGate,C:\repos\sdming_Kiss.Data\src\Kiss.Data\TableGate.cs,Update,Cyclomatic complexity of the method is 8
Complex Method,Kiss.Data,TableGate,C:\repos\sdming_Kiss.Data\src\Kiss.Data\TableGate.cs,Insert,Cyclomatic complexity of the method is 11
Complex Method,Kiss.Data,DataConvert,C:\repos\sdming_Kiss.Data\src\Kiss.Data\DataConvert.cs,ToBoolean,Cyclomatic complexity of the method is 18
Complex Method,Kiss.Data,DataConvert,C:\repos\sdming_Kiss.Data\src\Kiss.Data\DataConvert.cs,ToListSystemType,Cyclomatic complexity of the method is 18
Complex Method,Kiss.Data,DataConvert,C:\repos\sdming_Kiss.Data\src\Kiss.Data\DataConvert.cs,ToListImpl,Cyclomatic complexity of the method is 8
Complex Method,Kiss.Data,DbContent,C:\repos\sdming_Kiss.Data\src\Kiss.Data\DbContent_Command.cs,BuildProcedure,Cyclomatic complexity of the method is 10
Complex Method,Kiss.Data,DbTypeEntension,C:\repos\sdming_Kiss.Data\src\Kiss.Data\DbTypeEntension.cs,HasPrecisionAndScale,Cyclomatic complexity of the method is 8
Complex Method,Kiss.Data,DbTypeEntension,C:\repos\sdming_Kiss.Data\src\Kiss.Data\DbTypeEntension.cs,GetDbType,Cyclomatic complexity of the method is 28
Complex Method,Kiss.Data,TextTemplate,C:\repos\sdming_Kiss.Data\src\Kiss.Data\TextTemplate.cs,Compile,Cyclomatic complexity of the method is 27
Complex Method,Kiss.Data.Core,AppSettingConfigFactory,C:\repos\sdming_Kiss.Data\src\Kiss.Data\Core\AppSettingConfigFactory.cs,Create,Cyclomatic complexity of the method is 9
Complex Method,Kiss.Core.Reflection,ILBuilder,C:\repos\sdming_Kiss.Data\src\Kiss.Data\Core\Reflection\ILBuilder.cs,Ldarg,Cyclomatic complexity of the method is 9
Complex Method,Kiss.Core.Reflection,ILBuilder,C:\repos\sdming_Kiss.Data\src\Kiss.Data\Core\Reflection\ILBuilder.cs,Ldc,Cyclomatic complexity of the method is 21
Complex Method,Kiss.Core.Reflection,ILBuilder,C:\repos\sdming_Kiss.Data\src\Kiss.Data\Core\Reflection\ILBuilder.cs,Ldc,Cyclomatic complexity of the method is 26
Complex Method,Kiss.Core.Reflection,TypeSystem,C:\repos\sdming_Kiss.Data\src\Kiss.Data\Core\TypeSystem.cs,IsSimpleType,Cyclomatic complexity of the method is 19
Complex Method,Kiss.Core.Reflection,TypeSystem,C:\repos\sdming_Kiss.Data\src\Kiss.Data\Core\TypeSystem.cs,IsArithmetic,Cyclomatic complexity of the method is 12
Complex Method,Kiss.Core.Reflection,TypeSystem,C:\repos\sdming_Kiss.Data\src\Kiss.Data\Core\TypeSystem.cs,IsInteger,Cyclomatic complexity of the method is 9
Complex Method,Kiss.Core.Reflection,TypeSystem,C:\repos\sdming_Kiss.Data\src\Kiss.Data\Core\TypeSystem.cs,IsNumeric,Cyclomatic complexity of the method is 12
Complex Method,Kiss.Data.Entity,ActiveEntity,C:\repos\sdming_Kiss.Data\src\Kiss.Data\Entity\Entity.cs,ActiveEntity,Cyclomatic complexity of the method is 11
Complex Method,Kiss.Data.Entity,LambdaVisitor,C:\repos\sdming_Kiss.Data\src\Kiss.Data\Entity\LambdaVisitor.cs,Visit,Cyclomatic complexity of the method is 18
Complex Method,Kiss.Data.Entity,LambdaVisitor,C:\repos\sdming_Kiss.Data\src\Kiss.Data\Entity\LambdaVisitor.cs,VisitAndOr,Cyclomatic complexity of the method is 8
Complex Method,Kiss.Data.Entity,LambdaVisitor,C:\repos\sdming_Kiss.Data\src\Kiss.Data\Entity\LambdaVisitor.cs,VisitOperate,Cyclomatic complexity of the method is 20
Complex Method,Kiss.Data.Entity,LambdaVisitor,C:\repos\sdming_Kiss.Data\src\Kiss.Data\Entity\LambdaVisitor.cs,GetMethodCall,Cyclomatic complexity of the method is 10
Complex Method,Kiss.Data.Driver,SqlSchema,C:\repos\sdming_Kiss.Data\src\Kiss.Data\Driver\SqlSchema.cs,GetProcedureBySchema,Cyclomatic complexity of the method is 18
Complex Method,Kiss.Data.Driver,SqlSchema,C:\repos\sdming_Kiss.Data\src\Kiss.Data\Driver\SqlSchema.cs,GetTable,Cyclomatic complexity of the method is 12
Complex Method,Kiss.Data.Driver,MsSqlCompiler,C:\repos\sdming_Kiss.Data\src\Kiss.Data\Driver\MsSqlCompiler.cs,VisitQuery,Cyclomatic complexity of the method is 9
Complex Method,Kiss.Data.Driver,OracleDriver,C:\repos\sdming_Kiss.Data\src\Kiss.Data\Driver\OracleDriver.cs,SetParameterType,Cyclomatic complexity of the method is 9
Complex Method,Kiss.Data.Driver,OracleManagedDriver,C:\repos\sdming_Kiss.Data\src\Kiss.Data\Driver\OracleManagedDriver.cs,SetParameterType,Cyclomatic complexity of the method is 9
Complex Method,Kiss.Data.Driver,SqlCompiler,C:\repos\sdming_Kiss.Data\src\Kiss.Data\Driver\SqlCompiler.cs,Compile,Cyclomatic complexity of the method is 18
Complex Method,Kiss.Data.Driver,SqlCompiler,C:\repos\sdming_Kiss.Data\src\Kiss.Data\Driver\SqlCompiler.cs,VisitExp,Cyclomatic complexity of the method is 67
Complex Method,Kiss.Data.Driver,SqlCompiler,C:\repos\sdming_Kiss.Data\src\Kiss.Data\Driver\SqlCompiler.cs,VisitConditionList,Cyclomatic complexity of the method is 8
Complex Method,Kiss.Data.Driver,SqlDriver,C:\repos\sdming_Kiss.Data\src\Kiss.Data\Driver\SqlDriver.cs,SetParameterValue,Cyclomatic complexity of the method is 17
Complex Method,Kiss.Data.Driver,SqlDriver,C:\repos\sdming_Kiss.Data\src\Kiss.Data\Driver\SqlDriver.cs,NativeTypeToDbType,Cyclomatic complexity of the method is 124
Complex Method,Kiss.Data.Driver,OracleCompiler,C:\repos\sdming_Kiss.Data\src\Kiss.Data\Driver\OracleCompiler.cs,VisitQuery,Cyclomatic complexity of the method is 8
Complex Method,Kiss.Data.Driver,OracleCompiler,C:\repos\sdming_Kiss.Data\src\Kiss.Data\Driver\OracleCompiler.cs,VisitInsert,Cyclomatic complexity of the method is 9
Complex Method,Kiss.Data.Driver,PostgresSchema,C:\repos\sdming_Kiss.Data\src\Kiss.Data\Driver\PostgresSchema.cs,GetProcedure,Cyclomatic complexity of the method is 20
Complex Method,Kiss.Data.Driver,SqlDriverFactory,C:\repos\sdming_Kiss.Data\src\Kiss.Data\Driver\SqlDriverFactory.cs,Get,Cyclomatic complexity of the method is 8
Complex Method,Kiss.Data.Expression,ConditionList,C:\repos\sdming_Kiss.Data\src\Kiss.Data\Expression\ConditionList.cs,Dump,Cyclomatic complexity of the method is 8
Complex Method,Kiss.Data.XForce,BuckInsert,C:\repos\sdming_Kiss.Data\src\Kiss.Data\XForce\BuckInsert.cs,WriteToDb,Cyclomatic complexity of the method is 8
Complex Method,Kiss.Data.XForce,SmartQuery,C:\repos\sdming_Kiss.Data\src\Kiss.Data\XForce\SmartQuery.cs,ToWhere,Cyclomatic complexity of the method is 35
Long Parameter List,Kiss.Data,TableGate,C:\repos\sdming_Kiss.Data\src\Kiss.Data\TableGate.cs,Exists,The method has 6 parameters.
Long Parameter List,Kiss.Data,TableGate,C:\repos\sdming_Kiss.Data\src\Kiss.Data\TableGate.cs,Delete,The method has 6 parameters.
Long Parameter List,Kiss.Data,TableGate,C:\repos\sdming_Kiss.Data\src\Kiss.Data\TableGate.cs,ReadCell,The method has 5 parameters.
Long Parameter List,Kiss.Data,TableGate,C:\repos\sdming_Kiss.Data\src\Kiss.Data\TableGate.cs,ReadColumn,The method has 5 parameters.
Long Parameter List,Kiss.Data,TableGate,C:\repos\sdming_Kiss.Data\src\Kiss.Data\TableGate.cs,ReadColumn,The method has 6 parameters.
Long Parameter List,Kiss.Data,TableGate,C:\repos\sdming_Kiss.Data\src\Kiss.Data\TableGate.cs,ReadColumn,The method has 8 parameters.
Long Parameter List,Kiss.Data,TableGate,C:\repos\sdming_Kiss.Data\src\Kiss.Data\TableGate.cs,ReadColumn,The method has 6 parameters.
Long Parameter List,Kiss.Data,TableGate,C:\repos\sdming_Kiss.Data\src\Kiss.Data\TableGate.cs,ReadCount,The method has 6 parameters.
Long Parameter List,Kiss.Data,TableGate,C:\repos\sdming_Kiss.Data\src\Kiss.Data\TableGate.cs,Read,The method has 6 parameters.
Long Parameter List,Kiss.Data,TableGate,C:\repos\sdming_Kiss.Data\src\Kiss.Data\TableGate.cs,Update,The method has 5 parameters.
Long Parameter List,Kiss.Data,TableGate,C:\repos\sdming_Kiss.Data\src\Kiss.Data\TableGate.cs,Update,The method has 7 parameters.
Long Parameter List,Kiss.Data,TableGate,C:\repos\sdming_Kiss.Data\src\Kiss.Data\TableGate.cs,Update,The method has 5 parameters.
Long Parameter List,Kiss.Data,TableGate,C:\repos\sdming_Kiss.Data\src\Kiss.Data\TableGate.cs,Update,The method has 5 parameters.
Long Parameter List,Kiss.Data,TableGate,C:\repos\sdming_Kiss.Data\src\Kiss.Data\TableGate.cs,Insert,The method has 5 parameters.
Long Parameter List,Kiss.Data,TableGate,C:\repos\sdming_Kiss.Data\src\Kiss.Data\TableGate.cs,BuildWhere,The method has 6 parameters.
Long Parameter List,Kiss.Core.Reflection,TypeSystem,C:\repos\sdming_Kiss.Data\src\Kiss.Data\Core\TypeSystem.cs,FindMethod,The method has 5 parameters.
Long Parameter List,Kiss.Data.Entity,ActiveEntity,C:\repos\sdming_Kiss.Data\src\Kiss.Data\Entity\Entity.cs,UpdateByFields,The method has 5 parameters.
Long Parameter List,Kiss.Data.Entity,ActiveEntity,C:\repos\sdming_Kiss.Data\src\Kiss.Data\Entity\Entity.cs,InnerUpdateByFields,The method has 6 parameters.
Long Parameter List,Kiss.Data.Entity,ActiveEntity,C:\repos\sdming_Kiss.Data\src\Kiss.Data\Entity\Entity.cs,UpdateFieldsByKey,The method has 5 parameters.
Long Parameter List,Kiss.Data.Entity,ActiveEntity,C:\repos\sdming_Kiss.Data\src\Kiss.Data\Entity\Entity.cs,UpdateFields,The method has 5 parameters.
Long Parameter List,Kiss.Data.Entity,ActiveEntity,C:\repos\sdming_Kiss.Data\src\Kiss.Data\Entity\Entity.cs,InnerDeleteByFields,The method has 5 parameters.
Long Parameter List,Kiss.Data.Entity,ActiveEntity,C:\repos\sdming_Kiss.Data\src\Kiss.Data\Entity\Entity.cs,InnerQueryByFields,The method has 5 parameters.
Long Parameter List,Kiss.Data.Entity,Repository,C:\repos\sdming_Kiss.Data\src\Kiss.Data\Entity\Repository.cs,UpdateByFields,The method has 5 parameters.
Long Parameter List,Kiss.Data.Entity,Repository,C:\repos\sdming_Kiss.Data\src\Kiss.Data\Entity\Repository.cs,InnerUpdateByFields,The method has 6 parameters.
Long Parameter List,Kiss.Data.Entity,Repository,C:\repos\sdming_Kiss.Data\src\Kiss.Data\Entity\Repository.cs,UpdateFieldsByKey,The method has 5 parameters.
Long Parameter List,Kiss.Data.Entity,Repository,C:\repos\sdming_Kiss.Data\src\Kiss.Data\Entity\Repository.cs,UpdateFields,The method has 5 parameters.
Long Parameter List,Kiss.Data.Entity,Repository,C:\repos\sdming_Kiss.Data\src\Kiss.Data\Entity\Repository.cs,InnerDeleteByFields,The method has 5 parameters.
Long Parameter List,Kiss.Data.Entity,Repository,C:\repos\sdming_Kiss.Data\src\Kiss.Data\Entity\Repository.cs,InnerQueryByFields,The method has 5 parameters.
Long Parameter List,Kiss.Data.Driver,SqlDriver,C:\repos\sdming_Kiss.Data\src\Kiss.Data\Driver\SqlDriver.cs,SetParameterType,The method has 5 parameters.
Long Parameter List,Kiss.Data.Driver,SqlDriver,C:\repos\sdming_Kiss.Data\src\Kiss.Data\Driver\SqlDriver.cs,SetParameterProviderType,The method has 5 parameters.
Long Parameter List,Kiss.Data.Expression,Join,C:\repos\sdming_Kiss.Data\src\Kiss.Data\Expression\Join.cs,Join,The method has 5 parameters.
Long Statement,Kiss.Data,DataReaderConvert,C:\repos\sdming_Kiss.Data\src\Kiss.Data\DataReaderConvert.cs,CreateColumnsMapping,The length of the statement  "			column.TargetIsGuid = column.TargetUnderlyingTypeCode == TypeCode.Object && column.TargetUnderlyingType == TypeSystem.TypeGuid; " is 127.
Long Statement,Kiss.Data,DataReaderConvert,C:\repos\sdming_Kiss.Data\src\Kiss.Data\DataReaderConvert.cs,CreateColumnsMapping,The length of the statement  "			column.TargetIsGuid = column.TargetUnderlyingTypeCode == TypeCode.Object && column.TargetUnderlyingType == TypeSystem.TypeGuid; " is 127.
Long Statement,Kiss.Data,DataReaderConvert,C:\repos\sdming_Kiss.Data\src\Kiss.Data\DataReaderConvert.cs,CreateAnonymous,The length of the statement  "	//http://stackoverflow.com/questions/478013/how-do-i-create-and-access-a-new-instance-of-an-anonymous-class-passed-as-a-param " is 125.
Long Statement,Kiss.Data,DataReaderConvert,C:\repos\sdming_Kiss.Data\src\Kiss.Data\DataReaderConvert.cs,SetValue,The length of the statement  "		member.SetValue (instance' DataConvert.ChangeTypeTo (reader.ReadValue (ordinal' column.TargetUnderlyingTypeCode)' member.MemberType)); " is 134.
Long Statement,Kiss.Data,TableGate,C:\repos\sdming_Kiss.Data\src\Kiss.Data\TableGate.cs,ReadCell,The length of the statement  "	exp.Where = BuildWhere (whereColumn1' SqlOperator.EqualsTo' whereValue1' whereColumn2' SqlOperator.EqualsTo' whereValue2); " is 122.
Long Statement,Kiss.Data,TableGate,C:\repos\sdming_Kiss.Data\src\Kiss.Data\TableGate.cs,ReadColumn,The length of the statement  "	return ReadColumn<T> (column' distinct' whereColumn1' SqlOperator.EqualsTo' whereValue1' whereColumn2' SqlOperator.EqualsTo' whereValue2); " is 138.
Long Statement,Kiss.Data,TableGate,C:\repos\sdming_Kiss.Data\src\Kiss.Data\TableGate.cs,Update,The length of the statement  "	Where where = BuildWhere (whereColumn1' SqlOperator.EqualsTo' whereValue1' whereColumn2' SqlOperator.EqualsTo' whereValue2); " is 124.
Long Statement,Kiss.Data,DbContent,C:\repos\sdming_Kiss.Data\src\Kiss.Data\DbContent_Command.cs,BuildProcedure,The length of the statement  "			else if (p.Direction == ParameterDirection.InputOutput || p.Direction == ParameterDirection.Output || p.Direction == ParameterDirection.ReturnValue) { " is 150.
Long Statement,Kiss.Data,DbTypeEntension,C:\repos\sdming_Kiss.Data\src\Kiss.Data\DbTypeEntension.cs,IsInteger,The length of the statement  "	return dbType == DbType.Byte || dbType == DbType.SByte || dbType == DbType.Int16 || dbType == DbType.Int32 || dbType == DbType.Int64 || dbType == DbType.UInt16 || dbType == DbType.UInt32 || dbType == DbType.UInt64 || dbType == DbType.VarNumeric; " is 245.
Long Statement,Kiss.Data,DbTypeEntension,C:\repos\sdming_Kiss.Data\src\Kiss.Data\DbTypeEntension.cs,IsNumeric,The length of the statement  "	return dbType == DbType.Currency || dbType == DbType.Decimal || dbType == DbType.Double || dbType == DbType.Int16 || dbType == DbType.Int32 || dbType == DbType.Int64 || dbType == DbType.Single || dbType == DbType.UInt16 || dbType == DbType.UInt32 || dbType == DbType.UInt64 || dbType == DbType.VarNumeric; " is 305.
Long Statement,Kiss.Data,DbTypeEntension,C:\repos\sdming_Kiss.Data\src\Kiss.Data\DbTypeEntension.cs,IsDateTime,The length of the statement  "	return dbType == DbType.DateTime || dbType == DbType.DateTime2 || dbType == DbType.DateTimeOffset || dbType == DbType.Time || dbType == DbType.Date; " is 148.
Long Statement,Kiss.Data,DbTypeEntension,C:\repos\sdming_Kiss.Data\src\Kiss.Data\DbTypeEntension.cs,IsString,The length of the statement  "	return dbType == DbType.AnsiString || dbType == DbType.AnsiStringFixedLength || dbType == DbType.String || dbType == DbType.StringFixedLength; " is 142.
Long Statement,Kiss.Data,TraceData,C:\repos\sdming_Kiss.Data\src\Kiss.Data\Trace.cs,ToString,The length of the statement  "	return string.Format ("{{Level:{0}'Source:{1}'Message:{2}'Duration:{3}'StackTrace:{4} }}"' Level' Source' Message' Duration' StackTrace); " is 137.
Long Statement,Kiss.Core.Reflection,EmitUtils,C:\repos\sdming_Kiss.Data\src\Kiss.Data\Core\Reflection\EmitUtils.cs,GetMethodBuilder,The length of the statement  "	MethodBuilder methodBuilder = typeBuilder.DefineMethod (method.Name' MethodAttributes.Public | MethodAttributes.Virtual' method.ReturnType' paramType); " is 151.
Long Statement,Kiss.Core.Reflection,EmitUtils,C:\repos\sdming_Kiss.Data\src\Kiss.Data\Core\Reflection\EmitUtils.cs,BuildInterfaceImplementationBuilder,The length of the statement  "	TypeBuilder typeBuilder = moduleBuilder.DefineType (dynamicEmitNamePrefix + targetType.Name' TypeAttributes.Public' parentType' newTypeInterfaces); " is 147.
Long Statement,Kiss.Core.Reflection,EmitUtils,C:\repos\sdming_Kiss.Data\src\Kiss.Data\Core\Reflection\EmitUtils.cs,BuildDefaultConstructorDelegate,The length of the statement  "	il.Emit (OpCodes.Newobj' targetType.GetConstructor (BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic' null' Type.EmptyTypes' null)); " is 152.
Long Statement,Kiss.Core.Reflection,ILBuilder,C:\repos\sdming_Kiss.Data\src\Kiss.Data\Core\Reflection\ILBuilder.cs,Ldc,The length of the statement  "		//throw DiagnosticUtility.ExceptionUtility.ThrowHelperError(new NotSupportedException(SR.GetString("CharIsInvalidPrimitive"))); " is 127.
Long Statement,Kiss.Core.Reflection,TypeSystem,C:\repos\sdming_Kiss.Data\src\Kiss.Data\Core\TypeSystem.cs,IsSystemType,The length of the statement  "	return type == typeof(String) || type == typeof(Boolean) || type == typeof(Boolean?) || type == typeof(Char) || type == typeof(Char?) || type == typeof(SByte) || type == typeof(SByte?) || type == typeof(Byte) || type == typeof(Byte?) || type == typeof(Int16) || type == typeof(Int16?) || type == typeof(UInt16) || type == typeof(UInt16?) || type == typeof(Int32) || type == typeof(Int32?) || type == typeof(UInt32) || type == typeof(UInt32?) || type == typeof(Int64) || type == typeof(Int64?) || type == typeof(UInt64) || type == typeof(UInt64?) || type == typeof(Single) || type == typeof(Single?) || type == typeof(Double) || type == typeof(Double?) || type == typeof(Double) || type == typeof(Double?) || type == typeof(Decimal) || type == typeof(Decimal?) || type == typeof(DateTime) || type == typeof(DateTime?) || type == typeof(Guid) || type == typeof(Guid?); " is 866.
Long Statement,Kiss.Core.Reflection,TypeSystem,C:\repos\sdming_Kiss.Data\src\Kiss.Data\Core\TypeSystem.cs,IsSequenceType,The length of the statement  "	return ((((seqType != typeof(string)) && (seqType != typeof(byte[]))) && (seqType != typeof(char[]))) && (FindIEnumerable (seqType) != null)); " is 142.
Long Statement,Kiss.Data.Core.Reflection,ExpressionFunc,C:\repos\sdming_Kiss.Data\src\Kiss.Data\Core\Reflection\ExpressionFunc.cs,BuildPropertyGetFunc,The length of the statement  "	System.Linq.Expressions.Expression source = propertyInfo.GetGetMethod (true).IsStatic ? null : CastOrConvertExpression (sourceParamter' propertyInfo.ReflectedType); " is 164.
Long Statement,Kiss.Data.Core.Reflection,ExpressionFunc,C:\repos\sdming_Kiss.Data\src\Kiss.Data\Core\Reflection\ExpressionFunc.cs,BuildPropertySetFunc,The length of the statement  "	System.Linq.Expressions.Expression source = propertyInfo.GetGetMethod (true).IsStatic ? null : CastOrConvertExpression (sourceParameter' propertyInfo.DeclaringType); " is 165.
Long Statement,Kiss.Data.Core.Reflection,ExpressionFunc,C:\repos\sdming_Kiss.Data\src\Kiss.Data\Core\Reflection\ExpressionFunc.cs,BuildPropertySetFunc,The length of the statement  "	return System.Linq.Expressions.Expression.Lambda<Action<T' object>> (assign' sourceParameter' valueParameter).Compile (); " is 121.
Long Statement,Kiss.Data.Core.Reflection,ExpressionFunc,C:\repos\sdming_Kiss.Data\src\Kiss.Data\Core\Reflection\ExpressionFunc.cs,BuildFieldGetFunc,The length of the statement  "	System.Linq.Expressions.Expression source = fieldInfo.IsStatic ? null : CastOrConvertExpression (sourceParamter' fieldInfo.DeclaringType); " is 138.
Long Statement,Kiss.Data.Core.Reflection,ExpressionFunc,C:\repos\sdming_Kiss.Data\src\Kiss.Data\Core\Reflection\ExpressionFunc.cs,BuildFieldSetFunc,The length of the statement  "	System.Linq.Expressions.Expression source = fieldInfo.IsStatic ? null : CastOrConvertExpression (sourceParameter' fieldInfo.DeclaringType); " is 139.
Long Statement,Kiss.Data.Core.Reflection,ExpressionFunc,C:\repos\sdming_Kiss.Data\src\Kiss.Data\Core\Reflection\ExpressionFunc.cs,BuildFieldSetFunc,The length of the statement  "	return System.Linq.Expressions.Expression.Lambda<Action<T' object>> (assign' sourceParameter' valueParameter).Compile (); " is 121.
Long Statement,Kiss.Data.Entity,ActiveEntity,C:\repos\sdming_Kiss.Data\src\Kiss.Data\Entity\Entity.cs,InnerUpdateByFields,The length of the statement  "	ExecuteTable (x => i = x.Update (Kiss.Core.Adapter.Object (data)' where' MapColumnToFieldFunc ()' null' notUpdateAbleFields)); " is 126.
Long Statement,Kiss.Data.Entity,ActiveEntity,C:\repos\sdming_Kiss.Data\src\Kiss.Data\Entity\Entity.cs,Add,The length of the statement  "	ExecuteTable (x => i = x.Insert (Kiss.Core.Adapter.Object (data)' MapColumnToFieldFunc ()' null' notInsertAbleFields' output)); " is 127.
Long Statement,Kiss.Data.Entity,Repository,C:\repos\sdming_Kiss.Data\src\Kiss.Data\Entity\Repository.cs,InnerUpdateByFields,The length of the statement  "	ExecuteTable (x => i = x.Update (Kiss.Core.Adapter.Object (data)' where' MapColumnToFieldFunc ()' null' notUpdateAbleFields)); " is 126.
Long Statement,Kiss.Data.Entity,Repository,C:\repos\sdming_Kiss.Data\src\Kiss.Data\Entity\Repository.cs,Add,The length of the statement  "	ExecuteTable (x => i = x.Insert (Kiss.Core.Adapter.Object (data)' MapColumnToFieldFunc ()' null' notInsertAbleFields' output)); " is 127.
Long Statement,Kiss.Data.Driver,SqlSchema,C:\repos\sdming_Kiss.Data\src\Kiss.Data\Driver\SqlSchema.cs,GetProcedureBySchema,The length of the statement  "		if (row ["CHARACTER_MAXIMUM_LENGTH"] != DBNull.Value && !string.IsNullOrEmpty (row ["CHARACTER_MAXIMUM_LENGTH"].ToString ())) { " is 127.
Long Statement,Kiss.Data.Driver,MsSqlCompiler,C:\repos\sdming_Kiss.Data\src\Kiss.Data\Driver\MsSqlCompiler.cs,VisitQuery,The length of the statement  "	Writer.Write (string.Format ("\r\n) [_kiss_page] WHERE [_kiss_rownumber] > {0} AND  [_kiss_rownumber] <= {1} "' query.Offset' query.Offset + query.Count)); " is 155.
Long Statement,Kiss.Data.Driver,OracleCompiler,C:\repos\sdming_Kiss.Data\src\Kiss.Data\Driver\OracleCompiler.cs,VisitQuery,The length of the statement  "		Writer.Write (" \r\n) kiss_row_ where rownum <=" + query.Count.ToString () + ") where kiss_rownum_ >" + query.Offset.ToString ()); " is 130.
Long Statement,Kiss.Data.Driver,PostgresSchema,C:\repos\sdming_Kiss.Data\src\Kiss.Data\Driver\PostgresSchema.cs,GetProcedure,The length of the statement  "        p.parameter_name' p.ordinal_position' p.parameter_mode' p.udt_name as data_type' p.character_maximum_length' p.numeric_precision' p.numeric_scale " is 145.
Long Statement,Kiss.Data.Driver,PostgresSchema,C:\repos\sdming_Kiss.Data\src\Kiss.Data\Driver\PostgresSchema.cs,GetProcedure,The length of the statement  "			if (reader ["CHARACTER_MAXIMUM_LENGTH"] != DBNull.Value && !string.IsNullOrEmpty (reader ["CHARACTER_MAXIMUM_LENGTH"].ToString ())) { " is 133.
Long Statement,Kiss.Data.Driver,SqlDriverFactory,C:\repos\sdming_Kiss.Data\src\Kiss.Data\Driver\SqlDriverFactory.cs,Get,The length of the statement  "	else if (string.Equals (providerName' DbDriverInvariantName.OracleManaged' StringComparison.InvariantCultureIgnoreCase)) { " is 122.
Long Statement,Kiss.Data.Expression,Query,C:\repos\sdming_Kiss.Data\src\Kiss.Data\Expression\Query.cs,ToString,The length of the statement  "	return string.Format ("SELECT {0} {1} \r\nFROM {2} \r\n{3} \r\n{4} \r\n{5} \r\n{6} \r\nLIMIT {7}' {8} "' distinct' Select' Table' Where' GroupBy' Having' OrderBy' Offset' Count); " is 178.
Long Statement,Kiss.Data.Expression,Table,C:\repos\sdming_Kiss.Data\src\Kiss.Data\Expression\Table.cs,Is,The length of the statement  "	if (string.Equals (this.Alias' name' StringComparison.OrdinalIgnoreCase) || string.Equals (this.Name' name' StringComparison.OrdinalIgnoreCase)) { " is 146.
Long Statement,Kiss.Data.Expression,Update,C:\repos\sdming_Kiss.Data\src\Kiss.Data\Expression\Update.cs,ToString,The length of the statement  "	return string.Format ("UPDATE {0} SET {1} \r\n{2} \r\n{3} \r\nLIMIT {4}"' Table' Utils.PrintList (Sets)' Where' OrderBy' Count); " is 128.
Long Statement,Kiss.Data.Schema,SqlColumn,C:\repos\sdming_Kiss.Data\src\Kiss.Data\Schema\SqlColumn.cs,ToString,The length of the statement  "	return string.Format (@"{{""Name"":""{0}""'""Ordinal"":{1}'""IsReadOnly"":""{2}""'""IsAutoIncrement"":""{3}""'""IsKey"":""{4}""'""AllowDBNull"":""{5}""'""DataTypeName"":""{6}""'""ProviderDbType"":""{7}""'""DbType"":""{8}""'""Precision"":""{9}""'""Scale"":""{10}""'""Size"":""{11}"" }}"' Name' Ordinal' IsReadOnly' IsAutoIncrement' IsKey' AllowDBNull' DataTypeName' ProviderDbType' DbType' Precision' Scale' Size); " is 413.
Long Statement,Kiss.Data.Schema,SqlParameter,C:\repos\sdming_Kiss.Data\src\Kiss.Data\Schema\SqlParameter.cs,ToString,The length of the statement  "	return string.Format (@"{{""Name"":""{0}""'""Ordinal"":{1}'""Direction"":""{2}""'""AllowDBNull"":""{3}""'""DataTypeName"":""{4}""'""ProviderDbType"":""{5}""'""DbType"":""{6}""'""Precision"":""{7}""'""Scale"":""{8}""'""Size"":""{9}"" }}"' Name' Ordinal' Direction' AllowDBNull' DataTypeName' ProviderDbType' DbType' Precision' Scale' Size); " is 339.
Virtual Method Call from Constructor,Kiss.Data.XForce,BuckInsert,C:\repos\sdming_Kiss.Data\src\Kiss.Data\XForce\BuckInsert.cs,BuckInsert,The constructor "BuckInsert" calls a virtual method "BuildDataSchema".
Empty Catch Block,Kiss.Data.Core,AppSettingConfigFactory,C:\repos\sdming_Kiss.Data\src\Kiss.Data\Core\AppSettingConfigFactory.cs,Create,The method has an empty catch block.
Empty Catch Block,Kiss.Data.Core,AppSettingConfigFactory,C:\repos\sdming_Kiss.Data\src\Kiss.Data\Core\AppSettingConfigFactory.cs,Create,The method has an empty catch block.
Empty Catch Block,Kiss.Data.XForce,BuckInsert,C:\repos\sdming_Kiss.Data\src\Kiss.Data\XForce\BuckInsert.cs,Dispose,The method has an empty catch block.
Magic Number,Kiss.Data,TextTemplate,C:\repos\sdming_Kiss.Data\src\Kiss.Data\TextTemplate.cs,Compile,The following statement contains a magic number: if (start < 0) {  	text.Text = sql;  }  else {  	text.Text = sql.Substring (0' start);  	while (start >= 0) {  		int end = sql.IndexOf ("}}"' start);  		if (end <= start) {  			throw new Exception ("invalid text template");  		}  		string match = sql.Substring (start + 2' end - start - 2).Trim ();  		if (string.IsNullOrEmpty (match)) {  			throw new Exception ("invalid text template");  		}  		var attributes = match.Split (attributeSplit' StringSplitOptions.RemoveEmptyEntries);  		if (attributes.Length <= 0) {  			throw new Exception ("invalid text template");  		}  		TextParameter p = new TextParameter ();  		p.Name = attributes [0].Trim ();  		p.Direction = ParameterDirection.Input;  		string dataType = null;  		int index = 1;  		if (attributes.Length > index) {  			switch (attributes [index].Trim ().ToLowerInvariant ()) {  			case "in":  				p.Direction = ParameterDirection.Input;  				index++;  				break;  			case "out":  				p.Direction = ParameterDirection.Output;  				index++;  				break;  			case "inout":  				p.Direction = ParameterDirection.InputOutput;  				index++;  				break;  			default:  				dataType = attributes [index];  				break;  			}  		}  		if (string.IsNullOrEmpty (dataType) && attributes.Length > index) {  			dataType = attributes [index];  		}  		if (!string.IsNullOrEmpty (dataType)) {  			DbType t;  			if (Enum.TryParse<DbType> (dataType' true' out t)) {  				p.DbType = t;  			}  			else {  				p.ProviderDbType = dataType;  			}  		}  		text.Parameters.Add (p);  		text.Text = string.Concat (text.Text' "{{"' p.Name' "}}");  		start = sql.IndexOf ("{{"' end);  		if (start > end) {  			text.Text = string.Concat (text.Text' sql.Substring (end + 2' start - end - 2));  		}  		else if (start < 0 && end < sql.Length - 2) {  			text.Text = string.Concat (text.Text' sql.Substring (end + 2));  			break;  		}  	}  }  
Magic Number,Kiss.Data,TextTemplate,C:\repos\sdming_Kiss.Data\src\Kiss.Data\TextTemplate.cs,Compile,The following statement contains a magic number: if (start < 0) {  	text.Text = sql;  }  else {  	text.Text = sql.Substring (0' start);  	while (start >= 0) {  		int end = sql.IndexOf ("}}"' start);  		if (end <= start) {  			throw new Exception ("invalid text template");  		}  		string match = sql.Substring (start + 2' end - start - 2).Trim ();  		if (string.IsNullOrEmpty (match)) {  			throw new Exception ("invalid text template");  		}  		var attributes = match.Split (attributeSplit' StringSplitOptions.RemoveEmptyEntries);  		if (attributes.Length <= 0) {  			throw new Exception ("invalid text template");  		}  		TextParameter p = new TextParameter ();  		p.Name = attributes [0].Trim ();  		p.Direction = ParameterDirection.Input;  		string dataType = null;  		int index = 1;  		if (attributes.Length > index) {  			switch (attributes [index].Trim ().ToLowerInvariant ()) {  			case "in":  				p.Direction = ParameterDirection.Input;  				index++;  				break;  			case "out":  				p.Direction = ParameterDirection.Output;  				index++;  				break;  			case "inout":  				p.Direction = ParameterDirection.InputOutput;  				index++;  				break;  			default:  				dataType = attributes [index];  				break;  			}  		}  		if (string.IsNullOrEmpty (dataType) && attributes.Length > index) {  			dataType = attributes [index];  		}  		if (!string.IsNullOrEmpty (dataType)) {  			DbType t;  			if (Enum.TryParse<DbType> (dataType' true' out t)) {  				p.DbType = t;  			}  			else {  				p.ProviderDbType = dataType;  			}  		}  		text.Parameters.Add (p);  		text.Text = string.Concat (text.Text' "{{"' p.Name' "}}");  		start = sql.IndexOf ("{{"' end);  		if (start > end) {  			text.Text = string.Concat (text.Text' sql.Substring (end + 2' start - end - 2));  		}  		else if (start < 0 && end < sql.Length - 2) {  			text.Text = string.Concat (text.Text' sql.Substring (end + 2));  			break;  		}  	}  }  
Magic Number,Kiss.Data,TextTemplate,C:\repos\sdming_Kiss.Data\src\Kiss.Data\TextTemplate.cs,Compile,The following statement contains a magic number: if (start < 0) {  	text.Text = sql;  }  else {  	text.Text = sql.Substring (0' start);  	while (start >= 0) {  		int end = sql.IndexOf ("}}"' start);  		if (end <= start) {  			throw new Exception ("invalid text template");  		}  		string match = sql.Substring (start + 2' end - start - 2).Trim ();  		if (string.IsNullOrEmpty (match)) {  			throw new Exception ("invalid text template");  		}  		var attributes = match.Split (attributeSplit' StringSplitOptions.RemoveEmptyEntries);  		if (attributes.Length <= 0) {  			throw new Exception ("invalid text template");  		}  		TextParameter p = new TextParameter ();  		p.Name = attributes [0].Trim ();  		p.Direction = ParameterDirection.Input;  		string dataType = null;  		int index = 1;  		if (attributes.Length > index) {  			switch (attributes [index].Trim ().ToLowerInvariant ()) {  			case "in":  				p.Direction = ParameterDirection.Input;  				index++;  				break;  			case "out":  				p.Direction = ParameterDirection.Output;  				index++;  				break;  			case "inout":  				p.Direction = ParameterDirection.InputOutput;  				index++;  				break;  			default:  				dataType = attributes [index];  				break;  			}  		}  		if (string.IsNullOrEmpty (dataType) && attributes.Length > index) {  			dataType = attributes [index];  		}  		if (!string.IsNullOrEmpty (dataType)) {  			DbType t;  			if (Enum.TryParse<DbType> (dataType' true' out t)) {  				p.DbType = t;  			}  			else {  				p.ProviderDbType = dataType;  			}  		}  		text.Parameters.Add (p);  		text.Text = string.Concat (text.Text' "{{"' p.Name' "}}");  		start = sql.IndexOf ("{{"' end);  		if (start > end) {  			text.Text = string.Concat (text.Text' sql.Substring (end + 2' start - end - 2));  		}  		else if (start < 0 && end < sql.Length - 2) {  			text.Text = string.Concat (text.Text' sql.Substring (end + 2));  			break;  		}  	}  }  
Magic Number,Kiss.Data,TextTemplate,C:\repos\sdming_Kiss.Data\src\Kiss.Data\TextTemplate.cs,Compile,The following statement contains a magic number: if (start < 0) {  	text.Text = sql;  }  else {  	text.Text = sql.Substring (0' start);  	while (start >= 0) {  		int end = sql.IndexOf ("}}"' start);  		if (end <= start) {  			throw new Exception ("invalid text template");  		}  		string match = sql.Substring (start + 2' end - start - 2).Trim ();  		if (string.IsNullOrEmpty (match)) {  			throw new Exception ("invalid text template");  		}  		var attributes = match.Split (attributeSplit' StringSplitOptions.RemoveEmptyEntries);  		if (attributes.Length <= 0) {  			throw new Exception ("invalid text template");  		}  		TextParameter p = new TextParameter ();  		p.Name = attributes [0].Trim ();  		p.Direction = ParameterDirection.Input;  		string dataType = null;  		int index = 1;  		if (attributes.Length > index) {  			switch (attributes [index].Trim ().ToLowerInvariant ()) {  			case "in":  				p.Direction = ParameterDirection.Input;  				index++;  				break;  			case "out":  				p.Direction = ParameterDirection.Output;  				index++;  				break;  			case "inout":  				p.Direction = ParameterDirection.InputOutput;  				index++;  				break;  			default:  				dataType = attributes [index];  				break;  			}  		}  		if (string.IsNullOrEmpty (dataType) && attributes.Length > index) {  			dataType = attributes [index];  		}  		if (!string.IsNullOrEmpty (dataType)) {  			DbType t;  			if (Enum.TryParse<DbType> (dataType' true' out t)) {  				p.DbType = t;  			}  			else {  				p.ProviderDbType = dataType;  			}  		}  		text.Parameters.Add (p);  		text.Text = string.Concat (text.Text' "{{"' p.Name' "}}");  		start = sql.IndexOf ("{{"' end);  		if (start > end) {  			text.Text = string.Concat (text.Text' sql.Substring (end + 2' start - end - 2));  		}  		else if (start < 0 && end < sql.Length - 2) {  			text.Text = string.Concat (text.Text' sql.Substring (end + 2));  			break;  		}  	}  }  
Magic Number,Kiss.Data,TextTemplate,C:\repos\sdming_Kiss.Data\src\Kiss.Data\TextTemplate.cs,Compile,The following statement contains a magic number: if (start < 0) {  	text.Text = sql;  }  else {  	text.Text = sql.Substring (0' start);  	while (start >= 0) {  		int end = sql.IndexOf ("}}"' start);  		if (end <= start) {  			throw new Exception ("invalid text template");  		}  		string match = sql.Substring (start + 2' end - start - 2).Trim ();  		if (string.IsNullOrEmpty (match)) {  			throw new Exception ("invalid text template");  		}  		var attributes = match.Split (attributeSplit' StringSplitOptions.RemoveEmptyEntries);  		if (attributes.Length <= 0) {  			throw new Exception ("invalid text template");  		}  		TextParameter p = new TextParameter ();  		p.Name = attributes [0].Trim ();  		p.Direction = ParameterDirection.Input;  		string dataType = null;  		int index = 1;  		if (attributes.Length > index) {  			switch (attributes [index].Trim ().ToLowerInvariant ()) {  			case "in":  				p.Direction = ParameterDirection.Input;  				index++;  				break;  			case "out":  				p.Direction = ParameterDirection.Output;  				index++;  				break;  			case "inout":  				p.Direction = ParameterDirection.InputOutput;  				index++;  				break;  			default:  				dataType = attributes [index];  				break;  			}  		}  		if (string.IsNullOrEmpty (dataType) && attributes.Length > index) {  			dataType = attributes [index];  		}  		if (!string.IsNullOrEmpty (dataType)) {  			DbType t;  			if (Enum.TryParse<DbType> (dataType' true' out t)) {  				p.DbType = t;  			}  			else {  				p.ProviderDbType = dataType;  			}  		}  		text.Parameters.Add (p);  		text.Text = string.Concat (text.Text' "{{"' p.Name' "}}");  		start = sql.IndexOf ("{{"' end);  		if (start > end) {  			text.Text = string.Concat (text.Text' sql.Substring (end + 2' start - end - 2));  		}  		else if (start < 0 && end < sql.Length - 2) {  			text.Text = string.Concat (text.Text' sql.Substring (end + 2));  			break;  		}  	}  }  
Magic Number,Kiss.Data,TextTemplate,C:\repos\sdming_Kiss.Data\src\Kiss.Data\TextTemplate.cs,Compile,The following statement contains a magic number: if (start < 0) {  	text.Text = sql;  }  else {  	text.Text = sql.Substring (0' start);  	while (start >= 0) {  		int end = sql.IndexOf ("}}"' start);  		if (end <= start) {  			throw new Exception ("invalid text template");  		}  		string match = sql.Substring (start + 2' end - start - 2).Trim ();  		if (string.IsNullOrEmpty (match)) {  			throw new Exception ("invalid text template");  		}  		var attributes = match.Split (attributeSplit' StringSplitOptions.RemoveEmptyEntries);  		if (attributes.Length <= 0) {  			throw new Exception ("invalid text template");  		}  		TextParameter p = new TextParameter ();  		p.Name = attributes [0].Trim ();  		p.Direction = ParameterDirection.Input;  		string dataType = null;  		int index = 1;  		if (attributes.Length > index) {  			switch (attributes [index].Trim ().ToLowerInvariant ()) {  			case "in":  				p.Direction = ParameterDirection.Input;  				index++;  				break;  			case "out":  				p.Direction = ParameterDirection.Output;  				index++;  				break;  			case "inout":  				p.Direction = ParameterDirection.InputOutput;  				index++;  				break;  			default:  				dataType = attributes [index];  				break;  			}  		}  		if (string.IsNullOrEmpty (dataType) && attributes.Length > index) {  			dataType = attributes [index];  		}  		if (!string.IsNullOrEmpty (dataType)) {  			DbType t;  			if (Enum.TryParse<DbType> (dataType' true' out t)) {  				p.DbType = t;  			}  			else {  				p.ProviderDbType = dataType;  			}  		}  		text.Parameters.Add (p);  		text.Text = string.Concat (text.Text' "{{"' p.Name' "}}");  		start = sql.IndexOf ("{{"' end);  		if (start > end) {  			text.Text = string.Concat (text.Text' sql.Substring (end + 2' start - end - 2));  		}  		else if (start < 0 && end < sql.Length - 2) {  			text.Text = string.Concat (text.Text' sql.Substring (end + 2));  			break;  		}  	}  }  
Magic Number,Kiss.Data,TextTemplate,C:\repos\sdming_Kiss.Data\src\Kiss.Data\TextTemplate.cs,Compile,The following statement contains a magic number: while (start >= 0) {  	int end = sql.IndexOf ("}}"' start);  	if (end <= start) {  		throw new Exception ("invalid text template");  	}  	string match = sql.Substring (start + 2' end - start - 2).Trim ();  	if (string.IsNullOrEmpty (match)) {  		throw new Exception ("invalid text template");  	}  	var attributes = match.Split (attributeSplit' StringSplitOptions.RemoveEmptyEntries);  	if (attributes.Length <= 0) {  		throw new Exception ("invalid text template");  	}  	TextParameter p = new TextParameter ();  	p.Name = attributes [0].Trim ();  	p.Direction = ParameterDirection.Input;  	string dataType = null;  	int index = 1;  	if (attributes.Length > index) {  		switch (attributes [index].Trim ().ToLowerInvariant ()) {  		case "in":  			p.Direction = ParameterDirection.Input;  			index++;  			break;  		case "out":  			p.Direction = ParameterDirection.Output;  			index++;  			break;  		case "inout":  			p.Direction = ParameterDirection.InputOutput;  			index++;  			break;  		default:  			dataType = attributes [index];  			break;  		}  	}  	if (string.IsNullOrEmpty (dataType) && attributes.Length > index) {  		dataType = attributes [index];  	}  	if (!string.IsNullOrEmpty (dataType)) {  		DbType t;  		if (Enum.TryParse<DbType> (dataType' true' out t)) {  			p.DbType = t;  		}  		else {  			p.ProviderDbType = dataType;  		}  	}  	text.Parameters.Add (p);  	text.Text = string.Concat (text.Text' "{{"' p.Name' "}}");  	start = sql.IndexOf ("{{"' end);  	if (start > end) {  		text.Text = string.Concat (text.Text' sql.Substring (end + 2' start - end - 2));  	}  	else if (start < 0 && end < sql.Length - 2) {  		text.Text = string.Concat (text.Text' sql.Substring (end + 2));  		break;  	}  }  
Magic Number,Kiss.Data,TextTemplate,C:\repos\sdming_Kiss.Data\src\Kiss.Data\TextTemplate.cs,Compile,The following statement contains a magic number: while (start >= 0) {  	int end = sql.IndexOf ("}}"' start);  	if (end <= start) {  		throw new Exception ("invalid text template");  	}  	string match = sql.Substring (start + 2' end - start - 2).Trim ();  	if (string.IsNullOrEmpty (match)) {  		throw new Exception ("invalid text template");  	}  	var attributes = match.Split (attributeSplit' StringSplitOptions.RemoveEmptyEntries);  	if (attributes.Length <= 0) {  		throw new Exception ("invalid text template");  	}  	TextParameter p = new TextParameter ();  	p.Name = attributes [0].Trim ();  	p.Direction = ParameterDirection.Input;  	string dataType = null;  	int index = 1;  	if (attributes.Length > index) {  		switch (attributes [index].Trim ().ToLowerInvariant ()) {  		case "in":  			p.Direction = ParameterDirection.Input;  			index++;  			break;  		case "out":  			p.Direction = ParameterDirection.Output;  			index++;  			break;  		case "inout":  			p.Direction = ParameterDirection.InputOutput;  			index++;  			break;  		default:  			dataType = attributes [index];  			break;  		}  	}  	if (string.IsNullOrEmpty (dataType) && attributes.Length > index) {  		dataType = attributes [index];  	}  	if (!string.IsNullOrEmpty (dataType)) {  		DbType t;  		if (Enum.TryParse<DbType> (dataType' true' out t)) {  			p.DbType = t;  		}  		else {  			p.ProviderDbType = dataType;  		}  	}  	text.Parameters.Add (p);  	text.Text = string.Concat (text.Text' "{{"' p.Name' "}}");  	start = sql.IndexOf ("{{"' end);  	if (start > end) {  		text.Text = string.Concat (text.Text' sql.Substring (end + 2' start - end - 2));  	}  	else if (start < 0 && end < sql.Length - 2) {  		text.Text = string.Concat (text.Text' sql.Substring (end + 2));  		break;  	}  }  
Magic Number,Kiss.Data,TextTemplate,C:\repos\sdming_Kiss.Data\src\Kiss.Data\TextTemplate.cs,Compile,The following statement contains a magic number: while (start >= 0) {  	int end = sql.IndexOf ("}}"' start);  	if (end <= start) {  		throw new Exception ("invalid text template");  	}  	string match = sql.Substring (start + 2' end - start - 2).Trim ();  	if (string.IsNullOrEmpty (match)) {  		throw new Exception ("invalid text template");  	}  	var attributes = match.Split (attributeSplit' StringSplitOptions.RemoveEmptyEntries);  	if (attributes.Length <= 0) {  		throw new Exception ("invalid text template");  	}  	TextParameter p = new TextParameter ();  	p.Name = attributes [0].Trim ();  	p.Direction = ParameterDirection.Input;  	string dataType = null;  	int index = 1;  	if (attributes.Length > index) {  		switch (attributes [index].Trim ().ToLowerInvariant ()) {  		case "in":  			p.Direction = ParameterDirection.Input;  			index++;  			break;  		case "out":  			p.Direction = ParameterDirection.Output;  			index++;  			break;  		case "inout":  			p.Direction = ParameterDirection.InputOutput;  			index++;  			break;  		default:  			dataType = attributes [index];  			break;  		}  	}  	if (string.IsNullOrEmpty (dataType) && attributes.Length > index) {  		dataType = attributes [index];  	}  	if (!string.IsNullOrEmpty (dataType)) {  		DbType t;  		if (Enum.TryParse<DbType> (dataType' true' out t)) {  			p.DbType = t;  		}  		else {  			p.ProviderDbType = dataType;  		}  	}  	text.Parameters.Add (p);  	text.Text = string.Concat (text.Text' "{{"' p.Name' "}}");  	start = sql.IndexOf ("{{"' end);  	if (start > end) {  		text.Text = string.Concat (text.Text' sql.Substring (end + 2' start - end - 2));  	}  	else if (start < 0 && end < sql.Length - 2) {  		text.Text = string.Concat (text.Text' sql.Substring (end + 2));  		break;  	}  }  
Magic Number,Kiss.Data,TextTemplate,C:\repos\sdming_Kiss.Data\src\Kiss.Data\TextTemplate.cs,Compile,The following statement contains a magic number: while (start >= 0) {  	int end = sql.IndexOf ("}}"' start);  	if (end <= start) {  		throw new Exception ("invalid text template");  	}  	string match = sql.Substring (start + 2' end - start - 2).Trim ();  	if (string.IsNullOrEmpty (match)) {  		throw new Exception ("invalid text template");  	}  	var attributes = match.Split (attributeSplit' StringSplitOptions.RemoveEmptyEntries);  	if (attributes.Length <= 0) {  		throw new Exception ("invalid text template");  	}  	TextParameter p = new TextParameter ();  	p.Name = attributes [0].Trim ();  	p.Direction = ParameterDirection.Input;  	string dataType = null;  	int index = 1;  	if (attributes.Length > index) {  		switch (attributes [index].Trim ().ToLowerInvariant ()) {  		case "in":  			p.Direction = ParameterDirection.Input;  			index++;  			break;  		case "out":  			p.Direction = ParameterDirection.Output;  			index++;  			break;  		case "inout":  			p.Direction = ParameterDirection.InputOutput;  			index++;  			break;  		default:  			dataType = attributes [index];  			break;  		}  	}  	if (string.IsNullOrEmpty (dataType) && attributes.Length > index) {  		dataType = attributes [index];  	}  	if (!string.IsNullOrEmpty (dataType)) {  		DbType t;  		if (Enum.TryParse<DbType> (dataType' true' out t)) {  			p.DbType = t;  		}  		else {  			p.ProviderDbType = dataType;  		}  	}  	text.Parameters.Add (p);  	text.Text = string.Concat (text.Text' "{{"' p.Name' "}}");  	start = sql.IndexOf ("{{"' end);  	if (start > end) {  		text.Text = string.Concat (text.Text' sql.Substring (end + 2' start - end - 2));  	}  	else if (start < 0 && end < sql.Length - 2) {  		text.Text = string.Concat (text.Text' sql.Substring (end + 2));  		break;  	}  }  
Magic Number,Kiss.Data,TextTemplate,C:\repos\sdming_Kiss.Data\src\Kiss.Data\TextTemplate.cs,Compile,The following statement contains a magic number: while (start >= 0) {  	int end = sql.IndexOf ("}}"' start);  	if (end <= start) {  		throw new Exception ("invalid text template");  	}  	string match = sql.Substring (start + 2' end - start - 2).Trim ();  	if (string.IsNullOrEmpty (match)) {  		throw new Exception ("invalid text template");  	}  	var attributes = match.Split (attributeSplit' StringSplitOptions.RemoveEmptyEntries);  	if (attributes.Length <= 0) {  		throw new Exception ("invalid text template");  	}  	TextParameter p = new TextParameter ();  	p.Name = attributes [0].Trim ();  	p.Direction = ParameterDirection.Input;  	string dataType = null;  	int index = 1;  	if (attributes.Length > index) {  		switch (attributes [index].Trim ().ToLowerInvariant ()) {  		case "in":  			p.Direction = ParameterDirection.Input;  			index++;  			break;  		case "out":  			p.Direction = ParameterDirection.Output;  			index++;  			break;  		case "inout":  			p.Direction = ParameterDirection.InputOutput;  			index++;  			break;  		default:  			dataType = attributes [index];  			break;  		}  	}  	if (string.IsNullOrEmpty (dataType) && attributes.Length > index) {  		dataType = attributes [index];  	}  	if (!string.IsNullOrEmpty (dataType)) {  		DbType t;  		if (Enum.TryParse<DbType> (dataType' true' out t)) {  			p.DbType = t;  		}  		else {  			p.ProviderDbType = dataType;  		}  	}  	text.Parameters.Add (p);  	text.Text = string.Concat (text.Text' "{{"' p.Name' "}}");  	start = sql.IndexOf ("{{"' end);  	if (start > end) {  		text.Text = string.Concat (text.Text' sql.Substring (end + 2' start - end - 2));  	}  	else if (start < 0 && end < sql.Length - 2) {  		text.Text = string.Concat (text.Text' sql.Substring (end + 2));  		break;  	}  }  
Magic Number,Kiss.Data,TextTemplate,C:\repos\sdming_Kiss.Data\src\Kiss.Data\TextTemplate.cs,Compile,The following statement contains a magic number: while (start >= 0) {  	int end = sql.IndexOf ("}}"' start);  	if (end <= start) {  		throw new Exception ("invalid text template");  	}  	string match = sql.Substring (start + 2' end - start - 2).Trim ();  	if (string.IsNullOrEmpty (match)) {  		throw new Exception ("invalid text template");  	}  	var attributes = match.Split (attributeSplit' StringSplitOptions.RemoveEmptyEntries);  	if (attributes.Length <= 0) {  		throw new Exception ("invalid text template");  	}  	TextParameter p = new TextParameter ();  	p.Name = attributes [0].Trim ();  	p.Direction = ParameterDirection.Input;  	string dataType = null;  	int index = 1;  	if (attributes.Length > index) {  		switch (attributes [index].Trim ().ToLowerInvariant ()) {  		case "in":  			p.Direction = ParameterDirection.Input;  			index++;  			break;  		case "out":  			p.Direction = ParameterDirection.Output;  			index++;  			break;  		case "inout":  			p.Direction = ParameterDirection.InputOutput;  			index++;  			break;  		default:  			dataType = attributes [index];  			break;  		}  	}  	if (string.IsNullOrEmpty (dataType) && attributes.Length > index) {  		dataType = attributes [index];  	}  	if (!string.IsNullOrEmpty (dataType)) {  		DbType t;  		if (Enum.TryParse<DbType> (dataType' true' out t)) {  			p.DbType = t;  		}  		else {  			p.ProviderDbType = dataType;  		}  	}  	text.Parameters.Add (p);  	text.Text = string.Concat (text.Text' "{{"' p.Name' "}}");  	start = sql.IndexOf ("{{"' end);  	if (start > end) {  		text.Text = string.Concat (text.Text' sql.Substring (end + 2' start - end - 2));  	}  	else if (start < 0 && end < sql.Length - 2) {  		text.Text = string.Concat (text.Text' sql.Substring (end + 2));  		break;  	}  }  
Magic Number,Kiss.Data,TextTemplate,C:\repos\sdming_Kiss.Data\src\Kiss.Data\TextTemplate.cs,Compile,The following statement contains a magic number: if (start > end) {  	text.Text = string.Concat (text.Text' sql.Substring (end + 2' start - end - 2));  }  else if (start < 0 && end < sql.Length - 2) {  	text.Text = string.Concat (text.Text' sql.Substring (end + 2));  	break;  }  
Magic Number,Kiss.Data,TextTemplate,C:\repos\sdming_Kiss.Data\src\Kiss.Data\TextTemplate.cs,Compile,The following statement contains a magic number: if (start > end) {  	text.Text = string.Concat (text.Text' sql.Substring (end + 2' start - end - 2));  }  else if (start < 0 && end < sql.Length - 2) {  	text.Text = string.Concat (text.Text' sql.Substring (end + 2));  	break;  }  
Magic Number,Kiss.Data,TextTemplate,C:\repos\sdming_Kiss.Data\src\Kiss.Data\TextTemplate.cs,Compile,The following statement contains a magic number: if (start > end) {  	text.Text = string.Concat (text.Text' sql.Substring (end + 2' start - end - 2));  }  else if (start < 0 && end < sql.Length - 2) {  	text.Text = string.Concat (text.Text' sql.Substring (end + 2));  	break;  }  
Magic Number,Kiss.Data,TextTemplate,C:\repos\sdming_Kiss.Data\src\Kiss.Data\TextTemplate.cs,Compile,The following statement contains a magic number: if (start > end) {  	text.Text = string.Concat (text.Text' sql.Substring (end + 2' start - end - 2));  }  else if (start < 0 && end < sql.Length - 2) {  	text.Text = string.Concat (text.Text' sql.Substring (end + 2));  	break;  }  
Magic Number,Kiss.Data,TextTemplate,C:\repos\sdming_Kiss.Data\src\Kiss.Data\TextTemplate.cs,Compile,The following statement contains a magic number: text.Text = string.Concat (text.Text' sql.Substring (end + 2' start - end - 2));  
Magic Number,Kiss.Data,TextTemplate,C:\repos\sdming_Kiss.Data\src\Kiss.Data\TextTemplate.cs,Compile,The following statement contains a magic number: text.Text = string.Concat (text.Text' sql.Substring (end + 2' start - end - 2));  
Magic Number,Kiss.Data,TextTemplate,C:\repos\sdming_Kiss.Data\src\Kiss.Data\TextTemplate.cs,Compile,The following statement contains a magic number: if (start < 0 && end < sql.Length - 2) {  	text.Text = string.Concat (text.Text' sql.Substring (end + 2));  	break;  }  
Magic Number,Kiss.Data,TextTemplate,C:\repos\sdming_Kiss.Data\src\Kiss.Data\TextTemplate.cs,Compile,The following statement contains a magic number: if (start < 0 && end < sql.Length - 2) {  	text.Text = string.Concat (text.Text' sql.Substring (end + 2));  	break;  }  
Magic Number,Kiss.Data,TextTemplate,C:\repos\sdming_Kiss.Data\src\Kiss.Data\TextTemplate.cs,Compile,The following statement contains a magic number: text.Text = string.Concat (text.Text' sql.Substring (end + 2));  
Magic Number,Kiss.Core.Reflection,ILBuilder,C:\repos\sdming_Kiss.Data\src\Kiss.Data\Core\Reflection\ILBuilder.cs,Ldarg,The following statement contains a magic number: switch (slot) {  case 0:  	this.ilGen.Emit (OpCodes.Ldarg_0);  	return;  case 1:  	this.ilGen.Emit (OpCodes.Ldarg_1);  	return;  case 2:  	this.ilGen.Emit (OpCodes.Ldarg_2);  	return;  case 3:  	this.ilGen.Emit (OpCodes.Ldarg_3);  	return;  }  
Magic Number,Kiss.Core.Reflection,ILBuilder,C:\repos\sdming_Kiss.Data\src\Kiss.Data\Core\Reflection\ILBuilder.cs,Ldarg,The following statement contains a magic number: switch (slot) {  case 0:  	this.ilGen.Emit (OpCodes.Ldarg_0);  	return;  case 1:  	this.ilGen.Emit (OpCodes.Ldarg_1);  	return;  case 2:  	this.ilGen.Emit (OpCodes.Ldarg_2);  	return;  case 3:  	this.ilGen.Emit (OpCodes.Ldarg_3);  	return;  }  
Magic Number,Kiss.Core.Reflection,ILBuilder,C:\repos\sdming_Kiss.Data\src\Kiss.Data\Core\Reflection\ILBuilder.cs,Ldc,The following statement contains a magic number: switch (value) {  case -1:  	this.ilGen.Emit (OpCodes.Ldc_I4_M1);  	return;  case 0:  	this.ilGen.Emit (OpCodes.Ldc_I4_0);  	return;  case 1:  	this.ilGen.Emit (OpCodes.Ldc_I4_1);  	return;  case 2:  	this.ilGen.Emit (OpCodes.Ldc_I4_2);  	return;  case 3:  	this.ilGen.Emit (OpCodes.Ldc_I4_3);  	return;  case 4:  	this.ilGen.Emit (OpCodes.Ldc_I4_4);  	return;  case 5:  	this.ilGen.Emit (OpCodes.Ldc_I4_5);  	return;  case 6:  	this.ilGen.Emit (OpCodes.Ldc_I4_6);  	return;  case 7:  	this.ilGen.Emit (OpCodes.Ldc_I4_7);  	return;  case 8:  	this.ilGen.Emit (OpCodes.Ldc_I4_8);  	return;  }  
Magic Number,Kiss.Core.Reflection,ILBuilder,C:\repos\sdming_Kiss.Data\src\Kiss.Data\Core\Reflection\ILBuilder.cs,Ldc,The following statement contains a magic number: switch (value) {  case -1:  	this.ilGen.Emit (OpCodes.Ldc_I4_M1);  	return;  case 0:  	this.ilGen.Emit (OpCodes.Ldc_I4_0);  	return;  case 1:  	this.ilGen.Emit (OpCodes.Ldc_I4_1);  	return;  case 2:  	this.ilGen.Emit (OpCodes.Ldc_I4_2);  	return;  case 3:  	this.ilGen.Emit (OpCodes.Ldc_I4_3);  	return;  case 4:  	this.ilGen.Emit (OpCodes.Ldc_I4_4);  	return;  case 5:  	this.ilGen.Emit (OpCodes.Ldc_I4_5);  	return;  case 6:  	this.ilGen.Emit (OpCodes.Ldc_I4_6);  	return;  case 7:  	this.ilGen.Emit (OpCodes.Ldc_I4_7);  	return;  case 8:  	this.ilGen.Emit (OpCodes.Ldc_I4_8);  	return;  }  
Magic Number,Kiss.Core.Reflection,ILBuilder,C:\repos\sdming_Kiss.Data\src\Kiss.Data\Core\Reflection\ILBuilder.cs,Ldc,The following statement contains a magic number: switch (value) {  case -1:  	this.ilGen.Emit (OpCodes.Ldc_I4_M1);  	return;  case 0:  	this.ilGen.Emit (OpCodes.Ldc_I4_0);  	return;  case 1:  	this.ilGen.Emit (OpCodes.Ldc_I4_1);  	return;  case 2:  	this.ilGen.Emit (OpCodes.Ldc_I4_2);  	return;  case 3:  	this.ilGen.Emit (OpCodes.Ldc_I4_3);  	return;  case 4:  	this.ilGen.Emit (OpCodes.Ldc_I4_4);  	return;  case 5:  	this.ilGen.Emit (OpCodes.Ldc_I4_5);  	return;  case 6:  	this.ilGen.Emit (OpCodes.Ldc_I4_6);  	return;  case 7:  	this.ilGen.Emit (OpCodes.Ldc_I4_7);  	return;  case 8:  	this.ilGen.Emit (OpCodes.Ldc_I4_8);  	return;  }  
Magic Number,Kiss.Core.Reflection,ILBuilder,C:\repos\sdming_Kiss.Data\src\Kiss.Data\Core\Reflection\ILBuilder.cs,Ldc,The following statement contains a magic number: switch (value) {  case -1:  	this.ilGen.Emit (OpCodes.Ldc_I4_M1);  	return;  case 0:  	this.ilGen.Emit (OpCodes.Ldc_I4_0);  	return;  case 1:  	this.ilGen.Emit (OpCodes.Ldc_I4_1);  	return;  case 2:  	this.ilGen.Emit (OpCodes.Ldc_I4_2);  	return;  case 3:  	this.ilGen.Emit (OpCodes.Ldc_I4_3);  	return;  case 4:  	this.ilGen.Emit (OpCodes.Ldc_I4_4);  	return;  case 5:  	this.ilGen.Emit (OpCodes.Ldc_I4_5);  	return;  case 6:  	this.ilGen.Emit (OpCodes.Ldc_I4_6);  	return;  case 7:  	this.ilGen.Emit (OpCodes.Ldc_I4_7);  	return;  case 8:  	this.ilGen.Emit (OpCodes.Ldc_I4_8);  	return;  }  
Magic Number,Kiss.Core.Reflection,ILBuilder,C:\repos\sdming_Kiss.Data\src\Kiss.Data\Core\Reflection\ILBuilder.cs,Ldc,The following statement contains a magic number: switch (value) {  case -1:  	this.ilGen.Emit (OpCodes.Ldc_I4_M1);  	return;  case 0:  	this.ilGen.Emit (OpCodes.Ldc_I4_0);  	return;  case 1:  	this.ilGen.Emit (OpCodes.Ldc_I4_1);  	return;  case 2:  	this.ilGen.Emit (OpCodes.Ldc_I4_2);  	return;  case 3:  	this.ilGen.Emit (OpCodes.Ldc_I4_3);  	return;  case 4:  	this.ilGen.Emit (OpCodes.Ldc_I4_4);  	return;  case 5:  	this.ilGen.Emit (OpCodes.Ldc_I4_5);  	return;  case 6:  	this.ilGen.Emit (OpCodes.Ldc_I4_6);  	return;  case 7:  	this.ilGen.Emit (OpCodes.Ldc_I4_7);  	return;  case 8:  	this.ilGen.Emit (OpCodes.Ldc_I4_8);  	return;  }  
Magic Number,Kiss.Core.Reflection,ILBuilder,C:\repos\sdming_Kiss.Data\src\Kiss.Data\Core\Reflection\ILBuilder.cs,Ldc,The following statement contains a magic number: switch (value) {  case -1:  	this.ilGen.Emit (OpCodes.Ldc_I4_M1);  	return;  case 0:  	this.ilGen.Emit (OpCodes.Ldc_I4_0);  	return;  case 1:  	this.ilGen.Emit (OpCodes.Ldc_I4_1);  	return;  case 2:  	this.ilGen.Emit (OpCodes.Ldc_I4_2);  	return;  case 3:  	this.ilGen.Emit (OpCodes.Ldc_I4_3);  	return;  case 4:  	this.ilGen.Emit (OpCodes.Ldc_I4_4);  	return;  case 5:  	this.ilGen.Emit (OpCodes.Ldc_I4_5);  	return;  case 6:  	this.ilGen.Emit (OpCodes.Ldc_I4_6);  	return;  case 7:  	this.ilGen.Emit (OpCodes.Ldc_I4_7);  	return;  case 8:  	this.ilGen.Emit (OpCodes.Ldc_I4_8);  	return;  }  
Magic Number,Kiss.Core.Reflection,ILBuilder,C:\repos\sdming_Kiss.Data\src\Kiss.Data\Core\Reflection\ILBuilder.cs,Ldc,The following statement contains a magic number: switch (value) {  case -1:  	this.ilGen.Emit (OpCodes.Ldc_I4_M1);  	return;  case 0:  	this.ilGen.Emit (OpCodes.Ldc_I4_0);  	return;  case 1:  	this.ilGen.Emit (OpCodes.Ldc_I4_1);  	return;  case 2:  	this.ilGen.Emit (OpCodes.Ldc_I4_2);  	return;  case 3:  	this.ilGen.Emit (OpCodes.Ldc_I4_3);  	return;  case 4:  	this.ilGen.Emit (OpCodes.Ldc_I4_4);  	return;  case 5:  	this.ilGen.Emit (OpCodes.Ldc_I4_5);  	return;  case 6:  	this.ilGen.Emit (OpCodes.Ldc_I4_6);  	return;  case 7:  	this.ilGen.Emit (OpCodes.Ldc_I4_7);  	return;  case 8:  	this.ilGen.Emit (OpCodes.Ldc_I4_8);  	return;  }  
Magic Number,Kiss.Core.Reflection,ILBuilder,C:\repos\sdming_Kiss.Data\src\Kiss.Data\Core\Reflection\ILBuilder.cs,Ldc,The following statement contains a magic number: if (value > -129 && value < 128) {  	this.ilGen.Emit (OpCodes.Ldc_I4_S' (SByte)value);  }  else {  	this.ilGen.Emit (OpCodes.Ldc_I4' value);  }  
Magic Number,Kiss.Core.Reflection,ILBuilder,C:\repos\sdming_Kiss.Data\src\Kiss.Data\Core\Reflection\ILBuilder.cs,Ldc,The following statement contains a magic number: if (value > -129 && value < 128) {  	this.ilGen.Emit (OpCodes.Ldc_I4_S' (SByte)value);  }  else {  	this.ilGen.Emit (OpCodes.Ldc_I4' value);  }  
Magic Number,Kiss.Data.Driver,OracleDriver,C:\repos\sdming_Kiss.Data\src\Kiss.Data\Driver\OracleDriver.cs,SetParameterNumeric,The following statement contains a magic number: if (p.DbType == DbType.Decimal && p.Precision == 0 && p.Scale == 0) {  	p.Precision = 38;  	p.Scale = byte.MaxValue;  }  
Magic Number,Kiss.Data.Driver,OracleDriver,C:\repos\sdming_Kiss.Data\src\Kiss.Data\Driver\OracleDriver.cs,SetParameterNumeric,The following statement contains a magic number: p.Precision = 38;  
Magic Number,Kiss.Data.Driver,OracleManagedDriver,C:\repos\sdming_Kiss.Data\src\Kiss.Data\Driver\OracleManagedDriver.cs,SetParameterNumeric,The following statement contains a magic number: if (p.DbType == DbType.Decimal && p.Precision == 0 && p.Scale == 0) {  	p.Precision = 38;  	p.Scale = 127;  }  
Magic Number,Kiss.Data.Driver,OracleManagedDriver,C:\repos\sdming_Kiss.Data\src\Kiss.Data\Driver\OracleManagedDriver.cs,SetParameterNumeric,The following statement contains a magic number: if (p.DbType == DbType.Decimal && p.Precision == 0 && p.Scale == 0) {  	p.Precision = 38;  	p.Scale = 127;  }  
Magic Number,Kiss.Data.Driver,OracleManagedDriver,C:\repos\sdming_Kiss.Data\src\Kiss.Data\Driver\OracleManagedDriver.cs,SetParameterNumeric,The following statement contains a magic number: p.Precision = 38;  
Magic Number,Kiss.Data.Driver,OracleManagedDriver,C:\repos\sdming_Kiss.Data\src\Kiss.Data\Driver\OracleManagedDriver.cs,SetParameterNumeric,The following statement contains a magic number: p.Scale = 127;  
Magic Number,Kiss.Data.Driver,OracleManagedDriver,C:\repos\sdming_Kiss.Data\src\Kiss.Data\Driver\OracleManagedDriver.cs,SetParameterPrecision,The following statement contains a magic number: if (p.DbType.HasPrecisionAndScale ()) {  	if (scale.HasValue) {  		p.Scale = scale.Value;  	}  	else {  		p.Scale = 127;  	}  	if (precision.HasValue) {  		p.Precision = precision.Value;  	}  	else {  		p.Precision = 38;  	}  }  
Magic Number,Kiss.Data.Driver,OracleManagedDriver,C:\repos\sdming_Kiss.Data\src\Kiss.Data\Driver\OracleManagedDriver.cs,SetParameterPrecision,The following statement contains a magic number: if (p.DbType.HasPrecisionAndScale ()) {  	if (scale.HasValue) {  		p.Scale = scale.Value;  	}  	else {  		p.Scale = 127;  	}  	if (precision.HasValue) {  		p.Precision = precision.Value;  	}  	else {  		p.Precision = 38;  	}  }  
Magic Number,Kiss.Data.Driver,OracleManagedDriver,C:\repos\sdming_Kiss.Data\src\Kiss.Data\Driver\OracleManagedDriver.cs,SetParameterPrecision,The following statement contains a magic number: if (scale.HasValue) {  	p.Scale = scale.Value;  }  else {  	p.Scale = 127;  }  
Magic Number,Kiss.Data.Driver,OracleManagedDriver,C:\repos\sdming_Kiss.Data\src\Kiss.Data\Driver\OracleManagedDriver.cs,SetParameterPrecision,The following statement contains a magic number: p.Scale = 127;  
Magic Number,Kiss.Data.Driver,OracleManagedDriver,C:\repos\sdming_Kiss.Data\src\Kiss.Data\Driver\OracleManagedDriver.cs,SetParameterPrecision,The following statement contains a magic number: if (precision.HasValue) {  	p.Precision = precision.Value;  }  else {  	p.Precision = 38;  }  
Magic Number,Kiss.Data.Driver,OracleManagedDriver,C:\repos\sdming_Kiss.Data\src\Kiss.Data\Driver\OracleManagedDriver.cs,SetParameterPrecision,The following statement contains a magic number: p.Precision = 38;  
Magic Number,Kiss.Data.Driver,OracleCompiler,C:\repos\sdming_Kiss.Data\src\Kiss.Data\Driver\OracleCompiler.cs,VisitInsert,The following statement contains a magic number: Driver.SetParameterProviderDbType (parameter' 121);  
Missing Default,Kiss.Data,DbTypeEntension,C:\repos\sdming_Kiss.Data\src\Kiss.Data\DbTypeEntension.cs,GetDbType,The following switch statement is missing a default case: switch (code) {  case TypeCode.Boolean:  	return DbType.Boolean;  case TypeCode.Byte:  	return DbType.Byte;  case TypeCode.Char:  	return DbType.StringFixedLength;  case TypeCode.DateTime:  	return DbType.DateTime;  case TypeCode.DBNull:  	return DbType.Object;  case TypeCode.Decimal:  	return DbType.Decimal;  case TypeCode.Double:  	return DbType.Double;  case TypeCode.Empty:  	return DbType.Object;  case TypeCode.Int16:  	return DbType.Int16;  case TypeCode.Int32:  	return DbType.Int32;  case TypeCode.Int64:  	return DbType.Int64;  case TypeCode.Object:  	if (type == typeof(Guid)) {  		return DbType.Guid;  	}  	else if (type == typeof(byte[])) {  		return DbType.Binary;  	}  	else if (type == typeof(char[])) {  		return DbType.String;  	}  	else if (type == typeof(TimeSpan)) {  		return DbType.Int64;  	}  	else if (type == typeof(DateTimeOffset)) {  		return DbType.DateTimeOffset;  	}  	if ((type == typeof(XmlDocument)) || (type == typeof(XmlElement)) || (type == typeof(XmlNode))) {  		return DbType.Xml;  	}  	return DbType.Object;  case TypeCode.SByte:  	return DbType.Byte;  case TypeCode.Single:  	return DbType.Single;  case TypeCode.String:  	return DbType.String;  case TypeCode.UInt16:  	return DbType.Int32;  case TypeCode.UInt32:  	return DbType.Int64;  case TypeCode.UInt64:  	return DbType.Int64;  }  
Missing Default,Kiss.Core.Reflection,ILBuilder,C:\repos\sdming_Kiss.Data\src\Kiss.Data\Core\Reflection\ILBuilder.cs,Ldarg,The following switch statement is missing a default case: switch (slot) {  case 0:  	this.ilGen.Emit (OpCodes.Ldarg_0);  	return;  case 1:  	this.ilGen.Emit (OpCodes.Ldarg_1);  	return;  case 2:  	this.ilGen.Emit (OpCodes.Ldarg_2);  	return;  case 3:  	this.ilGen.Emit (OpCodes.Ldarg_3);  	return;  }  
Missing Default,Kiss.Core.Reflection,ILBuilder,C:\repos\sdming_Kiss.Data\src\Kiss.Data\Core\Reflection\ILBuilder.cs,Ldc,The following switch statement is missing a default case: switch (value) {  case -1:  	this.ilGen.Emit (OpCodes.Ldc_I4_M1);  	return;  case 0:  	this.ilGen.Emit (OpCodes.Ldc_I4_0);  	return;  case 1:  	this.ilGen.Emit (OpCodes.Ldc_I4_1);  	return;  case 2:  	this.ilGen.Emit (OpCodes.Ldc_I4_2);  	return;  case 3:  	this.ilGen.Emit (OpCodes.Ldc_I4_3);  	return;  case 4:  	this.ilGen.Emit (OpCodes.Ldc_I4_4);  	return;  case 5:  	this.ilGen.Emit (OpCodes.Ldc_I4_5);  	return;  case 6:  	this.ilGen.Emit (OpCodes.Ldc_I4_6);  	return;  case 7:  	this.ilGen.Emit (OpCodes.Ldc_I4_7);  	return;  case 8:  	this.ilGen.Emit (OpCodes.Ldc_I4_8);  	return;  }  
Missing Default,Kiss.Core.Reflection,ILBuilder,C:\repos\sdming_Kiss.Data\src\Kiss.Data\Core\Reflection\ILBuilder.cs,Ldc,The following switch statement is missing a default case: switch (Type.GetTypeCode (enumType)) {  case TypeCode.Boolean:  	this.Ldc ((bool)value);  	return;  case TypeCode.Char:  //throw DiagnosticUtility.ExceptionUtility.ThrowHelperError(new NotSupportedException(SR.GetString("CharIsInvalidPrimitive")));  case TypeCode.SByte:  case TypeCode.Byte:  case TypeCode.Int16:  case TypeCode.UInt16:  	this.Ldc (((IConvertible)value).ToInt32 (CultureInfo.InvariantCulture));  	return;  case TypeCode.Int32:  	this.Ldc ((int)value);  	return;  case TypeCode.UInt32:  	this.Ldc ((int)((uint)value));  	return;  case TypeCode.Int64:  	this.Ldc ((long)value);  	return;  case TypeCode.UInt64:  	this.Ldc ((long)((ulong)value));  	return;  case TypeCode.Single:  	this.Ldc ((float)value);  	return;  case TypeCode.Double:  	this.Ldc ((double)value);  	return;  case TypeCode.Decimal:  	//this.Ldc((double)value);  	this.Ldc (((IConvertible)value).ToDecimal (CultureInfo.InvariantCulture));  	return;  case TypeCode.String:  	this.Ldstr ((string)value);  	return;  }  
Missing Default,Kiss.Core.Reflection,TypeSystem,C:\repos\sdming_Kiss.Data\src\Kiss.Data\Core\TypeSystem.cs,IsSimpleType,The following switch statement is missing a default case: switch (Type.GetTypeCode (type)) {  case TypeCode.Object:  	return ((typeof(TimeSpan) == type) || (typeof(DateTimeOffset) == type));  case TypeCode.Boolean:  case TypeCode.Char:  case TypeCode.SByte:  case TypeCode.Byte:  case TypeCode.Int16:  case TypeCode.UInt16:  case TypeCode.Int32:  case TypeCode.UInt32:  case TypeCode.Int64:  case TypeCode.UInt64:  case TypeCode.Single:  case TypeCode.Double:  case TypeCode.Decimal:  case TypeCode.DateTime:  case TypeCode.String:  	return true;  }  
Missing Default,Kiss.Core.Reflection,TypeSystem,C:\repos\sdming_Kiss.Data\src\Kiss.Data\Core\TypeSystem.cs,IsArithmetic,The following switch statement is missing a default case: switch (Type.GetTypeCode (type)) {  case TypeCode.Byte:  case TypeCode.SByte:  case TypeCode.Int16:  case TypeCode.UInt16:  case TypeCode.Int32:  case TypeCode.UInt32:  case TypeCode.Int64:  case TypeCode.UInt64:  case TypeCode.Single:  case TypeCode.Double:  case TypeCode.Decimal:  	return true;  }  
Missing Default,Kiss.Core.Reflection,TypeSystem,C:\repos\sdming_Kiss.Data\src\Kiss.Data\Core\TypeSystem.cs,IsNumeric,The following switch statement is missing a default case: switch (Type.GetTypeCode (type)) {  case TypeCode.Char:  case TypeCode.SByte:  case TypeCode.Byte:  case TypeCode.Int16:  case TypeCode.UInt16:  case TypeCode.Int32:  case TypeCode.UInt32:  case TypeCode.Int64:  case TypeCode.UInt64:  case TypeCode.Single:  case TypeCode.Double:  	return true;  }  
Missing Default,Kiss.Data.Driver,SqlCompiler,C:\repos\sdming_Kiss.Data\src\Kiss.Data\Driver\SqlCompiler.cs,VisitExp,The following switch statement is missing a default case: switch (exp.NodeType ()) {  case NodeType.Null:  	Writer.Write (Ansi.Null);  	break;  case NodeType.Sql:  	Writer.Write ((exp as IRawSql).ToSql ());  	break;  case NodeType.Operator:  	Writer.Write ((exp as IRawSql).ToSql ());  	break;  case NodeType.Insert:  	VisitInsert ((Insert)exp);  	break;  case NodeType.Query:  	VisitQuery ((Query)exp);  	break;  case NodeType.Update:  	VisitUpdate ((Update)exp);  	break;  case NodeType.Delete:  	VisitDelete ((Delete)exp);  	break;  case NodeType.Value:  	VisitValue ((RawValue)exp);  	break;  case NodeType.Table:  	VisitTable ((Table)exp);  	break;  case NodeType.Column:  	VisitColumn ((Column)exp);  	break;  case NodeType.Condition:  	VisitCondition ((Condition)exp);  	break;  case NodeType.Aggregate:  	VisitAggregate ((Aggregate)exp);  	break;  case NodeType.Select:  	VisitSelect ((Select)exp);  	break;  case NodeType.From:  	VisitFrom ((From)exp);  	break;  case NodeType.Join:  	VisitJoin ((Join)exp);  	break;  case NodeType.Where:  	VisitWhere ((Where)exp);  	break;  case NodeType.GroupBy:  	VisitGroupBy ((GroupBy)exp);  	break;  case NodeType.Having:  	VisitHaving ((Having)exp);  	break;  case NodeType.OrderBy:  	VisitOrderBy ((OrderBy)exp);  	break;  case NodeType.Parameter:  	VisitParameter ((Parameter)exp);  	break;  case NodeType.Text:  	throw new NotImplementedException ("NodeType.Text");  case NodeType.Procedure:  	throw new NotImplementedException ("NodeType.Procedure");  case NodeType.Output:  	throw new NotImplementedException ("NodeType.Output");  }  
Missing Default,Kiss.Data.Driver,SqlDriver,C:\repos\sdming_Kiss.Data\src\Kiss.Data\Driver\SqlDriver.cs,Compile,The following switch statement is missing a default case: switch (expression.NodeType ()) {  case NodeType.Text:  	return CompileText (expression as Text);  case NodeType.Procedure:  	return CompileProcedure (expression as Procedure);  case NodeType.Query:  case NodeType.Delete:  case NodeType.Insert:  case NodeType.Update:  	return CompileStatement (expression' schemaProvider);  }  
Missing Default,Kiss.Data.Driver,SqlDriver,C:\repos\sdming_Kiss.Data\src\Kiss.Data\Driver\SqlDriver.cs,NativeTypeToDbType,The following switch statement is missing a default case: switch (dataType.ToLowerInvariant ()) {  case "name":  case "oidvector":  case "refcursor":  case "ref":  case "char":  case "character":  case "longchar":  case "nchar":  case "varchar":  case "varchar2":  case "varyingcharacter":  case "nvarchar":  case "nvarchar2":  case "longvarchar":  case "nativecharacter":  case "native character":  case "nativevaryingcharacter":  case "character varying":  case "text":  case "ntext":  case "longtext":  case "mediumtext":  case "tinytext":  case "bpchar":  case "clob":  case "nclob":  case "rowid":  case "urowid":  case "xmltype":  case "sysname":  case "long":  case "sql_variant":  case "note":  case "memo":  case "string":  	return DbType.String;  case "long raw":  	return DbType.Binary;  case "bytea":  case "bit varying":  case "binary":  case "varbinary":  case "rowversion":  case "blob":  case "tinyblob":  case "mediumblob":  case "oleobject":  case "longblob":  case "raw":  case "image":  case "general":  	return DbType.Binary;  case "bit":  case "bool":  case "boolean":  case "yesno":  case "logical":  	return DbType.Boolean;  case "tinyint":  	return DbType.Byte;  case "tinyint unsigned":  	return DbType.SByte;  case "int2":  case "smallint":  	return DbType.Int16;  case "uint16":  case "smallint unsigned":  	return DbType.UInt16;  case "int4":  case "int":  case "mediumint":  	return DbType.Int32;  case "uint32":  case "integer unsigned":  	return DbType.UInt32;  case "int8":  case "bigint":  case "integer":  case "bigserial":  case "serial":  case "smallserial":  	return DbType.Int64;  case "uint64":  case "bigint unsigned":  	return DbType.UInt64;  case "autoincrement":  case "identity":  case "counter":  	return DbType.Int64;  case "float4":  case "real":  	return DbType.Single;  case "float8":  case "float":  case "double":  case "double precision":  	return DbType.Double;  case "numeric":  case "decimal":  case "newdecimal":  case "number":  	return DbType.Decimal;  case "binary_double":  case "binary_float":  case "binary_integer":  	return DbType.Decimal;  case "money":  case "smallmoney":  	return DbType.Decimal;  case "currency":  	return DbType.Currency;  case "date":  case "smalldate":  	return DbType.DateTime;  case "timetz":  case "abstime":  case "datetime":  case "smalldatetime":  	return DbType.DateTime;  case "timestamp":  case "timestamp with time zone":  case "timestamp without time zone":  case "timestamp with local time zone":  	return DbType.DateTime;  case "time":  	return DbType.Time;  case "timestamptz":  	return DbType.DateTime;  case "datetime2":  	return DbType.DateTime2;  case "datetimeoffset":  	return DbType.DateTimeOffset;  case "year":  	return DbType.Int32;  case "interval day to second":  	return DbType.Int64;  case "interval year to month":  	return DbType.Int64;  case "uuid":  case "guid":  case "uniqueidentifier":  	return DbType.Guid;  case "xml":  	return DbType.Xml;  case "interval":  	return DbType.Object;  case "array":  	return DbType.Object;  case "point":  case "box":  case "path":  case "lseg":  case "polygon":  case "circle":  case "line":  case "inet":  case "macaddr":  	return DbType.Object;  }  
