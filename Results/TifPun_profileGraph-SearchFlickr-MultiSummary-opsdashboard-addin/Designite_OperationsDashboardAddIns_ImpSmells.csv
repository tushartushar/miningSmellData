Implementation smell,Namespace,Class,File,Method,Description
Complex Method,OperationsDashboardAddIns,StatisticsSummary,C:\repos\TifPun_profileGraph-SearchFlickr-MultiSummary-opsdashboard-addin\OperationsDashboardAddIns\StatisticsSummary.xaml.cs,CalculateOneStatistic,Cyclomatic complexity of the method is 8
Long Parameter List,OperationsDashboardAddIns.Config,ProfileGraphFromMapDialog,C:\repos\TifPun_profileGraph-SearchFlickr-MultiSummary-opsdashboard-addin\OperationsDashboardAddIns\Config\ProfileGraphFromMapDialog.xaml.cs,ProfileGraphFromMapDialog,The method has 6 parameters.
Long Parameter List,OperationsDashboardAddIns.Config,StatisticsSummaryDialog,C:\repos\TifPun_profileGraph-SearchFlickr-MultiSummary-opsdashboard-addin\OperationsDashboardAddIns\Config\StatisticsSummaryDialog.xaml.cs,StatisticsSummaryDialog,The method has 8 parameters.
Long Statement,OperationsDashboardAddIns.Config,StatisticsSummaryDialog,C:\repos\TifPun_profileGraph-SearchFlickr-MultiSummary-opsdashboard-addin\OperationsDashboardAddIns\Config\StatisticsSummaryDialog.xaml.cs,IsValidField,The length of the statement  "	if (field.Type == client.Field.FieldType.Double || field.Type == client.Field.FieldType.Integer || field.Type == client.Field.FieldType.Single || field.Type == client.Field.FieldType.SmallInteger) { " is 198.
Long Statement,OperationsDashboardAddIns,ProfileGraphFromFeature,C:\repos\TifPun_profileGraph-SearchFlickr-MultiSummary-opsdashboard-addin\OperationsDashboardAddIns\ProfileGraphFromFeature.cs,Execute,The length of the statement  "	ProfileGraphFromMap profileWidget = OperationsDashboard.Instance.Widgets.FirstOrDefault (w => w.GetType () == typeof(ProfileGraphFromMap)) as ProfileGraphFromMap; " is 162.
Long Statement,OperationsDashboardAddIns,ProfileGraphFromFeature,C:\repos\TifPun_profileGraph-SearchFlickr-MultiSummary-opsdashboard-addin\OperationsDashboardAddIns\ProfileGraphFromFeature.cs,Execute,The length of the statement  "		MessageBox.Show ("Add the Profile Graph Widget to the view to execute this feature action"' "Profile Graph Widget Required"); " is 125.
Long Statement,OperationsDashboardAddIns,FlickrMapToolbar,C:\repos\TifPun_profileGraph-SearchFlickr-MultiSummary-opsdashboard-addin\OperationsDashboardAddIns\FlickrMapToolbar.xaml.cs,OnActivated,The length of the statement  "	searchOps.Extras = PhotoSearchExtras.AllUrls | PhotoSearchExtras.Description | PhotoSearchExtras.Geo | PhotoSearchExtras.OwnerName; " is 131.
Long Statement,OperationsDashboardAddIns,FlickrMapToolbar,C:\repos\TifPun_profileGraph-SearchFlickr-MultiSummary-opsdashboard-addin\OperationsDashboardAddIns\FlickrMapToolbar.xaml.cs,SearchFlikr_Click,The length of the statement  "				//To avoid copy right infringement' we only pass the placeholder image's path instead of the photo's actual URL to PhotoInfo " is 124.
Long Statement,OperationsDashboardAddIns,FlickrMapToolbar,C:\repos\TifPun_profileGraph-SearchFlickr-MultiSummary-opsdashboard-addin\OperationsDashboardAddIns\FlickrMapToolbar.xaml.cs,SearchFlikr_Click,The length of the statement  "				photoInfos.Add (new PhotoInfo (@"pack://application:'''/OperationsDashboardAddIns;component/Images/PhotoPlaceHolder.png"' photoLocation)); " is 138.
Long Statement,OperationsDashboardAddIns,FlickrMapToolbar,C:\repos\TifPun_profileGraph-SearchFlickr-MultiSummary-opsdashboard-addin\OperationsDashboardAddIns\FlickrMapToolbar.xaml.cs,graphicsLayer_MouseEnter,The length of the statement  "	var photoInfo = photoInfos.FirstOrDefault (pi => pi.Location.X == (pushpin.Geometry as MapPoint).X && pi.Location.Y == (pushpin.Geometry as MapPoint).Y); " is 153.
Long Statement,OperationsDashboardAddIns,StatisticsSummary,C:\repos\TifPun_profileGraph-SearchFlickr-MultiSummary-opsdashboard-addin\OperationsDashboardAddIns\StatisticsSummary.xaml.cs,Configure,The length of the statement  "	Config.StatisticsSummaryDialog dialog = new Config.StatisticsSummaryDialog (Caption' DataSourceId' Field' Statistics' LeadingText' TrailingText) { " is 146.
Long Statement,OperationsDashboardAddIns,StatisticsSummary,C:\repos\TifPun_profileGraph-SearchFlickr-MultiSummary-opsdashboard-addin\OperationsDashboardAddIns\StatisticsSummary.xaml.cs,OnRefresh,The length of the statement  "		//If the map widget is not null (i.e. the data source is a standalone datasource)' enable the Use Current Map Extent checkbox " is 125.
Long Statement,OperationsDashboardAddIns,ProfileService,C:\repos\TifPun_profileGraph-SearchFlickr-MultiSummary-opsdashboard-addin\OperationsDashboardAddIns\Utility\ProfileService.cs,GetProfileLine,The length of the statement  "		string additonalParams = "&ProfileIDField=" + oidField + "&DEMResolution=FINEST&MaximumSampleDistance=10&MaximumSampleDistanceUnits=Kilometers&returnZ=true&returnM=true&env%3AoutSR=102100&env%3AprocessSR=102100&f=json"; " is 219.
Long Statement,OperationsDashboardAddIns,ProfileService,C:\repos\TifPun_profileGraph-SearchFlickr-MultiSummary-opsdashboard-addin\OperationsDashboardAddIns\Utility\ProfileService.cs,GetProfileLine,The length of the statement  "		string profileServiceUrl = string.Format ("{0}submitJob?token={1}&InputLineFeatures={2}{3}"' requestUrlBase' _token.AccessToken' InputLineFeatures' additonalParams); " is 165.
Long Statement,OperationsDashboardAddIns,ProfileService,C:\repos\TifPun_profileGraph-SearchFlickr-MultiSummary-opsdashboard-addin\OperationsDashboardAddIns\Utility\ProfileService.cs,GetProfileLine,The length of the statement  "		while (_jobStatus.Status.Contains ("Executing") || _jobStatus.Status.Contains ("esriJobWaiting") || _jobStatus.Status.Contains ("Submitted")) { " is 143.
Long Statement,OperationsDashboardAddIns,ProfileService,C:\repos\TifPun_profileGraph-SearchFlickr-MultiSummary-opsdashboard-addin\OperationsDashboardAddIns\Utility\ProfileService.cs,GetProfileLine,The length of the statement  "		#region The job has successfully completed. Use the jobId to retrieve the result' then use the result to create a profile line " is 126.
Long Statement,OperationsDashboardAddIns,ProfileService,C:\repos\TifPun_profileGraph-SearchFlickr-MultiSummary-opsdashboard-addin\OperationsDashboardAddIns\Utility\ProfileService.cs,GetProfileLine,The length of the statement  "			string resultsUrl = string.Format ("{0}jobs/{1}/results/OutputProfile?returnZ=true&returnM=true&f=pjson&token={2}"' requestUrlBase' _jobStatus.Id' _token.AccessToken); " is 167.
Long Statement,OperationsDashboardAddIns,ProfileService,C:\repos\TifPun_profileGraph-SearchFlickr-MultiSummary-opsdashboard-addin\OperationsDashboardAddIns\Utility\ProfileService.cs,CreateInputLineFeaturesJson,The length of the statement  "	json += CreatePair ("spatialReference"' ObjectBegin () + CreatePair ("wkid"' "102100") + Next () + CreatePair ("latestWkid"' "3857") + ObjectEnd ()); " is 149.
Long Statement,OperationsDashboardAddIns,ProfileService,C:\repos\TifPun_profileGraph-SearchFlickr-MultiSummary-opsdashboard-addin\OperationsDashboardAddIns\Utility\ProfileService.cs,CreateInputLineFeaturesJson,The length of the statement  "	json += CreatePair ("fields"' ArrayBegin () + ObjectBegin () + CreatePair ("name"' AddDoubleQuotes (oidField)) + Next () + CreatePair ("type"' AddDoubleQuotes ("esriFieldTypeOID")) + ObjectEnd () + Next () + ObjectBegin () + CreatePair ("name"' AddDoubleQuotes (lengthField)) + Next () + CreatePair ("type"' AddDoubleQuotes ("esriFieldTypeDouble")) + ObjectEnd () + ArrayEnd ()); " is 379.
Long Statement,OperationsDashboardAddIns,ProfileService,C:\repos\TifPun_profileGraph-SearchFlickr-MultiSummary-opsdashboard-addin\OperationsDashboardAddIns\Utility\ProfileService.cs,CreateInputLineFeaturesJson,The length of the statement  "	json += CreatePair ("features"' ArrayBegin () + ObjectBegin () + CreatePair ("geometry"' featureGeometryPathObject) + ObjectEnd () + ArrayEnd ()); " is 146.
Long Statement,OperationsDashboardAddIns,FlickrPushpinSymbol,C:\repos\TifPun_profileGraph-SearchFlickr-MultiSummary-opsdashboard-addin\OperationsDashboardAddIns\Utility\Symbols.cs,CreatePushpinSymbol,The length of the statement  "		Source = new BitmapImage (new Uri (@"pack://application:'''/OperationsDashboardAddIns;component/Images/FlickrPin64.png"))' " is 122.
Long Statement,OperationsDashboardAddIns,TokenService,C:\repos\TifPun_profileGraph-SearchFlickr-MultiSummary-opsdashboard-addin\OperationsDashboardAddIns\Utility\Token.cs,GenerateTokenAsync,The length of the statement  "	//For the instructions to obtain the token' read http://resources.arcgis.com/en/help/arcgis-rest-api/index.html#/Accessing_services_provided_by_Esri/02r300000268000000/ " is 168.
Long Statement,OperationsDashboardAddIns,TokenService,C:\repos\TifPun_profileGraph-SearchFlickr-MultiSummary-opsdashboard-addin\OperationsDashboardAddIns\Utility\Token.cs,GenerateTokenAsync,The length of the statement  "	string tokenUrl = string.Format (@"https://www.arcgis.com/sharing/oauth2/token?client_id={0}&grant_type=client_credentials&client_secret={1}&f=pjson"' LoginInfo.client_id' LoginInfo.client_secret); " is 197.
Complex Conditional,OperationsDashboardAddIns.Config,StatisticsSummaryDialog,C:\repos\TifPun_profileGraph-SearchFlickr-MultiSummary-opsdashboard-addin\OperationsDashboardAddIns\Config\StatisticsSummaryDialog.xaml.cs,IsValidField,The conditional expression  "field.Type == client.Field.FieldType.Double || field.Type == client.Field.FieldType.Integer || field.Type == client.Field.FieldType.Single || field.Type == client.Field.FieldType.SmallInteger"  is complex.
Complex Conditional,OperationsDashboardAddIns.Config,StatisticsSummaryDialog,C:\repos\TifPun_profileGraph-SearchFlickr-MultiSummary-opsdashboard-addin\OperationsDashboardAddIns\Config\StatisticsSummaryDialog.xaml.cs,ValidateInput,The conditional expression  "ShowMax == false && ShowMin == false && ShowAvg == false && ShowSum == false"  is complex.
Empty Catch Block,OperationsDashboardAddIns,FlickrMapToolbar,C:\repos\TifPun_profileGraph-SearchFlickr-MultiSummary-opsdashboard-addin\OperationsDashboardAddIns\FlickrMapToolbar.xaml.cs,OnDeactivated,The method has an empty catch block.
Magic Number,OperationsDashboardAddIns,FlickrMapToolbar,C:\repos\TifPun_profileGraph-SearchFlickr-MultiSummary-opsdashboard-addin\OperationsDashboardAddIns\FlickrMapToolbar.xaml.cs,SearchFlikr_Click,The following statement contains a magic number: try {  	pushpinsLayer.Graphics.Clear ();  	//Add a tag to the search options  	searchOps.Tags = SeletcedTag;  	//Add the current extent to the search options  	//FlickrManager only takes latitude and longitude. We might need to transform the extent  	bool isGeographic = _mapWidget.Map.SpatialReference.WKID == 4326;  	WebMercator wm = new WebMercator ();  	Envelope extent = _mapWidget.Map.Extent;  	if (!isGeographic) {  		Envelope extentToGeo = wm.ToGeographic (extent) as Envelope;  		searchOps.BoundaryBox = new BoundaryBox (extentToGeo.XMin' extentToGeo.YMin' extentToGeo.XMax' extentToGeo.YMax);  	}  	else  		searchOps.BoundaryBox = new BoundaryBox (extent.XMin' extent.YMin' extent.XMax' extent.YMax);  	//Do the search asynchronously  	flickr.PhotosSearchAsync (searchOps' (FlickrResult<PhotoCollection> photoColResult) =>  {  		//Searh is finished. Manipulate the search results here  		if (photoColResult.Error != null)  			throw new Exception ("Error in search results");  		PhotoCollection photoCol = photoColResult.Result;  		List<FlickrNet.Photo> pCollPublic = photoCol.Where (p => p.IsPublic && !string.IsNullOrEmpty (p.LargeUrl)).ToList ();  		if (pCollPublic.Count == 0) {  			MessageBox.Show ("No photos were found");  			return;  		}  		foreach (FlickrNet.Photo photo in pCollPublic) {  			//Show a pushpin at the location of the photo. Transformation might be required depending on the map spatial reference  			MapPoint photoLocation;  			if (!isGeographic)  				photoLocation = wm.FromGeographic (new MapPoint (photo.Longitude' photo.Latitude)) as MapPoint;  			else  				photoLocation = new MapPoint (photo.Longitude' photo.Latitude);  			//Create the pushpin graphic with a symbol and the photo location  			client.Graphic pushpin = new client.Graphic () {  				Symbol = FlickrPushpinSymbol.CreatePushpinSymbol ()'  				Geometry = photoLocation  			};  			//Add the graphic to the layer  			pushpinsLayer.Graphics.Add (pushpin);  			//Add the photo info to the photoInfos list   			//To avoid copy right infringement' we only pass the placeholder image's path instead of the photo's actual URL to PhotoInfo  			photoInfos.Add (new PhotoInfo (@"pack://application:'''/OperationsDashboardAddIns;component/Images/PhotoPlaceHolder.png"' photoLocation));  		}  	});  }  catch (Exception ex) {  	MessageBox.Show ("Error searching for photos. " + ex.Message);  }  
Magic Number,OperationsDashboardAddIns,ProfileService,C:\repos\TifPun_profileGraph-SearchFlickr-MultiSummary-opsdashboard-addin\OperationsDashboardAddIns\Utility\ProfileService.cs,GetProfileLine,The following statement contains a magic number: try {  	string requestUrlBase = @"http://elevation.arcgis.com/arcgis/rest/services/Tools/Elevation/GPServer/Profile/";  	//Create the token to use  	TokenService elevationServices = new TokenService ();  	_token = await elevationServices.GenerateTokenAsync ();  	#region Submit a profile task to be executed asynchronously. A unique job ID will be assigned for the transaction.  	string oidField = "OID";  	string lengthField = "Shape_Length";  	string InputLineFeatures = CreateInputLineFeaturesJson (geometry' oidField' lengthField);  	string additonalParams = "&ProfileIDField=" + oidField + "&DEMResolution=FINEST&MaximumSampleDistance=10&MaximumSampleDistanceUnits=Kilometers&returnZ=true&returnM=true&env%3AoutSR=102100&env%3AprocessSR=102100&f=json";  	string profileServiceUrl = string.Format ("{0}submitJob?token={1}&InputLineFeatures={2}{3}"' requestUrlBase' _token.AccessToken' InputLineFeatures' additonalParams);  	System.Net.HttpWebRequest webRequest = (System.Net.HttpWebRequest)System.Net.WebRequest.Create (profileServiceUrl);  	webRequest.Timeout = 0xea60;  	System.Net.WebResponse response = await webRequest.GetResponseAsync ();  	#endregion  	#region Use the jobId to check the status of the job. Keep checking if the jobStatus is not "Succeeded"  	DataContractJsonSerializer serializer = new DataContractJsonSerializer (typeof(JobStatus));  	_jobStatus = (JobStatus)serializer.ReadObject (response.GetResponseStream () as Stream);  	while (_jobStatus.Status.Contains ("Executing") || _jobStatus.Status.Contains ("esriJobWaiting") || _jobStatus.Status.Contains ("Submitted")) {  		string statusUrl = string.Format ("{0}jobs/{1}?f=pjson&token={2}"' requestUrlBase' _jobStatus.Id' _token.AccessToken);  		webRequest = (System.Net.HttpWebRequest)System.Net.WebRequest.Create (statusUrl);  		response = await webRequest.GetResponseAsync ();  		_jobStatus = (JobStatus)serializer.ReadObject (response.GetResponseStream ());  	}  	#endregion  	#region The job has successfully completed. Use the jobId to retrieve the result' then use the result to create a profile line  	if (_jobStatus.Status.Contains ("Succeeded")) {  		string resultsUrl = string.Format ("{0}jobs/{1}/results/OutputProfile?returnZ=true&returnM=true&f=pjson&token={2}"' requestUrlBase' _jobStatus.Id' _token.AccessToken);  		webRequest = (System.Net.HttpWebRequest)System.Net.WebRequest.Create (resultsUrl);  		response = await webRequest.GetResponseAsync ();  		serializer = new DataContractJsonSerializer (typeof(OutputProfile));  		//Parse the result as the output profile line  		_outputProfileLine = (OutputProfile)serializer.ReadObject (response.GetResponseStream ());  		_outputProfileLine.FeatureSet.HasM = true;  		_outputProfileLine.FeatureSet.HasZ = true;  		//Create a polyline (profile) from the geometry of the output profile line  		Polyline profile = new Polyline ();  		foreach (var points in _outputProfileLine.FeatureSet.Features.FirstOrDefault ().Geometry.Paths) {  			PointCollection collection = new PointCollection ();  			foreach (var point in points)  				collection.Add (new MapPoint (Convert.ToDouble (point [0])' //[0] is x  				Convert.ToDouble (point [1])' //[1] is x  				Convert.ToDouble (point [2])' //[2] is z  				Convert.ToDouble (point [3])' //[3] is m  				new ESRI.ArcGIS.Client.Geometry.SpatialReference (102100)));  			profile.Paths.Add (collection);  		}  		return profile;  	}  	return null;  	#endregion  }  catch (Exception) {  	return null;  }  
Magic Number,OperationsDashboardAddIns,ProfileService,C:\repos\TifPun_profileGraph-SearchFlickr-MultiSummary-opsdashboard-addin\OperationsDashboardAddIns\Utility\ProfileService.cs,GetProfileLine,The following statement contains a magic number: try {  	string requestUrlBase = @"http://elevation.arcgis.com/arcgis/rest/services/Tools/Elevation/GPServer/Profile/";  	//Create the token to use  	TokenService elevationServices = new TokenService ();  	_token = await elevationServices.GenerateTokenAsync ();  	#region Submit a profile task to be executed asynchronously. A unique job ID will be assigned for the transaction.  	string oidField = "OID";  	string lengthField = "Shape_Length";  	string InputLineFeatures = CreateInputLineFeaturesJson (geometry' oidField' lengthField);  	string additonalParams = "&ProfileIDField=" + oidField + "&DEMResolution=FINEST&MaximumSampleDistance=10&MaximumSampleDistanceUnits=Kilometers&returnZ=true&returnM=true&env%3AoutSR=102100&env%3AprocessSR=102100&f=json";  	string profileServiceUrl = string.Format ("{0}submitJob?token={1}&InputLineFeatures={2}{3}"' requestUrlBase' _token.AccessToken' InputLineFeatures' additonalParams);  	System.Net.HttpWebRequest webRequest = (System.Net.HttpWebRequest)System.Net.WebRequest.Create (profileServiceUrl);  	webRequest.Timeout = 0xea60;  	System.Net.WebResponse response = await webRequest.GetResponseAsync ();  	#endregion  	#region Use the jobId to check the status of the job. Keep checking if the jobStatus is not "Succeeded"  	DataContractJsonSerializer serializer = new DataContractJsonSerializer (typeof(JobStatus));  	_jobStatus = (JobStatus)serializer.ReadObject (response.GetResponseStream () as Stream);  	while (_jobStatus.Status.Contains ("Executing") || _jobStatus.Status.Contains ("esriJobWaiting") || _jobStatus.Status.Contains ("Submitted")) {  		string statusUrl = string.Format ("{0}jobs/{1}?f=pjson&token={2}"' requestUrlBase' _jobStatus.Id' _token.AccessToken);  		webRequest = (System.Net.HttpWebRequest)System.Net.WebRequest.Create (statusUrl);  		response = await webRequest.GetResponseAsync ();  		_jobStatus = (JobStatus)serializer.ReadObject (response.GetResponseStream ());  	}  	#endregion  	#region The job has successfully completed. Use the jobId to retrieve the result' then use the result to create a profile line  	if (_jobStatus.Status.Contains ("Succeeded")) {  		string resultsUrl = string.Format ("{0}jobs/{1}/results/OutputProfile?returnZ=true&returnM=true&f=pjson&token={2}"' requestUrlBase' _jobStatus.Id' _token.AccessToken);  		webRequest = (System.Net.HttpWebRequest)System.Net.WebRequest.Create (resultsUrl);  		response = await webRequest.GetResponseAsync ();  		serializer = new DataContractJsonSerializer (typeof(OutputProfile));  		//Parse the result as the output profile line  		_outputProfileLine = (OutputProfile)serializer.ReadObject (response.GetResponseStream ());  		_outputProfileLine.FeatureSet.HasM = true;  		_outputProfileLine.FeatureSet.HasZ = true;  		//Create a polyline (profile) from the geometry of the output profile line  		Polyline profile = new Polyline ();  		foreach (var points in _outputProfileLine.FeatureSet.Features.FirstOrDefault ().Geometry.Paths) {  			PointCollection collection = new PointCollection ();  			foreach (var point in points)  				collection.Add (new MapPoint (Convert.ToDouble (point [0])' //[0] is x  				Convert.ToDouble (point [1])' //[1] is x  				Convert.ToDouble (point [2])' //[2] is z  				Convert.ToDouble (point [3])' //[3] is m  				new ESRI.ArcGIS.Client.Geometry.SpatialReference (102100)));  			profile.Paths.Add (collection);  		}  		return profile;  	}  	return null;  	#endregion  }  catch (Exception) {  	return null;  }  
Magic Number,OperationsDashboardAddIns,ProfileService,C:\repos\TifPun_profileGraph-SearchFlickr-MultiSummary-opsdashboard-addin\OperationsDashboardAddIns\Utility\ProfileService.cs,GetProfileLine,The following statement contains a magic number: try {  	string requestUrlBase = @"http://elevation.arcgis.com/arcgis/rest/services/Tools/Elevation/GPServer/Profile/";  	//Create the token to use  	TokenService elevationServices = new TokenService ();  	_token = await elevationServices.GenerateTokenAsync ();  	#region Submit a profile task to be executed asynchronously. A unique job ID will be assigned for the transaction.  	string oidField = "OID";  	string lengthField = "Shape_Length";  	string InputLineFeatures = CreateInputLineFeaturesJson (geometry' oidField' lengthField);  	string additonalParams = "&ProfileIDField=" + oidField + "&DEMResolution=FINEST&MaximumSampleDistance=10&MaximumSampleDistanceUnits=Kilometers&returnZ=true&returnM=true&env%3AoutSR=102100&env%3AprocessSR=102100&f=json";  	string profileServiceUrl = string.Format ("{0}submitJob?token={1}&InputLineFeatures={2}{3}"' requestUrlBase' _token.AccessToken' InputLineFeatures' additonalParams);  	System.Net.HttpWebRequest webRequest = (System.Net.HttpWebRequest)System.Net.WebRequest.Create (profileServiceUrl);  	webRequest.Timeout = 0xea60;  	System.Net.WebResponse response = await webRequest.GetResponseAsync ();  	#endregion  	#region Use the jobId to check the status of the job. Keep checking if the jobStatus is not "Succeeded"  	DataContractJsonSerializer serializer = new DataContractJsonSerializer (typeof(JobStatus));  	_jobStatus = (JobStatus)serializer.ReadObject (response.GetResponseStream () as Stream);  	while (_jobStatus.Status.Contains ("Executing") || _jobStatus.Status.Contains ("esriJobWaiting") || _jobStatus.Status.Contains ("Submitted")) {  		string statusUrl = string.Format ("{0}jobs/{1}?f=pjson&token={2}"' requestUrlBase' _jobStatus.Id' _token.AccessToken);  		webRequest = (System.Net.HttpWebRequest)System.Net.WebRequest.Create (statusUrl);  		response = await webRequest.GetResponseAsync ();  		_jobStatus = (JobStatus)serializer.ReadObject (response.GetResponseStream ());  	}  	#endregion  	#region The job has successfully completed. Use the jobId to retrieve the result' then use the result to create a profile line  	if (_jobStatus.Status.Contains ("Succeeded")) {  		string resultsUrl = string.Format ("{0}jobs/{1}/results/OutputProfile?returnZ=true&returnM=true&f=pjson&token={2}"' requestUrlBase' _jobStatus.Id' _token.AccessToken);  		webRequest = (System.Net.HttpWebRequest)System.Net.WebRequest.Create (resultsUrl);  		response = await webRequest.GetResponseAsync ();  		serializer = new DataContractJsonSerializer (typeof(OutputProfile));  		//Parse the result as the output profile line  		_outputProfileLine = (OutputProfile)serializer.ReadObject (response.GetResponseStream ());  		_outputProfileLine.FeatureSet.HasM = true;  		_outputProfileLine.FeatureSet.HasZ = true;  		//Create a polyline (profile) from the geometry of the output profile line  		Polyline profile = new Polyline ();  		foreach (var points in _outputProfileLine.FeatureSet.Features.FirstOrDefault ().Geometry.Paths) {  			PointCollection collection = new PointCollection ();  			foreach (var point in points)  				collection.Add (new MapPoint (Convert.ToDouble (point [0])' //[0] is x  				Convert.ToDouble (point [1])' //[1] is x  				Convert.ToDouble (point [2])' //[2] is z  				Convert.ToDouble (point [3])' //[3] is m  				new ESRI.ArcGIS.Client.Geometry.SpatialReference (102100)));  			profile.Paths.Add (collection);  		}  		return profile;  	}  	return null;  	#endregion  }  catch (Exception) {  	return null;  }  
Magic Number,OperationsDashboardAddIns,ProfileService,C:\repos\TifPun_profileGraph-SearchFlickr-MultiSummary-opsdashboard-addin\OperationsDashboardAddIns\Utility\ProfileService.cs,GetProfileLine,The following statement contains a magic number: if (_jobStatus.Status.Contains ("Succeeded")) {  	string resultsUrl = string.Format ("{0}jobs/{1}/results/OutputProfile?returnZ=true&returnM=true&f=pjson&token={2}"' requestUrlBase' _jobStatus.Id' _token.AccessToken);  	webRequest = (System.Net.HttpWebRequest)System.Net.WebRequest.Create (resultsUrl);  	response = await webRequest.GetResponseAsync ();  	serializer = new DataContractJsonSerializer (typeof(OutputProfile));  	//Parse the result as the output profile line  	_outputProfileLine = (OutputProfile)serializer.ReadObject (response.GetResponseStream ());  	_outputProfileLine.FeatureSet.HasM = true;  	_outputProfileLine.FeatureSet.HasZ = true;  	//Create a polyline (profile) from the geometry of the output profile line  	Polyline profile = new Polyline ();  	foreach (var points in _outputProfileLine.FeatureSet.Features.FirstOrDefault ().Geometry.Paths) {  		PointCollection collection = new PointCollection ();  		foreach (var point in points)  			collection.Add (new MapPoint (Convert.ToDouble (point [0])' //[0] is x  			Convert.ToDouble (point [1])' //[1] is x  			Convert.ToDouble (point [2])' //[2] is z  			Convert.ToDouble (point [3])' //[3] is m  			new ESRI.ArcGIS.Client.Geometry.SpatialReference (102100)));  		profile.Paths.Add (collection);  	}  	return profile;  }  
Magic Number,OperationsDashboardAddIns,ProfileService,C:\repos\TifPun_profileGraph-SearchFlickr-MultiSummary-opsdashboard-addin\OperationsDashboardAddIns\Utility\ProfileService.cs,GetProfileLine,The following statement contains a magic number: if (_jobStatus.Status.Contains ("Succeeded")) {  	string resultsUrl = string.Format ("{0}jobs/{1}/results/OutputProfile?returnZ=true&returnM=true&f=pjson&token={2}"' requestUrlBase' _jobStatus.Id' _token.AccessToken);  	webRequest = (System.Net.HttpWebRequest)System.Net.WebRequest.Create (resultsUrl);  	response = await webRequest.GetResponseAsync ();  	serializer = new DataContractJsonSerializer (typeof(OutputProfile));  	//Parse the result as the output profile line  	_outputProfileLine = (OutputProfile)serializer.ReadObject (response.GetResponseStream ());  	_outputProfileLine.FeatureSet.HasM = true;  	_outputProfileLine.FeatureSet.HasZ = true;  	//Create a polyline (profile) from the geometry of the output profile line  	Polyline profile = new Polyline ();  	foreach (var points in _outputProfileLine.FeatureSet.Features.FirstOrDefault ().Geometry.Paths) {  		PointCollection collection = new PointCollection ();  		foreach (var point in points)  			collection.Add (new MapPoint (Convert.ToDouble (point [0])' //[0] is x  			Convert.ToDouble (point [1])' //[1] is x  			Convert.ToDouble (point [2])' //[2] is z  			Convert.ToDouble (point [3])' //[3] is m  			new ESRI.ArcGIS.Client.Geometry.SpatialReference (102100)));  		profile.Paths.Add (collection);  	}  	return profile;  }  
Magic Number,OperationsDashboardAddIns,ProfileService,C:\repos\TifPun_profileGraph-SearchFlickr-MultiSummary-opsdashboard-addin\OperationsDashboardAddIns\Utility\ProfileService.cs,GetProfileLine,The following statement contains a magic number: if (_jobStatus.Status.Contains ("Succeeded")) {  	string resultsUrl = string.Format ("{0}jobs/{1}/results/OutputProfile?returnZ=true&returnM=true&f=pjson&token={2}"' requestUrlBase' _jobStatus.Id' _token.AccessToken);  	webRequest = (System.Net.HttpWebRequest)System.Net.WebRequest.Create (resultsUrl);  	response = await webRequest.GetResponseAsync ();  	serializer = new DataContractJsonSerializer (typeof(OutputProfile));  	//Parse the result as the output profile line  	_outputProfileLine = (OutputProfile)serializer.ReadObject (response.GetResponseStream ());  	_outputProfileLine.FeatureSet.HasM = true;  	_outputProfileLine.FeatureSet.HasZ = true;  	//Create a polyline (profile) from the geometry of the output profile line  	Polyline profile = new Polyline ();  	foreach (var points in _outputProfileLine.FeatureSet.Features.FirstOrDefault ().Geometry.Paths) {  		PointCollection collection = new PointCollection ();  		foreach (var point in points)  			collection.Add (new MapPoint (Convert.ToDouble (point [0])' //[0] is x  			Convert.ToDouble (point [1])' //[1] is x  			Convert.ToDouble (point [2])' //[2] is z  			Convert.ToDouble (point [3])' //[3] is m  			new ESRI.ArcGIS.Client.Geometry.SpatialReference (102100)));  		profile.Paths.Add (collection);  	}  	return profile;  }  
Magic Number,OperationsDashboardAddIns,ProfileService,C:\repos\TifPun_profileGraph-SearchFlickr-MultiSummary-opsdashboard-addin\OperationsDashboardAddIns\Utility\ProfileService.cs,GetProfileLine,The following statement contains a magic number: foreach (var points in _outputProfileLine.FeatureSet.Features.FirstOrDefault ().Geometry.Paths) {  	PointCollection collection = new PointCollection ();  	foreach (var point in points)  		collection.Add (new MapPoint (Convert.ToDouble (point [0])' //[0] is x  		Convert.ToDouble (point [1])' //[1] is x  		Convert.ToDouble (point [2])' //[2] is z  		Convert.ToDouble (point [3])' //[3] is m  		new ESRI.ArcGIS.Client.Geometry.SpatialReference (102100)));  	profile.Paths.Add (collection);  }  
Magic Number,OperationsDashboardAddIns,ProfileService,C:\repos\TifPun_profileGraph-SearchFlickr-MultiSummary-opsdashboard-addin\OperationsDashboardAddIns\Utility\ProfileService.cs,GetProfileLine,The following statement contains a magic number: foreach (var points in _outputProfileLine.FeatureSet.Features.FirstOrDefault ().Geometry.Paths) {  	PointCollection collection = new PointCollection ();  	foreach (var point in points)  		collection.Add (new MapPoint (Convert.ToDouble (point [0])' //[0] is x  		Convert.ToDouble (point [1])' //[1] is x  		Convert.ToDouble (point [2])' //[2] is z  		Convert.ToDouble (point [3])' //[3] is m  		new ESRI.ArcGIS.Client.Geometry.SpatialReference (102100)));  	profile.Paths.Add (collection);  }  
Magic Number,OperationsDashboardAddIns,ProfileService,C:\repos\TifPun_profileGraph-SearchFlickr-MultiSummary-opsdashboard-addin\OperationsDashboardAddIns\Utility\ProfileService.cs,GetProfileLine,The following statement contains a magic number: foreach (var points in _outputProfileLine.FeatureSet.Features.FirstOrDefault ().Geometry.Paths) {  	PointCollection collection = new PointCollection ();  	foreach (var point in points)  		collection.Add (new MapPoint (Convert.ToDouble (point [0])' //[0] is x  		Convert.ToDouble (point [1])' //[1] is x  		Convert.ToDouble (point [2])' //[2] is z  		Convert.ToDouble (point [3])' //[3] is m  		new ESRI.ArcGIS.Client.Geometry.SpatialReference (102100)));  	profile.Paths.Add (collection);  }  
Magic Number,OperationsDashboardAddIns,ProfileService,C:\repos\TifPun_profileGraph-SearchFlickr-MultiSummary-opsdashboard-addin\OperationsDashboardAddIns\Utility\ProfileService.cs,GetProfileLine,The following statement contains a magic number: foreach (var point in points)  	collection.Add (new MapPoint (Convert.ToDouble (point [0])' //[0] is x  	Convert.ToDouble (point [1])' //[1] is x  	Convert.ToDouble (point [2])' //[2] is z  	Convert.ToDouble (point [3])' //[3] is m  	new ESRI.ArcGIS.Client.Geometry.SpatialReference (102100)));  
Magic Number,OperationsDashboardAddIns,ProfileService,C:\repos\TifPun_profileGraph-SearchFlickr-MultiSummary-opsdashboard-addin\OperationsDashboardAddIns\Utility\ProfileService.cs,GetProfileLine,The following statement contains a magic number: foreach (var point in points)  	collection.Add (new MapPoint (Convert.ToDouble (point [0])' //[0] is x  	Convert.ToDouble (point [1])' //[1] is x  	Convert.ToDouble (point [2])' //[2] is z  	Convert.ToDouble (point [3])' //[3] is m  	new ESRI.ArcGIS.Client.Geometry.SpatialReference (102100)));  
Magic Number,OperationsDashboardAddIns,ProfileService,C:\repos\TifPun_profileGraph-SearchFlickr-MultiSummary-opsdashboard-addin\OperationsDashboardAddIns\Utility\ProfileService.cs,GetProfileLine,The following statement contains a magic number: foreach (var point in points)  	collection.Add (new MapPoint (Convert.ToDouble (point [0])' //[0] is x  	Convert.ToDouble (point [1])' //[1] is x  	Convert.ToDouble (point [2])' //[2] is z  	Convert.ToDouble (point [3])' //[3] is m  	new ESRI.ArcGIS.Client.Geometry.SpatialReference (102100)));  
Magic Number,OperationsDashboardAddIns,ProfileService,C:\repos\TifPun_profileGraph-SearchFlickr-MultiSummary-opsdashboard-addin\OperationsDashboardAddIns\Utility\ProfileService.cs,GetProfileLine,The following statement contains a magic number: collection.Add (new MapPoint (Convert.ToDouble (point [0])' //[0] is x  Convert.ToDouble (point [1])' //[1] is x  Convert.ToDouble (point [2])' //[2] is z  Convert.ToDouble (point [3])' //[3] is m  new ESRI.ArcGIS.Client.Geometry.SpatialReference (102100)));  
Magic Number,OperationsDashboardAddIns,ProfileService,C:\repos\TifPun_profileGraph-SearchFlickr-MultiSummary-opsdashboard-addin\OperationsDashboardAddIns\Utility\ProfileService.cs,GetProfileLine,The following statement contains a magic number: collection.Add (new MapPoint (Convert.ToDouble (point [0])' //[0] is x  Convert.ToDouble (point [1])' //[1] is x  Convert.ToDouble (point [2])' //[2] is z  Convert.ToDouble (point [3])' //[3] is m  new ESRI.ArcGIS.Client.Geometry.SpatialReference (102100)));  
Magic Number,OperationsDashboardAddIns,ProfileService,C:\repos\TifPun_profileGraph-SearchFlickr-MultiSummary-opsdashboard-addin\OperationsDashboardAddIns\Utility\ProfileService.cs,GetProfileLine,The following statement contains a magic number: collection.Add (new MapPoint (Convert.ToDouble (point [0])' //[0] is x  Convert.ToDouble (point [1])' //[1] is x  Convert.ToDouble (point [2])' //[2] is z  Convert.ToDouble (point [3])' //[3] is m  new ESRI.ArcGIS.Client.Geometry.SpatialReference (102100)));  
