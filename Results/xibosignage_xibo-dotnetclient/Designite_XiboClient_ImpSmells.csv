Implementation smell,Namespace,Class,File,Method,Description
Long Method,XiboClient,MainForm,C:\repos\xibosignage_xibo-dotnetclient\MainForm.cs,PrepareLayout,The method has 196 lines of code.
Long Method,XiboClient,MainForm,C:\repos\xibosignage_xibo-dotnetclient\MainForm.cs,ManageOverlays,The method has 142 lines of code.
Long Method,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The method has 448 lines of code.
Long Method,XiboClient,Region,C:\repos\xibosignage_xibo-dotnetclient\Control\Region.cs,ParseOptionsForMediaNode,The method has 141 lines of code.
Long Method,XiboClient,RequiredFiles,C:\repos\xibosignage_xibo-dotnetclient\Logic\RequiredFiles.cs,SetRequiredFiles,The method has 145 lines of code.
Long Method,XiboClient,ScheduleManager,C:\repos\xibosignage_xibo-dotnetclient\Logic\ScheduleManager.cs,LoadNewSchedule,The method has 111 lines of code.
Long Method,XiboClient.Log,ClientInfo,C:\repos\xibosignage_xibo-dotnetclient\Log\ClientInfo.cs,InitializeComponent,The method has 219 lines of code.
Long Method,XiboClient.XmdsAgents,FileAgent,C:\repos\xibosignage_xibo-dotnetclient\XmdsAgents\FileAgent.cs,Run,The method has 165 lines of code.
Long Method,XiboClient.XmdsAgents,ScheduleAndFilesAgent,C:\repos\xibosignage_xibo-dotnetclient\XmdsAgents\ScheduleAndFilesAgent.cs,Run,The method has 117 lines of code.
Complex Method,XiboClient,MainForm,C:\repos\xibosignage_xibo-dotnetclient\MainForm.cs,PrepareLayout,Cyclomatic complexity of the method is 15
Complex Method,XiboClient,MainForm,C:\repos\xibosignage_xibo-dotnetclient\MainForm.cs,ManageOverlays,Cyclomatic complexity of the method is 13
Complex Method,XiboClient,Region,C:\repos\xibosignage_xibo-dotnetclient\Control\Region.cs,EvalOptions,Cyclomatic complexity of the method is 8
Complex Method,XiboClient,Region,C:\repos\xibosignage_xibo-dotnetclient\Control\Region.cs,SetNextMediaNodeInOptions,Cyclomatic complexity of the method is 12
Complex Method,XiboClient,Region,C:\repos\xibosignage_xibo-dotnetclient\Control\Region.cs,ParseOptionsForMediaNode,Cyclomatic complexity of the method is 16
Complex Method,XiboClient,RequiredFiles,C:\repos\xibosignage_xibo-dotnetclient\Logic\RequiredFiles.cs,SetRequiredFiles,Cyclomatic complexity of the method is 9
Complex Method,XiboClient,Schedule,C:\repos\xibosignage_xibo-dotnetclient\Logic\Schedule.cs,LayoutFileModified,Cyclomatic complexity of the method is 10
Complex Method,XiboClient,ScheduleManager,C:\repos\xibosignage_xibo-dotnetclient\Logic\ScheduleManager.cs,IsNewScheduleAvailable,Cyclomatic complexity of the method is 8
Complex Method,XiboClient,ScheduleManager,C:\repos\xibosignage_xibo-dotnetclient\Logic\ScheduleManager.cs,LoadNewSchedule,Cyclomatic complexity of the method is 11
Complex Method,XiboClient,ScheduleManager,C:\repos\xibosignage_xibo-dotnetclient\Logic\ScheduleManager.cs,LoadNewOverlaySchedule,Cyclomatic complexity of the method is 11
Complex Method,XiboClient,ScheduleManager,C:\repos\xibosignage_xibo-dotnetclient\Logic\ScheduleManager.cs,ParseNodeIntoScheduleItem,Cyclomatic complexity of the method is 12
Long Parameter List,XiboClient,LogMessage,C:\repos\xibosignage_xibo-dotnetclient\Log\LogMessage.cs,LogMessage,The method has 5 parameters. Parameters: method' message' scheduleId' layoutId' mediaId
Long Parameter List,XiboClient.xmds,xmds,C:\repos\xibosignage_xibo-dotnetclient\Web References\xmds\Reference.cs,RegisterDisplay,The method has 10 parameters. Parameters: serverKey' hardwareKey' displayName' clientType' clientVersion' clientCode' operatingSystem' macAddress' xmrChannel' xmrPubKey
Long Parameter List,XiboClient.xmds,xmds,C:\repos\xibosignage_xibo-dotnetclient\Web References\xmds\Reference.cs,RegisterDisplayAsync,The method has 10 parameters. Parameters: serverKey' hardwareKey' displayName' clientType' clientVersion' clientCode' operatingSystem' macAddress' xmrChannel' xmrPubKey
Long Parameter List,XiboClient.xmds,xmds,C:\repos\xibosignage_xibo-dotnetclient\Web References\xmds\Reference.cs,RegisterDisplayAsync,The method has 11 parameters. Parameters: serverKey' hardwareKey' displayName' clientType' clientVersion' clientCode' operatingSystem' macAddress' xmrChannel' xmrPubKey' userState
Long Parameter List,XiboClient.xmds,xmds,C:\repos\xibosignage_xibo-dotnetclient\Web References\xmds\Reference.cs,GetFile,The method has 6 parameters. Parameters: serverKey' hardwareKey' fileId' fileType' chunkOffset' chuckSize
Long Parameter List,XiboClient.xmds,xmds,C:\repos\xibosignage_xibo-dotnetclient\Web References\xmds\Reference.cs,GetFileAsync,The method has 6 parameters. Parameters: serverKey' hardwareKey' fileId' fileType' chunkOffset' chuckSize
Long Parameter List,XiboClient.xmds,xmds,C:\repos\xibosignage_xibo-dotnetclient\Web References\xmds\Reference.cs,GetFileAsync,The method has 7 parameters. Parameters: serverKey' hardwareKey' fileId' fileType' chunkOffset' chuckSize' userState
Long Parameter List,XiboClient.xmds,xmds,C:\repos\xibosignage_xibo-dotnetclient\Web References\xmds\Reference.cs,BlackList,The method has 5 parameters. Parameters: serverKey' hardwareKey' mediaId' type' reason
Long Parameter List,XiboClient.xmds,xmds,C:\repos\xibosignage_xibo-dotnetclient\Web References\xmds\Reference.cs,BlackListAsync,The method has 5 parameters. Parameters: serverKey' hardwareKey' mediaId' type' reason
Long Parameter List,XiboClient.xmds,xmds,C:\repos\xibosignage_xibo-dotnetclient\Web References\xmds\Reference.cs,BlackListAsync,The method has 6 parameters. Parameters: serverKey' hardwareKey' mediaId' type' reason' userState
Long Parameter List,XiboClient.xmds,xmds,C:\repos\xibosignage_xibo-dotnetclient\Web References\xmds\Reference.cs,GetResource,The method has 5 parameters. Parameters: serverKey' hardwareKey' layoutId' regionId' mediaId
Long Parameter List,XiboClient.xmds,xmds,C:\repos\xibosignage_xibo-dotnetclient\Web References\xmds\Reference.cs,GetResourceAsync,The method has 5 parameters. Parameters: serverKey' hardwareKey' layoutId' regionId' mediaId
Long Parameter List,XiboClient.xmds,xmds,C:\repos\xibosignage_xibo-dotnetclient\Web References\xmds\Reference.cs,GetResourceAsync,The method has 6 parameters. Parameters: serverKey' hardwareKey' layoutId' regionId' mediaId' userState
Long Identifier,XiboClient,ApplicationSettings,C:\repos\xibosignage_xibo-dotnetclient\Logic\ApplicationSettings.cs,,The length of the parameter _xmdsErrorCountSinceSuccessful is 30.
Long Identifier,XiboClient.xmds,xmds,C:\repos\xibosignage_xibo-dotnetclient\Web References\xmds\Reference.cs,,The length of the parameter RegisterDisplayOperationCompleted is 33.
Long Identifier,XiboClient.xmds,xmds,C:\repos\xibosignage_xibo-dotnetclient\Web References\xmds\Reference.cs,,The length of the parameter RequiredFilesOperationCompleted is 31.
Long Identifier,XiboClient.xmds,xmds,C:\repos\xibosignage_xibo-dotnetclient\Web References\xmds\Reference.cs,,The length of the parameter MediaInventoryOperationCompleted is 32.
Long Identifier,XiboClient.xmds,xmds,C:\repos\xibosignage_xibo-dotnetclient\Web References\xmds\Reference.cs,,The length of the parameter NotifyStatusOperationCompleted is 30.
Long Identifier,XiboClient.xmds,xmds,C:\repos\xibosignage_xibo-dotnetclient\Web References\xmds\Reference.cs,,The length of the parameter SubmitScreenShotOperationCompleted is 34.
Long Identifier,XiboClient.xmds,xmds,C:\repos\xibosignage_xibo-dotnetclient\Web References\xmds\Reference.cs,,The length of the parameter useDefaultCredentialsSetExplicitly is 34.
Long Statement,XiboClient.Control,EmbeddedServer,C:\repos\xibosignage_xibo-dotnetclient\Control\EmbeddedServer.cs,Run,The length of the statement  "                Trace.WriteLine(new LogMessage("EmbeddedServer - Run"' "Exception running server: " + e.Message)' LogType.Error.ToString()); " is 124.
Long Statement,XiboClient.Control,WatchDogManager,C:\repos\xibosignage_xibo-dotnetclient\Control\WatchDogManager.cs,Start,The length of the statement  "            string path = Path.GetDirectoryName(Application.ExecutablePath) + @"\watchdog\x86\" + ((Application.ProductName != "Xibo") ? Application.ProductName + "Watchdog.exe" : "XiboClientWatchdog.exe"); " is 194.
Long Statement,XiboClient,BlackList,C:\repos\xibosignage_xibo-dotnetclient\Logic\BlackList.cs,Add,The length of the statement  "                System.Diagnostics.Trace.WriteLine(String.Format("Currently can only append Integer media types. Id {0}"' id)' "BlackList - Add"); " is 130.
Long Statement,XiboClient,BlackList,C:\repos\xibosignage_xibo-dotnetclient\Logic\BlackList.cs,Add,The length of the statement  "            xmds1.BlackListAsync(ApplicationSettings.Default.ServerKey' hardwareKey.Key' mediaId' type.ToString()' reason' ApplicationSettings.Default.Version); " is 148.
Long Statement,XiboClient,CacheManager,C:\repos\xibosignage_xibo-dotnetclient\Logic\CacheManager.cs,GetMD5,The length of the statement  "                        Trace.WriteLine(new LogMessage("GetMD5"' path + " has been written to since cache' recalculating")' LogType.Audit.ToString()); " is 126.
Long Statement,XiboClient,CacheManager,C:\repos\xibosignage_xibo-dotnetclient\Logic\CacheManager.cs,CalcMD5,The length of the statement  "                using (FileStream md5Fs = new FileStream(ApplicationSettings.Default.LibraryPath + @"\" + path' FileMode.Open' FileAccess.Read)) " is 128.
Long Statement,XiboClient,CacheManager,C:\repos\xibosignage_xibo-dotnetclient\Logic\CacheManager.cs,Remove,The length of the statement  "                        System.Diagnostics.Debug.WriteLine(new LogMessage("Remove"' "Removing stale MD5 from the CacheManager")' LogType.Info.ToString()); " is 130.
Long Statement,XiboClient,CacheManager,C:\repos\xibosignage_xibo-dotnetclient\Logic\CacheManager.cs,WriteCacheManager,The length of the statement  "                Debug.WriteLine(new LogMessage("CacheManager - WriteCacheManager"' "About to Write the Cache Manager")' LogType.Info.ToString()); " is 129.
Long Statement,XiboClient,CacheManager,C:\repos\xibosignage_xibo-dotnetclient\Logic\CacheManager.cs,WriteCacheManager,The length of the statement  "                    using (StreamWriter streamWriter = new StreamWriter(ApplicationSettings.Default.LibraryPath + @"\" + ApplicationSettings.Default.CacheManagerFile)) " is 147.
Long Statement,XiboClient,CacheManager,C:\repos\xibosignage_xibo-dotnetclient\Logic\CacheManager.cs,IsValidPath,The length of the statement  "                            Trace.WriteLine(new LogMessage("IsValid"' "Unable to determine if the file is valid. Assuming not valid: " + ex.Message)' LogType.Error.ToString()); " is 148.
Long Statement,XiboClient,ApplicationSettings,C:\repos\xibosignage_xibo-dotnetclient\Logic\ApplicationSettings.cs,AppendConfigFile,The length of the statement  "                    Trace.WriteLine(new LogMessage("ApplicationSettings - AppendConfigFile"' "Unable to load config file.")' LogType.Error.ToString()); " is 131.
Long Statement,XiboClient,ApplicationSettings,C:\repos\xibosignage_xibo-dotnetclient\Logic\ApplicationSettings.cs,Save,The length of the statement  "                        Trace.WriteLine(new LogMessage("PopulateFromXml"' "Unable to write [" + property.Name + "].")' LogType.Info.ToString()); " is 120.
Long Statement,XiboClient,ApplicationSettings,C:\repos\xibosignage_xibo-dotnetclient\Logic\ApplicationSettings.cs,PopulateFromXml,The length of the statement  "                        Trace.WriteLine(new LogMessage("PopulateFromXml"' "XML configuration for [" + node.Name + "] which this player doesn't understand.")' LogType.Info.ToString()); " is 159.
Long Statement,XiboClient,Audio,C:\repos\xibosignage_xibo-dotnetclient\Media\Audio.cs,Dispose,The length of the statement  "                Trace.WriteLine(new LogMessage("Audio - Dispose"' "Problem disposing of the Video Player. Ex = " + e.Message)' LogType.Audit.ToString()); " is 137.
Long Statement,XiboClient,IeWebMedia,C:\repos\xibosignage_xibo-dotnetclient\Media\IeWebMedia.cs,HtmlReady,The length of the statement  "            else if (_options.LayoutModifiedDate.CompareTo(lastWriteDate) > 0 || DateTime.Now.CompareTo(lastWriteDate.AddMinutes(_options.updateInterval)) > 0) " is 147.
Long Statement,XiboClient,IeWebMedia,C:\repos\xibosignage_xibo-dotnetclient\Media\IeWebMedia.cs,RefreshFromXmds,The length of the statement  "            xmds.GetResourceAsync(ApplicationSettings.Default.ServerKey' ApplicationSettings.Default.HardwareKey' _options.layoutId' _options.regionId' _options.mediaid' ApplicationSettings.Default.Version); " is 195.
Long Statement,XiboClient,IeWebMedia,C:\repos\xibosignage_xibo-dotnetclient\Media\IeWebMedia.cs,xmds_GetResourceCompleted,The length of the statement  "                    Trace.WriteLine(new LogMessage("xmds_GetResource"' "Unable to get Resource: " + e.Error.Message)' LogType.Info.ToString()); " is 123.
Long Statement,XiboClient,IeWebMedia,C:\repos\xibosignage_xibo-dotnetclient\Media\IeWebMedia.cs,xmds_GetResourceCompleted,The length of the statement  "                            Trace.WriteLine(new LogMessage("xmds_GetResource"' "We haven't been able to download this widget and there isn't a pre-cached one to use. Skipping.")' LogType.Info.ToString()); " is 176.
Long Statement,XiboClient,IeWebMedia,C:\repos\xibosignage_xibo-dotnetclient\Media\IeWebMedia.cs,xmds_GetResourceCompleted,The length of the statement  "                    // Ammend the resource file so that we can open it directly from the library (this is better than using a tempoary file) " is 120.
Long Statement,XiboClient,IeWebMedia,C:\repos\xibosignage_xibo-dotnetclient\Media\IeWebMedia.cs,xmds_GetResourceCompleted,The length of the statement  "                        bodyStyle = "background-image: url('" + _options.backgroundImage + "'); background-attachment:fixed; background-color:" + backgroundColor + "; background-repeat: no-repeat; background-position: " + _options.backgroundLeft + "px " + _options.backgroundTop + "px;"; " is 263.
Long Statement,XiboClient,IeWebMedia,C:\repos\xibosignage_xibo-dotnetclient\Media\IeWebMedia.cs,xmds_GetResourceCompleted,The length of the statement  "                Trace.WriteLine(new LogMessage("WebMedia"' "Retrived the resource' stored the document but the media has already expired.")' LogType.Error.ToString()); " is 151.
Long Statement,XiboClient,IeWebMedia,C:\repos\xibosignage_xibo-dotnetclient\Media\IeWebMedia.cs,UpdateCacheIfNecessary,The length of the statement  "            // Ammend the resource file so that we can open it directly from the library (this is better than using a tempoary file) " is 120.
Long Statement,XiboClient,IeWebMedia,C:\repos\xibosignage_xibo-dotnetclient\Media\IeWebMedia.cs,UpdateCacheIfNecessary,The length of the statement  "                    bodyStyle = "background-image: url('" + _options.backgroundImage + "'); background-attachment:fixed; background-color:" + backgroundColor + "; background-repeat: no-repeat; background-position: " + _options.backgroundLeft + "px " + _options.backgroundTop + "px;"; " is 263.
Long Statement,XiboClient,IeWebMedia,C:\repos\xibosignage_xibo-dotnetclient\Media\IeWebMedia.cs,Dispose,The length of the statement  "                    Trace.WriteLine(new LogMessage("IeWebMedia - Dispose"' "Cannot dispose of web browser. E = " + e.Message)' LogType.Info.ToString()); " is 132.
Long Statement,XiboClient,Flash,C:\repos\xibosignage_xibo-dotnetclient\Media\Flash.cs,GenerateHeadHtml,The length of the statement  "                bodyStyle = "background-image: url('" + _backgroundImage + "'); background-attachment:fixed; background-color:" + _backgroundColor + " background-repeat: no-repeat; background-position: " + _backgroundLeft + " " + _backgroundTop + ";"; " is 235.
Long Statement,XiboClient,Flash,C:\repos\xibosignage_xibo-dotnetclient\Media\Flash.cs,Dispose,The length of the statement  "                    Trace.WriteLine(new LogMessage("Dispose"' String.Format("Unable to dispose TemporaryHtml with exception {0}"' ex.Message))); " is 124.
Long Statement,XiboClient,HardwareKey,C:\repos\xibosignage_xibo-dotnetclient\Logic\HardwareKey.cs,getXmrKey,The length of the statement  "                        using (TextReader textReader = new StringReader(File.ReadAllText(ApplicationSettings.Default.LibraryPath + "\\id_rsa"))) " is 120.
Long Statement,XiboClient,HardwareKey,C:\repos\xibosignage_xibo-dotnetclient\Logic\HardwareKey.cs,getXmrKey,The length of the statement  "                        Trace.WriteLine(new LogMessage("HardwareKey - getXmrKey"' "Unable to read existing key. e=" + e.Message)' LogType.Audit.ToString()); " is 132.
Long Statement,XiboClient,HardwareKey,C:\repos\xibosignage_xibo-dotnetclient\Logic\HardwareKey.cs,getXmrPublicKey,The length of the statement  "                Trace.WriteLine(new LogMessage("HardwareKey - getXmrPublicKey"' "Unable to get XMR public key. E = " + e.Message)' LogType.Error.ToString()); " is 141.
Long Statement,XiboClient,ImagePosition,C:\repos\xibosignage_xibo-dotnetclient\Media\Image.cs,Dispose,The length of the statement  "                    System.Diagnostics.Trace.WriteLine(new LogMessage("Image - Dispose"' String.Format("Cannot dispose Image Object with exception: {0}"' ex.Message))' LogType.Error.ToString()); " is 174.
Long Statement,XiboClient,MainForm,C:\repos\xibosignage_xibo-dotnetclient\MainForm.cs,InitializeXibo,The length of the statement  "            KeyStore.Instance.AddKeyDefinition("ClientInfo"' key' ((ApplicationSettings.Default.ClientInfomationCtrlKey) ? Keys.Control : Keys.None)); " is 138.
Long Statement,XiboClient,MainForm,C:\repos\xibosignage_xibo-dotnetclient\MainForm.cs,InitializeXibo,The length of the statement  "                    File.WriteAllText(Path.Combine(ApplicationSettings.Default.LibraryPath' "status.json")' "{\"lastActivity\":\"" + DateTime.Now.ToString() + "\"}"); " is 146.
Long Statement,XiboClient,MainForm,C:\repos\xibosignage_xibo-dotnetclient\MainForm.cs,InitializeXibo,The length of the statement  "                    Trace.WriteLine(new LogMessage("MainForm - InitializeXibo"' "Cannot start watchdog. E = " + e.Message)' LogType.Error.ToString()); " is 130.
Long Statement,XiboClient,MainForm,C:\repos\xibosignage_xibo-dotnetclient\MainForm.cs,MainForm_Shown,The length of the statement  "                _schedule = new Schedule(ApplicationSettings.Default.LibraryPath + @"\" + ApplicationSettings.Default.ScheduleFile' ref _cacheManager' ref _clientInfoForm); " is 156.
Long Statement,XiboClient,MainForm,C:\repos\xibosignage_xibo-dotnetclient\MainForm.cs,MainForm_Load,The length of the statement  "            Debug.WriteLine(new LogMessage("MainForm_Load"' "User AppData Path: " + ApplicationSettings.Default.LibraryPath)' LogType.Info.ToString()); " is 139.
Long Statement,XiboClient,MainForm,C:\repos\xibosignage_xibo-dotnetclient\MainForm.cs,SetCacheManager,The length of the statement  "                using (FileStream fileStream = File.Open(ApplicationSettings.Default.LibraryPath + @"\" + ApplicationSettings.Default.CacheManagerFile' FileMode.Open)) " is 151.
Long Statement,XiboClient,MainForm,C:\repos\xibosignage_xibo-dotnetclient\MainForm.cs,SetCacheManager,The length of the statement  "                Trace.WriteLine(new LogMessage("MainForm - SetCacheManager"' "Unable to reuse the Cache Manager because: " + ex.Message)); " is 122.
Long Statement,XiboClient,MainForm,C:\repos\xibosignage_xibo-dotnetclient\MainForm.cs,ScheduleChangeEvent,The length of the statement  "            Trace.WriteLine(new LogMessage("MainForm - ScheduleChangeEvent"' string.Format("Schedule Changing to {0}"' layoutPath))' LogType.Audit.ToString()); " is 147.
Long Statement,XiboClient,MainForm,C:\repos\xibosignage_xibo-dotnetclient\MainForm.cs,ChangeToNextLayout,The length of the statement  "                    SetThreadExecutionState(EXECUTION_STATE.ES_DISPLAY_REQUIRED | EXECUTION_STATE.ES_SYSTEM_REQUIRED | EXECUTION_STATE.ES_CONTINUOUS); " is 130.
Long Statement,XiboClient,MainForm,C:\repos\xibosignage_xibo-dotnetclient\MainForm.cs,ChangeToNextLayout,The length of the statement  "                    Trace.WriteLine(new LogMessage("MainForm - ChangeToNextLayout"' "Unable to set Thread Execution state")' LogType.Info.ToString()); " is 130.
Long Statement,XiboClient,MainForm,C:\repos\xibosignage_xibo-dotnetclient\MainForm.cs,ChangeToNextLayout,The length of the statement  "                    Trace.WriteLine(new LogMessage("MainForm - ChangeToNextLayout"' "Destroy Layout Failed. Exception raised was: " + e.Message)' LogType.Info.ToString()); " is 151.
Long Statement,XiboClient,MainForm,C:\repos\xibosignage_xibo-dotnetclient\MainForm.cs,ChangeToNextLayout,The length of the statement  "                    Trace.WriteLine(new LogMessage("MainForm - ChangeToNextLayout"' "Prepare Layout Failed. Exception raised was: " + e.Message)' LogType.Info.ToString()); " is 151.
Long Statement,XiboClient,MainForm,C:\repos\xibosignage_xibo-dotnetclient\MainForm.cs,ChangeToNextLayout,The length of the statement  "                            statusXmds.NotifyStatusAsync(ApplicationSettings.Default.ServerKey' ApplicationSettings.Default.HardwareKey' "{\"currentLayoutId\":" + _layoutId + "}"); " is 152.
Long Statement,XiboClient,MainForm,C:\repos\xibosignage_xibo-dotnetclient\MainForm.cs,ChangeToNextLayout,The length of the statement  "                    Trace.WriteLine(new LogMessage("MainForm - ChangeToNextLayout"' "Notify Status Failed. Exception raised was: " + e.Message)' LogType.Info.ToString()); " is 150.
Long Statement,XiboClient,MainForm,C:\repos\xibosignage_xibo-dotnetclient\MainForm.cs,ChangeToNextLayout,The length of the statement  "                    Trace.WriteLine(new LogMessage("MainForm - ChangeToNextLayout"' "Layout Change to " + layoutPath + " failed. Exception raised was: " + ex.Message)' LogType.Error.ToString()); " is 174.
Long Statement,XiboClient,MainForm,C:\repos\xibosignage_xibo-dotnetclient\MainForm.cs,PrepareLayout,The length of the statement  "                    Trace.WriteLine(new LogMessage("MainForm - PrepareLayout"' "IOException: " + ioEx.ToString())' LogType.Error.ToString()); " is 121.
Long Statement,XiboClient,MainForm,C:\repos\xibosignage_xibo-dotnetclient\MainForm.cs,PrepareLayout,The length of the statement  "                    string bgFilePath = ApplicationSettings.Default.LibraryPath + @"\backgrounds\" + backgroundWidth + "x" + backgroundHeight + "_" + layoutAttributes["background"].Value; " is 167.
Long Statement,XiboClient,MainForm,C:\repos\xibosignage_xibo-dotnetclient\MainForm.cs,PrepareLayout,The length of the statement  "                    options.backgroundImage = @"/backgrounds/" + backgroundWidth + "x" + backgroundHeight + "_" + layoutAttributes["background"].Value; ; " is 133.
Long Statement,XiboClient,MainForm,C:\repos\xibosignage_xibo-dotnetclient\MainForm.cs,PrepareLayout,The length of the statement  "                Trace.WriteLine(new LogMessage("MainForm - PrepareLayout"' "Unable to set background: " + ex.Message)' LogType.Error.ToString()); " is 129.
Long Statement,XiboClient,MainForm,C:\repos\xibosignage_xibo-dotnetclient\MainForm.cs,PrepareLayout,The length of the statement  "                    string.Format("A layout with {0} regions and {1} media has been detected."' listRegions.Count.ToString()' listMedia.Count.ToString()))' " is 135.
Long Statement,XiboClient,MainForm,C:\repos\xibosignage_xibo-dotnetclient\MainForm.cs,PrepareLayout,The length of the statement  "                    Trace.WriteLine(new LogMessage("PrepareLayout"' "Only 1 layout scheduled and it has nothing to show.")' LogType.Info.ToString()); " is 129.
Long Statement,XiboClient,MainForm,C:\repos\xibosignage_xibo-dotnetclient\MainForm.cs,PrepareLayout,The length of the statement  "                        string.Format(string.Format("An empty layout detected' will show for {0} seconds."' ApplicationSettings.Default.EmptyLayoutDuration.ToString())))' LogType.Info.ToString()); " is 172.
Long Statement,XiboClient,MainForm,C:\repos\xibosignage_xibo-dotnetclient\MainForm.cs,PrepareLayout,The length of the statement  "                    dummyXml.LoadXml(string.Format("<region id='blah' width='1' height='1' top='1' left='1'><media id='blah' type='text' duration='{0}'><raw><text></text></raw></media></region>"' " is 175.
Long Statement,XiboClient,MainForm,C:\repos\xibosignage_xibo-dotnetclient\MainForm.cs,GenerateBackgroundImage,The length of the statement  "            Trace.WriteLine(new LogMessage("MainForm - GenerateBackgroundImage"' "Trying to generate a background image. It will be saved: " + bgFilePath)' LogType.Audit.ToString()); " is 170.
Long Statement,XiboClient,MainForm,C:\repos\xibosignage_xibo-dotnetclient\MainForm.cs,temp_DurationElapsedEvent,The length of the statement  "                Trace.WriteLine(new LogMessage("MainForm - DurationElapsedEvent"' "Already Changing Layout")' LogType.Audit.ToString()); " is 120.
Long Statement,XiboClient,MainForm,C:\repos\xibosignage_xibo-dotnetclient\MainForm.cs,temp_DurationElapsedEvent,The length of the statement  "                Trace.WriteLine(new LogMessage("MainForm - DurationElapsedEvent"' "All Regions have expired. Raising a Next layout event.")' LogType.Audit.ToString()); " is 151.
Long Statement,XiboClient,MainForm,C:\repos\xibosignage_xibo-dotnetclient\MainForm.cs,DestroyLayout,The length of the statement  "                        Trace.WriteLine(new LogMessage("MainForm - DestoryLayout"' "Calling Dispose on Region " + region.regionOptions.regionId)' LogType.Audit.ToString()); " is 148.
Long Statement,XiboClient,MainForm,C:\repos\xibosignage_xibo-dotnetclient\MainForm.cs,FlushStats,The length of the statement  "                System.Diagnostics.Trace.WriteLine(new LogMessage("MainForm - FlushStats"' "Unable to Flush Stats")' LogType.Error.ToString()); " is 127.
Long Statement,XiboClient,MainForm,C:\repos\xibosignage_xibo-dotnetclient\MainForm.cs,ManageOverlays,The length of the statement  "                        Trace.WriteLine(new LogMessage("MainForm - _schedule_OverlayChangeEvent"' string.Format("Could not find the layout file {0}: {1}"' layoutPath' ex.Message))' LogType.Info.ToString()); " is 182.
Long Statement,XiboClient,MainForm,C:\repos\xibosignage_xibo-dotnetclient\MainForm.cs,ManageOverlays,The length of the statement  "                Trace.WriteLine(new LogMessage("MainForm - _schedule_OverlayChangeEvent"' "Unknown issue managing overlays. Ex = " + e.Message)' LogType.Info.ToString()); " is 154.
Long Statement,XiboClient,MainForm,C:\repos\xibosignage_xibo-dotnetclient\MainForm.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(MainForm)); " is 128.
Long Statement,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,SetGlobalProxy,The length of the statement  "                NetworkCredential nc = new NetworkCredential(ApplicationSettings.Default.ProxyUser' ApplicationSettings.Default.ProxyPassword); " is 127.
Long Statement,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,SetGlobalProxy,The length of the statement  "            ServicePointManager.ServerCertificateValidationCallback += delegate(object sender' X509Certificate certificate' X509Chain chain' System.Net.Security.SslPolicyErrors sslPolicyErrors) " is 181.
Long Statement,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The length of the statement  "            this.label1.Font = new System.Drawing.Font("Arial"' 14.25F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 142.
Long Statement,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The length of the statement  "            this.label2.Font = new System.Drawing.Font("Arial"' 14.25F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 142.
Long Statement,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The length of the statement  "            this.label3.Font = new System.Drawing.Font("Arial"' 14.25F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 142.
Long Statement,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The length of the statement  "            this.buttonSaveSettings.Font = new System.Drawing.Font("Arial"' 8.25F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 153.
Long Statement,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The length of the statement  "            this.label9.Font = new System.Drawing.Font("Arial"' 14.25F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 142.
Long Statement,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The length of the statement  "            this.buttonLibrary.Font = new System.Drawing.Font("Arial"' 8.25F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 148.
Long Statement,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The length of the statement  "            this.tbHardwareKey.Font = new System.Drawing.Font("Arial"' 14.25F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 149.
Long Statement,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The length of the statement  "            this.textBoxXmdsUri.Font = new System.Drawing.Font("Arial"' 14.25F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 150.
Long Statement,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The length of the statement  "            this.textBoxServerKey.Font = new System.Drawing.Font("Arial"' 14.25F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 152.
Long Statement,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The length of the statement  "            this.textBoxLibraryPath.Font = new System.Drawing.Font("Arial"' 14.25F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 154.
Long Statement,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The length of the statement  "            this.buttonDisplayAdmin.Font = new System.Drawing.Font("Arial"' 8.25F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 153.
Long Statement,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The length of the statement  "            this.textBoxProxyDomain.Font = new System.Drawing.Font("Arial"' 14.25F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 154.
Long Statement,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The length of the statement  "            this.maskedTextBoxProxyPass.Font = new System.Drawing.Font("Arial"' 14.25F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 158.
Long Statement,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The length of the statement  "            this.textBoxProxyUser.Font = new System.Drawing.Font("Arial"' 14.25F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 152.
Long Statement,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The length of the statement  "            this.labelProxyDomain.Font = new System.Drawing.Font("Arial"' 14.25F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 152.
Long Statement,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The length of the statement  "            this.labelProxyPass.Font = new System.Drawing.Font("Arial"' 14.25F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 150.
Long Statement,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The length of the statement  "            this.labelProxyUser.Font = new System.Drawing.Font("Arial"' 14.25F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 150.
Long Statement,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The length of the statement  "            this.splashButtonBrowse.Font = new System.Drawing.Font("Arial"' 8.25F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 153.
Long Statement,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The length of the statement  "            this.linkLabel1.Font = new System.Drawing.Font("Arial"' 12F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 143.
Long Statement,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The length of the statement  "            this.label17.Font = new System.Drawing.Font("Arial"' 12F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 140.
Long Statement,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The length of the statement  "            this.label16.Font = new System.Drawing.Font("Arial"' 14.25F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 143.
Long Statement,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The length of the statement  "            this.splashOverride.Font = new System.Drawing.Font("Arial"' 14.25F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 150.
Long Statement,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The length of the statement  "            this.tbStatus.Font = new System.Drawing.Font("Arial"' 12F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 141.
Long Statement,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The length of the statement  "            this.buttonExit.Font = new System.Drawing.Font("Arial"' 8.25F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 145.
Long Statement,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The length of the statement  "            this.button1.Font = new System.Drawing.Font("Arial"' 8.25F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 142.
Long Statement,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The length of the statement  "            this.label5.Font = new System.Drawing.Font("Microsoft Sans Serif"' 14.25F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 157.
Long Statement,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The length of the statement  "            this.label4.Font = new System.Drawing.Font("Microsoft Sans Serif"' 14.25F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 157.
Long Statement,XiboClient,Region,C:\repos\xibosignage_xibo-dotnetclient\Control\Region.cs,EvalOptions,The length of the statement  "                    Trace.WriteLine(new LogMessage("Region - Eval Options"' "Unable to create new " + _options.type + "  object: " + ex.Message)' LogType.Error.ToString()); " is 152.
Long Statement,XiboClient,Region,C:\repos\xibosignage_xibo-dotnetclient\Control\Region.cs,EvalOptions,The length of the statement  "                    Trace.WriteLine(new LogMessage("Region - Eval Options"' "Unable to start new " + _options.type + "  object: " + ex.Message)' LogType.Error.ToString()); " is 151.
Long Statement,XiboClient,Region,C:\repos\xibosignage_xibo-dotnetclient\Control\Region.cs,SetNextMediaNodeInOptions,The length of the statement  "                    Trace.WriteLine(new LogMessage("Region - SetNextMediaNodeInOptions"' "Unable to dispose of audio item")' LogType.Audit.ToString()); " is 131.
Long Statement,XiboClient,Region,C:\repos\xibosignage_xibo-dotnetclient\Control\Region.cs,SetNextMediaNodeInOptions,The length of the statement  "                    Trace.WriteLine(new LogMessage("Region - SetNextMediaNode"' "Media Expired:" + _options.ToString() + " . Reached the end of the sequence. Starting from the beginning.")' LogType.Audit.ToString()); " is 196.
Long Statement,XiboClient,Region,C:\repos\xibosignage_xibo-dotnetclient\Control\Region.cs,SetNextMediaNodeInOptions,The length of the statement  "                    Trace.WriteLine(new LogMessage("Region - SetNextMediaNode"' string.Format("MediaID [{0}] has been blacklisted."' _options.mediaid))' LogType.Error.ToString()); " is 159.
Long Statement,XiboClient,Region,C:\repos\xibosignage_xibo-dotnetclient\Control\Region.cs,SetNextMediaNodeInOptions,The length of the statement  "                if (_options.type == "video" || _options.type == "flash" || _options.type == "image" || _options.type == "powerpoint" || _options.type == "audio") " is 146.
Long Statement,XiboClient,Region,C:\repos\xibosignage_xibo-dotnetclient\Control\Region.cs,SetNextMediaNodeInOptions,The length of the statement  "            Trace.WriteLine(new LogMessage("Region - SetNextMediaNode"' "New media detected " + _options.type)' LogType.Audit.ToString()); " is 126.
Long Statement,XiboClient,Region,C:\repos\xibosignage_xibo-dotnetclient\Control\Region.cs,CreateNextMediaNode,The length of the statement  "            Trace.WriteLine(new LogMessage("Region - CreateNextMediaNode"' string.Format("Creating new media: {0}' {1}"' options.type' options.mediaid))' LogType.Audit.ToString()); " is 168.
Long Statement,XiboClient,Region,C:\repos\xibosignage_xibo-dotnetclient\Control\Region.cs,audio_DurationElapsedEvent,The length of the statement  "                Trace.WriteLine(new LogMessage("Region - audio_DurationElapsedEvent"' "Audio -  Unable to dispose. Ex = " + ex.Message)' LogType.Audit.ToString()); " is 147.
Long Statement,XiboClient,Region,C:\repos\xibosignage_xibo-dotnetclient\Control\Region.cs,StopMedia,The length of the statement  "                Trace.WriteLine(new LogMessage("Region - Stop Media"' "Unable to dispose. Ex = " + ex.Message)' LogType.Audit.ToString()); " is 122.
Long Statement,XiboClient,Region,C:\repos\xibosignage_xibo-dotnetclient\Control\Region.cs,StopAudio,The length of the statement  "                    Trace.WriteLine(new LogMessage("Region - Stop Media"' "Audio -  Unable to dispose. Ex = " + ex.Message)' LogType.Audit.ToString()); " is 131.
Long Statement,XiboClient,Region,C:\repos\xibosignage_xibo-dotnetclient\Control\Region.cs,CloseCurrentStatRecord,The length of the statement  "                Trace.WriteLine(new LogMessage("Region - StopMedia"' "No Stat record when one was expected")' LogType.Error.ToString()); " is 120.
Long Statement,XiboClient,Region,C:\repos\xibosignage_xibo-dotnetclient\Control\Region.cs,media_DurationElapsedEvent,The length of the statement  "            Trace.WriteLine(new LogMessage("Region - DurationElapsedEvent"' string.Format("Media Elapsed: {0}"' _options.uri))' LogType.Audit.ToString()); " is 142.
Long Statement,XiboClient,Region,C:\repos\xibosignage_xibo-dotnetclient\Control\Region.cs,Dispose,The length of the statement  "                    Trace.WriteLine(new LogMessage("Region - Dispose"' "Unable to dispose audio for media. Ex = " + ex.Message)' LogType.Audit.ToString()); " is 135.
Long Statement,XiboClient,Region,C:\repos\xibosignage_xibo-dotnetclient\Control\Region.cs,Dispose,The length of the statement  "                    Trace.WriteLine(new LogMessage("Region - Dispose"' "Unable to dispose media. Ex = " + ex.Message)' LogType.Audit.ToString()); " is 125.
Long Statement,XiboClient,RequiredFiles,C:\repos\xibosignage_xibo-dotnetclient\Logic\RequiredFiles.cs,SetRequiredFiles,The length of the statement  "                    rf.SaveAs = (attributes["saveAs"] == null || string.IsNullOrEmpty(attributes["saveAs"].Value)) ? rf.Path : attributes["saveAs"].Value; " is 134.
Long Statement,XiboClient,RequiredFiles,C:\repos\xibosignage_xibo-dotnetclient\Logic\RequiredFiles.cs,SetRequiredFiles,The length of the statement  "                    Trace.WriteLine(new LogMessage("RequiredFiles - SetRequiredFiles"' "Duplicate file detected' ignoring. FileId = " + rf.Id)' LogType.Audit.ToString()); " is 150.
Long Statement,XiboClient,RequiredFiles,C:\repos\xibosignage_xibo-dotnetclient\Logic\RequiredFiles.cs,SetRequiredFiles,The length of the statement  "                        Trace.WriteLine(new LogMessage("RequiredFiles - SetRequiredFiles"' "MD5 different for existing file: " + rf.SaveAs)' LogType.Info.ToString()); " is 142.
Long Statement,XiboClient,RequiredFiles,C:\repos\xibosignage_xibo-dotnetclient\Logic\RequiredFiles.cs,SetRequiredFiles,The length of the statement  "                    // File does not exist' therefore remove it from the cache manager (on the off chance that it is in there for some reason) " is 122.
Long Statement,XiboClient,RequiredFiles,C:\repos\xibosignage_xibo-dotnetclient\Logic\RequiredFiles.cs,WriteRequiredFiles,The length of the statement  "                Debug.WriteLine(new LogMessage("RequiredFiles - WriteRequiredFiles"' "About to Write RequiredFiles")' LogType.Info.ToString()); " is 127.
Long Statement,XiboClient,RequiredFiles,C:\repos\xibosignage_xibo-dotnetclient\Logic\RequiredFiles.cs,WriteRequiredFiles,The length of the statement  "                    using (StreamWriter streamWriter = new StreamWriter(ApplicationSettings.Default.LibraryPath + @"\" + ApplicationSettings.Default.RequiredFilesFile)) " is 148.
Long Statement,XiboClient,RequiredFiles,C:\repos\xibosignage_xibo-dotnetclient\Logic\RequiredFiles.cs,WriteRequiredFiles,The length of the statement  "                    Trace.WriteLine(new LogMessage("RequiredFiles - WriteRequiredFiles"' "Unable to write RequiredFiles to disk because: " + ex.Message)); " is 134.
Long Statement,XiboClient,RequiredFiles,C:\repos\xibosignage_xibo-dotnetclient\Logic\RequiredFiles.cs,LoadFromDisk,The length of the statement  "                using (FileStream fileStream = File.Open(ApplicationSettings.Default.LibraryPath + @"\" + ApplicationSettings.Default.RequiredFilesFile' FileMode.Open)) " is 152.
Long Statement,XiboClient,Schedule,C:\repos\xibosignage_xibo-dotnetclient\Logic\Schedule.cs,_scheduleManager_OnScheduleManagerCheckComplete,The length of the statement  "            bool xmrShouldBeRunning = (!string.IsNullOrEmpty(ApplicationSettings.Default.XmrNetworkAddress) && _xmrSubscriber.LastHeartBeat != DateTime.MinValue); " is 150.
Long Statement,XiboClient,Schedule,C:\repos\xibosignage_xibo-dotnetclient\Logic\Schedule.cs,_scheduleManager_OnScheduleManagerCheckComplete,The length of the statement  "                Trace.WriteLine(new LogMessage("Schedule - OnScheduleManagerCheckComplete"' "Agent threads/XMR is dead' not updating status.json")' LogType.Error.ToString()); " is 158.
Long Statement,XiboClient,Schedule,C:\repos\xibosignage_xibo-dotnetclient\Logic\Schedule.cs,_scheduleManager_OnScheduleManagerCheckComplete,The length of the statement  "                _clientInfoForm.XmrSubscriberStatus = "Long term Inactive (" + ApplicationSettings.Default.XmrNetworkAddress + ")' last activity: " + _xmrSubscriber.LastHeartBeat.ToString(); " is 174.
Long Statement,XiboClient,Schedule,C:\repos\xibosignage_xibo-dotnetclient\Logic\Schedule.cs,_scheduleManager_OnScheduleManagerCheckComplete,The length of the statement  "                Trace.WriteLine(new LogMessage("Schedule - OnScheduleManagerCheckComplete"' "XMR heart beat last received over an hour ago.")); " is 127.
Long Statement,XiboClient,Schedule,C:\repos\xibosignage_xibo-dotnetclient\Logic\Schedule.cs,_scheduleManager_OnScheduleManagerCheckComplete,The length of the statement  "                _clientInfoForm.XmrSubscriberStatus = "Inactive (" + ApplicationSettings.Default.XmrNetworkAddress + ")' last activity: " + _xmrSubscriber.LastHeartBeat.ToString(); " is 164.
Long Statement,XiboClient,Schedule,C:\repos\xibosignage_xibo-dotnetclient\Logic\Schedule.cs,_scheduleManager_OnScheduleManagerCheckComplete,The length of the statement  "                Trace.WriteLine(new LogMessage("Schedule - OnScheduleManagerCheckComplete"' "XMR heart beat last received over 5 minutes ago.")' LogType.Audit.ToString()); " is 155.
Long Statement,XiboClient,Schedule,C:\repos\xibosignage_xibo-dotnetclient\Logic\Schedule.cs,restartXmr,The length of the statement  "                Trace.WriteLine(new LogMessage("Schedule - restartXmr"' "Unable to restart XMR: " + e.Message)' LogType.Error.ToString()); " is 122.
Long Statement,XiboClient,Schedule,C:\repos\xibosignage_xibo-dotnetclient\Logic\Schedule.cs,NextLayout,The length of the statement  "                Trace.WriteLine(new LogMessage("Schedule - NextLayout"' "Unable to check layout change actions. E = " + e.Message)' LogType.Error.ToString()); " is 142.
Long Statement,XiboClient,Schedule,C:\repos\xibosignage_xibo-dotnetclient\Logic\Schedule.cs,NextLayout,The length of the statement  "                Debug.WriteLine(new LogMessage("Schedule - NextLayout"' "Only 1 layout showing' refreshing it")' LogType.Info.ToString()); " is 122.
Long Statement,XiboClient,Schedule,C:\repos\xibosignage_xibo-dotnetclient\Logic\Schedule.cs,NextLayout,The length of the statement  "            Debug.WriteLine(String.Format("Next layout: {0}"' _layoutSchedule[_currentLayout].layoutFile)' "Schedule - Next Layout"); " is 121.
Long Statement,XiboClient,Schedule,C:\repos\xibosignage_xibo-dotnetclient\Logic\Schedule.cs,NextLayout,The length of the statement  "            ScheduleChangeEvent(_layoutSchedule[_currentLayout].layoutFile' _layoutSchedule[_currentLayout].scheduleid' _layoutSchedule[_currentLayout].id); " is 144.
Long Statement,XiboClient,Schedule,C:\repos\xibosignage_xibo-dotnetclient\Logic\Schedule.cs,LayoutFileModified,The length of the statement  "            Trace.WriteLine(new LogMessage("Schedule - LayoutFileModified"' "Layout file changed: " + layoutPath)' LogType.Info.ToString()); " is 128.
Long Statement,XiboClient,Schedule,C:\repos\xibosignage_xibo-dotnetclient\Logic\Schedule.cs,LayoutFileModified,The length of the statement  "                        Trace.WriteLine(new LogMessage("Schedule - LayoutFileModified"' "The current layout is now invalid' refreshing the current schedule.")' LogType.Audit.ToString()); " is 162.
Long Statement,XiboClient,Schedule,C:\repos\xibosignage_xibo-dotnetclient\Logic\Schedule.cs,LayoutFileModified,The length of the statement  "                        Trace.WriteLine(new LogMessage("Schedule - LayoutFileModified"' "Forcing the current layout to change: " + layoutPath)' LogType.Audit.ToString()); " is 146.
Long Statement,XiboClient,Schedule,C:\repos\xibosignage_xibo-dotnetclient\Logic\Schedule.cs,LayoutFileModified,The length of the statement  "                Trace.WriteLine(new LogMessage("fileCollector_LayoutFileChanged"' String.Format("Unable to determine current layout with exception {0}"' ex.Message))' LogType.Error.ToString()); " is 177.
Long Statement,XiboClient,ScheduleManager,C:\repos\xibosignage_xibo-dotnetclient\Logic\ScheduleManager.cs,Run,The length of the statement  "                        if (ApplicationSettings.Default.ScreenShotRequestInterval > 0 && DateTime.Now > _lastScreenShotDate.AddMinutes(ApplicationSettings.Default.ScreenShotRequestInterval)) " is 166.
Long Statement,XiboClient,ScheduleManager,C:\repos\xibosignage_xibo-dotnetclient\Logic\ScheduleManager.cs,Run,The length of the statement  "                                    Trace.WriteLine(new LogMessage("ScheduleManager - Run"' "Cannot start Thread to Run Command: " + e.Message)' LogType.Error.ToString()); " is 135.
Long Statement,XiboClient,ScheduleManager,C:\repos\xibosignage_xibo-dotnetclient\Logic\ScheduleManager.cs,IsNewScheduleAvailable,The length of the statement  "                    Trace.WriteLine(new LogMessage("IsNewScheduleAvailable"' string.Format("Unable to load schedule from disk: {0}"' ex.Message))'  " is 126.
Long Statement,XiboClient,ScheduleManager,C:\repos\xibosignage_xibo-dotnetclient\Logic\ScheduleManager.cs,IsNewScheduleAvailable,The length of the statement  "                    Trace.WriteLine(new LogMessage("ScheduleManager - IsNewScheduleAvailable"' "New Schedule does not contain " + layout.id)' LogType.Audit.ToString()); " is 148.
Long Statement,XiboClient,ScheduleManager,C:\repos\xibosignage_xibo-dotnetclient\Logic\ScheduleManager.cs,IsNewScheduleAvailable,The length of the statement  "            Trace.WriteLine(new LogMessage("ScheduleManager - IsNewScheduleAvailable"' "Layouts in Current Schedule: " + string.Join(Environment.NewLine' currentScheduleString))' LogType.Audit.ToString()); " is 193.
Long Statement,XiboClient,ScheduleManager,C:\repos\xibosignage_xibo-dotnetclient\Logic\ScheduleManager.cs,IsNewScheduleAvailable,The length of the statement  "            Trace.WriteLine(new LogMessage("ScheduleManager - IsNewScheduleAvailable"' "Layouts in New Schedule: " + string.Join(Environment.NewLine' newScheduleString))' LogType.Audit.ToString()); " is 185.
Long Statement,XiboClient,ScheduleManager,C:\repos\xibosignage_xibo-dotnetclient\Logic\ScheduleManager.cs,LoadNewSchedule,The length of the statement  "                    Trace.WriteLine(new LogMessage("ScheduleManager - LoadNewSchedule"' "Skipping validity test for current layout.")' LogType.Audit.ToString()); " is 141.
Long Statement,XiboClient,ScheduleManager,C:\repos\xibosignage_xibo-dotnetclient\Logic\ScheduleManager.cs,LoadNewSchedule,The length of the statement  "                            Trace.WriteLine(new LogMessage("ScheduleManager - LoadNewSchedule"' "Layout invalid: " + layout.id)' LogType.Info.ToString()); " is 126.
Long Statement,XiboClient,ScheduleManager,C:\repos\xibosignage_xibo-dotnetclient\Logic\ScheduleManager.cs,LoadNewSchedule,The length of the statement  "                        Trace.WriteLine(new LogMessage("ScheduleManager - LoadNewSchedule"' "Unable to determine if layout is valid or not")' LogType.Error.ToString()); " is 144.
Long Statement,XiboClient,ScheduleManager,C:\repos\xibosignage_xibo-dotnetclient\Logic\ScheduleManager.cs,LoadNewSchedule,The length of the statement  "                            Trace.WriteLine(new LogMessage("ScheduleManager - LoadNewSchedule"' "Layout has invalid dependent: " + dependent)' LogType.Info.ToString()); " is 140.
Long Statement,XiboClient,ScheduleManager,C:\repos\xibosignage_xibo-dotnetclient\Logic\ScheduleManager.cs,LoadNewOverlaySchedule,The length of the statement  "                            Trace.WriteLine(new LogMessage("ScheduleManager - LoadNewOverlaySchedule"' "Layout invalid: " + layout.id)' LogType.Info.ToString()); " is 133.
Long Statement,XiboClient,ScheduleManager,C:\repos\xibosignage_xibo-dotnetclient\Logic\ScheduleManager.cs,LoadNewOverlaySchedule,The length of the statement  "                        Trace.WriteLine(new LogMessage("ScheduleManager - LoadNewOverlaySchedule"' "Unable to determine if layout is valid or not")' LogType.Error.ToString()); " is 151.
Long Statement,XiboClient,ScheduleManager,C:\repos\xibosignage_xibo-dotnetclient\Logic\ScheduleManager.cs,LoadNewOverlaySchedule,The length of the statement  "                            Trace.WriteLine(new LogMessage("ScheduleManager - LoadNewOverlaySchedule"' "Layout has invalid dependent: " + dependent)' LogType.Info.ToString()); " is 147.
Long Statement,XiboClient,ScheduleManager,C:\repos\xibosignage_xibo-dotnetclient\Logic\ScheduleManager.cs,GetScheduleXmlString,The length of the statement  "                Trace.WriteLine(new LogMessage("ScheduleManager - GetScheduleXmlString"' "Getting the Schedule XML")' LogType.Audit.ToString()); " is 128.
Long Statement,XiboClient,ScheduleManager,C:\repos\xibosignage_xibo-dotnetclient\Logic\ScheduleManager.cs,GetScheduleXmlString,The length of the statement  "                    using (FileStream fileStream = File.Open(scheduleLocation' FileMode.OpenOrCreate' FileAccess.ReadWrite' FileShare.ReadWrite)) " is 125.
Long Statement,XiboClient,ScheduleManager,C:\repos\xibosignage_xibo-dotnetclient\Logic\ScheduleManager.cs,LayoutsInSchedule,The length of the statement  "                layoutsInSchedule += "LayoutId: " + layoutSchedule.id + ". Runs from " + layoutSchedule.FromDt.ToString() + Environment.NewLine; " is 128.
Long Statement,XiboClient,ScheduleManager,C:\repos\xibosignage_xibo-dotnetclient\Logic\ScheduleManager.cs,LayoutsInSchedule,The length of the statement  "                layoutsInSchedule += "Overlay LayoutId: " + layoutSchedule.id + ". Runs from " + layoutSchedule.FromDt.ToString() + Environment.NewLine; " is 136.
Long Statement,XiboClient,ShellCommand,C:\repos\xibosignage_xibo-dotnetclient\Media\ShellCommand.cs,RenderMedia,The length of the statement  "                    statusXmds.NotifyStatusAsync(ApplicationSettings.Default.ServerKey' ApplicationSettings.Default.HardwareKey' "{\"lastCommandSuccess\":" + success + "}"); " is 153.
Long Statement,XiboClient,ShellCommand,C:\repos\xibosignage_xibo-dotnetclient\Media\ShellCommand.cs,RenderMedia,The length of the statement  "                            Trace.WriteLine(new LogMessage("ShellCommand - RenderMedia"' "Shell Commands not in allow list: " + ApplicationSettings.Default.ShellCommandAllowList)' LogType.Error.ToString()); " is 178.
Long Statement,XiboClient,ShellCommand,C:\repos\xibosignage_xibo-dotnetclient\Media\ShellCommand.cs,TerminateCommand,The length of the statement  "                Trace.WriteLine(new LogMessage("ShellCommand - TerminateCommand"' "ProcessID empty for command: " + _command)' LogType.Error.ToString()); " is 137.
Long Statement,XiboClient,StatLog,C:\repos\xibosignage_xibo-dotnetclient\Log\StatLog.cs,RecordStat,The length of the statement  "            Debug.WriteLine(String.Format("Recording a Stat Record. Current Count = {0}"' _stats.Count.ToString())' LogType.Audit.ToString()); " is 130.
Long Statement,XiboClient,StatLog,C:\repos\xibosignage_xibo-dotnetclient\Log\StatLog.cs,FlushToFile,The length of the statement  "                using (FileStream fileStream = File.Open(string.Format("{0}_{1}"' ApplicationSettings.Default.LibraryPath + @"\" + ApplicationSettings.Default.StatsLogFile' DateTime.Now.ToFileTimeUtc().ToString())' FileMode.Append' FileAccess.Write' FileShare.Read)) " is 250.
Long Statement,XiboClient,StatLog,C:\repos\xibosignage_xibo-dotnetclient\Log\StatLog.cs,FlushToFile,The length of the statement  "                Trace.WriteLine(new LogMessage("FlushToFile"' String.Format("Error writing stats to file with exception {0}"' ex.Message))' LogType.Error.ToString()); " is 150.
Long Statement,XiboClient,Stat,C:\repos\xibosignage_xibo-dotnetclient\Log\StatLog.cs,ToString,The length of the statement  "            theMessage = String.Format("<stat type=\"{0}\" fromdt=\"{1}\" todt=\"{2}\" layoutid=\"{3}\" scheduleid=\"{4}\" mediaid=\"{5}\"></stat>"' type' fromDate' toDate' layoutID.ToString()' scheduleID.ToString()' mediaID); " is 214.
Long Statement,XiboClient,Video,C:\repos\xibosignage_xibo-dotnetclient\Media\Video.cs,Dispose,The length of the statement  "                Trace.WriteLine(new LogMessage("Video - Dispose"' "Problem disposing of the Video Player. Ex = " + e.Message)' LogType.Audit.ToString()); " is 137.
Long Statement,XiboClient,VideoPlayer,C:\repos\xibosignage_xibo-dotnetclient\Media\VideoPlayer.cs,axWindowsMediaPlayer1_ErrorEvent,The length of the statement  "            Trace.WriteLine(new LogMessage("VideoPlayer - ErrorEvent"' axWindowsMediaPlayer1.URL + ". Ex = " + error)' LogType.Error.ToString()); " is 133.
Long Statement,XiboClient,VideoPlayer,C:\repos\xibosignage_xibo-dotnetclient\Media\VideoPlayer.cs,axWMP_PlayStateChange,The length of the statement  "                    Trace.WriteLine(new LogMessage("VideoPlayer - Playstate Complete"' "Video end handler is null")' LogType.Audit.ToString()); " is 123.
Long Statement,XiboClient,VideoPlayer,C:\repos\xibosignage_xibo-dotnetclient\Media\VideoPlayer.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(VideoPlayer)); " is 131.
Long Statement,XiboClient,VideoPlayer,C:\repos\xibosignage_xibo-dotnetclient\Media\VideoPlayer.cs,InitializeComponent,The length of the statement  "            this.axWindowsMediaPlayer1.OcxState = ((System.Windows.Forms.AxHost.State)(resources.GetObject("axWindowsMediaPlayer1.OcxState"))); " is 131.
Long Statement,XiboClient,XiboTraceListener,C:\repos\xibosignage_xibo-dotnetclient\Log\XiboTraceListener.cs,FlushToFile,The length of the statement  "                using (FileStream fileStream = File.Open(string.Format("{0}_{1}"' _logPath' DateTime.Now.ToFileTimeUtc().ToString())' FileMode.Append' FileAccess.Write' FileShare.Read)) " is 169.
Long Statement,XiboClient,XiboTraceListener,C:\repos\xibosignage_xibo-dotnetclient\Log\XiboTraceListener.cs,FlushToFile,The length of the statement  "                            theMessage = string.Format("<trace date=\"{0}\" category=\"{1}\">{2}</trace>"' message.dateTime' message.category' traceMsg); " is 125.
Long Statement,XiboClient.Logic,Command,C:\repos\xibosignage_xibo-dotnetclient\Action\Command.cs,Run,The length of the statement  "                throw new ArgumentNullException("Command string is empty' please check your Display Profile " + Code + " command for a valid command string."); " is 143.
Long Statement,XiboClient.Logic,Rs232Command,C:\repos\xibosignage_xibo-dotnetclient\Action\Rs232Command.cs,Run,The length of the statement  "            Trace.WriteLine(new LogMessage("Rs232Command - run"' "Parsed command' will open port " + _port.PortName + " and write " + _toSend)' LogType.Audit.ToString()); " is 158.
Long Statement,XiboClient.Logic,ScheduleCommand,C:\repos\xibosignage_xibo-dotnetclient\Action\ScheduleCommand.cs,Run,The length of the statement  "                Trace.WriteLine(new LogMessage("CommandSchedule - Run"' "Cannot start Run Command: " + e.Message)' LogType.Error.ToString()); " is 125.
Long Statement,XiboClient.Logic,ScheduleCommand,C:\repos\xibosignage_xibo-dotnetclient\Action\ScheduleCommand.cs,Run,The length of the statement  "                statusXmds.NotifyStatusAsync(ApplicationSettings.Default.ServerKey' ApplicationSettings.Default.HardwareKey' "{\"lastCommandSuccess\":" + success + "}"); " is 153.
Long Statement,XiboClient.Logic,ScheduleItem,C:\repos\xibosignage_xibo-dotnetclient\Logic\ScheduleItem.cs,ToString,The length of the statement  "            return string.Format("[{0}] From {1} to {2} with priority {3}. {4} dependents."' id' FromDt.ToString()' ToDt.ToString()' Priority' Dependents.Count); " is 149.
Long Statement,XiboClient.Logic,ScreenShot,C:\repos\xibosignage_xibo-dotnetclient\Logic\ScreenShot.cs,TakeAndSend,The length of the statement  "                bounds = new Rectangle((int)ApplicationSettings.Default.OffsetX' (int)ApplicationSettings.Default.OffsetY' (int)ApplicationSettings.Default.SizeX' (int)ApplicationSettings.Default.SizeY); " is 187.
Long Statement,XiboClient.Logic,ScreenShot,C:\repos\xibosignage_xibo-dotnetclient\Logic\ScreenShot.cs,TakeAndSend,The length of the statement  "                        thumbSize = new Size(ApplicationSettings.Default.ScreenShotSize' (int)(ApplicationSettings.Default.ScreenShotSize / ratio)); " is 124.
Long Statement,XiboClient.Logic,ScreenShot,C:\repos\xibosignage_xibo-dotnetclient\Logic\ScreenShot.cs,TakeAndSend,The length of the statement  "                        thumbSize = new Size((int)(ApplicationSettings.Default.ScreenShotSize * ratio)' ApplicationSettings.Default.ScreenShotSize); " is 124.
Long Statement,XiboClient.Logic,ScreenShot,C:\repos\xibosignage_xibo-dotnetclient\Logic\ScreenShot.cs,send,The length of the statement  "                    screenShotXmds.SubmitScreenShotAsync(ApplicationSettings.Default.ServerKey' ApplicationSettings.Default.HardwareKey' bytes); " is 124.
Long Statement,XiboClient.Logic,XmrSubscriber,C:\repos\xibosignage_xibo-dotnetclient\Action\XmrSubscriber.cs,Run,The length of the statement  "                                _clientInfoForm.XmrSubscriberStatus = "Connected to " + ApplicationSettings.Default.XmrNetworkAddress + ". Waiting for messages."; " is 130.
Long Statement,XiboClient.Logic,XmrSubscriber,C:\repos\xibosignage_xibo-dotnetclient\Action\XmrSubscriber.cs,Run,The length of the statement  "                        Trace.WriteLine(new LogMessage("XmrSubscriber - Run"' "Socket Disconnected' waiting to reconnect.")' LogType.Info.ToString()); " is 126.
Long Statement,XiboClient.Logic,XmrSubscriber,C:\repos\xibosignage_xibo-dotnetclient\Action\XmrSubscriber.cs,Run,The length of the statement  "                        Trace.WriteLine(new LogMessage("XmrSubscriber - Run"' "NetMQ terminating: " + terminatingEx.Message)' LogType.Audit.ToString()); " is 128.
Long Statement,XiboClient.Logic,XmrSubscriber,C:\repos\xibosignage_xibo-dotnetclient\Action\XmrSubscriber.cs,_socket_ReceiveReady,The length of the statement  "                Trace.WriteLine(new LogMessage("XmrSubscriber - _socket_ReceiveReady"' "Exception in Run: " + ex.Message)' LogType.Error.ToString()); " is 133.
Long Statement,XiboClient.Logic,XmrSubscriber,C:\repos\xibosignage_xibo-dotnetclient\Action\XmrSubscriber.cs,processMessage,The length of the statement  "            string statusMessage = "Connected (" + ApplicationSettings.Default.XmrNetworkAddress + ")' last activity: " + DateTime.Now.ToString(); " is 134.
Long Statement,XiboClient.Logic,XmrSubscriber,C:\repos\xibosignage_xibo-dotnetclient\Action\XmrSubscriber.cs,processMessage,The length of the statement  "                Trace.WriteLine(new LogMessage("XmrSubscriber - processMessage"' "Unopenable Message: " + e.Message)' LogType.Error.ToString()); " is 128.
Long Statement,XiboClient.Logic,XmrSubscriber,C:\repos\xibosignage_xibo-dotnetclient\Action\XmrSubscriber.cs,processMessage,The length of the statement  "                Trace.WriteLine(new LogMessage("XmrSubscriber - processMessage"' "Expired Message: " + action.action)' LogType.Info.ToString()); " is 128.
Long Statement,XiboClient.Logic,XmrSubscriber,C:\repos\xibosignage_xibo-dotnetclient\Action\XmrSubscriber.cs,Restart,The length of the statement  "                Trace.WriteLine(new LogMessage("XmrSubscriber - Restart"' "Unable to Restart XMR: " + e.Message)' LogType.Info.ToString()); " is 123.
Long Statement,XiboClient.Log,ClientInfo,C:\repos\xibosignage_xibo-dotnetclient\Log\ClientInfo.cs,SetCurrentlyPlaying,The length of the statement  "            Text = "Client Information and Status - " + ApplicationSettings.Default.ServerUri + " - Currently Showing: " + layoutName; " is 122.
Long Statement,XiboClient.Log,ClientInfo,C:\repos\xibosignage_xibo-dotnetclient\Log\ClientInfo.cs,updateStatusFile,The length of the statement  "                    "{\"lastActivity\":\"" + DateTime.Now.ToString() + "\"'\"state\":\"" + Thread.State.ToString() + "\"'\"xmdsLastActivity\":\"" + ApplicationSettings.Default.XmdsLastConnection.ToString() + "\"'\"xmdsCollectInterval\":\"" + ApplicationSettings.Default.CollectInterval.ToString() + "\"}"); " is 286.
Long Statement,XiboClient.Log,ClientInfo,C:\repos\xibosignage_xibo-dotnetclient\Log\ClientInfo.cs,updateStatusFile,The length of the statement  "                Trace.WriteLine(new LogMessage("ClientInfo - updateStatusFile"' "Failed to update status file. e = " + e.Message)' LogType.Error.ToString()); " is 141.
Long Statement,XiboClient.Log,ClientInfo,C:\repos\xibosignage_xibo-dotnetclient\Log\ClientInfo.cs,notifyStatusToXmds,The length of the statement  "                    statusXmds.NotifyStatusAsync(ApplicationSettings.Default.ServerKey' ApplicationSettings.Default.HardwareKey' sb.ToString()); " is 124.
Long Statement,XiboClient.Log,ClientInfo,C:\repos\xibosignage_xibo-dotnetclient\Log\ClientInfo.cs,notifyStatusToXmds,The length of the statement  "                Trace.WriteLine(new LogMessage("ClientInfo - notifyStatusToXmds"' "Failed to notify status to XMDS. e = " + e.Message)' LogType.Error.ToString()); " is 146.
Long Statement,XiboClient.Log,ClientInfo,C:\repos\xibosignage_xibo-dotnetclient\Log\ClientInfo.cs,InitializeComponent,The length of the statement  "            dataGridViewCellStyle1.Font = new System.Drawing.Font("Microsoft Sans Serif"' 8.25F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 167.
Long Statement,XiboClient.Log,ClientInfo,C:\repos\xibosignage_xibo-dotnetclient\Log\ClientInfo.cs,InitializeComponent,The length of the statement  "            this.logDataGridView.ColumnHeadersHeightSizeMode = System.Windows.Forms.DataGridViewColumnHeadersHeightSizeMode.AutoSize; " is 121.
Long Statement,XiboClient.Log,ClientInfo,C:\repos\xibosignage_xibo-dotnetclient\Log\ClientInfo.cs,InitializeComponent,The length of the statement  "            dataGridViewCellStyle2.Font = new System.Drawing.Font("Microsoft Sans Serif"' 8.25F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 167.
Long Statement,XiboClient.Log,ClientInfo,C:\repos\xibosignage_xibo-dotnetclient\Log\ClientInfo.cs,InitializeComponent,The length of the statement  "            dataGridViewCellStyle3.Font = new System.Drawing.Font("Microsoft Sans Serif"' 8.25F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 167.
Long Statement,XiboClient.xmds,xmds,C:\repos\xibosignage_xibo-dotnetclient\Web References\xmds\Reference.cs,RegisterDisplayAsync,The length of the statement  "            this.RegisterDisplayAsync(serverKey' hardwareKey' displayName' clientType' clientVersion' clientCode' operatingSystem' macAddress' xmrChannel' xmrPubKey' null); " is 160.
Long Statement,XiboClient.xmds,xmds,C:\repos\xibosignage_xibo-dotnetclient\Web References\xmds\Reference.cs,RegisterDisplayAsync,The length of the statement  "                this.RegisterDisplayOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRegisterDisplayOperationCompleted); " is 123.
Long Statement,XiboClient.xmds,xmds,C:\repos\xibosignage_xibo-dotnetclient\Web References\xmds\Reference.cs,OnRegisterDisplayOperationCompleted,The length of the statement  "                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg)); " is 132.
Long Statement,XiboClient.xmds,xmds,C:\repos\xibosignage_xibo-dotnetclient\Web References\xmds\Reference.cs,OnRegisterDisplayOperationCompleted,The length of the statement  "                this.RegisterDisplayCompleted(this' new RegisterDisplayCompletedEventArgs(invokeArgs.Results' invokeArgs.Error' invokeArgs.Cancelled' invokeArgs.UserState)); " is 157.
Long Statement,XiboClient.xmds,xmds,C:\repos\xibosignage_xibo-dotnetclient\Web References\xmds\Reference.cs,OnRequiredFilesOperationCompleted,The length of the statement  "                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg)); " is 132.
Long Statement,XiboClient.xmds,xmds,C:\repos\xibosignage_xibo-dotnetclient\Web References\xmds\Reference.cs,OnRequiredFilesOperationCompleted,The length of the statement  "                this.RequiredFilesCompleted(this' new RequiredFilesCompletedEventArgs(invokeArgs.Results' invokeArgs.Error' invokeArgs.Cancelled' invokeArgs.UserState)); " is 153.
Long Statement,XiboClient.xmds,xmds,C:\repos\xibosignage_xibo-dotnetclient\Web References\xmds\Reference.cs,OnGetFileOperationCompleted,The length of the statement  "                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg)); " is 132.
Long Statement,XiboClient.xmds,xmds,C:\repos\xibosignage_xibo-dotnetclient\Web References\xmds\Reference.cs,OnGetFileOperationCompleted,The length of the statement  "                this.GetFileCompleted(this' new GetFileCompletedEventArgs(invokeArgs.Results' invokeArgs.Error' invokeArgs.Cancelled' invokeArgs.UserState)); " is 141.
Long Statement,XiboClient.xmds,xmds,C:\repos\xibosignage_xibo-dotnetclient\Web References\xmds\Reference.cs,OnScheduleOperationCompleted,The length of the statement  "                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg)); " is 132.
Long Statement,XiboClient.xmds,xmds,C:\repos\xibosignage_xibo-dotnetclient\Web References\xmds\Reference.cs,OnScheduleOperationCompleted,The length of the statement  "                this.ScheduleCompleted(this' new ScheduleCompletedEventArgs(invokeArgs.Results' invokeArgs.Error' invokeArgs.Cancelled' invokeArgs.UserState)); " is 143.
Long Statement,XiboClient.xmds,xmds,C:\repos\xibosignage_xibo-dotnetclient\Web References\xmds\Reference.cs,OnBlackListOperationCompleted,The length of the statement  "                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg)); " is 132.
Long Statement,XiboClient.xmds,xmds,C:\repos\xibosignage_xibo-dotnetclient\Web References\xmds\Reference.cs,OnBlackListOperationCompleted,The length of the statement  "                this.BlackListCompleted(this' new BlackListCompletedEventArgs(invokeArgs.Results' invokeArgs.Error' invokeArgs.Cancelled' invokeArgs.UserState)); " is 145.
Long Statement,XiboClient.xmds,xmds,C:\repos\xibosignage_xibo-dotnetclient\Web References\xmds\Reference.cs,OnSubmitLogOperationCompleted,The length of the statement  "                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg)); " is 132.
Long Statement,XiboClient.xmds,xmds,C:\repos\xibosignage_xibo-dotnetclient\Web References\xmds\Reference.cs,OnSubmitLogOperationCompleted,The length of the statement  "                this.SubmitLogCompleted(this' new SubmitLogCompletedEventArgs(invokeArgs.Results' invokeArgs.Error' invokeArgs.Cancelled' invokeArgs.UserState)); " is 145.
Long Statement,XiboClient.xmds,xmds,C:\repos\xibosignage_xibo-dotnetclient\Web References\xmds\Reference.cs,OnSubmitStatsOperationCompleted,The length of the statement  "                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg)); " is 132.
Long Statement,XiboClient.xmds,xmds,C:\repos\xibosignage_xibo-dotnetclient\Web References\xmds\Reference.cs,OnSubmitStatsOperationCompleted,The length of the statement  "                this.SubmitStatsCompleted(this' new SubmitStatsCompletedEventArgs(invokeArgs.Results' invokeArgs.Error' invokeArgs.Cancelled' invokeArgs.UserState)); " is 149.
Long Statement,XiboClient.xmds,xmds,C:\repos\xibosignage_xibo-dotnetclient\Web References\xmds\Reference.cs,MediaInventoryAsync,The length of the statement  "                this.MediaInventoryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMediaInventoryOperationCompleted); " is 121.
Long Statement,XiboClient.xmds,xmds,C:\repos\xibosignage_xibo-dotnetclient\Web References\xmds\Reference.cs,OnMediaInventoryOperationCompleted,The length of the statement  "                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg)); " is 132.
Long Statement,XiboClient.xmds,xmds,C:\repos\xibosignage_xibo-dotnetclient\Web References\xmds\Reference.cs,OnMediaInventoryOperationCompleted,The length of the statement  "                this.MediaInventoryCompleted(this' new MediaInventoryCompletedEventArgs(invokeArgs.Results' invokeArgs.Error' invokeArgs.Cancelled' invokeArgs.UserState)); " is 155.
Long Statement,XiboClient.xmds,xmds,C:\repos\xibosignage_xibo-dotnetclient\Web References\xmds\Reference.cs,OnGetResourceOperationCompleted,The length of the statement  "                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg)); " is 132.
Long Statement,XiboClient.xmds,xmds,C:\repos\xibosignage_xibo-dotnetclient\Web References\xmds\Reference.cs,OnGetResourceOperationCompleted,The length of the statement  "                this.GetResourceCompleted(this' new GetResourceCompletedEventArgs(invokeArgs.Results' invokeArgs.Error' invokeArgs.Cancelled' invokeArgs.UserState)); " is 149.
Long Statement,XiboClient.xmds,xmds,C:\repos\xibosignage_xibo-dotnetclient\Web References\xmds\Reference.cs,OnNotifyStatusOperationCompleted,The length of the statement  "                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg)); " is 132.
Long Statement,XiboClient.xmds,xmds,C:\repos\xibosignage_xibo-dotnetclient\Web References\xmds\Reference.cs,OnNotifyStatusOperationCompleted,The length of the statement  "                this.NotifyStatusCompleted(this' new NotifyStatusCompletedEventArgs(invokeArgs.Results' invokeArgs.Error' invokeArgs.Cancelled' invokeArgs.UserState)); " is 151.
Long Statement,XiboClient.xmds,xmds,C:\repos\xibosignage_xibo-dotnetclient\Web References\xmds\Reference.cs,SubmitScreenShotAsync,The length of the statement  "                this.SubmitScreenShotOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSubmitScreenShotOperationCompleted); " is 125.
Long Statement,XiboClient.xmds,xmds,C:\repos\xibosignage_xibo-dotnetclient\Web References\xmds\Reference.cs,OnSubmitScreenShotOperationCompleted,The length of the statement  "                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg)); " is 132.
Long Statement,XiboClient.xmds,xmds,C:\repos\xibosignage_xibo-dotnetclient\Web References\xmds\Reference.cs,OnSubmitScreenShotOperationCompleted,The length of the statement  "                this.SubmitScreenShotCompleted(this' new SubmitScreenShotCompletedEventArgs(invokeArgs.Results' invokeArgs.Error' invokeArgs.Cancelled' invokeArgs.UserState)); " is 159.
Long Statement,XiboClient.XmdsAgents,LogAgent,C:\repos\xibosignage_xibo-dotnetclient\XmdsAgents\LogAgent.cs,Run,The length of the statement  "                _manualReset.WaitOne((int)(ApplicationSettings.Default.CollectInterval * ApplicationSettings.Default.XmdsCollectionIntervalFactor() * 1000)); " is 141.
Long Statement,XiboClient.XmdsAgents,RegisterAgent,C:\repos\xibosignage_xibo-dotnetclient\XmdsAgents\RegisterAgent.cs,Run,The length of the statement  "                        Trace.WriteLine(new LogMessage("RegisterAgent - Run"' "WebException in Run: " + webEx.Message)' LogType.Info.ToString()); " is 121.
Long Statement,XiboClient.XmdsAgents,RegisterAgent,C:\repos\xibosignage_xibo-dotnetclient\XmdsAgents\RegisterAgent.cs,Run,The length of the statement  "                _manualReset.WaitOne((int)(ApplicationSettings.Default.CollectInterval * ApplicationSettings.Default.XmdsCollectionIntervalFactor() * 1000)); " is 141.
Long Statement,XiboClient.XmdsAgents,FileAgent,C:\repos\xibosignage_xibo-dotnetclient\XmdsAgents\FileAgent.cs,Run,The length of the statement  "                        string result = xmds.GetResource(ApplicationSettings.Default.ServerKey' ApplicationSettings.Default.HardwareKey' file.LayoutId' file.RegionId' file.MediaId); " is 157.
Long Statement,XiboClient.XmdsAgents,FileAgent,C:\repos\xibosignage_xibo-dotnetclient\XmdsAgents\FileAgent.cs,Run,The length of the statement  "                        using (FileStream fileStream = File.Open(ApplicationSettings.Default.LibraryPath + @"\" + file.SaveAs' FileMode.Create' FileAccess.Write' FileShare.Read)) " is 154.
Long Statement,XiboClient.XmdsAgents,FileAgent,C:\repos\xibosignage_xibo-dotnetclient\XmdsAgents\FileAgent.cs,Run,The length of the statement  "                        Trace.WriteLine(new LogMessage("FileAgent - Run"' "File Downloaded Successfully. " + file.SaveAs)' LogType.Info.ToString()); " is 124.
Long Statement,XiboClient.XmdsAgents,FileAgent,C:\repos\xibosignage_xibo-dotnetclient\XmdsAgents\FileAgent.cs,Run,The length of the statement  "                        Trace.WriteLine(new LogMessage("FileAgent - Run"' "Downloaded file failed MD5 check. Calculated [" + md5 + "] & XMDS [ " + file.Md5 + "] . " + file.SaveAs)' LogType.Info.ToString()); " is 182.
Long Statement,XiboClient.XmdsAgents,FileAgent,C:\repos\xibosignage_xibo-dotnetclient\XmdsAgents\FileAgent.cs,Run,The length of the statement  "                            getFileReturn = xmds.GetFile(ApplicationSettings.Default.ServerKey' _hardwareKey' file.Id' file.FileType' file.ChunkOffset' file.ChunkSize); " is 140.
Long Statement,XiboClient.XmdsAgents,FileAgent,C:\repos\xibosignage_xibo-dotnetclient\XmdsAgents\FileAgent.cs,Run,The length of the statement  "                            using (FileStream fileStream = File.Open(ApplicationSettings.Default.LibraryPath + @"\" + file.SaveAs' FileMode.Create' FileAccess.Write' FileShare.Read)) " is 154.
Long Statement,XiboClient.XmdsAgents,FileAgent,C:\repos\xibosignage_xibo-dotnetclient\XmdsAgents\FileAgent.cs,Run,The length of the statement  "                            using (FileStream fs = new FileStream(ApplicationSettings.Default.LibraryPath + @"\" + file.Path' FileMode.Append' FileAccess.Write)) " is 133.
Long Statement,XiboClient.XmdsAgents,FileAgent,C:\repos\xibosignage_xibo-dotnetclient\XmdsAgents\FileAgent.cs,Run,The length of the statement  "                        Trace.WriteLine(new LogMessage("FileAgent - Run"' "File Downloaded Successfully. " + file.SaveAs)' LogType.Info.ToString()); " is 124.
Long Statement,XiboClient.XmdsAgents,FileAgent,C:\repos\xibosignage_xibo-dotnetclient\XmdsAgents\FileAgent.cs,Run,The length of the statement  "                        Trace.WriteLine(new LogMessage("FileAgent - Run"' "Downloaded file failed MD5 check. Calculated [" + md5 + "] & XMDS [ " + file.Md5 + "] . " + file.SaveAs)' LogType.Info.ToString()); " is 182.
Long Statement,XiboClient.XmdsAgents,LibraryAgent,C:\repos\xibosignage_xibo-dotnetclient\XmdsAgents\LibraryAgent.cs,Run,The length of the statement  "                        Trace.WriteLine(new LogMessage("LibraryAgent - Run"' "Number of required files = " + _requiredFiles.RequiredFileList.Count)' LogType.Audit.ToString()); " is 151.
Long Statement,XiboClient.XmdsAgents,LibraryAgent,C:\repos\xibosignage_xibo-dotnetclient\XmdsAgents\LibraryAgent.cs,Run,The length of the statement  "                                //Debug.WriteLine(new LogMessage("LibraryAgent - Run"' fileInfo.Name + " is not in Required Files' testing last accessed date [" + fileInfo.LastAccessTime + "] is earlier than " + testDate)' LogType.Audit.ToString()); " is 217.
Long Statement,XiboClient.XmdsAgents,ScheduleAndFilesAgent,C:\repos\xibosignage_xibo-dotnetclient\XmdsAgents\ScheduleAndFilesAgent.cs,Run,The length of the statement  "                                Trace.WriteLine(new LogMessage("RequiredFilesAgent - Run"' "Currently Downloading Files' skipping collect")' LogType.Audit.ToString()); " is 135.
Long Statement,XiboClient.XmdsAgents,ScheduleAndFilesAgent,C:\repos\xibosignage_xibo-dotnetclient\XmdsAgents\ScheduleAndFilesAgent.cs,Run,The length of the statement  "                            Trace.WriteLine(new LogMessage("RequiredFilesAgent - Run"' "WebException in Run: " + webEx.Message)' LogType.Info.ToString()); " is 126.
Long Statement,XiboClient.XmdsAgents,ScheduleAndFilesAgent,C:\repos\xibosignage_xibo-dotnetclient\XmdsAgents\ScheduleAndFilesAgent.cs,Run,The length of the statement  "                            Trace.WriteLine(new LogMessage("RequiredFilesAgent - Run"' "Exception in Run: " + ex.Message)' LogType.Error.ToString()); " is 121.
Long Statement,XiboClient.XmdsAgents,ScheduleAndFilesAgent,C:\repos\xibosignage_xibo-dotnetclient\XmdsAgents\ScheduleAndFilesAgent.cs,Run,The length of the statement  "                        _clientInfoForm.RequiredFilesStatus = string.Format("Outside Download Window {0} - {1}"' ApplicationSettings.Default.DownloadStartWindowTime.ToString("HH:mm"' CultureInfo.InvariantCulture)' ApplicationSettings.Default.DownloadEndWindowTime.ToString("HH:mm"' CultureInfo.InvariantCulture)); " is 289.
Long Statement,XiboClient.XmdsAgents,ScheduleAndFilesAgent,C:\repos\xibosignage_xibo-dotnetclient\XmdsAgents\ScheduleAndFilesAgent.cs,Run,The length of the statement  "                _manualReset.WaitOne((int)(ApplicationSettings.Default.CollectInterval * ApplicationSettings.Default.XmdsCollectionIntervalFactor() * 1000)); " is 141.
Long Statement,XiboClient.XmdsAgents,ScheduleAndFilesAgent,C:\repos\xibosignage_xibo-dotnetclient\XmdsAgents\ScheduleAndFilesAgent.cs,RequiredFilesString,The length of the statement  "                string percentComplete = (!requiredFile.Complete) ? Math.Round((((double)requiredFile.ChunkOffset / (double)requiredFile.Size) * 100)' 1).ToString() : "100"; " is 157.
Long Statement,XiboClient.XmdsAgents,ScheduleAndFilesAgent,C:\repos\xibosignage_xibo-dotnetclient\XmdsAgents\ScheduleAndFilesAgent.cs,RequiredFilesString,The length of the statement  "                requiredFilesTextBox = requiredFilesTextBox + requiredFile.FileType + ": " + requiredFile.SaveAs + ". (" + percentComplete + "%)" + Environment.NewLine; " is 152.
Long Statement,XiboClient.XmdsAgents,ScheduleAndFilesAgent,C:\repos\xibosignage_xibo-dotnetclient\XmdsAgents\ScheduleAndFilesAgent.cs,fileAgent_OnComplete,The length of the statement  "            Trace.WriteLine(new LogMessage("RequiredFilesAgent - fileAgent_OnComplete"' "FileId finished downloading" + fileId.ToString())); " is 128.
Long Statement,XiboClient.XmdsAgents,ScheduleAndFilesAgent,C:\repos\xibosignage_xibo-dotnetclient\XmdsAgents\ScheduleAndFilesAgent.cs,fileAgent_OnComplete,The length of the statement  "                // If we are the last download thread to complete' then we should report media inventory and raise an event to say we've got everything " is 135.
Long Statement,XiboClient.XmdsAgents,ScheduleAndFilesAgent,C:\repos\xibosignage_xibo-dotnetclient\XmdsAgents\ScheduleAndFilesAgent.cs,fileAgent_OnComplete,The length of the statement  "                _clientInfoForm.RequiredFilesStatus = string.Format("{0} files to download"' _requiredFiles.FilesDownloading.ToString()); " is 121.
Long Statement,XiboClient.XmdsAgents,ScheduleAndFilesAgent,C:\repos\xibosignage_xibo-dotnetclient\XmdsAgents\ScheduleAndFilesAgent.cs,reportStorage,The length of the statement  "                        string status = "{\"availableSpace\":\"" + drive.TotalFreeSpace + "\"' \"totalSpace\":\"" + drive.TotalSize + "\"' \"deviceName\":\"" + Environment.MachineName + "\"}"; " is 168.
Long Statement,XiboClient.XmdsAgents,ScheduleAndFilesAgent,C:\repos\xibosignage_xibo-dotnetclient\XmdsAgents\ScheduleAndFilesAgent.cs,scheduleAgent,The length of the statement  "                Trace.WriteLine(new LogMessage("ScheduleAgent - Run"' "WebException in Run: " + webEx.Message)' LogType.Info.ToString()); " is 121.
Complex Conditional,XiboClient,Region,C:\repos\xibosignage_xibo-dotnetclient\Control\Region.cs,SetNextMediaNodeInOptions,The conditional expression  "_options.type == "video" || _options.type == "flash" || _options.type == "image" || _options.type == "powerpoint" || _options.type == "audio""  is complex.
Empty Catch Block,XiboClient,VideoDS,C:\repos\xibosignage_xibo-dotnetclient\Media\VideoDS.cs,Dispose,The method has an empty catch block.
Empty Catch Block,XiboClient,MainForm,C:\repos\xibosignage_xibo-dotnetclient\MainForm.cs,MainForm_FormClosing,The method has an empty catch block.
Empty Catch Block,XiboClient,RequiredFiles,C:\repos\xibosignage_xibo-dotnetclient\Logic\RequiredFiles.cs,SetRequiredFiles,The method has an empty catch block.
Empty Catch Block,XiboClient,VideoPlayer,C:\repos\xibosignage_xibo-dotnetclient\Media\VideoPlayer.cs,StopAndClear,The method has an empty catch block.
Empty Catch Block,XiboClient,XiboTraceListener,C:\repos\xibosignage_xibo-dotnetclient\Log\XiboTraceListener.cs,FlushToFile,The method has an empty catch block.
Empty Catch Block,XiboClient.XmdsAgents,RegisterAgent,C:\repos\xibosignage_xibo-dotnetclient\XmdsAgents\RegisterAgent.cs,ProcessRegisterXml,The method has an empty catch block.
Magic Number,XiboClient,About,C:\repos\xibosignage_xibo-dotnetclient\Forms\About.cs,InitializeComponent,The following statement contains a magic number: this.pictureBox1.Location = new System.Drawing.Point(12' 6);
Magic Number,XiboClient,About,C:\repos\xibosignage_xibo-dotnetclient\Forms\About.cs,InitializeComponent,The following statement contains a magic number: this.pictureBox1.Location = new System.Drawing.Point(12' 6);
Magic Number,XiboClient,About,C:\repos\xibosignage_xibo-dotnetclient\Forms\About.cs,InitializeComponent,The following statement contains a magic number: this.pictureBox1.Size = new System.Drawing.Size(160' 82);
Magic Number,XiboClient,About,C:\repos\xibosignage_xibo-dotnetclient\Forms\About.cs,InitializeComponent,The following statement contains a magic number: this.pictureBox1.Size = new System.Drawing.Size(160' 82);
Magic Number,XiboClient,About,C:\repos\xibosignage_xibo-dotnetclient\Forms\About.cs,InitializeComponent,The following statement contains a magic number: this.buttonHelp.Location = new System.Drawing.Point(12' 277);
Magic Number,XiboClient,About,C:\repos\xibosignage_xibo-dotnetclient\Forms\About.cs,InitializeComponent,The following statement contains a magic number: this.buttonHelp.Location = new System.Drawing.Point(12' 277);
Magic Number,XiboClient,About,C:\repos\xibosignage_xibo-dotnetclient\Forms\About.cs,InitializeComponent,The following statement contains a magic number: this.buttonHelp.Size = new System.Drawing.Size(75' 23);
Magic Number,XiboClient,About,C:\repos\xibosignage_xibo-dotnetclient\Forms\About.cs,InitializeComponent,The following statement contains a magic number: this.buttonHelp.Size = new System.Drawing.Size(75' 23);
Magic Number,XiboClient,About,C:\repos\xibosignage_xibo-dotnetclient\Forms\About.cs,InitializeComponent,The following statement contains a magic number: this.richTextBox1.Location = new System.Drawing.Point(12' 97);
Magic Number,XiboClient,About,C:\repos\xibosignage_xibo-dotnetclient\Forms\About.cs,InitializeComponent,The following statement contains a magic number: this.richTextBox1.Location = new System.Drawing.Point(12' 97);
Magic Number,XiboClient,About,C:\repos\xibosignage_xibo-dotnetclient\Forms\About.cs,InitializeComponent,The following statement contains a magic number: this.richTextBox1.Size = new System.Drawing.Size(397' 174);
Magic Number,XiboClient,About,C:\repos\xibosignage_xibo-dotnetclient\Forms\About.cs,InitializeComponent,The following statement contains a magic number: this.richTextBox1.Size = new System.Drawing.Size(397' 174);
Magic Number,XiboClient,About,C:\repos\xibosignage_xibo-dotnetclient\Forms\About.cs,InitializeComponent,The following statement contains a magic number: this.richTextBox1.TabIndex = 2;
Magic Number,XiboClient,About,C:\repos\xibosignage_xibo-dotnetclient\Forms\About.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(296' 9);
Magic Number,XiboClient,About,C:\repos\xibosignage_xibo-dotnetclient\Forms\About.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(296' 9);
Magic Number,XiboClient,About,C:\repos\xibosignage_xibo-dotnetclient\Forms\About.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(35' 13);
Magic Number,XiboClient,About,C:\repos\xibosignage_xibo-dotnetclient\Forms\About.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(35' 13);
Magic Number,XiboClient,About,C:\repos\xibosignage_xibo-dotnetclient\Forms\About.cs,InitializeComponent,The following statement contains a magic number: this.label1.TabIndex = 3;
Magic Number,XiboClient,About,C:\repos\xibosignage_xibo-dotnetclient\Forms\About.cs,InitializeComponent,The following statement contains a magic number: this.label2.Location = new System.Drawing.Point(296' 45);
Magic Number,XiboClient,About,C:\repos\xibosignage_xibo-dotnetclient\Forms\About.cs,InitializeComponent,The following statement contains a magic number: this.label2.Location = new System.Drawing.Point(296' 45);
Magic Number,XiboClient,About,C:\repos\xibosignage_xibo-dotnetclient\Forms\About.cs,InitializeComponent,The following statement contains a magic number: this.label2.Size = new System.Drawing.Size(35' 13);
Magic Number,XiboClient,About,C:\repos\xibosignage_xibo-dotnetclient\Forms\About.cs,InitializeComponent,The following statement contains a magic number: this.label2.Size = new System.Drawing.Size(35' 13);
Magic Number,XiboClient,About,C:\repos\xibosignage_xibo-dotnetclient\Forms\About.cs,InitializeComponent,The following statement contains a magic number: this.label2.TabIndex = 4;
Magic Number,XiboClient,About,C:\repos\xibosignage_xibo-dotnetclient\Forms\About.cs,InitializeComponent,The following statement contains a magic number: this.buttonClose.Location = new System.Drawing.Point(333' 276);
Magic Number,XiboClient,About,C:\repos\xibosignage_xibo-dotnetclient\Forms\About.cs,InitializeComponent,The following statement contains a magic number: this.buttonClose.Location = new System.Drawing.Point(333' 276);
Magic Number,XiboClient,About,C:\repos\xibosignage_xibo-dotnetclient\Forms\About.cs,InitializeComponent,The following statement contains a magic number: this.buttonClose.Size = new System.Drawing.Size(75' 23);
Magic Number,XiboClient,About,C:\repos\xibosignage_xibo-dotnetclient\Forms\About.cs,InitializeComponent,The following statement contains a magic number: this.buttonClose.Size = new System.Drawing.Size(75' 23);
Magic Number,XiboClient,About,C:\repos\xibosignage_xibo-dotnetclient\Forms\About.cs,InitializeComponent,The following statement contains a magic number: this.buttonClose.TabIndex = 5;
Magic Number,XiboClient,About,C:\repos\xibosignage_xibo-dotnetclient\Forms\About.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(421' 312);
Magic Number,XiboClient,About,C:\repos\xibosignage_xibo-dotnetclient\Forms\About.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(421' 312);
Magic Number,XiboClient,CacheManager,C:\repos\xibosignage_xibo-dotnetclient\Logic\CacheManager.cs,IsValidPath,The following statement contains a magic number: lock (_locker)              {                  // Currently a path is valid if it is in the cache                  if (String.IsNullOrEmpty(path))                      return false;                    // Search for this path                  foreach (Md5Resource file in _files)                  {                      if (file.path == path)                      {                          // If we cached it over 2 minutes ago' then check the GetLastWriteTime                          if (file.cacheDate > DateTime.Now.AddMinutes(-2))                              return File.Exists(ApplicationSettings.Default.LibraryPath + @"\" + path);                            try                          {                              // Check to see if this file has been deleted since the Cache Manager registered it                              if (!File.Exists(ApplicationSettings.Default.LibraryPath + @"\" + path))                                  return false;                                // Check to see if this file has been modified since the MD5 cache                              // If it has then we assume invalid' otherwise its valid                              DateTime lastWrite = File.GetLastWriteTime(ApplicationSettings.Default.LibraryPath + @"\" + path);                                if (lastWrite <= file.cacheDate)                                  return true;                              else                                  return false;                          }                          catch (Exception ex)                          {                              Trace.WriteLine(new LogMessage("IsValid"' "Unable to determine if the file is valid. Assuming not valid: " + ex.Message)' LogType.Error.ToString());                                // Assume invalid                              return false;                          }                      }                  }                    // Reached the end of the cache and havent found the file.                  return false;              }
Magic Number,XiboClient,KeyStore,C:\repos\xibosignage_xibo-dotnetclient\Logic\KeyStore.cs,OnKeyPress,The following statement contains a magic number: _control =                  -127 == GetKeyState(Keys.ControlKey) ||                  -127 == GetKeyState(Keys.RControlKey);
Magic Number,XiboClient,KeyStore,C:\repos\xibosignage_xibo-dotnetclient\Logic\KeyStore.cs,OnKeyPress,The following statement contains a magic number: _control =                  -127 == GetKeyState(Keys.ControlKey) ||                  -127 == GetKeyState(Keys.RControlKey);
Magic Number,XiboClient,KeyStore,C:\repos\xibosignage_xibo-dotnetclient\Logic\KeyStore.cs,OnKeyPress,The following statement contains a magic number: _shift =                  -127 == GetKeyState(Keys.ShiftKey) ||                  -127 == GetKeyState(Keys.RShiftKey);
Magic Number,XiboClient,KeyStore,C:\repos\xibosignage_xibo-dotnetclient\Logic\KeyStore.cs,OnKeyPress,The following statement contains a magic number: _shift =                  -127 == GetKeyState(Keys.ShiftKey) ||                  -127 == GetKeyState(Keys.RShiftKey);
Magic Number,XiboClient,ApplicationSettings,C:\repos\xibosignage_xibo-dotnetclient\Logic\ApplicationSettings.cs,XmdsCollectionIntervalFactor,The following statement contains a magic number: return (XmdsErrorCountSinceSuccessful > 10) ? 5 : XmdsErrorCountSinceSuccessful / 2;
Magic Number,XiboClient,ApplicationSettings,C:\repos\xibosignage_xibo-dotnetclient\Logic\ApplicationSettings.cs,XmdsCollectionIntervalFactor,The following statement contains a magic number: return (XmdsErrorCountSinceSuccessful > 10) ? 5 : XmdsErrorCountSinceSuccessful / 2;
Magic Number,XiboClient,ApplicationSettings,C:\repos\xibosignage_xibo-dotnetclient\Logic\ApplicationSettings.cs,XmdsCollectionIntervalFactor,The following statement contains a magic number: return (XmdsErrorCountSinceSuccessful > 10) ? 5 : XmdsErrorCountSinceSuccessful / 2;
Magic Number,XiboClient,Audio,C:\repos\xibosignage_xibo-dotnetclient\Media\Audio.cs,Audio,The following statement contains a magic number: _videoPlayer.SetVolume(options.Dictionary.Get("volume"' 100));
Magic Number,XiboClient,IeWebMedia,C:\repos\xibosignage_xibo-dotnetclient\Media\IeWebMedia.cs,xmds_GetResourceCompleted,The following statement contains a magic number: try              {                  // Success / Failure                  if (e.Error != null)                  {                      Trace.WriteLine(new LogMessage("xmds_GetResource"' "Unable to get Resource: " + e.Error.Message)' LogType.Info.ToString());                        // We have failed to update from XMDS                      // id we have been asked to reload on XmdsRefresh' check to see if we have a file to load'                      // if not expire on a short timer.                      if (_reloadOnXmdsRefresh)                      {                          if (File.Exists(_filePath))                          {                              // Cached file to revert to                              UpdateCacheIfNecessary();                                // Navigate to the file                              _webBrowser.Navigate(_localWebPath);                          }                          else                          {                              // No cache to revert to                              Trace.WriteLine(new LogMessage("xmds_GetResource"' "We haven't been able to download this widget and there isn't a pre-cached one to use. Skipping.")' LogType.Info.ToString());                                // Start the timer so that we expire                              Duration = 2;                              base.RenderMedia();                          }                      }                  }                  else                  {                      // Ammend the resource file so that we can open it directly from the library (this is better than using a tempoary file)                      string cachedFile = e.Result;                        // Handle the background                      String bodyStyle;                      String backgroundColor = _options.Dictionary.Get("backgroundColor"' _options.backgroundColor);                        if (_options.backgroundImage == null || _options.backgroundImage == "")                      {                          bodyStyle = "background-color:" + backgroundColor + " ;";                      }                      else                      {                          bodyStyle = "background-image: url('" + _options.backgroundImage + "'); background-attachment:fixed; background-color:" + backgroundColor + "; background-repeat: no-repeat; background-position: " + _options.backgroundLeft + "px " + _options.backgroundTop + "px;";                      }                        string html = cachedFile.Replace("</head>"' "<style type='text/css'>body {" + bodyStyle + " }</style></head>");                      html = html.Replace("[[ViewPortWidth]]"' _width.ToString());                        // Comment in to write out the update date at the end of the file (in the body)                      // This is useful if you want to check how frequently the file is updating                      //html = html.Replace("<body>"' "<body><h1 style='color:white'>" + DateTime.Now.ToString() + "</h1>");                        // Write to the library                      using (FileStream fileStream = File.Open(_filePath' FileMode.Create' FileAccess.Write' FileShare.Read))                      {                          using (StreamWriter sw = new StreamWriter(fileStream))                          {                              sw.Write(html);                              sw.Close();                          }                      }                        if (_reloadOnXmdsRefresh)                      {                          // Read the control meta back out                          ReadControlMeta();                            // Handle Navigate in here because we will not have done it during first load                          _webBrowser.Navigate(_localWebPath);                      }                  }              }              catch (ObjectDisposedException)              {                  Trace.WriteLine(new LogMessage("WebMedia"' "Retrived the resource' stored the document but the media has already expired.")' LogType.Error.ToString());              }              catch (Exception ex)              {                  Trace.WriteLine(new LogMessage("WebMedia"' "Unknown exception " + ex.Message)' LogType.Error.ToString());                    // This should exipre the media                  Duration = 5;                  base.RenderMedia();              }
Magic Number,XiboClient,IeWebMedia,C:\repos\xibosignage_xibo-dotnetclient\Media\IeWebMedia.cs,xmds_GetResourceCompleted,The following statement contains a magic number: try              {                  // Success / Failure                  if (e.Error != null)                  {                      Trace.WriteLine(new LogMessage("xmds_GetResource"' "Unable to get Resource: " + e.Error.Message)' LogType.Info.ToString());                        // We have failed to update from XMDS                      // id we have been asked to reload on XmdsRefresh' check to see if we have a file to load'                      // if not expire on a short timer.                      if (_reloadOnXmdsRefresh)                      {                          if (File.Exists(_filePath))                          {                              // Cached file to revert to                              UpdateCacheIfNecessary();                                // Navigate to the file                              _webBrowser.Navigate(_localWebPath);                          }                          else                          {                              // No cache to revert to                              Trace.WriteLine(new LogMessage("xmds_GetResource"' "We haven't been able to download this widget and there isn't a pre-cached one to use. Skipping.")' LogType.Info.ToString());                                // Start the timer so that we expire                              Duration = 2;                              base.RenderMedia();                          }                      }                  }                  else                  {                      // Ammend the resource file so that we can open it directly from the library (this is better than using a tempoary file)                      string cachedFile = e.Result;                        // Handle the background                      String bodyStyle;                      String backgroundColor = _options.Dictionary.Get("backgroundColor"' _options.backgroundColor);                        if (_options.backgroundImage == null || _options.backgroundImage == "")                      {                          bodyStyle = "background-color:" + backgroundColor + " ;";                      }                      else                      {                          bodyStyle = "background-image: url('" + _options.backgroundImage + "'); background-attachment:fixed; background-color:" + backgroundColor + "; background-repeat: no-repeat; background-position: " + _options.backgroundLeft + "px " + _options.backgroundTop + "px;";                      }                        string html = cachedFile.Replace("</head>"' "<style type='text/css'>body {" + bodyStyle + " }</style></head>");                      html = html.Replace("[[ViewPortWidth]]"' _width.ToString());                        // Comment in to write out the update date at the end of the file (in the body)                      // This is useful if you want to check how frequently the file is updating                      //html = html.Replace("<body>"' "<body><h1 style='color:white'>" + DateTime.Now.ToString() + "</h1>");                        // Write to the library                      using (FileStream fileStream = File.Open(_filePath' FileMode.Create' FileAccess.Write' FileShare.Read))                      {                          using (StreamWriter sw = new StreamWriter(fileStream))                          {                              sw.Write(html);                              sw.Close();                          }                      }                        if (_reloadOnXmdsRefresh)                      {                          // Read the control meta back out                          ReadControlMeta();                            // Handle Navigate in here because we will not have done it during first load                          _webBrowser.Navigate(_localWebPath);                      }                  }              }              catch (ObjectDisposedException)              {                  Trace.WriteLine(new LogMessage("WebMedia"' "Retrived the resource' stored the document but the media has already expired.")' LogType.Error.ToString());              }              catch (Exception ex)              {                  Trace.WriteLine(new LogMessage("WebMedia"' "Unknown exception " + ex.Message)' LogType.Error.ToString());                    // This should exipre the media                  Duration = 5;                  base.RenderMedia();              }
Magic Number,XiboClient,HardwareKey,C:\repos\xibosignage_xibo-dotnetclient\Logic\HardwareKey.cs,getXmrKey,The following statement contains a magic number: lock (_locker)              {                  // Return the cached key if we have one.                  if (_keys != null)                      return _keys;                    if (File.Exists(ApplicationSettings.Default.LibraryPath + "\\id_rsa"))                  {                      try                      {                          using (TextReader textReader = new StringReader(File.ReadAllText(ApplicationSettings.Default.LibraryPath + "\\id_rsa")))                          {                              PemReader reader = new PemReader(textReader);                              _keys = (AsymmetricCipherKeyPair)reader.ReadObject();                          }                            return _keys;                      }                      catch (Exception e)                      {                          File.Delete(ApplicationSettings.Default.LibraryPath + "\\id_rsa");                            // Generate a new key                          Trace.WriteLine(new LogMessage("HardwareKey - getXmrKey"' "Unable to read existing key.")' LogType.Info.ToString());                          Trace.WriteLine(new LogMessage("HardwareKey - getXmrKey"' "Unable to read existing key. e=" + e.Message)' LogType.Audit.ToString());                      }                  }                    // If we get here' we need to generate and save a key                  RsaKeyPairGenerator generator = new RsaKeyPairGenerator();                  generator.Init(new KeyGenerationParameters(new SecureRandom()' 1024));                    _keys = generator.GenerateKeyPair();                    // Save this key using PEM writer                  File.WriteAllText(ApplicationSettings.Default.LibraryPath + "\\id_rsa"' getKeyAsString(_keys.Private));                  File.WriteAllText(ApplicationSettings.Default.LibraryPath + "\\id_rsa.pub"' getKeyAsString(_keys.Public));                    return _keys;              }
Magic Number,XiboClient,Hashes,C:\repos\xibosignage_xibo-dotnetclient\Logic\Hashes.cs,MD5,The following statement contains a magic number: try              {                  MD5 md5 = new MD5CryptoServiceProvider();                  byte[] hash = md5.ComputeHash(fileStream);                    fileStream.Close();                    StringBuilder sb = new StringBuilder();                  foreach (byte a in hash)                  {                      if (a < 16)                          sb.Append("0" + a.ToString("x"));                      else                          sb.Append(a.ToString("x"));                  }                    return sb.ToString();              }              catch (Exception ex)              {                  System.Diagnostics.Debug.WriteLine(ex.Message' "Hashes");                  throw;              }
Magic Number,XiboClient,Hashes,C:\repos\xibosignage_xibo-dotnetclient\Logic\Hashes.cs,MD5,The following statement contains a magic number: try              {                  MD5 md5 = new MD5CryptoServiceProvider();                  byte[] hash = md5.ComputeHash(fileStream);                    StringBuilder sb = new StringBuilder();                  foreach (byte a in hash)                  {                      if (a < 16)                          sb.Append("0" + a.ToString("x"));                      else                          sb.Append(a.ToString("x"));                  }                    return sb.ToString();              }              catch (Exception ex)              {                  System.Diagnostics.Debug.WriteLine(ex.Message' "Hashes");                  throw;              }
Magic Number,XiboClient,Hashes,C:\repos\xibosignage_xibo-dotnetclient\Logic\Hashes.cs,MD5,The following statement contains a magic number: try              {                  MD5 md5 = new MD5CryptoServiceProvider();                  byte[] hash = md5.ComputeHash(fileStream);                    StringBuilder sb = new StringBuilder();                  foreach (byte a in hash)                  {                      if (a < 16)                          sb.Append("0" + a.ToString("x"));                      else                          sb.Append(a.ToString("x"));                  }                    return sb.ToString();              }              catch (Exception ex)              {                  System.Diagnostics.Debug.WriteLine(ex.Message' "Hashes");                  throw;              }
Magic Number,XiboClient,ImagePosition,C:\repos\xibosignage_xibo-dotnetclient\Media\Image.cs,_pictureBox_Paint,The following statement contains a magic number: if (imageProportion > regionProportion)              {                  // Use the full width possible and adjust the height accordingly                  height = (int)(_pictureBox.Width / imageProportion);                    if (valign == "middle")                  {                      // top margin needs to drop down half                      x = x + ((_pictureBox.Height - height) / 2);                  }                  else if (valign == "bottom") {                      x = x + (_pictureBox.Height - height);                  }              }              else              {                  // Use the full height possible and adjust the width accordingly                  width = (int)(imageProportion * _pictureBox.Height);                    if (align == "center")                  {                      y = y + ((_pictureBox.Width - width) / 2);                  }                  else if (align == "right")                  {                      y = y + (_pictureBox.Width - width);                  }              }
Magic Number,XiboClient,ImagePosition,C:\repos\xibosignage_xibo-dotnetclient\Media\Image.cs,_pictureBox_Paint,The following statement contains a magic number: if (imageProportion > regionProportion)              {                  // Use the full width possible and adjust the height accordingly                  height = (int)(_pictureBox.Width / imageProportion);                    if (valign == "middle")                  {                      // top margin needs to drop down half                      x = x + ((_pictureBox.Height - height) / 2);                  }                  else if (valign == "bottom") {                      x = x + (_pictureBox.Height - height);                  }              }              else              {                  // Use the full height possible and adjust the width accordingly                  width = (int)(imageProportion * _pictureBox.Height);                    if (align == "center")                  {                      y = y + ((_pictureBox.Width - width) / 2);                  }                  else if (align == "right")                  {                      y = y + (_pictureBox.Width - width);                  }              }
Magic Number,XiboClient,MainForm,C:\repos\xibosignage_xibo-dotnetclient\MainForm.cs,MainForm,The following statement contains a magic number: SetWindowLong(this.Handle' -16' new IntPtr(GetWindowLong(this.Handle' -16) | 0x40000000));
Magic Number,XiboClient,MainForm,C:\repos\xibosignage_xibo-dotnetclient\MainForm.cs,MainForm,The following statement contains a magic number: SetWindowLong(this.Handle' -16' new IntPtr(GetWindowLong(this.Handle' -16) | 0x40000000));
Magic Number,XiboClient,MainForm,C:\repos\xibosignage_xibo-dotnetclient\MainForm.cs,ChangeToNextLayout,The following statement contains a magic number: try              {                  // Destroy the Current Layout                  try                  {                      DestroyLayout();                  }                  catch (Exception e)                  {                      // Force collect all controls                      foreach (System.Windows.Forms.Control control in Controls)                      {                          control.Dispose();                          Controls.Remove(control);                      }                        Trace.WriteLine(new LogMessage("MainForm - ChangeToNextLayout"' "Destroy Layout Failed. Exception raised was: " + e.Message)' LogType.Info.ToString());                      throw e;                  }                    // Prepare the next layout                  try                  {                      PrepareLayout(layoutPath);                        _clientInfoForm.CurrentLayoutId = layoutPath;                      _schedule.CurrentLayoutId = _layoutId;                  }                  catch (DefaultLayoutException)                  {                      throw;                  }                  catch (Exception e)                  {                      DestroyLayout();                      Trace.WriteLine(new LogMessage("MainForm - ChangeToNextLayout"' "Prepare Layout Failed. Exception raised was: " + e.Message)' LogType.Info.ToString());                      throw;                  }                    _clientInfoForm.ControlCount = Controls.Count;                    // Do we need to notify?                  try                  {                      if (ApplicationSettings.Default.SendCurrentLayoutAsStatusUpdate)                      {                          using (xmds.xmds statusXmds = new xmds.xmds())                          {                              statusXmds.Url = ApplicationSettings.Default.XiboClient_xmds_xmds + "&method=notifyStatus";                              statusXmds.NotifyStatusAsync(ApplicationSettings.Default.ServerKey' ApplicationSettings.Default.HardwareKey' "{\"currentLayoutId\":" + _layoutId + "}");                          }                      }                  }                  catch (Exception e)                  {                      Trace.WriteLine(new LogMessage("MainForm - ChangeToNextLayout"' "Notify Status Failed. Exception raised was: " + e.Message)' LogType.Info.ToString());                      throw;                  }              }              catch (Exception ex)              {                  if (!(ex is DefaultLayoutException))                      Trace.WriteLine(new LogMessage("MainForm - ChangeToNextLayout"' "Layout Change to " + layoutPath + " failed. Exception raised was: " + ex.Message)' LogType.Error.ToString());                    if (!_showingSplash)                      ShowSplashScreen();                                    // In 10 seconds fire the next layout                  System.Windows.Forms.Timer timer = new System.Windows.Forms.Timer();                  timer.Interval = 10000;                  timer.Tick += new EventHandler(splashScreenTimer_Tick);                    // Start the timer                  timer.Start();              }
Magic Number,XiboClient,MainForm,C:\repos\xibosignage_xibo-dotnetclient\MainForm.cs,PrepareLayout,The following statement contains a magic number: try              {                  leftOverX = Math.Abs(_clientSize.Width - backgroundWidth);                  leftOverY = Math.Abs(_clientSize.Height - backgroundHeight);                    if (leftOverX != 0) leftOverX = leftOverX / 2;                  if (leftOverY != 0) leftOverY = leftOverY / 2;              }              catch              {                  leftOverX = 0;                  leftOverY = 0;              }
Magic Number,XiboClient,MainForm,C:\repos\xibosignage_xibo-dotnetclient\MainForm.cs,PrepareLayout,The following statement contains a magic number: try              {                  leftOverX = Math.Abs(_clientSize.Width - backgroundWidth);                  leftOverY = Math.Abs(_clientSize.Height - backgroundHeight);                    if (leftOverX != 0) leftOverX = leftOverX / 2;                  if (leftOverY != 0) leftOverY = leftOverY / 2;              }              catch              {                  leftOverX = 0;                  leftOverY = 0;              }
Magic Number,XiboClient,MainForm,C:\repos\xibosignage_xibo-dotnetclient\MainForm.cs,ManageOverlays,The following statement contains a magic number: try              {                  // Parse all overlays and compare what we have now to the overlays we have already created (see OverlayRegions)                    // Take the ones we currently have up and remove them if they aren't in the new list                  // We use a for loop so that we are able to remove the region from the collection                  for (int i = 0; i < _overlays.Count; i++)                  {                      Region region = _overlays[i];                      bool found = false;                        foreach (ScheduleItem item in overlays)                      {                          if (item.scheduleid == region.scheduleId && _cacheManager.GetMD5(item.id + ".xlf") == region.hash)                          {                              found = true;                              break;                          }                      }                        if (!found)                      {                          Debug.WriteLine("Removing overlay which is no-longer required. Overlay: " + region.scheduleId' "Overlays");                          region.Clear();                          region.Dispose();                          Controls.Remove(region);                          _overlays.Remove(region);                      }                  }                    // Take the ones that are in the new list and add them                  foreach (ScheduleItem item in overlays)                  {                      // Check its not already added.                      bool found = false;                      foreach (Region region in _overlays)                      {                          if (region.scheduleId == item.scheduleid)                          {                              found = true;                              break;                          }                      }                        if (found)                          continue;                        // Parse the layout for regions' and create them.                      string layoutPath = item.layoutFile;                        // Get this layouts XML                      XmlDocument layoutXml = new XmlDocument();                        try                      {                          // try to open the layout file                          using (FileStream fs = File.Open(layoutPath' FileMode.Open' FileAccess.Read' FileShare.Write))                          {                              using (XmlReader reader = XmlReader.Create(fs))                              {                                  layoutXml.Load(reader);                                    reader.Close();                              }                              fs.Close();                          }                      }                      catch (Exception ex)                      {                          Trace.WriteLine(new LogMessage("MainForm - _schedule_OverlayChangeEvent"' string.Format("Could not find the layout file {0}: {1}"' layoutPath' ex.Message))' LogType.Info.ToString());                          continue;                      }                        // Attributes of the main layout node                      XmlNode layoutNode = layoutXml.SelectSingleNode("/layout");                        XmlAttributeCollection layoutAttributes = layoutNode.Attributes;                        // Set the background and size of the form                      double layoutWidth = int.Parse(layoutAttributes["width"].Value' CultureInfo.InvariantCulture);                      double layoutHeight = int.Parse(layoutAttributes["height"].Value' CultureInfo.InvariantCulture);                        // Scaling factor' will be applied to all regions                      double scaleFactor = Math.Min(_clientSize.Width / layoutWidth' _clientSize.Height / layoutHeight);                        // Want to be able to center this shiv - therefore work out which one of these is going to have left overs                      int backgroundWidth = (int)(layoutWidth * scaleFactor);                      int backgroundHeight = (int)(layoutHeight * scaleFactor);                        double leftOverX;                      double leftOverY;                        try                      {                          leftOverX = Math.Abs(_clientSize.Width - backgroundWidth);                          leftOverY = Math.Abs(_clientSize.Height - backgroundHeight);                            if (leftOverX != 0) leftOverX = leftOverX / 2;                          if (leftOverY != 0) leftOverY = leftOverY / 2;                      }                      catch                      {                          leftOverX = 0;                          leftOverY = 0;                      }                        // New region and region options objects                      RegionOptions options = new RegionOptions();                        // Get the regions                      XmlNodeList listRegions = layoutXml.SelectNodes("/layout/region");                        foreach (XmlNode region in listRegions)                      {                          // Is there any media                          if (region.ChildNodes.Count == 0)                          {                              Debug.WriteLine("A region with no media detected");                              continue;                          }                            //each region                          XmlAttributeCollection nodeAttibutes = region.Attributes;                            options.scheduleId = item.scheduleid;                          options.layoutId = item.id;                          options.regionId = nodeAttibutes["id"].Value.ToString();                          options.width = (int)(Convert.ToDouble(nodeAttibutes["width"].Value' CultureInfo.InvariantCulture) * scaleFactor);                          options.height = (int)(Convert.ToDouble(nodeAttibutes["height"].Value' CultureInfo.InvariantCulture) * scaleFactor);                          options.left = (int)(Convert.ToDouble(nodeAttibutes["left"].Value' CultureInfo.InvariantCulture) * scaleFactor);                          options.top = (int)(Convert.ToDouble(nodeAttibutes["top"].Value' CultureInfo.InvariantCulture) * scaleFactor);                          options.scaleFactor = scaleFactor;                            // Store the original width and original height for scaling                          options.originalWidth = (int)Convert.ToDouble(nodeAttibutes["width"].Value' CultureInfo.InvariantCulture);                          options.originalHeight = (int)Convert.ToDouble(nodeAttibutes["height"].Value' CultureInfo.InvariantCulture);                            // Set the backgrounds (used for Web content offsets)                          options.backgroundLeft = options.left * -1;                          options.backgroundTop = options.top * -1;                            // Account for scaling                          options.left = options.left + (int)leftOverX;                          options.top = options.top + (int)leftOverY;                            // All the media nodes for this region / layout combination                          options.mediaNodes = region.SelectNodes("media");                            Region temp = new Region(ref _statLog' ref _cacheManager);                          temp.scheduleId = item.scheduleid;                          temp.hash = _cacheManager.GetMD5(item.id + ".xlf");                          temp.BorderStyle = _borderStyle;                            // Dont be fooled' this innocent little statement kicks everything off                          temp.regionOptions = options;                            _overlays.Add(temp);                          Controls.Add(temp);                          temp.BringToFront();                      }                        // Null stuff                      listRegions = null;                  }                    _clientInfoForm.ControlCount = Controls.Count;              }              catch (Exception e)              {                  Trace.WriteLine(new LogMessage("MainForm - _schedule_OverlayChangeEvent"' "Unknown issue managing overlays. Ex = " + e.Message)' LogType.Info.ToString());              }
Magic Number,XiboClient,MainForm,C:\repos\xibosignage_xibo-dotnetclient\MainForm.cs,ManageOverlays,The following statement contains a magic number: try              {                  // Parse all overlays and compare what we have now to the overlays we have already created (see OverlayRegions)                    // Take the ones we currently have up and remove them if they aren't in the new list                  // We use a for loop so that we are able to remove the region from the collection                  for (int i = 0; i < _overlays.Count; i++)                  {                      Region region = _overlays[i];                      bool found = false;                        foreach (ScheduleItem item in overlays)                      {                          if (item.scheduleid == region.scheduleId && _cacheManager.GetMD5(item.id + ".xlf") == region.hash)                          {                              found = true;                              break;                          }                      }                        if (!found)                      {                          Debug.WriteLine("Removing overlay which is no-longer required. Overlay: " + region.scheduleId' "Overlays");                          region.Clear();                          region.Dispose();                          Controls.Remove(region);                          _overlays.Remove(region);                      }                  }                    // Take the ones that are in the new list and add them                  foreach (ScheduleItem item in overlays)                  {                      // Check its not already added.                      bool found = false;                      foreach (Region region in _overlays)                      {                          if (region.scheduleId == item.scheduleid)                          {                              found = true;                              break;                          }                      }                        if (found)                          continue;                        // Parse the layout for regions' and create them.                      string layoutPath = item.layoutFile;                        // Get this layouts XML                      XmlDocument layoutXml = new XmlDocument();                        try                      {                          // try to open the layout file                          using (FileStream fs = File.Open(layoutPath' FileMode.Open' FileAccess.Read' FileShare.Write))                          {                              using (XmlReader reader = XmlReader.Create(fs))                              {                                  layoutXml.Load(reader);                                    reader.Close();                              }                              fs.Close();                          }                      }                      catch (Exception ex)                      {                          Trace.WriteLine(new LogMessage("MainForm - _schedule_OverlayChangeEvent"' string.Format("Could not find the layout file {0}: {1}"' layoutPath' ex.Message))' LogType.Info.ToString());                          continue;                      }                        // Attributes of the main layout node                      XmlNode layoutNode = layoutXml.SelectSingleNode("/layout");                        XmlAttributeCollection layoutAttributes = layoutNode.Attributes;                        // Set the background and size of the form                      double layoutWidth = int.Parse(layoutAttributes["width"].Value' CultureInfo.InvariantCulture);                      double layoutHeight = int.Parse(layoutAttributes["height"].Value' CultureInfo.InvariantCulture);                        // Scaling factor' will be applied to all regions                      double scaleFactor = Math.Min(_clientSize.Width / layoutWidth' _clientSize.Height / layoutHeight);                        // Want to be able to center this shiv - therefore work out which one of these is going to have left overs                      int backgroundWidth = (int)(layoutWidth * scaleFactor);                      int backgroundHeight = (int)(layoutHeight * scaleFactor);                        double leftOverX;                      double leftOverY;                        try                      {                          leftOverX = Math.Abs(_clientSize.Width - backgroundWidth);                          leftOverY = Math.Abs(_clientSize.Height - backgroundHeight);                            if (leftOverX != 0) leftOverX = leftOverX / 2;                          if (leftOverY != 0) leftOverY = leftOverY / 2;                      }                      catch                      {                          leftOverX = 0;                          leftOverY = 0;                      }                        // New region and region options objects                      RegionOptions options = new RegionOptions();                        // Get the regions                      XmlNodeList listRegions = layoutXml.SelectNodes("/layout/region");                        foreach (XmlNode region in listRegions)                      {                          // Is there any media                          if (region.ChildNodes.Count == 0)                          {                              Debug.WriteLine("A region with no media detected");                              continue;                          }                            //each region                          XmlAttributeCollection nodeAttibutes = region.Attributes;                            options.scheduleId = item.scheduleid;                          options.layoutId = item.id;                          options.regionId = nodeAttibutes["id"].Value.ToString();                          options.width = (int)(Convert.ToDouble(nodeAttibutes["width"].Value' CultureInfo.InvariantCulture) * scaleFactor);                          options.height = (int)(Convert.ToDouble(nodeAttibutes["height"].Value' CultureInfo.InvariantCulture) * scaleFactor);                          options.left = (int)(Convert.ToDouble(nodeAttibutes["left"].Value' CultureInfo.InvariantCulture) * scaleFactor);                          options.top = (int)(Convert.ToDouble(nodeAttibutes["top"].Value' CultureInfo.InvariantCulture) * scaleFactor);                          options.scaleFactor = scaleFactor;                            // Store the original width and original height for scaling                          options.originalWidth = (int)Convert.ToDouble(nodeAttibutes["width"].Value' CultureInfo.InvariantCulture);                          options.originalHeight = (int)Convert.ToDouble(nodeAttibutes["height"].Value' CultureInfo.InvariantCulture);                            // Set the backgrounds (used for Web content offsets)                          options.backgroundLeft = options.left * -1;                          options.backgroundTop = options.top * -1;                            // Account for scaling                          options.left = options.left + (int)leftOverX;                          options.top = options.top + (int)leftOverY;                            // All the media nodes for this region / layout combination                          options.mediaNodes = region.SelectNodes("media");                            Region temp = new Region(ref _statLog' ref _cacheManager);                          temp.scheduleId = item.scheduleid;                          temp.hash = _cacheManager.GetMD5(item.id + ".xlf");                          temp.BorderStyle = _borderStyle;                            // Dont be fooled' this innocent little statement kicks everything off                          temp.regionOptions = options;                            _overlays.Add(temp);                          Controls.Add(temp);                          temp.BringToFront();                      }                        // Null stuff                      listRegions = null;                  }                    _clientInfoForm.ControlCount = Controls.Count;              }              catch (Exception e)              {                  Trace.WriteLine(new LogMessage("MainForm - _schedule_OverlayChangeEvent"' "Unknown issue managing overlays. Ex = " + e.Message)' LogType.Info.ToString());              }
Magic Number,XiboClient,MainForm,C:\repos\xibosignage_xibo-dotnetclient\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(1024' 768);
Magic Number,XiboClient,MainForm,C:\repos\xibosignage_xibo-dotnetclient\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(1024' 768);
Magic Number,XiboClient,Media,C:\repos\xibosignage_xibo-dotnetclient\Media\Media.cs,StartTimer,The following statement contains a magic number: if (!_timerStarted && _duration != 0)              {                  _timer = new Timer();                  _timer.Interval = (1000 * _duration);                  _timer.Start();                    _timer.Tick += new EventHandler(timer_Tick);                    _timerStarted = true;              }
Magic Number,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(99' 37);
Magic Number,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(99' 37);
Magic Number,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(128' 22);
Magic Number,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(128' 22);
Magic Number,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The following statement contains a magic number: this.label2.Location = new System.Drawing.Point(184' 87);
Magic Number,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The following statement contains a magic number: this.label2.Location = new System.Drawing.Point(184' 87);
Magic Number,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The following statement contains a magic number: this.label2.Size = new System.Drawing.Size(43' 22);
Magic Number,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The following statement contains a magic number: this.label2.Size = new System.Drawing.Size(43' 22);
Magic Number,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The following statement contains a magic number: this.label2.TabIndex = 3;
Magic Number,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The following statement contains a magic number: this.label3.Location = new System.Drawing.Point(109' 141);
Magic Number,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The following statement contains a magic number: this.label3.Location = new System.Drawing.Point(109' 141);
Magic Number,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The following statement contains a magic number: this.label3.Size = new System.Drawing.Size(118' 22);
Magic Number,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The following statement contains a magic number: this.label3.Size = new System.Drawing.Size(118' 22);
Magic Number,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The following statement contains a magic number: this.label3.TabIndex = 5;
Magic Number,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonSaveSettings.Location = new System.Drawing.Point(12' 508);
Magic Number,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonSaveSettings.Location = new System.Drawing.Point(12' 508);
Magic Number,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonSaveSettings.Size = new System.Drawing.Size(387' 41);
Magic Number,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonSaveSettings.Size = new System.Drawing.Size(387' 41);
Magic Number,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonSaveSettings.TabIndex = 6;
Magic Number,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The following statement contains a magic number: this.label9.Location = new System.Drawing.Point(46' 174);
Magic Number,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The following statement contains a magic number: this.label9.Location = new System.Drawing.Point(46' 174);
Magic Number,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The following statement contains a magic number: this.label9.Size = new System.Drawing.Size(97' 22);
Magic Number,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The following statement contains a magic number: this.label9.Size = new System.Drawing.Size(97' 22);
Magic Number,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The following statement contains a magic number: this.label9.TabIndex = 13;
Magic Number,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonLibrary.Location = new System.Drawing.Point(441' 136);
Magic Number,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonLibrary.Location = new System.Drawing.Point(441' 136);
Magic Number,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonLibrary.Size = new System.Drawing.Size(109' 31);
Magic Number,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonLibrary.Size = new System.Drawing.Size(109' 31);
Magic Number,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonLibrary.TabIndex = 10;
Magic Number,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The following statement contains a magic number: this.tbHardwareKey.Location = new System.Drawing.Point(148' 171);
Magic Number,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The following statement contains a magic number: this.tbHardwareKey.Location = new System.Drawing.Point(148' 171);
Magic Number,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The following statement contains a magic number: this.tbHardwareKey.Size = new System.Drawing.Size(497' 29);
Magic Number,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The following statement contains a magic number: this.tbHardwareKey.Size = new System.Drawing.Size(497' 29);
Magic Number,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The following statement contains a magic number: this.tbHardwareKey.TabIndex = 14;
Magic Number,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The following statement contains a magic number: this.textBoxXmdsUri.Location = new System.Drawing.Point(233' 34);
Magic Number,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The following statement contains a magic number: this.textBoxXmdsUri.Location = new System.Drawing.Point(233' 34);
Magic Number,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The following statement contains a magic number: this.textBoxXmdsUri.Size = new System.Drawing.Size(317' 29);
Magic Number,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The following statement contains a magic number: this.textBoxXmdsUri.Size = new System.Drawing.Size(317' 29);
Magic Number,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The following statement contains a magic number: this.textBoxServerKey.Location = new System.Drawing.Point(233' 84);
Magic Number,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The following statement contains a magic number: this.textBoxServerKey.Location = new System.Drawing.Point(233' 84);
Magic Number,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The following statement contains a magic number: this.textBoxServerKey.Size = new System.Drawing.Size(317' 29);
Magic Number,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The following statement contains a magic number: this.textBoxServerKey.Size = new System.Drawing.Size(317' 29);
Magic Number,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The following statement contains a magic number: this.textBoxServerKey.TabIndex = 2;
Magic Number,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The following statement contains a magic number: this.textBoxLibraryPath.Location = new System.Drawing.Point(233' 138);
Magic Number,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The following statement contains a magic number: this.textBoxLibraryPath.Location = new System.Drawing.Point(233' 138);
Magic Number,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The following statement contains a magic number: this.textBoxLibraryPath.Size = new System.Drawing.Size(202' 29);
Magic Number,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The following statement contains a magic number: this.textBoxLibraryPath.Size = new System.Drawing.Size(202' 29);
Magic Number,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The following statement contains a magic number: this.textBoxLibraryPath.TabIndex = 4;
Magic Number,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonDisplayAdmin.Location = new System.Drawing.Point(501' 508);
Magic Number,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonDisplayAdmin.Location = new System.Drawing.Point(501' 508);
Magic Number,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonDisplayAdmin.Size = new System.Drawing.Size(90' 41);
Magic Number,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonDisplayAdmin.Size = new System.Drawing.Size(90' 41);
Magic Number,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonDisplayAdmin.TabIndex = 7;
Magic Number,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The following statement contains a magic number: this.textBoxProxyDomain.Location = new System.Drawing.Point(148' 120);
Magic Number,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The following statement contains a magic number: this.textBoxProxyDomain.Location = new System.Drawing.Point(148' 120);
Magic Number,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The following statement contains a magic number: this.textBoxProxyDomain.Size = new System.Drawing.Size(497' 29);
Magic Number,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The following statement contains a magic number: this.textBoxProxyDomain.Size = new System.Drawing.Size(497' 29);
Magic Number,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The following statement contains a magic number: this.textBoxProxyDomain.TabIndex = 7;
Magic Number,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The following statement contains a magic number: this.maskedTextBoxProxyPass.Location = new System.Drawing.Point(148' 83);
Magic Number,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The following statement contains a magic number: this.maskedTextBoxProxyPass.Location = new System.Drawing.Point(148' 83);
Magic Number,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The following statement contains a magic number: this.maskedTextBoxProxyPass.Size = new System.Drawing.Size(497' 29);
Magic Number,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The following statement contains a magic number: this.maskedTextBoxProxyPass.Size = new System.Drawing.Size(497' 29);
Magic Number,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The following statement contains a magic number: this.maskedTextBoxProxyPass.TabIndex = 5;
Magic Number,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The following statement contains a magic number: this.textBoxProxyUser.Location = new System.Drawing.Point(148' 49);
Magic Number,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The following statement contains a magic number: this.textBoxProxyUser.Location = new System.Drawing.Point(148' 49);
Magic Number,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The following statement contains a magic number: this.textBoxProxyUser.Size = new System.Drawing.Size(497' 29);
Magic Number,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The following statement contains a magic number: this.textBoxProxyUser.Size = new System.Drawing.Size(497' 29);
Magic Number,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The following statement contains a magic number: this.textBoxProxyUser.TabIndex = 3;
Magic Number,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The following statement contains a magic number: this.labelProxyDomain.Location = new System.Drawing.Point(65' 123);
Magic Number,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The following statement contains a magic number: this.labelProxyDomain.Location = new System.Drawing.Point(65' 123);
Magic Number,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The following statement contains a magic number: this.labelProxyDomain.Size = new System.Drawing.Size(75' 22);
Magic Number,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The following statement contains a magic number: this.labelProxyDomain.Size = new System.Drawing.Size(75' 22);
Magic Number,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The following statement contains a magic number: this.labelProxyDomain.TabIndex = 2;
Magic Number,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The following statement contains a magic number: this.labelProxyPass.Location = new System.Drawing.Point(46' 86);
Magic Number,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The following statement contains a magic number: this.labelProxyPass.Location = new System.Drawing.Point(46' 86);
Magic Number,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The following statement contains a magic number: this.labelProxyPass.Size = new System.Drawing.Size(94' 22);
Magic Number,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The following statement contains a magic number: this.labelProxyPass.Size = new System.Drawing.Size(94' 22);
Magic Number,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The following statement contains a magic number: this.labelProxyUser.Location = new System.Drawing.Point(43' 52);
Magic Number,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The following statement contains a magic number: this.labelProxyUser.Location = new System.Drawing.Point(43' 52);
Magic Number,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The following statement contains a magic number: this.labelProxyUser.Size = new System.Drawing.Size(97' 22);
Magic Number,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The following statement contains a magic number: this.labelProxyUser.Size = new System.Drawing.Size(97' 22);
Magic Number,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The following statement contains a magic number: this.splashButtonBrowse.Location = new System.Drawing.Point(536' 211);
Magic Number,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The following statement contains a magic number: this.splashButtonBrowse.Location = new System.Drawing.Point(536' 211);
Magic Number,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The following statement contains a magic number: this.splashButtonBrowse.Size = new System.Drawing.Size(109' 29);
Magic Number,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The following statement contains a magic number: this.splashButtonBrowse.Size = new System.Drawing.Size(109' 29);
Magic Number,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The following statement contains a magic number: this.splashButtonBrowse.TabIndex = 14;
Magic Number,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The following statement contains a magic number: this.linkLabel1.Location = new System.Drawing.Point(249' 283);
Magic Number,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The following statement contains a magic number: this.linkLabel1.Location = new System.Drawing.Point(249' 283);
Magic Number,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The following statement contains a magic number: this.linkLabel1.Size = new System.Drawing.Size(177' 18);
Magic Number,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The following statement contains a magic number: this.linkLabel1.Size = new System.Drawing.Size(177' 18);
Magic Number,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The following statement contains a magic number: this.linkLabel1.TabIndex = 13;
Magic Number,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The following statement contains a magic number: this.label17.Location = new System.Drawing.Point(98' 252);
Magic Number,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The following statement contains a magic number: this.label17.Location = new System.Drawing.Point(98' 252);
Magic Number,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The following statement contains a magic number: this.label17.Size = new System.Drawing.Size(509' 18);
Magic Number,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The following statement contains a magic number: this.label17.Size = new System.Drawing.Size(509' 18);
Magic Number,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The following statement contains a magic number: this.label17.TabIndex = 12;
Magic Number,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The following statement contains a magic number: this.label16.Location = new System.Drawing.Point(6' 214);
Magic Number,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The following statement contains a magic number: this.label16.Location = new System.Drawing.Point(6' 214);
Magic Number,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The following statement contains a magic number: this.label16.Size = new System.Drawing.Size(134' 22);
Magic Number,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The following statement contains a magic number: this.label16.Size = new System.Drawing.Size(134' 22);
Magic Number,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The following statement contains a magic number: this.label16.TabIndex = 11;
Magic Number,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The following statement contains a magic number: this.splashOverride.Location = new System.Drawing.Point(148' 211);
Magic Number,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The following statement contains a magic number: this.splashOverride.Location = new System.Drawing.Point(148' 211);
Magic Number,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The following statement contains a magic number: this.splashOverride.Size = new System.Drawing.Size(382' 29);
Magic Number,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The following statement contains a magic number: this.splashOverride.Size = new System.Drawing.Size(382' 29);
Magic Number,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The following statement contains a magic number: this.splashOverride.TabIndex = 10;
Magic Number,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The following statement contains a magic number: this.menuStrip1.Size = new System.Drawing.Size(698' 24);
Magic Number,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The following statement contains a magic number: this.menuStrip1.Size = new System.Drawing.Size(698' 24);
Magic Number,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The following statement contains a magic number: this.menuStrip1.TabIndex = 8;
Magic Number,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The following statement contains a magic number: this.fileToolStripMenuItem.Size = new System.Drawing.Size(37' 20);
Magic Number,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The following statement contains a magic number: this.fileToolStripMenuItem.Size = new System.Drawing.Size(37' 20);
Magic Number,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The following statement contains a magic number: this.exitToolStripMenuItem.Size = new System.Drawing.Size(92' 22);
Magic Number,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The following statement contains a magic number: this.exitToolStripMenuItem.Size = new System.Drawing.Size(92' 22);
Magic Number,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The following statement contains a magic number: this.aboutToolStripMenuItem.Size = new System.Drawing.Size(44' 20);
Magic Number,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The following statement contains a magic number: this.aboutToolStripMenuItem.Size = new System.Drawing.Size(44' 20);
Magic Number,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The following statement contains a magic number: this.aboutToolStripMenuItem1.Size = new System.Drawing.Size(137' 22);
Magic Number,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The following statement contains a magic number: this.aboutToolStripMenuItem1.Size = new System.Drawing.Size(137' 22);
Magic Number,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The following statement contains a magic number: this.onlineHelpToolStripMenuItem.Size = new System.Drawing.Size(137' 22);
Magic Number,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The following statement contains a magic number: this.onlineHelpToolStripMenuItem.Size = new System.Drawing.Size(137' 22);
Magic Number,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The following statement contains a magic number: this.tbStatus.Location = new System.Drawing.Point(12' 391);
Magic Number,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The following statement contains a magic number: this.tbStatus.Location = new System.Drawing.Point(12' 391);
Magic Number,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The following statement contains a magic number: this.tbStatus.Size = new System.Drawing.Size(674' 100);
Magic Number,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The following statement contains a magic number: this.tbStatus.Size = new System.Drawing.Size(674' 100);
Magic Number,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The following statement contains a magic number: this.tbStatus.TabIndex = 15;
Magic Number,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonExit.Location = new System.Drawing.Point(597' 508);
Magic Number,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonExit.Location = new System.Drawing.Point(597' 508);
Magic Number,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonExit.Size = new System.Drawing.Size(90' 41);
Magic Number,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonExit.Size = new System.Drawing.Size(90' 41);
Magic Number,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonExit.TabIndex = 16;
Magic Number,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The following statement contains a magic number: this.button1.Location = new System.Drawing.Point(405' 508);
Magic Number,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The following statement contains a magic number: this.button1.Location = new System.Drawing.Point(405' 508);
Magic Number,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The following statement contains a magic number: this.button1.Size = new System.Drawing.Size(90' 41);
Magic Number,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The following statement contains a magic number: this.button1.Size = new System.Drawing.Size(90' 41);
Magic Number,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The following statement contains a magic number: this.button1.TabIndex = 17;
Magic Number,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The following statement contains a magic number: this.tabControl1.Location = new System.Drawing.Point(12' 40);
Magic Number,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The following statement contains a magic number: this.tabControl1.Location = new System.Drawing.Point(12' 40);
Magic Number,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The following statement contains a magic number: this.tabControl1.Size = new System.Drawing.Size(675' 345);
Magic Number,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The following statement contains a magic number: this.tabControl1.Size = new System.Drawing.Size(675' 345);
Magic Number,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The following statement contains a magic number: this.tabControl1.TabIndex = 18;
Magic Number,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The following statement contains a magic number: this.tabPage1.Location = new System.Drawing.Point(4' 22);
Magic Number,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The following statement contains a magic number: this.tabPage1.Location = new System.Drawing.Point(4' 22);
Magic Number,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The following statement contains a magic number: this.tabPage1.Padding = new System.Windows.Forms.Padding(3);
Magic Number,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The following statement contains a magic number: this.tabPage1.Size = new System.Drawing.Size(667' 319);
Magic Number,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The following statement contains a magic number: this.tabPage1.Size = new System.Drawing.Size(667' 319);
Magic Number,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The following statement contains a magic number: this.label5.Location = new System.Drawing.Point(33' 231);
Magic Number,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The following statement contains a magic number: this.label5.Location = new System.Drawing.Point(33' 231);
Magic Number,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The following statement contains a magic number: this.label5.Size = new System.Drawing.Size(604' 24);
Magic Number,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The following statement contains a magic number: this.label5.Size = new System.Drawing.Size(604' 24);
Magic Number,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The following statement contains a magic number: this.label5.TabIndex = 15;
Magic Number,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The following statement contains a magic number: this.tabPage2.Location = new System.Drawing.Point(4' 22);
Magic Number,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The following statement contains a magic number: this.tabPage2.Location = new System.Drawing.Point(4' 22);
Magic Number,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The following statement contains a magic number: this.tabPage2.Padding = new System.Windows.Forms.Padding(3);
Magic Number,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The following statement contains a magic number: this.tabPage2.Size = new System.Drawing.Size(667' 319);
Magic Number,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The following statement contains a magic number: this.tabPage2.Size = new System.Drawing.Size(667' 319);
Magic Number,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The following statement contains a magic number: this.label4.Location = new System.Drawing.Point(144' 13);
Magic Number,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The following statement contains a magic number: this.label4.Location = new System.Drawing.Point(144' 13);
Magic Number,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The following statement contains a magic number: this.label4.Size = new System.Drawing.Size(215' 24);
Magic Number,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The following statement contains a magic number: this.label4.Size = new System.Drawing.Size(215' 24);
Magic Number,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The following statement contains a magic number: this.label4.TabIndex = 15;
Magic Number,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(698' 561);
Magic Number,XiboClient,OptionForm,C:\repos\xibosignage_xibo-dotnetclient\Forms\OptionForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(698' 561);
Magic Number,XiboClient,Program,C:\repos\xibosignage_xibo-dotnetclient\Program.cs,Main,The following statement contains a magic number: try              {                  // Check for any passed arguments                  if (args.Length > 0)                  {                      if (args[0].ToString() == "o")                      {                          RunSettings();                      }                      else                      {                          switch (args[0].ToLower().Trim().Substring(0' 2))                          {                              // Preview the screen saver                              case "/p":                                  // args[1] is the handle to the preview window                                  KeyInterceptor.SetHook();                                  MouseInterceptor.SetHook();                                  RunClient(new IntPtr(long.Parse(args[1])));                                  KeyInterceptor.UnsetHook();                                  MouseInterceptor.UnsetHook();                                  break;                                // Show the screen saver                              case "/s":                                  KeyInterceptor.SetHook();                                  MouseInterceptor.SetHook();                                  RunClient(true);                                  KeyInterceptor.UnsetHook();                                  MouseInterceptor.UnsetHook();                                  break;                                // Configure the screesaver's settings                              case "/c":                                  // Show the settings form                                  RunSettings();                                  break;                                // Show the screen saver                              default:                                  KeyInterceptor.SetHook();                                  MouseInterceptor.SetHook();                                  RunClient(true);                                  KeyInterceptor.UnsetHook();                                  MouseInterceptor.UnsetHook();                                  break;                          }                      }                  }                  else                  {                      // Add a message filter                      Application.AddMessageFilter(KeyStore.Instance);                        // No arguments were passed - we run the usual client                      RunClient();                  }              }              catch (Exception ex)              {                  HandleUnhandledException(ex);              }
Magic Number,XiboClient,Region,C:\repos\xibosignage_xibo-dotnetclient\Control\Region.cs,Region,The following statement contains a magic number: _options.width = 1024;
Magic Number,XiboClient,Region,C:\repos\xibosignage_xibo-dotnetclient\Control\Region.cs,Region,The following statement contains a magic number: _options.height = 768;
Magic Number,XiboClient,Region,C:\repos\xibosignage_xibo-dotnetclient\Control\Region.cs,SetNextMediaNodeInOptions,The following statement contains a magic number: _options.scrollSpeed = 30;
Magic Number,XiboClient,Region,C:\repos\xibosignage_xibo-dotnetclient\Control\Region.cs,SetNextMediaNodeInOptions,The following statement contains a magic number: _options.updateInterval = 6;
Magic Number,XiboClient,Region,C:\repos\xibosignage_xibo-dotnetclient\Control\Region.cs,ParseOptionsForMediaNode,The following statement contains a magic number: if (nodeAttributes["duration"].Value != "")              {                  _options.duration = int.Parse(nodeAttributes["duration"].Value);              }              else              {                  _options.duration = 60;                  Trace.WriteLine("Duration is Empty' using a default of 60."' "Region - SetNextMediaNode");              }
Magic Number,XiboClient,Region,C:\repos\xibosignage_xibo-dotnetclient\Control\Region.cs,ParseOptionsForMediaNode,The following statement contains a magic number: if (_options.duration == 0 && _options.type != "video" && _options.type != "localvideo")              {                  int emptyLayoutDuration = int.Parse(ApplicationSettings.Default.EmptyLayoutDuration.ToString());                  _options.duration = (emptyLayoutDuration == 0) ? 10 : emptyLayoutDuration;              }
Magic Number,XiboClient,Region,C:\repos\xibosignage_xibo-dotnetclient\Control\Region.cs,ParseOptionsForMediaNode,The following statement contains a magic number: foreach (XmlNode option in optionNode.ChildNodes)              {                  if (option.Name == "direction")                  {                      _options.direction = option.InnerText;                  }                  else if (option.Name == "uri")                  {                      _options.uri = option.InnerText;                  }                  else if (option.Name == "copyright")                  {                      _options.copyrightNotice = option.InnerText;                  }                  else if (option.Name == "scrollSpeed")                  {                      try                      {                          _options.scrollSpeed = int.Parse(option.InnerText);                      }                      catch                      {                          System.Diagnostics.Trace.WriteLine("Non integer scrollSpeed in XLF"' "Region - SetNextMediaNode");                      }                  }                  else if (option.Name == "updateInterval")                  {                      updateIntervalProvided = true;                        try                      {                          _options.updateInterval = int.Parse(option.InnerText);                      }                      catch                      {                          // Update interval not defined' so assume a high value                          _options.updateInterval = 3600;                            Trace.WriteLine("Non integer updateInterval in XLF"' "Region - SetNextMediaNode");                      }                  }                    // Add this to the options object                  _options.Dictionary.Add(option.Name' option.InnerText);              }
Magic Number,XiboClient,Region,C:\repos\xibosignage_xibo-dotnetclient\Control\Region.cs,ParseOptionsForMediaNode,The following statement contains a magic number: if (!updateIntervalProvided)              {                  // Special handling for text/webpages because we know they should never have a default update interval applied                  if (_options.type == "webpage" || _options.type == "text")                  {                      // Very high (will expire eventually' but shouldn't cause a routine request for a new resource                      _options.updateInterval = int.MaxValue;                  }                  else                  {                      // Default to 5 minutes for those items that do not provide an update interval                      _options.updateInterval = 5;                  }              }
Magic Number,XiboClient,RequiredFiles,C:\repos\xibosignage_xibo-dotnetclient\Logic\RequiredFiles.cs,SetRequiredFiles,The following statement contains a magic number: foreach (XmlNode file in fileNodes)              {                  RequiredFile rf = new RequiredFile();                                     XmlAttributeCollection attributes = file.Attributes;                    rf.FileType = attributes["type"].Value;                  rf.Downloading = false;                  rf.Complete = false;                  rf.LastChecked = DateTime.Now;                  rf.ChunkOffset = 0;                  rf.ChunkSize = 0;                    // Fill in some information that we already know                  if (rf.FileType == "media")                  {                      rf.Id = int.Parse(attributes["id"].Value);                      rf.Path = attributes["path"].Value;                      rf.SaveAs = (attributes["saveAs"] == null || string.IsNullOrEmpty(attributes["saveAs"].Value)) ? rf.Path : attributes["saveAs"].Value;                      rf.Http = (attributes["download"].Value == "http");                      rf.ChunkSize = 512000;                  }                  else if (rf.FileType == "layout")                  {                      rf.Id = int.Parse(attributes["id"].Value);                      rf.Path = attributes["path"].Value;                      rf.Http = (attributes["download"].Value == "http");                        if (rf.Http)                      {                          rf.SaveAs = attributes["saveAs"].Value;                      }                      else                      {                          rf.Path = rf.Path + ".xlf";                          rf.SaveAs = rf.Path;                      }                                            rf.ChunkSize = rf.Size;                  }                  else if (rf.FileType == "resource")                  {                      // Do something special here. Check to see if the resource file already exists otherwise add to RF                      try                      {                          // Set the ID to be some random number                          rf.Id = int.Parse(attributes["id"].Value);                          rf.LayoutId = int.Parse(attributes["layoutid"].Value);                          rf.RegionId = attributes["regionid"].Value;                          rf.MediaId = attributes["mediaid"].Value;                          rf.Path = rf.MediaId + ".htm";                          rf.SaveAs = rf.Path;                                                    // Set the size to something arbitary                          rf.Size = 10000;                            // Check to see if this has already been downloaded                          if (File.Exists(ApplicationSettings.Default.LibraryPath + @"\" + rf.MediaId + ".htm"))                          {                              // Has it expired?                              int updated = 0;                                try                              {                                  updated = int.Parse(attributes["updated"].Value);                              }                              catch (Exception) {}                                DateTime updatedDt = new DateTime(1970' 1' 1' 0' 0' 0' DateTimeKind.Utc);                              updatedDt = updatedDt.AddSeconds(updated);                                if (File.GetLastWriteTimeUtc(ApplicationSettings.Default.LibraryPath + @"\" + rf.MediaId + ".htm") > updatedDt)                                  rf.Complete = true;                          }                            // Add to the Rf Node                          RequiredFileList.Add(rf);                          continue;                      }                      catch                      {                          // Forget about this resource                          continue;                      }                  }                  else                      continue;                    // This stuff only executes for Layout/Files items                  rf.Md5 = attributes["md5"].Value;                  rf.Size = double.Parse(attributes["size"].Value);                    // Does this file already exist in the RF node? We might receive duplicates.                  bool found = false;                    foreach (RequiredFile existingRf in RequiredFileList)                  {                      if (existingRf.Id == rf.Id && existingRf.FileType == rf.FileType)                      {                          found = true;                          break;                      }                  }                    if (found)                  {                      Trace.WriteLine(new LogMessage("RequiredFiles - SetRequiredFiles"' "Duplicate file detected' ignoring. FileId = " + rf.Id)' LogType.Audit.ToString());                      continue;                  }                    // Does this file exist?                  if (File.Exists(ApplicationSettings.Default.LibraryPath + @"\" + rf.SaveAs))                  {                      // Compare MD5 of the file we currently have' to what we should have                      if (rf.Md5 != _cacheManager.GetMD5(rf.SaveAs))                      {                          Trace.WriteLine(new LogMessage("RequiredFiles - SetRequiredFiles"' "MD5 different for existing file: " + rf.SaveAs)' LogType.Info.ToString());                            // They are different                          _cacheManager.Remove(rf.SaveAs);                            // TODO: Resume the file download under certain conditions. Make sure its not bigger than it should be.                           // Make sure it is fairly fresh                          FileInfo info = new FileInfo(ApplicationSettings.Default.LibraryPath + @"\" + rf.SaveAs);                            if (info.Length < rf.Size && info.LastWriteTime > DateTime.Now.AddDays(-1))                          {                              // Continue the file                              rf.ChunkOffset = (int)info.Length;                          }                          else                          {                              // Delete the old file as it is wrong                              try                              {                                  File.Delete(ApplicationSettings.Default.LibraryPath + @"\" + rf.SaveAs);                              }                              catch (Exception ex)                              {                                  Trace.WriteLine(new LogMessage("CompareAndCollect"' "Unable to delete incorrect file because: " + ex.Message));                              }                          }                      }                      else                      {                          // The MD5 is equal - we already have an up to date version of this file.                          rf.Complete = true;                          _cacheManager.Add(rf.SaveAs' rf.Md5);                      }                  }                  else                  {                      // File does not exist' therefore remove it from the cache manager (on the off chance that it is in there for some reason)                      _cacheManager.Remove(rf.SaveAs);                  }                    RequiredFileList.Add(rf);              }
Magic Number,XiboClient,RequiredFiles,C:\repos\xibosignage_xibo-dotnetclient\Logic\RequiredFiles.cs,SetRequiredFiles,The following statement contains a magic number: foreach (XmlNode file in fileNodes)              {                  RequiredFile rf = new RequiredFile();                                     XmlAttributeCollection attributes = file.Attributes;                    rf.FileType = attributes["type"].Value;                  rf.Downloading = false;                  rf.Complete = false;                  rf.LastChecked = DateTime.Now;                  rf.ChunkOffset = 0;                  rf.ChunkSize = 0;                    // Fill in some information that we already know                  if (rf.FileType == "media")                  {                      rf.Id = int.Parse(attributes["id"].Value);                      rf.Path = attributes["path"].Value;                      rf.SaveAs = (attributes["saveAs"] == null || string.IsNullOrEmpty(attributes["saveAs"].Value)) ? rf.Path : attributes["saveAs"].Value;                      rf.Http = (attributes["download"].Value == "http");                      rf.ChunkSize = 512000;                  }                  else if (rf.FileType == "layout")                  {                      rf.Id = int.Parse(attributes["id"].Value);                      rf.Path = attributes["path"].Value;                      rf.Http = (attributes["download"].Value == "http");                        if (rf.Http)                      {                          rf.SaveAs = attributes["saveAs"].Value;                      }                      else                      {                          rf.Path = rf.Path + ".xlf";                          rf.SaveAs = rf.Path;                      }                                            rf.ChunkSize = rf.Size;                  }                  else if (rf.FileType == "resource")                  {                      // Do something special here. Check to see if the resource file already exists otherwise add to RF                      try                      {                          // Set the ID to be some random number                          rf.Id = int.Parse(attributes["id"].Value);                          rf.LayoutId = int.Parse(attributes["layoutid"].Value);                          rf.RegionId = attributes["regionid"].Value;                          rf.MediaId = attributes["mediaid"].Value;                          rf.Path = rf.MediaId + ".htm";                          rf.SaveAs = rf.Path;                                                    // Set the size to something arbitary                          rf.Size = 10000;                            // Check to see if this has already been downloaded                          if (File.Exists(ApplicationSettings.Default.LibraryPath + @"\" + rf.MediaId + ".htm"))                          {                              // Has it expired?                              int updated = 0;                                try                              {                                  updated = int.Parse(attributes["updated"].Value);                              }                              catch (Exception) {}                                DateTime updatedDt = new DateTime(1970' 1' 1' 0' 0' 0' DateTimeKind.Utc);                              updatedDt = updatedDt.AddSeconds(updated);                                if (File.GetLastWriteTimeUtc(ApplicationSettings.Default.LibraryPath + @"\" + rf.MediaId + ".htm") > updatedDt)                                  rf.Complete = true;                          }                            // Add to the Rf Node                          RequiredFileList.Add(rf);                          continue;                      }                      catch                      {                          // Forget about this resource                          continue;                      }                  }                  else                      continue;                    // This stuff only executes for Layout/Files items                  rf.Md5 = attributes["md5"].Value;                  rf.Size = double.Parse(attributes["size"].Value);                    // Does this file already exist in the RF node? We might receive duplicates.                  bool found = false;                    foreach (RequiredFile existingRf in RequiredFileList)                  {                      if (existingRf.Id == rf.Id && existingRf.FileType == rf.FileType)                      {                          found = true;                          break;                      }                  }                    if (found)                  {                      Trace.WriteLine(new LogMessage("RequiredFiles - SetRequiredFiles"' "Duplicate file detected' ignoring. FileId = " + rf.Id)' LogType.Audit.ToString());                      continue;                  }                    // Does this file exist?                  if (File.Exists(ApplicationSettings.Default.LibraryPath + @"\" + rf.SaveAs))                  {                      // Compare MD5 of the file we currently have' to what we should have                      if (rf.Md5 != _cacheManager.GetMD5(rf.SaveAs))                      {                          Trace.WriteLine(new LogMessage("RequiredFiles - SetRequiredFiles"' "MD5 different for existing file: " + rf.SaveAs)' LogType.Info.ToString());                            // They are different                          _cacheManager.Remove(rf.SaveAs);                            // TODO: Resume the file download under certain conditions. Make sure its not bigger than it should be.                           // Make sure it is fairly fresh                          FileInfo info = new FileInfo(ApplicationSettings.Default.LibraryPath + @"\" + rf.SaveAs);                            if (info.Length < rf.Size && info.LastWriteTime > DateTime.Now.AddDays(-1))                          {                              // Continue the file                              rf.ChunkOffset = (int)info.Length;                          }                          else                          {                              // Delete the old file as it is wrong                              try                              {                                  File.Delete(ApplicationSettings.Default.LibraryPath + @"\" + rf.SaveAs);                              }                              catch (Exception ex)                              {                                  Trace.WriteLine(new LogMessage("CompareAndCollect"' "Unable to delete incorrect file because: " + ex.Message));                              }                          }                      }                      else                      {                          // The MD5 is equal - we already have an up to date version of this file.                          rf.Complete = true;                          _cacheManager.Add(rf.SaveAs' rf.Md5);                      }                  }                  else                  {                      // File does not exist' therefore remove it from the cache manager (on the off chance that it is in there for some reason)                      _cacheManager.Remove(rf.SaveAs);                  }                    RequiredFileList.Add(rf);              }
Magic Number,XiboClient,RequiredFiles,C:\repos\xibosignage_xibo-dotnetclient\Logic\RequiredFiles.cs,SetRequiredFiles,The following statement contains a magic number: foreach (XmlNode file in fileNodes)              {                  RequiredFile rf = new RequiredFile();                                     XmlAttributeCollection attributes = file.Attributes;                    rf.FileType = attributes["type"].Value;                  rf.Downloading = false;                  rf.Complete = false;                  rf.LastChecked = DateTime.Now;                  rf.ChunkOffset = 0;                  rf.ChunkSize = 0;                    // Fill in some information that we already know                  if (rf.FileType == "media")                  {                      rf.Id = int.Parse(attributes["id"].Value);                      rf.Path = attributes["path"].Value;                      rf.SaveAs = (attributes["saveAs"] == null || string.IsNullOrEmpty(attributes["saveAs"].Value)) ? rf.Path : attributes["saveAs"].Value;                      rf.Http = (attributes["download"].Value == "http");                      rf.ChunkSize = 512000;                  }                  else if (rf.FileType == "layout")                  {                      rf.Id = int.Parse(attributes["id"].Value);                      rf.Path = attributes["path"].Value;                      rf.Http = (attributes["download"].Value == "http");                        if (rf.Http)                      {                          rf.SaveAs = attributes["saveAs"].Value;                      }                      else                      {                          rf.Path = rf.Path + ".xlf";                          rf.SaveAs = rf.Path;                      }                                            rf.ChunkSize = rf.Size;                  }                  else if (rf.FileType == "resource")                  {                      // Do something special here. Check to see if the resource file already exists otherwise add to RF                      try                      {                          // Set the ID to be some random number                          rf.Id = int.Parse(attributes["id"].Value);                          rf.LayoutId = int.Parse(attributes["layoutid"].Value);                          rf.RegionId = attributes["regionid"].Value;                          rf.MediaId = attributes["mediaid"].Value;                          rf.Path = rf.MediaId + ".htm";                          rf.SaveAs = rf.Path;                                                    // Set the size to something arbitary                          rf.Size = 10000;                            // Check to see if this has already been downloaded                          if (File.Exists(ApplicationSettings.Default.LibraryPath + @"\" + rf.MediaId + ".htm"))                          {                              // Has it expired?                              int updated = 0;                                try                              {                                  updated = int.Parse(attributes["updated"].Value);                              }                              catch (Exception) {}                                DateTime updatedDt = new DateTime(1970' 1' 1' 0' 0' 0' DateTimeKind.Utc);                              updatedDt = updatedDt.AddSeconds(updated);                                if (File.GetLastWriteTimeUtc(ApplicationSettings.Default.LibraryPath + @"\" + rf.MediaId + ".htm") > updatedDt)                                  rf.Complete = true;                          }                            // Add to the Rf Node                          RequiredFileList.Add(rf);                          continue;                      }                      catch                      {                          // Forget about this resource                          continue;                      }                  }                  else                      continue;                    // This stuff only executes for Layout/Files items                  rf.Md5 = attributes["md5"].Value;                  rf.Size = double.Parse(attributes["size"].Value);                    // Does this file already exist in the RF node? We might receive duplicates.                  bool found = false;                    foreach (RequiredFile existingRf in RequiredFileList)                  {                      if (existingRf.Id == rf.Id && existingRf.FileType == rf.FileType)                      {                          found = true;                          break;                      }                  }                    if (found)                  {                      Trace.WriteLine(new LogMessage("RequiredFiles - SetRequiredFiles"' "Duplicate file detected' ignoring. FileId = " + rf.Id)' LogType.Audit.ToString());                      continue;                  }                    // Does this file exist?                  if (File.Exists(ApplicationSettings.Default.LibraryPath + @"\" + rf.SaveAs))                  {                      // Compare MD5 of the file we currently have' to what we should have                      if (rf.Md5 != _cacheManager.GetMD5(rf.SaveAs))                      {                          Trace.WriteLine(new LogMessage("RequiredFiles - SetRequiredFiles"' "MD5 different for existing file: " + rf.SaveAs)' LogType.Info.ToString());                            // They are different                          _cacheManager.Remove(rf.SaveAs);                            // TODO: Resume the file download under certain conditions. Make sure its not bigger than it should be.                           // Make sure it is fairly fresh                          FileInfo info = new FileInfo(ApplicationSettings.Default.LibraryPath + @"\" + rf.SaveAs);                            if (info.Length < rf.Size && info.LastWriteTime > DateTime.Now.AddDays(-1))                          {                              // Continue the file                              rf.ChunkOffset = (int)info.Length;                          }                          else                          {                              // Delete the old file as it is wrong                              try                              {                                  File.Delete(ApplicationSettings.Default.LibraryPath + @"\" + rf.SaveAs);                              }                              catch (Exception ex)                              {                                  Trace.WriteLine(new LogMessage("CompareAndCollect"' "Unable to delete incorrect file because: " + ex.Message));                              }                          }                      }                      else                      {                          // The MD5 is equal - we already have an up to date version of this file.                          rf.Complete = true;                          _cacheManager.Add(rf.SaveAs' rf.Md5);                      }                  }                  else                  {                      // File does not exist' therefore remove it from the cache manager (on the off chance that it is in there for some reason)                      _cacheManager.Remove(rf.SaveAs);                  }                    RequiredFileList.Add(rf);              }
Magic Number,XiboClient,Schedule,C:\repos\xibosignage_xibo-dotnetclient\Logic\Schedule.cs,_scheduleManager_OnScheduleManagerCheckComplete,The following statement contains a magic number: if (xmrShouldBeRunning && _xmrSubscriber.LastHeartBeat < DateTime.Now.AddHours(-1))              {                  _clientInfoForm.XmrSubscriberStatus = "Long term Inactive (" + ApplicationSettings.Default.XmrNetworkAddress + ")' last activity: " + _xmrSubscriber.LastHeartBeat.ToString();                  Trace.WriteLine(new LogMessage("Schedule - OnScheduleManagerCheckComplete"' "XMR heart beat last received over an hour ago."));                    // Issue an XMR restart if we've gone this long without connecting                  // we do this because we suspect that the TCP socket has died without notifying the poller                  restartXmr();              }              else if (xmrShouldBeRunning && _xmrSubscriber.LastHeartBeat < DateTime.Now.AddMinutes(-5))              {                  _clientInfoForm.XmrSubscriberStatus = "Inactive (" + ApplicationSettings.Default.XmrNetworkAddress + ")' last activity: " + _xmrSubscriber.LastHeartBeat.ToString();                  Trace.WriteLine(new LogMessage("Schedule - OnScheduleManagerCheckComplete"' "XMR heart beat last received over 5 minutes ago.")' LogType.Audit.ToString());              }
Magic Number,XiboClient,ScheduleManager,C:\repos\xibosignage_xibo-dotnetclient\Logic\ScheduleManager.cs,Run,The following statement contains a magic number: while (!_forceStop)              {                  lock (_locker)                  {                      try                      {                          // If we are restarting' reset                          _manualReset.Reset();                            Trace.WriteLine(new LogMessage("ScheduleManager - Run"' "Schedule Timer Ticked")' LogType.Audit.ToString());                            // Work out if there is a new schedule available' if so - raise the event                          if (IsNewScheduleAvailable())                              OnNewScheduleAvailable();                          else                              OnRefreshSchedule();                            // Update the client info form                          _clientInfoForm.ScheduleManagerStatus = LayoutsInSchedule();                            // Do we need to take a screenshot?                          if (ApplicationSettings.Default.ScreenShotRequestInterval > 0 && DateTime.Now > _lastScreenShotDate.AddMinutes(ApplicationSettings.Default.ScreenShotRequestInterval))                          {                              // Take a screen shot and send it                              ScreenShot.TakeAndSend();                                // Store the date                              _lastScreenShotDate = DateTime.Now;                                // Notify status to XMDS                              _clientInfoForm.notifyStatusToXmds();                          }                            // Run any commands that occur in the next 10 seconds.                          DateTime now = DateTime.Now;                          DateTime tenSecondsTime = now.AddSeconds(10);                            foreach (ScheduleCommand command in _commands)                          {                              if (command.Date >= now && command.Date < tenSecondsTime && !command.HasRun)                              {                                  try                                  {                                      // We need to run this command                                      new Thread(new ThreadStart(command.Run)).Start();                                        // Mark run                                      command.HasRun = true;                                  }                                  catch (Exception e)                                  {                                      Trace.WriteLine(new LogMessage("ScheduleManager - Run"' "Cannot start Thread to Run Command: " + e.Message)' LogType.Error.ToString());                                  }                              }                          }                      }                      catch (Exception ex)                      {                          // Log this message' but dont abort the thread                          Trace.WriteLine(new LogMessage("ScheduleManager - Run"' "Exception in Run: " + ex.Message)' LogType.Error.ToString());                          _clientInfoForm.ScheduleStatus = "Error. " + ex.Message;                      }                  }                    // Completed this check                  if (OnScheduleManagerCheckComplete != null)                      OnScheduleManagerCheckComplete();                    // Sleep this thread for 10 seconds                  _manualReset.WaitOne(10 * 1000);              }
Magic Number,XiboClient,ScheduleManager,C:\repos\xibosignage_xibo-dotnetclient\Logic\ScheduleManager.cs,Run,The following statement contains a magic number: while (!_forceStop)              {                  lock (_locker)                  {                      try                      {                          // If we are restarting' reset                          _manualReset.Reset();                            Trace.WriteLine(new LogMessage("ScheduleManager - Run"' "Schedule Timer Ticked")' LogType.Audit.ToString());                            // Work out if there is a new schedule available' if so - raise the event                          if (IsNewScheduleAvailable())                              OnNewScheduleAvailable();                          else                              OnRefreshSchedule();                            // Update the client info form                          _clientInfoForm.ScheduleManagerStatus = LayoutsInSchedule();                            // Do we need to take a screenshot?                          if (ApplicationSettings.Default.ScreenShotRequestInterval > 0 && DateTime.Now > _lastScreenShotDate.AddMinutes(ApplicationSettings.Default.ScreenShotRequestInterval))                          {                              // Take a screen shot and send it                              ScreenShot.TakeAndSend();                                // Store the date                              _lastScreenShotDate = DateTime.Now;                                // Notify status to XMDS                              _clientInfoForm.notifyStatusToXmds();                          }                            // Run any commands that occur in the next 10 seconds.                          DateTime now = DateTime.Now;                          DateTime tenSecondsTime = now.AddSeconds(10);                            foreach (ScheduleCommand command in _commands)                          {                              if (command.Date >= now && command.Date < tenSecondsTime && !command.HasRun)                              {                                  try                                  {                                      // We need to run this command                                      new Thread(new ThreadStart(command.Run)).Start();                                        // Mark run                                      command.HasRun = true;                                  }                                  catch (Exception e)                                  {                                      Trace.WriteLine(new LogMessage("ScheduleManager - Run"' "Cannot start Thread to Run Command: " + e.Message)' LogType.Error.ToString());                                  }                              }                          }                      }                      catch (Exception ex)                      {                          // Log this message' but dont abort the thread                          Trace.WriteLine(new LogMessage("ScheduleManager - Run"' "Exception in Run: " + ex.Message)' LogType.Error.ToString());                          _clientInfoForm.ScheduleStatus = "Error. " + ex.Message;                      }                  }                    // Completed this check                  if (OnScheduleManagerCheckComplete != null)                      OnScheduleManagerCheckComplete();                    // Sleep this thread for 10 seconds                  _manualReset.WaitOne(10 * 1000);              }
Magic Number,XiboClient,ScheduleManager,C:\repos\xibosignage_xibo-dotnetclient\Logic\ScheduleManager.cs,Run,The following statement contains a magic number: while (!_forceStop)              {                  lock (_locker)                  {                      try                      {                          // If we are restarting' reset                          _manualReset.Reset();                            Trace.WriteLine(new LogMessage("ScheduleManager - Run"' "Schedule Timer Ticked")' LogType.Audit.ToString());                            // Work out if there is a new schedule available' if so - raise the event                          if (IsNewScheduleAvailable())                              OnNewScheduleAvailable();                          else                              OnRefreshSchedule();                            // Update the client info form                          _clientInfoForm.ScheduleManagerStatus = LayoutsInSchedule();                            // Do we need to take a screenshot?                          if (ApplicationSettings.Default.ScreenShotRequestInterval > 0 && DateTime.Now > _lastScreenShotDate.AddMinutes(ApplicationSettings.Default.ScreenShotRequestInterval))                          {                              // Take a screen shot and send it                              ScreenShot.TakeAndSend();                                // Store the date                              _lastScreenShotDate = DateTime.Now;                                // Notify status to XMDS                              _clientInfoForm.notifyStatusToXmds();                          }                            // Run any commands that occur in the next 10 seconds.                          DateTime now = DateTime.Now;                          DateTime tenSecondsTime = now.AddSeconds(10);                            foreach (ScheduleCommand command in _commands)                          {                              if (command.Date >= now && command.Date < tenSecondsTime && !command.HasRun)                              {                                  try                                  {                                      // We need to run this command                                      new Thread(new ThreadStart(command.Run)).Start();                                        // Mark run                                      command.HasRun = true;                                  }                                  catch (Exception e)                                  {                                      Trace.WriteLine(new LogMessage("ScheduleManager - Run"' "Cannot start Thread to Run Command: " + e.Message)' LogType.Error.ToString());                                  }                              }                          }                      }                      catch (Exception ex)                      {                          // Log this message' but dont abort the thread                          Trace.WriteLine(new LogMessage("ScheduleManager - Run"' "Exception in Run: " + ex.Message)' LogType.Error.ToString());                          _clientInfoForm.ScheduleStatus = "Error. " + ex.Message;                      }                  }                    // Completed this check                  if (OnScheduleManagerCheckComplete != null)                      OnScheduleManagerCheckComplete();                    // Sleep this thread for 10 seconds                  _manualReset.WaitOne(10 * 1000);              }
Magic Number,XiboClient,ShellCommand,C:\repos\xibosignage_xibo-dotnetclient\Media\ShellCommand.cs,ExecuteShellCommand,The following statement contains a magic number: if (!string.IsNullOrEmpty(_command))              {                  using (Process process = new Process())                  {                      ProcessStartInfo startInfo = new ProcessStartInfo();                        if (_launchThroughCmd)                      {                          startInfo.WindowStyle = ProcessWindowStyle.Hidden;                          startInfo.FileName = "cmd.exe";                          startInfo.Arguments = "/C " + _command;                      }                      else                      {                          // Split the command into a command string and arguments.                          string[] splitCommand = _command.Split(new[] { ' ' }' 2);                          startInfo.FileName = splitCommand[0];                            if (splitCommand.Length > 1)                              startInfo.Arguments = splitCommand[1];                                              }                        process.StartInfo = startInfo;                      process.Start();                        // Grab the ID                      _processId = process.Id;                  }              }
Magic Number,XiboClient,VideoPlayer,C:\repos\xibosignage_xibo-dotnetclient\Media\VideoPlayer.cs,SetMute,The following statement contains a magic number: if (mute)              {                  axWindowsMediaPlayer1.settings.volume = 0;                  axWindowsMediaPlayer1.settings.mute = true;              }              else                  axWindowsMediaPlayer1.settings.volume = 100;
Magic Number,XiboClient,VideoPlayer,C:\repos\xibosignage_xibo-dotnetclient\Media\VideoPlayer.cs,axWMP_PlayStateChange,The following statement contains a magic number: if (e.newState == 8 && !_looping)              {                  // indicate we are stopped                  _finished = true;                    // Raise the event                  if (VideoEnd == null)                  {                      Trace.WriteLine(new LogMessage("VideoPlayer - Playstate Complete"' "Video end handler is null")' LogType.Audit.ToString());                  }                  else                  {                      VideoEnd();                  }              }
Magic Number,XiboClient,VideoPlayer,C:\repos\xibosignage_xibo-dotnetclient\Media\VideoPlayer.cs,InitializeComponent,The following statement contains a magic number: this.axWindowsMediaPlayer1.Size = new System.Drawing.Size(291' 269);
Magic Number,XiboClient,VideoPlayer,C:\repos\xibosignage_xibo-dotnetclient\Media\VideoPlayer.cs,InitializeComponent,The following statement contains a magic number: this.axWindowsMediaPlayer1.Size = new System.Drawing.Size(291' 269);
Magic Number,XiboClient,VideoPlayer,C:\repos\xibosignage_xibo-dotnetclient\Media\VideoPlayer.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(292' 266);
Magic Number,XiboClient,VideoPlayer,C:\repos\xibosignage_xibo-dotnetclient\Media\VideoPlayer.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(292' 266);
Magic Number,XiboClient,XiboTraceListener,C:\repos\xibosignage_xibo-dotnetclient\Log\XiboTraceListener.cs,AddToCollection,The following statement contains a magic number: if (_traceMessages.Count > ((ApplicationSettings.Default.LogLevel == "audit") ? 100 : 25))                  Flush();
Magic Number,XiboClient,XiboTraceListener,C:\repos\xibosignage_xibo-dotnetclient\Log\XiboTraceListener.cs,AddToCollection,The following statement contains a magic number: if (_traceMessages.Count > ((ApplicationSettings.Default.LogLevel == "audit") ? 100 : 25))                  Flush();
Magic Number,XiboClient.Logic,Rs232Command,C:\repos\xibosignage_xibo-dotnetclient\Action\Rs232Command.cs,Run,The following statement contains a magic number: try              {                  // Write our data stream                  if (_useHex)                  {                      byte[] bytes = _toSend.Split(' ').Select(s => Convert.ToByte(s' 16)).ToArray();                      _port.Write(bytes' 0' bytes.Length);                  }                  else                  {                      _port.Write(_toSend);                  }                    // Read                  if (_command.notifyStatus())                  {                      _port.ReadTimeout = 5000;                      response = _port.ReadLine();                  }              }              catch (Exception e)              {                  Trace.WriteLine(new LogMessage("CommandRs232 - run"' e.Message)' LogType.Error.ToString());              }              finally              {                  // Close the port                  _port.Close();              }
Magic Number,XiboClient.Logic,Rs232Command,C:\repos\xibosignage_xibo-dotnetclient\Action\Rs232Command.cs,Run,The following statement contains a magic number: try              {                  // Write our data stream                  if (_useHex)                  {                      byte[] bytes = _toSend.Split(' ').Select(s => Convert.ToByte(s' 16)).ToArray();                      _port.Write(bytes' 0' bytes.Length);                  }                  else                  {                      _port.Write(_toSend);                  }                    // Read                  if (_command.notifyStatus())                  {                      _port.ReadTimeout = 5000;                      response = _port.ReadLine();                  }              }              catch (Exception e)              {                  Trace.WriteLine(new LogMessage("CommandRs232 - run"' e.Message)' LogType.Error.ToString());              }              finally              {                  // Close the port                  _port.Close();              }
Magic Number,XiboClient.Logic,Rs232Command,C:\repos\xibosignage_xibo-dotnetclient\Action\Rs232Command.cs,parse,The following statement contains a magic number: _port.DataBits = Convert.ToInt16(connection[2]);
Magic Number,XiboClient.Logic,Rs232Command,C:\repos\xibosignage_xibo-dotnetclient\Action\Rs232Command.cs,parse,The following statement contains a magic number: _port.Parity = (Parity)Enum.Parse(typeof(Parity)' connection[3]);
Magic Number,XiboClient.Logic,Rs232Command,C:\repos\xibosignage_xibo-dotnetclient\Action\Rs232Command.cs,parse,The following statement contains a magic number: _port.StopBits = (StopBits)Enum.Parse(typeof(StopBits)' connection[4]);
Magic Number,XiboClient.Logic,Rs232Command,C:\repos\xibosignage_xibo-dotnetclient\Action\Rs232Command.cs,parse,The following statement contains a magic number: _port.Handshake = (Handshake)Enum.Parse(typeof(Handshake)' connection[5]);
Magic Number,XiboClient.Logic,Rs232Command,C:\repos\xibosignage_xibo-dotnetclient\Action\Rs232Command.cs,parse,The following statement contains a magic number: _toSend = command[2];
Magic Number,XiboClient.Logic,Rs232Command,C:\repos\xibosignage_xibo-dotnetclient\Action\Rs232Command.cs,parse,The following statement contains a magic number: _useHex = (connection.Length >= 7 && connection[6] == "1");
Magic Number,XiboClient.Logic,Rs232Command,C:\repos\xibosignage_xibo-dotnetclient\Action\Rs232Command.cs,parse,The following statement contains a magic number: _useHex = (connection.Length >= 7 && connection[6] == "1");
Magic Number,XiboClient.Logic,MouseInterceptor,C:\repos\xibosignage_xibo-dotnetclient\Logic\MouseInterceptor.cs,HookCallback,The following statement contains a magic number: if (nCode >= 0)              {                  if (MouseMessages.WM_LBUTTONDOWN == (MouseMessages)wParam || MouseMessages.WM_MOUSEMOVE == (MouseMessages)wParam)                  {                      MSLLHOOKSTRUCT hookStruct = (MSLLHOOKSTRUCT)Marshal.PtrToStructure(lParam' typeof(MSLLHOOKSTRUCT));                      Console.WriteLine(hookStruct.pt.x + "' " + hookStruct.pt.y);                        if (Math.Abs(_mouseLocation.X - hookStruct.pt.x) > 5 || Math.Abs(_mouseLocation.Y - hookStruct.pt.y) > 5)                      {                          if (MouseInterceptor.s_instance != null && MouseInterceptor.s_instance.MouseEvent != null)                              MouseInterceptor.s_instance.MouseEvent();                      }                        _mouseLocation = new Point(hookStruct.pt.x' hookStruct.pt.y);                  }              }
Magic Number,XiboClient.Logic,MouseInterceptor,C:\repos\xibosignage_xibo-dotnetclient\Logic\MouseInterceptor.cs,HookCallback,The following statement contains a magic number: if (nCode >= 0)              {                  if (MouseMessages.WM_LBUTTONDOWN == (MouseMessages)wParam || MouseMessages.WM_MOUSEMOVE == (MouseMessages)wParam)                  {                      MSLLHOOKSTRUCT hookStruct = (MSLLHOOKSTRUCT)Marshal.PtrToStructure(lParam' typeof(MSLLHOOKSTRUCT));                      Console.WriteLine(hookStruct.pt.x + "' " + hookStruct.pt.y);                        if (Math.Abs(_mouseLocation.X - hookStruct.pt.x) > 5 || Math.Abs(_mouseLocation.Y - hookStruct.pt.y) > 5)                      {                          if (MouseInterceptor.s_instance != null && MouseInterceptor.s_instance.MouseEvent != null)                              MouseInterceptor.s_instance.MouseEvent();                      }                        _mouseLocation = new Point(hookStruct.pt.x' hookStruct.pt.y);                  }              }
Magic Number,XiboClient.Logic,XmrSubscriber,C:\repos\xibosignage_xibo-dotnetclient\Action\XmrSubscriber.cs,Run,The following statement contains a magic number: while (!_forceStop)              {                  lock (_locker)                  {                      try                      {                          // If we are restarting' reset                          _manualReset.Reset();                            // Check we have an address to connect to.                          if (string.IsNullOrEmpty(ApplicationSettings.Default.XmrNetworkAddress))                              throw new Exception("Empty XMR Network Address");                            // Cache the address for this socket (the setting may change outside).                          _address = ApplicationSettings.Default.XmrNetworkAddress;                            // Get the Private Key                          AsymmetricCipherKeyPair rsaKey = _hardwareKey.getXmrKey();                            // Connect to XMR                          try                          {                              // Create a Poller                              _poller = new NetMQPoller();                                // Create a Socket                              using (SubscriberSocket socket = new SubscriberSocket())                              {                                  // Options                                  socket.Options.ReconnectInterval = TimeSpan.FromSeconds(5);                                  socket.Options.Linger = TimeSpan.FromSeconds(0);                                    // Bind                                  socket.Connect(ApplicationSettings.Default.XmrNetworkAddress);                                  socket.Subscribe("H");                                  socket.Subscribe(_hardwareKey.Channel);                                    // Add Socket to Poller                                  _poller.Add(socket);                                    // Bind to the receive ready event                                  socket.ReceiveReady += _socket_ReceiveReady;                                    // Notify                                  _clientInfoForm.XmrSubscriberStatus = "Connected to " + ApplicationSettings.Default.XmrNetworkAddress + ". Waiting for messages.";                                    // Sit and wait' processing messages' indefinitely or until we are interrupted.                                  _poller.Run();                              }                          }                          finally                          {                              _poller.Dispose();                          }                            Trace.WriteLine(new LogMessage("XmrSubscriber - Run"' "Socket Disconnected' waiting to reconnect.")' LogType.Info.ToString());                      }                      catch (TerminatingException terminatingEx)                      {                          Trace.WriteLine(new LogMessage("XmrSubscriber - Run"' "NetMQ terminating: " + terminatingEx.Message)' LogType.Audit.ToString());                      }                      catch (Exception e)                      {                          Trace.WriteLine(new LogMessage("XmrSubscriber - Run"' "Unable to Subscribe: " + e.Message)' LogType.Info.ToString());                          _clientInfoForm.XmrSubscriberStatus = e.Message;                      }                        // Update status                      _clientInfoForm.XmrSubscriberStatus = "Disconnected' waiting to reconnect' last activity: " + LastHeartBeat.ToString();                        // Sleep for 60 seconds.                      _manualReset.WaitOne(60 * 1000);                  }              }
Magic Number,XiboClient.Logic,XmrSubscriber,C:\repos\xibosignage_xibo-dotnetclient\Action\XmrSubscriber.cs,Run,The following statement contains a magic number: while (!_forceStop)              {                  lock (_locker)                  {                      try                      {                          // If we are restarting' reset                          _manualReset.Reset();                            // Check we have an address to connect to.                          if (string.IsNullOrEmpty(ApplicationSettings.Default.XmrNetworkAddress))                              throw new Exception("Empty XMR Network Address");                            // Cache the address for this socket (the setting may change outside).                          _address = ApplicationSettings.Default.XmrNetworkAddress;                            // Get the Private Key                          AsymmetricCipherKeyPair rsaKey = _hardwareKey.getXmrKey();                            // Connect to XMR                          try                          {                              // Create a Poller                              _poller = new NetMQPoller();                                // Create a Socket                              using (SubscriberSocket socket = new SubscriberSocket())                              {                                  // Options                                  socket.Options.ReconnectInterval = TimeSpan.FromSeconds(5);                                  socket.Options.Linger = TimeSpan.FromSeconds(0);                                    // Bind                                  socket.Connect(ApplicationSettings.Default.XmrNetworkAddress);                                  socket.Subscribe("H");                                  socket.Subscribe(_hardwareKey.Channel);                                    // Add Socket to Poller                                  _poller.Add(socket);                                    // Bind to the receive ready event                                  socket.ReceiveReady += _socket_ReceiveReady;                                    // Notify                                  _clientInfoForm.XmrSubscriberStatus = "Connected to " + ApplicationSettings.Default.XmrNetworkAddress + ". Waiting for messages.";                                    // Sit and wait' processing messages' indefinitely or until we are interrupted.                                  _poller.Run();                              }                          }                          finally                          {                              _poller.Dispose();                          }                            Trace.WriteLine(new LogMessage("XmrSubscriber - Run"' "Socket Disconnected' waiting to reconnect.")' LogType.Info.ToString());                      }                      catch (TerminatingException terminatingEx)                      {                          Trace.WriteLine(new LogMessage("XmrSubscriber - Run"' "NetMQ terminating: " + terminatingEx.Message)' LogType.Audit.ToString());                      }                      catch (Exception e)                      {                          Trace.WriteLine(new LogMessage("XmrSubscriber - Run"' "Unable to Subscribe: " + e.Message)' LogType.Info.ToString());                          _clientInfoForm.XmrSubscriberStatus = e.Message;                      }                        // Update status                      _clientInfoForm.XmrSubscriberStatus = "Disconnected' waiting to reconnect' last activity: " + LastHeartBeat.ToString();                        // Sleep for 60 seconds.                      _manualReset.WaitOne(60 * 1000);                  }              }
Magic Number,XiboClient.Logic,XmrSubscriber,C:\repos\xibosignage_xibo-dotnetclient\Action\XmrSubscriber.cs,Run,The following statement contains a magic number: while (!_forceStop)              {                  lock (_locker)                  {                      try                      {                          // If we are restarting' reset                          _manualReset.Reset();                            // Check we have an address to connect to.                          if (string.IsNullOrEmpty(ApplicationSettings.Default.XmrNetworkAddress))                              throw new Exception("Empty XMR Network Address");                            // Cache the address for this socket (the setting may change outside).                          _address = ApplicationSettings.Default.XmrNetworkAddress;                            // Get the Private Key                          AsymmetricCipherKeyPair rsaKey = _hardwareKey.getXmrKey();                            // Connect to XMR                          try                          {                              // Create a Poller                              _poller = new NetMQPoller();                                // Create a Socket                              using (SubscriberSocket socket = new SubscriberSocket())                              {                                  // Options                                  socket.Options.ReconnectInterval = TimeSpan.FromSeconds(5);                                  socket.Options.Linger = TimeSpan.FromSeconds(0);                                    // Bind                                  socket.Connect(ApplicationSettings.Default.XmrNetworkAddress);                                  socket.Subscribe("H");                                  socket.Subscribe(_hardwareKey.Channel);                                    // Add Socket to Poller                                  _poller.Add(socket);                                    // Bind to the receive ready event                                  socket.ReceiveReady += _socket_ReceiveReady;                                    // Notify                                  _clientInfoForm.XmrSubscriberStatus = "Connected to " + ApplicationSettings.Default.XmrNetworkAddress + ". Waiting for messages.";                                    // Sit and wait' processing messages' indefinitely or until we are interrupted.                                  _poller.Run();                              }                          }                          finally                          {                              _poller.Dispose();                          }                            Trace.WriteLine(new LogMessage("XmrSubscriber - Run"' "Socket Disconnected' waiting to reconnect.")' LogType.Info.ToString());                      }                      catch (TerminatingException terminatingEx)                      {                          Trace.WriteLine(new LogMessage("XmrSubscriber - Run"' "NetMQ terminating: " + terminatingEx.Message)' LogType.Audit.ToString());                      }                      catch (Exception e)                      {                          Trace.WriteLine(new LogMessage("XmrSubscriber - Run"' "Unable to Subscribe: " + e.Message)' LogType.Info.ToString());                          _clientInfoForm.XmrSubscriberStatus = e.Message;                      }                        // Update status                      _clientInfoForm.XmrSubscriberStatus = "Disconnected' waiting to reconnect' last activity: " + LastHeartBeat.ToString();                        // Sleep for 60 seconds.                      _manualReset.WaitOne(60 * 1000);                  }              }
Magic Number,XiboClient.Logic,XmrSubscriber,C:\repos\xibosignage_xibo-dotnetclient\Action\XmrSubscriber.cs,processMessage,The following statement contains a magic number: try              {                  opened = OpenSslInterop.decrypt(message[2].ConvertToString()' message[1].ConvertToString()' rsaKey.Private);              }              catch (Exception e)              {                  Trace.WriteLine(new LogMessage("XmrSubscriber - processMessage"' "Unopenable Message: " + e.Message)' LogType.Error.ToString());                  Trace.WriteLine(new LogMessage("XmrSubscriber - processMessage"' e.ToString())' LogType.Audit.ToString());                  return;              }
Magic Number,XiboClient.Log,ClientInfo,C:\repos\xibosignage_xibo-dotnetclient\Log\ClientInfo.cs,AddToLogGrid,The following statement contains a magic number: if (logDataGridView.RowCount > 500)                  logDataGridView.Rows.Clear();
Magic Number,XiboClient.Log,ClientInfo,C:\repos\xibosignage_xibo-dotnetclient\Log\ClientInfo.cs,AddToLogGrid,The following statement contains a magic number: logDataGridView.Rows[newRow].Cells[2].Value = logType.ToString();
Magic Number,XiboClient.Log,ClientInfo,C:\repos\xibosignage_xibo-dotnetclient\Log\ClientInfo.cs,AddToLogGrid,The following statement contains a magic number: logDataGridView.Rows[newRow].Cells[3].Value = logMessage._method;
Magic Number,XiboClient.Log,ClientInfo,C:\repos\xibosignage_xibo-dotnetclient\Log\ClientInfo.cs,AddToLogGrid,The following statement contains a magic number: logDataGridView.Rows[newRow].Cells[4].Value = logMessage._message;
Magic Number,XiboClient.Log,ClientInfo,C:\repos\xibosignage_xibo-dotnetclient\Log\ClientInfo.cs,InitializeComponent,The following statement contains a magic number: this.logDataGridView.Location = new System.Drawing.Point(12' 343);
Magic Number,XiboClient.Log,ClientInfo,C:\repos\xibosignage_xibo-dotnetclient\Log\ClientInfo.cs,InitializeComponent,The following statement contains a magic number: this.logDataGridView.Location = new System.Drawing.Point(12' 343);
Magic Number,XiboClient.Log,ClientInfo,C:\repos\xibosignage_xibo-dotnetclient\Log\ClientInfo.cs,InitializeComponent,The following statement contains a magic number: this.logDataGridView.Size = new System.Drawing.Size(786' 324);
Magic Number,XiboClient.Log,ClientInfo,C:\repos\xibosignage_xibo-dotnetclient\Log\ClientInfo.cs,InitializeComponent,The following statement contains a magic number: this.logDataGridView.Size = new System.Drawing.Size(786' 324);
Magic Number,XiboClient.Log,ClientInfo,C:\repos\xibosignage_xibo-dotnetclient\Log\ClientInfo.cs,InitializeComponent,The following statement contains a magic number: this.Thread.Width = 66;
Magic Number,XiboClient.Log,ClientInfo,C:\repos\xibosignage_xibo-dotnetclient\Log\ClientInfo.cs,InitializeComponent,The following statement contains a magic number: this.Date.Width = 55;
Magic Number,XiboClient.Log,ClientInfo,C:\repos\xibosignage_xibo-dotnetclient\Log\ClientInfo.cs,InitializeComponent,The following statement contains a magic number: this.Type.Width = 56;
Magic Number,XiboClient.Log,ClientInfo,C:\repos\xibosignage_xibo-dotnetclient\Log\ClientInfo.cs,InitializeComponent,The following statement contains a magic number: this.Method.Width = 68;
Magic Number,XiboClient.Log,ClientInfo,C:\repos\xibosignage_xibo-dotnetclient\Log\ClientInfo.cs,InitializeComponent,The following statement contains a magic number: this.Message.Width = 75;
Magic Number,XiboClient.Log,ClientInfo,C:\repos\xibosignage_xibo-dotnetclient\Log\ClientInfo.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(9' 11);
Magic Number,XiboClient.Log,ClientInfo,C:\repos\xibosignage_xibo-dotnetclient\Log\ClientInfo.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(9' 11);
Magic Number,XiboClient.Log,ClientInfo,C:\repos\xibosignage_xibo-dotnetclient\Log\ClientInfo.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(88' 13);
Magic Number,XiboClient.Log,ClientInfo,C:\repos\xibosignage_xibo-dotnetclient\Log\ClientInfo.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(88' 13);
Magic Number,XiboClient.Log,ClientInfo,C:\repos\xibosignage_xibo-dotnetclient\Log\ClientInfo.cs,InitializeComponent,The following statement contains a magic number: this.scheduleStatusLabel.Location = new System.Drawing.Point(103' 11);
Magic Number,XiboClient.Log,ClientInfo,C:\repos\xibosignage_xibo-dotnetclient\Log\ClientInfo.cs,InitializeComponent,The following statement contains a magic number: this.scheduleStatusLabel.Location = new System.Drawing.Point(103' 11);
Magic Number,XiboClient.Log,ClientInfo,C:\repos\xibosignage_xibo-dotnetclient\Log\ClientInfo.cs,InitializeComponent,The following statement contains a magic number: this.scheduleStatusLabel.Size = new System.Drawing.Size(61' 13);
Magic Number,XiboClient.Log,ClientInfo,C:\repos\xibosignage_xibo-dotnetclient\Log\ClientInfo.cs,InitializeComponent,The following statement contains a magic number: this.scheduleStatusLabel.Size = new System.Drawing.Size(61' 13);
Magic Number,XiboClient.Log,ClientInfo,C:\repos\xibosignage_xibo-dotnetclient\Log\ClientInfo.cs,InitializeComponent,The following statement contains a magic number: this.scheduleStatusLabel.TabIndex = 2;
Magic Number,XiboClient.Log,ClientInfo,C:\repos\xibosignage_xibo-dotnetclient\Log\ClientInfo.cs,InitializeComponent,The following statement contains a magic number: this.label2.Location = new System.Drawing.Point(403' 11);
Magic Number,XiboClient.Log,ClientInfo,C:\repos\xibosignage_xibo-dotnetclient\Log\ClientInfo.cs,InitializeComponent,The following statement contains a magic number: this.label2.Location = new System.Drawing.Point(403' 11);
Magic Number,XiboClient.Log,ClientInfo,C:\repos\xibosignage_xibo-dotnetclient\Log\ClientInfo.cs,InitializeComponent,The following statement contains a magic number: this.label2.Size = new System.Drawing.Size(110' 13);
Magic Number,XiboClient.Log,ClientInfo,C:\repos\xibosignage_xibo-dotnetclient\Log\ClientInfo.cs,InitializeComponent,The following statement contains a magic number: this.label2.Size = new System.Drawing.Size(110' 13);
Magic Number,XiboClient.Log,ClientInfo,C:\repos\xibosignage_xibo-dotnetclient\Log\ClientInfo.cs,InitializeComponent,The following statement contains a magic number: this.label2.TabIndex = 3;
Magic Number,XiboClient.Log,ClientInfo,C:\repos\xibosignage_xibo-dotnetclient\Log\ClientInfo.cs,InitializeComponent,The following statement contains a magic number: this.requiredFilesStatus.Location = new System.Drawing.Point(519' 11);
Magic Number,XiboClient.Log,ClientInfo,C:\repos\xibosignage_xibo-dotnetclient\Log\ClientInfo.cs,InitializeComponent,The following statement contains a magic number: this.requiredFilesStatus.Location = new System.Drawing.Point(519' 11);
Magic Number,XiboClient.Log,ClientInfo,C:\repos\xibosignage_xibo-dotnetclient\Log\ClientInfo.cs,InitializeComponent,The following statement contains a magic number: this.requiredFilesStatus.Size = new System.Drawing.Size(61' 13);
Magic Number,XiboClient.Log,ClientInfo,C:\repos\xibosignage_xibo-dotnetclient\Log\ClientInfo.cs,InitializeComponent,The following statement contains a magic number: this.requiredFilesStatus.Size = new System.Drawing.Size(61' 13);
Magic Number,XiboClient.Log,ClientInfo,C:\repos\xibosignage_xibo-dotnetclient\Log\ClientInfo.cs,InitializeComponent,The following statement contains a magic number: this.requiredFilesStatus.TabIndex = 4;
Magic Number,XiboClient.Log,ClientInfo,C:\repos\xibosignage_xibo-dotnetclient\Log\ClientInfo.cs,InitializeComponent,The following statement contains a magic number: this.requiredFilesTextBox.Location = new System.Drawing.Point(406' 27);
Magic Number,XiboClient.Log,ClientInfo,C:\repos\xibosignage_xibo-dotnetclient\Log\ClientInfo.cs,InitializeComponent,The following statement contains a magic number: this.requiredFilesTextBox.Location = new System.Drawing.Point(406' 27);
Magic Number,XiboClient.Log,ClientInfo,C:\repos\xibosignage_xibo-dotnetclient\Log\ClientInfo.cs,InitializeComponent,The following statement contains a magic number: this.requiredFilesTextBox.Size = new System.Drawing.Size(392' 281);
Magic Number,XiboClient.Log,ClientInfo,C:\repos\xibosignage_xibo-dotnetclient\Log\ClientInfo.cs,InitializeComponent,The following statement contains a magic number: this.requiredFilesTextBox.Size = new System.Drawing.Size(392' 281);
Magic Number,XiboClient.Log,ClientInfo,C:\repos\xibosignage_xibo-dotnetclient\Log\ClientInfo.cs,InitializeComponent,The following statement contains a magic number: this.requiredFilesTextBox.TabIndex = 5;
Magic Number,XiboClient.Log,ClientInfo,C:\repos\xibosignage_xibo-dotnetclient\Log\ClientInfo.cs,InitializeComponent,The following statement contains a magic number: this.scheduleManagerStatus.Location = new System.Drawing.Point(12' 27);
Magic Number,XiboClient.Log,ClientInfo,C:\repos\xibosignage_xibo-dotnetclient\Log\ClientInfo.cs,InitializeComponent,The following statement contains a magic number: this.scheduleManagerStatus.Location = new System.Drawing.Point(12' 27);
Magic Number,XiboClient.Log,ClientInfo,C:\repos\xibosignage_xibo-dotnetclient\Log\ClientInfo.cs,InitializeComponent,The following statement contains a magic number: this.scheduleManagerStatus.Size = new System.Drawing.Size(387' 281);
Magic Number,XiboClient.Log,ClientInfo,C:\repos\xibosignage_xibo-dotnetclient\Log\ClientInfo.cs,InitializeComponent,The following statement contains a magic number: this.scheduleManagerStatus.Size = new System.Drawing.Size(387' 281);
Magic Number,XiboClient.Log,ClientInfo,C:\repos\xibosignage_xibo-dotnetclient\Log\ClientInfo.cs,InitializeComponent,The following statement contains a magic number: this.scheduleManagerStatus.TabIndex = 8;
Magic Number,XiboClient.Log,ClientInfo,C:\repos\xibosignage_xibo-dotnetclient\Log\ClientInfo.cs,InitializeComponent,The following statement contains a magic number: this.saveLogToDisk.Location = new System.Drawing.Point(12' 314);
Magic Number,XiboClient.Log,ClientInfo,C:\repos\xibosignage_xibo-dotnetclient\Log\ClientInfo.cs,InitializeComponent,The following statement contains a magic number: this.saveLogToDisk.Location = new System.Drawing.Point(12' 314);
Magic Number,XiboClient.Log,ClientInfo,C:\repos\xibosignage_xibo-dotnetclient\Log\ClientInfo.cs,InitializeComponent,The following statement contains a magic number: this.saveLogToDisk.Size = new System.Drawing.Size(75' 23);
Magic Number,XiboClient.Log,ClientInfo,C:\repos\xibosignage_xibo-dotnetclient\Log\ClientInfo.cs,InitializeComponent,The following statement contains a magic number: this.saveLogToDisk.Size = new System.Drawing.Size(75' 23);
Magic Number,XiboClient.Log,ClientInfo,C:\repos\xibosignage_xibo-dotnetclient\Log\ClientInfo.cs,InitializeComponent,The following statement contains a magic number: this.saveLogToDisk.TabIndex = 9;
Magic Number,XiboClient.Log,ClientInfo,C:\repos\xibosignage_xibo-dotnetclient\Log\ClientInfo.cs,InitializeComponent,The following statement contains a magic number: this.label3.Location = new System.Drawing.Point(102' 319);
Magic Number,XiboClient.Log,ClientInfo,C:\repos\xibosignage_xibo-dotnetclient\Log\ClientInfo.cs,InitializeComponent,The following statement contains a magic number: this.label3.Location = new System.Drawing.Point(102' 319);
Magic Number,XiboClient.Log,ClientInfo,C:\repos\xibosignage_xibo-dotnetclient\Log\ClientInfo.cs,InitializeComponent,The following statement contains a magic number: this.label3.Size = new System.Drawing.Size(67' 13);
Magic Number,XiboClient.Log,ClientInfo,C:\repos\xibosignage_xibo-dotnetclient\Log\ClientInfo.cs,InitializeComponent,The following statement contains a magic number: this.label3.Size = new System.Drawing.Size(67' 13);
Magic Number,XiboClient.Log,ClientInfo,C:\repos\xibosignage_xibo-dotnetclient\Log\ClientInfo.cs,InitializeComponent,The following statement contains a magic number: this.label3.TabIndex = 10;
Magic Number,XiboClient.Log,ClientInfo,C:\repos\xibosignage_xibo-dotnetclient\Log\ClientInfo.cs,InitializeComponent,The following statement contains a magic number: this.xmrStatus.Location = new System.Drawing.Point(175' 319);
Magic Number,XiboClient.Log,ClientInfo,C:\repos\xibosignage_xibo-dotnetclient\Log\ClientInfo.cs,InitializeComponent,The following statement contains a magic number: this.xmrStatus.Location = new System.Drawing.Point(175' 319);
Magic Number,XiboClient.Log,ClientInfo,C:\repos\xibosignage_xibo-dotnetclient\Log\ClientInfo.cs,InitializeComponent,The following statement contains a magic number: this.xmrStatus.Size = new System.Drawing.Size(61' 13);
Magic Number,XiboClient.Log,ClientInfo,C:\repos\xibosignage_xibo-dotnetclient\Log\ClientInfo.cs,InitializeComponent,The following statement contains a magic number: this.xmrStatus.Size = new System.Drawing.Size(61' 13);
Magic Number,XiboClient.Log,ClientInfo,C:\repos\xibosignage_xibo-dotnetclient\Log\ClientInfo.cs,InitializeComponent,The following statement contains a magic number: this.xmrStatus.TabIndex = 11;
Magic Number,XiboClient.Log,ClientInfo,C:\repos\xibosignage_xibo-dotnetclient\Log\ClientInfo.cs,InitializeComponent,The following statement contains a magic number: this.controlCountLabel.Location = new System.Drawing.Point(785' 319);
Magic Number,XiboClient.Log,ClientInfo,C:\repos\xibosignage_xibo-dotnetclient\Log\ClientInfo.cs,InitializeComponent,The following statement contains a magic number: this.controlCountLabel.Location = new System.Drawing.Point(785' 319);
Magic Number,XiboClient.Log,ClientInfo,C:\repos\xibosignage_xibo-dotnetclient\Log\ClientInfo.cs,InitializeComponent,The following statement contains a magic number: this.controlCountLabel.Size = new System.Drawing.Size(13' 13);
Magic Number,XiboClient.Log,ClientInfo,C:\repos\xibosignage_xibo-dotnetclient\Log\ClientInfo.cs,InitializeComponent,The following statement contains a magic number: this.controlCountLabel.Size = new System.Drawing.Size(13' 13);
Magic Number,XiboClient.Log,ClientInfo,C:\repos\xibosignage_xibo-dotnetclient\Log\ClientInfo.cs,InitializeComponent,The following statement contains a magic number: this.controlCountLabel.TabIndex = 12;
Magic Number,XiboClient.Log,ClientInfo,C:\repos\xibosignage_xibo-dotnetclient\Log\ClientInfo.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(810' 676);
Magic Number,XiboClient.Log,ClientInfo,C:\repos\xibosignage_xibo-dotnetclient\Log\ClientInfo.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(810' 676);
Magic Number,XiboClient.xmds,xmds,C:\repos\xibosignage_xibo-dotnetclient\Web References\xmds\Reference.cs,IsLocalFileSystemWebService,The following statement contains a magic number: if (((wsUri.Port >= 1024)                           && (string.Compare(wsUri.Host' "localHost"' System.StringComparison.OrdinalIgnoreCase) == 0))) {                  return true;              }
Magic Number,XiboClient.XmdsAgents,LogAgent,C:\repos\xibosignage_xibo-dotnetclient\XmdsAgents\LogAgent.cs,Run,The following statement contains a magic number: while (!_forceStop)              {                  lock (_locker)                  {                      try                      {                          // If we are restarting' reset                          _manualReset.Reset();                            HardwareKey key = new HardwareKey();                            Trace.WriteLine(new LogMessage("RegisterAgent - Run"' "Thread Woken and Lock Obtained")' LogType.Audit.ToString());                            using (xmds.xmds xmds = new xmds.xmds())                          {                              xmds.Credentials = null;                              xmds.Url = ApplicationSettings.Default.XiboClient_xmds_xmds + "&method=submitLog";                              xmds.UseDefaultCredentials = false;                                // Log                              ProcessFiles(xmds' key.Key' ApplicationSettings.Default.LogLocation);                                xmds.Url = ApplicationSettings.Default.XiboClient_xmds_xmds + "&method=submitStats";                                // Stat                              ProcessFiles(xmds' key.Key' ApplicationSettings.Default.StatsLogFile);                          }                      }                      catch (WebException webEx)                      {                          // Increment the quantity of XMDS failures and bail out                          ApplicationSettings.Default.IncrementXmdsErrorCount();                            // Log this message' but dont abort the thread                          Trace.WriteLine(new LogMessage("LogAgent - Run"' "WebException in Run: " + webEx.Message)' LogType.Info.ToString());                      }                      catch (Exception ex)                      {                          // Log this message' but dont abort the thread                          Trace.WriteLine(new LogMessage("LogAgent - Run"' "Exception in Run: " + ex.Message)' LogType.Error.ToString());                      }                  }                    // Sleep this thread until the next collection interval                  _manualReset.WaitOne((int)(ApplicationSettings.Default.CollectInterval * ApplicationSettings.Default.XmdsCollectionIntervalFactor() * 1000));              }
Magic Number,XiboClient.XmdsAgents,RegisterAgent,C:\repos\xibosignage_xibo-dotnetclient\XmdsAgents\RegisterAgent.cs,Run,The following statement contains a magic number: while (!_forceStop)              {                  lock (_locker)                  {                      try                      {                          // If we are restarting' reset                          _manualReset.Reset();                            HardwareKey key = new HardwareKey();                            Trace.WriteLine(new LogMessage("RegisterAgent - Run"' "Thread Woken and Lock Obtained")' LogType.Info.ToString());                            using (xmds.xmds xmds = new xmds.xmds())                          {                              xmds.Credentials = null;                              xmds.Url = ApplicationSettings.Default.XiboClient_xmds_xmds + "&method=registerDisplay";                              xmds.UseDefaultCredentials = false;                                // Store the XMR address                              string xmrAddress = ApplicationSettings.Default.XmrNetworkAddress;                                RegisterAgent.ProcessRegisterXml(xmds.RegisterDisplay(                                  ApplicationSettings.Default.ServerKey'                                   key.Key'                                   ApplicationSettings.Default.DisplayName'                                   "windows"'                                   ApplicationSettings.Default.ClientVersion'                                   ApplicationSettings.Default.ClientCodeVersion'                                   Environment.OSVersion.ToString()'                                   key.MacAddress'                                  key.Channel'                                  key.getXmrPublicKey()));                                // Set the flag to indicate we have a connection to XMDS                              ApplicationSettings.Default.XmdsLastConnection = DateTime.Now;                                // Has the XMR address changed?                              if (xmrAddress != ApplicationSettings.Default.XmrNetworkAddress)                              {                                  OnXmrReconfigure();                              }                                // Is the timezone empty?                              if (string.IsNullOrEmpty(ApplicationSettings.Default.DisplayTimeZone))                              {                                  reportTimezone();                              }                          }                      }                      catch (WebException webEx)                      {                          // Increment the quantity of XMDS failures and bail out                          ApplicationSettings.Default.IncrementXmdsErrorCount();                            // Log this message' but dont abort the thread                          Trace.WriteLine(new LogMessage("RegisterAgent - Run"' "WebException in Run: " + webEx.Message)' LogType.Info.ToString());                      }                      catch (Exception ex)                      {                          // Log this message' but dont abort the thread                          Trace.WriteLine(new LogMessage("RegisterAgent - Run"' "Exception in Run: " + ex.Message)' LogType.Info.ToString());                      }                  }                    // Sleep this thread until the next collection interval                  _manualReset.WaitOne((int)(ApplicationSettings.Default.CollectInterval * ApplicationSettings.Default.XmdsCollectionIntervalFactor() * 1000));              }
Magic Number,XiboClient.XmdsAgents,LibraryAgent,C:\repos\xibosignage_xibo-dotnetclient\XmdsAgents\LibraryAgent.cs,Run,The following statement contains a magic number: while (!_forceStop)              {                  lock (_locker)                  {                      try                      {                          // If we are restarting' reset                          _manualReset.Reset();                            // Only do something if enabled                          if (!ApplicationSettings.Default.EnableExpiredFileDeletion)                          {                              Trace.WriteLine(new LogMessage("LibraryAgent - Run"' "Expired File Deletion Disabled")' LogType.Audit.ToString());                              return;                          }                            // Test Date                          DateTime testDate = DateTime.Now.AddDays(ApplicationSettings.Default.LibraryAgentInterval * -1);                            // Get required files from disk                          _requiredFiles = RequiredFiles.LoadFromDisk();                            Trace.WriteLine(new LogMessage("LibraryAgent - Run"' "Number of required files = " + _requiredFiles.RequiredFileList.Count)' LogType.Audit.ToString());                            // Build a list of files in the library                          DirectoryInfo directory = new DirectoryInfo(ApplicationSettings.Default.LibraryPath);                                                    // Check each one and see if it is in required files                          foreach (FileInfo fileInfo in directory.GetFiles())                          {                              // Never delete certain system files                              // Also do not delete log/stat files as they are managed by their respective agents                              if (_persistentFiles.Contains(fileInfo.Name) ||                                   fileInfo.Name.Contains(ApplicationSettings.Default.LogLocation) ||                                   fileInfo.Name.Contains(ApplicationSettings.Default.StatsLogFile)                                  )                                  continue;                                // Delete files that were accessed over N days ago                              try                              {                                  RequiredFile file = _requiredFiles.GetRequiredFile(fileInfo.Name);                              }                              catch                              {                                  // It is a bad idea to log in here - it can cause a build up of log files.                                  //Debug.WriteLine(new LogMessage("LibraryAgent - Run"' fileInfo.Name + " is not in Required Files' testing last accessed date [" + fileInfo.LastAccessTime + "] is earlier than " + testDate)' LogType.Audit.ToString());                                    // Not a required file                                  if (fileInfo.LastAccessTime < testDate)                                  {                                      Trace.WriteLine(new LogMessage("LibraryAgent - Run"' "Deleting old file: " + fileInfo.Name)' LogType.Info.ToString());                                      File.Delete(fileInfo.FullName);                                  }                              }                          }                      }                      catch (Exception ex)                      {                          // Log this message' but dont abort the thread                          Trace.WriteLine(new LogMessage("LibraryAgent - Run"' "Exception in Run: " + ex.Message)' LogType.Error.ToString());                      }                  }                    // Sleep this thread for 15 minutes                  _manualReset.WaitOne(2700 * 1000);              }
Magic Number,XiboClient.XmdsAgents,LibraryAgent,C:\repos\xibosignage_xibo-dotnetclient\XmdsAgents\LibraryAgent.cs,Run,The following statement contains a magic number: while (!_forceStop)              {                  lock (_locker)                  {                      try                      {                          // If we are restarting' reset                          _manualReset.Reset();                            // Only do something if enabled                          if (!ApplicationSettings.Default.EnableExpiredFileDeletion)                          {                              Trace.WriteLine(new LogMessage("LibraryAgent - Run"' "Expired File Deletion Disabled")' LogType.Audit.ToString());                              return;                          }                            // Test Date                          DateTime testDate = DateTime.Now.AddDays(ApplicationSettings.Default.LibraryAgentInterval * -1);                            // Get required files from disk                          _requiredFiles = RequiredFiles.LoadFromDisk();                            Trace.WriteLine(new LogMessage("LibraryAgent - Run"' "Number of required files = " + _requiredFiles.RequiredFileList.Count)' LogType.Audit.ToString());                            // Build a list of files in the library                          DirectoryInfo directory = new DirectoryInfo(ApplicationSettings.Default.LibraryPath);                                                    // Check each one and see if it is in required files                          foreach (FileInfo fileInfo in directory.GetFiles())                          {                              // Never delete certain system files                              // Also do not delete log/stat files as they are managed by their respective agents                              if (_persistentFiles.Contains(fileInfo.Name) ||                                   fileInfo.Name.Contains(ApplicationSettings.Default.LogLocation) ||                                   fileInfo.Name.Contains(ApplicationSettings.Default.StatsLogFile)                                  )                                  continue;                                // Delete files that were accessed over N days ago                              try                              {                                  RequiredFile file = _requiredFiles.GetRequiredFile(fileInfo.Name);                              }                              catch                              {                                  // It is a bad idea to log in here - it can cause a build up of log files.                                  //Debug.WriteLine(new LogMessage("LibraryAgent - Run"' fileInfo.Name + " is not in Required Files' testing last accessed date [" + fileInfo.LastAccessTime + "] is earlier than " + testDate)' LogType.Audit.ToString());                                    // Not a required file                                  if (fileInfo.LastAccessTime < testDate)                                  {                                      Trace.WriteLine(new LogMessage("LibraryAgent - Run"' "Deleting old file: " + fileInfo.Name)' LogType.Info.ToString());                                      File.Delete(fileInfo.FullName);                                  }                              }                          }                      }                      catch (Exception ex)                      {                          // Log this message' but dont abort the thread                          Trace.WriteLine(new LogMessage("LibraryAgent - Run"' "Exception in Run: " + ex.Message)' LogType.Error.ToString());                      }                  }                    // Sleep this thread for 15 minutes                  _manualReset.WaitOne(2700 * 1000);              }
Magic Number,XiboClient.XmdsAgents,ScheduleAndFilesAgent,C:\repos\xibosignage_xibo-dotnetclient\XmdsAgents\ScheduleAndFilesAgent.cs,Run,The following statement contains a magic number: while (!_forceStop)              {                  // If we are restarting' reset                  _manualReset.Reset();                    lock (_locker)                  {                      // Run the schedule Agent thread                      scheduleAgent();                                        if (ApplicationSettings.Default.InDownloadWindow)                      {                          try                          {                              int filesToDownload = _requiredFiles.FilesDownloading;                                // If we are currently downloading something' we have to wait                              if (filesToDownload > 0)                              {                                  _clientInfoForm.RequiredFilesStatus = string.Format("Waiting: {0} Active Downloads"' filesToDownload.ToString());                                    Trace.WriteLine(new LogMessage("RequiredFilesAgent - Run"' "Currently Downloading Files' skipping collect")' LogType.Audit.ToString());                              }                              else                              {                                  _clientInfoForm.RequiredFilesStatus = "Running: Requesting connection to Xibo Server";                                    using (xmds.xmds xmds = new xmds.xmds())                                  {                                      xmds.Credentials = null;                                      xmds.Url = ApplicationSettings.Default.XiboClient_xmds_xmds + "&method=requiredFiles";                                      xmds.UseDefaultCredentials = false;                                        // Get required files from XMDS                                      string requiredFilesXml = xmds.RequiredFiles(ApplicationSettings.Default.ServerKey' _hardwareKey);                                        // Set the flag to indicate we have a connection to XMDS                                      ApplicationSettings.Default.XmdsLastConnection = DateTime.Now;                                        _clientInfoForm.RequiredFilesStatus = "Running: Data received from Xibo Server";                                        // Load the XML file RF call                                      XmlDocument xml = new XmlDocument();                                      xml.LoadXml(requiredFilesXml);                                        // Create a required files object and set it to contain the RF returned this tick                                      _requiredFiles = new RequiredFiles();                                      _requiredFiles.CurrentCacheManager = _cacheManager;                                      _requiredFiles.RequiredFilesXml = xml;                                        // List of Threads to start                                      // TODO: Track these threads so that we can abort them if the application closes                                      List<Thread> threadsToStart = new List<Thread>();                                        // Required files now contains a list of files to download (this will be updated by the various worker threads)                                      foreach (RequiredFile fileToDownload in _requiredFiles.RequiredFileList)                                      {                                          // Skip downloaded files                                          if (fileToDownload.Complete)                                              continue;                                            // Spawn a thread to download this file.                                          FileAgent fileAgent = new FileAgent();                                          fileAgent.FileDownloadLimit = _fileDownloadLimit;                                          fileAgent.HardwareKey = _hardwareKey;                                          fileAgent.RequiredFiles = _requiredFiles;                                          fileAgent.RequiredFileId = fileToDownload.Id;                                          fileAgent.RequiredFileType = fileToDownload.FileType;                                          fileAgent.OnComplete += new FileAgent.OnCompleteDelegate(fileAgent_OnComplete);                                          fileAgent.OnPartComplete += new FileAgent.OnPartCompleteDelegate(fileAgent_OnPartComplete);                                            // Create the thread and add it to the list of threads to start                                          Thread thread = new Thread(new ThreadStart(fileAgent.Run));                                          thread.Name = "FileAgent_" + fileToDownload.FileType + "_Id_" + fileToDownload.Id.ToString();                                          threadsToStart.Add(thread);                                      }                                        // Start the threads after we have built them all - otherwise they will modify the collection we                                       // are iterating over.                                      foreach (Thread thread in threadsToStart)                                          thread.Start();                                        // Report what we are doing back to MediaInventory                                      _requiredFiles.ReportInventory();                                        // Write Required Files                                      _requiredFiles.WriteRequiredFiles();                                        // Write the Cache Manager to Disk                                      _cacheManager.WriteCacheManager();                                        // Report the storage usage                                      reportStorage();                                        // Set the status on the client info screen                                      if (threadsToStart.Count == 0)                                      {                                          _clientInfoForm.RequiredFilesStatus = "Sleeping (inside download window)";                                                                                    // Raise an event to say we've completed                                          if (OnFullyProvisioned != null)                                              OnFullyProvisioned();                                      }                                      else                                          _clientInfoForm.RequiredFilesStatus = string.Format("{0} files to download"' threadsToStart.Count.ToString());                                        _clientInfoForm.UpdateRequiredFiles(RequiredFilesString());                                  }                              }                          }                          catch (WebException webEx)                          {                              // Increment the quantity of XMDS failures and bail out                              ApplicationSettings.Default.IncrementXmdsErrorCount();                                // Log this message' but dont abort the thread                              Trace.WriteLine(new LogMessage("RequiredFilesAgent - Run"' "WebException in Run: " + webEx.Message)' LogType.Info.ToString());                                _clientInfoForm.RequiredFilesStatus = "Error: " + webEx.Message;                          }                          catch (Exception ex)                          {                              // Log this message' but dont abort the thread                              Trace.WriteLine(new LogMessage("RequiredFilesAgent - Run"' "Exception in Run: " + ex.Message)' LogType.Error.ToString());                                _clientInfoForm.RequiredFilesStatus = "Error: " + ex.Message;                          }                      }                      else                      {                          _clientInfoForm.RequiredFilesStatus = string.Format("Outside Download Window {0} - {1}"' ApplicationSettings.Default.DownloadStartWindowTime.ToString("HH:mm"' CultureInfo.InvariantCulture)' ApplicationSettings.Default.DownloadEndWindowTime.ToString("HH:mm"' CultureInfo.InvariantCulture));                      }                  }                    // Sleep this thread until the next collection interval                  _manualReset.WaitOne((int)(ApplicationSettings.Default.CollectInterval * ApplicationSettings.Default.XmdsCollectionIntervalFactor() * 1000));              }
Magic Number,XiboClient.XmdsAgents,ScheduleAndFilesAgent,C:\repos\xibosignage_xibo-dotnetclient\XmdsAgents\ScheduleAndFilesAgent.cs,RequiredFilesString,The following statement contains a magic number: foreach (RequiredFile requiredFile in _requiredFiles.RequiredFileList)              {                  string percentComplete = (!requiredFile.Complete) ? Math.Round((((double)requiredFile.ChunkOffset / (double)requiredFile.Size) * 100)' 1).ToString() : "100";                  requiredFilesTextBox = requiredFilesTextBox + requiredFile.FileType + ": " + requiredFile.SaveAs + ". (" + percentComplete + "%)" + Environment.NewLine;              }
Duplicate Code,XiboClient.XmdsAgents,FileAgent,C:\repos\xibosignage_xibo-dotnetclient\XmdsAgents\FileAgent.cs,Run,The method contains a code clone-set at the following line numbers (starting from the method definition): ((49' 71)' (145' 167))
Missing Default,XiboClient,KeyStore,C:\repos\xibosignage_xibo-dotnetclient\Logic\KeyStore.cs,PreFilterMessage,The following switch statement is missing a default case: switch (m.Msg)              {                  case WM_KEYUP:                      key = (Keys)m.WParam;                      handled = HandleModifier(key' false);                      break;                    case WM_KEYDOWN:                      key = (Keys)m.WParam;                      handled = HandleModifier(key' true);                      if (false == handled)                      {                          // If one of the defined keys was pressed then we                          // raise an event.                          handled = HandleDefinedKey(key);                      }                      break;              }
Missing Default,XiboClient,KeyStore,C:\repos\xibosignage_xibo-dotnetclient\Logic\KeyStore.cs,HandleModifier,The following switch statement is missing a default case: switch (key)              {                  case Keys.RControlKey:                  case Keys.ControlKey:                      _control = isDown;                      handled = true;                      break;                    case Keys.RShiftKey:                  case Keys.ShiftKey:                      _shift = isDown;                      handled = true;                      break;              }
Missing Default,XiboClient,Schedule,C:\repos\xibosignage_xibo-dotnetclient\Logic\Schedule.cs,_xmrSubscriber_OnAction,The following switch statement is missing a default case: switch (action.GetActionName())              {                  case RevertToSchedulePlayerAction.Name:                      _scheduleManager.ClearLayoutChangeActions();                      _scheduleManager.RunNow();                      break;                    case "collectNow":                      // Run all of the various agents                      wakeUpXmds();                      break;                    case LayoutChangePlayerAction.Name:                      // Add to a collection of Layout Change events                       if (((LayoutChangePlayerAction)action).changeMode == "replace")                      {                          _scheduleManager.ReplaceLayoutChangeActions(((LayoutChangePlayerAction)action));                      }                      else {                          _scheduleManager.AddLayoutChangeAction(((LayoutChangePlayerAction)action));                      }                        // Assess the schedule now' or later?                      if (((LayoutChangePlayerAction)action).IsDownloadRequired())                      {                          // Run XMDS to download the required layouts                          // need to notify again once a complete download has occurred.                          wakeUpXmds();                      }                      else                      {                          // Reassess the schedule                          _scheduleManager.RunNow();                      }                        break;                    case OverlayLayoutPlayerAction.Name:                      // Add to a collection of Layout Change events                       _scheduleManager.AddOverlayLayoutAction(((OverlayLayoutPlayerAction)action));                        // Assess the schedule now' or later?                      if (((OverlayLayoutPlayerAction)action).IsDownloadRequired())                      {                          // Run XMDS to download the required layouts                          // need to notify again once a complete download has occurred.                          wakeUpXmds();                      }                      else                      {                          // Reassess the schedule                          _scheduleManager.RunNow();                      }                        break;              }
