Implementation smell,Namespace,Class,File,Method,Description
Magic Number,VLALinkedList,AnimationDisplay,C:\repos\PureIso_VisualLearningAssistant\Plug-ins\VLALinkedList\AnimationDisplay.xaml.cs,NewLinkedListButtonClick,The following statement contains a magic number: _mainLinkedList = new LinkedList (50' 100' DisplayCanvas' TimeSpan.FromSeconds (1));  
Magic Number,VLALinkedList,AnimationDisplay,C:\repos\PureIso_VisualLearningAssistant\Plug-ins\VLALinkedList\AnimationDisplay.xaml.cs,NewLinkedListButtonClick,The following statement contains a magic number: _mainLinkedList = new LinkedList (50' 100' DisplayCanvas' TimeSpan.FromSeconds (1));  
Magic Number,VLALinkedList.Core,LinkedList,C:\repos\PureIso_VisualLearningAssistant\Plug-ins\VLALinkedList\Core\LinkedList.cs,LinkedList,The following statement contains a magic number: _length = 161;  
Magic Number,VLALinkedList.Core,LinkedList,C:\repos\PureIso_VisualLearningAssistant\Plug-ins\VLALinkedList\Core\LinkedList.cs,Draw,The following statement contains a magic number: animationY.Completed += (s' ev) =>  {  	if (Tail.Previous == null)//Head  	 {  		LabelNodeHead labelNodeHead = new LabelNodeHead ();  		Canvas.SetLeft (labelNodeHead' Tail.XAxis * 2);  		// Set x position  		Canvas.SetTop (labelNodeHead' 0);  		// Set y position  		_canvas.Children.Add (labelNodeHead);  		Canvas.SetLeft (_labelNodeTail' Tail.XAxis * 2);  		// Set x position  		Canvas.SetTop (_labelNodeTail' Tail.YAxis + listNode.ActualHeight);  		// Set y position  		_labelNodeTail.Uid = "LabelNodeTail";  		UseCanvas (_canvas' "LabelNodeTail");  		_canvas.Children.Add (_labelNodeTail);  	}  	else {  		Canvas.SetLeft (listNode' Tail.XAxis);  		// Set x position  		Canvas.SetTop (listNode' Tail.YAxis);  		// Set y position  		Console.WriteLine ("Tail X:" + Tail.XAxis);  		Console.WriteLine ("Left:" + Canvas.GetLeft (listNode));  		from = Tail.XAxis - _currentNodeXaxis + _length;  		double to = Tail.XAxis - _currentNodeXaxis + _length - 17;  		Console.WriteLine ("From Y2:" + from);  		Console.WriteLine ("To Y2:" + to);  		TranslateTransform translateTrasformb = new TranslateTransform ();  		listNode.RenderTransform = translateTrasformb;  		DoubleAnimation animationX = new DoubleAnimation (from' to' TimeSpan.FromSeconds (.05));  		animationX.Completed += (n' eN) =>  {  			// Create a diagonal linear gradient with four stops.     			LinearGradientBrush myLinearGradientBrush = new LinearGradientBrush ();  			myLinearGradientBrush.GradientStops.Add (new GradientStop (Colors.White' 0));  			myLinearGradientBrush.GradientStops.Add (new GradientStop (Colors.Black' 1));  			myLinearGradientBrush.GradientStops.Add (new GradientStop (Colors.Green' 0.906));  			listNode.InnerEllipse.Fill = myLinearGradientBrush;  			Canvas.SetLeft (_labelNodeTail' Tail.XAxis);  			// Set x position  			Canvas.SetTop (_labelNodeTail' Tail.YAxis + listNode.ActualHeight);  			// Set y position  			UseCanvas (_canvas' "LabelNodeTail");  			_canvas.Children.Add (_labelNodeTail);  		};  		//Translate  		translateTrasformb.BeginAnimation (TranslateTransform.XProperty' animationX);  		_currentNodeXaxis -= 17;  	}  };  
Magic Number,VLALinkedList.Core,LinkedList,C:\repos\PureIso_VisualLearningAssistant\Plug-ins\VLALinkedList\Core\LinkedList.cs,Draw,The following statement contains a magic number: animationY.Completed += (s' ev) =>  {  	if (Tail.Previous == null)//Head  	 {  		LabelNodeHead labelNodeHead = new LabelNodeHead ();  		Canvas.SetLeft (labelNodeHead' Tail.XAxis * 2);  		// Set x position  		Canvas.SetTop (labelNodeHead' 0);  		// Set y position  		_canvas.Children.Add (labelNodeHead);  		Canvas.SetLeft (_labelNodeTail' Tail.XAxis * 2);  		// Set x position  		Canvas.SetTop (_labelNodeTail' Tail.YAxis + listNode.ActualHeight);  		// Set y position  		_labelNodeTail.Uid = "LabelNodeTail";  		UseCanvas (_canvas' "LabelNodeTail");  		_canvas.Children.Add (_labelNodeTail);  	}  	else {  		Canvas.SetLeft (listNode' Tail.XAxis);  		// Set x position  		Canvas.SetTop (listNode' Tail.YAxis);  		// Set y position  		Console.WriteLine ("Tail X:" + Tail.XAxis);  		Console.WriteLine ("Left:" + Canvas.GetLeft (listNode));  		from = Tail.XAxis - _currentNodeXaxis + _length;  		double to = Tail.XAxis - _currentNodeXaxis + _length - 17;  		Console.WriteLine ("From Y2:" + from);  		Console.WriteLine ("To Y2:" + to);  		TranslateTransform translateTrasformb = new TranslateTransform ();  		listNode.RenderTransform = translateTrasformb;  		DoubleAnimation animationX = new DoubleAnimation (from' to' TimeSpan.FromSeconds (.05));  		animationX.Completed += (n' eN) =>  {  			// Create a diagonal linear gradient with four stops.     			LinearGradientBrush myLinearGradientBrush = new LinearGradientBrush ();  			myLinearGradientBrush.GradientStops.Add (new GradientStop (Colors.White' 0));  			myLinearGradientBrush.GradientStops.Add (new GradientStop (Colors.Black' 1));  			myLinearGradientBrush.GradientStops.Add (new GradientStop (Colors.Green' 0.906));  			listNode.InnerEllipse.Fill = myLinearGradientBrush;  			Canvas.SetLeft (_labelNodeTail' Tail.XAxis);  			// Set x position  			Canvas.SetTop (_labelNodeTail' Tail.YAxis + listNode.ActualHeight);  			// Set y position  			UseCanvas (_canvas' "LabelNodeTail");  			_canvas.Children.Add (_labelNodeTail);  		};  		//Translate  		translateTrasformb.BeginAnimation (TranslateTransform.XProperty' animationX);  		_currentNodeXaxis -= 17;  	}  };  
Magic Number,VLALinkedList.Core,LinkedList,C:\repos\PureIso_VisualLearningAssistant\Plug-ins\VLALinkedList\Core\LinkedList.cs,Draw,The following statement contains a magic number: animationY.Completed += (s' ev) =>  {  	if (Tail.Previous == null)//Head  	 {  		LabelNodeHead labelNodeHead = new LabelNodeHead ();  		Canvas.SetLeft (labelNodeHead' Tail.XAxis * 2);  		// Set x position  		Canvas.SetTop (labelNodeHead' 0);  		// Set y position  		_canvas.Children.Add (labelNodeHead);  		Canvas.SetLeft (_labelNodeTail' Tail.XAxis * 2);  		// Set x position  		Canvas.SetTop (_labelNodeTail' Tail.YAxis + listNode.ActualHeight);  		// Set y position  		_labelNodeTail.Uid = "LabelNodeTail";  		UseCanvas (_canvas' "LabelNodeTail");  		_canvas.Children.Add (_labelNodeTail);  	}  	else {  		Canvas.SetLeft (listNode' Tail.XAxis);  		// Set x position  		Canvas.SetTop (listNode' Tail.YAxis);  		// Set y position  		Console.WriteLine ("Tail X:" + Tail.XAxis);  		Console.WriteLine ("Left:" + Canvas.GetLeft (listNode));  		from = Tail.XAxis - _currentNodeXaxis + _length;  		double to = Tail.XAxis - _currentNodeXaxis + _length - 17;  		Console.WriteLine ("From Y2:" + from);  		Console.WriteLine ("To Y2:" + to);  		TranslateTransform translateTrasformb = new TranslateTransform ();  		listNode.RenderTransform = translateTrasformb;  		DoubleAnimation animationX = new DoubleAnimation (from' to' TimeSpan.FromSeconds (.05));  		animationX.Completed += (n' eN) =>  {  			// Create a diagonal linear gradient with four stops.     			LinearGradientBrush myLinearGradientBrush = new LinearGradientBrush ();  			myLinearGradientBrush.GradientStops.Add (new GradientStop (Colors.White' 0));  			myLinearGradientBrush.GradientStops.Add (new GradientStop (Colors.Black' 1));  			myLinearGradientBrush.GradientStops.Add (new GradientStop (Colors.Green' 0.906));  			listNode.InnerEllipse.Fill = myLinearGradientBrush;  			Canvas.SetLeft (_labelNodeTail' Tail.XAxis);  			// Set x position  			Canvas.SetTop (_labelNodeTail' Tail.YAxis + listNode.ActualHeight);  			// Set y position  			UseCanvas (_canvas' "LabelNodeTail");  			_canvas.Children.Add (_labelNodeTail);  		};  		//Translate  		translateTrasformb.BeginAnimation (TranslateTransform.XProperty' animationX);  		_currentNodeXaxis -= 17;  	}  };  
Magic Number,VLALinkedList.Core,LinkedList,C:\repos\PureIso_VisualLearningAssistant\Plug-ins\VLALinkedList\Core\LinkedList.cs,Draw,The following statement contains a magic number: animationY.Completed += (s' ev) =>  {  	if (Tail.Previous == null)//Head  	 {  		LabelNodeHead labelNodeHead = new LabelNodeHead ();  		Canvas.SetLeft (labelNodeHead' Tail.XAxis * 2);  		// Set x position  		Canvas.SetTop (labelNodeHead' 0);  		// Set y position  		_canvas.Children.Add (labelNodeHead);  		Canvas.SetLeft (_labelNodeTail' Tail.XAxis * 2);  		// Set x position  		Canvas.SetTop (_labelNodeTail' Tail.YAxis + listNode.ActualHeight);  		// Set y position  		_labelNodeTail.Uid = "LabelNodeTail";  		UseCanvas (_canvas' "LabelNodeTail");  		_canvas.Children.Add (_labelNodeTail);  	}  	else {  		Canvas.SetLeft (listNode' Tail.XAxis);  		// Set x position  		Canvas.SetTop (listNode' Tail.YAxis);  		// Set y position  		Console.WriteLine ("Tail X:" + Tail.XAxis);  		Console.WriteLine ("Left:" + Canvas.GetLeft (listNode));  		from = Tail.XAxis - _currentNodeXaxis + _length;  		double to = Tail.XAxis - _currentNodeXaxis + _length - 17;  		Console.WriteLine ("From Y2:" + from);  		Console.WriteLine ("To Y2:" + to);  		TranslateTransform translateTrasformb = new TranslateTransform ();  		listNode.RenderTransform = translateTrasformb;  		DoubleAnimation animationX = new DoubleAnimation (from' to' TimeSpan.FromSeconds (.05));  		animationX.Completed += (n' eN) =>  {  			// Create a diagonal linear gradient with four stops.     			LinearGradientBrush myLinearGradientBrush = new LinearGradientBrush ();  			myLinearGradientBrush.GradientStops.Add (new GradientStop (Colors.White' 0));  			myLinearGradientBrush.GradientStops.Add (new GradientStop (Colors.Black' 1));  			myLinearGradientBrush.GradientStops.Add (new GradientStop (Colors.Green' 0.906));  			listNode.InnerEllipse.Fill = myLinearGradientBrush;  			Canvas.SetLeft (_labelNodeTail' Tail.XAxis);  			// Set x position  			Canvas.SetTop (_labelNodeTail' Tail.YAxis + listNode.ActualHeight);  			// Set y position  			UseCanvas (_canvas' "LabelNodeTail");  			_canvas.Children.Add (_labelNodeTail);  		};  		//Translate  		translateTrasformb.BeginAnimation (TranslateTransform.XProperty' animationX);  		_currentNodeXaxis -= 17;  	}  };  
Magic Number,VLALinkedList.Core,LinkedList,C:\repos\PureIso_VisualLearningAssistant\Plug-ins\VLALinkedList\Core\LinkedList.cs,Draw,The following statement contains a magic number: animationY.Completed += (s' ev) =>  {  	if (Tail.Previous == null)//Head  	 {  		LabelNodeHead labelNodeHead = new LabelNodeHead ();  		Canvas.SetLeft (labelNodeHead' Tail.XAxis * 2);  		// Set x position  		Canvas.SetTop (labelNodeHead' 0);  		// Set y position  		_canvas.Children.Add (labelNodeHead);  		Canvas.SetLeft (_labelNodeTail' Tail.XAxis * 2);  		// Set x position  		Canvas.SetTop (_labelNodeTail' Tail.YAxis + listNode.ActualHeight);  		// Set y position  		_labelNodeTail.Uid = "LabelNodeTail";  		UseCanvas (_canvas' "LabelNodeTail");  		_canvas.Children.Add (_labelNodeTail);  	}  	else {  		Canvas.SetLeft (listNode' Tail.XAxis);  		// Set x position  		Canvas.SetTop (listNode' Tail.YAxis);  		// Set y position  		Console.WriteLine ("Tail X:" + Tail.XAxis);  		Console.WriteLine ("Left:" + Canvas.GetLeft (listNode));  		from = Tail.XAxis - _currentNodeXaxis + _length;  		double to = Tail.XAxis - _currentNodeXaxis + _length - 17;  		Console.WriteLine ("From Y2:" + from);  		Console.WriteLine ("To Y2:" + to);  		TranslateTransform translateTrasformb = new TranslateTransform ();  		listNode.RenderTransform = translateTrasformb;  		DoubleAnimation animationX = new DoubleAnimation (from' to' TimeSpan.FromSeconds (.05));  		animationX.Completed += (n' eN) =>  {  			// Create a diagonal linear gradient with four stops.     			LinearGradientBrush myLinearGradientBrush = new LinearGradientBrush ();  			myLinearGradientBrush.GradientStops.Add (new GradientStop (Colors.White' 0));  			myLinearGradientBrush.GradientStops.Add (new GradientStop (Colors.Black' 1));  			myLinearGradientBrush.GradientStops.Add (new GradientStop (Colors.Green' 0.906));  			listNode.InnerEllipse.Fill = myLinearGradientBrush;  			Canvas.SetLeft (_labelNodeTail' Tail.XAxis);  			// Set x position  			Canvas.SetTop (_labelNodeTail' Tail.YAxis + listNode.ActualHeight);  			// Set y position  			UseCanvas (_canvas' "LabelNodeTail");  			_canvas.Children.Add (_labelNodeTail);  		};  		//Translate  		translateTrasformb.BeginAnimation (TranslateTransform.XProperty' animationX);  		_currentNodeXaxis -= 17;  	}  };  
Magic Number,VLALinkedList.Core,LinkedList,C:\repos\PureIso_VisualLearningAssistant\Plug-ins\VLALinkedList\Core\LinkedList.cs,Draw,The following statement contains a magic number: animationY.Completed += (s' ev) =>  {  	if (Tail.Previous == null)//Head  	 {  		LabelNodeHead labelNodeHead = new LabelNodeHead ();  		Canvas.SetLeft (labelNodeHead' Tail.XAxis * 2);  		// Set x position  		Canvas.SetTop (labelNodeHead' 0);  		// Set y position  		_canvas.Children.Add (labelNodeHead);  		Canvas.SetLeft (_labelNodeTail' Tail.XAxis * 2);  		// Set x position  		Canvas.SetTop (_labelNodeTail' Tail.YAxis + listNode.ActualHeight);  		// Set y position  		_labelNodeTail.Uid = "LabelNodeTail";  		UseCanvas (_canvas' "LabelNodeTail");  		_canvas.Children.Add (_labelNodeTail);  	}  	else {  		Canvas.SetLeft (listNode' Tail.XAxis);  		// Set x position  		Canvas.SetTop (listNode' Tail.YAxis);  		// Set y position  		Console.WriteLine ("Tail X:" + Tail.XAxis);  		Console.WriteLine ("Left:" + Canvas.GetLeft (listNode));  		from = Tail.XAxis - _currentNodeXaxis + _length;  		double to = Tail.XAxis - _currentNodeXaxis + _length - 17;  		Console.WriteLine ("From Y2:" + from);  		Console.WriteLine ("To Y2:" + to);  		TranslateTransform translateTrasformb = new TranslateTransform ();  		listNode.RenderTransform = translateTrasformb;  		DoubleAnimation animationX = new DoubleAnimation (from' to' TimeSpan.FromSeconds (.05));  		animationX.Completed += (n' eN) =>  {  			// Create a diagonal linear gradient with four stops.     			LinearGradientBrush myLinearGradientBrush = new LinearGradientBrush ();  			myLinearGradientBrush.GradientStops.Add (new GradientStop (Colors.White' 0));  			myLinearGradientBrush.GradientStops.Add (new GradientStop (Colors.Black' 1));  			myLinearGradientBrush.GradientStops.Add (new GradientStop (Colors.Green' 0.906));  			listNode.InnerEllipse.Fill = myLinearGradientBrush;  			Canvas.SetLeft (_labelNodeTail' Tail.XAxis);  			// Set x position  			Canvas.SetTop (_labelNodeTail' Tail.YAxis + listNode.ActualHeight);  			// Set y position  			UseCanvas (_canvas' "LabelNodeTail");  			_canvas.Children.Add (_labelNodeTail);  		};  		//Translate  		translateTrasformb.BeginAnimation (TranslateTransform.XProperty' animationX);  		_currentNodeXaxis -= 17;  	}  };  
Magic Number,VLALinkedList.Core,LinkedList,C:\repos\PureIso_VisualLearningAssistant\Plug-ins\VLALinkedList\Core\LinkedList.cs,Draw,The following statement contains a magic number: if (Tail.Previous == null)//Head   {  	LabelNodeHead labelNodeHead = new LabelNodeHead ();  	Canvas.SetLeft (labelNodeHead' Tail.XAxis * 2);  	// Set x position  	Canvas.SetTop (labelNodeHead' 0);  	// Set y position  	_canvas.Children.Add (labelNodeHead);  	Canvas.SetLeft (_labelNodeTail' Tail.XAxis * 2);  	// Set x position  	Canvas.SetTop (_labelNodeTail' Tail.YAxis + listNode.ActualHeight);  	// Set y position  	_labelNodeTail.Uid = "LabelNodeTail";  	UseCanvas (_canvas' "LabelNodeTail");  	_canvas.Children.Add (_labelNodeTail);  }  else {  	Canvas.SetLeft (listNode' Tail.XAxis);  	// Set x position  	Canvas.SetTop (listNode' Tail.YAxis);  	// Set y position  	Console.WriteLine ("Tail X:" + Tail.XAxis);  	Console.WriteLine ("Left:" + Canvas.GetLeft (listNode));  	from = Tail.XAxis - _currentNodeXaxis + _length;  	double to = Tail.XAxis - _currentNodeXaxis + _length - 17;  	Console.WriteLine ("From Y2:" + from);  	Console.WriteLine ("To Y2:" + to);  	TranslateTransform translateTrasformb = new TranslateTransform ();  	listNode.RenderTransform = translateTrasformb;  	DoubleAnimation animationX = new DoubleAnimation (from' to' TimeSpan.FromSeconds (.05));  	animationX.Completed += (n' eN) =>  {  		// Create a diagonal linear gradient with four stops.     		LinearGradientBrush myLinearGradientBrush = new LinearGradientBrush ();  		myLinearGradientBrush.GradientStops.Add (new GradientStop (Colors.White' 0));  		myLinearGradientBrush.GradientStops.Add (new GradientStop (Colors.Black' 1));  		myLinearGradientBrush.GradientStops.Add (new GradientStop (Colors.Green' 0.906));  		listNode.InnerEllipse.Fill = myLinearGradientBrush;  		Canvas.SetLeft (_labelNodeTail' Tail.XAxis);  		// Set x position  		Canvas.SetTop (_labelNodeTail' Tail.YAxis + listNode.ActualHeight);  		// Set y position  		UseCanvas (_canvas' "LabelNodeTail");  		_canvas.Children.Add (_labelNodeTail);  	};  	//Translate  	translateTrasformb.BeginAnimation (TranslateTransform.XProperty' animationX);  	_currentNodeXaxis -= 17;  }  
Magic Number,VLALinkedList.Core,LinkedList,C:\repos\PureIso_VisualLearningAssistant\Plug-ins\VLALinkedList\Core\LinkedList.cs,Draw,The following statement contains a magic number: if (Tail.Previous == null)//Head   {  	LabelNodeHead labelNodeHead = new LabelNodeHead ();  	Canvas.SetLeft (labelNodeHead' Tail.XAxis * 2);  	// Set x position  	Canvas.SetTop (labelNodeHead' 0);  	// Set y position  	_canvas.Children.Add (labelNodeHead);  	Canvas.SetLeft (_labelNodeTail' Tail.XAxis * 2);  	// Set x position  	Canvas.SetTop (_labelNodeTail' Tail.YAxis + listNode.ActualHeight);  	// Set y position  	_labelNodeTail.Uid = "LabelNodeTail";  	UseCanvas (_canvas' "LabelNodeTail");  	_canvas.Children.Add (_labelNodeTail);  }  else {  	Canvas.SetLeft (listNode' Tail.XAxis);  	// Set x position  	Canvas.SetTop (listNode' Tail.YAxis);  	// Set y position  	Console.WriteLine ("Tail X:" + Tail.XAxis);  	Console.WriteLine ("Left:" + Canvas.GetLeft (listNode));  	from = Tail.XAxis - _currentNodeXaxis + _length;  	double to = Tail.XAxis - _currentNodeXaxis + _length - 17;  	Console.WriteLine ("From Y2:" + from);  	Console.WriteLine ("To Y2:" + to);  	TranslateTransform translateTrasformb = new TranslateTransform ();  	listNode.RenderTransform = translateTrasformb;  	DoubleAnimation animationX = new DoubleAnimation (from' to' TimeSpan.FromSeconds (.05));  	animationX.Completed += (n' eN) =>  {  		// Create a diagonal linear gradient with four stops.     		LinearGradientBrush myLinearGradientBrush = new LinearGradientBrush ();  		myLinearGradientBrush.GradientStops.Add (new GradientStop (Colors.White' 0));  		myLinearGradientBrush.GradientStops.Add (new GradientStop (Colors.Black' 1));  		myLinearGradientBrush.GradientStops.Add (new GradientStop (Colors.Green' 0.906));  		listNode.InnerEllipse.Fill = myLinearGradientBrush;  		Canvas.SetLeft (_labelNodeTail' Tail.XAxis);  		// Set x position  		Canvas.SetTop (_labelNodeTail' Tail.YAxis + listNode.ActualHeight);  		// Set y position  		UseCanvas (_canvas' "LabelNodeTail");  		_canvas.Children.Add (_labelNodeTail);  	};  	//Translate  	translateTrasformb.BeginAnimation (TranslateTransform.XProperty' animationX);  	_currentNodeXaxis -= 17;  }  
Magic Number,VLALinkedList.Core,LinkedList,C:\repos\PureIso_VisualLearningAssistant\Plug-ins\VLALinkedList\Core\LinkedList.cs,Draw,The following statement contains a magic number: if (Tail.Previous == null)//Head   {  	LabelNodeHead labelNodeHead = new LabelNodeHead ();  	Canvas.SetLeft (labelNodeHead' Tail.XAxis * 2);  	// Set x position  	Canvas.SetTop (labelNodeHead' 0);  	// Set y position  	_canvas.Children.Add (labelNodeHead);  	Canvas.SetLeft (_labelNodeTail' Tail.XAxis * 2);  	// Set x position  	Canvas.SetTop (_labelNodeTail' Tail.YAxis + listNode.ActualHeight);  	// Set y position  	_labelNodeTail.Uid = "LabelNodeTail";  	UseCanvas (_canvas' "LabelNodeTail");  	_canvas.Children.Add (_labelNodeTail);  }  else {  	Canvas.SetLeft (listNode' Tail.XAxis);  	// Set x position  	Canvas.SetTop (listNode' Tail.YAxis);  	// Set y position  	Console.WriteLine ("Tail X:" + Tail.XAxis);  	Console.WriteLine ("Left:" + Canvas.GetLeft (listNode));  	from = Tail.XAxis - _currentNodeXaxis + _length;  	double to = Tail.XAxis - _currentNodeXaxis + _length - 17;  	Console.WriteLine ("From Y2:" + from);  	Console.WriteLine ("To Y2:" + to);  	TranslateTransform translateTrasformb = new TranslateTransform ();  	listNode.RenderTransform = translateTrasformb;  	DoubleAnimation animationX = new DoubleAnimation (from' to' TimeSpan.FromSeconds (.05));  	animationX.Completed += (n' eN) =>  {  		// Create a diagonal linear gradient with four stops.     		LinearGradientBrush myLinearGradientBrush = new LinearGradientBrush ();  		myLinearGradientBrush.GradientStops.Add (new GradientStop (Colors.White' 0));  		myLinearGradientBrush.GradientStops.Add (new GradientStop (Colors.Black' 1));  		myLinearGradientBrush.GradientStops.Add (new GradientStop (Colors.Green' 0.906));  		listNode.InnerEllipse.Fill = myLinearGradientBrush;  		Canvas.SetLeft (_labelNodeTail' Tail.XAxis);  		// Set x position  		Canvas.SetTop (_labelNodeTail' Tail.YAxis + listNode.ActualHeight);  		// Set y position  		UseCanvas (_canvas' "LabelNodeTail");  		_canvas.Children.Add (_labelNodeTail);  	};  	//Translate  	translateTrasformb.BeginAnimation (TranslateTransform.XProperty' animationX);  	_currentNodeXaxis -= 17;  }  
Magic Number,VLALinkedList.Core,LinkedList,C:\repos\PureIso_VisualLearningAssistant\Plug-ins\VLALinkedList\Core\LinkedList.cs,Draw,The following statement contains a magic number: if (Tail.Previous == null)//Head   {  	LabelNodeHead labelNodeHead = new LabelNodeHead ();  	Canvas.SetLeft (labelNodeHead' Tail.XAxis * 2);  	// Set x position  	Canvas.SetTop (labelNodeHead' 0);  	// Set y position  	_canvas.Children.Add (labelNodeHead);  	Canvas.SetLeft (_labelNodeTail' Tail.XAxis * 2);  	// Set x position  	Canvas.SetTop (_labelNodeTail' Tail.YAxis + listNode.ActualHeight);  	// Set y position  	_labelNodeTail.Uid = "LabelNodeTail";  	UseCanvas (_canvas' "LabelNodeTail");  	_canvas.Children.Add (_labelNodeTail);  }  else {  	Canvas.SetLeft (listNode' Tail.XAxis);  	// Set x position  	Canvas.SetTop (listNode' Tail.YAxis);  	// Set y position  	Console.WriteLine ("Tail X:" + Tail.XAxis);  	Console.WriteLine ("Left:" + Canvas.GetLeft (listNode));  	from = Tail.XAxis - _currentNodeXaxis + _length;  	double to = Tail.XAxis - _currentNodeXaxis + _length - 17;  	Console.WriteLine ("From Y2:" + from);  	Console.WriteLine ("To Y2:" + to);  	TranslateTransform translateTrasformb = new TranslateTransform ();  	listNode.RenderTransform = translateTrasformb;  	DoubleAnimation animationX = new DoubleAnimation (from' to' TimeSpan.FromSeconds (.05));  	animationX.Completed += (n' eN) =>  {  		// Create a diagonal linear gradient with four stops.     		LinearGradientBrush myLinearGradientBrush = new LinearGradientBrush ();  		myLinearGradientBrush.GradientStops.Add (new GradientStop (Colors.White' 0));  		myLinearGradientBrush.GradientStops.Add (new GradientStop (Colors.Black' 1));  		myLinearGradientBrush.GradientStops.Add (new GradientStop (Colors.Green' 0.906));  		listNode.InnerEllipse.Fill = myLinearGradientBrush;  		Canvas.SetLeft (_labelNodeTail' Tail.XAxis);  		// Set x position  		Canvas.SetTop (_labelNodeTail' Tail.YAxis + listNode.ActualHeight);  		// Set y position  		UseCanvas (_canvas' "LabelNodeTail");  		_canvas.Children.Add (_labelNodeTail);  	};  	//Translate  	translateTrasformb.BeginAnimation (TranslateTransform.XProperty' animationX);  	_currentNodeXaxis -= 17;  }  
Magic Number,VLALinkedList.Core,LinkedList,C:\repos\PureIso_VisualLearningAssistant\Plug-ins\VLALinkedList\Core\LinkedList.cs,Draw,The following statement contains a magic number: if (Tail.Previous == null)//Head   {  	LabelNodeHead labelNodeHead = new LabelNodeHead ();  	Canvas.SetLeft (labelNodeHead' Tail.XAxis * 2);  	// Set x position  	Canvas.SetTop (labelNodeHead' 0);  	// Set y position  	_canvas.Children.Add (labelNodeHead);  	Canvas.SetLeft (_labelNodeTail' Tail.XAxis * 2);  	// Set x position  	Canvas.SetTop (_labelNodeTail' Tail.YAxis + listNode.ActualHeight);  	// Set y position  	_labelNodeTail.Uid = "LabelNodeTail";  	UseCanvas (_canvas' "LabelNodeTail");  	_canvas.Children.Add (_labelNodeTail);  }  else {  	Canvas.SetLeft (listNode' Tail.XAxis);  	// Set x position  	Canvas.SetTop (listNode' Tail.YAxis);  	// Set y position  	Console.WriteLine ("Tail X:" + Tail.XAxis);  	Console.WriteLine ("Left:" + Canvas.GetLeft (listNode));  	from = Tail.XAxis - _currentNodeXaxis + _length;  	double to = Tail.XAxis - _currentNodeXaxis + _length - 17;  	Console.WriteLine ("From Y2:" + from);  	Console.WriteLine ("To Y2:" + to);  	TranslateTransform translateTrasformb = new TranslateTransform ();  	listNode.RenderTransform = translateTrasformb;  	DoubleAnimation animationX = new DoubleAnimation (from' to' TimeSpan.FromSeconds (.05));  	animationX.Completed += (n' eN) =>  {  		// Create a diagonal linear gradient with four stops.     		LinearGradientBrush myLinearGradientBrush = new LinearGradientBrush ();  		myLinearGradientBrush.GradientStops.Add (new GradientStop (Colors.White' 0));  		myLinearGradientBrush.GradientStops.Add (new GradientStop (Colors.Black' 1));  		myLinearGradientBrush.GradientStops.Add (new GradientStop (Colors.Green' 0.906));  		listNode.InnerEllipse.Fill = myLinearGradientBrush;  		Canvas.SetLeft (_labelNodeTail' Tail.XAxis);  		// Set x position  		Canvas.SetTop (_labelNodeTail' Tail.YAxis + listNode.ActualHeight);  		// Set y position  		UseCanvas (_canvas' "LabelNodeTail");  		_canvas.Children.Add (_labelNodeTail);  	};  	//Translate  	translateTrasformb.BeginAnimation (TranslateTransform.XProperty' animationX);  	_currentNodeXaxis -= 17;  }  
Magic Number,VLALinkedList.Core,LinkedList,C:\repos\PureIso_VisualLearningAssistant\Plug-ins\VLALinkedList\Core\LinkedList.cs,Draw,The following statement contains a magic number: if (Tail.Previous == null)//Head   {  	LabelNodeHead labelNodeHead = new LabelNodeHead ();  	Canvas.SetLeft (labelNodeHead' Tail.XAxis * 2);  	// Set x position  	Canvas.SetTop (labelNodeHead' 0);  	// Set y position  	_canvas.Children.Add (labelNodeHead);  	Canvas.SetLeft (_labelNodeTail' Tail.XAxis * 2);  	// Set x position  	Canvas.SetTop (_labelNodeTail' Tail.YAxis + listNode.ActualHeight);  	// Set y position  	_labelNodeTail.Uid = "LabelNodeTail";  	UseCanvas (_canvas' "LabelNodeTail");  	_canvas.Children.Add (_labelNodeTail);  }  else {  	Canvas.SetLeft (listNode' Tail.XAxis);  	// Set x position  	Canvas.SetTop (listNode' Tail.YAxis);  	// Set y position  	Console.WriteLine ("Tail X:" + Tail.XAxis);  	Console.WriteLine ("Left:" + Canvas.GetLeft (listNode));  	from = Tail.XAxis - _currentNodeXaxis + _length;  	double to = Tail.XAxis - _currentNodeXaxis + _length - 17;  	Console.WriteLine ("From Y2:" + from);  	Console.WriteLine ("To Y2:" + to);  	TranslateTransform translateTrasformb = new TranslateTransform ();  	listNode.RenderTransform = translateTrasformb;  	DoubleAnimation animationX = new DoubleAnimation (from' to' TimeSpan.FromSeconds (.05));  	animationX.Completed += (n' eN) =>  {  		// Create a diagonal linear gradient with four stops.     		LinearGradientBrush myLinearGradientBrush = new LinearGradientBrush ();  		myLinearGradientBrush.GradientStops.Add (new GradientStop (Colors.White' 0));  		myLinearGradientBrush.GradientStops.Add (new GradientStop (Colors.Black' 1));  		myLinearGradientBrush.GradientStops.Add (new GradientStop (Colors.Green' 0.906));  		listNode.InnerEllipse.Fill = myLinearGradientBrush;  		Canvas.SetLeft (_labelNodeTail' Tail.XAxis);  		// Set x position  		Canvas.SetTop (_labelNodeTail' Tail.YAxis + listNode.ActualHeight);  		// Set y position  		UseCanvas (_canvas' "LabelNodeTail");  		_canvas.Children.Add (_labelNodeTail);  	};  	//Translate  	translateTrasformb.BeginAnimation (TranslateTransform.XProperty' animationX);  	_currentNodeXaxis -= 17;  }  
Magic Number,VLALinkedList.Core,LinkedList,C:\repos\PureIso_VisualLearningAssistant\Plug-ins\VLALinkedList\Core\LinkedList.cs,Draw,The following statement contains a magic number: Canvas.SetLeft (labelNodeHead' Tail.XAxis * 2);  
Magic Number,VLALinkedList.Core,LinkedList,C:\repos\PureIso_VisualLearningAssistant\Plug-ins\VLALinkedList\Core\LinkedList.cs,Draw,The following statement contains a magic number: Canvas.SetLeft (_labelNodeTail' Tail.XAxis * 2);  
Magic Number,VLALinkedList.Core,LinkedList,C:\repos\PureIso_VisualLearningAssistant\Plug-ins\VLALinkedList\Core\LinkedList.cs,Draw,The following statement contains a magic number: animationX.Completed += (n' eN) =>  {  	// Create a diagonal linear gradient with four stops.     	LinearGradientBrush myLinearGradientBrush = new LinearGradientBrush ();  	myLinearGradientBrush.GradientStops.Add (new GradientStop (Colors.White' 0));  	myLinearGradientBrush.GradientStops.Add (new GradientStop (Colors.Black' 1));  	myLinearGradientBrush.GradientStops.Add (new GradientStop (Colors.Green' 0.906));  	listNode.InnerEllipse.Fill = myLinearGradientBrush;  	Canvas.SetLeft (_labelNodeTail' Tail.XAxis);  	// Set x position  	Canvas.SetTop (_labelNodeTail' Tail.YAxis + listNode.ActualHeight);  	// Set y position  	UseCanvas (_canvas' "LabelNodeTail");  	_canvas.Children.Add (_labelNodeTail);  };  
Magic Number,VLALinkedList.Core,LinkedList,C:\repos\PureIso_VisualLearningAssistant\Plug-ins\VLALinkedList\Core\LinkedList.cs,Draw,The following statement contains a magic number: myLinearGradientBrush.GradientStops.Add (new GradientStop (Colors.Green' 0.906));  
Magic Number,VLALinkedList.Core,LinkedList,C:\repos\PureIso_VisualLearningAssistant\Plug-ins\VLALinkedList\Core\LinkedList.cs,Draw,The following statement contains a magic number: _currentNodeXaxis -= 17;  
