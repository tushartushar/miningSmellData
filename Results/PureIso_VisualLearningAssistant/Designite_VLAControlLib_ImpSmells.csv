Implementation smell,Namespace,Class,File,Method,Description
Magic Number,VLAControlLib,Node,C:\repos\PureIso_VisualLearningAssistant\Frameworks\VLAControlLib\Node.xaml.cs,PositionNode,The following statement contains a magic number: _currentNodeYaxis = yAxis + Radius / 2;  
Magic Number,VLAControlLib,Node,C:\repos\PureIso_VisualLearningAssistant\Frameworks\VLAControlLib\Node.xaml.cs,PositionNode,The following statement contains a magic number: if (LeftChild != null) {  	if (RightChild != null)  		//If we don't have both children centre the node  		_currentNodeXaxis = (LeftChild._currentNodeXaxis + RightChild._currentNodeXaxis) / 2;  	else  		//only left child - centre it  		_currentNodeXaxis = LeftChild._currentNodeXaxis + 10;  }  else if (RightChild != null) {  	// No left child. centre over right child.  	_currentNodeXaxis = RightChild._currentNodeXaxis - 10;  }  else {  	// No children. We're on our own.  	_currentNodeXaxis = xAxis + Radius / 2;  	xAxis += Radius;  }  
Magic Number,VLAControlLib,Node,C:\repos\PureIso_VisualLearningAssistant\Frameworks\VLAControlLib\Node.xaml.cs,PositionNode,The following statement contains a magic number: if (LeftChild != null) {  	if (RightChild != null)  		//If we don't have both children centre the node  		_currentNodeXaxis = (LeftChild._currentNodeXaxis + RightChild._currentNodeXaxis) / 2;  	else  		//only left child - centre it  		_currentNodeXaxis = LeftChild._currentNodeXaxis + 10;  }  else if (RightChild != null) {  	// No left child. centre over right child.  	_currentNodeXaxis = RightChild._currentNodeXaxis - 10;  }  else {  	// No children. We're on our own.  	_currentNodeXaxis = xAxis + Radius / 2;  	xAxis += Radius;  }  
Magic Number,VLAControlLib,Node,C:\repos\PureIso_VisualLearningAssistant\Frameworks\VLAControlLib\Node.xaml.cs,PositionNode,The following statement contains a magic number: if (LeftChild != null) {  	if (RightChild != null)  		//If we don't have both children centre the node  		_currentNodeXaxis = (LeftChild._currentNodeXaxis + RightChild._currentNodeXaxis) / 2;  	else  		//only left child - centre it  		_currentNodeXaxis = LeftChild._currentNodeXaxis + 10;  }  else if (RightChild != null) {  	// No left child. centre over right child.  	_currentNodeXaxis = RightChild._currentNodeXaxis - 10;  }  else {  	// No children. We're on our own.  	_currentNodeXaxis = xAxis + Radius / 2;  	xAxis += Radius;  }  
Magic Number,VLAControlLib,Node,C:\repos\PureIso_VisualLearningAssistant\Frameworks\VLAControlLib\Node.xaml.cs,PositionNode,The following statement contains a magic number: if (LeftChild != null) {  	if (RightChild != null)  		//If we don't have both children centre the node  		_currentNodeXaxis = (LeftChild._currentNodeXaxis + RightChild._currentNodeXaxis) / 2;  	else  		//only left child - centre it  		_currentNodeXaxis = LeftChild._currentNodeXaxis + 10;  }  else if (RightChild != null) {  	// No left child. centre over right child.  	_currentNodeXaxis = RightChild._currentNodeXaxis - 10;  }  else {  	// No children. We're on our own.  	_currentNodeXaxis = xAxis + Radius / 2;  	xAxis += Radius;  }  
Magic Number,VLAControlLib,Node,C:\repos\PureIso_VisualLearningAssistant\Frameworks\VLAControlLib\Node.xaml.cs,PositionNode,The following statement contains a magic number: if (RightChild != null)  	//If we don't have both children centre the node  	_currentNodeXaxis = (LeftChild._currentNodeXaxis + RightChild._currentNodeXaxis) / 2;  else  	//only left child - centre it  	_currentNodeXaxis = LeftChild._currentNodeXaxis + 10;  
Magic Number,VLAControlLib,Node,C:\repos\PureIso_VisualLearningAssistant\Frameworks\VLAControlLib\Node.xaml.cs,PositionNode,The following statement contains a magic number: if (RightChild != null)  	//If we don't have both children centre the node  	_currentNodeXaxis = (LeftChild._currentNodeXaxis + RightChild._currentNodeXaxis) / 2;  else  	//only left child - centre it  	_currentNodeXaxis = LeftChild._currentNodeXaxis + 10;  
Magic Number,VLAControlLib,Node,C:\repos\PureIso_VisualLearningAssistant\Frameworks\VLAControlLib\Node.xaml.cs,PositionNode,The following statement contains a magic number: _currentNodeXaxis = (LeftChild._currentNodeXaxis + RightChild._currentNodeXaxis) / 2;  
Magic Number,VLAControlLib,Node,C:\repos\PureIso_VisualLearningAssistant\Frameworks\VLAControlLib\Node.xaml.cs,PositionNode,The following statement contains a magic number: _currentNodeXaxis = LeftChild._currentNodeXaxis + 10;  
Magic Number,VLAControlLib,Node,C:\repos\PureIso_VisualLearningAssistant\Frameworks\VLAControlLib\Node.xaml.cs,PositionNode,The following statement contains a magic number: if (RightChild != null) {  	// No left child. centre over right child.  	_currentNodeXaxis = RightChild._currentNodeXaxis - 10;  }  else {  	// No children. We're on our own.  	_currentNodeXaxis = xAxis + Radius / 2;  	xAxis += Radius;  }  
Magic Number,VLAControlLib,Node,C:\repos\PureIso_VisualLearningAssistant\Frameworks\VLAControlLib\Node.xaml.cs,PositionNode,The following statement contains a magic number: if (RightChild != null) {  	// No left child. centre over right child.  	_currentNodeXaxis = RightChild._currentNodeXaxis - 10;  }  else {  	// No children. We're on our own.  	_currentNodeXaxis = xAxis + Radius / 2;  	xAxis += Radius;  }  
Magic Number,VLAControlLib,Node,C:\repos\PureIso_VisualLearningAssistant\Frameworks\VLAControlLib\Node.xaml.cs,PositionNode,The following statement contains a magic number: _currentNodeXaxis = RightChild._currentNodeXaxis - 10;  
Magic Number,VLAControlLib,Node,C:\repos\PureIso_VisualLearningAssistant\Frameworks\VLAControlLib\Node.xaml.cs,PositionNode,The following statement contains a magic number: _currentNodeXaxis = xAxis + Radius / 2;  
Magic Number,VLAControlLib,Node,C:\repos\PureIso_VisualLearningAssistant\Frameworks\VLAControlLib\Node.xaml.cs,DrawBranches,The following statement contains a magic number: if (LeftChild != null) {  	#region Line  	_linePath = new Line// Create a new Line  	 {  		X1 = _currentNodeXaxis + (Radius / 2)'  		// x position  		Y1 = _currentNodeYaxis + Radius'  		// y position  		X2 = LeftChild._currentNodeXaxis + (Radius / 2)'  		// destination x value  		Y2 = LeftChild._currentNodeYaxis'  		// destination y value  		Stroke = Brushes.Black'  		// Stroke colour  		StrokeThickness = 5  	// Stroke thickness (0 = invisible)  	};  	Panel.SetZIndex (_linePath' 90);  	// Set draw position on top of everything but below the Node  	// Create the Line Animations  	lineAnimationX = new DoubleAnimation (_linePath.X1' _linePath.X2' new Duration (duration));  	lineAnimationY = new DoubleAnimation (_linePath.Y1' _linePath.Y2' new Duration (duration));  	// Set Target Properties for the animations  	Storyboard.SetTarget (lineAnimationX' _linePath);  	Storyboard.SetTargetName (lineAnimationX' _linePath.Name);  	Storyboard.SetTargetProperty (lineAnimationX' new PropertyPath (Line.X2Property));  	Storyboard.SetTarget (lineAnimationY' _linePath);  	Storyboard.SetTargetName (lineAnimationY' _linePath.Name);  	Storyboard.SetTargetProperty (lineAnimationY' new PropertyPath (Line.Y2Property));  	#endregion  	// add the line to the Grid(or other controls) and begin animations  	container.Children.Add (_linePath);  	// Add the animations to the storyboard  	storyboard.Children.Add (lineAnimationX);  	storyboard.Children.Add (lineAnimationY);  	// begin storyboard animations  	storyboard.Begin ();  	LeftChild.DrawBranches (container' duration);  }  
Magic Number,VLAControlLib,Node,C:\repos\PureIso_VisualLearningAssistant\Frameworks\VLAControlLib\Node.xaml.cs,DrawBranches,The following statement contains a magic number: if (LeftChild != null) {  	#region Line  	_linePath = new Line// Create a new Line  	 {  		X1 = _currentNodeXaxis + (Radius / 2)'  		// x position  		Y1 = _currentNodeYaxis + Radius'  		// y position  		X2 = LeftChild._currentNodeXaxis + (Radius / 2)'  		// destination x value  		Y2 = LeftChild._currentNodeYaxis'  		// destination y value  		Stroke = Brushes.Black'  		// Stroke colour  		StrokeThickness = 5  	// Stroke thickness (0 = invisible)  	};  	Panel.SetZIndex (_linePath' 90);  	// Set draw position on top of everything but below the Node  	// Create the Line Animations  	lineAnimationX = new DoubleAnimation (_linePath.X1' _linePath.X2' new Duration (duration));  	lineAnimationY = new DoubleAnimation (_linePath.Y1' _linePath.Y2' new Duration (duration));  	// Set Target Properties for the animations  	Storyboard.SetTarget (lineAnimationX' _linePath);  	Storyboard.SetTargetName (lineAnimationX' _linePath.Name);  	Storyboard.SetTargetProperty (lineAnimationX' new PropertyPath (Line.X2Property));  	Storyboard.SetTarget (lineAnimationY' _linePath);  	Storyboard.SetTargetName (lineAnimationY' _linePath.Name);  	Storyboard.SetTargetProperty (lineAnimationY' new PropertyPath (Line.Y2Property));  	#endregion  	// add the line to the Grid(or other controls) and begin animations  	container.Children.Add (_linePath);  	// Add the animations to the storyboard  	storyboard.Children.Add (lineAnimationX);  	storyboard.Children.Add (lineAnimationY);  	// begin storyboard animations  	storyboard.Begin ();  	LeftChild.DrawBranches (container' duration);  }  
Magic Number,VLAControlLib,Node,C:\repos\PureIso_VisualLearningAssistant\Frameworks\VLAControlLib\Node.xaml.cs,DrawBranches,The following statement contains a magic number: if (LeftChild != null) {  	#region Line  	_linePath = new Line// Create a new Line  	 {  		X1 = _currentNodeXaxis + (Radius / 2)'  		// x position  		Y1 = _currentNodeYaxis + Radius'  		// y position  		X2 = LeftChild._currentNodeXaxis + (Radius / 2)'  		// destination x value  		Y2 = LeftChild._currentNodeYaxis'  		// destination y value  		Stroke = Brushes.Black'  		// Stroke colour  		StrokeThickness = 5  	// Stroke thickness (0 = invisible)  	};  	Panel.SetZIndex (_linePath' 90);  	// Set draw position on top of everything but below the Node  	// Create the Line Animations  	lineAnimationX = new DoubleAnimation (_linePath.X1' _linePath.X2' new Duration (duration));  	lineAnimationY = new DoubleAnimation (_linePath.Y1' _linePath.Y2' new Duration (duration));  	// Set Target Properties for the animations  	Storyboard.SetTarget (lineAnimationX' _linePath);  	Storyboard.SetTargetName (lineAnimationX' _linePath.Name);  	Storyboard.SetTargetProperty (lineAnimationX' new PropertyPath (Line.X2Property));  	Storyboard.SetTarget (lineAnimationY' _linePath);  	Storyboard.SetTargetName (lineAnimationY' _linePath.Name);  	Storyboard.SetTargetProperty (lineAnimationY' new PropertyPath (Line.Y2Property));  	#endregion  	// add the line to the Grid(or other controls) and begin animations  	container.Children.Add (_linePath);  	// Add the animations to the storyboard  	storyboard.Children.Add (lineAnimationX);  	storyboard.Children.Add (lineAnimationY);  	// begin storyboard animations  	storyboard.Begin ();  	LeftChild.DrawBranches (container' duration);  }  
Magic Number,VLAControlLib,Node,C:\repos\PureIso_VisualLearningAssistant\Frameworks\VLAControlLib\Node.xaml.cs,DrawBranches,The following statement contains a magic number: if (LeftChild != null) {  	#region Line  	_linePath = new Line// Create a new Line  	 {  		X1 = _currentNodeXaxis + (Radius / 2)'  		// x position  		Y1 = _currentNodeYaxis + Radius'  		// y position  		X2 = LeftChild._currentNodeXaxis + (Radius / 2)'  		// destination x value  		Y2 = LeftChild._currentNodeYaxis'  		// destination y value  		Stroke = Brushes.Black'  		// Stroke colour  		StrokeThickness = 5  	// Stroke thickness (0 = invisible)  	};  	Panel.SetZIndex (_linePath' 90);  	// Set draw position on top of everything but below the Node  	// Create the Line Animations  	lineAnimationX = new DoubleAnimation (_linePath.X1' _linePath.X2' new Duration (duration));  	lineAnimationY = new DoubleAnimation (_linePath.Y1' _linePath.Y2' new Duration (duration));  	// Set Target Properties for the animations  	Storyboard.SetTarget (lineAnimationX' _linePath);  	Storyboard.SetTargetName (lineAnimationX' _linePath.Name);  	Storyboard.SetTargetProperty (lineAnimationX' new PropertyPath (Line.X2Property));  	Storyboard.SetTarget (lineAnimationY' _linePath);  	Storyboard.SetTargetName (lineAnimationY' _linePath.Name);  	Storyboard.SetTargetProperty (lineAnimationY' new PropertyPath (Line.Y2Property));  	#endregion  	// add the line to the Grid(or other controls) and begin animations  	container.Children.Add (_linePath);  	// Add the animations to the storyboard  	storyboard.Children.Add (lineAnimationX);  	storyboard.Children.Add (lineAnimationY);  	// begin storyboard animations  	storyboard.Begin ();  	LeftChild.DrawBranches (container' duration);  }  
Magic Number,VLAControlLib,Node,C:\repos\PureIso_VisualLearningAssistant\Frameworks\VLAControlLib\Node.xaml.cs,DrawBranches,The following statement contains a magic number: _linePath = new Line// Create a new Line   {  	X1 = _currentNodeXaxis + (Radius / 2)'  	// x position  	Y1 = _currentNodeYaxis + Radius'  	// y position  	X2 = LeftChild._currentNodeXaxis + (Radius / 2)'  	// destination x value  	Y2 = LeftChild._currentNodeYaxis'  	// destination y value  	Stroke = Brushes.Black'  	// Stroke colour  	StrokeThickness = 5  // Stroke thickness (0 = invisible)  };  
Magic Number,VLAControlLib,Node,C:\repos\PureIso_VisualLearningAssistant\Frameworks\VLAControlLib\Node.xaml.cs,DrawBranches,The following statement contains a magic number: _linePath = new Line// Create a new Line   {  	X1 = _currentNodeXaxis + (Radius / 2)'  	// x position  	Y1 = _currentNodeYaxis + Radius'  	// y position  	X2 = LeftChild._currentNodeXaxis + (Radius / 2)'  	// destination x value  	Y2 = LeftChild._currentNodeYaxis'  	// destination y value  	Stroke = Brushes.Black'  	// Stroke colour  	StrokeThickness = 5  // Stroke thickness (0 = invisible)  };  
Magic Number,VLAControlLib,Node,C:\repos\PureIso_VisualLearningAssistant\Frameworks\VLAControlLib\Node.xaml.cs,DrawBranches,The following statement contains a magic number: _linePath = new Line// Create a new Line   {  	X1 = _currentNodeXaxis + (Radius / 2)'  	// x position  	Y1 = _currentNodeYaxis + Radius'  	// y position  	X2 = LeftChild._currentNodeXaxis + (Radius / 2)'  	// destination x value  	Y2 = LeftChild._currentNodeYaxis'  	// destination y value  	Stroke = Brushes.Black'  	// Stroke colour  	StrokeThickness = 5  // Stroke thickness (0 = invisible)  };  
Magic Number,VLAControlLib,Node,C:\repos\PureIso_VisualLearningAssistant\Frameworks\VLAControlLib\Node.xaml.cs,DrawBranches,The following statement contains a magic number: Panel.SetZIndex (_linePath' 90);  
Magic Number,VLAControlLib,Node,C:\repos\PureIso_VisualLearningAssistant\Frameworks\VLAControlLib\Node.xaml.cs,DrawBranches,The following statement contains a magic number: _linePath = new Line// Create a new Line   {  	X1 = _currentNodeXaxis + (Radius / 2)'  	// x position  	Y1 = _currentNodeYaxis + Radius'  	// y position  	X2 = RightChild._currentNodeXaxis + (Radius / 2)'  	// destination x value  	Y2 = RightChild._currentNodeYaxis'  	// destination y value  	Stroke = Brushes.Black'  	// Stroke colour  	StrokeThickness = 5  // Stroke thickness (0 = invisible)  };  
Magic Number,VLAControlLib,Node,C:\repos\PureIso_VisualLearningAssistant\Frameworks\VLAControlLib\Node.xaml.cs,DrawBranches,The following statement contains a magic number: _linePath = new Line// Create a new Line   {  	X1 = _currentNodeXaxis + (Radius / 2)'  	// x position  	Y1 = _currentNodeYaxis + Radius'  	// y position  	X2 = RightChild._currentNodeXaxis + (Radius / 2)'  	// destination x value  	Y2 = RightChild._currentNodeYaxis'  	// destination y value  	Stroke = Brushes.Black'  	// Stroke colour  	StrokeThickness = 5  // Stroke thickness (0 = invisible)  };  
Magic Number,VLAControlLib,Node,C:\repos\PureIso_VisualLearningAssistant\Frameworks\VLAControlLib\Node.xaml.cs,DrawBranches,The following statement contains a magic number: _linePath = new Line// Create a new Line   {  	X1 = _currentNodeXaxis + (Radius / 2)'  	// x position  	Y1 = _currentNodeYaxis + Radius'  	// y position  	X2 = RightChild._currentNodeXaxis + (Radius / 2)'  	// destination x value  	Y2 = RightChild._currentNodeYaxis'  	// destination y value  	Stroke = Brushes.Black'  	// Stroke colour  	StrokeThickness = 5  // Stroke thickness (0 = invisible)  };  
Magic Number,VLAControlLib,Node,C:\repos\PureIso_VisualLearningAssistant\Frameworks\VLAControlLib\Node.xaml.cs,DrawBranches,The following statement contains a magic number: Panel.SetZIndex (_linePath' 90);  
Duplicate Code,VLAControlLib,Node,C:\repos\PureIso_VisualLearningAssistant\Frameworks\VLAControlLib\Node.xaml.cs,DrawBranches,The method contains a code clone-set at the following line numbers (starting from the method definition): ((18' 43)' (58' 83))
