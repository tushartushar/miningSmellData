Implementation smell,Namespace,Class,File,Method,Description
Magic Number,VLAArrays.Core,Array,C:\repos\PureIso_VisualLearningAssistant\Plug-ins\VLAArrays\Core\Array.cs,Add,The following statement contains a magic number: foreach (string theString in values) {  	SetText (theString);  	if (theString.Length > length) {  		length = theString.Length;  		_longestIndex = index;  		longestString = theString;  	}  	index++;  	if (theString == values [0])  		continue;  	_initPosition += 50;  	_current.Next = new Node (theString' _initPosition' ref _longestWidth);  	_current = _current.Next;  }  
Magic Number,VLAArrays.Core,Array,C:\repos\PureIso_VisualLearningAssistant\Plug-ins\VLAArrays\Core\Array.cs,Add,The following statement contains a magic number: _initPosition += 50;  
Magic Number,VLAArrays.Core,Node,C:\repos\PureIso_VisualLearningAssistant\Plug-ins\VLAArrays\Core\Node.cs,Node,The following statement contains a magic number: foreach (char member in value) {  	_members.Add (member);  	_positionY.Add (myPositionY);  	_positionX.Add (myPositionX);  	myPositionX += 43;  	if (myPositionX > longestWidth)  		longestWidth = myPositionX;  }  
Magic Number,VLAArrays.Core,Node,C:\repos\PureIso_VisualLearningAssistant\Plug-ins\VLAArrays\Core\Node.cs,Node,The following statement contains a magic number: myPositionX += 43;  
Magic Number,VLAArrays.Core,Node,C:\repos\PureIso_VisualLearningAssistant\Plug-ins\VLAArrays\Core\Node.cs,Animate,The following statement contains a magic number: for (int index = 0; index < _members.Count (); index++) {  	ArrayNode node = new ArrayNode {  		TextBlock =  {  			Text = _members [index].ToString ()  		}'  		VerticalAlignment = VerticalAlignment.Top'  		HorizontalAlignment = HorizontalAlignment.Left'  	};  	Canvas.SetLeft (node' _positionX [index] + 6);  	// Set x position  	Canvas.SetTop (node' 0);  	// Set y position  	canvas.Children.Add (node);  	double y1 = Canvas.GetTop (node);  	TranslateTransform translateTrasform = new TranslateTransform ();  	node.RenderTransform = translateTrasform;  	DoubleAnimation animationY = new DoubleAnimation (y1' _positionY [index] - y1' _duration);  	animationY.Completed += (s' e) =>  {  		_duration += TimeSpan.FromSeconds (1);  		if ((index) == _members.Count ())  			if (Next != null)  				Next.Animate (canvas);  	};  	//Translate  	translateTrasform.BeginAnimation (TranslateTransform.YProperty' animationY);  }  
Magic Number,VLAArrays.Core,Node,C:\repos\PureIso_VisualLearningAssistant\Plug-ins\VLAArrays\Core\Node.cs,Animate,The following statement contains a magic number: Canvas.SetLeft (node' _positionX [index] + 6);  
Magic Number,VLAArrays.Core,Node,C:\repos\PureIso_VisualLearningAssistant\Plug-ins\VLAArrays\Core\Node.cs,AnimateMemory,The following statement contains a magic number: Canvas.SetLeft (node' _positionX [0] - 68);  
Magic Number,VLAArrays.Core,Node,C:\repos\PureIso_VisualLearningAssistant\Plug-ins\VLAArrays\Core\Node.cs,AnimateMemory,The following statement contains a magic number: for (int index = 0; index < _members.Count (); index++) {  	EmptyMemoryNode emptyMemoryNode = new EmptyMemoryNode {  		VerticalAlignment = VerticalAlignment.Top'  		HorizontalAlignment = HorizontalAlignment.Left'  	};  	Canvas.SetLeft (emptyMemoryNode' _positionX [index] + 5);  	// Set x position  	Canvas.SetTop (emptyMemoryNode' _positionY [index]);  	// Set y position  	canvas.Children.Add (emptyMemoryNode);  	if (startIndex == longestIndex) {  		ReverseIndexNode reverseIndexNode = new ReverseIndexNode {  			VerticalAlignment = VerticalAlignment.Top'  			HorizontalAlignment = HorizontalAlignment.Left'  			LocationTextBlock =  {  				Text = index.ToString ()  			}'  		};  		Canvas.SetLeft (reverseIndexNode' _positionX [index]);  		// Set x position  		Canvas.SetTop (reverseIndexNode' 40);  		// Set y position  		canvas.Children.Add (reverseIndexNode);  	}  }  
Magic Number,VLAArrays.Core,Node,C:\repos\PureIso_VisualLearningAssistant\Plug-ins\VLAArrays\Core\Node.cs,AnimateMemory,The following statement contains a magic number: for (int index = 0; index < _members.Count (); index++) {  	EmptyMemoryNode emptyMemoryNode = new EmptyMemoryNode {  		VerticalAlignment = VerticalAlignment.Top'  		HorizontalAlignment = HorizontalAlignment.Left'  	};  	Canvas.SetLeft (emptyMemoryNode' _positionX [index] + 5);  	// Set x position  	Canvas.SetTop (emptyMemoryNode' _positionY [index]);  	// Set y position  	canvas.Children.Add (emptyMemoryNode);  	if (startIndex == longestIndex) {  		ReverseIndexNode reverseIndexNode = new ReverseIndexNode {  			VerticalAlignment = VerticalAlignment.Top'  			HorizontalAlignment = HorizontalAlignment.Left'  			LocationTextBlock =  {  				Text = index.ToString ()  			}'  		};  		Canvas.SetLeft (reverseIndexNode' _positionX [index]);  		// Set x position  		Canvas.SetTop (reverseIndexNode' 40);  		// Set y position  		canvas.Children.Add (reverseIndexNode);  	}  }  
Magic Number,VLAArrays.Core,Node,C:\repos\PureIso_VisualLearningAssistant\Plug-ins\VLAArrays\Core\Node.cs,AnimateMemory,The following statement contains a magic number: Canvas.SetLeft (emptyMemoryNode' _positionX [index] + 5);  
Magic Number,VLAArrays.Core,Node,C:\repos\PureIso_VisualLearningAssistant\Plug-ins\VLAArrays\Core\Node.cs,AnimateMemory,The following statement contains a magic number: if (startIndex == longestIndex) {  	ReverseIndexNode reverseIndexNode = new ReverseIndexNode {  		VerticalAlignment = VerticalAlignment.Top'  		HorizontalAlignment = HorizontalAlignment.Left'  		LocationTextBlock =  {  			Text = index.ToString ()  		}'  	};  	Canvas.SetLeft (reverseIndexNode' _positionX [index]);  	// Set x position  	Canvas.SetTop (reverseIndexNode' 40);  	// Set y position  	canvas.Children.Add (reverseIndexNode);  }  
Magic Number,VLAArrays.Core,Node,C:\repos\PureIso_VisualLearningAssistant\Plug-ins\VLAArrays\Core\Node.cs,AnimateMemory,The following statement contains a magic number: Canvas.SetTop (reverseIndexNode' 40);  
Magic Number,VLAArrays.Core,Node,C:\repos\PureIso_VisualLearningAssistant\Plug-ins\VLAArrays\Core\Node.cs,AnimateMemory,The following statement contains a magic number: if (Next != null)  	Next.AnimateMemory (canvas' startIndex' longestIndex' initPosition - 55);  
Magic Number,VLAArrays.Core,Node,C:\repos\PureIso_VisualLearningAssistant\Plug-ins\VLAArrays\Core\Node.cs,AnimateMemory,The following statement contains a magic number: Next.AnimateMemory (canvas' startIndex' longestIndex' initPosition - 55);  
