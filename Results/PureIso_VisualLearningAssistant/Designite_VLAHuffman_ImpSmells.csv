Implementation smell,Namespace,Class,File,Method,Description
Magic Number,VLAHuffman,AnimationDisplay,C:\repos\PureIso_VisualLearningAssistant\Plug-ins\VLAHuffman\AnimationDisplay.xaml.cs,BuildHuffmanTree_Click,The following statement contains a magic number: _ht.DrawTree (MainCanvas' 5' 5' 1);  
Magic Number,VLAHuffman,AnimationDisplay,C:\repos\PureIso_VisualLearningAssistant\Plug-ins\VLAHuffman\AnimationDisplay.xaml.cs,BuildHuffmanTree_Click,The following statement contains a magic number: _ht.DrawTree (MainCanvas' 5' 5' 1);  
Magic Number,VLAHuffman.Logic,HuffmanNode,C:\repos\PureIso_VisualLearningAssistant\Plug-ins\VLAHuffman\Logic\HuffmanNode.cs,PositionNode,The following statement contains a magic number: _currentNodeYaxis = yAxis + Radius / 2;  
Magic Number,VLAHuffman.Logic,HuffmanNode,C:\repos\PureIso_VisualLearningAssistant\Plug-ins\VLAHuffman\Logic\HuffmanNode.cs,PositionNode,The following statement contains a magic number: if (LeftChild != null) {  	if (RightChild != null)  		//If we have both children centre the node  		_currentNodeXaxis = (LeftChild._currentNodeXaxis + RightChild._currentNodeXaxis) / 2;  	else  		//only left child - centre it  		_currentNodeXaxis = LeftChild._currentNodeXaxis + 10;  }  else if (RightChild != null) {  	// No left child. centre over right child.  	_currentNodeXaxis = RightChild._currentNodeXaxis - 10;  }  else {  	// No children. We're on our own.  	_currentNodeXaxis = xAxis + Radius / 2;  	xAxis += Radius;  }  
Magic Number,VLAHuffman.Logic,HuffmanNode,C:\repos\PureIso_VisualLearningAssistant\Plug-ins\VLAHuffman\Logic\HuffmanNode.cs,PositionNode,The following statement contains a magic number: if (LeftChild != null) {  	if (RightChild != null)  		//If we have both children centre the node  		_currentNodeXaxis = (LeftChild._currentNodeXaxis + RightChild._currentNodeXaxis) / 2;  	else  		//only left child - centre it  		_currentNodeXaxis = LeftChild._currentNodeXaxis + 10;  }  else if (RightChild != null) {  	// No left child. centre over right child.  	_currentNodeXaxis = RightChild._currentNodeXaxis - 10;  }  else {  	// No children. We're on our own.  	_currentNodeXaxis = xAxis + Radius / 2;  	xAxis += Radius;  }  
Magic Number,VLAHuffman.Logic,HuffmanNode,C:\repos\PureIso_VisualLearningAssistant\Plug-ins\VLAHuffman\Logic\HuffmanNode.cs,PositionNode,The following statement contains a magic number: if (LeftChild != null) {  	if (RightChild != null)  		//If we have both children centre the node  		_currentNodeXaxis = (LeftChild._currentNodeXaxis + RightChild._currentNodeXaxis) / 2;  	else  		//only left child - centre it  		_currentNodeXaxis = LeftChild._currentNodeXaxis + 10;  }  else if (RightChild != null) {  	// No left child. centre over right child.  	_currentNodeXaxis = RightChild._currentNodeXaxis - 10;  }  else {  	// No children. We're on our own.  	_currentNodeXaxis = xAxis + Radius / 2;  	xAxis += Radius;  }  
Magic Number,VLAHuffman.Logic,HuffmanNode,C:\repos\PureIso_VisualLearningAssistant\Plug-ins\VLAHuffman\Logic\HuffmanNode.cs,PositionNode,The following statement contains a magic number: if (LeftChild != null) {  	if (RightChild != null)  		//If we have both children centre the node  		_currentNodeXaxis = (LeftChild._currentNodeXaxis + RightChild._currentNodeXaxis) / 2;  	else  		//only left child - centre it  		_currentNodeXaxis = LeftChild._currentNodeXaxis + 10;  }  else if (RightChild != null) {  	// No left child. centre over right child.  	_currentNodeXaxis = RightChild._currentNodeXaxis - 10;  }  else {  	// No children. We're on our own.  	_currentNodeXaxis = xAxis + Radius / 2;  	xAxis += Radius;  }  
Magic Number,VLAHuffman.Logic,HuffmanNode,C:\repos\PureIso_VisualLearningAssistant\Plug-ins\VLAHuffman\Logic\HuffmanNode.cs,PositionNode,The following statement contains a magic number: if (RightChild != null)  	//If we have both children centre the node  	_currentNodeXaxis = (LeftChild._currentNodeXaxis + RightChild._currentNodeXaxis) / 2;  else  	//only left child - centre it  	_currentNodeXaxis = LeftChild._currentNodeXaxis + 10;  
Magic Number,VLAHuffman.Logic,HuffmanNode,C:\repos\PureIso_VisualLearningAssistant\Plug-ins\VLAHuffman\Logic\HuffmanNode.cs,PositionNode,The following statement contains a magic number: if (RightChild != null)  	//If we have both children centre the node  	_currentNodeXaxis = (LeftChild._currentNodeXaxis + RightChild._currentNodeXaxis) / 2;  else  	//only left child - centre it  	_currentNodeXaxis = LeftChild._currentNodeXaxis + 10;  
Magic Number,VLAHuffman.Logic,HuffmanNode,C:\repos\PureIso_VisualLearningAssistant\Plug-ins\VLAHuffman\Logic\HuffmanNode.cs,PositionNode,The following statement contains a magic number: _currentNodeXaxis = (LeftChild._currentNodeXaxis + RightChild._currentNodeXaxis) / 2;  
Magic Number,VLAHuffman.Logic,HuffmanNode,C:\repos\PureIso_VisualLearningAssistant\Plug-ins\VLAHuffman\Logic\HuffmanNode.cs,PositionNode,The following statement contains a magic number: _currentNodeXaxis = LeftChild._currentNodeXaxis + 10;  
Magic Number,VLAHuffman.Logic,HuffmanNode,C:\repos\PureIso_VisualLearningAssistant\Plug-ins\VLAHuffman\Logic\HuffmanNode.cs,PositionNode,The following statement contains a magic number: if (RightChild != null) {  	// No left child. centre over right child.  	_currentNodeXaxis = RightChild._currentNodeXaxis - 10;  }  else {  	// No children. We're on our own.  	_currentNodeXaxis = xAxis + Radius / 2;  	xAxis += Radius;  }  
Magic Number,VLAHuffman.Logic,HuffmanNode,C:\repos\PureIso_VisualLearningAssistant\Plug-ins\VLAHuffman\Logic\HuffmanNode.cs,PositionNode,The following statement contains a magic number: if (RightChild != null) {  	// No left child. centre over right child.  	_currentNodeXaxis = RightChild._currentNodeXaxis - 10;  }  else {  	// No children. We're on our own.  	_currentNodeXaxis = xAxis + Radius / 2;  	xAxis += Radius;  }  
Magic Number,VLAHuffman.Logic,HuffmanNode,C:\repos\PureIso_VisualLearningAssistant\Plug-ins\VLAHuffman\Logic\HuffmanNode.cs,PositionNode,The following statement contains a magic number: _currentNodeXaxis = RightChild._currentNodeXaxis - 10;  
Magic Number,VLAHuffman.Logic,HuffmanNode,C:\repos\PureIso_VisualLearningAssistant\Plug-ins\VLAHuffman\Logic\HuffmanNode.cs,PositionNode,The following statement contains a magic number: _currentNodeXaxis = xAxis + Radius / 2;  
Magic Number,VLAHuffman.Logic,HuffmanNode,C:\repos\PureIso_VisualLearningAssistant\Plug-ins\VLAHuffman\Logic\HuffmanNode.cs,DrawBranches,The following statement contains a magic number: if (LeftChild != null) {  	//0  	#region Line  	linePath = new Line// Create a new Line  	 {  		X1 = _currentNodeXaxis + (Radius / 2)'  		// x position  		Y1 = _currentNodeYaxis + Radius'  		// y position  		X2 = LeftChild._currentNodeXaxis + (Radius / 2)'  		// destination x value  		Y2 = LeftChild._currentNodeYaxis'  		// destination y value  		Stroke = new SolidColorBrush (Colors.Black)'  		// Stroke colour  		StrokeThickness = thickness  	// Stroke thickness (0 = invisible)  	};  	#endregion  	//================  	int cordx = ((_currentNodeXaxis + LeftChild._currentNodeXaxis) / 2) - 5;  	int cordy = ((_currentNodeYaxis + LeftChild._currentNodeYaxis) / 2);  	TextBlock textBlock = new TextBlock {  		Text = 0.ToString ()'  		Foreground = new SolidColorBrush (Colors.Black)'  		Margin = new Thickness (cordx' cordy' 0' 0)  	};  	grid.Children.Add (textBlock);  	//================  	// add the line to the Grid(or other controls) and begin animations  	grid.Children.Add (linePath);  	// begin storyboard animations  	storyboard.Begin ();  	LeftChild.DrawBranches (grid' thickness);  }  
Magic Number,VLAHuffman.Logic,HuffmanNode,C:\repos\PureIso_VisualLearningAssistant\Plug-ins\VLAHuffman\Logic\HuffmanNode.cs,DrawBranches,The following statement contains a magic number: if (LeftChild != null) {  	//0  	#region Line  	linePath = new Line// Create a new Line  	 {  		X1 = _currentNodeXaxis + (Radius / 2)'  		// x position  		Y1 = _currentNodeYaxis + Radius'  		// y position  		X2 = LeftChild._currentNodeXaxis + (Radius / 2)'  		// destination x value  		Y2 = LeftChild._currentNodeYaxis'  		// destination y value  		Stroke = new SolidColorBrush (Colors.Black)'  		// Stroke colour  		StrokeThickness = thickness  	// Stroke thickness (0 = invisible)  	};  	#endregion  	//================  	int cordx = ((_currentNodeXaxis + LeftChild._currentNodeXaxis) / 2) - 5;  	int cordy = ((_currentNodeYaxis + LeftChild._currentNodeYaxis) / 2);  	TextBlock textBlock = new TextBlock {  		Text = 0.ToString ()'  		Foreground = new SolidColorBrush (Colors.Black)'  		Margin = new Thickness (cordx' cordy' 0' 0)  	};  	grid.Children.Add (textBlock);  	//================  	// add the line to the Grid(or other controls) and begin animations  	grid.Children.Add (linePath);  	// begin storyboard animations  	storyboard.Begin ();  	LeftChild.DrawBranches (grid' thickness);  }  
Magic Number,VLAHuffman.Logic,HuffmanNode,C:\repos\PureIso_VisualLearningAssistant\Plug-ins\VLAHuffman\Logic\HuffmanNode.cs,DrawBranches,The following statement contains a magic number: if (LeftChild != null) {  	//0  	#region Line  	linePath = new Line// Create a new Line  	 {  		X1 = _currentNodeXaxis + (Radius / 2)'  		// x position  		Y1 = _currentNodeYaxis + Radius'  		// y position  		X2 = LeftChild._currentNodeXaxis + (Radius / 2)'  		// destination x value  		Y2 = LeftChild._currentNodeYaxis'  		// destination y value  		Stroke = new SolidColorBrush (Colors.Black)'  		// Stroke colour  		StrokeThickness = thickness  	// Stroke thickness (0 = invisible)  	};  	#endregion  	//================  	int cordx = ((_currentNodeXaxis + LeftChild._currentNodeXaxis) / 2) - 5;  	int cordy = ((_currentNodeYaxis + LeftChild._currentNodeYaxis) / 2);  	TextBlock textBlock = new TextBlock {  		Text = 0.ToString ()'  		Foreground = new SolidColorBrush (Colors.Black)'  		Margin = new Thickness (cordx' cordy' 0' 0)  	};  	grid.Children.Add (textBlock);  	//================  	// add the line to the Grid(or other controls) and begin animations  	grid.Children.Add (linePath);  	// begin storyboard animations  	storyboard.Begin ();  	LeftChild.DrawBranches (grid' thickness);  }  
Magic Number,VLAHuffman.Logic,HuffmanNode,C:\repos\PureIso_VisualLearningAssistant\Plug-ins\VLAHuffman\Logic\HuffmanNode.cs,DrawBranches,The following statement contains a magic number: if (LeftChild != null) {  	//0  	#region Line  	linePath = new Line// Create a new Line  	 {  		X1 = _currentNodeXaxis + (Radius / 2)'  		// x position  		Y1 = _currentNodeYaxis + Radius'  		// y position  		X2 = LeftChild._currentNodeXaxis + (Radius / 2)'  		// destination x value  		Y2 = LeftChild._currentNodeYaxis'  		// destination y value  		Stroke = new SolidColorBrush (Colors.Black)'  		// Stroke colour  		StrokeThickness = thickness  	// Stroke thickness (0 = invisible)  	};  	#endregion  	//================  	int cordx = ((_currentNodeXaxis + LeftChild._currentNodeXaxis) / 2) - 5;  	int cordy = ((_currentNodeYaxis + LeftChild._currentNodeYaxis) / 2);  	TextBlock textBlock = new TextBlock {  		Text = 0.ToString ()'  		Foreground = new SolidColorBrush (Colors.Black)'  		Margin = new Thickness (cordx' cordy' 0' 0)  	};  	grid.Children.Add (textBlock);  	//================  	// add the line to the Grid(or other controls) and begin animations  	grid.Children.Add (linePath);  	// begin storyboard animations  	storyboard.Begin ();  	LeftChild.DrawBranches (grid' thickness);  }  
Magic Number,VLAHuffman.Logic,HuffmanNode,C:\repos\PureIso_VisualLearningAssistant\Plug-ins\VLAHuffman\Logic\HuffmanNode.cs,DrawBranches,The following statement contains a magic number: if (LeftChild != null) {  	//0  	#region Line  	linePath = new Line// Create a new Line  	 {  		X1 = _currentNodeXaxis + (Radius / 2)'  		// x position  		Y1 = _currentNodeYaxis + Radius'  		// y position  		X2 = LeftChild._currentNodeXaxis + (Radius / 2)'  		// destination x value  		Y2 = LeftChild._currentNodeYaxis'  		// destination y value  		Stroke = new SolidColorBrush (Colors.Black)'  		// Stroke colour  		StrokeThickness = thickness  	// Stroke thickness (0 = invisible)  	};  	#endregion  	//================  	int cordx = ((_currentNodeXaxis + LeftChild._currentNodeXaxis) / 2) - 5;  	int cordy = ((_currentNodeYaxis + LeftChild._currentNodeYaxis) / 2);  	TextBlock textBlock = new TextBlock {  		Text = 0.ToString ()'  		Foreground = new SolidColorBrush (Colors.Black)'  		Margin = new Thickness (cordx' cordy' 0' 0)  	};  	grid.Children.Add (textBlock);  	//================  	// add the line to the Grid(or other controls) and begin animations  	grid.Children.Add (linePath);  	// begin storyboard animations  	storyboard.Begin ();  	LeftChild.DrawBranches (grid' thickness);  }  
Magic Number,VLAHuffman.Logic,HuffmanNode,C:\repos\PureIso_VisualLearningAssistant\Plug-ins\VLAHuffman\Logic\HuffmanNode.cs,DrawBranches,The following statement contains a magic number: linePath = new Line// Create a new Line   {  	X1 = _currentNodeXaxis + (Radius / 2)'  	// x position  	Y1 = _currentNodeYaxis + Radius'  	// y position  	X2 = LeftChild._currentNodeXaxis + (Radius / 2)'  	// destination x value  	Y2 = LeftChild._currentNodeYaxis'  	// destination y value  	Stroke = new SolidColorBrush (Colors.Black)'  	// Stroke colour  	StrokeThickness = thickness  // Stroke thickness (0 = invisible)  };  
Magic Number,VLAHuffman.Logic,HuffmanNode,C:\repos\PureIso_VisualLearningAssistant\Plug-ins\VLAHuffman\Logic\HuffmanNode.cs,DrawBranches,The following statement contains a magic number: linePath = new Line// Create a new Line   {  	X1 = _currentNodeXaxis + (Radius / 2)'  	// x position  	Y1 = _currentNodeYaxis + Radius'  	// y position  	X2 = LeftChild._currentNodeXaxis + (Radius / 2)'  	// destination x value  	Y2 = LeftChild._currentNodeYaxis'  	// destination y value  	Stroke = new SolidColorBrush (Colors.Black)'  	// Stroke colour  	StrokeThickness = thickness  // Stroke thickness (0 = invisible)  };  
Magic Number,VLAHuffman.Logic,HuffmanNode,C:\repos\PureIso_VisualLearningAssistant\Plug-ins\VLAHuffman\Logic\HuffmanNode.cs,DrawBranches,The following statement contains a magic number: linePath = new Line// Create a new Line   {  	X1 = _currentNodeXaxis + (Radius / 2)'  	// x position  	Y1 = _currentNodeYaxis + Radius'  	// y position  	X2 = RightChild._currentNodeXaxis + (Radius / 2)'  	// destination x value  	Y2 = RightChild._currentNodeYaxis'  	// destination y value  	Stroke = new SolidColorBrush (Colors.Black)'  	// Stroke colour  	StrokeThickness = thickness  // Stroke thickness (0 = invisible)  };  
Magic Number,VLAHuffman.Logic,HuffmanNode,C:\repos\PureIso_VisualLearningAssistant\Plug-ins\VLAHuffman\Logic\HuffmanNode.cs,DrawBranches,The following statement contains a magic number: linePath = new Line// Create a new Line   {  	X1 = _currentNodeXaxis + (Radius / 2)'  	// x position  	Y1 = _currentNodeYaxis + Radius'  	// y position  	X2 = RightChild._currentNodeXaxis + (Radius / 2)'  	// destination x value  	Y2 = RightChild._currentNodeYaxis'  	// destination y value  	Stroke = new SolidColorBrush (Colors.Black)'  	// Stroke colour  	StrokeThickness = thickness  // Stroke thickness (0 = invisible)  };  
Magic Number,VLAHuffman.Logic,HuffmanTree,C:\repos\PureIso_VisualLearningAssistant\Plug-ins\VLAHuffman\Logic\HuffmanTree.cs,Build,The following statement contains a magic number: while (_nodes.Count > 1) {  	List<HuffmanNode> orderedNodes = _nodes.OrderBy (node => node.Frequency).ToList ();  	if (orderedNodes.Count >= 2) {  		// Take first two items  		List<HuffmanNode> taken = orderedNodes.Take (2).ToList ();  		// Create a parent node by combining the frequencies  		HuffmanNode parent = new HuffmanNode {  			Symbol = '*''  			Frequency = taken [0].Frequency + taken [1].Frequency'  			LeftChild = taken [0]'  			RightChild = taken [1]  		};  		_nodes.Remove (taken [0]);  		_nodes.Remove (taken [1]);  		_nodes.Add (parent);  	}  	RootNode = _nodes.FirstOrDefault ();  }  
Magic Number,VLAHuffman.Logic,HuffmanTree,C:\repos\PureIso_VisualLearningAssistant\Plug-ins\VLAHuffman\Logic\HuffmanTree.cs,Build,The following statement contains a magic number: while (_nodes.Count > 1) {  	List<HuffmanNode> orderedNodes = _nodes.OrderBy (node => node.Frequency).ToList ();  	if (orderedNodes.Count >= 2) {  		// Take first two items  		List<HuffmanNode> taken = orderedNodes.Take (2).ToList ();  		// Create a parent node by combining the frequencies  		HuffmanNode parent = new HuffmanNode {  			Symbol = '*''  			Frequency = taken [0].Frequency + taken [1].Frequency'  			LeftChild = taken [0]'  			RightChild = taken [1]  		};  		_nodes.Remove (taken [0]);  		_nodes.Remove (taken [1]);  		_nodes.Add (parent);  	}  	RootNode = _nodes.FirstOrDefault ();  }  
Magic Number,VLAHuffman.Logic,HuffmanTree,C:\repos\PureIso_VisualLearningAssistant\Plug-ins\VLAHuffman\Logic\HuffmanTree.cs,Build,The following statement contains a magic number: if (orderedNodes.Count >= 2) {  	// Take first two items  	List<HuffmanNode> taken = orderedNodes.Take (2).ToList ();  	// Create a parent node by combining the frequencies  	HuffmanNode parent = new HuffmanNode {  		Symbol = '*''  		Frequency = taken [0].Frequency + taken [1].Frequency'  		LeftChild = taken [0]'  		RightChild = taken [1]  	};  	_nodes.Remove (taken [0]);  	_nodes.Remove (taken [1]);  	_nodes.Add (parent);  }  
Magic Number,VLAHuffman.Logic,HuffmanTree,C:\repos\PureIso_VisualLearningAssistant\Plug-ins\VLAHuffman\Logic\HuffmanTree.cs,Build,The following statement contains a magic number: if (orderedNodes.Count >= 2) {  	// Take first two items  	List<HuffmanNode> taken = orderedNodes.Take (2).ToList ();  	// Create a parent node by combining the frequencies  	HuffmanNode parent = new HuffmanNode {  		Symbol = '*''  		Frequency = taken [0].Frequency + taken [1].Frequency'  		LeftChild = taken [0]'  		RightChild = taken [1]  	};  	_nodes.Remove (taken [0]);  	_nodes.Remove (taken [1]);  	_nodes.Add (parent);  }  
