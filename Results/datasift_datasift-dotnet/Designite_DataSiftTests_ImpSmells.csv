Implementation smell,Namespace,Class,File,Method,Description
Long Method,DataSiftTests,MockRestAPIRequest,D:\research\architectureSmells\repos\datasift_datasift-dotnet\DataSiftTests\MockRestAPIRequest.cs,Request,The method has 396 lines of code.
Complex Method,DataSiftTests,MockRestAPIRequest,D:\research\architectureSmells\repos\datasift_datasift-dotnet\DataSiftTests\MockRestAPIRequest.cs,Request,Cyclomatic complexity of the method is 96
Long Statement,DataSiftTests.Account,Limit,D:\research\architectureSmells\repos\datasift_datasift-dotnet\DataSiftTests\Account\Limit.cs,Create_Null_IdentityId_Fails,The length of the statement  "            Client.Account.Identity.Limit.Create(null' VALID_SERVICE' totalAllowance: VALID_TOTAL_ALLOWANCE' analyzeQueries: VALID_ANALYZE_QUERIES); " is 136.
Long Statement,DataSiftTests.Account,Limit,D:\research\architectureSmells\repos\datasift_datasift-dotnet\DataSiftTests\Account\Limit.cs,Create_Empty_IdentityId_Fails,The length of the statement  "            Client.Account.Identity.Limit.Create(""' VALID_SERVICE' totalAllowance: VALID_TOTAL_ALLOWANCE' analyzeQueries: VALID_ANALYZE_QUERIES); " is 134.
Long Statement,DataSiftTests.Account,Limit,D:\research\architectureSmells\repos\datasift_datasift-dotnet\DataSiftTests\Account\Limit.cs,Create_Invalid_IdentityId_Fails,The length of the statement  "            Client.Account.Identity.Limit.Create("invalid ID"' VALID_SERVICE' totalAllowance: VALID_TOTAL_ALLOWANCE' analyzeQueries: VALID_ANALYZE_QUERIES); " is 144.
Long Statement,DataSiftTests.Account,Limit,D:\research\architectureSmells\repos\datasift_datasift-dotnet\DataSiftTests\Account\Limit.cs,Create_Null_Service_Fails,The length of the statement  "            Client.Account.Identity.Limit.Create(VALID_IDENTITY' null' totalAllowance: VALID_TOTAL_ALLOWANCE' analyzeQueries: VALID_ANALYZE_QUERIES); " is 137.
Long Statement,DataSiftTests.Account,Limit,D:\research\architectureSmells\repos\datasift_datasift-dotnet\DataSiftTests\Account\Limit.cs,Create_Empty_Service_Fails,The length of the statement  "            Client.Account.Identity.Limit.Create(VALID_IDENTITY' ""' totalAllowance: VALID_TOTAL_ALLOWANCE' analyzeQueries: VALID_ANALYZE_QUERIES); " is 135.
Long Statement,DataSiftTests.Account,Limit,D:\research\architectureSmells\repos\datasift_datasift-dotnet\DataSiftTests\Account\Limit.cs,Create_Negative_Allowance_Fails,The length of the statement  "            Client.Account.Identity.Limit.Create(VALID_IDENTITY' VALID_SERVICE' totalAllowance: -1' analyzeQueries: VALID_ANALYZE_QUERIES); " is 127.
Long Statement,DataSiftTests.Account,Limit,D:\research\architectureSmells\repos\datasift_datasift-dotnet\DataSiftTests\Account\Limit.cs,Create_Zero_Allowance_Fails,The length of the statement  "            Client.Account.Identity.Limit.Create(VALID_IDENTITY' VALID_SERVICE' totalAllowance: 0' analyzeQueries: VALID_ANALYZE_QUERIES); " is 126.
Long Statement,DataSiftTests.Account,Limit,D:\research\architectureSmells\repos\datasift_datasift-dotnet\DataSiftTests\Account\Limit.cs,Create_Negative_Analyze_Queries_Fails,The length of the statement  "            Client.Account.Identity.Limit.Create(VALID_IDENTITY' VALID_SERVICE' totalAllowance: VALID_TOTAL_ALLOWANCE' analyzeQueries: -1); " is 127.
Long Statement,DataSiftTests.Account,Limit,D:\research\architectureSmells\repos\datasift_datasift-dotnet\DataSiftTests\Account\Limit.cs,Create_Zero_Analyze_Queries_Fails,The length of the statement  "            Client.Account.Identity.Limit.Create(VALID_IDENTITY' VALID_SERVICE' totalAllowance: VALID_TOTAL_ALLOWANCE' analyzeQueries: 0); " is 126.
Long Statement,DataSiftTests.Account,Limit,D:\research\architectureSmells\repos\datasift_datasift-dotnet\DataSiftTests\Account\Limit.cs,Create_Null_Allowance_Succeeds,The length of the statement  "            var response = Client.Account.Identity.Limit.Create(VALID_IDENTITY' VALID_SERVICE' analyzeQueries: VALID_ANALYZE_QUERIES); " is 122.
Long Statement,DataSiftTests.Account,Limit,D:\research\architectureSmells\repos\datasift_datasift-dotnet\DataSiftTests\Account\Limit.cs,Create_Null_Analyze_Queries_Succeeds,The length of the statement  "            var response = Client.Account.Identity.Limit.Create(VALID_IDENTITY' VALID_SERVICE' totalAllowance: VALID_TOTAL_ALLOWANCE); " is 122.
Long Statement,DataSiftTests.Account,Limit,D:\research\architectureSmells\repos\datasift_datasift-dotnet\DataSiftTests\Account\Limit.cs,Create_Succeeds,The length of the statement  "            var response = Client.Account.Identity.Limit.Create(VALID_IDENTITY' VALID_SERVICE' totalAllowance: VALID_TOTAL_ALLOWANCE' analyzeQueries: VALID_ANALYZE_QUERIES); " is 161.
Long Statement,DataSiftTests.Account,Limit,D:\research\architectureSmells\repos\datasift_datasift-dotnet\DataSiftTests\Account\Limit.cs,Update_Negative_Analyze_Queries_Fails,The length of the statement  "            Client.Account.Identity.Limit.Update(VALID_IDENTITY' VALID_SERVICE' totalAllowance: VALID_TOTAL_ALLOWANCE' analyzeQueries: -1); " is 127.
Long Statement,DataSiftTests.Account,Limit,D:\research\architectureSmells\repos\datasift_datasift-dotnet\DataSiftTests\Account\Limit.cs,Update_Zero_Analyze_Queries_Fails,The length of the statement  "            Client.Account.Identity.Limit.Update(VALID_IDENTITY' VALID_SERVICE' totalAllowance: VALID_TOTAL_ALLOWANCE' analyzeQueries: 0); " is 126.
Long Statement,DataSiftTests.Account,Account,D:\research\architectureSmells\repos\datasift_datasift-dotnet\DataSiftTests\Account\Account.cs,Last_Months_Usage_Succeeds,The length of the statement  "            var firstDayOfThisMonth = new DateTimeOffset(DateTimeOffset.Now.Year' DateTimeOffset.Now.Month' 1' 0' 0' 0' TimeSpan.Zero); " is 123.
Long Statement,DataSiftTests,MockStreamConnection,D:\research\architectureSmells\repos\datasift_datasift-dotnet\DataSiftTests\MockStreamConnection.cs,timer_Elapsed,The length of the statement  "            dynamic fakeInteraction = new { data = new { interaction = new { content = "Test content"} }' hash = "b09z345fe2f1fed748c12268fd473662" }; " is 138.
Long Statement,DataSiftTests,Core,D:\research\architectureSmells\repos\datasift_datasift-dotnet\DataSiftTests\Core.cs,Pull_Correct_Args__JsonMetaFormat_Succeeds,The length of the statement  "            var response = Client.Pull("08b923395b6ce8bfa4d96f57jsonmeta"' size: 100000' cursor: "3b29a57fa62474d2c3cd4ca55510c4fe"); " is 121.
Long Statement,DataSiftTests,Core,D:\research\architectureSmells\repos\datasift_datasift-dotnet\DataSiftTests\Core.cs,Pull_Correct_Args__JsonArrayFormat_Succeeds,The length of the statement  "            var response = Client.Pull("08b923395b6ce8bfa4d96f5jsonarray"' size: 100000' cursor: "3b29a57fa62474d2c3cd4ca55510c4fe"); " is 121.
Long Statement,DataSiftTests,Core,D:\research\architectureSmells\repos\datasift_datasift-dotnet\DataSiftTests\Core.cs,Pull_Correct_Args__JsonNewlineFormat_Succeeds,The length of the statement  "            var response = Client.Pull("08b923395b6ce8bfa4d96jsonnewline"' size: 100000' cursor: "3b29a57fa62474d2c3cd4ca55510c4fe"); " is 121.
Long Statement,DataSiftTests,Historics,D:\research\architectureSmells\repos\datasift_datasift-dotnet\DataSiftTests\Historics.cs,Prepare_Correct_Args_Succeeds,The length of the statement  "            var response = Client.Historics.Prepare(VALID_STREAM_HASH' VALID_START' VALID_END' VALID_NAME' VALID_SOURCES' Sample.OneHundredPercent); " is 136.
Long Statement,DataSiftTests,TestBase,D:\research\architectureSmells\repos\datasift_datasift-dotnet\DataSiftTests\TestBase.cs,TestInitialize,The length of the statement  "            _client = new DataSift.DataSiftClient(Run.Default.username' Run.Default.apikey' requestCreator: GetRequestMock' connectionCreator: GetStreamConnectionMock' ingestRequestCreator: GetIngestRequestMock); " is 200.
Long Statement,DataSiftTests,Push,D:\research\architectureSmells\repos\datasift_datasift-dotnet\DataSiftTests\Push.cs,Create_Correct_Args_Succeeds,The length of the statement  "            var response = Client.Push.Create(VALID_NAME' VALID_TYPE' hash: VALID_STREAM_HASH' initialStatus: PushStatus.Active' start: DateTimeOffset.Now' end: DateTimeOffset.Now.AddHours(1)); " is 181.
Long Statement,DataSiftTests,HistoricsPreview,D:\research\architectureSmells\repos\datasift_datasift-dotnet\DataSiftTests\HistoricsPreview.cs,Create_Start_Too_Early_Fails,The length of the statement  "            Client.HistoricsPreview.Create(VALID_STREAM_HASH' VALID_SOURCES' DummyCreateParams' new DateTimeOffset(2009' 12' 31' 23' 59' 59' TimeSpan.Zero)); " is 145.
Long Statement,DataSiftTests,HistoricsPreview,D:\research\architectureSmells\repos\datasift_datasift-dotnet\DataSiftTests\HistoricsPreview.cs,Create_Start_After_End_Fails,The length of the statement  "            Client.HistoricsPreview.Create(VALID_STREAM_HASH' VALID_SOURCES' DummyCreateParams' VALID_START' DateTimeOffset.Now.AddDays(-3)); " is 129.
Long Statement,DataSiftTests,HistoricsPreview,D:\research\architectureSmells\repos\datasift_datasift-dotnet\DataSiftTests\HistoricsPreview.cs,Create_More_Than_Twenty_Params_Fails,The length of the statement  "                prms.Add(new HistoricsPreviewParameter() { Target = "interaction.author.link"' Analysis = "targetVol"' Argument = "hour" }); " is 124.
Long Statement,DataSiftTests,Source,D:\research\architectureSmells\repos\datasift_datasift-dotnet\DataSiftTests\Source.cs,Update_Correct_Args_Succeeds,The length of the statement  "            var response = Client.Source.Update("da4f8df71a0f43698acf9240b5ad668f"' "facebook_page"' "news_source"' DummyParameters' DummyResources' DummyAuth); " is 148.
Long Statement,DataSiftTests.Pylon,Pylon,D:\research\architectureSmells\repos\datasift_datasift-dotnet\DataSiftTests\Pylon\Pylon.cs,Analyze_With_Filter_Succeeds,The length of the statement  "            var response = Client.Pylon.Analyze(VALID_SERVICE' VALID_ID' DummyParameters' filter: "interaction.content contains 'apple'"); " is 126.
Long Statement,DataSiftTests.Pylon,Pylon,D:\research\architectureSmells\repos\datasift_datasift-dotnet\DataSiftTests\Pylon\Pylon.cs,Analyze_Too_Late_Start_Fails,The length of the statement  "            Client.Pylon.Analyze(VALID_SERVICE' VALID_ID' DummyParameters' start: DateTimeOffset.Now.AddDays(1)' end: DateTimeOffset.Now.AddDays(3)); " is 137.
Long Statement,DataSiftTests.Pylon,Pylon,D:\research\architectureSmells\repos\datasift_datasift-dotnet\DataSiftTests\Pylon\Pylon.cs,Analyze_End_Before_Start_Fails,The length of the statement  "            Client.Pylon.Analyze(VALID_SERVICE' VALID_ID' DummyParameters' start: VALID_START' end: DateTimeOffset.Now.AddDays(-31)); " is 121.
Long Statement,DataSiftTests.Pylon,Pylon,D:\research\architectureSmells\repos\datasift_datasift-dotnet\DataSiftTests\Pylon\Pylon.cs,Analyze_With_Null_End_Succeeds,The length of the statement  "            var response = Client.Pylon.Analyze(VALID_SERVICE' VALID_ID' DummyParameters' start: DateTimeOffset.Now.AddDays(-1)' end: null); " is 128.
Long Statement,DataSiftTests.Pylon,Pylon,D:\research\architectureSmells\repos\datasift_datasift-dotnet\DataSiftTests\Pylon\Pylon.cs,Analyze_With_Start_And_End_Succeeds,The length of the statement  "            var response = Client.Pylon.Analyze(VALID_SERVICE' VALID_ID' DummyParameters' start: DateTimeOffset.Now.AddDays(-1)' end: DateTimeOffset.Now); " is 142.
Long Statement,DataSiftTests.Pylon,Pylon,D:\research\architectureSmells\repos\datasift_datasift-dotnet\DataSiftTests\Pylon\Pylon.cs,Analyze_With_Null_Parameters_Fails,The length of the statement  "            Client.Pylon.Analyze(VALID_SERVICE' VALID_ID' parameters: null' start: DateTimeOffset.Now.AddDays(-1)' end: DateTimeOffset.Now); " is 128.
Magic Number,DataSiftTests.Account,Limit,D:\research\architectureSmells\repos\datasift_datasift-dotnet\DataSiftTests\Account\Limit.cs,Update_Null_Allowance_Succeeds,The following statement contains a magic number: var response = Client.Account.Identity.Limit.Update(VALID_IDENTITY' VALID_SERVICE' analyzeQueries: 600);
Magic Number,DataSiftTests.Account,Limit,D:\research\architectureSmells\repos\datasift_datasift-dotnet\DataSiftTests\Account\Limit.cs,Update_Null_Allowance_Succeeds,The following statement contains a magic number: Assert.AreEqual(600' response.Data.analyze_queries);
Magic Number,DataSiftTests.Account,Limit,D:\research\architectureSmells\repos\datasift_datasift-dotnet\DataSiftTests\Account\Limit.cs,Update_Null_Analyze_Queries_Succeeds,The following statement contains a magic number: var response = Client.Account.Identity.Limit.Update(VALID_IDENTITY' VALID_SERVICE' totalAllowance: 200000);
Magic Number,DataSiftTests.Account,Limit,D:\research\architectureSmells\repos\datasift_datasift-dotnet\DataSiftTests\Account\Limit.cs,Update_Null_Analyze_Queries_Succeeds,The following statement contains a magic number: Assert.AreEqual(200000' response.Data.total_allowance);
Magic Number,DataSiftTests.Account,Limit,D:\research\architectureSmells\repos\datasift_datasift-dotnet\DataSiftTests\Account\Limit.cs,Update_Succeeds,The following statement contains a magic number: var response = Client.Account.Identity.Limit.Update(VALID_IDENTITY' VALID_SERVICE' 200000' 600);
Magic Number,DataSiftTests.Account,Limit,D:\research\architectureSmells\repos\datasift_datasift-dotnet\DataSiftTests\Account\Limit.cs,Update_Succeeds,The following statement contains a magic number: var response = Client.Account.Identity.Limit.Update(VALID_IDENTITY' VALID_SERVICE' 200000' 600);
Magic Number,DataSiftTests.Account,Limit,D:\research\architectureSmells\repos\datasift_datasift-dotnet\DataSiftTests\Account\Limit.cs,Update_Succeeds,The following statement contains a magic number: Assert.AreEqual(200000' response.Data.total_allowance);
Magic Number,DataSiftTests.Account,Limit,D:\research\architectureSmells\repos\datasift_datasift-dotnet\DataSiftTests\Account\Limit.cs,Update_Succeeds,The following statement contains a magic number: Assert.AreEqual(600' response.Data.analyze_queries);
Magic Number,DataSiftTests.Account,Account,D:\research\architectureSmells\repos\datasift_datasift-dotnet\DataSiftTests\Account\Account.cs,Last_Months_Usage_Succeeds,The following statement contains a magic number: Assert.AreEqual(0.03332' response.Data.usage[1].quantity);
Magic Number,DataSiftTests.Account,Identity,D:\research\architectureSmells\repos\datasift_datasift-dotnet\DataSiftTests\Account\Identity.cs,Get_Page_Succeeds,The following statement contains a magic number: Assert.AreEqual(2' response.Data.identities.Count);
Magic Number,DataSiftTests.Account,Identity,D:\research\architectureSmells\repos\datasift_datasift-dotnet\DataSiftTests\Account\Identity.cs,Get_PerPage_Succeeds,The following statement contains a magic number: Assert.AreEqual(2' response.Data.identities.Count);
Magic Number,DataSiftTests,MockStreamConnection,D:\research\architectureSmells\repos\datasift_datasift-dotnet\DataSiftTests\MockStreamConnection.cs,MockStreamConnection,The following statement contains a magic number: Timer timer = new Timer(1000);
Magic Number,DataSiftTests,Core,D:\research\architectureSmells\repos\datasift_datasift-dotnet\DataSiftTests\Core.cs,Usage,The following statement contains a magic number: Assert.AreEqual(3600' stream.seconds);
Magic Number,DataSiftTests,Core,D:\research\architectureSmells\repos\datasift_datasift-dotnet\DataSiftTests\Core.cs,DPU_Complete_Hash_Succeeds,The following statement contains a magic number: Assert.AreEqual(2' response.Data.detail.contains.count);
Magic Number,DataSiftTests,Core,D:\research\architectureSmells\repos\datasift_datasift-dotnet\DataSiftTests\Core.cs,DPU_Complete_Hash_Succeeds,The following statement contains a magic number: Assert.AreEqual(0.2' response.Data.detail.contains.dpu);
Magic Number,DataSiftTests,Core,D:\research\architectureSmells\repos\datasift_datasift-dotnet\DataSiftTests\Core.cs,DPU_Complete_HistoricsId_Succeeds,The following statement contains a magic number: Assert.AreEqual(2' response.Data.detail.contains.count);
Magic Number,DataSiftTests,Core,D:\research\architectureSmells\repos\datasift_datasift-dotnet\DataSiftTests\Core.cs,DPU_Complete_HistoricsId_Succeeds,The following statement contains a magic number: Assert.AreEqual(0.2' response.Data.detail.contains.dpu);
Magic Number,DataSiftTests,Core,D:\research\architectureSmells\repos\datasift_datasift-dotnet\DataSiftTests\Core.cs,Balance,The following statement contains a magic number: Assert.AreEqual(20000' response.Data.balance.threshold);
Magic Number,DataSiftTests,Core,D:\research\architectureSmells\repos\datasift_datasift-dotnet\DataSiftTests\Core.cs,Pull_Correct_Args__JsonMetaFormat_Succeeds,The following statement contains a magic number: var response = Client.Pull("08b923395b6ce8bfa4d96f57jsonmeta"' size: 100000' cursor: "3b29a57fa62474d2c3cd4ca55510c4fe");
Magic Number,DataSiftTests,Core,D:\research\architectureSmells\repos\datasift_datasift-dotnet\DataSiftTests\Core.cs,Pull_Correct_Args__JsonArrayFormat_Succeeds,The following statement contains a magic number: var response = Client.Pull("08b923395b6ce8bfa4d96f5jsonarray"' size: 100000' cursor: "3b29a57fa62474d2c3cd4ca55510c4fe");
Magic Number,DataSiftTests,Core,D:\research\architectureSmells\repos\datasift_datasift-dotnet\DataSiftTests\Core.cs,Pull_Correct_Args__JsonNewlineFormat_Succeeds,The following statement contains a magic number: var response = Client.Pull("08b923395b6ce8bfa4d96jsonnewline"' size: 100000' cursor: "3b29a57fa62474d2c3cd4ca55510c4fe");
Magic Number,DataSiftTests,Historics,D:\research\architectureSmells\repos\datasift_datasift-dotnet\DataSiftTests\Historics.cs,Get_With_Estimate_Succeeds,The following statement contains a magic number: Assert.AreEqual(1363287634' response.Data.estimated_completion);
Magic Number,DataSiftTests,Historics,D:\research\architectureSmells\repos\datasift_datasift-dotnet\DataSiftTests\Historics.cs,Get_With_Estimate_Succeeds,The following statement contains a magic number: Assert.AreEqual(1363274434' response.Data.chunks[0].estimated_completion);
Magic Number,DataSiftTests,Historics,D:\research\architectureSmells\repos\datasift_datasift-dotnet\DataSiftTests\Historics.cs,Prepare_Start_After_End_Fails,The following statement contains a magic number: Client.Historics.Prepare(VALID_STREAM_HASH' VALID_START' DateTimeOffset.Now.AddDays(-3)' VALID_NAME' VALID_SOURCES);
Magic Number,DataSiftTests,Historics,D:\research\architectureSmells\repos\datasift_datasift-dotnet\DataSiftTests\Historics.cs,Prepare_Correct_Args_Succeeds,The following statement contains a magic number: Assert.AreEqual(99' response.Data.availability.sources.twitter.status);
Magic Number,DataSiftTests,Historics,D:\research\architectureSmells\repos\datasift_datasift-dotnet\DataSiftTests\Historics.cs,Status_Start_After_End_Fails,The following statement contains a magic number: Client.Historics.Status(VALID_START' DateTimeOffset.Now.AddDays(-3)' VALID_SOURCES);
Magic Number,DataSiftTests,Historics,D:\research\architectureSmells\repos\datasift_datasift-dotnet\DataSiftTests\Historics.cs,Status_Correct_Args_Succeeds,The following statement contains a magic number: Assert.AreEqual(100' response.Data[0].sources.twitter.augmentations.klout);
Magic Number,DataSiftTests,Push,D:\research\architectureSmells\repos\datasift_datasift-dotnet\DataSiftTests\Push.cs,Get_No_Arguments_Succeeds,The following statement contains a magic number: Assert.AreEqual(2' response.Data.count);
Magic Number,DataSiftTests,Push,D:\research\architectureSmells\repos\datasift_datasift-dotnet\DataSiftTests\Push.cs,Get_Page_Succeeds,The following statement contains a magic number: Assert.AreEqual(2' response.Data.count);
Magic Number,DataSiftTests,Push,D:\research\architectureSmells\repos\datasift_datasift-dotnet\DataSiftTests\Push.cs,Get_PerPage_Succeeds,The following statement contains a magic number: Assert.AreEqual(2' response.Data.count);
Magic Number,DataSiftTests,Push,D:\research\architectureSmells\repos\datasift_datasift-dotnet\DataSiftTests\Push.cs,Log_No_Arguments_Succeeds,The following statement contains a magic number: Assert.AreEqual(8740' response.Data.count);
Magic Number,DataSiftTests,Push,D:\research\architectureSmells\repos\datasift_datasift-dotnet\DataSiftTests\Push.cs,Log_Page_Succeeds,The following statement contains a magic number: Assert.AreEqual(182' response.Data.count);
Magic Number,DataSiftTests,Push,D:\research\architectureSmells\repos\datasift_datasift-dotnet\DataSiftTests\Push.cs,Log_PerPage_Succeeds,The following statement contains a magic number: var response = Client.Push.Log(page: 1' perPage: 5' orderDirection: OrderDirection.Ascending);
Magic Number,DataSiftTests,Push,D:\research\architectureSmells\repos\datasift_datasift-dotnet\DataSiftTests\Push.cs,Log_PerPage_Succeeds,The following statement contains a magic number: Assert.AreEqual(5' response.Data.log_entries.Count);
Magic Number,DataSiftTests,HistoricsPreview,D:\research\architectureSmells\repos\datasift_datasift-dotnet\DataSiftTests\HistoricsPreview.cs,Create_Start_Too_Early_Fails,The following statement contains a magic number: Client.HistoricsPreview.Create(VALID_STREAM_HASH' VALID_SOURCES' DummyCreateParams' new DateTimeOffset(2009' 12' 31' 23' 59' 59' TimeSpan.Zero));
Magic Number,DataSiftTests,HistoricsPreview,D:\research\architectureSmells\repos\datasift_datasift-dotnet\DataSiftTests\HistoricsPreview.cs,Create_Start_Too_Early_Fails,The following statement contains a magic number: Client.HistoricsPreview.Create(VALID_STREAM_HASH' VALID_SOURCES' DummyCreateParams' new DateTimeOffset(2009' 12' 31' 23' 59' 59' TimeSpan.Zero));
Magic Number,DataSiftTests,HistoricsPreview,D:\research\architectureSmells\repos\datasift_datasift-dotnet\DataSiftTests\HistoricsPreview.cs,Create_Start_Too_Early_Fails,The following statement contains a magic number: Client.HistoricsPreview.Create(VALID_STREAM_HASH' VALID_SOURCES' DummyCreateParams' new DateTimeOffset(2009' 12' 31' 23' 59' 59' TimeSpan.Zero));
Magic Number,DataSiftTests,HistoricsPreview,D:\research\architectureSmells\repos\datasift_datasift-dotnet\DataSiftTests\HistoricsPreview.cs,Create_Start_Too_Early_Fails,The following statement contains a magic number: Client.HistoricsPreview.Create(VALID_STREAM_HASH' VALID_SOURCES' DummyCreateParams' new DateTimeOffset(2009' 12' 31' 23' 59' 59' TimeSpan.Zero));
Magic Number,DataSiftTests,HistoricsPreview,D:\research\architectureSmells\repos\datasift_datasift-dotnet\DataSiftTests\HistoricsPreview.cs,Create_Start_Too_Early_Fails,The following statement contains a magic number: Client.HistoricsPreview.Create(VALID_STREAM_HASH' VALID_SOURCES' DummyCreateParams' new DateTimeOffset(2009' 12' 31' 23' 59' 59' TimeSpan.Zero));
Magic Number,DataSiftTests,HistoricsPreview,D:\research\architectureSmells\repos\datasift_datasift-dotnet\DataSiftTests\HistoricsPreview.cs,Create_Start_Too_Early_Fails,The following statement contains a magic number: Client.HistoricsPreview.Create(VALID_STREAM_HASH' VALID_SOURCES' DummyCreateParams' new DateTimeOffset(2009' 12' 31' 23' 59' 59' TimeSpan.Zero));
Magic Number,DataSiftTests,HistoricsPreview,D:\research\architectureSmells\repos\datasift_datasift-dotnet\DataSiftTests\HistoricsPreview.cs,Create_Start_After_End_Fails,The following statement contains a magic number: Client.HistoricsPreview.Create(VALID_STREAM_HASH' VALID_SOURCES' DummyCreateParams' VALID_START' DateTimeOffset.Now.AddDays(-3));
Magic Number,DataSiftTests,HistoricsPreview,D:\research\architectureSmells\repos\datasift_datasift-dotnet\DataSiftTests\HistoricsPreview.cs,Create_More_Than_Twenty_Params_Fails,The following statement contains a magic number: i <= 20
Magic Number,DataSiftTests,Source,D:\research\architectureSmells\repos\datasift_datasift-dotnet\DataSiftTests\Source.cs,Get_No_Arguments_Succeeds,The following statement contains a magic number: Assert.AreEqual(2' response.Data.sources.Count);
Magic Number,DataSiftTests,Source,D:\research\architectureSmells\repos\datasift_datasift-dotnet\DataSiftTests\Source.cs,Get_Page_Succeeds,The following statement contains a magic number: Assert.AreEqual(2' response.Data.count);
Magic Number,DataSiftTests,Source,D:\research\architectureSmells\repos\datasift_datasift-dotnet\DataSiftTests\Source.cs,Get_PerPage_Succeeds,The following statement contains a magic number: Assert.AreEqual(2' response.Data.count);
Magic Number,DataSiftTests,Source,D:\research\architectureSmells\repos\datasift_datasift-dotnet\DataSiftTests\Source.cs,Log_Page_Succeeds,The following statement contains a magic number: Assert.AreEqual(20' response.Data.count);
Magic Number,DataSiftTests,Source,D:\research\architectureSmells\repos\datasift_datasift-dotnet\DataSiftTests\Source.cs,Log_PerPage_Succeeds,The following statement contains a magic number: Assert.AreEqual(20' response.Data.count);
Magic Number,DataSiftTests,Source,D:\research\architectureSmells\repos\datasift_datasift-dotnet\DataSiftTests\Source.cs,Log_Correct_Args_Succeeds,The following statement contains a magic number: Assert.AreEqual(20' response.Data.count);
Magic Number,DataSiftTests,Source,D:\research\architectureSmells\repos\datasift_datasift-dotnet\DataSiftTests\Source.cs,ResourceAdd_Succeeds,The following statement contains a magic number: var resource = new[] {                      new {                           parameters = new {                              url = "http://www.facebook.com/theguardian"'                              title = "The Guardian"'                              id = 10513336322                          }                      }                  };
Magic Number,DataSiftTests.Pylon,Reference,D:\research\architectureSmells\repos\datasift_datasift-dotnet\DataSiftTests\Pylon\Reference.cs,Get_All_Page_Succeeds,The following statement contains a magic number: var response = Client.Pylon.Reference.Get(VALID_SERVICE' page: 2);
Magic Number,DataSiftTests.Pylon,Reference,D:\research\architectureSmells\repos\datasift_datasift-dotnet\DataSiftTests\Pylon\Reference.cs,Get_All_Page_Succeeds,The following statement contains a magic number: Assert.AreEqual(2' response.Data.page);
Magic Number,DataSiftTests.Pylon,Reference,D:\research\architectureSmells\repos\datasift_datasift-dotnet\DataSiftTests\Pylon\Reference.cs,Get_All_PerPage_Succeeds,The following statement contains a magic number: var response = Client.Pylon.Reference.Get(VALID_SERVICE' page: 1' perPage: 5);
Magic Number,DataSiftTests.Pylon,Reference,D:\research\architectureSmells\repos\datasift_datasift-dotnet\DataSiftTests\Pylon\Reference.cs,Get_All_PerPage_Succeeds,The following statement contains a magic number: Assert.AreEqual(5' response.Data.data.Count);
Magic Number,DataSiftTests.Pylon,Reference,D:\research\architectureSmells\repos\datasift_datasift-dotnet\DataSiftTests\Pylon\Reference.cs,Get_All_Succeeds,The following statement contains a magic number: Assert.AreEqual(15' response.Data.data.Count);
Magic Number,DataSiftTests.Pylon,Task,D:\research\architectureSmells\repos\datasift_datasift-dotnet\DataSiftTests\Pylon\Task.cs,Get_Page_Succeeds,The following statement contains a magic number: Assert.AreEqual(3' response.Data.tasks.Count);
Magic Number,DataSiftTests.Pylon,Task,D:\research\architectureSmells\repos\datasift_datasift-dotnet\DataSiftTests\Pylon\Task.cs,Get_PerPage_Succeeds,The following statement contains a magic number: var response = Client.Pylon.Task.Get(VALID_SERVICE' VALID_TYPE' page: 1' perPage: 3);
Magic Number,DataSiftTests.Pylon,Task,D:\research\architectureSmells\repos\datasift_datasift-dotnet\DataSiftTests\Pylon\Task.cs,Get_PerPage_Succeeds,The following statement contains a magic number: Assert.AreEqual(3' response.Data.tasks.Count);
Magic Number,DataSiftTests.Pylon,Pylon,D:\research\architectureSmells\repos\datasift_datasift-dotnet\DataSiftTests\Pylon\Pylon.cs,Get_Succeeds,The following statement contains a magic number: Assert.AreEqual(3' response.Data.subscriptions.Count);
Magic Number,DataSiftTests.Pylon,Pylon,D:\research\architectureSmells\repos\datasift_datasift-dotnet\DataSiftTests\Pylon\Pylon.cs,Get_Page_Succeeds,The following statement contains a magic number: Assert.AreEqual(3' response.Data.subscriptions.Count);
Magic Number,DataSiftTests.Pylon,Pylon,D:\research\architectureSmells\repos\datasift_datasift-dotnet\DataSiftTests\Pylon\Pylon.cs,Get_PerPage_Succeeds,The following statement contains a magic number: var response = Client.Pylon.Get(VALID_SERVICE' page: 1' perPage: 3);
Magic Number,DataSiftTests.Pylon,Pylon,D:\research\architectureSmells\repos\datasift_datasift-dotnet\DataSiftTests\Pylon\Pylon.cs,Get_PerPage_Succeeds,The following statement contains a magic number: Assert.AreEqual(3' response.Data.subscriptions.Count);
Magic Number,DataSiftTests.Pylon,Pylon,D:\research\architectureSmells\repos\datasift_datasift-dotnet\DataSiftTests\Pylon\Pylon.cs,Analyze_Too_Late_Start_Fails,The following statement contains a magic number: Client.Pylon.Analyze(VALID_SERVICE' VALID_ID' DummyParameters' start: DateTimeOffset.Now.AddDays(1)' end: DateTimeOffset.Now.AddDays(3));
Magic Number,DataSiftTests.Pylon,Pylon,D:\research\architectureSmells\repos\datasift_datasift-dotnet\DataSiftTests\Pylon\Pylon.cs,Analyze_End_Before_Start_Fails,The following statement contains a magic number: Client.Pylon.Analyze(VALID_SERVICE' VALID_ID' DummyParameters' start: VALID_START' end: DateTimeOffset.Now.AddDays(-31));
Magic Number,DataSiftTests.Pylon,Pylon,D:\research\architectureSmells\repos\datasift_datasift-dotnet\DataSiftTests\Pylon\Pylon.cs,Analyze_Nested,The following statement contains a magic number: dynamic nested = new {                      analysis_type = "freqDist"'                      parameters = new                      {                          threshold = 3'                          target = "fb.author.gender"                      }'                      child = new {                          parameters = new                          {                              threshold = 3'                              target = "fb.author.age"                          }                      }                  };
Magic Number,DataSiftTests.Pylon,Pylon,D:\research\architectureSmells\repos\datasift_datasift-dotnet\DataSiftTests\Pylon\Pylon.cs,Analyze_Nested,The following statement contains a magic number: dynamic nested = new {                      analysis_type = "freqDist"'                      parameters = new                      {                          threshold = 3'                          target = "fb.author.gender"                      }'                      child = new {                          parameters = new                          {                              threshold = 3'                              target = "fb.author.age"                          }                      }                  };
Magic Number,DataSiftTests.Pylon,Pylon,D:\research\architectureSmells\repos\datasift_datasift-dotnet\DataSiftTests\Pylon\Pylon.cs,Sample_Too_Low_Count_Fails,The following statement contains a magic number: Client.Pylon.Sample(VALID_SERVICE' VALID_ID' 9);
Magic Number,DataSiftTests.Pylon,Pylon,D:\research\architectureSmells\repos\datasift_datasift-dotnet\DataSiftTests\Pylon\Pylon.cs,Sample_Too_High_Count_Fails,The following statement contains a magic number: Client.Pylon.Sample(VALID_SERVICE' VALID_ID' 101);
Magic Number,DataSiftTests.Pylon,Pylon,D:\research\architectureSmells\repos\datasift_datasift-dotnet\DataSiftTests\Pylon\Pylon.cs,Sample_End_Before_Start_Fails,The following statement contains a magic number: Client.Pylon.Sample(VALID_SERVICE' VALID_ID' start: VALID_START' end: DateTimeOffset.Now.AddDays(-31));
Magic Number,DataSiftTests.Pylon,Pylon,D:\research\architectureSmells\repos\datasift_datasift-dotnet\DataSiftTests\Pylon\Pylon.cs,Sample_Succeeds,The following statement contains a magic number: Assert.AreEqual(80' response.Data.remaining);
Missing Default,DataSiftTests,MockRestAPIRequest,D:\research\architectureSmells\repos\datasift_datasift-dotnet\DataSiftTests\MockRestAPIRequest.cs,Request,The following switch statement is missing a default case: switch (endpoint)              {                  case "validate":                      response = MockAPIResponses.Default.Validate;                      result.StatusCode = HttpStatusCode.OK;                      break;                  case "compile":                      response = MockAPIResponses.Default.Compile;                      result.StatusCode = HttpStatusCode.OK;                      break;                  case "usage":                      response = MockAPIResponses.Default.Usage;                      result.StatusCode = HttpStatusCode.OK;                      break;                  case "dpu":                      response = MockAPIResponses.Default.DPU;                      result.StatusCode = HttpStatusCode.OK;                      break;                  case "balance":                      response = MockAPIResponses.Default.Balance;                      result.StatusCode = HttpStatusCode.OK;                      break;                    case "pull":                        return PullRequest(prms);                      case "historics/get":                                            if (prms.ContainsKey("id"))                          response = MockAPIResponses.Default.HistoricsGetById;                      else if (prms.ContainsKey("max"))                          response = MockAPIResponses.Default.HistoricsGetMax1;                      else if (prms.ContainsKey("with_estimate"))                          response = MockAPIResponses.Default.HistoricsGetWithCompletion;                      else                          response = MockAPIResponses.Default.HistoricsGet;                        result.StatusCode = HttpStatusCode.OK;                      break;                    case "historics/prepare":                      response = MockAPIResponses.Default.HistoricsPrepare;                      result.StatusCode = HttpStatusCode.OK;                      break;                    case "historics/start":                      result.StatusCode = HttpStatusCode.NoContent;                      break;                    case "historics/stop":                      result.StatusCode = HttpStatusCode.NoContent;                      break;                    case "historics/pause":                      result.StatusCode = HttpStatusCode.NoContent;                      break;                    case "historics/resume":                      result.StatusCode = HttpStatusCode.NoContent;                      break;                    case "historics/delete":                      result.StatusCode = HttpStatusCode.NoContent;                      break;                    case "historics/status":                      response = MockAPIResponses.Default.HistoricsStatus;                      result.StatusCode = HttpStatusCode.OK;                      break;                    case "historics/update":                      result.StatusCode = HttpStatusCode.NoContent;                      break;                    case "push/get":                        if (prms.ContainsKey("id"))                          response = MockAPIResponses.Default.PushGetById;                      else if (prms.ContainsKey("hash"))                          response = MockAPIResponses.Default.PushGetByHash;                      else if (prms.ContainsKey("historics_id"))                          response = MockAPIResponses.Default.PushGetByHistoricsId;                      else if (prms.ContainsKey("page"))                          response = MockAPIResponses.Default.PushGetPage;                      else if (prms.ContainsKey("per_page"))                          response = MockAPIResponses.Default.PushGetPage;                      else                          response = MockAPIResponses.Default.PushGet;                        result.StatusCode = HttpStatusCode.OK;                      break;                    case "push/create":                      response = MockAPIResponses.Default.PushCreate;                      result.StatusCode = HttpStatusCode.OK;                      break;                    case "push/delete":                      result.StatusCode = HttpStatusCode.NoContent;                      break;                    case "push/stop":                      response = MockAPIResponses.Default.PushStop;                      result.StatusCode = HttpStatusCode.OK;                      break;                    case "push/pause":                      response = MockAPIResponses.Default.PushPause;                      result.StatusCode = HttpStatusCode.OK;                      break;                    case "push/resume":                      response = MockAPIResponses.Default.PushResume;                      result.StatusCode = HttpStatusCode.OK;                      break;                    case "push/log":                        if (prms.ContainsKey("id"))                          response = MockAPIResponses.Default.PushLogById;                      else if (prms.ContainsKey("page"))                          response = MockAPIResponses.Default.PushLogPage;                      else if (prms.ContainsKey("per_page"))                          response = MockAPIResponses.Default.PushLogPage;                      else                          response = MockAPIResponses.Default.PushLog;                        result.StatusCode = HttpStatusCode.OK;                      break;                    case "push/update":                      response = MockAPIResponses.Default.PushUpdate;                      result.StatusCode = HttpStatusCode.OK;                      break;                    case "preview/get":                      var id = (string)prms.First(p => p.Key == "id").Value;                        switch (id)                      {                          case "e25d533cf287ec44fe66e8362running":                              response = MockAPIResponses.Default.HistoricsPreviewRunning;                              result.StatusCode = HttpStatusCode.Accepted;                              break;                          case "e25d533cf287ec44fe66e8362finished":                              response = MockAPIResponses.Default.HistoricsPreviewFinished;                              result.StatusCode = HttpStatusCode.OK;                              break;                      }                      break;                    case "preview/create":                      response = MockAPIResponses.Default.HistoricsPreviewCreate;                      result.StatusCode = HttpStatusCode.Accepted;                      break;                    case "source/get":                        if (prms.ContainsKey("id"))                          response = MockAPIResponses.Default.SourceGetById;                      else if (prms.ContainsKey("page"))                          response = MockAPIResponses.Default.SourceGetPage;                      else if (prms.ContainsKey("per_page"))                          response = MockAPIResponses.Default.SourceGetPage;                      else                          response = MockAPIResponses.Default.SourceGet;                        result.StatusCode = HttpStatusCode.OK;                      break;                    case "source/create":                      response = MockAPIResponses.Default.SourceCreate;                      result.StatusCode = HttpStatusCode.Created;                      break;                    case "source/delete":                      result.StatusCode = HttpStatusCode.NoContent;                      break;                    case "source/start":                      response = MockAPIResponses.Default.SourceStart;                      result.StatusCode = HttpStatusCode.OK;                      break;                    case "source/stop":                      response = MockAPIResponses.Default.SourceStop;                      result.StatusCode = HttpStatusCode.OK;                      break;                    case "source/update":                      response = MockAPIResponses.Default.SourceUpdate;                      result.StatusCode = HttpStatusCode.Accepted;                      break;                    case "source/log":                        if (prms.ContainsKey("page"))                          response = MockAPIResponses.Default.SourceLogPage;                      else if (prms.ContainsKey("per_page"))                          response = MockAPIResponses.Default.SourceLogPage;                      else                          response = MockAPIResponses.Default.SourceLog;                        result.StatusCode = HttpStatusCode.OK;                      break;                    case "source/resource/add":                      response = MockAPIResponses.Default.SourceResourceAdd;                      result.StatusCode = HttpStatusCode.OK;                      break;                    case "source/resource/remove":                      response = MockAPIResponses.Default.SourceResourceRemove;                      result.StatusCode = HttpStatusCode.OK;                      break;                    case "source/auth/add":                      response = MockAPIResponses.Default.SourceAuthAdd;                      result.StatusCode = HttpStatusCode.OK;                      break;                    case "source/auth/remove":                      response = MockAPIResponses.Default.SourceAuthRemove;                      result.StatusCode = HttpStatusCode.OK;                      break;                    case "pylon/facebook/get":                      if (prms.ContainsKey("id"))                          response = PylonAPIResponses.Default.GetOne;                      else                          response = PylonAPIResponses.Default.Get;                                            result.StatusCode = HttpStatusCode.OK;                      break;                    case "pylon/facebook/validate":                      response = PylonAPIResponses.Default.Validate;                      result.StatusCode = HttpStatusCode.OK;                      break;                    case "pylon/facebook/compile":                      response = PylonAPIResponses.Default.Compile;                      result.StatusCode = HttpStatusCode.OK;                      break;                    case "pylon/facebook/start":                      response = PylonAPIResponses.Default.Start;                      result.StatusCode = HttpStatusCode.OK;                      break;                    case "pylon/facebook/stop":                      result.StatusCode = HttpStatusCode.NoContent;                      break;                    case "pylon/facebook/update":                      result.StatusCode = HttpStatusCode.NoContent;                      break;                    case "pylon/facebook/analyze":                      var analyze_id = (string)prms.First(p => p.Key == "id").Value;                        if (analyze_id.IndexOf("nested") != -1)                      {                          response = PylonAPIResponses.Default.AnalyzeNested;                          result.StatusCode = HttpStatusCode.OK;                      }                      else                      {                          response = PylonAPIResponses.Default.Analyze;                          result.StatusCode = HttpStatusCode.OK;                      }                      break;                    case "pylon/facebook/tags":                      response = PylonAPIResponses.Default.Tags;                      result.StatusCode = HttpStatusCode.OK;                      break;                    case "pylon/facebook/sample":                      response = PylonAPIResponses.Default.Sample;                      result.StatusCode = HttpStatusCode.OK;                      break;                    case "pylon/" + Pylon.Task.VALID_SERVICE + "/task":                      if(method == Method.POST)                      {                          response = Pylon.TaskAPIResponses.Default.Create;                          result.StatusCode = HttpStatusCode.Created;                      }                        break;                                        case "pylon/" + Pylon.Task.VALID_SERVICE + "/task/" + Pylon.Task.VALID_TYPE:                      if (method == Method.GET)                      {                          response = Pylon.TaskAPIResponses.Default.GetAll;                          result.StatusCode = HttpStatusCode.OK;                      }                        break;                    case "pylon/" + Pylon.Task.VALID_SERVICE + "/task/" + Pylon.Task.VALID_TYPE + "/" + Pylon.Task.VALID_TASK_ID:                      switch (method)                      {                          case Method.GET:                              response = Pylon.TaskAPIResponses.Default.GetOne;                              result.StatusCode = HttpStatusCode.OK;                              break;                      }                        break;                    case "pylon/" + Pylon.Reference.VALID_SERVICE + "/reference":                      if (method == Method.GET)                      {                          if (prms.ContainsKey("per_page") || prms.ContainsKey("page"))                              response = Pylon.ReferenceDataAPIResponses.Default.GetAllSmallPage;                          else                              response = Pylon.ReferenceDataAPIResponses.Default.GetAll;                            result.StatusCode = HttpStatusCode.OK;                      }                        break;                    case "pylon/" + Pylon.Reference.VALID_SERVICE + "/reference/" + Pylon.Reference.VALID_SLUG:                      if (method == Method.GET)                      {                          response = Pylon.ReferenceDataAPIResponses.Default.Functions;                          result.StatusCode = HttpStatusCode.OK;                      }                        break;                    case "account/usage":                      response = AccountAPIResponses.Default.Account_Usage;                      result.StatusCode = HttpStatusCode.OK;                      break;                                        case "account/identity":                      switch (method) {                          case Method.POST:                              response = AccountAPIResponses.Default.Identity_Create;                              result.StatusCode = HttpStatusCode.Created;                              break;                          case Method.GET:                              if (prms.ContainsKey("label"))                                  response = AccountAPIResponses.Default.Identity_Get_Label;                              else if (prms.ContainsKey("page") || prms.ContainsKey("per_page"))                                  response = AccountAPIResponses.Default.Identity_Get_Page;                              else                                  response = AccountAPIResponses.Default.Identity_Get;                                result.StatusCode = HttpStatusCode.OK;                              break;                      }                                            break;                      case "account/identity/" + Account.Identity.VALID_ID:                      switch (method)                      {                          case Method.GET:                              response = AccountAPIResponses.Default.Identity_Get_Id;                              result.StatusCode = HttpStatusCode.OK;                              break;                          case Method.PUT:                              response = AccountAPIResponses.Default.Identity_Update;                              result.StatusCode = HttpStatusCode.OK;                              break;                          case Method.DELETE:                              result.StatusCode = HttpStatusCode.NoContent;                              break;                      }                        break;                    case "account/identity/" + Account.Token.VALID_IDENTITY + "/token":                      switch (method)                      {                          case Method.POST:                              response = AccountAPIResponses.Default.Token_Create;                              result.StatusCode = HttpStatusCode.Created;                              break;                          case Method.GET:                              if (prms.ContainsKey("service"))                                  response = AccountAPIResponses.Default.Token_GetAll;                              else if (prms.ContainsKey("page") || prms.ContainsKey("per_page"))                                  response = AccountAPIResponses.Default.Token_GetAll;                              else                                  response = AccountAPIResponses.Default.Token_GetAll;                                result.StatusCode = HttpStatusCode.OK;                              break;                      }                        break;                    case "account/identity/" + Account.Token.VALID_IDENTITY + "/token/" + Account.Token.VALID_SERVICE:                      switch (method)                      {                          case Method.GET:                              response = AccountAPIResponses.Default.Token_GetAll;                              result.StatusCode = HttpStatusCode.OK;                              break;                          case Method.PUT:                              response = AccountAPIResponses.Default.Token_Update;                              result.StatusCode = HttpStatusCode.OK;                              break;                          case Method.DELETE:                              result.StatusCode = HttpStatusCode.NoContent;                              break;                      }                        break;                      case "account/identity/" + Account.Limit.VALID_IDENTITY + "/limit":                      switch (method)                      {                          case Method.POST:                              response = AccountAPIResponses.Default.Limit_Create;                              result.StatusCode = HttpStatusCode.Created;                              break;                      }                        break;                    case "account/identity/" + Account.Limit.VALID_IDENTITY + "/limit/" + Account.Token.VALID_SERVICE:                      switch (method)                      {                          case Method.GET:                              response = AccountAPIResponses.Default.Limit_GetByIdentityAndService;                              result.StatusCode = HttpStatusCode.OK;                              break;                          case Method.PUT:                              response = AccountAPIResponses.Default.Limit_Update;                              result.StatusCode = HttpStatusCode.OK;                              break;                          case Method.DELETE:                              result.StatusCode = HttpStatusCode.NoContent;                              break;                      }                        break;                    case "account/identity/limit/" + Account.Token.VALID_SERVICE:                      switch (method)                      {                          case Method.GET:                              response = AccountAPIResponses.Default.Limit_AllByService;                              result.StatusCode = HttpStatusCode.OK;                              break;                      }                        break;              }
Missing Default,DataSiftTests,MockRestAPIRequest,D:\research\architectureSmells\repos\datasift_datasift-dotnet\DataSiftTests\MockRestAPIRequest.cs,Request,The following switch statement is missing a default case: switch (id)                      {                          case "e25d533cf287ec44fe66e8362running":                              response = MockAPIResponses.Default.HistoricsPreviewRunning;                              result.StatusCode = HttpStatusCode.Accepted;                              break;                          case "e25d533cf287ec44fe66e8362finished":                              response = MockAPIResponses.Default.HistoricsPreviewFinished;                              result.StatusCode = HttpStatusCode.OK;                              break;                      }
Missing Default,DataSiftTests,MockRestAPIRequest,D:\research\architectureSmells\repos\datasift_datasift-dotnet\DataSiftTests\MockRestAPIRequest.cs,Request,The following switch statement is missing a default case: switch (method)                      {                          case Method.GET:                              response = Pylon.TaskAPIResponses.Default.GetOne;                              result.StatusCode = HttpStatusCode.OK;                              break;                      }
Missing Default,DataSiftTests,MockRestAPIRequest,D:\research\architectureSmells\repos\datasift_datasift-dotnet\DataSiftTests\MockRestAPIRequest.cs,Request,The following switch statement is missing a default case: switch (method) {                          case Method.POST:                              response = AccountAPIResponses.Default.Identity_Create;                              result.StatusCode = HttpStatusCode.Created;                              break;                          case Method.GET:                              if (prms.ContainsKey("label"))                                  response = AccountAPIResponses.Default.Identity_Get_Label;                              else if (prms.ContainsKey("page") || prms.ContainsKey("per_page"))                                  response = AccountAPIResponses.Default.Identity_Get_Page;                              else                                  response = AccountAPIResponses.Default.Identity_Get;                                result.StatusCode = HttpStatusCode.OK;                              break;                      }
Missing Default,DataSiftTests,MockRestAPIRequest,D:\research\architectureSmells\repos\datasift_datasift-dotnet\DataSiftTests\MockRestAPIRequest.cs,Request,The following switch statement is missing a default case: switch (method)                      {                          case Method.GET:                              response = AccountAPIResponses.Default.Identity_Get_Id;                              result.StatusCode = HttpStatusCode.OK;                              break;                          case Method.PUT:                              response = AccountAPIResponses.Default.Identity_Update;                              result.StatusCode = HttpStatusCode.OK;                              break;                          case Method.DELETE:                              result.StatusCode = HttpStatusCode.NoContent;                              break;                      }
Missing Default,DataSiftTests,MockRestAPIRequest,D:\research\architectureSmells\repos\datasift_datasift-dotnet\DataSiftTests\MockRestAPIRequest.cs,Request,The following switch statement is missing a default case: switch (method)                      {                          case Method.POST:                              response = AccountAPIResponses.Default.Token_Create;                              result.StatusCode = HttpStatusCode.Created;                              break;                          case Method.GET:                              if (prms.ContainsKey("service"))                                  response = AccountAPIResponses.Default.Token_GetAll;                              else if (prms.ContainsKey("page") || prms.ContainsKey("per_page"))                                  response = AccountAPIResponses.Default.Token_GetAll;                              else                                  response = AccountAPIResponses.Default.Token_GetAll;                                result.StatusCode = HttpStatusCode.OK;                              break;                      }
Missing Default,DataSiftTests,MockRestAPIRequest,D:\research\architectureSmells\repos\datasift_datasift-dotnet\DataSiftTests\MockRestAPIRequest.cs,Request,The following switch statement is missing a default case: switch (method)                      {                          case Method.GET:                              response = AccountAPIResponses.Default.Token_GetAll;                              result.StatusCode = HttpStatusCode.OK;                              break;                          case Method.PUT:                              response = AccountAPIResponses.Default.Token_Update;                              result.StatusCode = HttpStatusCode.OK;                              break;                          case Method.DELETE:                              result.StatusCode = HttpStatusCode.NoContent;                              break;                      }
Missing Default,DataSiftTests,MockRestAPIRequest,D:\research\architectureSmells\repos\datasift_datasift-dotnet\DataSiftTests\MockRestAPIRequest.cs,Request,The following switch statement is missing a default case: switch (method)                      {                          case Method.POST:                              response = AccountAPIResponses.Default.Limit_Create;                              result.StatusCode = HttpStatusCode.Created;                              break;                      }
Missing Default,DataSiftTests,MockRestAPIRequest,D:\research\architectureSmells\repos\datasift_datasift-dotnet\DataSiftTests\MockRestAPIRequest.cs,Request,The following switch statement is missing a default case: switch (method)                      {                          case Method.GET:                              response = AccountAPIResponses.Default.Limit_GetByIdentityAndService;                              result.StatusCode = HttpStatusCode.OK;                              break;                          case Method.PUT:                              response = AccountAPIResponses.Default.Limit_Update;                              result.StatusCode = HttpStatusCode.OK;                              break;                          case Method.DELETE:                              result.StatusCode = HttpStatusCode.NoContent;                              break;                      }
Missing Default,DataSiftTests,MockRestAPIRequest,D:\research\architectureSmells\repos\datasift_datasift-dotnet\DataSiftTests\MockRestAPIRequest.cs,Request,The following switch statement is missing a default case: switch (method)                      {                          case Method.GET:                              response = AccountAPIResponses.Default.Limit_AllByService;                              result.StatusCode = HttpStatusCode.OK;                              break;                      }
Missing Default,DataSiftTests,MockRestAPIRequest,D:\research\architectureSmells\repos\datasift_datasift-dotnet\DataSiftTests\MockRestAPIRequest.cs,PullRequest,The following switch statement is missing a default case: switch (id)              {                  case "08b923395b6ce8bfa4d96f57jsonmeta":                      response = MockAPIResponses.Default.PullJsonMetaFormat;                      result.PullDetails.Format = "json_meta";                      break;                  case "08b923395b6ce8bfa4d96f5jsonarray":                      response = MockAPIResponses.Default.PullJsonArrayFormat;                      result.PullDetails.Format = "json_array";                      break;                  case "08b923395b6ce8bfa4d96jsonnewline":                      response = MockAPIResponses.Default.PullJsonNewLineFormat;                      result.PullDetails.Format = "json_new_line";                      break;              }
