Implementation smell,Namespace,Class,File,Method,Description
Long Method,YAMS,AutoUpdate,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Functions\AutoUpdate.cs,CheckUpdates,The method has 155 lines of code.
Long Method,YAMS,JobEngine,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Functions\JobEngine.cs,Tick,The method has 103 lines of code.
Long Method,YAMS,MCServer,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Objects\Server.cs,Start,The method has 126 lines of code.
Long Method,YAMS.Web,AdminAPI,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Web\AdminAPI.cs,Process,The method has 519 lines of code.
Long Method,YAMS.Web,PublicAPI,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Web\PublicAPI.cs,Process,The method has 182 lines of code.
Complex Method,YAMS.AddOns,c10t,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\AddOns\c10t.cs,DoWork,Cyclomatic complexity of the method is 9
Complex Method,YAMS.AddOns,Overviewer,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\AddOns\Overviewer.cs,DoWork,Cyclomatic complexity of the method is 8
Complex Method,YAMS,AutoUpdate,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Functions\AutoUpdate.cs,CheckUpdates,Cyclomatic complexity of the method is 30
Complex Method,YAMS,AutoUpdate,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Functions\AutoUpdate.cs,UpdateIfNeeded,Cyclomatic complexity of the method is 8
Complex Method,YAMS,Core,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Core.cs,StartUp,Cyclomatic complexity of the method is 10
Complex Method,YAMS,JobEngine,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Functions\JobEngine.cs,Tick,Cyclomatic complexity of the method is 19
Complex Method,YAMS,TelnetClient,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Objects\Telnet.cs,ReadMessage,Cyclomatic complexity of the method is 14
Complex Method,YAMS,Database,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Functions\Database.cs,NewServerWeb,Cyclomatic complexity of the method is 8
Complex Method,YAMS,Database,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Functions\Database.cs,UpdateDB,Cyclomatic complexity of the method is 10
Complex Method,YAMS,MCServer,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Objects\Server.cs,Start,Cyclomatic complexity of the method is 18
Complex Method,YAMS,MCServer,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Objects\Server.cs,ServerError,Cyclomatic complexity of the method is 13
Complex Method,YAMS,WebServer,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Web\WebServer.cs,Init,Cyclomatic complexity of the method is 11
Complex Method,YAMS.Web,AdminAPI,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Web\AdminAPI.cs,Process,Cyclomatic complexity of the method is 87
Complex Method,YAMS.Web,PublicAPI,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Web\PublicAPI.cs,Process,Cyclomatic complexity of the method is 18
Long Parameter List,YAMS.AddOns,App,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\AddOns\App.cs,App,The method has 6 parameters. Parameters: s' strBaseName' strMainExe' strName' bolRequiresClient' strParams
Long Parameter List,YAMS,Database,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Functions\Database.cs,AddLog,The method has 5 parameters. Parameters: strMessage' strSource' strLevel' bolSendToAdmin' intServerID
Long Parameter List,YAMS,Database,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Functions\Database.cs,AddLog,The method has 6 parameters. Parameters: datTimeStamp' strMessage' strSource' strLevel' bolSendToAdmin' intServerID
Long Parameter List,YAMS,Database,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Functions\Database.cs,AddJob,The method has 5 parameters. Parameters: strAction' intHour' intMinute' strParams' intServerID
Long Identifier,YAMS,AutoUpdate,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Functions\AutoUpdate.cs,,The length of the parameter bolReporterConfigUpdateAvailable is 32.
Long Statement,YAMS.AddOns,BiomeExtractor,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\AddOns\BiomeExtractor.cs,DoWork,The length of the statement  "                    Database.AddLog("Couldn't run Biome Extractor as server running and not empty."' this.BaseName' "warn"' true' this.Server.ServerID);" is 132.
Long Statement,YAMS.AddOns,BiomeExtractor,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\AddOns\BiomeExtractor.cs,DoWork,The length of the statement  "            prcBiomeExtractor.StartInfo.Arguments = "-jar MinecraftBiomeExtractor.jar -nogui \"" + Core.StoragePath + this.Server.ServerID + "\\world\"";" is 141.
Long Statement,YAMS.AddOns,BiomeExtractor,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\AddOns\BiomeExtractor.cs,DoWork,The length of the statement  "                Database.AddLog("Restarting server after Biome Extractor completed."' this.BaseName' "info"' false' this.Server.ServerID);" is 122.
Long Statement,YAMS.AddOns,c10t,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\AddOns\c10t.cs,DoWork,The length of the statement  "            string strFileName = DateTime.Now.Year + "-" + DateTime.Now.Month + "-" + DateTime.Now.Day + "-" + DateTime.Now.Hour + "-" + DateTime.Now.Minute;" is 145.
Long Statement,YAMS.AddOns,NBToolkit,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\AddOns\NBToolkit.cs,DoWork,The length of the statement  "                    Database.AddLog("Couldn't run " + this.Name + " as server running and not empty."' this.BaseName' "warn"' true' this.Server.ServerID);" is 134.
Long Statement,YAMS.AddOns,NBToolkit,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\AddOns\NBToolkit.cs,DoWork,The length of the statement  "                Database.AddLog("Restarting server after Biome Extractor completed."' this.BaseName' "info"' false' this.Server.ServerID);" is 122.
Long Statement,YAMS.AddOns,Overviewer,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\AddOns\Overviewer.cs,DoWork,The length of the statement  "            if (!Directory.Exists(ServerRoot + @"\renders\overviewer\")) Directory.CreateDirectory(ServerRoot + @"\renders\overviewer\");" is 125.
Long Statement,YAMS.AddOns,Overviewer,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\AddOns\Overviewer.cs,DoWork,The length of the statement  "            if (!Directory.Exists(ServerRoot + @"\renders\overviewer\output\")) Directory.CreateDirectory(ServerRoot + @"\renders\overviewer\output\");" is 139.
Long Statement,YAMS.AddOns,Overviewer,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\AddOns\Overviewer.cs,DoWork,The length of the statement  "            if (!Directory.Exists(ServerRoot + @"\renders\overviewer\temp\")) Directory.CreateDirectory(ServerRoot + @"\renders\overviewer\temp\");" is 135.
Long Statement,YAMS.AddOns,Overviewer,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\AddOns\Overviewer.cs,DoWork,The length of the statement  "            if (!Directory.Exists(ServerRoot + @"\renders\overviewer\temp\")) Directory.Delete(ServerRoot + @"\renders\overviewer\temp\"' true);" is 132.
Long Statement,YAMS,AutoUpdate,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Functions\AutoUpdate.cs,CheckUpdates,The length of the statement  "                    strMCServerURL = "https://s3.amazonaws.com/Minecraft.Download/versions/" + releaseVer + "/minecraft_server." + releaseVer + ".jar";" is 131.
Long Statement,YAMS,AutoUpdate,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Functions\AutoUpdate.cs,CheckUpdates,The length of the statement  "                    string strMCPreServerURL = "https://s3.amazonaws.com/Minecraft.Download/versions/" + snapshotVer + "/minecraft_server." + snapshotVer + ".jar";" is 143.
Long Statement,YAMS,AutoUpdate,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Functions\AutoUpdate.cs,CheckUpdates,The length of the statement  "                    bolPreUpdateAvailable = UpdateIfNeeded(strMCPreServerURL' YAMS.Core.RootFolder + @"\lib\minecraft_server_pre.jar.UPDATE");" is 122.
Long Statement,YAMS,AutoUpdate,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Functions\AutoUpdate.cs,CheckUpdates,The length of the statement  "                    string strReleaseVersionFile = Util.GetTextHTTP("http://dl.bukkit.org/api/1.0/downloads/projects/craftbukkit/view/latest-rb/?_accept=application/json");" is 152.
Long Statement,YAMS,AutoUpdate,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Functions\AutoUpdate.cs,CheckUpdates,The length of the statement  "                        bolBukkitUpdateAvailable = UpdateIfNeeded(strBukkitServerURL' Core.RootFolder + @"\lib\craftbukkit.jar.UPDATE"' "modified");" is 124.
Long Statement,YAMS,AutoUpdate,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Functions\AutoUpdate.cs,CheckUpdates,The length of the statement  "                    string strBetaVersionFile = Util.GetTextHTTP("http://dl.bukkit.org/api/1.0/downloads/projects/craftbukkit/view/latest-beta/?_accept=application/json");" is 151.
Long Statement,YAMS,AutoUpdate,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Functions\AutoUpdate.cs,CheckUpdates,The length of the statement  "                        bolBukkitBetaUpdateAvailable = UpdateIfNeeded(strBukkitBetaServerURL' Core.RootFolder + @"\lib\craftbukkit-beta.jar.UPDATE"' "modified");" is 137.
Long Statement,YAMS,AutoUpdate,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Functions\AutoUpdate.cs,CheckUpdates,The length of the statement  "                    string strDevVersionFile = Util.GetTextHTTP("http://dl.bukkit.org/api/1.0/downloads/projects/craftbukkit/view/latest-dev/?_accept=application/json");" is 149.
Long Statement,YAMS,AutoUpdate,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Functions\AutoUpdate.cs,CheckUpdates,The length of the statement  "                        bolBukkitDevUpdateAvailable = UpdateIfNeeded(strBukkitDevServerURL' Core.RootFolder + @"\lib\craftbukkit-dev.jar.UPDATE"' "modified");" is 134.
Long Statement,YAMS,AutoUpdate,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Functions\AutoUpdate.cs,CheckUpdates,The length of the statement  "                    bolDllUpdateAvailable = UpdateIfNeeded(strYPath + @"/YAMS-Library.dll"' YAMS.Core.RootFolder + @"\YAMS-Library.dll.UPDATE");" is 124.
Long Statement,YAMS,AutoUpdate,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Functions\AutoUpdate.cs,CheckUpdates,The length of the statement  "                    if (UpdateIfNeeded(strYPath + @"/YAMS-Service.exe"' YAMS.Core.RootFolder + @"\YAMS-Service.exe.UPDATE") || UpdateIfNeeded(strYPath + @"/YAMS-Service.exe.config"' YAMS.Core.RootFolder + @"\YAMS-Service.exe.config.UPDATE"))" is 221.
Long Statement,YAMS,AutoUpdate,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Functions\AutoUpdate.cs,CheckUpdates,The length of the statement  "                    bolReporterUpdateAvailable = UpdateIfNeeded(strYPath + @"/YAMS-Reporter.exe"' YAMS.Core.RootFolder + @"\YAMS-Reporter.exe");" is 124.
Long Statement,YAMS,AutoUpdate,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Functions\AutoUpdate.cs,CheckUpdates,The length of the statement  "                    bolReporterConfigUpdateAvailable = UpdateIfNeeded(strYPath + @"/YAMS-Reporter.exe.config"' YAMS.Core.RootFolder + @"\YAMS-Reporter.exe.config");" is 144.
Long Statement,YAMS,AutoUpdate,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Functions\AutoUpdate.cs,CheckUpdates,The length of the statement  "                        if (UpdateIfNeeded(strYAMSUpdatePath[strBranch] + @"/lib/" + j.Name' Core.RootFolder + @"\lib\" + j.Name + ".UPDATE")) bolLibUpdateAvailable = true;" is 148.
Long Statement,YAMS,AutoUpdate,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Functions\AutoUpdate.cs,CheckUpdates,The length of the statement  "                            if (!Directory.Exists(YAMS.Core.RootFolder + @"\apps\overviewer-new\\")) Directory.CreateDirectory(YAMS.Core.RootFolder + @"\apps\overviewer-new\\");" is 149.
Long Statement,YAMS,AutoUpdate,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Functions\AutoUpdate.cs,CheckUpdates,The length of the statement  "                            if (Directory.Exists(YAMS.Core.RootFolder + @"\apps\overviewer\")) Directory.Delete(YAMS.Core.RootFolder + @"\apps\overviewer\"' true);" is 135.
Long Statement,YAMS,AutoUpdate,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Functions\AutoUpdate.cs,CheckUpdates,The length of the statement  "                if ((bolDllUpdateAvailable || bolServiceUpdateAvailable || bolWebUpdateAvailable || bolRestartNeeded || bolLibUpdateAvailable) && Convert.ToBoolean(Database.GetSetting("RestartOnSVCUpdate"' "YAMS")))" is 199.
Long Statement,YAMS,AutoUpdate,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Functions\AutoUpdate.cs,CheckUpdates,The length of the statement  "                if ((bolServerUpdateAvailable || bolBukkitUpdateAvailable || bolPreUpdateAvailable) && Convert.ToBoolean(Database.GetSetting("RestartOnJarUpdate"' "YAMS")))" is 156.
Long Statement,YAMS,AutoUpdate,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Functions\AutoUpdate.cs,CheckUpdates,The length of the statement  "                        if (((kvp.Value.ServerType == "vanilla" && bolServerUpdateAvailable) || (kvp.Value.ServerType == "bukkit" && bolBukkitUpdateAvailable)" is 134.
Long Statement,YAMS,AutoUpdate,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Functions\AutoUpdate.cs,CheckUpdates,The length of the statement  "                            || (kvp.Value.ServerType == "bukkit-beta" && bolBukkitBetaUpdateAvailable) || (kvp.Value.ServerType == "bukkit-dev" && bolBukkitDevUpdateAvailable)))" is 149.
Long Statement,YAMS,AutoUpdate,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Functions\AutoUpdate.cs,UpdateIfNeeded,The length of the statement  "                        catch (Exception e) { Database.AddLog("Unable to set modified date for URL: " + strURL + "; " + e.Message' "updater"' "warn"); }" is 128.
Long Statement,YAMS,AutoUpdate,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Functions\AutoUpdate.cs,UpdateIfNeeded,The length of the statement  "                    if (response.Headers[HttpResponseHeader.ETag] != null) YAMS.Database.SaveEtag(strURL' response.Headers[HttpResponseHeader.ETag]);" is 129.
Long Statement,YAMS,AutoUpdate,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Functions\AutoUpdate.cs,UpdateIfNeeded,The length of the statement  "                    if (response.Headers[HttpResponseHeader.LastModified] != null) YAMS.Database.SaveEtag(strURL' response.Headers[HttpResponseHeader.LastModified]);" is 145.
Long Statement,YAMS,AutoUpdate,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Functions\AutoUpdate.cs,UpdateIfNeeded,The length of the statement  "                            YAMS.Database.AddLog(string.Format("Failed to check " + strURL + ". Error Code: {0}"' response.StatusCode)' "updater"' "error");" is 128.
Long Statement,YAMS,Core,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Core.cs,StartUp,The length of the statement  "            try { if (File.Exists(RootFolder + @"\YAMS-Service.exe.config.OLD")) File.Delete(RootFolder + @"\YAMS-Service.exe.config.OLD"); }" is 129.
Long Statement,YAMS,Backup,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Functions\Backup.cs,BackupNow,The length of the statement  "            if (Directory.Exists(Core.StoragePath + s.ServerID.ToString() + @"\backups\temp\")) Directory.Delete(Core.StoragePath + s.ServerID.ToString() + @"\backups\temp\"' true);" is 169.
Long Statement,YAMS,Backup,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Functions\Backup.cs,BackupNow,The length of the statement  "            if (!Directory.Exists(Core.StoragePath + s.ServerID.ToString() + @"\backups\temp\")) Directory.CreateDirectory(Core.StoragePath + s.ServerID.ToString() + @"\backups\temp\");" is 173.
Long Statement,YAMS,Backup,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Functions\Backup.cs,BackupNow,The length of the statement  "            z.CreateZip(s.ServerDirectory + @"\backups\" + DateTime.Now.Year + "-" + DateTime.Now.Month.ToString("D2") + "-" + DateTime.Now.Day.ToString("D2") + "-" + DateTime.Now.Hour.ToString("D2") + "-" + DateTime.Now.Minute.ToString("D2") + strAppendName + ".zip"' s.ServerDirectory + @"\backups\temp\"' true' "");" is 306.
Long Statement,YAMS,Backup,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Functions\Backup.cs,ClearBackups,The length of the statement  "            Database.AddLog("Clearing backups older than " + intAmount.ToString() + " " + strPeriod' "backup"' "info"' false' s.ServerID);" is 126.
Long Statement,YAMS,JobEngine,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Functions\JobEngine.cs,Tick,The length of the statement  "                            Backup.ClearBackups(Core.Servers[Convert.ToInt32(rdJobs["JobServer"])]' jobParams["period"]' Convert.ToInt32(jobParams["amount"]));" is 131.
Long Statement,YAMS,Networking,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Functions\Networking.cs,OpenFirewallPort,The length of the statement  "                Database.AddLog("Unable to open firewall port " + intPortNumber + " for " + strFriendlyName + ": Exception - " + e.Message' "networking"' "warn");" is 146.
Long Statement,YAMS,Networking,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Functions\Networking.cs,OpenUPnP,The length of the statement  "                upnpnat.StaticPortMappingCollection.Add(intPortNumber' "TCP"' intPortNumber' ipAddress' true' "[YAMS] " + strFriendlyName);" is 123.
Long Statement,YAMS,Networking,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Functions\Networking.cs,OpenUPnP,The length of the statement  "                Database.AddLog("Unable foward port " + intPortNumber + " for " + strFriendlyName + ": Exception - " + e.Message' "networking"' "warn");" is 136.
Long Statement,YAMS,TelnetServer,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Objects\Telnet.cs,ListenForClients,The length of the statement  "                Networking.OpenUPnP(Convert.ToInt32(YAMS.Database.GetSetting("TelnetPort"' "YAMS"))' "Telnet"' YAMS.Database.GetSetting("YAMSListenIP"' "YAMS"));" is 145.
Long Statement,YAMS,WebTemplate,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Web\WebTemplate.cs,ReplaceTags,The length of the statement  "                if (dicInputTags.ContainsKey(match.Groups[2].Value)) strOutput = replacer.Replace(strOutput' dicInputTags[match.Groups[2].Value]);" is 130.
Long Statement,YAMS,Database,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Functions\Database.cs,AddLog,The length of the statement  "            string sqlIns = "INSERT INTO Log (LogSource' LogMessage' LogLevel' ServerID) VALUES (@source' @msg' @level' @serverid)";" is 120.
Long Statement,YAMS,Database,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Functions\Database.cs,AddLog,The length of the statement  "            string sqlIns = "INSERT INTO Log (LogSource' LogMessage' LogLevel' ServerID' LogDateTime) VALUES (@source' @msg' @level' @serverid' @timestamp)";" is 145.
Long Statement,YAMS,Database,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Functions\Database.cs,GetSetting,The length of the statement  "                SqlCeCommand cmd = new SqlCeCommand("SELECT SettingValue FROM " + strTableName + " WHERE SettingName = @name" + strServerIDQuery' connLocal);" is 141.
Long Statement,YAMS,Database,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Functions\Database.cs,NewServer,The length of the statement  "            cmd.CommandText = "INSERT INTO MCServers (ServerTitle' ServerWrapperMode' ServerAssignedMemory) VALUES (@title' 0' @mem)";" is 122.
Long Statement,YAMS,Database,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Functions\Database.cs,NewServer,The length of the statement  "            if (!Directory.Exists(Core.StoragePath + intNewID.ToString())) Directory.CreateDirectory(Core.StoragePath + intNewID.ToString());" is 129.
Long Statement,YAMS,Database,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Functions\Database.cs,NewServer,The length of the statement  "            //if (!Directory.Exists(Core.StoragePath + intNewID.ToString() + @"\config\")) Directory.CreateDirectory(Core.StoragePath + intNewID.ToString() + @"\config\");" is 159.
Long Statement,YAMS,Database,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Functions\Database.cs,NewServer,The length of the statement  "            if (!Directory.Exists(Core.StoragePath + intNewID.ToString() + @"\world\")) Directory.CreateDirectory(Core.StoragePath + intNewID.ToString() + @"\world\");" is 155.
Long Statement,YAMS,Database,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Functions\Database.cs,NewServer,The length of the statement  "            if (!Directory.Exists(Core.StoragePath + intNewID.ToString() + @"\renders\")) Directory.CreateDirectory(Core.StoragePath + intNewID.ToString() + @"\renders\");" is 159.
Long Statement,YAMS,Database,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Functions\Database.cs,NewServer,The length of the statement  "            if (!Directory.Exists(Core.StoragePath + intNewID.ToString() + @"\renders\overviewer\")) Directory.CreateDirectory(Core.StoragePath + intNewID.ToString() + @"\renders\overviewer\");" is 181.
Long Statement,YAMS,Database,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Functions\Database.cs,NewServer,The length of the statement  "            if (!Directory.Exists(Core.StoragePath + intNewID.ToString() + @"\renders\overviewer\output\")) Directory.CreateDirectory(Core.StoragePath + intNewID.ToString() + @"\renders\overviewer\output\");" is 195.
Long Statement,YAMS,Database,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Functions\Database.cs,NewServer,The length of the statement  "            //if (!File.Exists(Core.StoragePath + intNewID.ToString() + @"\banned-ips.txt")) File.Create(Core.StoragePath + intNewID.ToString() + @"\banned-ips.txt");" is 154.
Long Statement,YAMS,Database,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Functions\Database.cs,NewServer,The length of the statement  "            //if (!File.Exists(Core.StoragePath + intNewID.ToString() + @"\banned-players.txt")) File.Create(Core.StoragePath + intNewID.ToString() + @"\banned-players.txt");" is 162.
Long Statement,YAMS,Database,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Functions\Database.cs,NewServer,The length of the statement  "            //if (!File.Exists(Core.StoragePath + intNewID.ToString() + @"\ops.txt")) File.Create(Core.StoragePath + intNewID.ToString() + @"\ops.txt");" is 140.
Long Statement,YAMS,Database,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Functions\Database.cs,NewServer,The length of the statement  "            //if (!File.Exists(Core.StoragePath + intNewID.ToString() + @"\white-list.txt")) File.Create(Core.StoragePath + intNewID.ToString() + @"\white-list.txt");" is 154.
Long Statement,YAMS,Database,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Functions\Database.cs,NewServerWeb,The length of the statement  "            cmd.CommandText = "INSERT INTO MCServers (ServerTitle' ServerWrapperMode' ServerAssignedMemory' ServerAutostart) VALUES (@title' 0' @mem' 0)";" is 142.
Long Statement,YAMS,Database,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Functions\Database.cs,NewServerWeb,The length of the statement  "            if (!Directory.Exists(Core.StoragePath + intNewID.ToString())) Directory.CreateDirectory(Core.StoragePath + intNewID.ToString());" is 129.
Long Statement,YAMS,Database,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Functions\Database.cs,NewServerWeb,The length of the statement  "            //if (!Directory.Exists(Core.StoragePath + intNewID.ToString() + @"\config\")) Directory.CreateDirectory(Core.StoragePath + intNewID.ToString() + @"\config\");" is 159.
Long Statement,YAMS,Database,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Functions\Database.cs,NewServerWeb,The length of the statement  "            if (!Directory.Exists(Core.StoragePath + intNewID.ToString() + @"\world\")) Directory.CreateDirectory(Core.StoragePath + intNewID.ToString() + @"\world\");" is 155.
Long Statement,YAMS,Database,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Functions\Database.cs,NewServerWeb,The length of the statement  "            if (!Directory.Exists(Core.StoragePath + intNewID.ToString() + @"\backups\")) Directory.CreateDirectory(Core.StoragePath + intNewID.ToString() + @"\backups\");" is 159.
Long Statement,YAMS,Database,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Functions\Database.cs,NewServerWeb,The length of the statement  "            if (!Directory.Exists(Core.StoragePath + intNewID.ToString() + @"\renders\")) Directory.CreateDirectory(Core.StoragePath + intNewID.ToString() + @"\renders\");" is 159.
Long Statement,YAMS,Database,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Functions\Database.cs,NewServerWeb,The length of the statement  "            if (!Directory.Exists(Core.StoragePath + intNewID.ToString() + @"\renders\overviewer\")) Directory.CreateDirectory(Core.StoragePath + intNewID.ToString() + @"\renders\overviewer\");" is 181.
Long Statement,YAMS,Database,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Functions\Database.cs,NewServerWeb,The length of the statement  "            if (!Directory.Exists(Core.StoragePath + intNewID.ToString() + @"\renders\overviewer\output\")) Directory.CreateDirectory(Core.StoragePath + intNewID.ToString() + @"\renders\overviewer\output\");" is 195.
Long Statement,YAMS,Database,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Functions\Database.cs,NewServerWeb,The length of the statement  "            //if (!File.Exists(Core.StoragePath + intNewID.ToString() + @"\banned-ips.txt")) File.Create(Core.StoragePath + intNewID.ToString() + @"\banned-ips.txt");" is 154.
Long Statement,YAMS,Database,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Functions\Database.cs,NewServerWeb,The length of the statement  "            //if (!File.Exists(Core.StoragePath + intNewID.ToString() + @"\banned-players.txt")) File.Create(Core.StoragePath + intNewID.ToString() + @"\banned-players.txt");" is 162.
Long Statement,YAMS,Database,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Functions\Database.cs,NewServerWeb,The length of the statement  "            //if (!File.Exists(Core.StoragePath + intNewID.ToString() + @"\ops.txt")) File.Create(Core.StoragePath + intNewID.ToString() + @"\ops.txt");" is 140.
Long Statement,YAMS,Database,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Functions\Database.cs,NewServerWeb,The length of the statement  "            //if (!File.Exists(Core.StoragePath + intNewID.ToString() + @"\white-list.txt")) File.Create(Core.StoragePath + intNewID.ToString() + @"\white-list.txt");" is 154.
Long Statement,YAMS,Database,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Functions\Database.cs,GetPlayerLevel,The length of the statement  "                SqlCeCommand cmd = new SqlCeCommand("SELECT PlayerLevel FROM Players WHERE PlayerName = @name AND PlayerServer = @id"' connLocal);" is 130.
Long Statement,YAMS,Database,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Functions\Database.cs,GetPlayerCount,The length of the statement  "                SqlCeCommand cmd = new SqlCeCommand("SELECT COUNT(PlayerID) AS Counter FROM Players WHERE PlayerServer = @id"' connLocal);" is 122.
Long Statement,YAMS,Database,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Functions\Database.cs,GetJobs,The length of the statement  "            SqlCeCommand cmd = new SqlCeCommand("SELECT * FROM Jobs WHERE (JobHour = -1 AND JobMinute = @minute) OR (JobHour = @hour AND JobMinute = @minute)"' connLocal);" is 159.
Long Statement,YAMS,Database,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Functions\Database.cs,AddJob,The length of the statement  "            cmd.CommandText = "INSERT INTO Jobs (JobAction' JobHour' JobMinute' JobParams' JobServer) VALUES (@action' @hour' @minute' @params' @server);";" is 143.
Long Statement,YAMS,Database,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Functions\Database.cs,ListJobs,The length of the statement  "            SqlCeCommand cmd = new SqlCeCommand("SELECT Jobs.*' MCServers.ServerTitle FROM Jobs LEFT JOIN MCServers ON Jobs.JobServer = MCServers.ServerID"' connLocal);" is 156.
Long Statement,YAMS,MCServer,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Objects\Server.cs,GetProperty,The length of the statement  "                Database.AddLog("Cannot get property \"" + strPropertyName + "\" for server " + this.ServerTitle' "server"' "error"' false' this.ServerID);" is 139.
Long Statement,YAMS,MCServer,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Objects\Server.cs,SaveProperty,The length of the statement  "            if (File.Exists(this.ServerDirectory + @"\server.properties.UPDATE")) strPathToRead = this.ServerDirectory + @"\server.properties.UPDATE";" is 138.
Long Statement,YAMS,MCServer,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Objects\Server.cs,SaveProperty,The length of the statement  "            parser.SaveSettings(this.ServerDirectory + @"\server.properties.UPDATE"' "#Minecraft server properties\r\n#Generated by YAMS " + DateTime.Now.ToString() + "\r\n");" is 163.
Long Statement,YAMS,MCServer,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Objects\Server.cs,Start,The length of the statement  "            if (!Util.ReplaceFile(Core.RootFolder + "\\lib\\" + strFile' Core.RootFolder + "\\lib\\" + strFile + ".UPDATE")) return;" is 120.
Long Statement,YAMS,MCServer,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Objects\Server.cs,Start,The length of the statement  "            if (!Util.ReplaceFile(this.strWorkingDir + "server.properties"' this.strWorkingDir + "server.properties.UPDATE")) return;" is 121.
Long Statement,YAMS,MCServer,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Objects\Server.cs,Start,The length of the statement  "                        strArgs += "-server -XX:+UseConcMarkSweepGC -XX:+UseParNewGC -XX:+CMSIncrementalPacing -XX:ParallelGCThreads=" + intGCCores + " -XX:+AggressiveOpts";" is 149.
Long Statement,YAMS,MCServer,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Objects\Server.cs,Start,The length of the statement  "                    if (this.ServerType == "bukkit" || this.ServerType == "bukkit-beta" || this.ServerType == "bukkit-dev" || this.ServerType == "custom")" is 134.
Long Statement,YAMS,MCServer,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Objects\Server.cs,Start,The length of the statement  "                if (Database.GetSetting("EnableOpenFirewall"' "YAMS") == "true") Networking.OpenFirewallPort(this.Port' this.ServerTitle);" is 122.
Long Statement,YAMS,MCServer,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Objects\Server.cs,Start,The length of the statement  "                if (Database.GetSetting("EnablePortForwarding"' "YAMS") == "true") Networking.OpenUPnP(this.Port' this.ServerTitle' this.ListenIP);" is 131.
Long Statement,YAMS,MCServer,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Objects\Server.cs,DelayedRestart,The length of the statement  "            Database.AddLog("AutoRestart initiated with " + intSeconds.ToString() + " second timer"' "server"' "info"' false' this.ServerID);" is 129.
Long Statement,YAMS,MCServer,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Objects\Server.cs,RestarterTick,The length of the statement  "                if (this.intRestartSeconds % 10 == 0) Send("say Server will restart in " + this.intRestartSeconds.ToString() + " seconds.");" is 124.
Long Statement,YAMS,MCServer,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Objects\Server.cs,RestarterTick,The length of the statement  "                if (this.intRestartSeconds % 5 == 0) Send("say Server will restart in " + this.intRestartSeconds.ToString() + " seconds.");" is 123.
Long Statement,YAMS,MCServer,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Objects\Server.cs,ServerError,The length of the statement  "                        if (regPlayerChat.Match(strMessage).Success || regPlayerPM.Match(strMessage).Success || regConsoleChat.Match(strMessage).Success) strLevel = "chat";" is 148.
Long Statement,YAMS,MCServer,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Objects\Server.cs,ServerError,The length of the statement  "                        if (regPlayerLoggedIn.Match(strMessage).Success) this.PlayerLogin(regPlayerLoggedIn.Match(strMessage).Groups[1].Value); //is a login event" is 138.
Long Statement,YAMS,MCServer,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Objects\Server.cs,ServerError,The length of the statement  "                        if (regPlayerLoggedOut.Match(strMessage).Success) this.PlayerLogout(regPlayerLoggedOut.Match(strMessage).Groups[1].Value); //logout event" is 137.
Long Statement,YAMS,MCServer,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Objects\Server.cs,ServerError,The length of the statement  "                        if (regServerVersion.Match(strMessage).Success) this.ServerVersion = strMessage.Replace("Starting minecraft server version "' "");" is 130.
Long Statement,YAMS,MCServer,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Objects\Server.cs,ServerError,The length of the statement  "                        if (regGameMode.Match(strMessage).Success) this.GameMode = Convert.ToInt32(regGameMode.Match(strMessage).Groups[1].Value);" is 122.
Long Statement,YAMS,MCServer,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Objects\Server.cs,ServerError,The length of the statement  "            } else if (strMessage.IndexOf("You need to agree to the EULA in order to run the server. Go to eula.txt for more info.") > -1)" is 126.
Long Statement,YAMS,MCServer,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Objects\Server.cs,ServerExited,The length of the statement  "                    parser.SaveSettings(this.ServerDirectory + @"\eula.txt"' "#Minecraft EULA file\r\n#Generated by YAMS " + DateTime.Now.ToString() + "\r\n");" is 139.
Long Statement,YAMS,MCServer,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Objects\Server.cs,ClearWorld,The length of the statement  "                string strRandomSeed = random.Next(-2147483648' 2147483647).ToString();  //These are the upper and lower limits for a seed number in Minecraft" is 142.
Long Statement,YAMS,Util,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Functions\Util.cs,HasMCClient,The length of the statement  "            if (Directory.Exists(Path.Combine(root' @"versions\")) && Directory.GetDirectories(Path.Combine(root' @"versions\")).Length != 0) return true;" is 142.
Long Statement,YAMS,Util,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Functions\Util.cs,HasMCClientSystem,The length of the statement  "            return HasMCClient(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.System)' @"config\systemprofile\AppData\Roaming\.minecraft\"));" is 147.
Long Statement,YAMS,Util,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Functions\Util.cs,CopyMCClient,The length of the statement  "            Copy(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData)' @".minecraft\")' Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.System)' @"config\systemprofile\AppData\Roaming\.minecraft\"));" is 233.
Long Statement,YAMS,Util,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Functions\Util.cs,FirstRun,The length of the statement  "            Database.SaveSetting("PublicListenPort"' Convert.ToString(Networking.TcpPort.FindNextAvailablePort(80))); //Find nearest open port to 80 for public site" is 152.
Long Statement,YAMS,Util,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Functions\Util.cs,PhoneHome,The length of the statement  "                double Framework = Convert.ToDouble(version_names[version_names.Length - 1].Remove(0' 1)' CultureInfo.InvariantCulture);" is 120.
Long Statement,YAMS,Util,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Functions\Util.cs,UpdateDNS,The length of the statement  "                string strVars = "action=update&domain=" + Database.GetSetting("DNSName"' "YAMS") + "&secret=" + Database.GetSetting("DNSSecret"' "YAMS") + "&ip=" + externalIP;" is 160.
Long Statement,YAMS,WebServer,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Web\WebServer.cs,Init,The length of the statement  "            adminServer.Add(HttpListener.Create(IPAddress.Any' Convert.ToInt32(YAMS.Database.GetSetting("AdminListenPort"' "YAMS"))));" is 122.
Long Statement,YAMS,WebServer,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Web\WebServer.cs,Init,The length of the statement  "                Networking.OpenUPnP(Convert.ToInt32(YAMS.Database.GetSetting("AdminListenPort"' "YAMS"))' "Admin website"' YAMS.Database.GetSetting("YAMSListenIP"' "YAMS"));" is 157.
Long Statement,YAMS,WebServer,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Web\WebServer.cs,Init,The length of the statement  "                    if (!Directory.Exists(Core.StoragePath + intServerID + "\\renders\\")) Directory.CreateDirectory(Core.StoragePath + intServerID + "\\renders\\");" is 145.
Long Statement,YAMS,WebServer,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Web\WebServer.cs,Init,The length of the statement  "                    publicModule.Resources.Add(new FileResources("/servers/" + intServerID + "/renders/"' Core.StoragePath + intServerID + "\\renders\\"));" is 135.
Long Statement,YAMS,WebServer,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Web\WebServer.cs,Init,The length of the statement  "                    if (!Directory.Exists(Core.StoragePath + intServerID + "\\backups\\")) Directory.CreateDirectory(Core.StoragePath + intServerID + "\\backups\\");" is 145.
Long Statement,YAMS,WebServer,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Web\WebServer.cs,Init,The length of the statement  "                    publicModule.Resources.Add(new FileResources("/servers/" + intServerID + "/backups/"' Core.StoragePath + intServerID + "\\backups\\"));" is 135.
Long Statement,YAMS,WebServer,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Web\WebServer.cs,Init,The length of the statement  "                publicServer.Add(HttpListener.Create(IPAddress.Any' Convert.ToInt32(YAMS.Database.GetSetting("PublicListenPort"' "YAMS"))));" is 124.
Long Statement,YAMS,WebServer,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Web\WebServer.cs,Init,The length of the statement  "                    Networking.OpenUPnP(Convert.ToInt32(YAMS.Database.GetSetting("PublicListenPort"' "YAMS"))' "Public website"' YAMS.Database.GetSetting("YAMSListenIP"' "YAMS"));" is 159.
Long Statement,YAMS,WebServer,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Web\WebServer.cs,myServer_ErrorPageRequested,The length of the statement  "            byte[] buffer = Encoding.UTF8.GetBytes("<h1>500 Internal Server Error</h1><p>" + e.Exception.Message + "</p><p>" + e.Exception.Source + "</p><p>" + e.Exception.StackTrace + "</p><p>" + e.Exception.InnerException.StackTrace + "</p>");" is 233.
Long Statement,YAMS.Web,AdminAPI,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Web\AdminAPI.cs,Process,The length of the statement  "                            AddOns.Tectonicus tecton = new AddOns.Tectonicus(s' "lighting=" + param["lighting"] + "&night=" + param["night"] + "&delete=" + param["delete"]);" is 145.
Long Statement,YAMS.Web,AdminAPI,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Web\AdminAPI.cs,Process,The length of the statement  "                                              "\"custom\" : \"" + Database.GetSetting(intServerID' "ServerCustomJAR").ToString().Replace("\\"' "\\\\").Replace("\""' "\\\"") + "\"'" +" is 136.
Long Statement,YAMS.Web,AdminAPI,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Web\AdminAPI.cs,Process,The length of the statement  "                                              "\"listen\" : \"" + Core.Servers[Convert.ToInt32(context.Request.Parameters["serverid"])].GetProperty("server-ip") + "\"'" +" is 124.
Long Statement,YAMS.Web,AdminAPI,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Web\AdminAPI.cs,Process,The length of the statement  "                                              "\"port\" : \"" + Core.Servers[Convert.ToInt32(context.Request.Parameters["serverid"])].GetProperty("server-port") + "\"'" +" is 124.
Long Statement,YAMS.Web,AdminAPI,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Web\AdminAPI.cs,Process,The length of the statement  "                                            "\"internalip\" : \"" + Core.Servers[Convert.ToInt32(context.Request.Parameters["serverid"])].GetProperty("server-ip") + "\"' " +" is 129.
Long Statement,YAMS.Web,AdminAPI,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Web\AdminAPI.cs,Process,The length of the statement  "                                            "\"mcport\" : " + Core.Servers[Convert.ToInt32(context.Request.Parameters["serverid"])].GetProperty("server-port") + "' " +" is 123.
Long Statement,YAMS.Web,AdminAPI,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Web\AdminAPI.cs,Process,The length of the statement  "                                            "\"message\" : " + JsonConvert.SerializeObject(Database.GetSetting(intServerID' "ServerWebBody")' Formatting.None) + "}";" is 121.
Long Statement,YAMS.Web,AdminAPI,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Web\AdminAPI.cs,Process,The length of the statement  "                                strResponse += "<p><label for=\"" + (string)option["key"] + "\" title=\"" + (string)option["description"] + "\">" + (string)option["name"] + "</label>";" is 152.
Long Statement,YAMS.Web,AdminAPI,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Web\AdminAPI.cs,Process,The length of the statement  "                                string strValue = Core.Servers[Convert.ToInt32(context.Request.Parameters["serverid"])].GetProperty((string)option["key"]);" is 123.
Long Statement,YAMS.Web,AdminAPI,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Web\AdminAPI.cs,Process,The length of the statement  "                            List<string> listConfig = Core.Servers[Convert.ToInt32(context.Request.Parameters["serverid"])].ReadConfig(param["file"]);" is 122.
Long Statement,YAMS.Web,AdminAPI,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Web\AdminAPI.cs,Process,The length of the statement  "                            strResponse = "{ \"enabled\" : " + Core.Servers[Convert.ToInt32(context.Request.Parameters["serverid"])].GetProperty("white-list") + " }";" is 138.
Long Statement,YAMS.Web,AdminAPI,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Web\AdminAPI.cs,Process,The length of the statement  "                            strResponse = JsonConvert.SerializeObject(dicNetwork' Formatting.Indented).Replace(@"\"'"").Replace("\"["' "[").Replace("]\""' "]");" is 132.
Long Statement,YAMS.Web,AdminAPI,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Web\AdminAPI.cs,Process,The length of the statement  "                            Database.AddLog("Network settings have been saved' to apply changes a service restart is required. Please check they are correct before restarting"' "web"' "warn");" is 164.
Long Statement,YAMS.Web,AdminAPI,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Web\AdminAPI.cs,Process,The length of the statement  "                            NewServer.Add(new KeyValuePair<string' string>("server-port"' Networking.TcpPort.FindNextAvailablePort(25565).ToString()));" is 123.
Long Statement,YAMS.Web,AdminAPI,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Web\AdminAPI.cs,Process,The length of the statement  "                            strResponse = "{ \"name\":\"" + Database.GetSetting("DNSName"' "YAMS") + "\"' \"secret\": \"" + Database.GetSetting("DNSSecret"' "YAMS") + "\"' \"external\" : \"" + Networking.GetExternalIP().ToString() + "\" }";" is 212.
Long Statement,YAMS.Web,PublicAPI,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Web\PublicAPI.cs,Process,The length of the statement  "            if (regServerGMap.Match(context.Request.Uri.AbsolutePath).Success || regServerRenders.Match(context.Request.Uri.AbsolutePath).Success)" is 134.
Long Statement,YAMS.Web,PublicAPI,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Web\PublicAPI.cs,Process,The length of the statement  "                        strClientURL = "This server is running the weekly snapshots' <a href=\"" + (string)jVers["pre-client"] + "\">download current client</a>.";" is 139.
Long Statement,YAMS.Web,PublicAPI,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Web\PublicAPI.cs,Process,The length of the statement  "                    strConnectAddress += "<input type=\"hidden\" id=\"server-host\" value=\"" + Networking.GetExternalIP().ToString() + "\" />" +" is 125.
Complex Conditional,YAMS,AutoUpdate,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Functions\AutoUpdate.cs,CheckUpdates,The conditional expression  "(bolDllUpdateAvailable || bolServiceUpdateAvailable || bolWebUpdateAvailable || bolRestartNeeded || bolLibUpdateAvailable) && Convert.ToBoolean(Database.GetSetting("RestartOnSVCUpdate"' "YAMS"))"  is complex.
Complex Conditional,YAMS,AutoUpdate,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Functions\AutoUpdate.cs,CheckUpdates,The conditional expression  "(bolServerUpdateAvailable || bolBukkitUpdateAvailable || bolPreUpdateAvailable) && Convert.ToBoolean(Database.GetSetting("RestartOnJarUpdate"' "YAMS"))"  is complex.
Complex Conditional,YAMS,AutoUpdate,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Functions\AutoUpdate.cs,CheckUpdates,The conditional expression  "((kvp.Value.ServerType == "vanilla" && bolServerUpdateAvailable) || (kvp.Value.ServerType == "bukkit" && bolBukkitUpdateAvailable)                             || (kvp.Value.ServerType == "bukkit-beta" && bolBukkitBetaUpdateAvailable) || (kvp.Value.ServerType == "bukkit-dev" && bolBukkitDevUpdateAvailable))"  is complex.
Complex Conditional,YAMS,MCServer,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Objects\Server.cs,Start,The conditional expression  "this.ServerType == "bukkit" || this.ServerType == "bukkit-beta" || this.ServerType == "bukkit-dev" || this.ServerType == "custom""  is complex.
Empty Catch Block,YAMS,Core,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Core.cs,StartUp,The method has an empty catch block.
Empty Catch Block,YAMS,Core,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Core.cs,StartUp,The method has an empty catch block.
Empty Catch Block,YAMS,Core,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Core.cs,StartUp,The method has an empty catch block.
Empty Catch Block,YAMS,TelnetServer,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Objects\Telnet.cs,SendMessage,The method has an empty catch block.
Magic Number,YAMS.AddOns,App,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\AddOns\App.cs,App,The following statement contains a magic number: arrValues.Length == 2
Magic Number,YAMS.AddOns,BiomeExtractor,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\AddOns\BiomeExtractor.cs,DoWork,The following statement contains a magic number: !prcBiomeExtractor.WaitForExit(1000)
Magic Number,YAMS.AddOns,c10t,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\AddOns\c10t.cs,DoWork,The following statement contains a magic number: !prcc10t.WaitForExit(1000)
Magic Number,YAMS.AddOns,NBToolkit,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\AddOns\NBToolkit.cs,DoWork,The following statement contains a magic number: !prc.WaitForExit(1000)
Magic Number,YAMS.AddOns,Overviewer,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\AddOns\Overviewer.cs,DoWork,The following statement contains a magic number: !prcOverviewer.WaitForExit(1000)
Magic Number,YAMS.AddOns,Overviewer,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\AddOns\Overviewer.cs,DoWork,The following statement contains a magic number: Thread.Sleep(10000);
Magic Number,YAMS.AddOns,Tectonicus,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\AddOns\Tectonicus.cs,DoWork,The following statement contains a magic number: !prc.WaitForExit(1000)
Magic Number,YAMS.AddOns,Tectonicus,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\AddOns\Tectonicus.cs,DoWork,The following statement contains a magic number: Thread.Sleep(10000);
Magic Number,YAMS,AutoUpdate,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Functions\AutoUpdate.cs,ExtractZip,The following statement contains a magic number: int size = 2048;
Magic Number,YAMS,AutoUpdate,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Functions\AutoUpdate.cs,ExtractZip,The following statement contains a magic number: byte[] data = new byte[2048];
Magic Number,YAMS,AutoUpdate,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Functions\AutoUpdate.cs,UpdateIfNeeded,The following statement contains a magic number: const int ArrSize = 10000;
Magic Number,YAMS,JobEngine,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Functions\JobEngine.cs,Init,The following statement contains a magic number: timJob = new Timer(new TimerCallback(Tick)' null' 0' 1 * 60 * 1000);
Magic Number,YAMS,JobEngine,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Functions\JobEngine.cs,Init,The following statement contains a magic number: timJob = new Timer(new TimerCallback(Tick)' null' 0' 1 * 60 * 1000);
Magic Number,YAMS,JobEngine,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Functions\JobEngine.cs,Tick,The following statement contains a magic number: intMinutes % 5 == 0 && Database.GetSetting("DNSName"' "YAMS") != ""
Magic Number,YAMS,JobEngine,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Functions\JobEngine.cs,Tick,The following statement contains a magic number: arrValues.Length == 2
Magic Number,YAMS,TelnetClient,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Objects\Telnet.cs,ReadMessage,The following statement contains a magic number: byte[] message = new byte[1024];
Magic Number,YAMS,WebTemplate,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Web\WebTemplate.cs,ReplaceTags,The following statement contains a magic number: Regex replacer = new Regex(OpenTag + match.Groups[2].Value + CloseTag);
Magic Number,YAMS,WebTemplate,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Web\WebTemplate.cs,ReplaceTags,The following statement contains a magic number: strOutput = replacer.Replace(strOutput' dicInputTags[match.Groups[2].Value]);
Magic Number,YAMS,WebTemplate,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Web\WebTemplate.cs,ReplaceTags,The following statement contains a magic number: dicInputTags.ContainsKey(match.Groups[2].Value)
Magic Number,YAMS,Database,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Functions\Database.cs,ReturnLogRows,The following statement contains a magic number: intNumRows = 1000;
Magic Number,YAMS,Database,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Functions\Database.cs,AddLog,The following statement contains a magic number: strMessage = strMessage.Substring(0' 255);
Magic Number,YAMS,Database,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Functions\Database.cs,AddLog,The following statement contains a magic number: strMessage.Length > 255
Magic Number,YAMS,Database,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Functions\Database.cs,AddLog,The following statement contains a magic number: cmdIns.Parameters.Add("@msg"' Util.Left(strMessage' 255));
Magic Number,YAMS,Database,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Functions\Database.cs,AddLog,The following statement contains a magic number: cmdIns.Parameters.Add("@msg"' Util.Left(strMessage' 255));
Magic Number,YAMS,Database,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Functions\Database.cs,UpdateDB,The following statement contains a magic number: switch (Convert.ToInt32(GetSetting("DBSchema"' "YAMS")))             {                 case 1:                     //Update from Schema 1                     Database.SaveSetting("StoragePath"' Core.RootFolder + @"\servers\");                     Database.SaveSetting("DBSchema"' "2");                     goto case 2;                 case 2:                     //Update from Schema 2                     Database.SaveSetting("UsageData"' "true");                     Database.SaveSetting("DBSchema"' "3");                     goto case 3;                 case 3:                     Database.SaveSetting("EnablePortForwarding"' "true");                     Database.SaveSetting("EnableOpenFirewall"' "true");                     Database.SaveSetting("YAMSListenIP"' Networking.GetListenIP().ToString());                     AddJob("update"' -1' 0' ""' 0);                     AddJob("backup"' -1' 30' ""' 1);                     Database.SaveSetting("DBSchema"' "4");                     goto case 4;                     //goto case 3; //etc                 case 4:                     Database.SaveSetting("DNSName"' "");                     Database.SaveSetting("DNSSecret"' "");                     Database.SaveSetting("LastExternalIP"' "");                     Database.SaveSetting("DBSchema"' "5");                     goto case 5;                 case 5:                     Database.SaveSetting("EnablePublicSite"' "true");                     Database.SaveSetting("DBSchema"' "6");                     goto case 6;                 case 6:                     Database.SaveSetting("EnableTelnet"' "false");                     Database.SaveSetting("TelnetPort"' "56553");                     Database.SaveSetting("DBSchema"' "7");                     goto case 7;                 case 7:                     Database.SaveSetting("BukkitBetaInstalled"' "false");                     Database.SaveSetting("BukkitDevInstalled"' "false");                     Database.SaveSetting("DBSchema"' "8");                     goto case 8;                 case 8:                     Database.ExecuteSQL("ALTER TABLE MCServers ADD COLUMN ServerCustomJAR ntext");                     Database.ExecuteSQL("ALTER TABLE MCServers ADD COLUMN ServerWebBody ntext");                     Database.SaveSetting("DBSchema"' "9");                     goto case 9;                 case 9:                     break;                 default:                     break;             }
Magic Number,YAMS,Database,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Functions\Database.cs,UpdateDB,The following statement contains a magic number: switch (Convert.ToInt32(GetSetting("DBSchema"' "YAMS")))             {                 case 1:                     //Update from Schema 1                     Database.SaveSetting("StoragePath"' Core.RootFolder + @"\servers\");                     Database.SaveSetting("DBSchema"' "2");                     goto case 2;                 case 2:                     //Update from Schema 2                     Database.SaveSetting("UsageData"' "true");                     Database.SaveSetting("DBSchema"' "3");                     goto case 3;                 case 3:                     Database.SaveSetting("EnablePortForwarding"' "true");                     Database.SaveSetting("EnableOpenFirewall"' "true");                     Database.SaveSetting("YAMSListenIP"' Networking.GetListenIP().ToString());                     AddJob("update"' -1' 0' ""' 0);                     AddJob("backup"' -1' 30' ""' 1);                     Database.SaveSetting("DBSchema"' "4");                     goto case 4;                     //goto case 3; //etc                 case 4:                     Database.SaveSetting("DNSName"' "");                     Database.SaveSetting("DNSSecret"' "");                     Database.SaveSetting("LastExternalIP"' "");                     Database.SaveSetting("DBSchema"' "5");                     goto case 5;                 case 5:                     Database.SaveSetting("EnablePublicSite"' "true");                     Database.SaveSetting("DBSchema"' "6");                     goto case 6;                 case 6:                     Database.SaveSetting("EnableTelnet"' "false");                     Database.SaveSetting("TelnetPort"' "56553");                     Database.SaveSetting("DBSchema"' "7");                     goto case 7;                 case 7:                     Database.SaveSetting("BukkitBetaInstalled"' "false");                     Database.SaveSetting("BukkitDevInstalled"' "false");                     Database.SaveSetting("DBSchema"' "8");                     goto case 8;                 case 8:                     Database.ExecuteSQL("ALTER TABLE MCServers ADD COLUMN ServerCustomJAR ntext");                     Database.ExecuteSQL("ALTER TABLE MCServers ADD COLUMN ServerWebBody ntext");                     Database.SaveSetting("DBSchema"' "9");                     goto case 9;                 case 9:                     break;                 default:                     break;             }
Magic Number,YAMS,Database,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Functions\Database.cs,UpdateDB,The following statement contains a magic number: switch (Convert.ToInt32(GetSetting("DBSchema"' "YAMS")))             {                 case 1:                     //Update from Schema 1                     Database.SaveSetting("StoragePath"' Core.RootFolder + @"\servers\");                     Database.SaveSetting("DBSchema"' "2");                     goto case 2;                 case 2:                     //Update from Schema 2                     Database.SaveSetting("UsageData"' "true");                     Database.SaveSetting("DBSchema"' "3");                     goto case 3;                 case 3:                     Database.SaveSetting("EnablePortForwarding"' "true");                     Database.SaveSetting("EnableOpenFirewall"' "true");                     Database.SaveSetting("YAMSListenIP"' Networking.GetListenIP().ToString());                     AddJob("update"' -1' 0' ""' 0);                     AddJob("backup"' -1' 30' ""' 1);                     Database.SaveSetting("DBSchema"' "4");                     goto case 4;                     //goto case 3; //etc                 case 4:                     Database.SaveSetting("DNSName"' "");                     Database.SaveSetting("DNSSecret"' "");                     Database.SaveSetting("LastExternalIP"' "");                     Database.SaveSetting("DBSchema"' "5");                     goto case 5;                 case 5:                     Database.SaveSetting("EnablePublicSite"' "true");                     Database.SaveSetting("DBSchema"' "6");                     goto case 6;                 case 6:                     Database.SaveSetting("EnableTelnet"' "false");                     Database.SaveSetting("TelnetPort"' "56553");                     Database.SaveSetting("DBSchema"' "7");                     goto case 7;                 case 7:                     Database.SaveSetting("BukkitBetaInstalled"' "false");                     Database.SaveSetting("BukkitDevInstalled"' "false");                     Database.SaveSetting("DBSchema"' "8");                     goto case 8;                 case 8:                     Database.ExecuteSQL("ALTER TABLE MCServers ADD COLUMN ServerCustomJAR ntext");                     Database.ExecuteSQL("ALTER TABLE MCServers ADD COLUMN ServerWebBody ntext");                     Database.SaveSetting("DBSchema"' "9");                     goto case 9;                 case 9:                     break;                 default:                     break;             }
Magic Number,YAMS,Database,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Functions\Database.cs,UpdateDB,The following statement contains a magic number: switch (Convert.ToInt32(GetSetting("DBSchema"' "YAMS")))             {                 case 1:                     //Update from Schema 1                     Database.SaveSetting("StoragePath"' Core.RootFolder + @"\servers\");                     Database.SaveSetting("DBSchema"' "2");                     goto case 2;                 case 2:                     //Update from Schema 2                     Database.SaveSetting("UsageData"' "true");                     Database.SaveSetting("DBSchema"' "3");                     goto case 3;                 case 3:                     Database.SaveSetting("EnablePortForwarding"' "true");                     Database.SaveSetting("EnableOpenFirewall"' "true");                     Database.SaveSetting("YAMSListenIP"' Networking.GetListenIP().ToString());                     AddJob("update"' -1' 0' ""' 0);                     AddJob("backup"' -1' 30' ""' 1);                     Database.SaveSetting("DBSchema"' "4");                     goto case 4;                     //goto case 3; //etc                 case 4:                     Database.SaveSetting("DNSName"' "");                     Database.SaveSetting("DNSSecret"' "");                     Database.SaveSetting("LastExternalIP"' "");                     Database.SaveSetting("DBSchema"' "5");                     goto case 5;                 case 5:                     Database.SaveSetting("EnablePublicSite"' "true");                     Database.SaveSetting("DBSchema"' "6");                     goto case 6;                 case 6:                     Database.SaveSetting("EnableTelnet"' "false");                     Database.SaveSetting("TelnetPort"' "56553");                     Database.SaveSetting("DBSchema"' "7");                     goto case 7;                 case 7:                     Database.SaveSetting("BukkitBetaInstalled"' "false");                     Database.SaveSetting("BukkitDevInstalled"' "false");                     Database.SaveSetting("DBSchema"' "8");                     goto case 8;                 case 8:                     Database.ExecuteSQL("ALTER TABLE MCServers ADD COLUMN ServerCustomJAR ntext");                     Database.ExecuteSQL("ALTER TABLE MCServers ADD COLUMN ServerWebBody ntext");                     Database.SaveSetting("DBSchema"' "9");                     goto case 9;                 case 9:                     break;                 default:                     break;             }
Magic Number,YAMS,Database,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Functions\Database.cs,UpdateDB,The following statement contains a magic number: switch (Convert.ToInt32(GetSetting("DBSchema"' "YAMS")))             {                 case 1:                     //Update from Schema 1                     Database.SaveSetting("StoragePath"' Core.RootFolder + @"\servers\");                     Database.SaveSetting("DBSchema"' "2");                     goto case 2;                 case 2:                     //Update from Schema 2                     Database.SaveSetting("UsageData"' "true");                     Database.SaveSetting("DBSchema"' "3");                     goto case 3;                 case 3:                     Database.SaveSetting("EnablePortForwarding"' "true");                     Database.SaveSetting("EnableOpenFirewall"' "true");                     Database.SaveSetting("YAMSListenIP"' Networking.GetListenIP().ToString());                     AddJob("update"' -1' 0' ""' 0);                     AddJob("backup"' -1' 30' ""' 1);                     Database.SaveSetting("DBSchema"' "4");                     goto case 4;                     //goto case 3; //etc                 case 4:                     Database.SaveSetting("DNSName"' "");                     Database.SaveSetting("DNSSecret"' "");                     Database.SaveSetting("LastExternalIP"' "");                     Database.SaveSetting("DBSchema"' "5");                     goto case 5;                 case 5:                     Database.SaveSetting("EnablePublicSite"' "true");                     Database.SaveSetting("DBSchema"' "6");                     goto case 6;                 case 6:                     Database.SaveSetting("EnableTelnet"' "false");                     Database.SaveSetting("TelnetPort"' "56553");                     Database.SaveSetting("DBSchema"' "7");                     goto case 7;                 case 7:                     Database.SaveSetting("BukkitBetaInstalled"' "false");                     Database.SaveSetting("BukkitDevInstalled"' "false");                     Database.SaveSetting("DBSchema"' "8");                     goto case 8;                 case 8:                     Database.ExecuteSQL("ALTER TABLE MCServers ADD COLUMN ServerCustomJAR ntext");                     Database.ExecuteSQL("ALTER TABLE MCServers ADD COLUMN ServerWebBody ntext");                     Database.SaveSetting("DBSchema"' "9");                     goto case 9;                 case 9:                     break;                 default:                     break;             }
Magic Number,YAMS,Database,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Functions\Database.cs,UpdateDB,The following statement contains a magic number: switch (Convert.ToInt32(GetSetting("DBSchema"' "YAMS")))             {                 case 1:                     //Update from Schema 1                     Database.SaveSetting("StoragePath"' Core.RootFolder + @"\servers\");                     Database.SaveSetting("DBSchema"' "2");                     goto case 2;                 case 2:                     //Update from Schema 2                     Database.SaveSetting("UsageData"' "true");                     Database.SaveSetting("DBSchema"' "3");                     goto case 3;                 case 3:                     Database.SaveSetting("EnablePortForwarding"' "true");                     Database.SaveSetting("EnableOpenFirewall"' "true");                     Database.SaveSetting("YAMSListenIP"' Networking.GetListenIP().ToString());                     AddJob("update"' -1' 0' ""' 0);                     AddJob("backup"' -1' 30' ""' 1);                     Database.SaveSetting("DBSchema"' "4");                     goto case 4;                     //goto case 3; //etc                 case 4:                     Database.SaveSetting("DNSName"' "");                     Database.SaveSetting("DNSSecret"' "");                     Database.SaveSetting("LastExternalIP"' "");                     Database.SaveSetting("DBSchema"' "5");                     goto case 5;                 case 5:                     Database.SaveSetting("EnablePublicSite"' "true");                     Database.SaveSetting("DBSchema"' "6");                     goto case 6;                 case 6:                     Database.SaveSetting("EnableTelnet"' "false");                     Database.SaveSetting("TelnetPort"' "56553");                     Database.SaveSetting("DBSchema"' "7");                     goto case 7;                 case 7:                     Database.SaveSetting("BukkitBetaInstalled"' "false");                     Database.SaveSetting("BukkitDevInstalled"' "false");                     Database.SaveSetting("DBSchema"' "8");                     goto case 8;                 case 8:                     Database.ExecuteSQL("ALTER TABLE MCServers ADD COLUMN ServerCustomJAR ntext");                     Database.ExecuteSQL("ALTER TABLE MCServers ADD COLUMN ServerWebBody ntext");                     Database.SaveSetting("DBSchema"' "9");                     goto case 9;                 case 9:                     break;                 default:                     break;             }
Magic Number,YAMS,Database,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Functions\Database.cs,UpdateDB,The following statement contains a magic number: switch (Convert.ToInt32(GetSetting("DBSchema"' "YAMS")))             {                 case 1:                     //Update from Schema 1                     Database.SaveSetting("StoragePath"' Core.RootFolder + @"\servers\");                     Database.SaveSetting("DBSchema"' "2");                     goto case 2;                 case 2:                     //Update from Schema 2                     Database.SaveSetting("UsageData"' "true");                     Database.SaveSetting("DBSchema"' "3");                     goto case 3;                 case 3:                     Database.SaveSetting("EnablePortForwarding"' "true");                     Database.SaveSetting("EnableOpenFirewall"' "true");                     Database.SaveSetting("YAMSListenIP"' Networking.GetListenIP().ToString());                     AddJob("update"' -1' 0' ""' 0);                     AddJob("backup"' -1' 30' ""' 1);                     Database.SaveSetting("DBSchema"' "4");                     goto case 4;                     //goto case 3; //etc                 case 4:                     Database.SaveSetting("DNSName"' "");                     Database.SaveSetting("DNSSecret"' "");                     Database.SaveSetting("LastExternalIP"' "");                     Database.SaveSetting("DBSchema"' "5");                     goto case 5;                 case 5:                     Database.SaveSetting("EnablePublicSite"' "true");                     Database.SaveSetting("DBSchema"' "6");                     goto case 6;                 case 6:                     Database.SaveSetting("EnableTelnet"' "false");                     Database.SaveSetting("TelnetPort"' "56553");                     Database.SaveSetting("DBSchema"' "7");                     goto case 7;                 case 7:                     Database.SaveSetting("BukkitBetaInstalled"' "false");                     Database.SaveSetting("BukkitDevInstalled"' "false");                     Database.SaveSetting("DBSchema"' "8");                     goto case 8;                 case 8:                     Database.ExecuteSQL("ALTER TABLE MCServers ADD COLUMN ServerCustomJAR ntext");                     Database.ExecuteSQL("ALTER TABLE MCServers ADD COLUMN ServerWebBody ntext");                     Database.SaveSetting("DBSchema"' "9");                     goto case 9;                 case 9:                     break;                 default:                     break;             }
Magic Number,YAMS,Database,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Functions\Database.cs,UpdateDB,The following statement contains a magic number: switch (Convert.ToInt32(GetSetting("DBSchema"' "YAMS")))             {                 case 1:                     //Update from Schema 1                     Database.SaveSetting("StoragePath"' Core.RootFolder + @"\servers\");                     Database.SaveSetting("DBSchema"' "2");                     goto case 2;                 case 2:                     //Update from Schema 2                     Database.SaveSetting("UsageData"' "true");                     Database.SaveSetting("DBSchema"' "3");                     goto case 3;                 case 3:                     Database.SaveSetting("EnablePortForwarding"' "true");                     Database.SaveSetting("EnableOpenFirewall"' "true");                     Database.SaveSetting("YAMSListenIP"' Networking.GetListenIP().ToString());                     AddJob("update"' -1' 0' ""' 0);                     AddJob("backup"' -1' 30' ""' 1);                     Database.SaveSetting("DBSchema"' "4");                     goto case 4;                     //goto case 3; //etc                 case 4:                     Database.SaveSetting("DNSName"' "");                     Database.SaveSetting("DNSSecret"' "");                     Database.SaveSetting("LastExternalIP"' "");                     Database.SaveSetting("DBSchema"' "5");                     goto case 5;                 case 5:                     Database.SaveSetting("EnablePublicSite"' "true");                     Database.SaveSetting("DBSchema"' "6");                     goto case 6;                 case 6:                     Database.SaveSetting("EnableTelnet"' "false");                     Database.SaveSetting("TelnetPort"' "56553");                     Database.SaveSetting("DBSchema"' "7");                     goto case 7;                 case 7:                     Database.SaveSetting("BukkitBetaInstalled"' "false");                     Database.SaveSetting("BukkitDevInstalled"' "false");                     Database.SaveSetting("DBSchema"' "8");                     goto case 8;                 case 8:                     Database.ExecuteSQL("ALTER TABLE MCServers ADD COLUMN ServerCustomJAR ntext");                     Database.ExecuteSQL("ALTER TABLE MCServers ADD COLUMN ServerWebBody ntext");                     Database.SaveSetting("DBSchema"' "9");                     goto case 9;                 case 9:                     break;                 default:                     break;             }
Magic Number,YAMS,Database,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Functions\Database.cs,UpdateDB,The following statement contains a magic number: switch (Convert.ToInt32(GetSetting("DBSchema"' "YAMS")))             {                 case 1:                     //Update from Schema 1                     Database.SaveSetting("StoragePath"' Core.RootFolder + @"\servers\");                     Database.SaveSetting("DBSchema"' "2");                     goto case 2;                 case 2:                     //Update from Schema 2                     Database.SaveSetting("UsageData"' "true");                     Database.SaveSetting("DBSchema"' "3");                     goto case 3;                 case 3:                     Database.SaveSetting("EnablePortForwarding"' "true");                     Database.SaveSetting("EnableOpenFirewall"' "true");                     Database.SaveSetting("YAMSListenIP"' Networking.GetListenIP().ToString());                     AddJob("update"' -1' 0' ""' 0);                     AddJob("backup"' -1' 30' ""' 1);                     Database.SaveSetting("DBSchema"' "4");                     goto case 4;                     //goto case 3; //etc                 case 4:                     Database.SaveSetting("DNSName"' "");                     Database.SaveSetting("DNSSecret"' "");                     Database.SaveSetting("LastExternalIP"' "");                     Database.SaveSetting("DBSchema"' "5");                     goto case 5;                 case 5:                     Database.SaveSetting("EnablePublicSite"' "true");                     Database.SaveSetting("DBSchema"' "6");                     goto case 6;                 case 6:                     Database.SaveSetting("EnableTelnet"' "false");                     Database.SaveSetting("TelnetPort"' "56553");                     Database.SaveSetting("DBSchema"' "7");                     goto case 7;                 case 7:                     Database.SaveSetting("BukkitBetaInstalled"' "false");                     Database.SaveSetting("BukkitDevInstalled"' "false");                     Database.SaveSetting("DBSchema"' "8");                     goto case 8;                 case 8:                     Database.ExecuteSQL("ALTER TABLE MCServers ADD COLUMN ServerCustomJAR ntext");                     Database.ExecuteSQL("ALTER TABLE MCServers ADD COLUMN ServerWebBody ntext");                     Database.SaveSetting("DBSchema"' "9");                     goto case 9;                 case 9:                     break;                 default:                     break;             }
Magic Number,YAMS,Database,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Functions\Database.cs,UpdateDB,The following statement contains a magic number: switch (Convert.ToInt32(GetSetting("DBSchema"' "YAMS")))             {                 case 1:                     //Update from Schema 1                     Database.SaveSetting("StoragePath"' Core.RootFolder + @"\servers\");                     Database.SaveSetting("DBSchema"' "2");                     goto case 2;                 case 2:                     //Update from Schema 2                     Database.SaveSetting("UsageData"' "true");                     Database.SaveSetting("DBSchema"' "3");                     goto case 3;                 case 3:                     Database.SaveSetting("EnablePortForwarding"' "true");                     Database.SaveSetting("EnableOpenFirewall"' "true");                     Database.SaveSetting("YAMSListenIP"' Networking.GetListenIP().ToString());                     AddJob("update"' -1' 0' ""' 0);                     AddJob("backup"' -1' 30' ""' 1);                     Database.SaveSetting("DBSchema"' "4");                     goto case 4;                     //goto case 3; //etc                 case 4:                     Database.SaveSetting("DNSName"' "");                     Database.SaveSetting("DNSSecret"' "");                     Database.SaveSetting("LastExternalIP"' "");                     Database.SaveSetting("DBSchema"' "5");                     goto case 5;                 case 5:                     Database.SaveSetting("EnablePublicSite"' "true");                     Database.SaveSetting("DBSchema"' "6");                     goto case 6;                 case 6:                     Database.SaveSetting("EnableTelnet"' "false");                     Database.SaveSetting("TelnetPort"' "56553");                     Database.SaveSetting("DBSchema"' "7");                     goto case 7;                 case 7:                     Database.SaveSetting("BukkitBetaInstalled"' "false");                     Database.SaveSetting("BukkitDevInstalled"' "false");                     Database.SaveSetting("DBSchema"' "8");                     goto case 8;                 case 8:                     Database.ExecuteSQL("ALTER TABLE MCServers ADD COLUMN ServerCustomJAR ntext");                     Database.ExecuteSQL("ALTER TABLE MCServers ADD COLUMN ServerWebBody ntext");                     Database.SaveSetting("DBSchema"' "9");                     goto case 9;                 case 9:                     break;                 default:                     break;             }
Magic Number,YAMS,Database,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Functions\Database.cs,UpdateDB,The following statement contains a magic number: switch (Convert.ToInt32(GetSetting("DBSchema"' "YAMS")))             {                 case 1:                     //Update from Schema 1                     Database.SaveSetting("StoragePath"' Core.RootFolder + @"\servers\");                     Database.SaveSetting("DBSchema"' "2");                     goto case 2;                 case 2:                     //Update from Schema 2                     Database.SaveSetting("UsageData"' "true");                     Database.SaveSetting("DBSchema"' "3");                     goto case 3;                 case 3:                     Database.SaveSetting("EnablePortForwarding"' "true");                     Database.SaveSetting("EnableOpenFirewall"' "true");                     Database.SaveSetting("YAMSListenIP"' Networking.GetListenIP().ToString());                     AddJob("update"' -1' 0' ""' 0);                     AddJob("backup"' -1' 30' ""' 1);                     Database.SaveSetting("DBSchema"' "4");                     goto case 4;                     //goto case 3; //etc                 case 4:                     Database.SaveSetting("DNSName"' "");                     Database.SaveSetting("DNSSecret"' "");                     Database.SaveSetting("LastExternalIP"' "");                     Database.SaveSetting("DBSchema"' "5");                     goto case 5;                 case 5:                     Database.SaveSetting("EnablePublicSite"' "true");                     Database.SaveSetting("DBSchema"' "6");                     goto case 6;                 case 6:                     Database.SaveSetting("EnableTelnet"' "false");                     Database.SaveSetting("TelnetPort"' "56553");                     Database.SaveSetting("DBSchema"' "7");                     goto case 7;                 case 7:                     Database.SaveSetting("BukkitBetaInstalled"' "false");                     Database.SaveSetting("BukkitDevInstalled"' "false");                     Database.SaveSetting("DBSchema"' "8");                     goto case 8;                 case 8:                     Database.ExecuteSQL("ALTER TABLE MCServers ADD COLUMN ServerCustomJAR ntext");                     Database.ExecuteSQL("ALTER TABLE MCServers ADD COLUMN ServerWebBody ntext");                     Database.SaveSetting("DBSchema"' "9");                     goto case 9;                 case 9:                     break;                 default:                     break;             }
Magic Number,YAMS,Database,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Functions\Database.cs,UpdateDB,The following statement contains a magic number: switch (Convert.ToInt32(GetSetting("DBSchema"' "YAMS")))             {                 case 1:                     //Update from Schema 1                     Database.SaveSetting("StoragePath"' Core.RootFolder + @"\servers\");                     Database.SaveSetting("DBSchema"' "2");                     goto case 2;                 case 2:                     //Update from Schema 2                     Database.SaveSetting("UsageData"' "true");                     Database.SaveSetting("DBSchema"' "3");                     goto case 3;                 case 3:                     Database.SaveSetting("EnablePortForwarding"' "true");                     Database.SaveSetting("EnableOpenFirewall"' "true");                     Database.SaveSetting("YAMSListenIP"' Networking.GetListenIP().ToString());                     AddJob("update"' -1' 0' ""' 0);                     AddJob("backup"' -1' 30' ""' 1);                     Database.SaveSetting("DBSchema"' "4");                     goto case 4;                     //goto case 3; //etc                 case 4:                     Database.SaveSetting("DNSName"' "");                     Database.SaveSetting("DNSSecret"' "");                     Database.SaveSetting("LastExternalIP"' "");                     Database.SaveSetting("DBSchema"' "5");                     goto case 5;                 case 5:                     Database.SaveSetting("EnablePublicSite"' "true");                     Database.SaveSetting("DBSchema"' "6");                     goto case 6;                 case 6:                     Database.SaveSetting("EnableTelnet"' "false");                     Database.SaveSetting("TelnetPort"' "56553");                     Database.SaveSetting("DBSchema"' "7");                     goto case 7;                 case 7:                     Database.SaveSetting("BukkitBetaInstalled"' "false");                     Database.SaveSetting("BukkitDevInstalled"' "false");                     Database.SaveSetting("DBSchema"' "8");                     goto case 8;                 case 8:                     Database.ExecuteSQL("ALTER TABLE MCServers ADD COLUMN ServerCustomJAR ntext");                     Database.ExecuteSQL("ALTER TABLE MCServers ADD COLUMN ServerWebBody ntext");                     Database.SaveSetting("DBSchema"' "9");                     goto case 9;                 case 9:                     break;                 default:                     break;             }
Magic Number,YAMS,Database,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Functions\Database.cs,UpdateDB,The following statement contains a magic number: switch (Convert.ToInt32(GetSetting("DBSchema"' "YAMS")))             {                 case 1:                     //Update from Schema 1                     Database.SaveSetting("StoragePath"' Core.RootFolder + @"\servers\");                     Database.SaveSetting("DBSchema"' "2");                     goto case 2;                 case 2:                     //Update from Schema 2                     Database.SaveSetting("UsageData"' "true");                     Database.SaveSetting("DBSchema"' "3");                     goto case 3;                 case 3:                     Database.SaveSetting("EnablePortForwarding"' "true");                     Database.SaveSetting("EnableOpenFirewall"' "true");                     Database.SaveSetting("YAMSListenIP"' Networking.GetListenIP().ToString());                     AddJob("update"' -1' 0' ""' 0);                     AddJob("backup"' -1' 30' ""' 1);                     Database.SaveSetting("DBSchema"' "4");                     goto case 4;                     //goto case 3; //etc                 case 4:                     Database.SaveSetting("DNSName"' "");                     Database.SaveSetting("DNSSecret"' "");                     Database.SaveSetting("LastExternalIP"' "");                     Database.SaveSetting("DBSchema"' "5");                     goto case 5;                 case 5:                     Database.SaveSetting("EnablePublicSite"' "true");                     Database.SaveSetting("DBSchema"' "6");                     goto case 6;                 case 6:                     Database.SaveSetting("EnableTelnet"' "false");                     Database.SaveSetting("TelnetPort"' "56553");                     Database.SaveSetting("DBSchema"' "7");                     goto case 7;                 case 7:                     Database.SaveSetting("BukkitBetaInstalled"' "false");                     Database.SaveSetting("BukkitDevInstalled"' "false");                     Database.SaveSetting("DBSchema"' "8");                     goto case 8;                 case 8:                     Database.ExecuteSQL("ALTER TABLE MCServers ADD COLUMN ServerCustomJAR ntext");                     Database.ExecuteSQL("ALTER TABLE MCServers ADD COLUMN ServerWebBody ntext");                     Database.SaveSetting("DBSchema"' "9");                     goto case 9;                 case 9:                     break;                 default:                     break;             }
Magic Number,YAMS,Database,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Functions\Database.cs,UpdateDB,The following statement contains a magic number: switch (Convert.ToInt32(GetSetting("DBSchema"' "YAMS")))             {                 case 1:                     //Update from Schema 1                     Database.SaveSetting("StoragePath"' Core.RootFolder + @"\servers\");                     Database.SaveSetting("DBSchema"' "2");                     goto case 2;                 case 2:                     //Update from Schema 2                     Database.SaveSetting("UsageData"' "true");                     Database.SaveSetting("DBSchema"' "3");                     goto case 3;                 case 3:                     Database.SaveSetting("EnablePortForwarding"' "true");                     Database.SaveSetting("EnableOpenFirewall"' "true");                     Database.SaveSetting("YAMSListenIP"' Networking.GetListenIP().ToString());                     AddJob("update"' -1' 0' ""' 0);                     AddJob("backup"' -1' 30' ""' 1);                     Database.SaveSetting("DBSchema"' "4");                     goto case 4;                     //goto case 3; //etc                 case 4:                     Database.SaveSetting("DNSName"' "");                     Database.SaveSetting("DNSSecret"' "");                     Database.SaveSetting("LastExternalIP"' "");                     Database.SaveSetting("DBSchema"' "5");                     goto case 5;                 case 5:                     Database.SaveSetting("EnablePublicSite"' "true");                     Database.SaveSetting("DBSchema"' "6");                     goto case 6;                 case 6:                     Database.SaveSetting("EnableTelnet"' "false");                     Database.SaveSetting("TelnetPort"' "56553");                     Database.SaveSetting("DBSchema"' "7");                     goto case 7;                 case 7:                     Database.SaveSetting("BukkitBetaInstalled"' "false");                     Database.SaveSetting("BukkitDevInstalled"' "false");                     Database.SaveSetting("DBSchema"' "8");                     goto case 8;                 case 8:                     Database.ExecuteSQL("ALTER TABLE MCServers ADD COLUMN ServerCustomJAR ntext");                     Database.ExecuteSQL("ALTER TABLE MCServers ADD COLUMN ServerWebBody ntext");                     Database.SaveSetting("DBSchema"' "9");                     goto case 9;                 case 9:                     break;                 default:                     break;             }
Magic Number,YAMS,Database,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Functions\Database.cs,UpdateDB,The following statement contains a magic number: switch (Convert.ToInt32(GetSetting("DBSchema"' "YAMS")))             {                 case 1:                     //Update from Schema 1                     Database.SaveSetting("StoragePath"' Core.RootFolder + @"\servers\");                     Database.SaveSetting("DBSchema"' "2");                     goto case 2;                 case 2:                     //Update from Schema 2                     Database.SaveSetting("UsageData"' "true");                     Database.SaveSetting("DBSchema"' "3");                     goto case 3;                 case 3:                     Database.SaveSetting("EnablePortForwarding"' "true");                     Database.SaveSetting("EnableOpenFirewall"' "true");                     Database.SaveSetting("YAMSListenIP"' Networking.GetListenIP().ToString());                     AddJob("update"' -1' 0' ""' 0);                     AddJob("backup"' -1' 30' ""' 1);                     Database.SaveSetting("DBSchema"' "4");                     goto case 4;                     //goto case 3; //etc                 case 4:                     Database.SaveSetting("DNSName"' "");                     Database.SaveSetting("DNSSecret"' "");                     Database.SaveSetting("LastExternalIP"' "");                     Database.SaveSetting("DBSchema"' "5");                     goto case 5;                 case 5:                     Database.SaveSetting("EnablePublicSite"' "true");                     Database.SaveSetting("DBSchema"' "6");                     goto case 6;                 case 6:                     Database.SaveSetting("EnableTelnet"' "false");                     Database.SaveSetting("TelnetPort"' "56553");                     Database.SaveSetting("DBSchema"' "7");                     goto case 7;                 case 7:                     Database.SaveSetting("BukkitBetaInstalled"' "false");                     Database.SaveSetting("BukkitDevInstalled"' "false");                     Database.SaveSetting("DBSchema"' "8");                     goto case 8;                 case 8:                     Database.ExecuteSQL("ALTER TABLE MCServers ADD COLUMN ServerCustomJAR ntext");                     Database.ExecuteSQL("ALTER TABLE MCServers ADD COLUMN ServerWebBody ntext");                     Database.SaveSetting("DBSchema"' "9");                     goto case 9;                 case 9:                     break;                 default:                     break;             }
Magic Number,YAMS,Database,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Functions\Database.cs,UpdateDB,The following statement contains a magic number: switch (Convert.ToInt32(GetSetting("DBSchema"' "YAMS")))             {                 case 1:                     //Update from Schema 1                     Database.SaveSetting("StoragePath"' Core.RootFolder + @"\servers\");                     Database.SaveSetting("DBSchema"' "2");                     goto case 2;                 case 2:                     //Update from Schema 2                     Database.SaveSetting("UsageData"' "true");                     Database.SaveSetting("DBSchema"' "3");                     goto case 3;                 case 3:                     Database.SaveSetting("EnablePortForwarding"' "true");                     Database.SaveSetting("EnableOpenFirewall"' "true");                     Database.SaveSetting("YAMSListenIP"' Networking.GetListenIP().ToString());                     AddJob("update"' -1' 0' ""' 0);                     AddJob("backup"' -1' 30' ""' 1);                     Database.SaveSetting("DBSchema"' "4");                     goto case 4;                     //goto case 3; //etc                 case 4:                     Database.SaveSetting("DNSName"' "");                     Database.SaveSetting("DNSSecret"' "");                     Database.SaveSetting("LastExternalIP"' "");                     Database.SaveSetting("DBSchema"' "5");                     goto case 5;                 case 5:                     Database.SaveSetting("EnablePublicSite"' "true");                     Database.SaveSetting("DBSchema"' "6");                     goto case 6;                 case 6:                     Database.SaveSetting("EnableTelnet"' "false");                     Database.SaveSetting("TelnetPort"' "56553");                     Database.SaveSetting("DBSchema"' "7");                     goto case 7;                 case 7:                     Database.SaveSetting("BukkitBetaInstalled"' "false");                     Database.SaveSetting("BukkitDevInstalled"' "false");                     Database.SaveSetting("DBSchema"' "8");                     goto case 8;                 case 8:                     Database.ExecuteSQL("ALTER TABLE MCServers ADD COLUMN ServerCustomJAR ntext");                     Database.ExecuteSQL("ALTER TABLE MCServers ADD COLUMN ServerWebBody ntext");                     Database.SaveSetting("DBSchema"' "9");                     goto case 9;                 case 9:                     break;                 default:                     break;             }
Magic Number,YAMS,Database,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Functions\Database.cs,UpdateDB,The following statement contains a magic number: switch (Convert.ToInt32(GetSetting("DBSchema"' "YAMS")))             {                 case 1:                     //Update from Schema 1                     Database.SaveSetting("StoragePath"' Core.RootFolder + @"\servers\");                     Database.SaveSetting("DBSchema"' "2");                     goto case 2;                 case 2:                     //Update from Schema 2                     Database.SaveSetting("UsageData"' "true");                     Database.SaveSetting("DBSchema"' "3");                     goto case 3;                 case 3:                     Database.SaveSetting("EnablePortForwarding"' "true");                     Database.SaveSetting("EnableOpenFirewall"' "true");                     Database.SaveSetting("YAMSListenIP"' Networking.GetListenIP().ToString());                     AddJob("update"' -1' 0' ""' 0);                     AddJob("backup"' -1' 30' ""' 1);                     Database.SaveSetting("DBSchema"' "4");                     goto case 4;                     //goto case 3; //etc                 case 4:                     Database.SaveSetting("DNSName"' "");                     Database.SaveSetting("DNSSecret"' "");                     Database.SaveSetting("LastExternalIP"' "");                     Database.SaveSetting("DBSchema"' "5");                     goto case 5;                 case 5:                     Database.SaveSetting("EnablePublicSite"' "true");                     Database.SaveSetting("DBSchema"' "6");                     goto case 6;                 case 6:                     Database.SaveSetting("EnableTelnet"' "false");                     Database.SaveSetting("TelnetPort"' "56553");                     Database.SaveSetting("DBSchema"' "7");                     goto case 7;                 case 7:                     Database.SaveSetting("BukkitBetaInstalled"' "false");                     Database.SaveSetting("BukkitDevInstalled"' "false");                     Database.SaveSetting("DBSchema"' "8");                     goto case 8;                 case 8:                     Database.ExecuteSQL("ALTER TABLE MCServers ADD COLUMN ServerCustomJAR ntext");                     Database.ExecuteSQL("ALTER TABLE MCServers ADD COLUMN ServerWebBody ntext");                     Database.SaveSetting("DBSchema"' "9");                     goto case 9;                 case 9:                     break;                 default:                     break;             }
Magic Number,YAMS,MCServer,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Objects\Server.cs,MCServer,The following statement contains a magic number: this.Port = 25565;
Magic Number,YAMS,MCServer,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Objects\Server.cs,Restart,The following statement contains a magic number: System.Threading.Thread.Sleep(10000);
Magic Number,YAMS,MCServer,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Objects\Server.cs,DelayedRestart,The following statement contains a magic number: this.timRestarter.Interval = 1000;
Magic Number,YAMS,MCServer,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Objects\Server.cs,RestarterTick,The following statement contains a magic number: this.intRestartSeconds % 10 == 0
Magic Number,YAMS,MCServer,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Objects\Server.cs,RestarterTick,The following statement contains a magic number: this.intRestartSeconds > 100
Magic Number,YAMS,MCServer,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Objects\Server.cs,Save,The following statement contains a magic number: System.Threading.Thread.Sleep(10000);
Magic Number,YAMS,MCServer,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Objects\Server.cs,EnableSaving,The following statement contains a magic number: System.Threading.Thread.Sleep(10000);
Magic Number,YAMS,MCServer,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Objects\Server.cs,DisableSaving,The following statement contains a magic number: System.Threading.Thread.Sleep(10000);
Magic Number,YAMS,MCServer,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Objects\Server.cs,ServerError,The following statement contains a magic number: switch (regMatch.Groups[2].Value)                 {                     case "INFO":                         //Check if it's player chat                         if (regPlayerChat.Match(strMessage).Success || regPlayerPM.Match(strMessage).Success || regConsoleChat.Match(strMessage).Success) strLevel = "chat";                         else strLevel = "info";                                                  //See if it's a log in or log out event                         if (regPlayerLoggedIn.Match(strMessage).Success) this.PlayerLogin(regPlayerLoggedIn.Match(strMessage).Groups[1].Value); //is a login event                         if (regPlayerLoggedOut.Match(strMessage).Success) this.PlayerLogout(regPlayerLoggedOut.Match(strMessage).Groups[1].Value); //logout event                          //See if it's the server version tag                         if (regServerVersion.Match(strMessage).Success) this.ServerVersion = strMessage.Replace("Starting minecraft server version "' "");                          //Detect game type                         if (regGameMode.Match(strMessage).Success) this.GameMode = Convert.ToInt32(regGameMode.Match(strMessage).Groups[1].Value);                         break;                     case "WARNING":                         strLevel = "warn";                         break;                     default:                         strLevel = "error";                         break;                 }
Magic Number,YAMS,MCServer,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Objects\Server.cs,ServerExited,The following statement contains a magic number: System.Threading.Thread.Sleep(10000);
Magic Number,YAMS,MCServer,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Objects\Server.cs,GetMemory,The following statement contains a magic number: return Convert.ToInt32(this.prcMinecraft.WorkingSet64 / (1024 * 1024));
Magic Number,YAMS,MCServer,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Objects\Server.cs,GetMemory,The following statement contains a magic number: return Convert.ToInt32(this.prcMinecraft.WorkingSet64 / (1024 * 1024));
Magic Number,YAMS,MCServer,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Objects\Server.cs,GetVMemory,The following statement contains a magic number: return Convert.ToInt32(this.prcMinecraft.VirtualMemorySize64 / (1024 * 1024));
Magic Number,YAMS,MCServer,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Objects\Server.cs,GetVMemory,The following statement contains a magic number: return Convert.ToInt32(this.prcMinecraft.VirtualMemorySize64 / (1024 * 1024));
Magic Number,YAMS,MCServer,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Objects\Server.cs,ClearWorld,The following statement contains a magic number: string strRandomSeed = random.Next(-2147483648' 2147483647).ToString();
Magic Number,YAMS,MCServer,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Objects\Server.cs,ClearWorld,The following statement contains a magic number: string strRandomSeed = random.Next(-2147483648' 2147483647).ToString();
Magic Number,YAMS,Util,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Functions\Util.cs,FirstRun,The following statement contains a magic number: Database.SaveSetting("PublicListenPort"' Convert.ToString(Networking.TcpPort.FindNextAvailablePort(80)));
Magic Number,YAMS,Util,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Functions\Util.cs,GetBitness,The following statement contains a magic number: switch (IntPtr.Size)             {                 case 4:                     return "x86";                 case 8:                     return "x64";                 default:                     return "x86";             }
Magic Number,YAMS,Util,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Functions\Util.cs,GetBitness,The following statement contains a magic number: switch (IntPtr.Size)             {                 case 4:                     return "x86";                 case 8:                     return "x64";                 default:                     return "x86";             }
Magic Number,YAMS,WebServer,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Web\WebServer.cs,StartAdmin,The following statement contains a magic number: Thread.Sleep(5000);
Magic Number,YAMS,WebServer,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Web\WebServer.cs,StartAdmin,The following statement contains a magic number: Util.PortIsBusy(Convert.ToInt32(YAMS.Database.GetSetting("AdminListenPort"' "YAMS"))) && AdminTryCount < 120
Magic Number,YAMS,WebServer,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Web\WebServer.cs,StartAdmin,The following statement contains a magic number: adminServer.Start(5);
Magic Number,YAMS,WebServer,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Web\WebServer.cs,StartPublic,The following statement contains a magic number: Thread.Sleep(5000);
Magic Number,YAMS,WebServer,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Web\WebServer.cs,StartPublic,The following statement contains a magic number: Util.PortIsBusy(Convert.ToInt32(YAMS.Database.GetSetting("PublicListenPort"' "YAMS"))) && PublicTryCount < 120
Magic Number,YAMS,WebServer,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Web\WebServer.cs,StartPublic,The following statement contains a magic number: publicServer.Start(5);
Magic Number,YAMS.Web,AdminAPI,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Web\AdminAPI.cs,Process,The following statement contains a magic number: switch (context.Request.Parameters["action"])                     {                         case "log":                             //grabs lines from the log.                             int intStartID = Convert.ToInt32(context.Request.Parameters["start"]);                             int intNumRows = Convert.ToInt32(context.Request.Parameters["rows"]);                             int intServer = Convert.ToInt32(context.Request.Parameters["serverid"]);                             string strLevel = context.Request.Parameters["level"];                              DataSet ds = Database.ReturnLogRows(intStartID' intNumRows' strLevel' intServer);                              strResponse = JsonConvert.SerializeObject(ds' Formatting.Indented);                             break;                         case "list":                             //List available servers                             strResponse = "{ \"servers\" : [";                             foreach (KeyValuePair<int' MCServer> kvp in Core.Servers)                             {                                 strResponse += "{ \"id\" : " + kvp.Value.ServerID + "' " +                                                  "\"title\" : \"" + kvp.Value.ServerTitle + "\"' " +                                                  "\"ver\" : \"" + kvp.Value.ServerVersion + "\" } '";                             };                             strResponse = strResponse.Remove(strResponse.Length - 1);                             strResponse += "]}";                             break;                         case "status":                             //Get status of a server                             s = Core.Servers[Convert.ToInt32(context.Request.Parameters["serverid"])];                             strResponse = "{ \"serverid\" : " + s.ServerID + "'" +                                             "\"status\" : \"" + s.Running + "\"'" +                                             "\"ram\" : " + s.GetMemory() + "'" +                                             "\"vm\" : " + s.GetVMemory() + "'" +                                             "\"restartneeded\" : \"" + s.RestartNeeded + "\"'" +                                             "\"restartwhenfree\" : \"" + s.RestartWhenFree + "\"'" +                                             "\"gamemode\" : \"" + s.GameMode + "\"'" +                                             "\"players\" : [";                             if (s.Players.Count > 0)                             {                                 foreach (KeyValuePair<string' Player> kvp in s.Players)                                 {                                     Vector playerPos = kvp.Value.Position;                                     strResponse += " { \"name\": \"" + kvp.Value.Username + "\"' " +                                                       "\"level\": \"" + kvp.Value.Level + "\"' " +                                                       "\"x\": \"" + playerPos.x.ToString("0.##") + "\"' " +                                                       "\"y\": \"" + playerPos.y.ToString("0.##") + "\"' " +                                                       "\"z\": \"" + playerPos.z.ToString("0.##") + "\" }'";                                 };                                 strResponse = strResponse.Remove(strResponse.Length - 1);                             }                             strResponse += "]}";                             break;                         case "get-players":                             DataSet dsPlayers = Database.GetPlayers(Convert.ToInt32(context.Request.Parameters["serverid"]));                             JsonConvert.SerializeObject(dsPlayers' Formatting.Indented);                             break;                         case "overviewer":                             //Maps a server                             s = Core.Servers[Convert.ToInt32(context.Request.Parameters["serverid"])];                             string strRenderModes = "";                             if (param["normal"] == "true") strRenderModes += "normal";                             if (param["lighting"] == "true")                             {                                 if (strRenderModes != "") strRenderModes += "'";                                 strRenderModes += "lighting";                             }                             if (param["night"] == "true")                             {                                 if (strRenderModes != "") strRenderModes += "'";                                 strRenderModes += "night";                             }                             if (param["spawn"] == "true")                             {                                 if (strRenderModes != "") strRenderModes += "'";                                 strRenderModes += "spawn";                             }                             if (param["cave"] == "true")                             {                                 if (strRenderModes != "") strRenderModes += "'";                                 strRenderModes += "cave";                             }                             AddOns.Overviewer over = new AddOns.Overviewer(s' "rendermodes=" + strRenderModes);                             over.Start();                             strResponse = "{ \"result\" : \"sent\" }";                             break;                         case "c10t":                             //Images a server                             s = Core.Servers[Convert.ToInt32(context.Request.Parameters["serverid"])];                             AddOns.c10t c10t = new AddOns.c10t(s' "night=" + param["night"] + "&mode=" + param["mode"]);                             c10t.Start();                             strResponse = "{ \"result\" : \"sent\" }";                             break;                         case "tectonicus":                             //Maps a server                             s = Core.Servers[Convert.ToInt32(context.Request.Parameters["serverid"])];                             AddOns.Tectonicus tecton = new AddOns.Tectonicus(s' "lighting=" + param["lighting"] + "&night=" + param["night"] + "&delete=" + param["delete"]);                             tecton.Start();                             strResponse = "{ \"result\" : \"sent\" }";                             break;                         case "start":                             //Starts a server                             Core.Servers[Convert.ToInt32(context.Request.Parameters["serverid"])].Start();                             strResponse = "{ \"result\" : \"sent\" }";                             break;                         case "stop":                             //Stops a server                             Core.Servers[Convert.ToInt32(context.Request.Parameters["serverid"])].Stop();                             strResponse = "{ \"result\" : \"sent\" }";                             break;                         case "forcestop":                             //Force stops a server                             Core.Servers[Convert.ToInt32(context.Request.Parameters["serverid"])].ForceStop();                             strResponse = "{ \"result\" : \"sent\" }";                             break;                         case "restart":                             //Restarts a server                             Core.Servers[Convert.ToInt32(context.Request.Parameters["serverid"])].Restart();                             strResponse = "{ \"result\" : \"sent\" }";                             break;                         case "delayed-restart":                             //Restarts a server after a specified time and warns players                             Core.Servers[Convert.ToInt32(context.Request.Parameters["serverid"])].DelayedRestart(Convert.ToInt32(param["delay"]));                             strResponse = "{ \"result\" : \"sent\" }";                             break;                         case "restart-when-free":                             Core.Servers[Convert.ToInt32(context.Request.Parameters["serverid"])].RestartIfEmpty();                             strResponse = "{ \"result\" : \"sent\" }";                             break;                         case "command":                             //Sends literal command to a server                             Core.Servers[Convert.ToInt32(context.Request.Parameters["serverid"])].Send(context.Request.Parameters["message"]);                             strResponse = "{ \"result\" : \"sent\" }";                             break;                         case "get-yams-settings":                             DataSet dsSettings = Database.ReturnSettings();                             JsonConvert.SerializeObject(dsSettings' Formatting.Indented);                             break;                         case "save-yams-settings":                             //Settings update                             foreach (Parameter p in param)                             {                                 if (p.Name != "action") Database.SaveSetting(p.Name' p.Value);                             }                             break;                         case "get-server-settings":                             //retrieve all server settings as JSON                             List<string> listIPsMC = new List<string>();                             IPHostEntry ipListenMC = Dns.GetHostEntry("");                             foreach (IPAddress ipaddress in ipListenMC.AddressList)                             {                                 if (ipaddress.AddressFamily == System.Net.Sockets.AddressFamily.InterNetwork) listIPsMC.Add(ipaddress.ToString());                             }                              intServerID = Convert.ToInt32(param["serverid"]);                             strResponse = "{ \"serverid\" : " + intServerID + "'" +                                               "\"title\" : \"" + Database.GetSetting(intServerID' "ServerTitle") + "\"'" +                                               "\"optimisations\" : \"" + Database.GetSetting(intServerID' "ServerEnableOptimisations") + "\"'" +                                               "\"memory\" : \"" + Database.GetSetting(intServerID' "ServerAssignedMemory") + "\"'" +                                               "\"autostart\" : \"" + Database.GetSetting(intServerID' "ServerAutoStart") + "\"'" +                                               "\"type\" : \"" + Database.GetSetting(intServerID' "ServerType") + "\"'" +                                               "\"custom\" : \"" + Database.GetSetting(intServerID' "ServerCustomJAR").ToString().Replace("\\"' "\\\\").Replace("\""' "\\\"") + "\"'" +                                               "\"motd\" : \"" + Database.GetSetting("motd"' "MC"' intServerID) + "\"'" +                                               "\"listen\" : \"" + Core.Servers[Convert.ToInt32(context.Request.Parameters["serverid"])].GetProperty("server-ip") + "\"'" +                                               "\"port\" : \"" + Core.Servers[Convert.ToInt32(context.Request.Parameters["serverid"])].GetProperty("server-port") + "\"'" +                                               "\"IPs\": " + JsonConvert.SerializeObject(listIPsMC' Formatting.None);                             strResponse += "}";                             break;                         case "get-server-connections":                             intServerID = Convert.ToInt32(param["serverid"]);                             strResponse = "{ \"dnsname\" : \"" + Database.GetSetting("DNSName"' "YAMS") + "\"' " +                                             "\"externalip\" : \"" + Networking.GetExternalIP().ToString() + "\"' " +                                             "\"internalip\" : \"" + Core.Servers[Convert.ToInt32(context.Request.Parameters["serverid"])].GetProperty("server-ip") + "\"' " +                                             "\"mcport\" : " + Core.Servers[Convert.ToInt32(context.Request.Parameters["serverid"])].GetProperty("server-port") + "' " +                                             "\"publicport\" : " + Database.GetSetting("PublicListenPort"' "YAMS") + "' " +                                             "\"message\" : " + JsonConvert.SerializeObject(Database.GetSetting(intServerID' "ServerWebBody")' Formatting.None) + "}";                             break;                         case "save-website-settings":                             intServerID = Convert.ToInt32(param["serverid"]);                             Database.UpdateServer(intServerID' "ServerWebBody"' param["message"]);                             break;                         case "get-mc-settings":                             //retrieve all server settings as JSON                             intServerID = Convert.ToInt32(param["serverid"]);                                                          json = File.ReadAllText(YAMS.Core.RootFolder + @"\lib\properties.json");                             jProps = JObject.Parse(json);                              strResponse = "";                                                          foreach(JObject option in jProps["options"]) {                                 strResponse += "<p><label for=\"" + (string)option["key"] + "\" title=\"" + (string)option["description"] + "\">" + (string)option["name"] + "</label>";                                  string strValue = Core.Servers[Convert.ToInt32(context.Request.Parameters["serverid"])].GetProperty((string)option["key"]);                                  switch ((string)option["type"])                                 {                                     case "string":                                         strResponse += "<input type=\"text\" name=\"" + (string)option["key"] + "\" value=\"" + strValue + "\" />";                                         break;                                     case "boolean":                                         strResponse += "<select name=\"" + (string)option["key"] + "\">";                                         strResponse += "<option value=\"true\"";                                         if (strValue == "true") strResponse += " selected";                                         strResponse += ">True</option>";                                         strResponse += "<option value=\"false\"";                                         if (strValue == "false") strResponse += " selected";                                         strResponse += ">False</option>";                                         strResponse += "</select>";                                         break;                                     case "integer":                                         strResponse += "<select name=\"" + (string)option["key"] + "\">";                                         int intValue = Convert.ToInt32(strValue);                                         for (var i = Convert.ToInt32((string)option["min"]); i <= Convert.ToInt32((string)option["max"]); i++)                                         {                                             strResponse += "<option value=\"" + i.ToString() + "\"";                                             if (intValue == i) strResponse += " selected";                                             strResponse += ">" + i.ToString() + "</option>";                                         }                                         strResponse += "</select>";                                         break;                                     case "array":                                         strResponse += "<select name=\"" + (string)option["key"] + "\">";                                         string strValues = (string)option["values"];                                         string[] elements = strValues.Split(''');                                         foreach (string values in elements)                                         {                                             string[] options = values.Split('|');                                             strResponse += "<option value=\"" + options[0] + "\"";                                             if (strValue == options[0]) strResponse += " selected";                                             strResponse += ">" + options[1] + "</option>";                                         }                                         strResponse += "</select>";                                         break;                                 }                                  strResponse += "</p>";                             }                              break;                         case "save-server-settings":                             intServerID = Convert.ToInt32(param["serverid"]);                             Database.UpdateServer(intServerID' "ServerTitle"' param["title"]);                             Database.UpdateServer(intServerID' "ServerType"' param["type"]);                             Database.UpdateServer(intServerID' "ServerCustomJAR"' param["custom"]);                             Database.UpdateServer(intServerID' "ServerAssignedMemory"' Convert.ToInt32(param["memory"]));                             if (param["optimisations"] == "true") Database.UpdateServer(intServerID' "ServerEnableOptimisations"' true);                             else Database.UpdateServer(intServerID' "ServerEnableOptimisations"' false);                             if (param["autostart"] == "true") Database.UpdateServer(intServerID' "ServerAutoStart"' true);                             else Database.UpdateServer(intServerID' "ServerAutoStart"' false);                             Database.SaveSetting(intServerID' "motd"' param["message"]);                              //Save the server's MC settings                             MCServer thisServer = Core.Servers[Convert.ToInt32(context.Request.Parameters["serverid"])];                             thisServer.SaveProperty("server-ip"' param["cfg_listen-ip"]);                             thisServer.SaveProperty("server-port"' param["cfg_port"]);                              json = File.ReadAllText(YAMS.Core.RootFolder + @"\lib\properties.json");                             jProps = JObject.Parse(json);                              strResponse = "";                              foreach (JObject option in jProps["options"])                             {                                 thisServer.SaveProperty((string)option["key"]' param[(string)option["key"]]);                             }                              //If they've selected a Bukkit but not chosen to have them installed' do it for them                             if (param["type"] == "bukkit")                             {                                 if (Database.GetSetting("BukkitInstalled"' "YAMS") == "false")                                 {                                     Database.SaveSetting("BukkitInstalled"' "true");                                     AutoUpdate.CheckUpdates();                                 }                             } else if (param["type"] == "bukkit-beta")                             {                                 if (Database.GetSetting("BukkitBetaInstalled"' "YAMS") == "false")                                 {                                     Database.SaveSetting("BukkitBetaInstalled"' "true");                                     AutoUpdate.CheckUpdates();                                 }                             } else if(param["type"] == "bukkit-dev")                             {                                 if (Database.GetSetting("BukkitDevInstalled"' "YAMS") == "false")                                 {                                     Database.SaveSetting("BukkitDevInstalled"' "true");                                     AutoUpdate.CheckUpdates();                                 }                             }                              if (thisServer.Running) thisServer.RestartIfEmpty();                              break;                         case "get-config-file":                             List<string> listConfig = Core.Servers[Convert.ToInt32(context.Request.Parameters["serverid"])].ReadConfig(param["file"]);                             strResponse = JsonConvert.SerializeObject(listConfig' Formatting.Indented);                             break;                         case "get-server-whitelist":                             strResponse = "{ \"enabled\" : " + Core.Servers[Convert.ToInt32(context.Request.Parameters["serverid"])].GetProperty("white-list") + " }";                             break;                         case "upload-world":                             var test = context.Request.Files["new-world"];                             break;                         case "delete-world":                             bool bolRandomSeed = false;                             if (param["randomseed"] == "true") bolRandomSeed = true;                             Core.Servers[Convert.ToInt32(context.Request.Parameters["serverid"])].ClearWorld(bolRandomSeed);                             strResponse = "{ \"result\" : \"sent\" }";                             break;                         case "remove-server":                             Core.Servers[Convert.ToInt32(context.Request.Parameters["serverid"])].Stop();                             Core.Servers.Remove(Convert.ToInt32(context.Request.Parameters["serverid"]));                             Database.DeleteServer(Convert.ToInt32(context.Request.Parameters["serverid"]));                             strResponse = "{ \"result\" : \"removed\" }";                             break;                         case "about":                             Dictionary<string' string> dicAbout = new Dictionary<string' string> {                                 { "dll" ' FileVersionInfo.GetVersionInfo(Path.Combine(Core.RootFolder' "YAMS-Library.dll")).FileVersion }'                                 { "svc" ' FileVersionInfo.GetVersionInfo(Path.Combine(Core.RootFolder' "YAMS-Service.exe")).FileVersion }'                                 { "gui" ' FileVersionInfo.GetVersionInfo(Path.Combine(Core.RootFolder' "YAMS-Updater.exe")).FileVersion }'                                 { "db" ' Database.GetSetting("DBSchema"' "YAMS") }                             };                             strResponse = JsonConvert.SerializeObject(dicAbout' Formatting.Indented);                             break;                         case "installed-apps":                             Dictionary<string' string> dicApps = new Dictionary<string' string> {                                 { "bukkit" ' Database.GetSetting("BukkitInstalled"' "YAMS") }'                                 { "bukkitBeta" ' Database.GetSetting("BukkitBetaInstalled"' "YAMS") }'                                 { "bukkitDev" ' Database.GetSetting("BukkitDevInstalled"' "YAMS") }'                                 { "overviewer" ' Database.GetSetting("OverviewerInstalled"' "YAMS") }'                                 { "c10t" ' Database.GetSetting("C10tInstalled"' "YAMS") }'                                 { "biomeextractor" ' Database.GetSetting("BiomeExtractorInstalled"' "YAMS") }'                                 { "tectonicus" ' Database.GetSetting("TectonicusInstalled"' "YAMS") }'                                 { "nbtoolkit" ' Database.GetSetting("NBToolkitInstalled"' "YAMS") }                             };                             strResponse = JsonConvert.SerializeObject(dicApps' Formatting.Indented);                             break;                         case "update-apps":                             Database.SaveSetting("OverviewerInstalled"' param["overviewer"]);                             Database.SaveSetting("C10tInstalled"' param["c10t"]);                             Database.SaveSetting("BiomeExtractorInstalled"' param["biomeextractor"]);                             Database.SaveSetting("BukkitInstalled"' param["bukkit"]);                             Database.SaveSetting("BukkitBetaInstalled"' param["bukkitBeta"]);                             Database.SaveSetting("BukkitDevInstalled"' param["bukkitDev"]);                             strResponse = "done";                             break;                         case "force-autoupdate":                             AutoUpdate.CheckUpdates(false' true);                             break;                         case "network-settings":                             List<string> listIPs = new List<string>();                             IPHostEntry ipListen = Dns.GetHostEntry("");                             foreach (IPAddress ipaddress in ipListen.AddressList)                             {                                 if (ipaddress.AddressFamily == System.Net.Sockets.AddressFamily.InterNetwork) listIPs.Add(ipaddress.ToString());                             }                              Dictionary<string' string> dicNetwork = new Dictionary<string' string> {                                 { "portForwarding" ' Database.GetSetting("EnablePortForwarding"' "YAMS") }'                                 { "openFirewall" ' Database.GetSetting("EnableOpenFirewall"' "YAMS") }'                                 { "publicEnable" ' Database.GetSetting("EnablePublicSite"' "YAMS") }'                                 { "adminPort" ' Database.GetSetting("AdminListenPort"' "YAMS") }'                                 { "publicPort" ' Database.GetSetting("PublicListenPort"' "YAMS") }'                                 { "currentIP" ' Database.GetSetting("YAMSListenIP"' "YAMS") }'                                 { "telnetEnable" ' Database.GetSetting("EnableTelnet"' "YAMS") }'                                 { "telnetPort" ' Database.GetSetting("TelnetPort"' "YAMS") }'                                 { "IPs" ' JsonConvert.SerializeObject(listIPs' Formatting.None) }                             };                             strResponse = JsonConvert.SerializeObject(dicNetwork' Formatting.Indented).Replace(@"\"'"").Replace("\"["' "[").Replace("]\""' "]");                             break;                         case "save-network-settings":                             int intTester = 0;                             try                             {                                 //Try to convert to integers to make sure something silly isn't put in. TODO: Javascript validation                                 intTester = Convert.ToInt32(param["adminPort"]);                                 intTester = Convert.ToInt32(param["publicPort"]);                                 IPAddress ipTest = IPAddress.Parse(param["listenIp"]);                             }                             catch (Exception e)                             {                                 YAMS.Database.AddLog("Invalid input on network settings"' "web"' "warn");                                 return ProcessingResult.Abort;                             }                              Database.SaveSetting("EnablePortForwarding"' param["portForwarding"]);                             Database.SaveSetting("EnableOpenFirewall"' param["openFirewall"]);                             Database.SaveSetting("EnablePublicSite"' param["publicEnable"]);                             Database.SaveSetting("AdminListenPort"' param["adminPort"]);                             Database.SaveSetting("PublicListenPort"' param["publicPort"]);                             Database.SaveSetting("YAMSListenIP"' param["listenIp"]);                             Database.SaveSetting("EnableTelnet"' param["telnetEnable"]);                             Database.SaveSetting("TelnetPort"' param["telnetPort"]);                              Database.AddLog("Network settings have been saved' to apply changes a service restart is required. Please check they are correct before restarting"' "web"' "warn");                             break;                         case "job-list":                             DataSet rdJobs = Database.ListJobs();                             strResponse = JsonConvert.SerializeObject(rdJobs' Formatting.Indented);                             break;                         case "delete-job":                             string strJobID = param["jobid"];                             Database.DeleteJob(strJobID);                             strResponse = "done";                             break;                         case "add-job":                             intServerID = Convert.ToInt32(param["job-server"]);                             int intHour = Convert.ToInt32(param["job-hour"]);                             int intMinute = Convert.ToInt32(param["job-minute"]);                             Database.AddJob(param["job-type"]' intHour' intMinute' param["job-params"]' intServerID);                             break;                         case "logout":                             WebSession.Current.UserName = "";                             break;                         case "newserver":                             var NewServer = new List<KeyValuePair<string' string>>();                             NewServer.Add(new KeyValuePair<string' string>("motd"' "Welcome to a YAMS server!"));                             NewServer.Add(new KeyValuePair<string' string>("server-ip"' Networking.GetListenIP().ToString()));                             NewServer.Add(new KeyValuePair<string' string>("server-name"' param["name"]));                             NewServer.Add(new KeyValuePair<string' string>("server-port"' Networking.TcpPort.FindNextAvailablePort(25565).ToString()));                             Database.NewServerWeb(NewServer' param["name"]' 1024);                             strResponse = "done";                             break;                         case "updateDNS":                             Database.SaveSetting("DNSName"' param["dns-name"]);                             Database.SaveSetting("DNSSecret"' param["dns-secret"]);                             Database.SaveSetting("LastExternalIP"' param["dns-external"]);                             strResponse = "done";                             break;                         case "getDNS":                             strResponse = "{ \"name\":\"" + Database.GetSetting("DNSName"' "YAMS") + "\"' \"secret\": \"" + Database.GetSetting("DNSSecret"' "YAMS") + "\"' \"external\" : \"" + Networking.GetExternalIP().ToString() + "\" }";                             break;                         case "backup-now":                             Backup.BackupNow(Core.Servers[Convert.ToInt32(param["serverid"])]' param["title"]);                             strResponse = "{ \"result\" : \"sent\" }";                             break;                         default:                             return ProcessingResult.Abort;                     }
Magic Number,YAMS.Web,AdminAPI,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Web\AdminAPI.cs,Process,The following statement contains a magic number: switch (context.Request.Parameters["action"])                     {                         case "log":                             //grabs lines from the log.                             int intStartID = Convert.ToInt32(context.Request.Parameters["start"]);                             int intNumRows = Convert.ToInt32(context.Request.Parameters["rows"]);                             int intServer = Convert.ToInt32(context.Request.Parameters["serverid"]);                             string strLevel = context.Request.Parameters["level"];                              DataSet ds = Database.ReturnLogRows(intStartID' intNumRows' strLevel' intServer);                              strResponse = JsonConvert.SerializeObject(ds' Formatting.Indented);                             break;                         case "list":                             //List available servers                             strResponse = "{ \"servers\" : [";                             foreach (KeyValuePair<int' MCServer> kvp in Core.Servers)                             {                                 strResponse += "{ \"id\" : " + kvp.Value.ServerID + "' " +                                                  "\"title\" : \"" + kvp.Value.ServerTitle + "\"' " +                                                  "\"ver\" : \"" + kvp.Value.ServerVersion + "\" } '";                             };                             strResponse = strResponse.Remove(strResponse.Length - 1);                             strResponse += "]}";                             break;                         case "status":                             //Get status of a server                             s = Core.Servers[Convert.ToInt32(context.Request.Parameters["serverid"])];                             strResponse = "{ \"serverid\" : " + s.ServerID + "'" +                                             "\"status\" : \"" + s.Running + "\"'" +                                             "\"ram\" : " + s.GetMemory() + "'" +                                             "\"vm\" : " + s.GetVMemory() + "'" +                                             "\"restartneeded\" : \"" + s.RestartNeeded + "\"'" +                                             "\"restartwhenfree\" : \"" + s.RestartWhenFree + "\"'" +                                             "\"gamemode\" : \"" + s.GameMode + "\"'" +                                             "\"players\" : [";                             if (s.Players.Count > 0)                             {                                 foreach (KeyValuePair<string' Player> kvp in s.Players)                                 {                                     Vector playerPos = kvp.Value.Position;                                     strResponse += " { \"name\": \"" + kvp.Value.Username + "\"' " +                                                       "\"level\": \"" + kvp.Value.Level + "\"' " +                                                       "\"x\": \"" + playerPos.x.ToString("0.##") + "\"' " +                                                       "\"y\": \"" + playerPos.y.ToString("0.##") + "\"' " +                                                       "\"z\": \"" + playerPos.z.ToString("0.##") + "\" }'";                                 };                                 strResponse = strResponse.Remove(strResponse.Length - 1);                             }                             strResponse += "]}";                             break;                         case "get-players":                             DataSet dsPlayers = Database.GetPlayers(Convert.ToInt32(context.Request.Parameters["serverid"]));                             JsonConvert.SerializeObject(dsPlayers' Formatting.Indented);                             break;                         case "overviewer":                             //Maps a server                             s = Core.Servers[Convert.ToInt32(context.Request.Parameters["serverid"])];                             string strRenderModes = "";                             if (param["normal"] == "true") strRenderModes += "normal";                             if (param["lighting"] == "true")                             {                                 if (strRenderModes != "") strRenderModes += "'";                                 strRenderModes += "lighting";                             }                             if (param["night"] == "true")                             {                                 if (strRenderModes != "") strRenderModes += "'";                                 strRenderModes += "night";                             }                             if (param["spawn"] == "true")                             {                                 if (strRenderModes != "") strRenderModes += "'";                                 strRenderModes += "spawn";                             }                             if (param["cave"] == "true")                             {                                 if (strRenderModes != "") strRenderModes += "'";                                 strRenderModes += "cave";                             }                             AddOns.Overviewer over = new AddOns.Overviewer(s' "rendermodes=" + strRenderModes);                             over.Start();                             strResponse = "{ \"result\" : \"sent\" }";                             break;                         case "c10t":                             //Images a server                             s = Core.Servers[Convert.ToInt32(context.Request.Parameters["serverid"])];                             AddOns.c10t c10t = new AddOns.c10t(s' "night=" + param["night"] + "&mode=" + param["mode"]);                             c10t.Start();                             strResponse = "{ \"result\" : \"sent\" }";                             break;                         case "tectonicus":                             //Maps a server                             s = Core.Servers[Convert.ToInt32(context.Request.Parameters["serverid"])];                             AddOns.Tectonicus tecton = new AddOns.Tectonicus(s' "lighting=" + param["lighting"] + "&night=" + param["night"] + "&delete=" + param["delete"]);                             tecton.Start();                             strResponse = "{ \"result\" : \"sent\" }";                             break;                         case "start":                             //Starts a server                             Core.Servers[Convert.ToInt32(context.Request.Parameters["serverid"])].Start();                             strResponse = "{ \"result\" : \"sent\" }";                             break;                         case "stop":                             //Stops a server                             Core.Servers[Convert.ToInt32(context.Request.Parameters["serverid"])].Stop();                             strResponse = "{ \"result\" : \"sent\" }";                             break;                         case "forcestop":                             //Force stops a server                             Core.Servers[Convert.ToInt32(context.Request.Parameters["serverid"])].ForceStop();                             strResponse = "{ \"result\" : \"sent\" }";                             break;                         case "restart":                             //Restarts a server                             Core.Servers[Convert.ToInt32(context.Request.Parameters["serverid"])].Restart();                             strResponse = "{ \"result\" : \"sent\" }";                             break;                         case "delayed-restart":                             //Restarts a server after a specified time and warns players                             Core.Servers[Convert.ToInt32(context.Request.Parameters["serverid"])].DelayedRestart(Convert.ToInt32(param["delay"]));                             strResponse = "{ \"result\" : \"sent\" }";                             break;                         case "restart-when-free":                             Core.Servers[Convert.ToInt32(context.Request.Parameters["serverid"])].RestartIfEmpty();                             strResponse = "{ \"result\" : \"sent\" }";                             break;                         case "command":                             //Sends literal command to a server                             Core.Servers[Convert.ToInt32(context.Request.Parameters["serverid"])].Send(context.Request.Parameters["message"]);                             strResponse = "{ \"result\" : \"sent\" }";                             break;                         case "get-yams-settings":                             DataSet dsSettings = Database.ReturnSettings();                             JsonConvert.SerializeObject(dsSettings' Formatting.Indented);                             break;                         case "save-yams-settings":                             //Settings update                             foreach (Parameter p in param)                             {                                 if (p.Name != "action") Database.SaveSetting(p.Name' p.Value);                             }                             break;                         case "get-server-settings":                             //retrieve all server settings as JSON                             List<string> listIPsMC = new List<string>();                             IPHostEntry ipListenMC = Dns.GetHostEntry("");                             foreach (IPAddress ipaddress in ipListenMC.AddressList)                             {                                 if (ipaddress.AddressFamily == System.Net.Sockets.AddressFamily.InterNetwork) listIPsMC.Add(ipaddress.ToString());                             }                              intServerID = Convert.ToInt32(param["serverid"]);                             strResponse = "{ \"serverid\" : " + intServerID + "'" +                                               "\"title\" : \"" + Database.GetSetting(intServerID' "ServerTitle") + "\"'" +                                               "\"optimisations\" : \"" + Database.GetSetting(intServerID' "ServerEnableOptimisations") + "\"'" +                                               "\"memory\" : \"" + Database.GetSetting(intServerID' "ServerAssignedMemory") + "\"'" +                                               "\"autostart\" : \"" + Database.GetSetting(intServerID' "ServerAutoStart") + "\"'" +                                               "\"type\" : \"" + Database.GetSetting(intServerID' "ServerType") + "\"'" +                                               "\"custom\" : \"" + Database.GetSetting(intServerID' "ServerCustomJAR").ToString().Replace("\\"' "\\\\").Replace("\""' "\\\"") + "\"'" +                                               "\"motd\" : \"" + Database.GetSetting("motd"' "MC"' intServerID) + "\"'" +                                               "\"listen\" : \"" + Core.Servers[Convert.ToInt32(context.Request.Parameters["serverid"])].GetProperty("server-ip") + "\"'" +                                               "\"port\" : \"" + Core.Servers[Convert.ToInt32(context.Request.Parameters["serverid"])].GetProperty("server-port") + "\"'" +                                               "\"IPs\": " + JsonConvert.SerializeObject(listIPsMC' Formatting.None);                             strResponse += "}";                             break;                         case "get-server-connections":                             intServerID = Convert.ToInt32(param["serverid"]);                             strResponse = "{ \"dnsname\" : \"" + Database.GetSetting("DNSName"' "YAMS") + "\"' " +                                             "\"externalip\" : \"" + Networking.GetExternalIP().ToString() + "\"' " +                                             "\"internalip\" : \"" + Core.Servers[Convert.ToInt32(context.Request.Parameters["serverid"])].GetProperty("server-ip") + "\"' " +                                             "\"mcport\" : " + Core.Servers[Convert.ToInt32(context.Request.Parameters["serverid"])].GetProperty("server-port") + "' " +                                             "\"publicport\" : " + Database.GetSetting("PublicListenPort"' "YAMS") + "' " +                                             "\"message\" : " + JsonConvert.SerializeObject(Database.GetSetting(intServerID' "ServerWebBody")' Formatting.None) + "}";                             break;                         case "save-website-settings":                             intServerID = Convert.ToInt32(param["serverid"]);                             Database.UpdateServer(intServerID' "ServerWebBody"' param["message"]);                             break;                         case "get-mc-settings":                             //retrieve all server settings as JSON                             intServerID = Convert.ToInt32(param["serverid"]);                                                          json = File.ReadAllText(YAMS.Core.RootFolder + @"\lib\properties.json");                             jProps = JObject.Parse(json);                              strResponse = "";                                                          foreach(JObject option in jProps["options"]) {                                 strResponse += "<p><label for=\"" + (string)option["key"] + "\" title=\"" + (string)option["description"] + "\">" + (string)option["name"] + "</label>";                                  string strValue = Core.Servers[Convert.ToInt32(context.Request.Parameters["serverid"])].GetProperty((string)option["key"]);                                  switch ((string)option["type"])                                 {                                     case "string":                                         strResponse += "<input type=\"text\" name=\"" + (string)option["key"] + "\" value=\"" + strValue + "\" />";                                         break;                                     case "boolean":                                         strResponse += "<select name=\"" + (string)option["key"] + "\">";                                         strResponse += "<option value=\"true\"";                                         if (strValue == "true") strResponse += " selected";                                         strResponse += ">True</option>";                                         strResponse += "<option value=\"false\"";                                         if (strValue == "false") strResponse += " selected";                                         strResponse += ">False</option>";                                         strResponse += "</select>";                                         break;                                     case "integer":                                         strResponse += "<select name=\"" + (string)option["key"] + "\">";                                         int intValue = Convert.ToInt32(strValue);                                         for (var i = Convert.ToInt32((string)option["min"]); i <= Convert.ToInt32((string)option["max"]); i++)                                         {                                             strResponse += "<option value=\"" + i.ToString() + "\"";                                             if (intValue == i) strResponse += " selected";                                             strResponse += ">" + i.ToString() + "</option>";                                         }                                         strResponse += "</select>";                                         break;                                     case "array":                                         strResponse += "<select name=\"" + (string)option["key"] + "\">";                                         string strValues = (string)option["values"];                                         string[] elements = strValues.Split(''');                                         foreach (string values in elements)                                         {                                             string[] options = values.Split('|');                                             strResponse += "<option value=\"" + options[0] + "\"";                                             if (strValue == options[0]) strResponse += " selected";                                             strResponse += ">" + options[1] + "</option>";                                         }                                         strResponse += "</select>";                                         break;                                 }                                  strResponse += "</p>";                             }                              break;                         case "save-server-settings":                             intServerID = Convert.ToInt32(param["serverid"]);                             Database.UpdateServer(intServerID' "ServerTitle"' param["title"]);                             Database.UpdateServer(intServerID' "ServerType"' param["type"]);                             Database.UpdateServer(intServerID' "ServerCustomJAR"' param["custom"]);                             Database.UpdateServer(intServerID' "ServerAssignedMemory"' Convert.ToInt32(param["memory"]));                             if (param["optimisations"] == "true") Database.UpdateServer(intServerID' "ServerEnableOptimisations"' true);                             else Database.UpdateServer(intServerID' "ServerEnableOptimisations"' false);                             if (param["autostart"] == "true") Database.UpdateServer(intServerID' "ServerAutoStart"' true);                             else Database.UpdateServer(intServerID' "ServerAutoStart"' false);                             Database.SaveSetting(intServerID' "motd"' param["message"]);                              //Save the server's MC settings                             MCServer thisServer = Core.Servers[Convert.ToInt32(context.Request.Parameters["serverid"])];                             thisServer.SaveProperty("server-ip"' param["cfg_listen-ip"]);                             thisServer.SaveProperty("server-port"' param["cfg_port"]);                              json = File.ReadAllText(YAMS.Core.RootFolder + @"\lib\properties.json");                             jProps = JObject.Parse(json);                              strResponse = "";                              foreach (JObject option in jProps["options"])                             {                                 thisServer.SaveProperty((string)option["key"]' param[(string)option["key"]]);                             }                              //If they've selected a Bukkit but not chosen to have them installed' do it for them                             if (param["type"] == "bukkit")                             {                                 if (Database.GetSetting("BukkitInstalled"' "YAMS") == "false")                                 {                                     Database.SaveSetting("BukkitInstalled"' "true");                                     AutoUpdate.CheckUpdates();                                 }                             } else if (param["type"] == "bukkit-beta")                             {                                 if (Database.GetSetting("BukkitBetaInstalled"' "YAMS") == "false")                                 {                                     Database.SaveSetting("BukkitBetaInstalled"' "true");                                     AutoUpdate.CheckUpdates();                                 }                             } else if(param["type"] == "bukkit-dev")                             {                                 if (Database.GetSetting("BukkitDevInstalled"' "YAMS") == "false")                                 {                                     Database.SaveSetting("BukkitDevInstalled"' "true");                                     AutoUpdate.CheckUpdates();                                 }                             }                              if (thisServer.Running) thisServer.RestartIfEmpty();                              break;                         case "get-config-file":                             List<string> listConfig = Core.Servers[Convert.ToInt32(context.Request.Parameters["serverid"])].ReadConfig(param["file"]);                             strResponse = JsonConvert.SerializeObject(listConfig' Formatting.Indented);                             break;                         case "get-server-whitelist":                             strResponse = "{ \"enabled\" : " + Core.Servers[Convert.ToInt32(context.Request.Parameters["serverid"])].GetProperty("white-list") + " }";                             break;                         case "upload-world":                             var test = context.Request.Files["new-world"];                             break;                         case "delete-world":                             bool bolRandomSeed = false;                             if (param["randomseed"] == "true") bolRandomSeed = true;                             Core.Servers[Convert.ToInt32(context.Request.Parameters["serverid"])].ClearWorld(bolRandomSeed);                             strResponse = "{ \"result\" : \"sent\" }";                             break;                         case "remove-server":                             Core.Servers[Convert.ToInt32(context.Request.Parameters["serverid"])].Stop();                             Core.Servers.Remove(Convert.ToInt32(context.Request.Parameters["serverid"]));                             Database.DeleteServer(Convert.ToInt32(context.Request.Parameters["serverid"]));                             strResponse = "{ \"result\" : \"removed\" }";                             break;                         case "about":                             Dictionary<string' string> dicAbout = new Dictionary<string' string> {                                 { "dll" ' FileVersionInfo.GetVersionInfo(Path.Combine(Core.RootFolder' "YAMS-Library.dll")).FileVersion }'                                 { "svc" ' FileVersionInfo.GetVersionInfo(Path.Combine(Core.RootFolder' "YAMS-Service.exe")).FileVersion }'                                 { "gui" ' FileVersionInfo.GetVersionInfo(Path.Combine(Core.RootFolder' "YAMS-Updater.exe")).FileVersion }'                                 { "db" ' Database.GetSetting("DBSchema"' "YAMS") }                             };                             strResponse = JsonConvert.SerializeObject(dicAbout' Formatting.Indented);                             break;                         case "installed-apps":                             Dictionary<string' string> dicApps = new Dictionary<string' string> {                                 { "bukkit" ' Database.GetSetting("BukkitInstalled"' "YAMS") }'                                 { "bukkitBeta" ' Database.GetSetting("BukkitBetaInstalled"' "YAMS") }'                                 { "bukkitDev" ' Database.GetSetting("BukkitDevInstalled"' "YAMS") }'                                 { "overviewer" ' Database.GetSetting("OverviewerInstalled"' "YAMS") }'                                 { "c10t" ' Database.GetSetting("C10tInstalled"' "YAMS") }'                                 { "biomeextractor" ' Database.GetSetting("BiomeExtractorInstalled"' "YAMS") }'                                 { "tectonicus" ' Database.GetSetting("TectonicusInstalled"' "YAMS") }'                                 { "nbtoolkit" ' Database.GetSetting("NBToolkitInstalled"' "YAMS") }                             };                             strResponse = JsonConvert.SerializeObject(dicApps' Formatting.Indented);                             break;                         case "update-apps":                             Database.SaveSetting("OverviewerInstalled"' param["overviewer"]);                             Database.SaveSetting("C10tInstalled"' param["c10t"]);                             Database.SaveSetting("BiomeExtractorInstalled"' param["biomeextractor"]);                             Database.SaveSetting("BukkitInstalled"' param["bukkit"]);                             Database.SaveSetting("BukkitBetaInstalled"' param["bukkitBeta"]);                             Database.SaveSetting("BukkitDevInstalled"' param["bukkitDev"]);                             strResponse = "done";                             break;                         case "force-autoupdate":                             AutoUpdate.CheckUpdates(false' true);                             break;                         case "network-settings":                             List<string> listIPs = new List<string>();                             IPHostEntry ipListen = Dns.GetHostEntry("");                             foreach (IPAddress ipaddress in ipListen.AddressList)                             {                                 if (ipaddress.AddressFamily == System.Net.Sockets.AddressFamily.InterNetwork) listIPs.Add(ipaddress.ToString());                             }                              Dictionary<string' string> dicNetwork = new Dictionary<string' string> {                                 { "portForwarding" ' Database.GetSetting("EnablePortForwarding"' "YAMS") }'                                 { "openFirewall" ' Database.GetSetting("EnableOpenFirewall"' "YAMS") }'                                 { "publicEnable" ' Database.GetSetting("EnablePublicSite"' "YAMS") }'                                 { "adminPort" ' Database.GetSetting("AdminListenPort"' "YAMS") }'                                 { "publicPort" ' Database.GetSetting("PublicListenPort"' "YAMS") }'                                 { "currentIP" ' Database.GetSetting("YAMSListenIP"' "YAMS") }'                                 { "telnetEnable" ' Database.GetSetting("EnableTelnet"' "YAMS") }'                                 { "telnetPort" ' Database.GetSetting("TelnetPort"' "YAMS") }'                                 { "IPs" ' JsonConvert.SerializeObject(listIPs' Formatting.None) }                             };                             strResponse = JsonConvert.SerializeObject(dicNetwork' Formatting.Indented).Replace(@"\"'"").Replace("\"["' "[").Replace("]\""' "]");                             break;                         case "save-network-settings":                             int intTester = 0;                             try                             {                                 //Try to convert to integers to make sure something silly isn't put in. TODO: Javascript validation                                 intTester = Convert.ToInt32(param["adminPort"]);                                 intTester = Convert.ToInt32(param["publicPort"]);                                 IPAddress ipTest = IPAddress.Parse(param["listenIp"]);                             }                             catch (Exception e)                             {                                 YAMS.Database.AddLog("Invalid input on network settings"' "web"' "warn");                                 return ProcessingResult.Abort;                             }                              Database.SaveSetting("EnablePortForwarding"' param["portForwarding"]);                             Database.SaveSetting("EnableOpenFirewall"' param["openFirewall"]);                             Database.SaveSetting("EnablePublicSite"' param["publicEnable"]);                             Database.SaveSetting("AdminListenPort"' param["adminPort"]);                             Database.SaveSetting("PublicListenPort"' param["publicPort"]);                             Database.SaveSetting("YAMSListenIP"' param["listenIp"]);                             Database.SaveSetting("EnableTelnet"' param["telnetEnable"]);                             Database.SaveSetting("TelnetPort"' param["telnetPort"]);                              Database.AddLog("Network settings have been saved' to apply changes a service restart is required. Please check they are correct before restarting"' "web"' "warn");                             break;                         case "job-list":                             DataSet rdJobs = Database.ListJobs();                             strResponse = JsonConvert.SerializeObject(rdJobs' Formatting.Indented);                             break;                         case "delete-job":                             string strJobID = param["jobid"];                             Database.DeleteJob(strJobID);                             strResponse = "done";                             break;                         case "add-job":                             intServerID = Convert.ToInt32(param["job-server"]);                             int intHour = Convert.ToInt32(param["job-hour"]);                             int intMinute = Convert.ToInt32(param["job-minute"]);                             Database.AddJob(param["job-type"]' intHour' intMinute' param["job-params"]' intServerID);                             break;                         case "logout":                             WebSession.Current.UserName = "";                             break;                         case "newserver":                             var NewServer = new List<KeyValuePair<string' string>>();                             NewServer.Add(new KeyValuePair<string' string>("motd"' "Welcome to a YAMS server!"));                             NewServer.Add(new KeyValuePair<string' string>("server-ip"' Networking.GetListenIP().ToString()));                             NewServer.Add(new KeyValuePair<string' string>("server-name"' param["name"]));                             NewServer.Add(new KeyValuePair<string' string>("server-port"' Networking.TcpPort.FindNextAvailablePort(25565).ToString()));                             Database.NewServerWeb(NewServer' param["name"]' 1024);                             strResponse = "done";                             break;                         case "updateDNS":                             Database.SaveSetting("DNSName"' param["dns-name"]);                             Database.SaveSetting("DNSSecret"' param["dns-secret"]);                             Database.SaveSetting("LastExternalIP"' param["dns-external"]);                             strResponse = "done";                             break;                         case "getDNS":                             strResponse = "{ \"name\":\"" + Database.GetSetting("DNSName"' "YAMS") + "\"' \"secret\": \"" + Database.GetSetting("DNSSecret"' "YAMS") + "\"' \"external\" : \"" + Networking.GetExternalIP().ToString() + "\" }";                             break;                         case "backup-now":                             Backup.BackupNow(Core.Servers[Convert.ToInt32(param["serverid"])]' param["title"]);                             strResponse = "{ \"result\" : \"sent\" }";                             break;                         default:                             return ProcessingResult.Abort;                     }
Missing Default,YAMS,Backup,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Functions\Backup.cs,ClearBackups,The following switch statement is missing a default case: switch (strPeriod)                 {                     case "yy":                         endTime = DateTime.Now.AddYears(-intAmount);                         break;                     case "mm":                         endTime = DateTime.Now.AddMonths(-intAmount);                         break;                     case "dd":                         endTime = DateTime.Now.AddDays(-intAmount);                         break;                 }
Missing Default,YAMS,Database,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Functions\Database.cs,GetSetting,The following switch statement is missing a default case: switch (strType)             {                 case "YAMS":                     strTableName = "YAMSSettings";                     break;                 case "MC":                     strTableName = "MCSettings";                     if (intServerID != 0) strServerIDQuery = " and ServerID = @id";                     break;             }
Missing Default,YAMS,Util,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Functions\Util.cs,JavaVersion,The following switch statement is missing a default case: switch (strType)             {                 case "jre":                     strKey = strJRERegKey;                     strKey32on64 = strJRERegKey32on64;                     break;                 case "jdk":                     strKey = strJDKRegKey;                     strKey32on64 = strJDKRegKey32on64;                     break;             }
Missing Default,YAMS,Util,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Functions\Util.cs,JavaPath,The following switch statement is missing a default case: switch (strType)             {                 case "jre":                     strKey = strJRERegKey;                     strKey32on64 = strJRERegKey32on64;                     break;                 case "jdk":                     strKey = strJDKRegKey;                     strKey32on64 = strJDKRegKey32on64;                     break;             }
Missing Default,YAMS.Web,AdminAPI,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Web\AdminAPI.cs,Process,The following switch statement is missing a default case: switch ((string)option["type"])                                 {                                     case "string":                                         strResponse += "<input type=\"text\" name=\"" + (string)option["key"] + "\" value=\"" + strValue + "\" />";                                         break;                                     case "boolean":                                         strResponse += "<select name=\"" + (string)option["key"] + "\">";                                         strResponse += "<option value=\"true\"";                                         if (strValue == "true") strResponse += " selected";                                         strResponse += ">True</option>";                                         strResponse += "<option value=\"false\"";                                         if (strValue == "false") strResponse += " selected";                                         strResponse += ">False</option>";                                         strResponse += "</select>";                                         break;                                     case "integer":                                         strResponse += "<select name=\"" + (string)option["key"] + "\">";                                         int intValue = Convert.ToInt32(strValue);                                         for (var i = Convert.ToInt32((string)option["min"]); i <= Convert.ToInt32((string)option["max"]); i++)                                         {                                             strResponse += "<option value=\"" + i.ToString() + "\"";                                             if (intValue == i) strResponse += " selected";                                             strResponse += ">" + i.ToString() + "</option>";                                         }                                         strResponse += "</select>";                                         break;                                     case "array":                                         strResponse += "<select name=\"" + (string)option["key"] + "\">";                                         string strValues = (string)option["values"];                                         string[] elements = strValues.Split(''');                                         foreach (string values in elements)                                         {                                             string[] options = values.Split('|');                                             strResponse += "<option value=\"" + options[0] + "\"";                                             if (strValue == options[0]) strResponse += " selected";                                             strResponse += ">" + options[1] + "</option>";                                         }                                         strResponse += "</select>";                                         break;                                 }
Missing Default,YAMS.Web,PublicAPI,C:\research\architectureSmells\repos\richardbenson_YAMS\Source\YAMS-Library\Web\PublicAPI.cs,Process,The following switch statement is missing a default case: switch (context.Request.Parameters["action"])                     {                         case "players":                             strResponse = "{\"players\" : [";                             if (s.Players.Count > 0)                             {                                 foreach (KeyValuePair<string' Player> kvp in s.Players)                                 {                                     Vector playerPos = kvp.Value.Position;                                     strResponse += " { \"name\": \"" + kvp.Value.Username + "\"' " +                                                       "\"level\": \"" + kvp.Value.Level + "\"' " +                                                       "\"x\": \"" + playerPos.x.ToString("0.##") + "\"' " +                                                       "\"y\": \"" + playerPos.y.ToString("0.##") + "\"' " +                                                       "\"z\": \"" + playerPos.z.ToString("0.##") + "\" }'";                                 };                                 strResponse = strResponse.Remove(strResponse.Length - 1);                             }                             strResponse += "]}";                             break;                     }
