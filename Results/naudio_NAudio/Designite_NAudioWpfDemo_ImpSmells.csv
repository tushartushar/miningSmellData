Implementation smell,Namespace,Class,File,Method,Description
Complex Method,NAudioWpfDemo.DrumMachineDemo,PatternSequencer,C:\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\PatternSequencer.cs,GetNextMixerInputs,Cyclomatic complexity of the method is 8
Long Statement,NAudioWpfDemo,AudioPlaybackDemoView,C:\repos\naudio_NAudio\NAudioWpfDemo\AudioPlaybackDemo\AudioPlaybackDemoView.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/NAudioWpfDemo;component/audioplaybackdemo/audioplaybackdemoview.xaml"' System.UriKind.Relative); " is 142.
Long Statement,NAudioWpfDemo,PolygonWaveFormControl,C:\repos\naudio_NAudio\NAudioWpfDemo\PolygonWaveFormControl.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/NAudioWpfDemo;component/polygonwaveformcontrol.xaml"' System.UriKind.Relative); " is 125.
Long Statement,NAudioWpfDemo,PolylineWaveFormControl,C:\repos\naudio_NAudio\NAudioWpfDemo\PolylineWaveFormControl.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/NAudioWpfDemo;component/polylinewaveformcontrol.xaml"' System.UriKind.Relative); " is 126.
Long Statement,NAudioWpfDemo.DrumMachineDemo,DrumMachineDemoView,C:\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\DrumMachineDemoView.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/NAudioWpfDemo;component/drummachinedemo/drummachinedemoview.xaml"' System.UriKind.Relative); " is 138.
Long Statement,NAudioWpfDemo.DrumMachineDemo,DrumPatternEditor,C:\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\DrumPatternEditor.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/NAudioWpfDemo;component/drummachinedemo/drumpatterneditor.xaml"' System.UriKind.Relative); " is 136.
Long Statement,NAudioWpfDemo.DrumMachineDemo,SampleSource,C:\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\SampleSource.cs,CreateFromWaveFile,The length of the statement  "                    throw new InvalidOperationException(String.Format("Couldn't read the whole sample' expected {0} samples' got {1}"' n' sourceSamples)); " is 134.
Long Statement,NAudioWpfDemo.EnumMediaFoundationTransforms,EnumMftView,C:\repos\naudio_NAudio\NAudioWpfDemo\EnumMediaFoundationTransforms\EnumMftView.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/NAudioWpfDemo;component/enummediafoundationtransforms/enummftview.xaml"' System.UriKind.Relative); " is 144.
Long Statement,NAudioWpfDemo.EnumMediaFoundationTransforms,EnumMftViewModel,C:\repos\naudio_NAudio\NAudioWpfDemo\EnumMediaFoundationTransforms\EnumMftViewModel.cs,Enumerate,The length of the statement  "            AddTransforms(MediaFoundationApi.EnumerateTransforms(MediaFoundationTransformCategories.AudioDecoder)' "Audio Decoder"); " is 120.
Long Statement,NAudioWpfDemo.EnumMediaFoundationTransforms,EnumMftViewModel,C:\repos\naudio_NAudio\NAudioWpfDemo\EnumMediaFoundationTransforms\EnumMftViewModel.cs,Enumerate,The length of the statement  "            AddTransforms(MediaFoundationApi.EnumerateTransforms(MediaFoundationTransformCategories.AudioEncoder)' "Audio Encoder"); " is 120.
Long Statement,NAudioWpfDemo.EqualizationDemo,EqualizationDemoView,C:\repos\naudio_NAudio\NAudioWpfDemo\EqualizationDemo\EqualizationDemoView.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/NAudioWpfDemo;component/equalizationdemo/equalizationdemoview.xaml"' System.UriKind.Relative); " is 140.
Long Statement,NAudioWpfDemo.EqualizationDemo,Equalizer,C:\repos\naudio_NAudio\NAudioWpfDemo\EqualizationDemo\Equalizer.cs,CreateFilters,The length of the statement  "                        filters[n' bandIndex] = BiQuadFilter.PeakingEQ(sourceProvider.WaveFormat.SampleRate' band.Frequency' band.Bandwidth' band.Gain); " is 128.
Long Statement,NAudioWpfDemo.MediaFoundationEncode,MediaFoundationEncodeView,C:\repos\naudio_NAudio\NAudioWpfDemo\MediaFoundationEncode\MediaFoundationEncodeView.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/NAudioWpfDemo;component/mediafoundationencode/mediafoundationencodeview.xaml"' System.UriKind.Relative); " is 150.
Long Statement,NAudioWpfDemo.MediaFoundationEncode,MediaTypeViewModel,C:\repos\naudio_NAudio\NAudioWpfDemo\MediaFoundationEncode\MediaTypeViewModel.cs,ShortDescription,The length of the statement  "            shortDescription.AppendFormat("{0}' "' channels == 1 ? "mono" : channels == 2 ? "stereo" : channels.ToString() + " channels"); " is 126.
Long Statement,NAudioWpfDemo.MediaFoundationPlayback,MediaFoundationPlaybackView,C:\repos\naudio_NAudio\NAudioWpfDemo\MediaFoundationPlayback\MediaFoundationPlaybackView.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/NAudioWpfDemo;component/mediafoundationplayback/mediafoundationplaybackview.xaml" + " is 129.
Long Statement,NAudioWpfDemo.MediaFoundationResample,MediaFoundationResampleView,C:\repos\naudio_NAudio\NAudioWpfDemo\MediaFoundationResample\MediaFoundationResampleView.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/NAudioWpfDemo;component/mediafoundationresample/mediafoundationresampleview.xaml" + " is 129.
Long Statement,NAudioWpfDemo.WasapiCaptureDemo,RecordingsView,C:\repos\naudio_NAudio\NAudioWpfDemo\WasapiCaptureDemo\RecordingsView.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/NAudioWpfDemo;component/wasapicapturedemo/recordingsview.xaml"' System.UriKind.Relative); " is 135.
Long Statement,NAudioWpfDemo.WasapiCaptureDemo,WasapiCaptureDemoView,C:\repos\naudio_NAudio\NAudioWpfDemo\WasapiCaptureDemo\WasapiCaptureDemoView.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/NAudioWpfDemo;component/wasapicapturedemo/wasapicapturedemoview.xaml"' System.UriKind.Relative); " is 142.
Long Statement,XamlGeneratedNamespace,GeneratedInternalTypeHelper,C:\repos\naudio_NAudio\NAudioWpfDemo\obj\Debug\GeneratedInternalTypeHelper.g.cs,CreateInstance,The length of the statement  "            return System.Activator.CreateInstance(type' ((System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic)  " is 128.
Magic Number,NAudioWpfDemo,MainWindow,C:\repos\naudio_NAudio\NAudioWpfDemo\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: this.Title = this.Title + ((System.Runtime.InteropServices.Marshal.SizeOf(IntPtr.Zero) == 8) ? " (x64)" : " (x86)");
Magic Number,NAudioWpfDemo,AudioPlayback,C:\repos\naudio_NAudio\NAudioWpfDemo\AudioPlaybackDemo\AudioPlayback.cs,OpenFile,The following statement contains a magic number: try              {                  var inputStream = new AudioFileReader(fileName);                  fileStream = inputStream;                  var aggregator = new SampleAggregator(inputStream);                  aggregator.NotificationCount = inputStream.WaveFormat.SampleRate / 100;                  aggregator.PerformFFT = true;                  aggregator.FftCalculated += (s' a) => FftCalculated?.Invoke(this' a);                  aggregator.MaximumCalculated += (s' a) => MaximumCalculated?.Invoke(this' a);                   playbackDevice.Init(aggregator);              }              catch (Exception e)              {                  MessageBox.Show(e.Message' "Problem opening file");                  CloseFile();              }
Magic Number,NAudioWpfDemo,AudioPlayback,C:\repos\naudio_NAudio\NAudioWpfDemo\AudioPlaybackDemo\AudioPlayback.cs,CreateDevice,The following statement contains a magic number: playbackDevice = new WaveOut {DesiredLatency = 200};
Magic Number,NAudioWpfDemo,PolygonWaveFormControl,C:\repos\naudio_NAudio\NAudioWpfDemo\PolygonWaveFormControl.xaml.cs,OnSizeChanged,The following statement contains a magic number: this.yTranslate = this.ActualHeight / 2;
Magic Number,NAudioWpfDemo,PolygonWaveFormControl,C:\repos\naudio_NAudio\NAudioWpfDemo\PolygonWaveFormControl.xaml.cs,OnSizeChanged,The following statement contains a magic number: this.yScale = this.ActualHeight / 2;
Magic Number,NAudioWpfDemo,PolylineWaveFormControl,C:\repos\naudio_NAudio\NAudioWpfDemo\PolylineWaveFormControl.xaml.cs,OnSizeChanged,The following statement contains a magic number: this.yTranslate = this.ActualHeight / 2;
Magic Number,NAudioWpfDemo,PolylineWaveFormControl,C:\repos\naudio_NAudio\NAudioWpfDemo\PolylineWaveFormControl.xaml.cs,OnSizeChanged,The following statement contains a magic number: this.yScale = this.ActualHeight / 2;
Magic Number,NAudioWpfDemo,SampleAggregator,C:\repos\naudio_NAudio\NAudioWpfDemo\AudioPlaybackDemo\SampleAggregator.cs,SampleAggregator,The following statement contains a magic number: this.m = (int)Math.Log(fftLength' 2.0);
Magic Number,NAudioWpfDemo,SpectrumAnalyser,C:\repos\naudio_NAudio\NAudioWpfDemo\SpectrumAnalyser.xaml.cs,Update,The following statement contains a magic number: if (updateCount++ % 2 == 0)              {                  return;              }
Magic Number,NAudioWpfDemo,SpectrumAnalyser,C:\repos\naudio_NAudio\NAudioWpfDemo\SpectrumAnalyser.xaml.cs,Update,The following statement contains a magic number: if (fftResults.Length / 2 != bins)              {                  this.bins = fftResults.Length / 2;                  CalculateXScale();              }
Magic Number,NAudioWpfDemo,SpectrumAnalyser,C:\repos\naudio_NAudio\NAudioWpfDemo\SpectrumAnalyser.xaml.cs,Update,The following statement contains a magic number: if (fftResults.Length / 2 != bins)              {                  this.bins = fftResults.Length / 2;                  CalculateXScale();              }
Magic Number,NAudioWpfDemo,SpectrumAnalyser,C:\repos\naudio_NAudio\NAudioWpfDemo\SpectrumAnalyser.xaml.cs,Update,The following statement contains a magic number: for (int n = 0; n < fftResults.Length / 2; n+= binsPerPoint)              {                  // averaging out bins                  double yPos = 0;                  for (int b = 0; b < binsPerPoint; b++)                  {                      yPos += GetYPosLog(fftResults[n+b]);                  }                  AddResult(n / binsPerPoint' yPos / binsPerPoint);              }
Magic Number,NAudioWpfDemo,SpectrumAnalyser,C:\repos\naudio_NAudio\NAudioWpfDemo\SpectrumAnalyser.xaml.cs,GetYPosLog,The following statement contains a magic number: double intensityDB = 10 * Math.Log10(Math.Sqrt(c.X * c.X + c.Y * c.Y));
Magic Number,NAudioWpfDemo,SpectrumAnalyser,C:\repos\naudio_NAudio\NAudioWpfDemo\SpectrumAnalyser.xaml.cs,GetYPosLog,The following statement contains a magic number: double minDB = -90;
Magic Number,NAudioWpfDemo,WaveFormControl,C:\repos\naudio_NAudio\NAudioWpfDemo\WaveFormControl.xaml.cs,WaveFormControl_SizeChanged,The following statement contains a magic number: this.yTranslate = this.ActualHeight / 2;
Magic Number,NAudioWpfDemo,WaveFormControl,C:\repos\naudio_NAudio\NAudioWpfDemo\WaveFormControl.xaml.cs,WaveFormControl_SizeChanged,The following statement contains a magic number: this.yScale = this.ActualHeight / 2;
Magic Number,NAudioWpfDemo.DrumMachineDemo,DrumMachineDemoViewModel,C:\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\DrumMachineDemoViewModel.cs,DrumMachineDemoViewModel,The following statement contains a magic number: this.tempo = 100;
Magic Number,NAudioWpfDemo.DrumMachineDemo,DrumPatternEditor,C:\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\DrumPatternEditor.xaml.cs,DrumPatternEditor,The following statement contains a magic number: this.pattern = new DrumPattern(notes' 16);
Magic Number,NAudioWpfDemo.DrumMachineDemo,DrumPatternEditor,C:\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\DrumPatternEditor.xaml.cs,DrumPatternEditor,The following statement contains a magic number: this.pattern[0' 0] = this.pattern[0' 8] = 127;
Magic Number,NAudioWpfDemo.DrumMachineDemo,DrumPatternEditor,C:\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\DrumPatternEditor.xaml.cs,DrumPatternEditor,The following statement contains a magic number: this.pattern[0' 0] = this.pattern[0' 8] = 127;
Magic Number,NAudioWpfDemo.DrumMachineDemo,DrumPatternEditor,C:\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\DrumPatternEditor.xaml.cs,DrumPatternEditor,The following statement contains a magic number: this.pattern[1' 4] = this.pattern[1' 12] = 127;
Magic Number,NAudioWpfDemo.DrumMachineDemo,DrumPatternEditor,C:\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\DrumPatternEditor.xaml.cs,DrumPatternEditor,The following statement contains a magic number: this.pattern[1' 4] = this.pattern[1' 12] = 127;
Magic Number,NAudioWpfDemo.DrumMachineDemo,DrumPatternEditor,C:\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\DrumPatternEditor.xaml.cs,DrumPatternEditor,The following statement contains a magic number: this.pattern[1' 4] = this.pattern[1' 12] = 127;
Magic Number,NAudioWpfDemo.DrumMachineDemo,DrumPatternEditor,C:\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\DrumPatternEditor.xaml.cs,DrumPatternEditor,The following statement contains a magic number: for (int n = 0; n < pattern.Steps; n++)              {                  this.pattern[2' n] = 127;                          }
Magic Number,NAudioWpfDemo.DrumMachineDemo,DrumPatternEditor,C:\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\DrumPatternEditor.xaml.cs,DrumPatternEditor,The following statement contains a magic number: for (int n = 0; n < pattern.Steps; n++)              {                  this.pattern[2' n] = 127;                          }
Magic Number,NAudioWpfDemo.DrumMachineDemo,DrumPatternEditor,C:\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\DrumPatternEditor.xaml.cs,DrawNoteNames,The following statement contains a magic number: for (int note = 0; note < pattern.Notes; note++)              {                  var tb = new TextBlock();                  tb.Text = pattern.NoteNames[note];                  tb.SetValue(Canvas.LeftProperty' 0.0);                  tb.SetValue(Canvas.TopProperty' note * gridSquareWidth);                  tb.Foreground = Brushes.Gray;                  tb.FontFamily = new FontFamily("Segoe UI");                  tb.FontSize = 12;                  drumGridCanvas.Children.Add(tb);              }
Magic Number,NAudioWpfDemo.DrumMachineDemo,DrumPatternEditor,C:\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\DrumPatternEditor.xaml.cs,DrawGridLines,The following statement contains a magic number: for (int step = 0; step <= pattern.Steps; step++)              {                  // vertical lines                  Line l = new Line();                  l.X1 = l.X2 = startX + step * gridSquareWidth;                  l.Y1 = 0;                  l.Y2 = pattern.Notes * gridSquareWidth;                  l.Stroke = step % 4 == 0 ? Brushes.Gray : Brushes.LightGray;                  l.StrokeThickness = 1;                  drumGridCanvas.Children.Add(l);              }
Magic Number,NAudioWpfDemo.DrumMachineDemo,DrumPatternEditor,C:\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\DrumPatternEditor.xaml.cs,r_MouseLeftButtonUp,The following statement contains a magic number: pattern[p.Note' p.Step] = pattern[p.Note' p.Step] == 0 ? (byte)127 : (byte)0;
Magic Number,NAudioWpfDemo.DrumMachineDemo,PatternSequencer,C:\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\PatternSequencer.cs,PatternSequencer,The following statement contains a magic number: this.Tempo = 120;
Magic Number,NAudioWpfDemo.DrumMachineDemo,PatternSequencer,C:\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\PatternSequencer.cs,GetNextMixerInputs,The following statement contains a magic number: if (newTempo)              {                  int samplesPerBeat = (this.drumKit.WaveFormat.Channels * this.drumKit.WaveFormat.SampleRate * 60) / tempo;                  this.samplesPerStep = samplesPerBeat / 4;                  //patternPosition = 0;                  newTempo = false;              }
Magic Number,NAudioWpfDemo.DrumMachineDemo,PatternSequencer,C:\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\PatternSequencer.cs,GetNextMixerInputs,The following statement contains a magic number: if (newTempo)              {                  int samplesPerBeat = (this.drumKit.WaveFormat.Channels * this.drumKit.WaveFormat.SampleRate * 60) / tempo;                  this.samplesPerStep = samplesPerBeat / 4;                  //patternPosition = 0;                  newTempo = false;              }
Magic Number,NAudioWpfDemo.DrumMachineDemo,PatternSequencerTests,C:\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\PatternSequencerTests.cs,Pattern_Sequencer_Should_Return_No_Mixer_Inputs_For_An_Empty_Pattern,The following statement contains a magic number: var pattern = new DrumPattern(new string[] { "Bass Drum" }' 16);
Magic Number,NAudioWpfDemo.DrumMachineDemo,PatternSequencerTests,C:\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\PatternSequencerTests.cs,Pattern_Sequencer_Should_Return_No_Mixer_Inputs_For_An_Empty_Pattern,The following statement contains a magic number: var mixerInputs = sequencer.GetNextMixerInputs(100);
Magic Number,NAudioWpfDemo.DrumMachineDemo,PatternSequencerTests,C:\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\PatternSequencerTests.cs,Pattern_Sequencer_Should_Return_A_Non_Delayed_Mixer_Input_For_A_Beat_At_Position_Zero,The following statement contains a magic number: var pattern = new DrumPattern(new string[] { "Bass Drum" }' 16);
Magic Number,NAudioWpfDemo.DrumMachineDemo,PatternSequencerTests,C:\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\PatternSequencerTests.cs,Pattern_Sequencer_Should_Return_A_Non_Delayed_Mixer_Input_For_A_Beat_At_Position_Zero,The following statement contains a magic number: pattern[0' 0] = 127;
Magic Number,NAudioWpfDemo.DrumMachineDemo,PatternSequencerTests,C:\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\PatternSequencerTests.cs,Pattern_Sequencer_Should_Return_A_Non_Delayed_Mixer_Input_For_A_Beat_At_Position_Zero,The following statement contains a magic number: var mixerInputs = sequencer.GetNextMixerInputs(100);
Magic Number,NAudioWpfDemo.DrumMachineDemo,PatternSequencerTests,C:\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\PatternSequencerTests.cs,Pattern_Sequencer_Should_Set_DelayBy_On_Mixer_Inputs_That_Are_Not_At_The_Start,The following statement contains a magic number: var pattern = new DrumPattern(new string[] { "Bass Drum" }' 16);
Magic Number,NAudioWpfDemo.DrumMachineDemo,PatternSequencerTests,C:\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\PatternSequencerTests.cs,Pattern_Sequencer_Should_Set_DelayBy_On_Mixer_Inputs_That_Are_Not_At_The_Start,The following statement contains a magic number: pattern[0' 1] = 127;
Magic Number,NAudioWpfDemo.DrumMachineDemo,PatternSequencerTests,C:\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\PatternSequencerTests.cs,Pattern_Sequencer_Should_Set_DelayBy_On_Mixer_Inputs_That_Are_Not_At_The_Start,The following statement contains a magic number: var sequencer = new PatternSequencer(pattern' new TestKit(CalculateSampleRateForTempo(120)));
Magic Number,NAudioWpfDemo.DrumMachineDemo,PatternSequencerTests,C:\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\PatternSequencerTests.cs,Pattern_Sequencer_Should_Set_DelayBy_On_Mixer_Inputs_That_Are_Not_At_The_Start,The following statement contains a magic number: var mixerInputs = sequencer.GetNextMixerInputs(2);
Magic Number,NAudioWpfDemo.DrumMachineDemo,PatternSequencerTests,C:\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\PatternSequencerTests.cs,CalculateSampleRateForTempo,The following statement contains a magic number: int stepsPerBeat = 4;
Magic Number,NAudioWpfDemo.DrumMachineDemo,PatternSequencerTests,C:\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\PatternSequencerTests.cs,CalculateSampleRateForTempo,The following statement contains a magic number: int stepsPerSecond = stepsPerMinute / 60;
Magic Number,NAudioWpfDemo.DrumMachineDemo,PatternSequencerTests,C:\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\PatternSequencerTests.cs,Pattern_Sequencer_Should_Not_Return_Mixer_Inputs_For_Steps_That_Are_Outside_The_Requested_Range,The following statement contains a magic number: var pattern = new DrumPattern(new string[] { "Bass Drum" }' 16);
Magic Number,NAudioWpfDemo.DrumMachineDemo,PatternSequencerTests,C:\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\PatternSequencerTests.cs,Pattern_Sequencer_Should_Not_Return_Mixer_Inputs_For_Steps_That_Are_Outside_The_Requested_Range,The following statement contains a magic number: pattern[0' 2] = 127;
Magic Number,NAudioWpfDemo.DrumMachineDemo,PatternSequencerTests,C:\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\PatternSequencerTests.cs,Pattern_Sequencer_Should_Not_Return_Mixer_Inputs_For_Steps_That_Are_Outside_The_Requested_Range,The following statement contains a magic number: pattern[0' 2] = 127;
Magic Number,NAudioWpfDemo.DrumMachineDemo,PatternSequencerTests,C:\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\PatternSequencerTests.cs,Pattern_Sequencer_Should_Not_Return_Mixer_Inputs_For_Steps_That_Are_Outside_The_Requested_Range,The following statement contains a magic number: var sequencer = new PatternSequencer(pattern' new TestKit(CalculateSampleRateForTempo(120)));
Magic Number,NAudioWpfDemo.DrumMachineDemo,PatternSequencerTests,C:\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\PatternSequencerTests.cs,Pattern_Sequencer_Should_Not_Return_Mixer_Inputs_For_Steps_That_Are_Outside_The_Requested_Range,The following statement contains a magic number: var mixerInputs = sequencer.GetNextMixerInputs(2);
Magic Number,NAudioWpfDemo.DrumMachineDemo,PatternSequencerTests,C:\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\PatternSequencerTests.cs,Pattern_Sequencer_Should_Loop_Around_After_Reaching_The_End_Of_The_Pattern,The following statement contains a magic number: var pattern = new DrumPattern(new string[] { "Bass Drum" }' 16);
Magic Number,NAudioWpfDemo.DrumMachineDemo,PatternSequencerTests,C:\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\PatternSequencerTests.cs,Pattern_Sequencer_Should_Loop_Around_After_Reaching_The_End_Of_The_Pattern,The following statement contains a magic number: pattern[0' 2] = 127;
Magic Number,NAudioWpfDemo.DrumMachineDemo,PatternSequencerTests,C:\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\PatternSequencerTests.cs,Pattern_Sequencer_Should_Loop_Around_After_Reaching_The_End_Of_The_Pattern,The following statement contains a magic number: pattern[0' 2] = 127;
Magic Number,NAudioWpfDemo.DrumMachineDemo,PatternSequencerTests,C:\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\PatternSequencerTests.cs,Pattern_Sequencer_Should_Loop_Around_After_Reaching_The_End_Of_The_Pattern,The following statement contains a magic number: var sequencer = new PatternSequencer(pattern' new TestKit(CalculateSampleRateForTempo(120)));
Magic Number,NAudioWpfDemo.DrumMachineDemo,PatternSequencerTests,C:\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\PatternSequencerTests.cs,Pattern_Sequencer_Should_Loop_Around_After_Reaching_The_End_Of_The_Pattern,The following statement contains a magic number: var mixerInputs = sequencer.GetNextMixerInputs(32);
Magic Number,NAudioWpfDemo.DrumMachineDemo,PatternSequencerTests,C:\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\PatternSequencerTests.cs,Pattern_Sequencer_Should_Loop_Around_After_Reaching_The_End_Of_The_Pattern,The following statement contains a magic number: Assert.AreEqual(2' mixerInputs.Count());
Magic Number,NAudioWpfDemo.DrumMachineDemo,PatternSequencerTests,C:\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\PatternSequencerTests.cs,Pattern_Sequencer_Should_Carry_On_From_Where_It_Left_Off_On_Second_Call,The following statement contains a magic number: var pattern = new DrumPattern(new string[] { "Bass Drum" }' 16);
Magic Number,NAudioWpfDemo.DrumMachineDemo,PatternSequencerTests,C:\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\PatternSequencerTests.cs,Pattern_Sequencer_Should_Carry_On_From_Where_It_Left_Off_On_Second_Call,The following statement contains a magic number: pattern[0' 1] = 127;
Magic Number,NAudioWpfDemo.DrumMachineDemo,PatternSequencerTests,C:\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\PatternSequencerTests.cs,Pattern_Sequencer_Should_Carry_On_From_Where_It_Left_Off_On_Second_Call,The following statement contains a magic number: var sequencer = new PatternSequencer(pattern' new TestKit(CalculateSampleRateForTempo(120)));
Magic Number,NAudioWpfDemo.DrumMachineDemo,PatternSequencerTests,C:\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\PatternSequencerTests.cs,DelayBy_Values_Are_Relative_To_Current_Position_On_Subsequent_Calls,The following statement contains a magic number: var pattern = new DrumPattern(new string[] { "Bass Drum" }' 16);
Magic Number,NAudioWpfDemo.DrumMachineDemo,PatternSequencerTests,C:\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\PatternSequencerTests.cs,DelayBy_Values_Are_Relative_To_Current_Position_On_Subsequent_Calls,The following statement contains a magic number: pattern[0' 6] = 127;
Magic Number,NAudioWpfDemo.DrumMachineDemo,PatternSequencerTests,C:\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\PatternSequencerTests.cs,DelayBy_Values_Are_Relative_To_Current_Position_On_Subsequent_Calls,The following statement contains a magic number: pattern[0' 6] = 127;
Magic Number,NAudioWpfDemo.DrumMachineDemo,PatternSequencerTests,C:\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\PatternSequencerTests.cs,DelayBy_Values_Are_Relative_To_Current_Position_On_Subsequent_Calls,The following statement contains a magic number: var sequencer = new PatternSequencer(pattern' new TestKit(CalculateSampleRateForTempo(120)));
Magic Number,NAudioWpfDemo.DrumMachineDemo,PatternSequencerTests,C:\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\PatternSequencerTests.cs,DelayBy_Values_Are_Relative_To_Current_Position_On_Subsequent_Calls,The following statement contains a magic number: var mixerInputs = sequencer.GetNextMixerInputs(3);
Magic Number,NAudioWpfDemo.DrumMachineDemo,PatternSequencerTests,C:\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\PatternSequencerTests.cs,DelayBy_Values_Are_Relative_To_Current_Position_On_Subsequent_Calls,The following statement contains a magic number: mixerInputs = sequencer.GetNextMixerInputs(4);
Magic Number,NAudioWpfDemo.DrumMachineDemo,PatternSequencerTests,C:\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\PatternSequencerTests.cs,DelayBy_Values_Are_Relative_To_Current_Position_On_Subsequent_Calls,The following statement contains a magic number: Assert.AreEqual(3' mixerInputs.First().DelayBy' "DelayBy");
Magic Number,NAudioWpfDemo.DrumMachineDemo,PatternSequencerTests,C:\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\PatternSequencerTests.cs,Multiple_DelayBy_Values_Are_All_Relative_To_Current_Position_Before_Calling_GetNextMixerInputs,The following statement contains a magic number: var pattern = new DrumPattern(new string[] { "Bass Drum" }' 16);
Magic Number,NAudioWpfDemo.DrumMachineDemo,PatternSequencerTests,C:\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\PatternSequencerTests.cs,Multiple_DelayBy_Values_Are_All_Relative_To_Current_Position_Before_Calling_GetNextMixerInputs,The following statement contains a magic number: pattern[0' 6] = 127;
Magic Number,NAudioWpfDemo.DrumMachineDemo,PatternSequencerTests,C:\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\PatternSequencerTests.cs,Multiple_DelayBy_Values_Are_All_Relative_To_Current_Position_Before_Calling_GetNextMixerInputs,The following statement contains a magic number: pattern[0' 6] = 127;
Magic Number,NAudioWpfDemo.DrumMachineDemo,PatternSequencerTests,C:\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\PatternSequencerTests.cs,Multiple_DelayBy_Values_Are_All_Relative_To_Current_Position_Before_Calling_GetNextMixerInputs,The following statement contains a magic number: pattern[0' 7] = 127;
Magic Number,NAudioWpfDemo.DrumMachineDemo,PatternSequencerTests,C:\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\PatternSequencerTests.cs,Multiple_DelayBy_Values_Are_All_Relative_To_Current_Position_Before_Calling_GetNextMixerInputs,The following statement contains a magic number: pattern[0' 7] = 127;
Magic Number,NAudioWpfDemo.DrumMachineDemo,PatternSequencerTests,C:\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\PatternSequencerTests.cs,Multiple_DelayBy_Values_Are_All_Relative_To_Current_Position_Before_Calling_GetNextMixerInputs,The following statement contains a magic number: pattern[0' 8] = 127;
Magic Number,NAudioWpfDemo.DrumMachineDemo,PatternSequencerTests,C:\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\PatternSequencerTests.cs,Multiple_DelayBy_Values_Are_All_Relative_To_Current_Position_Before_Calling_GetNextMixerInputs,The following statement contains a magic number: pattern[0' 8] = 127;
Magic Number,NAudioWpfDemo.DrumMachineDemo,PatternSequencerTests,C:\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\PatternSequencerTests.cs,Multiple_DelayBy_Values_Are_All_Relative_To_Current_Position_Before_Calling_GetNextMixerInputs,The following statement contains a magic number: var sequencer = new PatternSequencer(pattern' new TestKit(CalculateSampleRateForTempo(120)));
Magic Number,NAudioWpfDemo.DrumMachineDemo,PatternSequencerTests,C:\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\PatternSequencerTests.cs,Multiple_DelayBy_Values_Are_All_Relative_To_Current_Position_Before_Calling_GetNextMixerInputs,The following statement contains a magic number: var mixerInputs = sequencer.GetNextMixerInputs(3);
Magic Number,NAudioWpfDemo.DrumMachineDemo,PatternSequencerTests,C:\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\PatternSequencerTests.cs,Multiple_DelayBy_Values_Are_All_Relative_To_Current_Position_Before_Calling_GetNextMixerInputs,The following statement contains a magic number: mixerInputs = sequencer.GetNextMixerInputs(10);
Magic Number,NAudioWpfDemo.DrumMachineDemo,PatternSequencerTests,C:\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\PatternSequencerTests.cs,Multiple_DelayBy_Values_Are_All_Relative_To_Current_Position_Before_Calling_GetNextMixerInputs,The following statement contains a magic number: Assert.AreEqual(3' mixerInputs.Count' "Second Read");
Magic Number,NAudioWpfDemo.DrumMachineDemo,PatternSequencerTests,C:\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\PatternSequencerTests.cs,Multiple_DelayBy_Values_Are_All_Relative_To_Current_Position_Before_Calling_GetNextMixerInputs,The following statement contains a magic number: Assert.AreEqual(3' mixerInputs[0].DelayBy' "Inputs[0].DelayBy");
Magic Number,NAudioWpfDemo.DrumMachineDemo,PatternSequencerTests,C:\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\PatternSequencerTests.cs,Multiple_DelayBy_Values_Are_All_Relative_To_Current_Position_Before_Calling_GetNextMixerInputs,The following statement contains a magic number: Assert.AreEqual(4' mixerInputs[1].DelayBy' "Inputs[1].DelayBy");
Magic Number,NAudioWpfDemo.DrumMachineDemo,PatternSequencerTests,C:\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\PatternSequencerTests.cs,Multiple_DelayBy_Values_Are_All_Relative_To_Current_Position_Before_Calling_GetNextMixerInputs,The following statement contains a magic number: Assert.AreEqual(5' mixerInputs[2].DelayBy' "Inputs[2].DelayBy");
Magic Number,NAudioWpfDemo.DrumMachineDemo,PatternSequencerTests,C:\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\PatternSequencerTests.cs,Multiple_DelayBy_Values_Are_All_Relative_To_Current_Position_Before_Calling_GetNextMixerInputs,The following statement contains a magic number: Assert.AreEqual(5' mixerInputs[2].DelayBy' "Inputs[2].DelayBy");
Magic Number,NAudioWpfDemo.DrumMachineDemo,PatternSequencerTests,C:\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\PatternSequencerTests.cs,DelayBy_Values_Should_Be_Correct_On_Wraparound,The following statement contains a magic number: var pattern = new DrumPattern(new string[] { "Bass Drum" }' 16);
Magic Number,NAudioWpfDemo.DrumMachineDemo,PatternSequencerTests,C:\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\PatternSequencerTests.cs,DelayBy_Values_Should_Be_Correct_On_Wraparound,The following statement contains a magic number: pattern[0' 0] = 127;
Magic Number,NAudioWpfDemo.DrumMachineDemo,PatternSequencerTests,C:\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\PatternSequencerTests.cs,DelayBy_Values_Should_Be_Correct_On_Wraparound,The following statement contains a magic number: var sequencer = new PatternSequencer(pattern' new TestKit(CalculateSampleRateForTempo(120)));
Magic Number,NAudioWpfDemo.DrumMachineDemo,PatternSequencerTests,C:\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\PatternSequencerTests.cs,DelayBy_Values_Should_Be_Correct_On_Wraparound,The following statement contains a magic number: var mixerInputs = sequencer.GetNextMixerInputs(12);
Magic Number,NAudioWpfDemo.DrumMachineDemo,PatternSequencerTests,C:\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\PatternSequencerTests.cs,DelayBy_Values_Should_Be_Correct_On_Wraparound,The following statement contains a magic number: mixerInputs = sequencer.GetNextMixerInputs(12);
Magic Number,NAudioWpfDemo.DrumMachineDemo,PatternSequencerTests,C:\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\PatternSequencerTests.cs,DelayBy_Values_Should_Be_Correct_On_Wraparound,The following statement contains a magic number: Assert.AreEqual(4' mixerInputs[0].DelayBy' "Inputs[0].DelayBy");
Magic Number,NAudioWpfDemo.DrumMachineDemo,PatternSequencerTests,C:\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\PatternSequencerTests.cs,DelayBy_Values_Should_Be_Correct_On_Subsequent_Read_After_Wraparound,The following statement contains a magic number: var pattern = new DrumPattern(new string[] { "Bass Drum" }' 16);
Magic Number,NAudioWpfDemo.DrumMachineDemo,PatternSequencerTests,C:\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\PatternSequencerTests.cs,DelayBy_Values_Should_Be_Correct_On_Subsequent_Read_After_Wraparound,The following statement contains a magic number: pattern[0' 0] = 127;
Magic Number,NAudioWpfDemo.DrumMachineDemo,PatternSequencerTests,C:\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\PatternSequencerTests.cs,DelayBy_Values_Should_Be_Correct_On_Subsequent_Read_After_Wraparound,The following statement contains a magic number: pattern[0' 10] = 127;
Magic Number,NAudioWpfDemo.DrumMachineDemo,PatternSequencerTests,C:\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\PatternSequencerTests.cs,DelayBy_Values_Should_Be_Correct_On_Subsequent_Read_After_Wraparound,The following statement contains a magic number: pattern[0' 10] = 127;
Magic Number,NAudioWpfDemo.DrumMachineDemo,PatternSequencerTests,C:\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\PatternSequencerTests.cs,DelayBy_Values_Should_Be_Correct_On_Subsequent_Read_After_Wraparound,The following statement contains a magic number: var sequencer = new PatternSequencer(pattern' new TestKit(CalculateSampleRateForTempo(120)));
Magic Number,NAudioWpfDemo.DrumMachineDemo,PatternSequencerTests,C:\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\PatternSequencerTests.cs,DelayBy_Values_Should_Be_Correct_On_Subsequent_Read_After_Wraparound,The following statement contains a magic number: var mixerInputs = sequencer.GetNextMixerInputs(12);
Magic Number,NAudioWpfDemo.DrumMachineDemo,PatternSequencerTests,C:\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\PatternSequencerTests.cs,DelayBy_Values_Should_Be_Correct_On_Subsequent_Read_After_Wraparound,The following statement contains a magic number: Assert.AreEqual(2' mixerInputs.Count' "First read");
Magic Number,NAudioWpfDemo.DrumMachineDemo,PatternSequencerTests,C:\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\PatternSequencerTests.cs,DelayBy_Values_Should_Be_Correct_On_Subsequent_Read_After_Wraparound,The following statement contains a magic number: mixerInputs = sequencer.GetNextMixerInputs(12);
Magic Number,NAudioWpfDemo.DrumMachineDemo,PatternSequencerTests,C:\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\PatternSequencerTests.cs,DelayBy_Values_Should_Be_Correct_On_Subsequent_Read_After_Wraparound,The following statement contains a magic number: Assert.AreEqual(4' mixerInputs[0].DelayBy' "Inputs[0].DelayBy");
Magic Number,NAudioWpfDemo.DrumMachineDemo,PatternSequencerTests,C:\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\PatternSequencerTests.cs,DelayBy_Values_Should_Be_Correct_On_Subsequent_Read_After_Wraparound,The following statement contains a magic number: mixerInputs = sequencer.GetNextMixerInputs(12);
Magic Number,NAudioWpfDemo.DrumMachineDemo,PatternSequencerTests,C:\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\PatternSequencerTests.cs,DelayBy_Values_Should_Be_Correct_On_Subsequent_Read_After_Wraparound,The following statement contains a magic number: Assert.AreEqual(2' mixerInputs[0].DelayBy' "3rd Read Inputs[0].DelayBy");
Magic Number,NAudioWpfDemo.DrumMachineDemo,PatternSequencerTests,C:\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\PatternSequencerTests.cs,DelayBy_Values_Should_Be_Correct_On_Subsequent_Read_After_Wraparound,The following statement contains a magic number: Assert.AreEqual(8' mixerInputs[1].DelayBy' "3rd Read Inputs[1].DelayBy");
Magic Number,NAudioWpfDemo.DrumMachineDemo,PatternSequencerTests,C:\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\PatternSequencerTests.cs,Tempo_Can_Be_Changed,The following statement contains a magic number: var pattern = new DrumPattern(new string[] { "Bass Drum" }' 16);
Magic Number,NAudioWpfDemo.DrumMachineDemo,PatternSequencerTests,C:\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\PatternSequencerTests.cs,Tempo_Can_Be_Changed,The following statement contains a magic number: for (int n = 0; n < pattern.Steps; n++)                  pattern[0' n] = 127;
Magic Number,NAudioWpfDemo.DrumMachineDemo,PatternSequencerTests,C:\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\PatternSequencerTests.cs,Tempo_Can_Be_Changed,The following statement contains a magic number: var sequencer = new PatternSequencer(pattern' new TestKit(CalculateSampleRateForTempo(120)));
Magic Number,NAudioWpfDemo.DrumMachineDemo,PatternSequencerTests,C:\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\PatternSequencerTests.cs,Tempo_Can_Be_Changed,The following statement contains a magic number: sequencer.Tempo = 60;
Magic Number,NAudioWpfDemo.DrumMachineDemo,PatternSequencerTests,C:\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\PatternSequencerTests.cs,Tempo_Can_Be_Changed,The following statement contains a magic number: var mixerInputs = sequencer.GetNextMixerInputs(16);
Magic Number,NAudioWpfDemo.DrumMachineDemo,PatternSequencerTests,C:\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\PatternSequencerTests.cs,Tempo_Can_Be_Changed,The following statement contains a magic number: Assert.AreEqual(8' mixerInputs.Count' "First read");
Magic Number,NAudioWpfDemo.DrumMachineDemo,PatternSequencerTests,C:\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\PatternSequencerTests.cs,When_Tempo_Is_Halved_DelayBy_Is_Doubled,The following statement contains a magic number: var pattern = new DrumPattern(new string[] { "Bass Drum" }' 16);
Magic Number,NAudioWpfDemo.DrumMachineDemo,PatternSequencerTests,C:\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\PatternSequencerTests.cs,When_Tempo_Is_Halved_DelayBy_Is_Doubled,The following statement contains a magic number: for (int n = 0; n < pattern.Steps; n++)                  pattern[0' n] = 127;
Magic Number,NAudioWpfDemo.DrumMachineDemo,PatternSequencerTests,C:\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\PatternSequencerTests.cs,When_Tempo_Is_Halved_DelayBy_Is_Doubled,The following statement contains a magic number: var sequencer = new PatternSequencer(pattern' new TestKit(CalculateSampleRateForTempo(120)));
Magic Number,NAudioWpfDemo.DrumMachineDemo,PatternSequencerTests,C:\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\PatternSequencerTests.cs,When_Tempo_Is_Halved_DelayBy_Is_Doubled,The following statement contains a magic number: sequencer.Tempo = 60;
Magic Number,NAudioWpfDemo.DrumMachineDemo,PatternSequencerTests,C:\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\PatternSequencerTests.cs,When_Tempo_Is_Halved_DelayBy_Is_Doubled,The following statement contains a magic number: var mixerInputs = sequencer.GetNextMixerInputs(16);
Magic Number,NAudioWpfDemo.DrumMachineDemo,PatternSequencerTests,C:\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\PatternSequencerTests.cs,When_Tempo_Is_Halved_DelayBy_Is_Doubled,The following statement contains a magic number: Assert.AreEqual(2' mixerInputs[1].DelayBy' "First beat DelayBy");
Magic Number,NAudioWpfDemo.DrumMachineDemo,PatternSequencerTests,C:\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\PatternSequencerTests.cs,Pattern_Sequencer_Should_Return_Mixer_Inputs_for_Beats_On_Any_Note,The following statement contains a magic number: var pattern = new DrumPattern(new string[] { "Bass Drum"' "Snare Drum" }' 16);
Magic Number,NAudioWpfDemo.DrumMachineDemo,PatternSequencerTests,C:\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\PatternSequencerTests.cs,Pattern_Sequencer_Should_Return_Mixer_Inputs_for_Beats_On_Any_Note,The following statement contains a magic number: pattern[1' 5] = 127;
Magic Number,NAudioWpfDemo.DrumMachineDemo,PatternSequencerTests,C:\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\PatternSequencerTests.cs,Pattern_Sequencer_Should_Return_Mixer_Inputs_for_Beats_On_Any_Note,The following statement contains a magic number: pattern[1' 5] = 127;
Magic Number,NAudioWpfDemo.DrumMachineDemo,PatternSequencerTests,C:\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\PatternSequencerTests.cs,Pattern_Sequencer_Should_Return_Mixer_Inputs_for_Beats_On_Any_Note,The following statement contains a magic number: var sequencer = new PatternSequencer(pattern' new TestKit(CalculateSampleRateForTempo(120)));
Magic Number,NAudioWpfDemo.DrumMachineDemo,PatternSequencerTests,C:\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\PatternSequencerTests.cs,Pattern_Sequencer_Should_Return_Mixer_Inputs_for_Beats_On_Any_Note,The following statement contains a magic number: var mixerInputs = sequencer.GetNextMixerInputs(16);
Magic Number,NAudioWpfDemo.DrumMachineDemo,SampleSource,C:\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\SampleSource.cs,CreateFromWaveFile,The following statement contains a magic number: using (var reader = new WaveFileReader(fileName))              {                  var sp = reader.ToSampleProvider();                  var sourceSamples = (int)(reader.Length / (reader.WaveFormat.BitsPerSample / 8));                  var sampleData = new float[sourceSamples];                  int n = sp.Read(sampleData' 0' sourceSamples);                  if (n != sourceSamples)                  {                      throw new InvalidOperationException(String.Format("Couldn't read the whole sample' expected {0} samples' got {1}"' n' sourceSamples));                  }                  var ss = new SampleSource(sampleData' sp.WaveFormat);                  return ss;              }
Magic Number,NAudioWpfDemo.EqualizationDemo,EqualizationDemoViewModel,C:\repos\naudio_NAudio\NAudioWpfDemo\EqualizationDemo\EqualizationDemoViewModel.cs,EqualizationDemoViewModel,The following statement contains a magic number: bands = new EqualizerBand[]                      {                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 100' Gain = 0}'                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 200' Gain = 0}'                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 400' Gain = 0}'                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 800' Gain = 0}'                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 1200' Gain = 0}'                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 2400' Gain = 0}'                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 4800' Gain = 0}'                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 9600' Gain = 0}'                      };
Magic Number,NAudioWpfDemo.EqualizationDemo,EqualizationDemoViewModel,C:\repos\naudio_NAudio\NAudioWpfDemo\EqualizationDemo\EqualizationDemoViewModel.cs,EqualizationDemoViewModel,The following statement contains a magic number: bands = new EqualizerBand[]                      {                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 100' Gain = 0}'                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 200' Gain = 0}'                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 400' Gain = 0}'                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 800' Gain = 0}'                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 1200' Gain = 0}'                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 2400' Gain = 0}'                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 4800' Gain = 0}'                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 9600' Gain = 0}'                      };
Magic Number,NAudioWpfDemo.EqualizationDemo,EqualizationDemoViewModel,C:\repos\naudio_NAudio\NAudioWpfDemo\EqualizationDemo\EqualizationDemoViewModel.cs,EqualizationDemoViewModel,The following statement contains a magic number: bands = new EqualizerBand[]                      {                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 100' Gain = 0}'                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 200' Gain = 0}'                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 400' Gain = 0}'                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 800' Gain = 0}'                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 1200' Gain = 0}'                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 2400' Gain = 0}'                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 4800' Gain = 0}'                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 9600' Gain = 0}'                      };
Magic Number,NAudioWpfDemo.EqualizationDemo,EqualizationDemoViewModel,C:\repos\naudio_NAudio\NAudioWpfDemo\EqualizationDemo\EqualizationDemoViewModel.cs,EqualizationDemoViewModel,The following statement contains a magic number: bands = new EqualizerBand[]                      {                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 100' Gain = 0}'                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 200' Gain = 0}'                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 400' Gain = 0}'                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 800' Gain = 0}'                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 1200' Gain = 0}'                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 2400' Gain = 0}'                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 4800' Gain = 0}'                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 9600' Gain = 0}'                      };
Magic Number,NAudioWpfDemo.EqualizationDemo,EqualizationDemoViewModel,C:\repos\naudio_NAudio\NAudioWpfDemo\EqualizationDemo\EqualizationDemoViewModel.cs,EqualizationDemoViewModel,The following statement contains a magic number: bands = new EqualizerBand[]                      {                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 100' Gain = 0}'                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 200' Gain = 0}'                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 400' Gain = 0}'                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 800' Gain = 0}'                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 1200' Gain = 0}'                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 2400' Gain = 0}'                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 4800' Gain = 0}'                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 9600' Gain = 0}'                      };
Magic Number,NAudioWpfDemo.EqualizationDemo,EqualizationDemoViewModel,C:\repos\naudio_NAudio\NAudioWpfDemo\EqualizationDemo\EqualizationDemoViewModel.cs,EqualizationDemoViewModel,The following statement contains a magic number: bands = new EqualizerBand[]                      {                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 100' Gain = 0}'                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 200' Gain = 0}'                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 400' Gain = 0}'                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 800' Gain = 0}'                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 1200' Gain = 0}'                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 2400' Gain = 0}'                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 4800' Gain = 0}'                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 9600' Gain = 0}'                      };
Magic Number,NAudioWpfDemo.EqualizationDemo,EqualizationDemoViewModel,C:\repos\naudio_NAudio\NAudioWpfDemo\EqualizationDemo\EqualizationDemoViewModel.cs,EqualizationDemoViewModel,The following statement contains a magic number: bands = new EqualizerBand[]                      {                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 100' Gain = 0}'                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 200' Gain = 0}'                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 400' Gain = 0}'                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 800' Gain = 0}'                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 1200' Gain = 0}'                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 2400' Gain = 0}'                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 4800' Gain = 0}'                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 9600' Gain = 0}'                      };
Magic Number,NAudioWpfDemo.EqualizationDemo,EqualizationDemoViewModel,C:\repos\naudio_NAudio\NAudioWpfDemo\EqualizationDemo\EqualizationDemoViewModel.cs,EqualizationDemoViewModel,The following statement contains a magic number: bands = new EqualizerBand[]                      {                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 100' Gain = 0}'                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 200' Gain = 0}'                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 400' Gain = 0}'                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 800' Gain = 0}'                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 1200' Gain = 0}'                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 2400' Gain = 0}'                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 4800' Gain = 0}'                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 9600' Gain = 0}'                      };
Magic Number,NAudioWpfDemo.MediaFoundationEncode,MediaTypeViewModel,C:\repos\naudio_NAudio\NAudioWpfDemo\MediaFoundationEncode\MediaTypeViewModel.cs,ShortDescription,The following statement contains a magic number: shortDescription.AppendFormat("{0:0.#}kbps' "' (8 * bytesPerSecond) / 1000M);
Magic Number,NAudioWpfDemo.MediaFoundationEncode,MediaTypeViewModel,C:\repos\naudio_NAudio\NAudioWpfDemo\MediaFoundationEncode\MediaTypeViewModel.cs,ShortDescription,The following statement contains a magic number: shortDescription.AppendFormat("{0}' "' channels == 1 ? "mono" : channels == 2 ? "stereo" : channels.ToString() + " channels");
Magic Number,NAudioWpfDemo.MediaFoundationEncode,MediaTypeViewModel,C:\repos\naudio_NAudio\NAudioWpfDemo\MediaFoundationEncode\MediaTypeViewModel.cs,ShortDescription,The following statement contains a magic number: shortDescription.Length -= 2;
Magic Number,NAudioWpfDemo.MediaFoundationPlayback,MediaFoundationPlaybackViewModel,C:\repos\naudio_NAudio\NAudioWpfDemo\MediaFoundationPlayback\MediaFoundationPlaybackViewModel.cs,MediaFoundationPlaybackViewModel,The following statement contains a magic number: timer.Interval = TimeSpan.FromMilliseconds(500);
Magic Number,NAudioWpfDemo.MediaFoundationResample,MediaFoundationResampleViewModel,C:\repos\naudio_NAudio\NAudioWpfDemo\MediaFoundationResample\MediaFoundationResampleViewModel.cs,MediaFoundationResampleViewModel,The following statement contains a magic number: SampleRates = new int[] { 8000' 16000' 22050' 32000' 44100' 48000' 88200' 96000 };
Magic Number,NAudioWpfDemo.MediaFoundationResample,MediaFoundationResampleViewModel,C:\repos\naudio_NAudio\NAudioWpfDemo\MediaFoundationResample\MediaFoundationResampleViewModel.cs,MediaFoundationResampleViewModel,The following statement contains a magic number: SampleRates = new int[] { 8000' 16000' 22050' 32000' 44100' 48000' 88200' 96000 };
Magic Number,NAudioWpfDemo.MediaFoundationResample,MediaFoundationResampleViewModel,C:\repos\naudio_NAudio\NAudioWpfDemo\MediaFoundationResample\MediaFoundationResampleViewModel.cs,MediaFoundationResampleViewModel,The following statement contains a magic number: SampleRates = new int[] { 8000' 16000' 22050' 32000' 44100' 48000' 88200' 96000 };
Magic Number,NAudioWpfDemo.MediaFoundationResample,MediaFoundationResampleViewModel,C:\repos\naudio_NAudio\NAudioWpfDemo\MediaFoundationResample\MediaFoundationResampleViewModel.cs,MediaFoundationResampleViewModel,The following statement contains a magic number: SampleRates = new int[] { 8000' 16000' 22050' 32000' 44100' 48000' 88200' 96000 };
Magic Number,NAudioWpfDemo.MediaFoundationResample,MediaFoundationResampleViewModel,C:\repos\naudio_NAudio\NAudioWpfDemo\MediaFoundationResample\MediaFoundationResampleViewModel.cs,MediaFoundationResampleViewModel,The following statement contains a magic number: SampleRates = new int[] { 8000' 16000' 22050' 32000' 44100' 48000' 88200' 96000 };
Magic Number,NAudioWpfDemo.MediaFoundationResample,MediaFoundationResampleViewModel,C:\repos\naudio_NAudio\NAudioWpfDemo\MediaFoundationResample\MediaFoundationResampleViewModel.cs,MediaFoundationResampleViewModel,The following statement contains a magic number: SampleRates = new int[] { 8000' 16000' 22050' 32000' 44100' 48000' 88200' 96000 };
Magic Number,NAudioWpfDemo.MediaFoundationResample,MediaFoundationResampleViewModel,C:\repos\naudio_NAudio\NAudioWpfDemo\MediaFoundationResample\MediaFoundationResampleViewModel.cs,MediaFoundationResampleViewModel,The following statement contains a magic number: SampleRates = new int[] { 8000' 16000' 22050' 32000' 44100' 48000' 88200' 96000 };
Magic Number,NAudioWpfDemo.MediaFoundationResample,MediaFoundationResampleViewModel,C:\repos\naudio_NAudio\NAudioWpfDemo\MediaFoundationResample\MediaFoundationResampleViewModel.cs,MediaFoundationResampleViewModel,The following statement contains a magic number: SampleRates = new int[] { 8000' 16000' 22050' 32000' 44100' 48000' 88200' 96000 };
Magic Number,NAudioWpfDemo.MediaFoundationResample,MediaFoundationResampleViewModel,C:\repos\naudio_NAudio\NAudioWpfDemo\MediaFoundationResample\MediaFoundationResampleViewModel.cs,MediaFoundationResampleViewModel,The following statement contains a magic number: selectedSampleRate = 16000;
Magic Number,NAudioWpfDemo.MediaFoundationResample,MediaFoundationResampleViewModel,C:\repos\naudio_NAudio\NAudioWpfDemo\MediaFoundationResample\MediaFoundationResampleViewModel.cs,CreateRepositionTestFile,The following statement contains a magic number: using (var writer = new WaveFileWriter(saveFile' source.WaveFormat))              {                  // half-second buffer                  var buffer = new byte[writer.WaveFormat.AverageBytesPerSecond / 2];                  // read three and a half seconds (half a second is to ensure Resampler has some leftovers to drain)                  for (int n = 0; n < 7; n++)                  {                      var read = source.Read(buffer' 0' buffer.Length);                      writer.Write(buffer' 0' read);                  }                  Array.Clear(buffer' 0' buffer.Length);                  // two seconds of absolute silence                  for (int n = 0; n < 4; n++)                  {                      writer.Write(buffer' 0' buffer.Length);                  }                  // do the reposition                  reposition();                  // now read some more out                  for (int n = 0; n < 6; n++)                  {                      var read = source.Read(buffer' 0' buffer.Length);                      writer.Write(buffer' 0' read);                  }              }
Magic Number,NAudioWpfDemo.MediaFoundationResample,MediaFoundationResampleViewModel,C:\repos\naudio_NAudio\NAudioWpfDemo\MediaFoundationResample\MediaFoundationResampleViewModel.cs,CreateRepositionTestFile,The following statement contains a magic number: using (var writer = new WaveFileWriter(saveFile' source.WaveFormat))              {                  // half-second buffer                  var buffer = new byte[writer.WaveFormat.AverageBytesPerSecond / 2];                  // read three and a half seconds (half a second is to ensure Resampler has some leftovers to drain)                  for (int n = 0; n < 7; n++)                  {                      var read = source.Read(buffer' 0' buffer.Length);                      writer.Write(buffer' 0' read);                  }                  Array.Clear(buffer' 0' buffer.Length);                  // two seconds of absolute silence                  for (int n = 0; n < 4; n++)                  {                      writer.Write(buffer' 0' buffer.Length);                  }                  // do the reposition                  reposition();                  // now read some more out                  for (int n = 0; n < 6; n++)                  {                      var read = source.Read(buffer' 0' buffer.Length);                      writer.Write(buffer' 0' read);                  }              }
Magic Number,NAudioWpfDemo.MediaFoundationResample,MediaFoundationResampleViewModel,C:\repos\naudio_NAudio\NAudioWpfDemo\MediaFoundationResample\MediaFoundationResampleViewModel.cs,CreateRepositionTestFile,The following statement contains a magic number: using (var writer = new WaveFileWriter(saveFile' source.WaveFormat))              {                  // half-second buffer                  var buffer = new byte[writer.WaveFormat.AverageBytesPerSecond / 2];                  // read three and a half seconds (half a second is to ensure Resampler has some leftovers to drain)                  for (int n = 0; n < 7; n++)                  {                      var read = source.Read(buffer' 0' buffer.Length);                      writer.Write(buffer' 0' read);                  }                  Array.Clear(buffer' 0' buffer.Length);                  // two seconds of absolute silence                  for (int n = 0; n < 4; n++)                  {                      writer.Write(buffer' 0' buffer.Length);                  }                  // do the reposition                  reposition();                  // now read some more out                  for (int n = 0; n < 6; n++)                  {                      var read = source.Read(buffer' 0' buffer.Length);                      writer.Write(buffer' 0' read);                  }              }
Magic Number,NAudioWpfDemo.MediaFoundationResample,MediaFoundationResampleViewModel,C:\repos\naudio_NAudio\NAudioWpfDemo\MediaFoundationResample\MediaFoundationResampleViewModel.cs,CreateRepositionTestFile,The following statement contains a magic number: using (var writer = new WaveFileWriter(saveFile' source.WaveFormat))              {                  // half-second buffer                  var buffer = new byte[writer.WaveFormat.AverageBytesPerSecond / 2];                  // read three and a half seconds (half a second is to ensure Resampler has some leftovers to drain)                  for (int n = 0; n < 7; n++)                  {                      var read = source.Read(buffer' 0' buffer.Length);                      writer.Write(buffer' 0' read);                  }                  Array.Clear(buffer' 0' buffer.Length);                  // two seconds of absolute silence                  for (int n = 0; n < 4; n++)                  {                      writer.Write(buffer' 0' buffer.Length);                  }                  // do the reposition                  reposition();                  // now read some more out                  for (int n = 0; n < 6; n++)                  {                      var read = source.Read(buffer' 0' buffer.Length);                      writer.Write(buffer' 0' read);                  }              }
Magic Number,NAudioWpfDemo.MediaFoundationResample,MediaFoundationResampleViewModel,C:\repos\naudio_NAudio\NAudioWpfDemo\MediaFoundationResample\MediaFoundationResampleViewModel.cs,CreateOutputFormat,The following statement contains a magic number: bool isIeeeFloat = inputFormat.Encoding == WaveFormatEncoding.IeeeFloat && SelectedBitDepthIndex == 0 ||                                SelectedBitDepthIndex == 4;
Magic Number,NAudioWpfDemo.MediaFoundationResample,MediaFoundationResampleViewModel,C:\repos\naudio_NAudio\NAudioWpfDemo\MediaFoundationResample\MediaFoundationResampleViewModel.cs,CreateOutputFormat,The following statement contains a magic number: if (isIeeeFloat)              {                  waveFormat = WaveFormat.CreateIeeeFloatWaveFormat(SampleRate' channels);              }              else              {                  int bitDepth = inputFormat.BitsPerSample;                  switch (SelectedBitDepthIndex)                  {                      case 1:                           bitDepth = 8;                          break;                      case 2:                          bitDepth = 16;                          break;                      case 3:                          bitDepth = 24;                          break;                  }                  waveFormat = new WaveFormat(SampleRate' bitDepth' channels);              }
Magic Number,NAudioWpfDemo.MediaFoundationResample,MediaFoundationResampleViewModel,C:\repos\naudio_NAudio\NAudioWpfDemo\MediaFoundationResample\MediaFoundationResampleViewModel.cs,CreateOutputFormat,The following statement contains a magic number: if (isIeeeFloat)              {                  waveFormat = WaveFormat.CreateIeeeFloatWaveFormat(SampleRate' channels);              }              else              {                  int bitDepth = inputFormat.BitsPerSample;                  switch (SelectedBitDepthIndex)                  {                      case 1:                           bitDepth = 8;                          break;                      case 2:                          bitDepth = 16;                          break;                      case 3:                          bitDepth = 24;                          break;                  }                  waveFormat = new WaveFormat(SampleRate' bitDepth' channels);              }
Magic Number,NAudioWpfDemo.MediaFoundationResample,MediaFoundationResampleViewModel,C:\repos\naudio_NAudio\NAudioWpfDemo\MediaFoundationResample\MediaFoundationResampleViewModel.cs,CreateOutputFormat,The following statement contains a magic number: if (isIeeeFloat)              {                  waveFormat = WaveFormat.CreateIeeeFloatWaveFormat(SampleRate' channels);              }              else              {                  int bitDepth = inputFormat.BitsPerSample;                  switch (SelectedBitDepthIndex)                  {                      case 1:                           bitDepth = 8;                          break;                      case 2:                          bitDepth = 16;                          break;                      case 3:                          bitDepth = 24;                          break;                  }                  waveFormat = new WaveFormat(SampleRate' bitDepth' channels);              }
Magic Number,NAudioWpfDemo.MediaFoundationResample,MediaFoundationResampleViewModel,C:\repos\naudio_NAudio\NAudioWpfDemo\MediaFoundationResample\MediaFoundationResampleViewModel.cs,CreateOutputFormat,The following statement contains a magic number: if (isIeeeFloat)              {                  waveFormat = WaveFormat.CreateIeeeFloatWaveFormat(SampleRate' channels);              }              else              {                  int bitDepth = inputFormat.BitsPerSample;                  switch (SelectedBitDepthIndex)                  {                      case 1:                           bitDepth = 8;                          break;                      case 2:                          bitDepth = 16;                          break;                      case 3:                          bitDepth = 24;                          break;                  }                  waveFormat = new WaveFormat(SampleRate' bitDepth' channels);              }
Magic Number,NAudioWpfDemo.MediaFoundationResample,MediaFoundationResampleViewModel,C:\repos\naudio_NAudio\NAudioWpfDemo\MediaFoundationResample\MediaFoundationResampleViewModel.cs,CreateOutputFormat,The following statement contains a magic number: if (isIeeeFloat)              {                  waveFormat = WaveFormat.CreateIeeeFloatWaveFormat(SampleRate' channels);              }              else              {                  int bitDepth = inputFormat.BitsPerSample;                  switch (SelectedBitDepthIndex)                  {                      case 1:                           bitDepth = 8;                          break;                      case 2:                          bitDepth = 16;                          break;                      case 3:                          bitDepth = 24;                          break;                  }                  waveFormat = new WaveFormat(SampleRate' bitDepth' channels);              }
Missing Default,NAudioWpfDemo,MainWindow,C:\repos\naudio_NAudio\NAudioWpfDemo\MainWindow.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:              this.contentPresenter = ((System.Windows.Controls.ContentPresenter)(target));              return;              }
Missing Default,NAudioWpfDemo,PolygonWaveFormControl,C:\repos\naudio_NAudio\NAudioWpfDemo\PolygonWaveFormControl.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:              this.mainCanvas = ((System.Windows.Controls.Canvas)(target));              return;              }
Missing Default,NAudioWpfDemo,PolylineWaveFormControl,C:\repos\naudio_NAudio\NAudioWpfDemo\PolylineWaveFormControl.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:              this.mainCanvas = ((System.Windows.Controls.Canvas)(target));              return;              }
Missing Default,NAudioWpfDemo,SpectrumAnalyser,C:\repos\naudio_NAudio\NAudioWpfDemo\SpectrumAnalyser.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:              this.polyline1 = ((System.Windows.Shapes.Polyline)(target));              return;              }
Missing Default,NAudioWpfDemo,WaveFormControl,C:\repos\naudio_NAudio\NAudioWpfDemo\WaveFormControl.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:              this.mainCanvas = ((System.Windows.Controls.Canvas)(target));              return;              }
Missing Default,NAudioWpfDemo.DrumMachineDemo,DrumMachineDemoView,C:\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\DrumMachineDemoView.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:              this.drumPatternEditor1 = ((NAudioWpfDemo.DrumMachineDemo.DrumPatternEditor)(target));              return;              }
Missing Default,NAudioWpfDemo.DrumMachineDemo,DrumPatternEditor,C:\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\DrumPatternEditor.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:              this.drumGridCanvas = ((System.Windows.Controls.Canvas)(target));              return;              }
Missing Default,NAudioWpfDemo.MediaFoundationPlayback,MediaFoundationPlaybackView,C:\repos\naudio_NAudio\NAudioWpfDemo\MediaFoundationPlayback\MediaFoundationPlaybackView.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:              this.waveFormCanvas = ((System.Windows.Controls.Canvas)(target));              return;              }
Missing Default,NAudioWpfDemo.MediaFoundationResample,MediaFoundationResampleViewModel,C:\repos\naudio_NAudio\NAudioWpfDemo\MediaFoundationResample\MediaFoundationResampleViewModel.cs,CreateOutputFormat,The following switch statement is missing a default case: switch (SelectedBitDepthIndex)                  {                      case 1:                           bitDepth = 8;                          break;                      case 2:                          bitDepth = 16;                          break;                      case 3:                          bitDepth = 24;                          break;                  }
