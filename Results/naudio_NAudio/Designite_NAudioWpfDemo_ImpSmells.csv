Implementation smell,Namespace,Class,File,Method,Description
Complex Method,NAudioWpfDemo.DrumMachineDemo,PatternSequencer,C:\research\architectureSmells\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\PatternSequencer.cs,GetNextMixerInputs,Cyclomatic complexity of the method is 8
Long Statement,NAudioWpfDemo.EnumMediaFoundationTransforms,EnumMftViewModel,C:\research\architectureSmells\repos\naudio_NAudio\NAudioWpfDemo\EnumMediaFoundationTransforms\EnumMftViewModel.cs,Enumerate,The length of the statement  "            AddTransforms(MediaFoundationApi.EnumerateTransforms(MediaFoundationTransformCategories.AudioDecoder)' "Audio Decoder"); " is 120.
Long Statement,NAudioWpfDemo.EnumMediaFoundationTransforms,EnumMftViewModel,C:\research\architectureSmells\repos\naudio_NAudio\NAudioWpfDemo\EnumMediaFoundationTransforms\EnumMftViewModel.cs,Enumerate,The length of the statement  "            AddTransforms(MediaFoundationApi.EnumerateTransforms(MediaFoundationTransformCategories.AudioEncoder)' "Audio Encoder"); " is 120.
Long Statement,NAudioWpfDemo.EqualizationDemo,Equalizer,C:\research\architectureSmells\repos\naudio_NAudio\NAudioWpfDemo\EqualizationDemo\Equalizer.cs,CreateFilters,The length of the statement  "                        filters[n' bandIndex] = BiQuadFilter.PeakingEQ(sourceProvider.WaveFormat.SampleRate' band.Frequency' band.Bandwidth' band.Gain); " is 128.
Long Statement,NAudioWpfDemo.MediaFoundationEncode,MediaTypeViewModel,C:\research\architectureSmells\repos\naudio_NAudio\NAudioWpfDemo\MediaFoundationEncode\MediaTypeViewModel.cs,ShortDescription,The length of the statement  "            shortDescription.AppendFormat("{0}' "' channels == 1 ? "mono" : channels == 2 ? "stereo" : channels.ToString() + " channels"); " is 126.
Magic Number,NAudioWpfDemo,MainWindow,C:\research\architectureSmells\repos\naudio_NAudio\NAudioWpfDemo\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: this.Title = this.Title + ((System.Runtime.InteropServices.Marshal.SizeOf(IntPtr.Zero) == 8) ? " (x64)" : " (x86)");
Magic Number,NAudioWpfDemo,PolygonWaveFormControl,C:\research\architectureSmells\repos\naudio_NAudio\NAudioWpfDemo\PolygonWaveFormControl.xaml.cs,OnSizeChanged,The following statement contains a magic number: yTranslate = ActualHeight / 2;
Magic Number,NAudioWpfDemo,PolygonWaveFormControl,C:\research\architectureSmells\repos\naudio_NAudio\NAudioWpfDemo\PolygonWaveFormControl.xaml.cs,OnSizeChanged,The following statement contains a magic number: yScale = ActualHeight / 2;
Magic Number,NAudioWpfDemo,PolylineWaveFormControl,C:\research\architectureSmells\repos\naudio_NAudio\NAudioWpfDemo\PolylineWaveFormControl.xaml.cs,OnSizeChanged,The following statement contains a magic number: yTranslate = ActualHeight / 2;
Magic Number,NAudioWpfDemo,PolylineWaveFormControl,C:\research\architectureSmells\repos\naudio_NAudio\NAudioWpfDemo\PolylineWaveFormControl.xaml.cs,OnSizeChanged,The following statement contains a magic number: yScale = ActualHeight / 2;
Magic Number,NAudioWpfDemo,SpectrumAnalyser,C:\research\architectureSmells\repos\naudio_NAudio\NAudioWpfDemo\SpectrumAnalyser.xaml.cs,Update,The following statement contains a magic number: updateCount++ % 2 == 0
Magic Number,NAudioWpfDemo,SpectrumAnalyser,C:\research\architectureSmells\repos\naudio_NAudio\NAudioWpfDemo\SpectrumAnalyser.xaml.cs,Update,The following statement contains a magic number: bins = fftResults.Length / 2;
Magic Number,NAudioWpfDemo,SpectrumAnalyser,C:\research\architectureSmells\repos\naudio_NAudio\NAudioWpfDemo\SpectrumAnalyser.xaml.cs,Update,The following statement contains a magic number: fftResults.Length / 2 != bins
Magic Number,NAudioWpfDemo,SpectrumAnalyser,C:\research\architectureSmells\repos\naudio_NAudio\NAudioWpfDemo\SpectrumAnalyser.xaml.cs,Update,The following statement contains a magic number: n < fftResults.Length / 2
Magic Number,NAudioWpfDemo,SpectrumAnalyser,C:\research\architectureSmells\repos\naudio_NAudio\NAudioWpfDemo\SpectrumAnalyser.xaml.cs,GetYPosLog,The following statement contains a magic number: double intensityDB = 10 * Math.Log10(Math.Sqrt(c.X * c.X + c.Y * c.Y));
Magic Number,NAudioWpfDemo,SpectrumAnalyser,C:\research\architectureSmells\repos\naudio_NAudio\NAudioWpfDemo\SpectrumAnalyser.xaml.cs,GetYPosLog,The following statement contains a magic number: double minDB = -90;
Magic Number,NAudioWpfDemo,WaveFormControl,C:\research\architectureSmells\repos\naudio_NAudio\NAudioWpfDemo\WaveFormControl.xaml.cs,WaveFormControl_SizeChanged,The following statement contains a magic number: yTranslate = ActualHeight / 2;
Magic Number,NAudioWpfDemo,WaveFormControl,C:\research\architectureSmells\repos\naudio_NAudio\NAudioWpfDemo\WaveFormControl.xaml.cs,WaveFormControl_SizeChanged,The following statement contains a magic number: yScale = ActualHeight / 2;
Magic Number,NAudioWpfDemo.AudioPlaybackDemo,AudioPlayback,C:\research\architectureSmells\repos\naudio_NAudio\NAudioWpfDemo\AudioPlaybackDemo\AudioPlayback.cs,OpenFile,The following statement contains a magic number: aggregator.NotificationCount = inputStream.WaveFormat.SampleRate / 100;
Magic Number,NAudioWpfDemo.AudioPlaybackDemo,AudioPlayback,C:\research\architectureSmells\repos\naudio_NAudio\NAudioWpfDemo\AudioPlaybackDemo\AudioPlayback.cs,CreateDevice,The following statement contains a magic number: playbackDevice = new WaveOut {DesiredLatency = 200};
Magic Number,NAudioWpfDemo.AudioPlaybackDemo,SampleAggregator,C:\research\architectureSmells\repos\naudio_NAudio\NAudioWpfDemo\AudioPlaybackDemo\SampleAggregator.cs,SampleAggregator,The following statement contains a magic number: m = (int)Math.Log(fftLength' 2.0);
Magic Number,NAudioWpfDemo.DrumMachineDemo,DrumMachineDemoViewModel,C:\research\architectureSmells\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\DrumMachineDemoViewModel.cs,DrumMachineDemoViewModel,The following statement contains a magic number: tempo = 100;
Magic Number,NAudioWpfDemo.DrumMachineDemo,DrumPatternEditor,C:\research\architectureSmells\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\DrumPatternEditor.xaml.cs,DrumPatternEditor,The following statement contains a magic number: this.pattern = new DrumPattern(notes' 16);
Magic Number,NAudioWpfDemo.DrumMachineDemo,DrumPatternEditor,C:\research\architectureSmells\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\DrumPatternEditor.xaml.cs,DrumPatternEditor,The following statement contains a magic number: this.pattern[0' 0] = this.pattern[0' 8] = 127;
Magic Number,NAudioWpfDemo.DrumMachineDemo,DrumPatternEditor,C:\research\architectureSmells\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\DrumPatternEditor.xaml.cs,DrumPatternEditor,The following statement contains a magic number: this.pattern[0' 0] = this.pattern[0' 8] = 127;
Magic Number,NAudioWpfDemo.DrumMachineDemo,DrumPatternEditor,C:\research\architectureSmells\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\DrumPatternEditor.xaml.cs,DrumPatternEditor,The following statement contains a magic number: this.pattern[1' 4] = this.pattern[1' 12] = 127;
Magic Number,NAudioWpfDemo.DrumMachineDemo,DrumPatternEditor,C:\research\architectureSmells\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\DrumPatternEditor.xaml.cs,DrumPatternEditor,The following statement contains a magic number: this.pattern[1' 4] = this.pattern[1' 12] = 127;
Magic Number,NAudioWpfDemo.DrumMachineDemo,DrumPatternEditor,C:\research\architectureSmells\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\DrumPatternEditor.xaml.cs,DrumPatternEditor,The following statement contains a magic number: this.pattern[1' 4] = this.pattern[1' 12] = 127;
Magic Number,NAudioWpfDemo.DrumMachineDemo,DrumPatternEditor,C:\research\architectureSmells\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\DrumPatternEditor.xaml.cs,DrumPatternEditor,The following statement contains a magic number: this.pattern[2' n] = 127;
Magic Number,NAudioWpfDemo.DrumMachineDemo,DrumPatternEditor,C:\research\architectureSmells\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\DrumPatternEditor.xaml.cs,DrumPatternEditor,The following statement contains a magic number: this.pattern[2' n] = 127;
Magic Number,NAudioWpfDemo.DrumMachineDemo,DrumPatternEditor,C:\research\architectureSmells\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\DrumPatternEditor.xaml.cs,DrawNoteNames,The following statement contains a magic number: tb.FontSize = 12;
Magic Number,NAudioWpfDemo.DrumMachineDemo,DrumPatternEditor,C:\research\architectureSmells\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\DrumPatternEditor.xaml.cs,DrawGridLines,The following statement contains a magic number: l.Stroke = step % 4 == 0 ? Brushes.Gray : Brushes.LightGray;
Magic Number,NAudioWpfDemo.DrumMachineDemo,DrumPatternEditor,C:\research\architectureSmells\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\DrumPatternEditor.xaml.cs,r_MouseLeftButtonUp,The following statement contains a magic number: pattern[p.Note' p.Step] = pattern[p.Note' p.Step] == 0 ? (byte)127 : (byte)0;
Magic Number,NAudioWpfDemo.DrumMachineDemo,PatternSequencer,C:\research\architectureSmells\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\PatternSequencer.cs,PatternSequencer,The following statement contains a magic number: Tempo = 120;
Magic Number,NAudioWpfDemo.DrumMachineDemo,PatternSequencer,C:\research\architectureSmells\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\PatternSequencer.cs,GetNextMixerInputs,The following statement contains a magic number: int samplesPerBeat = (drumKit.WaveFormat.Channels * drumKit.WaveFormat.SampleRate * 60) / tempo;
Magic Number,NAudioWpfDemo.DrumMachineDemo,PatternSequencer,C:\research\architectureSmells\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\PatternSequencer.cs,GetNextMixerInputs,The following statement contains a magic number: samplesPerStep = samplesPerBeat / 4;
Magic Number,NAudioWpfDemo.DrumMachineDemo,PatternSequencerTests,C:\research\architectureSmells\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\PatternSequencerTests.cs,Pattern_Sequencer_Should_Return_No_Mixer_Inputs_For_An_Empty_Pattern,The following statement contains a magic number: var pattern = new DrumPattern(new[] { "Bass Drum" }' 16);
Magic Number,NAudioWpfDemo.DrumMachineDemo,PatternSequencerTests,C:\research\architectureSmells\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\PatternSequencerTests.cs,Pattern_Sequencer_Should_Return_No_Mixer_Inputs_For_An_Empty_Pattern,The following statement contains a magic number: var mixerInputs = sequencer.GetNextMixerInputs(100);
Magic Number,NAudioWpfDemo.DrumMachineDemo,PatternSequencerTests,C:\research\architectureSmells\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\PatternSequencerTests.cs,Pattern_Sequencer_Should_Return_A_Non_Delayed_Mixer_Input_For_A_Beat_At_Position_Zero,The following statement contains a magic number: var pattern = new DrumPattern(new[] { "Bass Drum" }' 16);
Magic Number,NAudioWpfDemo.DrumMachineDemo,PatternSequencerTests,C:\research\architectureSmells\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\PatternSequencerTests.cs,Pattern_Sequencer_Should_Return_A_Non_Delayed_Mixer_Input_For_A_Beat_At_Position_Zero,The following statement contains a magic number: pattern[0' 0] = 127;
Magic Number,NAudioWpfDemo.DrumMachineDemo,PatternSequencerTests,C:\research\architectureSmells\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\PatternSequencerTests.cs,Pattern_Sequencer_Should_Return_A_Non_Delayed_Mixer_Input_For_A_Beat_At_Position_Zero,The following statement contains a magic number: var mixerInputs = sequencer.GetNextMixerInputs(100);
Magic Number,NAudioWpfDemo.DrumMachineDemo,PatternSequencerTests,C:\research\architectureSmells\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\PatternSequencerTests.cs,Pattern_Sequencer_Should_Set_DelayBy_On_Mixer_Inputs_That_Are_Not_At_The_Start,The following statement contains a magic number: var pattern = new DrumPattern(new[] { "Bass Drum" }' 16);
Magic Number,NAudioWpfDemo.DrumMachineDemo,PatternSequencerTests,C:\research\architectureSmells\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\PatternSequencerTests.cs,Pattern_Sequencer_Should_Set_DelayBy_On_Mixer_Inputs_That_Are_Not_At_The_Start,The following statement contains a magic number: pattern[0' 1] = 127;
Magic Number,NAudioWpfDemo.DrumMachineDemo,PatternSequencerTests,C:\research\architectureSmells\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\PatternSequencerTests.cs,Pattern_Sequencer_Should_Set_DelayBy_On_Mixer_Inputs_That_Are_Not_At_The_Start,The following statement contains a magic number: var sequencer = new PatternSequencer(pattern' new TestKit(CalculateSampleRateForTempo(120)));
Magic Number,NAudioWpfDemo.DrumMachineDemo,PatternSequencerTests,C:\research\architectureSmells\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\PatternSequencerTests.cs,Pattern_Sequencer_Should_Set_DelayBy_On_Mixer_Inputs_That_Are_Not_At_The_Start,The following statement contains a magic number: var mixerInputs = sequencer.GetNextMixerInputs(2);
Magic Number,NAudioWpfDemo.DrumMachineDemo,PatternSequencerTests,C:\research\architectureSmells\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\PatternSequencerTests.cs,CalculateSampleRateForTempo,The following statement contains a magic number: int stepsPerBeat = 4;
Magic Number,NAudioWpfDemo.DrumMachineDemo,PatternSequencerTests,C:\research\architectureSmells\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\PatternSequencerTests.cs,CalculateSampleRateForTempo,The following statement contains a magic number: int stepsPerSecond = stepsPerMinute / 60;
Magic Number,NAudioWpfDemo.DrumMachineDemo,PatternSequencerTests,C:\research\architectureSmells\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\PatternSequencerTests.cs,Pattern_Sequencer_Should_Not_Return_Mixer_Inputs_For_Steps_That_Are_Outside_The_Requested_Range,The following statement contains a magic number: var pattern = new DrumPattern(new[] { "Bass Drum" }' 16);
Magic Number,NAudioWpfDemo.DrumMachineDemo,PatternSequencerTests,C:\research\architectureSmells\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\PatternSequencerTests.cs,Pattern_Sequencer_Should_Not_Return_Mixer_Inputs_For_Steps_That_Are_Outside_The_Requested_Range,The following statement contains a magic number: pattern[0' 2] = 127;
Magic Number,NAudioWpfDemo.DrumMachineDemo,PatternSequencerTests,C:\research\architectureSmells\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\PatternSequencerTests.cs,Pattern_Sequencer_Should_Not_Return_Mixer_Inputs_For_Steps_That_Are_Outside_The_Requested_Range,The following statement contains a magic number: pattern[0' 2] = 127;
Magic Number,NAudioWpfDemo.DrumMachineDemo,PatternSequencerTests,C:\research\architectureSmells\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\PatternSequencerTests.cs,Pattern_Sequencer_Should_Not_Return_Mixer_Inputs_For_Steps_That_Are_Outside_The_Requested_Range,The following statement contains a magic number: var sequencer = new PatternSequencer(pattern' new TestKit(CalculateSampleRateForTempo(120)));
Magic Number,NAudioWpfDemo.DrumMachineDemo,PatternSequencerTests,C:\research\architectureSmells\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\PatternSequencerTests.cs,Pattern_Sequencer_Should_Not_Return_Mixer_Inputs_For_Steps_That_Are_Outside_The_Requested_Range,The following statement contains a magic number: var mixerInputs = sequencer.GetNextMixerInputs(2);
Magic Number,NAudioWpfDemo.DrumMachineDemo,PatternSequencerTests,C:\research\architectureSmells\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\PatternSequencerTests.cs,Pattern_Sequencer_Should_Loop_Around_After_Reaching_The_End_Of_The_Pattern,The following statement contains a magic number: var pattern = new DrumPattern(new[] { "Bass Drum" }' 16);
Magic Number,NAudioWpfDemo.DrumMachineDemo,PatternSequencerTests,C:\research\architectureSmells\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\PatternSequencerTests.cs,Pattern_Sequencer_Should_Loop_Around_After_Reaching_The_End_Of_The_Pattern,The following statement contains a magic number: pattern[0' 2] = 127;
Magic Number,NAudioWpfDemo.DrumMachineDemo,PatternSequencerTests,C:\research\architectureSmells\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\PatternSequencerTests.cs,Pattern_Sequencer_Should_Loop_Around_After_Reaching_The_End_Of_The_Pattern,The following statement contains a magic number: pattern[0' 2] = 127;
Magic Number,NAudioWpfDemo.DrumMachineDemo,PatternSequencerTests,C:\research\architectureSmells\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\PatternSequencerTests.cs,Pattern_Sequencer_Should_Loop_Around_After_Reaching_The_End_Of_The_Pattern,The following statement contains a magic number: var sequencer = new PatternSequencer(pattern' new TestKit(CalculateSampleRateForTempo(120)));
Magic Number,NAudioWpfDemo.DrumMachineDemo,PatternSequencerTests,C:\research\architectureSmells\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\PatternSequencerTests.cs,Pattern_Sequencer_Should_Loop_Around_After_Reaching_The_End_Of_The_Pattern,The following statement contains a magic number: var mixerInputs = sequencer.GetNextMixerInputs(32);
Magic Number,NAudioWpfDemo.DrumMachineDemo,PatternSequencerTests,C:\research\architectureSmells\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\PatternSequencerTests.cs,Pattern_Sequencer_Should_Loop_Around_After_Reaching_The_End_Of_The_Pattern,The following statement contains a magic number: Assert.AreEqual(2' mixerInputs.Count());
Magic Number,NAudioWpfDemo.DrumMachineDemo,PatternSequencerTests,C:\research\architectureSmells\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\PatternSequencerTests.cs,Pattern_Sequencer_Should_Carry_On_From_Where_It_Left_Off_On_Second_Call,The following statement contains a magic number: var pattern = new DrumPattern(new[] { "Bass Drum" }' 16);
Magic Number,NAudioWpfDemo.DrumMachineDemo,PatternSequencerTests,C:\research\architectureSmells\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\PatternSequencerTests.cs,Pattern_Sequencer_Should_Carry_On_From_Where_It_Left_Off_On_Second_Call,The following statement contains a magic number: pattern[0' 1] = 127;
Magic Number,NAudioWpfDemo.DrumMachineDemo,PatternSequencerTests,C:\research\architectureSmells\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\PatternSequencerTests.cs,Pattern_Sequencer_Should_Carry_On_From_Where_It_Left_Off_On_Second_Call,The following statement contains a magic number: var sequencer = new PatternSequencer(pattern' new TestKit(CalculateSampleRateForTempo(120)));
Magic Number,NAudioWpfDemo.DrumMachineDemo,PatternSequencerTests,C:\research\architectureSmells\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\PatternSequencerTests.cs,DelayBy_Values_Are_Relative_To_Current_Position_On_Subsequent_Calls,The following statement contains a magic number: var pattern = new DrumPattern(new[] { "Bass Drum" }' 16);
Magic Number,NAudioWpfDemo.DrumMachineDemo,PatternSequencerTests,C:\research\architectureSmells\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\PatternSequencerTests.cs,DelayBy_Values_Are_Relative_To_Current_Position_On_Subsequent_Calls,The following statement contains a magic number: pattern[0' 6] = 127;
Magic Number,NAudioWpfDemo.DrumMachineDemo,PatternSequencerTests,C:\research\architectureSmells\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\PatternSequencerTests.cs,DelayBy_Values_Are_Relative_To_Current_Position_On_Subsequent_Calls,The following statement contains a magic number: pattern[0' 6] = 127;
Magic Number,NAudioWpfDemo.DrumMachineDemo,PatternSequencerTests,C:\research\architectureSmells\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\PatternSequencerTests.cs,DelayBy_Values_Are_Relative_To_Current_Position_On_Subsequent_Calls,The following statement contains a magic number: var sequencer = new PatternSequencer(pattern' new TestKit(CalculateSampleRateForTempo(120)));
Magic Number,NAudioWpfDemo.DrumMachineDemo,PatternSequencerTests,C:\research\architectureSmells\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\PatternSequencerTests.cs,DelayBy_Values_Are_Relative_To_Current_Position_On_Subsequent_Calls,The following statement contains a magic number: var mixerInputs = sequencer.GetNextMixerInputs(3);
Magic Number,NAudioWpfDemo.DrumMachineDemo,PatternSequencerTests,C:\research\architectureSmells\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\PatternSequencerTests.cs,DelayBy_Values_Are_Relative_To_Current_Position_On_Subsequent_Calls,The following statement contains a magic number: mixerInputs = sequencer.GetNextMixerInputs(4);
Magic Number,NAudioWpfDemo.DrumMachineDemo,PatternSequencerTests,C:\research\architectureSmells\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\PatternSequencerTests.cs,DelayBy_Values_Are_Relative_To_Current_Position_On_Subsequent_Calls,The following statement contains a magic number: Assert.AreEqual(3' mixerInputs.First().DelayBy' "DelayBy");
Magic Number,NAudioWpfDemo.DrumMachineDemo,PatternSequencerTests,C:\research\architectureSmells\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\PatternSequencerTests.cs,Multiple_DelayBy_Values_Are_All_Relative_To_Current_Position_Before_Calling_GetNextMixerInputs,The following statement contains a magic number: var pattern = new DrumPattern(new[] { "Bass Drum" }' 16);
Magic Number,NAudioWpfDemo.DrumMachineDemo,PatternSequencerTests,C:\research\architectureSmells\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\PatternSequencerTests.cs,Multiple_DelayBy_Values_Are_All_Relative_To_Current_Position_Before_Calling_GetNextMixerInputs,The following statement contains a magic number: pattern[0' 6] = 127;
Magic Number,NAudioWpfDemo.DrumMachineDemo,PatternSequencerTests,C:\research\architectureSmells\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\PatternSequencerTests.cs,Multiple_DelayBy_Values_Are_All_Relative_To_Current_Position_Before_Calling_GetNextMixerInputs,The following statement contains a magic number: pattern[0' 6] = 127;
Magic Number,NAudioWpfDemo.DrumMachineDemo,PatternSequencerTests,C:\research\architectureSmells\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\PatternSequencerTests.cs,Multiple_DelayBy_Values_Are_All_Relative_To_Current_Position_Before_Calling_GetNextMixerInputs,The following statement contains a magic number: pattern[0' 7] = 127;
Magic Number,NAudioWpfDemo.DrumMachineDemo,PatternSequencerTests,C:\research\architectureSmells\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\PatternSequencerTests.cs,Multiple_DelayBy_Values_Are_All_Relative_To_Current_Position_Before_Calling_GetNextMixerInputs,The following statement contains a magic number: pattern[0' 7] = 127;
Magic Number,NAudioWpfDemo.DrumMachineDemo,PatternSequencerTests,C:\research\architectureSmells\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\PatternSequencerTests.cs,Multiple_DelayBy_Values_Are_All_Relative_To_Current_Position_Before_Calling_GetNextMixerInputs,The following statement contains a magic number: pattern[0' 8] = 127;
Magic Number,NAudioWpfDemo.DrumMachineDemo,PatternSequencerTests,C:\research\architectureSmells\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\PatternSequencerTests.cs,Multiple_DelayBy_Values_Are_All_Relative_To_Current_Position_Before_Calling_GetNextMixerInputs,The following statement contains a magic number: pattern[0' 8] = 127;
Magic Number,NAudioWpfDemo.DrumMachineDemo,PatternSequencerTests,C:\research\architectureSmells\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\PatternSequencerTests.cs,Multiple_DelayBy_Values_Are_All_Relative_To_Current_Position_Before_Calling_GetNextMixerInputs,The following statement contains a magic number: var sequencer = new PatternSequencer(pattern' new TestKit(CalculateSampleRateForTempo(120)));
Magic Number,NAudioWpfDemo.DrumMachineDemo,PatternSequencerTests,C:\research\architectureSmells\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\PatternSequencerTests.cs,Multiple_DelayBy_Values_Are_All_Relative_To_Current_Position_Before_Calling_GetNextMixerInputs,The following statement contains a magic number: var mixerInputs = sequencer.GetNextMixerInputs(3);
Magic Number,NAudioWpfDemo.DrumMachineDemo,PatternSequencerTests,C:\research\architectureSmells\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\PatternSequencerTests.cs,Multiple_DelayBy_Values_Are_All_Relative_To_Current_Position_Before_Calling_GetNextMixerInputs,The following statement contains a magic number: mixerInputs = sequencer.GetNextMixerInputs(10);
Magic Number,NAudioWpfDemo.DrumMachineDemo,PatternSequencerTests,C:\research\architectureSmells\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\PatternSequencerTests.cs,Multiple_DelayBy_Values_Are_All_Relative_To_Current_Position_Before_Calling_GetNextMixerInputs,The following statement contains a magic number: Assert.AreEqual(3' mixerInputs.Count' "Second Read");
Magic Number,NAudioWpfDemo.DrumMachineDemo,PatternSequencerTests,C:\research\architectureSmells\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\PatternSequencerTests.cs,Multiple_DelayBy_Values_Are_All_Relative_To_Current_Position_Before_Calling_GetNextMixerInputs,The following statement contains a magic number: Assert.AreEqual(3' mixerInputs[0].DelayBy' "Inputs[0].DelayBy");
Magic Number,NAudioWpfDemo.DrumMachineDemo,PatternSequencerTests,C:\research\architectureSmells\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\PatternSequencerTests.cs,Multiple_DelayBy_Values_Are_All_Relative_To_Current_Position_Before_Calling_GetNextMixerInputs,The following statement contains a magic number: Assert.AreEqual(4' mixerInputs[1].DelayBy' "Inputs[1].DelayBy");
Magic Number,NAudioWpfDemo.DrumMachineDemo,PatternSequencerTests,C:\research\architectureSmells\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\PatternSequencerTests.cs,Multiple_DelayBy_Values_Are_All_Relative_To_Current_Position_Before_Calling_GetNextMixerInputs,The following statement contains a magic number: Assert.AreEqual(5' mixerInputs[2].DelayBy' "Inputs[2].DelayBy");
Magic Number,NAudioWpfDemo.DrumMachineDemo,PatternSequencerTests,C:\research\architectureSmells\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\PatternSequencerTests.cs,Multiple_DelayBy_Values_Are_All_Relative_To_Current_Position_Before_Calling_GetNextMixerInputs,The following statement contains a magic number: Assert.AreEqual(5' mixerInputs[2].DelayBy' "Inputs[2].DelayBy");
Magic Number,NAudioWpfDemo.DrumMachineDemo,PatternSequencerTests,C:\research\architectureSmells\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\PatternSequencerTests.cs,DelayBy_Values_Should_Be_Correct_On_Wraparound,The following statement contains a magic number: var pattern = new DrumPattern(new[] { "Bass Drum" }' 16);
Magic Number,NAudioWpfDemo.DrumMachineDemo,PatternSequencerTests,C:\research\architectureSmells\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\PatternSequencerTests.cs,DelayBy_Values_Should_Be_Correct_On_Wraparound,The following statement contains a magic number: pattern[0' 0] = 127;
Magic Number,NAudioWpfDemo.DrumMachineDemo,PatternSequencerTests,C:\research\architectureSmells\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\PatternSequencerTests.cs,DelayBy_Values_Should_Be_Correct_On_Wraparound,The following statement contains a magic number: var sequencer = new PatternSequencer(pattern' new TestKit(CalculateSampleRateForTempo(120)));
Magic Number,NAudioWpfDemo.DrumMachineDemo,PatternSequencerTests,C:\research\architectureSmells\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\PatternSequencerTests.cs,DelayBy_Values_Should_Be_Correct_On_Wraparound,The following statement contains a magic number: var mixerInputs = sequencer.GetNextMixerInputs(12);
Magic Number,NAudioWpfDemo.DrumMachineDemo,PatternSequencerTests,C:\research\architectureSmells\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\PatternSequencerTests.cs,DelayBy_Values_Should_Be_Correct_On_Wraparound,The following statement contains a magic number: mixerInputs = sequencer.GetNextMixerInputs(12);
Magic Number,NAudioWpfDemo.DrumMachineDemo,PatternSequencerTests,C:\research\architectureSmells\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\PatternSequencerTests.cs,DelayBy_Values_Should_Be_Correct_On_Wraparound,The following statement contains a magic number: Assert.AreEqual(4' mixerInputs[0].DelayBy' "Inputs[0].DelayBy");
Magic Number,NAudioWpfDemo.DrumMachineDemo,PatternSequencerTests,C:\research\architectureSmells\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\PatternSequencerTests.cs,DelayBy_Values_Should_Be_Correct_On_Subsequent_Read_After_Wraparound,The following statement contains a magic number: var pattern = new DrumPattern(new[] { "Bass Drum" }' 16);
Magic Number,NAudioWpfDemo.DrumMachineDemo,PatternSequencerTests,C:\research\architectureSmells\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\PatternSequencerTests.cs,DelayBy_Values_Should_Be_Correct_On_Subsequent_Read_After_Wraparound,The following statement contains a magic number: pattern[0' 0] = 127;
Magic Number,NAudioWpfDemo.DrumMachineDemo,PatternSequencerTests,C:\research\architectureSmells\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\PatternSequencerTests.cs,DelayBy_Values_Should_Be_Correct_On_Subsequent_Read_After_Wraparound,The following statement contains a magic number: pattern[0' 10] = 127;
Magic Number,NAudioWpfDemo.DrumMachineDemo,PatternSequencerTests,C:\research\architectureSmells\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\PatternSequencerTests.cs,DelayBy_Values_Should_Be_Correct_On_Subsequent_Read_After_Wraparound,The following statement contains a magic number: pattern[0' 10] = 127;
Magic Number,NAudioWpfDemo.DrumMachineDemo,PatternSequencerTests,C:\research\architectureSmells\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\PatternSequencerTests.cs,DelayBy_Values_Should_Be_Correct_On_Subsequent_Read_After_Wraparound,The following statement contains a magic number: var sequencer = new PatternSequencer(pattern' new TestKit(CalculateSampleRateForTempo(120)));
Magic Number,NAudioWpfDemo.DrumMachineDemo,PatternSequencerTests,C:\research\architectureSmells\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\PatternSequencerTests.cs,DelayBy_Values_Should_Be_Correct_On_Subsequent_Read_After_Wraparound,The following statement contains a magic number: var mixerInputs = sequencer.GetNextMixerInputs(12);
Magic Number,NAudioWpfDemo.DrumMachineDemo,PatternSequencerTests,C:\research\architectureSmells\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\PatternSequencerTests.cs,DelayBy_Values_Should_Be_Correct_On_Subsequent_Read_After_Wraparound,The following statement contains a magic number: Assert.AreEqual(2' mixerInputs.Count' "First read");
Magic Number,NAudioWpfDemo.DrumMachineDemo,PatternSequencerTests,C:\research\architectureSmells\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\PatternSequencerTests.cs,DelayBy_Values_Should_Be_Correct_On_Subsequent_Read_After_Wraparound,The following statement contains a magic number: mixerInputs = sequencer.GetNextMixerInputs(12);
Magic Number,NAudioWpfDemo.DrumMachineDemo,PatternSequencerTests,C:\research\architectureSmells\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\PatternSequencerTests.cs,DelayBy_Values_Should_Be_Correct_On_Subsequent_Read_After_Wraparound,The following statement contains a magic number: Assert.AreEqual(4' mixerInputs[0].DelayBy' "Inputs[0].DelayBy");
Magic Number,NAudioWpfDemo.DrumMachineDemo,PatternSequencerTests,C:\research\architectureSmells\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\PatternSequencerTests.cs,DelayBy_Values_Should_Be_Correct_On_Subsequent_Read_After_Wraparound,The following statement contains a magic number: mixerInputs = sequencer.GetNextMixerInputs(12);
Magic Number,NAudioWpfDemo.DrumMachineDemo,PatternSequencerTests,C:\research\architectureSmells\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\PatternSequencerTests.cs,DelayBy_Values_Should_Be_Correct_On_Subsequent_Read_After_Wraparound,The following statement contains a magic number: Assert.AreEqual(2' mixerInputs[0].DelayBy' "3rd Read Inputs[0].DelayBy");
Magic Number,NAudioWpfDemo.DrumMachineDemo,PatternSequencerTests,C:\research\architectureSmells\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\PatternSequencerTests.cs,DelayBy_Values_Should_Be_Correct_On_Subsequent_Read_After_Wraparound,The following statement contains a magic number: Assert.AreEqual(8' mixerInputs[1].DelayBy' "3rd Read Inputs[1].DelayBy");
Magic Number,NAudioWpfDemo.DrumMachineDemo,PatternSequencerTests,C:\research\architectureSmells\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\PatternSequencerTests.cs,Tempo_Can_Be_Changed,The following statement contains a magic number: var pattern = new DrumPattern(new[] { "Bass Drum" }' 16);
Magic Number,NAudioWpfDemo.DrumMachineDemo,PatternSequencerTests,C:\research\architectureSmells\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\PatternSequencerTests.cs,Tempo_Can_Be_Changed,The following statement contains a magic number: pattern[0' n] = 127;
Magic Number,NAudioWpfDemo.DrumMachineDemo,PatternSequencerTests,C:\research\architectureSmells\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\PatternSequencerTests.cs,Tempo_Can_Be_Changed,The following statement contains a magic number: var sequencer = new PatternSequencer(pattern' new TestKit(CalculateSampleRateForTempo(120)));
Magic Number,NAudioWpfDemo.DrumMachineDemo,PatternSequencerTests,C:\research\architectureSmells\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\PatternSequencerTests.cs,Tempo_Can_Be_Changed,The following statement contains a magic number: sequencer.Tempo = 60;
Magic Number,NAudioWpfDemo.DrumMachineDemo,PatternSequencerTests,C:\research\architectureSmells\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\PatternSequencerTests.cs,Tempo_Can_Be_Changed,The following statement contains a magic number: var mixerInputs = sequencer.GetNextMixerInputs(16);
Magic Number,NAudioWpfDemo.DrumMachineDemo,PatternSequencerTests,C:\research\architectureSmells\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\PatternSequencerTests.cs,Tempo_Can_Be_Changed,The following statement contains a magic number: Assert.AreEqual(8' mixerInputs.Count' "First read");
Magic Number,NAudioWpfDemo.DrumMachineDemo,PatternSequencerTests,C:\research\architectureSmells\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\PatternSequencerTests.cs,When_Tempo_Is_Halved_DelayBy_Is_Doubled,The following statement contains a magic number: var pattern = new DrumPattern(new[] { "Bass Drum" }' 16);
Magic Number,NAudioWpfDemo.DrumMachineDemo,PatternSequencerTests,C:\research\architectureSmells\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\PatternSequencerTests.cs,When_Tempo_Is_Halved_DelayBy_Is_Doubled,The following statement contains a magic number: pattern[0' n] = 127;
Magic Number,NAudioWpfDemo.DrumMachineDemo,PatternSequencerTests,C:\research\architectureSmells\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\PatternSequencerTests.cs,When_Tempo_Is_Halved_DelayBy_Is_Doubled,The following statement contains a magic number: var sequencer = new PatternSequencer(pattern' new TestKit(CalculateSampleRateForTempo(120)));
Magic Number,NAudioWpfDemo.DrumMachineDemo,PatternSequencerTests,C:\research\architectureSmells\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\PatternSequencerTests.cs,When_Tempo_Is_Halved_DelayBy_Is_Doubled,The following statement contains a magic number: sequencer.Tempo = 60;
Magic Number,NAudioWpfDemo.DrumMachineDemo,PatternSequencerTests,C:\research\architectureSmells\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\PatternSequencerTests.cs,When_Tempo_Is_Halved_DelayBy_Is_Doubled,The following statement contains a magic number: var mixerInputs = sequencer.GetNextMixerInputs(16);
Magic Number,NAudioWpfDemo.DrumMachineDemo,PatternSequencerTests,C:\research\architectureSmells\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\PatternSequencerTests.cs,When_Tempo_Is_Halved_DelayBy_Is_Doubled,The following statement contains a magic number: Assert.AreEqual(2' mixerInputs[1].DelayBy' "First beat DelayBy");
Magic Number,NAudioWpfDemo.DrumMachineDemo,PatternSequencerTests,C:\research\architectureSmells\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\PatternSequencerTests.cs,Pattern_Sequencer_Should_Return_Mixer_Inputs_for_Beats_On_Any_Note,The following statement contains a magic number: var pattern = new DrumPattern(new[] { "Bass Drum"' "Snare Drum" }' 16);
Magic Number,NAudioWpfDemo.DrumMachineDemo,PatternSequencerTests,C:\research\architectureSmells\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\PatternSequencerTests.cs,Pattern_Sequencer_Should_Return_Mixer_Inputs_for_Beats_On_Any_Note,The following statement contains a magic number: pattern[1' 5] = 127;
Magic Number,NAudioWpfDemo.DrumMachineDemo,PatternSequencerTests,C:\research\architectureSmells\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\PatternSequencerTests.cs,Pattern_Sequencer_Should_Return_Mixer_Inputs_for_Beats_On_Any_Note,The following statement contains a magic number: pattern[1' 5] = 127;
Magic Number,NAudioWpfDemo.DrumMachineDemo,PatternSequencerTests,C:\research\architectureSmells\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\PatternSequencerTests.cs,Pattern_Sequencer_Should_Return_Mixer_Inputs_for_Beats_On_Any_Note,The following statement contains a magic number: var sequencer = new PatternSequencer(pattern' new TestKit(CalculateSampleRateForTempo(120)));
Magic Number,NAudioWpfDemo.DrumMachineDemo,PatternSequencerTests,C:\research\architectureSmells\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\PatternSequencerTests.cs,Pattern_Sequencer_Should_Return_Mixer_Inputs_for_Beats_On_Any_Note,The following statement contains a magic number: var mixerInputs = sequencer.GetNextMixerInputs(16);
Magic Number,NAudioWpfDemo.DrumMachineDemo,SampleSource,C:\research\architectureSmells\repos\naudio_NAudio\NAudioWpfDemo\DrumMachineDemo\SampleSource.cs,CreateFromWaveFile,The following statement contains a magic number: var sourceSamples = (int)(reader.Length / (reader.WaveFormat.BitsPerSample / 8));
Magic Number,NAudioWpfDemo.EqualizationDemo,EqualizationDemoViewModel,C:\research\architectureSmells\repos\naudio_NAudio\NAudioWpfDemo\EqualizationDemo\EqualizationDemoViewModel.cs,EqualizationDemoViewModel,The following statement contains a magic number: bands = new EqualizerBand[]                      {                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 100' Gain = 0}'                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 200' Gain = 0}'                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 400' Gain = 0}'                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 800' Gain = 0}'                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 1200' Gain = 0}'                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 2400' Gain = 0}'                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 4800' Gain = 0}'                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 9600' Gain = 0}'                      };
Magic Number,NAudioWpfDemo.EqualizationDemo,EqualizationDemoViewModel,C:\research\architectureSmells\repos\naudio_NAudio\NAudioWpfDemo\EqualizationDemo\EqualizationDemoViewModel.cs,EqualizationDemoViewModel,The following statement contains a magic number: bands = new EqualizerBand[]                      {                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 100' Gain = 0}'                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 200' Gain = 0}'                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 400' Gain = 0}'                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 800' Gain = 0}'                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 1200' Gain = 0}'                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 2400' Gain = 0}'                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 4800' Gain = 0}'                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 9600' Gain = 0}'                      };
Magic Number,NAudioWpfDemo.EqualizationDemo,EqualizationDemoViewModel,C:\research\architectureSmells\repos\naudio_NAudio\NAudioWpfDemo\EqualizationDemo\EqualizationDemoViewModel.cs,EqualizationDemoViewModel,The following statement contains a magic number: bands = new EqualizerBand[]                      {                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 100' Gain = 0}'                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 200' Gain = 0}'                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 400' Gain = 0}'                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 800' Gain = 0}'                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 1200' Gain = 0}'                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 2400' Gain = 0}'                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 4800' Gain = 0}'                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 9600' Gain = 0}'                      };
Magic Number,NAudioWpfDemo.EqualizationDemo,EqualizationDemoViewModel,C:\research\architectureSmells\repos\naudio_NAudio\NAudioWpfDemo\EqualizationDemo\EqualizationDemoViewModel.cs,EqualizationDemoViewModel,The following statement contains a magic number: bands = new EqualizerBand[]                      {                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 100' Gain = 0}'                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 200' Gain = 0}'                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 400' Gain = 0}'                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 800' Gain = 0}'                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 1200' Gain = 0}'                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 2400' Gain = 0}'                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 4800' Gain = 0}'                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 9600' Gain = 0}'                      };
Magic Number,NAudioWpfDemo.EqualizationDemo,EqualizationDemoViewModel,C:\research\architectureSmells\repos\naudio_NAudio\NAudioWpfDemo\EqualizationDemo\EqualizationDemoViewModel.cs,EqualizationDemoViewModel,The following statement contains a magic number: bands = new EqualizerBand[]                      {                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 100' Gain = 0}'                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 200' Gain = 0}'                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 400' Gain = 0}'                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 800' Gain = 0}'                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 1200' Gain = 0}'                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 2400' Gain = 0}'                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 4800' Gain = 0}'                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 9600' Gain = 0}'                      };
Magic Number,NAudioWpfDemo.EqualizationDemo,EqualizationDemoViewModel,C:\research\architectureSmells\repos\naudio_NAudio\NAudioWpfDemo\EqualizationDemo\EqualizationDemoViewModel.cs,EqualizationDemoViewModel,The following statement contains a magic number: bands = new EqualizerBand[]                      {                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 100' Gain = 0}'                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 200' Gain = 0}'                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 400' Gain = 0}'                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 800' Gain = 0}'                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 1200' Gain = 0}'                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 2400' Gain = 0}'                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 4800' Gain = 0}'                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 9600' Gain = 0}'                      };
Magic Number,NAudioWpfDemo.EqualizationDemo,EqualizationDemoViewModel,C:\research\architectureSmells\repos\naudio_NAudio\NAudioWpfDemo\EqualizationDemo\EqualizationDemoViewModel.cs,EqualizationDemoViewModel,The following statement contains a magic number: bands = new EqualizerBand[]                      {                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 100' Gain = 0}'                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 200' Gain = 0}'                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 400' Gain = 0}'                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 800' Gain = 0}'                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 1200' Gain = 0}'                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 2400' Gain = 0}'                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 4800' Gain = 0}'                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 9600' Gain = 0}'                      };
Magic Number,NAudioWpfDemo.EqualizationDemo,EqualizationDemoViewModel,C:\research\architectureSmells\repos\naudio_NAudio\NAudioWpfDemo\EqualizationDemo\EqualizationDemoViewModel.cs,EqualizationDemoViewModel,The following statement contains a magic number: bands = new EqualizerBand[]                      {                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 100' Gain = 0}'                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 200' Gain = 0}'                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 400' Gain = 0}'                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 800' Gain = 0}'                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 1200' Gain = 0}'                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 2400' Gain = 0}'                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 4800' Gain = 0}'                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 9600' Gain = 0}'                      };
Magic Number,NAudioWpfDemo.EqualizationDemo,EqualizationDemoViewModel,C:\research\architectureSmells\repos\naudio_NAudio\NAudioWpfDemo\EqualizationDemo\EqualizationDemoViewModel.cs,EqualizationDemoViewModel,The following statement contains a magic number: bands = new EqualizerBand[]                      {                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 100' Gain = 0}'                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 200' Gain = 0}'                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 400' Gain = 0}'                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 800' Gain = 0}'                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 1200' Gain = 0}'                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 2400' Gain = 0}'                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 4800' Gain = 0}'                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 9600' Gain = 0}'                      };
Magic Number,NAudioWpfDemo.EqualizationDemo,EqualizationDemoViewModel,C:\research\architectureSmells\repos\naudio_NAudio\NAudioWpfDemo\EqualizationDemo\EqualizationDemoViewModel.cs,EqualizationDemoViewModel,The following statement contains a magic number: bands = new EqualizerBand[]                      {                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 100' Gain = 0}'                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 200' Gain = 0}'                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 400' Gain = 0}'                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 800' Gain = 0}'                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 1200' Gain = 0}'                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 2400' Gain = 0}'                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 4800' Gain = 0}'                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 9600' Gain = 0}'                      };
Magic Number,NAudioWpfDemo.EqualizationDemo,EqualizationDemoViewModel,C:\research\architectureSmells\repos\naudio_NAudio\NAudioWpfDemo\EqualizationDemo\EqualizationDemoViewModel.cs,EqualizationDemoViewModel,The following statement contains a magic number: bands = new EqualizerBand[]                      {                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 100' Gain = 0}'                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 200' Gain = 0}'                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 400' Gain = 0}'                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 800' Gain = 0}'                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 1200' Gain = 0}'                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 2400' Gain = 0}'                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 4800' Gain = 0}'                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 9600' Gain = 0}'                      };
Magic Number,NAudioWpfDemo.EqualizationDemo,EqualizationDemoViewModel,C:\research\architectureSmells\repos\naudio_NAudio\NAudioWpfDemo\EqualizationDemo\EqualizationDemoViewModel.cs,EqualizationDemoViewModel,The following statement contains a magic number: bands = new EqualizerBand[]                      {                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 100' Gain = 0}'                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 200' Gain = 0}'                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 400' Gain = 0}'                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 800' Gain = 0}'                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 1200' Gain = 0}'                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 2400' Gain = 0}'                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 4800' Gain = 0}'                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 9600' Gain = 0}'                      };
Magic Number,NAudioWpfDemo.EqualizationDemo,EqualizationDemoViewModel,C:\research\architectureSmells\repos\naudio_NAudio\NAudioWpfDemo\EqualizationDemo\EqualizationDemoViewModel.cs,EqualizationDemoViewModel,The following statement contains a magic number: bands = new EqualizerBand[]                      {                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 100' Gain = 0}'                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 200' Gain = 0}'                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 400' Gain = 0}'                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 800' Gain = 0}'                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 1200' Gain = 0}'                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 2400' Gain = 0}'                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 4800' Gain = 0}'                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 9600' Gain = 0}'                      };
Magic Number,NAudioWpfDemo.EqualizationDemo,EqualizationDemoViewModel,C:\research\architectureSmells\repos\naudio_NAudio\NAudioWpfDemo\EqualizationDemo\EqualizationDemoViewModel.cs,EqualizationDemoViewModel,The following statement contains a magic number: bands = new EqualizerBand[]                      {                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 100' Gain = 0}'                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 200' Gain = 0}'                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 400' Gain = 0}'                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 800' Gain = 0}'                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 1200' Gain = 0}'                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 2400' Gain = 0}'                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 4800' Gain = 0}'                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 9600' Gain = 0}'                      };
Magic Number,NAudioWpfDemo.EqualizationDemo,EqualizationDemoViewModel,C:\research\architectureSmells\repos\naudio_NAudio\NAudioWpfDemo\EqualizationDemo\EqualizationDemoViewModel.cs,EqualizationDemoViewModel,The following statement contains a magic number: bands = new EqualizerBand[]                      {                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 100' Gain = 0}'                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 200' Gain = 0}'                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 400' Gain = 0}'                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 800' Gain = 0}'                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 1200' Gain = 0}'                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 2400' Gain = 0}'                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 4800' Gain = 0}'                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 9600' Gain = 0}'                      };
Magic Number,NAudioWpfDemo.EqualizationDemo,EqualizationDemoViewModel,C:\research\architectureSmells\repos\naudio_NAudio\NAudioWpfDemo\EqualizationDemo\EqualizationDemoViewModel.cs,EqualizationDemoViewModel,The following statement contains a magic number: bands = new EqualizerBand[]                      {                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 100' Gain = 0}'                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 200' Gain = 0}'                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 400' Gain = 0}'                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 800' Gain = 0}'                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 1200' Gain = 0}'                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 2400' Gain = 0}'                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 4800' Gain = 0}'                          new EqualizerBand {Bandwidth = 0.8f' Frequency = 9600' Gain = 0}'                      };
Magic Number,NAudioWpfDemo.FireAndForgetPlayback,AudioPlaybackEngine,C:\research\architectureSmells\repos\naudio_NAudio\NAudioWpfDemo\FireAndForgetPlayback\AudioPlaybackEngine.cs,ConvertToRightChannelCount,The following statement contains a magic number: input.WaveFormat.Channels == 1 && mixer.WaveFormat.Channels == 2
Magic Number,NAudioWpfDemo.FireAndForgetPlayback,CachedSound,C:\research\architectureSmells\repos\naudio_NAudio\NAudioWpfDemo\FireAndForgetPlayback\CachedSound.cs,CachedSound,The following statement contains a magic number: var wholeFile = new List<float>((int)(audioFileReader.Length / 4));
Magic Number,NAudioWpfDemo.MediaFoundationEncode,MediaTypeViewModel,C:\research\architectureSmells\repos\naudio_NAudio\NAudioWpfDemo\MediaFoundationEncode\MediaTypeViewModel.cs,ShortDescription,The following statement contains a magic number: shortDescription.AppendFormat("{0:0.#}kbps' "' (8 * bytesPerSecond) / 1000M);
Magic Number,NAudioWpfDemo.MediaFoundationEncode,MediaTypeViewModel,C:\research\architectureSmells\repos\naudio_NAudio\NAudioWpfDemo\MediaFoundationEncode\MediaTypeViewModel.cs,ShortDescription,The following statement contains a magic number: shortDescription.AppendFormat("{0:0.#}kbps' "' (8 * bytesPerSecond) / 1000M);
Magic Number,NAudioWpfDemo.MediaFoundationEncode,MediaTypeViewModel,C:\research\architectureSmells\repos\naudio_NAudio\NAudioWpfDemo\MediaFoundationEncode\MediaTypeViewModel.cs,ShortDescription,The following statement contains a magic number: shortDescription.AppendFormat("{0:0.#}kHz' "' sampleRate / 1000M);
Magic Number,NAudioWpfDemo.MediaFoundationEncode,MediaTypeViewModel,C:\research\architectureSmells\repos\naudio_NAudio\NAudioWpfDemo\MediaFoundationEncode\MediaTypeViewModel.cs,ShortDescription,The following statement contains a magic number: shortDescription.AppendFormat("{0}' "' channels == 1 ? "mono" : channels == 2 ? "stereo" : channels.ToString() + " channels");
Magic Number,NAudioWpfDemo.MediaFoundationEncode,MediaTypeViewModel,C:\research\architectureSmells\repos\naudio_NAudio\NAudioWpfDemo\MediaFoundationEncode\MediaTypeViewModel.cs,ShortDescription,The following statement contains a magic number: shortDescription.Length -= 2;
Magic Number,NAudioWpfDemo.MediaFoundationPlayback,MediaFoundationPlaybackViewModel,C:\research\architectureSmells\repos\naudio_NAudio\NAudioWpfDemo\MediaFoundationPlayback\MediaFoundationPlaybackViewModel.cs,MediaFoundationPlaybackViewModel,The following statement contains a magic number: timer.Interval = TimeSpan.FromMilliseconds(500);
Magic Number,NAudioWpfDemo.MediaFoundationResample,MediaFoundationResampleViewModel,C:\research\architectureSmells\repos\naudio_NAudio\NAudioWpfDemo\MediaFoundationResample\MediaFoundationResampleViewModel.cs,MediaFoundationResampleViewModel,The following statement contains a magic number: SampleRates = new[] { 8000' 16000' 22050' 32000' 44100' 48000' 88200' 96000 };
Magic Number,NAudioWpfDemo.MediaFoundationResample,MediaFoundationResampleViewModel,C:\research\architectureSmells\repos\naudio_NAudio\NAudioWpfDemo\MediaFoundationResample\MediaFoundationResampleViewModel.cs,MediaFoundationResampleViewModel,The following statement contains a magic number: SampleRates = new[] { 8000' 16000' 22050' 32000' 44100' 48000' 88200' 96000 };
Magic Number,NAudioWpfDemo.MediaFoundationResample,MediaFoundationResampleViewModel,C:\research\architectureSmells\repos\naudio_NAudio\NAudioWpfDemo\MediaFoundationResample\MediaFoundationResampleViewModel.cs,MediaFoundationResampleViewModel,The following statement contains a magic number: SampleRates = new[] { 8000' 16000' 22050' 32000' 44100' 48000' 88200' 96000 };
Magic Number,NAudioWpfDemo.MediaFoundationResample,MediaFoundationResampleViewModel,C:\research\architectureSmells\repos\naudio_NAudio\NAudioWpfDemo\MediaFoundationResample\MediaFoundationResampleViewModel.cs,MediaFoundationResampleViewModel,The following statement contains a magic number: SampleRates = new[] { 8000' 16000' 22050' 32000' 44100' 48000' 88200' 96000 };
Magic Number,NAudioWpfDemo.MediaFoundationResample,MediaFoundationResampleViewModel,C:\research\architectureSmells\repos\naudio_NAudio\NAudioWpfDemo\MediaFoundationResample\MediaFoundationResampleViewModel.cs,MediaFoundationResampleViewModel,The following statement contains a magic number: SampleRates = new[] { 8000' 16000' 22050' 32000' 44100' 48000' 88200' 96000 };
Magic Number,NAudioWpfDemo.MediaFoundationResample,MediaFoundationResampleViewModel,C:\research\architectureSmells\repos\naudio_NAudio\NAudioWpfDemo\MediaFoundationResample\MediaFoundationResampleViewModel.cs,MediaFoundationResampleViewModel,The following statement contains a magic number: SampleRates = new[] { 8000' 16000' 22050' 32000' 44100' 48000' 88200' 96000 };
Magic Number,NAudioWpfDemo.MediaFoundationResample,MediaFoundationResampleViewModel,C:\research\architectureSmells\repos\naudio_NAudio\NAudioWpfDemo\MediaFoundationResample\MediaFoundationResampleViewModel.cs,MediaFoundationResampleViewModel,The following statement contains a magic number: SampleRates = new[] { 8000' 16000' 22050' 32000' 44100' 48000' 88200' 96000 };
Magic Number,NAudioWpfDemo.MediaFoundationResample,MediaFoundationResampleViewModel,C:\research\architectureSmells\repos\naudio_NAudio\NAudioWpfDemo\MediaFoundationResample\MediaFoundationResampleViewModel.cs,MediaFoundationResampleViewModel,The following statement contains a magic number: SampleRates = new[] { 8000' 16000' 22050' 32000' 44100' 48000' 88200' 96000 };
Magic Number,NAudioWpfDemo.MediaFoundationResample,MediaFoundationResampleViewModel,C:\research\architectureSmells\repos\naudio_NAudio\NAudioWpfDemo\MediaFoundationResample\MediaFoundationResampleViewModel.cs,MediaFoundationResampleViewModel,The following statement contains a magic number: selectedSampleRate = 16000;
Magic Number,NAudioWpfDemo.MediaFoundationResample,MediaFoundationResampleViewModel,C:\research\architectureSmells\repos\naudio_NAudio\NAudioWpfDemo\MediaFoundationResample\MediaFoundationResampleViewModel.cs,SelectSaveFile,The following statement contains a magic number: sfd.FileName = String.Format("{0} {1} {2}kHz.wav"'                                           Path.GetFileNameWithoutExtension(InputFile)'                                           desc'                                           SampleRate/1000M);
Magic Number,NAudioWpfDemo.MediaFoundationResample,MediaFoundationResampleViewModel,C:\research\architectureSmells\repos\naudio_NAudio\NAudioWpfDemo\MediaFoundationResample\MediaFoundationResampleViewModel.cs,CreateRepositionTestFile,The following statement contains a magic number: var buffer = new byte[writer.WaveFormat.AverageBytesPerSecond / 2];
Magic Number,NAudioWpfDemo.MediaFoundationResample,MediaFoundationResampleViewModel,C:\research\architectureSmells\repos\naudio_NAudio\NAudioWpfDemo\MediaFoundationResample\MediaFoundationResampleViewModel.cs,CreateRepositionTestFile,The following statement contains a magic number: n < 7
Magic Number,NAudioWpfDemo.MediaFoundationResample,MediaFoundationResampleViewModel,C:\research\architectureSmells\repos\naudio_NAudio\NAudioWpfDemo\MediaFoundationResample\MediaFoundationResampleViewModel.cs,CreateRepositionTestFile,The following statement contains a magic number: n < 4
Magic Number,NAudioWpfDemo.MediaFoundationResample,MediaFoundationResampleViewModel,C:\research\architectureSmells\repos\naudio_NAudio\NAudioWpfDemo\MediaFoundationResample\MediaFoundationResampleViewModel.cs,CreateRepositionTestFile,The following statement contains a magic number: n < 6
Magic Number,NAudioWpfDemo.MediaFoundationResample,MediaFoundationResampleViewModel,C:\research\architectureSmells\repos\naudio_NAudio\NAudioWpfDemo\MediaFoundationResample\MediaFoundationResampleViewModel.cs,CreateOutputFormat,The following statement contains a magic number: bool isIeeeFloat = inputFormat.Encoding == WaveFormatEncoding.IeeeFloat && SelectedBitDepthIndex == 0 ||                                SelectedBitDepthIndex == 4;
Missing Default,NAudioWpfDemo.MediaFoundationResample,MediaFoundationResampleViewModel,C:\research\architectureSmells\repos\naudio_NAudio\NAudioWpfDemo\MediaFoundationResample\MediaFoundationResampleViewModel.cs,CreateOutputFormat,The following switch statement is missing a default case: switch (SelectedBitDepthIndex)                  {                      case 1:                           bitDepth = 8;                          break;                      case 2:                          bitDepth = 16;                          break;                      case 3:                          bitDepth = 24;                          break;                  }
