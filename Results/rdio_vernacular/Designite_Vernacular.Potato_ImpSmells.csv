Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Vernacular.Potato,HeaderCollection,C:\repos\rdio_vernacular\Vernacular.Potato\Vernacular.Potato\HeaderCollection.cs,PopulateWithRequiredHeaders,Cyclomatic complexity of the method is 9
Magic Number,Vernacular.Potato.Internal,Parser,C:\repos\rdio_vernacular\Vernacular.Potato\Vernacular.Potato.Internal\Parser.cs,ParseHeaders,The following statement contains a magic number: foreach (var line in message.Value.Split ('\n')) {                  line_number++;                    if (String.IsNullOrWhiteSpace (line)) {                      continue;                  }                    var key_value = line.Split (new [] { ':' }' 2);                  if (key_value == null || key_value.Length != 2) {                      yield break;                  }                    yield return new Header {                      Line = line_number'                      Name = key_value [0].Trim ()'                      Value = key_value [1].Trim ()                  };              }
Magic Number,Vernacular.Potato.Internal,Parser,C:\repos\rdio_vernacular\Vernacular.Potato\Vernacular.Potato.Internal\Parser.cs,ParseHeaders,The following statement contains a magic number: foreach (var line in message.Value.Split ('\n')) {                  line_number++;                    if (String.IsNullOrWhiteSpace (line)) {                      continue;                  }                    var key_value = line.Split (new [] { ':' }' 2);                  if (key_value == null || key_value.Length != 2) {                      yield break;                  }                    yield return new Header {                      Line = line_number'                      Name = key_value [0].Trim ()'                      Value = key_value [1].Trim ()                  };              }
Magic Number,Vernacular.Potato.Internal,Parser,C:\repos\rdio_vernacular\Vernacular.Potato\Vernacular.Potato.Internal\Parser.cs,ParseIdentifier,The following statement contains a magic number: switch (match.Groups [1].Value) {                  case "id":                      type = MessageType.SingularIdentifier;                      plural_order = -1;                      break;                  case "id_plural":                      type = MessageType.PluralIdentifier;                      plural_order = -1;                      break;                  case "str":                      type = MessageType.SingularString;                      plural_order = 0;                      break;                  case "ctxt":                      type = MessageType.Context;                      plural_order = -1;                      break;                  default:                      if (match.Groups.Count == 3) {                          type = MessageType.PluralString;                          plural_order = Int32.Parse (match.Groups [2].Value);                      } else {                          throw new SyntaxException(lexer' "invalid identifier: " + (string)identifier);                      }                      break;              }
Magic Number,Vernacular.Potato.Internal,Parser,C:\repos\rdio_vernacular\Vernacular.Potato\Vernacular.Potato.Internal\Parser.cs,ParseIdentifier,The following statement contains a magic number: switch (match.Groups [1].Value) {                  case "id":                      type = MessageType.SingularIdentifier;                      plural_order = -1;                      break;                  case "id_plural":                      type = MessageType.PluralIdentifier;                      plural_order = -1;                      break;                  case "str":                      type = MessageType.SingularString;                      plural_order = 0;                      break;                  case "ctxt":                      type = MessageType.Context;                      plural_order = -1;                      break;                  default:                      if (match.Groups.Count == 3) {                          type = MessageType.PluralString;                          plural_order = Int32.Parse (match.Groups [2].Value);                      } else {                          throw new SyntaxException(lexer' "invalid identifier: " + (string)identifier);                      }                      break;              }
