Implementation smell,Namespace,Class,File,Method,Description
Long Method,Vernacular.Analyzers,AnalyzerConfiguration,C:\research\architectureSmells\repos\rdio_vernacular\Vernacular.Tool\Vernacular.Analyzers\AnalyzerConfiguration.cs,ParseConfiguration,The method has 118 lines of code.
Long Method,Vernacular.Generators,PoGenerator,C:\research\architectureSmells\repos\rdio_vernacular\Vernacular.Tool\Vernacular.Generators\PoGenerator.cs,Generate,The method has 111 lines of code.
Long Method,Vernacular.Parsers,PoParser,C:\research\architectureSmells\repos\rdio_vernacular\Vernacular.Tool\Vernacular.Parsers\PoParser.cs,ParsePoMessageUnit,The method has 100 lines of code.
Long Method,Vernacular.Tool,Entry,C:\research\architectureSmells\repos\rdio_vernacular\Vernacular.Tool\Vernacular.Tool\Entry.cs,Main,The method has 208 lines of code.
Complex Method,Mono.Options,Option,C:\research\architectureSmells\repos\rdio_vernacular\Vernacular.Tool\Mono.Options\Options.cs,Option,Cyclomatic complexity of the method is 8
Complex Method,Mono.Options,Option,C:\research\architectureSmells\repos\rdio_vernacular\Vernacular.Tool\Mono.Options\Options.cs,ParsePrototype,Cyclomatic complexity of the method is 10
Complex Method,Mono.Options,Option,C:\research\architectureSmells\repos\rdio_vernacular\Vernacular.Tool\Mono.Options\Options.cs,AddSeparators,Cyclomatic complexity of the method is 8
Complex Method,Mono.Options,ArgumentSource,C:\research\architectureSmells\repos\rdio_vernacular\Vernacular.Tool\Mono.Options\Options.cs,GetArguments,Cyclomatic complexity of the method is 9
Complex Method,Mono.Options,OptionSet,C:\research\architectureSmells\repos\rdio_vernacular\Vernacular.Tool\Mono.Options\Options.cs,Parse,Cyclomatic complexity of the method is 8
Complex Method,Mono.Options,OptionSet,C:\research\architectureSmells\repos\rdio_vernacular\Vernacular.Tool\Mono.Options\Options.cs,WriteOptionDescriptions,Cyclomatic complexity of the method is 9
Complex Method,Mono.Options,OptionSet,C:\research\architectureSmells\repos\rdio_vernacular\Vernacular.Tool\Mono.Options\Options.cs,WriteOptionPrototype,Cyclomatic complexity of the method is 8
Complex Method,Mono.Options,OptionSet,C:\research\architectureSmells\repos\rdio_vernacular\Vernacular.Tool\Mono.Options\Options.cs,GetDescription,Cyclomatic complexity of the method is 12
Complex Method,Vernacular.Analyzers,AnalyzerConfiguration,C:\research\architectureSmells\repos\rdio_vernacular\Vernacular.Tool\Vernacular.Analyzers\AnalyzerConfiguration.cs,ParseConfiguration,Cyclomatic complexity of the method is 26
Complex Method,Vernacular.Analyzers,StringAnalyzer,C:\research\architectureSmells\repos\rdio_vernacular\Vernacular.Tool\Vernacular.Analyzers\StringAnalyzer.cs,Analyze,Cyclomatic complexity of the method is 13
Complex Method,Vernacular.Generators,MoGenerator,C:\research\architectureSmells\repos\rdio_vernacular\Vernacular.Tool\Vernacular.Generators\MoGenerator.cs,WriteMessagesTo,Cyclomatic complexity of the method is 8
Complex Method,Vernacular.Generators,PoGenerator,C:\research\architectureSmells\repos\rdio_vernacular\Vernacular.Tool\Vernacular.Generators\PoGenerator.cs,Generate,Cyclomatic complexity of the method is 16
Complex Method,Vernacular.Parsers,AssemblyParser,C:\research\architectureSmells\repos\rdio_vernacular\Vernacular.Tool\Vernacular.Parsers\AssemblyParser.cs,ParseLocalizedStringInvocations,Cyclomatic complexity of the method is 10
Complex Method,Vernacular.Parsers,AssemblyParser,C:\research\architectureSmells\repos\rdio_vernacular\Vernacular.Tool\Vernacular.Parsers\AssemblyParser.cs,ParseLocalizedStringInvocation,Cyclomatic complexity of the method is 10
Complex Method,Vernacular.Parsers,AssemblyParser,C:\research\architectureSmells\repos\rdio_vernacular\Vernacular.Tool\Vernacular.Parsers\AssemblyParser.cs,GenerateLocalizedStrings,Cyclomatic complexity of the method is 13
Complex Method,Vernacular.Parsers,CecilExtensions,C:\research\architectureSmells\repos\rdio_vernacular\Vernacular.Tool\Vernacular.Parsers\CecilExtensions.cs,IsStoreInstruction,Cyclomatic complexity of the method is 8
Complex Method,Vernacular.Parsers,CecilExtensions,C:\research\architectureSmells\repos\rdio_vernacular\Vernacular.Tool\Vernacular.Parsers\CecilExtensions.cs,IsLoadInstruction,Cyclomatic complexity of the method is 8
Complex Method,Vernacular.Parsers,XamlParser,C:\research\architectureSmells\repos\rdio_vernacular\Vernacular.Tool\Vernacular.Parsers\XamlParser.cs,Parse,Cyclomatic complexity of the method is 10
Complex Method,Vernacular.Parsers,PoParser,C:\research\architectureSmells\repos\rdio_vernacular\Vernacular.Tool\Vernacular.Parsers\PoParser.cs,ParsePoMessageUnit,Cyclomatic complexity of the method is 20
Complex Method,Vernacular.Tool,Entry,C:\research\architectureSmells\repos\rdio_vernacular\Vernacular.Tool\Vernacular.Tool\Entry.cs,Main,Cyclomatic complexity of the method is 28
Complex Method,Vernacular,ConsoleCrayon,C:\research\architectureSmells\repos\rdio_vernacular\Vernacular.Tool\Vernacular.Tool\ConsoleCrayon.cs,TranslateColor,Cyclomatic complexity of the method is 16
Long Parameter List,Mono.Options,OptionSet,C:\research\architectureSmells\repos\rdio_vernacular\Vernacular.Tool\Mono.Options\Options.cs,GetOptionParts,The method has 5 parameters. Parameters: argument' flag' name' sep' value
Long Parameter List,Mono.Options,OptionSet,C:\research\architectureSmells\repos\rdio_vernacular\Vernacular.Tool\Mono.Options\Options.cs,WriteDescription,The method has 5 parameters. Parameters: o' value' prefix' firstWidth' remWidth
Long Statement,Vernacular.Tool,Entry,C:\research\architectureSmells\repos\rdio_vernacular\Vernacular.Tool\Vernacular.Tool\Entry.cs,Main,The length of the statement  "                { "analyzer-config="' "Path to a configuration file for the analyzer; use with --analyze"' v => analyer_config_path = v }'" is 122.
Long Statement,Vernacular.Tool,Entry,C:\research\architectureSmells\repos\rdio_vernacular\Vernacular.Tool\Vernacular.Tool\Entry.cs,Main,The length of the statement  "                { "wc"' "Count words to translate' output goes in the po header and in the console (with -v)"' v => count_words = v != null}'" is 125.
Complex Conditional,Mono.Options,Option,C:\research\architectureSmells\repos\rdio_vernacular\Vernacular.Tool\Mono.Options\Options.cs,Option,The conditional expression  "Array.IndexOf (names' "<>") >= 0 &&  					((names.Length == 1 && this.type != OptionValueType.None) || 					 (names.Length > 1 && this.MaxValueCount > 1))"  is complex.
Complex Conditional,Mono.Options,OptionSet,C:\research\architectureSmells\repos\rdio_vernacular\Vernacular.Tool\Mono.Options\Options.cs,ParseBool,The conditional expression  "n.Length >= 1 && (n [n.Length-1] == '+' || n [n.Length-1] == '-') && 					Contains ((rn = n.Substring (0' n.Length-1)))"  is complex.
Complex Conditional,Vernacular.Parsers,AssemblyParser,C:\research\architectureSmells\repos\rdio_vernacular\Vernacular.Tool\Vernacular.Parsers\AssemblyParser.cs,ResolveLocalizationMethodReference,The conditional expression  "method_definition.FullName != methodReference.FullName ||                     method_definition.ReturnType.FullName != methodReference.ReturnType.FullName ||                     !method_definition.HasParameters || !methodReference.HasParameters ||                     method_definition.Parameters.Count != methodReference.Parameters.Count"  is complex.
Complex Conditional,Vernacular.Parsers,AssemblyParser,C:\research\architectureSmells\repos\rdio_vernacular\Vernacular.Tool\Vernacular.Parsers\AssemblyParser.cs,ParseLocalizedStringInvocation,The conditional expression  "call_instruction.Next != null &&                 call_instruction.Next.Next != null &&                 call_instruction.Next.OpCode == OpCodes.Ldarg_0 &&                 call_instruction.Next.Next.OpCode == OpCodes.Call"  is complex.
Empty Catch Block,Vernacular.Analyzers,StringAnalyzer,C:\research\architectureSmells\repos\rdio_vernacular\Vernacular.Tool\Vernacular.Analyzers\StringAnalyzer.cs,StringAnalyzer,The method has an empty catch block.
Empty Catch Block,Vernacular.Parsers,AssemblyParser,C:\research\architectureSmells\repos\rdio_vernacular\Vernacular.Tool\Vernacular.Parsers\AssemblyParser.cs,Add,The method has an empty catch block.
Empty Catch Block,Vernacular.Parsers,AssemblyParser,C:\research\architectureSmells\repos\rdio_vernacular\Vernacular.Tool\Vernacular.Parsers\AssemblyParser.cs,Add,The method has an empty catch block.
Empty Catch Block,Vernacular.Parsers,XapParser,C:\research\architectureSmells\repos\rdio_vernacular\Vernacular.Tool\Vernacular.Parsers\XapParser.cs,Add,The method has an empty catch block.
Magic Number,Mono.Options,OptionSet,C:\research\architectureSmells\repos\rdio_vernacular\Vernacular.Tool\Mono.Options\Options.cs,Add,The following statement contains a magic number: Option p = new ActionOption (prototype' description' 2'  					delegate (OptionValueCollection v) {action (v [0]' v [1]);});
Magic Number,Mono.Options,OptionSet,C:\research\architectureSmells\repos\rdio_vernacular\Vernacular.Tool\Mono.Options\Options.cs,WriteOptionDescriptions,The following statement contains a magic number: WriteDescription (o' p.Description' ""' 80' 80);
Magic Number,Mono.Options,OptionSet,C:\research\architectureSmells\repos\rdio_vernacular\Vernacular.Tool\Mono.Options\Options.cs,WriteOptionDescriptions,The following statement contains a magic number: WriteDescription (o' p.Description' ""' 80' 80);
Magic Number,Mono.Options,OptionSet,C:\research\architectureSmells\repos\rdio_vernacular\Vernacular.Tool\Mono.Options\Options.cs,WriteOptionDescriptions,The following statement contains a magic number: WriteDescription (o' p.Description' new string (' '' OptionWidth+2)' 						Description_FirstWidth' Description_RemWidth);
Magic Number,Mono.Options,OptionSet,C:\research\architectureSmells\repos\rdio_vernacular\Vernacular.Tool\Mono.Options\Options.cs,WriteOptionDescriptions,The following statement contains a magic number: WriteDescription (o' s.Description' new string (' '' OptionWidth+2)' 						Description_FirstWidth' Description_RemWidth);
Magic Number,Vernacular.Analyzers,StringAnalyzer,C:\research\architectureSmells\repos\rdio_vernacular\Vernacular.Tool\Vernacular.Analyzers\StringAnalyzer.cs,CheckSpelling,The following statement contains a magic number: sanitized_word = sanitized_word.Substring (0' sanitized_word.Length - 2);
Magic Number,Vernacular.Generators,MoGenerator,C:\research\architectureSmells\repos\rdio_vernacular\Vernacular.Tool\Vernacular.Generators\MoGenerator.cs,Generate,The following statement contains a magic number: OriginalStringsTableOffset = 28;
Magic Number,Vernacular.Generators,MoGenerator,C:\research\architectureSmells\repos\rdio_vernacular\Vernacular.Tool\Vernacular.Generators\MoGenerator.cs,Generate,The following statement contains a magic number: TranslationsTableOffset = OriginalStringsTableOffset + NumberOfStrings * 8;
Magic Number,Vernacular.Generators,MoGenerator,C:\research\architectureSmells\repos\rdio_vernacular\Vernacular.Tool\Vernacular.Generators\MoGenerator.cs,Generate,The following statement contains a magic number: HashTableOffset = TranslationsTableOffset + NumberOfStrings * 8;
Magic Number,Vernacular.Generators,MoGenerator,C:\research\architectureSmells\repos\rdio_vernacular\Vernacular.Tool\Vernacular.Generators\MoGenerator.cs,WriteLengthsAndOffsetsTo,The following statement contains a magic number: var offset = HashTableOffset + HashTableSize*4;
Magic Number,Vernacular.Generators,AndroidGenerator,C:\research\architectureSmells\repos\rdio_vernacular\Vernacular.Tool\Vernacular.Generators\AndroidGenerator.cs,WriteDocument,The following statement contains a magic number: xml.Indentation = 2;
Magic Number,Vernacular.Parsers,AssemblyParser,C:\research\architectureSmells\repos\rdio_vernacular\Vernacular.Tool\Vernacular.Parsers\AssemblyParser.cs,ParseLocalizedStringInvocation,The following statement contains a magic number: Log (true' "  |".PadRight (70' '-'));
Magic Number,Vernacular.Parsers,AssemblyParser,C:\research\architectureSmells\repos\rdio_vernacular\Vernacular.Tool\Vernacular.Parsers\AssemblyParser.cs,ParseLocalizedStringInvocation,The following statement contains a magic number: Log (true' "  |".PadRight (70' '-'));
Magic Number,Vernacular.Parsers,XapParser,C:\research\architectureSmells\repos\rdio_vernacular\Vernacular.Tool\Vernacular.Parsers\XapParser.cs,Add,The following statement contains a magic number: var buffer = new byte[2048];
Magic Number,Vernacular.Parsers,Parser,C:\research\architectureSmells\repos\rdio_vernacular\Vernacular.Tool\Vernacular.Parsers\Parser.cs,Log,The following statement contains a magic number: LogLevel == 2 || (LogLevel == 1 && !verbose)
Magic Number,Vernacular.Parsers,XamlParser,C:\research\architectureSmells\repos\rdio_vernacular\Vernacular.Tool\Vernacular.Parsers\XamlParser.cs,Add,The following statement contains a magic number: var buffer = new byte[2048];
Magic Number,Vernacular.Tool,Entry,C:\research\architectureSmells\repos\rdio_vernacular\Vernacular.Tool\Vernacular.Tool\Entry.cs,Main,The following statement contains a magic number: var options = new OptionSet {                 { "i|input="' "Input directory' search pattern' or file to parse (non-recursive)"' v => input_paths.Add (v) }'                 { "o|output="' "Output file for extracted string resources"' v => output_path = v }'                 { "r|source-root="' "Root directory of source code"' v => source_root_path = v }'                 { "g|generator="' String.Format ("Generator to use ({0})"'                     String.Join ("|"' Generator.GeneratorNames))' v => generator_name = v }'                 { "retain-order"' "Retain the original input string order when generating. " +                     "Default behavior is to sort strings for better diff support."' v => retain_order = v != null }'                 { "a|analyze"' "Run the string analyzer after generation"' v => analyze = v != null }'                 { "analyzer-config="' "Path to a configuration file for the analyzer; use with --analyze"' v => analyer_config_path = v }'                 { "analyzer-warnaserror"' "Treat analyzer warnings as errors"' v => analyzer_warn_as_error = v != null }'                 { "reduce-master="' "Reduce a master localized PO file' " +                     "keeping only strings defined by another unlocalized PO[T] file"' v => reduce_master_path = v }'                 { "reduce-retain="' "An unlocalized PO[T] file used to " +                     "determine which strings from reduce-master should be retained"' v => reduce_retain_path = v }'                 { "android-input-strings-xml="' "Input file of unlocalized Android Strings.xml " +                     "for preserving hand-maintained string resources"' v => android_input_strings_xml = v }'                 { "android-output-strings-xml="' "Output file of localized Android Strings.xml " +                     "for preserving hand-maintained string resources"' v => android_output_strings_xml = v }'                 { "pot"' v => generate_pot = v != null }'                 { "exclude-po-header"' v => exclude_po_header = v != null }'                 { "l|log"' "Display logging"' v => log = v != null }'                 { "m|meta="' "Add localization metadata (key=value)"' v => {                     var parts = v.Split (new [] { '=' }' 2);                     if (parts != null && parts.Length == 2) {                         if (metadata == null) {                             metadata = new LocalizationMetadata ();                         }                          metadata.Add (parts[0].Trim ()' parts[1].Trim ());                     }                 } }'                 { "wc"' "Count words to translate' output goes in the po header and in the console (with -v)"' v => count_words = v != null}'                 { "v|verbose"' "Verbose logging"' v => verbose = v != null }'                 { "h|help"' "Show this help message and exit"' v => show_help = v != null }             };
Magic Number,Vernacular.Tool,Entry,C:\research\architectureSmells\repos\rdio_vernacular\Vernacular.Tool\Vernacular.Tool\Entry.cs,Main,The following statement contains a magic number: var options = new OptionSet {                 { "i|input="' "Input directory' search pattern' or file to parse (non-recursive)"' v => input_paths.Add (v) }'                 { "o|output="' "Output file for extracted string resources"' v => output_path = v }'                 { "r|source-root="' "Root directory of source code"' v => source_root_path = v }'                 { "g|generator="' String.Format ("Generator to use ({0})"'                     String.Join ("|"' Generator.GeneratorNames))' v => generator_name = v }'                 { "retain-order"' "Retain the original input string order when generating. " +                     "Default behavior is to sort strings for better diff support."' v => retain_order = v != null }'                 { "a|analyze"' "Run the string analyzer after generation"' v => analyze = v != null }'                 { "analyzer-config="' "Path to a configuration file for the analyzer; use with --analyze"' v => analyer_config_path = v }'                 { "analyzer-warnaserror"' "Treat analyzer warnings as errors"' v => analyzer_warn_as_error = v != null }'                 { "reduce-master="' "Reduce a master localized PO file' " +                     "keeping only strings defined by another unlocalized PO[T] file"' v => reduce_master_path = v }'                 { "reduce-retain="' "An unlocalized PO[T] file used to " +                     "determine which strings from reduce-master should be retained"' v => reduce_retain_path = v }'                 { "android-input-strings-xml="' "Input file of unlocalized Android Strings.xml " +                     "for preserving hand-maintained string resources"' v => android_input_strings_xml = v }'                 { "android-output-strings-xml="' "Output file of localized Android Strings.xml " +                     "for preserving hand-maintained string resources"' v => android_output_strings_xml = v }'                 { "pot"' v => generate_pot = v != null }'                 { "exclude-po-header"' v => exclude_po_header = v != null }'                 { "l|log"' "Display logging"' v => log = v != null }'                 { "m|meta="' "Add localization metadata (key=value)"' v => {                     var parts = v.Split (new [] { '=' }' 2);                     if (parts != null && parts.Length == 2) {                         if (metadata == null) {                             metadata = new LocalizationMetadata ();                         }                          metadata.Add (parts[0].Trim ()' parts[1].Trim ());                     }                 } }'                 { "wc"' "Count words to translate' output goes in the po header and in the console (with -v)"' v => count_words = v != null}'                 { "v|verbose"' "Verbose logging"' v => verbose = v != null }'                 { "h|help"' "Show this help message and exit"' v => show_help = v != null }             };
Magic Number,Vernacular.Tool,Entry,C:\research\architectureSmells\repos\rdio_vernacular\Vernacular.Tool\Vernacular.Tool\Entry.cs,Main,The following statement contains a magic number: parser.LogLevel = 2;
Magic Number,Vernacular,ConsoleCrayon,C:\research\architectureSmells\repos\rdio_vernacular\Vernacular.Tool\Vernacular.Tool\ConsoleCrayon.cs,TranslateColor,The following statement contains a magic number: switch (desired) {                 // Dark colors                 case ConsoleColor.Black: return 0;                 case ConsoleColor.DarkRed: return 1;                 case ConsoleColor.DarkGreen: return 2;                 case ConsoleColor.DarkYellow: return 3;                 case ConsoleColor.DarkBlue: return 4;                 case ConsoleColor.DarkMagenta: return 5;                 case ConsoleColor.DarkCyan: return 6;                 case ConsoleColor.Gray: return 7;                  // Light colors                 case ConsoleColor.DarkGray: light = true; return 0;                 case ConsoleColor.Red: light = true; return 1;                 case ConsoleColor.Green: light = true; return 2;                 case ConsoleColor.Yellow: light = true; return 3;                 case ConsoleColor.Blue: light = true; return 4;                 case ConsoleColor.Magenta: light = true; return 5;                 case ConsoleColor.Cyan: light = true; return 6;                 case ConsoleColor.White: default: light = true; return 7;             }
Magic Number,Vernacular,ConsoleCrayon,C:\research\architectureSmells\repos\rdio_vernacular\Vernacular.Tool\Vernacular.Tool\ConsoleCrayon.cs,TranslateColor,The following statement contains a magic number: switch (desired) {                 // Dark colors                 case ConsoleColor.Black: return 0;                 case ConsoleColor.DarkRed: return 1;                 case ConsoleColor.DarkGreen: return 2;                 case ConsoleColor.DarkYellow: return 3;                 case ConsoleColor.DarkBlue: return 4;                 case ConsoleColor.DarkMagenta: return 5;                 case ConsoleColor.DarkCyan: return 6;                 case ConsoleColor.Gray: return 7;                  // Light colors                 case ConsoleColor.DarkGray: light = true; return 0;                 case ConsoleColor.Red: light = true; return 1;                 case ConsoleColor.Green: light = true; return 2;                 case ConsoleColor.Yellow: light = true; return 3;                 case ConsoleColor.Blue: light = true; return 4;                 case ConsoleColor.Magenta: light = true; return 5;                 case ConsoleColor.Cyan: light = true; return 6;                 case ConsoleColor.White: default: light = true; return 7;             }
Magic Number,Vernacular,ConsoleCrayon,C:\research\architectureSmells\repos\rdio_vernacular\Vernacular.Tool\Vernacular.Tool\ConsoleCrayon.cs,TranslateColor,The following statement contains a magic number: switch (desired) {                 // Dark colors                 case ConsoleColor.Black: return 0;                 case ConsoleColor.DarkRed: return 1;                 case ConsoleColor.DarkGreen: return 2;                 case ConsoleColor.DarkYellow: return 3;                 case ConsoleColor.DarkBlue: return 4;                 case ConsoleColor.DarkMagenta: return 5;                 case ConsoleColor.DarkCyan: return 6;                 case ConsoleColor.Gray: return 7;                  // Light colors                 case ConsoleColor.DarkGray: light = true; return 0;                 case ConsoleColor.Red: light = true; return 1;                 case ConsoleColor.Green: light = true; return 2;                 case ConsoleColor.Yellow: light = true; return 3;                 case ConsoleColor.Blue: light = true; return 4;                 case ConsoleColor.Magenta: light = true; return 5;                 case ConsoleColor.Cyan: light = true; return 6;                 case ConsoleColor.White: default: light = true; return 7;             }
Magic Number,Vernacular,ConsoleCrayon,C:\research\architectureSmells\repos\rdio_vernacular\Vernacular.Tool\Vernacular.Tool\ConsoleCrayon.cs,TranslateColor,The following statement contains a magic number: switch (desired) {                 // Dark colors                 case ConsoleColor.Black: return 0;                 case ConsoleColor.DarkRed: return 1;                 case ConsoleColor.DarkGreen: return 2;                 case ConsoleColor.DarkYellow: return 3;                 case ConsoleColor.DarkBlue: return 4;                 case ConsoleColor.DarkMagenta: return 5;                 case ConsoleColor.DarkCyan: return 6;                 case ConsoleColor.Gray: return 7;                  // Light colors                 case ConsoleColor.DarkGray: light = true; return 0;                 case ConsoleColor.Red: light = true; return 1;                 case ConsoleColor.Green: light = true; return 2;                 case ConsoleColor.Yellow: light = true; return 3;                 case ConsoleColor.Blue: light = true; return 4;                 case ConsoleColor.Magenta: light = true; return 5;                 case ConsoleColor.Cyan: light = true; return 6;                 case ConsoleColor.White: default: light = true; return 7;             }
Magic Number,Vernacular,ConsoleCrayon,C:\research\architectureSmells\repos\rdio_vernacular\Vernacular.Tool\Vernacular.Tool\ConsoleCrayon.cs,TranslateColor,The following statement contains a magic number: switch (desired) {                 // Dark colors                 case ConsoleColor.Black: return 0;                 case ConsoleColor.DarkRed: return 1;                 case ConsoleColor.DarkGreen: return 2;                 case ConsoleColor.DarkYellow: return 3;                 case ConsoleColor.DarkBlue: return 4;                 case ConsoleColor.DarkMagenta: return 5;                 case ConsoleColor.DarkCyan: return 6;                 case ConsoleColor.Gray: return 7;                  // Light colors                 case ConsoleColor.DarkGray: light = true; return 0;                 case ConsoleColor.Red: light = true; return 1;                 case ConsoleColor.Green: light = true; return 2;                 case ConsoleColor.Yellow: light = true; return 3;                 case ConsoleColor.Blue: light = true; return 4;                 case ConsoleColor.Magenta: light = true; return 5;                 case ConsoleColor.Cyan: light = true; return 6;                 case ConsoleColor.White: default: light = true; return 7;             }
Magic Number,Vernacular,ConsoleCrayon,C:\research\architectureSmells\repos\rdio_vernacular\Vernacular.Tool\Vernacular.Tool\ConsoleCrayon.cs,TranslateColor,The following statement contains a magic number: switch (desired) {                 // Dark colors                 case ConsoleColor.Black: return 0;                 case ConsoleColor.DarkRed: return 1;                 case ConsoleColor.DarkGreen: return 2;                 case ConsoleColor.DarkYellow: return 3;                 case ConsoleColor.DarkBlue: return 4;                 case ConsoleColor.DarkMagenta: return 5;                 case ConsoleColor.DarkCyan: return 6;                 case ConsoleColor.Gray: return 7;                  // Light colors                 case ConsoleColor.DarkGray: light = true; return 0;                 case ConsoleColor.Red: light = true; return 1;                 case ConsoleColor.Green: light = true; return 2;                 case ConsoleColor.Yellow: light = true; return 3;                 case ConsoleColor.Blue: light = true; return 4;                 case ConsoleColor.Magenta: light = true; return 5;                 case ConsoleColor.Cyan: light = true; return 6;                 case ConsoleColor.White: default: light = true; return 7;             }
Magic Number,Vernacular,ConsoleCrayon,C:\research\architectureSmells\repos\rdio_vernacular\Vernacular.Tool\Vernacular.Tool\ConsoleCrayon.cs,TranslateColor,The following statement contains a magic number: switch (desired) {                 // Dark colors                 case ConsoleColor.Black: return 0;                 case ConsoleColor.DarkRed: return 1;                 case ConsoleColor.DarkGreen: return 2;                 case ConsoleColor.DarkYellow: return 3;                 case ConsoleColor.DarkBlue: return 4;                 case ConsoleColor.DarkMagenta: return 5;                 case ConsoleColor.DarkCyan: return 6;                 case ConsoleColor.Gray: return 7;                  // Light colors                 case ConsoleColor.DarkGray: light = true; return 0;                 case ConsoleColor.Red: light = true; return 1;                 case ConsoleColor.Green: light = true; return 2;                 case ConsoleColor.Yellow: light = true; return 3;                 case ConsoleColor.Blue: light = true; return 4;                 case ConsoleColor.Magenta: light = true; return 5;                 case ConsoleColor.Cyan: light = true; return 6;                 case ConsoleColor.White: default: light = true; return 7;             }
Magic Number,Vernacular,ConsoleCrayon,C:\research\architectureSmells\repos\rdio_vernacular\Vernacular.Tool\Vernacular.Tool\ConsoleCrayon.cs,TranslateColor,The following statement contains a magic number: switch (desired) {                 // Dark colors                 case ConsoleColor.Black: return 0;                 case ConsoleColor.DarkRed: return 1;                 case ConsoleColor.DarkGreen: return 2;                 case ConsoleColor.DarkYellow: return 3;                 case ConsoleColor.DarkBlue: return 4;                 case ConsoleColor.DarkMagenta: return 5;                 case ConsoleColor.DarkCyan: return 6;                 case ConsoleColor.Gray: return 7;                  // Light colors                 case ConsoleColor.DarkGray: light = true; return 0;                 case ConsoleColor.Red: light = true; return 1;                 case ConsoleColor.Green: light = true; return 2;                 case ConsoleColor.Yellow: light = true; return 3;                 case ConsoleColor.Blue: light = true; return 4;                 case ConsoleColor.Magenta: light = true; return 5;                 case ConsoleColor.Cyan: light = true; return 6;                 case ConsoleColor.White: default: light = true; return 7;             }
Magic Number,Vernacular,ConsoleCrayon,C:\research\architectureSmells\repos\rdio_vernacular\Vernacular.Tool\Vernacular.Tool\ConsoleCrayon.cs,TranslateColor,The following statement contains a magic number: switch (desired) {                 // Dark colors                 case ConsoleColor.Black: return 0;                 case ConsoleColor.DarkRed: return 1;                 case ConsoleColor.DarkGreen: return 2;                 case ConsoleColor.DarkYellow: return 3;                 case ConsoleColor.DarkBlue: return 4;                 case ConsoleColor.DarkMagenta: return 5;                 case ConsoleColor.DarkCyan: return 6;                 case ConsoleColor.Gray: return 7;                  // Light colors                 case ConsoleColor.DarkGray: light = true; return 0;                 case ConsoleColor.Red: light = true; return 1;                 case ConsoleColor.Green: light = true; return 2;                 case ConsoleColor.Yellow: light = true; return 3;                 case ConsoleColor.Blue: light = true; return 4;                 case ConsoleColor.Magenta: light = true; return 5;                 case ConsoleColor.Cyan: light = true; return 6;                 case ConsoleColor.White: default: light = true; return 7;             }
Magic Number,Vernacular,ConsoleCrayon,C:\research\architectureSmells\repos\rdio_vernacular\Vernacular.Tool\Vernacular.Tool\ConsoleCrayon.cs,TranslateColor,The following statement contains a magic number: switch (desired) {                 // Dark colors                 case ConsoleColor.Black: return 0;                 case ConsoleColor.DarkRed: return 1;                 case ConsoleColor.DarkGreen: return 2;                 case ConsoleColor.DarkYellow: return 3;                 case ConsoleColor.DarkBlue: return 4;                 case ConsoleColor.DarkMagenta: return 5;                 case ConsoleColor.DarkCyan: return 6;                 case ConsoleColor.Gray: return 7;                  // Light colors                 case ConsoleColor.DarkGray: light = true; return 0;                 case ConsoleColor.Red: light = true; return 1;                 case ConsoleColor.Green: light = true; return 2;                 case ConsoleColor.Yellow: light = true; return 3;                 case ConsoleColor.Blue: light = true; return 4;                 case ConsoleColor.Magenta: light = true; return 5;                 case ConsoleColor.Cyan: light = true; return 6;                 case ConsoleColor.White: default: light = true; return 7;             }
Magic Number,Vernacular,ConsoleCrayon,C:\research\architectureSmells\repos\rdio_vernacular\Vernacular.Tool\Vernacular.Tool\ConsoleCrayon.cs,TranslateColor,The following statement contains a magic number: switch (desired) {                 // Dark colors                 case ConsoleColor.Black: return 0;                 case ConsoleColor.DarkRed: return 1;                 case ConsoleColor.DarkGreen: return 2;                 case ConsoleColor.DarkYellow: return 3;                 case ConsoleColor.DarkBlue: return 4;                 case ConsoleColor.DarkMagenta: return 5;                 case ConsoleColor.DarkCyan: return 6;                 case ConsoleColor.Gray: return 7;                  // Light colors                 case ConsoleColor.DarkGray: light = true; return 0;                 case ConsoleColor.Red: light = true; return 1;                 case ConsoleColor.Green: light = true; return 2;                 case ConsoleColor.Yellow: light = true; return 3;                 case ConsoleColor.Blue: light = true; return 4;                 case ConsoleColor.Magenta: light = true; return 5;                 case ConsoleColor.Cyan: light = true; return 6;                 case ConsoleColor.White: default: light = true; return 7;             }
Magic Number,Vernacular,ConsoleCrayon,C:\research\architectureSmells\repos\rdio_vernacular\Vernacular.Tool\Vernacular.Tool\ConsoleCrayon.cs,TranslateColor,The following statement contains a magic number: switch (desired) {                 // Dark colors                 case ConsoleColor.Black: return 0;                 case ConsoleColor.DarkRed: return 1;                 case ConsoleColor.DarkGreen: return 2;                 case ConsoleColor.DarkYellow: return 3;                 case ConsoleColor.DarkBlue: return 4;                 case ConsoleColor.DarkMagenta: return 5;                 case ConsoleColor.DarkCyan: return 6;                 case ConsoleColor.Gray: return 7;                  // Light colors                 case ConsoleColor.DarkGray: light = true; return 0;                 case ConsoleColor.Red: light = true; return 1;                 case ConsoleColor.Green: light = true; return 2;                 case ConsoleColor.Yellow: light = true; return 3;                 case ConsoleColor.Blue: light = true; return 4;                 case ConsoleColor.Magenta: light = true; return 5;                 case ConsoleColor.Cyan: light = true; return 6;                 case ConsoleColor.White: default: light = true; return 7;             }
Magic Number,Vernacular,ConsoleCrayon,C:\research\architectureSmells\repos\rdio_vernacular\Vernacular.Tool\Vernacular.Tool\ConsoleCrayon.cs,GetAnsiColorControlCode,The following statement contains a magic number: return GetAnsi (TranslateColor (color' out light) + (isForeground ? 30 : 40) + (light ? 60 : 0));
Magic Number,Vernacular,ConsoleCrayon,C:\research\architectureSmells\repos\rdio_vernacular\Vernacular.Tool\Vernacular.Tool\ConsoleCrayon.cs,GetAnsiColorControlCode,The following statement contains a magic number: return GetAnsi (TranslateColor (color' out light) + (isForeground ? 30 : 40) + (light ? 60 : 0));
Magic Number,Vernacular,ConsoleCrayon,C:\research\architectureSmells\repos\rdio_vernacular\Vernacular.Tool\Vernacular.Tool\ConsoleCrayon.cs,GetAnsiColorControlCode,The following statement contains a magic number: return GetAnsi (TranslateColor (color' out light) + (isForeground ? 30 : 40) + (light ? 60 : 0));
Magic Number,Vernacular,ConsoleCrayon,C:\research\architectureSmells\repos\rdio_vernacular\Vernacular.Tool\Vernacular.Tool\ConsoleCrayon.cs,DetectXtermColors,The following statement contains a magic number: xterm_colors = _xterm_colors && isatty (1) && isatty (2);
Magic Number,Vernacular,ConsoleCrayon,C:\research\architectureSmells\repos\rdio_vernacular\Vernacular.Tool\Vernacular.Tool\ConsoleCrayon.cs,TestAnsi,The following statement contains a magic number: Console.Write ("{0}{1}: {2}{3} :: {4}{1}: {5}{3}"' color_code_fg' color' color_code_fg.Substring (2)'                     GetAnsi (0)' color_code_bg' color_code_bg.Substring (2));
Magic Number,Vernacular,ConsoleCrayon,C:\research\architectureSmells\repos\rdio_vernacular\Vernacular.Tool\Vernacular.Tool\ConsoleCrayon.cs,TestAnsi,The following statement contains a magic number: Console.Write ("{0}{1}: {2}{3} :: {4}{1}: {5}{3}"' color_code_fg' color' color_code_fg.Substring (2)'                     GetAnsi (0)' color_code_bg' color_code_bg.Substring (2));
Missing Default,Mono.Options,OptionSet,C:\research\architectureSmells\repos\rdio_vernacular\Vernacular.Tool\Mono.Options\Options.cs,Parse,The following switch statement is missing a default case: switch (p.OptionValueType) { 					case OptionValueType.None: 						c.OptionValues.Add (n); 						c.Option.Invoke (c); 						break; 					case OptionValueType.Optional: 					case OptionValueType.Required:  						ParseValue (v' c); 						break; 				}
Missing Default,Vernacular.Parsers,AssemblyParser,C:\research\architectureSmells\repos\rdio_vernacular\Vernacular.Tool\Vernacular.Parsers\AssemblyParser.cs,GenerateLocalizedStrings,The following switch statement is missing a default case: switch (param.Key) {                     case "comment":                         neutral.DeveloperComments = param.Value;                         masculine.DeveloperComments = param.Value;                         feminine.DeveloperComments = param.Value;                         break;                     case "message":                     case "singularMessage":                         if (gendered) {                             masculine.UntranslatedSingularValue = param.Value;                             feminine.UntranslatedSingularValue = param.Value;                         }                          neutral.UntranslatedSingularValue = param.Value;                         break;                     case "pluralMessage":                         if (gendered) {                             masculine.UntranslatedPluralValue = param.Value;                             feminine.UntranslatedPluralValue = param.Value;                         }                          neutral.UntranslatedPluralValue = param.Value;                         break;                     case "masculineMessage":                     case "singularMasculineMessage":                         masculine.UntranslatedSingularValue = param.Value;                         break;                     case "pluralMasculineMessage":                         masculine.UntranslatedPluralValue = param.Value;                         break;                     case "feminineMessage":                     case "singularFeminineMessage":                         feminine.UntranslatedSingularValue = param.Value;                         break;                     case "pluralFeminineMessage":                         feminine.UntranslatedPluralValue = param.Value;                         break;                 }
Missing Default,Vernacular.Parsers,XamlParser,C:\research\architectureSmells\repos\rdio_vernacular\Vernacular.Tool\Vernacular.Parsers\XamlParser.cs,Parse,The following switch statement is missing a default case: switch (name) {                             case "Text": // only valid when in_app_bar is true                             case "Catalog.Message":                                 var value = reader.Value;                                 is_binding = IsBinding (value);                                 localized_string.UntranslatedSingularValue = Unescape (value);                                 AddReference (localized_string' reader' xamlPath);                                 break;                             case "Catalog.PluralMessage":                                 localized_string.UntranslatedPluralValue = Unescape (reader.Value);                                 break;                             case "Catalog.Comment":                                 localized_string.DeveloperComments = reader.Value;                                 break;                             case "Catalog.ToolTip":                                 // Here we want to yield a new string directly since                                 // this could be mixed with other Catalog attributes                                 // on the element (e.g. two separate localized strings                                 // could be returned for the element)                                 yield return AddReference (new LocalizedString {                                     UntranslatedSingularValue = Unescape (reader.Value)                                 }' reader' xamlPath);                                 break;                         }
Missing Default,Vernacular.Parsers,PoParser,C:\research\architectureSmells\repos\rdio_vernacular\Vernacular.Tool\Vernacular.Parsers\PoParser.cs,ParsePoMessageUnit,The following switch statement is missing a default case: switch (message.Type) {                     case MessageType.SingularIdentifier:                         untranslated_singular_value = message.Value;                         break;                     case MessageType.PluralIdentifier:                         untranslated_plural_value = message.Value;                         break;                     case MessageType.SingularString:                     case MessageType.PluralString:                         translated_values.Insert (message.PluralOrder' message.Value);                         break;                     case MessageType.Context:                         context = message.Value.Trim ();                         break;                 }
Missing Default,Vernacular.Parsers,PoParser,C:\research\architectureSmells\repos\rdio_vernacular\Vernacular.Tool\Vernacular.Parsers\PoParser.cs,ParsePoMessageUnit,The following switch statement is missing a default case: switch (comment.Type) {                     case CommentType.Extracted:                         developer_comments_builder.Append (comment.Value.Trim ());                         developer_comments_builder.Append ('\n');                         break;                     case CommentType.Translator:                         translator_comments_builder.Append (comment.Value.Trim ());                         translator_comments_builder.Append ('\n');                         break;                     case CommentType.Reference:                         references_builder.Append (comment.Value.Trim ());                         references_builder.Append (' ');                         break;                     case CommentType.Flag:                         flags_builder.Append (comment.Value.Trim ());                         flags_builder.Append (''');                         break;                 }
Missing Default,Vernacular,ConsoleCrayon,C:\research\architectureSmells\repos\rdio_vernacular\Vernacular.Tool\Vernacular.Tool\ConsoleCrayon.cs,DetectXtermColors,The following switch statement is missing a default case: switch (Environment.GetEnvironmentVariable ("TERM")) {                 case "xterm":                 case "rxvt":                 case "rxvt-unicode":                     if (Environment.GetEnvironmentVariable ("COLORTERM") != null) {                         _xterm_colors = true;                     }                     break;                 case "xterm-color":                     _xterm_colors = true;                     break;             }
