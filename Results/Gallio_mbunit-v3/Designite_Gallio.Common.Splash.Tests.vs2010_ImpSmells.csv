Implementation smell,Namespace,Class,File,Method,Description
Magic Number,Gallio.Common.Splash.Tests,PixelTabStopRulerTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Common\Gallio.Common.Splash.Tests\PixelTabStopRulerTest.cs,Constructor_WhenPixelsPerTabStopIsNegative_Throws,The following statement contains a magic number: Assert.Throws<ArgumentOutOfRangeException>(() => new PixelTabStopRuler(-1' 10));
Magic Number,Gallio.Common.Splash.Tests,PixelTabStopRulerTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Common\Gallio.Common.Splash.Tests\PixelTabStopRulerTest.cs,Constructor_WhenMinimumTabWidthIsNegative_Throws,The following statement contains a magic number: Assert.Throws<ArgumentOutOfRangeException>(() => new PixelTabStopRuler(10' -1));
Magic Number,Gallio.Common.Splash.Tests,PixelTabStopRulerTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Common\Gallio.Common.Splash.Tests\PixelTabStopRulerTest.cs,AdvanceToNextTabStop_WhenPixelsPerTabStopIsZero_AdvancesMinimumWidth,The following statement contains a magic number: var ruler = new PixelTabStopRuler(0' 10);
Magic Number,Gallio.Common.Splash.Tests,PixelTabStopRulerTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Common\Gallio.Common.Splash.Tests\PixelTabStopRulerTest.cs,AdvanceToNextTabStop_WhenPixelsPerTabStopIsZero_AdvancesMinimumWidth,The following statement contains a magic number: Assert.AreEqual(52' ruler.AdvanceToNextTabStop(42));
Magic Number,Gallio.Common.Splash.Tests,PixelTabStopRulerTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Common\Gallio.Common.Splash.Tests\PixelTabStopRulerTest.cs,AdvanceToNextTabStop_WhenPixelsPerTabStopIsZero_AdvancesMinimumWidth,The following statement contains a magic number: Assert.AreEqual(52' ruler.AdvanceToNextTabStop(42));
Magic Number,Gallio.Common.Splash.Tests,PixelTabStopRulerTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Common\Gallio.Common.Splash.Tests\PixelTabStopRulerTest.cs,AdvanceToNextTabStop_WhenPixelsPerTabStopIsPositiveAndAtTabStop_AdvancesWholeWidth,The following statement contains a magic number: int xShift = negativeX ? -120 : 0;
Magic Number,Gallio.Common.Splash.Tests,PixelTabStopRulerTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Common\Gallio.Common.Splash.Tests\PixelTabStopRulerTest.cs,AdvanceToNextTabStop_WhenPixelsPerTabStopIsPositiveAndAtTabStop_AdvancesWholeWidth,The following statement contains a magic number: var ruler = new PixelTabStopRuler(30' 10);
Magic Number,Gallio.Common.Splash.Tests,PixelTabStopRulerTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Common\Gallio.Common.Splash.Tests\PixelTabStopRulerTest.cs,AdvanceToNextTabStop_WhenPixelsPerTabStopIsPositiveAndAtTabStop_AdvancesWholeWidth,The following statement contains a magic number: var ruler = new PixelTabStopRuler(30' 10);
Magic Number,Gallio.Common.Splash.Tests,PixelTabStopRulerTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Common\Gallio.Common.Splash.Tests\PixelTabStopRulerTest.cs,AdvanceToNextTabStop_WhenPixelsPerTabStopIsPositiveAndAtTabStop_AdvancesWholeWidth,The following statement contains a magic number: Assert.AreEqual(xShift + 60' ruler.AdvanceToNextTabStop(xShift + 30));
Magic Number,Gallio.Common.Splash.Tests,PixelTabStopRulerTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Common\Gallio.Common.Splash.Tests\PixelTabStopRulerTest.cs,AdvanceToNextTabStop_WhenPixelsPerTabStopIsPositiveAndAtTabStop_AdvancesWholeWidth,The following statement contains a magic number: Assert.AreEqual(xShift + 60' ruler.AdvanceToNextTabStop(xShift + 30));
Magic Number,Gallio.Common.Splash.Tests,PixelTabStopRulerTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Common\Gallio.Common.Splash.Tests\PixelTabStopRulerTest.cs,AdvanceToNextTabStop_WhenPixelsPerTabStopIsPositiveAndPastTabStopAndMoreThanMinimumWidthAway_AdvancesOneTabStop,The following statement contains a magic number: int xShift = negativeX ? -120 : 0;
Magic Number,Gallio.Common.Splash.Tests,PixelTabStopRulerTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Common\Gallio.Common.Splash.Tests\PixelTabStopRulerTest.cs,AdvanceToNextTabStop_WhenPixelsPerTabStopIsPositiveAndPastTabStopAndMoreThanMinimumWidthAway_AdvancesOneTabStop,The following statement contains a magic number: var ruler = new PixelTabStopRuler(30' 10);
Magic Number,Gallio.Common.Splash.Tests,PixelTabStopRulerTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Common\Gallio.Common.Splash.Tests\PixelTabStopRulerTest.cs,AdvanceToNextTabStop_WhenPixelsPerTabStopIsPositiveAndPastTabStopAndMoreThanMinimumWidthAway_AdvancesOneTabStop,The following statement contains a magic number: var ruler = new PixelTabStopRuler(30' 10);
Magic Number,Gallio.Common.Splash.Tests,PixelTabStopRulerTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Common\Gallio.Common.Splash.Tests\PixelTabStopRulerTest.cs,AdvanceToNextTabStop_WhenPixelsPerTabStopIsPositiveAndPastTabStopAndMoreThanMinimumWidthAway_AdvancesOneTabStop,The following statement contains a magic number: Assert.AreEqual(xShift + 60' ruler.AdvanceToNextTabStop(xShift + 35));
Magic Number,Gallio.Common.Splash.Tests,PixelTabStopRulerTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Common\Gallio.Common.Splash.Tests\PixelTabStopRulerTest.cs,AdvanceToNextTabStop_WhenPixelsPerTabStopIsPositiveAndPastTabStopAndMoreThanMinimumWidthAway_AdvancesOneTabStop,The following statement contains a magic number: Assert.AreEqual(xShift + 60' ruler.AdvanceToNextTabStop(xShift + 35));
Magic Number,Gallio.Common.Splash.Tests,PixelTabStopRulerTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Common\Gallio.Common.Splash.Tests\PixelTabStopRulerTest.cs,AdvanceToNextTabStop_WhenPixelsPerTabStopIsPositiveAndPastTabStopAndExactlyMinimumWidthAway_AdvancesOneTabStop,The following statement contains a magic number: int xShift = negativeX ? -120 : 0;
Magic Number,Gallio.Common.Splash.Tests,PixelTabStopRulerTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Common\Gallio.Common.Splash.Tests\PixelTabStopRulerTest.cs,AdvanceToNextTabStop_WhenPixelsPerTabStopIsPositiveAndPastTabStopAndExactlyMinimumWidthAway_AdvancesOneTabStop,The following statement contains a magic number: var ruler = new PixelTabStopRuler(30' 10);
Magic Number,Gallio.Common.Splash.Tests,PixelTabStopRulerTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Common\Gallio.Common.Splash.Tests\PixelTabStopRulerTest.cs,AdvanceToNextTabStop_WhenPixelsPerTabStopIsPositiveAndPastTabStopAndExactlyMinimumWidthAway_AdvancesOneTabStop,The following statement contains a magic number: var ruler = new PixelTabStopRuler(30' 10);
Magic Number,Gallio.Common.Splash.Tests,PixelTabStopRulerTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Common\Gallio.Common.Splash.Tests\PixelTabStopRulerTest.cs,AdvanceToNextTabStop_WhenPixelsPerTabStopIsPositiveAndPastTabStopAndExactlyMinimumWidthAway_AdvancesOneTabStop,The following statement contains a magic number: Assert.AreEqual(xShift + 60' ruler.AdvanceToNextTabStop(xShift + 50));
Magic Number,Gallio.Common.Splash.Tests,PixelTabStopRulerTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Common\Gallio.Common.Splash.Tests\PixelTabStopRulerTest.cs,AdvanceToNextTabStop_WhenPixelsPerTabStopIsPositiveAndPastTabStopAndExactlyMinimumWidthAway_AdvancesOneTabStop,The following statement contains a magic number: Assert.AreEqual(xShift + 60' ruler.AdvanceToNextTabStop(xShift + 50));
Magic Number,Gallio.Common.Splash.Tests,PixelTabStopRulerTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Common\Gallio.Common.Splash.Tests\PixelTabStopRulerTest.cs,AdvanceToNextTabStop_WhenPixelsPerTabStopIsPositiveAndPastTabStopButLessThanMinimumWidthAway_AdvancesAnExtraTabStop,The following statement contains a magic number: int xShift = negativeX ? -120 : 0;
Magic Number,Gallio.Common.Splash.Tests,PixelTabStopRulerTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Common\Gallio.Common.Splash.Tests\PixelTabStopRulerTest.cs,AdvanceToNextTabStop_WhenPixelsPerTabStopIsPositiveAndPastTabStopButLessThanMinimumWidthAway_AdvancesAnExtraTabStop,The following statement contains a magic number: var ruler = new PixelTabStopRuler(30' 10);
Magic Number,Gallio.Common.Splash.Tests,PixelTabStopRulerTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Common\Gallio.Common.Splash.Tests\PixelTabStopRulerTest.cs,AdvanceToNextTabStop_WhenPixelsPerTabStopIsPositiveAndPastTabStopButLessThanMinimumWidthAway_AdvancesAnExtraTabStop,The following statement contains a magic number: var ruler = new PixelTabStopRuler(30' 10);
Magic Number,Gallio.Common.Splash.Tests,PixelTabStopRulerTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Common\Gallio.Common.Splash.Tests\PixelTabStopRulerTest.cs,AdvanceToNextTabStop_WhenPixelsPerTabStopIsPositiveAndPastTabStopButLessThanMinimumWidthAway_AdvancesAnExtraTabStop,The following statement contains a magic number: Assert.AreEqual(xShift + 90' ruler.AdvanceToNextTabStop(xShift + 55));
Magic Number,Gallio.Common.Splash.Tests,PixelTabStopRulerTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Common\Gallio.Common.Splash.Tests\PixelTabStopRulerTest.cs,AdvanceToNextTabStop_WhenPixelsPerTabStopIsPositiveAndPastTabStopButLessThanMinimumWidthAway_AdvancesAnExtraTabStop,The following statement contains a magic number: Assert.AreEqual(xShift + 90' ruler.AdvanceToNextTabStop(xShift + 55));
Magic Number,Gallio.Common.Splash.Tests,SnapPositionTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Common\Gallio.Common.Splash.Tests\SnapPositionTest.cs,Constructor_SetsProperties,The following statement contains a magic number: var snapPosition = new SnapPosition(SnapKind.Leading' 10);
Magic Number,Gallio.Common.Splash.Tests,SnapPositionTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Common\Gallio.Common.Splash.Tests\SnapPositionTest.cs,Constructor_SetsProperties,The following statement contains a magic number: Assert.AreEqual(10' snapPosition.CharIndex);
Magic Number,Gallio.Common.Splash.Tests,SplashDocumentTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Common\Gallio.Common.Splash.Tests\SplashDocumentTest.cs,GetTextRange_WhenStartIndexPlusLengthExceedsDocument_Throws,The following statement contains a magic number: Assert.Throws<ArgumentOutOfRangeException>(() => document.GetTextRange(10' 3));
Magic Number,Gallio.Common.Splash.Tests,SplashDocumentTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Common\Gallio.Common.Splash.Tests\SplashDocumentTest.cs,GetTextRange_WhenStartIndexPlusLengthExceedsDocument_Throws,The following statement contains a magic number: Assert.Throws<ArgumentOutOfRangeException>(() => document.GetTextRange(10' 3));
Magic Number,Gallio.Common.Splash.Tests,SplashDocumentTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Common\Gallio.Common.Splash.Tests\SplashDocumentTest.cs,GetStyleAtIndex_WhenIndexBeyondDocument_Throws,The following statement contains a magic number: Assert.Throws<ArgumentOutOfRangeException>(() => document.GetStyleAtIndex(12));
Magic Number,Gallio.Common.Splash.Tests,SplashDocumentTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Common\Gallio.Common.Splash.Tests\SplashDocumentTest.cs,GetStyleAtIndex_WhenIndexValid_ReturnsStyleAtIndex,The following statement contains a magic number: Assert.Multiple(() =>              {                  for (int i = 0; i < 5; i++)                      Assert.AreEqual(Style.Default' document.GetStyleAtIndex(i));                  for (int i = 5; i < 9; i++)                      Assert.AreEqual(style' document.GetStyleAtIndex(i));                  for (int i = 9; i < 12; i++)                      Assert.AreEqual(Style.Default' document.GetStyleAtIndex(i));              });
Magic Number,Gallio.Common.Splash.Tests,SplashDocumentTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Common\Gallio.Common.Splash.Tests\SplashDocumentTest.cs,GetStyleAtIndex_WhenIndexValid_ReturnsStyleAtIndex,The following statement contains a magic number: Assert.Multiple(() =>              {                  for (int i = 0; i < 5; i++)                      Assert.AreEqual(Style.Default' document.GetStyleAtIndex(i));                  for (int i = 5; i < 9; i++)                      Assert.AreEqual(style' document.GetStyleAtIndex(i));                  for (int i = 9; i < 12; i++)                      Assert.AreEqual(Style.Default' document.GetStyleAtIndex(i));              });
Magic Number,Gallio.Common.Splash.Tests,SplashDocumentTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Common\Gallio.Common.Splash.Tests\SplashDocumentTest.cs,GetStyleAtIndex_WhenIndexValid_ReturnsStyleAtIndex,The following statement contains a magic number: Assert.Multiple(() =>              {                  for (int i = 0; i < 5; i++)                      Assert.AreEqual(Style.Default' document.GetStyleAtIndex(i));                  for (int i = 5; i < 9; i++)                      Assert.AreEqual(style' document.GetStyleAtIndex(i));                  for (int i = 9; i < 12; i++)                      Assert.AreEqual(Style.Default' document.GetStyleAtIndex(i));              });
Magic Number,Gallio.Common.Splash.Tests,SplashDocumentTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Common\Gallio.Common.Splash.Tests\SplashDocumentTest.cs,GetStyleAtIndex_WhenIndexValid_ReturnsStyleAtIndex,The following statement contains a magic number: Assert.Multiple(() =>              {                  for (int i = 0; i < 5; i++)                      Assert.AreEqual(Style.Default' document.GetStyleAtIndex(i));                  for (int i = 5; i < 9; i++)                      Assert.AreEqual(style' document.GetStyleAtIndex(i));                  for (int i = 9; i < 12; i++)                      Assert.AreEqual(Style.Default' document.GetStyleAtIndex(i));              });
Magic Number,Gallio.Common.Splash.Tests,SplashDocumentTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Common\Gallio.Common.Splash.Tests\SplashDocumentTest.cs,GetStyleAtIndex_WhenIndexValid_ReturnsStyleAtIndex,The following statement contains a magic number: Assert.Multiple(() =>              {                  for (int i = 0; i < 5; i++)                      Assert.AreEqual(Style.Default' document.GetStyleAtIndex(i));                  for (int i = 5; i < 9; i++)                      Assert.AreEqual(style' document.GetStyleAtIndex(i));                  for (int i = 9; i < 12; i++)                      Assert.AreEqual(Style.Default' document.GetStyleAtIndex(i));              });
Magic Number,Gallio.Common.Splash.Tests,SplashDocumentTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Common\Gallio.Common.Splash.Tests\SplashDocumentTest.cs,TryGetAnnotationAtIndex_WhenIndexBeyondDocument_Throws,The following statement contains a magic number: Assert.Throws<ArgumentOutOfRangeException>(() => document.TryGetAnnotationAtIndex(key' 12' out value));
Magic Number,Gallio.Common.Splash.Tests,SplashDocumentTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Common\Gallio.Common.Splash.Tests\SplashDocumentTest.cs,TryGetAnnotationAtIndex_WhenIndexValidAndAtLeastOneAnnotation_ReturnsAnnotationAtIndex,The following statement contains a magic number: Assert.Multiple(() =>              {                  string value;                  for (int i = 0; i < 5; i++)                  {                      Assert.IsFalse(document.TryGetAnnotationAtIndex(key' i' out value));                      Assert.IsNull(value);                  }                  for (int i = 5; i < 10; i++)                  {                      Assert.IsTrue(document.TryGetAnnotationAtIndex(key' i' out value));                      Assert.AreEqual("a"' value);                  }                  for (int i = 10; i < 14; i++)                  {                      Assert.IsTrue(document.TryGetAnnotationAtIndex(key' i' out value));                      Assert.AreEqual("b"' value);                  }                  for (int i = 14; i < 17; i++)                  {                      Assert.IsFalse(document.TryGetAnnotationAtIndex(key' i' out value));                      Assert.IsNull(value);                  }              });
Magic Number,Gallio.Common.Splash.Tests,SplashDocumentTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Common\Gallio.Common.Splash.Tests\SplashDocumentTest.cs,TryGetAnnotationAtIndex_WhenIndexValidAndAtLeastOneAnnotation_ReturnsAnnotationAtIndex,The following statement contains a magic number: Assert.Multiple(() =>              {                  string value;                  for (int i = 0; i < 5; i++)                  {                      Assert.IsFalse(document.TryGetAnnotationAtIndex(key' i' out value));                      Assert.IsNull(value);                  }                  for (int i = 5; i < 10; i++)                  {                      Assert.IsTrue(document.TryGetAnnotationAtIndex(key' i' out value));                      Assert.AreEqual("a"' value);                  }                  for (int i = 10; i < 14; i++)                  {                      Assert.IsTrue(document.TryGetAnnotationAtIndex(key' i' out value));                      Assert.AreEqual("b"' value);                  }                  for (int i = 14; i < 17; i++)                  {                      Assert.IsFalse(document.TryGetAnnotationAtIndex(key' i' out value));                      Assert.IsNull(value);                  }              });
Magic Number,Gallio.Common.Splash.Tests,SplashDocumentTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Common\Gallio.Common.Splash.Tests\SplashDocumentTest.cs,TryGetAnnotationAtIndex_WhenIndexValidAndAtLeastOneAnnotation_ReturnsAnnotationAtIndex,The following statement contains a magic number: Assert.Multiple(() =>              {                  string value;                  for (int i = 0; i < 5; i++)                  {                      Assert.IsFalse(document.TryGetAnnotationAtIndex(key' i' out value));                      Assert.IsNull(value);                  }                  for (int i = 5; i < 10; i++)                  {                      Assert.IsTrue(document.TryGetAnnotationAtIndex(key' i' out value));                      Assert.AreEqual("a"' value);                  }                  for (int i = 10; i < 14; i++)                  {                      Assert.IsTrue(document.TryGetAnnotationAtIndex(key' i' out value));                      Assert.AreEqual("b"' value);                  }                  for (int i = 14; i < 17; i++)                  {                      Assert.IsFalse(document.TryGetAnnotationAtIndex(key' i' out value));                      Assert.IsNull(value);                  }              });
Magic Number,Gallio.Common.Splash.Tests,SplashDocumentTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Common\Gallio.Common.Splash.Tests\SplashDocumentTest.cs,TryGetAnnotationAtIndex_WhenIndexValidAndAtLeastOneAnnotation_ReturnsAnnotationAtIndex,The following statement contains a magic number: Assert.Multiple(() =>              {                  string value;                  for (int i = 0; i < 5; i++)                  {                      Assert.IsFalse(document.TryGetAnnotationAtIndex(key' i' out value));                      Assert.IsNull(value);                  }                  for (int i = 5; i < 10; i++)                  {                      Assert.IsTrue(document.TryGetAnnotationAtIndex(key' i' out value));                      Assert.AreEqual("a"' value);                  }                  for (int i = 10; i < 14; i++)                  {                      Assert.IsTrue(document.TryGetAnnotationAtIndex(key' i' out value));                      Assert.AreEqual("b"' value);                  }                  for (int i = 14; i < 17; i++)                  {                      Assert.IsFalse(document.TryGetAnnotationAtIndex(key' i' out value));                      Assert.IsNull(value);                  }              });
Magic Number,Gallio.Common.Splash.Tests,SplashDocumentTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Common\Gallio.Common.Splash.Tests\SplashDocumentTest.cs,TryGetAnnotationAtIndex_WhenIndexValidAndAtLeastOneAnnotation_ReturnsAnnotationAtIndex,The following statement contains a magic number: Assert.Multiple(() =>              {                  string value;                  for (int i = 0; i < 5; i++)                  {                      Assert.IsFalse(document.TryGetAnnotationAtIndex(key' i' out value));                      Assert.IsNull(value);                  }                  for (int i = 5; i < 10; i++)                  {                      Assert.IsTrue(document.TryGetAnnotationAtIndex(key' i' out value));                      Assert.AreEqual("a"' value);                  }                  for (int i = 10; i < 14; i++)                  {                      Assert.IsTrue(document.TryGetAnnotationAtIndex(key' i' out value));                      Assert.AreEqual("b"' value);                  }                  for (int i = 14; i < 17; i++)                  {                      Assert.IsFalse(document.TryGetAnnotationAtIndex(key' i' out value));                      Assert.IsNull(value);                  }              });
Magic Number,Gallio.Common.Splash.Tests,SplashDocumentTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Common\Gallio.Common.Splash.Tests\SplashDocumentTest.cs,TryGetAnnotationAtIndex_WhenIndexValidAndAtLeastOneAnnotation_ReturnsAnnotationAtIndex,The following statement contains a magic number: Assert.Multiple(() =>              {                  string value;                  for (int i = 0; i < 5; i++)                  {                      Assert.IsFalse(document.TryGetAnnotationAtIndex(key' i' out value));                      Assert.IsNull(value);                  }                  for (int i = 5; i < 10; i++)                  {                      Assert.IsTrue(document.TryGetAnnotationAtIndex(key' i' out value));                      Assert.AreEqual("a"' value);                  }                  for (int i = 10; i < 14; i++)                  {                      Assert.IsTrue(document.TryGetAnnotationAtIndex(key' i' out value));                      Assert.AreEqual("b"' value);                  }                  for (int i = 14; i < 17; i++)                  {                      Assert.IsFalse(document.TryGetAnnotationAtIndex(key' i' out value));                      Assert.IsNull(value);                  }              });
Magic Number,Gallio.Common.Splash.Tests,SplashDocumentTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Common\Gallio.Common.Splash.Tests\SplashDocumentTest.cs,TryGetAnnotationAtIndex_WhenIndexValidAndAtLeastOneAnnotation_ReturnsAnnotationAtIndex,The following statement contains a magic number: Assert.Multiple(() =>              {                  string value;                  for (int i = 0; i < 5; i++)                  {                      Assert.IsFalse(document.TryGetAnnotationAtIndex(key' i' out value));                      Assert.IsNull(value);                  }                  for (int i = 5; i < 10; i++)                  {                      Assert.IsTrue(document.TryGetAnnotationAtIndex(key' i' out value));                      Assert.AreEqual("a"' value);                  }                  for (int i = 10; i < 14; i++)                  {                      Assert.IsTrue(document.TryGetAnnotationAtIndex(key' i' out value));                      Assert.AreEqual("b"' value);                  }                  for (int i = 14; i < 17; i++)                  {                      Assert.IsFalse(document.TryGetAnnotationAtIndex(key' i' out value));                      Assert.IsNull(value);                  }              });
Magic Number,Gallio.Common.Splash.Tests,SplashDocumentTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Common\Gallio.Common.Splash.Tests\SplashDocumentTest.cs,GetObjectAtIndex_WhenIndexBeyondDocument_Throws,The following statement contains a magic number: Assert.Throws<ArgumentOutOfRangeException>(() => document.GetObjectAtIndex(12));
Magic Number,Gallio.Common.Splash.Tests,SplashDocumentTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Common\Gallio.Common.Splash.Tests\SplashDocumentTest.cs,GetObjectAtIndex_WhenIndexValid_ReturnsEmbeddedObject,The following statement contains a magic number: var obj = new EmbeddedImage(new Bitmap(16' 16));
Magic Number,Gallio.Common.Splash.Tests,SplashDocumentTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Common\Gallio.Common.Splash.Tests\SplashDocumentTest.cs,GetObjectAtIndex_WhenIndexValid_ReturnsEmbeddedObject,The following statement contains a magic number: var obj = new EmbeddedImage(new Bitmap(16' 16));
Magic Number,Gallio.Common.Splash.Tests,SplashDocumentTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Common\Gallio.Common.Splash.Tests\SplashDocumentTest.cs,GetObjectAtIndex_WhenIndexValid_ReturnsEmbeddedObject,The following statement contains a magic number: Assert.Multiple(() =>              {                  for (int i = 0; i < 3; i++)                      Assert.IsNull(document.GetObjectAtIndex(i));                  Assert.AreEqual(obj' document.GetObjectAtIndex(3));                  for (int i = 4; i < 7; i++)                      Assert.IsNull(document.GetObjectAtIndex(i));              });
Magic Number,Gallio.Common.Splash.Tests,SplashDocumentTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Common\Gallio.Common.Splash.Tests\SplashDocumentTest.cs,GetObjectAtIndex_WhenIndexValid_ReturnsEmbeddedObject,The following statement contains a magic number: Assert.Multiple(() =>              {                  for (int i = 0; i < 3; i++)                      Assert.IsNull(document.GetObjectAtIndex(i));                  Assert.AreEqual(obj' document.GetObjectAtIndex(3));                  for (int i = 4; i < 7; i++)                      Assert.IsNull(document.GetObjectAtIndex(i));              });
Magic Number,Gallio.Common.Splash.Tests,SplashDocumentTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Common\Gallio.Common.Splash.Tests\SplashDocumentTest.cs,GetObjectAtIndex_WhenIndexValid_ReturnsEmbeddedObject,The following statement contains a magic number: Assert.Multiple(() =>              {                  for (int i = 0; i < 3; i++)                      Assert.IsNull(document.GetObjectAtIndex(i));                  Assert.AreEqual(obj' document.GetObjectAtIndex(3));                  for (int i = 4; i < 7; i++)                      Assert.IsNull(document.GetObjectAtIndex(i));              });
Magic Number,Gallio.Common.Splash.Tests,SplashDocumentTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Common\Gallio.Common.Splash.Tests\SplashDocumentTest.cs,GetObjectAtIndex_WhenIndexValid_ReturnsEmbeddedObject,The following statement contains a magic number: Assert.Multiple(() =>              {                  for (int i = 0; i < 3; i++)                      Assert.IsNull(document.GetObjectAtIndex(i));                  Assert.AreEqual(obj' document.GetObjectAtIndex(3));                  for (int i = 4; i < 7; i++)                      Assert.IsNull(document.GetObjectAtIndex(i));              });
Magic Number,Gallio.Common.Splash.Tests,SplashDocumentTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Common\Gallio.Common.Splash.Tests\SplashDocumentTest.cs,AppendStuff,The following statement contains a magic number: var style2 = new StyleBuilder() { LeftMargin = 10' RightMargin = 10 }.ToStyle();
Magic Number,Gallio.Common.Splash.Tests,SplashDocumentTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Common\Gallio.Common.Splash.Tests\SplashDocumentTest.cs,AppendStuff,The following statement contains a magic number: var style2 = new StyleBuilder() { LeftMargin = 10' RightMargin = 10 }.ToStyle();
Magic Number,Gallio.Common.Splash.Tests,SplashDocumentTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Common\Gallio.Common.Splash.Tests\SplashDocumentTest.cs,AppendStuff,The following statement contains a magic number: var embeddedObject = new EmbeddedImage(new Bitmap(16' 16));
Magic Number,Gallio.Common.Splash.Tests,SplashDocumentTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Common\Gallio.Common.Splash.Tests\SplashDocumentTest.cs,AppendStuff,The following statement contains a magic number: var embeddedObject = new EmbeddedImage(new Bitmap(16' 16));
Magic Number,Gallio.Common.Splash.Tests,SplashDocumentTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Common\Gallio.Common.Splash.Tests\SplashDocumentTest.cs,AppendStuff,The following statement contains a magic number: Assert.Multiple(() =>              {                  // Check char content.                  Assert.AreEqual("Some text' lalala.\nMore text.Tab\t.\n\n( )"' document.ToString());                    // Check style table.                  Assert.AreEqual(4' document.StyleCount);                  Assert.AreEqual(Style.Default' document.LookupStyle(0));                  Assert.AreEqual(style1' document.LookupStyle(1));                  Assert.AreEqual(style2' document.LookupStyle(2));                  Assert.AreEqual(style3' document.LookupStyle(3));                    // Check object table.                  Assert.AreEqual(1' document.ObjectCount);                  Assert.AreEqual(embeddedObject' document.LookupObject(0));                    // Check paragraph table.                  Assert.AreEqual(4' document.ParagraphCount);                  Paragraph* paragraphs = document.GetParagraphZero();                    Assert.AreEqual(0' paragraphs[0].CharIndex); // "Some text' lalala.\n"                  Assert.AreEqual(19' paragraphs[0].CharCount);                  Assert.AreEqual(0' paragraphs[0].RunIndex);                  Assert.AreEqual(1' paragraphs[0].RunCount);                    Assert.AreEqual(19' paragraphs[1].CharIndex); // "More text.Tab\t.\n"                  Assert.AreEqual(16' paragraphs[1].CharCount);                  Assert.AreEqual(1' paragraphs[1].RunIndex);                  Assert.AreEqual(4' paragraphs[1].RunCount);                    Assert.AreEqual(35' paragraphs[2].CharIndex); // "\n"                  Assert.AreEqual(1' paragraphs[2].CharCount);                  Assert.AreEqual(5' paragraphs[2].RunIndex);                  Assert.AreEqual(1' paragraphs[2].RunCount);                    Assert.AreEqual(36' paragraphs[3].CharIndex); // "( )"                  Assert.AreEqual(3' paragraphs[3].CharCount);                  Assert.AreEqual(6' paragraphs[3].RunIndex);                  Assert.AreEqual(3' paragraphs[3].RunCount);                    // Check run table.                  Assert.AreEqual(9' document.RunCount);                  Run* runs = document.GetRunZero();                    Assert.AreEqual(RunKind.Text' runs[0].RunKind); // "Some text' lalala.\n"                  Assert.AreEqual(19' runs[0].CharCount);                  Assert.AreEqual(1' runs[0].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[1].RunKind); // "More text."                  Assert.AreEqual(10' runs[1].CharCount);                  Assert.AreEqual(1' runs[1].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[2].RunKind); // "Tab"                  Assert.AreEqual(3' runs[2].CharCount);                  Assert.AreEqual(2' runs[2].StyleIndex);                    Assert.AreEqual(RunKind.Tab' runs[3].RunKind); // "\t"                  Assert.AreEqual(1' runs[3].CharCount);                  Assert.AreEqual(2' runs[3].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[4].RunKind); // ".\n"                  Assert.AreEqual(2' runs[4].CharCount);                  Assert.AreEqual(2' runs[4].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[5].RunKind); // "\n"                  Assert.AreEqual(1' runs[5].CharCount);                  Assert.AreEqual(3' runs[5].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[6].RunKind); // "("                  Assert.AreEqual(1' runs[6].CharCount);                  Assert.AreEqual(2' runs[6].StyleIndex);                    Assert.AreEqual(RunKind.Object' runs[7].RunKind); // "("                  Assert.AreEqual(1' runs[7].CharCount);                  Assert.AreEqual(2' runs[7].StyleIndex);                  Assert.AreEqual(0' runs[7].ObjectIndex);                    Assert.AreEqual(RunKind.Text' runs[8].RunKind); // ")"                  Assert.AreEqual(1' runs[8].CharCount);                  Assert.AreEqual(2' runs[8].StyleIndex);                    // Check that paragraph changed notifications were raised as needed.                  Assert.AreElementsEqual(new[] { 0' 1' 2' 2' 3' 3' 3 }' changedParagraphIndices);              });
Magic Number,Gallio.Common.Splash.Tests,SplashDocumentTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Common\Gallio.Common.Splash.Tests\SplashDocumentTest.cs,AppendStuff,The following statement contains a magic number: Assert.Multiple(() =>              {                  // Check char content.                  Assert.AreEqual("Some text' lalala.\nMore text.Tab\t.\n\n( )"' document.ToString());                    // Check style table.                  Assert.AreEqual(4' document.StyleCount);                  Assert.AreEqual(Style.Default' document.LookupStyle(0));                  Assert.AreEqual(style1' document.LookupStyle(1));                  Assert.AreEqual(style2' document.LookupStyle(2));                  Assert.AreEqual(style3' document.LookupStyle(3));                    // Check object table.                  Assert.AreEqual(1' document.ObjectCount);                  Assert.AreEqual(embeddedObject' document.LookupObject(0));                    // Check paragraph table.                  Assert.AreEqual(4' document.ParagraphCount);                  Paragraph* paragraphs = document.GetParagraphZero();                    Assert.AreEqual(0' paragraphs[0].CharIndex); // "Some text' lalala.\n"                  Assert.AreEqual(19' paragraphs[0].CharCount);                  Assert.AreEqual(0' paragraphs[0].RunIndex);                  Assert.AreEqual(1' paragraphs[0].RunCount);                    Assert.AreEqual(19' paragraphs[1].CharIndex); // "More text.Tab\t.\n"                  Assert.AreEqual(16' paragraphs[1].CharCount);                  Assert.AreEqual(1' paragraphs[1].RunIndex);                  Assert.AreEqual(4' paragraphs[1].RunCount);                    Assert.AreEqual(35' paragraphs[2].CharIndex); // "\n"                  Assert.AreEqual(1' paragraphs[2].CharCount);                  Assert.AreEqual(5' paragraphs[2].RunIndex);                  Assert.AreEqual(1' paragraphs[2].RunCount);                    Assert.AreEqual(36' paragraphs[3].CharIndex); // "( )"                  Assert.AreEqual(3' paragraphs[3].CharCount);                  Assert.AreEqual(6' paragraphs[3].RunIndex);                  Assert.AreEqual(3' paragraphs[3].RunCount);                    // Check run table.                  Assert.AreEqual(9' document.RunCount);                  Run* runs = document.GetRunZero();                    Assert.AreEqual(RunKind.Text' runs[0].RunKind); // "Some text' lalala.\n"                  Assert.AreEqual(19' runs[0].CharCount);                  Assert.AreEqual(1' runs[0].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[1].RunKind); // "More text."                  Assert.AreEqual(10' runs[1].CharCount);                  Assert.AreEqual(1' runs[1].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[2].RunKind); // "Tab"                  Assert.AreEqual(3' runs[2].CharCount);                  Assert.AreEqual(2' runs[2].StyleIndex);                    Assert.AreEqual(RunKind.Tab' runs[3].RunKind); // "\t"                  Assert.AreEqual(1' runs[3].CharCount);                  Assert.AreEqual(2' runs[3].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[4].RunKind); // ".\n"                  Assert.AreEqual(2' runs[4].CharCount);                  Assert.AreEqual(2' runs[4].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[5].RunKind); // "\n"                  Assert.AreEqual(1' runs[5].CharCount);                  Assert.AreEqual(3' runs[5].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[6].RunKind); // "("                  Assert.AreEqual(1' runs[6].CharCount);                  Assert.AreEqual(2' runs[6].StyleIndex);                    Assert.AreEqual(RunKind.Object' runs[7].RunKind); // "("                  Assert.AreEqual(1' runs[7].CharCount);                  Assert.AreEqual(2' runs[7].StyleIndex);                  Assert.AreEqual(0' runs[7].ObjectIndex);                    Assert.AreEqual(RunKind.Text' runs[8].RunKind); // ")"                  Assert.AreEqual(1' runs[8].CharCount);                  Assert.AreEqual(2' runs[8].StyleIndex);                    // Check that paragraph changed notifications were raised as needed.                  Assert.AreElementsEqual(new[] { 0' 1' 2' 2' 3' 3' 3 }' changedParagraphIndices);              });
Magic Number,Gallio.Common.Splash.Tests,SplashDocumentTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Common\Gallio.Common.Splash.Tests\SplashDocumentTest.cs,AppendStuff,The following statement contains a magic number: Assert.Multiple(() =>              {                  // Check char content.                  Assert.AreEqual("Some text' lalala.\nMore text.Tab\t.\n\n( )"' document.ToString());                    // Check style table.                  Assert.AreEqual(4' document.StyleCount);                  Assert.AreEqual(Style.Default' document.LookupStyle(0));                  Assert.AreEqual(style1' document.LookupStyle(1));                  Assert.AreEqual(style2' document.LookupStyle(2));                  Assert.AreEqual(style3' document.LookupStyle(3));                    // Check object table.                  Assert.AreEqual(1' document.ObjectCount);                  Assert.AreEqual(embeddedObject' document.LookupObject(0));                    // Check paragraph table.                  Assert.AreEqual(4' document.ParagraphCount);                  Paragraph* paragraphs = document.GetParagraphZero();                    Assert.AreEqual(0' paragraphs[0].CharIndex); // "Some text' lalala.\n"                  Assert.AreEqual(19' paragraphs[0].CharCount);                  Assert.AreEqual(0' paragraphs[0].RunIndex);                  Assert.AreEqual(1' paragraphs[0].RunCount);                    Assert.AreEqual(19' paragraphs[1].CharIndex); // "More text.Tab\t.\n"                  Assert.AreEqual(16' paragraphs[1].CharCount);                  Assert.AreEqual(1' paragraphs[1].RunIndex);                  Assert.AreEqual(4' paragraphs[1].RunCount);                    Assert.AreEqual(35' paragraphs[2].CharIndex); // "\n"                  Assert.AreEqual(1' paragraphs[2].CharCount);                  Assert.AreEqual(5' paragraphs[2].RunIndex);                  Assert.AreEqual(1' paragraphs[2].RunCount);                    Assert.AreEqual(36' paragraphs[3].CharIndex); // "( )"                  Assert.AreEqual(3' paragraphs[3].CharCount);                  Assert.AreEqual(6' paragraphs[3].RunIndex);                  Assert.AreEqual(3' paragraphs[3].RunCount);                    // Check run table.                  Assert.AreEqual(9' document.RunCount);                  Run* runs = document.GetRunZero();                    Assert.AreEqual(RunKind.Text' runs[0].RunKind); // "Some text' lalala.\n"                  Assert.AreEqual(19' runs[0].CharCount);                  Assert.AreEqual(1' runs[0].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[1].RunKind); // "More text."                  Assert.AreEqual(10' runs[1].CharCount);                  Assert.AreEqual(1' runs[1].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[2].RunKind); // "Tab"                  Assert.AreEqual(3' runs[2].CharCount);                  Assert.AreEqual(2' runs[2].StyleIndex);                    Assert.AreEqual(RunKind.Tab' runs[3].RunKind); // "\t"                  Assert.AreEqual(1' runs[3].CharCount);                  Assert.AreEqual(2' runs[3].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[4].RunKind); // ".\n"                  Assert.AreEqual(2' runs[4].CharCount);                  Assert.AreEqual(2' runs[4].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[5].RunKind); // "\n"                  Assert.AreEqual(1' runs[5].CharCount);                  Assert.AreEqual(3' runs[5].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[6].RunKind); // "("                  Assert.AreEqual(1' runs[6].CharCount);                  Assert.AreEqual(2' runs[6].StyleIndex);                    Assert.AreEqual(RunKind.Object' runs[7].RunKind); // "("                  Assert.AreEqual(1' runs[7].CharCount);                  Assert.AreEqual(2' runs[7].StyleIndex);                  Assert.AreEqual(0' runs[7].ObjectIndex);                    Assert.AreEqual(RunKind.Text' runs[8].RunKind); // ")"                  Assert.AreEqual(1' runs[8].CharCount);                  Assert.AreEqual(2' runs[8].StyleIndex);                    // Check that paragraph changed notifications were raised as needed.                  Assert.AreElementsEqual(new[] { 0' 1' 2' 2' 3' 3' 3 }' changedParagraphIndices);              });
Magic Number,Gallio.Common.Splash.Tests,SplashDocumentTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Common\Gallio.Common.Splash.Tests\SplashDocumentTest.cs,AppendStuff,The following statement contains a magic number: Assert.Multiple(() =>              {                  // Check char content.                  Assert.AreEqual("Some text' lalala.\nMore text.Tab\t.\n\n( )"' document.ToString());                    // Check style table.                  Assert.AreEqual(4' document.StyleCount);                  Assert.AreEqual(Style.Default' document.LookupStyle(0));                  Assert.AreEqual(style1' document.LookupStyle(1));                  Assert.AreEqual(style2' document.LookupStyle(2));                  Assert.AreEqual(style3' document.LookupStyle(3));                    // Check object table.                  Assert.AreEqual(1' document.ObjectCount);                  Assert.AreEqual(embeddedObject' document.LookupObject(0));                    // Check paragraph table.                  Assert.AreEqual(4' document.ParagraphCount);                  Paragraph* paragraphs = document.GetParagraphZero();                    Assert.AreEqual(0' paragraphs[0].CharIndex); // "Some text' lalala.\n"                  Assert.AreEqual(19' paragraphs[0].CharCount);                  Assert.AreEqual(0' paragraphs[0].RunIndex);                  Assert.AreEqual(1' paragraphs[0].RunCount);                    Assert.AreEqual(19' paragraphs[1].CharIndex); // "More text.Tab\t.\n"                  Assert.AreEqual(16' paragraphs[1].CharCount);                  Assert.AreEqual(1' paragraphs[1].RunIndex);                  Assert.AreEqual(4' paragraphs[1].RunCount);                    Assert.AreEqual(35' paragraphs[2].CharIndex); // "\n"                  Assert.AreEqual(1' paragraphs[2].CharCount);                  Assert.AreEqual(5' paragraphs[2].RunIndex);                  Assert.AreEqual(1' paragraphs[2].RunCount);                    Assert.AreEqual(36' paragraphs[3].CharIndex); // "( )"                  Assert.AreEqual(3' paragraphs[3].CharCount);                  Assert.AreEqual(6' paragraphs[3].RunIndex);                  Assert.AreEqual(3' paragraphs[3].RunCount);                    // Check run table.                  Assert.AreEqual(9' document.RunCount);                  Run* runs = document.GetRunZero();                    Assert.AreEqual(RunKind.Text' runs[0].RunKind); // "Some text' lalala.\n"                  Assert.AreEqual(19' runs[0].CharCount);                  Assert.AreEqual(1' runs[0].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[1].RunKind); // "More text."                  Assert.AreEqual(10' runs[1].CharCount);                  Assert.AreEqual(1' runs[1].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[2].RunKind); // "Tab"                  Assert.AreEqual(3' runs[2].CharCount);                  Assert.AreEqual(2' runs[2].StyleIndex);                    Assert.AreEqual(RunKind.Tab' runs[3].RunKind); // "\t"                  Assert.AreEqual(1' runs[3].CharCount);                  Assert.AreEqual(2' runs[3].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[4].RunKind); // ".\n"                  Assert.AreEqual(2' runs[4].CharCount);                  Assert.AreEqual(2' runs[4].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[5].RunKind); // "\n"                  Assert.AreEqual(1' runs[5].CharCount);                  Assert.AreEqual(3' runs[5].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[6].RunKind); // "("                  Assert.AreEqual(1' runs[6].CharCount);                  Assert.AreEqual(2' runs[6].StyleIndex);                    Assert.AreEqual(RunKind.Object' runs[7].RunKind); // "("                  Assert.AreEqual(1' runs[7].CharCount);                  Assert.AreEqual(2' runs[7].StyleIndex);                  Assert.AreEqual(0' runs[7].ObjectIndex);                    Assert.AreEqual(RunKind.Text' runs[8].RunKind); // ")"                  Assert.AreEqual(1' runs[8].CharCount);                  Assert.AreEqual(2' runs[8].StyleIndex);                    // Check that paragraph changed notifications were raised as needed.                  Assert.AreElementsEqual(new[] { 0' 1' 2' 2' 3' 3' 3 }' changedParagraphIndices);              });
Magic Number,Gallio.Common.Splash.Tests,SplashDocumentTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Common\Gallio.Common.Splash.Tests\SplashDocumentTest.cs,AppendStuff,The following statement contains a magic number: Assert.Multiple(() =>              {                  // Check char content.                  Assert.AreEqual("Some text' lalala.\nMore text.Tab\t.\n\n( )"' document.ToString());                    // Check style table.                  Assert.AreEqual(4' document.StyleCount);                  Assert.AreEqual(Style.Default' document.LookupStyle(0));                  Assert.AreEqual(style1' document.LookupStyle(1));                  Assert.AreEqual(style2' document.LookupStyle(2));                  Assert.AreEqual(style3' document.LookupStyle(3));                    // Check object table.                  Assert.AreEqual(1' document.ObjectCount);                  Assert.AreEqual(embeddedObject' document.LookupObject(0));                    // Check paragraph table.                  Assert.AreEqual(4' document.ParagraphCount);                  Paragraph* paragraphs = document.GetParagraphZero();                    Assert.AreEqual(0' paragraphs[0].CharIndex); // "Some text' lalala.\n"                  Assert.AreEqual(19' paragraphs[0].CharCount);                  Assert.AreEqual(0' paragraphs[0].RunIndex);                  Assert.AreEqual(1' paragraphs[0].RunCount);                    Assert.AreEqual(19' paragraphs[1].CharIndex); // "More text.Tab\t.\n"                  Assert.AreEqual(16' paragraphs[1].CharCount);                  Assert.AreEqual(1' paragraphs[1].RunIndex);                  Assert.AreEqual(4' paragraphs[1].RunCount);                    Assert.AreEqual(35' paragraphs[2].CharIndex); // "\n"                  Assert.AreEqual(1' paragraphs[2].CharCount);                  Assert.AreEqual(5' paragraphs[2].RunIndex);                  Assert.AreEqual(1' paragraphs[2].RunCount);                    Assert.AreEqual(36' paragraphs[3].CharIndex); // "( )"                  Assert.AreEqual(3' paragraphs[3].CharCount);                  Assert.AreEqual(6' paragraphs[3].RunIndex);                  Assert.AreEqual(3' paragraphs[3].RunCount);                    // Check run table.                  Assert.AreEqual(9' document.RunCount);                  Run* runs = document.GetRunZero();                    Assert.AreEqual(RunKind.Text' runs[0].RunKind); // "Some text' lalala.\n"                  Assert.AreEqual(19' runs[0].CharCount);                  Assert.AreEqual(1' runs[0].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[1].RunKind); // "More text."                  Assert.AreEqual(10' runs[1].CharCount);                  Assert.AreEqual(1' runs[1].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[2].RunKind); // "Tab"                  Assert.AreEqual(3' runs[2].CharCount);                  Assert.AreEqual(2' runs[2].StyleIndex);                    Assert.AreEqual(RunKind.Tab' runs[3].RunKind); // "\t"                  Assert.AreEqual(1' runs[3].CharCount);                  Assert.AreEqual(2' runs[3].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[4].RunKind); // ".\n"                  Assert.AreEqual(2' runs[4].CharCount);                  Assert.AreEqual(2' runs[4].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[5].RunKind); // "\n"                  Assert.AreEqual(1' runs[5].CharCount);                  Assert.AreEqual(3' runs[5].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[6].RunKind); // "("                  Assert.AreEqual(1' runs[6].CharCount);                  Assert.AreEqual(2' runs[6].StyleIndex);                    Assert.AreEqual(RunKind.Object' runs[7].RunKind); // "("                  Assert.AreEqual(1' runs[7].CharCount);                  Assert.AreEqual(2' runs[7].StyleIndex);                  Assert.AreEqual(0' runs[7].ObjectIndex);                    Assert.AreEqual(RunKind.Text' runs[8].RunKind); // ")"                  Assert.AreEqual(1' runs[8].CharCount);                  Assert.AreEqual(2' runs[8].StyleIndex);                    // Check that paragraph changed notifications were raised as needed.                  Assert.AreElementsEqual(new[] { 0' 1' 2' 2' 3' 3' 3 }' changedParagraphIndices);              });
Magic Number,Gallio.Common.Splash.Tests,SplashDocumentTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Common\Gallio.Common.Splash.Tests\SplashDocumentTest.cs,AppendStuff,The following statement contains a magic number: Assert.Multiple(() =>              {                  // Check char content.                  Assert.AreEqual("Some text' lalala.\nMore text.Tab\t.\n\n( )"' document.ToString());                    // Check style table.                  Assert.AreEqual(4' document.StyleCount);                  Assert.AreEqual(Style.Default' document.LookupStyle(0));                  Assert.AreEqual(style1' document.LookupStyle(1));                  Assert.AreEqual(style2' document.LookupStyle(2));                  Assert.AreEqual(style3' document.LookupStyle(3));                    // Check object table.                  Assert.AreEqual(1' document.ObjectCount);                  Assert.AreEqual(embeddedObject' document.LookupObject(0));                    // Check paragraph table.                  Assert.AreEqual(4' document.ParagraphCount);                  Paragraph* paragraphs = document.GetParagraphZero();                    Assert.AreEqual(0' paragraphs[0].CharIndex); // "Some text' lalala.\n"                  Assert.AreEqual(19' paragraphs[0].CharCount);                  Assert.AreEqual(0' paragraphs[0].RunIndex);                  Assert.AreEqual(1' paragraphs[0].RunCount);                    Assert.AreEqual(19' paragraphs[1].CharIndex); // "More text.Tab\t.\n"                  Assert.AreEqual(16' paragraphs[1].CharCount);                  Assert.AreEqual(1' paragraphs[1].RunIndex);                  Assert.AreEqual(4' paragraphs[1].RunCount);                    Assert.AreEqual(35' paragraphs[2].CharIndex); // "\n"                  Assert.AreEqual(1' paragraphs[2].CharCount);                  Assert.AreEqual(5' paragraphs[2].RunIndex);                  Assert.AreEqual(1' paragraphs[2].RunCount);                    Assert.AreEqual(36' paragraphs[3].CharIndex); // "( )"                  Assert.AreEqual(3' paragraphs[3].CharCount);                  Assert.AreEqual(6' paragraphs[3].RunIndex);                  Assert.AreEqual(3' paragraphs[3].RunCount);                    // Check run table.                  Assert.AreEqual(9' document.RunCount);                  Run* runs = document.GetRunZero();                    Assert.AreEqual(RunKind.Text' runs[0].RunKind); // "Some text' lalala.\n"                  Assert.AreEqual(19' runs[0].CharCount);                  Assert.AreEqual(1' runs[0].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[1].RunKind); // "More text."                  Assert.AreEqual(10' runs[1].CharCount);                  Assert.AreEqual(1' runs[1].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[2].RunKind); // "Tab"                  Assert.AreEqual(3' runs[2].CharCount);                  Assert.AreEqual(2' runs[2].StyleIndex);                    Assert.AreEqual(RunKind.Tab' runs[3].RunKind); // "\t"                  Assert.AreEqual(1' runs[3].CharCount);                  Assert.AreEqual(2' runs[3].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[4].RunKind); // ".\n"                  Assert.AreEqual(2' runs[4].CharCount);                  Assert.AreEqual(2' runs[4].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[5].RunKind); // "\n"                  Assert.AreEqual(1' runs[5].CharCount);                  Assert.AreEqual(3' runs[5].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[6].RunKind); // "("                  Assert.AreEqual(1' runs[6].CharCount);                  Assert.AreEqual(2' runs[6].StyleIndex);                    Assert.AreEqual(RunKind.Object' runs[7].RunKind); // "("                  Assert.AreEqual(1' runs[7].CharCount);                  Assert.AreEqual(2' runs[7].StyleIndex);                  Assert.AreEqual(0' runs[7].ObjectIndex);                    Assert.AreEqual(RunKind.Text' runs[8].RunKind); // ")"                  Assert.AreEqual(1' runs[8].CharCount);                  Assert.AreEqual(2' runs[8].StyleIndex);                    // Check that paragraph changed notifications were raised as needed.                  Assert.AreElementsEqual(new[] { 0' 1' 2' 2' 3' 3' 3 }' changedParagraphIndices);              });
Magic Number,Gallio.Common.Splash.Tests,SplashDocumentTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Common\Gallio.Common.Splash.Tests\SplashDocumentTest.cs,AppendStuff,The following statement contains a magic number: Assert.Multiple(() =>              {                  // Check char content.                  Assert.AreEqual("Some text' lalala.\nMore text.Tab\t.\n\n( )"' document.ToString());                    // Check style table.                  Assert.AreEqual(4' document.StyleCount);                  Assert.AreEqual(Style.Default' document.LookupStyle(0));                  Assert.AreEqual(style1' document.LookupStyle(1));                  Assert.AreEqual(style2' document.LookupStyle(2));                  Assert.AreEqual(style3' document.LookupStyle(3));                    // Check object table.                  Assert.AreEqual(1' document.ObjectCount);                  Assert.AreEqual(embeddedObject' document.LookupObject(0));                    // Check paragraph table.                  Assert.AreEqual(4' document.ParagraphCount);                  Paragraph* paragraphs = document.GetParagraphZero();                    Assert.AreEqual(0' paragraphs[0].CharIndex); // "Some text' lalala.\n"                  Assert.AreEqual(19' paragraphs[0].CharCount);                  Assert.AreEqual(0' paragraphs[0].RunIndex);                  Assert.AreEqual(1' paragraphs[0].RunCount);                    Assert.AreEqual(19' paragraphs[1].CharIndex); // "More text.Tab\t.\n"                  Assert.AreEqual(16' paragraphs[1].CharCount);                  Assert.AreEqual(1' paragraphs[1].RunIndex);                  Assert.AreEqual(4' paragraphs[1].RunCount);                    Assert.AreEqual(35' paragraphs[2].CharIndex); // "\n"                  Assert.AreEqual(1' paragraphs[2].CharCount);                  Assert.AreEqual(5' paragraphs[2].RunIndex);                  Assert.AreEqual(1' paragraphs[2].RunCount);                    Assert.AreEqual(36' paragraphs[3].CharIndex); // "( )"                  Assert.AreEqual(3' paragraphs[3].CharCount);                  Assert.AreEqual(6' paragraphs[3].RunIndex);                  Assert.AreEqual(3' paragraphs[3].RunCount);                    // Check run table.                  Assert.AreEqual(9' document.RunCount);                  Run* runs = document.GetRunZero();                    Assert.AreEqual(RunKind.Text' runs[0].RunKind); // "Some text' lalala.\n"                  Assert.AreEqual(19' runs[0].CharCount);                  Assert.AreEqual(1' runs[0].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[1].RunKind); // "More text."                  Assert.AreEqual(10' runs[1].CharCount);                  Assert.AreEqual(1' runs[1].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[2].RunKind); // "Tab"                  Assert.AreEqual(3' runs[2].CharCount);                  Assert.AreEqual(2' runs[2].StyleIndex);                    Assert.AreEqual(RunKind.Tab' runs[3].RunKind); // "\t"                  Assert.AreEqual(1' runs[3].CharCount);                  Assert.AreEqual(2' runs[3].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[4].RunKind); // ".\n"                  Assert.AreEqual(2' runs[4].CharCount);                  Assert.AreEqual(2' runs[4].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[5].RunKind); // "\n"                  Assert.AreEqual(1' runs[5].CharCount);                  Assert.AreEqual(3' runs[5].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[6].RunKind); // "("                  Assert.AreEqual(1' runs[6].CharCount);                  Assert.AreEqual(2' runs[6].StyleIndex);                    Assert.AreEqual(RunKind.Object' runs[7].RunKind); // "("                  Assert.AreEqual(1' runs[7].CharCount);                  Assert.AreEqual(2' runs[7].StyleIndex);                  Assert.AreEqual(0' runs[7].ObjectIndex);                    Assert.AreEqual(RunKind.Text' runs[8].RunKind); // ")"                  Assert.AreEqual(1' runs[8].CharCount);                  Assert.AreEqual(2' runs[8].StyleIndex);                    // Check that paragraph changed notifications were raised as needed.                  Assert.AreElementsEqual(new[] { 0' 1' 2' 2' 3' 3' 3 }' changedParagraphIndices);              });
Magic Number,Gallio.Common.Splash.Tests,SplashDocumentTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Common\Gallio.Common.Splash.Tests\SplashDocumentTest.cs,AppendStuff,The following statement contains a magic number: Assert.Multiple(() =>              {                  // Check char content.                  Assert.AreEqual("Some text' lalala.\nMore text.Tab\t.\n\n( )"' document.ToString());                    // Check style table.                  Assert.AreEqual(4' document.StyleCount);                  Assert.AreEqual(Style.Default' document.LookupStyle(0));                  Assert.AreEqual(style1' document.LookupStyle(1));                  Assert.AreEqual(style2' document.LookupStyle(2));                  Assert.AreEqual(style3' document.LookupStyle(3));                    // Check object table.                  Assert.AreEqual(1' document.ObjectCount);                  Assert.AreEqual(embeddedObject' document.LookupObject(0));                    // Check paragraph table.                  Assert.AreEqual(4' document.ParagraphCount);                  Paragraph* paragraphs = document.GetParagraphZero();                    Assert.AreEqual(0' paragraphs[0].CharIndex); // "Some text' lalala.\n"                  Assert.AreEqual(19' paragraphs[0].CharCount);                  Assert.AreEqual(0' paragraphs[0].RunIndex);                  Assert.AreEqual(1' paragraphs[0].RunCount);                    Assert.AreEqual(19' paragraphs[1].CharIndex); // "More text.Tab\t.\n"                  Assert.AreEqual(16' paragraphs[1].CharCount);                  Assert.AreEqual(1' paragraphs[1].RunIndex);                  Assert.AreEqual(4' paragraphs[1].RunCount);                    Assert.AreEqual(35' paragraphs[2].CharIndex); // "\n"                  Assert.AreEqual(1' paragraphs[2].CharCount);                  Assert.AreEqual(5' paragraphs[2].RunIndex);                  Assert.AreEqual(1' paragraphs[2].RunCount);                    Assert.AreEqual(36' paragraphs[3].CharIndex); // "( )"                  Assert.AreEqual(3' paragraphs[3].CharCount);                  Assert.AreEqual(6' paragraphs[3].RunIndex);                  Assert.AreEqual(3' paragraphs[3].RunCount);                    // Check run table.                  Assert.AreEqual(9' document.RunCount);                  Run* runs = document.GetRunZero();                    Assert.AreEqual(RunKind.Text' runs[0].RunKind); // "Some text' lalala.\n"                  Assert.AreEqual(19' runs[0].CharCount);                  Assert.AreEqual(1' runs[0].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[1].RunKind); // "More text."                  Assert.AreEqual(10' runs[1].CharCount);                  Assert.AreEqual(1' runs[1].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[2].RunKind); // "Tab"                  Assert.AreEqual(3' runs[2].CharCount);                  Assert.AreEqual(2' runs[2].StyleIndex);                    Assert.AreEqual(RunKind.Tab' runs[3].RunKind); // "\t"                  Assert.AreEqual(1' runs[3].CharCount);                  Assert.AreEqual(2' runs[3].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[4].RunKind); // ".\n"                  Assert.AreEqual(2' runs[4].CharCount);                  Assert.AreEqual(2' runs[4].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[5].RunKind); // "\n"                  Assert.AreEqual(1' runs[5].CharCount);                  Assert.AreEqual(3' runs[5].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[6].RunKind); // "("                  Assert.AreEqual(1' runs[6].CharCount);                  Assert.AreEqual(2' runs[6].StyleIndex);                    Assert.AreEqual(RunKind.Object' runs[7].RunKind); // "("                  Assert.AreEqual(1' runs[7].CharCount);                  Assert.AreEqual(2' runs[7].StyleIndex);                  Assert.AreEqual(0' runs[7].ObjectIndex);                    Assert.AreEqual(RunKind.Text' runs[8].RunKind); // ")"                  Assert.AreEqual(1' runs[8].CharCount);                  Assert.AreEqual(2' runs[8].StyleIndex);                    // Check that paragraph changed notifications were raised as needed.                  Assert.AreElementsEqual(new[] { 0' 1' 2' 2' 3' 3' 3 }' changedParagraphIndices);              });
Magic Number,Gallio.Common.Splash.Tests,SplashDocumentTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Common\Gallio.Common.Splash.Tests\SplashDocumentTest.cs,AppendStuff,The following statement contains a magic number: Assert.Multiple(() =>              {                  // Check char content.                  Assert.AreEqual("Some text' lalala.\nMore text.Tab\t.\n\n( )"' document.ToString());                    // Check style table.                  Assert.AreEqual(4' document.StyleCount);                  Assert.AreEqual(Style.Default' document.LookupStyle(0));                  Assert.AreEqual(style1' document.LookupStyle(1));                  Assert.AreEqual(style2' document.LookupStyle(2));                  Assert.AreEqual(style3' document.LookupStyle(3));                    // Check object table.                  Assert.AreEqual(1' document.ObjectCount);                  Assert.AreEqual(embeddedObject' document.LookupObject(0));                    // Check paragraph table.                  Assert.AreEqual(4' document.ParagraphCount);                  Paragraph* paragraphs = document.GetParagraphZero();                    Assert.AreEqual(0' paragraphs[0].CharIndex); // "Some text' lalala.\n"                  Assert.AreEqual(19' paragraphs[0].CharCount);                  Assert.AreEqual(0' paragraphs[0].RunIndex);                  Assert.AreEqual(1' paragraphs[0].RunCount);                    Assert.AreEqual(19' paragraphs[1].CharIndex); // "More text.Tab\t.\n"                  Assert.AreEqual(16' paragraphs[1].CharCount);                  Assert.AreEqual(1' paragraphs[1].RunIndex);                  Assert.AreEqual(4' paragraphs[1].RunCount);                    Assert.AreEqual(35' paragraphs[2].CharIndex); // "\n"                  Assert.AreEqual(1' paragraphs[2].CharCount);                  Assert.AreEqual(5' paragraphs[2].RunIndex);                  Assert.AreEqual(1' paragraphs[2].RunCount);                    Assert.AreEqual(36' paragraphs[3].CharIndex); // "( )"                  Assert.AreEqual(3' paragraphs[3].CharCount);                  Assert.AreEqual(6' paragraphs[3].RunIndex);                  Assert.AreEqual(3' paragraphs[3].RunCount);                    // Check run table.                  Assert.AreEqual(9' document.RunCount);                  Run* runs = document.GetRunZero();                    Assert.AreEqual(RunKind.Text' runs[0].RunKind); // "Some text' lalala.\n"                  Assert.AreEqual(19' runs[0].CharCount);                  Assert.AreEqual(1' runs[0].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[1].RunKind); // "More text."                  Assert.AreEqual(10' runs[1].CharCount);                  Assert.AreEqual(1' runs[1].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[2].RunKind); // "Tab"                  Assert.AreEqual(3' runs[2].CharCount);                  Assert.AreEqual(2' runs[2].StyleIndex);                    Assert.AreEqual(RunKind.Tab' runs[3].RunKind); // "\t"                  Assert.AreEqual(1' runs[3].CharCount);                  Assert.AreEqual(2' runs[3].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[4].RunKind); // ".\n"                  Assert.AreEqual(2' runs[4].CharCount);                  Assert.AreEqual(2' runs[4].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[5].RunKind); // "\n"                  Assert.AreEqual(1' runs[5].CharCount);                  Assert.AreEqual(3' runs[5].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[6].RunKind); // "("                  Assert.AreEqual(1' runs[6].CharCount);                  Assert.AreEqual(2' runs[6].StyleIndex);                    Assert.AreEqual(RunKind.Object' runs[7].RunKind); // "("                  Assert.AreEqual(1' runs[7].CharCount);                  Assert.AreEqual(2' runs[7].StyleIndex);                  Assert.AreEqual(0' runs[7].ObjectIndex);                    Assert.AreEqual(RunKind.Text' runs[8].RunKind); // ")"                  Assert.AreEqual(1' runs[8].CharCount);                  Assert.AreEqual(2' runs[8].StyleIndex);                    // Check that paragraph changed notifications were raised as needed.                  Assert.AreElementsEqual(new[] { 0' 1' 2' 2' 3' 3' 3 }' changedParagraphIndices);              });
Magic Number,Gallio.Common.Splash.Tests,SplashDocumentTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Common\Gallio.Common.Splash.Tests\SplashDocumentTest.cs,AppendStuff,The following statement contains a magic number: Assert.Multiple(() =>              {                  // Check char content.                  Assert.AreEqual("Some text' lalala.\nMore text.Tab\t.\n\n( )"' document.ToString());                    // Check style table.                  Assert.AreEqual(4' document.StyleCount);                  Assert.AreEqual(Style.Default' document.LookupStyle(0));                  Assert.AreEqual(style1' document.LookupStyle(1));                  Assert.AreEqual(style2' document.LookupStyle(2));                  Assert.AreEqual(style3' document.LookupStyle(3));                    // Check object table.                  Assert.AreEqual(1' document.ObjectCount);                  Assert.AreEqual(embeddedObject' document.LookupObject(0));                    // Check paragraph table.                  Assert.AreEqual(4' document.ParagraphCount);                  Paragraph* paragraphs = document.GetParagraphZero();                    Assert.AreEqual(0' paragraphs[0].CharIndex); // "Some text' lalala.\n"                  Assert.AreEqual(19' paragraphs[0].CharCount);                  Assert.AreEqual(0' paragraphs[0].RunIndex);                  Assert.AreEqual(1' paragraphs[0].RunCount);                    Assert.AreEqual(19' paragraphs[1].CharIndex); // "More text.Tab\t.\n"                  Assert.AreEqual(16' paragraphs[1].CharCount);                  Assert.AreEqual(1' paragraphs[1].RunIndex);                  Assert.AreEqual(4' paragraphs[1].RunCount);                    Assert.AreEqual(35' paragraphs[2].CharIndex); // "\n"                  Assert.AreEqual(1' paragraphs[2].CharCount);                  Assert.AreEqual(5' paragraphs[2].RunIndex);                  Assert.AreEqual(1' paragraphs[2].RunCount);                    Assert.AreEqual(36' paragraphs[3].CharIndex); // "( )"                  Assert.AreEqual(3' paragraphs[3].CharCount);                  Assert.AreEqual(6' paragraphs[3].RunIndex);                  Assert.AreEqual(3' paragraphs[3].RunCount);                    // Check run table.                  Assert.AreEqual(9' document.RunCount);                  Run* runs = document.GetRunZero();                    Assert.AreEqual(RunKind.Text' runs[0].RunKind); // "Some text' lalala.\n"                  Assert.AreEqual(19' runs[0].CharCount);                  Assert.AreEqual(1' runs[0].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[1].RunKind); // "More text."                  Assert.AreEqual(10' runs[1].CharCount);                  Assert.AreEqual(1' runs[1].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[2].RunKind); // "Tab"                  Assert.AreEqual(3' runs[2].CharCount);                  Assert.AreEqual(2' runs[2].StyleIndex);                    Assert.AreEqual(RunKind.Tab' runs[3].RunKind); // "\t"                  Assert.AreEqual(1' runs[3].CharCount);                  Assert.AreEqual(2' runs[3].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[4].RunKind); // ".\n"                  Assert.AreEqual(2' runs[4].CharCount);                  Assert.AreEqual(2' runs[4].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[5].RunKind); // "\n"                  Assert.AreEqual(1' runs[5].CharCount);                  Assert.AreEqual(3' runs[5].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[6].RunKind); // "("                  Assert.AreEqual(1' runs[6].CharCount);                  Assert.AreEqual(2' runs[6].StyleIndex);                    Assert.AreEqual(RunKind.Object' runs[7].RunKind); // "("                  Assert.AreEqual(1' runs[7].CharCount);                  Assert.AreEqual(2' runs[7].StyleIndex);                  Assert.AreEqual(0' runs[7].ObjectIndex);                    Assert.AreEqual(RunKind.Text' runs[8].RunKind); // ")"                  Assert.AreEqual(1' runs[8].CharCount);                  Assert.AreEqual(2' runs[8].StyleIndex);                    // Check that paragraph changed notifications were raised as needed.                  Assert.AreElementsEqual(new[] { 0' 1' 2' 2' 3' 3' 3 }' changedParagraphIndices);              });
Magic Number,Gallio.Common.Splash.Tests,SplashDocumentTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Common\Gallio.Common.Splash.Tests\SplashDocumentTest.cs,AppendStuff,The following statement contains a magic number: Assert.Multiple(() =>              {                  // Check char content.                  Assert.AreEqual("Some text' lalala.\nMore text.Tab\t.\n\n( )"' document.ToString());                    // Check style table.                  Assert.AreEqual(4' document.StyleCount);                  Assert.AreEqual(Style.Default' document.LookupStyle(0));                  Assert.AreEqual(style1' document.LookupStyle(1));                  Assert.AreEqual(style2' document.LookupStyle(2));                  Assert.AreEqual(style3' document.LookupStyle(3));                    // Check object table.                  Assert.AreEqual(1' document.ObjectCount);                  Assert.AreEqual(embeddedObject' document.LookupObject(0));                    // Check paragraph table.                  Assert.AreEqual(4' document.ParagraphCount);                  Paragraph* paragraphs = document.GetParagraphZero();                    Assert.AreEqual(0' paragraphs[0].CharIndex); // "Some text' lalala.\n"                  Assert.AreEqual(19' paragraphs[0].CharCount);                  Assert.AreEqual(0' paragraphs[0].RunIndex);                  Assert.AreEqual(1' paragraphs[0].RunCount);                    Assert.AreEqual(19' paragraphs[1].CharIndex); // "More text.Tab\t.\n"                  Assert.AreEqual(16' paragraphs[1].CharCount);                  Assert.AreEqual(1' paragraphs[1].RunIndex);                  Assert.AreEqual(4' paragraphs[1].RunCount);                    Assert.AreEqual(35' paragraphs[2].CharIndex); // "\n"                  Assert.AreEqual(1' paragraphs[2].CharCount);                  Assert.AreEqual(5' paragraphs[2].RunIndex);                  Assert.AreEqual(1' paragraphs[2].RunCount);                    Assert.AreEqual(36' paragraphs[3].CharIndex); // "( )"                  Assert.AreEqual(3' paragraphs[3].CharCount);                  Assert.AreEqual(6' paragraphs[3].RunIndex);                  Assert.AreEqual(3' paragraphs[3].RunCount);                    // Check run table.                  Assert.AreEqual(9' document.RunCount);                  Run* runs = document.GetRunZero();                    Assert.AreEqual(RunKind.Text' runs[0].RunKind); // "Some text' lalala.\n"                  Assert.AreEqual(19' runs[0].CharCount);                  Assert.AreEqual(1' runs[0].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[1].RunKind); // "More text."                  Assert.AreEqual(10' runs[1].CharCount);                  Assert.AreEqual(1' runs[1].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[2].RunKind); // "Tab"                  Assert.AreEqual(3' runs[2].CharCount);                  Assert.AreEqual(2' runs[2].StyleIndex);                    Assert.AreEqual(RunKind.Tab' runs[3].RunKind); // "\t"                  Assert.AreEqual(1' runs[3].CharCount);                  Assert.AreEqual(2' runs[3].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[4].RunKind); // ".\n"                  Assert.AreEqual(2' runs[4].CharCount);                  Assert.AreEqual(2' runs[4].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[5].RunKind); // "\n"                  Assert.AreEqual(1' runs[5].CharCount);                  Assert.AreEqual(3' runs[5].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[6].RunKind); // "("                  Assert.AreEqual(1' runs[6].CharCount);                  Assert.AreEqual(2' runs[6].StyleIndex);                    Assert.AreEqual(RunKind.Object' runs[7].RunKind); // "("                  Assert.AreEqual(1' runs[7].CharCount);                  Assert.AreEqual(2' runs[7].StyleIndex);                  Assert.AreEqual(0' runs[7].ObjectIndex);                    Assert.AreEqual(RunKind.Text' runs[8].RunKind); // ")"                  Assert.AreEqual(1' runs[8].CharCount);                  Assert.AreEqual(2' runs[8].StyleIndex);                    // Check that paragraph changed notifications were raised as needed.                  Assert.AreElementsEqual(new[] { 0' 1' 2' 2' 3' 3' 3 }' changedParagraphIndices);              });
Magic Number,Gallio.Common.Splash.Tests,SplashDocumentTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Common\Gallio.Common.Splash.Tests\SplashDocumentTest.cs,AppendStuff,The following statement contains a magic number: Assert.Multiple(() =>              {                  // Check char content.                  Assert.AreEqual("Some text' lalala.\nMore text.Tab\t.\n\n( )"' document.ToString());                    // Check style table.                  Assert.AreEqual(4' document.StyleCount);                  Assert.AreEqual(Style.Default' document.LookupStyle(0));                  Assert.AreEqual(style1' document.LookupStyle(1));                  Assert.AreEqual(style2' document.LookupStyle(2));                  Assert.AreEqual(style3' document.LookupStyle(3));                    // Check object table.                  Assert.AreEqual(1' document.ObjectCount);                  Assert.AreEqual(embeddedObject' document.LookupObject(0));                    // Check paragraph table.                  Assert.AreEqual(4' document.ParagraphCount);                  Paragraph* paragraphs = document.GetParagraphZero();                    Assert.AreEqual(0' paragraphs[0].CharIndex); // "Some text' lalala.\n"                  Assert.AreEqual(19' paragraphs[0].CharCount);                  Assert.AreEqual(0' paragraphs[0].RunIndex);                  Assert.AreEqual(1' paragraphs[0].RunCount);                    Assert.AreEqual(19' paragraphs[1].CharIndex); // "More text.Tab\t.\n"                  Assert.AreEqual(16' paragraphs[1].CharCount);                  Assert.AreEqual(1' paragraphs[1].RunIndex);                  Assert.AreEqual(4' paragraphs[1].RunCount);                    Assert.AreEqual(35' paragraphs[2].CharIndex); // "\n"                  Assert.AreEqual(1' paragraphs[2].CharCount);                  Assert.AreEqual(5' paragraphs[2].RunIndex);                  Assert.AreEqual(1' paragraphs[2].RunCount);                    Assert.AreEqual(36' paragraphs[3].CharIndex); // "( )"                  Assert.AreEqual(3' paragraphs[3].CharCount);                  Assert.AreEqual(6' paragraphs[3].RunIndex);                  Assert.AreEqual(3' paragraphs[3].RunCount);                    // Check run table.                  Assert.AreEqual(9' document.RunCount);                  Run* runs = document.GetRunZero();                    Assert.AreEqual(RunKind.Text' runs[0].RunKind); // "Some text' lalala.\n"                  Assert.AreEqual(19' runs[0].CharCount);                  Assert.AreEqual(1' runs[0].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[1].RunKind); // "More text."                  Assert.AreEqual(10' runs[1].CharCount);                  Assert.AreEqual(1' runs[1].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[2].RunKind); // "Tab"                  Assert.AreEqual(3' runs[2].CharCount);                  Assert.AreEqual(2' runs[2].StyleIndex);                    Assert.AreEqual(RunKind.Tab' runs[3].RunKind); // "\t"                  Assert.AreEqual(1' runs[3].CharCount);                  Assert.AreEqual(2' runs[3].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[4].RunKind); // ".\n"                  Assert.AreEqual(2' runs[4].CharCount);                  Assert.AreEqual(2' runs[4].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[5].RunKind); // "\n"                  Assert.AreEqual(1' runs[5].CharCount);                  Assert.AreEqual(3' runs[5].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[6].RunKind); // "("                  Assert.AreEqual(1' runs[6].CharCount);                  Assert.AreEqual(2' runs[6].StyleIndex);                    Assert.AreEqual(RunKind.Object' runs[7].RunKind); // "("                  Assert.AreEqual(1' runs[7].CharCount);                  Assert.AreEqual(2' runs[7].StyleIndex);                  Assert.AreEqual(0' runs[7].ObjectIndex);                    Assert.AreEqual(RunKind.Text' runs[8].RunKind); // ")"                  Assert.AreEqual(1' runs[8].CharCount);                  Assert.AreEqual(2' runs[8].StyleIndex);                    // Check that paragraph changed notifications were raised as needed.                  Assert.AreElementsEqual(new[] { 0' 1' 2' 2' 3' 3' 3 }' changedParagraphIndices);              });
Magic Number,Gallio.Common.Splash.Tests,SplashDocumentTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Common\Gallio.Common.Splash.Tests\SplashDocumentTest.cs,AppendStuff,The following statement contains a magic number: Assert.Multiple(() =>              {                  // Check char content.                  Assert.AreEqual("Some text' lalala.\nMore text.Tab\t.\n\n( )"' document.ToString());                    // Check style table.                  Assert.AreEqual(4' document.StyleCount);                  Assert.AreEqual(Style.Default' document.LookupStyle(0));                  Assert.AreEqual(style1' document.LookupStyle(1));                  Assert.AreEqual(style2' document.LookupStyle(2));                  Assert.AreEqual(style3' document.LookupStyle(3));                    // Check object table.                  Assert.AreEqual(1' document.ObjectCount);                  Assert.AreEqual(embeddedObject' document.LookupObject(0));                    // Check paragraph table.                  Assert.AreEqual(4' document.ParagraphCount);                  Paragraph* paragraphs = document.GetParagraphZero();                    Assert.AreEqual(0' paragraphs[0].CharIndex); // "Some text' lalala.\n"                  Assert.AreEqual(19' paragraphs[0].CharCount);                  Assert.AreEqual(0' paragraphs[0].RunIndex);                  Assert.AreEqual(1' paragraphs[0].RunCount);                    Assert.AreEqual(19' paragraphs[1].CharIndex); // "More text.Tab\t.\n"                  Assert.AreEqual(16' paragraphs[1].CharCount);                  Assert.AreEqual(1' paragraphs[1].RunIndex);                  Assert.AreEqual(4' paragraphs[1].RunCount);                    Assert.AreEqual(35' paragraphs[2].CharIndex); // "\n"                  Assert.AreEqual(1' paragraphs[2].CharCount);                  Assert.AreEqual(5' paragraphs[2].RunIndex);                  Assert.AreEqual(1' paragraphs[2].RunCount);                    Assert.AreEqual(36' paragraphs[3].CharIndex); // "( )"                  Assert.AreEqual(3' paragraphs[3].CharCount);                  Assert.AreEqual(6' paragraphs[3].RunIndex);                  Assert.AreEqual(3' paragraphs[3].RunCount);                    // Check run table.                  Assert.AreEqual(9' document.RunCount);                  Run* runs = document.GetRunZero();                    Assert.AreEqual(RunKind.Text' runs[0].RunKind); // "Some text' lalala.\n"                  Assert.AreEqual(19' runs[0].CharCount);                  Assert.AreEqual(1' runs[0].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[1].RunKind); // "More text."                  Assert.AreEqual(10' runs[1].CharCount);                  Assert.AreEqual(1' runs[1].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[2].RunKind); // "Tab"                  Assert.AreEqual(3' runs[2].CharCount);                  Assert.AreEqual(2' runs[2].StyleIndex);                    Assert.AreEqual(RunKind.Tab' runs[3].RunKind); // "\t"                  Assert.AreEqual(1' runs[3].CharCount);                  Assert.AreEqual(2' runs[3].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[4].RunKind); // ".\n"                  Assert.AreEqual(2' runs[4].CharCount);                  Assert.AreEqual(2' runs[4].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[5].RunKind); // "\n"                  Assert.AreEqual(1' runs[5].CharCount);                  Assert.AreEqual(3' runs[5].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[6].RunKind); // "("                  Assert.AreEqual(1' runs[6].CharCount);                  Assert.AreEqual(2' runs[6].StyleIndex);                    Assert.AreEqual(RunKind.Object' runs[7].RunKind); // "("                  Assert.AreEqual(1' runs[7].CharCount);                  Assert.AreEqual(2' runs[7].StyleIndex);                  Assert.AreEqual(0' runs[7].ObjectIndex);                    Assert.AreEqual(RunKind.Text' runs[8].RunKind); // ")"                  Assert.AreEqual(1' runs[8].CharCount);                  Assert.AreEqual(2' runs[8].StyleIndex);                    // Check that paragraph changed notifications were raised as needed.                  Assert.AreElementsEqual(new[] { 0' 1' 2' 2' 3' 3' 3 }' changedParagraphIndices);              });
Magic Number,Gallio.Common.Splash.Tests,SplashDocumentTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Common\Gallio.Common.Splash.Tests\SplashDocumentTest.cs,AppendStuff,The following statement contains a magic number: Assert.Multiple(() =>              {                  // Check char content.                  Assert.AreEqual("Some text' lalala.\nMore text.Tab\t.\n\n( )"' document.ToString());                    // Check style table.                  Assert.AreEqual(4' document.StyleCount);                  Assert.AreEqual(Style.Default' document.LookupStyle(0));                  Assert.AreEqual(style1' document.LookupStyle(1));                  Assert.AreEqual(style2' document.LookupStyle(2));                  Assert.AreEqual(style3' document.LookupStyle(3));                    // Check object table.                  Assert.AreEqual(1' document.ObjectCount);                  Assert.AreEqual(embeddedObject' document.LookupObject(0));                    // Check paragraph table.                  Assert.AreEqual(4' document.ParagraphCount);                  Paragraph* paragraphs = document.GetParagraphZero();                    Assert.AreEqual(0' paragraphs[0].CharIndex); // "Some text' lalala.\n"                  Assert.AreEqual(19' paragraphs[0].CharCount);                  Assert.AreEqual(0' paragraphs[0].RunIndex);                  Assert.AreEqual(1' paragraphs[0].RunCount);                    Assert.AreEqual(19' paragraphs[1].CharIndex); // "More text.Tab\t.\n"                  Assert.AreEqual(16' paragraphs[1].CharCount);                  Assert.AreEqual(1' paragraphs[1].RunIndex);                  Assert.AreEqual(4' paragraphs[1].RunCount);                    Assert.AreEqual(35' paragraphs[2].CharIndex); // "\n"                  Assert.AreEqual(1' paragraphs[2].CharCount);                  Assert.AreEqual(5' paragraphs[2].RunIndex);                  Assert.AreEqual(1' paragraphs[2].RunCount);                    Assert.AreEqual(36' paragraphs[3].CharIndex); // "( )"                  Assert.AreEqual(3' paragraphs[3].CharCount);                  Assert.AreEqual(6' paragraphs[3].RunIndex);                  Assert.AreEqual(3' paragraphs[3].RunCount);                    // Check run table.                  Assert.AreEqual(9' document.RunCount);                  Run* runs = document.GetRunZero();                    Assert.AreEqual(RunKind.Text' runs[0].RunKind); // "Some text' lalala.\n"                  Assert.AreEqual(19' runs[0].CharCount);                  Assert.AreEqual(1' runs[0].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[1].RunKind); // "More text."                  Assert.AreEqual(10' runs[1].CharCount);                  Assert.AreEqual(1' runs[1].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[2].RunKind); // "Tab"                  Assert.AreEqual(3' runs[2].CharCount);                  Assert.AreEqual(2' runs[2].StyleIndex);                    Assert.AreEqual(RunKind.Tab' runs[3].RunKind); // "\t"                  Assert.AreEqual(1' runs[3].CharCount);                  Assert.AreEqual(2' runs[3].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[4].RunKind); // ".\n"                  Assert.AreEqual(2' runs[4].CharCount);                  Assert.AreEqual(2' runs[4].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[5].RunKind); // "\n"                  Assert.AreEqual(1' runs[5].CharCount);                  Assert.AreEqual(3' runs[5].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[6].RunKind); // "("                  Assert.AreEqual(1' runs[6].CharCount);                  Assert.AreEqual(2' runs[6].StyleIndex);                    Assert.AreEqual(RunKind.Object' runs[7].RunKind); // "("                  Assert.AreEqual(1' runs[7].CharCount);                  Assert.AreEqual(2' runs[7].StyleIndex);                  Assert.AreEqual(0' runs[7].ObjectIndex);                    Assert.AreEqual(RunKind.Text' runs[8].RunKind); // ")"                  Assert.AreEqual(1' runs[8].CharCount);                  Assert.AreEqual(2' runs[8].StyleIndex);                    // Check that paragraph changed notifications were raised as needed.                  Assert.AreElementsEqual(new[] { 0' 1' 2' 2' 3' 3' 3 }' changedParagraphIndices);              });
Magic Number,Gallio.Common.Splash.Tests,SplashDocumentTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Common\Gallio.Common.Splash.Tests\SplashDocumentTest.cs,AppendStuff,The following statement contains a magic number: Assert.Multiple(() =>              {                  // Check char content.                  Assert.AreEqual("Some text' lalala.\nMore text.Tab\t.\n\n( )"' document.ToString());                    // Check style table.                  Assert.AreEqual(4' document.StyleCount);                  Assert.AreEqual(Style.Default' document.LookupStyle(0));                  Assert.AreEqual(style1' document.LookupStyle(1));                  Assert.AreEqual(style2' document.LookupStyle(2));                  Assert.AreEqual(style3' document.LookupStyle(3));                    // Check object table.                  Assert.AreEqual(1' document.ObjectCount);                  Assert.AreEqual(embeddedObject' document.LookupObject(0));                    // Check paragraph table.                  Assert.AreEqual(4' document.ParagraphCount);                  Paragraph* paragraphs = document.GetParagraphZero();                    Assert.AreEqual(0' paragraphs[0].CharIndex); // "Some text' lalala.\n"                  Assert.AreEqual(19' paragraphs[0].CharCount);                  Assert.AreEqual(0' paragraphs[0].RunIndex);                  Assert.AreEqual(1' paragraphs[0].RunCount);                    Assert.AreEqual(19' paragraphs[1].CharIndex); // "More text.Tab\t.\n"                  Assert.AreEqual(16' paragraphs[1].CharCount);                  Assert.AreEqual(1' paragraphs[1].RunIndex);                  Assert.AreEqual(4' paragraphs[1].RunCount);                    Assert.AreEqual(35' paragraphs[2].CharIndex); // "\n"                  Assert.AreEqual(1' paragraphs[2].CharCount);                  Assert.AreEqual(5' paragraphs[2].RunIndex);                  Assert.AreEqual(1' paragraphs[2].RunCount);                    Assert.AreEqual(36' paragraphs[3].CharIndex); // "( )"                  Assert.AreEqual(3' paragraphs[3].CharCount);                  Assert.AreEqual(6' paragraphs[3].RunIndex);                  Assert.AreEqual(3' paragraphs[3].RunCount);                    // Check run table.                  Assert.AreEqual(9' document.RunCount);                  Run* runs = document.GetRunZero();                    Assert.AreEqual(RunKind.Text' runs[0].RunKind); // "Some text' lalala.\n"                  Assert.AreEqual(19' runs[0].CharCount);                  Assert.AreEqual(1' runs[0].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[1].RunKind); // "More text."                  Assert.AreEqual(10' runs[1].CharCount);                  Assert.AreEqual(1' runs[1].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[2].RunKind); // "Tab"                  Assert.AreEqual(3' runs[2].CharCount);                  Assert.AreEqual(2' runs[2].StyleIndex);                    Assert.AreEqual(RunKind.Tab' runs[3].RunKind); // "\t"                  Assert.AreEqual(1' runs[3].CharCount);                  Assert.AreEqual(2' runs[3].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[4].RunKind); // ".\n"                  Assert.AreEqual(2' runs[4].CharCount);                  Assert.AreEqual(2' runs[4].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[5].RunKind); // "\n"                  Assert.AreEqual(1' runs[5].CharCount);                  Assert.AreEqual(3' runs[5].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[6].RunKind); // "("                  Assert.AreEqual(1' runs[6].CharCount);                  Assert.AreEqual(2' runs[6].StyleIndex);                    Assert.AreEqual(RunKind.Object' runs[7].RunKind); // "("                  Assert.AreEqual(1' runs[7].CharCount);                  Assert.AreEqual(2' runs[7].StyleIndex);                  Assert.AreEqual(0' runs[7].ObjectIndex);                    Assert.AreEqual(RunKind.Text' runs[8].RunKind); // ")"                  Assert.AreEqual(1' runs[8].CharCount);                  Assert.AreEqual(2' runs[8].StyleIndex);                    // Check that paragraph changed notifications were raised as needed.                  Assert.AreElementsEqual(new[] { 0' 1' 2' 2' 3' 3' 3 }' changedParagraphIndices);              });
Magic Number,Gallio.Common.Splash.Tests,SplashDocumentTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Common\Gallio.Common.Splash.Tests\SplashDocumentTest.cs,AppendStuff,The following statement contains a magic number: Assert.Multiple(() =>              {                  // Check char content.                  Assert.AreEqual("Some text' lalala.\nMore text.Tab\t.\n\n( )"' document.ToString());                    // Check style table.                  Assert.AreEqual(4' document.StyleCount);                  Assert.AreEqual(Style.Default' document.LookupStyle(0));                  Assert.AreEqual(style1' document.LookupStyle(1));                  Assert.AreEqual(style2' document.LookupStyle(2));                  Assert.AreEqual(style3' document.LookupStyle(3));                    // Check object table.                  Assert.AreEqual(1' document.ObjectCount);                  Assert.AreEqual(embeddedObject' document.LookupObject(0));                    // Check paragraph table.                  Assert.AreEqual(4' document.ParagraphCount);                  Paragraph* paragraphs = document.GetParagraphZero();                    Assert.AreEqual(0' paragraphs[0].CharIndex); // "Some text' lalala.\n"                  Assert.AreEqual(19' paragraphs[0].CharCount);                  Assert.AreEqual(0' paragraphs[0].RunIndex);                  Assert.AreEqual(1' paragraphs[0].RunCount);                    Assert.AreEqual(19' paragraphs[1].CharIndex); // "More text.Tab\t.\n"                  Assert.AreEqual(16' paragraphs[1].CharCount);                  Assert.AreEqual(1' paragraphs[1].RunIndex);                  Assert.AreEqual(4' paragraphs[1].RunCount);                    Assert.AreEqual(35' paragraphs[2].CharIndex); // "\n"                  Assert.AreEqual(1' paragraphs[2].CharCount);                  Assert.AreEqual(5' paragraphs[2].RunIndex);                  Assert.AreEqual(1' paragraphs[2].RunCount);                    Assert.AreEqual(36' paragraphs[3].CharIndex); // "( )"                  Assert.AreEqual(3' paragraphs[3].CharCount);                  Assert.AreEqual(6' paragraphs[3].RunIndex);                  Assert.AreEqual(3' paragraphs[3].RunCount);                    // Check run table.                  Assert.AreEqual(9' document.RunCount);                  Run* runs = document.GetRunZero();                    Assert.AreEqual(RunKind.Text' runs[0].RunKind); // "Some text' lalala.\n"                  Assert.AreEqual(19' runs[0].CharCount);                  Assert.AreEqual(1' runs[0].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[1].RunKind); // "More text."                  Assert.AreEqual(10' runs[1].CharCount);                  Assert.AreEqual(1' runs[1].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[2].RunKind); // "Tab"                  Assert.AreEqual(3' runs[2].CharCount);                  Assert.AreEqual(2' runs[2].StyleIndex);                    Assert.AreEqual(RunKind.Tab' runs[3].RunKind); // "\t"                  Assert.AreEqual(1' runs[3].CharCount);                  Assert.AreEqual(2' runs[3].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[4].RunKind); // ".\n"                  Assert.AreEqual(2' runs[4].CharCount);                  Assert.AreEqual(2' runs[4].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[5].RunKind); // "\n"                  Assert.AreEqual(1' runs[5].CharCount);                  Assert.AreEqual(3' runs[5].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[6].RunKind); // "("                  Assert.AreEqual(1' runs[6].CharCount);                  Assert.AreEqual(2' runs[6].StyleIndex);                    Assert.AreEqual(RunKind.Object' runs[7].RunKind); // "("                  Assert.AreEqual(1' runs[7].CharCount);                  Assert.AreEqual(2' runs[7].StyleIndex);                  Assert.AreEqual(0' runs[7].ObjectIndex);                    Assert.AreEqual(RunKind.Text' runs[8].RunKind); // ")"                  Assert.AreEqual(1' runs[8].CharCount);                  Assert.AreEqual(2' runs[8].StyleIndex);                    // Check that paragraph changed notifications were raised as needed.                  Assert.AreElementsEqual(new[] { 0' 1' 2' 2' 3' 3' 3 }' changedParagraphIndices);              });
Magic Number,Gallio.Common.Splash.Tests,SplashDocumentTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Common\Gallio.Common.Splash.Tests\SplashDocumentTest.cs,AppendStuff,The following statement contains a magic number: Assert.Multiple(() =>              {                  // Check char content.                  Assert.AreEqual("Some text' lalala.\nMore text.Tab\t.\n\n( )"' document.ToString());                    // Check style table.                  Assert.AreEqual(4' document.StyleCount);                  Assert.AreEqual(Style.Default' document.LookupStyle(0));                  Assert.AreEqual(style1' document.LookupStyle(1));                  Assert.AreEqual(style2' document.LookupStyle(2));                  Assert.AreEqual(style3' document.LookupStyle(3));                    // Check object table.                  Assert.AreEqual(1' document.ObjectCount);                  Assert.AreEqual(embeddedObject' document.LookupObject(0));                    // Check paragraph table.                  Assert.AreEqual(4' document.ParagraphCount);                  Paragraph* paragraphs = document.GetParagraphZero();                    Assert.AreEqual(0' paragraphs[0].CharIndex); // "Some text' lalala.\n"                  Assert.AreEqual(19' paragraphs[0].CharCount);                  Assert.AreEqual(0' paragraphs[0].RunIndex);                  Assert.AreEqual(1' paragraphs[0].RunCount);                    Assert.AreEqual(19' paragraphs[1].CharIndex); // "More text.Tab\t.\n"                  Assert.AreEqual(16' paragraphs[1].CharCount);                  Assert.AreEqual(1' paragraphs[1].RunIndex);                  Assert.AreEqual(4' paragraphs[1].RunCount);                    Assert.AreEqual(35' paragraphs[2].CharIndex); // "\n"                  Assert.AreEqual(1' paragraphs[2].CharCount);                  Assert.AreEqual(5' paragraphs[2].RunIndex);                  Assert.AreEqual(1' paragraphs[2].RunCount);                    Assert.AreEqual(36' paragraphs[3].CharIndex); // "( )"                  Assert.AreEqual(3' paragraphs[3].CharCount);                  Assert.AreEqual(6' paragraphs[3].RunIndex);                  Assert.AreEqual(3' paragraphs[3].RunCount);                    // Check run table.                  Assert.AreEqual(9' document.RunCount);                  Run* runs = document.GetRunZero();                    Assert.AreEqual(RunKind.Text' runs[0].RunKind); // "Some text' lalala.\n"                  Assert.AreEqual(19' runs[0].CharCount);                  Assert.AreEqual(1' runs[0].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[1].RunKind); // "More text."                  Assert.AreEqual(10' runs[1].CharCount);                  Assert.AreEqual(1' runs[1].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[2].RunKind); // "Tab"                  Assert.AreEqual(3' runs[2].CharCount);                  Assert.AreEqual(2' runs[2].StyleIndex);                    Assert.AreEqual(RunKind.Tab' runs[3].RunKind); // "\t"                  Assert.AreEqual(1' runs[3].CharCount);                  Assert.AreEqual(2' runs[3].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[4].RunKind); // ".\n"                  Assert.AreEqual(2' runs[4].CharCount);                  Assert.AreEqual(2' runs[4].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[5].RunKind); // "\n"                  Assert.AreEqual(1' runs[5].CharCount);                  Assert.AreEqual(3' runs[5].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[6].RunKind); // "("                  Assert.AreEqual(1' runs[6].CharCount);                  Assert.AreEqual(2' runs[6].StyleIndex);                    Assert.AreEqual(RunKind.Object' runs[7].RunKind); // "("                  Assert.AreEqual(1' runs[7].CharCount);                  Assert.AreEqual(2' runs[7].StyleIndex);                  Assert.AreEqual(0' runs[7].ObjectIndex);                    Assert.AreEqual(RunKind.Text' runs[8].RunKind); // ")"                  Assert.AreEqual(1' runs[8].CharCount);                  Assert.AreEqual(2' runs[8].StyleIndex);                    // Check that paragraph changed notifications were raised as needed.                  Assert.AreElementsEqual(new[] { 0' 1' 2' 2' 3' 3' 3 }' changedParagraphIndices);              });
Magic Number,Gallio.Common.Splash.Tests,SplashDocumentTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Common\Gallio.Common.Splash.Tests\SplashDocumentTest.cs,AppendStuff,The following statement contains a magic number: Assert.Multiple(() =>              {                  // Check char content.                  Assert.AreEqual("Some text' lalala.\nMore text.Tab\t.\n\n( )"' document.ToString());                    // Check style table.                  Assert.AreEqual(4' document.StyleCount);                  Assert.AreEqual(Style.Default' document.LookupStyle(0));                  Assert.AreEqual(style1' document.LookupStyle(1));                  Assert.AreEqual(style2' document.LookupStyle(2));                  Assert.AreEqual(style3' document.LookupStyle(3));                    // Check object table.                  Assert.AreEqual(1' document.ObjectCount);                  Assert.AreEqual(embeddedObject' document.LookupObject(0));                    // Check paragraph table.                  Assert.AreEqual(4' document.ParagraphCount);                  Paragraph* paragraphs = document.GetParagraphZero();                    Assert.AreEqual(0' paragraphs[0].CharIndex); // "Some text' lalala.\n"                  Assert.AreEqual(19' paragraphs[0].CharCount);                  Assert.AreEqual(0' paragraphs[0].RunIndex);                  Assert.AreEqual(1' paragraphs[0].RunCount);                    Assert.AreEqual(19' paragraphs[1].CharIndex); // "More text.Tab\t.\n"                  Assert.AreEqual(16' paragraphs[1].CharCount);                  Assert.AreEqual(1' paragraphs[1].RunIndex);                  Assert.AreEqual(4' paragraphs[1].RunCount);                    Assert.AreEqual(35' paragraphs[2].CharIndex); // "\n"                  Assert.AreEqual(1' paragraphs[2].CharCount);                  Assert.AreEqual(5' paragraphs[2].RunIndex);                  Assert.AreEqual(1' paragraphs[2].RunCount);                    Assert.AreEqual(36' paragraphs[3].CharIndex); // "( )"                  Assert.AreEqual(3' paragraphs[3].CharCount);                  Assert.AreEqual(6' paragraphs[3].RunIndex);                  Assert.AreEqual(3' paragraphs[3].RunCount);                    // Check run table.                  Assert.AreEqual(9' document.RunCount);                  Run* runs = document.GetRunZero();                    Assert.AreEqual(RunKind.Text' runs[0].RunKind); // "Some text' lalala.\n"                  Assert.AreEqual(19' runs[0].CharCount);                  Assert.AreEqual(1' runs[0].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[1].RunKind); // "More text."                  Assert.AreEqual(10' runs[1].CharCount);                  Assert.AreEqual(1' runs[1].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[2].RunKind); // "Tab"                  Assert.AreEqual(3' runs[2].CharCount);                  Assert.AreEqual(2' runs[2].StyleIndex);                    Assert.AreEqual(RunKind.Tab' runs[3].RunKind); // "\t"                  Assert.AreEqual(1' runs[3].CharCount);                  Assert.AreEqual(2' runs[3].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[4].RunKind); // ".\n"                  Assert.AreEqual(2' runs[4].CharCount);                  Assert.AreEqual(2' runs[4].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[5].RunKind); // "\n"                  Assert.AreEqual(1' runs[5].CharCount);                  Assert.AreEqual(3' runs[5].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[6].RunKind); // "("                  Assert.AreEqual(1' runs[6].CharCount);                  Assert.AreEqual(2' runs[6].StyleIndex);                    Assert.AreEqual(RunKind.Object' runs[7].RunKind); // "("                  Assert.AreEqual(1' runs[7].CharCount);                  Assert.AreEqual(2' runs[7].StyleIndex);                  Assert.AreEqual(0' runs[7].ObjectIndex);                    Assert.AreEqual(RunKind.Text' runs[8].RunKind); // ")"                  Assert.AreEqual(1' runs[8].CharCount);                  Assert.AreEqual(2' runs[8].StyleIndex);                    // Check that paragraph changed notifications were raised as needed.                  Assert.AreElementsEqual(new[] { 0' 1' 2' 2' 3' 3' 3 }' changedParagraphIndices);              });
Magic Number,Gallio.Common.Splash.Tests,SplashDocumentTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Common\Gallio.Common.Splash.Tests\SplashDocumentTest.cs,AppendStuff,The following statement contains a magic number: Assert.Multiple(() =>              {                  // Check char content.                  Assert.AreEqual("Some text' lalala.\nMore text.Tab\t.\n\n( )"' document.ToString());                    // Check style table.                  Assert.AreEqual(4' document.StyleCount);                  Assert.AreEqual(Style.Default' document.LookupStyle(0));                  Assert.AreEqual(style1' document.LookupStyle(1));                  Assert.AreEqual(style2' document.LookupStyle(2));                  Assert.AreEqual(style3' document.LookupStyle(3));                    // Check object table.                  Assert.AreEqual(1' document.ObjectCount);                  Assert.AreEqual(embeddedObject' document.LookupObject(0));                    // Check paragraph table.                  Assert.AreEqual(4' document.ParagraphCount);                  Paragraph* paragraphs = document.GetParagraphZero();                    Assert.AreEqual(0' paragraphs[0].CharIndex); // "Some text' lalala.\n"                  Assert.AreEqual(19' paragraphs[0].CharCount);                  Assert.AreEqual(0' paragraphs[0].RunIndex);                  Assert.AreEqual(1' paragraphs[0].RunCount);                    Assert.AreEqual(19' paragraphs[1].CharIndex); // "More text.Tab\t.\n"                  Assert.AreEqual(16' paragraphs[1].CharCount);                  Assert.AreEqual(1' paragraphs[1].RunIndex);                  Assert.AreEqual(4' paragraphs[1].RunCount);                    Assert.AreEqual(35' paragraphs[2].CharIndex); // "\n"                  Assert.AreEqual(1' paragraphs[2].CharCount);                  Assert.AreEqual(5' paragraphs[2].RunIndex);                  Assert.AreEqual(1' paragraphs[2].RunCount);                    Assert.AreEqual(36' paragraphs[3].CharIndex); // "( )"                  Assert.AreEqual(3' paragraphs[3].CharCount);                  Assert.AreEqual(6' paragraphs[3].RunIndex);                  Assert.AreEqual(3' paragraphs[3].RunCount);                    // Check run table.                  Assert.AreEqual(9' document.RunCount);                  Run* runs = document.GetRunZero();                    Assert.AreEqual(RunKind.Text' runs[0].RunKind); // "Some text' lalala.\n"                  Assert.AreEqual(19' runs[0].CharCount);                  Assert.AreEqual(1' runs[0].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[1].RunKind); // "More text."                  Assert.AreEqual(10' runs[1].CharCount);                  Assert.AreEqual(1' runs[1].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[2].RunKind); // "Tab"                  Assert.AreEqual(3' runs[2].CharCount);                  Assert.AreEqual(2' runs[2].StyleIndex);                    Assert.AreEqual(RunKind.Tab' runs[3].RunKind); // "\t"                  Assert.AreEqual(1' runs[3].CharCount);                  Assert.AreEqual(2' runs[3].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[4].RunKind); // ".\n"                  Assert.AreEqual(2' runs[4].CharCount);                  Assert.AreEqual(2' runs[4].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[5].RunKind); // "\n"                  Assert.AreEqual(1' runs[5].CharCount);                  Assert.AreEqual(3' runs[5].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[6].RunKind); // "("                  Assert.AreEqual(1' runs[6].CharCount);                  Assert.AreEqual(2' runs[6].StyleIndex);                    Assert.AreEqual(RunKind.Object' runs[7].RunKind); // "("                  Assert.AreEqual(1' runs[7].CharCount);                  Assert.AreEqual(2' runs[7].StyleIndex);                  Assert.AreEqual(0' runs[7].ObjectIndex);                    Assert.AreEqual(RunKind.Text' runs[8].RunKind); // ")"                  Assert.AreEqual(1' runs[8].CharCount);                  Assert.AreEqual(2' runs[8].StyleIndex);                    // Check that paragraph changed notifications were raised as needed.                  Assert.AreElementsEqual(new[] { 0' 1' 2' 2' 3' 3' 3 }' changedParagraphIndices);              });
Magic Number,Gallio.Common.Splash.Tests,SplashDocumentTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Common\Gallio.Common.Splash.Tests\SplashDocumentTest.cs,AppendStuff,The following statement contains a magic number: Assert.Multiple(() =>              {                  // Check char content.                  Assert.AreEqual("Some text' lalala.\nMore text.Tab\t.\n\n( )"' document.ToString());                    // Check style table.                  Assert.AreEqual(4' document.StyleCount);                  Assert.AreEqual(Style.Default' document.LookupStyle(0));                  Assert.AreEqual(style1' document.LookupStyle(1));                  Assert.AreEqual(style2' document.LookupStyle(2));                  Assert.AreEqual(style3' document.LookupStyle(3));                    // Check object table.                  Assert.AreEqual(1' document.ObjectCount);                  Assert.AreEqual(embeddedObject' document.LookupObject(0));                    // Check paragraph table.                  Assert.AreEqual(4' document.ParagraphCount);                  Paragraph* paragraphs = document.GetParagraphZero();                    Assert.AreEqual(0' paragraphs[0].CharIndex); // "Some text' lalala.\n"                  Assert.AreEqual(19' paragraphs[0].CharCount);                  Assert.AreEqual(0' paragraphs[0].RunIndex);                  Assert.AreEqual(1' paragraphs[0].RunCount);                    Assert.AreEqual(19' paragraphs[1].CharIndex); // "More text.Tab\t.\n"                  Assert.AreEqual(16' paragraphs[1].CharCount);                  Assert.AreEqual(1' paragraphs[1].RunIndex);                  Assert.AreEqual(4' paragraphs[1].RunCount);                    Assert.AreEqual(35' paragraphs[2].CharIndex); // "\n"                  Assert.AreEqual(1' paragraphs[2].CharCount);                  Assert.AreEqual(5' paragraphs[2].RunIndex);                  Assert.AreEqual(1' paragraphs[2].RunCount);                    Assert.AreEqual(36' paragraphs[3].CharIndex); // "( )"                  Assert.AreEqual(3' paragraphs[3].CharCount);                  Assert.AreEqual(6' paragraphs[3].RunIndex);                  Assert.AreEqual(3' paragraphs[3].RunCount);                    // Check run table.                  Assert.AreEqual(9' document.RunCount);                  Run* runs = document.GetRunZero();                    Assert.AreEqual(RunKind.Text' runs[0].RunKind); // "Some text' lalala.\n"                  Assert.AreEqual(19' runs[0].CharCount);                  Assert.AreEqual(1' runs[0].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[1].RunKind); // "More text."                  Assert.AreEqual(10' runs[1].CharCount);                  Assert.AreEqual(1' runs[1].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[2].RunKind); // "Tab"                  Assert.AreEqual(3' runs[2].CharCount);                  Assert.AreEqual(2' runs[2].StyleIndex);                    Assert.AreEqual(RunKind.Tab' runs[3].RunKind); // "\t"                  Assert.AreEqual(1' runs[3].CharCount);                  Assert.AreEqual(2' runs[3].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[4].RunKind); // ".\n"                  Assert.AreEqual(2' runs[4].CharCount);                  Assert.AreEqual(2' runs[4].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[5].RunKind); // "\n"                  Assert.AreEqual(1' runs[5].CharCount);                  Assert.AreEqual(3' runs[5].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[6].RunKind); // "("                  Assert.AreEqual(1' runs[6].CharCount);                  Assert.AreEqual(2' runs[6].StyleIndex);                    Assert.AreEqual(RunKind.Object' runs[7].RunKind); // "("                  Assert.AreEqual(1' runs[7].CharCount);                  Assert.AreEqual(2' runs[7].StyleIndex);                  Assert.AreEqual(0' runs[7].ObjectIndex);                    Assert.AreEqual(RunKind.Text' runs[8].RunKind); // ")"                  Assert.AreEqual(1' runs[8].CharCount);                  Assert.AreEqual(2' runs[8].StyleIndex);                    // Check that paragraph changed notifications were raised as needed.                  Assert.AreElementsEqual(new[] { 0' 1' 2' 2' 3' 3' 3 }' changedParagraphIndices);              });
Magic Number,Gallio.Common.Splash.Tests,SplashDocumentTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Common\Gallio.Common.Splash.Tests\SplashDocumentTest.cs,AppendStuff,The following statement contains a magic number: Assert.Multiple(() =>              {                  // Check char content.                  Assert.AreEqual("Some text' lalala.\nMore text.Tab\t.\n\n( )"' document.ToString());                    // Check style table.                  Assert.AreEqual(4' document.StyleCount);                  Assert.AreEqual(Style.Default' document.LookupStyle(0));                  Assert.AreEqual(style1' document.LookupStyle(1));                  Assert.AreEqual(style2' document.LookupStyle(2));                  Assert.AreEqual(style3' document.LookupStyle(3));                    // Check object table.                  Assert.AreEqual(1' document.ObjectCount);                  Assert.AreEqual(embeddedObject' document.LookupObject(0));                    // Check paragraph table.                  Assert.AreEqual(4' document.ParagraphCount);                  Paragraph* paragraphs = document.GetParagraphZero();                    Assert.AreEqual(0' paragraphs[0].CharIndex); // "Some text' lalala.\n"                  Assert.AreEqual(19' paragraphs[0].CharCount);                  Assert.AreEqual(0' paragraphs[0].RunIndex);                  Assert.AreEqual(1' paragraphs[0].RunCount);                    Assert.AreEqual(19' paragraphs[1].CharIndex); // "More text.Tab\t.\n"                  Assert.AreEqual(16' paragraphs[1].CharCount);                  Assert.AreEqual(1' paragraphs[1].RunIndex);                  Assert.AreEqual(4' paragraphs[1].RunCount);                    Assert.AreEqual(35' paragraphs[2].CharIndex); // "\n"                  Assert.AreEqual(1' paragraphs[2].CharCount);                  Assert.AreEqual(5' paragraphs[2].RunIndex);                  Assert.AreEqual(1' paragraphs[2].RunCount);                    Assert.AreEqual(36' paragraphs[3].CharIndex); // "( )"                  Assert.AreEqual(3' paragraphs[3].CharCount);                  Assert.AreEqual(6' paragraphs[3].RunIndex);                  Assert.AreEqual(3' paragraphs[3].RunCount);                    // Check run table.                  Assert.AreEqual(9' document.RunCount);                  Run* runs = document.GetRunZero();                    Assert.AreEqual(RunKind.Text' runs[0].RunKind); // "Some text' lalala.\n"                  Assert.AreEqual(19' runs[0].CharCount);                  Assert.AreEqual(1' runs[0].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[1].RunKind); // "More text."                  Assert.AreEqual(10' runs[1].CharCount);                  Assert.AreEqual(1' runs[1].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[2].RunKind); // "Tab"                  Assert.AreEqual(3' runs[2].CharCount);                  Assert.AreEqual(2' runs[2].StyleIndex);                    Assert.AreEqual(RunKind.Tab' runs[3].RunKind); // "\t"                  Assert.AreEqual(1' runs[3].CharCount);                  Assert.AreEqual(2' runs[3].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[4].RunKind); // ".\n"                  Assert.AreEqual(2' runs[4].CharCount);                  Assert.AreEqual(2' runs[4].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[5].RunKind); // "\n"                  Assert.AreEqual(1' runs[5].CharCount);                  Assert.AreEqual(3' runs[5].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[6].RunKind); // "("                  Assert.AreEqual(1' runs[6].CharCount);                  Assert.AreEqual(2' runs[6].StyleIndex);                    Assert.AreEqual(RunKind.Object' runs[7].RunKind); // "("                  Assert.AreEqual(1' runs[7].CharCount);                  Assert.AreEqual(2' runs[7].StyleIndex);                  Assert.AreEqual(0' runs[7].ObjectIndex);                    Assert.AreEqual(RunKind.Text' runs[8].RunKind); // ")"                  Assert.AreEqual(1' runs[8].CharCount);                  Assert.AreEqual(2' runs[8].StyleIndex);                    // Check that paragraph changed notifications were raised as needed.                  Assert.AreElementsEqual(new[] { 0' 1' 2' 2' 3' 3' 3 }' changedParagraphIndices);              });
Magic Number,Gallio.Common.Splash.Tests,SplashDocumentTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Common\Gallio.Common.Splash.Tests\SplashDocumentTest.cs,AppendStuff,The following statement contains a magic number: Assert.Multiple(() =>              {                  // Check char content.                  Assert.AreEqual("Some text' lalala.\nMore text.Tab\t.\n\n( )"' document.ToString());                    // Check style table.                  Assert.AreEqual(4' document.StyleCount);                  Assert.AreEqual(Style.Default' document.LookupStyle(0));                  Assert.AreEqual(style1' document.LookupStyle(1));                  Assert.AreEqual(style2' document.LookupStyle(2));                  Assert.AreEqual(style3' document.LookupStyle(3));                    // Check object table.                  Assert.AreEqual(1' document.ObjectCount);                  Assert.AreEqual(embeddedObject' document.LookupObject(0));                    // Check paragraph table.                  Assert.AreEqual(4' document.ParagraphCount);                  Paragraph* paragraphs = document.GetParagraphZero();                    Assert.AreEqual(0' paragraphs[0].CharIndex); // "Some text' lalala.\n"                  Assert.AreEqual(19' paragraphs[0].CharCount);                  Assert.AreEqual(0' paragraphs[0].RunIndex);                  Assert.AreEqual(1' paragraphs[0].RunCount);                    Assert.AreEqual(19' paragraphs[1].CharIndex); // "More text.Tab\t.\n"                  Assert.AreEqual(16' paragraphs[1].CharCount);                  Assert.AreEqual(1' paragraphs[1].RunIndex);                  Assert.AreEqual(4' paragraphs[1].RunCount);                    Assert.AreEqual(35' paragraphs[2].CharIndex); // "\n"                  Assert.AreEqual(1' paragraphs[2].CharCount);                  Assert.AreEqual(5' paragraphs[2].RunIndex);                  Assert.AreEqual(1' paragraphs[2].RunCount);                    Assert.AreEqual(36' paragraphs[3].CharIndex); // "( )"                  Assert.AreEqual(3' paragraphs[3].CharCount);                  Assert.AreEqual(6' paragraphs[3].RunIndex);                  Assert.AreEqual(3' paragraphs[3].RunCount);                    // Check run table.                  Assert.AreEqual(9' document.RunCount);                  Run* runs = document.GetRunZero();                    Assert.AreEqual(RunKind.Text' runs[0].RunKind); // "Some text' lalala.\n"                  Assert.AreEqual(19' runs[0].CharCount);                  Assert.AreEqual(1' runs[0].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[1].RunKind); // "More text."                  Assert.AreEqual(10' runs[1].CharCount);                  Assert.AreEqual(1' runs[1].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[2].RunKind); // "Tab"                  Assert.AreEqual(3' runs[2].CharCount);                  Assert.AreEqual(2' runs[2].StyleIndex);                    Assert.AreEqual(RunKind.Tab' runs[3].RunKind); // "\t"                  Assert.AreEqual(1' runs[3].CharCount);                  Assert.AreEqual(2' runs[3].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[4].RunKind); // ".\n"                  Assert.AreEqual(2' runs[4].CharCount);                  Assert.AreEqual(2' runs[4].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[5].RunKind); // "\n"                  Assert.AreEqual(1' runs[5].CharCount);                  Assert.AreEqual(3' runs[5].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[6].RunKind); // "("                  Assert.AreEqual(1' runs[6].CharCount);                  Assert.AreEqual(2' runs[6].StyleIndex);                    Assert.AreEqual(RunKind.Object' runs[7].RunKind); // "("                  Assert.AreEqual(1' runs[7].CharCount);                  Assert.AreEqual(2' runs[7].StyleIndex);                  Assert.AreEqual(0' runs[7].ObjectIndex);                    Assert.AreEqual(RunKind.Text' runs[8].RunKind); // ")"                  Assert.AreEqual(1' runs[8].CharCount);                  Assert.AreEqual(2' runs[8].StyleIndex);                    // Check that paragraph changed notifications were raised as needed.                  Assert.AreElementsEqual(new[] { 0' 1' 2' 2' 3' 3' 3 }' changedParagraphIndices);              });
Magic Number,Gallio.Common.Splash.Tests,SplashDocumentTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Common\Gallio.Common.Splash.Tests\SplashDocumentTest.cs,AppendStuff,The following statement contains a magic number: Assert.Multiple(() =>              {                  // Check char content.                  Assert.AreEqual("Some text' lalala.\nMore text.Tab\t.\n\n( )"' document.ToString());                    // Check style table.                  Assert.AreEqual(4' document.StyleCount);                  Assert.AreEqual(Style.Default' document.LookupStyle(0));                  Assert.AreEqual(style1' document.LookupStyle(1));                  Assert.AreEqual(style2' document.LookupStyle(2));                  Assert.AreEqual(style3' document.LookupStyle(3));                    // Check object table.                  Assert.AreEqual(1' document.ObjectCount);                  Assert.AreEqual(embeddedObject' document.LookupObject(0));                    // Check paragraph table.                  Assert.AreEqual(4' document.ParagraphCount);                  Paragraph* paragraphs = document.GetParagraphZero();                    Assert.AreEqual(0' paragraphs[0].CharIndex); // "Some text' lalala.\n"                  Assert.AreEqual(19' paragraphs[0].CharCount);                  Assert.AreEqual(0' paragraphs[0].RunIndex);                  Assert.AreEqual(1' paragraphs[0].RunCount);                    Assert.AreEqual(19' paragraphs[1].CharIndex); // "More text.Tab\t.\n"                  Assert.AreEqual(16' paragraphs[1].CharCount);                  Assert.AreEqual(1' paragraphs[1].RunIndex);                  Assert.AreEqual(4' paragraphs[1].RunCount);                    Assert.AreEqual(35' paragraphs[2].CharIndex); // "\n"                  Assert.AreEqual(1' paragraphs[2].CharCount);                  Assert.AreEqual(5' paragraphs[2].RunIndex);                  Assert.AreEqual(1' paragraphs[2].RunCount);                    Assert.AreEqual(36' paragraphs[3].CharIndex); // "( )"                  Assert.AreEqual(3' paragraphs[3].CharCount);                  Assert.AreEqual(6' paragraphs[3].RunIndex);                  Assert.AreEqual(3' paragraphs[3].RunCount);                    // Check run table.                  Assert.AreEqual(9' document.RunCount);                  Run* runs = document.GetRunZero();                    Assert.AreEqual(RunKind.Text' runs[0].RunKind); // "Some text' lalala.\n"                  Assert.AreEqual(19' runs[0].CharCount);                  Assert.AreEqual(1' runs[0].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[1].RunKind); // "More text."                  Assert.AreEqual(10' runs[1].CharCount);                  Assert.AreEqual(1' runs[1].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[2].RunKind); // "Tab"                  Assert.AreEqual(3' runs[2].CharCount);                  Assert.AreEqual(2' runs[2].StyleIndex);                    Assert.AreEqual(RunKind.Tab' runs[3].RunKind); // "\t"                  Assert.AreEqual(1' runs[3].CharCount);                  Assert.AreEqual(2' runs[3].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[4].RunKind); // ".\n"                  Assert.AreEqual(2' runs[4].CharCount);                  Assert.AreEqual(2' runs[4].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[5].RunKind); // "\n"                  Assert.AreEqual(1' runs[5].CharCount);                  Assert.AreEqual(3' runs[5].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[6].RunKind); // "("                  Assert.AreEqual(1' runs[6].CharCount);                  Assert.AreEqual(2' runs[6].StyleIndex);                    Assert.AreEqual(RunKind.Object' runs[7].RunKind); // "("                  Assert.AreEqual(1' runs[7].CharCount);                  Assert.AreEqual(2' runs[7].StyleIndex);                  Assert.AreEqual(0' runs[7].ObjectIndex);                    Assert.AreEqual(RunKind.Text' runs[8].RunKind); // ")"                  Assert.AreEqual(1' runs[8].CharCount);                  Assert.AreEqual(2' runs[8].StyleIndex);                    // Check that paragraph changed notifications were raised as needed.                  Assert.AreElementsEqual(new[] { 0' 1' 2' 2' 3' 3' 3 }' changedParagraphIndices);              });
Magic Number,Gallio.Common.Splash.Tests,SplashDocumentTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Common\Gallio.Common.Splash.Tests\SplashDocumentTest.cs,AppendStuff,The following statement contains a magic number: Assert.Multiple(() =>              {                  // Check char content.                  Assert.AreEqual("Some text' lalala.\nMore text.Tab\t.\n\n( )"' document.ToString());                    // Check style table.                  Assert.AreEqual(4' document.StyleCount);                  Assert.AreEqual(Style.Default' document.LookupStyle(0));                  Assert.AreEqual(style1' document.LookupStyle(1));                  Assert.AreEqual(style2' document.LookupStyle(2));                  Assert.AreEqual(style3' document.LookupStyle(3));                    // Check object table.                  Assert.AreEqual(1' document.ObjectCount);                  Assert.AreEqual(embeddedObject' document.LookupObject(0));                    // Check paragraph table.                  Assert.AreEqual(4' document.ParagraphCount);                  Paragraph* paragraphs = document.GetParagraphZero();                    Assert.AreEqual(0' paragraphs[0].CharIndex); // "Some text' lalala.\n"                  Assert.AreEqual(19' paragraphs[0].CharCount);                  Assert.AreEqual(0' paragraphs[0].RunIndex);                  Assert.AreEqual(1' paragraphs[0].RunCount);                    Assert.AreEqual(19' paragraphs[1].CharIndex); // "More text.Tab\t.\n"                  Assert.AreEqual(16' paragraphs[1].CharCount);                  Assert.AreEqual(1' paragraphs[1].RunIndex);                  Assert.AreEqual(4' paragraphs[1].RunCount);                    Assert.AreEqual(35' paragraphs[2].CharIndex); // "\n"                  Assert.AreEqual(1' paragraphs[2].CharCount);                  Assert.AreEqual(5' paragraphs[2].RunIndex);                  Assert.AreEqual(1' paragraphs[2].RunCount);                    Assert.AreEqual(36' paragraphs[3].CharIndex); // "( )"                  Assert.AreEqual(3' paragraphs[3].CharCount);                  Assert.AreEqual(6' paragraphs[3].RunIndex);                  Assert.AreEqual(3' paragraphs[3].RunCount);                    // Check run table.                  Assert.AreEqual(9' document.RunCount);                  Run* runs = document.GetRunZero();                    Assert.AreEqual(RunKind.Text' runs[0].RunKind); // "Some text' lalala.\n"                  Assert.AreEqual(19' runs[0].CharCount);                  Assert.AreEqual(1' runs[0].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[1].RunKind); // "More text."                  Assert.AreEqual(10' runs[1].CharCount);                  Assert.AreEqual(1' runs[1].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[2].RunKind); // "Tab"                  Assert.AreEqual(3' runs[2].CharCount);                  Assert.AreEqual(2' runs[2].StyleIndex);                    Assert.AreEqual(RunKind.Tab' runs[3].RunKind); // "\t"                  Assert.AreEqual(1' runs[3].CharCount);                  Assert.AreEqual(2' runs[3].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[4].RunKind); // ".\n"                  Assert.AreEqual(2' runs[4].CharCount);                  Assert.AreEqual(2' runs[4].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[5].RunKind); // "\n"                  Assert.AreEqual(1' runs[5].CharCount);                  Assert.AreEqual(3' runs[5].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[6].RunKind); // "("                  Assert.AreEqual(1' runs[6].CharCount);                  Assert.AreEqual(2' runs[6].StyleIndex);                    Assert.AreEqual(RunKind.Object' runs[7].RunKind); // "("                  Assert.AreEqual(1' runs[7].CharCount);                  Assert.AreEqual(2' runs[7].StyleIndex);                  Assert.AreEqual(0' runs[7].ObjectIndex);                    Assert.AreEqual(RunKind.Text' runs[8].RunKind); // ")"                  Assert.AreEqual(1' runs[8].CharCount);                  Assert.AreEqual(2' runs[8].StyleIndex);                    // Check that paragraph changed notifications were raised as needed.                  Assert.AreElementsEqual(new[] { 0' 1' 2' 2' 3' 3' 3 }' changedParagraphIndices);              });
Magic Number,Gallio.Common.Splash.Tests,SplashDocumentTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Common\Gallio.Common.Splash.Tests\SplashDocumentTest.cs,AppendStuff,The following statement contains a magic number: Assert.Multiple(() =>              {                  // Check char content.                  Assert.AreEqual("Some text' lalala.\nMore text.Tab\t.\n\n( )"' document.ToString());                    // Check style table.                  Assert.AreEqual(4' document.StyleCount);                  Assert.AreEqual(Style.Default' document.LookupStyle(0));                  Assert.AreEqual(style1' document.LookupStyle(1));                  Assert.AreEqual(style2' document.LookupStyle(2));                  Assert.AreEqual(style3' document.LookupStyle(3));                    // Check object table.                  Assert.AreEqual(1' document.ObjectCount);                  Assert.AreEqual(embeddedObject' document.LookupObject(0));                    // Check paragraph table.                  Assert.AreEqual(4' document.ParagraphCount);                  Paragraph* paragraphs = document.GetParagraphZero();                    Assert.AreEqual(0' paragraphs[0].CharIndex); // "Some text' lalala.\n"                  Assert.AreEqual(19' paragraphs[0].CharCount);                  Assert.AreEqual(0' paragraphs[0].RunIndex);                  Assert.AreEqual(1' paragraphs[0].RunCount);                    Assert.AreEqual(19' paragraphs[1].CharIndex); // "More text.Tab\t.\n"                  Assert.AreEqual(16' paragraphs[1].CharCount);                  Assert.AreEqual(1' paragraphs[1].RunIndex);                  Assert.AreEqual(4' paragraphs[1].RunCount);                    Assert.AreEqual(35' paragraphs[2].CharIndex); // "\n"                  Assert.AreEqual(1' paragraphs[2].CharCount);                  Assert.AreEqual(5' paragraphs[2].RunIndex);                  Assert.AreEqual(1' paragraphs[2].RunCount);                    Assert.AreEqual(36' paragraphs[3].CharIndex); // "( )"                  Assert.AreEqual(3' paragraphs[3].CharCount);                  Assert.AreEqual(6' paragraphs[3].RunIndex);                  Assert.AreEqual(3' paragraphs[3].RunCount);                    // Check run table.                  Assert.AreEqual(9' document.RunCount);                  Run* runs = document.GetRunZero();                    Assert.AreEqual(RunKind.Text' runs[0].RunKind); // "Some text' lalala.\n"                  Assert.AreEqual(19' runs[0].CharCount);                  Assert.AreEqual(1' runs[0].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[1].RunKind); // "More text."                  Assert.AreEqual(10' runs[1].CharCount);                  Assert.AreEqual(1' runs[1].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[2].RunKind); // "Tab"                  Assert.AreEqual(3' runs[2].CharCount);                  Assert.AreEqual(2' runs[2].StyleIndex);                    Assert.AreEqual(RunKind.Tab' runs[3].RunKind); // "\t"                  Assert.AreEqual(1' runs[3].CharCount);                  Assert.AreEqual(2' runs[3].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[4].RunKind); // ".\n"                  Assert.AreEqual(2' runs[4].CharCount);                  Assert.AreEqual(2' runs[4].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[5].RunKind); // "\n"                  Assert.AreEqual(1' runs[5].CharCount);                  Assert.AreEqual(3' runs[5].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[6].RunKind); // "("                  Assert.AreEqual(1' runs[6].CharCount);                  Assert.AreEqual(2' runs[6].StyleIndex);                    Assert.AreEqual(RunKind.Object' runs[7].RunKind); // "("                  Assert.AreEqual(1' runs[7].CharCount);                  Assert.AreEqual(2' runs[7].StyleIndex);                  Assert.AreEqual(0' runs[7].ObjectIndex);                    Assert.AreEqual(RunKind.Text' runs[8].RunKind); // ")"                  Assert.AreEqual(1' runs[8].CharCount);                  Assert.AreEqual(2' runs[8].StyleIndex);                    // Check that paragraph changed notifications were raised as needed.                  Assert.AreElementsEqual(new[] { 0' 1' 2' 2' 3' 3' 3 }' changedParagraphIndices);              });
Magic Number,Gallio.Common.Splash.Tests,SplashDocumentTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Common\Gallio.Common.Splash.Tests\SplashDocumentTest.cs,AppendStuff,The following statement contains a magic number: Assert.Multiple(() =>              {                  // Check char content.                  Assert.AreEqual("Some text' lalala.\nMore text.Tab\t.\n\n( )"' document.ToString());                    // Check style table.                  Assert.AreEqual(4' document.StyleCount);                  Assert.AreEqual(Style.Default' document.LookupStyle(0));                  Assert.AreEqual(style1' document.LookupStyle(1));                  Assert.AreEqual(style2' document.LookupStyle(2));                  Assert.AreEqual(style3' document.LookupStyle(3));                    // Check object table.                  Assert.AreEqual(1' document.ObjectCount);                  Assert.AreEqual(embeddedObject' document.LookupObject(0));                    // Check paragraph table.                  Assert.AreEqual(4' document.ParagraphCount);                  Paragraph* paragraphs = document.GetParagraphZero();                    Assert.AreEqual(0' paragraphs[0].CharIndex); // "Some text' lalala.\n"                  Assert.AreEqual(19' paragraphs[0].CharCount);                  Assert.AreEqual(0' paragraphs[0].RunIndex);                  Assert.AreEqual(1' paragraphs[0].RunCount);                    Assert.AreEqual(19' paragraphs[1].CharIndex); // "More text.Tab\t.\n"                  Assert.AreEqual(16' paragraphs[1].CharCount);                  Assert.AreEqual(1' paragraphs[1].RunIndex);                  Assert.AreEqual(4' paragraphs[1].RunCount);                    Assert.AreEqual(35' paragraphs[2].CharIndex); // "\n"                  Assert.AreEqual(1' paragraphs[2].CharCount);                  Assert.AreEqual(5' paragraphs[2].RunIndex);                  Assert.AreEqual(1' paragraphs[2].RunCount);                    Assert.AreEqual(36' paragraphs[3].CharIndex); // "( )"                  Assert.AreEqual(3' paragraphs[3].CharCount);                  Assert.AreEqual(6' paragraphs[3].RunIndex);                  Assert.AreEqual(3' paragraphs[3].RunCount);                    // Check run table.                  Assert.AreEqual(9' document.RunCount);                  Run* runs = document.GetRunZero();                    Assert.AreEqual(RunKind.Text' runs[0].RunKind); // "Some text' lalala.\n"                  Assert.AreEqual(19' runs[0].CharCount);                  Assert.AreEqual(1' runs[0].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[1].RunKind); // "More text."                  Assert.AreEqual(10' runs[1].CharCount);                  Assert.AreEqual(1' runs[1].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[2].RunKind); // "Tab"                  Assert.AreEqual(3' runs[2].CharCount);                  Assert.AreEqual(2' runs[2].StyleIndex);                    Assert.AreEqual(RunKind.Tab' runs[3].RunKind); // "\t"                  Assert.AreEqual(1' runs[3].CharCount);                  Assert.AreEqual(2' runs[3].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[4].RunKind); // ".\n"                  Assert.AreEqual(2' runs[4].CharCount);                  Assert.AreEqual(2' runs[4].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[5].RunKind); // "\n"                  Assert.AreEqual(1' runs[5].CharCount);                  Assert.AreEqual(3' runs[5].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[6].RunKind); // "("                  Assert.AreEqual(1' runs[6].CharCount);                  Assert.AreEqual(2' runs[6].StyleIndex);                    Assert.AreEqual(RunKind.Object' runs[7].RunKind); // "("                  Assert.AreEqual(1' runs[7].CharCount);                  Assert.AreEqual(2' runs[7].StyleIndex);                  Assert.AreEqual(0' runs[7].ObjectIndex);                    Assert.AreEqual(RunKind.Text' runs[8].RunKind); // ")"                  Assert.AreEqual(1' runs[8].CharCount);                  Assert.AreEqual(2' runs[8].StyleIndex);                    // Check that paragraph changed notifications were raised as needed.                  Assert.AreElementsEqual(new[] { 0' 1' 2' 2' 3' 3' 3 }' changedParagraphIndices);              });
Magic Number,Gallio.Common.Splash.Tests,SplashDocumentTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Common\Gallio.Common.Splash.Tests\SplashDocumentTest.cs,AppendStuff,The following statement contains a magic number: Assert.Multiple(() =>              {                  // Check char content.                  Assert.AreEqual("Some text' lalala.\nMore text.Tab\t.\n\n( )"' document.ToString());                    // Check style table.                  Assert.AreEqual(4' document.StyleCount);                  Assert.AreEqual(Style.Default' document.LookupStyle(0));                  Assert.AreEqual(style1' document.LookupStyle(1));                  Assert.AreEqual(style2' document.LookupStyle(2));                  Assert.AreEqual(style3' document.LookupStyle(3));                    // Check object table.                  Assert.AreEqual(1' document.ObjectCount);                  Assert.AreEqual(embeddedObject' document.LookupObject(0));                    // Check paragraph table.                  Assert.AreEqual(4' document.ParagraphCount);                  Paragraph* paragraphs = document.GetParagraphZero();                    Assert.AreEqual(0' paragraphs[0].CharIndex); // "Some text' lalala.\n"                  Assert.AreEqual(19' paragraphs[0].CharCount);                  Assert.AreEqual(0' paragraphs[0].RunIndex);                  Assert.AreEqual(1' paragraphs[0].RunCount);                    Assert.AreEqual(19' paragraphs[1].CharIndex); // "More text.Tab\t.\n"                  Assert.AreEqual(16' paragraphs[1].CharCount);                  Assert.AreEqual(1' paragraphs[1].RunIndex);                  Assert.AreEqual(4' paragraphs[1].RunCount);                    Assert.AreEqual(35' paragraphs[2].CharIndex); // "\n"                  Assert.AreEqual(1' paragraphs[2].CharCount);                  Assert.AreEqual(5' paragraphs[2].RunIndex);                  Assert.AreEqual(1' paragraphs[2].RunCount);                    Assert.AreEqual(36' paragraphs[3].CharIndex); // "( )"                  Assert.AreEqual(3' paragraphs[3].CharCount);                  Assert.AreEqual(6' paragraphs[3].RunIndex);                  Assert.AreEqual(3' paragraphs[3].RunCount);                    // Check run table.                  Assert.AreEqual(9' document.RunCount);                  Run* runs = document.GetRunZero();                    Assert.AreEqual(RunKind.Text' runs[0].RunKind); // "Some text' lalala.\n"                  Assert.AreEqual(19' runs[0].CharCount);                  Assert.AreEqual(1' runs[0].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[1].RunKind); // "More text."                  Assert.AreEqual(10' runs[1].CharCount);                  Assert.AreEqual(1' runs[1].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[2].RunKind); // "Tab"                  Assert.AreEqual(3' runs[2].CharCount);                  Assert.AreEqual(2' runs[2].StyleIndex);                    Assert.AreEqual(RunKind.Tab' runs[3].RunKind); // "\t"                  Assert.AreEqual(1' runs[3].CharCount);                  Assert.AreEqual(2' runs[3].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[4].RunKind); // ".\n"                  Assert.AreEqual(2' runs[4].CharCount);                  Assert.AreEqual(2' runs[4].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[5].RunKind); // "\n"                  Assert.AreEqual(1' runs[5].CharCount);                  Assert.AreEqual(3' runs[5].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[6].RunKind); // "("                  Assert.AreEqual(1' runs[6].CharCount);                  Assert.AreEqual(2' runs[6].StyleIndex);                    Assert.AreEqual(RunKind.Object' runs[7].RunKind); // "("                  Assert.AreEqual(1' runs[7].CharCount);                  Assert.AreEqual(2' runs[7].StyleIndex);                  Assert.AreEqual(0' runs[7].ObjectIndex);                    Assert.AreEqual(RunKind.Text' runs[8].RunKind); // ")"                  Assert.AreEqual(1' runs[8].CharCount);                  Assert.AreEqual(2' runs[8].StyleIndex);                    // Check that paragraph changed notifications were raised as needed.                  Assert.AreElementsEqual(new[] { 0' 1' 2' 2' 3' 3' 3 }' changedParagraphIndices);              });
Magic Number,Gallio.Common.Splash.Tests,SplashDocumentTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Common\Gallio.Common.Splash.Tests\SplashDocumentTest.cs,AppendStuff,The following statement contains a magic number: Assert.Multiple(() =>              {                  // Check char content.                  Assert.AreEqual("Some text' lalala.\nMore text.Tab\t.\n\n( )"' document.ToString());                    // Check style table.                  Assert.AreEqual(4' document.StyleCount);                  Assert.AreEqual(Style.Default' document.LookupStyle(0));                  Assert.AreEqual(style1' document.LookupStyle(1));                  Assert.AreEqual(style2' document.LookupStyle(2));                  Assert.AreEqual(style3' document.LookupStyle(3));                    // Check object table.                  Assert.AreEqual(1' document.ObjectCount);                  Assert.AreEqual(embeddedObject' document.LookupObject(0));                    // Check paragraph table.                  Assert.AreEqual(4' document.ParagraphCount);                  Paragraph* paragraphs = document.GetParagraphZero();                    Assert.AreEqual(0' paragraphs[0].CharIndex); // "Some text' lalala.\n"                  Assert.AreEqual(19' paragraphs[0].CharCount);                  Assert.AreEqual(0' paragraphs[0].RunIndex);                  Assert.AreEqual(1' paragraphs[0].RunCount);                    Assert.AreEqual(19' paragraphs[1].CharIndex); // "More text.Tab\t.\n"                  Assert.AreEqual(16' paragraphs[1].CharCount);                  Assert.AreEqual(1' paragraphs[1].RunIndex);                  Assert.AreEqual(4' paragraphs[1].RunCount);                    Assert.AreEqual(35' paragraphs[2].CharIndex); // "\n"                  Assert.AreEqual(1' paragraphs[2].CharCount);                  Assert.AreEqual(5' paragraphs[2].RunIndex);                  Assert.AreEqual(1' paragraphs[2].RunCount);                    Assert.AreEqual(36' paragraphs[3].CharIndex); // "( )"                  Assert.AreEqual(3' paragraphs[3].CharCount);                  Assert.AreEqual(6' paragraphs[3].RunIndex);                  Assert.AreEqual(3' paragraphs[3].RunCount);                    // Check run table.                  Assert.AreEqual(9' document.RunCount);                  Run* runs = document.GetRunZero();                    Assert.AreEqual(RunKind.Text' runs[0].RunKind); // "Some text' lalala.\n"                  Assert.AreEqual(19' runs[0].CharCount);                  Assert.AreEqual(1' runs[0].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[1].RunKind); // "More text."                  Assert.AreEqual(10' runs[1].CharCount);                  Assert.AreEqual(1' runs[1].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[2].RunKind); // "Tab"                  Assert.AreEqual(3' runs[2].CharCount);                  Assert.AreEqual(2' runs[2].StyleIndex);                    Assert.AreEqual(RunKind.Tab' runs[3].RunKind); // "\t"                  Assert.AreEqual(1' runs[3].CharCount);                  Assert.AreEqual(2' runs[3].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[4].RunKind); // ".\n"                  Assert.AreEqual(2' runs[4].CharCount);                  Assert.AreEqual(2' runs[4].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[5].RunKind); // "\n"                  Assert.AreEqual(1' runs[5].CharCount);                  Assert.AreEqual(3' runs[5].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[6].RunKind); // "("                  Assert.AreEqual(1' runs[6].CharCount);                  Assert.AreEqual(2' runs[6].StyleIndex);                    Assert.AreEqual(RunKind.Object' runs[7].RunKind); // "("                  Assert.AreEqual(1' runs[7].CharCount);                  Assert.AreEqual(2' runs[7].StyleIndex);                  Assert.AreEqual(0' runs[7].ObjectIndex);                    Assert.AreEqual(RunKind.Text' runs[8].RunKind); // ")"                  Assert.AreEqual(1' runs[8].CharCount);                  Assert.AreEqual(2' runs[8].StyleIndex);                    // Check that paragraph changed notifications were raised as needed.                  Assert.AreElementsEqual(new[] { 0' 1' 2' 2' 3' 3' 3 }' changedParagraphIndices);              });
Magic Number,Gallio.Common.Splash.Tests,SplashDocumentTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Common\Gallio.Common.Splash.Tests\SplashDocumentTest.cs,AppendStuff,The following statement contains a magic number: Assert.Multiple(() =>              {                  // Check char content.                  Assert.AreEqual("Some text' lalala.\nMore text.Tab\t.\n\n( )"' document.ToString());                    // Check style table.                  Assert.AreEqual(4' document.StyleCount);                  Assert.AreEqual(Style.Default' document.LookupStyle(0));                  Assert.AreEqual(style1' document.LookupStyle(1));                  Assert.AreEqual(style2' document.LookupStyle(2));                  Assert.AreEqual(style3' document.LookupStyle(3));                    // Check object table.                  Assert.AreEqual(1' document.ObjectCount);                  Assert.AreEqual(embeddedObject' document.LookupObject(0));                    // Check paragraph table.                  Assert.AreEqual(4' document.ParagraphCount);                  Paragraph* paragraphs = document.GetParagraphZero();                    Assert.AreEqual(0' paragraphs[0].CharIndex); // "Some text' lalala.\n"                  Assert.AreEqual(19' paragraphs[0].CharCount);                  Assert.AreEqual(0' paragraphs[0].RunIndex);                  Assert.AreEqual(1' paragraphs[0].RunCount);                    Assert.AreEqual(19' paragraphs[1].CharIndex); // "More text.Tab\t.\n"                  Assert.AreEqual(16' paragraphs[1].CharCount);                  Assert.AreEqual(1' paragraphs[1].RunIndex);                  Assert.AreEqual(4' paragraphs[1].RunCount);                    Assert.AreEqual(35' paragraphs[2].CharIndex); // "\n"                  Assert.AreEqual(1' paragraphs[2].CharCount);                  Assert.AreEqual(5' paragraphs[2].RunIndex);                  Assert.AreEqual(1' paragraphs[2].RunCount);                    Assert.AreEqual(36' paragraphs[3].CharIndex); // "( )"                  Assert.AreEqual(3' paragraphs[3].CharCount);                  Assert.AreEqual(6' paragraphs[3].RunIndex);                  Assert.AreEqual(3' paragraphs[3].RunCount);                    // Check run table.                  Assert.AreEqual(9' document.RunCount);                  Run* runs = document.GetRunZero();                    Assert.AreEqual(RunKind.Text' runs[0].RunKind); // "Some text' lalala.\n"                  Assert.AreEqual(19' runs[0].CharCount);                  Assert.AreEqual(1' runs[0].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[1].RunKind); // "More text."                  Assert.AreEqual(10' runs[1].CharCount);                  Assert.AreEqual(1' runs[1].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[2].RunKind); // "Tab"                  Assert.AreEqual(3' runs[2].CharCount);                  Assert.AreEqual(2' runs[2].StyleIndex);                    Assert.AreEqual(RunKind.Tab' runs[3].RunKind); // "\t"                  Assert.AreEqual(1' runs[3].CharCount);                  Assert.AreEqual(2' runs[3].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[4].RunKind); // ".\n"                  Assert.AreEqual(2' runs[4].CharCount);                  Assert.AreEqual(2' runs[4].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[5].RunKind); // "\n"                  Assert.AreEqual(1' runs[5].CharCount);                  Assert.AreEqual(3' runs[5].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[6].RunKind); // "("                  Assert.AreEqual(1' runs[6].CharCount);                  Assert.AreEqual(2' runs[6].StyleIndex);                    Assert.AreEqual(RunKind.Object' runs[7].RunKind); // "("                  Assert.AreEqual(1' runs[7].CharCount);                  Assert.AreEqual(2' runs[7].StyleIndex);                  Assert.AreEqual(0' runs[7].ObjectIndex);                    Assert.AreEqual(RunKind.Text' runs[8].RunKind); // ")"                  Assert.AreEqual(1' runs[8].CharCount);                  Assert.AreEqual(2' runs[8].StyleIndex);                    // Check that paragraph changed notifications were raised as needed.                  Assert.AreElementsEqual(new[] { 0' 1' 2' 2' 3' 3' 3 }' changedParagraphIndices);              });
Magic Number,Gallio.Common.Splash.Tests,SplashDocumentTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Common\Gallio.Common.Splash.Tests\SplashDocumentTest.cs,AppendStuff,The following statement contains a magic number: Assert.Multiple(() =>              {                  // Check char content.                  Assert.AreEqual("Some text' lalala.\nMore text.Tab\t.\n\n( )"' document.ToString());                    // Check style table.                  Assert.AreEqual(4' document.StyleCount);                  Assert.AreEqual(Style.Default' document.LookupStyle(0));                  Assert.AreEqual(style1' document.LookupStyle(1));                  Assert.AreEqual(style2' document.LookupStyle(2));                  Assert.AreEqual(style3' document.LookupStyle(3));                    // Check object table.                  Assert.AreEqual(1' document.ObjectCount);                  Assert.AreEqual(embeddedObject' document.LookupObject(0));                    // Check paragraph table.                  Assert.AreEqual(4' document.ParagraphCount);                  Paragraph* paragraphs = document.GetParagraphZero();                    Assert.AreEqual(0' paragraphs[0].CharIndex); // "Some text' lalala.\n"                  Assert.AreEqual(19' paragraphs[0].CharCount);                  Assert.AreEqual(0' paragraphs[0].RunIndex);                  Assert.AreEqual(1' paragraphs[0].RunCount);                    Assert.AreEqual(19' paragraphs[1].CharIndex); // "More text.Tab\t.\n"                  Assert.AreEqual(16' paragraphs[1].CharCount);                  Assert.AreEqual(1' paragraphs[1].RunIndex);                  Assert.AreEqual(4' paragraphs[1].RunCount);                    Assert.AreEqual(35' paragraphs[2].CharIndex); // "\n"                  Assert.AreEqual(1' paragraphs[2].CharCount);                  Assert.AreEqual(5' paragraphs[2].RunIndex);                  Assert.AreEqual(1' paragraphs[2].RunCount);                    Assert.AreEqual(36' paragraphs[3].CharIndex); // "( )"                  Assert.AreEqual(3' paragraphs[3].CharCount);                  Assert.AreEqual(6' paragraphs[3].RunIndex);                  Assert.AreEqual(3' paragraphs[3].RunCount);                    // Check run table.                  Assert.AreEqual(9' document.RunCount);                  Run* runs = document.GetRunZero();                    Assert.AreEqual(RunKind.Text' runs[0].RunKind); // "Some text' lalala.\n"                  Assert.AreEqual(19' runs[0].CharCount);                  Assert.AreEqual(1' runs[0].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[1].RunKind); // "More text."                  Assert.AreEqual(10' runs[1].CharCount);                  Assert.AreEqual(1' runs[1].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[2].RunKind); // "Tab"                  Assert.AreEqual(3' runs[2].CharCount);                  Assert.AreEqual(2' runs[2].StyleIndex);                    Assert.AreEqual(RunKind.Tab' runs[3].RunKind); // "\t"                  Assert.AreEqual(1' runs[3].CharCount);                  Assert.AreEqual(2' runs[3].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[4].RunKind); // ".\n"                  Assert.AreEqual(2' runs[4].CharCount);                  Assert.AreEqual(2' runs[4].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[5].RunKind); // "\n"                  Assert.AreEqual(1' runs[5].CharCount);                  Assert.AreEqual(3' runs[5].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[6].RunKind); // "("                  Assert.AreEqual(1' runs[6].CharCount);                  Assert.AreEqual(2' runs[6].StyleIndex);                    Assert.AreEqual(RunKind.Object' runs[7].RunKind); // "("                  Assert.AreEqual(1' runs[7].CharCount);                  Assert.AreEqual(2' runs[7].StyleIndex);                  Assert.AreEqual(0' runs[7].ObjectIndex);                    Assert.AreEqual(RunKind.Text' runs[8].RunKind); // ")"                  Assert.AreEqual(1' runs[8].CharCount);                  Assert.AreEqual(2' runs[8].StyleIndex);                    // Check that paragraph changed notifications were raised as needed.                  Assert.AreElementsEqual(new[] { 0' 1' 2' 2' 3' 3' 3 }' changedParagraphIndices);              });
Magic Number,Gallio.Common.Splash.Tests,SplashDocumentTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Common\Gallio.Common.Splash.Tests\SplashDocumentTest.cs,AppendStuff,The following statement contains a magic number: Assert.Multiple(() =>              {                  // Check char content.                  Assert.AreEqual("Some text' lalala.\nMore text.Tab\t.\n\n( )"' document.ToString());                    // Check style table.                  Assert.AreEqual(4' document.StyleCount);                  Assert.AreEqual(Style.Default' document.LookupStyle(0));                  Assert.AreEqual(style1' document.LookupStyle(1));                  Assert.AreEqual(style2' document.LookupStyle(2));                  Assert.AreEqual(style3' document.LookupStyle(3));                    // Check object table.                  Assert.AreEqual(1' document.ObjectCount);                  Assert.AreEqual(embeddedObject' document.LookupObject(0));                    // Check paragraph table.                  Assert.AreEqual(4' document.ParagraphCount);                  Paragraph* paragraphs = document.GetParagraphZero();                    Assert.AreEqual(0' paragraphs[0].CharIndex); // "Some text' lalala.\n"                  Assert.AreEqual(19' paragraphs[0].CharCount);                  Assert.AreEqual(0' paragraphs[0].RunIndex);                  Assert.AreEqual(1' paragraphs[0].RunCount);                    Assert.AreEqual(19' paragraphs[1].CharIndex); // "More text.Tab\t.\n"                  Assert.AreEqual(16' paragraphs[1].CharCount);                  Assert.AreEqual(1' paragraphs[1].RunIndex);                  Assert.AreEqual(4' paragraphs[1].RunCount);                    Assert.AreEqual(35' paragraphs[2].CharIndex); // "\n"                  Assert.AreEqual(1' paragraphs[2].CharCount);                  Assert.AreEqual(5' paragraphs[2].RunIndex);                  Assert.AreEqual(1' paragraphs[2].RunCount);                    Assert.AreEqual(36' paragraphs[3].CharIndex); // "( )"                  Assert.AreEqual(3' paragraphs[3].CharCount);                  Assert.AreEqual(6' paragraphs[3].RunIndex);                  Assert.AreEqual(3' paragraphs[3].RunCount);                    // Check run table.                  Assert.AreEqual(9' document.RunCount);                  Run* runs = document.GetRunZero();                    Assert.AreEqual(RunKind.Text' runs[0].RunKind); // "Some text' lalala.\n"                  Assert.AreEqual(19' runs[0].CharCount);                  Assert.AreEqual(1' runs[0].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[1].RunKind); // "More text."                  Assert.AreEqual(10' runs[1].CharCount);                  Assert.AreEqual(1' runs[1].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[2].RunKind); // "Tab"                  Assert.AreEqual(3' runs[2].CharCount);                  Assert.AreEqual(2' runs[2].StyleIndex);                    Assert.AreEqual(RunKind.Tab' runs[3].RunKind); // "\t"                  Assert.AreEqual(1' runs[3].CharCount);                  Assert.AreEqual(2' runs[3].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[4].RunKind); // ".\n"                  Assert.AreEqual(2' runs[4].CharCount);                  Assert.AreEqual(2' runs[4].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[5].RunKind); // "\n"                  Assert.AreEqual(1' runs[5].CharCount);                  Assert.AreEqual(3' runs[5].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[6].RunKind); // "("                  Assert.AreEqual(1' runs[6].CharCount);                  Assert.AreEqual(2' runs[6].StyleIndex);                    Assert.AreEqual(RunKind.Object' runs[7].RunKind); // "("                  Assert.AreEqual(1' runs[7].CharCount);                  Assert.AreEqual(2' runs[7].StyleIndex);                  Assert.AreEqual(0' runs[7].ObjectIndex);                    Assert.AreEqual(RunKind.Text' runs[8].RunKind); // ")"                  Assert.AreEqual(1' runs[8].CharCount);                  Assert.AreEqual(2' runs[8].StyleIndex);                    // Check that paragraph changed notifications were raised as needed.                  Assert.AreElementsEqual(new[] { 0' 1' 2' 2' 3' 3' 3 }' changedParagraphIndices);              });
Magic Number,Gallio.Common.Splash.Tests,SplashDocumentTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Common\Gallio.Common.Splash.Tests\SplashDocumentTest.cs,AppendStuff,The following statement contains a magic number: Assert.Multiple(() =>              {                  // Check char content.                  Assert.AreEqual("Some text' lalala.\nMore text.Tab\t.\n\n( )"' document.ToString());                    // Check style table.                  Assert.AreEqual(4' document.StyleCount);                  Assert.AreEqual(Style.Default' document.LookupStyle(0));                  Assert.AreEqual(style1' document.LookupStyle(1));                  Assert.AreEqual(style2' document.LookupStyle(2));                  Assert.AreEqual(style3' document.LookupStyle(3));                    // Check object table.                  Assert.AreEqual(1' document.ObjectCount);                  Assert.AreEqual(embeddedObject' document.LookupObject(0));                    // Check paragraph table.                  Assert.AreEqual(4' document.ParagraphCount);                  Paragraph* paragraphs = document.GetParagraphZero();                    Assert.AreEqual(0' paragraphs[0].CharIndex); // "Some text' lalala.\n"                  Assert.AreEqual(19' paragraphs[0].CharCount);                  Assert.AreEqual(0' paragraphs[0].RunIndex);                  Assert.AreEqual(1' paragraphs[0].RunCount);                    Assert.AreEqual(19' paragraphs[1].CharIndex); // "More text.Tab\t.\n"                  Assert.AreEqual(16' paragraphs[1].CharCount);                  Assert.AreEqual(1' paragraphs[1].RunIndex);                  Assert.AreEqual(4' paragraphs[1].RunCount);                    Assert.AreEqual(35' paragraphs[2].CharIndex); // "\n"                  Assert.AreEqual(1' paragraphs[2].CharCount);                  Assert.AreEqual(5' paragraphs[2].RunIndex);                  Assert.AreEqual(1' paragraphs[2].RunCount);                    Assert.AreEqual(36' paragraphs[3].CharIndex); // "( )"                  Assert.AreEqual(3' paragraphs[3].CharCount);                  Assert.AreEqual(6' paragraphs[3].RunIndex);                  Assert.AreEqual(3' paragraphs[3].RunCount);                    // Check run table.                  Assert.AreEqual(9' document.RunCount);                  Run* runs = document.GetRunZero();                    Assert.AreEqual(RunKind.Text' runs[0].RunKind); // "Some text' lalala.\n"                  Assert.AreEqual(19' runs[0].CharCount);                  Assert.AreEqual(1' runs[0].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[1].RunKind); // "More text."                  Assert.AreEqual(10' runs[1].CharCount);                  Assert.AreEqual(1' runs[1].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[2].RunKind); // "Tab"                  Assert.AreEqual(3' runs[2].CharCount);                  Assert.AreEqual(2' runs[2].StyleIndex);                    Assert.AreEqual(RunKind.Tab' runs[3].RunKind); // "\t"                  Assert.AreEqual(1' runs[3].CharCount);                  Assert.AreEqual(2' runs[3].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[4].RunKind); // ".\n"                  Assert.AreEqual(2' runs[4].CharCount);                  Assert.AreEqual(2' runs[4].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[5].RunKind); // "\n"                  Assert.AreEqual(1' runs[5].CharCount);                  Assert.AreEqual(3' runs[5].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[6].RunKind); // "("                  Assert.AreEqual(1' runs[6].CharCount);                  Assert.AreEqual(2' runs[6].StyleIndex);                    Assert.AreEqual(RunKind.Object' runs[7].RunKind); // "("                  Assert.AreEqual(1' runs[7].CharCount);                  Assert.AreEqual(2' runs[7].StyleIndex);                  Assert.AreEqual(0' runs[7].ObjectIndex);                    Assert.AreEqual(RunKind.Text' runs[8].RunKind); // ")"                  Assert.AreEqual(1' runs[8].CharCount);                  Assert.AreEqual(2' runs[8].StyleIndex);                    // Check that paragraph changed notifications were raised as needed.                  Assert.AreElementsEqual(new[] { 0' 1' 2' 2' 3' 3' 3 }' changedParagraphIndices);              });
Magic Number,Gallio.Common.Splash.Tests,SplashDocumentTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Common\Gallio.Common.Splash.Tests\SplashDocumentTest.cs,AppendStuff,The following statement contains a magic number: Assert.Multiple(() =>              {                  // Check char content.                  Assert.AreEqual("Some text' lalala.\nMore text.Tab\t.\n\n( )"' document.ToString());                    // Check style table.                  Assert.AreEqual(4' document.StyleCount);                  Assert.AreEqual(Style.Default' document.LookupStyle(0));                  Assert.AreEqual(style1' document.LookupStyle(1));                  Assert.AreEqual(style2' document.LookupStyle(2));                  Assert.AreEqual(style3' document.LookupStyle(3));                    // Check object table.                  Assert.AreEqual(1' document.ObjectCount);                  Assert.AreEqual(embeddedObject' document.LookupObject(0));                    // Check paragraph table.                  Assert.AreEqual(4' document.ParagraphCount);                  Paragraph* paragraphs = document.GetParagraphZero();                    Assert.AreEqual(0' paragraphs[0].CharIndex); // "Some text' lalala.\n"                  Assert.AreEqual(19' paragraphs[0].CharCount);                  Assert.AreEqual(0' paragraphs[0].RunIndex);                  Assert.AreEqual(1' paragraphs[0].RunCount);                    Assert.AreEqual(19' paragraphs[1].CharIndex); // "More text.Tab\t.\n"                  Assert.AreEqual(16' paragraphs[1].CharCount);                  Assert.AreEqual(1' paragraphs[1].RunIndex);                  Assert.AreEqual(4' paragraphs[1].RunCount);                    Assert.AreEqual(35' paragraphs[2].CharIndex); // "\n"                  Assert.AreEqual(1' paragraphs[2].CharCount);                  Assert.AreEqual(5' paragraphs[2].RunIndex);                  Assert.AreEqual(1' paragraphs[2].RunCount);                    Assert.AreEqual(36' paragraphs[3].CharIndex); // "( )"                  Assert.AreEqual(3' paragraphs[3].CharCount);                  Assert.AreEqual(6' paragraphs[3].RunIndex);                  Assert.AreEqual(3' paragraphs[3].RunCount);                    // Check run table.                  Assert.AreEqual(9' document.RunCount);                  Run* runs = document.GetRunZero();                    Assert.AreEqual(RunKind.Text' runs[0].RunKind); // "Some text' lalala.\n"                  Assert.AreEqual(19' runs[0].CharCount);                  Assert.AreEqual(1' runs[0].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[1].RunKind); // "More text."                  Assert.AreEqual(10' runs[1].CharCount);                  Assert.AreEqual(1' runs[1].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[2].RunKind); // "Tab"                  Assert.AreEqual(3' runs[2].CharCount);                  Assert.AreEqual(2' runs[2].StyleIndex);                    Assert.AreEqual(RunKind.Tab' runs[3].RunKind); // "\t"                  Assert.AreEqual(1' runs[3].CharCount);                  Assert.AreEqual(2' runs[3].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[4].RunKind); // ".\n"                  Assert.AreEqual(2' runs[4].CharCount);                  Assert.AreEqual(2' runs[4].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[5].RunKind); // "\n"                  Assert.AreEqual(1' runs[5].CharCount);                  Assert.AreEqual(3' runs[5].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[6].RunKind); // "("                  Assert.AreEqual(1' runs[6].CharCount);                  Assert.AreEqual(2' runs[6].StyleIndex);                    Assert.AreEqual(RunKind.Object' runs[7].RunKind); // "("                  Assert.AreEqual(1' runs[7].CharCount);                  Assert.AreEqual(2' runs[7].StyleIndex);                  Assert.AreEqual(0' runs[7].ObjectIndex);                    Assert.AreEqual(RunKind.Text' runs[8].RunKind); // ")"                  Assert.AreEqual(1' runs[8].CharCount);                  Assert.AreEqual(2' runs[8].StyleIndex);                    // Check that paragraph changed notifications were raised as needed.                  Assert.AreElementsEqual(new[] { 0' 1' 2' 2' 3' 3' 3 }' changedParagraphIndices);              });
Magic Number,Gallio.Common.Splash.Tests,SplashDocumentTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Common\Gallio.Common.Splash.Tests\SplashDocumentTest.cs,AppendStuff,The following statement contains a magic number: Assert.Multiple(() =>              {                  // Check char content.                  Assert.AreEqual("Some text' lalala.\nMore text.Tab\t.\n\n( )"' document.ToString());                    // Check style table.                  Assert.AreEqual(4' document.StyleCount);                  Assert.AreEqual(Style.Default' document.LookupStyle(0));                  Assert.AreEqual(style1' document.LookupStyle(1));                  Assert.AreEqual(style2' document.LookupStyle(2));                  Assert.AreEqual(style3' document.LookupStyle(3));                    // Check object table.                  Assert.AreEqual(1' document.ObjectCount);                  Assert.AreEqual(embeddedObject' document.LookupObject(0));                    // Check paragraph table.                  Assert.AreEqual(4' document.ParagraphCount);                  Paragraph* paragraphs = document.GetParagraphZero();                    Assert.AreEqual(0' paragraphs[0].CharIndex); // "Some text' lalala.\n"                  Assert.AreEqual(19' paragraphs[0].CharCount);                  Assert.AreEqual(0' paragraphs[0].RunIndex);                  Assert.AreEqual(1' paragraphs[0].RunCount);                    Assert.AreEqual(19' paragraphs[1].CharIndex); // "More text.Tab\t.\n"                  Assert.AreEqual(16' paragraphs[1].CharCount);                  Assert.AreEqual(1' paragraphs[1].RunIndex);                  Assert.AreEqual(4' paragraphs[1].RunCount);                    Assert.AreEqual(35' paragraphs[2].CharIndex); // "\n"                  Assert.AreEqual(1' paragraphs[2].CharCount);                  Assert.AreEqual(5' paragraphs[2].RunIndex);                  Assert.AreEqual(1' paragraphs[2].RunCount);                    Assert.AreEqual(36' paragraphs[3].CharIndex); // "( )"                  Assert.AreEqual(3' paragraphs[3].CharCount);                  Assert.AreEqual(6' paragraphs[3].RunIndex);                  Assert.AreEqual(3' paragraphs[3].RunCount);                    // Check run table.                  Assert.AreEqual(9' document.RunCount);                  Run* runs = document.GetRunZero();                    Assert.AreEqual(RunKind.Text' runs[0].RunKind); // "Some text' lalala.\n"                  Assert.AreEqual(19' runs[0].CharCount);                  Assert.AreEqual(1' runs[0].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[1].RunKind); // "More text."                  Assert.AreEqual(10' runs[1].CharCount);                  Assert.AreEqual(1' runs[1].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[2].RunKind); // "Tab"                  Assert.AreEqual(3' runs[2].CharCount);                  Assert.AreEqual(2' runs[2].StyleIndex);                    Assert.AreEqual(RunKind.Tab' runs[3].RunKind); // "\t"                  Assert.AreEqual(1' runs[3].CharCount);                  Assert.AreEqual(2' runs[3].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[4].RunKind); // ".\n"                  Assert.AreEqual(2' runs[4].CharCount);                  Assert.AreEqual(2' runs[4].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[5].RunKind); // "\n"                  Assert.AreEqual(1' runs[5].CharCount);                  Assert.AreEqual(3' runs[5].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[6].RunKind); // "("                  Assert.AreEqual(1' runs[6].CharCount);                  Assert.AreEqual(2' runs[6].StyleIndex);                    Assert.AreEqual(RunKind.Object' runs[7].RunKind); // "("                  Assert.AreEqual(1' runs[7].CharCount);                  Assert.AreEqual(2' runs[7].StyleIndex);                  Assert.AreEqual(0' runs[7].ObjectIndex);                    Assert.AreEqual(RunKind.Text' runs[8].RunKind); // ")"                  Assert.AreEqual(1' runs[8].CharCount);                  Assert.AreEqual(2' runs[8].StyleIndex);                    // Check that paragraph changed notifications were raised as needed.                  Assert.AreElementsEqual(new[] { 0' 1' 2' 2' 3' 3' 3 }' changedParagraphIndices);              });
Magic Number,Gallio.Common.Splash.Tests,SplashDocumentTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Common\Gallio.Common.Splash.Tests\SplashDocumentTest.cs,AppendStuff,The following statement contains a magic number: Assert.Multiple(() =>              {                  // Check char content.                  Assert.AreEqual("Some text' lalala.\nMore text.Tab\t.\n\n( )"' document.ToString());                    // Check style table.                  Assert.AreEqual(4' document.StyleCount);                  Assert.AreEqual(Style.Default' document.LookupStyle(0));                  Assert.AreEqual(style1' document.LookupStyle(1));                  Assert.AreEqual(style2' document.LookupStyle(2));                  Assert.AreEqual(style3' document.LookupStyle(3));                    // Check object table.                  Assert.AreEqual(1' document.ObjectCount);                  Assert.AreEqual(embeddedObject' document.LookupObject(0));                    // Check paragraph table.                  Assert.AreEqual(4' document.ParagraphCount);                  Paragraph* paragraphs = document.GetParagraphZero();                    Assert.AreEqual(0' paragraphs[0].CharIndex); // "Some text' lalala.\n"                  Assert.AreEqual(19' paragraphs[0].CharCount);                  Assert.AreEqual(0' paragraphs[0].RunIndex);                  Assert.AreEqual(1' paragraphs[0].RunCount);                    Assert.AreEqual(19' paragraphs[1].CharIndex); // "More text.Tab\t.\n"                  Assert.AreEqual(16' paragraphs[1].CharCount);                  Assert.AreEqual(1' paragraphs[1].RunIndex);                  Assert.AreEqual(4' paragraphs[1].RunCount);                    Assert.AreEqual(35' paragraphs[2].CharIndex); // "\n"                  Assert.AreEqual(1' paragraphs[2].CharCount);                  Assert.AreEqual(5' paragraphs[2].RunIndex);                  Assert.AreEqual(1' paragraphs[2].RunCount);                    Assert.AreEqual(36' paragraphs[3].CharIndex); // "( )"                  Assert.AreEqual(3' paragraphs[3].CharCount);                  Assert.AreEqual(6' paragraphs[3].RunIndex);                  Assert.AreEqual(3' paragraphs[3].RunCount);                    // Check run table.                  Assert.AreEqual(9' document.RunCount);                  Run* runs = document.GetRunZero();                    Assert.AreEqual(RunKind.Text' runs[0].RunKind); // "Some text' lalala.\n"                  Assert.AreEqual(19' runs[0].CharCount);                  Assert.AreEqual(1' runs[0].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[1].RunKind); // "More text."                  Assert.AreEqual(10' runs[1].CharCount);                  Assert.AreEqual(1' runs[1].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[2].RunKind); // "Tab"                  Assert.AreEqual(3' runs[2].CharCount);                  Assert.AreEqual(2' runs[2].StyleIndex);                    Assert.AreEqual(RunKind.Tab' runs[3].RunKind); // "\t"                  Assert.AreEqual(1' runs[3].CharCount);                  Assert.AreEqual(2' runs[3].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[4].RunKind); // ".\n"                  Assert.AreEqual(2' runs[4].CharCount);                  Assert.AreEqual(2' runs[4].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[5].RunKind); // "\n"                  Assert.AreEqual(1' runs[5].CharCount);                  Assert.AreEqual(3' runs[5].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[6].RunKind); // "("                  Assert.AreEqual(1' runs[6].CharCount);                  Assert.AreEqual(2' runs[6].StyleIndex);                    Assert.AreEqual(RunKind.Object' runs[7].RunKind); // "("                  Assert.AreEqual(1' runs[7].CharCount);                  Assert.AreEqual(2' runs[7].StyleIndex);                  Assert.AreEqual(0' runs[7].ObjectIndex);                    Assert.AreEqual(RunKind.Text' runs[8].RunKind); // ")"                  Assert.AreEqual(1' runs[8].CharCount);                  Assert.AreEqual(2' runs[8].StyleIndex);                    // Check that paragraph changed notifications were raised as needed.                  Assert.AreElementsEqual(new[] { 0' 1' 2' 2' 3' 3' 3 }' changedParagraphIndices);              });
Magic Number,Gallio.Common.Splash.Tests,SplashDocumentTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Common\Gallio.Common.Splash.Tests\SplashDocumentTest.cs,AppendStuff,The following statement contains a magic number: Assert.Multiple(() =>              {                  // Check char content.                  Assert.AreEqual("Some text' lalala.\nMore text.Tab\t.\n\n( )"' document.ToString());                    // Check style table.                  Assert.AreEqual(4' document.StyleCount);                  Assert.AreEqual(Style.Default' document.LookupStyle(0));                  Assert.AreEqual(style1' document.LookupStyle(1));                  Assert.AreEqual(style2' document.LookupStyle(2));                  Assert.AreEqual(style3' document.LookupStyle(3));                    // Check object table.                  Assert.AreEqual(1' document.ObjectCount);                  Assert.AreEqual(embeddedObject' document.LookupObject(0));                    // Check paragraph table.                  Assert.AreEqual(4' document.ParagraphCount);                  Paragraph* paragraphs = document.GetParagraphZero();                    Assert.AreEqual(0' paragraphs[0].CharIndex); // "Some text' lalala.\n"                  Assert.AreEqual(19' paragraphs[0].CharCount);                  Assert.AreEqual(0' paragraphs[0].RunIndex);                  Assert.AreEqual(1' paragraphs[0].RunCount);                    Assert.AreEqual(19' paragraphs[1].CharIndex); // "More text.Tab\t.\n"                  Assert.AreEqual(16' paragraphs[1].CharCount);                  Assert.AreEqual(1' paragraphs[1].RunIndex);                  Assert.AreEqual(4' paragraphs[1].RunCount);                    Assert.AreEqual(35' paragraphs[2].CharIndex); // "\n"                  Assert.AreEqual(1' paragraphs[2].CharCount);                  Assert.AreEqual(5' paragraphs[2].RunIndex);                  Assert.AreEqual(1' paragraphs[2].RunCount);                    Assert.AreEqual(36' paragraphs[3].CharIndex); // "( )"                  Assert.AreEqual(3' paragraphs[3].CharCount);                  Assert.AreEqual(6' paragraphs[3].RunIndex);                  Assert.AreEqual(3' paragraphs[3].RunCount);                    // Check run table.                  Assert.AreEqual(9' document.RunCount);                  Run* runs = document.GetRunZero();                    Assert.AreEqual(RunKind.Text' runs[0].RunKind); // "Some text' lalala.\n"                  Assert.AreEqual(19' runs[0].CharCount);                  Assert.AreEqual(1' runs[0].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[1].RunKind); // "More text."                  Assert.AreEqual(10' runs[1].CharCount);                  Assert.AreEqual(1' runs[1].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[2].RunKind); // "Tab"                  Assert.AreEqual(3' runs[2].CharCount);                  Assert.AreEqual(2' runs[2].StyleIndex);                    Assert.AreEqual(RunKind.Tab' runs[3].RunKind); // "\t"                  Assert.AreEqual(1' runs[3].CharCount);                  Assert.AreEqual(2' runs[3].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[4].RunKind); // ".\n"                  Assert.AreEqual(2' runs[4].CharCount);                  Assert.AreEqual(2' runs[4].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[5].RunKind); // "\n"                  Assert.AreEqual(1' runs[5].CharCount);                  Assert.AreEqual(3' runs[5].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[6].RunKind); // "("                  Assert.AreEqual(1' runs[6].CharCount);                  Assert.AreEqual(2' runs[6].StyleIndex);                    Assert.AreEqual(RunKind.Object' runs[7].RunKind); // "("                  Assert.AreEqual(1' runs[7].CharCount);                  Assert.AreEqual(2' runs[7].StyleIndex);                  Assert.AreEqual(0' runs[7].ObjectIndex);                    Assert.AreEqual(RunKind.Text' runs[8].RunKind); // ")"                  Assert.AreEqual(1' runs[8].CharCount);                  Assert.AreEqual(2' runs[8].StyleIndex);                    // Check that paragraph changed notifications were raised as needed.                  Assert.AreElementsEqual(new[] { 0' 1' 2' 2' 3' 3' 3 }' changedParagraphIndices);              });
Magic Number,Gallio.Common.Splash.Tests,SplashDocumentTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Common\Gallio.Common.Splash.Tests\SplashDocumentTest.cs,AppendStuff,The following statement contains a magic number: Assert.Multiple(() =>              {                  // Check char content.                  Assert.AreEqual("Some text' lalala.\nMore text.Tab\t.\n\n( )"' document.ToString());                    // Check style table.                  Assert.AreEqual(4' document.StyleCount);                  Assert.AreEqual(Style.Default' document.LookupStyle(0));                  Assert.AreEqual(style1' document.LookupStyle(1));                  Assert.AreEqual(style2' document.LookupStyle(2));                  Assert.AreEqual(style3' document.LookupStyle(3));                    // Check object table.                  Assert.AreEqual(1' document.ObjectCount);                  Assert.AreEqual(embeddedObject' document.LookupObject(0));                    // Check paragraph table.                  Assert.AreEqual(4' document.ParagraphCount);                  Paragraph* paragraphs = document.GetParagraphZero();                    Assert.AreEqual(0' paragraphs[0].CharIndex); // "Some text' lalala.\n"                  Assert.AreEqual(19' paragraphs[0].CharCount);                  Assert.AreEqual(0' paragraphs[0].RunIndex);                  Assert.AreEqual(1' paragraphs[0].RunCount);                    Assert.AreEqual(19' paragraphs[1].CharIndex); // "More text.Tab\t.\n"                  Assert.AreEqual(16' paragraphs[1].CharCount);                  Assert.AreEqual(1' paragraphs[1].RunIndex);                  Assert.AreEqual(4' paragraphs[1].RunCount);                    Assert.AreEqual(35' paragraphs[2].CharIndex); // "\n"                  Assert.AreEqual(1' paragraphs[2].CharCount);                  Assert.AreEqual(5' paragraphs[2].RunIndex);                  Assert.AreEqual(1' paragraphs[2].RunCount);                    Assert.AreEqual(36' paragraphs[3].CharIndex); // "( )"                  Assert.AreEqual(3' paragraphs[3].CharCount);                  Assert.AreEqual(6' paragraphs[3].RunIndex);                  Assert.AreEqual(3' paragraphs[3].RunCount);                    // Check run table.                  Assert.AreEqual(9' document.RunCount);                  Run* runs = document.GetRunZero();                    Assert.AreEqual(RunKind.Text' runs[0].RunKind); // "Some text' lalala.\n"                  Assert.AreEqual(19' runs[0].CharCount);                  Assert.AreEqual(1' runs[0].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[1].RunKind); // "More text."                  Assert.AreEqual(10' runs[1].CharCount);                  Assert.AreEqual(1' runs[1].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[2].RunKind); // "Tab"                  Assert.AreEqual(3' runs[2].CharCount);                  Assert.AreEqual(2' runs[2].StyleIndex);                    Assert.AreEqual(RunKind.Tab' runs[3].RunKind); // "\t"                  Assert.AreEqual(1' runs[3].CharCount);                  Assert.AreEqual(2' runs[3].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[4].RunKind); // ".\n"                  Assert.AreEqual(2' runs[4].CharCount);                  Assert.AreEqual(2' runs[4].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[5].RunKind); // "\n"                  Assert.AreEqual(1' runs[5].CharCount);                  Assert.AreEqual(3' runs[5].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[6].RunKind); // "("                  Assert.AreEqual(1' runs[6].CharCount);                  Assert.AreEqual(2' runs[6].StyleIndex);                    Assert.AreEqual(RunKind.Object' runs[7].RunKind); // "("                  Assert.AreEqual(1' runs[7].CharCount);                  Assert.AreEqual(2' runs[7].StyleIndex);                  Assert.AreEqual(0' runs[7].ObjectIndex);                    Assert.AreEqual(RunKind.Text' runs[8].RunKind); // ")"                  Assert.AreEqual(1' runs[8].CharCount);                  Assert.AreEqual(2' runs[8].StyleIndex);                    // Check that paragraph changed notifications were raised as needed.                  Assert.AreElementsEqual(new[] { 0' 1' 2' 2' 3' 3' 3 }' changedParagraphIndices);              });
Magic Number,Gallio.Common.Splash.Tests,SplashDocumentTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Common\Gallio.Common.Splash.Tests\SplashDocumentTest.cs,AppendStuff,The following statement contains a magic number: Assert.Multiple(() =>              {                  // Check char content.                  Assert.AreEqual("Some text' lalala.\nMore text.Tab\t.\n\n( )"' document.ToString());                    // Check style table.                  Assert.AreEqual(4' document.StyleCount);                  Assert.AreEqual(Style.Default' document.LookupStyle(0));                  Assert.AreEqual(style1' document.LookupStyle(1));                  Assert.AreEqual(style2' document.LookupStyle(2));                  Assert.AreEqual(style3' document.LookupStyle(3));                    // Check object table.                  Assert.AreEqual(1' document.ObjectCount);                  Assert.AreEqual(embeddedObject' document.LookupObject(0));                    // Check paragraph table.                  Assert.AreEqual(4' document.ParagraphCount);                  Paragraph* paragraphs = document.GetParagraphZero();                    Assert.AreEqual(0' paragraphs[0].CharIndex); // "Some text' lalala.\n"                  Assert.AreEqual(19' paragraphs[0].CharCount);                  Assert.AreEqual(0' paragraphs[0].RunIndex);                  Assert.AreEqual(1' paragraphs[0].RunCount);                    Assert.AreEqual(19' paragraphs[1].CharIndex); // "More text.Tab\t.\n"                  Assert.AreEqual(16' paragraphs[1].CharCount);                  Assert.AreEqual(1' paragraphs[1].RunIndex);                  Assert.AreEqual(4' paragraphs[1].RunCount);                    Assert.AreEqual(35' paragraphs[2].CharIndex); // "\n"                  Assert.AreEqual(1' paragraphs[2].CharCount);                  Assert.AreEqual(5' paragraphs[2].RunIndex);                  Assert.AreEqual(1' paragraphs[2].RunCount);                    Assert.AreEqual(36' paragraphs[3].CharIndex); // "( )"                  Assert.AreEqual(3' paragraphs[3].CharCount);                  Assert.AreEqual(6' paragraphs[3].RunIndex);                  Assert.AreEqual(3' paragraphs[3].RunCount);                    // Check run table.                  Assert.AreEqual(9' document.RunCount);                  Run* runs = document.GetRunZero();                    Assert.AreEqual(RunKind.Text' runs[0].RunKind); // "Some text' lalala.\n"                  Assert.AreEqual(19' runs[0].CharCount);                  Assert.AreEqual(1' runs[0].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[1].RunKind); // "More text."                  Assert.AreEqual(10' runs[1].CharCount);                  Assert.AreEqual(1' runs[1].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[2].RunKind); // "Tab"                  Assert.AreEqual(3' runs[2].CharCount);                  Assert.AreEqual(2' runs[2].StyleIndex);                    Assert.AreEqual(RunKind.Tab' runs[3].RunKind); // "\t"                  Assert.AreEqual(1' runs[3].CharCount);                  Assert.AreEqual(2' runs[3].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[4].RunKind); // ".\n"                  Assert.AreEqual(2' runs[4].CharCount);                  Assert.AreEqual(2' runs[4].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[5].RunKind); // "\n"                  Assert.AreEqual(1' runs[5].CharCount);                  Assert.AreEqual(3' runs[5].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[6].RunKind); // "("                  Assert.AreEqual(1' runs[6].CharCount);                  Assert.AreEqual(2' runs[6].StyleIndex);                    Assert.AreEqual(RunKind.Object' runs[7].RunKind); // "("                  Assert.AreEqual(1' runs[7].CharCount);                  Assert.AreEqual(2' runs[7].StyleIndex);                  Assert.AreEqual(0' runs[7].ObjectIndex);                    Assert.AreEqual(RunKind.Text' runs[8].RunKind); // ")"                  Assert.AreEqual(1' runs[8].CharCount);                  Assert.AreEqual(2' runs[8].StyleIndex);                    // Check that paragraph changed notifications were raised as needed.                  Assert.AreElementsEqual(new[] { 0' 1' 2' 2' 3' 3' 3 }' changedParagraphIndices);              });
Magic Number,Gallio.Common.Splash.Tests,SplashDocumentTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Common\Gallio.Common.Splash.Tests\SplashDocumentTest.cs,AppendStuff,The following statement contains a magic number: Assert.Multiple(() =>              {                  // Check char content.                  Assert.AreEqual("Some text' lalala.\nMore text.Tab\t.\n\n( )"' document.ToString());                    // Check style table.                  Assert.AreEqual(4' document.StyleCount);                  Assert.AreEqual(Style.Default' document.LookupStyle(0));                  Assert.AreEqual(style1' document.LookupStyle(1));                  Assert.AreEqual(style2' document.LookupStyle(2));                  Assert.AreEqual(style3' document.LookupStyle(3));                    // Check object table.                  Assert.AreEqual(1' document.ObjectCount);                  Assert.AreEqual(embeddedObject' document.LookupObject(0));                    // Check paragraph table.                  Assert.AreEqual(4' document.ParagraphCount);                  Paragraph* paragraphs = document.GetParagraphZero();                    Assert.AreEqual(0' paragraphs[0].CharIndex); // "Some text' lalala.\n"                  Assert.AreEqual(19' paragraphs[0].CharCount);                  Assert.AreEqual(0' paragraphs[0].RunIndex);                  Assert.AreEqual(1' paragraphs[0].RunCount);                    Assert.AreEqual(19' paragraphs[1].CharIndex); // "More text.Tab\t.\n"                  Assert.AreEqual(16' paragraphs[1].CharCount);                  Assert.AreEqual(1' paragraphs[1].RunIndex);                  Assert.AreEqual(4' paragraphs[1].RunCount);                    Assert.AreEqual(35' paragraphs[2].CharIndex); // "\n"                  Assert.AreEqual(1' paragraphs[2].CharCount);                  Assert.AreEqual(5' paragraphs[2].RunIndex);                  Assert.AreEqual(1' paragraphs[2].RunCount);                    Assert.AreEqual(36' paragraphs[3].CharIndex); // "( )"                  Assert.AreEqual(3' paragraphs[3].CharCount);                  Assert.AreEqual(6' paragraphs[3].RunIndex);                  Assert.AreEqual(3' paragraphs[3].RunCount);                    // Check run table.                  Assert.AreEqual(9' document.RunCount);                  Run* runs = document.GetRunZero();                    Assert.AreEqual(RunKind.Text' runs[0].RunKind); // "Some text' lalala.\n"                  Assert.AreEqual(19' runs[0].CharCount);                  Assert.AreEqual(1' runs[0].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[1].RunKind); // "More text."                  Assert.AreEqual(10' runs[1].CharCount);                  Assert.AreEqual(1' runs[1].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[2].RunKind); // "Tab"                  Assert.AreEqual(3' runs[2].CharCount);                  Assert.AreEqual(2' runs[2].StyleIndex);                    Assert.AreEqual(RunKind.Tab' runs[3].RunKind); // "\t"                  Assert.AreEqual(1' runs[3].CharCount);                  Assert.AreEqual(2' runs[3].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[4].RunKind); // ".\n"                  Assert.AreEqual(2' runs[4].CharCount);                  Assert.AreEqual(2' runs[4].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[5].RunKind); // "\n"                  Assert.AreEqual(1' runs[5].CharCount);                  Assert.AreEqual(3' runs[5].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[6].RunKind); // "("                  Assert.AreEqual(1' runs[6].CharCount);                  Assert.AreEqual(2' runs[6].StyleIndex);                    Assert.AreEqual(RunKind.Object' runs[7].RunKind); // "("                  Assert.AreEqual(1' runs[7].CharCount);                  Assert.AreEqual(2' runs[7].StyleIndex);                  Assert.AreEqual(0' runs[7].ObjectIndex);                    Assert.AreEqual(RunKind.Text' runs[8].RunKind); // ")"                  Assert.AreEqual(1' runs[8].CharCount);                  Assert.AreEqual(2' runs[8].StyleIndex);                    // Check that paragraph changed notifications were raised as needed.                  Assert.AreElementsEqual(new[] { 0' 1' 2' 2' 3' 3' 3 }' changedParagraphIndices);              });
Magic Number,Gallio.Common.Splash.Tests,SplashDocumentTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Common\Gallio.Common.Splash.Tests\SplashDocumentTest.cs,AppendStuff,The following statement contains a magic number: Assert.Multiple(() =>              {                  // Check char content.                  Assert.AreEqual("Some text' lalala.\nMore text.Tab\t.\n\n( )"' document.ToString());                    // Check style table.                  Assert.AreEqual(4' document.StyleCount);                  Assert.AreEqual(Style.Default' document.LookupStyle(0));                  Assert.AreEqual(style1' document.LookupStyle(1));                  Assert.AreEqual(style2' document.LookupStyle(2));                  Assert.AreEqual(style3' document.LookupStyle(3));                    // Check object table.                  Assert.AreEqual(1' document.ObjectCount);                  Assert.AreEqual(embeddedObject' document.LookupObject(0));                    // Check paragraph table.                  Assert.AreEqual(4' document.ParagraphCount);                  Paragraph* paragraphs = document.GetParagraphZero();                    Assert.AreEqual(0' paragraphs[0].CharIndex); // "Some text' lalala.\n"                  Assert.AreEqual(19' paragraphs[0].CharCount);                  Assert.AreEqual(0' paragraphs[0].RunIndex);                  Assert.AreEqual(1' paragraphs[0].RunCount);                    Assert.AreEqual(19' paragraphs[1].CharIndex); // "More text.Tab\t.\n"                  Assert.AreEqual(16' paragraphs[1].CharCount);                  Assert.AreEqual(1' paragraphs[1].RunIndex);                  Assert.AreEqual(4' paragraphs[1].RunCount);                    Assert.AreEqual(35' paragraphs[2].CharIndex); // "\n"                  Assert.AreEqual(1' paragraphs[2].CharCount);                  Assert.AreEqual(5' paragraphs[2].RunIndex);                  Assert.AreEqual(1' paragraphs[2].RunCount);                    Assert.AreEqual(36' paragraphs[3].CharIndex); // "( )"                  Assert.AreEqual(3' paragraphs[3].CharCount);                  Assert.AreEqual(6' paragraphs[3].RunIndex);                  Assert.AreEqual(3' paragraphs[3].RunCount);                    // Check run table.                  Assert.AreEqual(9' document.RunCount);                  Run* runs = document.GetRunZero();                    Assert.AreEqual(RunKind.Text' runs[0].RunKind); // "Some text' lalala.\n"                  Assert.AreEqual(19' runs[0].CharCount);                  Assert.AreEqual(1' runs[0].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[1].RunKind); // "More text."                  Assert.AreEqual(10' runs[1].CharCount);                  Assert.AreEqual(1' runs[1].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[2].RunKind); // "Tab"                  Assert.AreEqual(3' runs[2].CharCount);                  Assert.AreEqual(2' runs[2].StyleIndex);                    Assert.AreEqual(RunKind.Tab' runs[3].RunKind); // "\t"                  Assert.AreEqual(1' runs[3].CharCount);                  Assert.AreEqual(2' runs[3].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[4].RunKind); // ".\n"                  Assert.AreEqual(2' runs[4].CharCount);                  Assert.AreEqual(2' runs[4].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[5].RunKind); // "\n"                  Assert.AreEqual(1' runs[5].CharCount);                  Assert.AreEqual(3' runs[5].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[6].RunKind); // "("                  Assert.AreEqual(1' runs[6].CharCount);                  Assert.AreEqual(2' runs[6].StyleIndex);                    Assert.AreEqual(RunKind.Object' runs[7].RunKind); // "("                  Assert.AreEqual(1' runs[7].CharCount);                  Assert.AreEqual(2' runs[7].StyleIndex);                  Assert.AreEqual(0' runs[7].ObjectIndex);                    Assert.AreEqual(RunKind.Text' runs[8].RunKind); // ")"                  Assert.AreEqual(1' runs[8].CharCount);                  Assert.AreEqual(2' runs[8].StyleIndex);                    // Check that paragraph changed notifications were raised as needed.                  Assert.AreElementsEqual(new[] { 0' 1' 2' 2' 3' 3' 3 }' changedParagraphIndices);              });
Magic Number,Gallio.Common.Splash.Tests,SplashDocumentTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Common\Gallio.Common.Splash.Tests\SplashDocumentTest.cs,AppendStuff,The following statement contains a magic number: Assert.Multiple(() =>              {                  // Check char content.                  Assert.AreEqual("Some text' lalala.\nMore text.Tab\t.\n\n( )"' document.ToString());                    // Check style table.                  Assert.AreEqual(4' document.StyleCount);                  Assert.AreEqual(Style.Default' document.LookupStyle(0));                  Assert.AreEqual(style1' document.LookupStyle(1));                  Assert.AreEqual(style2' document.LookupStyle(2));                  Assert.AreEqual(style3' document.LookupStyle(3));                    // Check object table.                  Assert.AreEqual(1' document.ObjectCount);                  Assert.AreEqual(embeddedObject' document.LookupObject(0));                    // Check paragraph table.                  Assert.AreEqual(4' document.ParagraphCount);                  Paragraph* paragraphs = document.GetParagraphZero();                    Assert.AreEqual(0' paragraphs[0].CharIndex); // "Some text' lalala.\n"                  Assert.AreEqual(19' paragraphs[0].CharCount);                  Assert.AreEqual(0' paragraphs[0].RunIndex);                  Assert.AreEqual(1' paragraphs[0].RunCount);                    Assert.AreEqual(19' paragraphs[1].CharIndex); // "More text.Tab\t.\n"                  Assert.AreEqual(16' paragraphs[1].CharCount);                  Assert.AreEqual(1' paragraphs[1].RunIndex);                  Assert.AreEqual(4' paragraphs[1].RunCount);                    Assert.AreEqual(35' paragraphs[2].CharIndex); // "\n"                  Assert.AreEqual(1' paragraphs[2].CharCount);                  Assert.AreEqual(5' paragraphs[2].RunIndex);                  Assert.AreEqual(1' paragraphs[2].RunCount);                    Assert.AreEqual(36' paragraphs[3].CharIndex); // "( )"                  Assert.AreEqual(3' paragraphs[3].CharCount);                  Assert.AreEqual(6' paragraphs[3].RunIndex);                  Assert.AreEqual(3' paragraphs[3].RunCount);                    // Check run table.                  Assert.AreEqual(9' document.RunCount);                  Run* runs = document.GetRunZero();                    Assert.AreEqual(RunKind.Text' runs[0].RunKind); // "Some text' lalala.\n"                  Assert.AreEqual(19' runs[0].CharCount);                  Assert.AreEqual(1' runs[0].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[1].RunKind); // "More text."                  Assert.AreEqual(10' runs[1].CharCount);                  Assert.AreEqual(1' runs[1].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[2].RunKind); // "Tab"                  Assert.AreEqual(3' runs[2].CharCount);                  Assert.AreEqual(2' runs[2].StyleIndex);                    Assert.AreEqual(RunKind.Tab' runs[3].RunKind); // "\t"                  Assert.AreEqual(1' runs[3].CharCount);                  Assert.AreEqual(2' runs[3].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[4].RunKind); // ".\n"                  Assert.AreEqual(2' runs[4].CharCount);                  Assert.AreEqual(2' runs[4].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[5].RunKind); // "\n"                  Assert.AreEqual(1' runs[5].CharCount);                  Assert.AreEqual(3' runs[5].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[6].RunKind); // "("                  Assert.AreEqual(1' runs[6].CharCount);                  Assert.AreEqual(2' runs[6].StyleIndex);                    Assert.AreEqual(RunKind.Object' runs[7].RunKind); // "("                  Assert.AreEqual(1' runs[7].CharCount);                  Assert.AreEqual(2' runs[7].StyleIndex);                  Assert.AreEqual(0' runs[7].ObjectIndex);                    Assert.AreEqual(RunKind.Text' runs[8].RunKind); // ")"                  Assert.AreEqual(1' runs[8].CharCount);                  Assert.AreEqual(2' runs[8].StyleIndex);                    // Check that paragraph changed notifications were raised as needed.                  Assert.AreElementsEqual(new[] { 0' 1' 2' 2' 3' 3' 3 }' changedParagraphIndices);              });
Magic Number,Gallio.Common.Splash.Tests,SplashDocumentTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Common\Gallio.Common.Splash.Tests\SplashDocumentTest.cs,AppendStuff,The following statement contains a magic number: Assert.Multiple(() =>              {                  // Check char content.                  Assert.AreEqual("Some text' lalala.\nMore text.Tab\t.\n\n( )"' document.ToString());                    // Check style table.                  Assert.AreEqual(4' document.StyleCount);                  Assert.AreEqual(Style.Default' document.LookupStyle(0));                  Assert.AreEqual(style1' document.LookupStyle(1));                  Assert.AreEqual(style2' document.LookupStyle(2));                  Assert.AreEqual(style3' document.LookupStyle(3));                    // Check object table.                  Assert.AreEqual(1' document.ObjectCount);                  Assert.AreEqual(embeddedObject' document.LookupObject(0));                    // Check paragraph table.                  Assert.AreEqual(4' document.ParagraphCount);                  Paragraph* paragraphs = document.GetParagraphZero();                    Assert.AreEqual(0' paragraphs[0].CharIndex); // "Some text' lalala.\n"                  Assert.AreEqual(19' paragraphs[0].CharCount);                  Assert.AreEqual(0' paragraphs[0].RunIndex);                  Assert.AreEqual(1' paragraphs[0].RunCount);                    Assert.AreEqual(19' paragraphs[1].CharIndex); // "More text.Tab\t.\n"                  Assert.AreEqual(16' paragraphs[1].CharCount);                  Assert.AreEqual(1' paragraphs[1].RunIndex);                  Assert.AreEqual(4' paragraphs[1].RunCount);                    Assert.AreEqual(35' paragraphs[2].CharIndex); // "\n"                  Assert.AreEqual(1' paragraphs[2].CharCount);                  Assert.AreEqual(5' paragraphs[2].RunIndex);                  Assert.AreEqual(1' paragraphs[2].RunCount);                    Assert.AreEqual(36' paragraphs[3].CharIndex); // "( )"                  Assert.AreEqual(3' paragraphs[3].CharCount);                  Assert.AreEqual(6' paragraphs[3].RunIndex);                  Assert.AreEqual(3' paragraphs[3].RunCount);                    // Check run table.                  Assert.AreEqual(9' document.RunCount);                  Run* runs = document.GetRunZero();                    Assert.AreEqual(RunKind.Text' runs[0].RunKind); // "Some text' lalala.\n"                  Assert.AreEqual(19' runs[0].CharCount);                  Assert.AreEqual(1' runs[0].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[1].RunKind); // "More text."                  Assert.AreEqual(10' runs[1].CharCount);                  Assert.AreEqual(1' runs[1].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[2].RunKind); // "Tab"                  Assert.AreEqual(3' runs[2].CharCount);                  Assert.AreEqual(2' runs[2].StyleIndex);                    Assert.AreEqual(RunKind.Tab' runs[3].RunKind); // "\t"                  Assert.AreEqual(1' runs[3].CharCount);                  Assert.AreEqual(2' runs[3].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[4].RunKind); // ".\n"                  Assert.AreEqual(2' runs[4].CharCount);                  Assert.AreEqual(2' runs[4].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[5].RunKind); // "\n"                  Assert.AreEqual(1' runs[5].CharCount);                  Assert.AreEqual(3' runs[5].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[6].RunKind); // "("                  Assert.AreEqual(1' runs[6].CharCount);                  Assert.AreEqual(2' runs[6].StyleIndex);                    Assert.AreEqual(RunKind.Object' runs[7].RunKind); // "("                  Assert.AreEqual(1' runs[7].CharCount);                  Assert.AreEqual(2' runs[7].StyleIndex);                  Assert.AreEqual(0' runs[7].ObjectIndex);                    Assert.AreEqual(RunKind.Text' runs[8].RunKind); // ")"                  Assert.AreEqual(1' runs[8].CharCount);                  Assert.AreEqual(2' runs[8].StyleIndex);                    // Check that paragraph changed notifications were raised as needed.                  Assert.AreElementsEqual(new[] { 0' 1' 2' 2' 3' 3' 3 }' changedParagraphIndices);              });
Magic Number,Gallio.Common.Splash.Tests,SplashDocumentTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Common\Gallio.Common.Splash.Tests\SplashDocumentTest.cs,AppendStuff,The following statement contains a magic number: Assert.Multiple(() =>              {                  // Check char content.                  Assert.AreEqual("Some text' lalala.\nMore text.Tab\t.\n\n( )"' document.ToString());                    // Check style table.                  Assert.AreEqual(4' document.StyleCount);                  Assert.AreEqual(Style.Default' document.LookupStyle(0));                  Assert.AreEqual(style1' document.LookupStyle(1));                  Assert.AreEqual(style2' document.LookupStyle(2));                  Assert.AreEqual(style3' document.LookupStyle(3));                    // Check object table.                  Assert.AreEqual(1' document.ObjectCount);                  Assert.AreEqual(embeddedObject' document.LookupObject(0));                    // Check paragraph table.                  Assert.AreEqual(4' document.ParagraphCount);                  Paragraph* paragraphs = document.GetParagraphZero();                    Assert.AreEqual(0' paragraphs[0].CharIndex); // "Some text' lalala.\n"                  Assert.AreEqual(19' paragraphs[0].CharCount);                  Assert.AreEqual(0' paragraphs[0].RunIndex);                  Assert.AreEqual(1' paragraphs[0].RunCount);                    Assert.AreEqual(19' paragraphs[1].CharIndex); // "More text.Tab\t.\n"                  Assert.AreEqual(16' paragraphs[1].CharCount);                  Assert.AreEqual(1' paragraphs[1].RunIndex);                  Assert.AreEqual(4' paragraphs[1].RunCount);                    Assert.AreEqual(35' paragraphs[2].CharIndex); // "\n"                  Assert.AreEqual(1' paragraphs[2].CharCount);                  Assert.AreEqual(5' paragraphs[2].RunIndex);                  Assert.AreEqual(1' paragraphs[2].RunCount);                    Assert.AreEqual(36' paragraphs[3].CharIndex); // "( )"                  Assert.AreEqual(3' paragraphs[3].CharCount);                  Assert.AreEqual(6' paragraphs[3].RunIndex);                  Assert.AreEqual(3' paragraphs[3].RunCount);                    // Check run table.                  Assert.AreEqual(9' document.RunCount);                  Run* runs = document.GetRunZero();                    Assert.AreEqual(RunKind.Text' runs[0].RunKind); // "Some text' lalala.\n"                  Assert.AreEqual(19' runs[0].CharCount);                  Assert.AreEqual(1' runs[0].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[1].RunKind); // "More text."                  Assert.AreEqual(10' runs[1].CharCount);                  Assert.AreEqual(1' runs[1].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[2].RunKind); // "Tab"                  Assert.AreEqual(3' runs[2].CharCount);                  Assert.AreEqual(2' runs[2].StyleIndex);                    Assert.AreEqual(RunKind.Tab' runs[3].RunKind); // "\t"                  Assert.AreEqual(1' runs[3].CharCount);                  Assert.AreEqual(2' runs[3].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[4].RunKind); // ".\n"                  Assert.AreEqual(2' runs[4].CharCount);                  Assert.AreEqual(2' runs[4].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[5].RunKind); // "\n"                  Assert.AreEqual(1' runs[5].CharCount);                  Assert.AreEqual(3' runs[5].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[6].RunKind); // "("                  Assert.AreEqual(1' runs[6].CharCount);                  Assert.AreEqual(2' runs[6].StyleIndex);                    Assert.AreEqual(RunKind.Object' runs[7].RunKind); // "("                  Assert.AreEqual(1' runs[7].CharCount);                  Assert.AreEqual(2' runs[7].StyleIndex);                  Assert.AreEqual(0' runs[7].ObjectIndex);                    Assert.AreEqual(RunKind.Text' runs[8].RunKind); // ")"                  Assert.AreEqual(1' runs[8].CharCount);                  Assert.AreEqual(2' runs[8].StyleIndex);                    // Check that paragraph changed notifications were raised as needed.                  Assert.AreElementsEqual(new[] { 0' 1' 2' 2' 3' 3' 3 }' changedParagraphIndices);              });
Magic Number,Gallio.Common.Splash.Tests,SplashDocumentTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Common\Gallio.Common.Splash.Tests\SplashDocumentTest.cs,AppendStuff,The following statement contains a magic number: Assert.Multiple(() =>              {                  // Check char content.                  Assert.AreEqual("Some text' lalala.\nMore text.Tab\t.\n\n( )"' document.ToString());                    // Check style table.                  Assert.AreEqual(4' document.StyleCount);                  Assert.AreEqual(Style.Default' document.LookupStyle(0));                  Assert.AreEqual(style1' document.LookupStyle(1));                  Assert.AreEqual(style2' document.LookupStyle(2));                  Assert.AreEqual(style3' document.LookupStyle(3));                    // Check object table.                  Assert.AreEqual(1' document.ObjectCount);                  Assert.AreEqual(embeddedObject' document.LookupObject(0));                    // Check paragraph table.                  Assert.AreEqual(4' document.ParagraphCount);                  Paragraph* paragraphs = document.GetParagraphZero();                    Assert.AreEqual(0' paragraphs[0].CharIndex); // "Some text' lalala.\n"                  Assert.AreEqual(19' paragraphs[0].CharCount);                  Assert.AreEqual(0' paragraphs[0].RunIndex);                  Assert.AreEqual(1' paragraphs[0].RunCount);                    Assert.AreEqual(19' paragraphs[1].CharIndex); // "More text.Tab\t.\n"                  Assert.AreEqual(16' paragraphs[1].CharCount);                  Assert.AreEqual(1' paragraphs[1].RunIndex);                  Assert.AreEqual(4' paragraphs[1].RunCount);                    Assert.AreEqual(35' paragraphs[2].CharIndex); // "\n"                  Assert.AreEqual(1' paragraphs[2].CharCount);                  Assert.AreEqual(5' paragraphs[2].RunIndex);                  Assert.AreEqual(1' paragraphs[2].RunCount);                    Assert.AreEqual(36' paragraphs[3].CharIndex); // "( )"                  Assert.AreEqual(3' paragraphs[3].CharCount);                  Assert.AreEqual(6' paragraphs[3].RunIndex);                  Assert.AreEqual(3' paragraphs[3].RunCount);                    // Check run table.                  Assert.AreEqual(9' document.RunCount);                  Run* runs = document.GetRunZero();                    Assert.AreEqual(RunKind.Text' runs[0].RunKind); // "Some text' lalala.\n"                  Assert.AreEqual(19' runs[0].CharCount);                  Assert.AreEqual(1' runs[0].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[1].RunKind); // "More text."                  Assert.AreEqual(10' runs[1].CharCount);                  Assert.AreEqual(1' runs[1].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[2].RunKind); // "Tab"                  Assert.AreEqual(3' runs[2].CharCount);                  Assert.AreEqual(2' runs[2].StyleIndex);                    Assert.AreEqual(RunKind.Tab' runs[3].RunKind); // "\t"                  Assert.AreEqual(1' runs[3].CharCount);                  Assert.AreEqual(2' runs[3].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[4].RunKind); // ".\n"                  Assert.AreEqual(2' runs[4].CharCount);                  Assert.AreEqual(2' runs[4].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[5].RunKind); // "\n"                  Assert.AreEqual(1' runs[5].CharCount);                  Assert.AreEqual(3' runs[5].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[6].RunKind); // "("                  Assert.AreEqual(1' runs[6].CharCount);                  Assert.AreEqual(2' runs[6].StyleIndex);                    Assert.AreEqual(RunKind.Object' runs[7].RunKind); // "("                  Assert.AreEqual(1' runs[7].CharCount);                  Assert.AreEqual(2' runs[7].StyleIndex);                  Assert.AreEqual(0' runs[7].ObjectIndex);                    Assert.AreEqual(RunKind.Text' runs[8].RunKind); // ")"                  Assert.AreEqual(1' runs[8].CharCount);                  Assert.AreEqual(2' runs[8].StyleIndex);                    // Check that paragraph changed notifications were raised as needed.                  Assert.AreElementsEqual(new[] { 0' 1' 2' 2' 3' 3' 3 }' changedParagraphIndices);              });
Magic Number,Gallio.Common.Splash.Tests,SplashDocumentTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Common\Gallio.Common.Splash.Tests\SplashDocumentTest.cs,AppendStuff,The following statement contains a magic number: Assert.Multiple(() =>              {                  // Check char content.                  Assert.AreEqual("Some text' lalala.\nMore text.Tab\t.\n\n( )"' document.ToString());                    // Check style table.                  Assert.AreEqual(4' document.StyleCount);                  Assert.AreEqual(Style.Default' document.LookupStyle(0));                  Assert.AreEqual(style1' document.LookupStyle(1));                  Assert.AreEqual(style2' document.LookupStyle(2));                  Assert.AreEqual(style3' document.LookupStyle(3));                    // Check object table.                  Assert.AreEqual(1' document.ObjectCount);                  Assert.AreEqual(embeddedObject' document.LookupObject(0));                    // Check paragraph table.                  Assert.AreEqual(4' document.ParagraphCount);                  Paragraph* paragraphs = document.GetParagraphZero();                    Assert.AreEqual(0' paragraphs[0].CharIndex); // "Some text' lalala.\n"                  Assert.AreEqual(19' paragraphs[0].CharCount);                  Assert.AreEqual(0' paragraphs[0].RunIndex);                  Assert.AreEqual(1' paragraphs[0].RunCount);                    Assert.AreEqual(19' paragraphs[1].CharIndex); // "More text.Tab\t.\n"                  Assert.AreEqual(16' paragraphs[1].CharCount);                  Assert.AreEqual(1' paragraphs[1].RunIndex);                  Assert.AreEqual(4' paragraphs[1].RunCount);                    Assert.AreEqual(35' paragraphs[2].CharIndex); // "\n"                  Assert.AreEqual(1' paragraphs[2].CharCount);                  Assert.AreEqual(5' paragraphs[2].RunIndex);                  Assert.AreEqual(1' paragraphs[2].RunCount);                    Assert.AreEqual(36' paragraphs[3].CharIndex); // "( )"                  Assert.AreEqual(3' paragraphs[3].CharCount);                  Assert.AreEqual(6' paragraphs[3].RunIndex);                  Assert.AreEqual(3' paragraphs[3].RunCount);                    // Check run table.                  Assert.AreEqual(9' document.RunCount);                  Run* runs = document.GetRunZero();                    Assert.AreEqual(RunKind.Text' runs[0].RunKind); // "Some text' lalala.\n"                  Assert.AreEqual(19' runs[0].CharCount);                  Assert.AreEqual(1' runs[0].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[1].RunKind); // "More text."                  Assert.AreEqual(10' runs[1].CharCount);                  Assert.AreEqual(1' runs[1].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[2].RunKind); // "Tab"                  Assert.AreEqual(3' runs[2].CharCount);                  Assert.AreEqual(2' runs[2].StyleIndex);                    Assert.AreEqual(RunKind.Tab' runs[3].RunKind); // "\t"                  Assert.AreEqual(1' runs[3].CharCount);                  Assert.AreEqual(2' runs[3].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[4].RunKind); // ".\n"                  Assert.AreEqual(2' runs[4].CharCount);                  Assert.AreEqual(2' runs[4].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[5].RunKind); // "\n"                  Assert.AreEqual(1' runs[5].CharCount);                  Assert.AreEqual(3' runs[5].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[6].RunKind); // "("                  Assert.AreEqual(1' runs[6].CharCount);                  Assert.AreEqual(2' runs[6].StyleIndex);                    Assert.AreEqual(RunKind.Object' runs[7].RunKind); // "("                  Assert.AreEqual(1' runs[7].CharCount);                  Assert.AreEqual(2' runs[7].StyleIndex);                  Assert.AreEqual(0' runs[7].ObjectIndex);                    Assert.AreEqual(RunKind.Text' runs[8].RunKind); // ")"                  Assert.AreEqual(1' runs[8].CharCount);                  Assert.AreEqual(2' runs[8].StyleIndex);                    // Check that paragraph changed notifications were raised as needed.                  Assert.AreElementsEqual(new[] { 0' 1' 2' 2' 3' 3' 3 }' changedParagraphIndices);              });
Magic Number,Gallio.Common.Splash.Tests,SplashDocumentTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Common\Gallio.Common.Splash.Tests\SplashDocumentTest.cs,AppendStuff,The following statement contains a magic number: Assert.Multiple(() =>              {                  // Check char content.                  Assert.AreEqual("Some text' lalala.\nMore text.Tab\t.\n\n( )"' document.ToString());                    // Check style table.                  Assert.AreEqual(4' document.StyleCount);                  Assert.AreEqual(Style.Default' document.LookupStyle(0));                  Assert.AreEqual(style1' document.LookupStyle(1));                  Assert.AreEqual(style2' document.LookupStyle(2));                  Assert.AreEqual(style3' document.LookupStyle(3));                    // Check object table.                  Assert.AreEqual(1' document.ObjectCount);                  Assert.AreEqual(embeddedObject' document.LookupObject(0));                    // Check paragraph table.                  Assert.AreEqual(4' document.ParagraphCount);                  Paragraph* paragraphs = document.GetParagraphZero();                    Assert.AreEqual(0' paragraphs[0].CharIndex); // "Some text' lalala.\n"                  Assert.AreEqual(19' paragraphs[0].CharCount);                  Assert.AreEqual(0' paragraphs[0].RunIndex);                  Assert.AreEqual(1' paragraphs[0].RunCount);                    Assert.AreEqual(19' paragraphs[1].CharIndex); // "More text.Tab\t.\n"                  Assert.AreEqual(16' paragraphs[1].CharCount);                  Assert.AreEqual(1' paragraphs[1].RunIndex);                  Assert.AreEqual(4' paragraphs[1].RunCount);                    Assert.AreEqual(35' paragraphs[2].CharIndex); // "\n"                  Assert.AreEqual(1' paragraphs[2].CharCount);                  Assert.AreEqual(5' paragraphs[2].RunIndex);                  Assert.AreEqual(1' paragraphs[2].RunCount);                    Assert.AreEqual(36' paragraphs[3].CharIndex); // "( )"                  Assert.AreEqual(3' paragraphs[3].CharCount);                  Assert.AreEqual(6' paragraphs[3].RunIndex);                  Assert.AreEqual(3' paragraphs[3].RunCount);                    // Check run table.                  Assert.AreEqual(9' document.RunCount);                  Run* runs = document.GetRunZero();                    Assert.AreEqual(RunKind.Text' runs[0].RunKind); // "Some text' lalala.\n"                  Assert.AreEqual(19' runs[0].CharCount);                  Assert.AreEqual(1' runs[0].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[1].RunKind); // "More text."                  Assert.AreEqual(10' runs[1].CharCount);                  Assert.AreEqual(1' runs[1].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[2].RunKind); // "Tab"                  Assert.AreEqual(3' runs[2].CharCount);                  Assert.AreEqual(2' runs[2].StyleIndex);                    Assert.AreEqual(RunKind.Tab' runs[3].RunKind); // "\t"                  Assert.AreEqual(1' runs[3].CharCount);                  Assert.AreEqual(2' runs[3].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[4].RunKind); // ".\n"                  Assert.AreEqual(2' runs[4].CharCount);                  Assert.AreEqual(2' runs[4].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[5].RunKind); // "\n"                  Assert.AreEqual(1' runs[5].CharCount);                  Assert.AreEqual(3' runs[5].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[6].RunKind); // "("                  Assert.AreEqual(1' runs[6].CharCount);                  Assert.AreEqual(2' runs[6].StyleIndex);                    Assert.AreEqual(RunKind.Object' runs[7].RunKind); // "("                  Assert.AreEqual(1' runs[7].CharCount);                  Assert.AreEqual(2' runs[7].StyleIndex);                  Assert.AreEqual(0' runs[7].ObjectIndex);                    Assert.AreEqual(RunKind.Text' runs[8].RunKind); // ")"                  Assert.AreEqual(1' runs[8].CharCount);                  Assert.AreEqual(2' runs[8].StyleIndex);                    // Check that paragraph changed notifications were raised as needed.                  Assert.AreElementsEqual(new[] { 0' 1' 2' 2' 3' 3' 3 }' changedParagraphIndices);              });
Magic Number,Gallio.Common.Splash.Tests,SplashDocumentTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Common\Gallio.Common.Splash.Tests\SplashDocumentTest.cs,AppendStuff,The following statement contains a magic number: Assert.Multiple(() =>              {                  // Check char content.                  Assert.AreEqual("Some text' lalala.\nMore text.Tab\t.\n\n( )"' document.ToString());                    // Check style table.                  Assert.AreEqual(4' document.StyleCount);                  Assert.AreEqual(Style.Default' document.LookupStyle(0));                  Assert.AreEqual(style1' document.LookupStyle(1));                  Assert.AreEqual(style2' document.LookupStyle(2));                  Assert.AreEqual(style3' document.LookupStyle(3));                    // Check object table.                  Assert.AreEqual(1' document.ObjectCount);                  Assert.AreEqual(embeddedObject' document.LookupObject(0));                    // Check paragraph table.                  Assert.AreEqual(4' document.ParagraphCount);                  Paragraph* paragraphs = document.GetParagraphZero();                    Assert.AreEqual(0' paragraphs[0].CharIndex); // "Some text' lalala.\n"                  Assert.AreEqual(19' paragraphs[0].CharCount);                  Assert.AreEqual(0' paragraphs[0].RunIndex);                  Assert.AreEqual(1' paragraphs[0].RunCount);                    Assert.AreEqual(19' paragraphs[1].CharIndex); // "More text.Tab\t.\n"                  Assert.AreEqual(16' paragraphs[1].CharCount);                  Assert.AreEqual(1' paragraphs[1].RunIndex);                  Assert.AreEqual(4' paragraphs[1].RunCount);                    Assert.AreEqual(35' paragraphs[2].CharIndex); // "\n"                  Assert.AreEqual(1' paragraphs[2].CharCount);                  Assert.AreEqual(5' paragraphs[2].RunIndex);                  Assert.AreEqual(1' paragraphs[2].RunCount);                    Assert.AreEqual(36' paragraphs[3].CharIndex); // "( )"                  Assert.AreEqual(3' paragraphs[3].CharCount);                  Assert.AreEqual(6' paragraphs[3].RunIndex);                  Assert.AreEqual(3' paragraphs[3].RunCount);                    // Check run table.                  Assert.AreEqual(9' document.RunCount);                  Run* runs = document.GetRunZero();                    Assert.AreEqual(RunKind.Text' runs[0].RunKind); // "Some text' lalala.\n"                  Assert.AreEqual(19' runs[0].CharCount);                  Assert.AreEqual(1' runs[0].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[1].RunKind); // "More text."                  Assert.AreEqual(10' runs[1].CharCount);                  Assert.AreEqual(1' runs[1].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[2].RunKind); // "Tab"                  Assert.AreEqual(3' runs[2].CharCount);                  Assert.AreEqual(2' runs[2].StyleIndex);                    Assert.AreEqual(RunKind.Tab' runs[3].RunKind); // "\t"                  Assert.AreEqual(1' runs[3].CharCount);                  Assert.AreEqual(2' runs[3].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[4].RunKind); // ".\n"                  Assert.AreEqual(2' runs[4].CharCount);                  Assert.AreEqual(2' runs[4].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[5].RunKind); // "\n"                  Assert.AreEqual(1' runs[5].CharCount);                  Assert.AreEqual(3' runs[5].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[6].RunKind); // "("                  Assert.AreEqual(1' runs[6].CharCount);                  Assert.AreEqual(2' runs[6].StyleIndex);                    Assert.AreEqual(RunKind.Object' runs[7].RunKind); // "("                  Assert.AreEqual(1' runs[7].CharCount);                  Assert.AreEqual(2' runs[7].StyleIndex);                  Assert.AreEqual(0' runs[7].ObjectIndex);                    Assert.AreEqual(RunKind.Text' runs[8].RunKind); // ")"                  Assert.AreEqual(1' runs[8].CharCount);                  Assert.AreEqual(2' runs[8].StyleIndex);                    // Check that paragraph changed notifications were raised as needed.                  Assert.AreElementsEqual(new[] { 0' 1' 2' 2' 3' 3' 3 }' changedParagraphIndices);              });
Magic Number,Gallio.Common.Splash.Tests,SplashDocumentTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Common\Gallio.Common.Splash.Tests\SplashDocumentTest.cs,AppendStuff,The following statement contains a magic number: Assert.Multiple(() =>              {                  // Check char content.                  Assert.AreEqual("Some text' lalala.\nMore text.Tab\t.\n\n( )"' document.ToString());                    // Check style table.                  Assert.AreEqual(4' document.StyleCount);                  Assert.AreEqual(Style.Default' document.LookupStyle(0));                  Assert.AreEqual(style1' document.LookupStyle(1));                  Assert.AreEqual(style2' document.LookupStyle(2));                  Assert.AreEqual(style3' document.LookupStyle(3));                    // Check object table.                  Assert.AreEqual(1' document.ObjectCount);                  Assert.AreEqual(embeddedObject' document.LookupObject(0));                    // Check paragraph table.                  Assert.AreEqual(4' document.ParagraphCount);                  Paragraph* paragraphs = document.GetParagraphZero();                    Assert.AreEqual(0' paragraphs[0].CharIndex); // "Some text' lalala.\n"                  Assert.AreEqual(19' paragraphs[0].CharCount);                  Assert.AreEqual(0' paragraphs[0].RunIndex);                  Assert.AreEqual(1' paragraphs[0].RunCount);                    Assert.AreEqual(19' paragraphs[1].CharIndex); // "More text.Tab\t.\n"                  Assert.AreEqual(16' paragraphs[1].CharCount);                  Assert.AreEqual(1' paragraphs[1].RunIndex);                  Assert.AreEqual(4' paragraphs[1].RunCount);                    Assert.AreEqual(35' paragraphs[2].CharIndex); // "\n"                  Assert.AreEqual(1' paragraphs[2].CharCount);                  Assert.AreEqual(5' paragraphs[2].RunIndex);                  Assert.AreEqual(1' paragraphs[2].RunCount);                    Assert.AreEqual(36' paragraphs[3].CharIndex); // "( )"                  Assert.AreEqual(3' paragraphs[3].CharCount);                  Assert.AreEqual(6' paragraphs[3].RunIndex);                  Assert.AreEqual(3' paragraphs[3].RunCount);                    // Check run table.                  Assert.AreEqual(9' document.RunCount);                  Run* runs = document.GetRunZero();                    Assert.AreEqual(RunKind.Text' runs[0].RunKind); // "Some text' lalala.\n"                  Assert.AreEqual(19' runs[0].CharCount);                  Assert.AreEqual(1' runs[0].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[1].RunKind); // "More text."                  Assert.AreEqual(10' runs[1].CharCount);                  Assert.AreEqual(1' runs[1].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[2].RunKind); // "Tab"                  Assert.AreEqual(3' runs[2].CharCount);                  Assert.AreEqual(2' runs[2].StyleIndex);                    Assert.AreEqual(RunKind.Tab' runs[3].RunKind); // "\t"                  Assert.AreEqual(1' runs[3].CharCount);                  Assert.AreEqual(2' runs[3].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[4].RunKind); // ".\n"                  Assert.AreEqual(2' runs[4].CharCount);                  Assert.AreEqual(2' runs[4].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[5].RunKind); // "\n"                  Assert.AreEqual(1' runs[5].CharCount);                  Assert.AreEqual(3' runs[5].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[6].RunKind); // "("                  Assert.AreEqual(1' runs[6].CharCount);                  Assert.AreEqual(2' runs[6].StyleIndex);                    Assert.AreEqual(RunKind.Object' runs[7].RunKind); // "("                  Assert.AreEqual(1' runs[7].CharCount);                  Assert.AreEqual(2' runs[7].StyleIndex);                  Assert.AreEqual(0' runs[7].ObjectIndex);                    Assert.AreEqual(RunKind.Text' runs[8].RunKind); // ")"                  Assert.AreEqual(1' runs[8].CharCount);                  Assert.AreEqual(2' runs[8].StyleIndex);                    // Check that paragraph changed notifications were raised as needed.                  Assert.AreElementsEqual(new[] { 0' 1' 2' 2' 3' 3' 3 }' changedParagraphIndices);              });
Magic Number,Gallio.Common.Splash.Tests,SplashDocumentTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Common\Gallio.Common.Splash.Tests\SplashDocumentTest.cs,AppendStuff,The following statement contains a magic number: Assert.Multiple(() =>              {                  // Check char content.                  Assert.AreEqual("Some text' lalala.\nMore text.Tab\t.\n\n( )"' document.ToString());                    // Check style table.                  Assert.AreEqual(4' document.StyleCount);                  Assert.AreEqual(Style.Default' document.LookupStyle(0));                  Assert.AreEqual(style1' document.LookupStyle(1));                  Assert.AreEqual(style2' document.LookupStyle(2));                  Assert.AreEqual(style3' document.LookupStyle(3));                    // Check object table.                  Assert.AreEqual(1' document.ObjectCount);                  Assert.AreEqual(embeddedObject' document.LookupObject(0));                    // Check paragraph table.                  Assert.AreEqual(4' document.ParagraphCount);                  Paragraph* paragraphs = document.GetParagraphZero();                    Assert.AreEqual(0' paragraphs[0].CharIndex); // "Some text' lalala.\n"                  Assert.AreEqual(19' paragraphs[0].CharCount);                  Assert.AreEqual(0' paragraphs[0].RunIndex);                  Assert.AreEqual(1' paragraphs[0].RunCount);                    Assert.AreEqual(19' paragraphs[1].CharIndex); // "More text.Tab\t.\n"                  Assert.AreEqual(16' paragraphs[1].CharCount);                  Assert.AreEqual(1' paragraphs[1].RunIndex);                  Assert.AreEqual(4' paragraphs[1].RunCount);                    Assert.AreEqual(35' paragraphs[2].CharIndex); // "\n"                  Assert.AreEqual(1' paragraphs[2].CharCount);                  Assert.AreEqual(5' paragraphs[2].RunIndex);                  Assert.AreEqual(1' paragraphs[2].RunCount);                    Assert.AreEqual(36' paragraphs[3].CharIndex); // "( )"                  Assert.AreEqual(3' paragraphs[3].CharCount);                  Assert.AreEqual(6' paragraphs[3].RunIndex);                  Assert.AreEqual(3' paragraphs[3].RunCount);                    // Check run table.                  Assert.AreEqual(9' document.RunCount);                  Run* runs = document.GetRunZero();                    Assert.AreEqual(RunKind.Text' runs[0].RunKind); // "Some text' lalala.\n"                  Assert.AreEqual(19' runs[0].CharCount);                  Assert.AreEqual(1' runs[0].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[1].RunKind); // "More text."                  Assert.AreEqual(10' runs[1].CharCount);                  Assert.AreEqual(1' runs[1].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[2].RunKind); // "Tab"                  Assert.AreEqual(3' runs[2].CharCount);                  Assert.AreEqual(2' runs[2].StyleIndex);                    Assert.AreEqual(RunKind.Tab' runs[3].RunKind); // "\t"                  Assert.AreEqual(1' runs[3].CharCount);                  Assert.AreEqual(2' runs[3].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[4].RunKind); // ".\n"                  Assert.AreEqual(2' runs[4].CharCount);                  Assert.AreEqual(2' runs[4].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[5].RunKind); // "\n"                  Assert.AreEqual(1' runs[5].CharCount);                  Assert.AreEqual(3' runs[5].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[6].RunKind); // "("                  Assert.AreEqual(1' runs[6].CharCount);                  Assert.AreEqual(2' runs[6].StyleIndex);                    Assert.AreEqual(RunKind.Object' runs[7].RunKind); // "("                  Assert.AreEqual(1' runs[7].CharCount);                  Assert.AreEqual(2' runs[7].StyleIndex);                  Assert.AreEqual(0' runs[7].ObjectIndex);                    Assert.AreEqual(RunKind.Text' runs[8].RunKind); // ")"                  Assert.AreEqual(1' runs[8].CharCount);                  Assert.AreEqual(2' runs[8].StyleIndex);                    // Check that paragraph changed notifications were raised as needed.                  Assert.AreElementsEqual(new[] { 0' 1' 2' 2' 3' 3' 3 }' changedParagraphIndices);              });
Magic Number,Gallio.Common.Splash.Tests,SplashDocumentTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Common\Gallio.Common.Splash.Tests\SplashDocumentTest.cs,AppendStuff,The following statement contains a magic number: Assert.Multiple(() =>              {                  // Check char content.                  Assert.AreEqual("Some text' lalala.\nMore text.Tab\t.\n\n( )"' document.ToString());                    // Check style table.                  Assert.AreEqual(4' document.StyleCount);                  Assert.AreEqual(Style.Default' document.LookupStyle(0));                  Assert.AreEqual(style1' document.LookupStyle(1));                  Assert.AreEqual(style2' document.LookupStyle(2));                  Assert.AreEqual(style3' document.LookupStyle(3));                    // Check object table.                  Assert.AreEqual(1' document.ObjectCount);                  Assert.AreEqual(embeddedObject' document.LookupObject(0));                    // Check paragraph table.                  Assert.AreEqual(4' document.ParagraphCount);                  Paragraph* paragraphs = document.GetParagraphZero();                    Assert.AreEqual(0' paragraphs[0].CharIndex); // "Some text' lalala.\n"                  Assert.AreEqual(19' paragraphs[0].CharCount);                  Assert.AreEqual(0' paragraphs[0].RunIndex);                  Assert.AreEqual(1' paragraphs[0].RunCount);                    Assert.AreEqual(19' paragraphs[1].CharIndex); // "More text.Tab\t.\n"                  Assert.AreEqual(16' paragraphs[1].CharCount);                  Assert.AreEqual(1' paragraphs[1].RunIndex);                  Assert.AreEqual(4' paragraphs[1].RunCount);                    Assert.AreEqual(35' paragraphs[2].CharIndex); // "\n"                  Assert.AreEqual(1' paragraphs[2].CharCount);                  Assert.AreEqual(5' paragraphs[2].RunIndex);                  Assert.AreEqual(1' paragraphs[2].RunCount);                    Assert.AreEqual(36' paragraphs[3].CharIndex); // "( )"                  Assert.AreEqual(3' paragraphs[3].CharCount);                  Assert.AreEqual(6' paragraphs[3].RunIndex);                  Assert.AreEqual(3' paragraphs[3].RunCount);                    // Check run table.                  Assert.AreEqual(9' document.RunCount);                  Run* runs = document.GetRunZero();                    Assert.AreEqual(RunKind.Text' runs[0].RunKind); // "Some text' lalala.\n"                  Assert.AreEqual(19' runs[0].CharCount);                  Assert.AreEqual(1' runs[0].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[1].RunKind); // "More text."                  Assert.AreEqual(10' runs[1].CharCount);                  Assert.AreEqual(1' runs[1].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[2].RunKind); // "Tab"                  Assert.AreEqual(3' runs[2].CharCount);                  Assert.AreEqual(2' runs[2].StyleIndex);                    Assert.AreEqual(RunKind.Tab' runs[3].RunKind); // "\t"                  Assert.AreEqual(1' runs[3].CharCount);                  Assert.AreEqual(2' runs[3].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[4].RunKind); // ".\n"                  Assert.AreEqual(2' runs[4].CharCount);                  Assert.AreEqual(2' runs[4].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[5].RunKind); // "\n"                  Assert.AreEqual(1' runs[5].CharCount);                  Assert.AreEqual(3' runs[5].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[6].RunKind); // "("                  Assert.AreEqual(1' runs[6].CharCount);                  Assert.AreEqual(2' runs[6].StyleIndex);                    Assert.AreEqual(RunKind.Object' runs[7].RunKind); // "("                  Assert.AreEqual(1' runs[7].CharCount);                  Assert.AreEqual(2' runs[7].StyleIndex);                  Assert.AreEqual(0' runs[7].ObjectIndex);                    Assert.AreEqual(RunKind.Text' runs[8].RunKind); // ")"                  Assert.AreEqual(1' runs[8].CharCount);                  Assert.AreEqual(2' runs[8].StyleIndex);                    // Check that paragraph changed notifications were raised as needed.                  Assert.AreElementsEqual(new[] { 0' 1' 2' 2' 3' 3' 3 }' changedParagraphIndices);              });
Magic Number,Gallio.Common.Splash.Tests,SplashDocumentTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Common\Gallio.Common.Splash.Tests\SplashDocumentTest.cs,AppendStuff,The following statement contains a magic number: Assert.Multiple(() =>              {                  // Check char content.                  Assert.AreEqual("Some text' lalala.\nMore text.Tab\t.\n\n( )"' document.ToString());                    // Check style table.                  Assert.AreEqual(4' document.StyleCount);                  Assert.AreEqual(Style.Default' document.LookupStyle(0));                  Assert.AreEqual(style1' document.LookupStyle(1));                  Assert.AreEqual(style2' document.LookupStyle(2));                  Assert.AreEqual(style3' document.LookupStyle(3));                    // Check object table.                  Assert.AreEqual(1' document.ObjectCount);                  Assert.AreEqual(embeddedObject' document.LookupObject(0));                    // Check paragraph table.                  Assert.AreEqual(4' document.ParagraphCount);                  Paragraph* paragraphs = document.GetParagraphZero();                    Assert.AreEqual(0' paragraphs[0].CharIndex); // "Some text' lalala.\n"                  Assert.AreEqual(19' paragraphs[0].CharCount);                  Assert.AreEqual(0' paragraphs[0].RunIndex);                  Assert.AreEqual(1' paragraphs[0].RunCount);                    Assert.AreEqual(19' paragraphs[1].CharIndex); // "More text.Tab\t.\n"                  Assert.AreEqual(16' paragraphs[1].CharCount);                  Assert.AreEqual(1' paragraphs[1].RunIndex);                  Assert.AreEqual(4' paragraphs[1].RunCount);                    Assert.AreEqual(35' paragraphs[2].CharIndex); // "\n"                  Assert.AreEqual(1' paragraphs[2].CharCount);                  Assert.AreEqual(5' paragraphs[2].RunIndex);                  Assert.AreEqual(1' paragraphs[2].RunCount);                    Assert.AreEqual(36' paragraphs[3].CharIndex); // "( )"                  Assert.AreEqual(3' paragraphs[3].CharCount);                  Assert.AreEqual(6' paragraphs[3].RunIndex);                  Assert.AreEqual(3' paragraphs[3].RunCount);                    // Check run table.                  Assert.AreEqual(9' document.RunCount);                  Run* runs = document.GetRunZero();                    Assert.AreEqual(RunKind.Text' runs[0].RunKind); // "Some text' lalala.\n"                  Assert.AreEqual(19' runs[0].CharCount);                  Assert.AreEqual(1' runs[0].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[1].RunKind); // "More text."                  Assert.AreEqual(10' runs[1].CharCount);                  Assert.AreEqual(1' runs[1].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[2].RunKind); // "Tab"                  Assert.AreEqual(3' runs[2].CharCount);                  Assert.AreEqual(2' runs[2].StyleIndex);                    Assert.AreEqual(RunKind.Tab' runs[3].RunKind); // "\t"                  Assert.AreEqual(1' runs[3].CharCount);                  Assert.AreEqual(2' runs[3].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[4].RunKind); // ".\n"                  Assert.AreEqual(2' runs[4].CharCount);                  Assert.AreEqual(2' runs[4].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[5].RunKind); // "\n"                  Assert.AreEqual(1' runs[5].CharCount);                  Assert.AreEqual(3' runs[5].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[6].RunKind); // "("                  Assert.AreEqual(1' runs[6].CharCount);                  Assert.AreEqual(2' runs[6].StyleIndex);                    Assert.AreEqual(RunKind.Object' runs[7].RunKind); // "("                  Assert.AreEqual(1' runs[7].CharCount);                  Assert.AreEqual(2' runs[7].StyleIndex);                  Assert.AreEqual(0' runs[7].ObjectIndex);                    Assert.AreEqual(RunKind.Text' runs[8].RunKind); // ")"                  Assert.AreEqual(1' runs[8].CharCount);                  Assert.AreEqual(2' runs[8].StyleIndex);                    // Check that paragraph changed notifications were raised as needed.                  Assert.AreElementsEqual(new[] { 0' 1' 2' 2' 3' 3' 3 }' changedParagraphIndices);              });
Magic Number,Gallio.Common.Splash.Tests,SplashDocumentTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Common\Gallio.Common.Splash.Tests\SplashDocumentTest.cs,AppendStuff,The following statement contains a magic number: Assert.Multiple(() =>              {                  // Check char content.                  Assert.AreEqual("Some text' lalala.\nMore text.Tab\t.\n\n( )"' document.ToString());                    // Check style table.                  Assert.AreEqual(4' document.StyleCount);                  Assert.AreEqual(Style.Default' document.LookupStyle(0));                  Assert.AreEqual(style1' document.LookupStyle(1));                  Assert.AreEqual(style2' document.LookupStyle(2));                  Assert.AreEqual(style3' document.LookupStyle(3));                    // Check object table.                  Assert.AreEqual(1' document.ObjectCount);                  Assert.AreEqual(embeddedObject' document.LookupObject(0));                    // Check paragraph table.                  Assert.AreEqual(4' document.ParagraphCount);                  Paragraph* paragraphs = document.GetParagraphZero();                    Assert.AreEqual(0' paragraphs[0].CharIndex); // "Some text' lalala.\n"                  Assert.AreEqual(19' paragraphs[0].CharCount);                  Assert.AreEqual(0' paragraphs[0].RunIndex);                  Assert.AreEqual(1' paragraphs[0].RunCount);                    Assert.AreEqual(19' paragraphs[1].CharIndex); // "More text.Tab\t.\n"                  Assert.AreEqual(16' paragraphs[1].CharCount);                  Assert.AreEqual(1' paragraphs[1].RunIndex);                  Assert.AreEqual(4' paragraphs[1].RunCount);                    Assert.AreEqual(35' paragraphs[2].CharIndex); // "\n"                  Assert.AreEqual(1' paragraphs[2].CharCount);                  Assert.AreEqual(5' paragraphs[2].RunIndex);                  Assert.AreEqual(1' paragraphs[2].RunCount);                    Assert.AreEqual(36' paragraphs[3].CharIndex); // "( )"                  Assert.AreEqual(3' paragraphs[3].CharCount);                  Assert.AreEqual(6' paragraphs[3].RunIndex);                  Assert.AreEqual(3' paragraphs[3].RunCount);                    // Check run table.                  Assert.AreEqual(9' document.RunCount);                  Run* runs = document.GetRunZero();                    Assert.AreEqual(RunKind.Text' runs[0].RunKind); // "Some text' lalala.\n"                  Assert.AreEqual(19' runs[0].CharCount);                  Assert.AreEqual(1' runs[0].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[1].RunKind); // "More text."                  Assert.AreEqual(10' runs[1].CharCount);                  Assert.AreEqual(1' runs[1].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[2].RunKind); // "Tab"                  Assert.AreEqual(3' runs[2].CharCount);                  Assert.AreEqual(2' runs[2].StyleIndex);                    Assert.AreEqual(RunKind.Tab' runs[3].RunKind); // "\t"                  Assert.AreEqual(1' runs[3].CharCount);                  Assert.AreEqual(2' runs[3].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[4].RunKind); // ".\n"                  Assert.AreEqual(2' runs[4].CharCount);                  Assert.AreEqual(2' runs[4].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[5].RunKind); // "\n"                  Assert.AreEqual(1' runs[5].CharCount);                  Assert.AreEqual(3' runs[5].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[6].RunKind); // "("                  Assert.AreEqual(1' runs[6].CharCount);                  Assert.AreEqual(2' runs[6].StyleIndex);                    Assert.AreEqual(RunKind.Object' runs[7].RunKind); // "("                  Assert.AreEqual(1' runs[7].CharCount);                  Assert.AreEqual(2' runs[7].StyleIndex);                  Assert.AreEqual(0' runs[7].ObjectIndex);                    Assert.AreEqual(RunKind.Text' runs[8].RunKind); // ")"                  Assert.AreEqual(1' runs[8].CharCount);                  Assert.AreEqual(2' runs[8].StyleIndex);                    // Check that paragraph changed notifications were raised as needed.                  Assert.AreElementsEqual(new[] { 0' 1' 2' 2' 3' 3' 3 }' changedParagraphIndices);              });
Magic Number,Gallio.Common.Splash.Tests,SplashDocumentTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Common\Gallio.Common.Splash.Tests\SplashDocumentTest.cs,AppendStuff,The following statement contains a magic number: Assert.Multiple(() =>              {                  // Check char content.                  Assert.AreEqual("Some text' lalala.\nMore text.Tab\t.\n\n( )"' document.ToString());                    // Check style table.                  Assert.AreEqual(4' document.StyleCount);                  Assert.AreEqual(Style.Default' document.LookupStyle(0));                  Assert.AreEqual(style1' document.LookupStyle(1));                  Assert.AreEqual(style2' document.LookupStyle(2));                  Assert.AreEqual(style3' document.LookupStyle(3));                    // Check object table.                  Assert.AreEqual(1' document.ObjectCount);                  Assert.AreEqual(embeddedObject' document.LookupObject(0));                    // Check paragraph table.                  Assert.AreEqual(4' document.ParagraphCount);                  Paragraph* paragraphs = document.GetParagraphZero();                    Assert.AreEqual(0' paragraphs[0].CharIndex); // "Some text' lalala.\n"                  Assert.AreEqual(19' paragraphs[0].CharCount);                  Assert.AreEqual(0' paragraphs[0].RunIndex);                  Assert.AreEqual(1' paragraphs[0].RunCount);                    Assert.AreEqual(19' paragraphs[1].CharIndex); // "More text.Tab\t.\n"                  Assert.AreEqual(16' paragraphs[1].CharCount);                  Assert.AreEqual(1' paragraphs[1].RunIndex);                  Assert.AreEqual(4' paragraphs[1].RunCount);                    Assert.AreEqual(35' paragraphs[2].CharIndex); // "\n"                  Assert.AreEqual(1' paragraphs[2].CharCount);                  Assert.AreEqual(5' paragraphs[2].RunIndex);                  Assert.AreEqual(1' paragraphs[2].RunCount);                    Assert.AreEqual(36' paragraphs[3].CharIndex); // "( )"                  Assert.AreEqual(3' paragraphs[3].CharCount);                  Assert.AreEqual(6' paragraphs[3].RunIndex);                  Assert.AreEqual(3' paragraphs[3].RunCount);                    // Check run table.                  Assert.AreEqual(9' document.RunCount);                  Run* runs = document.GetRunZero();                    Assert.AreEqual(RunKind.Text' runs[0].RunKind); // "Some text' lalala.\n"                  Assert.AreEqual(19' runs[0].CharCount);                  Assert.AreEqual(1' runs[0].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[1].RunKind); // "More text."                  Assert.AreEqual(10' runs[1].CharCount);                  Assert.AreEqual(1' runs[1].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[2].RunKind); // "Tab"                  Assert.AreEqual(3' runs[2].CharCount);                  Assert.AreEqual(2' runs[2].StyleIndex);                    Assert.AreEqual(RunKind.Tab' runs[3].RunKind); // "\t"                  Assert.AreEqual(1' runs[3].CharCount);                  Assert.AreEqual(2' runs[3].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[4].RunKind); // ".\n"                  Assert.AreEqual(2' runs[4].CharCount);                  Assert.AreEqual(2' runs[4].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[5].RunKind); // "\n"                  Assert.AreEqual(1' runs[5].CharCount);                  Assert.AreEqual(3' runs[5].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[6].RunKind); // "("                  Assert.AreEqual(1' runs[6].CharCount);                  Assert.AreEqual(2' runs[6].StyleIndex);                    Assert.AreEqual(RunKind.Object' runs[7].RunKind); // "("                  Assert.AreEqual(1' runs[7].CharCount);                  Assert.AreEqual(2' runs[7].StyleIndex);                  Assert.AreEqual(0' runs[7].ObjectIndex);                    Assert.AreEqual(RunKind.Text' runs[8].RunKind); // ")"                  Assert.AreEqual(1' runs[8].CharCount);                  Assert.AreEqual(2' runs[8].StyleIndex);                    // Check that paragraph changed notifications were raised as needed.                  Assert.AreElementsEqual(new[] { 0' 1' 2' 2' 3' 3' 3 }' changedParagraphIndices);              });
Magic Number,Gallio.Common.Splash.Tests,SplashDocumentTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Common\Gallio.Common.Splash.Tests\SplashDocumentTest.cs,AppendStuff,The following statement contains a magic number: Assert.Multiple(() =>              {                  // Check char content.                  Assert.AreEqual("Some text' lalala.\nMore text.Tab\t.\n\n( )"' document.ToString());                    // Check style table.                  Assert.AreEqual(4' document.StyleCount);                  Assert.AreEqual(Style.Default' document.LookupStyle(0));                  Assert.AreEqual(style1' document.LookupStyle(1));                  Assert.AreEqual(style2' document.LookupStyle(2));                  Assert.AreEqual(style3' document.LookupStyle(3));                    // Check object table.                  Assert.AreEqual(1' document.ObjectCount);                  Assert.AreEqual(embeddedObject' document.LookupObject(0));                    // Check paragraph table.                  Assert.AreEqual(4' document.ParagraphCount);                  Paragraph* paragraphs = document.GetParagraphZero();                    Assert.AreEqual(0' paragraphs[0].CharIndex); // "Some text' lalala.\n"                  Assert.AreEqual(19' paragraphs[0].CharCount);                  Assert.AreEqual(0' paragraphs[0].RunIndex);                  Assert.AreEqual(1' paragraphs[0].RunCount);                    Assert.AreEqual(19' paragraphs[1].CharIndex); // "More text.Tab\t.\n"                  Assert.AreEqual(16' paragraphs[1].CharCount);                  Assert.AreEqual(1' paragraphs[1].RunIndex);                  Assert.AreEqual(4' paragraphs[1].RunCount);                    Assert.AreEqual(35' paragraphs[2].CharIndex); // "\n"                  Assert.AreEqual(1' paragraphs[2].CharCount);                  Assert.AreEqual(5' paragraphs[2].RunIndex);                  Assert.AreEqual(1' paragraphs[2].RunCount);                    Assert.AreEqual(36' paragraphs[3].CharIndex); // "( )"                  Assert.AreEqual(3' paragraphs[3].CharCount);                  Assert.AreEqual(6' paragraphs[3].RunIndex);                  Assert.AreEqual(3' paragraphs[3].RunCount);                    // Check run table.                  Assert.AreEqual(9' document.RunCount);                  Run* runs = document.GetRunZero();                    Assert.AreEqual(RunKind.Text' runs[0].RunKind); // "Some text' lalala.\n"                  Assert.AreEqual(19' runs[0].CharCount);                  Assert.AreEqual(1' runs[0].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[1].RunKind); // "More text."                  Assert.AreEqual(10' runs[1].CharCount);                  Assert.AreEqual(1' runs[1].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[2].RunKind); // "Tab"                  Assert.AreEqual(3' runs[2].CharCount);                  Assert.AreEqual(2' runs[2].StyleIndex);                    Assert.AreEqual(RunKind.Tab' runs[3].RunKind); // "\t"                  Assert.AreEqual(1' runs[3].CharCount);                  Assert.AreEqual(2' runs[3].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[4].RunKind); // ".\n"                  Assert.AreEqual(2' runs[4].CharCount);                  Assert.AreEqual(2' runs[4].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[5].RunKind); // "\n"                  Assert.AreEqual(1' runs[5].CharCount);                  Assert.AreEqual(3' runs[5].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[6].RunKind); // "("                  Assert.AreEqual(1' runs[6].CharCount);                  Assert.AreEqual(2' runs[6].StyleIndex);                    Assert.AreEqual(RunKind.Object' runs[7].RunKind); // "("                  Assert.AreEqual(1' runs[7].CharCount);                  Assert.AreEqual(2' runs[7].StyleIndex);                  Assert.AreEqual(0' runs[7].ObjectIndex);                    Assert.AreEqual(RunKind.Text' runs[8].RunKind); // ")"                  Assert.AreEqual(1' runs[8].CharCount);                  Assert.AreEqual(2' runs[8].StyleIndex);                    // Check that paragraph changed notifications were raised as needed.                  Assert.AreElementsEqual(new[] { 0' 1' 2' 2' 3' 3' 3 }' changedParagraphIndices);              });
Magic Number,Gallio.Common.Splash.Tests,SplashDocumentTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Common\Gallio.Common.Splash.Tests\SplashDocumentTest.cs,AppendStuff,The following statement contains a magic number: Assert.Multiple(() =>              {                  // Check char content.                  Assert.AreEqual("Some text' lalala.\nMore text.Tab\t.\n\n( )"' document.ToString());                    // Check style table.                  Assert.AreEqual(4' document.StyleCount);                  Assert.AreEqual(Style.Default' document.LookupStyle(0));                  Assert.AreEqual(style1' document.LookupStyle(1));                  Assert.AreEqual(style2' document.LookupStyle(2));                  Assert.AreEqual(style3' document.LookupStyle(3));                    // Check object table.                  Assert.AreEqual(1' document.ObjectCount);                  Assert.AreEqual(embeddedObject' document.LookupObject(0));                    // Check paragraph table.                  Assert.AreEqual(4' document.ParagraphCount);                  Paragraph* paragraphs = document.GetParagraphZero();                    Assert.AreEqual(0' paragraphs[0].CharIndex); // "Some text' lalala.\n"                  Assert.AreEqual(19' paragraphs[0].CharCount);                  Assert.AreEqual(0' paragraphs[0].RunIndex);                  Assert.AreEqual(1' paragraphs[0].RunCount);                    Assert.AreEqual(19' paragraphs[1].CharIndex); // "More text.Tab\t.\n"                  Assert.AreEqual(16' paragraphs[1].CharCount);                  Assert.AreEqual(1' paragraphs[1].RunIndex);                  Assert.AreEqual(4' paragraphs[1].RunCount);                    Assert.AreEqual(35' paragraphs[2].CharIndex); // "\n"                  Assert.AreEqual(1' paragraphs[2].CharCount);                  Assert.AreEqual(5' paragraphs[2].RunIndex);                  Assert.AreEqual(1' paragraphs[2].RunCount);                    Assert.AreEqual(36' paragraphs[3].CharIndex); // "( )"                  Assert.AreEqual(3' paragraphs[3].CharCount);                  Assert.AreEqual(6' paragraphs[3].RunIndex);                  Assert.AreEqual(3' paragraphs[3].RunCount);                    // Check run table.                  Assert.AreEqual(9' document.RunCount);                  Run* runs = document.GetRunZero();                    Assert.AreEqual(RunKind.Text' runs[0].RunKind); // "Some text' lalala.\n"                  Assert.AreEqual(19' runs[0].CharCount);                  Assert.AreEqual(1' runs[0].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[1].RunKind); // "More text."                  Assert.AreEqual(10' runs[1].CharCount);                  Assert.AreEqual(1' runs[1].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[2].RunKind); // "Tab"                  Assert.AreEqual(3' runs[2].CharCount);                  Assert.AreEqual(2' runs[2].StyleIndex);                    Assert.AreEqual(RunKind.Tab' runs[3].RunKind); // "\t"                  Assert.AreEqual(1' runs[3].CharCount);                  Assert.AreEqual(2' runs[3].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[4].RunKind); // ".\n"                  Assert.AreEqual(2' runs[4].CharCount);                  Assert.AreEqual(2' runs[4].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[5].RunKind); // "\n"                  Assert.AreEqual(1' runs[5].CharCount);                  Assert.AreEqual(3' runs[5].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[6].RunKind); // "("                  Assert.AreEqual(1' runs[6].CharCount);                  Assert.AreEqual(2' runs[6].StyleIndex);                    Assert.AreEqual(RunKind.Object' runs[7].RunKind); // "("                  Assert.AreEqual(1' runs[7].CharCount);                  Assert.AreEqual(2' runs[7].StyleIndex);                  Assert.AreEqual(0' runs[7].ObjectIndex);                    Assert.AreEqual(RunKind.Text' runs[8].RunKind); // ")"                  Assert.AreEqual(1' runs[8].CharCount);                  Assert.AreEqual(2' runs[8].StyleIndex);                    // Check that paragraph changed notifications were raised as needed.                  Assert.AreElementsEqual(new[] { 0' 1' 2' 2' 3' 3' 3 }' changedParagraphIndices);              });
Magic Number,Gallio.Common.Splash.Tests,SplashDocumentTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Common\Gallio.Common.Splash.Tests\SplashDocumentTest.cs,AppendStuff,The following statement contains a magic number: Assert.Multiple(() =>              {                  // Check char content.                  Assert.AreEqual("Some text' lalala.\nMore text.Tab\t.\n\n( )"' document.ToString());                    // Check style table.                  Assert.AreEqual(4' document.StyleCount);                  Assert.AreEqual(Style.Default' document.LookupStyle(0));                  Assert.AreEqual(style1' document.LookupStyle(1));                  Assert.AreEqual(style2' document.LookupStyle(2));                  Assert.AreEqual(style3' document.LookupStyle(3));                    // Check object table.                  Assert.AreEqual(1' document.ObjectCount);                  Assert.AreEqual(embeddedObject' document.LookupObject(0));                    // Check paragraph table.                  Assert.AreEqual(4' document.ParagraphCount);                  Paragraph* paragraphs = document.GetParagraphZero();                    Assert.AreEqual(0' paragraphs[0].CharIndex); // "Some text' lalala.\n"                  Assert.AreEqual(19' paragraphs[0].CharCount);                  Assert.AreEqual(0' paragraphs[0].RunIndex);                  Assert.AreEqual(1' paragraphs[0].RunCount);                    Assert.AreEqual(19' paragraphs[1].CharIndex); // "More text.Tab\t.\n"                  Assert.AreEqual(16' paragraphs[1].CharCount);                  Assert.AreEqual(1' paragraphs[1].RunIndex);                  Assert.AreEqual(4' paragraphs[1].RunCount);                    Assert.AreEqual(35' paragraphs[2].CharIndex); // "\n"                  Assert.AreEqual(1' paragraphs[2].CharCount);                  Assert.AreEqual(5' paragraphs[2].RunIndex);                  Assert.AreEqual(1' paragraphs[2].RunCount);                    Assert.AreEqual(36' paragraphs[3].CharIndex); // "( )"                  Assert.AreEqual(3' paragraphs[3].CharCount);                  Assert.AreEqual(6' paragraphs[3].RunIndex);                  Assert.AreEqual(3' paragraphs[3].RunCount);                    // Check run table.                  Assert.AreEqual(9' document.RunCount);                  Run* runs = document.GetRunZero();                    Assert.AreEqual(RunKind.Text' runs[0].RunKind); // "Some text' lalala.\n"                  Assert.AreEqual(19' runs[0].CharCount);                  Assert.AreEqual(1' runs[0].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[1].RunKind); // "More text."                  Assert.AreEqual(10' runs[1].CharCount);                  Assert.AreEqual(1' runs[1].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[2].RunKind); // "Tab"                  Assert.AreEqual(3' runs[2].CharCount);                  Assert.AreEqual(2' runs[2].StyleIndex);                    Assert.AreEqual(RunKind.Tab' runs[3].RunKind); // "\t"                  Assert.AreEqual(1' runs[3].CharCount);                  Assert.AreEqual(2' runs[3].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[4].RunKind); // ".\n"                  Assert.AreEqual(2' runs[4].CharCount);                  Assert.AreEqual(2' runs[4].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[5].RunKind); // "\n"                  Assert.AreEqual(1' runs[5].CharCount);                  Assert.AreEqual(3' runs[5].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[6].RunKind); // "("                  Assert.AreEqual(1' runs[6].CharCount);                  Assert.AreEqual(2' runs[6].StyleIndex);                    Assert.AreEqual(RunKind.Object' runs[7].RunKind); // "("                  Assert.AreEqual(1' runs[7].CharCount);                  Assert.AreEqual(2' runs[7].StyleIndex);                  Assert.AreEqual(0' runs[7].ObjectIndex);                    Assert.AreEqual(RunKind.Text' runs[8].RunKind); // ")"                  Assert.AreEqual(1' runs[8].CharCount);                  Assert.AreEqual(2' runs[8].StyleIndex);                    // Check that paragraph changed notifications were raised as needed.                  Assert.AreElementsEqual(new[] { 0' 1' 2' 2' 3' 3' 3 }' changedParagraphIndices);              });
Magic Number,Gallio.Common.Splash.Tests,SplashDocumentTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Common\Gallio.Common.Splash.Tests\SplashDocumentTest.cs,AppendStuff,The following statement contains a magic number: Assert.Multiple(() =>              {                  // Check char content.                  Assert.AreEqual("Some text' lalala.\nMore text.Tab\t.\n\n( )"' document.ToString());                    // Check style table.                  Assert.AreEqual(4' document.StyleCount);                  Assert.AreEqual(Style.Default' document.LookupStyle(0));                  Assert.AreEqual(style1' document.LookupStyle(1));                  Assert.AreEqual(style2' document.LookupStyle(2));                  Assert.AreEqual(style3' document.LookupStyle(3));                    // Check object table.                  Assert.AreEqual(1' document.ObjectCount);                  Assert.AreEqual(embeddedObject' document.LookupObject(0));                    // Check paragraph table.                  Assert.AreEqual(4' document.ParagraphCount);                  Paragraph* paragraphs = document.GetParagraphZero();                    Assert.AreEqual(0' paragraphs[0].CharIndex); // "Some text' lalala.\n"                  Assert.AreEqual(19' paragraphs[0].CharCount);                  Assert.AreEqual(0' paragraphs[0].RunIndex);                  Assert.AreEqual(1' paragraphs[0].RunCount);                    Assert.AreEqual(19' paragraphs[1].CharIndex); // "More text.Tab\t.\n"                  Assert.AreEqual(16' paragraphs[1].CharCount);                  Assert.AreEqual(1' paragraphs[1].RunIndex);                  Assert.AreEqual(4' paragraphs[1].RunCount);                    Assert.AreEqual(35' paragraphs[2].CharIndex); // "\n"                  Assert.AreEqual(1' paragraphs[2].CharCount);                  Assert.AreEqual(5' paragraphs[2].RunIndex);                  Assert.AreEqual(1' paragraphs[2].RunCount);                    Assert.AreEqual(36' paragraphs[3].CharIndex); // "( )"                  Assert.AreEqual(3' paragraphs[3].CharCount);                  Assert.AreEqual(6' paragraphs[3].RunIndex);                  Assert.AreEqual(3' paragraphs[3].RunCount);                    // Check run table.                  Assert.AreEqual(9' document.RunCount);                  Run* runs = document.GetRunZero();                    Assert.AreEqual(RunKind.Text' runs[0].RunKind); // "Some text' lalala.\n"                  Assert.AreEqual(19' runs[0].CharCount);                  Assert.AreEqual(1' runs[0].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[1].RunKind); // "More text."                  Assert.AreEqual(10' runs[1].CharCount);                  Assert.AreEqual(1' runs[1].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[2].RunKind); // "Tab"                  Assert.AreEqual(3' runs[2].CharCount);                  Assert.AreEqual(2' runs[2].StyleIndex);                    Assert.AreEqual(RunKind.Tab' runs[3].RunKind); // "\t"                  Assert.AreEqual(1' runs[3].CharCount);                  Assert.AreEqual(2' runs[3].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[4].RunKind); // ".\n"                  Assert.AreEqual(2' runs[4].CharCount);                  Assert.AreEqual(2' runs[4].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[5].RunKind); // "\n"                  Assert.AreEqual(1' runs[5].CharCount);                  Assert.AreEqual(3' runs[5].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[6].RunKind); // "("                  Assert.AreEqual(1' runs[6].CharCount);                  Assert.AreEqual(2' runs[6].StyleIndex);                    Assert.AreEqual(RunKind.Object' runs[7].RunKind); // "("                  Assert.AreEqual(1' runs[7].CharCount);                  Assert.AreEqual(2' runs[7].StyleIndex);                  Assert.AreEqual(0' runs[7].ObjectIndex);                    Assert.AreEqual(RunKind.Text' runs[8].RunKind); // ")"                  Assert.AreEqual(1' runs[8].CharCount);                  Assert.AreEqual(2' runs[8].StyleIndex);                    // Check that paragraph changed notifications were raised as needed.                  Assert.AreElementsEqual(new[] { 0' 1' 2' 2' 3' 3' 3 }' changedParagraphIndices);              });
Magic Number,Gallio.Common.Splash.Tests,SplashDocumentTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Common\Gallio.Common.Splash.Tests\SplashDocumentTest.cs,AppendStuff,The following statement contains a magic number: Assert.Multiple(() =>              {                  // Check char content.                  Assert.AreEqual("Some text' lalala.\nMore text.Tab\t.\n\n( )"' document.ToString());                    // Check style table.                  Assert.AreEqual(4' document.StyleCount);                  Assert.AreEqual(Style.Default' document.LookupStyle(0));                  Assert.AreEqual(style1' document.LookupStyle(1));                  Assert.AreEqual(style2' document.LookupStyle(2));                  Assert.AreEqual(style3' document.LookupStyle(3));                    // Check object table.                  Assert.AreEqual(1' document.ObjectCount);                  Assert.AreEqual(embeddedObject' document.LookupObject(0));                    // Check paragraph table.                  Assert.AreEqual(4' document.ParagraphCount);                  Paragraph* paragraphs = document.GetParagraphZero();                    Assert.AreEqual(0' paragraphs[0].CharIndex); // "Some text' lalala.\n"                  Assert.AreEqual(19' paragraphs[0].CharCount);                  Assert.AreEqual(0' paragraphs[0].RunIndex);                  Assert.AreEqual(1' paragraphs[0].RunCount);                    Assert.AreEqual(19' paragraphs[1].CharIndex); // "More text.Tab\t.\n"                  Assert.AreEqual(16' paragraphs[1].CharCount);                  Assert.AreEqual(1' paragraphs[1].RunIndex);                  Assert.AreEqual(4' paragraphs[1].RunCount);                    Assert.AreEqual(35' paragraphs[2].CharIndex); // "\n"                  Assert.AreEqual(1' paragraphs[2].CharCount);                  Assert.AreEqual(5' paragraphs[2].RunIndex);                  Assert.AreEqual(1' paragraphs[2].RunCount);                    Assert.AreEqual(36' paragraphs[3].CharIndex); // "( )"                  Assert.AreEqual(3' paragraphs[3].CharCount);                  Assert.AreEqual(6' paragraphs[3].RunIndex);                  Assert.AreEqual(3' paragraphs[3].RunCount);                    // Check run table.                  Assert.AreEqual(9' document.RunCount);                  Run* runs = document.GetRunZero();                    Assert.AreEqual(RunKind.Text' runs[0].RunKind); // "Some text' lalala.\n"                  Assert.AreEqual(19' runs[0].CharCount);                  Assert.AreEqual(1' runs[0].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[1].RunKind); // "More text."                  Assert.AreEqual(10' runs[1].CharCount);                  Assert.AreEqual(1' runs[1].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[2].RunKind); // "Tab"                  Assert.AreEqual(3' runs[2].CharCount);                  Assert.AreEqual(2' runs[2].StyleIndex);                    Assert.AreEqual(RunKind.Tab' runs[3].RunKind); // "\t"                  Assert.AreEqual(1' runs[3].CharCount);                  Assert.AreEqual(2' runs[3].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[4].RunKind); // ".\n"                  Assert.AreEqual(2' runs[4].CharCount);                  Assert.AreEqual(2' runs[4].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[5].RunKind); // "\n"                  Assert.AreEqual(1' runs[5].CharCount);                  Assert.AreEqual(3' runs[5].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[6].RunKind); // "("                  Assert.AreEqual(1' runs[6].CharCount);                  Assert.AreEqual(2' runs[6].StyleIndex);                    Assert.AreEqual(RunKind.Object' runs[7].RunKind); // "("                  Assert.AreEqual(1' runs[7].CharCount);                  Assert.AreEqual(2' runs[7].StyleIndex);                  Assert.AreEqual(0' runs[7].ObjectIndex);                    Assert.AreEqual(RunKind.Text' runs[8].RunKind); // ")"                  Assert.AreEqual(1' runs[8].CharCount);                  Assert.AreEqual(2' runs[8].StyleIndex);                    // Check that paragraph changed notifications were raised as needed.                  Assert.AreElementsEqual(new[] { 0' 1' 2' 2' 3' 3' 3 }' changedParagraphIndices);              });
Magic Number,Gallio.Common.Splash.Tests,SplashDocumentTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Common\Gallio.Common.Splash.Tests\SplashDocumentTest.cs,AppendStuff,The following statement contains a magic number: Assert.Multiple(() =>              {                  // Check char content.                  Assert.AreEqual("Some text' lalala.\nMore text.Tab\t.\n\n( )"' document.ToString());                    // Check style table.                  Assert.AreEqual(4' document.StyleCount);                  Assert.AreEqual(Style.Default' document.LookupStyle(0));                  Assert.AreEqual(style1' document.LookupStyle(1));                  Assert.AreEqual(style2' document.LookupStyle(2));                  Assert.AreEqual(style3' document.LookupStyle(3));                    // Check object table.                  Assert.AreEqual(1' document.ObjectCount);                  Assert.AreEqual(embeddedObject' document.LookupObject(0));                    // Check paragraph table.                  Assert.AreEqual(4' document.ParagraphCount);                  Paragraph* paragraphs = document.GetParagraphZero();                    Assert.AreEqual(0' paragraphs[0].CharIndex); // "Some text' lalala.\n"                  Assert.AreEqual(19' paragraphs[0].CharCount);                  Assert.AreEqual(0' paragraphs[0].RunIndex);                  Assert.AreEqual(1' paragraphs[0].RunCount);                    Assert.AreEqual(19' paragraphs[1].CharIndex); // "More text.Tab\t.\n"                  Assert.AreEqual(16' paragraphs[1].CharCount);                  Assert.AreEqual(1' paragraphs[1].RunIndex);                  Assert.AreEqual(4' paragraphs[1].RunCount);                    Assert.AreEqual(35' paragraphs[2].CharIndex); // "\n"                  Assert.AreEqual(1' paragraphs[2].CharCount);                  Assert.AreEqual(5' paragraphs[2].RunIndex);                  Assert.AreEqual(1' paragraphs[2].RunCount);                    Assert.AreEqual(36' paragraphs[3].CharIndex); // "( )"                  Assert.AreEqual(3' paragraphs[3].CharCount);                  Assert.AreEqual(6' paragraphs[3].RunIndex);                  Assert.AreEqual(3' paragraphs[3].RunCount);                    // Check run table.                  Assert.AreEqual(9' document.RunCount);                  Run* runs = document.GetRunZero();                    Assert.AreEqual(RunKind.Text' runs[0].RunKind); // "Some text' lalala.\n"                  Assert.AreEqual(19' runs[0].CharCount);                  Assert.AreEqual(1' runs[0].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[1].RunKind); // "More text."                  Assert.AreEqual(10' runs[1].CharCount);                  Assert.AreEqual(1' runs[1].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[2].RunKind); // "Tab"                  Assert.AreEqual(3' runs[2].CharCount);                  Assert.AreEqual(2' runs[2].StyleIndex);                    Assert.AreEqual(RunKind.Tab' runs[3].RunKind); // "\t"                  Assert.AreEqual(1' runs[3].CharCount);                  Assert.AreEqual(2' runs[3].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[4].RunKind); // ".\n"                  Assert.AreEqual(2' runs[4].CharCount);                  Assert.AreEqual(2' runs[4].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[5].RunKind); // "\n"                  Assert.AreEqual(1' runs[5].CharCount);                  Assert.AreEqual(3' runs[5].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[6].RunKind); // "("                  Assert.AreEqual(1' runs[6].CharCount);                  Assert.AreEqual(2' runs[6].StyleIndex);                    Assert.AreEqual(RunKind.Object' runs[7].RunKind); // "("                  Assert.AreEqual(1' runs[7].CharCount);                  Assert.AreEqual(2' runs[7].StyleIndex);                  Assert.AreEqual(0' runs[7].ObjectIndex);                    Assert.AreEqual(RunKind.Text' runs[8].RunKind); // ")"                  Assert.AreEqual(1' runs[8].CharCount);                  Assert.AreEqual(2' runs[8].StyleIndex);                    // Check that paragraph changed notifications were raised as needed.                  Assert.AreElementsEqual(new[] { 0' 1' 2' 2' 3' 3' 3 }' changedParagraphIndices);              });
Magic Number,Gallio.Common.Splash.Tests,SplashDocumentTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Common\Gallio.Common.Splash.Tests\SplashDocumentTest.cs,AppendStuff,The following statement contains a magic number: Assert.Multiple(() =>              {                  // Check char content.                  Assert.AreEqual("Some text' lalala.\nMore text.Tab\t.\n\n( )"' document.ToString());                    // Check style table.                  Assert.AreEqual(4' document.StyleCount);                  Assert.AreEqual(Style.Default' document.LookupStyle(0));                  Assert.AreEqual(style1' document.LookupStyle(1));                  Assert.AreEqual(style2' document.LookupStyle(2));                  Assert.AreEqual(style3' document.LookupStyle(3));                    // Check object table.                  Assert.AreEqual(1' document.ObjectCount);                  Assert.AreEqual(embeddedObject' document.LookupObject(0));                    // Check paragraph table.                  Assert.AreEqual(4' document.ParagraphCount);                  Paragraph* paragraphs = document.GetParagraphZero();                    Assert.AreEqual(0' paragraphs[0].CharIndex); // "Some text' lalala.\n"                  Assert.AreEqual(19' paragraphs[0].CharCount);                  Assert.AreEqual(0' paragraphs[0].RunIndex);                  Assert.AreEqual(1' paragraphs[0].RunCount);                    Assert.AreEqual(19' paragraphs[1].CharIndex); // "More text.Tab\t.\n"                  Assert.AreEqual(16' paragraphs[1].CharCount);                  Assert.AreEqual(1' paragraphs[1].RunIndex);                  Assert.AreEqual(4' paragraphs[1].RunCount);                    Assert.AreEqual(35' paragraphs[2].CharIndex); // "\n"                  Assert.AreEqual(1' paragraphs[2].CharCount);                  Assert.AreEqual(5' paragraphs[2].RunIndex);                  Assert.AreEqual(1' paragraphs[2].RunCount);                    Assert.AreEqual(36' paragraphs[3].CharIndex); // "( )"                  Assert.AreEqual(3' paragraphs[3].CharCount);                  Assert.AreEqual(6' paragraphs[3].RunIndex);                  Assert.AreEqual(3' paragraphs[3].RunCount);                    // Check run table.                  Assert.AreEqual(9' document.RunCount);                  Run* runs = document.GetRunZero();                    Assert.AreEqual(RunKind.Text' runs[0].RunKind); // "Some text' lalala.\n"                  Assert.AreEqual(19' runs[0].CharCount);                  Assert.AreEqual(1' runs[0].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[1].RunKind); // "More text."                  Assert.AreEqual(10' runs[1].CharCount);                  Assert.AreEqual(1' runs[1].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[2].RunKind); // "Tab"                  Assert.AreEqual(3' runs[2].CharCount);                  Assert.AreEqual(2' runs[2].StyleIndex);                    Assert.AreEqual(RunKind.Tab' runs[3].RunKind); // "\t"                  Assert.AreEqual(1' runs[3].CharCount);                  Assert.AreEqual(2' runs[3].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[4].RunKind); // ".\n"                  Assert.AreEqual(2' runs[4].CharCount);                  Assert.AreEqual(2' runs[4].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[5].RunKind); // "\n"                  Assert.AreEqual(1' runs[5].CharCount);                  Assert.AreEqual(3' runs[5].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[6].RunKind); // "("                  Assert.AreEqual(1' runs[6].CharCount);                  Assert.AreEqual(2' runs[6].StyleIndex);                    Assert.AreEqual(RunKind.Object' runs[7].RunKind); // "("                  Assert.AreEqual(1' runs[7].CharCount);                  Assert.AreEqual(2' runs[7].StyleIndex);                  Assert.AreEqual(0' runs[7].ObjectIndex);                    Assert.AreEqual(RunKind.Text' runs[8].RunKind); // ")"                  Assert.AreEqual(1' runs[8].CharCount);                  Assert.AreEqual(2' runs[8].StyleIndex);                    // Check that paragraph changed notifications were raised as needed.                  Assert.AreElementsEqual(new[] { 0' 1' 2' 2' 3' 3' 3 }' changedParagraphIndices);              });
Magic Number,Gallio.Common.Splash.Tests,SplashDocumentTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Common\Gallio.Common.Splash.Tests\SplashDocumentTest.cs,AppendStuff,The following statement contains a magic number: Assert.Multiple(() =>              {                  // Check char content.                  Assert.AreEqual("Some text' lalala.\nMore text.Tab\t.\n\n( )"' document.ToString());                    // Check style table.                  Assert.AreEqual(4' document.StyleCount);                  Assert.AreEqual(Style.Default' document.LookupStyle(0));                  Assert.AreEqual(style1' document.LookupStyle(1));                  Assert.AreEqual(style2' document.LookupStyle(2));                  Assert.AreEqual(style3' document.LookupStyle(3));                    // Check object table.                  Assert.AreEqual(1' document.ObjectCount);                  Assert.AreEqual(embeddedObject' document.LookupObject(0));                    // Check paragraph table.                  Assert.AreEqual(4' document.ParagraphCount);                  Paragraph* paragraphs = document.GetParagraphZero();                    Assert.AreEqual(0' paragraphs[0].CharIndex); // "Some text' lalala.\n"                  Assert.AreEqual(19' paragraphs[0].CharCount);                  Assert.AreEqual(0' paragraphs[0].RunIndex);                  Assert.AreEqual(1' paragraphs[0].RunCount);                    Assert.AreEqual(19' paragraphs[1].CharIndex); // "More text.Tab\t.\n"                  Assert.AreEqual(16' paragraphs[1].CharCount);                  Assert.AreEqual(1' paragraphs[1].RunIndex);                  Assert.AreEqual(4' paragraphs[1].RunCount);                    Assert.AreEqual(35' paragraphs[2].CharIndex); // "\n"                  Assert.AreEqual(1' paragraphs[2].CharCount);                  Assert.AreEqual(5' paragraphs[2].RunIndex);                  Assert.AreEqual(1' paragraphs[2].RunCount);                    Assert.AreEqual(36' paragraphs[3].CharIndex); // "( )"                  Assert.AreEqual(3' paragraphs[3].CharCount);                  Assert.AreEqual(6' paragraphs[3].RunIndex);                  Assert.AreEqual(3' paragraphs[3].RunCount);                    // Check run table.                  Assert.AreEqual(9' document.RunCount);                  Run* runs = document.GetRunZero();                    Assert.AreEqual(RunKind.Text' runs[0].RunKind); // "Some text' lalala.\n"                  Assert.AreEqual(19' runs[0].CharCount);                  Assert.AreEqual(1' runs[0].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[1].RunKind); // "More text."                  Assert.AreEqual(10' runs[1].CharCount);                  Assert.AreEqual(1' runs[1].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[2].RunKind); // "Tab"                  Assert.AreEqual(3' runs[2].CharCount);                  Assert.AreEqual(2' runs[2].StyleIndex);                    Assert.AreEqual(RunKind.Tab' runs[3].RunKind); // "\t"                  Assert.AreEqual(1' runs[3].CharCount);                  Assert.AreEqual(2' runs[3].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[4].RunKind); // ".\n"                  Assert.AreEqual(2' runs[4].CharCount);                  Assert.AreEqual(2' runs[4].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[5].RunKind); // "\n"                  Assert.AreEqual(1' runs[5].CharCount);                  Assert.AreEqual(3' runs[5].StyleIndex);                    Assert.AreEqual(RunKind.Text' runs[6].RunKind); // "("                  Assert.AreEqual(1' runs[6].CharCount);                  Assert.AreEqual(2' runs[6].StyleIndex);                    Assert.AreEqual(RunKind.Object' runs[7].RunKind); // "("                  Assert.AreEqual(1' runs[7].CharCount);                  Assert.AreEqual(2' runs[7].StyleIndex);                  Assert.AreEqual(0' runs[7].ObjectIndex);                    Assert.AreEqual(RunKind.Text' runs[8].RunKind); // ")"                  Assert.AreEqual(1' runs[8].CharCount);                  Assert.AreEqual(2' runs[8].StyleIndex);                    // Check that paragraph changed notifications were raised as needed.                  Assert.AreElementsEqual(new[] { 0' 1' 2' 2' 3' 3' 3 }' changedParagraphIndices);              });
Magic Number,Gallio.Common.Splash.Tests,StyleBuilderTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Common\Gallio.Common.Splash.Tests\StyleBuilderTest.cs,TabStopRuler_SetGet,The following statement contains a magic number: var ruler = new PixelTabStopRuler(30' 10);
Magic Number,Gallio.Common.Splash.Tests,StyleBuilderTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Common\Gallio.Common.Splash.Tests\StyleBuilderTest.cs,TabStopRuler_SetGet,The following statement contains a magic number: var ruler = new PixelTabStopRuler(30' 10);
Magic Number,Gallio.Common.Splash.Tests,StyleBuilderTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Common\Gallio.Common.Splash.Tests\StyleBuilderTest.cs,LeftMargin_SetGet,The following statement contains a magic number: builder.LeftMargin = 10;
Magic Number,Gallio.Common.Splash.Tests,StyleBuilderTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Common\Gallio.Common.Splash.Tests\StyleBuilderTest.cs,LeftMargin_SetGet,The following statement contains a magic number: Assert.AreEqual(10' builder.LeftMargin.Value);
Magic Number,Gallio.Common.Splash.Tests,StyleBuilderTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Common\Gallio.Common.Splash.Tests\StyleBuilderTest.cs,RightMargin_SetGet,The following statement contains a magic number: builder.RightMargin = 10;
Magic Number,Gallio.Common.Splash.Tests,StyleBuilderTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Common\Gallio.Common.Splash.Tests\StyleBuilderTest.cs,RightMargin_SetGet,The following statement contains a magic number: Assert.AreEqual(10' builder.RightMargin.Value);
Magic Number,Gallio.Common.Splash.Tests,StyleBuilderTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Common\Gallio.Common.Splash.Tests\StyleBuilderTest.cs,FirstLineIndent_SetGet,The following statement contains a magic number: builder.FirstLineIndent = 10;
Magic Number,Gallio.Common.Splash.Tests,StyleBuilderTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Common\Gallio.Common.Splash.Tests\StyleBuilderTest.cs,FirstLineIndent_SetGet,The following statement contains a magic number: Assert.AreEqual(10' builder.FirstLineIndent.Value);
Magic Number,Gallio.Common.Splash.Tests,StyleBuilderTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Common\Gallio.Common.Splash.Tests\StyleBuilderTest.cs,ToStyle_WhenInheritedStyleIsNotNullAndNoPropertiesAreInherited_ReturnsStyleGeneratedFromProperties,The following statement contains a magic number: var builder = new StyleBuilder()              {                  Font = SystemFonts.SmallCaptionFont'                  Color = Color.Red'                  TabStopRuler = new PixelTabStopRuler(30' 10)'                  WordWrap = false'                  LeftMargin = 10'                  RightMargin = 20'                  FirstLineIndent = 15              };
Magic Number,Gallio.Common.Splash.Tests,StyleBuilderTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Common\Gallio.Common.Splash.Tests\StyleBuilderTest.cs,ToStyle_WhenInheritedStyleIsNotNullAndNoPropertiesAreInherited_ReturnsStyleGeneratedFromProperties,The following statement contains a magic number: var builder = new StyleBuilder()              {                  Font = SystemFonts.SmallCaptionFont'                  Color = Color.Red'                  TabStopRuler = new PixelTabStopRuler(30' 10)'                  WordWrap = false'                  LeftMargin = 10'                  RightMargin = 20'                  FirstLineIndent = 15              };
Magic Number,Gallio.Common.Splash.Tests,StyleBuilderTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Common\Gallio.Common.Splash.Tests\StyleBuilderTest.cs,ToStyle_WhenInheritedStyleIsNotNullAndNoPropertiesAreInherited_ReturnsStyleGeneratedFromProperties,The following statement contains a magic number: var builder = new StyleBuilder()              {                  Font = SystemFonts.SmallCaptionFont'                  Color = Color.Red'                  TabStopRuler = new PixelTabStopRuler(30' 10)'                  WordWrap = false'                  LeftMargin = 10'                  RightMargin = 20'                  FirstLineIndent = 15              };
Magic Number,Gallio.Common.Splash.Tests,StyleBuilderTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Common\Gallio.Common.Splash.Tests\StyleBuilderTest.cs,ToStyle_WhenInheritedStyleIsNotNullAndNoPropertiesAreInherited_ReturnsStyleGeneratedFromProperties,The following statement contains a magic number: var builder = new StyleBuilder()              {                  Font = SystemFonts.SmallCaptionFont'                  Color = Color.Red'                  TabStopRuler = new PixelTabStopRuler(30' 10)'                  WordWrap = false'                  LeftMargin = 10'                  RightMargin = 20'                  FirstLineIndent = 15              };
Magic Number,Gallio.Common.Splash.Tests,StyleBuilderTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Common\Gallio.Common.Splash.Tests\StyleBuilderTest.cs,ToStyle_WhenInheritedStyleIsNotNullAndNoPropertiesAreInherited_ReturnsStyleGeneratedFromProperties,The following statement contains a magic number: var builder = new StyleBuilder()              {                  Font = SystemFonts.SmallCaptionFont'                  Color = Color.Red'                  TabStopRuler = new PixelTabStopRuler(30' 10)'                  WordWrap = false'                  LeftMargin = 10'                  RightMargin = 20'                  FirstLineIndent = 15              };
Magic Number,Gallio.Common.Splash.Tests,StyleBuilderTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Common\Gallio.Common.Splash.Tests\StyleBuilderTest.cs,ToStyle_WhenInheritedStyleIsNotNullAndNoPropertiesAreInherited_ReturnsStyleGeneratedFromProperties,The following statement contains a magic number: Assert.Multiple(() =>              {                  Assert.AreEqual(SystemFonts.SmallCaptionFont' style.Font);                  Assert.AreEqual(Color.Red' style.Color);                  Assert.AreEqual(new PixelTabStopRuler(30' 10)' style.TabStopRuler);                  Assert.AreEqual(false' style.WordWrap);                  Assert.AreEqual(10' style.LeftMargin);                  Assert.AreEqual(20' style.RightMargin);                  Assert.AreEqual(15' style.FirstLineIndent);              });
Magic Number,Gallio.Common.Splash.Tests,StyleBuilderTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Common\Gallio.Common.Splash.Tests\StyleBuilderTest.cs,ToStyle_WhenInheritedStyleIsNotNullAndNoPropertiesAreInherited_ReturnsStyleGeneratedFromProperties,The following statement contains a magic number: Assert.Multiple(() =>              {                  Assert.AreEqual(SystemFonts.SmallCaptionFont' style.Font);                  Assert.AreEqual(Color.Red' style.Color);                  Assert.AreEqual(new PixelTabStopRuler(30' 10)' style.TabStopRuler);                  Assert.AreEqual(false' style.WordWrap);                  Assert.AreEqual(10' style.LeftMargin);                  Assert.AreEqual(20' style.RightMargin);                  Assert.AreEqual(15' style.FirstLineIndent);              });
Magic Number,Gallio.Common.Splash.Tests,StyleBuilderTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Common\Gallio.Common.Splash.Tests\StyleBuilderTest.cs,ToStyle_WhenInheritedStyleIsNotNullAndNoPropertiesAreInherited_ReturnsStyleGeneratedFromProperties,The following statement contains a magic number: Assert.Multiple(() =>              {                  Assert.AreEqual(SystemFonts.SmallCaptionFont' style.Font);                  Assert.AreEqual(Color.Red' style.Color);                  Assert.AreEqual(new PixelTabStopRuler(30' 10)' style.TabStopRuler);                  Assert.AreEqual(false' style.WordWrap);                  Assert.AreEqual(10' style.LeftMargin);                  Assert.AreEqual(20' style.RightMargin);                  Assert.AreEqual(15' style.FirstLineIndent);              });
Magic Number,Gallio.Common.Splash.Tests,StyleBuilderTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Common\Gallio.Common.Splash.Tests\StyleBuilderTest.cs,ToStyle_WhenInheritedStyleIsNotNullAndNoPropertiesAreInherited_ReturnsStyleGeneratedFromProperties,The following statement contains a magic number: Assert.Multiple(() =>              {                  Assert.AreEqual(SystemFonts.SmallCaptionFont' style.Font);                  Assert.AreEqual(Color.Red' style.Color);                  Assert.AreEqual(new PixelTabStopRuler(30' 10)' style.TabStopRuler);                  Assert.AreEqual(false' style.WordWrap);                  Assert.AreEqual(10' style.LeftMargin);                  Assert.AreEqual(20' style.RightMargin);                  Assert.AreEqual(15' style.FirstLineIndent);              });
Magic Number,Gallio.Common.Splash.Tests,StyleBuilderTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Common\Gallio.Common.Splash.Tests\StyleBuilderTest.cs,ToStyle_WhenInheritedStyleIsNotNullAndNoPropertiesAreInherited_ReturnsStyleGeneratedFromProperties,The following statement contains a magic number: Assert.Multiple(() =>              {                  Assert.AreEqual(SystemFonts.SmallCaptionFont' style.Font);                  Assert.AreEqual(Color.Red' style.Color);                  Assert.AreEqual(new PixelTabStopRuler(30' 10)' style.TabStopRuler);                  Assert.AreEqual(false' style.WordWrap);                  Assert.AreEqual(10' style.LeftMargin);                  Assert.AreEqual(20' style.RightMargin);                  Assert.AreEqual(15' style.FirstLineIndent);              });
Magic Number,Gallio.Common.Splash.Tests,StyleBuilderTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Common\Gallio.Common.Splash.Tests\StyleBuilderTest.cs,ToStyleNoArguments_WhenNoPropertiesAreInherited_ReturnsStyleGeneratedFromProperties,The following statement contains a magic number: var builder = new StyleBuilder()              {                  Font = SystemFonts.SmallCaptionFont'                  Color = Color.Red'                  TabStopRuler = new PixelTabStopRuler(30' 10)'                  WordWrap = false'                  LeftMargin = 10'                  RightMargin = 20'                  FirstLineIndent = 15              };
Magic Number,Gallio.Common.Splash.Tests,StyleBuilderTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Common\Gallio.Common.Splash.Tests\StyleBuilderTest.cs,ToStyleNoArguments_WhenNoPropertiesAreInherited_ReturnsStyleGeneratedFromProperties,The following statement contains a magic number: var builder = new StyleBuilder()              {                  Font = SystemFonts.SmallCaptionFont'                  Color = Color.Red'                  TabStopRuler = new PixelTabStopRuler(30' 10)'                  WordWrap = false'                  LeftMargin = 10'                  RightMargin = 20'                  FirstLineIndent = 15              };
Magic Number,Gallio.Common.Splash.Tests,StyleBuilderTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Common\Gallio.Common.Splash.Tests\StyleBuilderTest.cs,ToStyleNoArguments_WhenNoPropertiesAreInherited_ReturnsStyleGeneratedFromProperties,The following statement contains a magic number: var builder = new StyleBuilder()              {                  Font = SystemFonts.SmallCaptionFont'                  Color = Color.Red'                  TabStopRuler = new PixelTabStopRuler(30' 10)'                  WordWrap = false'                  LeftMargin = 10'                  RightMargin = 20'                  FirstLineIndent = 15              };
Magic Number,Gallio.Common.Splash.Tests,StyleBuilderTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Common\Gallio.Common.Splash.Tests\StyleBuilderTest.cs,ToStyleNoArguments_WhenNoPropertiesAreInherited_ReturnsStyleGeneratedFromProperties,The following statement contains a magic number: var builder = new StyleBuilder()              {                  Font = SystemFonts.SmallCaptionFont'                  Color = Color.Red'                  TabStopRuler = new PixelTabStopRuler(30' 10)'                  WordWrap = false'                  LeftMargin = 10'                  RightMargin = 20'                  FirstLineIndent = 15              };
Magic Number,Gallio.Common.Splash.Tests,StyleBuilderTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Common\Gallio.Common.Splash.Tests\StyleBuilderTest.cs,ToStyleNoArguments_WhenNoPropertiesAreInherited_ReturnsStyleGeneratedFromProperties,The following statement contains a magic number: var builder = new StyleBuilder()              {                  Font = SystemFonts.SmallCaptionFont'                  Color = Color.Red'                  TabStopRuler = new PixelTabStopRuler(30' 10)'                  WordWrap = false'                  LeftMargin = 10'                  RightMargin = 20'                  FirstLineIndent = 15              };
Magic Number,Gallio.Common.Splash.Tests,StyleBuilderTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Common\Gallio.Common.Splash.Tests\StyleBuilderTest.cs,ToStyleNoArguments_WhenNoPropertiesAreInherited_ReturnsStyleGeneratedFromProperties,The following statement contains a magic number: Assert.Multiple(() =>              {                  Assert.AreEqual(SystemFonts.SmallCaptionFont' style.Font);                  Assert.AreEqual(Color.Red' style.Color);                  Assert.AreEqual(new PixelTabStopRuler(30' 10)' style.TabStopRuler);                  Assert.AreEqual(false' style.WordWrap);                  Assert.AreEqual(10' style.LeftMargin);                  Assert.AreEqual(20' style.RightMargin);                  Assert.AreEqual(15' style.FirstLineIndent);              });
Magic Number,Gallio.Common.Splash.Tests,StyleBuilderTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Common\Gallio.Common.Splash.Tests\StyleBuilderTest.cs,ToStyleNoArguments_WhenNoPropertiesAreInherited_ReturnsStyleGeneratedFromProperties,The following statement contains a magic number: Assert.Multiple(() =>              {                  Assert.AreEqual(SystemFonts.SmallCaptionFont' style.Font);                  Assert.AreEqual(Color.Red' style.Color);                  Assert.AreEqual(new PixelTabStopRuler(30' 10)' style.TabStopRuler);                  Assert.AreEqual(false' style.WordWrap);                  Assert.AreEqual(10' style.LeftMargin);                  Assert.AreEqual(20' style.RightMargin);                  Assert.AreEqual(15' style.FirstLineIndent);              });
Magic Number,Gallio.Common.Splash.Tests,StyleBuilderTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Common\Gallio.Common.Splash.Tests\StyleBuilderTest.cs,ToStyleNoArguments_WhenNoPropertiesAreInherited_ReturnsStyleGeneratedFromProperties,The following statement contains a magic number: Assert.Multiple(() =>              {                  Assert.AreEqual(SystemFonts.SmallCaptionFont' style.Font);                  Assert.AreEqual(Color.Red' style.Color);                  Assert.AreEqual(new PixelTabStopRuler(30' 10)' style.TabStopRuler);                  Assert.AreEqual(false' style.WordWrap);                  Assert.AreEqual(10' style.LeftMargin);                  Assert.AreEqual(20' style.RightMargin);                  Assert.AreEqual(15' style.FirstLineIndent);              });
Magic Number,Gallio.Common.Splash.Tests,StyleBuilderTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Common\Gallio.Common.Splash.Tests\StyleBuilderTest.cs,ToStyleNoArguments_WhenNoPropertiesAreInherited_ReturnsStyleGeneratedFromProperties,The following statement contains a magic number: Assert.Multiple(() =>              {                  Assert.AreEqual(SystemFonts.SmallCaptionFont' style.Font);                  Assert.AreEqual(Color.Red' style.Color);                  Assert.AreEqual(new PixelTabStopRuler(30' 10)' style.TabStopRuler);                  Assert.AreEqual(false' style.WordWrap);                  Assert.AreEqual(10' style.LeftMargin);                  Assert.AreEqual(20' style.RightMargin);                  Assert.AreEqual(15' style.FirstLineIndent);              });
Magic Number,Gallio.Common.Splash.Tests,StyleBuilderTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Common\Gallio.Common.Splash.Tests\StyleBuilderTest.cs,ToStyleNoArguments_WhenNoPropertiesAreInherited_ReturnsStyleGeneratedFromProperties,The following statement contains a magic number: Assert.Multiple(() =>              {                  Assert.AreEqual(SystemFonts.SmallCaptionFont' style.Font);                  Assert.AreEqual(Color.Red' style.Color);                  Assert.AreEqual(new PixelTabStopRuler(30' 10)' style.TabStopRuler);                  Assert.AreEqual(false' style.WordWrap);                  Assert.AreEqual(10' style.LeftMargin);                  Assert.AreEqual(20' style.RightMargin);                  Assert.AreEqual(15' style.FirstLineIndent);              });
Magic Number,Gallio.Common.Splash.Tests,WhenPropertyIsInherited,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Common\Gallio.Common.Splash.Tests\StylePropertyTest.cs,GetValueOrInherit_ReturnsInheritedValue,The following statement contains a magic number: Assert.AreEqual(5' property.GetValueOrInherit(5));
Magic Number,Gallio.Common.Splash.Tests,WhenPropertyIsInherited,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Common\Gallio.Common.Splash.Tests\StylePropertyTest.cs,GetValueOrInherit_ReturnsInheritedValue,The following statement contains a magic number: Assert.AreEqual(5' property.GetValueOrInherit(5));
Magic Number,Gallio.Common.Splash.Tests,WhenPropertyIsNotInherited,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Common\Gallio.Common.Splash.Tests\StylePropertyTest.cs,Inherited_ReturnsFalse,The following statement contains a magic number: var property = new StyleProperty<int>(5);
Magic Number,Gallio.Common.Splash.Tests,WhenPropertyIsNotInherited,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Common\Gallio.Common.Splash.Tests\StylePropertyTest.cs,Value_ReturnsValue,The following statement contains a magic number: var property = new StyleProperty<int>(5);
Magic Number,Gallio.Common.Splash.Tests,WhenPropertyIsNotInherited,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Common\Gallio.Common.Splash.Tests\StylePropertyTest.cs,Value_ReturnsValue,The following statement contains a magic number: Assert.AreEqual(5' property.Value);
Magic Number,Gallio.Common.Splash.Tests,WhenPropertyIsNotInherited,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Common\Gallio.Common.Splash.Tests\StylePropertyTest.cs,GetValueOrInherit_ReturnsValue,The following statement contains a magic number: var property = new StyleProperty<int>(5);
Magic Number,Gallio.Common.Splash.Tests,WhenPropertyIsNotInherited,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Common\Gallio.Common.Splash.Tests\StylePropertyTest.cs,GetValueOrInherit_ReturnsValue,The following statement contains a magic number: Assert.AreEqual(5' property.GetValueOrInherit(5));
Magic Number,Gallio.Common.Splash.Tests,WhenPropertyIsNotInherited,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Common\Gallio.Common.Splash.Tests\StylePropertyTest.cs,GetValueOrInherit_ReturnsValue,The following statement contains a magic number: Assert.AreEqual(5' property.GetValueOrInherit(5));
Magic Number,Gallio.Common.Splash.Tests,WhenPropertyIsNotInherited,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Common\Gallio.Common.Splash.Tests\StylePropertyTest.cs,ImplicitConversion_ReturnsProperty,The following statement contains a magic number: StyleProperty<int> property = 5;
Magic Number,Gallio.Common.Splash.Tests,WhenPropertyIsNotInherited,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Common\Gallio.Common.Splash.Tests\StylePropertyTest.cs,ImplicitConversion_ReturnsProperty,The following statement contains a magic number: Assert.AreEqual(5' property.Value);
Magic Number,Gallio.Common.Splash.Tests,StyleTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Common\Gallio.Common.Splash.Tests\StyleTest.cs,CreateDefaultStyle_ReturnsStyleGeneratedFromSystemProperties,The following statement contains a magic number: Assert.Multiple(() =>              {                  Assert.AreEqual(SystemFonts.DefaultFont' style.Font);                  Assert.AreEqual(SystemColors.WindowText' style.Color);                  Assert.AreEqual(60' ((PixelTabStopRuler)style.TabStopRuler).PixelsPerTabStop);                  Assert.AreEqual(10' ((PixelTabStopRuler)style.TabStopRuler).MinimumTabWidth);                  Assert.IsTrue(style.WordWrap);                  Assert.AreEqual(0' style.LeftMargin);                  Assert.AreEqual(0' style.RightMargin);                  Assert.AreEqual(0' style.FirstLineIndent);              });
Magic Number,Gallio.Common.Splash.Tests,StyleTest,D:\research\architectureSmells\repos\Gallio_mbunit-v3\src\Common\Gallio.Common.Splash.Tests\StyleTest.cs,CreateDefaultStyle_ReturnsStyleGeneratedFromSystemProperties,The following statement contains a magic number: Assert.Multiple(() =>              {                  Assert.AreEqual(SystemFonts.DefaultFont' style.Font);                  Assert.AreEqual(SystemColors.WindowText' style.Color);                  Assert.AreEqual(60' ((PixelTabStopRuler)style.TabStopRuler).PixelsPerTabStop);                  Assert.AreEqual(10' ((PixelTabStopRuler)style.TabStopRuler).MinimumTabWidth);                  Assert.IsTrue(style.WordWrap);                  Assert.AreEqual(0' style.LeftMargin);                  Assert.AreEqual(0' style.RightMargin);                  Assert.AreEqual(0' style.FirstLineIndent);              });
